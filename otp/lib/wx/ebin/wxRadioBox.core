module 'wxRadioBox' ['cacheBestSize'/2,
		     'captureMouse'/1,
		     'center'/1,
		     'center'/2,
		     'centerOnParent'/1,
		     'centerOnParent'/2,
		     'centre'/1,
		     'centre'/2,
		     'centreOnParent'/1,
		     'centreOnParent'/2,
		     'clearBackground'/1,
		     'clientToScreen'/2,
		     'clientToScreen'/3,
		     'close'/1,
		     'close'/2,
		     'connect'/2,
		     'connect'/3,
		     'convertDialogToPixels'/2,
		     'convertPixelsToDialog'/2,
		     'create'/7,
		     'create'/8,
		     'destroy'/1,
		     'destroyChildren'/1,
		     'disable'/1,
		     'disconnect'/1,
		     'disconnect'/2,
		     'disconnect'/3,
		     'enable'/1,
		     'enable'/2,
		     'enable'/3,
		     'findWindow'/2,
		     'fit'/1,
		     'fitInside'/1,
		     'freeze'/1,
		     'getAcceleratorTable'/1,
		     'getBackgroundColour'/1,
		     'getBackgroundStyle'/1,
		     'getBestSize'/1,
		     'getCaret'/1,
		     'getCharHeight'/1,
		     'getCharWidth'/1,
		     'getChildren'/1,
		     'getClientSize'/1,
		     'getColumnCount'/1,
		     'getContainingSizer'/1,
		     'getCursor'/1,
		     'getDropTarget'/1,
		     'getEventHandler'/1,
		     'getExtraStyle'/1,
		     'getFont'/1,
		     'getForegroundColour'/1,
		     'getGrandParent'/1,
		     'getHandle'/1,
		     'getHelpText'/1,
		     'getId'/1,
		     'getItemFromPoint'/2,
		     'getItemHelpText'/2,
		     'getItemToolTip'/2,
		     'getLabel'/1,
		     'getMaxSize'/1,
		     'getMinSize'/1,
		     'getName'/1,
		     'getParent'/1,
		     'getPosition'/1,
		     'getRect'/1,
		     'getRowCount'/1,
		     'getScreenPosition'/1,
		     'getScreenRect'/1,
		     'getScrollPos'/2,
		     'getScrollRange'/2,
		     'getScrollThumb'/2,
		     'getSelection'/1,
		     'getSize'/1,
		     'getSizer'/1,
		     'getString'/2,
		     'getTextExtent'/2,
		     'getTextExtent'/3,
		     'getToolTip'/1,
		     'getUpdateRegion'/1,
		     'getVirtualSize'/1,
		     'getWindowStyleFlag'/1,
		     'getWindowVariant'/1,
		     'hasCapture'/1,
		     'hasScrollbar'/2,
		     'hasTransparentBackground'/1,
		     'hide'/1,
		     'inheritAttributes'/1,
		     'initDialog'/1,
		     'invalidateBestSize'/1,
		     'isEnabled'/1,
		     'isExposed'/2,
		     'isExposed'/3,
		     'isExposed'/5,
		     'isItemEnabled'/2,
		     'isItemShown'/2,
		     'isRetained'/1,
		     'isShown'/1,
		     'isTopLevel'/1,
		     'layout'/1,
		     'lineDown'/1,
		     'lineUp'/1,
		     'lower'/1,
		     'makeModal'/1,
		     'makeModal'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'move'/2,
		     'move'/3,
		     'move'/4,
		     'moveAfterInTabOrder'/2,
		     'moveBeforeInTabOrder'/2,
		     'navigate'/1,
		     'navigate'/2,
		     'new'/6,
		     'new'/7,
		     'pageDown'/1,
		     'pageUp'/1,
		     'parent_class'/1,
		     'popEventHandler'/1,
		     'popEventHandler'/2,
		     'popupMenu'/2,
		     'popupMenu'/3,
		     'popupMenu'/4,
		     'raise'/1,
		     'refresh'/1,
		     'refresh'/2,
		     'refreshRect'/2,
		     'refreshRect'/3,
		     'releaseMouse'/1,
		     'removeChild'/2,
		     'reparent'/2,
		     'screenToClient'/1,
		     'screenToClient'/2,
		     'scrollLines'/2,
		     'scrollPages'/2,
		     'scrollWindow'/3,
		     'scrollWindow'/4,
		     'setAcceleratorTable'/2,
		     'setAutoLayout'/2,
		     'setBackgroundColour'/2,
		     'setBackgroundStyle'/2,
		     'setCaret'/2,
		     'setClientSize'/2,
		     'setClientSize'/3,
		     'setContainingSizer'/2,
		     'setCursor'/2,
		     'setDropTarget'/2,
		     'setExtraStyle'/2,
		     'setFocus'/1,
		     'setFocusFromKbd'/1,
		     'setFont'/2,
		     'setForegroundColour'/2,
		     'setHelpText'/2,
		     'setId'/2,
		     'setItemHelpText'/3,
		     'setItemToolTip'/3,
		     'setLabel'/2,
		     'setMaxSize'/2,
		     'setMinSize'/2,
		     'setName'/2,
		     'setOwnBackgroundColour'/2,
		     'setOwnFont'/2,
		     'setOwnForegroundColour'/2,
		     'setPalette'/2,
		     'setScrollPos'/3,
		     'setScrollPos'/4,
		     'setScrollbar'/5,
		     'setScrollbar'/6,
		     'setSelection'/2,
		     'setSize'/2,
		     'setSize'/3,
		     'setSize'/5,
		     'setSize'/6,
		     'setSizeHints'/2,
		     'setSizeHints'/3,
		     'setSizeHints'/4,
		     'setSizer'/2,
		     'setSizer'/3,
		     'setSizerAndFit'/2,
		     'setSizerAndFit'/3,
		     'setThemeEnabled'/2,
		     'setToolTip'/2,
		     'setVirtualSize'/2,
		     'setVirtualSize'/3,
		     'setVirtualSizeHints'/2,
		     'setVirtualSizeHints'/3,
		     'setVirtualSizeHints'/4,
		     'setWindowStyle'/2,
		     'setWindowStyleFlag'/2,
		     'setWindowVariant'/2,
		     'shouldInheritColours'/1,
		     'show'/1,
		     'show'/2,
		     'show'/3,
		     'thaw'/1,
		     'transferDataFromWindow'/1,
		     'transferDataToWindow'/1,
		     'update'/1,
		     'updateWindowUI'/1,
		     'updateWindowUI'/2,
		     'validate'/1,
		     'warpPointer'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 75
		'export_type' =
		    %% Line 75
		    [{'wxRadioBox',0}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxRadioBox',{'remote_type',82,[{'atom',82,'wx'}|[{'atom',82,'wx_object'}|[[]]]]},[]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'new',6},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[{'var',84,'Parent'}|[{'var',84,'Id'}|[{'var',84,'Title'}|[{'var',84,'Pos'}|[{'var',84,'Size'}|[{'var',84,'Choices'}]]]]]]}|[{'type',84,'wxRadioBox',[]}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Parent'}|[{'remote_type',85,[{'atom',85,'wxWindow'}|[{'atom',85,'wxWindow'}|[[]]]]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Id'}|[{'type',85,'integer',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Title'}|[{'remote_type',85,[{'atom',85,'unicode'}|[{'atom',85,'chardata'}|[[]]]]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Pos'}|[{'type',85,'tuple',[{'ann_type',85,[{'var',85,'X'}|[{'type',85,'integer',[]}]]}|[{'ann_type',85,[{'var',85,'Y'}|[{'type',85,'integer',[]}]]}]]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Size'}|[{'type',85,'tuple',[{'ann_type',85,[{'var',85,'W'}|[{'type',85,'integer',[]}]]}|[{'ann_type',85,[{'var',85,'H'}|[{'type',85,'integer',[]}]]}]]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Choices'}|[{'type',85,'list',[{'remote_type',85,[{'atom',85,'unicode'}|[{'atom',85,'chardata'}|[[]]]]}]}]]]]}]]]]]]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'new',7},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Parent'}|[{'var',92,'Id'}|[{'var',92,'Title'}|[{'var',92,'Pos'}|[{'var',92,'Size'}|[{'var',92,'Choices'}|[{'type',92,'list',[{'var',92,'Option'}]}]]]]]]]}|[{'type',92,'wxRadioBox',[]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Parent'}|[{'remote_type',93,[{'atom',93,'wxWindow'}|[{'atom',93,'wxWindow'}|[[]]]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Id'}|[{'type',93,'integer',[]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Title'}|[{'remote_type',93,[{'atom',93,'unicode'}|[{'atom',93,'chardata'}|[[]]]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Pos'}|[{'type',93,'tuple',[{'ann_type',93,[{'var',93,'X'}|[{'type',93,'integer',[]}]]}|[{'ann_type',93,[{'var',93,'Y'}|[{'type',93,'integer',[]}]]}]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Size'}|[{'type',93,'tuple',[{'ann_type',93,[{'var',93,'W'}|[{'type',93,'integer',[]}]]}|[{'ann_type',93,[{'var',93,'H'}|[{'type',93,'integer',[]}]]}]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Choices'}|[{'type',93,'list',[{'remote_type',93,[{'atom',93,'unicode'}|[{'atom',93,'chardata'}|[[]]]]}]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Option'}|[{'type',94,'union',[{'type',94,'tuple',[{'atom',94,'majorDim'}|[{'type',94,'integer',[]}]]}|[{'type',95,'tuple',[{'atom',95,'style'}|[{'type',95,'integer',[]}]]}|[{'type',96,'tuple',[{'atom',96,'val'}|[{'remote_type',96,[{'atom',96,'wx'}|[{'atom',96,'wx_object'}|[[]]]]}]]}]]]}]]]]}]]]]]]]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'create',7},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'This'}|[{'var',112,'Parent'}|[{'var',112,'Id'}|[{'var',112,'Title'}|[{'var',112,'Pos'}|[{'var',112,'Size'}|[{'var',112,'Choices'}]]]]]]]}|[{'type',112,'boolean',[]}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'This'}|[{'type',113,'wxRadioBox',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Parent'}|[{'remote_type',113,[{'atom',113,'wxWindow'}|[{'atom',113,'wxWindow'}|[[]]]]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Id'}|[{'type',113,'integer',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Title'}|[{'remote_type',113,[{'atom',113,'unicode'}|[{'atom',113,'chardata'}|[[]]]]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Pos'}|[{'type',113,'tuple',[{'ann_type',113,[{'var',113,'X'}|[{'type',113,'integer',[]}]]}|[{'ann_type',113,[{'var',113,'Y'}|[{'type',113,'integer',[]}]]}]]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Size'}|[{'type',113,'tuple',[{'ann_type',113,[{'var',113,'W'}|[{'type',113,'integer',[]}]]}|[{'ann_type',113,[{'var',113,'H'}|[{'type',113,'integer',[]}]]}]]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Choices'}|[{'type',113,'list',[{'remote_type',113,[{'atom',113,'unicode'}|[{'atom',113,'chardata'}|[[]]]]}]}]]]]}]]]]]]]]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'create',8},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'This'}|[{'var',120,'Parent'}|[{'var',120,'Id'}|[{'var',120,'Title'}|[{'var',120,'Pos'}|[{'var',120,'Size'}|[{'var',120,'Choices'}|[{'type',120,'list',[{'var',120,'Option'}]}]]]]]]]]}|[{'type',120,'boolean',[]}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'This'}|[{'type',121,'wxRadioBox',[]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Parent'}|[{'remote_type',121,[{'atom',121,'wxWindow'}|[{'atom',121,'wxWindow'}|[[]]]]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Id'}|[{'type',121,'integer',[]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Title'}|[{'remote_type',121,[{'atom',121,'unicode'}|[{'atom',121,'chardata'}|[[]]]]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Pos'}|[{'type',121,'tuple',[{'ann_type',121,[{'var',121,'X'}|[{'type',121,'integer',[]}]]}|[{'ann_type',121,[{'var',121,'Y'}|[{'type',121,'integer',[]}]]}]]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Size'}|[{'type',121,'tuple',[{'ann_type',121,[{'var',121,'W'}|[{'type',121,'integer',[]}]]}|[{'ann_type',121,[{'var',121,'H'}|[{'type',121,'integer',[]}]]}]]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Choices'}|[{'type',121,'list',[{'remote_type',121,[{'atom',121,'unicode'}|[{'atom',121,'chardata'}|[[]]]]}]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Option'}|[{'type',122,'union',[{'type',122,'tuple',[{'atom',122,'majorDim'}|[{'type',122,'integer',[]}]]}|[{'type',123,'tuple',[{'atom',123,'style'}|[{'type',123,'integer',[]}]]}|[{'type',124,'tuple',[{'atom',124,'val'}|[{'remote_type',124,[{'atom',124,'wx'}|[{'atom',124,'wx_object'}|[[]]]]}]]}]]]}]]]]}]]]]]]]]]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'enable',1},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'This'}]}|[{'type',141,'boolean',[]}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'This'}|[{'type',142,'wxRadioBox',[]}]]]]}]]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'enable',2},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'This'}|[{'var',154,'N'}]]}|[{'type',154,'boolean',[]}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'This'}|[{'type',155,'wxRadioBox',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'N'}|[{'type',155,'integer',[]}]]]]}]]]]}|[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'This'}|[{'type',156,'list',[{'var',156,'Option'}]}]]}|[{'type',156,'boolean',[]}]]}|[[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'This'}|[{'type',157,'wxRadioBox',[]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Option'}|[{'type',158,'tuple',[{'atom',158,'enable'}|[{'type',158,'boolean',[]}]]}]]]]}]]]]}]]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'enable',3},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'This'}|[{'var',173,'N'}|[{'type',173,'list',[{'var',173,'Option'}]}]]]}|[{'type',173,'boolean',[]}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'This'}|[{'type',174,'wxRadioBox',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'N'}|[{'type',174,'integer',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Option'}|[{'type',175,'tuple',[{'atom',175,'enable'}|[{'type',175,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'getSelection',1},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'This'}]}|[{'type',186,'integer',[]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'This'}|[{'type',187,'wxRadioBox',[]}]]]]}]]]}]}],
		%% Line 194
		'spec' =
		    %% Line 194
		    [{{'getString',2},[{'type',194,'bounded_fun',[{'type',194,'fun',[{'type',194,'product',[{'var',194,'This'}|[{'var',194,'N'}]]}|[{'remote_type',194,[{'atom',194,'unicode'}|[{'atom',194,'charlist'}|[[]]]]}]]}|[[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'This'}|[{'type',195,'wxRadioBox',[]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'N'}|[{'type',195,'integer',[]}]]]]}]]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'setSelection',2},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'This'}|[{'var',203,'N'}]]}|[{'atom',203,'ok'}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'This'}|[{'type',204,'wxRadioBox',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'N'}|[{'type',204,'integer',[]}]]]]}]]]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'show',1},[{'type',212,'bounded_fun',[{'type',212,'fun',[{'type',212,'product',[{'var',212,'This'}]}|[{'type',212,'boolean',[]}]]}|[[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'This'}|[{'type',213,'wxRadioBox',[]}]]]]}]]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'show',2},[{'type',225,'bounded_fun',[{'type',225,'fun',[{'type',225,'product',[{'var',225,'This'}|[{'var',225,'N'}]]}|[{'type',225,'boolean',[]}]]}|[[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'This'}|[{'type',226,'wxRadioBox',[]}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'N'}|[{'type',226,'integer',[]}]]]]}]]]]}|[{'type',227,'bounded_fun',[{'type',227,'fun',[{'type',227,'product',[{'var',227,'This'}|[{'type',227,'list',[{'var',227,'Option'}]}]]}|[{'type',227,'boolean',[]}]]}|[[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'This'}|[{'type',228,'wxRadioBox',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Option'}|[{'type',229,'tuple',[{'atom',229,'show'}|[{'type',229,'boolean',[]}]]}]]]]}]]]]}]]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'show',3},[{'type',244,'bounded_fun',[{'type',244,'fun',[{'type',244,'product',[{'var',244,'This'}|[{'var',244,'N'}|[{'type',244,'list',[{'var',244,'Option'}]}]]]}|[{'type',244,'boolean',[]}]]}|[[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'This'}|[{'type',245,'wxRadioBox',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'N'}|[{'type',245,'integer',[]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Option'}|[{'type',246,'tuple',[{'atom',246,'show'}|[{'type',246,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 257
		'spec' =
		    %% Line 257
		    [{{'getColumnCount',1},[{'type',257,'bounded_fun',[{'type',257,'fun',[{'type',257,'product',[{'var',257,'This'}]}|[{'type',257,'integer',[]}]]}|[[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'This'}|[{'type',258,'wxRadioBox',[]}]]]]}]]]}]}],
		%% Line 265
		'spec' =
		    %% Line 265
		    [{{'getItemHelpText',2},[{'type',265,'bounded_fun',[{'type',265,'fun',[{'type',265,'product',[{'var',265,'This'}|[{'var',265,'N'}]]}|[{'remote_type',265,[{'atom',265,'unicode'}|[{'atom',265,'charlist'}|[[]]]]}]]}|[[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'This'}|[{'type',266,'wxRadioBox',[]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'N'}|[{'type',266,'integer',[]}]]]]}]]]]}]}],
		%% Line 274
		'spec' =
		    %% Line 274
		    [{{'getItemToolTip',2},[{'type',274,'bounded_fun',[{'type',274,'fun',[{'type',274,'product',[{'var',274,'This'}|[{'var',274,'Item'}]]}|[{'remote_type',274,[{'atom',274,'wxToolTip'}|[{'atom',274,'wxToolTip'}|[[]]]]}]]}|[[{'type',275,'constraint',[{'atom',275,'is_subtype'}|[[{'var',275,'This'}|[{'type',275,'wxRadioBox',[]}]]]]}|[{'type',275,'constraint',[{'atom',275,'is_subtype'}|[[{'var',275,'Item'}|[{'type',275,'integer',[]}]]]]}]]]]}]}],
		%% Line 283
		'spec' =
		    %% Line 283
		    [{{'getItemFromPoint',2},[{'type',283,'bounded_fun',[{'type',283,'fun',[{'type',283,'product',[{'var',283,'This'}|[{'var',283,'Pt'}]]}|[{'type',283,'integer',[]}]]}|[[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'This'}|[{'type',284,'wxRadioBox',[]}]]]]}|[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'Pt'}|[{'type',284,'tuple',[{'ann_type',284,[{'var',284,'X'}|[{'type',284,'integer',[]}]]}|[{'ann_type',284,[{'var',284,'Y'}|[{'type',284,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 292
		'spec' =
		    %% Line 292
		    [{{'getRowCount',1},[{'type',292,'bounded_fun',[{'type',292,'fun',[{'type',292,'product',[{'var',292,'This'}]}|[{'type',292,'integer',[]}]]}|[[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'This'}|[{'type',293,'wxRadioBox',[]}]]]]}]]]}]}],
		%% Line 300
		'spec' =
		    %% Line 300
		    [{{'isItemEnabled',2},[{'type',300,'bounded_fun',[{'type',300,'fun',[{'type',300,'product',[{'var',300,'This'}|[{'var',300,'N'}]]}|[{'type',300,'boolean',[]}]]}|[[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'This'}|[{'type',301,'wxRadioBox',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'N'}|[{'type',301,'integer',[]}]]]]}]]]]}]}],
		%% Line 309
		'spec' =
		    %% Line 309
		    [{{'isItemShown',2},[{'type',309,'bounded_fun',[{'type',309,'fun',[{'type',309,'product',[{'var',309,'This'}|[{'var',309,'N'}]]}|[{'type',309,'boolean',[]}]]}|[[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'This'}|[{'type',310,'wxRadioBox',[]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'N'}|[{'type',310,'integer',[]}]]]]}]]]]}]}],
		%% Line 318
		'spec' =
		    %% Line 318
		    [{{'setItemHelpText',3},[{'type',318,'bounded_fun',[{'type',318,'fun',[{'type',318,'product',[{'var',318,'This'}|[{'var',318,'N'}|[{'var',318,'HelpText'}]]]}|[{'atom',318,'ok'}]]}|[[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'This'}|[{'type',319,'wxRadioBox',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'N'}|[{'type',319,'integer',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'HelpText'}|[{'remote_type',319,[{'atom',319,'unicode'}|[{'atom',319,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 328
		'spec' =
		    %% Line 328
		    [{{'setItemToolTip',3},[{'type',328,'bounded_fun',[{'type',328,'fun',[{'type',328,'product',[{'var',328,'This'}|[{'var',328,'Item'}|[{'var',328,'Text'}]]]}|[{'atom',328,'ok'}]]}|[[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'This'}|[{'type',329,'wxRadioBox',[]}]]]]}|[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Item'}|[{'type',329,'integer',[]}]]]]}|[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Text'}|[{'remote_type',329,[{'atom',329,'unicode'}|[{'atom',329,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 338
		'spec' =
		    %% Line 338
		    [{{'destroy',1},[{'type',338,'fun',[{'type',338,'product',[{'ann_type',338,[{'var',338,'This'}|[{'type',338,'wxRadioBox',[]}]]}]}|[{'atom',338,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 77
    fun (_cor0) ->
	case _cor0 of
	  <'wxControl'> when 'true' ->
	      'true'
	  %% Line 78
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 79
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 80
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxRadioBox'})
	end
'new'/6 =
    %% Line 87
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Parent = {'wx_ref',_cor25,_cor26,_cor27},Id,Title,Pos = {PosX,PosY},Size = {SizeW,SizeH},Choices>
	      when %% Line 88
		( try
		      let <_cor6> =
			  call 'erlang':'is_integer'
			      (Id)
		      in  let <_cor7> =
			      call 'erlang':'is_list'
				  (Title)
			  in  let <_cor8> =
				  call 'erlang':'is_integer'
				      (PosX)
			      in  let <_cor9> =
				      call 'erlang':'is_integer'
					  (PosY)
				  in  let <_cor10> =
					  call 'erlang':'is_integer'
					      (SizeW)
				      in  let <_cor11> =
					      call 'erlang':'is_integer'
						  (SizeH)
					  in  let <_cor12> =
						  call 'erlang':'is_list'
						      (Choices)
					      in  let <_cor13> =
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor11, _cor12)
							-| ['compiler_generated'] )
						  in  let <_cor14> =
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'and'
												 -| ['compiler_generated'] )
								(_cor10, _cor13)
							    -| ['compiler_generated'] )
						      in  let <_cor15> =
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'and'
												     -| ['compiler_generated'] )
								    (_cor9, _cor14)
								-| ['compiler_generated'] )
							  in  let <_cor16> =
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(_cor8, _cor15)
								    -| ['compiler_generated'] )
							      in  let <_cor17> =
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_cor7, _cor16)
									-| ['compiler_generated'] )
								  in  ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_cor6, _cor17)
									-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 89
	      apply 'new'/7
		  (Parent, Id, Title, Pos, Size, Choices, [])
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'new',6}}] )
	    -| ['compiler_generated'] )
	end
'new'/7 =
    %% Line 97
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor77},Id,Title,{PosX,PosY},{SizeW,SizeH},Choices,Options>
	      when %% Line 98
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Id)
		    in  let <_cor8> =
			    call 'erlang':'is_list'
				(Title)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (PosX)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(PosY)
				in  let <_cor11> =
					call 'erlang':'is_integer'
					    (SizeW)
				    in  let <_cor12> =
					    call 'erlang':'is_integer'
						(SizeH)
					in  let <_cor13> =
						call 'erlang':'is_list'
						    (Choices)
					    in  let <_cor14> =
						    call 'erlang':'is_list'
							(Options)
						in  let <_cor15> =
							call 'erlang':'and'
							    (_cor13, _cor14)
						    in  let <_cor16> =
							    call 'erlang':'and'
								(_cor12, _cor15)
							in  let <_cor17> =
								call 'erlang':'and'
								    (_cor11, _cor16)
							    in  let <_cor18> =
								    call 'erlang':'and'
									(_cor10, _cor17)
								in  let <_cor19> =
									call 'erlang':'and'
									    (_cor9, _cor18)
								    in  let <_cor20> =
									    call 'erlang':'and'
										(_cor8, _cor19)
									in  call 'erlang':'and'
										(_cor7, _cor20)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 99
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Title_UC> =
		      %% Line 100
		      call 'unicode':'characters_to_binary'
			  ([Title|[0]])
		  in  let <_cor29> =
			  %% Line 101
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor26) ->
					case _cor26 of
					  <[%% Line 102
					    ChoicesTemp|_cor25]> when 'true' ->
					      let <_cor27> =
						  call 'unicode':'characters_to_binary'
						      ([ChoicesTemp|[0]])
					      in  let <_cor28> =
						      %% Line 102
						      apply 'lc$^0'/1
							  (_cor25)
						  in  ( [_cor27|_cor28]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor26> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor26})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (%% Line 102
				     Choices)
			    -| ['list_comprehension'] )
		      in  let <MOpts> =
			      %% Line 103
			      ( fun (_cor37,_cor36) ->
				    case <_cor37,_cor36> of
				      <{'majorDim',MajorDim},Acc> when 'true' ->
					  let <_cor31> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<MajorDim>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor31|Acc]
				      %% Line 104
				      <{'style',Style},Acc> when 'true' ->
					  let <_cor32> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<Style>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor32|Acc]
				      %% Line 105
				      <{'val',{'wx_ref',ValRef,ValT,_cor78}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (ValT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call ValT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor35> =
						  #{#<3>(32,1,'integer',['unsigned'|['native']]),
						    #<ValRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor35|Acc]
				      %% Line 106
				      <BadOpt,_cor79> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-new/7-fun-0-'}}] )
			  in  let <_cor41> =
				  %% Line 107
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 107
				      call 'erlang':'list_to_binary'
					  (_cor41)
				  in  let <_cor68> =
					  %% Line 109
					  call 'erlang':'byte_size'
					      (Title_UC)
				      in  let <_cor63> =
					      %% Line 109
					      call 'erlang':'byte_size'
						  (Title_UC)
					  in  let <_cor64> =
						  %% Line 109
						  call 'erlang':'+'
						      (4, _cor63)
					      in  let <_cor65> =
						      %% Line 109
						      call 'erlang':'band'
							  (_cor64, 7)
						  in  let <_cor66> =
							  %% Line 109
							  call 'erlang':'-'
							      (8, _cor65)
						      in  let <_cor67> =
							      %% Line 109
							      call 'erlang':'band'
								  (_cor66, 7)
							  in  let <_cor62> =
								  %% Line 109
								  call 'erlang':'length'
								      (_cor29)
							      in  let <_cor55> =
								      primop 'bs_init_writable'
									  (256)
								  in  let <_cor61> =
									  %% Line 109
									  ( letrec
										'lbc$^2'/2 =
										    fun (_cor59,_cor58) ->
											case <_cor59,_cor58> of
											  <[UC_Str|_cor57],_cor58> when 'true' ->
											      let <_cor60> =
												  call 'erlang':'byte_size'
												      (UC_Str)
											      in  let <_cor58> =
												      ( #{#<_cor58>('all',1,'binary',[]),
													  #<_cor60>(32,1,'integer',['unsigned'|['native']]),
													  #<UC_Str>('all',8,'binary',['unsigned'|['big']])}#
													-| ['compiler_generated','single_use'] )
												  in  apply 'lbc$^2'/2
													  (_cor57, _cor58)
											  <[],_cor58> when 'true' ->
											      _cor58
											  ( <_cor59,_cor58> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_cor59,_cor58})
												  -| [{'function_name',{'lbc$^2',2}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lbc$^2'/2
										    (_cor29, _cor55)
									    -| ['list_comprehension'] )
								      in  let <_cor49> =
									      %% Line 109
									      ( letrec
										    'lc$^1'/1 =
											fun (_cor45) ->
											    case _cor45 of
											      <[S|_cor44]> when 'true' ->
												  let <_cor46> =
												      call 'erlang':'byte_size'
													  (S)
												  in  let <_cor47> =
													  call 'erlang':'+'
													      (_cor46, 4)
												      in  let <_cor48> =
													      apply 'lc$^1'/1
														  (_cor44)
													  in  ( [_cor47|_cor48]
														-| ['compiler_generated'] )
											      <[]> when 'true' ->
												  []
											      ( <_cor45> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor45})
												      -| [{'function_name',{'lc$^1',1}}] )
												-| ['compiler_generated'] )
											    end
										in  apply 'lc$^1'/1
											(_cor29)
										-| ['list_comprehension'] )
									  in  let <_cor50> =
										  %% Line 109
										  call 'lists':'sum'
										      (_cor49)
									      in  let <_cor51> =
										      %% Line 109
										      call 'erlang':'+'
											  (4, _cor50)
										  in  let <_cor52> =
											  %% Line 109
											  call 'erlang':'band'
											      (_cor51, 7)
										      in  let <_cor53> =
											      %% Line 109
											      call 'erlang':'-'
												  (8, _cor52)
											  in  let <_cor54> =
												  %% Line 109
												  call 'erlang':'band'
												      (_cor53, 7)
											      in  let <_cor69> =
												      %% Line 109
												      #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
													#<Id>(32,1,'integer',['unsigned'|['native']]),
													#<_cor68>(32,1,'integer',['unsigned'|['native']]),
													#<Title_UC>('all',8,'binary',['unsigned'|['big']]),
													#<0>(_cor67,8,'integer',['unsigned'|['big']]),
													#<PosX>(32,1,'integer',['unsigned'|['native']]),
													#<PosY>(32,1,'integer',['unsigned'|['native']]),
													#<SizeW>(32,1,'integer',['unsigned'|['native']]),
													#<SizeH>(32,1,'integer',['unsigned'|['native']]),
													#<_cor62>(32,1,'integer',['unsigned'|['native']]),
													#<_cor61>('all',8,'binary',['unsigned'|['big']]),
													#<0>(_cor54,8,'integer',['unsigned'|['big']]),
													#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
												  in  %% Line 108
												      call 'wxe_util':'construct'
													  (2138, _cor69)
	  ( <_cor76,_cor75,_cor74,_cor73,_cor72,_cor71,_cor70> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor76,_cor75,_cor74,_cor73,_cor72,_cor71,_cor70})
		  -| [{'function_name',{'new',7}}] )
	    -| ['compiler_generated'] )
	end
'create'/7 =
    %% Line 115
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor28,_cor29,_cor30},Parent = {'wx_ref',_cor31,_cor32,_cor33},Id,Title,Pos = {PosX,PosY},Size = {SizeW,SizeH},Choices>
	      when %% Line 116
		( try
		      let <_cor7> =
			  call 'erlang':'is_integer'
			      (Id)
		      in  let <_cor8> =
			      call 'erlang':'is_list'
				  (Title)
			  in  let <_cor9> =
				  call 'erlang':'is_integer'
				      (PosX)
			      in  let <_cor10> =
				      call 'erlang':'is_integer'
					  (PosY)
				  in  let <_cor11> =
					  call 'erlang':'is_integer'
					      (SizeW)
				      in  let <_cor12> =
					      call 'erlang':'is_integer'
						  (SizeH)
					  in  let <_cor13> =
						  call 'erlang':'is_list'
						      (Choices)
					      in  let <_cor14> =
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor12, _cor13)
							-| ['compiler_generated'] )
						  in  let <_cor15> =
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'and'
												 -| ['compiler_generated'] )
								(_cor11, _cor14)
							    -| ['compiler_generated'] )
						      in  let <_cor16> =
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'and'
												     -| ['compiler_generated'] )
								    (_cor10, _cor15)
								-| ['compiler_generated'] )
							  in  let <_cor17> =
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(_cor9, _cor16)
								    -| ['compiler_generated'] )
							      in  let <_cor18> =
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_cor8, _cor17)
									-| ['compiler_generated'] )
								  in  ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_cor7, _cor18)
									-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 117
	      apply 'create'/8
		  (This, Parent, Id, Title, Pos, Size, Choices, [])
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'create',7}}] )
	    -| ['compiler_generated'] )
	end
'create'/8 =
    %% Line 125
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor81},{'wx_ref',ParentRef,ParentT,_cor82},Id,Title,{PosX,PosY},{SizeW,SizeH},Choices,Options>
	      when %% Line 126
		try
		    let <_cor8> =
			call 'erlang':'is_integer'
			    (Id)
		    in  let <_cor9> =
			    call 'erlang':'is_list'
				(Title)
			in  let <_cor10> =
				call 'erlang':'is_integer'
				    (PosX)
			    in  let <_cor11> =
				    call 'erlang':'is_integer'
					(PosY)
				in  let <_cor12> =
					call 'erlang':'is_integer'
					    (SizeW)
				    in  let <_cor13> =
					    call 'erlang':'is_integer'
						(SizeH)
					in  let <_cor14> =
						call 'erlang':'is_list'
						    (Choices)
					    in  let <_cor15> =
						    call 'erlang':'is_list'
							(Options)
						in  let <_cor16> =
							call 'erlang':'and'
							    (_cor14, _cor15)
						    in  let <_cor17> =
							    call 'erlang':'and'
								(_cor13, _cor16)
							in  let <_cor18> =
								call 'erlang':'and'
								    (_cor12, _cor17)
							    in  let <_cor19> =
								    call 'erlang':'and'
									(_cor11, _cor18)
								in  let <_cor20> =
									call 'erlang':'and'
									    (_cor10, _cor19)
								    in  let <_cor21> =
									    call 'erlang':'and'
										(_cor9, _cor20)
									in  call 'erlang':'and'
										(_cor8, _cor21)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 127
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 128
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <Title_UC> =
			  %% Line 129
			  call 'unicode':'characters_to_binary'
			      ([Title|[0]])
		      in  let <_cor32> =
			      %% Line 130
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor29) ->
					    case _cor29 of
					      <[%% Line 131
						ChoicesTemp|_cor28]> when 'true' ->
						  let <_cor30> =
						      call 'unicode':'characters_to_binary'
							  ([ChoicesTemp|[0]])
						  in  let <_cor31> =
							  %% Line 131
							  apply 'lc$^0'/1
							      (_cor28)
						      in  ( [_cor30|_cor31]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor29> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor29})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(%% Line 131
					 Choices)
				-| ['list_comprehension'] )
			  in  let <MOpts> =
				  %% Line 132
				  ( fun (_cor40,_cor39) ->
					case <_cor40,_cor39> of
					  <{'majorDim',MajorDim},Acc> when 'true' ->
					      let <_cor34> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<MajorDim>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor34|Acc]
					  %% Line 133
					  <{'style',Style},Acc> when 'true' ->
					      let <_cor35> =
						  #{#<2>(32,1,'integer',['unsigned'|['native']]),
						    #<Style>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor35|Acc]
					  %% Line 134
					  <{'val',{'wx_ref',ValRef,ValT,_cor83}},Acc> when 'true' ->
					      do  ( case <> of
						      ( <>
							    when call 'erlang':'=:='
								  (ValT,
								   'wx') ->
							    'ok'
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    call ValT:'parent_class'
								('wx')
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
						  let <_cor38> =
						      #{#<3>(32,1,'integer',['unsigned'|['native']]),
							#<ValRef>(32,1,'integer',['unsigned'|['native']])}#
						  in  [_cor38|Acc]
					  %% Line 135
					  <BadOpt,_cor84> when 'true' ->
					      call 'erlang':'error'
						  ({'badoption',BadOpt})
					end
				    -| [{'id',{0,0,'-create/8-fun-0-'}}] )
			      in  let <_cor44> =
				      %% Line 136
				      call 'lists':'foldl'
					  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
				  in  let <BinOpt> =
					  %% Line 136
					  call 'erlang':'list_to_binary'
					      (_cor44)
				      in  let <_cor71> =
					      %% Line 138
					      call 'erlang':'byte_size'
						  (Title_UC)
					  in  let <_cor66> =
						  %% Line 138
						  call 'erlang':'byte_size'
						      (Title_UC)
					      in  let <_cor67> =
						      %% Line 138
						      call 'erlang':'+'
							  (0, _cor66)
						  in  let <_cor68> =
							  %% Line 138
							  call 'erlang':'band'
							      (_cor67, 7)
						      in  let <_cor69> =
							      %% Line 138
							      call 'erlang':'-'
								  (8, _cor68)
							  in  let <_cor70> =
								  %% Line 138
								  call 'erlang':'band'
								      (_cor69, 7)
							      in  let <_cor65> =
								      %% Line 138
								      call 'erlang':'length'
									  (_cor32)
								  in  let <_cor58> =
									  primop 'bs_init_writable'
									      (256)
								      in  let <_cor64> =
									      %% Line 138
									      ( letrec
										    'lbc$^2'/2 =
											fun (_cor62,_cor61) ->
											    case <_cor62,_cor61> of
											      <[UC_Str|_cor60],_cor61> when 'true' ->
												  let <_cor63> =
												      call 'erlang':'byte_size'
													  (UC_Str)
												  in  let <_cor61> =
													  ( #{#<_cor61>('all',1,'binary',[]),
													      #<_cor63>(32,1,'integer',['unsigned'|['native']]),
													      #<UC_Str>('all',8,'binary',['unsigned'|['big']])}#
													    -| ['compiler_generated','single_use'] )
												      in  apply 'lbc$^2'/2
													      (_cor60, _cor61)
											      <[],_cor61> when 'true' ->
												  _cor61
											      ( <_cor62,_cor61> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor62,_cor61})
												      -| [{'function_name',{'lbc$^2',2}}] )
												-| ['compiler_generated'] )
											    end
										in  apply 'lbc$^2'/2
											(_cor32, _cor58)
										-| ['list_comprehension'] )
									  in  let <_cor52> =
										  %% Line 138
										  ( letrec
											'lc$^1'/1 =
											    fun (_cor48) ->
												case _cor48 of
												  <[S|_cor47]> when 'true' ->
												      let <_cor49> =
													  call 'erlang':'byte_size'
													      (S)
												      in  let <_cor50> =
													      call 'erlang':'+'
														  (_cor49, 4)
													  in  let <_cor51> =
														  apply 'lc$^1'/1
														      (_cor47)
													      in  ( [_cor50|_cor51]
														    -| ['compiler_generated'] )
												  <[]> when 'true' ->
												      []
												  ( <_cor48> when 'true' ->
													( primop 'match_fail'
													      ({'function_clause',_cor48})
													  -| [{'function_name',{'lc$^1',1}}] )
												    -| ['compiler_generated'] )
												end
										    in  apply 'lc$^1'/1
											    (_cor32)
										    -| ['list_comprehension'] )
									      in  let <_cor53> =
										      %% Line 138
										      call 'lists':'sum'
											  (_cor52)
										  in  let <_cor54> =
											  %% Line 138
											  call 'erlang':'+'
											      (4, _cor53)
										      in  let <_cor55> =
											      %% Line 138
											      call 'erlang':'band'
												  (_cor54, 7)
											  in  let <_cor56> =
												  %% Line 138
												  call 'erlang':'-'
												      (8, _cor55)
											      in  let <_cor57> =
												      %% Line 138
												      call 'erlang':'band'
													  (_cor56, 7)
												  in  let <_cor72> =
													  %% Line 138
													  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
													    #<ParentRef>(32,1,'integer',['unsigned'|['native']]),
													    #<Id>(32,1,'integer',['unsigned'|['native']]),
													    #<_cor71>(32,1,'integer',['unsigned'|['native']]),
													    #<Title_UC>('all',8,'binary',['unsigned'|['big']]),
													    #<0>(_cor70,8,'integer',['unsigned'|['big']]),
													    #<PosX>(32,1,'integer',['unsigned'|['native']]),
													    #<PosY>(32,1,'integer',['unsigned'|['native']]),
													    #<SizeW>(32,1,'integer',['unsigned'|['native']]),
													    #<SizeH>(32,1,'integer',['unsigned'|['native']]),
													    #<_cor65>(32,1,'integer',['unsigned'|['native']]),
													    #<_cor64>('all',8,'binary',['unsigned'|['big']]),
													    #<0>(_cor57,8,'integer',['unsigned'|['big']]),
													    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
												      in  %% Line 137
													  call 'wxe_util':'call'
													      (2141, _cor72)
	  ( <_cor80,_cor79,_cor78,_cor77,_cor76,_cor75,_cor74,_cor73> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor80,_cor79,_cor78,_cor77,_cor76,_cor75,_cor74,_cor73})
		  -| [{'function_name',{'create',8}}] )
	    -| ['compiler_generated'] )
	end
'enable'/1 =
    %% Line 144
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 145
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 146
	      apply 'enable'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enable',1}}] )
	    -| ['compiler_generated'] )
	end
'enable'/2 =
    %% Line 160
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor17,_cor18,_cor19},N>
	      when %% Line 161
		call 'erlang':'is_integer'
		    (N) ->
	      %% Line 162
	      apply 'enable'/3
		  (This, N, [])
	  %% Line 163
	  <{'wx_ref',ThisRef,ThisT,_cor20},Options>
	      when %% Line 164
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 165
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 166
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{'enable',Enable},Acc> when 'true' ->
				  let <_cor5> =
				      call 'wxe_util':'from_bool'
					  (Enable)
				  in  let <_cor6> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor5>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor6|Acc]
			      %% Line 167
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-enable/2-fun-0-'}}] )
		  in  let <_cor12> =
			  %% Line 168
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 168
			      call 'erlang':'list_to_binary'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 170
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 169
				  call 'wxe_util':'call'
				      (2143, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'enable',2}}] )
	    -| ['compiler_generated'] )
	end
'enable'/3 =
    %% Line 176
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},N,Options>
	      when let <_cor3> =
		    %% Line 177
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			%% Line 177
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 177
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 178
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 179
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'enable',Enable},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Enable)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 180
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-enable/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 181
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 181
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 183
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<N>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 182
				  call 'wxe_util':'call'
				      (2142, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'enable',3}}] )
	    -| ['compiler_generated'] )
	end
'getSelection'/1 =
    %% Line 188
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 189
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 191
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 190
		      call 'wxe_util':'call'
			  (2144, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelection',1}}] )
	    -| ['compiler_generated'] )
	end
'getString'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},N>
	      when %% Line 197
		call 'erlang':'is_integer'
		    (N) ->
	      do  %% Line 198
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 200
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<N>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 199
		      call 'wxe_util':'call'
			  (2145, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getString',2}}] )
	    -| ['compiler_generated'] )
	end
'setSelection'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},N>
	      when %% Line 206
		call 'erlang':'is_integer'
		    (N) ->
	      do  %% Line 207
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 209
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<N>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 208
		      call 'wxe_util':'cast'
			  (2146, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setSelection',2}}] )
	    -| ['compiler_generated'] )
	end
'show'/1 =
    %% Line 215
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 216
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 217
	      apply 'show'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'show',1}}] )
	    -| ['compiler_generated'] )
	end
'show'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor17,_cor18,_cor19},N>
	      when %% Line 232
		call 'erlang':'is_integer'
		    (N) ->
	      %% Line 233
	      apply 'show'/3
		  (This, N, [])
	  %% Line 234
	  <{'wx_ref',ThisRef,ThisT,_cor20},Options>
	      when %% Line 235
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 236
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 237
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{'show',Show},Acc> when 'true' ->
				  let <_cor5> =
				      call 'wxe_util':'from_bool'
					  (Show)
				  in  let <_cor6> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor5>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor6|Acc]
			      %% Line 238
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-show/2-fun-0-'}}] )
		  in  let <_cor12> =
			  %% Line 239
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 239
			      call 'erlang':'list_to_binary'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 241
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 240
				  call 'wxe_util':'call'
				      (2148, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'show',2}}] )
	    -| ['compiler_generated'] )
	end
'show'/3 =
    %% Line 247
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},N,Options>
	      when let <_cor3> =
		    %% Line 248
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			%% Line 248
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 248
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 249
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 250
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'show',Show},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Show)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 251
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-show/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 252
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 252
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 254
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<N>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 253
				  call 'wxe_util':'call'
				      (2147, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'show',3}}] )
	    -| ['compiler_generated'] )
	end
'getColumnCount'/1 =
    %% Line 259
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 260
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 262
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 261
		      call 'wxe_util':'call'
			  (2149, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColumnCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getItemHelpText'/2 =
    %% Line 267
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},N>
	      when %% Line 268
		call 'erlang':'is_integer'
		    (N) ->
	      do  %% Line 269
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 271
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<N>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 270
		      call 'wxe_util':'call'
			  (2150, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemHelpText',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemToolTip'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 277
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 278
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 280
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 279
		      call 'wxe_util':'call'
			  (2151, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemToolTip',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemFromPoint'/2 =
    %% Line 285
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 286
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 286
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 286
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 287
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 289
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 288
		      call 'wxe_util':'call'
			  (2153, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'getItemFromPoint',2}}] )
	    -| ['compiler_generated'] )
	end
'getRowCount'/1 =
    %% Line 294
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 295
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 297
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 296
		      call 'wxe_util':'call'
			  (2154, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getRowCount',1}}] )
	    -| ['compiler_generated'] )
	end
'isItemEnabled'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},N>
	      when %% Line 303
		call 'erlang':'is_integer'
		    (N) ->
	      do  %% Line 304
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 306
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<N>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 305
		      call 'wxe_util':'call'
			  (2155, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isItemEnabled',2}}] )
	    -| ['compiler_generated'] )
	end
'isItemShown'/2 =
    %% Line 311
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},N>
	      when %% Line 312
		call 'erlang':'is_integer'
		    (N) ->
	      do  %% Line 313
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 315
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<N>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 314
		      call 'wxe_util':'call'
			  (2156, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isItemShown',2}}] )
	    -| ['compiler_generated'] )
	end
'setItemHelpText'/3 =
    %% Line 320
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},N,HelpText>
	      when let <_cor3> =
		    %% Line 321
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			%% Line 321
			call 'erlang':'is_list'
			    (HelpText)
		    in  %% Line 321
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 322
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <HelpText_UC> =
		      %% Line 323
		      call 'unicode':'characters_to_binary'
			  ([HelpText|[0]])
		  in  let <_cor13> =
			  %% Line 325
			  call 'erlang':'byte_size'
			      (HelpText_UC)
		      in  let <_cor8> =
			      %% Line 325
			      call 'erlang':'byte_size'
				  (HelpText_UC)
			  in  let <_cor9> =
				  %% Line 325
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 325
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 325
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 325
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 325
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<N>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<HelpText_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 324
						  call 'wxe_util':'cast'
						      (2157, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setItemHelpText',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemToolTip'/3 =
    %% Line 330
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Item,Text>
	      when let <_cor3> =
		    %% Line 331
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 331
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 331
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 332
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 333
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor13> =
			  %% Line 335
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor8> =
			      %% Line 335
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor9> =
				  %% Line 335
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 335
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 335
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 335
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 335
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Item>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 334
						  call 'wxe_util':'cast'
						      (2158, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setItemToolTip',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 339
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 340
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxRadioBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxRadioBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 341
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 342
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setLabel'/2 =
    %% Line 345
    fun (_cor1,_cor0) ->
	call 'wxControl':'setLabel'
	    (_cor1, _cor0)
'getLabel'/1 =
    %% Line 347
    fun (_cor0) ->
	call 'wxControl':'getLabel'
	    (_cor0)
'warpPointer'/3 =
    %% Line 350
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 352
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 354
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 356
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 358
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 360
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 362
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 364
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 366
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 368
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyleFlag'/2 =
    %% Line 370
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyleFlag'
	    (_cor1, _cor0)
'setWindowStyle'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyle'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 374
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 376
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 378
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 380
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 382
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 384
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 386
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 388
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 390
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 392
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 394
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 396
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 398
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 402
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 404
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 406
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 410
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 412
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 414
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 416
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 418
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 422
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 424
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 426
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 428
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 430
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 432
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 434
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 436
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 438
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 440
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 442
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 444
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 446
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 448
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 450
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 452
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 458
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setBackgroundColour'/2 =
    %% Line 460
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundColour'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 462
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 464
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 466
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 468
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 470
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 476
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 478
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 480
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 482
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 484
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 486
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 488
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 490
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 492
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 494
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 496
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 502
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 504
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 506
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 508
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 510
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 512
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 514
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 516
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 518
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 520
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 522
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 524
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 526
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 528
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 530
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 532
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 534
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 536
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 538
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 540
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 542
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 544
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 546
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 548
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'initDialog'/1 =
    %% Line 550
    fun (_cor0) ->
	call 'wxWindow':'initDialog'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 552
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 554
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 556
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 558
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 560
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 562
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 564
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 566
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 568
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 570
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 572
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 574
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 576
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 578
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 580
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 582
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 584
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 586
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 588
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 590
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 592
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 594
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 596
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 598
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 600
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getId'/1 =
    %% Line 602
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 604
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 606
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 608
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 610
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 612
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 614
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 616
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 618
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 620
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 622
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 624
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 626
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 628
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 630
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 632
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 634
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 636
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 638
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 640
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 642
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 644
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'fit'/1 =
    %% Line 646
    fun (_cor0) ->
	call 'wxWindow':'fit'
	    (_cor0)
'findWindow'/2 =
    %% Line 648
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'disable'/1 =
    %% Line 650
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 652
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 654
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 656
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 658
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 660
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 662
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 664
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 666
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 668
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 670
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 672
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 674
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 676
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 678
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 680
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 682
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 684
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 686
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 689
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 691
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 693
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 695
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 697
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxRadioBox')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxRadioBox', _cor0)
end