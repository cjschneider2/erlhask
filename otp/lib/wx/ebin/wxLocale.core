module 'wxLocale' ['addCatalog'/2,
		   'addCatalog'/4,
		   'addCatalogLookupPathPrefix'/1,
		   'destroy'/1,
		   'getCanonicalName'/1,
		   'getHeaderValue'/2,
		   'getHeaderValue'/3,
		   'getLanguage'/1,
		   'getLanguageName'/1,
		   'getLocale'/1,
		   'getName'/1,
		   'getString'/2,
		   'getString'/3,
		   'getString'/4,
		   'getString'/5,
		   'getSysName'/1,
		   'getSystemEncoding'/0,
		   'getSystemEncodingName'/0,
		   'getSystemLanguage'/0,
		   'init'/1,
		   'init'/2,
		   'isLoaded'/2,
		   'isOk'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'new'/0,
		   'new'/1,
		   'new'/2,
		   'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 36
		'export_type' =
		    %% Line 36
		    [{'wxLocale',0}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'wxLocale',{'remote_type',40,[{'atom',40,'wx'}|[{'atom',40,'wx_object'}|[[]]]]},[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'new',0},[{'type',42,'fun',[{'type',42,'product',[]}|[{'type',42,'wxLocale',[]}]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'new',1},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'Language'}]}|[{'type',48,'wxLocale',[]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Language'}|[{'type',49,'integer',[]}]]]]}]]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'new',2},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Language'}|[{'type',56,'list',[{'var',56,'Option'}]}]]}|[{'type',56,'wxLocale',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Language'}|[{'type',57,'integer',[]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Option'}|[{'type',58,'tuple',[{'atom',58,'flags'}|[{'type',58,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'init',1},[{'type',68,'bounded_fun',[{'type',68,'fun',[{'type',68,'product',[{'var',68,'This'}]}|[{'type',68,'boolean',[]}]]}|[[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'This'}|[{'type',69,'wxLocale',[]}]]]]}]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'init',2},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'This'}|[{'type',76,'list',[{'var',76,'Option'}]}]]}|[{'type',76,'boolean',[]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'This'}|[{'type',77,'wxLocale',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Option'}|[{'type',78,'union',[{'type',78,'tuple',[{'atom',78,'language'}|[{'type',78,'integer',[]}]]}|[{'type',79,'tuple',[{'atom',79,'flags'}|[{'type',79,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'addCatalog',2},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'This'}|[{'var',91,'SzDomain'}]]}|[{'type',91,'boolean',[]}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'This'}|[{'type',92,'wxLocale',[]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'SzDomain'}|[{'remote_type',92,[{'atom',92,'unicode'}|[{'atom',92,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'addCatalog',4},[{'type',102,'bounded_fun',[{'type',102,'fun',[{'type',102,'product',[{'var',102,'This'}|[{'var',102,'SzDomain'}|[{'var',102,'MsgIdLanguage'}|[{'var',102,'MsgIdCharset'}]]]]}|[{'type',102,'boolean',[]}]]}|[[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'This'}|[{'type',103,'wxLocale',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'SzDomain'}|[{'remote_type',103,[{'atom',103,'unicode'}|[{'atom',103,'chardata'}|[[]]]]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'MsgIdLanguage'}|[{'remote_type',103,[{'atom',103,'wx'}|[{'atom',103,'wx_enum'}|[[]]]]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'MsgIdCharset'}|[{'remote_type',103,[{'atom',103,'unicode'}|[{'atom',103,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'addCatalogLookupPathPrefix',1},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'Prefix'}]}|[{'atom',113,'ok'}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Prefix'}|[{'remote_type',114,[{'atom',114,'unicode'}|[{'atom',114,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'getCanonicalName',1},[{'type',122,'bounded_fun',[{'type',122,'fun',[{'type',122,'product',[{'var',122,'This'}]}|[{'remote_type',122,[{'atom',122,'unicode'}|[{'atom',122,'charlist'}|[[]]]]}]]}|[[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'This'}|[{'type',123,'wxLocale',[]}]]]]}]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'getLanguage',1},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'This'}]}|[{'type',130,'integer',[]}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'This'}|[{'type',131,'wxLocale',[]}]]]]}]]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'getLanguageName',1},[{'type',138,'bounded_fun',[{'type',138,'fun',[{'type',138,'product',[{'var',138,'Lang'}]}|[{'remote_type',138,[{'atom',138,'unicode'}|[{'atom',138,'charlist'}|[[]]]]}]]}|[[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'Lang'}|[{'type',139,'integer',[]}]]]]}]]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'getLocale',1},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'This'}]}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'charlist'}|[[]]]]}]]}|[[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'This'}|[{'type',147,'wxLocale',[]}]]]]}]]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'getName',1},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'This'}]}|[{'remote_type',154,[{'atom',154,'unicode'}|[{'atom',154,'charlist'}|[[]]]]}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'This'}|[{'type',155,'wxLocale',[]}]]]]}]]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'getString',2},[{'type',162,'bounded_fun',[{'type',162,'fun',[{'type',162,'product',[{'var',162,'This'}|[{'var',162,'SzOrigString'}]]}|[{'remote_type',162,[{'atom',162,'unicode'}|[{'atom',162,'charlist'}|[[]]]]}]]}|[[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'This'}|[{'type',163,'wxLocale',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'SzOrigString'}|[{'remote_type',163,[{'atom',163,'unicode'}|[{'atom',163,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 170
		'spec' =
		    %% Line 170
		    [{{'getString',3},[{'type',170,'bounded_fun',[{'type',170,'fun',[{'type',170,'product',[{'var',170,'This'}|[{'var',170,'SzOrigString'}|[{'type',170,'list',[{'var',170,'Option'}]}]]]}|[{'remote_type',170,[{'atom',170,'unicode'}|[{'atom',170,'charlist'}|[[]]]]}]]}|[[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'This'}|[{'type',171,'wxLocale',[]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'SzOrigString'}|[{'remote_type',171,[{'atom',171,'unicode'}|[{'atom',171,'chardata'}|[[]]]]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Option'}|[{'type',172,'tuple',[{'atom',172,'szDomain'}|[{'remote_type',172,[{'atom',172,'unicode'}|[{'atom',172,'chardata'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 184
		'spec' =
		    %% Line 184
		    [{{'getString',4},[{'type',184,'bounded_fun',[{'type',184,'fun',[{'type',184,'product',[{'var',184,'This'}|[{'var',184,'SzOrigString'}|[{'var',184,'SzOrigString2'}|[{'var',184,'N'}]]]]}|[{'remote_type',184,[{'atom',184,'unicode'}|[{'atom',184,'charlist'}|[[]]]]}]]}|[[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'This'}|[{'type',185,'wxLocale',[]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'SzOrigString'}|[{'remote_type',185,[{'atom',185,'unicode'}|[{'atom',185,'chardata'}|[[]]]]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'SzOrigString2'}|[{'remote_type',185,[{'atom',185,'unicode'}|[{'atom',185,'chardata'}|[[]]]]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'N'}|[{'type',185,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'getString',5},[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'This'}|[{'var',192,'SzOrigString'}|[{'var',192,'SzOrigString2'}|[{'var',192,'N'}|[{'type',192,'list',[{'var',192,'Option'}]}]]]]]}|[{'remote_type',192,[{'atom',192,'unicode'}|[{'atom',192,'charlist'}|[[]]]]}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'This'}|[{'type',193,'wxLocale',[]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'SzOrigString'}|[{'remote_type',193,[{'atom',193,'unicode'}|[{'atom',193,'chardata'}|[[]]]]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'SzOrigString2'}|[{'remote_type',193,[{'atom',193,'unicode'}|[{'atom',193,'chardata'}|[[]]]]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'N'}|[{'type',193,'integer',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Option'}|[{'type',194,'tuple',[{'atom',194,'szDomain'}|[{'remote_type',194,[{'atom',194,'unicode'}|[{'atom',194,'chardata'}|[[]]]]}]]}]]]]}]]]]]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'getHeaderValue',2},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'This'}|[{'var',207,'SzHeader'}]]}|[{'remote_type',207,[{'atom',207,'unicode'}|[{'atom',207,'charlist'}|[[]]]]}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'This'}|[{'type',208,'wxLocale',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'SzHeader'}|[{'remote_type',208,[{'atom',208,'unicode'}|[{'atom',208,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'getHeaderValue',3},[{'type',215,'bounded_fun',[{'type',215,'fun',[{'type',215,'product',[{'var',215,'This'}|[{'var',215,'SzHeader'}|[{'type',215,'list',[{'var',215,'Option'}]}]]]}|[{'remote_type',215,[{'atom',215,'unicode'}|[{'atom',215,'charlist'}|[[]]]]}]]}|[[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'This'}|[{'type',216,'wxLocale',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'SzHeader'}|[{'remote_type',216,[{'atom',216,'unicode'}|[{'atom',216,'chardata'}|[[]]]]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Option'}|[{'type',217,'tuple',[{'atom',217,'szDomain'}|[{'remote_type',217,[{'atom',217,'unicode'}|[{'atom',217,'chardata'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'getSysName',1},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'This'}]}|[{'remote_type',229,[{'atom',229,'unicode'}|[{'atom',229,'charlist'}|[[]]]]}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'This'}|[{'type',230,'wxLocale',[]}]]]]}]]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'getSystemEncoding',0},[{'type',238,'fun',[{'type',238,'product',[]}|[{'remote_type',238,[{'atom',238,'wx'}|[{'atom',238,'wx_enum'}|[[]]]]}]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'getSystemEncodingName',0},[{'type',244,'fun',[{'type',244,'product',[]}|[{'remote_type',244,[{'atom',244,'unicode'}|[{'atom',244,'charlist'}|[[]]]]}]]}]}],
		%% Line 250
		'spec' =
		    %% Line 250
		    [{{'getSystemLanguage',0},[{'type',250,'fun',[{'type',250,'product',[]}|[{'type',250,'integer',[]}]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'isLoaded',2},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'This'}|[{'var',256,'SzDomain'}]]}|[{'type',256,'boolean',[]}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'This'}|[{'type',257,'wxLocale',[]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'SzDomain'}|[{'remote_type',257,[{'atom',257,'unicode'}|[{'atom',257,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 266
		'spec' =
		    %% Line 266
		    [{{'isOk',1},[{'type',266,'bounded_fun',[{'type',266,'fun',[{'type',266,'product',[{'var',266,'This'}]}|[{'type',266,'boolean',[]}]]}|[[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'This'}|[{'type',267,'wxLocale',[]}]]]]}]]]}]}],
		%% Line 274
		'spec' =
		    %% Line 274
		    [{{'destroy',1},[{'type',274,'fun',[{'type',274,'product',[{'ann_type',274,[{'var',274,'This'}|[{'type',274,'wxLocale',[]}]]}]}|[{'atom',274,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 38
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxLocale'})
'new'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	call 'wxe_util':'construct'
	    (3528, %% Line 45
		   #{}#)
'new'/1 =
    %% Line 51
    fun (_cor0) ->
	case _cor0 of
	  <Language>
	      when %% Line 52
		call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 53
	      apply 'new'/2
		  (Language, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 59
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Language,Options>
	      when let <_cor2> =
		    %% Line 60
		    call 'erlang':'is_integer'
			(Language)
		in  let <_cor3> =
			%% Line 60
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 60
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <MOpts> =
		  %% Line 61
		  ( fun (_cor6,_cor5) ->
			case <_cor6,_cor5> of
			  <{'flags',Flags},Acc> when 'true' ->
			      let <_cor4> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Flags>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor4|Acc]
			  %% Line 62
			  <BadOpt,_cor15> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/2-fun-0-'}}] )
	      in  let <_cor10> =
		      %% Line 63
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 63
			  call 'erlang':'list_to_binary'
			      (_cor10)
		      in  let <_cor12> =
			      %% Line 65
			      #{#<Language>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 64
			      call 'wxe_util':'construct'
				  (3530, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 71
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 72
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 73
	      apply 'init'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'init'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 81
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 82
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 83
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'language',Language},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Language>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 84
			      <{'flags',Flags},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Flags>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 85
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-init/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 86
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 86
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 88
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 87
				  call 'wxe_util':'call'
				      (3533, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'init',2}}] )
	    -| ['compiler_generated'] )
	end
'addCatalog'/2 =
    %% Line 93
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},SzDomain>
	      when %% Line 94
		call 'erlang':'is_list'
		    (SzDomain) ->
	      do  %% Line 95
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <SzDomain_UC> =
		      %% Line 96
		      call 'unicode':'characters_to_binary'
			  ([SzDomain|[0]])
		  in  let <_cor10> =
			  %% Line 98
			  call 'erlang':'byte_size'
			      (SzDomain_UC)
		      in  let <_cor5> =
			      %% Line 98
			      call 'erlang':'byte_size'
				  (SzDomain_UC)
			  in  let <_cor6> =
				  %% Line 98
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 98
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 98
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 98
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 98
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<SzDomain_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 97
						  call 'wxe_util':'call'
						      (3534, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'addCatalog',2}}] )
	    -| ['compiler_generated'] )
	end
'addCatalog'/4 =
    %% Line 104
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor29},SzDomain,MsgIdLanguage,MsgIdCharset>
	      when %% Line 105
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (SzDomain)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(MsgIdLanguage)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (MsgIdCharset)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 106
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <SzDomain_UC> =
		      %% Line 107
		      call 'unicode':'characters_to_binary'
			  ([SzDomain|[0]])
		  in  let <MsgIdCharset_UC> =
			  %% Line 108
			  call 'unicode':'characters_to_binary'
			      ([MsgIdCharset|[0]])
		      in  let <_cor23> =
			      %% Line 110
			      call 'erlang':'byte_size'
				  (SzDomain_UC)
			  in  let <_cor18> =
				  %% Line 110
				  call 'erlang':'byte_size'
				      (SzDomain_UC)
			      in  let <_cor19> =
				      %% Line 110
				      call 'erlang':'+'
					  (0, _cor18)
				  in  let <_cor20> =
					  %% Line 110
					  call 'erlang':'band'
					      (_cor19, 7)
				      in  let <_cor21> =
					      %% Line 110
					      call 'erlang':'-'
						  (8, _cor20)
					  in  let <_cor22> =
						  %% Line 110
						  call 'erlang':'band'
						      (_cor21, 7)
					      in  let <_cor17> =
						      %% Line 110
						      call 'erlang':'byte_size'
							  (MsgIdCharset_UC)
						  in  let <_cor12> =
							  %% Line 110
							  call 'erlang':'byte_size'
							      (MsgIdCharset_UC)
						      in  let <_cor13> =
							      %% Line 110
							      call 'erlang':'+'
								  (0, _cor12)
							  in  let <_cor14> =
								  %% Line 110
								  call 'erlang':'band'
								      (_cor13, 7)
							      in  let <_cor15> =
								      %% Line 110
								      call 'erlang':'-'
									  (8, _cor14)
								  in  let <_cor16> =
									  %% Line 110
									  call 'erlang':'band'
									      (_cor15, 7)
								      in  let <_cor24> =
									      %% Line 110
									      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
										#<_cor23>(32,1,'integer',['unsigned'|['native']]),
										#<SzDomain_UC>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor22,8,'integer',['unsigned'|['big']]),
										#<MsgIdLanguage>(32,1,'integer',['unsigned'|['native']]),
										#<_cor17>(32,1,'integer',['unsigned'|['native']]),
										#<MsgIdCharset_UC>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor16,8,'integer',['unsigned'|['big']])}#
									  in  %% Line 109
									      call 'wxe_util':'call'
										  (3535, _cor24)
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'addCatalog',4}}] )
	    -| ['compiler_generated'] )
	end
'addCatalogLookupPathPrefix'/1 =
    %% Line 115
    fun (_cor0) ->
	case _cor0 of
	  <Prefix>
	      when %% Line 116
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <Prefix_UC> =
		  %% Line 117
		  call 'unicode':'characters_to_binary'
		      ([Prefix|[0]])
	      in  let <_cor7> =
		      %% Line 119
		      call 'erlang':'byte_size'
			  (Prefix_UC)
		  in  let <_cor2> =
			  %% Line 119
			  call 'erlang':'byte_size'
			      (Prefix_UC)
		      in  let <_cor3> =
			      %% Line 119
			      call 'erlang':'+'
				  (4, _cor2)
			  in  let <_cor4> =
				  %% Line 119
				  call 'erlang':'band'
				      (_cor3, 7)
			      in  let <_cor5> =
				      %% Line 119
				      call 'erlang':'-'
					  (8, _cor4)
				  in  let <_cor6> =
					  %% Line 119
					  call 'erlang':'band'
					      (_cor5, 7)
				      in  let <_cor8> =
					      %% Line 119
					      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
						#<Prefix_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
					  in  %% Line 118
					      call 'wxe_util':'cast'
						  (3536, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'addCatalogLookupPathPrefix',1}}] )
	    -| ['compiler_generated'] )
	end
'getCanonicalName'/1 =
    %% Line 124
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 125
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 127
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 126
		      call 'wxe_util':'call'
			  (3537, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCanonicalName',1}}] )
	    -| ['compiler_generated'] )
	end
'getLanguage'/1 =
    %% Line 132
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 133
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 135
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 134
		      call 'wxe_util':'call'
			  (3538, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLanguage',1}}] )
	    -| ['compiler_generated'] )
	end
'getLanguageName'/1 =
    %% Line 140
    fun (_cor0) ->
	case _cor0 of
	  <Lang>
	      when %% Line 141
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 143
		  #{#<Lang>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 142
		  call 'wxe_util':'call'
		      (3539, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'getLanguageName',1}}] )
	    -| ['compiler_generated'] )
	end
'getLocale'/1 =
    %% Line 148
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 149
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 151
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 150
		      call 'wxe_util':'call'
			  (3540, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLocale',1}}] )
	    -| ['compiler_generated'] )
	end
'getName'/1 =
    %% Line 156
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 157
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 159
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 158
		      call 'wxe_util':'call'
			  (3541, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getName',1}}] )
	    -| ['compiler_generated'] )
	end
'getString'/2 =
    %% Line 165
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},SzOrigString>
	      when %% Line 166
		call 'erlang':'is_list'
		    (SzOrigString) ->
	      %% Line 167
	      apply 'getString'/3
		  (This, SzOrigString, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'getString',2}}] )
	    -| ['compiler_generated'] )
	end
'getString'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor33},SzOrigString,Options>
	      when let <_cor3> =
		    %% Line 174
		    call 'erlang':'is_list'
			(SzOrigString)
		in  let <_cor4> =
			%% Line 174
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 174
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 175
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <SzOrigString_UC> =
		      %% Line 176
		      call 'unicode':'characters_to_binary'
			  ([SzOrigString|[0]])
		  in  let <MOpts> =
			  %% Line 177
			  ( fun (_cor17,_cor16) ->
				case <_cor17,_cor16> of
				  <{'szDomain',SzDomain},Acc> when 'true' ->
				      let <SzDomain_UC> =
					  call 'unicode':'characters_to_binary'
					      ([SzDomain|[0]])
				      in  let <_cor14> =
					      call 'erlang':'byte_size'
						  (SzDomain_UC)
					  in  let <_cor9> =
						  call 'erlang':'byte_size'
						      (SzDomain_UC)
					      in  let <_cor10> =
						      call 'erlang':'+'
							  (0, _cor9)
						  in  let <_cor11> =
							  call 'erlang':'band'
							      (_cor10, 7)
						      in  let <_cor12> =
							      call 'erlang':'-'
								  (8, _cor11)
							  in  let <_cor13> =
								  call 'erlang':'band'
								      (_cor12, 7)
							      in  let <_cor15> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor14>(32,1,'integer',['unsigned'|['native']]),
									#<SzDomain_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor13,8,'integer',['unsigned'|['big']])}#
								  in  [_cor15|Acc]
				  %% Line 178
				  <BadOpt,_cor34> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-getString/3-fun-0-'}}] )
		      in  let <_cor21> =
			      %% Line 179
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 179
				  call 'erlang':'list_to_binary'
				      (_cor21)
			      in  let <_cor28> =
				      %% Line 181
				      call 'erlang':'byte_size'
					  (SzOrigString_UC)
				  in  let <_cor23> =
					  %% Line 181
					  call 'erlang':'byte_size'
					      (SzOrigString_UC)
				      in  let <_cor24> =
					      %% Line 181
					      call 'erlang':'+'
						  (0, _cor23)
					  in  let <_cor25> =
						  %% Line 181
						  call 'erlang':'band'
						      (_cor24, 7)
					      in  let <_cor26> =
						      %% Line 181
						      call 'erlang':'-'
							  (8, _cor25)
						  in  let <_cor27> =
							  %% Line 181
							  call 'erlang':'band'
							      (_cor26, 7)
						      in  let <_cor29> =
							      %% Line 181
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor28>(32,1,'integer',['unsigned'|['native']]),
								#<SzOrigString_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor27,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 180
							      call 'wxe_util':'call'
								  (3542, _cor29)
	  ( <_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30})
		  -| [{'function_name',{'getString',3}}] )
	    -| ['compiler_generated'] )
	end
'getString'/4 =
    %% Line 187
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},SzOrigString,SzOrigString2,N>
	      when %% Line 188
		( try
		      let <_cor4> =
			  call 'erlang':'is_list'
			      (SzOrigString)
		      in  let <_cor5> =
			      call 'erlang':'is_list'
				  (SzOrigString2)
			  in  let <_cor6> =
				  call 'erlang':'is_integer'
				      (N)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 189
	      apply 'getString'/5
		  (This, SzOrigString, SzOrigString2, N, [])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'getString',4}}] )
	    -| ['compiler_generated'] )
	end
'getString'/5 =
    %% Line 195
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor48},SzOrigString,SzOrigString2,N,Options>
	      when %% Line 196
		try
		    let <_cor5> =
			call 'erlang':'is_list'
			    (SzOrigString)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(SzOrigString2)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (N)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 197
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <SzOrigString_UC> =
		      %% Line 198
		      call 'unicode':'characters_to_binary'
			  ([SzOrigString|[0]])
		  in  let <SzOrigString2_UC> =
			  %% Line 199
			  call 'unicode':'characters_to_binary'
			      ([SzOrigString2|[0]])
		      in  let <MOpts> =
			      %% Line 200
			      ( fun (_cor24,_cor23) ->
				    case <_cor24,_cor23> of
				      <{'szDomain',SzDomain},Acc> when 'true' ->
					  let <SzDomain_UC> =
					      call 'unicode':'characters_to_binary'
						  ([SzDomain|[0]])
					  in  let <_cor21> =
						  call 'erlang':'byte_size'
						      (SzDomain_UC)
					      in  let <_cor16> =
						      call 'erlang':'byte_size'
							  (SzDomain_UC)
						  in  let <_cor17> =
							  call 'erlang':'+'
							      (0, _cor16)
						      in  let <_cor18> =
							      call 'erlang':'band'
								  (_cor17, 7)
							  in  let <_cor19> =
								  call 'erlang':'-'
								      (8, _cor18)
							      in  let <_cor20> =
								      call 'erlang':'band'
									  (_cor19, 7)
								  in  let <_cor22> =
									  #{#<1>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor21>(32,1,'integer',['unsigned'|['native']]),
									    #<SzDomain_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor20,8,'integer',['unsigned'|['big']])}#
								      in  [_cor22|Acc]
				      %% Line 201
				      <BadOpt,_cor49> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-getString/5-fun-0-'}}] )
			  in  let <_cor28> =
				  %% Line 202
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 202
				      call 'erlang':'list_to_binary'
					  (_cor28)
				  in  let <_cor41> =
					  %% Line 204
					  call 'erlang':'byte_size'
					      (SzOrigString_UC)
				      in  let <_cor36> =
					      %% Line 204
					      call 'erlang':'byte_size'
						  (SzOrigString_UC)
					  in  let <_cor37> =
						  %% Line 204
						  call 'erlang':'+'
						      (0, _cor36)
					      in  let <_cor38> =
						      %% Line 204
						      call 'erlang':'band'
							  (_cor37, 7)
						  in  let <_cor39> =
							  %% Line 204
							  call 'erlang':'-'
							      (8, _cor38)
						      in  let <_cor40> =
							      %% Line 204
							      call 'erlang':'band'
								  (_cor39, 7)
							  in  let <_cor35> =
								  %% Line 204
								  call 'erlang':'byte_size'
								      (SzOrigString2_UC)
							      in  let <_cor30> =
								      %% Line 204
								      call 'erlang':'byte_size'
									  (SzOrigString2_UC)
								  in  let <_cor31> =
									  %% Line 204
									  call 'erlang':'+'
									      (4, _cor30)
								      in  let <_cor32> =
									      %% Line 204
									      call 'erlang':'band'
										  (_cor31, 7)
									  in  let <_cor33> =
										  %% Line 204
										  call 'erlang':'-'
										      (8, _cor32)
									      in  let <_cor34> =
										      %% Line 204
										      call 'erlang':'band'
											  (_cor33, 7)
										  in  let <_cor42> =
											  %% Line 204
											  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
											    #<_cor41>(32,1,'integer',['unsigned'|['native']]),
											    #<SzOrigString_UC>('all',8,'binary',['unsigned'|['big']]),
											    #<0>(_cor40,8,'integer',['unsigned'|['big']]),
											    #<_cor35>(32,1,'integer',['unsigned'|['native']]),
											    #<SzOrigString2_UC>('all',8,'binary',['unsigned'|['big']]),
											    #<0>(_cor34,8,'integer',['unsigned'|['big']]),
											    #<N>(32,1,'integer',['unsigned'|['native']]),
											    #<0>(32,1,'integer',['unsigned'|['big']]),
											    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
										      in  %% Line 203
											  call 'wxe_util':'call'
											      (3543, _cor42)
	  ( <_cor47,_cor46,_cor45,_cor44,_cor43> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor47,_cor46,_cor45,_cor44,_cor43})
		  -| [{'function_name',{'getString',5}}] )
	    -| ['compiler_generated'] )
	end
'getHeaderValue'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},SzHeader>
	      when %% Line 211
		call 'erlang':'is_list'
		    (SzHeader) ->
	      %% Line 212
	      apply 'getHeaderValue'/3
		  (This, SzHeader, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'getHeaderValue',2}}] )
	    -| ['compiler_generated'] )
	end
'getHeaderValue'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor33},SzHeader,Options>
	      when let <_cor3> =
		    %% Line 219
		    call 'erlang':'is_list'
			(SzHeader)
		in  let <_cor4> =
			%% Line 219
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 219
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 220
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <SzHeader_UC> =
		      %% Line 221
		      call 'unicode':'characters_to_binary'
			  ([SzHeader|[0]])
		  in  let <MOpts> =
			  %% Line 222
			  ( fun (_cor17,_cor16) ->
				case <_cor17,_cor16> of
				  <{'szDomain',SzDomain},Acc> when 'true' ->
				      let <SzDomain_UC> =
					  call 'unicode':'characters_to_binary'
					      ([SzDomain|[0]])
				      in  let <_cor14> =
					      call 'erlang':'byte_size'
						  (SzDomain_UC)
					  in  let <_cor9> =
						  call 'erlang':'byte_size'
						      (SzDomain_UC)
					      in  let <_cor10> =
						      call 'erlang':'+'
							  (0, _cor9)
						  in  let <_cor11> =
							  call 'erlang':'band'
							      (_cor10, 7)
						      in  let <_cor12> =
							      call 'erlang':'-'
								  (8, _cor11)
							  in  let <_cor13> =
								  call 'erlang':'band'
								      (_cor12, 7)
							      in  let <_cor15> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor14>(32,1,'integer',['unsigned'|['native']]),
									#<SzDomain_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor13,8,'integer',['unsigned'|['big']])}#
								  in  [_cor15|Acc]
				  %% Line 223
				  <BadOpt,_cor34> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-getHeaderValue/3-fun-0-'}}] )
		      in  let <_cor21> =
			      %% Line 224
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 224
				  call 'erlang':'list_to_binary'
				      (_cor21)
			      in  let <_cor28> =
				      %% Line 226
				      call 'erlang':'byte_size'
					  (SzHeader_UC)
				  in  let <_cor23> =
					  %% Line 226
					  call 'erlang':'byte_size'
					      (SzHeader_UC)
				      in  let <_cor24> =
					      %% Line 226
					      call 'erlang':'+'
						  (0, _cor23)
					  in  let <_cor25> =
						  %% Line 226
						  call 'erlang':'band'
						      (_cor24, 7)
					      in  let <_cor26> =
						      %% Line 226
						      call 'erlang':'-'
							  (8, _cor25)
						  in  let <_cor27> =
							  %% Line 226
							  call 'erlang':'band'
							      (_cor26, 7)
						      in  let <_cor29> =
							      %% Line 226
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor28>(32,1,'integer',['unsigned'|['native']]),
								#<SzHeader_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor27,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 225
							      call 'wxe_util':'call'
								  (3544, _cor29)
	  ( <_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30})
		  -| [{'function_name',{'getHeaderValue',3}}] )
	    -| ['compiler_generated'] )
	end
'getSysName'/1 =
    %% Line 231
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 232
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 234
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 233
		      call 'wxe_util':'call'
			  (3545, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSysName',1}}] )
	    -| ['compiler_generated'] )
	end
'getSystemEncoding'/0 =
    %% Line 239
    fun () ->
	%% Line 240
	call 'wxe_util':'call'
	    (3546, %% Line 241
		   #{}#)
'getSystemEncodingName'/0 =
    %% Line 245
    fun () ->
	%% Line 246
	call 'wxe_util':'call'
	    (3547, %% Line 247
		   #{}#)
'getSystemLanguage'/0 =
    %% Line 251
    fun () ->
	%% Line 252
	call 'wxe_util':'call'
	    (3548, %% Line 253
		   #{}#)
'isLoaded'/2 =
    %% Line 258
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},SzDomain>
	      when %% Line 259
		call 'erlang':'is_list'
		    (SzDomain) ->
	      do  %% Line 260
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <SzDomain_UC> =
		      %% Line 261
		      call 'unicode':'characters_to_binary'
			  ([SzDomain|[0]])
		  in  let <_cor10> =
			  %% Line 263
			  call 'erlang':'byte_size'
			      (SzDomain_UC)
		      in  let <_cor5> =
			      %% Line 263
			      call 'erlang':'byte_size'
				  (SzDomain_UC)
			  in  let <_cor6> =
				  %% Line 263
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 263
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 263
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 263
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 263
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<SzDomain_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 262
						  call 'wxe_util':'call'
						      (3549, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'isLoaded',2}}] )
	    -| ['compiler_generated'] )
	end
'isOk'/1 =
    %% Line 268
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 269
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 271
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 270
		      call 'wxe_util':'call'
			  (3550, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isOk',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 275
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 276
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxLocale') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxLocale')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 277
		      call 'wxe_util':'destroy'
			  (3531, Obj)
		      %% Line 278
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxLocale')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxLocale', _cor0)
end