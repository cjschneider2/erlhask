module 'wxSplitterWindow' ['cacheBestSize'/2,
			   'captureMouse'/1,
			   'center'/1,
			   'center'/2,
			   'centerOnParent'/1,
			   'centerOnParent'/2,
			   'centre'/1,
			   'centre'/2,
			   'centreOnParent'/1,
			   'centreOnParent'/2,
			   'clearBackground'/1,
			   'clientToScreen'/2,
			   'clientToScreen'/3,
			   'close'/1,
			   'close'/2,
			   'connect'/2,
			   'connect'/3,
			   'convertDialogToPixels'/2,
			   'convertPixelsToDialog'/2,
			   'create'/2,
			   'create'/3,
			   'destroy'/1,
			   'destroyChildren'/1,
			   'disable'/1,
			   'disconnect'/1,
			   'disconnect'/2,
			   'disconnect'/3,
			   'enable'/1,
			   'enable'/2,
			   'findWindow'/2,
			   'fit'/1,
			   'fitInside'/1,
			   'freeze'/1,
			   'getAcceleratorTable'/1,
			   'getBackgroundColour'/1,
			   'getBackgroundStyle'/1,
			   'getBestSize'/1,
			   'getCaret'/1,
			   'getCharHeight'/1,
			   'getCharWidth'/1,
			   'getChildren'/1,
			   'getClientSize'/1,
			   'getContainingSizer'/1,
			   'getCursor'/1,
			   'getDropTarget'/1,
			   'getEventHandler'/1,
			   'getExtraStyle'/1,
			   'getFont'/1,
			   'getForegroundColour'/1,
			   'getGrandParent'/1,
			   'getHandle'/1,
			   'getHelpText'/1,
			   'getId'/1,
			   'getLabel'/1,
			   'getMaxSize'/1,
			   'getMinSize'/1,
			   'getMinimumPaneSize'/1,
			   'getName'/1,
			   'getParent'/1,
			   'getPosition'/1,
			   'getRect'/1,
			   'getSashGravity'/1,
			   'getSashPosition'/1,
			   'getScreenPosition'/1,
			   'getScreenRect'/1,
			   'getScrollPos'/2,
			   'getScrollRange'/2,
			   'getScrollThumb'/2,
			   'getSize'/1,
			   'getSizer'/1,
			   'getSplitMode'/1,
			   'getTextExtent'/2,
			   'getTextExtent'/3,
			   'getToolTip'/1,
			   'getUpdateRegion'/1,
			   'getVirtualSize'/1,
			   'getWindow1'/1,
			   'getWindow2'/1,
			   'getWindowStyleFlag'/1,
			   'getWindowVariant'/1,
			   'hasCapture'/1,
			   'hasScrollbar'/2,
			   'hasTransparentBackground'/1,
			   'hide'/1,
			   'inheritAttributes'/1,
			   'initDialog'/1,
			   'initialize'/2,
			   'invalidateBestSize'/1,
			   'isEnabled'/1,
			   'isExposed'/2,
			   'isExposed'/3,
			   'isExposed'/5,
			   'isRetained'/1,
			   'isShown'/1,
			   'isSplit'/1,
			   'isTopLevel'/1,
			   'layout'/1,
			   'lineDown'/1,
			   'lineUp'/1,
			   'lower'/1,
			   'makeModal'/1,
			   'makeModal'/2,
			   'module_info'/0,
			   'module_info'/1,
			   'move'/2,
			   'move'/3,
			   'move'/4,
			   'moveAfterInTabOrder'/2,
			   'moveBeforeInTabOrder'/2,
			   'navigate'/1,
			   'navigate'/2,
			   'new'/0,
			   'new'/1,
			   'new'/2,
			   'pageDown'/1,
			   'pageUp'/1,
			   'parent_class'/1,
			   'popEventHandler'/1,
			   'popEventHandler'/2,
			   'popupMenu'/2,
			   'popupMenu'/3,
			   'popupMenu'/4,
			   'raise'/1,
			   'refresh'/1,
			   'refresh'/2,
			   'refreshRect'/2,
			   'refreshRect'/3,
			   'releaseMouse'/1,
			   'removeChild'/2,
			   'reparent'/2,
			   'replaceWindow'/3,
			   'screenToClient'/1,
			   'screenToClient'/2,
			   'scrollLines'/2,
			   'scrollPages'/2,
			   'scrollWindow'/3,
			   'scrollWindow'/4,
			   'setAcceleratorTable'/2,
			   'setAutoLayout'/2,
			   'setBackgroundColour'/2,
			   'setBackgroundStyle'/2,
			   'setCaret'/2,
			   'setClientSize'/2,
			   'setClientSize'/3,
			   'setContainingSizer'/2,
			   'setCursor'/2,
			   'setDropTarget'/2,
			   'setExtraStyle'/2,
			   'setFocus'/1,
			   'setFocusFromKbd'/1,
			   'setFont'/2,
			   'setForegroundColour'/2,
			   'setHelpText'/2,
			   'setId'/2,
			   'setLabel'/2,
			   'setMaxSize'/2,
			   'setMinSize'/2,
			   'setMinimumPaneSize'/2,
			   'setName'/2,
			   'setOwnBackgroundColour'/2,
			   'setOwnFont'/2,
			   'setOwnForegroundColour'/2,
			   'setPalette'/2,
			   'setSashGravity'/2,
			   'setSashPosition'/2,
			   'setSashPosition'/3,
			   'setSashSize'/2,
			   'setScrollPos'/3,
			   'setScrollPos'/4,
			   'setScrollbar'/5,
			   'setScrollbar'/6,
			   'setSize'/2,
			   'setSize'/3,
			   'setSize'/5,
			   'setSize'/6,
			   'setSizeHints'/2,
			   'setSizeHints'/3,
			   'setSizeHints'/4,
			   'setSizer'/2,
			   'setSizer'/3,
			   'setSizerAndFit'/2,
			   'setSizerAndFit'/3,
			   'setSplitMode'/2,
			   'setThemeEnabled'/2,
			   'setToolTip'/2,
			   'setVirtualSize'/2,
			   'setVirtualSize'/3,
			   'setVirtualSizeHints'/2,
			   'setVirtualSizeHints'/3,
			   'setVirtualSizeHints'/4,
			   'setWindowStyle'/2,
			   'setWindowStyleFlag'/2,
			   'setWindowVariant'/2,
			   'shouldInheritColours'/1,
			   'show'/1,
			   'show'/2,
			   'splitHorizontally'/3,
			   'splitHorizontally'/4,
			   'splitVertically'/3,
			   'splitVertically'/4,
			   'thaw'/1,
			   'transferDataFromWindow'/1,
			   'transferDataToWindow'/1,
			   'unsplit'/1,
			   'unsplit'/2,
			   'update'/1,
			   'updateSize'/1,
			   'updateWindowUI'/1,
			   'updateWindowUI'/2,
			   'validate'/1,
			   'warpPointer'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 76
		'export_type' =
		    %% Line 76
		    [{'wxSplitterWindow',0}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxSplitterWindow',{'remote_type',82,[{'atom',82,'wx'}|[{'atom',82,'wx_object'}|[[]]]]},[]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'new',0},[{'type',84,'fun',[{'type',84,'product',[]}|[{'type',84,'wxSplitterWindow',[]}]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'new',1},[{'type',90,'bounded_fun',[{'type',90,'fun',[{'type',90,'product',[{'var',90,'Parent'}]}|[{'type',90,'wxSplitterWindow',[]}]]}|[[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'Parent'}|[{'remote_type',91,[{'atom',91,'wxWindow'}|[{'atom',91,'wxWindow'}|[[]]]]}]]]]}]]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'new',2},[{'type',98,'bounded_fun',[{'type',98,'fun',[{'type',98,'product',[{'var',98,'Parent'}|[{'type',98,'list',[{'var',98,'Option'}]}]]}|[{'type',98,'wxSplitterWindow',[]}]]}|[[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Parent'}|[{'remote_type',99,[{'atom',99,'wxWindow'}|[{'atom',99,'wxWindow'}|[[]]]]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Option'}|[{'type',100,'union',[{'type',100,'tuple',[{'atom',100,'id'}|[{'type',100,'integer',[]}]]}|[{'type',101,'tuple',[{'atom',101,'pos'}|[{'type',101,'tuple',[{'ann_type',101,[{'var',101,'X'}|[{'type',101,'integer',[]}]]}|[{'ann_type',101,[{'var',101,'Y'}|[{'type',101,'integer',[]}]]}]]}]]}|[{'type',102,'tuple',[{'atom',102,'size'}|[{'type',102,'tuple',[{'ann_type',102,[{'var',102,'W'}|[{'type',102,'integer',[]}]]}|[{'ann_type',102,[{'var',102,'H'}|[{'type',102,'integer',[]}]]}]]}]]}|[{'type',103,'tuple',[{'atom',103,'style'}|[{'type',103,'integer',[]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 117
		'spec' =
		    %% Line 117
		    [{{'create',2},[{'type',117,'bounded_fun',[{'type',117,'fun',[{'type',117,'product',[{'var',117,'This'}|[{'var',117,'Parent'}]]}|[{'type',117,'boolean',[]}]]}|[[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'This'}|[{'type',118,'wxSplitterWindow',[]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Parent'}|[{'remote_type',118,[{'atom',118,'wxWindow'}|[{'atom',118,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'create',3},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'This'}|[{'var',125,'Parent'}|[{'type',125,'list',[{'var',125,'Option'}]}]]]}|[{'type',125,'boolean',[]}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'This'}|[{'type',126,'wxSplitterWindow',[]}]]]]}|[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Parent'}|[{'remote_type',126,[{'atom',126,'wxWindow'}|[{'atom',126,'wxWindow'}|[[]]]]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Option'}|[{'type',127,'union',[{'type',127,'tuple',[{'atom',127,'id'}|[{'type',127,'integer',[]}]]}|[{'type',128,'tuple',[{'atom',128,'pos'}|[{'type',128,'tuple',[{'ann_type',128,[{'var',128,'X'}|[{'type',128,'integer',[]}]]}|[{'ann_type',128,[{'var',128,'Y'}|[{'type',128,'integer',[]}]]}]]}]]}|[{'type',129,'tuple',[{'atom',129,'size'}|[{'type',129,'tuple',[{'ann_type',129,[{'var',129,'W'}|[{'type',129,'integer',[]}]]}|[{'ann_type',129,[{'var',129,'H'}|[{'type',129,'integer',[]}]]}]]}]]}|[{'type',130,'tuple',[{'atom',130,'style'}|[{'type',130,'integer',[]}]]}]]]]}]]]]}]]]]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'getMinimumPaneSize',1},[{'type',145,'bounded_fun',[{'type',145,'fun',[{'type',145,'product',[{'var',145,'This'}]}|[{'type',145,'integer',[]}]]}|[[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'This'}|[{'type',146,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'getSashGravity',1},[{'type',153,'bounded_fun',[{'type',153,'fun',[{'type',153,'product',[{'var',153,'This'}]}|[{'type',153,'number',[]}]]}|[[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'This'}|[{'type',154,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'getSashPosition',1},[{'type',161,'bounded_fun',[{'type',161,'fun',[{'type',161,'product',[{'var',161,'This'}]}|[{'type',161,'integer',[]}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'This'}|[{'type',162,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 170
		'spec' =
		    %% Line 170
		    [{{'getSplitMode',1},[{'type',170,'bounded_fun',[{'type',170,'fun',[{'type',170,'product',[{'var',170,'This'}]}|[{'remote_type',170,[{'atom',170,'wx'}|[{'atom',170,'wx_enum'}|[[]]]]}]]}|[[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'This'}|[{'type',171,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'getWindow1',1},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'This'}]}|[{'remote_type',178,[{'atom',178,'wxWindow'}|[{'atom',178,'wxWindow'}|[[]]]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'This'}|[{'type',179,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'getWindow2',1},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'This'}]}|[{'remote_type',186,[{'atom',186,'wxWindow'}|[{'atom',186,'wxWindow'}|[[]]]]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'This'}|[{'type',187,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 194
		'spec' =
		    %% Line 194
		    [{{'initialize',2},[{'type',194,'bounded_fun',[{'type',194,'fun',[{'type',194,'product',[{'var',194,'This'}|[{'var',194,'Window'}]]}|[{'atom',194,'ok'}]]}|[[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'This'}|[{'type',195,'wxSplitterWindow',[]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Window'}|[{'remote_type',195,[{'atom',195,'wxWindow'}|[{'atom',195,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'isSplit',1},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'This'}]}|[{'type',203,'boolean',[]}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'This'}|[{'type',204,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'replaceWindow',3},[{'type',211,'bounded_fun',[{'type',211,'fun',[{'type',211,'product',[{'var',211,'This'}|[{'var',211,'WinOld'}|[{'var',211,'WinNew'}]]]}|[{'type',211,'boolean',[]}]]}|[[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'This'}|[{'type',212,'wxSplitterWindow',[]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'WinOld'}|[{'remote_type',212,[{'atom',212,'wxWindow'}|[{'atom',212,'wxWindow'}|[[]]]]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'WinNew'}|[{'remote_type',212,[{'atom',212,'wxWindow'}|[{'atom',212,'wxWindow'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'setSashGravity',2},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'This'}|[{'var',221,'Gravity'}]]}|[{'atom',221,'ok'}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'This'}|[{'type',222,'wxSplitterWindow',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Gravity'}|[{'type',222,'number',[]}]]]]}]]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'setSashPosition',2},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'This'}|[{'var',230,'Position'}]]}|[{'atom',230,'ok'}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'This'}|[{'type',231,'wxSplitterWindow',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Position'}|[{'type',231,'integer',[]}]]]]}]]]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'setSashPosition',3},[{'type',238,'bounded_fun',[{'type',238,'fun',[{'type',238,'product',[{'var',238,'This'}|[{'var',238,'Position'}|[{'type',238,'list',[{'var',238,'Option'}]}]]]}|[{'atom',238,'ok'}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'This'}|[{'type',239,'wxSplitterWindow',[]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Position'}|[{'type',239,'integer',[]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Option'}|[{'type',240,'tuple',[{'atom',240,'redraw'}|[{'type',240,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 251
		'spec' =
		    %% Line 251
		    [{{'setSashSize',2},[{'type',251,'bounded_fun',[{'type',251,'fun',[{'type',251,'product',[{'var',251,'This'}|[{'var',251,'Width'}]]}|[{'atom',251,'ok'}]]}|[[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'This'}|[{'type',252,'wxSplitterWindow',[]}]]]]}|[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Width'}|[{'type',252,'integer',[]}]]]]}]]]]}]}],
		%% Line 260
		'spec' =
		    %% Line 260
		    [{{'setMinimumPaneSize',2},[{'type',260,'bounded_fun',[{'type',260,'fun',[{'type',260,'product',[{'var',260,'This'}|[{'var',260,'Min'}]]}|[{'atom',260,'ok'}]]}|[[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'This'}|[{'type',261,'wxSplitterWindow',[]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'Min'}|[{'type',261,'integer',[]}]]]]}]]]]}]}],
		%% Line 269
		'spec' =
		    %% Line 269
		    [{{'setSplitMode',2},[{'type',269,'bounded_fun',[{'type',269,'fun',[{'type',269,'product',[{'var',269,'This'}|[{'var',269,'Mode'}]]}|[{'atom',269,'ok'}]]}|[[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'This'}|[{'type',270,'wxSplitterWindow',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Mode'}|[{'type',270,'integer',[]}]]]]}]]]]}]}],
		%% Line 278
		'spec' =
		    %% Line 278
		    [{{'splitHorizontally',3},[{'type',278,'bounded_fun',[{'type',278,'fun',[{'type',278,'product',[{'var',278,'This'}|[{'var',278,'Window1'}|[{'var',278,'Window2'}]]]}|[{'type',278,'boolean',[]}]]}|[[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'This'}|[{'type',279,'wxSplitterWindow',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Window1'}|[{'remote_type',279,[{'atom',279,'wxWindow'}|[{'atom',279,'wxWindow'}|[[]]]]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Window2'}|[{'remote_type',279,[{'atom',279,'wxWindow'}|[{'atom',279,'wxWindow'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'splitHorizontally',4},[{'type',286,'bounded_fun',[{'type',286,'fun',[{'type',286,'product',[{'var',286,'This'}|[{'var',286,'Window1'}|[{'var',286,'Window2'}|[{'type',286,'list',[{'var',286,'Option'}]}]]]]}|[{'type',286,'boolean',[]}]]}|[[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'This'}|[{'type',287,'wxSplitterWindow',[]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Window1'}|[{'remote_type',287,[{'atom',287,'wxWindow'}|[{'atom',287,'wxWindow'}|[[]]]]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Window2'}|[{'remote_type',287,[{'atom',287,'wxWindow'}|[{'atom',287,'wxWindow'}|[[]]]]}]]]]}|[{'type',288,'constraint',[{'atom',288,'is_subtype'}|[[{'var',288,'Option'}|[{'type',288,'tuple',[{'atom',288,'sashPosition'}|[{'type',288,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 301
		'spec' =
		    %% Line 301
		    [{{'splitVertically',3},[{'type',301,'bounded_fun',[{'type',301,'fun',[{'type',301,'product',[{'var',301,'This'}|[{'var',301,'Window1'}|[{'var',301,'Window2'}]]]}|[{'type',301,'boolean',[]}]]}|[[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'This'}|[{'type',302,'wxSplitterWindow',[]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Window1'}|[{'remote_type',302,[{'atom',302,'wxWindow'}|[{'atom',302,'wxWindow'}|[[]]]]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Window2'}|[{'remote_type',302,[{'atom',302,'wxWindow'}|[{'atom',302,'wxWindow'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 309
		'spec' =
		    %% Line 309
		    [{{'splitVertically',4},[{'type',309,'bounded_fun',[{'type',309,'fun',[{'type',309,'product',[{'var',309,'This'}|[{'var',309,'Window1'}|[{'var',309,'Window2'}|[{'type',309,'list',[{'var',309,'Option'}]}]]]]}|[{'type',309,'boolean',[]}]]}|[[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'This'}|[{'type',310,'wxSplitterWindow',[]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Window1'}|[{'remote_type',310,[{'atom',310,'wxWindow'}|[{'atom',310,'wxWindow'}|[[]]]]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Window2'}|[{'remote_type',310,[{'atom',310,'wxWindow'}|[{'atom',310,'wxWindow'}|[[]]]]}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Option'}|[{'type',311,'tuple',[{'atom',311,'sashPosition'}|[{'type',311,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'unsplit',1},[{'type',324,'bounded_fun',[{'type',324,'fun',[{'type',324,'product',[{'var',324,'This'}]}|[{'type',324,'boolean',[]}]]}|[[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'This'}|[{'type',325,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 332
		'spec' =
		    %% Line 332
		    [{{'unsplit',2},[{'type',332,'bounded_fun',[{'type',332,'fun',[{'type',332,'product',[{'var',332,'This'}|[{'type',332,'list',[{'var',332,'Option'}]}]]}|[{'type',332,'boolean',[]}]]}|[[{'type',333,'constraint',[{'atom',333,'is_subtype'}|[[{'var',333,'This'}|[{'type',333,'wxSplitterWindow',[]}]]]]}|[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'Option'}|[{'type',334,'tuple',[{'atom',334,'toRemove'}|[{'remote_type',334,[{'atom',334,'wxWindow'}|[{'atom',334,'wxWindow'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 345
		'spec' =
		    %% Line 345
		    [{{'updateSize',1},[{'type',345,'bounded_fun',[{'type',345,'fun',[{'type',345,'product',[{'var',345,'This'}]}|[{'atom',345,'ok'}]]}|[[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'This'}|[{'type',346,'wxSplitterWindow',[]}]]]]}]]]}]}],
		%% Line 353
		'spec' =
		    %% Line 353
		    [{{'destroy',1},[{'type',353,'fun',[{'type',353,'product',[{'ann_type',353,[{'var',353,'This'}|[{'type',353,'wxSplitterWindow',[]}]]}]}|[{'atom',353,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 79
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 80
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxSplitterWindow'})
	end
'new'/0 =
    %% Line 85
    fun () ->
	%% Line 86
	call 'wxe_util':'construct'
	    (3440, %% Line 87
		   #{}#)
'new'/1 =
    %% Line 93
    fun (_cor0) ->
	case _cor0 of
	  <Parent = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 94
						       ( 'true'
							 -| ['compiler_generated'] ) ->
	      %% Line 95
	      apply 'new'/2
		  (Parent, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor18},Options>
	      when %% Line 105
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 106
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 107
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'id',Id},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Id>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 108
			      <{'pos',{PosX,PosY}},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<PosX>(32,1,'integer',['unsigned'|['native']]),
					#<PosY>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor5|Acc]
			      %% Line 109
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor6|Acc]
			      %% Line 110
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<4>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 111
			      <BadOpt,_cor19> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 112
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 112
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 114
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 113
				  call 'wxe_util':'construct'
				      (3441, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/2 =
    %% Line 120
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Parent = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 122
	      apply 'create'/3
		  (This, Parent, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'create',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 131
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},{'wx_ref',ParentRef,ParentT,_cor23},Options>
	      when %% Line 132
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 133
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 134
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 135
			  ( fun (_cor12,_cor11) ->
				case <_cor12,_cor11> of
				  <{'id',Id},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Id>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
				  %% Line 136
				  <{'pos',{PosX,PosY}},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<PosX>(32,1,'integer',['unsigned'|['native']]),
					    #<PosY>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor8|Acc]
				  %% Line 137
				  <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				      let <_cor9> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<SizeW>(32,1,'integer',['unsigned'|['native']]),
					    #<SizeH>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor9|Acc]
				  %% Line 138
				  <{'style',Style},Acc> when 'true' ->
				      let <_cor10> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<Style>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor10|Acc]
				  %% Line 139
				  <BadOpt,_cor24> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-create/3-fun-0-'}}] )
		      in  let <_cor16> =
			      %% Line 140
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 140
				  call 'erlang':'list_to_binary'
				      (_cor16)
			      in  let <_cor18> =
				      %% Line 142
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 141
				      call 'wxe_util':'call'
					  (3443, _cor18)
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'getMinimumPaneSize'/1 =
    %% Line 147
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 148
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 150
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 149
		      call 'wxe_util':'call'
			  (3444, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMinimumPaneSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getSashGravity'/1 =
    %% Line 155
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 156
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 158
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 157
		      call 'wxe_util':'call'
			  (3445, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSashGravity',1}}] )
	    -| ['compiler_generated'] )
	end
'getSashPosition'/1 =
    %% Line 163
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 164
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 166
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 165
		      call 'wxe_util':'call'
			  (3446, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSashPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'getSplitMode'/1 =
    %% Line 172
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 173
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 175
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 174
		      call 'wxe_util':'call'
			  (3447, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSplitMode',1}}] )
	    -| ['compiler_generated'] )
	end
'getWindow1'/1 =
    %% Line 180
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 181
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 183
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 182
		      call 'wxe_util':'call'
			  (3448, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWindow1',1}}] )
	    -| ['compiler_generated'] )
	end
'getWindow2'/1 =
    %% Line 188
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 189
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 191
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 190
		      call 'wxe_util':'call'
			  (3449, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWindow2',1}}] )
	    -| ['compiler_generated'] )
	end
'initialize'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',WindowRef,WindowT,_cor10}> when 'true' ->
	      do  %% Line 197
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 198
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (WindowT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call WindowT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 200
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 199
			  call 'wxe_util':'cast'
			      (3450, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'initialize',2}}] )
	    -| ['compiler_generated'] )
	end
'isSplit'/1 =
    %% Line 205
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 206
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 208
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 207
		      call 'wxe_util':'call'
			  (3451, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isSplit',1}}] )
	    -| ['compiler_generated'] )
	end
'replaceWindow'/3 =
    %% Line 213
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{'wx_ref',WinOldRef,WinOldT,_cor14},{'wx_ref',WinNewRef,WinNewT,_cor15}> when 'true' ->
	      do  %% Line 214
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 215
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (WinOldT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call WinOldT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 216
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WinNewT,
					   'wxWindow') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WinNewT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <_cor9> =
			      %% Line 218
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WinOldRef>(32,1,'integer',['unsigned'|['native']]),
				#<WinNewRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 217
			      call 'wxe_util':'call'
				  (3452, _cor9)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'replaceWindow',3}}] )
	    -| ['compiler_generated'] )
	end
'setSashGravity'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Gravity>
	      when %% Line 224
		call 'erlang':'is_number'
		    (Gravity) ->
	      do  %% Line 225
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 227
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Gravity>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 226
		      call 'wxe_util':'cast'
			  (3453, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setSashGravity',2}}] )
	    -| ['compiler_generated'] )
	end
'setSashPosition'/2 =
    %% Line 233
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Position>
	      when %% Line 234
		call 'erlang':'is_integer'
		    (Position) ->
	      %% Line 235
	      apply 'setSashPosition'/3
		  (This, Position, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setSashPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'setSashPosition'/3 =
    %% Line 241
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Position,Options>
	      when let <_cor3> =
		    %% Line 242
		    call 'erlang':'is_integer'
			(Position)
		in  let <_cor4> =
			%% Line 242
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 242
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 243
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 244
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'redraw',Redraw},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Redraw)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 245
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setSashPosition/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 246
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 246
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 248
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Position>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 247
				  call 'wxe_util':'cast'
				      (3454, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setSashPosition',3}}] )
	    -| ['compiler_generated'] )
	end
'setSashSize'/2 =
    %% Line 253
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Width>
	      when %% Line 254
		call 'erlang':'is_integer'
		    (Width) ->
	      do  %% Line 255
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 257
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 256
		      call 'wxe_util':'cast'
			  (3455, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setSashSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setMinimumPaneSize'/2 =
    %% Line 262
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Min>
	      when %% Line 263
		call 'erlang':'is_integer'
		    (Min) ->
	      do  %% Line 264
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 266
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Min>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 265
		      call 'wxe_util':'cast'
			  (3456, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setMinimumPaneSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setSplitMode'/2 =
    %% Line 271
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Mode>
	      when %% Line 272
		call 'erlang':'is_integer'
		    (Mode) ->
	      do  %% Line 273
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 275
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Mode>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 274
		      call 'wxe_util':'cast'
			  (3457, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setSplitMode',2}}] )
	    -| ['compiler_generated'] )
	end
'splitHorizontally'/3 =
    %% Line 281
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},Window1 = {'wx_ref',_cor10,_cor11,_cor12},Window2 = {'wx_ref',_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 283
	      apply 'splitHorizontally'/4
		  (This, Window1, Window2, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'splitHorizontally',3}}] )
	    -| ['compiler_generated'] )
	end
'splitHorizontally'/4 =
    %% Line 289
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',Window1Ref,Window1T,_cor24},{'wx_ref',Window2Ref,Window2T,_cor25},Options>
	      when %% Line 290
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 291
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 292
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (Window1T,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call Window1T:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 293
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (Window2T,
					   'wxWindow') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call Window2T:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 294
			      ( fun (_cor12,_cor11) ->
				    case <_cor12,_cor11> of
				      <{'sashPosition',SashPosition},Acc> when 'true' ->
					  let <_cor10> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<SashPosition>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor10|Acc]
				      %% Line 295
				      <BadOpt,_cor26> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-splitHorizontally/4-fun-0-'}}] )
			  in  let <_cor16> =
				  %% Line 296
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 296
				      call 'erlang':'list_to_binary'
					  (_cor16)
				  in  let <_cor18> =
					  %% Line 298
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<Window1Ref>(32,1,'integer',['unsigned'|['native']]),
					    #<Window2Ref>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 297
					  call 'wxe_util':'call'
					      (3458, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'splitHorizontally',4}}] )
	    -| ['compiler_generated'] )
	end
'splitVertically'/3 =
    %% Line 304
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},Window1 = {'wx_ref',_cor10,_cor11,_cor12},Window2 = {'wx_ref',_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 306
	      apply 'splitVertically'/4
		  (This, Window1, Window2, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'splitVertically',3}}] )
	    -| ['compiler_generated'] )
	end
'splitVertically'/4 =
    %% Line 312
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',Window1Ref,Window1T,_cor24},{'wx_ref',Window2Ref,Window2T,_cor25},Options>
	      when %% Line 313
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 314
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 315
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (Window1T,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call Window1T:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 316
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (Window2T,
					   'wxWindow') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call Window2T:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 317
			      ( fun (_cor12,_cor11) ->
				    case <_cor12,_cor11> of
				      <{'sashPosition',SashPosition},Acc> when 'true' ->
					  let <_cor10> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<SashPosition>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor10|Acc]
				      %% Line 318
				      <BadOpt,_cor26> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-splitVertically/4-fun-0-'}}] )
			  in  let <_cor16> =
				  %% Line 319
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 319
				      call 'erlang':'list_to_binary'
					  (_cor16)
				  in  let <_cor18> =
					  %% Line 321
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<Window1Ref>(32,1,'integer',['unsigned'|['native']]),
					    #<Window2Ref>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 320
					  call 'wxe_util':'call'
					      (3459, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'splitVertically',4}}] )
	    -| ['compiler_generated'] )
	end
'unsplit'/1 =
    %% Line 327
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 328
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 329
	      apply 'unsplit'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'unsplit',1}}] )
	    -| ['compiler_generated'] )
	end
'unsplit'/2 =
    %% Line 335
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},Options>
	      when %% Line 336
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 337
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 338
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{'toRemove',{'wx_ref',ToRemoveRef,ToRemoveT,_cor18}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ToRemoveT,
						       'wxWindow') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ToRemoveT:'parent_class'
						    ('wxWindow')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor6> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<ToRemoveRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor6|Acc]
			      %% Line 339
			      <BadOpt,_cor19> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-unsplit/2-fun-0-'}}] )
		  in  let <_cor12> =
			  %% Line 340
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 340
			      call 'erlang':'list_to_binary'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 342
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 341
				  call 'wxe_util':'call'
				      (3460, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'unsplit',2}}] )
	    -| ['compiler_generated'] )
	end
'updateSize'/1 =
    %% Line 347
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 348
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 350
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 349
		      call 'wxe_util':'cast'
			  (3461, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'updateSize',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 354
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 355
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxSplitterWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxSplitterWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 356
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 357
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'warpPointer'/3 =
    %% Line 360
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 362
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 364
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 366
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 368
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 370
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 372
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 374
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'show'/2 =
    %% Line 376
    fun (_cor1,_cor0) ->
	call 'wxWindow':'show'
	    (_cor1, _cor0)
'show'/1 =
    %% Line 378
    fun (_cor0) ->
	call 'wxWindow':'show'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 380
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 382
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyleFlag'/2 =
    %% Line 384
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyleFlag'
	    (_cor1, _cor0)
'setWindowStyle'/2 =
    %% Line 386
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyle'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 388
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 390
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 394
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 396
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 402
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 404
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 406
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 410
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 412
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 414
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 416
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 418
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 420
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 422
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 426
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 428
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 430
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 432
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 434
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setLabel'/2 =
    %% Line 436
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setLabel'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 438
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 440
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 442
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 444
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 446
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 448
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 450
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 452
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 458
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 460
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 462
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 464
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 466
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 468
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 470
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setBackgroundColour'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundColour'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 478
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 480
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 482
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 484
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 486
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 488
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 490
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 492
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 496
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 498
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 500
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 502
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 504
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 506
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 508
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 510
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 512
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 514
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 518
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 520
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 522
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 524
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 526
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 528
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 530
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 532
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 534
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 536
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 538
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 540
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 542
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 544
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 546
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 548
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 550
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 552
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 554
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 556
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 558
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 560
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 562
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 564
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'initDialog'/1 =
    %% Line 566
    fun (_cor0) ->
	call 'wxWindow':'initDialog'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 568
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 570
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 572
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 574
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 576
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 578
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 580
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 582
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 584
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 586
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 588
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 590
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 592
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 594
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 596
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 598
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 600
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 602
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 604
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 606
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 608
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 610
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 612
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 614
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 616
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getLabel'/1 =
    %% Line 618
    fun (_cor0) ->
	call 'wxWindow':'getLabel'
	    (_cor0)
'getId'/1 =
    %% Line 620
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 622
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 624
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 626
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 628
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 630
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 632
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 634
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 636
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 638
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 640
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 642
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 644
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 646
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 648
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 650
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 652
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 654
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 656
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 658
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 660
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 662
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'fit'/1 =
    %% Line 664
    fun (_cor0) ->
	call 'wxWindow':'fit'
	    (_cor0)
'findWindow'/2 =
    %% Line 666
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'enable'/2 =
    %% Line 668
    fun (_cor1,_cor0) ->
	call 'wxWindow':'enable'
	    (_cor1, _cor0)
'enable'/1 =
    %% Line 670
    fun (_cor0) ->
	call 'wxWindow':'enable'
	    (_cor0)
'disable'/1 =
    %% Line 672
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 674
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 676
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 678
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 680
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 682
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 684
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 686
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 688
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 690
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 692
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 694
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 696
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 698
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 700
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 702
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 704
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 706
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 708
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 711
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 713
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 715
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 717
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 719
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxSplitterWindow')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxSplitterWindow', _cor0)
end