module 'wxDC' ['blit'/5,
	       'blit'/6,
	       'calcBoundingBox'/3,
	       'clear'/1,
	       'computeScaleAndOrigin'/1,
	       'crossHair'/2,
	       'destroyClippingRegion'/1,
	       'deviceToLogicalX'/2,
	       'deviceToLogicalXRel'/2,
	       'deviceToLogicalY'/2,
	       'deviceToLogicalYRel'/2,
	       'drawArc'/4,
	       'drawBitmap'/3,
	       'drawBitmap'/4,
	       'drawCheckMark'/2,
	       'drawCircle'/3,
	       'drawEllipse'/2,
	       'drawEllipse'/3,
	       'drawEllipticArc'/5,
	       'drawIcon'/3,
	       'drawLabel'/3,
	       'drawLabel'/4,
	       'drawLine'/3,
	       'drawLines'/2,
	       'drawLines'/3,
	       'drawPoint'/2,
	       'drawPolygon'/2,
	       'drawPolygon'/3,
	       'drawRectangle'/2,
	       'drawRectangle'/3,
	       'drawRotatedText'/4,
	       'drawRoundedRectangle'/3,
	       'drawRoundedRectangle'/4,
	       'drawText'/3,
	       'endDoc'/1,
	       'endPage'/1,
	       'floodFill'/3,
	       'floodFill'/4,
	       'getBackground'/1,
	       'getBackgroundMode'/1,
	       'getBrush'/1,
	       'getCharHeight'/1,
	       'getCharWidth'/1,
	       'getClippingBox'/1,
	       'getFont'/1,
	       'getLayoutDirection'/1,
	       'getLogicalFunction'/1,
	       'getMapMode'/1,
	       'getMultiLineTextExtent'/2,
	       'getMultiLineTextExtent'/3,
	       'getPPI'/1,
	       'getPartialTextExtents'/2,
	       'getPen'/1,
	       'getPixel'/2,
	       'getSize'/1,
	       'getSizeMM'/1,
	       'getTextBackground'/1,
	       'getTextExtent'/2,
	       'getTextExtent'/3,
	       'getTextForeground'/1,
	       'getUserScale'/1,
	       'gradientFillConcentric'/4,
	       'gradientFillConcentric'/5,
	       'gradientFillLinear'/4,
	       'gradientFillLinear'/5,
	       'isOk'/1,
	       'logicalToDeviceX'/2,
	       'logicalToDeviceXRel'/2,
	       'logicalToDeviceY'/2,
	       'logicalToDeviceYRel'/2,
	       'maxX'/1,
	       'maxY'/1,
	       'minX'/1,
	       'minY'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'parent_class'/1,
	       'resetBoundingBox'/1,
	       'setAxisOrientation'/3,
	       'setBackground'/2,
	       'setBackgroundMode'/2,
	       'setBrush'/2,
	       'setClippingRegion'/2,
	       'setClippingRegion'/3,
	       'setDeviceOrigin'/3,
	       'setFont'/2,
	       'setLayoutDirection'/2,
	       'setLogicalFunction'/2,
	       'setMapMode'/2,
	       'setPalette'/2,
	       'setPen'/2,
	       'setTextBackground'/2,
	       'setTextForeground'/2,
	       'setUserScale'/3,
	       'startDoc'/2,
	       'startPage'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 52
		'export_type' =
		    %% Line 52
		    [{'wxDC',0}],
		%% Line 53
		'deprecated' =
		    %% Line 53
		    [{'computeScaleAndOrigin',1}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxDC',{'remote_type',58,[{'atom',58,'wx'}|[{'atom',58,'wx_object'}|[[]]]]},[]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'blit',5},[{'type',60,'bounded_fun',[{'type',60,'fun',[{'type',60,'product',[{'var',60,'This'}|[{'var',60,'DestPt'}|[{'var',60,'Sz'}|[{'var',60,'Source'}|[{'var',60,'SrcPt'}]]]]]}|[{'type',60,'boolean',[]}]]}|[[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'This'}|[{'type',61,'wxDC',[]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'DestPt'}|[{'type',61,'tuple',[{'ann_type',61,[{'var',61,'X'}|[{'type',61,'integer',[]}]]}|[{'ann_type',61,[{'var',61,'Y'}|[{'type',61,'integer',[]}]]}]]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Sz'}|[{'type',61,'tuple',[{'ann_type',61,[{'var',61,'W'}|[{'type',61,'integer',[]}]]}|[{'ann_type',61,[{'var',61,'H'}|[{'type',61,'integer',[]}]]}]]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Source'}|[{'type',61,'wxDC',[]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'SrcPt'}|[{'type',61,'tuple',[{'ann_type',61,[{'var',61,'X'}|[{'type',61,'integer',[]}]]}|[{'ann_type',61,[{'var',61,'Y'}|[{'type',61,'integer',[]}]]}]]}]]]]}]]]]]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'blit',6},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[{'var',69,'This'}|[{'var',69,'DestPt'}|[{'var',69,'Sz'}|[{'var',69,'Source'}|[{'var',69,'SrcPt'}|[{'type',69,'list',[{'var',69,'Option'}]}]]]]]]}|[{'type',69,'boolean',[]}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'This'}|[{'type',70,'wxDC',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'DestPt'}|[{'type',70,'tuple',[{'ann_type',70,[{'var',70,'X'}|[{'type',70,'integer',[]}]]}|[{'ann_type',70,[{'var',70,'Y'}|[{'type',70,'integer',[]}]]}]]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Sz'}|[{'type',70,'tuple',[{'ann_type',70,[{'var',70,'W'}|[{'type',70,'integer',[]}]]}|[{'ann_type',70,[{'var',70,'H'}|[{'type',70,'integer',[]}]]}]]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Source'}|[{'type',70,'wxDC',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'SrcPt'}|[{'type',70,'tuple',[{'ann_type',70,[{'var',70,'X'}|[{'type',70,'integer',[]}]]}|[{'ann_type',70,[{'var',70,'Y'}|[{'type',70,'integer',[]}]]}]]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Option'}|[{'type',71,'union',[{'type',71,'tuple',[{'atom',71,'rop'}|[{'remote_type',71,[{'atom',71,'wx'}|[{'atom',71,'wx_enum'}|[[]]]]}]]}|[{'type',72,'tuple',[{'atom',72,'useMask'}|[{'type',72,'boolean',[]}]]}|[{'type',73,'tuple',[{'atom',73,'srcPtMask'}|[{'type',73,'tuple',[{'ann_type',73,[{'var',73,'X'}|[{'type',73,'integer',[]}]]}|[{'ann_type',73,[{'var',73,'Y'}|[{'type',73,'integer',[]}]]}]]}]]}]]]}]]]]}]]]]]]]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'calcBoundingBox',3},[{'type',87,'bounded_fun',[{'type',87,'fun',[{'type',87,'product',[{'var',87,'This'}|[{'var',87,'X'}|[{'var',87,'Y'}]]]}|[{'atom',87,'ok'}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'This'}|[{'type',88,'wxDC',[]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'X'}|[{'type',88,'integer',[]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Y'}|[{'type',88,'integer',[]}]]]]}]]]]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'clear',1},[{'type',96,'bounded_fun',[{'type',96,'fun',[{'type',96,'product',[{'var',96,'This'}]}|[{'atom',96,'ok'}]]}|[[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'This'}|[{'type',97,'wxDC',[]}]]]]}]]]}]}],
		%% Line 104
		'spec' =
		    %% Line 104
		    [{{'computeScaleAndOrigin',1},[{'type',104,'bounded_fun',[{'type',104,'fun',[{'type',104,'product',[{'var',104,'This'}]}|[{'atom',104,'ok'}]]}|[[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'This'}|[{'type',105,'wxDC',[]}]]]]}]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'crossHair',2},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'This'}|[{'var',112,'Pt'}]]}|[{'atom',112,'ok'}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'This'}|[{'type',113,'wxDC',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Pt'}|[{'type',113,'tuple',[{'ann_type',113,[{'var',113,'X'}|[{'type',113,'integer',[]}]]}|[{'ann_type',113,[{'var',113,'Y'}|[{'type',113,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'destroyClippingRegion',1},[{'type',121,'bounded_fun',[{'type',121,'fun',[{'type',121,'product',[{'var',121,'This'}]}|[{'atom',121,'ok'}]]}|[[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'This'}|[{'type',122,'wxDC',[]}]]]]}]]]}]}],
		%% Line 129
		'spec' =
		    %% Line 129
		    [{{'deviceToLogicalX',2},[{'type',129,'bounded_fun',[{'type',129,'fun',[{'type',129,'product',[{'var',129,'This'}|[{'var',129,'X'}]]}|[{'type',129,'integer',[]}]]}|[[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'This'}|[{'type',130,'wxDC',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'X'}|[{'type',130,'integer',[]}]]]]}]]]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'deviceToLogicalXRel',2},[{'type',138,'bounded_fun',[{'type',138,'fun',[{'type',138,'product',[{'var',138,'This'}|[{'var',138,'X'}]]}|[{'type',138,'integer',[]}]]}|[[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'This'}|[{'type',139,'wxDC',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'X'}|[{'type',139,'integer',[]}]]]]}]]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'deviceToLogicalY',2},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'This'}|[{'var',147,'Y'}]]}|[{'type',147,'integer',[]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'This'}|[{'type',148,'wxDC',[]}]]]]}|[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Y'}|[{'type',148,'integer',[]}]]]]}]]]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'deviceToLogicalYRel',2},[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'This'}|[{'var',156,'Y'}]]}|[{'type',156,'integer',[]}]]}|[[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'This'}|[{'type',157,'wxDC',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Y'}|[{'type',157,'integer',[]}]]]]}]]]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'drawArc',4},[{'type',165,'bounded_fun',[{'type',165,'fun',[{'type',165,'product',[{'var',165,'This'}|[{'var',165,'Pt1'}|[{'var',165,'Pt2'}|[{'var',165,'Centre'}]]]]}|[{'atom',165,'ok'}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'This'}|[{'type',166,'wxDC',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Pt1'}|[{'type',166,'tuple',[{'ann_type',166,[{'var',166,'X'}|[{'type',166,'integer',[]}]]}|[{'ann_type',166,[{'var',166,'Y'}|[{'type',166,'integer',[]}]]}]]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Pt2'}|[{'type',166,'tuple',[{'ann_type',166,[{'var',166,'X'}|[{'type',166,'integer',[]}]]}|[{'ann_type',166,[{'var',166,'Y'}|[{'type',166,'integer',[]}]]}]]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Centre'}|[{'type',166,'tuple',[{'ann_type',166,[{'var',166,'X'}|[{'type',166,'integer',[]}]]}|[{'ann_type',166,[{'var',166,'Y'}|[{'type',166,'integer',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'drawBitmap',3},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'This'}|[{'var',174,'Bmp'}|[{'var',174,'Pt'}]]]}|[{'atom',174,'ok'}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'This'}|[{'type',175,'wxDC',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Bmp'}|[{'remote_type',175,[{'atom',175,'wxBitmap'}|[{'atom',175,'wxBitmap'}|[[]]]]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Pt'}|[{'type',175,'tuple',[{'ann_type',175,[{'var',175,'X'}|[{'type',175,'integer',[]}]]}|[{'ann_type',175,[{'var',175,'Y'}|[{'type',175,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'drawBitmap',4},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'This'}|[{'var',182,'Bmp'}|[{'var',182,'Pt'}|[{'type',182,'list',[{'var',182,'Option'}]}]]]]}|[{'atom',182,'ok'}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'This'}|[{'type',183,'wxDC',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Bmp'}|[{'remote_type',183,[{'atom',183,'wxBitmap'}|[{'atom',183,'wxBitmap'}|[[]]]]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Pt'}|[{'type',183,'tuple',[{'ann_type',183,[{'var',183,'X'}|[{'type',183,'integer',[]}]]}|[{'ann_type',183,[{'var',183,'Y'}|[{'type',183,'integer',[]}]]}]]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Option'}|[{'type',184,'tuple',[{'atom',184,'useMask'}|[{'type',184,'boolean',[]}]]}]]]]}]]]]]]}]}],
		%% Line 196
		'spec' =
		    %% Line 196
		    [{{'drawCheckMark',2},[{'type',196,'bounded_fun',[{'type',196,'fun',[{'type',196,'product',[{'var',196,'This'}|[{'var',196,'Rect'}]]}|[{'atom',196,'ok'}]]}|[[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'This'}|[{'type',197,'wxDC',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Rect'}|[{'type',197,'tuple',[{'ann_type',197,[{'var',197,'X'}|[{'type',197,'integer',[]}]]}|[{'ann_type',197,[{'var',197,'Y'}|[{'type',197,'integer',[]}]]}|[{'ann_type',197,[{'var',197,'W'}|[{'type',197,'integer',[]}]]}|[{'ann_type',197,[{'var',197,'H'}|[{'type',197,'integer',[]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 205
		'spec' =
		    %% Line 205
		    [{{'drawCircle',3},[{'type',205,'bounded_fun',[{'type',205,'fun',[{'type',205,'product',[{'var',205,'This'}|[{'var',205,'Pt'}|[{'var',205,'Radius'}]]]}|[{'atom',205,'ok'}]]}|[[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'This'}|[{'type',206,'wxDC',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Pt'}|[{'type',206,'tuple',[{'ann_type',206,[{'var',206,'X'}|[{'type',206,'integer',[]}]]}|[{'ann_type',206,[{'var',206,'Y'}|[{'type',206,'integer',[]}]]}]]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Radius'}|[{'type',206,'integer',[]}]]]]}]]]]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'drawEllipse',2},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'This'}|[{'var',214,'Rect'}]]}|[{'atom',214,'ok'}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'This'}|[{'type',215,'wxDC',[]}]]]]}|[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Rect'}|[{'type',215,'tuple',[{'ann_type',215,[{'var',215,'X'}|[{'type',215,'integer',[]}]]}|[{'ann_type',215,[{'var',215,'Y'}|[{'type',215,'integer',[]}]]}|[{'ann_type',215,[{'var',215,'W'}|[{'type',215,'integer',[]}]]}|[{'ann_type',215,[{'var',215,'H'}|[{'type',215,'integer',[]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'drawEllipse',3},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'This'}|[{'var',223,'Pt'}|[{'var',223,'Sz'}]]]}|[{'atom',223,'ok'}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'This'}|[{'type',224,'wxDC',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Pt'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}]]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Sz'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 232
		'spec' =
		    %% Line 232
		    [{{'drawEllipticArc',5},[{'type',232,'bounded_fun',[{'type',232,'fun',[{'type',232,'product',[{'var',232,'This'}|[{'var',232,'Pt'}|[{'var',232,'Sz'}|[{'var',232,'Sa'}|[{'var',232,'Ea'}]]]]]}|[{'atom',232,'ok'}]]}|[[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'This'}|[{'type',233,'wxDC',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Pt'}|[{'type',233,'tuple',[{'ann_type',233,[{'var',233,'X'}|[{'type',233,'integer',[]}]]}|[{'ann_type',233,[{'var',233,'Y'}|[{'type',233,'integer',[]}]]}]]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Sz'}|[{'type',233,'tuple',[{'ann_type',233,[{'var',233,'W'}|[{'type',233,'integer',[]}]]}|[{'ann_type',233,[{'var',233,'H'}|[{'type',233,'integer',[]}]]}]]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Sa'}|[{'type',233,'number',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Ea'}|[{'type',233,'number',[]}]]]]}]]]]]]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'drawIcon',3},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'This'}|[{'var',241,'Icon'}|[{'var',241,'Pt'}]]]}|[{'atom',241,'ok'}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'This'}|[{'type',242,'wxDC',[]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Icon'}|[{'remote_type',242,[{'atom',242,'wxIcon'}|[{'atom',242,'wxIcon'}|[[]]]]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Pt'}|[{'type',242,'tuple',[{'ann_type',242,[{'var',242,'X'}|[{'type',242,'integer',[]}]]}|[{'ann_type',242,[{'var',242,'Y'}|[{'type',242,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 251
		'spec' =
		    %% Line 251
		    [{{'drawLabel',3},[{'type',251,'bounded_fun',[{'type',251,'fun',[{'type',251,'product',[{'var',251,'This'}|[{'var',251,'Text'}|[{'var',251,'Rect'}]]]}|[{'atom',251,'ok'}]]}|[[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'This'}|[{'type',252,'wxDC',[]}]]]]}|[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Text'}|[{'remote_type',252,[{'atom',252,'unicode'}|[{'atom',252,'chardata'}|[[]]]]}]]]]}|[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Rect'}|[{'type',252,'tuple',[{'ann_type',252,[{'var',252,'X'}|[{'type',252,'integer',[]}]]}|[{'ann_type',252,[{'var',252,'Y'}|[{'type',252,'integer',[]}]]}|[{'ann_type',252,[{'var',252,'W'}|[{'type',252,'integer',[]}]]}|[{'ann_type',252,[{'var',252,'H'}|[{'type',252,'integer',[]}]]}]]]]}]]]]}]]]]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'drawLabel',4},[{'type',259,'bounded_fun',[{'type',259,'fun',[{'type',259,'product',[{'var',259,'This'}|[{'var',259,'Text'}|[{'var',259,'Rect'}|[{'type',259,'list',[{'var',259,'Option'}]}]]]]}|[{'atom',259,'ok'}]]}|[[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'This'}|[{'type',260,'wxDC',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Text'}|[{'remote_type',260,[{'atom',260,'unicode'}|[{'atom',260,'chardata'}|[[]]]]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Rect'}|[{'type',260,'tuple',[{'ann_type',260,[{'var',260,'X'}|[{'type',260,'integer',[]}]]}|[{'ann_type',260,[{'var',260,'Y'}|[{'type',260,'integer',[]}]]}|[{'ann_type',260,[{'var',260,'W'}|[{'type',260,'integer',[]}]]}|[{'ann_type',260,[{'var',260,'H'}|[{'type',260,'integer',[]}]]}]]]]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'Option'}|[{'type',261,'union',[{'type',261,'tuple',[{'atom',261,'alignment'}|[{'type',261,'integer',[]}]]}|[{'type',262,'tuple',[{'atom',262,'indexAccel'}|[{'type',262,'integer',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 275
		'spec' =
		    %% Line 275
		    [{{'drawLine',3},[{'type',275,'bounded_fun',[{'type',275,'fun',[{'type',275,'product',[{'var',275,'This'}|[{'var',275,'Pt1'}|[{'var',275,'Pt2'}]]]}|[{'atom',275,'ok'}]]}|[[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'This'}|[{'type',276,'wxDC',[]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Pt1'}|[{'type',276,'tuple',[{'ann_type',276,[{'var',276,'X'}|[{'type',276,'integer',[]}]]}|[{'ann_type',276,[{'var',276,'Y'}|[{'type',276,'integer',[]}]]}]]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Pt2'}|[{'type',276,'tuple',[{'ann_type',276,[{'var',276,'X'}|[{'type',276,'integer',[]}]]}|[{'ann_type',276,[{'var',276,'Y'}|[{'type',276,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 284
		'spec' =
		    %% Line 284
		    [{{'drawLines',2},[{'type',284,'bounded_fun',[{'type',284,'fun',[{'type',284,'product',[{'var',284,'This'}|[{'var',284,'Points'}]]}|[{'atom',284,'ok'}]]}|[[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'This'}|[{'type',285,'wxDC',[]}]]]]}|[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'Points'}|[{'type',285,'list',[{'type',285,'tuple',[{'ann_type',285,[{'var',285,'X'}|[{'type',285,'integer',[]}]]}|[{'ann_type',285,[{'var',285,'Y'}|[{'type',285,'integer',[]}]]}]]}]}]]]]}]]]]}]}],
		%% Line 292
		'spec' =
		    %% Line 292
		    [{{'drawLines',3},[{'type',292,'bounded_fun',[{'type',292,'fun',[{'type',292,'product',[{'var',292,'This'}|[{'var',292,'Points'}|[{'type',292,'list',[{'var',292,'Option'}]}]]]}|[{'atom',292,'ok'}]]}|[[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'This'}|[{'type',293,'wxDC',[]}]]]]}|[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'Points'}|[{'type',293,'list',[{'type',293,'tuple',[{'ann_type',293,[{'var',293,'X'}|[{'type',293,'integer',[]}]]}|[{'ann_type',293,[{'var',293,'Y'}|[{'type',293,'integer',[]}]]}]]}]}]]]]}|[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'Option'}|[{'type',294,'union',[{'type',294,'tuple',[{'atom',294,'xoffset'}|[{'type',294,'integer',[]}]]}|[{'type',295,'tuple',[{'atom',295,'yoffset'}|[{'type',295,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 308
		'spec' =
		    %% Line 308
		    [{{'drawPolygon',2},[{'type',308,'bounded_fun',[{'type',308,'fun',[{'type',308,'product',[{'var',308,'This'}|[{'var',308,'Points'}]]}|[{'atom',308,'ok'}]]}|[[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'This'}|[{'type',309,'wxDC',[]}]]]]}|[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'Points'}|[{'type',309,'list',[{'type',309,'tuple',[{'ann_type',309,[{'var',309,'X'}|[{'type',309,'integer',[]}]]}|[{'ann_type',309,[{'var',309,'Y'}|[{'type',309,'integer',[]}]]}]]}]}]]]]}]]]]}]}],
		%% Line 317
		'spec' =
		    %% Line 317
		    [{{'drawPolygon',3},[{'type',317,'bounded_fun',[{'type',317,'fun',[{'type',317,'product',[{'var',317,'This'}|[{'var',317,'Points'}|[{'type',317,'list',[{'var',317,'Option'}]}]]]}|[{'atom',317,'ok'}]]}|[[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'This'}|[{'type',318,'wxDC',[]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'Points'}|[{'type',318,'list',[{'type',318,'tuple',[{'ann_type',318,[{'var',318,'X'}|[{'type',318,'integer',[]}]]}|[{'ann_type',318,[{'var',318,'Y'}|[{'type',318,'integer',[]}]]}]]}]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Option'}|[{'type',319,'union',[{'type',319,'tuple',[{'atom',319,'xoffset'}|[{'type',319,'integer',[]}]]}|[{'type',320,'tuple',[{'atom',320,'yoffset'}|[{'type',320,'integer',[]}]]}|[{'type',321,'tuple',[{'atom',321,'fillStyle'}|[{'remote_type',321,[{'atom',321,'wx'}|[{'atom',321,'wx_enum'}|[[]]]]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 335
		'spec' =
		    %% Line 335
		    [{{'drawPoint',2},[{'type',335,'bounded_fun',[{'type',335,'fun',[{'type',335,'product',[{'var',335,'This'}|[{'var',335,'Pt'}]]}|[{'atom',335,'ok'}]]}|[[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'This'}|[{'type',336,'wxDC',[]}]]]]}|[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Pt'}|[{'type',336,'tuple',[{'ann_type',336,[{'var',336,'X'}|[{'type',336,'integer',[]}]]}|[{'ann_type',336,[{'var',336,'Y'}|[{'type',336,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 344
		'spec' =
		    %% Line 344
		    [{{'drawRectangle',2},[{'type',344,'bounded_fun',[{'type',344,'fun',[{'type',344,'product',[{'var',344,'This'}|[{'var',344,'Rect'}]]}|[{'atom',344,'ok'}]]}|[[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'This'}|[{'type',345,'wxDC',[]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'Rect'}|[{'type',345,'tuple',[{'ann_type',345,[{'var',345,'X'}|[{'type',345,'integer',[]}]]}|[{'ann_type',345,[{'var',345,'Y'}|[{'type',345,'integer',[]}]]}|[{'ann_type',345,[{'var',345,'W'}|[{'type',345,'integer',[]}]]}|[{'ann_type',345,[{'var',345,'H'}|[{'type',345,'integer',[]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 353
		'spec' =
		    %% Line 353
		    [{{'drawRectangle',3},[{'type',353,'bounded_fun',[{'type',353,'fun',[{'type',353,'product',[{'var',353,'This'}|[{'var',353,'Pt'}|[{'var',353,'Sz'}]]]}|[{'atom',353,'ok'}]]}|[[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'This'}|[{'type',354,'wxDC',[]}]]]]}|[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'Pt'}|[{'type',354,'tuple',[{'ann_type',354,[{'var',354,'X'}|[{'type',354,'integer',[]}]]}|[{'ann_type',354,[{'var',354,'Y'}|[{'type',354,'integer',[]}]]}]]}]]]]}|[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'Sz'}|[{'type',354,'tuple',[{'ann_type',354,[{'var',354,'W'}|[{'type',354,'integer',[]}]]}|[{'ann_type',354,[{'var',354,'H'}|[{'type',354,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'drawRotatedText',4},[{'type',362,'bounded_fun',[{'type',362,'fun',[{'type',362,'product',[{'var',362,'This'}|[{'var',362,'Text'}|[{'var',362,'Pt'}|[{'var',362,'Angle'}]]]]}|[{'atom',362,'ok'}]]}|[[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'This'}|[{'type',363,'wxDC',[]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'Text'}|[{'remote_type',363,[{'atom',363,'unicode'}|[{'atom',363,'chardata'}|[[]]]]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'Pt'}|[{'type',363,'tuple',[{'ann_type',363,[{'var',363,'X'}|[{'type',363,'integer',[]}]]}|[{'ann_type',363,[{'var',363,'Y'}|[{'type',363,'integer',[]}]]}]]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'Angle'}|[{'type',363,'number',[]}]]]]}]]]]]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'drawRoundedRectangle',3},[{'type',372,'bounded_fun',[{'type',372,'fun',[{'type',372,'product',[{'var',372,'This'}|[{'var',372,'R'}|[{'var',372,'Radius'}]]]}|[{'atom',372,'ok'}]]}|[[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'This'}|[{'type',373,'wxDC',[]}]]]]}|[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'R'}|[{'type',373,'tuple',[{'ann_type',373,[{'var',373,'X'}|[{'type',373,'integer',[]}]]}|[{'ann_type',373,[{'var',373,'Y'}|[{'type',373,'integer',[]}]]}|[{'ann_type',373,[{'var',373,'W'}|[{'type',373,'integer',[]}]]}|[{'ann_type',373,[{'var',373,'H'}|[{'type',373,'integer',[]}]]}]]]]}]]]]}|[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'Radius'}|[{'type',373,'number',[]}]]]]}]]]]]}]}],
		%% Line 381
		'spec' =
		    %% Line 381
		    [{{'drawRoundedRectangle',4},[{'type',381,'bounded_fun',[{'type',381,'fun',[{'type',381,'product',[{'var',381,'This'}|[{'var',381,'Pt'}|[{'var',381,'Sz'}|[{'var',381,'Radius'}]]]]}|[{'atom',381,'ok'}]]}|[[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'This'}|[{'type',382,'wxDC',[]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'Pt'}|[{'type',382,'tuple',[{'ann_type',382,[{'var',382,'X'}|[{'type',382,'integer',[]}]]}|[{'ann_type',382,[{'var',382,'Y'}|[{'type',382,'integer',[]}]]}]]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'Sz'}|[{'type',382,'tuple',[{'ann_type',382,[{'var',382,'W'}|[{'type',382,'integer',[]}]]}|[{'ann_type',382,[{'var',382,'H'}|[{'type',382,'integer',[]}]]}]]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'Radius'}|[{'type',382,'number',[]}]]]]}]]]]]]}]}],
		%% Line 390
		'spec' =
		    %% Line 390
		    [{{'drawText',3},[{'type',390,'bounded_fun',[{'type',390,'fun',[{'type',390,'product',[{'var',390,'This'}|[{'var',390,'Text'}|[{'var',390,'Pt'}]]]}|[{'atom',390,'ok'}]]}|[[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'This'}|[{'type',391,'wxDC',[]}]]]]}|[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Text'}|[{'remote_type',391,[{'atom',391,'unicode'}|[{'atom',391,'chardata'}|[[]]]]}]]]]}|[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Pt'}|[{'type',391,'tuple',[{'ann_type',391,[{'var',391,'X'}|[{'type',391,'integer',[]}]]}|[{'ann_type',391,[{'var',391,'Y'}|[{'type',391,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 400
		'spec' =
		    %% Line 400
		    [{{'endDoc',1},[{'type',400,'bounded_fun',[{'type',400,'fun',[{'type',400,'product',[{'var',400,'This'}]}|[{'atom',400,'ok'}]]}|[[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'This'}|[{'type',401,'wxDC',[]}]]]]}]]]}]}],
		%% Line 408
		'spec' =
		    %% Line 408
		    [{{'endPage',1},[{'type',408,'bounded_fun',[{'type',408,'fun',[{'type',408,'product',[{'var',408,'This'}]}|[{'atom',408,'ok'}]]}|[[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'This'}|[{'type',409,'wxDC',[]}]]]]}]]]}]}],
		%% Line 416
		'spec' =
		    %% Line 416
		    [{{'floodFill',3},[{'type',416,'bounded_fun',[{'type',416,'fun',[{'type',416,'product',[{'var',416,'This'}|[{'var',416,'Pt'}|[{'var',416,'Col'}]]]}|[{'type',416,'boolean',[]}]]}|[[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'This'}|[{'type',417,'wxDC',[]}]]]]}|[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Pt'}|[{'type',417,'tuple',[{'ann_type',417,[{'var',417,'X'}|[{'type',417,'integer',[]}]]}|[{'ann_type',417,[{'var',417,'Y'}|[{'type',417,'integer',[]}]]}]]}]]]]}|[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Col'}|[{'remote_type',417,[{'atom',417,'wx'}|[{'atom',417,'wx_colour'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 425
		'spec' =
		    %% Line 425
		    [{{'floodFill',4},[{'type',425,'bounded_fun',[{'type',425,'fun',[{'type',425,'product',[{'var',425,'This'}|[{'var',425,'Pt'}|[{'var',425,'Col'}|[{'type',425,'list',[{'var',425,'Option'}]}]]]]}|[{'type',425,'boolean',[]}]]}|[[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'This'}|[{'type',426,'wxDC',[]}]]]]}|[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'Pt'}|[{'type',426,'tuple',[{'ann_type',426,[{'var',426,'X'}|[{'type',426,'integer',[]}]]}|[{'ann_type',426,[{'var',426,'Y'}|[{'type',426,'integer',[]}]]}]]}]]]]}|[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'Col'}|[{'remote_type',426,[{'atom',426,'wx'}|[{'atom',426,'wx_colour'}|[[]]]]}]]]]}|[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'Option'}|[{'type',427,'tuple',[{'atom',427,'style'}|[{'remote_type',427,[{'atom',427,'wx'}|[{'atom',427,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 438
		'spec' =
		    %% Line 438
		    [{{'getBackground',1},[{'type',438,'bounded_fun',[{'type',438,'fun',[{'type',438,'product',[{'var',438,'This'}]}|[{'remote_type',438,[{'atom',438,'wxBrush'}|[{'atom',438,'wxBrush'}|[[]]]]}]]}|[[{'type',439,'constraint',[{'atom',439,'is_subtype'}|[[{'var',439,'This'}|[{'type',439,'wxDC',[]}]]]]}]]]}]}],
		%% Line 446
		'spec' =
		    %% Line 446
		    [{{'getBackgroundMode',1},[{'type',446,'bounded_fun',[{'type',446,'fun',[{'type',446,'product',[{'var',446,'This'}]}|[{'type',446,'integer',[]}]]}|[[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'This'}|[{'type',447,'wxDC',[]}]]]]}]]]}]}],
		%% Line 454
		'spec' =
		    %% Line 454
		    [{{'getBrush',1},[{'type',454,'bounded_fun',[{'type',454,'fun',[{'type',454,'product',[{'var',454,'This'}]}|[{'remote_type',454,[{'atom',454,'wxBrush'}|[{'atom',454,'wxBrush'}|[[]]]]}]]}|[[{'type',455,'constraint',[{'atom',455,'is_subtype'}|[[{'var',455,'This'}|[{'type',455,'wxDC',[]}]]]]}]]]}]}],
		%% Line 462
		'spec' =
		    %% Line 462
		    [{{'getCharHeight',1},[{'type',462,'bounded_fun',[{'type',462,'fun',[{'type',462,'product',[{'var',462,'This'}]}|[{'type',462,'integer',[]}]]}|[[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'This'}|[{'type',463,'wxDC',[]}]]]]}]]]}]}],
		%% Line 470
		'spec' =
		    %% Line 470
		    [{{'getCharWidth',1},[{'type',470,'bounded_fun',[{'type',470,'fun',[{'type',470,'product',[{'var',470,'This'}]}|[{'type',470,'integer',[]}]]}|[[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'This'}|[{'type',471,'wxDC',[]}]]]]}]]]}]}],
		%% Line 478
		'spec' =
		    %% Line 478
		    [{{'getClippingBox',1},[{'type',478,'bounded_fun',[{'type',478,'fun',[{'type',478,'product',[{'var',478,'This'}]}|[{'var',478,'Result'}]]}|[[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'Result'}|[{'type',479,'tuple',[{'ann_type',479,[{'var',479,'X'}|[{'type',479,'integer',[]}]]}|[{'ann_type',479,[{'var',479,'Y'}|[{'type',479,'integer',[]}]]}|[{'ann_type',479,[{'var',479,'W'}|[{'type',479,'integer',[]}]]}|[{'ann_type',479,[{'var',479,'H'}|[{'type',479,'integer',[]}]]}]]]]}]]]]}|[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'This'}|[{'type',480,'wxDC',[]}]]]]}]]]]}]}],
		%% Line 487
		'spec' =
		    %% Line 487
		    [{{'getFont',1},[{'type',487,'bounded_fun',[{'type',487,'fun',[{'type',487,'product',[{'var',487,'This'}]}|[{'remote_type',487,[{'atom',487,'wxFont'}|[{'atom',487,'wxFont'}|[[]]]]}]]}|[[{'type',488,'constraint',[{'atom',488,'is_subtype'}|[[{'var',488,'This'}|[{'type',488,'wxDC',[]}]]]]}]]]}]}],
		%% Line 496
		'spec' =
		    %% Line 496
		    [{{'getLayoutDirection',1},[{'type',496,'bounded_fun',[{'type',496,'fun',[{'type',496,'product',[{'var',496,'This'}]}|[{'remote_type',496,[{'atom',496,'wx'}|[{'atom',496,'wx_enum'}|[[]]]]}]]}|[[{'type',497,'constraint',[{'atom',497,'is_subtype'}|[[{'var',497,'This'}|[{'type',497,'wxDC',[]}]]]]}]]]}]}],
		%% Line 504
		'spec' =
		    %% Line 504
		    [{{'getLogicalFunction',1},[{'type',504,'bounded_fun',[{'type',504,'fun',[{'type',504,'product',[{'var',504,'This'}]}|[{'type',504,'integer',[]}]]}|[[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'This'}|[{'type',505,'wxDC',[]}]]]]}]]]}]}],
		%% Line 512
		'spec' =
		    %% Line 512
		    [{{'getMapMode',1},[{'type',512,'bounded_fun',[{'type',512,'fun',[{'type',512,'product',[{'var',512,'This'}]}|[{'type',512,'integer',[]}]]}|[[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'This'}|[{'type',513,'wxDC',[]}]]]]}]]]}]}],
		%% Line 520
		'spec' =
		    %% Line 520
		    [{{'getMultiLineTextExtent',2},[{'type',520,'bounded_fun',[{'type',520,'fun',[{'type',520,'product',[{'var',520,'This'}|[{'var',520,'String'}]]}|[{'type',520,'tuple',[{'ann_type',520,[{'var',520,'W'}|[{'type',520,'integer',[]}]]}|[{'ann_type',520,[{'var',520,'H'}|[{'type',520,'integer',[]}]]}]]}]]}|[[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'This'}|[{'type',521,'wxDC',[]}]]]]}|[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'String'}|[{'remote_type',521,[{'atom',521,'unicode'}|[{'atom',521,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 530
		'spec' =
		    %% Line 530
		    [{{'getMultiLineTextExtent',3},[{'type',530,'bounded_fun',[{'type',530,'fun',[{'type',530,'product',[{'var',530,'This'}|[{'var',530,'String'}|[{'type',530,'list',[{'var',530,'Option'}]}]]]}|[{'type',530,'tuple',[{'ann_type',530,[{'var',530,'Width'}|[{'type',530,'integer',[]}]]}|[{'ann_type',530,[{'var',530,'Height'}|[{'type',530,'integer',[]}]]}|[{'ann_type',530,[{'var',530,'HeightLine'}|[{'type',530,'integer',[]}]]}]]]}]]}|[[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'This'}|[{'type',531,'wxDC',[]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'String'}|[{'remote_type',531,[{'atom',531,'unicode'}|[{'atom',531,'chardata'}|[[]]]]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Option'}|[{'type',532,'tuple',[{'atom',532,'font'}|[{'remote_type',532,[{'atom',532,'wxFont'}|[{'atom',532,'wxFont'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 544
		'spec' =
		    %% Line 544
		    [{{'getPartialTextExtents',2},[{'type',544,'bounded_fun',[{'type',544,'fun',[{'type',544,'product',[{'var',544,'This'}|[{'var',544,'Text'}]]}|[{'var',544,'Result'}]]}|[[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'Result'}|[{'type',545,'tuple',[{'ann_type',545,[{'var',545,'Res'}|[{'type',545,'boolean',[]}]]}|[{'ann_type',545,[{'var',545,'Widths'}|[{'type',545,'list',[{'type',545,'integer',[]}]}]]}]]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'This'}|[{'type',546,'wxDC',[]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Text'}|[{'remote_type',546,[{'atom',546,'unicode'}|[{'atom',546,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 555
		'spec' =
		    %% Line 555
		    [{{'getPen',1},[{'type',555,'bounded_fun',[{'type',555,'fun',[{'type',555,'product',[{'var',555,'This'}]}|[{'remote_type',555,[{'atom',555,'wxPen'}|[{'atom',555,'wxPen'}|[[]]]]}]]}|[[{'type',556,'constraint',[{'atom',556,'is_subtype'}|[[{'var',556,'This'}|[{'type',556,'wxDC',[]}]]]]}]]]}]}],
		%% Line 563
		'spec' =
		    %% Line 563
		    [{{'getPixel',2},[{'type',563,'bounded_fun',[{'type',563,'fun',[{'type',563,'product',[{'var',563,'This'}|[{'var',563,'Pt'}]]}|[{'var',563,'Result'}]]}|[[{'type',564,'constraint',[{'atom',564,'is_subtype'}|[[{'var',564,'Result'}|[{'type',564,'tuple',[{'ann_type',564,[{'var',564,'Res'}|[{'type',564,'boolean',[]}]]}|[{'ann_type',564,[{'var',564,'Col'}|[{'remote_type',564,[{'atom',564,'wx'}|[{'atom',564,'wx_colour4'}|[[]]]]}]]}]]}]]]]}|[{'type',565,'constraint',[{'atom',565,'is_subtype'}|[[{'var',565,'This'}|[{'type',565,'wxDC',[]}]]]]}|[{'type',565,'constraint',[{'atom',565,'is_subtype'}|[[{'var',565,'Pt'}|[{'type',565,'tuple',[{'ann_type',565,[{'var',565,'X'}|[{'type',565,'integer',[]}]]}|[{'ann_type',565,[{'var',565,'Y'}|[{'type',565,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 573
		'spec' =
		    %% Line 573
		    [{{'getPPI',1},[{'type',573,'bounded_fun',[{'type',573,'fun',[{'type',573,'product',[{'var',573,'This'}]}|[{'type',573,'tuple',[{'ann_type',573,[{'var',573,'W'}|[{'type',573,'integer',[]}]]}|[{'ann_type',573,[{'var',573,'H'}|[{'type',573,'integer',[]}]]}]]}]]}|[[{'type',574,'constraint',[{'atom',574,'is_subtype'}|[[{'var',574,'This'}|[{'type',574,'wxDC',[]}]]]]}]]]}]}],
		%% Line 581
		'spec' =
		    %% Line 581
		    [{{'getSize',1},[{'type',581,'bounded_fun',[{'type',581,'fun',[{'type',581,'product',[{'var',581,'This'}]}|[{'type',581,'tuple',[{'ann_type',581,[{'var',581,'W'}|[{'type',581,'integer',[]}]]}|[{'ann_type',581,[{'var',581,'H'}|[{'type',581,'integer',[]}]]}]]}]]}|[[{'type',582,'constraint',[{'atom',582,'is_subtype'}|[[{'var',582,'This'}|[{'type',582,'wxDC',[]}]]]]}]]]}]}],
		%% Line 589
		'spec' =
		    %% Line 589
		    [{{'getSizeMM',1},[{'type',589,'bounded_fun',[{'type',589,'fun',[{'type',589,'product',[{'var',589,'This'}]}|[{'type',589,'tuple',[{'ann_type',589,[{'var',589,'W'}|[{'type',589,'integer',[]}]]}|[{'ann_type',589,[{'var',589,'H'}|[{'type',589,'integer',[]}]]}]]}]]}|[[{'type',590,'constraint',[{'atom',590,'is_subtype'}|[[{'var',590,'This'}|[{'type',590,'wxDC',[]}]]]]}]]]}]}],
		%% Line 597
		'spec' =
		    %% Line 597
		    [{{'getTextBackground',1},[{'type',597,'bounded_fun',[{'type',597,'fun',[{'type',597,'product',[{'var',597,'This'}]}|[{'remote_type',597,[{'atom',597,'wx'}|[{'atom',597,'wx_colour4'}|[[]]]]}]]}|[[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'This'}|[{'type',598,'wxDC',[]}]]]]}]]]}]}],
		%% Line 605
		'spec' =
		    %% Line 605
		    [{{'getTextExtent',2},[{'type',605,'bounded_fun',[{'type',605,'fun',[{'type',605,'product',[{'var',605,'This'}|[{'var',605,'String'}]]}|[{'type',605,'tuple',[{'ann_type',605,[{'var',605,'W'}|[{'type',605,'integer',[]}]]}|[{'ann_type',605,[{'var',605,'H'}|[{'type',605,'integer',[]}]]}]]}]]}|[[{'type',606,'constraint',[{'atom',606,'is_subtype'}|[[{'var',606,'This'}|[{'type',606,'wxDC',[]}]]]]}|[{'type',606,'constraint',[{'atom',606,'is_subtype'}|[[{'var',606,'String'}|[{'remote_type',606,[{'atom',606,'unicode'}|[{'atom',606,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 615
		'spec' =
		    %% Line 615
		    [{{'getTextExtent',3},[{'type',615,'bounded_fun',[{'type',615,'fun',[{'type',615,'product',[{'var',615,'This'}|[{'var',615,'String'}|[{'type',615,'list',[{'var',615,'Option'}]}]]]}|[{'var',615,'Result'}]]}|[[{'type',616,'constraint',[{'atom',616,'is_subtype'}|[[{'var',616,'Result'}|[{'type',616,'tuple',[{'ann_type',616,[{'var',616,'X'}|[{'type',616,'integer',[]}]]}|[{'ann_type',616,[{'var',616,'Y'}|[{'type',616,'integer',[]}]]}|[{'ann_type',616,[{'var',616,'Descent'}|[{'type',616,'integer',[]}]]}|[{'ann_type',616,[{'var',616,'ExternalLeading'}|[{'type',616,'integer',[]}]]}]]]]}]]]]}|[{'type',617,'constraint',[{'atom',617,'is_subtype'}|[[{'var',617,'This'}|[{'type',617,'wxDC',[]}]]]]}|[{'type',617,'constraint',[{'atom',617,'is_subtype'}|[[{'var',617,'String'}|[{'remote_type',617,[{'atom',617,'unicode'}|[{'atom',617,'chardata'}|[[]]]]}]]]]}|[{'type',618,'constraint',[{'atom',618,'is_subtype'}|[[{'var',618,'Option'}|[{'type',618,'tuple',[{'atom',618,'theFont'}|[{'remote_type',618,[{'atom',618,'wxFont'}|[{'atom',618,'wxFont'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 630
		'spec' =
		    %% Line 630
		    [{{'getTextForeground',1},[{'type',630,'bounded_fun',[{'type',630,'fun',[{'type',630,'product',[{'var',630,'This'}]}|[{'remote_type',630,[{'atom',630,'wx'}|[{'atom',630,'wx_colour4'}|[[]]]]}]]}|[[{'type',631,'constraint',[{'atom',631,'is_subtype'}|[[{'var',631,'This'}|[{'type',631,'wxDC',[]}]]]]}]]]}]}],
		%% Line 638
		'spec' =
		    %% Line 638
		    [{{'getUserScale',1},[{'type',638,'bounded_fun',[{'type',638,'fun',[{'type',638,'product',[{'var',638,'This'}]}|[{'type',638,'tuple',[{'ann_type',638,[{'var',638,'X'}|[{'type',638,'number',[]}]]}|[{'ann_type',638,[{'var',638,'Y'}|[{'type',638,'number',[]}]]}]]}]]}|[[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'This'}|[{'type',639,'wxDC',[]}]]]]}]]]}]}],
		%% Line 646
		'spec' =
		    %% Line 646
		    [{{'gradientFillConcentric',4},[{'type',646,'bounded_fun',[{'type',646,'fun',[{'type',646,'product',[{'var',646,'This'}|[{'var',646,'Rect'}|[{'var',646,'InitialColour'}|[{'var',646,'DestColour'}]]]]}|[{'atom',646,'ok'}]]}|[[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'This'}|[{'type',647,'wxDC',[]}]]]]}|[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'Rect'}|[{'type',647,'tuple',[{'ann_type',647,[{'var',647,'X'}|[{'type',647,'integer',[]}]]}|[{'ann_type',647,[{'var',647,'Y'}|[{'type',647,'integer',[]}]]}|[{'ann_type',647,[{'var',647,'W'}|[{'type',647,'integer',[]}]]}|[{'ann_type',647,[{'var',647,'H'}|[{'type',647,'integer',[]}]]}]]]]}]]]]}|[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'InitialColour'}|[{'remote_type',647,[{'atom',647,'wx'}|[{'atom',647,'wx_colour'}|[[]]]]}]]]]}|[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'DestColour'}|[{'remote_type',647,[{'atom',647,'wx'}|[{'atom',647,'wx_colour'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 655
		'spec' =
		    %% Line 655
		    [{{'gradientFillConcentric',5},[{'type',655,'bounded_fun',[{'type',655,'fun',[{'type',655,'product',[{'var',655,'This'}|[{'var',655,'Rect'}|[{'var',655,'InitialColour'}|[{'var',655,'DestColour'}|[{'var',655,'CircleCenter'}]]]]]}|[{'atom',655,'ok'}]]}|[[{'type',656,'constraint',[{'atom',656,'is_subtype'}|[[{'var',656,'This'}|[{'type',656,'wxDC',[]}]]]]}|[{'type',656,'constraint',[{'atom',656,'is_subtype'}|[[{'var',656,'Rect'}|[{'type',656,'tuple',[{'ann_type',656,[{'var',656,'X'}|[{'type',656,'integer',[]}]]}|[{'ann_type',656,[{'var',656,'Y'}|[{'type',656,'integer',[]}]]}|[{'ann_type',656,[{'var',656,'W'}|[{'type',656,'integer',[]}]]}|[{'ann_type',656,[{'var',656,'H'}|[{'type',656,'integer',[]}]]}]]]]}]]]]}|[{'type',656,'constraint',[{'atom',656,'is_subtype'}|[[{'var',656,'InitialColour'}|[{'remote_type',656,[{'atom',656,'wx'}|[{'atom',656,'wx_colour'}|[[]]]]}]]]]}|[{'type',656,'constraint',[{'atom',656,'is_subtype'}|[[{'var',656,'DestColour'}|[{'remote_type',656,[{'atom',656,'wx'}|[{'atom',656,'wx_colour'}|[[]]]]}]]]]}|[{'type',656,'constraint',[{'atom',656,'is_subtype'}|[[{'var',656,'CircleCenter'}|[{'type',656,'tuple',[{'ann_type',656,[{'var',656,'X'}|[{'type',656,'integer',[]}]]}|[{'ann_type',656,[{'var',656,'Y'}|[{'type',656,'integer',[]}]]}]]}]]]]}]]]]]]]}]}],
		%% Line 664
		'spec' =
		    %% Line 664
		    [{{'gradientFillLinear',4},[{'type',664,'bounded_fun',[{'type',664,'fun',[{'type',664,'product',[{'var',664,'This'}|[{'var',664,'Rect'}|[{'var',664,'InitialColour'}|[{'var',664,'DestColour'}]]]]}|[{'atom',664,'ok'}]]}|[[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'This'}|[{'type',665,'wxDC',[]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'Rect'}|[{'type',665,'tuple',[{'ann_type',665,[{'var',665,'X'}|[{'type',665,'integer',[]}]]}|[{'ann_type',665,[{'var',665,'Y'}|[{'type',665,'integer',[]}]]}|[{'ann_type',665,[{'var',665,'W'}|[{'type',665,'integer',[]}]]}|[{'ann_type',665,[{'var',665,'H'}|[{'type',665,'integer',[]}]]}]]]]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'InitialColour'}|[{'remote_type',665,[{'atom',665,'wx'}|[{'atom',665,'wx_colour'}|[[]]]]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'DestColour'}|[{'remote_type',665,[{'atom',665,'wx'}|[{'atom',665,'wx_colour'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 673
		'spec' =
		    %% Line 673
		    [{{'gradientFillLinear',5},[{'type',673,'bounded_fun',[{'type',673,'fun',[{'type',673,'product',[{'var',673,'This'}|[{'var',673,'Rect'}|[{'var',673,'InitialColour'}|[{'var',673,'DestColour'}|[{'type',673,'list',[{'var',673,'Option'}]}]]]]]}|[{'atom',673,'ok'}]]}|[[{'type',674,'constraint',[{'atom',674,'is_subtype'}|[[{'var',674,'This'}|[{'type',674,'wxDC',[]}]]]]}|[{'type',674,'constraint',[{'atom',674,'is_subtype'}|[[{'var',674,'Rect'}|[{'type',674,'tuple',[{'ann_type',674,[{'var',674,'X'}|[{'type',674,'integer',[]}]]}|[{'ann_type',674,[{'var',674,'Y'}|[{'type',674,'integer',[]}]]}|[{'ann_type',674,[{'var',674,'W'}|[{'type',674,'integer',[]}]]}|[{'ann_type',674,[{'var',674,'H'}|[{'type',674,'integer',[]}]]}]]]]}]]]]}|[{'type',674,'constraint',[{'atom',674,'is_subtype'}|[[{'var',674,'InitialColour'}|[{'remote_type',674,[{'atom',674,'wx'}|[{'atom',674,'wx_colour'}|[[]]]]}]]]]}|[{'type',674,'constraint',[{'atom',674,'is_subtype'}|[[{'var',674,'DestColour'}|[{'remote_type',674,[{'atom',674,'wx'}|[{'atom',674,'wx_colour'}|[[]]]]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'Option'}|[{'type',675,'tuple',[{'atom',675,'nDirection'}|[{'remote_type',675,[{'atom',675,'wx'}|[{'atom',675,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]]]}]}],
		%% Line 686
		'spec' =
		    %% Line 686
		    [{{'logicalToDeviceX',2},[{'type',686,'bounded_fun',[{'type',686,'fun',[{'type',686,'product',[{'var',686,'This'}|[{'var',686,'X'}]]}|[{'type',686,'integer',[]}]]}|[[{'type',687,'constraint',[{'atom',687,'is_subtype'}|[[{'var',687,'This'}|[{'type',687,'wxDC',[]}]]]]}|[{'type',687,'constraint',[{'atom',687,'is_subtype'}|[[{'var',687,'X'}|[{'type',687,'integer',[]}]]]]}]]]]}]}],
		%% Line 695
		'spec' =
		    %% Line 695
		    [{{'logicalToDeviceXRel',2},[{'type',695,'bounded_fun',[{'type',695,'fun',[{'type',695,'product',[{'var',695,'This'}|[{'var',695,'X'}]]}|[{'type',695,'integer',[]}]]}|[[{'type',696,'constraint',[{'atom',696,'is_subtype'}|[[{'var',696,'This'}|[{'type',696,'wxDC',[]}]]]]}|[{'type',696,'constraint',[{'atom',696,'is_subtype'}|[[{'var',696,'X'}|[{'type',696,'integer',[]}]]]]}]]]]}]}],
		%% Line 704
		'spec' =
		    %% Line 704
		    [{{'logicalToDeviceY',2},[{'type',704,'bounded_fun',[{'type',704,'fun',[{'type',704,'product',[{'var',704,'This'}|[{'var',704,'Y'}]]}|[{'type',704,'integer',[]}]]}|[[{'type',705,'constraint',[{'atom',705,'is_subtype'}|[[{'var',705,'This'}|[{'type',705,'wxDC',[]}]]]]}|[{'type',705,'constraint',[{'atom',705,'is_subtype'}|[[{'var',705,'Y'}|[{'type',705,'integer',[]}]]]]}]]]]}]}],
		%% Line 713
		'spec' =
		    %% Line 713
		    [{{'logicalToDeviceYRel',2},[{'type',713,'bounded_fun',[{'type',713,'fun',[{'type',713,'product',[{'var',713,'This'}|[{'var',713,'Y'}]]}|[{'type',713,'integer',[]}]]}|[[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'This'}|[{'type',714,'wxDC',[]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'Y'}|[{'type',714,'integer',[]}]]]]}]]]]}]}],
		%% Line 722
		'spec' =
		    %% Line 722
		    [{{'maxX',1},[{'type',722,'bounded_fun',[{'type',722,'fun',[{'type',722,'product',[{'var',722,'This'}]}|[{'type',722,'integer',[]}]]}|[[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'This'}|[{'type',723,'wxDC',[]}]]]]}]]]}]}],
		%% Line 730
		'spec' =
		    %% Line 730
		    [{{'maxY',1},[{'type',730,'bounded_fun',[{'type',730,'fun',[{'type',730,'product',[{'var',730,'This'}]}|[{'type',730,'integer',[]}]]}|[[{'type',731,'constraint',[{'atom',731,'is_subtype'}|[[{'var',731,'This'}|[{'type',731,'wxDC',[]}]]]]}]]]}]}],
		%% Line 738
		'spec' =
		    %% Line 738
		    [{{'minX',1},[{'type',738,'bounded_fun',[{'type',738,'fun',[{'type',738,'product',[{'var',738,'This'}]}|[{'type',738,'integer',[]}]]}|[[{'type',739,'constraint',[{'atom',739,'is_subtype'}|[[{'var',739,'This'}|[{'type',739,'wxDC',[]}]]]]}]]]}]}],
		%% Line 746
		'spec' =
		    %% Line 746
		    [{{'minY',1},[{'type',746,'bounded_fun',[{'type',746,'fun',[{'type',746,'product',[{'var',746,'This'}]}|[{'type',746,'integer',[]}]]}|[[{'type',747,'constraint',[{'atom',747,'is_subtype'}|[[{'var',747,'This'}|[{'type',747,'wxDC',[]}]]]]}]]]}]}],
		%% Line 754
		'spec' =
		    %% Line 754
		    [{{'isOk',1},[{'type',754,'bounded_fun',[{'type',754,'fun',[{'type',754,'product',[{'var',754,'This'}]}|[{'type',754,'boolean',[]}]]}|[[{'type',755,'constraint',[{'atom',755,'is_subtype'}|[[{'var',755,'This'}|[{'type',755,'wxDC',[]}]]]]}]]]}]}],
		%% Line 762
		'spec' =
		    %% Line 762
		    [{{'resetBoundingBox',1},[{'type',762,'bounded_fun',[{'type',762,'fun',[{'type',762,'product',[{'var',762,'This'}]}|[{'atom',762,'ok'}]]}|[[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'This'}|[{'type',763,'wxDC',[]}]]]]}]]]}]}],
		%% Line 770
		'spec' =
		    %% Line 770
		    [{{'setAxisOrientation',3},[{'type',770,'bounded_fun',[{'type',770,'fun',[{'type',770,'product',[{'var',770,'This'}|[{'var',770,'XLeftRight'}|[{'var',770,'YBottomUp'}]]]}|[{'atom',770,'ok'}]]}|[[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'This'}|[{'type',771,'wxDC',[]}]]]]}|[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'XLeftRight'}|[{'type',771,'boolean',[]}]]]]}|[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'YBottomUp'}|[{'type',771,'boolean',[]}]]]]}]]]]]}]}],
		%% Line 779
		'spec' =
		    %% Line 779
		    [{{'setBackground',2},[{'type',779,'bounded_fun',[{'type',779,'fun',[{'type',779,'product',[{'var',779,'This'}|[{'var',779,'Brush'}]]}|[{'atom',779,'ok'}]]}|[[{'type',780,'constraint',[{'atom',780,'is_subtype'}|[[{'var',780,'This'}|[{'type',780,'wxDC',[]}]]]]}|[{'type',780,'constraint',[{'atom',780,'is_subtype'}|[[{'var',780,'Brush'}|[{'remote_type',780,[{'atom',780,'wxBrush'}|[{'atom',780,'wxBrush'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 788
		'spec' =
		    %% Line 788
		    [{{'setBackgroundMode',2},[{'type',788,'bounded_fun',[{'type',788,'fun',[{'type',788,'product',[{'var',788,'This'}|[{'var',788,'Mode'}]]}|[{'atom',788,'ok'}]]}|[[{'type',789,'constraint',[{'atom',789,'is_subtype'}|[[{'var',789,'This'}|[{'type',789,'wxDC',[]}]]]]}|[{'type',789,'constraint',[{'atom',789,'is_subtype'}|[[{'var',789,'Mode'}|[{'type',789,'integer',[]}]]]]}]]]]}]}],
		%% Line 797
		'spec' =
		    %% Line 797
		    [{{'setBrush',2},[{'type',797,'bounded_fun',[{'type',797,'fun',[{'type',797,'product',[{'var',797,'This'}|[{'var',797,'Brush'}]]}|[{'atom',797,'ok'}]]}|[[{'type',798,'constraint',[{'atom',798,'is_subtype'}|[[{'var',798,'This'}|[{'type',798,'wxDC',[]}]]]]}|[{'type',798,'constraint',[{'atom',798,'is_subtype'}|[[{'var',798,'Brush'}|[{'remote_type',798,[{'atom',798,'wxBrush'}|[{'atom',798,'wxBrush'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 810
		'spec' =
		    %% Line 810
		    [{{'setClippingRegion',2},[{'type',810,'bounded_fun',[{'type',810,'fun',[{'type',810,'product',[{'var',810,'This'}|[{'var',810,'Region'}]]}|[{'atom',810,'ok'}]]}|[[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'This'}|[{'type',811,'wxDC',[]}]]]]}|[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'Region'}|[{'remote_type',811,[{'atom',811,'wxRegion'}|[{'atom',811,'wxRegion'}|[[]]]]}]]]]}]]]]}|[{'type',812,'bounded_fun',[{'type',812,'fun',[{'type',812,'product',[{'var',812,'This'}|[{'var',812,'Rect'}]]}|[{'atom',812,'ok'}]]}|[[{'type',813,'constraint',[{'atom',813,'is_subtype'}|[[{'var',813,'This'}|[{'type',813,'wxDC',[]}]]]]}|[{'type',813,'constraint',[{'atom',813,'is_subtype'}|[[{'var',813,'Rect'}|[{'type',813,'tuple',[{'ann_type',813,[{'var',813,'X'}|[{'type',813,'integer',[]}]]}|[{'ann_type',813,[{'var',813,'Y'}|[{'type',813,'integer',[]}]]}|[{'ann_type',813,[{'var',813,'W'}|[{'type',813,'integer',[]}]]}|[{'ann_type',813,[{'var',813,'H'}|[{'type',813,'integer',[]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 826
		'spec' =
		    %% Line 826
		    [{{'setClippingRegion',3},[{'type',826,'bounded_fun',[{'type',826,'fun',[{'type',826,'product',[{'var',826,'This'}|[{'var',826,'Pt'}|[{'var',826,'Sz'}]]]}|[{'atom',826,'ok'}]]}|[[{'type',827,'constraint',[{'atom',827,'is_subtype'}|[[{'var',827,'This'}|[{'type',827,'wxDC',[]}]]]]}|[{'type',827,'constraint',[{'atom',827,'is_subtype'}|[[{'var',827,'Pt'}|[{'type',827,'tuple',[{'ann_type',827,[{'var',827,'X'}|[{'type',827,'integer',[]}]]}|[{'ann_type',827,[{'var',827,'Y'}|[{'type',827,'integer',[]}]]}]]}]]]]}|[{'type',827,'constraint',[{'atom',827,'is_subtype'}|[[{'var',827,'Sz'}|[{'type',827,'tuple',[{'ann_type',827,[{'var',827,'W'}|[{'type',827,'integer',[]}]]}|[{'ann_type',827,[{'var',827,'H'}|[{'type',827,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 835
		'spec' =
		    %% Line 835
		    [{{'setDeviceOrigin',3},[{'type',835,'bounded_fun',[{'type',835,'fun',[{'type',835,'product',[{'var',835,'This'}|[{'var',835,'X'}|[{'var',835,'Y'}]]]}|[{'atom',835,'ok'}]]}|[[{'type',836,'constraint',[{'atom',836,'is_subtype'}|[[{'var',836,'This'}|[{'type',836,'wxDC',[]}]]]]}|[{'type',836,'constraint',[{'atom',836,'is_subtype'}|[[{'var',836,'X'}|[{'type',836,'integer',[]}]]]]}|[{'type',836,'constraint',[{'atom',836,'is_subtype'}|[[{'var',836,'Y'}|[{'type',836,'integer',[]}]]]]}]]]]]}]}],
		%% Line 844
		'spec' =
		    %% Line 844
		    [{{'setFont',2},[{'type',844,'bounded_fun',[{'type',844,'fun',[{'type',844,'product',[{'var',844,'This'}|[{'var',844,'Font'}]]}|[{'atom',844,'ok'}]]}|[[{'type',845,'constraint',[{'atom',845,'is_subtype'}|[[{'var',845,'This'}|[{'type',845,'wxDC',[]}]]]]}|[{'type',845,'constraint',[{'atom',845,'is_subtype'}|[[{'var',845,'Font'}|[{'remote_type',845,[{'atom',845,'wxFont'}|[{'atom',845,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 854
		'spec' =
		    %% Line 854
		    [{{'setLayoutDirection',2},[{'type',854,'bounded_fun',[{'type',854,'fun',[{'type',854,'product',[{'var',854,'This'}|[{'var',854,'Dir'}]]}|[{'atom',854,'ok'}]]}|[[{'type',855,'constraint',[{'atom',855,'is_subtype'}|[[{'var',855,'This'}|[{'type',855,'wxDC',[]}]]]]}|[{'type',855,'constraint',[{'atom',855,'is_subtype'}|[[{'var',855,'Dir'}|[{'remote_type',855,[{'atom',855,'wx'}|[{'atom',855,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 864
		'spec' =
		    %% Line 864
		    [{{'setLogicalFunction',2},[{'type',864,'bounded_fun',[{'type',864,'fun',[{'type',864,'product',[{'var',864,'This'}|[{'var',864,'Function'}]]}|[{'atom',864,'ok'}]]}|[[{'type',865,'constraint',[{'atom',865,'is_subtype'}|[[{'var',865,'This'}|[{'type',865,'wxDC',[]}]]]]}|[{'type',865,'constraint',[{'atom',865,'is_subtype'}|[[{'var',865,'Function'}|[{'remote_type',865,[{'atom',865,'wx'}|[{'atom',865,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 874
		'spec' =
		    %% Line 874
		    [{{'setMapMode',2},[{'type',874,'bounded_fun',[{'type',874,'fun',[{'type',874,'product',[{'var',874,'This'}|[{'var',874,'Mode'}]]}|[{'atom',874,'ok'}]]}|[[{'type',875,'constraint',[{'atom',875,'is_subtype'}|[[{'var',875,'This'}|[{'type',875,'wxDC',[]}]]]]}|[{'type',875,'constraint',[{'atom',875,'is_subtype'}|[[{'var',875,'Mode'}|[{'remote_type',875,[{'atom',875,'wx'}|[{'atom',875,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 883
		'spec' =
		    %% Line 883
		    [{{'setPalette',2},[{'type',883,'bounded_fun',[{'type',883,'fun',[{'type',883,'product',[{'var',883,'This'}|[{'var',883,'Palette'}]]}|[{'atom',883,'ok'}]]}|[[{'type',884,'constraint',[{'atom',884,'is_subtype'}|[[{'var',884,'This'}|[{'type',884,'wxDC',[]}]]]]}|[{'type',884,'constraint',[{'atom',884,'is_subtype'}|[[{'var',884,'Palette'}|[{'remote_type',884,[{'atom',884,'wxPalette'}|[{'atom',884,'wxPalette'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 892
		'spec' =
		    %% Line 892
		    [{{'setPen',2},[{'type',892,'bounded_fun',[{'type',892,'fun',[{'type',892,'product',[{'var',892,'This'}|[{'var',892,'Pen'}]]}|[{'atom',892,'ok'}]]}|[[{'type',893,'constraint',[{'atom',893,'is_subtype'}|[[{'var',893,'This'}|[{'type',893,'wxDC',[]}]]]]}|[{'type',893,'constraint',[{'atom',893,'is_subtype'}|[[{'var',893,'Pen'}|[{'remote_type',893,[{'atom',893,'wxPen'}|[{'atom',893,'wxPen'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 901
		'spec' =
		    %% Line 901
		    [{{'setTextBackground',2},[{'type',901,'bounded_fun',[{'type',901,'fun',[{'type',901,'product',[{'var',901,'This'}|[{'var',901,'Colour'}]]}|[{'atom',901,'ok'}]]}|[[{'type',902,'constraint',[{'atom',902,'is_subtype'}|[[{'var',902,'This'}|[{'type',902,'wxDC',[]}]]]]}|[{'type',902,'constraint',[{'atom',902,'is_subtype'}|[[{'var',902,'Colour'}|[{'remote_type',902,[{'atom',902,'wx'}|[{'atom',902,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 910
		'spec' =
		    %% Line 910
		    [{{'setTextForeground',2},[{'type',910,'bounded_fun',[{'type',910,'fun',[{'type',910,'product',[{'var',910,'This'}|[{'var',910,'Colour'}]]}|[{'atom',910,'ok'}]]}|[[{'type',911,'constraint',[{'atom',911,'is_subtype'}|[[{'var',911,'This'}|[{'type',911,'wxDC',[]}]]]]}|[{'type',911,'constraint',[{'atom',911,'is_subtype'}|[[{'var',911,'Colour'}|[{'remote_type',911,[{'atom',911,'wx'}|[{'atom',911,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 919
		'spec' =
		    %% Line 919
		    [{{'setUserScale',3},[{'type',919,'bounded_fun',[{'type',919,'fun',[{'type',919,'product',[{'var',919,'This'}|[{'var',919,'X'}|[{'var',919,'Y'}]]]}|[{'atom',919,'ok'}]]}|[[{'type',920,'constraint',[{'atom',920,'is_subtype'}|[[{'var',920,'This'}|[{'type',920,'wxDC',[]}]]]]}|[{'type',920,'constraint',[{'atom',920,'is_subtype'}|[[{'var',920,'X'}|[{'type',920,'number',[]}]]]]}|[{'type',920,'constraint',[{'atom',920,'is_subtype'}|[[{'var',920,'Y'}|[{'type',920,'number',[]}]]]]}]]]]]}]}],
		%% Line 928
		'spec' =
		    %% Line 928
		    [{{'startDoc',2},[{'type',928,'bounded_fun',[{'type',928,'fun',[{'type',928,'product',[{'var',928,'This'}|[{'var',928,'Message'}]]}|[{'type',928,'boolean',[]}]]}|[[{'type',929,'constraint',[{'atom',929,'is_subtype'}|[[{'var',929,'This'}|[{'type',929,'wxDC',[]}]]]]}|[{'type',929,'constraint',[{'atom',929,'is_subtype'}|[[{'var',929,'Message'}|[{'remote_type',929,[{'atom',929,'unicode'}|[{'atom',929,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 938
		'spec' =
		    %% Line 938
		    [{{'startPage',1},[{'type',938,'bounded_fun',[{'type',938,'fun',[{'type',938,'product',[{'var',938,'This'}]}|[{'atom',938,'ok'}]]}|[[{'type',939,'constraint',[{'atom',939,'is_subtype'}|[[{'var',939,'This'}|[{'type',939,'wxDC',[]}]]]]}]]]}]}]]
'parent_class'/1 =
    %% Line 56
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxDC'})
'blit'/5 =
    %% Line 63
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor22,_cor23,_cor24},DestPt = {DestPtX,DestPtY},Sz = {SzW,SzH},Source = {'wx_ref',_cor25,_cor26,_cor27},SrcPt = {SrcPtX,SrcPtY}>
	      when %% Line 64
		( try
		      let <_cor5> =
			  call 'erlang':'is_integer'
			      (DestPtX)
		      in  let <_cor6> =
			      call 'erlang':'is_integer'
				  (DestPtY)
			  in  let <_cor7> =
				  call 'erlang':'is_integer'
				      (SzW)
			      in  let <_cor8> =
				      call 'erlang':'is_integer'
					  (SzH)
				  in  let <_cor9> =
					  call 'erlang':'is_integer'
					      (SrcPtX)
				      in  let <_cor10> =
					      call 'erlang':'is_integer'
						  (SrcPtY)
					  in  let <_cor11> =
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(_cor9, _cor10)
						    -| ['compiler_generated'] )
					      in  let <_cor13> =
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor8, _cor11)
							-| ['compiler_generated'] )
						  in  let <_cor14> =
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'and'
												 -| ['compiler_generated'] )
								(_cor7, _cor13)
							    -| ['compiler_generated'] )
						      in  let <_cor15> =
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'and'
												     -| ['compiler_generated'] )
								    (_cor6, _cor14)
								-| ['compiler_generated'] )
							  in  ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'and'
												     -| ['compiler_generated'] )
								    (_cor5, _cor15)
								-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 65
	      apply 'blit'/6
		  (This, DestPt, Sz, Source, SrcPt, [])
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'blit',5}}] )
	    -| ['compiler_generated'] )
	end
'blit'/6 =
    %% Line 74
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor40},{DestPtX,DestPtY},{SzW,SzH},{'wx_ref',SourceRef,SourceT,_cor41},{SrcPtX,SrcPtY},Options>
	      when %% Line 75
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (DestPtX)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(DestPtY)
			in  let <_cor8> =
				call 'erlang':'is_integer'
				    (SzW)
			    in  let <_cor9> =
				    call 'erlang':'is_integer'
					(SzH)
				in  let <_cor10> =
					call 'erlang':'is_integer'
					    (SrcPtX)
				    in  let <_cor11> =
					    call 'erlang':'is_integer'
						(SrcPtY)
					in  let <_cor12> =
						call 'erlang':'is_list'
						    (Options)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor11, _cor12)
						in  let <_cor14> =
							call 'erlang':'and'
							    (_cor10, _cor13)
						    in  let <_cor15> =
							    call 'erlang':'and'
								(_cor9, _cor14)
							in  let <_cor16> =
								call 'erlang':'and'
								    (_cor8, _cor15)
							    in  let <_cor17> =
								    call 'erlang':'and'
									(_cor7, _cor16)
								in  call 'erlang':'and'
									(_cor6, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 76
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 77
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (SourceT,
				       'wxDC') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call SourceT:'parent_class'
				    ('wxDC')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 78
			  ( fun (_cor27,_cor26) ->
				case <_cor27,_cor26> of
				  <{'rop',Rop},Acc> when 'true' ->
				      let <_cor22> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Rop>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor22|Acc]
				  %% Line 79
				  <{'useMask',UseMask},Acc> when 'true' ->
				      let <_cor23> =
					  call 'wxe_util':'from_bool'
					      (UseMask)
				      in  let <_cor24> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<_cor23>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor24|Acc]
				  %% Line 80
				  <{'srcPtMask',{SrcPtMaskX,SrcPtMaskY}},Acc> when 'true' ->
				      let <_cor25> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<SrcPtMaskX>(32,1,'integer',['unsigned'|['native']]),
					    #<SrcPtMaskY>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor25|Acc]
				  %% Line 81
				  <BadOpt,_cor42> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-blit/6-fun-0-'}}] )
		      in  let <_cor31> =
			      %% Line 82
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 82
				  call 'erlang':'list_to_binary'
				      (_cor31)
			      in  let <_cor33> =
				      %% Line 84
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<DestPtX>(32,1,'integer',['unsigned'|['native']]),
					#<DestPtY>(32,1,'integer',['unsigned'|['native']]),
					#<SzW>(32,1,'integer',['unsigned'|['native']]),
					#<SzH>(32,1,'integer',['unsigned'|['native']]),
					#<SourceRef>(32,1,'integer',['unsigned'|['native']]),
					#<SrcPtX>(32,1,'integer',['unsigned'|['native']]),
					#<SrcPtY>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 83
				      call 'wxe_util':'call'
					  (624, _cor33)
	  ( <_cor39,_cor38,_cor37,_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor39,_cor38,_cor37,_cor36,_cor35,_cor34})
		  -| [{'function_name',{'blit',6}}] )
	    -| ['compiler_generated'] )
	end
'calcBoundingBox'/3 =
    %% Line 89
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 90
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 90
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 90
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 91
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 93
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 92
		      call 'wxe_util':'cast'
			  (625, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'calcBoundingBox',3}}] )
	    -| ['compiler_generated'] )
	end
'clear'/1 =
    %% Line 98
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 99
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 101
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 100
		      call 'wxe_util':'cast'
			  (626, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clear',1}}] )
	    -| ['compiler_generated'] )
	end
'computeScaleAndOrigin'/1 =
    %% Line 106
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 107
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 109
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 108
		      call 'wxe_util':'cast'
			  (627, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'computeScaleAndOrigin',1}}] )
	    -| ['compiler_generated'] )
	end
'crossHair'/2 =
    %% Line 114
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 115
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 115
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 115
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 116
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 118
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 117
		      call 'wxe_util':'cast'
			  (628, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'crossHair',2}}] )
	    -| ['compiler_generated'] )
	end
'destroyClippingRegion'/1 =
    %% Line 123
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 124
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 126
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 125
		      call 'wxe_util':'cast'
			  (629, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'destroyClippingRegion',1}}] )
	    -| ['compiler_generated'] )
	end
'deviceToLogicalX'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},X>
	      when %% Line 132
		call 'erlang':'is_integer'
		    (X) ->
	      do  %% Line 133
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 135
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 134
		      call 'wxe_util':'call'
			  (630, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deviceToLogicalX',2}}] )
	    -| ['compiler_generated'] )
	end
'deviceToLogicalXRel'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},X>
	      when %% Line 141
		call 'erlang':'is_integer'
		    (X) ->
	      do  %% Line 142
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 144
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 143
		      call 'wxe_util':'call'
			  (631, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deviceToLogicalXRel',2}}] )
	    -| ['compiler_generated'] )
	end
'deviceToLogicalY'/2 =
    %% Line 149
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Y>
	      when %% Line 150
		call 'erlang':'is_integer'
		    (Y) ->
	      do  %% Line 151
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 153
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 152
		      call 'wxe_util':'call'
			  (632, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deviceToLogicalY',2}}] )
	    -| ['compiler_generated'] )
	end
'deviceToLogicalYRel'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Y>
	      when %% Line 159
		call 'erlang':'is_integer'
		    (Y) ->
	      do  %% Line 160
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 162
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 161
		      call 'wxe_util':'call'
			  (633, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deviceToLogicalYRel',2}}] )
	    -| ['compiler_generated'] )
	end
'drawArc'/4 =
    %% Line 167
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor21},{Pt1X,Pt1Y},{Pt2X,Pt2Y},{CentreX,CentreY}>
	      when %% Line 168
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Pt1X)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Pt1Y)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Pt2X)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(Pt2Y)
				in  let <_cor8> =
					call 'erlang':'is_integer'
					    (CentreX)
				    in  let <_cor9> =
					    call 'erlang':'is_integer'
						(CentreY)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor8, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor7, _cor10)
						in  let <_cor12> =
							call 'erlang':'and'
							    (_cor6, _cor11)
						    in  let <_cor13> =
							    call 'erlang':'and'
								(_cor5, _cor12)
							in  call 'erlang':'and'
								(_cor4, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 169
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 171
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pt1X>(32,1,'integer',['unsigned'|['native']]),
			#<Pt1Y>(32,1,'integer',['unsigned'|['native']]),
			#<Pt2X>(32,1,'integer',['unsigned'|['native']]),
			#<Pt2Y>(32,1,'integer',['unsigned'|['native']]),
			#<CentreX>(32,1,'integer',['unsigned'|['native']]),
			#<CentreY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 170
		      call 'wxe_util':'cast'
			  (634, _cor16)
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'drawArc',4}}] )
	    -| ['compiler_generated'] )
	end
'drawBitmap'/3 =
    %% Line 177
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor10,_cor11,_cor12},Bmp = {'wx_ref',_cor13,_cor14,_cor15},Pt = {PtX,PtY}>
	      when let <_cor3> =
		    %% Line 178
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor4> =
			%% Line 178
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 178
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 179
	      apply 'drawBitmap'/4
		  (This, Bmp, Pt, [])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'drawBitmap',3}}] )
	    -| ['compiler_generated'] )
	end
'drawBitmap'/4 =
    %% Line 185
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},{'wx_ref',BmpRef,BmpT,_cor27},{PtX,PtY},Options>
	      when %% Line 186
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (PtX)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(PtY)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 187
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 188
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BmpT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BmpT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 189
			  ( fun (_cor15,_cor14) ->
				case <_cor15,_cor14> of
				  <{'useMask',UseMask},Acc> when 'true' ->
				      let <_cor12> =
					  call 'wxe_util':'from_bool'
					      (UseMask)
				      in  let <_cor13> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor12>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor13|Acc]
				  %% Line 190
				  <BadOpt,_cor28> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-drawBitmap/4-fun-0-'}}] )
		      in  let <_cor19> =
			      %% Line 191
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 191
				  call 'erlang':'list_to_binary'
				      (_cor19)
			      in  let <_cor21> =
				      %% Line 193
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<BmpRef>(32,1,'integer',['unsigned'|['native']]),
					#<PtX>(32,1,'integer',['unsigned'|['native']]),
					#<PtY>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 192
				      call 'wxe_util':'cast'
					  (635, _cor21)
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'drawBitmap',4}}] )
	    -| ['compiler_generated'] )
	end
'drawCheckMark'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{RectX,RectY,RectW,RectH}>
	      when %% Line 199
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor5> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor3, _cor6)
					in  call 'erlang':'and'
						(_cor2, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 200
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 202
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 201
		      call 'wxe_util':'cast'
			  (636, _cor10)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'drawCheckMark',2}}] )
	    -| ['compiler_generated'] )
	end
'drawCircle'/3 =
    %% Line 207
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{PtX,PtY},Radius>
	      when %% Line 208
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (PtX)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(PtY)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Radius)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 209
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor9> =
		      %% Line 211
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']]),
			#<Radius>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 210
		      call 'wxe_util':'cast'
			  (637, _cor9)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'drawCircle',3}}] )
	    -| ['compiler_generated'] )
	end
'drawEllipse'/2 =
    %% Line 216
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{RectX,RectY,RectW,RectH}>
	      when %% Line 217
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor5> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor3, _cor6)
					in  call 'erlang':'and'
						(_cor2, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 218
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 220
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 219
		      call 'wxe_util':'cast'
			  (640, _cor10)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'drawEllipse',2}}] )
	    -| ['compiler_generated'] )
	end
'drawEllipse'/3 =
    %% Line 225
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},{PtX,PtY},{SzW,SzH}>
	      when %% Line 226
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (PtX)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(PtY)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (SzW)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(SzH)
				in  let <_cor7> =
					call 'erlang':'and'
					    (_cor5, _cor6)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor4, _cor7)
					in  call 'erlang':'and'
						(_cor3, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 227
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 229
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']]),
			#<SzW>(32,1,'integer',['unsigned'|['native']]),
			#<SzH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 228
		      call 'wxe_util':'cast'
			  (639, _cor11)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'drawEllipse',3}}] )
	    -| ['compiler_generated'] )
	end
'drawEllipticArc'/5 =
    %% Line 234
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},{PtX,PtY},{SzW,SzH},Sa,Ea>
	      when %% Line 235
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (PtX)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(PtY)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (SzW)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(SzH)
				in  let <_cor9> =
					call 'erlang':'is_number'
					    (Sa)
				    in  let <_cor10> =
					    call 'erlang':'is_number'
						(Ea)
					in  let <_cor11> =
						call 'erlang':'and'
						    (_cor9, _cor10)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor8, _cor11)
						in  let <_cor13> =
							call 'erlang':'and'
							    (_cor7, _cor12)
						    in  let <_cor14> =
							    call 'erlang':'and'
								(_cor6, _cor13)
							in  call 'erlang':'and'
								(_cor5, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 236
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor17> =
		      %% Line 238
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']]),
			#<SzW>(32,1,'integer',['unsigned'|['native']]),
			#<SzH>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Sa>(64,1,'float',['unsigned'|['native']]),
			#<Ea>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 237
		      call 'wxe_util':'cast'
			  (641, _cor17)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'drawEllipticArc',5}}] )
	    -| ['compiler_generated'] )
	end
'drawIcon'/3 =
    %% Line 243
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{'wx_ref',IconRef,IconT,_cor14},{PtX,PtY}>
	      when let <_cor3> =
		    %% Line 244
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor4> =
			%% Line 244
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 244
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 245
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 246
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (IconT,
				       'wxIcon') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call IconT:'parent_class'
				    ('wxIcon')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor9> =
			  %% Line 248
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<IconRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PtX>(32,1,'integer',['unsigned'|['native']]),
			    #<PtY>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 247
			  call 'wxe_util':'cast'
			      (642, _cor9)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'drawIcon',3}}] )
	    -| ['compiler_generated'] )
	end
'drawLabel'/3 =
    %% Line 254
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor15,_cor16,_cor17},Text,Rect = {RectX,RectY,RectW,RectH}>
	      when %% Line 255
		( try
		      let <_cor3> =
			  call 'erlang':'is_list'
			      (Text)
		      in  let <_cor4> =
			      call 'erlang':'is_integer'
				  (RectX)
			  in  let <_cor5> =
				  call 'erlang':'is_integer'
				      (RectY)
			      in  let <_cor6> =
				      call 'erlang':'is_integer'
					  (RectW)
				  in  let <_cor7> =
					  call 'erlang':'is_integer'
					      (RectH)
				      in  let <_cor8> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor6, _cor7)
						-| ['compiler_generated'] )
					  in  let <_cor9> =
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(_cor5, _cor8)
						    -| ['compiler_generated'] )
					      in  let <_cor10> =
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor4, _cor9)
							-| ['compiler_generated'] )
						  in  ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor3, _cor10)
							-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 256
	      apply 'drawLabel'/4
		  (This, Text, Rect, [])
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'drawLabel',3}}] )
	    -| ['compiler_generated'] )
	end
'drawLabel'/4 =
    %% Line 263
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Text,{RectX,RectY,RectW,RectH},Options>
	      when %% Line 264
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Text)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(RectX)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (RectY)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(RectW)
				in  let <_cor8> =
					call 'erlang':'is_integer'
					    (RectH)
				    in  let <_cor9> =
					    call 'erlang':'is_list'
						(Options)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor8, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor7, _cor10)
						in  let <_cor12> =
							call 'erlang':'and'
							    (_cor6, _cor11)
						    in  let <_cor13> =
							    call 'erlang':'and'
								(_cor5, _cor12)
							in  call 'erlang':'and'
								(_cor4, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 265
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 266
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 267
			  ( fun (_cor20,_cor19) ->
				case <_cor20,_cor19> of
				  <{'alignment',Alignment},Acc> when 'true' ->
				      let <_cor17> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Alignment>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor17|Acc]
				  %% Line 268
				  <{'indexAccel',IndexAccel},Acc> when 'true' ->
				      let <_cor18> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<IndexAccel>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor18|Acc]
				  %% Line 269
				  <BadOpt,_cor38> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-drawLabel/4-fun-0-'}}] )
		      in  let <_cor24> =
			      %% Line 270
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 270
				  call 'erlang':'list_to_binary'
				      (_cor24)
			      in  let <_cor31> =
				      %% Line 272
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor26> =
					  %% Line 272
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor27> =
					      %% Line 272
					      call 'erlang':'+'
						  (0, _cor26)
					  in  let <_cor28> =
						  %% Line 272
						  call 'erlang':'band'
						      (_cor27, 7)
					      in  let <_cor29> =
						      %% Line 272
						      call 'erlang':'-'
							  (8, _cor28)
						  in  let <_cor30> =
							  %% Line 272
							  call 'erlang':'band'
							      (_cor29, 7)
						      in  let <_cor32> =
							      %% Line 272
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor31>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor30,8,'integer',['unsigned'|['big']]),
								#<RectX>(32,1,'integer',['unsigned'|['native']]),
								#<RectY>(32,1,'integer',['unsigned'|['native']]),
								#<RectW>(32,1,'integer',['unsigned'|['native']]),
								#<RectH>(32,1,'integer',['unsigned'|['native']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 271
							      call 'wxe_util':'cast'
								  (643, _cor32)
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'drawLabel',4}}] )
	    -| ['compiler_generated'] )
	end
'drawLine'/3 =
    %% Line 277
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},{Pt1X,Pt1Y},{Pt2X,Pt2Y}>
	      when %% Line 278
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Pt1X)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Pt1Y)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Pt2X)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(Pt2Y)
				in  let <_cor7> =
					call 'erlang':'and'
					    (_cor5, _cor6)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor4, _cor7)
					in  call 'erlang':'and'
						(_cor3, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 279
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 281
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pt1X>(32,1,'integer',['unsigned'|['native']]),
			#<Pt1Y>(32,1,'integer',['unsigned'|['native']]),
			#<Pt2X>(32,1,'integer',['unsigned'|['native']]),
			#<Pt2Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 280
		      call 'wxe_util':'cast'
			  (644, _cor11)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'drawLine',3}}] )
	    -| ['compiler_generated'] )
	end
'drawLines'/2 =
    %% Line 287
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Points>
	      when %% Line 288
		call 'erlang':'is_list'
		    (Points) ->
	      %% Line 289
	      apply 'drawLines'/3
		  (This, Points, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'drawLines',2}}] )
	    -| ['compiler_generated'] )
	end
'drawLines'/3 =
    %% Line 296
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor27},Points,Options>
	      when let <_cor3> =
		    %% Line 297
		    call 'erlang':'is_list'
			(Points)
		in  let <_cor4> =
			%% Line 297
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 297
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 298
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 299
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'xoffset',Xoffset},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Xoffset>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 300
			      <{'yoffset',Yoffset},Acc> when 'true' ->
				  let <_cor8> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Yoffset>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor8|Acc]
			      %% Line 301
			      <BadOpt,_cor28> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-drawLines/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 302
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 302
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor22> =
				  %% Line 304
				  call 'erlang':'length'
				      (Points)
			      in  let <_cor16> =
				      primop 'bs_init_writable'
					  (256)
				  in  let <_cor21> =
					  %% Line 305
					  ( letrec
						'lbc$^0'/2 =
						    fun (_cor20,_cor19) ->
							case <_cor20,_cor19> of
							  <[{X,Y}|_cor18],_cor19> when 'true' ->
							      let <_cor19> =
								  ( #{#<_cor19>('all',1,'binary',[]),
								      #<X>(32,1,'integer',['signed'|['native']]),
								      #<Y>(32,1,'integer',['signed'|['native']])}#
								    -| ['compiler_generated','single_use'] )
							      in  apply 'lbc$^0'/2
								      (_cor18, _cor19)
							  ( <[_cor17|_cor18],_cor19> when 'true' ->
								apply 'lbc$^0'/2
								    (_cor18, _cor19)
							    -| ['compiler_generated'] )
							  <[],_cor19> when 'true' ->
							      _cor19
							  ( <_cor20,_cor19> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor20,_cor19})
								  -| [{'function_name',{'lbc$^0',2}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lbc$^0'/2
						    (Points, _cor16)
					    -| ['list_comprehension'] )
				      in  let <_cor23> =
					      %% Line 304
					      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						#<_cor22>(32,1,'integer',['unsigned'|['native']]),
						#<_cor21>(%% Line 305
							  'all',8,'binary',['unsigned'|['big']]),
						#<%% Line 305
						  BinOpt>(%% Line 305
							  'all',8,'binary',['unsigned'|['big']])}#
					  in  %% Line 303
					      call 'wxe_util':'cast'
						  (645, _cor23)
	  ( <_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24})
		  -| [{'function_name',{'drawLines',3}}] )
	    -| ['compiler_generated'] )
	end
'drawPolygon'/2 =
    %% Line 311
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Points>
	      when %% Line 312
		call 'erlang':'is_list'
		    (Points) ->
	      %% Line 313
	      apply 'drawPolygon'/3
		  (This, Points, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'drawPolygon',2}}] )
	    -| ['compiler_generated'] )
	end
'drawPolygon'/3 =
    %% Line 322
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},Points,Options>
	      when let <_cor3> =
		    %% Line 323
		    call 'erlang':'is_list'
			(Points)
		in  let <_cor4> =
			%% Line 323
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 323
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 324
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 325
		      ( fun (_cor11,_cor10) ->
			    case <_cor11,_cor10> of
			      <{'xoffset',Xoffset},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Xoffset>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 326
			      <{'yoffset',Yoffset},Acc> when 'true' ->
				  let <_cor8> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Yoffset>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor8|Acc]
			      %% Line 327
			      <{'fillStyle',FillStyle},Acc> when 'true' ->
				  let <_cor9> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<FillStyle>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor9|Acc]
			      %% Line 328
			      <BadOpt,_cor29> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-drawPolygon/3-fun-0-'}}] )
		  in  let <_cor15> =
			  %% Line 329
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 329
			      call 'erlang':'list_to_binary'
				  (_cor15)
			  in  let <_cor23> =
				  %% Line 331
				  call 'erlang':'length'
				      (Points)
			      in  let <_cor17> =
				      primop 'bs_init_writable'
					  (256)
				  in  let <_cor22> =
					  %% Line 332
					  ( letrec
						'lbc$^0'/2 =
						    fun (_cor21,_cor20) ->
							case <_cor21,_cor20> of
							  <[{X,Y}|_cor19],_cor20> when 'true' ->
							      let <_cor20> =
								  ( #{#<_cor20>('all',1,'binary',[]),
								      #<X>(32,1,'integer',['signed'|['native']]),
								      #<Y>(32,1,'integer',['signed'|['native']])}#
								    -| ['compiler_generated','single_use'] )
							      in  apply 'lbc$^0'/2
								      (_cor19, _cor20)
							  ( <[_cor18|_cor19],_cor20> when 'true' ->
								apply 'lbc$^0'/2
								    (_cor19, _cor20)
							    -| ['compiler_generated'] )
							  <[],_cor20> when 'true' ->
							      _cor20
							  ( <_cor21,_cor20> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor21,_cor20})
								  -| [{'function_name',{'lbc$^0',2}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lbc$^0'/2
						    (Points, _cor17)
					    -| ['list_comprehension'] )
				      in  let <_cor24> =
					      %% Line 331
					      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						#<_cor23>(32,1,'integer',['unsigned'|['native']]),
						#<_cor22>(%% Line 332
							  'all',8,'binary',['unsigned'|['big']]),
						#<%% Line 332
						  BinOpt>(%% Line 332
							  'all',8,'binary',['unsigned'|['big']])}#
					  in  %% Line 330
					      call 'wxe_util':'cast'
						  (647, _cor24)
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'drawPolygon',3}}] )
	    -| ['compiler_generated'] )
	end
'drawPoint'/2 =
    %% Line 337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 338
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 338
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 338
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 339
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 341
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 340
		      call 'wxe_util':'cast'
			  (649, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'drawPoint',2}}] )
	    -| ['compiler_generated'] )
	end
'drawRectangle'/2 =
    %% Line 346
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{RectX,RectY,RectW,RectH}>
	      when %% Line 347
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor5> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor3, _cor6)
					in  call 'erlang':'and'
						(_cor2, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 348
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 350
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 349
		      call 'wxe_util':'cast'
			  (652, _cor10)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'drawRectangle',2}}] )
	    -| ['compiler_generated'] )
	end
'drawRectangle'/3 =
    %% Line 355
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},{PtX,PtY},{SzW,SzH}>
	      when %% Line 356
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (PtX)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(PtY)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (SzW)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(SzH)
				in  let <_cor7> =
					call 'erlang':'and'
					    (_cor5, _cor6)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor4, _cor7)
					in  call 'erlang':'and'
						(_cor3, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 357
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 359
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']]),
			#<SzW>(32,1,'integer',['unsigned'|['native']]),
			#<SzH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 358
		      call 'wxe_util':'cast'
			  (651, _cor11)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'drawRectangle',3}}] )
	    -| ['compiler_generated'] )
	end
'drawRotatedText'/4 =
    %% Line 364
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor24},Text,{PtX,PtY},Angle>
	      when %% Line 365
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Text)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(PtX)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (PtY)
			    in  let <_cor7> =
				    call 'erlang':'is_number'
					(Angle)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 366
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 367
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor18> =
			  %% Line 369
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor13> =
			      %% Line 369
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor14> =
				  %% Line 369
				  call 'erlang':'+'
				      (0, _cor13)
			      in  let <_cor15> =
				      %% Line 369
				      call 'erlang':'band'
					  (_cor14, 7)
				  in  let <_cor16> =
					  %% Line 369
					  call 'erlang':'-'
					      (8, _cor15)
				      in  let <_cor17> =
					      %% Line 369
					      call 'erlang':'band'
						  (_cor16, 7)
					  in  let <_cor19> =
						  %% Line 369
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor18>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor17,8,'integer',['unsigned'|['big']]),
						    #<PtX>(32,1,'integer',['unsigned'|['native']]),
						    #<PtY>(32,1,'integer',['unsigned'|['native']]),
						    #<Angle>(64,1,'float',['unsigned'|['native']])}#
					      in  %% Line 368
						  call 'wxe_util':'cast'
						      (653, _cor19)
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'drawRotatedText',4}}] )
	    -| ['compiler_generated'] )
	end
'drawRoundedRectangle'/3 =
    %% Line 374
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},{RX,RY,RW,RH},Radius>
	      when %% Line 375
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (RX)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(RY)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (RW)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(RH)
				in  let <_cor7> =
					call 'erlang':'is_number'
					    (Radius)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor6, _cor7)
					in  let <_cor9> =
						call 'erlang':'and'
						    (_cor5, _cor8)
					    in  let <_cor10> =
						    call 'erlang':'and'
							(_cor4, _cor9)
						in  call 'erlang':'and'
							(_cor3, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 376
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 378
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RX>(32,1,'integer',['unsigned'|['native']]),
			#<RY>(32,1,'integer',['unsigned'|['native']]),
			#<RW>(32,1,'integer',['unsigned'|['native']]),
			#<RH>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Radius>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 377
		      call 'wxe_util':'cast'
			  (656, _cor13)
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'drawRoundedRectangle',3}}] )
	    -| ['compiler_generated'] )
	end
'drawRoundedRectangle'/4 =
    %% Line 383
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{PtX,PtY},{SzW,SzH},Radius>
	      when %% Line 384
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (PtX)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(PtY)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (SzW)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(SzH)
				in  let <_cor8> =
					call 'erlang':'is_number'
					    (Radius)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor5, _cor10)
						in  call 'erlang':'and'
							(_cor4, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 385
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor14> =
		      %% Line 387
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']]),
			#<SzW>(32,1,'integer',['unsigned'|['native']]),
			#<SzH>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Radius>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 386
		      call 'wxe_util':'cast'
			  (655, _cor14)
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'drawRoundedRectangle',4}}] )
	    -| ['compiler_generated'] )
	end
'drawText'/3 =
    %% Line 392
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Text,{PtX,PtY}>
	      when %% Line 393
		try
		    let <_cor3> =
			call 'erlang':'is_list'
			    (Text)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(PtX)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (PtY)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 394
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 395
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor15> =
			  %% Line 397
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor10> =
			      %% Line 397
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor11> =
				  %% Line 397
				  call 'erlang':'+'
				      (0, _cor10)
			      in  let <_cor12> =
				      %% Line 397
				      call 'erlang':'band'
					  (_cor11, 7)
				  in  let <_cor13> =
					  %% Line 397
					  call 'erlang':'-'
					      (8, _cor12)
				      in  let <_cor14> =
					      %% Line 397
					      call 'erlang':'band'
						  (_cor13, 7)
					  in  let <_cor16> =
						  %% Line 397
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor14,8,'integer',['unsigned'|['big']]),
						    #<PtX>(32,1,'integer',['unsigned'|['native']]),
						    #<PtY>(32,1,'integer',['unsigned'|['native']])}#
					      in  %% Line 396
						  call 'wxe_util':'cast'
						      (657, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'drawText',3}}] )
	    -| ['compiler_generated'] )
	end
'endDoc'/1 =
    %% Line 402
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 403
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 405
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 404
		      call 'wxe_util':'cast'
			  (658, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'endDoc',1}}] )
	    -| ['compiler_generated'] )
	end
'endPage'/1 =
    %% Line 410
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 411
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 413
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 412
		      call 'wxe_util':'cast'
			  (659, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'endPage',1}}] )
	    -| ['compiler_generated'] )
	end
'floodFill'/3 =
    %% Line 419
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This,Pt = {PtX,PtY},Col>
	      when let <_cor10> =
		    %% Line 420
		    ( try
			  let <_cor3> =
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_record'
								     -| ['compiler_generated'] )
				    (This, 'wx_ref', 4)
				-| ['compiler_generated'] )
			  in  let <_cor4> =
				  call 'erlang':'is_integer'
				      (PtX)
			      in  let <_cor5> =
				      call 'erlang':'is_integer'
					  (PtY)
				  in  let <_cor6> =
					  call 'erlang':'tuple_size'
					      (Col)
				      in  let <_cor7> =
					      call 'erlang':'=:='
						  (_cor6, 3)
					  in  let <_cor8> =
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(_cor5, _cor7)
						    -| ['compiler_generated'] )
					      in  let <_cor9> =
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor4, _cor8)
							-| ['compiler_generated'] )
						  in  ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor3, _cor9)
							-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] )
		in  let <_cor12> =
			%% Line 420
			try
			    let <_cor11> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor11, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 420
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'or'
							       -| ['compiler_generated'] )
			      (_cor10, _cor12)
			  -| ['compiler_generated'] ) ->
	      %% Line 421
	      apply 'floodFill'/4
		  (This, Pt, Col, [])
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'floodFill',3}}] )
	    -| ['compiler_generated'] )
	end
'floodFill'/4 =
    %% Line 428
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor30},{PtX,PtY},Col,Options>
	      when let <_cor9> =
		    %% Line 429
		    try
			let <_cor4> =
			    call 'erlang':'is_integer'
				(PtX)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (PtY)
			    in  let <_cor6> =
				    call 'erlang':'tuple_size'
					(Col)
				in  let <_cor7> =
					call 'erlang':'=:='
					    (_cor6, 3)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor5, _cor7)
					in  call 'erlang':'and'
						(_cor4, _cor8)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor13> =
			%% Line 429
			try
			    let <_cor10> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  let <_cor11> =
				    call 'erlang':'=:='
					(_cor10, 4)
				in  let <_cor12> =
					call 'erlang':'is_list'
					    (Options)
				    in  call 'erlang':'and'
					    (_cor11, _cor12)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 429
			call 'erlang':'or'
			    (_cor9, _cor13) ->
	      do  %% Line 430
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 431
		      ( fun (_cor18,_cor17) ->
			    case <_cor18,_cor17> of
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor16> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor16|Acc]
			      %% Line 432
			      <BadOpt,_cor31> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-floodFill/4-fun-0-'}}] )
		  in  let <_cor22> =
			  %% Line 433
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 433
			      call 'erlang':'list_to_binary'
				  (_cor22)
			  in  let <_cor24> =
				  %% Line 435
				  call 'wxe_util':'colour_bin'
				      (Col)
			      in  let <_cor25> =
				      %% Line 435
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<PtX>(32,1,'integer',['unsigned'|['native']]),
					#<PtY>(32,1,'integer',['unsigned'|['native']]),
					#<_cor24>(16,8,'binary',['unsigned'|['big']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 434
				      call 'wxe_util':'call'
					  (660, _cor25)
	  ( <_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'floodFill',4}}] )
	    -| ['compiler_generated'] )
	end
'getBackground'/1 =
    %% Line 440
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 441
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 443
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 442
		      call 'wxe_util':'call'
			  (661, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBackground',1}}] )
	    -| ['compiler_generated'] )
	end
'getBackgroundMode'/1 =
    %% Line 448
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 449
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 451
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 450
		      call 'wxe_util':'call'
			  (662, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBackgroundMode',1}}] )
	    -| ['compiler_generated'] )
	end
'getBrush'/1 =
    %% Line 456
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 457
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 459
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 458
		      call 'wxe_util':'call'
			  (663, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBrush',1}}] )
	    -| ['compiler_generated'] )
	end
'getCharHeight'/1 =
    %% Line 464
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 465
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 467
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 466
		      call 'wxe_util':'call'
			  (664, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCharHeight',1}}] )
	    -| ['compiler_generated'] )
	end
'getCharWidth'/1 =
    %% Line 472
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 473
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 475
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 474
		      call 'wxe_util':'call'
			  (665, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCharWidth',1}}] )
	    -| ['compiler_generated'] )
	end
'getClippingBox'/1 =
    %% Line 481
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 482
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 484
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 483
		      call 'wxe_util':'call'
			  (666, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getClippingBox',1}}] )
	    -| ['compiler_generated'] )
	end
'getFont'/1 =
    %% Line 489
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 490
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 492
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 491
		      call 'wxe_util':'call'
			  (668, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFont',1}}] )
	    -| ['compiler_generated'] )
	end
'getLayoutDirection'/1 =
    %% Line 498
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 499
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 501
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 500
		      call 'wxe_util':'call'
			  (669, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLayoutDirection',1}}] )
	    -| ['compiler_generated'] )
	end
'getLogicalFunction'/1 =
    %% Line 506
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 507
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 509
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 508
		      call 'wxe_util':'call'
			  (670, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLogicalFunction',1}}] )
	    -| ['compiler_generated'] )
	end
'getMapMode'/1 =
    %% Line 514
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 515
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 517
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 516
		      call 'wxe_util':'call'
			  (671, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMapMode',1}}] )
	    -| ['compiler_generated'] )
	end
'getMultiLineTextExtent'/2 =
    %% Line 522
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},String>
	      when %% Line 523
		call 'erlang':'is_list'
		    (String) ->
	      do  %% Line 524
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <String_UC> =
		      %% Line 525
		      call 'unicode':'characters_to_binary'
			  ([String|[0]])
		  in  let <_cor10> =
			  %% Line 527
			  call 'erlang':'byte_size'
			      (String_UC)
		      in  let <_cor5> =
			      %% Line 527
			      call 'erlang':'byte_size'
				  (String_UC)
			  in  let <_cor6> =
				  %% Line 527
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 527
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 527
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 527
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 527
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<String_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 526
						  call 'wxe_util':'call'
						      (673, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getMultiLineTextExtent',2}}] )
	    -| ['compiler_generated'] )
	end
'getMultiLineTextExtent'/3 =
    %% Line 533
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},String,Options>
	      when let <_cor3> =
		    %% Line 534
		    call 'erlang':'is_list'
			(String)
		in  let <_cor4> =
			%% Line 534
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 534
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 535
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <String_UC> =
		      %% Line 536
		      call 'unicode':'characters_to_binary'
			  ([String|[0]])
		  in  let <MOpts> =
			  %% Line 537
			  ( fun (_cor12,_cor11) ->
				case <_cor12,_cor11> of
				  <{'font',{'wx_ref',FontRef,FontT,_cor29}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (FontT,
							   'wxFont') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call FontT:'parent_class'
							('wxFont')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor10> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<FontRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor10|Acc]
				  %% Line 538
				  <BadOpt,_cor30> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-getMultiLineTextExtent/3-fun-0-'}}] )
		      in  let <_cor16> =
			      %% Line 539
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 539
				  call 'erlang':'list_to_binary'
				      (_cor16)
			      in  let <_cor23> =
				      %% Line 541
				      call 'erlang':'byte_size'
					  (String_UC)
				  in  let <_cor18> =
					  %% Line 541
					  call 'erlang':'byte_size'
					      (String_UC)
				      in  let <_cor19> =
					      %% Line 541
					      call 'erlang':'+'
						  (0, _cor18)
					  in  let <_cor20> =
						  %% Line 541
						  call 'erlang':'band'
						      (_cor19, 7)
					      in  let <_cor21> =
						      %% Line 541
						      call 'erlang':'-'
							  (8, _cor20)
						  in  let <_cor22> =
							  %% Line 541
							  call 'erlang':'band'
							      (_cor21, 7)
						      in  let <_cor24> =
							      %% Line 541
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor23>(32,1,'integer',['unsigned'|['native']]),
								#<String_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor22,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 540
							      call 'wxe_util':'call'
								  (672, _cor24)
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'getMultiLineTextExtent',3}}] )
	    -| ['compiler_generated'] )
	end
'getPartialTextExtents'/2 =
    %% Line 547
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Text>
	      when %% Line 548
		call 'erlang':'is_list'
		    (Text) ->
	      do  %% Line 549
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 550
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor10> =
			  %% Line 552
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor5> =
			      %% Line 552
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor6> =
				  %% Line 552
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 552
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 552
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 552
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 552
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 551
						  call 'wxe_util':'call'
						      (674, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getPartialTextExtents',2}}] )
	    -| ['compiler_generated'] )
	end
'getPen'/1 =
    %% Line 557
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 558
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 560
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 559
		      call 'wxe_util':'call'
			  (675, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPen',1}}] )
	    -| ['compiler_generated'] )
	end
'getPixel'/2 =
    %% Line 566
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 567
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 567
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 567
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 568
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 570
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 569
		      call 'wxe_util':'call'
			  (676, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'getPixel',2}}] )
	    -| ['compiler_generated'] )
	end
'getPPI'/1 =
    %% Line 575
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 576
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 578
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 577
		      call 'wxe_util':'call'
			  (677, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPPI',1}}] )
	    -| ['compiler_generated'] )
	end
'getSize'/1 =
    %% Line 583
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 584
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 586
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 585
		      call 'wxe_util':'call'
			  (679, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getSizeMM'/1 =
    %% Line 591
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 592
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 594
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 593
		      call 'wxe_util':'call'
			  (681, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSizeMM',1}}] )
	    -| ['compiler_generated'] )
	end
'getTextBackground'/1 =
    %% Line 599
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 600
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 602
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 601
		      call 'wxe_util':'call'
			  (682, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTextBackground',1}}] )
	    -| ['compiler_generated'] )
	end
'getTextExtent'/2 =
    %% Line 607
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},String>
	      when %% Line 608
		call 'erlang':'is_list'
		    (String) ->
	      do  %% Line 609
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <String_UC> =
		      %% Line 610
		      call 'unicode':'characters_to_binary'
			  ([String|[0]])
		  in  let <_cor10> =
			  %% Line 612
			  call 'erlang':'byte_size'
			      (String_UC)
		      in  let <_cor5> =
			      %% Line 612
			      call 'erlang':'byte_size'
				  (String_UC)
			  in  let <_cor6> =
				  %% Line 612
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 612
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 612
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 612
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 612
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<String_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 611
						  call 'wxe_util':'call'
						      (684, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getTextExtent',2}}] )
	    -| ['compiler_generated'] )
	end
'getTextExtent'/3 =
    %% Line 619
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},String,Options>
	      when let <_cor3> =
		    %% Line 620
		    call 'erlang':'is_list'
			(String)
		in  let <_cor4> =
			%% Line 620
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 620
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 621
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <String_UC> =
		      %% Line 622
		      call 'unicode':'characters_to_binary'
			  ([String|[0]])
		  in  let <MOpts> =
			  %% Line 623
			  ( fun (_cor12,_cor11) ->
				case <_cor12,_cor11> of
				  <{'theFont',{'wx_ref',TheFontRef,TheFontT,_cor29}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (TheFontT,
							   'wxFont') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call TheFontT:'parent_class'
							('wxFont')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor10> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<TheFontRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor10|Acc]
				  %% Line 624
				  <BadOpt,_cor30> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-getTextExtent/3-fun-0-'}}] )
		      in  let <_cor16> =
			      %% Line 625
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 625
				  call 'erlang':'list_to_binary'
				      (_cor16)
			      in  let <_cor23> =
				      %% Line 627
				      call 'erlang':'byte_size'
					  (String_UC)
				  in  let <_cor18> =
					  %% Line 627
					  call 'erlang':'byte_size'
					      (String_UC)
				      in  let <_cor19> =
					      %% Line 627
					      call 'erlang':'+'
						  (0, _cor18)
					  in  let <_cor20> =
						  %% Line 627
						  call 'erlang':'band'
						      (_cor19, 7)
					      in  let <_cor21> =
						      %% Line 627
						      call 'erlang':'-'
							  (8, _cor20)
						  in  let <_cor22> =
							  %% Line 627
							  call 'erlang':'band'
							      (_cor21, 7)
						      in  let <_cor24> =
							      %% Line 627
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor23>(32,1,'integer',['unsigned'|['native']]),
								#<String_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor22,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 626
							      call 'wxe_util':'call'
								  (683, _cor24)
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'getTextExtent',3}}] )
	    -| ['compiler_generated'] )
	end
'getTextForeground'/1 =
    %% Line 632
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 633
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 635
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 634
		      call 'wxe_util':'call'
			  (686, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTextForeground',1}}] )
	    -| ['compiler_generated'] )
	end
'getUserScale'/1 =
    %% Line 640
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 641
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 643
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 642
		      call 'wxe_util':'call'
			  (687, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getUserScale',1}}] )
	    -| ['compiler_generated'] )
	end
'gradientFillConcentric'/4 =
    %% Line 648
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor31},{RectX,RectY,RectW,RectH},InitialColour,DestColour>
	      when let <_cor13> =
		    %% Line 649
		    try
			let <_cor4> =
			    call 'erlang':'is_integer'
				(RectX)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (RectY)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(RectW)
				in  let <_cor7> =
					call 'erlang':'is_integer'
					    (RectH)
				    in  let <_cor8> =
					    call 'erlang':'tuple_size'
						(InitialColour)
					in  let <_cor9> =
						call 'erlang':'=:='
						    (_cor8, 3)
					    in  let <_cor10> =
						    call 'erlang':'and'
							(_cor7, _cor9)
						in  let <_cor11> =
							call 'erlang':'and'
							    (_cor6, _cor10)
						    in  let <_cor12> =
							    call 'erlang':'and'
								(_cor5, _cor11)
							in  call 'erlang':'and'
								(_cor4, _cor12)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor18> =
			%% Line 649
			try
			    let <_cor14> =
				call 'erlang':'tuple_size'
				    (InitialColour)
			    in  let <_cor15> =
				    call 'erlang':'=:='
					(_cor14, 4)
				in  let <_cor16> =
					call 'erlang':'tuple_size'
					    (DestColour)
				    in  let <_cor17> =
					    call 'erlang':'=:='
						(_cor16, 3)
					in  call 'erlang':'and'
						(_cor15, _cor17)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor20> =
			    %% Line 649
			    try
				let <_cor19> =
				    call 'erlang':'tuple_size'
					(DestColour)
				in  call 'erlang':'=:='
					(_cor19, 4)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor21> =
				%% Line 649
				call 'erlang':'or'
				    (_cor18, _cor20)
			    in  %% Line 649
				call 'erlang':'or'
				    (_cor13, _cor21) ->
	      do  %% Line 650
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor25> =
		      %% Line 652
		      call 'wxe_util':'colour_bin'
			  (InitialColour)
		  in  let <_cor24> =
			  %% Line 652
			  call 'wxe_util':'colour_bin'
			      (DestColour)
		      in  let <_cor26> =
			      %% Line 652
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<RectX>(32,1,'integer',['unsigned'|['native']]),
				#<RectY>(32,1,'integer',['unsigned'|['native']]),
				#<RectW>(32,1,'integer',['unsigned'|['native']]),
				#<RectH>(32,1,'integer',['unsigned'|['native']]),
				#<_cor25>(16,8,'binary',['unsigned'|['big']]),
				#<_cor24>(16,8,'binary',['unsigned'|['big']])}#
			  in  %% Line 651
			      call 'wxe_util':'cast'
				  (688, _cor26)
	  ( <_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'gradientFillConcentric',4}}] )
	    -| ['compiler_generated'] )
	end
'gradientFillConcentric'/5 =
    %% Line 657
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},{RectX,RectY,RectW,RectH},InitialColour,DestColour,{CircleCenterX,CircleCenterY}>
	      when let <_cor14> =
		    %% Line 658
		    try
			let <_cor5> =
			    call 'erlang':'is_integer'
				(RectX)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (RectY)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(RectW)
				in  let <_cor8> =
					call 'erlang':'is_integer'
					    (RectH)
				    in  let <_cor9> =
					    call 'erlang':'tuple_size'
						(InitialColour)
					in  let <_cor10> =
						call 'erlang':'=:='
						    (_cor9, 3)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor8, _cor10)
						in  let <_cor12> =
							call 'erlang':'and'
							    (_cor7, _cor11)
						    in  let <_cor13> =
							    call 'erlang':'and'
								(_cor6, _cor12)
							in  call 'erlang':'and'
								(_cor5, _cor13)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor19> =
			%% Line 658
			try
			    let <_cor15> =
				call 'erlang':'tuple_size'
				    (InitialColour)
			    in  let <_cor16> =
				    call 'erlang':'=:='
					(_cor15, 4)
				in  let <_cor17> =
					call 'erlang':'tuple_size'
					    (DestColour)
				    in  let <_cor18> =
					    call 'erlang':'=:='
						(_cor17, 3)
					in  call 'erlang':'and'
						(_cor16, _cor18)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor25> =
			    %% Line 658
			    try
				let <_cor20> =
				    call 'erlang':'tuple_size'
					(DestColour)
				in  let <_cor21> =
					call 'erlang':'=:='
					    (_cor20, 4)
				    in  let <_cor22> =
					    call 'erlang':'is_integer'
						(CircleCenterX)
					in  let <_cor23> =
						call 'erlang':'is_integer'
						    (CircleCenterY)
					    in  let <_cor24> =
						    call 'erlang':'and'
							(_cor22, _cor23)
						in  call 'erlang':'and'
							(_cor21, _cor24)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor26> =
				%% Line 658
				call 'erlang':'or'
				    (_cor19, _cor25)
			    in  %% Line 658
				call 'erlang':'or'
				    (_cor14, _cor26) ->
	      do  %% Line 659
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor30> =
		      %% Line 661
		      call 'wxe_util':'colour_bin'
			  (InitialColour)
		  in  let <_cor29> =
			  %% Line 661
			  call 'wxe_util':'colour_bin'
			      (DestColour)
		      in  let <_cor31> =
			      %% Line 661
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<RectX>(32,1,'integer',['unsigned'|['native']]),
				#<RectY>(32,1,'integer',['unsigned'|['native']]),
				#<RectW>(32,1,'integer',['unsigned'|['native']]),
				#<RectH>(32,1,'integer',['unsigned'|['native']]),
				#<_cor30>(16,8,'binary',['unsigned'|['big']]),
				#<_cor29>(16,8,'binary',['unsigned'|['big']]),
				#<CircleCenterX>(32,1,'integer',['unsigned'|['native']]),
				#<CircleCenterY>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 660
			      call 'wxe_util':'cast'
				  (689, _cor31)
	  ( <_cor36,_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'gradientFillConcentric',5}}] )
	    -| ['compiler_generated'] )
	end
'gradientFillLinear'/4 =
    %% Line 667
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This,Rect = {RectX,RectY,RectW,RectH},InitialColour,DestColour>
	      when let <_cor15> =
		    %% Line 668
		    ( try
			  let <_cor4> =
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_record'
								     -| ['compiler_generated'] )
				    (This, 'wx_ref', 4)
				-| ['compiler_generated'] )
			  in  let <_cor5> =
				  call 'erlang':'is_integer'
				      (RectX)
			      in  let <_cor6> =
				      call 'erlang':'is_integer'
					  (RectY)
				  in  let <_cor7> =
					  call 'erlang':'is_integer'
					      (RectW)
				      in  let <_cor8> =
					      call 'erlang':'is_integer'
						  (RectH)
					  in  let <_cor9> =
						  call 'erlang':'tuple_size'
						      (InitialColour)
					      in  let <_cor10> =
						      call 'erlang':'=:='
							  (_cor9, 3)
						  in  let <_cor11> =
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'and'
												 -| ['compiler_generated'] )
								(_cor8, _cor10)
							    -| ['compiler_generated'] )
						      in  let <_cor12> =
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'and'
												     -| ['compiler_generated'] )
								    (_cor7, _cor11)
								-| ['compiler_generated'] )
							  in  let <_cor13> =
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(_cor6, _cor12)
								    -| ['compiler_generated'] )
							      in  let <_cor14> =
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_cor5, _cor13)
									-| ['compiler_generated'] )
								  in  ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_cor4, _cor14)
									-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] )
		in  let <_cor20> =
			%% Line 668
			try
			    let <_cor16> =
				call 'erlang':'tuple_size'
				    (InitialColour)
			    in  let <_cor17> =
				    call 'erlang':'=:='
					(_cor16, 4)
				in  let <_cor18> =
					call 'erlang':'tuple_size'
					    (DestColour)
				    in  let <_cor19> =
					    call 'erlang':'=:='
						(_cor18, 3)
					in  call 'erlang':'and'
						(_cor17, _cor19)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor22> =
			    %% Line 668
			    try
				let <_cor21> =
				    call 'erlang':'tuple_size'
					(DestColour)
				in  call 'erlang':'=:='
					(_cor21, 4)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor23> =
				%% Line 668
				call 'erlang':'or'
				    (_cor20, _cor22)
			    in  %% Line 668
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'or'
								       -| ['compiler_generated'] )
				      (_cor15, _cor23)
				  -| ['compiler_generated'] ) ->
	      %% Line 669
	      apply 'gradientFillLinear'/5
		  (This, Rect, InitialColour, DestColour, [])
	  ( <_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'gradientFillLinear',4}}] )
	    -| ['compiler_generated'] )
	end
'gradientFillLinear'/5 =
    %% Line 676
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor43},{RectX,RectY,RectW,RectH},InitialColour,DestColour,Options>
	      when let <_cor14> =
		    %% Line 677
		    try
			let <_cor5> =
			    call 'erlang':'is_integer'
				(RectX)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (RectY)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(RectW)
				in  let <_cor8> =
					call 'erlang':'is_integer'
					    (RectH)
				    in  let <_cor9> =
					    call 'erlang':'tuple_size'
						(InitialColour)
					in  let <_cor10> =
						call 'erlang':'=:='
						    (_cor9, 3)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor8, _cor10)
						in  let <_cor12> =
							call 'erlang':'and'
							    (_cor7, _cor11)
						    in  let <_cor13> =
							    call 'erlang':'and'
								(_cor6, _cor12)
							in  call 'erlang':'and'
								(_cor5, _cor13)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor19> =
			%% Line 677
			try
			    let <_cor15> =
				call 'erlang':'tuple_size'
				    (InitialColour)
			    in  let <_cor16> =
				    call 'erlang':'=:='
					(_cor15, 4)
				in  let <_cor17> =
					call 'erlang':'tuple_size'
					    (DestColour)
				    in  let <_cor18> =
					    call 'erlang':'=:='
						(_cor17, 3)
					in  call 'erlang':'and'
						(_cor16, _cor18)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor23> =
			    %% Line 677
			    try
				let <_cor20> =
				    call 'erlang':'tuple_size'
					(DestColour)
				in  let <_cor21> =
					call 'erlang':'=:='
					    (_cor20, 4)
				    in  let <_cor22> =
					    call 'erlang':'is_list'
						(Options)
					in  call 'erlang':'and'
						(_cor21, _cor22)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor24> =
				%% Line 677
				call 'erlang':'or'
				    (_cor19, _cor23)
			    in  %% Line 677
				call 'erlang':'or'
				    (_cor14, _cor24) ->
	      do  %% Line 678
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 679
		      ( fun (_cor29,_cor28) ->
			    case <_cor29,_cor28> of
			      <{'nDirection',NDirection},Acc> when 'true' ->
				  let <_cor27> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<NDirection>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor27|Acc]
			      %% Line 680
			      <BadOpt,_cor44> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-gradientFillLinear/5-fun-0-'}}] )
		  in  let <_cor33> =
			  %% Line 681
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 681
			      call 'erlang':'list_to_binary'
				  (_cor33)
			  in  let <_cor36> =
				  %% Line 683
				  call 'wxe_util':'colour_bin'
				      (InitialColour)
			      in  let <_cor35> =
				      %% Line 683
				      call 'wxe_util':'colour_bin'
					  (DestColour)
				  in  let <_cor37> =
					  %% Line 683
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<RectX>(32,1,'integer',['unsigned'|['native']]),
					    #<RectY>(32,1,'integer',['unsigned'|['native']]),
					    #<RectW>(32,1,'integer',['unsigned'|['native']]),
					    #<RectH>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor36>(16,8,'binary',['unsigned'|['big']]),
					    #<_cor35>(16,8,'binary',['unsigned'|['big']]),
					    #<0>(32,1,'integer',['unsigned'|['big']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 682
					  call 'wxe_util':'cast'
					      (690, _cor37)
	  ( <_cor42,_cor41,_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor42,_cor41,_cor40,_cor39,_cor38})
		  -| [{'function_name',{'gradientFillLinear',5}}] )
	    -| ['compiler_generated'] )
	end
'logicalToDeviceX'/2 =
    %% Line 688
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},X>
	      when %% Line 689
		call 'erlang':'is_integer'
		    (X) ->
	      do  %% Line 690
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 692
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 691
		      call 'wxe_util':'call'
			  (691, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'logicalToDeviceX',2}}] )
	    -| ['compiler_generated'] )
	end
'logicalToDeviceXRel'/2 =
    %% Line 697
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},X>
	      when %% Line 698
		call 'erlang':'is_integer'
		    (X) ->
	      do  %% Line 699
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 701
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 700
		      call 'wxe_util':'call'
			  (692, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'logicalToDeviceXRel',2}}] )
	    -| ['compiler_generated'] )
	end
'logicalToDeviceY'/2 =
    %% Line 706
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Y>
	      when %% Line 707
		call 'erlang':'is_integer'
		    (Y) ->
	      do  %% Line 708
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 710
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 709
		      call 'wxe_util':'call'
			  (693, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'logicalToDeviceY',2}}] )
	    -| ['compiler_generated'] )
	end
'logicalToDeviceYRel'/2 =
    %% Line 715
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Y>
	      when %% Line 716
		call 'erlang':'is_integer'
		    (Y) ->
	      do  %% Line 717
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 719
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 718
		      call 'wxe_util':'call'
			  (694, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'logicalToDeviceYRel',2}}] )
	    -| ['compiler_generated'] )
	end
'maxX'/1 =
    %% Line 724
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 725
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 727
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 726
		      call 'wxe_util':'call'
			  (695, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'maxX',1}}] )
	    -| ['compiler_generated'] )
	end
'maxY'/1 =
    %% Line 732
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 733
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 735
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 734
		      call 'wxe_util':'call'
			  (696, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'maxY',1}}] )
	    -| ['compiler_generated'] )
	end
'minX'/1 =
    %% Line 740
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 741
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 743
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 742
		      call 'wxe_util':'call'
			  (697, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'minX',1}}] )
	    -| ['compiler_generated'] )
	end
'minY'/1 =
    %% Line 748
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 749
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 751
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 750
		      call 'wxe_util':'call'
			  (698, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'minY',1}}] )
	    -| ['compiler_generated'] )
	end
'isOk'/1 =
    %% Line 756
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 757
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 759
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 758
		      call 'wxe_util':'call'
			  (699, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isOk',1}}] )
	    -| ['compiler_generated'] )
	end
'resetBoundingBox'/1 =
    %% Line 764
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 765
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 767
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 766
		      call 'wxe_util':'cast'
			  (700, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'resetBoundingBox',1}}] )
	    -| ['compiler_generated'] )
	end
'setAxisOrientation'/3 =
    %% Line 772
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},XLeftRight,YBottomUp>
	      when let <_cor3> =
		    %% Line 773
		    call 'erlang':'is_boolean'
			(XLeftRight)
		in  let <_cor4> =
			%% Line 773
			call 'erlang':'is_boolean'
			    (YBottomUp)
		    in  %% Line 773
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 774
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 776
		      call 'wxe_util':'from_bool'
			  (XLeftRight)
		  in  let <_cor7> =
			  %% Line 776
			  call 'wxe_util':'from_bool'
			      (YBottomUp)
		      in  let <_cor9> =
			      %% Line 776
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<_cor8>(32,1,'integer',['unsigned'|['native']]),
				#<_cor7>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 775
			      call 'wxe_util':'cast'
				  (701, _cor9)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'setAxisOrientation',3}}] )
	    -| ['compiler_generated'] )
	end
'setBackground'/2 =
    %% Line 781
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BrushRef,BrushT,_cor10}> when 'true' ->
	      do  %% Line 782
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 783
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BrushT,
				       'wxBrush') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BrushT:'parent_class'
				    ('wxBrush')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 785
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BrushRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 784
			  call 'wxe_util':'cast'
			      (702, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setBackground',2}}] )
	    -| ['compiler_generated'] )
	end
'setBackgroundMode'/2 =
    %% Line 790
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Mode>
	      when %% Line 791
		call 'erlang':'is_integer'
		    (Mode) ->
	      do  %% Line 792
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 794
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Mode>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 793
		      call 'wxe_util':'cast'
			  (703, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setBackgroundMode',2}}] )
	    -| ['compiler_generated'] )
	end
'setBrush'/2 =
    %% Line 799
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BrushRef,BrushT,_cor10}> when 'true' ->
	      do  %% Line 800
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 801
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BrushT,
				       'wxBrush') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BrushT:'parent_class'
				    ('wxBrush')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 803
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BrushRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 802
			  call 'wxe_util':'cast'
			      (704, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setBrush',2}}] )
	    -| ['compiler_generated'] )
	end
'setClippingRegion'/2 =
    %% Line 814
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',RegionRef,RegionT,_cor19}> when 'true' ->
	      do  %% Line 815
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 816
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (RegionT,
				       'wxRegion') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call RegionT:'parent_class'
				    ('wxRegion')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 818
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<RegionRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 817
			  call 'wxe_util':'cast'
			      (708, _cor6)
	  %% Line 819
	  <{'wx_ref',ThisRef,ThisT,_cor20},{RectX,RectY,RectW,RectH}>
	      when %% Line 820
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 821
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor15> =
		      %% Line 823
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 822
		      call 'wxe_util':'cast'
			  (707, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'setClippingRegion',2}}] )
	    -| ['compiler_generated'] )
	end
'setClippingRegion'/3 =
    %% Line 828
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},{PtX,PtY},{SzW,SzH}>
	      when %% Line 829
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (PtX)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(PtY)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (SzW)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(SzH)
				in  let <_cor7> =
					call 'erlang':'and'
					    (_cor5, _cor6)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor4, _cor7)
					in  call 'erlang':'and'
						(_cor3, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 830
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 832
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']]),
			#<SzW>(32,1,'integer',['unsigned'|['native']]),
			#<SzH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 831
		      call 'wxe_util':'cast'
			  (706, _cor11)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'setClippingRegion',3}}] )
	    -| ['compiler_generated'] )
	end
'setDeviceOrigin'/3 =
    %% Line 837
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 838
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 838
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 838
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 839
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 841
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 840
		      call 'wxe_util':'cast'
			  (709, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setDeviceOrigin',3}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/2 =
    %% Line 846
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',FontRef,FontT,_cor10}> when 'true' ->
	      do  %% Line 847
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 848
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 850
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<FontRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 849
			  call 'wxe_util':'cast'
			      (710, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setLayoutDirection'/2 =
    %% Line 856
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Dir>
	      when %% Line 857
		call 'erlang':'is_integer'
		    (Dir) ->
	      do  %% Line 858
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 860
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Dir>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 859
		      call 'wxe_util':'cast'
			  (711, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setLayoutDirection',2}}] )
	    -| ['compiler_generated'] )
	end
'setLogicalFunction'/2 =
    %% Line 866
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Function>
	      when %% Line 867
		call 'erlang':'is_integer'
		    (Function) ->
	      do  %% Line 868
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 870
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Function>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 869
		      call 'wxe_util':'cast'
			  (712, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setLogicalFunction',2}}] )
	    -| ['compiler_generated'] )
	end
'setMapMode'/2 =
    %% Line 876
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Mode>
	      when %% Line 877
		call 'erlang':'is_integer'
		    (Mode) ->
	      do  %% Line 878
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 880
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Mode>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 879
		      call 'wxe_util':'cast'
			  (713, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setMapMode',2}}] )
	    -| ['compiler_generated'] )
	end
'setPalette'/2 =
    %% Line 885
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PaletteRef,PaletteT,_cor10}> when 'true' ->
	      do  %% Line 886
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 887
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PaletteT,
				       'wxPalette') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PaletteT:'parent_class'
				    ('wxPalette')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 889
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PaletteRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 888
			  call 'wxe_util':'cast'
			      (714, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setPalette',2}}] )
	    -| ['compiler_generated'] )
	end
'setPen'/2 =
    %% Line 894
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PenRef,PenT,_cor10}> when 'true' ->
	      do  %% Line 895
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 896
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PenT,
				       'wxPen') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PenT:'parent_class'
				    ('wxPen')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 898
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PenRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 897
			  call 'wxe_util':'cast'
			      (715, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setPen',2}}] )
	    -| ['compiler_generated'] )
	end
'setTextBackground'/2 =
    %% Line 903
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 904
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 904
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 904
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 905
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 907
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 907
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 906
			  call 'wxe_util':'cast'
			      (716, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setTextBackground',2}}] )
	    -| ['compiler_generated'] )
	end
'setTextForeground'/2 =
    %% Line 912
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 913
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 913
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 913
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 914
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 916
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 916
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 915
			  call 'wxe_util':'cast'
			      (717, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setTextForeground',2}}] )
	    -| ['compiler_generated'] )
	end
'setUserScale'/3 =
    %% Line 921
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 922
		    call 'erlang':'is_number'
			(X)
		in  let <_cor4> =
			%% Line 922
			call 'erlang':'is_number'
			    (Y)
		    in  %% Line 922
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 923
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 925
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 924
		      call 'wxe_util':'cast'
			  (718, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setUserScale',3}}] )
	    -| ['compiler_generated'] )
	end
'startDoc'/2 =
    %% Line 930
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Message>
	      when %% Line 931
		call 'erlang':'is_list'
		    (Message) ->
	      do  %% Line 932
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Message_UC> =
		      %% Line 933
		      call 'unicode':'characters_to_binary'
			  ([Message|[0]])
		  in  let <_cor10> =
			  %% Line 935
			  call 'erlang':'byte_size'
			      (Message_UC)
		      in  let <_cor5> =
			      %% Line 935
			      call 'erlang':'byte_size'
				  (Message_UC)
			  in  let <_cor6> =
				  %% Line 935
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 935
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 935
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 935
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 935
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Message_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 934
						  call 'wxe_util':'call'
						      (719, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'startDoc',2}}] )
	    -| ['compiler_generated'] )
	end
'startPage'/1 =
    %% Line 940
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 941
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 943
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 942
		      call 'wxe_util':'cast'
			  (720, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'startPage',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxDC')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxDC', _cor0)
end