module 'wxTextAttr' ['destroy'/1,
		     'getAlignment'/1,
		     'getBackgroundColour'/1,
		     'getFlags'/1,
		     'getFont'/1,
		     'getLeftIndent'/1,
		     'getLeftSubIndent'/1,
		     'getRightIndent'/1,
		     'getTabs'/1,
		     'getTextColour'/1,
		     'hasBackgroundColour'/1,
		     'hasFont'/1,
		     'hasTextColour'/1,
		     'isDefault'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'new'/0,
		     'new'/1,
		     'new'/2,
		     'parent_class'/1,
		     'setAlignment'/2,
		     'setBackgroundColour'/2,
		     'setFlags'/2,
		     'setFont'/2,
		     'setFont'/3,
		     'setLeftIndent'/2,
		     'setLeftIndent'/3,
		     'setRightIndent'/2,
		     'setTabs'/2,
		     'setTextColour'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 37
		'export_type' =
		    %% Line 37
		    [{'wxTextAttr',0}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'wxTextAttr',{'remote_type',41,[{'atom',41,'wx'}|[{'atom',41,'wx_object'}|[[]]]]},[]}],
		%% Line 43
		'spec' =
		    %% Line 43
		    [{{'new',0},[{'type',43,'fun',[{'type',43,'product',[]}|[{'type',43,'wxTextAttr',[]}]]}]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'new',1},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[{'var',49,'ColText'}]}|[{'type',49,'wxTextAttr',[]}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'ColText'}|[{'remote_type',50,[{'atom',50,'wx'}|[{'atom',50,'wx_colour'}|[[]]]]}]]]]}]]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'new',2},[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'ColText'}|[{'type',58,'list',[{'var',58,'Option'}]}]]}|[{'type',58,'wxTextAttr',[]}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'ColText'}|[{'remote_type',59,[{'atom',59,'wx'}|[{'atom',59,'wx_colour'}|[[]]]]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Option'}|[{'type',60,'union',[{'type',60,'tuple',[{'atom',60,'colBack'}|[{'remote_type',60,[{'atom',60,'wx'}|[{'atom',60,'wx_colour'}|[[]]]]}]]}|[{'type',61,'tuple',[{'atom',61,'font'}|[{'remote_type',61,[{'atom',61,'wxFont'}|[{'atom',61,'wxFont'}|[[]]]]}]]}|[{'type',62,'tuple',[{'atom',62,'alignment'}|[{'remote_type',62,[{'atom',62,'wx'}|[{'atom',62,'wx_enum'}|[[]]]]}]]}]]]}]]]]}]]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'getAlignment',1},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'This'}]}|[{'remote_type',75,[{'atom',75,'wx'}|[{'atom',75,'wx_enum'}|[[]]]]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'This'}|[{'type',76,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'getBackgroundColour',1},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'This'}]}|[{'remote_type',83,[{'atom',83,'wx'}|[{'atom',83,'wx_colour4'}|[[]]]]}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'This'}|[{'type',84,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'getFont',1},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'This'}]}|[{'remote_type',91,[{'atom',91,'wxFont'}|[{'atom',91,'wxFont'}|[[]]]]}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'This'}|[{'type',92,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'getLeftIndent',1},[{'type',99,'bounded_fun',[{'type',99,'fun',[{'type',99,'product',[{'var',99,'This'}]}|[{'type',99,'integer',[]}]]}|[[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'This'}|[{'type',100,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'getLeftSubIndent',1},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'This'}]}|[{'type',107,'integer',[]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'This'}|[{'type',108,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'getRightIndent',1},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'This'}]}|[{'type',115,'integer',[]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'This'}|[{'type',116,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'getTabs',1},[{'type',123,'bounded_fun',[{'type',123,'fun',[{'type',123,'product',[{'var',123,'This'}]}|[{'type',123,'list',[{'type',123,'integer',[]}]}]]}|[[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'This'}|[{'type',124,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'getTextColour',1},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'This'}]}|[{'remote_type',131,[{'atom',131,'wx'}|[{'atom',131,'wx_colour4'}|[[]]]]}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'This'}|[{'type',132,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 139
		'spec' =
		    %% Line 139
		    [{{'hasBackgroundColour',1},[{'type',139,'bounded_fun',[{'type',139,'fun',[{'type',139,'product',[{'var',139,'This'}]}|[{'type',139,'boolean',[]}]]}|[[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'This'}|[{'type',140,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'hasFont',1},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'This'}]}|[{'type',147,'boolean',[]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'This'}|[{'type',148,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 155
		'spec' =
		    %% Line 155
		    [{{'hasTextColour',1},[{'type',155,'bounded_fun',[{'type',155,'fun',[{'type',155,'product',[{'var',155,'This'}]}|[{'type',155,'boolean',[]}]]}|[[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'This'}|[{'type',156,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'getFlags',1},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'This'}]}|[{'type',163,'integer',[]}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'This'}|[{'type',164,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'isDefault',1},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'This'}]}|[{'type',171,'boolean',[]}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'This'}|[{'type',172,'wxTextAttr',[]}]]]]}]]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'setAlignment',2},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'This'}|[{'var',180,'Alignment'}]]}|[{'atom',180,'ok'}]]}|[[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'This'}|[{'type',181,'wxTextAttr',[]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Alignment'}|[{'remote_type',181,[{'atom',181,'wx'}|[{'atom',181,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'setBackgroundColour',2},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'This'}|[{'var',189,'ColBack'}]]}|[{'atom',189,'ok'}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'This'}|[{'type',190,'wxTextAttr',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'ColBack'}|[{'remote_type',190,[{'atom',190,'wx'}|[{'atom',190,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'setFlags',2},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'This'}|[{'var',198,'Flags'}]]}|[{'atom',198,'ok'}]]}|[[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'This'}|[{'type',199,'wxTextAttr',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Flags'}|[{'type',199,'integer',[]}]]]]}]]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'setFont',2},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'This'}|[{'var',207,'Font'}]]}|[{'atom',207,'ok'}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'This'}|[{'type',208,'wxTextAttr',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Font'}|[{'remote_type',208,[{'atom',208,'wxFont'}|[{'atom',208,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'setFont',3},[{'type',215,'bounded_fun',[{'type',215,'fun',[{'type',215,'product',[{'var',215,'This'}|[{'var',215,'Font'}|[{'type',215,'list',[{'var',215,'Option'}]}]]]}|[{'atom',215,'ok'}]]}|[[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'This'}|[{'type',216,'wxTextAttr',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Font'}|[{'remote_type',216,[{'atom',216,'wxFont'}|[{'atom',216,'wxFont'}|[[]]]]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Option'}|[{'type',217,'tuple',[{'atom',217,'flags'}|[{'type',217,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'setLeftIndent',2},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'This'}|[{'var',229,'Indent'}]]}|[{'atom',229,'ok'}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'This'}|[{'type',230,'wxTextAttr',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Indent'}|[{'type',230,'integer',[]}]]]]}]]]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'setLeftIndent',3},[{'type',237,'bounded_fun',[{'type',237,'fun',[{'type',237,'product',[{'var',237,'This'}|[{'var',237,'Indent'}|[{'type',237,'list',[{'var',237,'Option'}]}]]]}|[{'atom',237,'ok'}]]}|[[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'This'}|[{'type',238,'wxTextAttr',[]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Indent'}|[{'type',238,'integer',[]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Option'}|[{'type',239,'tuple',[{'atom',239,'subIndent'}|[{'type',239,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 250
		'spec' =
		    %% Line 250
		    [{{'setRightIndent',2},[{'type',250,'bounded_fun',[{'type',250,'fun',[{'type',250,'product',[{'var',250,'This'}|[{'var',250,'Indent'}]]}|[{'atom',250,'ok'}]]}|[[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'This'}|[{'type',251,'wxTextAttr',[]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'Indent'}|[{'type',251,'integer',[]}]]]]}]]]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'setTabs',2},[{'type',259,'bounded_fun',[{'type',259,'fun',[{'type',259,'product',[{'var',259,'This'}|[{'var',259,'Tabs'}]]}|[{'atom',259,'ok'}]]}|[[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'This'}|[{'type',260,'wxTextAttr',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Tabs'}|[{'type',260,'list',[{'type',260,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 269
		'spec' =
		    %% Line 269
		    [{{'setTextColour',2},[{'type',269,'bounded_fun',[{'type',269,'fun',[{'type',269,'product',[{'var',269,'This'}|[{'var',269,'ColText'}]]}|[{'atom',269,'ok'}]]}|[[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'This'}|[{'type',270,'wxTextAttr',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'ColText'}|[{'remote_type',270,[{'atom',270,'wx'}|[{'atom',270,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 278
		'spec' =
		    %% Line 278
		    [{{'destroy',1},[{'type',278,'fun',[{'type',278,'product',[{'ann_type',278,[{'var',278,'This'}|[{'type',278,'wxTextAttr',[]}]]}]}|[{'atom',278,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 39
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxTextAttr'})
'new'/0 =
    %% Line 44
    fun () ->
	%% Line 45
	call 'wxe_util':'construct'
	    (1787, %% Line 46
		   #{}#)
'new'/1 =
    %% Line 52
    fun (_cor0) ->
	case _cor0 of
	  <ColText>
	      when let <_cor2> =
		    %% Line 53
		    try
			let <_cor1> =
			    call 'erlang':'tuple_size'
				(_cor0)
			in  call 'erlang':'=:='
				(_cor1, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor4> =
			%% Line 53
			try
			    let <_cor3> =
				call 'erlang':'tuple_size'
				    (_cor0)
			    in  call 'erlang':'=:='
				    (_cor3, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 53
			call 'erlang':'or'
			    (_cor2, _cor4) ->
	      %% Line 54
	      apply 'new'/2
		  (ColText, [])
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ColText,Options>
	      when let <_cor3> =
		    %% Line 64
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(ColText)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor7> =
			%% Line 64
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (ColText)
			    in  let <_cor5> =
				    call 'erlang':'=:='
					(_cor4, 4)
				in  let <_cor6> =
					call 'erlang':'is_list'
					    (Options)
				    in  call 'erlang':'and'
					    (_cor5, _cor6)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 64
			call 'erlang':'or'
			    (_cor3, _cor7) ->
	      let <MOpts> =
		  %% Line 65
		  ( fun (_cor15,_cor14) ->
			case <_cor15,_cor14> of
			  <{'colBack',ColBack},Acc> when 'true' ->
			      let <_cor8> =
				  call 'wxe_util':'colour_bin'
				      (ColBack)
			      in  let <_cor9> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<_cor8>(16,8,'binary',['unsigned'|['big']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor9|Acc]
			  %% Line 66
			  <{'font',{'wx_ref',FontRef,FontT,_cor25}},Acc> when 'true' ->
			      do  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (FontT,
						   'wxFont') ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    call FontT:'parent_class'
						('wxFont')
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor12> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<FontRef>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			  %% Line 67
			  <{'alignment',Alignment},Acc> when 'true' ->
			      let <_cor13> =
				  #{#<3>(32,1,'integer',['unsigned'|['native']]),
				    #<Alignment>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor13|Acc]
			  %% Line 68
			  <BadOpt,_cor26> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/2-fun-0-'}}] )
	      in  let <_cor19> =
		      %% Line 69
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 69
			  call 'erlang':'list_to_binary'
			      (_cor19)
		      in  let <_cor21> =
			      %% Line 71
			      call 'wxe_util':'colour_bin'
				  (ColText)
			  in  let <_cor22> =
				  %% Line 71
				  #{#<_cor21>(16,8,'binary',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 70
				  call 'wxe_util':'construct'
				      (1788, _cor22)
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'getAlignment'/1 =
    %% Line 77
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 78
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 80
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 79
		      call 'wxe_util':'call'
			  (1789, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getAlignment',1}}] )
	    -| ['compiler_generated'] )
	end
'getBackgroundColour'/1 =
    %% Line 85
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 86
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 88
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 87
		      call 'wxe_util':'call'
			  (1790, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getFont'/1 =
    %% Line 93
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 94
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 96
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 95
		      call 'wxe_util':'call'
			  (1791, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFont',1}}] )
	    -| ['compiler_generated'] )
	end
'getLeftIndent'/1 =
    %% Line 101
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 102
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 104
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 103
		      call 'wxe_util':'call'
			  (1792, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLeftIndent',1}}] )
	    -| ['compiler_generated'] )
	end
'getLeftSubIndent'/1 =
    %% Line 109
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 110
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 112
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 111
		      call 'wxe_util':'call'
			  (1793, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLeftSubIndent',1}}] )
	    -| ['compiler_generated'] )
	end
'getRightIndent'/1 =
    %% Line 117
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 118
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 120
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 119
		      call 'wxe_util':'call'
			  (1794, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getRightIndent',1}}] )
	    -| ['compiler_generated'] )
	end
'getTabs'/1 =
    %% Line 125
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 126
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 128
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 127
		      call 'wxe_util':'call'
			  (1795, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTabs',1}}] )
	    -| ['compiler_generated'] )
	end
'getTextColour'/1 =
    %% Line 133
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 134
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 136
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 135
		      call 'wxe_util':'call'
			  (1796, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'hasBackgroundColour'/1 =
    %% Line 141
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 142
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 144
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 143
		      call 'wxe_util':'call'
			  (1797, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'hasFont'/1 =
    %% Line 149
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 150
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 152
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 151
		      call 'wxe_util':'call'
			  (1798, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasFont',1}}] )
	    -| ['compiler_generated'] )
	end
'hasTextColour'/1 =
    %% Line 157
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 158
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 160
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 159
		      call 'wxe_util':'call'
			  (1799, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getFlags'/1 =
    %% Line 165
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 166
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 168
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 167
		      call 'wxe_util':'call'
			  (1800, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFlags',1}}] )
	    -| ['compiler_generated'] )
	end
'isDefault'/1 =
    %% Line 173
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 174
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 176
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 175
		      call 'wxe_util':'call'
			  (1801, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isDefault',1}}] )
	    -| ['compiler_generated'] )
	end
'setAlignment'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Alignment>
	      when %% Line 183
		call 'erlang':'is_integer'
		    (Alignment) ->
	      do  %% Line 184
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 186
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Alignment>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 185
		      call 'wxe_util':'cast'
			  (1802, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setAlignment',2}}] )
	    -| ['compiler_generated'] )
	end
'setBackgroundColour'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},ColBack>
	      when let <_cor3> =
		    %% Line 192
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(ColBack)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 192
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (ColBack)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 192
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 193
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 195
		      call 'wxe_util':'colour_bin'
			  (ColBack)
		  in  let <_cor9> =
			  %% Line 195
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 194
			  call 'wxe_util':'cast'
			      (1803, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setFlags'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Flags>
	      when %% Line 201
		call 'erlang':'is_integer'
		    (Flags) ->
	      do  %% Line 202
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 204
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Flags>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 203
		      call 'wxe_util':'cast'
			  (1804, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setFlags',2}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Font = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 212
	      apply 'setFont'/3
		  (This, Font, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'setFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',FontRef,FontT,_cor20},Options>
	      when %% Line 219
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 220
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 221
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 222
			  ( fun (_cor9,_cor8) ->
				case <_cor9,_cor8> of
				  <{'flags',Flags},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Flags>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
				  %% Line 223
				  <BadOpt,_cor21> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setFont/3-fun-0-'}}] )
		      in  let <_cor13> =
			      %% Line 224
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 224
				  call 'erlang':'list_to_binary'
				      (_cor13)
			      in  let <_cor15> =
				      %% Line 226
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<FontRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 225
				      call 'wxe_util':'cast'
					  (1805, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'setFont',3}}] )
	    -| ['compiler_generated'] )
	end
'setLeftIndent'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Indent>
	      when %% Line 233
		call 'erlang':'is_integer'
		    (Indent) ->
	      %% Line 234
	      apply 'setLeftIndent'/3
		  (This, Indent, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setLeftIndent',2}}] )
	    -| ['compiler_generated'] )
	end
'setLeftIndent'/3 =
    %% Line 240
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Indent,Options>
	      when let <_cor3> =
		    %% Line 241
		    call 'erlang':'is_integer'
			(Indent)
		in  let <_cor4> =
			%% Line 241
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 241
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 242
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 243
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'subIndent',SubIndent},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<SubIndent>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 244
			      <BadOpt,_cor20> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setLeftIndent/3-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 245
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 245
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 247
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Indent>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 246
				  call 'wxe_util':'cast'
				      (1806, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'setLeftIndent',3}}] )
	    -| ['compiler_generated'] )
	end
'setRightIndent'/2 =
    %% Line 252
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Indent>
	      when %% Line 253
		call 'erlang':'is_integer'
		    (Indent) ->
	      do  %% Line 254
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 256
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Indent>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 255
		      call 'wxe_util':'cast'
			  (1807, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setRightIndent',2}}] )
	    -| ['compiler_generated'] )
	end
'setTabs'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Tabs>
	      when %% Line 262
		call 'erlang':'is_list'
		    (Tabs) ->
	      do  %% Line 263
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 265
		      call 'erlang':'length'
			  (Tabs)
		  in  let <_cor10> =
			  %% Line 266
			  call 'erlang':'length'
			      (Tabs)
		      in  let <_cor9> =
			      call 'erlang':'*'
				  (_cor10, 4)
			  in  let <_cor8> =
				  primop 'bs_init_writable'
				      (_cor9)
			      in  let <_cor15> =
				      %% Line 266
				      ( letrec
					    'lbc$^0'/2 =
						fun (_cor14,_cor13) ->
						    case <_cor14,_cor13> of
						      <[C|_cor12],_cor13> when 'true' ->
							  let <_cor13> =
							      ( #{#<_cor13>('all',1,'binary',[]),
								  #<C>(32,1,'integer',['signed'|['native']])}#
								-| ['compiler_generated','single_use'] )
							  in  apply 'lbc$^0'/2
								  (_cor12, _cor13)
						      <[],_cor13> when 'true' ->
							  _cor13
						      ( <_cor14,_cor13> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor14,_cor13})
							      -| [{'function_name',{'lbc$^0',2}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lbc$^0'/2
						(Tabs, _cor8)
					-| ['list_comprehension'] )
				  in  let <_cor4> =
					  %% Line 266
					  call 'erlang':'length'
					      (Tabs)
				      in  let <_cor5> =
					      %% Line 266
					      call 'erlang':'+'
						  (0, _cor4)
					  in  let <_cor6> =
						  %% Line 266
						  call 'erlang':'rem'
						      (_cor5, 2)
					      in  let <_cor7> =
						      %% Line 266
						      call 'erlang':'*'
							  (_cor6, 32)
						  in  let <_cor17> =
							  %% Line 265
							  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor15>(%% Line 266
								      'all',8,'binary',['unsigned'|['big']]),
							    #<%% Line 266
							      0>(_cor7,1,'integer',['unsigned'|['big']])}#
						      in  %% Line 264
							  call 'wxe_util':'cast'
							      (1808, _cor17)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'setTabs',2}}] )
	    -| ['compiler_generated'] )
	end
'setTextColour'/2 =
    %% Line 271
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},ColText>
	      when let <_cor3> =
		    %% Line 272
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(ColText)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 272
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (ColText)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 272
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 273
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 275
		      call 'wxe_util':'colour_bin'
			  (ColText)
		  in  let <_cor9> =
			  %% Line 275
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 274
			  call 'wxe_util':'cast'
			      (1809, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 279
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 280
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxTextAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxTextAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 281
		      call 'wxe_util':'destroy'
			  (1810, Obj)
		      %% Line 282
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxTextAttr')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxTextAttr', _cor0)
end