module 'sudoku_game' ['add'/3,
		      'all'/1,
		      'all'/3,
		      'c2cs'/1,
		      'check_must'/1,
		      'check_must2'/6,
		      'check_must3'/5,
		      'create_games'/2,
		      'delete'/3,
		      'empty_table'/1,
		      'find_game'/2,
		      'find_game2'/3,
		      'gen_loop'/3,
		      'get_known'/1,
		      'get_nots'/3,
		      'get_poss'/3,
		      'indx'/1,
		      'indx'/2,
		      'init'/1,
		      'is_ok'/2,
		      'level'/1,
		      'levels'/0,
		      'loop'/1,
		      'mat'/2,
		      'mindx'/2,
		      'module_info'/0,
		      'module_info'/1,
		      'new_game'/1,
		      'new_game'/6,
		      'other_mats'/1,
		      'pick_shown'/3,
		      'pick_shown'/5,
		      'poss'/2,
		      'r2rs'/1,
		      'rc_in_mat'/1,
		      'rcm'/1,
		      'rebuild_all'/2,
		      'solve'/2,
		      'solve'/6,
		      'solve_1'/3,
		      'solve_2'/3,
		      'test'/0,
		      'update_must'/4,
		      'validate'/4]
    attributes [%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 21
		'type' =
		    %% Line 21
		    [{{'record','s'},[{'record_field',21,{'atom',21,'gfx'}}|[{'record_field',21,{'atom',21,'gen'}}|[{'record_field',21,{'atom',21,'games'},{'nil',21}}|[{'record_field',21,{'atom',21,'p'}}|[{'record_field',21,{'atom',21,'m'}}|[{'record_field',21,{'atom',21,'mr'}}|[{'record_field',21,{'atom',21,'mc'}}|[{'record_field',21,{'atom',21,'v'}}]]]]]]]],[]}]]
'init'/1 =
    %% Line 23
    fun (_cor0) ->
	let <Empty> =
	    %% Line 24
	    apply 'empty_table'/1
		({'s','undefined','undefined',[],'undefined','undefined','undefined','undefined','undefined'})
	in  let <Add> =
		%% Line 25
		( fun (_cor4,_cor3) ->
		      case <_cor4,_cor3> of
			<{Butt,Val},SN> when 'true' ->
			    let <_cor2> =
				%% Line 26
				apply 'rcm'/1
				    (Butt)
			    in  %% Line 26
				apply 'validate'/4
				    (_cor2, Val, 'false', SN)
			( <_cor6,_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6,_cor5})
				-| [{'function_name',{'-init/1-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-init/1-fun-0-'}}] )
	    in  let <Game> =
		    %% Line 29
		    apply 'test'/0
			()
		in  do  %% Line 30
			call 'erlang':'!'
			    (_cor0, {'init',Game})
			let <Self> =
			    %% Line 31
			    call 'erlang':'self'
				()
			in  let <_cor11> =
				%% Line 32
				( fun () ->
				      let <_cor10> =
					  apply 'levels'/0
					      ()
				      in  apply 'create_games'/2
					      (_cor10, Self)
				  -| [{'id',{0,0,'-init/1-fun-1-'}}] )
			    in  let <Gen> =
				    %% Line 32
				    call 'erlang':'spawn_opt'
					(_cor11, %% Line 33
						 ['link'|[{'priority','low'}]])
				in  %% Line 34
				    case Empty of
				      <{'s',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
					  let <_cor14> =
					      call 'erlang':'setelement'
						  (3, Empty, Gen)
					  in  let <_cor16> =
						  call 'erlang':'setelement'
						      (2, _cor14, _cor0)
					      in  let <_cor17> =
						      call 'lists':'foldl'
							  (Add, _cor16, Game)
						  in  apply 'loop'/1
							  (_cor17)
				      ( <_cor27> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','s'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
'empty_table'/1 =
    %% Line 38
    fun (_cor0) ->
	let <Nine> =
	    %% Line 39
	    call 'lists':'seq'
		(1, 9)
	in  let <D> =
		%% Line 40
		call 'gb_sets':'from_ordset'
		    (Nine)
	    in  let <_cor7> =
		    %% Line 41
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor5) ->
				  case _cor5 of
				    <[_cor37|_cor4]> when 'true' ->
					let <_cor6> =
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [D|_cor6]
					      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor5> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor5})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Nine)
		      -| ['list_comprehension'] )
		in  let <Mat> =
			%% Line 41
			call 'erlang':'list_to_tuple'
			    (_cor7)
		    in  let <_cor15> =
			    %% Line 42
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor13) ->
					  case _cor13 of
					    <[_cor38|_cor10]> when 'true' ->
						let <_cor14> =
						    apply 'lc$^1'/1
							(_cor10)
						in  ( [D|_cor14]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor13> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor12> =
				      call 'lists':'seq'
					  (1, 81)
				  in  apply 'lc$^1'/1
					  (_cor12)
			      -| ['list_comprehension'] )
			in  let <Poss> =
				%% Line 42
				call 'erlang':'list_to_tuple'
				    (_cor15)
			    in  let <_cor23> =
				    %% Line 43
				    ( letrec
					  'lc$^2'/1 =
					      fun (_cor21) ->
						  case _cor21 of
						    <[_cor39|_cor18]> when 'true' ->
							let <_cor22> =
							    apply 'lc$^2'/1
								(_cor18)
							in  ( [0|_cor22]
							      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor21> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor21})
							    -| [{'function_name',{'lc$^2',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor20> =
					      call 'lists':'seq'
						  (1, 81)
					  in  apply 'lc$^2'/1
						  (_cor20)
				      -| ['list_comprehension'] )
				in  let <Vals> =
					%% Line 43
					call 'erlang':'list_to_tuple'
					    (_cor23)
				    in  let <_cor32> =
					    %% Line 44
					    ( letrec
						  'lc$^3'/1 =
						      fun (_cor29) ->
							  case _cor29 of
							    <[_cor40|_cor26]> when 'true' ->
								let <_cor30> =
								    call 'gb_sets':'empty'
									()
								in  let <_cor31> =
									apply 'lc$^3'/1
									    (_cor26)
								    in  ( [_cor30|_cor31]
									  -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor29> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor29})
								    -| [{'function_name',{'lc$^3',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  let <_cor28> =
						      call 'lists':'seq'
							  (1, 27)
						  in  apply 'lc$^3'/1
							  (_cor28)
					      -| ['list_comprehension'] )
					in  let <Must> =
						%% Line 44
						call 'erlang':'list_to_tuple'
						    (_cor32)
					    in  %% Line 45
						case _cor0 of
						  <{'s',_rec2,_rec3,_rec4,_rec5,_rec6,_rec7,_rec8,_rec9}> when 'true' ->
						      {'s',_rec2,_rec3,_rec4,Poss,Mat,Must,Must,Vals}
						  ( <_cor41> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','s'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
'loop'/1 =
    %% Line 47
    fun (_cor0) ->
	case _cor0 of
	  <S0 = {'s',Gfx,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,Vs}> when 'true' ->
	      %% Line 48
	      receive
		%% Line 49
		<'quit'> when 'true' ->
		    %% Line 50
		    'halt'
		%% Line 51
		<{'EXIT',_cor60,Reason}>
		    when call 'erlang':'=:='
			  (_cor60,
			   Gfx) ->
		    %% Line 52
		    call 'io':'format'
			([84|[104|[101|[32|[71|[85|[73|[32|[99|[114|[97|[115|[104|[101|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
		%% Line 53
		<{'validate',Butt,Val}> when 'true' ->
		    let <Ix> =
			%% Line 54
			apply 'indx'/1
			    (Butt)
		    in  %% Line 55
			case call 'erlang':'element'
				 (Ix, Vs) of
			  %% Line 56
			  <_cor61>
			      when call 'erlang':'=:='
				    (_cor61,
				     Val) ->
			      apply 'loop'/1
				  (S0)
			  %% Line 57
			  <0> when 'true' ->
			      let <_cor2> =
				  %% Line 58
				  apply 'rcm'/1
				      (Butt)
			      in  let <S> =
				      %% Line 58
				      apply 'validate'/4
					  (_cor2, Val, 'true', S0)
				  in  %% Line 59
				      apply 'loop'/1
					  (S)
			  %% Line 60
			  <_cor62> when 'true' ->
			      let <_rec10> =
				  %% Line 61
				  call 'erlang':'setelement'
				      (Ix, Vs, 0)
			      in  let <_cor7> =
				      %% Line 61
				      call 'erlang':'setelement'
					  (9, S0, _rec10)
				  in  let <_cor9> =
					  %% Line 62
					  apply 'rcm'/1
					      (Butt)
				      in  let <S2> =
					      %% Line 62
					      apply 'rebuild_all'/2
						  (_cor9, _cor7)
					  in  let <_cor11> =
						  %% Line 63
						  apply 'rcm'/1
						      (Butt)
					      in  let <S> =
						      %% Line 63
						      apply 'validate'/4
							  (_cor11, Val, 'true', S2)
						  in  %% Line 64
						      apply 'loop'/1
							  (S)
			end
		%% Line 66
		<{'loaded',Game}> when 'true' ->
		    let <S1> =
			%% Line 67
			apply 'empty_table'/1
			    (S0)
		    in  let <Add> =
			    %% Line 68
			    ( fun (_cor17,_cor16) ->
				  case <_cor17,_cor16> of
				    <{Butt,Val},SN> when 'true' ->
					let <_cor15> =
					    %% Line 69
					    apply 'rcm'/1
						(Butt)
					in  %% Line 69
					    apply 'validate'/4
						(_cor15, Val, 'true', SN)
				    ( <_cor19,_cor18> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor19,_cor18})
					    -| [{'function_name',{'-loop/1-fun-0-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-loop/1-fun-0-'}}] )
			in  let <_cor21> =
				%% Line 71
				call 'lists':'foldl'
				    (Add, S1, Game)
			    in  %% Line 71
				apply 'loop'/1
				    (_cor21)
		%% Line 72
		<{'op',122}> when 'true' ->
		    let <_cor22> =
			%% Line 73
			apply 'empty_table'/1
			    (S0)
		    in  %% Line 73
			apply 'loop'/1
			    (_cor22)
		%% Line 74
		<{'op',121,Level}> when 'true' ->
		    let <_cor105,Game,S1> =
			%% Line 75
			case apply 'find_game'/2
				 (Level, S0) of
			  %% Line 76
			  <{Game,S1}> when 'true' ->
			      do  %% Line 77
				  call 'erlang':'!'
				      (_cor54, {'gen_game',Level})
				  do  %% Line 78
				      call 'erlang':'!'
					  (Gfx, {'busy','start'})
				      %% Line 79
				      <call 'erlang':'!'
					   (Gfx, {'init',Game}),Game,S1>
			  %% Line 80
			  <'false'> when 'true' ->
			      do  %% Line 82
				  call 'erlang':'!'
				      (Gfx, {'busy','start'})
				  let <Temp> =
				      %% Line 83
				      apply 'new_game'/1
					  (S0)
				  in  let <Game> =
					  %% Line 84
					  apply 'pick_shown'/3
					      (Temp, Level, Gfx)
				      in  do  %% Line 85
					      call 'erlang':'!'
						  (_cor54, {'gen_game',Level})
					      %% Line 86
					      <Game,Game,S0>
			  ( <_cor30> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor30})
			    -| ['compiler_generated'] )
			end
		    in  let <S2> =
			    %% Line 88
			    apply 'empty_table'/1
				(S1)
			in  let <Add> =
				%% Line 89
				( fun (_cor34,_cor33) ->
				      case <_cor34,_cor33> of
					<{Butt,Val},SN> when 'true' ->
					    let <_cor32> =
						%% Line 90
						apply 'rcm'/1
						    (Butt)
					    in  %% Line 90
						apply 'validate'/4
						    (_cor32, Val, 'false', SN)
					( <_cor36,_cor35> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor36,_cor35})
						-| [{'function_name',{'-loop/1-fun-1-',2}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-loop/1-fun-1-'}}] )
			    in  do  %% Line 92
				    call 'erlang':'!'
					(Gfx, {'init',Game})
				    do  %% Line 93
					call 'erlang':'!'
					    (Gfx, {'busy','stop'})
					let <_cor38> =
					    %% Line 94
					    call 'lists':'foldl'
						(Add, S2, Game)
					in  %% Line 94
					    apply 'loop'/1
						(_cor38)
		%% Line 95
		<{'solve',All}> when 'true' ->
		    let <Res> =
			%% Line 96
			apply 'solve'/2
			    (S0, All)
		    in  do  %% Line 97
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor43) ->
					  case _cor43 of
					    <[{Ind,Val}|_cor41]> when 'true' ->
						do  call 'erlang':'!'
							(Gfx, {'set_val',Ind,Val})
						    apply 'lc$^0'/1
							(_cor41)
					    ( <[_cor40|_cor41]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor41)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor43> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor43})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor42> =
				      call 'erlang':'element'
					  (2, Res)
				  in  apply 'lc$^0'/1
					  (_cor42)
			      -| ['list_comprehension'] )
			    %% Line 98
			    apply 'loop'/1
				(S0)
		%% Line 99
		<{'get_game',Pid}> when 'true' ->
		    let <_cor46> =
			%% Line 100
			apply 'get_known'/1
			    (S0)
		    in  do  %% Line 100
			    call 'erlang':'!'
				(Pid, {'game',_cor46})
			    %% Line 101
			    apply 'loop'/1
				(S0)
		%% Line 102
		<{'game',Game}> when 'true' ->
		    let <_rec14> =
			%% Line 103
			[Game|_cor55]
		    in  let <_cor52> =
			    %% Line 103
			    call 'erlang':'setelement'
				(4, S0, _rec14)
			in  %% Line 103
			    apply 'loop'/1
				(_cor52)
		%% Line 104
		<CMD> when 'true' ->
		    do  %% Line 105
			call 'io':'format'
			    ([71|[97|[109|[101|[32|[108|[111|[111|[112|[32|[103|[111|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]], [CMD|[]])
			%% Line 106
			call 'sudoku_game':'loop'
			    (S0)
	      after 'infinity' ->
		'true'
	  ( <_cor53> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor53})
		  -| [{'function_name',{'loop',1}}] )
	    -| ['compiler_generated'] )
	end
'validate'/4 =
    %% Line 109
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{R,C,_X_M},0,Send,St = {'s',Gfx,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      do  %% Line 110
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Send,
			       'true') ->
			call 'erlang':'!'
			    (Gfx, {'correct',{R,C}})
		    <> when 'true' ->
			'ok'
		  end
		  %% Line 111
		  St
	  %% Line 112
	  <RCM = {R,C,_X_M},Val,Send,St = {'s',Gfx,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,Vs}> when 'true' ->
	      let <S> =
		  %% Line 113
		  apply 'poss'/2
		      (RCM, St)
	      in  %% Line 114
		  case call 'gb_sets':'is_member'
			   (Val, S) of
		    %% Line 115
		    <'true'> when 'true' ->
			do  %% Line 116
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Send,
					 'true') ->
				  call 'erlang':'!'
				      (Gfx, {'correct',{R,C}})
			      <> when 'true' ->
				  'ok'
			    end
			    %% Line 117
			    apply 'add'/3
				(RCM, Val, St)
		    %% Line 118
		    <'false'> when 'true' ->
			do  %% Line 119
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Send,
					 'true') ->
				  call 'erlang':'!'
				      (Gfx, {'wrong',{R,C}})
			      <> when 'true' ->
				  'ok'
			    end
			    let <_cor5> =
				%% Line 120
				apply 'indx'/2
				    (R, C)
			    in  let <_rec17> =
				    %% Line 120
				    call 'erlang':'setelement'
					(_cor5, Vs, Val)
				in  %% Line 120
				    call 'erlang':'setelement'
					(9, St, _rec17)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'validate',4}}] )
	    -| ['compiler_generated'] )
	end
'rebuild_all'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	let <Solved> =
	    %% Line 124
	    apply 'get_known'/1
		(_cor0)
	in  let <S1> =
		%% Line 125
		apply 'empty_table'/1
		    (_cor0)
	    in  let <_cor9> =
		    %% Line 126
		    ( fun (_cor6,_cor5) ->
			  case <_cor6,_cor5> of
			    <{Indx,Val},Acc> when 'true' ->
				let <_cor4> =
				    %% Line 127
				    apply 'rcm'/1
					(Indx)
				in  %% Line 127
				    apply 'add'/3
					(_cor4, Val, Acc)
			    ( <_cor8,_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8,_cor7})
				    -| [{'function_name',{'-rebuild_all/2-fun-0-',2}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-rebuild_all/2-fun-0-'}}] )
		in  %% Line 126
		    call 'lists':'foldl'
			(_cor9, %% Line 128
				S1, %% Line 128
				    Solved)
'is_ok'/2 =
    %% Line 130
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{RI,CI,MI},Vals> when 'true' ->
	      %% Line 131
	      case apply 'all'/3
		       (RI, CI, MI) of
		<[Ri|[Ci|[Mi|[]]]]> when 'true' ->
		    let <_cor3> =
			%% Line 132
			apply 'indx'/2
			    (RI, CI)
		    in  %% Line 132
			case call 'erlang':'element'
				 (_cor3, Vals) of
			  %% Line 133
			  <0> when 'true' ->
			      'true'
			  %% Line 134
			  <Val> when 'true' ->
			      let <_cor18> =
				  %% Line 135
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor6) ->
						case _cor6 of
						  <[%% Line 137
						    Obs|_cor5]> when 'true' ->
						      let <_cor16> =
							  ( letrec
								'lc$^1'/1 =
								    fun (_cor12) ->
									case _cor12 of
									  <[{R,C}|_cor8]>
									      when %% Line 136
										try
										    let <_cor9> =
											call 'erlang':'=='
											    (R, RI)
										    in  let <_cor10> =
											    call 'erlang':'=='
												(C, CI)
											in  let <_cor11> =
												call 'erlang':'and'
												    (_cor9, _cor10)
											    in  call 'erlang':'not'
												    (_cor11)
										of <Try> ->
										    Try
										catch <T,R> ->
										    'false' ->
									      let <_cor13> =
										  apply 'indx'/2
										      (R, C)
									      in  let <_cor14> =
										      call 'erlang':'element'
											  (_cor13, Vals)
										  in  let <_cor15> =
											  apply 'lc$^1'/1
											      (_cor8)
										      in  ( [_cor14|_cor15]
											    -| ['compiler_generated'] )
									  ( <[_cor7|_cor8]> when 'true' ->
										apply 'lc$^1'/1
										    (_cor8)
									    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor12> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor12})
										  -| [{'function_name',{'lc$^1',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^1'/1
								    (Obs)
							    -| ['list_comprehension'] )
						      in  let <_cor17> =
							      %% Line 137
							      apply 'lc$^0'/1
								  (_cor5)
							  in  ( [_cor16|_cor17]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor6> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor6})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (%% Line 137
					     [Ri|[Ci|[Mi|[]]]])
				    -| ['list_comprehension'] )
			      in  let <_cor20> =
				      %% Line 138
				      call 'lists':'flatten'
					  (_cor18)
				  in  let <_cor21> =
					  %% Line 138
					  call 'lists':'member'
					      (Val, _cor20)
				      in  %% Line 138
					  call 'erlang':'not'
					      (_cor21)
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'is_ok',2}}] )
	    -| ['compiler_generated'] )
	end
'test'/0 =
    %% Line 141
    fun () ->
	%% Line 142
	[{{1,2},6}|[{{1,4},1}|[{{1,6},4}|[{{1,8},5}|[{{2,3},8}|[{{2,4},3}|[{{2,6},5}|[{{2,7},6}|[{{3,1},2}|[{{3,9},1}|[{{4,1},8}|[{{4,4},4}|[{{4,6},7}|[{{4,9},6}|[{{5,3},6}|[{{5,7},3}|[{{6,1},7}|[{{6,4},9}|[{{6,6},1}|[{{6,9},4}|[{{7,1},5}|[{{7,9},2}|[{{8,3},7}|[{{8,4},2}|[{{8,6},6}|[{{8,7},9}|[{{9,2},4}|[{{9,4},5}|[{{9,6},8}|[{{9,8},7}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'new_game'/1 =
    %% Line 152
    fun (_cor0) ->
	%% Line 153
	case call 'erlang':'now'
		 () of
	  <{X,Y,Z}> when 'true' ->
	      do  %% Line 154
		  call 'random':'seed'
		      (Y, X, Z)
		  let <_cor6> =
		      %% Line 155
		      call 'gb_sets':'empty'
			  ()
		  in  %% Line 155
		      case _cor0 of
			<{'s',_rec20,_rec21,_rec22,_rec23,_rec24,_rec25,_rec26,_rec27}> when 'true' ->
			    let <_cor4> =
				{'s',_rec20,_rec21,_rec22,_rec23,_rec24,_rec25,_rec26,_rec27}
			    in  let <_cor5> =
				    apply 'empty_table'/1
					(_cor4)
				in  case apply 'new_game'/6
					     (1, 1, _cor6, _cor5, [], 0) of
				      %% Line 156
				      <'stop'> when 'true' ->
					  apply 'new_game'/1
					      (_cor0)
				      %% Line 157
				      <Game> when 'true' ->
					  Game
				    end
			( <_cor9> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','s'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'new_game'/6 =
    %% Line 161
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor28,_cor29,_cor30,_X_St,_X_Acc,Cnt>
	      when call 'erlang':'>'
		    (Cnt,
		     200) ->
	      %% Line 163
	      'stop'
	  %% Line 164
	  <R,C,BT,St,Acc,Cnt>
	      when let <_cor6> =
		    call 'erlang':'<'
			(R, 10)
		in  let <_cor7> =
			call 'erlang':'<'
			    (C, 10)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      let <M> =
		  %% Line 165
		  apply 'mat'/2
		      (R, C)
	      in  let <U> =
		      %% Line 166
		      apply 'poss'/2
			  ({R,C,M}, St)
		  in  let <S> =
			  %% Line 167
			  call 'gb_sets':'difference'
			      (U, BT)
		      in  %% Line 168
			  case call 'gb_sets':'size'
				   (S) of
			    %% Line 169
			    <0> when 'true' ->
				%% Line 170
				case Acc of
				  <[{{BR,BC},BVal,BBT,BST}|BAcc]> when 'true' ->
				      let <_cor13> =
					  %% Line 171
					  call 'gb_sets':'add'
					      (BVal, BBT)
				      in  let <_cor12> =
					      %% Line 171
					      call 'erlang':'+'
						  (Cnt, 1)
					  in  %% Line 171
					      apply 'new_game'/6
						  (BR, BC, _cor13, BST, BAcc, _cor12)
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor11})
				    -| ['compiler_generated'] )
				end
			    %% Line 172
			    <Size> when 'true' ->
				let <Ind> =
				    %% Line 173
				    call 'random':'uniform'
					(Size)
				in  let <_cor15> =
					%% Line 174
					call 'gb_sets':'to_list'
					    (S)
				    in  let <V> =
					    %% Line 174
					    call 'lists':'nth'
						(Ind, _cor15)
					in  let <_cor19> =
						%% Line 175
						call 'erlang':'+'
						    (C, 1)
					    in  let <_cor18> =
						    %% Line 175
						    call 'gb_sets':'empty'
							()
						in  let <_cor17> =
							%% Line 176
							apply 'add'/3
							    ({R,C,M}, V, St)
						    in  %% Line 175
							apply 'new_game'/6
							    (R, _cor19, _cor18, _cor17, %% Line 177
											[{{R,C},V,BT,St}|Acc], %% Line 177
													       Cnt)
			  end
	  %% Line 179
	  <R,_X_C,Bt,S,Acc,Cnt>
	      when call 'erlang':'<'
		    (R,
		     10) ->
	      let <_cor21> =
		  %% Line 180
		  call 'erlang':'+'
		      (R, 1)
	      in  %% Line 180
		  apply 'new_game'/6
		      (_cor21, 1, Bt, S, Acc, Cnt)
	  %% Line 181
	  <_cor31,_cor32,_cor33,S,_X_Acc,_X_Cnt> when 'true' ->
	      %% Line 183
	      S
	end
'pick_shown'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 186
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[I|_cor4]> when 'true' ->
				let <_cor8> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [I|_cor8]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor6> =
		      call 'lists':'seq'
			  (1, 81)
		  in  apply 'lc$^0'/1
			  (_cor6)
	      -| ['list_comprehension'] )
	in  let <Given> =
		%% Line 186
		call 'gb_sets':'from_ordset'
		    (_cor9)
	    in  let <_cor11> =
		    %% Line 187
		    apply 'level'/1
			(_cor1)
		in  let <_cor12> =
			%% Line 187
			apply 'pick_shown'/5
			    (Given, Given, _cor2, _cor11, _cor0)
		    in  %% Line 187
			apply 'get_known'/1
			    (_cor12)
'get_known'/1 =
    %% Line 189
    fun (_cor0) ->
	case _cor0 of
	  <{'s',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Vals}> when 'true' ->
	      let <_cor9> =
		  %% Line 190
		  ( fun (_cor6,_cor5) ->
			%% Line 191
			case call 'erlang':'element'
				 (_cor6, Vals) of
			  %% Line 192
			  <0> when 'true' ->
			      _cor5
			  %% Line 193
			  <Val> when 'true' ->
			      %% Line 194
			      case apply 'rcm'/1
				       (_cor6) of
				<{R,C,_cor18}> when 'true' ->
				    %% Line 195
				    [{{R,C},Val}|_cor5]
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			end
		    -| [{'id',{0,0,'-get_known/1-fun-0-'}}] )
	      in  let <_cor2> =
		      %% Line 197
		      call 'lists':'seq'
			  (1, 81)
		  in  %% Line 190
		      call 'lists':'foldl'
			  (_cor9, %% Line 197
				  [], _cor2)
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'get_known',1}}] )
	    -| ['compiler_generated'] )
	end
'pick_shown'/5 =
    %% Line 199
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <LeftSz> =
	    %% Line 200
	    call 'gb_sets':'size'
		(_cor3)
	in  let <GivenSz> =
		%% Line 201
		call 'gb_sets':'size'
		    (_cor4)
	    in  %% Line 202
		case <> of
		  <>
		      when call 'erlang':'=='
			    (LeftSz,
			     0) ->
		      do  %% Line 203
			  call 'io':'format'
			      ([78|[111|[32|[108|[101|[102|[116|[32|[126|[112|[126|[110]]]]]]]]]]]], [GivenSz|[]])
			  _cor2
		  %% Line 205
		  <>
		      when call 'erlang':'<'
			    (GivenSz,
			     _cor1) ->
		      do  %% Line 206
			  call 'io':'format'
			      ([66|[101|[108|[111|[119|[32|[108|[101|[118|[101|[108|[32|[126|[112|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]], [GivenSz|[_cor1|[]]])
			  _cor2
		  %% Line 208
		  <> when 'true' ->
		      let <Ran> =
			  %% Line 209
			  call 'random':'uniform'
			      (LeftSz)
		      in  let <_cor8> =
			      %% Line 210
			      call 'gb_sets':'to_list'
				  (_cor3)
			  in  let <V> =
				  %% Line 210
				  call 'lists':'nth'
				      (Ran, _cor8)
			      in  let <_cor16> =
				      %% Line 211
				      apply 'rcm'/1
					  (V)
				  in  %% Line 211
				      ( case _cor2 of
					  ( <( {'s',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec30}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_rec28> =
						    call 'erlang':'setelement'
							(V, _rec30, 0)
						in  let <_cor15> =
							call 'erlang':'setelement'
							    (9, _cor2, _rec28)
						    in  let <S1> =
							    apply 'rebuild_all'/2
								(_cor16, _cor15)
							in  %% Line 212
							    case apply 'solve'/2
								     (S1, 'true') of
							      %% Line 213
							      <{'true',_cor45,_cor46}> when 'true' ->
								  do  catch
									  let <_cor18> =
									      %% Line 214
									      call 'erlang':'-'
										  (100, LeftSz)
									  in  %% Line 214
									      call 'erlang':'!'
										  (_cor0, {'working',_cor18})
								      let <_cor20> =
									  %% Line 215
									  call 'gb_sets':'delete'
									      (V, _cor4)
								      in  let <_cor19> =
									      %% Line 216
									      call 'gb_sets':'delete'
										  (V, _cor3)
									  in  %% Line 215
									      apply 'pick_shown'/5
										  (_cor20, _cor19, %% Line 217
												   S1, _cor1, _cor0)
							      %% Line 218
							      <{'false',_cor47,_cor48}> when 'true' ->
								  let <_cor21> =
								      %% Line 219
								      call 'gb_sets':'delete'
									  (V, _cor3)
								  in  %% Line 219
								      apply 'pick_shown'/5
									  (_cor4, _cor21, _cor2, _cor1, _cor0)
							      ( <_cor22> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor22})
								-| ['compiler_generated'] )
							    end
					    -| ['compiler_generated'] )
					  ( <_cor35> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','s'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
		end
'solve'/2 =
    %% Line 224
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <St = {'s',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,Vals},All> when 'true' ->
	      let <_cor9> =
		  %% Line 225
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[I|_cor3]>
				      when try
					    let <_cor4> =
						call 'erlang':'element'
						    (I, Vals)
					    in  call 'erlang':'=='
						    (_cor4, 0)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor8> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [I|_cor8]
					    -| ['compiler_generated'] )
				  ( <[I|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor6> =
			    call 'lists':'seq'
				(1, 81)
			in  apply 'lc$^0'/1
				(_cor6)
		    -| ['list_comprehension'] )
	      in  let <_cor11> =
		      %% Line 226
		      call 'lists':'reverse'
			  (_cor9)
		  in  %% Line 226
		      apply 'solve'/6
			  (_cor9, All, St, [], [], _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'solve',2}}] )
	    -| ['compiler_generated'] )
	end
'solve'/6 =
    %% Line 228
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Rem,'false',_X_St,[Solved|_cor21],Unsolved,_cor22> when 'true' ->
	      let <_cor6> =
		  call 'erlang':'++'
		      (Rem, Unsolved)
	      in  {'true',[Solved|[]],_cor6}
	  %% Line 229
	  <[],_cor23,_X_St,Solved,[],_cor24> when 'true' ->
	      {'true',Solved,[]}
	  %% Line 230
	  <[],_cor25,_X_St,Solved,Unsolved,_cor26>
	      when call 'erlang':'=:='
		    (_cor26,
		     Unsolved) ->
	      {'false',Solved,Unsolved}
	  %% Line 231
	  <[],_cor27,St,Solved,Unsolved,_X_Orig> when 'true' ->
	      let <_cor7> =
		  %% Line 232
		  call 'lists':'reverse'
		      (Unsolved)
	      in  %% Line 232
		  apply 'solve'/6
		      (Unsolved, 'true', St, Solved, [], _cor7)
	  %% Line 233
	  <[Index|Rest],All,St,S,US,Orig> when 'true' ->
	      let <RCM> =
		  %% Line 234
		  apply 'rcm'/1
		      (Index)
	      in  let <Poss> =
		      %% Line 235
		      apply 'poss'/2
			  (RCM, St)
		  in  %% Line 236
		      case call 'gb_sets':'size'
			       (Poss) of
			%% Line 237
			<1> when 'true' ->
			    %% Line 239
			    case call 'gb_sets':'to_list'
				     (Poss) of
			      <[Val|[]]> when 'true' ->
				  let <_cor11> =
				      %% Line 240
				      apply 'add'/3
					  (RCM, Val, St)
				  in  %% Line 240
				      apply 'solve'/6
					  (Rest, All, _cor11, [{Index,Val}|S], US, Orig)
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
			%% Line 241
			<_cor28> when 'true' ->
			    %% Line 242
			    case apply 'solve_1'/3
				     (RCM, Poss, St) of
			      %% Line 243
			      <'false'> when 'true' ->
				  %% Line 244
				  apply 'solve'/6
				      (Rest, All, St, S, [Index|US], Orig)
			      %% Line 245
			      <Val> when 'true' ->
				  let <_cor12> =
				      %% Line 246
				      apply 'add'/3
					  (RCM, Val, St)
				  in  %% Line 246
				      apply 'solve'/6
					  (Rest, All, _cor12, [{Index,Val}|S], US, Orig)
			    end
		      end
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'solve',6}}] )
	    -| ['compiler_generated'] )
	end
'solve_1'/3 =
    %% Line 250
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RCM = {R,C,_X_M},Avail,St> when 'true' ->
	      let <All> =
		  %% Line 251
		  apply 'all'/1
		      (RCM)
	      in  let <Poss> =
		      %% Line 252
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{RI,CI},Acc>
				  when let <_cor4> =
					call 'erlang':'=='
					    (RI, R)
				    in  let <_cor5> =
					    call 'erlang':'=='
						(CI, C)
					in  call 'erlang':'and'
						(_cor4, _cor5) ->
				  Acc
			      %% Line 253
			      <{RI,CI},Acc> when 'true' ->
				  let <_cor6> =
				      apply 'rcm'/1
					  ({RI,CI})
				  in  let <_cor7> =
					  apply 'poss'/2
					      (_cor6, St)
				      in  call 'gb_sets':'union'
					      (_cor7, Acc)
			      ( <_cor11,_cor10> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor11,_cor10})
				      -| [{'function_name',{'-solve_1/3-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-solve_1/3-fun-0-'}}] )
		  in  let <D> =
			  %% Line 255
			  ( fun (_cor23,_cor22) ->
				case <_cor23,_cor22> of
				  <{RI,CI},Acc>
				      when let <_cor13> =
					    call 'erlang':'=='
						(RI, R)
					in  let <_cor14> =
						call 'erlang':'=='
						    (CI, C)
					    in  call 'erlang':'and'
						    (_cor13, _cor14) ->
				      do  %% Line 256
					  call 'io':'format'
					      ([126|[112|[58|[126|[112|[58|[32|[105|[103|[110|[111|[114|[101|[126|[110]]]]]]]]]]]]]]], [RI|[CI|[]]])
					  %% Line 257
					  Acc
				  %% Line 258
				  <{RI,CI},Acc> when 'true' ->
				      let <_cor15> =
					  %% Line 259
					  apply 'rcm'/1
					      ({RI,CI})
				      in  let <_cor16> =
					      %% Line 259
					      apply 'poss'/2
						  (_cor15, St)
					  in  let <Res> =
						  %% Line 259
						  call 'gb_sets':'union'
						      (_cor16, Acc)
					      in  let <_cor18> =
						      %% Line 260
						      apply 'rcm'/1
							  ({RI,CI})
						  in  let <_cor19> =
							  %% Line 260
							  apply 'poss'/2
							      (_cor18, St)
						      in  let <_cor20> =
							      %% Line 260
							      call 'gb_sets':'to_list'
								  (_cor19)
							  in  let <_cor21> =
								  %% Line 260
								  call 'gb_sets':'to_list'
								      (Res)
							      in  do  %% Line 260
								      call 'io':'format'
									  ([126|[112|[58|[126|[112|[58|[32|[126|[112|[32|[61|[62|[32|[126|[112|[32|[126|[110]]]]]]]]]]]]]]]]]], [RI|[CI|[_cor20|[_cor21|[]]]]])
								      %% Line 261
								      Res
				  ( <_cor25,_cor24> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor25,_cor24})
					  -| [{'function_name',{'-solve_1/3-fun-1-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-solve_1/3-fun-1-'}}] )
		      in  %% Line 263
			  apply 'solve_2'/3
			      (All, {Poss,D}, Avail)
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'solve_1',3}}] )
	    -| ['compiler_generated'] )
	end
'solve_2'/3 =
    %% Line 265
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor11,_cor12> when 'true' ->
	      'false'
	  %% Line 266
	  <[First|R],{Poss,D},Avail> when 'true' ->
	      let <_cor3> =
		  %% Line 267
		  call 'gb_sets':'empty'
		      ()
	      in  let <All> =
		      %% Line 267
		      call 'lists':'foldl'
			  (Poss, _cor3, First)
		  in  let <Res> =
			  %% Line 268
			  call 'gb_sets':'difference'
			      (Avail, All)
		      in  %% Line 269
			  case call 'gb_sets':'size'
				   (Res) of
			    %% Line 270
			    <1> when 'true' ->
				%% Line 273
				case call 'gb_sets':'to_list'
					 (Res) of
				  <[Val|[]]> when 'true' ->
				      %% Line 274
				      Val
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    %% Line 275
			    <_cor13> when 'true' ->
				%% Line 276
				apply 'solve_2'/3
				    (R, {Poss,D}, Avail)
			  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'solve_2',3}}] )
	    -| ['compiler_generated'] )
	end
'all'/1 =
    %% Line 279
    fun (_cor0) ->
	case _cor0 of
	  <{RI,CI,MI}> when 'true' ->
	      apply 'all'/3
		  (RI, CI, MI)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'all',1}}] )
	    -| ['compiler_generated'] )
	end
'all'/3 =
    %% Line 280
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 281
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor4> =
		%% Line 281
		call 'erlang':'div'
		    (_cor3, 3)
	    in  let <MR> =
		    %% Line 281
		    call 'erlang':'*'
			(_cor4, 3)
		in  let <_cor6> =
			%% Line 282
			call 'erlang':'-'
			    (_cor0, 1)
		    in  let <_cor7> =
			    %% Line 282
			    call 'erlang':'rem'
				(_cor6, 3)
			in  let <MC> =
				%% Line 282
				call 'erlang':'*'
				    (_cor7, 3)
			    in  let <_cor14> =
				    %% Line 283
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor12) ->
						  case _cor12 of
						    <[N|_cor10]> when 'true' ->
							let <_cor13> =
							    apply 'lc$^0'/1
								(_cor10)
							in  ( [{_cor2,N}|_cor13]
							      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor12> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor12})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor11> =
					      call 'lists':'seq'
						  (1, 9)
					  in  apply 'lc$^0'/1
						  (_cor11)
				      -| ['list_comprehension'] )
				in  let <_cor21> =
					%% Line 284
					( letrec
					      'lc$^1'/1 =
						  fun (_cor19) ->
						      case _cor19 of
							<[N|_cor17]> when 'true' ->
							    let <_cor20> =
								apply 'lc$^1'/1
								    (_cor17)
							    in  ( [{N,_cor1}|_cor20]
								  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor19> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor19})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  let <_cor18> =
						  call 'lists':'seq'
						      (1, 9)
					      in  apply 'lc$^1'/1
						      (_cor18)
					  -| ['list_comprehension'] )
				    in  let <_cor24> =
					    %% Line 285
					    call 'erlang':'+'
						(1, MR)
					in  let <_cor23> =
						%% Line 285
						call 'erlang':'+'
						    (1, MC)
					    in  let <_cor26> =
						    %% Line 285
						    call 'erlang':'+'
							(1, MR)
						in  let <_cor25> =
							%% Line 285
							call 'erlang':'+'
							    (2, MC)
						    in  let <_cor28> =
							    %% Line 285
							    call 'erlang':'+'
								(1, MR)
							in  let <_cor27> =
								%% Line 285
								call 'erlang':'+'
								    (3, MC)
							    in  let <_cor30> =
								    %% Line 286
								    call 'erlang':'+'
									(2, MR)
								in  let <_cor29> =
									%% Line 286
									call 'erlang':'+'
									    (1, MC)
								    in  let <_cor32> =
									    %% Line 286
									    call 'erlang':'+'
										(2, MR)
									in  let <_cor31> =
										%% Line 286
										call 'erlang':'+'
										    (2, MC)
									    in  let <_cor34> =
										    %% Line 286
										    call 'erlang':'+'
											(2, MR)
										in  let <_cor33> =
											%% Line 286
											call 'erlang':'+'
											    (3, MC)
										    in  let <_cor36> =
											    %% Line 287
											    call 'erlang':'+'
												(3, MR)
											in  let <_cor35> =
												%% Line 287
												call 'erlang':'+'
												    (1, MC)
											    in  let <_cor38> =
												    %% Line 287
												    call 'erlang':'+'
													(3, MR)
												in  let <_cor37> =
													%% Line 287
													call 'erlang':'+'
													    (2, MC)
												    in  let <_cor40> =
													    %% Line 287
													    call 'erlang':'+'
														(3, MR)
													in  let <_cor39> =
														%% Line 287
														call 'erlang':'+'
														    (3, MC)
													    in  let <Mi> =
														    %% Line 285
														    [{_cor24,_cor23}|[{_cor26,_cor25}|[{_cor28,_cor27}|%% Line 286
																				       [{_cor30,_cor29}|[{_cor32,_cor31}|[{_cor34,_cor33}|%% Line 287
																											  [{_cor36,_cor35}|[{_cor38,_cor37}|[{_cor40,_cor39}|[]]]]]]]]]]
														in  %% Line 288
														    [_cor14|[_cor21|[Mi|[]]]]
'other_mats'/1 =
    %% Line 290
    fun (_cor0) ->
	let <_cor22,P1,P2> =
	    %% Line 291
	    case <> of
	      <>
		  when call 'erlang':'<'
			(_cor0,
			 4) ->
		  <6,3,6>
	      %% Line 292
	      <>
		  when call 'erlang':'<'
			(_cor0,
			 7) ->
		  <3,-3,3>
	      %% Line 293
	      <> when 'true' ->
		  <-3,-6,-3>
	    end
	in  let <_cor7> =
		%% Line 295
		call 'erlang':'-'
		    (_cor0, 1)
	    in  %% Line 295
		case call 'erlang':'rem'
			 (_cor7, 3) of
		  %% Line 296
		  <0> when 'true' ->
		      let <_cor8> =
			  call 'erlang':'+'
			      (_cor0, 1)
		      in  let <_cor9> =
			      call 'erlang':'+'
				  (_cor0, 2)
			  in  let <_cor10> =
				  call 'erlang':'+'
				      (_cor0, P1)
			      in  let <_cor11> =
				      call 'erlang':'+'
					  (_cor0, P2)
				  in  [_cor8|[_cor9|[_cor10|[_cor11|[]]]]]
		  %% Line 297
		  <1> when 'true' ->
		      let <_cor12> =
			  call 'erlang':'-'
			      (_cor0, 1)
		      in  let <_cor13> =
			      call 'erlang':'+'
				  (_cor0, 1)
			  in  let <_cor14> =
				  call 'erlang':'+'
				      (_cor0, P1)
			      in  let <_cor15> =
				      call 'erlang':'+'
					  (_cor0, P2)
				  in  [_cor12|[_cor13|[_cor14|[_cor15|[]]]]]
		  %% Line 298
		  <2> when 'true' ->
		      let <_cor16> =
			  call 'erlang':'-'
			      (_cor0, 2)
		      in  let <_cor17> =
			      call 'erlang':'-'
				  (_cor0, 1)
			  in  let <_cor18> =
				  call 'erlang':'+'
				      (_cor0, P1)
			      in  let <_cor19> =
				      call 'erlang':'+'
					  (_cor0, P2)
				  in  [_cor16|[_cor17|[_cor18|[_cor19|[]]]]]
		  ( <_cor20> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor20})
		    -| ['compiler_generated'] )
		end
'check_must'/1 =
    %% Line 301
    fun (_cor0) ->
	case _cor0 of
	  <S = {'s',_cor12,_cor13,_cor14,Poss,MS,MR0,MC0,_cor15}> when 'true' ->
	      let <List> =
		  %% Line 302
		  call 'lists':'seq'
		      (1, 9)
	      in  let <_cor6> =
		      %% Line 303
		      ( fun (_cor3,_cor2) ->
			    case <_cor3,_cor2> of
			      <Val,{MRT,MCT}> when 'true' ->
				  %% Line 304
				  apply 'check_must2'/6
				      (List, Val, Poss, MS, MRT, MCT)
			      ( <_cor5,_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor5,_cor4})
				      -| [{'function_name',{'-check_must/1-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-check_must/1-fun-0-'}}] )
		  in  %% Line 303
		      case call 'lists':'foldl'
			       (_cor6, %% Line 305
				       {MR0,MC0}, %% Line 305
						  List) of
			<{MR,MC}> when 'true' ->
			    let <_cor9> =
				%% Line 306
				call 'erlang':'setelement'
				    (8, S, MC)
			    in  %% Line 306
				call 'erlang':'setelement'
				    (7, _cor9, MR)
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'check_must',1}}] )
	    -| ['compiler_generated'] )
	end
'check_must2'/6 =
    %% Line 308
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[M|Rest],Val,Poss,Ms,MR0,MC0> when 'true' ->
	      let <_cor6> =
		  %% Line 309
		  call 'erlang':'element'
		      (M, Ms)
	      in  %% Line 309
		  case call 'gb_sets':'is_member'
			   (Val, _cor6) of
		    %% Line 310
		    <'true'> when 'true' ->
			%% Line 311
			case apply 'rc_in_mat'/1
				 (M) of
			  <{Rows,Cols}> when 'true' ->
			      let <MR1> =
				  %% Line 312
				  apply 'check_must3'/5
				      (Rows, Val, Poss, 'row', MR0)
			      in  let <MC1> =
				      %% Line 313
				      apply 'check_must3'/5
					  (Cols, Val, Poss, 'col', MC0)
				  in  %% Line 314
				      apply 'check_must2'/6
					  (Rest, Val, Poss, Ms, MR1, MC1)
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    %% Line 315
		    <'false'> when 'true' ->
			%% Line 316
			apply 'check_must2'/6
			    (Rest, Val, Poss, Ms, MR0, MC0)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 318
	  <[],_cor17,_cor18,_cor19,MR,MC> when 'true' ->
	      {MR,MC}
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'check_must2',6}}] )
	    -| ['compiler_generated'] )
	end
'check_must3'/5 =
    %% Line 320
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{F1,F2,F3},Val,Check,Type,Must0> when 'true' ->
	      let <_cor5> =
		  %% Line 321
		  call 'gb_sets':'empty'
		      ()
	      in  let <_cor6> =
		      %% Line 321
		      apply 'get_poss'/3
			  (F1, Check, _cor5)
		  in  let <_cor7> =
			  %% Line 321
			  call 'gb_sets':'is_member'
			      (Val, _cor6)
		      in  let <R1> =
			      %% Line 321
			      call 'erlang':'not'
				  (_cor7)
			  in  let <_cor9> =
				  %% Line 322
				  call 'gb_sets':'empty'
				      ()
			      in  let <_cor10> =
				      %% Line 322
				      apply 'get_poss'/3
					  (F2, Check, _cor9)
				  in  let <_cor11> =
					  %% Line 322
					  call 'gb_sets':'is_member'
					      (Val, _cor10)
				      in  let <R2> =
					      %% Line 322
					      call 'erlang':'not'
						  (_cor11)
					  in  let <_cor13> =
						  %% Line 323
						  call 'gb_sets':'empty'
						      ()
					      in  let <_cor14> =
						      %% Line 323
						      apply 'get_poss'/3
							  (F3, Check, _cor13)
						  in  let <_cor15> =
							  %% Line 323
							  call 'gb_sets':'is_member'
							      (Val, _cor14)
						      in  let <R3> =
							      %% Line 323
							      call 'erlang':'not'
								  (_cor15)
							  in  %% Line 325
							      case <> of
								<>
								    when call 'erlang':'and'
									  (R1,
									   R2) ->
								    apply 'update_must'/4
									(Type, F3, Val, Must0)
								%% Line 326
								<>
								    when call 'erlang':'and'
									  (R1,
									   R3) ->
								    apply 'update_must'/4
									(Type, F2, Val, Must0)
								%% Line 327
								<>
								    when call 'erlang':'and'
									  (R2,
									   R3) ->
								    apply 'update_must'/4
									(Type, F1, Val, Must0)
								%% Line 328
								<> when 'true' ->
								    Must0
							      end
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'check_must3',5}}] )
	    -| ['compiler_generated'] )
	end
'update_must'/4 =
    %% Line 331
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type,[Indx|_cor11],Val,Must> when 'true' ->
	      let <N> =
		  %% Line 332
		  apply 'mindx'/2
		      (Type, Indx)
	      in  let <Set> =
		      %% Line 334
		      call 'erlang':'element'
			  (N, Must)
		  in  let <_cor6> =
			  %% Line 335
			  call 'gb_sets':'add'
			      (Val, Set)
		      in  %% Line 335
			  call 'erlang':'setelement'
			      (N, Must, _cor6)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'update_must',4}}] )
	    -| ['compiler_generated'] )
	end
'add'/3 =
    %% Line 337
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RCM = {R,C,M},Val,S = {'s',_cor22,_cor23,_cor24,P0,MS,MR0,MC0,Vals}> when 'true' ->
	      let <Ri> =
		  %% Line 338
		  apply 'mindx'/2
		      (R, M)
	      in  let <Ci> =
		      %% Line 339
		      apply 'mindx'/2
			  (M, C)
		  in  let <MR> =
			  %% Line 340
			  apply 'delete'/3
			      (Val, Ri, MR0)
		      in  let <MC> =
			      %% Line 341
			      apply 'delete'/3
				  (Val, Ci, MC0)
			  in  let <_cor8> =
				  %% Line 342
				  apply 'indx'/1
				      (RCM)
			      in  let <_cor7> =
				      %% Line 342
				      call 'gb_sets':'empty'
					  ()
				  in  let <P1> =
					  %% Line 342
					  call 'erlang':'setelement'
					      (_cor8, P0, _cor7)
				      in  let <_cor10> =
					      %% Line 343
					      apply 'all'/1
						  (RCM)
					  in  let <_cor11> =
						  %% Line 343
						  call 'lists':'flatten'
						      (_cor10)
					      in  let <_rec32> =
						      %% Line 343
						      apply 'delete'/3
							  (Val, _cor11, P1)
						  in  let <_rec33> =
							  %% Line 344
							  apply 'delete'/3
							      (Val, M, MS)
						      in  let <_cor14> =
							      %% Line 346
							      apply 'indx'/1
								  (RCM)
							  in  let <_rec34> =
								  %% Line 346
								  call 'erlang':'setelement'
								      (_cor14, Vals, Val)
							      in  let <_cor18> =
								      %% Line 346
								      {'s',_cor22,_cor23,_cor24,_rec32,_rec33,MR,MC,_rec34}
								  in  %% Line 343
								      apply 'check_must'/1
									  (_cor18)
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'add',3}}] )
	    -| ['compiler_generated'] )
	end
'poss'/2 =
    %% Line 348
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <RCM = {R,C,M},{'s',_cor14,_cor15,_cor16,P,_cor17,MR,MC,Vals}> when 'true' ->
	      let <I> =
		  %% Line 349
		  apply 'indx'/2
		      (R, C)
	      in  %% Line 350
		  case call 'erlang':'element'
			   (I, Vals) of
		    %% Line 351
		    <0> when 'true' ->
			let <Rm> =
			    %% Line 352
			    apply 'mindx'/2
				(R, M)
			in  let <Cm> =
				%% Line 353
				apply 'mindx'/2
				    (M, C)
			    in  let <_cor6> =
				    %% Line 354
				    call 'erlang':'element'
					(Rm, MR)
				in  let <_cor5> =
					%% Line 354
					call 'erlang':'element'
					    (Cm, MC)
				    in  let <T1> =
					    %% Line 354
					    call 'gb_sets':'intersection'
						(_cor6, _cor5)
					in  %% Line 355
					    case call 'gb_sets':'size'
						     (T1) of
					      %% Line 356
					      <1> when 'true' ->
						  T1
					      %% Line 357
					      <_cor18> when 'true' ->
						  let <Not> =
						      %% Line 358
						      apply 'get_nots'/3
							  (RCM, MR, MC)
						  in  let <_cor9> =
							  %% Line 359
							  call 'erlang':'element'
							      (I, P)
						      in  %% Line 359
							  call 'gb_sets':'difference'
							      (_cor9, Not)
					    end
		    %% Line 361
		    <_cor19> when 'true' ->
			%% Line 362
			call 'gb_sets':'empty'
			    ()
		  end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'poss',2}}] )
	    -| ['compiler_generated'] )
	end
'get_nots'/3 =
    %% Line 365
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{R,C,M},MR,MC> when 'true' ->
	      %% Line 366
	      case apply 'other_mats'/1
		       (M) of
		<[RM1|[RM2|[CM1|[CM2|[]]]]]> when 'true' ->
		    let <_cor5> =
			%% Line 367
			apply 'mindx'/2
			    (R, RM1)
		    in  let <_cor6> =
			    %% Line 367
			    apply 'mindx'/2
				(R, RM2)
			in  let <_cor4> =
				%% Line 367
				call 'gb_sets':'empty'
				    ()
			    in  let <R1> =
				    %% Line 367
				    apply 'get_poss'/3
					([_cor5|[_cor6|[]]], MR, _cor4)
				in  let <_cor8> =
					%% Line 368
					apply 'mindx'/2
					    (CM1, C)
				    in  let <_cor9> =
					    %% Line 368
					    apply 'mindx'/2
						(CM2, C)
					in  %% Line 368
					    apply 'get_poss'/3
						([_cor8|[_cor9|[]]], MC, R1)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'get_nots',3}}] )
	    -| ['compiler_generated'] )
	end
'get_poss'/3 =
    %% Line 375
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor8,Tot> when 'true' ->
	      Tot
	  %% Line 376
	  <[H|R],What,Tot> when 'true' ->
	      let <_cor3> =
		  %% Line 378
		  call 'erlang':'element'
		      (H, What)
	      in  let <_cor4> =
		      %% Line 378
		      call 'gb_sets':'union'
			  (_cor3, Tot)
		  in  %% Line 378
		      apply 'get_poss'/3
			  (R, What, _cor4)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_poss',3}}] )
	    -| ['compiler_generated'] )
	end
'r2rs'/1 =
    %% Line 380
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 381
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <R0> =
		%% Line 381
		call 'erlang':'*'
		    (_cor1, 3)
	    in  let <_cor3> =
		    %% Line 382
		    call 'erlang':'+'
			(R0, 1)
		in  let <_cor4> =
			%% Line 382
			call 'erlang':'+'
			    (R0, 2)
		    in  let <_cor5> =
			    %% Line 382
			    call 'erlang':'+'
				(R0, 3)
			in  %% Line 382
			    [_cor3|[_cor4|[_cor5|[]]]]
'c2cs'/1 =
    %% Line 384
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 385
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <C0> =
		%% Line 385
		call 'erlang':'rem'
		    (_cor1, 9)
	    in  let <_cor3> =
		    %% Line 386
		    call 'erlang':'+'
			(C0, 1)
		in  let <_cor4> =
			%% Line 386
			call 'erlang':'+'
			    (C0, 10)
		    in  let <_cor5> =
			    %% Line 386
			    call 'erlang':'+'
				(C0, 19)
			in  %% Line 386
			    [_cor3|[_cor4|[_cor5|[]]]]
'mindx'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'row',Indx> when 'true' ->
	      %% Line 389
	      case apply 'rcm'/1
		       (Indx) of
		<{R,_X_C,M}> when 'true' ->
		    %% Line 390
		    apply 'mindx'/2
			(R, M)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 391
	  <'col',Indx> when 'true' ->
	      %% Line 392
	      case apply 'rcm'/1
		       (Indx) of
		<{_X_R,C,M}> when 'true' ->
		    %% Line 393
		    apply 'mindx'/2
			(M, C)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 395
	  <R,M> when 'true' ->
	      let <_cor6> =
		  %% Line 396
		  call 'erlang':'-'
		      (R, 1)
	      in  let <_cor7> =
		      %% Line 396
		      call 'erlang':'*'
			  (_cor6, 3)
		  in  let <_cor8> =
			  %% Line 396
			  call 'erlang':'+'
			      (1, _cor7)
		      in  let <_cor4> =
			      %% Line 396
			      call 'erlang':'-'
				  (M, 1)
			  in  let <_cor5> =
				  %% Line 396
				  call 'erlang':'rem'
				      (_cor4, 3)
			      in  %% Line 396
				  call 'erlang':'+'
				      (_cor8, _cor5)
	end
'rcm'/1 =
    %% Line 398
    fun (_cor0) ->
	case _cor0 of
	  <Indx>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 399
		  call 'erlang':'-'
		      (Indx, 1)
	      in  let <_cor5> =
		      %% Line 399
		      call 'erlang':'div'
			  (_cor4, 9)
		  in  let <_cor6> =
			  %% Line 399
			  call 'erlang':'+'
			      (_cor5, 1)
		      in  let <_cor1> =
			      %% Line 399
			      call 'erlang':'-'
				  (Indx, 1)
			  in  let <_cor2> =
				  %% Line 399
				  call 'erlang':'rem'
				      (_cor1, 9)
			      in  let <_cor3> =
				      %% Line 399
				      call 'erlang':'+'
					  (_cor2, 1)
				  in  %% Line 399
				      apply 'rcm'/1
					  ({_cor6,_cor3})
	  %% Line 400
	  <{R,C}> when 'true' ->
	      let <M> =
		  %% Line 401
		  apply 'mat'/2
		      (R, C)
	      in  %% Line 402
		  {R,C,M}
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'rcm',1}}] )
	    -| ['compiler_generated'] )
	end
'mat'/2 =
    %% Line 403
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 404
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor6> =
		%% Line 404
		call 'erlang':'div'
		    (_cor5, 3)
	    in  let <_cor7> =
		    %% Line 404
		    call 'erlang':'+'
			(1, _cor6)
		in  let <_cor2> =
			%% Line 404
			call 'erlang':'-'
			    (_cor1, 1)
		    in  let <_cor3> =
			    %% Line 404
			    call 'erlang':'div'
				(_cor2, 3)
			in  let <_cor4> =
				%% Line 404
				call 'erlang':'*'
				    (_cor3, 3)
			    in  %% Line 404
				call 'erlang':'+'
				    (_cor7, _cor4)
'rc_in_mat'/1 =
    %% Line 406
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 407
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor2> =
		%% Line 407
		call 'erlang':'div'
		    (_cor1, 3)
	    in  let <_cor3> =
		    %% Line 407
		    call 'erlang':'*'
			(3, _cor2)
		in  let <R1> =
			%% Line 407
			call 'erlang':'+'
			    (1, _cor3)
		    in  let <_cor5> =
			    %% Line 408
			    call 'erlang':'-'
				(_cor0, 1)
			in  let <_cor6> =
				%% Line 408
				call 'erlang':'rem'
				    (_cor5, 3)
			    in  let <_cor7> =
				    %% Line 408
				    call 'erlang':'*'
					(3, _cor6)
				in  let <C1> =
					%% Line 408
					call 'erlang':'+'
					    (1, _cor7)
				    in  let <_cor55> =
					    %% Line 409
					    call 'erlang':'+'
						(R1, 0)
					in  let <_cor54> =
						%% Line 409
						call 'erlang':'+'
						    (C1, 0)
					    in  let <_cor56> =
						    %% Line 409
						    apply 'indx'/1
							({_cor55,_cor54})
						in  let <_cor58> =
							%% Line 409
							call 'erlang':'+'
							    (R1, 0)
						    in  let <_cor57> =
							    %% Line 409
							    call 'erlang':'+'
								(C1, 1)
							in  let <_cor59> =
								%% Line 409
								apply 'indx'/1
								    ({_cor58,_cor57})
							    in  let <_cor61> =
								    %% Line 409
								    call 'erlang':'+'
									(R1, 0)
								in  let <_cor60> =
									%% Line 409
									call 'erlang':'+'
									    (C1, 2)
								    in  let <_cor62> =
									    %% Line 409
									    apply 'indx'/1
										({_cor61,_cor60})
									in  let <_cor46> =
										%% Line 410
										call 'erlang':'+'
										    (R1, 1)
									    in  let <_cor45> =
										    %% Line 410
										    call 'erlang':'+'
											(C1, 0)
										in  let <_cor47> =
											%% Line 410
											apply 'indx'/1
											    ({_cor46,_cor45})
										    in  let <_cor49> =
											    %% Line 410
											    call 'erlang':'+'
												(R1, 1)
											in  let <_cor48> =
												%% Line 410
												call 'erlang':'+'
												    (C1, 1)
											    in  let <_cor50> =
												    %% Line 410
												    apply 'indx'/1
													({_cor49,_cor48})
												in  let <_cor52> =
													%% Line 410
													call 'erlang':'+'
													    (R1, 1)
												    in  let <_cor51> =
													    %% Line 410
													    call 'erlang':'+'
														(C1, 2)
													in  let <_cor53> =
														%% Line 410
														apply 'indx'/1
														    ({_cor52,_cor51})
													    in  let <_cor37> =
														    %% Line 411
														    call 'erlang':'+'
															(R1, 2)
														in  let <_cor36> =
															%% Line 411
															call 'erlang':'+'
															    (C1, 0)
														    in  let <_cor38> =
															    %% Line 411
															    apply 'indx'/1
																({_cor37,_cor36})
															in  let <_cor40> =
																%% Line 411
																call 'erlang':'+'
																    (R1, 2)
															    in  let <_cor39> =
																    %% Line 411
																    call 'erlang':'+'
																	(C1, 1)
																in  let <_cor41> =
																	%% Line 411
																	apply 'indx'/1
																	    ({_cor40,_cor39})
																    in  let <_cor43> =
																	    %% Line 411
																	    call 'erlang':'+'
																		(R1, 2)
																	in  let <_cor42> =
																		%% Line 411
																		call 'erlang':'+'
																		    (C1, 2)
																	    in  let <_cor44> =
																		    %% Line 411
																		    apply 'indx'/1
																			({_cor43,_cor42})
																		in  let <_cor28> =
																			%% Line 413
																			call 'erlang':'+'
																			    (R1, 0)
																		    in  let <_cor27> =
																			    %% Line 413
																			    call 'erlang':'+'
																				(C1, 0)
																			in  let <_cor29> =
																				%% Line 413
																				apply 'indx'/1
																				    ({_cor28,_cor27})
																			    in  let <_cor31> =
																				    %% Line 413
																				    call 'erlang':'+'
																					(R1, 1)
																				in  let <_cor30> =
																					%% Line 413
																					call 'erlang':'+'
																					    (C1, 0)
																				    in  let <_cor32> =
																					    %% Line 413
																					    apply 'indx'/1
																						({_cor31,_cor30})
																					in  let <_cor34> =
																						%% Line 413
																						call 'erlang':'+'
																						    (R1, 2)
																					    in  let <_cor33> =
																						    %% Line 413
																						    call 'erlang':'+'
																							(C1, 0)
																						in  let <_cor35> =
																							%% Line 413
																							apply 'indx'/1
																							    ({_cor34,_cor33})
																						    in  let <_cor19> =
																							    %% Line 414
																							    call 'erlang':'+'
																								(R1, 0)
																							in  let <_cor18> =
																								%% Line 414
																								call 'erlang':'+'
																								    (C1, 1)
																							    in  let <_cor20> =
																								    %% Line 414
																								    apply 'indx'/1
																									({_cor19,_cor18})
																								in  let <_cor22> =
																									%% Line 414
																									call 'erlang':'+'
																									    (R1, 1)
																								    in  let <_cor21> =
																									    %% Line 414
																									    call 'erlang':'+'
																										(C1, 1)
																									in  let <_cor23> =
																										%% Line 414
																										apply 'indx'/1
																										    ({_cor22,_cor21})
																									    in  let <_cor25> =
																										    %% Line 414
																										    call 'erlang':'+'
																											(R1, 2)
																										in  let <_cor24> =
																											%% Line 414
																											call 'erlang':'+'
																											    (C1, 1)
																										    in  let <_cor26> =
																											    %% Line 414
																											    apply 'indx'/1
																												({_cor25,_cor24})
																											in  let <_cor10> =
																												%% Line 415
																												call 'erlang':'+'
																												    (R1, 0)
																											    in  let <_cor9> =
																												    %% Line 415
																												    call 'erlang':'+'
																													(C1, 2)
																												in  let <_cor11> =
																													%% Line 415
																													apply 'indx'/1
																													    ({_cor10,_cor9})
																												    in  let <_cor13> =
																													    %% Line 415
																													    call 'erlang':'+'
																														(R1, 1)
																													in  let <_cor12> =
																														%% Line 415
																														call 'erlang':'+'
																														    (C1, 2)
																													    in  let <_cor14> =
																														    %% Line 415
																														    apply 'indx'/1
																															({_cor13,_cor12})
																														in  let <_cor16> =
																															%% Line 415
																															call 'erlang':'+'
																															    (R1, 2)
																														    in  let <_cor15> =
																															    %% Line 415
																															    call 'erlang':'+'
																																(C1, 2)
																															in  let <_cor17> =
																																%% Line 415
																																apply 'indx'/1
																																    ({_cor16,_cor15})
																															    in  %% Line 409
																																{{[_cor56|[_cor59|[_cor62|[]]]],%% Line 410
																																				[_cor47|[_cor50|[_cor53|[]]]],%% Line 411
																																							      [_cor38|[_cor41|[_cor44|[]]]]},%% Line 413
																																											     {[_cor29|[_cor32|[_cor35|[]]]],%% Line 414
																																															    [_cor20|[_cor23|[_cor26|[]]]],%% Line 415
																																																			  [_cor11|[_cor14|[_cor17|[]]]]}}
'indx'/1 =
    %% Line 417
    fun (_cor0) ->
	case _cor0 of
	  <Indx>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      Indx
	  %% Line 418
	  <{Row,Col}> when 'true' ->
	      %% Line 419
	      apply 'indx'/2
		  (Row, Col)
	  %% Line 420
	  <{Row,Col,_cor2}> when 'true' ->
	      %% Line 421
	      apply 'indx'/2
		  (Row, Col)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'indx',1}}] )
	    -| ['compiler_generated'] )
	end
'indx'/2 =
    %% Line 422
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 423
	    call 'erlang':'-'
		(_cor1, 1)
	in  let <_cor3> =
		%% Line 423
		call 'erlang':'*'
		    (_cor2, 9)
	    in  %% Line 423
		call 'erlang':'+'
		    (_cor3, _cor0)
'delete'/3 =
    %% Line 425
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Val,[],S0> when 'true' ->
	      S0
	  %% Line 426
	  <Val,[I1|R],S0> when 'true' ->
	      let <_cor3> =
		  %% Line 427
		  case <> of
		    <>
			when call 'erlang':'is_integer'
			      (I1) ->
			I1
		    %% Line 428
		    <> when 'true' ->
			apply 'indx'/1
			    (I1)
		  end
	      in  let <_cor5> =
		      %% Line 430
		      call 'erlang':'element'
			  (_cor3, S0)
		  in  let <_cor6> =
			  %% Line 430
			  call 'gb_sets':'delete_any'
			      (Val, _cor5)
		      in  let <S> =
			      %% Line 430
			      call 'erlang':'setelement'
				  (_cor3, S0, _cor6)
			  in  %% Line 431
			      apply 'delete'/3
				  (Val, R, S)
	  %% Line 432
	  <Val,I,S> when 'true' ->
	      let <_cor8> =
		  %% Line 433
		  call 'erlang':'element'
		      (I, S)
	      in  let <_cor9> =
		      %% Line 433
		      call 'gb_sets':'delete_any'
			  (Val, _cor8)
		  in  %% Line 433
		      call 'erlang':'setelement'
			  (I, S, _cor9)
	end
'create_games'/2 =
    %% Line 438
    fun (_cor1,_cor0) ->
	%% Line 439
	apply 'gen_loop'/3
	    (_cor1, _cor0, 5)
'gen_loop'/3 =
    %% Line 441
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Engine,_cor13> when 'true' ->
	      %% Line 442
	      receive
		%% Line 443
		<{'gen_game',Level}> when 'true' ->
		    %% Line 444
		    apply 'gen_loop'/3
			([Level|[]], Engine, 5)
	      after 'infinity' ->
		'true'
	  %% Line 446
	  <[Level|Ls],Engine,N>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <Empty> =
		  %% Line 447
		  apply 'empty_table'/1
		      ({'s','undefined','undefined',[],'undefined','undefined','undefined','undefined','undefined'})
	      in  let <Temp> =
		      %% Line 448
		      apply 'new_game'/1
			  (Empty)
		  in  let <Game> =
			  %% Line 449
			  apply 'pick_shown'/3
			      (Temp, Level, 'undefined')
		      in  let <ResLev> =
			      %% Line 450
			      call 'erlang':'length'
				  (Game)
			  in  do  %% Line 451
				  call 'erlang':'!'
				      (Engine, {'game',{ResLev,Game}})
				  let <_cor7> =
				      %% Line 452
				      apply 'level'/1
					  (Level)
				  in  %% Line 452
				      case <> of
					%% Line 453
					<>
					    when call 'erlang':'=<'
						  (ResLev,
						   _cor7) ->
					    %% Line 454
					    apply 'gen_loop'/3
						(Ls, Engine, 5)
					%% Line 455
					<> when 'true' ->
					    let <_cor8> =
						%% Line 456
						call 'erlang':'-'
						    (N, 1)
					    in  %% Line 456
						apply 'gen_loop'/3
						    ([Level|Ls], Engine, _cor8)
				      end
	  %% Line 458
	  <[_cor14|Ls],Engine,_cor15> when 'true' ->
	      %% Line 459
	      apply 'gen_loop'/3
		  (Ls, Engine, 5)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'gen_loop',3}}] )
	    -| ['compiler_generated'] )
	end
'find_game'/2 =
    %% Line 461
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor17,{'s',_cor18,_cor19,[],_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      'false'
	  %% Line 462
	  <'hardest',S = {'s',_cor25,_cor26,Gs0,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
	      let <Hard> =
		  %% Line 463
		  apply 'level'/1
		      ('hard')
	      in  %% Line 464
		  case call 'lists':'sort'
			   (Gs0) of
		    %% Line 465
		    <[{Level,G}|Gs]>
			when try
			      let <_cor3> =
				  call 'erlang':'-'
				      (Hard, 5)
			      in  call 'erlang':'<'
				      (Level, _cor3)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_cor6> =
			    %% Line 466
			    call 'erlang':'setelement'
				(4, S, Gs)
			in  %% Line 466
			    {G,_cor6}
		    %% Line 467
		    <_cor41> when 'true' ->
			'false'
		  end
	  %% Line 469
	  <Level,S = {'s',_cor42,_cor43,Gs0,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
	      let <_cor10> =
		  %% Line 470
		  apply 'level'/1
		      (Level)
	      in  let <_cor8> =
		      %% Line 470
		      call 'lists':'sort'
			  (Gs0)
		  in  let <_cor9> =
			  %% Line 470
			  call 'lists':'reverse'
			      (_cor8)
		      in  %% Line 470
			  case apply 'find_game2'/3
				   (_cor10, _cor9, []) of
			    %% Line 471
			    <'false'> when 'true' ->
				'false'
			    %% Line 472
			    <{Game,Gs}> when 'true' ->
				let <_cor13> =
				    call 'erlang':'setelement'
					(4, S, Gs)
				in  {Game,_cor13}
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor14})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'find_game',2}}] )
	    -| ['compiler_generated'] )
	end
'find_game2'/3 =
    %% Line 475
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Hard,[{Level,G}|Gs],Acc>
	      when try
		    let <_cor3> =
			call 'erlang':'=<'
			    (Level, Hard)
		    in  let <_cor4> =
			    call 'erlang':'-'
				(Hard, 5)
			in  let <_cor5> =
				call 'erlang':'>'
				    (Level, _cor4)
			    in  call 'erlang':'and'
				    (_cor3, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 476
		  call 'erlang':'++'
		      (Gs, Acc)
	      in  %% Line 476
		  {G,_cor6}
	  %% Line 477
	  <Hard,[G|Gs],Acc> when 'true' ->
	      %% Line 478
	      apply 'find_game2'/3
		  (Hard, Gs, [G|Acc])
	  %% Line 479
	  <_X_Hard,[],_cor10> when 'true' ->
	      'false'
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'find_game2',3}}] )
	    -| ['compiler_generated'] )
	end
'levels'/0 =
    %% Line 481
    fun () ->
	%% Line 482
	['trivial'|['easy'|['normal'|['hard'|['hardest']]]]]
'level'/1 =
    %% Line 484
    fun (_cor0) ->
	case _cor0 of
	  <Level>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 485
	      case Level of
		%% Line 486
		<'all'> when 'true' ->
		    100
		%% Line 487
		<'trivial'> when 'true' ->
		    40
		%% Line 488
		<'easy'> when 'true' ->
		    35
		%% Line 489
		<'normal'> when 'true' ->
		    30
		%% Line 490
		<'hard'> when 'true' ->
		    25
		%% Line 491
		<'hardest'> when 'true' ->
		    0
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 493
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 494
	      case <> of
		%% Line 495
		<>
		    when call 'erlang':'=<'
			  (Int,
			   20) ->
		    'hardest'
		%% Line 496
		<>
		    when call 'erlang':'=<'
			  (Int,
			   25) ->
		    'hard'
		%% Line 497
		<>
		    when call 'erlang':'=<'
			  (Int,
			   30) ->
		    'normal'
		%% Line 498
		<>
		    when call 'erlang':'=<'
			  (Int,
			   35) ->
		    'easy'
		%% Line 499
		<> when 'true' ->
		    'trivial'
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'level',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sudoku_game')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('sudoku_game', _cor0)
end