module 'sudoku_board' ['butt_correct'/3,
		       'clear_board'/1,
		       'code_change'/3,
		       'get_board_data'/1,
		       'get_state'/1,
		       'handle_call'/3,
		       'handle_cast'/2,
		       'handle_event'/2,
		       'handle_info'/2,
		       'handle_sync_event'/3,
		       'init'/1,
		       'left'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'new'/1,
		       'redraw'/3,
		       'set_board_data'/2,
		       'set_butt'/3,
		       'setup_board'/2,
		       'terminate'/2]
    attributes [%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 21
		'type' =
		    %% Line 21
		    [{{'record','s'},[{'record_field',21,{'atom',21,'gfx'}}|[{'record_field',21,{'atom',21,'gen'}}|[{'record_field',21,{'atom',21,'games'},{'nil',21}}|[{'record_field',21,{'atom',21,'p'}}|[{'record_field',21,{'atom',21,'m'}}|[{'record_field',21,{'atom',21,'mr'}}|[{'record_field',21,{'atom',21,'mc'}}|[{'record_field',21,{'atom',21,'v'}}]]]]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','state'},[{'record_field',38,{'atom',38,'win'}}|[{'record_field',38,{'atom',38,'parent'}}|[{'record_field',38,{'atom',38,'board'},{'nil',38}}|[{'record_field',38,{'atom',38,'pen'}}|[{'record_field',38,{'atom',38,'fonts'},{'nil',38}}]]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sq'},[{'record_field',39,{'atom',39,'key'}}|[{'record_field',39,{'atom',39,'val'}}|[{'record_field',39,{'atom',39,'correct'},{'atom',39,'true'}}|[{'record_field',39,{'atom',39,'given'},{'atom',39,'false'}}]]]],[]}],
		%% Line 43
		'behaviour' =
		    %% Line 43
		    ['wx_object']]
'new'/1 =
    %% Line 46
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 47
	    call 'erlang':'self'
		()
	in  %% Line 47
	    call 'wx_object':'start_link'
		('sudoku_board', [_cor0|[_cor1|[]]], [])
'setup_board'/2 =
    %% Line 49
    fun (_cor1,_cor0) ->
	%% Line 50
	call 'wx_object':'call'
	    (_cor1, {'setup_board',_cor0})
'clear_board'/1 =
    %% Line 52
    fun (_cor0) ->
	%% Line 53
	call 'wx_object':'call'
	    (_cor0, 'clear_board')
'butt_correct'/3 =
    %% Line 55
    fun (_cor2,_cor1,_cor0) ->
	%% Line 56
	call 'wx_object':'call'
	    (_cor2, {'butt_correct',_cor1,_cor0})
'set_butt'/3 =
    %% Line 58
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Board,Indx,Val>
	      when call 'erlang':'is_integer'
		    (Indx) ->
	      %% Line 59
	      case call 'sudoku_game':'rcm'
		       (Indx) of
		<{R,C,_cor7}> when 'true' ->
		    %% Line 60
		    apply 'set_butt'/3
			(Board, {R,C}, Val)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 61
	  <Board,Id,Val> when 'true' ->
	      %% Line 62
	      call 'wx_object':'call'
		  (Board, {'set_butt',Id,Val})
	end
'left'/1 =
    %% Line 64
    fun (_cor0) ->
	%% Line 65
	call 'wx_object':'call'
	    (_cor0, 'left')
'get_board_data'/1 =
    %% Line 67
    fun (_cor0) ->
	%% Line 68
	call 'wx_object':'call'
	    (_cor0, 'get_board_data')
'set_board_data'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	%% Line 70
	call 'wx_object':'call'
	    (_cor1, {'set_board_data',_cor0})
'get_state'/1 =
    %% Line 72
    fun (_cor0) ->
	%% Line 73
	call 'wx_object':'call'
	    (_cor0, 'get_state')
'init'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <[ParentObj|[ParentPid|[]]]> when 'true' ->
	      let <Win> =
		  %% Line 79
		  call 'wxPanel':'new'
		      (ParentObj, [{'style',65536}])
	      in  do  %% Line 80
		      call 'wxWindow':'setFocus'
			  (Win)
		      do  %% Line 81
			  call 'wxWindow':'setSizeHints'
			      (Win, {250,250})
			  do  %% Line 82
			      call 'wxWindow':'connect'
				  (Win, 'paint', ['callback'])
			      do  %% Line 83
				  call 'wxWindow':'connect'
				      (Win, 'size', [])
				  do  %% Line 84
				      call 'wxWindow':'connect'
					  (Win, 'erase_background', [])
				      do  %% Line 85
					  call 'wxWindow':'connect'
					      (Win, 'key_up', [{'skip','true'}])
					  do  %% Line 86
					      call 'wxWindow':'connect'
						  (Win, 'left_down', [{'skip','true'}])
					      do  %% Line 87
						  call 'wxWindow':'connect'
						      (Win, 'enter_window', [{'skip','true'}])
						  let <Pen> =
						      %% Line 90
						      call 'wxPen':'new'
							  ({0,0,0}, [{'width',3}])
						  in  let <_cor8> =
							  %% Line 91
							  ( letrec
								'lc$^0'/1 =
								    fun (_cor5) ->
									case _cor5 of
									  <[%% Line 92
									    Sz|_cor4]> when 'true' ->
									      let <_cor6> =
										  call 'wxFont':'new'
										      (Sz, 74, 90, 90, [])
									      in  let <_cor7> =
										      %% Line 92
										      apply 'lc$^0'/1
											  (_cor4)
										  in  ( [{Sz,_cor6}|_cor7]
											-| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor5> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor5})
										  -| [{'function_name',{'lc$^0',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^0'/1
								    (%% Line 92
								     [8|[9|[10|[11|[12|[13|[14|[16|[18|[20|[22|[24|[26|[28|[30|[34|[38|[42|[44|[46]]]]]]]]]]]]]]]]]]]])
							    -| ['list_comprehension'] )
						      in  let <TestDC> =
							      %% Line 93
							      call 'wxMemoryDC':'new'
								  ()
							  in  let <Bitmap> =
								  %% Line 94
								  call 'wxBitmap':'new'
								      (256, 256)
							      in  do  %% Line 95
								      call 'wxMemoryDC':'selectObject'
									  (TestDC, Bitmap)
								      %% Line 96
								      case call 'wxDC':'isOk'
									       (TestDC) of
									<'true'> when 'true' ->
									    let <CW> =
										%% Line 97
										( fun (_cor16,_cor15) ->
										      case <_cor16,_cor15> of
											<{Sz,Font},Acc> when 'true' ->
											    %% Line 98
											    case call 'wxFont':'ok'
												     (Font) of
											      %% Line 99
											      <'true'> when 'true' ->
												  do  %% Line 100
												      call 'wxDC':'setFont'
													  (TestDC, Font)
												      let <CH> =
													  %% Line 101
													  call 'wxDC':'getCharHeight'
													      (TestDC)
												      in  %% Line 102
													  [{CH,Sz,Font}|Acc]
											      %% Line 103
											      <'false'> when 'true' ->
												  %% Line 104
												  Acc
											      ( <_cor14> when 'true' ->
												    primop 'match_fail'
													({'case_clause',_cor14})
												-| ['compiler_generated'] )
											    end
											( <_cor18,_cor17> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor18,_cor17})
												-| [{'function_name',{'-init/1-fun-0-',2}}] )
											  -| ['compiler_generated'] )
										      end
										  -| [{'id',{0,0,'-init/1-fun-0-'}}] )
									    in  let <Fs> =
										    %% Line 107
										    call 'lists':'foldl'
											(CW, [], _cor8)
										in  do  %% Line 108
											call 'wxMemoryDC':'destroy'
											    (TestDC)
											%% Line 109
											{Win,{'state',Win,ParentPid,[],Pen,Fs}}
									( <_cor12> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor12})
									  -| ['compiler_generated'] )
								      end
	  ( <_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_sync_event'/3 =
    %% Line 111
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx',_cor8,_cor9,_cor10,{'wxPaint',_cor11}},_X_Obj,State = {'state',Win,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <Size> =
		  %% Line 113
		  call 'wxWindow':'getSize'
		      (Win)
	      in  let <DC> =
		      %% Line 114
		      call 'wxPaintDC':'new'
			  (Win)
		  in  do  %% Line 115
			  call 'wxDC':'destroyClippingRegion'
			      (DC)
			  do  %% Line 116
			      apply 'redraw'/3
				  (DC, Size, State)
			      do  %% Line 117
				  call 'wxPaintDC':'destroy'
				      (DC)
				  %% Line 119
				  'ok'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'handle_sync_event',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_event'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx',_cor15,_cor16,_cor17,{'wxMouse','enter_window',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}},State = {'state',Win,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
	      do  %% Line 122
		  call 'wxWindow':'setFocus'
		      (Win)
		  %% Line 123
		  {'noreply',State}
	  %% Line 124
	  <{'wx',_cor34,_cor35,_cor36,{'wxKey',_cor37,_cor38,_cor39,KeyC,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}},S = %% Line 125
																       {'state',Win,Pid,_cor48,_cor49,_cor50}> when 'true' ->
	      let <_cor6> =
		  %% Line 126
		  case <> of
		    <>
			when let <_cor2> =
			      call 'erlang':'>'
				  (KeyC, 47)
			  in  let <_cor3> =
				  call 'erlang':'<'
				      (KeyC, 58)
			      in  call 'erlang':'and'
				      (_cor2, _cor3) ->
			call 'erlang':'-'
			    (KeyC, 48)
		    %% Line 127
		    <>
			when let <_cor4> =
			      call 'erlang':'>'
				  (KeyC, 325)
			  in  let <_cor5> =
				  call 'erlang':'<'
				      (KeyC, 336)
			      in  call 'erlang':'and'
				      (_cor4, _cor5) ->
			call 'erlang':'-'
			    (KeyC, 326)
		    %% Line 128
		    <> when 'true' ->
			0
		  end
	      in  let <Global> =
		      %% Line 130
		      call 'wx_misc':'getMousePosition'
			  ()
		  in  %% Line 131
		      case call 'wxWindow':'screenToClient'
			       (Win, Global) of
			<{CX,CY}> when 'true' ->
			    do  %% Line 132
				case apply 'get_butt'/3
					 (CX, CY, S) of
				  %% Line 133
				  <'error'> when 'true' ->
				      'ok'
				  %% Line 134
				  <Id> when 'true' ->
				      call 'erlang':'!'
					  (Pid, {'set_val',Id,_cor6})
				end
				%% Line 136
				{'noreply',S}
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  %% Line 137
	  <{'wx',_cor51,_cor52,_cor53,{'wxMouse','left_down',X,Y,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}},S = %% Line 138
																	     {'state',F,Gui,_cor64,_cor65,_cor66}> when 'true' ->
	      let <Id> =
		  %% Line 139
		  apply 'get_butt'/3
		      (X, Y, S)
	      in  do  %% Line 140
		      case Id of
			%% Line 141
			<'error'> when 'true' ->
			    'ok'
			%% Line 142
			<_cor67> when 'true' ->
			    apply 'create_popup_menu'/5
				(Gui, Id, X, Y, F)
		      end
		      %% Line 144
		      {'noreply',S}
	  %% Line 145
	  <{'wx',_cor68,_cor69,_cor70,{'wxSize',_cor71,_cor72,_cor73}},State> when 'true' ->
	      do  %% Line 146
		  apply 'redraw'/1
		      (State)
		  %% Line 147
		  {'noreply',State}
	  %% Line 148
	  <_X_Ev,State> when 'true' ->
	      %% Line 149
	      {'noreply',State}
	end
'handle_call'/3 =
    %% Line 153
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'set_butt',Key,0},_X_From,S0 = {'state',_cor86,_cor87,B0,_cor88,_cor89}> when 'true' ->
	      let <B> =
		  %% Line 154
		  call 'lists':'keydelete'
		      (Key, 2, B0)
	      in  let <_cor6> =
		      %% Line 155
		      call 'erlang':'setelement'
			  (4, S0, B)
		  in  do  %% Line 156
			  apply 'redraw'/1
			      (_cor6)
			  %% Line 157
			  {'reply','ok',_cor6}
	  %% Line 159
	  <{'set_butt',Key,Val},_X_From,S0 = {'state',_cor96,_cor97,B0,_cor98,_cor99}> when 'true' ->
	      let <_cor160,B> =
		  %% Line 160
		  case call 'lists':'keysearch'
			   (Key, 2, B0) of
		    %% Line 161
		    <{'value',_cor100}> when 'true' ->
			let <B> =
			    %% Line 162
			    call 'lists':'keyreplace'
				(Key, 2, B0, {'sq',Key,Val,'true','false'})
			in  <B,B>
		    %% Line 163
		    <'false'> when 'true' ->
			let <B> =
			    %% Line 164
			    [{'sq',Key,Val,'true','false'}|B0]
			in  <B,B>
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor13> =
		      %% Line 166
		      call 'erlang':'setelement'
			  (4, S0, B)
		  in  do  %% Line 167
			  apply 'redraw'/1
			      (_cor13)
			  %% Line 168
			  {'reply','ok',_cor13}
	  %% Line 170
	  <{'butt_correct',Key,Correct},_X_From,S0 = {'state',_cor107,_cor108,B0,_cor109,_cor110}> when 'true' ->
	      let <_cor161,B> =
		  %% Line 171
		  case call 'lists':'keysearch'
			   (Key, 2, B0) of
		    %% Line 172
		    <{'value',Butt}> when 'true' ->
			%% Line 173
			case Butt of
			  <{'sq',_cor111,_cor112,_cor113,_cor114}> when 'true' ->
			      let <_cor16> =
				  call 'erlang':'setelement'
				      (4, Butt, Correct)
			      in  let <_cor18> =
				      call 'erlang':'setelement'
					  (2, _cor16, Key)
				  in  let <B> =
					  call 'lists':'keyreplace'
					      (Key, 2, B0, _cor18)
				      in  <B,B>
			  ( <_cor115> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','sq'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 174
		    <'false'> when 'true' ->
			<%% Line 175
			 B0,%% Line 175
			    B0>
		    ( <_cor21> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor21})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor24> =
		      %% Line 177
		      call 'erlang':'setelement'
			  (4, S0, B)
		  in  do  %% Line 178
			  apply 'redraw'/1
			      (_cor24)
			  %% Line 179
			  {'reply','ok',_cor24}
	  %% Line 181
	  <{'setup_board',Init},_X_From,State> when 'true' ->
	      let <_cor30> =
		  %% Line 182
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor28) ->
				case _cor28 of
				  <[{Key,Val}|_cor27]> when 'true' ->
				      let <_cor29> =
					  apply 'lc$^0'/1
					      (_cor27)
				      in  ( [{'sq',Key,Val,'true','true'}|_cor29]
					    -| ['compiler_generated'] )
				  ( <[_cor26|_cor27]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor27)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor28> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor28})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Init)
		    -| ['list_comprehension'] )
	      in  %% Line 183
		  case State of
		    <{'state',_cor122,_cor123,_cor124,_cor125,_cor126}> when 'true' ->
			let <_cor34> =
			    call 'erlang':'setelement'
				(4, State, _cor30)
			in  do  %% Line 184
				apply 'redraw'/1
				    (_cor34)
				%% Line 185
				{'reply','ok',_cor34}
		    ( <_cor127> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 187
	  <'clear_board',_X_From,State = {'state',_cor128,_cor129,B0,_cor130,_cor131}> when 'true' ->
	      let <_cor40> =
		  %% Line 188
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor38) ->
				case _cor38 of
				  <[Butt = {'sq',_cor132,_cor133,_cor134,'true'}|_cor37]> when 'true' ->
				      let <_cor39> =
					  apply 'lc$^1'/1
					      (_cor37)
				      in  ( [Butt|_cor39]
					    -| ['compiler_generated'] )
				  ( <[_cor36|_cor37]> when 'true' ->
					apply 'lc$^1'/1
					    (_cor37)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor38> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor38})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (B0)
		    -| ['list_comprehension'] )
	      in  let <_cor44> =
		      %% Line 189
		      call 'erlang':'setelement'
			  (4, State, _cor40)
		  in  do  %% Line 190
			  apply 'redraw'/1
			      (_cor44)
			  let <_cor50> =
			      %% Line 191
			      ( letrec
				    'lc$^2'/1 =
					fun (_cor48) ->
					    case _cor48 of
					      <[{'sq',Key,Val,_cor141,'true'}|_cor47]> when 'true' ->
						  let <_cor49> =
						      apply 'lc$^2'/1
							  (_cor47)
						  in  ( [{Key,Val}|_cor49]
							-| ['compiler_generated'] )
					      ( <[_cor46|_cor47]> when 'true' ->
						    apply 'lc$^2'/1
							(_cor47)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor48> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor48})
						      -| [{'function_name',{'lc$^2',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^2'/1
					(_cor40)
				-| ['list_comprehension'] )
			  in  %% Line 192
			      {'reply',_cor50,_cor44}
	  %% Line 193
	  <'get_board_data',_X_From,S = {'state',_cor142,_cor143,B0,_cor144,_cor145}> when 'true' ->
	      %% Line 194
	      {'reply',B0,S}
	  %% Line 195
	  <{'set_board_data',B},_X_From,S0> when 'true' ->
	      %% Line 196
	      case S0 of
		<{'state',_cor146,_cor147,_cor148,_cor149,_cor150}> when 'true' ->
		    let <_cor54> =
			call 'erlang':'setelement'
			    (4, S0, B)
		    in  do  %% Line 197
			    apply 'redraw'/1
				(_cor54)
			    let <_cor60> =
				%% Line 198
				( letrec
				      'lc$^3'/1 =
					  fun (_cor58) ->
					      case _cor58 of
						<[{'sq',Key,Val,_cor152,'true'}|_cor57]> when 'true' ->
						    let <_cor59> =
							apply 'lc$^3'/1
							    (_cor57)
						    in  ( [{Key,Val}|_cor59]
							  -| ['compiler_generated'] )
						( <[_cor56|_cor57]> when 'true' ->
						      apply 'lc$^3'/1
							  (_cor57)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor58> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor58})
							-| [{'function_name',{'lc$^3',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^3'/1
					  (B)
				  -| ['list_comprehension'] )
			    in  let <_cor66> =
				    %% Line 199
				    ( letrec
					  'lc$^4'/1 =
					      fun (_cor64) ->
						  case _cor64 of
						    <[{'sq',Key,Val,'true','false'}|_cor63]> when 'true' ->
							let <_cor65> =
							    apply 'lc$^4'/1
								(_cor63)
							in  ( [{Key,Val}|_cor65]
							      -| ['compiler_generated'] )
						    ( <[_cor62|_cor63]> when 'true' ->
							  apply 'lc$^4'/1
							      (_cor63)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor64> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor64})
							    -| [{'function_name',{'lc$^4',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^4'/1
					      (B)
				      -| ['list_comprehension'] )
				in  let <_cor72> =
					%% Line 200
					( letrec
					      'lc$^5'/1 =
						  fun (_cor70) ->
						      case _cor70 of
							<[{'sq',Key,Val,'false','false'}|_cor69]> when 'true' ->
							    let <_cor71> =
								apply 'lc$^5'/1
								    (_cor69)
							    in  ( [{Key,Val}|_cor71]
								  -| ['compiler_generated'] )
							( <[_cor68|_cor69]> when 'true' ->
							      apply 'lc$^5'/1
								  (_cor69)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor70> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor70})
								-| [{'function_name',{'lc$^5',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^5'/1
						  (B)
					  -| ['list_comprehension'] )
				    in  let <_cor74> =
					    %% Line 201
					    call 'erlang':'++'
						(_cor66, _cor72)
					in  let <_cor75> =
						%% Line 201
						call 'erlang':'++'
						    (_cor60, _cor74)
					    in  %% Line 201
						{'reply',_cor75,_cor54}
		( <_cor151> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 202
	  <'left',_X_From,S = {'state',_cor153,_cor154,B,_cor155,_cor156}> when 'true' ->
	      let <_cor80> =
		  %% Line 203
		  ( letrec
			'lc$^6'/1 =
			    fun (_cor78) ->
				case _cor78 of
				  <[{'sq',_cor157,_cor158,C,_cor159}|_cor77]>
				      when call 'erlang':'=/='
					    (C,
					     'false') ->
				      let <_cor79> =
					  apply 'lc$^6'/1
					      (_cor77)
				      in  ( ['ok'|_cor79]
					    -| ['compiler_generated'] )
				  ( <[_cor76|_cor77]> when 'true' ->
					apply 'lc$^6'/1
					    (_cor77)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor78> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor78})
					  -| [{'function_name',{'lc$^6',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^6'/1
			    (B)
		    -| ['list_comprehension'] )
	      in  let <_cor81> =
		      %% Line 203
		      call 'erlang':'length'
			  (_cor80)
		  in  let <Res> =
			  %% Line 203
			  call 'erlang':'-'
			      (81, _cor81)
		      in  %% Line 204
			  {'reply',Res,S}
	  %% Line 205
	  <'get_state',_X_From,S> when 'true' ->
	      %% Line 206
	      {'reply',{'ok',S},S}
	  ( <_cor85,_cor84,_cor83> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor85,_cor84,_cor83})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	do  %% Line 209
	    call 'io':'format'
		([71|[111|[116|[32|[99|[97|[115|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]], [_cor1|[]])
	    %% Line 210
	    {'noreply',_cor0}
'code_change'/3 =
    %% Line 212
    fun (_cor2,_cor1,_cor0) ->
	%% Line 213
	{'stop','not_yet_implemented',_cor0}
'handle_info'/2 =
    %% Line 215
    fun (_cor1,_cor0) ->
	%% Line 216
	{'stop',{'info',_cor1},_cor0}
'terminate'/2 =
    %% Line 218
    fun (_cor1,_cor0) ->
	%% Line 219
	'normal'
'get_butt'/3 =
    %% Line 226
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,Y,{'state',Win,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 227
	      case call 'wxWindow':'getSize'
		       (Win) of
		<{W0,H0}> when 'true' ->
		    let <BoxSz> =
			%% Line 228
			apply 'getGeomSz'/2
			    (W0, H0)
		    in  let <_cor6> =
			    %% Line 230
			    call 'erlang':'-'
				(X, 10)
			in  let <_cor5> =
				%% Line 230
				call 'erlang':'-'
				    (Y, 10)
			    in  %% Line 230
				case apply 'calc_pos'/3
					 (_cor6, _cor5, BoxSz) of
				  %% Line 231
				  <Pos = {R,C}>
				      when try
					    let <_cor7> =
						call 'erlang':'<'
						    (0, R)
					    in  let <_cor8> =
						    call 'erlang':'<'
							(R, 10)
						in  let <_cor9> =
							call 'erlang':'<'
							    (0, C)
						    in  let <_cor10> =
							    call 'erlang':'<'
								(C, 10)
							in  let <_cor11> =
								call 'erlang':'and'
								    (_cor9, _cor10)
							    in  let <_cor12> =
								    call 'erlang':'and'
									(_cor8, _cor11)
								in  call 'erlang':'and'
									(_cor7, _cor12)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      Pos
				  %% Line 232
				  <_cor21> when 'true' ->
				      'error'
				end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'get_butt',3}}] )
	    -| ['compiler_generated'] )
	end
'calc_pos'/3 =
    %% Line 235
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 236
	    call 'erlang':'*'
		(_cor1, 3)
	in  let <_cor7> =
		%% Line 236
		call 'erlang':'div'
		    (_cor6, _cor0)
	    in  let <_cor8> =
		    %% Line 236
		    call 'erlang':'+'
			(1, _cor7)
		in  let <_cor3> =
			%% Line 236
			call 'erlang':'*'
			    (_cor2, 3)
		    in  let <_cor4> =
			    %% Line 236
			    call 'erlang':'div'
				(_cor3, _cor0)
			in  let <_cor5> =
				%% Line 236
				call 'erlang':'+'
				    (1, _cor4)
			    in  %% Line 236
				{_cor8,_cor5}
'redraw'/1 =
    %% Line 238
    fun (_cor0) ->
	case _cor0 of
	  <S = {'state',Win,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      let <DC0> =
		  %% Line 239
		  call 'wxClientDC':'new'
		      (Win)
	      in  let <DC> =
		      %% Line 240
		      call 'wxBufferedDC':'new'
			  (DC0)
		  in  let <Size> =
			  %% Line 241
			  call 'wxWindow':'getSize'
			      (Win)
		      in  do  %% Line 242
			      apply 'redraw'/3
				  (DC, Size, S)
			      do  %% Line 243
				  call 'wxBufferedDC':'destroy'
				      (DC)
				  do  %% Line 244
				      call 'wxClientDC':'destroy'
					  (DC0)
				      %% Line 245
				      'ok'
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'redraw',1}}] )
	    -| ['compiler_generated'] )
	end
'redraw'/3 =
    %% Line 247
    fun (_cor2,_cor1,_cor0) ->
	let <_cor16> =
	    %% Line 248
	    ( fun () ->
		  let <_cor3> =
		      %% Line 249
		      call 'wxe_util':'get_const'
			  ('wxWHITE_BRUSH')
		  in  do  %% Line 249
			  call 'wxDC':'setBackground'
			      (_cor2, _cor3)
			  do  %% Line 250
			      call 'wxDC':'clear'
				  (_cor2)
			      let <BoxSz> =
				  %% Line 251
				  apply 'draw_board'/3
				      (_cor2, _cor1, _cor0)
			      in  let <_cor7> =
				      %% Line 252
				      call 'erlang':'div'
					  (BoxSz, 3)
				  in  %% Line 252
				      ( case _cor0 of
					  ( <( {'state',_cor20,_cor21,_cor22,_cor23,_rec7}
					       -| ['compiler_generated'] )> when 'true' ->
						let <F> =
						    apply 'sel_font'/2
							(_cor7, _rec7)
						in  %% Line 253
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor13) ->
								  case _cor13 of
								    <[Sq|_cor10]> when 'true' ->
									let <_cor14> =
									    apply 'draw_number'/4
										(_cor2, F, BoxSz, Sq)
									in  let <_cor15> =
										apply 'lc$^0'/1
										    (_cor10)
									    in  ( [_cor14|_cor15]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor13> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor13})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      (_cor22)
						      -| ['list_comprehension'] )
					    -| ['compiler_generated'] )
					  ( <_cor24> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
	      -| [{'id',{0,0,'-redraw/3-fun-0-'}}] )
	in  %% Line 248
	    call 'wx':'batch'
		(_cor16)
'sel_font'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_BS,[{_X_H,_X_Sz,F}|[]]> when 'true' ->
	      %% Line 258
	      F
	  %% Line 259
	  <BS,[{H,_X_Sz,F}|_cor5]>
	      when try
		    let <_cor2> =
			call 'erlang':'+'
			    (H, 6)
		    in  call 'erlang':'>'
			    (BS, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 261
	      F
	  %% Line 262
	  <BS,[_cor6|Fs]> when 'true' ->
	      %% Line 263
	      apply 'sel_font'/2
		  (BS, Fs)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'sel_font',2}}] )
	    -| ['compiler_generated'] )
	end
'draw_number'/4 =
    %% Line 265
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <DC,F,Sz,{'sq',{R,C},Num,Correct,Bold}> when 'true' ->
	      let <_cor5> =
		  %% Line 266
		  call 'erlang':'-'
		      (R, 1)
	      in  let <_cor4> =
		      %% Line 266
		      call 'erlang':'-'
			  (C, 1)
		  in  %% Line 266
		      case apply 'get_coords'/3
			       (Sz, _cor5, _cor4) of
			<{X,Y}> when 'true' ->
			    let <TBox> =
				%% Line 267
				call 'erlang':'div'
				    (Sz, 3)
			    in  do  %% Line 268
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(Bold,
						 'true') ->
					  do  %% Line 269
					      call 'wxFont':'setWeight'
						  (F, 92)
					      %% Line 270
					      call 'wxDC':'setTextForeground'
						  (DC, {0,0,0})
				      %% Line 271
				      <>
					  when call 'erlang':'=:='
						(Correct,
						 'false') ->
					  do  %% Line 272
					      call 'wxFont':'setWeight'
						  (F, 90)
					      %% Line 273
					      call 'wxDC':'setTextForeground'
						  (DC, {255,40,40,255})
				      %% Line 274
				      <> when 'true' ->
					  do  %% Line 275
					      call 'wxFont':'setWeight'
						  (F, 90)
					      %% Line 276
					      call 'wxDC':'setTextForeground'
						  (DC, {50,50,100,255})
				    end
				    do  %% Line 278
					call 'wxDC':'setFont'
					    (DC, F)
					let <_cor8> =
					    %% Line 279
					    call 'wxDC':'getCharHeight'
						(DC)
					in  let <_cor9> =
						%% Line 279
						call 'erlang':'-'
						    (TBox, _cor8)
					    in  let <CH> =
						    %% Line 279
						    call 'erlang':'div'
							(_cor9, 2)
						in  let <_cor11> =
							%% Line 280
							call 'wxDC':'getCharWidth'
							    (DC)
						    in  let <_cor12> =
							    %% Line 280
							    call 'erlang':'-'
								(TBox, _cor11)
							in  let <CW> =
								%% Line 280
								call 'erlang':'div'
								    (_cor12, 2)
							    in  let <_cor17> =
								    %% Line 281
								    call 'erlang':'integer_to_list'
									(Num)
								in  let <_cor16> =
									%% Line 281
									call 'erlang':'+'
									    (X, CW)
								    in  let <_cor14> =
									    %% Line 281
									    call 'erlang':'+'
										(Y, CH)
									in  let <_cor15> =
										%% Line 281
										call 'erlang':'+'
										    (_cor14, 1)
									    in  do  %% Line 281
										    call 'wxDC':'drawText'
											(DC, _cor17, {_cor16,_cor15})
										    %% Line 282
										    'ok'
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'draw_number',4}}] )
	    -| ['compiler_generated'] )
	end
'get_coords'/3 =
    %% Line 284
    fun (_cor2,_cor1,_cor0) ->
	let <TBox> =
	    %% Line 285
	    call 'erlang':'div'
		(_cor2, 3)
	in  let <R1> =
		%% Line 286
		call 'erlang':'div'
		    (_cor1, 3)
	    in  let <R2> =
		    %% Line 287
		    call 'erlang':'rem'
			(_cor1, 3)
		in  let <C1> =
			%% Line 288
			call 'erlang':'div'
			    (_cor0, 3)
		    in  let <C2> =
			    %% Line 289
			    call 'erlang':'rem'
				(_cor0, 3)
			in  let <_cor13> =
				%% Line 290
				call 'erlang':'*'
				    (C1, _cor2)
			    in  let <_cor14> =
				    %% Line 290
				    call 'erlang':'+'
					(10, _cor13)
				in  let <_cor12> =
					%% Line 290
					call 'erlang':'*'
					    (C2, TBox)
				    in  let <_cor15> =
					    %% Line 290
					    call 'erlang':'+'
						(_cor14, _cor12)
					in  let <_cor9> =
						%% Line 291
						call 'erlang':'*'
						    (R1, _cor2)
					    in  let <_cor10> =
						    %% Line 291
						    call 'erlang':'+'
							(10, _cor9)
						in  let <_cor8> =
							%% Line 291
							call 'erlang':'*'
							    (R2, TBox)
						    in  let <_cor11> =
							    %% Line 291
							    call 'erlang':'+'
								(_cor10, _cor8)
							in  %% Line 290
							    {_cor15,_cor11}
'draw_board'/3 =
    %% Line 293
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <DC,{W0,H0},{'state',_cor87,_cor88,_cor89,Pen,_cor90}> when 'true' ->
	      let <BoxSz> =
		  %% Line 294
		  apply 'getGeomSz'/2
		      (W0, H0)
	      in  let <_cor4> =
		      %% Line 295
		      call 'erlang':'*'
			  (3, BoxSz)
		  in  let <BS> =
			  %% Line 295
			  call 'erlang':'+'
			      (10, _cor4)
		      in  do  %% Line 297
			      call 'wxPen':'setWidth'
				  (Pen, 3)
			      do  %% Line 298
				  call 'wxPen':'setColour'
				      (Pen, {0,0,0})
				  do  %% Line 299
				      call 'wxDC':'setPen'
					  (DC, Pen)
				      let <_cor9> =
					  %% Line 301
					  call 'erlang':'*'
					      (3, BoxSz)
				      in  let <_cor10> =
					      %% Line 301
					      call 'erlang':'+'
						  (_cor9, 1)
					  in  let <_cor7> =
						  %% Line 301
						  call 'erlang':'*'
						      (3, BoxSz)
					      in  let <_cor8> =
						      %% Line 301
						      call 'erlang':'+'
							  (_cor7, 1)
						  in  do  %% Line 301
							  call 'wxDC':'drawRoundedRectangle'
							      (DC, {10,10,_cor10,_cor8}, 1.00000000000000000000e+01)
							  let <_cor11> =
							      %% Line 304
							      call 'erlang':'+'
								  (10, BoxSz)
							  in  let <_cor12> =
								  %% Line 304
								  call 'erlang':'+'
								      (10, BoxSz)
							      in  do  %% Line 304
								      call 'wxDC':'drawLines'
									  (DC, [{_cor11,10}|[{_cor12,BS}|[]]])
								      let <_cor15> =
									  %% Line 305
									  call 'erlang':'*'
									      (BoxSz, 2)
								      in  let <_cor16> =
									      %% Line 305
									      call 'erlang':'+'
										  (10, _cor15)
									  in  let <_cor13> =
										  %% Line 305
										  call 'erlang':'*'
										      (BoxSz, 2)
									      in  let <_cor14> =
										      %% Line 305
										      call 'erlang':'+'
											  (10, _cor13)
										  in  do  %% Line 305
											  call 'wxDC':'drawLine'
											      (DC, {_cor16,10}, {_cor14,BS})
											  let <_cor18> =
											      %% Line 306
											      call 'erlang':'+'
												  (10, BoxSz)
											  in  let <_cor17> =
												  %% Line 306
												  call 'erlang':'+'
												      (10, BoxSz)
											      in  do  %% Line 306
												      call 'wxDC':'drawLine'
													  (DC, {10,_cor18}, {BS,_cor17})
												      let <_cor21> =
													  %% Line 307
													  call 'erlang':'*'
													      (BoxSz, 2)
												      in  let <_cor22> =
													      %% Line 307
													      call 'erlang':'+'
														  (10, _cor21)
													  in  let <_cor19> =
														  %% Line 307
														  call 'erlang':'*'
														      (BoxSz, 2)
													      in  let <_cor20> =
														      %% Line 307
														      call 'erlang':'+'
															  (10, _cor19)
														  in  do  %% Line 307
															  call 'wxDC':'drawLine'
															      (DC, {10,_cor22}, {BS,_cor20})
															  do  %% Line 310
															      call 'wxPen':'setWidth'
																  (Pen, 1)
															      do  %% Line 311
																  call 'wxDC':'setPen'
																      (DC, Pen)
																  let <TBox> =
																      %% Line 312
																      call 'erlang':'div'
																	  (BoxSz, 3)
																  in  let <_cor25> =
																	  %% Line 313
																	  call 'erlang':'+'
																	      (10, TBox)
																      in  let <_cor24> =
																	      %% Line 313
																	      call 'erlang':'+'
																		  (10, TBox)
																	  in  do  %% Line 313
																		  call 'wxDC':'drawLine'
																		      (DC, {_cor25,10}, {_cor24,BS})
																		  let <_cor28> =
																		      %% Line 314
																		      call 'erlang':'*'
																			  (TBox, 2)
																		  in  let <_cor29> =
																			  %% Line 314
																			  call 'erlang':'+'
																			      (10, _cor28)
																		      in  let <_cor26> =
																			      %% Line 314
																			      call 'erlang':'*'
																				  (TBox, 2)
																			  in  let <_cor27> =
																				  %% Line 314
																				  call 'erlang':'+'
																				      (10, _cor26)
																			      in  do  %% Line 314
																				      call 'wxDC':'drawLine'
																					  (DC, {_cor29,10}, {_cor27,BS})
																				      let <_cor32> =
																					  %% Line 315
																					  call 'erlang':'+'
																					      (10, TBox)
																				      in  let <_cor33> =
																					      %% Line 315
																					      call 'erlang':'+'
																						  (_cor32, BoxSz)
																					  in  let <_cor30> =
																						  %% Line 315
																						  call 'erlang':'+'
																						      (10, TBox)
																					      in  let <_cor31> =
																						      %% Line 315
																						      call 'erlang':'+'
																							  (_cor30, BoxSz)
																						  in  do  %% Line 315
																							  call 'wxDC':'drawLine'
																							      (DC, {_cor33,10}, {_cor31,BS})
																							  let <_cor37> =
																							      %% Line 316
																							      call 'erlang':'*'
																								  (TBox, 2)
																							  in  let <_cor38> =
																								  %% Line 316
																								  call 'erlang':'+'
																								      (10, _cor37)
																							      in  let <_cor39> =
																								      %% Line 316
																								      call 'erlang':'+'
																									  (_cor38, BoxSz)
																								  in  let <_cor34> =
																									  %% Line 316
																									  call 'erlang':'*'
																									      (TBox, 2)
																								      in  let <_cor35> =
																									      %% Line 316
																									      call 'erlang':'+'
																										  (10, _cor34)
																									  in  let <_cor36> =
																										  %% Line 316
																										  call 'erlang':'+'
																										      (_cor35, BoxSz)
																									      in  do  %% Line 316
																										      call 'wxDC':'drawLine'
																											  (DC, {_cor39,10}, {_cor36,BS})
																										      let <_cor44> =
																											  %% Line 317
																											  call 'erlang':'+'
																											      (10, TBox)
																										      in  let <_cor43> =
																											      %% Line 317
																											      call 'erlang':'*'
																												  (BoxSz, 2)
																											  in  let <_cor45> =
																												  %% Line 317
																												  call 'erlang':'+'
																												      (_cor44, _cor43)
																											      in  let <_cor41> =
																												      %% Line 317
																												      call 'erlang':'+'
																													  (10, TBox)
																												  in  let <_cor40> =
																													  %% Line 317
																													  call 'erlang':'*'
																													      (BoxSz, 2)
																												      in  let <_cor42> =
																													      %% Line 317
																													      call 'erlang':'+'
																														  (_cor41, _cor40)
																													  in  do  %% Line 317
																														  call 'wxDC':'drawLine'
																														      (DC, {_cor45,10}, {_cor42,BS})
																														  let <_cor51> =
																														      %% Line 318
																														      call 'erlang':'*'
																															  (TBox, 2)
																														  in  let <_cor52> =
																															  %% Line 318
																															  call 'erlang':'+'
																															      (10, _cor51)
																														      in  let <_cor50> =
																															      %% Line 318
																															      call 'erlang':'*'
																																  (BoxSz, 2)
																															  in  let <_cor53> =
																																  %% Line 318
																																  call 'erlang':'+'
																																      (_cor52, _cor50)
																															      in  let <_cor47> =
																																      %% Line 318
																																      call 'erlang':'*'
																																	  (TBox, 2)
																																  in  let <_cor48> =
																																	  %% Line 318
																																	  call 'erlang':'+'
																																	      (10, _cor47)
																																      in  let <_cor46> =
																																	      %% Line 318
																																	      call 'erlang':'*'
																																		  (BoxSz, 2)
																																	  in  let <_cor49> =
																																		  %% Line 318
																																		  call 'erlang':'+'
																																		      (_cor48, _cor46)
																																	      in  do  %% Line 318
																																		      call 'wxDC':'drawLine'
																																			  (DC, {_cor53,10}, {_cor49,BS})
																																		      let <_cor55> =
																																			  %% Line 320
																																			  call 'erlang':'+'
																																			      (10, TBox)
																																		      in  let <_cor54> =
																																			      %% Line 320
																																			      call 'erlang':'+'
																																				  (10, TBox)
																																			  in  do  %% Line 320
																																				  call 'wxDC':'drawLine'
																																				      (DC, {10,_cor55}, {BS,_cor54})
																																				  let <_cor58> =
																																				      %% Line 321
																																				      call 'erlang':'*'
																																					  (TBox, 2)
																																				  in  let <_cor59> =
																																					  %% Line 321
																																					  call 'erlang':'+'
																																					      (10, _cor58)
																																				      in  let <_cor56> =
																																					      %% Line 321
																																					      call 'erlang':'*'
																																						  (TBox, 2)
																																					  in  let <_cor57> =
																																						  %% Line 321
																																						  call 'erlang':'+'
																																						      (10, _cor56)
																																					      in  do  %% Line 321
																																						      call 'wxDC':'drawLine'
																																							  (DC, {10,_cor59}, {BS,_cor57})
																																						      let <_cor62> =
																																							  %% Line 322
																																							  call 'erlang':'+'
																																							      (10, TBox)
																																						      in  let <_cor63> =
																																							      %% Line 322
																																							      call 'erlang':'+'
																																								  (_cor62, BoxSz)
																																							  in  let <_cor60> =
																																								  %% Line 322
																																								  call 'erlang':'+'
																																								      (10, TBox)
																																							      in  let <_cor61> =
																																								      %% Line 322
																																								      call 'erlang':'+'
																																									  (_cor60, BoxSz)
																																								  in  do  %% Line 322
																																									  call 'wxDC':'drawLine'
																																									      (DC, {10,_cor63}, {BS,_cor61})
																																									  let <_cor67> =
																																									      %% Line 323
																																									      call 'erlang':'*'
																																										  (TBox, 2)
																																									  in  let <_cor68> =
																																										  %% Line 323
																																										  call 'erlang':'+'
																																										      (10, _cor67)
																																									      in  let <_cor69> =
																																										      %% Line 323
																																										      call 'erlang':'+'
																																											  (_cor68, BoxSz)
																																										  in  let <_cor64> =
																																											  %% Line 323
																																											  call 'erlang':'*'
																																											      (TBox, 2)
																																										      in  let <_cor65> =
																																											      %% Line 323
																																											      call 'erlang':'+'
																																												  (10, _cor64)
																																											  in  let <_cor66> =
																																												  %% Line 323
																																												  call 'erlang':'+'
																																												      (_cor65, BoxSz)
																																											      in  do  %% Line 323
																																												      call 'wxDC':'drawLine'
																																													  (DC, {10,_cor69}, {BS,_cor66})
																																												      let <_cor74> =
																																													  %% Line 324
																																													  call 'erlang':'+'
																																													      (10, TBox)
																																												      in  let <_cor73> =
																																													      %% Line 324
																																													      call 'erlang':'*'
																																														  (BoxSz, 2)
																																													  in  let <_cor75> =
																																														  %% Line 324
																																														  call 'erlang':'+'
																																														      (_cor74, _cor73)
																																													      in  let <_cor71> =
																																														      %% Line 324
																																														      call 'erlang':'+'
																																															  (10, TBox)
																																														  in  let <_cor70> =
																																															  %% Line 324
																																															  call 'erlang':'*'
																																															      (BoxSz, 2)
																																														      in  let <_cor72> =
																																															      %% Line 324
																																															      call 'erlang':'+'
																																																  (_cor71, _cor70)
																																															  in  do  %% Line 324
																																																  call 'wxDC':'drawLine'
																																																      (DC, {10,_cor75}, {BS,_cor72})
																																																  let <_cor81> =
																																																      %% Line 325
																																																      call 'erlang':'*'
																																																	  (TBox, 2)
																																																  in  let <_cor82> =
																																																	  %% Line 325
																																																	  call 'erlang':'+'
																																																	      (10, _cor81)
																																																      in  let <_cor80> =
																																																	      %% Line 325
																																																	      call 'erlang':'*'
																																																		  (BoxSz, 2)
																																																	  in  let <_cor83> =
																																																		  %% Line 325
																																																		  call 'erlang':'+'
																																																		      (_cor82, _cor80)
																																																	      in  let <_cor77> =
																																																		      %% Line 325
																																																		      call 'erlang':'*'
																																																			  (TBox, 2)
																																																		  in  let <_cor78> =
																																																			  %% Line 325
																																																			  call 'erlang':'+'
																																																			      (10, _cor77)
																																																		      in  let <_cor76> =
																																																			      %% Line 325
																																																			      call 'erlang':'*'
																																																				  (BoxSz, 2)
																																																			  in  let <_cor79> =
																																																				  %% Line 325
																																																				  call 'erlang':'+'
																																																				      (_cor78, _cor76)
																																																			      in  do  %% Line 325
																																																				      call 'wxDC':'drawLine'
																																																					  (DC, {10,_cor83}, {BS,_cor79})
																																																				      %% Line 326
																																																				      BoxSz
	  ( <_cor86,_cor85,_cor84> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor86,_cor85,_cor84})
		  -| [{'function_name',{'draw_board',3}}] )
	    -| ['compiler_generated'] )
	end
'getGeomSz'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 329
	    case <> of
	      <>
		  when call 'erlang':'<'
			(_cor1,
			 _cor0) ->
		  _cor1
	      <> when 'true' ->
		  _cor0
	    end
	in  let <_cor5> =
		%% Line 330
		call 'erlang':'-'
		    (_cor2, 20)
	    in  %% Line 330
		call 'erlang':'div'
		    (_cor5, 3)
'create_popup_menu'/5 =
    %% Line 335
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Port> =
	    %% Line 336
	    call 'wx':'get_env'
		()
	in  let <_cor6> =
		%% Line 337
		( fun () ->
		      apply 'create_popup_menu1'/6
			  (_cor4, _cor3, Port, _cor2, _cor1, _cor0)
		  -| [{'id',{0,0,'-create_popup_menu/5-fun-0-'}}] )
	    in  %% Line 337
		call 'erlang':'spawn_link'
		    (_cor6)
'create_popup_menu1'/6 =
    %% Line 339
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 340
	    call 'wx':'set_env'
		(_cor3)
	    let <PopupMenu> =
		%% Line 341
		call 'wxMenu':'new'
		    ()
	    in  do  %% Line 342
		    apply 'create_popup_menu2'/2
			(1, PopupMenu)
		    do  %% Line 344
			call 'wxEvtHandler':'connect'
			    (PopupMenu, 'command_menu_selected')
			do  %% Line 345
			    call 'wxWindow':'popupMenu'
				(_cor0, PopupMenu, _cor2, _cor1)
			    %% Line 346
			    receive
			      %% Line 347
			      <{'wx',10,_cor13,_cor14,{'wxCommand','command_menu_selected',_cor15,_cor16,_cor17}}> when 'true' ->
				  %% Line 348
				  call 'erlang':'!'
				      (_cor5, {'set_val',_cor4,0})
			      %% Line 349
			      <{'wx',What,_cor18,_cor19,{'wxCommand','command_menu_selected',_cor20,_cor21,_cor22}}> when 'true' ->
				  %% Line 350
				  call 'erlang':'!'
				      (_cor5, {'set_val',_cor4,What})
			    after 'infinity' ->
			      'true'
'create_popup_menu2'/2 =
    %% Line 353
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,PP>
	      when call 'erlang':'>'
		    (N,
		     9) ->
	      %% Line 354
	      call 'wxMenu':'append'
		  (PP, 10, [67|[108|[101|[97|[114]]]]])
	  %% Line 355
	  <N,PP> when 'true' ->
	      let <_cor2> =
		  %% Line 356
		  call 'erlang':'integer_to_list'
		      (N)
	      in  do  %% Line 356
		      call 'wxMenu':'append'
			  (PP, N, _cor2)
		      let <_cor3> =
			  %% Line 357
			  call 'erlang':'+'
			      (N, 1)
		      in  %% Line 357
			  apply 'create_popup_menu2'/2
			      (_cor3, PP)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sudoku_board')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('sudoku_board', _cor0)
end