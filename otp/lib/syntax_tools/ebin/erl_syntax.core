module 'erl_syntax' ['abstract'/1,
		     'add_ann'/2,
		     'add_postcomments'/2,
		     'add_precomments'/2,
		     'application'/2,
		     'application'/3,
		     'application_arguments'/1,
		     'application_operator'/1,
		     'arity_qualifier'/2,
		     'arity_qualifier_argument'/1,
		     'arity_qualifier_body'/1,
		     'atom'/1,
		     'atom_literal'/1,
		     'atom_name'/1,
		     'atom_value'/1,
		     'attribute'/1,
		     'attribute'/2,
		     'attribute_arguments'/1,
		     'attribute_name'/1,
		     'binary'/1,
		     'binary_comp'/2,
		     'binary_comp_body'/1,
		     'binary_comp_template'/1,
		     'binary_field'/1,
		     'binary_field'/2,
		     'binary_field'/3,
		     'binary_field_body'/1,
		     'binary_field_size'/1,
		     'binary_field_types'/1,
		     'binary_fields'/1,
		     'binary_generator'/2,
		     'binary_generator_body'/1,
		     'binary_generator_pattern'/1,
		     'block_expr'/1,
		     'block_expr_body'/1,
		     'case_expr'/2,
		     'case_expr_argument'/1,
		     'case_expr_clauses'/1,
		     'catch_expr'/1,
		     'catch_expr_body'/1,
		     'char'/1,
		     'char_literal'/1,
		     'char_literal'/2,
		     'char_value'/1,
		     'class_qualifier'/2,
		     'class_qualifier_argument'/1,
		     'class_qualifier_body'/1,
		     'clause'/2,
		     'clause'/3,
		     'clause_body'/1,
		     'clause_guard'/1,
		     'clause_patterns'/1,
		     'comment'/1,
		     'comment'/2,
		     'comment_padding'/1,
		     'comment_text'/1,
		     'compact_list'/1,
		     'concrete'/1,
		     'cond_expr'/1,
		     'cond_expr_clauses'/1,
		     'conjunction'/1,
		     'conjunction_body'/1,
		     'cons'/2,
		     'copy_ann'/2,
		     'copy_attrs'/2,
		     'copy_comments'/2,
		     'copy_pos'/2,
		     'data'/1,
		     'disjunction'/1,
		     'disjunction_body'/1,
		     'eof_marker'/0,
		     'error_marker'/1,
		     'error_marker_info'/1,
		     'flatten_form_list'/1,
		     'float'/1,
		     'float_literal'/1,
		     'float_value'/1,
		     'form_list'/1,
		     'form_list_elements'/1,
		     'fun_expr'/1,
		     'fun_expr_arity'/1,
		     'fun_expr_clauses'/1,
		     'function'/2,
		     'function_arity'/1,
		     'function_clauses'/1,
		     'function_name'/1,
		     'generator'/2,
		     'generator_body'/1,
		     'generator_pattern'/1,
		     'get_ann'/1,
		     'get_attrs'/1,
		     'get_pos'/1,
		     'get_postcomments'/1,
		     'get_precomments'/1,
		     'has_comments'/1,
		     'if_expr'/1,
		     'if_expr_clauses'/1,
		     'implicit_fun'/1,
		     'implicit_fun'/2,
		     'implicit_fun'/3,
		     'implicit_fun_name'/1,
		     'infix_expr'/3,
		     'infix_expr_left'/1,
		     'infix_expr_operator'/1,
		     'infix_expr_right'/1,
		     'integer'/1,
		     'integer_literal'/1,
		     'integer_value'/1,
		     'is_atom'/2,
		     'is_char'/2,
		     'is_form'/1,
		     'is_integer'/2,
		     'is_leaf'/1,
		     'is_list_skeleton'/1,
		     'is_literal'/1,
		     'is_proper_list'/1,
		     'is_string'/2,
		     'is_tree'/1,
		     'join_comments'/2,
		     'list'/1,
		     'list'/2,
		     'list_comp'/2,
		     'list_comp_body'/1,
		     'list_comp_template'/1,
		     'list_elements'/1,
		     'list_head'/1,
		     'list_length'/1,
		     'list_prefix'/1,
		     'list_suffix'/1,
		     'list_tail'/1,
		     'macro'/1,
		     'macro'/2,
		     'macro_arguments'/1,
		     'macro_name'/1,
		     'make_tree'/2,
		     'map_expr'/1,
		     'map_expr'/2,
		     'map_expr_argument'/1,
		     'map_expr_fields'/1,
		     'map_field_assoc'/2,
		     'map_field_assoc_name'/1,
		     'map_field_assoc_value'/1,
		     'map_field_exact'/2,
		     'map_field_exact_name'/1,
		     'map_field_exact_value'/1,
		     'match_expr'/2,
		     'match_expr_body'/1,
		     'match_expr_pattern'/1,
		     'meta'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'module_qualifier'/2,
		     'module_qualifier_argument'/1,
		     'module_qualifier_body'/1,
		     'named_fun_expr'/2,
		     'named_fun_expr_arity'/1,
		     'named_fun_expr_clauses'/1,
		     'named_fun_expr_name'/1,
		     'nil'/0,
		     'normalize_list'/1,
		     'operator'/1,
		     'operator_literal'/1,
		     'operator_name'/1,
		     'parentheses'/1,
		     'parentheses_body'/1,
		     'prefix_expr'/2,
		     'prefix_expr_argument'/1,
		     'prefix_expr_operator'/1,
		     'receive_expr'/1,
		     'receive_expr'/3,
		     'receive_expr_action'/1,
		     'receive_expr_clauses'/1,
		     'receive_expr_timeout'/1,
		     'record_access'/2,
		     'record_access'/3,
		     'record_access_argument'/1,
		     'record_access_field'/1,
		     'record_access_type'/1,
		     'record_expr'/2,
		     'record_expr'/3,
		     'record_expr_argument'/1,
		     'record_expr_fields'/1,
		     'record_expr_type'/1,
		     'record_field'/1,
		     'record_field'/2,
		     'record_field_name'/1,
		     'record_field_value'/1,
		     'record_index_expr'/2,
		     'record_index_expr_field'/1,
		     'record_index_expr_type'/1,
		     'remove_comments'/1,
		     'revert'/1,
		     'revert_forms'/1,
		     'rule'/2,
		     'rule_arity'/1,
		     'rule_clauses'/1,
		     'rule_name'/1,
		     'set_ann'/2,
		     'set_attrs'/2,
		     'set_pos'/2,
		     'set_postcomments'/2,
		     'set_precomments'/2,
		     'size_qualifier'/2,
		     'size_qualifier_argument'/1,
		     'size_qualifier_body'/1,
		     'string'/1,
		     'string_literal'/1,
		     'string_literal'/2,
		     'string_value'/1,
		     'subtrees'/1,
		     'text'/1,
		     'text_string'/1,
		     'tree'/1,
		     'tree'/2,
		     'try_after_expr'/2,
		     'try_expr'/2,
		     'try_expr'/3,
		     'try_expr'/4,
		     'try_expr_after'/1,
		     'try_expr_body'/1,
		     'try_expr_clauses'/1,
		     'try_expr_handlers'/1,
		     'tuple'/1,
		     'tuple_elements'/1,
		     'tuple_size'/1,
		     'type'/1,
		     'underscore'/0,
		     'update_tree'/2,
		     'variable'/1,
		     'variable_literal'/1,
		     'variable_name'/1,
		     'warning_marker'/1,
		     'warning_marker_info'/1]
    attributes [%% Line 314
		'export_type' =
		    %% Line 314
		    [{'forms',0}|[{'syntaxTree',0}|[{'syntaxTreeAttributes',0}|[{'padding',0}]]]],
		%% Line 349
		'type' =
		    %% Line 349
		    [{{'record','com'},[{'typed_record_field',{'record_field',349,{'atom',349,'pre'},{'nil',349}},{'type',349,'list',[{'type',349,'syntaxTree',[]}]}}|[{'typed_record_field',{'record_field',350,{'atom',350,'post'},{'nil',350}},{'type',350,'list',[{'type',350,'syntaxTree',[]}]}}]],[]}],
		%% Line 363
		'type' =
		    %% Line 363
		    [{{'record','attr'},[{'typed_record_field',{'record_field',363,{'atom',363,'pos'},{'integer',363,0}},{'type',363,'term',[]}}|[{'typed_record_field',{'record_field',364,{'atom',364,'ann'},{'nil',364}},{'type',364,'list',[{'type',364,'term',[]}]}}|[{'typed_record_field',{'record_field',365,{'atom',365,'com'},{'atom',365,'none'}},{'type',365,'union',[{'atom',365,'none'}|[{'type',365,'record',[{'atom',365,'com'}]}]]}}]]],[]}],
		%% Line 366
		'type' =
		    %% Line 366
		    [{'syntaxTreeAttributes',{'type',366,'record',[{'atom',366,'attr'}]},[]}],
		%% Line 378
		'type' =
		    %% Line 378
		    [{{'record','tree'},[{'typed_record_field',{'record_field',378,{'atom',378,'type'}},{'type',378,'union',[{'atom',378,'undefined'}|[{'type',378,'atom',[]}]]}}|[{'typed_record_field',{'record_field',379,{'atom',379,'attr'},{'record',379,'attr',[]}},{'type',379,'record',[{'atom',379,'attr'}]}}|[{'typed_record_field',{'record_field',380,{'atom',380,'data'}},{'type',380,'union',[{'atom',380,'undefined'}|[{'type',380,'term',[]}]]}}]]],[]}],
		%% Line 393
		'type' =
		    %% Line 393
		    [{{'record','wrapper'},[{'typed_record_field',{'record_field',393,{'atom',393,'type'}},{'type',393,'union',[{'atom',393,'undefined'}|[{'type',393,'atom',[]}]]}}|[{'typed_record_field',{'record_field',394,{'atom',394,'attr'},{'record',394,'attr',[]}},{'type',394,'record',[{'atom',394,'attr'}]}}|[{'typed_record_field',{'record_field',395,{'atom',395,'tree'}},{'type',395,'union',[{'atom',395,'undefined'}|[{'type',395,'erl_parse',[]}]]}}]]],[]}],
		%% Line 399
		'type' =
		    %% Line 399
		    [{'syntaxTree',{'type',399,'union',[{'type',399,'record',[{'atom',399,'tree'}]}|[{'type',399,'record',[{'atom',399,'wrapper'}]}|[{'type',399,'erl_parse',[]}]]]},[]}],
		%% Line 401
		'type' =
		    %% Line 401
		    [{'erl_parse',{'type',401,'union',[{'remote_type',401,[{'atom',401,'erl_parse'}|[{'atom',401,'abstract_form'}|[[]]]]}|[{'remote_type',401,[{'atom',401,'erl_parse'}|[{'atom',401,'abstract_expr'}|[[]]]]}]]},[]}],
		%% Line 553
		'spec' =
		    %% Line 553
		    [{{'type',1},[{'type',553,'fun',[{'type',553,'product',[{'type',553,'syntaxTree',[]}]}|[{'type',553,'atom',[]}]]}]}],
		%% Line 657
		'spec' =
		    %% Line 657
		    [{{'is_leaf',1},[{'type',657,'fun',[{'type',657,'product',[{'type',657,'syntaxTree',[]}]}|[{'type',657,'boolean',[]}]]}]}],
		%% Line 712
		'spec' =
		    %% Line 712
		    [{{'is_form',1},[{'type',712,'fun',[{'type',712,'product',[{'type',712,'syntaxTree',[]}]}|[{'type',712,'boolean',[]}]]}]}],
		%% Line 746
		'spec' =
		    %% Line 746
		    [{{'get_pos',1},[{'type',746,'fun',[{'type',746,'product',[{'type',746,'syntaxTree',[]}]}|[{'type',746,'term',[]}]]}]}],
		%% Line 768
		'spec' =
		    %% Line 768
		    [{{'set_pos',2},[{'type',768,'fun',[{'type',768,'product',[{'type',768,'syntaxTree',[]}|[{'type',768,'term',[]}]]}|[{'type',768,'syntaxTree',[]}]]}]}],
		%% Line 792
		'spec' =
		    %% Line 792
		    [{{'copy_pos',2},[{'type',792,'fun',[{'type',792,'product',[{'type',792,'syntaxTree',[]}|[{'type',792,'syntaxTree',[]}]]}|[{'type',792,'syntaxTree',[]}]]}]}],
		%% Line 837
		'spec' =
		    %% Line 837
		    [{{'get_precomments',1},[{'type',837,'fun',[{'type',837,'product',[{'type',837,'syntaxTree',[]}]}|[{'type',837,'list',[{'type',837,'syntaxTree',[]}]}]]}]}],
		%% Line 860
		'spec' =
		    %% Line 860
		    [{{'set_precomments',2},[{'type',860,'fun',[{'type',860,'product',[{'type',860,'syntaxTree',[]}|[{'type',860,'list',[{'type',860,'syntaxTree',[]}]}]]}|[{'type',860,'syntaxTree',[]}]]}]}],
		%% Line 891
		'spec' =
		    %% Line 891
		    [{{'add_precomments',2},[{'type',891,'fun',[{'type',891,'product',[{'type',891,'list',[{'type',891,'syntaxTree',[]}]}|[{'type',891,'syntaxTree',[]}]]}|[{'type',891,'syntaxTree',[]}]]}]}],
		%% Line 930
		'spec' =
		    %% Line 930
		    [{{'get_postcomments',1},[{'type',930,'fun',[{'type',930,'product',[{'type',930,'syntaxTree',[]}]}|[{'type',930,'list',[{'type',930,'syntaxTree',[]}]}]]}]}],
		%% Line 953
		'spec' =
		    %% Line 953
		    [{{'set_postcomments',2},[{'type',953,'fun',[{'type',953,'product',[{'type',953,'syntaxTree',[]}|[{'type',953,'list',[{'type',953,'syntaxTree',[]}]}]]}|[{'type',953,'syntaxTree',[]}]]}]}],
		%% Line 984
		'spec' =
		    %% Line 984
		    [{{'add_postcomments',2},[{'type',984,'fun',[{'type',984,'product',[{'type',984,'list',[{'type',984,'syntaxTree',[]}]}|[{'type',984,'syntaxTree',[]}]]}|[{'type',984,'syntaxTree',[]}]]}]}],
		%% Line 1014
		'spec' =
		    %% Line 1014
		    [{{'has_comments',1},[{'type',1014,'fun',[{'type',1014,'product',[{'type',1014,'syntaxTree',[]}]}|[{'type',1014,'boolean',[]}]]}]}],
		%% Line 1041
		'spec' =
		    %% Line 1041
		    [{{'remove_comments',1},[{'type',1041,'fun',[{'type',1041,'product',[{'type',1041,'syntaxTree',[]}]}|[{'type',1041,'syntaxTree',[]}]]}]}],
		%% Line 1068
		'spec' =
		    %% Line 1068
		    [{{'copy_comments',2},[{'type',1068,'fun',[{'type',1068,'product',[{'type',1068,'syntaxTree',[]}|[{'type',1068,'syntaxTree',[]}]]}|[{'type',1068,'syntaxTree',[]}]]}]}],
		%% Line 1089
		'spec' =
		    %% Line 1089
		    [{{'join_comments',2},[{'type',1089,'fun',[{'type',1089,'product',[{'type',1089,'syntaxTree',[]}|[{'type',1089,'syntaxTree',[]}]]}|[{'type',1089,'syntaxTree',[]}]]}]}],
		%% Line 1105
		'spec' =
		    %% Line 1105
		    [{{'get_ann',1},[{'type',1105,'fun',[{'type',1105,'product',[{'type',1105,'syntaxTree',[]}]}|[{'type',1105,'list',[{'type',1105,'term',[]}]}]]}]}],
		%% Line 1119
		'spec' =
		    %% Line 1119
		    [{{'set_ann',2},[{'type',1119,'fun',[{'type',1119,'product',[{'type',1119,'syntaxTree',[]}|[{'type',1119,'list',[{'type',1119,'term',[]}]}]]}|[{'type',1119,'syntaxTree',[]}]]}]}],
		%% Line 1144
		'spec' =
		    %% Line 1144
		    [{{'add_ann',2},[{'type',1144,'fun',[{'type',1144,'product',[{'type',1144,'term',[]}|[{'type',1144,'syntaxTree',[]}]]}|[{'type',1144,'syntaxTree',[]}]]}]}],
		%% Line 1168
		'spec' =
		    %% Line 1168
		    [{{'copy_ann',2},[{'type',1168,'fun',[{'type',1168,'product',[{'type',1168,'syntaxTree',[]}|[{'type',1168,'syntaxTree',[]}]]}|[{'type',1168,'syntaxTree',[]}]]}]}],
		%% Line 1195
		'spec' =
		    %% Line 1195
		    [{{'get_attrs',1},[{'type',1195,'fun',[{'type',1195,'product',[{'type',1195,'syntaxTree',[]}]}|[{'type',1195,'syntaxTreeAttributes',[]}]]}]}],
		%% Line 1210
		'spec' =
		    %% Line 1210
		    [{{'set_attrs',2},[{'type',1210,'fun',[{'type',1210,'product',[{'type',1210,'syntaxTree',[]}|[{'type',1210,'syntaxTreeAttributes',[]}]]}|[{'type',1210,'syntaxTree',[]}]]}]}],
		%% Line 1232
		'spec' =
		    %% Line 1232
		    [{{'copy_attrs',2},[{'type',1232,'fun',[{'type',1232,'product',[{'type',1232,'syntaxTree',[]}|[{'type',1232,'syntaxTree',[]}]]}|[{'type',1232,'syntaxTree',[]}]]}]}],
		%% Line 1241
		'spec' =
		    %% Line 1241
		    [{{'comment',1},[{'type',1241,'fun',[{'type',1241,'product',[{'type',1241,'list',[{'type',1241,'string',[]}]}]}|[{'type',1241,'syntaxTree',[]}]]}]}],
		%% Line 1267
		'type' =
		    %% Line 1267
		    [{'padding',{'type',1267,'union',[{'atom',1267,'none'}|[{'type',1267,'integer',[]}]]},[]}],
		%% Line 1269
		'type' =
		    %% Line 1269
		    [{{'record','comment'},[{'typed_record_field',{'record_field',1269,{'atom',1269,'pad'}},{'type',1269,'union',[{'atom',1269,'undefined'}|[{'type',1269,'padding',[]}]]}}|[{'typed_record_field',{'record_field',1269,{'atom',1269,'text'}},{'type',1269,'union',[{'atom',1269,'undefined'}|[{'type',1269,'list',[{'type',1269,'string',[]}]}]]}}]],[]}],
		%% Line 1277
		'spec' =
		    %% Line 1277
		    [{{'comment',2},[{'type',1277,'fun',[{'type',1277,'product',[{'type',1277,'padding',[]}|[{'type',1277,'list',[{'type',1277,'string',[]}]}]]}|[{'type',1277,'syntaxTree',[]}]]}]}],
		%% Line 1288
		'spec' =
		    %% Line 1288
		    [{{'comment_text',1},[{'type',1288,'fun',[{'type',1288,'product',[{'type',1288,'syntaxTree',[]}]}|[{'type',1288,'list',[{'type',1288,'string',[]}]}]]}]}],
		%% Line 1300
		'spec' =
		    %% Line 1300
		    [{{'comment_padding',1},[{'type',1300,'fun',[{'type',1300,'product',[{'type',1300,'syntaxTree',[]}]}|[{'type',1300,'padding',[]}]]}]}],
		%% Line 1333
		'spec' =
		    %% Line 1333
		    [{{'form_list',1},[{'type',1333,'fun',[{'type',1333,'product',[{'type',1333,'list',[{'type',1333,'syntaxTree',[]}]}]}|[{'type',1333,'syntaxTree',[]}]]}]}],
		%% Line 1344
		'spec' =
		    %% Line 1344
		    [{{'form_list_elements',1},[{'type',1344,'fun',[{'type',1344,'product',[{'type',1344,'syntaxTree',[]}]}|[{'type',1344,'list',[{'type',1344,'syntaxTree',[]}]}]]}]}],
		%% Line 1358
		'spec' =
		    %% Line 1358
		    [{{'flatten_form_list',1},[{'type',1358,'fun',[{'type',1358,'product',[{'type',1358,'syntaxTree',[]}]}|[{'type',1358,'syntaxTree',[]}]]}]}],
		%% Line 1389
		'spec' =
		    %% Line 1389
		    [{{'text',1},[{'type',1389,'fun',[{'type',1389,'product',[{'type',1389,'string',[]}]}|[{'type',1389,'syntaxTree',[]}]]}]}],
		%% Line 1400
		'spec' =
		    %% Line 1400
		    [{{'text_string',1},[{'type',1400,'fun',[{'type',1400,'product',[{'type',1400,'syntaxTree',[]}]}|[{'type',1400,'string',[]}]]}]}],
		%% Line 1430
		'spec' =
		    %% Line 1430
		    [{{'variable',1},[{'type',1430,'fun',[{'type',1430,'product',[{'type',1430,'union',[{'type',1430,'atom',[]}|[{'type',1430,'string',[]}]]}]}|[{'type',1430,'syntaxTree',[]}]]}]}],
		%% Line 1448
		'spec' =
		    %% Line 1448
		    [{{'variable_name',1},[{'type',1448,'fun',[{'type',1448,'product',[{'type',1448,'syntaxTree',[]}]}|[{'type',1448,'atom',[]}]]}]}],
		%% Line 1464
		'spec' =
		    %% Line 1464
		    [{{'variable_literal',1},[{'type',1464,'fun',[{'type',1464,'product',[{'type',1464,'syntaxTree',[]}]}|[{'type',1464,'string',[]}]]}]}],
		%% Line 1489
		'spec' =
		    %% Line 1489
		    [{{'underscore',0},[{'type',1489,'fun',[{'type',1489,'product',[]}|[{'type',1489,'syntaxTree',[]}]]}]}],
		%% Line 1516
		'spec' =
		    %% Line 1516
		    [{{'integer',1},[{'type',1516,'fun',[{'type',1516,'product',[{'type',1516,'integer',[]}]}|[{'type',1516,'syntaxTree',[]}]]}]}],
		%% Line 1532
		'spec' =
		    %% Line 1532
		    [{{'is_integer',2},[{'type',1532,'fun',[{'type',1532,'product',[{'type',1532,'syntaxTree',[]}|[{'type',1532,'integer',[]}]]}|[{'type',1532,'boolean',[]}]]}]}],
		%% Line 1550
		'spec' =
		    %% Line 1550
		    [{{'integer_value',1},[{'type',1550,'fun',[{'type',1550,'product',[{'type',1550,'syntaxTree',[]}]}|[{'type',1550,'integer',[]}]]}]}],
		%% Line 1566
		'spec' =
		    %% Line 1566
		    [{{'integer_literal',1},[{'type',1566,'fun',[{'type',1566,'product',[{'type',1566,'syntaxTree',[]}]}|[{'type',1566,'string',[]}]]}]}],
		%% Line 1595
		'spec' =
		    %% Line 1595
		    [{{'float',1},[{'type',1595,'fun',[{'type',1595,'product',[{'type',1595,'float',[]}]}|[{'type',1595,'syntaxTree',[]}]]}]}],
		%% Line 1615
		'spec' =
		    %% Line 1615
		    [{{'float_value',1},[{'type',1615,'fun',[{'type',1615,'product',[{'type',1615,'syntaxTree',[]}]}|[{'type',1615,'float',[]}]]}]}],
		%% Line 1631
		'spec' =
		    %% Line 1631
		    [{{'float_literal',1},[{'type',1631,'fun',[{'type',1631,'product',[{'type',1631,'syntaxTree',[]}]}|[{'type',1631,'string',[]}]]}]}],
		%% Line 1662
		'spec' =
		    %% Line 1662
		    [{{'char',1},[{'type',1662,'fun',[{'type',1662,'product',[{'type',1662,'char',[]}]}|[{'type',1662,'syntaxTree',[]}]]}]}],
		%% Line 1678
		'spec' =
		    %% Line 1678
		    [{{'is_char',2},[{'type',1678,'fun',[{'type',1678,'product',[{'type',1678,'syntaxTree',[]}|[{'type',1678,'char',[]}]]}|[{'type',1678,'boolean',[]}]]}]}],
		%% Line 1696
		'spec' =
		    %% Line 1696
		    [{{'char_value',1},[{'type',1696,'fun',[{'type',1696,'product',[{'type',1696,'syntaxTree',[]}]}|[{'type',1696,'char',[]}]]}]}],
		%% Line 1714
		'spec' =
		    %% Line 1714
		    [{{'char_literal',1},[{'type',1714,'fun',[{'type',1714,'product',[{'type',1714,'syntaxTree',[]}]}|[{'type',1714,'nonempty_string',[]}]]}]}],
		%% Line 1728
		'type' =
		    %% Line 1728
		    [{'encoding',{'type',1728,'union',[{'atom',1728,'utf8'}|[{'atom',1728,'unicode'}|[{'atom',1728,'latin1'}]]]},[]}],
		%% Line 1730
		'spec' =
		    %% Line 1730
		    [{{'char_literal',2},[{'type',1730,'fun',[{'type',1730,'product',[{'type',1730,'syntaxTree',[]}|[{'type',1730,'encoding',[]}]]}|[{'type',1730,'nonempty_string',[]}]]}]}],
		%% Line 1765
		'spec' =
		    %% Line 1765
		    [{{'string',1},[{'type',1765,'fun',[{'type',1765,'product',[{'type',1765,'string',[]}]}|[{'type',1765,'syntaxTree',[]}]]}]}],
		%% Line 1781
		'spec' =
		    %% Line 1781
		    [{{'is_string',2},[{'type',1781,'fun',[{'type',1781,'product',[{'type',1781,'syntaxTree',[]}|[{'type',1781,'string',[]}]]}|[{'type',1781,'boolean',[]}]]}]}],
		%% Line 1799
		'spec' =
		    %% Line 1799
		    [{{'string_value',1},[{'type',1799,'fun',[{'type',1799,'product',[{'type',1799,'syntaxTree',[]}]}|[{'type',1799,'string',[]}]]}]}],
		%% Line 1817
		'spec' =
		    %% Line 1817
		    [{{'string_literal',1},[{'type',1817,'fun',[{'type',1817,'product',[{'type',1817,'syntaxTree',[]}]}|[{'type',1817,'nonempty_string',[]}]]}]}],
		%% Line 1831
		'spec' =
		    %% Line 1831
		    [{{'string_literal',2},[{'type',1831,'fun',[{'type',1831,'product',[{'type',1831,'syntaxTree',[]}|[{'type',1831,'encoding',[]}]]}|[{'type',1831,'nonempty_string',[]}]]}]}],
		%% Line 1859
		'spec' =
		    %% Line 1859
		    [{{'atom',1},[{'type',1859,'fun',[{'type',1859,'product',[{'type',1859,'union',[{'type',1859,'atom',[]}|[{'type',1859,'string',[]}]]}]}|[{'type',1859,'syntaxTree',[]}]]}]}],
		%% Line 1877
		'spec' =
		    %% Line 1877
		    [{{'is_atom',2},[{'type',1877,'fun',[{'type',1877,'product',[{'type',1877,'syntaxTree',[]}|[{'type',1877,'atom',[]}]]}|[{'type',1877,'boolean',[]}]]}]}],
		%% Line 1895
		'spec' =
		    %% Line 1895
		    [{{'atom_value',1},[{'type',1895,'fun',[{'type',1895,'product',[{'type',1895,'syntaxTree',[]}]}|[{'type',1895,'atom',[]}]]}]}],
		%% Line 1911
		'spec' =
		    %% Line 1911
		    [{{'atom_name',1},[{'type',1911,'fun',[{'type',1911,'product',[{'type',1911,'syntaxTree',[]}]}|[{'type',1911,'string',[]}]]}]}],
		%% Line 1928
		'spec' =
		    %% Line 1928
		    [{{'atom_literal',1},[{'type',1928,'fun',[{'type',1928,'product',[{'type',1928,'syntaxTree',[]}]}|[{'type',1928,'string',[]}]]}]}],
		%% Line 1937
		'spec' =
		    %% Line 1937
		    [{{'map_expr',1},[{'type',1937,'fun',[{'type',1937,'product',[{'type',1937,'list',[{'type',1937,'syntaxTree',[]}]}]}|[{'type',1937,'syntaxTree',[]}]]}]}],
		%% Line 1956
		'type' =
		    %% Line 1956
		    [{{'record','map_expr'},[{'typed_record_field',{'record_field',1956,{'atom',1956,'argument'}},{'type',1956,'union',[{'atom',1956,'undefined'}|[{'atom',1956,'none'}|[{'type',1956,'syntaxTree',[]}]]]}}|[{'typed_record_field',{'record_field',1957,{'atom',1957,'fields'}},{'type',1957,'union',[{'atom',1957,'undefined'}|[{'type',1957,'list',[{'type',1957,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 1964
		'spec' =
		    %% Line 1964
		    [{{'map_expr',2},[{'type',1964,'fun',[{'type',1964,'product',[{'type',1964,'union',[{'atom',1964,'none'}|[{'type',1964,'syntaxTree',[]}]]}|[{'type',1964,'list',[{'type',1964,'syntaxTree',[]}]}]]}|[{'type',1964,'syntaxTree',[]}]]}]}],
		%% Line 1989
		'spec' =
		    %% Line 1989
		    [{{'map_expr_argument',1},[{'type',1989,'fun',[{'type',1989,'product',[{'type',1989,'syntaxTree',[]}]}|[{'type',1989,'union',[{'atom',1989,'none'}|[{'type',1989,'syntaxTree',[]}]]}]]}]}],
		%% Line 2007
		'spec' =
		    %% Line 2007
		    [{{'map_expr_fields',1},[{'type',2007,'fun',[{'type',2007,'product',[{'type',2007,'syntaxTree',[]}]}|[{'type',2007,'list',[{'type',2007,'syntaxTree',[]}]}]]}]}],
		%% Line 2028
		'type' =
		    %% Line 2028
		    [{{'record','map_field_assoc'},[{'typed_record_field',{'record_field',2028,{'atom',2028,'name'}},{'type',2028,'union',[{'atom',2028,'undefined'}|[{'type',2028,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',2028,{'atom',2028,'value'}},{'type',2028,'union',[{'atom',2028,'undefined'}|[{'type',2028,'syntaxTree',[]}]]}}]],[]}],
		%% Line 2034
		'spec' =
		    %% Line 2034
		    [{{'map_field_assoc',2},[{'type',2034,'fun',[{'type',2034,'product',[{'type',2034,'syntaxTree',[]}|[{'type',2034,'syntaxTree',[]}]]}|[{'type',2034,'syntaxTree',[]}]]}]}],
		%% Line 2051
		'spec' =
		    %% Line 2051
		    [{{'map_field_assoc_name',1},[{'type',2051,'fun',[{'type',2051,'product',[{'type',2051,'syntaxTree',[]}]}|[{'type',2051,'syntaxTree',[]}]]}]}],
		%% Line 2067
		'spec' =
		    %% Line 2067
		    [{{'map_field_assoc_value',1},[{'type',2067,'fun',[{'type',2067,'product',[{'type',2067,'syntaxTree',[]}]}|[{'type',2067,'syntaxTree',[]}]]}]}],
		%% Line 2086
		'type' =
		    %% Line 2086
		    [{{'record','map_field_exact'},[{'typed_record_field',{'record_field',2086,{'atom',2086,'name'}},{'type',2086,'union',[{'atom',2086,'undefined'}|[{'type',2086,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',2086,{'atom',2086,'value'}},{'type',2086,'union',[{'atom',2086,'undefined'}|[{'type',2086,'syntaxTree',[]}]]}}]],[]}],
		%% Line 2092
		'spec' =
		    %% Line 2092
		    [{{'map_field_exact',2},[{'type',2092,'fun',[{'type',2092,'product',[{'type',2092,'syntaxTree',[]}|[{'type',2092,'syntaxTree',[]}]]}|[{'type',2092,'syntaxTree',[]}]]}]}],
		%% Line 2109
		'spec' =
		    %% Line 2109
		    [{{'map_field_exact_name',1},[{'type',2109,'fun',[{'type',2109,'product',[{'type',2109,'syntaxTree',[]}]}|[{'type',2109,'syntaxTree',[]}]]}]}],
		%% Line 2125
		'spec' =
		    %% Line 2125
		    [{{'map_field_exact_value',1},[{'type',2125,'fun',[{'type',2125,'product',[{'type',2125,'syntaxTree',[]}]}|[{'type',2125,'syntaxTree',[]}]]}]}],
		%% Line 2158
		'spec' =
		    %% Line 2158
		    [{{'tuple',1},[{'type',2158,'fun',[{'type',2158,'product',[{'type',2158,'list',[{'type',2158,'syntaxTree',[]}]}]}|[{'type',2158,'syntaxTree',[]}]]}]}],
		%% Line 2173
		'spec' =
		    %% Line 2173
		    [{{'tuple_elements',1},[{'type',2173,'fun',[{'type',2173,'product',[{'type',2173,'syntaxTree',[]}]}|[{'type',2173,'list',[{'type',2173,'syntaxTree',[]}]}]]}]}],
		%% Line 2194
		'spec' =
		    %% Line 2194
		    [{{'tuple_size',1},[{'type',2194,'fun',[{'type',2194,'product',[{'type',2194,'syntaxTree',[]}]}|[{'type',2194,'non_neg_integer',[]}]]}]}],
		%% Line 2203
		'spec' =
		    %% Line 2203
		    [{{'list',1},[{'type',2203,'fun',[{'type',2203,'product',[{'type',2203,'list',[{'type',2203,'syntaxTree',[]}]}]}|[{'type',2203,'syntaxTree',[]}]]}]}],
		%% Line 2251
		'type' =
		    %% Line 2251
		    [{{'record','list'},[{'typed_record_field',{'record_field',2251,{'atom',2251,'prefix'}},{'type',2251,'union',[{'atom',2251,'undefined'}|[{'type',2251,'list',[{'type',2251,'syntaxTree',[]}]}]]}}|[{'typed_record_field',{'record_field',2251,{'atom',2251,'suffix'}},{'type',2251,'union',[{'atom',2251,'undefined'}|[{'atom',2251,'none'}|[{'type',2251,'syntaxTree',[]}]]]}}]],[]}],
		%% Line 2269
		'spec' =
		    %% Line 2269
		    [{{'list',2},[{'type',2269,'fun',[{'type',2269,'product',[{'type',2269,'list',[{'type',2269,'syntaxTree',[]}]}|[{'type',2269,'union',[{'atom',2269,'none'}|[{'type',2269,'syntaxTree',[]}]]}]]}|[{'type',2269,'syntaxTree',[]}]]}]}],
		%% Line 2304
		'spec' =
		    %% Line 2304
		    [{{'nil',0},[{'type',2304,'fun',[{'type',2304,'product',[]}|[{'type',2304,'syntaxTree',[]}]]}]}],
		%% Line 2323
		'spec' =
		    %% Line 2323
		    [{{'list_prefix',1},[{'type',2323,'fun',[{'type',2323,'product',[{'type',2323,'syntaxTree',[]}]}|[{'type',2323,'list',[{'type',2323,'syntaxTree',[]}]}]]}]}],
		%% Line 2357
		'spec' =
		    %% Line 2357
		    [{{'list_suffix',1},[{'type',2357,'fun',[{'type',2357,'product',[{'type',2357,'syntaxTree',[]}]}|[{'type',2357,'union',[{'atom',2357,'none'}|[{'type',2357,'syntaxTree',[]}]]}]]}]}],
		%% Line 2398
		'spec' =
		    %% Line 2398
		    [{{'cons',2},[{'type',2398,'fun',[{'type',2398,'product',[{'type',2398,'syntaxTree',[]}|[{'type',2398,'syntaxTree',[]}]]}|[{'type',2398,'syntaxTree',[]}]]}]}],
		%% Line 2421
		'spec' =
		    %% Line 2421
		    [{{'list_head',1},[{'type',2421,'fun',[{'type',2421,'product',[{'type',2421,'syntaxTree',[]}]}|[{'type',2421,'syntaxTree',[]}]]}]}],
		%% Line 2442
		'spec' =
		    %% Line 2442
		    [{{'list_tail',1},[{'type',2442,'fun',[{'type',2442,'product',[{'type',2442,'syntaxTree',[]}]}|[{'type',2442,'syntaxTree',[]}]]}]}],
		%% Line 2465
		'spec' =
		    %% Line 2465
		    [{{'is_list_skeleton',1},[{'type',2465,'fun',[{'type',2465,'product',[{'type',2465,'syntaxTree',[]}]}|[{'type',2465,'boolean',[]}]]}]}],
		%% Line 2495
		'spec' =
		    %% Line 2495
		    [{{'is_proper_list',1},[{'type',2495,'fun',[{'type',2495,'product',[{'type',2495,'syntaxTree',[]}]}|[{'type',2495,'boolean',[]}]]}]}],
		%% Line 2523
		'spec' =
		    %% Line 2523
		    [{{'list_elements',1},[{'type',2523,'fun',[{'type',2523,'product',[{'type',2523,'syntaxTree',[]}]}|[{'type',2523,'list',[{'type',2523,'syntaxTree',[]}]}]]}]}],
		%% Line 2558
		'spec' =
		    %% Line 2558
		    [{{'list_length',1},[{'type',2558,'fun',[{'type',2558,'product',[{'type',2558,'syntaxTree',[]}]}|[{'type',2558,'non_neg_integer',[]}]]}]}],
		%% Line 2593
		'spec' =
		    %% Line 2593
		    [{{'normalize_list',1},[{'type',2593,'fun',[{'type',2593,'product',[{'type',2593,'syntaxTree',[]}]}|[{'type',2593,'syntaxTree',[]}]]}]}],
		%% Line 2630
		'spec' =
		    %% Line 2630
		    [{{'compact_list',1},[{'type',2630,'fun',[{'type',2630,'product',[{'type',2630,'syntaxTree',[]}]}|[{'type',2630,'syntaxTree',[]}]]}]}],
		%% Line 2686
		'spec' =
		    %% Line 2686
		    [{{'binary',1},[{'type',2686,'fun',[{'type',2686,'product',[{'type',2686,'list',[{'type',2686,'syntaxTree',[]}]}]}|[{'type',2686,'syntaxTree',[]}]]}]}],
		%% Line 2702
		'spec' =
		    %% Line 2702
		    [{{'binary_fields',1},[{'type',2702,'fun',[{'type',2702,'product',[{'type',2702,'syntaxTree',[]}]}|[{'type',2702,'list',[{'type',2702,'syntaxTree',[]}]}]]}]}],
		%% Line 2716
		'spec' =
		    %% Line 2716
		    [{{'binary_field',1},[{'type',2716,'fun',[{'type',2716,'product',[{'type',2716,'syntaxTree',[]}]}|[{'type',2716,'syntaxTree',[]}]]}]}],
		%% Line 2735
		'spec' =
		    %% Line 2735
		    [{{'binary_field',3},[{'type',2735,'fun',[{'type',2735,'product',[{'type',2735,'syntaxTree',[]}|[{'type',2735,'union',[{'atom',2735,'none'}|[{'type',2735,'syntaxTree',[]}]]}|[{'type',2735,'list',[{'type',2735,'syntaxTree',[]}]}]]]}|[{'type',2736,'syntaxTree',[]}]]}]}],
		%% Line 2758
		'type' =
		    %% Line 2758
		    [{{'record','binary_field'},[{'typed_record_field',{'record_field',2758,{'atom',2758,'body'}},{'type',2758,'union',[{'atom',2758,'undefined'}|[{'type',2758,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',2758,{'atom',2758,'types'}},{'type',2758,'union',[{'atom',2758,'undefined'}|[{'type',2758,'list',[{'type',2758,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 2775
		'spec' =
		    %% Line 2775
		    [{{'binary_field',2},[{'type',2775,'fun',[{'type',2775,'product',[{'type',2775,'syntaxTree',[]}|[{'type',2775,'list',[{'type',2775,'syntaxTree',[]}]}]]}|[{'type',2775,'syntaxTree',[]}]]}]}],
		%% Line 2806
		'spec' =
		    %% Line 2806
		    [{{'binary_field_body',1},[{'type',2806,'fun',[{'type',2806,'product',[{'type',2806,'syntaxTree',[]}]}|[{'type',2806,'syntaxTree',[]}]]}]}],
		%% Line 2829
		'spec' =
		    %% Line 2829
		    [{{'binary_field_types',1},[{'type',2829,'fun',[{'type',2829,'product',[{'type',2829,'syntaxTree',[]}]}|[{'type',2829,'list',[{'type',2829,'syntaxTree',[]}]}]]}]}],
		%% Line 2857
		'spec' =
		    %% Line 2857
		    [{{'binary_field_size',1},[{'type',2857,'fun',[{'type',2857,'product',[{'type',2857,'syntaxTree',[]}]}|[{'type',2857,'union',[{'atom',2857,'none'}|[{'type',2857,'syntaxTree',[]}]]}]]}]}],
		%% Line 2885
		'type' =
		    %% Line 2885
		    [{{'record','size_qualifier'},[{'typed_record_field',{'record_field',2885,{'atom',2885,'body'}},{'type',2885,'union',[{'atom',2885,'undefined'}|[{'type',2885,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',2885,{'atom',2885,'size'}},{'type',2885,'union',[{'atom',2885,'undefined'}|[{'type',2885,'syntaxTree',[]}]]}}]],[]}],
		%% Line 2892
		'spec' =
		    %% Line 2892
		    [{{'size_qualifier',2},[{'type',2892,'fun',[{'type',2892,'product',[{'type',2892,'syntaxTree',[]}|[{'type',2892,'syntaxTree',[]}]]}|[{'type',2892,'syntaxTree',[]}]]}]}],
		%% Line 2904
		'spec' =
		    %% Line 2904
		    [{{'size_qualifier_body',1},[{'type',2904,'fun',[{'type',2904,'product',[{'type',2904,'syntaxTree',[]}]}|[{'type',2904,'syntaxTree',[]}]]}]}],
		%% Line 2916
		'spec' =
		    %% Line 2916
		    [{{'size_qualifier_argument',1},[{'type',2916,'fun',[{'type',2916,'product',[{'type',2916,'syntaxTree',[]}]}|[{'type',2916,'syntaxTree',[]}]]}]}],
		%% Line 2949
		'spec' =
		    %% Line 2949
		    [{{'error_marker',1},[{'type',2949,'fun',[{'type',2949,'product',[{'type',2949,'term',[]}]}|[{'type',2949,'syntaxTree',[]}]]}]}],
		%% Line 2965
		'spec' =
		    %% Line 2965
		    [{{'error_marker_info',1},[{'type',2965,'fun',[{'type',2965,'product',[{'type',2965,'syntaxTree',[]}]}|[{'type',2965,'term',[]}]]}]}],
		%% Line 3003
		'spec' =
		    %% Line 3003
		    [{{'warning_marker',1},[{'type',3003,'fun',[{'type',3003,'product',[{'type',3003,'term',[]}]}|[{'type',3003,'syntaxTree',[]}]]}]}],
		%% Line 3019
		'spec' =
		    %% Line 3019
		    [{{'warning_marker_info',1},[{'type',3019,'fun',[{'type',3019,'product',[{'type',3019,'syntaxTree',[]}]}|[{'type',3019,'term',[]}]]}]}],
		%% Line 3051
		'spec' =
		    %% Line 3051
		    [{{'eof_marker',0},[{'type',3051,'fun',[{'type',3051,'product',[]}|[{'type',3051,'syntaxTree',[]}]]}]}],
		%% Line 3064
		'spec' =
		    %% Line 3064
		    [{{'attribute',1},[{'type',3064,'fun',[{'type',3064,'product',[{'type',3064,'syntaxTree',[]}]}|[{'type',3064,'syntaxTree',[]}]]}]}],
		%% Line 3092
		'type' =
		    %% Line 3092
		    [{{'record','attribute'},[{'typed_record_field',{'record_field',3092,{'atom',3092,'name'}},{'type',3092,'union',[{'atom',3092,'undefined'}|[{'type',3092,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',3092,{'atom',3092,'args'}},{'type',3092,'union',[{'atom',3092,'undefined'}|[{'atom',3092,'none'}|[{'type',3092,'list',[{'type',3092,'syntaxTree',[]}]}]]]}}]],[]}],
		%% Line 3155
		'spec' =
		    %% Line 3155
		    [{{'attribute',2},[{'type',3155,'fun',[{'type',3155,'product',[{'type',3155,'syntaxTree',[]}|[{'type',3155,'union',[{'atom',3155,'none'}|[{'type',3155,'list',[{'type',3155,'syntaxTree',[]}]}]]}]]}|[{'type',3155,'syntaxTree',[]}]]}]}],
		%% Line 3279
		'spec' =
		    %% Line 3279
		    [{{'attribute_name',1},[{'type',3279,'fun',[{'type',3279,'product',[{'type',3279,'syntaxTree',[]}]}|[{'type',3279,'syntaxTree',[]}]]}]}],
		%% Line 3300
		'spec' =
		    %% Line 3300
		    [{{'attribute_arguments',1},[{'type',3300,'fun',[{'type',3300,'product',[{'type',3300,'syntaxTree',[]}]}|[{'type',3300,'union',[{'atom',3300,'none'}|[{'type',3300,'list',[{'type',3300,'syntaxTree',[]}]}]]}]]}]}],
		%% Line 3356
		'type' =
		    %% Line 3356
		    [{{'record','arity_qualifier'},[{'typed_record_field',{'record_field',3356,{'atom',3356,'body'}},{'type',3356,'union',[{'atom',3356,'undefined'}|[{'type',3356,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',3356,{'atom',3356,'arity'}},{'type',3356,'union',[{'atom',3356,'undefined'}|[{'type',3356,'syntaxTree',[]}]]}}]],[]}],
		%% Line 3363
		'spec' =
		    %% Line 3363
		    [{{'arity_qualifier',2},[{'type',3363,'fun',[{'type',3363,'product',[{'type',3363,'syntaxTree',[]}|[{'type',3363,'syntaxTree',[]}]]}|[{'type',3363,'syntaxTree',[]}]]}]}],
		%% Line 3375
		'spec' =
		    %% Line 3375
		    [{{'arity_qualifier_body',1},[{'type',3375,'fun',[{'type',3375,'product',[{'type',3375,'syntaxTree',[]}]}|[{'type',3375,'syntaxTree',[]}]]}]}],
		%% Line 3387
		'spec' =
		    %% Line 3387
		    [{{'arity_qualifier_argument',1},[{'type',3387,'fun',[{'type',3387,'product',[{'type',3387,'syntaxTree',[]}]}|[{'type',3387,'syntaxTree',[]}]]}]}],
		%% Line 3400
		'type' =
		    %% Line 3400
		    [{{'record','module_qualifier'},[{'typed_record_field',{'record_field',3400,{'atom',3400,'module'}},{'type',3400,'union',[{'atom',3400,'undefined'}|[{'type',3400,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',3400,{'atom',3400,'body'}},{'type',3400,'union',[{'atom',3400,'undefined'}|[{'type',3400,'syntaxTree',[]}]]}}]],[]}],
		%% Line 3413
		'spec' =
		    %% Line 3413
		    [{{'module_qualifier',2},[{'type',3413,'fun',[{'type',3413,'product',[{'type',3413,'syntaxTree',[]}|[{'type',3413,'syntaxTree',[]}]]}|[{'type',3413,'syntaxTree',[]}]]}]}],
		%% Line 3432
		'spec' =
		    %% Line 3432
		    [{{'module_qualifier_argument',1},[{'type',3432,'fun',[{'type',3432,'product',[{'type',3432,'syntaxTree',[]}]}|[{'type',3432,'syntaxTree',[]}]]}]}],
		%% Line 3448
		'spec' =
		    %% Line 3448
		    [{{'module_qualifier_body',1},[{'type',3448,'fun',[{'type',3448,'product',[{'type',3448,'syntaxTree',[]}]}|[{'type',3448,'syntaxTree',[]}]]}]}],
		%% Line 3479
		'type' =
		    %% Line 3479
		    [{{'record','func'},[{'typed_record_field',{'record_field',3479,{'atom',3479,'name'}},{'type',3479,'union',[{'atom',3479,'undefined'}|[{'type',3479,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',3479,{'atom',3479,'clauses'}},{'type',3479,'union',[{'atom',3479,'undefined'}|[{'type',3479,'list',[{'type',3479,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 3506
		'spec' =
		    %% Line 3506
		    [{{'function',2},[{'type',3506,'fun',[{'type',3506,'product',[{'type',3506,'syntaxTree',[]}|[{'type',3506,'list',[{'type',3506,'syntaxTree',[]}]}]]}|[{'type',3506,'syntaxTree',[]}]]}]}],
		%% Line 3529
		'spec' =
		    %% Line 3529
		    [{{'function_name',1},[{'type',3529,'fun',[{'type',3529,'product',[{'type',3529,'syntaxTree',[]}]}|[{'type',3529,'syntaxTree',[]}]]}]}],
		%% Line 3545
		'spec' =
		    %% Line 3545
		    [{{'function_clauses',1},[{'type',3545,'fun',[{'type',3545,'product',[{'type',3545,'syntaxTree',[]}]}|[{'type',3545,'list',[{'type',3545,'syntaxTree',[]}]}]]}]}],
		%% Line 3571
		'spec' =
		    %% Line 3571
		    [{{'function_arity',1},[{'type',3571,'fun',[{'type',3571,'product',[{'type',3571,'syntaxTree',[]}]}|[{'type',3571,'arity',[]}]]}]}],
		%% Line 3582
		'type' =
		    %% Line 3582
		    [{'guard',{'type',3582,'union',[{'atom',3582,'none'}|[{'type',3582,'syntaxTree',[]}|[{'type',3582,'list',[{'type',3582,'syntaxTree',[]}]}|[{'type',3582,'list',[{'type',3582,'list',[{'type',3582,'syntaxTree',[]}]}]}]]]]},[]}],
		%% Line 3584
		'spec' =
		    %% Line 3584
		    [{{'clause',2},[{'type',3584,'fun',[{'type',3584,'product',[{'type',3584,'guard',[]}|[{'type',3584,'list',[{'type',3584,'syntaxTree',[]}]}]]}|[{'type',3584,'syntaxTree',[]}]]}]}],
		%% Line 3619
		'type' =
		    %% Line 3619
		    [{{'record','clause'},[{'typed_record_field',{'record_field',3619,{'atom',3619,'patterns'}},{'type',3619,'union',[{'atom',3619,'undefined'}|[{'type',3619,'list',[{'type',3619,'syntaxTree',[]}]}]]}}|[{'typed_record_field',{'record_field',3620,{'atom',3620,'guard'}},{'type',3620,'union',[{'atom',3620,'undefined'}|[{'type',3620,'guard',[]}]]}}|[{'typed_record_field',{'record_field',3621,{'atom',3621,'body'}},{'type',3621,'union',[{'atom',3621,'undefined'}|[{'type',3621,'list',[{'type',3621,'syntaxTree',[]}]}]]}}]]],[]}],
		%% Line 3648
		'spec' =
		    %% Line 3648
		    [{{'clause',3},[{'type',3648,'fun',[{'type',3648,'product',[{'type',3648,'list',[{'type',3648,'syntaxTree',[]}]}|[{'type',3648,'guard',[]}|[{'type',3648,'list',[{'type',3648,'syntaxTree',[]}]}]]]}|[{'type',3648,'syntaxTree',[]}]]}]}],
		%% Line 3732
		'spec' =
		    %% Line 3732
		    [{{'clause_patterns',1},[{'type',3732,'fun',[{'type',3732,'product',[{'type',3732,'syntaxTree',[]}]}|[{'type',3732,'list',[{'type',3732,'syntaxTree',[]}]}]]}]}],
		%% Line 3752
		'spec' =
		    %% Line 3752
		    [{{'clause_guard',1},[{'type',3752,'fun',[{'type',3752,'product',[{'type',3752,'syntaxTree',[]}]}|[{'type',3752,'union',[{'atom',3752,'none'}|[{'type',3752,'syntaxTree',[]}]]}]]}]}],
		%% Line 3774
		'spec' =
		    %% Line 3774
		    [{{'clause_body',1},[{'type',3774,'fun',[{'type',3774,'product',[{'type',3774,'syntaxTree',[]}]}|[{'type',3774,'list',[{'type',3774,'syntaxTree',[]}]}]]}]}],
		%% Line 3796
		'spec' =
		    %% Line 3796
		    [{{'disjunction',1},[{'type',3796,'fun',[{'type',3796,'product',[{'type',3796,'list',[{'type',3796,'syntaxTree',[]}]}]}|[{'type',3796,'syntaxTree',[]}]]}]}],
		%% Line 3808
		'spec' =
		    %% Line 3808
		    [{{'disjunction_body',1},[{'type',3808,'fun',[{'type',3808,'product',[{'type',3808,'syntaxTree',[]}]}|[{'type',3808,'list',[{'type',3808,'syntaxTree',[]}]}]]}]}],
		%% Line 3825
		'spec' =
		    %% Line 3825
		    [{{'conjunction',1},[{'type',3825,'fun',[{'type',3825,'product',[{'type',3825,'list',[{'type',3825,'syntaxTree',[]}]}]}|[{'type',3825,'syntaxTree',[]}]]}]}],
		%% Line 3837
		'spec' =
		    %% Line 3837
		    [{{'conjunction_body',1},[{'type',3837,'fun',[{'type',3837,'product',[{'type',3837,'syntaxTree',[]}]}|[{'type',3837,'list',[{'type',3837,'syntaxTree',[]}]}]]}]}],
		%% Line 3858
		'spec' =
		    %% Line 3858
		    [{{'catch_expr',1},[{'type',3858,'fun',[{'type',3858,'product',[{'type',3858,'syntaxTree',[]}]}|[{'type',3858,'syntaxTree',[]}]]}]}],
		%% Line 3874
		'spec' =
		    %% Line 3874
		    [{{'catch_expr_body',1},[{'type',3874,'fun',[{'type',3874,'product',[{'type',3874,'syntaxTree',[]}]}|[{'type',3874,'syntaxTree',[]}]]}]}],
		%% Line 3892
		'type' =
		    %% Line 3892
		    [{{'record','match_expr'},[{'typed_record_field',{'record_field',3892,{'atom',3892,'pattern'}},{'type',3892,'union',[{'atom',3892,'undefined'}|[{'type',3892,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',3892,{'atom',3892,'body'}},{'type',3892,'union',[{'atom',3892,'undefined'}|[{'type',3892,'syntaxTree',[]}]]}}]],[]}],
		%% Line 3905
		'spec' =
		    %% Line 3905
		    [{{'match_expr',2},[{'type',3905,'fun',[{'type',3905,'product',[{'type',3905,'syntaxTree',[]}|[{'type',3905,'syntaxTree',[]}]]}|[{'type',3905,'syntaxTree',[]}]]}]}],
		%% Line 3922
		'spec' =
		    %% Line 3922
		    [{{'match_expr_pattern',1},[{'type',3922,'fun',[{'type',3922,'product',[{'type',3922,'syntaxTree',[]}]}|[{'type',3922,'syntaxTree',[]}]]}]}],
		%% Line 3938
		'spec' =
		    %% Line 3938
		    [{{'match_expr_body',1},[{'type',3938,'fun',[{'type',3938,'product',[{'type',3938,'syntaxTree',[]}]}|[{'type',3938,'syntaxTree',[]}]]}]}],
		%% Line 3964
		'spec' =
		    %% Line 3964
		    [{{'operator',1},[{'type',3964,'fun',[{'type',3964,'product',[{'type',3964,'union',[{'type',3964,'atom',[]}|[{'type',3964,'string',[]}]]}]}|[{'type',3964,'syntaxTree',[]}]]}]}],
		%% Line 3978
		'spec' =
		    %% Line 3978
		    [{{'operator_name',1},[{'type',3978,'fun',[{'type',3978,'product',[{'type',3978,'syntaxTree',[]}]}|[{'type',3978,'atom',[]}]]}]}],
		%% Line 3990
		'spec' =
		    %% Line 3990
		    [{{'operator_literal',1},[{'type',3990,'fun',[{'type',3990,'product',[{'type',3990,'syntaxTree',[]}]}|[{'type',3990,'string',[]}]]}]}],
		%% Line 4006
		'type' =
		    %% Line 4006
		    [{{'record','infix_expr'},[{'typed_record_field',{'record_field',4006,{'atom',4006,'operator'}},{'type',4006,'union',[{'atom',4006,'undefined'}|[{'type',4006,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4007,{'atom',4007,'left'}},{'type',4007,'union',[{'atom',4007,'undefined'}|[{'type',4007,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4008,{'atom',4008,'right'}},{'type',4008,'union',[{'atom',4008,'undefined'}|[{'type',4008,'syntaxTree',[]}]]}}]]],[]}],
		%% Line 4023
		'spec' =
		    %% Line 4023
		    [{{'infix_expr',3},[{'type',4023,'fun',[{'type',4023,'product',[{'type',4023,'syntaxTree',[]}|[{'type',4023,'syntaxTree',[]}|[{'type',4023,'syntaxTree',[]}]]]}|[{'type',4023,'syntaxTree',[]}]]}]}],
		%% Line 4050
		'spec' =
		    %% Line 4050
		    [{{'infix_expr_left',1},[{'type',4050,'fun',[{'type',4050,'product',[{'type',4050,'syntaxTree',[]}]}|[{'type',4050,'syntaxTree',[]}]]}]}],
		%% Line 4066
		'spec' =
		    %% Line 4066
		    [{{'infix_expr_operator',1},[{'type',4066,'fun',[{'type',4066,'product',[{'type',4066,'syntaxTree',[]}]}|[{'type',4066,'syntaxTree',[]}]]}]}],
		%% Line 4083
		'spec' =
		    %% Line 4083
		    [{{'infix_expr_right',1},[{'type',4083,'fun',[{'type',4083,'product',[{'type',4083,'syntaxTree',[]}]}|[{'type',4083,'syntaxTree',[]}]]}]}],
		%% Line 4102
		'type' =
		    %% Line 4102
		    [{{'record','prefix_expr'},[{'typed_record_field',{'record_field',4102,{'atom',4102,'operator'}},{'type',4102,'union',[{'atom',4102,'undefined'}|[{'type',4102,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4102,{'atom',4102,'argument'}},{'type',4102,'union',[{'atom',4102,'undefined'}|[{'type',4102,'syntaxTree',[]}]]}}]],[]}],
		%% Line 4117
		'spec' =
		    %% Line 4117
		    [{{'prefix_expr',2},[{'type',4117,'fun',[{'type',4117,'product',[{'type',4117,'syntaxTree',[]}|[{'type',4117,'syntaxTree',[]}]]}|[{'type',4117,'syntaxTree',[]}]]}]}],
		%% Line 4142
		'spec' =
		    %% Line 4142
		    [{{'prefix_expr_operator',1},[{'type',4142,'fun',[{'type',4142,'product',[{'type',4142,'syntaxTree',[]}]}|[{'type',4142,'syntaxTree',[]}]]}]}],
		%% Line 4158
		'spec' =
		    %% Line 4158
		    [{{'prefix_expr_argument',1},[{'type',4158,'fun',[{'type',4158,'product',[{'type',4158,'syntaxTree',[]}]}|[{'type',4158,'syntaxTree',[]}]]}]}],
		%% Line 4172
		'spec' =
		    %% Line 4172
		    [{{'record_field',1},[{'type',4172,'fun',[{'type',4172,'product',[{'type',4172,'syntaxTree',[]}]}|[{'type',4172,'syntaxTree',[]}]]}]}],
		%% Line 4188
		'type' =
		    %% Line 4188
		    [{{'record','record_field'},[{'typed_record_field',{'record_field',4188,{'atom',4188,'name'}},{'type',4188,'union',[{'atom',4188,'undefined'}|[{'type',4188,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4188,{'atom',4188,'value'}},{'type',4188,'union',[{'atom',4188,'undefined'}|[{'atom',4188,'none'}|[{'type',4188,'syntaxTree',[]}]]]}}]],[]}],
		%% Line 4195
		'spec' =
		    %% Line 4195
		    [{{'record_field',2},[{'type',4195,'fun',[{'type',4195,'product',[{'type',4195,'syntaxTree',[]}|[{'type',4195,'union',[{'atom',4195,'none'}|[{'type',4195,'syntaxTree',[]}]]}]]}|[{'type',4195,'syntaxTree',[]}]]}]}],
		%% Line 4206
		'spec' =
		    %% Line 4206
		    [{{'record_field_name',1},[{'type',4206,'fun',[{'type',4206,'product',[{'type',4206,'syntaxTree',[]}]}|[{'type',4206,'syntaxTree',[]}]]}]}],
		%% Line 4222
		'spec' =
		    %% Line 4222
		    [{{'record_field_value',1},[{'type',4222,'fun',[{'type',4222,'product',[{'type',4222,'syntaxTree',[]}]}|[{'type',4222,'union',[{'atom',4222,'none'}|[{'type',4222,'syntaxTree',[]}]]}]]}]}],
		%% Line 4240
		'type' =
		    %% Line 4240
		    [{{'record','record_index_expr'},[{'typed_record_field',{'record_field',4240,{'atom',4240,'type'}},{'type',4240,'union',[{'atom',4240,'undefined'}|[{'type',4240,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4240,{'atom',4240,'field'}},{'type',4240,'union',[{'atom',4240,'undefined'}|[{'type',4240,'syntaxTree',[]}]]}}]],[]}],
		%% Line 4254
		'spec' =
		    %% Line 4254
		    [{{'record_index_expr',2},[{'type',4254,'fun',[{'type',4254,'product',[{'type',4254,'syntaxTree',[]}|[{'type',4254,'syntaxTree',[]}]]}|[{'type',4254,'syntaxTree',[]}]]}]}],
		%% Line 4277
		'spec' =
		    %% Line 4277
		    [{{'record_index_expr_type',1},[{'type',4277,'fun',[{'type',4277,'product',[{'type',4277,'syntaxTree',[]}]}|[{'type',4277,'syntaxTree',[]}]]}]}],
		%% Line 4293
		'spec' =
		    %% Line 4293
		    [{{'record_index_expr_field',1},[{'type',4293,'fun',[{'type',4293,'product',[{'type',4293,'syntaxTree',[]}]}|[{'type',4293,'syntaxTree',[]}]]}]}],
		%% Line 4307
		'spec' =
		    %% Line 4307
		    [{{'record_access',2},[{'type',4307,'fun',[{'type',4307,'product',[{'type',4307,'syntaxTree',[]}|[{'type',4307,'syntaxTree',[]}]]}|[{'type',4307,'syntaxTree',[]}]]}]}],
		%% Line 4328
		'type' =
		    %% Line 4328
		    [{{'record','record_access'},[{'typed_record_field',{'record_field',4328,{'atom',4328,'argument'}},{'type',4328,'union',[{'atom',4328,'undefined'}|[{'type',4328,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4329,{'atom',4329,'type'}},{'type',4329,'union',[{'atom',4329,'undefined'}|[{'atom',4329,'none'}|[{'type',4329,'syntaxTree',[]}]]]}}|[{'typed_record_field',{'record_field',4330,{'atom',4330,'field'}},{'type',4330,'union',[{'atom',4330,'undefined'}|[{'type',4330,'syntaxTree',[]}]]}}]]],[]}],
		%% Line 4347
		'spec' =
		    %% Line 4347
		    [{{'record_access',3},[{'type',4347,'fun',[{'type',4347,'product',[{'type',4347,'syntaxTree',[]}|[{'type',4347,'union',[{'atom',4347,'none'}|[{'type',4347,'syntaxTree',[]}]]}|[{'type',4347,'syntaxTree',[]}]]]}|[{'type',4348,'syntaxTree',[]}]]}]}],
		%% Line 4378
		'spec' =
		    %% Line 4378
		    [{{'record_access_argument',1},[{'type',4378,'fun',[{'type',4378,'product',[{'type',4378,'syntaxTree',[]}]}|[{'type',4378,'syntaxTree',[]}]]}]}],
		%% Line 4401
		'spec' =
		    %% Line 4401
		    [{{'record_access_type',1},[{'type',4401,'fun',[{'type',4401,'product',[{'type',4401,'syntaxTree',[]}]}|[{'type',4401,'union',[{'atom',4401,'none'}|[{'type',4401,'syntaxTree',[]}]]}]]}]}],
		%% Line 4419
		'spec' =
		    %% Line 4419
		    [{{'record_access_field',1},[{'type',4419,'fun',[{'type',4419,'product',[{'type',4419,'syntaxTree',[]}]}|[{'type',4419,'syntaxTree',[]}]]}]}],
		%% Line 4435
		'spec' =
		    %% Line 4435
		    [{{'record_expr',2},[{'type',4435,'fun',[{'type',4435,'product',[{'type',4435,'syntaxTree',[]}|[{'type',4435,'list',[{'type',4435,'syntaxTree',[]}]}]]}|[{'type',4435,'syntaxTree',[]}]]}]}],
		%% Line 4458
		'type' =
		    %% Line 4458
		    [{{'record','record_expr'},[{'typed_record_field',{'record_field',4458,{'atom',4458,'argument'}},{'type',4458,'union',[{'atom',4458,'undefined'}|[{'atom',4458,'none'}|[{'type',4458,'syntaxTree',[]}]]]}}|[{'typed_record_field',{'record_field',4459,{'atom',4459,'type'}},{'type',4459,'union',[{'atom',4459,'undefined'}|[{'type',4459,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4460,{'atom',4460,'fields'}},{'type',4460,'union',[{'atom',4460,'undefined'}|[{'type',4460,'list',[{'type',4460,'syntaxTree',[]}]}]]}}]]],[]}],
		%% Line 4482
		'spec' =
		    %% Line 4482
		    [{{'record_expr',3},[{'type',4482,'fun',[{'type',4482,'product',[{'type',4482,'union',[{'atom',4482,'none'}|[{'type',4482,'syntaxTree',[]}]]}|[{'type',4482,'syntaxTree',[]}|[{'type',4482,'list',[{'type',4482,'syntaxTree',[]}]}]]]}|[{'type',4483,'syntaxTree',[]}]]}]}],
		%% Line 4519
		'spec' =
		    %% Line 4519
		    [{{'record_expr_argument',1},[{'type',4519,'fun',[{'type',4519,'product',[{'type',4519,'syntaxTree',[]}]}|[{'type',4519,'union',[{'atom',4519,'none'}|[{'type',4519,'syntaxTree',[]}]]}]]}]}],
		%% Line 4537
		'spec' =
		    %% Line 4537
		    [{{'record_expr_type',1},[{'type',4537,'fun',[{'type',4537,'product',[{'type',4537,'syntaxTree',[]}]}|[{'type',4537,'syntaxTree',[]}]]}]}],
		%% Line 4556
		'spec' =
		    %% Line 4556
		    [{{'record_expr_fields',1},[{'type',4556,'fun',[{'type',4556,'product',[{'type',4556,'syntaxTree',[]}]}|[{'type',4556,'list',[{'type',4556,'syntaxTree',[]}]}]]}]}],
		%% Line 4581
		'spec' =
		    %% Line 4581
		    [{{'application',3},[{'type',4581,'fun',[{'type',4581,'product',[{'type',4581,'union',[{'atom',4581,'none'}|[{'type',4581,'syntaxTree',[]}]]}|[{'type',4581,'syntaxTree',[]}|[{'type',4581,'list',[{'type',4581,'syntaxTree',[]}]}]]]}|[{'type',4582,'syntaxTree',[]}]]}]}],
		%% Line 4600
		'type' =
		    %% Line 4600
		    [{{'record','application'},[{'typed_record_field',{'record_field',4600,{'atom',4600,'operator'}},{'type',4600,'union',[{'atom',4600,'undefined'}|[{'type',4600,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4600,{'atom',4600,'arguments'}},{'type',4600,'union',[{'atom',4600,'undefined'}|[{'type',4600,'list',[{'type',4600,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 4616
		'spec' =
		    %% Line 4616
		    [{{'application',2},[{'type',4616,'fun',[{'type',4616,'product',[{'type',4616,'syntaxTree',[]}|[{'type',4616,'list',[{'type',4616,'syntaxTree',[]}]}]]}|[{'type',4616,'syntaxTree',[]}]]}]}],
		%% Line 4639
		'spec' =
		    %% Line 4639
		    [{{'application_operator',1},[{'type',4639,'fun',[{'type',4639,'product',[{'type',4639,'syntaxTree',[]}]}|[{'type',4639,'syntaxTree',[]}]]}]}],
		%% Line 4656
		'spec' =
		    %% Line 4656
		    [{{'application_arguments',1},[{'type',4656,'fun',[{'type',4656,'product',[{'type',4656,'syntaxTree',[]}]}|[{'type',4656,'list',[{'type',4656,'syntaxTree',[]}]}]]}]}],
		%% Line 4676
		'type' =
		    %% Line 4676
		    [{{'record','list_comp'},[{'typed_record_field',{'record_field',4676,{'atom',4676,'template'}},{'type',4676,'union',[{'atom',4676,'undefined'}|[{'type',4676,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4676,{'atom',4676,'body'}},{'type',4676,'union',[{'atom',4676,'undefined'}|[{'type',4676,'list',[{'type',4676,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 4691
		'spec' =
		    %% Line 4691
		    [{{'list_comp',2},[{'type',4691,'fun',[{'type',4691,'product',[{'type',4691,'syntaxTree',[]}|[{'type',4691,'list',[{'type',4691,'syntaxTree',[]}]}]]}|[{'type',4691,'syntaxTree',[]}]]}]}],
		%% Line 4708
		'spec' =
		    %% Line 4708
		    [{{'list_comp_template',1},[{'type',4708,'fun',[{'type',4708,'product',[{'type',4708,'syntaxTree',[]}]}|[{'type',4708,'syntaxTree',[]}]]}]}],
		%% Line 4724
		'spec' =
		    %% Line 4724
		    [{{'list_comp_body',1},[{'type',4724,'fun',[{'type',4724,'product',[{'type',4724,'syntaxTree',[]}]}|[{'type',4724,'list',[{'type',4724,'syntaxTree',[]}]}]]}]}],
		%% Line 4743
		'type' =
		    %% Line 4743
		    [{{'record','binary_comp'},[{'typed_record_field',{'record_field',4743,{'atom',4743,'template'}},{'type',4743,'union',[{'atom',4743,'undefined'}|[{'type',4743,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4743,{'atom',4743,'body'}},{'type',4743,'union',[{'atom',4743,'undefined'}|[{'type',4743,'list',[{'type',4743,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 4758
		'spec' =
		    %% Line 4758
		    [{{'binary_comp',2},[{'type',4758,'fun',[{'type',4758,'product',[{'type',4758,'syntaxTree',[]}|[{'type',4758,'list',[{'type',4758,'syntaxTree',[]}]}]]}|[{'type',4758,'syntaxTree',[]}]]}]}],
		%% Line 4775
		'spec' =
		    %% Line 4775
		    [{{'binary_comp_template',1},[{'type',4775,'fun',[{'type',4775,'product',[{'type',4775,'syntaxTree',[]}]}|[{'type',4775,'syntaxTree',[]}]]}]}],
		%% Line 4791
		'spec' =
		    %% Line 4791
		    [{{'binary_comp_body',1},[{'type',4791,'fun',[{'type',4791,'product',[{'type',4791,'syntaxTree',[]}]}|[{'type',4791,'list',[{'type',4791,'syntaxTree',[]}]}]]}]}],
		%% Line 4819
		'type' =
		    %% Line 4819
		    [{{'record','rule'},[{'typed_record_field',{'record_field',4819,{'atom',4819,'name'}},{'type',4819,'union',[{'atom',4819,'undefined'}|[{'type',4819,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4819,{'atom',4819,'clauses'}},{'type',4819,'union',[{'atom',4819,'undefined'}|[{'type',4819,'list',[{'type',4819,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 4842
		'spec' =
		    %% Line 4842
		    [{{'rule',2},[{'type',4842,'fun',[{'type',4842,'product',[{'type',4842,'syntaxTree',[]}|[{'type',4842,'list',[{'type',4842,'syntaxTree',[]}]}]]}|[{'type',4842,'syntaxTree',[]}]]}]}],
		%% Line 4865
		'spec' =
		    %% Line 4865
		    [{{'rule_name',1},[{'type',4865,'fun',[{'type',4865,'product',[{'type',4865,'syntaxTree',[]}]}|[{'type',4865,'syntaxTree',[]}]]}]}],
		%% Line 4880
		'spec' =
		    %% Line 4880
		    [{{'rule_clauses',1},[{'type',4880,'fun',[{'type',4880,'product',[{'type',4880,'syntaxTree',[]}]}|[{'type',4880,'list',[{'type',4880,'syntaxTree',[]}]}]]}]}],
		%% Line 4905
		'spec' =
		    %% Line 4905
		    [{{'rule_arity',1},[{'type',4905,'fun',[{'type',4905,'product',[{'type',4905,'syntaxTree',[]}]}|[{'type',4905,'arity',[]}]]}]}],
		%% Line 4922
		'type' =
		    %% Line 4922
		    [{{'record','generator'},[{'typed_record_field',{'record_field',4922,{'atom',4922,'pattern'}},{'type',4922,'union',[{'atom',4922,'undefined'}|[{'type',4922,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4922,{'atom',4922,'body'}},{'type',4922,'union',[{'atom',4922,'undefined'}|[{'type',4922,'syntaxTree',[]}]]}}]],[]}],
		%% Line 4935
		'spec' =
		    %% Line 4935
		    [{{'generator',2},[{'type',4935,'fun',[{'type',4935,'product',[{'type',4935,'syntaxTree',[]}|[{'type',4935,'syntaxTree',[]}]]}|[{'type',4935,'syntaxTree',[]}]]}]}],
		%% Line 4952
		'spec' =
		    %% Line 4952
		    [{{'generator_pattern',1},[{'type',4952,'fun',[{'type',4952,'product',[{'type',4952,'syntaxTree',[]}]}|[{'type',4952,'syntaxTree',[]}]]}]}],
		%% Line 4968
		'spec' =
		    %% Line 4968
		    [{{'generator_body',1},[{'type',4968,'fun',[{'type',4968,'product',[{'type',4968,'syntaxTree',[]}]}|[{'type',4968,'syntaxTree',[]}]]}]}],
		%% Line 4988
		'type' =
		    %% Line 4988
		    [{{'record','binary_generator'},[{'typed_record_field',{'record_field',4988,{'atom',4988,'pattern'}},{'type',4988,'union',[{'atom',4988,'undefined'}|[{'type',4988,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',4988,{'atom',4988,'body'}},{'type',4988,'union',[{'atom',4988,'undefined'}|[{'type',4988,'syntaxTree',[]}]]}}]],[]}],
		%% Line 5001
		'spec' =
		    %% Line 5001
		    [{{'binary_generator',2},[{'type',5001,'fun',[{'type',5001,'product',[{'type',5001,'syntaxTree',[]}|[{'type',5001,'syntaxTree',[]}]]}|[{'type',5001,'syntaxTree',[]}]]}]}],
		%% Line 5018
		'spec' =
		    %% Line 5018
		    [{{'binary_generator_pattern',1},[{'type',5018,'fun',[{'type',5018,'product',[{'type',5018,'syntaxTree',[]}]}|[{'type',5018,'syntaxTree',[]}]]}]}],
		%% Line 5034
		'spec' =
		    %% Line 5034
		    [{{'binary_generator_body',1},[{'type',5034,'fun',[{'type',5034,'product',[{'type',5034,'syntaxTree',[]}]}|[{'type',5034,'syntaxTree',[]}]]}]}],
		%% Line 5063
		'spec' =
		    %% Line 5063
		    [{{'block_expr',1},[{'type',5063,'fun',[{'type',5063,'product',[{'type',5063,'list',[{'type',5063,'syntaxTree',[]}]}]}|[{'type',5063,'syntaxTree',[]}]]}]}],
		%% Line 5079
		'spec' =
		    %% Line 5079
		    [{{'block_expr_body',1},[{'type',5079,'fun',[{'type',5079,'product',[{'type',5079,'syntaxTree',[]}]}|[{'type',5079,'list',[{'type',5079,'syntaxTree',[]}]}]]}]}],
		%% Line 5117
		'spec' =
		    %% Line 5117
		    [{{'if_expr',1},[{'type',5117,'fun',[{'type',5117,'product',[{'type',5117,'list',[{'type',5117,'syntaxTree',[]}]}]}|[{'type',5117,'syntaxTree',[]}]]}]}],
		%% Line 5133
		'spec' =
		    %% Line 5133
		    [{{'if_expr_clauses',1},[{'type',5133,'fun',[{'type',5133,'product',[{'type',5133,'syntaxTree',[]}]}|[{'type',5133,'list',[{'type',5133,'syntaxTree',[]}]}]]}]}],
		%% Line 5159
		'type' =
		    %% Line 5159
		    [{{'record','case_expr'},[{'typed_record_field',{'record_field',5159,{'atom',5159,'argument'}},{'type',5159,'union',[{'atom',5159,'undefined'}|[{'type',5159,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',5159,{'atom',5159,'clauses'}},{'type',5159,'union',[{'atom',5159,'undefined'}|[{'type',5159,'list',[{'type',5159,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 5178
		'spec' =
		    %% Line 5178
		    [{{'case_expr',2},[{'type',5178,'fun',[{'type',5178,'product',[{'type',5178,'syntaxTree',[]}|[{'type',5178,'list',[{'type',5178,'syntaxTree',[]}]}]]}|[{'type',5178,'syntaxTree',[]}]]}]}],
		%% Line 5196
		'spec' =
		    %% Line 5196
		    [{{'case_expr_argument',1},[{'type',5196,'fun',[{'type',5196,'product',[{'type',5196,'syntaxTree',[]}]}|[{'type',5196,'syntaxTree',[]}]]}]}],
		%% Line 5212
		'spec' =
		    %% Line 5212
		    [{{'case_expr_clauses',1},[{'type',5212,'fun',[{'type',5212,'product',[{'type',5212,'syntaxTree',[]}]}|[{'type',5212,'list',[{'type',5212,'syntaxTree',[]}]}]]}]}],
		%% Line 5250
		'spec' =
		    %% Line 5250
		    [{{'cond_expr',1},[{'type',5250,'fun',[{'type',5250,'product',[{'type',5250,'list',[{'type',5250,'syntaxTree',[]}]}]}|[{'type',5250,'syntaxTree',[]}]]}]}],
		%% Line 5266
		'spec' =
		    %% Line 5266
		    [{{'cond_expr_clauses',1},[{'type',5266,'fun',[{'type',5266,'product',[{'type',5266,'syntaxTree',[]}]}|[{'type',5266,'list',[{'type',5266,'syntaxTree',[]}]}]]}]}],
		%% Line 5280
		'spec' =
		    %% Line 5280
		    [{{'receive_expr',1},[{'type',5280,'fun',[{'type',5280,'product',[{'type',5280,'list',[{'type',5280,'syntaxTree',[]}]}]}|[{'type',5280,'syntaxTree',[]}]]}]}],
		%% Line 5310
		'type' =
		    %% Line 5310
		    [{{'record','receive_expr'},[{'typed_record_field',{'record_field',5310,{'atom',5310,'clauses'}},{'type',5310,'union',[{'atom',5310,'undefined'}|[{'type',5310,'list',[{'type',5310,'syntaxTree',[]}]}]]}}|[{'typed_record_field',{'record_field',5311,{'atom',5311,'timeout'}},{'type',5311,'union',[{'atom',5311,'undefined'}|[{'atom',5311,'none'}|[{'type',5311,'syntaxTree',[]}]]]}}|[{'typed_record_field',{'record_field',5312,{'atom',5312,'action'}},{'type',5312,'union',[{'atom',5312,'undefined'}|[{'type',5312,'list',[{'type',5312,'syntaxTree',[]}]}]]}}]]],[]}],
		%% Line 5335
		'spec' =
		    %% Line 5335
		    [{{'receive_expr',3},[{'type',5335,'fun',[{'type',5335,'product',[{'type',5335,'list',[{'type',5335,'syntaxTree',[]}]}|[{'type',5335,'union',[{'atom',5335,'none'}|[{'type',5335,'syntaxTree',[]}]]}|[{'type',5335,'list',[{'type',5335,'syntaxTree',[]}]}]]]}|[{'type',5336,'syntaxTree',[]}]]}]}],
		%% Line 5370
		'spec' =
		    %% Line 5370
		    [{{'receive_expr_clauses',1},[{'type',5370,'fun',[{'type',5370,'product',[{'type',5370,'syntaxTree',[]}]}|[{'type',5370,'list',[{'type',5370,'syntaxTree',[]}]}]]}]}],
		%% Line 5393
		'spec' =
		    %% Line 5393
		    [{{'receive_expr_timeout',1},[{'type',5393,'fun',[{'type',5393,'product',[{'type',5393,'syntaxTree',[]}]}|[{'type',5393,'union',[{'atom',5393,'none'}|[{'type',5393,'syntaxTree',[]}]]}]]}]}],
		%% Line 5414
		'spec' =
		    %% Line 5414
		    [{{'receive_expr_action',1},[{'type',5414,'fun',[{'type',5414,'product',[{'type',5414,'syntaxTree',[]}]}|[{'type',5414,'list',[{'type',5414,'syntaxTree',[]}]}]]}]}],
		%% Line 5430
		'spec' =
		    %% Line 5430
		    [{{'try_expr',2},[{'type',5430,'fun',[{'type',5430,'product',[{'type',5430,'list',[{'type',5430,'syntaxTree',[]}]}|[{'type',5430,'list',[{'type',5430,'syntaxTree',[]}]}]]}|[{'type',5430,'syntaxTree',[]}]]}]}],
		%% Line 5439
		'spec' =
		    %% Line 5439
		    [{{'try_expr',3},[{'type',5439,'fun',[{'type',5439,'product',[{'type',5439,'list',[{'type',5439,'syntaxTree',[]}]}|[{'type',5439,'list',[{'type',5439,'syntaxTree',[]}]}|[{'type',5439,'list',[{'type',5439,'syntaxTree',[]}]}]]]}|[{'type',5439,'syntaxTree',[]}]]}]}],
		%% Line 5448
		'spec' =
		    %% Line 5448
		    [{{'try_after_expr',2},[{'type',5448,'fun',[{'type',5448,'product',[{'type',5448,'list',[{'type',5448,'syntaxTree',[]}]}|[{'type',5448,'list',[{'type',5448,'syntaxTree',[]}]}]]}|[{'type',5448,'syntaxTree',[]}]]}]}],
		%% Line 5487
		'type' =
		    %% Line 5487
		    [{{'record','try_expr'},[{'typed_record_field',{'record_field',5487,{'atom',5487,'body'}},{'type',5487,'union',[{'atom',5487,'undefined'}|[{'type',5487,'list',[{'type',5487,'syntaxTree',[]}]}]]}}|[{'typed_record_field',{'record_field',5488,{'atom',5488,'clauses'}},{'type',5488,'union',[{'atom',5488,'undefined'}|[{'type',5488,'list',[{'type',5488,'syntaxTree',[]}]}]]}}|[{'typed_record_field',{'record_field',5489,{'atom',5489,'handlers'}},{'type',5489,'union',[{'atom',5489,'undefined'}|[{'type',5489,'list',[{'type',5489,'syntaxTree',[]}]}]]}}|[{'typed_record_field',{'record_field',5490,{'atom',5490,'after'}},{'type',5490,'union',[{'atom',5490,'undefined'}|[{'type',5490,'list',[{'type',5490,'syntaxTree',[]}]}]]}}]]]],[]}],
		%% Line 5513
		'spec' =
		    %% Line 5513
		    [{{'try_expr',4},[{'type',5513,'fun',[{'type',5513,'product',[{'type',5513,'list',[{'type',5513,'syntaxTree',[]}]}|[{'type',5513,'list',[{'type',5513,'syntaxTree',[]}]}|[{'type',5514,'list',[{'type',5514,'syntaxTree',[]}]}|[{'type',5514,'list',[{'type',5514,'syntaxTree',[]}]}]]]]}|[{'type',5514,'syntaxTree',[]}]]}]}],
		%% Line 5536
		'spec' =
		    %% Line 5536
		    [{{'try_expr_body',1},[{'type',5536,'fun',[{'type',5536,'product',[{'type',5536,'syntaxTree',[]}]}|[{'type',5536,'list',[{'type',5536,'syntaxTree',[]}]}]]}]}],
		%% Line 5555
		'spec' =
		    %% Line 5555
		    [{{'try_expr_clauses',1},[{'type',5555,'fun',[{'type',5555,'product',[{'type',5555,'syntaxTree',[]}]}|[{'type',5555,'list',[{'type',5555,'syntaxTree',[]}]}]]}]}],
		%% Line 5572
		'spec' =
		    %% Line 5572
		    [{{'try_expr_handlers',1},[{'type',5572,'fun',[{'type',5572,'product',[{'type',5572,'syntaxTree',[]}]}|[{'type',5572,'list',[{'type',5572,'syntaxTree',[]}]}]]}]}],
		%% Line 5588
		'spec' =
		    %% Line 5588
		    [{{'try_expr_after',1},[{'type',5588,'fun',[{'type',5588,'product',[{'type',5588,'syntaxTree',[]}]}|[{'type',5588,'list',[{'type',5588,'syntaxTree',[]}]}]]}]}],
		%% Line 5607
		'type' =
		    %% Line 5607
		    [{{'record','class_qualifier'},[{'typed_record_field',{'record_field',5607,{'atom',5607,'class'}},{'type',5607,'union',[{'atom',5607,'undefined'}|[{'type',5607,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',5607,{'atom',5607,'body'}},{'type',5607,'union',[{'atom',5607,'undefined'}|[{'type',5607,'syntaxTree',[]}]]}}]],[]}],
		%% Line 5614
		'spec' =
		    %% Line 5614
		    [{{'class_qualifier',2},[{'type',5614,'fun',[{'type',5614,'product',[{'type',5614,'syntaxTree',[]}|[{'type',5614,'syntaxTree',[]}]]}|[{'type',5614,'syntaxTree',[]}]]}]}],
		%% Line 5627
		'spec' =
		    %% Line 5627
		    [{{'class_qualifier_argument',1},[{'type',5627,'fun',[{'type',5627,'product',[{'type',5627,'syntaxTree',[]}]}|[{'type',5627,'syntaxTree',[]}]]}]}],
		%% Line 5638
		'spec' =
		    %% Line 5638
		    [{{'class_qualifier_body',1},[{'type',5638,'fun',[{'type',5638,'product',[{'type',5638,'syntaxTree',[]}]}|[{'type',5638,'syntaxTree',[]}]]}]}],
		%% Line 5655
		'spec' =
		    %% Line 5655
		    [{{'implicit_fun',2},[{'type',5655,'fun',[{'type',5655,'product',[{'type',5655,'syntaxTree',[]}|[{'type',5655,'union',[{'atom',5655,'none'}|[{'type',5655,'syntaxTree',[]}]]}]]}|[{'type',5655,'syntaxTree',[]}]]}]}],
		%% Line 5675
		'spec' =
		    %% Line 5675
		    [{{'implicit_fun',3},[{'type',5675,'fun',[{'type',5675,'product',[{'type',5675,'union',[{'atom',5675,'none'}|[{'type',5675,'syntaxTree',[]}]]}|[{'type',5675,'syntaxTree',[]}|[{'type',5675,'syntaxTree',[]}]]]}|[{'type',5676,'syntaxTree',[]}]]}]}],
		%% Line 5708
		'spec' =
		    %% Line 5708
		    [{{'implicit_fun',1},[{'type',5708,'fun',[{'type',5708,'product',[{'type',5708,'syntaxTree',[]}]}|[{'type',5708,'syntaxTree',[]}]]}]}],
		%% Line 5756
		'spec' =
		    %% Line 5756
		    [{{'implicit_fun_name',1},[{'type',5756,'fun',[{'type',5756,'product',[{'type',5756,'syntaxTree',[]}]}|[{'type',5756,'syntaxTree',[]}]]}]}],
		%% Line 5808
		'spec' =
		    %% Line 5808
		    [{{'fun_expr',1},[{'type',5808,'fun',[{'type',5808,'product',[{'type',5808,'list',[{'type',5808,'syntaxTree',[]}]}]}|[{'type',5808,'syntaxTree',[]}]]}]}],
		%% Line 5824
		'spec' =
		    %% Line 5824
		    [{{'fun_expr_clauses',1},[{'type',5824,'fun',[{'type',5824,'product',[{'type',5824,'syntaxTree',[]}]}|[{'type',5824,'list',[{'type',5824,'syntaxTree',[]}]}]]}]}],
		%% Line 5850
		'spec' =
		    %% Line 5850
		    [{{'fun_expr_arity',1},[{'type',5850,'fun',[{'type',5850,'product',[{'type',5850,'syntaxTree',[]}]}|[{'type',5850,'arity',[]}]]}]}],
		%% Line 5871
		'type' =
		    %% Line 5871
		    [{{'record','named_fun_expr'},[{'typed_record_field',{'record_field',5871,{'atom',5871,'name'}},{'type',5871,'union',[{'atom',5871,'undefined'}|[{'type',5871,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',5871,{'atom',5871,'clauses'}},{'type',5871,'union',[{'atom',5871,'undefined'}|[{'type',5871,'list',[{'type',5871,'syntaxTree',[]}]}]]}}]],[]}],
		%% Line 5890
		'spec' =
		    %% Line 5890
		    [{{'named_fun_expr',2},[{'type',5890,'fun',[{'type',5890,'product',[{'type',5890,'syntaxTree',[]}|[{'type',5890,'list',[{'type',5890,'syntaxTree',[]}]}]]}|[{'type',5890,'syntaxTree',[]}]]}]}],
		%% Line 5912
		'spec' =
		    %% Line 5912
		    [{{'named_fun_expr_name',1},[{'type',5912,'fun',[{'type',5912,'product',[{'type',5912,'syntaxTree',[]}]}|[{'type',5912,'syntaxTree',[]}]]}]}],
		%% Line 5928
		'spec' =
		    %% Line 5928
		    [{{'named_fun_expr_clauses',1},[{'type',5928,'fun',[{'type',5928,'product',[{'type',5928,'syntaxTree',[]}]}|[{'type',5928,'list',[{'type',5928,'syntaxTree',[]}]}]]}]}],
		%% Line 5954
		'spec' =
		    %% Line 5954
		    [{{'named_fun_expr_arity',1},[{'type',5954,'fun',[{'type',5954,'product',[{'type',5954,'syntaxTree',[]}]}|[{'type',5954,'arity',[]}]]}]}],
		%% Line 5970
		'spec' =
		    %% Line 5970
		    [{{'parentheses',1},[{'type',5970,'fun',[{'type',5970,'product',[{'type',5970,'syntaxTree',[]}]}|[{'type',5970,'syntaxTree',[]}]]}]}],
		%% Line 5984
		'spec' =
		    %% Line 5984
		    [{{'parentheses_body',1},[{'type',5984,'fun',[{'type',5984,'product',[{'type',5984,'syntaxTree',[]}]}|[{'type',5984,'syntaxTree',[]}]]}]}],
		%% Line 5993
		'spec' =
		    %% Line 5993
		    [{{'macro',1},[{'type',5993,'fun',[{'type',5993,'product',[{'type',5993,'syntaxTree',[]}]}|[{'type',5993,'syntaxTree',[]}]]}]}],
		%% Line 6022
		'type' =
		    %% Line 6022
		    [{{'record','macro'},[{'typed_record_field',{'record_field',6022,{'atom',6022,'name'}},{'type',6022,'union',[{'atom',6022,'undefined'}|[{'type',6022,'syntaxTree',[]}]]}}|[{'typed_record_field',{'record_field',6022,{'atom',6022,'arguments'}},{'type',6022,'union',[{'atom',6022,'undefined'}|[{'atom',6022,'none'}|[{'type',6022,'list',[{'type',6022,'syntaxTree',[]}]}]]]}}]],[]}],
		%% Line 6030
		'spec' =
		    %% Line 6030
		    [{{'macro',2},[{'type',6030,'fun',[{'type',6030,'product',[{'type',6030,'syntaxTree',[]}|[{'type',6030,'union',[{'atom',6030,'none'}|[{'type',6030,'list',[{'type',6030,'syntaxTree',[]}]}]]}]]}|[{'type',6030,'syntaxTree',[]}]]}]}],
		%% Line 6041
		'spec' =
		    %% Line 6041
		    [{{'macro_name',1},[{'type',6041,'fun',[{'type',6041,'product',[{'type',6041,'syntaxTree',[]}]}|[{'type',6041,'syntaxTree',[]}]]}]}],
		%% Line 6057
		'spec' =
		    %% Line 6057
		    [{{'macro_arguments',1},[{'type',6057,'fun',[{'type',6057,'product',[{'type',6057,'syntaxTree',[]}]}|[{'type',6057,'union',[{'atom',6057,'none'}|[{'type',6057,'list',[{'type',6057,'syntaxTree',[]}]}]]}]]}]}],
		%% Line 6075
		'spec' =
		    %% Line 6075
		    [{{'abstract',1},[{'type',6075,'fun',[{'type',6075,'product',[{'type',6075,'term',[]}]}|[{'type',6075,'syntaxTree',[]}]]}]}],
		%% Line 6136
		'spec' =
		    %% Line 6136
		    [{{'concrete',1},[{'type',6136,'fun',[{'type',6136,'product',[{'type',6136,'syntaxTree',[]}]}|[{'type',6136,'term',[]}]]}]}],
		%% Line 6192
		'spec' =
		    %% Line 6192
		    [{{'is_literal',1},[{'type',6192,'fun',[{'type',6192,'product',[{'type',6192,'syntaxTree',[]}]}|[{'type',6192,'boolean',[]}]]}]}],
		%% Line 6235
		'spec' =
		    %% Line 6235
		    [{{'revert',1},[{'type',6235,'fun',[{'type',6235,'product',[{'type',6235,'syntaxTree',[]}]}|[{'type',6235,'syntaxTree',[]}]]}]}],
		%% Line 6378
		'type' =
		    %% Line 6378
		    [{'forms',{'type',6378,'union',[{'type',6378,'syntaxTree',[]}|[{'type',6378,'list',[{'type',6378,'syntaxTree',[]}]}]]},[]}],
		%% Line 6380
		'spec' =
		    %% Line 6380
		    [{{'revert_forms',1},[{'type',6380,'fun',[{'type',6380,'product',[{'type',6380,'forms',[]}]}|[{'type',6380,'list',[{'type',6380,'erl_parse',[]}]}]]}]}],
		%% Line 6474
		'spec' =
		    %% Line 6474
		    [{{'subtrees',1},[{'type',6474,'fun',[{'type',6474,'product',[{'type',6474,'syntaxTree',[]}]}|[{'type',6474,'list',[{'type',6474,'list',[{'type',6474,'syntaxTree',[]}]}]}]]}]}],
		%% Line 6657
		'spec' =
		    %% Line 6657
		    [{{'update_tree',2},[{'type',6657,'fun',[{'type',6657,'product',[{'type',6657,'syntaxTree',[]}|[{'type',6657,'list',[{'type',6657,'list',[{'type',6657,'syntaxTree',[]}]}]}]]}|[{'type',6657,'syntaxTree',[]}]]}]}],
		%% Line 6685
		'spec' =
		    %% Line 6685
		    [{{'make_tree',2},[{'type',6685,'fun',[{'type',6685,'product',[{'type',6685,'atom',[]}|[{'type',6685,'list',[{'type',6685,'list',[{'type',6685,'syntaxTree',[]}]}]}]]}|[{'type',6685,'syntaxTree',[]}]]}]}],
		%% Line 6784
		'spec' =
		    %% Line 6784
		    [{{'meta',1},[{'type',6784,'fun',[{'type',6784,'product',[{'type',6784,'syntaxTree',[]}]}|[{'type',6784,'syntaxTree',[]}]]}]}],
		%% Line 6911
		'spec' =
		    %% Line 6911
		    [{{'tree',1},[{'type',6911,'fun',[{'type',6911,'product',[{'type',6911,'atom',[]}]}|[{'type',6911,'record',[{'atom',6911,'tree'}]}]]}]}],
		%% Line 6946
		'spec' =
		    %% Line 6946
		    [{{'tree',2},[{'type',6946,'fun',[{'type',6946,'product',[{'type',6946,'atom',[]}|[{'type',6946,'term',[]}]]}|[{'type',6946,'record',[{'atom',6946,'tree'}]}]]}]}],
		%% Line 6962
		'spec' =
		    %% Line 6962
		    [{{'is_tree',1},[{'type',6962,'fun',[{'type',6962,'product',[{'type',6962,'syntaxTree',[]}]}|[{'type',6962,'boolean',[]}]]}]}],
		%% Line 6978
		'spec' =
		    %% Line 6978
		    [{{'data',1},[{'type',6978,'fun',[{'type',6978,'product',[{'type',6978,'syntaxTree',[]}]}|[{'type',6978,'term',[]}]]}]}],
		%% Line 7002
		'spec' =
		    %% Line 7002
		    [{{'wrap',1},[{'type',7002,'fun',[{'type',7002,'product',[{'type',7002,'erl_parse',[]}]}|[{'type',7002,'record',[{'atom',7002,'wrapper'}]}]]}]}],
		%% Line 7016
		'spec' =
		    %% Line 7016
		    [{{'unwrap',1},[{'type',7016,'fun',[{'type',7016,'product',[{'type',7016,'syntaxTree',[]}]}|[{'type',7016,'union',[{'type',7016,'record',[{'atom',7016,'tree'}]}|[{'type',7016,'erl_parse',[]}]]}]]}]}]]
'type'/1 =
    %% Line 555
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',T,_cor3,_cor4}> when 'true' ->
	      %% Line 556
	      T
	  %% Line 557
	  <{'wrapper',T,_cor5,_cor6}> when 'true' ->
	      %% Line 558
	      T
	  %% Line 559
	  <Node> when 'true' ->
	      %% Line 561
	      case Node of
		%% Line 563
		<{'atom',_cor7,_cor8}> when 'true' ->
		    'atom'
		%% Line 564
		<{'char',_cor9,_cor10}> when 'true' ->
		    'char'
		%% Line 565
		<{'float',_cor11,_cor12}> when 'true' ->
		    'float'
		%% Line 566
		<{'integer',_cor13,_cor14}> when 'true' ->
		    'integer'
		%% Line 567
		<{'nil',_cor15}> when 'true' ->
		    'nil'
		%% Line 568
		<{'string',_cor16,_cor17}> when 'true' ->
		    'string'
		%% Line 569
		<{'var',_cor18,Name}> when 'true' ->
		    %% Line 570
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(Name,
				 '_') ->
			  'underscore'
		      %% Line 571
		      <> when 'true' ->
			  'variable'
		    end
		%% Line 573
		<{'error',_cor19}> when 'true' ->
		    'error_marker'
		%% Line 574
		<{'warning',_cor20}> when 'true' ->
		    'warning_marker'
		%% Line 575
		<{'eof',_cor21}> when 'true' ->
		    'eof_marker'
		%% Line 578
		<{'case',_cor22,_cor23,_cor24}> when 'true' ->
		    'case_expr'
		%% Line 579
		<{'catch',_cor25,_cor26}> when 'true' ->
		    'catch_expr'
		%% Line 580
		<{'cond',_cor27,_cor28}> when 'true' ->
		    'cond_expr'
		%% Line 581
		<{'fun',_cor29,{'clauses',_cor30}}> when 'true' ->
		    'fun_expr'
		%% Line 582
		<{'named_fun',_cor31,_cor32,_cor33}> when 'true' ->
		    'named_fun_expr'
		%% Line 583
		<{'fun',_cor34,{'function',_cor35,_cor36}}> when 'true' ->
		    'implicit_fun'
		%% Line 584
		<{'fun',_cor37,{'function',_cor38,_cor39,_cor40}}> when 'true' ->
		    'implicit_fun'
		%% Line 585
		<{'if',_cor41,_cor42}> when 'true' ->
		    'if_expr'
		%% Line 586
		<{'receive',_cor43,_cor44,_cor45,_cor46}> when 'true' ->
		    'receive_expr'
		%% Line 587
		<{'receive',_cor47,_cor48}> when 'true' ->
		    'receive_expr'
		%% Line 588
		<{'attribute',_cor49,_cor50,_cor51}> when 'true' ->
		    'attribute'
		%% Line 589
		<{'bin',_cor52,_cor53}> when 'true' ->
		    'binary'
		%% Line 590
		<{'bin_element',_cor54,_cor55,_cor56,_cor57}> when 'true' ->
		    'binary_field'
		%% Line 591
		<{'block',_cor58,_cor59}> when 'true' ->
		    'block_expr'
		%% Line 592
		<{'call',_cor60,_cor61,_cor62}> when 'true' ->
		    'application'
		%% Line 593
		<{'clause',_cor63,_cor64,_cor65,_cor66}> when 'true' ->
		    'clause'
		%% Line 594
		<{'cons',_cor67,_cor68,_cor69}> when 'true' ->
		    'list'
		%% Line 595
		<{'function',_cor70,_cor71,_cor72,_cor73}> when 'true' ->
		    'function'
		%% Line 596
		<{'b_generate',_cor74,_cor75,_cor76}> when 'true' ->
		    'binary_generator'
		%% Line 597
		<{'generate',_cor77,_cor78,_cor79}> when 'true' ->
		    'generator'
		%% Line 598
		<{'lc',_cor80,_cor81,_cor82}> when 'true' ->
		    'list_comp'
		%% Line 599
		<{'bc',_cor83,_cor84,_cor85}> when 'true' ->
		    'binary_comp'
		%% Line 600
		<{'match',_cor86,_cor87,_cor88}> when 'true' ->
		    'match_expr'
		%% Line 601
		<{'map',_cor89,_cor90,_cor91}> when 'true' ->
		    'map_expr'
		%% Line 602
		<{'map',_cor92,_cor93}> when 'true' ->
		    'map_expr'
		%% Line 603
		<{'map_field_assoc',_cor94,_cor95,_cor96}> when 'true' ->
		    'map_field_assoc'
		%% Line 604
		<{'map_field_exact',_cor97,_cor98,_cor99}> when 'true' ->
		    'map_field_exact'
		%% Line 605
		<{'op',_cor100,_cor101,_cor102,_cor103}> when 'true' ->
		    'infix_expr'
		%% Line 606
		<{'op',_cor104,_cor105,_cor106}> when 'true' ->
		    'prefix_expr'
		%% Line 607
		<{'record',_cor107,_cor108,_cor109,_cor110}> when 'true' ->
		    'record_expr'
		%% Line 608
		<{'record',_cor111,_cor112,_cor113}> when 'true' ->
		    'record_expr'
		%% Line 609
		<{'record_field',_cor114,_cor115,_cor116,_cor117}> when 'true' ->
		    'record_access'
		%% Line 610
		<{'record_field',_cor118,_cor119,_cor120}> when 'true' ->
		    'record_access'
		%% Line 611
		<{'record_index',_cor121,_cor122,_cor123}> when 'true' ->
		    'record_index_expr'
		%% Line 612
		<{'remote',_cor124,_cor125,_cor126}> when 'true' ->
		    'module_qualifier'
		%% Line 613
		<{'rule',_cor127,_cor128,_cor129,_cor130}> when 'true' ->
		    'rule'
		%% Line 614
		<{'try',_cor131,_cor132,_cor133,_cor134,_cor135}> when 'true' ->
		    'try_expr'
		%% Line 615
		<{'tuple',_cor136,_cor137}> when 'true' ->
		    'tuple'
		%% Line 616
		<_cor138> when 'true' ->
		    %% Line 617
		    call 'erlang':'error'
			({'badarg',Node})
	      end
	end
'is_leaf'/1 =
    %% Line 659
    fun (_cor0) ->
	%% Line 660
	case apply 'type'/1
		 (_cor0) of
	  %% Line 661
	  <'atom'> when 'true' ->
	      'true'
	  %% Line 662
	  <'char'> when 'true' ->
	      'true'
	  %% Line 663
	  <'comment'> when 'true' ->
	      'true'
	  %% Line 664
	  <'eof_marker'> when 'true' ->
	      'true'
	  %% Line 665
	  <'error_marker'> when 'true' ->
	      'true'
	  %% Line 666
	  <'float'> when 'true' ->
	      'true'
	  %% Line 667
	  <'integer'> when 'true' ->
	      'true'
	  %% Line 668
	  <'nil'> when 'true' ->
	      'true'
	  %% Line 669
	  <'operator'> when 'true' ->
	      'true'
	  %% Line 670
	  <'string'> when 'true' ->
	      'true'
	  %% Line 671
	  <'text'> when 'true' ->
	      'true'
	  %% Line 672
	  <'tuple'> when 'true' ->
	      let <_cor1> =
		  apply 'tuple_elements'/1
		      (_cor0)
	      in  call 'erlang':'=:='
		      (_cor1, [])
	  %% Line 673
	  <'underscore'> when 'true' ->
	      'true'
	  %% Line 674
	  <'variable'> when 'true' ->
	      'true'
	  %% Line 675
	  <'warning_marker'> when 'true' ->
	      'true'
	  %% Line 676
	  <_cor4> when 'true' ->
	      'false'
	end
'is_form'/1 =
    %% Line 714
    fun (_cor0) ->
	%% Line 715
	case apply 'type'/1
		 (_cor0) of
	  %% Line 716
	  <'attribute'> when 'true' ->
	      'true'
	  %% Line 717
	  <'comment'> when 'true' ->
	      'true'
	  %% Line 718
	  <'function'> when 'true' ->
	      'true'
	  %% Line 719
	  <'eof_marker'> when 'true' ->
	      'true'
	  %% Line 720
	  <'error_marker'> when 'true' ->
	      'true'
	  %% Line 721
	  <'form_list'> when 'true' ->
	      'true'
	  %% Line 722
	  <'rule'> when 'true' ->
	      'true'
	  %% Line 723
	  <'warning_marker'> when 'true' ->
	      'true'
	  %% Line 724
	  <'text'> when 'true' ->
	      'true'
	  %% Line 725
	  <_cor3> when 'true' ->
	      'false'
	end
'get_pos'/1 =
    %% Line 748
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor4,Attr,_cor5}> when 'true' ->
	      %% Line 749
	      ( case Attr of
		  ( <( {'attr',_rec0,_cor6,_cor7}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec0
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 750
	  <{'wrapper',_cor9,Attr,_cor10}> when 'true' ->
	      %% Line 751
	      ( case Attr of
		  ( <( {'attr',_rec1,_cor11,_cor12}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec1
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 752
	  <{'error',{Pos,_cor14,_cor15}}> when 'true' ->
	      %% Line 753
	      Pos
	  %% Line 754
	  <{'warning',{Pos,_cor16,_cor17}}> when 'true' ->
	      %% Line 755
	      Pos
	  %% Line 756
	  <Node> when 'true' ->
	      %% Line 759
	      call 'erlang':'element'
		  (2, Node)
	end
'set_pos'/2 =
    %% Line 770
    fun (_cor1,_cor0) ->
	%% Line 771
	case _cor1 of
	  %% Line 772
	  <{'tree',_cor18,Attr,_cor19}> when 'true' ->
	      %% Line 773
	      case Attr of
		<{'attr',_cor20,_cor21,_cor22}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (2, Attr, _cor0)
		    in  call 'erlang':'setelement'
			    (3, _cor1, _cor4)
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','attr'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 774
	  <{'wrapper',_cor28,Attr,_cor29}> when 'true' ->
	      %% Line 775
	      case Attr of
		<{'attr',_cor30,_cor31,_cor32}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (2, Attr, _cor0)
		    in  call 'erlang':'setelement'
			    (3, _cor1, _cor10)
		( <_cor33> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','attr'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 776
	  <_cor38> when 'true' ->
	      let <_cor14> =
		  %% Line 779
		  apply 'wrap'/1
		      (_cor1)
	      in  %% Line 779
		  apply 'set_pos'/2
		      (_cor14, _cor0)
	end
'copy_pos'/2 =
    %% Line 794
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 795
	    apply 'get_pos'/1
		(_cor1)
	in  %% Line 795
	    apply 'set_pos'/2
		(_cor0, _cor2)
'get_com'/1 =
    %% Line 801
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor4,Attr,_cor5}> when 'true' ->
	      ( case Attr of
		  ( <( {'attr',_cor6,_cor7,_rec8}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec8
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 802
	  <{'wrapper',_cor9,Attr,_cor10}> when 'true' ->
	      ( case Attr of
		  ( <( {'attr',_cor11,_cor12,_rec9}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec9
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 803
	  <_cor14> when 'true' ->
	      'none'
	end
'set_com'/2 =
    %% Line 805
    fun (_cor1,_cor0) ->
	%% Line 806
	case _cor1 of
	  %% Line 807
	  <{'tree',_cor18,Attr,_cor19}> when 'true' ->
	      %% Line 808
	      case Attr of
		<{'attr',_cor20,_cor21,_cor22}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (4, Attr, _cor0)
		    in  call 'erlang':'setelement'
			    (3, _cor1, _cor4)
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','attr'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 809
	  <{'wrapper',_cor28,Attr,_cor29}> when 'true' ->
	      %% Line 810
	      case Attr of
		<{'attr',_cor30,_cor31,_cor32}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (4, Attr, _cor0)
		    in  call 'erlang':'setelement'
			    (3, _cor1, _cor10)
		( <_cor33> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','attr'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 811
	  <_cor38> when 'true' ->
	      let <_cor14> =
		  %% Line 812
		  apply 'wrap'/1
		      (_cor1)
	      in  %% Line 812
		  apply 'set_com'/2
		      (_cor14, _cor0)
	end
'get_precomments'/1 =
    %% Line 839
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor2,Attr,_cor3}> when 'true' ->
	      apply 'get_precomments_1'/1
		  (Attr)
	  %% Line 840
	  <{'wrapper',_cor4,Attr,_cor5}> when 'true' ->
	      apply 'get_precomments_1'/1
		  (Attr)
	  %% Line 841
	  <_cor6> when 'true' ->
	      []
	end
'get_precomments_1'/1 =
    %% Line 843
    fun (_cor0) ->
	case _cor0 of
	  <{'attr',_cor2,_cor3,'none'}> when 'true' ->
	      []
	  %% Line 844
	  <{'attr',_cor4,_cor5,{'com',Cs,_cor6}}> when 'true' ->
	      Cs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_precomments_1',1}}] )
	    -| ['compiler_generated'] )
	end
'set_precomments'/2 =
    %% Line 862
    fun (_cor1,_cor0) ->
	%% Line 863
	case _cor1 of
	  %% Line 864
	  <{'tree',_cor12,Attr,_cor13}> when 'true' ->
	      let <_rec16> =
		  %% Line 865
		  apply 'set_precomments_1'/2
		      (Attr, _cor0)
	      in  %% Line 865
		  call 'erlang':'setelement'
		      (3, _cor1, _rec16)
	  %% Line 866
	  <{'wrapper',_cor18,Attr,_cor19}> when 'true' ->
	      let <_rec18> =
		  %% Line 867
		  apply 'set_precomments_1'/2
		      (Attr, _cor0)
	      in  %% Line 867
		  call 'erlang':'setelement'
		      (3, _cor1, _rec18)
	  %% Line 868
	  <_cor24> when 'true' ->
	      let <_cor8> =
		  %% Line 869
		  apply 'wrap'/1
		      (_cor1)
	      in  %% Line 869
		  apply 'set_precomments'/2
		      (_cor8, _cor0)
	end
'set_precomments_1'/2 =
    %% Line 872
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Attr = {'attr',_cor13,_cor14,'none'},Cs> when 'true' ->
	      let <_rec20> = {%% Line 873
		   'com',%% Line 873
			 Cs,[]}
	      in  %% Line 873
		  call 'erlang':'setelement'
		      (4, Attr, _rec20)
	  %% Line 874
	  <Attr = {'attr',_cor19,_cor20,Com},Cs> when 'true' ->
	      %% Line 875
	      case Com of
		<{'com',_cor21,_cor22}> when 'true' ->
		    let <_cor7> =
			call 'erlang':'setelement'
			    (2, Com, Cs)
		    in  call 'erlang':'setelement'
			    (4, Attr, _cor7)
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','com'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'set_precomments_1',2}}] )
	    -| ['compiler_generated'] )
	end
'add_precomments'/2 =
    %% Line 893
    fun (_cor1,_cor0) ->
	%% Line 894
	case _cor0 of
	  %% Line 895
	  <{'tree',_cor12,Attr,_cor13}> when 'true' ->
	      let <_rec25> =
		  %% Line 896
		  apply 'add_precomments_1'/2
		      (_cor1, Attr)
	      in  %% Line 896
		  call 'erlang':'setelement'
		      (3, _cor0, _rec25)
	  %% Line 897
	  <{'wrapper',_cor18,Attr,_cor19}> when 'true' ->
	      let <_rec27> =
		  %% Line 898
		  apply 'add_precomments_1'/2
		      (_cor1, Attr)
	      in  %% Line 898
		  call 'erlang':'setelement'
		      (3, _cor0, _rec27)
	  %% Line 899
	  <_cor24> when 'true' ->
	      let <_cor8> =
		  %% Line 900
		  apply 'wrap'/1
		      (_cor0)
	      in  %% Line 900
		  apply 'add_precomments'/2
		      (_cor1, _cor8)
	end
'add_precomments_1'/2 =
    %% Line 903
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cs,Attr = {'attr',_cor16,_cor17,'none'}> when 'true' ->
	      let <_rec29> = {%% Line 904
		   'com',%% Line 904
			 Cs,[]}
	      in  %% Line 904
		  call 'erlang':'setelement'
		      (4, Attr, _rec29)
	  %% Line 905
	  <Cs,Attr = {'attr',_cor22,_cor23,Com}> when 'true' ->
	      %% Line 906
	      ( case Com of
		  ( <( {'com',_rec35,_cor24}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec33> =
			    call 'erlang':'++'
				(_rec35, Cs)
			in  let <_cor10> =
				call 'erlang':'setelement'
				    (2, Com, _rec33)
			    in  call 'erlang':'setelement'
				    (4, Attr, _cor10)
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','com'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'add_precomments_1',2}}] )
	    -| ['compiler_generated'] )
	end
'get_postcomments'/1 =
    %% Line 932
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor2,Attr,_cor3}> when 'true' ->
	      apply 'get_postcomments_1'/1
		  (Attr)
	  %% Line 933
	  <{'wrapper',_cor4,Attr,_cor5}> when 'true' ->
	      apply 'get_postcomments_1'/1
		  (Attr)
	  %% Line 934
	  <_cor6> when 'true' ->
	      []
	end
'get_postcomments_1'/1 =
    %% Line 936
    fun (_cor0) ->
	case _cor0 of
	  <{'attr',_cor2,_cor3,'none'}> when 'true' ->
	      []
	  %% Line 937
	  <{'attr',_cor4,_cor5,{'com',_cor6,Cs}}> when 'true' ->
	      Cs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_postcomments_1',1}}] )
	    -| ['compiler_generated'] )
	end
'set_postcomments'/2 =
    %% Line 955
    fun (_cor1,_cor0) ->
	%% Line 956
	case _cor1 of
	  %% Line 957
	  <{'tree',_cor12,Attr,_cor13}> when 'true' ->
	      let <_rec36> =
		  %% Line 958
		  apply 'set_postcomments_1'/2
		      (Attr, _cor0)
	      in  %% Line 958
		  call 'erlang':'setelement'
		      (3, _cor1, _rec36)
	  %% Line 959
	  <{'wrapper',_cor18,Attr,_cor19}> when 'true' ->
	      let <_rec38> =
		  %% Line 960
		  apply 'set_postcomments_1'/2
		      (Attr, _cor0)
	      in  %% Line 960
		  call 'erlang':'setelement'
		      (3, _cor1, _rec38)
	  %% Line 961
	  <_cor24> when 'true' ->
	      let <_cor8> =
		  %% Line 962
		  apply 'wrap'/1
		      (_cor1)
	      in  %% Line 962
		  apply 'set_postcomments'/2
		      (_cor8, _cor0)
	end
'set_postcomments_1'/2 =
    %% Line 965
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Attr = {'attr',_cor13,_cor14,'none'},Cs> when 'true' ->
	      let <_rec40> = {%% Line 966
		   'com',[],%% Line 966
			    Cs}
	      in  %% Line 966
		  call 'erlang':'setelement'
		      (4, Attr, _rec40)
	  %% Line 967
	  <Attr = {'attr',_cor19,_cor20,Com},Cs> when 'true' ->
	      %% Line 968
	      case Com of
		<{'com',_cor21,_cor22}> when 'true' ->
		    let <_cor7> =
			call 'erlang':'setelement'
			    (3, Com, Cs)
		    in  call 'erlang':'setelement'
			    (4, Attr, _cor7)
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','com'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'set_postcomments_1',2}}] )
	    -| ['compiler_generated'] )
	end
'add_postcomments'/2 =
    %% Line 986
    fun (_cor1,_cor0) ->
	%% Line 987
	case _cor0 of
	  %% Line 988
	  <{'tree',_cor12,Attr,_cor13}> when 'true' ->
	      let <_rec45> =
		  %% Line 989
		  apply 'add_postcomments_1'/2
		      (_cor1, Attr)
	      in  %% Line 989
		  call 'erlang':'setelement'
		      (3, _cor0, _rec45)
	  %% Line 990
	  <{'wrapper',_cor18,Attr,_cor19}> when 'true' ->
	      let <_rec47> =
		  %% Line 991
		  apply 'add_postcomments_1'/2
		      (_cor1, Attr)
	      in  %% Line 991
		  call 'erlang':'setelement'
		      (3, _cor0, _rec47)
	  %% Line 992
	  <_cor24> when 'true' ->
	      let <_cor8> =
		  %% Line 993
		  apply 'wrap'/1
		      (_cor0)
	      in  %% Line 993
		  apply 'add_postcomments'/2
		      (_cor1, _cor8)
	end
'add_postcomments_1'/2 =
    %% Line 996
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cs,Attr = {'attr',_cor16,_cor17,'none'}> when 'true' ->
	      let <_rec49> = {%% Line 997
		   'com',[],%% Line 997
			    Cs}
	      in  %% Line 997
		  call 'erlang':'setelement'
		      (4, Attr, _rec49)
	  %% Line 998
	  <Cs,Attr = {'attr',_cor22,_cor23,Com}> when 'true' ->
	      %% Line 999
	      ( case Com of
		  ( <( {'com',_cor24,_rec55}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec53> =
			    call 'erlang':'++'
				(_rec55, Cs)
			in  let <_cor10> =
				call 'erlang':'setelement'
				    (3, Com, _rec53)
			    in  call 'erlang':'setelement'
				    (4, Attr, _cor10)
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','com'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'add_postcomments_1',2}}] )
	    -| ['compiler_generated'] )
	end
'has_comments'/1 =
    %% Line 1016
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor8,Attr,_cor9}> when 'true' ->
	      %% Line 1017
	      ( case Attr of
		  ( <( {'attr',_cor10,_cor11,_rec56}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec56 of
			  %% Line 1018
			  <'none'> when 'true' ->
			      'false'
			  %% Line 1019
			  <{'com',[],[]}> when 'true' ->
			      'false'
			  %% Line 1020
			  <_cor13> when 'true' ->
			      'true'
			end
		    -| ['compiler_generated'] )
		  ( <_cor12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1022
	  <{'wrapper',_cor14,Attr,_cor15}> when 'true' ->
	      %% Line 1023
	      ( case Attr of
		  ( <( {'attr',_cor16,_cor17,_rec57}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec57 of
			  %% Line 1024
			  <'none'> when 'true' ->
			      'false'
			  %% Line 1025
			  <{'com',[],[]}> when 'true' ->
			      'false'
			  %% Line 1026
			  <_cor19> when 'true' ->
			      'true'
			end
		    -| ['compiler_generated'] )
		  ( <_cor18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1028
	  <_cor20> when 'true' ->
	      'false'
	end
'remove_comments'/1 =
    %% Line 1043
    fun (_cor0) ->
	%% Line 1044
	case _cor0 of
	  %% Line 1045
	  <{'tree',_cor15,Attr,_cor16}> when 'true' ->
	      %% Line 1046
	      case Attr of
		<{'attr',_cor17,_cor18,_cor19}> when 'true' ->
		    let <_cor3> =
			call 'erlang':'setelement'
			    (4, Attr, 'none')
		    in  call 'erlang':'setelement'
			    (3, _cor0, _cor3)
		( <_cor20> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','attr'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1047
	  <{'wrapper',_cor25,Attr,_cor26}> when 'true' ->
	      %% Line 1048
	      case Attr of
		<{'attr',_cor27,_cor28,_cor29}> when 'true' ->
		    let <_cor9> =
			call 'erlang':'setelement'
			    (4, Attr, 'none')
		    in  call 'erlang':'setelement'
			    (3, _cor0, _cor9)
		( <_cor30> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','attr'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1049
	  <_cor35> when 'true' ->
	      _cor0
	end
'copy_comments'/2 =
    %% Line 1070
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1071
	    apply 'get_com'/1
		(_cor1)
	in  %% Line 1071
	    apply 'set_com'/2
		(_cor0, _cor2)
'join_comments'/2 =
    %% Line 1091
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1093
	    apply 'get_postcomments'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 1094
		apply 'get_precomments'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 1094
		    apply 'add_precomments'/2
			(_cor2, _cor0)
		in  %% Line 1092
		    apply 'add_postcomments'/2
			(_cor4, _cor3)
'get_ann'/1 =
    %% Line 1107
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor4,Attr,_cor5}> when 'true' ->
	      ( case Attr of
		  ( <( {'attr',_cor6,_rec64,_cor7}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec64
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1108
	  <{'wrapper',_cor9,Attr,_cor10}> when 'true' ->
	      ( case Attr of
		  ( <( {'attr',_cor11,_rec65,_cor12}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec65
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1109
	  <_cor14> when 'true' ->
	      []
	end
'set_ann'/2 =
    %% Line 1121
    fun (_cor1,_cor0) ->
	%% Line 1122
	case _cor1 of
	  %% Line 1123
	  <{'tree',_cor18,Attr,_cor19}> when 'true' ->
	      %% Line 1124
	      case Attr of
		<{'attr',_cor20,_cor21,_cor22}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (3, Attr, _cor0)
		    in  call 'erlang':'setelement'
			    (3, _cor1, _cor4)
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','attr'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1125
	  <{'wrapper',_cor28,Attr,_cor29}> when 'true' ->
	      %% Line 1126
	      case Attr of
		<{'attr',_cor30,_cor31,_cor32}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (3, Attr, _cor0)
		    in  call 'erlang':'setelement'
			    (3, _cor1, _cor10)
		( <_cor33> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','attr'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1127
	  <_cor38> when 'true' ->
	      let <_cor14> =
		  %% Line 1130
		  apply 'wrap'/1
		      (_cor1)
	      in  %% Line 1130
		  apply 'set_ann'/2
		      (_cor14, _cor0)
	end
'add_ann'/2 =
    %% Line 1146
    fun (_cor1,_cor0) ->
	%% Line 1147
	case _cor0 of
	  %% Line 1148
	  <{'tree',_cor24,Attr,_cor25}> when 'true' ->
	      %% Line 1149
	      ( case Attr of
		  ( <( {'attr',_cor26,_rec76,_cor27}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec74> =
			    [_cor1|_rec76]
			in  let <_cor7> =
				call 'erlang':'setelement'
				    (3, Attr, _rec74)
			    in  call 'erlang':'setelement'
				    (3, _cor0, _cor7)
		    -| ['compiler_generated'] )
		  ( <_cor28> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1150
	  <{'wrapper',_cor37,Attr,_cor38}> when 'true' ->
	      %% Line 1151
	      ( case Attr of
		  ( <( {'attr',_cor39,_rec81,_cor40}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec79> =
			    [_cor1|_rec81]
			in  let <_cor16> =
				call 'erlang':'setelement'
				    (3, Attr, _rec79)
			    in  call 'erlang':'setelement'
				    (3, _cor0, _cor16)
		    -| ['compiler_generated'] )
		  ( <_cor41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1152
	  <_cor50> when 'true' ->
	      let <_cor20> =
		  %% Line 1155
		  apply 'wrap'/1
		      (_cor0)
	      in  %% Line 1155
		  apply 'add_ann'/2
		      (_cor1, _cor20)
	end
'copy_ann'/2 =
    %% Line 1170
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1171
	    apply 'get_ann'/1
		(_cor1)
	in  %% Line 1171
	    apply 'set_ann'/2
		(_cor0, _cor2)
'get_attrs'/1 =
    %% Line 1197
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor5,Attr,_cor6}> when 'true' ->
	      Attr
	  %% Line 1198
	  <{'wrapper',_cor7,Attr,_cor8}> when 'true' ->
	      Attr
	  %% Line 1199
	  <Node> when 'true' ->
	      let <_cor3> =
		  apply 'get_pos'/1
		      (Node)
	      in  let <_cor2> =
		      %% Line 1200
		      apply 'get_ann'/1
			  (Node)
		  in  let <_cor1> =
			  %% Line 1201
			  apply 'get_com'/1
			      (Node)
		      in  {'attr',_cor3,_cor2,_cor1}
	end
'set_attrs'/2 =
    %% Line 1212
    fun (_cor1,_cor0) ->
	%% Line 1213
	case _cor1 of
	  %% Line 1214
	  <{'tree',_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 1215
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  %% Line 1216
	  <{'wrapper',_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 1217
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  %% Line 1218
	  <_cor24> when 'true' ->
	      let <_cor6> =
		  %% Line 1219
		  apply 'wrap'/1
		      (_cor1)
	      in  %% Line 1219
		  apply 'set_attrs'/2
		      (_cor6, _cor0)
	end
'copy_attrs'/2 =
    %% Line 1234
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1235
	    apply 'get_attrs'/1
		(_cor1)
	in  %% Line 1235
	    apply 'set_attrs'/2
		(_cor0, _cor2)
'comment'/1 =
    %% Line 1243
    fun (_cor0) ->
	%% Line 1244
	apply 'comment'/2
	    ('none', _cor0)
'comment'/2 =
    %% Line 1279
    fun (_cor1,_cor0) ->
	%% Line 1280
	apply 'tree'/2
	    ('comment', {'comment',_cor1,_cor0})
'comment_text'/1 =
    %% Line 1290
    fun (_cor0) ->
	%% Line 1291
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'comment',_cor3,_rec84}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec84
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','comment'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'comment_padding'/1 =
    %% Line 1302
    fun (_cor0) ->
	%% Line 1303
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'comment',_rec85,_cor3}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec85
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','comment'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'form_list'/1 =
    %% Line 1335
    fun (_cor0) ->
	%% Line 1336
	apply 'tree'/2
	    ('form_list', _cor0)
'form_list_elements'/1 =
    %% Line 1346
    fun (_cor0) ->
	%% Line 1347
	apply 'data'/1
	    (_cor0)
'flatten_form_list'/1 =
    %% Line 1360
    fun (_cor0) ->
	let <Fs> =
	    %% Line 1361
	    apply 'form_list_elements'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1362
		apply 'flatten_form_list_1'/2
		    (Fs, [])
	    in  let <Fs1> =
		    %% Line 1362
		    call 'lists':'reverse'
			(_cor2)
		in  let <_cor4> =
			%% Line 1363
			apply 'form_list'/1
			    (Fs1)
		    in  %% Line 1363
			apply 'copy_attrs'/2
			    (_cor0, _cor4)
'flatten_form_list_1'/2 =
    %% Line 1365
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[F|Fs],As> when 'true' ->
	      %% Line 1366
	      case apply 'type'/1
		       (F) of
		%% Line 1367
		<'form_list'> when 'true' ->
		    let <_cor2> =
			%% Line 1368
			apply 'form_list_elements'/1
			    (F)
		    in  let <As1> =
			    %% Line 1368
			    apply 'flatten_form_list_1'/2
				(_cor2, As)
			in  %% Line 1369
			    apply 'flatten_form_list_1'/2
				(Fs, As1)
		%% Line 1370
		<_cor7> when 'true' ->
		    %% Line 1371
		    apply 'flatten_form_list_1'/2
			(Fs, [F|As])
	      end
	  %% Line 1373
	  <[],As> when 'true' ->
	      %% Line 1374
	      As
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'flatten_form_list_1',2}}] )
	    -| ['compiler_generated'] )
	end
'text'/1 =
    %% Line 1391
    fun (_cor0) ->
	%% Line 1392
	apply 'tree'/2
	    ('text', _cor0)
'text_string'/1 =
    %% Line 1402
    fun (_cor0) ->
	%% Line 1403
	apply 'data'/1
	    (_cor0)
'variable'/1 =
    %% Line 1432
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1433
	      apply 'tree'/2
		  ('variable', Name)
	  %% Line 1434
	  <Name> when 'true' ->
	      let <_cor1> =
		  %% Line 1435
		  call 'erlang':'list_to_atom'
		      (Name)
	      in  %% Line 1435
		  apply 'tree'/2
		      ('variable', _cor1)
	end
'revert_variable'/1 =
    %% Line 1437
    fun (_cor0) ->
	let <Pos> =
	    %% Line 1438
	    apply 'get_pos'/1
		(_cor0)
	in  let <Name> =
		%% Line 1439
		apply 'variable_name'/1
		    (_cor0)
	    in  %% Line 1440
		{'var',Pos,Name}
'variable_name'/1 =
    %% Line 1450
    fun (_cor0) ->
	%% Line 1451
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 1452
	  <{'var',_cor3,Name}> when 'true' ->
	      %% Line 1453
	      Name
	  %% Line 1454
	  <Node1> when 'true' ->
	      %% Line 1455
	      apply 'data'/1
		  (Node1)
	end
'variable_literal'/1 =
    %% Line 1466
    fun (_cor0) ->
	%% Line 1467
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 1468
	  <{'var',_cor4,Name}> when 'true' ->
	      %% Line 1469
	      call 'erlang':'atom_to_list'
		  (Name)
	  %% Line 1470
	  <Node1> when 'true' ->
	      let <_cor1> =
		  %% Line 1471
		  apply 'data'/1
		      (Node1)
	      in  %% Line 1471
		  call 'erlang':'atom_to_list'
		      (_cor1)
	end
'underscore'/0 =
    %% Line 1491
    fun () ->
	%% Line 1492
	apply 'tree'/2
	    ('underscore', [])
'revert_underscore'/1 =
    %% Line 1494
    fun (_cor0) ->
	let <Pos> =
	    %% Line 1495
	    apply 'get_pos'/1
		(_cor0)
	in  %% Line 1496
	    {'var',Pos,'_'}
'integer'/1 =
    %% Line 1518
    fun (_cor0) ->
	%% Line 1519
	apply 'tree'/2
	    ('integer', _cor0)
'revert_integer'/1 =
    %% Line 1521
    fun (_cor0) ->
	let <Pos> =
	    %% Line 1522
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1523
		apply 'integer_value'/1
		    (_cor0)
	    in  %% Line 1523
		{'integer',Pos,_cor2}
'is_integer'/2 =
    %% Line 1534
    fun (_cor1,_cor0) ->
	%% Line 1535
	case apply 'unwrap'/1
		 (_cor1) of
	  %% Line 1536
	  <{'integer',_cor5,_cor6}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor0) ->
	      %% Line 1537
	      'true'
	  %% Line 1538
	  <{'tree','integer',_cor7,_cor8}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor0) ->
	      %% Line 1539
	      'true'
	  %% Line 1540
	  <_cor9> when 'true' ->
	      %% Line 1541
	      'false'
	end
'integer_value'/1 =
    %% Line 1552
    fun (_cor0) ->
	%% Line 1553
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 1554
	  <{'integer',_cor3,Value}> when 'true' ->
	      %% Line 1555
	      Value
	  %% Line 1556
	  <Node1> when 'true' ->
	      %% Line 1557
	      apply 'data'/1
		  (Node1)
	end
'integer_literal'/1 =
    %% Line 1568
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1569
	    apply 'integer_value'/1
		(_cor0)
	in  %% Line 1569
	    call 'erlang':'integer_to_list'
		(_cor1)
'float'/1 =
    %% Line 1597
    fun (_cor0) ->
	%% Line 1598
	apply 'make_float'/1
	    (_cor0)
'make_float'/1 =
    %% Line 1600
    fun (_cor0) ->
	%% Line 1601
	apply 'tree'/2
	    ('float', _cor0)
'revert_float'/1 =
    %% Line 1603
    fun (_cor0) ->
	let <Pos> =
	    %% Line 1604
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1605
		apply 'float_value'/1
		    (_cor0)
	    in  %% Line 1605
		{'float',Pos,_cor2}
'float_value'/1 =
    %% Line 1617
    fun (_cor0) ->
	%% Line 1618
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 1619
	  <{'float',_cor3,Value}> when 'true' ->
	      %% Line 1620
	      Value
	  %% Line 1621
	  <Node1> when 'true' ->
	      %% Line 1622
	      apply 'data'/1
		  (Node1)
	end
'float_literal'/1 =
    %% Line 1633
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1634
	    apply 'float_value'/1
		(_cor0)
	in  %% Line 1634
	    call 'erlang':'float_to_list'
		(_cor1)
'char'/1 =
    %% Line 1664
    fun (_cor0) ->
	%% Line 1665
	apply 'tree'/2
	    ('char', _cor0)
'revert_char'/1 =
    %% Line 1667
    fun (_cor0) ->
	let <Pos> =
	    %% Line 1668
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1669
		apply 'char_value'/1
		    (_cor0)
	    in  %% Line 1669
		{'char',Pos,_cor2}
'is_char'/2 =
    %% Line 1680
    fun (_cor1,_cor0) ->
	%% Line 1681
	case apply 'unwrap'/1
		 (_cor1) of
	  %% Line 1682
	  <{'char',_cor5,_cor6}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor0) ->
	      %% Line 1683
	      'true'
	  %% Line 1684
	  <{'tree','char',_cor7,_cor8}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor0) ->
	      %% Line 1685
	      'true'
	  %% Line 1686
	  <_cor9> when 'true' ->
	      %% Line 1687
	      'false'
	end
'char_value'/1 =
    %% Line 1698
    fun (_cor0) ->
	%% Line 1699
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 1700
	  <{'char',_cor3,Char}> when 'true' ->
	      %% Line 1701
	      Char
	  %% Line 1702
	  <Node1> when 'true' ->
	      %% Line 1703
	      apply 'data'/1
		  (Node1)
	end
'char_literal'/1 =
    %% Line 1716
    fun (_cor0) ->
	%% Line 1717
	apply 'char_literal'/2
	    (_cor0, 'latin1')
'char_literal'/2 =
    %% Line 1732
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,'unicode'> when 'true' ->
	      let <_cor2> =
		  %% Line 1733
		  apply 'char_value'/1
		      (Node)
	      in  %% Line 1733
		  call 'io_lib':'write_char'
		      (_cor2)
	  %% Line 1734
	  <Node,'utf8'> when 'true' ->
	      let <_cor3> =
		  %% Line 1735
		  apply 'char_value'/1
		      (Node)
	      in  %% Line 1735
		  call 'io_lib':'write_char'
		      (_cor3)
	  %% Line 1736
	  <Node,'latin1'> when 'true' ->
	      let <_cor4> =
		  %% Line 1737
		  apply 'char_value'/1
		      (Node)
	      in  %% Line 1737
		  call 'io_lib':'write_char_as_latin1'
		      (_cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'char_literal',2}}] )
	    -| ['compiler_generated'] )
	end
'string'/1 =
    %% Line 1767
    fun (_cor0) ->
	%% Line 1768
	apply 'tree'/2
	    ('string', _cor0)
'revert_string'/1 =
    %% Line 1770
    fun (_cor0) ->
	let <Pos> =
	    %% Line 1771
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1772
		apply 'string_value'/1
		    (_cor0)
	    in  %% Line 1772
		{'string',Pos,_cor2}
'is_string'/2 =
    %% Line 1783
    fun (_cor1,_cor0) ->
	%% Line 1784
	case apply 'unwrap'/1
		 (_cor1) of
	  %% Line 1785
	  <{'string',_cor5,_cor6}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor0) ->
	      %% Line 1786
	      'true'
	  %% Line 1787
	  <{'tree','string',_cor7,_cor8}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor0) ->
	      %% Line 1788
	      'true'
	  %% Line 1789
	  <_cor9> when 'true' ->
	      %% Line 1790
	      'false'
	end
'string_value'/1 =
    %% Line 1801
    fun (_cor0) ->
	%% Line 1802
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 1803
	  <{'string',_cor3,List}> when 'true' ->
	      %% Line 1804
	      List
	  %% Line 1805
	  <Node1> when 'true' ->
	      %% Line 1806
	      apply 'data'/1
		  (Node1)
	end
'string_literal'/1 =
    %% Line 1819
    fun (_cor0) ->
	%% Line 1820
	apply 'string_literal'/2
	    (_cor0, 'latin1')
'string_literal'/2 =
    %% Line 1833
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,'utf8'> when 'true' ->
	      let <_cor2> =
		  %% Line 1834
		  apply 'string_value'/1
		      (Node)
	      in  %% Line 1834
		  call 'io_lib':'write_string'
		      (_cor2)
	  %% Line 1835
	  <Node,'unicode'> when 'true' ->
	      let <_cor3> =
		  %% Line 1836
		  apply 'string_value'/1
		      (Node)
	      in  %% Line 1836
		  call 'io_lib':'write_string'
		      (_cor3)
	  %% Line 1837
	  <Node,'latin1'> when 'true' ->
	      let <_cor4> =
		  %% Line 1838
		  apply 'string_value'/1
		      (Node)
	      in  %% Line 1838
		  call 'io_lib':'write_string_as_latin1'
		      (_cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'string_literal',2}}] )
	    -| ['compiler_generated'] )
	end
'atom'/1 =
    %% Line 1861
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1862
	      apply 'tree'/2
		  ('atom', Name)
	  %% Line 1863
	  <Name> when 'true' ->
	      let <_cor1> =
		  %% Line 1864
		  call 'erlang':'list_to_atom'
		      (Name)
	      in  %% Line 1864
		  apply 'tree'/2
		      ('atom', _cor1)
	end
'revert_atom'/1 =
    %% Line 1866
    fun (_cor0) ->
	let <Pos> =
	    %% Line 1867
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1868
		apply 'atom_value'/1
		    (_cor0)
	    in  %% Line 1868
		{'atom',Pos,_cor2}
'is_atom'/2 =
    %% Line 1879
    fun (_cor1,_cor0) ->
	%% Line 1880
	case apply 'unwrap'/1
		 (_cor1) of
	  %% Line 1881
	  <{'atom',_cor5,_cor6}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor0) ->
	      %% Line 1882
	      'true'
	  %% Line 1883
	  <{'tree','atom',_cor7,_cor8}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor0) ->
	      %% Line 1884
	      'true'
	  %% Line 1885
	  <_cor9> when 'true' ->
	      %% Line 1886
	      'false'
	end
'atom_value'/1 =
    %% Line 1897
    fun (_cor0) ->
	%% Line 1898
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 1899
	  <{'atom',_cor3,Name}> when 'true' ->
	      %% Line 1900
	      Name
	  %% Line 1901
	  <Node1> when 'true' ->
	      %% Line 1902
	      apply 'data'/1
		  (Node1)
	end
'atom_name'/1 =
    %% Line 1913
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1914
	    apply 'atom_value'/1
		(_cor0)
	in  %% Line 1914
	    call 'erlang':'atom_to_list'
		(_cor1)
'atom_literal'/1 =
    %% Line 1930
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1931
	    apply 'atom_value'/1
		(_cor0)
	in  %% Line 1931
	    call 'io_lib':'write_atom'
		(_cor1)
'map_expr'/1 =
    %% Line 1939
    fun (_cor0) ->
	%% Line 1940
	apply 'map_expr'/2
	    ('none', _cor0)
'map_expr'/2 =
    %% Line 1966
    fun (_cor1,_cor0) ->
	%% Line 1967
	apply 'tree'/2
	    ('map_expr', {'map_expr',_cor1,_cor0})
'revert_map_expr'/1 =
    %% Line 1969
    fun (_cor0) ->
	let <Pos> =
	    %% Line 1970
	    apply 'get_pos'/1
		(_cor0)
	in  let <Argument> =
		%% Line 1971
		apply 'map_expr_argument'/1
		    (_cor0)
	    in  let <Fields> =
		    %% Line 1972
		    apply 'map_expr_fields'/1
			(_cor0)
		in  %% Line 1973
		    case Argument of
		      %% Line 1974
		      <'none'> when 'true' ->
			  %% Line 1975
			  {'map',Pos,Fields}
		      %% Line 1976
		      <_cor6> when 'true' ->
			  %% Line 1977
			  {'map',Pos,Argument,Fields}
		    end
'map_expr_argument'/1 =
    %% Line 1991
    fun (_cor0) ->
	%% Line 1992
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 1993
	  <{'map',_cor4,_cor5}> when 'true' ->
	      %% Line 1994
	      'none'
	  %% Line 1995
	  <{'map',_cor6,Argument,_cor7}> when 'true' ->
	      %% Line 1996
	      Argument
	  %% Line 1997
	  <Node1> when 'true' ->
	      %% Line 1998
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'map_expr',_rec86,_cor8}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec86
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','map_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'map_expr_fields'/1 =
    %% Line 2009
    fun (_cor0) ->
	%% Line 2010
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2011
	  <{'map',_cor4,Fields}> when 'true' ->
	      %% Line 2012
	      Fields
	  %% Line 2013
	  <{'map',_cor5,_cor6,Fields}> when 'true' ->
	      %% Line 2014
	      Fields
	  %% Line 2015
	  <Node1> when 'true' ->
	      %% Line 2016
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'map_expr',_cor7,_rec87}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec87
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','map_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'map_field_assoc'/2 =
    %% Line 2036
    fun (_cor1,_cor0) ->
	%% Line 2037
	apply 'tree'/2
	    ('map_field_assoc', {'map_field_assoc',_cor1,_cor0})
'revert_map_field_assoc'/1 =
    %% Line 2039
    fun (_cor0) ->
	let <Pos> =
	    %% Line 2040
	    apply 'get_pos'/1
		(_cor0)
	in  let <Name> =
		%% Line 2041
		apply 'map_field_assoc_name'/1
		    (_cor0)
	    in  let <Value> =
		    %% Line 2042
		    apply 'map_field_assoc_value'/1
			(_cor0)
		in  %% Line 2043
		    {'map_field_assoc',Pos,Name,Value}
'map_field_assoc_name'/1 =
    %% Line 2053
    fun (_cor0) ->
	%% Line 2054
	case _cor0 of
	  %% Line 2055
	  <{'map_field_assoc',_cor4,Name,_cor5}> when 'true' ->
	      %% Line 2056
	      Name
	  %% Line 2057
	  <_cor6> when 'true' ->
	      %% Line 2058
	      ( case apply 'data'/1
			 (_cor0) of
		  ( <( {'map_field_assoc',_rec88,_cor7}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec88
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','map_field_assoc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'map_field_assoc_value'/1 =
    %% Line 2069
    fun (_cor0) ->
	%% Line 2070
	case _cor0 of
	  %% Line 2071
	  <{'map_field_assoc',_cor4,_cor5,Value}> when 'true' ->
	      %% Line 2072
	      Value
	  %% Line 2073
	  <_cor6> when 'true' ->
	      %% Line 2074
	      ( case apply 'data'/1
			 (_cor0) of
		  ( <( {'map_field_assoc',_cor7,_rec89}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec89
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','map_field_assoc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'map_field_exact'/2 =
    %% Line 2094
    fun (_cor1,_cor0) ->
	%% Line 2095
	apply 'tree'/2
	    ('map_field_exact', {'map_field_exact',_cor1,_cor0})
'revert_map_field_exact'/1 =
    %% Line 2097
    fun (_cor0) ->
	let <Pos> =
	    %% Line 2098
	    apply 'get_pos'/1
		(_cor0)
	in  let <Name> =
		%% Line 2099
		apply 'map_field_exact_name'/1
		    (_cor0)
	    in  let <Value> =
		    %% Line 2100
		    apply 'map_field_exact_value'/1
			(_cor0)
		in  %% Line 2101
		    {'map_field_exact',Pos,Name,Value}
'map_field_exact_name'/1 =
    %% Line 2111
    fun (_cor0) ->
	%% Line 2112
	case _cor0 of
	  %% Line 2113
	  <{'map_field_exact',_cor4,Name,_cor5}> when 'true' ->
	      %% Line 2114
	      Name
	  %% Line 2115
	  <_cor6> when 'true' ->
	      %% Line 2116
	      ( case apply 'data'/1
			 (_cor0) of
		  ( <( {'map_field_exact',_rec90,_cor7}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec90
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','map_field_exact'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'map_field_exact_value'/1 =
    %% Line 2127
    fun (_cor0) ->
	%% Line 2128
	case _cor0 of
	  %% Line 2129
	  <{'map_field_exact',_cor4,_cor5,Value}> when 'true' ->
	      %% Line 2130
	      Value
	  %% Line 2131
	  <_cor6> when 'true' ->
	      %% Line 2132
	      ( case apply 'data'/1
			 (_cor0) of
		  ( <( {'map_field_exact',_cor7,_rec91}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec91
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','map_field_exact'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'tuple'/1 =
    %% Line 2160
    fun (_cor0) ->
	%% Line 2161
	apply 'tree'/2
	    ('tuple', _cor0)
'revert_tuple'/1 =
    %% Line 2163
    fun (_cor0) ->
	let <Pos> =
	    %% Line 2164
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 2165
		apply 'tuple_elements'/1
		    (_cor0)
	    in  %% Line 2165
		{'tuple',Pos,_cor2}
'tuple_elements'/1 =
    %% Line 2175
    fun (_cor0) ->
	%% Line 2176
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2177
	  <{'tuple',_cor3,List}> when 'true' ->
	      %% Line 2178
	      List
	  %% Line 2179
	  <Node1> when 'true' ->
	      %% Line 2180
	      apply 'data'/1
		  (Node1)
	end
'tuple_size'/1 =
    %% Line 2196
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2197
	    apply 'tuple_elements'/1
		(_cor0)
	in  %% Line 2197
	    call 'erlang':'length'
		(_cor1)
'list'/1 =
    %% Line 2205
    fun (_cor0) ->
	%% Line 2206
	apply 'list'/2
	    (_cor0, 'none')
'list'/2 =
    %% Line 2271
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],'none'> when 'true' ->
	      %% Line 2272
	      apply 'nil'/0
		  ()
	  %% Line 2273
	  <Elements,Tail>
	      when call 'erlang':'=/='
		    (Elements,
		     []) ->
	      %% Line 2274
	      apply 'tree'/2
		  ('list', {'list',Elements,Tail})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'list',2}}] )
	    -| ['compiler_generated'] )
	end
'revert_list'/1 =
    %% Line 2276
    fun (_cor0) ->
	let <Pos> =
	    %% Line 2277
	    apply 'get_pos'/1
		(_cor0)
	in  let <P> =
		%% Line 2278
		apply 'list_prefix'/1
		    (_cor0)
	    in  let <_cor6> =
		    %% Line 2279
		    case apply 'list_suffix'/1
			     (_cor0) of
		      %% Line 2280
		      <'none'> when 'true' ->
			  let <_cor3> =
			      %% Line 2281
			      apply 'nil'/0
				  ()
			  in  let <_cor4> =
				  %% Line 2281
				  apply 'set_pos'/2
				      (_cor3, Pos)
			      in  %% Line 2281
				  apply 'revert_nil'/1
				      (_cor4)
		      %% Line 2282
		      <S1> when 'true' ->
			  %% Line 2283
			  S1
		    end
		in  let <_cor12> =
			%% Line 2285
			( fun (_cor9,_cor8) ->
			      %% Line 2286
			      {'cons',Pos,_cor9,_cor8}
			  -| [{'id',{0,0,'-revert_list/1-fun-0-'}}] )
		    in  %% Line 2285
			call 'lists':'foldr'
			    (_cor12, _cor6, %% Line 2288
					    P)
'nil'/0 =
    %% Line 2306
    fun () ->
	%% Line 2307
	apply 'tree'/1
	    ('nil')
'revert_nil'/1 =
    %% Line 2309
    fun (_cor0) ->
	let <Pos> =
	    %% Line 2310
	    apply 'get_pos'/1
		(_cor0)
	in  %% Line 2311
	    {'nil',Pos}
'list_prefix'/1 =
    %% Line 2325
    fun (_cor0) ->
	%% Line 2326
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2327
	  <{'cons',_cor5,Head,Tail}> when 'true' ->
	      let <_cor1> =
		  %% Line 2328
		  apply 'cons_prefix'/1
		      (Tail)
	      in  %% Line 2328
		  [Head|_cor1]
	  %% Line 2329
	  <Node1> when 'true' ->
	      %% Line 2330
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'list',_rec92,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec92
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','list'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'cons_prefix'/1 =
    %% Line 2334
    fun (_cor0) ->
	case _cor0 of
	  <{'cons',_cor3,Head,Tail}> when 'true' ->
	      let <_cor1> =
		  %% Line 2335
		  apply 'cons_prefix'/1
		      (Tail)
	      in  %% Line 2335
		  [Head|_cor1]
	  %% Line 2336
	  <_cor4> when 'true' ->
	      %% Line 2337
	      []
	end
'list_suffix'/1 =
    %% Line 2359
    fun (_cor0) ->
	%% Line 2360
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2361
	  <{'cons',_cor5,_cor6,Tail}> when 'true' ->
	      %% Line 2362
	      case apply 'cons_suffix'/1
		       (Tail) of
		%% Line 2363
		<{'nil',_cor7}> when 'true' ->
		    %% Line 2364
		    'none'
		%% Line 2365
		<Tail1> when 'true' ->
		    %% Line 2366
		    Tail1
	      end
	  %% Line 2368
	  <Node1> when 'true' ->
	      %% Line 2369
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'list',_cor8,_rec93}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec93
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','list'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'cons_suffix'/1 =
    %% Line 2373
    fun (_cor0) ->
	case _cor0 of
	  <{'cons',_cor2,_cor3,Tail}> when 'true' ->
	      %% Line 2374
	      apply 'cons_suffix'/1
		  (Tail)
	  %% Line 2375
	  <Tail> when 'true' ->
	      %% Line 2376
	      Tail
	end
'cons'/2 =
    %% Line 2400
    fun (_cor1,_cor0) ->
	%% Line 2401
	case apply 'type'/1
		 (_cor0) of
	  %% Line 2402
	  <'list'> when 'true' ->
	      let <_cor3> =
		  %% Line 2403
		  apply 'list_prefix'/1
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 2404
		      apply 'list_suffix'/1
			  (_cor0)
		  in  let <_cor4> =
			  %% Line 2403
			  apply 'list'/2
			      ([_cor1|_cor3], _cor2)
		      in  %% Line 2403
			  apply 'copy_comments'/2
			      (_cor0, _cor4)
	  %% Line 2405
	  <'nil'> when 'true' ->
	      let <_cor5> =
		  %% Line 2406
		  apply 'list'/1
		      ([_cor1|[]])
	      in  %% Line 2406
		  apply 'copy_comments'/2
		      (_cor0, _cor5)
	  %% Line 2407
	  <_cor9> when 'true' ->
	      %% Line 2408
	      apply 'list'/2
		  ([_cor1|[]], _cor0)
	end
'list_head'/1 =
    %% Line 2423
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2424
	    apply 'list_prefix'/1
		(_cor0)
	in  %% Line 2424
	    call 'erlang':'hd'
		(_cor1)
'list_tail'/1 =
    %% Line 2444
    fun (_cor0) ->
	let <Tail> =
	    %% Line 2445
	    apply 'list_suffix'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 2446
		apply 'list_prefix'/1
		    (_cor0)
	    in  %% Line 2446
		case call 'erlang':'tl'
			 (_cor2) of
		  %% Line 2447
		  <[]> when 'true' ->
		      %% Line 2448
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (Tail,
				   'none') ->
			    %% Line 2449
			    apply 'nil'/0
				()
			%% Line 2450
			<> when 'true' ->
			    %% Line 2451
			    Tail
		      end
		  %% Line 2453
		  <Es> when 'true' ->
		      %% Line 2454
		      apply 'list'/2
			  (Es, Tail)
		end
'is_list_skeleton'/1 =
    %% Line 2467
    fun (_cor0) ->
	%% Line 2468
	case apply 'type'/1
		 (_cor0) of
	  %% Line 2469
	  <'list'> when 'true' ->
	      'true'
	  %% Line 2470
	  <'nil'> when 'true' ->
	      'true'
	  %% Line 2471
	  <_cor3> when 'true' ->
	      'false'
	end
'is_proper_list'/1 =
    %% Line 2497
    fun (_cor0) ->
	%% Line 2498
	case apply 'type'/1
		 (_cor0) of
	  %% Line 2499
	  <'list'> when 'true' ->
	      %% Line 2500
	      case apply 'list_suffix'/1
		       (_cor0) of
		%% Line 2501
		<'none'> when 'true' ->
		    %% Line 2502
		    'true'
		%% Line 2503
		<Tail> when 'true' ->
		    %% Line 2504
		    apply 'is_proper_list'/1
			(Tail)
	      end
	  %% Line 2506
	  <'nil'> when 'true' ->
	      %% Line 2507
	      'true'
	  %% Line 2508
	  <_cor4> when 'true' ->
	      %% Line 2509
	      'false'
	end
'list_elements'/1 =
    %% Line 2525
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2526
	    apply 'list_elements'/2
		(_cor0, [])
	in  %% Line 2526
	    call 'lists':'reverse'
		(_cor1)
'list_elements'/2 =
    %% Line 2528
    fun (_cor1,_cor0) ->
	%% Line 2529
	case apply 'type'/1
		 (_cor1) of
	  %% Line 2530
	  <'list'> when 'true' ->
	      let <_cor2> =
		  %% Line 2531
		  apply 'list_prefix'/1
		      (_cor1)
	      in  let <_cor3> =
		      %% Line 2531
		      call 'lists':'reverse'
			  (_cor2)
		  in  let <As1> =
			  %% Line 2531
			  call 'erlang':'++'
			      (_cor3, _cor0)
		      in  %% Line 2532
			  case apply 'list_suffix'/1
				   (_cor1) of
			    %% Line 2533
			    <'none'> when 'true' ->
				%% Line 2534
				As1
			    %% Line 2535
			    <Tail> when 'true' ->
				%% Line 2536
				apply 'list_elements'/2
				    (Tail, As1)
			  end
	  %% Line 2538
	  <'nil'> when 'true' ->
	      _cor0
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'list_length'/1 =
    %% Line 2560
    fun (_cor0) ->
	%% Line 2561
	apply 'list_length'/2
	    (_cor0, 0)
'list_length'/2 =
    %% Line 2563
    fun (_cor1,_cor0) ->
	%% Line 2564
	case apply 'type'/1
		 (_cor1) of
	  %% Line 2565
	  <'list'> when 'true' ->
	      let <_cor2> =
		  %% Line 2566
		  apply 'list_prefix'/1
		      (_cor1)
	      in  let <_cor3> =
		      %% Line 2566
		      call 'erlang':'length'
			  (_cor2)
		  in  let <A1> =
			  %% Line 2566
			  call 'erlang':'+'
			      (_cor3, _cor0)
		      in  %% Line 2567
			  case apply 'list_suffix'/1
				   (_cor1) of
			    %% Line 2568
			    <'none'> when 'true' ->
				%% Line 2569
				A1
			    %% Line 2570
			    <Tail> when 'true' ->
				%% Line 2571
				apply 'list_length'/2
				    (Tail, A1)
			  end
	  %% Line 2573
	  <'nil'> when 'true' ->
	      _cor0
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'normalize_list'/1 =
    %% Line 2595
    fun (_cor0) ->
	%% Line 2596
	case apply 'type'/1
		 (_cor0) of
	  %% Line 2597
	  <'list'> when 'true' ->
	      let <P> =
		  %% Line 2598
		  apply 'list_prefix'/1
		      (_cor0)
	      in  %% Line 2599
		  case apply 'list_suffix'/1
			   (_cor0) of
		    %% Line 2600
		    <'none'> when 'true' ->
			let <_cor2> =
			    %% Line 2601
			    apply 'nil'/0
				()
			in  let <_cor3> =
				%% Line 2601
				apply 'normalize_list_1'/2
				    (P, _cor2)
			    in  %% Line 2601
				apply 'copy_attrs'/2
				    (_cor0, _cor3)
		    %% Line 2602
		    <Tail> when 'true' ->
			let <Tail1> =
			    %% Line 2603
			    apply 'normalize_list'/1
				(Tail)
			in  let <_cor5> =
				%% Line 2604
				apply 'normalize_list_1'/2
				    (P, Tail1)
			    in  %% Line 2604
				apply 'copy_attrs'/2
				    (_cor0, _cor5)
		  end
	  %% Line 2606
	  <_cor9> when 'true' ->
	      _cor0
	end
'normalize_list_1'/2 =
    %% Line 2610
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2611
	    ( fun (_cor3,_cor2) ->
		  %% Line 2612
		  apply 'list'/2
		      ([_cor3|[]], _cor2)
	      -| [{'id',{0,0,'-normalize_list_1/2-fun-0-'}}] )
	in  %% Line 2611
	    call 'lists':'foldr'
		(_cor6, _cor0, _cor1)
'compact_list'/1 =
    %% Line 2632
    fun (_cor0) ->
	%% Line 2633
	case apply 'type'/1
		 (_cor0) of
	  %% Line 2634
	  <'list'> when 'true' ->
	      %% Line 2635
	      case apply 'list_suffix'/1
		       (_cor0) of
		%% Line 2636
		<'none'> when 'true' ->
		    _cor0
		%% Line 2638
		<Tail> when 'true' ->
		    %% Line 2639
		    case apply 'type'/1
			     (Tail) of
		      %% Line 2640
		      <'list'> when 'true' ->
			  let <Tail1> =
			      %% Line 2641
			      apply 'compact_list'/1
				  (Tail)
			  in  let <_cor4> =
				  %% Line 2642
				  apply 'list_prefix'/1
				      (_cor0)
			      in  let <_cor3> =
				      %% Line 2643
				      apply 'list_prefix'/1
					  (Tail1)
				  in  let <_cor5> =
					  %% Line 2642
					  call 'erlang':'++'
					      (_cor4, _cor3)
				      in  let <_cor2> =
					      %% Line 2644
					      apply 'list_suffix'/1
						  (Tail1)
					  in  let <Node1> =
						  %% Line 2642
						  apply 'list'/2
						      (_cor5, _cor2)
					      in  let <_cor7> =
						      %% Line 2646
						      apply 'copy_attrs'/2
							  (_cor0, %% Line 2647
								  Node1)
						  in  %% Line 2645
						      apply 'join_comments'/2
							  (Tail1, _cor7)
		      %% Line 2648
		      <'nil'> when 'true' ->
			  let <_cor8> =
			      %% Line 2649
			      apply 'list_prefix'/1
				  (_cor0)
			  in  let <Node1> =
				  %% Line 2649
				  apply 'list'/1
				      (_cor8)
			      in  let <_cor10> =
				      %% Line 2651
				      apply 'copy_attrs'/2
					  (_cor0, %% Line 2652
						  Node1)
				  in  %% Line 2650
				      apply 'join_comments'/2
					  (Tail, _cor10)
		      %% Line 2653
		      <_cor15> when 'true' ->
			  _cor0
		    end
	      end
	  %% Line 2657
	  <_cor16> when 'true' ->
	      _cor0
	end
'binary'/1 =
    %% Line 2688
    fun (_cor0) ->
	%% Line 2689
	apply 'tree'/2
	    ('binary', _cor0)
'revert_binary'/1 =
    %% Line 2691
    fun (_cor0) ->
	let <Pos> =
	    %% Line 2692
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 2693
		apply 'binary_fields'/1
		    (_cor0)
	    in  %% Line 2693
		{'bin',Pos,_cor2}
'binary_fields'/1 =
    %% Line 2704
    fun (_cor0) ->
	%% Line 2705
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2706
	  <{'bin',_cor3,List}> when 'true' ->
	      %% Line 2707
	      List
	  %% Line 2708
	  <Node1> when 'true' ->
	      %% Line 2709
	      apply 'data'/1
		  (Node1)
	end
'binary_field'/1 =
    %% Line 2718
    fun (_cor0) ->
	%% Line 2719
	apply 'binary_field'/2
	    (_cor0, [])
'binary_field'/3 =
    %% Line 2738
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Body,'none',Types> when 'true' ->
	      %% Line 2739
	      apply 'binary_field'/2
		  (Body, Types)
	  %% Line 2740
	  <Body,Size,Types> when 'true' ->
	      let <_cor3> =
		  %% Line 2741
		  apply 'size_qualifier'/2
		      (Body, Size)
	      in  %% Line 2741
		  apply 'binary_field'/2
		      (_cor3, Types)
	end
'binary_field'/2 =
    %% Line 2777
    fun (_cor1,_cor0) ->
	%% Line 2778
	apply 'tree'/2
	    ('binary_field', {'binary_field',_cor1,_cor0})
'revert_binary_field'/1 =
    %% Line 2780
    fun (_cor0) ->
	let <Pos> =
	    %% Line 2781
	    apply 'get_pos'/1
		(_cor0)
	in  let <Body> =
		%% Line 2782
		apply 'binary_field_body'/1
		    (_cor0)
	    in  let <Expr,Size> =
		    %% Line 2783
		    case apply 'type'/1
			     (Body) of
		      %% Line 2784
		      <'size_qualifier'> when 'true' ->
			  let <_cor4> =
			      %% Line 2787
			      apply 'size_qualifier_body'/1
				  (Body)
			  in  let <_cor3> =
				  %% Line 2788
				  apply 'size_qualifier_argument'/1
				      (Body)
			      in  <_cor4,_cor3>
		      %% Line 2789
		      <_cor12> when 'true' ->
			  %% Line 2790
			  <Body,'default'>
		    end
		in  let <_cor9> =
			%% Line 2792
			case apply 'binary_field_types'/1
				 (_cor0) of
			  %% Line 2793
			  <[]> when 'true' ->
			      %% Line 2794
			      'default'
			  %% Line 2795
			  <Ts> when 'true' ->
			      %% Line 2796
			      apply 'fold_binary_field_types'/1
				  (Ts)
			end
		    in  %% Line 2798
			{'bin_element',Pos,Expr,Size,_cor9}
'binary_field_body'/1 =
    %% Line 2808
    fun (_cor0) ->
	%% Line 2809
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2810
	  <{'bin_element',_cor4,Body,Size,_cor5}> when 'true' ->
	      %% Line 2811
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Size,
			   'default') ->
		    %% Line 2812
		    Body
		%% Line 2813
		<> when 'true' ->
		    %% Line 2814
		    apply 'size_qualifier'/2
			(Body, Size)
	      end
	  %% Line 2816
	  <Node1> when 'true' ->
	      %% Line 2817
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'binary_field',_rec94,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec94
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','binary_field'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'binary_field_types'/1 =
    %% Line 2831
    fun (_cor0) ->
	%% Line 2832
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2833
	  <{'bin_element',Pos,_cor4,_cor5,Types}> when 'true' ->
	      %% Line 2834
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Types,
			   'default') ->
		    %% Line 2835
		    []
		%% Line 2836
		<> when 'true' ->
		    %% Line 2837
		    apply 'unfold_binary_field_types'/2
			(Types, Pos)
	      end
	  %% Line 2839
	  <Node1> when 'true' ->
	      %% Line 2840
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'binary_field',_cor6,_rec95}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec95
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','binary_field'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'binary_field_size'/1 =
    %% Line 2859
    fun (_cor0) ->
	%% Line 2860
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2861
	  <{'bin_element',_cor7,_cor8,Size,_cor9}> when 'true' ->
	      %% Line 2862
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Size,
			   'default') ->
		    %% Line 2863
		    'none'
		%% Line 2864
		<> when 'true' ->
		    %% Line 2865
		    Size
	      end
	  %% Line 2867
	  <Node1> when 'true' ->
	      %% Line 2868
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'binary_field',_rec96,_cor10}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 2869
			case apply 'type'/1
				 (_rec96) of
			  %% Line 2870
			  <'size_qualifier'> when 'true' ->
			      %% Line 2871
			      apply 'size_qualifier_argument'/1
				  (_rec96)
			  %% Line 2872
			  <_cor12> when 'true' ->
			      %% Line 2873
			      'none'
			end
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','binary_field'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'size_qualifier'/2 =
    %% Line 2894
    fun (_cor1,_cor0) ->
	%% Line 2895
	apply 'tree'/2
	    ('size_qualifier', %% Line 2896
			       {'size_qualifier',_cor1,_cor0})
'size_qualifier_body'/1 =
    %% Line 2906
    fun (_cor0) ->
	%% Line 2907
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'size_qualifier',_rec97,_cor3}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec97
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','size_qualifier'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'size_qualifier_argument'/1 =
    %% Line 2918
    fun (_cor0) ->
	%% Line 2919
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'size_qualifier',_cor3,_rec98}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec98
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','size_qualifier'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'error_marker'/1 =
    %% Line 2951
    fun (_cor0) ->
	%% Line 2952
	apply 'tree'/2
	    ('error_marker', _cor0)
'revert_error_marker'/1 =
    %% Line 2954
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2957
	    apply 'error_marker_info'/1
		(_cor0)
	in  %% Line 2957
	    {'error',_cor1}
'error_marker_info'/1 =
    %% Line 2967
    fun (_cor0) ->
	%% Line 2968
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 2969
	  <{'error',Error}> when 'true' ->
	      %% Line 2970
	      Error
	  %% Line 2971
	  <T> when 'true' ->
	      %% Line 2972
	      apply 'data'/1
		  (T)
	end
'warning_marker'/1 =
    %% Line 3005
    fun (_cor0) ->
	%% Line 3006
	apply 'tree'/2
	    ('warning_marker', _cor0)
'revert_warning_marker'/1 =
    %% Line 3008
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3011
	    apply 'warning_marker_info'/1
		(_cor0)
	in  %% Line 3011
	    {'warning',_cor1}
'warning_marker_info'/1 =
    %% Line 3021
    fun (_cor0) ->
	%% Line 3022
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3023
	  <{'warning',Error}> when 'true' ->
	      %% Line 3024
	      Error
	  %% Line 3025
	  <T> when 'true' ->
	      %% Line 3026
	      apply 'data'/1
		  (T)
	end
'eof_marker'/0 =
    %% Line 3053
    fun () ->
	%% Line 3054
	apply 'tree'/1
	    ('eof_marker')
'revert_eof_marker'/1 =
    %% Line 3056
    fun (_cor0) ->
	let <Pos> =
	    %% Line 3057
	    apply 'get_pos'/1
		(_cor0)
	in  %% Line 3058
	    {'eof',Pos}
'attribute'/1 =
    %% Line 3066
    fun (_cor0) ->
	%% Line 3067
	apply 'attribute'/2
	    (_cor0, 'none')
'attribute'/2 =
    %% Line 3157
    fun (_cor1,_cor0) ->
	%% Line 3158
	apply 'tree'/2
	    ('attribute', {'attribute',_cor1,_cor0})
'revert_attribute'/1 =
    %% Line 3160
    fun (_cor0) ->
	let <Name> =
	    %% Line 3161
	    apply 'attribute_name'/1
		(_cor0)
	in  let <Args> =
		%% Line 3162
		apply 'attribute_arguments'/1
		    (_cor0)
	    in  let <Pos> =
		    %% Line 3163
		    apply 'get_pos'/1
			(_cor0)
		in  %% Line 3164
		    case apply 'type'/1
			     (Name) of
		      %% Line 3165
		      <'atom'> when 'true' ->
			  let <_cor4> =
			      %% Line 3166
			      apply 'atom_value'/1
				  (Name)
			  in  %% Line 3166
			      apply 'revert_attribute_1'/4
				  (_cor4, Args, Pos, _cor0)
		      %% Line 3167
		      <_cor7> when 'true' ->
			  _cor0
		    end
'revert_attribute_1'/4 =
    %% Line 3173
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'module',[M|[]],Pos,Node> when 'true' ->
	      %% Line 3174
	      case apply 'revert_module_name'/1
		       (M) of
		%% Line 3175
		<{'ok',A}> when 'true' ->
		    %% Line 3176
		    {'attribute',Pos,'module',A}
		%% Line 3177
		<'error'> when 'true' ->
		    Node
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3179
	  <'module',[M|[List|[]]],Pos,Node> when 'true' ->
	      let <_cor8> =
		  %% Line 3180
		  case apply 'is_list_skeleton'/1
			   (List) of
		    %% Line 3181
		    <'true'> when 'true' ->
			%% Line 3182
			case apply 'is_proper_list'/1
				 (List) of
			  %% Line 3183
			  <'true'> when 'true' ->
			      let <_cor5> =
				  %% Line 3184
				  apply 'list_elements'/1
				      (List)
			      in  %% Line 3184
				  apply 'fold_variable_names'/1
				      (_cor5)
			  %% Line 3185
			  <'false'> when 'true' ->
			      %% Line 3186
			      Node
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		    %% Line 3188
		    <'false'> when 'true' ->
			%% Line 3189
			Node
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 3191
		  case apply 'revert_module_name'/1
			   (M) of
		    %% Line 3192
		    <{'ok',A}> when 'true' ->
			%% Line 3193
			{'attribute',Pos,'module',{A,_cor8}}
		    %% Line 3194
		    <'error'> when 'true' ->
			Node
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3196
	  <'export',[List|[]],Pos,Node> when 'true' ->
	      %% Line 3197
	      case apply 'is_list_skeleton'/1
		       (List) of
		%% Line 3198
		<'true'> when 'true' ->
		    %% Line 3199
		    case apply 'is_proper_list'/1
			     (List) of
		      %% Line 3200
		      <'true'> when 'true' ->
			  let <_cor11> =
			      %% Line 3201
			      apply 'list_elements'/1
				  (List)
			  in  let <Fs> =
				  %% Line 3201
				  apply 'fold_function_names'/1
				      (_cor11)
			      in  %% Line 3202
				  {'attribute',Pos,'export',Fs}
		      %% Line 3203
		      <'false'> when 'true' ->
			  %% Line 3204
			  Node
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor13})
			-| ['compiler_generated'] )
		    end
		%% Line 3206
		<'false'> when 'true' ->
		    %% Line 3207
		    Node
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3209
	  <'import',[M|[]],Pos,Node> when 'true' ->
	      %% Line 3210
	      case apply 'revert_module_name'/1
		       (M) of
		%% Line 3211
		<{'ok',A}> when 'true' ->
		    {'attribute',Pos,'import',A}
		%% Line 3212
		<'error'> when 'true' ->
		    Node
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3214
	  <'import',[M|[List|[]]],Pos,Node> when 'true' ->
	      %% Line 3215
	      case apply 'revert_module_name'/1
		       (M) of
		%% Line 3216
		<{'ok',A}> when 'true' ->
		    %% Line 3217
		    case apply 'is_list_skeleton'/1
			     (List) of
		      %% Line 3218
		      <'true'> when 'true' ->
			  %% Line 3219
			  case apply 'is_proper_list'/1
				   (List) of
			    %% Line 3220
			    <'true'> when 'true' ->
				let <_cor16> =
				    %% Line 3222
				    apply 'list_elements'/1
					(List)
				in  let <Fs> =
					%% Line 3221
					apply 'fold_function_names'/1
					    (_cor16)
				    in  %% Line 3223
					{'attribute',Pos,'import',{A,Fs}}
			    %% Line 3224
			    <'false'> when 'true' ->
				%% Line 3225
				Node
			    ( <_cor18> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor18})
			      -| ['compiler_generated'] )
			  end
		      %% Line 3227
		      <'false'> when 'true' ->
			  %% Line 3228
			  Node
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor19})
			-| ['compiler_generated'] )
		    end
		%% Line 3230
		<'error'> when 'true' ->
		    %% Line 3231
		    Node
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3233
	  <'file',[A|[Line|[]]],Pos,Node> when 'true' ->
	      %% Line 3234
	      case apply 'type'/1
		       (A) of
		%% Line 3235
		<'string'> when 'true' ->
		    %% Line 3236
		    case apply 'type'/1
			     (Line) of
		      %% Line 3237
		      <'integer'> when 'true' ->
			  let <_cor22> =
			      %% Line 3239
			      apply 'concrete'/1
				  (A)
			  in  let <_cor21> =
				  %% Line 3239
				  apply 'concrete'/1
				      (Line)
			      in  %% Line 3238
				  {'attribute',Pos,'file',%% Line 3239
							  {_cor22,_cor21}}
		      %% Line 3240
		      <_cor35> when 'true' ->
			  %% Line 3241
			  Node
		    end
		%% Line 3243
		<_cor36> when 'true' ->
		    %% Line 3244
		    Node
	      end
	  %% Line 3246
	  <'record',[A|[Tuple|[]]],Pos,Node> when 'true' ->
	      %% Line 3247
	      case apply 'type'/1
		       (A) of
		%% Line 3248
		<'atom'> when 'true' ->
		    %% Line 3249
		    case apply 'type'/1
			     (Tuple) of
		      %% Line 3250
		      <'tuple'> when 'true' ->
			  let <_cor25> =
			      %% Line 3252
			      apply 'tuple_elements'/1
				  (Tuple)
			  in  let <Fs> =
				  %% Line 3251
				  apply 'fold_record_fields'/1
				      (_cor25)
			      in  let <_cor27> =
				      %% Line 3253
				      apply 'concrete'/1
					  (A)
				  in  %% Line 3253
				      {'attribute',Pos,'record',{_cor27,Fs}}
		      %% Line 3254
		      <_cor37> when 'true' ->
			  %% Line 3255
			  Node
		    end
		%% Line 3257
		<_cor38> when 'true' ->
		    %% Line 3258
		    Node
	      end
	  %% Line 3260
	  <N,[T|[]],Pos,_cor39> when 'true' ->
	      let <_cor30> =
		  %% Line 3261
		  apply 'concrete'/1
		      (T)
	      in  %% Line 3261
		  {'attribute',Pos,N,_cor30}
	  %% Line 3262
	  <_cor40,_cor41,_cor42,Node> when 'true' ->
	      %% Line 3263
	      Node
	end
'revert_module_name'/1 =
    %% Line 3265
    fun (_cor0) ->
	%% Line 3266
	case apply 'type'/1
		 (_cor0) of
	  %% Line 3267
	  <'atom'> when 'true' ->
	      let <_cor1> =
		  %% Line 3268
		  apply 'concrete'/1
		      (_cor0)
	      in  %% Line 3268
		  {'ok',_cor1}
	  %% Line 3269
	  <_cor4> when 'true' ->
	      %% Line 3270
	      'error'
	end
'attribute_name'/1 =
    %% Line 3281
    fun (_cor0) ->
	%% Line 3282
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3283
	  <{'attribute',Pos,Name,_cor5}> when 'true' ->
	      let <_cor1> =
		  %% Line 3284
		  apply 'atom'/1
		      (Name)
	      in  %% Line 3284
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 3285
	  <Node1> when 'true' ->
	      %% Line 3286
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'attribute',_rec99,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec99
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attribute'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'attribute_arguments'/1 =
    %% Line 3302
    fun (_cor0) ->
	%% Line 3303
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3304
	  <{'attribute',Pos,Name,Data}> when 'true' ->
	      %% Line 3305
	      case Name of
		%% Line 3306
		<'module'> when 'true' ->
		    let <M1,Vs> =
			%% Line 3308
			case Data of
			  %% Line 3309
			  <{M0,Vs0}> when 'true' ->
			      let <_cor1> =
				  %% Line 3310
				  apply 'unfold_variable_names'/2
				      (Vs0, Pos)
			      in  %% Line 3310
				  <M0,_cor1>
			  %% Line 3311
			  <M0> when 'true' ->
			      %% Line 3312
			      <M0,'none'>
			end
		    in  let <M2> =
			    %% Line 3314
			    apply 'atom'/1
				(M1)
			in  let <M> =
				%% Line 3315
				apply 'set_pos'/2
				    (M2, Pos)
			    in  %% Line 3316
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (Vs,
					     'none') ->
				      [M|[]]
				  %% Line 3317
				  <> when 'true' ->
				      let <_cor7> =
					  apply 'list'/1
					      (Vs)
				      in  let <_cor8> =
					      apply 'set_pos'/2
						  (_cor7, Pos)
					  in  [M|[_cor8|[]]]
				end
		%% Line 3319
		<'export'> when 'true' ->
		    let <_cor9> =
			%% Line 3321
			apply 'unfold_function_names'/2
			    (Data, Pos)
		    in  let <_cor10> =
			    %% Line 3321
			    apply 'list'/1
				(_cor9)
			in  let <_cor11> =
				%% Line 3320
				apply 'set_pos'/2
				    (_cor10, %% Line 3322
					     Pos)
			    in  %% Line 3320
				[_cor11|%% Line 3322
					[]]
		%% Line 3323
		<'import'> when 'true' ->
		    %% Line 3324
		    case Data of
		      <{Module,Imports}> when 'true' ->
			  let <_cor13> =
			      %% Line 3325
			      apply 'atom'/1
				  (Module)
			  in  let <_cor14> =
				  %% Line 3325
				  apply 'set_pos'/2
				      (_cor13, Pos)
			      in  let <_cor15> =
				      %% Line 3327
				      apply 'unfold_function_names'/2
					  (Imports, Pos)
				  in  let <_cor16> =
					  %% Line 3327
					  apply 'list'/1
					      (_cor15)
				      in  let <_cor17> =
					      %% Line 3326
					      apply 'set_pos'/2
						  (_cor16, %% Line 3328
							   Pos)
					  in  %% Line 3325
					      [_cor14|%% Line 3326
						      [_cor17|%% Line 3328
							      []]]
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor12})
			-| ['compiler_generated'] )
		    end
		%% Line 3329
		<'file'> when 'true' ->
		    %% Line 3330
		    case Data of
		      <{File,Line}> when 'true' ->
			  let <_cor19> =
			      %% Line 3331
			      apply 'string'/1
				  (File)
			  in  let <_cor20> =
				  %% Line 3331
				  apply 'set_pos'/2
				      (_cor19, Pos)
			      in  let <_cor21> =
				      %% Line 3332
				      apply 'integer'/1
					  (Line)
				  in  let <_cor22> =
					  %% Line 3332
					  apply 'set_pos'/2
					      (_cor21, Pos)
				      in  %% Line 3331
					  [_cor20|%% Line 3332
						  [_cor22|[]]]
		      ( <_cor18> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor18})
			-| ['compiler_generated'] )
		    end
		%% Line 3333
		<'record'> when 'true' ->
		    %% Line 3336
		    case Data of
		      <{Type,Entries}> when 'true' ->
			  let <_cor24> =
			      %% Line 3337
			      apply 'atom'/1
				  (Type)
			  in  let <_cor25> =
				  %% Line 3337
				  apply 'set_pos'/2
				      (_cor24, Pos)
			      in  let <_cor26> =
				      %% Line 3338
				      apply 'unfold_record_fields'/1
					  (Entries)
				  in  let <_cor27> =
					  %% Line 3338
					  apply 'tuple'/1
					      (_cor26)
				      in  let <_cor28> =
					      %% Line 3338
					      apply 'set_pos'/2
						  (_cor27, %% Line 3339
							   Pos)
					  in  %% Line 3337
					      [_cor25|%% Line 3338
						      [_cor28|%% Line 3339
							      []]]
		      ( <_cor23> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor23})
			-| ['compiler_generated'] )
		    end
		%% Line 3340
		<_cor35> when 'true' ->
		    let <_cor29> =
			%% Line 3342
			apply 'abstract'/1
			    (Data)
		    in  let <_cor30> =
			    %% Line 3342
			    apply 'set_pos'/2
				(_cor29, Pos)
			in  %% Line 3342
			    [_cor30|[]]
	      end
	  %% Line 3344
	  <Node1> when 'true' ->
	      %% Line 3345
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'attribute',_cor36,_rec100}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec100
		    -| ['compiler_generated'] )
		  ( <_cor37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attribute'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'arity_qualifier'/2 =
    %% Line 3365
    fun (_cor1,_cor0) ->
	%% Line 3366
	apply 'tree'/2
	    ('arity_qualifier', %% Line 3367
				{'arity_qualifier',_cor1,_cor0})
'arity_qualifier_body'/1 =
    %% Line 3377
    fun (_cor0) ->
	%% Line 3378
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'arity_qualifier',_rec101,_cor3}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec101
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','arity_qualifier'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'arity_qualifier_argument'/1 =
    %% Line 3389
    fun (_cor0) ->
	%% Line 3390
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'arity_qualifier',_cor3,_rec102}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec102
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','arity_qualifier'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_qualifier'/2 =
    %% Line 3415
    fun (_cor1,_cor0) ->
	%% Line 3416
	apply 'tree'/2
	    ('module_qualifier', %% Line 3417
				 {'module_qualifier',_cor1,_cor0})
'revert_module_qualifier'/1 =
    %% Line 3419
    fun (_cor0) ->
	let <Pos> =
	    %% Line 3420
	    apply 'get_pos'/1
		(_cor0)
	in  let <Module> =
		%% Line 3421
		apply 'module_qualifier_argument'/1
		    (_cor0)
	    in  let <Body> =
		    %% Line 3422
		    apply 'module_qualifier_body'/1
			(_cor0)
		in  %% Line 3423
		    {'remote',Pos,Module,Body}
'module_qualifier_argument'/1 =
    %% Line 3434
    fun (_cor0) ->
	%% Line 3435
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3436
	  <{'remote',_cor4,Module,_cor5}> when 'true' ->
	      %% Line 3437
	      Module
	  %% Line 3438
	  <Node1> when 'true' ->
	      %% Line 3439
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'module_qualifier',_rec103,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec103
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','module_qualifier'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'module_qualifier_body'/1 =
    %% Line 3450
    fun (_cor0) ->
	%% Line 3451
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3452
	  <{'remote',_cor4,_cor5,Body}> when 'true' ->
	      %% Line 3453
	      Body
	  %% Line 3454
	  <Node1> when 'true' ->
	      %% Line 3455
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'module_qualifier',_cor6,_rec104}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec104
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','module_qualifier'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'function'/2 =
    %% Line 3508
    fun (_cor1,_cor0) ->
	%% Line 3509
	apply 'tree'/2
	    ('function', {'func',_cor1,_cor0})
'revert_function'/1 =
    %% Line 3511
    fun (_cor0) ->
	let <Name> =
	    %% Line 3512
	    apply 'function_name'/1
		(_cor0)
	in  let <_cor8> =
		%% Line 3513
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[C|_cor3]> when 'true' ->
				    let <_cor6> =
					apply 'revert_clause'/1
					    (C)
				    in  let <_cor7> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor4> =
			  apply 'function_clauses'/1
			      (_cor0)
		      in  apply 'lc$^0'/1
			      (_cor4)
		  -| ['list_comprehension'] )
	    in  let <Pos> =
		    %% Line 3514
		    apply 'get_pos'/1
			(_cor0)
		in  %% Line 3515
		    case apply 'type'/1
			     (Name) of
		      %% Line 3516
		      <'atom'> when 'true' ->
			  let <A> =
			      %% Line 3517
			      apply 'function_arity'/1
				  (_cor0)
			  in  let <_cor12> =
				  %% Line 3518
				  apply 'concrete'/1
				      (Name)
			      in  %% Line 3518
				  {'function',Pos,_cor12,A,_cor8}
		      %% Line 3519
		      <_cor15> when 'true' ->
			  _cor0
		    end
'function_name'/1 =
    %% Line 3531
    fun (_cor0) ->
	%% Line 3532
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3533
	  <{'function',Pos,Name,_cor5,_cor6}> when 'true' ->
	      let <_cor1> =
		  %% Line 3534
		  apply 'atom'/1
		      (Name)
	      in  %% Line 3534
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 3535
	  <Node1> when 'true' ->
	      %% Line 3536
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'func',_rec105,_cor7}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec105
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','func'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'function_clauses'/1 =
    %% Line 3547
    fun (_cor0) ->
	%% Line 3548
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3549
	  <{'function',_cor4,_cor5,_cor6,Clauses}> when 'true' ->
	      %% Line 3550
	      Clauses
	  %% Line 3551
	  <Node1> when 'true' ->
	      %% Line 3552
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'func',_cor7,_rec106}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec106
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','func'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'function_arity'/1 =
    %% Line 3573
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3576
	    apply 'function_clauses'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 3576
		call 'erlang':'hd'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 3576
		    apply 'clause_patterns'/1
			(_cor2)
		in  %% Line 3576
		    call 'erlang':'length'
			(_cor3)
'clause'/2 =
    %% Line 3586
    fun (_cor1,_cor0) ->
	%% Line 3587
	apply 'clause'/3
	    ([], _cor1, _cor0)
'clause'/3 =
    %% Line 3650
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 3651
	    case _cor1 of
	      %% Line 3652
	      <[]> when 'true' ->
		  %% Line 3653
		  'none'
	      %% Line 3654
	      <[X|_cor10]>
		  when call 'erlang':'is_list'
			(X) ->
		  let <_cor3> =
		      %% Line 3655
		      apply 'conjunction_list'/1
			  (_cor1)
		  in  %% Line 3655
		      apply 'disjunction'/1
			  (_cor3)
	      %% Line 3656
	      <[_cor11|_cor12]> when 'true' ->
		  %% Line 3658
		  apply 'conjunction'/1
		      (_cor1)
	      %% Line 3659
	      <_cor13> when 'true' ->
		  _cor1
	    end
	in  %% Line 3663
	    apply 'tree'/2
		('clause', {'clause',_cor2,_cor5,_cor0})
'conjunction_list'/1 =
    %% Line 3666
    fun (_cor0) ->
	case _cor0 of
	  <[L|Ls]> when 'true' ->
	      let <_cor1> =
		  %% Line 3667
		  apply 'conjunction'/1
		      (L)
	      in  let <_cor2> =
		      %% Line 3667
		      apply 'conjunction_list'/1
			  (Ls)
		  in  %% Line 3667
		      [_cor1|_cor2]
	  %% Line 3668
	  <[]> when 'true' ->
	      %% Line 3669
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'conjunction_list',1}}] )
	    -| ['compiler_generated'] )
	end
'revert_clause'/1 =
    %% Line 3671
    fun (_cor0) ->
	let <Pos> =
	    %% Line 3672
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor5> =
		%% Line 3673
		case apply 'clause_guard'/1
			 (_cor0) of
		  %% Line 3674
		  <'none'> when 'true' ->
		      %% Line 3675
		      []
		  %% Line 3676
		  <E> when 'true' ->
		      %% Line 3677
		      case apply 'type'/1
			       (E) of
			%% Line 3678
			<'disjunction'> when 'true' ->
			    %% Line 3679
			    apply 'revert_clause_disjunction'/1
				(E)
			%% Line 3680
			<'conjunction'> when 'true' ->
			    let <_cor2> =
				%% Line 3683
				apply 'conjunction_body'/1
				    (E)
			    in  %% Line 3683
				[_cor2|[]]
			%% Line 3684
			<_cor10> when 'true' ->
			    %% Line 3685
			    [[E|[]]|[]]
		      end
		end
	    in  let <_cor8> =
		    %% Line 3688
		    apply 'clause_patterns'/1
			(_cor0)
		in  let <_cor7> =
			%% Line 3689
			apply 'clause_body'/1
			    (_cor0)
		    in  %% Line 3688
			{'clause',Pos,_cor8,_cor5,_cor7}
'revert_clause_disjunction'/1 =
    %% Line 3691
    fun (_cor0) ->
	%% Line 3694
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[%% Line 3700
			  E|_cor2]> when 'true' ->
			    let <_cor6> =
				case apply 'type'/1
					 (E) of
				  %% Line 3695
				  <'conjunction'> when 'true' ->
				      %% Line 3696
				      apply 'conjunction_body'/1
					  (E)
				  %% Line 3697
				  <_cor9> when 'true' ->
				      %% Line 3698
				      [E|[]]
				end
			    in  let <_cor7> =
				    %% Line 3700
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  %% Line 3700
		  apply 'disjunction_body'/1
		      (_cor0)
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'revert_try_clause'/1 =
    %% Line 3702
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3703
	    apply 'revert_clause'/1
		(_cor0)
	in  %% Line 3703
	    apply 'fold_try_clause'/1
		(_cor1)
'fold_try_clause'/1 =
    %% Line 3705
    fun (_cor0) ->
	case _cor0 of
	  <{'clause',Pos,[P|[]],Guard,Body}> when 'true' ->
	      let <_cor4> =
		  %% Line 3706
		  case apply 'type'/1
			   (P) of
		    %% Line 3707
		    <'class_qualifier'> when 'true' ->
			let <_cor1> =
			    %% Line 3708
			    apply 'class_qualifier_argument'/1
				(P)
			in  let <_cor2> =
				%% Line 3709
				apply 'class_qualifier_body'/1
				    (P)
			    in  %% Line 3708
				{'tuple',Pos,[_cor1|%% Line 3709
						    [_cor2|%% Line 3710
							   [{'var',Pos,'_'}|[]]]]}
		    %% Line 3711
		    <_cor7> when 'true' ->
			%% Line 3712
			{'tuple',Pos,[{'atom',Pos,'throw'}|[P|[{'var',Pos,'_'}|[]]]]}
		  end
	      in  %% Line 3714
		  {'clause',Pos,[_cor4|[]],Guard,Body}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'fold_try_clause',1}}] )
	    -| ['compiler_generated'] )
	end
'unfold_try_clauses'/1 =
    %% Line 3716
    fun (_cor0) ->
	%% Line 3717
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[C|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'unfold_try_clause'/1
				    (C)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'unfold_try_clause'/1 =
    %% Line 3719
    fun (_cor0) ->
	case _cor0 of
	  <{'clause',Pos,[{'tuple',_cor3,[{'atom',_cor4,'throw'}|[V|[_cor5|[]]]]}|[]],%% Line 3720
										      Guard,%% Line 3720
											    Body}> when 'true' ->
	      %% Line 3721
	      {'clause',Pos,[V|[]],Guard,Body}
	  %% Line 3722
	  <{'clause',Pos,[{'tuple',_cor6,[C|[V|[_cor7|[]]]]}|[]],%% Line 3723
								 Guard,%% Line 3723
								       Body}> when 'true' ->
	      let <_cor1> =
		  %% Line 3724
		  apply 'class_qualifier'/2
		      (C, V)
	      in  %% Line 3724
		  {'clause',Pos,[_cor1|[]],Guard,Body}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'unfold_try_clause',1}}] )
	    -| ['compiler_generated'] )
	end
'clause_patterns'/1 =
    %% Line 3734
    fun (_cor0) ->
	%% Line 3735
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3736
	  <{'clause',_cor4,Patterns,_cor5,_cor6}> when 'true' ->
	      %% Line 3737
	      Patterns
	  %% Line 3738
	  <Node1> when 'true' ->
	      %% Line 3739
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'clause',_rec107,_cor7,_cor8}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec107
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','clause'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'clause_guard'/1 =
    %% Line 3754
    fun (_cor0) ->
	%% Line 3755
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3756
	  <{'clause',_cor6,_cor7,Guard,_cor8}> when 'true' ->
	      %% Line 3757
	      case Guard of
		%% Line 3758
		<[]> when 'true' ->
		    'none'
		%% Line 3759
		<[L|_cor9]>
		    when call 'erlang':'is_list'
			  (L) ->
		    let <_cor1> =
			%% Line 3760
			apply 'conjunction_list'/1
			    (Guard)
		    in  %% Line 3760
			apply 'disjunction'/1
			    (_cor1)
		%% Line 3761
		<[_cor10|_cor11]> when 'true' ->
		    %% Line 3762
		    apply 'conjunction'/1
			(Guard)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3764
	  <Node1> when 'true' ->
	      %% Line 3765
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'clause',_cor12,_rec108,_cor13}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec108
		    -| ['compiler_generated'] )
		  ( <_cor14> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','clause'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'clause_body'/1 =
    %% Line 3776
    fun (_cor0) ->
	%% Line 3777
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3778
	  <{'clause',_cor4,_cor5,_cor6,Body}> when 'true' ->
	      %% Line 3779
	      Body
	  %% Line 3780
	  <Node1> when 'true' ->
	      %% Line 3781
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'clause',_cor7,_cor8,_rec109}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec109
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','clause'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'disjunction'/1 =
    %% Line 3798
    fun (_cor0) ->
	%% Line 3799
	apply 'tree'/2
	    ('disjunction', _cor0)
'disjunction_body'/1 =
    %% Line 3810
    fun (_cor0) ->
	%% Line 3811
	apply 'data'/1
	    (_cor0)
'conjunction'/1 =
    %% Line 3827
    fun (_cor0) ->
	%% Line 3828
	apply 'tree'/2
	    ('conjunction', _cor0)
'conjunction_body'/1 =
    %% Line 3839
    fun (_cor0) ->
	%% Line 3840
	apply 'data'/1
	    (_cor0)
'catch_expr'/1 =
    %% Line 3860
    fun (_cor0) ->
	%% Line 3861
	apply 'tree'/2
	    ('catch_expr', _cor0)
'revert_catch_expr'/1 =
    %% Line 3863
    fun (_cor0) ->
	let <Pos> =
	    %% Line 3864
	    apply 'get_pos'/1
		(_cor0)
	in  let <Expr> =
		%% Line 3865
		apply 'catch_expr_body'/1
		    (_cor0)
	    in  %% Line 3866
		{'catch',Pos,Expr}
'catch_expr_body'/1 =
    %% Line 3876
    fun (_cor0) ->
	%% Line 3877
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3878
	  <{'catch',_cor3,Expr}> when 'true' ->
	      %% Line 3879
	      Expr
	  %% Line 3880
	  <Node1> when 'true' ->
	      %% Line 3881
	      apply 'data'/1
		  (Node1)
	end
'match_expr'/2 =
    %% Line 3907
    fun (_cor1,_cor0) ->
	%% Line 3908
	apply 'tree'/2
	    ('match_expr', {'match_expr',_cor1,_cor0})
'revert_match_expr'/1 =
    %% Line 3910
    fun (_cor0) ->
	let <Pos> =
	    %% Line 3911
	    apply 'get_pos'/1
		(_cor0)
	in  let <Pattern> =
		%% Line 3912
		apply 'match_expr_pattern'/1
		    (_cor0)
	    in  let <Body> =
		    %% Line 3913
		    apply 'match_expr_body'/1
			(_cor0)
		in  %% Line 3914
		    {'match',Pos,Pattern,Body}
'match_expr_pattern'/1 =
    %% Line 3924
    fun (_cor0) ->
	%% Line 3925
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3926
	  <{'match',_cor4,Pattern,_cor5}> when 'true' ->
	      %% Line 3927
	      Pattern
	  %% Line 3928
	  <Node1> when 'true' ->
	      %% Line 3929
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'match_expr',_rec110,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec110
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','match_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'match_expr_body'/1 =
    %% Line 3940
    fun (_cor0) ->
	%% Line 3941
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 3942
	  <{'match',_cor4,_cor5,Body}> when 'true' ->
	      %% Line 3943
	      Body
	  %% Line 3944
	  <Node1> when 'true' ->
	      %% Line 3945
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'match_expr',_cor6,_rec111}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec111
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','match_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'operator'/1 =
    %% Line 3966
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 3967
	      apply 'tree'/2
		  ('operator', Name)
	  %% Line 3968
	  <Name> when 'true' ->
	      let <_cor1> =
		  %% Line 3969
		  call 'erlang':'list_to_atom'
		      (Name)
	      in  %% Line 3969
		  apply 'tree'/2
		      ('operator', _cor1)
	end
'operator_name'/1 =
    %% Line 3980
    fun (_cor0) ->
	%% Line 3981
	apply 'data'/1
	    (_cor0)
'operator_literal'/1 =
    %% Line 3992
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3993
	    apply 'operator_name'/1
		(_cor0)
	in  %% Line 3993
	    call 'erlang':'atom_to_list'
		(_cor1)
'infix_expr'/3 =
    %% Line 4025
    fun (_cor2,_cor1,_cor0) ->
	%% Line 4026
	apply 'tree'/2
	    ('infix_expr', {'infix_expr',_cor1,_cor2,_cor0})
'revert_infix_expr'/1 =
    %% Line 4029
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4030
	    apply 'get_pos'/1
		(_cor0)
	in  let <Operator> =
		%% Line 4031
		apply 'infix_expr_operator'/1
		    (_cor0)
	    in  let <Left> =
		    %% Line 4032
		    apply 'infix_expr_left'/1
			(_cor0)
		in  let <Right> =
			%% Line 4033
			apply 'infix_expr_right'/1
			    (_cor0)
		    in  %% Line 4034
			case apply 'type'/1
				 (Operator) of
			  %% Line 4035
			  <'operator'> when 'true' ->
			      let <_cor5> =
				  %% Line 4038
				  apply 'operator_name'/1
				      (Operator)
			      in  %% Line 4038
				  {'op',Pos,_cor5,Left,Right}
			  %% Line 4039
			  <_cor8> when 'true' ->
			      _cor0
			end
'infix_expr_left'/1 =
    %% Line 4052
    fun (_cor0) ->
	%% Line 4053
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4054
	  <{'op',_cor4,_cor5,Left,_cor6}> when 'true' ->
	      %% Line 4055
	      Left
	  %% Line 4056
	  <Node1> when 'true' ->
	      %% Line 4057
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'infix_expr',_cor7,_rec112,_cor8}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec112
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','infix_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'infix_expr_operator'/1 =
    %% Line 4068
    fun (_cor0) ->
	%% Line 4069
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4070
	  <{'op',Pos,Operator,_cor5,_cor6}> when 'true' ->
	      let <_cor1> =
		  %% Line 4071
		  apply 'operator'/1
		      (Operator)
	      in  %% Line 4071
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 4072
	  <Node1> when 'true' ->
	      %% Line 4073
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'infix_expr',_rec113,_cor7,_cor8}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec113
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','infix_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'infix_expr_right'/1 =
    %% Line 4085
    fun (_cor0) ->
	%% Line 4086
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4087
	  <{'op',_cor4,_cor5,_cor6,Right}> when 'true' ->
	      %% Line 4088
	      Right
	  %% Line 4089
	  <Node1> when 'true' ->
	      %% Line 4090
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'infix_expr',_cor7,_cor8,_rec114}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec114
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','infix_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'prefix_expr'/2 =
    %% Line 4119
    fun (_cor1,_cor0) ->
	%% Line 4120
	apply 'tree'/2
	    ('prefix_expr', {'prefix_expr',_cor1,_cor0})
'revert_prefix_expr'/1 =
    %% Line 4123
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4124
	    apply 'get_pos'/1
		(_cor0)
	in  let <Operator> =
		%% Line 4125
		apply 'prefix_expr_operator'/1
		    (_cor0)
	    in  let <Argument> =
		    %% Line 4126
		    apply 'prefix_expr_argument'/1
			(_cor0)
		in  %% Line 4127
		    case apply 'type'/1
			     (Operator) of
		      %% Line 4128
		      <'operator'> when 'true' ->
			  let <_cor4> =
			      %% Line 4131
			      apply 'operator_name'/1
				  (Operator)
			  in  %% Line 4131
			      {'op',Pos,_cor4,Argument}
		      %% Line 4132
		      <_cor7> when 'true' ->
			  _cor0
		    end
'prefix_expr_operator'/1 =
    %% Line 4144
    fun (_cor0) ->
	%% Line 4145
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4146
	  <{'op',Pos,Operator,_cor5}> when 'true' ->
	      let <_cor1> =
		  %% Line 4147
		  apply 'operator'/1
		      (Operator)
	      in  %% Line 4147
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 4148
	  <Node1> when 'true' ->
	      %% Line 4149
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'prefix_expr',_rec115,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec115
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','prefix_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'prefix_expr_argument'/1 =
    %% Line 4160
    fun (_cor0) ->
	%% Line 4161
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4162
	  <{'op',_cor4,_cor5,Argument}> when 'true' ->
	      %% Line 4163
	      Argument
	  %% Line 4164
	  <Node1> when 'true' ->
	      %% Line 4165
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'prefix_expr',_cor6,_rec116}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec116
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','prefix_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'record_field'/1 =
    %% Line 4174
    fun (_cor0) ->
	%% Line 4175
	apply 'record_field'/2
	    (_cor0, 'none')
'record_field'/2 =
    %% Line 4197
    fun (_cor1,_cor0) ->
	%% Line 4198
	apply 'tree'/2
	    ('record_field', {'record_field',_cor1,_cor0})
'record_field_name'/1 =
    %% Line 4208
    fun (_cor0) ->
	%% Line 4209
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'record_field',_rec117,_cor3}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec117
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','record_field'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'record_field_value'/1 =
    %% Line 4224
    fun (_cor0) ->
	%% Line 4225
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'record_field',_cor3,_rec118}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec118
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','record_field'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'record_index_expr'/2 =
    %% Line 4256
    fun (_cor1,_cor0) ->
	%% Line 4257
	apply 'tree'/2
	    ('record_index_expr', {'record_index_expr',_cor1,_cor0})
'revert_record_index_expr'/1 =
    %% Line 4260
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4261
	    apply 'get_pos'/1
		(_cor0)
	in  let <Type> =
		%% Line 4262
		apply 'record_index_expr_type'/1
		    (_cor0)
	    in  let <Field> =
		    %% Line 4263
		    apply 'record_index_expr_field'/1
			(_cor0)
		in  %% Line 4264
		    case apply 'type'/1
			     (Type) of
		      %% Line 4265
		      <'atom'> when 'true' ->
			  let <_cor4> =
			      %% Line 4266
			      apply 'concrete'/1
				  (Type)
			  in  %% Line 4266
			      {'record_index',Pos,_cor4,Field}
		      %% Line 4267
		      <_cor7> when 'true' ->
			  _cor0
		    end
'record_index_expr_type'/1 =
    %% Line 4279
    fun (_cor0) ->
	%% Line 4280
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4281
	  <{'record_index',Pos,Type,_cor5}> when 'true' ->
	      let <_cor1> =
		  %% Line 4282
		  apply 'atom'/1
		      (Type)
	      in  %% Line 4282
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 4283
	  <Node1> when 'true' ->
	      %% Line 4284
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'record_index_expr',_rec119,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec119
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','record_index_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'record_index_expr_field'/1 =
    %% Line 4295
    fun (_cor0) ->
	%% Line 4296
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4297
	  <{'record_index',_cor4,_cor5,Field}> when 'true' ->
	      %% Line 4298
	      Field
	  %% Line 4299
	  <Node1> when 'true' ->
	      %% Line 4300
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'record_index_expr',_cor6,_rec120}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec120
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','record_index_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'record_access'/2 =
    %% Line 4309
    fun (_cor1,_cor0) ->
	%% Line 4310
	apply 'record_access'/3
	    (_cor1, 'none', _cor0)
'record_access'/3 =
    %% Line 4350
    fun (_cor2,_cor1,_cor0) ->
	%% Line 4351
	apply 'tree'/2
	    ('record_access', {'record_access',_cor2,_cor1,_cor0})
'revert_record_access'/1 =
    %% Line 4355
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4356
	    apply 'get_pos'/1
		(_cor0)
	in  let <Argument> =
		%% Line 4357
		apply 'record_access_argument'/1
		    (_cor0)
	    in  let <Type> =
		    %% Line 4358
		    apply 'record_access_type'/1
			(_cor0)
		in  let <Field> =
			%% Line 4359
			apply 'record_access_field'/1
			    (_cor0)
		    in  %% Line 4360
			case <> of
			  <>
			      when call 'erlang':'=:='
				    (Type,
				     'none') ->
			      %% Line 4361
			      {'record_field',Pos,Argument,Field}
			  %% Line 4362
			  <> when 'true' ->
			      %% Line 4363
			      case apply 'type'/1
				       (Type) of
				%% Line 4364
				<'atom'> when 'true' ->
				    let <_cor5> =
					%% Line 4366
					apply 'concrete'/1
					    (Type)
				    in  %% Line 4365
					{'record_field',Pos,%% Line 4366
							    Argument,_cor5,%% Line 4366
									   Field}
				%% Line 4367
				<_cor8> when 'true' ->
				    _cor0
			      end
			end
'record_access_argument'/1 =
    %% Line 4380
    fun (_cor0) ->
	%% Line 4381
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4382
	  <{'record_field',_cor4,Argument,_cor5}> when 'true' ->
	      %% Line 4383
	      Argument
	  %% Line 4384
	  <{'record_field',_cor6,Argument,_cor7,_cor8}> when 'true' ->
	      %% Line 4385
	      Argument
	  %% Line 4386
	  <Node1> when 'true' ->
	      %% Line 4387
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'record_access',_rec121,_cor9,_cor10}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec121
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','record_access'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'record_access_type'/1 =
    %% Line 4403
    fun (_cor0) ->
	%% Line 4404
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4405
	  <{'record_field',_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 4406
	      'none'
	  %% Line 4407
	  <{'record_field',Pos,_cor8,Type,_cor9}> when 'true' ->
	      let <_cor1> =
		  %% Line 4408
		  apply 'atom'/1
		      (Type)
	      in  %% Line 4408
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 4409
	  <Node1> when 'true' ->
	      %% Line 4410
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'record_access',_cor10,_rec122,_cor11}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec122
		    -| ['compiler_generated'] )
		  ( <_cor12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','record_access'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'record_access_field'/1 =
    %% Line 4421
    fun (_cor0) ->
	%% Line 4422
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4423
	  <{'record_field',_cor4,_cor5,Field}> when 'true' ->
	      %% Line 4424
	      Field
	  %% Line 4425
	  <{'record_field',_cor6,_cor7,_cor8,Field}> when 'true' ->
	      %% Line 4426
	      Field
	  %% Line 4427
	  <Node1> when 'true' ->
	      %% Line 4428
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'record_access',_cor9,_cor10,_rec123}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec123
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','record_access'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'record_expr'/2 =
    %% Line 4437
    fun (_cor1,_cor0) ->
	%% Line 4438
	apply 'record_expr'/3
	    ('none', _cor1, _cor0)
'record_expr'/3 =
    %% Line 4485
    fun (_cor2,_cor1,_cor0) ->
	%% Line 4486
	apply 'tree'/2
	    ('record_expr', {'record_expr',_cor2,_cor1,_cor0})
'revert_record_expr'/1 =
    %% Line 4489
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4490
	    apply 'get_pos'/1
		(_cor0)
	in  let <Argument> =
		%% Line 4491
		apply 'record_expr_argument'/1
		    (_cor0)
	    in  let <Type> =
		    %% Line 4492
		    apply 'record_expr_type'/1
			(_cor0)
		in  let <Fields> =
			%% Line 4493
			apply 'record_expr_fields'/1
			    (_cor0)
		    in  %% Line 4494
			case apply 'type'/1
				 (Type) of
			  %% Line 4495
			  <'atom'> when 'true' ->
			      let <T> =
				  %% Line 4496
				  apply 'concrete'/1
				      (Type)
			      in  let <Fs> =
				      %% Line 4497
				      apply 'fold_record_fields'/1
					  (Fields)
				  in  %% Line 4498
				      case Argument of
					%% Line 4499
					<'none'> when 'true' ->
					    %% Line 4500
					    {'record',Pos,T,Fs}
					%% Line 4501
					<_cor10> when 'true' ->
					    %% Line 4502
					    {'record',Pos,Argument,T,Fs}
				      end
			  %% Line 4504
			  <_cor11> when 'true' ->
			      _cor0
			end
'record_expr_argument'/1 =
    %% Line 4521
    fun (_cor0) ->
	%% Line 4522
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4523
	  <{'record',_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 4524
	      'none'
	  %% Line 4525
	  <{'record',_cor7,Argument,_cor8,_cor9}> when 'true' ->
	      %% Line 4526
	      Argument
	  %% Line 4527
	  <Node1> when 'true' ->
	      %% Line 4528
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'record_expr',_rec124,_cor10,_cor11}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec124
		    -| ['compiler_generated'] )
		  ( <_cor12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','record_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'record_expr_type'/1 =
    %% Line 4539
    fun (_cor0) ->
	%% Line 4540
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4541
	  <{'record',Pos,Type,_cor6}> when 'true' ->
	      let <_cor1> =
		  %% Line 4542
		  apply 'atom'/1
		      (Type)
	      in  %% Line 4542
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 4543
	  <{'record',Pos,_cor7,Type,_cor8}> when 'true' ->
	      let <_cor2> =
		  %% Line 4544
		  apply 'atom'/1
		      (Type)
	      in  %% Line 4544
		  apply 'set_pos'/2
		      (_cor2, Pos)
	  %% Line 4545
	  <Node1> when 'true' ->
	      %% Line 4546
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'record_expr',_cor9,_rec125,_cor10}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec125
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','record_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'record_expr_fields'/1 =
    %% Line 4558
    fun (_cor0) ->
	%% Line 4559
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4560
	  <{'record',_cor4,_cor5,Fields}> when 'true' ->
	      %% Line 4561
	      apply 'unfold_record_fields'/1
		  (Fields)
	  %% Line 4562
	  <{'record',_cor6,_cor7,_cor8,Fields}> when 'true' ->
	      %% Line 4563
	      apply 'unfold_record_fields'/1
		  (Fields)
	  %% Line 4564
	  <Node1> when 'true' ->
	      %% Line 4565
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'record_expr',_cor9,_cor10,_rec126}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec126
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','record_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'application'/3 =
    %% Line 4584
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'none',Name,Arguments> when 'true' ->
	      %% Line 4585
	      apply 'application'/2
		  (Name, Arguments)
	  %% Line 4586
	  <Module,Name,Arguments> when 'true' ->
	      let <_cor3> =
		  %% Line 4587
		  apply 'module_qualifier'/2
		      (Module, Name)
	      in  %% Line 4587
		  apply 'application'/2
		      (_cor3, Arguments)
	end
'application'/2 =
    %% Line 4618
    fun (_cor1,_cor0) ->
	%% Line 4619
	apply 'tree'/2
	    ('application', {'application',_cor1,_cor0})
'revert_application'/1 =
    %% Line 4622
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4623
	    apply 'get_pos'/1
		(_cor0)
	in  let <Operator> =
		%% Line 4624
		apply 'application_operator'/1
		    (_cor0)
	    in  let <Arguments> =
		    %% Line 4625
		    apply 'application_arguments'/1
			(_cor0)
		in  %% Line 4626
		    {'call',Pos,Operator,Arguments}
'application_operator'/1 =
    %% Line 4641
    fun (_cor0) ->
	%% Line 4642
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4643
	  <{'call',_cor4,Operator,_cor5}> when 'true' ->
	      %% Line 4644
	      Operator
	  %% Line 4645
	  <Node1> when 'true' ->
	      %% Line 4646
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'application',_rec127,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec127
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'application_arguments'/1 =
    %% Line 4658
    fun (_cor0) ->
	%% Line 4659
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4660
	  <{'call',_cor4,_cor5,Arguments}> when 'true' ->
	      %% Line 4661
	      Arguments
	  %% Line 4662
	  <Node1> when 'true' ->
	      %% Line 4663
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'application',_cor6,_rec128}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec128
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'list_comp'/2 =
    %% Line 4693
    fun (_cor1,_cor0) ->
	%% Line 4694
	apply 'tree'/2
	    ('list_comp', {'list_comp',_cor1,_cor0})
'revert_list_comp'/1 =
    %% Line 4696
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4697
	    apply 'get_pos'/1
		(_cor0)
	in  let <Template> =
		%% Line 4698
		apply 'list_comp_template'/1
		    (_cor0)
	    in  let <Body> =
		    %% Line 4699
		    apply 'list_comp_body'/1
			(_cor0)
		in  %% Line 4700
		    {'lc',Pos,Template,Body}
'list_comp_template'/1 =
    %% Line 4710
    fun (_cor0) ->
	%% Line 4711
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4712
	  <{'lc',_cor4,Template,_cor5}> when 'true' ->
	      %% Line 4713
	      Template
	  %% Line 4714
	  <Node1> when 'true' ->
	      %% Line 4715
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'list_comp',_rec129,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec129
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','list_comp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'list_comp_body'/1 =
    %% Line 4726
    fun (_cor0) ->
	%% Line 4727
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4728
	  <{'lc',_cor4,_cor5,Body}> when 'true' ->
	      %% Line 4729
	      Body
	  %% Line 4730
	  <Node1> when 'true' ->
	      %% Line 4731
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'list_comp',_cor6,_rec130}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec130
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','list_comp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'binary_comp'/2 =
    %% Line 4760
    fun (_cor1,_cor0) ->
	%% Line 4761
	apply 'tree'/2
	    ('binary_comp', {'binary_comp',_cor1,_cor0})
'revert_binary_comp'/1 =
    %% Line 4763
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4764
	    apply 'get_pos'/1
		(_cor0)
	in  let <Template> =
		%% Line 4765
		apply 'binary_comp_template'/1
		    (_cor0)
	    in  let <Body> =
		    %% Line 4766
		    apply 'binary_comp_body'/1
			(_cor0)
		in  %% Line 4767
		    {'bc',Pos,Template,Body}
'binary_comp_template'/1 =
    %% Line 4777
    fun (_cor0) ->
	%% Line 4778
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4779
	  <{'bc',_cor4,Template,_cor5}> when 'true' ->
	      %% Line 4780
	      Template
	  %% Line 4781
	  <Node1> when 'true' ->
	      %% Line 4782
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'binary_comp',_rec131,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec131
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','binary_comp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'binary_comp_body'/1 =
    %% Line 4793
    fun (_cor0) ->
	%% Line 4794
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4795
	  <{'bc',_cor4,_cor5,Body}> when 'true' ->
	      %% Line 4796
	      Body
	  %% Line 4797
	  <Node1> when 'true' ->
	      %% Line 4798
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'binary_comp',_cor6,_rec132}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec132
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','binary_comp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'rule'/2 =
    %% Line 4844
    fun (_cor1,_cor0) ->
	%% Line 4845
	apply 'tree'/2
	    ('rule', {'rule',_cor1,_cor0})
'revert_rule'/1 =
    %% Line 4847
    fun (_cor0) ->
	let <Name> =
	    %% Line 4848
	    apply 'rule_name'/1
		(_cor0)
	in  let <_cor8> =
		%% Line 4849
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[C|_cor3]> when 'true' ->
				    let <_cor6> =
					apply 'revert_clause'/1
					    (C)
				    in  let <_cor7> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor4> =
			  apply 'rule_clauses'/1
			      (_cor0)
		      in  apply 'lc$^0'/1
			      (_cor4)
		  -| ['list_comprehension'] )
	    in  let <Pos> =
		    %% Line 4850
		    apply 'get_pos'/1
			(_cor0)
		in  %% Line 4851
		    case apply 'type'/1
			     (Name) of
		      %% Line 4852
		      <'atom'> when 'true' ->
			  let <A> =
			      %% Line 4853
			      apply 'rule_arity'/1
				  (_cor0)
			  in  let <_cor12> =
				  %% Line 4854
				  apply 'concrete'/1
				      (Name)
			      in  %% Line 4854
				  {'rule',Pos,_cor12,A,_cor8}
		      %% Line 4855
		      <_cor15> when 'true' ->
			  _cor0
		    end
'rule_name'/1 =
    %% Line 4867
    fun (_cor0) ->
	%% Line 4868
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4869
	  <{'rule',Pos,Name,_cor5,_cor6}> when 'true' ->
	      let <_cor1> =
		  %% Line 4870
		  apply 'atom'/1
		      (Name)
	      in  %% Line 4870
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 4871
	  <Node1> when 'true' ->
	      %% Line 4872
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'rule',_rec133,_cor7}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec133
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','rule'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'rule_clauses'/1 =
    %% Line 4882
    fun (_cor0) ->
	%% Line 4883
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4884
	  <{'rule',_cor4,_cor5,_cor6,Clauses}> when 'true' ->
	      %% Line 4885
	      Clauses
	  %% Line 4886
	  <Node1> when 'true' ->
	      %% Line 4887
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'rule',_cor7,_rec134}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec134
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','rule'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'rule_arity'/1 =
    %% Line 4907
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 4910
	    apply 'rule_clauses'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 4910
		call 'erlang':'hd'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 4910
		    apply 'clause_patterns'/1
			(_cor2)
		in  %% Line 4910
		    call 'erlang':'length'
			(_cor3)
'generator'/2 =
    %% Line 4937
    fun (_cor1,_cor0) ->
	%% Line 4938
	apply 'tree'/2
	    ('generator', {'generator',_cor1,_cor0})
'revert_generator'/1 =
    %% Line 4940
    fun (_cor0) ->
	let <Pos> =
	    %% Line 4941
	    apply 'get_pos'/1
		(_cor0)
	in  let <Pattern> =
		%% Line 4942
		apply 'generator_pattern'/1
		    (_cor0)
	    in  let <Body> =
		    %% Line 4943
		    apply 'generator_body'/1
			(_cor0)
		in  %% Line 4944
		    {'generate',Pos,Pattern,Body}
'generator_pattern'/1 =
    %% Line 4954
    fun (_cor0) ->
	%% Line 4955
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4956
	  <{'generate',_cor4,Pattern,_cor5}> when 'true' ->
	      %% Line 4957
	      Pattern
	  %% Line 4958
	  <Node1> when 'true' ->
	      %% Line 4959
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'generator',_rec135,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec135
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','generator'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'generator_body'/1 =
    %% Line 4970
    fun (_cor0) ->
	%% Line 4971
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 4972
	  <{'generate',_cor4,_cor5,Body}> when 'true' ->
	      %% Line 4973
	      Body
	  %% Line 4974
	  <Node1> when 'true' ->
	      %% Line 4975
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'generator',_cor6,_rec136}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec136
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','generator'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'binary_generator'/2 =
    %% Line 5003
    fun (_cor1,_cor0) ->
	%% Line 5004
	apply 'tree'/2
	    ('binary_generator', {'binary_generator',_cor1,_cor0})
'revert_binary_generator'/1 =
    %% Line 5006
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5007
	    apply 'get_pos'/1
		(_cor0)
	in  let <Pattern> =
		%% Line 5008
		apply 'binary_generator_pattern'/1
		    (_cor0)
	    in  let <Body> =
		    %% Line 5009
		    apply 'binary_generator_body'/1
			(_cor0)
		in  %% Line 5010
		    {'b_generate',Pos,Pattern,Body}
'binary_generator_pattern'/1 =
    %% Line 5020
    fun (_cor0) ->
	%% Line 5021
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5022
	  <{'b_generate',_cor4,Pattern,_cor5}> when 'true' ->
	      %% Line 5023
	      Pattern
	  %% Line 5024
	  <Node1> when 'true' ->
	      %% Line 5025
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'binary_generator',_rec137,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec137
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','binary_generator'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'binary_generator_body'/1 =
    %% Line 5036
    fun (_cor0) ->
	%% Line 5037
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5038
	  <{'b_generate',_cor4,_cor5,Body}> when 'true' ->
	      %% Line 5039
	      Body
	  %% Line 5040
	  <Node1> when 'true' ->
	      %% Line 5041
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'binary_generator',_cor6,_rec138}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec138
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','binary_generator'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'block_expr'/1 =
    %% Line 5065
    fun (_cor0) ->
	%% Line 5066
	apply 'tree'/2
	    ('block_expr', _cor0)
'revert_block_expr'/1 =
    %% Line 5068
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5069
	    apply 'get_pos'/1
		(_cor0)
	in  let <Body> =
		%% Line 5070
		apply 'block_expr_body'/1
		    (_cor0)
	    in  %% Line 5071
		{'block',Pos,Body}
'block_expr_body'/1 =
    %% Line 5081
    fun (_cor0) ->
	%% Line 5082
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5083
	  <{'block',_cor3,Body}> when 'true' ->
	      %% Line 5084
	      Body
	  %% Line 5085
	  <Node1> when 'true' ->
	      %% Line 5086
	      apply 'data'/1
		  (Node1)
	end
'if_expr'/1 =
    %% Line 5119
    fun (_cor0) ->
	%% Line 5120
	apply 'tree'/2
	    ('if_expr', _cor0)
'revert_if_expr'/1 =
    %% Line 5122
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5123
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor8> =
		%% Line 5124
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[C|_cor3]> when 'true' ->
				    let <_cor6> =
					apply 'revert_clause'/1
					    (C)
				    in  let <_cor7> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor4> =
			  apply 'if_expr_clauses'/1
			      (_cor0)
		      in  apply 'lc$^0'/1
			      (_cor4)
		  -| ['list_comprehension'] )
	    in  %% Line 5125
		{'if',Pos,_cor8}
'if_expr_clauses'/1 =
    %% Line 5135
    fun (_cor0) ->
	%% Line 5136
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5137
	  <{'if',_cor3,Clauses}> when 'true' ->
	      %% Line 5138
	      Clauses
	  %% Line 5139
	  <Node1> when 'true' ->
	      %% Line 5140
	      apply 'data'/1
		  (Node1)
	end
'case_expr'/2 =
    %% Line 5180
    fun (_cor1,_cor0) ->
	%% Line 5181
	apply 'tree'/2
	    ('case_expr', {'case_expr',_cor1,_cor0})
'revert_case_expr'/1 =
    %% Line 5184
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5185
	    apply 'get_pos'/1
		(_cor0)
	in  let <Argument> =
		%% Line 5186
		apply 'case_expr_argument'/1
		    (_cor0)
	    in  let <_cor9> =
		    %% Line 5187
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[C|_cor4]> when 'true' ->
					let <_cor7> =
					    apply 'revert_clause'/1
						(C)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor5> =
			      apply 'case_expr_clauses'/1
				  (_cor0)
			  in  apply 'lc$^0'/1
				  (_cor5)
		      -| ['list_comprehension'] )
		in  %% Line 5188
		    {'case',Pos,Argument,_cor9}
'case_expr_argument'/1 =
    %% Line 5198
    fun (_cor0) ->
	%% Line 5199
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5200
	  <{'case',_cor4,Argument,_cor5}> when 'true' ->
	      %% Line 5201
	      Argument
	  %% Line 5202
	  <Node1> when 'true' ->
	      %% Line 5203
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'case_expr',_rec139,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec139
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','case_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'case_expr_clauses'/1 =
    %% Line 5214
    fun (_cor0) ->
	%% Line 5215
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5216
	  <{'case',_cor4,_cor5,Clauses}> when 'true' ->
	      %% Line 5217
	      Clauses
	  %% Line 5218
	  <Node1> when 'true' ->
	      %% Line 5219
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'case_expr',_cor6,_rec140}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec140
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','case_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'cond_expr'/1 =
    %% Line 5252
    fun (_cor0) ->
	%% Line 5253
	apply 'tree'/2
	    ('cond_expr', _cor0)
'revert_cond_expr'/1 =
    %% Line 5255
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5256
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor8> =
		%% Line 5257
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[C|_cor3]> when 'true' ->
				    let <_cor6> =
					apply 'revert_clause'/1
					    (C)
				    in  let <_cor7> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor4> =
			  apply 'cond_expr_clauses'/1
			      (_cor0)
		      in  apply 'lc$^0'/1
			      (_cor4)
		  -| ['list_comprehension'] )
	    in  %% Line 5258
		{'cond',Pos,_cor8}
'cond_expr_clauses'/1 =
    %% Line 5268
    fun (_cor0) ->
	%% Line 5269
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5270
	  <{'cond',_cor3,Clauses}> when 'true' ->
	      %% Line 5271
	      Clauses
	  %% Line 5272
	  <Node1> when 'true' ->
	      %% Line 5273
	      apply 'data'/1
		  (Node1)
	end
'receive_expr'/1 =
    %% Line 5282
    fun (_cor0) ->
	%% Line 5283
	apply 'receive_expr'/3
	    (_cor0, 'none', [])
'receive_expr'/3 =
    %% Line 5338
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 5343
	    case _cor1 of
	      %% Line 5344
	      <'none'> when 'true' ->
		  []
	      %% Line 5345
	      <_cor9> when 'true' ->
		  _cor0
	    end
	in  %% Line 5347
	    apply 'tree'/2
		('receive_expr', {'receive_expr',_cor2,_cor1,_cor4})
'revert_receive_expr'/1 =
    %% Line 5351
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5352
	    apply 'get_pos'/1
		(_cor0)
	in  let <_cor8> =
		%% Line 5353
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[C|_cor3]> when 'true' ->
				    let <_cor6> =
					apply 'revert_clause'/1
					    (C)
				    in  let <_cor7> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor4> =
			  apply 'receive_expr_clauses'/1
			      (_cor0)
		      in  apply 'lc$^0'/1
			      (_cor4)
		  -| ['list_comprehension'] )
	    in  let <Timeout> =
		    %% Line 5354
		    apply 'receive_expr_timeout'/1
			(_cor0)
		in  let <Action> =
			%% Line 5355
			apply 'receive_expr_action'/1
			    (_cor0)
		    in  %% Line 5356
			case Timeout of
			  %% Line 5357
			  <'none'> when 'true' ->
			      %% Line 5358
			      {'receive',Pos,_cor8}
			  %% Line 5359
			  <_cor14> when 'true' ->
			      %% Line 5360
			      {'receive',Pos,_cor8,Timeout,Action}
			end
'receive_expr_clauses'/1 =
    %% Line 5372
    fun (_cor0) ->
	%% Line 5373
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5374
	  <{'receive',_cor4,Clauses}> when 'true' ->
	      %% Line 5375
	      Clauses
	  %% Line 5376
	  <{'receive',_cor5,Clauses,_cor6,_cor7}> when 'true' ->
	      %% Line 5377
	      Clauses
	  %% Line 5378
	  <Node1> when 'true' ->
	      %% Line 5379
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'receive_expr',_rec141,_cor8,_cor9}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec141
		    -| ['compiler_generated'] )
		  ( <_cor10> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','receive_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'receive_expr_timeout'/1 =
    %% Line 5395
    fun (_cor0) ->
	%% Line 5396
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5397
	  <{'receive',_cor4,_cor5}> when 'true' ->
	      %% Line 5398
	      'none'
	  %% Line 5399
	  <{'receive',_cor6,_cor7,Timeout,_cor8}> when 'true' ->
	      %% Line 5400
	      Timeout
	  %% Line 5401
	  <Node1> when 'true' ->
	      %% Line 5402
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'receive_expr',_cor9,_rec142,_cor10}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec142
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','receive_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'receive_expr_action'/1 =
    %% Line 5416
    fun (_cor0) ->
	%% Line 5417
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5418
	  <{'receive',_cor4,_cor5}> when 'true' ->
	      %% Line 5419
	      []
	  %% Line 5420
	  <{'receive',_cor6,_cor7,_cor8,Action}> when 'true' ->
	      %% Line 5421
	      Action
	  %% Line 5422
	  <Node1> when 'true' ->
	      %% Line 5423
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'receive_expr',_cor9,_cor10,_rec143}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec143
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','receive_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'try_expr'/2 =
    %% Line 5432
    fun (_cor1,_cor0) ->
	%% Line 5433
	apply 'try_expr'/3
	    (_cor1, [], _cor0)
'try_expr'/3 =
    %% Line 5441
    fun (_cor2,_cor1,_cor0) ->
	%% Line 5442
	apply 'try_expr'/4
	    (_cor2, _cor1, _cor0, [])
'try_after_expr'/2 =
    %% Line 5450
    fun (_cor1,_cor0) ->
	%% Line 5451
	apply 'try_expr'/4
	    (_cor1, [], [], _cor0)
'try_expr'/4 =
    %% Line 5516
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 5517
	apply 'tree'/2
	    ('try_expr', {'try_expr',_cor3,_cor2,_cor1,_cor0})
'revert_try_expr'/1 =
    %% Line 5522
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5523
	    apply 'get_pos'/1
		(_cor0)
	in  let <Body> =
		%% Line 5524
		apply 'try_expr_body'/1
		    (_cor0)
	    in  let <_cor9> =
		    %% Line 5525
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[C|_cor4]> when 'true' ->
					let <_cor7> =
					    apply 'revert_clause'/1
						(C)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor5> =
			      apply 'try_expr_clauses'/1
				  (_cor0)
			  in  apply 'lc$^0'/1
				  (_cor5)
		      -| ['list_comprehension'] )
		in  let <_cor17> =
			%% Line 5526
			( letrec
			      'lc$^1'/1 =
				  fun (_cor14) ->
				      case _cor14 of
					<[C|_cor12]> when 'true' ->
					    let <_cor15> =
						apply 'revert_try_clause'/1
						    (C)
					    in  let <_cor16> =
						    apply 'lc$^1'/1
							(_cor12)
						in  ( [_cor15|_cor16]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor14> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor14})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor13> =
				  apply 'try_expr_handlers'/1
				      (_cor0)
			      in  apply 'lc$^1'/1
				      (_cor13)
			  -| ['list_comprehension'] )
		    in  let <After> =
			    %% Line 5527
			    apply 'try_expr_after'/1
				(_cor0)
			in  %% Line 5528
			    {'try',Pos,Body,_cor9,_cor17,After}
'try_expr_body'/1 =
    %% Line 5538
    fun (_cor0) ->
	%% Line 5539
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5540
	  <{'try',_cor4,Body,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 5541
	      Body
	  %% Line 5542
	  <Node1> when 'true' ->
	      %% Line 5543
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'try_expr',_rec144,_cor8,_cor9,_cor10}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec144
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','try_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'try_expr_clauses'/1 =
    %% Line 5557
    fun (_cor0) ->
	%% Line 5558
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5559
	  <{'try',_cor4,_cor5,Clauses,_cor6,_cor7}> when 'true' ->
	      %% Line 5560
	      Clauses
	  %% Line 5561
	  <Node1> when 'true' ->
	      %% Line 5562
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'try_expr',_cor8,_rec145,_cor9,_cor10}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec145
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','try_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'try_expr_handlers'/1 =
    %% Line 5574
    fun (_cor0) ->
	%% Line 5575
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5576
	  <{'try',_cor4,_cor5,_cor6,Handlers,_cor7}> when 'true' ->
	      %% Line 5577
	      apply 'unfold_try_clauses'/1
		  (Handlers)
	  %% Line 5578
	  <Node1> when 'true' ->
	      %% Line 5579
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'try_expr',_cor8,_cor9,_rec146,_cor10}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec146
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','try_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'try_expr_after'/1 =
    %% Line 5590
    fun (_cor0) ->
	%% Line 5591
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5592
	  <{'try',_cor4,_cor5,_cor6,_cor7,After}> when 'true' ->
	      %% Line 5593
	      After
	  %% Line 5594
	  <Node1> when 'true' ->
	      %% Line 5595
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'try_expr',_cor8,_cor9,_cor10,_rec147}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec147
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','try_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'class_qualifier'/2 =
    %% Line 5616
    fun (_cor1,_cor0) ->
	%% Line 5617
	apply 'tree'/2
	    ('class_qualifier', %% Line 5618
				{'class_qualifier',_cor1,_cor0})
'class_qualifier_argument'/1 =
    %% Line 5629
    fun (_cor0) ->
	%% Line 5630
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'class_qualifier',_rec148,_cor3}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec148
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','class_qualifier'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'class_qualifier_body'/1 =
    %% Line 5640
    fun (_cor0) ->
	%% Line 5641
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'class_qualifier',_cor3,_rec149}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec149
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','class_qualifier'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'implicit_fun'/2 =
    %% Line 5657
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,'none'> when 'true' ->
	      %% Line 5658
	      apply 'implicit_fun'/1
		  (Name)
	  %% Line 5659
	  <Name,Arity> when 'true' ->
	      let <_cor2> =
		  %% Line 5660
		  apply 'arity_qualifier'/2
		      (Name, Arity)
	      in  %% Line 5660
		  apply 'implicit_fun'/1
		      (_cor2)
	end
'implicit_fun'/3 =
    %% Line 5678
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'none',Name,Arity> when 'true' ->
	      %% Line 5679
	      apply 'implicit_fun'/2
		  (Name, Arity)
	  %% Line 5680
	  <Module,Name,Arity> when 'true' ->
	      let <_cor3> =
		  %% Line 5681
		  apply 'arity_qualifier'/2
		      (Name, Arity)
	      in  let <_cor4> =
		      %% Line 5681
		      apply 'module_qualifier'/2
			  (Module, _cor3)
		  in  %% Line 5681
		      apply 'implicit_fun'/1
			  (_cor4)
	end
'implicit_fun'/1 =
    %% Line 5710
    fun (_cor0) ->
	%% Line 5711
	apply 'tree'/2
	    ('implicit_fun', _cor0)
'revert_implicit_fun'/1 =
    %% Line 5713
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5714
	    apply 'get_pos'/1
		(_cor0)
	in  let <Name> =
		%% Line 5715
		apply 'implicit_fun_name'/1
		    (_cor0)
	    in  %% Line 5716
		case apply 'type'/1
			 (Name) of
		  %% Line 5717
		  <'arity_qualifier'> when 'true' ->
		      let <F> =
			  %% Line 5718
			  apply 'arity_qualifier_body'/1
			      (Name)
		      in  let <A> =
			      %% Line 5719
			      apply 'arity_qualifier_argument'/1
				  (Name)
			  in  let <_cor6> =
				  %% Line 5720
				  apply 'type'/1
				      (F)
			      in  let <_cor5> =
				      %% Line 5720
				      apply 'type'/1
					  (A)
				  in  %% Line 5720
				      case <_cor6,_cor5> of
					%% Line 5721
					<'atom','integer'> when 'true' ->
					    let <_cor8> =
						%% Line 5723
						apply 'concrete'/1
						    (F)
					    in  let <_cor7> =
						    %% Line 5723
						    apply 'concrete'/1
							(A)
						in  %% Line 5722
						    {'fun',Pos,%% Line 5723
							       {'function',_cor8,_cor7}}
					%% Line 5724
					<_fol630,_fol631> when 'true' ->
					    _cor0
				      end
		  %% Line 5727
		  <'module_qualifier'> when 'true' ->
		      let <M> =
			  %% Line 5728
			  apply 'module_qualifier_argument'/1
			      (Name)
		      in  let <Name1> =
			      %% Line 5729
			      apply 'module_qualifier_body'/1
				  (Name)
			  in  %% Line 5730
			      case apply 'type'/1
				       (Name1) of
				%% Line 5731
				<'arity_qualifier'> when 'true' ->
				    let <F> =
					%% Line 5732
					apply 'arity_qualifier_body'/1
					    (Name1)
				    in  let <A> =
					    %% Line 5733
					    apply 'arity_qualifier_argument'/1
						(Name1)
					in  %% Line 5734
					    {'fun',Pos,{'function',M,F,A}}
				%% Line 5735
				<_cor18> when 'true' ->
				    _cor0
			      end
		  %% Line 5738
		  <_cor19> when 'true' ->
		      _cor0
		end
'implicit_fun_name'/1 =
    %% Line 5758
    fun (_cor0) ->
	%% Line 5759
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5760
	  <{'fun',Pos,{'function',Atom,Arity}}> when 'true' ->
	      let <_cor3> =
		  %% Line 5761
		  apply 'atom'/1
		      (Atom)
	      in  let <_cor4> =
		      %% Line 5761
		      apply 'set_pos'/2
			  (_cor3, Pos)
		  in  let <_cor1> =
			  %% Line 5762
			  apply 'integer'/1
			      (Arity)
		      in  let <_cor2> =
			      %% Line 5762
			      apply 'set_pos'/2
				  (_cor1, Pos)
			  in  %% Line 5761
			      apply 'arity_qualifier'/2
				  (_cor4, _cor2)
	  %% Line 5763
	  <{'fun',Pos,{'function',Module,Atom,Arity}}>
	      when %% Line 5764
		try
		    let <_cor5> =
			call 'erlang':'is_atom'
			    (Module)
		    in  let <_cor6> =
			    call 'erlang':'is_atom'
				(Atom)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (Arity)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor14> =
		  %% Line 5766
		  apply 'atom'/1
		      (Module)
	      in  let <_cor15> =
		      %% Line 5766
		      apply 'set_pos'/2
			  (_cor14, Pos)
		  in  let <_cor11> =
			  %% Line 5768
			  apply 'atom'/1
			      (Atom)
		      in  let <_cor12> =
			      %% Line 5768
			      apply 'set_pos'/2
				  (_cor11, Pos)
			  in  let <_cor9> =
				  %% Line 5769
				  apply 'integer'/1
				      (Arity)
			      in  let <_cor10> =
				      %% Line 5769
				      apply 'set_pos'/2
					  (_cor9, Pos)
				  in  let <_cor13> =
					  %% Line 5767
					  apply 'arity_qualifier'/2
					      (_cor12, _cor10)
				      in  %% Line 5766
					  apply 'module_qualifier'/2
					      (_cor15, _cor13)
	  %% Line 5770
	  <{'fun',_X_Pos,{'function',Module,Atom,Arity}}> when 'true' ->
	      let <_cor16> =
		  %% Line 5773
		  apply 'arity_qualifier'/2
		      (Atom, Arity)
	      in  %% Line 5773
		  apply 'module_qualifier'/2
		      (Module, _cor16)
	  %% Line 5774
	  <Node1> when 'true' ->
	      %% Line 5775
	      apply 'data'/1
		  (Node1)
	end
'fun_expr'/1 =
    %% Line 5810
    fun (_cor0) ->
	%% Line 5811
	apply 'tree'/2
	    ('fun_expr', _cor0)
'revert_fun_expr'/1 =
    %% Line 5813
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 5814
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[C|_cor2]> when 'true' ->
				let <_cor5> =
				    apply 'revert_clause'/1
					(C)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      apply 'fun_expr_clauses'/1
			  (_cor0)
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  let <Pos> =
		%% Line 5815
		apply 'get_pos'/1
		    (_cor0)
	    in  %% Line 5816
		{'fun',Pos,{'clauses',_cor7}}
'fun_expr_clauses'/1 =
    %% Line 5826
    fun (_cor0) ->
	%% Line 5827
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5828
	  <{'fun',_cor3,{'clauses',Clauses}}> when 'true' ->
	      %% Line 5829
	      Clauses
	  %% Line 5830
	  <Node1> when 'true' ->
	      %% Line 5831
	      apply 'data'/1
		  (Node1)
	end
'fun_expr_arity'/1 =
    %% Line 5852
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5853
	    apply 'fun_expr_clauses'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 5853
		call 'erlang':'hd'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 5853
		    apply 'clause_patterns'/1
			(_cor2)
		in  %% Line 5853
		    call 'erlang':'length'
			(_cor3)
'named_fun_expr'/2 =
    %% Line 5892
    fun (_cor1,_cor0) ->
	%% Line 5893
	apply 'tree'/2
	    ('named_fun_expr', {'named_fun_expr',_cor1,_cor0})
'revert_named_fun_expr'/1 =
    %% Line 5895
    fun (_cor0) ->
	let <Pos> =
	    %% Line 5896
	    apply 'get_pos'/1
		(_cor0)
	in  let <Name> =
		%% Line 5897
		apply 'named_fun_expr_name'/1
		    (_cor0)
	    in  let <_cor9> =
		    %% Line 5898
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[C|_cor4]> when 'true' ->
					let <_cor7> =
					    apply 'revert_clause'/1
						(C)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor5> =
			      apply 'named_fun_expr_clauses'/1
				  (_cor0)
			  in  apply 'lc$^0'/1
				  (_cor5)
		      -| ['list_comprehension'] )
		in  %% Line 5899
		    case apply 'type'/1
			     (Name) of
		      %% Line 5900
		      <'variable'> when 'true' ->
			  let <_cor11> =
			      %% Line 5901
			      apply 'variable_name'/1
				  (Name)
			  in  %% Line 5901
			      {'named_fun',Pos,_cor11,_cor9}
		      %% Line 5902
		      <_cor14> when 'true' ->
			  _cor0
		    end
'named_fun_expr_name'/1 =
    %% Line 5914
    fun (_cor0) ->
	%% Line 5915
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5916
	  <{'named_fun',Pos,Name,_cor5}> when 'true' ->
	      let <_cor1> =
		  %% Line 5917
		  apply 'variable'/1
		      (Name)
	      in  %% Line 5917
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 5918
	  <Node1> when 'true' ->
	      %% Line 5919
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'named_fun_expr',_rec150,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec150
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','named_fun_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'named_fun_expr_clauses'/1 =
    %% Line 5930
    fun (_cor0) ->
	%% Line 5931
	case apply 'unwrap'/1
		 (_cor0) of
	  %% Line 5932
	  <{'named_fun',_cor4,_cor5,Clauses}> when 'true' ->
	      %% Line 5933
	      Clauses
	  %% Line 5934
	  <Node1> when 'true' ->
	      %% Line 5935
	      ( case apply 'data'/1
			 (Node1) of
		  ( <( {'named_fun_expr',_cor6,_rec151}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec151
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','named_fun_expr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'named_fun_expr_arity'/1 =
    %% Line 5956
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5957
	    apply 'named_fun_expr_clauses'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 5957
		call 'erlang':'hd'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 5957
		    apply 'clause_patterns'/1
			(_cor2)
		in  %% Line 5957
		    call 'erlang':'length'
			(_cor3)
'parentheses'/1 =
    %% Line 5972
    fun (_cor0) ->
	%% Line 5973
	apply 'tree'/2
	    ('parentheses', _cor0)
'revert_parentheses'/1 =
    %% Line 5975
    fun (_cor0) ->
	%% Line 5976
	apply 'parentheses_body'/1
	    (_cor0)
'parentheses_body'/1 =
    %% Line 5986
    fun (_cor0) ->
	%% Line 5987
	apply 'data'/1
	    (_cor0)
'macro'/1 =
    %% Line 5995
    fun (_cor0) ->
	%% Line 5996
	apply 'macro'/2
	    (_cor0, 'none')
'macro'/2 =
    %% Line 6032
    fun (_cor1,_cor0) ->
	%% Line 6033
	apply 'tree'/2
	    ('macro', {'macro',_cor1,_cor0})
'macro_name'/1 =
    %% Line 6043
    fun (_cor0) ->
	%% Line 6044
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'macro',_rec152,_cor3}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec152
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','macro'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'macro_arguments'/1 =
    %% Line 6059
    fun (_cor0) ->
	%% Line 6060
	( case apply 'data'/1
		   (_cor0) of
	    ( <( {'macro',_cor3,_rec153}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec153
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','macro'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'abstract'/1 =
    %% Line 6077
    fun (_cor0) ->
	case _cor0 of
	  <L = [H|T]>
	      when call 'erlang':'is_integer'
		    (H) ->
	      %% Line 6078
	      case apply 'is_printable'/1
		       (L) of
		%% Line 6079
		<'true'> when 'true' ->
		    %% Line 6080
		    apply 'string'/1
			(L)
		%% Line 6081
		<'false'> when 'true' ->
		    %% Line 6082
		    apply 'abstract_tail'/2
			(H, T)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 6084
	  <[H|T]> when 'true' ->
	      %% Line 6085
	      apply 'abstract_tail'/2
		  (H, T)
	  %% Line 6086
	  <T>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 6087
	      apply 'atom'/1
		  (T)
	  %% Line 6088
	  <T>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 6089
	      apply 'integer'/1
		  (T)
	  %% Line 6090
	  <T>
	      when call 'erlang':'is_float'
		    (_cor0) ->
	      %% Line 6091
	      apply 'make_float'/1
		  (T)
	  %% Line 6092
	  <[]> when 'true' ->
	      %% Line 6093
	      apply 'nil'/0
		  ()
	  %% Line 6094
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 6095
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor3> =
		      %% Line 6095
		      apply 'abstract_list'/1
			  (_cor2)
		  in  %% Line 6095
		      apply 'tuple'/1
			  (_cor3)
	  %% Line 6096
	  <T>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor11> =
		  %% Line 6097
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[B|_cor5]> when 'true' ->
				      let <_cor8> =
					  apply 'integer'/1
					      (B)
				      in  let <_cor9> =
					      apply 'binary_field'/1
						  (_cor8)
					  in  let <_cor10> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [_cor9|_cor10]
						    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor6> =
			    call 'erlang':'binary_to_list'
				(T)
			in  apply 'lc$^0'/1
				(_cor6)
		    -| ['list_comprehension'] )
	      in  %% Line 6097
		  apply 'binary'/1
		      (_cor11)
	  %% Line 6098
	  <T> when 'true' ->
	      %% Line 6099
	      call 'erlang':'error'
		  ({'badarg',T})
	end
'abstract_list'/1 =
    %% Line 6101
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_cor1> =
		  %% Line 6102
		  apply 'abstract'/1
		      (T)
	      in  let <_cor2> =
		      %% Line 6102
		      apply 'abstract_list'/1
			  (Ts)
		  in  %% Line 6102
		      [_cor1|_cor2]
	  %% Line 6103
	  <[]> when 'true' ->
	      %% Line 6104
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'abstract_list',1}}] )
	    -| ['compiler_generated'] )
	end
'abstract_tail'/2 =
    %% Line 6112
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <H1,[H2|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 6114
		  apply 'abstract'/1
		      (H1)
	      in  let <_cor2> =
		      %% Line 6114
		      apply 'abstract_tail'/2
			  (H2, T)
		  in  %% Line 6114
		      apply 'cons'/2
			  (_cor3, _cor2)
	  %% Line 6115
	  <H,T> when 'true' ->
	      let <_cor5> =
		  %% Line 6116
		  apply 'abstract'/1
		      (H)
	      in  let <_cor4> =
		      %% Line 6116
		      apply 'abstract'/1
			  (T)
		  in  %% Line 6116
		      apply 'cons'/2
			  (_cor5, _cor4)
	end
'concrete'/1 =
    %% Line 6138
    fun (_cor0) ->
	%% Line 6139
	case apply 'type'/1
		 (_cor0) of
	  %% Line 6140
	  <'atom'> when 'true' ->
	      %% Line 6141
	      apply 'atom_value'/1
		  (_cor0)
	  %% Line 6142
	  <'integer'> when 'true' ->
	      %% Line 6143
	      apply 'integer_value'/1
		  (_cor0)
	  %% Line 6144
	  <'float'> when 'true' ->
	      %% Line 6145
	      apply 'float_value'/1
		  (_cor0)
	  %% Line 6146
	  <'char'> when 'true' ->
	      %% Line 6147
	      apply 'char_value'/1
		  (_cor0)
	  %% Line 6148
	  <'string'> when 'true' ->
	      %% Line 6149
	      apply 'string_value'/1
		  (_cor0)
	  %% Line 6150
	  <'nil'> when 'true' ->
	      %% Line 6151
	      []
	  %% Line 6152
	  <'list'> when 'true' ->
	      let <_cor1> =
		  %% Line 6153
		  apply 'list_head'/1
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 6153
		      apply 'concrete'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 6154
			  apply 'list_tail'/1
			      (_cor0)
		      in  let <_cor4> =
			      %% Line 6154
			      apply 'concrete'/1
				  (_cor3)
			  in  %% Line 6153
			      [_cor2|_cor4]
	  %% Line 6155
	  <'tuple'> when 'true' ->
	      let <_cor5> =
		  %% Line 6156
		  apply 'tuple_elements'/1
		      (_cor0)
	      in  let <_cor6> =
		      %% Line 6156
		      apply 'concrete_list'/1
			  (_cor5)
		  in  %% Line 6156
		      call 'erlang':'list_to_tuple'
			  (_cor6)
	  %% Line 6157
	  <'binary'> when 'true' ->
	      let <_cor18> =
		  %% Line 6158
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor10) ->
				case _cor10 of
				  <[%% Line 6166
				    F|_cor8]> when 'true' ->
				      let <_cor14> =
					  %% Line 6159
					  apply 'binary_field_body'/1
					      (F)
				      in  let <_cor13> =
					      %% Line 6160
					      case apply 'binary_field_size'/1
						       (F) of
						%% Line 6161
						<'none'> when 'true' ->
						    'none'
						%% Line 6162
						<S> when 'true' ->
						    %% Line 6163
						    apply 'revert'/1
							(S)
					      end
					  in  let <_cor11> =
						  %% Line 6165
						  apply 'binary_field_types'/1
						      (F)
					      in  let <_cor15> =
						      %% Line 6159
						      apply 'binary_field'/3
							  (_cor14, _cor13, _cor11)
						  in  let <_cor16> =
							  apply 'revert_binary_field'/1
							      (_cor15)
						      in  let <_cor17> =
							      %% Line 6166
							      apply 'lc$^0'/1
								  (_cor8)
							  in  ( [_cor16|_cor17]
								-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor10> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor10})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor9> =
			    %% Line 6166
			    apply 'binary_fields'/1
				(_cor0)
			in  apply 'lc$^0'/1
				(_cor9)
		    -| ['list_comprehension'] )
	      in  let <_cor25> =
		      %% Line 6169
		      ( fun (_cor22,_cor21) ->
			    let <_cor20> =
				%% Line 6170
				apply 'concrete'/1
				    (_cor22)
			    in  %% Line 6170
				{'value',_cor20,[]}
			-| [{'id',{0,0,'-concrete/1-fun-0-'}}] )
		  in  %% Line 6167
		      case %% Line 6168
			   call 'eval_bits':'expr_grp'
			       (_cor18, [], _cor25, %% Line 6171
						    [], %% Line 6171
							'true') of
			<{'value',B,_cor30}> when 'true' ->
			    %% Line 6172
			    B
			( <_cor26> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor26})
			  -| ['compiler_generated'] )
		      end
	  %% Line 6173
	  <_cor31> when 'true' ->
	      %% Line 6174
	      call 'erlang':'error'
		  ({'badarg',_cor0})
	end
'concrete_list'/1 =
    %% Line 6177
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 6178
		  apply 'concrete'/1
		      (E)
	      in  let <_cor2> =
		      %% Line 6178
		      apply 'concrete_list'/1
			  (Es)
		  in  %% Line 6178
		      [_cor1|_cor2]
	  %% Line 6179
	  <[]> when 'true' ->
	      %% Line 6180
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'concrete_list',1}}] )
	    -| ['compiler_generated'] )
	end
'is_literal'/1 =
    %% Line 6194
    fun (_cor0) ->
	%% Line 6195
	case apply 'type'/1
		 (_cor0) of
	  %% Line 6196
	  <'atom'> when 'true' ->
	      %% Line 6197
	      'true'
	  %% Line 6198
	  <'integer'> when 'true' ->
	      %% Line 6199
	      'true'
	  %% Line 6200
	  <'float'> when 'true' ->
	      %% Line 6201
	      'true'
	  %% Line 6202
	  <'char'> when 'true' ->
	      %% Line 6203
	      'true'
	  %% Line 6204
	  <'string'> when 'true' ->
	      %% Line 6205
	      'true'
	  %% Line 6206
	  <'nil'> when 'true' ->
	      %% Line 6207
	      'true'
	  %% Line 6208
	  <'list'> when 'true' ->
	      let <_cor2> =
		  %% Line 6209
		  apply 'list_head'/1
		      (_cor0)
	      in  %% Line 6209
		  ( case apply 'is_literal'/1
			     (_cor2) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor3> =
				apply 'list_tail'/1
				    (_cor0)
			    in  apply 'is_literal'/1
				    (_cor3)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor1}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 6210
	  <'tuple'> when 'true' ->
	      let <_cor5> =
		  %% Line 6211
		  apply 'tuple_elements'/1
		      (_cor0)
	      in  %% Line 6211
		  call 'lists':'all'
		      (( 'is_literal'/1
			 -| [{'id',{0,0,'-is_literal/1-fun-0-'}}] ), _cor5)
	  %% Line 6212
	  <_cor8> when 'true' ->
	      %% Line 6213
	      'false'
	end
'revert'/1 =
    %% Line 6237
    fun (_cor0) ->
	%% Line 6238
	case apply 'is_tree'/1
		 (_cor0) of
	  %% Line 6239
	  <'false'> when 'true' ->
	      %% Line 6242
	      apply 'unwrap'/1
		  (_cor0)
	  %% Line 6243
	  <'true'> when 'true' ->
	      %% Line 6244
	      case apply 'is_leaf'/1
		       (_cor0) of
		%% Line 6245
		<'true'> when 'true' ->
		    %% Line 6246
		    apply 'revert_root'/1
			(_cor0)
		%% Line 6247
		<'false'> when 'true' ->
		    let <_cor12> =
			%% Line 6252
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[L|_cor2]> when 'true' ->
					    let <_cor10> =
						( letrec
						      'lc$^1'/1 =
							  fun (_cor7) ->
							      case _cor7 of
								<[X|_cor6]> when 'true' ->
								    let <_cor8> =
									apply 'revert'/1
									    (X)
								    in  let <_cor9> =
									    apply 'lc$^1'/1
										(_cor6)
									in  ( [_cor8|_cor9]
									      -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor7> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor7})
									-| [{'function_name',{'lc$^1',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^1'/1
							  (L)
						  -| ['list_comprehension'] )
					    in  let <_cor11> =
						    apply 'lc$^0'/1
							(_cor2)
						in  ( [_cor10|_cor11]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor4> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor4})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor3> =
				  apply 'subtrees'/1
				      (_cor0)
			      in  apply 'lc$^0'/1
				      (_cor3)
			  -| ['list_comprehension'] )
		    in  let <Node1> =
			    %% Line 6256
			    apply 'update_tree'/2
				(_cor0, _cor12)
			in  %% Line 6257
			    apply 'revert_root'/1
				(Node1)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'revert_root'/1 =
    %% Line 6267
    fun (_cor0) ->
	%% Line 6268
	case apply 'type'/1
		 (_cor0) of
	  %% Line 6269
	  <'application'> when 'true' ->
	      %% Line 6270
	      apply 'revert_application'/1
		  (_cor0)
	  %% Line 6271
	  <'atom'> when 'true' ->
	      %% Line 6272
	      apply 'revert_atom'/1
		  (_cor0)
	  %% Line 6273
	  <'attribute'> when 'true' ->
	      %% Line 6274
	      apply 'revert_attribute'/1
		  (_cor0)
	  %% Line 6275
	  <'binary'> when 'true' ->
	      %% Line 6276
	      apply 'revert_binary'/1
		  (_cor0)
	  %% Line 6277
	  <'binary_comp'> when 'true' ->
	      %% Line 6278
	      apply 'revert_binary_comp'/1
		  (_cor0)
	  %% Line 6279
	  <'binary_field'> when 'true' ->
	      %% Line 6280
	      apply 'revert_binary_field'/1
		  (_cor0)
	  %% Line 6281
	  <'binary_generator'> when 'true' ->
	      %% Line 6282
	      apply 'revert_binary_generator'/1
		  (_cor0)
	  %% Line 6283
	  <'block_expr'> when 'true' ->
	      %% Line 6284
	      apply 'revert_block_expr'/1
		  (_cor0)
	  %% Line 6285
	  <'case_expr'> when 'true' ->
	      %% Line 6286
	      apply 'revert_case_expr'/1
		  (_cor0)
	  %% Line 6287
	  <'catch_expr'> when 'true' ->
	      %% Line 6288
	      apply 'revert_catch_expr'/1
		  (_cor0)
	  %% Line 6289
	  <'char'> when 'true' ->
	      %% Line 6290
	      apply 'revert_char'/1
		  (_cor0)
	  %% Line 6291
	  <'clause'> when 'true' ->
	      %% Line 6292
	      apply 'revert_clause'/1
		  (_cor0)
	  %% Line 6293
	  <'cond_expr'> when 'true' ->
	      %% Line 6294
	      apply 'revert_cond_expr'/1
		  (_cor0)
	  %% Line 6295
	  <'eof_marker'> when 'true' ->
	      %% Line 6296
	      apply 'revert_eof_marker'/1
		  (_cor0)
	  %% Line 6297
	  <'error_marker'> when 'true' ->
	      %% Line 6298
	      apply 'revert_error_marker'/1
		  (_cor0)
	  %% Line 6299
	  <'float'> when 'true' ->
	      %% Line 6300
	      apply 'revert_float'/1
		  (_cor0)
	  %% Line 6301
	  <'fun_expr'> when 'true' ->
	      %% Line 6302
	      apply 'revert_fun_expr'/1
		  (_cor0)
	  %% Line 6303
	  <'function'> when 'true' ->
	      %% Line 6304
	      apply 'revert_function'/1
		  (_cor0)
	  %% Line 6305
	  <'generator'> when 'true' ->
	      %% Line 6306
	      apply 'revert_generator'/1
		  (_cor0)
	  %% Line 6307
	  <'if_expr'> when 'true' ->
	      %% Line 6308
	      apply 'revert_if_expr'/1
		  (_cor0)
	  %% Line 6309
	  <'implicit_fun'> when 'true' ->
	      %% Line 6310
	      apply 'revert_implicit_fun'/1
		  (_cor0)
	  %% Line 6311
	  <'infix_expr'> when 'true' ->
	      %% Line 6312
	      apply 'revert_infix_expr'/1
		  (_cor0)
	  %% Line 6313
	  <'integer'> when 'true' ->
	      %% Line 6314
	      apply 'revert_integer'/1
		  (_cor0)
	  %% Line 6315
	  <'list'> when 'true' ->
	      %% Line 6316
	      apply 'revert_list'/1
		  (_cor0)
	  %% Line 6317
	  <'list_comp'> when 'true' ->
	      %% Line 6318
	      apply 'revert_list_comp'/1
		  (_cor0)
	  %% Line 6319
	  <'map_expr'> when 'true' ->
	      %% Line 6320
	      apply 'revert_map_expr'/1
		  (_cor0)
	  %% Line 6321
	  <'map_field_assoc'> when 'true' ->
	      %% Line 6322
	      apply 'revert_map_field_assoc'/1
		  (_cor0)
	  %% Line 6323
	  <'map_field_exact'> when 'true' ->
	      %% Line 6324
	      apply 'revert_map_field_exact'/1
		  (_cor0)
	  %% Line 6325
	  <'match_expr'> when 'true' ->
	      %% Line 6326
	      apply 'revert_match_expr'/1
		  (_cor0)
	  %% Line 6327
	  <'module_qualifier'> when 'true' ->
	      %% Line 6328
	      apply 'revert_module_qualifier'/1
		  (_cor0)
	  %% Line 6329
	  <'named_fun_expr'> when 'true' ->
	      %% Line 6330
	      apply 'revert_named_fun_expr'/1
		  (_cor0)
	  %% Line 6331
	  <'nil'> when 'true' ->
	      %% Line 6332
	      apply 'revert_nil'/1
		  (_cor0)
	  %% Line 6333
	  <'parentheses'> when 'true' ->
	      %% Line 6334
	      apply 'revert_parentheses'/1
		  (_cor0)
	  %% Line 6335
	  <'prefix_expr'> when 'true' ->
	      %% Line 6336
	      apply 'revert_prefix_expr'/1
		  (_cor0)
	  %% Line 6337
	  <'receive_expr'> when 'true' ->
	      %% Line 6338
	      apply 'revert_receive_expr'/1
		  (_cor0)
	  %% Line 6339
	  <'record_access'> when 'true' ->
	      %% Line 6340
	      apply 'revert_record_access'/1
		  (_cor0)
	  %% Line 6341
	  <'record_expr'> when 'true' ->
	      %% Line 6342
	      apply 'revert_record_expr'/1
		  (_cor0)
	  %% Line 6343
	  <'record_index_expr'> when 'true' ->
	      %% Line 6344
	      apply 'revert_record_index_expr'/1
		  (_cor0)
	  %% Line 6345
	  <'rule'> when 'true' ->
	      %% Line 6346
	      apply 'revert_rule'/1
		  (_cor0)
	  %% Line 6347
	  <'string'> when 'true' ->
	      %% Line 6348
	      apply 'revert_string'/1
		  (_cor0)
	  %% Line 6349
	  <'try_expr'> when 'true' ->
	      %% Line 6350
	      apply 'revert_try_expr'/1
		  (_cor0)
	  %% Line 6351
	  <'tuple'> when 'true' ->
	      %% Line 6352
	      apply 'revert_tuple'/1
		  (_cor0)
	  %% Line 6353
	  <'underscore'> when 'true' ->
	      %% Line 6354
	      apply 'revert_underscore'/1
		  (_cor0)
	  %% Line 6355
	  <'variable'> when 'true' ->
	      %% Line 6356
	      apply 'revert_variable'/1
		  (_cor0)
	  %% Line 6357
	  <'warning_marker'> when 'true' ->
	      %% Line 6358
	      apply 'revert_warning_marker'/1
		  (_cor0)
	  %% Line 6359
	  <_cor3> when 'true' ->
	      _cor0
	end
'revert_forms'/1 =
    %% Line 6382
    fun (_cor0) ->
	case _cor0 of
	  <Forms>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 6383
		  apply 'form_list'/1
		      (Forms)
	      in  %% Line 6383
		  apply 'revert_forms'/1
		      (_cor1)
	  %% Line 6384
	  <T> when 'true' ->
	      %% Line 6385
	      case apply 'type'/1
		       (T) of
		%% Line 6386
		<'form_list'> when 'true' ->
		    let <T1> =
			%% Line 6387
			apply 'flatten_form_list'/1
			    (T)
		    in  let <_cor5> =
			    catch
				let <_cor3> =
				    %% Line 6388
				    apply 'form_list_elements'/1
					(T1)
				in  let <_cor4> =
					%% Line 6388
					apply 'revert_forms_1'/1
					    (_cor3)
				    in  %% Line 6388
					{'ok',_cor4}
			in  %% Line 6388
			    case _cor5 of
			      %% Line 6389
			      <{'ok',Fs}> when 'true' ->
				  %% Line 6390
				  Fs
			      %% Line 6391
			      <Error = {'error',_cor9}> when 'true' ->
				  %% Line 6392
				  call 'erlang':'error'
				      (Error)
			      %% Line 6393
			      <{'EXIT',R}> when 'true' ->
				  %% Line 6394
				  call 'erlang':'exit'
				      (R)
			      %% Line 6395
			      <R> when 'true' ->
				  %% Line 6396
				  call 'erlang':'throw'
				      (R)
			    end
		%% Line 6398
		<_cor10> when 'true' ->
		    %% Line 6399
		    call 'erlang':'error'
			({'badarg',T})
	      end
	end
'revert_forms_1'/1 =
    %% Line 6402
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      %% Line 6403
	      case apply 'type'/1
		       (T) of
		%% Line 6404
		<'comment'> when 'true' ->
		    %% Line 6405
		    apply 'revert_forms_1'/1
			(Ts)
		%% Line 6406
		<_cor6> when 'true' ->
		    let <T1> =
			%% Line 6407
			apply 'revert'/1
			    (T)
		    in  %% Line 6408
			case apply 'is_tree'/1
				 (T1) of
			  %% Line 6409
			  <'true'> when 'true' ->
			      %% Line 6410
			      call 'erlang':'throw'
				  ({'error',T1})
			  %% Line 6411
			  <'false'> when 'true' ->
			      let <_cor2> =
				  %% Line 6412
				  apply 'revert_forms_1'/1
				      (Ts)
			      in  %% Line 6412
				  [T1|_cor2]
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 6415
	  <[]> when 'true' ->
	      %% Line 6416
	      []
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'revert_forms_1',1}}] )
	    -| ['compiler_generated'] )
	end
'subtrees'/1 =
    %% Line 6476
    fun (_cor0) ->
	%% Line 6477
	case apply 'is_leaf'/1
		 (_cor0) of
	  %% Line 6478
	  <'true'> when 'true' ->
	      %% Line 6479
	      []
	  %% Line 6480
	  <'false'> when 'true' ->
	      %% Line 6481
	      case apply 'type'/1
		       (_cor0) of
		%% Line 6482
		<'application'> when 'true' ->
		    let <_cor1> =
			%% Line 6483
			apply 'application_operator'/1
			    (_cor0)
		    in  let <_cor2> =
			    %% Line 6484
			    apply 'application_arguments'/1
				(_cor0)
			in  %% Line 6483
			    [[_cor1|[]]|%% Line 6484
					[_cor2|[]]]
		%% Line 6485
		<'arity_qualifier'> when 'true' ->
		    let <_cor3> =
			%% Line 6486
			apply 'arity_qualifier_body'/1
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 6487
			    apply 'arity_qualifier_argument'/1
				(_cor0)
			in  %% Line 6486
			    [[_cor3|[]]|%% Line 6487
					[[_cor4|[]]|[]]]
		%% Line 6488
		<'attribute'> when 'true' ->
		    %% Line 6489
		    case apply 'attribute_arguments'/1
			     (_cor0) of
		      %% Line 6490
		      <'none'> when 'true' ->
			  let <_cor5> =
			      %% Line 6491
			      apply 'attribute_name'/1
				  (_cor0)
			  in  %% Line 6491
			      [[_cor5|[]]|[]]
		      %% Line 6492
		      <As> when 'true' ->
			  let <_cor6> =
			      %% Line 6493
			      apply 'attribute_name'/1
				  (_cor0)
			  in  %% Line 6493
			      [[_cor6|[]]|[As|[]]]
		    end
		%% Line 6495
		<'binary'> when 'true' ->
		    let <_cor8> =
			%% Line 6496
			apply 'binary_fields'/1
			    (_cor0)
		    in  %% Line 6496
			[_cor8|[]]
		%% Line 6497
		<'binary_comp'> when 'true' ->
		    let <_cor9> =
			%% Line 6498
			apply 'binary_comp_template'/1
			    (_cor0)
		    in  let <_cor10> =
			    %% Line 6498
			    apply 'binary_comp_body'/1
				(_cor0)
			in  %% Line 6498
			    [[_cor9|[]]|[_cor10|[]]]
		%% Line 6499
		<'binary_field'> when 'true' ->
		    %% Line 6500
		    case apply 'binary_field_types'/1
			     (_cor0) of
		      %% Line 6501
		      <[]> when 'true' ->
			  let <_cor11> =
			      %% Line 6502
			      apply 'binary_field_body'/1
				  (_cor0)
			  in  %% Line 6502
			      [[_cor11|[]]|[]]
		      %% Line 6503
		      <Ts> when 'true' ->
			  let <_cor12> =
			      %% Line 6504
			      apply 'binary_field_body'/1
				  (_cor0)
			  in  %% Line 6504
			      [[_cor12|[]]|%% Line 6505
					   [Ts|[]]]
		    end
		%% Line 6507
		<'binary_generator'> when 'true' ->
		    let <_cor14> =
			%% Line 6508
			apply 'binary_generator_pattern'/1
			    (_cor0)
		    in  let <_cor15> =
			    %% Line 6509
			    apply 'binary_generator_body'/1
				(_cor0)
			in  %% Line 6508
			    [[_cor14|[]]|%% Line 6509
					 [[_cor15|[]]|[]]]
		%% Line 6510
		<'block_expr'> when 'true' ->
		    let <_cor16> =
			%% Line 6511
			apply 'block_expr_body'/1
			    (_cor0)
		    in  %% Line 6511
			[_cor16|[]]
		%% Line 6512
		<'case_expr'> when 'true' ->
		    let <_cor17> =
			%% Line 6513
			apply 'case_expr_argument'/1
			    (_cor0)
		    in  let <_cor18> =
			    %% Line 6514
			    apply 'case_expr_clauses'/1
				(_cor0)
			in  %% Line 6513
			    [[_cor17|[]]|%% Line 6514
					 [_cor18|[]]]
		%% Line 6515
		<'catch_expr'> when 'true' ->
		    let <_cor19> =
			%% Line 6516
			apply 'catch_expr_body'/1
			    (_cor0)
		    in  %% Line 6516
			[[_cor19|[]]|[]]
		%% Line 6517
		<'class_qualifier'> when 'true' ->
		    let <_cor20> =
			%% Line 6518
			apply 'class_qualifier_argument'/1
			    (_cor0)
		    in  let <_cor21> =
			    %% Line 6519
			    apply 'class_qualifier_body'/1
				(_cor0)
			in  %% Line 6518
			    [[_cor20|[]]|%% Line 6519
					 [[_cor21|[]]|[]]]
		%% Line 6520
		<'clause'> when 'true' ->
		    %% Line 6521
		    case apply 'clause_guard'/1
			     (_cor0) of
		      %% Line 6522
		      <'none'> when 'true' ->
			  let <_cor22> =
			      %% Line 6523
			      apply 'clause_patterns'/1
				  (_cor0)
			  in  let <_cor23> =
				  %% Line 6523
				  apply 'clause_body'/1
				      (_cor0)
			      in  %% Line 6523
				  [_cor22|[_cor23|[]]]
		      %% Line 6524
		      <G> when 'true' ->
			  let <_cor24> =
			      %% Line 6525
			      apply 'clause_patterns'/1
				  (_cor0)
			  in  let <_cor25> =
				  %% Line 6526
				  apply 'clause_body'/1
				      (_cor0)
			      in  %% Line 6525
				  [_cor24|[[G|[]]|%% Line 6526
						  [_cor25|[]]]]
		    end
		%% Line 6528
		<'cond_expr'> when 'true' ->
		    let <_cor27> =
			%% Line 6529
			apply 'cond_expr_clauses'/1
			    (_cor0)
		    in  %% Line 6529
			[_cor27|[]]
		%% Line 6530
		<'conjunction'> when 'true' ->
		    let <_cor28> =
			%% Line 6531
			apply 'conjunction_body'/1
			    (_cor0)
		    in  %% Line 6531
			[_cor28|[]]
		%% Line 6532
		<'disjunction'> when 'true' ->
		    let <_cor29> =
			%% Line 6533
			apply 'disjunction_body'/1
			    (_cor0)
		    in  %% Line 6533
			[_cor29|[]]
		%% Line 6534
		<'form_list'> when 'true' ->
		    let <_cor30> =
			%% Line 6535
			apply 'form_list_elements'/1
			    (_cor0)
		    in  %% Line 6535
			[_cor30|[]]
		%% Line 6536
		<'fun_expr'> when 'true' ->
		    let <_cor31> =
			%% Line 6537
			apply 'fun_expr_clauses'/1
			    (_cor0)
		    in  %% Line 6537
			[_cor31|[]]
		%% Line 6538
		<'function'> when 'true' ->
		    let <_cor32> =
			%% Line 6539
			apply 'function_name'/1
			    (_cor0)
		    in  let <_cor33> =
			    %% Line 6539
			    apply 'function_clauses'/1
				(_cor0)
			in  %% Line 6539
			    [[_cor32|[]]|[_cor33|[]]]
		%% Line 6540
		<'generator'> when 'true' ->
		    let <_cor34> =
			%% Line 6541
			apply 'generator_pattern'/1
			    (_cor0)
		    in  let <_cor35> =
			    %% Line 6541
			    apply 'generator_body'/1
				(_cor0)
			in  %% Line 6541
			    [[_cor34|[]]|[[_cor35|[]]|[]]]
		%% Line 6542
		<'if_expr'> when 'true' ->
		    let <_cor36> =
			%% Line 6543
			apply 'if_expr_clauses'/1
			    (_cor0)
		    in  %% Line 6543
			[_cor36|[]]
		%% Line 6544
		<'implicit_fun'> when 'true' ->
		    let <_cor37> =
			%% Line 6545
			apply 'implicit_fun_name'/1
			    (_cor0)
		    in  %% Line 6545
			[[_cor37|[]]|[]]
		%% Line 6546
		<'infix_expr'> when 'true' ->
		    let <_cor38> =
			%% Line 6547
			apply 'infix_expr_left'/1
			    (_cor0)
		    in  let <_cor39> =
			    %% Line 6548
			    apply 'infix_expr_operator'/1
				(_cor0)
			in  let <_cor40> =
				%% Line 6549
				apply 'infix_expr_right'/1
				    (_cor0)
			    in  %% Line 6547
				[[_cor38|[]]|%% Line 6548
					     [[_cor39|[]]|%% Line 6549
							  [[_cor40|[]]|[]]]]
		%% Line 6550
		<'list'> when 'true' ->
		    %% Line 6551
		    case apply 'list_suffix'/1
			     (_cor0) of
		      %% Line 6552
		      <'none'> when 'true' ->
			  let <_cor41> =
			      %% Line 6553
			      apply 'list_prefix'/1
				  (_cor0)
			  in  %% Line 6553
			      [_cor41|[]]
		      %% Line 6554
		      <S> when 'true' ->
			  let <_cor42> =
			      %% Line 6555
			      apply 'list_prefix'/1
				  (_cor0)
			  in  %% Line 6555
			      [_cor42|[[S|[]]|[]]]
		    end
		%% Line 6557
		<'list_comp'> when 'true' ->
		    let <_cor44> =
			%% Line 6558
			apply 'list_comp_template'/1
			    (_cor0)
		    in  let <_cor45> =
			    %% Line 6558
			    apply 'list_comp_body'/1
				(_cor0)
			in  %% Line 6558
			    [[_cor44|[]]|[_cor45|[]]]
		%% Line 6559
		<'macro'> when 'true' ->
		    %% Line 6560
		    case apply 'macro_arguments'/1
			     (_cor0) of
		      %% Line 6561
		      <'none'> when 'true' ->
			  let <_cor46> =
			      %% Line 6562
			      apply 'macro_name'/1
				  (_cor0)
			  in  %% Line 6562
			      [[_cor46|[]]|[]]
		      %% Line 6563
		      <As> when 'true' ->
			  let <_cor47> =
			      %% Line 6564
			      apply 'macro_name'/1
				  (_cor0)
			  in  %% Line 6564
			      [[_cor47|[]]|[As|[]]]
		    end
		%% Line 6566
		<'map_expr'> when 'true' ->
		    %% Line 6567
		    case apply 'map_expr_argument'/1
			     (_cor0) of
		      %% Line 6568
		      <'none'> when 'true' ->
			  let <_cor49> =
			      %% Line 6569
			      apply 'map_expr_fields'/1
				  (_cor0)
			  in  %% Line 6569
			      [_cor49|[]]
		      %% Line 6570
		      <V> when 'true' ->
			  let <_cor50> =
			      %% Line 6571
			      apply 'map_expr_fields'/1
				  (_cor0)
			  in  %% Line 6571
			      [[V|[]]|[_cor50|[]]]
		    end
		%% Line 6573
		<'map_field_assoc'> when 'true' ->
		    let <_cor52> =
			%% Line 6574
			apply 'map_field_assoc_name'/1
			    (_cor0)
		    in  let <_cor53> =
			    %% Line 6575
			    apply 'map_field_assoc_value'/1
				(_cor0)
			in  %% Line 6574
			    [[_cor52|[]]|%% Line 6575
					 [[_cor53|[]]|[]]]
		%% Line 6576
		<'map_field_exact'> when 'true' ->
		    let <_cor54> =
			%% Line 6577
			apply 'map_field_exact_name'/1
			    (_cor0)
		    in  let <_cor55> =
			    %% Line 6578
			    apply 'map_field_exact_value'/1
				(_cor0)
			in  %% Line 6577
			    [[_cor54|[]]|%% Line 6578
					 [[_cor55|[]]|[]]]
		%% Line 6579
		<'match_expr'> when 'true' ->
		    let <_cor56> =
			%% Line 6580
			apply 'match_expr_pattern'/1
			    (_cor0)
		    in  let <_cor57> =
			    %% Line 6581
			    apply 'match_expr_body'/1
				(_cor0)
			in  %% Line 6580
			    [[_cor56|[]]|%% Line 6581
					 [[_cor57|[]]|[]]]
		%% Line 6582
		<'module_qualifier'> when 'true' ->
		    let <_cor58> =
			%% Line 6583
			apply 'module_qualifier_argument'/1
			    (_cor0)
		    in  let <_cor59> =
			    %% Line 6584
			    apply 'module_qualifier_body'/1
				(_cor0)
			in  %% Line 6583
			    [[_cor58|[]]|%% Line 6584
					 [[_cor59|[]]|[]]]
		%% Line 6585
		<'named_fun_expr'> when 'true' ->
		    let <_cor60> =
			%% Line 6586
			apply 'named_fun_expr_name'/1
			    (_cor0)
		    in  let <_cor61> =
			    %% Line 6587
			    apply 'named_fun_expr_clauses'/1
				(_cor0)
			in  %% Line 6586
			    [[_cor60|[]]|%% Line 6587
					 [_cor61|[]]]
		%% Line 6588
		<'parentheses'> when 'true' ->
		    let <_cor62> =
			%% Line 6589
			apply 'parentheses_body'/1
			    (_cor0)
		    in  %% Line 6589
			[[_cor62|[]]|[]]
		%% Line 6590
		<'prefix_expr'> when 'true' ->
		    let <_cor63> =
			%% Line 6591
			apply 'prefix_expr_operator'/1
			    (_cor0)
		    in  let <_cor64> =
			    %% Line 6592
			    apply 'prefix_expr_argument'/1
				(_cor0)
			in  %% Line 6591
			    [[_cor63|[]]|%% Line 6592
					 [[_cor64|[]]|[]]]
		%% Line 6593
		<'receive_expr'> when 'true' ->
		    %% Line 6594
		    case apply 'receive_expr_timeout'/1
			     (_cor0) of
		      %% Line 6595
		      <'none'> when 'true' ->
			  let <_cor65> =
			      %% Line 6596
			      apply 'receive_expr_clauses'/1
				  (_cor0)
			  in  %% Line 6596
			      [_cor65|[]]
		      %% Line 6597
		      <E> when 'true' ->
			  let <_cor66> =
			      %% Line 6598
			      apply 'receive_expr_clauses'/1
				  (_cor0)
			  in  let <_cor67> =
				  %% Line 6600
				  apply 'receive_expr_action'/1
				      (_cor0)
			      in  %% Line 6598
				  [_cor66|%% Line 6599
					  [[E|[]]|%% Line 6600
						  [_cor67|[]]]]
		    end
		%% Line 6602
		<'record_access'> when 'true' ->
		    %% Line 6603
		    case apply 'record_access_type'/1
			     (_cor0) of
		      %% Line 6604
		      <'none'> when 'true' ->
			  let <_cor69> =
			      %% Line 6605
			      apply 'record_access_argument'/1
				  (_cor0)
			  in  let <_cor70> =
				  %% Line 6606
				  apply 'record_access_field'/1
				      (_cor0)
			      in  %% Line 6605
				  [[_cor69|[]]|%% Line 6606
					       [[_cor70|[]]|[]]]
		      %% Line 6607
		      <R> when 'true' ->
			  let <_cor71> =
			      %% Line 6608
			      apply 'record_access_argument'/1
				  (_cor0)
			  in  let <_cor72> =
				  %% Line 6610
				  apply 'record_access_field'/1
				      (_cor0)
			      in  %% Line 6608
				  [[_cor71|[]]|%% Line 6609
					       [[R|[]]|%% Line 6610
						       [[_cor72|[]]|[]]]]
		    end
		%% Line 6612
		<'record_expr'> when 'true' ->
		    %% Line 6613
		    case apply 'record_expr_argument'/1
			     (_cor0) of
		      %% Line 6614
		      <'none'> when 'true' ->
			  let <_cor74> =
			      %% Line 6615
			      apply 'record_expr_type'/1
				  (_cor0)
			  in  let <_cor75> =
				  %% Line 6616
				  apply 'record_expr_fields'/1
				      (_cor0)
			      in  %% Line 6615
				  [[_cor74|[]]|%% Line 6616
					       [_cor75|[]]]
		      %% Line 6617
		      <V> when 'true' ->
			  let <_cor76> =
			      %% Line 6619
			      apply 'record_expr_type'/1
				  (_cor0)
			  in  let <_cor77> =
				  %% Line 6620
				  apply 'record_expr_fields'/1
				      (_cor0)
			      in  %% Line 6618
				  [[V|[]]|%% Line 6619
					  [[_cor76|[]]|%% Line 6620
						       [_cor77|[]]]]
		    end
		%% Line 6622
		<'record_field'> when 'true' ->
		    %% Line 6623
		    case apply 'record_field_value'/1
			     (_cor0) of
		      %% Line 6624
		      <'none'> when 'true' ->
			  let <_cor79> =
			      %% Line 6625
			      apply 'record_field_name'/1
				  (_cor0)
			  in  %% Line 6625
			      [[_cor79|[]]|[]]
		      %% Line 6626
		      <V> when 'true' ->
			  let <_cor80> =
			      %% Line 6627
			      apply 'record_field_name'/1
				  (_cor0)
			  in  %% Line 6627
			      [[_cor80|[]]|[[V|[]]|[]]]
		    end
		%% Line 6629
		<'record_index_expr'> when 'true' ->
		    let <_cor82> =
			%% Line 6630
			apply 'record_index_expr_type'/1
			    (_cor0)
		    in  let <_cor83> =
			    %% Line 6631
			    apply 'record_index_expr_field'/1
				(_cor0)
			in  %% Line 6630
			    [[_cor82|[]]|%% Line 6631
					 [[_cor83|[]]|[]]]
		%% Line 6632
		<'rule'> when 'true' ->
		    let <_cor84> =
			%% Line 6633
			apply 'rule_name'/1
			    (_cor0)
		    in  let <_cor85> =
			    %% Line 6633
			    apply 'rule_clauses'/1
				(_cor0)
			in  %% Line 6633
			    [[_cor84|[]]|[_cor85|[]]]
		%% Line 6634
		<'size_qualifier'> when 'true' ->
		    let <_cor86> =
			%% Line 6635
			apply 'size_qualifier_body'/1
			    (_cor0)
		    in  let <_cor87> =
			    %% Line 6636
			    apply 'size_qualifier_argument'/1
				(_cor0)
			in  %% Line 6635
			    [[_cor86|[]]|%% Line 6636
					 [[_cor87|[]]|[]]]
		%% Line 6637
		<'try_expr'> when 'true' ->
		    let <_cor88> =
			%% Line 6638
			apply 'try_expr_body'/1
			    (_cor0)
		    in  let <_cor89> =
			    %% Line 6639
			    apply 'try_expr_clauses'/1
				(_cor0)
			in  let <_cor90> =
				%% Line 6640
				apply 'try_expr_handlers'/1
				    (_cor0)
			    in  let <_cor91> =
				    %% Line 6641
				    apply 'try_expr_after'/1
					(_cor0)
				in  %% Line 6638
				    [_cor88|%% Line 6639
					    [_cor89|%% Line 6640
						    [_cor90|%% Line 6641
							    [_cor91|[]]]]]
		%% Line 6642
		<'tuple'> when 'true' ->
		    let <_cor92> =
			%% Line 6643
			apply 'tuple_elements'/1
			    (_cor0)
		    in  %% Line 6643
			[_cor92|[]]
		( <_cor93> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor93})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor94> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor94})
	    -| ['compiler_generated'] )
	end
'update_tree'/2 =
    %% Line 6659
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 6660
	    apply 'type'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 6660
		apply 'make_tree'/2
		    (_cor2, _cor0)
	    in  %% Line 6660
		apply 'copy_attrs'/2
		    (_cor1, _cor3)
'make_tree'/2 =
    %% Line 6687
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'application',[[F|[]]|[A|[]]]> when 'true' ->
	      apply 'application'/2
		  (F, A)
	  %% Line 6688
	  <'arity_qualifier',[[N|[]]|[[A|[]]|[]]]> when 'true' ->
	      apply 'arity_qualifier'/2
		  (N, A)
	  %% Line 6689
	  <'attribute',[[N|[]]|[]]> when 'true' ->
	      apply 'attribute'/1
		  (N)
	  %% Line 6690
	  <'attribute',[[N|[]]|[A|[]]]> when 'true' ->
	      apply 'attribute'/2
		  (N, A)
	  %% Line 6691
	  <'binary',[Fs|[]]> when 'true' ->
	      apply 'binary'/1
		  (Fs)
	  %% Line 6692
	  <'binary_comp',[[T|[]]|[B|[]]]> when 'true' ->
	      apply 'binary_comp'/2
		  (T, B)
	  %% Line 6693
	  <'binary_field',[[B|[]]|[]]> when 'true' ->
	      apply 'binary_field'/1
		  (B)
	  %% Line 6694
	  <'binary_field',[[B|[]]|[Ts|[]]]> when 'true' ->
	      apply 'binary_field'/2
		  (B, Ts)
	  %% Line 6695
	  <'binary_generator',[[P|[]]|[[E|[]]|[]]]> when 'true' ->
	      apply 'binary_generator'/2
		  (P, E)
	  %% Line 6696
	  <'block_expr',[B|[]]> when 'true' ->
	      apply 'block_expr'/1
		  (B)
	  %% Line 6697
	  <'case_expr',[[A|[]]|[C|[]]]> when 'true' ->
	      apply 'case_expr'/2
		  (A, C)
	  %% Line 6698
	  <'catch_expr',[[B|[]]|[]]> when 'true' ->
	      apply 'catch_expr'/1
		  (B)
	  %% Line 6699
	  <'class_qualifier',[[A|[]]|[[B|[]]|[]]]> when 'true' ->
	      apply 'class_qualifier'/2
		  (A, B)
	  %% Line 6700
	  <'clause',[P|[B|[]]]> when 'true' ->
	      apply 'clause'/3
		  (P, 'none', B)
	  %% Line 6701
	  <'clause',[P|[[G|[]]|[B|[]]]]> when 'true' ->
	      apply 'clause'/3
		  (P, G, B)
	  %% Line 6702
	  <'cond_expr',[C|[]]> when 'true' ->
	      apply 'cond_expr'/1
		  (C)
	  %% Line 6703
	  <'conjunction',[E|[]]> when 'true' ->
	      apply 'conjunction'/1
		  (E)
	  %% Line 6704
	  <'disjunction',[E|[]]> when 'true' ->
	      apply 'disjunction'/1
		  (E)
	  %% Line 6705
	  <'form_list',[E|[]]> when 'true' ->
	      apply 'form_list'/1
		  (E)
	  %% Line 6706
	  <'fun_expr',[C|[]]> when 'true' ->
	      apply 'fun_expr'/1
		  (C)
	  %% Line 6707
	  <'function',[[N|[]]|[C|[]]]> when 'true' ->
	      apply 'function'/2
		  (N, C)
	  %% Line 6708
	  <'generator',[[P|[]]|[[E|[]]|[]]]> when 'true' ->
	      apply 'generator'/2
		  (P, E)
	  %% Line 6709
	  <'if_expr',[C|[]]> when 'true' ->
	      apply 'if_expr'/1
		  (C)
	  %% Line 6710
	  <'implicit_fun',[[N|[]]|[]]> when 'true' ->
	      apply 'implicit_fun'/1
		  (N)
	  %% Line 6711
	  <'infix_expr',[[L|[]]|[[F|[]]|[[R|[]]|[]]]]> when 'true' ->
	      apply 'infix_expr'/3
		  (L, F, R)
	  %% Line 6712
	  <'list',[P|[]]> when 'true' ->
	      apply 'list'/1
		  (P)
	  %% Line 6713
	  <'list',[P|[[S|[]]|[]]]> when 'true' ->
	      apply 'list'/2
		  (P, S)
	  %% Line 6714
	  <'list_comp',[[T|[]]|[B|[]]]> when 'true' ->
	      apply 'list_comp'/2
		  (T, B)
	  %% Line 6715
	  <'macro',[[N|[]]|[]]> when 'true' ->
	      apply 'macro'/1
		  (N)
	  %% Line 6716
	  <'macro',[[N|[]]|[A|[]]]> when 'true' ->
	      apply 'macro'/2
		  (N, A)
	  %% Line 6717
	  <'map_expr',[Fs|[]]> when 'true' ->
	      apply 'map_expr'/1
		  (Fs)
	  %% Line 6718
	  <'map_expr',[[E|[]]|[Fs|[]]]> when 'true' ->
	      apply 'map_expr'/2
		  (E, Fs)
	  %% Line 6719
	  <'map_field_assoc',[[K|[]]|[[V|[]]|[]]]> when 'true' ->
	      apply 'map_field_assoc'/2
		  (K, V)
	  %% Line 6720
	  <'map_field_exact',[[K|[]]|[[V|[]]|[]]]> when 'true' ->
	      apply 'map_field_exact'/2
		  (K, V)
	  %% Line 6721
	  <'match_expr',[[P|[]]|[[E|[]]|[]]]> when 'true' ->
	      apply 'match_expr'/2
		  (P, E)
	  %% Line 6722
	  <'named_fun_expr',[[N|[]]|[C|[]]]> when 'true' ->
	      apply 'named_fun_expr'/2
		  (N, C)
	  %% Line 6723
	  <'module_qualifier',[[M|[]]|[[N|[]]|[]]]> when 'true' ->
	      apply 'module_qualifier'/2
		  (M, N)
	  %% Line 6724
	  <'parentheses',[[E|[]]|[]]> when 'true' ->
	      apply 'parentheses'/1
		  (E)
	  %% Line 6725
	  <'prefix_expr',[[F|[]]|[[A|[]]|[]]]> when 'true' ->
	      apply 'prefix_expr'/2
		  (F, A)
	  %% Line 6726
	  <'receive_expr',[C|[]]> when 'true' ->
	      apply 'receive_expr'/1
		  (C)
	  %% Line 6727
	  <'receive_expr',[C|[[E|[]]|[A|[]]]]> when 'true' ->
	      apply 'receive_expr'/3
		  (C, E, A)
	  %% Line 6728
	  <'record_access',[[E|[]]|[[F|[]]|[]]]> when 'true' ->
	      %% Line 6729
	      apply 'record_access'/2
		  (E, F)
	  %% Line 6730
	  <'record_access',[[E|[]]|[[T|[]]|[[F|[]]|[]]]]> when 'true' ->
	      %% Line 6731
	      apply 'record_access'/3
		  (E, T, F)
	  %% Line 6732
	  <'record_expr',[[T|[]]|[F|[]]]> when 'true' ->
	      apply 'record_expr'/2
		  (T, F)
	  %% Line 6733
	  <'record_expr',[[E|[]]|[[T|[]]|[F|[]]]]> when 'true' ->
	      apply 'record_expr'/3
		  (E, T, F)
	  %% Line 6734
	  <'record_field',[[N|[]]|[]]> when 'true' ->
	      apply 'record_field'/1
		  (N)
	  %% Line 6735
	  <'record_field',[[N|[]]|[[E|[]]|[]]]> when 'true' ->
	      apply 'record_field'/2
		  (N, E)
	  %% Line 6736
	  <'record_index_expr',[[T|[]]|[[F|[]]|[]]]> when 'true' ->
	      %% Line 6737
	      apply 'record_index_expr'/2
		  (T, F)
	  %% Line 6738
	  <'rule',[[N|[]]|[C|[]]]> when 'true' ->
	      apply 'rule'/2
		  (N, C)
	  %% Line 6739
	  <'size_qualifier',[[N|[]]|[[A|[]]|[]]]> when 'true' ->
	      apply 'size_qualifier'/2
		  (N, A)
	  %% Line 6740
	  <'try_expr',[B|[C|[H|[A|[]]]]]> when 'true' ->
	      apply 'try_expr'/4
		  (B, C, H, A)
	  %% Line 6741
	  <'tuple',[E|[]]> when 'true' ->
	      apply 'tuple'/1
		  (E)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'make_tree',2}}] )
	    -| ['compiler_generated'] )
	end
'meta'/1 =
    %% Line 6786
    fun (_cor0) ->
	%% Line 6788
	case apply 'type'/1
		 (_cor0) of
	  %% Line 6789
	  <'variable'> when 'true' ->
	      let <_cor1> =
		  %% Line 6790
		  apply 'get_ann'/1
		      (_cor0)
	      in  %% Line 6790
		  case call 'lists':'member'
			   ('meta_var', _cor1) of
		    %% Line 6791
		    <'false'> when 'true' ->
			%% Line 6792
			apply 'meta_precomment'/1
			    (_cor0)
		    %% Line 6793
		    <'true'> when 'true' ->
			let <_cor2> =
			    %% Line 6797
			    apply 'get_ann'/1
				(_cor0)
			in  let <_cor3> =
				%% Line 6797
				call 'lists':'delete'
				    ('meta_var', _cor2)
			    in  %% Line 6797
				apply 'set_ann'/2
				    (_cor0, _cor3)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 6799
	  <_cor8> when 'true' ->
	      %% Line 6800
	      case apply 'has_comments'/1
		       (_cor0) of
		%% Line 6801
		<'true'> when 'true' ->
		    %% Line 6802
		    apply 'meta_precomment'/1
			(_cor0)
		%% Line 6803
		<'false'> when 'true' ->
		    %% Line 6804
		    apply 'meta_1'/1
			(_cor0)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'meta_precomment'/1 =
    %% Line 6808
    fun (_cor0) ->
	%% Line 6809
	case apply 'get_precomments'/1
		 (_cor0) of
	  %% Line 6810
	  <[]> when 'true' ->
	      %% Line 6811
	      apply 'meta_postcomment'/1
		  (_cor0)
	  %% Line 6812
	  <Cs> when 'true' ->
	      let <_cor1> =
		  %% Line 6814
		  apply 'meta_postcomment'/1
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 6814
		      apply 'meta_list'/1
			  (Cs)
		  in  let <_cor3> =
			  %% Line 6814
			  apply 'list'/1
			      (_cor2)
		      in  %% Line 6813
			  apply 'meta_call'/2
			      ('set_precomments', %% Line 6814
						  [_cor1|[_cor3|[]]])
	end
'meta_postcomment'/1 =
    %% Line 6817
    fun (_cor0) ->
	%% Line 6818
	case apply 'get_postcomments'/1
		 (_cor0) of
	  %% Line 6819
	  <[]> when 'true' ->
	      %% Line 6820
	      apply 'meta_0'/1
		  (_cor0)
	  %% Line 6821
	  <Cs> when 'true' ->
	      let <_cor1> =
		  %% Line 6823
		  apply 'meta_0'/1
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 6823
		      apply 'meta_list'/1
			  (Cs)
		  in  let <_cor3> =
			  %% Line 6823
			  apply 'list'/1
			      (_cor2)
		      in  %% Line 6822
			  apply 'meta_call'/2
			      ('set_postcomments', %% Line 6823
						   [_cor1|[_cor3|[]]])
	end
'meta_0'/1 =
    %% Line 6826
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 6827
	    apply 'remove_comments'/1
		(_cor0)
	in  %% Line 6827
	    apply 'meta_1'/1
		(_cor1)
'meta_1'/1 =
    %% Line 6829
    fun (_cor0) ->
	%% Line 6832
	case apply 'type'/1
		 (_cor0) of
	  %% Line 6833
	  <'atom'> when 'true' ->
	      %% Line 6834
	      apply 'meta_call'/2
		  ('atom', [_cor0|[]])
	  %% Line 6835
	  <'char'> when 'true' ->
	      %% Line 6836
	      apply 'meta_call'/2
		  ('char', [_cor0|[]])
	  %% Line 6837
	  <'comment'> when 'true' ->
	      let <_cor7> =
		  %% Line 6838
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[%% Line 6839
				    S|_cor2]> when 'true' ->
				      let <_cor5> =
					  apply 'string'/1
					      (S)
				      in  let <_cor6> =
					      %% Line 6839
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    %% Line 6839
			    apply 'comment_text'/1
				(_cor0)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  let <_cor8> =
		      %% Line 6838
		      apply 'list'/1
			  (_cor7)
		  in  %% Line 6838
		      apply 'meta_call'/2
			  ('comment', [_cor8|%% Line 6839
					     []])
	  %% Line 6840
	  <'eof_marker'> when 'true' ->
	      %% Line 6841
	      apply 'meta_call'/2
		  ('eof_marker', [])
	  %% Line 6842
	  <'error_marker'> when 'true' ->
	      let <_cor9> =
		  %% Line 6844
		  apply 'error_marker_info'/1
		      (_cor0)
	      in  let <_cor10> =
		      %% Line 6844
		      apply 'abstract'/1
			  (_cor9)
		  in  %% Line 6843
		      apply 'meta_call'/2
			  ('error_marker', %% Line 6844
					   [_cor10|[]])
	  %% Line 6845
	  <'float'> when 'true' ->
	      %% Line 6846
	      apply 'meta_call'/2
		  ('float', [_cor0|[]])
	  %% Line 6847
	  <'integer'> when 'true' ->
	      %% Line 6848
	      apply 'meta_call'/2
		  ('integer', [_cor0|[]])
	  %% Line 6849
	  <'nil'> when 'true' ->
	      %% Line 6850
	      apply 'meta_call'/2
		  ('nil', [])
	  %% Line 6851
	  <'operator'> when 'true' ->
	      let <_cor11> =
		  %% Line 6852
		  apply 'operator_name'/1
		      (_cor0)
	      in  let <_cor12> =
		      %% Line 6852
		      apply 'atom'/1
			  (_cor11)
		  in  %% Line 6852
		      apply 'meta_call'/2
			  ('operator', [_cor12|[]])
	  %% Line 6853
	  <'string'> when 'true' ->
	      %% Line 6854
	      apply 'meta_call'/2
		  ('string', [_cor0|[]])
	  %% Line 6855
	  <'text'> when 'true' ->
	      let <_cor13> =
		  %% Line 6856
		  apply 'text_string'/1
		      (_cor0)
	      in  let <_cor14> =
		      %% Line 6856
		      apply 'string'/1
			  (_cor13)
		  in  %% Line 6856
		      apply 'meta_call'/2
			  ('text', [_cor14|[]])
	  %% Line 6857
	  <'underscore'> when 'true' ->
	      %% Line 6858
	      apply 'meta_call'/2
		  ('underscore', [])
	  %% Line 6859
	  <'variable'> when 'true' ->
	      let <_cor15> =
		  %% Line 6860
		  apply 'variable_name'/1
		      (_cor0)
	      in  let <_cor16> =
		      %% Line 6860
		      call 'erlang':'atom_to_list'
			  (_cor15)
		  in  let <_cor17> =
			  %% Line 6860
			  apply 'string'/1
			      (_cor16)
		      in  %% Line 6860
			  apply 'meta_call'/2
			      ('variable', [_cor17|[]])
	  %% Line 6861
	  <'warning_marker'> when 'true' ->
	      let <_cor18> =
		  %% Line 6863
		  apply 'warning_marker_info'/1
		      (_cor0)
	      in  let <_cor19> =
		      %% Line 6863
		      apply 'abstract'/1
			  (_cor18)
		  in  %% Line 6862
		      apply 'meta_call'/2
			  ('warning_marker', %% Line 6863
					     [_cor19|[]])
	  %% Line 6864
	  <'list'> when 'true' ->
	      %% Line 6865
	      case apply 'list_suffix'/1
		       (_cor0) of
		%% Line 6866
		<'none'> when 'true' ->
		    let <_cor20> =
			%% Line 6868
			apply 'list_prefix'/1
			    (_cor0)
		    in  let <_cor21> =
			    %% Line 6868
			    apply 'meta_list'/1
				(_cor20)
			in  let <_cor22> =
				%% Line 6868
				apply 'list'/1
				    (_cor21)
			    in  %% Line 6867
				apply 'meta_call'/2
				    ('list', %% Line 6868
					     [_cor22|[]])
		%% Line 6869
		<S> when 'true' ->
		    let <_cor23> =
			%% Line 6871
			apply 'list_prefix'/1
			    (_cor0)
		    in  let <_cor24> =
			    %% Line 6871
			    apply 'meta_list'/1
				(_cor23)
			in  let <_cor25> =
				%% Line 6871
				apply 'list'/1
				    (_cor24)
			    in  let <_cor26> =
				    %% Line 6872
				    apply 'meta'/1
					(S)
				in  %% Line 6870
				    apply 'meta_call'/2
					('list', %% Line 6871
						 [_cor25|%% Line 6872
							 [_cor26|[]]])
	      end
	  %% Line 6874
	  <'tuple'> when 'true' ->
	      let <_cor28> =
		  %% Line 6876
		  apply 'tuple_elements'/1
		      (_cor0)
	      in  let <_cor29> =
		      %% Line 6876
		      apply 'meta_list'/1
			  (_cor28)
		  in  let <_cor30> =
			  %% Line 6876
			  apply 'list'/1
			      (_cor29)
		      in  %% Line 6875
			  apply 'meta_call'/2
			      ('tuple', %% Line 6876
					[_cor30|[]])
	  %% Line 6877
	  <Type> when 'true' ->
	      let <_cor31> =
		  %% Line 6884
		  apply 'abstract'/1
		      (Type)
	      in  let <_cor32> =
		      %% Line 6885
		      apply 'subtrees'/1
			  (_cor0)
		  in  let <_cor33> =
			  %% Line 6885
			  apply 'meta_subtrees'/1
			      (_cor32)
		      in  %% Line 6883
			  apply 'meta_call'/2
			      ('make_tree', %% Line 6884
					    [_cor31|%% Line 6885
						    [_cor33|[]]])
	end
'meta_list'/1 =
    %% Line 6888
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_cor1> =
		  %% Line 6889
		  apply 'meta'/1
		      (T)
	      in  let <_cor2> =
		      %% Line 6889
		      apply 'meta_list'/1
			  (Ts)
		  in  %% Line 6889
		      [_cor1|_cor2]
	  %% Line 6890
	  <[]> when 'true' ->
	      %% Line 6891
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'meta_list',1}}] )
	    -| ['compiler_generated'] )
	end
'meta_subtrees'/1 =
    %% Line 6893
    fun (_cor0) ->
	let <_cor12> =
	    %% Line 6894
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 6896
			      G|_cor2]> when 'true' ->
				let <_cor9> =
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor6) ->
						  case _cor6 of
						    <[%% Line 6895
						      T|_cor5]> when 'true' ->
							let <_cor7> =
							    apply 'meta'/1
								(T)
							in  let <_cor8> =
								%% Line 6895
								apply 'lc$^1'/1
								    (_cor5)
							    in  ( [_cor7|_cor8]
								  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor6> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor6})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (%% Line 6895
					       G)
				      -| ['list_comprehension'] )
				in  let <_cor10> =
					apply 'list'/1
					    (_cor9)
				    in  let <_cor11> =
					    %% Line 6896
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [_cor10|_cor11]
					      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 6894
	    apply 'list'/1
		(_cor12)
'meta_call'/2 =
    %% Line 6898
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 6899
	    apply 'atom'/1
		('erl_syntax')
	in  let <_cor2> =
		%% Line 6899
		apply 'atom'/1
		    (_cor1)
	    in  %% Line 6899
		apply 'application'/3
		    (_cor3, _cor2, _cor0)
'tree'/1 =
    %% Line 6913
    fun (_cor0) ->
	%% Line 6914
	apply 'tree'/2
	    (_cor0, [])
'tree'/2 =
    %% Line 6948
    fun (_cor1,_cor0) ->
	%% Line 6949
	{'tree',_cor1,{'attr',0,[],'none'},_cor0}
'is_tree'/1 =
    %% Line 6964
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 6965
	      'true'
	  %% Line 6966
	  <_cor5> when 'true' ->
	      %% Line 6967
	      'false'
	end
'data'/1 =
    %% Line 6980
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor2,_cor3,D}> when 'true' ->
	      D
	  %% Line 6981
	  <T> when 'true' ->
	      call 'erlang':'error'
		  ({'badarg',T})
	end
'wrap'/1 =
    %% Line 7004
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 7006
	    apply 'type'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 7006
		apply 'get_pos'/1
		    (_cor0)
	    in  %% Line 7006
		{'wrapper',_cor2,{'attr',_cor1,[],'none'},_cor0}
'unwrap'/1 =
    %% Line 7018
    fun (_cor0) ->
	case _cor0 of
	  <{'wrapper',_cor2,_cor3,Node}> when 'true' ->
	      Node
	  %% Line 7019
	  <Node> when 'true' ->
	      Node
	end
'is_printable'/1 =
    %% Line 7040
    fun (_cor0) ->
	%% Line 7041
	call 'io_lib':'printable_list'
	    (_cor0)
'unfold_function_names'/2 =
    %% Line 7046
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 7047
	    ( fun (_cor5) ->
		  case _cor5 of
		    <{Atom,Arity}> when 'true' ->
			let <_cor3> =
			    %% Line 7048
			    apply 'atom'/1
				(Atom)
			in  let <_cor2> =
				%% Line 7048
				apply 'integer'/1
				    (Arity)
			    in  let <N> =
				    %% Line 7048
				    apply 'arity_qualifier'/2
					(_cor3, _cor2)
				in  %% Line 7049
				    apply 'set_pos'/2
					(N, _cor0)
		    ( <_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6})
			    -| [{'function_name',{'-unfold_function_names/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-unfold_function_names/2-fun-0-'}}] )
	in  %% Line 7051
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor10) ->
			  case _cor10 of
			    <[N|_cor9]> when 'true' ->
				let <_cor11> =
				    apply F
					(N)
				in  let <_cor12> =
					apply 'lc$^0'/1
					    (_cor9)
				    in  ( [_cor11|_cor12]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor10> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor10})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
'fold_function_names'/1 =
    %% Line 7053
    fun (_cor0) ->
	%% Line 7054
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[N|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'fold_function_name'/1
				    (N)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'fold_function_name'/1 =
    %% Line 7056
    fun (_cor0) ->
	let <Name> =
	    %% Line 7057
	    apply 'arity_qualifier_body'/1
		(_cor0)
	in  let <Arity> =
		%% Line 7058
		apply 'arity_qualifier_argument'/1
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 7059
		    apply 'type'/1
			(Name)
		in  let <_cor6> =
			%% Line 7059
			call 'erlang':'=:='
			    (_cor5, 'atom')
		    in  let <_cor3> =
			    %% Line 7059
			    apply 'type'/1
				(Arity)
			in  let <_cor4> =
				%% Line 7059
				call 'erlang':'=:='
				    (_cor3, 'integer')
			    in  %% Line 7059
				case call 'erlang':'and'
					 (_cor6, _cor4) of
				  <'true'> when 'true' ->
				      let <_cor9> =
					  %% Line 7060
					  apply 'concrete'/1
					      (Name)
				      in  let <_cor8> =
					      %% Line 7060
					      apply 'concrete'/1
						  (Arity)
					  in  %% Line 7060
					      {_cor9,_cor8}
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
'fold_variable_names'/1 =
    %% Line 7062
    fun (_cor0) ->
	%% Line 7063
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[V|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'variable_name'/1
				    (V)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'unfold_variable_names'/2 =
    %% Line 7065
    fun (_cor1,_cor0) ->
	%% Line 7066
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[V|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'variable'/1
				    (V)
			    in  let <_cor6> =
				    apply 'set_pos'/2
					(_cor5, _cor0)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'fold_record_fields'/1 =
    %% Line 7078
    fun (_cor0) ->
	%% Line 7079
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[F|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'fold_record_field'/1
				    (F)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'fold_record_field'/1 =
    %% Line 7081
    fun (_cor0) ->
	let <Pos> =
	    %% Line 7082
	    apply 'get_pos'/1
		(_cor0)
	in  let <Name> =
		%% Line 7083
		apply 'record_field_name'/1
		    (_cor0)
	    in  %% Line 7084
		case apply 'record_field_value'/1
			 (_cor0) of
		  %% Line 7085
		  <'none'> when 'true' ->
		      %% Line 7086
		      {'record_field',Pos,Name}
		  %% Line 7087
		  <Value> when 'true' ->
		      %% Line 7088
		      {'record_field',Pos,Name,Value}
		end
'unfold_record_fields'/1 =
    %% Line 7091
    fun (_cor0) ->
	%% Line 7092
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[F|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'unfold_record_field'/1
				    (F)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'unfold_record_field'/1 =
    %% Line 7094
    fun (_cor0) ->
	case _cor0 of
	  <{'typed_record_field',Field,_X_Type}> when 'true' ->
	      %% Line 7095
	      apply 'unfold_record_field_1'/1
		  (Field)
	  %% Line 7096
	  <Field> when 'true' ->
	      %% Line 7097
	      apply 'unfold_record_field_1'/1
		  (Field)
	end
'unfold_record_field_1'/1 =
    %% Line 7099
    fun (_cor0) ->
	case _cor0 of
	  <{'record_field',Pos,Name}> when 'true' ->
	      let <_cor1> =
		  %% Line 7100
		  apply 'record_field'/1
		      (Name)
	      in  %% Line 7100
		  apply 'set_pos'/2
		      (_cor1, Pos)
	  %% Line 7101
	  <{'record_field',Pos,Name,Value}> when 'true' ->
	      let <_cor2> =
		  %% Line 7102
		  apply 'record_field'/2
		      (Name, Value)
	      in  %% Line 7102
		  apply 'set_pos'/2
		      (_cor2, Pos)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'unfold_record_field_1',1}}] )
	    -| ['compiler_generated'] )
	end
'fold_binary_field_types'/1 =
    %% Line 7104
    fun (_cor0) ->
	%% Line 7105
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[T|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'fold_binary_field_type'/1
				    (T)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'fold_binary_field_type'/1 =
    %% Line 7107
    fun (_cor0) ->
	%% Line 7108
	case apply 'type'/1
		 (_cor0) of
	  %% Line 7109
	  <'size_qualifier'> when 'true' ->
	      let <_cor3> =
		  %% Line 7110
		  apply 'size_qualifier_body'/1
		      (_cor0)
	      in  let <_cor4> =
		      %% Line 7110
		      apply 'concrete'/1
			  (_cor3)
		  in  let <_cor1> =
			  %% Line 7111
			  apply 'size_qualifier_argument'/1
			      (_cor0)
		      in  let <_cor2> =
			      %% Line 7111
			      apply 'concrete'/1
				  (_cor1)
			  in  %% Line 7110
			      {_cor4,_cor2}
	  %% Line 7112
	  <_cor7> when 'true' ->
	      %% Line 7113
	      apply 'concrete'/1
		  (_cor0)
	end
'unfold_binary_field_types'/2 =
    %% Line 7116
    fun (_cor1,_cor0) ->
	%% Line 7117
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[T|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'unfold_binary_field_type'/2
				    (T, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'unfold_binary_field_type'/2 =
    %% Line 7119
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Type,Size},Pos> when 'true' ->
	      let <_cor3> =
		  %% Line 7120
		  apply 'atom'/1
		      (Type)
	      in  let <_cor2> =
		      %% Line 7120
		      apply 'integer'/1
			  (Size)
		  in  let <_cor4> =
			  %% Line 7120
			  apply 'size_qualifier'/2
			      (_cor3, _cor2)
		      in  %% Line 7120
			  apply 'set_pos'/2
			      (_cor4, Pos)
	  %% Line 7121
	  <Type,Pos> when 'true' ->
	      let <_cor5> =
		  %% Line 7122
		  apply 'atom'/1
		      (Type)
	      in  %% Line 7122
		  apply 'set_pos'/2
		      (_cor5, Pos)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_syntax')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_syntax', _cor0)
end