module 'erl_tidy' ['dir'/0,
		   'dir'/1,
		   'dir'/2,
		   'file'/1,
		   'file'/2,
		   'module'/1,
		   'module'/2,
		   'module_info'/0,
		   'module_info'/1]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'options',{'type',52,'list',[{'type',52,'union',[{'type',52,'atom',[]}|[{'type',52,'tuple',[{'type',52,'atom',[]}|[{'type',52,'any',[]}]]}]]}]},[]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'dir',0},[{'type',66,'fun',[{'type',66,'product',[]}|[{'atom',66,'ok'}]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'dir',1},[{'type',75,'fun',[{'type',75,'product',[{'remote_type',75,[{'atom',75,'file'}|[{'atom',75,'filename'}|[[]]]]}]}|[{'atom',75,'ok'}]]}]}],
		%% Line 128
		'type' =
		    %% Line 128
		    [{{'record','dir'},[{'typed_record_field',{'record_field',128,{'atom',128,'follow_links'},{'atom',128,'false'}},{'type',128,'boolean',[]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'recursive'},{'atom',129,'true'}},{'type',129,'boolean',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'options'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'options',[]}]]}}]]],[]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'dir',2},[{'type',132,'fun',[{'type',132,'product',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}|[{'type',132,'options',[]}]]}|[{'atom',132,'ok'}]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'file',1},[{'type',215,'fun',[{'type',215,'product',[{'remote_type',215,[{'atom',215,'file'}|[{'atom',215,'filename'}|[[]]]]}]}|[{'atom',215,'ok'}]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'file',2},[{'type',286,'fun',[{'type',286,'product',[{'remote_type',286,[{'atom',286,'file'}|[{'atom',286,'filename'}|[[]]]]}|[{'type',286,'options',[]}]]}|[{'atom',286,'ok'}]]}]}],
		%% Line 507
		'spec' =
		    %% Line 507
		    [{{'module',1},[{'type',507,'fun',[{'type',507,'product',[{'remote_type',507,[{'atom',507,'erl_syntax'}|[{'atom',507,'forms'}|[[]]]]}]}|[{'remote_type',507,[{'atom',507,'erl_syntax'}|[{'atom',507,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 635
		'spec' =
		    %% Line 635
		    [{{'module',2},[{'type',635,'fun',[{'type',635,'product',[{'remote_type',635,[{'atom',635,'erl_syntax'}|[{'atom',635,'forms'}|[[]]]]}|[{'type',635,'list',[{'type',635,'term',[]}]}]]}|[{'remote_type',635,[{'atom',635,'erl_syntax'}|[{'atom',635,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 696
		'spec' =
		    %% Line 696
		    [{{'get_module_name',2},[{'type',696,'fun',[{'type',696,'product',[{'type',696,'list',[{'remote_type',696,[{'atom',696,'erl_syntax_lib'}|[{'atom',696,'info_pair'}|[[]]]]}]}|[{'type',696,'string',[]}]]}|[{'type',696,'atom',[]}]]}]}],
		%% Line 716
		'spec' =
		    %% Line 716
		    [{{'get_module_exports',1},[{'type',716,'fun',[{'type',716,'product',[{'type',716,'list',[{'remote_type',716,[{'atom',716,'erl_syntax_lib'}|[{'atom',716,'info_pair'}|[[]]]]}]}]}|[{'type',716,'list',[{'type',716,'tuple',[{'type',716,'atom',[]}|[{'type',716,'arity',[]}]]}]}]]}]}],
		%% Line 726
		'spec' =
		    %% Line 726
		    [{{'get_module_imports',1},[{'type',726,'fun',[{'type',726,'product',[{'type',726,'list',[{'remote_type',726,[{'atom',726,'erl_syntax_lib'}|[{'atom',726,'info_pair'}|[[]]]]}]}]}|[{'type',726,'list',[{'type',726,'tuple',[{'type',726,'atom',[]}|[{'type',726,'atom',[]}]]}]}]]}]}],
		%% Line 740
		'spec' =
		    %% Line 740
		    [{{'flatten_imports',1},[{'type',740,'fun',[{'type',740,'product',[{'type',740,'list',[{'type',740,'tuple',[{'type',740,'atom',[]}|[{'type',740,'list',[{'type',740,'atom',[]}]}]]}]}]}|[{'type',740,'list',[{'type',740,'tuple',[{'type',740,'atom',[]}|[{'type',740,'atom',[]}]]}]}]]}]}],
		%% Line 763
		'spec' =
		    %% Line 763
		    [{{'check_imports_1',1},[{'type',763,'fun',[{'type',763,'product',[{'type',763,'list',[{'type',763,'tuple',[{'type',763,'atom',[]}|[{'type',763,'atom',[]}]]}]}]}|[{'type',763,'boolean',[]}]]}]}],
		%% Line 955
		'type' =
		    %% Line 955
		    [{'fa',{'type',955,'tuple',[{'type',955,'atom',[]}|[{'type',955,'arity',[]}]]},[]}],
		%% Line 956
		'type' =
		    %% Line 956
		    [{'context',{'type',956,'union',[{'atom',956,'guard_expr'}|[{'atom',956,'guard_test'}|[{'atom',956,'normal'}]]]},[]}],
		%% Line 958
		'type' =
		    %% Line 958
		    [{{'record','env'},[{'typed_record_field',{'record_field',958,{'atom',958,'file'}},{'type',958,'union',[{'atom',958,'undefined'}|[{'remote_type',958,[{'atom',958,'file'}|[{'atom',958,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',959,{'atom',959,'module'}},{'type',959,'union',[{'atom',959,'undefined'}|[{'type',959,'atom',[]}]]}}|[{'typed_record_field',{'record_field',960,{'atom',960,'current'}},{'type',960,'union',[{'atom',960,'undefined'}|[{'type',960,'fa',[]}]]}}|[{'typed_record_field',{'record_field',961,{'atom',961,'imports'},{'call',961,{'remote',961,{'atom',961,'dict'},{'atom',961,'new'}},[]}},{'remote_type',961,[{'atom',961,'dict'}|[{'atom',961,'dict'}|[[{'type',961,'atom',[]}|[{'type',961,'atom',[]}]]]]]}}|[{'typed_record_field',{'record_field',962,{'atom',962,'context'},{'atom',962,'normal'}},{'type',962,'context',[]}}|[{'typed_record_field',{'record_field',963,{'atom',963,'verbosity'},{'integer',963,1}},{'type',963,'union',[{'integer',963,0}|[{'integer',963,1}|[{'integer',963,2}]]]}}|[{'typed_record_field',{'record_field',964,{'atom',964,'quiet'},{'atom',964,'false'}},{'type',964,'boolean',[]}}|[{'typed_record_field',{'record_field',965,{'atom',965,'no_imports'},{'atom',965,'false'}},{'type',965,'boolean',[]}}|[{'typed_record_field',{'record_field',966,{'atom',966,'spawn_funs'},{'atom',966,'false'}},{'type',966,'boolean',[]}}|[{'typed_record_field',{'record_field',967,{'atom',967,'auto_list_comp'},{'atom',967,'true'}},{'type',967,'boolean',[]}}|[{'typed_record_field',{'record_field',968,{'atom',968,'auto_export_vars'},{'atom',968,'false'}},{'type',968,'boolean',[]}}|[{'typed_record_field',{'record_field',969,{'atom',969,'new_guard_tests'},{'atom',969,'true'}},{'type',969,'boolean',[]}}|[{'typed_record_field',{'record_field',970,{'atom',970,'old_guard_tests'},{'atom',970,'false'}},{'type',970,'boolean',[]}}]]]]]]]]]]]]],[]}],
		%% Line 972
		'type' =
		    %% Line 972
		    [{{'record','st'},[{'typed_record_field',{'record_field',972,{'atom',972,'varc'}},{'type',972,'union',[{'atom',972,'undefined'}|[{'type',972,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',973,{'atom',973,'used'},{'call',973,{'remote',973,{'atom',973,'sets'},{'atom',973,'new'}},[]}},{'remote_type',973,[{'atom',973,'sets'}|[{'atom',973,'set'}|[[{'type',973,'tuple',[{'type',973,'atom',[]}|[{'type',973,'arity',[]}]]}]]]]}}|[{'typed_record_field',{'record_field',974,{'atom',974,'imported'}},{'type',974,'union',[{'atom',974,'undefined'}|[{'remote_type',974,[{'atom',974,'sets'}|[{'atom',974,'set'}|[[{'type',974,'tuple',[{'type',974,'atom',[]}|[{'type',974,'arity',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',975,{'atom',975,'vars'}},{'type',975,'union',[{'atom',975,'undefined'}|[{'remote_type',975,[{'atom',975,'sets'}|[{'atom',975,'set'}|[[{'type',975,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',976,{'atom',976,'functions'}},{'type',976,'union',[{'atom',976,'undefined'}|[{'remote_type',976,[{'atom',976,'sets'}|[{'atom',976,'set'}|[[{'type',976,'tuple',[{'type',976,'atom',[]}|[{'type',976,'arity',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',977,{'atom',977,'new_forms'},{'nil',977}},{'type',977,'list',[{'remote_type',977,[{'atom',977,'erl_syntax'}|[{'atom',977,'syntaxTree'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',978,{'atom',978,'rename'}},{'type',978,'union',[{'atom',978,'undefined'}|[{'remote_type',978,[{'atom',978,'dict'}|[{'atom',978,'dict'}|[[{'type',978,'mfa',[]}|[{'type',978,'tuple',[{'type',978,'atom',[]}|[{'type',978,'atom',[]}]]}]]]]]}]]}}]]]]]]],[]}],
		%% Line 1430
		'spec' =
		    %% Line 1430
		    [{{'auto_expand_import',2},[{'type',1430,'fun',[{'type',1430,'product',[{'type',1430,'mfa',[]}|[{'type',1430,'record',[{'atom',1430,'st'}]}]]}|[{'type',1430,'boolean',[]}]]}]}],
		%% Line 1664
		'spec' =
		    %% Line 1664
		    [{{'rename_remote_call_1',1},[{'type',1664,'fun',[{'type',1664,'product',[{'type',1664,'mfa',[]}]}|[{'type',1664,'union',[{'type',1664,'tuple',[{'type',1664,'atom',[]}|[{'type',1664,'atom',[]}]]}|[{'atom',1664,'false'}]]}]]}]}],
		%% Line 1699
		'spec' =
		    %% Line 1699
		    [{{'rewrite_guard_test',2},[{'type',1699,'fun',[{'type',1699,'product',[{'type',1699,'atom',[]}|[{'type',1699,'arity',[]}]]}|[{'type',1699,'atom',[]}]]}]}],
		%% Line 1718
		'spec' =
		    %% Line 1718
		    [{{'reverse_guard_test',2},[{'type',1718,'fun',[{'type',1718,'product',[{'type',1718,'atom',[]}|[{'type',1718,'arity',[]}]]}|[{'type',1718,'atom',[]}]]}]}]]
'dir__defaults'/0 =
    %% Line 56
    fun () ->
	%% Line 57
	[{'follow_links','false'}|['recursive'|[{'regexp',[46|[42|[92|[46|[101|[114|[108|[36]]]]]]]]}|['verbose']]]]
'dir'/0 =
    %% Line 68
    fun () ->
	%% Line 69
	apply 'dir'/1
	    ([])
'dir'/1 =
    %% Line 77
    fun (_cor0) ->
	%% Line 78
	apply 'dir'/2
	    (_cor0, [])
'dir'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 135
	    apply 'dir__defaults'/0
		()
	in  let <Opts1> =
		%% Line 135
		call 'erlang':'++'
		    (_cor0, _cor2)
	    in  let <_cor5> =
		    %% Line 136
		    call 'proplists':'get_bool'
			('follow_links', Opts1)
		in  let <_cor4> =
			%% Line 137
			call 'proplists':'get_bool'
			    ('recursive', Opts1)
		    in  let <Env> =
			    %% Line 136
			    {'dir',_cor5,_cor4,%% Line 138
					       Opts1}
			in  let <Regexp> =
				%% Line 139
				call 'proplists':'get_value'
				    ('regexp', Opts1)
			    in  let <_cor12,Dir1> =
				    %% Line 140
				    case apply 'filename'/1
					     (_cor1) of
				      %% Line 141
				      <[]> when 'true' ->
					  <%% Line 142
					   [46],%% Line 142
						[46]>
				      %% Line 143
				      <Dir1> when 'true' ->
					  %% Line 144
					  <'ok',Dir1>
				    end
				in  %% Line 146
				    apply 'dir_1'/3
					(Dir1, Regexp, Env)
'dir_1'/3 =
    %% Line 148
    fun (_cor2,_cor1,_cor0) ->
	%% Line 149
	case call 'file':'list_dir'
		 (_cor2) of
	  %% Line 150
	  <{'ok',Files}> when 'true' ->
	      let <_cor5> =
		  %% Line 151
		  ( fun (_cor3) ->
			apply 'dir_2'/4
			    (_cor3, _cor1, _cor2, _cor0)
		    -| [{'id',{0,0,'-dir_1/3-fun-0-'}}] )
	      in  %% Line 151
		  call 'lists':'foreach'
		      (_cor5, %% Line 152
			      Files)
	  %% Line 153
	  <{'error',_cor11}> when 'true' ->
	      let <_cor6> =
		  %% Line 155
		  apply 'filename'/1
		      (_cor2)
	      in  do  %% Line 154
		      apply 'report_error'/2
			  ([101|[114|[114|[111|[114|[32|[114|[101|[97|[100|[105|[110|[103|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[96|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 155
																								   [_cor6|[]])
		      %% Line 156
		      call 'erlang':'exit'
			  ('error')
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'dir_2'/4 =
    %% Line 159
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 160
	    case <> of
	      <>
		  when call 'erlang':'=:='
			(_cor1,
			 []) ->
		  _cor3
	      %% Line 162
	      <> when 'true' ->
		  %% Line 163
		  call 'filename':'join'
		      (_cor1, _cor3)
	    end
	in  %% Line 165
	    case apply 'file_type'/1
		     (_cor4) of
	      %% Line 166
	      <{'value','regular'}> when 'true' ->
		  %% Line 167
		  apply 'dir_4'/3
		      (_cor4, _cor2, _cor0)
	      %% Line 168
	      <{'value','directory'}>
		  when ( try
			  ( case <> of
			      ( <>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_record'
									     -| ['compiler_generated'] )
					    (_cor0,
					     ( 'dir'
					       -| ['compiler_generated'] ),
					     ( 4
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    let <_cor10> =
					( call 'erlang':'element'
					      (3, _cor0)
					  -| ['compiler_generated'] )
				    in  ( call 'erlang':'=:='
					      (_cor10, 'true')
					  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  %% Line 169
		  case apply 'is_symlink'/1
			   (_cor3) of
		    %% Line 170
		    <'false'> when 'true' ->
			%% Line 171
			apply 'dir_3'/4
			    (_cor3, _cor1, _cor2, _cor0)
		    %% Line 172
		    <'true'>
			when ( try
				( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (_cor0,
						   ( 'dir'
						     -| ['compiler_generated'] ),
						   ( 4
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor16> =
					      ( call 'erlang':'element'
						    (2, _cor0)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'=:='
						    (_cor16, 'true')
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 173
			apply 'dir_3'/4
			    (_cor3, _cor1, _cor2, _cor0)
		    %% Line 174
		    <_cor24> when 'true' ->
			%% Line 175
			'ok'
		  end
	      %% Line 177
	      <_cor25> when 'true' ->
		  %% Line 178
		  'ok'
	    end
'dir_3'/4 =
    %% Line 181
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Dir1> =
	    %% Line 182
	    call 'filename':'join'
		(_cor2, _cor3)
	in  %% Line 183
	    ( case _cor0 of
		( <( {'dir',_cor11,_cor12,_rec0}
		     -| ['compiler_generated'] )> when 'true' ->
		      do  apply 'verbose'/3
			      ([116|[105|[100|[121|[105|[110|[103|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]], [Dir1|[]], _rec0)
			  %% Line 184
			  apply 'dir_1'/3
			      (Dir1, _cor1, _cor0)
		  -| ['compiler_generated'] )
		( <_cor13> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','dir'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'dir_4'/3 =
    %% Line 186
    fun (_cor2,_cor1,_cor0) ->
	%% Line 187
	case call 're':'run'
		 (_cor2, _cor1) of
	  %% Line 188
	  <{'match',_cor12}> when 'true' ->
	      %% Line 189
	      ( case _cor0 of
		  ( <( {'dir',_cor13,_cor14,_rec1}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Opts> =
			    [{'outfile',_cor2}|[{'dir',[]}|_rec1]]
			in  let <_cor6> =
				catch
				    %% Line 190
				    apply 'file'/2
					(_cor2, Opts)
			    in  %% Line 190
				case _cor6 of
				  %% Line 191
				  <{'EXIT',Value}> when 'true' ->
				      %% Line 192
				      apply 'warn'/3
					  ([101|[114|[114|[111|[114|[32|[116|[105|[100|[121|[105|[110|[103|[32|[96|[126|[116|[115|[39|[46|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[Value|[]]], Opts)
				  %% Line 193
				  <_cor16> when 'true' ->
				      %% Line 194
				      'ok'
				end
		    -| ['compiler_generated'] )
		  ( <_cor15> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','dir'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 196
	  <'nomatch'> when 'true' ->
	      %% Line 197
	      'ok'
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'file__defaults'/0 =
    %% Line 200
    fun () ->
	let <_cor0> =
	    %% Line 204
	    apply 'default_printer'/0
		()
	in  %% Line 201
	    [{'backup_suffix',[46|[98|[97|[107]]]]}|%% Line 202
						    ['backups'|%% Line 203
							       [{'dir',[]}|%% Line 204
									   [{'printer',_cor0}|%% Line 205
											      [{'quiet','false'}|[{'verbose','false'}]]]]]]
'default_printer'/0 =
    %% Line 208
    fun () ->
	%% Line 209
	( fun (_cor1,_cor0) ->
	      call 'erl_prettypr':'format'
		  (_cor1, _cor0)
	  -| [{'id',{0,0,'-default_printer/0-fun-0-'}}] )
'file'/1 =
    %% Line 217
    fun (_cor0) ->
	%% Line 218
	apply 'file'/2
	    (_cor0, [])
'file'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	let <Parent> =
	    %% Line 289
	    call 'erlang':'self'
		()
	in  let <_cor3> =
		%% Line 290
		( fun () ->
		      apply 'file_1'/3
			  (Parent, _cor1, _cor0)
		  -| [{'id',{0,0,'-file/2-fun-0-'}}] )
	    in  let <Child> =
		    %% Line 290
		    call 'erlang':'spawn_link'
			(_cor3)
		in  %% Line 291
		    receive
		      %% Line 292
		      <{_cor7,'ok'}>
			  when call 'erlang':'=:='
				(_cor7,
				 Child) ->
			  %% Line 293
			  'ok'
		      %% Line 294
		      <{_cor8,{'error',Reason}}>
			  when call 'erlang':'=:='
				(_cor8,
				 Child) ->
			  %% Line 295
			  call 'erlang':'exit'
			      (Reason)
		    after 'infinity' ->
		      'true'
'file_1'/3 =
    %% Line 298
    fun (_cor2,_cor1,_cor0) ->
	%% Line 299
	try
	    apply 'file_2'/2
		(_cor1, _cor0)
	of <_cor3> ->
	    let <_cor4> =
		%% Line 301
		call 'erlang':'self'
		    ()
	    in  %% Line 301
		call 'erlang':'!'
		    (_cor2, {_cor4,'ok'})
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 303
	      <'throw','syntax_error',_cor15> when 'true' ->
		  let <_cor9> =
		      %% Line 304
		      call 'erlang':'self'
			  ()
		  in  %% Line 304
		      call 'erlang':'!'
			  (_cor2, {_cor9,'ok'})
	      %% Line 305
	      <'error',Reason,_cor16> when 'true' ->
		  let <_cor10> =
		      %% Line 306
		      call 'erlang':'self'
			  ()
		  in  %% Line 306
		      call 'erlang':'!'
			  (_cor2, {_cor10,{'error',Reason}})
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'file_2'/2 =
    %% Line 309
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 310
	    apply 'file__defaults'/0
		()
	in  let <Opts1> =
		%% Line 310
		call 'erlang':'++'
		    (_cor0, _cor2)
	    in  let <Forms> =
		    %% Line 311
		    apply 'read_module'/2
			(_cor1, Opts1)
		in  let <Comments> =
			%% Line 312
			call 'erl_comment_scan':'file'
			    (_cor1)
		    in  let <Forms1> =
			    %% Line 313
			    call 'erl_recomment':'recomment_forms'
				(Forms, Comments)
			in  let <Tree> =
				%% Line 314
				apply 'module'/2
				    (Forms1, [{'file',_cor1}|Opts1])
			    in  %% Line 315
				case call 'proplists':'get_bool'
					 ('test', Opts1) of
				  %% Line 316
				  <'true'> when 'true' ->
				      %% Line 317
				      'ok'
				  %% Line 318
				  <'false'> when 'true' ->
				      %% Line 319
				      case call 'proplists':'get_bool'
					       ('stdout', Opts1) of
					%% Line 320
					<'true'> when 'true' ->
					    do  %% Line 321
						apply 'print_module'/2
						    (Tree, Opts1)
						%% Line 322
						'ok'
					%% Line 323
					<'false'> when 'true' ->
					    do  %% Line 324
						apply 'write_module'/3
						    (Tree, _cor1, Opts1)
						%% Line 325
						'ok'
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor8})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor9})
				    -| ['compiler_generated'] )
				end
'read_module'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 330
	    apply 'filename'/1
		(_cor1)
	in  do  %% Line 330
		apply 'verbose'/3
		    ([114|[101|[97|[100|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]], [_cor2|[]], _cor0)
		%% Line 331
		case call 'epp_dodger':'parse_file'
			 (_cor1, ['no_fail']) of
		  %% Line 332
		  <{'ok',Forms}> when 'true' ->
		      do  %% Line 333
			  apply 'check_forms'/2
			      (Forms, _cor1)
			  %% Line 334
			  Forms
		  %% Line 335
		  <{'error',R}> when 'true' ->
		      do  %% Line 336
			  apply 'error_read_file'/1
			      (_cor1)
			  %% Line 337
			  call 'erlang':'exit'
			      ({'error',R})
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
'check_forms'/2 =
    %% Line 340
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 341
	    ( fun (_cor7) ->
		  %% Line 342
		  case call 'erl_syntax':'type'
			   (_cor7) of
		    %% Line 343
		    <'error_marker'> when 'true' ->
			let <_cor3> =
			    %% Line 344
			    case call 'erl_syntax':'error_marker_info'
				     (_cor7) of
			      %% Line 345
			      <{_cor12,M,D}> when 'true' ->
				  %% Line 346
				  call M:'format_error'
				      (D)
			      %% Line 347
			      <_cor13> when 'true' ->
				  %% Line 348
				  [117|[110|[107|[110|[111|[119|[110|[32|[101|[114|[114|[111|[114]]]]]]]]]]]]]
			    end
			in  let <_cor5> =
				%% Line 350
				call 'erl_syntax':'get_pos'
				    (_cor7)
			    in  do  %% Line 350
				    apply 'report_error'/2
					({_cor0,_cor5,%% Line 351
						      [10|[32|[32|[126|[116|[115]]]]]]}, %% Line 351
											 [_cor3|[]])
				    %% Line 352
				    call 'erlang':'exit'
					('error')
		    %% Line 353
		    <_cor14> when 'true' ->
			%% Line 354
			'ok'
		  end
	      -| [{'id',{0,0,'-check_forms/2-fun-0-'}}] )
	in  %% Line 357
	    call 'lists':'foreach'
		(Fun, _cor1)
'write_module'/3 =
    %% Line 363
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 364
	    apply 'filename'/1
		(_cor1)
	in  let <Name1> =
		%% Line 364
		call 'proplists':'get_value'
		    ('outfile', _cor0, _cor3)
	    in  let <_cor5> =
		    %% Line 365
		    call 'proplists':'get_value'
			('dir', _cor0, [])
		in  let <Dir> =
			%% Line 365
			apply 'filename'/1
			    (_cor5)
		    in  let <_cor13> =
			    %% Line 366
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Dir,
					 []) ->
				  %% Line 367
				  Name1
			      %% Line 368
			      <> when 'true' ->
				  do  %% Line 369
				      case apply 'file_type'/1
					       (Dir) of
					%% Line 370
					<{'value','directory'}> when 'true' ->
					    'ok'
					%% Line 372
					<{'value',_cor34}> when 'true' ->
					    let <_cor7> =
						%% Line 374
						apply 'filename'/1
						    (Dir)
					    in  do  %% Line 373
						    apply 'report_error'/2
							([96|[126|[116|[115|[39|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[46]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 374
																								       [_cor7|[]])
						    %% Line 375
						    call 'erlang':'exit'
							('error')
					%% Line 376
					<'none'> when 'true' ->
					    %% Line 377
					    case call 'file':'make_dir'
						     (Dir) of
					      %% Line 378
					      <'ok'> when 'true' ->
						  let <_cor8> =
						      %% Line 380
						      apply 'filename'/1
							  (Dir)
						  in  do  %% Line 379
							  apply 'verbose'/3
							      ([99|[114|[101|[97|[116|[101|[100|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]], %% Line 380
																									[_cor8|[]], _cor0)
							  'ok'
					      %% Line 382
					      <E> when 'true' ->
						  let <_cor9> =
						      %% Line 385
						      apply 'filename'/1
							  (Dir)
						  in  do  %% Line 383
							  apply 'report_error'/2
							      ([102|[97|[105|[108|[101|[100|[32|[116|[111|[32|[99|[114|[101|[97|[116|[101|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 385
																															   [_cor9|[]])
							  %% Line 386
							  call 'erlang':'exit'
							      ({'make_dir',E})
					    end
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor11})
					  -| ['compiler_generated'] )
				      end
				      let <_cor12> =
					  %% Line 389
					  call 'filename':'join'
					      (Dir, Name1)
				      in  %% Line 389
					  apply 'filename'/1
					      (_cor12)
			    end
			in  let <_cor20> =
				%% Line 391
				( letrec
				      'lc$^0'/1 =
					  fun (_cor18) ->
					      case _cor18 of
						<[Enc|_cor16]>
						    when %% Line 392
						      call 'erlang':'=/='
							  (Enc,
							   'none') ->
						    let <_cor19> =
							apply 'lc$^0'/1
							    (_cor16)
						    in  ( [{'encoding',Enc}|_cor19]
							  -| ['compiler_generated'] )
						( <[Enc|_cor16]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor16)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor18> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor18})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor17> =
					  call 'epp':'read_encoding'
					      (_cor1)
				      in  apply 'lc$^0'/1
					      ([_cor17|[]])
				  -| ['list_comprehension'] )
			    in  do  %% Line 393
				    case call 'proplists':'get_bool'
					     ('backups', _cor0) of
				      %% Line 394
				      <'true'> when 'true' ->
					  %% Line 395
					  apply 'backup_file'/2
					      (_cor13, _cor0)
				      %% Line 396
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor22> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor22})
					-| ['compiler_generated'] )
				    end
				    let <Printer> =
					%% Line 399
					call 'proplists':'get_value'
					    ('printer', _cor0)
				    in  let <FD> =
					    %% Line 400
					    apply 'open_output_file'/2
						(_cor13, _cor20)
					in  do  %% Line 401
						apply 'verbose'/3
						    ([119|[114|[105|[116|[105|[110|[103|[32|[116|[111|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]], [_cor13|[]], _cor0)
						let <_cor27> =
						    catch
							let <_cor25> =
							    %% Line 402
							    call 'erlang':'++'
								(_cor0, _cor20)
							in  let <_cor26> =
								%% Line 402
								apply 'output'/4
								    (FD, Printer, _cor2, _cor25)
							    in  %% Line 402
								{'ok',_cor26}
						in  %% Line 403
						    case call 'file':'close'
							     (FD) of
						      <'ok'> when 'true' ->
							  %% Line 404
							  case _cor27 of
							    %% Line 405
							    <{'ok',_cor35}> when 'true' ->
								_cor13
							    %% Line 407
							    <{'EXIT',R}> when 'true' ->
								do  %% Line 408
								    apply 'error_write_file'/1
									(_cor13)
								    %% Line 409
								    call 'erlang':'exit'
									(R)
							    %% Line 410
							    <R> when 'true' ->
								do  %% Line 411
								    apply 'error_write_file'/1
									(_cor13)
								    %% Line 412
								    call 'erlang':'throw'
									(R)
							  end
						      ( <_cor29> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor29})
							-| ['compiler_generated'] )
						    end
'print_module'/2 =
    %% Line 415
    fun (_cor1,_cor0) ->
	let <Printer> =
	    %% Line 416
	    call 'proplists':'get_value'
		('printer', _cor0)
	in  let <_cor3> =
		%% Line 417
		apply Printer
		    (_cor1, _cor0)
	    in  %% Line 417
		call 'io':'format'
		    (_cor3)
'output'/4 =
    %% Line 419
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 420
	    apply _cor2
		(_cor1, _cor0)
	in  do  %% Line 420
		call 'io':'put_chars'
		    (_cor3, _cor4)
		%% Line 421
		call 'io':'nl'
		    (_cor3)
'file_type'/1 =
    %% Line 425
    fun (_cor0) ->
	%% Line 426
	apply 'file_type'/2
	    (_cor0, 'false')
'is_symlink'/1 =
    %% Line 428
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 429
	    apply 'file_type'/2
		(_cor0, 'true')
	in  %% Line 429
	    call 'erlang':'=:='
		(_cor1, {'value','symlink'})
'file_type'/2 =
    %% Line 431
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 432
	    case _cor0 of
	      %% Line 433
	      <'true'> when 'true' ->
		  catch
		      %% Line 434
		      call 'file':'read_link_info'
			  (_cor1)
	      %% Line 435
	      <'false'> when 'true' ->
		  catch
		      %% Line 436
		      call 'file':'read_file_info'
			  (_cor1)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 438
	    case _cor3 of
	      %% Line 439
	      <{'ok',Env}> when 'true' ->
		  %% Line 440
		  ( case Env of
		      ( <( {'file_info',_cor10,_rec2,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}
			   -| ['compiler_generated'] )> when 'true' ->
			    {'value',_rec2}
			-| ['compiler_generated'] )
		      ( <_cor22> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','file_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 441
	      <{'error','enoent'}> when 'true' ->
		  %% Line 442
		  'none'
	      %% Line 443
	      <{'error',R}> when 'true' ->
		  do  %% Line 444
		      apply 'error_read_file'/1
			  (_cor1)
		      %% Line 445
		      call 'erlang':'exit'
			  ({'error',R})
	      %% Line 446
	      <{'EXIT',R}> when 'true' ->
		  do  %% Line 447
		      apply 'error_read_file'/1
			  (_cor1)
		      %% Line 448
		      call 'erlang':'exit'
			  (R)
	      %% Line 449
	      <R> when 'true' ->
		  do  %% Line 450
		      apply 'error_read_file'/1
			  (_cor1)
		      %% Line 451
		      call 'erlang':'throw'
			  (R)
	    end
'open_output_file'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    catch
		let <_cor2> =
		    %% Line 455
		    ['write'|_cor0]
		in  %% Line 455
		    call 'file':'open'
			(_cor1, _cor2)
	in  %% Line 455
	    case _cor3 of
	      %% Line 456
	      <{'ok',FD}> when 'true' ->
		  %% Line 457
		  FD
	      %% Line 458
	      <{'error',R}> when 'true' ->
		  do  %% Line 459
		      apply 'error_open_output'/1
			  (_cor1)
		      %% Line 460
		      call 'erlang':'exit'
			  ({'error',R})
	      %% Line 461
	      <{'EXIT',R}> when 'true' ->
		  do  %% Line 462
		      apply 'error_open_output'/1
			  (_cor1)
		      %% Line 463
		      call 'erlang':'exit'
			  (R)
	      %% Line 464
	      <R> when 'true' ->
		  do  %% Line 465
		      apply 'error_open_output'/1
			  (_cor1)
		      %% Line 466
		      call 'erlang':'exit'
			  (R)
	    end
'backup_file'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	%% Line 473
	case apply 'file_type'/1
		 (_cor1) of
	  %% Line 474
	  <{'value','regular'}> when 'true' ->
	      %% Line 475
	      apply 'backup_file_1'/2
		  (_cor1, _cor0)
	  %% Line 476
	  <{'value',_cor5}> when 'true' ->
	      do  %% Line 477
		  apply 'error_backup_file'/1
		      (_cor1)
		  %% Line 478
		  call 'erlang':'exit'
		      ('error')
	  %% Line 479
	  <'none'> when 'true' ->
	      %% Line 480
	      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'backup_file_1'/2 =
    %% Line 485
    fun (_cor1,_cor0) ->
	let <Suffix> =
	    %% Line 486
	    call 'proplists':'get_value'
		('backup_suffix', _cor0, [])
	in  let <_cor5> =
		%% Line 487
		call 'filename':'dirname'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 488
		    call 'filename':'basename'
			(_cor1)
		in  let <_cor4> =
			%% Line 488
			call 'erlang':'++'
			    (_cor3, Suffix)
		    in  let <Dest> =
			    %% Line 487
			    call 'filename':'join'
				(_cor5, _cor4)
			in  let <_cor7> =
				catch
				    %% Line 489
				    call 'file':'rename'
					(_cor1, Dest)
			    in  %% Line 489
				case _cor7 of
				  %% Line 490
				  <'ok'> when 'true' ->
				      %% Line 491
				      apply 'verbose'/3
					  ([109|[97|[100|[101|[32|[98|[97|[99|[107|[117|[112|[32|[111|[102|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]], _cor0)
				  %% Line 492
				  <{'error',R}> when 'true' ->
				      do  %% Line 493
					  apply 'error_backup_file'/1
					      (_cor1)
					  %% Line 494
					  call 'erlang':'exit'
					      ({'error',R})
				  %% Line 495
				  <{'EXIT',R}> when 'true' ->
				      do  %% Line 496
					  apply 'error_backup_file'/1
					      (_cor1)
					  %% Line 497
					  call 'erlang':'exit'
					      (R)
				  %% Line 498
				  <R> when 'true' ->
				      do  %% Line 499
					  apply 'error_backup_file'/1
					      (_cor1)
					  %% Line 500
					  call 'erlang':'throw'
					      (R)
				end
'module'/1 =
    %% Line 509
    fun (_cor0) ->
	%% Line 510
	apply 'module'/2
	    (_cor0, [])
'module'/2 =
    %% Line 637
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Forms,Opts>
	      when call 'erlang':'is_list'
		    (Forms) ->
	      let <_cor2> =
		  %% Line 638
		  call 'erl_syntax':'form_list'
		      (Forms)
	      in  %% Line 638
		  apply 'module'/2
		      (_cor2, Opts)
	  %% Line 639
	  <Forms,Opts> when 'true' ->
	      let <_cor4> =
		  %% Line 640
		  apply 'module__expansions'/0
		      ()
	      in  let <_cor5> =
		      %% Line 640
		      call 'proplists':'expand'
			  (_cor4, Opts)
		  in  let <_cor3> =
			  %% Line 641
			  apply 'module__defaults'/0
			      ()
		      in  let <Opts1> =
			      %% Line 641
			      call 'erlang':'++'
				  (_cor5, _cor3)
			  in  let <File> =
				  %% Line 642
				  call 'proplists':'get_value'
				      ('file', Opts1, [])
			      in  let <Forms1> =
				      %% Line 643
				      call 'erl_syntax':'flatten_form_list'
					  (Forms)
				  in  %% Line 644
				      apply 'module_1'/3
					  (Forms1, File, Opts1)
	end
'module__defaults'/0 =
    %% Line 646
    fun () ->
	%% Line 647
	[{'auto_export_vars','false'}|[{'auto_list_comp','true'}|[{'keep_unused','false'}|[{'new_guard_tests','true'}|[{'no_imports','false'}|[{'old_guard_tests','false'}|[{'quiet','false'}|[{'verbose','false'}]]]]]]]]
'module__expansions'/0 =
    %% Line 656
    fun () ->
	%% Line 657
	[{'idem',[{'auto_export_vars','false'}|[{'auto_list_comp','false'}|[{'keep_unused','true'}|[{'new_guard_tests','false'}|[{'no_imports','false'}|[{'old_guard_tests','false'}]]]]]]}]
'module_1'/3 =
    %% Line 664
    fun (_cor2,_cor1,_cor0) ->
	let <Info> =
	    %% Line 665
	    apply 'analyze_forms'/2
		(_cor2, _cor1)
	in  let <Module> =
		%% Line 666
		apply 'get_module_name'/2
		    (Info, _cor1)
	    in  let <Attrs> =
		    %% Line 667
		    apply 'get_module_attributes'/1
			(Info)
		in  let <Exports> =
			%% Line 668
			apply 'get_module_exports'/1
			    (Info)
		    in  let <Imports> =
			    %% Line 669
			    apply 'get_module_imports'/1
				(Info)
			in  let <Opts1> =
				%% Line 670
				apply 'check_imports'/3
				    (Imports, _cor0, _cor1)
			    in  let <Fs> =
				    %% Line 671
				    call 'erl_syntax':'form_list_elements'
					(_cor2)
				in  %% Line 672
				    case apply 'collect_functions'/1
					     (Fs) of
				      <{Names,Defs}> when 'true' ->
					  let <Exports1> =
					      %% Line 673
					      apply 'check_export_all'/3
						  (Attrs, Names, Exports)
					  in  let <_cor13> =
						  %% Line 674
						  call 'ordsets':'from_list'
						      (Exports1)
					      in  let <_cor12> =
						      %% Line 675
						      apply 'hidden_uses'/2
							  (Fs, Imports)
						  in  let <Roots> =
							  %% Line 674
							  call 'ordsets':'union'
							      (_cor13, _cor12)
						      in  %% Line 676
							  case apply 'visit_used'/6
								   (Names, Defs, Roots, %% Line 677
											Imports, %% Line 677
												 Module, %% Line 678
													 Opts1) of
							    <{Names1,Used,Imported,Defs1}> when 'true' ->
								let <Fs1> =
								    %% Line 679
								    apply 'update_forms'/4
									(Fs, Defs1, Imported, Opts1)
								in  let <Fs2> =
									%% Line 680
									apply 'filter_forms'/4
									    (Fs1, Names1, Used, Opts1)
								    in  let <_cor18> =
									    %% Line 681
									    call 'erl_syntax':'form_list'
										(Fs2)
									in  %% Line 681
									    apply 'rewrite'/2
										(_cor2, _cor18)
							    ( <_cor15> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor15})
							      -| ['compiler_generated'] )
							  end
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor10})
					-| ['compiler_generated'] )
				    end
'analyze_forms'/2 =
    %% Line 683
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    catch
		let <_cor2> =
		    %% Line 684
		    call 'erl_syntax_lib':'analyze_forms'
			(_cor1)
		in  %% Line 684
		    {'ok',_cor2}
	in  %% Line 684
	    case _cor3 of
	      %% Line 685
	      <{'ok',L1}> when 'true' ->
		  %% Line 686
		  L1
	      %% Line 687
	      <'syntax_error'> when 'true' ->
		  do  %% Line 688
		      apply 'report_error'/1
			  ({_cor0,0,[115|[121|[110|[116|[97|[120|[32|[101|[114|[114|[111|[114|[46]]]]]]]]]]]]]})
		      %% Line 689
		      call 'erlang':'throw'
			  ('syntax_error')
	      %% Line 690
	      <{'EXIT',R}> when 'true' ->
		  %% Line 691
		  call 'erlang':'exit'
		      (R)
	      %% Line 692
	      <R> when 'true' ->
		  %% Line 693
		  call 'erlang':'throw'
		      (R)
	    end
'get_module_name'/2 =
    %% Line 698
    fun (_cor1,_cor0) ->
	%% Line 699
	case call 'lists':'keyfind'
		 ('module', 1, _cor1) of
	  %% Line 700
	  <{'module',M}> when 'true' ->
	      %% Line 701
	      M
	  %% Line 702
	  <_cor5> when 'true' ->
	      do  %% Line 703
		  apply 'report_error'/1
		      ({_cor0,0,%% Line 704
				[99|[97|[110|[110|[111|[116|[32|[100|[101|[116|[101|[114|[109|[105|[110|[101|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
		  %% Line 705
		  call 'erlang':'exit'
		      ('error')
	end
'get_module_attributes'/1 =
    %% Line 708
    fun (_cor0) ->
	%% Line 709
	case call 'lists':'keyfind'
		 ('attributes', 1, _cor0) of
	  %% Line 710
	  <{'attributes',As}> when 'true' ->
	      %% Line 711
	      As
	  %% Line 712
	  <_cor3> when 'true' ->
	      %% Line 713
	      []
	end
'get_module_exports'/1 =
    %% Line 718
    fun (_cor0) ->
	%% Line 719
	case call 'lists':'keyfind'
		 ('exports', 1, _cor0) of
	  %% Line 720
	  <{'exports',Es}> when 'true' ->
	      %% Line 721
	      Es
	  %% Line 722
	  <_cor3> when 'true' ->
	      %% Line 723
	      []
	end
'get_module_imports'/1 =
    %% Line 728
    fun (_cor0) ->
	%% Line 729
	case call 'lists':'keyfind'
		 ('imports', 1, _cor0) of
	  %% Line 730
	  <{'imports',Is}> when 'true' ->
	      %% Line 731
	      apply 'flatten_imports'/1
		  (Is)
	  %% Line 732
	  <_cor3> when 'true' ->
	      %% Line 733
	      []
	end
'compile_attrs'/1 =
    %% Line 736
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 737
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 738
			      {'compile',T}|_cor2]> when 'true' ->
				let <_cor4> =
				    case <> of
				      <>
					  when call 'erlang':'is_list'
						(T) ->
					  T
				      <> when 'true' ->
					  [T|[]]
				    end
				in  let <_cor5> =
					%% Line 738
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 738
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 737
	    call 'lists':'append'
		(_cor6)
'flatten_imports'/1 =
    %% Line 742
    fun (_cor0) ->
	%% Line 743
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[{M,Fs}|_cor2]> when 'true' ->
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor6) ->
					  case _cor6 of
					    <[F|_cor4]> when 'true' ->
						let <_cor7> =
						    apply 'lc$^1'/1
							(_cor4)
						in  ( [{F,M}|_cor7]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor2)
					    ( <_cor6> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor6})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (Fs)
			      -| ['list_comprehension'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'check_imports'/3 =
    %% Line 745
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 746
	    call 'lists':'sort'
		(_cor2)
	in  %% Line 746
	    case apply 'check_imports_1'/1
		     (_cor3) of
	      %% Line 747
	      <'true'> when 'true' ->
		  _cor1
	      %% Line 749
	      <'false'> when 'true' ->
		  %% Line 750
		  case call 'proplists':'get_bool'
			   ('no_imports', _cor1) of
		    %% Line 751
		    <'true'> when 'true' ->
			do  %% Line 752
			    apply 'warn'/3
				({_cor0,0,%% Line 753
					  [99|[111|[110|[102|[108|[105|[99|[116|[105|[110|[103|[32|[105|[109|[112|[111|[114|[116|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110|[115|[32|[45|[32|[119|[105|[108|[108|[32|[110|[111|[116|[32|[101|[120|[112|[97|[110|[100|[32|[105|[109|[112|[111|[114|[116|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 755
																																															 [], _cor1)
			    %% Line 757
			    [{'no_imports','false'}|_cor1]
		    %% Line 758
		    <'false'> when 'true' ->
			_cor1
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'check_imports_1'/1 =
    %% Line 765
    fun (_cor0) ->
	case _cor0 of
	  <[{F,M1}|[{_cor2,M2}|_X_Is]]>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(_cor2, F)
		in  let <_cor4> =
			call 'erlang':'=/='
			    (M1, M2)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 766
	      'false'
	  %% Line 767
	  <[_cor5|Is]> when 'true' ->
	      %% Line 768
	      apply 'check_imports_1'/1
		  (Is)
	  %% Line 769
	  <[]> when 'true' ->
	      %% Line 770
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_imports_1',1}}] )
	    -| ['compiler_generated'] )
	end
'check_export_all'/3 =
    %% Line 772
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 773
	    apply 'compile_attrs'/1
		(_cor2)
	in  %% Line 773
	    case call 'lists':'member'
		     ('export_all', _cor3) of
	      %% Line 774
	      <'true'> when 'true' ->
		  let <_cor4> =
		      %% Line 775
		      call 'sets':'to_list'
			  (_cor1)
		  in  %% Line 775
		      call 'erlang':'++'
			  (_cor0, _cor4)
	      %% Line 776
	      <'false'> when 'true' ->
		  _cor0
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'filter_forms'/4 =
    %% Line 780
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 781
	    case call 'proplists':'get_bool'
		     ('keep_unused', _cor0) of
	      %% Line 782
	      <'true'> when 'true' ->
		  _cor2
	      %% Line 784
	      <'false'> when 'true' ->
		  _cor1
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	in  %% Line 787
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor9) ->
			  case _cor9 of
			    <[F|_cor8]> when 'true' ->
				( case apply 'keep_form'/3
					   (F, _cor5, _cor0) of
				    <'true'> when 'true' ->
					let <_cor10> =
					    apply 'lc$^0'/1
						(_cor8)
					in  ( [F|_cor10]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor8)
				      -| ['compiler_generated'] )
				    ( <_cor11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor11})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor9> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor9})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor3)
	      -| ['list_comprehension'] )
'keep_form'/3 =
    %% Line 789
    fun (_cor2,_cor1,_cor0) ->
	%% Line 790
	case call 'erl_syntax':'type'
		 (_cor2) of
	  %% Line 791
	  <'function'> when 'true' ->
	      let <N> =
		  %% Line 792
		  call 'erl_syntax_lib':'analyze_function'
		      (_cor2)
	      in  %% Line 793
		  case call 'sets':'is_element'
			   (N, _cor1) of
		    %% Line 794
		    <'false'> when 'true' ->
			do  %% Line 795
			    apply 'report_removed_def'/4
				([102|[117|[110|[99|[116|[105|[111|[110]]]]]]]], N, _cor2, _cor0)
			    %% Line 796
			    'false'
		    %% Line 797
		    <'true'> when 'true' ->
			%% Line 798
			'true'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 800
	  <'rule'> when 'true' ->
	      let <N> =
		  %% Line 801
		  call 'erl_syntax_lib':'analyze_rule'
		      (_cor2)
	      in  %% Line 802
		  case call 'sets':'is_element'
			   (N, _cor1) of
		    %% Line 803
		    <'false'> when 'true' ->
			do  %% Line 804
			    apply 'report_removed_def'/4
				([114|[117|[108|[101]]]], N, _cor2, _cor0)
			    %% Line 805
			    'false'
		    %% Line 806
		    <'true'> when 'true' ->
			%% Line 807
			'true'
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 809
	  <'attribute'> when 'true' ->
	      %% Line 810
	      case call 'erl_syntax_lib':'analyze_attribute'
		       (_cor2) of
		%% Line 811
		<{'file',_cor12}> when 'true' ->
		    %% Line 812
		    'false'
		%% Line 813
		<_cor13> when 'true' ->
		    %% Line 814
		    'true'
	      end
	  %% Line 816
	  <'error_marker'> when 'true' ->
	      %% Line 817
	      'false'
	  %% Line 818
	  <'warning_marker'> when 'true' ->
	      %% Line 819
	      'false'
	  %% Line 820
	  <'eof_marker'> when 'true' ->
	      %% Line 821
	      'false'
	  %% Line 822
	  <_cor14> when 'true' ->
	      %% Line 823
	      'true'
	end
'report_removed_def'/4 =
    %% Line 826
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type,{N,A},Form,Opts> when 'true' ->
	      let <File> =
		  %% Line 827
		  call 'proplists':'get_value'
		      ('file', Opts, [])
	      in  let <_cor5> =
		      %% Line 828
		      call 'erl_syntax':'get_pos'
			  (Form)
		  in  %% Line 828
		      apply 'report'/3
			  ({File,_cor5,%% Line 829
				       [114|[101|[109|[111|[118|[105|[110|[103|[32|[117|[110|[117|[115|[101|[100|[32|[126|[115|[32|[96|[126|[119|[47|[126|[119|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 830
																								    [Type|[N|[A|[]]]], %% Line 830
																										       Opts)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'report_removed_def',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_functions'/1 =
    %% Line 832
    fun (_cor0) ->
	let <_cor14> =
	    %% Line 834
	    ( fun (_cor11,_cor10) ->
		  case <_cor11,_cor10> of
		    <F,{Names,Defs}> when 'true' ->
			%% Line 835
			case call 'erl_syntax':'type'
				 (F) of
			  %% Line 836
			  <'function'> when 'true' ->
			      let <N> =
				  %% Line 837
				  call 'erl_syntax_lib':'analyze_function'
				      (F)
			      in  let <_cor5> =
				      %% Line 838
				      call 'sets':'add_element'
					  (N, Names)
				  in  let <_cor4> =
					  %% Line 839
					  call 'dict':'store'
					      (N, {F,[]}, Defs)
				      in  %% Line 838
					  {_cor5,_cor4}
			  %% Line 840
			  <'rule'> when 'true' ->
			      let <N> =
				  %% Line 841
				  call 'erl_syntax_lib':'analyze_rule'
				      (F)
			      in  let <_cor8> =
				      %% Line 842
				      call 'sets':'add_element'
					  (N, Names)
				  in  let <_cor7> =
					  %% Line 843
					  call 'dict':'store'
					      (N, {F,[]}, Defs)
				      in  %% Line 842
					  {_cor8,_cor7}
			  %% Line 844
			  <_cor16> when 'true' ->
			      %% Line 845
			      {Names,Defs}
			end
		    ( <_cor13,_cor12> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor13,_cor12})
			    -| [{'function_name',{'-collect_functions/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-collect_functions/1-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 848
		call 'sets':'new'
		    ()
	    in  let <_cor1> =
		    %% Line 848
		    call 'dict':'new'
			()
		in  %% Line 833
		    call 'lists':'foldl'
			(_cor14, %% Line 848
				 {_cor2,_cor1}, _cor0)
'update_forms'/4 =
    %% Line 851
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[F|Fs],Defs,Imports,Opts> when 'true' ->
	      %% Line 852
	      case call 'erl_syntax':'type'
		       (F) of
		%% Line 853
		<'function'> when 'true' ->
		    let <N> =
			%% Line 854
			call 'erl_syntax_lib':'analyze_function'
			    (F)
		    in  %% Line 855
			case call 'dict':'fetch'
				 (N, Defs) of
			  <{F1,Fs1}> when 'true' ->
			      let <_cor7> =
				  %% Line 856
				  call 'lists':'reverse'
				      (Fs1)
			      in  let <_cor6> =
				      %% Line 856
				      apply 'update_forms'/4
					  (Fs, Defs, Imports, %% Line 857
							      Opts)
				  in  %% Line 856
				      [F1|call 'erlang':'++'
					      (_cor7, _cor6)]
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		%% Line 858
		<'rule'> when 'true' ->
		    let <N> =
			%% Line 859
			call 'erl_syntax_lib':'analyze_rule'
			    (F)
		    in  %% Line 860
			case call 'dict':'fetch'
				 (N, Defs) of
			  <{F1,Fs1}> when 'true' ->
			      let <_cor11> =
				  %% Line 861
				  call 'lists':'reverse'
				      (Fs1)
			      in  let <_cor10> =
				      %% Line 861
				      apply 'update_forms'/4
					  (Fs, Defs, Imports, %% Line 862
							      Opts)
				  in  %% Line 861
				      [F1|call 'erlang':'++'
					      (_cor11, _cor10)]
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		%% Line 863
		<'attribute'> when 'true' ->
		    let <_cor12> =
			%% Line 864
			apply 'update_attribute'/3
			    (F, Imports, Opts)
		    in  let <_cor13> =
			    %% Line 865
			    apply 'update_forms'/4
				(Fs, Defs, Imports, Opts)
			in  %% Line 864
			    [_cor12|_cor13]
		%% Line 866
		<_cor20> when 'true' ->
		    let <_cor14> =
			%% Line 867
			apply 'update_forms'/4
			    (Fs, Defs, Imports, Opts)
		    in  %% Line 867
			[F|_cor14]
	      end
	  %% Line 869
	  <[],_cor21,_cor22,_cor23> when 'true' ->
	      %% Line 870
	      []
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'update_forms',4}}] )
	    -| ['compiler_generated'] )
	end
'update_attribute'/3 =
    %% Line 872
    fun (_cor2,_cor1,_cor0) ->
	%% Line 873
	case call 'erl_syntax_lib':'analyze_attribute'
		 (_cor2) of
	  %% Line 874
	  <{'import',{M,Ns}}> when 'true' ->
	      let <_cor8> =
		  %% Line 875
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[N|_cor4]> when 'true' ->
				      %% Line 876
				      ( case call 'sets':'is_element'
						 (N, _cor1) of
					  <'true'> when 'true' ->
					      let <_cor6> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [N|_cor6]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor4)
					    -| ['compiler_generated'] )
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor7})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Ns)
		    -| ['list_comprehension'] )
	      in  let <Ns1> =
		      %% Line 875
		      call 'ordsets':'from_list'
			  (_cor8)
		  in  let <_cor10> =
			  %% Line 877
			  call 'ordsets':'from_list'
			      (Ns)
		      in  do  %% Line 877
			      case call 'ordsets':'subtract'
				       (_cor10, Ns1) of
				%% Line 878
				<[]> when 'true' ->
				    'ok'
				%% Line 880
				<Names> when 'true' ->
				    let <File> =
					%% Line 881
					call 'proplists':'get_value'
					    ('file', _cor0, [])
				    in  let <_cor18> =
					    %% Line 882
					    call 'erl_syntax':'get_pos'
						(_cor2)
					in  let <_cor17> =
						%% Line 884
						( letrec
						      'lc$^1'/1 =
							  fun (_cor14) ->
							      case _cor14 of
								<[%% Line 885
								  {N,A}|_cor13]> when 'true' ->
								    let <_cor15> =
									call 'io_lib':'fwrite'
									    ([10|[9|[96|[126|[119|[58|[126|[119|[47|[126|[119|[39]]]]]]]]]]]], [M|[N|[A|[]]]])
								    in  let <_cor16> =
									    %% Line 885
									    apply 'lc$^1'/1
										(_cor13)
									in  ( [_cor15|_cor16]
									      -| ['compiler_generated'] )
								( <[_cor12|_cor13]> when 'true' ->
								      %% Line 885
								      apply 'lc$^1'/1
									  (_cor13)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor14> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor14})
									-| [{'function_name',{'lc$^1',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^1'/1
							  (%% Line 885
							   Names)
						  -| ['list_comprehension'] )
					    in  %% Line 882
						apply 'report'/3
						    ({File,_cor18,%% Line 883
								  [114|[101|[109|[111|[118|[105|[110|[103|[32|[117|[110|[117|[115|[101|[100|[32|[105|[109|[112|[111|[114|[116|[115|[58|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 884
																											     [_cor17|%% Line 885
																												     []], _cor0)
			      end
			      let <_cor25> =
				  %% Line 887
				  ( letrec
					'lc$^2'/1 =
					    fun (_cor22) ->
						case _cor22 of
						  <[N|_cor21]> when 'true' ->
						      let <_cor23> =
							  apply 'make_fname'/1
							      (N)
						      in  let <_cor24> =
							      apply 'lc$^2'/1
								  (_cor21)
							  in  ( [_cor23|_cor24]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor22> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor22})
							  -| [{'function_name',{'lc$^2',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^2'/1
					    (Ns1)
				    -| ['list_comprehension'] )
			      in  %% Line 888
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor25,
					       []) ->
					%% Line 890
					call 'erl_syntax':'warning_marker'
					    ('deleted')
				    %% Line 891
				    <> when 'true' ->
					let <_cor29> =
					    %% Line 892
					    call 'erl_syntax':'atom'
						('import')
					in  let <_cor27> =
						%% Line 893
						call 'erl_syntax':'atom'
						    (M)
					    in  let <_cor28> =
						    %% Line 894
						    call 'erl_syntax':'list'
							(_cor25)
						in  let <F1> =
							%% Line 892
							call 'erl_syntax':'attribute'
							    (_cor29, %% Line 893
								     [_cor27|%% Line 894
									     [_cor28|[]]])
						    in  %% Line 895
							apply 'rewrite'/2
							    (_cor2, F1)
				  end
	  %% Line 897
	  <{'export',Ns}> when 'true' ->
	      let <_cor37> =
		  %% Line 898
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor34) ->
				case _cor34 of
				  <[N|_cor32]> when 'true' ->
				      let <_cor35> =
					  apply 'make_fname'/1
					      (N)
				      in  let <_cor36> =
					      apply 'lc$^3'/1
						  (_cor32)
					  in  ( [_cor35|_cor36]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor34> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor34})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor33> =
			    call 'ordsets':'from_list'
				(Ns)
			in  apply 'lc$^3'/1
				(_cor33)
		    -| ['list_comprehension'] )
	      in  let <_cor40> =
		      %% Line 899
		      call 'erl_syntax':'atom'
			  ('export')
		  in  let <_cor39> =
			  %% Line 900
			  call 'erl_syntax':'list'
			      (_cor37)
		      in  let <F1> =
			      %% Line 899
			      call 'erl_syntax':'attribute'
				  (_cor40, %% Line 900
					   [_cor39|[]])
			  in  %% Line 901
			      apply 'rewrite'/2
				  (_cor2, F1)
	  %% Line 902
	  <_cor46> when 'true' ->
	      _cor2
	end
'make_fname'/1 =
    %% Line 906
    fun (_cor0) ->
	case _cor0 of
	  <{F,A}> when 'true' ->
	      let <_cor2> =
		  %% Line 907
		  call 'erl_syntax':'atom'
		      (F)
	      in  let <_cor1> =
		      %% Line 908
		      call 'erl_syntax':'integer'
			  (A)
		  in  %% Line 907
		      call 'erl_syntax':'arity_qualifier'
			  (_cor2, _cor1)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'make_fname',1}}] )
	    -| ['compiler_generated'] )
	end
'hidden_uses'/2 =
    %% Line 910
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 911
	    ( fun (_cor4,_cor3) ->
		  %% Line 912
		  case call 'erl_syntax':'type'
			   (_cor4) of
		    %% Line 913
		    <'attribute'> when 'true' ->
			%% Line 914
			apply 'hidden_uses_1'/2
			    (_cor4, _cor3)
		    %% Line 915
		    <_cor17> when 'true' ->
			_cor3
		  end
	      -| [{'id',{0,0,'-hidden_uses/2-fun-0-'}}] )
	in  let <Used> =
		%% Line 911
		call 'lists':'foldl'
		    (_cor7, %% Line 919
			    [], _cor1)
	    in  let <_cor13> =
		    %% Line 920
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor11) ->
				  case _cor11 of
				    <[{F,_X_M}|_cor10]> when 'true' ->
					let <_cor12> =
					    apply 'lc$^0'/1
						(_cor10)
					in  ( [F|_cor12]
					      -| ['compiler_generated'] )
				    ( <[_cor9|_cor10]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor10)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor11> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor0)
		      -| ['list_comprehension'] )
		in  let <_cor14> =
			%% Line 920
			call 'ordsets':'from_list'
			    (_cor13)
		    in  %% Line 920
			call 'ordsets':'subtract'
			    (Used, _cor14)
'hidden_uses_1'/2 =
    %% Line 922
    fun (_cor1,_cor0) ->
	%% Line 923
	call 'erl_syntax_lib':'fold'
	    (( 'hidden_uses_2'/2
	       -| [{'id',{0,0,'-hidden_uses_1/2-fun-0-'}}] ), _cor0, _cor1)
'hidden_uses_2'/2 =
    %% Line 925
    fun (_cor1,_cor0) ->
	%% Line 926
	case call 'erl_syntax':'type'
		 (_cor1) of
	  %% Line 927
	  <'application'> when 'true' ->
	      let <F> =
		  %% Line 928
		  call 'erl_syntax':'application_operator'
		      (_cor1)
	      in  %% Line 929
		  case call 'erl_syntax':'type'
			   (F) of
		    %% Line 930
		    <'atom'> when 'true' ->
			let <As> =
			    %% Line 931
			    call 'erl_syntax':'application_arguments'
				(_cor1)
			in  let <_cor5> =
				%% Line 932
				call 'erl_syntax':'atom_value'
				    (F)
			    in  let <_cor4> =
				    %% Line 932
				    call 'erlang':'length'
					(As)
				in  let <N> = {_cor5,_cor4}
				    in  %% Line 933
					case apply 'is_auto_imported'/1
						 (N) of
					  %% Line 934
					  <'true'> when 'true' ->
					      _cor0
					  %% Line 936
					  <'false'> when 'true' ->
					      %% Line 937
					      call 'ordsets':'add_element'
						  (N, _cor0)
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor7})
					    -| ['compiler_generated'] )
					end
		    %% Line 939
		    <_cor18> when 'true' ->
			_cor0
		  end
	  %% Line 942
	  <'implicit_fun'> when 'true' ->
	      let <F> =
		  %% Line 943
		  call 'erl_syntax':'implicit_fun_name'
		      (_cor1)
	      in  let <_cor11> =
		      catch
			  let <_cor10> =
			      %% Line 944
			      call 'erl_syntax_lib':'analyze_function_name'
				  (F)
			  in  %% Line 944
			      {'ok',_cor10}
		  in  %% Line 944
		      case _cor11 of
			%% Line 945
			<{'ok',N = {Name,Arity}}>
			    when let <_cor12> =
				  %% Line 946
				  call 'erlang':'is_atom'
				      (Name)
			      in  let <_cor13> =
				      %% Line 946
				      call 'erlang':'is_integer'
					  (Arity)
				  in  %% Line 946
				      call 'erlang':'and'
					  (_cor12, _cor13) ->
			    %% Line 947
			    call 'ordsets':'add_element'
				(N, _cor0)
			%% Line 948
			<_cor19> when 'true' ->
			    _cor0
		      end
	  %% Line 951
	  <_cor20> when 'true' ->
	      _cor0
	end
'visit_used'/6 =
    %% Line 980
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <File> =
	    %% Line 981
	    call 'proplists':'get_value'
		('file', _cor0, [])
	in  let <NoImports> =
		%% Line 982
		call 'proplists':'get_bool'
		    ('no_imports', _cor0)
	    in  let <Rename> =
		    %% Line 983
		    call 'proplists':'append_values'
			('rename', _cor0)
		in  let <_cor26> =
			%% Line 984
			call 'sets':'new'
			    ()
		    in  let <_cor25> =
			    %% Line 987
			    call 'dict':'from_list'
				(_cor2)
			in  let <_cor24> =
				%% Line 988
				apply 'verbosity'/1
				    (_cor0)
			    in  let <_cor23> =
				    %% Line 990
				    call 'proplists':'get_bool'
					('spawn_funs', _cor0)
				in  let <_cor22> =
					%% Line 991
					call 'proplists':'get_bool'
					    ('auto_list_comp', _cor0)
				    in  let <_cor21> =
					    %% Line 992
					    call 'proplists':'get_bool'
						('auto_export_vars', _cor0)
					in  let <_cor20> =
						%% Line 994
						call 'proplists':'get_bool'
						    ('new_guard_tests', _cor0)
					    in  let <_cor19> =
						    %% Line 996
						    call 'proplists':'get_bool'
							('old_guard_tests', _cor0)
						in  let <_cor18> =
							%% Line 998
							call 'sets':'from_list'
							    (_cor3)
						    in  let <_cor17> =
							    %% Line 999
							    call 'sets':'new'
								()
							in  let <_cor15> =
								%% Line 1001
								( letrec
								      'lc$^0'/1 =
									  fun (_cor11) ->
									      case _cor11 of
										<[X = {F1,F2}|_cor10]> when 'true' ->
										    %% Line 1002
										    ( case apply 'is_remote_name'/1
											       (F1) of
											<'true'> when 'true' ->
											    %% Line 1003
											    ( case apply 'is_atom_pair'/1
												       (F2) of
												<'true'> when 'true' ->
												    let <_cor12> =
													apply 'lc$^0'/1
													    (_cor10)
												    in  ( [X|_cor12]
													  -| ['compiler_generated'] )
												( <'false'> when 'true' ->
												      apply 'lc$^0'/1
													  (_cor10)
												  -| ['compiler_generated'] )
												( <_cor13> when 'true' ->
												      primop 'match_fail'
													  ({'case_clause',_cor13})
												  -| ['compiler_generated'] )
											      end
											      -| ['list_comprehension'] )
											( <'false'> when 'true' ->
											      apply 'lc$^0'/1
												  (_cor10)
											  -| ['compiler_generated'] )
											( <_cor14> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor14})
											  -| ['compiler_generated'] )
										      end
										      -| ['list_comprehension'] )
										( <[_cor9|_cor10]> when 'true' ->
										      apply 'lc$^0'/1
											  (_cor10)
										  -| ['compiler_generated'] )
										<[]> when 'true' ->
										    []
										( <_cor11> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor11})
											-| [{'function_name',{'lc$^0',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  apply 'lc$^0'/1
									  (Rename)
								  -| ['list_comprehension'] )
							    in  let <_cor16> =
								    %% Line 1001
								    call 'dict':'from_list'
									(_cor15)
								in  %% Line 984
								    apply 'loop'/5
									(_cor3, _cor26, _cor4, %% Line 985
											       {'env',File,_cor1,'undefined',_cor25,'normal',_cor24,'false',%% Line 989
																			    NoImports,_cor23,_cor22,_cor21,_cor20,_cor19}, %% Line 998
																									   {'st','undefined',_cor18,_cor17,'undefined',_cor5,[],_cor16})
'loop'/5 =
    %% Line 1005
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[F|Work],Seen0,Defs0,Env,St0> when 'true' ->
	      %% Line 1006
	      case call 'sets':'is_element'
		       (F, Seen0) of
		%% Line 1007
		<'true'> when 'true' ->
		    %% Line 1008
		    apply 'loop'/5
			(Work, Seen0, Defs0, Env, St0)
		%% Line 1009
		<'false'> when 'true' ->
		    let <Seen1> =
			%% Line 1010
			call 'sets':'add_element'
			    (F, Seen0)
		    in  %% Line 1011
			case call 'dict':'find'
				 (F, Defs0) of
			  %% Line 1012
			  <{'ok',{Form,Fs}}> when 'true' ->
			      let <Vars> =
				  %% Line 1013
				  call 'erl_syntax_lib':'variables'
				      (Form)
			      in  let <Form1> =
				      %% Line 1014
				      call 'erl_syntax_lib':'annotate_bindings'
					  (Form, [])
				  in  %% Line 1015
				      case Env of
					<{'env',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57}> when 'true' ->
					    let <_cor14> =
						call 'erlang':'setelement'
						    (4, Env, F)
					    in  let <_rec4> =
						    %% Line 1017
						    call 'sets':'new'
							()
						in  %% Line 1019
						    case St0 of
						      <{'st',_rec6,_rec7,_rec8,_rec9,_rec10,_rec11,_rec12}> when 'true' ->
							  let <_cor11> =
							      {'st',1,_rec4,_rec8,Vars,_rec10,[],_rec12}
							  in  case apply 'visit'/3
								       (Form1, _cor14, _cor11) of
								<{Form2,St1}> when 'true' ->
								    %% Line 1020
								    ( case St1 of
									( <( {'st',_cor60,_cor61,_cor62,_cor63,_cor64,_rec13,_cor65}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <Fs1> =
										  call 'erlang':'++'
										      (_rec13, Fs)
									      in  let <Defs1> =
										      %% Line 1021
										      call 'dict':'store'
											  (F, {Form2,Fs1}, Defs0)
										  in  let <_cor23> =
											  %% Line 1023
											  call 'sets':'to_list'
											      (_cor61)
										      in  let <Work1> =
											      %% Line 1023
											      call 'erlang':'++'
												  (_cor23, Work)
											  in  let <_rec15> =
												  %% Line 1024
												  call 'sets':'union'
												      (_cor61, _rec7)
											      in  let <_cor30> =
												      %% Line 1024
												      call 'erlang':'setelement'
													  (3, St1, _rec15)
												  in  %% Line 1025
												      apply 'loop'/5
													  (Work1, Seen1, Defs1, Env, _cor30)
									  -| ['compiler_generated'] )
									( <_cor66> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','st'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								( <_cor15> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor15})
								  -| ['compiler_generated'] )
							      end
						      ( <_cor59> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','st'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
					( <_cor58> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','env'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			  %% Line 1026
			  <'error'> when 'true' ->
			      %% Line 1028
			      apply 'loop'/5
				  (Work, Seen1, Defs0, Env, St0)
			  ( <_cor32> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor32})
			    -| ['compiler_generated'] )
			end
		( <_cor33> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1031
	  <[],_cor89,Defs,_cor90,St> when 'true' ->
	      %% Line 1032
	      ( case St of
		  ( <( {'st',_cor91,_cor92,_cor93,_cor94,_rec18,_cor95,_cor96}
		       -| ['compiler_generated'] )> when 'true' ->
			{_rec18,_cor92,_cor93,Defs}
		    -| ['compiler_generated'] )
		  ( <_cor97> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','st'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor44,_cor43,_cor42,_cor41,_cor40> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor44,_cor43,_cor42,_cor41,_cor40})
		  -| [{'function_name',{'loop',5}}] )
	    -| ['compiler_generated'] )
	end
'visit'/3 =
    %% Line 1034
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1035
	case call 'erl_syntax':'type'
		 (_cor2) of
	  %% Line 1036
	  <'application'> when 'true' ->
	      %% Line 1037
	      apply 'visit_application'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1038
	  <'infix_expr'> when 'true' ->
	      %% Line 1039
	      apply 'visit_infix_expr'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1040
	  <'prefix_expr'> when 'true' ->
	      %% Line 1041
	      apply 'visit_prefix_expr'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1042
	  <'implicit_fun'> when 'true' ->
	      %% Line 1043
	      apply 'visit_implicit_fun'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1044
	  <'clause'> when 'true' ->
	      %% Line 1045
	      apply 'visit_clause'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1046
	  <'list_comp'> when 'true' ->
	      %% Line 1047
	      apply 'visit_list_comp'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1048
	  <'match_expr'> when 'true' ->
	      %% Line 1049
	      apply 'visit_match_expr'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1050
	  <_cor7> when 'true' ->
	      %% Line 1051
	      apply 'visit_other'/3
		  (_cor2, _cor1, _cor0)
	end
'visit_other'/3 =
    %% Line 1054
    fun (_cor2,_cor1,_cor0) ->
	let <F> =
	    %% Line 1055
	    ( fun (_cor4,_cor3) ->
		  apply 'visit'/3
		      (_cor4, _cor1, _cor3)
	      -| [{'id',{0,0,'-visit_other/3-fun-0-'}}] )
	in  %% Line 1056
	    call 'erl_syntax_lib':'mapfold_subtrees'
		(F, _cor0, _cor2)
'visit_list'/3 =
    %% Line 1058
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1059
	    ( fun (_cor4,_cor3) ->
		  apply 'visit'/3
		      (_cor4, _cor1, _cor3)
	      -| [{'id',{0,0,'-visit_list/3-fun-0-'}}] )
	in  %% Line 1059
	    call 'lists':'mapfoldl'
		(_cor7, _cor0, _cor2)
'visit_implicit_fun'/3 =
    %% Line 1061
    fun (_cor2,_cor1,_cor0) ->
	let <F> =
	    %% Line 1062
	    call 'erl_syntax':'implicit_fun_name'
		(_cor2)
	in  let <_cor5> =
		catch
		    let <_cor4> =
			%% Line 1063
			call 'erl_syntax_lib':'analyze_function_name'
			    (F)
		    in  %% Line 1063
			{'ok',_cor4}
	    in  %% Line 1063
		case _cor5 of
		  %% Line 1064
		  <{'ok',N = {Name,Arity}}>
		      when let <_cor6> =
			    %% Line 1065
			    call 'erlang':'is_atom'
				(Name)
			in  let <_cor7> =
				%% Line 1065
				call 'erlang':'is_integer'
				    (Arity)
			    in  %% Line 1065
				call 'erlang':'and'
				    (_cor6, _cor7) ->
		      %% Line 1066
		      ( case _cor0 of
			  ( <( {'st',_cor18,_rec21,_cor19,_cor20,_cor21,_cor22,_cor23}
			       -| ['compiler_generated'] )> when 'true' ->
				let <Used> =
				    call 'sets':'add_element'
					(N, _rec21)
				in  let <_cor13> =
					%% Line 1067
					call 'erlang':'setelement'
					    (3, _cor0, Used)
				    in  %% Line 1067
					{_cor2,_cor13}
			    -| ['compiler_generated'] )
			  ( <_cor24> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','st'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 1068
		  <_cor33> when 'true' ->
		      %% Line 1070
		      {_cor2,_cor0}
		end
'visit_clause'/3 =
    %% Line 1073
    fun (_cor2,_cor1,_cor0) ->
	let <Ps> =
	    %% Line 1075
	    call 'erl_syntax':'clause_patterns'
		(_cor2)
	in  let <_cor8> =
		%% Line 1076
		case call 'erl_syntax':'clause_guard'
			 (_cor2) of
		  %% Line 1077
		  <'none'> when 'true' ->
		      %% Line 1078
		      {'none',_cor0}
		  %% Line 1079
		  <G0> when 'true' ->
		      %% Line 1080
		      case _cor1 of
			<{'env',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
			    let <_cor6> =
				call 'erlang':'setelement'
				    (6, _cor1, 'guard_test')
			    in  apply 'visit'/3
				    (G0, _cor6, _cor0)
			( <_cor30> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','env'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		end
	    in  %% Line 1076
		case _cor8 of
		  <{G,St1}> when 'true' ->
		      let <_cor10> =
			  %% Line 1082
			  call 'erl_syntax':'clause_body'
			      (_cor2)
		      in  %% Line 1082
			  case apply 'visit_list'/3
				   (_cor10, _cor1, St1) of
			    <{B,St2}> when 'true' ->
				let <_cor12> =
				    %% Line 1083
				    call 'erl_syntax':'clause'
					(Ps, G, B)
				in  let <_cor13> =
					%% Line 1083
					apply 'rewrite'/2
					    (_cor2, _cor12)
				    in  %% Line 1083
					{_cor13,St2}
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor9> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor9})
		    -| ['compiler_generated'] )
		end
'visit_infix_expr'/3 =
    %% Line 1085
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tree,{'env',_cor7,_cor8,_cor9,_cor10,'guard_test',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18},St0> when 'true' ->
	      let <_cor3> =
		  call 'dict':'new'
		      ()
	      in  %% Line 1087
		  apply 'visit_other'/3
		      (Tree, {'env','undefined','undefined','undefined',_cor3,'guard_expr',1,'false','false','false','true','false','true','false'}, St0)
	  %% Line 1088
	  <Tree,Env,St0> when 'true' ->
	      %% Line 1089
	      apply 'visit_other'/3
		  (Tree, Env, St0)
	end
'visit_prefix_expr'/3 =
    %% Line 1091
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tree,{'env',_cor7,_cor8,_cor9,_cor10,'guard_test',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18},St0> when 'true' ->
	      let <_cor3> =
		  call 'dict':'new'
		      ()
	      in  %% Line 1093
		  apply 'visit_other'/3
		      (Tree, {'env','undefined','undefined','undefined',_cor3,'guard_expr',1,'false','false','false','true','false','true','false'}, St0)
	  %% Line 1094
	  <Tree,Env,St0> when 'true' ->
	      %% Line 1095
	      apply 'visit_other'/3
		  (Tree, Env, St0)
	end
'visit_application'/3 =
    %% Line 1097
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1098
	    case _cor1 of
	      %% Line 1099
	      <{'env',_cor16,_cor17,_cor18,_cor19,'guard_test',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
		  %% Line 1100
		  call 'erlang':'setelement'
		      (6, _cor1, 'guard_expr')
	      %% Line 1101
	      <_cor42> when 'true' ->
		  _cor1
	    end
	in  let <_cor8> =
		%% Line 1104
		call 'erl_syntax':'application_operator'
		    (_cor2)
	    in  %% Line 1104
		case apply 'visit'/3
			 (_cor8, _cor6, _cor0) of
		  <{F,St1}> when 'true' ->
		      let <_cor10> =
			  %% Line 1105
			  call 'erl_syntax':'application_arguments'
			      (_cor2)
		      in  %% Line 1105
			  case apply 'visit_list'/3
				   (_cor10, _cor6, %% Line 1106
						   St1) of
			    <{As,St2}> when 'true' ->
				%% Line 1107
				case call 'erl_syntax':'type'
					 (F) of
				  %% Line 1108
				  <'atom'> when 'true' ->
				      %% Line 1109
				      apply 'visit_atom_application'/5
					  (F, As, _cor2, _cor1, St2)
				  %% Line 1110
				  <'implicit_fun'> when 'true' ->
				      %% Line 1111
				      apply 'visit_named_fun_application'/5
					  (F, As, _cor2, _cor1, St2)
				  %% Line 1112
				  <'fun_expr'> when 'true' ->
				      %% Line 1113
				      apply 'visit_lambda_application'/5
					  (F, As, _cor2, _cor1, St2)
				  %% Line 1114
				  <_cor43> when 'true' ->
				      %% Line 1115
				      apply 'visit_nonlocal_application'/5
					  (F, As, _cor2, _cor1, St2)
				end
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor9> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor9})
		    -| ['compiler_generated'] )
		end
'visit_application_final'/4 =
    %% Line 1118
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1119
	    call 'erl_syntax':'application'
		(_cor3, _cor2)
	in  let <_cor5> =
		%% Line 1119
		apply 'rewrite'/2
		    (_cor1, _cor4)
	    in  %% Line 1119
		{_cor5,_cor0}
'revisit_application'/5 =
    %% Line 1121
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1122
	    call 'erl_syntax':'application'
		(_cor4, _cor3)
	in  let <_cor6> =
		%% Line 1122
		apply 'rewrite'/2
		    (_cor2, _cor5)
	    in  %% Line 1122
		apply 'visit'/3
		    (_cor6, _cor1, _cor0)
'visit_atom_application'/5 =
    %% Line 1124
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <F,As,Tree,Env = {'env',_cor38,_cor39,_cor40,_cor41,'guard_test',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49},%% Line 1125
																    St0> when 'true' ->
	      let <N> =
		  %% Line 1126
		  call 'erl_syntax':'atom_value'
		      (F)
	      in  let <A> =
		      %% Line 1127
		      call 'erlang':'length'
			  (As)
		  in  let <_cor13> =
			  %% Line 1128
			  case _cor49 of
			    %% Line 1129
			    <'true'> when 'true' ->
				%% Line 1130
				apply 'reverse_guard_test'/2
				    (N, A)
			    %% Line 1131
			    <'false'> when 'true' ->
				%% Line 1132
				case _cor48 of
				  %% Line 1133
				  <'true'> when 'true' ->
				      %% Line 1134
				      apply 'rewrite_guard_test'/2
					  (N, A)
				  %% Line 1135
				  <'false'> when 'true' ->
				      %% Line 1136
				      N
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor11})
				    -| ['compiler_generated'] )
				end
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
		      in  do  %% Line 1139
			      case <> of
				<>
				    when call 'erlang':'=/='
					  (_cor13,
					   N) ->
				    let <_cor17> =
					%% Line 1140
					call 'erl_syntax':'get_pos'
					    (F)
				    in  %% Line 1140
					apply 'report'/3
					    ({_cor38,_cor17,%% Line 1141
							    [99|[104|[97|[110|[103|[105|[110|[103|[32|[103|[117|[97|[114|[100|[32|[116|[101|[115|[116|[32|[96|[126|[119|[39|[32|[116|[111|[32|[96|[126|[119|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1142
																														       [N|[_cor13|[]]], _cor42)
				%% Line 1143
				<> when 'true' ->
				    'ok'
			      end
			      let <_cor20> =
				  %% Line 1147
				  call 'erl_syntax':'atom'
				      (_cor13)
			      in  let <F1> =
				      %% Line 1147
				      apply 'rewrite'/2
					  (F, _cor20)
				  in  %% Line 1148
				      apply 'visit_application_final'/4
					  (F1, As, Tree, St0)
	  %% Line 1149
	  <F,As,Tree,{'env',_cor102,_cor103,_cor104,_cor105,'guard_expr',_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113},St0> when 'true' ->
	      %% Line 1151
	      apply 'visit_application_final'/4
		  (F, As, Tree, St0)
	  %% Line 1152
	  <F,As,Tree,Env,St0> when 'true' ->
	      let <_cor23> =
		  %% Line 1153
		  call 'erl_syntax':'atom_value'
		      (F)
	      in  let <_cor22> =
		      %% Line 1153
		      call 'erlang':'length'
			  (As)
		  in  let <N> = {_cor23,_cor22}
		      in  %% Line 1154
			  case apply 'is_auto_imported'/1
				   (N) of
			    %% Line 1155
			    <'true'> when 'true' ->
				%% Line 1156
				apply 'visit_bif_call'/6
				    (N, F, As, Tree, Env, St0)
			    %% Line 1157
			    <'false'> when 'true' ->
				%% Line 1158
				case apply 'is_imported'/2
					 (N, Env) of
				  %% Line 1159
				  <'true'> when 'true' ->
				      %% Line 1160
				      apply 'visit_import_application'/6
					  (N, F, As, Tree, Env, St0)
				  %% Line 1161
				  <'false'> when 'true' ->
				      %% Line 1162
				      ( case St0 of
					  ( <( {'st',_cor114,_rec29,_cor115,_cor116,_cor117,_cor118,_cor119}
					       -| ['compiler_generated'] )> when 'true' ->
						let <Used> =
						    call 'sets':'add_element'
							(N, _rec29)
						in  let <_cor30> =
							%% Line 1164
							call 'erlang':'setelement'
							    (3, St0, Used)
						    in  %% Line 1163
							apply 'visit_application_final'/4
							    (F, As, Tree, _cor30)
					    -| ['compiler_generated'] )
					  ( <_cor120> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','st'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <_cor31> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor31})
				    -| ['compiler_generated'] )
				end
			    ( <_cor32> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor32})
			      -| ['compiler_generated'] )
			  end
	end
'visit_import_application'/6 =
    %% Line 1168
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name = {N,A},F,As,Tree,Env,St0> when 'true' ->
	      %% Line 1169
	      ( case Env of
		  ( <( {'env',_cor36,_cor37,_cor38,_rec31,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}
		       -| ['compiler_generated'] )> when 'true' ->
			let <M> =
			    call 'dict':'fetch'
				(Name, _rec31)
			in  let <_cor12> =
				%% Line 1170
				case _cor42 of
				  %% Line 1171
				  <'true'> when 'true' ->
				      %% Line 1172
				      'true'
				  %% Line 1173
				  <'false'> when 'true' ->
				      %% Line 1174
				      apply 'auto_expand_import'/2
					  ({M,N,A}, St0)
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor11})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 1176
				case _cor12 of
				  %% Line 1177
				  <'true'> when 'true' ->
				      let <_cor16> =
					  %% Line 1178
					  call 'erl_syntax':'get_pos'
					      (F)
				      in  do  %% Line 1178
					      apply 'report'/3
						  ({_cor36,_cor16,%% Line 1179
								  [101|[120|[112|[97|[110|[100|[105|[110|[103|[32|[99|[97|[108|[108|[32|[116|[111|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[96|[126|[119|[58|[126|[119|[47|[126|[119|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1180
																																										[M|[N|[A|[]]]], _cor40)
					      let <_cor20> =
						  %% Line 1181
						  call 'erl_syntax':'atom'
						      (M)
					      in  let <_cor19> =
						      %% Line 1182
						      call 'erl_syntax':'atom'
							  (N)
						  in  let <F1> =
							  %% Line 1181
							  call 'erl_syntax':'module_qualifier'
							      (_cor20, _cor19)
						      in  let <_cor22> =
							      %% Line 1183
							      apply 'rewrite'/2
								  (F, F1)
							  in  %% Line 1183
							      apply 'revisit_application'/5
								  (_cor22, As, Tree, Env, St0)
				  %% Line 1184
				  <'false'> when 'true' ->
				      %% Line 1185
				      ( case St0 of
					  ( <( {'st',_cor88,_cor89,_rec35,_cor90,_cor91,_cor92,_cor93}
					       -| ['compiler_generated'] )> when 'true' ->
						let <Is> =
						    call 'sets':'add_element'
							(Name, _rec35)
						in  let <_cor28> =
							%% Line 1186
							call 'erlang':'setelement'
							    (4, St0, Is)
						    in  %% Line 1186
							apply 'visit_application_final'/4
							    (F, As, Tree, _cor28)
					    -| ['compiler_generated'] )
					  ( <_cor94> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','st'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <_cor29> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor29})
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_cor48> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','env'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor35,_cor34,_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'visit_import_application',6}}] )
	    -| ['compiler_generated'] )
	end
'visit_bif_call'/6 =
    %% Line 1189
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'apply',2},F,As = [E|[Args|[]]],Tree,Env,St0> when 'true' ->
	      %% Line 1190
	      case call 'erl_syntax':'is_proper_list'
		       (Args) of
		%% Line 1191
		<'true'> when 'true' ->
		    %% Line 1192
		    ( case Env of
			( <( {'env',_rec37,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor8> =
				  call 'erl_syntax':'get_pos'
				      (F)
			      in  do  apply 'report'/3
					  ({_rec37,_cor8,%% Line 1193
							 [99|[104|[97|[110|[103|[105|[110|[103|[32|[117|[115|[101|[32|[111|[102|[32|[96|[97|[112|[112|[108|[121|[47|[50|[39|[32|[116|[111|[32|[100|[105|[114|[101|[99|[116|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1195
																																										    [], _cor32)
				      let <As1> =
					  %% Line 1196
					  call 'erl_syntax':'list_elements'
					      (Args)
				      in  %% Line 1197
					  apply 'revisit_application'/5
					      (E, As1, Tree, Env, St0)
			  -| ['compiler_generated'] )
			( <_cor40> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','env'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1198
		<'false'> when 'true' ->
		    %% Line 1199
		    apply 'visit_application_final'/4
			(F, As, Tree, St0)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1201
	  <{'apply',3},F,As = [M|[N|[Args|[]]]],Tree,Env,St0> when 'true' ->
	      %% Line 1202
	      case call 'erl_syntax':'is_proper_list'
		       (Args) of
		%% Line 1203
		<'true'> when 'true' ->
		    %% Line 1204
		    ( case Env of
			( <( {'env',_rec39,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor15> =
				  call 'erl_syntax':'get_pos'
				      (F)
			      in  do  apply 'report'/3
					  ({_rec39,_cor15,%% Line 1205
							  [99|[104|[97|[110|[103|[105|[110|[103|[32|[117|[115|[101|[32|[111|[102|[32|[96|[97|[112|[112|[108|[121|[47|[51|[39|[32|[116|[111|[32|[100|[105|[114|[101|[99|[116|[32|[114|[101|[109|[111|[116|[101|[32|[99|[97|[108|[108|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1207
																																									  [], _cor58)
				      let <_cor18> =
					  %% Line 1208
					  call 'erl_syntax':'module_qualifier'
					      (M, N)
				      in  let <F1> =
					      %% Line 1208
					      apply 'rewrite'/2
						  (F, _cor18)
					  in  let <As1> =
						  %% Line 1209
						  call 'erl_syntax':'list_elements'
						      (Args)
					      in  %% Line 1210
						  apply 'visit_nonlocal_application'/5
						      (F1, As1, Tree, Env, St0)
			  -| ['compiler_generated'] )
			( <_cor66> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','env'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1211
		<'false'> when 'true' ->
		    %% Line 1212
		    apply 'visit_application_final'/4
			(F, As, Tree, St0)
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1214
	  <N = {'spawn',3},F,As = [_cor80|[_cor81|[_cor82|[]]]],Tree,Env,St0> when 'true' ->
	      %% Line 1215
	      apply 'visit_spawn_call'/7
		  (N, F, [], As, Tree, Env, St0)
	  %% Line 1216
	  <N = {'spawn_link',3},F,As = [_cor83|[_cor84|[_cor85|[]]]],Tree,Env,%% Line 1217
									      St0> when 'true' ->
	      %% Line 1218
	      apply 'visit_spawn_call'/7
		  (N, F, [], As, Tree, Env, St0)
	  %% Line 1219
	  <N = {'spawn',4},F,[A|As = [_cor86|[_cor87|[_cor88|[]]]]],Tree,Env,%% Line 1220
									     St0> when 'true' ->
	      %% Line 1221
	      apply 'visit_spawn_call'/7
		  (N, F, [A|[]], As, Tree, Env, St0)
	  %% Line 1222
	  <N = {'spawn_link',4},F,[A|As = [_cor89|[_cor90|[_cor91|[]]]]],Tree,Env,%% Line 1223
										  St0> when 'true' ->
	      %% Line 1224
	      apply 'visit_spawn_call'/7
		  (N, F, [A|[]], As, Tree, Env, St0)
	  %% Line 1225
	  <_cor92,F,As,Tree,_X_Env,St0> when 'true' ->
	      %% Line 1226
	      apply 'visit_application_final'/4
		  (F, As, Tree, St0)
	end
'visit_spawn_call'/7 =
    %% Line 1228
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{N,A},F,Ps,As = [A1|[A2|[A3|[]]]],Tree,Env = %% Line 1229
							{'env',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,'true',_cor59,_cor60,_cor61,_cor62},%% Line 1229
																			   St0> when 'true' ->
	      %% Line 1230
	      case call 'erl_syntax':'is_proper_list'
		       (A3) of
		%% Line 1231
		<'true'> when 'true' ->
		    let <_cor11> =
			%% Line 1232
			call 'erl_syntax':'get_pos'
			    (F)
		    in  let <_cor9> =
			    %% Line 1234
			    call 'erlang':'length'
				(Ps)
			in  let <_cor10> =
				%% Line 1234
				call 'erlang':'+'
				    (1, _cor9)
			    in  do  %% Line 1232
				    apply 'report'/3
					({_cor51,_cor11,%% Line 1233
							[99|[104|[97|[110|[103|[105|[110|[103|[32|[117|[115|[101|[32|[111|[102|[32|[96|[126|[119|[47|[126|[119|[39|[32|[116|[111|[32|[96|[126|[119|[47|[126|[119|[39|[32|[119|[105|[116|[104|[32|[97|[32|[102|[117|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1234
																																							    [N|[A|[N|[_cor10|[]]]]], _cor56)
				    let <_cor18> =
					%% Line 1235
					case call 'erl_syntax':'is_atom'
						 (A1, _cor52) of
					  %% Line 1236
					  <'true'> when 'true' ->
					      %% Line 1237
					      A2
					  %% Line 1238
					  <'false'> when 'true' ->
					      let <_cor16> =
						  %% Line 1240
						  call 'erl_syntax':'module_qualifier'
						      (A1, A2)
					      in  %% Line 1239
						  apply 'clone'/2
						      (A1, _cor16)
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor17})
					    -| ['compiler_generated'] )
					end
				    in  let <As1> =
					    %% Line 1245
					    call 'erl_syntax':'list_elements'
						(A3)
					in  let <_cor21> =
						%% Line 1246
						call 'erlang':'length'
						    (As1)
					    in  %% Line 1246
						case apply 'new_variables'/2
							 (_cor21, St0) of
						  <{Vs,St1}> when 'true' ->
						      let <_cor23> =
							  %% Line 1247
							  call 'erl_syntax':'application'
							      (_cor18, Vs)
						      in  let <E1> =
							      %% Line 1247
							      apply 'clone'/2
								  (_cor18, _cor23)
							  in  let <_cor25> =
								  %% Line 1248
								  call 'erl_syntax':'clause'
								      ([], [E1|[]])
							      in  let <C1> =
								      %% Line 1248
								      apply 'clone'/2
									  (E1, _cor25)
								  in  let <_cor27> =
									  %% Line 1249
									  call 'erl_syntax':'fun_expr'
									      ([C1|[]])
								      in  let <E2> =
									      %% Line 1249
									      apply 'clone'/2
										  (C1, _cor27)
									  in  let <_cor29> =
										  %% Line 1250
										  call 'erl_syntax':'clause'
										      (Vs, [], [E2|[]])
									      in  let <C2> =
										      %% Line 1250
										      apply 'clone'/2
											  (E2, _cor29)
										  in  let <_cor31> =
											  %% Line 1251
											  call 'erl_syntax':'fun_expr'
											      ([C2|[]])
										      in  let <E3> =
											      %% Line 1251
											      apply 'clone'/2
												  (C2, _cor31)
											  in  let <_cor33> =
												  %% Line 1252
												  call 'erl_syntax':'application'
												      (E3, As1)
											      in  let <E4> =
												      %% Line 1252
												      apply 'clone'/2
													  (E3, _cor33)
												  in  let <_cor35> =
													  %% Line 1253
													  apply 'get_env'/1
													      (A1)
												      in  let <E5> =
													      %% Line 1253
													      call 'erl_syntax_lib':'annotate_bindings'
														  (E4, _cor35)
													  in  %% Line 1254
													      case apply 'visit'/3
														       (E5, Env, St1) of
														<{E6,St2}> when 'true' ->
														    let <_cor38> =
															%% Line 1255
															call 'erl_syntax':'atom'
															    (N)
														    in  let <F2> =
															    %% Line 1255
															    apply 'rewrite'/2
																(F, _cor38)
															in  let <_cor40> =
																%% Line 1256
																call 'erlang':'++'
																    (Ps, [E6|[]])
															    in  %% Line 1256
																apply 'visit_nonlocal_application'/5
																    (F2, _cor40, Tree, Env, St2)
														( <_cor37> when 'true' ->
														      primop 'match_fail'
															  ({'badmatch',_cor37})
														  -| ['compiler_generated'] )
													      end
						  ( <_cor22> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor22})
						    -| ['compiler_generated'] )
						end
		%% Line 1257
		<'false'> when 'true' ->
		    let <_cor41> =
			%% Line 1258
			call 'erlang':'++'
			    (Ps, As)
		    in  %% Line 1258
			apply 'visit_application_final'/4
			    (F, _cor41, Tree, St0)
		( <_cor42> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor42})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1260
	  <_cor102,F,Ps,As,Tree,_X_Env,St0> when 'true' ->
	      let <_cor43> =
		  %% Line 1261
		  call 'erlang':'++'
		      (Ps, As)
	      in  %% Line 1261
		  apply 'visit_application_final'/4
		      (F, _cor43, Tree, St0)
	end
'visit_named_fun_application'/5 =
    %% Line 1263
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Name> =
	    %% Line 1264
	    call 'erl_syntax':'implicit_fun_name'
		(_cor4)
	in  let <_cor7> =
		catch
		    let <_cor6> =
			%% Line 1265
			call 'erl_syntax_lib':'analyze_function_name'
			    (Name)
		    in  %% Line 1265
			{'ok',_cor6}
	    in  %% Line 1265
		case _cor7 of
		  %% Line 1266
		  <{'ok',{A,N}}>
		      when try
			    let <_cor8> =
				call 'erlang':'is_atom'
				    (A)
			    in  let <_cor9> =
				    call 'erlang':'is_integer'
					(N)
				in  let <_cor10> =
					call 'erlang':'length'
					    (_cor3)
				    in  let <_cor11> =
					    call 'erlang':'=:='
						(N, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor9, _cor11)
					    in  call 'erlang':'and'
						    (_cor8, _cor12)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      %% Line 1267
		      case apply 'is_nonlocal'/2
			       ({A,N}, _cor1) of
			%% Line 1268
			<'true'> when 'true' ->
			    %% Line 1270
			    apply 'visit_application_final'/4
				(_cor4, _cor3, _cor2, _cor0)
			%% Line 1271
			<'false'> when 'true' ->
			    %% Line 1272
			    ( case _cor1 of
				( <( {'env',_rec44,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor15> =
					  call 'erl_syntax':'get_pos'
					      (_cor4)
				      in  do  apply 'report'/3
						  ({_rec44,_cor15,%% Line 1273
								  [99|[104|[97|[110|[103|[105|[110|[103|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[111|[102|[32|[105|[109|[112|[108|[105|[99|[105|[116|[32|[102|[117|[110|[32|[116|[111|[32|[100|[105|[114|[101|[99|[116|[32|[108|[111|[99|[97|[108|[32|[99|[97|[108|[108|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1275
																																																	    [], _cor37)
					      %% Line 1276
					      ( case _cor0 of
						  ( <( {'st',_cor59,_rec46,_cor60,_cor61,_cor62,_cor63,_cor64}
						       -| ['compiler_generated'] )> when 'true' ->
							let <Used> =
							    call 'sets':'add_element'
								({A,N}, _rec46)
							in  let <_cor21> =
								%% Line 1277
								call 'erl_syntax':'atom'
								    (A)
							    in  let <F1> =
								    %% Line 1277
								    apply 'rewrite'/2
									(_cor4, _cor21)
								in  let <_cor25> =
									%% Line 1279
									call 'erlang':'setelement'
									    (3, _cor0, Used)
								    in  %% Line 1278
									apply 'revisit_application'/5
									    (F1, _cor3, _cor2, _cor1, _cor25)
						    -| ['compiler_generated'] )
						  ( <_cor65> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','st'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor45> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','env'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_cor26> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor26})
			  -| ['compiler_generated'] )
		      end
		  %% Line 1281
		  <_cor74> when 'true' ->
		      %% Line 1282
		      apply 'visit_application_final'/4
			  (_cor4, _cor3, _cor2, _cor0)
		end
'visit_lambda_application'/5 =
    %% Line 1285
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <A> =
	    %% Line 1286
	    call 'erl_syntax':'fun_expr_arity'
		(_cor4)
	in  let <_cor6> =
		%% Line 1287
		call 'erlang':'length'
		    (_cor3)
	    in  %% Line 1287
		case <> of
		  %% Line 1288
		  <>
		      when call 'erlang':'=:='
			    (A,
			     _cor6) ->
		      %% Line 1289
		      ( case _cor1 of
			  ( <( {'env',_rec48,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor9> =
				    call 'erl_syntax':'get_pos'
					(_cor4)
				in  do  apply 'report'/3
					    ({_rec48,_cor9,%% Line 1290
							   [99|[104|[97|[110|[103|[105|[110|[103|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[111|[102|[32|[102|[117|[110|[45|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[116|[111|[32|[108|[111|[99|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1292
																																																			      [], _cor58)
					%% Line 1293
					case _cor55 of
					  <{Base,_cor93}> when 'true' ->
					      let <_cor21> =
						  %% Line 1294
						  ( letrec
							'lc$^0'/1 =
							    fun (_cor18) ->
								case _cor18 of
								  <[V|_cor16]> when 'true' ->
								      let <_cor19> =
									  call 'erl_syntax':'variable'
									      (V)
								      in  let <_cor20> =
									      apply 'lc$^0'/1
										  (_cor16)
									  in  ( [_cor19|_cor20]
										-| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_cor18> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor18})
									  -| [{'function_name',{'lc$^0',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  let <_cor17> =
							    apply 'get_free_vars'/1
								(_cor4)
							in  apply 'lc$^0'/1
								(_cor17)
						    -| ['list_comprehension'] )
					      in  let <N> =
						      %% Line 1295
						      call 'erlang':'length'
							  (_cor21)
						  in  let <A1> =
							  %% Line 1296
							  call 'erlang':'+'
							      (A, N)
						      in  %% Line 1297
							  case apply 'new_fname'/2
								   ({Base,A1}, _cor0) of
							    <{Name,St1}> when 'true' ->
								let <_cor26> =
								    %% Line 1298
								    call 'erl_syntax':'fun_expr_clauses'
									(_cor4)
								in  let <Cs> =
									%% Line 1298
									apply 'augment_clauses'/2
									    (_cor26, _cor21)
								    in  let <F1> =
									    %% Line 1299
									    call 'erl_syntax':'atom'
										(Name)
									in  let <_cor29> =
										%% Line 1300
										call 'erl_syntax':'function'
										    (F1, Cs)
									    in  let <New> =
										    %% Line 1300
										    apply 'rewrite'/2
											(_cor4, _cor29)
										in  %% Line 1301
										    ( case St1 of
											( <( {'st',_cor94,_rec51,_cor95,_cor96,_cor97,_cor98,_cor99}
											     -| ['compiler_generated'] )> when 'true' ->
											      let <Used> =
												  call 'sets':'add_element'
												      ({Name,A1}, _rec51)
											      in  let <Forms> =
												      %% Line 1302
												      [New|_cor98]
												  in  let <_cor38> =
													  %% Line 1303
													  call 'erlang':'setelement'
													      (7, St1, Forms)
												      in  let <_cor40> =
													      %% Line 1303
													      call 'erlang':'setelement'
														  (3, _cor38, Used)
													  in  let <_cor42> =
														  %% Line 1304
														  call 'erlang':'++'
														      (_cor3, _cor21)
													      in  %% Line 1304
														  apply 'visit_application_final'/4
														      (F1, _cor42, _cor2, _cor40)
											  -| ['compiler_generated'] )
											( <_cor100> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {'badrecord','st'}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
							    ( <_cor25> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor25})
							      -| ['compiler_generated'] )
							  end
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor14})
					    -| ['compiler_generated'] )
					end
			    -| ['compiler_generated'] )
			  ( <_cor66> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','env'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 1305
		  <> when 'true' ->
		      %% Line 1306
		      ( case _cor1 of
			  ( <( {'env',_rec54,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor45> =
				    call 'erl_syntax':'get_pos'
					(_cor4)
				in  do  apply 'warn'/3
					    ({_rec54,_cor45,%% Line 1307
							    [97|[114|[105|[116|[121|[32|[109|[105|[115|[109|[97|[116|[99|[104|[32|[105|[110|[32|[102|[117|[110|[45|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1308
																																								[], _cor120)
					%% Line 1309
					apply 'visit_application_final'/4
					    (_cor4, _cor3, _cor2, _cor0)
			    -| ['compiler_generated'] )
			  ( <_cor128> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','env'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		end
'augment_clauses'/2 =
    %% Line 1312
    fun (_cor1,_cor0) ->
	%% Line 1313
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[%% Line 1319
			  C|_cor3]> when 'true' ->
			    let <Ps> =
				%% Line 1314
				call 'erl_syntax':'clause_patterns'
				    (C)
			    in  let <G> =
				    %% Line 1315
				    call 'erl_syntax':'clause_guard'
					(C)
				in  let <Es> =
					%% Line 1316
					call 'erl_syntax':'clause_body'
					    (C)
				    in  let <_cor8> =
					    %% Line 1317
					    call 'erlang':'++'
						(Ps, _cor0)
					in  let <_cor9> =
						%% Line 1317
						call 'erl_syntax':'clause'
						    (_cor8, G, Es)
					    in  let <_cor10> =
						    %% Line 1317
						    apply 'rewrite'/2
							(C, _cor9)
						in  let <_cor11> =
							%% Line 1319
							apply 'lc$^0'/1
							    (_cor3)
						    in  ( [_cor10|_cor11]
							  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'visit_nonlocal_application'/5 =
    %% Line 1321
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1322
	case call 'erl_syntax':'type'
		 (_cor4) of
	  %% Line 1323
	  <'tuple'> when 'true' ->
	      %% Line 1324
	      case call 'erl_syntax':'tuple_elements'
		       (_cor4) of
		%% Line 1325
		<[X1|[X2|[]]]> when 'true' ->
		    %% Line 1326
		    ( case _cor1 of
			( <( {'env',_rec56,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor7> =
				  call 'erl_syntax':'get_pos'
				      (_cor4)
			      in  do  apply 'report'/3
					  ({_rec56,_cor7,%% Line 1327
							 [99|[104|[97|[110|[103|[105|[110|[103|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[111|[102|[32|[50|[45|[116|[117|[112|[108|[101|[32|[116|[111|[32|[100|[105|[114|[101|[99|[116|[32|[114|[101|[109|[111|[116|[101|[32|[99|[97|[108|[108|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1329
																																													     [], _cor29)
				      let <F1> =
					  %% Line 1330
					  call 'erl_syntax':'module_qualifier'
					      (X1, X2)
				      in  let <_cor11> =
					      %% Line 1331
					      apply 'rewrite'/2
						  (_cor4, F1)
					  in  %% Line 1331
					      apply 'revisit_application'/5
						  (_cor11, _cor3, _cor2, _cor1, _cor0)
			  -| ['compiler_generated'] )
			( <_cor37> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','env'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1333
		<_cor51> when 'true' ->
		    %% Line 1334
		    apply 'visit_application_final'/4
			(_cor4, _cor3, _cor2, _cor0)
	      end
	  %% Line 1336
	  <'module_qualifier'> when 'true' ->
	      let <_cor14> =
		  catch
		      let <_cor13> =
			  %% Line 1337
			  call 'erl_syntax_lib':'analyze_function_name'
			      (_cor4)
		      in  %% Line 1337
			  {'ok',_cor13}
	      in  %% Line 1337
		  case _cor14 of
		    %% Line 1338
		    <{'ok',{M,N}}>
			when let <_cor15> =
			      call 'erlang':'is_atom'
				  (M)
			  in  let <_cor16> =
				  call 'erlang':'is_atom'
				      (N)
			      in  call 'erlang':'and'
				      (_cor15, _cor16) ->
			let <_cor17> =
			    %% Line 1339
			    call 'erlang':'length'
				(_cor3)
			in  %% Line 1339
			    apply 'visit_remote_application'/6
				({M,N,_cor17}, _cor4, _cor3, _cor2, _cor1, _cor0)
		    %% Line 1341
		    <_cor52> when 'true' ->
			%% Line 1342
			apply 'visit_application_final'/4
			    (_cor4, _cor3, _cor2, _cor0)
		  end
	  %% Line 1344
	  <_cor53> when 'true' ->
	      %% Line 1345
	      apply 'visit_application_final'/4
		  (_cor4, _cor3, _cor2, _cor0)
	end
'visit_remote_application'/6 =
    %% Line 1349
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'lists','append',2},F,[A1|[A2|[]]],Tree,Env,%% Line 1350
							St0> when 'true' ->
	      %% Line 1351
	      ( case Env of
		  ( <( {'env',_rec58,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor8> =
			    call 'erl_syntax':'get_pos'
				(F)
			in  do  apply 'report'/3
				    ({_rec58,_cor8,%% Line 1352
						   [114|[101|[112|[108|[97|[99|[105|[110|[103|[32|[99|[97|[108|[108|[32|[116|[111|[32|[96|[108|[105|[115|[116|[115|[58|[97|[112|[112|[101|[110|[100|[47|[50|[39|[32|[119|[105|[116|[104|[32|[116|[104|[101|[32|[96|[43|[43|[39|[32|[111|[112|[101|[114|[97|[116|[111|[114|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1354
																																															  [], _cor93)
				let <_cor11> =
				    %% Line 1355
				    call 'erl_syntax':'operator'
					('++')
				in  let <Tree1> =
					%% Line 1355
					call 'erl_syntax':'infix_expr'
					    (A1, _cor11, A2)
				    in  let <_cor13> =
					    %% Line 1356
					    apply 'rewrite'/2
						(Tree, Tree1)
					in  %% Line 1356
					    apply 'visit'/3
						(_cor13, Env, St0)
		    -| ['compiler_generated'] )
		  ( <_cor101> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','env'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1357
	  <{'lists','subtract',2},F,[A1|[A2|[]]],Tree,Env,%% Line 1358
							  St0> when 'true' ->
	      %% Line 1359
	      ( case Env of
		  ( <( {'env',_rec60,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor16> =
			    call 'erl_syntax':'get_pos'
				(F)
			in  do  apply 'report'/3
				    ({_rec60,_cor16,%% Line 1360
						    [114|[101|[112|[108|[97|[99|[105|[110|[103|[32|[99|[97|[108|[108|[32|[116|[111|[32|[96|[108|[105|[115|[116|[115|[58|[115|[117|[98|[116|[114|[97|[99|[116|[47|[50|[39|[32|[119|[105|[116|[104|[32|[116|[104|[101|[32|[96|[45|[45|[39|[32|[111|[112|[101|[114|[97|[116|[111|[114|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1362
																																																     [], _cor119)
				let <_cor19> =
				    %% Line 1363
				    call 'erl_syntax':'operator'
					('--')
				in  let <Tree1> =
					%% Line 1363
					call 'erl_syntax':'infix_expr'
					    (A1, _cor19, A2)
				    in  let <_cor21> =
					    %% Line 1364
					    apply 'rewrite'/2
						(Tree, Tree1)
					in  %% Line 1364
					    apply 'visit'/3
						(_cor21, Env, St0)
		    -| ['compiler_generated'] )
		  ( <_cor127> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','env'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1366
	  <{'lists','filter',2},F,As = [A1|[A2|[]]],Tree,%% Line 1367
							 Env,%% Line 1367
							     St0> when 'true' ->
	      %% Line 1368
	      ( case Env of
		  ( <( {'env',_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_rec62,_cor150,_cor151,_cor152}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor26> =
			    %% Line 1369
			    call 'erl_syntax':'type'
				(A1)
			in  let <_cor27> =
				%% Line 1369
				call 'erlang':'=/='
				    (_cor26, 'variable')
			    in  let <_cor30> =
				    %% Line 1369
				    call 'erlang':'and'
					(_rec62, _cor27)
				in  let <_cor24> =
					%% Line 1370
					apply 'get_var_exports'/1
					    (A1)
				    in  let <_cor25> =
					    %% Line 1370
					    call 'erlang':'=:='
						(_cor24, [])
					in  let <_cor31> =
						%% Line 1370
						call 'erlang':'and'
						    (_cor30, _cor25)
					    in  let <_cor22> =
						    %% Line 1371
						    apply 'get_var_exports'/1
							(A2)
						in  let <_cor23> =
							%% Line 1371
							call 'erlang':'=:='
							    (_cor22, [])
						    in  case %% Line 1371
							     call 'erlang':'and'
								 (_cor31, _cor23) of
							  %% Line 1372
							  <'true'> when 'true' ->
							      let <_cor34> =
								  %% Line 1373
								  call 'erl_syntax':'get_pos'
								      (F)
							      in  do  %% Line 1373
								      apply 'report'/3
									  ({_cor141,_cor34,%% Line 1374
											   [114|[101|[112|[108|[97|[99|[105|[110|[103|[32|[99|[97|[108|[108|[32|[116|[111|[32|[96|[108|[105|[115|[116|[115|[58|[102|[105|[108|[116|[101|[114|[47|[50|[39|[32|[119|[105|[116|[104|[32|[97|[32|[108|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1376
																																																							[], _cor146)
								      %% Line 1377
								      case apply 'new_variable'/1
									       (St0) of
									<{V,St1}> when 'true' ->
									    let <_cor38> =
										%% Line 1378
										call 'erl_syntax':'generator'
										    (V, A2)
									    in  let <G> =
										    %% Line 1378
										    apply 'clone'/2
											(A2, _cor38)
										in  let <_cor40> =
											%% Line 1379
											call 'erl_syntax':'application'
											    (A1, [V|[]])
										    in  let <T> =
											    %% Line 1379
											    apply 'clone'/2
												(A1, _cor40)
											in  let <L> =
												%% Line 1380
												call 'erl_syntax':'list_comp'
												    (V, [G|[T|[]]])
											    in  let <_cor43> =
												    %% Line 1381
												    apply 'get_env'/1
													(Tree)
												in  let <L1> =
													%% Line 1381
													call 'erl_syntax_lib':'annotate_bindings'
													    (L, _cor43)
												    in  let <_cor45> =
													    %% Line 1382
													    apply 'rewrite'/2
														(Tree, L1)
													in  %% Line 1382
													    apply 'visit'/3
														(_cor45, Env, St1)
									( <_cor37> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor37})
									  -| ['compiler_generated'] )
								      end
							  %% Line 1383
							  <'false'> when 'true' ->
							      %% Line 1384
							      apply 'visit_application_final'/4
								  (F, As, Tree, St0)
							end
		    -| ['compiler_generated'] )
		  ( <_cor153> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','env'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1386
	  <{'lists','map',2},F,As = [A1|[A2|[]]],Tree,Env,%% Line 1387
							  St0> when 'true' ->
	      %% Line 1388
	      ( case Env of
		  ( <( {'env',_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_rec65,_cor189,_cor190,_cor191}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor51> =
			    %% Line 1389
			    call 'erl_syntax':'type'
				(A1)
			in  let <_cor52> =
				%% Line 1389
				call 'erlang':'=/='
				    (_cor51, 'variable')
			    in  let <_cor55> =
				    %% Line 1389
				    call 'erlang':'and'
					(_rec65, _cor52)
				in  let <_cor49> =
					%% Line 1390
					apply 'get_var_exports'/1
					    (A1)
				    in  let <_cor50> =
					    %% Line 1390
					    call 'erlang':'=:='
						(_cor49, [])
					in  let <_cor56> =
						%% Line 1390
						call 'erlang':'and'
						    (_cor55, _cor50)
					    in  let <_cor47> =
						    %% Line 1391
						    apply 'get_var_exports'/1
							(A2)
						in  let <_cor48> =
							%% Line 1391
							call 'erlang':'=:='
							    (_cor47, [])
						    in  case %% Line 1391
							     call 'erlang':'and'
								 (_cor56, _cor48) of
							  %% Line 1392
							  <'true'> when 'true' ->
							      let <_cor59> =
								  %% Line 1393
								  call 'erl_syntax':'get_pos'
								      (F)
							      in  do  %% Line 1393
								      apply 'report'/3
									  ({_cor180,_cor59,%% Line 1394
											   [114|[101|[112|[108|[97|[99|[105|[110|[103|[32|[99|[97|[108|[108|[32|[116|[111|[32|[96|[108|[105|[115|[116|[115|[58|[109|[97|[112|[47|[50|[39|[32|[119|[105|[116|[104|[32|[97|[32|[108|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1396
																																																				     [], _cor185)
								      %% Line 1397
								      case apply 'new_variable'/1
									       (St0) of
									<{V,St1}> when 'true' ->
									    let <_cor63> =
										%% Line 1398
										call 'erl_syntax':'application'
										    (A1, [V|[]])
									    in  let <T> =
										    %% Line 1398
										    apply 'clone'/2
											(A1, _cor63)
										in  let <_cor65> =
											%% Line 1399
											call 'erl_syntax':'generator'
											    (V, A2)
										    in  let <G> =
											    %% Line 1399
											    apply 'clone'/2
												(A2, _cor65)
											in  let <L> =
												%% Line 1400
												call 'erl_syntax':'list_comp'
												    (T, [G|[]])
											    in  let <_cor68> =
												    %% Line 1401
												    apply 'get_env'/1
													(Tree)
												in  let <L1> =
													%% Line 1401
													call 'erl_syntax_lib':'annotate_bindings'
													    (L, _cor68)
												    in  let <_cor70> =
													    %% Line 1402
													    apply 'rewrite'/2
														(Tree, L1)
													in  %% Line 1402
													    apply 'visit'/3
														(_cor70, Env, St1)
									( <_cor62> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor62})
									  -| ['compiler_generated'] )
								      end
							  %% Line 1403
							  <'false'> when 'true' ->
							      %% Line 1404
							      apply 'visit_application_final'/4
								  (F, As, Tree, St0)
							end
		    -| ['compiler_generated'] )
		  ( <_cor192> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','env'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1407
	  <Name = {M,N,A},F,As,Tree,Env,St> when 'true' ->
	      %% Line 1408
	      case apply 'is_auto_imported'/1
		       (Name) of
		%% Line 1409
		<'true'> when 'true' ->
		    %% Line 1412
		    apply 'visit_bif_call'/6
			({N,A}, F, As, Tree, Env, St)
		%% Line 1413
		<'false'> when 'true' ->
		    %% Line 1414
		    case apply 'rename_remote_call'/2
			     (Name, St) of
		      %% Line 1415
		      <{M1,N1}> when 'true' ->
			  %% Line 1416
			  ( case Env of
			      ( <( {'env',_rec68,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor74> =
					call 'erl_syntax':'get_pos'
					    (F)
				    in  do  apply 'report'/3
						({_rec68,_cor74,%% Line 1417
								[117|[112|[100|[97|[116|[105|[110|[103|[32|[111|[98|[115|[111|[108|[101|[116|[101|[32|[99|[97|[108|[108|[32|[116|[111|[32|[96|[126|[119|[58|[126|[119|[47|[126|[119|[39|[32|[116|[111|[32|[117|[115|[101|[32|[96|[126|[119|[58|[126|[119|[47|[126|[119|[39|[32|[105|[110|[115|[116|[101|[97|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1419
																																																				      [M|[N|[A|[M1|[N1|[A|[]]]]]]], _cor223)
					    let <M2> =
						%% Line 1420
						call 'erl_syntax':'atom'
						    (M1)
					    in  let <N2> =
						    %% Line 1421
						    call 'erl_syntax':'atom'
							(N1)
						in  let <F1> =
							%% Line 1422
							call 'erl_syntax':'module_qualifier'
							    (M2, N2)
						    in  let <_cor80> =
							    %% Line 1423
							    apply 'rewrite'/2
								(F, F1)
							in  %% Line 1423
							    apply 'revisit_application'/5
								(_cor80, As, Tree, Env, %% Line 1424
											St)
				-| ['compiler_generated'] )
			      ( <_cor231> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','env'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 1425
		      <'false'> when 'true' ->
			  %% Line 1426
			  apply 'visit_application_final'/4
			      (F, As, Tree, St)
		      ( <_cor81> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor81})
			-| ['compiler_generated'] )
		    end
		( <_cor82> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor82})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor88,_cor87,_cor86,_cor85,_cor84,_cor83> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor88,_cor87,_cor86,_cor85,_cor84,_cor83})
		  -| [{'function_name',{'visit_remote_application',6}}] )
	    -| ['compiler_generated'] )
	end
'auto_expand_import'/2 =
    %% Line 1432
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'lists','append',2},_X_St> when 'true' ->
	      'true'
	  %% Line 1433
	  <{'lists','subtract',2},_X_St> when 'true' ->
	      'true'
	  %% Line 1434
	  <{'lists','filter',2},_X_St> when 'true' ->
	      'true'
	  %% Line 1435
	  <{'lists','map',2},_X_St> when 'true' ->
	      'true'
	  %% Line 1436
	  <Name,St> when 'true' ->
	      %% Line 1437
	      case apply 'is_auto_imported'/1
		       (Name) of
		%% Line 1438
		<'true'> when 'true' ->
		    %% Line 1439
		    'true'
		%% Line 1440
		<'false'> when 'true' ->
		    let <_cor2> =
			%% Line 1441
			apply 'rename_remote_call'/2
			    (Name, St)
		    in  %% Line 1441
			call 'erlang':'=/='
			    (_cor2, 'false')
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'visit_list_comp'/3 =
    %% Line 1444
    fun (_cor2,_cor1,_cor0) ->
	let <Es> =
	    %% Line 1445
	    call 'erl_syntax':'list_comp_body'
		(_cor2)
	in  %% Line 1446
	    case apply 'visit_list_comp_body'/3
		     (Es, _cor1, _cor0) of
	      <{Es1,St1}> when 'true' ->
		  let <_cor5> =
		      %% Line 1447
		      call 'erl_syntax':'list_comp_template'
			  (_cor2)
		  in  %% Line 1447
		      case apply 'visit'/3
			       (_cor5, _cor1, St1) of
			<{T,St2}> when 'true' ->
			    let <_cor7> =
				%% Line 1448
				call 'erl_syntax':'list_comp'
				    (T, Es1)
			    in  let <_cor8> =
				    %% Line 1448
				    apply 'rewrite'/2
					(_cor2, _cor7)
				in  %% Line 1448
				    {_cor8,St2}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'visit_list_comp_body_join'/1 =
    %% Line 1450
    fun (_cor0) ->
	%% Line 1451
	( fun (_cor3,_cor2) ->
	      %% Line 1452
	      case apply 'is_generator'/1
		       (_cor3) of
		%% Line 1453
		<'true'> when 'true' ->
		    %% Line 1454
		    apply 'visit_generator'/3
			(_cor3, _cor0, _cor2)
		%% Line 1455
		<'false'> when 'true' ->
		    %% Line 1456
		    apply 'visit_filter'/3
			(_cor3, _cor0, _cor2)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-visit_list_comp_body_join/1-fun-0-'}}] )
'visit_list_comp_body'/3 =
    %% Line 1460
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1461
	    apply 'visit_list_comp_body_join'/1
		(_cor1)
	in  %% Line 1461
	    call 'lists':'mapfoldl'
		(_cor3, _cor0, _cor2)
'visit_filter'/3 =
    %% Line 1465
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1466
	apply 'visit'/3
	    (_cor2, _cor1, _cor0)
'visit_generator'/3 =
    %% Line 1471
    fun (_cor2,_cor1,_cor0) ->
	let <P> =
	    %% Line 1472
	    call 'erl_syntax':'generator_pattern'
		(_cor2)
	in  %% Line 1473
	    case call 'erl_syntax':'type'
		     (P) of
	      %% Line 1474
	      <'variable'> when 'true' ->
		  let <B> =
		      %% Line 1475
		      call 'erl_syntax':'generator_body'
			  (_cor2)
		  in  %% Line 1476
		      case call 'erl_syntax':'type'
			       (B) of
			%% Line 1477
			<'list_comp'> when 'true' ->
			    let <T> =
				%% Line 1478
				call 'erl_syntax':'list_comp_template'
				    (B)
			    in  %% Line 1479
				case call 'erl_syntax':'type'
					 (T) of
				  %% Line 1480
				  <'variable'> when 'true' ->
				      %% Line 1481
				      apply 'visit_generator_1'/3
					  (_cor2, _cor1, _cor0)
				  %% Line 1482
				  <_cor12> when 'true' ->
				      %% Line 1483
				      apply 'visit_filter'/3
					  (_cor2, _cor1, _cor0)
				end
			%% Line 1485
			<_cor13> when 'true' ->
			    %% Line 1486
			    apply 'visit_filter'/3
				(_cor2, _cor1, _cor0)
		      end
	      %% Line 1488
	      <_cor14> when 'true' ->
		  %% Line 1489
		  apply 'visit_filter'/3
		      (_cor2, _cor1, _cor0)
	    end
'visit_generator_1'/3 =
    %% Line 1492
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1493
	( case _cor1 of
	    ( <( {'env',_rec70,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor5> =
		      call 'erl_syntax':'get_pos'
			  (_cor2)
		  in  do  apply 'recommend'/3
			      ({_rec70,_cor5,%% Line 1494
					     [117|[110|[102|[111|[108|[100|[32|[116|[104|[97|[116|[32|[116|[104|[105|[115|[32|[110|[101|[115|[116|[101|[100|[32|[108|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110|[32|[99|[97|[110|[32|[98|[101|[32|[117|[110|[102|[111|[108|[100|[101|[100|[32|[98|[121|[32|[104|[97|[110|[100|[32|[116|[111|[32|[103|[101|[116|[32|[98|[101|[116|[116|[101|[114|[32|[101|[102|[102|[105|[99|[105|[101|[110|[99|[121|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1496
																																																																							      [], _cor15)
			  %% Line 1497
			  apply 'visit_filter'/3
			      (_cor2, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor23> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','env'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'visit_match_expr'/3 =
    %% Line 1499
    fun (_cor2,_cor1,_cor0) ->
	let <P> =
	    %% Line 1501
	    call 'erl_syntax':'match_expr_pattern'
		(_cor2)
	in  let <_cor4> =
		%% Line 1502
		call 'erl_syntax':'match_expr_body'
		    (_cor2)
	    in  %% Line 1502
		case apply 'visit'/3
			 (_cor4, _cor1, _cor0) of
		  <{B,St1}> when 'true' ->
		      %% Line 1503
		      case call 'erl_syntax':'type'
			       (P) of
			%% Line 1504
			<'tuple'> when 'true' ->
			    let <Ps> =
				%% Line 1505
				call 'erl_syntax':'tuple_elements'
				    (P)
			    in  %% Line 1506
				case call 'lists':'all'
					 (( 'is_variable'/1
					    -| [{'id',{0,0,'-visit_match_expr/3-fun-0-'}}] ), Ps) of
				  %% Line 1507
				  <'true'> when 'true' ->
				      let <_cor12> =
					  %% Line 1508
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor9) ->
							case _cor9 of
							  <[%% Line 1509
							    X|_cor8]> when 'true' ->
							      let <_cor10> =
								  call 'erl_syntax':'variable_name'
								      (X)
							      in  let <_cor11> =
								      %% Line 1509
								      apply 'lc$^0'/1
									  (_cor8)
								  in  ( [_cor10|_cor11]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor9> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor9})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (%% Line 1509
						     Ps)
					    -| ['list_comprehension'] )
				      in  let <Vs> =
					      %% Line 1508
					      call 'lists':'sort'
						  (_cor12)
					  in  %% Line 1510
					      case call 'ordsets':'is_set'
						       (Vs) of
						%% Line 1511
						<'true'> when 'true' ->
						    let <Xs> =
							%% Line 1512
							apply 'get_var_exports'/1
							    (B)
						    in  %% Line 1513
							case call 'ordsets':'intersection'
								 (Vs, Xs) of
							  %% Line 1514
							  <[]> when 'true' ->
							      %% Line 1515
							      apply 'visit_match_body'/6
								  (Ps, P, B, _cor2, _cor1, %% Line 1516
											   St1)
							  %% Line 1517
							  <_cor22> when 'true' ->
							      %% Line 1518
							      apply 'visit_match_expr_final'/5
								  (P, B, _cor2, _cor1, %% Line 1519
										       St1)
							end
						%% Line 1521
						<'false'> when 'true' ->
						    %% Line 1522
						    apply 'visit_match_expr_final'/5
							(P, B, _cor2, _cor1, St1)
						( <_cor16> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor16})
						  -| ['compiler_generated'] )
					      end
				  %% Line 1524
				  <'false'> when 'true' ->
				      %% Line 1525
				      apply 'visit_match_expr_final'/5
					  (P, B, _cor2, _cor1, St1)
				  ( <_cor17> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor17})
				    -| ['compiler_generated'] )
				end
			%% Line 1527
			<_cor23> when 'true' ->
			    %% Line 1528
			    apply 'visit_match_expr_final'/5
				(P, B, _cor2, _cor1, St1)
		      end
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'visit_match_expr_final'/5 =
    %% Line 1531
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1532
	    call 'erl_syntax':'match_expr'
		(_cor4, _cor3)
	in  let <_cor6> =
		%% Line 1532
		apply 'rewrite'/2
		    (_cor2, _cor5)
	    in  %% Line 1532
		{_cor6,_cor0}
'visit_match_body'/6 =
    %% Line 1534
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Ps,P,B,Tree,Env = {'env',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,'false',_cor68,_cor69},%% Line 1535
																    St0> when 'true' ->
	      %% Line 1536
	      apply 'visit_match_expr_final'/5
		  (P, B, Tree, Env, St0)
	  %% Line 1537
	  <Ps,P,B,Tree,Env,St0> when 'true' ->
	      %% Line 1538
	      case call 'erl_syntax':'type'
		       (B) of
		%% Line 1539
		<'case_expr'> when 'true' ->
		    let <Cs> =
			%% Line 1540
			call 'erl_syntax':'case_expr_clauses'
			    (B)
		    in  let <_cor7> =
			    %% Line 1541
			    call 'erlang':'length'
				(Ps)
			in  %% Line 1541
			    case apply 'multival_clauses'/3
				     (Cs, _cor7, Ps) of
			      %% Line 1542
			      <{'true',Cs1}> when 'true' ->
				  %% Line 1543
				  ( case Env of
				      ( <( {'env',_rec72,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor10> =
						%% Line 1544
						call 'erl_syntax':'get_pos'
						    (B)
					    in  do  apply 'report_export_vars'/4
							(_rec72, _cor10, %% Line 1545
									 [99|[97|[115|[101]]]], _cor74)
						    let <A> =
							%% Line 1546
							call 'erl_syntax':'case_expr_argument'
							    (B)
						    in  let <Tree1> =
							    %% Line 1547
							    call 'erl_syntax':'case_expr'
								(A, Cs1)
							in  let <_cor15> =
								%% Line 1548
								apply 'rewrite'/2
								    (Tree, Tree1)
							    in  %% Line 1548
								{_cor15,St0}
					-| ['compiler_generated'] )
				      ( <_cor82> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','env'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 1549
			      <'false'> when 'true' ->
				  %% Line 1550
				  apply 'visit_match_expr_final'/5
				      (P, B, Tree, Env, St0)
			      ( <_cor16> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor16})
				-| ['compiler_generated'] )
			    end
		%% Line 1552
		<'if_expr'> when 'true' ->
		    let <Cs> =
			%% Line 1553
			call 'erl_syntax':'if_expr_clauses'
			    (B)
		    in  let <_cor18> =
			    %% Line 1554
			    call 'erlang':'length'
				(Ps)
			in  %% Line 1554
			    case apply 'multival_clauses'/3
				     (Cs, _cor18, Ps) of
			      %% Line 1555
			      <{'true',Cs1}> when 'true' ->
				  %% Line 1556
				  ( case Env of
				      ( <( {'env',_rec74,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor21> =
						%% Line 1557
						call 'erl_syntax':'get_pos'
						    (B)
					    in  do  apply 'report_export_vars'/4
							(_rec74, _cor21, %% Line 1558
									 [105|[102]], _cor100)
						    let <Tree1> =
							%% Line 1559
							call 'erl_syntax':'if_expr'
							    (Cs1)
						    in  let <_cor25> =
							    %% Line 1560
							    apply 'rewrite'/2
								(Tree, Tree1)
							in  %% Line 1560
							    {_cor25,St0}
					-| ['compiler_generated'] )
				      ( <_cor108> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','env'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 1561
			      <'false'> when 'true' ->
				  %% Line 1562
				  apply 'visit_match_expr_final'/5
				      (P, B, Tree, Env, St0)
			      ( <_cor26> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor26})
				-| ['compiler_generated'] )
			    end
		%% Line 1564
		<'cond_expr'> when 'true' ->
		    let <Cs> =
			%% Line 1565
			call 'erl_syntax':'cond_expr_clauses'
			    (B)
		    in  let <_cor28> =
			    %% Line 1566
			    call 'erlang':'length'
				(Ps)
			in  %% Line 1566
			    case apply 'multival_clauses'/3
				     (Cs, _cor28, Ps) of
			      %% Line 1567
			      <{'true',Cs1}> when 'true' ->
				  %% Line 1568
				  ( case Env of
				      ( <( {'env',_rec76,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor31> =
						%% Line 1569
						call 'erl_syntax':'get_pos'
						    (B)
					    in  do  apply 'report_export_vars'/4
							(_rec76, _cor31, %% Line 1570
									 [99|[111|[110|[100]]]], _cor126)
						    let <Tree1> =
							%% Line 1571
							call 'erl_syntax':'cond_expr'
							    (Cs1)
						    in  let <_cor35> =
							    %% Line 1572
							    apply 'rewrite'/2
								(Tree, Tree1)
							in  %% Line 1572
							    {_cor35,St0}
					-| ['compiler_generated'] )
				      ( <_cor134> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','env'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 1573
			      <'false'> when 'true' ->
				  %% Line 1574
				  apply 'visit_match_expr_final'/5
				      (P, B, Tree, Env, St0)
			      ( <_cor36> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor36})
				-| ['compiler_generated'] )
			    end
		%% Line 1576
		<'receive_expr'> when 'true' ->
		    let <As> =
			%% Line 1578
			call 'erl_syntax':'receive_expr_action'
			    (B)
		    in  let <C> =
			    %% Line 1579
			    call 'erl_syntax':'clause'
				([], As)
			in  let <Cs> =
				%% Line 1580
				call 'erl_syntax':'receive_expr_clauses'
				    (B)
			    in  let <_cor40> =
				    %% Line 1581
				    call 'erlang':'length'
					(Ps)
				in  %% Line 1581
				    case apply 'multival_clauses'/3
					     ([C|Cs], _cor40, Ps) of
				      %% Line 1582
				      <{'true',[C1|Cs1]}> when 'true' ->
					  %% Line 1583
					  ( case Env of
					      ( <( {'env',_rec78,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_cor43> =
							%% Line 1584
							call 'erl_syntax':'get_pos'
							    (B)
						    in  do  apply 'report_export_vars'/4
								(_rec78, _cor43, %% Line 1585
										 [114|[101|[99|[101|[105|[118|[101]]]]]]], _cor152)
							    let <T> =
								%% Line 1586
								call 'erl_syntax':'receive_expr_timeout'
								    (B)
							    in  let <As1> =
								    %% Line 1587
								    call 'erl_syntax':'clause_body'
									(C1)
								in  let <Tree1> =
									%% Line 1588
									call 'erl_syntax':'receive_expr'
									    (Cs1, T, As1)
								    in  let <_cor49> =
									    %% Line 1589
									    apply 'rewrite'/2
										(Tree, Tree1)
									in  %% Line 1589
									    {_cor49,St0}
						-| ['compiler_generated'] )
					      ( <_cor160> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','env'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      %% Line 1590
				      <'false'> when 'true' ->
					  %% Line 1591
					  apply 'visit_match_expr_final'/5
					      (P, B, Tree, Env, St0)
				      ( <_cor50> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor50})
					-| ['compiler_generated'] )
				    end
		%% Line 1593
		<_cor174> when 'true' ->
		    %% Line 1594
		    apply 'visit_match_expr_final'/5
			(P, B, Tree, Env, St0)
	      end
	end
'multival_clauses'/3 =
    %% Line 1597
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1598
	apply 'multival_clauses'/4
	    (_cor2, _cor1, _cor0, [])
'multival_clauses'/4 =
    %% Line 1600
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C|Cs],N,Vs,Cs1> when 'true' ->
	      %% Line 1601
	      case call 'erl_syntax':'clause_body'
		       (C) of
		%% Line 1602
		<[]> when 'true' ->
		    %% Line 1603
		    'false'
		%% Line 1604
		<Es> when 'true' ->
		    let <E> =
			%% Line 1605
			call 'lists':'last'
			    (Es)
		    in  %% Line 1606
			case call 'erl_syntax':'type'
				 (E) of
			  %% Line 1607
			  <'tuple'> when 'true' ->
			      let <Ts> =
				  %% Line 1608
				  call 'erl_syntax':'tuple_elements'
				      (E)
			      in  %% Line 1609
				  case <> of
				    <>
					when try
					      let <_cor6> =
						  call 'erlang':'length'
						      (Ts)
					      in  call 'erlang':'=:='
						      (_cor6, N)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <Bs> =
					    %% Line 1610
					    apply 'make_matches'/3
						(E, Vs, Ts)
					in  let <Es1> =
						%% Line 1611
						apply 'replace_last'/2
						    (Es, Bs)
					    in  let <Ps> =
						    %% Line 1612
						    call 'erl_syntax':'clause_patterns'
							(C)
						in  let <G> =
							%% Line 1613
							call 'erl_syntax':'clause_guard'
							    (C)
						    in  let <C1> =
							    %% Line 1614
							    call 'erl_syntax':'clause'
								(Ps, G, Es1)
							in  let <_cor12> =
								%% Line 1616
								apply 'rewrite'/2
								    (C, C1)
							    in  %% Line 1615
								apply 'multival_clauses'/4
								    (Cs, N, Vs, %% Line 1616
										[_cor12|Cs1])
				    %% Line 1617
				    <> when 'true' ->
					%% Line 1618
					'false'
				  end
			  %% Line 1620
			  <_cor29> when 'true' ->
			      %% Line 1621
			      case call 'erl_syntax_lib':'is_fail_expr'
				       (E) of
				%% Line 1622
				<'true'> when 'true' ->
				    let <_cor13> =
					%% Line 1627
					call 'erl_syntax':'atom'
					    ('false')
				    in  let <Bs> =
					    %% Line 1626
					    apply 'make_matches'/2
						(Vs, _cor13)
					in  let <_cor15> =
						%% Line 1628
						call 'erlang':'++'
						    (Bs, [E|[]])
					    in  let <Es1> =
						    %% Line 1628
						    apply 'replace_last'/2
							(Es, _cor15)
						in  let <Ps> =
							%% Line 1629
							call 'erl_syntax':'clause_patterns'
							    (C)
						    in  let <G> =
							    %% Line 1630
							    call 'erl_syntax':'clause_guard'
								(C)
							in  let <C1> =
								%% Line 1631
								call 'erl_syntax':'clause'
								    (Ps, G, Es1)
							    in  let <_cor20> =
								    %% Line 1633
								    apply 'rewrite'/2
									(C, C1)
								in  %% Line 1632
								    apply 'multival_clauses'/4
									(Cs, N, Vs, %% Line 1633
										    [_cor20|Cs1])
				%% Line 1634
				<'false'> when 'true' ->
				    %% Line 1635
				    'false'
				( <_cor21> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor21})
				  -| ['compiler_generated'] )
			      end
			end
	      end
	  %% Line 1639
	  <[],_X_N,_X_Vs,Cs> when 'true' ->
	      let <_cor24> =
		  %% Line 1640
		  call 'lists':'reverse'
		      (Cs)
	      in  %% Line 1640
		  {'true',_cor24}
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'multival_clauses',4}}] )
	    -| ['compiler_generated'] )
	end
'make_matches'/3 =
    %% Line 1642
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1643
	case apply 'make_matches'/2
		 (_cor1, _cor0) of
	  %% Line 1644
	  <[]> when 'true' ->
	      %% Line 1645
	      []
	  %% Line 1646
	  <[B|Bs]> when 'true' ->
	      let <_cor3> =
		  %% Line 1647
		  apply 'rewrite'/2
		      (_cor2, B)
	      in  %% Line 1647
		  [_cor3|Bs]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'make_matches'/2 =
    %% Line 1650
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[V|Vs],[T|Ts]> when 'true' ->
	      let <_cor2> =
		  %% Line 1651
		  call 'erl_syntax':'match_expr'
		      (V, T)
	      in  let <_cor3> =
		      %% Line 1651
		      apply 'make_matches'/2
			  (Vs, Ts)
		  in  %% Line 1651
		      [_cor2|_cor3]
	  %% Line 1652
	  <[V|Vs],T>
	      when call 'erlang':'=/='
		    (T,
		     []) ->
	      let <_cor4> =
		  %% Line 1653
		  call 'erl_syntax':'match_expr'
		      (V, T)
	      in  let <_cor5> =
		      %% Line 1653
		      apply 'make_matches'/2
			  (Vs, T)
		  in  %% Line 1653
		      [_cor4|_cor5]
	  %% Line 1654
	  <[],_cor8> when 'true' ->
	      %% Line 1655
	      []
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'make_matches',2}}] )
	    -| ['compiler_generated'] )
	end
'rename_remote_call'/2 =
    %% Line 1657
    fun (_cor1,_cor0) ->
	%% Line 1658
	( case _cor0 of
	    ( <( {'st',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_rec80}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'find'
			   (_cor1, _rec80) of
		    %% Line 1659
		    <'error'> when 'true' ->
			%% Line 1660
			apply 'rename_remote_call_1'/1
			    (_cor1)
		    %% Line 1661
		    <{'ok',F1}> when 'true' ->
			F1
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','st'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'rename_remote_call_1'/1 =
    %% Line 1666
    fun (_cor0) ->
	case _cor0 of
	  <{'dict','dict_to_list',1}> when 'true' ->
	      {'dict','to_list'}
	  %% Line 1667
	  <{'dict','list_to_dict',1}> when 'true' ->
	      {'dict','from_list'}
	  %% Line 1668
	  <{'erl_eval','arg_list',2}> when 'true' ->
	      {'erl_eval','expr_list'}
	  %% Line 1669
	  <{'erl_eval','arg_list',3}> when 'true' ->
	      {'erl_eval','expr_list'}
	  %% Line 1670
	  <{'erl_eval','seq',2}> when 'true' ->
	      {'erl_eval','exprs'}
	  %% Line 1671
	  <{'erl_eval','seq',3}> when 'true' ->
	      {'erl_eval','exprs'}
	  %% Line 1672
	  <{'erl_pp','seq',1}> when 'true' ->
	      {'erl_eval','seq'}
	  %% Line 1673
	  <{'erl_pp','seq',2}> when 'true' ->
	      {'erl_eval','seq'}
	  %% Line 1674
	  <{'erlang','info',1}> when 'true' ->
	      {'erlang','system_info'}
	  %% Line 1675
	  <{'io','parse_erl_seq',1}> when 'true' ->
	      {'io','parse_erl_exprs'}
	  %% Line 1676
	  <{'io','parse_erl_seq',2}> when 'true' ->
	      {'io','parse_erl_exprs'}
	  %% Line 1677
	  <{'io','parse_erl_seq',3}> when 'true' ->
	      {'io','parse_erl_exprs'}
	  %% Line 1678
	  <{'io','scan_erl_seq',1}> when 'true' ->
	      {'io','scan_erl_exprs'}
	  %% Line 1679
	  <{'io','scan_erl_seq',2}> when 'true' ->
	      {'io','scan_erl_exprs'}
	  %% Line 1680
	  <{'io','scan_erl_seq',3}> when 'true' ->
	      {'io','scan_erl_exprs'}
	  %% Line 1681
	  <{'io_lib','reserved_word',1}> when 'true' ->
	      {'erl_scan','reserved_word'}
	  %% Line 1682
	  <{'io_lib','scan',1}> when 'true' ->
	      {'erl_scan','string'}
	  %% Line 1683
	  <{'io_lib','scan',2}> when 'true' ->
	      {'erl_scan','string'}
	  %% Line 1684
	  <{'io_lib','scan',3}> when 'true' ->
	      {'erl_scan','tokens'}
	  %% Line 1685
	  <{'orddict','dict_to_list',1}> when 'true' ->
	      {'orddict','to_list'}
	  %% Line 1686
	  <{'orddict','list_to_dict',1}> when 'true' ->
	      {'orddict','from_list'}
	  %% Line 1687
	  <{'ordsets','list_to_set',1}> when 'true' ->
	      {'ordsets','from_list'}
	  %% Line 1688
	  <{'ordsets','new_set',0}> when 'true' ->
	      {'ordsets','new'}
	  %% Line 1689
	  <{'ordsets','set_to_list',1}> when 'true' ->
	      {'ordsets','to_list'}
	  %% Line 1690
	  <{'ordsets','subset',2}> when 'true' ->
	      {'ordsets','is_subset'}
	  %% Line 1691
	  <{'sets','list_to_set',1}> when 'true' ->
	      {'sets','from_list'}
	  %% Line 1692
	  <{'sets','new_set',0}> when 'true' ->
	      {'sets','new'}
	  %% Line 1693
	  <{'sets','set_to_list',1}> when 'true' ->
	      {'sets','to_list'}
	  %% Line 1694
	  <{'sets','subset',2}> when 'true' ->
	      {'sets','is_subset'}
	  %% Line 1695
	  <{'string','index',2}> when 'true' ->
	      {'string','str'}
	  %% Line 1696
	  <{'unix','cmd',1}> when 'true' ->
	      {'os','cmd'}
	  %% Line 1697
	  <_cor2> when 'true' ->
	      'false'
	end
'rewrite_guard_test'/2 =
    %% Line 1701
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'atom',1> when 'true' ->
	      'is_atom'
	  %% Line 1702
	  <'binary',1> when 'true' ->
	      'is_binary'
	  %% Line 1703
	  <'constant',1> when 'true' ->
	      'is_constant'
	  %% Line 1704
	  <'float',1> when 'true' ->
	      'is_float'
	  %% Line 1705
	  <'function',1> when 'true' ->
	      'is_function'
	  %% Line 1706
	  <'function',2> when 'true' ->
	      'is_function'
	  %% Line 1707
	  <'integer',1> when 'true' ->
	      'is_integer'
	  %% Line 1708
	  <'list',1> when 'true' ->
	      'is_list'
	  %% Line 1709
	  <'number',1> when 'true' ->
	      'is_number'
	  %% Line 1710
	  <'pid',1> when 'true' ->
	      'is_pid'
	  %% Line 1711
	  <'port',1> when 'true' ->
	      'is_port'
	  %% Line 1712
	  <'reference',1> when 'true' ->
	      'is_reference'
	  %% Line 1713
	  <'tuple',1> when 'true' ->
	      'is_tuple'
	  %% Line 1714
	  <'record',2> when 'true' ->
	      'is_record'
	  %% Line 1715
	  <'record',3> when 'true' ->
	      'is_record'
	  %% Line 1716
	  <N,_X_A> when 'true' ->
	      N
	end
'reverse_guard_test'/2 =
    %% Line 1720
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'is_atom',1> when 'true' ->
	      'atom'
	  %% Line 1721
	  <'is_binary',1> when 'true' ->
	      'binary'
	  %% Line 1722
	  <'is_constant',1> when 'true' ->
	      'constant'
	  %% Line 1723
	  <'is_float',1> when 'true' ->
	      'float'
	  %% Line 1724
	  <'is_function',1> when 'true' ->
	      'function'
	  %% Line 1725
	  <'is_function',2> when 'true' ->
	      'function'
	  %% Line 1726
	  <'is_integer',1> when 'true' ->
	      'integer'
	  %% Line 1727
	  <'is_list',1> when 'true' ->
	      'list'
	  %% Line 1728
	  <'is_number',1> when 'true' ->
	      'number'
	  %% Line 1729
	  <'is_pid',1> when 'true' ->
	      'pid'
	  %% Line 1730
	  <'is_port',1> when 'true' ->
	      'port'
	  %% Line 1731
	  <'is_reference',1> when 'true' ->
	      'reference'
	  %% Line 1732
	  <'is_tuple',1> when 'true' ->
	      'tuple'
	  %% Line 1733
	  <'is_record',2> when 'true' ->
	      'record'
	  %% Line 1734
	  <'is_record',3> when 'true' ->
	      'record'
	  %% Line 1735
	  <N,_X_A> when 'true' ->
	      N
	end
'is_remote_name'/1 =
    %% Line 1741
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,A}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor2> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 1742
	  <_cor6> when 'true' ->
	      'false'
	end
'is_atom_pair'/1 =
    %% Line 1744
    fun (_cor0) ->
	case _cor0 of
	  <{M,F}>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 1745
	  <_cor4> when 'true' ->
	      'false'
	end
'replace_last'/2 =
    %% Line 1747
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[_X_E|[]],Xs> when 'true' ->
	      %% Line 1748
	      Xs
	  %% Line 1749
	  <[E|Es],Xs> when 'true' ->
	      let <_cor2> =
		  %% Line 1750
		  apply 'replace_last'/2
		      (Es, Xs)
	      in  %% Line 1750
		  [E|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'replace_last',2}}] )
	    -| ['compiler_generated'] )
	end
'is_generator'/1 =
    %% Line 1752
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1753
	    call 'erl_syntax':'type'
		(_cor0)
	in  %% Line 1753
	    call 'erlang':'=:='
		(_cor1, 'generator')
'is_variable'/1 =
    %% Line 1755
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1756
	    call 'erl_syntax':'type'
		(_cor0)
	in  %% Line 1756
	    call 'erlang':'=:='
		(_cor1, 'variable')
'new_variables'/2 =
    %% Line 1758
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,St0>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      %% Line 1759
	      case apply 'new_variable'/1
		       (St0) of
		<{V,St1}> when 'true' ->
		    let <_cor3> =
			%% Line 1760
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 1760
			case apply 'new_variables'/2
				 (_cor3, St1) of
			  <{Vs,St2}> when 'true' ->
			      %% Line 1761
			      {[V|Vs],St2}
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1762
	  <0,St> when 'true' ->
	      %% Line 1763
	      {[],St}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'new_variables',2}}] )
	    -| ['compiler_generated'] )
	end
'new_variable'/1 =
    %% Line 1765
    fun (_cor0) ->
	let <Fun> =
	    %% Line 1766
	    ( fun (_cor3) ->
		  let <_cor1> =
		      %% Line 1767
		      call 'erlang':'integer_to_list'
			  (_cor3)
		  in  let <_cor2> =
			  %% Line 1767
			  [86|_cor1]
		      in  %% Line 1767
			  call 'erlang':'list_to_atom'
			      (_cor2)
	      -| [{'id',{0,0,'-new_variable/1-fun-0-'}}] )
	in  %% Line 1769
	    ( case _cor0 of
		( <( {'st',_cor21,_cor22,_cor23,_rec81,_cor24,_cor25,_cor26}
		     -| ['compiler_generated'] )> when 'true' ->
		      %% Line 1770
		      case apply 'new_name'/3
			       (_cor21, Fun, _rec81) of
			<{Name,N}> when 'true' ->
			    let <_rec83> =
				%% Line 1771
				call 'erlang':'+'
				    (N, 1)
			    in  let <_rec84> =
				    %% Line 1771
				    call 'sets':'add_element'
					(Name, _rec81)
				in  let <_cor15> =
					%% Line 1771
					call 'erlang':'setelement'
					    (5, _cor0, _rec84)
				    in  let <_cor17> =
					    %% Line 1771
					    call 'erlang':'setelement'
						(2, _cor15, _rec83)
					in  let <_cor19> =
						%% Line 1772
						call 'erl_syntax':'variable'
						    (Name)
					    in  %% Line 1772
						{_cor19,_cor17}
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor11})
			  -| ['compiler_generated'] )
		      end
		  -| ['compiler_generated'] )
		( <_cor27> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','st'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'new_fname'/2 =
    %% Line 1774
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{F,A},St0> when 'true' ->
	      let <Base> =
		  %% Line 1775
		  call 'erlang':'atom_to_list'
		      (F)
	      in  let <Fun> =
		      %% Line 1776
		      ( fun (_cor7) ->
			    let <_cor3> =
				%% Line 1777
				call 'erlang':'integer_to_list'
				    (_cor7)
			    in  let <_cor4> =
				    %% Line 1777
				    [95|_cor3]
				in  let <_cor5> =
					%% Line 1777
					call 'erlang':'++'
					    (Base, _cor4)
				    in  let <_cor6> =
					    %% Line 1777
					    call 'erlang':'list_to_atom'
						(_cor5)
					in  %% Line 1777
					    {_cor6,A}
			-| [{'id',{0,0,'-new_fname/2-fun-0-'}}] )
		  in  %% Line 1779
		      ( case St0 of
			  ( <( {'st',_cor20,_cor21,_cor22,_cor23,_rec86,_cor24,_cor25}
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 1780
				case apply 'new_name'/3
					 (1, Fun, _rec86) of
				  <{Name = {F1,_X_A},_X_N}> when 'true' ->
				      let <_rec87> =
					  %% Line 1781
					  call 'sets':'add_element'
					      (Name, _rec86)
				      in  let <_cor17> =
					      %% Line 1781
					      call 'erlang':'setelement'
						  (6, St0, _rec87)
					  in  %% Line 1781
					      {F1,_cor17}
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor13})
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_cor26> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','st'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'new_fname',2}}] )
	    -| ['compiler_generated'] )
	end
'new_name'/3 =
    %% Line 1783
    fun (_cor2,_cor1,_cor0) ->
	let <Name> =
	    %% Line 1784
	    apply _cor1
		(_cor2)
	in  %% Line 1785
	    case call 'sets':'is_element'
		     (Name, _cor0) of
	      %% Line 1786
	      <'true'> when 'true' ->
		  let <_cor4> =
		      %% Line 1787
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  %% Line 1787
		      apply 'new_name'/3
			  (_cor4, _cor1, _cor0)
	      %% Line 1788
	      <'false'> when 'true' ->
		  %% Line 1789
		  {Name,_cor2}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'is_imported'/2 =
    %% Line 1792
    fun (_cor1,_cor0) ->
	%% Line 1793
	( case _cor0 of
	    ( <( {'env',_cor6,_cor7,_cor8,_rec89,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'dict':'is_key'
		      (_cor1, _rec89)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','env'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_auto_imported'/1 =
    %% Line 1795
    fun (_cor0) ->
	case _cor0 of
	  <{'erlang',N,A}> when 'true' ->
	      %% Line 1796
	      apply 'is_auto_imported'/1
		  ({N,A})
	  %% Line 1797
	  <{_cor2,_X_N,_X_A}> when 'true' ->
	      %% Line 1798
	      'false'
	  %% Line 1799
	  <{N,A}> when 'true' ->
	      %% Line 1800
	      call 'erl_internal':'bif'
		  (N, A)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_auto_imported',1}}] )
	    -| ['compiler_generated'] )
	end
'is_nonlocal'/2 =
    %% Line 1802
    fun (_cor1,_cor0) ->
	%% Line 1803
	case apply 'is_imported'/2
		 (_cor1, _cor0) of
	  %% Line 1804
	  <'true'> when 'true' ->
	      %% Line 1805
	      'true'
	  %% Line 1806
	  <'false'> when 'true' ->
	      %% Line 1807
	      apply 'is_auto_imported'/1
		  (_cor1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_var_exports'/1 =
    %% Line 1810
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1811
	    call 'erl_syntax':'get_ann'
		(_cor0)
	in  %% Line 1811
	    apply 'get_var_exports_1'/1
		(_cor1)
'get_var_exports_1'/1 =
    %% Line 1813
    fun (_cor0) ->
	case _cor0 of
	  <[{'bound',B}|_X_Bs]> when 'true' ->
	      B
	  %% Line 1814
	  <[_cor2|Bs]> when 'true' ->
	      apply 'get_var_exports_1'/1
		  (Bs)
	  %% Line 1815
	  <[]> when 'true' ->
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_var_exports_1',1}}] )
	    -| ['compiler_generated'] )
	end
'get_free_vars'/1 =
    %% Line 1817
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1818
	    call 'erl_syntax':'get_ann'
		(_cor0)
	in  %% Line 1818
	    apply 'get_free_vars_1'/1
		(_cor1)
'get_free_vars_1'/1 =
    %% Line 1820
    fun (_cor0) ->
	case _cor0 of
	  <[{'free',B}|_X_Bs]> when 'true' ->
	      B
	  %% Line 1821
	  <[_cor2|Bs]> when 'true' ->
	      apply 'get_free_vars_1'/1
		  (Bs)
	  %% Line 1822
	  <[]> when 'true' ->
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_free_vars_1',1}}] )
	    -| ['compiler_generated'] )
	end
'filename'/1 =
    %% Line 1824
    fun (_cor0) ->
	case _cor0 of
	  <[C|T]>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(C)
		in  let <_cor2> =
			call 'erlang':'>'
			    (C, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 1825
		  apply 'filename'/1
		      (T)
	      in  %% Line 1825
		  [C|_cor3]
	  %% Line 1826
	  <[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 1827
		  apply 'filename'/1
		      (H)
	      in  let <_cor4> =
		      %% Line 1827
		      apply 'filename'/1
			  (T)
		  in  %% Line 1827
		      call 'erlang':'++'
			  (_cor5, _cor4)
	  %% Line 1828
	  <[]> when 'true' ->
	      %% Line 1829
	      []
	  %% Line 1830
	  <N>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1831
	      call 'erlang':'atom_to_list'
		  (N)
	  %% Line 1832
	  <N> when 'true' ->
	      do  %% Line 1833
		  apply 'report_error'/2
		      ([98|[97|[100|[32|[102|[105|[108|[101|[110|[97|[109|[101|[58|[32|[96|[126|[80|[39|[46]]]]]]]]]]]]]]]]]]], [N|[25]])
		  %% Line 1834
		  call 'erlang':'exit'
		      ('error')
	end
'get_env'/1 =
    %% Line 1836
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1837
	    call 'erl_syntax':'get_ann'
		(_cor0)
	in  %% Line 1837
	    case call 'lists':'keyfind'
		     ('env', 1, _cor1) of
	      %% Line 1838
	      <{'env',Env}> when 'true' ->
		  %% Line 1839
		  Env
	      %% Line 1840
	      <_cor4> when 'true' ->
		  %% Line 1841
		  []
	    end
'rewrite'/2 =
    %% Line 1844
    fun (_cor1,_cor0) ->
	%% Line 1845
	call 'erl_syntax':'copy_attrs'
	    (_cor1, _cor0)
'clone'/2 =
    %% Line 1847
    fun (_cor1,_cor0) ->
	%% Line 1848
	call 'erl_syntax':'copy_pos'
	    (_cor1, _cor0)
'report_export_vars'/4 =
    %% Line 1854
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1855
	apply 'report'/3
	    ({_cor3,_cor2,[114|[101|[119|[114|[111|[116|[101|[32|[126|[115|[45|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[116|[111|[32|[101|[120|[112|[111|[114|[116|[32|[118|[97|[114|[105|[97|[98|[108|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 1856
																																	       [_cor1|[]], _cor0)
'error_read_file'/1 =
    %% Line 1858
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1859
	    apply 'filename'/1
		(_cor0)
	in  %% Line 1859
	    apply 'report_error'/2
		([101|[114|[114|[111|[114|[32|[114|[101|[97|[100|[105|[110|[103|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
'error_write_file'/1 =
    %% Line 1861
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1862
	    apply 'filename'/1
		(_cor0)
	in  %% Line 1862
	    apply 'report_error'/2
		([101|[114|[114|[111|[114|[32|[119|[114|[105|[116|[105|[110|[103|[32|[116|[111|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
'error_backup_file'/1 =
    %% Line 1864
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1866
	    apply 'filename'/1
		(_cor0)
	in  %% Line 1865
	    apply 'report_error'/2
		([99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[99|[114|[101|[97|[116|[101|[32|[98|[97|[99|[107|[117|[112|[32|[111|[102|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1866
																												       [_cor1|[]])
'error_open_output'/1 =
    %% Line 1868
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1869
	    apply 'filename'/1
		(_cor0)
	in  %% Line 1869
	    apply 'report_error'/2
		([99|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[32|[102|[111|[114|[32|[111|[117|[116|[112|[117|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
'verbosity'/1 =
    %% Line 1871
    fun (_cor0) ->
	%% Line 1872
	case call 'proplists':'get_bool'
		 ('quiet', _cor0) of
	  %% Line 1873
	  <'true'> when 'true' ->
	      0
	  %% Line 1874
	  <'false'> when 'true' ->
	      %% Line 1875
	      case call 'proplists':'get_value'
		       ('verbose', _cor0) of
		%% Line 1876
		<'true'> when 'true' ->
		    2
		%% Line 1877
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    N
		%% Line 1878
		<_cor4> when 'true' ->
		    1
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'report_error'/1 =
    %% Line 1882
    fun (_cor0) ->
	%% Line 1883
	apply 'report_error'/2
	    (_cor0, [])
'report_error'/2 =
    %% Line 1885
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{F,L,D},Vs> when 'true' ->
	      %% Line 1886
	      apply 'report'/2
		  ({F,L,{'error',D}}, Vs)
	  %% Line 1887
	  <D,Vs> when 'true' ->
	      %% Line 1888
	      apply 'report'/2
		  ({'error',D}, Vs)
	end
'warn'/3 =
    %% Line 1893
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{F,L,D},Vs,N> when 'true' ->
	      %% Line 1894
	      apply 'report'/3
		  ({F,L,{'warning',D}}, Vs, N)
	  %% Line 1895
	  <D,Vs,N> when 'true' ->
	      %% Line 1896
	      apply 'report'/3
		  ({'warning',D}, Vs, N)
	end
'recommend'/3 =
    %% Line 1898
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1899
	apply 'report'/3
	    ({'recommend',_cor2}, _cor1, _cor0)
'verbose'/3 =
    %% Line 1901
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1902
	apply 'report'/4
	    (2, _cor2, _cor1, _cor0)
'report'/2 =
    %% Line 1904
    fun (_cor1,_cor0) ->
	%% Line 1905
	apply 'report'/3
	    (_cor1, _cor0, 1)
'report'/3 =
    %% Line 1907
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1908
	apply 'report'/4
	    (1, _cor2, _cor1, _cor0)
'report'/4 =
    %% Line 1910
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Level,_X_D,_X_Vs,N>
	      when let <_cor4> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor5> =
			call 'erlang':'<'
			    (N, Level)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 1911
	      'ok'
	  %% Line 1912
	  <_X_Level,D,Vs,N>
	      when call 'erlang':'is_integer'
		    (N) ->
	      let <_cor6> =
		  %% Line 1913
		  apply 'format'/2
		      (D, Vs)
	      in  %% Line 1913
		  call 'io':'put_chars'
		      (_cor6)
	  %% Line 1914
	  <Level,D,Vs,Options>
	      when call 'erlang':'is_list'
		    (Options) ->
	      let <_cor7> =
		  %% Line 1915
		  apply 'verbosity'/1
		      (Options)
	      in  %% Line 1915
		  apply 'report'/4
		      (Level, D, Vs, _cor7)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'report',4}}] )
	    -| ['compiler_generated'] )
	end
'format'/2 =
    %% Line 1917
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'error',D},Vs> when 'true' ->
	      let <_cor2> =
		  %% Line 1918
		  apply 'format'/2
		      (D, Vs)
	      in  %% Line 1918
		  [[101|[114|[114|[111|[114|[58|[32]]]]]]]|[_cor2|[]]]
	  %% Line 1919
	  <{'warning',D},Vs> when 'true' ->
	      let <_cor3> =
		  %% Line 1920
		  apply 'format'/2
		      (D, Vs)
	      in  %% Line 1920
		  [[119|[97|[114|[110|[105|[110|[103|[58|[32]]]]]]]]]|[_cor3|[]]]
	  %% Line 1921
	  <{'recommend',D},Vs> when 'true' ->
	      let <_cor4> =
		  %% Line 1922
		  apply 'format'/2
		      (D, Vs)
	      in  %% Line 1922
		  [[114|[101|[99|[111|[109|[109|[101|[110|[100|[97|[116|[105|[111|[110|[58|[32]]]]]]]]]]]]]]]]|[_cor4|[]]]
	  %% Line 1923
	  <{[],L,D},Vs>
	      when let <_cor5> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor6> =
			call 'erlang':'>'
			    (L, 0)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 1924
		  call 'io_lib':'fwrite'
		      ([126|[119|[58|[32]]]], [L|[]])
	      in  let <_cor8> =
		      %% Line 1924
		      apply 'format'/2
			  (D, Vs)
		  in  %% Line 1924
		      [_cor7|[_cor8|[]]]
	  %% Line 1925
	  <{[],_X_L,D},Vs> when 'true' ->
	      %% Line 1926
	      apply 'format'/2
		  (D, Vs)
	  %% Line 1927
	  <{F,L,D},Vs>
	      when let <_cor9> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor10> =
			call 'erlang':'>'
			    (L, 0)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      let <_cor11> =
		  %% Line 1928
		  apply 'filename'/1
		      (F)
	      in  let <_cor12> =
		      %% Line 1928
		      call 'io_lib':'fwrite'
			  ([126|[116|[115|[58|[126|[119|[58|[32]]]]]]]], [_cor11|[L|[]]])
		  in  let <_cor13> =
			  %% Line 1928
			  apply 'format'/2
			      (D, Vs)
		      in  %% Line 1928
			  [_cor12|[_cor13|[]]]
	  %% Line 1929
	  <{F,_X_L,D},Vs> when 'true' ->
	      let <_cor14> =
		  %% Line 1930
		  apply 'filename'/1
		      (F)
	      in  let <_cor15> =
		      %% Line 1930
		      call 'io_lib':'fwrite'
			  ([126|[116|[115|[58|[32]]]]], [_cor14|[]])
		  in  let <_cor16> =
			  %% Line 1930
			  apply 'format'/2
			      (D, Vs)
		      in  %% Line 1930
			  [_cor15|[_cor16|[]]]
	  %% Line 1931
	  <S,Vs>
	      when call 'erlang':'is_list'
		    (S) ->
	      let <_cor17> =
		  %% Line 1932
		  call 'io_lib':'fwrite'
		      (S, Vs)
	      in  %% Line 1932
		  [_cor17|[10]]
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'format',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_tidy')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_tidy', _cor0)
end