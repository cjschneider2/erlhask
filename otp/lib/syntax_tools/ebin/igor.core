module 'igor' ['create_stubs'/2,
	       'merge'/2,
	       'merge'/3,
	       'merge_files'/3,
	       'merge_files'/4,
	       'merge_sources'/3,
	       'module_info'/0,
	       'module_info'/1,
	       'parse_transform'/2,
	       'rename'/2,
	       'rename'/3]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','module'},[{'typed_record_field',{'record_field',122,{'atom',122,'name'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'atom',[]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'vars'},{'atom',123,'none'}},{'type',123,'union',[{'type',123,'list',[{'type',123,'atom',[]}]}|[{'atom',123,'none'}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'functions'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'remote_type',124,[{'atom',124,'ordsets'}|[{'atom',124,'ordset'}|[[{'type',124,'tuple',[{'type',124,'atom',[]}|[{'type',124,'arity',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'exports'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'ordsets'}|[{'atom',125,'ordset'}|[[{'type',125,'tuple',[{'type',125,'atom',[]}|[{'type',125,'arity',[]}]]}]]]]}|[{'remote_type',126,[{'atom',126,'ordsets'}|[{'atom',126,'ordset'}|[[{'type',126,'tuple',[{'type',126,'tuple',[{'type',126,'atom',[]}|[{'type',126,'arity',[]}]]}|[{'type',126,'term',[]}]]}]]]]}]]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'aliases'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'ordsets'}|[{'atom',127,'ordset'}|[[{'type',127,'tuple',[{'type',127,'tuple',[{'type',127,'atom',[]}|[{'type',127,'arity',[]}]]}|[{'type',128,'tuple',[{'type',128,'atom',[]}|[{'type',128,'tuple',[{'type',128,'atom',[]}|[{'type',128,'arity',[]}]]}]]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'attributes'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'remote_type',129,[{'atom',129,'ordsets'}|[{'atom',129,'ordset'}|[[{'type',129,'tuple',[{'type',129,'atom',[]}|[{'type',129,'term',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'records'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'list',[{'type',130,'tuple',[{'type',130,'atom',[]}|[{'type',130,'list',[{'type',130,'tuple',[{'type',130,'atom',[]}|[{'type',130,'term',[]}]]}]}]]}]}]]}}]]]]]]],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{'option',{'type',140,'union',[{'type',140,'atom',[]}|[{'type',140,'tuple',[{'type',140,'atom',[]}|[{'type',140,'term',[]}]]}]]},[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'attribute',{'type',142,'tuple',[{'type',142,'atom',[]}|[{'type',142,'term',[]}]]},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'moduleName',{'type',143,'atom',[]},[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{'functionName',{'type',144,'tuple',[{'type',144,'atom',[]}|[{'type',144,'arity',[]}]]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{'functionPair',{'type',145,'tuple',[{'type',145,'functionName',[]}|[{'type',145,'tuple',[{'type',145,'moduleName',[]}|[{'type',145,'functionName',[]}]]}]]},[]}],
		%% Line 146
		'type' =
		    %% Line 146
		    [{'stubDescriptor',{'type',146,'tuple',[{'type',146,'moduleName',[]}|[{'type',146,'list',[{'type',146,'functionPair',[]}]}|[{'type',146,'list',[{'type',146,'attribute',[]}]}]]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'notes',{'type',148,'union',[{'atom',148,'always'}|[{'atom',148,'yes'}|[{'atom',148,'no'}]]]},[]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'parse_transform',2},[{'type',180,'fun',[{'type',180,'product',[{'remote_type',180,[{'atom',180,'erl_syntax'}|[{'atom',180,'forms'}|[[]]]]}|[{'type',180,'list',[{'type',180,'option',[]}]}]]}|[{'type',181,'list',[{'remote_type',181,[{'atom',181,'erl_syntax'}|[{'atom',181,'syntaxTree'}|[[]]]]}]}]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'merge',2},[{'type',206,'fun',[{'type',206,'product',[{'type',206,'atom',[]}|[{'type',206,'list',[{'remote_type',206,[{'atom',206,'file'}|[{'atom',206,'filename'}|[[]]]]}]}]]}|[{'type',206,'nonempty_list',[{'remote_type',206,[{'atom',206,'file'}|[{'atom',206,'filename'}|[[]]]]}]}]]}]}],
		%% Line 340
		'spec' =
		    %% Line 340
		    [{{'merge',3},[{'type',340,'fun',[{'type',340,'product',[{'type',340,'atom',[]}|[{'type',340,'list',[{'remote_type',340,[{'atom',340,'file'}|[{'atom',340,'filename'}|[[]]]]}]}|[{'type',340,'list',[{'type',340,'option',[]}]}]]]}|[{'type',340,'nonempty_list',[{'remote_type',340,[{'atom',340,'file'}|[{'atom',340,'filename'}|[[]]]]}]}]]}]}],
		%% Line 359
		'spec' =
		    %% Line 359
		    [{{'merge_files',3},[{'type',359,'fun',[{'type',359,'product',[{'type',359,'atom',[]}|[{'type',359,'list',[{'remote_type',359,[{'atom',359,'file'}|[{'atom',359,'filename'}|[[]]]]}]}|[{'type',359,'list',[{'type',359,'option',[]}]}]]]}|[{'type',360,'tuple',[{'remote_type',360,[{'atom',360,'erl_syntax'}|[{'atom',360,'syntaxTree'}|[[]]]]}|[{'type',360,'list',[{'type',360,'stubDescriptor',[]}]}]]}]]}]}],
		%% Line 461
		'spec' =
		    %% Line 461
		    [{{'merge_files',4},[{'type',461,'fun',[{'type',461,'product',[{'type',461,'atom',[]}|[{'remote_type',461,[{'atom',461,'erl_syntax'}|[{'atom',461,'forms'}|[[]]]]}|[{'type',461,'list',[{'remote_type',461,[{'atom',461,'file'}|[{'atom',461,'filename'}|[[]]]]}]}|[{'type',461,'list',[{'type',461,'option',[]}]}]]]]}|[{'type',462,'tuple',[{'remote_type',462,[{'atom',462,'erl_syntax'}|[{'atom',462,'syntaxTree'}|[[]]]]}|[{'type',462,'list',[{'type',462,'stubDescriptor',[]}]}]]}]]}]}],
		%% Line 690
		'type' =
		    %% Line 690
		    [{{'record','merge'},[{'typed_record_field',{'record_field',690,{'atom',690,'target'}},{'type',690,'union',[{'atom',690,'undefined'}|[{'type',690,'atom',[]}]]}}|[{'typed_record_field',{'record_field',691,{'atom',691,'sources'}},{'type',691,'union',[{'atom',691,'undefined'}|[{'remote_type',691,[{'atom',691,'ordsets'}|[{'atom',691,'ordset'}|[[{'type',691,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',692,{'atom',692,'export'}},{'type',692,'union',[{'atom',692,'undefined'}|[{'remote_type',692,[{'atom',692,'ordsets'}|[{'atom',692,'ordset'}|[[{'type',692,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',693,{'atom',693,'static'}},{'type',693,'union',[{'atom',693,'undefined'}|[{'remote_type',693,[{'atom',693,'ordsets'}|[{'atom',693,'ordset'}|[[{'type',693,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',694,{'atom',694,'safe'}},{'type',694,'union',[{'atom',694,'undefined'}|[{'remote_type',694,[{'atom',694,'ordsets'}|[{'atom',694,'ordset'}|[[{'type',694,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',695,{'atom',695,'preserved'}},{'type',695,'union',[{'atom',695,'undefined'}|[{'type',695,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',696,{'atom',696,'no_headers'}},{'type',696,'union',[{'atom',696,'undefined'}|[{'type',696,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',697,{'atom',697,'notes'}},{'type',697,'union',[{'atom',697,'undefined'}|[{'type',697,'notes',[]}]]}}|[{'typed_record_field',{'record_field',698,{'atom',698,'redirect'}},{'type',698,'union',[{'atom',698,'undefined'}|[{'remote_type',698,[{'atom',698,'dict'}|[{'atom',698,'dict'}|[[{'type',698,'atom',[]}|[{'type',698,'atom',[]}]]]]]}]]}}|[{'typed_record_field',{'record_field',699,{'atom',699,'no_imports'}},{'type',699,'union',[{'atom',699,'undefined'}|[{'remote_type',699,[{'atom',699,'ordsets'}|[{'atom',699,'ordset'}|[[{'type',699,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',700,{'atom',700,'options'}},{'type',700,'union',[{'atom',700,'undefined'}|[{'type',700,'list',[{'type',700,'option',[]}]}]]}}]]]]]]]]]]],[]}],
		%% Line 703
		'spec' =
		    %% Line 703
		    [{{'merge_sources',3},[{'type',703,'fun',[{'type',703,'product',[{'type',703,'atom',[]}|[{'type',703,'list',[{'remote_type',703,[{'atom',703,'erl_syntax'}|[{'atom',703,'forms'}|[[]]]]}]}|[{'type',703,'list',[{'type',703,'option',[]}]}]]]}|[{'type',704,'tuple',[{'remote_type',704,[{'atom',704,'erl_syntax'}|[{'atom',704,'syntaxTree'}|[[]]]]}|[{'type',704,'list',[{'type',704,'stubDescriptor',[]}]}]]}]]}]}],
		%% Line 730
		'type' =
		    %% Line 730
		    [{{'record','state'},[{'typed_record_field',{'record_field',730,{'atom',730,'export'}},{'type',730,'union',[{'atom',730,'undefined'}|[{'remote_type',730,[{'atom',730,'sets'}|[{'atom',730,'set'}|[[{'type',730,'tuple',[{'type',730,'atom',[]}|[{'type',730,'arity',[]}]]}]]]]}]]}}],[]}],
		%% Line 1039
		'type' =
		    %% Line 1039
		    [{'atts',{'type',1039,'union',[{'atom',1039,'delete'}|[{'atom',1039,'kill'}]]},[]}],
		%% Line 1040
		'type' =
		    %% Line 1040
		    [{'file_atts',{'type',1040,'union',[{'atom',1040,'delete'}|[{'atom',1040,'keep'}|[{'atom',1040,'kill'}]]]},[]}],
		%% Line 1042
		'type' =
		    %% Line 1042
		    [{{'record','filter'},[{'typed_record_field',{'record_field',1042,{'atom',1042,'records'}},{'type',1042,'union',[{'atom',1042,'undefined'}|[{'remote_type',1042,[{'atom',1042,'sets'}|[{'atom',1042,'set'}|[[{'type',1042,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',1043,{'atom',1043,'file_attributes'}},{'type',1043,'union',[{'atom',1043,'undefined'}|[{'type',1043,'file_atts',[]}]]}}|[{'typed_record_field',{'record_field',1044,{'atom',1044,'attributes'}},{'type',1044,'union',[{'atom',1044,'undefined'}|[{'type',1044,'atts',[]}]]}}]]],[]}],
		%% Line 1585
		'type' =
		    %% Line 1585
		    [{'map_fun',{'type',1585,'fun',[{'type',1585,'product',[{'type',1585,'tuple',[{'type',1585,'atom',[]}|[{'type',1585,'integer',[]}]]}]}|[{'type',1585,'tuple',[{'type',1585,'atom',[]}|[{'type',1585,'integer',[]}]]}]]},[]}],
		%% Line 1589
		'type' =
		    %% Line 1589
		    [{{'record','code'},[{'typed_record_field',{'record_field',1589,{'atom',1589,'module'}},{'type',1589,'union',[{'atom',1589,'undefined'}|[{'type',1589,'atom',[]}]]}}|[{'typed_record_field',{'record_field',1590,{'atom',1590,'target'}},{'type',1590,'union',[{'atom',1590,'undefined'}|[{'type',1590,'atom',[]}]]}}|[{'typed_record_field',{'record_field',1591,{'atom',1591,'sources'}},{'type',1591,'union',[{'atom',1591,'undefined'}|[{'remote_type',1591,[{'atom',1591,'sets'}|[{'atom',1591,'set'}|[[{'type',1591,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',1592,{'atom',1592,'static'}},{'type',1592,'union',[{'atom',1592,'undefined'}|[{'remote_type',1592,[{'atom',1592,'sets'}|[{'atom',1592,'set'}|[[{'type',1592,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',1593,{'atom',1593,'safe'}},{'type',1593,'union',[{'atom',1593,'undefined'}|[{'remote_type',1593,[{'atom',1593,'sets'}|[{'atom',1593,'set'}|[[{'type',1593,'atom',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',1594,{'atom',1594,'preserved'}},{'type',1594,'union',[{'atom',1594,'undefined'}|[{'type',1594,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',1595,{'atom',1595,'no_headers'}},{'type',1595,'union',[{'atom',1595,'undefined'}|[{'type',1595,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',1596,{'atom',1596,'notes'}},{'type',1596,'union',[{'atom',1596,'undefined'}|[{'type',1596,'notes',[]}]]}}|[{'typed_record_field',{'record_field',1597,{'atom',1597,'map'}},{'type',1597,'union',[{'atom',1597,'undefined'}|[{'type',1597,'map_fun',[]}]]}}|[{'typed_record_field',{'record_field',1598,{'atom',1598,'renaming'}},{'type',1598,'union',[{'atom',1598,'undefined'}|[{'type',1598,'fun',[{'type',1598,'product',[{'type',1598,'atom',[]}]}|[{'type',1598,'map_fun',[]}]]}]]}}|[{'typed_record_field',{'record_field',1599,{'atom',1599,'expand'}},{'type',1599,'union',[{'atom',1599,'undefined'}|[{'remote_type',1599,[{'atom',1599,'dict'}|[{'atom',1599,'dict'}|[[{'type',1599,'tuple',[{'type',1599,'atom',[]}|[{'type',1599,'integer',[]}]]}|[{'type',1600,'tuple',[{'type',1600,'atom',[]}|[{'type',1600,'tuple',[{'type',1600,'atom',[]}|[{'type',1600,'integer',[]}]]}]]}]]]]]}]]}}|[{'typed_record_field',{'record_field',1601,{'atom',1601,'redirect'}},{'type',1601,'union',[{'atom',1601,'undefined'}|[{'remote_type',1601,[{'atom',1601,'dict'}|[{'atom',1601,'dict'}|[[{'type',1601,'atom',[]}|[{'type',1601,'atom',[]}]]]]]}]]}}]]]]]]]]]]]],[]}],
		%% Line 2347
		'spec' =
		    %% Line 2347
		    [{{'create_stubs',2},[{'type',2347,'fun',[{'type',2347,'product',[{'type',2347,'list',[{'type',2347,'stubDescriptor',[]}]}|[{'type',2347,'list',[{'type',2347,'option',[]}]}]]}|[{'type',2347,'list',[{'type',2347,'string',[]}]}]]}]}],
		%% Line 2411
		'type' =
		    %% Line 2411
		    [{'renamings',{'type',2411,'list',[{'type',2411,'tuple',[{'type',2411,'atom',[]}|[{'type',2411,'atom',[]}]]}]},[]}],
		%% Line 2417
		'spec' =
		    %% Line 2417
		    [{{'rename',2},[{'type',2417,'fun',[{'type',2417,'product',[{'type',2417,'list',[{'remote_type',2417,[{'atom',2417,'file'}|[{'atom',2417,'filename'}|[[]]]]}]}|[{'type',2417,'renamings',[]}]]}|[{'type',2417,'list',[{'type',2417,'string',[]}]}]]}]}],
		%% Line 2499
		'spec' =
		    %% Line 2499
		    [{{'rename',3},[{'type',2499,'fun',[{'type',2499,'product',[{'type',2499,'list',[{'remote_type',2499,[{'atom',2499,'file'}|[{'atom',2499,'filename'}|[[]]]]}]}|[{'type',2499,'renamings',[]}|[{'type',2499,'list',[{'type',2499,'term',[]}]}]]]}|[{'type',2499,'list',[{'type',2499,'string',[]}]}]]}]}]]
'default_printer'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	%% Line 136
	call 'erl_prettypr':'format'
	    (_cor1, _cor0)
'parse_transform'/2 =
    %% Line 183
    fun (_cor1,_cor0) ->
	%% Line 185
	( case apply 'get_module_info'/1
		   (_cor1) of
	    ( <( {'module',_rec0,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Opts> =
		      %% Line 186
		      call 'proplists':'append_values'
			  ('igor', _cor0)
		  in  let <Files> =
			  %% Line 187
			  call 'proplists':'append_values'
			      ('files', Opts)
		      in  let <Opts1> =
			      %% Line 190
			      [{'comments','false'}|%% Line 191
						    [{'notes','no'}|%% Line 192
								    [{'no_imports','true'}|%% Line 193
											   [{'file_attributes','yes'}|%% Line 194
														      [{'preprocess','true'}|%% Line 195
																	     [{'export',[_rec0|[]]}|%% Line 196
																				    Opts]]]]]]
			  in  %% Line 197
			      case apply 'merge_files'/4
				       (_rec0, [_cor1|[]], Files, Opts1) of
				<{T,_cor19}> when 'true' ->
				    do  %% Line 198
					apply 'verbose'/2
					    ([100|[111|[110|[101|[46]]]]], Opts1)
					%% Line 199
					call 'erl_syntax':'revert_forms'
					    (T)
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor9})
				  -| ['compiler_generated'] )
			      end
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','module'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'merge'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	%% Line 209
	apply 'merge'/3
	    (_cor1, _cor0, [])
'merge'/3 =
    %% Line 342
    fun (_cor2,_cor1,_cor0) ->
	let <Opts1> =
	    %% Line 343
	    call 'erlang':'++'
		(_cor0, [{'backup_suffix',[46|[98|[97|[107]]]]}|['backups'|[{'dir',[]}|[{'printer',( 'default_printer'/2
												     -| [{'id',{0,0,'-merge/3-fun-0-'}}] )}|[{'stub_dir',[115|[116|[117|[98|[115]]]]]}|['stubs'|[{'suffix',[46|[101|[114|[108]]]]}|[{'verbose','false'}]]]]]]]])
	in  %% Line 344
	    case apply 'merge_files1'/2
		     (_cor1, Opts1) of
	      <{Sources,Enc}> when 'true' ->
		  %% Line 345
		  case apply 'merge_sources'/3
			   (_cor2, Sources, Opts1) of
		    <{Tree,Stubs}> when 'true' ->
			let <Dir> =
			    %% Line 346
			    call 'proplists':'get_value'
				('dir', Opts1, [])
			in  let <Filename> =
				%% Line 347
				call 'proplists':'get_value'
				    ('outfile', Opts1, _cor2)
			    in  let <_cor8> =
				    %% Line 348
				    ( case <> of
					<>
					    when call 'erlang':'=/='
						  (Enc,
						   'none') ->
					    ( [{'encoding',Enc}|[]]
					      -| ['compiler_generated'] )
					( <> when 'true' ->
					      []
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				in  let <_cor10> =
					%% Line 349
					call 'erlang':'++'
					    (_cor8, Opts1)
				    in  let <File> =
					    %% Line 349
					    apply 'write_module'/4
						(Tree, Filename, Dir, _cor10)
					in  let <_cor12> =
						%% Line 350
						apply 'maybe_create_stubs'/2
						    (Stubs, Opts1)
					    in  %% Line 350
						[File|_cor12]
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'merge_files'/3 =
    %% Line 362
    fun (_cor2,_cor1,_cor0) ->
	%% Line 363
	apply 'merge_files'/4
	    (_cor2, [], _cor1, _cor0)
'merge_files'/4 =
    %% Line 464
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 465
	case apply 'merge_files1'/2
		 (_cor1, _cor0) of
	  <{Sources,_X_Encoding}> when 'true' ->
	      let <_cor5> =
		  %% Line 466
		  call 'erlang':'++'
		      (_cor2, Sources)
	      in  %% Line 466
		  apply 'merge_sources'/3
		      (_cor3, _cor5, _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'merge_files1'/2 =
    %% Line 468
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor13> when 'true' ->
	      do  %% Line 469
		  apply 'report_error'/1
		      ([110|[111|[32|[102|[105|[108|[101|[115|[32|[116|[111|[32|[109|[101|[114|[103|[101|[46]]]]]]]]]]]]]]]]]])
		  %% Line 470
		  call 'erlang':'exit'
		      ('badarg')
	  %% Line 471
	  <Files,Opts> when 'true' ->
	      let <Opts1> =
		  %% Line 472
		  call 'erlang':'++'
		      (Opts, [{'includes',[[46]]}|[{'macros',[]}|[{'preprocess','false'}|['comments']]]])
	      in  let <_cor8> =
		      %% Line 476
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[F|_cor4]> when 'true' ->
					  let <_cor6> =
					      apply 'read_module'/2
						  (F, Opts1)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Files)
			-| ['list_comprehension'] )
		  in  %% Line 477
		      case call 'lists':'unzip'
			       (_cor8) of
			<{Sources,[Encoding|_cor14]}> when 'true' ->
			    %% Line 478
			    {Sources,Encoding}
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	end
'merge_sources'/3 =
    %% Line 706
    fun (_cor2,_cor1,_cor0) ->
	let <Opts1> =
	    %% Line 708
	    call 'erlang':'++'
		(_cor0, [{'export_all','false'}|[{'file_attributes','no'}|[{'no_imports','false'}|[{'notes','yes'}|['tidy'|[{'verbose','false'}]]]]]])
	in  let <_cor10> =
		%% Line 714
		case _cor1 of
		  %% Line 715
		  <[]> when 'true' ->
		      do  %% Line 716
			  apply 'report_error'/1
			      ([110|[111|[32|[115|[111|[117|[114|[99|[101|[115|[32|[116|[111|[32|[109|[101|[114|[103|[101|[46]]]]]]]]]]]]]]]]]]]])
			  %% Line 717
			  call 'erlang':'exit'
			      ('badarg')
		  %% Line 718
		  <_cor22> when 'true' ->
		      %% Line 719
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[%% Line 722
					M|_cor5]> when 'true' ->
					  let <_cor7> =
					      case <> of
						<>
						    when call 'erlang':'is_list'
							  (M) ->
						    call 'erl_syntax':'form_list'
							(M)
						%% Line 720
						<> when 'true' ->
						    M
					      end
					  in  let <_cor8> =
						  %% Line 722
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [_cor7|_cor8]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor1)
			-| ['list_comprehension'] )
		end
	    in  let <_cor17> =
		    %% Line 725
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor14) ->
				  case _cor14 of
				    <[T|_cor13]> when 'true' ->
					let <_cor15> =
					    apply 'get_module_info'/1
						(T)
					in  let <_cor16> =
						apply 'lc$^1'/1
						    (_cor13)
					    in  ( [_cor15|_cor16]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor14> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor14})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^1'/1
			      (_cor10)
		      -| ['list_comprehension'] )
		in  %% Line 726
		    apply 'merge_sources_1'/4
			(_cor2, _cor17, _cor10, Opts1)
'state__add_export'/3 =
    %% Line 732
    fun (_cor2,_cor1,_cor0) ->
	%% Line 734
	( case _cor0 of
	    ( <( {'state',_rec4}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec1> =
		      call 'sets':'add_element'
			  ({_cor2,_cor1}, _rec4)
		  in  {'state',_rec1}
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'merge_sources_1'/4 =
    %% Line 736
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 740
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[M|_cor5]> when 'true' ->
				( case M of
				    ( <( {'module',_rec5,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor9> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_rec5|_cor9]
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_cor70> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','module'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  do  %% Line 741
		case apply 'duplicates'/1
			 (_cor10) of
		  %% Line 742
		  <[]> when 'true' ->
		      'ok'
		  %% Line 744
		  <Ns1> when 'true' ->
		      do  %% Line 745
			  apply 'report_error'/2
			      ([115|[97|[109|[101|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[115|[32|[114|[101|[112|[101|[97|[116|[101|[100|[32|[105|[110|[32|[105|[110|[112|[117|[116|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 746
																																     [Ns1|[]])
			  %% Line 747
			  call 'erlang':'exit'
			      ('error')
		end
		let <Sources> =
		    %% Line 749
		    call 'ordsets':'from_list'
			(_cor10)
		in  let <All> =
			%% Line 750
			call 'ordsets':'add_element'
			    (_cor3, Sources)
		    in  let <_cor18> =
			    %% Line 761
			    case call 'proplists':'append_values'
				     ('export', _cor0) of
			      %% Line 762
			      <[]> when 'true' ->
				  %% Line 763
				  case call 'ordsets':'is_element'
					   (_cor3, Sources) of
				    %% Line 764
				    <'true'> when 'true' ->
					%% Line 765
					[_cor3|[]]
				    %% Line 766
				    <'false'> when 'true' ->
					let <_cor15> =
					    %% Line 767
					    call 'erlang':'hd'
						(_cor10)
					in  %% Line 767
					    [_cor15|[]]
				    ( <_cor16> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor16})
				      -| ['compiler_generated'] )
				  end
			      %% Line 769
			      <Es1>
				  when call 'erlang':'is_list'
					(Es1) ->
				  %% Line 770
				  call 'ordsets':'from_list'
				      (Es1)
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor17})
				-| ['compiler_generated'] )
			    end
			in  let <_cor21> =
				%% Line 772
				case call 'proplists':'get_bool'
					 ('export_all', _cor0) of
				  %% Line 773
				  <'false'> when 'true' ->
				      _cor18
				  %% Line 775
				  <'true'> when 'true' ->
				      %% Line 776
				      call 'ordsets':'union'
					  (Sources, _cor18)
				  ( <_cor20> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor20})
				    -| ['compiler_generated'] )
				end
			    in  do  %% Line 778
				    apply 'check_module_names'/3
					(_cor21, Sources, [100|[101|[99|[108|[97|[114|[101|[100|[32|[97|[115|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 779
					apply 'verbose'/3
					    ([109|[111|[100|[117|[108|[101|[115|[32|[101|[120|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[96|[126|[119|[39|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor3|[_cor21|[]]], _cor0)
					let <_cor23> =
					    %% Line 785
					    call 'proplists':'append_values'
						('static', _cor0)
					in  let <Static0> =
						%% Line 785
						call 'ordsets':'from_list'
						    (_cor23)
					    in  let <_cor26> =
						    %% Line 786
						    case call 'proplists':'is_defined'
							     ('static', _cor0) of
						      %% Line 787
						      <'false'> when 'true' ->
							  %% Line 788
							  All
						      %% Line 789
						      <'true'> when 'true' ->
							  %% Line 790
							  call 'ordsets':'add_element'
							      (_cor3, Static0)
						      ( <_cor25> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor25})
							-| ['compiler_generated'] )
						    end
						in  do  %% Line 792
							apply 'check_module_names'/3
							    (_cor26, All, [100|[101|[99|[108|[97|[114|[101|[100|[32|[39|[115|[116|[97|[116|[105|[99|[39]]]]]]]]]]]]]]]]])
							do  %% Line 793
							    apply 'verbose'/3
								([115|[116|[97|[116|[105|[99|[32|[109|[111|[100|[117|[108|[101|[115|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]], [_cor26|[]], _cor0)
							    let <_cor31> =
								%% Line 798
								case call 'proplists':'is_defined'
									 ('safe', _cor0) of
								  %% Line 799
								  <'false'> when 'true' ->
								      let <_cor28> =
									  %% Line 801
									  call 'ordsets':'add_element'
									      (_cor3, Static0)
								      in  %% Line 800
									  call 'ordsets':'subtract'
									      (Sources, _cor28)
								  %% Line 802
								  <'true'> when 'true' ->
								      let <_cor29> =
									  %% Line 804
									  call 'proplists':'append_values'
									      ('safe', _cor0)
								      in  %% Line 803
									  call 'ordsets':'from_list'
									      (_cor29)
								  ( <_cor30> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor30})
								    -| ['compiler_generated'] )
								end
							    in  do  %% Line 806
								    apply 'check_module_names'/3
									(_cor31, All, [100|[101|[99|[108|[97|[114|[101|[100|[32|[39|[115|[97|[102|[101|[39]]]]]]]]]]]]]]])
								    do  %% Line 807
									apply 'verbose'/3
									    ([115|[97|[102|[101|[32|[109|[111|[100|[117|[108|[101|[115|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]], [_cor31|[]], _cor0)
									let <_cor36> =
									    %% Line 810
									    ( case call 'ordsets':'is_element'
										       (_cor3, Sources) of
										( <( 'true'
										     -| ['compiler_generated'] )> when 'true' ->
										      call 'ordsets':'is_element'
											  (_cor3, _cor21)
										  -| ['compiler_generated'] )
										( <( 'false'
										     -| ['compiler_generated'] )> when 'true' ->
										      'false'
										  -| ['compiler_generated'] )
										( <_cor34> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {( 'badarg'
												  -| ['compiler_generated'] ),_cor34}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
									in  let <_cor38> =
										%% Line 811
										( case _cor36 of
										    ( <( 'true'
											 -| ['compiler_generated'] )> when 'true' ->
											  'true'
										      -| ['compiler_generated'] )
										    ( <( 'false'
											 -| ['compiler_generated'] )> when 'true' ->
											  call 'proplists':'get_bool'
											      ('no_banner', _cor0)
										      -| ['compiler_generated'] )
										    ( <_cor33> when 'true' ->
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( 'error'
																 -| ['compiler_generated'] )
												(( {( 'badarg'
												      -| ['compiler_generated'] ),_cor33}
												   -| ['compiler_generated'] ))
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										  end
										  -| ['compiler_generated'] )
									    in  let <NoHeaders> =
										    %% Line 812
										    call 'proplists':'get_bool'
											('no_headers', _cor0)
										in  let <Notes> =
											%% Line 813
											call 'proplists':'get_value'
											    ('notes', _cor0, 'always')
										    in  let <Rs> =
											    %% Line 814
											    call 'proplists':'append_values'
												('redirect', _cor0)
											in  let <_cor51> =
												%% Line 815
												case apply 'is_atom_map'/1
													 (Rs) of
												  %% Line 816
												  <'true'> when 'true' ->
												      let <_cor47> =
													  %% Line 817
													  ( letrec
														'lc$^1'/1 =
														    fun (_cor45) ->
															case _cor45 of
															  <[{M,_cor71}|_cor44]> when 'true' ->
															      let <_cor46> =
																  apply 'lc$^1'/1
																      (_cor44)
															      in  ( [M|_cor46]
																    -| ['compiler_generated'] )
															  ( <[_cor43|_cor44]> when 'true' ->
																apply 'lc$^1'/1
																    (_cor44)
															    -| ['compiler_generated'] )
															  <[]> when 'true' ->
															      []
															  ( <_cor45> when 'true' ->
																( primop 'match_fail'
																      ({'function_clause',_cor45})
																  -| [{'function_name',{'lc$^1',1}}] )
															    -| ['compiler_generated'] )
															end
													    in  apply 'lc$^1'/1
														    (Rs)
													    -| ['list_comprehension'] )
												      in  let <Ms> =
													      %% Line 817
													      call 'ordsets':'from_list'
														  (_cor47)
													  in  do  %% Line 818
														  case call 'ordsets':'intersection'
															   (Sources, Ms) of
														    %% Line 819
														    <[]> when 'true' ->
															'ok'
														    %% Line 821
														    <Ms1> when 'true' ->
															do  %% Line 822
															    apply 'report_error'/2
																([99|[97|[110|[110|[111|[116|[32|[114|[101|[100|[105|[114|[101|[99|[116|[32|[99|[97|[108|[108|[115|[32|[116|[111|[32|[109|[111|[100|[117|[108|[101|[115|[32|[105|[110|[32|[105|[110|[112|[117|[116|[32|[115|[101|[116|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 824
																																																			       [Ms1|[]])
															    %% Line 825
															    call 'erlang':'exit'
																('error')
														  end
														  %% Line 827
														  call 'dict':'from_list'
														      (Rs)
												  %% Line 828
												  <'false'> when 'true' ->
												      do  %% Line 829
													  apply 'report_error'/2
													      ([98|[97|[100|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[96|[114|[101|[100|[105|[114|[101|[99|[116|[39|[32|[111|[112|[116|[105|[111|[110|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 831
																																							  [Rs|[10]])
													  %% Line 832
													  call 'erlang':'exit'
													      ('error')
												  ( <_cor50> when 'true' ->
													primop 'match_fail'
													    ({'case_clause',_cor50})
												    -| ['compiler_generated'] )
												end
											    in  let <_cor57> =
												    %% Line 834
												    case call 'proplists':'get_bool'
													     ('no_imports', _cor0) of
												      %% Line 835
												      <'true'> when 'true' ->
													  let <_cor53> =
													      %% Line 837
													      call 'dict':'fetch_keys'
														  (_cor51)
													  in  let <_cor54> =
														  %% Line 836
														  call 'erlang':'++'
														      (Sources, _cor53)
													      in  %% Line 836
														  call 'ordsets':'from_list'
														      (_cor54)
												      %% Line 838
												      <'false'> when 'true' ->
													  let <_cor55> =
													      %% Line 839
													      call 'dict':'fetch_keys'
														  (_cor51)
													  in  %% Line 839
													      call 'ordsets':'from_list'
														  (_cor55)
												      ( <_cor56> when 'true' ->
													    primop 'match_fail'
														({'case_clause',_cor56})
													-| ['compiler_generated'] )
												    end
												in  let <Env> =
													%% Line 841
													{'merge',_cor3,%% Line 842
														       Sources,_cor21,_cor26,_cor31,_cor38,%% Line 847
																			   NoHeaders,%% Line 848
																				     Notes,_cor51,_cor57,_cor0}
												    in  %% Line 852
													apply 'merge_sources_2'/4
													    (Env, _cor2, _cor1, _cor0)
'is_atom_map'/1 =
    %% Line 854
    fun (_cor0) ->
	case _cor0 of
	  <[{A1,A2}|As]>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(A1)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (A2)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 855
	      apply 'is_atom_map'/1
		  (As)
	  %% Line 856
	  <[]> when 'true' ->
	      %% Line 857
	      'true'
	  %% Line 858
	  <_cor4> when 'true' ->
	      %% Line 859
	      'false'
	end
'check_module_names'/3 =
    %% Line 861
    fun (_cor2,_cor1,_cor0) ->
	%% Line 862
	case call 'erlang':'--'
		 (_cor2, _cor1) of
	  %% Line 863
	  <[]> when 'true' ->
	      %% Line 864
	      'ok'
	  %% Line 865
	  <Xs> when 'true' ->
	      do  %% Line 866
		  apply 'report_error'/2
		      ([117|[110|[107|[110|[111|[119|[110|[32|[109|[111|[100|[117|[108|[101|[115|[32|[126|[115|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[Xs|[]]])
		  %% Line 867
		  call 'erlang':'exit'
		      ('error')
	end
'merge_sources_2'/4 =
    %% Line 872
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 874
	case apply 'merge_namespaces'/2
		 (_cor2, _cor3) of
	  <{Names,Renaming}> when 'true' ->
	      %% Line 879
	      case apply 'merge_info'/4
		       (_cor2, Names, Renaming, _cor3) of
		<{Module,Expansions}> when 'true' ->
		    let <_cor6> =
			%% Line 884
			call 'sets':'new'
			    ()
		    in  let <St> = {%% Line 884
			     'state',_cor6}
			in  %% Line 885
			    case apply 'merge_code'/6
				     (_cor1, _cor2, Expansions, %% Line 886
								Renaming, _cor3, %% Line 886
										 St) of
			      <{Tree,Header,St1}> when 'true' ->
				  let <_cor9> =
				      %% Line 890
				      apply 'make_preamble'/4
					  (Module, Header, _cor3, %% Line 891
								  St1)
				  in  let <_cor10> =
					  %% Line 892
					  apply 'filter_forms'/2
					      (Tree, _cor3)
				      in  let <Tree1> =
					      %% Line 890
					      call 'erl_syntax':'form_list'
						  ([_cor9|%% Line 892
							  [_cor10|[]]])
					  in  let <_cor13> =
						  %% Line 896
						  apply 'tidy'/2
						      (Tree1, _cor0)
					      in  let <_cor12> =
						      %% Line 896
						      apply 'make_stubs'/3
							  (_cor2, Renaming, _cor3)
						  in  %% Line 896
						      {_cor13,_cor12}
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'make_preamble'/4 =
    %% Line 898
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 899
	( case _cor3 of
	    ( <( {'module',_rec6,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 901
		  ( case _cor0 of
		      ( <( {'state',_rec8}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor12> =
				call 'sets':'to_list'
				    (_rec8)
			    in  let <Extras> =
				    call 'ordsets':'from_list'
					(_cor12)
				in  let <Exports> =
					%% Line 902
					apply 'make_exports'/2
					    (_cor33, Extras)
				    in  let <Imports> =
					    %% Line 903
					    apply 'make_imports'/1
						(_cor34)
					in  let <Attributes> =
						%% Line 904
						apply 'make_attributes'/1
						    (_cor35)
					    in  let <_cor25> =
						    %% Line 905
						    apply 'module_header'/4
							(_cor2, _rec6, _cor31, _cor1)
						in  let <_cor23> =
							%% Line 908
							call 'erlang':'++'
							    (Imports, Attributes)
						    in  let <_cor24> =
							    %% Line 907
							    call 'erlang':'++'
								(Exports, _cor23)
							in  let <_cor26> =
								%% Line 906
								call 'erlang':'++'
								    (_cor25, _cor24)
							    in  %% Line 905
								call 'erl_syntax':'form_list'
								    (_cor26)
			-| ['compiler_generated'] )
		      ( <_cor45> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','module'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_header'/4 =
    %% Line 913
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 914
	( case _cor0 of
	    ( <( {'merge',_cor26,_cor27,_cor28,_cor29,_cor30,_rec12,_cor31,_cor32,_cor33,_cor34,_cor35}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec12 of
		    %% Line 915
		    <'true'> when 'true' ->
			%% Line 916
			apply 'update_header'/3
			    (_cor3, _cor2, _cor1)
		    %% Line 917
		    <'false'> when 'true' ->
			let <_cor6> =
			    %% Line 926
			    apply 'timestamp'/0
				()
			in  let <_cor15> =
				%% Line 922
				( letrec
				      'lc$^0'/1 =
					  fun (_cor11) ->
					      case _cor11 of
						<[%% Line 924
						  M|_cor8]> when 'true' ->
						    let <_cor12> =
							call 'io_lib':'fwrite'
							    ([9|[9|[96|[126|[119|[39]]]]]], %% Line 923
											    [M|[]])
						    in  let <_cor13> =
							    call 'lists':'flatten'
								(_cor12)
							in  let <_cor14> =
								%% Line 924
								apply 'lc$^0'/1
								    (_cor8)
							    in  ( [_cor13|_cor14]
								  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 925
						    [[]|%% Line 926
							[_cor6|%% Line 927
							       [[]]]]
						( <_cor11> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor11})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (_cor27)
				  -| ['list_comprehension'] )
			    in  let <_cor16> =
				    %% Line 922
				    [[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[84|[104|[105|[115|[32|[109|[111|[100|[117|[108|[101|[32|[119|[97|[115|[32|[102|[111|[114|[109|[101|[100|[32|[98|[121|[32|[109|[101|[114|[103|[105|[110|[103|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101|[115|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[]|_cor15]]]
				in  let <_cor17> =
					%% Line 918
					apply 'comment'/1
					    (_cor16)
				    in  let <_cor19> =
					    %% Line 928
					    call 'erl_syntax':'atom'
						('module')
					in  let <_cor18> =
						%% Line 929
						call 'erl_syntax':'atom'
						    (_cor2)
					    in  let <_cor20> =
						    %% Line 928
						    call 'erl_syntax':'attribute'
							(_cor19, %% Line 929
								 [_cor18|[]])
						in  %% Line 918
						    [_cor17|%% Line 928
							    [_cor20|%% Line 929
								    []]]
		    ( <_cor21> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor21})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','merge'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'update_header'/3 =
    %% Line 932
    fun (_cor2,_cor1,_cor0) ->
	%% Line 933
	case call 'lists':'reverse'
		 (_cor2) of
	  <[M|Fs1]> when 'true' ->
	      let <_cor11> =
		  %% Line 934
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (_cor0,
			       'none') ->
			[]
		    %% Line 935
		    <> when 'true' ->
			let <_cor9> =
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor6) ->
					  case _cor6 of
					    <[%% Line 936
					      V|_cor5]> when 'true' ->
						let <_cor7> =
						    call 'erl_syntax':'variable'
							(V)
						in  let <_cor8> =
							%% Line 936
							apply 'lc$^0'/1
							    (_cor5)
						    in  ( [_cor7|_cor8]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor6> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor6})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (_cor0)
			      -| ['list_comprehension'] )
			in  let <_cor10> =
				call 'erl_syntax':'list'
				    (_cor9)
			    in  [_cor10|%% Line 936
					[]]
		  end
	      in  let <_cor14> =
		      %% Line 938
		      call 'erl_syntax':'atom'
			  ('module')
		  in  let <_cor13> =
			  %% Line 939
			  call 'erl_syntax':'atom'
			      (_cor1)
		      in  let <_cor15> =
			      %% Line 938
			      call 'erl_syntax':'attribute'
				  (_cor14, %% Line 939
					   [_cor13|_cor11])
			  in  let <M1> =
				  %% Line 938
				  apply 'rewrite'/2
				      (M, _cor15)
			      in  %% Line 940
				  call 'lists':'reverse'
				      ([M1|Fs1])
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'make_exports'/2 =
    %% Line 947
    fun (_cor1,_cor0) ->
	%% Line 948
	case call 'ordsets':'subtract'
		 (_cor0, _cor1) of
	  %% Line 949
	  <[]> when 'true' ->
	      let <_cor2> =
		  %% Line 950
		  apply 'make_export'/1
		      (_cor1)
	      in  %% Line 950
		  [_cor2|[]]
	  %% Line 951
	  <Es> when 'true' ->
	      let <_cor3> =
		  %% Line 952
		  apply 'make_export'/1
		      (_cor1)
	      in  let <_cor4> =
		      %% Line 953
		      apply 'comment'/1
			  ([[42|[42|[32|[84|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[101|[120|[112|[111|[114|[116|[115|[32|[97|[114|[101|[32|[110|[111|[116|[32|[111|[102|[102|[105|[99|[105|[97|[108|[58|[32|[42|[42]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  in  let <_cor5> =
			  %% Line 955
			  apply 'make_export'/1
			      (Es)
		      in  %% Line 952
			  [_cor3|%% Line 953
				 [_cor4|%% Line 955
					[_cor5|[]]]]
	end
'make_export'/1 =
    %% Line 958
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 959
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 961
			      {F,A}|_cor2]> when 'true' ->
				let <_cor5> =
				    call 'erl_syntax':'atom'
					(F)
				in  let <_cor4> =
					%% Line 960
					call 'erl_syntax':'integer'
					    (A)
				    in  let <_cor6> =
					    call 'erl_syntax':'arity_qualifier'
						(_cor5, _cor4)
					in  let <_cor7> =
						%% Line 961
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [_cor6|_cor7]
						  -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 961
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 962
	    case <> of
	      <>
		  when call 'erlang':'=:='
			(_cor8,
			 []) ->
		  %% Line 963
		  apply 'comment'/1
		      ([[42|[42|[32|[78|[111|[116|[104|[105|[110|[103|[32|[105|[115|[32|[111|[102|[102|[105|[99|[105|[97|[108|[108|[121|[32|[101|[120|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[116|[104|[105|[115|[32|[109|[111|[100|[117|[108|[101|[33|[32|[42|[42]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      %% Line 965
	      <> when 'true' ->
		  let <_cor11> =
		      %% Line 966
		      call 'erl_syntax':'atom'
			  ('export')
		  in  let <_cor10> =
			  %% Line 967
			  call 'erl_syntax':'list'
			      (_cor8)
		      in  %% Line 966
			  call 'erl_syntax':'attribute'
			      (_cor11, %% Line 967
				       [_cor10|[]])
	    end
'make_imports'/1 =
    %% Line 973
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 976
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[A = {F,{_X_M,_cor16}}|_cor2]>
				when call 'erlang':'=:='
				      (_cor16,
				       F) ->
				( case apply 'is_auto_import'/1
					   (F) of
				    <'false'> when 'true' ->
					let <_cor5> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [A|_cor5]
					      -| ['compiler_generated'] )
				    ( <'true'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor2)
				      -| ['compiler_generated'] )
				    ( <_cor_variable> when 'true' ->
					  call 'erlang':'error'
					      ('badarg')
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 977
	    ( letrec
		  'lc$^1'/1 =
		      fun (_cor12) ->
			  case _cor12 of
			    <[{M,Fs}|_cor10]> when 'true' ->
				let <_cor13> =
				    apply 'make_import'/2
					(M, Fs)
				in  let <_cor14> =
					apply 'lc$^1'/1
					    (_cor10)
				    in  ( [_cor13|_cor14]
					  -| ['compiler_generated'] )
			    ( <[_cor9|_cor10]> when 'true' ->
				  apply 'lc$^1'/1
				      (_cor10)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor12> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor12})
				    -| [{'function_name',{'lc$^1',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor11> =
		      apply 'group_imports'/1
			  (_cor7)
		  in  apply 'lc$^1'/1
			  (_cor11)
	      -| ['list_comprehension'] )
'make_import'/2 =
    %% Line 979
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 980
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 982
			      {F,A}|_cor3]> when 'true' ->
				let <_cor6> =
				    call 'erl_syntax':'atom'
					(F)
				in  let <_cor5> =
					%% Line 981
					call 'erl_syntax':'integer'
					    (A)
				    in  let <_cor7> =
					    call 'erl_syntax':'arity_qualifier'
						(_cor6, _cor5)
					in  let <_cor8> =
						%% Line 982
						apply 'lc$^0'/1
						    (_cor3)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 982
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor13> =
		%% Line 983
		call 'erl_syntax':'atom'
		    ('import')
	    in  let <_cor11> =
		    %% Line 984
		    call 'erl_syntax':'atom'
			(_cor1)
		in  let <_cor12> =
			%% Line 985
			call 'erl_syntax':'list'
			    (_cor9)
		    in  %% Line 983
			call 'erl_syntax':'attribute'
			    (_cor13, %% Line 984
				     [_cor11|%% Line 985
					     [_cor12|[]]])
'group_imports'/1 =
    %% Line 989
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 992
	    ( fun (_cor5,_cor4) ->
		  case <_cor5,_cor4> of
		    <{F,{M,_cor11}},D>
			when call 'erlang':'=:='
			      (_cor11,
			       F) ->
			%% Line 993
			case call 'dict':'find'
				 (M, D) of
			  %% Line 994
			  <{'ok',V}> when 'true' ->
			      let <V1> =
				  %% Line 995
				  call 'ordsets':'add_element'
				      (F, V)
			      in  %% Line 996
				  call 'dict':'store'
				      (M, V1, D)
			  %% Line 997
			  <'error'> when 'true' ->
			      %% Line 998
			      call 'dict':'store'
				  (M, [F|[]], D)
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor7,_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor7,_cor6})
			    -| [{'function_name',{'-group_imports/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-group_imports/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 1001
		call 'dict':'new'
		    ()
	    in  let <_cor9> =
		    %% Line 991
		    call 'lists':'foldl'
			(_cor8, _cor1, _cor0)
		in  %% Line 990
		    call 'dict':'to_list'
			(_cor9)
'make_stubs'/3 =
    %% Line 1010
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1011
	apply 'make_stubs_1'/3
	    (_cor2, _cor1, _cor0)
'make_stubs_1'/3 =
    %% Line 1013
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[M|Ms],Renaming,Env> when 'true' ->
	      %% Line 1014
	      ( case M of
		  ( <( {'module',_rec14,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1015
			case <> of
			  <>
			      when ( try
				      ( case <> of
					  ( <>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_record'
											 -| ['compiler_generated'] )
							(Env,
							 ( 'merge'
							   -| ['compiler_generated'] ),
							 ( 12
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] ) ->
						let <_cor10> =
						    ( call 'erlang':'element'
							  (2, Env)
						      -| ['compiler_generated'] )
						in  ( call 'erlang':'=/='
							  (_rec14, _cor10)
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 1016
			      ( case Env of
				  ( <( {'merge',_cor28,_cor29,_rec15,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
				       -| ['compiler_generated'] )> when 'true' ->
					case call 'ordsets':'is_element'
						 (_rec14, _rec15) of
					  %% Line 1017
					  <'true'> when 'true' ->
					      let <_cor14> =
						  %% Line 1018
						  apply Renaming
						      (_rec14)
					      in  let <_cor15> =
						      %% Line 1018
						      apply 'make_stub'/3
							  (M, _cor14, Env)
						  in  let <_cor16> =
							  %% Line 1019
							  apply 'make_stubs_1'/3
							      (Ms, Renaming, Env)
						      in  %% Line 1018
							  [_cor15|_cor16]
					  %% Line 1020
					  <'false'> when 'true' ->
					      %% Line 1021
					      apply 'make_stubs_1'/3
						  (Ms, Renaming, Env)
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor17})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_cor38> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','merge'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1023
			  <> when 'true' ->
			      %% Line 1024
			      apply 'make_stubs_1'/3
				  (Ms, Renaming, Env)
			end
		    -| ['compiler_generated'] )
		  ( <_cor27> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','module'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1026
	  <[],_cor39,_cor40> when 'true' ->
	      %% Line 1027
	      []
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'make_stubs_1',3}}] )
	    -| ['compiler_generated'] )
	end
'make_stub'/3 =
    %% Line 1029
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1030
	( case _cor0 of
	    ( <( {'merge',_rec16,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor13> =
		      %% Line 1031
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor10) ->
				    case _cor10 of
				      <[F|_cor7]> when 'true' ->
					  let <_cor11> =
					      apply _cor1
						  (F)
					  in  let <_cor12> =
						  apply 'lc$^0'/1
						      (_cor7)
					      in  ( [{F,{_rec16,_cor11}}|_cor12]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor10> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor10})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  ( case _cor2 of
				( <( {'module',_cor33,_cor34,_cor35,_rec17,_cor36,_cor37,_cor38}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'lc$^0'/1
					  (_rec17)
				  -| ['compiler_generated'] )
				( <_cor39> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','module'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['list_comprehension'] )
		  in  %% Line 1032
		      ( case _cor2 of
			  ( <( {'module',_rec18,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
			       -| ['compiler_generated'] )> when 'true' ->
				{_rec18,_cor13,_cor44}
			    -| ['compiler_generated'] )
			  ( <_cor46> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','module'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','merge'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'filter_forms'/2 =
    %% Line 1046
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1048
	    call 'erl_syntax':'flatten_form_list'
		(_cor1)
	in  let <Forms> =
		%% Line 1047
		call 'erl_syntax':'form_list_elements'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 1049
		    apply 'filter_forms_1'/2
			(Forms, _cor0)
		in  %% Line 1049
		    call 'erl_syntax':'form_list'
			(_cor4)
'filter_forms_1'/2 =
    %% Line 1051
    fun (_cor1,_cor0) ->
	%% Line 1052
	case apply 'filter_forms_2'/2
		 (_cor1, _cor0) of
	  <{Fs,_cor5}> when 'true' ->
	      %% Line 1053
	      call 'lists':'reverse'
		  (Fs)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'filter_forms_2'/2 =
    %% Line 1055
    fun (_cor1,_cor0) ->
	%% Line 1057
	( case _cor0 of
	    ( <( {'merge',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_rec20}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <FileAttrsOpt> =
		      call 'proplists':'get_value'
			  ('file_attributes', _rec20, 'comment')
		  in  let <_cor6> =
			  %% Line 1059
			  case FileAttrsOpt of
			    %% Line 1060
			    <'yes'> when 'true' ->
				'keep'
			    %% Line 1061
			    <'no'> when 'true' ->
				'delete'
			    %% Line 1062
			    <'comment'> when 'true' ->
				'kill'
			    %% Line 1063
			    <_cor41> when 'true' ->
				do  %% Line 1064
				    apply 'report_error'/2
					([105|[110|[118|[97|[108|[105|[100|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[111|[112|[116|[105|[111|[110|[32|[96|[102|[105|[108|[101|[95|[97|[116|[116|[114|[105|[98|[117|[116|[101|[115|[39|[58|[32|[126|[119|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1066
																																						      [FileAttrsOpt|[]])
				    %% Line 1067
				    call 'erlang':'exit'
					('error')
			  end
		      in  let <_cor15> =
			      %% Line 1069
			      case <> of
				<>
				    when ( try
					    let <_cor13> =
						( call 'erlang':'length'
						      (_cor31)
						  -| ['compiler_generated'] )
					    in  ( call 'erlang':'=:='
						      (_cor13, 1)
						  -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false'
					-| ['compiler_generated'] ) ->
				    %% Line 1070
				    'delete'
				%% Line 1071
				<> when 'true' ->
				    %% Line 1072
				    'kill'
			      end
			  in  let <_cor17> =
				  %% Line 1074
				  call 'sets':'new'
				      ()
			      in  let <S> =
				      %% Line 1074
				      {'filter',_cor17,_cor6,_cor15}
				  in  let <_cor27> =
					  %% Line 1078
					  ( fun (_cor24,_cor23) ->
						case <_cor24,_cor23> of
						  <F,{Fs,S0}> when 'true' ->
						      %% Line 1079
						      case apply 'filter_form'/2
							       (F, S0) of
							%% Line 1080
							<{'keep',S1}> when 'true' ->
							    %% Line 1081
							    {[F|Fs],S1}
							%% Line 1082
							<{'kill',S1}> when 'true' ->
							    let <_cor19> =
								%% Line 1083
								apply 'kill_form'/1
								    (F)
							    in  %% Line 1083
								{[_cor19|Fs],S1}
							%% Line 1084
							<{'delete',S1}> when 'true' ->
							    %% Line 1087
							    case call 'erl_syntax':'has_comments'
								     (F) of
							      %% Line 1088
							      <'false'> when 'true' ->
								  %% Line 1089
								  {Fs,S1}
							      %% Line 1090
							      <'true'> when 'true' ->
								  let <_cor20> =
								      %% Line 1091
								      apply 'kill_form'/1
									  (F)
								  in  %% Line 1091
								      {[_cor20|Fs],S1}
							      ( <_cor21> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor21})
								-| ['compiler_generated'] )
							    end
							( <_cor22> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor22})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor26,_cor25> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor26,_cor25})
							  -| [{'function_name',{'-filter_forms_2/2-fun-0-',2}}] )
						    -| ['compiler_generated'] )
						end
					    -| [{'id',{0,0,'-filter_forms_2/2-fun-0-'}}] )
				      in  %% Line 1077
					  call 'lists':'foldl'
					      (_cor27, %% Line 1095
						       {[],S}, _cor1)
	      -| ['compiler_generated'] )
	    ( <_cor40> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','merge'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'filter_form'/2 =
    %% Line 1097
    fun (_cor1,_cor0) ->
	%% Line 1098
	case call 'erl_syntax_lib':'analyze_form'
		 (_cor1) of
	  %% Line 1099
	  <{'attribute',{'file',_cor18}}> when 'true' ->
	      %% Line 1100
	      ( case _cor0 of
		  ( <( {'filter',_cor19,_rec21,_cor20}
		       -| ['compiler_generated'] )> when 'true' ->
			{_rec21,_cor0}
		    -| ['compiler_generated'] )
		  ( <_cor21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','filter'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1101
	  <{'attribute',{'module',_cor22}}> when 'true' ->
	      %% Line 1102
	      {'delete',_cor0}
	  %% Line 1103
	  <{'attribute',{'export',_cor23}}> when 'true' ->
	      %% Line 1104
	      {'delete',_cor0}
	  %% Line 1105
	  <{'attribute',{'import',_cor24}}> when 'true' ->
	      %% Line 1106
	      {'delete',_cor0}
	  %% Line 1107
	  <{'attribute',{'record',{R,_cor25}}}> when 'true' ->
	      %% Line 1108
	      ( case _cor0 of
		  ( <( {'filter',_rec22,_cor26,_cor27}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1109
			case call 'sets':'is_element'
				 (R, _rec22) of
			  %% Line 1110
			  <'true'> when 'true' ->
			      %% Line 1111
			      {'kill',_cor0}
			  %% Line 1112
			  <'false'> when 'true' ->
			      let <_rec23> =
				  %% Line 1114
				  call 'sets':'add_element'
				      (R, _rec22)
			      in  let <_cor10> =
				      %% Line 1113
				      call 'erlang':'setelement'
					  (2, _cor0, _rec23)
				  in  %% Line 1115
				      {'keep',_cor10}
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor28> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','filter'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1117
	  <{'attribute','preprocessor'}> when 'true' ->
	      %% Line 1118
	      {'keep',_cor0}
	  %% Line 1119
	  <{'attribute',_cor33}> when 'true' ->
	      %% Line 1120
	      ( case _cor0 of
		  ( <( {'filter',_cor34,_cor35,_rec25}
		       -| ['compiler_generated'] )> when 'true' ->
			{_rec25,_cor0}
		    -| ['compiler_generated'] )
		  ( <_cor36> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','filter'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1121
	  <{'error_marker',_cor37}> when 'true' ->
	      %% Line 1122
	      {'delete',_cor0}
	  %% Line 1123
	  <{'warning_marker',_cor38}> when 'true' ->
	      %% Line 1124
	      {'delete',_cor0}
	  %% Line 1125
	  <'eof_marker'> when 'true' ->
	      %% Line 1126
	      {'delete',_cor0}
	  %% Line 1127
	  <_cor39> when 'true' ->
	      %% Line 1128
	      {'keep',_cor0}
	end
'kill_form'/1 =
    %% Line 1134
    fun (_cor0) ->
	let <F1> =
	    %% Line 1135
	    call 'erl_syntax':'set_precomments'
		(_cor0, [])
	in  let <F2> =
		%% Line 1136
		call 'erl_syntax_lib':'to_comment'
		    (F1, [37|[60|[60|[60|[32]]]]])
	    in  let <_cor3> =
		    %% Line 1137
		    call 'erl_syntax':'get_precomments'
			(_cor0)
		in  %% Line 1137
		    call 'erl_syntax':'set_precomments'
			(F2, _cor3)
'merge_namespaces'/2 =
    %% Line 1159
    fun (_cor1,_cor0) ->
	%% Line 1160
	( case _cor0 of
	    ( <( {'merge',_cor33,_cor34,_rec26,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Split> =
		      %% Line 1161
		      ( fun (_cor7) ->
			    %% Line 1162
			    ( case _cor7 of
				( <( {'module',_rec27,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
				     -| ['compiler_generated'] )> when 'true' ->
				      call 'ordsets':'is_element'
					  (_rec27, _rec26)
				  -| ['compiler_generated'] )
				( <_cor50> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','module'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| [{'id',{0,0,'-merge_namespaces/2-fun-0-'}}] )
		  in  %% Line 1164
		      case apply 'split_list'/2
			       (Split, _cor1) of
			<{M1,M2}> when 'true' ->
			    let <R> =
				%% Line 1165
				call 'dict':'new'
				    ()
			    in  let <_cor12> =
				    %% Line 1166
				    call 'sets':'new'
					()
				in  let <Acc> = {_cor12,%% Line 1166
						R}
				    in  %% Line 1167
					case apply 'merge_namespaces_1'/2
						 (M1, Acc) of
					  <{M3,Acc1}> when 'true' ->
					      %% Line 1170
					      case Acc1 of
						<{_cor51,Maps0}> when 'true' ->
						    let <_cor24> =
							%% Line 1171
							( letrec
							      'lc$^0'/1 =
								  fun (_cor20) ->
								      case _cor20 of
									<[%% Line 1172
									  {M,Map}|_cor17]> when 'true' ->
									    let <_cor19> =
										%% Line 1172
										call 'dict':'size'
										    (Map)
									    in  %% Line 1172
										( case <> of
										    <>
											when call 'erlang':'=/='
											      (_cor19,
											       0) ->
											let <_cor21> =
											    call 'dict':'to_list'
												(Map)
											in  let <_cor22> =
												apply 'lc$^0'/1
												    (_cor17)
											    in  ( [{M,_cor21}|_cor22]
												  -| ['compiler_generated'] )
										    ( <> when 'true' ->
											  apply 'lc$^0'/1
											      (_cor17)
										      -| ['compiler_generated'] )
										  end
										  -| ['list_comprehension'] )
									( <[_cor16|_cor17]> when 'true' ->
									      %% Line 1172
									      apply 'lc$^0'/1
										  (_cor17)
									  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    []
									( <_cor20> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor20})
										-| [{'function_name',{'lc$^0',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  let <_cor18> =
								  %% Line 1172
								  call 'dict':'to_list'
								      (Maps0)
							      in  apply 'lc$^0'/1
								      (_cor18)
							  -| ['list_comprehension'] )
						    in  do  %% Line 1171
							    case _cor24 of
							      %% Line 1173
							      <[]> when 'true' ->
								  'ok'
							      %% Line 1175
							      <Fs> when 'true' ->
								  %% Line 1176
								  apply 'report_warning'/2
								      ([105|[110|[116|[101|[114|[102|[97|[99|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[114|[101|[110|[97|[109|[101|[100|[58|[10|[9|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Fs|[]])
							    end
							    %% Line 1178
							    case apply 'merge_namespaces_1'/2
								     (M2, Acc1) of
							      <{M4,Acc2}> when 'true' ->
								  let <Ms> =
								      %% Line 1179
								      call 'erlang':'++'
									  (M3, M4)
								  in  let <Acc3> =
									  %% Line 1180
									  apply 'merge_namespaces_2'/2
									      (Ms, Acc2)
								      in  %% Line 1181
									  case apply 'merge_namespaces_3'/2
										   (Ms, Acc3) of
									    <{{Names,Maps},_cor52}> when 'true' ->
										let <_cor30> =
										    %% Line 1182
										    apply 'make_renaming_function'/1
											(Maps)
										in  %% Line 1182
										    {Names,_cor30}
									    ( <_cor29> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor29})
									      -| ['compiler_generated'] )
									  end
							      ( <_cor26> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor26})
								-| ['compiler_generated'] )
							    end
						( <_cor15> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor15})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor14})
					    -| ['compiler_generated'] )
					end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor43> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','merge'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'merge_namespaces_1'/2 =
    %% Line 1188
    fun (_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 1190
	    ( fun (_cor12,_cor11) ->
		  case <_cor12,_cor11> of
		    <Module,{Names,Maps}> when 'true' ->
			%% Line 1191
			( case Module of
			    ( <( {'module',_cor18,_cor19,_cor20,_rec28,_cor21,_cor22,_cor23}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Exports> =
				      call 'sets':'from_list'
					  (_rec28)
				  in  let <_cor8> =
					  %% Line 1194
					  call 'dict':'new'
					      ()
				      in  %% Line 1193
					  case apply 'add_function_renamings'/4
						   (_cor18, Exports, Names, _cor8) of
					    <{Names1,Map}> when 'true' ->
						let <Maps1> =
						    %% Line 1195
						    call 'dict':'store'
							(_cor18, Map, Maps)
						in  %% Line 1196
						    {{Module,Exports},{Names1,Maps1}}
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor9})
					      -| ['compiler_generated'] )
					  end
			      -| ['compiler_generated'] )
			    ( <_cor24> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','module'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor14,_cor13> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor14,_cor13})
			    -| [{'function_name',{'-merge_namespaces_1/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-merge_namespaces_1/2-fun-0-'}}] )
	in  %% Line 1189
	    call 'lists':'mapfoldl'
		(_cor15, _cor0, _cor1)
'merge_namespaces_2'/2 =
    %% Line 1202
    fun (_cor1,_cor0) ->
	let <_cor16> =
	    %% Line 1204
	    ( fun (_cor13,_cor12) ->
		  case <_cor13,_cor12> of
		    <{Module,Exports},{Names,Maps}> when 'true' ->
			%% Line 1206
			( case Module of
			    ( <( {'module',_cor19,_cor20,_rec30,_cor21,_cor22,_cor23,_cor24}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor4> =
				      call 'sets':'from_list'
					  (_rec30)
				  in  let <Other> =
					  call 'sets':'subtract'
					      (_cor4, %% Line 1207
						      Exports)
				      in  let <Map> =
					      %% Line 1209
					      call 'dict':'fetch'
						  (_cor19, Maps)
					  in  %% Line 1210
					      case apply 'add_function_renamings'/4
						       (_cor19, Other, Names, %% Line 1211
									      Map) of
						<{Names1,Map1}> when 'true' ->
						    let <Maps1> =
							%% Line 1212
							call 'dict':'store'
							    (_cor19, Map1, Maps)
						    in  %% Line 1213
							{Names1,Maps1}
						( <_cor10> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor10})
						  -| ['compiler_generated'] )
					      end
			      -| ['compiler_generated'] )
			    ( <_cor25> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','module'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor15,_cor14> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor15,_cor14})
			    -| [{'function_name',{'-merge_namespaces_2/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-merge_namespaces_2/2-fun-0-'}}] )
	in  %% Line 1203
	    call 'lists':'foldl'
		(_cor16, _cor0, _cor1)
'merge_namespaces_3'/2 =
    %% Line 1220
    fun (_cor1,_cor0) ->
	let <_cor16> =
	    %% Line 1222
	    ( fun (_cor13,_cor12) ->
		  case <_cor13,_cor12> of
		    <{Module,_X_Exports},{{Names,Maps},RMap}> when 'true' ->
			%% Line 1223
			( case Module of
			    ( <( {'module',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec32}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Map> =
				      %% Line 1225
				      call 'dict':'fetch'
					  (_cor19, Maps)
				  in  %% Line 1226
				      case apply 'add_record_renamings'/5
					       (_cor19, _rec32, %% Line 1227
								Names, %% Line 1227
								       Map, %% Line 1228
									    RMap) of
					<{Names1,Map1,RMap1}> when 'true' ->
					    let <Maps1> =
						%% Line 1229
						call 'dict':'store'
						    (_cor19, Map1, Maps)
					    in  %% Line 1230
						{{Names1,Maps1},RMap1}
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor10})
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_cor25> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','module'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor15,_cor14> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor15,_cor14})
			    -| [{'function_name',{'-merge_namespaces_3/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-merge_namespaces_3/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 1232
		call 'dict':'new'
		    ()
	    in  %% Line 1221
		call 'lists':'foldl'
		    (_cor16, %% Line 1232
			     {_cor0,_cor2}, _cor1)
'add_function_renamings'/4 =
    %% Line 1238
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1239
	    call 'sets':'intersection'
		(_cor2, _cor1)
	in  let <Clashes> =
		%% Line 1239
		call 'sets':'to_list'
		    (_cor4)
	    in  let <_cor14> =
		    %% Line 1241
		    ( fun (_cor11,_cor10) ->
			  case <_cor11,_cor10> of
			    <F = {_cor19,A},{Names,Map}>
				when call 'erlang':'is_integer'
				      (A) ->
				let <F1> =
				    %% Line 1242
				    apply 'new_function_name'/3
					(_cor3, F, Names)
				in  let <_cor9> =
					%% Line 1243
					call 'sets':'add_element'
					    (F1, Names)
				    in  let <_cor8> =
					    %% Line 1243
					    call 'dict':'store'
						(F, F1, Map)
					in  %% Line 1243
					    {_cor9,_cor8}
			    ( <_cor13,_cor12> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor13,_cor12})
				    -| [{'function_name',{'-add_function_renamings/4-fun-0-',2}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-add_function_renamings/4-fun-0-'}}] )
		in  let <_cor6> =
			%% Line 1245
			call 'sets':'union'
			    (_cor2, _cor1)
		    in  %% Line 1240
			call 'lists':'foldl'
			    (_cor14, %% Line 1245
				     {_cor6,_cor0}, %% Line 1245
						    Clashes)
'add_record_renamings'/5 =
    %% Line 1250
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor19> =
	    %% Line 1252
	    ( fun (_cor16,_cor15) ->
		  case <_cor16,_cor15> of
		    <N = {R,Fs},{Names,Map,RMap}> when 'true' ->
			%% Line 1253
			case call 'sets':'is_element'
				 ({'record',R}, Names) of
			  %% Line 1254
			  <'true'> when 'true' ->
			      %% Line 1256
			      case call 'sets':'is_element'
				       ({'record',N}, Names) of
				%% Line 1257
				<'true'> when 'true' ->
				    %% Line 1260
				    case apply 'remap_record_name'/2
					     (N, RMap) of
				      <{R1,_cor25}> when 'true' ->
					  let <Map1> =
					      %% Line 1261
					      call 'dict':'store'
						  ({'record',R}, %% Line 1262
								 {'record',R1}, %% Line 1262
										Map)
					  in  %% Line 1263
					      {Names,Map1,RMap}
				      ( <_cor5> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor5})
					-| ['compiler_generated'] )
				    end
				%% Line 1264
				<'false'> when 'true' ->
				    %% Line 1267
				    case apply 'new_record_name'/4
					     (_cor4, R, %% Line 1268
							Fs, %% Line 1268
							    Names) of
				      <N1 = {R1,_cor26}> when 'true' ->
					  let <Map1> =
					      %% Line 1269
					      call 'dict':'store'
						  ({'record',R}, %% Line 1270
								 {'record',R1}, %% Line 1270
										Map)
					  in  let <RMap1> =
						  %% Line 1271
						  call 'dict':'store'
						      (N, N1, RMap)
					      in  let <Names1> =
						      %% Line 1272
						      call 'sets':'add_element'
							  ({'record',N1}, %% Line 1273
									  Names)
						  in  %% Line 1274
						      {Names1,Map1,RMap1}
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor11})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1276
			  <'false'> when 'true' ->
			      let <Names1> =
				  %% Line 1278
				  call 'sets':'add_element'
				      ({'record',R}, Names)
			      in  let <Names2> =
				      %% Line 1279
				      call 'sets':'add_element'
					  ({'record',N}, Names1)
				  in  %% Line 1280
				      {Names2,Map,RMap}
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    ( <_cor18,_cor17> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor18,_cor17})
			    -| [{'function_name',{'-add_record_renamings/5-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-add_record_renamings/5-fun-0-'}}] )
	in  %% Line 1251
	    call 'lists':'foldl'
		(_cor19, %% Line 1283
			 {_cor2,_cor1,_cor0}, _cor3)
'remap_record_name'/2 =
    %% Line 1285
    fun (_cor1,_cor0) ->
	%% Line 1286
	case call 'dict':'find'
		 (_cor1, _cor0) of
	  %% Line 1287
	  <{'ok',N1}> when 'true' ->
	      N1
	  %% Line 1288
	  <'error'> when 'true' ->
	      _cor1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'map_record_name'/2 =
    %% Line 1295
    fun (_cor1,_cor0) ->
	%% Line 1296
	case apply _cor0
		 ({'record',_cor1}) of
	  <{'record',R1}> when 'true' ->
	      %% Line 1297
	      R1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'new_function_name'/3 =
    %% Line 1306
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,{F,A},Names> when 'true' ->
	      let <_cor5> =
		  %% Line 1307
		  call 'erlang':'atom_to_list'
		      (M)
	      in  let <_cor3> =
		      %% Line 1307
		      call 'erlang':'atom_to_list'
			  (F)
		  in  let <_cor4> =
			  %% Line 1307
			  [95|[95|_cor3]]
		      in  let <Base> =
			      %% Line 1307
			      call 'erlang':'++'
				  (_cor5, _cor4)
			  in  let <_cor7> =
				  %% Line 1308
				  call 'erlang':'list_to_atom'
				      (Base)
			      in  let <Name> = {_cor7,%% Line 1308
					     A}
				  in  %% Line 1309
				      case call 'sets':'is_element'
					       (Name, Names) of
					%% Line 1310
					<'false'> when 'true' ->
					    %% Line 1311
					    Name
					%% Line 1312
					<'true'> when 'true' ->
					    %% Line 1313
					    apply 'new_function_name'/4
						(1, A, Base, Names)
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor9})
					  -| ['compiler_generated'] )
				      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'new_function_name',3}}] )
	    -| ['compiler_generated'] )
	end
'new_function_name'/4 =
    %% Line 1316
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1317
	    call 'erlang':'integer_to_list'
		(_cor3)
	in  let <_cor5> =
		%% Line 1317
		[95|_cor4]
	    in  let <_cor6> =
		    %% Line 1317
		    call 'erlang':'++'
			(_cor1, _cor5)
		in  let <_cor7> =
			%% Line 1317
			call 'erlang':'list_to_atom'
			    (_cor6)
		    in  let <Name> = {_cor7,_cor2}
			in  %% Line 1319
			    case call 'sets':'is_element'
				     (Name, _cor0) of
			      %% Line 1320
			      <'false'> when 'true' ->
				  %% Line 1321
				  Name
			      %% Line 1322
			      <'true'> when 'true' ->
				  let <_cor9> =
				      %% Line 1324
				      call 'erlang':'+'
					  (_cor3, 1)
				  in  %% Line 1324
				      apply 'new_function_name'/4
					  (_cor9, _cor2, _cor1, _cor0)
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor10})
				-| ['compiler_generated'] )
			    end
'new_record_name'/4 =
    %% Line 1329
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1330
	    call 'erlang':'atom_to_list'
		(_cor3)
	in  let <_cor4> =
		%% Line 1330
		call 'erlang':'atom_to_list'
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 1330
		    [95|[95|_cor4]]
		in  let <Base> =
			%% Line 1330
			call 'erlang':'++'
			    (_cor6, _cor5)
		    in  let <_cor8> =
			    %% Line 1331
			    call 'erlang':'list_to_atom'
				(Base)
			in  let <Name> = {_cor8,_cor1}
			    in  %% Line 1332
				case call 'sets':'is_element'
					 ({'record',Name}, _cor0) of
				  %% Line 1333
				  <'false'> when 'true' ->
				      %% Line 1334
				      Name
				  %% Line 1335
				  <'true'> when 'true' ->
				      %% Line 1336
				      apply 'new_record_name_1'/4
					  (1, Base, _cor1, _cor0)
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
'new_record_name_1'/4 =
    %% Line 1339
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1340
	    call 'erlang':'integer_to_list'
		(_cor3)
	in  let <_cor5> =
		%% Line 1340
		[95|_cor4]
	    in  let <_cor6> =
		    %% Line 1340
		    call 'erlang':'++'
			(_cor2, _cor5)
		in  let <_cor7> =
			%% Line 1340
			call 'erlang':'list_to_atom'
			    (_cor6)
		    in  let <Name> = {_cor7,_cor1}
			in  %% Line 1341
			    case call 'sets':'is_element'
				     ({'record',Name}, _cor0) of
			      %% Line 1342
			      <'false'> when 'true' ->
				  %% Line 1343
				  Name
			      %% Line 1344
			      <'true'> when 'true' ->
				  let <_cor9> =
				      %% Line 1346
				      call 'erlang':'+'
					  (_cor3, 1)
				  in  %% Line 1346
				      apply 'new_record_name_1'/4
					  (_cor9, _cor2, _cor1, _cor0)
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor10})
				-| ['compiler_generated'] )
			    end
'make_renaming_function'/1 =
    %% Line 1354
    fun (_cor0) ->
	%% Line 1355
	( fun (_cor7) ->
	      %% Line 1356
	      case call 'dict':'find'
		       (_cor7, _cor0) of
		%% Line 1357
		<{'ok',Map}> when 'true' ->
		    %% Line 1358
		    ( fun (_cor2) ->
			  %% Line 1359
			  case call 'dict':'find'
				   (_cor2, Map) of
			    %% Line 1360
			    <{'ok',Name1}> when 'true' ->
				%% Line 1361
				Name1
			    %% Line 1362
			    <'error'> when 'true' ->
				_cor2
			    ( <_cor1> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor1})
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-make_renaming_function/1-fun-0-'}}] )
		%% Line 1366
		<'error'> when 'true' ->
		    %% Line 1368
		    ( fun (_cor4) ->
			  _cor4
		      -| [{'id',{0,0,'-make_renaming_function/1-fun-1-'}}] )
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-make_renaming_function/1-fun-2-'}}] )
'merge_info'/4 =
    %% Line 1378
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1379
	( case _cor0 of
	    ( <( {'merge',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_rec34,_cor22}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Forbid> =
		      call 'sets':'from_list'
			  (_rec34)
		  in  let <Expansions> =
			  %% Line 1380
			  apply 'alias_expansions'/3
			      (_cor3, _cor2, Forbid)
		      in  let <Module> =
			      %% Line 1381
			      apply 'merge_info_1'/4
				  (_cor3, _cor1, Expansions, _cor0)
			  in  %% Line 1382
			      {Module,Expansions}
	      -| ['compiler_generated'] )
	    ( <_cor23> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','merge'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'merge_info_1'/4 =
    %% Line 1384
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor46> =
	    %% Line 1386
	    ( fun (_cor43,_cor42) ->
		  %% Line 1387
		  ( case _cor43 of
		      ( <( {'module',_rec35,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Map> =
				%% Line 1388
				apply _cor2
				    (_rec35)
			    in  %% Line 1391
				( case _cor42 of
				    ( <( {'module',_cor65,_cor66,_rec37,_cor67,_cor68,_cor69,_cor70}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Functions> =
					      apply 'join_functions'/3
						  (Map, _cor52, _rec37)
					  in  let <Exports> =
						  %% Line 1392
						  apply 'join_exports'/5
						      (_cor0, _rec35, Map, _cor53, _cor67)
					      in  let <Aliases> =
						      %% Line 1395
						      apply 'join_aliases'/4
							  (_rec35, _cor1, _cor54, _cor68)
						  in  let <Attributes> =
							  %% Line 1398
							  apply 'join_attributes'/4
							      (_cor0, _rec35, _cor55, _cor69)
						      in  let <Records> =
							      %% Line 1401
							      apply 'join_records'/3
								  (Map, _cor56, _cor70)
							  in  %% Line 1408
							      {'module',_cor65,_cor66,Functions,Exports,Aliases,Attributes,Records}
				      -| ['compiler_generated'] )
				    ( <_cor71> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','module'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor57> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','module'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-merge_info_1/4-fun-0-'}}] )
	in  %% Line 1410
	    ( case _cor0 of
		( <( {'merge',_rec54,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor8> =
			  %% Line 1411
			  call 'ordsets':'new'
			      ()
		      in  let <_cor7> =
			      %% Line 1412
			      call 'ordsets':'new'
				  ()
			  in  let <_cor6> =
				  %% Line 1413
				  call 'ordsets':'new'
				      ()
			      in  let <_cor5> =
				      %% Line 1414
				      call 'ordsets':'new'
					  ()
				  in  let <_cor4> =
					  %% Line 1415
					  call 'ordsets':'new'
					      ()
				      in  call 'lists':'foldl'
					      (_cor46, {'module',_rec54,'none',_cor8,_cor7,_cor6,_cor5,_cor4}, _cor3)
		  -| ['compiler_generated'] )
		( <_cor139> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','merge'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'join_functions'/3 =
    %% Line 1420
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1421
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[A|_cor4]> when 'true' ->
				let <_cor6> =
				    apply _cor2
					(A)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor9> =
		%% Line 1421
		call 'ordsets':'from_list'
		    (_cor8)
	    in  %% Line 1421
		call 'ordsets':'union'
		    (_cor9, _cor0)
'join_exports'/5 =
    %% Line 1427
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1428
	( case _cor4 of
	    ( <( {'merge',_cor20,_cor21,_rec55,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ordsets':'is_element'
			   (_cor3, _rec55) of
		    %% Line 1429
		    <'true'> when 'true' ->
			let <_cor12> =
			    %% Line 1430
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor9) ->
					  case _cor9 of
					    <[%% Line 1431
					      F|_cor8]> when 'true' ->
						let <_cor10> =
						    apply _cor2
							(F)
						in  let <_cor11> =
							%% Line 1431
							apply 'lc$^0'/1
							    (_cor8)
						    in  ( [_cor10|_cor11]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor9> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor9})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (_cor1)
			      -| ['list_comprehension'] )
			in  let <_cor13> =
				%% Line 1430
				call 'ordsets':'from_list'
				    (_cor12)
			    in  %% Line 1430
				call 'ordsets':'union'
				    (_cor13, _cor0)
		    %% Line 1433
		    <'false'> when 'true' ->
			_cor0
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor30> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','merge'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'join_aliases'/4 =
    %% Line 1441
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1442
	    case call 'dict':'find'
		     (_cor3, _cor2) of
	      %% Line 1443
	      <{'ok',As1}> when 'true' ->
		  let <_cor4> =
		      %% Line 1444
		      call 'dict':'to_list'
			  (As1)
		  in  %% Line 1444
		      call 'ordsets':'from_list'
			  (_cor4)
	      %% Line 1445
	      <'error'> when 'true' ->
		  %% Line 1446
		  []
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	in  let <_cor8> =
		%% Line 1448
		call 'ordsets':'subtract'
		    (_cor1, _cor6)
	    in  %% Line 1448
		call 'ordsets':'union'
		    (_cor8, _cor0)
'join_attributes'/4 =
    %% Line 1453
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1454
	case <> of
	  <>
	      when ( try
		      ( case <> of
			  ( <>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_record'
									 -| ['compiler_generated'] )
					(_cor3,
					 ( 'merge'
					   -| ['compiler_generated'] ),
					 ( 12
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				let <_cor8> =
				    ( call 'erlang':'element'
					  (2, _cor3)
				      -| ['compiler_generated'] )
				in  ( call 'erlang':'=:='
					  (_cor8, _cor2)
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1455
	      call 'ordsets':'union'
		  (_cor1, _cor0)
	  %% Line 1456
	  <> when 'true' ->
	      %% Line 1457
	      case <> of
		<>
		    when ( try
			    ( case <> of
				( <>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_record'
									       -| ['compiler_generated'] )
					      (_cor3,
					       ( 'merge'
						 -| ['compiler_generated'] ),
					       ( 12
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      let <_cor14> =
					  ( call 'erlang':'element'
						(3, _cor3)
					    -| ['compiler_generated'] )
				      in  let <_cor15> =
					      ( call 'erlang':'length'
						    (_cor14)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'=:='
						    (_cor15, 1)
						-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    %% Line 1458
		    call 'ordsets':'union'
			(_cor1, _cor0)
		%% Line 1459
		<> when 'true' ->
		    _cor0
	      end
	end
'join_records'/3 =
    %% Line 1468
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1469
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{R,Fs}|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'map_record_name'/2
					(R, _cor2)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [{_cor6,Fs}|_cor7]
					  -| ['compiler_generated'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor10> =
		%% Line 1470
		call 'ordsets':'from_list'
		    (_cor8)
	    in  %% Line 1470
		call 'ordsets':'union'
		    (_cor10, _cor0)
'alias_expansions'/3 =
    %% Line 1510
    fun (_cor2,_cor1,_cor0) ->
	let <Table> =
	    %% Line 1511
	    apply 'alias_expansions_1'/3
		(_cor2, _cor0, _cor1)
	in  %% Line 1512
	    apply 'alias_expansions_2'/2
		(_cor2, Table)
'alias_expansions_1'/3 =
    %% Line 1516
    fun (_cor2,_cor1,_cor0) ->
	let <_cor20> =
	    %% Line 1518
	    ( fun (_cor17,_cor16) ->
		  let <_cor12> =
		      %% Line 1520
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{A,F},T1> when 'true' ->
				  %% Line 1521
				  case apply 'keep_alias'/4
					   (A, F, _cor1, _cor0) of
				    %% Line 1523
				    <'true'> when 'true' ->
					%% Line 1524
					T1
				    %% Line 1525
				    <'false'> when 'true' ->
					%% Line 1526
					call 'dict':'store'
					    (A, F, T1)
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor11,_cor10> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor11,_cor10})
				      -| [{'function_name',{'-alias_expansions_1/3-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-alias_expansions_1/3-fun-0-'}}] )
		  in  let <_cor6> =
			  %% Line 1529
			  call 'dict':'new'
			      ()
		      in  %% Line 1529
			  ( case _cor17 of
			      ( <( {'module',_cor24,_cor25,_cor26,_cor27,_rec56,_cor28,_cor29}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <Map> =
					call 'lists':'foldl'
					    (_cor12, _cor6, _rec56)
				    in  %% Line 1530
					call 'dict':'store'
					    (_cor24, Map, _cor16)
				-| ['compiler_generated'] )
			      ( <_cor30> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','module'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-alias_expansions_1/3-fun-1-'}}] )
	in  let <_cor3> =
		%% Line 1532
		call 'dict':'new'
		    ()
	    in  %% Line 1517
		call 'lists':'foldl'
		    (_cor20, _cor3, _cor2)
'keep_alias'/4 =
    %% Line 1534
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <A,{M,_cor10},Forbid,Names> when 'true' ->
	      %% Line 1535
	      case call 'sets':'is_element'
		       (M, Forbid) of
		%% Line 1536
		<'true'> when 'true' ->
		    %% Line 1537
		    'false'
		%% Line 1538
		<'false'> when 'true' ->
		    let <_cor4> =
			%% Line 1539
			call 'sets':'is_element'
			    (A, Names)
		    in  %% Line 1539
			call 'erlang':'not'
			    (_cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keep_alias',4}}] )
	    -| ['compiler_generated'] )
	end
'alias_expansions_2'/2 =
    %% Line 1547
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 1551
	    ( fun (_cor6,_cor5) ->
		  %% Line 1552
		  ( case _cor6 of
		      ( <( {'module',_cor37,_cor38,_cor39,_cor40,_rec58,_cor41,_cor42}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'ordsets':'union'
				(_cor5, _rec58)
			-| ['compiler_generated'] )
		      ( <_cor43> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','module'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-alias_expansions_2/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 1554
		call 'ordsets':'new'
		    ()
	    in  let <Aliases> =
		    %% Line 1550
		    call 'lists':'foldl'
			(_cor9, _cor2, _cor1)
		in  let <_cor15> =
			%% Line 1557
			( letrec
			      'lc$^0'/1 =
				  fun (_cor13) ->
				      case _cor13 of
					<[{F,_cor44}|_cor12]> when 'true' ->
					    let <_cor14> =
						apply 'lc$^0'/1
						    (_cor12)
					    in  ( [F|_cor14]
						  -| ['compiler_generated'] )
					( <[_cor11|_cor12]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor12)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor13> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor13})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Aliases)
			  -| ['list_comprehension'] )
		    in  let <Names> =
			    %% Line 1557
			    apply 'duplicates'/1
				(_cor15)
			in  let <_cor34> =
				%% Line 1563
				( fun (_cor31,_cor30) ->
				      %% Line 1564
				      ( case _cor31 of
					  ( <( {'module',_rec59,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor29> =
						    %% Line 1566
						    ( fun (_cor26,_cor25) ->
							  case <_cor26,_cor25> of
							    <{A,F},T1> when 'true' ->
								%% Line 1567
								case call 'ordsets':'is_element'
									 (A, Names) of
								  %% Line 1568
								  <'true'> when 'true' ->
								      let <T2> =
									  %% Line 1569
									  call 'dict':'fetch'
									      (_rec59, T1)
								      in  let <_cor23> =
									      %% Line 1571
									      call 'dict':'store'
										  (A, F, T2)
									  in  %% Line 1570
									      call 'dict':'store'
										  (_rec59, _cor23, %% Line 1572
												   T1)
								  %% Line 1573
								  <'false'> when 'true' ->
								      %% Line 1574
								      T1
								  ( <_cor24> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor24})
								    -| ['compiler_generated'] )
								end
							    ( <_cor28,_cor27> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor28,_cor27})
								    -| [{'function_name',{'-alias_expansions_2/2-fun-1-',2}}] )
							      -| ['compiler_generated'] )
							  end
						      -| [{'id',{0,0,'-alias_expansions_2/2-fun-1-'}}] )
						in  %% Line 1565
						    call 'lists':'foldl'
							(_cor29, _cor30, _cor48)
					    -| ['compiler_generated'] )
					  ( <_cor51> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','module'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| [{'id',{0,0,'-alias_expansions_2/2-fun-2-'}}] )
			    in  %% Line 1562
				call 'lists':'foldl'
				    (_cor34, _cor0, _cor1)
'merge_code'/6 =
    %% Line 1611
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1612
	( case _cor1 of
	    ( <( {'merge',_rec61,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor22> =
		      %% Line 1613
		      call 'sets':'from_list'
			  (_cor41)
		  in  let <_cor19> =
			  %% Line 1614
			  call 'sets':'from_list'
			      (_cor43)
		      in  let <_cor16> =
			      %% Line 1615
			      call 'sets':'from_list'
				  (_cor44)
			  in  let <Env1> =
				  {'code','undefined',_rec61,_cor22,_cor19,_cor16,_cor45,_cor46,_cor47,'undefined',_cor2,'undefined',_cor48}
			      in  let <Code> =
				      %% Line 1621
				      apply 'order_code'/3
					  (_cor4, _cor5, Env1)
				  in  %% Line 1622
				      ( case Env1 of
					  ( <( {'code',_cor129,_cor130,_cor131,_cor132,_cor133,_rec69,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor31> =
						    case _rec69 of
						      %% Line 1623
						      <'true'> when 'true' ->
							  %% Line 1624
							  apply 'take_header'/1
							      (Code)
						      %% Line 1625
						      <'false'> when 'true' ->
							  let <_cor29> =
							      %% Line 1626
							      call 'erl_syntax':'form_list'
								  ([])
							  in  %% Line 1626
							      {Code,_cor29}
						      ( <_cor30> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor30})
							-| ['compiler_generated'] )
						    end
						in  case _cor31 of
						      <{Code1,Header}> when 'true' ->
							  %% Line 1628
							  case apply 'merge_code_1'/4
								   (Code1, _cor3, Env1, _cor0) of
							    <{Forms,St1}> when 'true' ->
								let <Tree> =
								    %% Line 1629
								    call 'erl_syntax':'form_list'
									(Forms)
								in  %% Line 1630
								    {Tree,Header,St1}
							    ( <_cor33> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor33})
							      -| ['compiler_generated'] )
							  end
						      ( <_cor32> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor32})
							-| ['compiler_generated'] )
						    end
					    -| ['compiler_generated'] )
					  ( <_cor140> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','code'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor51> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','merge'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'merge_code_1'/4 =
    %% Line 1632
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor25> =
	    %% Line 1634
	    ( fun (_cor22,_cor21) ->
		  case <_cor22,_cor21> of
		    <{Module,T},{Acc,St0}> when 'true' ->
			%% Line 1635
			( case Module of
			    ( <( {'module',_rec70,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor8> =
				      %% Line 1636
				      case call 'dict':'find'
					       (_rec70, _cor2) of
					%% Line 1637
					<{'ok',Dict}> when 'true' ->
					    Dict
					%% Line 1638
					<'error'> when 'true' ->
					    call 'dict':'new'
						()
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor7})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 1641
				      ( case _cor1 of
					  ( <( {'code',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec73,_cor46,_cor47}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_rec71> =
						    apply _rec73
							(_rec70)
						in  let <_cor14> =
							%% Line 1642
							call 'erlang':'setelement'
							    (12, _cor1, _cor8)
						    in  let <_cor15> =
							    call 'erlang':'setelement'
								(10, _cor14, _rec71)
							in  let <_cor17> =
								call 'erlang':'setelement'
								    (2, _cor15, _rec70)
							    in  %% Line 1643
								case apply 'transform'/3
									 (T, _cor17, St0) of
								  <{T1,St1}> when 'true' ->
								      let <_cor20> =
									  %% Line 1644
									  apply 'section_header'/3
									      (_rec70, T1, _cor17)
								      in  %% Line 1644
									  {[_cor20|Acc],St1}
								  ( <_cor19> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor19})
								    -| ['compiler_generated'] )
								end
					    -| ['compiler_generated'] )
					  ( <_cor48> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','code'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_cor36> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','module'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor24,_cor23> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor24,_cor23})
			    -| [{'function_name',{'-merge_code_1/4-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-merge_code_1/4-fun-0-'}}] )
	in  %% Line 1633
	    call 'lists':'foldr'
		(_cor25, %% Line 1646
			 {[],_cor0}, _cor3)
'order_code'/3 =
    %% Line 1653
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1654
	apply 'order_code'/5
	    (_cor2, _cor1, {}, [], _cor0)
'order_code'/5 =
    %% Line 1656
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[M|Ms],[T|Ts],First,Rest,Env> when 'true' ->
	      let <T1> =
		  %% Line 1657
		  call 'erl_syntax':'flatten_form_list'
		      (T)
	      in  %% Line 1658
		  ( case M of
		      ( <( {'module',_rec74,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}
			   -| ['compiler_generated'] )> when 'true' ->
			    ( case Env of
				( <( {'code',_cor28,_rec75,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor12> =
					  call 'erlang':'=:='
					      (_rec74, _rec75)
				      in  case call 'erlang':'and'
						   (_cor12, _cor32) of
					    %% Line 1660
					    <'true'> when 'true' ->
						%% Line 1661
						apply 'order_code'/5
						    (Ms, Ts, {M,T1}, Rest, Env)
					    %% Line 1662
					    <'false'> when 'true' ->
						%% Line 1663
						apply 'order_code'/5
						    (Ms, Ts, First, [{M,T1}|Rest], Env)
					  end
				  -| ['compiler_generated'] )
				( <_cor39> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','code'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor27> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','module'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1665
	  <[],[],First,Rest,_X_Env> when 'true' ->
	      let <Rest1> =
		  %% Line 1666
		  call 'lists':'reverse'
		      (Rest)
	      in  %% Line 1667
		  case First of
		    %% Line 1668
		    <{}> when 'true' ->
			%% Line 1669
			Rest1
		    %% Line 1670
		    <M> when 'true' ->
			%% Line 1671
			[M|Rest1]
		  end
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'order_code',5}}] )
	    -| ['compiler_generated'] )
	end
'take_header'/1 =
    %% Line 1677
    fun (_cor0) ->
	case _cor0 of
	  <[{M,T}|Ms]> when 'true' ->
	      let <Fs> =
		  %% Line 1678
		  call 'erl_syntax':'form_list_elements'
		      (T)
	      in  %% Line 1679
		  case apply 'take_header_1'/2
			   (Fs, []) of
		    <{Header,Fs1}> when 'true' ->
			let <T1> =
			    %% Line 1680
			    call 'erl_syntax':'form_list'
				(Fs1)
			in  %% Line 1681
			    {[{M,T1}|Ms],Header}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'take_header',1}}] )
	    -| ['compiler_generated'] )
	end
'take_header_1'/2 =
    %% Line 1683
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[F|Fs],As> when 'true' ->
	      %% Line 1684
	      case call 'erl_syntax_lib':'analyze_form'
		       (F) of
		%% Line 1685
		<{'attribute',{'module',_cor6}}> when 'true' ->
		    let <_cor2> =
			%% Line 1686
			call 'lists':'reverse'
			    ([F|As])
		    in  %% Line 1686
			{_cor2,Fs}
		%% Line 1687
		<{'attribute',{'file',_cor7}}> when 'true' ->
		    %% Line 1688
		    apply 'take_header_1'/2
			(Fs, As)
		%% Line 1689
		<_cor8> when 'true' ->
		    %% Line 1690
		    apply 'take_header_1'/2
			(Fs, [F|As])
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'take_header_1',2}}] )
	    -| ['compiler_generated'] )
	end
'section_header'/3 =
    %% Line 1693
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1694
	( case _cor0 of
	    ( <( {'code',_cor26,_cor27,_rec77,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <N> =
		      call 'sets':'size'
			  (_rec77)
		  in  %% Line 1695
		      case <> of
			<>
			    when try
				  let <_cor6> =
				      call 'erlang':'>'
					  (N, 1)
				  in  let <_cor12> =
					  ( call 'erlang':'=/='
						(_cor2, _cor27)
					    -| ['compiler_generated'] )
				      in  let <_cor15> =
					      ( call 'erlang':'=/='
						    (_cor32, 'no')
						-| ['compiler_generated'] )
					  in  let <_cor17> =
						  %% Line 1696
						  ( call 'erlang':'=/='
							(_cor31, 'true')
						    -| ['compiler_generated'] )
					      in  let <_cor18> =
						      ( call 'erlang':'and'
							    (_cor15, _cor17)
							-| ['compiler_generated'] )
						  in  let <_cor19> =
							  ( call 'erlang':'and'
								(_cor12, _cor18)
							    -| ['compiler_generated'] )
						      in  ( call 'erlang':'and'
								(_cor6, _cor19)
							    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <Text> =
				%% Line 1697
				call 'io_lib':'fwrite'
				    ([84|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[99|[111|[100|[101|[32|[115|[116|[101|[109|[115|[32|[102|[114|[111|[109|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[119|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1698
																																		       [_cor2|[]])
			    in  let <_cor21> =
				    %% Line 1700
				    call 'lists':'flatten'
					(Text)
				in  let <Header> =
					%% Line 1699
					apply 'comment'/1
					    ([[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[]|%% Line 1700
																																																	   [_cor21|[[]]]]])
				    in  %% Line 1701
					call 'erl_syntax':'form_list'
					    ([Header|[_cor1|[]]])
			%% Line 1702
			<> when 'true' ->
			    _cor1
		      end
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','code'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'transform'/3 =
    %% Line 1706
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1707
	case call 'erl_syntax':'type'
		 (_cor2) of
	  %% Line 1708
	  <'application'> when 'true' ->
	      %% Line 1709
	      apply 'transform_application'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1710
	  <'attribute'> when 'true' ->
	      %% Line 1711
	      apply 'transform_attribute'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1712
	  <'function'> when 'true' ->
	      %% Line 1713
	      apply 'transform_function'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1714
	  <'implicit_fun'> when 'true' ->
	      %% Line 1715
	      apply 'transform_implicit_fun'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1716
	  <'rule'> when 'true' ->
	      %% Line 1717
	      apply 'transform_rule'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1718
	  <'record_expr'> when 'true' ->
	      %% Line 1719
	      apply 'transform_record'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1720
	  <'record_index_expr'> when 'true' ->
	      %% Line 1721
	      apply 'transform_record'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1722
	  <'record_access'> when 'true' ->
	      %% Line 1723
	      apply 'transform_record'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1724
	  <_cor7> when 'true' ->
	      %% Line 1725
	      apply 'default_transform'/3
		  (_cor2, _cor1, _cor0)
	end
'default_transform'/3 =
    %% Line 1728
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1729
	case call 'erl_syntax':'subtrees'
		 (_cor2) of
	  %% Line 1730
	  <[]> when 'true' ->
	      %% Line 1731
	      {_cor2,_cor0}
	  %% Line 1732
	  <Gs> when 'true' ->
	      %% Line 1733
	      case apply 'transform_1'/3
		       (Gs, _cor1, _cor0) of
		<{Gs1,St1}> when 'true' ->
		    let <_cor4> =
			%% Line 1735
			call 'erl_syntax':'type'
			    (_cor2)
		    in  let <_cor5> =
			    %% Line 1734
			    call 'erl_syntax':'make_tree'
				(_cor4, %% Line 1736
					Gs1)
			in  let <Tree1> =
				%% Line 1734
				apply 'rewrite'/2
				    (_cor2, _cor5)
			    in  %% Line 1737
				{Tree1,St1}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'transform_1'/3 =
    %% Line 1740
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[G|Gs],Env,St> when 'true' ->
	      %% Line 1741
	      case apply 'transform_list'/3
		       (G, Env, St) of
		<{G1,St1}> when 'true' ->
		    %% Line 1742
		    case apply 'transform_1'/3
			     (Gs, Env, St1) of
		      <{Gs1,St2}> when 'true' ->
			  %% Line 1743
			  {[G1|Gs1],St2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1744
	  <[],_X_Env,St> when 'true' ->
	      %% Line 1745
	      {[],St}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'transform_1',3}}] )
	    -| ['compiler_generated'] )
	end
'transform_list'/3 =
    %% Line 1747
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T|Ts],Env,St> when 'true' ->
	      %% Line 1748
	      case apply 'transform'/3
		       (T, Env, St) of
		<{T1,St1}> when 'true' ->
		    %% Line 1749
		    case apply 'transform_list'/3
			     (Ts, Env, St1) of
		      <{Ts1,St2}> when 'true' ->
			  %% Line 1750
			  {[T1|Ts1],St2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1751
	  <[],_X_Env,St> when 'true' ->
	      %% Line 1752
	      {[],St}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'transform_list',3}}] )
	    -| ['compiler_generated'] )
	end
'transform_function'/3 =
    %% Line 1756
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1757
	case apply 'default_transform'/3
		 (_cor2, _cor1, _cor0) of
	  <{T1,St1}> when 'true' ->
	      let <F> =
		  %% Line 1758
		  call 'erl_syntax_lib':'analyze_function'
		      (T1)
	      in  %% Line 1759
		  ( case _cor1 of
		      ( <( {'code',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_rec78,_cor27,_cor28,_cor29}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <V,Text> =
				case apply _rec78
					 (F) of
				  %% Line 1760
				  <_cor31>
				      when call 'erlang':'=:='
					    (_cor31,
					     F) ->
				      %% Line 1762
				      <'none',[]>
				  %% Line 1763
				  <{Atom,_X_Arity}> when 'true' ->
				      let <Cs> =
					  %% Line 1765
					  call 'erl_syntax':'function_clauses'
					      (T1)
				      in  let <_cor8> =
					      %% Line 1767
					      call 'erl_syntax':'function_name'
						  (T1)
					  in  let <N> =
						  %% Line 1766
						  apply 'rename_atom'/2
						      (_cor8, %% Line 1768
							      Atom)
					      in  let <T2> =
						      %% Line 1769
						      call 'erl_syntax':'function'
							  (N, Cs)
						  in  let <_cor11> =
							  %% Line 1770
							  apply 'renaming_note'/1
							      (Atom)
						      in  %% Line 1770
							  <{'value',T2},_cor11>
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor12})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor15> =
				    %% Line 1772
				    apply 'maybe_modified'/5
					(V, T1, 2, Text, _cor1)
				in  %% Line 1772
				    {_cor15,St1}
			-| ['compiler_generated'] )
		      ( <_cor30> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','code'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'renaming_note'/1 =
    %% Line 1774
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1775
	    call 'io_lib':'fwrite'
		([114|[101|[110|[97|[109|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[116|[111|[32|[96|[126|[119|[39]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1776
																			   [_cor0|[]])
	in  let <_cor2> =
		%% Line 1775
		call 'lists':'flatten'
		    (_cor1)
	    in  %% Line 1775
		[_cor2|%% Line 1776
		       []]
'rename_atom'/2 =
    %% Line 1778
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1779
	    call 'erl_syntax':'atom'
		(_cor0)
	in  %% Line 1779
	    apply 'rewrite'/2
		(_cor1, _cor2)
'transform_rule'/3 =
    %% Line 1783
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1784
	case apply 'default_transform'/3
		 (_cor2, _cor1, _cor0) of
	  <{T1,St1}> when 'true' ->
	      let <F> =
		  %% Line 1785
		  call 'erl_syntax_lib':'analyze_rule'
		      (T1)
	      in  %% Line 1786
		  ( case _cor1 of
		      ( <( {'code',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_rec79,_cor28,_cor29,_cor30}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <V,Text> =
				case apply _rec79
					 (F) of
				  %% Line 1787
				  <_cor32>
				      when call 'erlang':'=:='
					    (_cor32,
					     F) ->
				      %% Line 1789
				      <'none',[]>
				  %% Line 1790
				  <{Atom,_X_Arity}> when 'true' ->
				      let <Cs> =
					  %% Line 1792
					  call 'erl_syntax':'rule_clauses'
					      (T1)
				      in  let <_cor8> =
					      %% Line 1794
					      call 'erl_syntax':'rule_name'
						  (T1)
					  in  let <N> =
						  %% Line 1793
						  apply 'rename_atom'/2
						      (_cor8, %% Line 1795
							      Atom)
					      in  let <_cor10> =
						      %% Line 1797
						      call 'erl_syntax':'rule'
							  (N, Cs)
						  in  let <T2> =
							  %% Line 1796
							  apply 'rewrite'/2
							      (T1, _cor10)
						      in  let <_cor12> =
							      %% Line 1798
							      apply 'renaming_note'/1
								  (Atom)
							  in  %% Line 1798
							      <{'value',T2},_cor12>
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor13})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor16> =
				    %% Line 1800
				    apply 'maybe_modified'/5
					(V, T1, 2, Text, _cor1)
				in  %% Line 1800
				    {_cor16,St1}
			-| ['compiler_generated'] )
		      ( <_cor31> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','code'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'transform_implicit_fun'/3 =
    %% Line 1804
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1805
	case apply 'default_transform'/3
		 (_cor2, _cor1, _cor0) of
	  <{T1,St1}> when 'true' ->
	      let <_cor4> =
		  %% Line 1806
		  call 'erl_syntax':'implicit_fun_name'
		      (T1)
	      in  let <V,Text> =
		      %% Line 1806
		      case call 'erl_syntax':'type'
			       (_cor4) of
			%% Line 1807
			<'arity_qualifier'> when 'true' ->
			    let <F> =
				%% Line 1808
				call 'erl_syntax_lib':'analyze_implicit_fun'
				    (T1)
			    in  %% Line 1809
				( case _cor1 of
				    ( <( {'code',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec80,_cor30,_cor31,_cor32}
					 -| ['compiler_generated'] )> when 'true' ->
					  case apply _rec80
						   (F) of
					    %% Line 1810
					    <_cor34>
						when call 'erlang':'=:='
						      (_cor34,
						       F) ->
						%% Line 1812
						<'none',[]>
					    %% Line 1813
					    <{Atom,Arity}> when 'true' ->
						let <_cor11> =
						    %% Line 1816
						    call 'erl_syntax':'implicit_fun_name'
							(T1)
						in  let <_cor9> =
							%% Line 1818
							call 'erl_syntax':'atom'
							    (Atom)
						    in  let <_cor8> =
							    %% Line 1819
							    call 'erl_syntax':'integer'
								(Arity)
							in  let <_cor10> =
								%% Line 1817
								call 'erl_syntax':'arity_qualifier'
								    (_cor9, _cor8)
							    in  let <N> =
								    %% Line 1815
								    apply 'rewrite'/2
									(_cor11, _cor10)
								in  let <T2> =
									%% Line 1820
									call 'erl_syntax':'implicit_fun'
									    (N)
								    in  %% Line 1821
									<{'value',T2},[[102|[117|[110|[99|[116|[105|[111|[110|[32|[119|[97|[115|[32|[114|[101|[110|[97|[109|[101|[100]]]]]]]]]]]]]]]]]]]]]>
					    ( <_cor14> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor14})
					      -| ['compiler_generated'] )
					  end
				      -| ['compiler_generated'] )
				    ( <_cor33> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','code'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			%% Line 1823
			<'module_qualifier'> when 'true' ->
			    %% Line 1824
			    <'none',[]>
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor15})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor18> =
			  %% Line 1826
			  apply 'maybe_modified_quiet'/5
			      (V, T1, 2, Text, _cor1)
		      in  %% Line 1826
			  {_cor18,St1}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'transform_application'/3 =
    %% Line 1830
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1834
	    call 'erl_syntax':'application_arguments'
		(_cor2)
	in  %% Line 1833
	    case apply 'transform_list'/3
		     (_cor3, _cor1, _cor0) of
	      <{As,St1}> when 'true' ->
		  let <F> =
		      %% Line 1836
		      call 'erl_syntax':'application_operator'
			  (_cor2)
		  in  let <_cor7> =
			  catch
			      let <_cor6> =
				  %% Line 1840
				  call 'erl_syntax_lib':'analyze_function_name'
				      (F)
			      in  %% Line 1840
				  {'ok',_cor6}
		      in  %% Line 1840
			  case _cor7 of
			    %% Line 1841
			    <{'ok',Name}> when 'true' ->
				%% Line 1842
				apply 'transform_application_1'/6
				    (Name, F, As, _cor2, _cor1, St1)
			    %% Line 1843
			    <'syntax_error'> when 'true' ->
				%% Line 1848
				case apply 'transform'/3
					 (F, _cor1, St1) of
				  <{F1,St2}> when 'true' ->
				      let <_cor9> =
					  %% Line 1849
					  call 'erl_syntax':'application'
					      (F1, As)
				      in  let <_cor10> =
					      %% Line 1849
					      apply 'rewrite'/2
						  (_cor2, _cor9)
					  in  %% Line 1849
					      {_cor10,St2}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			    %% Line 1850
			    <{'EXIT',R}> when 'true' ->
				%% Line 1851
				call 'erlang':'exit'
				    (R)
			    %% Line 1852
			    <R> when 'true' ->
				%% Line 1853
				call 'erlang':'throw'
				    (R)
			  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'transform_application_1'/6 =
    %% Line 1859
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Arity> =
	    %% Line 1862
	    call 'erlang':'length'
		(_cor3)
	in  %% Line 1863
	    case apply 'expand_operator'/4
		     (_cor5, Arity, _cor4, _cor1) of
	      <{Name1,F1}> when 'true' ->
		  let <F2> =
		      %% Line 1864
		      apply 'maybe_modified_quiet'/5
			  (F1, _cor4, 7, [[117|[110|[102|[111|[108|[100|[101|[100|[32|[97|[108|[105|[97|[115]]]]]]]]]]]]]]], _cor1)
		  in  %% Line 1865
		      case apply 'transform_application_2'/6
			       (Name1, Arity, F2, _cor3, _cor1, _cor0) of
			<{V,St1}> when 'true' ->
			    let <_cor10> =
				%% Line 1867
				call 'erl_syntax':'application'
				    (F2, _cor3)
			    in  let <T1> =
				    %% Line 1867
				    apply 'rewrite'/2
					(_cor2, _cor10)
				in  let <_cor13> =
					%% Line 1868
					case V of
					  %% Line 1869
					  <'none'> when 'true' ->
					      %% Line 1870
					      T1
					  %% Line 1871
					  <{'value',{T2,Depth,Message}}> when 'true' ->
					      %% Line 1872
					      apply 'maybe_modified_quiet'/5
						  ({'value',T2}, T1, Depth, %% Line 1873
									    Message, _cor1)
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor12})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 1875
					{_cor13,St1}
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'transform_application_2'/6 =
    %% Line 1883
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name,Arity,F,As,Env,St>
	      when %% Line 1884
		call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 1885
	      apply 'transform_atom_application'/6
		  (Name, Arity, F, As, Env, St)
	  %% Line 1886
	  <{M,N},Arity,F,As,Env,St>
	      when let <_cor6> =
		    %% Line 1887
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor7> =
			%% Line 1887
			call 'erlang':'is_atom'
			    (N)
		    in  %% Line 1887
			call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 1888
	      apply 'transform_qualified_application'/7
		  (M, N, Arity, F, As, Env, St)
	  %% Line 1889
	  <_X_Name,_X_Arity,_X_F,_X_As,_X_Env,St> when 'true' ->
	      %% Line 1890
	      {'none',St}
	end
'expand_operator'/4 =
    %% Line 1892
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Arity,_X_F,Env>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 1897
	      case apply 'is_auto_import'/1
		       ({Name,Arity}) of
		%% Line 1898
		<'true'> when 'true' ->
		    %% Line 1899
		    {Name,'none'}
		%% Line 1900
		<'false'> when 'true' ->
		    %% Line 1901
		    ( case Env of
			( <( {'code',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec81,_cor25}
			     -| ['compiler_generated'] )> when 'true' ->
			      case call 'dict':'find'
				       ({Name,Arity}, _rec81) of
				%% Line 1902
				<{'ok',{M,{N,A}}}>
				    when call 'erlang':'=:='
					  (A,
					   Arity) ->
				    let <_cor7> =
					%% Line 1905
					call 'erl_syntax':'atom'
					    (M)
				    in  let <_cor6> =
					    %% Line 1906
					    call 'erl_syntax':'atom'
						(N)
					in  let <F1> =
						%% Line 1904
						call 'erl_syntax':'module_qualifier'
						    (_cor7, _cor6)
					    in  %% Line 1907
						{{M,N},{'value',F1}}
				%% Line 1908
				<'error'> when 'true' ->
				    %% Line 1910
				    {Name,'none'}
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor26> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','code'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1913
	  <Name,_X_Arity,_X_F,_X_Env> when 'true' ->
	      %% Line 1915
	      {Name,'none'}
	end
'transform_atom_application'/6 =
    %% Line 1923
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1925
	case <_cor5,_cor4> of
	  %% Line 1926
	  <'apply',2> when 'true' ->
	      %% Line 1927
	      ( case _cor1 of
		  ( <( {'code',_rec82,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'warning_apply_2'/2
				(_rec82, _cor27)
			    %% Line 1928
			    {'none',_cor0}
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','code'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1929
	  <'apply',3> when 'true' ->
	      %% Line 1930
	      apply 'transform_apply_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1931
	  <'spawn',3> when 'true' ->
	      %% Line 1932
	      apply 'transform_spawn_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1933
	  <'spawn',4> when 'true' ->
	      %% Line 1934
	      apply 'transform_spawn_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1935
	  <'spawn_link',3> when 'true' ->
	      %% Line 1936
	      apply 'transform_spawn_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1937
	  <'spawn_link',4> when 'true' ->
	      %% Line 1938
	      apply 'transform_spawn_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1939
	  <_fol734,_fol735> when 'true' ->
	      %% Line 1944
	      case apply 'is_auto_import'/1
		       ({_cor5,_cor4}) of
		%% Line 1945
		<'true'> when 'true' ->
		    %% Line 1946
		    {'none',_cor0}
		%% Line 1947
		<'false'> when 'true' ->
		    %% Line 1948
		    ( case _cor1 of
			( <( {'code',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_rec84,_cor60,_cor61,_cor62}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply _rec84
				       ({_cor5,_cor4}) of
				%% Line 1949
				<{N,A}>
				    when let <_cor12> =
					  call 'erlang':'=:='
					      (N, _cor5)
				      in  let <_cor13> =
					      call 'erlang':'=:='
						  (A, _cor4)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    %% Line 1951
				    {'none',_cor0}
				%% Line 1952
				<{N,A}>
				    when call 'erlang':'=:='
					  (A,
					   _cor4) ->
				    let <_cor14> =
					%% Line 1955
					call 'erl_syntax':'atom'
					    (N)
				    in  let <F1> =
					    %% Line 1955
					    apply 'rewrite'/2
						(_cor3, _cor14)
					in  let <T> =
						%% Line 1956
						call 'erl_syntax':'application'
						    (F1, _cor2)
					    in  let <V> =
						    %% Line 1957
						    {T,2,[[99|[97|[108|[108|[101|[101|[32|[119|[97|[115|[32|[114|[101|[110|[97|[109|[101|[100]]]]]]]]]]]]]]]]]]]}
						in  %% Line 1958
						    {{'value',V},_cor0}
				( <_cor18> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor18})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor63> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','code'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	end
'transform_qualified_application'/7 =
    %% Line 1967
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1969
	case <_cor6,_cor5,_cor4> of
	  %% Line 1970
	  <'erlang','apply',2> when 'true' ->
	      %% Line 1971
	      ( case _cor1 of
		  ( <( {'code',_rec85,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'warning_apply_2'/2
				(_rec85, _cor20)
			    %% Line 1972
			    {'none',_cor0}
		    -| ['compiler_generated'] )
		  ( <_cor31> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','code'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1973
	  <'erlang','apply',3> when 'true' ->
	      %% Line 1974
	      apply 'transform_apply_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1975
	  <'erlang','spawn',3> when 'true' ->
	      %% Line 1976
	      apply 'transform_spawn_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1977
	  <'erlang','spawn',4> when 'true' ->
	      %% Line 1978
	      apply 'transform_spawn_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1979
	  <'erlang','spawn_link',3> when 'true' ->
	      %% Line 1980
	      apply 'transform_spawn_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1981
	  <'erlang','spawn_link',4> when 'true' ->
	      %% Line 1982
	      apply 'transform_spawn_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 1983
	  <_fol769,_fol770,_fol771> when 'true' ->
	      %% Line 1984
	      case call 'erlang':'is_builtin'
		       (_cor6, _cor5, _cor4) of
		%% Line 1985
		<'false'> when 'true' ->
		    %% Line 1986
		    apply 'transform_qualified_application_1'/7
			(_cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
		%% Line 1988
		<'true'> when 'true' ->
		    %% Line 1989
		    {'none',_cor0}
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	end
'transform_qualified_application_1'/7 =
    %% Line 1993
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <MakeLocal> =
	    %% Line 1995
	    ( fun (_cor9) ->
		  let <_cor7> =
		      %% Line 1996
		      call 'erl_syntax':'atom'
			  (_cor9)
		  in  let <F1> =
			  %% Line 1996
			  apply 'rewrite'/2
			      (_cor3, _cor7)
		      in  %% Line 1997
			  call 'erl_syntax':'application'
			      (F1, _cor2)
	      -| [{'id',{0,0,'-transform_qualified_application_1/7-fun-0-'}}] )
	in  let <MakeRemote> =
		%% Line 1999
		( fun () ->
		      %% Line 2000
		      call 'erl_syntax':'application'
			  (_cor3, _cor2)
		  -| [{'id',{0,0,'-transform_qualified_application_1/7-fun-1-'}}] )
	    in  let <MakeDynamic> =
		    %% Line 2002
		    ( fun (_cor18,_cor17) ->
			  let <_cor14> =
			      %% Line 2004
			      call 'erl_syntax':'atom'
				  (_cor18)
			  in  let <_cor13> =
				  %% Line 2005
				  call 'erl_syntax':'atom'
				      (_cor17)
			      in  let <F1> =
				      %% Line 2003
				      call 'erl_syntax':'module_qualifier'
					  (_cor14, _cor13)
				  in  let <F2> =
					  %% Line 2006
					  apply 'rewrite'/2
					      (_cor3, F1)
				      in  %% Line 2007
					  call 'erl_syntax':'application'
					      (F2, _cor2)
		      -| [{'id',{0,0,'-transform_qualified_application_1/7-fun-2-'}}] )
		in  %% Line 2009
		    apply 'localise'/9
			(_cor6, _cor5, _cor4, MakeLocal, MakeRemote, %% Line 2010
								     MakeDynamic, %% Line 2010
										  3, _cor1, _cor0)
'transform_apply_call'/4 =
    %% Line 2017
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2018
	case _cor2 of
	  <[Module|[Name|[List|[]]]]> when 'true' ->
	      let <_cor8> =
		  %% Line 2019
		  call 'erl_syntax':'type'
		      (Module)
	      in  let <_cor9> =
		      %% Line 2019
		      call 'erlang':'=:='
			  (_cor8, 'atom')
		  in  let <_cor6> =
			  %% Line 2020
			  call 'erl_syntax':'type'
			      (Name)
		      in  let <_cor7> =
			      %% Line 2020
			      call 'erlang':'=:='
				  (_cor6, 'atom')
			  in  let <_cor10> =
				  %% Line 2020
				  call 'erlang':'and'
				      (_cor9, _cor7)
			      in  let <_cor5> =
				      %% Line 2021
				      call 'erl_syntax':'is_proper_list'
					  (List)
				  in  %% Line 2019
				      case %% Line 2021
					   call 'erlang':'and'
					       (_cor10, _cor5) of
					%% Line 2022
					<'true'> when 'true' ->
					    %% Line 2023
					    apply 'transform_apply_call_1'/7
						(Module, Name, List, _cor3, _cor2, _cor1, _cor0)
					%% Line 2025
					<'false'> when 'true' ->
					    %% Line 2029
					    ( case _cor1 of
						( <( {'code',_rec87,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
						     -| ['compiler_generated'] )> when 'true' ->
						      do  apply 'warning_unsafe_call'/3
							      ('apply', _rec87, _cor20)
							  %% Line 2031
							  {'none',_cor0}
						  -| ['compiler_generated'] )
						( <_cor31> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','code'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'transform_apply_call_1'/7 =
    %% Line 2037
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 2038
	    call 'erl_syntax':'module_qualifier'
		(_cor6, _cor5)
	in  let <F1> =
		%% Line 2038
		apply 'rewrite'/2
		    (_cor3, _cor7)
	    in  let <As1> =
		    %% Line 2039
		    call 'erl_syntax':'list_elements'
			(_cor4)
		in  let <M> =
			%% Line 2040
			call 'erl_syntax':'atom_value'
			    (_cor6)
		    in  let <N> =
			    %% Line 2041
			    call 'erl_syntax':'atom_value'
				(_cor5)
			in  let <A> =
				%% Line 2042
				call 'erlang':'length'
				    (As1)
			    in  %% Line 2043
				apply 'transform_qualified_application_1'/7
				    (M, N, A, F1, As1, _cor1, _cor0)
'transform_spawn_call'/4 =
    %% Line 2049
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2050
	case _cor2 of
	  %% Line 2051
	  <[Module|[Name|[List|[]]]]> when 'true' ->
	      let <MakeSpawn> =
		  %% Line 2052
		  ( fun (_cor4) ->
			%% Line 2053
			call 'erl_syntax':'application'
			    (_cor3, _cor4)
		    -| [{'id',{0,0,'-transform_spawn_call/4-fun-0-'}}] )
	      in  %% Line 2055
		  apply 'transform_spawn_call_1'/6
		      (Module, Name, List, MakeSpawn, _cor1, _cor0)
	  %% Line 2057
	  <[Node|[Module|[Name|[List|[]]]]]> when 'true' ->
	      let <MakeSpawn> =
		  %% Line 2058
		  ( fun (_cor7) ->
			%% Line 2059
			call 'erl_syntax':'application'
			    (_cor3, %% Line 2060
				    [Node|_cor7])
		    -| [{'id',{0,0,'-transform_spawn_call/4-fun-1-'}}] )
	      in  %% Line 2062
		  apply 'transform_spawn_call_1'/6
		      (Module, Name, List, MakeSpawn, _cor1, _cor0)
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'transform_spawn_call_1'/6 =
    %% Line 2068
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 2069
	    call 'erl_syntax':'type'
		(_cor5)
	in  let <_cor10> =
		%% Line 2069
		call 'erlang':'=:='
		    (_cor9, 'atom')
	    in  let <_cor7> =
		    %% Line 2070
		    call 'erl_syntax':'type'
			(_cor4)
		in  let <_cor8> =
			%% Line 2070
			call 'erlang':'=:='
			    (_cor7, 'atom')
		    in  let <_cor11> =
			    %% Line 2070
			    call 'erlang':'and'
				(_cor10, _cor8)
			in  let <_cor6> =
				%% Line 2071
				call 'erl_syntax':'is_proper_list'
				    (_cor3)
			    in  %% Line 2069
				case %% Line 2071
				     call 'erlang':'and'
					 (_cor11, _cor6) of
				  %% Line 2073
				  <'true'> when 'true' ->
				      %% Line 2074
				      apply 'transform_spawn_call_2'/6
					  (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
				  %% Line 2076
				  <_cor23> when 'true' ->
				      %% Line 2079
				      ( case _cor1 of
					  ( <( {'code',_rec89,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
					       -| ['compiler_generated'] )> when 'true' ->
						do  apply 'warning_unsafe_call'/3
							('spawn', _rec89, _cor24)
						    %% Line 2081
						    {'none',_cor0}
					    -| ['compiler_generated'] )
					  ( <_cor35> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','code'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				end
'transform_spawn_call_2'/6 =
    %% Line 2084
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <As> =
	    %% Line 2085
	    call 'erl_syntax':'list_elements'
		(_cor3)
	in  let <Arity> =
		%% Line 2086
		call 'erlang':'length'
		    (As)
	    in  let <MakeLocal> =
		    %% Line 2087
		    ( fun (_cor13) ->
			  let <_cor8> =
			      %% Line 2090
			      call 'erl_syntax':'atom'
				  (_cor13)
			  in  let <A> =
				  %% Line 2090
				  apply 'rewrite'/2
				      (_cor4, _cor8)
			      in  let <B> =
				      %% Line 2091
				      call 'erl_syntax':'application'
					  (A, As)
				  in  let <C> =
					  %% Line 2092
					  call 'erl_syntax':'clause'
					      ([], [B|[]])
				      in  let <F> =
					      %% Line 2093
					      call 'erl_syntax':'fun_expr'
						  ([C|[]])
					  in  %% Line 2094
					      apply _cor2
						  ([F|[]])
		      -| [{'id',{0,0,'-transform_spawn_call_2/6-fun-0-'}}] )
		in  let <MakeRemote> =
			%% Line 2096
			( fun () ->
			      %% Line 2097
			      apply _cor2
				  ([_cor5|[_cor4|[_cor3|[]]]])
			  -| [{'id',{0,0,'-transform_spawn_call_2/6-fun-1-'}}] )
		    in  let <MakeDynamic> =
			    %% Line 2099
			    ( fun (_cor21,_cor20) ->
				  let <_cor17> =
				      %% Line 2100
				      call 'erl_syntax':'atom'
					  (_cor20)
				  in  let <F> =
					  %% Line 2100
					  apply 'rewrite'/2
					      (_cor4, _cor17)
				      in  let <_cor19> =
					      %% Line 2101
					      call 'erl_syntax':'atom'
						  (_cor21)
					  in  %% Line 2101
					      apply _cor2
						  ([_cor19|[F|[_cor3|[]]]])
			      -| [{'id',{0,0,'-transform_spawn_call_2/6-fun-2-'}}] )
			in  let <_cor26> =
				%% Line 2103
				call 'erl_syntax':'atom_value'
				    (_cor5)
			    in  let <_cor25> =
				    %% Line 2104
				    call 'erl_syntax':'atom_value'
					(_cor4)
				in  %% Line 2103
				    apply 'localise'/9
					(_cor26, _cor25, %% Line 2105
							 Arity, %% Line 2105
								MakeLocal, %% Line 2105
									   MakeRemote, %% Line 2105
										       MakeDynamic, %% Line 2106
												    4, _cor1, _cor0)
'localise'/9 =
    %% Line 2113
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2116
	( case _cor1 of
	    ( <( {'code',_cor57,_cor58,_rec91,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'sets':'is_element'
			   (_cor8, _rec91) of
		    %% Line 2117
		    <'false'> when 'true' ->
			%% Line 2118
			case call 'dict':'find'
				 (_cor8, _cor67) of
			  %% Line 2119
			  <{'ok',Module1}> when 'true' ->
			      let <T> =
				  %% Line 2120
				  apply _cor3
				      (Module1, _cor7)
			      in  let <V> =
				      %% Line 2121
				      {T,_cor2,[[114|[101|[100|[105|[114|[101|[99|[116|[101|[100|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]}
				  in  %% Line 2122
				      {{'value',V},_cor0}
			  %% Line 2123
			  <'error'> when 'true' ->
			      %% Line 2124
			      {'none',_cor0}
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor15})
			    -| ['compiler_generated'] )
			end
		    %% Line 2126
		    <'true'> when 'true' ->
			let <Map> =
			    %% Line 2129
			    apply _cor65
				(_cor8)
			in  %% Line 2130
			    case apply Map
				     ({_cor7,_cor6}) of
			      %% Line 2131
			      <{N,A}>
				  when call 'erlang':'=:='
					(A,
					 _cor6) ->
				  let <Safe> =
				      %% Line 2136
				      call 'sets':'is_element'
					  (_cor8, _cor60)
				  in  let <_cor27> =
					  %% Line 2137
					  call 'sets':'is_element'
					      (_cor8, _cor59)
				      in  %% Line 2141
					  case call 'erlang':'or'
						   (_cor27, Safe) of
					    %% Line 2142
					    <'false'> when 'true' ->
						let <L> =
						    %% Line 2150
						    apply _cor5
							(N)
						in  let <L1> =
							%% Line 2151
							call 'erl_syntax_lib':'strip_comments'
							    (L)
						    in  let <R> =
							    %% Line 2152
							    apply _cor4
								()
							in  %% Line 2153
							    case apply 'protect_call'/3
								     (_cor8, L1, R) of
							      <{T,Text}> when 'true' ->
								  let <V> = {%% Line 2154
								       T,_cor2,%% Line 2154
									       Text}
								  in  %% Line 2155
								      {{'value',V},_cor0}
							      ( <_cor32> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor32})
								-| ['compiler_generated'] )
							    end
					    %% Line 2156
					    <'true'> when 'true' ->
						%% Line 2160
						case Safe of
						  %% Line 2161
						  <'false'> when 'true' ->
						      %% Line 2170
						      case <> of
							%% Line 2171
							<>
							    when call 'erlang':'=:='
								  (_cor8,
								   _cor58) ->
							    %% Line 2174
							    {'none',_cor0}
							%% Line 2175
							<> when 'true' ->
							    let <St1> =
								%% Line 2178
								apply 'state__add_export'/3
								    (N, _cor6, _cor0)
							    in  let <T> =
								    %% Line 2180
								    apply _cor3
									(_cor58, N)
								in  let <V> =
									%% Line 2182
									{T,_cor2,[[108|[111|[99|[97|[108|[105|[115|[101|[100|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]}
								    in  %% Line 2183
									{{'value',V},St1}
						      end
						  %% Line 2185
						  <'true'> when 'true' ->
						      let <T> =
							  %% Line 2190
							  apply _cor5
							      (N)
						      in  let <V> =
							      %% Line 2192
							      {T,_cor2,[[108|[111|[99|[97|[108|[105|[115|[101|[100|[32|[115|[97|[102|[101|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]}
							  in  %% Line 2193
							      {{'value',V},_cor0}
						  ( <_cor45> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor45})
						    -| ['compiler_generated'] )
						end
					  end
			      ( <_cor19> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor19})
				-| ['compiler_generated'] )
			    end
		    ( <_cor47> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor47})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor68> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','code'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'protect_call'/3 =
    %% Line 2215
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2216
	{_cor0,[[100|[121|[110|[97|[109|[105|[99|[32|[99|[97|[108|[108]]]]]]]]]]]]]}
'transform_attribute'/3 =
    %% Line 2220
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2221
	case apply 'default_transform'/3
		 (_cor2, _cor1, _cor0) of
	  <TSt1 = {T1,St1}> when 'true' ->
	      %% Line 2222
	      case call 'erl_syntax_lib':'analyze_attribute'
		       (T1) of
		%% Line 2223
		<{'record',{R,_cor16}}> when 'true' ->
		    let <F> =
			%% Line 2224
			( fun (_cor7) ->
			      %% Line 2225
			      case call 'erl_syntax':'attribute_arguments'
				       (T1) of
				<[_cor17|As]> when 'true' ->
				    let <_cor6> =
					%% Line 2227
					call 'erl_syntax':'attribute_name'
					    (T1)
				    in  let <_cor5> =
					    %% Line 2228
					    call 'erl_syntax':'atom'
						(_cor7)
					in  %% Line 2226
					    call 'erl_syntax':'attribute'
						(_cor6, %% Line 2228
							[_cor5|As])
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor4})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-transform_attribute/3-fun-0-'}}] )
		    in  %% Line 2230
			case apply 'rename_record'/3
				 (R, F, _cor1) of
			  <{V,Text}> when 'true' ->
			      let <_cor11> =
				  %% Line 2231
				  apply 'maybe_modified'/5
				      (V, T1, 2, Text, _cor1)
			      in  %% Line 2231
				  {_cor11,St1}
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		%% Line 2232
		<_cor18> when 'true' ->
		    %% Line 2233
		    TSt1
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'transform_record'/3 =
    %% Line 2238
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2239
	case apply 'default_transform'/3
		 (_cor2, _cor1, _cor0) of
	  <TSt1 = {T1,St1}> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 2240
		      call 'erl_syntax_lib':'analyze_record_expr'
			  (T1)
	      in  let <_cor23> =
		      %% Line 2240
		      case _cor4 of
			%% Line 2241
			<{'record_expr',{R,_cor31}}> when 'true' ->
			    let <F> =
				%% Line 2242
				( fun (_cor8) ->
				      let <_cor7> =
					  %% Line 2244
					  call 'erl_syntax':'record_expr_argument'
					      (T1)
				      in  let <_cor6> =
					      %% Line 2245
					      call 'erl_syntax':'atom'
						  (_cor8)
					  in  let <_cor5> =
						  %% Line 2246
						  call 'erl_syntax':'record_expr_fields'
						      (T1)
					      in  %% Line 2243
						  call 'erl_syntax':'record_expr'
						      (_cor7, _cor6, _cor5)
				  -| [{'id',{0,0,'-transform_record/3-fun-0-'}}] )
			    in  %% Line 2248
				{R,F}
			%% Line 2249
			<{'record_index_expr',{R,_cor32}}> when 'true' ->
			    let <F> =
				%% Line 2250
				( fun (_cor13) ->
				      let <_cor12> =
					  %% Line 2252
					  call 'erl_syntax':'atom'
					      (_cor13)
				      in  let <_cor11> =
					      %% Line 2253
					      call 'erl_syntax':'record_index_expr_field'
						  (T1)
					  in  %% Line 2251
					      call 'erl_syntax':'record_index_expr'
						  (_cor12, _cor11)
				  -| [{'id',{0,0,'-transform_record/3-fun-1-'}}] )
			    in  %% Line 2255
				{R,F}
			%% Line 2256
			<{'record_access',{R,_cor33}}> when 'true' ->
			    let <F> =
				%% Line 2257
				( fun (_cor19) ->
				      let <_cor18> =
					  %% Line 2259
					  call 'erl_syntax':'record_access_argument'
					      (T1)
				      in  let <_cor17> =
					      %% Line 2260
					      call 'erl_syntax':'atom'
						  (_cor19)
					  in  let <_cor16> =
						  %% Line 2261
						  call 'erl_syntax':'record_access_field'
						      (T1)
					      in  %% Line 2258
						  call 'erl_syntax':'record_access'
						      (_cor18, _cor17, _cor16)
				  -| [{'id',{0,0,'-transform_record/3-fun-2-'}}] )
			    in  %% Line 2263
				{R,F}
			%% Line 2264
			<_X_Type> when 'true' ->
			    %% Line 2265
			    'false'
		      end
		  in  %% Line 2267
		      case _cor23 of
			%% Line 2268
			<{R1,F1}> when 'true' ->
			    %% Line 2269
			    case apply 'rename_record'/3
				     (R1, F1, _cor1) of
			      <{V,Text}> when 'true' ->
				  let <_cor26> =
				      %% Line 2270
				      apply 'maybe_modified'/5
					  (V, T1, 1, Text, _cor1)
				  in  %% Line 2270
				      {_cor26,St1}
			      ( <_cor25> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor25})
				-| ['compiler_generated'] )
			    end
			%% Line 2271
			<'false'> when 'true' ->
			    %% Line 2272
			    TSt1
			( <_cor27> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor27})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'rename_record'/3 =
    %% Line 2275
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2276
	( case _cor0 of
	    ( <( {'code',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec97,_cor18,_cor19,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'map_record_name'/2
			   (_cor2, _rec97) of
		    %% Line 2277
		    <_cor22>
			when call 'erlang':'=:='
			      (_cor22,
			       _cor2) ->
			%% Line 2279
			{'none',[]}
		    %% Line 2280
		    <R1> when 'true' ->
			let <_cor5> =
			    %% Line 2282
			    apply _cor1
				(R1)
			in  %% Line 2282
			    {{'value',_cor5},[[114|[101|[99|[111|[114|[100|[32|[119|[97|[115|[32|[114|[101|[110|[97|[109|[101|[100]]]]]]]]]]]]]]]]]]]}
		  end
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','code'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'maybe_modified_quiet'/5 =
    %% Line 2290
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2291
	( case _cor0 of
	    ( <( {'code',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec98,_cor20,_cor21,_cor22,_cor23}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec98 of
		    %% Line 2292
		    <'always'> when 'true' ->
			%% Line 2293
			apply 'maybe_modified_1'/5
			    (_cor4, _cor3, _cor2, _cor1, 'yes')
		    %% Line 2294
		    <_cor25> when 'true' ->
			%% Line 2295
			apply 'maybe_modified_1'/5
			    (_cor4, _cor3, _cor2, _cor1, 'no')
		  end
	      -| ['compiler_generated'] )
	    ( <_cor24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','code'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'maybe_modified'/5 =
    %% Line 2301
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2302
	( case _cor0 of
	    ( <( {'code',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec99,_cor19,_cor20,_cor21,_cor22}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'maybe_modified_1'/5
		      (_cor4, _cor3, _cor2, _cor1, _rec99)
	      -| ['compiler_generated'] )
	    ( <_cor23> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','code'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'maybe_modified_1'/5 =
    %% Line 2304
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'none',Node,_X_Depth,_X_Message,_X_Notes> when 'true' ->
	      %% Line 2305
	      Node
	  %% Line 2306
	  <{'value',Node1},Node,Depth,Message,Notes> when 'true' ->
	      %% Line 2307
	      case Notes of
		%% Line 2308
		<'no'> when 'true' ->
		    %% Line 2309
		    apply 'rewrite'/2
			(Node, Node1)
		%% Line 2310
		<_cor18> when 'true' ->
		    let <_cor5> =
			%% Line 2314
			call 'erl_syntax_lib':'limit'
			    (Node, Depth)
		    in  let <_cor6> =
			    %% Line 2313
			    call 'erl_syntax_lib':'strip_comments'
				(_cor5)
			in  let <_cor7> =
				%% Line 2312
				call 'erl_syntax_lib':'to_comment'
				    (_cor6, %% Line 2315
					    [32|[32]])
			    in  let <Code> =
				    %% Line 2311
				    call 'erl_syntax':'comment_text'
					(_cor7)
				in  let <_cor10> =
					%% Line 2317
					call 'erlang':'++'
					    (Message, %% Line 2318
						      [[79|[114|[105|[103|[105|[110|[97|[108|[32|[99|[111|[100|[101|[58]]]]]]]]]]]]]]|Code])
				    in  let <_cor11> =
					    %% Line 2317
					    apply 'comment_note'/1
						(_cor10)
					in  let <_cor9> =
						%% Line 2319
						apply 'rewrite'/2
						    (Node, Node1)
					    in  %% Line 2316
						call 'erl_syntax':'add_precomments'
						    (%% Line 2317
						     [_cor11|%% Line 2318
							     []], _cor9)
	      end
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'maybe_modified_1',5}}] )
	    -| ['compiler_generated'] )
	end
'create_stubs'/2 =
    %% Line 2349
    fun (_cor1,_cor0) ->
	let <Opts1> =
	    %% Line 2350
	    call 'erlang':'++'
		(_cor0, [{'backup_suffix',[46|[98|[97|[107]]]]}|['backups'|[{'dir',[]}|[{'printer',( 'default_printer'/2
												     -| [{'id',{0,0,'-create_stubs/2-fun-0-'}}] )}|[{'stub_dir',[115|[116|[117|[98|[115]]]]]}|['stubs'|[{'suffix',[46|[101|[114|[108]]]]}|[{'verbose','false'}]]]]]]]])
	in  let <_cor8> =
		%% Line 2351
		( fun (_cor5,_cor4) ->
		      let <F> =
			  %% Line 2352
			  apply 'create_stub'/2
			      (_cor5, Opts1)
		      in  %% Line 2353
			  [F|_cor4]
		  -| [{'id',{0,0,'-create_stubs/2-fun-1-'}}] )
	    in  %% Line 2351
		call 'lists':'foldl'
		    (_cor8, %% Line 2355
			    [], _cor1)
'maybe_create_stubs'/2 =
    %% Line 2357
    fun (_cor1,_cor0) ->
	%% Line 2358
	case call 'proplists':'get_bool'
		 ('stubs', _cor0) of
	  %% Line 2359
	  <'true'> when 'true' ->
	      %% Line 2360
	      apply 'create_stubs'/2
		  (_cor1, _cor0)
	  %% Line 2361
	  <'false'> when 'true' ->
	      %% Line 2362
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'create_stub'/2 =
    %% Line 2365
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Name,Fs,Attrs},Opts> when 'true' ->
	      let <_cor7> =
		  %% Line 2366
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[F|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'stub_function'/1
					      (F)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Fs)
		    -| ['list_comprehension'] )
	      in  let <_cor13> =
		      %% Line 2367
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor11) ->
				    case _cor11 of
				      <[{F,_cor21}|_cor10]> when 'true' ->
					  let <_cor12> =
					      apply 'lc$^1'/1
						  (_cor10)
					  in  ( [F|_cor12]
						-| ['compiler_generated'] )
				      ( <[_cor9|_cor10]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor10)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor11> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor11})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(Fs)
			-| ['list_comprehension'] )
		  in  let <_cor15> =
			  %% Line 2368
			  apply 'stub_header'/3
			      (Name, _cor13, Attrs)
		      in  let <Forms> =
			      %% Line 2368
			      call 'erlang':'++'
				  (_cor15, _cor7)
			  in  let <Dir> =
				  %% Line 2369
				  call 'proplists':'get_value'
				      ('stub_dir', Opts, [])
			      in  do  %% Line 2370
				      apply 'verbose'/3
					  ([99|[114|[101|[97|[116|[105|[110|[103|[32|[115|[116|[117|[98|[32|[102|[105|[108|[101|[32|[102|[111|[114|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[119|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]], Opts)
				      let <_cor18> =
					  %% Line 2371
					  call 'erl_syntax':'form_list'
					      (Forms)
				      in  %% Line 2371
					  apply 'write_module'/4
					      (_cor18, Name, Dir, Opts)
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'create_stub',2}}] )
	    -| ['compiler_generated'] )
	end
'stub_function'/1 =
    %% Line 2376
    fun (_cor0) ->
	case _cor0 of
	  <{{F,A},{M,{F1,A1}}}> when 'true' ->
	      let <Vs> =
		  %% Line 2377
		  apply 'var_list'/1
		      (A)
	      in  let <Vs1> =
		      %% Line 2378
		      apply 'var_list'/1
			  (A1)
		  in  let <_cor4> =
			  %% Line 2379
			  call 'erl_syntax':'atom'
			      (M)
		      in  let <_cor3> =
			      %% Line 2380
			      call 'erl_syntax':'atom'
				  (F1)
			  in  let <R> =
				  %% Line 2379
				  call 'erl_syntax':'module_qualifier'
				      (_cor4, _cor3)
			      in  let <Call> =
				      %% Line 2381
				      call 'erl_syntax':'application'
					  (R, Vs1)
				  in  let <_cor8> =
					  %% Line 2382
					  call 'erl_syntax':'atom'
					      (F)
				      in  let <_cor7> =
					      %% Line 2383
					      call 'erl_syntax':'clause'
						  (Vs, [], [Call|[]])
					  in  %% Line 2382
					      call 'erl_syntax':'function'
						  (_cor8, %% Line 2383
							  [_cor7|[]])
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'stub_function',1}}] )
	    -| ['compiler_generated'] )
	end
'var_list'/1 =
    %% Line 2385
    fun (_cor0) ->
	%% Line 2386
	apply 'var_list'/2
	    (_cor0, 1)
'var_list'/2 =
    %% Line 2388
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,I>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor2> =
		  %% Line 2389
		  call 'erlang':'integer_to_list'
		      (I)
	      in  let <_cor3> =
		      %% Line 2389
		      [88|_cor2]
		  in  let <_cor4> =
			  %% Line 2389
			  call 'erl_syntax':'variable'
			      (_cor3)
		      in  let <_cor6> =
			      %% Line 2390
			      call 'erlang':'-'
				  (N, 1)
			  in  let <_cor5> =
				  %% Line 2390
				  call 'erlang':'+'
				      (I, 1)
			      in  let <_cor7> =
				      %% Line 2390
				      apply 'var_list'/2
					  (_cor6, _cor5)
				  in  %% Line 2389
				      [_cor4|_cor7]
	  %% Line 2391
	  <0,_cor10> when 'true' ->
	      %% Line 2392
	      []
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'var_list',2}}] )
	    -| ['compiler_generated'] )
	end
'stub_header'/3 =
    %% Line 2394
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2396
	    call 'io_lib':'fwrite'
		([84|[104|[105|[115|[32|[105|[115|[32|[97|[110|[32|[97|[117|[116|[111|[109|[97|[116|[105|[99|[97|[108|[108|[121|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[115|[116|[117|[98|[32|[105|[110|[116|[101|[114|[102|[97|[99|[101|[10|[102|[111|[114|[32|[116|[104|[101|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[119|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2399
																																																			       [_cor2|[]])
	in  let <_cor5> =
		%% Line 2401
		apply 'timestamp'/0
		    ()
	    in  let <_cor6> =
		    %% Line 2395
		    apply 'comment'/1
			([[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2396
																																														   [_cor4|%% Line 2400
																																															  [[]|%% Line 2401
																																															      [_cor5|%% Line 2402
																																																     [[]]]]]])
		in  let <_cor8> =
			%% Line 2403
			call 'erl_syntax':'atom'
			    ('module')
		    in  let <_cor7> =
			    %% Line 2404
			    call 'erl_syntax':'atom'
				(_cor2)
			in  let <_cor9> =
				%% Line 2403
				call 'erl_syntax':'attribute'
				    (_cor8, %% Line 2404
					    [_cor7|[]])
			    in  let <_cor10> =
				    %% Line 2405
				    apply 'make_export'/1
					(_cor1)
				in  let <_cor3> =
					%% Line 2406
					apply 'make_attributes'/1
					    (_cor0)
				    in  %% Line 2395
					[_cor6|%% Line 2403
					       [_cor9|%% Line 2405
						      [_cor10|_cor3]]]
'rename'/2 =
    %% Line 2419
    fun (_cor1,_cor0) ->
	%% Line 2420
	apply 'rename'/3
	    (_cor1, _cor0, [])
'rename'/3 =
    %% Line 2501
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2502
	    case apply 'is_atom_map'/1
		     (_cor1) of
	      %% Line 2503
	      <'true'> when 'true' ->
		  %% Line 2504
		  call 'dict':'from_list'
		      (_cor1)
	      %% Line 2505
	      <'false'> when 'true' ->
		  do  %% Line 2506
		      apply 'report_error'/2
			  ([98|[97|[100|[32|[109|[111|[100|[117|[108|[101|[32|[114|[101|[110|[97|[109|[105|[110|[103|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2507
																				   [_cor1|[10]])
		      %% Line 2508
		      call 'erlang':'exit'
			  ('error')
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	in  let <_cor6> =
		%% Line 2513
		call 'erlang':'++'
		    (_cor0, [{'backup_suffix',[46|[98|[97|[107]]]]}|%% Line 2514
								    ['backups'|%% Line 2515
									       [{'printer',( 'default_printer'/2
											     -| [{'id',{0,0,'-rename/3-fun-0-'}}] )}|%% Line 2516
																     ['stubs'|[{'suffix',[46|[101|[114|[108]]]]}|['comments'|[{'preprocess','false'}|[{'tidy','false'}|['no_banner'|[{'notes','no'}|[{'verbose','false'}]]]]]]]]]]])
	    in  let <Opts1> =
		    %% Line 2513
		    [{'find_src_rules',[]}|_cor6]
		in  let <_cor10> =
			%% Line 2524
			( fun (_cor8) ->
			      apply 'rename_file'/3
				  (_cor8, _cor4, Opts1)
			  -| [{'id',{0,0,'-rename/3-fun-1-'}}] )
		    in  %% Line 2524
			call 'lists':'flatmap'
			    (_cor10, _cor2)
'rename_file'/3 =
    %% Line 2526
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2527
	case apply 'read_module'/2
		 (_cor2, _cor0) of
	  <{S,Enc}> when 'true' ->
	      let <_cor6> =
		  %% Line 2530
		  ( case <> of
		      <>
			  when call 'erlang':'=/='
				(Enc,
				 'none') ->
			  %% Line 2531
			  ( case call 'proplists':'get_bool'
				     ('comments', _cor0) of
			      <'false'> when 'true' ->
				  ( [{'encoding',Enc}|[]]
				    -| ['compiler_generated'] )
			      ( <'true'> when 'true' ->
				    []
				-| ['compiler_generated'] )
			      ( <_cor_variable> when 'true' ->
				    call 'erlang':'error'
					('badarg')
				-| ['compiler_generated'] )
			    end
			    -| ['list_comprehension'] )
		      ( <> when 'true' ->
			    []
			-| ['compiler_generated'] )
		    end
		    -| ['list_comprehension'] )
	      in  %% Line 2533
		  ( case apply 'get_module_info'/1
			     (S) of
		      ( <( {'module',_rec100,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor13> =
				%% Line 2534
				case call 'dict':'find'
					 (_rec100, _cor1) of
				  %% Line 2535
				  <{'ok',N}> when 'true' ->
				      N
				  %% Line 2536
				  <'error'> when 'true' ->
				      _rec100
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor12})
				    -| ['compiler_generated'] )
				end
			    in  let <Dict1> =
				    %% Line 2541
				    call 'dict':'erase'
					(_rec100, _cor1)
				in  let <_cor17> =
					%% Line 2545
					call 'dict':'to_list'
					    (Dict1)
				    in  let <_cor16> =
					    %% Line 2545
					    call 'erlang':'++'
						(_cor6, _cor0)
					in  let <Opts1> =
						%% Line 2542
						['no_headers'|%% Line 2543
							      [{'export',[_rec100|[]]}|%% Line 2544
										       [{'static',[_rec100|[]]}|%% Line 2545
														[{'redirect',_cor17}|_cor16]]]]
					    in  %% Line 2546
						case apply 'merge_sources'/3
							 (_cor13, [S|[]], Opts1) of
						  <{Tree,Stubs}> when 'true' ->
						      let <_cor20> =
							  %% Line 2547
							  apply 'filename'/1
							      (_cor2)
						      in  let <Dir> =
							      %% Line 2547
							      call 'filename':'dirname'
								  (_cor20)
							  in  let <_cor22> =
								  %% Line 2548
								  call 'erlang':'++'
								      (_cor0, _cor6)
							      in  let <File1> =
								      %% Line 2548
								      apply 'write_module'/4
									  (Tree, _cor13, Dir, _cor22)
								  in  let <_cor24> =
									  %% Line 2552
									  apply 'maybe_create_stubs'/2
									      (Stubs, [{'stub_dir',Dir}|Opts1])
								      in  %% Line 2552
									  [File1|_cor24]
						  ( <_cor19> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor19})
						    -| ['compiler_generated'] )
						end
			-| ['compiler_generated'] )
		      ( <_cor34> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','module'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'get_module_info'/1 =
    %% Line 2560
    fun (_cor0) ->
	let <_cor2> =
	    catch
		let <_cor1> =
		    %% Line 2561
		    call 'erl_syntax_lib':'analyze_forms'
			(_cor0)
		in  %% Line 2561
		    {'ok',_cor1}
	in  let <_cor4> =
		%% Line 2561
		case _cor2 of
		  %% Line 2562
		  <{'ok',L1}> when 'true' ->
		      %% Line 2563
		      L1
		  %% Line 2564
		  <'syntax_error'> when 'true' ->
		      do  %% Line 2565
			  apply 'report_error'/1
			      ([115|[121|[110|[116|[97|[120|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[105|[110|[112|[117|[116|[46]]]]]]]]]]]]]]]]]]]]]])
			  %% Line 2566
			  call 'erlang':'error'
			      ('badarg')
		  %% Line 2567
		  <{'EXIT',R}> when 'true' ->
		      %% Line 2568
		      call 'erlang':'exit'
			  (R)
		  %% Line 2569
		  <R> when 'true' ->
		      %% Line 2570
		      call 'erlang':'throw'
			  (R)
		end
	    in  let <_cor7> =
		    %% Line 2573
		    case call 'lists':'keyfind'
			     ('module', 1, _cor4) of
		      %% Line 2574
		      <{'module',NVs = {_X_N,_X_Vs}}> when 'true' ->
			  %% Line 2575
			  NVs
		      %% Line 2576
		      <{'module',N}> when 'true' ->
			  %% Line 2577
			  {N,'none'}
		      %% Line 2578
		      <'false'> when 'true' ->
			  do  %% Line 2579
			      apply 'report_error'/1
				  ([105|[110|[32|[115|[111|[117|[114|[99|[101|[32|[99|[111|[100|[101|[58|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[32|[109|[105|[115|[115|[105|[110|[103|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			      %% Line 2580
			      call 'erlang':'exit'
				  ('error')
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		in  %% Line 2572
		    case _cor7 of
		      <{Name,Vars}> when 'true' ->
			  do  %% Line 2582
			      case call 'lists':'keyfind'
				       ('errors', 1, _cor4) of
				%% Line 2583
				<{'errors',Ds}>
				    when call 'erlang':'=/='
					  (Ds,
					   []) ->
				    do  %% Line 2584
					apply 'report_errors'/2
					    (Ds, Name)
					%% Line 2585
					call 'erlang':'exit'
					    ('error')
				%% Line 2586
				<_cor28> when 'true' ->
				    'ok'
			      end
			      do  %% Line 2589
				  case call 'lists':'keyfind'
					   ('warnings', 1, _cor4) of
				    %% Line 2590
				    <{'warnings',Ds1}>
					when call 'erlang':'=/='
					      (Ds1,
					       []) ->
					%% Line 2591
					apply 'report_warnings'/2
					    (Ds1, Name)
				    %% Line 2592
				    <_cor29> when 'true' ->
					'ok'
				  end
				  let <_cor12> =
				      %% Line 2595
				      case call 'lists':'keyfind'
					       ('functions', 1, _cor4) of
					%% Line 2596
					<{'functions',Fs}> when 'true' ->
					    %% Line 2597
					    call 'ordsets':'from_list'
						(Fs)
					%% Line 2598
					<_cor30> when 'true' ->
					    %% Line 2599
					    []
				      end
				  in  let <_cor15> =
					  %% Line 2601
					  case call 'lists':'keyfind'
						   ('exports', 1, _cor4) of
					    %% Line 2602
					    <{'exports',Es}> when 'true' ->
						%% Line 2603
						call 'ordsets':'from_list'
						    (Es)
					    %% Line 2604
					    <_cor31> when 'true' ->
						%% Line 2605
						[]
					  end
				      in  let <_cor18> =
					      %% Line 2607
					      case call 'lists':'keyfind'
						       ('imports', 1, _cor4) of
						%% Line 2608
						<{'imports',Is}> when 'true' ->
						    %% Line 2609
						    apply 'expand_imports'/2
							(Is, Name)
						%% Line 2610
						<_cor32> when 'true' ->
						    %% Line 2611
						    []
					      end
					  in  let <_cor21> =
						  %% Line 2613
						  case call 'lists':'keyfind'
							   ('attributes', 1, _cor4) of
						    %% Line 2614
						    <{'attributes',As}> when 'true' ->
							%% Line 2615
							call 'ordsets':'from_list'
							    (As)
						    %% Line 2616
						    <_cor33> when 'true' ->
							%% Line 2617
							[]
						  end
					      in  let <_cor24> =
						      %% Line 2619
						      case call 'lists':'keyfind'
							       ('records', 1, _cor4) of
							%% Line 2620
							<{'records',Rs}> when 'true' ->
							    %% Line 2621
							    apply 'fold_record_fields'/1
								(Rs)
							%% Line 2622
							<_cor34> when 'true' ->
							    %% Line 2623
							    []
						      end
						  in  do  %% Line 2625
							  apply 'check_records'/2
							      (_cor24, Name)
							  let <_cor26> =
							      %% Line 2629
							      call 'ordsets':'intersection'
								  (_cor15, _cor12)
							  in  %% Line 2626
							      {'module',Name,%% Line 2627
									     Vars,_cor12,_cor26,_cor18,_cor21,_cor24}
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
'fold_record_fields'/1 =
    %% Line 2634
    fun (_cor0) ->
	%% Line 2635
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[{N,Fs}|_cor2]> when 'true' ->
			    let <_cor9> =
				( letrec
				      'lc$^1'/1 =
					  fun (_cor6) ->
					      case _cor6 of
						<[F|_cor5]> when 'true' ->
						    let <_cor7> =
							apply 'fold_record_field'/1
							    (F)
						    in  let <_cor8> =
							    apply 'lc$^1'/1
								(_cor5)
							in  ( [_cor7|_cor8]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor6> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor6})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (Fs)
				  -| ['list_comprehension'] )
			    in  let <_cor10> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{N,_cor9}|_cor10]
				      -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'fold_record_field'/1 =
    %% Line 2637
    fun (_cor0) ->
	case _cor0 of
	  <None = {_X_Name,'none'}> when 'true' ->
	      %% Line 2638
	      None
	  %% Line 2639
	  <{Name,F}> when 'true' ->
	      %% Line 2640
	      case call 'erl_syntax':'is_literal'
		       (F) of
		%% Line 2641
		<'true'> when 'true' ->
		    let <_cor1> =
			%% Line 2642
			call 'erl_syntax':'concrete'
			    (F)
		    in  %% Line 2642
			{Name,{'value',_cor1}}
		%% Line 2643
		<'false'> when 'true' ->
		    let <_cor2> =
			%% Line 2647
			call 'erlang':'phash'
			    (F, 16777215)
		    in  %% Line 2647
			{Name,{'hash',_cor2}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'fold_record_field',1}}] )
	    -| ['compiler_generated'] )
	end
'report_errors'/2 =
    %% Line 2650
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[D|Ds],Name> when 'true' ->
	      let <_cor2> =
		  %% Line 2651
		  apply 'error_text'/2
		      (D, Name)
	      in  let <_cor3> =
		      %% Line 2651
		      call 'erlang':'++'
			  ([101|[114|[114|[111|[114|[58|[32]]]]]]], _cor2)
		  in  do  %% Line 2651
			  apply 'report_error'/1
			      (_cor3)
			  %% Line 2652
			  apply 'report_errors'/2
			      (Ds, Name)
	  %% Line 2653
	  <[],_cor6> when 'true' ->
	      %% Line 2654
	      'ok'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'report_errors',2}}] )
	    -| ['compiler_generated'] )
	end
'report_warnings'/2 =
    %% Line 2656
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[D|Ds],Name> when 'true' ->
	      let <_cor2> =
		  %% Line 2657
		  apply 'error_text'/2
		      (D, Name)
	      in  do  %% Line 2657
		      apply 'report_warning'/1
			  (_cor2)
		      %% Line 2658
		      apply 'report_errors'/2
			  (Ds, Name)
	  %% Line 2659
	  <[],_cor5> when 'true' ->
	      %% Line 2660
	      'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'report_warnings',2}}] )
	    -| ['compiler_generated'] )
	end
'error_text'/2 =
    %% Line 2662
    fun (_cor1,_cor0) ->
	%% Line 2663
	case _cor1 of
	  %% Line 2664
	  <{L,M,E}>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  catch
		      %% Line 2665
		      call M:'format_error'
			  (E)
	      in  %% Line 2665
		  case _cor4 of
		    %% Line 2666
		    <S>
			when call 'erlang':'is_list'
			      (_cor4) ->
			%% Line 2667
			call 'io_lib':'fwrite'
			    ([96|[126|[119|[39|[44|[32|[108|[105|[110|[101|[32|[126|[119|[58|[32|[126|[116|[115|[46]]]]]]]]]]]]]]]]]]], %% Line 2668
																	[_cor0|[L|[S|[]]]])
		    %% Line 2669
		    <_cor9> when 'true' ->
			%% Line 2670
			apply 'error_text_1'/2
			    (_cor1, _cor0)
		  end
	  %% Line 2672
	  <_X_E> when 'true' ->
	      %% Line 2673
	      apply 'error_text_1'/2
		  (_cor1, _cor0)
	end
'error_text_1'/2 =
    %% Line 2676
    fun (_cor1,_cor0) ->
	%% Line 2677
	call 'io_lib':'fwrite'
	    ([101|[114|[114|[111|[114|[58|[32|[96|[126|[119|[39|[44|[32|[126|[80|[46]]]]]]]]]]]]]]]], [_cor0|[_cor1|[15]]])
'check_records'/2 =
    %% Line 2679
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2680
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{N,_cor10}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [N|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  %% Line 2680
	    case apply 'duplicates'/1
		     (_cor6) of
	      %% Line 2681
	      <[]> when 'true' ->
		  %% Line 2682
		  'ok'
	      %% Line 2683
	      <Ns> when 'true' ->
		  do  %% Line 2684
		      apply 'report_error'/2
			  ([105|[110|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[119|[39|[58|[32|[109|[117|[108|[116|[105|[112|[108|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[114|[101|[99|[111|[114|[100|[115|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2686
																																			      [_cor0|[Ns|[]]])
		      %% Line 2687
		      call 'erlang':'exit'
			  ('error')
	    end
'expand_imports'/2 =
    %% Line 2690
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 2691
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 2692
			      {M,Fs}|_cor3]> when 'true' ->
				let <_cor9> =
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor7) ->
						  case _cor7 of
						    <[F|_cor6]> when 'true' ->
							let <_cor8> =
							    apply 'lc$^1'/1
								(_cor6)
							in  ( [{M,F}|_cor8]
							      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor7> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor7})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (Fs)
				      -| ['list_comprehension'] )
				in  let <_cor10> =
					%% Line 2692
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor9|_cor10]
					  -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 2692
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor12> =
		%% Line 2691
		call 'lists':'append'
		    (_cor11)
	    in  let <Fs> =
		    %% Line 2691
		    call 'ordsets':'from_list'
			(_cor12)
		in  let <As> =
			%% Line 2693
			call 'erl_syntax_lib':'function_name_expansions'
			    (Fs)
		    in  let <_cor19> =
			    %% Line 2694
			    ( letrec
				  'lc$^2'/1 =
				      fun (_cor17) ->
					  case _cor17 of
					    <[{N,_cor23}|_cor16]> when 'true' ->
						let <_cor18> =
						    apply 'lc$^2'/1
							(_cor16)
						in  ( [N|_cor18]
						      -| ['compiler_generated'] )
					    ( <[_cor15|_cor16]> when 'true' ->
						  apply 'lc$^2'/1
						      (_cor16)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor17> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor17})
						    -| [{'function_name',{'lc$^2',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^2'/1
				      (As)
			      -| ['list_comprehension'] )
			in  %% Line 2694
			    case apply 'duplicates'/1
				     (_cor19) of
			      %% Line 2695
			      <[]> when 'true' ->
				  %% Line 2696
				  call 'ordsets':'from_list'
				      (As)
			      %% Line 2697
			      <Ns> when 'true' ->
				  do  %% Line 2698
				      apply 'report_error'/2
					  ([105|[110|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[119|[39|[58|[32|[109|[117|[108|[116|[105|[112|[108|[121|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2700
																																								[_cor0|[Ns|[]]])
				      %% Line 2701
				      call 'erlang':'exit'
					  ('error')
			    end
'open_output_file'/1 =
    %% Line 2710
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 2711
		call 'file':'open'
		    (_cor0, ['write'])
	in  %% Line 2711
	    case _cor1 of
	      %% Line 2712
	      <{'ok',FD}> when 'true' ->
		  %% Line 2713
		  FD
	      %% Line 2714
	      <Error = {'error',_cor4}> when 'true' ->
		  do  %% Line 2715
		      apply 'error_open_output'/1
			  (_cor0)
		      %% Line 2716
		      call 'erlang':'exit'
			  (Error)
	      %% Line 2717
	      <{'EXIT',R}> when 'true' ->
		  do  %% Line 2718
		      apply 'error_open_output'/1
			  (_cor0)
		      %% Line 2719
		      call 'erlang':'exit'
			  (R)
	      %% Line 2720
	      <R> when 'true' ->
		  do  %% Line 2721
		      apply 'error_open_output'/1
			  (_cor0)
		      %% Line 2722
		      call 'erlang':'exit'
			  (R)
	    end
'output_encoding'/2 =
    %% Line 2725
    fun (_cor1,_cor0) ->
	%% Line 2726
	case call 'proplists':'get_value'
		 ('encoding', _cor0) of
	  %% Line 2727
	  <'undefined'> when 'true' ->
	      let <_cor2> =
		  %% Line 2728
		  call 'epp':'default_encoding'
		      ()
	      in  let <_cor10> =
		      %% Line 2728
		      call 'io':'setopts'
			  (_cor1, [{'encoding',_cor2}|[]])
		  in  %% Line 2728
		      case _cor10 of
			<'ok'> when 'true' ->
			    ( _cor10
			      -| ['compiler_generated'] )
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2729
	  <Encoding> when 'true' ->
	      %% Line 2730
	      case call 'io':'setopts'
		       (_cor1, [{'encoding',Encoding}|[]]) of
		<'ok'> when 'true' ->
		    let <EncS> =
			%% Line 2731
			call 'epp':'encoding_to_string'
			    (Encoding)
		    in  let <_cor11> =
			    %% Line 2732
			    call 'io':'fwrite'
				(_cor1, #{#<37>(8,1,'integer',['unsigned'|['big']]),
					  #<37>(8,1,'integer',['unsigned'|['big']]),
					  #<32>(8,1,'integer',['unsigned'|['big']]),
					  #<126>(8,1,'integer',['unsigned'|['big']]),
					  #<115>(8,1,'integer',['unsigned'|['big']]),
					  #<10>(8,1,'integer',['unsigned'|['big']])}#, [EncS|[]])
			in  %% Line 2732
			    case _cor11 of
			      <'ok'> when 'true' ->
				  ( _cor11
				    -| ['compiler_generated'] )
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'read_module'/2 =
    %% Line 2740
    fun (_cor1,_cor0) ->
	%% Line 2741
	case apply 'file_type'/1
		 (_cor1) of
	  %% Line 2742
	  <{'value',_cor8}> when 'true' ->
	      %% Line 2743
	      apply 'read_module_1'/2
		  (_cor1, _cor0)
	  %% Line 2744
	  <'none'> when 'true' ->
	      let <Rules> =
		  %% Line 2745
		  call 'proplists':'get_value'
		      ('find_src_rules', _cor0)
	      in  %% Line 2746
		  case apply 'find_src'/2
			   (_cor1, Rules) of
		    %% Line 2747
		    <{'error',_cor9}> when 'true' ->
			%% Line 2750
			apply 'read_module_1'/2
			    (_cor1, _cor0)
		    %% Line 2751
		    <{Name1,_cor10}> when 'true' ->
			let <_cor3> =
			    %% Line 2752
			    call 'erlang':'++'
				(Name1, [46|[101|[114|[108]]]])
			in  %% Line 2752
			    apply 'read_module_1'/2
				(_cor3, _cor0)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'read_module_1'/2 =
    %% Line 2756
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2757
	    apply 'filename'/1
		(_cor1)
	in  do  %% Line 2757
		apply 'verbose'/3
		    ([114|[101|[97|[100|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]], [_cor2|[]], _cor0)
		%% Line 2758
		case apply 'read_module_2'/2
			 (_cor1, _cor0) of
		  <{Forms,Enc}> when 'true' ->
		      %% Line 2759
		      case call 'proplists':'get_bool'
			       ('comments', _cor0) of
			%% Line 2760
			<'false'> when 'true' ->
			    %% Line 2761
			    {Forms,Enc}
			%% Line 2762
			<'true'> when 'true' ->
			    let <Comments> =
				%% Line 2763
				call 'erl_comment_scan':'file'
				    (_cor1)
			    in  let <_cor5> =
				    %% Line 2764
				    call 'erl_recomment':'recomment_forms'
					(Forms, Comments)
				in  %% Line 2764
				    {_cor5,Enc}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'read_module_2'/2 =
    %% Line 2767
    fun (_cor1,_cor0) ->
	%% Line 2768
	case apply 'read_module_3'/2
		 (_cor1, _cor0) of
	  %% Line 2769
	  <{'ok',Forms}> when 'true' ->
	      do  %% Line 2770
		  apply 'check_forms'/2
		      (Forms, _cor1)
		  let <Enc> =
		      %% Line 2771
		      call 'epp':'read_encoding'
			  (_cor1)
		  in  %% Line 2772
		      {Forms,Enc}
	  %% Line 2773
	  <Error = {'error',_cor6}> when 'true' ->
	      do  %% Line 2774
		  apply 'error_read_file'/1
		      (_cor1)
		  %% Line 2775
		  call 'erlang':'exit'
		      (Error)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'read_module_3'/2 =
    %% Line 2778
    fun (_cor1,_cor0) ->
	%% Line 2779
	case call 'proplists':'get_bool'
		 ('preprocess', _cor0) of
	  %% Line 2780
	  <'false'> when 'true' ->
	      %% Line 2781
	      call 'epp_dodger':'parse_file'
		  (_cor1)
	  %% Line 2782
	  <'true'> when 'true' ->
	      %% Line 2783
	      apply 'read_module_4'/2
		  (_cor1, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'read_module_4'/2 =
    %% Line 2786
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2787
	    call 'proplists':'append_values'
		('includes', _cor0)
	in  let <_cor2> =
		%% Line 2788
		call 'filename':'dirname'
		    (_cor1)
	    in  let <Includes> =
		    %% Line 2788
		    call 'erlang':'++'
			(_cor3, [_cor2|[[46]]])
		in  let <_cor5> =
			%% Line 2789
			call 'proplists':'append_values'
			    ('macros', _cor0)
		    in  let <Macros> =
			    %% Line 2790
			    call 'erlang':'++'
				(_cor5, [])
			in  %% Line 2791
			    call 'epp':'parse_file'
				(_cor1, Includes, Macros)
'check_forms'/2 =
    %% Line 2793
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[F|Fs],File> when 'true' ->
	      %% Line 2794
	      case call 'erl_syntax':'type'
		       (F) of
		%% Line 2795
		<'error_marker'> when 'true' ->
		    let <_cor3> =
			%% Line 2796
			case call 'erl_syntax':'error_marker_info'
				 (F) of
			  %% Line 2797
			  <{_cor10,M,D}> when 'true' ->
			      %% Line 2798
			      call M:'format_error'
				  (D)
			  %% Line 2799
			  <_cor11> when 'true' ->
			      %% Line 2800
			      [117|[110|[107|[110|[111|[119|[110|[32|[101|[114|[114|[111|[114]]]]]]]]]]]]]
			end
		    in  let <_cor5> =
			    %% Line 2803
			    apply 'filename'/1
				(File)
			in  let <_cor6> =
				%% Line 2803
				call 'erl_syntax':'get_pos'
				    (F)
			    in  do  %% Line 2802
				    apply 'report_error'/2
					([105|[110|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[32|[97|[116|[32|[108|[105|[110|[101|[32|[126|[119|[58|[10|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2803
																											[_cor5|[_cor6|[_cor3|[]]]])
				    %% Line 2804
				    call 'erlang':'exit'
					('error')
		%% Line 2805
		<_cor12> when 'true' ->
		    %% Line 2806
		    apply 'check_forms'/2
			(Fs, File)
	      end
	  %% Line 2808
	  <[],_cor13> when 'true' ->
	      %% Line 2809
	      'ok'
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'check_forms',2}}] )
	    -| ['compiler_generated'] )
	end
'find_src'/2 =
    %% Line 2811
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,'undefined'> when 'true' ->
	      let <_cor2> =
		  %% Line 2812
		  apply 'filename'/1
		      (Name)
	      in  %% Line 2812
		  call 'filename':'find_src'
		      (_cor2)
	  %% Line 2813
	  <Name,Rules> when 'true' ->
	      let <_cor3> =
		  %% Line 2814
		  apply 'filename'/1
		      (Name)
	      in  %% Line 2814
		  call 'filename':'find_src'
		      (_cor3, Rules)
	end
'file_type'/1 =
    %% Line 2818
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 2819
		call 'file':'read_file_info'
		    (_cor0)
	in  %% Line 2819
	    case _cor1 of
	      %% Line 2820
	      <{'ok',Env}> when 'true' ->
		  %% Line 2821
		  ( case Env of
		      ( <( {'file_info',_cor6,_rec101,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
			   -| ['compiler_generated'] )> when 'true' ->
			    {'value',_rec101}
			-| ['compiler_generated'] )
		      ( <_cor18> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','file_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2822
	      <{'error','enoent'}> when 'true' ->
		  %% Line 2823
		  'none'
	      %% Line 2824
	      <Error = {'error',_cor19}> when 'true' ->
		  do  %% Line 2825
		      apply 'error_read_file_info'/1
			  (_cor0)
		      %% Line 2826
		      call 'erlang':'exit'
			  (Error)
	      %% Line 2827
	      <{'EXIT',R}> when 'true' ->
		  do  %% Line 2828
		      apply 'error_read_file_info'/1
			  (_cor0)
		      %% Line 2829
		      call 'erlang':'exit'
			  (R)
	      %% Line 2830
	      <R> when 'true' ->
		  do  %% Line 2831
		      apply 'error_read_file_info'/1
			  (_cor0)
		      %% Line 2832
		      call 'erlang':'throw'
			  (R)
	    end
'write_module'/4 =
    %% Line 2839
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Name1> =
	    %% Line 2840
	    apply 'filename'/1
		(_cor2)
	in  let <Dir1> =
		%% Line 2841
		apply 'filename'/1
		    (_cor1)
	    in  let <_cor8> =
		    %% Line 2842
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(Dir1,
				 []) ->
			  %% Line 2843
			  Name1
		      %% Line 2844
		      <> when 'true' ->
			  do  %% Line 2845
			      case apply 'file_type'/1
				       (Dir1) of
				%% Line 2846
				<{'value','directory'}> when 'true' ->
				    'ok'
				%% Line 2848
				<{'value',_cor25}> when 'true' ->
				    do  %% Line 2849
					apply 'report_error'/2
					    ([96|[126|[116|[115|[39|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[46]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2850
																							   [Dir1|[]])
					%% Line 2851
					call 'erlang':'exit'
					    ('error')
				%% Line 2852
				<'none'> when 'true' ->
				    %% Line 2853
				    case call 'file':'make_dir'
					     (Dir1) of
				      %% Line 2854
				      <'ok'> when 'true' ->
					  do  %% Line 2855
					      apply 'verbose'/3
						  ([99|[114|[101|[97|[116|[101|[100|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2856
																							    [Dir1|[]], _cor0)
					      'ok'
				      %% Line 2858
				      <E> when 'true' ->
					  do  %% Line 2859
					      apply 'report_error'/2
						  ([102|[97|[105|[108|[101|[100|[32|[116|[111|[32|[99|[114|[101|[97|[116|[101|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2861
																													       [Dir1|[]])
					      %% Line 2862
					      call 'erlang':'exit'
						  ({'make_dir',E})
				    end
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			      %% Line 2865
			      call 'filename':'join'
				  (Dir1, Name1)
		    end
		in  let <Suffix> =
			%% Line 2867
			call 'proplists':'get_value'
			    ('suffix', _cor0, [])
		    in  let <File> =
			    %% Line 2868
			    call 'erlang':'++'
				(_cor8, Suffix)
			in  do  %% Line 2869
				case call 'proplists':'get_bool'
					 ('backups', _cor0) of
				  %% Line 2870
				  <'true'> when 'true' ->
				      %% Line 2871
				      apply 'backup_file'/2
					  (File, _cor0)
				  %% Line 2872
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor12})
				    -| ['compiler_generated'] )
				end
				let <Printer> =
				    %% Line 2875
				    call 'proplists':'get_value'
					('printer', _cor0)
				in  let <FD> =
					%% Line 2876
					apply 'open_output_file'/1
					    (File)
				    in  %% Line 2877
					case apply 'output_encoding'/2
						 (FD, _cor0) of
					  <'ok'> when 'true' ->
					      do  %% Line 2878
						  apply 'verbose'/3
						      ([119|[114|[105|[116|[105|[110|[103|[32|[116|[111|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]], [File|[]], _cor0)
						  let <_cor17> =
						      catch
							  let <_cor16> =
							      %% Line 2879
							      apply 'output'/4
								  (FD, Printer, _cor3, _cor0)
							  in  %% Line 2879
							      {'ok',_cor16}
						  in  %% Line 2880
						      case call 'file':'close'
							       (FD) of
							<'ok'> when 'true' ->
							    %% Line 2881
							    case _cor17 of
							      %% Line 2882
							      <{'ok',_cor26}> when 'true' ->
								  %% Line 2883
								  File
							      %% Line 2884
							      <{'EXIT',R}> when 'true' ->
								  do  %% Line 2885
								      apply 'error_write_file'/1
									  (File)
								      %% Line 2886
								      call 'erlang':'exit'
									  (R)
							      %% Line 2887
							      <R> when 'true' ->
								  do  %% Line 2888
								      apply 'error_write_file'/1
									  (File)
								      %% Line 2889
								      call 'erlang':'throw'
									  (R)
							    end
							( <_cor19> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor19})
							  -| ['compiler_generated'] )
						      end
					  ( <_cor15> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor15})
					    -| ['compiler_generated'] )
					end
'output'/4 =
    %% Line 2892
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2893
	    apply _cor2
		(_cor1, _cor0)
	in  do  %% Line 2893
		call 'io':'put_chars'
		    (_cor3, _cor4)
		%% Line 2894
		call 'io':'nl'
		    (_cor3)
'backup_file'/2 =
    %% Line 2899
    fun (_cor1,_cor0) ->
	%% Line 2900
	case apply 'file_type'/1
		 (_cor1) of
	  %% Line 2901
	  <{'value','regular'}> when 'true' ->
	      %% Line 2902
	      apply 'backup_file_1'/2
		  (_cor1, _cor0)
	  %% Line 2903
	  <{'value',_cor5}> when 'true' ->
	      do  %% Line 2904
		  apply 'error_backup_file'/1
		      (_cor1)
		  %% Line 2905
		  call 'erlang':'exit'
		      ('error')
	  %% Line 2906
	  <'none'> when 'true' ->
	      %% Line 2907
	      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'backup_file_1'/2 =
    %% Line 2912
    fun (_cor1,_cor0) ->
	let <Name1> =
	    %% Line 2913
	    apply 'filename'/1
		(_cor1)
	in  let <Suffix> =
		%% Line 2914
		call 'proplists':'get_value'
		    ('backup_suffix', _cor0, [])
	    in  let <_cor6> =
		    %% Line 2915
		    call 'filename':'dirname'
			(Name1)
		in  let <_cor4> =
			%% Line 2916
			call 'filename':'basename'
			    (Name1)
		    in  let <_cor5> =
			    %% Line 2916
			    call 'erlang':'++'
				(_cor4, Suffix)
			in  let <Dest> =
				%% Line 2915
				call 'filename':'join'
				    (_cor6, _cor5)
			    in  let <_cor8> =
				    catch
					%% Line 2917
					call 'file':'rename'
					    (Name1, Dest)
				in  %% Line 2917
				    case _cor8 of
				      %% Line 2918
				      <'ok'> when 'true' ->
					  %% Line 2919
					  apply 'verbose'/3
					      ([109|[97|[100|[101|[32|[98|[97|[99|[107|[117|[112|[32|[111|[102|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]], [Name1|[]], _cor0)
				      %% Line 2920
				      <{'error',R}> when 'true' ->
					  do  %% Line 2921
					      apply 'error_backup_file'/1
						  (Name1)
					      %% Line 2922
					      call 'erlang':'exit'
						  ({'error',R})
				      %% Line 2923
				      <{'EXIT',R}> when 'true' ->
					  do  %% Line 2924
					      apply 'error_backup_file'/1
						  (Name1)
					      %% Line 2925
					      call 'erlang':'exit'
						  (R)
				      %% Line 2926
				      <R> when 'true' ->
					  do  %% Line 2927
					      apply 'error_backup_file'/1
						  (Name1)
					      %% Line 2928
					      call 'erlang':'throw'
						  (R)
				    end
'tidy'/2 =
    %% Line 2938
    fun (_cor1,_cor0) ->
	%% Line 2939
	case call 'proplists':'get_bool'
		 ('tidy', _cor0) of
	  %% Line 2940
	  <'true'> when 'true' ->
	      do  %% Line 2941
		  apply 'verbose'/2
		      ([116|[105|[100|[121|[105|[110|[103|[32|[102|[105|[110|[97|[108|[32|[109|[111|[100|[117|[108|[101|[46]]]]]]]]]]]]]]]]]]]]], _cor0)
		  %% Line 2942
		  call 'erl_tidy':'module'
		      (_cor1, ['quiet'])
	  %% Line 2943
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'make_attributes'/1 =
    %% Line 2947
    fun (_cor0) ->
	%% Line 2948
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[A|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'make_attribute'/1
				    (A)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'make_attribute'/1 =
    %% Line 2950
    fun (_cor0) ->
	case _cor0 of
	  <{Name,Term}> when 'true' ->
	      let <_cor2> =
		  %% Line 2951
		  call 'erl_syntax':'atom'
		      (Name)
	      in  let <_cor1> =
		      %% Line 2952
		      call 'erl_syntax':'abstract'
			  (Term)
		  in  %% Line 2951
		      call 'erl_syntax':'attribute'
			  (_cor2, %% Line 2952
				  [_cor1|[]])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'make_attribute',1}}] )
	    -| ['compiler_generated'] )
	end
'is_auto_import'/1 =
    %% Line 2954
    fun (_cor0) ->
	case _cor0 of
	  <{F,A}> when 'true' ->
	      %% Line 2955
	      call 'erl_internal':'bif'
		  (F, A)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_auto_import',1}}] )
	    -| ['compiler_generated'] )
	end
'timestamp'/0 =
    %% Line 2957
    fun () ->
	%% Line 2958
	case call 'erlang':'localtime'
		 () of
	  <{{Yr,Mth,Dy},{Hr,Mt,Sc}}> when 'true' ->
	      let <_cor1> =
		  %% Line 2959
		  call 'io_lib':'fwrite'
		      ([67|[114|[101|[97|[116|[101|[100|[32|[98|[121|[32|[73|[103|[111|[114|[32|[126|[119|[45|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[44|[32|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2962
																																											 [Yr|[Mth|[Dy|[Hr|[Mt|[Sc|[]]]]]]])
	      in  %% Line 2959
		  call 'lists':'flatten'
		      (_cor1)
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'filename'/1 =
    %% Line 2964
    fun (_cor0) ->
	case _cor0 of
	  <[C|T]>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(C)
		in  let <_cor2> =
			call 'erlang':'>'
			    (C, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 2965
		  apply 'filename'/1
		      (T)
	      in  %% Line 2965
		  [C|_cor3]
	  %% Line 2966
	  <[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 2967
		  apply 'filename'/1
		      (H)
	      in  let <_cor4> =
		      %% Line 2967
		      apply 'filename'/1
			  (T)
		  in  %% Line 2967
		      call 'erlang':'++'
			  (_cor5, _cor4)
	  %% Line 2968
	  <[]> when 'true' ->
	      %% Line 2969
	      []
	  %% Line 2970
	  <N>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 2971
	      call 'erlang':'atom_to_list'
		  (N)
	  %% Line 2972
	  <N> when 'true' ->
	      do  %% Line 2973
		  apply 'report_error'/2
		      ([98|[97|[100|[32|[102|[105|[108|[101|[110|[97|[109|[101|[58|[32|[96|[126|[80|[39|[46]]]]]]]]]]]]]]]]]]], [N|[25]])
		  %% Line 2974
		  call 'erlang':'exit'
		      ('error')
	end
'duplicates'/1 =
    %% Line 2976
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2977
	    call 'ordsets':'from_list'
		(_cor0)
	in  let <_cor2> =
		%% Line 2977
		call 'erlang':'--'
		    (_cor0, _cor1)
	    in  %% Line 2977
		call 'ordsets':'from_list'
		    (_cor2)
'split_list'/2 =
    %% Line 2979
    fun (_cor1,_cor0) ->
	%% Line 2980
	apply 'split_list'/4
	    (_cor0, _cor1, [], [])
'split_list'/4 =
    %% Line 2982
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H|T],F,A1,A2> when 'true' ->
	      %% Line 2983
	      case apply F
		       (H) of
		%% Line 2984
		<'true'> when 'true' ->
		    %% Line 2985
		    apply 'split_list'/4
			(T, F, [H|A1], A2)
		%% Line 2986
		<'false'> when 'true' ->
		    %% Line 2987
		    apply 'split_list'/4
			(T, F, A1, [H|A2])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2989
	  <[],_cor11,A1,A2> when 'true' ->
	      let <_cor6> =
		  %% Line 2990
		  call 'lists':'reverse'
		      (A1)
	      in  let <_cor5> =
		      %% Line 2990
		      call 'lists':'reverse'
			  (A2)
		  in  %% Line 2990
		      {_cor6,_cor5}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'split_list',4}}] )
	    -| ['compiler_generated'] )
	end
'rewrite'/2 =
    %% Line 2992
    fun (_cor1,_cor0) ->
	%% Line 2993
	call 'erl_syntax':'copy_attrs'
	    (_cor1, _cor0)
'comment_note'/1 =
    %% Line 2995
    fun (_cor0) ->
	case _cor0 of
	  <[L|Ls]> when 'true' ->
	      let <_cor1> =
		  %% Line 2996
		  call 'erlang':'++'
		      ([78|[111|[116|[101|[32|[102|[114|[111|[109|[32|[73|[103|[111|[114|[58|[32]]]]]]]]]]]]]]]], L)
	      in  %% Line 2996
		  apply 'comment'/2
		      ([_cor1|Ls], [37|[33|[32]]])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'comment_note',1}}] )
	    -| ['compiler_generated'] )
	end
'comment'/1 =
    %% Line 2998
    fun (_cor0) ->
	%% Line 2999
	apply 'comment'/2
	    (_cor0, [37|[32]])
'comment'/2 =
    %% Line 3001
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3002
	    apply 'split_lines'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 3002
		apply 'prefix_lines'/2
		    (_cor2, _cor0)
	    in  %% Line 3002
		call 'erl_syntax':'comment'
		    (_cor3)
'prefix_lines'/2 =
    %% Line 3004
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[L|Ls],Prefix> when 'true' ->
	      let <_cor2> =
		  %% Line 3005
		  call 'erlang':'++'
		      (Prefix, L)
	      in  let <_cor3> =
		      %% Line 3005
		      apply 'prefix_lines'/2
			  (Ls, Prefix)
		  in  %% Line 3005
		      [_cor2|_cor3]
	  %% Line 3006
	  <[],_cor6> when 'true' ->
	      %% Line 3007
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'prefix_lines',2}}] )
	    -| ['compiler_generated'] )
	end
'split_lines'/1 =
    %% Line 3009
    fun (_cor0) ->
	%% Line 3010
	apply 'split_lines'/2
	    (_cor0, [])
'split_lines'/2 =
    %% Line 3012
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[L|Ls],Ls1> when 'true' ->
	      let <_cor2> =
		  %% Line 3013
		  apply 'split_lines'/3
		      (L, [], Ls1)
	      in  %% Line 3013
		  apply 'split_lines'/2
		      (Ls, _cor2)
	  %% Line 3014
	  <[],Ls1> when 'true' ->
	      %% Line 3015
	      call 'lists':'reverse'
		  (Ls1)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'split_lines',2}}] )
	    -| ['compiler_generated'] )
	end
'split_lines'/3 =
    %% Line 3017
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[13|[10|Cs]],Cs1,Ls> when 'true' ->
	      %% Line 3018
	      apply 'split_lines_1'/3
		  (Cs, Cs1, Ls)
	  %% Line 3019
	  <[13|Cs],Cs1,Ls> when 'true' ->
	      %% Line 3020
	      apply 'split_lines_1'/3
		  (Cs, Cs1, Ls)
	  %% Line 3021
	  <[10|Cs],Cs1,Ls> when 'true' ->
	      %% Line 3022
	      apply 'split_lines_1'/3
		  (Cs, Cs1, Ls)
	  %% Line 3023
	  <[C|Cs],Cs1,Ls> when 'true' ->
	      %% Line 3024
	      apply 'split_lines'/3
		  (Cs, [C|Cs1], Ls)
	  %% Line 3025
	  <[],Cs,Ls> when 'true' ->
	      let <_cor3> =
		  %% Line 3026
		  call 'lists':'reverse'
		      (Cs)
	      in  %% Line 3026
		  [_cor3|Ls]
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'split_lines',3}}] )
	    -| ['compiler_generated'] )
	end
'split_lines_1'/3 =
    %% Line 3028
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3029
	    call 'lists':'reverse'
		(_cor1)
	in  %% Line 3029
	    apply 'split_lines'/3
		(_cor2, [], [_cor3|_cor0])
'warning_unsafe_call'/3 =
    %% Line 3035
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3036
	apply 'report_warning'/2
	    ([99|[97|[108|[108|[32|[116|[111|[32|[96|[126|[119|[39|[32|[105|[110|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[119|[39|[32|[112|[111|[115|[115|[105|[98|[108|[121|[32|[117|[110|[115|[97|[102|[101|[32|[105|[110|[32|[96|[126|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3037
																																						  [_cor2|[_cor1|[_cor0|[]]]])
'warning_apply_2'/2 =
    %% Line 3039
    fun (_cor1,_cor0) ->
	%% Line 3040
	apply 'report_warning'/2
	    ([99|[97|[108|[108|[32|[116|[111|[32|[96|[97|[112|[112|[108|[121|[47|[50|[39|[32|[105|[110|[32|[109|[111|[100|[117|[108|[101|[32|[96|[126|[119|[39|[32|[112|[111|[115|[115|[105|[98|[108|[121|[32|[117|[110|[115|[97|[102|[101|[32|[105|[110|[32|[96|[126|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3041
																																									     [_cor1|[_cor0|[]]])
'error_open_output'/1 =
    %% Line 3043
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3044
	    apply 'filename'/1
		(_cor0)
	in  %% Line 3044
	    apply 'report_error'/2
		([99|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[32|[102|[111|[114|[32|[111|[117|[116|[112|[117|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
'error_read_file'/1 =
    %% Line 3046
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3047
	    apply 'filename'/1
		(_cor0)
	in  %% Line 3047
	    apply 'report_error'/2
		([101|[114|[114|[111|[114|[32|[114|[101|[97|[100|[105|[110|[103|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
'error_read_file_info'/1 =
    %% Line 3049
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3050
	    apply 'filename'/1
		(_cor0)
	in  %% Line 3050
	    apply 'report_error'/2
		([101|[114|[114|[111|[114|[32|[103|[101|[116|[116|[105|[110|[103|[32|[102|[105|[108|[101|[32|[105|[110|[102|[111|[58|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
'error_write_file'/1 =
    %% Line 3052
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3053
	    apply 'filename'/1
		(_cor0)
	in  %% Line 3053
	    apply 'report_error'/2
		([101|[114|[114|[111|[114|[32|[119|[114|[105|[116|[105|[110|[103|[32|[116|[111|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
'error_backup_file'/1 =
    %% Line 3055
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3057
	    apply 'filename'/1
		(_cor0)
	in  %% Line 3056
	    apply 'report_error'/2
		([99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[99|[114|[101|[97|[116|[101|[32|[98|[97|[99|[107|[117|[112|[32|[111|[102|[32|[102|[105|[108|[101|[32|[96|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3057
																												       [_cor1|[]])
'verbose'/2 =
    %% Line 3059
    fun (_cor1,_cor0) ->
	%% Line 3060
	apply 'verbose'/3
	    (_cor1, [], _cor0)
'verbose'/3 =
    %% Line 3062
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3063
	case call 'proplists':'get_bool'
		 ('verbose', _cor0) of
	  %% Line 3064
	  <'true'> when 'true' ->
	      %% Line 3065
	      apply 'report'/2
		  (_cor2, _cor1)
	  %% Line 3066
	  <'false'> when 'true' ->
	      %% Line 3067
	      'ok'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'report_error'/1 =
    %% Line 3070
    fun (_cor0) ->
	%% Line 3071
	apply 'report_error'/2
	    (_cor0, [])
'report_error'/2 =
    %% Line 3073
    fun (_cor1,_cor0) ->
	%% Line 3074
	apply 'report'/2
	    (_cor1, _cor0)
'report_warning'/1 =
    %% Line 3076
    fun (_cor0) ->
	%% Line 3077
	apply 'report_warning'/2
	    (_cor0, [])
'report_warning'/2 =
    %% Line 3079
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3080
	    call 'erlang':'++'
		([119|[97|[114|[110|[105|[110|[103|[58|[32]]]]]]]]], _cor1)
	in  %% Line 3080
	    apply 'report'/2
		(_cor2, _cor0)
'report'/2 =
    %% Line 3085
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3086
	    call 'lists':'concat'
		(['igor'|[[58|[32]]|[_cor1|[[10]]]]])
	in  %% Line 3086
	    call 'io':'fwrite'
		(_cor2, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('igor')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('igor', _cor0)
end