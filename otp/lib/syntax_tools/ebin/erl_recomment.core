module 'erl_recomment' ['module_info'/0,
			'module_info'/1,
			'quick_recomment_forms'/2,
			'recomment_forms'/2,
			'recomment_tree'/2]
    attributes [%% Line 48
		'spec' =
		    %% Line 48
		    [{{'quick_recomment_forms',2},[{'type',48,'fun',[{'type',48,'product',[{'remote_type',48,[{'atom',48,'erl_syntax'}|[{'atom',48,'forms'}|[[]]]]}|[{'type',48,'list',[{'remote_type',48,[{'atom',48,'erl_comment_scan'}|[{'atom',48,'comment'}|[[]]]]}]}]]}|[{'remote_type',49,[{'atom',49,'erl_syntax'}|[{'atom',49,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'recomment_forms',2},[{'type',113,'fun',[{'type',113,'product',[{'remote_type',113,[{'atom',113,'erl_syntax'}|[{'atom',113,'forms'}|[[]]]]}|[{'type',113,'list',[{'remote_type',113,[{'atom',113,'erl_comment_scan'}|[{'atom',113,'comment'}|[[]]]]}]}]]}|[{'remote_type',114,[{'atom',114,'erl_syntax'}|[{'atom',114,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{{'record','filter'},[{'typed_record_field',{'record_field',216,{'atom',216,'file'},{'atom',216,'undefined'}},{'type',216,'union',[{'remote_type',216,[{'atom',216,'file'}|[{'atom',216,'filename'}|[[]]]]}|[{'atom',216,'undefined'}]]}}|[{'typed_record_field',{'record_field',217,{'atom',217,'line'},{'integer',217,0}},{'type',217,'integer',[]}}]],[]}],
		%% Line 338
		'spec' =
		    %% Line 338
		    [{{'recomment_tree',2},[{'type',338,'fun',[{'type',338,'product',[{'remote_type',338,[{'atom',338,'erl_syntax'}|[{'atom',338,'syntaxTree'}|[[]]]]}|[{'type',338,'list',[{'remote_type',338,[{'atom',338,'erl_comment_scan'}|[{'atom',338,'comment'}|[[]]]]}]}]]}|[{'type',339,'tuple',[{'remote_type',339,[{'atom',339,'erl_syntax'}|[{'atom',339,'syntaxTree'}|[[]]]]}|[{'type',339,'list',[{'remote_type',339,[{'atom',339,'erl_comment_scan'}|[{'atom',339,'comment'}|[[]]]]}]}]]}]]}]}],
		%% Line 603
		'type' =
		    %% Line 603
		    [{{'record','leaf'},[{'typed_record_field',{'record_field',603,{'atom',603,'min'},{'integer',603,0}},{'type',603,'integer',[]}}|[{'typed_record_field',{'record_field',604,{'atom',604,'max'},{'integer',604,0}},{'type',604,'integer',[]}}|[{'typed_record_field',{'record_field',605,{'atom',605,'precomments'},{'nil',605}},{'type',605,'list',[{'remote_type',605,[{'atom',605,'erl_syntax'}|[{'atom',605,'syntaxTree'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',606,{'atom',606,'postcomments'},{'nil',606}},{'type',606,'list',[{'remote_type',606,[{'atom',606,'erl_syntax'}|[{'atom',606,'syntaxTree'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',607,{'atom',607,'value'}},{'type',607,'union',[{'atom',607,'undefined'}|[{'remote_type',607,[{'atom',607,'erl_syntax'}|[{'atom',607,'syntaxTree'}|[[]]]]}]]}}]]]]],[]}],
		%% Line 609
		'type' =
		    %% Line 609
		    [{{'record','tree'},[{'typed_record_field',{'record_field',609,{'atom',609,'min'},{'integer',609,0}},{'type',609,'integer',[]}}|[{'typed_record_field',{'record_field',610,{'atom',610,'max'},{'integer',610,0}},{'type',610,'integer',[]}}|[{'typed_record_field',{'record_field',611,{'atom',611,'type'}},{'type',611,'union',[{'atom',611,'undefined'}|[{'type',611,'atom',[]}]]}}|[{'typed_record_field',{'record_field',612,{'atom',612,'attrs'}},{'type',612,'union',[{'atom',612,'undefined'}|[{'remote_type',612,[{'atom',612,'erl_syntax'}|[{'atom',612,'syntaxTreeAttributes'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',613,{'atom',613,'precomments'},{'nil',613}},{'type',613,'list',[{'remote_type',613,[{'atom',613,'erl_syntax'}|[{'atom',613,'syntaxTree'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',614,{'atom',614,'postcomments'},{'nil',614}},{'type',614,'list',[{'remote_type',614,[{'atom',614,'erl_syntax'}|[{'atom',614,'syntaxTree'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',615,{'atom',615,'subtrees'},{'nil',615}},{'type',615,'list',[{'remote_type',615,[{'atom',615,'erl_syntax'}|[{'atom',615,'syntaxTree'}|[[]]]]}]}}]]]]]]],[]}],
		%% Line 617
		'type' =
		    %% Line 617
		    [{{'record','list'},[{'typed_record_field',{'record_field',617,{'atom',617,'min'},{'integer',617,0}},{'type',617,'integer',[]}}|[{'typed_record_field',{'record_field',618,{'atom',618,'max'},{'integer',618,0}},{'type',618,'integer',[]}}|[{'typed_record_field',{'record_field',619,{'atom',619,'subtrees'},{'nil',619}},{'type',619,'list',[{'remote_type',619,[{'atom',619,'erl_syntax'}|[{'atom',619,'syntaxTree'}|[[]]]]}]}}]]],[]}]]
'quick_recomment_forms'/2 =
    %% Line 51
    fun (_cor1,_cor0) ->
	%% Line 52
	apply 'recomment_forms'/3
	    (_cor1, _cor0, 'false')
'recomment_forms'/2 =
    %% Line 116
    fun (_cor1,_cor0) ->
	%% Line 117
	apply 'recomment_forms'/3
	    (_cor1, _cor0, 'true')
'recomment_forms'/3 =
    %% Line 119
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tree,Cs,Insert>
	      when call 'erlang':'is_list'
		    (Tree) ->
	      let <_cor3> =
		  %% Line 120
		  call 'erl_syntax':'form_list'
		      (Tree)
	      in  %% Line 120
		  apply 'recomment_forms'/3
		      (_cor3, Cs, Insert)
	  %% Line 121
	  <Tree,Cs,Insert> when 'true' ->
	      %% Line 122
	      case call 'erl_syntax':'type'
		       (Tree) of
		%% Line 123
		<'form_list'> when 'true' ->
		    let <Tree1> =
			%% Line 124
			call 'erl_syntax':'flatten_form_list'
			    (Tree)
		    in  let <Node> =
			    %% Line 125
			    apply 'build_tree'/1
				(Tree1)
			in  %% Line 129
			    case apply 'node_subtrees'/1
				     (Node) of
			      <[Node1|[]]> when 'true' ->
				  let <_cor7> =
				      %% Line 130
				      apply 'node_subtrees'/1
					  (Node1)
				  in  let <List> =
					  %% Line 130
					  apply 'filter_forms'/1
					      (_cor7)
				      in  let <List1> =
					      %% Line 131
					      apply 'recomment_forms_1'/3
						  (Cs, List, Insert)
					  in  let <_cor10> =
						  %% Line 133
						  apply 'set_node_subtrees'/2
						      (Node1, %% Line 134
							      List1)
					      in  let <_cor11> =
						      %% Line 132
						      apply 'set_node_subtrees'/2
							  (Node, %% Line 133
								 [_cor10|%% Line 134
									 []])
						  in  %% Line 132
						      apply 'revert_tree'/1
							  (_cor11)
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		%% Line 135
		<_cor18> when 'true' ->
		    %% Line 138
		    case apply 'recomment_tree'/2
			     (Tree, Cs) of
		      <{Tree1,Cs1}> when 'true' ->
			  let <_cor13> =
			      %% Line 139
			      apply 'append_comments'/2
				  (Cs1, Tree1)
			  in  %% Line 139
			      apply 'revert_tree'/1
				  (_cor13)
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor12})
			-| ['compiler_generated'] )
		    end
	      end
	end
'append_comments'/2 =
    %% Line 142
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],Tree> when 'true' ->
	      let <_cor2> =
		  %% Line 143
		  apply 'node_add_postcomment'/2
		      (C, Tree)
	      in  %% Line 143
		  apply 'append_comments'/2
		      (Cs, _cor2)
	  %% Line 144
	  <[],Tree> when 'true' ->
	      %% Line 145
	      Tree
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'append_comments',2}}] )
	    -| ['compiler_generated'] )
	end
'recomment_forms_1'/3 =
    %% Line 150
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],Ns,Insert> when 'true' ->
	      let <Ns1> =
		  %% Line 151
		  apply 'recomment_forms_2'/3
		      (C, Ns, Insert)
	      in  %% Line 152
		  apply 'recomment_forms_1'/3
		      (Cs, Ns1, Insert)
	  %% Line 153
	  <[],Ns,_X_Insert> when 'true' ->
	      %% Line 154
	      Ns
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'recomment_forms_1',3}}] )
	    -| ['compiler_generated'] )
	end
'recomment_forms_2'/3 =
    %% Line 156
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <C,Nodes = [N|Ns],Insert> when 'true' ->
	      %% Line 157
	      case C of
		<{L,Col,Ind,Text}> when 'true' ->
		    let <Min> =
			%% Line 158
			apply 'node_min'/1
			    (N)
		    in  let <Max> =
			    %% Line 159
			    apply 'node_max'/1
				(N)
			in  let <Delta> =
				%% Line 160
				apply 'comment_delta'/1
				    (Text)
			    in  let <_cor11> =
				    %% Line 162
				    case Ns of
				      %% Line 163
				      <[]> when 'true' ->
					  'true'
				      %% Line 164
				      <[Next|_cor35]> when 'true' ->
					  let <_cor9> =
					      call 'erlang':'+'
						  (L, Delta)
					  in  let <_cor7> =
						  apply 'node_min'/1
						      (Next)
					      in  let <_cor8> =
						      call 'erlang':'-'
							  (_cor7, 2)
						  in  call 'erlang':'<'
							  (_cor9, _cor8)
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor10})
					-| ['compiler_generated'] )
				    end
				in  %% Line 166
				    case <> of
				      <>
					  when let <_cor14> =
						try
						    let <_cor13> =
							call 'erlang':'+'
							    (Max, 1)
						    in  call 'erlang':'>'
							    (L, _cor13)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false'
					    in  let <_cor18> =
						    try
							let <_cor15> =
							    call 'erlang':'+'
								(Max, 1)
							in  let <_cor16> =
								call 'erlang':'=:='
								    (L, _cor15)
							    in  let <_cor17> =
								    call 'erlang':'=:='
									(_cor11, 'false')
								in  call 'erlang':'and'
									(_cor16, _cor17)
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false'
						in  call 'erlang':'or'
							(_cor14, _cor18) ->
					  let <_cor19> =
					      %% Line 167
					      apply 'recomment_forms_2'/3
						  (C, Ns, Insert)
					  in  %% Line 167
					      [N|_cor19]
				      %% Line 168
				      <>
					  when try
						let <_cor21> =
						    call 'erlang':'+'
							(L, Delta)
						in  let <_cor20> =
							call 'erlang':'-'
							    (Min, 1)
						    in  call 'erlang':'<'
							    (_cor21, _cor20)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_cor22> =
					      %% Line 171
					      apply 'standalone_comment'/1
						  (C)
					  in  %% Line 171
					      [_cor22|Nodes]
				      %% Line 172
				      <>
					  when call 'erlang':'<'
						(L,
						 Min) ->
					  let <_cor23> =
					      %% Line 175
					      apply 'node_add_precomment'/2
						  (C, N)
					  in  %% Line 175
					      [_cor23|Ns]
				      %% Line 176
				      <>
					  when try
						let <_cor24> =
						    call 'erlang':'=<'
							(Col, 1)
						in  let <_cor25> =
							call 'erlang':'=<'
							    (L, Min)
						    in  let <_cor26> =
							    call 'erlang':'+'
								(L, Delta)
							in  let <_cor27> =
								call 'erlang':'>='
								    (_cor26, Min)
							    in  let <_cor28> =
								    call 'erlang':'and'
									(_cor25, _cor27)
								in  call 'erlang':'and'
									(_cor24, _cor28)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <N1> =
					      %% Line 180
					      apply 'standalone_comment'/1
						  (C)
					  in  %% Line 181
					      case <> of
						<>
						    when call 'erlang':'<'
							  (L,
							   Min) ->
						    %% Line 182
						    [N1|Nodes]
						%% Line 183
						<> when 'true' ->
						    %% Line 184
						    [N|[N1|Ns]]
					      end
				      %% Line 186
				      <>
					  when call 'erlang':'=:='
						(Insert,
						 'true') ->
					  let <_cor30> =
					      %% Line 187
					      apply 'insert'/5
						  (N, L, Col, Ind, C)
					  in  %% Line 187
					      [_cor30|Ns]
				      %% Line 188
				      <> when 'true' ->
					  %% Line 189
					  Nodes
				    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 191
	  <C,[],_X_Top> when 'true' ->
	      let <_cor31> =
		  %% Line 192
		  apply 'standalone_comment'/1
		      (C)
	      in  %% Line 192
		  [_cor31|[]]
	  ( <_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32})
		  -| [{'function_name',{'recomment_forms_2',3}}] )
	    -| ['compiler_generated'] )
	end
'standalone_comment'/1 =
    %% Line 197
    fun (_cor0) ->
	case _cor0 of
	  <{L,Col,_X_Ind,Text}> when 'true' ->
	      let <_cor4> =
		  %% Line 198
		  apply 'comment_delta'/1
		      (Text)
	      in  let <_cor5> =
		      %% Line 198
		      call 'erlang':'+'
			  (L, _cor4)
		  in  let <_cor1> =
			  %% Line 199
			  call 'erlang':'-'
			      (Col, 1)
		      in  let <_cor2> =
			      %% Line 199
			      call 'erl_syntax':'comment'
				  (_cor1, Text)
			  in  let <_cor3> =
				  %% Line 199
				  call 'erl_syntax':'set_pos'
				      (_cor2, L)
			      in  %% Line 198
				  apply 'leaf_node'/3
				      (L, _cor5, _cor3)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'standalone_comment',1}}] )
	    -| ['compiler_generated'] )
	end
'comment_delta'/1 =
    %% Line 204
    fun (_cor0) ->
	%% Line 205
	case call 'erlang':'length'
		 (_cor0) of
	  %% Line 206
	  <N>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      %% Line 207
	      call 'erlang':'-'
		  (N, 1)
	  %% Line 208
	  <_cor3> when 'true' ->
	      %% Line 209
	      0
	end
'filter_forms'/1 =
    %% Line 219
    fun (_cor0) ->
	%% Line 220
	apply 'filter_forms'/3
	    (_cor0, 'false', {'filter','undefined',0})
'filter_forms'/3 =
    %% Line 222
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[F|Fs],Kill,S> when 'true' ->
	      %% Line 223
	      case apply 'check_file_attr'/1
		       (F) of
		%% Line 224
		<{'true',A1,A2}> when 'true' ->
		    %% Line 225
		    ( case S of
			( <( {'filter',_rec0,_cor34}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor8> =
				  case _rec0 of
				    %% Line 226
				    <'undefined'> when 'true' ->
					%% Line 227
					{'filter',A1,A2}
				    %% Line 228
				    <_cor37> when 'true' ->
					%% Line 229
					S
				  end
			      in  %% Line 231
				  case <> of
				    <>
					when ( try
						( case <> of
						    ( <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'is_record'
												   -| ['compiler_generated'] )
								  (_cor8,
								   ( 'filter'
								     -| ['compiler_generated'] ),
								   ( 3
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ) ->
							  let <_cor14> =
							      ( call 'erlang':'element'
								    (2, _cor8)
								-| ['compiler_generated'] )
							  in  let <_cor15> =
								  ( call 'erlang':'=:='
									(_cor14, A1)
								    -| ['compiler_generated'] )
							      in  let <_cor17> =
								      %% Line 232
								      ( call 'erlang':'element'
									    (3, _cor8)
									-| ['compiler_generated'] )
								  in  let <_cor18> =
									  %% Line 232
									  ( call 'erlang':'=<'
										(_cor17, A2)
									    -| ['compiler_generated'] )
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'and'
														 -| ['compiler_generated'] )
										(_cor15, _cor18)
									    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					    -| ['compiler_generated'] ) ->
					%% Line 234
					case _cor8 of
					  <{'filter',_cor38,_cor39}> when 'true' ->
					      let <_cor21> =
						  call 'erlang':'setelement'
						      (3, _cor8, A2)
					      in  let <_cor22> =
						      apply 'filter_forms'/3
							  (Fs, 'false', _cor21)
						  in  [F|_cor22]
					  ( <_cor40> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','filter'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    %% Line 235
				    <>
					when call 'erlang':'=:='
					      (Kill,
					       'true') ->
					let <_cor23> =
					    %% Line 236
					    apply 'node_kill_range'/1
						(F)
					in  let <_cor24> =
						%% Line 237
						apply 'filter_forms'/3
						    (Fs, 'true', _cor8)
					    in  %% Line 236
						[_cor23|_cor24]
				    %% Line 238
				    <> when 'true' ->
					let <_cor25> =
					    %% Line 239
					    apply 'filter_forms'/3
						(Fs, 'true', _cor8)
					in  %% Line 239
					    [F|_cor25]
				  end
			  -| ['compiler_generated'] )
			( <_cor35> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','filter'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 241
		<'false'> when 'true' ->
		    %% Line 242
		    case Kill of
		      %% Line 243
		      <'true'> when 'true' ->
			  let <_cor26> =
			      %% Line 244
			      apply 'node_kill_range'/1
				  (F)
			  in  let <_cor27> =
				  %% Line 245
				  apply 'filter_forms'/3
				      (Fs, Kill, S)
			      in  %% Line 244
				  [_cor26|_cor27]
		      %% Line 246
		      <'false'> when 'true' ->
			  let <_cor28> =
			      %% Line 247
			      apply 'filter_forms'/3
				  (Fs, Kill, S)
			  in  %% Line 247
			      [F|_cor28]
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor29})
			-| ['compiler_generated'] )
		    end
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor30})
		  -| ['compiler_generated'] )
	      end
	  %% Line 250
	  <[],_cor41,_cor42> when 'true' ->
	      %% Line 251
	      []
	  ( <_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31})
		  -| [{'function_name',{'filter_forms',3}}] )
	    -| ['compiler_generated'] )
	end
'check_file_attr'/1 =
    %% Line 255
    fun (_cor0) ->
	%% Line 256
	case apply 'node_type'/1
		 (_cor0) of
	  %% Line 257
	  <'tree_node'> when 'true' ->
	      %% Line 258
	      case apply 'tree_node_type'/1
		       (_cor0) of
		%% Line 259
		<'attribute'> when 'true' ->
		    %% Line 260
		    case apply 'node_subtrees'/1
			     (_cor0) of
		      %% Line 261
		      <[L1|[L2|_cor5]]> when 'true' ->
			  %% Line 262
			  apply 'check_file_attr_1'/2
			      (L1, L2)
		      %% Line 263
		      <_cor6> when 'true' ->
			  %% Line 264
			  'false'
		    end
		%% Line 266
		<_cor7> when 'true' ->
		    %% Line 267
		    'false'
	      end
	  %% Line 269
	  <_cor8> when 'true' ->
	      %% Line 270
	      'false'
	end
'check_file_attr_1'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	%% Line 274
	case apply 'node_subtrees'/1
		 (_cor1) of
	  %% Line 275
	  <[N1|_cor8]> when 'true' ->
	      let <N2> =
		  %% Line 276
		  apply 'leaf_node_value'/1
		      (N1)
	      in  %% Line 277
		  case call 'erl_syntax':'type'
			   (N2) of
		    %% Line 278
		    <'atom'> when 'true' ->
			%% Line 279
			case call 'erl_syntax':'atom_value'
				 (N2) of
			  %% Line 280
			  <'file'> when 'true' ->
			      %% Line 281
			      apply 'check_file_attr_2'/1
				  (_cor0)
			  %% Line 282
			  <_cor9> when 'true' ->
			      %% Line 283
			      'false'
			end
		    %% Line 285
		    <_cor10> when 'true' ->
			%% Line 286
			'false'
		  end
	  %% Line 288
	  <_cor11> when 'true' ->
	      %% Line 289
	      'false'
	end
'check_file_attr_2'/1 =
    %% Line 292
    fun (_cor0) ->
	%% Line 293
	case apply 'node_subtrees'/1
		 (_cor0) of
	  %% Line 294
	  <[N1|[N2|_cor7]]> when 'true' ->
	      let <_cor1> =
		  %% Line 295
		  apply 'revert_tree'/1
		      (N1)
	      in  let <T1> =
		      %% Line 295
		      call 'erl_syntax':'concrete'
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 296
			  apply 'revert_tree'/1
			      (N2)
		      in  let <T2> =
			      %% Line 296
			      call 'erl_syntax':'concrete'
				  (_cor3)
			  in  %% Line 297
			      {'true',T1,T2}
	  %% Line 298
	  <_cor8> when 'true' ->
	      %% Line 299
	      'false'
	end
'recomment_tree'/2 =
    %% Line 341
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 342
	    apply 'build_tree'/1
		(_cor1)
	in  %% Line 342
	    case apply 'insert_comments'/2
		     (_cor0, _cor2) of
	      <{Tree1,Cs1}> when 'true' ->
		  let <_cor4> =
		      %% Line 343
		      apply 'revert_tree'/1
			  (Tree1)
		  in  %% Line 343
		      {_cor4,Cs1}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'insert_comments'/2 =
    %% Line 350
    fun (_cor1,_cor0) ->
	%% Line 351
	apply 'insert_comments'/3
	    (_cor1, _cor0, [])
'insert_comments'/3 =
    %% Line 353
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],Node,Cs1> when 'true' ->
	      %% Line 354
	      case C of
		<{L,Col,Ind,_X_Text}> when 'true' ->
		    let <Max> =
			%% Line 355
			apply 'node_max'/1
			    (Node)
		    in  %% Line 356
			case <> of
			  <>
			      when call 'erlang':'=<'
				    (L,
				     Max) ->
			      let <_cor5> =
				  %% Line 357
				  apply 'insert'/5
				      (Node, L, Col, Ind, C)
			      in  %% Line 357
				  apply 'insert_comments'/3
				      (Cs, _cor5, %% Line 358
						  Cs1)
			  %% Line 359
			  <> when 'true' ->
			      %% Line 360
			      apply 'insert_comments'/3
				  (Cs, Node, [C|Cs1])
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 362
	  <[],Node,Cs> when 'true' ->
	      let <_cor6> =
		  %% Line 363
		  call 'lists':'reverse'
		      (Cs)
	      in  %% Line 363
		  {Node,_cor6}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'insert_comments',3}}] )
	    -| ['compiler_generated'] )
	end
'insert'/5 =
    %% Line 368
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 369
	case apply 'node_type'/1
		 (_cor4) of
	  %% Line 370
	  <'list_node'> when 'true' ->
	      let <_cor5> =
		  %% Line 373
		  apply 'node_subtrees'/1
		      (_cor4)
	      in  let <_cor6> =
		      %% Line 373
		      apply 'insert_in_list'/5
			  (_cor5, _cor3, _cor2, _cor1, _cor0)
		  in  %% Line 372
		      apply 'set_node_subtrees'/2
			  (_cor4, _cor6)
	  %% Line 375
	  <_cor15> when 'true' ->
	      let <Min> =
		  %% Line 378
		  apply 'node_min'/1
		      (_cor4)
	      in  let <Max> =
		      %% Line 379
		      apply 'node_max'/1
			  (_cor4)
		  in  %% Line 380
		      case <> of
			<>
			    when call 'erlang':'<'
				  (_cor3,
				   Min) ->
			    %% Line 382
			    apply 'node_add_precomment'/2
				(_cor0, _cor4)
			%% Line 383
			<>
			    when call 'erlang':'=:='
				  (Min,
				   Max) ->
			    %% Line 387
			    apply 'node_add_postcomment'/2
				(_cor0, _cor4)
			%% Line 388
			<> when 'true' ->
			    %% Line 393
			    apply 'insert_1'/5
				(_cor4, _cor3, _cor2, _cor1, _cor0)
		      end
	end
'insert_1'/5 =
    %% Line 397
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 398
	case apply 'node_type'/1
		 (_cor4) of
	  %% Line 399
	  <'tree_node'> when 'true' ->
	      let <_cor5> =
		  %% Line 402
		  apply 'node_subtrees'/1
		      (_cor4)
	      in  let <_cor6> =
		      %% Line 402
		      apply 'insert_in_list'/5
			  (_cor5, _cor3, _cor2, _cor1, _cor0)
		  in  %% Line 401
		      apply 'set_node_subtrees'/2
			  (_cor4, _cor6)
	  %% Line 404
	  <'leaf_node'> when 'true' ->
	      %% Line 407
	      apply 'node_add_postcomment'/2
		  (_cor0, _cor4)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'insert_in_list'/5 =
    %% Line 414
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Node|Ns],L,Col,Ind,C> when 'true' ->
	      let <Max> =
		  %% Line 415
		  apply 'node_max'/1
		      (Node)
	      in  let <NextMin> =
		      %% Line 420
		      apply 'next_min_in_list'/1
			  (Ns)
		  in  %% Line 423
		      case <> of
			<>
			    when call 'erlang':'<'
				  (NextMin,
				   0) ->
			    %% Line 426
			    apply 'insert_here'/6
				(Node, L, Col, Ind, C, Ns)
			%% Line 427
			<>
			    when let <_cor7> =
				  call 'erlang':'>='
				      (L, NextMin)
			      in  let <_cor8> =
				      call 'erlang':'>='
					  (NextMin, Max)
				  in  call 'erlang':'and'
					  (_cor7, _cor8) ->
			    %% Line 430
			    apply 'insert_later'/6
				(Node, L, Col, Ind, C, Ns)
			%% Line 431
			<>
			    when call 'erlang':'=<'
				  (L,
				   Max) ->
			    %% Line 432
			    apply 'insert_here'/6
				(Node, L, Col, Ind, C, Ns)
			%% Line 433
			<> when 'true' ->
			    %% Line 434
			    apply 'insert_later'/6
				(Node, L, Col, Ind, C, Ns)
		      end
	  %% Line 436
	  <[],L,Col,_cor14,_cor15> when 'true' ->
	      %% Line 437
	      call 'erlang':'exit'
		  ({'bad_tree',L,Col})
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'insert_in_list',5}}] )
	    -| ['compiler_generated'] )
	end
'insert_here'/6 =
    %% Line 441
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 442
	    apply 'insert'/5
		(_cor5, _cor4, _cor3, _cor2, _cor1)
	in  %% Line 442
	    [_cor6|_cor0]
'insert_later'/6 =
    %% Line 446
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 447
	    apply 'insert_in_list'/5
		(_cor0, _cor4, _cor3, _cor2, _cor1)
	in  %% Line 447
	    [_cor5|_cor6]
'next_min_in_list'/1 =
    %% Line 453
    fun (_cor0) ->
	%% Line 454
	apply 'next_min_in_list'/2
	    (_cor0, [])
'next_min_in_list'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|Ts],Ack> when 'true' ->
	      %% Line 457
	      apply 'next_min_in_node'/2
		  (T, [Ts|Ack])
	  %% Line 458
	  <[],[T|Ts]> when 'true' ->
	      %% Line 459
	      apply 'next_min_in_list'/2
		  (T, Ts)
	  %% Line 460
	  <[],[]> when 'true' ->
	      -1
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'next_min_in_list',2}}] )
	    -| ['compiler_generated'] )
	end
'next_min_in_node'/2 =
    %% Line 463
    fun (_cor1,_cor0) ->
	%% Line 464
	case apply 'node_type'/1
		 (_cor1) of
	  %% Line 465
	  <'leaf_node'> when 'true' ->
	      %% Line 466
	      apply 'node_min'/1
		  (_cor1)
	  %% Line 467
	  <'tree_node'> when 'true' ->
	      %% Line 468
	      apply 'node_min'/1
		  (_cor1)
	  %% Line 469
	  <'list_node'> when 'true' ->
	      let <_cor2> =
		  %% Line 470
		  apply 'node_subtrees'/1
		      (_cor1)
	      in  %% Line 470
		  apply 'next_min_in_list'/2
		      (_cor2, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'build_tree'/1 =
    %% Line 476
    fun (_cor0) ->
	let <L> =
	    %% Line 477
	    apply 'get_line'/1
		(_cor0)
	in  %% Line 478
	    case call 'erl_syntax':'subtrees'
		     (_cor0) of
	      %% Line 479
	      <[]> when 'true' ->
		  %% Line 481
		  apply 'leaf_node'/3
		      (L, L, _cor0)
	      %% Line 482
	      <Ts> when 'true' ->
		  %% Line 484
		  case apply 'build_list_list'/1
			   (Ts) of
		    <{Subtrees,Min,Max}> when 'true' ->
			let <_cor6> =
			    %% Line 487
			    apply 'minpos'/2
				(L, Min)
			in  let <_cor5> =
				%% Line 488
				call 'erlang':'max'
				    (L, Max)
			    in  let <_cor4> =
				    %% Line 489
				    call 'erl_syntax':'type'
					(_cor0)
				in  let <_cor3> =
					%% Line 490
					call 'erl_syntax':'get_attrs'
					    (_cor0)
				    in  %% Line 487
					apply 'tree_node'/5
					    (_cor6, _cor5, _cor4, _cor3, %% Line 491
									 Subtrees)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	    end
'build_list'/1 =
    %% Line 503
    fun (_cor0) ->
	%% Line 504
	apply 'build_list'/4
	    (_cor0, 0, 0, [])
'build_list'/4 =
    %% Line 506
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T|Ts],Min,Max,Ack> when 'true' ->
	      let <Node> =
		  %% Line 507
		  apply 'build_tree'/1
		      (T)
	      in  let <_cor5> =
		      %% Line 508
		      apply 'node_min'/1
			  (Node)
		  in  let <Min1> =
			  %% Line 508
			  apply 'minpos'/2
			      (_cor5, Min)
		      in  let <_cor7> =
			      %% Line 509
			      apply 'node_max'/1
				  (Node)
			  in  let <Max1> =
				  %% Line 509
				  call 'erlang':'max'
				      (_cor7, Max)
			      in  %% Line 510
				  apply 'build_list'/4
				      (Ts, Min1, Max1, [Node|Ack])
	  %% Line 511
	  <[],Min,Max,Ack> when 'true' ->
	      let <_cor9> =
		  %% Line 512
		  call 'lists':'reverse'
		      (Ack)
	      in  %% Line 512
		  apply 'list_node'/3
		      (Min, Max, _cor9)
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'build_list',4}}] )
	    -| ['compiler_generated'] )
	end
'build_list_list'/1 =
    %% Line 514
    fun (_cor0) ->
	%% Line 515
	apply 'build_list_list'/4
	    (_cor0, 0, 0, [])
'build_list_list'/4 =
    %% Line 517
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[L|Ls],Min,Max,Ack> when 'true' ->
	      let <Node> =
		  %% Line 518
		  apply 'build_list'/1
		      (L)
	      in  let <_cor5> =
		      %% Line 519
		      apply 'node_min'/1
			  (Node)
		  in  let <Min1> =
			  %% Line 519
			  apply 'minpos'/2
			      (_cor5, Min)
		      in  let <_cor7> =
			      %% Line 520
			      apply 'node_max'/1
				  (Node)
			  in  let <Max1> =
				  %% Line 520
				  call 'erlang':'max'
				      (_cor7, Max)
			      in  %% Line 521
				  apply 'build_list_list'/4
				      (Ls, Min1, Max1, [Node|Ack])
	  %% Line 522
	  <[],Min,Max,Ack> when 'true' ->
	      let <_cor9> =
		  %% Line 523
		  call 'lists':'reverse'
		      (Ack)
	      in  %% Line 523
		  {_cor9,Min,Max}
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'build_list_list',4}}] )
	    -| ['compiler_generated'] )
	end
'revert_tree'/1 =
    %% Line 529
    fun (_cor0) ->
	%% Line 530
	case apply 'node_type'/1
		 (_cor0) of
	  %% Line 531
	  <'leaf_node'> when 'true' ->
	      let <_cor1> =
		  %% Line 532
		  apply 'leaf_node_value'/1
		      (_cor0)
	      in  %% Line 532
		  apply 'add_comments'/2
		      (_cor0, _cor1)
	  %% Line 533
	  <'tree_node'> when 'true' ->
	      let <_cor5> =
		  %% Line 537
		  apply 'tree_node_type'/1
		      (_cor0)
	      in  let <_cor3> =
		      %% Line 538
		      apply 'node_subtrees'/1
			  (_cor0)
		  in  let <_cor4> =
			  %% Line 538
			  apply 'revert_list'/1
			      (_cor3)
		      in  let <_cor6> =
			      %% Line 536
			      call 'erl_syntax':'make_tree'
				  (_cor5, _cor4)
			  in  let <_cor2> =
				  %% Line 539
				  apply 'tree_node_attrs'/1
				      (_cor0)
			      in  let <_cor7> =
				      %% Line 535
				      call 'erl_syntax':'set_attrs'
					  (_cor6, _cor2)
				  in  %% Line 534
				      apply 'add_comments'/2
					  (_cor0, _cor7)
	  %% Line 540
	  <'list_node'> when 'true' ->
	      let <_cor8> =
		  %% Line 541
		  apply 'node_subtrees'/1
		      (_cor0)
	      in  %% Line 541
		  apply 'revert_list'/1
		      (_cor8)
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'revert_list'/1 =
    %% Line 544
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_cor1> =
		  %% Line 545
		  apply 'revert_tree'/1
		      (T)
	      in  let <_cor2> =
		      %% Line 545
		      apply 'revert_list'/1
			  (Ts)
		  in  %% Line 545
		      [_cor1|_cor2]
	  %% Line 546
	  <[]> when 'true' ->
	      %% Line 547
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'revert_list',1}}] )
	    -| ['compiler_generated'] )
	end
'add_comments'/2 =
    %% Line 549
    fun (_cor1,_cor0) ->
	%% Line 550
	case apply 'node_precomments'/1
		 (_cor1) of
	  %% Line 551
	  <[]> when 'true' ->
	      %% Line 552
	      apply 'add_comments_1'/2
		  (_cor1, _cor0)
	  %% Line 553
	  <Cs> when 'true' ->
	      let <_cor2> =
		  %% Line 554
		  apply 'expand_comments'/1
		      (Cs)
	      in  let <Cs1> =
		      %% Line 554
		      call 'lists':'reverse'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 556
			  call 'erl_syntax':'add_precomments'
			      (Cs1, _cor0)
		      in  %% Line 555
			  apply 'add_comments_1'/2
			      (_cor1, _cor4)
	end
'add_comments_1'/2 =
    %% Line 559
    fun (_cor1,_cor0) ->
	%% Line 560
	case apply 'node_postcomments'/1
		 (_cor1) of
	  %% Line 561
	  <[]> when 'true' ->
	      _cor0
	  %% Line 563
	  <Cs> when 'true' ->
	      let <_cor2> =
		  %% Line 564
		  apply 'expand_comments'/1
		      (Cs)
	      in  let <Cs1> =
		      %% Line 564
		      call 'lists':'reverse'
			  (_cor2)
		  in  %% Line 565
		      call 'erl_syntax':'add_postcomments'
			  (Cs1, _cor0)
	end
'expand_comments'/1 =
    %% Line 568
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]> when 'true' ->
	      let <_cor1> =
		  %% Line 569
		  apply 'expand_comment'/1
		      (C)
	      in  let <_cor2> =
		      %% Line 569
		      apply 'expand_comments'/1
			  (Cs)
		  in  %% Line 569
		      [_cor1|_cor2]
	  %% Line 570
	  <[]> when 'true' ->
	      %% Line 571
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'expand_comments',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_comment'/1 =
    %% Line 573
    fun (_cor0) ->
	%% Line 574
	case _cor0 of
	  <{L,_X_Col,Ind,Text}> when 'true' ->
	      let <_cor2> =
		  %% Line 575
		  call 'erl_syntax':'comment'
		      (Ind, Text)
	      in  %% Line 575
		  call 'erl_syntax':'set_pos'
		      (_cor2, L)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'leaf_node'/3 =
    %% Line 621
    fun (_cor2,_cor1,_cor0) ->
	%% Line 622
	{'leaf',_cor2,_cor1,[],[],_cor0}
'tree_node'/5 =
    %% Line 626
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 627
	{'tree',_cor4,_cor3,_cor2,_cor1,[],[],_cor0}
'list_node'/3 =
    %% Line 633
    fun (_cor2,_cor1,_cor0) ->
	%% Line 634
	{'list',_cor2,_cor1,_cor0}
'node_type'/1 =
    %% Line 638
    fun (_cor0) ->
	case _cor0 of
	  <{'leaf',_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 639
	      'leaf_node'
	  %% Line 640
	  <{'tree',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 641
	      'tree_node'
	  %% Line 642
	  <{'list',_cor14,_cor15,_cor16}> when 'true' ->
	      %% Line 643
	      'list_node'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_type',1}}] )
	    -| ['compiler_generated'] )
	end
'node_min'/1 =
    %% Line 645
    fun (_cor0) ->
	case _cor0 of
	  <{'leaf',Min,_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 646
	      Min
	  %% Line 647
	  <{'tree',Min,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 648
	      Min
	  %% Line 649
	  <{'list',Min,_cor12,_cor13}> when 'true' ->
	      %% Line 650
	      Min
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_min',1}}] )
	    -| ['compiler_generated'] )
	end
'node_max'/1 =
    %% Line 652
    fun (_cor0) ->
	case _cor0 of
	  <{'leaf',_cor2,Max,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 653
	      Max
	  %% Line 654
	  <{'tree',_cor6,Max,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 655
	      Max
	  %% Line 656
	  <{'list',_cor12,Max,_cor13}> when 'true' ->
	      %% Line 657
	      Max
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_max',1}}] )
	    -| ['compiler_generated'] )
	end
'node_kill_range'/1 =
    %% Line 659
    fun (_cor0) ->
	%% Line 660
	case _cor0 of
	  %% Line 661
	  <{'leaf',_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      let <_cor4> =
		  %% Line 662
		  call 'erlang':'setelement'
		      (3, _cor0, -1)
	      in  %% Line 662
		  call 'erlang':'setelement'
		      (2, _cor4, -1)
	  %% Line 663
	  <{'tree',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      let <_cor9> =
		  %% Line 664
		  call 'erlang':'setelement'
		      (3, _cor0, -1)
	      in  %% Line 664
		  call 'erlang':'setelement'
		      (2, _cor9, -1)
	  %% Line 665
	  <{'list',_cor43,_cor44,_cor45}> when 'true' ->
	      %% Line 666
	      {'list',-1,-1,_cor45}
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'node_precomments'/1 =
    %% Line 669
    fun (_cor0) ->
	case _cor0 of
	  <{'leaf',_cor2,_cor3,Cs,_cor4,_cor5}> when 'true' ->
	      %% Line 670
	      Cs
	  %% Line 671
	  <{'tree',_cor6,_cor7,_cor8,_cor9,Cs,_cor10,_cor11}> when 'true' ->
	      %% Line 672
	      Cs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_precomments',1}}] )
	    -| ['compiler_generated'] )
	end
'node_add_precomment'/2 =
    %% Line 674
    fun (_cor1,_cor0) ->
	%% Line 675
	case _cor0 of
	  %% Line 676
	  <{'leaf',_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <_rec11> =
		  %% Line 677
		  [_cor1|_cor17]
	      in  %% Line 677
		  call 'erlang':'setelement'
		      (4, _cor0, _rec11)
	  %% Line 678
	  <{'tree',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
	      let <_rec14> =
		  %% Line 679
		  [_cor1|_cor35]
	      in  %% Line 679
		  call 'erlang':'setelement'
		      (6, _cor0, _rec14)
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'node_postcomments'/1 =
    %% Line 682
    fun (_cor0) ->
	case _cor0 of
	  <{'leaf',_cor2,_cor3,_cor4,Cs,_cor5}> when 'true' ->
	      %% Line 683
	      Cs
	  %% Line 684
	  <{'tree',_cor6,_cor7,_cor8,_cor9,_cor10,Cs,_cor11}> when 'true' ->
	      %% Line 685
	      Cs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_postcomments',1}}] )
	    -| ['compiler_generated'] )
	end
'node_add_postcomment'/2 =
    %% Line 687
    fun (_cor1,_cor0) ->
	%% Line 688
	case _cor0 of
	  %% Line 689
	  <{'leaf',_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <_rec17> =
		  %% Line 691
		  [_cor1|_cor18]
	      in  %% Line 690
		  call 'erlang':'setelement'
		      (5, _cor0, _rec17)
	  %% Line 692
	  <{'tree',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
	      let <_rec20> =
		  %% Line 694
		  [_cor1|_cor36]
	      in  %% Line 693
		  call 'erlang':'setelement'
		      (7, _cor0, _rec20)
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'node_subtrees'/1 =
    %% Line 697
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Subtrees}> when 'true' ->
	      %% Line 698
	      Subtrees
	  %% Line 699
	  <{'list',_cor8,_cor9,Subtrees}> when 'true' ->
	      %% Line 700
	      Subtrees
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_subtrees',1}}] )
	    -| ['compiler_generated'] )
	end
'leaf_node_value'/1 =
    %% Line 702
    fun (_cor0) ->
	case _cor0 of
	  <{'leaf',_cor2,_cor3,_cor4,_cor5,Value}> when 'true' ->
	      %% Line 703
	      Value
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'leaf_node_value',1}}] )
	    -| ['compiler_generated'] )
	end
'tree_node_type'/1 =
    %% Line 705
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor2,_cor3,Type,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 706
	      Type
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'tree_node_type',1}}] )
	    -| ['compiler_generated'] )
	end
'set_node_subtrees'/2 =
    %% Line 708
    fun (_cor1,_cor0) ->
	%% Line 709
	case _cor1 of
	  %% Line 710
	  <{'tree',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 711
	      call 'erlang':'setelement'
		  (8, _cor1, _cor0)
	  %% Line 712
	  <{'list',_cor24,_cor25,_cor26}> when 'true' ->
	      %% Line 713
	      call 'erlang':'setelement'
		  (4, _cor1, _cor0)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'tree_node_attrs'/1 =
    %% Line 716
    fun (_cor0) ->
	case _cor0 of
	  <{'tree',_cor2,_cor3,_cor4,Attrs,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 717
	      Attrs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'tree_node_attrs',1}}] )
	    -| ['compiler_generated'] )
	end
'minpos'/2 =
    %% Line 728
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,Y>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 729
	      apply 'minpos1'/2
		  (X, Y)
	  %% Line 730
	  <X,Y> when 'true' ->
	      %% Line 731
	      apply 'minpos1'/2
		  (Y, X)
	end
'minpos1'/2 =
    %% Line 733
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,Y>
	      when call 'erlang':'<'
		    (X,
		     1) ->
	      %% Line 734
	      apply 'minpos2'/1
		  (Y)
	  %% Line 735
	  <X,_cor4> when 'true' ->
	      %% Line 736
	      X
	end
'minpos2'/1 =
    %% Line 738
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'<'
		    (_cor0,
		     1) ->
	      %% Line 739
	      0
	  %% Line 740
	  <X> when 'true' ->
	      %% Line 741
	      X
	end
'get_line'/1 =
    %% Line 743
    fun (_cor0) ->
	%% Line 744
	case call 'erl_syntax':'get_pos'
		 (_cor0) of
	  %% Line 745
	  <L>
	      when call 'erlang':'is_integer'
		    (L) ->
	      %% Line 746
	      L
	  %% Line 747
	  <{L,_cor3}>
	      when call 'erlang':'is_integer'
		    (L) ->
	      %% Line 748
	      L
	  %% Line 749
	  <{_cor4,L}>
	      when call 'erlang':'is_integer'
		    (L) ->
	      %% Line 750
	      L
	  %% Line 751
	  <{L,_cor5,_cor6}>
	      when call 'erlang':'is_integer'
		    (L) ->
	      %% Line 752
	      L
	  %% Line 753
	  <{_cor7,L,_cor8}>
	      when call 'erlang':'is_integer'
		    (L) ->
	      %% Line 754
	      L
	  %% Line 755
	  <Pos> when 'true' ->
	      %% Line 756
	      call 'erlang':'exit'
		  ({'bad_position',Pos})
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_recomment')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_recomment', _cor0)
end