module 'erl_syntax_lib' ['analyze_application'/1,
			 'analyze_attribute'/1,
			 'analyze_export_attribute'/1,
			 'analyze_file_attribute'/1,
			 'analyze_form'/1,
			 'analyze_forms'/1,
			 'analyze_function'/1,
			 'analyze_function_name'/1,
			 'analyze_implicit_fun'/1,
			 'analyze_import_attribute'/1,
			 'analyze_module_attribute'/1,
			 'analyze_record_attribute'/1,
			 'analyze_record_expr'/1,
			 'analyze_record_field'/1,
			 'analyze_rule'/1,
			 'analyze_wild_attribute'/1,
			 'annotate_bindings'/1,
			 'annotate_bindings'/2,
			 'fold'/3,
			 'fold_subtrees'/3,
			 'foldl_listlist'/3,
			 'function_name_expansions'/1,
			 'is_fail_expr'/1,
			 'limit'/2,
			 'limit'/3,
			 'map'/2,
			 'map_subtrees'/2,
			 'mapfold'/3,
			 'mapfold_subtrees'/3,
			 'mapfoldl_listlist'/3,
			 'module_info'/0,
			 'module_info'/1,
			 'new_variable_name'/1,
			 'new_variable_name'/2,
			 'new_variable_names'/2,
			 'new_variable_names'/3,
			 'strip_comments'/1,
			 'to_comment'/1,
			 'to_comment'/2,
			 'to_comment'/3,
			 'variables'/1]
    attributes [%% Line 47
		'export_type' =
		    %% Line 47
		    [{'info_pair',0}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'map',2},[{'type',60,'fun',[{'type',60,'product',[{'type',60,'fun',[{'type',60,'product',[{'remote_type',60,[{'atom',60,'erl_syntax'}|[{'atom',60,'syntaxTree'}|[[]]]]}]}|[{'remote_type',60,[{'atom',60,'erl_syntax'}|[{'atom',60,'syntaxTree'}|[[]]]]}]]}|[{'remote_type',61,[{'atom',61,'erl_syntax'}|[{'atom',61,'syntaxTree'}|[[]]]]}]]}|[{'remote_type',61,[{'atom',61,'erl_syntax'}|[{'atom',61,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'map_subtrees',2},[{'type',86,'fun',[{'type',86,'product',[{'type',86,'fun',[{'type',86,'product',[{'remote_type',86,[{'atom',86,'erl_syntax'}|[{'atom',86,'syntaxTree'}|[[]]]]}]}|[{'remote_type',86,[{'atom',86,'erl_syntax'}|[{'atom',86,'syntaxTree'}|[[]]]]}]]}|[{'remote_type',87,[{'atom',87,'erl_syntax'}|[{'atom',87,'syntaxTree'}|[[]]]]}]]}|[{'remote_type',87,[{'atom',87,'erl_syntax'}|[{'atom',87,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'fold',3},[{'type',113,'fun',[{'type',113,'product',[{'type',113,'fun',[{'type',113,'product',[{'remote_type',113,[{'atom',113,'erl_syntax'}|[{'atom',113,'syntaxTree'}|[[]]]]}|[{'type',113,'term',[]}]]}|[{'type',113,'term',[]}]]}|[{'type',114,'term',[]}|[{'remote_type',114,[{'atom',114,'erl_syntax'}|[{'atom',114,'syntaxTree'}|[[]]]]}]]]}|[{'type',114,'term',[]}]]}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'fold_subtrees',3},[{'type',148,'fun',[{'type',148,'product',[{'type',148,'fun',[{'type',148,'product',[{'remote_type',148,[{'atom',148,'erl_syntax'}|[{'atom',148,'syntaxTree'}|[[]]]]}|[{'type',148,'term',[]}]]}|[{'type',148,'term',[]}]]}|[{'type',149,'term',[]}|[{'remote_type',149,[{'atom',149,'erl_syntax'}|[{'atom',149,'syntaxTree'}|[[]]]]}]]]}|[{'type',149,'term',[]}]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'foldl_listlist',3},[{'type',165,'fun',[{'type',165,'product',[{'type',165,'fun',[{'type',165,'product',[{'type',165,'term',[]}|[{'type',165,'term',[]}]]}|[{'type',165,'term',[]}]]}|[{'type',166,'term',[]}|[{'type',166,'list',[{'type',166,'list',[{'type',166,'term',[]}]}]}]]]}|[{'type',166,'term',[]}]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'mapfold',3},[{'type',195,'fun',[{'type',195,'product',[{'type',195,'fun',[{'type',195,'product',[{'remote_type',195,[{'atom',195,'erl_syntax'}|[{'atom',195,'syntaxTree'}|[[]]]]}|[{'type',195,'term',[]}]]}|[{'type',195,'tuple',[{'remote_type',195,[{'atom',195,'erl_syntax'}|[{'atom',195,'syntaxTree'}|[[]]]]}|[{'type',195,'term',[]}]]}]]}|[{'type',196,'term',[]}|[{'remote_type',196,[{'atom',196,'erl_syntax'}|[{'atom',196,'syntaxTree'}|[[]]]]}]]]}|[{'type',196,'tuple',[{'remote_type',196,[{'atom',196,'erl_syntax'}|[{'atom',196,'syntaxTree'}|[[]]]]}|[{'type',196,'term',[]}]]}]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'mapfold_subtrees',3},[{'type',236,'fun',[{'type',236,'product',[{'type',236,'fun',[{'type',236,'product',[{'remote_type',236,[{'atom',236,'erl_syntax'}|[{'atom',236,'syntaxTree'}|[[]]]]}|[{'type',236,'term',[]}]]}|[{'type',237,'tuple',[{'remote_type',237,[{'atom',237,'erl_syntax'}|[{'atom',237,'syntaxTree'}|[[]]]]}|[{'type',237,'term',[]}]]}]]}|[{'type',238,'term',[]}|[{'remote_type',238,[{'atom',238,'erl_syntax'}|[{'atom',238,'syntaxTree'}|[[]]]]}]]]}|[{'type',239,'tuple',[{'remote_type',239,[{'atom',239,'erl_syntax'}|[{'atom',239,'syntaxTree'}|[[]]]]}|[{'type',239,'term',[]}]]}]]}]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'mapfoldl_listlist',3},[{'type',262,'fun',[{'type',262,'product',[{'type',262,'fun',[{'type',262,'product',[{'type',262,'term',[]}|[{'type',262,'term',[]}]]}|[{'type',262,'tuple',[{'type',262,'term',[]}|[{'type',262,'term',[]}]]}]]}|[{'type',263,'term',[]}|[{'type',263,'list',[{'type',263,'list',[{'type',263,'term',[]}]}]}]]]}|[{'type',263,'tuple',[{'type',263,'list',[{'type',263,'list',[{'type',263,'term',[]}]}]}|[{'type',263,'term',[]}]]}]]}]}],
		%% Line 291
		'spec' =
		    %% Line 291
		    [{{'variables',1},[{'type',291,'fun',[{'type',291,'product',[{'remote_type',291,[{'atom',291,'erl_syntax'}|[{'atom',291,'syntaxTree'}|[[]]]]}]}|[{'remote_type',291,[{'atom',291,'sets'}|[{'atom',291,'set'}|[[{'type',291,'atom',[]}]]]]}]]}]}],
		%% Line 346
		'spec' =
		    %% Line 346
		    [{{'new_variable_name',1},[{'type',346,'fun',[{'type',346,'product',[{'remote_type',346,[{'atom',346,'sets'}|[{'atom',346,'set'}|[[{'type',346,'atom',[]}]]]]}]}|[{'type',346,'atom',[]}]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'new_variable_name',2},[{'type',372,'fun',[{'type',372,'product',[{'type',372,'fun',[{'type',372,'product',[{'type',372,'integer',[]}]}|[{'type',372,'atom',[]}]]}|[{'remote_type',372,[{'atom',372,'sets'}|[{'atom',372,'set'}|[[{'type',372,'atom',[]}]]]]}]]}|[{'type',372,'atom',[]}]]}]}],
		%% Line 419
		'spec' =
		    %% Line 419
		    [{{'new_variable_names',2},[{'type',419,'fun',[{'type',419,'product',[{'type',419,'integer',[]}|[{'remote_type',419,[{'atom',419,'sets'}|[{'atom',419,'set'}|[[{'type',419,'atom',[]}]]]]}]]}|[{'type',419,'list',[{'type',419,'atom',[]}]}]]}]}],
		%% Line 435
		'spec' =
		    %% Line 435
		    [{{'new_variable_names',3},[{'type',435,'fun',[{'type',435,'product',[{'type',435,'integer',[]}|[{'type',435,'fun',[{'type',435,'product',[{'type',435,'integer',[]}]}|[{'type',435,'atom',[]}]]}|[{'remote_type',435,[{'atom',435,'sets'}|[{'atom',435,'set'}|[[{'type',435,'atom',[]}]]]]}]]]}|[{'type',436,'list',[{'type',436,'atom',[]}]}]]}]}],
		%% Line 477
		'spec' =
		    %% Line 477
		    [{{'annotate_bindings',2},[{'type',477,'fun',[{'type',477,'product',[{'remote_type',477,[{'atom',477,'erl_syntax'}|[{'atom',477,'syntaxTree'}|[[]]]]}|[{'remote_type',477,[{'atom',477,'ordsets'}|[{'atom',477,'ordset'}|[[{'type',477,'atom',[]}]]]]}]]}|[{'remote_type',478,[{'atom',478,'erl_syntax'}|[{'atom',478,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 496
		'spec' =
		    %% Line 496
		    [{{'annotate_bindings',1},[{'type',496,'fun',[{'type',496,'product',[{'remote_type',496,[{'atom',496,'erl_syntax'}|[{'atom',496,'syntaxTree'}|[[]]]]}]}|[{'remote_type',496,[{'atom',496,'erl_syntax'}|[{'atom',496,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 910
		'spec' =
		    %% Line 910
		    [{{'is_fail_expr',1},[{'type',910,'fun',[{'type',910,'product',[{'remote_type',910,[{'atom',910,'erl_syntax'}|[{'atom',910,'syntaxTree'}|[[]]]]}]}|[{'type',910,'boolean',[]}]]}]}],
		%% Line 1081
		'type' =
		    %% Line 1081
		    [{'key',{'type',1081,'union',[{'atom',1081,'attributes'}|[{'atom',1081,'errors'}|[{'atom',1081,'exports'}|[{'atom',1081,'functions'}|[{'atom',1081,'imports'}|[{'atom',1082,'module'}|[{'atom',1082,'records'}|[{'atom',1082,'rules'}|[{'atom',1082,'warnings'}]]]]]]]]]},[]}],
		%% Line 1083
		'type' =
		    %% Line 1083
		    [{'info_pair',{'type',1083,'tuple',[{'type',1083,'key',[]}|[{'type',1083,'term',[]}]]},[]}],
		%% Line 1085
		'spec' =
		    %% Line 1085
		    [{{'analyze_forms',1},[{'type',1085,'fun',[{'type',1085,'product',[{'remote_type',1085,[{'atom',1085,'erl_syntax'}|[{'atom',1085,'forms'}|[[]]]]}]}|[{'type',1085,'list',[{'type',1085,'info_pair',[]}]}]]}]}],
		%% Line 1131
		'type' =
		    %% Line 1131
		    [{{'record','forms'},[{'typed_record_field',{'record_field',1131,{'atom',1131,'module'},{'atom',1131,'none'}},{'type',1131,'union',[{'atom',1131,'none'}|[{'type',1131,'tuple',[{'atom',1131,'value'}|[{'type',1131,'atom',[]}]]}]]}}|[{'typed_record_field',{'record_field',1132,{'atom',1132,'exports'},{'nil',1132}},{'type',1132,'list',[{'type',1132,'tuple',[{'type',1132,'atom',[]}|[{'type',1132,'arity',[]}]]}]}}|[{'typed_record_field',{'record_field',1133,{'atom',1133,'module_imports'},{'nil',1133}},{'type',1133,'list',[{'type',1133,'atom',[]}]}}|[{'typed_record_field',{'record_field',1134,{'atom',1134,'imports'},{'nil',1134}},{'type',1134,'list',[{'type',1134,'tuple',[{'type',1134,'atom',[]}|[{'type',1134,'list',[{'type',1134,'tuple',[{'type',1134,'atom',[]}|[{'type',1134,'arity',[]}]]}]}]]}]}}|[{'typed_record_field',{'record_field',1135,{'atom',1135,'attributes'},{'nil',1135}},{'type',1135,'list',[{'type',1135,'tuple',[{'type',1135,'atom',[]}|[{'type',1135,'term',[]}]]}]}}|[{'typed_record_field',{'record_field',1136,{'atom',1136,'records'},{'nil',1136}},{'type',1136,'list',[{'type',1136,'tuple',[{'type',1136,'atom',[]}|[{'type',1136,'list',[{'type',1136,'tuple',[{'type',1136,'atom',[]}|[{'type',1136,'field_default',[]}]]}]}]]}]}}|[{'typed_record_field',{'record_field',1137,{'atom',1137,'errors'},{'nil',1137}},{'type',1137,'list',[{'type',1137,'term',[]}]}}|[{'typed_record_field',{'record_field',1138,{'atom',1138,'warnings'},{'nil',1138}},{'type',1138,'list',[{'type',1138,'term',[]}]}}|[{'typed_record_field',{'record_field',1139,{'atom',1139,'functions'},{'nil',1139}},{'type',1139,'list',[{'type',1139,'tuple',[{'type',1139,'atom',[]}|[{'type',1139,'arity',[]}]]}]}}|[{'typed_record_field',{'record_field',1140,{'atom',1140,'rules'},{'nil',1140}},{'type',1140,'list',[{'type',1140,'tuple',[{'type',1140,'atom',[]}|[{'type',1140,'arity',[]}]]}]}}]]]]]]]]]],[]}],
		%% Line 1142
		'type' =
		    %% Line 1142
		    [{'field_default',{'type',1142,'union',[{'atom',1142,'none'}|[{'remote_type',1142,[{'atom',1142,'erl_syntax'}|[{'atom',1142,'syntaxTree'}|[[]]]]}]]},[]}],
		%% Line 1253
		'spec' =
		    %% Line 1253
		    [{{'analyze_form',1},[{'type',1253,'fun',[{'type',1253,'product',[{'remote_type',1253,[{'atom',1253,'erl_syntax'}|[{'atom',1253,'syntaxTree'}|[[]]]]}]}|[{'type',1253,'union',[{'type',1253,'tuple',[{'type',1253,'atom',[]}|[{'type',1253,'term',[]}]]}|[{'type',1253,'atom',[]}]]}]]}]}],
		%% Line 1327
		'spec' =
		    %% Line 1327
		    [{{'analyze_attribute',1},[{'type',1327,'fun',[{'type',1327,'product',[{'remote_type',1327,[{'atom',1327,'erl_syntax'}|[{'atom',1327,'syntaxTree'}|[[]]]]}]}|[{'type',1328,'union',[{'atom',1328,'preprocessor'}|[{'type',1328,'tuple',[{'type',1328,'atom',[]}|[{'type',1328,'term',[]}]]}]]}]]}]}],
		%% Line 1383
		'spec' =
		    %% Line 1383
		    [{{'analyze_module_attribute',1},[{'type',1383,'fun',[{'type',1383,'product',[{'remote_type',1383,[{'atom',1383,'erl_syntax'}|[{'atom',1383,'syntaxTree'}|[[]]]]}]}|[{'type',1384,'union',[{'type',1384,'atom',[]}|[{'type',1384,'tuple',[{'type',1384,'atom',[]}|[{'type',1384,'list',[{'type',1384,'atom',[]}]}]]}]]}]]}]}],
		%% Line 1429
		'type' =
		    %% Line 1429
		    [{'functionN',{'type',1429,'union',[{'type',1429,'atom',[]}|[{'type',1429,'tuple',[{'type',1429,'atom',[]}|[{'type',1429,'arity',[]}]]}]]},[]}],
		%% Line 1430
		'type' =
		    %% Line 1430
		    [{'functionName',{'type',1430,'union',[{'type',1430,'functionN',[]}|[{'type',1430,'tuple',[{'type',1430,'atom',[]}|[{'type',1430,'functionN',[]}]]}]]},[]}],
		%% Line 1432
		'spec' =
		    %% Line 1432
		    [{{'analyze_export_attribute',1},[{'type',1432,'fun',[{'type',1432,'product',[{'remote_type',1432,[{'atom',1432,'erl_syntax'}|[{'atom',1432,'syntaxTree'}|[[]]]]}]}|[{'type',1432,'list',[{'type',1432,'functionName',[]}]}]]}]}],
		%% Line 1474
		'spec' =
		    %% Line 1474
		    [{{'analyze_function_name',1},[{'type',1474,'fun',[{'type',1474,'product',[{'remote_type',1474,[{'atom',1474,'erl_syntax'}|[{'atom',1474,'syntaxTree'}|[[]]]]}]}|[{'type',1474,'functionName',[]}]]}]}],
		%% Line 1535
		'spec' =
		    %% Line 1535
		    [{{'analyze_import_attribute',1},[{'type',1535,'fun',[{'type',1535,'product',[{'remote_type',1535,[{'atom',1535,'erl_syntax'}|[{'atom',1535,'syntaxTree'}|[[]]]]}]}|[{'type',1536,'union',[{'type',1536,'tuple',[{'type',1536,'atom',[]}|[{'type',1536,'list',[{'type',1536,'functionName',[]}]}]]}|[{'type',1536,'atom',[]}]]}]]}]}],
		%% Line 1571
		'spec' =
		    %% Line 1571
		    [{{'analyze_wild_attribute',1},[{'type',1571,'fun',[{'type',1571,'product',[{'remote_type',1571,[{'atom',1571,'erl_syntax'}|[{'atom',1571,'syntaxTree'}|[[]]]]}]}|[{'type',1571,'tuple',[{'type',1571,'atom',[]}|[{'type',1571,'term',[]}]]}]]}]}],
		%% Line 1621
		'type' =
		    %% Line 1621
		    [{'fields',{'type',1621,'list',[{'type',1621,'tuple',[{'type',1621,'atom',[]}|[{'type',1621,'union',[{'atom',1621,'none'}|[{'remote_type',1621,[{'atom',1621,'erl_syntax'}|[{'atom',1621,'syntaxTree'}|[[]]]]}]]}]]}]},[]}],
		%% Line 1623
		'spec' =
		    %% Line 1623
		    [{{'analyze_record_attribute',1},[{'type',1623,'fun',[{'type',1623,'product',[{'remote_type',1623,[{'atom',1623,'erl_syntax'}|[{'atom',1623,'syntaxTree'}|[[]]]]}]}|[{'type',1623,'tuple',[{'type',1623,'atom',[]}|[{'type',1623,'fields',[]}]]}]]}]}],
		%% Line 1695
		'type' =
		    %% Line 1695
		    [{'info',{'type',1695,'union',[{'type',1695,'tuple',[{'type',1695,'atom',[]}|[{'type',1695,'list',[{'type',1695,'tuple',[{'type',1695,'atom',[]}|[{'type',1695,'union',[{'atom',1695,'none'}|[{'remote_type',1695,[{'atom',1695,'erl_syntax'}|[{'atom',1695,'syntaxTree'}|[[]]]]}]]}]]}]}]]}|[{'type',1696,'tuple',[{'type',1696,'atom',[]}|[{'type',1696,'atom',[]}]]}|[{'type',1696,'atom',[]}]]]},[]}],
		%% Line 1698
		'spec' =
		    %% Line 1698
		    [{{'analyze_record_expr',1},[{'type',1698,'fun',[{'type',1698,'product',[{'remote_type',1698,[{'atom',1698,'erl_syntax'}|[{'atom',1698,'syntaxTree'}|[[]]]]}]}|[{'type',1698,'union',[{'type',1698,'tuple',[{'type',1698,'atom',[]}|[{'type',1698,'info',[]}]]}|[{'type',1698,'atom',[]}]]}]]}]}],
		%% Line 1771
		'spec' =
		    %% Line 1771
		    [{{'analyze_record_field',1},[{'type',1771,'fun',[{'type',1771,'product',[{'remote_type',1771,[{'atom',1771,'erl_syntax'}|[{'atom',1771,'syntaxTree'}|[[]]]]}]}|[{'type',1772,'tuple',[{'type',1772,'atom',[]}|[{'type',1772,'union',[{'atom',1772,'none'}|[{'remote_type',1772,[{'atom',1772,'erl_syntax'}|[{'atom',1772,'syntaxTree'}|[[]]]]}]]}]]}]]}]}],
		%% Line 1804
		'spec' =
		    %% Line 1804
		    [{{'analyze_file_attribute',1},[{'type',1804,'fun',[{'type',1804,'product',[{'remote_type',1804,[{'atom',1804,'erl_syntax'}|[{'atom',1804,'syntaxTree'}|[[]]]]}]}|[{'type',1804,'tuple',[{'type',1804,'string',[]}|[{'type',1804,'integer',[]}]]}]]}]}],
		%% Line 1841
		'spec' =
		    %% Line 1841
		    [{{'analyze_function',1},[{'type',1841,'fun',[{'type',1841,'product',[{'remote_type',1841,[{'atom',1841,'erl_syntax'}|[{'atom',1841,'syntaxTree'}|[[]]]]}]}|[{'type',1841,'tuple',[{'type',1841,'atom',[]}|[{'type',1841,'arity',[]}]]}]]}]}],
		%% Line 1872
		'spec' =
		    %% Line 1872
		    [{{'analyze_rule',1},[{'type',1872,'fun',[{'type',1872,'product',[{'remote_type',1872,[{'atom',1872,'erl_syntax'}|[{'atom',1872,'syntaxTree'}|[[]]]]}]}|[{'type',1872,'tuple',[{'type',1872,'atom',[]}|[{'type',1872,'arity',[]}]]}]]}]}],
		%% Line 1906
		'spec' =
		    %% Line 1906
		    [{{'analyze_implicit_fun',1},[{'type',1906,'fun',[{'type',1906,'product',[{'remote_type',1906,[{'atom',1906,'erl_syntax'}|[{'atom',1906,'syntaxTree'}|[[]]]]}]}|[{'type',1906,'functionName',[]}]]}]}],
		%% Line 1937
		'type' =
		    %% Line 1937
		    [{'appFunName',{'type',1937,'union',[{'type',1937,'tuple',[{'type',1937,'atom',[]}|[{'type',1937,'arity',[]}]]}|[{'type',1937,'tuple',[{'type',1937,'atom',[]}|[{'type',1937,'tuple',[{'type',1937,'atom',[]}|[{'type',1937,'arity',[]}]]}]]}]]},[]}],
		%% Line 1939
		'spec' =
		    %% Line 1939
		    [{{'analyze_application',1},[{'type',1939,'fun',[{'type',1939,'product',[{'remote_type',1939,[{'atom',1939,'erl_syntax'}|[{'atom',1939,'syntaxTree'}|[[]]]]}]}|[{'type',1939,'union',[{'type',1939,'appFunName',[]}|[{'type',1939,'arity',[]}]]}]]}]}],
		%% Line 1981
		'type' =
		    %% Line 1981
		    [{'shortname',{'type',1981,'union',[{'type',1981,'atom',[]}|[{'type',1981,'tuple',[{'type',1981,'atom',[]}|[{'type',1981,'arity',[]}]]}]]},[]}],
		%% Line 1982
		'type' =
		    %% Line 1982
		    [{'name',{'type',1982,'union',[{'type',1982,'shortname',[]}|[{'type',1982,'tuple',[{'type',1982,'atom',[]}|[{'type',1982,'shortname',[]}]]}]]},[]}],
		%% Line 1984
		'spec' =
		    %% Line 1984
		    [{{'function_name_expansions',1},[{'type',1984,'fun',[{'type',1984,'product',[{'type',1984,'list',[{'type',1984,'name',[]}]}]}|[{'type',1984,'list',[{'type',1984,'tuple',[{'type',1984,'shortname',[]}|[{'type',1984,'name',[]}]]}]}]]}]}],
		%% Line 2011
		'spec' =
		    %% Line 2011
		    [{{'strip_comments',1},[{'type',2011,'fun',[{'type',2011,'product',[{'remote_type',2011,[{'atom',2011,'erl_syntax'}|[{'atom',2011,'syntaxTree'}|[[]]]]}]}|[{'remote_type',2011,[{'atom',2011,'erl_syntax'}|[{'atom',2011,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 2033
		'spec' =
		    %% Line 2033
		    [{{'to_comment',1},[{'type',2033,'fun',[{'type',2033,'product',[{'remote_type',2033,[{'atom',2033,'erl_syntax'}|[{'atom',2033,'syntaxTree'}|[[]]]]}]}|[{'remote_type',2033,[{'atom',2033,'erl_syntax'}|[{'atom',2033,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 2049
		'spec' =
		    %% Line 2049
		    [{{'to_comment',2},[{'type',2049,'fun',[{'type',2049,'product',[{'remote_type',2049,[{'atom',2049,'erl_syntax'}|[{'atom',2049,'syntaxTree'}|[[]]]]}|[{'type',2049,'string',[]}]]}|[{'remote_type',2049,[{'atom',2049,'erl_syntax'}|[{'atom',2049,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 2080
		'spec' =
		    %% Line 2080
		    [{{'to_comment',3},[{'type',2080,'fun',[{'type',2080,'product',[{'remote_type',2080,[{'atom',2080,'erl_syntax'}|[{'atom',2080,'syntaxTree'}|[[]]]]}|[{'type',2080,'string',[]}|[{'type',2081,'fun',[{'type',2081,'product',[{'remote_type',2081,[{'atom',2081,'erl_syntax'}|[{'atom',2081,'syntaxTree'}|[[]]]]}]}|[{'type',2081,'string',[]}]]}]]]}|[{'remote_type',2082,[{'atom',2082,'erl_syntax'}|[{'atom',2082,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 2097
		'spec' =
		    %% Line 2097
		    [{{'limit',2},[{'type',2097,'fun',[{'type',2097,'product',[{'remote_type',2097,[{'atom',2097,'erl_syntax'}|[{'atom',2097,'syntaxTree'}|[[]]]]}|[{'type',2097,'integer',[]}]]}|[{'remote_type',2097,[{'atom',2097,'erl_syntax'}|[{'atom',2097,'syntaxTree'}|[[]]]]}]]}]}],
		%% Line 2127
		'spec' =
		    %% Line 2127
		    [{{'limit',3},[{'type',2127,'fun',[{'type',2127,'product',[{'remote_type',2127,[{'atom',2127,'erl_syntax'}|[{'atom',2127,'syntaxTree'}|[[]]]]}|[{'type',2127,'integer',[]}|[{'remote_type',2127,[{'atom',2127,'erl_syntax'}|[{'atom',2127,'syntaxTree'}|[[]]]]}]]]}|[{'remote_type',2128,[{'atom',2128,'erl_syntax'}|[{'atom',2128,'syntaxTree'}|[[]]]]}]]}]}]]
'map'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	%% Line 64
	case call 'erl_syntax':'subtrees'
		 (_cor0) of
	  %% Line 65
	  <[]> when 'true' ->
	      %% Line 66
	      apply _cor1
		  (_cor0)
	  %% Line 67
	  <Gs> when 'true' ->
	      let <_cor13> =
		  %% Line 68
		  call 'erl_syntax':'type'
		      (_cor0)
	      in  let <_cor12> =
		      %% Line 69
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[%% Line 70
					G|_cor3]> when 'true' ->
					  let <_cor10> =
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor7) ->
							    case _cor7 of
							      <[T|_cor6]> when 'true' ->
								  let <_cor8> =
								      apply 'map'/2
									  (_cor1, T)
								  in  let <_cor9> =
									  apply 'lc$^1'/1
									      (_cor6)
								      in  ( [_cor8|_cor9]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor7> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor7})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(G)
						-| ['list_comprehension'] )
					  in  let <_cor11> =
						  %% Line 70
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor10|_cor11]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor4> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(%% Line 70
				 Gs)
			-| ['list_comprehension'] )
		  in  let <Tree1> =
			  %% Line 68
			  call 'erl_syntax':'make_tree'
			      (_cor13, _cor12)
		      in  let <_cor15> =
			      %% Line 71
			      call 'erl_syntax':'copy_attrs'
				  (_cor0, Tree1)
			  in  %% Line 71
			      apply _cor1
				  (_cor15)
	end
'map_subtrees'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	%% Line 90
	case call 'erl_syntax':'subtrees'
		 (_cor0) of
	  %% Line 91
	  <[]> when 'true' ->
	      _cor0
	  %% Line 93
	  <Gs> when 'true' ->
	      let <_cor13> =
		  %% Line 94
		  call 'erl_syntax':'type'
		      (_cor0)
	      in  let <_cor12> =
		      %% Line 95
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[G|_cor3]> when 'true' ->
					  let <_cor10> =
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor7) ->
							    case _cor7 of
							      <[T|_cor6]> when 'true' ->
								  let <_cor8> =
								      apply _cor1
									  (T)
								  in  let <_cor9> =
									  apply 'lc$^1'/1
									      (_cor6)
								      in  ( [_cor8|_cor9]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor7> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor7})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(G)
						-| ['list_comprehension'] )
					  in  let <_cor11> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor10|_cor11]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor4> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Gs)
			-| ['list_comprehension'] )
		  in  let <Tree1> =
			  %% Line 94
			  call 'erl_syntax':'make_tree'
			      (_cor13, _cor12)
		      in  %% Line 96
			  call 'erl_syntax':'copy_attrs'
			      (_cor0, Tree1)
	end
'fold'/3 =
    %% Line 116
    fun (_cor2,_cor1,_cor0) ->
	%% Line 117
	case call 'erl_syntax':'subtrees'
		 (_cor0) of
	  %% Line 118
	  <[]> when 'true' ->
	      %% Line 119
	      apply _cor2
		  (_cor0, _cor1)
	  %% Line 120
	  <Gs> when 'true' ->
	      let <_cor3> =
		  %% Line 121
		  apply 'fold_1'/3
		      (_cor2, _cor1, Gs)
	      in  %% Line 121
		  apply _cor2
		      (_cor0, _cor3)
	end
'fold_1'/3 =
    %% Line 124
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,S,[L|Ls]> when 'true' ->
	      let <_cor3> =
		  %% Line 125
		  apply 'fold_2'/3
		      (F, S, L)
	      in  %% Line 125
		  apply 'fold_1'/3
		      (F, _cor3, Ls)
	  %% Line 126
	  <_cor7,S,[]> when 'true' ->
	      %% Line 127
	      S
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fold_1',3}}] )
	    -| ['compiler_generated'] )
	end
'fold_2'/3 =
    %% Line 129
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,S,[T|Ts]> when 'true' ->
	      let <_cor3> =
		  %% Line 130
		  apply 'fold'/3
		      (F, S, T)
	      in  %% Line 130
		  apply 'fold_2'/3
		      (F, _cor3, Ts)
	  %% Line 131
	  <_cor7,S,[]> when 'true' ->
	      %% Line 132
	      S
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fold_2',3}}] )
	    -| ['compiler_generated'] )
	end
'fold_subtrees'/3 =
    %% Line 151
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 152
	    call 'erl_syntax':'subtrees'
		(_cor0)
	in  %% Line 152
	    apply 'foldl_listlist'/3
		(_cor2, _cor1, _cor3)
'foldl_listlist'/3 =
    %% Line 168
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,S,[L|Ls]> when 'true' ->
	      let <_cor3> =
		  %% Line 169
		  apply 'foldl'/3
		      (F, S, L)
	      in  %% Line 169
		  apply 'foldl_listlist'/3
		      (F, _cor3, Ls)
	  %% Line 170
	  <_cor7,S,[]> when 'true' ->
	      %% Line 171
	      S
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'foldl_listlist',3}}] )
	    -| ['compiler_generated'] )
	end
'foldl'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,S,[T|Ts]> when 'true' ->
	      let <_cor3> =
		  %% Line 174
		  apply F
		      (T, S)
	      in  %% Line 174
		  apply 'foldl'/3
		      (F, _cor3, Ts)
	  %% Line 175
	  <_cor7,S,[]> when 'true' ->
	      %% Line 176
	      S
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'foldl',3}}] )
	    -| ['compiler_generated'] )
	end
'mapfold'/3 =
    %% Line 198
    fun (_cor2,_cor1,_cor0) ->
	%% Line 199
	case call 'erl_syntax':'subtrees'
		 (_cor0) of
	  %% Line 200
	  <[]> when 'true' ->
	      %% Line 201
	      apply _cor2
		  (_cor0, _cor1)
	  %% Line 202
	  <Gs> when 'true' ->
	      %% Line 203
	      case apply 'mapfold_1'/3
		       (_cor2, _cor1, Gs) of
		<{Gs1,S1}> when 'true' ->
		    let <_cor4> =
			%% Line 204
			call 'erl_syntax':'type'
			    (_cor0)
		    in  let <Tree1> =
			    %% Line 204
			    call 'erl_syntax':'make_tree'
				(_cor4, Gs1)
			in  let <_cor6> =
				%% Line 205
				call 'erl_syntax':'copy_attrs'
				    (_cor0, Tree1)
			    in  %% Line 205
				apply _cor2
				    (_cor6, S1)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'mapfold_1'/3 =
    %% Line 208
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,S,[L|Ls]> when 'true' ->
	      %% Line 209
	      case apply 'mapfold_2'/3
		       (F, S, L) of
		<{L1,S1}> when 'true' ->
		    %% Line 210
		    case apply 'mapfold_1'/3
			     (F, S1, Ls) of
		      <{Ls1,S2}> when 'true' ->
			  %% Line 211
			  {[L1|Ls1],S2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 212
	  <_cor8,S,[]> when 'true' ->
	      %% Line 213
	      {[],S}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mapfold_1',3}}] )
	    -| ['compiler_generated'] )
	end
'mapfold_2'/3 =
    %% Line 215
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,S,[T|Ts]> when 'true' ->
	      %% Line 216
	      case apply 'mapfold'/3
		       (F, S, T) of
		<{T1,S1}> when 'true' ->
		    %% Line 217
		    case apply 'mapfold_2'/3
			     (F, S1, Ts) of
		      <{Ts1,S2}> when 'true' ->
			  %% Line 218
			  {[T1|Ts1],S2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 219
	  <_cor8,S,[]> when 'true' ->
	      %% Line 220
	      {[],S}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mapfold_2',3}}] )
	    -| ['compiler_generated'] )
	end
'mapfold_subtrees'/3 =
    %% Line 241
    fun (_cor2,_cor1,_cor0) ->
	%% Line 242
	case call 'erl_syntax':'subtrees'
		 (_cor0) of
	  %% Line 243
	  <[]> when 'true' ->
	      %% Line 244
	      {_cor0,_cor1}
	  %% Line 245
	  <Gs> when 'true' ->
	      %% Line 246
	      case apply 'mapfoldl_listlist'/3
		       (_cor2, _cor1, Gs) of
		<{Gs1,S1}> when 'true' ->
		    let <_cor4> =
			%% Line 247
			call 'erl_syntax':'type'
			    (_cor0)
		    in  let <Tree1> =
			    %% Line 247
			    call 'erl_syntax':'make_tree'
				(_cor4, Gs1)
			in  let <_cor6> =
				%% Line 248
				call 'erl_syntax':'copy_attrs'
				    (_cor0, Tree1)
			    in  %% Line 248
				{_cor6,S1}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'mapfoldl_listlist'/3 =
    %% Line 265
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,S,[L|Ls]> when 'true' ->
	      %% Line 266
	      case apply 'mapfoldl'/3
		       (F, S, L) of
		<{L1,S1}> when 'true' ->
		    %% Line 267
		    case apply 'mapfoldl_listlist'/3
			     (F, S1, Ls) of
		      <{Ls1,S2}> when 'true' ->
			  %% Line 268
			  {[L1|Ls1],S2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 269
	  <_cor8,S,[]> when 'true' ->
	      %% Line 270
	      {[],S}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mapfoldl_listlist',3}}] )
	    -| ['compiler_generated'] )
	end
'mapfoldl'/3 =
    %% Line 272
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,S,[L|Ls]> when 'true' ->
	      %% Line 273
	      case apply F
		       (L, S) of
		<{L1,S1}> when 'true' ->
		    %% Line 274
		    case apply 'mapfoldl'/3
			     (F, S1, Ls) of
		      <{Ls1,S2}> when 'true' ->
			  %% Line 275
			  {[L1|Ls1],S2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 276
	  <_cor8,S,[]> when 'true' ->
	      %% Line 277
	      {[],S}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mapfoldl',3}}] )
	    -| ['compiler_generated'] )
	end
'variables'/1 =
    %% Line 293
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 294
	    call 'sets':'new'
		()
	in  %% Line 294
	    apply 'variables'/2
		(_cor0, _cor1)
'variables'/2 =
    %% Line 296
    fun (_cor1,_cor0) ->
	%% Line 297
	case call 'erl_syntax':'type'
		 (_cor1) of
	  %% Line 298
	  <'variable'> when 'true' ->
	      let <_cor2> =
		  %% Line 299
		  call 'erl_syntax':'variable_name'
		      (_cor1)
	      in  %% Line 299
		  call 'sets':'add_element'
		      (_cor2, _cor0)
	  %% Line 300
	  <'macro'> when 'true' ->
	      %% Line 302
	      case call 'erl_syntax':'macro_arguments'
		       (_cor1) of
		%% Line 303
		<'none'> when 'true' ->
		    _cor0
		%% Line 304
		<As> when 'true' ->
		    %% Line 305
		    apply 'variables_2'/2
			(As, _cor0)
	      end
	  %% Line 307
	  <_cor8> when 'true' ->
	      %% Line 308
	      case call 'erl_syntax':'subtrees'
		       (_cor1) of
		%% Line 309
		<[]> when 'true' ->
		    _cor0
		%% Line 311
		<Gs> when 'true' ->
		    %% Line 312
		    apply 'variables_1'/2
			(Gs, _cor0)
	      end
	end
'variables_1'/2 =
    %% Line 316
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[L|Ls],S> when 'true' ->
	      let <_cor2> =
		  %% Line 317
		  apply 'variables_2'/2
		      (L, S)
	      in  %% Line 317
		  apply 'variables_1'/2
		      (Ls, _cor2)
	  %% Line 318
	  <[],S> when 'true' ->
	      %% Line 319
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'variables_1',2}}] )
	    -| ['compiler_generated'] )
	end
'variables_2'/2 =
    %% Line 321
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|Ts],S> when 'true' ->
	      let <_cor2> =
		  %% Line 322
		  apply 'variables'/2
		      (T, S)
	      in  %% Line 322
		  apply 'variables_2'/2
		      (Ts, _cor2)
	  %% Line 323
	  <[],S> when 'true' ->
	      %% Line 324
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'variables_2',2}}] )
	    -| ['compiler_generated'] )
	end
'default_variable_name'/1 =
    %% Line 333
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 334
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  let <_cor2> =
		%% Line 334
		[86|_cor1]
	    in  %% Line 334
		call 'erlang':'list_to_atom'
		    (_cor2)
'new_variable_name'/1 =
    %% Line 348
    fun (_cor0) ->
	%% Line 349
	apply 'new_variable_name'/2
	    (( 'default_variable_name'/1
	       -| [{'id',{0,0,'-new_variable_name/1-fun-0-'}}] ), _cor0)
'new_variable_name'/2 =
    %% Line 374
    fun (_cor1,_cor0) ->
	let <R> =
	    %% Line 375
	    apply 'start_range'/1
		(_cor0)
	in  %% Line 376
	    apply 'new_variable_name'/3
		(R, _cor1, _cor0)
'new_variable_name'/3 =
    %% Line 378
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 379
	    apply 'generate'/2
		(_cor2, _cor2)
	in  %% Line 379
	    apply 'new_variable_name'/5
		(_cor3, _cor2, 0, _cor1, _cor0)
'new_variable_name'/5 =
    %% Line 381
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,R,T,F,S>
	      when call 'erlang':'<'
		    (T,
		     3) ->
	      let <A> =
		  %% Line 382
		  apply F
		      (N)
	      in  %% Line 383
		  case call 'sets':'is_element'
			   (A, S) of
		    %% Line 384
		    <'true'> when 'true' ->
			let <_cor7> =
			    %% Line 385
			    apply 'generate'/2
				(N, R)
			in  let <_cor6> =
				%% Line 385
				call 'erlang':'+'
				    (T, 1)
			    in  %% Line 385
				apply 'new_variable_name'/5
				    (_cor7, R, _cor6, F, S)
		    %% Line 386
		    <'false'> when 'true' ->
			%% Line 387
			A
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 389
	  <N,R,_X_T,F,S> when 'true' ->
	      let <_cor9> =
		  %% Line 391
		  call 'erlang':'*'
		      (R, 8)
	      in  let <R1> =
		      %% Line 391
		      call 'erlang':'div'
			  (_cor9, 1)
		  in  let <_cor11> =
			  %% Line 392
			  apply 'generate'/2
			      (N, R1)
		      in  %% Line 392
			  apply 'new_variable_name'/5
			      (_cor11, R1, 0, F, S)
	end
'start_range'/1 =
    %% Line 398
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 399
	    call 'sets':'size'
		(_cor0)
	in  let <_cor2> =
		%% Line 399
		call 'erlang':'*'
		    (_cor1, 100)
	    in  %% Line 399
		call 'erlang':'max'
		    (_cor2, 100)
'generate'/2 =
    %% Line 407
    fun (_cor1,_cor0) ->
	%% Line 408
	call 'random':'uniform'
	    (_cor0)
'new_variable_names'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	%% Line 422
	apply 'new_variable_names'/3
	    (_cor1, ( 'default_variable_name'/1
		      -| [{'id',{0,0,'-new_variable_names/2-fun-0-'}}] ), _cor0)
'new_variable_names'/3 =
    %% Line 438
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,F,S>
	      when call 'erlang':'is_integer'
		    (N) ->
	      let <R> =
		  %% Line 439
		  apply 'start_range'/1
		      (S)
	      in  %% Line 440
		  apply 'new_variable_names'/5
		      (N, [], R, F, S)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'new_variable_names',3}}] )
	    -| ['compiler_generated'] )
	end
'new_variable_names'/5 =
    %% Line 442
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,Names,R,F,S>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <Name> =
		  %% Line 443
		  apply 'new_variable_name'/3
		      (R, F, S)
	      in  let <S1> =
		      %% Line 444
		      call 'sets':'add_element'
			  (Name, S)
		  in  let <_cor7> =
			  %% Line 445
			  call 'erlang':'-'
			      (N, 1)
		      in  %% Line 445
			  apply 'new_variable_names'/5
			      (_cor7, [Name|Names], R, F, S1)
	  %% Line 446
	  <0,Names,_cor13,_cor14,_cor15> when 'true' ->
	      %% Line 447
	      Names
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'new_variable_names',5}}] )
	    -| ['compiler_generated'] )
	end
'annotate_bindings'/2 =
    %% Line 480
    fun (_cor1,_cor0) ->
	%% Line 481
	case apply 'vann'/2
		 (_cor1, _cor0) of
	  <{Tree1,_cor5,_cor6}> when 'true' ->
	      %% Line 482
	      Tree1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'annotate_bindings'/1 =
    %% Line 498
    fun (_cor0) ->
	let <As> =
	    %% Line 499
	    call 'erl_syntax':'get_ann'
		(_cor0)
	in  %% Line 500
	    case call 'lists':'keyfind'
		     ('env', 1, As) of
	      %% Line 501
	      <{'env',InVars}> when 'true' ->
		  %% Line 502
		  apply 'annotate_bindings'/2
		      (_cor0, InVars)
	      %% Line 503
	      <_cor4> when 'true' ->
		  %% Line 504
		  call 'erlang':'error'
		      ('badarg')
	    end
'vann'/2 =
    %% Line 507
    fun (_cor1,_cor0) ->
	%% Line 508
	case call 'erl_syntax':'type'
		 (_cor1) of
	  %% Line 509
	  <'variable'> when 'true' ->
	      let <_cor3> =
		  %% Line 512
		  call 'erl_syntax':'variable_name'
		      (_cor1)
	      in  let <Free> =
		      %% Line 512
		      [_cor3|[]]
		  in  let <_cor5> =
			  %% Line 513
			  apply 'ann_bindings'/4
			      (_cor1, _cor0, [], Free)
		      in  %% Line 513
			  {_cor5,[],Free}
	  %% Line 514
	  <'match_expr'> when 'true' ->
	      %% Line 515
	      apply 'vann_match_expr'/2
		  (_cor1, _cor0)
	  %% Line 516
	  <'case_expr'> when 'true' ->
	      %% Line 517
	      apply 'vann_case_expr'/2
		  (_cor1, _cor0)
	  %% Line 518
	  <'if_expr'> when 'true' ->
	      %% Line 519
	      apply 'vann_if_expr'/2
		  (_cor1, _cor0)
	  %% Line 520
	  <'cond_expr'> when 'true' ->
	      %% Line 521
	      apply 'vann_cond_expr'/2
		  (_cor1, _cor0)
	  %% Line 522
	  <'receive_expr'> when 'true' ->
	      %% Line 523
	      apply 'vann_receive_expr'/2
		  (_cor1, _cor0)
	  %% Line 524
	  <'catch_expr'> when 'true' ->
	      %% Line 525
	      apply 'vann_catch_expr'/2
		  (_cor1, _cor0)
	  %% Line 526
	  <'try_expr'> when 'true' ->
	      %% Line 527
	      apply 'vann_try_expr'/2
		  (_cor1, _cor0)
	  %% Line 528
	  <'function'> when 'true' ->
	      %% Line 529
	      apply 'vann_function'/2
		  (_cor1, _cor0)
	  %% Line 530
	  <'rule'> when 'true' ->
	      %% Line 531
	      apply 'vann_rule'/2
		  (_cor1, _cor0)
	  %% Line 532
	  <'fun_expr'> when 'true' ->
	      %% Line 533
	      apply 'vann_fun_expr'/2
		  (_cor1, _cor0)
	  %% Line 534
	  <'list_comp'> when 'true' ->
	      %% Line 535
	      apply 'vann_list_comp'/2
		  (_cor1, _cor0)
	  %% Line 536
	  <'binary_comp'> when 'true' ->
	      %% Line 537
	      apply 'vann_binary_comp'/2
		  (_cor1, _cor0)
	  %% Line 538
	  <'generator'> when 'true' ->
	      %% Line 539
	      apply 'vann_generator'/2
		  (_cor1, _cor0)
	  %% Line 540
	  <'binary_generator'> when 'true' ->
	      %% Line 541
	      apply 'vann_binary_generator'/2
		  (_cor1, _cor0)
	  %% Line 542
	  <'block_expr'> when 'true' ->
	      %% Line 543
	      apply 'vann_block_expr'/2
		  (_cor1, _cor0)
	  %% Line 544
	  <'macro'> when 'true' ->
	      %% Line 545
	      apply 'vann_macro'/2
		  (_cor1, _cor0)
	  %% Line 546
	  <_X_Type> when 'true' ->
	      let <F> =
		  %% Line 547
		  apply 'vann_list_join'/1
		      (_cor0)
	      in  %% Line 548
		  case apply 'mapfold_subtrees'/3
			   (F, {[],[]}, _cor1) of
		    <{Tree1,{Bound,Free}}> when 'true' ->
			let <_cor8> =
			    %% Line 550
			    apply 'ann_bindings'/4
				(Tree1, _cor0, Bound, Free)
			in  %% Line 550
			    {_cor8,Bound,Free}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	end
'vann_list_join'/1 =
    %% Line 553
    fun (_cor0) ->
	%% Line 554
	( fun (_cor5,_cor4) ->
	      case <_cor5,_cor4> of
		<T,{Bound,Free}> when 'true' ->
		    %% Line 555
		    case apply 'vann'/2
			     (T, _cor0) of
		      <{T1,Bound1,Free1}> when 'true' ->
			  let <_cor3> =
			      %% Line 556
			      call 'ordsets':'union'
				  (Bound, Bound1)
			  in  let <_cor2> =
				  %% Line 557
				  call 'ordsets':'union'
				      (Free, Free1)
			      in  %% Line 556
				  {T1,{_cor3,_cor2}}
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor1})
			-| ['compiler_generated'] )
		    end
		( <_cor7,_cor6> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor7,_cor6})
			-| [{'function_name',{'-vann_list_join/1-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-vann_list_join/1-fun-0-'}}] )
'vann_list'/2 =
    %% Line 560
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 561
	    apply 'vann_list_join'/1
		(_cor0)
	in  %% Line 561
	    call 'lists':'mapfoldl'
		(_cor2, {[],[]}, _cor1)
'vann_function'/2 =
    %% Line 563
    fun (_cor1,_cor0) ->
	let <Cs> =
	    %% Line 564
	    call 'erl_syntax':'function_clauses'
		(_cor1)
	in  %% Line 565
	    case apply 'vann_clauses'/2
		     (Cs, _cor0) of
	      <{Cs1,{_cor12,Free}}> when 'true' ->
		  let <N> =
		      %% Line 566
		      call 'erl_syntax':'function_name'
			  (_cor1)
		  in  %% Line 567
		      case apply 'vann'/2
			       (N, _cor0) of
			<{N1,_cor13,_cor14}> when 'true' ->
			    let <_cor6> =
				%% Line 568
				call 'erl_syntax':'function'
				    (N1, Cs1)
			    in  let <Tree1> =
				    %% Line 568
				    apply 'rewrite'/2
					(_cor1, _cor6)
				in  let <_cor9> =
					%% Line 570
					apply 'ann_bindings'/4
					    (Tree1, _cor0, [], Free)
				    in  %% Line 570
					{_cor9,[],Free}
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_rule'/2 =
    %% Line 572
    fun (_cor1,_cor0) ->
	let <Cs> =
	    %% Line 573
	    call 'erl_syntax':'rule_clauses'
		(_cor1)
	in  %% Line 574
	    case apply 'vann_clauses'/2
		     (Cs, _cor0) of
	      <{Cs1,{_cor12,Free}}> when 'true' ->
		  let <N> =
		      %% Line 575
		      call 'erl_syntax':'rule_name'
			  (_cor1)
		  in  %% Line 576
		      case apply 'vann'/2
			       (N, _cor0) of
			<{N1,_cor13,_cor14}> when 'true' ->
			    let <_cor6> =
				%% Line 577
				call 'erl_syntax':'rule'
				    (N1, Cs1)
			    in  let <Tree1> =
				    %% Line 577
				    apply 'rewrite'/2
					(_cor1, _cor6)
				in  let <_cor9> =
					%% Line 579
					apply 'ann_bindings'/4
					    (Tree1, _cor0, [], Free)
				    in  %% Line 579
					{_cor9,[],Free}
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_fun_expr'/2 =
    %% Line 581
    fun (_cor1,_cor0) ->
	let <Cs> =
	    %% Line 582
	    call 'erl_syntax':'fun_expr_clauses'
		(_cor1)
	in  %% Line 583
	    case apply 'vann_clauses'/2
		     (Cs, _cor0) of
	      <{Cs1,{_cor10,Free}}> when 'true' ->
		  let <_cor4> =
		      %% Line 584
		      call 'erl_syntax':'fun_expr'
			  (Cs1)
		  in  let <Tree1> =
			  %% Line 584
			  apply 'rewrite'/2
			      (_cor1, _cor4)
		      in  let <_cor7> =
			      %% Line 586
			      apply 'ann_bindings'/4
				  (Tree1, _cor0, [], Free)
			  in  %% Line 586
			      {_cor7,[],Free}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_match_expr'/2 =
    %% Line 588
    fun (_cor1,_cor0) ->
	let <E> =
	    %% Line 589
	    call 'erl_syntax':'match_expr_body'
		(_cor1)
	in  %% Line 590
	    case apply 'vann'/2
		     (E, _cor0) of
	      <{E1,Bound1,Free1}> when 'true' ->
		  let <Env1> =
		      %% Line 591
		      call 'ordsets':'union'
			  (_cor0, Bound1)
		  in  let <P> =
			  %% Line 592
			  call 'erl_syntax':'match_expr_pattern'
			      (_cor1)
		      in  %% Line 593
			  case apply 'vann_pattern'/2
				   (P, Env1) of
			    <{P1,Bound2,Free2}> when 'true' ->
				let <Bound> =
				    %% Line 594
				    call 'ordsets':'union'
					(Bound1, Bound2)
				in  let <Free> =
					%% Line 595
					call 'ordsets':'union'
					    (Free1, Free2)
				    in  let <_cor9> =
					    %% Line 596
					    call 'erl_syntax':'match_expr'
						(P1, E1)
					in  let <Tree1> =
						%% Line 596
						apply 'rewrite'/2
						    (_cor1, _cor9)
					    in  let <_cor11> =
						    %% Line 597
						    apply 'ann_bindings'/4
							(Tree1, _cor0, Bound, Free)
						in  %% Line 597
						    {_cor11,Bound,Free}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_case_expr'/2 =
    %% Line 599
    fun (_cor1,_cor0) ->
	let <E> =
	    %% Line 600
	    call 'erl_syntax':'case_expr_argument'
		(_cor1)
	in  %% Line 601
	    case apply 'vann'/2
		     (E, _cor0) of
	      <{E1,Bound1,Free1}> when 'true' ->
		  let <Env1> =
		      %% Line 602
		      call 'ordsets':'union'
			  (_cor0, Bound1)
		  in  let <Cs> =
			  %% Line 603
			  call 'erl_syntax':'case_expr_clauses'
			      (_cor1)
		      in  %% Line 604
			  case apply 'vann_clauses'/2
				   (Cs, Env1) of
			    <{Cs1,{Bound2,Free2}}> when 'true' ->
				let <Bound> =
				    %% Line 605
				    call 'ordsets':'union'
					(Bound1, Bound2)
				in  let <Free> =
					%% Line 606
					call 'ordsets':'union'
					    (Free1, Free2)
				    in  let <_cor9> =
					    %% Line 607
					    call 'erl_syntax':'case_expr'
						(E1, Cs1)
					in  let <Tree1> =
						%% Line 607
						apply 'rewrite'/2
						    (_cor1, _cor9)
					    in  let <_cor11> =
						    %% Line 608
						    apply 'ann_bindings'/4
							(Tree1, _cor0, Bound, Free)
						in  %% Line 608
						    {_cor11,Bound,Free}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_if_expr'/2 =
    %% Line 610
    fun (_cor1,_cor0) ->
	let <Cs> =
	    %% Line 611
	    call 'erl_syntax':'if_expr_clauses'
		(_cor1)
	in  %% Line 612
	    case apply 'vann_clauses'/2
		     (Cs, _cor0) of
	      <{Cs1,{Bound,Free}}> when 'true' ->
		  let <_cor4> =
		      %% Line 613
		      call 'erl_syntax':'if_expr'
			  (Cs1)
		  in  let <Tree1> =
			  %% Line 613
			  apply 'rewrite'/2
			      (_cor1, _cor4)
		      in  let <_cor6> =
			      %% Line 614
			      apply 'ann_bindings'/4
				  (Tree1, _cor0, Bound, Free)
			  in  %% Line 614
			      {_cor6,Bound,Free}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_cond_expr'/2 =
    %% Line 616
    fun (_cor1,_cor0) ->
	%% Line 617
	call 'erlang':'error'
	    ({'not_implemented','cond_expr'})
'vann_catch_expr'/2 =
    %% Line 619
    fun (_cor1,_cor0) ->
	let <E> =
	    %% Line 620
	    call 'erl_syntax':'catch_expr_body'
		(_cor1)
	in  %% Line 621
	    case apply 'vann'/2
		     (E, _cor0) of
	      <{E1,_cor10,Free}> when 'true' ->
		  let <_cor4> =
		      %% Line 622
		      call 'erl_syntax':'catch_expr'
			  (E1)
		  in  let <Tree1> =
			  %% Line 622
			  apply 'rewrite'/2
			      (_cor1, _cor4)
		      in  let <_cor7> =
			      %% Line 624
			      apply 'ann_bindings'/4
				  (Tree1, _cor0, [], Free)
			  in  %% Line 624
			      {_cor7,[],Free}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_try_expr'/2 =
    %% Line 626
    fun (_cor1,_cor0) ->
	let <Es> =
	    %% Line 627
	    call 'erl_syntax':'try_expr_body'
		(_cor1)
	in  %% Line 628
	    case apply 'vann_body'/2
		     (Es, _cor0) of
	      <{Es1,{Bound1,Free1}}> when 'true' ->
		  let <Cs> =
		      %% Line 629
		      call 'erl_syntax':'try_expr_clauses'
			  (_cor1)
		  in  let <_cor5> =
			  %% Line 631
			  call 'ordsets':'union'
			      (_cor0, Bound1)
		      in  %% Line 631
			  case apply 'vann_clauses'/2
				   (Cs, _cor5) of
			    <{Cs1,{_cor20,Free2}}> when 'true' ->
				let <Hs> =
				    %% Line 632
				    call 'erl_syntax':'try_expr_handlers'
					(_cor1)
				in  %% Line 633
				    case apply 'vann_clauses'/2
					     (Hs, _cor0) of
				      <{Hs1,{_cor21,Free3}}> when 'true' ->
					  let <As> =
					      %% Line 635
					      call 'erl_syntax':'try_expr_after'
						  (_cor1)
					  in  %% Line 636
					      case apply 'vann_body'/2
						       (As, _cor0) of
						<{As1,{_cor22,Free4}}> when 'true' ->
						    let <_cor11> =
							%% Line 637
							call 'erl_syntax':'try_expr'
							    (Es1, Cs1, Hs1, As1)
						    in  let <Tree1> =
							    %% Line 637
							    apply 'rewrite'/2
								(_cor1, _cor11)
							in  let <_cor14> =
								%% Line 639
								call 'ordsets':'union'
								    (Free3, Free4)
							    in  let <_cor15> =
								    %% Line 639
								    call 'ordsets':'union'
									(Free2, _cor14)
								in  let <Free> =
									%% Line 639
									call 'ordsets':'union'
									    (Free1, _cor15)
								    in  let <_cor17> =
									    %% Line 640
									    apply 'ann_bindings'/4
										(Tree1, _cor0, [], Free)
									in  %% Line 640
									    {_cor17,[],Free}
						( <_cor10> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor10})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_receive_expr'/2 =
    %% Line 642
    fun (_cor1,_cor0) ->
	let <Cs> =
	    %% Line 645
	    call 'erl_syntax':'receive_expr_clauses'
		(_cor1)
	in  let <Es> =
		%% Line 646
		call 'erl_syntax':'receive_expr_action'
		    (_cor1)
	    in  let <C> =
		    %% Line 647
		    call 'erl_syntax':'clause'
			([], Es)
		in  %% Line 648
		    case apply 'vann_clauses'/2
			     ([C|Cs], _cor0) of
		      <{[C1|Cs1],{Bound,Free1}}> when 'true' ->
			  let <Es1> =
			      %% Line 649
			      call 'erl_syntax':'clause_body'
				  (C1)
			  in  let <_cor8> =
				  %% Line 650
				  case call 'erl_syntax':'receive_expr_timeout'
					   (_cor1) of
				    %% Line 651
				    <'none'> when 'true' ->
					%% Line 652
					{'none',[],[]}
				    %% Line 653
				    <T> when 'true' ->
					%% Line 654
					apply 'vann'/2
					    (T, _cor0)
				  end
			      in  %% Line 650
				  case _cor8 of
				    <{T1,_cor16,Free2}> when 'true' ->
					let <Free> =
					    %% Line 656
					    call 'ordsets':'union'
						(Free1, Free2)
					in  let <_cor11> =
						%% Line 657
						call 'erl_syntax':'receive_expr'
						    (Cs1, T1, Es1)
					    in  let <Tree1> =
						    %% Line 657
						    apply 'rewrite'/2
							(_cor1, _cor11)
						in  let <_cor13> =
							%% Line 658
							apply 'ann_bindings'/4
							    (Tree1, _cor0, Bound, Free)
						    in  %% Line 658
							{_cor13,Bound,Free}
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
'vann_list_comp'/2 =
    %% Line 660
    fun (_cor1,_cor0) ->
	let <Es> =
	    %% Line 661
	    call 'erl_syntax':'list_comp_body'
		(_cor1)
	in  %% Line 662
	    case apply 'vann_list_comp_body'/2
		     (Es, _cor0) of
	      <{Es1,{Bound1,Free1}}> when 'true' ->
		  let <Env1> =
		      %% Line 663
		      call 'ordsets':'union'
			  (_cor0, Bound1)
		  in  let <T> =
			  %% Line 664
			  call 'erl_syntax':'list_comp_template'
			      (_cor1)
		      in  %% Line 665
			  case apply 'vann'/2
				   (T, Env1) of
			    <{T1,_cor15,Free2}> when 'true' ->
				let <_cor7> =
				    %% Line 666
				    call 'ordsets':'subtract'
					(Free2, Bound1)
				in  let <Free> =
					%% Line 666
					call 'ordsets':'union'
					    (Free1, _cor7)
				    in  let <_cor10> =
					    %% Line 668
					    call 'erl_syntax':'list_comp'
						(T1, Es1)
					in  let <Tree1> =
						%% Line 668
						apply 'rewrite'/2
						    (_cor1, _cor10)
					    in  let <_cor12> =
						    %% Line 669
						    apply 'ann_bindings'/4
							(Tree1, _cor0, [], Free)
						in  %% Line 669
						    {_cor12,[],Free}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_list_comp_body_join'/0 =
    %% Line 671
    fun () ->
	%% Line 672
	( fun (_cor9,_cor8) ->
	      case <_cor9,_cor8> of
		<T,{Env,Bound,Free}> when 'true' ->
		    let <_cor2> =
			%% Line 673
			case call 'erl_syntax':'type'
				 (T) of
			  %% Line 674
			  <'binary_generator'> when 'true' ->
			      %% Line 675
			      apply 'vann_binary_generator'/2
				  (T, Env)
			  %% Line 676
			  <'generator'> when 'true' ->
			      %% Line 677
			      apply 'vann_generator'/2
				  (T, Env)
			  %% Line 678
			  <_cor12> when 'true' ->
			      %% Line 682
			      case apply 'vann'/2
				       (T, Env) of
				<{T2,_cor13,Free2}> when 'true' ->
				    %% Line 683
				    {T2,[],Free2}
				( <_cor0> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor0})
				  -| ['compiler_generated'] )
			      end
			end
		    in  %% Line 673
			case _cor2 of
			  <{T1,Bound1,Free1}> when 'true' ->
			      let <Env1> =
				  %% Line 685
				  call 'ordsets':'union'
				      (Env, Bound1)
			      in  let <_cor7> =
				      %% Line 686
				      call 'ordsets':'union'
					  (Bound, Bound1)
				  in  let <_cor5> =
					  %% Line 688
					  call 'ordsets':'subtract'
					      (Free1, Bound)
				      in  let <_cor6> =
					      %% Line 687
					      call 'ordsets':'union'
						  (Free, _cor5)
					  in  %% Line 686
					      {T1,{Env1,_cor7,_cor6}}
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		( <_cor11,_cor10> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor11,_cor10})
			-| [{'function_name',{'-vann_list_comp_body_join/0-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-vann_list_comp_body_join/0-fun-0-'}}] )
'vann_list_comp_body'/2 =
    %% Line 691
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 692
	    apply 'vann_list_comp_body_join'/0
		()
	in  %% Line 693
	    case call 'lists':'mapfoldl'
		     (F, {_cor0,[],[]}, _cor1) of
	      <{Ts1,{_cor6,Bound,Free}}> when 'true' ->
		  %% Line 694
		  {Ts1,{Bound,Free}}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_binary_comp'/2 =
    %% Line 696
    fun (_cor1,_cor0) ->
	let <Es> =
	    %% Line 697
	    call 'erl_syntax':'binary_comp_body'
		(_cor1)
	in  %% Line 698
	    case apply 'vann_binary_comp_body'/2
		     (Es, _cor0) of
	      <{Es1,{Bound1,Free1}}> when 'true' ->
		  let <Env1> =
		      %% Line 699
		      call 'ordsets':'union'
			  (_cor0, Bound1)
		  in  let <T> =
			  %% Line 700
			  call 'erl_syntax':'binary_comp_template'
			      (_cor1)
		      in  %% Line 701
			  case apply 'vann'/2
				   (T, Env1) of
			    <{T1,_cor15,Free2}> when 'true' ->
				let <_cor7> =
				    %% Line 702
				    call 'ordsets':'subtract'
					(Free2, Bound1)
				in  let <Free> =
					%% Line 702
					call 'ordsets':'union'
					    (Free1, _cor7)
				    in  let <_cor10> =
					    %% Line 704
					    call 'erl_syntax':'binary_comp'
						(T1, Es1)
					in  let <Tree1> =
						%% Line 704
						apply 'rewrite'/2
						    (_cor1, _cor10)
					    in  let <_cor12> =
						    %% Line 705
						    apply 'ann_bindings'/4
							(Tree1, _cor0, [], Free)
						in  %% Line 705
						    {_cor12,[],Free}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_binary_comp_body_join'/0 =
    %% Line 707
    fun () ->
	%% Line 708
	( fun (_cor9,_cor8) ->
	      case <_cor9,_cor8> of
		<T,{Env,Bound,Free}> when 'true' ->
		    let <_cor2> =
			%% Line 709
			case call 'erl_syntax':'type'
				 (T) of
			  %% Line 710
			  <'binary_generator'> when 'true' ->
			      %% Line 711
			      apply 'vann_binary_generator'/2
				  (T, Env)
			  %% Line 712
			  <'generator'> when 'true' ->
			      %% Line 713
			      apply 'vann_generator'/2
				  (T, Env)
			  %% Line 714
			  <_cor12> when 'true' ->
			      %% Line 718
			      case apply 'vann'/2
				       (T, Env) of
				<{T2,_cor13,Free2}> when 'true' ->
				    %% Line 719
				    {T2,[],Free2}
				( <_cor0> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor0})
				  -| ['compiler_generated'] )
			      end
			end
		    in  %% Line 709
			case _cor2 of
			  <{T1,Bound1,Free1}> when 'true' ->
			      let <Env1> =
				  %% Line 721
				  call 'ordsets':'union'
				      (Env, Bound1)
			      in  let <_cor7> =
				      %% Line 722
				      call 'ordsets':'union'
					  (Bound, Bound1)
				  in  let <_cor5> =
					  %% Line 724
					  call 'ordsets':'subtract'
					      (Free1, Bound)
				      in  let <_cor6> =
					      %% Line 723
					      call 'ordsets':'union'
						  (Free, _cor5)
					  in  %% Line 722
					      {T1,{Env1,_cor7,_cor6}}
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		( <_cor11,_cor10> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor11,_cor10})
			-| [{'function_name',{'-vann_binary_comp_body_join/0-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-vann_binary_comp_body_join/0-fun-0-'}}] )
'vann_binary_comp_body'/2 =
    %% Line 727
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 728
	    apply 'vann_binary_comp_body_join'/0
		()
	in  %% Line 729
	    case call 'lists':'mapfoldl'
		     (F, {_cor0,[],[]}, _cor1) of
	      <{Ts1,{_cor6,Bound,Free}}> when 'true' ->
		  %% Line 730
		  {Ts1,{Bound,Free}}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_generator'/2 =
    %% Line 737
    fun (_cor1,_cor0) ->
	let <P> =
	    %% Line 738
	    call 'erl_syntax':'generator_pattern'
		(_cor1)
	in  %% Line 739
	    case apply 'vann_pattern'/2
		     (P, []) of
	      <{P1,Bound,_cor11}> when 'true' ->
		  let <E> =
		      %% Line 740
		      call 'erl_syntax':'generator_body'
			  (_cor1)
		  in  %% Line 741
		      case apply 'vann'/2
			       (E, _cor0) of
			<{E1,_cor12,Free}> when 'true' ->
			    let <_cor6> =
				%% Line 742
				call 'erl_syntax':'generator'
				    (P1, E1)
			    in  let <Tree1> =
				    %% Line 742
				    apply 'rewrite'/2
					(_cor1, _cor6)
				in  let <_cor8> =
					%% Line 743
					apply 'ann_bindings'/4
					    (Tree1, _cor0, Bound, Free)
				    in  %% Line 743
					{_cor8,Bound,Free}
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_binary_generator'/2 =
    %% Line 745
    fun (_cor1,_cor0) ->
	let <P> =
	    %% Line 746
	    call 'erl_syntax':'binary_generator_pattern'
		(_cor1)
	in  %% Line 747
	    case apply 'vann_pattern'/2
		     (P, _cor0) of
	      <{P1,Bound,_cor11}> when 'true' ->
		  let <E> =
		      %% Line 748
		      call 'erl_syntax':'binary_generator_body'
			  (_cor1)
		  in  %% Line 749
		      case apply 'vann'/2
			       (E, _cor0) of
			<{E1,_cor12,Free}> when 'true' ->
			    let <_cor6> =
				%% Line 750
				call 'erl_syntax':'binary_generator'
				    (P1, E1)
			    in  let <Tree1> =
				    %% Line 750
				    apply 'rewrite'/2
					(_cor1, _cor6)
				in  let <_cor8> =
					%% Line 751
					apply 'ann_bindings'/4
					    (Tree1, _cor0, Bound, Free)
				    in  %% Line 751
					{_cor8,Bound,Free}
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_block_expr'/2 =
    %% Line 753
    fun (_cor1,_cor0) ->
	let <Es> =
	    %% Line 754
	    call 'erl_syntax':'block_expr_body'
		(_cor1)
	in  %% Line 755
	    case apply 'vann_body'/2
		     (Es, _cor0) of
	      <{Es1,{Bound,Free}}> when 'true' ->
		  let <_cor4> =
		      %% Line 756
		      call 'erl_syntax':'block_expr'
			  (Es1)
		  in  let <Tree1> =
			  %% Line 756
			  apply 'rewrite'/2
			      (_cor1, _cor4)
		      in  let <_cor6> =
			      %% Line 757
			      apply 'ann_bindings'/4
				  (Tree1, _cor0, Bound, Free)
			  in  %% Line 757
			      {_cor6,Bound,Free}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_body_join'/0 =
    %% Line 759
    fun () ->
	%% Line 760
	( fun (_cor6,_cor5) ->
	      case <_cor6,_cor5> of
		<T,{Env,Bound,Free}> when 'true' ->
		    %% Line 761
		    case apply 'vann'/2
			     (T, Env) of
		      <{T1,Bound1,Free1}> when 'true' ->
			  let <Env1> =
			      %% Line 762
			      call 'ordsets':'union'
				  (Env, Bound1)
			  in  let <_cor4> =
				  %% Line 763
				  call 'ordsets':'union'
				      (Bound, Bound1)
			      in  let <_cor2> =
				      %% Line 765
				      call 'ordsets':'subtract'
					  (Free1, Bound)
				  in  let <_cor3> =
					  %% Line 764
					  call 'ordsets':'union'
					      (Free, _cor2)
				      in  %% Line 763
					  {T1,{Env1,_cor4,_cor3}}
		      ( <_cor0> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor0})
			-| ['compiler_generated'] )
		    end
		( <_cor8,_cor7> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor8,_cor7})
			-| [{'function_name',{'-vann_body_join/0-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-vann_body_join/0-fun-0-'}}] )
'vann_body'/2 =
    %% Line 768
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 769
	    apply 'vann_body_join'/0
		()
	in  %% Line 769
	    case call 'lists':'mapfoldl'
		     (_cor2, %% Line 770
			     {_cor0,[],[]}, _cor1) of
	      <{Ts1,{_cor6,Bound,Free}}> when 'true' ->
		  %% Line 771
		  {Ts1,{Bound,Free}}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_macro'/2 =
    %% Line 776
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 777
	    case call 'erl_syntax':'macro_arguments'
		     (_cor1) of
	      %% Line 778
	      <'none'> when 'true' ->
		  %% Line 779
		  {'none',{[],[]}}
	      %% Line 780
	      <As1> when 'true' ->
		  %% Line 781
		  apply 'vann_list'/2
		      (As1, _cor0)
	    end
	in  %% Line 777
	    case _cor3 of
	      <{As,{Bound,Free}}> when 'true' ->
		  let <N> =
		      %% Line 783
		      call 'erl_syntax':'macro_name'
			  (_cor1)
		  in  let <_cor6> =
			  %% Line 784
			  call 'erl_syntax':'macro'
			      (N, As)
		      in  let <Tree1> =
			      %% Line 784
			      apply 'rewrite'/2
				  (_cor1, _cor6)
			  in  let <_cor8> =
				  %% Line 785
				  apply 'ann_bindings'/4
				      (Tree1, _cor0, Bound, Free)
			      in  %% Line 785
				  {_cor8,Bound,Free}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'vann_pattern'/2 =
    %% Line 787
    fun (_cor1,_cor0) ->
	%% Line 788
	case call 'erl_syntax':'type'
		 (_cor1) of
	  %% Line 789
	  <'variable'> when 'true' ->
	      let <V> =
		  %% Line 790
		  call 'erl_syntax':'variable_name'
		      (_cor1)
	      in  %% Line 791
		  case call 'ordsets':'is_element'
			   (V, _cor0) of
		    %% Line 792
		    <'true'> when 'true' ->
			let <Free> =
			    %% Line 795
			    [V|[]]
			in  let <_cor5> =
				%% Line 796
				apply 'ann_bindings'/4
				    (_cor1, _cor0, [], Free)
			    in  %% Line 796
				{_cor5,[],Free}
		    %% Line 797
		    <'false'> when 'true' ->
			let <Bound> =
			    %% Line 799
			    [V|[]]
			in  let <_cor8> =
				%% Line 801
				apply 'ann_bindings'/4
				    (_cor1, _cor0, Bound, [])
			    in  %% Line 801
				{_cor8,Bound,[]}
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 803
	  <'match_expr'> when 'true' ->
	      let <P> =
		  %% Line 805
		  call 'erl_syntax':'match_expr_pattern'
		      (_cor1)
	      in  %% Line 806
		  case apply 'vann_pattern'/2
			   (P, _cor0) of
		    <{P1,Bound1,Free1}> when 'true' ->
			let <E> =
			    %% Line 807
			    call 'erl_syntax':'match_expr_body'
				(_cor1)
			in  %% Line 808
			    case apply 'vann_pattern'/2
				     (E, _cor0) of
			      <{E1,Bound2,Free2}> when 'true' ->
				  let <Bound> =
				      %% Line 809
				      call 'ordsets':'union'
					  (Bound1, Bound2)
				  in  let <Free> =
					  %% Line 810
					  call 'ordsets':'union'
					      (Free1, Free2)
				      in  let <_cor16> =
					      %% Line 811
					      call 'erl_syntax':'match_expr'
						  (P1, E1)
					  in  let <Tree1> =
						  %% Line 811
						  apply 'rewrite'/2
						      (_cor1, _cor16)
					      in  let <_cor18> =
						      %% Line 812
						      apply 'ann_bindings'/4
							  (Tree1, _cor0, Bound, Free)
						  in  %% Line 812
						      {_cor18,Bound,Free}
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor13})
				-| ['compiler_generated'] )
			    end
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		      -| ['compiler_generated'] )
		  end
	  %% Line 813
	  <'macro'> when 'true' ->
	      let <_cor20> =
		  %% Line 817
		  case call 'erl_syntax':'macro_arguments'
			   (_cor1) of
		    %% Line 818
		    <'none'> when 'true' ->
			%% Line 819
			{'none',{[],[]}}
		    %% Line 820
		    <As1> when 'true' ->
			%% Line 821
			apply 'vann_patterns'/2
			    (As1, _cor0)
		  end
	      in  %% Line 816
		  case _cor20 of
		    <{As,{Bound,Free}}> when 'true' ->
			let <N> =
			    %% Line 823
			    call 'erl_syntax':'macro_name'
				(_cor1)
			in  let <_cor23> =
				%% Line 824
				call 'erl_syntax':'macro'
				    (N, As)
			    in  let <Tree1> =
				    %% Line 824
				    apply 'rewrite'/2
					(_cor1, _cor23)
				in  let <_cor25> =
					%% Line 825
					apply 'ann_bindings'/4
					    (Tree1, _cor0, Bound, Free)
				    in  %% Line 825
					{_cor25,Bound,Free}
		    ( <_cor21> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor21})
		      -| ['compiler_generated'] )
		  end
	  %% Line 826
	  <_X_Type> when 'true' ->
	      let <F> =
		  %% Line 827
		  apply 'vann_patterns_join'/1
		      (_cor0)
	      in  %% Line 828
		  case apply 'mapfold_subtrees'/3
			   (F, {[],[]}, _cor1) of
		    <{Tree1,{Bound,Free}}> when 'true' ->
			let <_cor28> =
			    %% Line 830
			    apply 'ann_bindings'/4
				(Tree1, _cor0, Bound, Free)
			in  %% Line 830
			    {_cor28,Bound,Free}
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor27})
		      -| ['compiler_generated'] )
		  end
	end
'vann_patterns_join'/1 =
    %% Line 833
    fun (_cor0) ->
	%% Line 834
	( fun (_cor5,_cor4) ->
	      case <_cor5,_cor4> of
		<T,{Bound,Free}> when 'true' ->
		    %% Line 835
		    case apply 'vann_pattern'/2
			     (T, _cor0) of
		      <{T1,Bound1,Free1}> when 'true' ->
			  let <_cor3> =
			      %% Line 836
			      call 'ordsets':'union'
				  (Bound, Bound1)
			  in  let <_cor2> =
				  %% Line 837
				  call 'ordsets':'union'
				      (Free, Free1)
			      in  %% Line 836
				  {T1,{_cor3,_cor2}}
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor1})
			-| ['compiler_generated'] )
		    end
		( <_cor7,_cor6> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor7,_cor6})
			-| [{'function_name',{'-vann_patterns_join/1-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-vann_patterns_join/1-fun-0-'}}] )
'vann_patterns'/2 =
    %% Line 840
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 841
	    apply 'vann_patterns_join'/1
		(_cor0)
	in  %% Line 841
	    call 'lists':'mapfoldl'
		(_cor2, {[],[]}, _cor1)
'vann_clause'/2 =
    %% Line 843
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 844
	    call 'erl_syntax':'clause_patterns'
		(_cor1)
	in  %% Line 844
	    case apply 'vann_patterns'/2
		     (_cor2, _cor0) of
	      <{Ps,{Bound1,Free1}}> when 'true' ->
		  let <Env1> =
		      %% Line 846
		      call 'ordsets':'union'
			  (_cor0, Bound1)
		  in  let <_cor6> =
			  %% Line 848
			  case call 'erl_syntax':'clause_guard'
				   (_cor1) of
			    %% Line 849
			    <'none'> when 'true' ->
				%% Line 850
				{'none',[],[]}
			    %% Line 851
			    <G> when 'true' ->
				%% Line 852
				apply 'vann'/2
				    (G, Env1)
			  end
		      in  %% Line 848
			  case _cor6 of
			    <{G1,_cor19,Free2}> when 'true' ->
				let <_cor8> =
				    %% Line 854
				    call 'erl_syntax':'clause_body'
					(_cor1)
				in  %% Line 854
				    case apply 'vann_body'/2
					     (_cor8, Env1) of
				      <{Es,{Bound2,Free3}}> when 'true' ->
					  let <Bound> =
					      %% Line 855
					      call 'ordsets':'union'
						  (Bound1, Bound2)
					  in  let <_cor11> =
						  %% Line 857
						  call 'ordsets':'union'
						      (Free2, Free3)
					      in  let <_cor12> =
						      %% Line 857
						      call 'ordsets':'subtract'
							  (_cor11, %% Line 858
								   Bound1)
						  in  let <Free> =
							  %% Line 856
							  call 'ordsets':'union'
							      (Free1, _cor12)
						      in  let <_cor14> =
							      %% Line 859
							      call 'erl_syntax':'clause'
								  (Ps, G1, Es)
							  in  let <Tree1> =
								  %% Line 859
								  apply 'rewrite'/2
								      (_cor1, _cor14)
							      in  let <_cor16> =
								      %% Line 860
								      apply 'ann_bindings'/4
									  (Tree1, _cor0, Bound, Free)
								  in  %% Line 860
								      {_cor16,Bound,Free}
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor9})
					-| ['compiler_generated'] )
				    end
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'vann_clauses_join'/1 =
    %% Line 862
    fun (_cor0) ->
	%% Line 863
	( fun (_cor5,_cor4) ->
	      case <_cor5,_cor4> of
		<C,{Bound,Free}> when 'true' ->
		    %% Line 864
		    case apply 'vann_clause'/2
			     (C, _cor0) of
		      <{C1,Bound1,Free1}> when 'true' ->
			  let <_cor3> =
			      %% Line 865
			      call 'ordsets':'intersection'
				  (Bound, Bound1)
			  in  let <_cor2> =
				  %% Line 866
				  call 'ordsets':'union'
				      (Free, Free1)
			      in  %% Line 865
				  {C1,{_cor3,_cor2}}
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor1})
			-| ['compiler_generated'] )
		    end
		( <_cor7,_cor6> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor7,_cor6})
			-| [{'function_name',{'-vann_clauses_join/1-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-vann_clauses_join/1-fun-0-'}}] )
'vann_clauses'/2 =
    %% Line 869
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],Env> when 'true' ->
	      %% Line 870
	      case apply 'vann_clause'/2
		       (C, Env) of
		<{C1,Bound,Free}> when 'true' ->
		    let <_cor3> =
			%% Line 871
			apply 'vann_clauses_join'/1
			    (Env)
		    in  %% Line 871
			case call 'lists':'mapfoldl'
				 (_cor3, {Bound,Free}, Cs) of
			  <{Cs1,BF}> when 'true' ->
			      %% Line 872
			      {[C1|Cs1],BF}
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 873
	  <[],_X_Env> when 'true' ->
	      %% Line 874
	      {[],{[],[]}}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'vann_clauses',2}}] )
	    -| ['compiler_generated'] )
	end
'ann_bindings'/4 =
    %% Line 876
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <As0> =
	    %% Line 877
	    call 'erl_syntax':'get_ann'
		(_cor3)
	in  let <_cor5> =
		%% Line 881
		apply 'delete_binding_anns'/1
		    (As0)
	    in  let <As1> =
		    %% Line 878
		    [{'env',_cor2}|%% Line 879
				   [{'bound',_cor1}|%% Line 880
						    [{'free',_cor0}|_cor5]]]
		in  %% Line 882
		    call 'erl_syntax':'set_ann'
			(_cor3, As1)
'delete_binding_anns'/1 =
    %% Line 884
    fun (_cor0) ->
	case _cor0 of
	  <[{'env',_cor3}|As]> when 'true' ->
	      %% Line 885
	      apply 'delete_binding_anns'/1
		  (As)
	  %% Line 886
	  <[{'bound',_cor4}|As]> when 'true' ->
	      %% Line 887
	      apply 'delete_binding_anns'/1
		  (As)
	  %% Line 888
	  <[{'free',_cor5}|As]> when 'true' ->
	      %% Line 889
	      apply 'delete_binding_anns'/1
		  (As)
	  %% Line 890
	  <[A|As]> when 'true' ->
	      let <_cor1> =
		  %% Line 891
		  apply 'delete_binding_anns'/1
		      (As)
	      in  %% Line 891
		  [A|_cor1]
	  %% Line 892
	  <[]> when 'true' ->
	      %% Line 893
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'delete_binding_anns',1}}] )
	    -| ['compiler_generated'] )
	end
'is_fail_expr'/1 =
    %% Line 912
    fun (_cor0) ->
	%% Line 913
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 914
	  <'application'> when 'true' ->
	      let <_cor1> =
		  %% Line 915
		  call 'erl_syntax':'application_arguments'
		      (_cor0)
	      in  let <N> =
		      %% Line 915
		      call 'erlang':'length'
			  (_cor1)
		  in  let <F> =
			  %% Line 916
			  call 'erl_syntax':'application_operator'
			      (_cor0)
		      in  let <_cor5> =
			      catch
				  let <_cor4> =
				      %% Line 917
				      apply 'analyze_function_name'/1
					  (F)
				  in  %% Line 917
				      {'ok',_cor4}
			  in  %% Line 917
			      case _cor5 of
				%% Line 918
				<'syntax_error'> when 'true' ->
				    %% Line 919
				    'false'
				%% Line 920
				<{'ok','exit'}>
				    when call 'erlang':'=:='
					  (N,
					   1) ->
				    %% Line 921
				    'true'
				%% Line 922
				<{'ok','throw'}>
				    when call 'erlang':'=:='
					  (N,
					   1) ->
				    %% Line 923
				    'true'
				%% Line 924
				<{'ok',{'erlang','exit'}}>
				    when call 'erlang':'=:='
					  (N,
					   1) ->
				    %% Line 925
				    'true'
				%% Line 926
				<{'ok',{'erlang','throw'}}>
				    when call 'erlang':'=:='
					  (N,
					   1) ->
				    %% Line 927
				    'true'
				%% Line 928
				<{'ok',{'erlang','error'}}>
				    when call 'erlang':'=:='
					  (N,
					   1) ->
				    %% Line 929
				    'true'
				%% Line 930
				<{'ok',{'erlang','error'}}>
				    when call 'erlang':'=:='
					  (N,
					   2) ->
				    %% Line 931
				    'true'
				%% Line 932
				<{'ok',{'erlang','fault'}}>
				    when call 'erlang':'=:='
					  (N,
					   1) ->
				    %% Line 933
				    'true'
				%% Line 934
				<{'ok',{'erlang','fault'}}>
				    when call 'erlang':'=:='
					  (N,
					   2) ->
				    %% Line 935
				    'true'
				%% Line 936
				<_cor9> when 'true' ->
				    %% Line 937
				    'false'
			      end
	  %% Line 939
	  <_cor10> when 'true' ->
	      %% Line 940
	      'false'
	end
'analyze_forms'/1 =
    %% Line 1087
    fun (_cor0) ->
	case _cor0 of
	  <Forms>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1088
		  apply 'new_finfo'/0
		      ()
	      in  let <_cor2> =
		      %% Line 1088
		      call 'lists':'foldl'
			  (( 'collect_form'/2
			     -| [{'id',{0,0,'-analyze_forms/1-fun-0-'}}] ), _cor1, Forms)
		  in  %% Line 1088
		      apply 'finfo_to_list'/1
			  (_cor2)
	  %% Line 1089
	  <Forms> when 'true' ->
	      let <_cor3> =
		  %% Line 1092
		  call 'erl_syntax':'flatten_form_list'
		      (Forms)
	      in  let <_cor4> =
		      %% Line 1091
		      call 'erl_syntax':'form_list_elements'
			  (_cor3)
		  in  %% Line 1090
		      apply 'analyze_forms'/1
			  (_cor4)
	end
'collect_form'/2 =
    %% Line 1094
    fun (_cor1,_cor0) ->
	%% Line 1095
	case apply 'analyze_form'/1
		 (_cor1) of
	  %% Line 1096
	  <{'attribute',{Name,Data}}> when 'true' ->
	      %% Line 1097
	      apply 'collect_attribute'/3
		  (Name, Data, _cor0)
	  %% Line 1098
	  <{'attribute','preprocessor'}> when 'true' ->
	      _cor0
	  %% Line 1100
	  <{'function',Name}> when 'true' ->
	      %% Line 1101
	      apply 'finfo_add_function'/2
		  (Name, _cor0)
	  %% Line 1102
	  <{'rule',Name}> when 'true' ->
	      %% Line 1103
	      apply 'finfo_add_rule'/2
		  (Name, _cor0)
	  %% Line 1104
	  <{'error_marker',Data}> when 'true' ->
	      %% Line 1105
	      apply 'finfo_add_error'/2
		  (Data, _cor0)
	  %% Line 1106
	  <{'warning_marker',Data}> when 'true' ->
	      %% Line 1107
	      apply 'finfo_add_warning'/2
		  (Data, _cor0)
	  %% Line 1108
	  <_cor5> when 'true' ->
	      _cor0
	end
'collect_attribute'/3 =
    %% Line 1112
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'module',M,Info> when 'true' ->
	      %% Line 1113
	      apply 'finfo_set_module'/2
		  (M, Info)
	  %% Line 1114
	  <'export',L,Info> when 'true' ->
	      %% Line 1115
	      apply 'finfo_add_exports'/2
		  (L, Info)
	  %% Line 1116
	  <'import',{M,L},Info> when 'true' ->
	      %% Line 1117
	      apply 'finfo_add_imports'/3
		  (M, L, Info)
	  %% Line 1118
	  <'import',M,Info> when 'true' ->
	      %% Line 1119
	      apply 'finfo_add_module_import'/2
		  (M, Info)
	  %% Line 1120
	  <'file',_cor6,Info> when 'true' ->
	      %% Line 1121
	      Info
	  %% Line 1122
	  <'record',{R,L},Info> when 'true' ->
	      %% Line 1123
	      apply 'finfo_add_record'/3
		  (R, L, Info)
	  %% Line 1124
	  <'spec',_cor7,Info> when 'true' ->
	      %% Line 1125
	      Info
	  %% Line 1126
	  <_cor8,{N,V},Info> when 'true' ->
	      %% Line 1127
	      apply 'finfo_add_attribute'/3
		  (N, V, Info)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'collect_attribute',3}}] )
	    -| ['compiler_generated'] )
	end
'new_finfo'/0 =
    %% Line 1144
    fun () ->
	%% Line 1145
	{'forms','none',[],[],[],[],[],[],[],[],[]}
'finfo_set_module'/2 =
    %% Line 1147
    fun (_cor1,_cor0) ->
	%% Line 1148
	( case _cor0 of
	    ( <( {'forms',_rec0,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec0 of
		    %% Line 1149
		    <'none'> when 'true' ->
			let <_rec1> = {%% Line 1150
			     'value',_cor1}
			in  %% Line 1150
			    call 'erlang':'setelement'
				(2, _cor0, _rec1)
		    %% Line 1151
		    <{'value',_cor31}> when 'true' ->
			_cor0
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_exports'/2 =
    %% Line 1155
    fun (_cor1,_cor0) ->
	%% Line 1156
	( case _cor0 of
	    ( <( {'forms',_cor9,_rec5,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec3> =
		      call 'erlang':'++'
			  (_cor1, _rec5)
		  in  call 'erlang':'setelement'
			  (3, _cor0, _rec3)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_module_import'/2 =
    %% Line 1158
    fun (_cor1,_cor0) ->
	%% Line 1159
	( case _cor0 of
	    ( <( {'forms',_cor9,_cor10,_rec8,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec6> =
		      [_cor1|_rec8]
		  in  call 'erlang':'setelement'
			  (4, _cor0, _rec6)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_imports'/3 =
    %% Line 1161
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1162
	( case _cor0 of
	    ( <( {'forms',_cor17,_cor18,_cor19,_rec9,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1163
		  case call 'lists':'keyfind'
			   (_cor2, 1, _rec9) of
		    %% Line 1164
		    <{_cor27,L1}> when 'true' ->
			let <_cor6> =
			    %% Line 1165
			    call 'erlang':'++'
				(_cor1, L1)
			in  let <Es1> =
				%% Line 1165
				call 'lists':'keyreplace'
				    (_cor2, 1, _rec9, {_cor2,_cor6})
			    in  %% Line 1166
				call 'erlang':'setelement'
				    (5, _cor0, Es1)
		    %% Line 1167
		    <'false'> when 'true' ->
			let <_rec11> =
			    %% Line 1168
			    [{_cor2,_cor1}|_rec9]
			in  %% Line 1168
			    call 'erlang':'setelement'
				(5, _cor0, _rec11)
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_attribute'/3 =
    %% Line 1171
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1172
	( case _cor0 of
	    ( <( {'forms',_cor11,_cor12,_cor13,_cor14,_rec15,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec13> =
		      [{_cor2,_cor1}|_rec15]
		  in  call 'erlang':'setelement'
			  (6, _cor0, _rec13)
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_record'/3 =
    %% Line 1174
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1175
	( case _cor0 of
	    ( <( {'forms',_cor11,_cor12,_cor13,_cor14,_cor15,_rec18,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec16> =
		      [{_cor2,_cor1}|_rec18]
		  in  call 'erlang':'setelement'
			  (7, _cor0, _rec16)
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_error'/2 =
    %% Line 1177
    fun (_cor1,_cor0) ->
	%% Line 1178
	( case _cor0 of
	    ( <( {'forms',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_rec21,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec19> =
		      [_cor1|_rec21]
		  in  call 'erlang':'setelement'
			  (8, _cor0, _rec19)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_warning'/2 =
    %% Line 1180
    fun (_cor1,_cor0) ->
	%% Line 1181
	( case _cor0 of
	    ( <( {'forms',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_rec24,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec22> =
		      [_cor1|_rec24]
		  in  call 'erlang':'setelement'
			  (9, _cor0, _rec22)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_function'/2 =
    %% Line 1183
    fun (_cor1,_cor0) ->
	%% Line 1184
	( case _cor0 of
	    ( <( {'forms',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_rec27,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec25> =
		      [_cor1|_rec27]
		  in  call 'erlang':'setelement'
			  (10, _cor0, _rec25)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_add_rule'/2 =
    %% Line 1186
    fun (_cor1,_cor0) ->
	%% Line 1187
	( case _cor0 of
	    ( <( {'forms',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec30}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec28> =
		      [_cor1|_rec30]
		  in  call 'erlang':'setelement'
			  (11, _cor0, _rec28)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','forms'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finfo_to_list'/1 =
    %% Line 1189
    fun (_cor0) ->
	%% Line 1190
	( letrec
	      'lc$^0'/1 =
		  fun (_cor32) ->
		      case _cor32 of
			<[%% Line 1191
			  {Key,{'value',Value}}|_cor2]> when 'true' ->
			    let <_cor33> =
				%% Line 1191
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [{Key,Value}|_cor33]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      %% Line 1191
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor32> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor32})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  %% Line 1192
	      ( case _cor0 of
		  ( <( {'forms',_rec31,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor7> =
			    %% Line 1193
			    apply 'list_value'/1
				(_cor35)
			in  let <_cor10> =
				%% Line 1194
				apply 'list_value'/1
				    (_cor37)
			    in  let <_cor13> =
				    %% Line 1195
				    apply 'list_value'/1
					(_cor36)
				in  let <_cor16> =
					%% Line 1196
					apply 'list_value'/1
					    (_cor38)
				    in  let <_cor19> =
					    %% Line 1197
					    apply 'list_value'/1
						(_cor39)
					in  let <_cor22> =
						%% Line 1198
						apply 'list_value'/1
						    (_cor40)
					    in  let <_cor25> =
						    %% Line 1199
						    apply 'list_value'/1
							(_cor41)
						in  let <_cor28> =
							%% Line 1200
							apply 'list_value'/1
							    (_cor42)
						    in  let <_cor31> =
							    %% Line 1201
							    apply 'list_value'/1
								(_cor43)
							in  apply 'lc$^0'/1
								([{'module',_rec31}|%% Line 1193
										    [{'exports',_cor7}|%% Line 1194
												       [{'imports',_cor10}|%% Line 1195
															   [{'module_imports',_cor13}|%% Line 1196
																		      [{'attributes',_cor16}|%% Line 1197
																					     [{'records',_cor19}|%% Line 1198
																								 [{'errors',_cor22}|%% Line 1199
																										    [{'warnings',_cor25}|%% Line 1200
																													 [{'functions',_cor28}|%% Line 1201
																															       [{'rules',_cor31}|%% Line 1202
																																		 []]]]]]]]]]])
		    -| ['compiler_generated'] )
		  ( <_cor44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','forms'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  -| ['list_comprehension'] )
'list_value'/1 =
    %% Line 1204
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1205
	      'none'
	  %% Line 1206
	  <List> when 'true' ->
	      %% Line 1207
	      {'value',List}
	end
'analyze_form'/1 =
    %% Line 1255
    fun (_cor0) ->
	%% Line 1256
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1257
	  <'attribute'> when 'true' ->
	      let <_cor1> =
		  %% Line 1258
		  apply 'analyze_attribute'/1
		      (_cor0)
	      in  %% Line 1258
		  {'attribute',_cor1}
	  %% Line 1259
	  <'function'> when 'true' ->
	      let <_cor2> =
		  %% Line 1260
		  apply 'analyze_function'/1
		      (_cor0)
	      in  %% Line 1260
		  {'function',_cor2}
	  %% Line 1261
	  <'rule'> when 'true' ->
	      let <_cor3> =
		  %% Line 1262
		  apply 'analyze_rule'/1
		      (_cor0)
	      in  %% Line 1262
		  {'rule',_cor3}
	  %% Line 1263
	  <'error_marker'> when 'true' ->
	      let <_cor4> =
		  %% Line 1264
		  call 'erl_syntax':'error_marker_info'
		      (_cor0)
	      in  %% Line 1264
		  {'error_marker',_cor4}
	  %% Line 1265
	  <'warning_marker'> when 'true' ->
	      let <_cor5> =
		  %% Line 1266
		  call 'erl_syntax':'warning_marker_info'
		      (_cor0)
	      in  %% Line 1266
		  {'warning_marker',_cor5}
	  %% Line 1267
	  <_cor9> when 'true' ->
	      %% Line 1268
	      case call 'erl_syntax':'is_form'
		       (_cor0) of
		%% Line 1269
		<'true'> when 'true' ->
		    %% Line 1270
		    call 'erl_syntax':'type'
			(_cor0)
		%% Line 1271
		<'false'> when 'true' ->
		    %% Line 1272
		    call 'erlang':'throw'
			('syntax_error')
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'analyze_attribute'/1 =
    %% Line 1330
    fun (_cor0) ->
	let <Name> =
	    %% Line 1331
	    call 'erl_syntax':'attribute_name'
		(_cor0)
	in  %% Line 1332
	    case call 'erl_syntax':'type'
		     (Name) of
	      %% Line 1333
	      <'atom'> when 'true' ->
		  %% Line 1334
		  case call 'erl_syntax':'atom_value'
			   (Name) of
		    %% Line 1335
		    <'define'> when 'true' ->
			'preprocessor'
		    %% Line 1336
		    <'undef'> when 'true' ->
			'preprocessor'
		    %% Line 1337
		    <'include'> when 'true' ->
			'preprocessor'
		    %% Line 1338
		    <'include_lib'> when 'true' ->
			'preprocessor'
		    %% Line 1339
		    <'ifdef'> when 'true' ->
			'preprocessor'
		    %% Line 1340
		    <'ifndef'> when 'true' ->
			'preprocessor'
		    %% Line 1341
		    <'else'> when 'true' ->
			'preprocessor'
		    %% Line 1342
		    <'endif'> when 'true' ->
			'preprocessor'
		    %% Line 1343
		    <A> when 'true' ->
			let <_cor2> =
			    %% Line 1344
			    apply 'analyze_attribute'/2
				(A, _cor0)
			in  %% Line 1344
			    {A,_cor2}
		  end
	      %% Line 1346
	      <_cor6> when 'true' ->
		  %% Line 1347
		  call 'erlang':'throw'
		      ('syntax_error')
	    end
'analyze_attribute'/2 =
    %% Line 1350
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'module',Node> when 'true' ->
	      %% Line 1351
	      apply 'analyze_module_attribute'/1
		  (Node)
	  %% Line 1352
	  <'export',Node> when 'true' ->
	      %% Line 1353
	      apply 'analyze_export_attribute'/1
		  (Node)
	  %% Line 1354
	  <'import',Node> when 'true' ->
	      %% Line 1355
	      apply 'analyze_import_attribute'/1
		  (Node)
	  %% Line 1356
	  <'file',Node> when 'true' ->
	      %% Line 1357
	      apply 'analyze_file_attribute'/1
		  (Node)
	  %% Line 1358
	  <'record',Node> when 'true' ->
	      %% Line 1359
	      apply 'analyze_record_attribute'/1
		  (Node)
	  %% Line 1360
	  <'spec',_X_Node> when 'true' ->
	      %% Line 1361
	      'spec'
	  %% Line 1362
	  <_cor4,Node> when 'true' ->
	      %% Line 1364
	      apply 'analyze_wild_attribute'/1
		  (Node)
	end
'analyze_module_attribute'/1 =
    %% Line 1386
    fun (_cor0) ->
	%% Line 1387
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1388
	  <'attribute'> when 'true' ->
	      %% Line 1389
	      case call 'erl_syntax':'attribute_arguments'
		       (_cor0) of
		%% Line 1390
		<[M|[]]> when 'true' ->
		    %% Line 1391
		    apply 'module_name_to_atom'/1
			(M)
		%% Line 1392
		<[M|[L|[]]]> when 'true' ->
		    let <M1> =
			%% Line 1393
			apply 'module_name_to_atom'/1
			    (M)
		    in  let <L1> =
			    %% Line 1394
			    apply 'analyze_variable_list'/1
				(L)
			in  %% Line 1395
			    {M1,L1}
		%% Line 1396
		<_cor6> when 'true' ->
		    %% Line 1397
		    call 'erlang':'throw'
			('syntax_error')
	      end
	  %% Line 1399
	  <_cor7> when 'true' ->
	      %% Line 1400
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_variable_list'/1 =
    %% Line 1403
    fun (_cor0) ->
	%% Line 1404
	case call 'erl_syntax':'is_proper_list'
		 (_cor0) of
	  %% Line 1405
	  <'true'> when 'true' ->
	      %% Line 1406
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[%% Line 1407
				V|_cor2]> when 'true' ->
				  let <_cor5> =
				      call 'erl_syntax':'variable_name'
					  (V)
				  in  let <_cor6> =
					  %% Line 1407
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor3> =
			%% Line 1407
			call 'erl_syntax':'list_elements'
			    (_cor0)
		    in  apply 'lc$^0'/1
			    (_cor3)
		-| ['list_comprehension'] )
	  %% Line 1408
	  <'false'> when 'true' ->
	      %% Line 1409
	      call 'erlang':'throw'
		  ('syntax_error')
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'analyze_export_attribute'/1 =
    %% Line 1434
    fun (_cor0) ->
	%% Line 1435
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1436
	  <'attribute'> when 'true' ->
	      %% Line 1437
	      case call 'erl_syntax':'attribute_arguments'
		       (_cor0) of
		%% Line 1438
		<[L|[]]> when 'true' ->
		    %% Line 1439
		    apply 'analyze_function_name_list'/1
			(L)
		%% Line 1440
		<_cor4> when 'true' ->
		    %% Line 1441
		    call 'erlang':'throw'
			('syntax_error')
	      end
	  %% Line 1443
	  <_cor5> when 'true' ->
	      %% Line 1444
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_function_name_list'/1 =
    %% Line 1447
    fun (_cor0) ->
	%% Line 1448
	case call 'erl_syntax':'is_proper_list'
		 (_cor0) of
	  %% Line 1449
	  <'true'> when 'true' ->
	      %% Line 1450
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[%% Line 1451
				F|_cor2]> when 'true' ->
				  let <_cor5> =
				      apply 'analyze_function_name'/1
					  (F)
				  in  let <_cor6> =
					  %% Line 1451
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor3> =
			%% Line 1451
			call 'erl_syntax':'list_elements'
			    (_cor0)
		    in  apply 'lc$^0'/1
			    (_cor3)
		-| ['list_comprehension'] )
	  %% Line 1452
	  <'false'> when 'true' ->
	      %% Line 1453
	      call 'erlang':'throw'
		  ('syntax_error')
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'analyze_function_name'/1 =
    %% Line 1476
    fun (_cor0) ->
	%% Line 1477
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1478
	  <'atom'> when 'true' ->
	      %% Line 1479
	      call 'erl_syntax':'atom_value'
		  (_cor0)
	  %% Line 1480
	  <'arity_qualifier'> when 'true' ->
	      let <A> =
		  %% Line 1481
		  call 'erl_syntax':'arity_qualifier_argument'
		      (_cor0)
	      in  %% Line 1482
		  case call 'erl_syntax':'type'
			   (A) of
		    %% Line 1483
		    <'integer'> when 'true' ->
			let <F> =
			    %% Line 1484
			    call 'erl_syntax':'arity_qualifier_body'
				(_cor0)
			in  let <F1> =
				%% Line 1485
				apply 'analyze_function_name'/1
				    (F)
			    in  let <_cor4> =
				    %% Line 1486
				    call 'erl_syntax':'integer_value'
					(A)
				in  %% Line 1486
				    apply 'append_arity'/2
					(_cor4, F1)
		    %% Line 1487
		    <_cor13> when 'true' ->
			%% Line 1488
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1490
	  <'module_qualifier'> when 'true' ->
	      let <M> =
		  %% Line 1491
		  call 'erl_syntax':'module_qualifier_argument'
		      (_cor0)
	      in  %% Line 1492
		  case call 'erl_syntax':'type'
			   (M) of
		    %% Line 1493
		    <'atom'> when 'true' ->
			let <F> =
			    %% Line 1494
			    call 'erl_syntax':'module_qualifier_body'
				(_cor0)
			in  let <F1> =
				%% Line 1495
				apply 'analyze_function_name'/1
				    (F)
			    in  let <_cor9> =
				    %% Line 1496
				    call 'erl_syntax':'atom_value'
					(M)
				in  %% Line 1496
				    {_cor9,F1}
		    %% Line 1497
		    <_cor14> when 'true' ->
			%% Line 1498
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1500
	  <_cor15> when 'true' ->
	      %% Line 1501
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'append_arity'/2 =
    %% Line 1504
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,{Module,Name}> when 'true' ->
	      let <_cor2> =
		  %% Line 1505
		  apply 'append_arity'/2
		      (A, Name)
	      in  %% Line 1505
		  {Module,_cor2}
	  %% Line 1506
	  <A,Name>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 1507
	      {Name,A}
	  %% Line 1508
	  <A,_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     A) ->
	      %% Line 1509
	      A
	  %% Line 1510
	  <_X_A,Name> when 'true' ->
	      %% Line 1511
	      Name
	end
'analyze_import_attribute'/1 =
    %% Line 1538
    fun (_cor0) ->
	%% Line 1539
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1540
	  <'attribute'> when 'true' ->
	      %% Line 1541
	      case call 'erl_syntax':'attribute_arguments'
		       (_cor0) of
		%% Line 1542
		<[M|[]]> when 'true' ->
		    %% Line 1543
		    apply 'module_name_to_atom'/1
			(M)
		%% Line 1544
		<[M|[L|[]]]> when 'true' ->
		    let <M1> =
			%% Line 1545
			apply 'module_name_to_atom'/1
			    (M)
		    in  let <L1> =
			    %% Line 1546
			    apply 'analyze_function_name_list'/1
				(L)
			in  %% Line 1547
			    {M1,L1}
		%% Line 1548
		<_cor6> when 'true' ->
		    %% Line 1549
		    call 'erlang':'throw'
			('syntax_error')
	      end
	  %% Line 1551
	  <_cor7> when 'true' ->
	      %% Line 1552
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_wild_attribute'/1 =
    %% Line 1573
    fun (_cor0) ->
	%% Line 1574
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1575
	  <'attribute'> when 'true' ->
	      let <N> =
		  %% Line 1576
		  call 'erl_syntax':'attribute_name'
		      (_cor0)
	      in  %% Line 1577
		  case call 'erl_syntax':'type'
			   (N) of
		    %% Line 1578
		    <'atom'> when 'true' ->
			%% Line 1579
			case call 'erl_syntax':'attribute_arguments'
				 (_cor0) of
			  %% Line 1580
			  <[V|[]]> when 'true' ->
			      let <_cor3> =
				  catch
				      let <_cor2> =
					  %% Line 1581
					  call 'erl_syntax':'concrete'
					      (V)
				      in  %% Line 1581
					  {'ok',_cor2}
			      in  %% Line 1581
				  case _cor3 of
				    %% Line 1582
				    <{'ok',Val}> when 'true' ->
					let <_cor4> =
					    %% Line 1583
					    call 'erl_syntax':'atom_value'
						(N)
					in  %% Line 1583
					    {_cor4,Val}
				    %% Line 1584
				    <_cor10> when 'true' ->
					%% Line 1585
					call 'erlang':'throw'
					    ('syntax_error')
				  end
			  %% Line 1587
			  <_cor11> when 'true' ->
			      %% Line 1588
			      call 'erlang':'throw'
				  ('syntax_error')
			end
		    %% Line 1590
		    <_cor12> when 'true' ->
			%% Line 1591
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1593
	  <_cor13> when 'true' ->
	      %% Line 1594
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_record_attribute'/1 =
    %% Line 1625
    fun (_cor0) ->
	%% Line 1626
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1627
	  <'attribute'> when 'true' ->
	      %% Line 1628
	      case call 'erl_syntax':'attribute_arguments'
		       (_cor0) of
		%% Line 1629
		<[R|[T|[]]]> when 'true' ->
		    %% Line 1630
		    case call 'erl_syntax':'type'
			     (R) of
		      %% Line 1631
		      <'atom'> when 'true' ->
			  let <Es> =
			      %% Line 1632
			      apply 'analyze_record_attribute_tuple'/1
				  (T)
			  in  let <_cor2> =
				  %% Line 1633
				  call 'erl_syntax':'atom_value'
				      (R)
			      in  %% Line 1633
				  {_cor2,Es}
		      %% Line 1634
		      <_cor7> when 'true' ->
			  %% Line 1635
			  call 'erlang':'throw'
			      ('syntax_error')
		    end
		%% Line 1637
		<_cor8> when 'true' ->
		    %% Line 1638
		    call 'erlang':'throw'
			('syntax_error')
	      end
	  %% Line 1640
	  <_cor9> when 'true' ->
	      %% Line 1641
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_record_attribute_tuple'/1 =
    %% Line 1644
    fun (_cor0) ->
	%% Line 1645
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1646
	  <'tuple'> when 'true' ->
	      %% Line 1647
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[%% Line 1648
				F|_cor2]> when 'true' ->
				  let <_cor5> =
				      apply 'analyze_record_field'/1
					  (F)
				  in  let <_cor6> =
					  %% Line 1648
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor3> =
			%% Line 1648
			call 'erl_syntax':'tuple_elements'
			    (_cor0)
		    in  apply 'lc$^0'/1
			    (_cor3)
		-| ['list_comprehension'] )
	  %% Line 1649
	  <_cor9> when 'true' ->
	      %% Line 1650
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_record_expr'/1 =
    %% Line 1700
    fun (_cor0) ->
	%% Line 1701
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1702
	  <'record_expr'> when 'true' ->
	      let <A> =
		  %% Line 1703
		  call 'erl_syntax':'record_expr_type'
		      (_cor0)
	      in  %% Line 1704
		  case call 'erl_syntax':'type'
			   (A) of
		    %% Line 1705
		    <'atom'> when 'true' ->
			let <_cor8> =
			    %% Line 1706
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor5) ->
					  case _cor5 of
					    <[%% Line 1707
					      F|_cor3]> when 'true' ->
						let <_cor6> =
						    apply 'analyze_record_field'/1
							(F)
						in  let <_cor7> =
							%% Line 1707
							apply 'lc$^0'/1
							    (_cor3)
						    in  ( [_cor6|_cor7]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor5> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor5})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor4> =
				      %% Line 1707
				      call 'erl_syntax':'record_expr_fields'
					  (_cor0)
				  in  apply 'lc$^0'/1
					  (_cor4)
			      -| ['list_comprehension'] )
			in  let <_cor10> =
				%% Line 1708
				call 'erl_syntax':'atom_value'
				    (A)
			    in  %% Line 1708
				{'record_expr',{_cor10,_cor8}}
		    %% Line 1709
		    <_cor27> when 'true' ->
			%% Line 1710
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1712
	  <'record_access'> when 'true' ->
	      let <F> =
		  %% Line 1713
		  call 'erl_syntax':'record_access_field'
		      (_cor0)
	      in  %% Line 1714
		  case call 'erl_syntax':'type'
			   (F) of
		    %% Line 1715
		    <'atom'> when 'true' ->
			%% Line 1716
			case call 'erl_syntax':'record_access_type'
				 (_cor0) of
			  %% Line 1717
			  <'none'> when 'true' ->
			      let <_cor13> =
				  %% Line 1718
				  call 'erl_syntax':'atom_value'
				      (F)
			      in  %% Line 1718
				  {'record_access',_cor13}
			  %% Line 1719
			  <A> when 'true' ->
			      %% Line 1720
			      case call 'erl_syntax':'type'
				       (A) of
				%% Line 1721
				<'atom'> when 'true' ->
				    let <_cor15> =
					%% Line 1723
					call 'erl_syntax':'atom_value'
					    (A)
				    in  let <_cor14> =
					    %% Line 1724
					    call 'erl_syntax':'atom_value'
						(F)
					in  %% Line 1722
					    {'record_access',%% Line 1723
							     {_cor15,_cor14}}
				%% Line 1725
				<_cor28> when 'true' ->
				    %% Line 1726
				    call 'erlang':'throw'
					('syntax_error')
			      end
			end
		    %% Line 1729
		    <_cor29> when 'true' ->
			%% Line 1730
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1732
	  <'record_index_expr'> when 'true' ->
	      let <F> =
		  %% Line 1733
		  call 'erl_syntax':'record_index_expr_field'
		      (_cor0)
	      in  %% Line 1734
		  case call 'erl_syntax':'type'
			   (F) of
		    %% Line 1735
		    <'atom'> when 'true' ->
			let <A> =
			    %% Line 1736
			    call 'erl_syntax':'record_index_expr_type'
				(_cor0)
			in  %% Line 1737
			    case call 'erl_syntax':'type'
				     (A) of
			      %% Line 1738
			      <'atom'> when 'true' ->
				  let <_cor22> =
				      %% Line 1740
				      call 'erl_syntax':'atom_value'
					  (A)
				  in  let <_cor21> =
					  %% Line 1741
					  call 'erl_syntax':'atom_value'
					      (F)
				      in  %% Line 1739
					  {'record_index_expr',%% Line 1740
							       {_cor22,_cor21}}
			      %% Line 1742
			      <_cor30> when 'true' ->
				  %% Line 1743
				  call 'erlang':'throw'
				      ('syntax_error')
			    end
		    %% Line 1745
		    <_cor31> when 'true' ->
			%% Line 1746
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1748
	  <Type> when 'true' ->
	      %% Line 1749
	      Type
	end
'analyze_record_field'/1 =
    %% Line 1774
    fun (_cor0) ->
	%% Line 1775
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1776
	  <'record_field'> when 'true' ->
	      let <A> =
		  %% Line 1777
		  call 'erl_syntax':'record_field_name'
		      (_cor0)
	      in  %% Line 1778
		  case call 'erl_syntax':'type'
			   (A) of
		    %% Line 1779
		    <'atom'> when 'true' ->
			let <T> =
			    %% Line 1780
			    call 'erl_syntax':'record_field_value'
				(_cor0)
			in  let <_cor3> =
				%% Line 1781
				call 'erl_syntax':'atom_value'
				    (A)
			    in  %% Line 1781
				{_cor3,T}
		    %% Line 1782
		    <_cor7> when 'true' ->
			%% Line 1783
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1785
	  <_cor8> when 'true' ->
	      %% Line 1786
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_file_attribute'/1 =
    %% Line 1806
    fun (_cor0) ->
	%% Line 1807
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1808
	  <'attribute'> when 'true' ->
	      %% Line 1809
	      case call 'erl_syntax':'attribute_arguments'
		       (_cor0) of
		%% Line 1810
		<[F|[N|[]]]> when 'true' ->
		    let <_cor3> =
			%% Line 1811
			call 'erl_syntax':'type'
			    (F)
		    in  let <_cor4> =
			    %% Line 1811
			    call 'erlang':'=:='
				(_cor3, 'string')
			in  let <_cor1> =
				%% Line 1812
				call 'erl_syntax':'type'
				    (N)
			    in  let <_cor2> =
				    %% Line 1812
				    call 'erlang':'=:='
					(_cor1, 'integer')
				in  %% Line 1811
				    case %% Line 1812
					 call 'erlang':'and'
					     (_cor4, _cor2) of
				      %% Line 1813
				      <'true'> when 'true' ->
					  let <_cor6> =
					      %% Line 1814
					      call 'erl_syntax':'string_value'
						  (F)
					  in  let <_cor5> =
						  %% Line 1815
						  call 'erl_syntax':'integer_value'
						      (N)
					      in  %% Line 1814
						  {_cor6,_cor5}
				      %% Line 1816
				      <'false'> when 'true' ->
					  %% Line 1817
					  call 'erlang':'throw'
					      ('syntax_error')
				    end
		%% Line 1819
		<_cor11> when 'true' ->
		    %% Line 1820
		    call 'erlang':'throw'
			('syntax_error')
	      end
	  %% Line 1822
	  <_cor12> when 'true' ->
	      %% Line 1823
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_function'/1 =
    %% Line 1843
    fun (_cor0) ->
	%% Line 1844
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1845
	  <'function'> when 'true' ->
	      let <N> =
		  %% Line 1846
		  call 'erl_syntax':'function_name'
		      (_cor0)
	      in  %% Line 1847
		  case call 'erl_syntax':'type'
			   (N) of
		    %% Line 1848
		    <'atom'> when 'true' ->
			let <_cor3> =
			    %% Line 1849
			    call 'erl_syntax':'atom_value'
				(N)
			in  let <_cor2> =
				%% Line 1850
				call 'erl_syntax':'function_arity'
				    (_cor0)
			    in  %% Line 1849
				{_cor3,_cor2}
		    %% Line 1851
		    <_cor7> when 'true' ->
			%% Line 1852
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1854
	  <_cor8> when 'true' ->
	      %% Line 1855
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_rule'/1 =
    %% Line 1874
    fun (_cor0) ->
	%% Line 1875
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1876
	  <'rule'> when 'true' ->
	      let <N> =
		  %% Line 1877
		  call 'erl_syntax':'rule_name'
		      (_cor0)
	      in  %% Line 1878
		  case call 'erl_syntax':'type'
			   (N) of
		    %% Line 1879
		    <'atom'> when 'true' ->
			let <_cor3> =
			    %% Line 1880
			    call 'erl_syntax':'atom_value'
				(N)
			in  let <_cor2> =
				%% Line 1881
				call 'erl_syntax':'rule_arity'
				    (_cor0)
			    in  %% Line 1880
				{_cor3,_cor2}
		    %% Line 1882
		    <_cor7> when 'true' ->
			%% Line 1883
			call 'erlang':'throw'
			    ('syntax_error')
		  end
	  %% Line 1885
	  <_cor8> when 'true' ->
	      %% Line 1886
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_implicit_fun'/1 =
    %% Line 1908
    fun (_cor0) ->
	%% Line 1909
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1910
	  <'implicit_fun'> when 'true' ->
	      let <_cor1> =
		  %% Line 1911
		  call 'erl_syntax':'implicit_fun_name'
		      (_cor0)
	      in  %% Line 1911
		  apply 'analyze_function_name'/1
		      (_cor1)
	  %% Line 1912
	  <_cor4> when 'true' ->
	      %% Line 1913
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'analyze_application'/1 =
    %% Line 1941
    fun (_cor0) ->
	%% Line 1942
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 1943
	  <'application'> when 'true' ->
	      let <_cor1> =
		  %% Line 1944
		  call 'erl_syntax':'application_arguments'
		      (_cor0)
	      in  let <A> =
		      %% Line 1944
		      call 'erlang':'length'
			  (_cor1)
		  in  let <F> =
			  %% Line 1945
			  call 'erl_syntax':'application_operator'
			      (_cor0)
		      in  let <_cor5> =
			      catch
				  let <_cor4> =
				      %% Line 1946
				      apply 'analyze_function_name'/1
					  (F)
				  in  %% Line 1946
				      {'ok',_cor4}
			  in  %% Line 1946
			      case _cor5 of
				%% Line 1947
				<'syntax_error'> when 'true' ->
				    %% Line 1948
				    A
				%% Line 1949
				<{'ok',N}> when 'true' ->
				    %% Line 1950
				    apply 'append_arity'/2
					(A, N)
				%% Line 1951
				<_cor9> when 'true' ->
				    %% Line 1952
				    call 'erlang':'throw'
					('syntax_error')
			      end
	  %% Line 1954
	  <_cor10> when 'true' ->
	      %% Line 1955
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'function_name_expansions'/1 =
    %% Line 1986
    fun (_cor0) ->
	%% Line 1987
	apply 'function_name_expansions'/2
	    (_cor0, [])
'function_name_expansions'/2 =
    %% Line 1989
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[F|Fs],Ack> when 'true' ->
	      let <_cor2> =
		  %% Line 1991
		  apply 'function_name_expansions'/3
		      (F, F, Ack)
	      in  %% Line 1990
		  apply 'function_name_expansions'/2
		      (Fs, _cor2)
	  %% Line 1992
	  <[],Ack> when 'true' ->
	      %% Line 1993
	      Ack
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'function_name_expansions',2}}] )
	    -| ['compiler_generated'] )
	end
'function_name_expansions'/3 =
    %% Line 1995
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{A,N},Name,Ack>
	      when call 'erlang':'is_integer'
		    (N) ->
	      %% Line 1996
	      [{{A,N},Name}|Ack]
	  %% Line 1997
	  <{_cor6,N},Name,Ack> when 'true' ->
	      %% Line 1998
	      apply 'function_name_expansions'/3
		  (N, Name, Ack)
	  %% Line 1999
	  <A,Name,Ack> when 'true' ->
	      %% Line 2000
	      [{A,Name}|Ack]
	end
'strip_comments'/1 =
    %% Line 2013
    fun (_cor0) ->
	%% Line 2014
	apply 'map'/2
	    (( 'strip_comments_1'/1
	       -| [{'id',{0,0,'-strip_comments/1-fun-0-'}}] ), _cor0)
'strip_comments_1'/1 =
    %% Line 2016
    fun (_cor0) ->
	%% Line 2017
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 2018
	  <'form_list'> when 'true' ->
	      let <Es> =
		  %% Line 2019
		  call 'erl_syntax':'form_list_elements'
		      (_cor0)
	      in  let <_cor8> =
		      %% Line 2020
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[E|_cor3]> when 'true' ->
					  let <_cor4> =
					      call 'erl_syntax':'type'
						  (E)
					  in  ( case <> of
						  <>
						      when call 'erlang':'=/='
							    (_cor4,
							     'comment') ->
						      let <_cor6> =
							  apply 'lc$^0'/1
							      (_cor3)
						      in  ( [E|_cor6]
							    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							apply 'lc$^0'/1
							    (_cor3)
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Es)
			-| ['list_comprehension'] )
		  in  let <_cor10> =
			  %% Line 2021
			  call 'erl_syntax':'form_list'
			      (_cor8)
		      in  let <T1> =
			      %% Line 2021
			      call 'erl_syntax':'copy_attrs'
				  (_cor0, _cor10)
			  in  %% Line 2022
			      call 'erl_syntax':'remove_comments'
				  (T1)
	  %% Line 2023
	  <'comment'> when 'true' ->
	      %% Line 2024
	      call 'erl_syntax':'comment'
		  ([])
	  %% Line 2025
	  <_cor14> when 'true' ->
	      %% Line 2026
	      call 'erl_syntax':'remove_comments'
		  (_cor0)
	end
'to_comment'/1 =
    %% Line 2035
    fun (_cor0) ->
	%% Line 2036
	apply 'to_comment'/2
	    (_cor0, [37|[32]])
'to_comment'/2 =
    %% Line 2051
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 2052
	    ( fun (_cor2) ->
		  call 'erl_prettypr':'format'
		      (_cor2)
	      -| [{'id',{0,0,'-to_comment/2-fun-0-'}}] )
	in  %% Line 2053
	    apply 'to_comment'/3
		(_cor1, _cor0, F)
'to_comment'/3 =
    %% Line 2084
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2085
	    apply _cor0
		(_cor2)
	in  let <_cor4> =
		%% Line 2085
		apply 'split_lines'/2
		    (_cor3, _cor1)
	    in  %% Line 2085
		call 'erl_syntax':'comment'
		    (_cor4)
'limit'/2 =
    %% Line 2099
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2100
	    call 'erl_syntax':'text'
		([46|[46|[46]]])
	in  %% Line 2100
	    apply 'limit'/3
		(_cor1, _cor0, _cor2)
'limit'/3 =
    %% Line 2130
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Tree,Depth,Node>
	      when call 'erlang':'<'
		    (Depth,
		     0) ->
	      %% Line 2131
	      Node
	  %% Line 2132
	  <Tree,Depth,Node> when 'true' ->
	      %% Line 2133
	      apply 'limit_1'/3
		  (Tree, Depth, Node)
	end
'limit_1'/3 =
    %% Line 2135
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2137
	case call 'erl_syntax':'subtrees'
		 (_cor2) of
	  %% Line 2138
	  <[]> when 'true' ->
	      %% Line 2139
	      case <> of
		<>
		    when call 'erlang':'>'
			  (_cor1,
			   0) ->
		    _cor2
		%% Line 2141
		<> when 'true' ->
		    %% Line 2142
		    case apply 'is_simple_leaf'/1
			     (_cor2) of
		      %% Line 2143
		      <'true'> when 'true' ->
			  _cor2
		      %% Line 2145
		      <'false'> when 'true' ->
			  _cor0
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 2149
	  <Gs> when 'true' ->
	      %% Line 2150
	      case <> of
		<>
		    when call 'erlang':'>'
			  (_cor1,
			   1) ->
		    let <_cor16> =
			%% Line 2151
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[%% Line 2153
					  G|_cor5]> when 'true' ->
					    let <_cor14> =
						( letrec
						      'lc$^1'/1 =
							  fun (_cor10) ->
							      case _cor10 of
								<[%% Line 2152
								  T|_cor8]> when 'true' ->
								    let <_cor11> =
									call 'erlang':'-'
									    (_cor1, 1)
								    in  let <_cor12> =
									    apply 'limit_1'/3
										(T, _cor11, _cor0)
									in  let <_cor13> =
										%% Line 2152
										apply 'lc$^1'/1
										    (_cor8)
									    in  ( [_cor12|_cor13]
										  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor10> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor10})
									-| [{'function_name',{'lc$^1',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  let <_cor9> =
							  %% Line 2152
							  apply 'limit_list'/3
							      (G, _cor1, _cor0)
						      in  apply 'lc$^1'/1
							      (_cor9)
						  -| ['list_comprehension'] )
					    in  let <_cor15> =
						    %% Line 2153
						    apply 'lc$^0'/1
							(_cor5)
						in  ( [_cor14|_cor15]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (%% Line 2153
				   Gs)
			  -| ['list_comprehension'] )
		    in  let <_cor18> =
			    %% Line 2155
			    call 'erl_syntax':'type'
				(_cor2)
			in  let <_cor19> =
				%% Line 2155
				call 'erl_syntax':'make_tree'
				    (_cor18, _cor16)
			    in  %% Line 2154
				apply 'rewrite'/2
				    (_cor2, _cor19)
		%% Line 2157
		<>
		    when call 'erlang':'=:='
			  (_cor1,
			   0) ->
		    _cor0
		%% Line 2161
		<> when 'true' ->
		    let <_cor25> =
			%% Line 2164
			( letrec
			      'lc$^2'/1 =
				  fun (_cor22) ->
				      case _cor22 of
					<[G|_cor21]> when 'true' ->
					    let <_cor23> =
						apply 'cut_group'/2
						    (G, _cor0)
					    in  let <_cor24> =
						    apply 'lc$^2'/1
							(_cor21)
						in  ( [_cor23|_cor24]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor22> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor22})
						-| [{'function_name',{'lc$^2',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^2'/1
				  (Gs)
			  -| ['list_comprehension'] )
		    in  let <_cor27> =
			    %% Line 2166
			    call 'erl_syntax':'type'
				(_cor2)
			in  let <_cor28> =
				%% Line 2166
				call 'erl_syntax':'make_tree'
				    (_cor27, _cor25)
			    in  %% Line 2165
				apply 'rewrite'/2
				    (_cor2, _cor28)
	      end
	end
'cut_group'/2 =
    %% Line 2171
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Node> when 'true' ->
	      %% Line 2172
	      []
	  %% Line 2173
	  <[T|[]],Node> when 'true' ->
	      let <_cor2> =
		  %% Line 2176
		  apply 'limit_1'/3
		      (T, 0, Node)
	      in  %% Line 2176
		  [_cor2|[]]
	  %% Line 2177
	  <_X_Ts,Node> when 'true' ->
	      %% Line 2178
	      [Node|[]]
	end
'is_simple_leaf'/1 =
    %% Line 2180
    fun (_cor0) ->
	%% Line 2181
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 2182
	  <'atom'> when 'true' ->
	      'true'
	  %% Line 2183
	  <'char'> when 'true' ->
	      'true'
	  %% Line 2184
	  <'float'> when 'true' ->
	      'true'
	  %% Line 2185
	  <'integer'> when 'true' ->
	      'true'
	  %% Line 2186
	  <'nil'> when 'true' ->
	      'true'
	  %% Line 2187
	  <'operator'> when 'true' ->
	      'true'
	  %% Line 2188
	  <'tuple'> when 'true' ->
	      'true'
	  %% Line 2189
	  <'underscore'> when 'true' ->
	      'true'
	  %% Line 2190
	  <'variable'> when 'true' ->
	      'true'
	  %% Line 2191
	  <_cor3> when 'true' ->
	      'false'
	end
'limit_list'/3 =
    %% Line 2197
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2198
	case <> of
	  <>
	      when try
		    let <_cor3> =
			call 'erlang':'length'
			    (_cor2)
		    in  call 'erlang':'>'
			    (_cor3, _cor1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  %% Line 2199
		  call 'erlang':'-'
		      (_cor1, 1)
	      in  %% Line 2199
		  apply 'limit_list_1'/3
		      (_cor2, _cor4, _cor0)
	  %% Line 2200
	  <> when 'true' ->
	      _cor2
	end
'limit_list_1'/3 =
    %% Line 2204
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T|Ts],N,Node> when 'true' ->
	      %% Line 2205
	      case <> of
		<>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    let <_cor3> =
			%% Line 2206
			call 'erlang':'-'
			    (N, 1)
		    in  let <_cor4> =
			    %% Line 2206
			    apply 'limit_list_1'/3
				(Ts, _cor3, Node)
			in  %% Line 2206
			    [T|_cor4]
		%% Line 2207
		<> when 'true' ->
		    %% Line 2208
		    [Node|[]]
	      end
	  %% Line 2210
	  <[],_X_N,_X_Node> when 'true' ->
	      %% Line 2211
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'limit_list_1',3}}] )
	    -| ['compiler_generated'] )
	end
'rewrite'/2 =
    %% Line 2217
    fun (_cor1,_cor0) ->
	%% Line 2218
	call 'erl_syntax':'copy_attrs'
	    (_cor1, _cor0)
'module_name_to_atom'/1 =
    %% Line 2220
    fun (_cor0) ->
	%% Line 2221
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 2222
	  <'atom'> when 'true' ->
	      %% Line 2223
	      call 'erl_syntax':'atom_value'
		  (_cor0)
	  %% Line 2224
	  <_cor3> when 'true' ->
	      %% Line 2225
	      call 'erlang':'throw'
		  ('syntax_error')
	end
'split_lines'/2 =
    %% Line 2234
    fun (_cor1,_cor0) ->
	%% Line 2235
	apply 'split_lines'/3
	    (_cor1, _cor0, 0)
'split_lines'/3 =
    %% Line 2237
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2238
	    apply 'split_lines'/5
		(_cor2, _cor0, [], [], _cor1)
	in  %% Line 2238
	    call 'lists':'reverse'
		(_cor3)
'split_lines'/5 =
    %% Line 2240
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[13|[10|Cs]],_X_N,Cs1,Ls,Prefix> when 'true' ->
	      %% Line 2241
	      apply 'split_lines_1'/4
		  (Cs, Cs1, Ls, Prefix)
	  %% Line 2242
	  <[13|Cs],_X_N,Cs1,Ls,Prefix> when 'true' ->
	      %% Line 2243
	      apply 'split_lines_1'/4
		  (Cs, Cs1, Ls, Prefix)
	  %% Line 2244
	  <[10|Cs],_X_N,Cs1,Ls,Prefix> when 'true' ->
	      %% Line 2245
	      apply 'split_lines_1'/4
		  (Cs, Cs1, Ls, Prefix)
	  %% Line 2246
	  <[9|Cs],N,Cs1,Ls,Prefix> when 'true' ->
	      let <_cor5> =
		  %% Line 2247
		  call 'erlang':'rem'
		      (N, 8)
	      in  let <_cor6> =
		      %% Line 2247
		      call 'erlang':'-'
			  (8, _cor5)
		  in  let <_cor7> =
			  %% Line 2247
			  apply 'push'/3
			      (_cor6, 32, Cs1)
		      in  %% Line 2247
			  apply 'split_lines'/5
			      (Cs, 0, _cor7, Ls, %% Line 2248
						 Prefix)
	  %% Line 2249
	  <[C|Cs],N,Cs1,Ls,Prefix> when 'true' ->
	      let <_cor8> =
		  %% Line 2250
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 2250
		  apply 'split_lines'/5
		      (Cs, _cor8, [C|Cs1], Ls, Prefix)
	  %% Line 2251
	  <[],_cor16,[],Ls,_cor17> when 'true' ->
	      %% Line 2252
	      Ls
	  %% Line 2253
	  <[],_X_N,Cs,Ls,Prefix> when 'true' ->
	      let <_cor9> =
		  %% Line 2254
		  call 'lists':'reverse'
		      (Cs)
	      in  let <_cor10> =
		      %% Line 2254
		      call 'erlang':'++'
			  (Prefix, _cor9)
		  in  %% Line 2254
		      [_cor10|Ls]
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'split_lines',5}}] )
	    -| ['compiler_generated'] )
	end
'split_lines_1'/4 =
    %% Line 2256
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2257
	    call 'lists':'reverse'
		(_cor2)
	in  let <_cor5> =
		%% Line 2257
		call 'erlang':'++'
		    (_cor0, _cor4)
	    in  %% Line 2257
		apply 'split_lines'/5
		    (_cor3, 0, [], [_cor5|_cor1], _cor0)
'push'/3 =
    %% Line 2260
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,C,Cs>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor3> =
		  %% Line 2261
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 2261
		  apply 'push'/3
		      (_cor3, C, [C|Cs])
	  %% Line 2262
	  <0,_cor7,Cs> when 'true' ->
	      %% Line 2263
	      Cs
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'push',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_syntax_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_syntax_lib', _cor0)
end