module 'epp_dodger' ['format_error'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'parse'/1,
		     'parse'/2,
		     'parse'/3,
		     'parse_file'/1,
		     'parse_file'/2,
		     'parse_form'/2,
		     'parse_form'/3,
		     'quick_parse'/1,
		     'quick_parse'/2,
		     'quick_parse'/3,
		     'quick_parse_file'/1,
		     'quick_parse_file'/2,
		     'quick_parse_form'/2,
		     'quick_parse_form'/3,
		     'tokens_to_string'/1]
    attributes [%% Line 91
		'type' =
		    %% Line 91
		    [{'errorinfo',{'type',91,'term',[]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{'option',{'type',93,'union',[{'type',93,'atom',[]}|[{'type',93,'tuple',[{'type',93,'atom',[]}|[{'type',93,'term',[]}]]}]]},[]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'parse_file',1},[{'type',102,'fun',[{'type',102,'product',[{'remote_type',102,[{'atom',102,'file'}|[{'atom',102,'filename'}|[[]]]]}]}|[{'type',103,'union',[{'type',103,'tuple',[{'atom',103,'ok'}|[{'remote_type',103,[{'atom',103,'erl_syntax'}|[{'atom',103,'forms'}|[[]]]]}]]}|[{'type',103,'tuple',[{'atom',103,'error'}|[{'type',103,'errorinfo',[]}]]}]]}]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'parse_file',2},[{'type',142,'fun',[{'type',142,'product',[{'remote_type',142,[{'atom',142,'file'}|[{'atom',142,'filename'}|[[]]]]}|[{'type',142,'list',[{'type',142,'option',[]}]}]]}|[{'type',143,'union',[{'type',143,'tuple',[{'atom',143,'ok'}|[{'remote_type',143,[{'atom',143,'erl_syntax'}|[{'atom',143,'forms'}|[[]]]]}]]}|[{'type',143,'tuple',[{'atom',143,'error'}|[{'type',143,'errorinfo',[]}]]}]]}]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'quick_parse_file',1},[{'type',154,'fun',[{'type',154,'product',[{'remote_type',154,[{'atom',154,'file'}|[{'atom',154,'filename'}|[[]]]]}]}|[{'type',155,'union',[{'type',155,'tuple',[{'atom',155,'ok'}|[{'remote_type',155,[{'atom',155,'erl_syntax'}|[{'atom',155,'forms'}|[[]]]]}]]}|[{'type',155,'tuple',[{'atom',155,'error'}|[{'type',155,'errorinfo',[]}]]}]]}]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'quick_parse_file',2},[{'type',180,'fun',[{'type',180,'product',[{'remote_type',180,[{'atom',180,'file'}|[{'atom',180,'filename'}|[[]]]]}|[{'type',180,'list',[{'type',180,'option',[]}]}]]}|[{'type',181,'union',[{'type',181,'tuple',[{'atom',181,'ok'}|[{'remote_type',181,[{'atom',181,'erl_syntax'}|[{'atom',181,'forms'}|[[]]]]}]]}|[{'type',181,'tuple',[{'atom',181,'error'}|[{'type',181,'errorinfo',[]}]]}]]}]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'parse',1},[{'type',228,'fun',[{'type',228,'product',[{'remote_type',228,[{'atom',228,'file'}|[{'atom',228,'io_device'}|[[]]]]}]}|[{'type',228,'tuple',[{'atom',228,'ok'}|[{'remote_type',228,[{'atom',228,'erl_syntax'}|[{'atom',228,'forms'}|[[]]]]}]]}]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'parse',2},[{'type',241,'fun',[{'type',241,'product',[{'remote_type',241,[{'atom',241,'file'}|[{'atom',241,'io_device'}|[[]]]]}|[{'type',241,'integer',[]}]]}|[{'type',241,'tuple',[{'atom',241,'ok'}|[{'remote_type',241,[{'atom',241,'erl_syntax'}|[{'atom',241,'forms'}|[[]]]]}]]}]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'parse',3},[{'type',263,'fun',[{'type',263,'product',[{'remote_type',263,[{'atom',263,'file'}|[{'atom',263,'io_device'}|[[]]]]}|[{'type',263,'integer',[]}|[{'type',263,'list',[{'type',263,'option',[]}]}]]]}|[{'type',264,'tuple',[{'atom',264,'ok'}|[{'remote_type',264,[{'atom',264,'erl_syntax'}|[{'atom',264,'forms'}|[[]]]]}]]}]]}]}],
		%% Line 272
		'spec' =
		    %% Line 272
		    [{{'quick_parse',1},[{'type',272,'fun',[{'type',272,'product',[{'remote_type',272,[{'atom',272,'file'}|[{'atom',272,'io_device'}|[[]]]]}]}|[{'type',273,'tuple',[{'atom',273,'ok'}|[{'remote_type',273,[{'atom',273,'erl_syntax'}|[{'atom',273,'forms'}|[[]]]]}]]}]]}]}],
		%% Line 287
		'spec' =
		    %% Line 287
		    [{{'quick_parse',2},[{'type',287,'fun',[{'type',287,'product',[{'remote_type',287,[{'atom',287,'file'}|[{'atom',287,'io_device'}|[[]]]]}|[{'type',287,'integer',[]}]]}|[{'type',288,'tuple',[{'atom',288,'ok'}|[{'remote_type',288,[{'atom',288,'erl_syntax'}|[{'atom',288,'forms'}|[[]]]]}]]}]]}]}],
		%% Line 308
		'spec' =
		    %% Line 308
		    [{{'quick_parse',3},[{'type',308,'fun',[{'type',308,'product',[{'remote_type',308,[{'atom',308,'file'}|[{'atom',308,'io_device'}|[[]]]]}|[{'type',308,'integer',[]}|[{'type',308,'list',[{'type',308,'option',[]}]}]]]}|[{'type',309,'tuple',[{'atom',309,'ok'}|[{'remote_type',309,[{'atom',309,'erl_syntax'}|[{'atom',309,'forms'}|[[]]]]}]]}]]}]}],
		%% Line 343
		'spec' =
		    %% Line 343
		    [{{'parse_form',2},[{'type',343,'fun',[{'type',343,'product',[{'remote_type',343,[{'atom',343,'file'}|[{'atom',343,'io_device'}|[[]]]]}|[{'type',343,'integer',[]}]]}|[{'type',344,'union',[{'type',344,'tuple',[{'atom',344,'ok'}|[{'remote_type',344,[{'atom',344,'erl_syntax'}|[{'atom',344,'forms'}|[[]]]]}|[{'type',344,'integer',[]}]]]}|[{'type',345,'tuple',[{'atom',345,'eof'}|[{'type',345,'integer',[]}]]}|[{'type',345,'tuple',[{'atom',345,'error'}|[{'type',345,'errorinfo',[]}|[{'type',345,'integer',[]}]]]}]]]}]]}]}],
		%% Line 373
		'spec' =
		    %% Line 373
		    [{{'parse_form',3},[{'type',373,'fun',[{'type',373,'product',[{'remote_type',373,[{'atom',373,'file'}|[{'atom',373,'io_device'}|[[]]]]}|[{'type',373,'integer',[]}|[{'type',373,'list',[{'type',373,'option',[]}]}]]]}|[{'type',374,'union',[{'type',374,'tuple',[{'atom',374,'ok'}|[{'remote_type',374,[{'atom',374,'erl_syntax'}|[{'atom',374,'forms'}|[[]]]]}|[{'type',374,'integer',[]}]]]}|[{'type',375,'tuple',[{'atom',375,'eof'}|[{'type',375,'integer',[]}]]}|[{'type',375,'tuple',[{'atom',375,'error'}|[{'type',375,'errorinfo',[]}|[{'type',375,'integer',[]}]]]}]]]}]]}]}],
		%% Line 393
		'spec' =
		    %% Line 393
		    [{{'quick_parse_form',2},[{'type',393,'fun',[{'type',393,'product',[{'remote_type',393,[{'atom',393,'file'}|[{'atom',393,'io_device'}|[[]]]]}|[{'type',393,'integer',[]}]]}|[{'type',394,'union',[{'type',394,'tuple',[{'atom',394,'ok'}|[{'remote_type',394,[{'atom',394,'erl_syntax'}|[{'atom',394,'forms'}|[[]]]]}|[{'type',394,'integer',[]}]]]}|[{'type',395,'tuple',[{'atom',395,'eof'}|[{'type',395,'integer',[]}]]}|[{'type',395,'tuple',[{'atom',395,'error'}|[{'type',395,'errorinfo',[]}|[{'type',395,'integer',[]}]]]}]]]}]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'quick_parse_form',3},[{'type',418,'fun',[{'type',418,'product',[{'remote_type',418,[{'atom',418,'file'}|[{'atom',418,'io_device'}|[[]]]]}|[{'type',418,'integer',[]}|[{'type',418,'list',[{'type',418,'option',[]}]}]]]}|[{'type',419,'union',[{'type',419,'tuple',[{'atom',419,'ok'}|[{'remote_type',419,[{'atom',419,'erl_syntax'}|[{'atom',419,'forms'}|[[]]]]}|[{'type',419,'integer',[]}]]]}|[{'type',420,'tuple',[{'atom',420,'eof'}|[{'type',420,'integer',[]}]]}|[{'type',420,'tuple',[{'atom',420,'error'}|[{'type',420,'errorinfo',[]}|[{'type',420,'integer',[]}]]]}]]]}]]}]}],
		%% Line 425
		'type' =
		    %% Line 425
		    [{{'record','opt'},[{'typed_record_field',{'record_field',425,{'atom',425,'clever'},{'atom',425,'false'}},{'type',425,'boolean',[]}}],[]}],
		%% Line 832
		'spec' =
		    %% Line 832
		    [{{'tokens_to_string',1},[{'type',832,'fun',[{'type',832,'product',[{'type',832,'list',[{'type',832,'term',[]}]}]}|[{'type',832,'string',[]}]]}]}],
		%% Line 859
		'spec' =
		    %% Line 859
		    [{{'format_error',1},[{'type',859,'fun',[{'type',859,'product',[{'type',859,'term',[]}]}|[{'type',859,'string',[]}]]}]}]]
'parse_file'/1 =
    %% Line 105
    fun (_cor0) ->
	%% Line 106
	apply 'parse_file'/2
	    (_cor0, [])
'parse_file'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	%% Line 146
	apply 'parse_file'/3
	    (_cor1, ( 'parse'/3
		      -| [{'id',{0,0,'-parse_file/2-fun-0-'}}] ), _cor0)
'quick_parse_file'/1 =
    %% Line 157
    fun (_cor0) ->
	%% Line 158
	apply 'quick_parse_file'/2
	    (_cor0, [])
'quick_parse_file'/2 =
    %% Line 183
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 184
	    call 'erlang':'++'
		(_cor0, ['no_fail'])
	in  %% Line 184
	    apply 'parse_file'/3
		(_cor1, ( 'quick_parse'/3
			  -| [{'id',{0,0,'-quick_parse_file/2-fun-0-'}}] ), _cor2)
'parse_file'/3 =
    %% Line 186
    fun (_cor2,_cor1,_cor0) ->
	%% Line 187
	case apply 'do_parse_file'/4
		 ('utf8', _cor2, _cor1, _cor0) of
	  %% Line 188
	  <Ret = {'ok',Forms}> when 'true' ->
	      %% Line 189
	      case apply 'find_invalid_unicode'/1
		       (Forms) of
		%% Line 190
		<'none'> when 'true' ->
		    %% Line 191
		    Ret
		%% Line 192
		<'invalid_unicode'> when 'true' ->
		    %% Line 193
		    case call 'epp':'read_encoding'
			     (_cor2) of
		      %% Line 194
		      <'utf8'> when 'true' ->
			  %% Line 195
			  Ret
		      %% Line 196
		      <_cor9> when 'true' ->
			  %% Line 197
			  apply 'do_parse_file'/4
			      ('latin1', _cor2, _cor1, _cor0)
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 200
	  <Else> when 'true' ->
	      %% Line 201
	      Else
	end
'do_parse_file'/4 =
    %% Line 204
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 205
	case call 'file':'open'
		 (_cor2, ['read']) of
	  %% Line 206
	  <{'ok',Dev}> when 'true' ->
	      let <_X_> =
		  %% Line 207
		  ( call 'epp':'set_encoding'
			(Dev, _cor3)
		    -| ['result_not_wanted'] )
	      in  %% Line 208
		  letrec
		      'after$^0'/0 =
			  fun () ->
			      let <_cor15> =
				  %% Line 209
				  call 'file':'close'
				      (Dev)
			      in  %% Line 209
				  case _cor15 of
				    <'ok'> when 'true' ->
					( _cor15
					  -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
		  in  try
			  apply _cor1
			      (Dev, 1, _cor0)
		      of <_cor6> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      _cor6
		      catch <_cor9,_cor8,_cor7> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      primop 'raise'
				  (_cor7, _cor8)
	  %% Line 211
	  <Error = {'error',_cor16}> when 'true' ->
	      %% Line 212
	      Error
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'find_invalid_unicode'/1 =
    %% Line 215
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      %% Line 216
	      case H of
		%% Line 217
		<{'error',{_X_Line,'file_io_server','invalid_unicode'}}> when 'true' ->
		    %% Line 218
		    'invalid_unicode'
		%% Line 219
		<_X_Other> when 'true' ->
		    %% Line 220
		    apply 'find_invalid_unicode'/1
			(T)
	      end
	  %% Line 222
	  <[]> when 'true' ->
	      'none'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'find_invalid_unicode',1}}] )
	    -| ['compiler_generated'] )
	end
'parse'/1 =
    %% Line 230
    fun (_cor0) ->
	%% Line 231
	apply 'parse'/2
	    (_cor0, 1)
'parse'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	%% Line 244
	apply 'parse'/3
	    (_cor1, _cor0, [])
'parse'/3 =
    %% Line 266
    fun (_cor2,_cor1,_cor0) ->
	%% Line 267
	apply 'parse'/4
	    (_cor2, _cor1, ( 'parse_form'/3
			     -| [{'id',{0,0,'-parse/3-fun-0-'}}] ), _cor0)
'quick_parse'/1 =
    %% Line 275
    fun (_cor0) ->
	%% Line 276
	apply 'quick_parse'/2
	    (_cor0, 1)
'quick_parse'/2 =
    %% Line 290
    fun (_cor1,_cor0) ->
	%% Line 291
	apply 'quick_parse'/3
	    (_cor1, _cor0, [])
'quick_parse'/3 =
    %% Line 311
    fun (_cor2,_cor1,_cor0) ->
	%% Line 312
	apply 'parse'/4
	    (_cor2, _cor1, ( 'quick_parse_form'/3
			     -| [{'id',{0,0,'-quick_parse/3-fun-0-'}}] ), _cor0)
'parse'/4 =
    %% Line 314
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 315
	apply 'parse'/5
	    (_cor3, _cor2, [], _cor1, _cor0)
'parse'/5 =
    %% Line 317
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 318
	case apply _cor1
		 (_cor4, _cor3, _cor0) of
	  %% Line 319
	  <{'ok','none',L1}> when 'true' ->
	      %% Line 320
	      apply 'parse'/5
		  (_cor4, L1, _cor2, _cor1, _cor0)
	  %% Line 321
	  <{'ok',F,L1}> when 'true' ->
	      %% Line 322
	      apply 'parse'/5
		  (_cor4, L1, [F|_cor2], _cor1, _cor0)
	  %% Line 323
	  <{'error',IoErr,L1}> when 'true' ->
	      %% Line 324
	      apply 'parse'/5
		  (_cor4, L1, [{'error',IoErr}|_cor2], _cor1, _cor0)
	  %% Line 325
	  <{'eof',_X_L1}> when 'true' ->
	      let <_cor5> =
		  %% Line 326
		  call 'lists':'reverse'
		      (_cor2)
	      in  %% Line 326
		  {'ok',_cor5}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'parse_form'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	%% Line 348
	apply 'parse_form'/3
	    (_cor1, _cor0, [])
'parse_form'/3 =
    %% Line 377
    fun (_cor2,_cor1,_cor0) ->
	%% Line 378
	apply 'parse_form'/4
	    (_cor2, _cor1, ( 'normal_parser'/2
			     -| [{'id',{0,0,'-parse_form/3-fun-0-'}}] ), _cor0)
'quick_parse_form'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	%% Line 398
	apply 'quick_parse_form'/3
	    (_cor1, _cor0, [])
'quick_parse_form'/3 =
    %% Line 422
    fun (_cor2,_cor1,_cor0) ->
	%% Line 423
	apply 'parse_form'/4
	    (_cor2, _cor1, ( 'quick_parser'/2
			     -| [{'id',{0,0,'-quick_parse_form/3-fun-0-'}}] ), _cor0)
'parse_form'/4 =
    %% Line 427
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <NoFail> =
	    %% Line 428
	    call 'proplists':'get_bool'
		('no_fail', _cor0)
	in  let <_cor5> =
		%% Line 429
		call 'proplists':'get_bool'
		    ('clever', _cor0)
	    in  let <Opt> = {%% Line 429
		     'opt',_cor5}
		in  %% Line 430
		    case call 'io':'scan_erl_form'
			     (_cor3, [], _cor2) of
		      %% Line 431
		      <{'ok',Ts,L1}> when 'true' ->
			  let <_cor8> =
			      catch
				  let <_cor7> =
				      %% Line 432
				      apply _cor1
					  (Ts, Opt)
				  in  %% Line 432
				      {'ok',_cor7}
			  in  %% Line 432
			      case _cor8 of
				%% Line 433
				<{'EXIT',Term}> when 'true' ->
				    let <_cor9> =
					%% Line 434
					apply 'io_error'/2
					    (L1, {'unknown',Term})
				    in  %% Line 434
					{'error',_cor9,L1}
				%% Line 435
				<{'error',Term}> when 'true' ->
				    let <IoErr> =
					%% Line 436
					apply 'io_error'/2
					    (L1, Term)
				    in  %% Line 437
					{'error',IoErr,L1}
				%% Line 438
				<{'parse_error',_X_IoErr}>
				    when call 'erlang':'=:='
					  (NoFail,
					   'true') ->
				    let <_cor12> =
					%% Line 440
					apply 'tokens_to_string'/1
					    (Ts)
				    in  let <_cor13> =
					    %% Line 440
					    call 'erl_syntax':'text'
						(_cor12)
					in  let <_cor11> =
						%% Line 441
						apply 'start_pos'/2
						    (Ts, L1)
					    in  let <_cor14> =
						    %% Line 439
						    call 'erl_syntax':'set_pos'
							(_cor13, _cor11)
						in  %% Line 439
						    {'ok',_cor14,%% Line 442
								 L1}
				%% Line 443
				<{'parse_error',IoErr}> when 'true' ->
				    %% Line 444
				    {'error',IoErr,L1}
				%% Line 445
				<{'ok',F}> when 'true' ->
				    %% Line 446
				    {'ok',F,L1}
				( <_cor15> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor15})
				  -| ['compiler_generated'] )
			      end
		      %% Line 448
		      <Err = {'error',_X_IoErr,_X_L1}> when 'true' ->
			  Err
		      %% Line 449
		      <{'error',_X_Reason}> when 'true' ->
			  {'eof',_cor2}
		      %% Line 450
		      <Eof = {'eof',_X_L1}> when 'true' ->
			  Eof
		      ( <_cor16> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor16})
			-| ['compiler_generated'] )
		    end
'io_error'/2 =
    %% Line 453
    fun (_cor1,_cor0) ->
	%% Line 454
	{_cor1,'epp_dodger',_cor0}
'start_pos'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|_X_Ts],_X_L> when 'true' ->
	      %% Line 457
	      call 'erlang':'element'
		  (2, T)
	  %% Line 458
	  <[],L> when 'true' ->
	      %% Line 459
	      L
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'start_pos',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_tokens'/1 =
    %% Line 463
    fun (_cor0) ->
	%% Line 464
	apply 'parse_tokens'/2
	    (_cor0, ( 'fix_form'/1
		      -| [{'id',{0,0,'-parse_tokens/1-fun-0-'}}] ))
'parse_tokens'/2 =
    %% Line 466
    fun (_cor1,_cor0) ->
	%% Line 467
	case call 'erl_parse':'parse_form'
		 (_cor1) of
	  %% Line 468
	  <{'ok',Form}> when 'true' ->
	      %% Line 469
	      Form
	  %% Line 470
	  <{'error',IoErr}> when 'true' ->
	      %% Line 471
	      case apply _cor0
		       (_cor1) of
		%% Line 472
		<{'form',Form}> when 'true' ->
		    %% Line 473
		    Form
		%% Line 474
		<{'retry',Ts1,Fix1}> when 'true' ->
		    %% Line 475
		    apply 'parse_tokens'/2
			(Ts1, Fix1)
		%% Line 476
		<'error'> when 'true' ->
		    %% Line 477
		    call 'erlang':'throw'
			({'parse_error',IoErr})
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'quick_parser'/2 =
    %% Line 485
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 486
	    apply 'quickscan_form'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 486
		apply 'parse_tokens'/1
		    (_cor2)
	    in  %% Line 486
		apply 'filter_form'/1
		    (_cor3)
'quickscan_form'/1 =
    %% Line 488
    fun (_cor0) ->
	case _cor0 of
	  <[{'-',_X_L}|[{'atom',La,'define'}|_X_Ts]]> when 'true' ->
	      %% Line 489
	      apply 'kill_form'/1
		  (La)
	  %% Line 490
	  <[{'-',_X_L}|[{'atom',La,'undef'}|_X_Ts]]> when 'true' ->
	      %% Line 491
	      apply 'kill_form'/1
		  (La)
	  %% Line 492
	  <[{'-',_X_L}|[{'atom',La,'include'}|_X_Ts]]> when 'true' ->
	      %% Line 493
	      apply 'kill_form'/1
		  (La)
	  %% Line 494
	  <[{'-',_X_L}|[{'atom',La,'include_lib'}|_X_Ts]]> when 'true' ->
	      %% Line 495
	      apply 'kill_form'/1
		  (La)
	  %% Line 496
	  <[{'-',_X_L}|[{'atom',La,'ifdef'}|_X_Ts]]> when 'true' ->
	      %% Line 497
	      apply 'kill_form'/1
		  (La)
	  %% Line 498
	  <[{'-',_X_L}|[{'atom',La,'ifndef'}|_X_Ts]]> when 'true' ->
	      %% Line 499
	      apply 'kill_form'/1
		  (La)
	  %% Line 500
	  <[{'-',_X_L}|[{'atom',La,'else'}|_X_Ts]]> when 'true' ->
	      %% Line 501
	      apply 'kill_form'/1
		  (La)
	  %% Line 502
	  <[{'-',_X_L}|[{'atom',La,'endif'}|_X_Ts]]> when 'true' ->
	      %% Line 503
	      apply 'kill_form'/1
		  (La)
	  %% Line 504
	  <[{'-',L}|[{'?',_cor6}|[N = {Type,_cor7,_cor8}|Ts = [{'(',_cor9}|_cor10]]]]>
	      when let <_cor1> =
		    %% Line 505
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor2> =
			%% Line 505
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 505
			call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 508
	      apply 'quickscan_macros_1'/3
		  (N, Ts, [{'-',L}|[]])
	  %% Line 509
	  <[{'?',_X_L}|[N = {Type,_cor11,_cor12}|Ts = [{'(',_cor13}|_cor14]]]>
	      when let <_cor3> =
		    %% Line 510
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor4> =
			%% Line 510
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 510
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 513
	      apply 'quickscan_macros_1'/3
		  (N, Ts, [])
	  %% Line 514
	  <Ts> when 'true' ->
	      %% Line 515
	      apply 'quickscan_macros'/1
		  (Ts)
	end
'kill_form'/1 =
    %% Line 517
    fun (_cor0) ->
	%% Line 518
	[{'atom',_cor0,'?preprocessor declaration?'}|[{'(',_cor0}|[{')',_cor0}|[{'->',_cor0}|[{'atom',_cor0,'kill'}|%% Line 519
														    [{'dot',_cor0}|[]]]]]]]
'quickscan_macros'/1 =
    %% Line 521
    fun (_cor0) ->
	%% Line 522
	apply 'quickscan_macros'/2
	    (_cor0, [])
'quickscan_macros'/2 =
    %% Line 524
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'?',_cor17}|[{Type,_cor18,A}|Ts]],[{'string',L,S}|As]>
	      when let <_cor2> =
		    %% Line 525
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor3> =
			%% Line 525
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 525
			call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 527
	      case apply 'skip_macro_args'/1
		       (Ts) of
		<{_cor19,Ts1}> when 'true' ->
		    let <_cor5> =
			%% Line 528
			apply 'quick_macro_string'/1
			    (A)
		    in  let <S1> =
			    %% Line 528
			    call 'erlang':'++'
				(S, _cor5)
			in  %% Line 529
			    apply 'quickscan_macros'/2
				(Ts1, [{'string',L,S1}|As])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 530
	  <[{'?',_cor20}|[N = {Type,_cor21,_cor22}|Ts = [{'(',_cor23}|_cor24]]],As = %% Line 531
										     [{':',_cor25}|_cor26]>
	      when let <_cor7> =
		    %% Line 532
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor8> =
			%% Line 532
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 532
			call 'erlang':'or'
			    (_cor7, _cor8) ->
	      let <_cor10> =
		  %% Line 535
		  case apply 'skip_macro_args'/1
			   (Ts) of
		    %% Line 536
		    <{_cor27,Ts2 = [{'->',_cor28}|_cor29]}> when 'true' ->
			Ts2
		    %% Line 537
		    <{_cor30,Ts2 = [{'when',_cor31}|_cor32]}> when 'true' ->
			Ts2
		    %% Line 538
		    <_cor33> when 'true' ->
			Ts
		  end
	      in  %% Line 540
		  apply 'quickscan_macros_1'/3
		      (N, _cor10, As)
	  %% Line 541
	  <[{'?',_cor34}|[N = {Type,_cor35,_cor36}|Ts]],As>
	      when let <_cor12> =
		    %% Line 542
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor13> =
			%% Line 542
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 542
			call 'erlang':'or'
			    (_cor12, _cor13) ->
	      %% Line 544
	      case apply 'skip_macro_args'/1
		       (Ts) of
		<{_cor37,Ts1}> when 'true' ->
		    %% Line 545
		    apply 'quickscan_macros_1'/3
			(N, Ts1, As)
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 546
	  <[T|Ts],As> when 'true' ->
	      %% Line 547
	      apply 'quickscan_macros'/2
		  (Ts, [T|As])
	  %% Line 548
	  <[],As> when 'true' ->
	      %% Line 549
	      call 'lists':'reverse'
		  (As)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'quickscan_macros',2}}] )
	    -| ['compiler_generated'] )
	end
'quickscan_macros_1'/3 =
    %% Line 552
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{_X_Type,_cor9,A},[{'string',L,S}|Ts],As> when 'true' ->
	      let <_cor3> =
		  %% Line 554
		  apply 'quick_macro_string'/1
		      (A)
	      in  let <S1> =
		      %% Line 554
		      call 'erlang':'++'
			  (_cor3, S)
		  in  %% Line 555
		      apply 'quickscan_macros'/2
			  (Ts, [{'string',L,S1}|As])
	  %% Line 556
	  <{_X_Type,L,A},Ts,As> when 'true' ->
	      let <_cor5> =
		  %% Line 558
		  apply 'quick_macro_atom'/1
		      (A)
	      in  %% Line 558
		  apply 'quickscan_macros'/2
		      (Ts, [{'atom',L,_cor5}|As])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'quickscan_macros_1',3}}] )
	    -| ['compiler_generated'] )
	end
'quick_macro_atom'/1 =
    %% Line 560
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 561
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  let <_cor2> =
		%% Line 561
		[63|_cor1]
	    in  %% Line 561
		call 'erlang':'list_to_atom'
		    (_cor2)
'quick_macro_string'/1 =
    %% Line 563
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 564
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  let <_cor2> =
		%% Line 564
		call 'erlang':'++'
		    (_cor1, [41])
	    in  %% Line 564
		[40|[63|_cor2]]
'skip_macro_args'/1 =
    %% Line 569
    fun (_cor0) ->
	case _cor0 of
	  <[T = {'(',_cor2}|Ts]> when 'true' ->
	      %% Line 570
	      apply 'skip_macro_args'/3
		  (Ts, [')'], [T|[]])
	  %% Line 571
	  <Ts> when 'true' ->
	      %% Line 572
	      {[],Ts}
	end
'skip_macro_args'/3 =
    %% Line 574
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T = {'(',_cor7}|Ts],Es,As> when 'true' ->
	      %% Line 575
	      apply 'skip_macro_args'/3
		  (Ts, [')'|Es], [T|As])
	  %% Line 576
	  <[T = {'{',_cor8}|Ts],Es,As> when 'true' ->
	      %% Line 577
	      apply 'skip_macro_args'/3
		  (Ts, ['}'|Es], [T|As])
	  %% Line 578
	  <[T = {'[',_cor9}|Ts],Es,As> when 'true' ->
	      %% Line 579
	      apply 'skip_macro_args'/3
		  (Ts, [']'|Es], [T|As])
	  %% Line 580
	  <[T = {'<<',_cor10}|Ts],Es,As> when 'true' ->
	      %% Line 581
	      apply 'skip_macro_args'/3
		  (Ts, ['>>'|Es], [T|As])
	  %% Line 582
	  <[T = {'begin',_cor11}|Ts],Es,As> when 'true' ->
	      %% Line 583
	      apply 'skip_macro_args'/3
		  (Ts, ['end'|Es], [T|As])
	  %% Line 584
	  <[T = {'if',_cor12}|Ts],Es,As> when 'true' ->
	      %% Line 585
	      apply 'skip_macro_args'/3
		  (Ts, ['end'|Es], [T|As])
	  %% Line 586
	  <[T = {'case',_cor13}|Ts],Es,As> when 'true' ->
	      %% Line 587
	      apply 'skip_macro_args'/3
		  (Ts, ['end'|Es], [T|As])
	  %% Line 588
	  <[T = {'receive',_cor14}|Ts],Es,As> when 'true' ->
	      %% Line 589
	      apply 'skip_macro_args'/3
		  (Ts, ['end'|Es], [T|As])
	  %% Line 590
	  <[T = {'try',_cor15}|Ts],Es,As> when 'true' ->
	      %% Line 591
	      apply 'skip_macro_args'/3
		  (Ts, ['end'|Es], [T|As])
	  %% Line 592
	  <[T = {'cond',_cor16}|Ts],Es,As> when 'true' ->
	      %% Line 593
	      apply 'skip_macro_args'/3
		  (Ts, ['end'|Es], [T|As])
	  %% Line 594
	  <[T = {E,_cor17}|Ts],[_cor18|[]],As>
	      when call 'erlang':'=:='
		    (_cor18,
		     E) ->
	      let <_cor3> =
		  %% Line 595
		  call 'lists':'reverse'
		      ([T|As])
	      in  %% Line 595
		  {_cor3,Ts}
	  %% Line 596
	  <[T = {E,_cor19}|Ts],[_cor20|Es],As>
	      when call 'erlang':'=:='
		    (_cor20,
		     E) ->
	      %% Line 597
	      apply 'skip_macro_args'/3
		  (Ts, Es, [T|As])
	  %% Line 598
	  <[T|Ts],Es,As> when 'true' ->
	      %% Line 599
	      apply 'skip_macro_args'/3
		  (Ts, Es, [T|As])
	  %% Line 600
	  <[],_X_Es,_X_As> when 'true' ->
	      %% Line 601
	      call 'erlang':'throw'
		  ({'error','macro_args'})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'skip_macro_args',3}}] )
	    -| ['compiler_generated'] )
	end
'filter_form'/1 =
    %% Line 603
    fun (_cor0) ->
	case _cor0 of
	  <{'function',_cor2,'?preprocessor declaration?',_cor3,%% Line 604
								[{'clause',_cor4,[],[],[{'atom',_cor5,'kill'}|[]]}|[]]}> when 'true' ->
	      %% Line 605
	      'none'
	  %% Line 606
	  <T> when 'true' ->
	      %% Line 607
	      T
	end
'normal_parser'/2 =
    %% Line 613
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 614
	    apply 'scan_form'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 614
		apply 'parse_tokens'/1
		    (_cor2)
	    in  %% Line 614
		apply 'rewrite_form'/1
		    (_cor3)
'scan_form'/2 =
    %% Line 616
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'-',_X_L}|[{'atom',La,'define'}|Ts]],Opt> when 'true' ->
	      let <_cor2> =
		  %% Line 618
		  apply 'scan_macros'/2
		      (Ts, Opt)
	      in  %% Line 617
		  [{'atom',La,'?preprocessor declaration?'}|[{'(',La}|[{')',La}|[{'->',La}|%% Line 618
											   [{'atom',La,'define'}|_cor2]]]]]
	  %% Line 619
	  <[{'-',_X_L}|[{'atom',La,'undef'}|Ts]],Opt> when 'true' ->
	      let <_cor3> =
		  %% Line 621
		  apply 'scan_macros'/2
		      (Ts, Opt)
	      in  %% Line 620
		  [{'atom',La,'?preprocessor declaration?'}|[{'(',La}|[{')',La}|[{'->',La}|%% Line 621
											   [{'atom',La,'undef'}|_cor3]]]]]
	  %% Line 622
	  <[{'-',_X_L}|[{'atom',La,'include'}|Ts]],Opt> when 'true' ->
	      let <_cor4> =
		  %% Line 624
		  apply 'scan_macros'/2
		      (Ts, Opt)
	      in  %% Line 623
		  [{'atom',La,'?preprocessor declaration?'}|[{'(',La}|[{')',La}|[{'->',La}|%% Line 624
											   [{'atom',La,'include'}|_cor4]]]]]
	  %% Line 625
	  <[{'-',_X_L}|[{'atom',La,'include_lib'}|Ts]],Opt> when 'true' ->
	      let <_cor5> =
		  %% Line 627
		  apply 'scan_macros'/2
		      (Ts, Opt)
	      in  %% Line 626
		  [{'atom',La,'?preprocessor declaration?'}|[{'(',La}|[{')',La}|[{'->',La}|%% Line 627
											   [{'atom',La,'include_lib'}|_cor5]]]]]
	  %% Line 628
	  <[{'-',_X_L}|[{'atom',La,'ifdef'}|Ts]],Opt> when 'true' ->
	      let <_cor6> =
		  %% Line 630
		  apply 'scan_macros'/2
		      (Ts, Opt)
	      in  %% Line 629
		  [{'atom',La,'?preprocessor declaration?'}|[{'(',La}|[{')',La}|[{'->',La}|%% Line 630
											   [{'atom',La,'ifdef'}|_cor6]]]]]
	  %% Line 631
	  <[{'-',_X_L}|[{'atom',La,'ifndef'}|Ts]],Opt> when 'true' ->
	      let <_cor7> =
		  %% Line 633
		  apply 'scan_macros'/2
		      (Ts, Opt)
	      in  %% Line 632
		  [{'atom',La,'?preprocessor declaration?'}|[{'(',La}|[{')',La}|[{'->',La}|%% Line 633
											   [{'atom',La,'ifndef'}|_cor7]]]]]
	  %% Line 634
	  <[{'-',_X_L}|[{'atom',La,'else'}|Ts]],Opt> when 'true' ->
	      let <_cor8> =
		  %% Line 636
		  apply 'scan_macros'/2
		      (Ts, Opt)
	      in  %% Line 635
		  [{'atom',La,'?preprocessor declaration?'}|[{'(',La}|[{')',La}|[{'->',La}|%% Line 636
											   [{'atom',La,'else'}|_cor8]]]]]
	  %% Line 637
	  <[{'-',_X_L}|[{'atom',La,'endif'}|Ts]],Opt> when 'true' ->
	      let <_cor9> =
		  %% Line 639
		  apply 'scan_macros'/2
		      (Ts, Opt)
	      in  %% Line 638
		  [{'atom',La,'?preprocessor declaration?'}|[{'(',La}|[{')',La}|[{'->',La}|%% Line 639
											   [{'atom',La,'endif'}|_cor9]]]]]
	  %% Line 640
	  <[{'-',L}|[{'?',L1}|[N = {Type,_cor16,_cor17}|Ts = [{'(',_cor18}|_cor19]]]],Opt>
	      when let <_cor10> =
		    %% Line 641
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor11> =
			%% Line 641
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 641
			call 'erlang':'or'
			    (_cor10, _cor11) ->
	      %% Line 644
	      apply 'macro'/5
		  (L1, N, Ts, [{'-',L}|[]], Opt)
	  %% Line 645
	  <[{'?',L}|[N = {Type,_cor20,_cor21}|Ts = [{'(',_cor22}|_cor23]]],Opt>
	      when let <_cor12> =
		    %% Line 646
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor13> =
			%% Line 646
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 646
			call 'erlang':'or'
			    (_cor12, _cor13) ->
	      %% Line 651
	      apply 'macro'/5
		  (L, N, Ts, [], Opt)
	  %% Line 652
	  <Ts,Opt> when 'true' ->
	      %% Line 653
	      apply 'scan_macros'/2
		  (Ts, Opt)
	end
'scan_macros'/2 =
    %% Line 655
    fun (_cor1,_cor0) ->
	%% Line 656
	apply 'scan_macros'/3
	    (_cor1, [], _cor0)
'scan_macros'/3 =
    %% Line 658
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[M = {'?',_cor17}|[N = {Type,_cor18,_cor19}|Ts]],[S = {'string',L,_cor20}|As],Opt = %% Line 659
											       {'opt','true'}>
	      when let <_cor3> =
		    %% Line 660
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor4> =
			%% Line 660
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 660
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 662
	      apply 'scan_macros'/3
		  ([M|[N|Ts]], [{'++',L}|[S|As]], Opt)
	  %% Line 663
	  <[{'?',L}|[N = {Type,_cor21,_cor22}|Ts = [{'(',_cor23}|_cor24]]],As = %% Line 664
										[{':',_cor25}|_cor26],%% Line 664
												      Opt>
	      when let <_cor5> =
		    %% Line 665
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor6> =
			%% Line 665
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 665
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 671
	      case apply 'skip_macro_args'/1
		       (Ts) of
		<{Args,Rest}> when 'true' ->
		    %% Line 672
		    case Rest of
		      %% Line 673
		      <[{'->',_cor27}|_cor28]> when 'true' ->
			  %% Line 674
			  apply 'macro_call'/6
			      (Args, L, N, Rest, As, Opt)
		      %% Line 675
		      <[{'when',_cor29}|_cor30]> when 'true' ->
			  %% Line 676
			  apply 'macro_call'/6
			      (Args, L, N, Rest, As, Opt)
		      %% Line 677
		      <_cor31> when 'true' ->
			  %% Line 678
			  apply 'macro'/5
			      (L, N, Ts, As, Opt)
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 680
	  <[{'?',L}|[N = {Type,_cor32,_cor33}|Ts = [{'(',_cor34}|_cor35]]],As,Opt>
	      when let <_cor9> =
		    %% Line 681
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor10> =
			%% Line 681
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 681
			call 'erlang':'or'
			    (_cor9, _cor10) ->
	      %% Line 683
	      case apply 'skip_macro_args'/1
		       (Ts) of
		<{Args,Rest}> when 'true' ->
		    %% Line 684
		    apply 'macro_call'/6
			(Args, L, N, Rest, As, Opt)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 685
	  <[{'?',L}|[N = {Type,_cor36,_cor37}|Ts]],As,Opt>
	      when let <_cor12> =
		    %% Line 686
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor13> =
			%% Line 686
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 686
			call 'erlang':'or'
			    (_cor12, _cor13) ->
	      %% Line 688
	      apply 'macro'/5
		  (L, N, Ts, As, Opt)
	  %% Line 689
	  <[T|Ts],As,Opt> when 'true' ->
	      %% Line 690
	      apply 'scan_macros'/3
		  (Ts, [T|As], Opt)
	  %% Line 691
	  <[],As,_X_Opt> when 'true' ->
	      %% Line 692
	      call 'lists':'reverse'
		  (As)
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'scan_macros',3}}] )
	    -| ['compiler_generated'] )
	end
'macro'/5 =
    %% Line 697
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,{Type,_cor11,A},Rest,As,Opt> when 'true' ->
	      let <_cor5> =
		  %% Line 698
		  apply 'macro_atom'/2
		      (Type, A)
	      in  %% Line 698
		  apply 'scan_macros_1'/4
		      ([], Rest, [{'atom',L,_cor5}|As], Opt)
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'macro',5}}] )
	    -| ['compiler_generated'] )
	end
'macro_call'/6 =
    %% Line 700
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_cor20}|[{')',_cor21}|[]]],L,N = {_cor22,Ln,_cor23},Rest,As,Opt> when 'true' ->
	      %% Line 701
	      case apply 'parentheses'/1
		       (As) of
		<{Open,Close}> when 'true' ->
		    let <_cor7> =
			%% Line 703
			[{'atom',L,'? <macro> ('}|%% Line 704
						  [{'(',L}|[N|[{')',Ln}|Close]]]]
		    in  let <_cor8> =
			    %% Line 703
			    call 'erlang':'++'
				(Open, _cor7)
			in  let <_cor9> =
				%% Line 703
				call 'lists':'reverse'
				    (_cor8, %% Line 705
					    As)
			    in  %% Line 702
				apply 'scan_macros_1'/4
				    ([], Rest, _cor9, %% Line 705
						      Opt)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 706
	  <[{'(',_cor24}|Args],L,N = {_cor25,Ln,_cor26},Rest,As,Opt> when 'true' ->
	      %% Line 707
	      case apply 'parentheses'/1
		       (As) of
		<{Open,Close}> when 'true' ->
		    let <_cor13> =
			%% Line 709
			call 'erlang':'++'
			    (Args, Close)
		    in  let <_cor11> =
			    %% Line 711
			    call 'erlang':'++'
				(Open, [{'atom',L,'? <macro> ('}|%% Line 712
								 [{'(',L}|[N|[{',',Ln}|[]]]]])
			in  let <_cor12> =
				%% Line 711
				call 'lists':'reverse'
				    (_cor11, %% Line 713
					     As)
			    in  %% Line 709
				apply 'scan_macros_1'/4
				    (_cor13, %% Line 710
					     Rest, _cor12, %% Line 713
							   Opt)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'macro_call',6}}] )
	    -| ['compiler_generated'] )
	end
'macro_atom'/2 =
    %% Line 715
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'atom',A> when 'true' ->
	      let <_cor2> =
		  %% Line 716
		  call 'erlang':'atom_to_list'
		      (A)
	      in  let <_cor3> =
		      %% Line 716
		      [63|[32|_cor2]]
		  in  %% Line 716
		      call 'erlang':'list_to_atom'
			  (_cor3)
	  %% Line 717
	  <'var',A> when 'true' ->
	      let <_cor4> =
		  %% Line 718
		  call 'erlang':'atom_to_list'
		      (A)
	      in  let <_cor5> =
		      %% Line 718
		      [63|[44|_cor4]]
		  in  %% Line 718
		      call 'erlang':'list_to_atom'
			  (_cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'macro_atom',2}}] )
	    -| ['compiler_generated'] )
	end
'parentheses'/1 =
    %% Line 723
    fun (_cor0) ->
	case _cor0 of
	  <[{'string',_cor2,_cor3}|_cor4]> when 'true' ->
	      %% Line 724
	      {[],[]}
	  %% Line 725
	  <_cor5> when 'true' ->
	      %% Line 726
	      {[{'(',0}],[{')',0}]}
	end
'scan_macros_1'/4 =
    %% Line 729
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Args,Rest = [{'string',L,_cor10}|_cor11],As,Opt = %% Line 730
							     {'opt','true'}> when 'true' ->
	      let <_cor4> =
		  %% Line 732
		  call 'erlang':'++'
		      (Args, [{'++',L}|Rest])
	      in  %% Line 732
		  apply 'scan_macros'/3
		      (_cor4, As, Opt)
	  %% Line 733
	  <Args,Rest,As,Opt> when 'true' ->
	      let <_cor5> =
		  %% Line 735
		  call 'erlang':'++'
		      (Args, Rest)
	      in  %% Line 735
		  apply 'scan_macros'/3
		      (_cor5, As, Opt)
	end
'rewrite_form'/1 =
    %% Line 737
    fun (_cor0) ->
	case _cor0 of
	  <{'function',L,'?preprocessor declaration?',_cor5,%% Line 738
							    [{'clause',_cor6,[],[],[{'call',_cor7,A,As}|[]]}|[]]}> when 'true' ->
	      let <_cor1> =
		  %% Line 739
		  apply 'rewrite_list'/1
		      (As)
	      in  let <_cor2> =
		      %% Line 739
		      call 'erl_syntax':'attribute'
			  (A, _cor1)
		  in  %% Line 739
		      call 'erl_syntax':'set_pos'
			  (_cor2, L)
	  %% Line 740
	  <{'function',L,'?preprocessor declaration?',_cor8,[{'clause',_cor9,[],[],[A|[]]}|[]]}> when 'true' ->
	      let <_cor3> =
		  %% Line 741
		  call 'erl_syntax':'attribute'
		      (A)
	      in  %% Line 741
		  call 'erl_syntax':'set_pos'
		      (_cor3, L)
	  %% Line 742
	  <T> when 'true' ->
	      %% Line 743
	      apply 'rewrite'/1
		  (T)
	end
'rewrite_list'/1 =
    %% Line 745
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_cor1> =
		  %% Line 746
		  apply 'rewrite'/1
		      (T)
	      in  let <_cor2> =
		      %% Line 746
		      apply 'rewrite_list'/1
			  (Ts)
		  in  %% Line 746
		      [_cor1|_cor2]
	  %% Line 747
	  <[]> when 'true' ->
	      %% Line 748
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'rewrite_list',1}}] )
	    -| ['compiler_generated'] )
	end
'rewrite'/1 =
    %% Line 755
    fun (_cor0) ->
	%% Line 756
	case call 'erl_syntax':'type'
		 (_cor0) of
	  %% Line 757
	  <'atom'> when 'true' ->
	      let <_cor1> =
		  %% Line 758
		  call 'erl_syntax':'atom_value'
		      (_cor0)
	      in  %% Line 758
		  case call 'erlang':'atom_to_list'
			   (_cor1) of
		    %% Line 759
		    <[63|[32|As]]> when 'true' ->
			let <A1> =
			    %% Line 760
			    call 'erlang':'list_to_atom'
				(As)
			in  let <_cor3> =
				%% Line 761
				call 'erl_syntax':'atom'
				    (A1)
			    in  let <N> =
				    %% Line 761
				    call 'erl_syntax':'copy_pos'
					(_cor0, _cor3)
				in  let <_cor5> =
					%% Line 762
					call 'erl_syntax':'macro'
					    (N)
				    in  %% Line 762
					call 'erl_syntax':'copy_pos'
					    (_cor0, _cor5)
		    %% Line 763
		    <[63|[44|As]]> when 'true' ->
			let <A1> =
			    %% Line 764
			    call 'erlang':'list_to_atom'
				(As)
			in  let <_cor7> =
				%% Line 765
				call 'erl_syntax':'variable'
				    (A1)
			    in  let <N> =
				    %% Line 765
				    call 'erl_syntax':'copy_pos'
					(_cor0, _cor7)
				in  let <_cor9> =
					%% Line 766
					call 'erl_syntax':'macro'
					    (N)
				    in  %% Line 766
					call 'erl_syntax':'copy_pos'
					    (_cor0, _cor9)
		    %% Line 767
		    <_cor19> when 'true' ->
			_cor0
		  end
	  %% Line 770
	  <'application'> when 'true' ->
	      let <F> =
		  %% Line 771
		  call 'erl_syntax':'application_operator'
		      (_cor0)
	      in  %% Line 772
		  case call 'erl_syntax':'type'
			   (F) of
		    %% Line 773
		    <'atom'> when 'true' ->
			%% Line 774
			case call 'erl_syntax':'atom_value'
				 (F) of
			  %% Line 775
			  <'? <macro> ('> when 'true' ->
			      %% Line 776
			      case call 'erl_syntax':'application_arguments'
				       (_cor0) of
				<[A|As]> when 'true' ->
				    let <_cor13> =
					%% Line 777
					apply 'rewrite_list'/1
					    (As)
				    in  let <M> =
					    %% Line 777
					    call 'erl_syntax':'macro'
						(A, _cor13)
					in  %% Line 778
					    call 'erl_syntax':'copy_pos'
						(_cor0, M)
				( <_cor12> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor12})
				  -| ['compiler_generated'] )
			      end
			  %% Line 779
			  <_cor20> when 'true' ->
			      %% Line 780
			      apply 'rewrite_1'/1
				  (_cor0)
			end
		    %% Line 782
		    <_cor21> when 'true' ->
			%% Line 783
			apply 'rewrite_1'/1
			    (_cor0)
		  end
	  %% Line 785
	  <_cor22> when 'true' ->
	      %% Line 786
	      apply 'rewrite_1'/1
		  (_cor0)
	end
'rewrite_1'/1 =
    %% Line 789
    fun (_cor0) ->
	%% Line 790
	case call 'erl_syntax':'subtrees'
		 (_cor0) of
	  %% Line 791
	  <[]> when 'true' ->
	      _cor0
	  %% Line 793
	  <Gs> when 'true' ->
	      let <_cor12> =
		  %% Line 794
		  call 'erl_syntax':'type'
		      (_cor0)
	      in  let <_cor11> =
		      %% Line 795
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor3) ->
				    case _cor3 of
				      <[%% Line 796
					Ts|_cor2]> when 'true' ->
					  let <_cor9> =
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor6) ->
							    case _cor6 of
							      <[T|_cor5]> when 'true' ->
								  let <_cor7> =
								      apply 'rewrite'/1
									  (T)
								  in  let <_cor8> =
									  apply 'lc$^1'/1
									      (_cor5)
								      in  ( [_cor7|_cor8]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor6> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor6})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(Ts)
						-| ['list_comprehension'] )
					  in  let <_cor10> =
						  %% Line 796
						  apply 'lc$^0'/1
						      (_cor2)
					      in  ( [_cor9|_cor10]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor3> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor3})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(%% Line 796
				 Gs)
			-| ['list_comprehension'] )
		  in  let <Node1> =
			  %% Line 794
			  call 'erl_syntax':'make_tree'
			      (_cor12, _cor11)
		      in  %% Line 797
			  call 'erl_syntax':'copy_pos'
			      (_cor0, Node1)
	end
'fix_form'/1 =
    %% Line 803
    fun (_cor0) ->
	case _cor0 of
	  <Ts = [{'atom',_cor4,'?preprocessor declaration?'}|[{'(',_cor5}|[{')',_cor6}|[{'->',_cor7}|%% Line 804
												     [{'atom',_cor8,'define'}|[{'(',_cor9}|_cor10]]]]]]> when 'true' ->
	      %% Line 805
	      case call 'lists':'reverse'
		       (Ts) of
		%% Line 806
		<[{'dot',_cor11}|[{')',_cor12}|_cor13]]> when 'true' ->
		    %% Line 807
		    {'retry',Ts,( 'fix_define'/1
				  -| [{'id',{0,0,'-fix_form/1-fun-0-'}}] )}
		%% Line 808
		<[{'dot',L}|Ts1]> when 'true' ->
		    let <Ts2> =
			%% Line 809
			call 'lists':'reverse'
			    ([{'dot',L}|[{')',L}|Ts1]])
		    in  %% Line 810
			{'retry',Ts2,( 'fix_define'/1
				       -| [{'id',{0,0,'-fix_form/1-fun-1-'}}] )}
		%% Line 811
		<_cor14> when 'true' ->
		    %% Line 812
		    'error'
	      end
	  %% Line 814
	  <_X_Ts> when 'true' ->
	      %% Line 815
	      'error'
	end
'fix_define'/1 =
    %% Line 817
    fun (_cor0) ->
	case _cor0 of
	  <[{'atom',L,'?preprocessor declaration?'}|[{'(',_cor11}|[{')',_cor12}|[{'->',_cor13}|%% Line 818
											       [{'atom',La,'define'}|[{'(',_cor14}|[N|[{',',_cor15}|Ts]]]]]]]]> when 'true' ->
	      %% Line 819
	      case call 'lists':'reverse'
		       (Ts) of
		<[{'dot',_cor16}|[{')',_cor17}|Ts1]]> when 'true' ->
		    let <_cor2> =
			%% Line 820
			call 'lists':'reverse'
			    (Ts1)
		    in  let <S> =
			    %% Line 820
			    apply 'tokens_to_string'/1
				(_cor2)
			in  let <_cor4> =
				%% Line 821
				call 'erl_syntax':'atom'
				    ('define')
			    in  let <A> =
				    %% Line 821
				    call 'erl_syntax':'set_pos'
					(_cor4, La)
				in  let <_cor6> =
					%% Line 822
					call 'erl_syntax':'text'
					    (S)
				    in  let <Txt> =
					    %% Line 822
					    call 'erl_syntax':'set_pos'
						(_cor6, La)
					in  let <_cor8> =
						%% Line 823
						call 'erl_syntax':'attribute'
						    (A, [N|[Txt|[]]])
					    in  let <_cor9> =
						    %% Line 823
						    call 'erl_syntax':'set_pos'
							(_cor8, L)
						in  %% Line 823
						    {'form',_cor9}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 824
	  <_X_Ts> when 'true' ->
	      %% Line 825
	      'error'
	end
'tokens_to_string'/1 =
    %% Line 834
    fun (_cor0) ->
	case _cor0 of
	  <[{'atom',_cor24,A}|Ts]> when 'true' ->
	      let <_cor3> =
		  %% Line 835
		  call 'io_lib':'write_atom'
		      (A)
	      in  let <_cor1> =
		      %% Line 835
		      apply 'tokens_to_string'/1
			  (Ts)
		  in  let <_cor2> =
			  %% Line 835
			  [32|_cor1]
		      in  %% Line 835
			  call 'erlang':'++'
			      (_cor3, _cor2)
	  %% Line 836
	  <[{'string',_cor25,S}|Ts]> when 'true' ->
	      let <_cor6> =
		  %% Line 837
		  call 'io_lib':'write_string'
		      (S)
	      in  let <_cor4> =
		      %% Line 837
		      apply 'tokens_to_string'/1
			  (Ts)
		  in  let <_cor5> =
			  %% Line 837
			  [32|_cor4]
		      in  %% Line 837
			  call 'erlang':'++'
			      (_cor6, _cor5)
	  %% Line 838
	  <[{'char',_cor26,C}|Ts]> when 'true' ->
	      let <_cor9> =
		  %% Line 839
		  call 'io_lib':'write_char'
		      (C)
	      in  let <_cor7> =
		      %% Line 839
		      apply 'tokens_to_string'/1
			  (Ts)
		  in  let <_cor8> =
			  %% Line 839
			  [32|_cor7]
		      in  %% Line 839
			  call 'erlang':'++'
			      (_cor9, _cor8)
	  %% Line 840
	  <[{'float',_cor27,F}|Ts]> when 'true' ->
	      let <_cor12> =
		  %% Line 841
		  call 'erlang':'float_to_list'
		      (F)
	      in  let <_cor10> =
		      %% Line 841
		      apply 'tokens_to_string'/1
			  (Ts)
		  in  let <_cor11> =
			  %% Line 841
			  [32|_cor10]
		      in  %% Line 841
			  call 'erlang':'++'
			      (_cor12, _cor11)
	  %% Line 842
	  <[{'integer',_cor28,N}|Ts]> when 'true' ->
	      let <_cor15> =
		  %% Line 843
		  call 'erlang':'integer_to_list'
		      (N)
	      in  let <_cor13> =
		      %% Line 843
		      apply 'tokens_to_string'/1
			  (Ts)
		  in  let <_cor14> =
			  %% Line 843
			  [32|_cor13]
		      in  %% Line 843
			  call 'erlang':'++'
			      (_cor15, _cor14)
	  %% Line 844
	  <[{'var',_cor29,A}|Ts]> when 'true' ->
	      let <_cor18> =
		  %% Line 845
		  call 'erlang':'atom_to_list'
		      (A)
	      in  let <_cor16> =
		      %% Line 845
		      apply 'tokens_to_string'/1
			  (Ts)
		  in  let <_cor17> =
			  %% Line 845
			  [32|_cor16]
		      in  %% Line 845
			  call 'erlang':'++'
			      (_cor18, _cor17)
	  %% Line 846
	  <[{'dot',_cor30}|Ts]> when 'true' ->
	      let <_cor19> =
		  %% Line 847
		  apply 'tokens_to_string'/1
		      (Ts)
	      in  %% Line 847
		  [46|[10|_cor19]]
	  %% Line 848
	  <[{A,_cor31}|Ts]> when 'true' ->
	      let <_cor22> =
		  %% Line 849
		  call 'erlang':'atom_to_list'
		      (A)
	      in  let <_cor20> =
		      %% Line 849
		      apply 'tokens_to_string'/1
			  (Ts)
		  in  let <_cor21> =
			  %% Line 849
			  [32|_cor20]
		      in  %% Line 849
			  call 'erlang':'++'
			      (_cor22, _cor21)
	  %% Line 850
	  <[]> when 'true' ->
	      %% Line 851
	      []
	  ( <_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23})
		  -| [{'function_name',{'tokens_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 861
    fun (_cor0) ->
	case _cor0 of
	  <'macro_args'> when 'true' ->
	      %% Line 862
	      apply 'errormsg'/1
		  ([109|[97|[99|[114|[111|[32|[99|[97|[108|[108|[32|[109|[105|[115|[115|[105|[110|[103|[32|[101|[110|[100|[32|[112|[97|[114|[101|[110|[116|[104|[101|[115|[105|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 863
	  <{'unknown',Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 864
		  call 'io_lib':'format'
		      ([117|[110|[107|[110|[111|[119|[110|[32|[101|[114|[114|[111|[114|[58|[32|[126|[80]]]]]]]]]]]]]]]]], [Reason|[15]])
	      in  %% Line 864
		  apply 'errormsg'/1
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'errormsg'/1 =
    %% Line 866
    fun (_cor0) ->
	%% Line 867
	call 'io_lib':'format'
	    ([126|[115|[58|[32|[126|[115]]]]]], ['epp_dodger'|[_cor0|[]]])
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('epp_dodger')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('epp_dodger', _cor0)
end