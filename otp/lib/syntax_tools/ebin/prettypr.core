module 'prettypr' ['above'/2,
		   'beside'/2,
		   'best'/3,
		   'break'/1,
		   'empty'/0,
		   'floating'/1,
		   'floating'/3,
		   'follow'/2,
		   'follow'/3,
		   'format'/1,
		   'format'/2,
		   'format'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'nest'/2,
		   'null_text'/1,
		   'par'/1,
		   'par'/2,
		   'sep'/1,
		   'text'/1,
		   'text_par'/1,
		   'text_par'/2]
    attributes [%% Line 49
		'export_type' =
		    %% Line 49
		    [{'document',0}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'deep_string',{'type',53,'list',[{'type',53,'union',[{'type',53,'char',[]}|[{'type',53,'deep_string',[]}]]}]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','text'},[{'typed_record_field',{'record_field',56,{'atom',56,'s'}},{'type',56,'union',[{'atom',56,'undefined'}|[{'type',56,'deep_string',[]}]]}}],[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','nest'},[{'typed_record_field',{'record_field',57,{'atom',57,'n'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'integer',[]}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'d'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'document',[]}]]}}]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','beside'},[{'typed_record_field',{'record_field',58,{'atom',58,'d1'}},{'type',58,'union',[{'atom',58,'undefined'}|[{'type',58,'document',[]}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'d2'}},{'type',58,'union',[{'atom',58,'undefined'}|[{'type',58,'document',[]}]]}}]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','above'},[{'typed_record_field',{'record_field',59,{'atom',59,'d1'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'document',[]}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'d2'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'document',[]}]]}}]],[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{{'record','sep'},[{'typed_record_field',{'record_field',60,{'atom',60,'ds'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'list',[{'type',60,'document',[]}]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'i'},{'integer',60,0}},{'type',60,'integer',[]}}|[{'typed_record_field',{'record_field',61,{'atom',61,'p'},{'atom',61,'false'}},{'type',61,'boolean',[]}}]]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','float'},[{'typed_record_field',{'record_field',64,{'atom',64,'d'}},{'type',64,'union',[{'atom',64,'undefined'}|[{'type',64,'document',[]}]]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'h'}},{'type',64,'union',[{'atom',64,'undefined'}|[{'type',64,'integer',[]}]]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'v'}},{'type',64,'union',[{'atom',64,'undefined'}|[{'type',64,'integer',[]}]]}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','union'},[{'typed_record_field',{'record_field',67,{'atom',67,'d1'}},{'type',67,'union',[{'atom',67,'undefined'}|[{'type',67,'document',[]}]]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'d2'}},{'type',67,'union',[{'atom',67,'undefined'}|[{'type',67,'document',[]}]]}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','fit'},[{'typed_record_field',{'record_field',68,{'atom',68,'d'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'document',[]}]]}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'document',{'type',105,'union',[{'atom',105,'null'}|[{'type',105,'record',[{'atom',105,'text'}]}|[{'type',105,'record',[{'atom',105,'nest'}]}|[{'type',105,'record',[{'atom',105,'beside'}]}|[{'type',106,'record',[{'atom',106,'above'}]}|[{'type',106,'record',[{'atom',106,'sep'}]}|[{'type',106,'record',[{'atom',106,'float'}]}|[{'type',106,'record',[{'atom',106,'union'}]}|[{'type',106,'record',[{'atom',106,'fit'}]}]]]]]]]]]},[]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'text',1},[{'type',122,'fun',[{'type',122,'product',[{'type',122,'string',[]}]}|[{'type',122,'record',[{'atom',122,'text'}]}]]}]}],
		%% Line 152
		'spec' =
		    %% Line 152
		    [{{'null_text',1},[{'type',152,'fun',[{'type',152,'product',[{'type',152,'string',[]}]}|[{'type',152,'record',[{'atom',152,'text'}]}]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'text_par',1},[{'type',162,'fun',[{'type',162,'product',[{'type',162,'string',[]}]}|[{'type',162,'document',[]}]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'text_par',2},[{'type',198,'fun',[{'type',198,'product',[{'type',198,'string',[]}|[{'type',198,'integer',[]}]]}|[{'type',198,'document',[]}]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'empty',0},[{'type',238,'fun',[{'type',238,'product',[]}|[{'atom',238,'null'}]]}]}],
		%% Line 250
		'spec' =
		    %% Line 250
		    [{{'break',1},[{'type',250,'fun',[{'type',250,'product',[{'type',250,'document',[]}]}|[{'type',250,'record',[{'atom',250,'above'}]}]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'nest',2},[{'type',263,'fun',[{'type',263,'product',[{'type',263,'integer',[]}|[{'type',263,'document',[]}]]}|[{'type',263,'document',[]}]]}]}],
		%% Line 289
		'spec' =
		    %% Line 289
		    [{{'beside',2},[{'type',289,'fun',[{'type',289,'product',[{'type',289,'document',[]}|[{'type',289,'document',[]}]]}|[{'type',289,'record',[{'atom',289,'beside'}]}]]}]}],
		%% Line 313
		'spec' =
		    %% Line 313
		    [{{'above',2},[{'type',313,'fun',[{'type',313,'product',[{'type',313,'document',[]}|[{'type',313,'document',[]}]]}|[{'type',313,'record',[{'atom',313,'above'}]}]]}]}],
		%% Line 343
		'spec' =
		    %% Line 343
		    [{{'sep',1},[{'type',343,'fun',[{'type',343,'product',[{'type',343,'list',[{'type',343,'document',[]}]}]}|[{'type',343,'record',[{'atom',343,'sep'}]}]]}]}],
		%% Line 353
		'spec' =
		    %% Line 353
		    [{{'par',1},[{'type',353,'fun',[{'type',353,'product',[{'type',353,'list',[{'type',353,'document',[]}]}]}|[{'type',353,'record',[{'atom',353,'sep'}]}]]}]}],
		%% Line 404
		'spec' =
		    %% Line 404
		    [{{'par',2},[{'type',404,'fun',[{'type',404,'product',[{'type',404,'list',[{'type',404,'document',[]}]}|[{'type',404,'integer',[]}]]}|[{'type',404,'record',[{'atom',404,'sep'}]}]]}]}],
		%% Line 419
		'spec' =
		    %% Line 419
		    [{{'follow',2},[{'type',419,'fun',[{'type',419,'product',[{'type',419,'document',[]}|[{'type',419,'document',[]}]]}|[{'type',419,'record',[{'atom',419,'beside'}]}]]}]}],
		%% Line 442
		'spec' =
		    %% Line 442
		    [{{'follow',3},[{'type',442,'fun',[{'type',442,'product',[{'type',442,'document',[]}|[{'type',442,'document',[]}|[{'type',442,'integer',[]}]]]}|[{'type',442,'record',[{'atom',442,'beside'}]}]]}]}],
		%% Line 452
		'spec' =
		    %% Line 452
		    [{{'floating',1},[{'type',452,'fun',[{'type',452,'product',[{'type',452,'document',[]}]}|[{'type',452,'record',[{'atom',452,'float'}]}]]}]}],
		%% Line 477
		'spec' =
		    %% Line 477
		    [{{'floating',3},[{'type',477,'fun',[{'type',477,'product',[{'type',477,'document',[]}|[{'type',477,'integer',[]}|[{'type',477,'integer',[]}]]]}|[{'type',477,'record',[{'atom',477,'float'}]}]]}]}],
		%% Line 487
		'spec' =
		    %% Line 487
		    [{{'format',1},[{'type',487,'fun',[{'type',487,'product',[{'type',487,'document',[]}]}|[{'type',487,'string',[]}]]}]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'format',2},[{'type',497,'fun',[{'type',497,'product',[{'type',497,'document',[]}|[{'type',497,'integer',[]}]]}|[{'type',497,'string',[]}]]}]}],
		%% Line 522
		'spec' =
		    %% Line 522
		    [{{'format',3},[{'type',522,'fun',[{'type',522,'product',[{'type',522,'document',[]}|[{'type',522,'integer',[]}|[{'type',522,'integer',[]}]]]}|[{'type',522,'string',[]}]]}]}],
		%% Line 643
		'type' =
		    %% Line 643
		    [{{'record','c_best_nest'},[{'typed_record_field',{'record_field',643,{'atom',643,'w'}},{'type',643,'union',[{'atom',643,'undefined'}|[{'type',643,'integer',[]}]]}}|[{'typed_record_field',{'record_field',643,{'atom',643,'r'}},{'type',643,'union',[{'atom',643,'undefined'}|[{'type',643,'integer',[]}]]}}|[{'typed_record_field',{'record_field',643,{'atom',643,'i'}},{'type',643,'union',[{'atom',643,'undefined'}|[{'type',643,'integer',[]}]]}}]]],[]}],
		%% Line 646
		'type' =
		    %% Line 646
		    [{{'record','c_above_nest'},[{'typed_record_field',{'record_field',646,{'atom',646,'d'}},{'type',646,'union',[{'atom',646,'undefined'}|[{'type',646,'document',[]}]]}}|[{'typed_record_field',{'record_field',646,{'atom',646,'i'},{'integer',646,0}},{'type',646,'integer',[]}}|[{'typed_record_field',{'record_field',646,{'atom',646,'c'}},{'type',646,'union',[{'atom',646,'undefined'}|[{'type',646,'ctxt',[]}]]}}]]],[]}],
		%% Line 648
		'type' =
		    %% Line 648
		    [{{'record','c_beside'},[{'typed_record_field',{'record_field',648,{'atom',648,'d'}},{'type',648,'union',[{'atom',648,'undefined'}|[{'type',648,'document',[]}]]}}|[{'typed_record_field',{'record_field',648,{'atom',648,'c'}},{'type',648,'union',[{'atom',648,'undefined'}|[{'type',648,'ctxt',[]}]]}}]],[]}],
		%% Line 650
		'type' =
		    %% Line 650
		    [{{'record','c_text_beside'},[{'typed_record_field',{'record_field',650,{'atom',650,'s'}},{'type',650,'union',[{'atom',650,'undefined'}|[{'type',650,'string',[]}]]}}|[{'typed_record_field',{'record_field',650,{'atom',650,'c'}},{'type',650,'union',[{'atom',650,'undefined'}|[{'type',650,'ctxt',[]}]]}}]],[]}],
		%% Line 655
		'type' =
		    %% Line 655
		    [{{'record','c_sep_nest'},[{'typed_record_field',{'record_field',655,{'atom',655,'ds'}},{'type',655,'union',[{'atom',655,'undefined'}|[{'type',655,'list',[{'type',655,'document',[]}]}]]}}|[{'typed_record_field',{'record_field',655,{'atom',655,'i'}},{'type',655,'union',[{'atom',655,'undefined'}|[{'type',655,'integer',[]}]]}}|[{'typed_record_field',{'record_field',656,{'atom',656,'p'}},{'type',656,'union',[{'atom',656,'undefined'}|[{'type',656,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',656,{'atom',656,'c'}},{'type',656,'union',[{'atom',656,'undefined'}|[{'type',656,'ctxt',[]}]]}}]]]],[]}],
		%% Line 659
		'type' =
		    %% Line 659
		    [{{'record','c_best_nest_or'},[{'typed_record_field',{'record_field',659,{'atom',659,'w'}},{'type',659,'union',[{'atom',659,'undefined'}|[{'type',659,'integer',[]}]]}}|[{'typed_record_field',{'record_field',659,{'atom',659,'r'}},{'type',659,'union',[{'atom',659,'undefined'}|[{'type',659,'integer',[]}]]}}|[{'typed_record_field',{'record_field',660,{'atom',660,'i'}},{'type',660,'union',[{'atom',660,'undefined'}|[{'type',660,'integer',[]}]]}}|[{'typed_record_field',{'record_field',660,{'atom',660,'d'}},{'type',660,'union',[{'atom',660,'undefined'}|[{'type',660,'document',[]}]]}}]]]],[]}],
		%% Line 662
		'type' =
		    %% Line 662
		    [{{'record','c_fit'},[{'typed_record_field',{'record_field',662,{'atom',662,'c'}},{'type',662,'union',[{'atom',662,'undefined'}|[{'type',662,'ctxt',[]}]]}}],[]}],
		%% Line 665
		'type' =
		    %% Line 665
		    [{{'record','c_float_beside'},[{'typed_record_field',{'record_field',665,{'atom',665,'d'}},{'type',665,'union',[{'atom',665,'undefined'}|[{'type',665,'document',[]}]]}}|[{'typed_record_field',{'record_field',665,{'atom',665,'h'}},{'type',665,'union',[{'atom',665,'undefined'}|[{'type',665,'integer',[]}]]}}|[{'typed_record_field',{'record_field',666,{'atom',666,'v'}},{'type',666,'union',[{'atom',666,'undefined'}|[{'type',666,'integer',[]}]]}}|[{'typed_record_field',{'record_field',666,{'atom',666,'c'}},{'type',666,'union',[{'atom',666,'undefined'}|[{'type',666,'ctxt',[]}]]}}]]]],[]}],
		%% Line 668
		'type' =
		    %% Line 668
		    [{{'record','c_float_above_nest'},[{'typed_record_field',{'record_field',668,{'atom',668,'d'}},{'type',668,'union',[{'atom',668,'undefined'}|[{'type',668,'document',[]}]]}}|[{'typed_record_field',{'record_field',668,{'atom',668,'h'}},{'type',668,'union',[{'atom',668,'undefined'}|[{'type',668,'integer',[]}]]}}|[{'typed_record_field',{'record_field',669,{'atom',669,'v'}},{'type',669,'union',[{'atom',669,'undefined'}|[{'type',669,'integer',[]}]]}}|[{'typed_record_field',{'record_field',669,{'atom',669,'i'}},{'type',669,'union',[{'atom',669,'undefined'}|[{'type',669,'integer',[]}]]}}|[{'typed_record_field',{'record_field',669,{'atom',669,'c'}},{'type',669,'union',[{'atom',669,'undefined'}|[{'type',669,'ctxt',[]}]]}}]]]]],[]}],
		%% Line 683
		'type' =
		    %% Line 683
		    [{'ctxt',{'type',683,'union',[{'type',683,'record',[{'atom',683,'c_best_nest'}]}|[{'type',683,'record',[{'atom',683,'c_above_nest'}]}|[{'type',684,'record',[{'atom',684,'c_beside'}]}|[{'type',684,'record',[{'atom',684,'c_text_beside'}]}|[{'type',685,'record',[{'atom',685,'c_sep_nest'}]}|[{'type',685,'record',[{'atom',685,'c_best_nest_or'}]}|[{'type',686,'record',[{'atom',686,'c_fit'}]}|[{'type',686,'record',[{'atom',686,'c_float_beside'}]}|[{'type',686,'record',[{'atom',686,'c_float_above_nest'}]}]]]]]]]]]},[]}],
		%% Line 690
		'spec' =
		    %% Line 690
		    [{{'best',3},[{'type',690,'fun',[{'type',690,'product',[{'type',690,'document',[]}|[{'type',690,'integer',[]}|[{'type',690,'integer',[]}]]]}|[{'type',690,'union',[{'atom',690,'empty'}|[{'type',690,'document',[]}]]}]]}]}]]
'text'/1 =
    %% Line 124
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 125
	    apply 'string'/1
		(_cor0)
	in  %% Line 125
	    apply 'mktext'/1
		(_cor1)
'mktext'/1 =
    %% Line 130
    fun (_cor0) ->
	%% Line 131
	{'text',_cor0}
'null_text'/1 =
    %% Line 154
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 155
	    apply 'null_string'/1
		(_cor0)
	in  %% Line 155
	    apply 'mktext'/1
		(_cor1)
'text_par'/1 =
    %% Line 164
    fun (_cor0) ->
	%% Line 165
	apply 'text_par'/2
	    (_cor0, 0)
'text_par'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,0> when 'true' ->
	      let <_cor2> =
		  %% Line 201
		  apply 'words'/1
		      (S)
	      in  %% Line 201
		  apply 'par'/1
		      (_cor2)
	  %% Line 202
	  <S,N>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor4> =
		  %% Line 203
		  apply 'words'/1
		      (S)
	      in  let <_cor3> =
		      %% Line 203
		      call 'erlang':'-'
			  (N)
		  in  let <_cor5> =
			  %% Line 203
			  apply 'par'/2
			      (_cor4, _cor3)
		      in  %% Line 203
			  apply 'nest'/2
			      (N, _cor5)
	  %% Line 204
	  <S,N>
	      when call 'erlang':'<'
		    (N,
		     0) ->
	      let <_cor7> =
		  %% Line 205
		  apply 'words'/1
		      (S)
	      in  let <_cor6> =
		      %% Line 205
		      call 'erlang':'-'
			  (N)
		  in  %% Line 205
		      apply 'par'/2
			  (_cor7, _cor6)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'text_par',2}}] )
	    -| ['compiler_generated'] )
	end
'words'/1 =
    %% Line 207
    fun (_cor0) ->
	%% Line 208
	apply 'words'/3
	    (_cor0, [], [])
'words'/3 =
    %% Line 210
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[32|Cs],As,Ws> when 'true' ->
	      apply 'words_1'/3
		  (Cs, As, Ws)
	  %% Line 211
	  <[9|Cs],As,Ws> when 'true' ->
	      apply 'words_1'/3
		  (Cs, As, Ws)
	  %% Line 212
	  <[10|Cs],As,Ws> when 'true' ->
	      apply 'words_1'/3
		  (Cs, As, Ws)
	  %% Line 213
	  <[C|Cs],As,Ws> when 'true' ->
	      apply 'words'/3
		  (Cs, [C|As], Ws)
	  %% Line 214
	  <[],[],Ws> when 'true' ->
	      call 'lists':'reverse'
		  (Ws)
	  %% Line 215
	  <[],As,Ws> when 'true' ->
	      apply 'words_1'/3
		  ([], As, Ws)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'words',3}}] )
	    -| ['compiler_generated'] )
	end
'words_1'/3 =
    %% Line 217
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Cs,[],Ws> when 'true' ->
	      %% Line 218
	      apply 'words'/3
		  (Cs, [], Ws)
	  %% Line 219
	  <Cs,As,Ws> when 'true' ->
	      let <_cor3> =
		  %% Line 220
		  call 'lists':'reverse'
		      (As)
	      in  let <_cor4> =
		      %% Line 220
		      apply 'text'/1
			  (_cor3)
		  in  %% Line 220
		      apply 'words'/3
			  (Cs, [], [_cor4|Ws])
	end
'empty'/0 =
    %% Line 240
    fun () ->
	%% Line 241
	'null'
'break'/1 =
    %% Line 252
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 253
	    apply 'empty'/0
		()
	in  %% Line 253
	    apply 'above'/2
		(_cor0, _cor1)
'nest'/2 =
    %% Line 265
    fun (_cor1,_cor0) ->
	%% Line 266
	case <> of
	  <>
	      when call 'erlang':'=:='
		    (_cor1,
		     0) ->
	      _cor0
	  %% Line 268
	  <> when 'true' ->
	      %% Line 269
	      {'nest',_cor1,_cor0}
	end
'beside'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	%% Line 292
	{'beside',_cor1,_cor0}
'above'/2 =
    %% Line 315
    fun (_cor1,_cor0) ->
	%% Line 316
	{'above',_cor1,_cor0}
'sep'/1 =
    %% Line 345
    fun (_cor0) ->
	%% Line 346
	{'sep',_cor0,0,'false'}
'par'/1 =
    %% Line 355
    fun (_cor0) ->
	%% Line 356
	apply 'par'/2
	    (_cor0, 0)
'par'/2 =
    %% Line 406
    fun (_cor1,_cor0) ->
	%% Line 407
	apply 'mksep'/3
	    (_cor1, _cor0, 'true')
'mksep'/3 =
    %% Line 411
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ds,N,P>
	      when call 'erlang':'is_integer'
		    (N) ->
	      %% Line 412
	      {'sep',Ds,N,P}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'mksep',3}}] )
	    -| ['compiler_generated'] )
	end
'follow'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	%% Line 422
	apply 'follow'/3
	    (_cor1, _cor0, 0)
'follow'/3 =
    %% Line 444
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <D1,D2,N>
	      when call 'erlang':'is_integer'
		    (N) ->
	      let <_cor3> =
		  %% Line 445
		  apply 'nil'/0
		      ()
	      in  let <_cor4> =
		      %% Line 445
		      apply 'par'/2
			  ([D1|[_cor3|[]]], N)
		  in  %% Line 445
		      apply 'beside'/2
			  (_cor4, D2)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'follow',3}}] )
	    -| ['compiler_generated'] )
	end
'floating'/1 =
    %% Line 454
    fun (_cor0) ->
	%% Line 455
	apply 'floating'/3
	    (_cor0, 0, 0)
'floating'/3 =
    %% Line 479
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <D,H,V>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(H)
		in  let <_cor4> =
			call 'erlang':'is_integer'
			    (V)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 480
	      {'float',D,H,V}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'floating',3}}] )
	    -| ['compiler_generated'] )
	end
'format'/1 =
    %% Line 489
    fun (_cor0) ->
	%% Line 490
	apply 'format'/2
	    (_cor0, 80)
'format'/2 =
    %% Line 499
    fun (_cor1,_cor0) ->
	%% Line 500
	apply 'format'/3
	    (_cor1, _cor0, 65)
'format'/3 =
    %% Line 524
    fun (_cor2,_cor1,_cor0) ->
	%% Line 525
	case apply 'best'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 526
	  <'empty'> when 'true' ->
	      %% Line 527
	      call 'erlang':'throw'
		  ('no_layout')
	  %% Line 528
	  <L> when 'true' ->
	      apply 'layout'/1
		  (L)
	end
'layout'/1 =
    %% Line 564
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 565
	    apply 'layout'/3
		(0, _cor0, [])
	in  %% Line 565
	    call 'lists':'reverse'
		(_cor1)
'layout'/3 =
    %% Line 567
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,{'above',{'text',S},L},Cs> when 'true' ->
	      let <_cor4> =
		  %% Line 568
		  apply 'string_chars'/1
		      (S)
	      in  let <_cor3> =
		      %% Line 568
		      apply 'indent'/2
			  (N, Cs)
		  in  let <_cor5> =
			  %% Line 568
			  apply 'flatrev'/2
			      (_cor4, _cor3)
		      in  %% Line 568
			  apply 'layout'/3
			      (N, L, [10|_cor5])
	  %% Line 569
	  <N,{'nest',N1,L},Cs> when 'true' ->
	      let <_cor6> =
		  %% Line 570
		  call 'erlang':'+'
		      (N, N1)
	      in  %% Line 570
		  apply 'layout'/3
		      (_cor6, L, Cs)
	  %% Line 571
	  <N,{'text',S},Cs> when 'true' ->
	      let <_cor8> =
		  %% Line 572
		  apply 'string_chars'/1
		      (S)
	      in  let <_cor7> =
		      %% Line 572
		      apply 'indent'/2
			  (N, Cs)
		  in  %% Line 572
		      apply 'flatrev'/2
			  (_cor8, _cor7)
	  %% Line 573
	  <_X_N,'null',Cs> when 'true' ->
	      %% Line 574
	      Cs
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'layout',3}}] )
	    -| ['compiler_generated'] )
	end
'indent'/2 =
    %% Line 576
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,Cs>
	      when call 'erlang':'>='
		    (N,
		     8) ->
	      let <_cor2> =
		  %% Line 577
		  call 'erlang':'-'
		      (N, 8)
	      in  %% Line 577
		  apply 'indent'/2
		      (_cor2, [9|Cs])
	  %% Line 578
	  <N,Cs>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor3> =
		  %% Line 579
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 579
		  apply 'indent'/2
		      (_cor3, [32|Cs])
	  %% Line 580
	  <_X_N,Cs> when 'true' ->
	      %% Line 581
	      Cs
	end
'flatrev'/2 =
    %% Line 583
    fun (_cor1,_cor0) ->
	%% Line 584
	apply 'flatrev'/3
	    (_cor1, _cor0, [])
'flatrev'/3 =
    %% Line 586
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C = [_cor6|_cor7]|Cs],As,Ss> when 'true' ->
	      %% Line 587
	      apply 'flatrev'/3
		  (C, As, [Cs|Ss])
	  %% Line 588
	  <[[]|Cs],As,Ss> when 'true' ->
	      %% Line 589
	      apply 'flatrev'/3
		  (Cs, As, Ss)
	  %% Line 590
	  <[C|Cs],As,Ss> when 'true' ->
	      %% Line 591
	      apply 'flatrev'/3
		  (Cs, [C|As], Ss)
	  %% Line 592
	  <[],As,[S|Ss]> when 'true' ->
	      %% Line 593
	      apply 'flatrev'/3
		  (S, As, Ss)
	  %% Line 594
	  <[],As,[]> when 'true' ->
	      %% Line 595
	      As
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'flatrev',3}}] )
	    -| ['compiler_generated'] )
	end
'best'/3 =
    %% Line 692
    fun (_cor2,_cor1,_cor0) ->
	%% Line 693
	apply 'rewrite'/2
	    (_cor2, {'c_best_nest',_cor1,_cor0,0})
'rewrite'/2 =
    %% Line 695
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'text',S},C> when 'true' ->
	      %% Line 696
	      case C of
		%% Line 697
		<{'c_best_nest',_cor273,_cor274,N}> when 'true' ->
		    let <_cor2> =
			%% Line 698
			apply 'mktext'/1
			    (S)
		    in  %% Line 698
			apply 'nest'/2
			    (N, _cor2)
		%% Line 699
		<{'c_above_nest',D1,N1,C1}> when 'true' ->
		    %% Line 700
		    case C1 of
		      %% Line 701
		      <{'c_best_nest',W,R,N}> when 'true' ->
			  let <_cor5> =
			      %% Line 705
			      apply 'mktext'/1
				  (S)
			  in  let <_cor3> =
				  %% Line 707
				  call 'erlang':'-'
				      (W, N)
			      in  let <_cor4> =
				      %% Line 706
				      apply 'rewrite'/2
					  (D1, %% Line 707
					       {'c_best_nest',_cor3,%% Line 708
								    R,%% Line 709
								      N1})
				  in  let <_cor6> =
					  %% Line 705
					  apply 'above'/2
					      (_cor5, _cor4)
				      in  %% Line 704
					  apply 'nest'/2
					      (N, _cor6)
		      %% Line 710
		      <{'c_beside',D2,C2}> when 'true' ->
			  let <_cor9> =
			      %% Line 712
			      apply 'mktext'/1
				  (S)
			  in  let <_cor7> =
				  %% Line 713
				  apply 'beside'/2
				      (D1, D2)
			      in  let <_cor8> =
				      %% Line 713
				      apply 'nest'/2
					  (N1, _cor7)
				  in  let <_cor10> =
					  %% Line 712
					  apply 'above'/2
					      (_cor9, _cor8)
				      in  %% Line 712
					  apply 'rewrite'/2
					      (_cor10, %% Line 713
						       C2)
		      %% Line 714
		      <{'c_text_beside',S1,C2}> when 'true' ->
			  let <_cor14> =
			      %% Line 716
			      apply 'concat'/2
				  (S1, S)
			  in  let <_cor15> =
				  %% Line 716
				  apply 'mktext'/1
				      (_cor14)
			      in  let <_cor11> =
				      %% Line 717
				      apply 'width'/1
					  (S1)
				  in  let <_cor12> =
					  %% Line 717
					  call 'erlang':'+'
					      (N1, _cor11)
				      in  let <_cor13> =
					      %% Line 717
					      apply 'nest'/2
						  (_cor12, D1)
					  in  let <_cor16> =
						  %% Line 716
						  apply 'above'/2
						      (_cor15, _cor13)
					      in  %% Line 716
						  apply 'rewrite'/2
						      (_cor16, %% Line 718
							       C2)
		      %% Line 719
		      <{'c_sep_nest',Ds,N,_cor275,C2}> when 'true' ->
			  %% Line 720
			  case apply 'is_empty_string'/1
				   (S) of
			    %% Line 721
			    <'false'> when 'true' ->
				let <W> =
				    %% Line 724
				    apply 'width'/1
					(S)
				in  let <_cor26> =
					%% Line 726
					apply 'mktext'/1
					    (S)
				    in  let <_cor23> =
					    %% Line 727
					    apply 'nil'/0
						()
					in  let <_cor21> =
						%% Line 728
						call 'erlang':'-'
						    (N1, W)
					    in  let <_cor22> =
						    %% Line 728
						    apply 'nest'/2
							(_cor21, %% Line 729
								 D1)
						in  let <_cor24> =
							%% Line 727
							apply 'above'/2
							    (_cor23, _cor22)
						    in  let <_cor20> =
							    %% Line 731
							    call 'erlang':'-'
								(N, W)
							in  let <_cor25> =
								%% Line 727
								apply 'mksep'/3
								    ([_cor24|%% Line 730
									     Ds], _cor20, _cor275)
							    in  let <_cor27> =
								    %% Line 725
								    apply 'beside'/2
									(_cor26, _cor25)
								in  %% Line 725
								    apply 'rewrite'/2
									(_cor27, %% Line 733
										 C2)
			    %% Line 734
			    <'true'> when 'true' ->
				%% Line 744
				case _cor275 of
				  %% Line 745
				  <'false'> when 'true' ->
				      let <_cor31> =
					  %% Line 747
					  apply 'nil'/0
					      ()
				      in  let <_cor30> =
					      %% Line 748
					      apply 'nest'/2
						  (N1, D1)
					  in  let <_cor32> =
						  %% Line 747
						  apply 'above'/2
						      (_cor31, _cor30)
					      in  let <_cor33> =
						      %% Line 746
						      apply 'expand_sep'/3
							  (_cor32, %% Line 749
								   Ds, %% Line 749
								       N)
						  in  %% Line 746
						      apply 'rewrite'/2
							  (_cor33, %% Line 750
								   C2)
				  %% Line 751
				  <'true'> when 'true' ->
				      let <_cor35> =
					  %% Line 753
					  apply 'nil'/0
					      ()
				      in  let <_cor34> =
					      %% Line 754
					      apply 'nest'/2
						  (N1, D1)
					  in  let <_cor36> =
						  %% Line 753
						  apply 'above'/2
						      (_cor35, _cor34)
					      in  let <_cor37> =
						      %% Line 752
						      apply 'expand_par'/3
							  (_cor36, %% Line 755
								   Ds, %% Line 755
								       N)
						  in  %% Line 752
						      apply 'rewrite'/2
							  (_cor37, %% Line 756
								   C2)
				  ( <_cor38> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor38})
				    -| ['compiler_generated'] )
				end
			    ( <_cor39> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor39})
			      -| ['compiler_generated'] )
			  end
		      %% Line 759
		      <{'c_best_nest_or',W,R,N,D}> when 'true' ->
			  let <L> =
			      %% Line 760
			      apply 'width'/1
				  (S)
			  in  let <_cor42> =
				  %% Line 761
				  call 'erlang':'+'
				      (L, N)
			      in  let <_cor43> =
				      %% Line 761
				      call 'erlang':'>'
					  (_cor42, W)
				  in  let <_cor41> =
					  %% Line 761
					  call 'erlang':'>'
					      (L, R)
				      in  %% Line 761
					  case call 'erlang':'or'
						   (_cor43, _cor41) of
					    %% Line 762
					    <'true'> when 'true' ->
						%% Line 765
						apply 'rewrite'/2
						    (D, {'c_best_nest',W,R,%% Line 766
									   N})
					    %% Line 767
					    <'false'> when 'true' ->
						let <_cor45> =
						    %% Line 770
						    apply 'mktext'/1
							(S)
						in  let <_cor44> =
							%% Line 771
							apply 'nest'/2
							    (N1, D1)
						    in  let <_cor46> =
							    %% Line 770
							    apply 'above'/2
								(_cor45, _cor44)
							in  %% Line 770
							    apply 'rewrite'/2
								(_cor46, %% Line 772
									 {'c_best_nest',W,R,%% Line 773
											    N})
					  end
		      %% Line 775
		      <{'c_float_beside',D2,_cor284,_cor285,C2}> when 'true' ->
			  let <_cor49> =
			      %% Line 776
			      apply 'mktext'/1
				  (S)
			  in  let <_cor48> =
				  %% Line 777
				  apply 'nest'/2
				      (N1, D1)
			      in  let <_cor50> =
				      %% Line 776
				      apply 'above'/2
					  (_cor49, _cor48)
				  in  let <_cor51> =
					  %% Line 776
					  apply 'beside'/2
					      (D2, _cor50)
				      in  %% Line 776
					  apply 'rewrite'/2
					      (_cor51, %% Line 778
						       C2)
		      %% Line 779
		      <{'c_float_above_nest',D2,_cor286,_cor287,N2,C2}> when 'true' ->
			  let <_cor53> =
			      %% Line 781
			      apply 'mktext'/1
				  (S)
			  in  let <_cor52> =
				  %% Line 782
				  apply 'nest'/2
				      (N1, D1)
			      in  let <_cor54> =
				      %% Line 781
				      apply 'above'/2
					  (_cor53, _cor52)
				  in  let <_cor55> =
					  %% Line 781
					  apply 'nest'/2
					      (N2, _cor54)
				      in  let <_cor56> =
					      %% Line 780
					      apply 'above'/2
						  (D2, _cor55)
					  in  %% Line 780
					      apply 'rewrite'/2
						  (_cor56, %% Line 783
							   C2)
		      %% Line 784
		      <{'c_above_nest',_cor288,_cor289,_cor290}> when 'true' ->
			  %% Line 785
			  call 'erlang':'exit'
			      ('badarg')
		      %% Line 786
		      <{'c_fit',_cor291}> when 'true' ->
			  %% Line 787
			  call 'erlang':'exit'
			      ('badarg')
		      ( <_cor57> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor57})
			-| ['compiler_generated'] )
		    end
		%% Line 789
		<{'c_beside',D1,C1}> when 'true' ->
		    %% Line 790
		    case C1 of
		      %% Line 791
		      <{'c_above_nest',D2,N,C2}> when 'true' ->
			  %% Line 792
			  case apply 'is_empty_string'/1
				   (S) of
			    %% Line 793
			    <'false'> when 'true' ->
				let <W> =
				    %% Line 796
				    apply 'width'/1
					(S)
				in  let <_cor64> =
					%% Line 797
					apply 'mktext'/1
					    (S)
				    in  let <_cor61> =
					    %% Line 799
					    apply 'nil'/0
						()
					in  let <_cor62> =
						%% Line 799
						apply 'beside'/2
						    (_cor61, D1)
					    in  let <_cor59> =
						    %% Line 800
						    call 'erlang':'-'
							(N, W)
						in  let <_cor60> =
							%% Line 800
							apply 'nest'/2
							    (_cor59, D2)
						    in  let <_cor63> =
							    %% Line 798
							    apply 'above'/2
								(_cor62, _cor60)
							in  let <_cor65> =
								%% Line 797
								apply 'beside'/2
								    (_cor64, _cor63)
							    in  %% Line 797
								apply 'rewrite'/2
								    (_cor65, %% Line 801
									     C2)
			    %% Line 802
			    <'true'> when 'true' ->
				%% Line 804
				apply 'rewrite'/2
				    (D1, {'c_text_beside',S,%% Line 805
							    C1})
			    ( <_cor66> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor66})
			      -| ['compiler_generated'] )
			  end
		      %% Line 807
		      <{'c_text_beside',S1,C2}> when 'true' ->
			  let <_cor67> =
			      %% Line 809
			      apply 'concat'/2
				  (S1, S)
			  in  let <_cor68> =
				  %% Line 809
				  apply 'mktext'/1
				      (_cor67)
			      in  let <_cor69> =
				      %% Line 809
				      apply 'beside'/2
					  (_cor68, D1)
				  in  %% Line 809
				      apply 'rewrite'/2
					  (_cor69, %% Line 810
						   C2)
		      %% Line 811
		      <{'c_sep_nest',Ds,N,_cor292,C2}> when 'true' ->
			  %% Line 812
			  case apply 'is_empty_string'/1
				   (S) of
			    %% Line 813
			    <'false'> when 'true' ->
				let <W> =
				    %% Line 816
				    apply 'width'/1
					(S)
				in  let <_cor77> =
					%% Line 817
					apply 'mktext'/1
					    (S)
				    in  let <_cor74> =
					    %% Line 819
					    apply 'nil'/0
						()
					in  let <_cor75> =
						%% Line 819
						apply 'beside'/2
						    (_cor74, D1)
					    in  let <_cor73> =
						    %% Line 821
						    call 'erlang':'-'
							(N, W)
						in  let <_cor76> =
							%% Line 818
							apply 'mksep'/3
							    (%% Line 819
							     [_cor75|%% Line 820
								     Ds], _cor73, _cor292)
						    in  let <_cor78> =
							    %% Line 817
							    apply 'beside'/2
								(_cor77, _cor76)
							in  %% Line 817
							    apply 'rewrite'/2
								(_cor78, %% Line 823
									 C2)
			    %% Line 824
			    <'true'> when 'true' ->
				%% Line 826
				apply 'rewrite'/2
				    (D1, {'c_text_beside',S,%% Line 827
							    C1})
			    ( <_cor79> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor79})
			      -| ['compiler_generated'] )
			  end
		      %% Line 829
		      <{'c_best_nest_or',W,R,N,D}> when 'true' ->
			  let <L> =
			      %% Line 830
			      apply 'width'/1
				  (S)
			  in  let <_cor82> =
				  %% Line 831
				  call 'erlang':'+'
				      (L, N)
			      in  let <_cor83> =
				      %% Line 831
				      call 'erlang':'>'
					  (_cor82, W)
				  in  let <_cor81> =
					  %% Line 831
					  call 'erlang':'>'
					      (L, R)
				      in  %% Line 831
					  case call 'erlang':'or'
						   (_cor83, _cor81) of
					    %% Line 832
					    <'true'> when 'true' ->
						%% Line 835
						apply 'rewrite'/2
						    (D, {'c_best_nest',W,R,%% Line 836
									   N})
					    %% Line 837
					    <'false'> when 'true' ->
						%% Line 839
						apply 'rewrite'/2
						    (D1, {'c_text_beside',S,%% Line 840
									    C1})
					  end
		      %% Line 842
		      <{'c_float_beside',D2,_cor297,_cor298,C2}> when 'true' ->
			  let <_cor85> =
			      %% Line 843
			      apply 'mktext'/1
				  (S)
			  in  let <_cor86> =
				  %% Line 843
				  apply 'beside'/2
				      (_cor85, D1)
			      in  let <_cor87> =
				      %% Line 843
				      apply 'beside'/2
					  (D2, _cor86)
				  in  %% Line 843
				      apply 'rewrite'/2
					  (_cor87, %% Line 844
						   C2)
		      %% Line 845
		      <{'c_float_above_nest',D2,_cor299,_cor300,N,C2}> when 'true' ->
			  let <_cor88> =
			      %% Line 847
			      apply 'mktext'/1
				  (S)
			  in  let <_cor89> =
				  %% Line 847
				  apply 'beside'/2
				      (_cor88, D1)
			      in  let <_cor90> =
				      %% Line 847
				      apply 'nest'/2
					  (N, _cor89)
				  in  let <_cor91> =
					  %% Line 846
					  apply 'above'/2
					      (D2, _cor90)
				      in  %% Line 846
					  apply 'rewrite'/2
					      (_cor91, %% Line 848
						       C2)
		      %% Line 849
		      <_cor301> when 'true' ->
			  %% Line 851
			  apply 'rewrite'/2
			      (D1, {'c_text_beside',S,C1})
		    end
		%% Line 853
		<{'c_text_beside',S1,C1}> when 'true' ->
		    let <_cor93> =
			%% Line 854
			apply 'concat'/2
			    (S1, S)
		    in  let <_cor94> =
			    %% Line 854
			    apply 'mktext'/1
				(_cor93)
			in  %% Line 854
			    apply 'rewrite'/2
				(_cor94, C1)
		%% Line 855
		<{'c_sep_nest',Ds,N,_cor302,C1}> when 'true' ->
		    %% Line 856
		    case apply 'is_empty_string'/1
			     (S) of
		      %% Line 857
		      <'false'> when 'true' ->
			  let <_cor101> =
			      %% Line 859
			      apply 'mktext'/1
				  (S)
			  in  let <_cor99> =
				  %% Line 860
				  apply 'nil'/0
				      ()
			      in  let <_cor97> =
				      %% Line 861
				      apply 'width'/1
					  (S)
				  in  let <_cor98> =
					  %% Line 861
					  call 'erlang':'-'
					      (N, _cor97)
				      in  let <_cor100> =
					      %% Line 860
					      apply 'mksep'/3
						  ([_cor99|Ds], _cor98, _cor302)
					  in  let <_cor102> =
						  %% Line 859
						  apply 'beside'/2
						      (_cor101, _cor100)
					      in  %% Line 859
						  apply 'rewrite'/2
						      (_cor102, %% Line 863
								C1)
		      %% Line 864
		      <'true'> when 'true' ->
			  %% Line 874
			  case _cor302 of
			    %% Line 875
			    <'false'> when 'true' ->
				let <_cor105> =
				    %% Line 876
				    apply 'nil'/0
					()
				in  let <_cor106> =
					%% Line 876
					apply 'expand_sep'/3
					    (_cor105, Ds, N)
				    in  %% Line 876
					apply 'rewrite'/2
					    (_cor106, C1)
			    %% Line 877
			    <'true'> when 'true' ->
				let <_cor107> =
				    %% Line 878
				    apply 'nil'/0
					()
				in  let <_cor108> =
					%% Line 878
					apply 'expand_par'/3
					    (_cor107, Ds, N)
				    in  %% Line 878
					apply 'rewrite'/2
					    (_cor108, C1)
			    ( <_cor109> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor109})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor110> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor110})
			-| ['compiler_generated'] )
		    end
		%% Line 881
		<{'c_best_nest_or',W,R,N,D}> when 'true' ->
		    let <L> =
			%% Line 882
			apply 'width'/1
			    (S)
		    in  let <_cor113> =
			    %% Line 883
			    call 'erlang':'+'
				(L, N)
			in  let <_cor114> =
				%% Line 883
				call 'erlang':'>'
				    (_cor113, W)
			    in  let <_cor112> =
				    %% Line 883
				    call 'erlang':'>'
					(L, R)
				in  %% Line 883
				    case call 'erlang':'or'
					     (_cor114, _cor112) of
				      %% Line 884
				      <'true'> when 'true' ->
					  %% Line 888
					  apply 'rewrite'/2
					      (D, {'c_best_nest',W,R,N})
				      %% Line 889
				      <'false'> when 'true' ->
					  let <_cor115> =
					      %% Line 890
					      apply 'mktext'/1
						  (S)
					  in  %% Line 890
					      apply 'nest'/2
						  (N, _cor115)
				    end
		%% Line 892
		<{'c_fit',C1}> when 'true' ->
		    let <_cor117> =
			%% Line 894
			apply 'mktext'/1
			    (S)
		    in  %% Line 894
			apply 'rewrite'/2
			    (_cor117, C1)
		%% Line 895
		<{'c_float_beside',D1,_cor311,_cor312,C1}> when 'true' ->
		    let <_cor118> =
			%% Line 896
			apply 'mktext'/1
			    (S)
		    in  let <_cor119> =
			    %% Line 896
			    apply 'beside'/2
				(D1, _cor118)
			in  %% Line 896
			    apply 'rewrite'/2
				(_cor119, C1)
		%% Line 897
		<{'c_float_above_nest',D1,_cor313,_cor314,N,C1}> when 'true' ->
		    let <_cor120> =
			%% Line 898
			apply 'mktext'/1
			    (S)
		    in  let <_cor121> =
			    %% Line 898
			    apply 'nest'/2
				(N, _cor120)
			in  let <_cor122> =
				%% Line 898
				apply 'above'/2
				    (D1, _cor121)
			    in  %% Line 898
				apply 'rewrite'/2
				    (_cor122, C1)
		( <_cor123> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor123})
		  -| ['compiler_generated'] )
	      end
	  %% Line 900
	  <{'nest',N,D},C> when 'true' ->
	      %% Line 901
	      case C of
		%% Line 902
		<{'c_best_nest',W,R,N1}> when 'true' ->
		    let <_cor124> =
			%% Line 906
			call 'erlang':'+'
			    (N, N1)
		    in  %% Line 906
			apply 'rewrite'/2
			    (D, {'c_best_nest',W,R,_cor124})
		%% Line 907
		<{'c_above_nest',D1,N1,C1}> when 'true' ->
		    let <_cor125> =
			%% Line 910
			call 'erlang':'-'
			    (N1, N)
		    in  let <_cor126> =
			    %% Line 910
			    apply 'nest'/2
				(_cor125, D1)
			in  let <_cor127> =
				%% Line 910
				apply 'above'/2
				    (D, _cor126)
			    in  let <_cor128> =
				    %% Line 910
				    apply 'nest'/2
					(N, _cor127)
				in  %% Line 910
				    apply 'rewrite'/2
					(_cor128, C1)
		%% Line 911
		<{'c_beside',D1,C1}> when 'true' ->
		    let <_cor129> =
			%% Line 913
			apply 'beside'/2
			    (D, D1)
		    in  let <_cor130> =
			    %% Line 913
			    apply 'nest'/2
				(N, _cor129)
			in  %% Line 913
			    apply 'rewrite'/2
				(_cor130, C1)
		%% Line 914
		<{'c_text_beside',_cor315,_cor316}> when 'true' ->
		    %% Line 915
		    apply 'rewrite'/2
			(D, C)
		%% Line 916
		<{'c_sep_nest',Ds,N1,_cor317,C1}> when 'true' ->
		    let <_cor133> =
			%% Line 920
			call 'erlang':'-'
			    (N1, N)
		    in  let <_cor134> =
			    %% Line 919
			    apply 'mksep'/3
				([D|Ds], _cor133, _cor317)
			in  let <_cor135> =
				%% Line 919
				apply 'nest'/2
				    (N, _cor134)
			    in  %% Line 919
				apply 'rewrite'/2
				    (_cor135, %% Line 922
					      C1)
		%% Line 923
		<{'c_fit',C1}> when 'true' ->
		    let <_cor136> =
			%% Line 925
			apply 'fit'/1
			    (D)
		    in  let <_cor137> =
			    %% Line 925
			    apply 'nest'/2
				(N, _cor136)
			in  %% Line 925
			    apply 'rewrite'/2
				(_cor137, C1)
		%% Line 926
		<{'c_float_beside',_cor322,_cor323,_cor324,_cor325}> when 'true' ->
		    %% Line 927
		    apply 'rewrite'/2
			(D, C)
		%% Line 928
		<{'c_float_above_nest',D1,H,V,N1,%% Line 929
						 C1}> when 'true' ->
		    let <_cor138> =
			%% Line 931
			call 'erlang':'+'
			    (N, N1)
		    in  %% Line 930
			apply 'rewrite'/2
			    (D, {'c_float_above_nest',D1,H,V,_cor138,%% Line 931
								     C1})
		%% Line 932
		<{'c_best_nest_or',_cor326,_cor327,_cor328,_cor329}> when 'true' ->
		    %% Line 933
		    call 'erlang':'exit'
			('badarg')
		( <_cor139> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor139})
		  -| ['compiler_generated'] )
	      end
	  %% Line 935
	  <{'above',D1,D2},C> when 'true' ->
	      %% Line 936
	      case C of
		%% Line 937
		<{'c_above_nest',D3,N,C1}> when 'true' ->
		    let <_cor140> =
			%% Line 940
			apply 'nest'/2
			    (N, D3)
		    in  let <_cor141> =
			    %% Line 940
			    apply 'above'/2
				(D2, _cor140)
			in  %% Line 940
			    apply 'rewrite'/2
				(D1, {'c_above_nest',_cor141,0,%% Line 941
							       C1})
		%% Line 942
		<{'c_beside',D3,C1}> when 'true' ->
		    let <_cor142> =
			%% Line 944
			apply 'beside'/2
			    (D2, D3)
		    in  let <_cor143> =
			    %% Line 944
			    apply 'above'/2
				(D1, _cor142)
			in  %% Line 944
			    apply 'rewrite'/2
				(_cor143, C1)
		%% Line 945
		<{'c_fit',C1}> when 'true' ->
		    %% Line 946
		    apply 'rewrite'/2
			('empty', C1)
		%% Line 947
		<_cor330> when 'true' ->
		    %% Line 948
		    apply 'rewrite'/2
			(D1, {'c_above_nest',D2,0,C})
	      end
	  %% Line 950
	  <{'beside',D1,D2},C> when 'true' ->
	      %% Line 951
	      case C of
		%% Line 952
		<{'c_beside',D3,C1}> when 'true' ->
		    let <_cor145> =
			%% Line 954
			apply 'beside'/2
			    (D2, D3)
		    in  %% Line 954
			apply 'rewrite'/2
			    (D1, {'c_beside',_cor145,C1})
		%% Line 955
		<{'c_fit',C1}> when 'true' ->
		    let <_cor147> =
			%% Line 957
			apply 'fit'/1
			    (D1)
		    in  let <_cor146> =
			    %% Line 957
			    apply 'fit'/1
				(D2)
			in  let <_cor148> =
				%% Line 957
				apply 'beside'/2
				    (_cor147, _cor146)
			    in  %% Line 957
				apply 'rewrite'/2
				    (_cor148, C1)
		%% Line 958
		<_cor331> when 'true' ->
		    %% Line 959
		    apply 'rewrite'/2
			(D1, {'c_beside',D2,C})
	      end
	  %% Line 961
	  <{'sep',Ds,N,P},C> when 'true' ->
	      %% Line 962
	      case C of
		%% Line 963
		<{'c_fit',C1}> when 'true' ->
		    let <_cor150> =
			%% Line 966
			apply 'horizontal'/1
			    (Ds)
		    in  let <_cor151> =
			    %% Line 966
			    apply 'fit'/1
				(_cor150)
			in  %% Line 966
			    apply 'rewrite'/2
				(_cor151, C1)
		%% Line 967
		<{'c_float_beside',D1,_cor332,_cor333,C1}> when 'true' ->
		    let <_cor152> =
			%% Line 969
			apply 'mksep'/3
			    (Ds, N, P)
		    in  let <_cor153> =
			    %% Line 969
			    apply 'beside'/2
				(D1, _cor152)
			in  %% Line 969
			    apply 'rewrite'/2
				(_cor153, C1)
		%% Line 970
		<{'c_float_above_nest',D1,_cor334,_cor335,N1,C1}> when 'true' ->
		    let <_cor154> =
			%% Line 972
			apply 'mksep'/3
			    (Ds, N, P)
		    in  let <_cor155> =
			    %% Line 972
			    apply 'nest'/2
				(N1, _cor154)
			in  let <_cor156> =
				%% Line 972
				apply 'above'/2
				    (D1, _cor155)
			    in  %% Line 972
				apply 'rewrite'/2
				    (_cor156, C1)
		%% Line 973
		<_cor336> when 'true' ->
		    %% Line 974
		    apply 'enter_sep'/4
			(Ds, N, P, C)
	      end
	  %% Line 976
	  <{'union',D1,D2},C> when 'true' ->
	      %% Line 980
	      case C of
		%% Line 981
		<{'c_best_nest',W,R,N}> when 'true' ->
		    %% Line 983
		    apply 'rewrite'/2
			(D1, {'c_best_nest_or',W,R,N,%% Line 984
						     D2})
		%% Line 985
		<{'c_above_nest',D3,N,C1}> when 'true' ->
		    let <_cor160> =
			%% Line 988
			apply 'nest'/2
			    (N, D3)
		    in  let <_cor161> =
			    %% Line 988
			    apply 'above'/2
				(D1, _cor160)
			in  let <_cor158> =
				%% Line 989
				apply 'nest'/2
				    (N, D3)
			    in  let <_cor159> =
				    %% Line 989
				    apply 'above'/2
					(D2, _cor158)
				in  let <_cor162> =
					%% Line 988
					apply 'union'/2
					    (_cor161, _cor159)
				    in  %% Line 988
					apply 'rewrite'/2
					    (_cor162, %% Line 990
						      C1)
		%% Line 991
		<{'c_beside',D3,C1}> when 'true' ->
		    let <_cor164> =
			%% Line 993
			apply 'beside'/2
			    (D1, D3)
		    in  let <_cor163> =
			    %% Line 993
			    apply 'beside'/2
				(D2, D3)
			in  let <_cor165> =
				%% Line 993
				apply 'union'/2
				    (_cor164, _cor163)
			    in  %% Line 993
				apply 'rewrite'/2
				    (_cor165, C1)
		%% Line 994
		<{'c_text_beside',S,C1}> when 'true' ->
		    let <_cor168> =
			%% Line 996
			apply 'mktext'/1
			    (S)
		    in  let <_cor169> =
			    %% Line 996
			    apply 'beside'/2
				(_cor168, D1)
			in  let <_cor166> =
				%% Line 997
				apply 'mktext'/1
				    (S)
			    in  let <_cor167> =
				    %% Line 997
				    apply 'beside'/2
					(_cor166, D2)
				in  let <_cor170> =
					%% Line 996
					apply 'union'/2
					    (_cor169, _cor167)
				    in  %% Line 996
					apply 'rewrite'/2
					    (_cor170, %% Line 998
						      C1)
		%% Line 999
		<{'c_sep_nest',Ds,N,_cor337,C1}> when 'true' ->
		    let <_cor176> =
			%% Line 1001
			apply 'mksep'/3
			    ([D1|Ds], N, _cor337)
		    in  let <_cor173> =
			    %% Line 1002
			    apply 'mksep'/3
				([D2|Ds], N, _cor337)
			in  let <_cor177> =
				%% Line 1001
				apply 'union'/2
				    (_cor176, _cor173)
			    in  %% Line 1001
				apply 'rewrite'/2
				    (_cor177, %% Line 1003
					      C1)
		%% Line 1004
		<{'c_best_nest_or',W,R,N,D3}> when 'true' ->
		    let <_cor178> =
			%% Line 1007
			apply 'union'/2
			    (D2, D3)
		    in  %% Line 1006
			apply 'rewrite'/2
			    (D1, {'c_best_nest_or',W,R,N,_cor178})
		%% Line 1008
		<{'c_fit',C1}> when 'true' ->
		    let <_cor180> =
			%% Line 1010
			apply 'fit'/1
			    (D1)
		    in  let <_cor179> =
			    %% Line 1010
			    apply 'fit'/1
				(D2)
			in  let <_cor181> =
				%% Line 1010
				apply 'union'/2
				    (_cor180, _cor179)
			    in  %% Line 1010
				apply 'rewrite'/2
				    (_cor181, C1)
		%% Line 1011
		<{'c_float_beside',D3,H,V,C1}> when 'true' ->
		    let <_cor184> =
			%% Line 1013
			apply 'floating'/3
			    (D3, H, V)
		    in  let <_cor185> =
			    %% Line 1013
			    apply 'beside'/2
				(_cor184, D1)
			in  let <_cor182> =
				%% Line 1014
				apply 'floating'/3
				    (D3, H, V)
			    in  let <_cor183> =
				    %% Line 1014
				    apply 'beside'/2
					(_cor182, D2)
				in  let <_cor186> =
					%% Line 1013
					apply 'union'/2
					    (_cor185, _cor183)
				    in  %% Line 1013
					apply 'rewrite'/2
					    (_cor186, %% Line 1015
						      C1)
		%% Line 1016
		<{'c_float_above_nest',D3,H,V,N,C1}> when 'true' ->
		    let <_cor191> =
			%% Line 1018
			apply 'floating'/3
			    (D3, H, V)
		    in  let <_cor190> =
			    %% Line 1018
			    apply 'nest'/2
				(N, D1)
			in  let <_cor192> =
				%% Line 1018
				apply 'above'/2
				    (_cor191, _cor190)
			    in  let <_cor188> =
				    %% Line 1019
				    apply 'floating'/3
					(D3, H, V)
				in  let <_cor187> =
					%% Line 1019
					apply 'nest'/2
					    (N, D2)
				    in  let <_cor189> =
					    %% Line 1019
					    apply 'above'/2
						(_cor188, _cor187)
					in  let <_cor193> =
						%% Line 1018
						apply 'union'/2
						    (_cor192, _cor189)
					    in  %% Line 1018
						apply 'rewrite'/2
						    (_cor193, %% Line 1020
							      C1)
		( <_cor194> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor194})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1022
	  <'empty',C> when 'true' ->
	      %% Line 1024
	      case C of
		%% Line 1025
		<{'c_best_nest',_cor346,_cor347,_cor348}> when 'true' ->
		    %% Line 1026
		    'empty'
		%% Line 1027
		<{'c_above_nest',_cor349,_cor350,C1}> when 'true' ->
		    %% Line 1028
		    apply 'rewrite'/2
			('empty', C1)
		%% Line 1029
		<{'c_beside',_cor351,C1}> when 'true' ->
		    %% Line 1030
		    apply 'rewrite'/2
			('empty', C1)
		%% Line 1031
		<{'c_text_beside',_cor352,C1}> when 'true' ->
		    %% Line 1032
		    apply 'rewrite'/2
			('empty', C1)
		%% Line 1033
		<{'c_sep_nest',_cor353,_cor354,_cor355,C1}> when 'true' ->
		    %% Line 1034
		    apply 'rewrite'/2
			('empty', C1)
		%% Line 1035
		<{'c_best_nest_or',W,R,N,D}> when 'true' ->
		    %% Line 1037
		    apply 'rewrite'/2
			(D, {'c_best_nest',W,R,N})
		%% Line 1038
		<{'c_fit',C1}> when 'true' ->
		    %% Line 1039
		    apply 'rewrite'/2
			('empty', C1)
		%% Line 1040
		<{'c_float_beside',_cor356,_cor357,_cor358,C1}> when 'true' ->
		    %% Line 1041
		    apply 'rewrite'/2
			('empty', C1)
		%% Line 1042
		<{'c_float_above_nest',_cor359,_cor360,_cor361,_cor362,C1}> when 'true' ->
		    %% Line 1043
		    apply 'rewrite'/2
			('empty', C1)
		( <_cor195> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor195})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1045
	  <{'fit',D},C> when 'true' ->
	      %% Line 1048
	      case C of
		%% Line 1049
		<{'c_fit',_cor363}> when 'true' ->
		    %% Line 1051
		    apply 'rewrite'/2
			(D, C)
		%% Line 1052
		<_cor364> when 'true' ->
		    %% Line 1053
		    apply 'rewrite'/2
			(D, {'c_fit',C})
	      end
	  %% Line 1055
	  <{'float',D,H,V},C> when 'true' ->
	      %% Line 1056
	      case C of
		%% Line 1057
		<{'c_beside',D1,C1}> when 'true' ->
		    %% Line 1058
		    case C1 of
		      %% Line 1059
		      <{'c_float_beside',D2,H1,V1,C2}>
			  when %% Line 1060
			    call 'erlang':'>'
				(H1,
				 H) ->
			  let <_cor199> =
			      %% Line 1062
			      apply 'floating'/3
				  (D, H, V)
			  in  let <_cor197> =
				  %% Line 1063
				  apply 'floating'/3
				      (D2, H1, V1)
			      in  let <_cor198> =
				      %% Line 1063
				      apply 'beside'/2
					  (_cor197, %% Line 1064
						    D1)
				  in  let <_cor200> =
					  %% Line 1062
					  apply 'beside'/2
					      (_cor199, _cor198)
				      in  %% Line 1062
					  apply 'rewrite'/2
					      (_cor200, %% Line 1065
							C2)
		      %% Line 1066
		      <{'c_float_beside',D2,H1,V1,C2}>
			  when %% Line 1067
			    call 'erlang':'/='
				(V1,
				 V) ->
			  let <_cor203> =
			      %% Line 1069
			      apply 'floating'/3
				  (D2, H1, V1)
			  in  let <_cor201> =
				  %% Line 1070
				  apply 'floating'/3
				      (D, H, V)
			      in  let <_cor202> =
				      %% Line 1070
				      apply 'beside'/2
					  (_cor201, D1)
				  in  let <_cor204> =
					  %% Line 1069
					  apply 'above'/2
					      (_cor203, _cor202)
				      in  %% Line 1069
					  apply 'rewrite'/2
					      (_cor204, %% Line 1071
							C2)
		      %% Line 1072
		      <{'c_float_above_nest',D2,H1,V1,%% Line 1073
						      N1,%% Line 1073
							 C2}>
			  when %% Line 1074
			    call 'erlang':'>'
				(V1,
				 V) ->
			  let <_cor207> =
			      %% Line 1077
			      apply 'floating'/3
				  (D, H, V)
			  in  let <_cor208> =
				  %% Line 1077
				  apply 'nest'/2
				      (N1, _cor207)
			      in  let <_cor205> =
				      %% Line 1078
				      apply 'floating'/3
					  (D2, H1, V1)
				  in  let <_cor206> =
					  %% Line 1078
					  apply 'above'/2
					      (_cor205, %% Line 1079
							D1)
				      in  let <_cor209> =
					      %% Line 1077
					      apply 'above'/2
						  (_cor208, _cor206)
					  in  %% Line 1077
					      apply 'rewrite'/2
						  (_cor209, %% Line 1080
							    C2)
		      %% Line 1081
		      <{'c_float_above_nest',D2,H1,V1,%% Line 1082
						      _X_N1,%% Line 1082
							    C2}>
			  when let <_cor210> =
				%% Line 1083
				call 'erlang':'=='
				    (V1, V)
			    in  let <_cor211> =
				    %% Line 1083
				    call 'erlang':'/='
					(H1, H)
				in  %% Line 1083
				    call 'erlang':'and'
					(_cor210, _cor211) ->
			  let <_cor214> =
			      %% Line 1085
			      apply 'floating'/3
				  (D2, H1, V1)
			  in  let <_cor212> =
				  %% Line 1086
				  apply 'floating'/3
				      (D, H, V)
			      in  let <_cor213> =
				      %% Line 1086
				      apply 'beside'/2
					  (_cor212, %% Line 1087
						    D1)
				  in  let <_cor215> =
					  %% Line 1085
					  apply 'beside'/2
					      (_cor214, _cor213)
				      in  %% Line 1085
					  apply 'rewrite'/2
					      (_cor215, %% Line 1088
							C2)
		      %% Line 1089
		      <_cor365> when 'true' ->
			  %% Line 1090
			  apply 'rewrite'/2
			      (D1, {'c_float_beside',D,H,%% Line 1091
							 V,%% Line 1091
							   C1})
		    end
		%% Line 1093
		<{'c_above_nest',D1,N,C1}> when 'true' ->
		    %% Line 1094
		    case C1 of
		      %% Line 1095
		      <{'c_float_beside',D2,H1,V1,C2}>
			  when %% Line 1096
			    call 'erlang':'>'
				(H1,
				 H) ->
			  let <_cor219> =
			      %% Line 1099
			      apply 'floating'/3
				  (D, H, V)
			  in  let <_cor217> =
				  %% Line 1100
				  apply 'floating'/3
				      (D2, H1, V1)
			      in  let <_cor218> =
				      %% Line 1100
				      apply 'beside'/2
					  (_cor217, %% Line 1101
						    D1)
				  in  let <_cor220> =
					  %% Line 1099
					  apply 'beside'/2
					      (_cor219, _cor218)
				      in  %% Line 1099
					  apply 'rewrite'/2
					      (_cor220, %% Line 1102
							C2)
		      %% Line 1103
		      <{'c_float_beside',D2,H1,V1,C2}>
			  when %% Line 1104
			    call 'erlang':'/='
				(V1,
				 V) ->
			  let <_cor224> =
			      %% Line 1106
			      apply 'floating'/3
				  (D2, H1, V1)
			  in  let <_cor222> =
				  %% Line 1107
				  apply 'floating'/3
				      (D, H, V)
			      in  let <_cor221> =
				      %% Line 1108
				      apply 'nest'/2
					  (N, D1)
				  in  let <_cor223> =
					  %% Line 1107
					  apply 'above'/2
					      (_cor222, _cor221)
				      in  let <_cor225> =
					      %% Line 1106
					      apply 'above'/2
						  (_cor224, _cor223)
					  in  %% Line 1106
					      apply 'rewrite'/2
						  (_cor225, %% Line 1109
							    C2)
		      %% Line 1110
		      <{'c_float_above_nest',D2,H1,V1,%% Line 1111
						      N1,%% Line 1111
							 C2}>
			  when %% Line 1112
			    call 'erlang':'>'
				(V1,
				 V) ->
			  let <_cor230> =
			      %% Line 1114
			      apply 'floating'/3
				  (D, H, V)
			  in  let <_cor231> =
				  %% Line 1114
				  apply 'nest'/2
				      (N1, _cor230)
			      in  let <_cor228> =
				      %% Line 1115
				      apply 'floating'/3
					  (D2, H1, V1)
				  in  let <_cor226> =
					  %% Line 1116
					  call 'erlang':'+'
					      (N, N1)
				      in  let <_cor227> =
					      %% Line 1116
					      apply 'nest'/2
						  (_cor226, D1)
					  in  let <_cor229> =
						  %% Line 1115
						  apply 'above'/2
						      (_cor228, _cor227)
					      in  let <_cor232> =
						      %% Line 1114
						      apply 'above'/2
							  (_cor231, _cor229)
						  in  %% Line 1114
						      apply 'rewrite'/2
							  (_cor232, %% Line 1117
								    C2)
		      %% Line 1118
		      <{'c_float_above_nest',D2,H1,V1,%% Line 1119
						      _X_N1,%% Line 1119
							    C2}>
			  when let <_cor233> =
				%% Line 1120
				call 'erlang':'=='
				    (V1, V)
			    in  let <_cor234> =
				    %% Line 1120
				    call 'erlang':'/='
					(H1, H)
				in  %% Line 1120
				    call 'erlang':'and'
					(_cor233, _cor234) ->
			  let <_cor238> =
			      %% Line 1123
			      apply 'floating'/3
				  (D2, H1, V1)
			  in  let <_cor236> =
				  %% Line 1124
				  apply 'floating'/3
				      (D, H, V)
			      in  let <_cor235> =
				      %% Line 1125
				      apply 'nest'/2
					  (N, D1)
				  in  let <_cor237> =
					  %% Line 1124
					  apply 'above'/2
					      (_cor236, _cor235)
				      in  let <_cor239> =
					      %% Line 1122
					      apply 'beside'/2
						  (_cor238, _cor237)
					  in  %% Line 1122
					      apply 'rewrite'/2
						  (_cor239, %% Line 1126
							    C2)
		      %% Line 1127
		      <_cor366> when 'true' ->
			  %% Line 1128
			  apply 'rewrite'/2
			      (D1, {'c_float_above_nest',D,H,%% Line 1129
							     V,%% Line 1129
							       N,%% Line 1130
								 C1})
		    end
		%% Line 1132
		<{'c_fit',C1}> when 'true' ->
		    let <_cor241> =
			%% Line 1133
			apply 'fit'/1
			    (D)
		    in  let <_cor242> =
			    %% Line 1133
			    apply 'floating'/3
				(_cor241, H, V)
			in  %% Line 1133
			    apply 'rewrite'/2
				(_cor242, C1)
		%% Line 1134
		<{'c_float_beside',D1,H1,V1,C1}> when 'true' ->
		    %% Line 1135
		    case <> of
		      <>
			  when call 'erlang':'>'
				(H1,
				 H) ->
			  let <_cor244> =
			      %% Line 1137
			      apply 'floating'/3
				  (D, H, V)
			  in  let <_cor243> =
				  %% Line 1138
				  apply 'floating'/3
				      (D1, H1, V1)
			      in  let <_cor245> =
				      %% Line 1137
				      apply 'beside'/2
					  (_cor244, _cor243)
				  in  %% Line 1137
				      apply 'rewrite'/2
					  (_cor245, %% Line 1139
						    C1)
		      %% Line 1140
		      <>
			  when call 'erlang':'/='
				(V1,
				 V) ->
			  let <_cor247> =
			      %% Line 1142
			      apply 'floating'/3
				  (D, H, V)
			  in  let <_cor246> =
				  %% Line 1143
				  apply 'floating'/3
				      (D1, H1, V1)
			      in  let <_cor248> =
				      %% Line 1142
				      apply 'above'/2
					  (_cor247, _cor246)
				  in  %% Line 1142
				      apply 'rewrite'/2
					  (_cor248, %% Line 1144
						    C1)
		      %% Line 1145
		      <> when 'true' ->
			  let <_cor249> =
			      %% Line 1147
			      apply 'floating'/3
				  (D1, H1, V1)
			  in  let <_cor250> =
				  %% Line 1147
				  apply 'beside'/2
				      (_cor249, D)
			      in  %% Line 1147
				  apply 'rewrite'/2
				      (_cor250, C1)
		    end
		%% Line 1149
		<{'c_float_above_nest',D1,H1,V1,N,%% Line 1150
						  C1}> when 'true' ->
		    %% Line 1151
		    case <> of
		      <>
			  when call 'erlang':'>'
				(V1,
				 V) ->
			  let <_cor252> =
			      %% Line 1153
			      apply 'floating'/3
				  (D, H, V)
			  in  let <_cor253> =
				  %% Line 1153
				  apply 'nest'/2
				      (N, _cor252)
			      in  let <_cor251> =
				      %% Line 1154
				      apply 'floating'/3
					  (D1, H1, V1)
				  in  let <_cor254> =
					  %% Line 1153
					  apply 'above'/2
					      (_cor253, _cor251)
				      in  %% Line 1153
					  apply 'rewrite'/2
					      (_cor254, %% Line 1155
							C1)
		      %% Line 1156
		      <>
			  when let <_cor255> =
				call 'erlang':'=='
				    (V1, V)
			    in  let <_cor256> =
				    call 'erlang':'/='
					(H1, H)
				in  call 'erlang':'and'
					(_cor255, _cor256) ->
			  let <_cor258> =
			      %% Line 1158
			      apply 'floating'/3
				  (D, H, V)
			  in  let <_cor257> =
				  %% Line 1159
				  apply 'floating'/3
				      (D1, H1, V1)
			      in  let <_cor259> =
				      %% Line 1158
				      apply 'beside'/2
					  (_cor258, _cor257)
				  in  %% Line 1158
				      apply 'rewrite'/2
					  (_cor259, %% Line 1160
						    C1)
		      %% Line 1161
		      <> when 'true' ->
			  let <_cor261> =
			      %% Line 1163
			      apply 'floating'/3
				  (D1, H1, V1)
			  in  let <_cor260> =
				  %% Line 1164
				  apply 'nest'/2
				      (N, D)
			      in  let <_cor262> =
				      %% Line 1163
				      apply 'above'/2
					  (_cor261, _cor260)
				  in  %% Line 1163
				      apply 'rewrite'/2
					  (_cor262, %% Line 1165
						    C1)
		    end
		%% Line 1167
		<_cor367> when 'true' ->
		    %% Line 1169
		    apply 'rewrite'/2
			(D, C)
	      end
	  %% Line 1171
	  <'null',C> when 'true' ->
	      %% Line 1172
	      case C of
		%% Line 1173
		<{'c_best_nest',_cor368,_cor369,_cor370}> when 'true' ->
		    %% Line 1174
		    'null'
		%% Line 1175
		<{'c_above_nest',D,N,C1}> when 'true' ->
		    let <_cor264> =
			%% Line 1176
			apply 'nest'/2
			    (N, D)
		    in  %% Line 1176
			apply 'rewrite'/2
			    (_cor264, C1)
		%% Line 1177
		<{'c_beside',D,C1}> when 'true' ->
		    %% Line 1178
		    apply 'rewrite'/2
			(D, C1)
		%% Line 1179
		<{'c_text_beside',S,C1}> when 'true' ->
		    let <_cor265> =
			%% Line 1180
			apply 'mktext'/1
			    (S)
		    in  %% Line 1180
			apply 'rewrite'/2
			    (_cor265, C1)
		%% Line 1181
		<{'c_sep_nest',_cor371,_cor372,_cor373,_cor374}> when 'true' ->
		    let <_cor266> =
			%% Line 1184
			apply 'nil'/0
			    ()
		    in  %% Line 1184
			apply 'rewrite'/2
			    (_cor266, C)
		%% Line 1185
		<{'c_best_nest_or',W,R,N,_cor375}> when 'true' ->
		    %% Line 1188
		    apply 'rewrite'/2
			('null', {'c_best_nest',W,R,N})
		%% Line 1189
		<{'c_fit',C1}> when 'true' ->
		    %% Line 1190
		    apply 'rewrite'/2
			('null', C1)
		%% Line 1191
		<{'c_float_beside',D,_X_H,_X_V,C1}> when 'true' ->
		    let <_cor267> =
			%% Line 1193
			apply 'beside'/2
			    (D, 'null')
		    in  %% Line 1193
			apply 'rewrite'/2
			    (_cor267, C1)
		%% Line 1194
		<{'c_float_above_nest',D,_X_H,_X_V,N,C1}> when 'true' ->
		    let <_cor268> =
			%% Line 1199
			apply 'nest'/2
			    (N, 'null')
		    in  let <_cor269> =
			    %% Line 1199
			    apply 'above'/2
				(D, _cor268)
			in  %% Line 1199
			    apply 'rewrite'/2
				(_cor269, C1)
		( <_cor270> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor270})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor272,_cor271> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor272,_cor271})
		  -| [{'function_name',{'rewrite',2}}] )
	    -| ['compiler_generated'] )
	end
'nil'/0 =
    %% Line 1204
    fun () ->
	%% Line 1205
	apply 'text'/1
	    ([])
'hspace'/0 =
    %% Line 1207
    fun () ->
	%% Line 1208
	apply 'text'/1
	    ([32])
'union'/2 =
    %% Line 1210
    fun (_cor1,_cor0) ->
	%% Line 1211
	{'union',_cor1,_cor0}
'fit'/1 =
    %% Line 1213
    fun (_cor0) ->
	%% Line 1214
	{'fit',_cor0}
'enter_sep'/4 =
    %% Line 1216
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1217
	case _cor3 of
	  %% Line 1218
	  <[D|[]]> when 'true' ->
	      %% Line 1219
	      apply 'rewrite'/2
		  (D, _cor0)
	  %% Line 1220
	  <[D|Ds1]> when 'true' ->
	      %% Line 1223
	      apply 'rewrite'/2
		  (D, {'c_sep_nest',Ds1,_cor2,_cor1,_cor0})
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'expand_sep'/3 =
    %% Line 1229
    fun (_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 1230
	    apply 'horizontal'/1
		([_cor2|_cor1])
	in  let <_cor11> =
		%% Line 1230
		apply 'fit'/1
		    (_cor10)
	    in  let <_cor8> =
		    %% Line 1231
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor5) ->
				  case _cor5 of
				    <[D1|_cor4]> when 'true' ->
					let <_cor6> =
					    apply 'nest'/2
						(_cor0, D1)
					in  let <_cor7> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor6|_cor7]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor5> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor5})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor1)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 1231
			apply 'vertical'/1
			    ([_cor2|_cor8])
		    in  %% Line 1230
			apply 'union'/2
			    (_cor11, _cor9)
'expand_par'/3 =
    %% Line 1233
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <D,DL = [D1|Ds],N> when 'true' ->
	      let <_cor11> =
		  %% Line 1234
		  apply 'fit'/1
		      (D)
	      in  let <_cor9> =
		      %% Line 1235
		      apply 'hspace'/0
			  ()
		  in  let <_cor7> =
			  %% Line 1236
			  apply 'fit'/1
			      (D1)
		      in  let <_cor6> =
			      %% Line 1236
			      call 'erlang':'-'
				  (N, 1)
			  in  let <_cor8> =
				  %% Line 1236
				  apply 'mksep'/3
				      ([_cor7|Ds], _cor6, 'true')
			      in  let <_cor10> =
				      %% Line 1235
				      apply 'beside'/2
					  (_cor9, _cor8)
				  in  let <_cor12> =
					  %% Line 1234
					  apply 'beside'/2
					      (_cor11, _cor10)
				      in  let <_cor3> =
					      %% Line 1237
					      apply 'par'/1
						  (DL)
					  in  let <_cor4> =
						  %% Line 1237
						  apply 'nest'/2
						      (N, _cor3)
					      in  let <_cor5> =
						      %% Line 1237
						      apply 'above'/2
							  (D, _cor4)
						  in  %% Line 1234
						      apply 'union'/2
							  (_cor12, _cor5)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'expand_par',3}}] )
	    -| ['compiler_generated'] )
	end
'horizontal'/1 =
    %% Line 1239
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 1240
	    ( fun (_cor4,_cor3) ->
		  let <_cor1> =
		      %% Line 1241
		      apply 'hspace'/0
			  ()
		  in  let <_cor2> =
			  %% Line 1241
			  apply 'beside'/2
			      (_cor1, _cor3)
		      in  %% Line 1241
			  apply 'beside'/2
			      (_cor4, _cor2)
	      -| [{'id',{0,0,'-horizontal/1-fun-0-'}}] )
	in  %% Line 1240
	    apply 'foldr1'/2
		(_cor7, _cor0)
'vertical'/1 =
    %% Line 1244
    fun (_cor0) ->
	%% Line 1245
	apply 'foldr1'/2
	    (( 'above'/2
	       -| [{'id',{0,0,'-vertical/1-fun-0-'}}] ), _cor0)
'foldr1'/2 =
    %% Line 1247
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_F,[H|[]]> when 'true' ->
	      %% Line 1248
	      H
	  %% Line 1249
	  <F,[H|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 1250
		  apply 'foldr1'/2
		      (F, T)
	      in  %% Line 1250
		  apply F
		      (H, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'foldr1',2}}] )
	    -| ['compiler_generated'] )
	end
'string'/1 =
    %% Line 1258
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1259
	    apply 'strwidth'/1
		(_cor0)
	in  %% Line 1259
	    [_cor1|_cor0]
'null_string'/1 =
    %% Line 1261
    fun (_cor0) ->
	%% Line 1262
	[0|_cor0]
'concat'/2 =
    %% Line 1264
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[_cor5|[]],S = [_cor6|_cor7]> when 'true' ->
	      %% Line 1265
	      S
	  %% Line 1266
	  <S = [_cor8|_cor9],[_cor10|[]]> when 'true' ->
	      %% Line 1267
	      S
	  %% Line 1268
	  <[L1|S1],[L2|S2]> when 'true' ->
	      let <_cor2> =
		  %% Line 1269
		  call 'erlang':'+'
		      (L1, L2)
	      in  %% Line 1269
		  [_cor2|[S1|S2]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'concat',2}}] )
	    -| ['compiler_generated'] )
	end
'string_chars'/1 =
    %% Line 1271
    fun (_cor0) ->
	case _cor0 of
	  <[_cor2|S]> when 'true' ->
	      %% Line 1272
	      S
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'string_chars',1}}] )
	    -| ['compiler_generated'] )
	end
'width'/1 =
    %% Line 1274
    fun (_cor0) ->
	%% Line 1275
	call 'erlang':'hd'
	    (_cor0)
'is_empty_string'/1 =
    %% Line 1277
    fun (_cor0) ->
	case _cor0 of
	  <[_cor2|[]]> when 'true' ->
	      %% Line 1278
	      'true'
	  %% Line 1279
	  <[_cor3|_cor4]> when 'true' ->
	      %% Line 1280
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_empty_string',1}}] )
	    -| ['compiler_generated'] )
	end
'strwidth'/1 =
    %% Line 1289
    fun (_cor0) ->
	%% Line 1290
	apply 'strwidth'/2
	    (_cor0, 0)
'strwidth'/2 =
    %% Line 1292
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[9|Cs],N> when 'true' ->
	      let <_cor2> =
		  %% Line 1293
		  call 'erlang':'rem'
		      (N, 8)
	      in  let <_cor3> =
		      %% Line 1293
		      call 'erlang':'-'
			  (N, _cor2)
		  in  let <_cor4> =
			  %% Line 1293
			  call 'erlang':'+'
			      (_cor3, 8)
		      in  %% Line 1293
			  apply 'strwidth'/2
			      (Cs, _cor4)
	  %% Line 1294
	  <[_cor8|Cs],N> when 'true' ->
	      let <_cor5> =
		  %% Line 1295
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1295
		  apply 'strwidth'/2
		      (Cs, _cor5)
	  %% Line 1296
	  <[],N> when 'true' ->
	      %% Line 1297
	      N
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'strwidth',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('prettypr')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('prettypr', _cor0)
end