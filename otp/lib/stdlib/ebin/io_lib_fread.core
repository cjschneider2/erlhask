module 'io_lib_fread' ['fread'/2,
		       'fread'/3,
		       'module_info'/0,
		       'module_info'/1]
    attributes [%% Line 38
		'spec' =
		    %% Line 38
		    [{{'fread',3},[{'type',38,'bounded_fun',[{'type',38,'fun',[{'type',38,'product',[{'var',38,'Continuation'}|[{'var',38,'String'}|[{'var',38,'Format'}]]]}|[{'var',38,'Return'}]]}|[[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Continuation'}|[{'type',39,'union',[{'remote_type',39,[{'atom',39,'io_lib'}|[{'atom',39,'continuation'}|[[]]]]}|[{'type',39,'nil',[]}]]}]]]]}|[{'type',40,'constraint',[{'atom',40,'is_subtype'}|[[{'var',40,'String'}|[{'type',40,'string',[]}]]]]}|[{'type',41,'constraint',[{'atom',41,'is_subtype'}|[[{'var',41,'Format'}|[{'type',41,'string',[]}]]]]}|[{'type',42,'constraint',[{'atom',42,'is_subtype'}|[[{'var',42,'Return'}|[{'type',42,'union',[{'type',42,'tuple',[{'atom',42,'more'}|[{'ann_type',42,[{'var',42,'Continuation1'}|[{'remote_type',42,[{'atom',42,'io_lib'}|[{'atom',42,'continuation'}|[[]]]]}]]}]]}|[{'type',43,'tuple',[{'atom',43,'done'}|[{'var',43,'Result'}|[{'ann_type',43,[{'var',43,'LeftOverChars'}|[{'type',43,'string',[]}]]}]]]}]]}]]]]}|[{'type',44,'constraint',[{'atom',44,'is_subtype'}|[[{'var',44,'Result'}|[{'type',44,'union',[{'type',44,'tuple',[{'atom',44,'ok'}|[{'ann_type',44,[{'var',44,'InputList'}|[{'type',44,'list',[{'remote_type',44,[{'atom',44,'io_lib'}|[{'atom',44,'fread_item'}|[[]]]]}]}]]}]]}|[{'atom',45,'eof'}|[{'type',46,'tuple',[{'atom',46,'error'}|[{'type',46,'tuple',[{'atom',46,'fread'}|[{'ann_type',46,[{'var',46,'What'}|[{'remote_type',46,[{'atom',46,'io_lib'}|[{'atom',46,'fread_error'}|[[]]]]}]]}]]}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'fread',2},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'Format'}|[{'var',101,'String'}]]}|[{'var',101,'Result'}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Format'}|[{'type',102,'string',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'String'}|[{'type',103,'string',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Result'}|[{'type',104,'union',[{'type',104,'tuple',[{'atom',104,'ok'}|[{'ann_type',104,[{'var',104,'InputList'}|[{'type',104,'list',[{'remote_type',104,[{'atom',104,'io_lib'}|[{'atom',104,'fread_item'}|[[]]]]}]}]]}|[{'ann_type',105,[{'var',105,'LeftOverChars'}|[{'type',105,'string',[]}]]}]]]}|[{'type',106,'tuple',[{'atom',106,'more'}|[{'ann_type',106,[{'var',106,'RestFormat'}|[{'type',106,'string',[]}]]}|[{'ann_type',107,[{'var',107,'Nchars'}|[{'type',107,'non_neg_integer',[]}]]}|[{'ann_type',108,[{'var',108,'InputStack'}|[{'remote_type',108,[{'atom',108,'io_lib'}|[{'atom',108,'chars'}|[[]]]]}]]}]]]]}|[{'type',109,'tuple',[{'atom',109,'error'}|[{'type',109,'tuple',[{'atom',109,'fread'}|[{'ann_type',109,[{'var',109,'What'}|[{'remote_type',109,[{'atom',109,'io_lib'}|[{'atom',109,'fread_error'}|[[]]]]}]]}]]}]]}]]]}]]]]}]]]]]}]}]]
'fread'/3 =
    %% Line 48
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Chars,Format> when 'true' ->
	      %% Line 50
	      apply 'fread_collect'/5
		  (Format, [], 0, [], Chars)
	  %% Line 51
	  <_X_Continuation = {Format,Stack,N,Results},Chars,_cor6> when 'true' ->
	      %% Line 53
	      apply 'fread_collect'/5
		  (Format, Stack, N, Results, Chars)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'fread',3}}] )
	    -| ['compiler_generated'] )
	end
'fread_collect'/5 =
    %% Line 55
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Format,[13|Stack],N,Results,[10|Chars]> when 'true' ->
	      let <_cor5> =
		  %% Line 56
		  call 'lists':'reverse'
		      (Stack)
	      in  %% Line 56
		  apply 'fread_line'/6
		      (Format, _cor5, N, Results, Chars, [13|[10]])
	  %% Line 57
	  <Format,Stack,N,Results,[10|Chars]> when 'true' ->
	      let <_cor6> =
		  %% Line 58
		  call 'lists':'reverse'
		      (Stack)
	      in  %% Line 58
		  apply 'fread_line'/6
		      (Format, _cor6, N, Results, Chars, [10])
	  %% Line 59
	  <Format,Stack,N,Results,[]> when 'true' ->
	      let <Continuation> =
		  %% Line 60
		  {Format,Stack,N,Results}
	      in  %% Line 61
		  {'more',Continuation}
	  %% Line 62
	  <Format,[13|Stack],N,Results,Chars> when 'true' ->
	      let <_cor8> =
		  %% Line 63
		  call 'lists':'reverse'
		      (Stack)
	      in  %% Line 63
		  apply 'fread_line'/6
		      (Format, _cor8, N, Results, Chars, [13])
	  %% Line 64
	  <Format,Stack,N,Results,[C|Chars]> when 'true' ->
	      %% Line 65
	      apply 'fread_collect'/5
		  (Format, [C|Stack], N, Results, Chars)
	  %% Line 66
	  <Format,Stack,N,Results,Chars> when 'true' ->
	      let <_cor9> =
		  %% Line 67
		  call 'lists':'reverse'
		      (Stack)
	      in  %% Line 67
		  apply 'fread_line'/6
		      (Format, _cor9, N, Results, Chars, [])
	end
'fread_line'/6 =
    %% Line 69
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 71
	    case <> of
	      <>
		  when call 'erlang':'is_list'
			(_cor1) ->
		  _cor1
	      <> when 'true' ->
		  []
	    end
	in  %% Line 72
	    case apply 'fread'/4
		     (_cor5, _cor4, _cor3, _cor2) of
	      %% Line 73
	      <{'ok',Results,[]}> when 'true' ->
		  %% Line 74
		  {'done',{'ok',Results},_cor6}
	      %% Line 75
	      <{'ok',Results,Rest}> when 'true' ->
		  let <_cor8> =
		      %% Line 77
		      call 'erlang':'++'
			  (_cor0, _cor6)
		  in  let <_cor9> =
			  %% Line 77
			  call 'erlang':'++'
			      (Rest, _cor8)
		      in  %% Line 77
			  {'done',{'ok',Results},_cor9}
	      %% Line 80
	      <{'more',Format,N,Results}>
		  when let <_cor10> =
			call 'erlang':'is_list'
			    (_cor4)
		    in  let <_cor11> =
			    call 'erlang':'is_list'
				(_cor1)
			in  call 'erlang':'and'
				(_cor10, _cor11) ->
		  let <_cor12> =
		      %% Line 81
		      call 'erlang':'length'
			  (_cor0)
		  in  let <_cor13> =
			  %% Line 81
			  call 'erlang':'+'
			      (N, _cor12)
		      in  %% Line 81
			  apply 'fread_collect'/5
			      (Format, [], _cor13, Results, _cor1)
	      %% Line 82
	      <{'more',Format,N,Results}>
		  when call 'erlang':'is_list'
			(_cor4) ->
		  let <_cor14> =
		      %% Line 83
		      call 'erlang':'length'
			  (_cor0)
		  in  let <_cor15> =
			  %% Line 83
			  call 'erlang':'+'
			      (N, _cor14)
		      in  %% Line 83
			  apply 'fread_line'/6
			      (Format, 'eof', _cor15, Results, _cor1, [])
	      %% Line 84
	      <Other> when 'true' ->
		  %% Line 85
		  {'done',Other,_cor1}
	    end
'fread'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	%% Line 112
	apply 'fread'/4
	    (_cor1, _cor0, 0, [])
'fread'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <AllFormat = [126|Format0],Line,N,Results> when 'true' ->
	      %% Line 115
	      case apply 'fread_field'/1
		       (Format0) of
		<{Format,F,Sup,Unicode}> when 'true' ->
		    %% Line 116
		    apply 'fread1'/8
			(Format, F, Sup, Unicode, Line, N, Results, AllFormat)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 117
	  <[C|Format],Line,N,Results>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (C,
				     32) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (C,
					       9) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(C,
							 13) ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call 'erlang':'=:='
						      (C, 10)
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 118
	      apply 'fread_skip_white'/4
		  (Format, Line, N, Results)
	  %% Line 119
	  <[C|Format],[_cor18|Line],N,Results>
	      when call 'erlang':'=:='
		    (_cor18,
		     C) ->
	      let <_cor12> =
		  %% Line 120
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 120
		  apply 'fread'/4
		      (Format, Line, _cor12, Results)
	  %% Line 121
	  <[_X_F|_X_Format],[_X_C|_X_Line],_X_N,_X_Results> when 'true' ->
	      %% Line 122
	      apply 'fread_error'/1
		  ('input')
	  %% Line 123
	  <Format = [_cor19|_cor20],[],N,Results> when 'true' ->
	      %% Line 124
	      {'more',Format,N,Results}
	  %% Line 125
	  <[_cor21|_cor22],'eof',0,[]> when 'true' ->
	      %% Line 127
	      'eof'
	  %% Line 128
	  <[_cor23|_cor24],'eof',_X_N,_X_Results> when 'true' ->
	      %% Line 130
	      apply 'fread_error'/1
		  ('input')
	  %% Line 131
	  <[],Line,_X_N,Results> when 'true' ->
	      let <_cor13> =
		  %% Line 132
		  call 'lists':'reverse'
		      (Results)
	      in  %% Line 132
		  {'ok',_cor13,Line}
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'fread',4}}] )
	    -| ['compiler_generated'] )
	end
'fread_skip_white'/4 =
    %% Line 134
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Format,[C|Line],N,Results>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (C,
				     32) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (C,
					       9) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(C,
							 13) ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call 'erlang':'=:='
						      (C, 10)
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor11> =
		  %% Line 135
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 135
		  apply 'fread_skip_white'/4
		      (Format, Line, _cor11, Results)
	  %% Line 136
	  <Format,Line,N,Results> when 'true' ->
	      %% Line 137
	      apply 'fread'/4
		  (Format, Line, N, Results)
	end
'fread_field'/1 =
    %% Line 144
    fun (_cor0) ->
	case _cor0 of
	  <[42|Format]> when 'true' ->
	      apply 'fread_field'/3
		  (Format, 'true', 'false')
	  %% Line 145
	  <Format> when 'true' ->
	      apply 'fread_field'/3
		  (Format, 'false', 'false')
	end
'fread_field'/3 =
    %% Line 147
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Format],Sup,Unic>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 148
		  call 'erlang':'-'
		      (C, 48)
	      in  %% Line 148
		  apply 'fread_field'/4
		      (Format, _cor5, Sup, Unic)
	  %% Line 149
	  <[116|Format],Sup,_X_Unic> when 'true' ->
	      %% Line 150
	      {Format,'none',Sup,'true'}
	  %% Line 151
	  <Format,Sup,Unic> when 'true' ->
	      %% Line 152
	      {Format,'none',Sup,Unic}
	end
'fread_field'/4 =
    %% Line 154
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C|Format],F,Sup,Unic>
	      when let <_cor4> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor5> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor6> =
		  %% Line 155
		  call 'erlang':'*'
		      (10, F)
	      in  let <_cor7> =
		      %% Line 155
		      call 'erlang':'+'
			  (_cor6, C)
		  in  let <_cor8> =
			  %% Line 155
			  call 'erlang':'-'
			      (_cor7, 48)
		      in  %% Line 155
			  apply 'fread_field'/4
			      (Format, _cor8, Sup, Unic)
	  %% Line 156
	  <[116|Format],F,Sup,_X_Unic> when 'true' ->
	      %% Line 157
	      {Format,F,Sup,'true'}
	  %% Line 158
	  <Format,F,Sup,Unic> when 'true' ->
	      %% Line 159
	      {Format,F,Sup,Unic}
	end
'fread1'/8 =
    %% Line 166
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[108|Format],_X_F,Sup,_X_U,Line,N,Res,_X_AllFormat> when 'true' ->
	      let <_cor8> =
		  %% Line 167
		  apply 'fread_result'/3
		      (Sup, N, Res)
	      in  %% Line 167
		  apply 'fread'/4
		      (Format, Line, N, _cor8)
	  %% Line 168
	  <_X_Format,_X_F,_X_Sup,_X_U,[],N,Res,AllFormat> when 'true' ->
	      %% Line 170
	      {'more',AllFormat,N,Res}
	  %% Line 171
	  <_X_Format,_X_F,_X_Sup,_X_U,'eof',0,[],_X_AllFormat> when 'true' ->
	      %% Line 173
	      'eof'
	  %% Line 174
	  <_X_Format,_X_F,_X_Sup,_X_U,'eof',_X_N,_X_Res,_X_AllFormat> when 'true' ->
	      %% Line 176
	      apply 'fread_error'/1
		  ('input')
	  %% Line 177
	  <Format,F,Sup,U,Line,N,Res,_X_AllFormat> when 'true' ->
	      %% Line 178
	      apply 'fread1'/7
		  (Format, F, Sup, U, Line, N, Res)
	end
'fread1'/7 =
    %% Line 180
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[102|Format],'none',Sup,'false',Line0,N0,Res> when 'true' ->
	      %% Line 181
	      case apply 'fread_float_cs'/2
		       (Line0, N0) of
		<{Line,N,Cs}> when 'true' ->
		    %% Line 182
		    apply 'fread_float'/6
			(Cs, Sup, Format, Line, N, Res)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 183
	  <[102|Format],F,Sup,'false',Line0,N,Res> when 'true' ->
	      %% Line 184
	      case apply 'fread_chars'/3
		       (Line0, F, 'false') of
		<{Line,Cs}> when 'true' ->
		    let <_cor9> =
			%% Line 185
			call 'erlang':'+'
			    (N, F)
		    in  %% Line 185
			apply 'fread_float'/6
			    (Cs, Sup, Format, Line, _cor9, Res)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 186
	  <[100|Format],'none',Sup,'false',Line0,N0,Res> when 'true' ->
	      %% Line 187
	      case apply 'fread_int_cs'/2
		       (Line0, N0) of
		<{Line,N,Cs}> when 'true' ->
		    %% Line 188
		    apply 'fread_integer'/7
			(Cs, 10, Sup, Format, Line, N, Res)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 189
	  <[100|Format],F,Sup,'false',Line0,N,Res> when 'true' ->
	      %% Line 190
	      case apply 'fread_chars'/3
		       (Line0, F, 'false') of
		<{Line,Cs}> when 'true' ->
		    let <_cor12> =
			%% Line 191
			call 'erlang':'+'
			    (N, F)
		    in  %% Line 191
			apply 'fread_integer'/7
			    (Cs, 10, Sup, Format, Line, _cor12, Res)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 192
	  <[117|Format],'none',Sup,'false',Line0,N0,Res> when 'true' ->
	      %% Line 193
	      case apply 'fread_digits'/4
		       (Line0, N0, 10, []) of
		<{Line,N,Cs}> when 'true' ->
		    %% Line 194
		    apply 'fread_unsigned'/7
			(Cs, 10, Sup, Format, Line, N, Res)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 195
	  <[117|Format],F,Sup,'false',Line0,N0,Res>
	      when let <_cor14> =
		    call 'erlang':'>='
			(F, 2)
		in  let <_cor18> =
			call 'erlang':'=<'
			    (F, 36)
		    in  call 'erlang':'and'
			    (_cor14, _cor18) ->
	      %% Line 196
	      case apply 'fread_digits'/4
		       (Line0, N0, F, []) of
		<{Line,N,Cs}> when 'true' ->
		    %% Line 197
		    apply 'fread_unsigned'/7
			(Cs, F, Sup, Format, Line, N, Res)
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 198
	  <[45|Format],_X_F,Sup,'false',Line,N,Res> when 'true' ->
	      %% Line 199
	      apply 'fread_sign_char'/5
		  (Sup, Format, Line, N, Res)
	  %% Line 200
	  <[35|Format],'none',Sup,'false',Line0,N0,Res> when 'true' ->
	      let <_cor30> =
		  catch
		      %% Line 203
		      case apply 'fread_base'/2
			       (Line0, N0) of
			<{Line1,N1,B1}> when 'true' ->
			    let <B> =
				%% Line 204
				call 'erlang':'abs'
				    (B1)
			    in  let <_cor26> =
				    %% Line 205
				    call 'erlang':'>='
					(B, 2)
				in  let <_cor25> =
					%% Line 205
					call 'erlang':'=<'
					    (B, 36)
				    in  %% Line 205
					case call 'erlang':'and'
						 (_cor26, _cor25) of
					  <'true'> when 'true' ->
					      %% Line 206
					      case apply 'fread_digits'/4
						       (Line1, N1, B, []) of
						<{Line2,N2,Cs2}> when 'true' ->
						    let <_cor29> =
							%% Line 207
							call 'lists':'reverse'
							    (Cs2)
						    in  %% Line 207
							apply 'fread_based'/7
							    (_cor29, B1, Sup, Format, Line2, N2, Res)
						( <_cor28> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor28})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor27> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor27})
					    -| ['compiler_generated'] )
					end
			( <_cor20> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor20})
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 201
		  case _cor30 of
		    %% Line 209
		    <{'EXIT',_cor62}> when 'true' ->
			%% Line 210
			apply 'fread_error'/1
			    ('based')
		    %% Line 211
		    <Other> when 'true' ->
			%% Line 212
			Other
		  end
	  %% Line 214
	  <[35|Format],F,Sup,'false',Line0,N,Res> when 'true' ->
	      let <_cor42> =
		  catch
		      %% Line 217
		      case apply 'fread_chars'/3
			       (Line0, F, 'false') of
			<{Line1,Cs1}> when 'true' ->
			    let <_cor33> =
				%% Line 218
				call 'lists':'reverse'
				    (Cs1)
			    in  %% Line 218
				case apply 'fread_base'/2
					 (_cor33, N) of
				  <{Line2,_cor63,B2}> when 'true' ->
				      let <_cor39> =
					  %% Line 219
					  call 'erlang':'>='
					      (B2, 2)
				      in  let <_cor38> =
					      %% Line 219
					      call 'erlang':'=<'
						  (B2, 36)
					  in  %% Line 219
					      case call 'erlang':'and'
						       (_cor39, _cor38) of
						<'true'> when 'true' ->
						    let <_cor41> =
							%% Line 220
							call 'erlang':'+'
							    (N, F)
						    in  %% Line 220
							apply 'fread_based'/7
							    (Line2, B2, Sup, Format, Line1, _cor41, Res)
						( <_cor40> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor40})
						  -| ['compiler_generated'] )
					      end
				  ( <_cor34> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor34})
				    -| ['compiler_generated'] )
				end
			( <_cor32> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor32})
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 215
		  case _cor42 of
		    %% Line 222
		    <{'EXIT',_cor64}> when 'true' ->
			%% Line 223
			apply 'fread_error'/1
			    ('based')
		    %% Line 224
		    <Other> when 'true' ->
			%% Line 225
			Other
		  end
	  %% Line 227
	  <[115|Format],'none',Sup,U,Line0,N0,Res> when 'true' ->
	      %% Line 228
	      case apply 'fread_string_cs'/3
		       (Line0, N0, U) of
		<{Line,N,Cs}> when 'true' ->
		    %% Line 229
		    apply 'fread_string'/7
			(Cs, Sup, U, Format, Line, N, Res)
		( <_cor44> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor44})
		  -| ['compiler_generated'] )
	      end
	  %% Line 230
	  <[115|Format],F,Sup,U,Line0,N,Res> when 'true' ->
	      %% Line 231
	      case apply 'fread_chars'/3
		       (Line0, F, U) of
		<{Line,Cs}> when 'true' ->
		    let <_cor46> =
			%% Line 232
			call 'erlang':'+'
			    (N, F)
		    in  %% Line 232
			apply 'fread_string'/7
			    (Cs, Sup, U, Format, Line, _cor46, Res)
		( <_cor45> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor45})
		  -| ['compiler_generated'] )
	      end
	  %% Line 234
	  <[97|Format],'none',Sup,'false',Line0,N0,Res> when 'true' ->
	      %% Line 235
	      case apply 'fread_string_cs'/3
		       (Line0, N0, 'false') of
		<{Line,N,Cs}> when 'true' ->
		    %% Line 236
		    apply 'fread_atom'/6
			(Cs, Sup, Format, Line, N, Res)
		( <_cor47> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor47})
		  -| ['compiler_generated'] )
	      end
	  %% Line 237
	  <[97|Format],F,Sup,'false',Line0,N,Res> when 'true' ->
	      %% Line 238
	      case apply 'fread_chars'/3
		       (Line0, F, 'false') of
		<{Line,Cs}> when 'true' ->
		    let <_cor49> =
			%% Line 239
			call 'erlang':'+'
			    (N, F)
		    in  %% Line 239
			apply 'fread_atom'/6
			    (Cs, Sup, Format, Line, _cor49, Res)
		( <_cor48> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor48})
		  -| ['compiler_generated'] )
	      end
	  %% Line 240
	  <[99|Format],'none',Sup,U,Line0,N,Res> when 'true' ->
	      %% Line 241
	      case apply 'fread_chars'/3
		       (Line0, 1, U) of
		<{Line,Cs}> when 'true' ->
		    let <_cor51> =
			%% Line 242
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 242
			apply 'fread_chars'/7
			    (Cs, Sup, U, Format, Line, _cor51, Res)
		( <_cor50> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor50})
		  -| ['compiler_generated'] )
	      end
	  %% Line 243
	  <[99|Format],F,Sup,U,Line0,N,Res> when 'true' ->
	      %% Line 244
	      case apply 'fread_chars'/3
		       (Line0, F, U) of
		<{Line,Cs}> when 'true' ->
		    let <_cor53> =
			%% Line 245
			call 'erlang':'+'
			    (N, F)
		    in  %% Line 245
			apply 'fread_chars'/7
			    (Cs, Sup, U, Format, Line, _cor53, Res)
		( <_cor52> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor52})
		  -| ['compiler_generated'] )
	      end
	  %% Line 246
	  <[126|Format],_X_F,_X_Sup,_X_U,[126|Line],N,Res> when 'true' ->
	      let <_cor54> =
		  %% Line 247
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 247
		  apply 'fread'/4
		      (Format, Line, _cor54, Res)
	  %% Line 248
	  <_X_Format,_X_F,_X_Sup,_X_U,_X_Line,_X_N,_X_Res> when 'true' ->
	      %% Line 249
	      apply 'fread_error'/1
		  ('format')
	end
'fread_float'/6 =
    %% Line 253
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    catch
		let <_cor6> =
		    %% Line 254
		    call 'lists':'reverse'
			(_cor5)
		in  let <_cor7> =
			%% Line 254
			apply 'fread_skip_white'/1
			    (_cor6)
		    in  %% Line 254
			call 'erlang':'list_to_float'
			    (_cor7)
	in  %% Line 254
	    case _cor8 of
	      %% Line 255
	      <{'EXIT',_cor17}> when 'true' ->
		  %% Line 256
		  apply 'fread_error'/1
		      ('float')
	      %% Line 257
	      <Float> when 'true' ->
		  let <_cor9> =
		      %% Line 258
		      apply 'fread_result'/3
			  (_cor4, Float, _cor0)
		  in  %% Line 258
		      apply 'fread'/4
			  (_cor3, _cor2, _cor1, _cor9)
	    end
'fread_integer'/7 =
    %% Line 263
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    catch
		let <_cor7> =
		    %% Line 264
		    call 'lists':'reverse'
			(_cor6)
		in  let <_cor8> =
			%% Line 264
			apply 'fread_skip_white'/1
			    (_cor7)
		    in  %% Line 264
			call 'erlang':'list_to_integer'
			    (_cor8, _cor5)
	in  %% Line 264
	    case _cor9 of
	      %% Line 265
	      <{'EXIT',_cor19}> when 'true' ->
		  %% Line 266
		  apply 'fread_error'/1
		      ('integer')
	      %% Line 267
	      <Integer> when 'true' ->
		  let <_cor10> =
		      %% Line 268
		      apply 'fread_result'/3
			  (_cor4, Integer, _cor0)
		  in  %% Line 268
		      apply 'fread'/4
			  (_cor3, _cor2, _cor1, _cor10)
	    end
'fread_unsigned'/7 =
    %% Line 274
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    catch
		let <_cor7> =
		    %% Line 275
		    call 'lists':'reverse'
			(_cor6)
		in  let <_cor8> =
			%% Line 275
			apply 'fread_skip_white'/1
			    (_cor7)
		    in  %% Line 275
			call 'erlang':'list_to_integer'
			    (_cor8, _cor5)
	in  %% Line 275
	    case _cor9 of
	      %% Line 276
	      <{'EXIT',_cor19}> when 'true' ->
		  %% Line 277
		  apply 'fread_error'/1
		      ('unsigned')
	      %% Line 278
	      <Integer> when 'true' ->
		  let <_cor10> =
		      %% Line 279
		      apply 'fread_result'/3
			  (_cor4, Integer, _cor0)
		  in  %% Line 279
		      apply 'fread'/4
			  (_cor3, _cor2, _cor1, _cor10)
	    end
'fread_based'/7 =
    %% Line 285
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Cs,Base> =
	    %% Line 286
	    case <> of
	      <>
		  when call 'erlang':'<'
			(_cor5,
			 0) ->
		  let <_cor7> =
		      call 'erlang':'-'
			  (_cor5)
		  in  <[45|_cor6],_cor7>
	      %% Line 287
	      <> when 'true' ->
		  <_cor6,_cor5>
	    end
	in  let <I> =
		%% Line 289
		call 'erlang':'list_to_integer'
		    (Cs, Base)
	    in  let <_cor11> =
		    %% Line 290
		    apply 'fread_result'/3
			(_cor4, I, _cor0)
		in  %% Line 290
		    apply 'fread'/4
			(_cor3, _cor2, _cor1, _cor11)
'fread_sign_char'/5 =
    %% Line 295
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Sup,Format,[45|Line],N,Res> when 'true' ->
	      let <_cor7> =
		  %% Line 296
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor6> =
		      %% Line 296
		      apply 'fread_result'/3
			  (Sup, -1, Res)
		  in  %% Line 296
		      apply 'fread'/4
			  (Format, Line, _cor7, _cor6)
	  %% Line 297
	  <Sup,Format,[43|Line],N,Res> when 'true' ->
	      let <_cor10> =
		  %% Line 298
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor9> =
		      %% Line 298
		      apply 'fread_result'/3
			  (Sup, 1, Res)
		  in  %% Line 298
		      apply 'fread'/4
			  (Format, Line, _cor10, _cor9)
	  %% Line 299
	  <Sup,Format,Line,N,Res> when 'true' ->
	      let <_cor11> =
		  %% Line 300
		  apply 'fread_result'/3
		      (Sup, 1, Res)
	      in  %% Line 300
		  apply 'fread'/4
		      (Format, Line, N, _cor11)
	end
'fread_string'/7 =
    %% Line 305
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'error',_X_Sup,_X_U,_X_Format,_X_Line,_X_N,_X_Res> when 'true' ->
	      %% Line 306
	      apply 'fread_error'/1
		  ('string')
	  %% Line 307
	  <Cs0,Sup,U,Format,Line,N,Res> when 'true' ->
	      let <_cor7> =
		  %% Line 308
		  apply 'fread_skip_white'/1
		      (Cs0)
	      in  let <_cor8> =
		      %% Line 308
		      call 'lists':'reverse'
			  (_cor7)
		  in  let <Cs> =
			  %% Line 308
			  apply 'fread_skip_white'/1
			      (_cor8)
		      in  let <_cor10> =
			      %% Line 309
			      apply 'fread_result'/3
				  (Sup, Cs, Res)
			  in  let <_cor11> =
				  %% Line 309
				  apply 'fread_convert'/2
				      (_cor10, U)
			      in  %% Line 309
				  apply 'fread'/4
				      (Format, Line, N, _cor11)
	end
'fread_atom'/6 =
    %% Line 313
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'error',_X_Sup,_X_Format,_X_Line,_X_N,_X_Res> when 'true' ->
	      %% Line 314
	      apply 'fread_error'/1
		  ('atom')
	  %% Line 315
	  <Cs0,Sup,Format,Line,N,Res> when 'true' ->
	      let <_cor6> =
		  %% Line 316
		  apply 'fread_skip_white'/1
		      (Cs0)
	      in  let <_cor7> =
		      %% Line 316
		      call 'lists':'reverse'
			  (_cor6)
		  in  let <Cs> =
			  %% Line 316
			  apply 'fread_skip_white'/1
			      (_cor7)
		      in  let <_cor9> =
			      %% Line 317
			      call 'erlang':'list_to_atom'
				  (Cs)
			  in  let <_cor10> =
				  %% Line 317
				  apply 'fread_result'/3
				      (Sup, _cor9, Res)
			      in  %% Line 317
				  apply 'fread'/4
				      (Format, Line, N, _cor10)
	end
'fread_chars'/7 =
    %% Line 321
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'error',_X_Sup,_X_U,_X_Format,_X_Line,_X_N,_X_Res> when 'true' ->
	      %% Line 322
	      apply 'fread_error'/1
		  ('character')
	  %% Line 323
	  <Cs,Sup,U,Format,Line,N,Res> when 'true' ->
	      let <_cor7> =
		  %% Line 324
		  call 'lists':'reverse'
		      (Cs)
	      in  let <_cor8> =
		      %% Line 324
		      apply 'fread_result'/3
			  (Sup, _cor7, Res)
		  in  let <_cor9> =
			  %% Line 324
			  apply 'fread_convert'/2
			      (_cor8, U)
		      in  %% Line 324
			  apply 'fread'/4
			      (Format, Line, N, _cor9)
	end
'fread_chars'/3 =
    %% Line 328
    fun (_cor2,_cor1,_cor0) ->
	%% Line 329
	apply 'fread_chars'/4
	    (_cor1, _cor2, _cor0, [])
'fread_chars'/4 =
    %% Line 331
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,Line,_X_U,Cs> when 'true' ->
	      {Line,Cs}
	  %% Line 332
	  <_X_N,[10|Line],_X_U,_X_Cs> when 'true' ->
	      {[10|Line],'error'}
	  %% Line 333
	  <N,[C|Line],'true',Cs> when 'true' ->
	      let <_cor4> =
		  %% Line 334
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 334
		  apply 'fread_chars'/4
		      (_cor4, Line, 'true', [C|Cs])
	  %% Line 335
	  <N,[C|Line],'false',Cs>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 0)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 255)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 336
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 336
		  apply 'fread_chars'/4
		      (_cor7, Line, 'false', [C|Cs])
	  %% Line 337
	  <_X_N,L,_X_U,_X_Cs> when 'true' ->
	      %% Line 338
	      {L,'error'}
	end
'fread_int_cs'/2 =
    %% Line 344
    fun (_cor1,_cor0) ->
	%% Line 345
	case apply 'fread_skip_white'/2
		 (_cor1, _cor0) of
	  <{Line1,N1}> when 'true' ->
	      %% Line 346
	      case apply 'fread_sign'/3
		       (Line1, N1, []) of
		<{Line,N,Cs}> when 'true' ->
		    %% Line 347
		    apply 'fread_digits'/3
			(Line, N, Cs)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'fread_float_cs'/2 =
    %% Line 352
    fun (_cor1,_cor0) ->
	%% Line 353
	case apply 'fread_skip_white'/2
		 (_cor1, _cor0) of
	  <{Line1,N1}> when 'true' ->
	      %% Line 354
	      case apply 'fread_sign'/3
		       (Line1, N1, []) of
		<{Line2,N2,Cs2}> when 'true' ->
		    %% Line 355
		    case apply 'fread_digits'/3
			     (Line2, N2, Cs2) of
		      <{Line,N,Cs}> when 'true' ->
			  %% Line 356
			  apply 'fread_float_cs_1'/3
			      (Line, N, Cs)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'fread_float_cs_1'/3 =
    %% Line 358
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[46|Line0],N0,Cs0> when 'true' ->
	      let <_cor3> =
		  %% Line 359
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 359
		  case apply 'fread_digits'/3
			   (Line0, _cor3, [46|Cs0]) of
		    <{Line,N,Cs}> when 'true' ->
			%% Line 360
			apply 'fread_float_cs_2'/3
			    (Line, N, Cs)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 361
	  <Line,N,Cs> when 'true' ->
	      %% Line 362
	      {Line,N,Cs}
	end
'fread_float_cs_2'/3 =
    %% Line 364
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[101|Line0],N0,Cs0> when 'true' ->
	      let <_cor3> =
		  %% Line 365
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 365
		  case apply 'fread_sign'/3
			   (Line0, _cor3, [101|Cs0]) of
		    <{Line,N,Cs}> when 'true' ->
			%% Line 366
			apply 'fread_digits'/3
			    (Line, N, Cs)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 367
	  <[69|Line0],N0,Cs0> when 'true' ->
	      let <_cor5> =
		  %% Line 368
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 368
		  case apply 'fread_sign'/3
			   (Line0, _cor5, [69|Cs0]) of
		    <{Line,N,Cs}> when 'true' ->
			%% Line 369
			apply 'fread_digits'/3
			    (Line, N, Cs)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 370
	  <Line,N,Cs> when 'true' ->
	      %% Line 371
	      {Line,N,Cs}
	end
'fread_string_cs'/3 =
    %% Line 375
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line0,N0,'false'> when 'true' ->
	      %% Line 376
	      case apply 'fread_skip_white'/2
		       (Line0, N0) of
		<{Line,N}> when 'true' ->
		    %% Line 377
		    apply 'fread_skip_latin1_nonwhite'/3
			(Line, N, [])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 378
	  <Line0,N0,'true'> when 'true' ->
	      %% Line 379
	      case apply 'fread_skip_white'/2
		       (Line0, N0) of
		<{Line,N}> when 'true' ->
		    %% Line 380
		    apply 'fread_skip_nonwhite'/3
			(Line, N, [])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'fread_string_cs',3}}] )
	    -| ['compiler_generated'] )
	end
'fread_skip_white'/1 =
    %% Line 390
    fun (_cor0) ->
	case _cor0 of
	  <[C|Line]>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (C,
				     32) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (C,
					       9) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(C,
							 13) ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call 'erlang':'=:='
						      (C, 10)
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 391
	      apply 'fread_skip_white'/1
		  (Line)
	  %% Line 392
	  <Line> when 'true' ->
	      Line
	end
'fread_skip_white'/2 =
    %% Line 394
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Line],N>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (C,
				     32) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (C,
					       9) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(C,
							 13) ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call 'erlang':'=:='
						      (C, 10)
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 395
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 395
		  apply 'fread_skip_white'/2
		      (Line, _cor9)
	  %% Line 396
	  <Line,N> when 'true' ->
	      {Line,N}
	end
'fread_skip_latin1_nonwhite'/3 =
    %% Line 398
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Line],N,Cs>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (C,
				     32) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (C,
					       9) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(C,
							 13) ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call 'erlang':'=:='
						      (C, 10)
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 399
	      {[C|Line],N,Cs}
	  %% Line 400
	  <[C|Line],N,[]>
	      when call 'erlang':'>'
		    (C,
		     255) ->
	      %% Line 401
	      {[C|Line],N,'error'}
	  %% Line 402
	  <[C|Line],N,Cs>
	      when call 'erlang':'>'
		    (C,
		     255) ->
	      %% Line 403
	      {[C|Line],N,Cs}
	  %% Line 404
	  <[C|Line],N,Cs> when 'true' ->
	      let <_cor10> =
		  %% Line 405
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 405
		  apply 'fread_skip_latin1_nonwhite'/3
		      (Line, _cor10, [C|Cs])
	  %% Line 406
	  <[],N,Cs> when 'true' ->
	      {[],N,Cs}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'fread_skip_latin1_nonwhite',3}}] )
	    -| ['compiler_generated'] )
	end
'fread_skip_nonwhite'/3 =
    %% Line 408
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Line],N,Cs>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (C,
				     32) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (C,
					       9) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(C,
							 13) ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call 'erlang':'=:='
						      (C, 10)
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 409
	      {[C|Line],N,Cs}
	  %% Line 410
	  <[C|Line],N,Cs> when 'true' ->
	      let <_cor10> =
		  %% Line 411
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 411
		  apply 'fread_skip_nonwhite'/3
		      (Line, _cor10, [C|Cs])
	  %% Line 412
	  <[],N,Cs> when 'true' ->
	      {[],N,Cs}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'fread_skip_nonwhite',3}}] )
	    -| ['compiler_generated'] )
	end
'fread_sign'/3 =
    %% Line 414
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[43|Line],N,Cs> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'+'
		      (N, 1)
	      in  {Line,_cor3,[43|Cs]}
	  %% Line 415
	  <[45|Line],N,Cs> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'+'
		      (N, 1)
	      in  {Line,_cor4,[45|Cs]}
	  %% Line 416
	  <Line,N,Cs> when 'true' ->
	      {Line,N,Cs}
	end
'fread_base'/2 =
    %% Line 418
    fun (_cor1,_cor0) ->
	%% Line 419
	case apply 'fread_int_cs'/2
		 (_cor1, _cor0) of
	  <{[35|Line1],N1,Cs1}> when 'true' ->
	      let <_cor3> =
		  %% Line 420
		  call 'lists':'reverse'
		      (Cs1)
	      in  let <B> =
		      %% Line 420
		      call 'erlang':'list_to_integer'
			  (_cor3)
		  in  let <_cor5> =
			  %% Line 421
			  call 'erlang':'+'
			      (N1, 1)
		      in  %% Line 421
			  {Line1,_cor5,B}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'fread_digits'/3 =
    %% Line 423
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Line],N,Cs>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 424
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 424
		  apply 'fread_digits'/3
		      (Line, _cor5, [C|Cs])
	  %% Line 425
	  <Line,N,Cs> when 'true' ->
	      {Line,N,Cs}
	end
'fread_digits'/4 =
    %% Line 427
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C|Line],N,Base,Cs>
	      when let <_cor4> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor5> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor6> =
		  %% Line 428
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 428
		  apply 'fread_digits'/4
		      (Line, _cor6, Base, [C|Cs])
	  %% Line 429
	  <[C|Line],N,Base,Cs>
	      when try
		    let <_cor7> =
			call 'erlang':'>='
			    (C, 65)
		    in  let <_cor8> =
			    call 'erlang':'+'
				(65, Base)
			in  let <_cor9> =
				call 'erlang':'-'
				    (_cor8, 10)
			    in  let <_cor10> =
				    call 'erlang':'<'
					(C, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor11> =
		  %% Line 430
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 430
		  apply 'fread_digits'/4
		      (Line, _cor11, Base, [C|Cs])
	  %% Line 431
	  <[C|Line],N,Base,Cs>
	      when try
		    let <_cor12> =
			call 'erlang':'>='
			    (C, 97)
		    in  let <_cor13> =
			    call 'erlang':'+'
				(97, Base)
			in  let <_cor14> =
				call 'erlang':'-'
				    (_cor13, 10)
			    in  let <_cor15> =
				    call 'erlang':'<'
					(C, _cor14)
				in  call 'erlang':'and'
					(_cor12, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor16> =
		  %% Line 432
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 432
		  apply 'fread_digits'/4
		      (Line, _cor16, Base, [C|Cs])
	  %% Line 433
	  <Line,N,_X_Base,Cs> when 'true' ->
	      {Line,N,Cs}
	end
'fread_result'/3 =
    %% Line 439
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'true',_X_V,Res> when 'true' ->
	      Res
	  %% Line 440
	  <'false',V,Res> when 'true' ->
	      [V|Res]
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'fread_result',3}}] )
	    -| ['compiler_generated'] )
	end
'fread_convert'/2 =
    %% Line 448
    fun (_cor1,_cor0) ->
	_cor1
'fread_error'/1 =
    %% Line 451
    fun (_cor0) ->
	%% Line 452
	{'error',{'fread',_cor0}}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('io_lib_fread')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('io_lib_fread', _cor0)
end