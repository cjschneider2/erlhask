module 'dets_utils' ['all_allocated'/1,
		     'all_allocated_as_list'/1,
		     'all_free'/1,
		     'alloc'/2,
		     'alloc_many'/4,
		     'bad_object'/2,
		     'cache_lookup'/4,
		     'cache_size'/1,
		     'cmp'/2,
		     'code_to_type'/1,
		     'corrupt'/2,
		     'corrupt_file'/2,
		     'corrupt_reason'/2,
		     'debug_mode'/0,
		     'disk_map_segment'/2,
		     'disk_map_segment_p'/2,
		     'empty_free_lists'/0,
		     'family'/1,
		     'file_error'/2,
		     'find_allocated'/4,
		     'find_next_allocated'/3,
		     'free'/3,
		     'fwrite'/3,
		     'get_freelists'/1,
		     'init_alloc'/1,
		     'init_disk_map'/1,
		     'init_slots_from_old_file'/2,
		     'ipread'/3,
		     'is_empty_cache'/1,
		     'list_to_tree'/1,
		     'log2'/1,
		     'make_zeros'/1,
		     'mkeysearch'/3,
		     'mkeysort'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'msort'/1,
		     'new_cache'/1,
		     'open'/2,
		     'position'/2,
		     'position'/3,
		     'position_close'/3,
		     'pread'/2,
		     'pread'/4,
		     'pread_close'/4,
		     'pread_n'/3,
		     'pwrite'/2,
		     'pwrite'/3,
		     'pwrite'/4,
		     'read_4'/2,
		     'read_n'/2,
		     'rename'/2,
		     'reset_cache'/1,
		     'stop_disk_map'/0,
		     'sync'/1,
		     'tree_to_bin'/5,
		     'truncate'/2,
		     'truncate'/3,
		     'type_to_code'/1,
		     'vformat'/2,
		     'write'/2,
		     'write_file'/2]
    attributes []
'cmp'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,_cor12>
	      when call 'erlang':'=:='
		    (_cor12,
		     T) ->
	      %% Line 66
	      0
	  %% Line 67
	  <[E1|T1],[E2|T2]> when 'true' ->
	      %% Line 68
	      case apply 'cmp'/2
		       (E1, E2) of
		%% Line 69
		<0> when 'true' ->
		    apply 'cmp'/2
			(T1, T2)
		%% Line 70
		<R> when 'true' ->
		    R
	      end
	  %% Line 72
	  <T1,T2>
	      when try
		    let <_cor4> =
			call 'erlang':'tuple_size'
			    (T1)
		    in  let <_cor3> =
			    call 'erlang':'tuple_size'
				(T2)
			in  call 'erlang':'=:='
				(_cor4, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 73
		  call 'erlang':'tuple_size'
		      (T1)
	      in  %% Line 73
		  apply 'tcmp'/4
		      (T1, T2, 1, _cor5)
	  %% Line 74
	  <I,F>
	      when let <_cor6> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor7> =
			call 'erlang':'is_float'
			    (F)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      -1
	  %% Line 76
	  <F,I>
	      when let <_cor8> =
		    call 'erlang':'is_float'
			(F)
		in  let <_cor9> =
			call 'erlang':'is_integer'
			    (I)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 77
	      1
	  %% Line 78
	  <T1,T2>
	      when call 'erlang':'<'
		    (T1,
		     T2) ->
	      -1
	  %% Line 80
	  <_X_T1,_X_T2> when 'true' ->
	      %% Line 81
	      1
	end
'tcmp'/4 =
    %% Line 83
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T1,T2,I,_cor14>
	      when call 'erlang':'=:='
		    (_cor14,
		     I) ->
	      let <_cor5> =
		  %% Line 84
		  call 'erlang':'element'
		      (I, T1)
	      in  let <_cor4> =
		      %% Line 84
		      call 'erlang':'element'
			  (I, T2)
		  in  %% Line 84
		      apply 'cmp'/2
			  (_cor5, _cor4)
	  %% Line 85
	  <T1,T2,I,N> when 'true' ->
	      let <_cor7> =
		  %% Line 86
		  call 'erlang':'element'
		      (I, T1)
	      in  let <_cor6> =
		      %% Line 86
		      call 'erlang':'element'
			  (I, T2)
		  in  %% Line 86
		      case apply 'cmp'/2
			       (_cor7, _cor6) of
			%% Line 87
			<0> when 'true' ->
			    let <_cor8> =
				call 'erlang':'+'
				    (I, 1)
			    in  apply 'tcmp'/4
				    (T1, T2, _cor8, N)
			%% Line 88
			<R> when 'true' ->
			    R
		      end
	end
'msort'/1 =
    %% Line 91
    fun (_cor0) ->
	let <F> =
	    %% Line 93
	    ( fun (_cor3,_cor2) ->
		  let <_cor1> =
		      apply 'cmp'/2
			  (_cor3, _cor2)
		  in  call 'erlang':'=<'
			  (_cor1, 0)
	      -| [{'id',{0,0,'-msort/1-fun-0-'}}] )
	in  let <_cor7> =
		%% Line 94
		call 'lists':'sort'
		    (_cor0)
	    in  %% Line 94
		call 'lists':'sort'
		    (F, _cor7)
'mkeysort'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 97
	    ( fun (_cor6,_cor5) ->
		  let <_cor3> =
		      call 'erlang':'element'
			  (_cor1, _cor6)
		  in  let <_cor2> =
			  call 'erlang':'element'
			      (_cor1, _cor5)
		      in  let <_cor4> =
			      apply 'cmp'/2
				  (_cor3, _cor2)
			  in  call 'erlang':'=<'
				  (_cor4, 0)
	      -| [{'id',{0,0,'-mkeysort/2-fun-0-'}}] )
	in  let <_cor10> =
		%% Line 99
		call 'lists':'keysort'
		    (_cor1, _cor0)
	    in  %% Line 99
		call 'lists':'sort'
		    (F, _cor10)
'mkeysearch'/3 =
    %% Line 101
    fun (_cor2,_cor1,_cor0) ->
	%% Line 102
	case call 'lists':'keysearch'
		 (_cor2, _cor1, _cor0) of
	  %% Line 103
	  <Reply = {'value',Value}>
	      when try
		    let <_cor3> =
			call 'erlang':'element'
			    (_cor1, Value)
		    in  call 'erlang':'=:='
			    (_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 104
	      Reply
	  %% Line 105
	  <'false'> when 'true' ->
	      %% Line 106
	      'false'
	  %% Line 107
	  <_cor8> when 'true' ->
	      %% Line 108
	      apply 'mkeysearch2'/3
		  (_cor2, _cor1, _cor0)
	end
'mkeysearch2'/3 =
    %% Line 111
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Key,_X_I,[]> when 'true' ->
	      %% Line 112
	      'false'
	  %% Line 113
	  <Key,I,[E|_X_L]>
	      when try
		    let <_cor3> =
			call 'erlang':'element'
			    (I, E)
		    in  call 'erlang':'=:='
			    (_cor3, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 114
	      {'value',E}
	  %% Line 115
	  <Key,I,[_cor7|L]> when 'true' ->
	      %% Line 116
	      apply 'mkeysearch2'/3
		  (Key, I, L)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mkeysearch2',3}}] )
	    -| ['compiler_generated'] )
	end
'family'/1 =
    %% Line 121
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 122
	      []
	  %% Line 123
	  <L> when 'true' ->
	      %% Line 124
	      case apply 'mkeysort'/2
		       (1, L) of
		<[{K,V}|KVL]> when 'true' ->
		    %% Line 125
		    apply 'per_key'/4
			(KVL, K, [V|[]], [])
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'per_key'/4 =
    %% Line 127
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],K,Vs,KVs> when 'true' ->
	      let <_cor4> =
		  %% Line 128
		  apply 'msort'/1
		      (Vs)
	      in  %% Line 128
		  call 'lists':'reverse'
		      (KVs, [{K,_cor4}|[]])
	  %% Line 129
	  <[{K,V}|L],_cor10,Vs,KVs>
	      when call 'erlang':'=:='
		    (_cor10,
		     K) ->
	      %% Line 130
	      apply 'per_key'/4
		  (L, K, [V|Vs], KVs)
	  %% Line 131
	  <[{K1,V}|L],K,Vs,KVs> when 'true' ->
	      let <_cor5> =
		  %% Line 132
		  apply 'msort'/1
		      (Vs)
	      in  %% Line 132
		  apply 'per_key'/4
		      (L, K1, [V|[]], [{K,_cor5}|KVs])
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'per_key',4}}] )
	    -| ['compiler_generated'] )
	end
'rename'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	%% Line 135
	case call 'file':'rename'
		 (_cor1, _cor0) of
	  %% Line 136
	  <'ok'> when 'true' ->
	      %% Line 137
	      'ok'
	  %% Line 138
	  <{'error',Reason}> when 'true' ->
	      %% Line 139
	      {'error',{'file_error',{_cor1,_cor0},Reason}}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'pread'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	%% Line 144
	( case _cor0 of
	    ( <( {'head',_cor20,_cor21,_cor22,_rec0,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor14> =
		      case call 'file':'pread'
			       (_rec0, _cor1) of
			%% Line 145
			<{'ok',Bins}> when 'true' ->
			    %% Line 147
			    case call 'lists':'member'
				     ('eof', Bins) of
			      %% Line 148
			      <'true'> when 'true' ->
				  %% Line 149
				  {'error',{'premature_eof',_cor40}}
			      %% Line 150
			      <'false'> when 'true' ->
				  %% Line 151
				  {'ok',Bins}
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
			%% Line 153
			<{'error',Reason}>
			    when let <_cor7> =
				  call 'erlang':'=:='
				      ('enomem', Reason)
			      in  let <_cor8> =
				      call 'erlang':'=:='
					  ('einval', Reason)
				  in  call 'erlang':'or'
					  (_cor7, _cor8) ->
			    %% Line 154
			    {'error',{'bad_object_header',_cor40}}
			%% Line 155
			<{'error',Reason}> when 'true' ->
			    %% Line 156
			    {'file_error',_cor40,Reason}
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 158
		      case _cor14 of
			%% Line 159
			<{'ok',_X_Bins}> when 'true' ->
			    _cor14
			%% Line 161
			<Error> when 'true' ->
			    let <_cor16> =
				%% Line 162
				apply 'corrupt'/2
				    (_cor0, Error)
			    in  %% Line 162
				call 'erlang':'throw'
				    (_cor16)
		      end
	      -| ['compiler_generated'] )
	    ( <_cor50> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pread'/4 =
    %% Line 166
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 167
	( case _cor3 of
	    ( <( {'head',_cor25,_cor26,_cor27,_rec4,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'erlang':'+'
			  (_cor1, _cor0)
		  in  let <_cor17> =
			  case call 'file':'pread'
				   (_rec4, _cor2, _cor4) of
			    %% Line 168
			    <{'error',Reason}>
				when let <_cor7> =
				      call 'erlang':'=:='
					  ('enomem', Reason)
				  in  let <_cor8> =
					  call 'erlang':'=:='
					      ('einval', Reason)
				      in  call 'erlang':'or'
					      (_cor7, _cor8) ->
				%% Line 169
				{'error',{'bad_object_header',_cor45}}
			    %% Line 170
			    <{'error',Reason}> when 'true' ->
				%% Line 171
				{'file_error',_cor45,Reason}
			    %% Line 172
			    <{'ok',Bin}>
				when try
				      let <_cor13> =
					  call 'erlang':'byte_size'
					      (Bin)
				      in  call 'erlang':'<'
					      (_cor13, _cor1)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				%% Line 173
				{'error',{'premature_eof',_cor45}}
			    %% Line 174
			    <OK> when 'true' ->
				OK
			  end
		      in  %% Line 176
			  case _cor17 of
			    %% Line 177
			    <{'ok',_X_Bin}> when 'true' ->
				_cor17
			    %% Line 179
			    <Error> when 'true' ->
				let <_cor19> =
				    %% Line 180
				    apply 'corrupt'/2
					(_cor3, Error)
				in  %% Line 180
				    call 'erlang':'throw'
					(_cor19)
			  end
	      -| ['compiler_generated'] )
	    ( <_cor55> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'ipread'/3 =
    %% Line 184
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 185
	    try
		%% Line 186
		apply 'disk_map_pread'/1
		    (_cor1)
	    of <_cor3> ->
		_cor3
	    catch <_cor6,_cor5,_cor4> ->
		case <_cor6,_cor5,_cor4> of
		  %% Line 187
		  <'throw',Bad,_cor14> when 'true' ->
		      let <_cor7> =
			  %% Line 188
			  apply 'corrupt_reason'/2
			      (_cor2, {'disk_map',Bad})
		      in  %% Line 188
			  call 'erlang':'throw'
			      (_cor7)
		  ( <_cor6,_cor5,_cor4> when 'true' ->
			primop 'raise'
			    (_cor4, _cor5)
		    -| ['compiler_generated'] )
		end
	    %% Line 190
	    ( case _cor2 of
		( <( {'head',_cor15,_cor16,_cor17,_rec8,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		     -| ['compiler_generated'] )> when 'true' ->
		      case call 'file':'ipread_s32bu_p32bu'
			       (_rec8, _cor1, _cor0) of
			%% Line 191
			<{'ok',{0,0,'eof'}}> when 'true' ->
			    %% Line 192
			    []
			%% Line 193
			<{'ok',Reply}> when 'true' ->
			    %% Line 194
			    {'ok',Reply}
			%% Line 195
			<_X_Else> when 'true' ->
			    %% Line 196
			    'eof'
		      end
		  -| ['compiler_generated'] )
		( <_cor45> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','head'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'pwrite'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Head,[]> when 'true' ->
	      %% Line 201
	      {Head,'ok'}
	  %% Line 202
	  <Head,Bins> when 'true' ->
	      do  %% Line 203
		  try
		      %% Line 204
		      apply 'disk_map'/1
			  (Bins)
		  of <_cor2> ->
		      _cor2
		  catch <_cor5,_cor4,_cor3> ->
		      case <_cor5,_cor4,_cor3> of
			%% Line 205
			<'throw',Bad,_cor12> when 'true' ->
			    let <_cor6> =
				%% Line 206
				apply 'corrupt_reason'/2
				    (Head, {'disk_map',Bad,Bins})
			    in  %% Line 206
				call 'erlang':'throw'
				    (_cor6)
			( <_cor5,_cor4,_cor3> when 'true' ->
			      primop 'raise'
				  (_cor3, _cor4)
			  -| ['compiler_generated'] )
		      end
		  %% Line 208
		  ( case Head of
		      ( <( {'head',_cor13,_cor14,_cor15,_rec9,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'file':'pwrite'
				     (_rec9, Bins) of
			      %% Line 209
			      <'ok'> when 'true' ->
				  %% Line 210
				  {Head,'ok'}
			      %% Line 211
			      <Error> when 'true' ->
				  %% Line 212
				  apply 'corrupt_file'/2
				      (Head, Error)
			    end
			-| ['compiler_generated'] )
		      ( <_cor43> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'write'/2 =
    %% Line 216
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Head,[]> when 'true' ->
	      %% Line 217
	      'ok'
	  %% Line 218
	  <Head,Bins> when 'true' ->
	      %% Line 219
	      ( case Head of
		  ( <( {'head',_cor7,_cor8,_cor9,_rec10,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'file':'write'
				 (_rec10, Bins) of
			  %% Line 220
			  <'ok'> when 'true' ->
			      %% Line 221
			      'ok'
			  %% Line 222
			  <Error> when 'true' ->
			      %% Line 223
			      apply 'corrupt_file'/2
				  (Head, Error)
			end
		    -| ['compiler_generated'] )
		  ( <_cor37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'write_file'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	%% Line 229
	( case _cor1 of
	    ( <( {'head',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec11,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor9> =
		      case call 'file':'open'
			       (_rec11, ['binary'|['raw'|['write']]]) of
			%% Line 230
			<{'ok',Fd}> when 'true' ->
			    let <R1> =
				%% Line 231
				call 'file':'write'
				    (Fd, _cor0)
			    in  let <R2> =
				    %% Line 232
				    call 'file':'sync'
					(Fd)
				in  let <R3> =
					%% Line 233
					call 'file':'close'
					    (Fd)
				    in  %% Line 234
					case <R1,R2,R3> of
					  %% Line 235
					  <'ok','ok',_cor45>
					      when call 'erlang':'=:='
						    (_cor45,
						     R3) ->
					      R3
					  %% Line 236
					  <'ok',_cor46,_cor47>
					      when call 'erlang':'=:='
						    (_cor46,
						     R2) ->
					      R2
					  %% Line 237
					  <_cor48,_cor49,_cor50>
					      when call 'erlang':'=:='
						    (_cor48,
						     R1) ->
					      R1
					  ( <_fol399,_fol400,_fol401> when 'true' ->
						let <_cor7> = {_fol399,_fol400,_fol401}
						in  primop 'match_fail'
							({'case_clause',_cor7})
					    -| ['compiler_generated'] )
					end
			%% Line 239
			<Else> when 'true' ->
			    %% Line 240
			    Else
		      end
		  in  %% Line 242
		      case _cor9 of
			%% Line 243
			<'ok'> when 'true' ->
			    %% Line 244
			    'ok'
			%% Line 245
			<Error> when 'true' ->
			    %% Line 246
			    apply 'corrupt_file'/2
				(_cor1, Error)
		      end
	      -| ['compiler_generated'] )
	    ( <_cor44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'truncate'/2 =
    %% Line 250
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    catch
		%% Line 251
		( case _cor1 of
		    ( <( {'head',_cor11,_cor12,_cor13,_rec12,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}
			 -| ['compiler_generated'] )> when 'true' ->
			  apply 'truncate'/3
			      (_rec12, _cor31, _cor0)
		      -| ['compiler_generated'] )
		    ( <_cor41> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	in  %% Line 251
	    case _cor6 of
	      %% Line 252
	      <'ok'> when 'true' ->
		  %% Line 253
		  'ok'
	      %% Line 254
	      <Error> when 'true' ->
		  let <_cor7> =
		      %% Line 255
		      apply 'corrupt'/2
			  (_cor1, Error)
		  in  %% Line 255
		      call 'erlang':'throw'
			  (_cor7)
	    end
'position'/2 =
    %% Line 259
    fun (_cor1,_cor0) ->
	%% Line 260
	( case _cor1 of
	    ( <( {'head',_cor7,_cor8,_cor9,_rec14,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'position'
			   (_rec14, _cor0) of
		    %% Line 261
		    <Error = {'error',_X_Reason}> when 'true' ->
			%% Line 262
			apply 'corrupt_file'/2
			    (_cor1, Error)
		    %% Line 263
		    <OK> when 'true' ->
			OK
		  end
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'sync'/1 =
    %% Line 267
    fun (_cor0) ->
	%% Line 268
	( case _cor0 of
	    ( <( {'head',_cor5,_cor6,_cor7,_rec15,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'sync'
			   (_rec15) of
		    %% Line 269
		    <'ok'> when 'true' ->
			%% Line 270
			'ok'
		    %% Line 271
		    <Error> when 'true' ->
			%% Line 272
			apply 'corrupt_file'/2
			    (_cor0, Error)
		  end
	      -| ['compiler_generated'] )
	    ( <_cor35> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'open'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	%% Line 276
	case call 'file':'open'
		 (_cor1, _cor0) of
	  %% Line 277
	  <{'ok',Fd}> when 'true' ->
	      %% Line 278
	      {'ok',Fd}
	  %% Line 279
	  <Error> when 'true' ->
	      %% Line 280
	      apply 'file_error'/2
		  (_cor1, Error)
	end
'truncate'/3 =
    %% Line 283
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 284
	    ( case <> of
		<>
		    when call 'erlang':'=/='
			  (_cor0,
			   'cur') ->
		    let <_cor3> =
			apply 'position'/3
			    (_cor2, _cor1, _cor0)
		    in  ( [_cor3|[]]
			  -| ['compiler_generated'] )
		( <> when 'true' ->
		      []
		  -| ['compiler_generated'] )
	      end
	      -| ['list_comprehension'] )
	in  %% Line 285
	    case call 'file':'truncate'
		     (_cor2) of
	      %% Line 286
	      <'ok'> when 'true' ->
		  %% Line 287
		  'ok'
	      %% Line 288
	      <Error> when 'true' ->
		  %% Line 289
		  apply 'file_error'/2
		      (_cor1, {'error',Error})
	    end
'fwrite'/3 =
    %% Line 292
    fun (_cor2,_cor1,_cor0) ->
	%% Line 293
	case call 'file':'write'
		 (_cor2, _cor0) of
	  %% Line 294
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 295
	  <Error> when 'true' ->
	      apply 'file_error_close'/3
		  (_cor2, _cor1, Error)
	end
'position'/3 =
    %% Line 298
    fun (_cor2,_cor1,_cor0) ->
	%% Line 299
	case call 'file':'position'
		 (_cor2, _cor0) of
	  %% Line 300
	  <{'error',Error}> when 'true' ->
	      apply 'file_error'/2
		  (_cor1, {'error',Error})
	  %% Line 301
	  <OK> when 'true' ->
	      OK
	end
'position_close'/3 =
    %% Line 304
    fun (_cor2,_cor1,_cor0) ->
	%% Line 305
	case call 'file':'position'
		 (_cor2, _cor0) of
	  %% Line 306
	  <{'error',Error}> when 'true' ->
	      apply 'file_error_close'/3
		  (_cor2, _cor1, {'error',Error})
	  %% Line 307
	  <OK> when 'true' ->
	      OK
	end
'pwrite'/4 =
    %% Line 310
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 311
	case call 'file':'pwrite'
		 (_cor3, _cor1, _cor0) of
	  %% Line 312
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 313
	  <Error> when 'true' ->
	      apply 'file_error'/2
		  (_cor2, {'error',Error})
	end
'pwrite'/3 =
    %% Line 316
    fun (_cor2,_cor1,_cor0) ->
	%% Line 317
	case call 'file':'pwrite'
		 (_cor2, _cor0) of
	  %% Line 318
	  <'ok'> when 'true' ->
	      %% Line 319
	      'ok'
	  %% Line 320
	  <{'error',{_X_NoWrites,Reason}}> when 'true' ->
	      %% Line 321
	      apply 'file_error'/2
		  (_cor1, {'error',Reason})
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'pread_close'/4 =
    %% Line 324
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 325
	case call 'file':'pread'
		 (_cor3, _cor1, _cor0) of
	  %% Line 326
	  <{'error',Error}> when 'true' ->
	      %% Line 327
	      apply 'file_error_close'/3
		  (_cor3, _cor2, {'error',Error})
	  %% Line 328
	  <{'ok',Bin}>
	      when try
		    let <_cor4> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'<'
			    (_cor4, _cor0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_X_> =
		  %% Line 329
		  ( call 'file':'close'
			(_cor3)
		    -| ['result_not_wanted'] )
	      in  %% Line 330
		  call 'erlang':'throw'
		      ({'error',{'tooshort',_cor2}})
	  %% Line 331
	  <'eof'> when 'true' ->
	      let <_X_> =
		  %% Line 332
		  ( call 'file':'close'
			(_cor3)
		    -| ['result_not_wanted'] )
	      in  %% Line 333
		  call 'erlang':'throw'
		      ({'error',{'tooshort',_cor2}})
	  %% Line 334
	  <OK> when 'true' ->
	      OK
	end
'file_error'/2 =
    %% Line 337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FileName,{'error',Reason}> when 'true' ->
	      %% Line 338
	      call 'erlang':'throw'
		  ({'error',{'file_error',FileName,Reason}})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'file_error_close'/3 =
    %% Line 340
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fd,FileName,{'error',Reason}> when 'true' ->
	      let <_X_> =
		  %% Line 341
		  ( call 'file':'close'
			(Fd)
		    -| ['result_not_wanted'] )
	      in  %% Line 342
		  call 'erlang':'throw'
		      ({'error',{'file_error',FileName,Reason}})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'file_error_close',3}}] )
	    -| ['compiler_generated'] )
	end
'debug_mode'/0 =
    %% Line 344
    fun () ->
	let <_cor0> =
	    %% Line 345
	    call 'os':'getenv'
		([68|[69|[84|[83|[95|[68|[69|[66|[85|[71]]]]]]]]]])
	in  %% Line 345
	    call 'erlang':'=:='
		(_cor0, [116|[114|[117|[101]]]])
'bad_object'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	%% Line 348
	case apply 'debug_mode'/0
		 () of
	  %% Line 349
	  <'true'> when 'true' ->
	      %% Line 350
	      {'bad_object',_cor1,_cor0}
	  %% Line 351
	  <'false'> when 'true' ->
	      %% Line 353
	      {'bad_object',_cor1}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'read_n'/2 =
    %% Line 356
    fun (_cor1,_cor0) ->
	%% Line 357
	case call 'file':'read'
		 (_cor1, _cor0) of
	  %% Line 358
	  <{'ok',Bin}> when 'true' ->
	      %% Line 359
	      Bin
	  %% Line 360
	  <_X_Else> when 'true' ->
	      %% Line 361
	      'eof'
	end
'pread_n'/3 =
    %% Line 364
    fun (_cor2,_cor1,_cor0) ->
	%% Line 365
	case call 'file':'pread'
		 (_cor2, _cor1, _cor0) of
	  %% Line 366
	  <{'ok',Bin}> when 'true' ->
	      %% Line 367
	      Bin
	  %% Line 368
	  <_cor7> when 'true' ->
	      %% Line 369
	      'eof'
	end
'read_4'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	%% Line 373
	case call 'file':'position'
		 (_cor1, _cor0) of
	  <{'ok',_cor6}> when 'true' ->
	      %% Line 374
	      case call 'dets_utils':'read_n'
		       (_cor1, 4) of
		<#{#<Four>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 375
		    Four
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'corrupt_file'/2 =
    %% Line 377
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Head,{'error',Reason}> when 'true' ->
	      %% Line 378
	      ( case Head of
		  ( <( {'head',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_rec16,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Error> = {'error',{'file_error',_rec16,Reason}}
			in  let <_cor5> =
				%% Line 379
				apply 'corrupt'/2
				    (Head, Error)
			    in  %% Line 379
				call 'erlang':'throw'
				    (_cor5)
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'corrupt_file',2}}] )
	    -| ['compiler_generated'] )
	end
'corrupt_reason'/2 =
    %% Line 382
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 383
	    case apply 'get_disk_map'/0
		     () of
	      %% Line 384
	      <'no_disk_map'> when 'true' ->
		  _cor0
	      %% Line 386
	      <DM> when 'true' ->
		  let <ST> =
		      %% Line 387
		      call 'erlang':'get_stacktrace'
			  ()
		  in  let <PD> =
			  %% Line 388
			  call 'erlang':'get'
			      ()
		      in  %% Line 389
			  {_cor0,ST,PD,DM}
	    end
	in  %% Line 391
	    ( case _cor1 of
		( <( {'head',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_rec17,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Error> = {'error',{_cor5,_rec17}}
		      in  %% Line 392
			  apply 'corrupt'/2
			      (_cor1, Error)
		  -| ['compiler_generated'] )
		( <_cor42> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','head'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'corrupt'/2 =
    %% Line 394
    fun (_cor1,_cor0) ->
	do  %% Line 395
	    case call 'erlang':'get'
		     ('verbose') of
	      %% Line 396
	      <'yes'> when 'true' ->
		  %% Line 398
		  ( case _cor1 of
		      ( <( {'head',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec18,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'error_logger':'format'
				([42|[42|[32|[100|[101|[116|[115|[58|[32|[67|[111|[114|[114|[117|[112|[116|[32|[116|[97|[98|[108|[101|[32|[126|[112|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec18|[_cor0|[]]])
			-| ['compiler_generated'] )
		      ( <_cor43> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 399
	      <_cor44> when 'true' ->
		  'ok'
	    end
	    %% Line 401
	    ( case _cor1 of
		( <( {'head',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_rec19,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74}
		     -| ['compiler_generated'] )> when 'true' ->
		      case _rec19 of
			%% Line 402
			<{'error',_cor76}> when 'true' ->
			    %% Line 403
			    {_cor1,_cor0}
			%% Line 404
			<_cor77> when 'true' ->
			    let <_cor9> =
				%% Line 405
				call 'erlang':'setelement'
				    (16, _cor1, _cor0)
			    in  %% Line 405
				{_cor9,_cor0}
		      end
		  -| ['compiler_generated'] )
		( <_cor75> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','head'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'vformat'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	%% Line 409
	case call 'erlang':'get'
		 ('verbose') of
	  %% Line 410
	  <'yes'> when 'true' ->
	      call 'error_logger':'format'
		  (_cor1, _cor0)
	  %% Line 411
	  <_cor5> when 'true' ->
	      'ok'
	end
'code_to_type'/1 =
    %% Line 414
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      'set'
	  %% Line 415
	  <2> when 'true' ->
	      'bag'
	  %% Line 416
	  <3> when 'true' ->
	      'duplicate_bag'
	  %% Line 417
	  <_X_Type> when 'true' ->
	      'badtype'
	end
'type_to_code'/1 =
    %% Line 419
    fun (_cor0) ->
	case _cor0 of
	  <'set'> when 'true' ->
	      1
	  %% Line 420
	  <'bag'> when 'true' ->
	      2
	  %% Line 421
	  <'duplicate_bag'> when 'true' ->
	      3
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type_to_code',1}}] )
	    -| ['compiler_generated'] )
	end
'cache_size'/1 =
    %% Line 427
    fun (_cor0) ->
	%% Line 428
	( case _cor0 of
	    ( <( {'cache',_cor6,_cor7,_cor8,_cor9,_cor10,_rec21}
		 -| ['compiler_generated'] )> when 'true' ->
		  {_rec21,_cor10}
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cache'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'cache_lookup'/4 =
    %% Line 431
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type,[Key|Keys],CL,LU> when 'true' ->
	      %% Line 433
	      case apply 'mkeysearch'/3
		       (Key, 1, CL) of
		%% Line 434
		<{'value',{_cor9,{_X_Seq,{'insert',Object}}}}>
		    when let <_cor10> =
			  call 'erlang':'=:='
			      (_cor9, Key)
		      in  let <_cor11> =
			      call 'erlang':'=:='
				  (Type, 'set')
			  in  call 'erlang':'and'
				  (_cor10, _cor11) ->
		    %% Line 435
		    apply 'cache_lookup'/4
			(Type, Keys, CL, [Object|LU])
		%% Line 436
		<{'value',{_cor12,{_X_Seq,'delete_key'}}}>
		    when call 'erlang':'=:='
			  (_cor12,
			   Key) ->
		    %% Line 437
		    apply 'cache_lookup'/4
			(Type, Keys, CL, LU)
		%% Line 438
		<_cor13> when 'true' ->
		    %% Line 439
		    'false'
	      end
	  %% Line 441
	  <_X_Type,[],_X_CL,LU> when 'true' ->
	      %% Line 442
	      LU
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'cache_lookup',4}}] )
	    -| ['compiler_generated'] )
	end
'reset_cache'/1 =
    %% Line 444
    fun (_cor0) ->
	%% Line 445
	( case _cor0 of
	    ( <( {'cache',_cor16,_cor17,_cor18,_rec23,_cor19,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      %% Line 446
		      case <> of
			%% Line 447
			<>
			    when call 'erlang':'=:='
				  (_rec23,
				   'undefined') ->
			    _rec23
			%% Line 449
			<> when 'true' ->
			    %% Line 450
			    call 'erlang':'now'
				()
		      end
		  in  let <PK> =
			  %% Line 452
			  apply 'family'/1
			      (_cor16)
		      in  let <_cor11> =
			      %% Line 453
			      {'cache',[],0,0,_cor4,_cor19,_cor20}
			  in  %% Line 454
			      {_cor11,_cor18,PK}
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cache'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_empty_cache'/1 =
    %% Line 456
    fun (_cor0) ->
	%% Line 457
	( case _cor0 of
	    ( <( {'cache',_rec33,_cor4,_cor5,_cor6,_cor7,_cor8}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'erlang':'=:='
		      (_rec33, [])
	      -| ['compiler_generated'] )
	    ( <_cor9> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cache'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'new_cache'/1 =
    %% Line 459
    fun (_cor0) ->
	case _cor0 of
	  <{Delay,Size}> when 'true' ->
	      %% Line 460
	      {'cache',[],0,0,%% Line 461
			      'undefined',%% Line 461
					  Size,%% Line 461
					       Delay}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new_cache',1}}] )
	    -| ['compiler_generated'] )
	end
'init_slots_from_old_file'/2 =
    %% Line 480
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Slot,Addr}|T],Ftab> when 'true' ->
	      let <_cor2> =
		  %% Line 481
		  call 'erlang':'+'
		      (Slot, 1)
	      in  %% Line 481
		  apply 'init_slot'/3
		      (_cor2, [{Slot,Addr}|T], Ftab)
	  %% Line 482
	  <[],Ftab> when 'true' ->
	      %% Line 483
	      Ftab
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'init_slots_from_old_file',2}}] )
	    -| ['compiler_generated'] )
	end
'init_slot'/3 =
    %% Line 485
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Slot,[],Ftab> when 'true' ->
	      %% Line 486
	      Ftab
	  %% Line 487
	  <_X_Slot,[{_X_Addr,0}|T],Ftab> when 'true' ->
	      %% Line 488
	      apply 'init_slots_from_old_file'/2
		  (T, Ftab)
	  %% Line 489
	  <Slot,[{_X_Slot1,Addr}|T],Ftab> when 'true' ->
	      let <Stree> =
		  %% Line 490
		  call 'erlang':'element'
		      (Slot, Ftab)
	      in  let <_cor4> =
		      %% Line 492
		      apply 'bplus_insert'/2
			  (Stree, Addr)
		  in  let <_cor5> =
			  %% Line 492
			  call 'erlang':'setelement'
			      (Slot, Ftab, _cor4)
		      in  %% Line 492
			  apply 'init_slot'/3
			      (Slot, T, _cor5)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'init_slot',3}}] )
	    -| ['compiler_generated'] )
	end
'init_alloc'/1 =
    %% Line 517
    fun (_cor0) ->
	let <Ftab> =
	    %% Line 518
	    apply 'empty_free_lists'/0
		()
	in  let <Empty> =
		%% Line 519
		apply 'bplus_empty_tree'/0
		    ()
	    in  let <_cor3> =
		    %% Line 520
		    apply 'bplus_insert'/2
			(Empty, _cor0)
		in  %% Line 520
		    call 'erlang':'setelement'
			(32, Ftab, _cor3)
'empty_free_lists'/0 =
    %% Line 522
    fun () ->
	let <Empty> =
	    %% Line 523
	    apply 'bplus_empty_tree'/0
		()
	in  %% Line 525
	    call 'erlang':'make_tuple'
		(32, Empty)
'alloc_many'/4 =
    %% Line 528
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Head,_X_Sz,0,_X_A0> when 'true' ->
	      %% Line 529
	      Head
	  %% Line 530
	  <Head,Sz,N,A0> when 'true' ->
	      %% Line 531
	      ( case Head of
		  ( <( {'head',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec34,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor7> =
			    %% Line 532
			    call 'erlang':'*'
				(Sz, N)
			in  let <_rec35> =
				%% Line 532
				apply 'alloc_many1'/5
				    (_rec34, 1, _cor7, A0, Head)
			    in  %% Line 532
				call 'erlang':'setelement'
				    (12, Head, _rec35)
		    -| ['compiler_generated'] )
		  ( <_cor45> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'alloc_many1'/5 =
    %% Line 535
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 536
	case apply 'find_first_free'/4
		 (_cor4, _cor3, _cor3, _cor0) of
	  <{FPos,Addr}> when 'true' ->
	      %% Line 537
	      case call 'erlang':'>='
		       (Addr, _cor1) of
		<'true'> when 'true' ->
		    %% Line 538
		    case <> of
		      %% Line 539
		      <>
			  when try
				let <_cor7> =
				    call 'erlang':'-'
					(FPos, 1)
				in  let <_cor8> =
					call 'erlang':'bsl'
					    (1, _cor7)
				    in  call 'erlang':'>='
					    (_cor8, _cor2)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 662
			  ( case _cor2 of
			      ( <( N
				   -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '>'
									     -| ['compiler_generated'] )
					    (_cor2,
					     ( 0
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    ( let <_fol695> =
					  %% Line 663
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '+'
										 -| ['compiler_generated'] )
						(( N
						   -| ['compiler_generated'] ), ( 1
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_fol696> =
						%% Line 663
						( apply ( 'log2'/1
							  -| ['compiler_generated'] )
						      (_fol695)
						  -| ['compiler_generated'] )
					    in  let <_cor9> =
						    %% Line 663
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '+'
											   -| ['compiler_generated'] )
							  (( 1
							     -| ['compiler_generated'] ), _fol696)
						      -| ['compiler_generated'] )
						in  apply 'alloc_many2'/5
							(_cor4, _cor9, _cor2, _cor1, _cor0)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_fol697> when ( 'true'
						 -| ['compiler_generated'] ) ->
				    ( primop ( 'match_fail'
					       -| ['compiler_generated'] )
					  (( {( 'function_clause'
						-| ['compiler_generated'] ),_fol697}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 541
		      <> when 'true' ->
			  let <NewFtab> =
			      %% Line 542
			      apply 'reserve_buddy'/4
				  (_cor4, FPos, FPos, Addr)
			  in  let <_cor11> =
				  %% Line 543
				  call 'erlang':'-'
				      (FPos, 1)
			      in  let <_cor12> =
				      %% Line 543
				      call 'erlang':'bsl'
					  (1, _cor11)
				  in  let <NSize> =
					  %% Line 543
					  call 'erlang':'-'
					      (_cor2, _cor12)
				      in  %% Line 544
					  apply 'alloc_many1'/5
					      (NewFtab, FPos, NSize, Addr, _cor0)
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'alloc_many2'/5 =
    %% Line 547
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ftab,_X_Pos,0,_X_A0,_X_H> when 'true' ->
	      %% Line 548
	      Ftab
	  %% Line 549
	  <Ftab,Pos,Size,A0,H>
	      when try
		    let <_cor5> =
			call 'erlang':'-'
			    (Pos, 1)
		    in  let <_cor6> =
			    call 'erlang':'bsl'
				(1, _cor5)
			in  let <_cor7> =
				call 'erlang':'band'
				    (Size, _cor6)
			    in  call 'erlang':'>'
				    (_cor7, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 550
	      case apply 'find_first_free'/4
		       (Ftab, Pos, Pos, H) of
		<{FPos,Addr}> when 'true' ->
		    %% Line 551
		    case call 'erlang':'>='
			     (Addr, A0) of
		      <'true'> when 'true' ->
			  let <NewFtab> =
			      %% Line 552
			      apply 'reserve_buddy'/4
				  (Ftab, FPos, Pos, Addr)
			  in  let <_cor11> =
				  %% Line 553
				  call 'erlang':'-'
				      (Pos, 1)
			      in  let <_cor12> =
				      %% Line 553
				      call 'erlang':'bsl'
					  (1, _cor11)
				  in  let <NSize> =
					  %% Line 553
					  call 'erlang':'-'
					      (Size, _cor12)
				      in  let <_cor14> =
					      %% Line 554
					      call 'erlang':'-'
						  (Pos, 1)
					  in  %% Line 554
					      apply 'alloc_many2'/5
						  (NewFtab, _cor14, NSize, Addr, H)
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 555
	  <Ftab,Pos,Size,A0,H> when 'true' ->
	      let <_cor15> =
		  %% Line 556
		  call 'erlang':'-'
		      (Pos, 1)
	      in  %% Line 556
		  apply 'alloc_many2'/5
		      (Ftab, _cor15, Size, A0, H)
	end
'alloc'/2 =
    %% Line 559
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Head = {'head',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69},Sz>
	      when call 'erlang':'=/='
		    (_cor54,
		     'false') ->
	      %% Line 662
	      ( case Sz of
		  ( <( N
		       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '>'
								 -| ['compiler_generated'] )
				(Sz,
				 ( 0
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] ) ->
			( let <_fol704> =
			      %% Line 663
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '+'
								     -| ['compiler_generated'] )
				    (( N
				       -| ['compiler_generated'] ), ( 1
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  ( let <_cor2> =
				    %% Line 663
				    ( apply ( 'log2'/1
					      -| ['compiler_generated'] )
					  (_fol704)
				      -| ['compiler_generated'] )
				in  let <Pos> =
					%% Line 663
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '+'
									       -| ['compiler_generated'] )
					      (( 1
						 -| ['compiler_generated'] ), ( _cor2
										-| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  case _cor49 of
					  <{Frozen,Ftab}> when 'true' ->
					      case apply 'find_first_free'/4
						       (Frozen, Pos, Pos, Head) of
						<{FPos,Addr}> when 'true' ->
						    let <NewFrozen> =
							apply 'reserve_buddy'/4
							    (Frozen, FPos, Pos, Addr)
						    in  let <Ftab1> =
							    apply 'undo_free'/4
								(Ftab, FPos, Addr, _cor69)
							in  let <NewFtab> =
								apply 'move_down'/4
								    (Ftab1, FPos, Pos, Addr)
							    in  let <NewFreelists> = {NewFrozen,NewFtab}
								in  let <_cor21> =
									call 'erlang':'setelement'
									    (12, Head, NewFreelists)
								    in  {_cor21,Addr,Pos}
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor12})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor11})
					    -| ['compiler_generated'] )
					end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <( _cor3
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),( _cor3
								  -| ['compiler_generated'] )}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 569
	  <Head = {'head',_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194},Sz>
	      when call 'erlang':'=:='
		    (_cor179,
		     'false') ->
	      %% Line 662
	      ( case Sz of
		  ( <( N
		       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '>'
								 -| ['compiler_generated'] )
				(Sz,
				 ( 0
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] ) ->
			( let <_fol895> =
			      %% Line 663
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '+'
								     -| ['compiler_generated'] )
				    (( N
				       -| ['compiler_generated'] ), ( 1
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  ( let <_cor2> =
				    %% Line 663
				    ( apply ( 'log2'/1
					      -| ['compiler_generated'] )
					  (_fol895)
				      -| ['compiler_generated'] )
				in  let <Pos> =
					%% Line 663
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '+'
									       -| ['compiler_generated'] )
					      (( 1
						 -| ['compiler_generated'] ), ( _cor2
										-| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  case apply 'find_first_free'/4
						 (_cor174, Pos, Pos, Head) of
					  <{FPos,Addr}> when 'true' ->
					      let <NewFtab> =
						  apply 'reserve_buddy'/4
						      (_cor174, FPos, Pos, Addr)
					      in  let <_cor36> =
						      call 'erlang':'setelement'
							  (12, Head, NewFtab)
						  in  {_cor36,Addr,Pos}
					  ( <_cor32> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor32})
					    -| ['compiler_generated'] )
					end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <( _cor3
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'function_clause'
				    -| ['compiler_generated'] ),( _cor3
								  -| ['compiler_generated'] )}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37})
		  -| [{'function_name',{'alloc',2}}] )
	    -| ['compiler_generated'] )
	end
'find_first_free'/4 =
    %% Line 577
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Ftab,Pos,_X_Pos0,Head>
	      when call 'erlang':'>'
		    (Pos,
		     32) ->
	      %% Line 578
	      ( case Head of
		  ( <( {'head',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_rec42,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'throw'
			    ({'error',{'no_more_space_on_file',_rec42}})
		    -| ['compiler_generated'] )
		  ( <_cor51> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 579
	  <Ftab,Pos,Pos0,Head> when 'true' ->
	      let <PosTab> =
		  %% Line 580
		  call 'erlang':'element'
		      (Pos, Ftab)
	      in  %% Line 581
		  case apply 'bplus_lookup_first'/1
			   (PosTab) of
		    %% Line 582
		    <'undefined'> when 'true' ->
			let <_cor7> =
			    %% Line 583
			    call 'erlang':'+'
				(Pos, 1)
			in  %% Line 583
			    apply 'find_first_free'/4
				(Ftab, _cor7, Pos0, Head)
		    %% Line 584
		    <{'ok',Addr}>
			when try
			      let <_cor11> =
				  call 'erlang':'-'
				      (Pos0, 1)
			      in  let <_cor12> =
				      call 'erlang':'bsl'
					  (1, _cor11)
				  in  let <_cor13> =
					  call 'erlang':'+'
					      (Addr, _cor12)
				      in  call 'erlang':'>'
					      (_cor13, 2097483648)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 586
			( case Head of
			    ( <( {'head',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_rec43,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'throw'
				      ({'error',{'no_more_space_on_file',_rec43}})
			      -| ['compiler_generated'] )
			    ( <_cor82> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','head'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 587
		    <{'ok',Addr}> when 'true' ->
			%% Line 588
			{Pos,Addr}
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor16})
		      -| ['compiler_generated'] )
		  end
	end
'undo_free'/4 =
    %% Line 594
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <PosTab> =
	    %% Line 595
	    call 'erlang':'element'
		(_cor2, _cor3)
	in  %% Line 596
	    case apply 'bplus_lookup'/2
		     (PosTab, _cor1) of
	      %% Line 597
	      <'undefined'> when 'true' ->
		  let <_cor5> =
		      %% Line 598
		      call 'erlang':'-'
			  (_cor2, 1)
		  in  let <_cor6> =
			  %% Line 598
			  call 'erlang':'bsl'
			      (1, _cor5)
		      in  %% Line 598
			  case apply 'my_buddy'/3
				   (_cor1, _cor6, _cor0) of
			    <{BuddyAddr,MoveUpAddr}> when 'true' ->
				let <_cor8> =
				    %% Line 599
				    apply 'bplus_insert'/2
					(PosTab, BuddyAddr)
				in  let <NewFtab> =
					%% Line 599
					call 'erlang':'setelement'
					    (_cor2, _cor3, _cor8)
				    in  let <_cor10> =
					    %% Line 600
					    call 'erlang':'+'
						(_cor2, 1)
					in  %% Line 600
					    apply 'undo_free'/4
						(NewFtab, _cor10, MoveUpAddr, _cor0)
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	      %% Line 601
	      <{'ok',_cor17}>
		  when call 'erlang':'=:='
			(_cor17,
			 _cor1) ->
		  let <NewPosTab> =
		      %% Line 602
		      apply 'bplus_delete'/2
			  (PosTab, _cor1)
		  in  %% Line 603
		      call 'erlang':'setelement'
			  (_cor2, _cor3, NewPosTab)
	      ( <_cor12> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor12})
		-| ['compiler_generated'] )
	    end
'reserve_buddy'/4 =
    %% Line 606
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <PosTab> =
	    %% Line 607
	    call 'erlang':'element'
		(_cor2, _cor3)
	in  let <NewPosTab> =
		%% Line 608
		apply 'bplus_delete'/2
		    (PosTab, _cor0)
	    in  let <NewFtab> =
		    %% Line 609
		    call 'erlang':'setelement'
			(_cor2, _cor3, NewPosTab)
		in  %% Line 610
		    apply 'move_down'/4
			(NewFtab, _cor2, _cor1, _cor0)
'move_down'/4 =
    %% Line 612
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Ftab,Pos,_cor15,_X_Addr>
	      when call 'erlang':'=:='
		    (_cor15,
		     Pos) ->
	      %% Line 615
	      Ftab
	  %% Line 616
	  <Ftab,Pos,Pos0,Addr> when 'true' ->
	      let <Pos_1> =
		  %% Line 617
		  call 'erlang':'-'
		      (Pos, 1)
	      in  let <Size> =
		      %% Line 618
		      call 'erlang':'bsl'
			  (1, Pos_1)
		  in  let <_cor6> =
			  %% Line 619
			  call 'erlang':'bsr'
			      (Size, 1)
		      in  let <HighBuddy> =
			      %% Line 619
			      call 'erlang':'+'
				  (Addr, _cor6)
			  in  let <_cor8> =
				  %% Line 620
				  call 'erlang':'element'
				      (Pos_1, Ftab)
			      in  let <NewPosTab_1> =
				      %% Line 620
				      apply 'bplus_insert'/2
					  (_cor8, HighBuddy)
				  in  let <NewFtab> =
					  %% Line 621
					  call 'erlang':'setelement'
					      (Pos_1, Ftab, NewPosTab_1)
				      in  %% Line 622
					  apply 'move_down'/4
					      (NewFtab, Pos_1, Pos0, Addr)
	end
'free'/3 =
    %% Line 625
    fun (_cor2,_cor1,_cor0) ->
	let <Ftab> =
	    %% Line 627
	    apply 'get_freelists'/1
		(_cor2)
	in  %% Line 662
	    ( case _cor0 of
		( <( N
		     -| ['compiler_generated'] )>
		      when ( call ( 'erlang'
				 -| ['compiler_generated'] ):( '>'
							       -| ['compiler_generated'] )
			      (_cor0,
			       ( 0
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] ) ->
		      ( let <_fol1031> =
			    %% Line 663
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '+'
								   -| ['compiler_generated'] )
				  (( N
				     -| ['compiler_generated'] ), ( 1
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			in  ( let <_fol1032> =
				  %% Line 663
				  ( apply ( 'log2'/1
					    -| ['compiler_generated'] )
					(_fol1031)
				    -| ['compiler_generated'] )
			      in  let <Pos> =
				      %% Line 663
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '+'
									     -| ['compiler_generated'] )
					    (( 1
					       -| ['compiler_generated'] ), _fol1032)
					-| ['compiler_generated'] )
				  in  ( case _cor2 of
					  ( <( {'head',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_rec44}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor7> =
						    apply 'free_in_pos'/4
							(Ftab, _cor1, Pos, _rec44)
						in  let <_cor8> =
							apply 'set_freelists'/2
							    (_cor2, _cor7)
						    in  {_cor8,Pos}
					    -| ['compiler_generated'] )
					  ( <_cor42> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'function_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'free_in_pos'/4 =
    %% Line 631
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Ftab,_X_Addr,Pos,_X_Base>
	      when call 'erlang':'>'
		    (Pos,
		     32) ->
	      %% Line 632
	      Ftab
	  %% Line 633
	  <Ftab,Addr,Pos,Base> when 'true' ->
	      let <PosTab> =
		  %% Line 634
		  call 'erlang':'element'
		      (Pos, Ftab)
	      in  let <_cor5> =
		      %% Line 635
		      call 'erlang':'-'
			  (Pos, 1)
		  in  let <_cor6> =
			  %% Line 635
			  call 'erlang':'bsl'
			      (1, _cor5)
		      in  %% Line 635
			  case apply 'my_buddy'/3
				   (Addr, _cor6, Base) of
			    <{BuddyAddr,MoveUpAddr}> when 'true' ->
				%% Line 636
				case apply 'bplus_lookup'/2
					 (PosTab, BuddyAddr) of
				  %% Line 637
				  <'undefined'> when 'true' ->
				      let <_cor8> =
					  %% Line 639
					  apply 'bplus_insert'/2
					      (PosTab, Addr)
				      in  %% Line 639
					  call 'erlang':'setelement'
					      (Pos, Ftab, _cor8)
				  %% Line 640
				  <{'ok',_cor18}>
				      when call 'erlang':'=:='
					    (_cor18,
					     BuddyAddr) ->
				      let <PosTab1> =
					  %% Line 641
					  apply 'bplus_delete'/2
					      (PosTab, Addr)
				      in  let <PosTab2> =
					      %% Line 642
					      apply 'bplus_delete'/2
						  (PosTab1, BuddyAddr)
					  in  let <NewFtab> =
						  %% Line 644
						  call 'erlang':'setelement'
						      (Pos, Ftab, PosTab2)
					      in  let <_cor12> =
						      %% Line 645
						      call 'erlang':'+'
							  (Pos, 1)
						  in  %% Line 645
						      apply 'free_in_pos'/4
							  (NewFtab, MoveUpAddr, _cor12, Base)
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor13})
				    -| ['compiler_generated'] )
				end
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	end
'get_freelists'/1 =
    %% Line 648
    fun (_cor0) ->
	case _cor0 of
	  <Head = {'head',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}>
	      when call 'erlang':'=:='
		    (_cor33,
		     'false') ->
	      _cor28
	  %% Line 650
	  <Head = {'head',_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110}>
	      when call 'erlang':'=/='
		    (_cor95,
		     'false') ->
	      %% Line 651
	      case _cor90 of
		<{_X_Frozen,Current}> when 'true' ->
		    %% Line 652
		    Current
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'get_freelists',1}}] )
	    -| ['compiler_generated'] )
	end
'set_freelists'/2 =
    %% Line 654
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Head = {'head',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54},Ftab>
	      when call 'erlang':'=:='
		    (_cor39,
		     'false') ->
	      %% Line 655
	      call 'erlang':'setelement'
		  (12, Head, Ftab)
	  %% Line 656
	  <Head = {'head',_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117},Ftab>
	      when call 'erlang':'=/='
		    (_cor102,
		     'false') ->
	      %% Line 657
	      case _cor97 of
		<{Frozen,_cor149}> when 'true' ->
		    let <_rec49> = {%% Line 658
			 Frozen,%% Line 658
				Ftab}
		    in  %% Line 658
			call 'erlang':'setelement'
			    (12, Head, _rec49)
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22})
		  -| [{'function_name',{'set_freelists',2}}] )
	    -| ['compiler_generated'] )
	end
'sz2pos'/1 =
    %% Line 662
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      let <_cor1> =
		  %% Line 663
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor2> =
		      %% Line 663
		      apply 'log2'/1
			  (_cor1)
		  in  %% Line 663
		      call 'erlang':'+'
			  (1, _cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'sz2pos',1}}] )
	    -| ['compiler_generated'] )
	end
'log2'/1 =
    %% Line 666
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 667
	      case <> of
		<>
		    when call 'erlang':'>'
			  (N,
			   256) ->
		    %% Line 668
		    case <> of
		      <>
			  when call 'erlang':'>'
				(N,
				 1024) ->
			  %% Line 669
			  case <> of
			    <>
				when call 'erlang':'>'
				      (N,
				       2048) ->
				%% Line 670
				case <> of
				  <>
				      when call 'erlang':'>'
					    (N,
					     4096) ->
				      let <_cor13> =
					  %% Line 671
					  case <> of
					    <>
						when try
						      let <_cor9> =
							  call 'erlang':'band'
							      (N, 4095)
						      in  call 'erlang':'=:='
							      (_cor9, 0)
						  of <Try> ->
						      Try
						  catch <T,R> ->
						      'false' ->
						let <_cor10> =
						    %% Line 672
						    call 'erlang':'bsr'
							(N, 12)
						in  %% Line 672
						    apply 'log2'/1
							(_cor10)
					    %% Line 673
					    <> when 'true' ->
						let <_cor11> =
						    call 'erlang':'bsr'
							(N, 12)
						in  let <_cor12> =
							call 'erlang':'+'
							    (1, _cor11)
						    in  apply 'log2'/1
							    (_cor12)
					  end
				      in  %% Line 671
					  call 'erlang':'+'
					      (12, _cor13)
				  %% Line 675
				  <> when 'true' ->
				      12
				end
			    %% Line 677
			    <> when 'true' ->
				11
			  end
		      %% Line 679
		      <>
			  when call 'erlang':'>'
				(N,
				 512) ->
			  10
		      %% Line 680
		      <> when 'true' ->
			  9
		    end
		%% Line 682
		<>
		    when call 'erlang':'>'
			  (N,
			   16) ->
		    %% Line 683
		    case <> of
		      <>
			  when call 'erlang':'>'
				(N,
				 64) ->
			  %% Line 684
			  case <> of
			    <>
				when call 'erlang':'>'
				      (N,
				       128) ->
				8
			    %% Line 685
			    <> when 'true' ->
				7
			  end
		      %% Line 687
		      <>
			  when call 'erlang':'>'
				(N,
				 32) ->
			  6
		      %% Line 688
		      <> when 'true' ->
			  5
		    end
		%% Line 690
		<>
		    when call 'erlang':'>'
			  (N,
			   4) ->
		    %% Line 691
		    case <> of
		      %% Line 692
		      <>
			  when call 'erlang':'>'
				(N,
				 8) ->
			  4
		      %% Line 693
		      <> when 'true' ->
			  3
		    end
		%% Line 695
		<>
		    when call 'erlang':'>'
			  (N,
			   2) ->
		    2
		%% Line 696
		<>
		    when call 'erlang':'>='
			  (N,
			   1) ->
		    1
		%% Line 697
		<> when 'true' ->
		    0
	      end
	  ( <_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23})
		  -| [{'function_name',{'log2',1}}] )
	    -| ['compiler_generated'] )
	end
'make_zeros'/1 =
    %% Line 700
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      []
	  %% Line 701
	  <N>
	      when try
		    let <_cor1> =
			call 'erlang':'rem'
			    (_cor0, 2)
		    in  call 'erlang':'=:='
			    (_cor1, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor2> =
		  %% Line 702
		  call 'erlang':'div'
		      (N, 2)
	      in  let <P> =
		      %% Line 702
		      apply 'make_zeros'/1
			  (_cor2)
		  in  %% Line 703
		      [P|P]
	  %% Line 704
	  <N> when 'true' ->
	      let <_cor4> =
		  %% Line 705
		  call 'erlang':'div'
		      (N, 2)
	      in  let <P> =
		      %% Line 705
		      apply 'make_zeros'/1
			  (_cor4)
		  in  %% Line 706
		      [0|[P|P]]
	end
'my_buddy'/3 =
    %% Line 709
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 710
	    call 'erlang':'-'
		(_cor2, _cor0)
	in  %% Line 710
	    case call 'erlang':'band'
		     (_cor3, _cor1) of
	      %% Line 711
	      <0> when 'true' ->
		  let <_cor4> =
		      %% Line 712
		      call 'erlang':'+'
			  (_cor2, _cor1)
		  in  %% Line 712
		      {_cor4,_cor2}
	      %% Line 713
	      <_cor10> when 'true' ->
		  let <T> =
		      %% Line 714
		      call 'erlang':'-'
			  (_cor2, _cor1)
		  in  %% Line 715
		      {T,T}
	    end
'all_free'/1 =
    %% Line 718
    fun (_cor0) ->
	let <Tab> =
	    %% Line 719
	    apply 'get_freelists'/1
		(_cor0)
	in  %% Line 720
	    ( case _cor0 of
		( <( {'head',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec51}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor5> =
			  %% Line 721
			  apply 'all'/1
			      (Tab)
		      in  %% Line 721
			  case apply 'all_free'/4
				   (_cor5, _rec51, _rec51, []) of
			    %% Line 722
			    <[{_cor39,_cor40}|L]>
				when let <_cor41> =
				      call 'erlang':'=:='
					  (_cor39, _rec51)
				  in  let <_cor42> =
					  call 'erlang':'=:='
					      (_cor40, _rec51)
				      in  call 'erlang':'and'
					      (_cor41, _cor42) ->
				L
			    %% Line 723
			    <L> when 'true' ->
				L
			  end
		  -| ['compiler_generated'] )
		( <_cor38> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','head'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'all_free'/4 =
    %% Line 726
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],X0,Y0,F> when 'true' ->
	      %% Line 727
	      call 'lists':'reverse'
		  ([{X0,Y0}|F])
	  %% Line 728
	  <[{X,Y}|L],X0,Y0,F>
	      when call 'erlang':'=:='
		    (Y0,
		     X) ->
	      %% Line 729
	      apply 'all_free'/4
		  (L, X0, Y, F)
	  %% Line 730
	  <[{X,Y}|L],X0,Y0,F>
	      when call 'erlang':'<'
		    (Y0,
		     X) ->
	      %% Line 731
	      apply 'all_free'/4
		  (L, X, Y, [{X0,Y0}|F])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'all_free',4}}] )
	    -| ['compiler_generated'] )
	end
'all_allocated'/1 =
    %% Line 733
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 734
	    apply 'get_freelists'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 734
		apply 'all'/1
		    (_cor3)
	    in  %% Line 734
		( case _cor0 of
		    ( <( {'head',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_rec52}
			 -| ['compiler_generated'] )> when 'true' ->
			  apply 'all_allocated'/4
			      (_cor4, 0, _rec52, [])
		      -| ['compiler_generated'] )
		    ( <_cor36> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'all_allocated'/4 =
    %% Line 736
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_X0,_X_Y0,[]> when 'true' ->
	      %% Line 737
	      #{}#
	  %% Line 738
	  <[],_X_X0,_X_Y0,A0> when 'true' ->
	      %% Line 739
	      case call 'lists':'reverse'
		       (A0) of
		<[#{#<From>(32,1,'integer',['unsigned'|['big']]),
		    #<To>(32,1,'integer',['unsigned'|['big']])}#|A]> when 'true' ->
		    let <_cor5> =
			%% Line 740
			call 'erlang':'list_to_binary'
			    (A)
		    in  %% Line 740
			{From,To,_cor5}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 741
	  <[{X,Y}|L],X0,Y0,A>
	      when call 'erlang':'=:='
		    (Y0,
		     X) ->
	      %% Line 742
	      apply 'all_allocated'/4
		  (L, X0, Y, A)
	  %% Line 743
	  <[{X,Y}|L],_X_X0,Y0,A>
	      when call 'erlang':'<'
		    (Y0,
		     X) ->
	      let <_cor6> =
		  %% Line 744
		  #{#<Y0>(32,1,'integer',['unsigned'|['big']]),
		    #<X>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 744
		  apply 'all_allocated'/4
		      (L, X, Y, [_cor6|A])
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'all_allocated',4}}] )
	    -| ['compiler_generated'] )
	end
'all_allocated_as_list'/1 =
    %% Line 746
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 747
	    apply 'get_freelists'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 747
		apply 'all'/1
		    (_cor3)
	    in  %% Line 747
		( case _cor0 of
		    ( <( {'head',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_rec53}
			 -| ['compiler_generated'] )> when 'true' ->
			  apply 'all_allocated_as_list'/4
			      (_cor4, 0, _rec53, [])
		      -| ['compiler_generated'] )
		    ( <_cor36> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','head'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'all_allocated_as_list'/4 =
    %% Line 749
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_X0,_X_Y0,[]> when 'true' ->
	      %% Line 750
	      []
	  %% Line 751
	  <[],_X_X0,_X_Y0,A> when 'true' ->
	      %% Line 752
	      call 'lists':'reverse'
		  (A)
	  %% Line 753
	  <[{X,Y}|L],X0,Y0,A>
	      when call 'erlang':'=:='
		    (Y0,
		     X) ->
	      %% Line 754
	      apply 'all_allocated_as_list'/4
		  (L, X0, Y, A)
	  %% Line 755
	  <[{X,Y}|L],_X_X0,Y0,A>
	      when call 'erlang':'<'
		    (Y0,
		     X) ->
	      %% Line 756
	      apply 'all_allocated_as_list'/4
		  (L, X, Y, [[Y0|X]|A])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'all_allocated_as_list',4}}] )
	    -| ['compiler_generated'] )
	end
'all'/1 =
    %% Line 758
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 759
	    call 'erlang':'tuple_size'
		(_cor0)
	in  %% Line 759
	    apply 'all'/3
		(_cor0, _cor1, [])
'all'/3 =
    %% Line 761
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Tab,0,L> when 'true' ->
	      %% Line 764
	      call 'lists':'sort'
		  (L)
	  %% Line 765
	  <Tab,I,L> when 'true' ->
	      let <_cor3> =
		  %% Line 766
		  call 'erlang':'element'
		      (I, Tab)
	      in  let <LL> =
		      %% Line 766
		      apply 'collect_tree'/3
			  (_cor3, I, L)
		  in  let <_cor5> =
			  %% Line 767
			  call 'erlang':'-'
			      (I, 1)
		      in  %% Line 767
			  apply 'all'/3
			      (Tab, _cor5, LL)
	end
'find_allocated'/4 =
    %% Line 770
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <MaxAddr> =
	    %% Line 771
	    call 'erlang':'+'
		(_cor2, _cor1)
	in  let <Ints> =
		%% Line 772
		apply 'collect_all_interval'/4
		    (_cor3, _cor2, MaxAddr, _cor0)
	    in  %% Line 773
		apply 'allocated'/5
		    (Ints, _cor2, MaxAddr, _cor3, _cor0)
'allocated'/5 =
    %% Line 775
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 776
	case apply 'allocated1'/4
		 (_cor4, _cor3, _cor2, []) of
	  %% Line 777
	  <[]> when 'true' ->
	      %% Line 778
	      case apply 'find_next_allocated'/3
		       (_cor1, _cor3, _cor0) of
		%% Line 779
		<{From,_cor13}> when 'true' ->
		    %% Line 780
		    apply 'find_allocated'/4
			(_cor1, From, 8192, _cor0)
		%% Line 781
		<'none'> when 'true' ->
		    %% Line 782
		    #{}#
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 784
	  <L> when 'true' ->
	      let <_cor6> =
		  %% Line 785
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 785
		  call 'erlang':'list_to_binary'
		      (_cor6)
	end
'allocated1'/4 =
    %% Line 788
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],Y0,Max,A>
	      when call 'erlang':'<'
		    (Y0,
		     Max) ->
	      let <_cor4> =
		  %% Line 789
		  #{#<Y0>(32,1,'integer',['unsigned'|['big']]),
		    #<Max>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 789
		  [_cor4|A]
	  %% Line 790
	  <[],_X_Y0,_X_Max,A> when 'true' ->
	      %% Line 791
	      A
	  %% Line 792
	  <[{X,Y}|L],Y0,Max,A>
	      when call 'erlang':'>='
		    (Y0,
		     X) ->
	      %% Line 793
	      apply 'allocated1'/4
		  (L, Y, Max, A)
	  %% Line 794
	  <[{X,Y}|L],Y0,Max,A> when 'true' ->
	      let <_cor5> =
		  %% Line 795
		  #{#<Y0>(32,1,'integer',['unsigned'|['big']]),
		    #<X>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 795
		  apply 'allocated1'/4
		      (L, Y, Max, [_cor5|A])
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'allocated1',4}}] )
	    -| ['compiler_generated'] )
	end
'find_next_allocated'/3 =
    %% Line 798
    fun (_cor2,_cor1,_cor0) ->
	%% Line 799
	case apply 'find_next_free'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 800
	  <'none'> when 'true' ->
	      %% Line 801
	      'none'
	  %% Line 802
	  <{Addr1,Pos}>
	      when call 'erlang':'=<'
		    (Addr1,
		     _cor1) ->
	      let <_cor3> =
		  %% Line 803
		  call 'erlang':'-'
		      (Pos, 1)
	      in  let <_cor4> =
		      %% Line 803
		      call 'erlang':'bsl'
			  (1, _cor3)
		  in  let <_cor5> =
			  %% Line 803
			  call 'erlang':'+'
			      (Addr1, _cor4)
		      in  %% Line 803
			  apply 'find_next_allocated'/3
			      (_cor2, _cor5, _cor0)
	  %% Line 804
	  <{Next,_X_Pos}> when 'true' ->
	      %% Line 805
	      {_cor1,Next}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'find_next_free'/3 =
    %% Line 810
    fun (_cor2,_cor1,_cor0) ->
	let <MaxBud> =
	    %% Line 811
	    call 'erlang':'tuple_size'
		(_cor2)
	in  %% Line 812
	    apply 'find_next_free'/7
		(_cor2, _cor1, 1, MaxBud, -1, -1, _cor0)
'find_next_free'/7 =
    %% Line 814
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ftab,Addr0,Pos,MaxBud,Next,PosN,Base>
	      when %% Line 815
		call 'erlang':'=<'
		    (Pos,
		     MaxBud) ->
	      ( let <_fol1474> =
		    %% Line 846
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( '-'
							   -| ['compiler_generated'] )
			  (Pos, ( 1
				  -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		in  ( let <Pow> =
			  %% Line 846
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'bsl'
								 -| ['compiler_generated'] )
				(( 1
				   -| ['compiler_generated'] ), _fol1474)
			    -| ['compiler_generated'] )
		      in  ( let <_fol1475> =
				%% Line 847
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '-'
								       -| ['compiler_generated'] )
				      (Addr0, Base)
				  -| ['compiler_generated'] )
			    in  ( let <Rem> =
				      %% Line 847
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'rem'
									     -| ['compiler_generated'] )
					    (_fol1475, ( Pow
							 -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  let <Addr> =
					  %% Line 848
					  ( case <> of
					      %% Line 849
					      ( <>
						    when ( call ( 'erlang'
							       -| ['compiler_generated'] ):( '=:='
											     -| ['compiler_generated'] )
							    (( Rem
							       -| ['compiler_generated'] ),
							     ( 0
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] ) ->
						    Addr0
						-| ['compiler_generated'] )
					      %% Line 851
					      ( <>
						    when ( call ( 'erlang'
							       -| ['compiler_generated'] ):( '<'
											     -| ['compiler_generated'] )
							    (Addr0,
							     ( Pow
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] ) ->
						    Addr0
						-| ['compiler_generated'] )
					      %% Line 853
					      ( <> when ( 'true'
							  -| ['compiler_generated'] ) ->
						    %% Line 854
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '-'
											   -| ['compiler_generated'] )
							  (Addr0, ( Rem
								    -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  let <PosTab> =
					      %% Line 817
					      call 'erlang':'element'
						  (Pos, Ftab)
					  in  let <_cor9> =
						  %% Line 818
						  call 'erlang':'-'
						      (Addr, 1)
					      in  %% Line 818
						  case apply 'bplus_lookup_next'/2
							   (PosTab, _cor9) of
						    %% Line 819
						    <'undefined'> when 'true' ->
							let <_cor10> =
							    %% Line 820
							    call 'erlang':'+'
								(Pos, 1)
							in  %% Line 820
							    apply 'find_next_free'/7
								(Ftab, Addr0, _cor10, MaxBud, Next, PosN, Base)
						    %% Line 821
						    <{'ok',Next1}>
							when let <_cor12> =
							      call 'erlang':'=:='
								  (PosN, -1)
							  in  let <_cor13> =
								  call 'erlang':'<'
								      (Next1, Next)
							      in  call 'erlang':'or'
								      (_cor12, _cor13) ->
							let <_cor14> =
							    %% Line 822
							    call 'erlang':'+'
								(Pos, 1)
							in  %% Line 822
							    apply 'find_next_free'/7
								(Ftab, Addr0, _cor14, MaxBud, Next1, Pos, Base)
						    %% Line 823
						    <{'ok',_cor24}> when 'true' ->
							let <_cor15> =
							    %% Line 824
							    call 'erlang':'+'
								(Pos, 1)
							in  %% Line 824
							    apply 'find_next_free'/7
								(Ftab, Addr0, _cor15, MaxBud, Next, PosN, Base)
						    ( <_cor16> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor16})
						      -| ['compiler_generated'] )
						  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	  %% Line 826
	  <_X_Ftab,_X_Addr,_X_Pos,_X_MaxBud,-1,_X_PosN,_X_Base> when 'true' ->
	      %% Line 827
	      'none'
	  %% Line 828
	  <_X_Ftab,_X_Addr,_X_Pos,_X_MaxBud,Next,PosN,_X_Base> when 'true' ->
	      %% Line 829
	      {Next,PosN}
	end
'collect_all_interval'/4 =
    %% Line 831
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <MaxBud> =
	    %% Line 832
	    call 'erlang':'tuple_size'
		(_cor3)
	in  %% Line 833
	    apply 'collect_all_interval'/7
		(_cor3, _cor2, _cor1, 1, MaxBud, _cor0, [])
'collect_all_interval'/7 =
    %% Line 835
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ftab,L0,U,Pos,MaxBud,Base,Acc0>
	      when call 'erlang':'=<'
		    (Pos,
		     MaxBud) ->
	      let <PosTab> =
		  %% Line 836
		  call 'erlang':'element'
		      (Pos, Ftab)
	      in  ( let <_fol1488> =
			%% Line 846
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '-'
							       -| ['compiler_generated'] )
			      (Pos, ( 1
				      -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <Pow> =
			      %% Line 846
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'bsl'
								     -| ['compiler_generated'] )
				    (( 1
				       -| ['compiler_generated'] ), _fol1488)
				-| ['compiler_generated'] )
			  in  ( let <_fol1489> =
				    %% Line 847
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( '-'
									   -| ['compiler_generated'] )
					  (L0, Base)
				      -| ['compiler_generated'] )
				in  ( let <Rem> =
					  %% Line 847
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'rem'
										 -| ['compiler_generated'] )
						(_fol1489, ( Pow
							     -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  let <L> =
					      %% Line 848
					      ( case <> of
						  %% Line 849
						  ( <>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( '=:='
												 -| ['compiler_generated'] )
								(( Rem
								   -| ['compiler_generated'] ),
								 ( 0
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] ) ->
							L0
						    -| ['compiler_generated'] )
						  %% Line 851
						  ( <>
							when ( call ( 'erlang'
								   -| ['compiler_generated'] ):( '<'
												 -| ['compiler_generated'] )
								(L0,
								 ( Pow
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] ) ->
							L0
						    -| ['compiler_generated'] )
						  %% Line 853
						  ( <> when ( 'true'
							      -| ['compiler_generated'] ) ->
							%% Line 854
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '-'
											       -| ['compiler_generated'] )
							      (L0, ( Rem
								     -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  in  let <Acc> =
						  %% Line 838
						  apply 'collect_interval'/5
						      (PosTab, Pos, L, U, Acc0)
					      in  let <_cor10> =
						      %% Line 839
						      call 'erlang':'+'
							  (Pos, 1)
						  in  %% Line 839
						      apply 'collect_all_interval'/7
							  (Ftab, L0, U, _cor10, MaxBud, Base, Acc)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	  %% Line 840
	  <_X_Ftab,_X_L,_X_U,_X_Pos,_X_MaxBud,_X_Base,Acc> when 'true' ->
	      %% Line 841
	      call 'lists':'sort'
		  (Acc)
	end
'adjust_addr'/3 =
    %% Line 845
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 846
	    call 'erlang':'-'
		(_cor1, 1)
	in  let <Pow> =
		%% Line 846
		call 'erlang':'bsl'
		    (1, _cor3)
	    in  let <_cor5> =
		    %% Line 847
		    call 'erlang':'-'
			(_cor2, _cor0)
		in  let <Rem> =
			%% Line 847
			call 'erlang':'rem'
			    (_cor5, Pow)
		    in  %% Line 848
			case <> of
			  %% Line 849
			  <>
			      when call 'erlang':'=:='
				    (Rem,
				     0) ->
			      _cor2
			  %% Line 851
			  <>
			      when call 'erlang':'<'
				    (_cor2,
				     Pow) ->
			      _cor2
			  %% Line 853
			  <> when 'true' ->
			      %% Line 854
			      call 'erlang':'-'
				  (_cor2, Rem)
			end
'get_disk_map'/0 =
    %% Line 864
    fun () ->
	%% Line 865
	case call 'erlang':'get'
		 ('disk_map') of
	  %% Line 866
	  <'undefined'> when 'true' ->
	      'no_disk_map'
	  %% Line 867
	  <T> when 'true' ->
	      let <_cor0> =
		  call 'ets':'tab2list'
		      (T)
	      in  {'disk_map',_cor0}
	end
'init_disk_map'/1 =
    %% Line 870
    fun (_cor0) ->
	do  %% Line 871
	    call 'error_logger':'info_msg'
		([42|[42|[32|[100|[101|[116|[115|[58|[32|[40|[100|[101|[98|[117|[103|[41|[32|[117|[115|[105|[110|[103|[32|[100|[105|[115|[107|[32|[109|[97|[112|[32|[102|[111|[114|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
	    let <_cor1> =
		%% Line 872
		call 'ets':'new'
		    ('any', ['ordered_set'])
	    in  %% Line 872
		call 'erlang':'put'
		    ('disk_map', _cor1)
'stop_disk_map'/0 =
    %% Line 874
    fun () ->
	catch
	    let <_cor0> =
		%% Line 875
		call 'erlang':'erase'
		    ('disk_map')
	    in  %% Line 875
		call 'ets':'delete'
		    (_cor0)
'disk_map_segment_p'/2 =
    %% Line 877
    fun (_cor1,_cor0) ->
	%% Line 878
	case call 'erlang':'get'
		 ('disk_map') of
	  %% Line 879
	  <'undefined'> when 'true' ->
	      %% Line 880
	      'ok'
	  %% Line 881
	  <_X_T> when 'true' ->
	      let <_cor3> =
		  %% Line 882
		  apply 'pread_n'/3
		      (_cor1, _cor0, 2048)
	      in  %% Line 882
		  apply 'disk_map_segment'/2
		      (_cor0, _cor3)
	end
'disk_map_segment'/2 =
    %% Line 885
    fun (_cor1,_cor0) ->
	%% Line 886
	case call 'erlang':'get'
		 ('disk_map') of
	  %% Line 887
	  <'undefined'> when 'true' ->
	      %% Line 888
	      'ok'
	  %% Line 889
	  <T> when 'true' ->
	      let <_cor2> =
		  %% Line 890
		  call 'erlang':'iolist_to_binary'
		      (_cor0)
	      in  let <Ps> =
		      %% Line 890
		      apply 'segment_fragment_to_pointers'/2
			  (_cor1, _cor2)
		  in  let <_cor9> =
			  %% Line 891
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[%% Line 892
					    {_X_P1,#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
						     #<X>(32,1,'integer',['unsigned'|['big']])}#}|_cor5]>
					      when %% Line 893
						call 'erlang':'>'
						    (X,
						     0) ->
					      let <_cor7> =
						  #{#<Sz>(32,1,'integer',['unsigned'|['big']]),
						    #<305419896>(32,1,'integer',['unsigned'|['big']])}#
					      in  let <_cor8> =
						      %% Line 892
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [{X,_cor7}|_cor8]
							-| ['compiler_generated'] )
					  ( <[_cor4|_cor5]> when 'true' ->
						%% Line 892
						apply 'lc$^0'/1
						    (_cor5)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (%% Line 892
				     Ps)
			    -| ['list_comprehension'] )
		      in  let <_cor11> =
			      %% Line 894
			      call 'erlang':'++'
				  (Ps, _cor9)
			  in  %% Line 894
			      apply 'dm'/2
				  (_cor11, T)
	end
'disk_map_pread'/1 =
    %% Line 897
    fun (_cor0) ->
	%% Line 898
	case call 'erlang':'get'
		 ('disk_map') of
	  %% Line 899
	  <'undefined'> when 'true' ->
	      %% Line 900
	      'ok'
	  %% Line 901
	  <T> when 'true' ->
	      %% Line 902
	      case call 'ets':'lookup'
		       (T, _cor0) of
		%% Line 903
		<[]> when 'true' ->
		    %% Line 904
		    call 'erlang':'throw'
			({'pread',_cor0,8})
		%% Line 905
		<[{_cor5,{'pointer',0,0}}|[]]>
		    when call 'erlang':'=:='
			  (_cor5,
			   _cor0) ->
		    %% Line 906
		    'ok'
		%% Line 907
		<[{_cor6,{'pointer',Pointer,Sz}}|[]]>
		    when call 'erlang':'=:='
			  (_cor6,
			   _cor0) ->
		    %% Line 908
		    case call 'ets':'lookup'
			     (T, Pointer) of
		      %% Line 910
		      <[{_cor7,{'slot',_X_P,_cor8}}|[]]>
			  when let <_cor9> =
				call 'erlang':'=:='
				    (_cor7, Pointer)
			    in  let <_cor10> =
				    call 'erlang':'=:='
					(_cor8, Sz)
				in  call 'erlang':'and'
					(_cor9, _cor10) ->
			  %% Line 911
			  'ok'
		      %% Line 912
		      <Got> when 'true' ->
			  %% Line 913
			  call 'erlang':'throw'
			      ({'pread',_cor0,Pointer,Got})
		    end
		%% Line 915
		<Got> when 'true' ->
		    %% Line 916
		    call 'erlang':'throw'
			({'pread',_cor0,Got})
	      end
	end
'disk_map'/1 =
    %% Line 922
    fun (_cor0) ->
	%% Line 923
	case call 'erlang':'get'
		 ('disk_map') of
	  %% Line 924
	  <'undefined'> when 'true' ->
	      %% Line 925
	      'ok'
	  %% Line 926
	  <T> when 'true' ->
	      let <_cor6> =
		  %% Line 927
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[{P,Io}|_cor2]> when 'true' ->
				      let <_cor4> =
					  call 'erlang':'iolist_to_binary'
					      (Io)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [{P,_cor4}|_cor5]
						-| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      in  %% Line 928
		  apply 'dm'/2
		      (_cor6, T)
	end
'dm'/2 =
    %% Line 931
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{P,_X_Header}|Bs],T>
	      when call 'erlang':'<'
		    (P,
		     1336) ->
	      %% Line 932
	      apply 'dm'/2
		  (Bs, T)
	  %% Line 933
	  <[{P0,#{#<61591023>(32,1,'integer',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
	      let <P> =
		  %% Line 934
		  call 'erlang':'-'
		      (P0, 4)
	      in  do  %% Line 935
		      case call 'ets':'lookup'
			       (T, P) of
			%% Line 936
			<[]> when 'true' ->
			    %% Line 937
			    call 'erlang':'throw'
				({'free',P0})
			%% Line 938
			<[{_cor34,_X_OldSz}|[]]>
			    when call 'erlang':'=:='
				  (_cor34,
				   P) ->
			    %% Line 939
			    case call 'ets':'delete'
				     (T, P) of
			      <'true'> when 'true' ->
				  'ok'
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor3})
				-| ['compiler_generated'] )
			    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
		      %% Line 941
		      apply 'dm'/2
			  (Bs, T)
	  %% Line 942
	  <[{SlotP,#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
		     #<305419896>(32,1,'integer',['unsigned'|['big']]),
		     #<_cor36>('all',8,'binary',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
	      let <_cor10> =
		  %% Line 943
		  case call 'ets':'lookup'
			   (T, {'pointer',SlotP}) of
		    %% Line 944
		    <[{{'pointer',_cor37},Pointer}|[]]>
			when call 'erlang':'=:='
			      (_cor37,
			       SlotP) ->
			%% Line 945
			case call 'ets':'lookup'
				 (T, Pointer) of
			  %% Line 946
			  <[{_cor38,{'pointer',_cor39,Sz2}}|[]]>
			      when let <_cor40> =
				    call 'erlang':'=:='
					(_cor38, Pointer)
				in  let <_cor41> =
					call 'erlang':'=:='
					    (_cor39, SlotP)
				    in  call 'erlang':'and'
					    (_cor40, _cor41) ->
			      let <_cor6> =
				  %% Line 947
				  apply 'log2'/1
				      (Sz)
			      in  let <_cor5> =
				      %% Line 947
				      apply 'log2'/1
					  (Sz2)
				  in  %% Line 947
				      case <> of
					%% Line 948
					<>
					    when call 'erlang':'=:='
						  (_cor6,
						   _cor5) ->
					    %% Line 949
					    Pointer
					%% Line 950
					<> when 'true' ->
					    %% Line 951
					    call 'erlang':'throw'
						({'active',SlotP,Sz,Pointer,Sz2})
				      end
			  %% Line 953
			  <Got> when 'true' ->
			      %% Line 954
			      call 'erlang':'throw'
				  ({'active',SlotP,Sz,Got})
			end
		    %% Line 956
		    <[]> when 'true' ->
			%% Line 957
			call 'erlang':'throw'
			    ({'active',SlotP,Sz})
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 959
		  case call 'ets':'insert'
			   (T, {SlotP,{'slot',_cor10,Sz}}) of
		    <'true'> when 'true' ->
			%% Line 960
			apply 'dm'/2
			    (Bs, T)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 961
	  <[{P,#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
		 #<X>(32,1,'integer',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
	      do  %% Line 963
		  case apply 'prev'/2
			   (P, T) of
		    %% Line 964
		    <{Prev,PrevSz}> when 'true' ->
			%% Line 965
			call 'erlang':'throw'
			    ({'prev',P,Sz,X,Prev,PrevSz})
		    %% Line 966
		    <'ok'> when 'true' ->
			'ok'
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
		  do  %% Line 969
		      case apply 'next'/3
			       (P, 8, T) of
			%% Line 970
			<{'next',Next}> when 'true' ->
			    %% Line 972
			    call 'erlang':'throw'
				({'next',P,Sz,X,Next})
			%% Line 973
			<'ok'> when 'true' ->
			    'ok'
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
		      %% Line 976
		      case call 'ets':'insert'
			       (T, {P,{'pointer',X,Sz}}) of
			<'true'> when 'true' ->
			    do  %% Line 977
				case <> of
				  %% Line 978
				  <>
				      when call 'erlang':'=:='
					    (Sz,
					     0) ->
				      %% Line 979
				      case <> of
					<>
					    when call 'erlang':'=:='
						  (0,
						   X) ->
					    'ok'
					( <> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',0})
					  -| ['compiler_generated'] )
				      end
				  %% Line 981
				  <> when 'true' ->
				      %% Line 982
				      case call 'ets':'insert'
					       (T, {{'pointer',X},P}) of
					<'true'> when 'true' ->
					    'ok'
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor17})
					  -| ['compiler_generated'] )
				      end
				end
				%% Line 984
				apply 'dm'/2
				    (Bs, T)
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor15})
			  -| ['compiler_generated'] )
		      end
	  %% Line 985
	  <[{P,#{#<X>(32,1,'integer',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
	      do  %% Line 986
		  case call 'ets':'lookup'
			   (T, X) of
		    %% Line 987
		    <[]> when 'true' ->
			call 'erlang':'throw'
			    ({'segment',P,X})
		    %% Line 988
		    <[{_cor44,{'pointer',0,0}}|[]]>
			when call 'erlang':'=:='
			      (_cor44,
			       X) ->
			'ok'
		    %% Line 989
		    <[{_cor45,{'pointer',_cor46,_cor47}}|[]]>
			when let <_cor50> =
			      call 'erlang':'=:='
				  (_cor45, X)
			  in  let <_cor48> =
				  call 'erlang':'=:='
				      (_cor46, P)
			      in  let <_cor49> =
				      call 'erlang':'=:='
					  (_cor47, X)
				  in  let <_cor51> =
					  call 'erlang':'and'
					      (_cor48, _cor49)
				      in  call 'erlang':'and'
					      (_cor50, _cor51) ->
			'ok'
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
		  %% Line 991
		  apply 'dm'/2
		      (Bs, T)
	  %% Line 992
	  <[{P,B = #{#<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
		     #<B0>('all',8,'binary',['unsigned'|['big']])}#}|Bs],T> when 'true' ->
	      let <_cor19> =
		  catch
		      %% Line 994
		      call 'erlang':'binary_to_term'
			  (B0)
	      in  let <_cor24> =
		      %% Line 994
		      case _cor19 of
			%% Line 995
			<{'EXIT',_cor52}> when 'true' ->
			    %% Line 996
			    case ( B0
				   -| ['reuse_for_context'] ) of
			      <#{#<_X_Sz1>(32,1,'integer',['unsigned'|['big']]),
				 #<B1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  let <_cor21> =
				      catch
					  %% Line 997
					  call 'erlang':'binary_to_term'
					      (B1)
				  in  %% Line 997
				      case _cor21 of
					%% Line 998
					<{'EXIT',_cor53}> when 'true' ->
					    %% Line 999
					    'false'
					%% Line 1000
					<_cor54> when 'true' ->
					    %% Line 1001
					    'true'
				      end
			      ( <_cor20> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_cor20)
					primop 'match_fail'
					    ({'badmatch',_cor20})
				-| ['compiler_generated'] )
			    end
			%% Line 1003
			<_cor55> when 'true' ->
			    %% Line 1004
			    'true'
		      end
		  in  %% Line 1006
		      case <> of
			%% Line 1007
			<>
			    when call 'erlang':'=:='
				  (_cor24,
				   'true') ->
			    let <_cor29> =
				%% Line 1009
				call 'erlang':'-'
				    (P, 8)
			    in  let <_cor26> =
				    %% Line 1009
				    call 'erlang':'byte_size'
					(B)
				in  let <_cor27> =
					%% Line 1009
					call 'erlang':'+'
					    (_cor26, 8)
				    in  let <_cor28> =
					    %% Line 1009
					    #{#<_cor27>(32,1,'integer',['unsigned'|['big']]),
					      #<305419896>(32,1,'integer',['unsigned'|['big']]),
					      #<B>('all',8,'binary',['unsigned'|['big']])}#
					in  %% Line 1009
					    apply 'dm'/2
						([{_cor29,_cor28}|Bs], T)
			%% Line 1010
			<> when 'true' ->
			    let <_cor30> =
				%% Line 1011
				apply 'segment_fragment_to_pointers'/2
				    (P, B)
			    in  let <_cor31> =
				    %% Line 1011
				    call 'erlang':'++'
					(_cor30, Bs)
				in  %% Line 1011
				    apply 'dm'/2
					(_cor31, T)
		      end
	  %% Line 1013
	  <[],_X_T> when 'true' ->
	      %% Line 1014
	      'ok'
	  ( <_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32})
		  -| [{'function_name',{'dm',2}}] )
	    -| ['compiler_generated'] )
	end
'segment_fragment_to_pointers'/2 =
    %% Line 1016
    fun (_cor1,_cor0) ->
	case <_cor1,( _cor0
		      -| ['reuse_for_context'] )> of
	  <_X_P,#{}#> when 'true' ->
	      %% Line 1017
	      []
	  %% Line 1018
	  <P,#{#<SzP>(8,8,'binary',['unsigned'|['big']]),
	       #<B>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor2> =
		  %% Line 1019
		  call 'erlang':'+'
		      (P, 8)
	      in  let <_cor3> =
		      %% Line 1019
		      apply 'segment_fragment_to_pointers'/2
			  (_cor2, B)
		  in  %% Line 1019
		      [{P,SzP}|_cor3]
	  ( <_cor5,_cor4> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor4)
		    ( primop 'match_fail'
			  ({'function_clause',_cor5,_cor4})
		      -| [{'function_name',{'segment_fragment_to_pointers',2}}] )
	    -| ['compiler_generated'] )
	end
'prev'/2 =
    %% Line 1021
    fun (_cor1,_cor0) ->
	%% Line 1022
	case call 'ets':'prev'
		 (_cor0, _cor1) of
	  %% Line 1023
	  <'$end_of_table'> when 'true' ->
	      'ok'
	  %% Line 1024
	  <Prev> when 'true' ->
	      %% Line 1025
	      case call 'ets':'lookup'
		       (_cor0, Prev) of
		%% Line 1026
		<[{_cor8,{'pointer',_X_Ptr,_cor9}}|[]]>
		    when let <_cor10> =
			  call 'erlang':'=:='
			      (_cor8, Prev)
		      in  let <_cor11> =
			      try
				  let <_cor2> =
				      call 'erlang':'+'
					  (Prev, 8)
				  in  call 'erlang':'>'
					  (_cor2, _cor1)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			  in  call 'erlang':'and'
				  (_cor10, _cor11) ->
		    %% Line 1027
		    {Prev,8}
		%% Line 1028
		<[{_cor12,{'slot',_cor13,Sz}}|[]]>
		    when let <_cor14> =
			  call 'erlang':'=:='
			      (_cor12, Prev)
		      in  let <_cor15> =
			      try
				  let <_cor3> =
				      call 'erlang':'+'
					  (Prev, Sz)
				  in  call 'erlang':'>'
					  (_cor3, _cor1)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			  in  call 'erlang':'and'
				  (_cor14, _cor15) ->
		    %% Line 1029
		    {Prev,Sz}
		%% Line 1030
		<_cor16> when 'true' ->
		    %% Line 1031
		    'ok'
	      end
	end
'next'/3 =
    %% Line 1035
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1036
	case call 'ets':'next'
		 (_cor0, _cor2) of
	  %% Line 1037
	  <'$end_of_table'> when 'true' ->
	      'ok'
	  %% Line 1038
	  <Next>
	      when try
		    let <_cor3> =
			call 'erlang':'+'
			    (_cor2, _cor1)
		    in  call 'erlang':'>'
			    (_cor3, Next)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1039
	      {'next',Next}
	  %% Line 1040
	  <_cor8> when 'true' ->
	      %% Line 1041
	      'ok'
	end
'collect_tree'/3 =
    %% Line 1066
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'v',_X_TI,Acc> when 'true' ->
	      Acc
	  %% Line 1067
	  <T,TI,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1068
		  call 'erlang':'-'
		      (TI, 1)
	      in  let <Pow> =
		      %% Line 1068
		      call 'erlang':'bsl'
			  (1, _cor3)
		  in  %% Line 1069
		      apply 'collect_tree2'/3
			  (T, Pow, Acc)
	end
'collect_tree2'/3 =
    %% Line 1071
    fun (_cor2,_cor1,_cor0) ->
	let <S> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor2)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1510> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor2)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1510, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1511> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor2)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_fol1511, ( 2
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1073
	    case call 'erlang':'element'
		     (1, _cor2) of
	      %% Line 1074
	      <'l'> when 'true' ->
		  %% Line 1075
		  apply 'collect_leaf'/4
		      (_cor2, S, _cor1, _cor0)
	      %% Line 1076
	      <'n'> when 'true' ->
		  %% Line 1077
		  apply 'collect_node'/4
		      (_cor2, S, _cor1, _cor0)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'collect_leaf'/4 =
    %% Line 1080
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Leaf,0,_X_Pow,Acc> when 'true' ->
	      %% Line 1081
	      Acc
	  %% Line 1082
	  <Leaf,I,Pow,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1083
		  call 'erlang':'+'
		      (I, 1)
	      in  let <Key> =
		      %% Line 1083
		      call 'erlang':'element'
			  (_cor4, Leaf)
		  in  let <_cor6> =
			  %% Line 1084
			  call 'erlang':'+'
			      (Key, Pow)
		      in  let <V> = {%% Line 1084
			       Key,_cor6}
			  in  let <_cor8> =
				  %% Line 1085
				  call 'erlang':'-'
				      (I, 1)
			      in  %% Line 1085
				  apply 'collect_leaf'/4
				      (Leaf, _cor8, Pow, [V|Acc])
	end
'collect_node'/4 =
    %% Line 1087
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Node,0,_X_Pow,Acc> when 'true' ->
	      %% Line 1088
	      Acc
	  %% Line 1089
	  <Node,I,Pow,Acc> when 'true' ->
	      ( let <_fol1518> =
		    %% Line 1794
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( '*'
							   -| ['compiler_generated'] )
			  (I, ( 2
				-| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		in  let <_cor4> =
			%% Line 1794
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'element'
							       -| ['compiler_generated'] )
			      (_fol1518, Node)
			  -| ['compiler_generated'] )
		    in  let <Acc1> =
			    %% Line 1090
			    apply 'collect_tree2'/3
				(_cor4, Pow, Acc)
			in  let <_cor6> =
				%% Line 1091
				call 'erlang':'-'
				    (I, 1)
			    in  %% Line 1091
				apply 'collect_node'/4
				    (Node, _cor6, Pow, Acc1)
		-| ['compiler_generated'] )
	end
'tree_to_bin'/5 =
    %% Line 1094
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'v',_X_F,_X_Max,Ws,WsSz> when 'true' ->
	      {Ws,WsSz}
	  %% Line 1095
	  <T,F,Max,Ws,WsSz> when 'true' ->
	      %% Line 1096
	      case apply 'tree_to_bin2'/7
		       (T, F, Max, 0, [], Ws, WsSz) of
		<{N,L1,Ws1,WsSz1}> when 'true' ->
		    let <_cor6> =
			%% Line 1097
			call 'lists':'reverse'
			    (L1)
		    in  %% Line 1097
			case apply F
				 (N, _cor6, Ws1, WsSz1) of
			  <{N1,L2,Ws2,WsSz2}> when 'true' ->
			      %% Line 1098
			      case apply F
				       (N1, L2, Ws2, WsSz2) of
				<{0,[],NWs,NWsSz}> when 'true' ->
				    %% Line 1099
				    {NWs,NWsSz}
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'tree_to_bin2'/7 =
    %% Line 1101
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Tree,F,Max,N,Acc,Ws,WsSz>
	      when call 'erlang':'>='
		    (N,
		     Max) ->
	      let <_cor7> =
		  %% Line 1102
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1102
		  case apply F
			   (N, _cor7, Ws, WsSz) of
		    <{NN,NAcc,NWs,NWsSz}> when 'true' ->
			let <_cor9> =
			    %% Line 1103
			    call 'lists':'reverse'
				(NAcc)
			in  %% Line 1103
			    apply 'tree_to_bin2'/7
				(Tree, F, Max, NN, _cor9, NWs, NWsSz)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1104
	  <Tree,F,Max,N,Acc,Ws,WsSz> when 'true' ->
	      let <S> =
		  %% Line 1784
		  ( case ( call ( 'erlang'
				  -| ['compiler_generated'] ):( 'element'
								-| ['compiler_generated'] )
			       (( 1
				  -| ['compiler_generated'] ), Tree)
			   -| ['compiler_generated'] ) of
		      %% Line 1785
		      ( <( 'l'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_fol1523> =
				  %% Line 1786
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				    -| ['compiler_generated'] )
			      in  %% Line 1786
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '-'
									 -| ['compiler_generated'] )
					(_fol1523, ( 1
						     -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1787
		      ( <( 'n'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_fol1524> =
				  %% Line 1788
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				    -| ['compiler_generated'] )
			      in  %% Line 1788
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'div'
									 -| ['compiler_generated'] )
					(_fol1524, ( 2
						     -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_fol1525> when ( 'true'
					  -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'case_clause'
					-| ['compiler_generated'] ),_fol1525}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 1106
		  case call 'erlang':'element'
			   (1, Tree) of
		    %% Line 1107
		    <'l'> when 'true' ->
			let <_cor13> =
			    %% Line 1108
			    call 'erlang':'+'
				(N, S)
			in  let <_cor11> =
				%% Line 1108
				apply 'bplus_leaf_to_list'/1
				    (Tree)
			    in  let <_cor12> =
				    %% Line 1108
				    apply 'leaf_to_bin'/2
					(_cor11, Acc)
				in  %% Line 1108
				    {_cor13,_cor12,Ws,WsSz}
		    %% Line 1109
		    <'n'> when 'true' ->
			%% Line 1110
			apply 'node_to_bin'/9
			    (Tree, F, Max, N, Acc, 1, S, Ws, WsSz)
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	end
'node_to_bin'/9 =
    %% Line 1113
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Node,_X_F,_X_Max,N,Acc,I,S,Ws,WsSz>
	      when call 'erlang':'>'
		    (I,
		     S) ->
	      %% Line 1114
	      {N,Acc,Ws,WsSz}
	  %% Line 1115
	  <Node,F,Max,N,Acc,I,S,Ws,WsSz> when 'true' ->
	      ( let <_fol1529> =
		    %% Line 1794
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( '*'
							   -| ['compiler_generated'] )
			  (I, ( 2
				-| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		in  let <_cor9> =
			%% Line 1794
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'element'
							       -| ['compiler_generated'] )
			      (_fol1529, Node)
			  -| ['compiler_generated'] )
		    in  %% Line 1116
			case %% Line 1117
			     apply 'tree_to_bin2'/7
				 (_cor9, F, Max, N, Acc, Ws, WsSz) of
			  <{N1,Acc1,Ws1,WsSz1}> when 'true' ->
			      let <_cor11> =
				  %% Line 1118
				  call 'erlang':'+'
				      (I, 1)
			      in  %% Line 1118
				  apply 'node_to_bin'/9
				      (Node, F, Max, N1, Acc1, _cor11, S, Ws1, WsSz1)
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		-| ['compiler_generated'] )
	end
'leaf_to_bin'/2 =
    %% Line 1120
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[N|L],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1121
		  #{#<N>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 1121
		  apply 'leaf_to_bin'/2
		      (L, [_cor2|Acc])
	  %% Line 1122
	  <[],Acc> when 'true' ->
	      %% Line 1123
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'leaf_to_bin',2}}] )
	    -| ['compiler_generated'] )
	end
'list_to_tree'/1 =
    %% Line 1126
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1127
	    call 'erlang':'length'
		(_cor0)
	in  %% Line 1127
	    apply 'leafs_to_nodes'/4
		(_cor0, _cor1, ( 'bplus_mk_leaf'/1
				 -| [{'id',{0,0,'-list_to_tree/1-fun-0-'}}] ), [])
'leafs_to_nodes'/4 =
    %% Line 1129
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],0,_X_F,[T|[]]> when 'true' ->
	      %% Line 1130
	      T
	  %% Line 1131
	  <[],0,_X_F,L> when 'true' ->
	      let <_cor5> =
		  %% Line 1132
		  call 'lists':'reverse'
		      (L)
	      in  let <_cor4> =
		      %% Line 1132
		      call 'erlang':'length'
			  (L)
		  in  %% Line 1132
		      apply 'leafs_to_nodes'/4
			  (_cor5, _cor4, ( 'mk_node'/1
					   -| [{'id',{0,0,'-leafs_to_nodes/4-fun-0-'}}] ), [])
	  %% Line 1133
	  <Ls,Sz,F,L> when 'true' ->
	      let <_cor6> =
		  %% Line 1134
		  case <> of
		    %% Line 1135
		    <>
			when call 'erlang':'=<'
			      (Sz,
			       16) ->
			Sz
		    %% Line 1136
		    <>
			when call 'erlang':'=<'
			      (Sz,
			       32) ->
			call 'erlang':'div'
			    (Sz, 2)
		    %% Line 1137
		    <> when 'true' ->
			12
		  end
	      in  %% Line 1139
		  case apply 'split_list'/3
			   (Ls, _cor6, []) of
		    <{L1,R}> when 'true' ->
			let <N> =
			    %% Line 1140
			    apply F
				(L1)
			in  let <Sz1> =
				%% Line 1141
				call 'erlang':'-'
				    (Sz, _cor6)
			    in  %% Line 1142
				apply 'leafs_to_nodes'/4
				    (R, Sz1, F, [N|L])
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	end
'mk_node'/1 =
    %% Line 1144
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor6> =
		  %% Line 1145
		  ( fun (_cor3,_cor2) ->
			let <_cor1> =
			    apply 'get_first_key'/1
				(_cor3)
			in  [_cor1|[_cor3|_cor2]]
		    -| [{'id',{0,0,'-mk_node/1-fun-0-'}}] )
	      in  let <_cor7> =
		      %% Line 1145
		      call 'lists':'foldr'
			  (_cor6, [], Es)
		  in  let <NL> =
			  %% Line 1145
			  [E|_cor7]
		      in  %% Line 1146
			  apply 'bplus_mk_node'/1
			      (NL)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'mk_node',1}}] )
	    -| ['compiler_generated'] )
	end
'split_list'/3 =
    %% Line 1148
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L,0,SL> when 'true' ->
	      %% Line 1149
	      {SL,L}
	  %% Line 1150
	  <[E|Es],I,SL> when 'true' ->
	      let <_cor3> =
		  %% Line 1151
		  call 'erlang':'-'
		      (I, 1)
	      in  %% Line 1151
		  apply 'split_list'/3
		      (Es, _cor3, [E|SL])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'split_list',3}}] )
	    -| ['compiler_generated'] )
	end
'get_first_key'/1 =
    %% Line 1153
    fun (_cor0) ->
	%% Line 1154
	case call 'erlang':'element'
		 (1, _cor0) of
	  %% Line 1155
	  <'l'> when 'true' ->
	      %% Line 1156
	      call 'erlang':'element'
		  (2, _cor0)
	  %% Line 1157
	  <'n'> when 'true' ->
	      let <_cor2> =
		  %% Line 1794
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'element'
							 -| ['compiler_generated'] )
			(2, _cor0)
		    -| ['compiler_generated'] )
	      in  %% Line 1158
		  apply 'get_first_key'/1
		      (_cor2)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'collect_interval'/5 =
    %% Line 1162
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'v',_X_TI,_X_L,_X_U,Acc> when 'true' ->
	      Acc
	  %% Line 1163
	  <T,TI,L,U,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 1164
		  call 'erlang':'-'
		      (TI, 1)
	      in  let <Pow> =
		      %% Line 1164
		      call 'erlang':'bsl'
			  (1, _cor5)
		  in  %% Line 1165
		      apply 'collect_interval2'/5
			  (T, Pow, L, U, Acc)
	end
'collect_interval2'/5 =
    %% Line 1167
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <S> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor4)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1541> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor4)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1541, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1542> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor4)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_fol1542, ( 2
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_fol1543> when ( 'true'
				    -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),_fol1543}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1169
	    case call 'erlang':'element'
		     (1, _cor4) of
	      %% Line 1170
	      <'l'> when 'true' ->
		  %% Line 1171
		  apply 'collect_leaf_interval'/6
		      (_cor4, S, _cor3, _cor2, _cor1, _cor0)
	      %% Line 1172
	      <'n'> when 'true' ->
		  %% Line 1173
		  case apply 'bplus_select_sub_tree'/2
			   (_cor4, _cor1) of
		    <{Max,_cor14}> when 'true' ->
			%% Line 1174
			case apply 'bplus_select_sub_tree_2'/3
				 (_cor4, _cor2, Max) of
			  <{Min,_cor15}> when 'true' ->
			      %% Line 1175
			      apply 'collect_node_interval'/7
				  (_cor4, Min, Max, _cor3, _cor2, _cor1, _cor0)
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'collect_leaf_interval'/6 =
    %% Line 1178
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Leaf,0,_X_Pow,_X_L,_X_U,Acc> when 'true' ->
	      %% Line 1179
	      Acc
	  %% Line 1180
	  <Leaf,I,Pow,L,U,Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 1181
		  call 'erlang':'+'
		      (I, 1)
	      in  let <Key> =
		      %% Line 1181
		      call 'erlang':'element'
			  (_cor6, Leaf)
		  in  %% Line 1182
		      case <> of
			%% Line 1183
			<>
			    when call 'erlang':'<'
				  (Key,
				   L) ->
			    %% Line 1184
			    Acc
			%% Line 1185
			<>
			    when call 'erlang':'>'
				  (Key,
				   U) ->
			    let <_cor8> =
				%% Line 1186
				call 'erlang':'-'
				    (I, 1)
			    in  %% Line 1186
				apply 'collect_leaf_interval'/6
				    (Leaf, _cor8, Pow, L, U, Acc)
			%% Line 1187
			<> when 'true' ->
			    let <_cor10> =
				%% Line 1188
				call 'erlang':'-'
				    (I, 1)
			    in  let <_cor9> =
				    %% Line 1188
				    call 'erlang':'+'
					(Key, Pow)
				in  %% Line 1188
				    apply 'collect_leaf_interval'/6
					(Leaf, _cor10, Pow, L, U, [{Key,_cor9}|Acc])
		      end
	end
'collect_node_interval'/7 =
    %% Line 1191
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Node,I,UP,_X_Pow,_X_L,_X_U,Acc>
	      when call 'erlang':'>'
		    (I,
		     UP) ->
	      %% Line 1192
	      Acc
	  %% Line 1193
	  <Node,I,UP,Pow,L,U,Acc> when 'true' ->
	      ( let <_fol1552> =
		    %% Line 1794
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( '*'
							   -| ['compiler_generated'] )
			  (I, ( 2
				-| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		in  let <_cor7> =
			%% Line 1794
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'element'
							       -| ['compiler_generated'] )
			      (_fol1552, Node)
			  -| ['compiler_generated'] )
		    in  let <Acc1> =
			    %% Line 1194
			    apply 'collect_interval2'/5
				(_cor7, Pow, L, U, Acc)
			in  let <_cor9> =
				%% Line 1195
				call 'erlang':'+'
				    (I, 1)
			    in  %% Line 1195
				apply 'collect_node_interval'/7
				    (Node, _cor9, UP, Pow, L, U, Acc1)
		-| ['compiler_generated'] )
	end
'bplus_empty_tree'/0 =
    %% Line 1202
    fun () ->
	'v'
'bplus_lookup'/2 =
    %% Line 1209
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'v',_X_Key> when 'true' ->
	      'undefined'
	  %% Line 1210
	  <Tree,Key> when 'true' ->
	      %% Line 1211
	      case call 'erlang':'element'
		       (1, Tree) of
		%% Line 1212
		<'l'> when 'true' ->
		    %% Line 1213
		    apply 'bplus_lookup_leaf'/2
			(Key, Tree)
		%% Line 1214
		<'n'> when 'true' ->
		    %% Line 1215
		    case apply 'bplus_select_sub_tree'/2
			     (Tree, Key) of
		      <{_cor6,SubTree}> when 'true' ->
			  %% Line 1216
			  apply 'bplus_lookup'/2
			      (SubTree, Key)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'bplus_lookup_leaf'/2 =
    %% Line 1223
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor0)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1556> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor0)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1556, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor2> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor0)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (( _cor2
				     -| ['compiler_generated'] ), ( 2
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1224
	    apply 'bplus_lookup_leaf_2'/3
		(_cor1, _cor0, _cor2)
'bplus_lookup_leaf_2'/3 =
    %% Line 1226
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor9,_cor10,0> when 'true' ->
	      'undefined'
	  %% Line 1227
	  <Key,Leaf,N> when 'true' ->
	      let <_cor3> =
		  %% Line 1228
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1228
		  case call 'erlang':'element'
			   (_cor3, Leaf) of
		    %% Line 1229
		    <_cor11>
			when call 'erlang':'=:='
			      (_cor11,
			       Key) ->
			{'ok',Key}
		    %% Line 1230
		    <_cor12> when 'true' ->
			let <_cor4> =
			    %% Line 1231
			    call 'erlang':'-'
				(N, 1)
			in  %% Line 1231
			    apply 'bplus_lookup_leaf_2'/3
				(Key, Leaf, _cor4)
		  end
	end
'bplus_lookup_first'/1 =
    %% Line 1239
    fun (_cor0) ->
	case _cor0 of
	  <'v'> when 'true' ->
	      'undefined'
	  %% Line 1240
	  <Tree> when 'true' ->
	      %% Line 1241
	      case call 'erlang':'element'
		       (1, Tree) of
		%% Line 1242
		<'l'> when 'true' ->
		    let <_cor2> =
			%% Line 1244
			call 'erlang':'element'
			    (2, Tree)
		    in  %% Line 1244
			{'ok',_cor2}
		%% Line 1245
		<'n'> when 'true' ->
		    let <_cor3> =
			%% Line 1794
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'element'
							       -| ['compiler_generated'] )
			      (2, Tree)
			  -| ['compiler_generated'] )
		    in  %% Line 1247
			apply 'bplus_lookup_first'/1
			    (_cor3)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'bplus_lookup_next'/2 =
    %% Line 1256
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'v',_cor10> when 'true' ->
	      'undefined'
	  %% Line 1257
	  <Tree,Key> when 'true' ->
	      %% Line 1258
	      case call 'erlang':'element'
		       (1, Tree) of
		%% Line 1259
		<'l'> when 'true' ->
		    %% Line 1260
		    apply 'lookup_next_leaf'/2
			(Key, Tree)
		%% Line 1261
		<'n'> when 'true' ->
		    %% Line 1262
		    case apply 'bplus_select_sub_tree'/2
			     (Tree, Key) of
		      <{Pos,SubTree}> when 'true' ->
			  %% Line 1263
			  case apply 'bplus_lookup_next'/2
				   (SubTree, Key) of
			    %% Line 1264
			    <'undefined'> when 'true' ->
				let <S> =
				    %% Line 1784
				    ( case ( call ( 'erlang'
						    -| ['compiler_generated'] ):( 'element'
										  -| ['compiler_generated'] )
						 (( 1
						    -| ['compiler_generated'] ), Tree)
					     -| ['compiler_generated'] ) of
					%% Line 1785
					( <( 'l'
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( let <_fol1566> =
						    %% Line 1786
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'tuple_size'
											   -| ['compiler_generated'] )
							  (Tree)
						      -| ['compiler_generated'] )
						in  %% Line 1786
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '-'
											   -| ['compiler_generated'] )
							  (_fol1566, ( 1
								       -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 1787
					( <( 'n'
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( let <_cor2> =
						    %% Line 1788
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'tuple_size'
											   -| ['compiler_generated'] )
							  (Tree)
						      -| ['compiler_generated'] )
						in  %% Line 1788
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'div'
											   -| ['compiler_generated'] )
							  (( _cor2
							     -| ['compiler_generated'] ), ( 2
											    -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <( _cor3
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( primop ( 'match_fail'
							 -| ['compiler_generated'] )
						    (( {( 'case_clause'
							  -| ['compiler_generated'] ),( _cor3
											-| ['compiler_generated'] )}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  %% Line 1266
				    case <> of
				      %% Line 1268
				      <>
					  when call 'erlang':'>'
						(S,
						 Pos) ->
					  let <_cor4> =
					      %% Line 1269
					      call 'erlang':'+'
						  (Pos, 1)
					  in  ( let <_cor2> =
						    %% Line 1794
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '*'
											   -| ['compiler_generated'] )
							  (_cor4, ( 2
								    -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  let <_cor5> =
							%% Line 1794
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'element'
											       -| ['compiler_generated'] )
							      (( _cor2
								 -| ['compiler_generated'] ), Tree)
							  -| ['compiler_generated'] )
						    in  %% Line 1269
							apply 'bplus_lookup_first'/1
							    (_cor5)
						-| ['compiler_generated'] )
				      %% Line 1271
				      <> when 'true' ->
					  %% Line 1272
					  'undefined'
				    end
			    %% Line 1275
			    <Result> when 'true' ->
				%% Line 1276
				Result
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'lookup_next_leaf'/2 =
    %% Line 1285
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor0)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1575> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor0)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1575, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor2> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor0)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (( _cor2
				     -| ['compiler_generated'] ), ( 2
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1286
	    apply 'lookup_next_leaf_2'/4
		(_cor1, _cor0, _cor2, 1)
'lookup_next_leaf_2'/4 =
    %% Line 1288
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,Leaf,Size,_cor20>
	      when call 'erlang':'=:='
		    (_cor20,
		     Size) ->
	      let <_cor4> =
		  %% Line 1290
		  call 'erlang':'+'
		      (Size, 1)
	      in  let <K> =
		      %% Line 1290
		      call 'erlang':'element'
			  (_cor4, Leaf)
		  in  %% Line 1291
		      case <> of
			%% Line 1292
			<>
			    when call 'erlang':'>'
				  (K,
				   Key) ->
			    let <_cor6> =
				%% Line 1293
				call 'erlang':'+'
				    (Size, 1)
			    in  let <_cor7> =
				    %% Line 1293
				    call 'erlang':'element'
					(_cor6, Leaf)
				in  %% Line 1293
				    {'ok',_cor7}
			%% Line 1294
			<> when 'true' ->
			    %% Line 1295
			    'undefined'
		      end
	  %% Line 1297
	  <Key,Leaf,Size,N> when 'true' ->
	      let <_cor8> =
		  %% Line 1298
		  call 'erlang':'+'
		      (N, 1)
	      in  let <K> =
		      %% Line 1298
		      call 'erlang':'element'
			  (_cor8, Leaf)
		  in  %% Line 1299
		      case <> of
			%% Line 1300
			<>
			    when call 'erlang':'<'
				  (K,
				   Key) ->
			    let <_cor10> =
				%% Line 1302
				call 'erlang':'+'
				    (N, 1)
			    in  %% Line 1302
				apply 'lookup_next_leaf_2'/4
				    (Key, Leaf, Size, _cor10)
			%% Line 1303
			<>
			    when call 'erlang':'=='
				  (Key,
				   K) ->
			    let <_cor11> =
				%% Line 1305
				call 'erlang':'+'
				    (N, 1)
			    in  let <_cor12> =
				    %% Line 1305
				    call 'erlang':'+'
					(_cor11, 1)
				in  let <_cor13> =
					%% Line 1305
					call 'erlang':'element'
					    (_cor12, Leaf)
				    in  %% Line 1305
					{'ok',_cor13}
			%% Line 1306
			<> when 'true' ->
			    let <_cor14> =
				%% Line 1309
				call 'erlang':'+'
				    (N, 1)
			    in  let <_cor15> =
				    %% Line 1309
				    call 'erlang':'element'
					(_cor14, Leaf)
				in  %% Line 1309
				    {'ok',_cor15}
		      end
	end
'bplus_insert'/2 =
    %% Line 1317
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'v',Key> when 'true' ->
	      let <_cor0> =
		  [Key|[]]
	      in  %% Line 1740
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'list_to_tuple'
							 -| ['compiler_generated'] )
			(( [( 'l'
			      -| ['compiler_generated'] )|( _cor0
							    -| ['compiler_generated'] )]
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	  %% Line 1318
	  <Tree,Key> when 'true' ->
	      let <NewTree> =
		  %% Line 1319
		  apply 'bplus_insert_in'/2
		      (Tree, Key)
	      in  let <_cor3> =
		      %% Line 1784
		      ( case ( call ( 'erlang'
				      -| ['compiler_generated'] ):( 'element'
								    -| ['compiler_generated'] )
				   (( 1
				      -| ['compiler_generated'] ), NewTree)
			       -| ['compiler_generated'] ) of
			  %% Line 1785
			  ( <( 'l'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_fol1582> =
				      %% Line 1786
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'tuple_size'
									     -| ['compiler_generated'] )
					    (NewTree)
					-| ['compiler_generated'] )
				  in  %% Line 1786
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '-'
									     -| ['compiler_generated'] )
					    (_fol1582, ( 1
							 -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1787
			  ( <( 'n'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_cor2> =
				      %% Line 1788
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'tuple_size'
									     -| ['compiler_generated'] )
					    (NewTree)
					-| ['compiler_generated'] )
				  in  %% Line 1788
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'div'
									     -| ['compiler_generated'] )
					    (( _cor2
					       -| ['compiler_generated'] ), ( 2
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _cor3
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'case_clause'
					    -| ['compiler_generated'] ),( _cor3
									  -| ['compiler_generated'] )}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1320
		      case <> of
			%% Line 1324
			<>
			    when call 'erlang':'>'
				  (_cor3,
				   16) ->
			    let <_cor5> =
				%% Line 1326
				case call 'erlang':'element'
					 (1, NewTree) of
				  %% Line 1327
				  <'l'> when 'true' ->
				      %% Line 1328
				      apply 'bplus_split_leaf'/1
					  (NewTree)
				  %% Line 1329
				  <'n'> when 'true' ->
				      %% Line 1330
				      apply 'bplus_split_node'/1
					  (NewTree)
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor4})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 1325
				case _cor5 of
				  <{LTree,DKey,RTree}> when 'true' ->
				      %% Line 1332
				      apply 'bplus_mk_node'/1
					  ([LTree|[DKey|[RTree|[]]]])
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			%% Line 1321
			<> when 'true' ->
			    %% Line 1322
			    NewTree
		      end
	end
'bplus_delete'/2 =
    %% Line 1340
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'v',_X_Key> when 'true' ->
	      'v'
	  %% Line 1341
	  <Tree,Key> when 'true' ->
	      let <NewTree> =
		  %% Line 1342
		  apply 'bplus_delete_in'/2
		      (Tree, Key)
	      in  let <S> =
		      %% Line 1784
		      ( case ( call ( 'erlang'
				      -| ['compiler_generated'] ):( 'element'
								    -| ['compiler_generated'] )
				   (( 1
				      -| ['compiler_generated'] ), NewTree)
			       -| ['compiler_generated'] ) of
			  %% Line 1785
			  ( <( 'l'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_fol1586> =
				      %% Line 1786
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'tuple_size'
									     -| ['compiler_generated'] )
					    (NewTree)
					-| ['compiler_generated'] )
				  in  %% Line 1786
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '-'
									     -| ['compiler_generated'] )
					    (_fol1586, ( 1
							 -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1787
			  ( <( 'n'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_cor2> =
				      %% Line 1788
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'tuple_size'
									     -| ['compiler_generated'] )
					    (NewTree)
					-| ['compiler_generated'] )
				  in  %% Line 1788
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'div'
									     -| ['compiler_generated'] )
					    (( _cor2
					       -| ['compiler_generated'] ), ( 2
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _cor3
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'case_clause'
					    -| ['compiler_generated'] ),( _cor3
									  -| ['compiler_generated'] )}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1344
		      case call 'erlang':'element'
			       (1, NewTree) of
			%% Line 1345
			<'l'> when 'true' ->
			    %% Line 1346
			    case <> of
			      %% Line 1347
			      <>
				  when call 'erlang':'=:='
					(S,
					 0) ->
				  %% Line 1348
				  'v'
			      %% Line 1349
			      <> when 'true' ->
				  %% Line 1350
				  NewTree
			    end
			%% Line 1352
			<'n'> when 'true' ->
			    %% Line 1353
			    case <> of
			      %% Line 1354
			      <>
				  when call 'erlang':'=:='
					(S,
					 1) ->
				  %% Line 1794
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(2, NewTree)
				    -| ['compiler_generated'] )
			      %% Line 1356
			      <> when 'true' ->
				  %% Line 1357
				  NewTree
			    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
	end
'bplus_insert_in'/2 =
    %% Line 1366
    fun (_cor1,_cor0) ->
	%% Line 1367
	case call 'erlang':'element'
		 (1, _cor1) of
	  %% Line 1368
	  <'l'> when 'true' ->
	      %% Line 1369
	      apply 'bplus_insert_in_leaf'/2
		  (_cor1, _cor0)
	  %% Line 1370
	  <'n'> when 'true' ->
	      %% Line 1371
	      case apply 'bplus_select_sub_tree'/2
		       (_cor1, _cor0) of
		<{Pos,SubTree}> when 'true' ->
		    let <NewSubTree> =
			%% Line 1373
			apply 'bplus_insert_in'/2
			    (SubTree, _cor0)
		    in  let <_cor4> =
			    %% Line 1784
			    ( case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'element'
									  -| ['compiler_generated'] )
					 (( 1
					    -| ['compiler_generated'] ), NewSubTree)
				     -| ['compiler_generated'] ) of
				%% Line 1785
				( <( 'l'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_fol1591> =
					    %% Line 1786
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'tuple_size'
										   -| ['compiler_generated'] )
						  (NewSubTree)
					      -| ['compiler_generated'] )
					in  %% Line 1786
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '-'
										   -| ['compiler_generated'] )
						  (_fol1591, ( 1
							       -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1787
				( <( 'n'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_cor2> =
					    %% Line 1788
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'tuple_size'
										   -| ['compiler_generated'] )
						  (NewSubTree)
					      -| ['compiler_generated'] )
					in  %% Line 1788
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'div'
										   -| ['compiler_generated'] )
						  (( _cor2
						     -| ['compiler_generated'] ), ( 2
										    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor3
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),( _cor3
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 1374
			    case <> of
			      %% Line 1377
			      <>
				  when call 'erlang':'>'
					(_cor4,
					 16) ->
				  %% Line 1378
				  case apply 'bplus_reorganize_tree_ins'/3
					   (_cor1, NewSubTree, Pos) of
				    %% Line 1379
				    <{'left',{LeftT,DKey,MiddleT}}> when 'true' ->
					let <_cor6> =
					    %% Line 1380
					    apply 'bplus_put_lkey'/3
						(_cor1, DKey, Pos)
					in  let <_cor5> =
						%% Line 1381
						call 'erlang':'-'
						    (Pos, 1)
					    in  %% Line 1380
						apply 'bplus_put_subtree'/2
						    (_cor6, %% Line 1381
							    [LeftT|[_cor5|[MiddleT|[Pos|[]]]]])
				    %% Line 1382
				    <{'right',{MiddleT,DKey,RightT}}> when 'true' ->
					let <_cor8> =
					    %% Line 1383
					    apply 'bplus_put_rkey'/3
						(_cor1, DKey, Pos)
					in  let <_cor7> =
						%% Line 1384
						call 'erlang':'+'
						    (Pos, 1)
					    in  %% Line 1383
						apply 'bplus_put_subtree'/2
						    (_cor8, %% Line 1384
							    [MiddleT|[Pos|[RightT|[_cor7|[]]]]])
				    %% Line 1385
				    <{'split',{LeftT,DKey,RightT}}> when 'true' ->
					%% Line 1386
					apply 'bplus_extend_tree'/3
					    (_cor1, {LeftT,DKey,RightT}, Pos)
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1375
			      <> when 'true' ->
				  %% Line 1376
				  apply 'bplus_put_subtree'/2
				      (_cor1, [NewSubTree|[Pos|[]]])
			    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'bplus_insert_in_leaf'/2 =
    %% Line 1394
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor1)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1596> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor1)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1596, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor2> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor1)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (( _cor2
				     -| ['compiler_generated'] ), ( 2
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1395
	    apply 'bplus_insert_in_leaf_2'/4
		(_cor1, _cor0, _cor2, [])
'bplus_insert_in_leaf_2'/4 =
    %% Line 1397
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Leaf,Key,0,Accum> when 'true' ->
	      %% Line 1398
	      apply 'bplus_insert_in_leaf_3'/3
		  (Leaf, 0, [Key|Accum])
	  %% Line 1399
	  <Leaf,Key,N,Accum> when 'true' ->
	      let <_cor4> =
		  %% Line 1400
		  call 'erlang':'+'
		      (N, 1)
	      in  let <K> =
		      %% Line 1400
		      call 'erlang':'element'
			  (_cor4, Leaf)
		  in  %% Line 1401
		      case <> of
			%% Line 1402
			<>
			    when call 'erlang':'<'
				  (Key,
				   K) ->
			    let <_cor6> =
				%% Line 1404
				call 'erlang':'-'
				    (N, 1)
			    in  %% Line 1404
				apply 'bplus_insert_in_leaf_2'/4
				    (Leaf, Key, _cor6, [K|Accum])
			%% Line 1405
			<>
			    when call 'erlang':'<'
				  (K,
				   Key) ->
			    let <_cor7> =
				%% Line 1407
				call 'erlang':'-'
				    (N, 1)
			    in  %% Line 1407
				apply 'bplus_insert_in_leaf_3'/3
				    (Leaf, _cor7, [K|[Key|Accum]])
			%% Line 1408
			<>
			    when call 'erlang':'=='
				  (K,
				   Key) ->
			    let <_cor8> =
				%% Line 1410
				call 'erlang':'-'
				    (N, 1)
			    in  %% Line 1410
				apply 'bplus_insert_in_leaf_3'/3
				    (Leaf, _cor8, [Key|Accum])
			( <> when 'true' ->
			      primop 'match_fail'
				  ('if_clause')
			  -| ['compiler_generated'] )
		      end
	end
'bplus_insert_in_leaf_3'/3 =
    %% Line 1413
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Leaf,0,LeafList> when 'true' ->
	      %% Line 1740
	      ( call ( 'erlang'
		       -| ['compiler_generated'] ):( 'list_to_tuple'
						     -| ['compiler_generated'] )
		    (( [( 'l'
			  -| ['compiler_generated'] )|LeafList]
		       -| ['compiler_generated'] ))
		-| ['compiler_generated'] )
	  %% Line 1415
	  <Leaf,N,LeafList> when 'true' ->
	      let <_cor5> =
		  %% Line 1416
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 1416
		      call 'erlang':'+'
			  (N, 1)
		  in  let <_cor4> =
			  %% Line 1416
			  call 'erlang':'element'
			      (_cor3, Leaf)
		      in  %% Line 1416
			  apply 'bplus_insert_in_leaf_3'/3
			      (Leaf, _cor5, [_cor4|LeafList])
	end
'bplus_delete_in'/2 =
    %% Line 1423
    fun (_cor1,_cor0) ->
	%% Line 1424
	case call 'erlang':'element'
		 (1, _cor1) of
	  %% Line 1425
	  <'l'> when 'true' ->
	      %% Line 1426
	      apply 'bplus_delete_in_leaf'/2
		  (_cor1, _cor0)
	  %% Line 1427
	  <'n'> when 'true' ->
	      %% Line 1428
	      case apply 'bplus_select_sub_tree'/2
		       (_cor1, _cor0) of
		<{Pos,SubTree}> when 'true' ->
		    let <NewSubTree> =
			%% Line 1430
			apply 'bplus_delete_in'/2
			    (SubTree, _cor0)
		    in  let <_cor4> =
			    %% Line 1784
			    ( case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'element'
									  -| ['compiler_generated'] )
					 (( 1
					    -| ['compiler_generated'] ), NewSubTree)
				     -| ['compiler_generated'] ) of
				%% Line 1785
				( <( 'l'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_fol1603> =
					    %% Line 1786
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'tuple_size'
										   -| ['compiler_generated'] )
						  (NewSubTree)
					      -| ['compiler_generated'] )
					in  %% Line 1786
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '-'
										   -| ['compiler_generated'] )
						  (_fol1603, ( 1
							       -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1787
				( <( 'n'
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_cor2> =
					    %% Line 1788
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'tuple_size'
										   -| ['compiler_generated'] )
						  (NewSubTree)
					      -| ['compiler_generated'] )
					in  %% Line 1788
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'div'
										   -| ['compiler_generated'] )
						  (( _cor2
						     -| ['compiler_generated'] ), ( 2
										    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor3
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),( _cor3
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 1432
			    case <> of
			      %% Line 1435
			      <>
				  when call 'erlang':'<'
					(_cor4,
					 8) ->
				  %% Line 1436
				  case apply 'bplus_reorganize_tree_del'/3
					   (_cor1, NewSubTree, Pos) of
				    %% Line 1437
				    <{'left',{LeftT,DKey,MiddleT}}> when 'true' ->
					let <_cor6> =
					    %% Line 1438
					    apply 'bplus_put_lkey'/3
						(_cor1, DKey, Pos)
					in  let <_cor5> =
						%% Line 1439
						call 'erlang':'-'
						    (Pos, 1)
					    in  %% Line 1438
						apply 'bplus_put_subtree'/2
						    (_cor6, %% Line 1439
							    [LeftT|[_cor5|[MiddleT|[Pos|[]]]]])
				    %% Line 1440
				    <{'right',{MiddleT,DKey,RightT}}> when 'true' ->
					let <_cor8> =
					    %% Line 1441
					    apply 'bplus_put_rkey'/3
						(_cor1, DKey, Pos)
					in  let <_cor7> =
						%% Line 1442
						call 'erlang':'+'
						    (Pos, 1)
					    in  %% Line 1441
						apply 'bplus_put_subtree'/2
						    (_cor8, %% Line 1442
							    [MiddleT|[Pos|[RightT|[_cor7|[]]]]])
				    %% Line 1443
				    <{'join_left',JoinedTree}> when 'true' ->
					%% Line 1444
					apply 'bplus_joinleft_tree'/3
					    (_cor1, JoinedTree, Pos)
				    %% Line 1445
				    <{'join_right',JoinedTree}> when 'true' ->
					%% Line 1446
					apply 'bplus_joinright_tree'/3
					    (_cor1, JoinedTree, Pos)
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1433
			      <> when 'true' ->
				  %% Line 1434
				  apply 'bplus_put_subtree'/2
				      (_cor1, [NewSubTree|[Pos|[]]])
			    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'bplus_delete_in_leaf'/2 =
    %% Line 1454
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor1)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1608> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor1)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1608, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor2> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor1)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (( _cor2
				     -| ['compiler_generated'] ), ( 2
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1455
	    apply 'bplus_delete_in_leaf_2'/4
		(_cor1, _cor0, _cor2, [])
'bplus_delete_in_leaf_2'/4 =
    %% Line 1457
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Leaf,_cor12,0,_cor13> when 'true' ->
	      Leaf
	  %% Line 1458
	  <Leaf,Key,N,Accum> when 'true' ->
	      let <_cor4> =
		  %% Line 1459
		  call 'erlang':'+'
		      (N, 1)
	      in  let <K> =
		      %% Line 1459
		      call 'erlang':'element'
			  (_cor4, Leaf)
		  in  %% Line 1460
		      case <> of
			%% Line 1461
			<>
			    when call 'erlang':'=='
				  (Key,
				   K) ->
			    let <_cor6> =
				%% Line 1463
				call 'erlang':'-'
				    (N, 1)
			    in  %% Line 1463
				apply 'bplus_delete_in_leaf_3'/3
				    (Leaf, _cor6, Accum)
			%% Line 1464
			<> when 'true' ->
			    let <_cor7> =
				%% Line 1465
				call 'erlang':'-'
				    (N, 1)
			    in  %% Line 1465
				apply 'bplus_delete_in_leaf_2'/4
				    (Leaf, Key, _cor7, [K|Accum])
		      end
	end
'bplus_delete_in_leaf_3'/3 =
    %% Line 1468
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Leaf,0,LeafList> when 'true' ->
	      %% Line 1740
	      ( call ( 'erlang'
		       -| ['compiler_generated'] ):( 'list_to_tuple'
						     -| ['compiler_generated'] )
		    (( [( 'l'
			  -| ['compiler_generated'] )|LeafList]
		       -| ['compiler_generated'] ))
		-| ['compiler_generated'] )
	  %% Line 1470
	  <Leaf,N,LeafList> when 'true' ->
	      let <_cor5> =
		  %% Line 1471
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 1471
		      call 'erlang':'+'
			  (N, 1)
		  in  let <_cor4> =
			  %% Line 1471
			  call 'erlang':'element'
			      (_cor3, Leaf)
		      in  %% Line 1471
			  apply 'bplus_delete_in_leaf_3'/3
			      (Leaf, _cor5, [_cor4|LeafList])
	end
'bplus_select_sub_tree'/2 =
    %% Line 1478
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor1)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1615> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor1)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1615, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor2> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor1)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (( _cor2
				     -| ['compiler_generated'] ), ( 2
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1479
	    apply 'bplus_select_sub_tree_2'/3
		(_cor1, _cor0, _cor2)
'bplus_select_sub_tree_2'/3 =
    %% Line 1481
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tree,_X_Key,1> when 'true' ->
	      let <_cor3> =
		  %% Line 1794
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'element'
							 -| ['compiler_generated'] )
			(2, Tree)
		    -| ['compiler_generated'] )
	      in  {1,_cor3}
	  %% Line 1482
	  <Tree,Key,N> when 'true' ->
	      ( let <_fol1628> =
		    %% Line 1799
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( '*'
							   -| ['compiler_generated'] )
			  (N, ( 2
				-| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		in  ( let <_cor3> =
			  %% Line 1799
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '-'
								 -| ['compiler_generated'] )
				(_fol1628, ( 1
					     -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      in  let <K> =
			      %% Line 1799
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'element'
								     -| ['compiler_generated'] )
				    (( _cor3
				       -| ['compiler_generated'] ), Tree)
				-| ['compiler_generated'] )
			  in  %% Line 1484
			      case <> of
				%% Line 1485
				<>
				    when call 'erlang':'>'
					  (K,
					   Key) ->
				    let <_cor5> =
					%% Line 1486
					call 'erlang':'-'
					    (N, 1)
				    in  %% Line 1486
					apply 'bplus_select_sub_tree_2'/3
					    (Tree, Key, _cor5)
				%% Line 1487
				<>
				    when call 'erlang':'=<'
					  (K,
					   Key) ->
				    ( let <_fol1634> =
					  %% Line 1794
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '*'
										 -| ['compiler_generated'] )
						(N, ( 2
						      -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  let <_cor6> =
					      %% Line 1794
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'element'
										     -| ['compiler_generated'] )
						    (_fol1634, Tree)
						-| ['compiler_generated'] )
					  in  %% Line 1489
					      {N,_cor6}
				      -| ['compiler_generated'] )
				( <> when 'true' ->
				      primop 'match_fail'
					  ('if_clause')
				  -| ['compiler_generated'] )
			      end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	end
'bplus_reorganize_tree_ins'/3 =
    %% Line 1496
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tree,NewSubTree,1> when 'true' ->
	      let <RTree> =
		  %% Line 1794
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'element'
							 -| ['compiler_generated'] )
			(4, Tree)
		    -| ['compiler_generated'] )
	      in  let <_cor4> =
		      %% Line 1784
		      ( case ( call ( 'erlang'
				      -| ['compiler_generated'] ):( 'element'
								    -| ['compiler_generated'] )
				   (( 1
				      -| ['compiler_generated'] ), RTree)
			       -| ['compiler_generated'] ) of
			  %% Line 1785
			  ( <( 'l'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_fol1645> =
				      %% Line 1786
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'tuple_size'
									     -| ['compiler_generated'] )
					    (RTree)
					-| ['compiler_generated'] )
				  in  %% Line 1786
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '-'
									     -| ['compiler_generated'] )
					    (_fol1645, ( 1
							 -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1787
			  ( <( 'n'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_fol1646> =
				      %% Line 1788
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'tuple_size'
									     -| ['compiler_generated'] )
					    (RTree)
					-| ['compiler_generated'] )
				  in  %% Line 1788
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'div'
									     -| ['compiler_generated'] )
					    (_fol1646, ( 2
							 -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _cor3
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'case_clause'
					    -| ['compiler_generated'] ),( _cor3
									  -| ['compiler_generated'] )}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1498
		      case <> of
			%% Line 1501
			<>
			    when call 'erlang':'>='
				  (_cor4,
				   16) ->
			    %% Line 1503
			    apply 'bplus_reorganize_tree_s'/1
				(NewSubTree)
			%% Line 1499
			<> when 'true' ->
			    %% Line 1500
			    apply 'bplus_reorganize_tree_r'/4
				(Tree, NewSubTree, 1, RTree)
		      end
	  %% Line 1505
	  <Tree,NewSubTree,Pos> when 'true' ->
	      let <Size> =
		  %% Line 1784
		  ( case ( call ( 'erlang'
				  -| ['compiler_generated'] ):( 'element'
								-| ['compiler_generated'] )
			       (( 1
				  -| ['compiler_generated'] ), Tree)
			   -| ['compiler_generated'] ) of
		      %% Line 1785
		      ( <( 'l'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_fol1650> =
				  %% Line 1786
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				    -| ['compiler_generated'] )
			      in  %% Line 1786
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '-'
									 -| ['compiler_generated'] )
					(_fol1650, ( 1
						     -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1787
		      ( <( 'n'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_fol1651> =
				  %% Line 1788
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				    -| ['compiler_generated'] )
			      in  %% Line 1788
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'div'
									 -| ['compiler_generated'] )
					(_fol1651, ( 2
						     -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _cor3
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'case_clause'
					-| ['compiler_generated'] ),( _cor3
								      -| ['compiler_generated'] )}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 1507
		  case <> of
		    %% Line 1508
		    <>
			when call 'erlang':'=='
			      (Pos,
			       Size) ->
			let <_cor7> =
			    %% Line 1511
			    call 'erlang':'-'
				(Pos, 1)
			in  ( let <_fol1657> =
				  %% Line 1794
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '*'
									 -| ['compiler_generated'] )
					(_cor7, ( 2
						  -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  let <LTree> =
				      %% Line 1794
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (_fol1657, Tree)
					-| ['compiler_generated'] )
				  in  let <_cor9> =
					  %% Line 1784
					  ( case ( call ( 'erlang'
							  -| ['compiler_generated'] ):( 'element'
											-| ['compiler_generated'] )
						       (( 1
							  -| ['compiler_generated'] ), LTree)
						   -| ['compiler_generated'] ) of
					      %% Line 1785
					      ( <( 'l'
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( let <_fol1662> =
							  %% Line 1786
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'tuple_size'
												 -| ['compiler_generated'] )
								(LTree)
							    -| ['compiler_generated'] )
						      in  %% Line 1786
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( '-'
												 -| ['compiler_generated'] )
								(_fol1662, ( 1
									     -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1787
					      ( <( 'n'
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( let <_fol1663> =
							  %% Line 1788
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'tuple_size'
												 -| ['compiler_generated'] )
								(LTree)
							    -| ['compiler_generated'] )
						      in  %% Line 1788
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'div'
												 -| ['compiler_generated'] )
								(_fol1663, ( 2
									     -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor3
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'case_clause'
								-| ['compiler_generated'] ),( _cor3
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  %% Line 1512
					  case <> of
					    %% Line 1515
					    <>
						when call 'erlang':'>='
						      (_cor9,
						       16) ->
						%% Line 1517
						apply 'bplus_reorganize_tree_s'/1
						    (NewSubTree)
					    %% Line 1513
					    <> when 'true' ->
						%% Line 1514
						apply 'bplus_reorganize_tree_l'/4
						    (Tree, NewSubTree, Pos, LTree)
					  end
			      -| ['compiler_generated'] )
		    %% Line 1519
		    <> when 'true' ->
			let <_cor11> =
			    %% Line 1521
			    call 'erlang':'-'
				(Pos, 1)
			in  ( let <_fol1669> =
				  %% Line 1794
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '*'
									 -| ['compiler_generated'] )
					(_cor11, ( 2
						   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  let <LTree> =
				      %% Line 1794
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (_fol1669, Tree)
					-| ['compiler_generated'] )
				  in  let <_cor13> =
					  %% Line 1522
					  call 'erlang':'+'
					      (Pos, 1)
				      in  ( let <_fol1676> =
						%% Line 1794
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '*'
										       -| ['compiler_generated'] )
						      (_cor13, ( 2
								 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  let <RTree> =
						    %% Line 1794
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'element'
											   -| ['compiler_generated'] )
							  (_fol1676, Tree)
						      -| ['compiler_generated'] )
						in  let <SL> =
							%% Line 1784
							( case ( call ( 'erlang'
									-| ['compiler_generated'] ):( 'element'
												      -| ['compiler_generated'] )
								     (( 1
									-| ['compiler_generated'] ), LTree)
								 -| ['compiler_generated'] ) of
							    %% Line 1785
							    ( <( 'l'
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( let <_fol1681> =
									%% Line 1786
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'tuple_size'
													       -| ['compiler_generated'] )
									      (LTree)
									  -| ['compiler_generated'] )
								    in  %% Line 1786
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( '-'
													       -| ['compiler_generated'] )
									      (_fol1681, ( 1
											   -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    %% Line 1787
							    ( <( 'n'
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( let <_fol1682> =
									%% Line 1788
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'tuple_size'
													       -| ['compiler_generated'] )
									      (LTree)
									  -| ['compiler_generated'] )
								    in  %% Line 1788
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'div'
													       -| ['compiler_generated'] )
									      (_fol1682, ( 2
											   -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <( _cor3
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( primop ( 'match_fail'
									     -| ['compiler_generated'] )
									(( {( 'case_clause'
									      -| ['compiler_generated'] ),( _cor3
													    -| ['compiler_generated'] )}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    in  let <SR> =
							    %% Line 1784
							    ( case ( call ( 'erlang'
									    -| ['compiler_generated'] ):( 'element'
													  -| ['compiler_generated'] )
									 (( 1
									    -| ['compiler_generated'] ), RTree)
								     -| ['compiler_generated'] ) of
								%% Line 1785
								( <( 'l'
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
								      ( let <_fol1686> =
									    %% Line 1786
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'tuple_size'
														   -| ['compiler_generated'] )
										  (RTree)
									      -| ['compiler_generated'] )
									in  %% Line 1786
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( '-'
														   -| ['compiler_generated'] )
										  (_fol1686, ( 1
											       -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								%% Line 1787
								( <( 'n'
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
								      ( let <_fol1687> =
									    %% Line 1788
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'tuple_size'
														   -| ['compiler_generated'] )
										  (RTree)
									      -| ['compiler_generated'] )
									in  %% Line 1788
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'div'
														   -| ['compiler_generated'] )
										  (_fol1687, ( 2
											       -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( _cor3
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
								      ( primop ( 'match_fail'
										 -| ['compiler_generated'] )
									    (( {( 'case_clause'
										  -| ['compiler_generated'] ),( _cor3
														-| ['compiler_generated'] )}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							in  %% Line 1525
							    case <> of
							      %% Line 1526
							      <>
								  when call 'erlang':'>'
									(SL,
									 SR) ->
								  %% Line 1527
								  apply 'bplus_reorganize_tree_r'/4
								      (Tree, NewSubTree, Pos, RTree)
							      %% Line 1528
							      <>
								  when call 'erlang':'<'
									(SL,
									 SR) ->
								  %% Line 1529
								  apply 'bplus_reorganize_tree_l'/4
								      (Tree, NewSubTree, Pos, LTree)
							      %% Line 1530
							      <> when 'true' ->
								  let <_cor17> =
								      %% Line 1784
								      ( case ( call ( 'erlang'
										      -| ['compiler_generated'] ):( 'element'
														    -| ['compiler_generated'] )
										   (( 1
										      -| ['compiler_generated'] ), LTree)
									       -| ['compiler_generated'] ) of
									  %% Line 1785
									  ( <( 'l'
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
										( let <_fol1691> =
										      %% Line 1786
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'tuple_size'
															     -| ['compiler_generated'] )
											    (LTree)
											-| ['compiler_generated'] )
										  in  %% Line 1786
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( '-'
															     -| ['compiler_generated'] )
											    (_fol1691, ( 1
													 -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  %% Line 1787
									  ( <( 'n'
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
										( let <_fol1692> =
										      %% Line 1788
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'tuple_size'
															     -| ['compiler_generated'] )
											    (LTree)
											-| ['compiler_generated'] )
										  in  %% Line 1788
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'div'
															     -| ['compiler_generated'] )
											    (_fol1692, ( 2
													 -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <( _cor3
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
										( primop ( 'match_fail'
											   -| ['compiler_generated'] )
										      (( {( 'case_clause'
											    -| ['compiler_generated'] ),( _cor3
															  -| ['compiler_generated'] )}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
								  in  %% Line 1531
								      case <> of
									%% Line 1534
									<>
									    when call 'erlang':'>='
										  (_cor17,
										   16) ->
									    %% Line 1535
									    apply 'bplus_reorganize_tree_s'/1
										(NewSubTree)
									%% Line 1532
									<> when 'true' ->
									    %% Line 1533
									    apply 'bplus_reorganize_tree_l'/4
										(Tree, NewSubTree, Pos, LTree)
								      end
							    end
					    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		  end
	end
'bplus_reorganize_tree_del'/3 =
    %% Line 1544
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tree,NewSubTree,1> when 'true' ->
	      let <RTree> =
		  %% Line 1794
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'element'
							 -| ['compiler_generated'] )
			(4, Tree)
		    -| ['compiler_generated'] )
	      in  let <_cor4> =
		      %% Line 1784
		      ( case ( call ( 'erlang'
				      -| ['compiler_generated'] ):( 'element'
								    -| ['compiler_generated'] )
				   (( 1
				      -| ['compiler_generated'] ), RTree)
			       -| ['compiler_generated'] ) of
			  %% Line 1785
			  ( <( 'l'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_fol1702> =
				      %% Line 1786
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'tuple_size'
									     -| ['compiler_generated'] )
					    (RTree)
					-| ['compiler_generated'] )
				  in  %% Line 1786
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '-'
									     -| ['compiler_generated'] )
					    (_fol1702, ( 1
							 -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1787
			  ( <( 'n'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_fol1703> =
				      %% Line 1788
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'tuple_size'
									     -| ['compiler_generated'] )
					    (RTree)
					-| ['compiler_generated'] )
				  in  %% Line 1788
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'div'
									     -| ['compiler_generated'] )
					    (_fol1703, ( 2
							 -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _cor3
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'case_clause'
					    -| ['compiler_generated'] ),( _cor3
									  -| ['compiler_generated'] )}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1547
		      case <> of
			%% Line 1550
			<>
			    when call 'erlang':'=<'
				  (_cor4,
				   8) ->
			    %% Line 1552
			    apply 'bplus_reorganize_tree_jr'/4
				(Tree, NewSubTree, 1, RTree)
			%% Line 1548
			<> when 'true' ->
			    %% Line 1549
			    apply 'bplus_reorganize_tree_r'/4
				(Tree, NewSubTree, 1, RTree)
		      end
	  %% Line 1554
	  <Tree,NewSubTree,Pos> when 'true' ->
	      let <Size> =
		  %% Line 1784
		  ( case ( call ( 'erlang'
				  -| ['compiler_generated'] ):( 'element'
								-| ['compiler_generated'] )
			       (( 1
				  -| ['compiler_generated'] ), Tree)
			   -| ['compiler_generated'] ) of
		      %% Line 1785
		      ( <( 'l'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_fol1707> =
				  %% Line 1786
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				    -| ['compiler_generated'] )
			      in  %% Line 1786
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '-'
									 -| ['compiler_generated'] )
					(_fol1707, ( 1
						     -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1787
		      ( <( 'n'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_fol1708> =
				  %% Line 1788
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'tuple_size'
									 -| ['compiler_generated'] )
					(Tree)
				    -| ['compiler_generated'] )
			      in  %% Line 1788
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'div'
									 -| ['compiler_generated'] )
					(_fol1708, ( 2
						     -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _cor3
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'case_clause'
					-| ['compiler_generated'] ),( _cor3
								      -| ['compiler_generated'] )}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 1556
		  case <> of
		    %% Line 1557
		    <>
			when call 'erlang':'=='
			      (Pos,
			       Size) ->
			let <_cor7> =
			    %% Line 1560
			    call 'erlang':'-'
				(Pos, 1)
			in  ( let <_fol1714> =
				  %% Line 1794
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '*'
									 -| ['compiler_generated'] )
					(_cor7, ( 2
						  -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  let <LTree> =
				      %% Line 1794
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (_fol1714, Tree)
					-| ['compiler_generated'] )
				  in  let <_cor9> =
					  %% Line 1784
					  ( case ( call ( 'erlang'
							  -| ['compiler_generated'] ):( 'element'
											-| ['compiler_generated'] )
						       (( 1
							  -| ['compiler_generated'] ), LTree)
						   -| ['compiler_generated'] ) of
					      %% Line 1785
					      ( <( 'l'
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( let <_fol1719> =
							  %% Line 1786
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'tuple_size'
												 -| ['compiler_generated'] )
								(LTree)
							    -| ['compiler_generated'] )
						      in  %% Line 1786
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( '-'
												 -| ['compiler_generated'] )
								(_fol1719, ( 1
									     -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1787
					      ( <( 'n'
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( let <_fol1720> =
							  %% Line 1788
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'tuple_size'
												 -| ['compiler_generated'] )
								(LTree)
							    -| ['compiler_generated'] )
						      in  %% Line 1788
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'div'
												 -| ['compiler_generated'] )
								(_fol1720, ( 2
									     -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor3
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'case_clause'
								-| ['compiler_generated'] ),( _cor3
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  %% Line 1561
					  case <> of
					    %% Line 1564
					    <>
						when call 'erlang':'=<'
						      (_cor9,
						       8) ->
						%% Line 1566
						apply 'bplus_reorganize_tree_jl'/4
						    (Tree, NewSubTree, Pos, LTree)
					    %% Line 1562
					    <> when 'true' ->
						%% Line 1563
						apply 'bplus_reorganize_tree_l'/4
						    (Tree, NewSubTree, Pos, LTree)
					  end
			      -| ['compiler_generated'] )
		    %% Line 1568
		    <> when 'true' ->
			let <_cor11> =
			    %% Line 1570
			    call 'erlang':'-'
				(Pos, 1)
			in  ( let <_fol1726> =
				  %% Line 1794
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '*'
									 -| ['compiler_generated'] )
					(_cor11, ( 2
						   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  let <LTree> =
				      %% Line 1794
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (_fol1726, Tree)
					-| ['compiler_generated'] )
				  in  let <_cor13> =
					  %% Line 1571
					  call 'erlang':'+'
					      (Pos, 1)
				      in  ( let <_fol1733> =
						%% Line 1794
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '*'
										       -| ['compiler_generated'] )
						      (_cor13, ( 2
								 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  let <RTree> =
						    %% Line 1794
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'element'
											   -| ['compiler_generated'] )
							  (_fol1733, Tree)
						      -| ['compiler_generated'] )
						in  let <SL> =
							%% Line 1784
							( case ( call ( 'erlang'
									-| ['compiler_generated'] ):( 'element'
												      -| ['compiler_generated'] )
								     (( 1
									-| ['compiler_generated'] ), LTree)
								 -| ['compiler_generated'] ) of
							    %% Line 1785
							    ( <( 'l'
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( let <_fol1738> =
									%% Line 1786
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'tuple_size'
													       -| ['compiler_generated'] )
									      (LTree)
									  -| ['compiler_generated'] )
								    in  %% Line 1786
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( '-'
													       -| ['compiler_generated'] )
									      (_fol1738, ( 1
											   -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    %% Line 1787
							    ( <( 'n'
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( let <_fol1739> =
									%% Line 1788
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'tuple_size'
													       -| ['compiler_generated'] )
									      (LTree)
									  -| ['compiler_generated'] )
								    in  %% Line 1788
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'div'
													       -| ['compiler_generated'] )
									      (_fol1739, ( 2
											   -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <( _cor3
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( primop ( 'match_fail'
									     -| ['compiler_generated'] )
									(( {( 'case_clause'
									      -| ['compiler_generated'] ),( _cor3
													    -| ['compiler_generated'] )}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    in  let <SR> =
							    %% Line 1784
							    ( case ( call ( 'erlang'
									    -| ['compiler_generated'] ):( 'element'
													  -| ['compiler_generated'] )
									 (( 1
									    -| ['compiler_generated'] ), RTree)
								     -| ['compiler_generated'] ) of
								%% Line 1785
								( <( 'l'
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
								      ( let <_fol1743> =
									    %% Line 1786
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'tuple_size'
														   -| ['compiler_generated'] )
										  (RTree)
									      -| ['compiler_generated'] )
									in  %% Line 1786
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( '-'
														   -| ['compiler_generated'] )
										  (_fol1743, ( 1
											       -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								%% Line 1787
								( <( 'n'
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
								      ( let <_fol1744> =
									    %% Line 1788
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'tuple_size'
														   -| ['compiler_generated'] )
										  (RTree)
									      -| ['compiler_generated'] )
									in  %% Line 1788
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'div'
														   -| ['compiler_generated'] )
										  (_fol1744, ( 2
											       -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( _cor3
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
								      ( primop ( 'match_fail'
										 -| ['compiler_generated'] )
									    (( {( 'case_clause'
										  -| ['compiler_generated'] ),( _cor3
														-| ['compiler_generated'] )}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							in  %% Line 1574
							    case <> of
							      %% Line 1575
							      <>
								  when call 'erlang':'>'
									(SL,
									 SR) ->
								  %% Line 1576
								  apply 'bplus_reorganize_tree_l'/4
								      (Tree, NewSubTree, Pos, LTree)
							      %% Line 1577
							      <>
								  when call 'erlang':'<'
									(SL,
									 SR) ->
								  %% Line 1578
								  apply 'bplus_reorganize_tree_r'/4
								      (Tree, NewSubTree, Pos, RTree)
							      %% Line 1579
							      <> when 'true' ->
								  let <_cor17> =
								      %% Line 1784
								      ( case ( call ( 'erlang'
										      -| ['compiler_generated'] ):( 'element'
														    -| ['compiler_generated'] )
										   (( 1
										      -| ['compiler_generated'] ), LTree)
									       -| ['compiler_generated'] ) of
									  %% Line 1785
									  ( <( 'l'
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
										( let <_fol1748> =
										      %% Line 1786
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'tuple_size'
															     -| ['compiler_generated'] )
											    (LTree)
											-| ['compiler_generated'] )
										  in  %% Line 1786
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( '-'
															     -| ['compiler_generated'] )
											    (_fol1748, ( 1
													 -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  %% Line 1787
									  ( <( 'n'
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
										( let <_fol1749> =
										      %% Line 1788
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'tuple_size'
															     -| ['compiler_generated'] )
											    (LTree)
											-| ['compiler_generated'] )
										  in  %% Line 1788
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'div'
															     -| ['compiler_generated'] )
											    (_fol1749, ( 2
													 -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <( _cor3
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
										( primop ( 'match_fail'
											   -| ['compiler_generated'] )
										      (( {( 'case_clause'
											    -| ['compiler_generated'] ),( _cor3
															  -| ['compiler_generated'] )}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
								  in  %% Line 1580
								      case <> of
									%% Line 1583
									<>
									    when call 'erlang':'=<'
										  (_cor17,
										   8) ->
									    %% Line 1584
									    apply 'bplus_reorganize_tree_jl'/4
										(Tree, NewSubTree, Pos, LTree)
									%% Line 1581
									<> when 'true' ->
									    %% Line 1582
									    apply 'bplus_reorganize_tree_l'/4
										(Tree, NewSubTree, Pos, LTree)
								      end
							    end
					    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		  end
	end
'bplus_reorganize_tree_l'/4 =
    %% Line 1590
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1591
	case call 'erlang':'element'
		 (1, _cor2) of
	  %% Line 1592
	  <'l'> when 'true' ->
	      let <_cor5> =
		  %% Line 1595
		  apply 'bplus_leaf_to_list'/1
		      (_cor0)
	      in  let <_cor4> =
		      %% Line 1596
		      apply 'bplus_leaf_to_list'/1
			  (_cor2)
		  in  let <_cor6> =
			  %% Line 1595
			  call 'lists':'append'
			      (_cor5, _cor4)
		      in  let <_cor7> =
			      %% Line 1740
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'list_to_tuple'
								     -| ['compiler_generated'] )
				    (( [( 'l'
					  -| ['compiler_generated'] )|_cor6]
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor8> =
				  %% Line 1593
				  apply 'bplus_split_leaf'/1
				      (_cor7)
			      in  %% Line 1593
				  {'left',_cor8}
	  %% Line 1597
	  <'n'> when 'true' ->
	      let <_cor9> =
		  %% Line 1600
		  apply 'bplus_node_to_list'/1
		      (_cor0)
	      in  ( let <_fol1757> =
			%% Line 1799
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (_cor1, ( 2
					-| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_fol1758> =
			      %% Line 1799
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '-'
								     -| ['compiler_generated'] )
				    (_fol1757, ( 1
						 -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor10> =
				  %% Line 1799
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_fol1758, _cor3)
				    -| ['compiler_generated'] )
			      in  let <_cor11> =
				      %% Line 1602
				      apply 'bplus_node_to_list'/1
					  (_cor2)
				  in  let <_cor12> =
					  %% Line 1600
					  call 'lists':'append'
					      ([_cor9|%% Line 1601
						      [[_cor10|[]]|%% Line 1602
								   [_cor11|[]]]])
				      in  let <_cor13> =
					      %% Line 1599
					      apply 'bplus_mk_node'/1
						  (_cor12)
					  in  let <_cor14> =
						  %% Line 1598
						  apply 'bplus_split_node'/1
						      (_cor13)
					      in  %% Line 1598
						  {'left',_cor14}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'bplus_reorganize_tree_r'/4 =
    %% Line 1605
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1606
	case call 'erlang':'element'
		 (1, _cor2) of
	  %% Line 1607
	  <'l'> when 'true' ->
	      let <_cor4> =
		  %% Line 1611
		  apply 'bplus_leaf_to_list'/1
		      (_cor2)
	      in  let <_cor5> =
		      %% Line 1612
		      apply 'bplus_leaf_to_list'/1
			  (_cor0)
		  in  let <_cor6> =
			  %% Line 1611
			  call 'lists':'append'
			      ([_cor4|%% Line 1612
				      [_cor5|[]]])
		      in  let <_cor7> =
			      %% Line 1740
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'list_to_tuple'
								     -| ['compiler_generated'] )
				    (( [( 'l'
					  -| ['compiler_generated'] )|_cor6]
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor8> =
				  %% Line 1609
				  apply 'bplus_split_leaf'/1
				      (_cor7)
			      in  %% Line 1608
				  {'right',_cor8}
	  %% Line 1613
	  <'n'> when 'true' ->
	      let <_cor9> =
		  %% Line 1617
		  apply 'bplus_node_to_list'/1
		      (_cor2)
	      in  ( let <_fol1771> =
			%% Line 1800
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (_cor1, ( 2
					-| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_fol1772> =
			      %% Line 1800
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '+'
								     -| ['compiler_generated'] )
				    (_fol1771, ( 1
						 -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor10> =
				  %% Line 1800
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_fol1772, _cor3)
				    -| ['compiler_generated'] )
			      in  let <_cor11> =
				      %% Line 1619
				      apply 'bplus_node_to_list'/1
					  (_cor0)
				  in  let <_cor12> =
					  %% Line 1617
					  call 'lists':'append'
					      ([_cor9|%% Line 1618
						      [[_cor10|[]]|%% Line 1619
								   [_cor11|[]]]])
				      in  let <_cor13> =
					      %% Line 1616
					      apply 'bplus_mk_node'/1
						  (_cor12)
					  in  let <_cor14> =
						  %% Line 1615
						  apply 'bplus_split_node'/1
						      (_cor13)
					      in  %% Line 1614
						  {'right',_cor14}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'bplus_reorganize_tree_s'/1 =
    %% Line 1622
    fun (_cor0) ->
	%% Line 1623
	case call 'erlang':'element'
		 (1, _cor0) of
	  %% Line 1624
	  <'l'> when 'true' ->
	      let <_cor1> =
		  %% Line 1625
		  apply 'bplus_split_leaf'/1
		      (_cor0)
	      in  %% Line 1625
		  {'split',_cor1}
	  %% Line 1626
	  <'n'> when 'true' ->
	      let <_cor2> =
		  %% Line 1627
		  apply 'bplus_split_node'/1
		      (_cor0)
	      in  %% Line 1627
		  {'split',_cor2}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'bplus_reorganize_tree_jl'/4 =
    %% Line 1630
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1631
	case call 'erlang':'element'
		 (1, _cor2) of
	  %% Line 1632
	  <'l'> when 'true' ->
	      let <_cor4> =
		  %% Line 1634
		  apply 'bplus_leaf_to_list'/1
		      (_cor0)
	      in  let <_cor5> =
		      %% Line 1635
		      apply 'bplus_leaf_to_list'/1
			  (_cor2)
		  in  let <_cor6> =
			  %% Line 1634
			  call 'lists':'append'
			      ([_cor4|%% Line 1635
				      [_cor5|[]]])
		      in  let <_cor7> =
			      %% Line 1740
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'list_to_tuple'
								     -| ['compiler_generated'] )
				    (( [( 'l'
					  -| ['compiler_generated'] )|_cor6]
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  %% Line 1633
			      {'join_left',_cor7}
	  %% Line 1636
	  <'n'> when 'true' ->
	      let <_cor8> =
		  %% Line 1638
		  apply 'bplus_node_to_list'/1
		      (_cor0)
	      in  ( let <_fol1786> =
			%% Line 1799
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (_cor1, ( 2
					-| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_fol1787> =
			      %% Line 1799
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '-'
								     -| ['compiler_generated'] )
				    (_fol1786, ( 1
						 -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor9> =
				  %% Line 1799
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_fol1787, _cor3)
				    -| ['compiler_generated'] )
			      in  let <_cor10> =
				      %% Line 1640
				      apply 'bplus_node_to_list'/1
					  (_cor2)
				  in  let <_cor11> =
					  %% Line 1638
					  call 'lists':'append'
					      ([_cor8|%% Line 1639
						      [[_cor9|[]]|%% Line 1640
								  [_cor10|[]]]])
				      in  let <_cor12> =
					      %% Line 1638
					      apply 'bplus_mk_node'/1
						  (_cor11)
					  in  %% Line 1637
					      {'join_left',_cor12}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'bplus_reorganize_tree_jr'/4 =
    %% Line 1643
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1644
	case call 'erlang':'element'
		 (1, _cor2) of
	  %% Line 1645
	  <'l'> when 'true' ->
	      let <_cor4> =
		  %% Line 1647
		  apply 'bplus_leaf_to_list'/1
		      (_cor2)
	      in  let <_cor5> =
		      %% Line 1648
		      apply 'bplus_leaf_to_list'/1
			  (_cor0)
		  in  let <_cor6> =
			  %% Line 1647
			  call 'lists':'append'
			      ([_cor4|%% Line 1648
				      [_cor5|[]]])
		      in  let <_cor7> =
			      %% Line 1740
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'list_to_tuple'
								     -| ['compiler_generated'] )
				    (( [( 'l'
					  -| ['compiler_generated'] )|_cor6]
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  %% Line 1646
			      {'join_right',_cor7}
	  %% Line 1649
	  <'n'> when 'true' ->
	      let <_cor8> =
		  %% Line 1651
		  apply 'bplus_node_to_list'/1
		      (_cor2)
	      in  ( let <_fol1800> =
			%% Line 1800
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (_cor1, ( 2
					-| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_fol1801> =
			      %% Line 1800
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '+'
								     -| ['compiler_generated'] )
				    (_fol1800, ( 1
						 -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor9> =
				  %% Line 1800
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_fol1801, _cor3)
				    -| ['compiler_generated'] )
			      in  let <_cor10> =
				      %% Line 1653
				      apply 'bplus_node_to_list'/1
					  (_cor0)
				  in  let <_cor11> =
					  %% Line 1651
					  call 'lists':'append'
					      ([_cor8|%% Line 1652
						      [[_cor9|[]]|%% Line 1653
								  [_cor10|[]]]])
				      in  let <_cor12> =
					      %% Line 1651
					      apply 'bplus_mk_node'/1
						  (_cor11)
					  in  %% Line 1650
					      {'join_right',_cor12}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'bplus_split_leaf'/1 =
    %% Line 1661
    fun (_cor0) ->
	let <S> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor0)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor1> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor0)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (( _cor1
				     -| ['compiler_generated'] ), ( 1
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor2> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor0)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (( _cor2
				     -| ['compiler_generated'] ), ( 2
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  let <_cor2> =
		%% Line 1663
		call 'erlang':'div'
		    (S, 2)
	    in  %% Line 1663
		apply 'bplus_split_leaf_2'/4
		    (_cor0, S, _cor2, [])
'bplus_split_leaf_2'/4 =
    %% Line 1665
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Leaf,Pos,1,Accum> when 'true' ->
	      let <_cor4> =
		  %% Line 1666
		  call 'erlang':'+'
		      (Pos, 1)
	      in  let <K> =
		      %% Line 1666
		      call 'erlang':'element'
			  (_cor4, Leaf)
		  in  let <_cor6> =
			  %% Line 1667
			  call 'erlang':'-'
			      (Pos, 1)
		      in  %% Line 1667
			  apply 'bplus_split_leaf_3'/5
			      (Leaf, _cor6, [], K, [K|Accum])
	  %% Line 1668
	  <Leaf,Pos,N,Accum> when 'true' ->
	      let <_cor10> =
		  %% Line 1669
		  call 'erlang':'-'
		      (Pos, 1)
	      in  let <_cor9> =
		      %% Line 1669
		      call 'erlang':'-'
			  (N, 1)
		  in  let <_cor7> =
			  %% Line 1669
			  call 'erlang':'+'
			      (Pos, 1)
		      in  let <_cor8> =
			      %% Line 1669
			      call 'erlang':'element'
				  (_cor7, Leaf)
			  in  %% Line 1669
			      apply 'bplus_split_leaf_2'/4
				  (Leaf, _cor10, _cor9, [_cor8|Accum])
	end
'bplus_split_leaf_3'/5 =
    %% Line 1671
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor15,0,LeftAcc,DKey,RightAcc> when 'true' ->
	      let <_cor6> =
		  %% Line 1740
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'list_to_tuple'
							 -| ['compiler_generated'] )
			(( [( 'l'
			      -| ['compiler_generated'] )|LeftAcc]
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      in  let <_cor5> =
		      %% Line 1740
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'list_to_tuple'
							     -| ['compiler_generated'] )
			    (( [( 'l'
				  -| ['compiler_generated'] )|RightAcc]
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  in  %% Line 1672
		      {_cor6,DKey,_cor5}
	  %% Line 1673
	  <Leaf,Pos,LeftAcc,DKey,RightAcc> when 'true' ->
	      let <_cor9> =
		  %% Line 1674
		  call 'erlang':'-'
		      (Pos, 1)
	      in  let <_cor7> =
		      %% Line 1674
		      call 'erlang':'+'
			  (Pos, 1)
		  in  let <_cor8> =
			  %% Line 1674
			  call 'erlang':'element'
			      (_cor7, Leaf)
		      in  %% Line 1674
			  apply 'bplus_split_leaf_3'/5
			      (Leaf, _cor9, [_cor8|LeftAcc], %% Line 1675
							     DKey, %% Line 1675
								   RightAcc)
	end
'bplus_split_node'/1 =
    %% Line 1681
    fun (_cor0) ->
	let <S> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor0)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor1> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor0)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (( _cor1
				     -| ['compiler_generated'] ), ( 1
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_cor2> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor0)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (( _cor2
				     -| ['compiler_generated'] ), ( 2
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  let <_cor2> =
		%% Line 1683
		call 'erlang':'div'
		    (S, 2)
	    in  %% Line 1683
		apply 'bplus_split_node_2'/4
		    (_cor0, S, _cor2, [])
'bplus_split_node_2'/4 =
    %% Line 1685
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Node,Pos,1,Accum> when 'true' ->
	      let <_cor6> =
		  %% Line 1686
		  call 'erlang':'-'
		      (Pos, 1)
	      in  ( let <_fol1821> =
			%% Line 1799
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (Pos, ( 2
				      -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_fol1822> =
			      %% Line 1799
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '-'
								     -| ['compiler_generated'] )
				    (_fol1821, ( 1
						 -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor5> =
				  %% Line 1799
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_fol1822, Node)
				    -| ['compiler_generated'] )
			      in  ( let <_fol1828> =
					%% Line 1794
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '*'
									       -| ['compiler_generated'] )
					      (Pos, ( 2
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  let <_cor4> =
					    %% Line 1794
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (_fol1828, Node)
					      -| ['compiler_generated'] )
					in  %% Line 1686
					    apply 'bplus_split_node_3'/5
						(Node, _cor6, [], _cor5, %% Line 1687
									 [_cor4|Accum])
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	  %% Line 1688
	  <Node,Pos,N,Accum> when 'true' ->
	      let <_cor10> =
		  %% Line 1689
		  call 'erlang':'-'
		      (Pos, 1)
	      in  let <_cor9> =
		      %% Line 1689
		      call 'erlang':'-'
			  (N, 1)
		  in  ( let <_fol1834> =
			    %% Line 1799
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '*'
								   -| ['compiler_generated'] )
				  (Pos, ( 2
					  -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			in  ( let <_fol1835> =
				  %% Line 1799
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '-'
									 -| ['compiler_generated'] )
					(_fol1834, ( 1
						     -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  let <_cor7> =
				      %% Line 1799
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (_fol1835, Node)
					-| ['compiler_generated'] )
				  in  ( let <_fol1841> =
					    %% Line 1794
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '*'
										   -| ['compiler_generated'] )
						  (Pos, ( 2
							  -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  let <_cor8> =
						%% Line 1794
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (_fol1841, Node)
						  -| ['compiler_generated'] )
					    in  %% Line 1689
						apply 'bplus_split_node_2'/4
						    (Node, _cor10, _cor9, [_cor7|%% Line 1690
										 [_cor8|Accum]])
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	end
'bplus_split_node_3'/5 =
    %% Line 1692
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,1,LeftAcc,DKey,RightAcc> when 'true' ->
	      let <_cor6> =
		  %% Line 1794
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'element'
							 -| ['compiler_generated'] )
			(2, Node)
		    -| ['compiler_generated'] )
	      in  let <_cor7> =
		      %% Line 1693
		      apply 'bplus_mk_node'/1
			  ([_cor6|LeftAcc])
		  in  let <_cor5> =
			  %% Line 1694
			  apply 'bplus_mk_node'/1
			      (RightAcc)
		      in  %% Line 1693
			  {_cor7,DKey,_cor5}
	  %% Line 1695
	  <Node,Pos,LeftAcc,DKey,RightAcc> when 'true' ->
	      let <_cor10> =
		  %% Line 1696
		  call 'erlang':'-'
		      (Pos, 1)
	      in  ( let <_fol1852> =
			%% Line 1799
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (Pos, ( 2
				      -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_fol1853> =
			      %% Line 1799
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '-'
								     -| ['compiler_generated'] )
				    (_fol1852, ( 1
						 -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor8> =
				  %% Line 1799
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_fol1853, Node)
				    -| ['compiler_generated'] )
			      in  ( let <_fol1859> =
					%% Line 1794
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '*'
									       -| ['compiler_generated'] )
					      (Pos, ( 2
						      -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  let <_cor9> =
					    %% Line 1794
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (_fol1859, Node)
					      -| ['compiler_generated'] )
					in  %% Line 1696
					    apply 'bplus_split_node_3'/5
						(Node, _cor10, %% Line 1697
							       [_cor8|%% Line 1698
								      [_cor9|LeftAcc]], %% Line 1699
											DKey, %% Line 1699
											      RightAcc)
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	end
'bplus_joinleft_tree'/3 =
    %% Line 1705
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor2)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1864> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor2)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1864, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1865> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor2)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_fol1865, ( 2
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1706
	    apply 'bplus_join_tree_2'/5
		(_cor2, _cor1, _cor0, _cor3, [])
'bplus_joinright_tree'/3 =
    %% Line 1707
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1708
	    call 'erlang':'+'
		(_cor0, 1)
	in  let <_cor3> =
		%% Line 1784
		( case ( call ( 'erlang'
				-| ['compiler_generated'] ):( 'element'
							      -| ['compiler_generated'] )
			     (( 1
				-| ['compiler_generated'] ), _cor2)
			 -| ['compiler_generated'] ) of
		    %% Line 1785
		    ( <( 'l'
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_fol1872> =
				%% Line 1786
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'tuple_size'
								       -| ['compiler_generated'] )
				      (_cor2)
				  -| ['compiler_generated'] )
			    in  %% Line 1786
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '-'
								       -| ['compiler_generated'] )
				      (_fol1872, ( 1
						   -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 1787
		    ( <( 'n'
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( let <_fol1873> =
				%% Line 1788
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'tuple_size'
								       -| ['compiler_generated'] )
				      (_cor2)
				  -| ['compiler_generated'] )
			    in  %% Line 1788
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'div'
								       -| ['compiler_generated'] )
				      (_fol1873, ( 2
						   -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    ( <( _cor3
			 -| ['compiler_generated'] )> when ( 'true'
							     -| ['compiler_generated'] ) ->
			  ( primop ( 'match_fail'
				     -| ['compiler_generated'] )
				(( {( 'case_clause'
				      -| ['compiler_generated'] ),( _cor3
								    -| ['compiler_generated'] )}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    in  %% Line 1708
		apply 'bplus_join_tree_2'/5
		    (_cor2, _cor1, _cor4, _cor3, [])
'bplus_join_tree_2'/5 =
    %% Line 1710
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Tree,JoinedTree,Pos,_cor14,Accum>
	      when call 'erlang':'=:='
		    (_cor14,
		     Pos) ->
	      let <_cor5> =
		  %% Line 1711
		  call 'erlang':'-'
		      (Pos, 2)
	      in  %% Line 1711
		  apply 'bplus_join_tree_3'/3
		      (Tree, _cor5, [JoinedTree|Accum])
	  %% Line 1712
	  <Tree,JoinedTree,Pos,N,Accum> when 'true' ->
	      let <_cor8> =
		  %% Line 1713
		  call 'erlang':'-'
		      (N, 1)
	      in  ( let <_fol1882> =
			%% Line 1799
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (N, ( 2
				    -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_fol1883> =
			      %% Line 1799
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '-'
								     -| ['compiler_generated'] )
				    (_fol1882, ( 1
						 -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor6> =
				  %% Line 1799
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_fol1883, Tree)
				    -| ['compiler_generated'] )
			      in  ( let <_fol1890> =
					%% Line 1794
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '*'
									       -| ['compiler_generated'] )
					      (N, ( 2
						    -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  let <_cor7> =
					    %% Line 1794
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (_fol1890, Tree)
					      -| ['compiler_generated'] )
					in  %% Line 1713
					    apply 'bplus_join_tree_2'/5
						(Tree, JoinedTree, Pos, _cor8, %% Line 1714
									       [_cor6|[_cor7|Accum]])
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	end
'bplus_join_tree_3'/3 =
    %% Line 1716
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Tree,0,Accum> when 'true' ->
	      apply 'bplus_mk_node'/1
		  (Accum)
	  %% Line 1717
	  <Tree,Pos,Accum> when 'true' ->
	      let <_cor5> =
		  %% Line 1718
		  call 'erlang':'-'
		      (Pos, 1)
	      in  ( let <_fol1897> =
			%% Line 1794
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (Pos, ( 2
				      -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  let <_cor3> =
			    %% Line 1794
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'element'
								   -| ['compiler_generated'] )
				  (_fol1897, Tree)
			      -| ['compiler_generated'] )
			in  ( let <_fol1904> =
				  %% Line 1800
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '*'
									 -| ['compiler_generated'] )
					(Pos, ( 2
						-| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  ( let <_fol1905> =
					%% Line 1800
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '+'
									       -| ['compiler_generated'] )
					      (_fol1904, ( 1
							   -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  let <_cor4> =
					    %% Line 1800
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (_fol1905, Tree)
					      -| ['compiler_generated'] )
					in  %% Line 1718
					    apply 'bplus_join_tree_3'/3
						(Tree, _cor5, [_cor3|%% Line 1719
								     [_cor4|Accum]])
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	end
'bplus_mk_node'/1 =
    %% Line 1728
    fun (_cor0) ->
	call 'erlang':'list_to_tuple'
	    (['n'|_cor0])
'bplus_node_to_list'/1 =
    %% Line 1733
    fun (_cor0) ->
	%% Line 1734
	case call 'erlang':'tuple_to_list'
		 (_cor0) of
	  <[_cor3|NodeList]> when 'true' ->
	      %% Line 1735
	      NodeList
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'bplus_mk_leaf'/1 =
    %% Line 1740
    fun (_cor0) ->
	call 'erlang':'list_to_tuple'
	    (['l'|_cor0])
'bplus_leaf_to_list'/1 =
    %% Line 1745
    fun (_cor0) ->
	%% Line 1746
	case call 'erlang':'tuple_to_list'
		 (_cor0) of
	  <[_cor3|LeafList]> when 'true' ->
	      %% Line 1747
	      LeafList
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'bplus_put_subtree'/2 =
    %% Line 1752
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,[]> when 'true' ->
	      Tree
	  %% Line 1753
	  <Tree,[NewSubTree|[Pos|Rest]]> when 'true' ->
	      let <_cor2> =
		  %% Line 1754
		  call 'erlang':'*'
		      (Pos, 2)
	      in  let <_cor3> =
		      %% Line 1754
		      call 'erlang':'setelement'
			  (_cor2, Tree, NewSubTree)
		  in  %% Line 1754
		      apply 'bplus_put_subtree'/2
			  (_cor3, Rest)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'bplus_put_subtree',2}}] )
	    -| ['compiler_generated'] )
	end
'bplus_extend_tree'/3 =
    %% Line 1759
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1784
	    ( case ( call ( 'erlang'
			    -| ['compiler_generated'] ):( 'element'
							  -| ['compiler_generated'] )
			 (( 1
			    -| ['compiler_generated'] ), _cor2)
		     -| ['compiler_generated'] ) of
		%% Line 1785
		( <( 'l'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1914> =
			    %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor2)
			      -| ['compiler_generated'] )
			in  %% Line 1786
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '-'
								   -| ['compiler_generated'] )
				  (_fol1914, ( 1
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 1787
		( <( 'n'
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( let <_fol1915> =
			    %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'tuple_size'
								   -| ['compiler_generated'] )
				  (_cor2)
			      -| ['compiler_generated'] )
			in  %% Line 1788
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'div'
								   -| ['compiler_generated'] )
				  (_fol1915, ( 2
					       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor3
		     -| ['compiler_generated'] )> when ( 'true'
							 -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'case_clause'
				  -| ['compiler_generated'] ),( _cor3
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1760
	    apply 'bplus_extend_tree_2'/5
		(_cor2, _cor1, _cor0, _cor3, [])
'bplus_extend_tree_2'/5 =
    %% Line 1762
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Tree,{T1,DKey,T2},Pos,_cor14,Accum>
	      when call 'erlang':'=:='
		    (_cor14,
		     Pos) ->
	      let <_cor5> =
		  %% Line 1763
		  call 'erlang':'-'
		      (Pos, 1)
	      in  %% Line 1763
		  apply 'bplus_extend_tree_3'/3
		      (Tree, _cor5, [T1|[DKey|[T2|Accum]]])
	  %% Line 1764
	  <Tree,Inserts,Pos,N,Accum> when 'true' ->
	      let <_cor8> =
		  %% Line 1765
		  call 'erlang':'-'
		      (N, 1)
	      in  ( let <_fol1924> =
			%% Line 1799
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (N, ( 2
				    -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_fol1925> =
			      %% Line 1799
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '-'
								     -| ['compiler_generated'] )
				    (_fol1924, ( 1
						 -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  let <_cor6> =
				  %% Line 1799
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'element'
									 -| ['compiler_generated'] )
					(_fol1925, Tree)
				    -| ['compiler_generated'] )
			      in  ( let <_fol1932> =
					%% Line 1794
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '*'
									       -| ['compiler_generated'] )
					      (N, ( 2
						    -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  let <_cor7> =
					    %% Line 1794
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (_fol1932, Tree)
					      -| ['compiler_generated'] )
					in  %% Line 1765
					    apply 'bplus_extend_tree_2'/5
						(Tree, Inserts, Pos, _cor8, %% Line 1766
									    [_cor6|[_cor7|Accum]])
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	end
'bplus_extend_tree_3'/3 =
    %% Line 1768
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor9,0,Accum> when 'true' ->
	      apply 'bplus_mk_node'/1
		  (Accum)
	  %% Line 1769
	  <Tree,N,Accum> when 'true' ->
	      let <_cor5> =
		  %% Line 1770
		  call 'erlang':'-'
		      (N, 1)
	      in  ( let <_fol1938> =
			%% Line 1794
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '*'
							       -| ['compiler_generated'] )
			      (N, ( 2
				    -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  let <_cor3> =
			    %% Line 1794
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'element'
								   -| ['compiler_generated'] )
				  (_fol1938, Tree)
			      -| ['compiler_generated'] )
			in  ( let <_fol1944> =
				  %% Line 1800
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '*'
									 -| ['compiler_generated'] )
					(N, ( 2
					      -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  ( let <_fol1945> =
					%% Line 1800
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '+'
									       -| ['compiler_generated'] )
					      (_fol1944, ( 1
							   -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  let <_cor4> =
					    %% Line 1800
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (_fol1945, Tree)
					      -| ['compiler_generated'] )
					in  %% Line 1770
					    apply 'bplus_extend_tree_3'/3
						(Tree, _cor5, [_cor3|%% Line 1771
								     [_cor4|Accum]])
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	end
'bplus_put_lkey'/3 =
    %% Line 1776
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'*'
		(_cor0, 2)
	in  let <_cor4> =
		call 'erlang':'-'
		    (_cor3, 1)
	    in  call 'erlang':'setelement'
		    (_cor4, _cor2, _cor1)
'bplus_put_rkey'/3 =
    %% Line 1777
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'*'
		(_cor0, 2)
	in  let <_cor4> =
		call 'erlang':'+'
		    (_cor3, 1)
	    in  call 'erlang':'setelement'
		    (_cor4, _cor2, _cor1)
'bplus_get_size'/1 =
    %% Line 1783
    fun (_cor0) ->
	%% Line 1784
	case call 'erlang':'element'
		 (1, _cor0) of
	  %% Line 1785
	  <'l'> when 'true' ->
	      let <_cor1> =
		  %% Line 1786
		  call 'erlang':'tuple_size'
		      (_cor0)
	      in  %% Line 1786
		  call 'erlang':'-'
		      (_cor1, 1)
	  %% Line 1787
	  <'n'> when 'true' ->
	      let <_cor2> =
		  %% Line 1788
		  call 'erlang':'tuple_size'
		      (_cor0)
	      in  %% Line 1788
		  call 'erlang':'div'
		      (_cor2, 2)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'bplus_get_tree'/2 =
    %% Line 1794
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'*'
		(_cor0, 2)
	in  call 'erlang':'element'
		(_cor2, _cor1)
'bplus_get_lkey'/2 =
    %% Line 1799
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'*'
		(_cor0, 2)
	in  let <_cor3> =
		call 'erlang':'-'
		    (_cor2, 1)
	    in  call 'erlang':'element'
		    (_cor3, _cor1)
'bplus_get_rkey'/2 =
    %% Line 1800
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'*'
		(_cor0, 2)
	in  let <_cor3> =
		call 'erlang':'+'
		    (_cor2, 1)
	    in  call 'erlang':'element'
		    (_cor3, _cor1)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dets_utils')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dets_utils', _cor0)
end