module 'gb_trees' ['balance'/1,
		   'delete'/2,
		   'delete_any'/2,
		   'empty'/0,
		   'enter'/3,
		   'from_orddict'/1,
		   'get'/2,
		   'insert'/3,
		   'is_defined'/2,
		   'is_empty'/1,
		   'iterator'/1,
		   'keys'/1,
		   'largest'/1,
		   'lookup'/2,
		   'map'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'next'/1,
		   'size'/1,
		   'smallest'/1,
		   'take_largest'/1,
		   'take_smallest'/1,
		   'to_list'/1,
		   'update'/3,
		   'values'/1]
    attributes [%% Line 155
		'export_type' =
		    %% Line 155
		    [{'tree',0}|[{'tree',2}|[{'iter',0}|[{'iter',2}]]]],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'gb_tree_node',{'type',157,'union',[{'atom',157,'nil'}|[{'type',158,'tuple',[{'var',158,'K'}|[{'var',158,'V'}|[{'type',158,'gb_tree_node',[{'var',158,'K'}|[{'var',158,'V'}]]}|[{'type',158,'gb_tree_node',[{'var',158,'K'}|[{'var',158,'V'}]]}]]]]}]]},[{'var',157,'K'}|[{'var',157,'V'}]]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{'gb_tree_node',{'type',159,'gb_tree_node',[{'var',159,'_'}|[{'var',159,'_'}]]},[]}],
		%% Line 160
		'opaque' =
		    %% Line 160
		    [{'tree',{'type',160,'tuple',[{'type',160,'non_neg_integer',[]}|[{'type',160,'gb_tree_node',[{'var',160,'Key'}|[{'var',160,'Value'}]]}]]},[{'var',160,'Key'}|[{'var',160,'Value'}]]}],
		%% Line 161
		'opaque' =
		    %% Line 161
		    [{'tree',{'type',161,'tree',[{'var',161,'_'}|[{'var',161,'_'}]]},[]}],
		%% Line 162
		'opaque' =
		    %% Line 162
		    [{'iter',{'type',162,'list',[{'type',162,'gb_tree_node',[{'var',162,'Key'}|[{'var',162,'Value'}]]}]},[{'var',162,'Key'}|[{'var',162,'Value'}]]}],
		%% Line 163
		'opaque' =
		    %% Line 163
		    [{'iter',{'type',163,'list',[{'type',163,'gb_tree_node',[]}]},[]}],
		%% Line 167
		'spec' =
		    %% Line 167
		    [{{'empty',0},[{'type',167,'fun',[{'type',167,'product',[]}|[{'type',167,'tree',[]}]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'is_empty',1},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'Tree'}]}|[{'type',172,'boolean',[]}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Tree'}|[{'type',173,'tree',[]}]]]]}]]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'size',1},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'Tree'}]}|[{'type',180,'non_neg_integer',[]}]]}|[[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Tree'}|[{'type',181,'tree',[]}]]]]}]]]}]}],
		%% Line 188
		'spec' =
		    %% Line 188
		    [{{'lookup',2},[{'type',188,'bounded_fun',[{'type',188,'fun',[{'type',188,'product',[{'var',188,'Key'}|[{'var',188,'Tree'}]]}|[{'type',188,'union',[{'atom',188,'none'}|[{'type',188,'tuple',[{'atom',188,'value'}|[{'var',188,'Value'}]]}]]}]]}|[[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Tree'}|[{'type',189,'tree',[{'var',189,'Key'}|[{'var',189,'Value'}]]}]]]]}]]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'is_defined',2},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Key'}|[{'var',214,'Tree'}]]}|[{'type',214,'boolean',[]}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Tree'}|[{'type',215,'tree',[{'var',215,'Key'}|[{'ann_type',215,[{'var',215,'Value'}|[{'type',215,'term',[]}]]}]]}]]]]}]]]}]}],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'get',2},[{'type',233,'bounded_fun',[{'type',233,'fun',[{'type',233,'product',[{'var',233,'Key'}|[{'var',233,'Tree'}]]}|[{'var',233,'Value'}]]}|[[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Tree'}|[{'type',234,'tree',[{'var',234,'Key'}|[{'var',234,'Value'}]]}]]]]}]]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'update',3},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'Key'}|[{'var',248,'Value'}|[{'var',248,'Tree1'}]]]}|[{'var',248,'Tree2'}]]}|[[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Tree1'}|[{'type',249,'tree',[{'var',249,'Key'}|[{'var',249,'Value'}]]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Tree2'}|[{'type',250,'tree',[{'var',250,'Key'}|[{'var',250,'Value'}]]}]]]]}]]]]}]}],
		%% Line 267
		'spec' =
		    %% Line 267
		    [{{'insert',3},[{'type',267,'bounded_fun',[{'type',267,'fun',[{'type',267,'product',[{'var',267,'Key'}|[{'var',267,'Value'}|[{'var',267,'Tree1'}]]]}|[{'var',267,'Tree2'}]]}|[[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Tree1'}|[{'type',268,'tree',[{'var',268,'Key'}|[{'var',268,'Value'}]]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Tree2'}|[{'type',269,'tree',[{'var',269,'Key'}|[{'var',269,'Value'}]]}]]]]}]]]]}]}],
		%% Line 318
		'spec' =
		    %% Line 318
		    [{{'enter',3},[{'type',318,'bounded_fun',[{'type',318,'fun',[{'type',318,'product',[{'var',318,'Key'}|[{'var',318,'Value'}|[{'var',318,'Tree1'}]]]}|[{'var',318,'Tree2'}]]}|[[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Tree1'}|[{'type',319,'tree',[{'var',319,'Key'}|[{'var',319,'Value'}]]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Tree2'}|[{'type',320,'tree',[{'var',320,'Key'}|[{'var',320,'Value'}]]}]]]]}]]]]}]}],
		%% Line 343
		'spec' =
		    %% Line 343
		    [{{'balance',1},[{'type',343,'bounded_fun',[{'type',343,'fun',[{'type',343,'product',[{'var',343,'Tree1'}]}|[{'var',343,'Tree2'}]]}|[[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'Tree1'}|[{'type',344,'tree',[{'var',344,'Key'}|[{'var',344,'Value'}]]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'Tree2'}|[{'type',345,'tree',[{'var',345,'Key'}|[{'var',345,'Value'}]]}]]]]}]]]]}]}],
		%% Line 370
		'spec' =
		    %% Line 370
		    [{{'from_orddict',1},[{'type',370,'bounded_fun',[{'type',370,'fun',[{'type',370,'product',[{'var',370,'List'}]}|[{'var',370,'Tree'}]]}|[[{'type',371,'constraint',[{'atom',371,'is_subtype'}|[[{'var',371,'List'}|[{'type',371,'list',[{'type',371,'tuple',[{'var',371,'Key'}|[{'var',371,'Value'}]]}]}]]]]}|[{'type',372,'constraint',[{'atom',372,'is_subtype'}|[[{'var',372,'Tree'}|[{'type',372,'tree',[{'var',372,'Key'}|[{'var',372,'Value'}]]}]]]]}]]]]}]}],
		%% Line 380
		'spec' =
		    %% Line 380
		    [{{'delete_any',2},[{'type',380,'bounded_fun',[{'type',380,'fun',[{'type',380,'product',[{'var',380,'Key'}|[{'var',380,'Tree1'}]]}|[{'var',380,'Tree2'}]]}|[[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'Tree1'}|[{'type',381,'tree',[{'var',381,'Key'}|[{'var',381,'Value'}]]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'Tree2'}|[{'type',382,'tree',[{'var',382,'Key'}|[{'var',382,'Value'}]]}]]]]}]]]]}]}],
		%% Line 394
		'spec' =
		    %% Line 394
		    [{{'delete',2},[{'type',394,'bounded_fun',[{'type',394,'fun',[{'type',394,'product',[{'var',394,'Key'}|[{'var',394,'Tree1'}]]}|[{'var',394,'Tree2'}]]}|[[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'Tree1'}|[{'type',395,'tree',[{'var',395,'Key'}|[{'var',395,'Value'}]]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Tree2'}|[{'type',396,'tree',[{'var',396,'Key'}|[{'var',396,'Value'}]]}]]]]}]]]]}]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'take_smallest',1},[{'type',422,'bounded_fun',[{'type',422,'fun',[{'type',422,'product',[{'var',422,'Tree1'}]}|[{'type',422,'tuple',[{'var',422,'Key'}|[{'var',422,'Value'}|[{'var',422,'Tree2'}]]]}]]}|[[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Tree1'}|[{'type',423,'tree',[{'var',423,'Key'}|[{'var',423,'Value'}]]}]]]]}|[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'Tree2'}|[{'type',424,'tree',[{'var',424,'Key'}|[{'var',424,'Value'}]]}]]]]}]]]]}]}],
		%% Line 436
		'spec' =
		    %% Line 436
		    [{{'smallest',1},[{'type',436,'bounded_fun',[{'type',436,'fun',[{'type',436,'product',[{'var',436,'Tree'}]}|[{'type',436,'tuple',[{'var',436,'Key'}|[{'var',436,'Value'}]]}]]}|[[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'Tree'}|[{'type',437,'tree',[{'var',437,'Key'}|[{'var',437,'Value'}]]}]]]]}]]]}]}],
		%% Line 447
		'spec' =
		    %% Line 447
		    [{{'take_largest',1},[{'type',447,'bounded_fun',[{'type',447,'fun',[{'type',447,'product',[{'var',447,'Tree1'}]}|[{'type',447,'tuple',[{'var',447,'Key'}|[{'var',447,'Value'}|[{'var',447,'Tree2'}]]]}]]}|[[{'type',448,'constraint',[{'atom',448,'is_subtype'}|[[{'var',448,'Tree1'}|[{'type',448,'tree',[{'var',448,'Key'}|[{'var',448,'Value'}]]}]]]]}|[{'type',449,'constraint',[{'atom',449,'is_subtype'}|[[{'var',449,'Tree2'}|[{'type',449,'tree',[{'var',449,'Key'}|[{'var',449,'Value'}]]}]]]]}]]]]}]}],
		%% Line 461
		'spec' =
		    %% Line 461
		    [{{'largest',1},[{'type',461,'bounded_fun',[{'type',461,'fun',[{'type',461,'product',[{'var',461,'Tree'}]}|[{'type',461,'tuple',[{'var',461,'Key'}|[{'var',461,'Value'}]]}]]}|[[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'Tree'}|[{'type',462,'tree',[{'var',462,'Key'}|[{'var',462,'Value'}]]}]]]]}]]]}]}],
		%% Line 474
		'spec' =
		    %% Line 474
		    [{{'to_list',1},[{'type',474,'bounded_fun',[{'type',474,'fun',[{'type',474,'product',[{'var',474,'Tree'}]}|[{'type',474,'list',[{'type',474,'tuple',[{'var',474,'Key'}|[{'var',474,'Value'}]]}]}]]}|[[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'Tree'}|[{'type',475,'tree',[{'var',475,'Key'}|[{'var',475,'Value'}]]}]]]]}]]]}]}],
		%% Line 488
		'spec' =
		    %% Line 488
		    [{{'keys',1},[{'type',488,'bounded_fun',[{'type',488,'fun',[{'type',488,'product',[{'var',488,'Tree'}]}|[{'type',488,'list',[{'var',488,'Key'}]}]]}|[[{'type',489,'constraint',[{'atom',489,'is_subtype'}|[[{'var',489,'Tree'}|[{'type',489,'tree',[{'var',489,'Key'}|[{'ann_type',489,[{'var',489,'Value'}|[{'type',489,'term',[]}]]}]]}]]]]}]]]}]}],
		%% Line 500
		'spec' =
		    %% Line 500
		    [{{'values',1},[{'type',500,'bounded_fun',[{'type',500,'fun',[{'type',500,'product',[{'var',500,'Tree'}]}|[{'type',500,'list',[{'var',500,'Value'}]}]]}|[[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'Tree'}|[{'type',501,'tree',[{'ann_type',501,[{'var',501,'Key'}|[{'type',501,'term',[]}]]}|[{'var',501,'Value'}]]}]]]]}]]]}]}],
		%% Line 512
		'spec' =
		    %% Line 512
		    [{{'iterator',1},[{'type',512,'bounded_fun',[{'type',512,'fun',[{'type',512,'product',[{'var',512,'Tree'}]}|[{'var',512,'Iter'}]]}|[[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'Tree'}|[{'type',513,'tree',[{'var',513,'Key'}|[{'var',513,'Value'}]]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Iter'}|[{'type',514,'iter',[{'var',514,'Key'}|[{'var',514,'Value'}]]}]]]]}]]]]}]}],
		%% Line 532
		'spec' =
		    %% Line 532
		    [{{'next',1},[{'type',532,'bounded_fun',[{'type',532,'fun',[{'type',532,'product',[{'var',532,'Iter1'}]}|[{'type',532,'union',[{'atom',532,'none'}|[{'type',532,'tuple',[{'var',532,'Key'}|[{'var',532,'Value'}|[{'var',532,'Iter2'}]]]}]]}]]}|[[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Iter1'}|[{'type',533,'iter',[{'var',533,'Key'}|[{'var',533,'Value'}]]}]]]]}|[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'Iter2'}|[{'type',534,'iter',[{'var',534,'Key'}|[{'var',534,'Value'}]]}]]]]}]]]]}]}],
		%% Line 543
		'spec' =
		    %% Line 543
		    [{{'map',2},[{'type',543,'bounded_fun',[{'type',543,'fun',[{'type',543,'product',[{'var',543,'Function'}|[{'var',543,'Tree1'}]]}|[{'var',543,'Tree2'}]]}|[[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'Function'}|[{'type',544,'fun',[{'type',544,'product',[{'ann_type',544,[{'var',544,'K'}|[{'var',544,'Key'}]]}|[{'ann_type',544,[{'var',544,'V1'}|[{'var',544,'Value1'}]]}]]}|[{'ann_type',544,[{'var',544,'V2'}|[{'var',544,'Value2'}]]}]]}]]]]}|[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'Tree1'}|[{'type',545,'tree',[{'var',545,'Key'}|[{'var',545,'Value1'}]]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Tree2'}|[{'type',546,'tree',[{'var',546,'Key'}|[{'var',546,'Value2'}]]}]]]]}]]]]]}]}]]
'empty'/0 =
    %% Line 169
    fun () ->
	%% Line 170
	{0,'nil'}
'is_empty'/1 =
    %% Line 175
    fun (_cor0) ->
	case _cor0 of
	  <{0,'nil'}> when 'true' ->
	      %% Line 176
	      'true'
	  %% Line 177
	  <_cor2> when 'true' ->
	      %% Line 178
	      'false'
	end
'size'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <{Size,_cor4}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor2> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 184
	      Size
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'size',1}}] )
	    -| ['compiler_generated'] )
	end
'lookup'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{_cor4,T}> when 'true' ->
	      %% Line 192
	      apply 'lookup_1'/2
		  (Key, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_1'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,_cor4,Smaller,_cor5}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      %% Line 202
	      apply 'lookup_1'/2
		  (Key, Smaller)
	  %% Line 203
	  <Key,{Key1,_cor6,_cor7,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      %% Line 204
	      apply 'lookup_1'/2
		  (Key, Bigger)
	  %% Line 205
	  <_cor8,{_cor9,Value,_cor10,_cor11}> when 'true' ->
	      %% Line 206
	      {'value',Value}
	  %% Line 207
	  <_cor12,'nil'> when 'true' ->
	      %% Line 208
	      'none'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup_1',2}}] )
	    -| ['compiler_generated'] )
	end
'is_defined'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{_cor4,T}> when 'true' ->
	      %% Line 218
	      apply 'is_defined_1'/2
		  (Key, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_defined',2}}] )
	    -| ['compiler_generated'] )
	end
'is_defined_1'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,_cor4,Smaller,_cor5}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      %% Line 221
	      apply 'is_defined_1'/2
		  (Key, Smaller)
	  %% Line 222
	  <Key,{Key1,_cor6,_cor7,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      %% Line 223
	      apply 'is_defined_1'/2
		  (Key, Bigger)
	  %% Line 224
	  <_cor8,{_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 225
	      'true'
	  %% Line 226
	  <_cor13,'nil'> when 'true' ->
	      %% Line 227
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_defined_1',2}}] )
	    -| ['compiler_generated'] )
	end
'get'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{_cor4,T}> when 'true' ->
	      %% Line 237
	      apply 'get_1'/2
		  (Key, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get',2}}] )
	    -| ['compiler_generated'] )
	end
'get_1'/2 =
    %% Line 239
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,_cor4,Smaller,_cor5}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      %% Line 240
	      apply 'get_1'/2
		  (Key, Smaller)
	  %% Line 241
	  <Key,{Key1,_cor6,_cor7,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      %% Line 242
	      apply 'get_1'/2
		  (Key, Bigger)
	  %% Line 243
	  <_cor8,{_cor9,Value,_cor10,_cor11}> when 'true' ->
	      %% Line 244
	      Value
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_1',2}}] )
	    -| ['compiler_generated'] )
	end
'update'/3 =
    %% Line 252
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,{S,T}> when 'true' ->
	      let <T1> =
		  %% Line 253
		  apply 'update_1'/3
		      (Key, Val, T)
	      in  %% Line 254
		  {S,T1}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'update',3}}] )
	    -| ['compiler_generated'] )
	end
'update_1'/3 =
    %% Line 258
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Value,{Key1,V,Smaller,Bigger}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      let <_cor3> =
		  %% Line 259
		  apply 'update_1'/3
		      (Key, Value, Smaller)
	      in  %% Line 259
		  {Key1,V,_cor3,Bigger}
	  %% Line 260
	  <Key,Value,{Key1,V,Smaller,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      let <_cor4> =
		  %% Line 261
		  apply 'update_1'/3
		      (Key, Value, Bigger)
	      in  %% Line 261
		  {Key1,V,Smaller,_cor4}
	  %% Line 262
	  <Key,Value,{_cor8,_cor9,Smaller,Bigger}> when 'true' ->
	      %% Line 263
	      {Key,Value,Smaller,Bigger}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'update_1',3}}] )
	    -| ['compiler_generated'] )
	end
'insert'/3 =
    %% Line 271
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,{S,T}>
	      when call 'erlang':'is_integer'
		    (S) ->
	      let <S1> =
		  %% Line 272
		  call 'erlang':'+'
		      (S, 1)
	      in  let <_cor4> =
		      %% Line 273
		      call 'erlang':'*'
			  (S1, S1)
		  in  let <_cor5> =
			  %% Line 273
			  apply 'insert_1'/4
			      (Key, Val, T, _cor4)
		      in  %% Line 273
			  {S1,_cor5}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'insert',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_1'/4 =
    %% Line 275
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,Value,{Key1,V,Smaller,Bigger},S>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      let <_cor4> =
		  %% Line 276
		  call 'erlang':'bsr'
		      (S, 1)
	      in  %% Line 276
		  case apply 'insert_1'/4
			   (Key, Value, Smaller, _cor4) of
		    %% Line 277
		    <{T1,H1,S1}> when 'true' ->
			let <T> =
			    %% Line 278
			    {Key1,V,T1,Bigger}
			in  %% Line 279
			    case apply 'count'/1
				     (Bigger) of
			      <{H2,S2}> when 'true' ->
				  let <_cor7> =
				      %% Line 280
				      call 'erlang':'max'
					  (H1, H2)
				  in  let <H> =
					  %% Line 280
					  call 'erlang':'bsl'
					      (_cor7, 1)
				      in  let <_cor9> =
					      %% Line 281
					      call 'erlang':'+'
						  (S1, S2)
					  in  let <SS> =
						  %% Line 281
						  call 'erlang':'+'
						      (_cor9, 1)
					      in  let <P> =
						      %% Line 282
						      call 'erlang':'*'
							  (SS, SS)
						  in  %% Line 283
						      case <> of
							%% Line 284
							<>
							    when call 'erlang':'>'
								  (H,
								   P) ->
							    %% Line 285
							    apply 'balance'/2
								(T, SS)
							%% Line 286
							<> when 'true' ->
							    %% Line 287
							    {T,H,SS}
						      end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    %% Line 289
		    <T1> when 'true' ->
			%% Line 290
			{Key1,V,T1,Bigger}
		  end
	  %% Line 292
	  <Key,Value,{Key1,V,Smaller,Bigger},S>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      let <_cor13> =
		  %% Line 293
		  call 'erlang':'bsr'
		      (S, 1)
	      in  %% Line 293
		  case apply 'insert_1'/4
			   (Key, Value, Bigger, _cor13) of
		    %% Line 294
		    <{T1,H1,S1}> when 'true' ->
			let <T> =
			    %% Line 295
			    {Key1,V,Smaller,T1}
			in  %% Line 296
			    case apply 'count'/1
				     (Smaller) of
			      <{H2,S2}> when 'true' ->
				  let <_cor16> =
				      %% Line 297
				      call 'erlang':'max'
					  (H1, H2)
				  in  let <H> =
					  %% Line 297
					  call 'erlang':'bsl'
					      (_cor16, 1)
				      in  let <_cor18> =
					      %% Line 298
					      call 'erlang':'+'
						  (S1, S2)
					  in  let <SS> =
						  %% Line 298
						  call 'erlang':'+'
						      (_cor18, 1)
					      in  let <P> =
						      %% Line 299
						      call 'erlang':'*'
							  (SS, SS)
						  in  %% Line 300
						      case <> of
							%% Line 301
							<>
							    when call 'erlang':'>'
								  (H,
								   P) ->
							    %% Line 302
							    apply 'balance'/2
								(T, SS)
							%% Line 303
							<> when 'true' ->
							    %% Line 304
							    {T,H,SS}
						      end
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor15})
				-| ['compiler_generated'] )
			    end
		    %% Line 306
		    <T1> when 'true' ->
			%% Line 307
			{Key1,V,Smaller,T1}
		  end
	  %% Line 309
	  <Key,Value,'nil',S>
	      when call 'erlang':'=:='
		    (S,
		     0) ->
	      %% Line 310
	      {{Key,Value,'nil','nil'},1,1}
	  %% Line 311
	  <Key,Value,'nil',_X_S> when 'true' ->
	      %% Line 312
	      {Key,Value,'nil','nil'}
	  %% Line 313
	  <Key,_cor26,_cor27,_cor28> when 'true' ->
	      %% Line 314
	      call 'erlang':'error'
		  ({'key_exists',Key})
	end
'enter'/3 =
    %% Line 322
    fun (_cor2,_cor1,_cor0) ->
	%% Line 323
	case apply 'is_defined'/2
		 (_cor2, _cor0) of
	  %% Line 324
	  <'true'> when 'true' ->
	      %% Line 325
	      apply 'update'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 326
	  <'false'> when 'true' ->
	      %% Line 327
	      apply 'insert'/3
		  (_cor2, _cor1, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'count'/1 =
    %% Line 332
    fun (_cor0) ->
	case _cor0 of
	  <{_cor8,_cor9,'nil','nil'}> when 'true' ->
	      %% Line 333
	      {1,1}
	  %% Line 334
	  <{_cor10,_cor11,Sm,Bi}> when 'true' ->
	      %% Line 335
	      case apply 'count'/1
		       (Sm) of
		<{H1,S1}> when 'true' ->
		    %% Line 336
		    case apply 'count'/1
			     (Bi) of
		      <{H2,S2}> when 'true' ->
			  let <_cor5> =
			      %% Line 337
			      call 'erlang':'max'
				  (H1, H2)
			  in  let <_cor6> =
				  %% Line 337
				  call 'erlang':'bsl'
				      (_cor5, 1)
			      in  let <_cor3> =
				      %% Line 337
				      call 'erlang':'+'
					  (S1, S2)
				  in  let <_cor4> =
					  %% Line 337
					  call 'erlang':'+'
					      (_cor3, 1)
				      in  %% Line 337
					  {_cor6,_cor4}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 338
	  <'nil'> when 'true' ->
	      %% Line 339
	      {1,0}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'count',1}}] )
	    -| ['compiler_generated'] )
	end
'balance'/1 =
    %% Line 347
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      let <_cor1> =
		  %% Line 348
		  apply 'balance'/2
		      (T, S)
	      in  %% Line 348
		  {S,_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'balance',1}}] )
	    -| ['compiler_generated'] )
	end
'balance'/2 =
    %% Line 350
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 351
	    apply 'to_list_1'/1
		(_cor1)
	in  %% Line 351
	    apply 'balance_list'/2
		(_cor2, _cor0)
'balance_list'/2 =
    %% Line 353
    fun (_cor1,_cor0) ->
	%% Line 354
	case apply 'balance_list_1'/2
		 (_cor1, _cor0) of
	  <{T,[]}> when 'true' ->
	      %% Line 355
	      T
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'balance_list_1'/2 =
    %% Line 357
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,S>
	      when call 'erlang':'>'
		    (S,
		     1) ->
	      let <Sm> =
		  %% Line 358
		  call 'erlang':'-'
		      (S, 1)
	      in  let <S2> =
		      %% Line 359
		      call 'erlang':'div'
			  (Sm, 2)
		  in  let <S1> =
			  %% Line 360
			  call 'erlang':'-'
			      (Sm, S2)
		      in  %% Line 361
			  case apply 'balance_list_1'/2
				   (L, S1) of
			    <{T1,[{K,V}|L1]}> when 'true' ->
				%% Line 362
				case apply 'balance_list_1'/2
					 (L1, S2) of
				  <{T2,L2}> when 'true' ->
				      let <T> =
					  %% Line 363
					  {K,V,T1,T2}
				      in  %% Line 364
					  {T,L2}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	  %% Line 365
	  <[{Key,Val}|L],1> when 'true' ->
	      %% Line 366
	      {{Key,Val,'nil','nil'},L}
	  %% Line 367
	  <L,0> when 'true' ->
	      %% Line 368
	      {'nil',L}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'balance_list_1',2}}] )
	    -| ['compiler_generated'] )
	end
'from_orddict'/1 =
    %% Line 374
    fun (_cor0) ->
	let <S> =
	    %% Line 375
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		%% Line 376
		apply 'balance_list'/2
		    (_cor0, S)
	    in  %% Line 376
		{S,_cor2}
'delete_any'/2 =
    %% Line 384
    fun (_cor1,_cor0) ->
	%% Line 385
	case apply 'is_defined'/2
		 (_cor1, _cor0) of
	  %% Line 386
	  <'true'> when 'true' ->
	      %% Line 387
	      apply 'delete'/2
		  (_cor1, _cor0)
	  %% Line 388
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{S,T}>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(S)
		in  let <_cor3> =
			call 'erlang':'>='
			    (S, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 399
		  call 'erlang':'-'
		      (S, 1)
	      in  let <_cor4> =
		      %% Line 399
		      apply 'delete_1'/2
			  (Key, T)
		  in  %% Line 399
		      {_cor5,_cor4}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_1'/2 =
    %% Line 403
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,Value,Smaller,Larger}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      let <Smaller1> =
		  %% Line 404
		  apply 'delete_1'/2
		      (Key, Smaller)
	      in  %% Line 405
		  {Key1,Value,Smaller1,Larger}
	  %% Line 406
	  <Key,{Key1,Value,Smaller,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      let <Bigger1> =
		  %% Line 407
		  apply 'delete_1'/2
		      (Key, Bigger)
	      in  %% Line 408
		  {Key1,Value,Smaller,Bigger1}
	  %% Line 409
	  <_cor6,{_cor7,_cor8,Smaller,Larger}> when 'true' ->
	      %% Line 410
	      apply 'merge'/2
		  (Smaller, Larger)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'delete_1',2}}] )
	    -| ['compiler_generated'] )
	end
'merge'/2 =
    %% Line 412
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Smaller,'nil'> when 'true' ->
	      %% Line 413
	      Smaller
	  %% Line 414
	  <'nil',Larger> when 'true' ->
	      %% Line 415
	      Larger
	  %% Line 416
	  <Smaller,Larger> when 'true' ->
	      %% Line 417
	      case apply 'take_smallest1'/1
		       (Larger) of
		<{Key,Value,Larger1}> when 'true' ->
		    %% Line 418
		    {Key,Value,Smaller,Larger1}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'take_smallest'/1 =
    %% Line 426
    fun (_cor0) ->
	case _cor0 of
	  <{Size,Tree}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor2> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 427
	      case apply 'take_smallest1'/1
		       (Tree) of
		<{Key,Value,Larger}> when 'true' ->
		    let <_cor4> =
			%% Line 428
			call 'erlang':'-'
			    (Size, 1)
		    in  %% Line 428
			{Key,Value,{_cor4,Larger}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'take_smallest',1}}] )
	    -| ['compiler_generated'] )
	end
'take_smallest1'/1 =
    %% Line 430
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Value,'nil',Larger}> when 'true' ->
	      %% Line 431
	      {Key,Value,Larger}
	  %% Line 432
	  <{Key,Value,Smaller,Larger}> when 'true' ->
	      %% Line 433
	      case apply 'take_smallest1'/1
		       (Smaller) of
		<{Key1,Value1,Smaller1}> when 'true' ->
		    %% Line 434
		    {Key1,Value1,{Key,Value,Smaller1,Larger}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'take_smallest1',1}}] )
	    -| ['compiler_generated'] )
	end
'smallest'/1 =
    %% Line 439
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,Tree}> when 'true' ->
	      %% Line 440
	      apply 'smallest_1'/1
		  (Tree)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'smallest',1}}] )
	    -| ['compiler_generated'] )
	end
'smallest_1'/1 =
    %% Line 442
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Value,'nil',_X_Larger}> when 'true' ->
	      %% Line 443
	      {Key,Value}
	  %% Line 444
	  <{_X_Key,_X_Value,Smaller,_X_Larger}> when 'true' ->
	      %% Line 445
	      apply 'smallest_1'/1
		  (Smaller)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'smallest_1',1}}] )
	    -| ['compiler_generated'] )
	end
'take_largest'/1 =
    %% Line 451
    fun (_cor0) ->
	case _cor0 of
	  <{Size,Tree}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor2> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 452
	      case apply 'take_largest1'/1
		       (Tree) of
		<{Key,Value,Smaller}> when 'true' ->
		    let <_cor4> =
			%% Line 453
			call 'erlang':'-'
			    (Size, 1)
		    in  %% Line 453
			{Key,Value,{_cor4,Smaller}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'take_largest',1}}] )
	    -| ['compiler_generated'] )
	end
'take_largest1'/1 =
    %% Line 455
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Value,Smaller,'nil'}> when 'true' ->
	      %% Line 456
	      {Key,Value,Smaller}
	  %% Line 457
	  <{Key,Value,Smaller,Larger}> when 'true' ->
	      %% Line 458
	      case apply 'take_largest1'/1
		       (Larger) of
		<{Key1,Value1,Larger1}> when 'true' ->
		    %% Line 459
		    {Key1,Value1,{Key,Value,Smaller,Larger1}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'take_largest1',1}}] )
	    -| ['compiler_generated'] )
	end
'largest'/1 =
    %% Line 464
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,Tree}> when 'true' ->
	      %% Line 465
	      apply 'largest_1'/1
		  (Tree)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'largest',1}}] )
	    -| ['compiler_generated'] )
	end
'largest_1'/1 =
    %% Line 467
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Value,_X_Smaller,'nil'}> when 'true' ->
	      %% Line 468
	      {Key,Value}
	  %% Line 469
	  <{_X_Key,_X_Value,_X_Smaller,Larger}> when 'true' ->
	      %% Line 470
	      apply 'largest_1'/1
		  (Larger)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'largest_1',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 477
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 478
	      apply 'to_list'/2
		  (T, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list_1'/1 =
    %% Line 480
    fun (_cor0) ->
	apply 'to_list'/2
	    (_cor0, [])
'to_list'/2 =
    %% Line 482
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Key,Value,Small,Big},L> when 'true' ->
	      let <_cor2> =
		  %% Line 483
		  apply 'to_list'/2
		      (Big, L)
	      in  %% Line 483
		  apply 'to_list'/2
		      (Small, [{Key,Value}|_cor2])
	  %% Line 484
	  <'nil',L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'to_list',2}}] )
	    -| ['compiler_generated'] )
	end
'keys'/1 =
    %% Line 491
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 492
	      apply 'keys'/2
		  (T, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'keys',1}}] )
	    -| ['compiler_generated'] )
	end
'keys'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Key,_X_Value,Small,Big},L> when 'true' ->
	      let <_cor2> =
		  %% Line 495
		  apply 'keys'/2
		      (Big, L)
	      in  %% Line 495
		  apply 'keys'/2
		      (Small, [Key|_cor2])
	  %% Line 496
	  <'nil',L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'keys',2}}] )
	    -| ['compiler_generated'] )
	end
'values'/1 =
    %% Line 503
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 504
	      apply 'values'/2
		  (T, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'values',1}}] )
	    -| ['compiler_generated'] )
	end
'values'/2 =
    %% Line 506
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_Key,Value,Small,Big},L> when 'true' ->
	      let <_cor2> =
		  %% Line 507
		  apply 'values'/2
		      (Big, L)
	      in  %% Line 507
		  apply 'values'/2
		      (Small, [Value|_cor2])
	  %% Line 508
	  <'nil',L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'values',2}}] )
	    -| ['compiler_generated'] )
	end
'iterator'/1 =
    %% Line 516
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 517
	      apply 'iterator_1'/1
		  (T)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'iterator',1}}] )
	    -| ['compiler_generated'] )
	end
'iterator_1'/1 =
    %% Line 519
    fun (_cor0) ->
	%% Line 520
	apply 'iterator'/2
	    (_cor0, [])
'iterator'/2 =
    %% Line 525
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T = {_cor4,_cor5,'nil',_cor6},As> when 'true' ->
	      %% Line 526
	      [T|As]
	  %% Line 527
	  <T = {_cor7,_cor8,L,_cor9},As> when 'true' ->
	      %% Line 528
	      apply 'iterator'/2
		  (L, [T|As])
	  %% Line 529
	  <'nil',As> when 'true' ->
	      %% Line 530
	      As
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'iterator',2}}] )
	    -| ['compiler_generated'] )
	end
'next'/1 =
    %% Line 536
    fun (_cor0) ->
	case _cor0 of
	  <[{X,V,_cor3,T}|As]> when 'true' ->
	      let <_cor1> =
		  %% Line 537
		  apply 'iterator'/2
		      (T, As)
	      in  %% Line 537
		  {X,V,_cor1}
	  %% Line 538
	  <[]> when 'true' ->
	      %% Line 539
	      'none'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'next',1}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 548
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,{Size,Tree}>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      let <_cor2> =
		  %% Line 549
		  apply 'map_1'/2
		      (F, Tree)
	      in  %% Line 549
		  {Size,_cor2}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'map_1'/2 =
    %% Line 551
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor7,'nil'> when 'true' ->
	      'nil'
	  %% Line 552
	  <F,{K,V,Smaller,Larger}> when 'true' ->
	      let <_cor4> =
		  %% Line 553
		  apply F
		      (K, V)
	      in  let <_cor3> =
		      %% Line 553
		      apply 'map_1'/2
			  (F, Smaller)
		  in  let <_cor2> =
			  %% Line 553
			  apply 'map_1'/2
			      (F, Larger)
		      in  %% Line 553
			  {K,_cor4,_cor3,_cor2}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'map_1',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gb_trees')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gb_trees', _cor0)
end