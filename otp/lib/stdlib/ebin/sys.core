module 'sys' ['change_code'/4,
	      'change_code'/5,
	      'debug_options'/1,
	      'get_debug'/3,
	      'get_state'/1,
	      'get_state'/2,
	      'get_status'/1,
	      'get_status'/2,
	      'handle_debug'/4,
	      'handle_system_msg'/6,
	      'handle_system_msg'/7,
	      'install'/2,
	      'install'/3,
	      'log'/2,
	      'log'/3,
	      'log_to_file'/2,
	      'log_to_file'/3,
	      'module_info'/0,
	      'module_info'/1,
	      'no_debug'/1,
	      'no_debug'/2,
	      'print_log'/1,
	      'remove'/2,
	      'remove'/3,
	      'replace_state'/2,
	      'replace_state'/3,
	      'resume'/1,
	      'resume'/2,
	      'statistics'/2,
	      'statistics'/3,
	      'suspend'/1,
	      'suspend'/2,
	      'suspend_loop_hib'/6,
	      'trace'/2,
	      'trace'/3]
    attributes [%% Line 37
		'export_type' =
		    %% Line 37
		    [{'dbg_opt',0}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'name',{'type',39,'union',[{'type',39,'pid',[]}|[{'type',39,'atom',[]}|[{'type',39,'tuple',[{'atom',39,'global'}|[{'type',39,'atom',[]}]]}]]]},[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'system_event',{'type',40,'union',[{'type',40,'tuple',[{'atom',40,'in'}|[{'ann_type',40,[{'var',40,'Msg'}|[{'var',40,'_'}]]}]]}|[{'type',41,'tuple',[{'atom',41,'in'}|[{'ann_type',41,[{'var',41,'Msg'}|[{'var',41,'_'}]]}|[{'ann_type',41,[{'var',41,'From'}|[{'var',41,'_'}]]}]]]}|[{'type',42,'tuple',[{'atom',42,'out'}|[{'ann_type',42,[{'var',42,'Msg'}|[{'var',42,'_'}]]}|[{'ann_type',42,[{'var',42,'To'}|[{'var',42,'_'}]]}]]]}|[{'type',43,'term',[]}]]]]},[]}],
		%% Line 44
		'opaque' =
		    %% Line 44
		    [{'dbg_opt',{'type',44,'union',[{'type',44,'tuple',[{'atom',44,'trace'}|[{'atom',44,'true'}]]}|[{'type',45,'tuple',[{'atom',45,'log'}|[{'type',46,'tuple',[{'ann_type',46,[{'var',46,'N'}|[{'type',46,'non_neg_integer',[]}]]}|[{'type',47,'list',[{'type',47,'tuple',[{'ann_type',47,[{'var',47,'Event'}|[{'type',47,'system_event',[]}]]}|[{'ann_type',48,[{'var',48,'FuncState'}|[{'var',48,'_'}]]}|[{'ann_type',49,[{'var',49,'FormFunc'}|[{'type',49,'dbg_fun',[]}]]}]]]}]}]]}]]}|[{'type',50,'tuple',[{'atom',50,'statistics'}|[{'type',50,'tuple',[{'remote_type',50,[{'atom',50,'file'}|[{'atom',50,'date_time'}|[[]]]]}|[{'type',51,'tuple',[{'atom',51,'reductions'}|[{'type',51,'non_neg_integer',[]}]]}|[{'ann_type',52,[{'var',52,'MessagesIn'}|[{'type',52,'non_neg_integer',[]}]]}|[{'ann_type',53,[{'var',53,'MessagesOut'}|[{'type',53,'non_neg_integer',[]}]]}]]]]}]]}|[{'type',54,'tuple',[{'atom',54,'log_to_file'}|[{'remote_type',54,[{'atom',54,'file'}|[{'atom',54,'io_device'}|[[]]]]}]]}|[{'type',55,'tuple',[{'ann_type',55,[{'var',55,'Func'}|[{'type',55,'dbg_fun',[]}]]}|[{'ann_type',55,[{'var',55,'FuncState'}|[{'type',55,'term',[]}]]}]]}]]]]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'dbg_fun',{'type',56,'fun',[{'type',56,'product',[{'ann_type',56,[{'var',56,'FuncState'}|[{'var',56,'_'}]]}|[{'ann_type',57,[{'var',57,'Event'}|[{'type',57,'system_event',[]}]]}|[{'ann_type',58,[{'var',58,'ProcState'}|[{'var',58,'_'}]]}]]]}|[{'type',58,'union',[{'atom',58,'done'}|[{'paren_type',58,[{'ann_type',58,[{'var',58,'NewFuncState'}|[{'var',58,'_'}]]}]}]]}]]},[]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'suspend',1},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'Name'}]}|[{'atom',63,'ok'}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Name'}|[{'type',64,'name',[]}]]]]}]]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'suspend',2},[{'type',67,'bounded_fun',[{'type',67,'fun',[{'type',67,'product',[{'var',67,'Name'}|[{'var',67,'Timeout'}]]}|[{'atom',67,'ok'}]]}|[[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Name'}|[{'type',68,'name',[]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Timeout'}|[{'type',69,'timeout',[]}]]]]}]]]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'resume',1},[{'type',72,'bounded_fun',[{'type',72,'fun',[{'type',72,'product',[{'var',72,'Name'}]}|[{'atom',72,'ok'}]]}|[[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Name'}|[{'type',73,'name',[]}]]]]}]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'resume',2},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'Name'}|[{'var',76,'Timeout'}]]}|[{'atom',76,'ok'}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Name'}|[{'type',77,'name',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Timeout'}|[{'type',78,'timeout',[]}]]]]}]]]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'get_status',1},[{'type',81,'bounded_fun',[{'type',81,'fun',[{'type',81,'product',[{'var',81,'Name'}]}|[{'var',81,'Status'}]]}|[[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'Name'}|[{'type',82,'name',[]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Status'}|[{'type',83,'tuple',[{'atom',83,'status'}|[{'ann_type',83,[{'var',83,'Pid'}|[{'type',83,'pid',[]}]]}|[{'type',83,'tuple',[{'atom',83,'module'}|[{'ann_type',83,[{'var',83,'Module'}|[{'type',83,'module',[]}]]}]]}|[{'type',83,'list',[{'var',83,'SItem'}]}]]]]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'SItem'}|[{'type',84,'union',[{'paren_type',84,[{'ann_type',84,[{'var',84,'PDict'}|[{'type',84,'list',[{'type',84,'tuple',[{'ann_type',84,[{'var',84,'Key'}|[{'type',84,'term',[]}]]}|[{'ann_type',84,[{'var',84,'Value'}|[{'type',84,'term',[]}]]}]]}]}]]}]}|[{'paren_type',85,[{'ann_type',85,[{'var',85,'SysState'}|[{'type',85,'union',[{'atom',85,'running'}|[{'atom',85,'suspended'}]]}]]}]}|[{'paren_type',86,[{'ann_type',86,[{'var',86,'Parent'}|[{'type',86,'pid',[]}]]}]}|[{'paren_type',87,[{'ann_type',87,[{'var',87,'Dbg'}|[{'type',87,'list',[{'type',87,'dbg_opt',[]}]}]]}]}|[{'paren_type',88,[{'ann_type',88,[{'var',88,'Misc'}|[{'type',88,'term',[]}]]}]}]]]]]}]]]]}]]]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'get_status',2},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'Name'}|[{'var',91,'Timeout'}]]}|[{'var',91,'Status'}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Name'}|[{'type',92,'name',[]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Timeout'}|[{'type',93,'timeout',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Status'}|[{'type',94,'tuple',[{'atom',94,'status'}|[{'ann_type',94,[{'var',94,'Pid'}|[{'type',94,'pid',[]}]]}|[{'type',94,'tuple',[{'atom',94,'module'}|[{'ann_type',94,[{'var',94,'Module'}|[{'type',94,'module',[]}]]}]]}|[{'type',94,'list',[{'var',94,'SItem'}]}]]]]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'SItem'}|[{'type',95,'union',[{'paren_type',95,[{'ann_type',95,[{'var',95,'PDict'}|[{'type',95,'list',[{'type',95,'tuple',[{'ann_type',95,[{'var',95,'Key'}|[{'type',95,'term',[]}]]}|[{'ann_type',95,[{'var',95,'Value'}|[{'type',95,'term',[]}]]}]]}]}]]}]}|[{'paren_type',96,[{'ann_type',96,[{'var',96,'SysState'}|[{'type',96,'union',[{'atom',96,'running'}|[{'atom',96,'suspended'}]]}]]}]}|[{'paren_type',97,[{'ann_type',97,[{'var',97,'Parent'}|[{'type',97,'pid',[]}]]}]}|[{'paren_type',98,[{'ann_type',98,[{'var',98,'Dbg'}|[{'type',98,'list',[{'type',98,'dbg_opt',[]}]}]]}]}|[{'paren_type',99,[{'ann_type',99,[{'var',99,'Misc'}|[{'type',99,'term',[]}]]}]}]]]]]}]]]]}]]]]]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'get_state',1},[{'type',102,'bounded_fun',[{'type',102,'fun',[{'type',102,'product',[{'var',102,'Name'}]}|[{'var',102,'State'}]]}|[[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'Name'}|[{'type',103,'name',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'State'}|[{'type',104,'term',[]}]]]]}]]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'get_state',2},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'Name'}|[{'var',111,'Timeout'}]]}|[{'var',111,'State'}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Name'}|[{'type',112,'name',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Timeout'}|[{'type',113,'timeout',[]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'State'}|[{'type',114,'term',[]}]]]]}]]]]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'replace_state',2},[{'type',121,'bounded_fun',[{'type',121,'fun',[{'type',121,'product',[{'var',121,'Name'}|[{'var',121,'StateFun'}]]}|[{'var',121,'NewState'}]]}|[[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Name'}|[{'type',122,'name',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'StateFun'}|[{'type',123,'fun',[{'type',123,'product',[{'ann_type',123,[{'var',123,'State'}|[{'type',123,'term',[]}]]}]}|[{'ann_type',123,[{'var',123,'NewState'}|[{'type',123,'term',[]}]]}]]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'NewState'}|[{'type',124,'term',[]}]]]]}]]]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'replace_state',3},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'Name'}|[{'var',131,'StateFun'}|[{'var',131,'Timeout'}]]]}|[{'var',131,'NewState'}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Name'}|[{'type',132,'name',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'StateFun'}|[{'type',133,'fun',[{'type',133,'product',[{'ann_type',133,[{'var',133,'State'}|[{'type',133,'term',[]}]]}]}|[{'ann_type',133,[{'var',133,'NewState'}|[{'type',133,'term',[]}]]}]]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Timeout'}|[{'type',134,'timeout',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'NewState'}|[{'type',135,'term',[]}]]]]}]]]]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'change_code',4},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'Name'}|[{'var',142,'Module'}|[{'var',142,'OldVsn'}|[{'var',142,'Extra'}]]]]}|[{'type',142,'union',[{'atom',142,'ok'}|[{'type',142,'tuple',[{'atom',142,'error'}|[{'var',142,'Reason'}]]}]]}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Name'}|[{'type',143,'name',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Module'}|[{'type',144,'module',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'OldVsn'}|[{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'term',[]}]]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Extra'}|[{'type',146,'term',[]}]]]]}|[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Reason'}|[{'type',147,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'change_code',5},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'Name'}|[{'var',151,'Module'}|[{'var',151,'OldVsn'}|[{'var',151,'Extra'}|[{'var',151,'Timeout'}]]]]]}|[{'type',152,'union',[{'atom',152,'ok'}|[{'type',152,'tuple',[{'atom',152,'error'}|[{'var',152,'Reason'}]]}]]}]]}|[[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Name'}|[{'type',153,'name',[]}]]]]}|[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Module'}|[{'type',154,'module',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'OldVsn'}|[{'type',155,'union',[{'atom',155,'undefined'}|[{'type',155,'term',[]}]]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Extra'}|[{'type',156,'term',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Timeout'}|[{'type',157,'timeout',[]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Reason'}|[{'type',158,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'log',2},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'Name'}|[{'var',166,'Flag'}]]}|[{'type',166,'union',[{'atom',166,'ok'}|[{'type',166,'tuple',[{'atom',166,'ok'}|[{'type',166,'list',[{'type',166,'system_event',[]}]}]]}]]}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Name'}|[{'type',167,'name',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Flag'}|[{'type',168,'union',[{'atom',168,'true'}|[{'type',169,'tuple',[{'atom',169,'true'}|[{'ann_type',169,[{'var',169,'N'}|[{'type',169,'pos_integer',[]}]]}]]}|[{'atom',170,'false'}|[{'atom',170,'get'}|[{'atom',170,'print'}]]]]]}]]]]}]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'log',3},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'Name'}|[{'var',174,'Flag'}|[{'var',174,'Timeout'}]]]}|[{'type',174,'union',[{'atom',174,'ok'}|[{'type',174,'tuple',[{'atom',174,'ok'}|[{'type',174,'list',[{'type',174,'system_event',[]}]}]]}]]}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Name'}|[{'type',175,'name',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Flag'}|[{'type',176,'union',[{'atom',176,'true'}|[{'type',177,'tuple',[{'atom',177,'true'}|[{'ann_type',177,[{'var',177,'N'}|[{'type',177,'pos_integer',[]}]]}]]}|[{'atom',178,'false'}|[{'atom',178,'get'}|[{'atom',178,'print'}]]]]]}]]]]}|[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Timeout'}|[{'type',179,'timeout',[]}]]]]}]]]]]}]}],
		%% Line 183
		'spec' =
		    %% Line 183
		    [{{'trace',2},[{'type',183,'bounded_fun',[{'type',183,'fun',[{'type',183,'product',[{'var',183,'Name'}|[{'var',183,'Flag'}]]}|[{'atom',183,'ok'}]]}|[[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Name'}|[{'type',184,'name',[]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Flag'}|[{'type',185,'boolean',[]}]]]]}]]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'trace',3},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'Name'}|[{'var',189,'Flag'}|[{'var',189,'Timeout'}]]]}|[{'atom',189,'ok'}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Name'}|[{'type',190,'name',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Flag'}|[{'type',191,'boolean',[]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Timeout'}|[{'type',192,'timeout',[]}]]]]}]]]]]}]}],
		%% Line 196
		'spec' =
		    %% Line 196
		    [{{'log_to_file',2},[{'type',196,'bounded_fun',[{'type',196,'fun',[{'type',196,'product',[{'var',196,'Name'}|[{'var',196,'Flag'}]]}|[{'type',196,'union',[{'atom',196,'ok'}|[{'type',196,'tuple',[{'atom',196,'error'}|[{'atom',196,'open_file'}]]}]]}]]}|[[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Name'}|[{'type',197,'name',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Flag'}|[{'type',198,'union',[{'paren_type',198,[{'ann_type',198,[{'var',198,'FileName'}|[{'type',198,'string',[]}]]}]}|[{'atom',198,'false'}]]}]]]]}]]]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'log_to_file',3},[{'type',202,'bounded_fun',[{'type',202,'fun',[{'type',202,'product',[{'var',202,'Name'}|[{'var',202,'Flag'}|[{'var',202,'Timeout'}]]]}|[{'type',202,'union',[{'atom',202,'ok'}|[{'type',202,'tuple',[{'atom',202,'error'}|[{'atom',202,'open_file'}]]}]]}]]}|[[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Name'}|[{'type',203,'name',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Flag'}|[{'type',204,'union',[{'paren_type',204,[{'ann_type',204,[{'var',204,'FileName'}|[{'type',204,'string',[]}]]}]}|[{'atom',204,'false'}]]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Timeout'}|[{'type',205,'timeout',[]}]]]]}]]]]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'statistics',2},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'Name'}|[{'var',209,'Flag'}]]}|[{'type',209,'union',[{'atom',209,'ok'}|[{'type',209,'tuple',[{'atom',209,'ok'}|[{'var',209,'Statistics'}]]}]]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Name'}|[{'type',210,'name',[]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Flag'}|[{'type',211,'union',[{'atom',211,'true'}|[{'atom',211,'false'}|[{'atom',211,'get'}]]]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Statistics'}|[{'type',212,'union',[{'type',212,'list',[{'var',212,'StatisticsTuple'}]}|[{'atom',212,'no_statistics'}]]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'StatisticsTuple'}|[{'type',213,'union',[{'type',213,'tuple',[{'atom',213,'start_time'}|[{'var',213,'DateTime1'}]]}|[{'type',214,'tuple',[{'atom',214,'current_time'}|[{'var',214,'DateTime2'}]]}|[{'type',215,'tuple',[{'atom',215,'reductions'}|[{'type',215,'non_neg_integer',[]}]]}|[{'type',216,'tuple',[{'atom',216,'messages_in'}|[{'type',216,'non_neg_integer',[]}]]}|[{'type',217,'tuple',[{'atom',217,'messages_out'}|[{'type',217,'non_neg_integer',[]}]]}]]]]]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'DateTime1'}|[{'remote_type',218,[{'atom',218,'file'}|[{'atom',218,'date_time'}|[[]]]]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'DateTime2'}|[{'remote_type',219,[{'atom',219,'file'}|[{'atom',219,'date_time'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'statistics',3},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'Name'}|[{'var',223,'Flag'}|[{'var',223,'Timeout'}]]]}|[{'type',223,'union',[{'atom',223,'ok'}|[{'type',223,'tuple',[{'atom',223,'ok'}|[{'var',223,'Statistics'}]]}]]}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Name'}|[{'type',224,'name',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Flag'}|[{'type',225,'union',[{'atom',225,'true'}|[{'atom',225,'false'}|[{'atom',225,'get'}]]]}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'Statistics'}|[{'type',226,'union',[{'type',226,'list',[{'var',226,'StatisticsTuple'}]}|[{'atom',226,'no_statistics'}]]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'StatisticsTuple'}|[{'type',227,'union',[{'type',227,'tuple',[{'atom',227,'start_time'}|[{'var',227,'DateTime1'}]]}|[{'type',228,'tuple',[{'atom',228,'current_time'}|[{'var',228,'DateTime2'}]]}|[{'type',229,'tuple',[{'atom',229,'reductions'}|[{'type',229,'non_neg_integer',[]}]]}|[{'type',230,'tuple',[{'atom',230,'messages_in'}|[{'type',230,'non_neg_integer',[]}]]}|[{'type',231,'tuple',[{'atom',231,'messages_out'}|[{'type',231,'non_neg_integer',[]}]]}]]]]]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'DateTime1'}|[{'remote_type',232,[{'atom',232,'file'}|[{'atom',232,'date_time'}|[[]]]]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'DateTime2'}|[{'remote_type',233,[{'atom',233,'file'}|[{'atom',233,'date_time'}|[[]]]]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Timeout'}|[{'type',234,'timeout',[]}]]]]}]]]]]]]]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'no_debug',1},[{'type',238,'bounded_fun',[{'type',238,'fun',[{'type',238,'product',[{'var',238,'Name'}]}|[{'atom',238,'ok'}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Name'}|[{'type',239,'name',[]}]]]]}]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'no_debug',2},[{'type',242,'bounded_fun',[{'type',242,'fun',[{'type',242,'product',[{'var',242,'Name'}|[{'var',242,'Timeout'}]]}|[{'atom',242,'ok'}]]}|[[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Name'}|[{'type',243,'name',[]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Timeout'}|[{'type',244,'timeout',[]}]]]]}]]]]}]}],
		%% Line 247
		'spec' =
		    %% Line 247
		    [{{'install',2},[{'type',247,'bounded_fun',[{'type',247,'fun',[{'type',247,'product',[{'var',247,'Name'}|[{'var',247,'FuncSpec'}]]}|[{'atom',247,'ok'}]]}|[[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'Name'}|[{'type',248,'name',[]}]]]]}|[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'FuncSpec'}|[{'type',249,'tuple',[{'var',249,'Func'}|[{'var',249,'FuncState'}]]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Func'}|[{'type',250,'dbg_fun',[]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'FuncState'}|[{'type',251,'term',[]}]]]]}]]]]]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'install',3},[{'type',255,'bounded_fun',[{'type',255,'fun',[{'type',255,'product',[{'var',255,'Name'}|[{'var',255,'FuncSpec'}|[{'var',255,'Timeout'}]]]}|[{'atom',255,'ok'}]]}|[[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Name'}|[{'type',256,'name',[]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'FuncSpec'}|[{'type',257,'tuple',[{'var',257,'Func'}|[{'var',257,'FuncState'}]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Func'}|[{'type',258,'dbg_fun',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'FuncState'}|[{'type',259,'term',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Timeout'}|[{'type',260,'timeout',[]}]]]]}]]]]]]]}]}],
		%% Line 264
		'spec' =
		    %% Line 264
		    [{{'remove',2},[{'type',264,'bounded_fun',[{'type',264,'fun',[{'type',264,'product',[{'var',264,'Name'}|[{'var',264,'Func'}]]}|[{'atom',264,'ok'}]]}|[[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Name'}|[{'type',265,'name',[]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Func'}|[{'type',266,'dbg_fun',[]}]]]]}]]]]}]}],
		%% Line 270
		'spec' =
		    %% Line 270
		    [{{'remove',3},[{'type',270,'bounded_fun',[{'type',270,'fun',[{'type',270,'product',[{'var',270,'Name'}|[{'var',270,'Func'}|[{'var',270,'Timeout'}]]]}|[{'atom',270,'ok'}]]}|[[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Name'}|[{'type',271,'name',[]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Func'}|[{'type',272,'dbg_fun',[]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Timeout'}|[{'type',273,'timeout',[]}]]]]}]]]]]}]}],
		%% Line 317
		'spec' =
		    %% Line 317
		    [{{'handle_system_msg',6},[{'type',317,'bounded_fun',[{'type',317,'fun',[{'type',317,'product',[{'var',317,'Msg'}|[{'var',317,'From'}|[{'var',317,'Parent'}|[{'var',317,'Module'}|[{'var',317,'Debug'}|[{'var',317,'Misc'}]]]]]]}|[{'type',318,'no_return',[]}]]}|[[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Msg'}|[{'type',319,'term',[]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'From'}|[{'type',320,'tuple',[{'type',320,'pid',[]}|[{'ann_type',320,[{'var',320,'Tag'}|[{'var',320,'_'}]]}]]}]]]]}|[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Parent'}|[{'type',321,'pid',[]}]]]]}|[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Module'}|[{'type',322,'module',[]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Debug'}|[{'type',323,'list',[{'type',323,'dbg_opt',[]}]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'Misc'}|[{'type',324,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 347
		'spec' =
		    %% Line 347
		    [{{'handle_debug',4},[{'type',347,'bounded_fun',[{'type',347,'fun',[{'type',347,'product',[{'var',347,'Debug'}|[{'var',347,'FormFunc'}|[{'var',347,'Extra'}|[{'var',347,'Event'}]]]]}|[{'type',347,'list',[{'type',347,'dbg_opt',[]}]}]]}|[[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'Debug'}|[{'type',348,'list',[{'type',348,'dbg_opt',[]}]}]]]]}|[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'FormFunc'}|[{'type',349,'dbg_fun',[]}]]]]}|[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Extra'}|[{'type',350,'term',[]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'Event'}|[{'type',351,'system_event',[]}]]]]}]]]]]]}]}],
		%% Line 563
		'spec' =
		    %% Line 563
		    [{{'get_debug',3},[{'type',563,'bounded_fun',[{'type',563,'fun',[{'type',563,'product',[{'var',563,'Item'}|[{'var',563,'Debug'}|[{'var',563,'Default'}]]]}|[{'type',563,'term',[]}]]}|[[{'type',564,'constraint',[{'atom',564,'is_subtype'}|[[{'var',564,'Item'}|[{'type',564,'union',[{'atom',564,'log'}|[{'atom',564,'statistics'}]]}]]]]}|[{'type',565,'constraint',[{'atom',565,'is_subtype'}|[[{'var',565,'Debug'}|[{'type',565,'list',[{'type',565,'dbg_opt',[]}]}]]]]}|[{'type',566,'constraint',[{'atom',566,'is_subtype'}|[[{'var',566,'Default'}|[{'type',566,'term',[]}]]]]}]]]]]}]}],
		%% Line 577
		'spec' =
		    %% Line 577
		    [{{'print_log',1},[{'type',577,'bounded_fun',[{'type',577,'fun',[{'type',577,'product',[{'var',577,'Debug'}]}|[{'atom',577,'ok'}]]}|[[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Debug'}|[{'type',578,'list',[{'type',578,'dbg_opt',[]}]}]]]]}]]]}]}],
		%% Line 601
		'spec' =
		    %% Line 601
		    [{{'debug_options',1},[{'type',601,'bounded_fun',[{'type',601,'fun',[{'type',601,'product',[{'var',601,'Options'}]}|[{'type',601,'list',[{'type',601,'dbg_opt',[]}]}]]}|[[{'type',602,'constraint',[{'atom',602,'is_subtype'}|[[{'var',602,'Options'}|[{'type',602,'list',[{'var',602,'Opt'}]}]]]]}|[{'type',603,'constraint',[{'atom',603,'is_subtype'}|[[{'var',603,'Opt'}|[{'type',603,'union',[{'atom',603,'trace'}|[{'atom',604,'log'}|[{'type',605,'tuple',[{'atom',605,'log'}|[{'type',605,'pos_integer',[]}]]}|[{'atom',606,'statistics'}|[{'type',607,'tuple',[{'atom',607,'log_to_file'}|[{'var',607,'FileName'}]]}|[{'type',608,'tuple',[{'atom',608,'install'}|[{'var',608,'FuncSpec'}]]}]]]]]]}]]]]}|[{'type',609,'constraint',[{'atom',609,'is_subtype'}|[[{'var',609,'FileName'}|[{'remote_type',609,[{'atom',609,'file'}|[{'atom',609,'name'}|[[]]]]}]]]]}|[{'type',610,'constraint',[{'atom',610,'is_subtype'}|[[{'var',610,'FuncSpec'}|[{'type',610,'tuple',[{'var',610,'Func'}|[{'var',610,'FuncState'}]]}]]]]}|[{'type',611,'constraint',[{'atom',611,'is_subtype'}|[[{'var',611,'Func'}|[{'type',611,'dbg_fun',[]}]]]]}|[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'FuncState'}|[{'type',612,'term',[]}]]]]}]]]]]]]]}]}]]
'suspend'/1 =
    %% Line 65
    fun (_cor0) ->
	apply 'send_system_msg'/2
	    (_cor0, 'suspend')
'suspend'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	apply 'send_system_msg'/3
	    (_cor1, 'suspend', _cor0)
'resume'/1 =
    %% Line 74
    fun (_cor0) ->
	apply 'send_system_msg'/2
	    (_cor0, 'resume')
'resume'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	apply 'send_system_msg'/3
	    (_cor1, 'resume', _cor0)
'get_status'/1 =
    %% Line 89
    fun (_cor0) ->
	apply 'send_system_msg'/2
	    (_cor0, 'get_status')
'get_status'/2 =
    %% Line 100
    fun (_cor1,_cor0) ->
	apply 'send_system_msg'/3
	    (_cor1, 'get_status', _cor0)
'get_state'/1 =
    %% Line 105
    fun (_cor0) ->
	%% Line 106
	case apply 'send_system_msg'/2
		 (_cor0, 'get_state') of
	  %% Line 107
	  <{'error',Reason}> when 'true' ->
	      call 'erlang':'error'
		  (Reason)
	  %% Line 108
	  <State> when 'true' ->
	      State
	end
'get_state'/2 =
    %% Line 115
    fun (_cor1,_cor0) ->
	%% Line 116
	case apply 'send_system_msg'/3
		 (_cor1, 'get_state', _cor0) of
	  %% Line 117
	  <{'error',Reason}> when 'true' ->
	      call 'erlang':'error'
		  (Reason)
	  %% Line 118
	  <State> when 'true' ->
	      State
	end
'replace_state'/2 =
    %% Line 125
    fun (_cor1,_cor0) ->
	%% Line 126
	case apply 'send_system_msg'/2
		 (_cor1, {'replace_state',_cor0}) of
	  %% Line 127
	  <{'error',Reason}> when 'true' ->
	      call 'erlang':'error'
		  (Reason)
	  %% Line 128
	  <State> when 'true' ->
	      State
	end
'replace_state'/3 =
    %% Line 136
    fun (_cor2,_cor1,_cor0) ->
	%% Line 137
	case apply 'send_system_msg'/3
		 (_cor2, {'replace_state',_cor1}, _cor0) of
	  %% Line 138
	  <{'error',Reason}> when 'true' ->
	      call 'erlang':'error'
		  (Reason)
	  %% Line 139
	  <State> when 'true' ->
	      State
	end
'change_code'/4 =
    %% Line 148
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 149
	apply 'send_system_msg'/2
	    (_cor3, {'change_code',_cor2,_cor1,_cor0})
'change_code'/5 =
    %% Line 159
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 160
	apply 'send_system_msg'/3
	    (_cor4, {'change_code',_cor3,_cor2,_cor1}, _cor0)
'log'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	%% Line 172
	apply 'send_system_msg'/2
	    (_cor1, {'debug',{'log',_cor0}})
'log'/3 =
    %% Line 180
    fun (_cor2,_cor1,_cor0) ->
	%% Line 181
	apply 'send_system_msg'/3
	    (_cor2, {'debug',{'log',_cor1}}, _cor0)
'trace'/2 =
    %% Line 186
    fun (_cor1,_cor0) ->
	%% Line 187
	apply 'send_system_msg'/2
	    (_cor1, {'debug',{'trace',_cor0}})
'trace'/3 =
    %% Line 193
    fun (_cor2,_cor1,_cor0) ->
	%% Line 194
	apply 'send_system_msg'/3
	    (_cor2, {'debug',{'trace',_cor1}}, _cor0)
'log_to_file'/2 =
    %% Line 199
    fun (_cor1,_cor0) ->
	%% Line 200
	apply 'send_system_msg'/2
	    (_cor1, {'debug',{'log_to_file',_cor0}})
'log_to_file'/3 =
    %% Line 206
    fun (_cor2,_cor1,_cor0) ->
	%% Line 207
	apply 'send_system_msg'/3
	    (_cor2, {'debug',{'log_to_file',_cor1}}, _cor0)
'statistics'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	%% Line 221
	apply 'send_system_msg'/2
	    (_cor1, {'debug',{'statistics',_cor0}})
'statistics'/3 =
    %% Line 235
    fun (_cor2,_cor1,_cor0) ->
	%% Line 236
	apply 'send_system_msg'/3
	    (_cor2, {'debug',{'statistics',_cor1}}, _cor0)
'no_debug'/1 =
    %% Line 240
    fun (_cor0) ->
	apply 'send_system_msg'/2
	    (_cor0, {'debug','no_debug'})
'no_debug'/2 =
    %% Line 245
    fun (_cor1,_cor0) ->
	apply 'send_system_msg'/3
	    (_cor1, {'debug','no_debug'}, _cor0)
'install'/2 =
    %% Line 252
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{Func,FuncState}> when 'true' ->
	      %% Line 253
	      apply 'send_system_msg'/2
		  (Name, {'debug',{'install',{Func,FuncState}}})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'install',2}}] )
	    -| ['compiler_generated'] )
	end
'install'/3 =
    %% Line 261
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,{Func,FuncState},Timeout> when 'true' ->
	      %% Line 262
	      apply 'send_system_msg'/3
		  (Name, {'debug',{'install',{Func,FuncState}}}, Timeout)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'install',3}}] )
	    -| ['compiler_generated'] )
	end
'remove'/2 =
    %% Line 267
    fun (_cor1,_cor0) ->
	%% Line 268
	apply 'send_system_msg'/2
	    (_cor1, {'debug',{'remove',_cor0}})
'remove'/3 =
    %% Line 274
    fun (_cor2,_cor1,_cor0) ->
	%% Line 275
	apply 'send_system_msg'/3
	    (_cor2, {'debug',{'remove',_cor1}}, _cor0)
'send_system_msg'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 282
		call 'gen':'call'
		    (_cor1, 'system', _cor0)
	in  %% Line 282
	    case _cor2 of
	      %% Line 283
	      <{'ok',Res}> when 'true' ->
		  Res
	      %% Line 284
	      <{'EXIT',Reason}> when 'true' ->
		  let <_cor3> =
		      apply 'mfa'/2
			  (_cor1, _cor0)
		  in  call 'erlang':'exit'
			  ({Reason,_cor3})
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'send_system_msg'/3 =
    %% Line 287
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 288
		call 'gen':'call'
		    (_cor2, 'system', _cor1, _cor0)
	in  %% Line 288
	    case _cor3 of
	      %% Line 289
	      <{'ok',Res}> when 'true' ->
		  Res
	      %% Line 290
	      <{'EXIT',Reason}> when 'true' ->
		  let <_cor4> =
		      apply 'mfa'/3
			  (_cor2, _cor1, _cor0)
		  in  call 'erlang':'exit'
			  ({Reason,_cor4})
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'mfa'/2 =
    %% Line 293
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{'debug',{Func,Arg2}}> when 'true' ->
	      %% Line 294
	      {'sys',Func,[Name|[Arg2|[]]]}
	  %% Line 295
	  <Name,{'change_code',Mod,Vsn,Extra}> when 'true' ->
	      %% Line 296
	      {'sys','change_code',[Name|[Mod|[Vsn|[Extra|[]]]]]}
	  %% Line 297
	  <Name,Atom> when 'true' ->
	      %% Line 298
	      {'sys',Atom,[Name|[]]}
	end
'mfa'/3 =
    %% Line 300
    fun (_cor2,_cor1,_cor0) ->
	%% Line 301
	case apply 'mfa'/2
		 (_cor2, _cor1) of
	  <{M,F,A}> when 'true' ->
	      let <_cor4> =
		  %% Line 302
		  call 'erlang':'++'
		      (A, [_cor0|[]])
	      in  %% Line 302
		  {M,F,_cor4}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'handle_system_msg'/6 =
    %% Line 325
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 326
	apply 'handle_system_msg'/8
	    ('running', _cor5, _cor4, _cor3, _cor2, _cor1, _cor0, 'false')
'handle_system_msg'/7 =
    %% Line 328
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 329
	apply 'handle_system_msg'/8
	    ('running', _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'handle_system_msg'/8 =
    %% Line 331
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 332
	case apply 'do_cmd'/6
		 (_cor7, _cor6, _cor4, _cor3, _cor2, _cor1) of
	  %% Line 333
	  <{'suspended',Reply,NDebug,NMisc}> when 'true' ->
	      let <_X_> =
		  %% Line 334
		  ( call 'gen':'reply'
			(_cor5, Reply)
		    -| ['result_not_wanted'] )
	      in  %% Line 335
		  apply 'suspend_loop'/6
		      ('suspended', _cor4, _cor3, NDebug, NMisc, _cor0)
	  %% Line 336
	  <{'running',Reply,NDebug,NMisc}> when 'true' ->
	      let <_X_> =
		  %% Line 337
		  ( call 'gen':'reply'
			(_cor5, Reply)
		    -| ['result_not_wanted'] )
	      in  %% Line 338
		  call _cor3:'system_continue'
		      (_cor4, NDebug, NMisc)
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'handle_debug'/4 =
    %% Line 352
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'trace','true'}|T],FormFunc,State,Event> when 'true' ->
	      do  %% Line 353
		  apply 'print_event'/1
		      ({Event,State,FormFunc})
		  let <_cor4> =
		      %% Line 354
		      apply 'handle_debug'/4
			  (T, FormFunc, State, Event)
		  in  %% Line 354
		      [{'trace','true'}|_cor4]
	  %% Line 355
	  <[{'log',{N,LogData}}|T],FormFunc,State,Event> when 'true' ->
	      let <_cor5> =
		  %% Line 356
		  apply 'trim'/2
		      (N, LogData)
	      in  let <NLogData> =
		      %% Line 356
		      [{Event,State,FormFunc}|_cor5]
		  in  let <_cor7> =
			  %% Line 357
			  apply 'handle_debug'/4
			      (T, FormFunc, State, Event)
		      in  %% Line 357
			  [{'log',{N,NLogData}}|_cor7]
	  %% Line 358
	  <[{'log_to_file',Fd}|T],FormFunc,State,Event> when 'true' ->
	      do  %% Line 359
		  apply 'print_event'/2
		      (Fd, {Event,State,FormFunc})
		  let <_cor8> =
		      %% Line 360
		      apply 'handle_debug'/4
			  (T, FormFunc, State, Event)
		  in  %% Line 360
		      [{'log_to_file',Fd}|_cor8]
	  %% Line 361
	  <[{'statistics',StatData}|T],FormFunc,State,Event> when 'true' ->
	      let <NStatData> =
		  %% Line 362
		  apply 'stat'/2
		      (Event, StatData)
	      in  let <_cor10> =
		      %% Line 363
		      apply 'handle_debug'/4
			  (T, FormFunc, State, Event)
		  in  %% Line 363
		      [{'statistics',NStatData}|_cor10]
	  %% Line 364
	  <[{Func,FuncState}|T],FormFunc,State,Event> when 'true' ->
	      let <_cor11> =
		  catch
		      %% Line 365
		      apply Func
			  (FuncState, Event, State)
	      in  %% Line 365
		  case _cor11 of
		    %% Line 366
		    <'done'> when 'true' ->
			apply 'handle_debug'/4
			    (T, FormFunc, State, Event)
		    %% Line 367
		    <{'EXIT',_cor18}> when 'true' ->
			apply 'handle_debug'/4
			    (T, FormFunc, State, Event)
		    %% Line 368
		    <NFuncState> when 'true' ->
			let <_cor12> =
			    %% Line 369
			    apply 'handle_debug'/4
				(T, FormFunc, State, Event)
			in  %% Line 369
			    [{Func,NFuncState}|_cor12]
		  end
	  %% Line 371
	  <[],_X_FormFunc,_X_State,_X_Event> when 'true' ->
	      %% Line 372
	      []
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'handle_debug',4}}] )
	    -| ['compiler_generated'] )
	end
'suspend_loop'/6 =
    %% Line 378
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 379
	case _cor0 of
	  %% Line 380
	  <'true'> when 'true' ->
	      %% Line 381
	      apply 'suspend_loop_hib'/6
		  (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 382
	  <_cor13> when 'true' ->
	      %% Line 383
	      receive
		%% Line 384
		<{'system',From,Msg}> when 'true' ->
		    %% Line 385
		    apply 'handle_system_msg'/8
			(_cor5, Msg, From, _cor4, _cor3, _cor2, _cor1, _cor0)
		%% Line 386
		<{'EXIT',_cor14,Reason}>
		    when call 'erlang':'=:='
			  (_cor14,
			   _cor4) ->
		    %% Line 387
		    call _cor3:'system_terminate'
			(Reason, _cor4, _cor2, _cor1)
	      after 'infinity' ->
		'true'
	end
'suspend_loop_hib'/6 =
    %% Line 391
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 392
	receive
	  %% Line 393
	  <{'system',From,Msg}> when 'true' ->
	      %% Line 394
	      apply 'handle_system_msg'/8
		  (_cor5, Msg, From, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 395
	  <{'EXIT',_cor12,Reason}>
	      when call 'erlang':'=:='
		    (_cor12,
		     _cor4) ->
	      %% Line 396
	      call _cor3:'system_terminate'
		  (Reason, _cor4, _cor2, _cor1)
	after %% Line 397
	      0 ->
	  %% Line 398
	  call 'proc_lib':'hibernate'
	      ('sys', 'suspend_loop_hib', [_cor5|[_cor4|[_cor3|%% Line 399
							       [_cor2|[_cor1|[_cor0|[]]]]]]])
'do_cmd'/6 =
    %% Line 403
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor17,'suspend',_X_Parent,_X_Mod,Debug,Misc> when 'true' ->
	      %% Line 404
	      {'suspended','ok',Debug,Misc}
	  %% Line 405
	  <_cor18,'resume',_X_Parent,_X_Mod,Debug,Misc> when 'true' ->
	      %% Line 406
	      {'running','ok',Debug,Misc}
	  %% Line 407
	  <SysState,'get_state',_X_Parent,Mod,Debug,Misc> when 'true' ->
	      let <_cor6> =
		  %% Line 408
		  apply 'do_get_state'/2
		      (Mod, Misc)
	      in  %% Line 408
		  {SysState,_cor6,Debug,Misc}
	  %% Line 409
	  <SysState,{'replace_state',StateFun},_X_Parent,Mod,Debug,Misc> when 'true' ->
	      %% Line 410
	      case apply 'do_replace_state'/3
		       (StateFun, Mod, Misc) of
		<{Res,NMisc}> when 'true' ->
		    %% Line 411
		    {SysState,Res,Debug,NMisc}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 412
	  <SysState,'get_status',Parent,Mod,Debug,Misc> when 'true' ->
	      let <Res> =
		  %% Line 413
		  apply 'get_status'/5
		      (SysState, Parent, Mod, Debug, Misc)
	      in  %% Line 414
		  {SysState,Res,Debug,Misc}
	  %% Line 415
	  <SysState,{'debug',What},_X_Parent,_X_Mod,Debug,Misc> when 'true' ->
	      %% Line 416
	      case apply 'debug_cmd'/2
		       (What, Debug) of
		<{Res,NDebug}> when 'true' ->
		    %% Line 417
		    {SysState,Res,NDebug,Misc}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 418
	  <'suspended',{'change_code',Module,Vsn,Extra},_X_Parent,%% Line 419
								  Mod,%% Line 419
								      Debug,%% Line 419
									    Misc> when 'true' ->
	      %% Line 420
	      case apply 'do_change_code'/5
		       (Mod, Module, Vsn, Extra, Misc) of
		<{Res,NMisc}> when 'true' ->
		    %% Line 421
		    {'suspended',Res,Debug,NMisc}
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 422
	  <SysState,Other,_X_Parent,_X_Mod,Debug,Misc> when 'true' ->
	      %% Line 423
	      {SysState,{'error',{'unknown_system_msg',Other}},Debug,Misc}
	end
'do_get_state'/2 =
    %% Line 425
    fun (_cor1,_cor0) ->
	%% Line 426
	case call 'erlang':'function_exported'
		 (_cor1, 'system_get_state', 1) of
	  %% Line 427
	  <'true'> when 'true' ->
	      %% Line 428
	      try
		  %% Line 429
		  case call _cor1:'system_get_state'
			   (_cor0) of
		    <{'ok',State}> when 'true' ->
			%% Line 430
			State
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      of <_cor3> ->
		  _cor3
	      catch <_cor6,_cor5,_cor4> ->
		  %% Line 433
		  {'error',{'callback_failed',{_cor1,'system_get_state'},{_cor6,_cor5}}}
	  %% Line 435
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'do_replace_state'/3 =
    %% Line 439
    fun (_cor2,_cor1,_cor0) ->
	%% Line 440
	case call 'erlang':'function_exported'
		 (_cor1, 'system_replace_state', 2) of
	  %% Line 441
	  <'true'> when 'true' ->
	      %% Line 442
	      try
		  %% Line 443
		  case call _cor1:'system_replace_state'
			   (_cor2, _cor0) of
		    <{'ok',State,NMisc}> when 'true' ->
			%% Line 444
			{State,NMisc}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      of <_cor4> ->
		  _cor4
	      catch <_cor7,_cor6,_cor5> ->
		  %% Line 447
		  {{'error',{'callback_failed',{_cor1,'system_replace_state'},{_cor7,_cor6}}},_cor0}
	  %% Line 449
	  <'false'> when 'true' ->
	      %% Line 450
	      try
		  let <NMisc> =
		      %% Line 451
		      apply _cor2
			  (_cor0)
		  in  %% Line 452
		      {NMisc,NMisc}
	      of <_cor9> ->
		  _cor9
	      catch <_cor12,_cor11,_cor10> ->
		  %% Line 455
		  {{'error',{'callback_failed',_cor2,{_cor12,_cor11}}},_cor0}
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'get_status'/5 =
    %% Line 459
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <PDict> =
	    %% Line 460
	    call 'erlang':'get'
		()
	in  let <_cor8> =
		%% Line 462
		case call 'erlang':'function_exported'
			 (_cor2, 'format_status', 2) of
		  %% Line 463
		  <'true'> when 'true' ->
		      let <FmtArgs> =
			  %% Line 464
			  [PDict|[_cor4|[_cor3|[_cor1|[_cor0|[]]]]]]
		      in  %% Line 465
			  call _cor2:'format_status'
			      ('normal', FmtArgs)
		  %% Line 466
		  <_cor16> when 'true' ->
		      _cor0
		end
	    in  let <_cor10> =
		    %% Line 469
		    call 'erlang':'self'
			()
		in  %% Line 469
		    {'status',_cor10,{'module',_cor2},%% Line 470
						      [PDict|[_cor4|[_cor3|[_cor1|[_cor8|[]]]]]]}
'debug_cmd'/2 =
    %% Line 479
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'trace','true'},Debug> when 'true' ->
	      let <_cor2> =
		  %% Line 480
		  apply 'install_debug'/3
		      ('trace', 'true', Debug)
	      in  %% Line 480
		  {'ok',_cor2}
	  %% Line 481
	  <{'trace','false'},Debug> when 'true' ->
	      let <_cor3> =
		  %% Line 482
		  apply 'remove_debug'/2
		      ('trace', Debug)
	      in  %% Line 482
		  {'ok',_cor3}
	  %% Line 483
	  <{'log','true'},Debug> when 'true' ->
	      %% Line 484
	      case apply 'get_debug'/3
		       ('log', Debug, {0,[]}) of
		<{_X_N,Logs}> when 'true' ->
		    let <_cor5> =
			%% Line 485
			apply 'trim'/2
			    (10, Logs)
		    in  let <_cor6> =
			    %% Line 485
			    apply 'install_debug'/3
				('log', {10,_cor5}, Debug)
			in  %% Line 485
			    {'ok',_cor6}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 486
	  <{'log',{'true',N}},Debug>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor8> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 487
	      case apply 'get_debug'/3
		       ('log', Debug, {0,[]}) of
		<{_X_N,Logs}> when 'true' ->
		    let <_cor10> =
			%% Line 488
			apply 'trim'/2
			    (N, Logs)
		    in  let <_cor11> =
			    %% Line 488
			    apply 'install_debug'/3
				('log', {N,_cor10}, Debug)
			in  %% Line 488
			    {'ok',_cor11}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 489
	  <{'log','false'},Debug> when 'true' ->
	      let <_cor12> =
		  %% Line 490
		  apply 'remove_debug'/2
		      ('log', Debug)
	      in  %% Line 490
		  {'ok',_cor12}
	  %% Line 491
	  <{'log','print'},Debug> when 'true' ->
	      do  %% Line 492
		  apply 'print_log'/1
		      (Debug)
		  %% Line 493
		  {'ok',Debug}
	  %% Line 494
	  <{'log','get'},Debug> when 'true' ->
	      %% Line 495
	      case apply 'get_debug'/3
		       ('log', Debug, {0,[]}) of
		<{_X_N,Logs}> when 'true' ->
		    let <_cor14> =
			%% Line 496
			call 'lists':'reverse'
			    (Logs)
		    in  %% Line 496
			{{'ok',_cor14},Debug}
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 497
	  <{'log_to_file','false'},Debug> when 'true' ->
	      let <NDebug> =
		  %% Line 498
		  apply 'close_log_file'/1
		      (Debug)
	      in  %% Line 499
		  {'ok',NDebug}
	  %% Line 500
	  <{'log_to_file',FileName},Debug> when 'true' ->
	      let <NDebug> =
		  %% Line 501
		  apply 'close_log_file'/1
		      (Debug)
	      in  %% Line 502
		  case call 'file':'open'
			   (FileName, ['write']) of
		    %% Line 503
		    <{'ok',Fd}> when 'true' ->
			let <_cor17> =
			    %% Line 504
			    apply 'install_debug'/3
				('log_to_file', Fd, NDebug)
			in  %% Line 504
			    {'ok',_cor17}
		    %% Line 505
		    <_X_Error> when 'true' ->
			%% Line 506
			{{'error','open_file'},NDebug}
		  end
	  %% Line 508
	  <{'statistics','true'},Debug> when 'true' ->
	      let <_cor19> =
		  %% Line 509
		  apply 'init_stat'/0
		      ()
	      in  let <_cor20> =
		      %% Line 509
		      apply 'install_debug'/3
			  ('statistics', _cor19, Debug)
		  in  %% Line 509
		      {'ok',_cor20}
	  %% Line 510
	  <{'statistics','false'},Debug> when 'true' ->
	      let <_cor21> =
		  %% Line 511
		  apply 'remove_debug'/2
		      ('statistics', Debug)
	      in  %% Line 511
		  {'ok',_cor21}
	  %% Line 512
	  <{'statistics','get'},Debug> when 'true' ->
	      let <_cor22> =
		  %% Line 513
		  apply 'get_debug'/3
		      ('statistics', Debug, [])
	      in  let <_cor23> =
		      %% Line 513
		      apply 'get_stat'/1
			  (_cor22)
		  in  %% Line 513
		      {{'ok',_cor23},Debug}
	  %% Line 514
	  <'no_debug',Debug> when 'true' ->
	      do  %% Line 515
		  apply 'close_log_file'/1
		      (Debug)
		  %% Line 516
		  {'ok',[]}
	  %% Line 517
	  <{'install',{Func,FuncState}},Debug> when 'true' ->
	      let <_cor24> =
		  %% Line 518
		  apply 'install_debug'/3
		      (Func, FuncState, Debug)
	      in  %% Line 518
		  {'ok',_cor24}
	  %% Line 519
	  <{'remove',Func},Debug> when 'true' ->
	      let <_cor25> =
		  %% Line 520
		  apply 'remove_debug'/2
		      (Func, Debug)
	      in  %% Line 520
		  {'ok',_cor25}
	  %% Line 521
	  <_X_Unknown,Debug> when 'true' ->
	      %% Line 522
	      {'unknown_debug',Debug}
	end
'do_change_code'/5 =
    %% Line 525
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    catch
		%% Line 526
		call _cor4:'system_code_change'
		    (_cor0, _cor3, _cor2, _cor1)
	in  %% Line 526
	    case _cor5 of
	      %% Line 527
	      <{'ok',NMisc}> when 'true' ->
		  {'ok',NMisc}
	      %% Line 528
	      <Else> when 'true' ->
		  {{'error',Else},_cor0}
	    end
'print_event'/1 =
    %% Line 531
    fun (_cor0) ->
	apply 'print_event'/2
	    ('standard_io', _cor0)
'print_event'/2 =
    %% Line 533
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dev,{Event,State,FormFunc}> when 'true' ->
	      %% Line 534
	      apply FormFunc
		  (Dev, Event, State)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'print_event',2}}] )
	    -| ['compiler_generated'] )
	end
'init_stat'/0 =
    %% Line 536
    fun () ->
	let <_cor2> =
	    call 'erlang':'localtime'
		()
	in  let <_cor0> =
		call 'erlang':'self'
		    ()
	    in  let <_cor1> =
		    call 'erlang':'process_info'
			(_cor0, 'reductions')
		in  {_cor2,_cor1,0,0}
'get_stat'/1 =
    %% Line 538
    fun (_cor0) ->
	case _cor0 of
	  <{Time,{'reductions',Reds},In,Out}> when 'true' ->
	      let <_cor1> =
		  %% Line 539
		  call 'erlang':'self'
		      ()
	      in  %% Line 539
		  case call 'erlang':'process_info'
			   (_cor1, 'reductions') of
		    <{'reductions',Reds2}> when 'true' ->
			let <_cor3> =
			    %% Line 540
			    call 'erlang':'localtime'
				()
			in  let <_cor4> =
				%% Line 541
				call 'erlang':'-'
				    (Reds2, Reds)
			    in  %% Line 540
				[{'start_time',Time}|[{'current_time',_cor3}|%% Line 541
									     [{'reductions',_cor4}|[{'messages_in',In}|[{'messages_out',Out}|[]]]]]]
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 542
	  <_cor6> when 'true' ->
	      %% Line 543
	      'no_statistics'
	end
'stat'/2 =
    %% Line 545
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'in',_X_Msg},{Time,Reds,In,Out}> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'+'
		      (In, 1)
	      in  {Time,Reds,_cor2,Out}
	  %% Line 546
	  <{'in',_X_Msg,_X_From},{Time,Reds,In,Out}> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'+'
		      (In, 1)
	      in  {Time,Reds,_cor3,Out}
	  %% Line 547
	  <{'out',_X_Msg,_X_To},{Time,Reds,In,Out}> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'+'
		      (Out, 1)
	      in  {Time,Reds,In,_cor4}
	  %% Line 548
	  <_cor7,StatData> when 'true' ->
	      StatData
	end
'trim'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 551
	    call 'erlang':'-'
		(_cor1, 1)
	in  %% Line 551
	    call 'lists':'sublist'
		(_cor0, 1, _cor2)
'install_debug'/3 =
    %% Line 556
    fun (_cor2,_cor1,_cor0) ->
	%% Line 557
	case apply 'get_debug2'/3
		 (_cor2, _cor0, 'undefined') of
	  %% Line 558
	  <'undefined'> when 'true' ->
	      [{_cor2,_cor1}|_cor0]
	  %% Line 559
	  <_cor7> when 'true' ->
	      _cor0
	end
'remove_debug'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	call 'lists':'keydelete'
	    (_cor1, 1, _cor0)
'get_debug'/3 =
    %% Line 567
    fun (_cor2,_cor1,_cor0) ->
	%% Line 568
	apply 'get_debug2'/3
	    (_cor2, _cor1, _cor0)
'get_debug2'/3 =
    %% Line 571
    fun (_cor2,_cor1,_cor0) ->
	%% Line 572
	case call 'lists':'keysearch'
		 (_cor2, 1, _cor1) of
	  %% Line 573
	  <{'value',{_cor7,Data}}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor2) ->
	      Data
	  %% Line 574
	  <_cor8> when 'true' ->
	      _cor0
	end
'print_log'/1 =
    %% Line 579
    fun (_cor0) ->
	%% Line 580
	case apply 'get_debug'/3
		 ('log', _cor0, {0,[]}) of
	  <{_X_N,Logs}> when 'true' ->
	      let <_cor2> =
		  %% Line 582
		  call 'lists':'reverse'
		      (Logs)
	      in  %% Line 581
		  call 'lists':'foreach'
		      (( 'print_event'/1
			 -| [{'id',{0,0,'-print_log/1-fun-0-'}}] ), _cor2)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'close_log_file'/1 =
    %% Line 584
    fun (_cor0) ->
	%% Line 585
	case apply 'get_debug2'/3
		 ('log_to_file', _cor0, []) of
	  %% Line 586
	  <[]> when 'true' ->
	      _cor0
	  %% Line 588
	  <Fd> when 'true' ->
	      %% Line 589
	      case call 'file':'close'
		       (Fd) of
		<'ok'> when 'true' ->
		    %% Line 590
		    apply 'remove_debug'/2
			('log_to_file', _cor0)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'debug_options'/1 =
    %% Line 613
    fun (_cor0) ->
	%% Line 614
	apply 'debug_options'/2
	    (_cor0, [])
'debug_options'/2 =
    %% Line 616
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['trace'|T],Debug> when 'true' ->
	      let <_cor2> =
		  %% Line 617
		  apply 'install_debug'/3
		      ('trace', 'true', Debug)
	      in  %% Line 617
		  apply 'debug_options'/2
		      (T, _cor2)
	  %% Line 618
	  <['log'|T],Debug> when 'true' ->
	      let <_cor3> =
		  %% Line 619
		  apply 'install_debug'/3
		      ('log', {10,[]}, Debug)
	      in  %% Line 619
		  apply 'debug_options'/2
		      (T, _cor3)
	  %% Line 620
	  <[{'log',N}|T],Debug>
	      when let <_cor4> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor5> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor6> =
		  %% Line 621
		  apply 'install_debug'/3
		      ('log', {N,[]}, Debug)
	      in  %% Line 621
		  apply 'debug_options'/2
		      (T, _cor6)
	  %% Line 622
	  <['statistics'|T],Debug> when 'true' ->
	      let <_cor7> =
		  %% Line 623
		  apply 'init_stat'/0
		      ()
	      in  let <_cor8> =
		      %% Line 623
		      apply 'install_debug'/3
			  ('statistics', _cor7, Debug)
		  in  %% Line 623
		      apply 'debug_options'/2
			  (T, _cor8)
	  %% Line 624
	  <[{'log_to_file',FileName}|T],Debug> when 'true' ->
	      %% Line 625
	      case call 'file':'open'
		       (FileName, ['write']) of
		%% Line 626
		<{'ok',Fd}> when 'true' ->
		    let <_cor9> =
			%% Line 627
			apply 'install_debug'/3
			    ('log_to_file', Fd, Debug)
		    in  %% Line 627
			apply 'debug_options'/2
			    (T, _cor9)
		%% Line 628
		<_X_Error> when 'true' ->
		    %% Line 629
		    apply 'debug_options'/2
			(T, Debug)
	      end
	  %% Line 631
	  <[{'install',{Func,FuncState}}|T],Debug> when 'true' ->
	      let <_cor11> =
		  %% Line 632
		  apply 'install_debug'/3
		      (Func, FuncState, Debug)
	      in  %% Line 632
		  apply 'debug_options'/2
		      (T, _cor11)
	  %% Line 633
	  <[_cor14|T],Debug> when 'true' ->
	      %% Line 634
	      apply 'debug_options'/2
		  (T, Debug)
	  %% Line 635
	  <[],Debug> when 'true' ->
	      %% Line 636
	      Debug
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'debug_options',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sys')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('sys', _cor0)
end