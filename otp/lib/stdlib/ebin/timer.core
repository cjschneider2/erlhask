module 'timer' ['apply_after'/4,
		'apply_interval'/4,
		'cancel'/1,
		'code_change'/3,
		'exit_after'/2,
		'exit_after'/3,
		'get_status'/0,
		'handle_call'/3,
		'handle_cast'/2,
		'handle_info'/2,
		'hms'/3,
		'hours'/1,
		'init'/1,
		'kill_after'/1,
		'kill_after'/2,
		'minutes'/1,
		'module_info'/0,
		'module_info'/1,
		'now_diff'/2,
		'seconds'/1,
		'send_after'/2,
		'send_after'/3,
		'send_interval'/2,
		'send_interval'/3,
		'sleep'/1,
		'start'/0,
		'start_link'/0,
		'tc'/1,
		'tc'/2,
		'tc'/3,
		'terminate'/2]
    attributes [%% Line 37
		'export_type' =
		    %% Line 37
		    [{'tref',0}],
		%% Line 47
		'opaque' =
		    %% Line 47
		    [{'tref',{'type',47,'tuple',[{'type',47,'integer',[]}|[{'type',47,'reference',[]}]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'time',{'type',48,'non_neg_integer',[]},[]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'apply_after',4},[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'Time'}|[{'var',53,'Module'}|[{'var',53,'Function'}|[{'var',53,'Arguments'}]]]]}|[{'type',54,'union',[{'type',54,'tuple',[{'atom',54,'ok'}|[{'var',54,'TRef'}]]}|[{'type',54,'tuple',[{'atom',54,'error'}|[{'var',54,'Reason'}]]}]]}]]}|[[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Time'}|[{'type',55,'time',[]}]]]]}|[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Module'}|[{'type',56,'module',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Function'}|[{'type',57,'atom',[]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Arguments'}|[{'type',58,'list',[{'type',58,'term',[]}]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'TRef'}|[{'type',59,'tref',[]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Reason'}|[{'type',60,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'send_after',3},[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'Time'}|[{'var',65,'Pid'}|[{'var',65,'Message'}]]]}|[{'type',65,'union',[{'type',65,'tuple',[{'atom',65,'ok'}|[{'var',65,'TRef'}]]}|[{'type',65,'tuple',[{'atom',65,'error'}|[{'var',65,'Reason'}]]}]]}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Time'}|[{'type',66,'time',[]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Pid'}|[{'type',67,'union',[{'type',67,'pid',[]}|[{'paren_type',67,[{'ann_type',67,[{'var',67,'RegName'}|[{'type',67,'atom',[]}]]}]}]]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Message'}|[{'type',68,'term',[]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'TRef'}|[{'type',69,'tref',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Reason'}|[{'type',70,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'send_after',2},[{'type',74,'bounded_fun',[{'type',74,'fun',[{'type',74,'product',[{'var',74,'Time'}|[{'var',74,'Message'}]]}|[{'type',74,'union',[{'type',74,'tuple',[{'atom',74,'ok'}|[{'var',74,'TRef'}]]}|[{'type',74,'tuple',[{'atom',74,'error'}|[{'var',74,'Reason'}]]}]]}]]}|[[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'Time'}|[{'type',75,'time',[]}]]]]}|[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Message'}|[{'type',76,'term',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'TRef'}|[{'type',77,'tref',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Reason'}|[{'type',78,'term',[]}]]]]}]]]]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'exit_after',3},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'Time'}|[{'var',82,'Pid'}|[{'var',82,'Reason1'}]]]}|[{'type',82,'union',[{'type',82,'tuple',[{'atom',82,'ok'}|[{'var',82,'TRef'}]]}|[{'type',82,'tuple',[{'atom',82,'error'}|[{'var',82,'Reason2'}]]}]]}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Time'}|[{'type',83,'time',[]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Pid'}|[{'type',84,'union',[{'type',84,'pid',[]}|[{'paren_type',84,[{'ann_type',84,[{'var',84,'RegName'}|[{'type',84,'atom',[]}]]}]}]]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'TRef'}|[{'type',85,'tref',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Reason1'}|[{'type',86,'term',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Reason2'}|[{'type',87,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'exit_after',2},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'Time'}|[{'var',91,'Reason1'}]]}|[{'type',91,'union',[{'type',91,'tuple',[{'atom',91,'ok'}|[{'var',91,'TRef'}]]}|[{'type',91,'tuple',[{'atom',91,'error'}|[{'var',91,'Reason2'}]]}]]}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Time'}|[{'type',92,'time',[]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'TRef'}|[{'type',93,'tref',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Reason1'}|[{'type',94,'term',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Reason2'}|[{'type',95,'term',[]}]]]]}]]]]]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'kill_after',2},[{'type',99,'bounded_fun',[{'type',99,'fun',[{'type',99,'product',[{'var',99,'Time'}|[{'var',99,'Pid'}]]}|[{'type',99,'union',[{'type',99,'tuple',[{'atom',99,'ok'}|[{'var',99,'TRef'}]]}|[{'type',99,'tuple',[{'atom',99,'error'}|[{'var',99,'Reason2'}]]}]]}]]}|[[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Time'}|[{'type',100,'time',[]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Pid'}|[{'type',101,'union',[{'type',101,'pid',[]}|[{'paren_type',101,[{'ann_type',101,[{'var',101,'RegName'}|[{'type',101,'atom',[]}]]}]}]]}]]]]}|[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'TRef'}|[{'type',102,'tref',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'Reason2'}|[{'type',103,'term',[]}]]]]}]]]]]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'kill_after',1},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'Time'}]}|[{'type',107,'union',[{'type',107,'tuple',[{'atom',107,'ok'}|[{'var',107,'TRef'}]]}|[{'type',107,'tuple',[{'atom',107,'error'}|[{'var',107,'Reason2'}]]}]]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Time'}|[{'type',108,'time',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'TRef'}|[{'type',109,'tref',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Reason2'}|[{'type',110,'term',[]}]]]]}]]]]]}]}],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'apply_interval',4},[{'type',114,'bounded_fun',[{'type',114,'fun',[{'type',114,'product',[{'var',114,'Time'}|[{'var',114,'Module'}|[{'var',114,'Function'}|[{'var',114,'Arguments'}]]]]}|[{'type',115,'union',[{'type',115,'tuple',[{'atom',115,'ok'}|[{'var',115,'TRef'}]]}|[{'type',115,'tuple',[{'atom',115,'error'}|[{'var',115,'Reason'}]]}]]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Time'}|[{'type',116,'time',[]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Module'}|[{'type',117,'module',[]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Function'}|[{'type',118,'atom',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Arguments'}|[{'type',119,'list',[{'type',119,'term',[]}]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'TRef'}|[{'type',120,'tref',[]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Reason'}|[{'type',121,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'send_interval',3},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'Time'}|[{'var',125,'Pid'}|[{'var',125,'Message'}]]]}|[{'type',126,'union',[{'type',126,'tuple',[{'atom',126,'ok'}|[{'var',126,'TRef'}]]}|[{'type',126,'tuple',[{'atom',126,'error'}|[{'var',126,'Reason'}]]}]]}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Time'}|[{'type',127,'time',[]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Pid'}|[{'type',128,'union',[{'type',128,'pid',[]}|[{'paren_type',128,[{'ann_type',128,[{'var',128,'RegName'}|[{'type',128,'atom',[]}]]}]}]]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Message'}|[{'type',129,'term',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'TRef'}|[{'type',130,'tref',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Reason'}|[{'type',131,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'send_interval',2},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'Time'}|[{'var',135,'Message'}]]}|[{'type',135,'union',[{'type',135,'tuple',[{'atom',135,'ok'}|[{'var',135,'TRef'}]]}|[{'type',135,'tuple',[{'atom',135,'error'}|[{'var',135,'Reason'}]]}]]}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Time'}|[{'type',136,'time',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Message'}|[{'type',137,'term',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'TRef'}|[{'type',138,'tref',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'Reason'}|[{'type',139,'term',[]}]]]]}]]]]]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'cancel',1},[{'type',143,'bounded_fun',[{'type',143,'fun',[{'type',143,'product',[{'var',143,'TRef'}]}|[{'type',143,'union',[{'type',143,'tuple',[{'atom',143,'ok'}|[{'atom',143,'cancel'}]]}|[{'type',143,'tuple',[{'atom',143,'error'}|[{'var',143,'Reason'}]]}]]}]]}|[[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'TRef'}|[{'type',144,'tref',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Reason'}|[{'type',145,'term',[]}]]]]}]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'sleep',1},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'Time'}]}|[{'atom',149,'ok'}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Time'}|[{'type',150,'timeout',[]}]]]]}]]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'tc',1},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'Fun'}]}|[{'type',159,'tuple',[{'var',159,'Time'}|[{'var',159,'Value'}]]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Fun'}|[{'type',160,'function',[]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Time'}|[{'type',161,'integer',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Value'}|[{'type',162,'term',[]}]]]]}]]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'tc',2},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'Fun'}|[{'var',172,'Arguments'}]]}|[{'type',172,'tuple',[{'var',172,'Time'}|[{'var',172,'Value'}]]}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Fun'}|[{'type',173,'function',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Arguments'}|[{'type',174,'list',[{'type',174,'term',[]}]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Time'}|[{'type',175,'integer',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Value'}|[{'type',176,'term',[]}]]]]}]]]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'tc',3},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'Module'}|[{'var',186,'Function'}|[{'var',186,'Arguments'}]]]}|[{'type',186,'tuple',[{'var',186,'Time'}|[{'var',186,'Value'}]]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Module'}|[{'type',187,'module',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Function'}|[{'type',188,'atom',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Arguments'}|[{'type',189,'list',[{'type',189,'term',[]}]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Time'}|[{'type',190,'integer',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Value'}|[{'type',191,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'now_diff',2},[{'type',202,'bounded_fun',[{'type',202,'fun',[{'type',202,'product',[{'var',202,'T2'}|[{'var',202,'T1'}]]}|[{'var',202,'Tdiff'}]]}|[[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'T1'}|[{'remote_type',203,[{'atom',203,'erlang'}|[{'atom',203,'timestamp'}|[[]]]]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'T2'}|[{'remote_type',204,[{'atom',204,'erlang'}|[{'atom',204,'timestamp'}|[[]]]]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Tdiff'}|[{'type',205,'integer',[]}]]]]}]]]]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'seconds',1},[{'type',212,'bounded_fun',[{'type',212,'fun',[{'type',212,'product',[{'var',212,'Seconds'}]}|[{'var',212,'MilliSeconds'}]]}|[[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Seconds'}|[{'type',213,'non_neg_integer',[]}]]]]}|[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'MilliSeconds'}|[{'type',214,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'minutes',1},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'Minutes'}]}|[{'var',217,'MilliSeconds'}]]}|[[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Minutes'}|[{'type',218,'non_neg_integer',[]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'MilliSeconds'}|[{'type',219,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'hours',1},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'Hours'}]}|[{'var',222,'MilliSeconds'}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Hours'}|[{'type',223,'non_neg_integer',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'MilliSeconds'}|[{'type',224,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 227
		'spec' =
		    %% Line 227
		    [{{'hms',3},[{'type',227,'bounded_fun',[{'type',227,'fun',[{'type',227,'product',[{'var',227,'Hours'}|[{'var',227,'Minutes'}|[{'var',227,'Seconds'}]]]}|[{'var',227,'MilliSeconds'}]]}|[[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Hours'}|[{'type',228,'non_neg_integer',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Minutes'}|[{'type',229,'non_neg_integer',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Seconds'}|[{'type',230,'non_neg_integer',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'MilliSeconds'}|[{'type',231,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 240
		'spec' =
		    %% Line 240
		    [{{'start',0},[{'type',240,'fun',[{'type',240,'product',[]}|[{'atom',240,'ok'}]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'start_link',0},[{'type',244,'fun',[{'type',244,'product',[]}|[{'type',244,'union',[{'type',244,'tuple',[{'atom',244,'ok'}|[{'type',244,'pid',[]}]]}|[{'type',244,'tuple',[{'atom',244,'error'}|[{'type',244,'term',[]}]]}]]}]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'init',1},[{'type',248,'fun',[{'type',248,'product',[{'type',248,'nil',[]}]}|[{'type',248,'tuple',[{'atom',248,'ok'}|[{'type',248,'nil',[]}|[{'atom',248,'infinity'}]]]}]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'ensure_started',0},[{'type',255,'fun',[{'type',255,'product',[]}|[{'atom',255,'ok'}]]}]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'timers',{'type',279,'term',[]},[]}],
		%% Line 281
		'spec' =
		    %% Line 281
		    [{{'handle_call',3},[{'type',281,'fun',[{'type',281,'product',[{'type',281,'term',[]}|[{'type',281,'term',[]}|[{'type',281,'timers',[]}]]]}|[{'type',282,'union',[{'type',282,'tuple',[{'atom',282,'reply'}|[{'type',282,'term',[]}|[{'type',282,'timers',[]}|[{'type',282,'timeout',[]}]]]]}|[{'type',282,'tuple',[{'atom',282,'noreply'}|[{'type',282,'timers',[]}|[{'type',282,'timeout',[]}]]]}]]}]]}]}],
		%% Line 322
		'spec' =
		    %% Line 322
		    [{{'handle_info',2},[{'type',322,'fun',[{'type',322,'product',[{'type',322,'term',[]}|[{'type',322,'timers',[]}]]}|[{'type',322,'tuple',[{'atom',322,'noreply'}|[{'type',322,'timers',[]}|[{'type',322,'timeout',[]}]]]}]]}]}],
		%% Line 332
		'spec' =
		    %% Line 332
		    [{{'handle_cast',2},[{'type',332,'fun',[{'type',332,'product',[{'type',332,'term',[]}|[{'type',332,'timers',[]}]]}|[{'type',332,'tuple',[{'atom',332,'noreply'}|[{'type',332,'timers',[]}|[{'type',332,'timeout',[]}]]]}]]}]}],
		%% Line 336
		'spec' =
		    %% Line 336
		    [{{'terminate',2},[{'type',336,'fun',[{'type',336,'product',[{'type',336,'term',[]}|[{'var',336,'_State'}]]}|[{'atom',336,'ok'}]]}]}],
		%% Line 340
		'spec' =
		    %% Line 340
		    [{{'code_change',3},[{'type',340,'fun',[{'type',340,'product',[{'type',340,'term',[]}|[{'var',340,'State'}|[{'type',340,'term',[]}]]]}|[{'type',340,'tuple',[{'atom',340,'ok'}|[{'var',340,'State'}]]}]]}]}],
		%% Line 396
		'spec' =
		    %% Line 396
		    [{{'pid_delete',1},[{'type',396,'fun',[{'type',396,'product',[{'type',396,'pid',[]}]}|[{'atom',396,'ok'}]]}]}],
		%% Line 411
		'spec' =
		    %% Line 411
		    [{{'next_timeout',0},[{'type',411,'fun',[{'type',411,'product',[]}|[{'type',411,'timeout',[]}]]}]}],
		%% Line 466
		'spec' =
		    %% Line 466
		    [{{'get_status',0},[{'type',466,'fun',[{'type',466,'product',[]}|[{'type',467,'tuple',[{'type',467,'tuple',[{'atom',467,'timer_tab'}|[{'type',467,'non_neg_integer',[]}]]}|[{'type',467,'tuple',[{'atom',467,'timer_interval_tab'}|[{'type',467,'non_neg_integer',[]}]]}]]}]]}]}]]
'apply_after'/4 =
    %% Line 62
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 63
	apply 'req'/2
	    ('apply_after', {_cor3,{_cor2,_cor1,_cor0}})
'send_after'/3 =
    %% Line 71
    fun (_cor2,_cor1,_cor0) ->
	%% Line 72
	apply 'req'/2
	    ('apply_after', {_cor2,{'timer','send',[_cor1|[_cor0|[]]]}})
'send_after'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 80
	    call 'erlang':'self'
		()
	in  %% Line 80
	    apply 'send_after'/3
		(_cor1, _cor2, _cor0)
'exit_after'/3 =
    %% Line 88
    fun (_cor2,_cor1,_cor0) ->
	%% Line 89
	apply 'req'/2
	    ('apply_after', {_cor2,{'erlang','exit',[_cor1|[_cor0|[]]]}})
'exit_after'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 97
	    call 'erlang':'self'
		()
	in  %% Line 97
	    apply 'exit_after'/3
		(_cor1, _cor2, _cor0)
'kill_after'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	%% Line 105
	apply 'exit_after'/3
	    (_cor1, _cor0, 'kill')
'kill_after'/1 =
    %% Line 111
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 112
	    call 'erlang':'self'
		()
	in  %% Line 112
	    apply 'exit_after'/3
		(_cor0, _cor1, 'kill')
'apply_interval'/4 =
    %% Line 122
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 123
	    call 'erlang':'self'
		()
	in  %% Line 123
	    apply 'req'/2
		('apply_interval', {_cor3,_cor4,{_cor2,_cor1,_cor0}})
'send_interval'/3 =
    %% Line 132
    fun (_cor2,_cor1,_cor0) ->
	%% Line 133
	apply 'req'/2
	    ('apply_interval', {_cor2,_cor1,{'timer','send',[_cor1|[_cor0|[]]]}})
'send_interval'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 141
	    call 'erlang':'self'
		()
	in  %% Line 141
	    apply 'send_interval'/3
		(_cor1, _cor2, _cor0)
'cancel'/1 =
    %% Line 146
    fun (_cor0) ->
	%% Line 147
	apply 'req'/2
	    ('cancel', _cor0)
'sleep'/1 =
    %% Line 151
    fun (_cor0) ->
	%% Line 152
	receive
	  
	after _cor0 ->
	  %% Line 153
	  'ok'
'tc'/1 =
    %% Line 163
    fun (_cor0) ->
	let <Before> =
	    %% Line 164
	    call 'os':'timestamp'
		()
	in  let <Val> =
		%% Line 165
		apply _cor0
		    ()
	    in  let <After> =
		    %% Line 166
		    call 'os':'timestamp'
			()
		in  let <_cor4> =
			%% Line 167
			apply 'now_diff'/2
			    (After, Before)
		    in  %% Line 167
			{_cor4,Val}
'tc'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	let <Before> =
	    %% Line 178
	    call 'os':'timestamp'
		()
	in  let <Val> =
		%% Line 179
		call 'erlang':'apply'
		    (_cor1, _cor0)
	    in  let <After> =
		    %% Line 180
		    call 'os':'timestamp'
			()
		in  let <_cor5> =
			%% Line 181
			apply 'now_diff'/2
			    (After, Before)
		    in  %% Line 181
			{_cor5,Val}
'tc'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	let <Before> =
	    %% Line 193
	    call 'os':'timestamp'
		()
	in  let <Val> =
		%% Line 194
		call 'erlang':'apply'
		    (_cor2, _cor1, _cor0)
	    in  let <After> =
		    %% Line 195
		    call 'os':'timestamp'
			()
		in  let <_cor6> =
			%% Line 196
			apply 'now_diff'/2
			    (After, Before)
		    in  %% Line 196
			{_cor6,Val}
'now_diff'/2 =
    %% Line 206
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{A2,B2,C2},{A1,B1,C1}> when 'true' ->
	      let <_cor2> =
		  %% Line 207
		  call 'erlang':'-'
		      (A2, A1)
	      in  let <_cor3> =
		      %% Line 207
		      call 'erlang':'*'
			  (_cor2, 1000000)
		  in  let <_cor4> =
			  %% Line 207
			  call 'erlang':'+'
			      (_cor3, B2)
		      in  let <_cor5> =
			      %% Line 207
			      call 'erlang':'-'
				  (_cor4, B1)
			  in  let <_cor6> =
				  %% Line 207
				  call 'erlang':'*'
				      (_cor5, 1000000)
			      in  let <_cor7> =
				      %% Line 207
				      call 'erlang':'+'
					  (_cor6, C2)
				  in  %% Line 207
				      call 'erlang':'-'
					  (_cor7, C1)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'now_diff',2}}] )
	    -| ['compiler_generated'] )
	end
'seconds'/1 =
    %% Line 215
    fun (_cor0) ->
	%% Line 216
	call 'erlang':'*'
	    (1000, _cor0)
'minutes'/1 =
    %% Line 220
    fun (_cor0) ->
	%% Line 221
	call 'erlang':'*'
	    (60000, _cor0)
'hours'/1 =
    %% Line 225
    fun (_cor0) ->
	%% Line 226
	call 'erlang':'*'
	    (3600000, _cor0)
'hms'/3 =
    %% Line 232
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 233
	    apply 'hours'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 233
		apply 'minutes'/1
		    (_cor1)
	    in  let <_cor6> =
		    %% Line 233
		    call 'erlang':'+'
			(_cor5, _cor4)
		in  let <_cor3> =
			%% Line 233
			apply 'seconds'/1
			    (_cor0)
		    in  %% Line 233
			call 'erlang':'+'
			    (_cor6, _cor3)
'start'/0 =
    %% Line 241
    fun () ->
	%% Line 242
	apply 'ensure_started'/0
	    ()
'start_link'/0 =
    %% Line 245
    fun () ->
	%% Line 246
	call 'gen_server':'start_link'
	    ({'local','timer_server'}, 'timer', [], [])
'init'/1 =
    %% Line 249
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 250
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 251
		  case call 'ets':'new'
			   ('timer_tab', ['named_table'|['ordered_set'|['protected']]]) of
		    <'timer_tab'> when 'true' ->
			%% Line 252
			case call 'ets':'new'
				 ('timer_interval_tab', ['named_table'|['protected']]) of
			  <'timer_interval_tab'> when 'true' ->
			      %% Line 253
			      {'ok',[],'infinity'}
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'ensure_started'/0 =
    %% Line 256
    fun () ->
	%% Line 257
	case call 'erlang':'whereis'
		 ('timer_server') of
	  %% Line 258
	  <'undefined'> when 'true' ->
	      do  %% Line 261
		  ( call 'supervisor':'start_child'
			('kernel_safe_sup', {'timer_server',{'timer','start_link',[]},'permanent',1000,'worker',['timer']})
		    -| ['result_not_wanted'] )
		  %% Line 262
		  'ok'
	  %% Line 263
	  <_cor3> when 'true' ->
	      'ok'
	end
'req'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	let <SysTime> =
	    %% Line 269
	    apply 'system_time'/0
		()
	in  do  %% Line 270
		apply 'ensure_started'/0
		    ()
		%% Line 271
		call 'gen_server':'call'
		    ('timer_server', {_cor1,_cor0,SysTime}, 'infinity')
'handle_call'/3 =
    %% Line 283
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'apply_after',{Time,Op},Started},_X_From,_X_Ts>
	      when let <_cor3> =
		    %% Line 284
		    call 'erlang':'is_integer'
			(Time)
		in  let <_cor4> =
			%% Line 284
			call 'erlang':'>='
			    (Time, 0)
		    in  %% Line 284
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor6> =
		  %% Line 285
		  call 'erlang':'*'
		      (1000, Time)
	      in  let <_cor7> =
		      %% Line 285
		      call 'erlang':'+'
			  (Started, _cor6)
		  in  let <_cor5> =
			  %% Line 285
			  call 'erlang':'make_ref'
			      ()
		      in  let <BRef> = {_cor7,_cor5}
			  in  let <Timer> = {%% Line 286
				   BRef,%% Line 286
					'timeout',%% Line 286
						  Op}
			      in  do  %% Line 287
				      call 'ets':'insert'
					  ('timer_tab', Timer)
				      let <_cor10> =
					  %% Line 288
					  apply 'system_time'/0
					      ()
				      in  let <Timeout> =
					      %% Line 288
					      apply 'timer_timeout'/1
						  (_cor10)
					  in  %% Line 289
					      {'reply',{'ok',BRef},[],Timeout}
	  %% Line 290
	  <{'apply_interval',{Time,To,MFA},Started},_X_From,_X_Ts>
	      when let <_cor12> =
		    %% Line 291
		    call 'erlang':'is_integer'
			(Time)
		in  let <_cor13> =
			%% Line 291
			call 'erlang':'>='
			    (Time, 0)
		    in  %% Line 291
			call 'erlang':'and'
			    (_cor12, _cor13) ->
	      %% Line 293
	      case apply 'get_pid'/1
		       (To) of
		%% Line 294
		<Pid>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    do  catch
			    %% Line 295
			    call 'erlang':'link'
				(Pid)
			let <SysTime> =
			    %% Line 296
			    apply 'system_time'/0
				()
			in  let <Ref> =
				%% Line 297
				call 'erlang':'make_ref'
				    ()
			    in  let <BRef1> = {%% Line 298
				     'interval',%% Line 298
						Ref}
				in  let <Interval> =
					%% Line 299
					call 'erlang':'*'
					    (Time, 1000)
				    in  let <_cor18> =
					    %% Line 300
					    call 'erlang':'+'
						(Started, Interval)
					in  let <BRef2> = {_cor18,%% Line 300
							Ref}
					    in  let <Timer> = {%% Line 301
						     BRef2,%% Line 301
							   {'repeat',Interval,Pid},%% Line 301
										   MFA}
						in  do  %% Line 302
							call 'ets':'insert'
							    ('timer_interval_tab', {BRef1,BRef2,Pid})
							do  %% Line 303
							    call 'ets':'insert'
								('timer_tab', Timer)
							    let <Timeout> =
								%% Line 304
								apply 'timer_timeout'/1
								    (SysTime)
							    in  %% Line 305
								{'reply',{'ok',BRef1},[],Timeout}
		%% Line 306
		<_cor32> when 'true' ->
		    let <_cor22> =
			%% Line 307
			apply 'next_timeout'/0
			    ()
		    in  %% Line 307
			{'reply',{'error','badarg'},[],_cor22}
	      end
	  %% Line 309
	  <{'cancel',BRef = {_X_Time,Ref},_cor33},_X_From,Ts>
	      when %% Line 310
		call 'erlang':'is_reference'
		    (Ref) ->
	      do  %% Line 311
		  apply 'delete_ref'/1
		      (BRef)
		  let <_cor24> =
		      %% Line 312
		      apply 'next_timeout'/0
			  ()
		  in  %% Line 312
		      {'reply',{'ok','cancel'},Ts,_cor24}
	  %% Line 313
	  <{'cancel',_X_BRef,_cor34},_X_From,Ts> when 'true' ->
	      let <_cor25> =
		  %% Line 314
		  apply 'next_timeout'/0
		      ()
	      in  %% Line 314
		  {'reply',{'error','badarg'},Ts,_cor25}
	  %% Line 315
	  <{'apply_after',_cor35,_cor36},_X_From,Ts> when 'true' ->
	      let <_cor26> =
		  %% Line 316
		  apply 'next_timeout'/0
		      ()
	      in  %% Line 316
		  {'reply',{'error','badarg'},Ts,_cor26}
	  %% Line 317
	  <{'apply_interval',_cor37,_cor38},_X_From,Ts> when 'true' ->
	      let <_cor27> =
		  %% Line 318
		  apply 'next_timeout'/0
		      ()
	      in  %% Line 318
		  {'reply',{'error','badarg'},Ts,_cor27}
	  %% Line 319
	  <_X_Else,_X_From,Ts> when 'true' ->
	      let <_cor28> =
		  %% Line 320
		  apply 'next_timeout'/0
		      ()
	      in  %% Line 320
		  {'noreply',Ts,_cor28}
	end
'handle_info'/2 =
    %% Line 323
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'timeout',Ts> when 'true' ->
	      let <_cor2> =
		  %% Line 324
		  apply 'system_time'/0
		      ()
	      in  let <Timeout> =
		      %% Line 324
		      apply 'timer_timeout'/1
			  (_cor2)
		  in  %% Line 325
		      {'noreply',Ts,Timeout}
	  %% Line 326
	  <{'EXIT',Pid,_X_Reason},Ts> when 'true' ->
	      do  %% Line 327
		  apply 'pid_delete'/1
		      (Pid)
		  let <_cor4> =
		      %% Line 328
		      apply 'next_timeout'/0
			  ()
		  in  %% Line 328
		      {'noreply',Ts,_cor4}
	  %% Line 329
	  <_X_OtherMsg,Ts> when 'true' ->
	      let <_cor5> =
		  %% Line 330
		  apply 'next_timeout'/0
		      ()
	      in  %% Line 330
		  {'noreply',Ts,_cor5}
	end
'handle_cast'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 334
	    apply 'next_timeout'/0
		()
	in  %% Line 334
	    {'noreply',_cor0,_cor2}
'terminate'/2 =
    %% Line 337
    fun (_cor1,_cor0) ->
	%% Line 338
	'ok'
'code_change'/3 =
    %% Line 341
    fun (_cor2,_cor1,_cor0) ->
	%% Line 343
	{'ok',_cor1}
'timer_timeout'/1 =
    %% Line 352
    fun (_cor0) ->
	%% Line 353
	case call 'ets':'first'
		 ('timer_tab') of
	  %% Line 354
	  <'$end_of_table'> when 'true' ->
	      %% Line 355
	      'infinity'
	  %% Line 356
	  <{Time,_X_Ref}>
	      when call 'erlang':'>'
		    (Time,
		     _cor0) ->
	      let <_cor1> =
		  %% Line 357
		  call 'erlang':'-'
		      (Time, _cor0)
	      in  let <_cor2> =
		      %% Line 357
		      call 'erlang':'+'
			  (_cor1, 999)
		  in  let <Timeout> =
			  %% Line 357
			  call 'erlang':'div'
			      (_cor2, 1000)
		      in  %% Line 359
			  call 'erlang':'min'
			      (Timeout, 8388608)
	  %% Line 360
	  <Key> when 'true' ->
	      %% Line 361
	      case call 'ets':'lookup'
		       ('timer_tab', Key) of
		%% Line 362
		<[{_cor8,'timeout',MFA}|[]]>
		    when call 'erlang':'=:='
			  (_cor8,
			   Key) ->
		    do  %% Line 363
			call 'ets':'delete'
			    ('timer_tab', Key)
			do  %% Line 364
			    apply 'do_apply'/1
				(MFA)
			    %% Line 365
			    apply 'timer_timeout'/1
				(_cor0)
		%% Line 366
		<[{{Time,Ref},Repeat = {'repeat',Interv,To},MFA}|[]]> when 'true' ->
		    do  %% Line 367
			call 'ets':'delete'
			    ('timer_tab', Key)
			let <NewTime> =
			    %% Line 368
			    call 'erlang':'+'
				(Time, Interv)
			in  do  %% Line 370
				call 'ets':'insert'
				    ('timer_interval_tab', {{'interval',Ref},{NewTime,Ref},To})
				do  %% Line 371
				    apply 'do_apply'/1
					(MFA)
				    do  %% Line 372
					call 'ets':'insert'
					    ('timer_tab', {{NewTime,Ref},Repeat,MFA})
					%% Line 373
					apply 'timer_timeout'/1
					    (_cor0)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'delete_ref'/1 =
    %% Line 381
    fun (_cor0) ->
	case _cor0 of
	  <BRef = {'interval',_cor3}> when 'true' ->
	      %% Line 382
	      case call 'ets':'lookup'
		       ('timer_interval_tab', BRef) of
		%% Line 383
		<[{_cor4,BRef2,_X_Pid}|[]]> when 'true' ->
		    do  %% Line 384
			call 'ets':'delete'
			    ('timer_interval_tab', BRef)
			%% Line 385
			call 'ets':'delete'
			    ('timer_tab', BRef2)
		%% Line 386
		<_cor5> when 'true' ->
		    %% Line 387
		    'ok'
	      end
	  %% Line 389
	  <BRef> when 'true' ->
	      %% Line 390
	      call 'ets':'delete'
		  ('timer_tab', BRef)
	end
'pid_delete'/1 =
    %% Line 397
    fun (_cor0) ->
	let <IntervalTimerList> =
	    %% Line 399
	    call 'ets':'select'
		('timer_interval_tab', %% Line 400
				       [{{'_','_','$1'},%% Line 401
							[{'==','$1',_cor0}|[]],%% Line 402
									       ['$_']}|%% Line 402
										       []])
	in  let <_cor4> =
		%% Line 403
		( fun (_cor2) ->
		      case _cor2 of
			<{IntKey,TimerKey,_cor6}> when 'true' ->
			    do  %% Line 404
				call 'ets':'delete'
				    ('timer_interval_tab', IntKey)
				%% Line 405
				call 'ets':'delete'
				    ('timer_tab', TimerKey)
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'-pid_delete/1-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-pid_delete/1-fun-0-'}}] )
	    in  %% Line 403
		call 'lists':'foreach'
		    (_cor4, %% Line 406
			    IntervalTimerList)
'next_timeout'/0 =
    %% Line 412
    fun () ->
	%% Line 413
	case call 'ets':'first'
		 ('timer_tab') of
	  %% Line 414
	  <'$end_of_table'> when 'true' ->
	      %% Line 415
	      'infinity'
	  %% Line 416
	  <{Time,_cor6}> when 'true' ->
	      let <_cor0> =
		  %% Line 417
		  apply 'system_time'/0
		      ()
	      in  let <_cor1> =
		      %% Line 417
		      call 'erlang':'-'
			  (Time, _cor0)
		  in  let <_cor2> =
			  %% Line 417
			  call 'erlang':'+'
			      (_cor1, 999)
		      in  let <_cor3> =
			      %% Line 417
			      call 'erlang':'div'
				  (_cor2, 1000)
			  in  let <_cor4> =
				  %% Line 417
				  apply 'positive'/1
				      (_cor3)
			      in  %% Line 417
				  call 'erlang':'min'
				      (_cor4, 8388608)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'do_apply'/1 =
    %% Line 421
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,A}> when 'true' ->
	      %% Line 422
	      case <M,F,A> of
		%% Line 423
		<'timer','send',_cor4>
		    when call 'erlang':'=:='
			  (_cor4,
			   A) ->
		    catch
			%% Line 425
			apply 'send'/1
			    (A)
		%% Line 426
		<'erlang','exit',[Name|[Reason|[]]]> when 'true' ->
		    catch
			let <_cor1> =
			    %% Line 427
			    apply 'get_pid'/1
				(Name)
			in  %% Line 427
			    call 'erlang':'exit'
				(_cor1, Reason)
		%% Line 428
		<_fol51,_fol52,_fol53> when 'true' ->
		    catch
			%% Line 430
			call 'erlang':'spawn'
			    (M, F, A)
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_apply',1}}] )
	    -| ['compiler_generated'] )
	end
'positive'/1 =
    %% Line 433
    fun (_cor0) ->
	%% Line 434
	call 'erlang':'max'
	    (_cor0, 0)
'system_time'/0 =
    %% Line 440
    fun () ->
	%% Line 441
	case call 'erlang':'now'
		 () of
	  <{M,S,U}> when 'true' ->
	      let <_cor1> =
		  %% Line 442
		  call 'erlang':'*'
		      (M, 1000000)
	      in  let <_cor2> =
		      %% Line 442
		      call 'erlang':'+'
			  (_cor1, S)
		  in  let <_cor3> =
			  %% Line 442
			  call 'erlang':'*'
			      (1000000, _cor2)
		      in  %% Line 442
			  call 'erlang':'+'
			      (_cor3, U)
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'send'/1 =
    %% Line 445
    fun (_cor0) ->
	case _cor0 of
	  <[Pid|[Msg|[]]]> when 'true' ->
	      %% Line 446
	      call 'erlang':'!'
		  (Pid, Msg)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'send',1}}] )
	    -| ['compiler_generated'] )
	end
'get_pid'/1 =
    %% Line 448
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 449
	      Name
	  %% Line 450
	  <'undefined'> when 'true' ->
	      %% Line 451
	      'undefined'
	  %% Line 452
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 453
		  call 'erlang':'whereis'
		      (Name)
	      in  %% Line 453
		  apply 'get_pid'/1
		      (_cor1)
	  %% Line 454
	  <_cor3> when 'true' ->
	      %% Line 455
	      'undefined'
	end
'get_status'/0 =
    %% Line 469
    fun () ->
	let <Info1> =
	    %% Line 470
	    call 'ets':'info'
		('timer_tab')
	in  %% Line 471
	    case call 'lists':'keyfind'
		     ('size', 1, Info1) of
	      <{'size',TotalNumTimers}> when 'true' ->
		  let <Info2> =
		      %% Line 472
		      call 'ets':'info'
			  ('timer_interval_tab')
		  in  %% Line 473
		      case call 'lists':'keyfind'
			       ('size', 1, Info2) of
			<{'size',NumIntervalTimers}> when 'true' ->
			    %% Line 474
			    {{'timer_tab',TotalNumTimers},{'timer_interval_tab',NumIntervalTimers}}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('timer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('timer', _cor0)
end