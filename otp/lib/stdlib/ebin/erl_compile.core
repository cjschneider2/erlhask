module 'erl_compile' ['compile_cmdline'/0,
		      'module_info'/0,
		      'module_info'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','options'},[{'typed_record_field',{'record_field',23,{'atom',23,'includes'},{'nil',23}},{'type',23,'list',[{'remote_type',23,[{'atom',23,'file'}|[{'atom',23,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'outdir'},{'string',25,[46]}},{'remote_type',25,[{'atom',25,'file'}|[{'atom',25,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'output_type'},{'atom',27,'undefined'}},{'type',27,'atom',[]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'defines'},{'nil',28}},{'type',28,'list',[{'type',28,'union',[{'type',28,'atom',[]}|[{'type',28,'tuple',[{'type',28,'atom',[]}|[{'var',28,'_'}]]}]]}]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'warning'},{'integer',32,1}},{'type',32,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'verbose'},{'atom',35,'false'}},{'type',35,'boolean',[]}}|[{'record_field',36,{'atom',36,'optimize'},{'integer',36,999}}|[{'typed_record_field',{'record_field',37,{'atom',37,'specific'},{'nil',37}},{'type',37,'list',[{'var',37,'_'}]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'outfile'},{'string',38,[]}},{'remote_type',38,[{'atom',38,'file'}|[{'atom',38,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'cwd'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'remote_type',40,[{'atom',40,'file'}|[{'atom',40,'filename'}|[[]]]]}]]}}]]]]]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 26
		'export_type' =
		    %% Line 26
		    [{'cmd_line_arg',0}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'cmd_line_arg',{'type',50,'union',[{'type',50,'atom',[]}|[{'type',50,'string',[]}]]},[]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'compile_cmdline',0},[{'type',52,'fun',[{'type',52,'product',[]}|[{'type',52,'no_return',[]}]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'compiler_runner',1},[{'type',82,'fun',[{'type',82,'product',[{'type',82,'list',[{'type',82,'cmd_line_arg',[]}]}]}|[{'type',82,'fun',[{'type',82,'product',[]}|[{'type',82,'no_return',[]}]]}]]}]}]]
'compiler'/1 =
    %% Line 32
    fun (_cor0) ->
	case _cor0 of
	  <[46|[101|[114|[108]]]]> when 'true' ->
	      {'compile','compile'}
	  %% Line 33
	  <[46|[83]]> when 'true' ->
	      {'compile','compile_asm'}
	  %% Line 34
	  <[46|[98|[101|[97|[109]]]]]> when 'true' ->
	      {'compile','compile_beam'}
	  %% Line 35
	  <[46|[99|[111|[114|[101]]]]]> when 'true' ->
	      {'compile','compile_core'}
	  %% Line 36
	  <[46|[109|[105|[98]]]]> when 'true' ->
	      {'snmpc','compile'}
	  %% Line 37
	  <[46|[98|[105|[110]]]]> when 'true' ->
	      {'snmpc','mib_to_hrl'}
	  %% Line 38
	  <[46|[120|[114|[108]]]]> when 'true' ->
	      {'leex','compile'}
	  %% Line 39
	  <[46|[121|[114|[108]]]]> when 'true' ->
	      {'yecc','compile'}
	  %% Line 40
	  <[46|[115|[99|[114|[105|[112|[116]]]]]]]> when 'true' ->
	      {'systools','script2boot'}
	  %% Line 41
	  <[46|[114|[101|[108]]]]> when 'true' ->
	      {'systools','compile_rel'}
	  %% Line 42
	  <[46|[105|[100|[108]]]]> when 'true' ->
	      {'ic','compile'}
	  %% Line 43
	  <[46|[97|[115|[110|[49]]]]]> when 'true' ->
	      {'asn1ct','compile_asn1'}
	  %% Line 44
	  <[46|[97|[115|[110]]]]> when 'true' ->
	      {'asn1ct','compile_asn'}
	  %% Line 45
	  <[46|[112|[121]]]> when 'true' ->
	      {'asn1ct','compile_py'}
	  %% Line 46
	  <_cor2> when 'true' ->
	      'no'
	end
'compile_cmdline'/0 =
    %% Line 54
    fun () ->
	let <List> =
	    %% Line 55
	    call 'init':'get_plain_arguments'
		()
	in  %% Line 56
	    case apply 'compile'/1
		     (List) of
	      %% Line 57
	      <'ok'> when 'true' ->
		  apply 'my_halt'/1
		      (0)
	      %% Line 58
	      <'error'> when 'true' ->
		  apply 'my_halt'/1
		      (1)
	      %% Line 59
	      <_cor2> when 'true' ->
		  apply 'my_halt'/1
		      (2)
	    end
'my_halt'/1 =
    %% Line 62
    fun (_cor0) ->
	%% Line 63
	call 'erlang':'halt'
	    (_cor0)
'compile'/1 =
    %% Line 67
    fun (_cor0) ->
	do  %% Line 68
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    let <_cor1> =
		%% Line 69
		apply 'compiler_runner'/1
		    (_cor0)
	    in  let <Pid> =
		    %% Line 69
		    call 'erlang':'spawn_link'
			(_cor1)
		in  %% Line 70
		    receive
		      %% Line 71
		      <{'EXIT',_cor4,{'compiler_result',Result}}>
			  when call 'erlang':'=:='
				(_cor4,
				 Pid) ->
			  %% Line 72
			  Result
		      %% Line 73
		      <{'EXIT',_cor5,{'compiler_error',Error}}>
			  when call 'erlang':'=:='
				(_cor5,
				 Pid) ->
			  do  %% Line 74
			      call 'io':'put_chars'
				  ('standard_error', Error)
			      do  %% Line 75
				  call 'io':'nl'
				      ('standard_error')
				  %% Line 76
				  'error'
		      %% Line 77
		      <{'EXIT',_cor6,Reason}>
			  when call 'erlang':'=:='
				(_cor6,
				 Pid) ->
			  do  %% Line 78
			      call 'io':'format'
				  ('standard_error', [82|[117|[110|[116|[105|[109|[101|[32|[101|[114|[114|[111|[114|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]], [Reason|[]])
			      %% Line 79
			      'error'
		    after 'infinity' ->
		      'true'
'compiler_runner'/1 =
    %% Line 84
    fun (_cor0) ->
	%% Line 85
	( fun () ->
	      let <_cor6> =
		  %% Line 88
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[D|_cor2]>
				      when call 'erlang':'=/='
					    (D,
					     [46]) ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [D|_cor5]
					    -| ['compiler_generated'] )
				  ( <[D|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'code':'get_path'
				()
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 89
		  case call 'code':'set_path'
			   (_cor6) of
		    <'true'> when 'true' ->
			let <_cor9> =
			    %% Line 90
			    apply 'compile1'/1
				(_cor0)
			in  %% Line 90
			    call 'erlang':'exit'
				({'compiler_result',_cor9})
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-compiler_runner/1-fun-0-'}}] )
'compile1'/1 =
    %% Line 95
    fun (_cor0) ->
	%% Line 96
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 97
	      apply 'compile1'/2
		  (_cor0, {'options',[],Cwd,'undefined',[],1,'false',999,[],[],Cwd})
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'compile1'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[45|[45]]|Files],Opts> when 'true' ->
	      %% Line 102
	      apply 'compile2'/2
		  (Files, Opts)
	  %% Line 103
	  <[[45|Option]|T],Opts> when 'true' ->
	      %% Line 104
	      apply 'parse_generic_option'/3
		  (Option, T, Opts)
	  %% Line 105
	  <[[43|Option]|Rest],Opts> when 'true' ->
	      let <Term> =
		  %% Line 106
		  apply 'make_term'/1
		      (Option)
	      in  %% Line 107
		  ( case Opts of
		      ( <( {'options',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec0,_cor19,_cor20}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec1> =
				%% Line 108
				[Term|_rec0]
			    in  let <_cor9> =
				    %% Line 108
				    call 'erlang':'setelement'
					(9, Opts, _rec1)
				in  %% Line 108
				    apply 'compile1'/2
					(Rest, _cor9)
			-| ['compiler_generated'] )
		      ( <_cor21> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 109
	  <Files,Opts> when 'true' ->
	      %% Line 110
	      apply 'compile2'/2
		  (Files, Opts)
	end
'parse_generic_option'/3 =
    %% Line 112
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[98|Opt],T0,Opts> when 'true' ->
	      %% Line 113
	      case apply 'get_option'/3
		       ([98], Opt, T0) of
		<{OutputType,T}> when 'true' ->
		    let <_rec3> =
			%% Line 114
			call 'erlang':'list_to_atom'
			    (OutputType)
		    in  %% Line 114
			case Opts of
			  <{'options',_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97}> when 'true' ->
			      let <_cor7> =
				  call 'erlang':'setelement'
				      (4, Opts, _rec3)
			      in  apply 'compile1'/2
				      (T, _cor7)
			  ( <_cor98> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 115
	  <[68|Opt],T0,Opts = {'options',_cor99,_cor100,_cor101,Defs,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107}> when 'true' ->
	      %% Line 116
	      case apply 'get_option'/3
		       ([68], Opt, T0) of
		<{Val0,T}> when 'true' ->
		    %% Line 117
		    case apply 'split_at_equals'/2
			     (Val0, []) of
		      <{Key0,Val1}> when 'true' ->
			  let <Key> =
			      %% Line 118
			      call 'erlang':'list_to_atom'
				  (Key0)
			  in  %% Line 119
			      case Val1 of
				%% Line 120
				<[]> when 'true' ->
				    let <_rec5> =
					%% Line 121
					[Key|Defs]
				    in  let <_cor14> =
					    %% Line 121
					    call 'erlang':'setelement'
						(5, Opts, _rec5)
					in  %% Line 121
					    apply 'compile1'/2
						(T, _cor14)
				%% Line 122
				<Val2> when 'true' ->
				    let <Val> =
					%% Line 123
					apply 'make_term'/1
					    (Val2)
				    in  let <_rec7> =
					    %% Line 124
					    [{Key,Val}|Defs]
					in  let <_cor19> =
						%% Line 124
						call 'erlang':'setelement'
						    (5, Opts, _rec7)
					    in  %% Line 124
						apply 'compile1'/2
						    (T, _cor19)
			      end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 126
	  <[104|[101|[108|[112]]]],_cor130,_X_Opts> when 'true' ->
	      %% Line 127
	      apply 'usage'/0
		  ()
	  %% Line 128
	  <[73|Opt],T0,Opts = {'options',_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,Cwd}> when 'true' ->
	      %% Line 129
	      case apply 'get_option'/3
		       ([73], Opt, T0) of
		<{Dir,T}> when 'true' ->
		    let <AbsDir> =
			%% Line 130
			call 'filename':'absname'
			    (Dir, Cwd)
		    in  let <_rec9> =
			    %% Line 131
			    [AbsDir|_cor131]
			in  let <_cor28> =
				%% Line 131
				call 'erlang':'setelement'
				    (2, Opts, _rec9)
			    in  %% Line 131
				apply 'compile1'/2
				    (T, _cor28)
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 132
	  <[77|Opt],T0,Opts = {'options',_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,Spec,_cor168,_cor169}> when 'true' ->
	      %% Line 133
	      case apply 'parse_dep_option'/2
		       (Opt, T0) of
		%% Line 134
		<'error'> when 'true' ->
		    %% Line 135
		    'error'
		%% Line 136
		<{SpecOpts,T}> when 'true' ->
		    let <_rec12> =
			%% Line 137
			call 'erlang':'++'
			    (SpecOpts, Spec)
		    in  let <_cor32> =
			    %% Line 137
			    call 'erlang':'setelement'
				(9, Opts, _rec12)
			in  %% Line 137
			    apply 'compile1'/2
				(T, _cor32)
		( <_cor33> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 139
	  <[111|Opt],T0,Opts = {'options',_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,Cwd}> when 'true' ->
	      %% Line 140
	      case apply 'get_option'/3
		       ([111], Opt, T0) of
		<{Dir,T}> when 'true' ->
		    let <AbsName> =
			%% Line 141
			call 'filename':'absname'
			    (Dir, Cwd)
		    in  %% Line 142
			case apply 'file_or_directory'/1
				 (AbsName) of
			  %% Line 143
			  <'file'> when 'true' ->
			      let <_cor38> =
				  %% Line 144
				  call 'erlang':'setelement'
				      (10, Opts, AbsName)
			      in  %% Line 144
				  apply 'compile1'/2
				      (T, _cor38)
			  %% Line 145
			  <'directory'> when 'true' ->
			      let <_cor41> =
				  %% Line 146
				  call 'erlang':'setelement'
				      (3, Opts, AbsName)
			      in  %% Line 146
				  apply 'compile1'/2
				      (T, _cor41)
			  ( <_cor42> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor42})
			    -| ['compiler_generated'] )
			end
		( <_cor34> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor34})
		  -| ['compiler_generated'] )
	      end
	  %% Line 148
	  <[79|Opt],T,Opts> when 'true' ->
	      %% Line 149
	      case Opt of
		%% Line 150
		<[]> when 'true' ->
		    %% Line 151
		    case Opts of
		      <{'options',_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221}> when 'true' ->
			  let <_cor45> =
			      call 'erlang':'setelement'
				  (8, Opts, 1)
			  in  apply 'compile1'/2
				  (T, _cor45)
		      ( <_cor222> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 152
		<_cor223> when 'true' ->
		    let <Term> =
			%% Line 153
			apply 'make_term'/1
			    (Opt)
		    in  %% Line 154
			case Opts of
			  <{'options',_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233}> when 'true' ->
			      let <_cor49> =
				  call 'erlang':'setelement'
				      (8, Opts, Term)
			      in  apply 'compile1'/2
				      (T, _cor49)
			  ( <_cor234> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 156
	  <[118],T,Opts> when 'true' ->
	      %% Line 157
	      case Opts of
		<{'options',_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244}> when 'true' ->
		    let <_cor53> =
			call 'erlang':'setelement'
			    (7, Opts, 'true')
		    in  apply 'compile1'/2
			    (T, _cor53)
		( <_cor245> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','options'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 158
	  <[87|Warn],T,Opts = {'options',_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,Spec,_cor253,_cor254}> when 'true' ->
	      %% Line 159
	      case Warn of
		%% Line 160
		<[97|[108|[108]]]> when 'true' ->
		    let <_cor56> =
			%% Line 161
			call 'erlang':'setelement'
			    (6, Opts, 999)
		    in  %% Line 161
			apply 'compile1'/2
			    (T, _cor56)
		%% Line 162
		<[101|[114|[114|[111|[114]]]]]> when 'true' ->
		    let <_rec20> =
			%% Line 163
			['warnings_as_errors'|Spec]
		    in  let <_cor60> =
			    %% Line 163
			    call 'erlang':'setelement'
				(9, Opts, _rec20)
			in  %% Line 163
			    apply 'compile1'/2
				(T, _cor60)
		%% Line 164
		<[]> when 'true' ->
		    let <_cor63> =
			%% Line 165
			call 'erlang':'setelement'
			    (6, Opts, 1)
		    in  %% Line 165
			apply 'compile1'/2
			    (T, _cor63)
		%% Line 166
		<_cor288> when 'true' ->
		    %% Line 167
		    try
			call 'erlang':'list_to_integer'
			    (Warn)
		    of <_cor64> ->
			let <_cor67> =
			    %% Line 169
			    call 'erlang':'setelement'
				(6, Opts, _cor64)
			in  %% Line 169
			    apply 'compile1'/2
				(T, _cor67)
		    catch <_cor71,_cor70,_cor69> ->
			case <_cor71,_cor70,_cor69> of
			  %% Line 171
			  <'error','badarg',_cor300> when 'true' ->
			      %% Line 172
			      apply 'usage'/0
				  ()
			  ( <_cor71,_cor70,_cor69> when 'true' ->
				primop 'raise'
				    (_cor69, _cor70)
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 175
	  <[69],T,Opts = {'options',_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,Spec,_cor308,_cor309}> when 'true' ->
	      let <_rec24> =
		  %% Line 176
		  ['E'|Spec]
	      in  let <_cor76> =
		      %% Line 176
		      call 'erlang':'setelement'
			  (9, Opts, _rec24)
		  in  %% Line 176
		      apply 'compile1'/2
			  (T, _cor76)
	  %% Line 177
	  <[80],T,Opts = {'options',_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327,Spec,_cor328,_cor329}> when 'true' ->
	      let <_rec26> =
		  %% Line 178
		  ['P'|Spec]
	      in  let <_cor80> =
		      %% Line 178
		      call 'erlang':'setelement'
			  (9, Opts, _rec26)
		  in  %% Line 178
		      apply 'compile1'/2
			  (T, _cor80)
	  %% Line 179
	  <[83],T,Opts = {'options',_cor341,_cor342,_cor343,_cor344,_cor345,_cor346,_cor347,Spec,_cor348,_cor349}> when 'true' ->
	      let <_rec28> =
		  %% Line 180
		  ['S'|Spec]
	      in  let <_cor84> =
		      %% Line 180
		      call 'erlang':'setelement'
			  (9, Opts, _rec28)
		  in  %% Line 180
		      apply 'compile1'/2
			  (T, _cor84)
	  %% Line 181
	  <Option,_X_T,_X_Opts> when 'true' ->
	      do  %% Line 182
		  call 'io':'format'
		      ('standard_error', [85|[110|[107|[110|[111|[119|[110|[32|[111|[112|[116|[105|[111|[110|[58|[32|[45|[126|[115|[10]]]]]]]]]]]]]]]]]]]], [Option|[]])
		  %% Line 183
		  apply 'usage'/0
		      ()
	end
'parse_dep_option'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],T> when 'true' ->
	      %% Line 186
	      {['makedep'|[{'makedep_output','standard_io'}]],T}
	  %% Line 187
	  <[68],T> when 'true' ->
	      %% Line 188
	      {['makedep'],T}
	  %% Line 189
	  <[70|Opt],T0> when 'true' ->
	      %% Line 190
	      case apply 'get_option'/3
		       ([77|[70]], Opt, T0) of
		<{File,T}> when 'true' ->
		    %% Line 191
		    {['makedep'|[{'makedep_output',File}|[]]],T}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 192
	  <[71],T> when 'true' ->
	      %% Line 193
	      {['makedep_add_missing'],T}
	  %% Line 194
	  <[80],T> when 'true' ->
	      %% Line 195
	      {['makedep_phony'],T}
	  %% Line 196
	  <[81|Opt],T0> when 'true' ->
	      %% Line 197
	      case apply 'get_option'/3
		       ([77|[84]], Opt, T0) of
		<{Target,T}> when 'true' ->
		    %% Line 198
		    {['makedep_quote_target'|[{'makedep_target',Target}|[]]],T}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 199
	  <[84|Opt],T0> when 'true' ->
	      %% Line 200
	      case apply 'get_option'/3
		       ([77|[84]], Opt, T0) of
		<{Target,T}> when 'true' ->
		    %% Line 201
		    {[{'makedep_target',Target}|[]],T}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 202
	  <Opt,_X_T> when 'true' ->
	      do  %% Line 203
		  call 'io':'format'
		      ('standard_error', [85|[110|[107|[110|[111|[119|[110|[32|[111|[112|[116|[105|[111|[110|[58|[32|[45|[77|[126|[115|[10]]]]]]]]]]]]]]]]]]]]], [Opt|[]])
		  %% Line 204
		  apply 'usage'/0
		      ()
	end
'usage'/0 =
    %% Line 206
    fun () ->
	let <_cor6> =
	    %% Line 239
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{K,D}|_cor2]> when 'true' ->
				let <_cor4> =
				    call 'io_lib':'format'
					([126|[45|[49|[52|[115|[32|[126|[115|[10]]]]]]]]], [K|[D|[]]])
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      ([{[45|[98|[32|[116|[121|[112|[101]]]]]]],[116|[121|[112|[101|[32|[111|[102|[32|[111|[117|[116|[112|[117|[116|[32|[102|[105|[108|[101|[32|[40|[101|[46|[103|[46|[32|[98|[101|[97|[109|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[100]],[116|[117|[114|[110|[32|[111|[110|[32|[100|[101|[98|[117|[103|[103|[105|[110|[103|[32|[111|[102|[32|[101|[114|[108|[99|[32|[105|[116|[115|[101|[108|[102]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[68|[110|[97|[109|[101]]]]]],[100|[101|[102|[105|[110|[101|[32|[110|[97|[109|[101]]]]]]]]]]]}|[{[45|[68|[110|[97|[109|[101|[61|[118|[97|[108|[117|[101]]]]]]]]]]]],[100|[101|[102|[105|[110|[101|[32|[110|[97|[109|[101|[32|[116|[111|[32|[104|[97|[118|[101|[32|[118|[97|[108|[117|[101]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[104|[101|[108|[112]]]]],[115|[104|[111|[119|[115|[32|[116|[104|[105|[115|[32|[104|[101|[108|[112|[32|[116|[101|[120|[116]]]]]]]]]]]]]]]]]]]]}|[{[45|[73|[32|[112|[97|[116|[104]]]]]]],[119|[104|[101|[114|[101|[32|[116|[111|[32|[115|[101|[97|[114|[99|[104|[32|[102|[111|[114|[32|[105|[110|[99|[108|[117|[100|[101|[32|[102|[105|[108|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[77]],[103|[101|[110|[101|[114|[97|[116|[101|[32|[97|[32|[114|[117|[108|[101|[32|[102|[111|[114|[32|[109|[97|[107|[101|[40|[49|[41|[32|[100|[101|[115|[99|[114|[105|[98|[105|[110|[103|[32|[116|[104|[101|[32|[100|[101|[112|[101|[110|[100|[101|[110|[99|[105|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[77|[70|[32|[102|[105|[108|[101]]]]]]]],[119|[114|[105|[116|[101|[32|[116|[104|[101|[32|[100|[101|[112|[101|[110|[100|[101|[110|[99|[105|[101|[115|[32|[116|[111|[32|[39|[102|[105|[108|[101|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[77|[84|[32|[116|[97|[114|[103|[101|[116]]]]]]]]]],[99|[104|[97|[110|[103|[101|[32|[116|[104|[101|[32|[116|[97|[114|[103|[101|[116|[32|[111|[102|[32|[116|[104|[101|[32|[114|[117|[108|[101|[32|[101|[109|[105|[116|[116|[101|[100|[32|[98|[121|[32|[100|[101|[112|[101|[110|[100|[101|[110|[99|[121|[32|[103|[101|[110|[101|[114|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[77|[81|[32|[116|[97|[114|[103|[101|[116]]]]]]]]]],[115|[97|[109|[101|[32|[97|[115|[32|[45|[77|[84|[32|[98|[117|[116|[32|[113|[117|[111|[116|[101|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[115|[32|[115|[112|[101|[99|[105|[97|[108|[32|[116|[111|[32|[109|[97|[107|[101|[40|[49|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[77|[71]]],[99|[111|[110|[115|[105|[100|[101|[114|[32|[109|[105|[115|[115|[105|[110|[103|[32|[104|[101|[97|[100|[101|[114|[115|[32|[97|[115|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[102|[105|[108|[101|[115|[32|[97|[110|[100|[32|[97|[100|[100|[32|[116|[104|[101|[109|[32|[116|[111|[32|[116|[104|[101|[32|[100|[101|[112|[101|[110|[100|[101|[110|[99|[105|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[77|[80]]],[97|[100|[100|[32|[97|[32|[112|[104|[111|[110|[121|[32|[116|[97|[114|[103|[101|[116|[32|[102|[111|[114|[32|[101|[97|[99|[104|[32|[100|[101|[112|[101|[110|[100|[101|[110|[99|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[77|[68]]],[115|[97|[109|[101|[32|[97|[115|[32|[45|[77|[32|[45|[77|[84|[32|[102|[105|[108|[101|[32|[40|[119|[105|[116|[104|[32|[100|[101|[102|[97|[117|[108|[116|[32|[39|[102|[105|[108|[101|[39|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[111|[32|[110|[97|[109|[101]]]]]]],[110|[97|[109|[101|[32|[111|[117|[116|[112|[117|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[111|[114|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[112|[97|[32|[112|[97|[116|[104]]]]]]]],[97|[100|[100|[32|[112|[97|[116|[104|[32|[116|[111|[32|[116|[104|[101|[32|[102|[114|[111|[110|[116|[32|[111|[102|[32|[69|[114|[108|[97|[110|[103|[39|[115|[32|[99|[111|[100|[101|[32|[112|[97|[116|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[112|[122|[32|[112|[97|[116|[104]]]]]]]],[97|[100|[100|[32|[112|[97|[116|[104|[32|[116|[111|[32|[116|[104|[101|[32|[101|[110|[100|[32|[111|[102|[32|[69|[114|[108|[97|[110|[103|[39|[115|[32|[99|[111|[100|[101|[32|[112|[97|[116|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[115|[109|[112]]]],[99|[111|[109|[112|[105|[108|[101|[32|[117|[115|[105|[110|[103|[32|[83|[77|[80|[32|[101|[109|[117|[108|[97|[116|[111|[114]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[118]],[118|[101|[114|[98|[111|[115|[101|[32|[99|[111|[109|[112|[105|[108|[101|[114|[32|[111|[117|[116|[112|[117|[116]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[87|[101|[114|[114|[111|[114]]]]]]],[109|[97|[107|[101|[32|[97|[108|[108|[32|[119|[97|[114|[110|[105|[110|[103|[115|[32|[105|[110|[116|[111|[32|[101|[114|[114|[111|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[87|[48]]],[100|[105|[115|[97|[98|[108|[101|[32|[119|[97|[114|[110|[105|[110|[103|[115]]]]]]]]]]]]]]]]}|[{[45|[87|[110|[117|[109|[98|[101|[114]]]]]]]],[115|[101|[116|[32|[119|[97|[114|[110|[105|[110|[103|[32|[108|[101|[118|[101|[108|[32|[116|[111|[32|[110|[117|[109|[98|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[87|[97|[108|[108]]]]],[101|[110|[97|[98|[108|[101|[32|[97|[108|[108|[32|[119|[97|[114|[110|[105|[110|[103|[115]]]]]]]]]]]]]]]]]]]}|[{[45|[87]],[101|[110|[97|[98|[108|[101|[32|[119|[97|[114|[110|[105|[110|[103|[115|[32|[40|[100|[101|[102|[97|[117|[108|[116|[59|[32|[115|[97|[109|[101|[32|[97|[115|[32|[45|[87|[49|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[69]],[103|[101|[110|[101|[114|[97|[116|[101|[32|[108|[105|[115|[116|[105|[110|[103|[32|[111|[102|[32|[101|[120|[112|[97|[110|[100|[101|[100|[32|[99|[111|[100|[101|[32|[40|[69|[114|[108|[97|[110|[103|[32|[99|[111|[109|[112|[105|[108|[101|[114|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[83]],[103|[101|[110|[101|[114|[97|[116|[101|[32|[97|[115|[115|[101|[109|[98|[108|[121|[32|[108|[105|[115|[116|[105|[110|[103|[32|[40|[69|[114|[108|[97|[110|[103|[32|[99|[111|[109|[112|[105|[108|[101|[114|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[45|[80]],[103|[101|[110|[101|[114|[97|[116|[101|[32|[108|[105|[115|[116|[105|[110|[103|[32|[111|[102|[32|[112|[114|[101|[112|[114|[111|[99|[101|[115|[115|[101|[100|[32|[99|[111|[100|[101|[32|[40|[69|[114|[108|[97|[110|[103|[32|[99|[111|[109|[112|[105|[108|[101|[114|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[43|[116|[101|[114|[109]]]]],[112|[97|[115|[115|[32|[116|[104|[101|[32|[69|[114|[108|[97|[110|[103|[32|[116|[101|[114|[109|[32|[117|[110|[99|[104|[97|[110|[103|[101|[100|[32|[116|[111|[32|[116|[104|[101|[32|[99|[111|[109|[112|[105|[108|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      -| ['list_comprehension'] )
	in  do  %% Line 236
		call 'io':'put_chars'
		    ('standard_error', %% Line 237
				       [[85|[115|[97|[103|[101|[58|[32|[101|[114|[108|[99|[32|[91|[79|[112|[116|[105|[111|[110|[115|[93|[32|[102|[105|[108|[101|[46|[101|[120|[116|[32|[46|[46|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 238
																													  [[79|[112|[116|[105|[111|[110|[115|[58|[10]]]]]]]]]|%% Line 239
																																			      [_cor6|[]]]])
		%% Line 240
		'error'
'get_option'/3 =
    %% Line 242
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Name,[],[Option = [C|_cor8]|T]>
	      when call 'erlang':'=/='
		    (C,
		     45) ->
	      %% Line 243
	      {Option,T}
	  %% Line 244
	  <_X_Name,Option = [_cor9|_cor10],T> when 'true' ->
	      %% Line 245
	      {Option,T}
	  %% Line 246
	  <Name,_cor11,_cor12> when 'true' ->
	      let <_cor3> =
		  %% Line 247
		  call 'erlang':'++'
		      (Name, [32|[111|[112|[116|[105|[111|[110]]]]]]])
	      in  let <_cor4> =
		      %% Line 247
		      call 'erlang':'++'
			  ([78|[111|[32|[118|[97|[108|[117|[101|[32|[103|[105|[118|[101|[110|[32|[116|[111|[32|[45]]]]]]]]]]]]]]]]]]], _cor3)
		  in  %% Line 247
		      call 'erlang':'exit'
			  ({'compiler_error',_cor4})
	end
'split_at_equals'/2 =
    %% Line 249
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[61|T],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 250
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 250
		  {_cor2,T}
	  %% Line 251
	  <[H|T],Acc> when 'true' ->
	      %% Line 252
	      apply 'split_at_equals'/2
		  (T, [H|Acc])
	  %% Line 253
	  <[],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 254
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 254
		  {_cor3,[]}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'split_at_equals',2}}] )
	    -| ['compiler_generated'] )
	end
'compile2'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Files,Opts0 = {'options',Incl,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Outfile,Cwd}> when 'true' ->
	      let <_rec30> =
		  %% Line 257
		  call 'lists':'reverse'
		      (Incl)
	      in  let <_cor5> =
		      %% Line 257
		      call 'erlang':'setelement'
			  (2, Opts0, _rec30)
		  in  let <_cor7> =
			  %% Line 258
			  call 'erlang':'length'
			      (Files)
		      in  %% Line 258
			  case <Outfile,_cor7> of
			    %% Line 259
			    <[],_cor29> when 'true' ->
				%% Line 260
				apply 'compile3'/3
				    (Files, Cwd, _cor5)
			    %% Line 261
			    <[_cor30|_cor31],1> when 'true' ->
				%% Line 262
				apply 'compile3'/3
				    (Files, Cwd, _cor5)
			    %% Line 263
			    <[_cor32|_cor33],_X_N> when 'true' ->
				do  %% Line 264
				    call 'io':'put_chars'
					('standard_error', %% Line 265
							   [79|[117|[116|[112|[117|[116|[32|[102|[105|[108|[101|[32|[110|[97|[109|[101|[32|[103|[105|[118|[101|[110|[44|[32|[98|[117|[116|[32|[109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[101|[32|[105|[110|[112|[117|[116|[32|[102|[105|[108|[101|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    %% Line 267
				    'error'
			    ( <_fol320,_fol321> when 'true' ->
				  let <_cor8> = {_fol320,_fol321}
				  in  primop 'match_fail'
					  ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'compile2',2}}] )
	    -| ['compiler_generated'] )
	end
'compile3'/3 =
    %% Line 272
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[File|Rest],Cwd,Options> when 'true' ->
	      let <Ext> =
		  %% Line 273
		  call 'filename':'extension'
		      (File)
	      in  let <Root> =
		      %% Line 274
		      call 'filename':'rootname'
			  (File)
		  in  let <InFile> =
			  %% Line 275
			  call 'filename':'absname'
			      (Root, Cwd)
		      in  %% Line 277
			  ( case Options of
			      ( <( {'options',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec32,_cor26}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor12> =
					case _rec32 of
					  %% Line 278
					  <[]> when 'true' ->
					      let <_cor8> =
						  %% Line 279
						  call 'filename':'basename'
						      (Root)
					      in  %% Line 279
						  call 'filename':'join'
						      (_cor19, _cor8)
					  %% Line 280
					  <Outfile> when 'true' ->
					      %% Line 281
					      call 'filename':'rootname'
						  (Outfile)
					end
				    in  %% Line 283
					case apply 'compile_file'/4
						 (Ext, InFile, _cor12, Options) of
					  %% Line 284
					  <'ok'> when 'true' ->
					      %% Line 285
					      apply 'compile3'/3
						  (Rest, Cwd, Options)
					  %% Line 286
					  <Other> when 'true' ->
					      %% Line 287
					      Other
					end
				-| ['compiler_generated'] )
			      ( <_cor27> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','options'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 289
	  <[],_X_Cwd,_X_Options> when 'true' ->
	      'ok'
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'compile3',3}}] )
	    -| ['compiler_generated'] )
	end
'compile_file'/4 =
    %% Line 293
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],Input,_X_Output,_X_Options> when 'true' ->
	      do  %% Line 294
		  call 'io':'format'
		      ('standard_error', [70|[105|[108|[101|[32|[104|[97|[115|[32|[110|[111|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Input|[]])
		  %% Line 295
		  'error'
	  %% Line 296
	  <Ext,Input,Output,Options> when 'true' ->
	      %% Line 297
	      case apply 'compiler'/1
		       (Ext) of
		%% Line 298
		<'no'> when 'true' ->
		    do  %% Line 299
			call 'io':'format'
			    ('standard_error', [85|[110|[107|[110|[111|[119|[110|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[58|[32|[39|[126|[116|[115|[39|[10]]]]]]]]]]]]]]]]]]]]]]]]], [Ext|[]])
			%% Line 300
			'error'
		%% Line 301
		<{M,F}> when 'true' ->
		    let <_cor4> =
			catch
			    %% Line 302
			    call M:F
				(Input, Output, Options)
		    in  %% Line 302
			case _cor4 of
			  %% Line 303
			  <'ok'> when 'true' ->
			      'ok'
			  %% Line 304
			  <'error'> when 'true' ->
			      'error'
			  %% Line 305
			  <{'EXIT',Reason}> when 'true' ->
			      do  %% Line 306
				  call 'io':'format'
				      ('standard_error', %% Line 307
							 [67|[111|[109|[112|[105|[108|[101|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[51|[32|[102|[97|[105|[108|[101|[100|[58|[10|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 308
																																		   [M|[F|[Reason|[]]]])
				  %% Line 309
				  'error'
			  %% Line 310
			  <Other> when 'true' ->
			      do  %% Line 311
				  call 'io':'format'
				      ('standard_error', %% Line 312
							 [67|[111|[109|[112|[105|[108|[101|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[51|[32|[114|[101|[116|[117|[114|[110|[101|[100|[58|[10|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 313
																																				[M|[F|[Other|[]]]])
				  %% Line 314
				  'error'
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'file_or_directory'/1 =
    %% Line 320
    fun (_cor0) ->
	%% Line 321
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 322
	  <{'ok',{'file_info',_cor4,'regular',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}}> when 'true' ->
	      %% Line 323
	      'file'
	  %% Line 324
	  <{'ok',_cor16}> when 'true' ->
	      %% Line 325
	      'directory'
	  %% Line 326
	  <{'error',_cor17}> when 'true' ->
	      %% Line 327
	      case call 'filename':'extension'
		       (_cor0) of
		%% Line 328
		<[]> when 'true' ->
		    'directory'
		%% Line 329
		<_X_Other> when 'true' ->
		    'file'
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'make_term'/1 =
    %% Line 335
    fun (_cor0) ->
	%% Line 336
	case call 'erl_scan':'string'
		 (_cor0) of
	  %% Line 337
	  <{'ok',Tokens,_cor5}> when 'true' ->
	      let <_cor1> =
		  %% Line 338
		  call 'erlang':'++'
		      (Tokens, [{'dot',1}])
	      in  %% Line 338
		  case call 'erl_parse':'parse_term'
			   (_cor1) of
		    %% Line 339
		    <{'ok',Term}> when 'true' ->
			Term
		    %% Line 340
		    <{'error',{_cor6,_cor7,Reason}}> when 'true' ->
			do  %% Line 341
			    call 'io':'format'
				('standard_error', [126|[116|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]], [Reason|[_cor0|[]]])
			    %% Line 342
			    call 'erlang':'throw'
				('error')
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 344
	  <{'error',{_cor8,_cor9,Reason},_cor10}> when 'true' ->
	      do  %% Line 345
		  call 'io':'format'
		      ('standard_error', [126|[116|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]], [Reason|[_cor0|[]]])
		  %% Line 346
		  call 'erlang':'throw'
		      ('error')
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_compile')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_compile', _cor0)
end