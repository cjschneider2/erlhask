module 'qlc_pt' ['module_info'/0,
		 'module_info'/1,
		 'parse_transform'/2,
		 'transform_expression'/2,
		 'transform_from_evaluator'/2]
    attributes [%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','qlc_lc'},[{'record_field',38,{'atom',38,'lc'}}|[{'record_field',39,{'atom',39,'opt'}}]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','state'},[{'record_field',42,{'atom',42,'imp'}}|[{'record_field',42,{'atom',42,'maxargs'}}|[{'record_field',42,{'atom',42,'records'}}|[{'record_field',42,{'atom',42,'xwarnings'},{'nil',42}}]]]],[]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'parse_transform',2},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'Forms'}|[{'var',63,'Options'}]]}|[{'var',63,'Forms2'}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Forms'}|[{'type',64,'list',[{'remote_type',64,[{'atom',64,'erl_parse'}|[{'atom',64,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Forms2'}|[{'type',65,'list',[{'remote_type',65,[{'atom',65,'erl_parse'}|[{'atom',65,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Options'}|[{'type',66,'list',[{'var',66,'Option'}]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Option'}|[{'type',67,'union',[{'atom',67,'type_checker'}|[{'remote_type',67,[{'atom',67,'compile'}|[{'atom',67,'option'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'transform_from_evaluator',2},[{'type',102,'bounded_fun',[{'type',102,'fun',[{'type',102,'product',[{'var',102,'LC'}|[{'var',102,'Bs'}]]}|[{'var',102,'Expr'}]]}|[[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'LC'}|[{'remote_type',103,[{'atom',103,'erl_parse'}|[{'atom',103,'abstract_expr'}|[[]]]]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Expr'}|[{'remote_type',104,[{'atom',104,'erl_parse'}|[{'atom',104,'abstract_expr'}|[[]]]]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Bs'}|[{'remote_type',105,[{'atom',105,'erl_eval'}|[{'atom',105,'binding_struct'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'transform_expression',2},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'LC'}|[{'var',111,'Bs'}]]}|[{'var',111,'Expr'}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'LC'}|[{'remote_type',112,[{'atom',112,'erl_parse'}|[{'atom',112,'abstract_expr'}|[[]]]]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Expr'}|[{'remote_type',113,[{'atom',113,'erl_parse'}|[{'atom',113,'abstract_expr'}|[[]]]]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Bs'}|[{'remote_type',114,[{'atom',114,'erl_eval'}|[{'atom',114,'binding_struct'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','qid'},[{'record_field',159,{'atom',159,'lcid'}}|[{'record_field',159,{'atom',159,'no'}}]],[]}],
		%% Line 1556
		'type' =
		    %% Line 1556
		    [{{'record','fstate'},[{'record_field',1556,{'atom',1556,'state'}}|[{'record_field',1556,{'atom',1556,'bind_fun'}}|[{'record_field',1556,{'atom',1556,'imported'}}]]],[]}],
		%% Line 1877
		'type' =
		    %% Line 1877
		    [{{'record','bind'},[{'record_field',1877,{'atom',1877,'var'}}|[{'record_field',1877,{'atom',1877,'value'}}|[{'record_field',1877,{'atom',1877,'op'}}]]],[]}]]
'parse_transform'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 71
	    apply 'is_qlc_q_imported'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 73
		apply 'record_attributes'/1
		    (_cor1)
	    in  let <State> =
		    %% Line 71
		    {'state',_cor3,%% Line 72
				   250,_cor2,[]}
		in  %% Line 74
		    case apply 'called_from_type_checker'/1
			     (_cor0) of
		      %% Line 75
		      <'true'> when 'true' ->
			  %% Line 79
			  case apply 'abstr'/2
				   ({'qlc_lc','undefined','undefined'}, 0) of
			    <{'tuple',_cor30,Fs0}> when 'true' ->
				let <F> =
				    %% Line 80
				    ( fun (_cor11,_cor10,_cor9) ->
					  let <Init> =
					      %% Line 81
					      apply 'simple'/4
						  (0, 'V', _cor10, 0)
					  in  let <_cor8> =
						  %% Line 82
						  apply 'set_field'/3
						      (2, Fs0, Init)
					      in  %% Line 82
						  {{'tuple',0,_cor8},_cor9}
				      -| [{'id',{0,0,'-parse_transform/2-fun-0-'}}] )
				in  %% Line 84
				    case apply 'qlc_mapfold'/4
					     (F, 'ok', _cor1, State) of
				      <{Forms1,'ok'}> when 'true' ->
					  %% Line 85
					  Forms1
				      ( <_cor16> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor16})
					-| ['compiler_generated'] )
				    end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      %% Line 86
		      <'false'> when 'true' ->
			  let <FormsNoShadows> =
			      %% Line 87
			      apply 'no_shadows'/2
				  (_cor1, State)
			  in  %% Line 88
			      case apply 'compile_messages'/4
				       (_cor1, FormsNoShadows, _cor0, State) of
				%% Line 89
				<{[],[],Warnings}> when 'true' ->
				    %% Line 90
				    case apply 'transform'/2
					     (FormsNoShadows, State) of
				      <{NewForms,State1}> when 'true' ->
					  %% Line 91
					  ( case State1 of
					      ( <( {'state',_cor31,_cor32,_cor33,_rec0}
						   -| ['compiler_generated'] )> when 'true' ->
						    %% Line 92
						    case apply 'no_duplicates'/5
							     (NewForms, [], Warnings, _rec0, _cor0) of
						      <{[],WForms}> when 'true' ->
							  %% Line 94
							  call 'erlang':'++'
							      (WForms, NewForms)
						      ( <_cor22> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor22})
							-| ['compiler_generated'] )
						    end
						-| ['compiler_generated'] )
					      ( <_cor34> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','state'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_cor18> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor18})
					-| ['compiler_generated'] )
				    end
				%% Line 95
				<{E0,Errors,Warnings}> when 'true' ->
				    let <_cor23> =
					%% Line 96
					call 'erlang':'++'
					    (E0, Errors)
				    in  %% Line 96
					case apply 'no_duplicates'/5
						 (_cor1, _cor23, %% Line 97
								 Warnings, %% Line 97
									   [], _cor0) of
					  <{EForms,WForms}> when 'true' ->
					      let <_cor25> =
						  %% Line 98
						  call 'erlang':'++'
						      (WForms, _cor1)
					      in  %% Line 98
						  call 'erlang':'++'
						      (EForms, _cor25)
					  ( <_cor24> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor24})
					    -| ['compiler_generated'] )
					end
				( <_cor26> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor26})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor27> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor27})
			-| ['compiler_generated'] )
		    end
'transform_from_evaluator'/2 =
    %% Line 107
    fun (_cor1,_cor0) ->
	%% Line 109
	apply 'transform_expression'/3
	    (_cor1, _cor0, 'false')
'transform_expression'/2 =
    %% Line 116
    fun (_cor1,_cor0) ->
	%% Line 117
	apply 'transform_expression'/3
	    (_cor1, _cor0, 'true')
'called_from_type_checker'/1 =
    %% Line 123
    fun (_cor0) ->
	%% Line 124
	call 'lists':'member'
	    ('type_checker', _cor0)
'transform_expression'/3 =
    %% Line 126
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 128
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[{V,_X_Val}|_cor5]> when 'true' ->
				let <_cor7> =
				    apply 'lc$^0'/1
					(_cor5)
				in  ( [{'var',1,V}|_cor7]
				      -| ['compiler_generated'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <Ar> =
		%% Line 129
		call 'erlang':'length'
		    (_cor8)
	    in  let <F> =
		    %% Line 130
		    {'function',1,'bar',Ar,[{'clause',1,_cor8,[],[{'call',1,{'remote',1,{'atom',1,'qlc'},{'atom',1,'q'}},[_cor2|[]]}|[]]}|[]]}
		in  let <Forms> =
			%% Line 131
			[{'attribute',1,'file',{[102|[111|[111]]],1}}|%% Line 132
								      [{'attribute',1,'module','foo'}|[F|[]]]]
		    in  let <_cor13> =
			    %% Line 135
			    apply 'record_attributes'/1
				(Forms)
			in  let <State> =
				%% Line 133
				{'state','false',%% Line 134
						 20,_cor13,[]}
			    in  let <FormsNoShadows> =
				    %% Line 137
				    apply 'no_shadows'/2
					(Forms, State)
				in  %% Line 138
				    case apply 'compile_messages'/4
					     (Forms, FormsNoShadows, [], State) of
				      %% Line 139
				      <{[],[],_X_Warnings}> when 'true' ->
					  %% Line 140
					  case apply 'transform'/2
						   (FormsNoShadows, State) of
					    <{NewForms,_X_State1}> when 'true' ->
						%% Line 141
						case %% Line 142
						     call 'lists':'last'
							 (NewForms) of
						  <{'function',_cor27,'bar',_cor28,[{'clause',_cor29,_cor30,[],[NF|[]]}|[]]}>
						      when let <_cor35> =
							    call 'erlang':'=:='
								(_cor27, 1)
							in  let <_cor33> =
								call 'erlang':'=:='
								    (_cor28, Ar)
							    in  let <_cor31> =
								    call 'erlang':'=:='
									(_cor29, 1)
								in  let <_cor32> =
									call 'erlang':'=:='
									    (_cor30, _cor8)
								    in  let <_cor34> =
									    call 'erlang':'and'
										(_cor31, _cor32)
									in  let <_cor36> =
										call 'erlang':'and'
										    (_cor33, _cor34)
									    in  call 'erlang':'and'
										    (_cor35, _cor36) ->
						      %% Line 143
						      {'ok',NF}
						  ( <_cor18> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor18})
						    -| ['compiler_generated'] )
						end
					    ( <_cor17> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor17})
					      -| ['compiler_generated'] )
					  end
				      %% Line 144
				      <{E0,Errors,_X_Warnings}>
					  when call 'erlang':'=:='
						(_cor0,
						 'true') ->
					  let <_cor19> =
					      %% Line 145
					      call 'erlang':'++'
						  (E0, Errors)
					  in  let <_cor20> =
						  %% Line 145
						  apply 'mforms'/2
						      ('error', _cor19)
					      in  %% Line 145
						  {'not_ok',_cor20}
				      %% Line 146
				      <{E0,Errors0,_X_Warnings}> when 'true' ->
					  let <_cor21> =
					      %% Line 147
					      call 'erlang':'++'
						  (E0, Errors0)
					  in  %% Line 147
					      case apply 'mforms'/2
						       ('error', _cor21) of
						<[{'error',Reason}|_cor37]> when 'true' ->
						    %% Line 148
						    {'not_ok',{'error','qlc',Reason}}
						( <_cor22> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor22})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor23> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor23})
					-| ['compiler_generated'] )
				    end
'mforms'/2 =
    %% Line 161
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 162
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[{_X_File,Ms}|_cor3]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[M|_cor5]> when 'true' ->
						    let <_cor8> =
							apply 'lc$^1'/1
							    (_cor5)
						    in  ( [{_cor1,M}|_cor8]
							  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor3)
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (Ms)
				  -| ['list_comprehension'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 162
	    call 'lists':'sort'
		(_cor9)
'no_duplicates'/5 =
    %% Line 167
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor18> =
	    %% Line 170
	    apply 'mforms'/1
		(_cor2)
	in  let <_cor10> =
		%% Line 175
		( letrec
		      'lc$^0'/1 =
			  fun (_cor8) ->
			      case _cor8 of
				<[%% Line 176
				  {File,[{L,'qlc',M}|[]]}|_cor6]>
				    when %% Line 177
				      call 'erlang':'=:='
					  (M,
					   'nomatch_filter') ->
				    let <_cor9> =
					%% Line 176
					apply 'lc$^0'/1
					    (_cor6)
				    in  ( [{File,[{L,'sys_core_fold','nomatch_guard'}|[]]}|_cor9]
					  -| ['compiler_generated'] )
				( <[_cor5|_cor6]> when 'true' ->
				      %% Line 176
				      apply 'lc$^0'/1
					  (_cor6)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor8> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor8})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor7> =
			  %% Line 176
			  apply 'mforms'/1
			      (_cor1)
		      in  apply 'lc$^0'/1
			      (_cor7)
		  -| ['list_comprehension'] )
	    in  let <_cor17> =
		    %% Line 171
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor14) ->
				  case _cor14 of
				    <[%% Line 172
				      {File,[{L,'qlc',M}|[]]}|_cor12]> when 'true' ->
					%% Line 173
					( case call 'lists':'member'
						   (M, ['nomatch_pattern'|['nomatch_filter']]) of
					    <'true'> when 'true' ->
						let <_cor15> =
						    apply 'lc$^1'/1
							(_cor12)
						in  ( [{File,[{L,'v3_core','nomatch'}|[]]}|_cor15]
						      -| ['compiler_generated'] )
					    ( <'false'> when 'true' ->
						  apply 'lc$^1'/1
						      (_cor12)
					      -| ['compiler_generated'] )
					    ( <_cor16> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor16})
					      -| ['compiler_generated'] )
					  end
					  -| ['list_comprehension'] )
				    ( <[_cor11|_cor12]> when 'true' ->
					  %% Line 172
					  apply 'lc$^1'/1
					      (_cor12)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					_cor10
				    ( <_cor14> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor14})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor13> =
			      %% Line 172
			      apply 'mforms'/1
				  (_cor1)
			  in  apply 'lc$^1'/1
				  (_cor13)
		      -| ['list_comprehension'] )
		in  let <Warnings1> =
			%% Line 170
			call 'erlang':'--'
			    (_cor18, _cor17)
		    in  let <Warnings> =
			    %% Line 178
			    call 'erlang':'++'
				(Warnings1, _cor1)
			in  %% Line 179
			    case apply 'compile_forms'/2
				     (_cor4, _cor0) of
			      <{Es1,Ws1}> when 'true' ->
				  let <_cor23> =
				      %% Line 180
				      apply 'mforms'/1
					  (_cor3)
				  in  let <_cor22> =
					  %% Line 180
					  apply 'mforms'/1
					      (Es1)
				      in  let <Es> =
					      %% Line 180
					      call 'erlang':'--'
						  (_cor23, _cor22)
					  in  let <_cor26> =
						  %% Line 181
						  apply 'mforms'/1
						      (Warnings)
					      in  let <_cor25> =
						      %% Line 181
						      apply 'mforms'/1
							  (Ws1)
						  in  let <Ws> =
							  %% Line 181
							  call 'erlang':'--'
							      (_cor26, _cor25)
						      in  let <_cor29> =
							      %% Line 182
							      apply 'mforms2'/2
								  ('error', Es)
							  in  let <_cor28> =
								  %% Line 182
								  apply 'mforms2'/2
								      ('warning', Ws)
							      in  %% Line 182
								  {_cor29,_cor28}
			      ( <_cor21> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor21})
				-| ['compiler_generated'] )
			    end
'mforms'/1 =
    %% Line 184
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 185
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{File,Ms}|_cor2]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor6) ->
					      case _cor6 of
						<[M|_cor4]> when 'true' ->
						    let <_cor7> =
							apply 'lc$^1'/1
							    (_cor4)
						    in  ( [{File,[M|[]]}|_cor7]
							  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor2)
						( <_cor6> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor6})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (Ms)
				  -| ['list_comprehension'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 185
	    call 'lists':'sort'
		(_cor8)
'mforms2'/2 =
    %% Line 187
    fun (_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 189
	    ( fun (_cor8) ->
		  case _cor8 of
		    <{File,Ms}> when 'true' ->
			%% Line 190
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[%% Line 191
					  M|_cor5]> when 'true' ->
					    let <_cor7> =
						%% Line 191
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [[{'attribute',0,'file',{File,0}}|[{_cor1,M}|[]]]|_cor7]
						  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (%% Line 191
				   Ms)
			  -| ['list_comprehension'] )
		    ( <_cor9> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor9})
			    -| [{'function_name',{'-mforms2/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mforms2/2-fun-0-'}}] )
	in  let <_cor3> =
		%% Line 192
		call 'lists':'sort'
		    (_cor0)
	    in  let <ML> =
		    %% Line 189
		    call 'lists':'flatmap'
			(_cor10, _cor3)
		in  let <_cor12> =
			%% Line 193
			call 'lists':'sort'
			    (ML)
		    in  %% Line 193
			call 'lists':'flatten'
			    (_cor12)
'is_qlc_q_imported'/1 =
    %% Line 195
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 196
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{'attribute',_cor10,'import',{'qlc',FAs}}|_cor2]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor6) ->
					      case _cor6 of
						<[{'q',1}|_cor4]> when 'true' ->
						    let <_cor7> =
							apply 'lc$^1'/1
							    (_cor4)
						    in  ( [[]|_cor7]
							  -| ['compiler_generated'] )
						( <[_cor3|_cor4]> when 'true' ->
						      apply 'lc$^1'/1
							  (_cor4)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor2)
						( <_cor6> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor6})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (FAs)
				  -| ['list_comprehension'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 196
	    call 'erlang':'=/='
		(_cor8, [])
'record_attributes'/1 =
    %% Line 198
    fun (_cor0) ->
	%% Line 199
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[A = {'attribute',_cor6,'record',_X_D}|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [A|_cor4]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'compile_messages'/4 =
    %% Line 207
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <BGenF> =
	    %% Line 209
	    ( fun (_cor10,_cor9,_cor8,_cor7) ->
		  case <_cor10,_cor9,_cor8,_cor7> of
		    <_X_QId,BGen = {'b_generate',Line,_X_P,_X_LE},GA,A> when 'true' ->
			let <_cor4> =
			    %% Line 210
			    apply 'loc'/1
				(Line)
			in  let <M> = {_cor4,%% Line 210
				       'qlc',%% Line 210
					     'binary_generator'}
			    in  let <_cor6> =
				    %% Line 211
				    call 'erlang':'get'
					('qlc_current_file')
				in  %% Line 211
				    {BGen,[{_cor6,[M|[]]}|GA],A}
		    %% Line 212
		    <_X_QId,Q,GA,A> when 'true' ->
			%% Line 213
			{Q,GA,A}
		  end
	      -| [{'id',{0,0,'-compile_messages/4-fun-0-'}}] )
	in  %% Line 215
	    case apply 'qual_fold'/5
		     (BGenF, [], [], _cor2, _cor0) of
	      <{_cor38,BGens}> when 'true' ->
		  let <GenForm> =
		      %% Line 216
		      apply 'used_genvar_check'/2
			  (_cor2, _cor0)
		  in  let <WarnFun> =
			  %% Line 218
			  ( fun (_cor22,_cor21,_cor20) ->
				let <_cor18> =
				    apply 'get_lcid_no'/1
					(_cor22)
				in  let <_cor19> =
					apply 'tag_lines'/2
					    (_cor21, _cor18)
				    in  {_cor19,_cor20}
			    -| [{'id',{0,0,'-compile_messages/4-fun-1-'}}] )
		      in  %% Line 219
			  case apply 'qlc_mapfold'/4
				   (WarnFun, 'ok', _cor3, _cor0) of
			    <{WForms,'ok'}> when 'true' ->
				let <_cor28> =
				    %% Line 220
				    call 'erlang':'++'
					(WForms, [GenForm|[]])
				in  %% Line 220
				    case apply 'compile_forms'/2
					     (_cor28, _cor1) of
				      <{Es,Ws}> when 'true' ->
					  let <_cor33> =
					      %% Line 221
					      apply 'badarg'/2
						  (_cor3, _cor0)
					  in  let <_cor31> =
						  %% Line 221
						  apply 'tagged_messages'/1
						      (Es)
					      in  let <_cor32> =
						      %% Line 221
						      call 'erlang':'++'
							  (_cor31, BGens)
						  in  let <_cor30> =
							  %% Line 221
							  apply 'tagged_messages'/1
							      (Ws)
						      in  %% Line 221
							  {_cor33,_cor32,_cor30}
				      ( <_cor29> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor29})
					-| ['compiler_generated'] )
				    end
			    ( <_cor27> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor27})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor16> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor16})
		-| ['compiler_generated'] )
	    end
'badarg'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 224
	    ( fun (_cor7,_cor6,_cor5) ->
		  case <_cor7,_cor6,_cor5> of
		    <_X_Id,LC = {'lc',_X_L,_X_E,_X_Qs},Es> when 'true' ->
			%% Line 225
			{LC,Es}
		    %% Line 226
		    <Id,A,Es> when 'true' ->
			let <_cor2> =
			    %% Line 227
			    apply 'get_lcid_line'/1
				(Id)
			in  let <E> = {_cor2,%% Line 227
				       'qlc',%% Line 227
					     'not_a_query_list_comprehension'}
			    in  let <_cor4> =
				    %% Line 228
				    call 'erlang':'get'
					('qlc_current_file')
				in  %% Line 228
				    {A,[{_cor4,[E|[]]}|Es]}
		  end
	      -| [{'id',{0,0,'-badarg/2-fun-0-'}}] )
	in  %% Line 230
	    case apply 'qlc_mapfold'/4
		     (F, [], _cor1, _cor0) of
	      <{_cor15,E0}> when 'true' ->
		  %% Line 231
		  E0
	      ( <_cor12> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor12})
		-| ['compiler_generated'] )
	    end
'tag_lines'/2 =
    %% Line 233
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 234
	    ( fun (_cor3) ->
		  %% Line 235
		  case apply 'is_lcid'/1
			   (_cor3) of
		    %% Line 236
		    <'true'> when 'true' ->
			_cor3
		    %% Line 237
		    <'false'> when 'true' ->
			apply 'make_lcid'/2
			    (_cor3, _cor0)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-tag_lines/2-fun-0-'}}] )
	in  %% Line 234
	    apply 'map_lines'/2
		(_cor5, _cor1)
'map_lines'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	%% Line 242
	call 'erl_lint':'modify_line'
	    (_cor0, _cor1)
'tagged_messages'/1 =
    %% Line 244
    fun (_cor0) ->
	let <_cor12> =
	    %% Line 250
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[%% Line 251
			      {_cor28,Ms}|_cor2]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor9) ->
					      case _cor9 of
						<[%% Line 252
						  {XLoc,'erl_lint',{'unbound_var',_cor29}}|_cor4]> when 'true' ->
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor10) ->
								  case _cor10 of
								    <[%% Line 253
								      {Loc,File,V}|_cor6]> when 'true' ->
									let <_cor11> =
									    %% Line 253
									    apply 'lc$^2'/1
										(_cor6)
									in  ( [{File,[{Loc,'qlc',{'used_generator_variable',V}}|[]]}|_cor11]
									      -| ['compiler_generated'] )
								    ( <[_cor5|_cor6]> when 'true' ->
									  %% Line 253
									  apply 'lc$^2'/1
									      (_cor6)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									%% Line 252
									apply 'lc$^1'/1
									    (_cor4)
								    ( <_cor10> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor10})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  let <_cor7> =
							      %% Line 253
							      apply 'extra'/1
								  (XLoc)
							  in  apply 'lc$^2'/1
								  (%% Line 253
								   [_cor7|[]])
						      -| ['list_comprehension'] )
						( <[_cor3|_cor4]> when 'true' ->
						      %% Line 252
						      apply 'lc$^1'/1
							  (_cor4)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 251
						    apply 'lc$^0'/1
							(_cor2)
						( <_cor9> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor9})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (%% Line 252
					   Ms)
				  -| ['list_comprehension'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 251
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 245
	    ( letrec
		  'lc$^3'/1 =
		      fun (_cor15) ->
			  case _cor15 of
			    <[%% Line 248
			      {File,Ms}|_cor14]> when 'true' ->
				let <_cor25> =
				    %% Line 246
				    ( letrec
					  'lc$^4'/1 =
					      fun (_cor21) ->
						  case _cor21 of
						    <[{Loc0,Mod,T}|_cor17]> when 'true' ->
							( letrec
							      'lc$^5'/1 =
								  fun (_cor22) ->
								      case _cor22 of
									<[%% Line 247
									  {'true',Loc}|_cor19]> when 'true' ->
									    let <_cor23> =
										apply 'untag'/1
										    (T)
									    in  let <_cor24> =
										    %% Line 247
										    apply 'lc$^5'/1
											(_cor19)
										in  ( [{Loc,Mod,_cor23}|_cor24]
										      -| ['compiler_generated'] )
									( <[_cor18|_cor19]> when 'true' ->
									      %% Line 247
									      apply 'lc$^5'/1
										  (_cor19)
									  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    apply 'lc$^4'/1
										(_cor17)
									( <_cor22> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor22})
										-| [{'function_name',{'lc$^5',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  let <_cor20> =
								  %% Line 247
								  apply 'tloc'/1
								      (Loc0)
							      in  apply 'lc$^5'/1
								      (%% Line 247
								       [_cor20|[]])
							  -| ['list_comprehension'] )
						    ( <[_cor16|_cor17]> when 'true' ->
							  apply 'lc$^4'/1
							      (_cor17)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor21> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor21})
							    -| [{'function_name',{'lc$^4',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^4'/1
					      (Ms)
				      -| ['list_comprehension'] )
				in  let <_cor26> =
					%% Line 248
					apply 'lc$^3'/1
					    (_cor14)
				    in  ( [{File,_cor25}|_cor26]
					  -| ['compiler_generated'] )
			    ( <[_cor13|_cor14]> when 'true' ->
				  %% Line 248
				  apply 'lc$^3'/1
				      (_cor14)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				_cor12
			    ( <_cor15> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor15})
				    -| [{'function_name',{'lc$^3',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^3'/1
		      (_cor0)
	      -| ['list_comprehension'] )
'tloc'/1 =
    %% Line 255
    fun (_cor0) ->
	case _cor0 of
	  <{Id,Column}> when 'true' ->
	      %% Line 256
	      case apply 'tloc'/1
		       (Id) of
		<{IsLcid,T}> when 'true' ->
		    %% Line 257
		    {IsLcid,{T,Column}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 258
	  <Id> when 'true' ->
	      let <IsLcid> =
		  %% Line 259
		  apply 'is_lcid'/1
		      (Id)
	      in  let <_cor4> =
		      %% Line 260
		      case IsLcid of
			%% Line 261
			<'true'> when 'true' ->
			    apply 'get_lcid_line'/1
				(Id)
			%% Line 262
			<'false'> when 'true' ->
			    'any'
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 260
		      {IsLcid,_cor4}
	end
'extra'/1 =
    %% Line 265
    fun (_cor0) ->
	case _cor0 of
	  <{'extra',Line,File,V}> when 'true' ->
	      %% Line 266
	      {Line,File,V}
	  %% Line 267
	  <{Line,Column}> when 'true' ->
	      %% Line 268
	      case apply 'extra'/1
		       (Line) of
		%% Line 269
		<{L,File,V}> when 'true' ->
		    {{L,Column},File,V}
		%% Line 270
		<Else> when 'true' ->
		    Else
	      end
	  %% Line 272
	  <Else> when 'true' ->
	      %% Line 273
	      Else
	end
'untag'/1 =
    %% Line 275
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor1> =
		  apply 'untag'/1
		      (E)
	      in  let <_cor2> =
		      apply 'untag'/1
			  (Es)
		  in  [_cor1|_cor2]
	  %% Line 276
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor3> =
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor4> =
		      apply 'untag'/1
			  (_cor3)
		  in  call 'erlang':'list_to_tuple'
			  (_cor4)
	  %% Line 277
	  <E> when 'true' ->
	      %% Line 278
	      case apply 'is_lcid'/1
		       (E) of
		%% Line 279
		<'true'> when 'true' ->
		    apply 'get_lcid_line'/1
			(E)
		%% Line 280
		<'false'> when 'true' ->
		    E
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'intro_variables'/2 =
    %% Line 295
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 296
	    ( fun (_cor24,_cor23,_cor22,_cor21) ->
		  case <_cor24,_cor23,_cor22,_cor21> of
		    <QId,Q = {T,_X_L,P0,_X_E0},{GVs,QIds},Foo>
			when let <_cor2> =
			      call 'erlang':'=:='
				  (T, 'b_generate')
			  in  let <_cor3> =
				  %% Line 297
				  call 'erlang':'=:='
				      (T, 'generate')
			      in  call 'erlang':'or'
				      (_cor2, _cor3) ->
			let <_cor6> =
			    %% Line 298
			    ( fun (_cor4) ->
				  case _cor4 of
				    <{'var',_cor59,V}> when 'true' ->
					{QId,V}
				    ( <_cor5> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor5})
					    -| [{'function_name',{'-intro_variables/2-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-intro_variables/2-fun-0-'}}] )
			in  let <PVs> =
				%% Line 298
				call 'qlc':'var_ufold'
				    (_cor6, P0)
			    in  let <_cor8> =
				    %% Line 299
				    call 'ordsets':'to_list'
					(PVs)
				in  let <_cor9> =
					%% Line 299
					call 'erlang':'++'
					    (_cor8, GVs)
				    in  %% Line 299
					{Q,{_cor9,[{QId,[]}|QIds]},Foo}
		    %% Line 300
		    <QId,Filter0,{GVs,QIds},Foo> when 'true' ->
			let <_cor10> =
			    %% Line 304
			    call 'qlc':'vars'
				(Filter0)
			in  let <Vs> =
				%% Line 304
				call 'ordsets':'to_list'
				    (_cor10)
			    in  %% Line 305
				( case QId of
				    ( <( {'qid',_rec1,_cor60}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor15> =
					      %% Line 306
					      apply 'intro_set_line'/2
						  ({QId,'f1'}, Vs)
					  in  let <LC1> =
						  %% Line 306
						  apply 'embed_vars'/2
						      (_cor15, _rec1)
					      in  let <_cor17> =
						      %% Line 307
						      apply 'intro_set_line'/2
							  ({QId,'f2'}, Vs)
						  in  let <LC2> =
							  %% Line 307
							  apply 'embed_vars'/2
							      (_cor17, _rec1)
						      in  let <Filter> =
							      %% Line 309
							      {'block',-1,[LC1|[Filter0|[LC2|[]]]]}
							  in  %% Line 310
							      {Filter,{GVs,[{QId,[]}|QIds]},Foo}
				      -| ['compiler_generated'] )
				    ( <_cor61> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','qid'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor28,_cor27,_cor26,_cor25})
			    -| [{'function_name',{'-intro_variables/2-fun-1-',4}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-intro_variables/2-fun-1-'}}] )
	in  %% Line 313
	    case %% Line 314
		 apply 'qual_fold'/5
		     (Fun, {[],[]}, [], _cor1, _cor0) of
	      <{FForms,{GenVars,QIds}}> when 'true' ->
		  let <Es0> =
		      %% Line 317
		      apply 'compile_errors'/1
			  (FForms)
		  in  let <_cor37> =
			  %% Line 320
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor35) ->
					case _cor35 of
					  <[{{QId,'f1'},'erl_lint',{'unbound_var',V}}|_cor34]> when 'true' ->
					      let <_cor36> =
						  apply 'lc$^0'/1
						      (_cor34)
					      in  ( [{QId,V}|_cor36]
						    -| ['compiler_generated'] )
					  ( <[_cor33|_cor34]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor34)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor35> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor35})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Es0)
			    -| ['list_comprehension'] )
		      in  let <_cor43> =
			      %% Line 321
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor41) ->
					    case _cor41 of
					      <[{{QId,'f2'},'erl_lint',{'unbound_var',V}}|_cor40]> when 'true' ->
						  let <_cor42> =
						      apply 'lc$^1'/1
							  (_cor40)
						  in  ( [{QId,V}|_cor42]
							-| ['compiler_generated'] )
					      ( <[_cor39|_cor40]> when 'true' ->
						    apply 'lc$^1'/1
							(_cor40)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor41> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor41})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(Es0)
				-| ['list_comprehension'] )
			  in  let <_cor49> =
				  %% Line 322
				  ( letrec
					'lc$^2'/1 =
					    fun (_cor47) ->
						case _cor47 of
						  <[{{QId,'f2'},'erl_lint',{'unsafe_var',V,_X_Where}}|_cor46]> when 'true' ->
						      let <_cor48> =
							  apply 'lc$^2'/1
							      (_cor46)
						      in  ( [{QId,V}|_cor48]
							    -| ['compiler_generated'] )
						  ( <[_cor45|_cor46]> when 'true' ->
							apply 'lc$^2'/1
							    (_cor46)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor47> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor47})
							  -| [{'function_name',{'lc$^2',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^2'/1
					    (Es0)
				    -| ['list_comprehension'] )
			      in  let <_cor51> =
				      %% Line 327
				      call 'erlang':'--'
					  (_cor37, _cor43)
				  in  let <IV> =
					  %% Line 327
					  call 'erlang':'--'
					      (_cor51, _cor49)
				      in  let <_cor53> =
					      %% Line 328
					      call 'erlang':'++'
						  (IV, GenVars)
					  in  let <I1> =
						  %% Line 328
						  apply 'family'/1
						      (_cor53)
					      in  let <_cor55> =
						      %% Line 329
						      call 'sofs':'family'
							  (QIds)
						  in  let <_cor56> =
							  %% Line 329
							  call 'sofs':'family_union'
							      (_cor55, I1)
						      in  %% Line 329
							  call 'sofs':'to_external'
							      (_cor56)
	      ( <_cor31> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor31})
		-| ['compiler_generated'] )
	    end
'intro_set_line'/2 =
    %% Line 331
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 332
	    ( fun (_cor2) ->
		  _cor1
	      -| [{'id',{0,0,'-intro_set_line/2-fun-0-'}}] )
	in  let <L> =
		%% Line 332
		call 'erl_parse':'set_line'
		    (1, _cor4)
	    in  %% Line 333
		( letrec
		      'lc$^0'/1 =
			  fun (_cor8) ->
			      case _cor8 of
				<[V|_cor7]> when 'true' ->
				    let <_cor9> =
					apply 'lc$^0'/1
					    (_cor7)
				    in  ( [{'var',L,V}|_cor9]
					  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor8> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor8})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
'compile_errors'/1 =
    %% Line 335
    fun (_cor0) ->
	%% Line 336
	case apply 'compile_forms'/2
		 (_cor0, []) of
	  %% Line 337
	  <{[],_X_Warnings}> when 'true' ->
	      %% Line 338
	      []
	  %% Line 339
	  <{Errors,_X_Warnings}> when 'true' ->
	      let <_cor3> =
		  %% Line 341
		  ( fun (_cor1) ->
			case _cor1 of
			  <{_X_File,Es}> when 'true' ->
			      Es
			  ( <_cor2> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor2})
				  -| [{'function_name',{'-compile_errors/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-compile_errors/1-fun-0-'}}] )
	      in  %% Line 341
		  call 'lists':'flatmap'
		      (_cor3, Errors)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'compile_forms'/2 =
    %% Line 346
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 347
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[F|_cor4]>
				when try
				      let <_cor5> =
					  call 'erlang':'element'
					      (1, F)
				      in  call 'erlang':'=/='
					      (_cor5, 'eof')
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [F|_cor7]
				      -| ['compiler_generated'] )
			    ( <[F|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				%% Line 348
				[{'eof',8388608}]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  %% Line 349
	    try
		let <_cor10> =
		    %% Line 350
		    apply 'compile_options'/1
			(_cor0)
		in  %% Line 350
		    case call 'compile':'noenv_forms'
			     (_cor8, _cor10) of
		      %% Line 351
		      <{'ok',_X_ModName,Ws0}> when 'true' ->
			  %% Line 352
			  {[],Ws0}
		      %% Line 353
		      <{'error',Es0,Ws0}> when 'true' ->
			  %% Line 354
			  {Es0,Ws0}
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
	    of <_cor12> ->
		_cor12
	    catch <_cor15,_cor14,_cor13> ->
		let <_cor16> =
		    %% Line 358
		    apply 'lint_options'/1
			(_cor0)
		in  %% Line 358
		    case call 'erl_lint':'module'
			     (_cor8, _cor16) of
		      %% Line 359
		      <{'ok',Warnings}> when 'true' ->
			  %% Line 360
			  {[],Warnings}
		      %% Line 361
		      <{'error',Errors,Warnings}> when 'true' ->
			  %% Line 362
			  {Errors,Warnings}
		      ( <_cor17> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor17})
			-| ['compiler_generated'] )
		    end
'compile_options'/1 =
    %% Line 366
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 367
	    apply 'bitstr_options'/0
		()
	in  let <No> =
		%% Line 367
		['report'|['report_errors'|['report_warnings'|['P'|['E'|_cor1]]]]]
	    in  let <_cor3> =
		    %% Line 368
		    apply 'skip_options'/2
			(No, _cor0)
		in  %% Line 368
		    ['strong_validation'|['return'|_cor3]]
'lint_options'/1 =
    %% Line 370
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 371
	    apply 'bitstr_options'/0
		()
	in  %% Line 371
	    apply 'skip_options'/2
		(_cor1, _cor0)
'skip_options'/2 =
    %% Line 373
    fun (_cor1,_cor0) ->
	%% Line 374
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[O|_cor3]> when 'true' ->
			    ( case call 'lists':'member'
				       (O, _cor1) of
				<'false'> when 'true' ->
				    let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [O|_cor6]
					  -| ['compiler_generated'] )
				( <'true'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'bitstr_options'/0 =
    %% Line 376
    fun () ->
	%% Line 377
	['binary_comprehension'|['bitlevel_binaries']]
'used_genvar_check'/2 =
    %% Line 391
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 392
	    ( fun (_cor30,_cor29,_cor28,_cor27) ->
		  case <_cor30,_cor29,_cor28,_cor27> of
		    <QId,Q = {T,Ln,_X_P,LE},{QsIVs0,Exprs0},IVsSoFar0>
			when let <_cor2> =
			      %% Line 393
			      call 'erlang':'=:='
				  (T, 'b_generate')
			  in  let <_cor3> =
				  %% Line 393
				  call 'erlang':'=:='
				      (T, 'generate')
			      in  %% Line 393
				  call 'erlang':'or'
				      (_cor2, _cor3) ->
			let <F> =
			    %% Line 394
			    ( fun (_cor10) ->
				  case _cor10 of
				    <Var = {'var',_cor50,V}> when 'true' ->
					%% Line 395
					case apply 'undo_no_shadows'/1
						 (Var) of
					  <{'var',L,OrigVar}> when 'true' ->
					      let <AF> =
						  %% Line 396
						  ( fun (_cor6) ->
							let <_cor5> =
							    %% Line 397
							    call 'erlang':'get'
								('qlc_current_file')
							in  %% Line 397
							    {'extra',_cor6,_cor5,OrigVar}
						    -| [{'id',{0,0,'-used_genvar_check/2-fun-0-'}}] )
					      in  let <L2> =
						      %% Line 399
						      call 'erl_parse':'set_line'
							  (L, AF)
						  in  %% Line 400
						      {'var',L2,V}
					  ( <_cor4> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor4})
					    -| ['compiler_generated'] )
					end
				    ( <_cor11> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11})
					    -| [{'function_name',{'-used_genvar_check/2-fun-1-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-used_genvar_check/2-fun-1-'}}] )
			in  let <_cor19> =
				%% Line 402
				( letrec
				      'lc$^0'/1 =
					  fun (_cor16) ->
					      case _cor16 of
						<[Var = {'var',_cor51,V}|_cor14]> when 'true' ->
						    %% Line 403
						    ( case call 'lists':'member'
							       (V, IVsSoFar0) of
							<'true'> when 'true' ->
							    let <_cor17> =
								apply 'lc$^0'/1
								    (_cor14)
							    in  ( [Var|_cor17]
								  -| ['compiler_generated'] )
							( <'false'> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor14)
							  -| ['compiler_generated'] )
							( <_cor18> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor18})
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
						( <[_cor13|_cor14]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor14)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor16> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor16})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor15> =
					  call 'qlc':'var_fold'
					      (F, [], LE)
				      in  apply 'lc$^0'/1
					      (_cor15)
				  -| ['list_comprehension'] )
			    in  let <_cor23> =
				    %% Line 404
				    case _cor19 of
				      %% Line 405
				      <[]> when 'true' ->
					  Exprs0
				      %% Line 406
				      <_cor52> when 'true' ->
					  let <_cor21> =
					      apply 'embed_vars'/2
						  (_cor19, Ln)
					  in  [_cor21|Exprs0]
				    end
				in  %% Line 408
				    case apply 'q_intro_vars'/3
					     (QId, QsIVs0, IVsSoFar0) of
				      <{QsIVs,IVsSoFar}> when 'true' ->
					  %% Line 409
					  {Q,{QsIVs,_cor23},IVsSoFar}
				      ( <_cor25> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor25})
					-| ['compiler_generated'] )
				    end
		    %% Line 410
		    <QId,Filter,{QsIVs0,Exprs},IVsSoFar0> when 'true' ->
			%% Line 411
			case apply 'q_intro_vars'/3
				 (QId, QsIVs0, IVsSoFar0) of
			  <{QsIVs,IVsSoFar}> when 'true' ->
			      %% Line 412
			      {Filter,{QsIVs,Exprs},IVsSoFar}
			  ( <_cor26> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor26})
			    -| ['compiler_generated'] )
			end
		    ( <_cor34,_cor33,_cor32,_cor31> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor34,_cor33,_cor32,_cor31})
			    -| [{'function_name',{'-used_genvar_check/2-fun-2-',4}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-used_genvar_check/2-fun-2-'}}] )
	in  let <IntroVars> =
		%% Line 414
		apply 'intro_variables'/2
		    (_cor1, _cor0)
	    in  let <Acc0> =
		    %% Line 415
		    {IntroVars,[{'atom',0,'true'}]}
		in  %% Line 416
		    case apply 'qual_fold'/5
			     (F, Acc0, [], _cor1, _cor0) of
		      <{_cor53,{[],Exprs}}> when 'true' ->
			  let <_cor43> =
			      %% Line 417
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor41) ->
					    case _cor41 of
					      <[{'function',_cor54,Name,_cor55,_cor56}|_cor40]> when 'true' ->
						  let <_cor42> =
						      apply 'lc$^1'/1
							  (_cor40)
						  in  ( [Name|_cor42]
							-| ['compiler_generated'] )
					      ( <[_cor39|_cor40]> when 'true' ->
						    apply 'lc$^1'/1
							(_cor40)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor41> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor41})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(_cor1)
				-| ['list_comprehension'] )
			  in  let <_cor45> =
				  %% Line 418
				  call 'sets':'from_list'
				      (_cor43)
			      in  let <UniqueFName> =
				      %% Line 418
				      call 'qlc':'aux_name'
					  ('used_genvar', 1, _cor45)
				  in  let <_cor47> =
					  %% Line 419
					  call 'lists':'reverse'
					      (Exprs)
				      in  %% Line 419
					  {'function',0,UniqueFName,0,[{'clause',0,[],[],_cor47}|[]]}
		      ( <_cor38> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor38})
			-| ['compiler_generated'] )
		    end
'q_intro_vars'/3 =
    %% Line 421
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <QId,[{_cor7,IVs}|QsIVs],IVsSoFar>
	      when call 'erlang':'=:='
		    (_cor7,
		     QId) ->
	      let <_cor3> =
		  call 'erlang':'++'
		      (IVs, IVsSoFar)
	      in  {QsIVs,_cor3}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'q_intro_vars',3}}] )
	    -| ['compiler_generated'] )
	end
'transform'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	let <IntroVars> =
	    %% Line 517
	    apply 'intro_variables'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 518
		call 'qlc':'vars'
		    (_cor1)
	    in  let <_cor4> =
		    %% Line 518
		    call 'ordsets':'to_list'
			(_cor3)
		in  let <AllVars> =
			%% Line 518
			call 'sets':'from_list'
			    (_cor4)
		    in  let <F1> =
			    %% Line 520
			    ( fun (_cor13,_cor12,_cor11,_cor10) ->
				  case <_cor13,_cor12,_cor11,_cor10> of
				    <QId,{'generate',_cor111,P,LE},Foo,{GoI,SI}> when 'true' ->
					let <_cor7> =
					    %% Line 521
					    call 'erlang':'+'
						(GoI, 3)
					in  let <_cor6> =
						%% Line 521
						call 'erlang':'+'
						    (SI, 2)
					    in  %% Line 521
						{{QId,GoI,SI,{'gen',P,LE}},Foo,{_cor7,_cor6}}
				    %% Line 522
				    <QId,F,Foo,{GoI,SI}> when 'true' ->
					let <_cor9> =
					    %% Line 523
					    call 'erlang':'+'
						(GoI, 2)
					in  let <_cor8> =
						%% Line 523
						call 'erlang':'+'
						    (SI, 1)
					    in  %% Line 523
						{{QId,GoI,SI,{'fil',F}},Foo,{_cor9,_cor8}}
				    ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor17,_cor16,_cor15,_cor14})
					    -| [{'function_name',{'-transform/2-fun-0-',4}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-transform/2-fun-0-'}}] )
			in  let <TemplS> =
				%% Line 525
				call 'qlc':'template_state'
				    ()
			    in  let <_cor21> =
				    %% Line 526
				    call 'erlang':'+'
					(TemplS, 1)
				in  let <_cor20> =
					%% Line 526
					call 'erlang':'+'
					    (TemplS, 1)
				    in  let <GoState> = {_cor21,_cor20}
					in  %% Line 527
					    case %% Line 528
						 apply 'qual_fold'/5
						     (F1, [], GoState, _cor1, _cor0) of
					      <{ModifiedForms1,_cor112}> when 'true' ->
						  let <_cor34> =
						      %% Line 534
						      ( fun (_cor29,_cor28,_cor27,_cor26) ->
							    case <_cor29,_cor28,_cor27,_cor26> of
							      <_X_QId,Q = {'generate',_cor113,_X_P,_X_E},Dict,Foo> when 'true' ->
								  %% Line 535
								  {Q,Dict,Foo}
							      %% Line 536
							      <QId,F,Dict,Foo> when 'true' ->
								  let <_cor25> =
								      %% Line 537
								      call 'dict':'store'
									  (QId, F, Dict)
								  in  %% Line 537
								      {F,_cor25,Foo}
							    end
							-| [{'id',{0,0,'-transform/2-fun-1-'}}] )
						  in  let <_cor24> =
							  %% Line 538
							  call 'dict':'new'
							      ()
						      in  %% Line 534
							  case apply 'qual_fold'/5
								   (_cor34, _cor24, %% Line 538
										    [], _cor1, _cor0) of
							    <{_cor114,Source0}> when 'true' ->
								let <_cor43> =
								    %% Line 539
								    ( fun (_cor39,_cor38,_cor37) ->
									  case <_cor39,_cor38,_cor37> of
									    <Id,LC = {'lc',_X_L,E,_X_Qs},Dict> when 'true' ->
										let <_cor36> =
										    %% Line 540
										    call 'dict':'store'
											(Id, E, Dict)
										in  %% Line 540
										    {LC,_cor36}
									    ( <_cor42,_cor41,_cor40> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor42,_cor41,_cor40})
										    -| [{'function_name',{'-transform/2-fun-2-',3}}] )
									      -| ['compiler_generated'] )
									  end
								      -| [{'id',{0,0,'-transform/2-fun-2-'}}] )
								in  %% Line 539
								    case apply 'qlc_mapfold'/4
									     (_cor43, %% Line 541
										      Source0, _cor1, _cor0) of
								      <{_cor115,Source}> when 'true' ->
									  let <F2> =
									      %% Line 545
									      ( fun (_cor99,_cor98,_cor97) ->
										    case <_cor99,_cor98,_cor97> of
										      <Id,{'lc',_X_L,E,Qs},{IntroVs0,XWarn0}> when 'true' ->
											  let <LcNo> =
											      %% Line 546
											      apply 'get_lcid_no'/1
												  (Id)
											  in  let <LcL> =
												  %% Line 547
												  apply 'get_lcid_line'/1
												      (Id)
											      in  %% Line 548
												  case %% Line 549
												       apply 'aux_vars'/3
													   (['RL'|['Fun'|['Go'|['C'|['S0'|['RL0'|['Go0'|['AT'|['E']]]]]]]]], %% Line 550
																					     LcNo, %% Line 550
																						   AllVars) of
												    <[RL|[Fun|[Go|[NGV|[S0|[RL0|[Go0|[AT|[Err|[]]]]]]]]]]> when 'true' ->
													let <_cor48> =
													    %% Line 552
													    call 'erlang':'length'
														(Qs)
													in  %% Line 552
													    case call 'lists':'split'
														     (_cor48, IntroVs0) of
													      <{IntroVs,RestIntroVs}> when 'true' ->
														  let <IntroVs_Qs> =
														      %% Line 553
														      call 'lists':'zip'
															  (IntroVs, Qs)
														  in  let <F> =
															  %% Line 554
															  ( fun (_cor58,_cor57) ->
																case <_cor58,_cor57> of
																  <{{QId,IVs},{_cor116,GoI,SI,{'gen',P,LE}}},AllIVs0>
																      when call 'erlang':'=:='
																	    (_cor116,
																	     QId) ->
																      %% Line 555
																      ( case QId of
																	  ( <( {'qid',_cor117,_rec2}
																	       -| ['compiler_generated'] )> when 'true' ->
																		let <GV> =
																		    apply 'aux_var'/5
																			('C', LcNo, _rec2, 1, AllVars)
																		in  let <GenIVs> =
																			%% Line 556
																			[GV|IVs]
																		    in  let <_cor55> =
																			    %% Line 558
																			    call 'erlang':'++'
																				(GenIVs, AllIVs0)
																			in  %% Line 557
																			    {{QId,{GenIVs,{{'gen',P,LE,GV},GoI,SI}}},_cor55}
																	    -| ['compiler_generated'] )
																	  ( <_cor118> when 'true' ->
																		( call ( 'erlang'
																			 -| ['compiler_generated'] ):( 'error'
																						       -| ['compiler_generated'] )
																		      (( {'badrecord','qid'}
																			 -| ['compiler_generated'] ))
																		  -| ['compiler_generated'] )
																	    -| ['compiler_generated'] )
																	end
																	-| ['compiler_generated'] )
																  %% Line 559
																  <{{QId,IVs},{_cor119,GoI,SI,{'fil',F}}},AllIVs0>
																      when call 'erlang':'=:='
																	    (_cor119,
																	     QId) ->
																      let <_cor56> =
																	  %% Line 561
																	  call 'erlang':'++'
																	      (IVs, AllIVs0)
																      in  %% Line 560
																	  {{QId,{IVs,{{'fil',F},GoI,SI}}},_cor56}
																  ( <_cor60,_cor59> when 'true' ->
																	( primop 'match_fail'
																	      ({'function_clause',_cor60,_cor59})
																	  -| [{'function_name',{'-transform/2-fun-3-',2}}] )
																    -| ['compiler_generated'] )
																end
															    -| [{'id',{0,0,'-transform/2-fun-3-'}}] )
														      in  %% Line 563
															  case call 'lists':'mapfoldl'
																   (F, [], IntroVs_Qs) of
															    <{QCs,AllIVs}> when 'true' ->
																let <Dependencies> =
																    %% Line 565
																    apply 'qualifier_dependencies'/2
																	(Qs, IntroVs)
																in  let <L> =
																	%% Line 566
																	apply 'no_compiler_warning'/1
																	    (LcL)
																    in  %% Line 568
																	case %% Line 569
																	     apply 'constants_and_sizes'/5
																		 (Qs, E, Dependencies, AllIVs, _cor0) of
																	  <{EqColumnConstants,EqualColumnConstants,ExtraConsts,SizeInfo}> when 'true' ->
																	      %% Line 570
																	      case %% Line 571
																		   apply 'join_kind'/5
																		       (Qs, LcL, AllIVs, Dependencies, _cor0) of
																		<{JoinInfo,XWarn}> when 'true' ->
																		    let <FWarn> =
																			%% Line 575
																			apply 'warn_failing_qualifiers'/4
																			    (Qs, AllIVs, Dependencies, _cor0)
																		    in  let <JQs> =
																			    %% Line 577
																			    apply 'join_quals'/6
																				(JoinInfo, QCs, L, LcNo, ExtraConsts, AllVars)
																			in  let <XQCs> =
																				%% Line 578
																				call 'erlang':'++'
																				    (QCs, JQs)
																			    in  let <Cs0> =
																				    %% Line 579
																				    apply 'clauses'/8
																					(XQCs, RL, Fun, Go, NGV, Err, AllIVs, _cor0)
																				in  let <Template> =
																					%% Line 580
																					apply 'template'/8
																					    (E, RL, Fun, Go, AT, L, AllIVs, _cor0)
																				    in  let <Fin> =
																					    %% Line 581
																					    apply 'final'/4
																						(RL, AllIVs, L, _cor0)
																					in  let <_cor73> =
																						%% Line 582
																						call 'erlang':'++'
																						    (Template, Cs0)
																					    in  let <_cor74> =
																						    %% Line 582
																						    call 'erlang':'++'
																							(Fin, _cor73)
																						in  let <FunC> = {%% Line 582
																							 'fun',%% Line 582
																							       L,%% Line 582
																								 {'clauses',_cor74}}
																						    in  let <_cor76> =
																							    %% Line 584
																							    apply 'replace'/3
																								(AllIVs, AllIVs, 'nil')
																							in  let <_cor77> =
																								%% Line 583
																								apply 'abst_vars'/2
																								    ([S0|[RL0|[Fun|[Go0|_cor76]]]], %% Line 585
																												    L)
																							    in  let <As0> =
																								    %% Line 583
																								    apply 'pack_args'/3
																									(_cor77, %% Line 585
																										 L, _cor0)
																								in  let <AsW> =
																									%% Line 586
																									apply 'abst_vars'/2
																									    ([S0|[RL0|[Go0|[]]]], L)
																								    in  let <FunW> =
																									    %% Line 587
																									    {'fun',L,{'clauses',[{'clause',L,AsW,[],%% Line 588
																														    [{'match',L,{'var',L,Fun},FunC}|%% Line 589
																																		    [{'call',L,{'var',L,Fun},As0}|[]]]}|%% Line 589
																																							[]]}}
																									in  %% Line 590
																									    case call 'dict':'find'
																										     (Id, Source) of
																									      <{'ok',OrigE0}> when 'true' ->
																										  let <OrigE> =
																										      %% Line 591
																										      apply 'undo_no_shadows'/1
																											  (OrigE0)
																										  in  let <QCode> =
																											  %% Line 592
																											  apply 'qcode'/4
																											      (OrigE, XQCs, Source, L)
																										      in  let <Qdata> =
																											      %% Line 593
																											      apply 'qdata'/2
																												  (XQCs, L)
																											  in  let <TemplateInfo> =
																												  %% Line 595
																												  apply 'template_columns'/5
																												      (Qs, E, AllIVs, Dependencies, _cor0)
																											      in  let <MSQs> =
																												      %% Line 597
																												      apply 'match_spec_quals'/4
																													  (E, Dependencies, Qs, _cor0)
																												  in  let <Opt> =
																													  %% Line 598
																													  apply 'opt_info'/7
																													      (TemplateInfo, SizeInfo, JoinInfo, MSQs, L, %% Line 599
																																			  EqColumnConstants, %% Line 599
																																					     EqualColumnConstants)
																												      in  let <_cor90> =
																													      %% Line 601
																													      case apply 'qlc_kind'/2
																														       (OrigE, Qs) of
																														%% Line 602
																														<'qlc'> when 'true' ->
																														    %% Line 603
																														    {'tuple',L,[{'atom',L,'qlc_v1'}|[FunW|[QCode|[Qdata|[Opt|[]]]]]]}
																														%% Line 604
																														<{'simple',PL,LE,V}> when 'true' ->
																														    let <Init> =
																															%% Line 605
																															apply 'closure'/2
																															    (LE, L)
																														    in  %% Line 606
																															apply 'simple'/4
																															    (L, V, Init, PL)
																														( <_cor89> when 'true' ->
																														      primop 'match_fail'
																															  ({'case_clause',_cor89})
																														  -| ['compiler_generated'] )
																													      end
																													  in  let <LCFun> =
																														  %% Line 608
																														  {'fun',L,{'clauses',[{'clause',L,[],[],[_cor90|[]]}|[]]}}
																													      in  %% Line 609
																														  case apply 'abstr'/2
																															   ({'qlc_lc','undefined','undefined'}, L) of
																														    <{'tuple',_cor120,Fs0}> when 'true' ->
																															let <Fs> =
																															    %% Line 610
																															    apply 'set_field'/3
																																(2, Fs0, LCFun)
																															in  let <_cor95> =
																																%% Line 611
																																call 'erlang':'++'
																																    (XWarn, XWarn0)
																															    in  let <_cor96> =
																																    %% Line 611
																																    call 'erlang':'++'
																																	(FWarn, _cor95)
																																in  %% Line 611
																																    {{'tuple',L,Fs},{RestIntroVs,_cor96}}
																														    ( <_cor93> when 'true' ->
																															  primop 'match_fail'
																															      ({'badmatch',_cor93})
																														      -| ['compiler_generated'] )
																														  end
																									      ( <_cor81> when 'true' ->
																										    primop 'match_fail'
																											({'badmatch',_cor81})
																										-| ['compiler_generated'] )
																									    end
																		( <_cor66> when 'true' ->
																		      primop 'match_fail'
																			  ({'badmatch',_cor66})
																		  -| ['compiler_generated'] )
																	      end
																	  ( <_cor65> when 'true' ->
																		primop 'match_fail'
																		    ({'badmatch',_cor65})
																	    -| ['compiler_generated'] )
																	end
															    ( <_cor62> when 'true' ->
																  primop 'match_fail'
																      ({'badmatch',_cor62})
															      -| ['compiler_generated'] )
															  end
													      ( <_cor49> when 'true' ->
														    primop 'match_fail'
															({'badmatch',_cor49})
														-| ['compiler_generated'] )
													    end
												    ( <_cor47> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_cor47})
												      -| ['compiler_generated'] )
												  end
										      ( <_cor102,_cor101,_cor100> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor102,_cor101,_cor100})
											      -| [{'function_name',{'-transform/2-fun-4-',3}}] )
											-| ['compiler_generated'] )
										    end
										-| [{'id',{0,0,'-transform/2-fun-4-'}}] )
									  in  %% Line 613
									      case apply 'qlc_mapfold'/4
										       (F2, {IntroVars,[]}, ModifiedForms1, _cor0) of
										<{NForms,{[],XW}}> when 'true' ->
										    do  %% Line 614
											apply 'display_forms'/1
											    (NForms)
											let <_cor108> =
											    %% Line 615
											    apply 'restore_line_numbers'/1
												(NForms)
											in  %% Line 615
											    case _cor0 of
											      <{'state',_cor121,_cor122,_cor123,_cor124}> when 'true' ->
												  let <_cor107> =
												      call 'erlang':'setelement'
													  (5, _cor0, XW)
												  in  {_cor108,_cor107}
											      ( <_cor125> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','state'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
										( <_cor104> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_cor104})
										  -| ['compiler_generated'] )
									      end
								      ( <_cor44> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor44})
									-| ['compiler_generated'] )
								    end
							    ( <_cor35> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor35})
							      -| ['compiler_generated'] )
							  end
					      ( <_cor23> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor23})
						-| ['compiler_generated'] )
					    end
'join_kind'/5 =
    %% Line 617
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 618
	case apply 'equal_columns'/4
		 (_cor4, _cor2, _cor1, _cor0) of
	  <{EqualCols2,EqualColsN}> when 'true' ->
	      %% Line 619
	      case apply 'eq_columns'/4
		       (_cor4, _cor2, _cor1, _cor0) of
		<{MatchCols2,MatchColsN}> when 'true' ->
		    let <_cor14> =
			%% Line 622
			( letrec
			      'lc$^0'/1 =
				  fun (_cor11) ->
				      case _cor11 of
					<[{C,_X_Skip}|_cor8]> when 'true' ->
					    ( letrec
						  'lc$^1'/1 =
						      fun (_cor12) ->
							  case _cor12 of
							    <[T|_cor10]>
								when call 'erlang':'is_integer'
								      (T) ->
								let <_cor13> =
								    apply 'lc$^1'/1
									(_cor10)
								in  ( [T|_cor13]
								      -| ['compiler_generated'] )
							    ( <[T|_cor10]> when 'true' ->
								  apply 'lc$^1'/1
								      (_cor10)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								apply 'lc$^0'/1
								    (_cor8)
							    ( <_cor12> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor12})
								    -| [{'function_name',{'lc$^1',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^1'/1
						      (C)
					      -| ['list_comprehension'] )
					( <[_cor7|_cor8]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor8)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor11> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor11})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (EqualCols2)
			  -| ['list_comprehension'] )
		    in  let <_cor22> =
			    %% Line 621
			    ( letrec
				  'lc$^2'/1 =
				      fun (_cor19) ->
					  case _cor19 of
					    <[{C,_X_Skip}|_cor16]> when 'true' ->
						( letrec
						      'lc$^3'/1 =
							  fun (_cor20) ->
							      case _cor20 of
								<[{T,_cor38}|_cor18]> when 'true' ->
								    let <_cor21> =
									apply 'lc$^3'/1
									    (_cor18)
								    in  ( [T|_cor21]
									  -| ['compiler_generated'] )
								( <[_cor17|_cor18]> when 'true' ->
								      apply 'lc$^3'/1
									  (_cor18)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    apply 'lc$^2'/1
									(_cor16)
								( <_cor20> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor20})
									-| [{'function_name',{'lc$^3',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^3'/1
							  (C)
						  -| ['list_comprehension'] )
					    ( <[_cor15|_cor16]> when 'true' ->
						  apply 'lc$^2'/1
						      (_cor16)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						_cor14
					    ( <_cor19> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor19})
						    -| [{'function_name',{'lc$^2',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^2'/1
				      (EqualCols2)
			      -| ['list_comprehension'] )
			in  let <Tables> =
				%% Line 620
				call 'lists':'usort'
				    (_cor22)
			    in  %% Line 623
				case <> of
				  %% Line 624
				  <>
				      when let <_cor24> =
					    call 'erlang':'=/='
						(EqualColsN, [])
					in  let <_cor25> =
						call 'erlang':'=/='
						    (MatchColsN, [])
					    in  call 'erlang':'or'
						    (_cor24, _cor25) ->
				      let <_cor27> =
					  %% Line 626
					  call 'erlang':'get'
					      ('qlc_current_file')
				      in  let <_cor26> =
					      %% Line 626
					      call 'erlang':'abs'
						  (_cor3)
					  in  %% Line 625
					      {[],%% Line 626
						  [{_cor27,[{_cor26,'qlc','too_complex_join'}|[]]}|[]]}
				  %% Line 627
				  <>
				      when let <_cor28> =
					    call 'erlang':'=:='
						(EqualCols2, [])
					in  let <_cor29> =
						call 'erlang':'=:='
						    (MatchCols2, [])
					    in  call 'erlang':'and'
						    (_cor28, _cor29) ->
				      %% Line 628
				      {[],[]}
				  %% Line 629
				  <>
				      when try
					    let <_cor30> =
						call 'erlang':'length'
						    (Tables)
					    in  call 'erlang':'>'
						    (_cor30, 2)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor32> =
					  %% Line 631
					  call 'erlang':'get'
					      ('qlc_current_file')
				      in  let <_cor31> =
					      %% Line 631
					      call 'erlang':'abs'
						  (_cor3)
					  in  %% Line 630
					      {[],%% Line 631
						  [{_cor32,[{_cor31,'qlc','too_many_joins'}|[]]}|[]]}
				  %% Line 632
				  <>
				      when call 'erlang':'=:='
					    (EqualCols2,
					     MatchCols2) ->
				      %% Line 633
				      {EqualCols2,[]}
				  %% Line 634
				  <> when 'true' ->
				      %% Line 635
				      {{EqualCols2,MatchCols2},[]}
				end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'qlc_kind'/2 =
    %% Line 638
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 639
	    apply 'undo_no_shadows'/1
		(_cor0)
	in  %% Line 639
	    case apply 'qual_data'/1
		     (_cor2) of
	      <{OrigFilterData,OrigGeneratorData}> when 'true' ->
		  let <OrigAllFilters> =
		      %% Line 640
		      apply 'filters_as_one'/1
			  (OrigFilterData)
		  in  %% Line 641
		      case apply 'qual_data'/1
			       (_cor0) of
			<{_X_FilterData,GeneratorData}> when 'true' ->
			    %% Line 642
			    case <_cor1,OrigAllFilters,OrigGeneratorData> of
			      %% Line 643
			      <{'var',_cor10,V},{'atom',_cor11,'true'},[{_cor12,{'gen',{'var',PatternL,_cor13},_X_LE}}|[]]>
				  when call 'erlang':'=:='
					(_cor13,
					 V) ->
				  %% Line 644
				  case GeneratorData of
				    <[{_cor14,{'gen',_cor15,LE}}|[]]> when 'true' ->
					%% Line 645
					{'simple',PatternL,LE,V}
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
			      %% Line 646
			      <_fol65,_fol66,_fol67> when 'true' ->
				  %% Line 647
				  'qlc'
			    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'warn_failing_qualifiers'/4 =
    %% Line 653
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 654
	case apply 'qual_data'/1
		 (_cor3) of
	  <{FilterData,GeneratorData}> when 'true' ->
	      let <BindFun> =
		  %% Line 656
		  ( fun (_cor7,_cor6) ->
			apply 'is_bindable'/1
			    (_cor6)
		    -| [{'id',{0,0,'-warn_failing_qualifiers/4-fun-0-'}}] )
	      in  %% Line 657
		  case %% Line 658
		       apply 'pattern_frame'/4
			   (GeneratorData, BindFun, 1, _cor0) of
		    <{PFrame,_X_PatternVars}> when 'true' ->
			%% Line 659
			case %% Line 660
			     apply 'filter_info'/4
				 (FilterData, _cor2, _cor1, _cor0) of
			  <{_cor34,_cor35,Imported}> when 'true' ->
			      let <PFrames> =
				  %% Line 661
				  apply 'frame2frames'/1
				      (PFrame)
			      in  let <_cor28> =
				      %% Line 663
				      ( fun (_cor25,_cor24) ->
					    case <_cor25,_cor24> of
					      <{_X_QId,{'fil',_X_Filter}},{Frames = [],Warnings}> when 'true' ->
						  %% Line 664
						  {Frames,Warnings}
					      %% Line 665
					      <{_X_QId,{'fil',Filter}},{Frames,Warnings}> when 'true' ->
						  let <_cor15> =
						      %% Line 666
						      apply 'set_line'/2
							  (Filter, 0)
						  in  %% Line 666
						      case apply 'filter'/5
							       (_cor15, Frames, BindFun, _cor0, %% Line 667
												Imported) of
							%% Line 668
							<[]> when 'true' ->
							    let <_cor18> =
								%% Line 670
								call 'erlang':'get'
								    ('qlc_current_file')
							    in  let <_cor16> =
								    %% Line 671
								    call 'erlang':'element'
									(2, Filter)
								in  let <_cor17> =
									%% Line 671
									apply 'abs_loc'/1
									    (_cor16)
								    in  %% Line 669
									{[],%% Line 670
									    [{_cor18,%% Line 671
										     [{_cor17,'qlc',%% Line 672
												    'nomatch_filter'}|%% Line 672
														      []]}|%% Line 672
															   Warnings]}
							%% Line 673
							<Frames1> when 'true' ->
							    %% Line 674
							    {Frames1,Warnings}
						      end
					      %% Line 676
					      <{_X_QId,{'gen',Pattern,_cor36}},{Frames,Warnings}> when 'true' ->
						  %% Line 677
						  case apply 'pattern'/5
							   (Pattern, 1, [], BindFun, _cor0) of
						    %% Line 678
						    <{'failed',_cor37,_cor38}> when 'true' ->
							let <_cor22> =
							    %% Line 680
							    call 'erlang':'get'
								('qlc_current_file')
							in  let <_cor20> =
								%% Line 681
								call 'erlang':'element'
								    (2, Pattern)
							    in  let <_cor21> =
								    %% Line 681
								    apply 'abs_loc'/1
									(_cor20)
								in  %% Line 679
								    {Frames,%% Line 680
									    [{_cor22,%% Line 681
										     [{_cor21,'qlc',%% Line 682
												    'nomatch_pattern'}|%% Line 682
														       []]}|%% Line 682
															    Warnings]}
						    %% Line 683
						    <_cor39> when 'true' ->
							%% Line 684
							{Frames,Warnings}
						  end
					      ( <_cor27,_cor26> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor27,_cor26})
						      -| [{'function_name',{'-warn_failing_qualifiers/4-fun-1-',2}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-warn_failing_qualifiers/4-fun-1-'}}] )
				  in  let <_cor14> =
					  %% Line 686
					  call 'erlang':'++'
					      (FilterData, GeneratorData)
				      in  %% Line 662
					  case %% Line 663
					       call 'lists':'foldl'
						   (_cor28, %% Line 686
							    {PFrames,[]}, _cor14) of
					    <{_cor40,Warnings}> when 'true' ->
						%% Line 687
						Warnings
					    ( <_cor29> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor29})
					      -| ['compiler_generated'] )
					  end
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'opt_info'/7 =
    %% Line 692
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 694
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor10) ->
			  case _cor10 of
			    <[{C,Sz}|_cor8]> when 'true' ->
				let <_cor11> =
				    apply 'lc$^0'/1
					(_cor8)
				in  ( [{'clause',_cor2,[{'integer',_cor2,C}|[]],[],[{'integer',_cor2,Sz}|[]]}|_cor11]
				      -| ['compiler_generated'] )
			    ( <[_cor7|_cor8]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor8)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				%% Line 695
				[{'clause',_cor2,[{'var',_cor2,'_'}|[]],[],[{'atom',_cor2,'undefined'}|[]]}|[]]
			    ( <_cor10> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor10})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor9> =
		      call 'lists':'sort'
			  (_cor5)
		  in  apply 'lc$^0'/1
			  (_cor9)
	      -| ['list_comprehension'] )
	in  let <S> =
		%% Line 696
		[{'size',{'fun',_cor2,{'clauses',_cor12}}}|[]]
	    in  let <_cor17> =
		    %% Line 697
		    case _cor4 of
		      <[]> when 'true' ->
			  []
		      <_cor104> when 'true' ->
			  let <_cor15> =
			      apply 'abstr'/2
				  (_cor4, _cor2)
			  in  [{'join',_cor15}|[]]
		    end
		in  let <_cor30> =
			%% Line 700
			( letrec
			      'lc$^1'/1 =
				  fun (_cor21) ->
				      case _cor21 of
					<[%% Line 703
					  {EqType,TemplateColumns}|_cor20]> when 'true' ->
					    let <_cor28> =
						( letrec
						      'lc$^2'/1 =
							  fun (_cor24) ->
							      case _cor24 of
								<[%% Line 702
								  {Col,TemplCols}|_cor23]> when 'true' ->
								    let <_cor26> =
									apply 'abstr'/2
									    (Col, _cor2)
								    in  let <_cor25> =
									    %% Line 701
									    apply 'abstr'/2
										(TemplCols, _cor2)
									in  let <_cor27> =
										%% Line 702
										apply 'lc$^2'/1
										    (_cor23)
									    in  ( [{'clause',_cor2,[_cor26|[EqType|[]]],[],%% Line 701
															   [_cor25|[]]}|_cor27]
										  -| ['compiler_generated'] )
								( <[_cor22|_cor23]> when 'true' ->
								      %% Line 702
								      apply 'lc$^2'/1
									  (_cor23)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor24> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor24})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^2'/1
							  (%% Line 702
							   TemplateColumns)
						  -| ['list_comprehension'] )
					    in  let <_cor29> =
						    %% Line 703
						    apply 'lc$^1'/1
							(_cor20)
						in  ( [_cor28|_cor29]
						      -| ['compiler_generated'] )
					( <[_cor19|_cor20]> when 'true' ->
					      %% Line 703
					      apply 'lc$^1'/1
						  (_cor20)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor21> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor21})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^1'/1
				  (_cor6)
			  -| ['list_comprehension'] )
		    in  let <TCls0> =
			    %% Line 699
			    call 'lists':'append'
				(_cor30)
			in  let <_cor32> =
				%% Line 704
				call 'lists':'sort'
				    (TCls0)
			    in  let <TCls> =
				    %% Line 704
				    call 'erlang':'++'
					(_cor32, [{'clause',_cor2,[{'var',_cor2,'_'}|[{'var',_cor2,'_'}|[]]],[],[{'nil',_cor2}|[]]}|[]])
				in  let <T> =
					%% Line 705
					[{'template',{'fun',_cor2,{'clauses',TCls}}}|[]]
				    in  let <EqColumnConstants> =
					    %% Line 709
					    apply 'opt_column_constants'/1
						(_cor1)
					in  let <CCs> =
						%% Line 710
						apply 'opt_constants'/2
						    (_cor2, EqColumnConstants)
					    in  let <EqC> = {%% Line 711
						     'constants',%% Line 711
								 {'fun',_cor2,{'clauses',CCs}}}
						in  let <EqualColumnConstants> =
							%% Line 713
							apply 'opt_column_constants'/1
							    (_cor0)
						    in  let <ECCs> =
							    %% Line 714
							    apply 'opt_constants'/2
								(_cor2, EqualColumnConstants)
							in  let <EqualC> = {%% Line 715
								 'equal_constants',%% Line 715
										   {'fun',_cor2,{'clauses',ECCs}}}
							    in  let <_cor46> =
								    %% Line 716
								    ( letrec
									  'lc$^3'/1 =
									      fun (_cor44) ->
										  case _cor44 of
										    <['true'|_cor42]> when 'true' ->
											let <_cor45> =
											    apply 'lc$^3'/1
												(_cor42)
											in  ( [EqualC|_cor45]
											      -| ['compiler_generated'] )
										    ( <[_cor41|_cor42]> when 'true' ->
											  apply 'lc$^3'/1
											      (_cor42)
										      -| ['compiler_generated'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor44> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor44})
											    -| [{'function_name',{'lc$^3',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  let <_cor43> =
									      call 'erlang':'=/='
										  (CCs, ECCs)
									  in  apply 'lc$^3'/1
										  ([_cor43|[]])
								      -| ['list_comprehension'] )
								in  let <C> =
									%% Line 716
									[EqC|_cor46]
								    in  let <_cor52> =
									    %% Line 719
									    ( letrec
										  'lc$^4'/1 =
										      fun (_cor50) ->
											  case _cor50 of
											    <[%% Line 720
											      {{IdNo,Col},[_cor105|[]],_X_FilNs}|_cor49]> when 'true' ->
												let <_cor51> =
												    %% Line 720
												    apply 'lc$^4'/1
													(_cor49)
												in  ( [{IdNo,Col}|_cor51]
												      -| ['compiler_generated'] )
											    ( <[_cor48|_cor49]> when 'true' ->
												  %% Line 720
												  apply 'lc$^4'/1
												      (_cor49)
											      -| ['compiler_generated'] )
											    <[]> when 'true' ->
												[]
											    ( <_cor50> when 'true' ->
												  ( primop 'match_fail'
													({'function_clause',_cor50})
												    -| [{'function_name',{'lc$^4',1}}] )
											      -| ['compiler_generated'] )
											  end
									      in  apply 'lc$^4'/1
										      (%% Line 720
										       EqualColumnConstants)
									      -| ['list_comprehension'] )
									in  let <ConstColsFamily> =
										%% Line 721
										apply 'family_list'/1
										    (_cor52)
									    in  let <_cor64> =
										    %% Line 722
										    ( letrec
											  'lc$^5'/1 =
											      fun (_cor57) ->
												  case _cor57 of
												    <[%% Line 723
												      {IdNo,Cols}|_cor56]> when 'true' ->
													let <_cor58> =
													    call 'erlang':'length'
														(Cols)
													in  let <_cor59> =
														call 'erlang':'+'
														    (_cor58, 1)
													    in  let <_cor60> =
														    call 'lists':'seq'
															(1, _cor59)
														in  let <_cor61> =
															call 'erlang':'--'
															    (_cor60, Cols)
														    in  let <_cor62> =
															    call 'erlang':'hd'
																(_cor61)
															in  let <_cor63> =
																%% Line 723
																apply 'lc$^5'/1
																    (_cor56)
															    in  ( [{IdNo,_cor62}|_cor63]
																  -| ['compiler_generated'] )
												    ( <[_cor55|_cor56]> when 'true' ->
													  %% Line 723
													  apply 'lc$^5'/1
													      (_cor56)
												      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_cor57> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor57})
													    -| [{'function_name',{'lc$^5',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  apply 'lc$^5'/1
											      (%% Line 723
											       ConstColsFamily)
										      -| ['list_comprehension'] )
										in  let <_cor71> =
											%% Line 724
											( letrec
											      'lc$^6'/1 =
												  fun (_cor68) ->
												      case _cor68 of
													<[%% Line 725
													  {IdNo,N}|_cor67]>
													    when %% Line 725
													      call 'erlang':'>'
														  (N,
														   0) ->
													    let <_cor69> =
														call 'erlang':'-'
														    (N, 1)
													    in  let <_cor70> =
														    %% Line 725
														    apply 'lc$^6'/1
															(_cor67)
														in  ( [{'clause',_cor2,[{'integer',_cor2,IdNo}|[]],[],[{'integer',_cor2,_cor69}|[]]}|_cor70]
														      -| ['compiler_generated'] )
													( <[_cor66|_cor67]> when 'true' ->
													      %% Line 725
													      apply 'lc$^6'/1
														  (_cor67)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    %% Line 726
													    [{'clause',_cor2,[{'var',_cor2,'_'}|[]],[],[{'integer',_cor2,0}|[]]}|[]]
													( <_cor68> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_cor68})
														-| [{'function_name',{'lc$^6',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  apply 'lc$^6'/1
												  (_cor64)
											  -| ['list_comprehension'] )
										    in  let <N> =
											    %% Line 727
											    [{'n_leading_constant_columns',{'fun',_cor2,{'clauses',_cor71}}}|[]]
											in  let <_cor79> =
												%% Line 729
												( letrec
												      'lc$^7'/1 =
													  fun (_cor76) ->
													      case _cor76 of
														<[%% Line 730
														  {IdNo,Cols}|_cor75]> when 'true' ->
														    let <_cor77> =
															apply 'abstr'/2
															    (Cols, _cor2)
														    in  let <_cor78> =
															    %% Line 730
															    apply 'lc$^7'/1
																(_cor75)
															in  ( [{'clause',_cor2,[{'integer',_cor2,IdNo}|[]],[],[_cor77|[]]}|_cor78]
															      -| ['compiler_generated'] )
														( <[_cor74|_cor75]> when 'true' ->
														      %% Line 730
														      apply 'lc$^7'/1
															  (_cor75)
														  -| ['compiler_generated'] )
														<[]> when 'true' ->
														    %% Line 731
														    [{'clause',_cor2,[{'var',_cor2,'_'}|[]],[],[{'nil',_cor2}|[]]}|[]]
														( <_cor76> when 'true' ->
														      ( primop 'match_fail'
															    ({'function_clause',_cor76})
															-| [{'function_name',{'lc$^7',1}}] )
														  -| ['compiler_generated'] )
													      end
												  in  apply 'lc$^7'/1
													  (%% Line 730
													   ConstColsFamily)
												  -| ['list_comprehension'] )
											    in  let <CC> =
												    %% Line 732
												    [{'constant_columns',{'fun',_cor2,{'clauses',_cor79}}}|[]]
												in  let <_cor87> =
													%% Line 734
													( letrec
													      'lc$^8'/1 =
														  fun (_cor84) ->
														      case _cor84 of
															<[%% Line 735
															  {G,MS,Fs}|_cor83]> when 'true' ->
															    let <_cor85> =
																apply 'abstr'/2
																    (Fs, _cor2)
															    in  let <_cor86> =
																    %% Line 735
																    apply 'lc$^8'/1
																	(_cor83)
																in  ( [{'clause',_cor2,[{'integer',_cor2,G}|[]],[],[{'tuple',_cor2,[MS|[_cor85|[]]]}|[]]}|_cor86]
																      -| ['compiler_generated'] )
															( <[_cor82|_cor83]> when 'true' ->
															      %% Line 735
															      apply 'lc$^8'/1
																  (_cor83)
															  -| ['compiler_generated'] )
															<[]> when 'true' ->
															    %% Line 736
															    [{'clause',_cor2,[{'var',_cor2,'_'}|[]],[],[{'atom',_cor2,'undefined'}|[]]}|[]]
															( <_cor84> when 'true' ->
															      ( primop 'match_fail'
																    ({'function_clause',_cor84})
																-| [{'function_name',{'lc$^8',1}}] )
															  -| ['compiler_generated'] )
														      end
													  in  apply 'lc$^8'/1
														  (_cor3)
													  -| ['list_comprehension'] )
												    in  let <MS> =
													    %% Line 737
													    [{'match_specs',{'fun',_cor2,{'clauses',_cor87}}}|[]]
													in  let <_cor95> =
														%% Line 739
														( letrec
														      'lc$^9'/1 =
															  fun (_cor93) ->
															      case _cor93 of
																<[%% Line 740
																  {Tag,V}|_cor91]> when 'true' ->
																    let <_cor94> =
																	%% Line 740
																	apply 'lc$^9'/1
																	    (_cor91)
																    in  ( [{'clause',_cor2,[{'atom',_cor2,Tag}|[]],[],[V|[]]}|_cor94]
																	  -| ['compiler_generated'] )
																( <[_cor90|_cor91]> when 'true' ->
																      %% Line 740
																      apply 'lc$^9'/1
																	  (_cor91)
																  -| ['compiler_generated'] )
																<[]> when 'true' ->
																    %% Line 741
																    [{'clause',_cor2,[{'var',_cor2,'_'}|[]],[],[{'atom',_cor2,'undefined'}|[]]}|[]]
																( <_cor93> when 'true' ->
																      ( primop 'match_fail'
																	    ({'function_clause',_cor93})
																	-| [{'function_name',{'lc$^9',1}}] )
																  -| ['compiler_generated'] )
															      end
														  in  let <_cor92> =
															  %% Line 740
															  call 'lists':'append'
															      ([_cor17|[S|[T|[C|[N|[CC|[MS|[]]]]]]]])
														      in  apply 'lc$^9'/1
															      (_cor92)
														  -| ['list_comprehension'] )
													    in  %% Line 742
														{'fun',_cor2,{'clauses',_cor95}}
'opt_column_constants'/1 =
    %% Line 744
    fun (_cor0) ->
	%% Line 745
	( letrec
	      'lc$^0'/1 =
		  fun (_cor6) ->
		      case _cor6 of
			<[CC = {{IdNo,_X_Col},Const,_X_FilNs}|_cor2]>
			    when %% Line 746
			      try
				  let <_cor3> =
				      call 'erlang':'=/='
					  (IdNo, 0)
				  in  let <_cor4> =
					  call 'erlang':'length'
					      (Const)
				      in  let <_cor5> =
					      call 'erlang':'=:='
						  (_cor4, 1)
					  in  call 'erlang':'or'
						  (_cor3, _cor5)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor7> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [CC|_cor7]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'opt_constants'/2 =
    %% Line 748
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 749
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{{IdNo,_X_Col},_X_Const,_X_FilNs}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [IdNo|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <Ns> =
		%% Line 749
		call 'lists':'usort'
		    (_cor6)
	    in  %% Line 750
		( letrec
		      'lc$^1'/1 =
			  fun (_cor10) ->
			      case _cor10 of
				<[%% Line 751
				  IdNo|_cor9]> when 'true' ->
				    let <_cor11> =
					apply 'column_fun'/3
					    (_cor0, IdNo, _cor1)
				    in  let <_cor12> =
					    %% Line 751
					    apply 'lc$^1'/1
						(_cor9)
					in  ( [{'clause',_cor1,[{'integer',_cor1,IdNo}|[]],[],[_cor11|[]]}|_cor12]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    %% Line 752
				    [{'clause',_cor1,[{'var',_cor1,'_'}|[]],[],[{'atom',_cor1,'no_column_fun'}|[]]}|[]]
				( <_cor10> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor10})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (%% Line 751
			   Ns)
		  -| ['list_comprehension'] )
'abstr'/2 =
    %% Line 754
    fun (_cor1,_cor0) ->
	%% Line 755
	call 'erl_parse':'abstract'
	    (_cor1, _cor0)
'join_quals'/6 =
    %% Line 758
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 760
	    ( fun (_cor11,_cor10) ->
		  case <_cor11,_cor10> of
		    <{_X_QId,{_X_QIVs,{{'fil',_cor111},GoI,SI}}},%% Line 761
								 {GoI0,_X_SI0}>
			when %% Line 761
			  call 'erlang':'>='
			      (GoI,
			       GoI0) ->
			let <_cor7> =
			    %% Line 762
			    call 'erlang':'+'
				(GoI, 2)
			in  let <_cor6> =
				%% Line 762
				call 'erlang':'+'
				    (SI, 1)
			    in  %% Line 762
				{_cor7,_cor6}
		    %% Line 763
		    <{_X_QId,{_X_QIVs,{{'gen',_cor112,_cor113,_cor114},GoI,SI}}},%% Line 764
										 {GoI0,_X_SI0}>
			when %% Line 764
			  call 'erlang':'>='
			      (GoI,
			       GoI0) ->
			let <_cor9> =
			    %% Line 765
			    call 'erlang':'+'
				(GoI, 3)
			in  let <_cor8> =
				%% Line 765
				call 'erlang':'+'
				    (SI, 2)
			    in  %% Line 765
				{_cor9,_cor8}
		    %% Line 766
		    <_cor115,A> when 'true' ->
			%% Line 767
			A
		  end
	      -| [{'id',{0,0,'-join_quals/6-fun-0-'}}] )
	in  %% Line 759
	    case %% Line 760
		 call 'lists':'foldl'
		     (_cor14, %% Line 768
			      {0,0}, _cor4) of
	      <{LastGoI,LastSI}> when 'true' ->
		  let <_cor20> =
		      %% Line 769
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor18) ->
				    case _cor18 of
				      <[{QId,{_X_QIVs,{_X_Q,_X_GoI,_X_SI}}}|_cor17]> when 'true' ->
					  let <_cor19> =
					      apply 'lc$^0'/1
						  (_cor17)
					  in  ( [QId|_cor19]
						-| ['compiler_generated'] )
				      ( <[_cor16|_cor17]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor17)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor18> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor18})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor4)
			-| ['list_comprehension'] )
		  in  let <LastQId> =
			  %% Line 769
			  call 'lists':'max'
			      (_cor20)
		      in  let <_cor40> =
			      %% Line 775
			      case _cor5 of
				%% Line 776
				<{EqualCols,MatchCols}> when 'true' ->
				    let <EQs> =
					%% Line 777
					apply 'join_qnums'/1
					    (EqualCols)
				    in  let <MQs> =
					    %% Line 778
					    apply 'join_qnums'/1
						(MatchCols)
					in  let <_cor29> =
						%% Line 780
						( letrec
						      'lc$^1'/1 =
							  fun (_cor27) ->
							      case _cor27 of
								<[{Q1,Q2}|_cor25]> when 'true' ->
								    let <_cor28> =
									apply 'lc$^1'/1
									    (_cor25)
								    in  ( [{Q1,Q2,'=='}|_cor28]
									  -| ['compiler_generated'] )
								( <[_cor24|_cor25]> when 'true' ->
								      apply 'lc$^1'/1
									  (_cor25)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor27> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor27})
									-| [{'function_name',{'lc$^1',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  let <_cor26> =
							  call 'erlang':'--'
							      (EQs, MQs)
						      in  apply 'lc$^1'/1
							      (_cor26)
						  -| ['list_comprehension'] )
					    in  %% Line 779
						( letrec
						      'lc$^2'/1 =
							  fun (_cor32) ->
							      case _cor32 of
								<[{Q1,Q2}|_cor31]> when 'true' ->
								    let <_cor33> =
									apply 'lc$^2'/1
									    (_cor31)
								    in  ( [{Q1,Q2,'=:='}|_cor33]
									  -| ['compiler_generated'] )
								( <[_cor30|_cor31]> when 'true' ->
								      apply 'lc$^2'/1
									  (_cor31)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    _cor29
								( <_cor32> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor32})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^2'/1
							  (MQs)
						  -| ['list_comprehension'] )
				%% Line 781
				<EqualCols> when 'true' ->
				    %% Line 782
				    ( letrec
					  'lc$^3'/1 =
					      fun (_cor37) ->
						  case _cor37 of
						    <[{Q1,Q2}|_cor35]> when 'true' ->
							let <_cor38> =
							    apply 'lc$^3'/1
								(_cor35)
							in  ( [{Q1,Q2,'=='}|_cor38]
							      -| ['compiler_generated'] )
						    ( <[_cor34|_cor35]> when 'true' ->
							  apply 'lc$^3'/1
							      (_cor35)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor37> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor37})
							    -| [{'function_name',{'lc$^3',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor36> =
					      apply 'join_qnums'/1
						  (EqualCols)
					  in  apply 'lc$^3'/1
						  (_cor36)
				      -| ['list_comprehension'] )
			      end
			  in  let <_cor73> =
				  %% Line 784
				  ( letrec
					'lc$^4'/1 =
					    fun (_cor45) ->
						case _cor45 of
						  <[%% Line 794
						    {Q1,Q2,Op}|_cor43]> when 'true' ->
						      let <_cor56> =
							  %% Line 786
							  ( letrec
								'lc$^5'/1 =
								    fun (_cor54) ->
									case _cor54 of
									  <[%% Line 787
									    {QId,{QIVs,{{'gen',P,_cor116,GV},_X_GoI,_X_SI}}}|_cor47]>
									      when %% Line 788
										( try
										      ( case <> of
											  ( <>
												when ( call ( 'erlang'
													   -| ['compiler_generated'] ):( 'is_record'
																	 -| ['compiler_generated'] )
													(QId,
													 ( 'qid'
													   -| ['compiler_generated'] ),
													 ( 3
													   -| ['compiler_generated'] ))
												    -| ['compiler_generated'] ) ->
												let <_cor52> =
												    ( call 'erlang':'element'
													  (3, QId)
												      -| ['compiler_generated'] )
												in  ( call 'erlang':'=:='
													  (_cor52, Q1)
												      -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <> when 'true' ->
												'false'
											    -| ['compiler_generated'] )
											end
											-| ['compiler_generated'] )
										  of <Try> ->
										      Try
										  catch <T,R> ->
										      'false'
										  -| ['compiler_generated'] ) ->
									      let <_cor55> =
										  %% Line 787
										  apply 'lc$^5'/1
										      (_cor47)
									      in  ( [{QId,P,GV,QIVs}|_cor55]
										    -| ['compiler_generated'] )
									  ( <[_cor46|_cor47]> when 'true' ->
										%% Line 787
										apply 'lc$^5'/1
										    (_cor47)
									    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor54> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor54})
										  -| [{'function_name',{'lc$^5',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^5'/1
								    (_cor4)
							    -| ['list_comprehension'] )
						      in  %% Line 785
							  case _cor56 of
							    <[{QId1,P1,GV1,QIVs1}|[]]> when 'true' ->
								let <_cor69> =
								    %% Line 790
								    ( letrec
									  'lc$^6'/1 =
									      fun (_cor66) ->
										  case _cor66 of
										    <[%% Line 791
										      {QId,{QIVs,{{'gen',P,_cor117,GV},_cor118,_cor119}}}|_cor59]>
											when %% Line 792
											  ( try
												( case <> of
												    ( <>
													  when ( call ( 'erlang'
														     -| ['compiler_generated'] ):( 'is_record'
																		   -| ['compiler_generated'] )
														  (QId,
														   ( 'qid'
														     -| ['compiler_generated'] ),
														   ( 3
														     -| ['compiler_generated'] ))
													      -| ['compiler_generated'] ) ->
													  let <_cor64> =
													      ( call 'erlang':'element'
														    (3, QId)
														-| ['compiler_generated'] )
													  in  ( call 'erlang':'=:='
														    (_cor64, Q2)
														-| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												    ( <> when 'true' ->
													  'false'
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											    of <Try> ->
												Try
											    catch <T,R> ->
												'false'
											    -| ['compiler_generated'] ) ->
											let <_cor67> =
											    call 'erlang':'--'
												(QIVs, [GV|[]])
											in  let <_cor68> =
												%% Line 791
												apply 'lc$^6'/1
												    (_cor59)
											    in  ( [{QId,P,_cor67}|_cor68]
												  -| ['compiler_generated'] )
										    ( <[_cor58|_cor59]> when 'true' ->
											  %% Line 791
											  apply 'lc$^6'/1
											      (_cor59)
										      -| ['compiler_generated'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor66> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor66})
											    -| [{'function_name',{'lc$^6',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^6'/1
									      (_cor4)
								      -| ['list_comprehension'] )
								in  %% Line 789
								    case _cor69 of
								      <[{QId2,P2,QIVs2}|[]]> when 'true' ->
									  let <_cor71> =
									      %% Line 793
									      call 'erlang':'++'
										  (QIVs1, QIVs2)
									  in  let <_cor72> =
										  %% Line 794
										  apply 'lc$^4'/1
										      (_cor43)
									      in  ( [%% Line 793
										     {QId1,Op,P1,GV1,_cor71,QId2,P2}|_cor72]
										    -| ['compiler_generated'] )
								      ( <_cor70> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor70})
									-| ['compiler_generated'] )
								    end
							    ( <_cor57> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor57})
							      -| ['compiler_generated'] )
							  end
						  ( <[_cor42|_cor43]> when 'true' ->
							%% Line 794
							apply 'lc$^4'/1
							    (_cor43)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor45> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor45})
							  -| [{'function_name',{'lc$^4',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor44> =
					    %% Line 794
					    call 'lists':'usort'
						(_cor40)
					in  apply 'lc$^4'/1
						(_cor44)
				    -| ['list_comprehension'] )
			      in  let <_cor75> =
				      %% Line 795
				      apply 'aux_vars'/3
					  (['F'|['H'|['O'|['C']]]], _cor2, _cor0)
				  in  let <Aux> =
					  %% Line 795
					  apply 'abst_vars'/2
					      (_cor75, _cor3)
				      in  let <F> =
					      %% Line 796
					      ( fun (_cor100,_cor99) ->
						    case <_cor100,_cor99> of
						      <{QId1,Op,P1,GV1,QIVs,QId2,P2},{QId,GoI,SI}> when 'true' ->
							  let <AP1> =
							      %% Line 797
							      apply 'anon_pattern'/1
								  (P1)
							  in  let <AP2> =
								  %% Line 798
								  apply 'anon_pattern'/1
								      (P2)
							      in  let <Cs1> =
								      %% Line 799
								      apply 'join_handle_constants'/2
									  (QId1, _cor1)
								  in  let <Cs2> =
									  %% Line 800
									  apply 'join_handle_constants'/2
									      (QId2, _cor1)
								      in  let <H1> =
									      %% Line 801
									      apply 'join_handle'/4
										  (AP1, _cor3, Aux, Cs1)
									  in  let <H2> =
										  %% Line 802
										  apply 'join_handle'/4
										      (AP2, _cor3, Aux, Cs2)
									      in  %% Line 804
										  ( case QId1 of
										      ( <( {'qid',_cor120,_rec4}
											   -| ['compiler_generated'] )> when 'true' ->
											    ( case QId2 of
												( <( {'qid',_cor122,_rec5}
												     -| ['compiler_generated'] )> when 'true' ->
												      let <Join> =
													  {'join',Op,_rec4,_rec5,H1,H2,Cs1,Cs2}
												      in  %% Line 805
													  ( case QId of
													      ( <( {'qid',_cor124,_rec8}
														   -| ['compiler_generated'] )> when 'true' ->
														    let <_rec6> =
															call 'erlang':'+'
															    (_rec8, 1)
														    in  let <_cor93> =
															    call 'erlang':'setelement'
																(3, QId, _rec6)
															in  let <G> =
																{_cor93,%% Line 806
																	{QIVs,{{'gen',{'cons',_cor3,P1,P2},Join,GV1},GoI,SI}}}
															    in  let <_cor97> =
																    %% Line 807
																    call 'erlang':'+'
																	(GoI, 3)
																in  let <_cor96> =
																	%% Line 807
																	call 'erlang':'+'
																	    (SI, 2)
																    in  let <A> = {_cor93,_cor97,_cor96}
																	in  %% Line 808
																	    {G,A}
														-| ['compiler_generated'] )
													      ( <_cor125> when 'true' ->
														    ( call ( 'erlang'
															     -| ['compiler_generated'] ):( 'error'
																			   -| ['compiler_generated'] )
															  (( {'badrecord','qid'}
															     -| ['compiler_generated'] ))
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													    end
													    -| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <_cor123> when 'true' ->
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'error'
																	     -| ['compiler_generated'] )
													    (( {'badrecord','qid'}
													       -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											      end
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      ( <_cor121> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','qid'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
						      ( <_cor102,_cor101> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor102,_cor101})
							      -| [{'function_name',{'-join_quals/6-fun-1-',2}}] )
							-| ['compiler_generated'] )
						    end
						-| [{'id',{0,0,'-join_quals/6-fun-1-'}}] )
					  in  %% Line 810
					      case call 'lists':'mapfoldl'
						       (F, {LastQId,LastGoI,LastSI}, _cor73) of
						<{Qs,_cor129}> when 'true' ->
						    %% Line 811
						    Qs
						( <_cor104> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor104})
						  -| ['compiler_generated'] )
					      end
	      ( <_cor15> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor15})
		-| ['compiler_generated'] )
	    end
'join_qnums'/1 =
    %% Line 813
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 814
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{[{Q1,_X_C1}|[{Q2,_X_C2}|[]]],_X_Skip}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{Q1,Q2}|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 814
	    call 'lists':'usort'
		(_cor5)
'anon_pattern'/1 =
    %% Line 817
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 818
	    apply 'occ_vars'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 818
		call 'qlc':'vars'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 818
		    call 'erlang':'--'
			(_cor2, _cor1)
		in  let <MoreThanOnce> =
			%% Line 818
			call 'lists':'usort'
			    (_cor3)
		    in  let <_cor10> =
			    %% Line 819
			    ( fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <{'var',L,V},A> when 'true' ->
					%% Line 820
					case call 'lists':'member'
						 (V, MoreThanOnce) of
					  %% Line 821
					  <'true'> when 'true' ->
					      %% Line 822
					      {{'var',L,V},A}
					  %% Line 823
					  <'false'> when 'true' ->
					      %% Line 824
					      {{'var',L,'_'},A}
					  ( <_cor5> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor5})
					    -| ['compiler_generated'] )
					end
				    ( <_cor9,_cor8> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9,_cor8})
					    -| [{'function_name',{'-anon_pattern/1-fun-0-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-anon_pattern/1-fun-0-'}}] )
			in  %% Line 819
			    case apply 'var_mapfold'/3
				     (_cor10, %% Line 826
					      'foo', _cor0) of
			      <{AP,'foo'}> when 'true' ->
				  %% Line 827
				  AP
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
'join_handle'/4 =
    %% Line 835
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <AP,L,[F|[H|[O|[C|[]]]]],Constants> when 'true' ->
	      %% Line 836
	      case <AP,Constants> of
		%% Line 837
		<{'var',_cor31,_cor32},[]> when 'true' ->
		    %% Line 838
		    {'fun',L,{'clauses',[{'clause',L,[H|[]],[],[H|[]]}|[]]}}
		%% Line 839
		<_fol104,_fol105> when 'true' ->
		    let <_cor15> =
			%% Line 840
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[%% Line 843
					  {Col,Cs}|_cor5]> when 'true' ->
					    let <Call> =
						%% Line 841
						{'call',0,{'atom',0,'element'},[{'integer',0,Col}|[O|[]]]}
					    in  let <_cor12> =
						    %% Line 842
						    ( letrec
							  'lc$^1'/1 =
							      fun (_cor10) ->
								  case _cor10 of
								    <[{Con,Op}|_cor9]> when 'true' ->
									let <_cor11> =
									    apply 'lc$^1'/1
										(_cor9)
									in  ( [{'op',0,Op,Con,Call}|_cor11]
									      -| ['compiler_generated'] )
								    ( <[_cor8|_cor9]> when 'true' ->
									  apply 'lc$^1'/1
									      (_cor9)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor10> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor10})
									    -| [{'function_name',{'lc$^1',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^1'/1
							      (Cs)
						      -| ['list_comprehension'] )
						in  let <_cor13> =
							%% Line 842
							apply 'list2op'/2
							    (_cor12, 'or')
						    in  let <_cor14> =
							    %% Line 843
							    apply 'lc$^0'/1
								(_cor5)
							in  ( [_cor13|_cor14]
							      -| ['compiler_generated'] )
					( <[_cor4|_cor5]> when 'true' ->
					      %% Line 843
					      apply 'lc$^0'/1
						  (_cor5)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (%% Line 843
				   Constants)
			  -| ['list_comprehension'] )
		    in  let <_cor17> =
			    %% Line 844
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(_cor15,
					 []) ->
				  _cor15
			      <> when 'true' ->
				  [_cor15|[]]
			    end
			in  let <_cor19> =
				%% Line 845
				apply 'closure'/2
				    ({'call',L,F,[F|[C|[]]]}, L)
			    in  let <CC1> =
				    %% Line 845
				    {'clause',L,[AP|[]],_cor17,[{'cons',L,O,_cor19}|[]]}
				in  let <CC2> =
					%% Line 846
					{'clause',L,[{'var',L,'_'}|[]],[],[{'call',L,F,[F|[C|[]]]}|[]]}
				    in  let <Case> =
					    %% Line 847
					    {'case',L,O,[CC1|[CC2|[]]]}
					in  let <Cls> =
						%% Line 848
						[{'clause',L,[{'var',L,'_'}|[{'nil',L}|[]]],[],[{'nil',L}|[]]}|%% Line 849
													       [{'clause',L,[F|[{'cons',L,O,C}|[]]],[],[Case|[]]}|%% Line 850
																				  [{'clause',L,[F|[C|[]]],[[{'call',L,{'atom',L,'is_function'},[C|[]]}|[]]|[]],%% Line 851
																													       [{'call',L,F,[F|[{'call',L,C,[]}|[]]]}|[]]}|%% Line 852
																																			   [{'clause',L,[{'var',L,'_'}|[C|[]]],[],[C|[]]}|[]]]]]
					    in  let <Fun> = {%% Line 853
						     'fun',%% Line 853
							   L,%% Line 853
							     {'clauses',Cls}}
						in  let <_cor25> =
							%% Line 855
							apply 'closure'/2
							    ({'call',L,F,[F|[H|[]]]}, %% Line 856
										      L)
						    in  %% Line 854
							{'fun',L,{'clauses',[{'clause',L,[H|[]],[],[{'match',L,F,Fun}|%% Line 855
														      [_cor25|%% Line 856
															      []]]}|%% Line 856
																    []]}}
	      end
	  ( <_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'join_handle',4}}] )
	    -| ['compiler_generated'] )
	end
'join_handle_constants'/2 =
    %% Line 859
    fun (_cor1,_cor0) ->
	%% Line 860
	( case _cor1 of
	    ( <( {'qid',_cor8,_rec9}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 861
		  case call 'lists':'keyfind'
			   (_rec9, 1, _cor0) of
		    %% Line 862
		    <{_cor10,ConstOps}>
			when call 'erlang':'=:='
			      (_cor10,
			       _rec9) ->
			%% Line 863
			ConstOps
		    %% Line 864
		    <'false'> when 'true' ->
			%% Line 865
			[]
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor9> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','qid'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'column_fun'/3 =
    %% Line 878
    fun (_cor2,_cor1,_cor0) ->
	let <_cor26> =
	    %% Line 880
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 897
			      {{CIdNo,Col},Vs0,{FTag,Fils}}|_cor4]>
				when %% Line 898
				  call 'erlang':'=:='
				      (CIdNo,
				       _cor1) ->
				%% Line 881
				case call 'erlang':'=/='
					 (Vs0, []) of
				  <'true'> when 'true' ->
				      let <Vs1> =
					  %% Line 882
					  apply 'list2cons'/1
					      (Vs0)
				      in  let <_cor12> =
					      %% Line 885
					      ( fun (_cor9,_cor8) ->
						    {'cons',0,{'integer',0,_cor9},_cor8}
						-| [{'id',{0,0,'-column_fun/3-fun-0-'}}] )
					  in  let <_cor13> =
						  %% Line 884
						  call 'lists':'foldr'
						      (_cor12, %% Line 886
							       {'nil',0}, %% Line 886
									  Fils)
					      in  let <Fils1> =
						      %% Line 883
						      {'tuple',0,[{'atom',0,FTag}|%% Line 884
										  [_cor13|%% Line 886
											  []]]}
						  in  let <_cor15> =
							  %% Line 887
							  call 'qlc':'vars'
							      (Vs1)
						      in  let <_cor21> =
							      %% Line 887
							      case call 'ordsets':'to_list'
								       (_cor15) of
								%% Line 888
								<Imp>
								    when try
									  let <_cor16> =
									      call 'erlang':'length'
										  (Imp)
									  in  let <_cor17> =
										  call 'erlang':'>'
										      (_cor16, 0)
									      in  let <_cor18> =
										      %% Line 889
										      call 'erlang':'length'
											  (Vs0)
										  in  let <_cor19> =
											  %% Line 889
											  call 'erlang':'>'
											      (_cor18, 1)
										      in  call 'erlang':'and'
											      (_cor17, _cor19)
								      of <Try> ->
									  Try
								      catch <T,R> ->
									  'false' ->
								    %% Line 890
								    'usort_needed'
								%% Line 891
								<_cor32> when 'true' ->
								    %% Line 892
								    'values'
							      end
							  in  let <Vs> =
								  %% Line 894
								  {'tuple',0,[{'atom',0,_cor21}|[Vs1|[Fils1|[]]]]}
							      in  let <_cor24> =
								      %% Line 895
								      call 'erl_parse':'abstract'
									  (Col)
								  in  let <_cor25> =
									  %% Line 897
									  apply 'lc$^0'/1
									      (_cor4)
								      in  ( [%% Line 895
									     {'clause',0,[_cor24|[]],[],[Vs|[]]}|_cor25]
									    -| ['compiler_generated'] )
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <[_cor3|_cor4]> when 'true' ->
				  %% Line 897
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				%% Line 899
				[{'clause',0,[{'var',0,'_'}],[],[{'atom',0,'false'}]}]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  let <ColCls> =
		%% Line 900
		apply 'set_line'/2
		    (_cor26, _cor0)
	    in  %% Line 901
		{'fun',_cor0,{'clauses',ColCls}}
'template_columns'/5 =
    %% Line 915
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 916
	    apply 'pre_expand'/1
		(_cor3)
	in  let <E> =
		%% Line 916
		apply 'expand_expr_records'/2
		    (_cor5, _cor0)
	    in  let <TemplateAsPattern> =
		    %% Line 917
		    apply 'template_as_pattern'/1
			(E)
		in  let <Qs> =
			%% Line 918
			[TemplateAsPattern|_cor4]
		    in  let <EqualColumns> =
			    %% Line 919
			    apply 'equal_columns2'/4
				(Qs, _cor2, _cor1, _cor0)
			in  let <MatchColumns> =
				%% Line 920
				apply 'eq_columns2'/4
				    (Qs, _cor2, _cor1, _cor0)
			    in  let <Equal> =
				    %% Line 921
				    apply 'template_cols'/1
					(EqualColumns)
				in  let <Match> =
					%% Line 922
					apply 'template_cols'/1
					    (MatchColumns)
				    in  %% Line 924
					case <> of
					  %% Line 925
					  <>
					      when call 'erlang':'=:='
						    (Match,
						     Equal) ->
					      %% Line 926
					      [{{'var',0,'_'},Match}|[]]
					  %% Line 927
					  <> when 'true' ->
					      %% Line 928
					      [{{'atom',0,'=='},Equal}|[{{'atom',0,'=:='},Match}|[]]]
					end
'equal_columns2'/4 =
    %% Line 931
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 932
	case %% Line 933
	     apply 'join_info'/5
		 (_cor3, _cor2, _cor1, _cor0, '==') of
	  <{JI,_X_Skip}> when 'true' ->
	      %% Line 934
	      JI
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'eq_columns2'/4 =
    %% Line 936
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 937
	case %% Line 938
	     apply 'join_info'/5
		 (_cor3, _cor2, _cor1, _cor0, '=:=') of
	  <{JI,_X_SKip}> when 'true' ->
	      %% Line 939
	      JI
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'template_cols'/1 =
    %% Line 941
    fun (_cor0) ->
	let <_cor16> =
	    %% Line 942
	    ( letrec
		  'lc$^1'/1 =
		      fun (_cor11) ->
			  case _cor11 of
			    <[%% Line 943
			      Class|_cor2]> when 'true' ->
				( letrec
				      'lc$^2'/1 =
					  fun (_cor12) ->
					      case _cor12 of
						<[%% Line 944
						  {IdNo,Col}|_cor4]>
						    when %% Line 945
						      call 'erlang':'=/='
							  (IdNo,
							   0) ->
						    let <_cor9> =
							%% Line 946
							( letrec
							      'lc$^0'/1 =
								  fun (_cor7) ->
								      case _cor7 of
									<[{0,C}|_cor6]> when 'true' ->
									    let <_cor8> =
										apply 'lc$^0'/1
										    (_cor6)
									    in  ( [C|_cor8]
										  -| ['compiler_generated'] )
									( <[_cor5|_cor6]> when 'true' ->
									      apply 'lc$^0'/1
										  (_cor6)
									  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    []
									( <_cor7> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor7})
										-| [{'function_name',{'lc$^0',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  apply 'lc$^0'/1
								  (Class)
							  -| ['list_comprehension'] )
						    in  %% Line 946
							( case <> of
							    <>
								when call 'erlang':'=/='
								      ([],
								       _cor9) ->
								let <_cor13> =
								    call 'lists':'usort'
									(_cor9)
								in  let <_cor14> =
									apply 'lc$^2'/1
									    (_cor4)
								    in  ( [{{IdNo,Col},_cor13}|_cor14]
									  -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  apply 'lc$^2'/1
								      (_cor4)
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						( <[_cor3|_cor4]> when 'true' ->
						      %% Line 944
						      apply 'lc$^2'/1
							  (_cor4)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 943
						    apply 'lc$^1'/1
							(_cor2)
						( <_cor12> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor12})
							-| [{'function_name',{'lc$^2',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^2'/1
					  (%% Line 944
					   Class)
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor11> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor11})
				    -| [{'function_name',{'lc$^1',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^1'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 942
	    call 'lists':'sort'
		(_cor16)
'template_as_pattern'/1 =
    %% Line 948
    fun (_cor0) ->
	let <P> =
	    %% Line 949
	    apply 'simple_template'/1
		(_cor0)
	in  %% Line 950
	    {{'qid','template',0},'foo','foo',{'gen',P,{'nil',0}}}
'simple_template'/1 =
    %% Line 952
    fun (_cor0) ->
	case _cor0 of
	  <{'call',L,Call = {'remote',_cor13,{'atom',_cor14,'erlang'},{'atom',_cor15,'element'}},%% Line 953
												 [A1 = {'integer',_cor16,I}|[A2|[]]]}>
	      when %% Line 953
		call 'erlang':'>'
		    (I,
		     0) ->
	      let <_cor1> =
		  %% Line 955
		  apply 'simple_template'/1
		      (A2)
	      in  %% Line 955
		  {'call',L,Call,[A1|[_cor1|[]]]}
	  %% Line 956
	  <E = {'var',_cor17,_cor18}> when 'true' ->
	      %% Line 957
	      E
	  %% Line 958
	  <{'tuple',L,Es}> when 'true' ->
	      let <_cor7> =
		  %% Line 959
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[E|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'simple_template'/1
					      (E)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Es)
		    -| ['list_comprehension'] )
	      in  %% Line 959
		  {'tuple',L,_cor7}
	  %% Line 960
	  <{'cons',L,H,T}> when 'true' ->
	      let <_cor9> =
		  %% Line 961
		  apply 'simple_template'/1
		      (H)
	      in  let <_cor8> =
		      %% Line 961
		      apply 'simple_template'/1
			  (T)
		  in  %% Line 961
		      {'cons',L,_cor9,_cor8}
	  %% Line 962
	  <E> when 'true' ->
	      let <_cor10> =
		  catch
		      %% Line 963
		      call 'erl_parse':'normalise'
			  (E)
	      in  %% Line 963
		  case _cor10 of
		    %% Line 964
		    <{'EXIT',_cor19}> when 'true' ->
			apply 'unique_var'/0
			    ()
		    %% Line 965
		    <_cor20> when 'true' ->
			E
		  end
	end
'qualifier_dependencies'/2 =
    %% Line 970
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 971
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[{QId,IVs}|_cor3]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[IV|_cor5]> when 'true' ->
						    let <_cor8> =
							apply 'lc$^1'/1
							    (_cor5)
						    in  ( [{IV,QId}|_cor8]
							  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor3)
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (IVs)
				  -| ['list_comprehension'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <Intro> =
		%% Line 971
		call 'sofs':'relation'
		    (_cor9)
	    in  %% Line 972
		case apply 'qual_data'/1
			 (_cor1) of
		  <{FilterData,_cor44}> when 'true' ->
		      let <_cor20> =
			  %% Line 973
			  ( letrec
				'lc$^2'/1 =
				    fun (_cor17) ->
					case _cor17 of
					  <[%% Line 974
					    {QId,{'fil',F}}|_cor13]> when 'true' ->
					      ( letrec
						    'lc$^3'/1 =
							fun (_cor18) ->
							    case _cor18 of
							      <[%% Line 975
								UV|_cor15]> when 'true' ->
								  let <_cor19> =
								      %% Line 975
								      apply 'lc$^3'/1
									  (_cor15)
								  in  ( [{QId,UV}|_cor19]
									-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  %% Line 974
								  apply 'lc$^2'/1
								      (_cor13)
							      ( <_cor18> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor18})
								      -| [{'function_name',{'lc$^3',1}}] )
								-| ['compiler_generated'] )
							    end
						in  let <_cor16> =
							%% Line 975
							call 'qlc':'vars'
							    (F)
						    in  apply 'lc$^3'/1
							    (_cor16)
						-| ['list_comprehension'] )
					  ( <[_cor12|_cor13]> when 'true' ->
						%% Line 974
						apply 'lc$^2'/1
						    (_cor13)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor17> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor17})
						  -| [{'function_name',{'lc$^2',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^2'/1
				    (%% Line 974
				     FilterData)
			    -| ['list_comprehension'] )
		      in  let <Used> =
			      %% Line 973
			      call 'sofs':'relation'
				  (_cor20)
			  in  let <_cor22> =
				  %% Line 976
				  call 'sofs':'relative_product'
				      (Used, Intro)
			      in  let <Depend> =
				      %% Line 976
				      call 'sofs':'strict_relation'
					  (_cor22)
				  in  let <_cor24> =
					  %% Line 977
					  call 'sofs':'relation_to_family'
					      (Depend)
				      in  let <G> =
					      %% Line 977
					      call 'sofs':'family_to_digraph'
						  (_cor24)
					  in  let <_cor32> =
						  %% Line 978
						  ( letrec
							'lc$^4'/1 =
							    fun (_cor29) ->
								case _cor29 of
								  <[%% Line 979
								    V|_cor27]> when 'true' ->
								      let <_cor30> =
									  call 'digraph_utils':'reachable_neighbours'
									      ([V|[]], G)
								      in  let <_cor31> =
									      %% Line 979
									      apply 'lc$^4'/1
										  (_cor27)
									  in  ( [{V,_cor30}|_cor31]
										-| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_cor29> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor29})
									  -| [{'function_name',{'lc$^4',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  let <_cor28> =
							    %% Line 979
							    call 'digraph':'vertices'
								(G)
							in  apply 'lc$^4'/1
								(_cor28)
						    -| ['list_comprehension'] )
					      in  %% Line 980
						  case call 'digraph':'delete'
							   (G) of
						    <'true'> when 'true' ->
							let <_cor35> =
							    %% Line 981
							    apply 'filter_ids'/1
								(_cor1)
							in  let <FilterIds> =
								%% Line 981
								call 'sofs':'set'
								    (_cor35)
							    in  let <_cor37> =
								    %% Line 982
								    call 'sofs':'family'
									(_cor32)
								in  let <Dep1> =
									%% Line 982
									call 'sofs':'restriction'
									    (_cor37, FilterIds)
								    in  let <_cor39> =
									    %% Line 983
									    call 'sofs':'empty_set'
										()
									in  let <NoDep> =
										%% Line 983
										call 'sofs':'constant_function'
										    (FilterIds, _cor39)
									    in  let <_cor41> =
										    %% Line 984
										    call 'sofs':'family_union'
											(Dep1, NoDep)
										in  %% Line 984
										    call 'sofs':'to_external'
											(_cor41)
						    ( <_cor34> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor34})
						      -| ['compiler_generated'] )
						  end
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor11})
		    -| ['compiler_generated'] )
		end
'filter_ids'/1 =
    %% Line 986
    fun (_cor0) ->
	%% Line 987
	case apply 'qual_data'/1
		 (_cor0) of
	  <{FilterData,_cor7}> when 'true' ->
	      %% Line 988
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[{QId,_cor8}|_cor3]> when 'true' ->
				  let <_cor5> =
				      apply 'lc$^0'/1
					  (_cor3)
				  in  ( [QId|_cor5]
					-| ['compiler_generated'] )
			      ( <[_cor2|_cor3]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor3)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(FilterData)
		-| ['list_comprehension'] )
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'match_spec_quals'/4 =
    %% Line 996
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 997
	case apply 'qual_data'/1
		 (_cor1) of
	  <{FilterData,GeneratorData}> when 'true' ->
	      let <_cor13> =
		  %% Line 998
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor11) ->
				case _cor11 of
				  <[{GId,_cor71}|_cor10]> when 'true' ->
				      let <_cor12> =
					  apply 'lc$^0'/1
					      (_cor10)
				      in  ( [GId|_cor12]
					    -| ['compiler_generated'] )
				  ( <[_cor9|_cor10]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor10)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor11> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor11})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (GeneratorData)
		    -| ['list_comprehension'] )
	      in  let <_cor7> =
		      %% Line 999
		      ( fun (_cor5) ->
			    case _cor5 of
			      <{_cor72,GIds}> when 'true' ->
				  GIds
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'-match_spec_quals/4-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-match_spec_quals/4-fun-0-'}}] )
		  in  let <_cor8> =
			  %% Line 999
			  call 'lists':'flatmap'
			      (_cor7, _cor2)
		      in  let <NoFilterGIds> =
			      %% Line 999
			      call 'erlang':'--'
				  (_cor13, _cor8)
			  in  let <Filters> =
				  %% Line 1000
				  apply 'filter_list'/3
				      (FilterData, _cor2, _cor0)
			      in  let <_cor23> =
				      %% Line 1007
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor18) ->
						    case _cor18 of
						      <[%% Line 1008
							{GId,{'gen',Pattern,_cor73}}|_cor17]> when 'true' ->
							  %% Line 1009
							  ( case call 'lists':'member'
								     (GId, NoFilterGIds) of
							      <'true'> when 'true' ->
								  ( case GId of
								      ( <( {'qid',_cor74,_rec11}
									   -| ['compiler_generated'] )> when 'true' ->
									    let <_cor21> =
										apply 'lc$^1'/1
										    (_cor17)
									    in  ( [{_rec11,Pattern,[],{'atom',0,'true'}}|_cor21]
										  -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								      ( <_cor75> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {'badrecord','qid'}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      ( <'false'> when 'true' ->
								    apply 'lc$^1'/1
									(_cor17)
								-| ['compiler_generated'] )
							      ( <_cor22> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor22})
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
						      ( <[_cor16|_cor17]> when 'true' ->
							    %% Line 1008
							    apply 'lc$^1'/1
								(_cor17)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor18> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor18})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(%% Line 1008
						 GeneratorData)
					-| ['list_comprehension'] )
				  in  let <_cor36> =
					  %% Line 1001
					  ( letrec
						'lc$^2'/1 =
						    fun (_cor30) ->
							case _cor30 of
							  <[%% Line 1002
							    {QId,[QId2|[]]}|_cor25]> when 'true' ->
							      ( letrec
								    'lc$^3'/1 =
									fun (_cor31) ->
									    case _cor31 of
									      <[%% Line 1003
										{GQId,{'gen',Pattern,_cor76}}|_cor27]>
										  when %% Line 1004
										    call 'erlang':'=:='
											(GQId,
											 QId2) ->
										  ( letrec
											'lc$^4'/1 =
											    fun (_cor32) ->
												case _cor32 of
												  <[Filter = %% Line 1005
													     {FQId,{'fil',F}}|_cor29]>
												      when %% Line 1006
													call 'erlang':'=:='
													    (FQId,
													     QId) ->
												      ( case QId2 of
													  ( <( {'qid',_cor77,_rec10}
													       -| ['compiler_generated'] )> when 'true' ->
														let <_cor35> =
														    %% Line 1005
														    apply 'lc$^4'/1
															(_cor29)
														in  ( [{_rec10,Pattern,[Filter|[]],F}|_cor35]
														      -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													  ( <_cor78> when 'true' ->
														( call ( 'erlang'
															 -| ['compiler_generated'] ):( 'error'
																		       -| ['compiler_generated'] )
														      (( {'badrecord','qid'}
															 -| ['compiler_generated'] ))
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													end
													-| ['compiler_generated'] )
												  ( <[_cor28|_cor29]> when 'true' ->
													%% Line 1005
													apply 'lc$^4'/1
													    (_cor29)
												    -| ['compiler_generated'] )
												  <[]> when 'true' ->
												      %% Line 1003
												      apply 'lc$^3'/1
													  (_cor27)
												  ( <_cor32> when 'true' ->
													( primop 'match_fail'
													      ({'function_clause',_cor32})
													  -| [{'function_name',{'lc$^4',1}}] )
												    -| ['compiler_generated'] )
												end
										    in  apply 'lc$^4'/1
											    (%% Line 1005
											     Filters)
										    -| ['list_comprehension'] )
									      ( <[_cor26|_cor27]> when 'true' ->
										    %% Line 1003
										    apply 'lc$^3'/1
											(_cor27)
										-| ['compiler_generated'] )
									      <[]> when 'true' ->
										  %% Line 1002
										  apply 'lc$^2'/1
										      (_cor25)
									      ( <_cor31> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor31})
										      -| [{'function_name',{'lc$^3',1}}] )
										-| ['compiler_generated'] )
									    end
								in  apply 'lc$^3'/1
									(%% Line 1003
									 GeneratorData)
								-| ['list_comprehension'] )
							  ( <[_cor24|_cor25]> when 'true' ->
								%% Line 1002
								apply 'lc$^2'/1
								    (_cor25)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      _cor23
							  ( <_cor30> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor30})
								  -| [{'function_name',{'lc$^2',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^2'/1
						    (_cor2)
					    -| ['list_comprehension'] )
				      in  let <_cor45> =
					      %% Line 1011
					      ( letrec
						    'lc$^5'/1 =
							fun (_cor42) ->
							    case _cor42 of
							      <[%% Line 1012
								{GNum,Pattern,Filter,F}|_cor40]> when 'true' ->
								  let <_cor41> =
								      %% Line 1013
								      apply 'try_ms'/4
									  ({'nil',0}, Pattern, F, _cor0)
								  in  %% Line 1013
								      ( case <> of
									  <>
									      when call 'erlang':'=/='
										    ('no',
										     _cor41) ->
									      let <_cor43> =
										  apply 'lc$^5'/1
										      (_cor40)
									      in  ( [{{GNum,Pattern},Filter}|_cor43]
										    -| ['compiler_generated'] )
									  ( <> when 'true' ->
										apply 'lc$^5'/1
										    (_cor40)
									    -| ['compiler_generated'] )
									end
									-| ['list_comprehension'] )
							      ( <[_cor39|_cor40]> when 'true' ->
								    %% Line 1012
								    apply 'lc$^5'/1
									(_cor40)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor42> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor42})
								      -| [{'function_name',{'lc$^5',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^5'/1
							(_cor36)
						-| ['list_comprehension'] )
					  in  let <_cor47> =
						  %% Line 1014
						  call 'sofs':'relation'
						      (_cor45, %% Line 1015
							       [{'gnum_pattern',['filter']}])
					      in  let <GFF> =
						      %% Line 1014
						      call 'sofs':'relation_to_family'
							  (_cor47)
						  in  let <_cor49> =
							  %% Line 1016
							  call 'sofs':'family_union'
							      (GFF)
						      in  let <GFFL> =
							      %% Line 1016
							      call 'sofs':'to_external'
								  (_cor49)
							  in  %% Line 1017
							      try
								  %% Line 1018
								  case GFFL of
								    <[{{GNum,Pattern},GFilterData}|[]]> when 'true' ->
									let <_cor53> =
									    %% Line 1019
									    call 'erlang':'length'
										(GFilterData)
									in  let <_cor52> =
										%% Line 1019
										call 'erlang':'length'
										    (FilterData)
									    in  %% Line 1019
										case call 'erlang':'=:='
											 (_cor53, _cor52) of
										  <'true'> when 'true' ->
										      %% Line 1020
										      case GeneratorData of
											<[_cor79|[]]> when 'true' ->
											    let <AbstrMS> =
												%% Line 1021
												apply 'gen_ms'/4
												    (_cor3, Pattern, GFilterData, _cor0)
											    in  %% Line 1025
												[{GNum,AbstrMS,'all'}|[]]
											( <_cor55> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_cor55})
											  -| ['compiler_generated'] )
										      end
										  ( <_cor54> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor54})
										    -| ['compiler_generated'] )
										end
								    ( <_cor51> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor51})
								      -| ['compiler_generated'] )
								  end
							      of <_cor57> ->
								  _cor57
							      catch <_cor60,_cor59,_cor58> ->
								  %% Line 1027
								  case apply 'anon_var'/2
									   ({'var',0,'_'}, 0) of
								    <{TemplVar,_cor83}> when 'true' ->
									%% Line 1028
									( letrec
									      'lc$^6'/1 =
										  fun (_cor64) ->
										      case _cor64 of
											<[%% Line 1029
											  {{GNum,Pattern},GFilterData}|_cor63]> when 'true' ->
											    let <_cor65> =
												apply 'one_gen_match_spec'/5
												    (GNum, Pattern, GFilterData, _cor0, TemplVar)
											    in  let <_cor66> =
												    %% Line 1029
												    apply 'lc$^6'/1
													(_cor63)
												in  ( [_cor65|_cor66]
												      -| ['compiler_generated'] )
											( <[_cor62|_cor63]> when 'true' ->
											      %% Line 1029
											      apply 'lc$^6'/1
												  (_cor63)
											  -| ['compiler_generated'] )
											<[]> when 'true' ->
											    []
											( <_cor64> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor64})
												-| [{'function_name',{'lc$^6',1}}] )
											  -| ['compiler_generated'] )
										      end
									  in  apply 'lc$^6'/1
										  (%% Line 1029
										   GFFL)
									  -| ['list_comprehension'] )
								    ( <_cor61> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor61})
								      -| ['compiler_generated'] )
								  end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'one_gen_match_spec'/5 =
    %% Line 1032
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1033
	case apply 'pattern_as_template'/2
		 (_cor3, _cor0) of
	  <{E,Pattern}> when 'true' ->
	      let <AbstrMS> =
		  %% Line 1034
		  apply 'gen_ms'/4
		      (E, Pattern, _cor2, _cor1)
	      in  let <_cor13> =
		      %% Line 1035
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor9) ->
				    case _cor9 of
				      <[{FId,_cor19}|_cor8]> when 'true' ->
					  ( case FId of
					      ( <( {'qid',_cor20,_rec12}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_cor12> =
							apply 'lc$^0'/1
							    (_cor8)
						    in  ( [_rec12|_cor12]
							  -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_cor21> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','qid'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <[_cor7|_cor8]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor8)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor9> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor9})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor2)
			-| ['list_comprehension'] )
		  in  %% Line 1035
		      {_cor4,AbstrMS,_cor13}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'gen_ms'/4 =
    %% Line 1037
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1038
	    apply 'filters_as_one'/1
		(_cor1)
	in  %% Line 1038
	    case apply 'try_ms'/4
		     (_cor3, _cor2, _cor4, _cor0) of
	      <{'ok',MS,AMS}> when 'true' ->
		  %% Line 1039
		  case MS of
		    %% Line 1040
		    <[{'$1',['true'],['$1']}]> when 'true' ->
			%% Line 1041
			{'atom',0,'no_match_spec'}
		    %% Line 1042
		    <_cor11> when 'true' ->
			%% Line 1043
			AMS
		  end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'pattern_as_template'/2 =
    %% Line 1050
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'var',_cor5,'_'},TemplVar> when 'true' ->
	      %% Line 1051
	      {TemplVar,TemplVar}
	  %% Line 1052
	  <V = {'var',_cor6,_cor7},_X_TemplVar> when 'true' ->
	      %% Line 1053
	      {V,V}
	  %% Line 1054
	  <{'match',L,E,{'var',_cor8,'_'}},TemplVar> when 'true' ->
	      %% Line 1055
	      {TemplVar,{'match',L,E,TemplVar}}
	  %% Line 1056
	  <{'match',L,{'var',_cor9,'_'},E},TemplVar> when 'true' ->
	      %% Line 1057
	      {TemplVar,{'match',L,E,TemplVar}}
	  %% Line 1058
	  <P = {'match',_cor10,_X_E,V = {'var',_cor11,_cor12}},_X_TemplVar> when 'true' ->
	      %% Line 1059
	      {V,P}
	  %% Line 1060
	  <P = {'match',_cor13,V = {'var',_cor14,_cor15},_X_E},_X_TemplVar> when 'true' ->
	      %% Line 1061
	      {V,P}
	  %% Line 1062
	  <E,TemplVar> when 'true' ->
	      %% Line 1064
	      {TemplVar,{'match',0,E,TemplVar}}
	end
'constants_and_sizes'/5 =
    %% Line 1084
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <TemplateAsPattern> =
	    %% Line 1085
	    apply 'template_as_pattern'/1
		(_cor3)
	in  let <Qualifiers> =
		%% Line 1086
		[TemplateAsPattern|_cor4]
	    in  %% Line 1087
		case apply 'qual_data'/1
			 (Qualifiers) of
		  <{FilterData,GeneratorData}> when 'true' ->
		      %% Line 1088
		      case %% Line 1089
			   apply 'filter_info'/4
			       (FilterData, _cor1, _cor2, _cor0) of
			<{Filter,Anon1,Imported}> when 'true' ->
			    let <PatBindFun> =
				%% Line 1090
				( fun (_cor10,_cor9) ->
				      apply 'is_bindable'/1
					  (_cor9)
				  -| [{'id',{0,0,'-constants_and_sizes/5-fun-0-'}}] )
			    in  %% Line 1091
				case %% Line 1092
				     apply 'pattern_frame'/4
					 (GeneratorData, PatBindFun, Anon1, _cor0) of
				  <{PatternFrame,PatternVars}> when 'true' ->
				      let <PatternFrames> =
					  %% Line 1093
					  apply 'frame2frames'/1
					      (PatternFrame)
				      in  let <FilterFun> =
					      %% Line 1095
					      ( fun (_cor16) ->
						    %% Line 1096
						    apply 'filter'/5
							(Filter, PatternFrames, _cor16, _cor0, Imported)
						-| [{'id',{0,0,'-constants_and_sizes/5-fun-1-'}}] )
					  in  let <SzFs> =
						  %% Line 1098
						  apply FilterFun
						      (PatBindFun)
					      in  let <SizeInfo> =
						      %% Line 1100
						      apply 'pattern_sizes'/2
							  (PatternVars, SzFs)
						  in  let <SelectorFun> =
							  %% Line 1101
							  apply 'const_selector'/1
							      (Imported)
						      in  let <_cor22> =
							      %% Line 1104
							      apply 'deref_pattern'/1
								  (Imported)
							  in  let <_cor23> =
								  %% Line 1103
								  apply 'frames_to_columns'/6
								      (PatternFrames, PatternVars, _cor22, %% Line 1105
													   SelectorFun, %% Line 1105
															Imported, %% Line 1106
																  '=:=')
							      in  let <PatternConstants> =
								      %% Line 1103
								      call 'lists':'flatten'
									  (_cor23)
								  in  %% Line 1108
								      case %% Line 1109
									   apply 'constants'/9
									       (FilterFun, PatternVars, PatternConstants, PatternFrame, %% Line 1110
																	FilterData, _cor2, %% Line 1110
																			   '=:=', %% Line 1111
																				  Imported, _cor0) of
									<{EqColumnConstants,_X_EqExtraConsts}> when 'true' ->
									    %% Line 1112
									    case %% Line 1113
										 apply 'constants'/9
										     (FilterFun, PatternVars, PatternConstants, PatternFrame, %% Line 1114
																	      FilterData, _cor2, %% Line 1114
																				 '==', %% Line 1115
																				       Imported, _cor0) of
									      <{EqualColumnConstants,EqualExtraConsts}> when 'true' ->
										  let <_cor38> =
										      %% Line 1124
										      ( letrec
											    'lc$^0'/1 =
												fun (_cor35) ->
												    case _cor35 of
												      <[%% Line 1125
													{Consts,Op}|_cor32]> when 'true' ->
													  ( letrec
														'lc$^1'/1 =
														    fun (_cor36) ->
															case _cor36 of
															  <[%% Line 1126
															    {{GId,Col},Val}|_cor34]> when 'true' ->
															      let <_cor37> =
																  %% Line 1126
																  apply 'lc$^1'/1
																      (_cor34)
															      in  ( [{{GId,Col},{Val,Op}}|_cor37]
																    -| ['compiler_generated'] )
															  ( <[_cor33|_cor34]> when 'true' ->
																%% Line 1126
																apply 'lc$^1'/1
																    (_cor34)
															    -| ['compiler_generated'] )
															  <[]> when 'true' ->
															      %% Line 1125
															      apply 'lc$^0'/1
																  (_cor32)
															  ( <_cor36> when 'true' ->
																( primop 'match_fail'
																      ({'function_clause',_cor36})
																  -| [{'function_name',{'lc$^1',1}}] )
															    -| ['compiler_generated'] )
															end
													    in  apply 'lc$^1'/1
														    (%% Line 1126
														     Consts)
													    -| ['list_comprehension'] )
												      ( <[_cor31|_cor32]> when 'true' ->
													    %% Line 1125
													    apply 'lc$^0'/1
														(_cor32)
													-| ['compiler_generated'] )
												      <[]> when 'true' ->
													  []
												      ( <_cor35> when 'true' ->
													    ( primop 'match_fail'
														  ({'function_clause',_cor35})
													      -| [{'function_name',{'lc$^0',1}}] )
													-| ['compiler_generated'] )
												    end
											in  apply 'lc$^0'/1
												(%% Line 1125
												 [{EqualExtraConsts,'=='}|[]])
											-| ['list_comprehension'] )
										  in  let <_cor45> =
											  %% Line 1128
											  ( letrec
												'lc$^2'/1 =
												    fun (_cor43) ->
													case _cor43 of
													  <[%% Line 1129
													    {{GId,Col},ValOps}|_cor41]> when 'true' ->
													      let <_cor44> =
														  %% Line 1129
														  apply 'lc$^2'/1
														      (_cor41)
													      in  ( [{GId,{Col,ValOps}}|_cor44]
														    -| ['compiler_generated'] )
													  ( <[_cor40|_cor41]> when 'true' ->
														%% Line 1129
														apply 'lc$^2'/1
														    (_cor41)
													    -| ['compiler_generated'] )
													  <[]> when 'true' ->
													      []
													  ( <_cor43> when 'true' ->
														( primop 'match_fail'
														      ({'function_clause',_cor43})
														  -| [{'function_name',{'lc$^2',1}}] )
													    -| ['compiler_generated'] )
													end
											    in  let <_cor42> =
												    %% Line 1129
												    apply 'family_list'/1
													(_cor38)
												in  apply 'lc$^2'/1
													(_cor42)
											    -| ['list_comprehension'] )
										      in  let <ExtraConstants> =
											      %% Line 1128
											      apply 'family_list'/1
												  (_cor45)
											  in  %% Line 1130
											      {EqColumnConstants,EqualColumnConstants,ExtraConstants,SizeInfo}
									      ( <_cor30> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_cor30})
										-| ['compiler_generated'] )
									    end
									( <_cor27> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor27})
									  -| ['compiler_generated'] )
								      end
				  ( <_cor14> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor14})
				    -| ['compiler_generated'] )
				end
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'constants'/9 =
    %% Line 1132
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <BindFun> =
	    %% Line 1134
	    ( fun (_cor10,_cor9) ->
		  apply 'is_bindable'/1
		      (_cor9)
	      -| [{'id',{0,0,'-constants/9-fun-0-'}}] )
	in  let <Fs> =
		%% Line 1135
		apply _cor8
		    (BindFun)
	    in  let <SelectorFun> =
		    %% Line 1136
		    apply 'const_selector'/1
			(_cor1)
		in  let <_cor16> =
			%% Line 1138
			apply 'deref_lookup'/2
			    (_cor1, _cor2)
		    in  let <ColumnConstants0> =
			    %% Line 1137
			    apply 'frames_to_columns'/6
				(Fs, _cor7, _cor16, %% Line 1139
						    SelectorFun, _cor1, _cor2)
			in  let <ColumnConstants1> =
				%% Line 1140
				call 'lists':'flatten'
				    (ColumnConstants0)
			    in  let <_cor27> =
				    %% Line 1142
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor24) ->
						  case _cor24 of
						    <[%% Line 1143
						      {{GId,Col},Vals}|_cor20]>
							when %% Line 1144
							  call 'erlang':'=/='
							      (GId,
							       0) ->
							( letrec
							      'lc$^1'/1 =
								  fun (_cor25) ->
								      case _cor25 of
									<[%% Line 1145
									  Val|_cor23]> when 'true' ->
									    let <_cor26> =
										%% Line 1145
										apply 'lc$^1'/1
										    (_cor23)
									    in  ( [{{GId,Col},Val}|_cor26]
										  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    %% Line 1143
									    apply 'lc$^0'/1
										(_cor20)
									( <_cor25> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor25})
										-| [{'function_name',{'lc$^1',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  apply 'lc$^1'/1
								  (%% Line 1145
								   Vals)
							  -| ['list_comprehension'] )
						    ( <[_cor19|_cor20]> when 'true' ->
							  %% Line 1143
							  apply 'lc$^0'/1
							      (_cor20)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor24> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor24})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor21> =
					      %% Line 1143
					      call 'erlang':'--'
						  (ColumnConstants1, _cor6)
					  in  apply 'lc$^0'/1
						  (_cor21)
				      -| ['list_comprehension'] )
				in  let <ColumnConstants> =
					%% Line 1146
					apply 'lu_skip'/8
					    (ColumnConstants1, _cor4, _cor5, _cor7, _cor3, _cor0, _cor1, _cor2)
				    in  %% Line 1149
					{ColumnConstants,_cor27}
'deref_lookup'/2 =
    %% Line 1168
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Imported,'=='> when 'true' ->
	      %% Line 1170
	      ( fun (_cor3,_cor2) ->
		    apply 'deref_values'/3
			(_cor3, _cor2, Imported)
		-| [{'id',{0,0,'-deref_lookup/2-fun-0-'}}] )
	  %% Line 1171
	  <Imported,'=:='> when 'true' ->
	      let <BFun> =
		  %% Line 1174
		  ( fun (_cor9,_cor8) ->
			%% Line 1175
			( case <> of
			    ( <>
				  when call 'erlang':'=:='
					(_cor8,
					 '=:=') ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  apply 'free_of_integers'/2
				      (_cor9, Imported)
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-deref_lookup/2-fun-1-'}}] )
	      in  %% Line 1177
		  ( fun (_cor14,_cor13) ->
			apply 'deref_values'/4
			    (_cor14, _cor13, BFun, Imported)
		    -| [{'id',{0,0,'-deref_lookup/2-fun-2-'}}] )
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'deref_lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'lu_skip'/8 =
    %% Line 1182
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <FailSelector> =
	    %% Line 1186
	    ( fun (_cor10) ->
		  ( fun (_cor8) ->
			{'yes',_cor8}
		    -| [{'id',{0,0,'-lu_skip/8-fun-0-'}}] )
	      -| [{'id',{0,0,'-lu_skip/8-fun-1-'}}] )
	in  let <PatternFrames> =
		%% Line 1189
		apply 'frame2frames'/1
		    (_cor5)
	    in  let <_cor14> =
		    %% Line 1192
		    apply 'deref_pattern'/1
			(_cor1)
		in  let <_cor15> =
			%% Line 1191
			apply 'frames_to_columns'/6
			    (PatternFrames, _cor4, _cor14, %% Line 1192
							   FailSelector, _cor1, _cor0)
		    in  let <PatternColumns> =
			    %% Line 1191
			    call 'lists':'flatten'
				(_cor15)
			in  let <BindFun> =
				%% Line 1202
				( fun (_cor18,_cor17) ->
				      apply 'is_bindable'/1
					  (_cor17)
				  -| [{'id',{0,0,'-lu_skip/8-fun-2-'}}] )
			    in  let <_cor66> =
				    %% Line 1203
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor56) ->
						  case _cor56 of
						    <[%% Line 1204
						      {FId,{'fil',Fil}}|_cor23]> when 'true' ->
							let <_cor25> =
							    %% Line 1206
							    apply 'set_line'/2
								(Fil, 0)
							in  let <_cor27> =
								%% Line 1206
								apply 'safe_filter'/5
								    (_cor25, PatternFrames, %% Line 1207
											    BindFun, _cor2, _cor1)
							    in  %% Line 1206
								( case <> of
								    <>
									when call 'erlang':'=/='
									      ([],
									       _cor27) ->
									( letrec
									      'lc$^1'/1 =
										  fun (_cor57) ->
										      case _cor57 of
											<[%% Line 1208
											  {GId,PV}|_cor29]> when 'true' ->
											    let <_cor31> =
												%% Line 1211
												apply 'deref_lu_skip'/2
												    (_cor0, _cor1)
											    in  let <_cor30> =
												    %% Line 1213
												    apply 'const_selector'/1
													(_cor1)
												in  let <_cor32> =
													%% Line 1210
													apply 'frames_to_columns'/6
													    (_cor27, [{GId,PV}|[]], _cor31, _cor30, _cor1, _cor0)
												    in  let <_cor34> =
													    %% Line 1210
													    call 'erlang':'hd'
														(_cor32)
													in  %% Line 1209
													    ( case <> of
														<>
														    when call 'erlang':'=/='
															  ([],
															   _cor34) ->
														    let <_cor36> =
															%% Line 1220
															call 'erlang':'--'
															    (_cor34, PatternColumns)
														    in  let <_cor37> =
															    %% Line 1220
															    call 'erlang':'length'
																(_cor36)
															in  %% Line 1220
															    ( case <> of
																<>
																    when call 'erlang':'=:='
																	  (_cor37,
																	   1) ->
																    ( letrec
																	  'lc$^2'/1 =
																	      fun (_cor58) ->
																		  case _cor58 of
																		    <[%% Line 1221
																		      {Column = {_cor82,Col},Constants}|_cor39]> when 'true' ->
																			let <_cor55> =
																			    %% Line 1224
																			    ( fun (_cor53) ->
																				  %% Line 1229
																				  case apply 'unify_column'/5
																					   (_cor53, PV, Col, BindFun, _cor1) of
																				    <{VarI,FrameI}> when 'true' ->
																					let <VarValues> =
																					    %% Line 1231
																					    apply 'deref_skip'/4
																						(VarI, FrameI, _cor0, _cor1)
																					in  %% Line 1233
																					    case apply 'unify_column'/5
																						     (_cor5, PV, Col, BindFun, _cor1) of
																					      <{NV,F1}> when 'true' ->
																						  let <F2> =
																						      %% Line 1235
																						      apply 'unify_var_bindings'/7
																							  (VarValues, '=:=', NV, F1, %% Line 1236
																										     BindFun, _cor1, %% Line 1236
																												     'false')
																						  in  let <_cor45> =
																							  %% Line 1248
																							  case call 'lists':'keyfind'
																								   (Column, 1, _cor7) of
																							    %% Line 1249
																							    <'false'> when 'true' ->
																								[]
																							    %% Line 1250
																							    <{_cor83,LUCs}>
																								when call 'erlang':'=:='
																								      (_cor83,
																								       Column) ->
																								LUCs
																							    ( <_cor44> when 'true' ->
																								  primop 'match_fail'
																								      ({'case_clause',_cor44})
																							      -| ['compiler_generated'] )
																							  end
																						      in  let <_cor48> =
																							      %% Line 1254
																							      call 'erlang':'length'
																								  (VarValues)
																							  in  %% Line 1254
																							      ( case <> of
																								  ( <>
																									when call 'erlang':'=<'
																									      (_cor48,
																									       1) ->
																									let <_cor50> =
																									    %% Line 1255
																									    call 'erlang':'--'
																										(Constants, _cor45)
																									in  %% Line 1255
																									    ( case <> of
																										( <>
																										      when call 'erlang':'=:='
																											    (_cor50,
																											     []) ->
																										      %% Line 1256
																										      apply 'bindings_is_subset'/3
																											  (_cor53, F2, _cor1)
																										  -| ['compiler_generated'] )
																										( <> when 'true' ->
																										      'false'
																										  -| ['compiler_generated'] )
																									      end
																									      -| ['compiler_generated'] )
																								    -| ['compiler_generated'] )
																								  ( <> when 'true' ->
																									'false'
																								    -| ['compiler_generated'] )
																								end
																								-| ['compiler_generated'] )
																					      ( <_cor42> when 'true' ->
																						    primop 'match_fail'
																							({'badmatch',_cor42})
																						-| ['compiler_generated'] )
																					    end
																				    ( <_cor40> when 'true' ->
																					  primop 'match_fail'
																					      ({'badmatch',_cor40})
																				      -| ['compiler_generated'] )
																				  end
																			      -| [{'id',{0,0,'-lu_skip/8-fun-3-'}}] )
																			in  %% Line 1223
																			    ( case call 'lists':'all'
																				       (_cor55, _cor27) of
																				<'true'> when 'true' ->
																				    ( case FId of
																					( <( {'qid',_cor84,_rec13}
																					     -| ['compiler_generated'] )> when 'true' ->
																					      let <_cor61> =
																						  apply 'lc$^2'/1
																						      (_cor39)
																					      in  ( [{Column,_rec13}|_cor61]
																						    -| ['compiler_generated'] )
																					  -| ['compiler_generated'] )
																					( <_cor85> when 'true' ->
																					      ( call ( 'erlang'
																						       -| ['compiler_generated'] ):( 'error'
																										     -| ['compiler_generated'] )
																						    (( {'badrecord','qid'}
																						       -| ['compiler_generated'] ))
																						-| ['compiler_generated'] )
																					  -| ['compiler_generated'] )
																				      end
																				      -| ['compiler_generated'] )
																				( <'false'> when 'true' ->
																				      apply 'lc$^2'/1
																					  (_cor39)
																				  -| ['compiler_generated'] )
																				( <_cor62> when 'true' ->
																				      primop 'match_fail'
																					  ({'case_clause',_cor62})
																				  -| ['compiler_generated'] )
																			      end
																			      -| ['list_comprehension'] )
																		    ( <[_cor38|_cor39]> when 'true' ->
																			  %% Line 1221
																			  apply 'lc$^2'/1
																			      (_cor39)
																		      -| ['compiler_generated'] )
																		    <[]> when 'true' ->
																			apply 'lc$^1'/1
																			    (_cor29)
																		    ( <_cor58> when 'true' ->
																			  ( primop 'match_fail'
																				({'function_clause',_cor58})
																			    -| [{'function_name',{'lc$^2',1}}] )
																		      -| ['compiler_generated'] )
																		  end
																      in  apply 'lc$^2'/1
																	      (_cor36)
																      -| ['list_comprehension'] )
																( <> when 'true' ->
																      apply 'lc$^1'/1
																	  (_cor29)
																  -| ['compiler_generated'] )
															      end
															      -| ['list_comprehension'] )
														( <> when 'true' ->
														      apply 'lc$^1'/1
															  (_cor29)
														  -| ['compiler_generated'] )
													      end
													      -| ['list_comprehension'] )
											( <[_cor28|_cor29]> when 'true' ->
											      %% Line 1208
											      apply 'lc$^1'/1
												  (_cor29)
											  -| ['compiler_generated'] )
											<[]> when 'true' ->
											    apply 'lc$^0'/1
												(_cor23)
											( <_cor57> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor57})
												-| [{'function_name',{'lc$^1',1}}] )
											  -| ['compiler_generated'] )
										      end
									  in  apply 'lc$^1'/1
										  (_cor4)
									  -| ['list_comprehension'] )
								    ( <> when 'true' ->
									  apply 'lc$^0'/1
									      (_cor23)
								      -| ['compiler_generated'] )
								  end
								  -| ['list_comprehension'] )
						    ( <[_cor22|_cor23]> when 'true' ->
							  %% Line 1204
							  apply 'lc$^0'/1
							      (_cor23)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor56> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor56})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor24> =
					      %% Line 1205
					      apply 'filter_list'/3
						  (_cor6, _cor3, _cor2)
					  in  apply 'lc$^0'/1
						  (_cor24)
				      -| ['list_comprehension'] )
				in  let <ColFils> =
					%% Line 1258
					apply 'family_list'/1
					    (_cor66)
				    in  %% Line 1262
					( letrec
					      'lc$^3'/1 =
						  fun (_cor71) ->
						      case _cor71 of
							<[%% Line 1263
							  {Col,Constants}|_cor70]> when 'true' ->
							    let <_cor72> =
								apply 'skip_tag'/3
								    (Col, ColFils, _cor6)
							    in  let <_cor73> =
								    %% Line 1263
								    apply 'lc$^3'/1
									(_cor70)
								in  ( [{Col,Constants,_cor72}|_cor73]
								      -| ['compiler_generated'] )
							( <[_cor69|_cor70]> when 'true' ->
							      %% Line 1263
							      apply 'lc$^3'/1
								  (_cor70)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor71> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor71})
								-| [{'function_name',{'lc$^3',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^3'/1
						  (_cor7)
					  -| ['list_comprehension'] )
'deref_skip'/4 =
    %% Line 1265
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1266
	apply 'deref'/3
	    (_cor3, _cor2, _cor0)
'deref_lu_skip'/2 =
    %% Line 1268
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'==',Imported> when 'true' ->
	      let <BFun> =
		  %% Line 1270
		  ( fun (_cor5,_cor4) ->
			%% Line 1271
			( case <> of
			    ( <>
				  when call 'erlang':'=:='
					(_cor4,
					 '==') ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  apply 'free_of_integers'/2
				      (_cor5, Imported)
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-deref_lu_skip/2-fun-0-'}}] )
	      in  %% Line 1273
		  ( fun (_cor10,_cor9) ->
			apply 'deref_values'/4
			    (_cor10, _cor9, BFun, Imported)
		    -| [{'id',{0,0,'-deref_lu_skip/2-fun-1-'}}] )
	  %% Line 1274
	  <'=:=',Imported> when 'true' ->
	      %% Line 1276
	      ( fun (_cor14,_cor13) ->
		    apply 'deref_values'/3
			(_cor14, _cor13, Imported)
		-| [{'id',{0,0,'-deref_lu_skip/2-fun-2-'}}] )
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'deref_lu_skip',2}}] )
	    -| ['compiler_generated'] )
	end
'equal_columns'/4 =
    %% Line 1278
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1279
	case %% Line 1280
	     apply 'join_info'/5
		 (_cor3, _cor2, _cor1, _cor0, '==') of
	  <{Cs,Skip}> when 'true' ->
	      %% Line 1281
	      apply 'join_gens'/3
		  (Cs, _cor3, Skip)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'eq_columns'/4 =
    %% Line 1283
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1284
	case %% Line 1285
	     apply 'join_info'/5
		 (_cor3, _cor2, _cor1, _cor0, '=:=') of
	  <{Cs,Skip}> when 'true' ->
	      %% Line 1286
	      apply 'join_gens'/3
		  (Cs, _cor3, Skip)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'join_gens'/3 =
    %% Line 1289
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1290
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[C|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'family_list'/1
					(C)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  %% Line 1291
	    case apply 'qual_data'/1
		     (_cor1) of
	      <{FD,_X_GeneratorData}> when 'true' ->
		  let <_cor20> =
		      %% Line 1292
		      ( fun (_cor18) ->
			    let <_cor17> =
				call 'erlang':'length'
				    (_cor18)
			    in  call 'erlang':'=:='
				    (_cor17, 2)
			-| [{'id',{0,0,'-join_gens/3-fun-0-'}}] )
		  in  let <_cor21> =
			  %% Line 1292
			  call 'lists':'filter'
			      (_cor20, _cor8)
		      in  let <_cor22> =
			      %% Line 1292
			      apply 'join_gens2'/3
				  (_cor21, FD, _cor0)
			  in  let <_cor14> =
				  %% Line 1293
				  ( fun (_cor12) ->
					let <_cor11> =
					    call 'erlang':'length'
						(_cor12)
					in  call 'erlang':'>'
						(_cor11, 2)
				    -| [{'id',{0,0,'-join_gens/3-fun-1-'}}] )
			      in  let <_cor15> =
				      %% Line 1293
				      call 'lists':'filter'
					  (_cor14, _cor8)
				  in  let <_cor16> =
					  %% Line 1293
					  apply 'join_gens2'/3
					      (_cor15, FD, _cor0)
				      in  %% Line 1292
					  {_cor22,_cor16}
	      ( <_cor10> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor10})
		-| ['compiler_generated'] )
	    end
'join_gens2'/3 =
    %% Line 1295
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1296
	( letrec
	      'lc$^1'/1 =
		  fun (_cor12) ->
		      case _cor12 of
			<[%% Line 1302
			  J|_cor4]> when 'true' ->
			    let <_cor14> =
				case call 'lists':'keyfind'
					 (J, 1, _cor0) of
				  %% Line 1297
				  <{_cor20,FilL}>
				      when call 'erlang':'=:='
					    (_cor20,
					     J) ->
				      %% Line 1298
				      FilL
				  %% Line 1299
				  <'false'> when 'true' ->
				      %% Line 1300
				      []
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor13})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor15> =
				    apply 'skip_tag'/2
					(_cor14, _cor1)
				in  let <_cor16> =
					%% Line 1302
					apply 'lc$^1'/1
					    (_cor4)
				    in  ( [{J,_cor15}|_cor16]
					  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor12> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor12})
				-| [{'function_name',{'lc$^1',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor10> =
		  %% Line 1302
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[C|_cor6]> when 'true' ->
				      let <_cor8> =
					  call 'qlc':'all_selections'
					      (C)
				      in  let <_cor9> =
					      apply 'lc$^0'/1
						  (_cor6)
					  in  ( [_cor8|_cor9]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor2)
		    -| ['list_comprehension'] )
	      in  let <_cor11> =
		      %% Line 1302
		      call 'lists':'append'
			  (_cor10)
		  in  apply 'lc$^1'/1
			  (_cor11)
	  -| ['list_comprehension'] )
'skip_tag'/2 =
    %% Line 1304
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1305
	    case <> of
	      %% Line 1306
	      <>
		  when try
			let <_cor3> =
			    call 'erlang':'length'
				(_cor0)
			in  let <_cor2> =
				call 'erlang':'length'
				    (_cor1)
			    in  call 'erlang':'=:='
				    (_cor3, _cor2)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1307
		  'all'
	      %% Line 1308
	      <> when 'true' ->
		  %% Line 1309
		  'some'
	    end
	in  %% Line 1305
	    {_cor4,_cor1}
'skip_tag'/3 =
    %% Line 1312
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1313
	case call 'lists':'keyfind'
		 (_cor2, 1, _cor1) of
	  %% Line 1314
	  <{_cor11,FilL}>
	      when call 'erlang':'=:='
		    (_cor11,
		     _cor2) ->
	      let <_cor5> =
		  %% Line 1315
		  case <> of
		    %% Line 1316
		    <>
			when try
			      let <_cor4> =
				  call 'erlang':'length'
				      (_cor0)
			      in  let <_cor3> =
				      call 'erlang':'length'
					  (FilL)
				  in  call 'erlang':'=:='
					  (_cor4, _cor3)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 1317
			'all'
		    %% Line 1318
		    <> when 'true' ->
			%% Line 1319
			'some'
		  end
	      in  %% Line 1321
		  {_cor5,FilL}
	  %% Line 1322
	  <'false'> when 'true' ->
	      %% Line 1323
	      {'some',[]}
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'join_info'/5 =
    %% Line 1331
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1332
	case apply 'qual_data'/1
		 (_cor4) of
	  <{FilterData,GeneratorData}> when 'true' ->
	      %% Line 1333
	      case %% Line 1334
		   apply 'filter_info'/4
		       (FilterData, _cor3, _cor2, _cor1) of
		<{Filter,Anon1,Imported}> when 'true' ->
		    let <BindFun> =
			%% Line 1335
			( fun (_cor8,_cor7) ->
			      apply 'bind_no_const'/2
				  (_cor7, Imported)
			  -| [{'id',{0,0,'-join_info/5-fun-0-'}}] )
		    in  %% Line 1336
			case %% Line 1337
			     apply 'pattern_frame'/4
				 (GeneratorData, BindFun, Anon1, _cor1) of
			  <{PatternFrame,PatternVars}> when 'true' ->
			      let <PatternFrames> =
				  %% Line 1338
				  apply 'frame2frames'/1
				      (PatternFrame)
			      in  let <Fs> =
				      %% Line 1339
				      apply 'filter'/5
					  (Filter, PatternFrames, BindFun, _cor1, Imported)
				  in  let <SelectorFun> =
					  %% Line 1340
					  apply 'no_const_selector'/1
					      (Imported)
				      in  let <_cor20> =
					      %% Line 1342
					      ( fun (_cor17,_cor16) ->
						    apply 'deref_join'/3
							(_cor17, _cor16, _cor0)
						-| [{'id',{0,0,'-join_info/5-fun-1-'}}] )
					  in  let <Cols> =
						  %% Line 1341
						  apply 'frames_to_columns'/6
						      (Fs, PatternVars, _cor20, %% Line 1343
										SelectorFun, %% Line 1343
											     Imported, %% Line 1343
												       '=:=')
					      in  let <JC> =
						      %% Line 1344
						      apply 'join_classes'/1
							  (Cols)
						  in  let <Skip> =
							  %% Line 1345
							  apply 'join_skip'/8
							      (JC, FilterData, PatternFrame, %% Line 1346
											     PatternVars, _cor2, _cor1, %% Line 1346
															Imported, _cor0)
						      in  %% Line 1347
							  {JC,Skip}
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'deref_join'/3 =
    %% Line 1349
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E,Frame,'=='> when 'true' ->
	      %% Line 1350
	      apply 'deref_values'/3
		  (E, Frame, [])
	  %% Line 1351
	  <E,Frame,'=:='> when 'true' ->
	      let <_cor9> =
		  %% Line 1356
		  ( fun (_cor6,_cor5) ->
			call 'erlang':'=:='
			    (_cor5, '=:=')
		    -| [{'id',{0,0,'-deref_join/3-fun-0-'}}] )
	      in  %% Line 1356
		  apply 'deref_values'/4
		      (E, Frame, _cor9, 'all')
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'deref_join',3}}] )
	    -| ['compiler_generated'] )
	end
'join_classes'/1 =
    %% Line 1358
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1359
	    call 'lists':'append'
		(_cor0)
	in  let <ColVar> =
		%% Line 1359
		call 'sofs':'relation'
		    (_cor1)
	    in  let <Cols> =
		    %% Line 1360
		    call 'sofs':'partition'
			(2, ColVar)
		in  %% Line 1361
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor8) ->
				  case _cor8 of
				    <[Cs|_cor5]>
					when try
					      let <_cor6> =
						  call 'erlang':'length'
						      (Cs)
					      in  call 'erlang':'>'
						      (_cor6, 1)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_cor13> =
					    ( letrec
						  'lc$^1'/1 =
						      fun (_cor11) ->
							  case _cor11 of
							    <[{C,_cor16}|_cor10]> when 'true' ->
								let <_cor12> =
								    apply 'lc$^1'/1
									(_cor10)
								in  ( [C|_cor12]
								      -| ['compiler_generated'] )
							    ( <[_cor9|_cor10]> when 'true' ->
								  apply 'lc$^1'/1
								      (_cor10)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor11> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor11})
								    -| [{'function_name',{'lc$^1',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^1'/1
						      (Cs)
					      -| ['list_comprehension'] )
					in  let <_cor14> =
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor13|_cor14]
						  -| ['compiler_generated'] )
				    ( <[Cs|_cor5]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor5)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor8> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor7> =
			      call 'sofs':'to_external'
				  (Cols)
			  in  apply 'lc$^0'/1
				  (_cor7)
		      -| ['list_comprehension'] )
'join_skip'/8 =
    %% Line 1363
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <PatternFrames> =
	    %% Line 1365
	    apply 'frame2frames'/1
		(_cor5)
	in  let <_cor61> =
		%% Line 1366
		( letrec
		      'lc$^0'/1 =
			  fun (_cor51) ->
			      case _cor51 of
				<[JoinClass = %% Line 1367
					      [{Q1,C1}|[{Q2,C2}|[]]]|_cor10]> when 'true' ->
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor52) ->
						  case _cor52 of
						    <[%% Line 1368
						      {GId1,PV1}|_cor12]>
							when %% Line 1369
							  ( try
								( case <> of
								    ( <>
									  when ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'is_record'
														   -| ['compiler_generated'] )
										  (GId1,
										   ( 'qid'
										     -| ['compiler_generated'] ),
										   ( 3
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] ) ->
									  let <_cor17> =
									      ( call 'erlang':'element'
										    (3, GId1)
										-| ['compiler_generated'] )
									  in  ( call 'erlang':'=:='
										    (_cor17, Q1)
										-| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    of <Try> ->
								Try
							    catch <T,R> ->
								'false'
							    -| ['compiler_generated'] ) ->
							( letrec
							      'lc$^2'/1 =
								  fun (_cor53) ->
								      case _cor53 of
									<[%% Line 1370
									  {GId2,PV2}|_cor20]>
									    when %% Line 1371
									      ( try
										    ( case <> of
											( <>
											      when ( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'is_record'
																       -| ['compiler_generated'] )
												      (GId2,
												       ( 'qid'
													 -| ['compiler_generated'] ),
												       ( 3
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] ) ->
											      let <_cor25> =
												  ( call 'erlang':'element'
													(3, GId2)
												    -| ['compiler_generated'] )
											      in  ( call 'erlang':'=:='
													(_cor25, Q2)
												    -| ['compiler_generated'] )
											  -| ['compiler_generated'] )
											( <> when 'true' ->
											      'false'
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
										of <Try> ->
										    Try
										catch <T,R> ->
										    'false'
										-| ['compiler_generated'] ) ->
									    ( letrec
										  'lc$^3'/1 =
										      fun (_cor54) ->
											  case _cor54 of
											    <[%% Line 1374
											      {FId,{'fil',Fil}}|_cor28]> when 'true' ->
												( letrec
												      'lc$^4'/1 =
													  fun (_cor55) ->
													      case _cor55 of
														<[%% Line 1376
														  {'value',{_cor71,GIds}}|_cor31]> when 'true' ->
														    let <_cor33> =
															%% Line 1378
															call 'lists':'sort'
															    ([GId1|[GId2|[]]])
														    in  %% Line 1378
															( case <> of
															    <>
																when call 'erlang':'=:='
																      (GIds,
																       _cor33) ->
																let <BindFun> =
																    %% Line 1387
																    ( fun (_cor35,_cor34) ->
																	  apply 'is_bindable'/1
																	      (_cor34)
																      -| [{'id',{0,0,'-join_skip/8-fun-0-'}}] )
																in  %% Line 1388
																    case %% Line 1389
																	 apply 'unify_column'/5
																	     (_cor5, PV1, C1, BindFun, _cor1) of
																      <{V1,JF1}> when 'true' ->
																	  %% Line 1390
																	  case %% Line 1391
																	       apply 'unify_column'/5
																		   (JF1, PV2, C2, BindFun, _cor1) of
																	    <{V2,JF2}> when 'true' ->
																		let <JF> =
																		    %% Line 1392
																		    apply 'unify'/6
																			(_cor0, V1, V2, JF2, BindFun, _cor1)
																		in  let <_cor42> =
																			%% Line 1395
																			apply 'set_line'/2
																			    (Fil, 0)
																		    in  let <SFs> =
																			    %% Line 1395
																			    apply 'safe_filter'/5
																				(_cor42, PatternFrames, %% Line 1396
																							BindFun, _cor2, _cor1)
																			in  let <JImp> =
																				%% Line 1397
																				call 'qlc':'vars'
																				    ([SFs|[JF|[]]])
																			    in  let <_cor48> =
																				    %% Line 1398
																				    ( fun (_cor46) ->
																					  %% Line 1399
																					  apply 'bindings_is_subset'/3
																					      (_cor46, JF, JImp)
																				      -| [{'id',{0,0,'-join_skip/8-fun-1-'}}] )
																				in  let <_cor50> =
																					%% Line 1400
																					( case call 'lists':'all'
																						   (_cor48, SFs) of
																					    ( <( 'true'
																						 -| ['compiler_generated'] )> when 'true' ->
																						  call 'erlang':'=/='
																						      (SFs, [])
																					      -| ['compiler_generated'] )
																					    ( <( 'false'
																						 -| ['compiler_generated'] )> when 'true' ->
																						  'false'
																					      -| ['compiler_generated'] )
																					    ( <_cor45> when 'true' ->
																						  ( call ( 'erlang'
																							   -| ['compiler_generated'] ):( 'error'
																											 -| ['compiler_generated'] )
																							(( {( 'badarg'
																							      -| ['compiler_generated'] ),_cor45}
																							   -| ['compiler_generated'] ))
																						    -| ['compiler_generated'] )
																					      -| ['compiler_generated'] )
																					  end
																					  -| ['compiler_generated'] )
																				    in  ( case _cor50 of
																					    <'true'> when 'true' ->
																						( case FId of
																						    ( <( {'qid',_cor72,_rec14}
																							 -| ['compiler_generated'] )> when 'true' ->
																							  let <_cor58> =
																							      apply 'lc$^4'/1
																								  (_cor31)
																							  in  ( [{JoinClass,_rec14}|_cor58]
																								-| ['compiler_generated'] )
																						      -| ['compiler_generated'] )
																						    ( <_cor73> when 'true' ->
																							  ( call ( 'erlang'
																								   -| ['compiler_generated'] ):( 'error'
																												 -| ['compiler_generated'] )
																								(( {'badrecord','qid'}
																								   -| ['compiler_generated'] ))
																							    -| ['compiler_generated'] )
																						      -| ['compiler_generated'] )
																						  end
																						  -| ['compiler_generated'] )
																					    ( <'false'> when 'true' ->
																						  apply 'lc$^4'/1
																						      (_cor31)
																					      -| ['compiler_generated'] )
																					    ( <_cor59> when 'true' ->
																						  primop 'match_fail'
																						      ({'case_clause',_cor59})
																					      -| ['compiler_generated'] )
																					  end
																					  -| ['list_comprehension'] )
																	    ( <_cor40> when 'true' ->
																		  primop 'match_fail'
																		      ({'badmatch',_cor40})
																	      -| ['compiler_generated'] )
																	  end
																      ( <_cor39> when 'true' ->
																	    primop 'match_fail'
																		({'badmatch',_cor39})
																	-| ['compiler_generated'] )
																    end
															    ( <> when 'true' ->
																  apply 'lc$^4'/1
																      (_cor31)
															      -| ['compiler_generated'] )
															  end
															  -| ['list_comprehension'] )
														( <[_cor30|_cor31]> when 'true' ->
														      %% Line 1376
														      apply 'lc$^4'/1
															  (_cor31)
														  -| ['compiler_generated'] )
														<[]> when 'true' ->
														    %% Line 1374
														    apply 'lc$^3'/1
															(_cor28)
														( <_cor55> when 'true' ->
														      ( primop 'match_fail'
															    ({'function_clause',_cor55})
															-| [{'function_name',{'lc$^4',1}}] )
														  -| ['compiler_generated'] )
													      end
												  in  let <_cor32> =
													  %% Line 1377
													  call 'lists':'keysearch'
													      (FId, 1, _cor3)
												      in  apply 'lc$^4'/1
													      (%% Line 1377
													       [_cor32|[]])
												  -| ['list_comprehension'] )
											    ( <[_cor27|_cor28]> when 'true' ->
												  %% Line 1374
												  apply 'lc$^3'/1
												      (_cor28)
											      -| ['compiler_generated'] )
											    <[]> when 'true' ->
												%% Line 1370
												apply 'lc$^2'/1
												    (_cor20)
											    ( <_cor54> when 'true' ->
												  ( primop 'match_fail'
													({'function_clause',_cor54})
												    -| [{'function_name',{'lc$^3',1}}] )
											      -| ['compiler_generated'] )
											  end
									      in  let <_cor29> =
										      %% Line 1375
										      apply 'filter_list'/3
											  (_cor6, _cor3, _cor2)
										  in  apply 'lc$^3'/1
											  (_cor29)
									      -| ['list_comprehension'] )
									( <[_cor19|_cor20]> when 'true' ->
									      %% Line 1370
									      apply 'lc$^2'/1
										  (_cor20)
									  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    %% Line 1368
									    apply 'lc$^1'/1
										(_cor12)
									( <_cor53> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor53})
										-| [{'function_name',{'lc$^2',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  apply 'lc$^2'/1
								  (_cor4)
							  -| ['list_comprehension'] )
						    ( <[_cor11|_cor12]> when 'true' ->
							  %% Line 1368
							  apply 'lc$^1'/1
							      (_cor12)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							%% Line 1367
							apply 'lc$^0'/1
							    (_cor10)
						    ( <_cor52> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor52})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (_cor4)
				      -| ['list_comprehension'] )
				( <[_cor9|_cor10]> when 'true' ->
				      %% Line 1367
				      apply 'lc$^0'/1
					  (_cor10)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor51> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor51})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor7)
		  -| ['list_comprehension'] )
	    in  %% Line 1402
		apply 'family_list'/1
		    (_cor61)
'filter_info'/4 =
    %% Line 1404
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <FilterList> =
	    %% Line 1405
	    apply 'filter_list'/3
		(_cor3, _cor1, _cor0)
	in  let <_cor5> =
		%% Line 1406
		apply 'filters_as_one'/1
		    (FilterList)
	    in  let <Filter0> =
		    %% Line 1406
		    apply 'set_line'/2
			(_cor5, 0)
		in  %% Line 1408
		    case apply 'anon_var'/2
			     (Filter0, 0) of
		      <{Filter,Anon1}> when 'true' ->
			  let <_cor10> =
			      %% Line 1409
			      call 'qlc':'vars'
				  (Filter)
			  in  let <_cor9> =
				  %% Line 1410
				  call 'ordsets':'from_list'
				      (_cor2)
			      in  let <Imported> =
				      %% Line 1409
				      call 'ordsets':'subtract'
					  (_cor10, _cor9)
				  in  %% Line 1411
				      {Filter,Anon1,Imported}
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
'filter_list'/3 =
    %% Line 1423
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1424
	( case _cor0 of
	    ( <( {'state',_cor9,_cor10,_rec15,_cor11}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1425
		  apply 'sel_gf'/6
		      (_cor2, 1, _cor1, _rec15, [], [])
	      -| ['compiler_generated'] )
	    ( <_cor12> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'sel_gf'/6 =
    %% Line 1427
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_N,_X_Deps,_X_RDs,_X_Gens,_X_Gens1> when 'true' ->
	      %% Line 1428
	      []
	  %% Line 1429
	  <[Fil = {Id = {'qid',_cor26,N},{'fil',F}}|FData],_cor27,Deps,RDs,Gens,Gens1>
	      when call 'erlang':'=:='
		    (_cor27,
		     N) ->
	      %% Line 1430
	      case call 'erl_lint':'is_guard_test'
		       (F, RDs) of
		%% Line 1431
		<'true'> when 'true' ->
		    %% Line 1432
		    case call 'lists':'keyfind'
			     (Id, 1, Deps) of
		      <{_cor28,GIds}>
			  when call 'erlang':'=:='
				(_cor28,
				 Id) ->
			  let <_cor7> =
			      %% Line 1433
			      call 'erlang':'length'
				  (GIds)
			  in  %% Line 1433
			      case <> of
				%% Line 1434
				<>
				    when call 'erlang':'=<'
					  (_cor7,
					   1) ->
				    %% Line 1435
				    case apply 'generators_in_scope'/2
					     (GIds, Gens1) of
				      %% Line 1436
				      <'true'> when 'true' ->
					  let <_cor8> =
					      %% Line 1437
					      call 'erlang':'+'
						  (N, 1)
					  in  let <_cor9> =
						  %% Line 1437
						  apply 'sel_gf'/6
						      (FData, _cor8, Deps, RDs, Gens, Gens1)
					      in  %% Line 1437
						  [Fil|_cor9]
				      %% Line 1438
				      <'false'> when 'true' ->
					  let <_cor10> =
					      %% Line 1439
					      call 'erlang':'+'
						  (N, 1)
					  in  %% Line 1439
					      apply 'sel_gf'/6
						  (FData, _cor10, Deps, RDs, [], [])
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor11})
					-| ['compiler_generated'] )
				    end
				%% Line 1441
				<> when 'true' ->
				    %% Line 1442
				    case apply 'generators_in_scope'/2
					     (GIds, Gens) of
				      %% Line 1443
				      <'true'> when 'true' ->
					  let <_cor12> =
					      %% Line 1444
					      call 'erlang':'+'
						  (N, 1)
					  in  let <_cor13> =
						  %% Line 1444
						  apply 'sel_gf'/6
						      (FData, _cor12, Deps, RDs, Gens, [])
					      in  %% Line 1444
						  [Fil|_cor13]
				      %% Line 1445
				      <'false'> when 'true' ->
					  let <_cor14> =
					      %% Line 1446
					      call 'erlang':'+'
						  (N, 1)
					  in  %% Line 1446
					      apply 'sel_gf'/6
						  (FData, _cor14, Deps, RDs, [], [])
				      ( <_cor15> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor15})
					-| ['compiler_generated'] )
				    end
			      end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		%% Line 1449
		<'false'> when 'true' ->
		    let <_cor17> =
			%% Line 1450
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 1450
			apply 'sel_gf'/6
			    (FData, _cor17, Deps, RDs, [], [])
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1452
	  <FData,N,Deps,RDs,Gens,Gens1> when 'true' ->
	      let <_cor19> =
		  %% Line 1453
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1453
		  apply 'sel_gf'/6
		      (FData, _cor19, Deps, RDs, [N|Gens], [N|Gens1])
	end
'generators_in_scope'/2 =
    %% Line 1455
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1456
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{'qid',_cor7,N}> when 'true' ->
			call 'lists':'member'
			    (N, _cor0)
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-generators_in_scope/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-generators_in_scope/2-fun-0-'}}] )
	in  %% Line 1456
	    call 'lists':'all'
		(_cor4, _cor1)
'pattern_frame'/4 =
    %% Line 1458
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 1461
	    ( fun (_cor7,_cor6) ->
		  case <_cor7,_cor6> of
		    <{QId,{'gen',Pattern,_cor16}},{F0,An0,PVs}> when 'true' ->
			%% Line 1462
			case %% Line 1463
			     apply 'pattern'/5
				 (Pattern, An0, F0, _cor2, _cor0) of
			  <{F1,An1,PV}> when 'true' ->
			      %% Line 1464
			      {F1,An1,[{QId,PV}|PVs]}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor9,_cor8> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor9,_cor8})
			    -| [{'function_name',{'-pattern_frame/4-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-pattern_frame/4-fun-0-'}}] )
	in  %% Line 1460
	    case %% Line 1461
		 call 'lists':'foldl'
		     (_cor10, %% Line 1465
			      {[],_cor1,[]}, _cor3) of
	      <{PatternFrame,_X_Anon2,PatternVars}> when 'true' ->
		  %% Line 1466
		  {PatternFrame,PatternVars}
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor11})
		-| ['compiler_generated'] )
	    end
'const_selector'/1 =
    %% Line 1468
    fun (_cor0) ->
	%% Line 1469
	apply 'selector'/2
	    (_cor0, ( 'is_const'/2
		      -| [{'id',{0,0,'-const_selector/1-fun-0-'}}] ))
'no_const_selector'/1 =
    %% Line 1471
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 1472
	    ( fun (_cor3,_cor2) ->
		  let <_cor1> =
		      apply 'is_const'/2
			  (_cor3, _cor2)
		  in  call 'erlang':'not'
			  (_cor1)
	      -| [{'id',{0,0,'-no_const_selector/1-fun-0-'}}] )
	in  %% Line 1472
	    apply 'selector'/2
		(_cor0, _cor6)
'selector'/2 =
    %% Line 1474
    fun (_cor1,_cor0) ->
	%% Line 1475
	( fun (_cor5) ->
	      %% Line 1476
	      ( fun (_cor3) ->
		    %% Line 1477
		    case apply _cor0
			     (_cor3, _cor1) of
		      %% Line 1478
		      <'true'> when 'true' ->
			  %% Line 1479
			  {'yes',_cor3}
		      %% Line 1480
		      <'false'> when 'true' ->
			  %% Line 1481
			  'no'
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-selector/2-fun-0-'}}] )
	  -| [{'id',{0,0,'-selector/2-fun-1-'}}] )
'bind_no_const'/2 =
    %% Line 1486
    fun (_cor1,_cor0) ->
	%% Line 1487
	case apply 'is_const'/2
		 (_cor1, _cor0) of
	  %% Line 1488
	  <'true'> when 'true' ->
	      %% Line 1489
	      'false'
	  %% Line 1490
	  <'false'> when 'true' ->
	      %% Line 1491
	      apply 'is_bindable'/1
		  (_cor1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'is_const'/2 =
    %% Line 1495
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1497
	    call 'qlc':'vars'
		(_cor1)
	in  let <_cor3> =
		%% Line 1497
		call 'ordsets':'subtract'
		    (_cor2, _cor0)
	    in  let <_cor4> =
		    %% Line 1497
		    call 'ordsets':'to_list'
			(_cor3)
		in  %% Line 1497
		    call 'erlang':'=:='
			([], _cor4)
'is_bindable'/1 =
    %% Line 1499
    fun (_cor0) ->
	%% Line 1500
	case apply 'normalise'/1
		 (_cor0) of
	  %% Line 1501
	  <{'ok',_X_C}> when 'true' ->
	      %% Line 1502
	      'true'
	  %% Line 1503
	  <'not_ok'> when 'true' ->
	      %% Line 1504
	      'false'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'pattern'/5 =
    %% Line 1507
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 1508
	    try
		%% Line 1509
		apply 'expand_pattern_records'/2
		    (_cor4, _cor0)
	    of <_cor5> ->
		_cor5
	    catch <_cor8,_cor7,_cor6> ->
		_cor4
	in  let <P2> =
		%% Line 1513
		apply 'set_line'/2
		    (_cor9, 0)
	    in  %% Line 1514
		case apply 'anon_var'/2
			 (P2, _cor3) of
		  <{P3,AnonN}> when 'true' ->
		      let <_cor13> =
			  %% Line 1515
			  apply 'tuple2cons'/1
			      (P3)
		      in  %% Line 1515
			  case apply 'match_in_pattern'/3
				   (_cor13, _cor2, _cor1) of
			    <{P4,F1}> when 'true' ->
				%% Line 1516
				case apply 'element_calls'/4
					 (P4, F1, _cor1, []) of
				  <{P,F2}> when 'true' ->
				      %% Line 1517
				      case apply 'unique_var'/0
					       () of
					<UniqueVar = {'var',_cor30,PatternVar}> when 'true' ->
					    let <F> =
						%% Line 1518
						apply 'unify'/6
						    ('=:=', UniqueVar, P, F2, _cor1, [])
					    in  %% Line 1519
						{F,AnonN,PatternVar}
					( <_cor18> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor18})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor17> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor17})
				    -| ['compiler_generated'] )
				end
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor12> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor12})
		    -| ['compiler_generated'] )
		end
'frame2frames'/1 =
    %% Line 1521
    fun (_cor0) ->
	case _cor0 of
	  <'failed'> when 'true' ->
	      %% Line 1522
	      []
	  %% Line 1523
	  <F> when 'true' ->
	      %% Line 1524
	      [F|[]]
	end
'match_in_pattern'/3 =
    %% Line 1526
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'match',_cor19,E10,E20},F0,BF> when 'true' ->
	      %% Line 1527
	      case apply 'match_in_pattern'/3
		       (E10, F0, BF) of
		<{E1,F1}> when 'true' ->
		    %% Line 1528
		    case apply 'match_in_pattern'/3
			     (E20, F1, BF) of
		      <{E2,F}> when 'true' ->
			  let <_cor6> =
			      %% Line 1530
			      case apply BF
				       ('=:=', E1) of
				%% Line 1531
				<'true'> when 'true' ->
				    E1
				%% Line 1532
				<'false'> when 'true' ->
				    E2
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor10> =
				  %% Line 1534
				  apply 'unify'/6
				      ('=:=', E1, E2, F, BF, [])
			      in  %% Line 1534
				  {_cor6,_cor10}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1535
	  <T,F0,BF>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor11> =
		  %% Line 1536
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 1536
		  case apply 'match_in_pattern'/3
			   (_cor11, F0, BF) of
		    <{L,F}> when 'true' ->
			let <_cor13> =
			    %% Line 1537
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 1537
			    {_cor13,F}
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1538
	  <[E0|Es0],F0,BF> when 'true' ->
	      %% Line 1539
	      case apply 'match_in_pattern'/3
		       (E0, F0, BF) of
		<{E,F1}> when 'true' ->
		    %% Line 1540
		    case apply 'match_in_pattern'/3
			     (Es0, F1, BF) of
		      <{Es,F}> when 'true' ->
			  %% Line 1541
			  {[E|Es],F}
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor15})
			-| ['compiler_generated'] )
		    end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1542
	  <E,F,_X_BF> when 'true' ->
	      %% Line 1543
	      {E,F}
	end
'anon_var'/2 =
    %% Line 1547
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1548
	    ( fun (_cor4,_cor3) ->
		  case <_cor4,_cor3> of
		    <{'var',L,'_'},N> when 'true' ->
			let <_cor2> =
			    %% Line 1549
			    call 'erlang':'+'
				(N, 1)
			in  %% Line 1549
			    {{'var',L,N},_cor2}
		    %% Line 1550
		    <Var,N> when 'true' ->
			{Var,N}
		  end
	      -| [{'id',{0,0,'-anon_var/2-fun-0-'}}] )
	in  %% Line 1548
	    apply 'var_mapfold'/3
		(_cor7, _cor0, _cor1)
'set_line'/2 =
    %% Line 1553
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1554
	    ( fun (_cor2) ->
		  _cor0
	      -| [{'id',{0,0,'-set_line/2-fun-0-'}}] )
	in  %% Line 1554
	    apply 'map_lines'/2
		(_cor4, _cor1)
'filter'/5 =
    %% Line 1558
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_E,Frames0 = [],_X_BF,_X_State,_X_Imported> when 'true' ->
	      %% Line 1559
	      Frames0
	  %% Line 1560
	  <E0,Frames0,BF,State,Imported> when 'true' ->
	      let <E> =
		  %% Line 1561
		  apply 'pre_expand'/1
		      (E0)
	      in  let <FState> =
		      %% Line 1562
		      {'fstate',State,BF,Imported}
		  in  %% Line 1563
		      apply 'filter1'/3
			  (E, Frames0, FState)
	end
'filter1'/3 =
    %% Line 1589
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'op',_cor24,Op,L0,R0},Fs,FS>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(Op, '=:=')
		in  let <_cor4> =
			call 'erlang':'=:='
			    (Op, '==')
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 1590
	      case FS of
		<{'fstate',S,BF,Imported}> when 'true' ->
		    let <_cor11> =
			%% Line 1593
			( fun (_cor9) ->
			      %% Line 1594
			      case apply 'prep_expr'/5
				       (L0, _cor9, S, BF, Imported) of
				<{L,F1}> when 'true' ->
				    %% Line 1595
				    case apply 'prep_expr'/5
					     (R0, F1, S, BF, Imported) of
				      <{R,F2}> when 'true' ->
					  %% Line 1596
					  case apply 'unify'/6
						   (Op, L, R, F2, BF, Imported) of
					    %% Line 1597
					    <'failed'> when 'true' ->
						[]
					    %% Line 1598
					    <F> when 'true' ->
						[F|[]]
					  end
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-filter1/3-fun-0-'}}] )
		    in  %% Line 1593
			call 'lists':'flatmap'
			    (_cor11, %% Line 1600
				     Fs)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1601
	  <{'op',_cor25,Op,L,R},Fs,FS>
	      when let <_cor12> =
		    call 'erlang':'=:='
			(Op, 'and')
		in  let <_cor13> =
			call 'erlang':'=:='
			    (Op, 'andalso')
		    in  call 'erlang':'or'
			    (_cor12, _cor13) ->
	      let <_cor14> =
		  %% Line 1602
		  apply 'filter1'/3
		      (L, Fs, FS)
	      in  %% Line 1602
		  apply 'filter1'/3
		      (R, _cor14, FS)
	  %% Line 1603
	  <{'op',_cor26,Op,L,R},Fs,FS>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(Op, 'or')
		in  let <_cor16> =
			%% Line 1604
			call 'erlang':'=:='
			    (Op, 'orelse')
		    in  let <_cor17> =
			    %% Line 1605
			    call 'erlang':'=:='
				(Op, 'xor')
			in  let <_cor18> =
				%% Line 1604
				call 'erlang':'or'
				    (_cor16, _cor17)
			    in  call 'erlang':'or'
				    (_cor15, _cor18) ->
	      let <_cor20> =
		  %% Line 1606
		  apply 'filter1'/3
		      (L, Fs, FS)
	      in  let <_cor19> =
		      %% Line 1606
		      apply 'filter1'/3
			  (R, Fs, FS)
		  in  %% Line 1606
		      call 'erlang':'++'
			  (_cor20, _cor19)
	  %% Line 1607
	  <{'atom',_cor27,Atom},_X_Fs,_X_FS>
	      when call 'erlang':'=/='
		    (Atom,
		     'true') ->
	      %% Line 1608
	      []
	  %% Line 1609
	  <{'call',L,{'remote',_cor28,{'atom',_cor29,'erlang'},{'atom',_cor30,'is_record'}},[T|[R|[]]]},%% Line 1610
													Fs,%% Line 1610
													   FS> when 'true' ->
	      %% Line 1611
	      apply 'filter1'/3
		  ({'op',L,'=:=',{'call',L,{'remote',L,{'atom',L,'erlang'},{'atom',L,'element'}},%% Line 1612
												 [{'integer',L,1}|[T|[]]]},%% Line 1612
															   R}, %% Line 1613
															       Fs, %% Line 1613
																   FS)
	  %% Line 1615
	  <{'call',L,{'remote',L1,M = {'atom',_cor31,'erlang'},{'atom',L2,'is_record'}},[T|[R|[_X_Sz|[]]]]},%% Line 1616
													    Fs,%% Line 1616
													       FS> when 'true' ->
	      %% Line 1617
	      apply 'filter1'/3
		  ({'call',L,{'remote',L1,M,{'atom',L2,'is_record'}},[T|[R|[]]]}, Fs, FS)
	  %% Line 1618
	  <_X_E,Fs,_X_FS> when 'true' ->
	      %% Line 1619
	      Fs
	end
'safe_filter'/5 =
    %% Line 1625
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_E,Frames0 = [],_X_BF,_X_State,_X_Imported> when 'true' ->
	      %% Line 1626
	      Frames0
	  %% Line 1627
	  <E0,Frames0,BF,State,Imported> when 'true' ->
	      let <E> =
		  %% Line 1628
		  apply 'pre_expand'/1
		      (E0)
	      in  let <FState> =
		      %% Line 1629
		      {'fstate',State,BF,Imported}
		  in  %% Line 1630
		      apply 'safe_filter1'/3
			  (E, Frames0, FState)
	end
'safe_filter1'/3 =
    %% Line 1632
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'op',_cor22,Op,L0,R0},Fs,FS>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(Op, '=:=')
		in  let <_cor4> =
			call 'erlang':'=:='
			    (Op, '==')
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 1633
	      case FS of
		<{'fstate',S,BF,Imported}> when 'true' ->
		    let <_cor11> =
			%% Line 1634
			( fun (_cor9) ->
			      %% Line 1635
			      case apply 'prep_expr'/5
				       (L0, _cor9, S, BF, Imported) of
				<{L,F1}> when 'true' ->
				    %% Line 1636
				    case apply 'prep_expr'/5
					     (R0, F1, S, BF, Imported) of
				      <{R,F2}> when 'true' ->
					  %% Line 1637
					  case apply 'safe_unify'/6
						   (Op, L, R, F2, BF, Imported) of
					    %% Line 1638
					    <'failed'> when 'true' ->
						[]
					    %% Line 1639
					    <F> when 'true' ->
						[F|[]]
					  end
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-safe_filter1/3-fun-0-'}}] )
		    in  %% Line 1634
			call 'lists':'flatmap'
			    (_cor11, %% Line 1641
				     Fs)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1642
	  <{'op',_cor23,Op,L,R},Fs,FS>
	      when let <_cor12> =
		    call 'erlang':'=:='
			(Op, 'and')
		in  let <_cor13> =
			call 'erlang':'=:='
			    (Op, 'andalso')
		    in  call 'erlang':'or'
			    (_cor12, _cor13) ->
	      let <_cor14> =
		  %% Line 1643
		  apply 'safe_filter1'/3
		      (L, Fs, FS)
	      in  %% Line 1643
		  apply 'safe_filter1'/3
		      (R, _cor14, FS)
	  %% Line 1644
	  <{'op',_cor24,Op,L,R},Fs,FS>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(Op, 'or')
		in  let <_cor16> =
			call 'erlang':'=:='
			    (Op, 'orelse')
		    in  call 'erlang':'or'
			    (_cor15, _cor16) ->
	      let <_cor18> =
		  %% Line 1645
		  apply 'safe_filter1'/3
		      (L, Fs, FS)
	      in  let <_cor17> =
		      %% Line 1645
		      apply 'safe_filter1'/3
			  (R, Fs, FS)
		  in  %% Line 1645
		      call 'erlang':'++'
			  (_cor18, _cor17)
	  %% Line 1646
	  <{'atom',_cor25,'true'},Fs,_X_FS> when 'true' ->
	      %% Line 1647
	      Fs
	  %% Line 1648
	  <_X_E,_X_Fs,_X_FS> when 'true' ->
	      %% Line 1649
	      []
	end
'pre_expand'/1 =
    %% Line 1653
    fun (_cor0) ->
	case _cor0 of
	  <{'call',L1,{'atom',L2,'record'},As}> when 'true' ->
	      %% Line 1654
	      apply 'pre_expand'/1
		  ({'call',L1,{'atom',L2,'is_record'},As})
	  %% Line 1655
	  <{'call',L,F = {'atom',_cor6,_cor7},As}> when 'true' ->
	      %% Line 1656
	      apply 'pre_expand'/1
		  ({'call',L,{'remote',L,{'atom',L,'erlang'},F},As})
	  %% Line 1657
	  <{'call',L,{'tuple',_cor8,[M|[F|[]]]},As}> when 'true' ->
	      %% Line 1658
	      apply 'pre_expand'/1
		  ({'call',L,{'remote',L,M,F},As})
	  %% Line 1659
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1660
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor2> =
		      %% Line 1660
		      apply 'pre_expand'/1
			  (_cor1)
		  in  %% Line 1660
		      call 'erlang':'list_to_tuple'
			  (_cor2)
	  %% Line 1661
	  <[E|Es]> when 'true' ->
	      let <_cor3> =
		  %% Line 1662
		  apply 'pre_expand'/1
		      (E)
	      in  let <_cor4> =
		      %% Line 1662
		      apply 'pre_expand'/1
			  (Es)
		  in  %% Line 1662
		      [_cor3|_cor4]
	  %% Line 1663
	  <T> when 'true' ->
	      %% Line 1664
	      T
	end
'frames_to_columns'/6 =
    %% Line 1667
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_PatternVars,_X_DerefFun,_X_SelectorFun,_X_Imp,_X_CompOp> when 'true' ->
	      %% Line 1668
	      []
	  %% Line 1669
	  <Fs,PatternVars,DerefFun,SelectorFun,Imp,CompOp> when 'true' ->
	      let <_cor23> =
		  %% Line 1675
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[%% Line 1682
				    {PatternId,PV}|_cor7]> when 'true' ->
				      let <PatVar> = {%% Line 1676
					   'var',%% Line 1676
						 0,%% Line 1676
						   PV}
				      in  let <_cor15> =
					      %% Line 1677
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor12) ->
							    case _cor12 of
							      <[%% Line 1678
								F|_cor11]> when 'true' ->
								  let <_cor13> =
								      apply 'pattern_size'/3
									  ([F|[]], PatVar, 'false')
								  in  let <_cor14> =
									  %% Line 1678
									  apply 'lc$^1'/1
									      (_cor11)
								      in  ( [_cor13|_cor14]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor12> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor12})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(%% Line 1678
							 Fs)
						-| ['list_comprehension'] )
					  in  let <_cor17> =
						  %% Line 1679
						  call 'erlang':'--'
						      (_cor15, ['undefined'])
					      in  let <MaxPZ> =
						      %% Line 1679
						      call 'lists':'max'
							  ([0|_cor17])
						  in  let <Vars> =
							  %% Line 1680
							  apply 'pat_vars'/1
							      (MaxPZ)
						      in  %% Line 1681
							  ( case PatternId of
							      ( <( {'qid',_cor54,_rec16}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_cor22> =
									%% Line 1682
									apply 'lc$^0'/1
									    (_cor7)
								    in  ( [{_rec16,PatVar,_cor15,Vars}|_cor22]
									  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_cor55> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','qid'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
				  ( <[_cor6|_cor7]> when 'true' ->
					%% Line 1682
					apply 'lc$^0'/1
					    (_cor7)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor8> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 1682
			     PatternVars)
		    -| ['list_comprehension'] )
	      in  let <BF> =
		      %% Line 1683
		      ( fun (_cor26,_cor25) ->
			    apply 'is_bindable'/1
				(_cor25)
			-| [{'id',{0,0,'-frames_to_columns/6-fun-0-'}}] )
		  in  let <Fun> =
			  %% Line 1684
			  ( fun (_cor38,_cor37) ->
				case <_cor38,_cor37> of
				  <{_X_PatN,PatVar,PatSizes,Vars},Frames> when 'true' ->
				      %% Line 1685
				      ( letrec
					    'lc$^2'/1 =
						fun (_cor33) ->
						    case _cor33 of
						      <[%% Line 1686
							{Sz,Frame}|_cor31]> when 'true' ->
							  let <_cor34> =
							      apply 'pat_tuple'/2
								  (Sz, Vars)
							  in  let <_cor35> =
								  apply 'unify'/6
								      ('=:=', _cor34, PatVar, Frame, BF, Imp)
							      in  let <_cor36> =
								      %% Line 1686
								      apply 'lc$^2'/1
									  (_cor31)
								  in  ( [_cor35|_cor36]
									-| ['compiler_generated'] )
						      ( <[_cor30|_cor31]> when 'true' ->
							    %% Line 1686
							    apply 'lc$^2'/1
								(_cor31)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor33> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor33})
							      -| [{'function_name',{'lc$^2',1}}] )
							-| ['compiler_generated'] )
						    end
					in  let <_cor32> =
						%% Line 1686
						call 'lists':'zip'
						    (PatSizes, Frames)
					    in  apply 'lc$^2'/1
						    (_cor32)
					-| ['list_comprehension'] )
				  ( <_cor40,_cor39> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor40,_cor39})
					  -| [{'function_name',{'-frames_to_columns/6-fun-1-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-frames_to_columns/6-fun-1-'}}] )
		      in  let <NFs> =
			      %% Line 1688
			      call 'lists':'foldl'
				  (Fun, Fs, _cor23)
			  in  %% Line 1689
			      ( letrec
				    'lc$^3'/1 =
					fun (_cor45) ->
					    case _cor45 of
					      <[%% Line 1690
						{PatN,_X_PatVar,PatSizes,Vars}|_cor44]> when 'true' ->
						  let <_cor46> =
						      apply 'frames2cols'/7
							  (NFs, PatN, PatSizes, Vars, DerefFun, SelectorFun, CompOp)
						  in  let <_cor47> =
							  %% Line 1690
							  apply 'lc$^3'/1
							      (_cor44)
						      in  ( [_cor46|_cor47]
							    -| ['compiler_generated'] )
					      ( <[_cor43|_cor44]> when 'true' ->
						    %% Line 1690
						    apply 'lc$^3'/1
							(_cor44)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor45> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor45})
						      -| [{'function_name',{'lc$^3',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^3'/1
					(_cor23)
				-| ['list_comprehension'] )
	end
'frames2cols'/7 =
    %% Line 1692
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor33> =
	    %% Line 1693
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor10) ->
			  case _cor10 of
			    <[%% Line 1716
			      {F,PatSz}|_cor8]> when 'true' ->
				let <_cor29> =
				    %% Line 1694
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor23) ->
						  case _cor23 of
						    <[%% Line 1695
						      {V,Col}|_cor12]> when 'true' ->
							let <_cor17> =
							    %% Line 1713
							    apply _cor2
								(V, F)
							in  let <_cor18> =
								%% Line 1713
								call 'erlang':'tl'
								    (_cor17)
							    in  %% Line 1713
								( case <> of
								    <>
									when call 'erlang':'=:='
									      (_cor18,
									       []) ->
									let <_cor19> =
									    %% Line 1714
									    apply _cor1
										(F)
									in  let <_cor20> =
										%% Line 1714
										call 'erlang':'hd'
										    (_cor17)
									    in  let <_cor22> =
										    %% Line 1714
										    apply _cor19
											(_cor20)
										in  %% Line 1714
										    ( case <> of
											<>
											    when call 'erlang':'=/='
												  (_cor22,
												   'no') ->
											    let <_cor24> =
												call 'erlang':'element'
												    (2, _cor22)
											    in  let <_cor25> =
												    apply 'cons2tuple'/1
													(_cor24)
												in  let <_cor26> =
													apply 'lc$^1'/1
													    (_cor12)
												    in  ( [{{_cor5,Col},_cor25}|_cor26]
													  -| ['compiler_generated'] )
											( <> when 'true' ->
											      apply 'lc$^1'/1
												  (_cor12)
											  -| ['compiler_generated'] )
										      end
										      -| ['list_comprehension'] )
								    ( <> when 'true' ->
									  apply 'lc$^1'/1
									      (_cor12)
								      -| ['compiler_generated'] )
								  end
								  -| ['list_comprehension'] )
						    ( <[_cor11|_cor12]> when 'true' ->
							  %% Line 1695
							  apply 'lc$^1'/1
							      (_cor12)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor23> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor23})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor14> =
					      %% Line 1695
					      apply 'sublist'/2
						  (_cor3, PatSz)
					  in  let <_cor13> =
						  %% Line 1696
						  apply 'seq'/2
						      (1, PatSz)
					      in  let <_cor15> =
						      %% Line 1695
						      call 'lists':'zip'
							  (_cor14, _cor13)
						  in  apply 'lc$^1'/1
							  (_cor15)
				      -| ['list_comprehension'] )
				in  let <_cor31> =
					%% Line 1715
					call 'sofs':'relation'
					    (_cor29)
				    in  let <_cor32> =
					    %% Line 1716
					    apply 'lc$^0'/1
						(_cor8)
					in  ( [_cor31|_cor32]
					      -| ['compiler_generated'] )
			    ( <[_cor7|_cor8]> when 'true' ->
				  %% Line 1716
				  apply 'lc$^0'/1
				      (_cor8)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor10> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor10})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor9> =
		      %% Line 1716
		      call 'lists':'zip'
			  (_cor6, _cor4)
		  in  apply 'lc$^0'/1
			  (_cor9)
	      -| ['list_comprehension'] )
	in  let <Ss> =
		%% Line 1717
		call 'sofs':'from_sets'
		    (_cor33)
	    in  let <_cor38> =
		    %% Line 1719
		    ( fun (_cor36) ->
			  call 'sofs':'projection'
			      (1, _cor36)
		      -| [{'id',{0,0,'-frames2cols/7-fun-0-'}}] )
		in  let <_cor39> =
			%% Line 1719
			call 'sofs':'projection'
			    (_cor38, %% Line 1720
				     Ss)
		    in  let <D> =
			    %% Line 1719
			    call 'sofs':'intersection'
				(_cor39)
			in  let <_cor41> =
				%% Line 1721
				call 'sofs':'union'
				    (Ss)
			    in  let <_cor42> =
				    %% Line 1721
				    call 'sofs':'relation_to_family'
					(_cor41)
				in  let <Cs> =
					%% Line 1721
					call 'sofs':'restriction'
					    (_cor42, D)
				    in  %% Line 1722
					( letrec
					      'lc$^2'/1 =
						  fun (_cor48) ->
						      case _cor48 of
							<[C = {_cor58,Vs}|_cor45]> when 'true' ->
							    ( case apply 'col_ignore'/2
								       (Vs, _cor0) of
								<'false'> when 'true' ->
								    let <_cor49> =
									apply 'lc$^2'/1
									    (_cor45)
								    in  ( [C|_cor49]
									  -| ['compiler_generated'] )
								( <'true'> when 'true' ->
								      apply 'lc$^2'/1
									  (_cor45)
								  -| ['compiler_generated'] )
								( <_cor_variable> when 'true' ->
								      call 'erlang':'error'
									  ('badarg')
								  -| ['compiler_generated'] )
							      end
							      -| ['list_comprehension'] )
							( <[_cor44|_cor45]> when 'true' ->
							      apply 'lc$^2'/1
								  (_cor45)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor48> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor48})
								-| [{'function_name',{'lc$^2',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  let <_cor46> =
						  call 'sofs':'to_external'
						      (Cs)
					      in  apply 'lc$^2'/1
						      (_cor46)
					  -| ['list_comprehension'] )
'pat_vars'/1 =
    %% Line 1724
    fun (_cor0) ->
	%% Line 1725
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[_cor8|_cor2]> when 'true' ->
			    let <_cor5> =
				apply 'unique_var'/0
				    ()
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  apply 'seq'/2
		      (1, _cor0)
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'pat_tuple'/2 =
    %% Line 1727
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Sz,Vars>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Sz)
		in  let <_cor3> =
			call 'erlang':'>'
			    (Sz, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <TupleTail> =
		  %% Line 1728
		  apply 'unique_var'/0
		      ()
	      in  let <_cor5> =
		      %% Line 1729
		      apply 'sublist'/2
			  (Vars, Sz)
		  in  let <_cor6> =
			  %% Line 1729
			  call 'erlang':'++'
			      (_cor5, TupleTail)
		      in  let <_cor7> =
			      %% Line 1729
			      apply 'list2cons'/1
				  (_cor6)
			  in  %% Line 1729
			      {'cons_tuple',_cor7}
	  %% Line 1730
	  <_cor10,_X_Vars> when 'true' ->
	      %% Line 1731
	      apply 'unique_var'/0
		  ()
	end
'col_ignore'/2 =
    %% Line 1735
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Vs,'=:='> when 'true' ->
	      %% Line 1736
	      'false'
	  %% Line 1737
	  <Vs,'=='> when 'true' ->
	      let <_cor11> =
		  %% Line 1738
		  call 'erlang':'length'
		      (Vs)
	      in  let <_cor8> =
		      %% Line 1738
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[V|_cor3]> when 'true' ->
					  let <_cor5> =
					      apply 'normalise'/1
						  (V)
					  in  let <_cor6> =
						  call 'erlang':'element'
						      (2, _cor5)
					      in  let <_cor7> =
						      apply 'lc$^0'/1
							  (_cor3)
						  in  ( [_cor6|_cor7]
							-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor4> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Vs)
			-| ['list_comprehension'] )
		  in  let <_cor9> =
			  %% Line 1738
			  call 'lists':'usort'
			      (_cor8)
		      in  let <_cor10> =
			      %% Line 1738
			      call 'erlang':'length'
				  (_cor9)
			  in  %% Line 1738
			      call 'erlang':'=/='
				  (_cor11, _cor10)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'col_ignore',2}}] )
	    -| ['compiler_generated'] )
	end
'pattern_sizes'/2 =
    %% Line 1740
    fun (_cor1,_cor0) ->
	%% Line 1741
	( letrec
	      'lc$^0'/1 =
		  fun (_cor6) ->
		      case _cor6 of
			<[%% Line 1742
			  {QId,PV}|_cor3]> when 'true' ->
			    let <_cor5> =
				%% Line 1743
				apply 'pattern_size'/3
				    (_cor0, {'var',0,PV}, 'true')
			    in  %% Line 1743
				( case <> of
				    <>
					when call 'erlang':'=/='
					      ('undefined',
					       _cor5) ->
					( case QId of
					    ( <( {'qid',_cor13,_rec17}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_cor9> =
						      apply 'lc$^0'/1
							  (_cor3)
						  in  ( [{_rec17,_cor5}|_cor9]
							-| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_cor14> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','qid'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor3)
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			( <[_cor2|_cor3]> when 'true' ->
			      %% Line 1742
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'pattern_size'/3 =
    %% Line 1745
    fun (_cor2,_cor1,_cor0) ->
	let <Fun> =
	    %% Line 1746
	    ( fun (_cor6) ->
		  let <_cor5> =
		      apply 'deref_pattern'/1
			  ([])
		  in  apply _cor5
			  (_cor1, _cor6)
	      -| [{'id',{0,0,'-pattern_size/3-fun-0-'}}] )
	in  let <Derefs> =
		%% Line 1747
		call 'lists':'flatmap'
		    (Fun, _cor2)
	    in  let <_cor15> =
		    %% Line 1748
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor12) ->
				  case _cor12 of
				    <[{'cons_tuple',Cs}|_cor11]> when 'true' ->
					let <_cor13> =
					    apply 'pattern_sz'/3
						(Cs, 0, _cor0)
					in  let <_cor14> =
						apply 'lc$^0'/1
						    (_cor11)
					    in  ( [_cor13|_cor14]
						  -| ['compiler_generated'] )
				    ( <[_cor10|_cor11]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor11)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor12> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Derefs)
		      -| ['list_comprehension'] )
		in  %% Line 1749
		    case call 'lists':'usort'
			     (_cor15) of
		      %% Line 1750
		      <[Sz|[]]>
			  when let <_cor17> =
				call 'erlang':'is_integer'
				    (Sz)
			    in  let <_cor18> =
				    call 'erlang':'>='
					(Sz, 0)
				in  call 'erlang':'and'
					(_cor17, _cor18) ->
			  Sz
		      %% Line 1751
		      <[]>
			  when let <_cor19> =
				call 'erlang':'=:='
				    (_cor0, 'false')
			    in  let <_cor20> =
				    call 'erlang':'is_boolean'
					(_cor0)
				in  call 'erlang':'and'
					(_cor19, _cor20) ->
			  0
		      %% Line 1752
		      <_cor25> when 'true' ->
			  'undefined'
		    end
'pattern_sz'/3 =
    %% Line 1755
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'cons',_cor7,_X_C,E},Col,Exact> when 'true' ->
	      let <_cor3> =
		  %% Line 1756
		  call 'erlang':'+'
		      (Col, 1)
	      in  %% Line 1756
		  apply 'pattern_sz'/3
		      (E, _cor3, Exact)
	  %% Line 1757
	  <{'nil',_cor8},Sz,_X_Exact> when 'true' ->
	      %% Line 1758
	      Sz
	  %% Line 1759
	  <_cor9,_X_Sz,'true'> when 'true' ->
	      %% Line 1760
	      'undefined'
	  %% Line 1761
	  <_cor10,Sz,'false'> when 'true' ->
	      %% Line 1762
	      Sz
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'pattern_sz',3}}] )
	    -| ['compiler_generated'] )
	end
'deref_pattern'/1 =
    %% Line 1764
    fun (_cor0) ->
	%% Line 1765
	( fun (_cor2,_cor1) ->
	      apply 'deref_values'/3
		  (_cor2, _cor1, _cor0)
	  -| [{'id',{0,0,'-deref_pattern/1-fun-0-'}}] )
'prep_expr'/5 =
    %% Line 1767
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1768
	    apply 'expand_expr_records'/2
		(_cor4, _cor2)
	in  let <_cor6> =
		%% Line 1768
		apply 'tuple2cons'/1
		    (_cor5)
	    in  %% Line 1768
		apply 'element_calls'/4
		    (_cor6, _cor3, _cor1, _cor0)
'unify_column'/5 =
    %% Line 1770
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Call> =
	    %% Line 1771
	    {'call',0,{'atom',0,'element'},[{'integer',0,_cor2}|[{'var',0,_cor3}|[]]]}
	in  %% Line 1772
	    apply 'element_calls'/4
		(Call, _cor4, _cor1, _cor0)
'element_calls'/4 =
    %% Line 1779
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'call',_cor28,{'remote',_cor29,{'atom',_cor30,'erlang'},{'atom',_cor31,'element'}},%% Line 1780
											       [{'integer',_cor32,I}|[Term0|[]]]},%% Line 1780
																  F0,%% Line 1780
																     BF,%% Line 1780
																	Imported>
	      when %% Line 1780
		call 'erlang':'>'
		    (I,
		     0) ->
	      let <TupleTail> =
		  %% Line 1781
		  apply 'unique_var'/0
		      ()
	      in  let <_cor11> =
		      %% Line 1782
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor8) ->
				    case _cor8 of
				      <[_cor33|_cor6]> when 'true' ->
					  let <_cor9> =
					      apply 'unique_var'/0
						  ()
					  in  let <_cor10> =
						  apply 'lc$^0'/1
						      (_cor6)
					      in  ( [_cor9|_cor10]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor8> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor8})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor7> =
				call 'lists':'seq'
				    (1, I)
			    in  apply 'lc$^0'/1
				    (_cor7)
			-| ['list_comprehension'] )
		  in  let <Vars> =
			  %% Line 1783
			  call 'erlang':'++'
			      (_cor11, TupleTail)
		      in  let <_cor14> =
			      %% Line 1784
			      apply 'list2cons'/1
				  (Vars)
			  in  let <Tuple> = {%% Line 1784
				   'cons_tuple',_cor14}
			      in  let <VarI> =
				      %% Line 1785
				      call 'lists':'nth'
					  (I, _cor11)
				  in  %% Line 1786
				      case apply 'element_calls'/4
					       (Term0, F0, BF, Imported) of
					<{Term,F}> when 'true' ->
					    let <_cor18> =
						%% Line 1787
						apply 'unify'/6
						    ('=:=', Tuple, Term, F, BF, Imported)
					    in  %% Line 1787
						{VarI,_cor18}
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor17})
					  -| ['compiler_generated'] )
				      end
	  %% Line 1788
	  <{'call',L1,E = {'atom',_cor34,'element'},As},F0,BF,Imported> when 'true' ->
	      %% Line 1790
	      apply 'element_calls'/4
		  ({'call',L1,{'remote',L1,{'atom',L1,'erlang'},E},As}, F0, BF, %% Line 1791
										Imported)
	  %% Line 1792
	  <T,F0,BF,Imported>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor19> =
		  %% Line 1793
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 1793
		  case apply 'element_calls'/4
			   (_cor19, F0, BF, Imported) of
		    <{L,F}> when 'true' ->
			let <_cor21> =
			    %% Line 1794
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 1794
			    {_cor21,F}
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor20})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1795
	  <[E0|Es0],F0,BF,Imported> when 'true' ->
	      %% Line 1796
	      case apply 'element_calls'/4
		       (E0, F0, BF, Imported) of
		<{E,F1}> when 'true' ->
		    %% Line 1797
		    case apply 'element_calls'/4
			     (Es0, F1, BF, Imported) of
		      <{Es,F}> when 'true' ->
			  %% Line 1798
			  {[E|Es],F}
		      ( <_cor23> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor23})
			-| ['compiler_generated'] )
		    end
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1799
	  <E,F,_X_BF,_X_Imported> when 'true' ->
	      %% Line 1800
	      {E,F}
	end
'unique_var'/0 =
    %% Line 1802
    fun () ->
	let <_cor0> =
	    %% Line 1803
	    call 'erlang':'make_ref'
		()
	in  %% Line 1803
	    {'var',0,_cor0}
'is_unique_var'/1 =
    %% Line 1805
    fun (_cor0) ->
	case _cor0 of
	  <{'var',_X_L,V}> when 'true' ->
	      %% Line 1806
	      call 'erlang':'is_reference'
		  (V)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_unique_var',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_pattern_records'/2 =
    %% Line 1808
    fun (_cor1,_cor0) ->
	let <E> =
	    %% Line 1809
	    {'case',0,{'atom',0,'true'},[{'clause',0,[_cor1|[]],[],[{'atom',0,'true'}]}|[]]}
	in  %% Line 1810
	    case apply 'expand_expr_records'/2
		     (E, _cor0) of
	      <{'case',_cor6,_cor7,[{'clause',0,[NP|[]],_cor8,_cor9}|[]]}> when 'true' ->
		  %% Line 1811
		  NP
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'expand_expr_records'/2 =
    %% Line 1813
    fun (_cor1,_cor0) ->
	%% Line 1814
	( case _cor0 of
	    ( <( {'state',_cor10,_cor11,_rec18,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor5> =
		      %% Line 1815
		      apply 'pe'/1
			  (_cor1)
		  in  let <Forms> =
			  %% Line 1815
			  call 'erlang':'++'
			      (_rec18, [{'function',1,'foo',0,[{'clause',1,[],[],[_cor5|[]]}|[]]}|[]])
		      in  %% Line 1816
			  case %% Line 1817
			       call 'erl_expand_records':'module'
				   (Forms, ['no_strict_record_tests']) of
			    <[{'function',_cor14,'foo',0,[{'clause',_cor15,[],[],[NE|[]]}|[]]}|[]]> when 'true' ->
				%% Line 1818
				NE
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pe'/1 =
    %% Line 1821
    fun (_cor0) ->
	case _cor0 of
	  <{'op',Line,Op,A}> when 'true' ->
	      let <_cor1> =
		  %% Line 1822
		  apply 'pe'/1
		      (A)
	      in  %% Line 1822
		  call 'erl_eval':'partial_eval'
		      ({'op',Line,Op,_cor1})
	  %% Line 1823
	  <{'op',Line,Op,L,R}> when 'true' ->
	      let <_cor3> =
		  %% Line 1824
		  apply 'pe'/1
		      (L)
	      in  let <_cor2> =
		      %% Line 1824
		      apply 'pe'/1
			  (R)
		  in  %% Line 1824
		      call 'erl_eval':'partial_eval'
			  ({'op',Line,Op,_cor3,_cor2})
	  %% Line 1825
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 1826
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor5> =
		      %% Line 1826
		      apply 'pe'/1
			  (_cor4)
		  in  %% Line 1826
		      call 'erlang':'list_to_tuple'
			  (_cor5)
	  %% Line 1827
	  <[E|Es]> when 'true' ->
	      let <_cor6> =
		  %% Line 1828
		  apply 'pe'/1
		      (E)
	      in  let <_cor7> =
		      %% Line 1828
		      apply 'pe'/1
			  (Es)
		  in  %% Line 1828
		      [_cor6|_cor7]
	  %% Line 1829
	  <E> when 'true' ->
	      %% Line 1830
	      E
	end
'unify'/6 =
    %% Line 1832
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1833
	apply 'unify'/7
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0, 'false')
'safe_unify'/6 =
    %% Line 1835
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1836
	apply 'unify'/7
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0, 'true')
'unify'/7 =
    %% Line 1838
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Op,_X_E1,_X_E2,'failed',_X_BF,_X_Imported,_X_Safe> when 'true' ->
	      %% Line 1839
	      'failed'
	  %% Line 1840
	  <_X_Op,E,_cor27,F,_X_BF,_X_Imported,_X_Safe>
	      when call 'erlang':'=:='
		    (_cor27,
		     E) ->
	      %% Line 1841
	      F
	  %% Line 1842
	  <Op,Var = {'var',_cor28,_cor29},E2,F,BF,Imported,Safe> when 'true' ->
	      %% Line 1843
	      apply 'extend_frame'/7
		  (Op, Var, E2, F, BF, Imported, Safe)
	  %% Line 1844
	  <Op,E1,Var = {'var',_cor30,_cor31},F,BF,Imported,Safe> when 'true' ->
	      %% Line 1845
	      apply 'extend_frame'/7
		  (Op, Var, E1, F, BF, Imported, Safe)
	  %% Line 1846
	  <Op,{'cons_tuple',Es1},{'cons_tuple',Es2},F,BF,Imported,Safe> when 'true' ->
	      %% Line 1847
	      apply 'unify'/7
		  (Op, Es1, Es2, F, BF, Imported, Safe)
	  %% Line 1848
	  <Op,{'cons',_cor32,L1,R1},{'cons',_cor33,L2,R2},F,BF,Imported,Safe> when 'true' ->
	      let <E> =
		  %% Line 1849
		  apply 'unify'/7
		      (Op, L1, L2, F, BF, Imported, Safe)
	      in  %% Line 1850
		  apply 'unify'/7
		      (Op, R1, R2, E, BF, Imported, Safe)
	  %% Line 1851
	  <Op,E1,E2,F,_X_BF,_X_Imported,Safe> when 'true' ->
	      %% Line 1852
	      try
		  %% Line 1853
		  case apply 'normalise'/1
			   (E1) of
		    <{'ok',C1}> when 'true' ->
			%% Line 1854
			case apply 'normalise'/1
				 (E2) of
			  <{'ok',C2}> when 'true' ->
			      %% Line 1855
			      case <> of
				%% Line 1856
				<>
				    when let <_cor10> =
					  call 'erlang':'=:='
					      (Op, '=:=')
				      in  let <_cor11> =
					      call 'erlang':'=:='
						  (C1, C2)
					  in  call 'erlang':'and'
						  (_cor10, _cor11) ->
				    %% Line 1857
				    F
				%% Line 1858
				<>
				    when let <_cor12> =
					  call 'erlang':'=:='
					      (Op, '==')
				      in  let <_cor13> =
					      call 'erlang':'=='
						  (C1, C2)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    %% Line 1859
				    F
				%% Line 1860
				<> when 'true' ->
				    %% Line 1861
				    'failed'
			      end
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	      of <_cor14> ->
		  _cor14
	      catch <_cor17,_cor16,_cor15> ->
		  case <_cor17,_cor16,_cor15> of
		    %% Line 1863
		    <'error',_cor34,_cor35>
			when call 'erlang':'=:='
			      (Safe,
			       'true') ->
			'failed'
		    %% Line 1864
		    <'error',_cor36,_cor37>
			when let <_cor18> =
			      call 'erlang':'=:='
				  (Safe, 'false')
			  in  let <_cor19> =
				  call 'erlang':'is_boolean'
				      (Safe)
			      in  call 'erlang':'and'
				      (_cor18, _cor19) ->
			F
		    ( <_cor17,_cor16,_cor15> when 'true' ->
			  primop 'raise'
			      (_cor15, _cor16)
		      -| ['compiler_generated'] )
		  end
	end
'extend_frame'/7 =
    %% Line 1879
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1880
	case apply 'var_values'/2
		 (_cor5, _cor3) of
	  %% Line 1881
	  <[]> when 'true' ->
	      %% Line 1882
	      case _cor4 of
		%% Line 1883
		<{'var',_cor17,_cor18}> when 'true' ->
		    %% Line 1884
		    case apply 'var_values'/2
			     (_cor4, _cor3) of
		      %% Line 1885
		      <[]> when 'true' ->
			  %% Line 1886
			  apply 'add_binding'/7
			      (_cor6, _cor4, _cor5, _cor3, _cor2, _cor1, _cor0)
		      %% Line 1887
		      <ValsOps> when 'true' ->
			  %% Line 1888
			  apply 'maybe_add_binding'/8
			      (ValsOps, _cor6, _cor4, _cor5, _cor3, _cor2, _cor1, _cor0)
		    end
		%% Line 1891
		<_cor19> when 'true' ->
		    %% Line 1892
		    apply 'add_binding'/7
			(_cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	      end
	  %% Line 1894
	  <ValsOps> when 'true' ->
	      %% Line 1895
	      apply 'maybe_add_binding'/8
		  (ValsOps, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	end
'maybe_add_binding'/8 =
    %% Line 1898
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1899
	case apply 'unify_var_bindings'/7
		 (_cor7, _cor6, _cor4, _cor3, _cor2, _cor1, _cor0) of
	  %% Line 1900
	  <'failed'> when 'true' ->
	      %% Line 1901
	      'failed'
	  %% Line 1902
	  <F> when 'true' ->
	      %% Line 1903
	      case apply 'already_bound'/4
		       (_cor6, _cor5, _cor4, F) of
		%% Line 1904
		<'true'> when 'true' ->
		    %% Line 1905
		    F
		%% Line 1906
		<'false'> when 'true' ->
		    %% Line 1907
		    apply 'add_binding'/7
			(_cor6, _cor5, _cor4, F, _cor2, _cor1, _cor0)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	end
'already_bound'/4 =
    %% Line 1911
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <BFun> =
	    %% Line 1914
	    ( fun (_cor5,_cor4) ->
		  call 'erlang':'=:='
		      (_cor3, _cor4)
	      -| [{'id',{0,0,'-already_bound/4-fun-0-'}}] )
	in  let <DerefValue> =
		%% Line 1915
		apply 'deref_value'/5
		    (_cor1, _cor3, _cor0, BFun, 'all')
	    in  let <DerefVar> =
		    %% Line 1916
		    apply 'deref_var'/4
			(_cor2, _cor0, BFun, 'all')
		in  let <_cor11> =
			%% Line 1917
			call 'erlang':'--'
			    (DerefValue, DerefVar)
		    in  %% Line 1917
			call 'erlang':'=:='
			    (_cor11, [])
'unify_var_bindings'/7 =
    %% Line 1919
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Op,_X_Value,F,_X_BF,_X_Imported,_X_Safe> when 'true' ->
	      %% Line 1920
	      F
	  %% Line 1921
	  <[{VarValue,Op2}|Bindings],%% Line 1922
				     Op1,%% Line 1922
					 Value,%% Line 1922
					       F0,%% Line 1922
						  BF,%% Line 1922
						     Imported,%% Line 1922
							      Safe> when 'true' ->
	      let <Op> =
		  %% Line 1923
		  apply 'deref_op'/2
		      (Op1, Op2)
	      in  %% Line 1924
		  case apply 'unify'/7
			   (Op, VarValue, Value, F0, BF, Imported, Safe) of
		    %% Line 1925
		    <'failed'> when 'true' ->
			%% Line 1926
			'failed'
		    %% Line 1927
		    <F> when 'true' ->
			%% Line 1928
			apply 'unify_var_bindings'/7
			    (Bindings, Op1, Value, F, BF, Imported, Safe)
		  end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'unify_var_bindings',7}}] )
	    -| ['compiler_generated'] )
	end
'deref_op'/2 =
    %% Line 1931
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'=:=','=:='> when 'true' ->
	      %% Line 1932
	      '=:='
	  %% Line 1933
	  <_cor4,_cor5> when 'true' ->
	      %% Line 1934
	      '=='
	end
'var_values'/2 =
    %% Line 1938
    fun (_cor1,_cor0) ->
	%% Line 1939
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[%% Line 1940
			  {'bind',_cor9,Value,Op}|_cor3]> when 'true' ->
			    let <_cor6> =
				%% Line 1940
				apply 'lc$^0'/1
				    (_cor3)
			    in  ( [{Value,Op}|_cor6]
				  -| ['compiler_generated'] )
			( <[_cor2|_cor3]> when 'true' ->
			      %% Line 1940
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor4> =
		  %% Line 1940
		  apply 'var_bindings'/2
		      (_cor1, _cor0)
	      in  apply 'lc$^0'/1
		      (_cor4)
	  -| ['list_comprehension'] )
'deref_var'/3 =
    %% Line 1942
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1943
	    ( fun (_cor4,_cor3) ->
		  'true'
	      -| [{'id',{0,0,'-deref_var/3-fun-0-'}}] )
	in  %% Line 1943
	    apply 'deref_var'/4
		(_cor2, _cor1, _cor7, _cor0)
'deref_var'/4 =
    %% Line 1945
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 1946
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor10) ->
			  case _cor10 of
			    <[%% Line 1947
			      {'bind',_cor18,Value,Op}|_cor5]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor11) ->
					      case _cor11 of
						<[%% Line 1948
						  ValOp|_cor8]> when 'true' ->
						    let <_cor12> =
							%% Line 1948
							apply 'lc$^1'/1
							    (_cor8)
						    in  ( [ValOp|_cor12]
							  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 1947
						    apply 'lc$^0'/1
							(_cor5)
						( <_cor11> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor11})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor9> =
					  %% Line 1948
					  apply 'deref_value'/5
					      (Value, Op, _cor2, _cor1, _cor0)
				      in  apply 'lc$^1'/1
					      (_cor9)
				  -| ['list_comprehension'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  %% Line 1947
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor10> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor10})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor6> =
		      %% Line 1947
		      apply 'var_bindings'/2
			  (_cor3, _cor2)
		  in  apply 'lc$^0'/1
			  (_cor6)
	      -| ['list_comprehension'] )
	in  %% Line 1946
	    call 'lists':'usort'
		(_cor13)
'deref_value'/5 =
    %% Line 1950
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 1951
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[ValOp = %% Line 1952
				      {Val,_X_Op}|_cor6]> when 'true' ->
				let <_cor9> =
				    apply 'value_op'/3
					(ValOp, _cor3, _cor0)
				in  let <_cor10> =
					%% Line 1952
					apply 'lc$^0'/1
					    (_cor6)
				    in  ( [{Val,_cor9}|_cor10]
					  -| ['compiler_generated'] )
			    ( <[_cor5|_cor6]> when 'true' ->
				  %% Line 1952
				  apply 'lc$^0'/1
				      (_cor6)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor7> =
		      %% Line 1952
		      apply 'deref'/4
			  (_cor4, _cor2, _cor1, _cor0)
		  in  apply 'lc$^0'/1
			  (_cor7)
	      -| ['list_comprehension'] )
	in  %% Line 1951
	    call 'lists':'usort'
		(_cor11)
'add_binding'/7 =
    %% Line 1954
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1955
	case apply 'maybe_swap_var_value'/4
		 (_cor5, _cor4, _cor3, _cor1) of
	  <{Var,Value}> when 'true' ->
	      %% Line 1956
	      case apply _cor2
		       (_cor6, Value) of
		%% Line 1957
		<'true'> when 'true' ->
		    %% Line 1958
		    apply 'add_binding2'/4
			(Var, Value, _cor6, _cor3)
		%% Line 1959
		<'false'>
		    when call 'erlang':'=:='
			  (_cor0,
			   'true') ->
		    %% Line 1960
		    'failed'
		%% Line 1961
		<'false'>
		    when let <_cor8> =
			  call 'erlang':'=:='
			      (_cor0, 'false')
		      in  let <_cor9> =
			      call 'erlang':'is_boolean'
				  (_cor0)
			  in  call 'erlang':'and'
				  (_cor8, _cor9) ->
		    _cor3
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'add_binding2'/4 =
    %% Line 1965
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1966
	case apply 'occurs'/3
		 (_cor3, _cor2, _cor0) of
	  %% Line 1967
	  <'true'> when 'true' ->
	      %% Line 1968
	      'failed'
	  %% Line 1969
	  <'false'> when 'true' ->
	      %% Line 1970
	      [{'bind',_cor3,_cor2,_cor1}|_cor0]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'maybe_swap_var_value'/4 =
    %% Line 1976
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1977
	case apply 'do_swap_var_value'/4
		 (_cor3, _cor2, _cor1, _cor0) of
	  %% Line 1978
	  <'true'> when 'true' ->
	      %% Line 1979
	      {_cor2,_cor3}
	  %% Line 1980
	  <'false'> when 'true' ->
	      %% Line 1981
	      {_cor3,_cor2}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'do_swap_var_value'/4 =
    %% Line 1984
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Var1 = {'var',_cor13,V1},Var2 = {'var',_cor14,V2},F,Imported> when 'true' ->
	      %% Line 1985
	      case apply 'swap_vv'/3
		       (Var1, Var2, F) of
		%% Line 1986
		<[]> when 'true' ->
		    %% Line 1987
		    case apply 'swap_vv'/3
			     (Var2, Var1, F) of
		      %% Line 1988
		      <[]> when 'true' ->
			  %% Line 1989
			  ( case call 'ordsets':'is_element'
				     (V1, Imported) of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor5> =
					%% Line 1990
					call 'ordsets':'is_element'
					    (V2, Imported)
				    in  %% Line 1990
					call 'erlang':'not'
					    (_cor5)
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor4> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor4}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 1991
		      <_X_Bs> when 'true' ->
			  %% Line 1992
			  'true'
		    end
		%% Line 1994
		<_X_Bs> when 'true' ->
		    %% Line 1995
		    'false'
	      end
	  %% Line 1997
	  <_cor15,_cor16,_X_F,_X_Imp> when 'true' ->
	      %% Line 1998
	      'false'
	end
'swap_vv'/3 =
    %% Line 2000
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2001
	( letrec
	      'lc$^0'/1 =
		  fun (_cor6) ->
		      case _cor6 of
			<[{'bind',_cor11,V,_cor12}|_cor4]>
			    when call 'erlang':'=:='
				  (V,
				   _cor1) ->
			    let <_cor7> =
				apply 'lc$^0'/1
				    (_cor4)
			    in  ( [V|_cor7]
				  -| ['compiler_generated'] )
			( <[_cor3|_cor4]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor4)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor5> =
		  apply 'var_bindings'/2
		      (_cor2, _cor0)
	      in  apply 'lc$^0'/1
		      (_cor5)
	  -| ['list_comprehension'] )
'normalise'/1 =
    %% Line 2003
    fun (_cor0) ->
	let <_cor3> =
	    catch
		let <_cor1> =
		    %% Line 2005
		    apply 'cons2tuple'/1
			(_cor0)
		in  let <_cor2> =
			%% Line 2005
			apply 'var2const'/1
			    (_cor1)
		    in  %% Line 2005
			call 'erl_parse':'normalise'
			    (_cor2)
	in  %% Line 2005
	    case _cor3 of
	      %% Line 2006
	      <{'EXIT',_cor6}> when 'true' ->
		  %% Line 2007
		  'not_ok'
	      %% Line 2008
	      <C> when 'true' ->
		  %% Line 2009
		  {'ok',C}
	    end
'occurs'/3 =
    %% Line 2012
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <V,_cor18,_X_F>
	      when call 'erlang':'=:='
		    (_cor18,
		     V) ->
	      %% Line 2013
	      'true'
	  %% Line 2014
	  <V,Var = {'var',_cor19,_cor20},F> when 'true' ->
	      let <_cor8> =
		  %% Line 2015
		  ( fun (_cor6) ->
			( case _cor6 of
			    ( <( {'bind',_cor21,_rec19,_cor22}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'occurs'/3
				      (V, _rec19, F)
			      -| ['compiler_generated'] )
			    ( <_cor23> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','bind'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-occurs/3-fun-0-'}}] )
	      in  let <_cor3> =
		      %% Line 2015
		      apply 'var_bindings'/2
			  (Var, F)
		  in  %% Line 2015
		      call 'lists':'any'
			  (_cor8, _cor3)
	  %% Line 2016
	  <V,T,F>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor12> =
		  %% Line 2017
		  ( fun (_cor10) ->
			apply 'occurs'/3
			    (V, _cor10, F)
		    -| [{'id',{0,0,'-occurs/3-fun-1-'}}] )
	      in  let <_cor9> =
		      %% Line 2017
		      call 'erlang':'tuple_to_list'
			  (T)
		  in  %% Line 2017
		      call 'lists':'any'
			  (_cor12, _cor9)
	  %% Line 2018
	  <V,[E|Es],F> when 'true' ->
	      %% Line 2019
	      ( case apply 'occurs'/3
			 (V, E, F) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'occurs'/3
			    (V, Es, F)
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor13}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2020
	  <_X_V,_X_E,_X_F> when 'true' ->
	      %% Line 2021
	      'false'
	end
'deref_values'/3 =
    %% Line 2023
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 2024
	    ( fun (_cor4,_cor3) ->
		  'true'
	      -| [{'id',{0,0,'-deref_values/3-fun-0-'}}] )
	in  %% Line 2024
	    apply 'deref_values'/4
		(_cor2, _cor1, _cor7, _cor0)
'deref_values'/4 =
    %% Line 2026
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 2027
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[%% Line 2028
			      {V,Op}|_cor5]> when 'true' ->
				%% Line 2029
				( case apply _cor1
					   (V, Op) of
				    <'true'> when 'true' ->
					let <_cor8> =
					    apply 'lc$^0'/1
						(_cor5)
					in  ( [V|_cor8]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor5)
				      -| ['compiler_generated'] )
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  %% Line 2028
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor6> =
		      %% Line 2028
		      apply 'deref'/4
			  (_cor3, _cor2, _cor1, _cor0)
		  in  apply 'lc$^0'/1
			  (_cor6)
	      -| ['list_comprehension'] )
	in  %% Line 2027
	    call 'lists':'usort'
		(_cor10)
'deref'/3 =
    %% Line 2031
    fun (_cor2,_cor1,_cor0) ->
	let <BFun> =
	    %% Line 2032
	    ( fun (_cor4,_cor3) ->
		  'true'
	      -| [{'id',{0,0,'-deref/3-fun-0-'}}] )
	in  %% Line 2033
	    apply 'deref'/4
		(_cor2, _cor1, BFun, _cor0)
'deref'/4 =
    %% Line 2035
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <V = {'var',_cor35,_cor36},F,BFun,Imp> when 'true' ->
	      let <_cor7> =
		  %% Line 2036
		  ( fun (_cor5) ->
			apply 'deref_binding'/4
			    (_cor5, F, BFun, Imp)
		    -| [{'id',{0,0,'-deref/4-fun-0-'}}] )
	      in  let <_cor4> =
		      %% Line 2037
		      apply 'var_bindings'/2
			  (V, F)
		  in  let <DBs> =
			  %% Line 2036
			  call 'lists':'flatmap'
			      (_cor7, _cor4)
		      in  %% Line 2038
			  case DBs of
			    %% Line 2039
			    <[]> when 'true' ->
				%% Line 2040
				[{V,'=:='}|[]]
			    %% Line 2041
			    <_cor37> when 'true' ->
				%% Line 2042
				call 'lists':'usort'
				    (DBs)
			  end
	  %% Line 2044
	  <T,F,BFun,Imp>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      %% Line 2045
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor14) ->
			    case _cor14 of
			      <[%% Line 2046
				{DL,Op}|_cor11]> when 'true' ->
				  let <_cor15> =
				      call 'erlang':'list_to_tuple'
					  (DL)
				  in  let <_cor16> =
					  %% Line 2046
					  apply 'lc$^0'/1
					      (_cor11)
				      in  ( [{_cor15,Op}|_cor16]
					    -| ['compiler_generated'] )
			      ( <[_cor10|_cor11]> when 'true' ->
				    %% Line 2046
				    apply 'lc$^0'/1
					(_cor11)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor14> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor14})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor12> =
			%% Line 2046
			call 'erlang':'tuple_to_list'
			    (T)
		    in  let <_cor13> =
			    %% Line 2046
			    apply 'deref'/4
				(_cor12, F, BFun, Imp)
			in  apply 'lc$^0'/1
				(_cor13)
		-| ['list_comprehension'] )
	  %% Line 2047
	  <Es,F,BFun,Imp>
	      when call 'erlang':'is_list'
		    (Es) ->
	      let <_cor22> =
		  %% Line 2048
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor19) ->
				case _cor19 of
				  <[C|_cor18]> when 'true' ->
				      let <_cor20> =
					  apply 'deref'/4
					      (C, F, BFun, Imp)
				      in  let <_cor21> =
					      apply 'lc$^1'/1
						  (_cor18)
					  in  ( [_cor20|_cor21]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor19> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor19})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (Es)
		    -| ['list_comprehension'] )
	      in  let <_cor30> =
		      %% Line 2049
		      ( letrec
			    'lc$^2'/1 =
				fun (_cor27) ->
				    case _cor27 of
				      <[S|_cor25]> when 'true' ->
					  let <_cor28> =
					      apply 'deref_list'/1
						  (S)
					  in  let <_cor29> =
						  apply 'lc$^2'/1
						      (_cor25)
					      in  ( [_cor28|_cor29]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor27> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor27})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor26> =
				apply 'all_comb'/1
				    (_cor22)
			    in  apply 'lc$^2'/1
				    (_cor26)
			-| ['list_comprehension'] )
		  in  %% Line 2049
		      call 'lists':'usort'
			  (_cor30)
	  %% Line 2050
	  <E,_X_F,_X_BFun,_X_Imp> when 'true' ->
	      %% Line 2051
	      [{E,'=:='}|[]]
	end
'var_bindings'/2 =
    %% Line 2053
    fun (_cor1,_cor0) ->
	%% Line 2054
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[B = {'bind',V,_cor8,_cor9}|_cor3]>
			    when call 'erlang':'=:='
				  (V,
				   _cor1) ->
			    let <_cor5> =
				apply 'lc$^0'/1
				    (_cor3)
			    in  ( [B|_cor5]
				  -| ['compiler_generated'] )
			( <[_cor2|_cor3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'deref_binding'/4 =
    %% Line 2056
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2057
	case _cor3 of
	  <{'bind',_cor17,Value,Op0}> when 'true' ->
	      %% Line 2058
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor10) ->
			    case _cor10 of
			      <[ValOp = %% Line 2059
					{Val,_X_Op}|_cor6]> when 'true' ->
				  let <_cor9> =
				      %% Line 2060
				      apply 'value_op'/3
					  (ValOp, Op0, _cor0)
				  in  %% Line 2060
				      ( case apply _cor1
						 (Val, _cor9) of
					  <'true'> when 'true' ->
					      let <_cor11> =
						  apply 'lc$^0'/1
						      (_cor6)
					      in  ( [{Val,_cor9}|_cor11]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor6)
					    -| ['compiler_generated'] )
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor12})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
			      ( <[_cor5|_cor6]> when 'true' ->
				    %% Line 2059
				    apply 'lc$^0'/1
					(_cor6)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor10> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor10})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor7> =
			%% Line 2059
			apply 'deref'/4
			    (Value, _cor2, _cor1, _cor0)
		    in  apply 'lc$^0'/1
			    (_cor7)
		-| ['list_comprehension'] )
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'deref_list'/1 =
    %% Line 2062
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 2063
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{_X_Val,Op}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [Op|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor7> =
		%% Line 2063
		case call 'lists':'usort'
			 (_cor5) of
		  %% Line 2064
		  <['=:=']> when 'true' ->
		      %% Line 2065
		      '=:='
		  %% Line 2066
		  <_cor15> when 'true' ->
		      %% Line 2067
		      '=='
		end
	    in  let <_cor13> =
		    %% Line 2069
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor11) ->
				  case _cor11 of
				    <[{V,_X_Op}|_cor10]> when 'true' ->
					let <_cor12> =
					    apply 'lc$^1'/1
						(_cor10)
					in  ( [V|_cor12]
					      -| ['compiler_generated'] )
				    ( <[_cor9|_cor10]> when 'true' ->
					  apply 'lc$^1'/1
					      (_cor10)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor11> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^1'/1
			      (_cor0)
		      -| ['list_comprehension'] )
		in  %% Line 2069
		    {_cor13,_cor7}
'value_op'/3 =
    %% Line 2071
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{_X_V,'=='},_X_BindOp,_X_Imp> when 'true' ->
	      %% Line 2072
	      '=='
	  %% Line 2073
	  <{_X_V,'=:='},_X_BindOp = '=:=',_X_Imp> when 'true' ->
	      %% Line 2074
	      '=:='
	  %% Line 2075
	  <{V,'=:='},_X_BindOp = '==',Imp> when 'true' ->
	      %% Line 2076
	      case apply 'free_of_integers'/2
		       (V, Imp) of
		%% Line 2077
		<'true'> when 'true' ->
		    %% Line 2078
		    '=:='
		%% Line 2079
		<'false'> when 'true' ->
		    %% Line 2080
		    '=='
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'value_op',3}}] )
	    -| ['compiler_generated'] )
	end
'all_comb'/1 =
    %% Line 2083
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2084
	      [[]]
	  %% Line 2085
	  <[Cs|ICs]> when 'true' ->
	      %% Line 2086
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor6) ->
			    case _cor6 of
			      <[C|_cor2]> when 'true' ->
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor7) ->
						case _cor7 of
						  <[L|_cor4]> when 'true' ->
						      let <_cor8> =
							  apply 'lc$^1'/1
							      (_cor4)
						      in  ( [[C|L]|_cor8]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor2)
						  ( <_cor7> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor7})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor5> =
					    apply 'all_comb'/1
						(ICs)
					in  apply 'lc$^1'/1
						(_cor5)
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Cs)
		-| ['list_comprehension'] )
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'all_comb',1}}] )
	    -| ['compiler_generated'] )
	end
'free_of_integers'/2 =
    %% Line 2091
    fun (_cor1,_cor0) ->
	%% Line 2092
	( case apply 'has_integer'/1
		   (_cor1) of
	    ( <'false'> when 'true' ->
		  let <_cor4> =
		      apply 'has_imported_vars'/2
			  (_cor1, _cor0)
		  in  call 'erlang':'not'
			  (_cor4)
	      -| ['compiler_generated'] )
	    ( <'true'> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_cor_variable> when 'true' ->
		  call 'erlang':'error'
		      ('badarg')
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'has_imported_vars'/2 =
    %% Line 2096
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Value,'all'> when 'true' ->
	      let <_cor2> =
		  %% Line 2097
		  call 'qlc':'vars'
		      (Value)
	      in  %% Line 2097
		  call 'erlang':'=/='
		      (_cor2, [])
	  %% Line 2098
	  <Value,Imported> when 'true' ->
	      let <_cor9> =
		  %% Line 2099
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[Var|_cor4]> when 'true' ->
				      ( case call 'lists':'member'
						 (Var, Imported) of
					  <'true'> when 'true' ->
					      let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [Var|_cor7]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor4)
					    -| ['compiler_generated'] )
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor8})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor5> =
			    call 'qlc':'vars'
				(Value)
			in  apply 'lc$^0'/1
				(_cor5)
		    -| ['list_comprehension'] )
	      in  %% Line 2099
		  call 'erlang':'=/='
		      (_cor9, [])
	end
'has_integer'/1 =
    %% Line 2101
    fun (_cor0) ->
	%% Line 2102
	try
	    %% Line 2103
	    apply 'has_int'/1
		(_cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 2104
	      <'throw','true',_cor6> when 'true' ->
		  'true'
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'has_int'/1 =
    %% Line 2107
    fun (_cor0) ->
	case _cor0 of
	  <{'integer',_cor5,I}>
	      when try
		    let <_cor1> =
			call 'erlang':'float'
			    (I)
		    in  call 'erlang':'=='
			    (_cor1, I)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2108
	      call 'erlang':'throw'
		  ('true')
	  %% Line 2109
	  <{'float',_cor6,F}>
	      when try
		    let <_cor2> =
			call 'erlang':'round'
			    (F)
		    in  call 'erlang':'=='
			    (_cor2, F)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2110
	      call 'erlang':'throw'
		  ('true')
	  %% Line 2111
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 2112
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 2112
		  apply 'has_int'/1
		      (_cor3)
	  %% Line 2113
	  <[E|Es]> when 'true' ->
	      do  %% Line 2114
		  apply 'has_int'/1
		      (E)
		  %% Line 2115
		  apply 'has_int'/1
		      (Es)
	  %% Line 2116
	  <_cor7> when 'true' ->
	      %% Line 2117
	      'false'
	end
'tuple2cons'/1 =
    %% Line 2119
    fun (_cor0) ->
	case _cor0 of
	  <{'tuple',_cor8,Es}> when 'true' ->
	      let <_cor1> =
		  %% Line 2120
		  apply 'tuple2cons'/1
		      (Es)
	      in  let <_cor2> =
		      %% Line 2120
		      apply 'list2cons'/1
			  (_cor1)
		  in  %% Line 2120
		      {'cons_tuple',_cor2}
	  %% Line 2121
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 2122
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor4> =
		      %% Line 2122
		      apply 'tuple2cons'/1
			  (_cor3)
		  in  %% Line 2122
		      call 'erlang':'list_to_tuple'
			  (_cor4)
	  %% Line 2123
	  <[E|Es]> when 'true' ->
	      let <_cor5> =
		  %% Line 2124
		  apply 'tuple2cons'/1
		      (E)
	      in  let <_cor6> =
		      %% Line 2124
		      apply 'tuple2cons'/1
			  (Es)
		  in  %% Line 2124
		      [_cor5|_cor6]
	  %% Line 2125
	  <E> when 'true' ->
	      %% Line 2126
	      E
	end
'list2cons'/1 =
    %% Line 2128
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 2129
		  apply 'list2cons'/1
		      (Es)
	      in  %% Line 2129
		  {'cons',0,E,_cor1}
	  %% Line 2130
	  <[]> when 'true' ->
	      %% Line 2131
	      {'nil',0}
	  %% Line 2132
	  <E> when 'true' ->
	      %% Line 2133
	      E
	end
'cons2tuple'/1 =
    %% Line 2136
    fun (_cor0) ->
	case _cor0 of
	  <{'cons_tuple',Es}> when 'true' ->
	      let <_cor1> =
		  %% Line 2137
		  apply 'cons2list'/1
		      (Es)
	      in  %% Line 2137
		  {'tuple',0,_cor1}
	  %% Line 2138
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 2139
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor3> =
		      %% Line 2139
		      apply 'cons2tuple'/1
			  (_cor2)
		  in  %% Line 2139
		      call 'erlang':'list_to_tuple'
			  (_cor3)
	  %% Line 2140
	  <[E|Es]> when 'true' ->
	      let <_cor4> =
		  %% Line 2141
		  apply 'cons2tuple'/1
		      (E)
	      in  let <_cor5> =
		      %% Line 2141
		      apply 'cons2tuple'/1
			  (Es)
		  in  %% Line 2141
		      [_cor4|_cor5]
	  %% Line 2142
	  <E> when 'true' ->
	      %% Line 2143
	      E
	end
'cons2list'/1 =
    %% Line 2145
    fun (_cor0) ->
	case _cor0 of
	  <{'cons',_cor5,L,R}> when 'true' ->
	      let <_cor1> =
		  %% Line 2146
		  apply 'cons2tuple'/1
		      (L)
	      in  let <_cor2> =
		      %% Line 2146
		      apply 'cons2list'/1
			  (R)
		  in  %% Line 2146
		      [_cor1|_cor2]
	  %% Line 2147
	  <{'nil',_cor6}> when 'true' ->
	      %% Line 2148
	      []
	  %% Line 2149
	  <E> when 'true' ->
	      let <_cor3> =
		  %% Line 2150
		  apply 'cons2tuple'/1
		      (E)
	      in  %% Line 2150
		  [_cor3|[]]
	end
'bindings_is_subset'/3 =
    %% Line 2156
    fun (_cor2,_cor1,_cor0) ->
	let <BF> =
	    %% Line 2157
	    ( fun (_cor4,_cor3) ->
		  'true'
	      -| [{'id',{0,0,'-bindings_is_subset/3-fun-0-'}}] )
	in  let <_cor12> =
		%% Line 2159
		( fun (_cor9,_cor8) ->
		      case <_cor9,_cor8> of
			<{'bind',V,Value,Op},Frame> when 'true' ->
			    %% Line 2160
			    apply 'unify'/6
				(Op, V, Value, Frame, BF, _cor0)
			( <_cor11,_cor10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor11,_cor10})
				-| [{'function_name',{'-bindings_is_subset/3-fun-1-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-bindings_is_subset/3-fun-1-'}}] )
	    in  let <F> =
		    %% Line 2159
		    call 'lists':'foldl'
			(_cor12, _cor1, _cor2)
		in  %% Line 2162
		    ( case apply 'bindings_subset'/3
			       (F, _cor1, _cor0) of
			( <( 'true'
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'bindings_subset'/3
				  (_cor1, F, _cor0)
			  -| ['compiler_generated'] )
			( <( 'false'
			     -| ['compiler_generated'] )> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
			( <_cor14> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {( 'badarg'
					  -| ['compiler_generated'] ),_cor14}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'bindings_subset'/3 =
    %% Line 2164
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 2165
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[{'bind',V,_cor19,_cor20}|_cor4]> when 'true' ->
				( case apply 'is_unique_var'/1
					   (V) of
				    <'false'> when 'true' ->
					let <_cor7> =
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [V|_cor7]
					      -| ['compiler_generated'] )
				    ( <'true'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor4)
				      -| ['compiler_generated'] )
				    ( <_cor_variable> when 'true' ->
					  call 'erlang':'error'
					      ('badarg')
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  let <Vars> =
		%% Line 2165
		call 'lists':'usort'
		    (_cor9)
	    in  let <_cor15> =
		    %% Line 2166
		    ( fun (_cor13) ->
			  let <_cor12> =
			      %% Line 2167
			      apply 'deref_var'/3
				  (_cor13, _cor2, _cor0)
			  in  let <_cor11> =
				  %% Line 2167
				  apply 'deref_var'/3
				      (_cor13, _cor1, _cor0)
			      in  %% Line 2167
				  call 'erlang':'=:='
				      (_cor12, _cor11)
		      -| [{'id',{0,0,'-bindings_subset/3-fun-0-'}}] )
		in  %% Line 2166
		    call 'lists':'all'
			(_cor15, %% Line 2168
				 Vars)
'try_ms'/4 =
    %% Line 2175
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Fun> =
	    %% Line 2177
	    {'fun',1,{'clauses',[{'clause',1,[_cor2|[]],[[_cor1|[]]|[]],[_cor3|[]]}|[]]}}
	in  let <Expr> =
		%% Line 2178
		{'call',1,{'remote',1,{'atom',1,'ets'},{'atom',1,'fun2ms'}},[Fun|[]]}
	    in  let <Form0> =
		    %% Line 2179
		    {'function',1,'foo',0,[{'clause',1,[],[],[Expr|[]]}|[]]}
		in  let <Form> =
			%% Line 2180
			apply 'restore_line_numbers'/1
			    (Form0)
		    in  %% Line 2181
			( case _cor0 of
			    ( <( {'state',_cor24,_cor25,_rec20,_cor26}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor11> =
				      call 'erlang':'++'
					  (_rec20, [Form|[]])
				  in  let <X> =
					  call 'ms_transform':'parse_transform'
					      (_cor11, [])
				      in  let <_cor18> =
					      catch
						  %% Line 2184
						  case call 'lists':'last'
							   (X) of
						    <{'function',_cor28,'foo',0,[{'clause',_cor29,[],[],[MS0|[]]}|[]]}>
							when let <_cor30> =
							      call 'erlang':'=:='
								  (_cor28, 1)
							  in  let <_cor31> =
								  call 'erlang':'=:='
								      (_cor29, 1)
							      in  call 'erlang':'and'
								      (_cor30, _cor31) ->
							let <_cor14> =
							    %% Line 2185
							    apply 'var2const'/1
								(MS0)
							in  let <MS> =
								%% Line 2185
								call 'erl_parse':'normalise'
								    (_cor14)
							    in  let <XMS> =
								    %% Line 2186
								    call 'ets':'match_spec_compile'
									(MS)
								in  %% Line 2187
								    case call 'ets':'is_compiled_ms'
									     (XMS) of
								      <'true'> when 'true' ->
									  %% Line 2188
									  {'ok',MS,MS0}
								      ( <_cor17> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor17})
									-| ['compiler_generated'] )
								    end
						    ( <_cor13> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor13})
						      -| ['compiler_generated'] )
						  end
					  in  %% Line 2182
					      case _cor18 of
						%% Line 2190
						<{'EXIT',_X_Reason}> when 'true' ->
						    %% Line 2191
						    'no'
						%% Line 2192
						<Reply> when 'true' ->
						    %% Line 2193
						    Reply
					      end
			      -| ['compiler_generated'] )
			    ( <_cor27> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'filters_as_one'/1 =
    %% Line 2196
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2197
	      {'atom',0,'true'}
	  %% Line 2198
	  <FilterData> when 'true' ->
	      %% Line 2199
	      case call 'lists':'reverse'
		       (FilterData) of
		<[{_cor8,{'fil',Filter1}}|Filters]> when 'true' ->
		    let <_cor6> =
			%% Line 2200
			( fun (_cor3,_cor2) ->
			      case <_cor3,_cor2> of
				<{_X_QId,{'fil',Filter}},AbstF> when 'true' ->
				    %% Line 2201
				    {'op',0,'andalso',Filter,AbstF}
				( <_cor5,_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5,_cor4})
					-| [{'function_name',{'-filters_as_one/1-fun-0-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-filters_as_one/1-fun-0-'}}] )
		    in  %% Line 2200
			call 'lists':'foldr'
			    (_cor6, %% Line 2202
				    Filter1, %% Line 2202
					     Filters)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'qual_data'/1 =
    %% Line 2204
    fun (_cor0) ->
	let <F> =
	    %% Line 2205
	    ( fun (_cor6) ->
		  %% Line 2206
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{QId,_cor12,_cor13,Q}|_cor2]>
				      when try
					    let <_cor3> =
						call 'erlang':'element'
						    (1, Q)
					    in  call 'erlang':'=:='
						    (_cor3, _cor6)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [{QId,Q}|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      -| [{'id',{0,0,'-qual_data/1-fun-0-'}}] )
	in  let <_cor10> =
		%% Line 2208
		apply F
		    ('fil')
	    in  let <_cor9> =
		    %% Line 2208
		    apply F
			('gen')
		in  %% Line 2208
		    {_cor10,_cor9}
'set_field'/3 =
    %% Line 2210
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 2211
	    call 'erlang':'-'
		(_cor2, 1)
	in  let <_cor6> =
		%% Line 2211
		call 'lists':'sublist'
		    (_cor1, _cor5)
	    in  let <_cor3> =
		    %% Line 2211
		    call 'lists':'nthtail'
			(_cor2, _cor1)
		in  let <_cor4> =
			%% Line 2211
			[_cor0|_cor3]
		    in  %% Line 2211
			call 'erlang':'++'
			    (_cor6, _cor4)
'qdata'/2 =
    %% Line 2213
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{'qid',_cor13,QIdNo},{_X_QIVs,{{'gen',_X_P,LE,_X_GV},GoI,SI}}}|QCs],L> when 'true' ->
	      let <_cor7> =
		  %% Line 2214
		  case LE of
		    %% Line 2215
		    <{'join',Op,Q1,Q2,H1,H2,Cs1_0,Cs2_0}> when 'true' ->
			let <Cs1> =
			    %% Line 2216
			    apply 'qcon'/1
				(Cs1_0)
			in  let <Cs2> =
				%% Line 2217
				apply 'qcon'/1
				    (Cs2_0)
			    in  let <Compat> = {%% Line 2220
				     'atom',%% Line 2220
					    L,%% Line 2220
					      'v1'}
				in  let <CF> =
					%% Line 2221
					apply 'closure'/2
					    ({'tuple',L,[Cs1|[Cs2|[Compat|[]]]]}, L)
				    in  %% Line 2222
					{'tuple',L,[{'atom',L,'join'}|[{'atom',L,Op}|[{'integer',L,Q1}|[{'integer',L,Q2}|[H1|[H2|[CF|[]]]]]]]]}
		    %% Line 2223
		    <_cor14> when 'true' ->
			%% Line 2224
			apply 'closure'/2
			    (LE, L)
		  end
	      in  let <_cor9> =
		      %% Line 2228
		      apply 'qdata'/2
			  (QCs, L)
		  in  %% Line 2227
		      {'cons',L,{'tuple',L,[{'integer',L,QIdNo}|[{'integer',L,GoI}|[{'integer',L,SI}|[{'tuple',L,[{'atom',L,'gen'}|[_cor7|[]]]}|[]]]]]},_cor9}
	  %% Line 2229
	  <[{{'qid',_cor15,QIdNo},{_X_QIVs,{{'fil',_X_F},GoI,SI}}}|QCs],L> when 'true' ->
	      let <_cor10> =
		  %% Line 2231
		  apply 'qdata'/2
		      (QCs, L)
	      in  %% Line 2231
		  {'cons',L,{'tuple',L,[{'integer',L,QIdNo}|[{'integer',L,GoI}|[{'integer',L,SI}|[{'atom',L,'fil'}|[]]]]]},_cor10}
	  %% Line 2232
	  <[],L> when 'true' ->
	      %% Line 2233
	      {'nil',L}
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'qdata',2}}] )
	    -| ['compiler_generated'] )
	end
'qcon'/1 =
    %% Line 2235
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 2236
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 2237
			      {Col,ConstOps}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'qcon1'/1
					(ConstOps)
				in  let <_cor5> =
					apply 'list2cons'/1
					    (_cor4)
				    in  let <_cor6> =
					    %% Line 2237
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [{'tuple',0,[{'integer',0,Col}|[_cor5|[]]]}|_cor6]
					      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 2237
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 2236
	    apply 'list2cons'/1
		(_cor7)
'qcon1'/1 =
    %% Line 2239
    fun (_cor0) ->
	%% Line 2240
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[{Const,Op}|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'abstr'/2
				    (Op, 0)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{'tuple',0,[Const|[_cor4|[]]]}|_cor5]
				      -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'qcode'/4 =
    %% Line 2245
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 2246
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor9) ->
			  case _cor9 of
			    <[%% Line 2251
			      {_cor19,C}|_cor5]> when 'true' ->
				let <Bin> =
				    %% Line 2247
				    call 'erlang':'term_to_binary'
					(C, ['compressed'])
				in  let <_cor11> =
					%% Line 2249
					call 'erlang':'binary_to_list'
					    (Bin)
				    in  let <_cor12> =
					    %% Line 2251
					    apply 'lc$^0'/1
						(_cor5)
					in  ( [%% Line 2248
					       {'bin',_cor0,[{'bin_element',_cor0,%% Line 2249
										  {'string',_cor0,_cor11},%% Line 2250
													  'default',%% Line 2250
														    'default'}|%% Line 2250
															       []]}|_cor12]
					      -| ['compiler_generated'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  %% Line 2251
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor9> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor9})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor6> =
		      %% Line 2251
		      call 'qlc':'template_state'
			  ()
		  in  let <_cor7> =
			  %% Line 2252
			  apply 'qcode'/2
			      (_cor2, _cor1)
		      in  let <_cor8> =
			      %% Line 2251
			      call 'lists':'keysort'
				  (1, [{_cor6,_cor3}|_cor7])
			  in  apply 'lc$^0'/1
				  (_cor8)
	      -| ['list_comprehension'] )
	in  %% Line 2253
	    {'fun',_cor0,{'clauses',[{'clause',_cor0,[],[],[{'tuple',_cor0,_cor13}|[]]}|[]]}}
'qcode'/2 =
    %% Line 2255
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_QId,{_X_QIvs,{{'gen',P,_X_LE,_X_GV},GoI,_X_SI}}}|QCs],Source> when 'true' ->
	      let <_cor2> =
		  %% Line 2256
		  apply 'undo_no_shadows'/1
		      (P)
	      in  let <_cor3> =
		      %% Line 2256
		      apply 'qcode'/2
			  (QCs, Source)
		  in  %% Line 2256
		      [{GoI,_cor2}|_cor3]
	  %% Line 2257
	  <[{QId,{_X_QIVs,{{'fil',_X_F},GoI,_X_SI}}}|QCs],Source> when 'true' ->
	      %% Line 2258
	      case call 'dict':'find'
		       (QId, Source) of
		<{'ok',OrigF}> when 'true' ->
		    let <_cor5> =
			%% Line 2259
			apply 'undo_no_shadows'/1
			    (OrigF)
		    in  let <_cor6> =
			    %% Line 2259
			    apply 'qcode'/2
				(QCs, Source)
			in  %% Line 2259
			    [{GoI,_cor5}|_cor6]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2260
	  <[],_X_Source> when 'true' ->
	      %% Line 2261
	      []
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'qcode',2}}] )
	    -| ['compiler_generated'] )
	end
'closure'/2 =
    %% Line 2263
    fun (_cor1,_cor0) ->
	%% Line 2264
	{'fun',_cor0,{'clauses',[{'clause',_cor0,[],[],[_cor1|[]]}|[]]}}
'simple'/4 =
    %% Line 2266
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2267
	{'tuple',_cor3,[{'atom',_cor3,'simple_v1'}|[{'atom',_cor3,_cor2}|[_cor1|[{'integer',_cor3,_cor0}|[]]]]]}
'clauses'/8 =
    %% Line 2269
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{QId,{QIVs,{QualData,GoI,S}}}|QCs],RL,Fun,Go,NGV,E,IVs,St> when 'true' ->
	      %% Line 2273
	      ( case QId of
		  ( <( {'qid',_rec21,_cor24}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor10> =
			    apply 'get_lcid_line'/1
				(_rec21)
			in  let <L> =
				apply 'no_compiler_warning'/1
				    (_cor10)
			    in  let <_cor13> =
				    %% Line 2274
				    case QualData of
				      %% Line 2275
				      <{'gen',P,_X_LE,GV}> when 'true' ->
					  %% Line 2276
					  apply 'generator'/13
					      (S, QIVs, P, GV, NGV, E, IVs, RL, Fun, Go, GoI, L, St)
				      %% Line 2277
				      <{'fil',F}> when 'true' ->
					  %% Line 2278
					  apply 'filter'/10
					      (F, L, QIVs, S, RL, Fun, Go, GoI, IVs, St)
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor12})
					-| ['compiler_generated'] )
				    end
				in  let <_cor15> =
					%% Line 2280
					apply 'clauses'/8
					    (QCs, RL, Fun, Go, NGV, E, IVs, St)
				    in  %% Line 2280
					call 'erlang':'++'
					    (_cor13, _cor15)
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','qid'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2281
	  <[],_X_RL,_X_Fun,_X_Go,_X_NGV,_X_IVs,_X_E,_X_St> when 'true' ->
	      %% Line 2282
	      []
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'clauses',8}}] )
	    -| ['compiler_generated'] )
	end
'final'/4 =
    %% Line 2284
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <IAs> =
	    %% Line 2285
	    apply 'replace'/3
		(_cor2, _cor2, '_')
	in  let <_cor5> =
		%% Line 2286
		[_cor3|['_'|['_'|IAs]]]
	    in  let <_cor6> =
		    %% Line 2286
		    apply 'abst_vars'/2
			(_cor5, _cor1)
		in  let <AsL> =
			%% Line 2286
			apply 'pack_args'/3
			    ([{'integer',_cor1,0}|_cor6], _cor1, _cor0)
		    in  let <_cor8> =
			    %% Line 2287
			    apply 'is_list_c'/2
				(_cor3, _cor1)
			in  let <Grd> =
				%% Line 2287
				[_cor8|[]]
			    in  let <Rev> =
				    %% Line 2288
				    {'call',_cor1,{'remote',_cor1,{'atom',_cor1,'lists'},{'atom',_cor1,'reverse'}},[{'var',_cor1,_cor3}|[]]}
				in  let <CL> =
					%% Line 2289
					{'clause',_cor1,AsL,[Grd|[]],[Rev|[]]}
				    in  let <_cor12> =
					    %% Line 2290
					    ['_'|['_'|['_'|IAs]]]
					in  let <_cor13> =
						%% Line 2290
						apply 'abst_vars'/2
						    (_cor12, _cor1)
					    in  let <AsF> =
						    %% Line 2290
						    apply 'pack_args'/3
							([{'integer',_cor1,0}|_cor13], _cor1, _cor0)
						in  let <CF> =
							%% Line 2291
							{'clause',_cor1,AsF,[],[{'nil',_cor1}|[]]}
						    in  %% Line 2292
							[CL|[CF|[]]]
'template'/8 =
    %% Line 2294
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <I> =
	    %% Line 2295
	    call 'qlc':'template_state'
		()
	in  let <GoI> =
		%% Line 2295
		call 'qlc':'template_state'
		    ()
	    in  let <_cor10> =
		    %% Line 2296
		    apply 'abst_vars'/2
			(_cor6, _cor2)
		in  let <ARL> =
			%% Line 2296
			{'cons',_cor2,_cor7,_cor10}
		    in  let <Next> =
			    %% Line 2297
			    apply 'next'/3
				(_cor4, GoI, _cor2)
			in  let <_cor13> =
				%% Line 2298
				[_cor6|[_cor5|[_cor4|_cor1]]]
			    in  let <As0> =
				    %% Line 2298
				    apply 'abst_vars'/2
					(_cor13, _cor2)
				in  let <As> =
					%% Line 2299
					apply 'pack_args'/3
					    ([{'integer',_cor2,I}|As0], _cor2, _cor0)
				    in  let <_cor16> =
					    %% Line 2300
					    [_cor5|[_cor4|_cor1]]
					in  let <_cor17> =
						%% Line 2300
						apply 'abst_vars'/2
						    (_cor16, _cor2)
					    in  let <_cor18> =
						    %% Line 2300
						    [Next|[ARL|_cor17]]
						in  let <NAs> =
							%% Line 2300
							apply 'pack_args'/3
							    (_cor18, _cor2, _cor0)
						    in  let <_cor20> =
							    %% Line 2301
							    apply 'is_list_c'/2
								(_cor6, _cor2)
							in  let <Grd> =
								%% Line 2301
								[_cor20|[]]
							    in  let <CL> =
								    %% Line 2302
								    {'clause',_cor2,As,[Grd|[]],[{'call',_cor2,{'var',_cor2,_cor5},NAs}|[]]}
								in  let <_cor26> =
									%% Line 2305
									case apply 'split_args'/3
										 ([Next|As0], _cor2, _cor0) of
									  %% Line 2306
									  <{ArgsL,ArgsT}> when 'true' ->
									      let <_cor23> =
										  %% Line 2307
										  call 'erlang':'++'
										      (ArgsL, [{'var',_cor2,_cor3}|[]])
									      in  let <Call> =
										      %% Line 2307
										      {'call',_cor2,{'var',_cor2,_cor5},_cor23}
										  in  %% Line 2308
										      {'block',_cor2,%% Line 2309
												     [{'match',_cor2,{'var',_cor2,_cor3},ArgsT}|%% Line 2310
																		[{'fun',_cor2,{'clauses',[{'clause',_cor2,[],[],[Call|[]]}|[]]}}|[]]]}
									  %% Line 2311
									  <FNAs> when 'true' ->
									      %% Line 2312
									      {'fun',_cor2,{'clauses',[{'clause',_cor2,[],[],[{'call',_cor2,{'var',_cor2,_cor5},FNAs}|[]]}|[]]}}
									end
								    in  let <CF> =
									    %% Line 2314
									    {'clause',_cor2,As,[],[{'cons',_cor2,_cor7,_cor26}|[]]}
									in  %% Line 2315
									    [CL|[CF|[]]]
'generator'/13 =
    %% Line 2317
    fun (_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <ComAs> =
	    %% Line 2318
	    apply 'abst_vars'/2
		([_cor5|[_cor4|[_cor3|[]]]], _cor1)
	in  let <InitC> =
		%% Line 2319
		apply 'generator_init'/9
		    (_cor12, _cor1, _cor9, _cor5, _cor4, _cor3, _cor2, _cor6, _cor0)
	    in  let <_cor15> =
		    %% Line 2320
		    call 'erlang':'+'
			(_cor12, 1)
		in  let <_cor16> =
			%% Line 2320
			call 'erlang':'--'
			    (_cor11, [_cor9|[]])
		    in  let <_cor17> =
			    %% Line 2320
			    apply 'replace'/3
				(_cor16, _cor6, '_')
			in  let <_cor18> =
				%% Line 2320
				apply 'abst_vars'/2
				    (_cor17, _cor1)
			    in  let <_cor19> =
				    %% Line 2320
				    call 'erlang':'++'
					(ComAs, _cor18)
				in  let <As> =
					%% Line 2320
					[{'integer',_cor1,_cor15}|_cor19]
				    in  let <_cor21> =
					    %% Line 2322
					    call 'erlang':'+'
						(_cor2, 1)
					in  let <MatchS> =
						%% Line 2322
						apply 'next'/3
						    (_cor3, _cor21, _cor1)
					    in  let <_cor23> =
						    %% Line 2323
						    apply 'replace'/3
							([_cor9|[]], _cor6, _cor8)
						in  let <_cor24> =
							%% Line 2323
							apply 'abst_vars'/2
							    (_cor23, _cor1)
						    in  let <_cor25> =
							    %% Line 2323
							    call 'erlang':'++'
								(ComAs, _cor24)
							in  let <AsM0> =
								%% Line 2323
								[MatchS|_cor25]
							    in  let <AsM> =
								    %% Line 2324
								    apply 'pack_args'/3
									(AsM0, _cor1, _cor0)
								in  let <_cor28> =
									%% Line 2326
									call 'erlang':'+'
									    (_cor12, 1)
								    in  let <ContS> = {%% Line 2326
									     'integer',_cor1,_cor28}
									in  let <QIVs__GV> =
										%% Line 2327
										call 'erlang':'--'
										    (_cor11, [_cor9|[]])
									    in  let <_cor31> =
										    %% Line 2328
										    apply 'replace'/3
											(QIVs__GV, _cor6, 'nil')
										in  let <Tmp> =
											%% Line 2328
											apply 'replace'/3
											    ([_cor9|[]], _cor31, _cor8)
										    in  let <_cor33> =
											    %% Line 2329
											    apply 'abst_vars'/2
												(Tmp, _cor1)
											in  let <_cor34> =
												%% Line 2329
												call 'erlang':'++'
												    (ComAs, _cor33)
											    in  let <AsC> =
												    %% Line 2329
												    apply 'pack_args'/3
													([ContS|_cor34], _cor1, _cor0)
												in  let <DoneS> =
													%% Line 2331
													apply 'next'/3
													    (_cor3, _cor2, _cor1)
												    in  let <_cor37> =
													    %% Line 2332
													    apply 'replace'/3
														(_cor11, _cor6, 'nil')
													in  let <_cor38> =
														%% Line 2332
														apply 'abst_vars'/2
														    (_cor37, _cor1)
													    in  let <_cor39> =
														    %% Line 2332
														    call 'erlang':'++'
															(ComAs, _cor38)
														in  let <AsD0> =
															%% Line 2332
															[DoneS|_cor39]
														    in  let <AsD> =
															    %% Line 2333
															    apply 'pack_args'/3
																(AsD0, _cor1, _cor0)
															in  let <CsL> =
																%% Line 2335
																apply 'generator_list'/10
																    (_cor10, _cor9, _cor8, As, AsM, AsC, AsD, _cor4, _cor1, _cor0)
															    in  let <CsF> =
																    %% Line 2336
																    apply 'generator_cont'/11
																	(_cor10, _cor9, _cor8, _cor7, As, AsM, AsC, AsD, _cor4, _cor1, _cor0)
																in  let <_cor44> =
																	%% Line 2337
																	call 'erlang':'++'
																	    (CsL, CsF)
																    in  %% Line 2337
																	[InitC|_cor44]
'generator_init'/9 =
    %% Line 2339
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 2340
	    apply 'replace'/3
		([_cor6|[]], _cor1, '_')
	in  let <_cor10> =
		%% Line 2340
		[_cor5|[_cor4|[_cor3|_cor9]]]
	    in  let <As0> =
		    %% Line 2340
		    apply 'abst_vars'/2
			(_cor10, _cor7)
		in  let <As> =
			%% Line 2341
			apply 'pack_args'/3
			    ([{'integer',_cor7,_cor8}|As0], _cor7, _cor0)
		    in  let <_cor13> =
			    %% Line 2342
			    call 'erlang':'+'
				(_cor2, 2)
			in  let <Next> =
				%% Line 2342
				apply 'next'/3
				    (_cor3, _cor13, _cor7)
			    in  let <_cor15> =
				    %% Line 2343
				    call 'erlang':'+'
					(_cor8, 1)
				in  let <_cor16> =
					%% Line 2343
					apply 'replace'/3
					    ([{'var',_cor7,'_'}|[]], As0, Next)
				    in  let <NAs> =
					    %% Line 2343
					    apply 'pack_args'/3
						([{'integer',_cor7,_cor15}|_cor16], _cor7, _cor0)
					in  %% Line 2344
					    {'clause',_cor7,As,[],[{'call',_cor7,{'var',_cor7,_cor4},NAs}|[]]}
'generator_list'/10 =
    %% Line 2346
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 2347
	    apply 'replace'/3
		([{'var',_cor1,_cor8}|[]], _cor6, {'cons',_cor1,_cor9,{'var',_cor1,_cor7}})
	in  let <As1> =
		%% Line 2347
		apply 'pack_args'/3
		    (_cor10, _cor1, _cor0)
	    in  let <_cor12> =
		    %% Line 2348
		    apply 'replace'/3
			([{'var',_cor1,_cor8}|[]], _cor6, {'cons',_cor1,{'var',_cor1,'_'},{'var',_cor1,_cor7}})
		in  let <As2> =
			%% Line 2348
			apply 'pack_args'/3
			    (_cor12, _cor1, _cor0)
		    in  let <_cor14> =
			    %% Line 2349
			    apply 'replace'/3
				([{'var',_cor1,_cor8}|[]], _cor6, {'nil',_cor1})
			in  let <As3> =
				%% Line 2349
				apply 'pack_args'/3
				    (_cor14, _cor1, _cor0)
			    in  let <CM> =
				    %% Line 2350
				    {'clause',_cor1,As1,[],[{'call',_cor1,{'var',_cor1,_cor2},_cor5}|[]]}
				in  let <CC> =
					%% Line 2351
					{'clause',_cor1,As2,[],[{'call',_cor1,{'var',_cor1,_cor2},_cor4}|[]]}
				    in  let <CD> =
					    %% Line 2352
					    {'clause',_cor1,As3,[],[{'call',_cor1,{'var',_cor1,_cor2},_cor3}|[]]}
					in  %% Line 2353
					    [CM|[CC|[CD|[]]]]
'generator_cont'/11 =
    %% Line 2357
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <As> =
	    %% Line 2358
	    apply 'pack_args'/3
		(_cor6, _cor1, _cor0)
	in  let <CF1> =
		%% Line 2359
		{'cons',_cor1,_cor10,{'var',_cor1,_cor8}}
	    in  let <CF2> =
		    %% Line 2360
		    {'cons',_cor1,{'var',_cor1,'_'},{'var',_cor1,_cor8}}
		in  let <CF3> = {%% Line 2361
			 'nil',_cor1}
		    in  let <CF4> = {%% Line 2362
			     'var',_cor1,_cor7}
			in  let <CM> =
				%% Line 2363
				{'clause',_cor1,[CF1|[]],[],[{'call',_cor1,{'var',_cor1,_cor2},_cor5}|[]]}
			    in  let <CC> =
				    %% Line 2364
				    {'clause',_cor1,[CF2|[]],[],[{'call',_cor1,{'var',_cor1,_cor2},_cor4}|[]]}
				in  let <CD> =
					%% Line 2365
					{'clause',_cor1,[CF3|[]],[],[{'call',_cor1,{'var',_cor1,_cor2},_cor3}|[]]}
				    in  let <CE> =
					    %% Line 2366
					    {'clause',_cor1,[CF4|[]],[],[CF4|[]]}
					in  let <Cls> =
						%% Line 2367
						[CM|[CC|[CD|[CE|[]]]]]
					    in  let <B> =
						    %% Line 2368
						    {'case',_cor1,{'call',_cor1,{'var',_cor1,_cor9},[]},Cls}
						in  %% Line 2369
						    [{'clause',_cor1,As,[],[B|[]]}|[]]
'filter'/10 =
    %% Line 2371
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <IAs> =
	    %% Line 2372
	    apply 'replace'/3
		(_cor7, _cor1, '_')
	in  let <_cor11> =
		%% Line 2373
		[_cor5|[_cor4|[_cor3|IAs]]]
	    in  let <_cor12> =
		    %% Line 2373
		    apply 'abst_vars'/2
			(_cor11, _cor8)
		in  let <As> =
			%% Line 2373
			apply 'pack_args'/3
			    ([{'integer',_cor8,_cor6}|_cor12], _cor8, _cor0)
		    in  let <_cor14> =
			    %% Line 2374
			    [_cor5|[_cor4|[_cor3|_cor1]]]
			in  let <NAs> =
				%% Line 2374
				apply 'abst_vars'/2
				    (_cor14, _cor8)
			    in  let <_cor16> =
				    %% Line 2375
				    call 'erlang':'+'
					(_cor2, 1)
				in  let <TNext> =
					%% Line 2375
					apply 'next'/3
					    (_cor3, _cor16, _cor8)
				    in  let <FNext> =
					    %% Line 2376
					    apply 'next'/3
						(_cor3, _cor2, _cor8)
					in  let <NAsT> =
						%% Line 2377
						apply 'pack_args'/3
						    ([TNext|NAs], _cor8, _cor0)
					    in  let <NAsF> =
						    %% Line 2378
						    apply 'pack_args'/3
							([FNext|NAs], _cor8, _cor0)
						in  %% Line 2382
						    ( case _cor0 of
							( <( {'state',_cor40,_cor41,_rec22,_cor42}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_cor28> =
								  case call 'erl_lint':'is_guard_test'
									   (_cor9, _rec22) of
								    %% Line 2383
								    <'true'> when 'true' ->
									let <CT> =
									    %% Line 2384
									    {'clause',_cor8,[],[[_cor9|[]]|[]],[{'call',_cor8,{'var',_cor8,_cor4},NAsT}|[]]}
									in  let <CF> =
										%% Line 2385
										{'clause',_cor8,[],[[{'atom',_cor8,'true'}|[]]|[]],[{'call',_cor8,{'var',_cor8,_cor4},NAsF}|[]]}
									    in  %% Line 2386
										[{'if',_cor8,[CT|[CF|[]]]}|[]]
								    %% Line 2387
								    <'false'> when 'true' ->
									let <CT> =
									    %% Line 2388
									    {'clause',_cor8,[{'atom',_cor8,'true'}|[]],[],[{'call',_cor8,{'var',_cor8,_cor4},NAsT}|[]]}
									in  let <CF> =
										%% Line 2389
										{'clause',_cor8,[{'atom',_cor8,'false'}|[]],[],[{'call',_cor8,{'var',_cor8,_cor4},NAsF}|[]]}
									    in  %% Line 2390
										[{'case',_cor8,_cor9,[CT|[CF|[]]]}|[]]
								    ( <_cor27> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor27})
								      -| ['compiler_generated'] )
								  end
							      in  %% Line 2392
								  [{'clause',_cor8,As,[],_cor28}|[]]
							  -| ['compiler_generated'] )
							( <_cor43> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','state'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
'pack_args'/3 =
    %% Line 2394
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2395
	case apply 'split_args'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 2396
	  <{ArgsL,ArgsT}> when 'true' ->
	      %% Line 2397
	      call 'erlang':'++'
		  (ArgsL, [ArgsT|[]])
	  %% Line 2398
	  <_cor7> when 'true' ->
	      _cor2
	end
'split_args'/3 =
    %% Line 2402
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Args,L,State = {'state',_cor21,_cor22,_cor23,_cor24}>
	      when ( try
		      let <_cor8> =
			  call 'erlang':'length'
			      (Args)
		      in  call 'erlang':'>'
			      (_cor8, _cor22)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_cor16> =
		  %% Line 2403
		  call 'erlang':'-'
		      (_cor22, 1)
	      in  let <_cor17> =
		      %% Line 2403
		      call 'lists':'sublist'
			  (Args, _cor16)
		  in  let <_cor12> =
			  %% Line 2404
			  call 'erlang':'-'
			      (_cor22, 1)
		      in  let <_cor13> =
			      %% Line 2404
			      call 'lists':'nthtail'
				  (_cor12, Args)
			  in  %% Line 2403
			      {_cor17,%% Line 2404
				      {'tuple',L,_cor13}}
	  %% Line 2405
	  <Args,_X_L,_X_State> when 'true' ->
	      %% Line 2406
	      Args
	end
'replace'/3 =
    %% Line 2410
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2411
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[%% Line 2414
			  E|_cor4]> when 'true' ->
			    let <_cor7> =
				case call 'lists':'member'
					 (E, _cor2) of
				  %% Line 2412
				  <'true'> when 'true' ->
				      _cor0
				  %% Line 2413
				  <'false'> when 'true' ->
				      E
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor8> =
				    %% Line 2414
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [_cor7|_cor8]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'is_list_c'/2 =
    %% Line 2416
    fun (_cor1,_cor0) ->
	%% Line 2417
	{'call',_cor0,{'atom',_cor0,'is_list'},[{'var',_cor0,_cor1}|[]]}
'next'/3 =
    %% Line 2419
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2420
	{'call',_cor0,{'atom',_cor0,'element'},[{'integer',_cor0,_cor1}|[{'var',_cor0,_cor2}|[]]]}
'aux_vars'/3 =
    %% Line 2422
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2423
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[Name|_cor4]> when 'true' ->
			    let <_cor6> =
				apply 'aux_var'/5
				    (Name, _cor1, 0, 1, _cor0)
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'aux_var'/5 =
    %% Line 2425
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 2426
	    call 'lists':'concat'
		([_cor4|[_cor3|['_'|[_cor2|['_']]]]])
	in  %% Line 2426
	    call 'qlc':'aux_name'
		(_cor5, _cor1, _cor0)
'no_compiler_warning'/1 =
    %% Line 2428
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 2429
	    ( fun (_cor2) ->
		  let <_cor1> =
		      call 'erlang':'abs'
			  (_cor2)
		  in  call 'erlang':'-'
			  (_cor1)
	      -| [{'id',{0,0,'-no_compiler_warning/1-fun-0-'}}] )
	in  %% Line 2429
	    call 'erl_parse':'set_line'
		(_cor0, _cor4)
'abs_loc'/1 =
    %% Line 2431
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2432
	    ( fun (_cor1) ->
		  call 'erlang':'abs'
		      (_cor1)
	      -| [{'id',{0,0,'-abs_loc/1-fun-0-'}}] )
	in  let <_cor4> =
		%% Line 2432
		call 'erl_parse':'set_line'
		    (_cor0, _cor3)
	    in  %% Line 2432
		apply 'loc'/1
		    (_cor4)
'loc'/1 =
    %% Line 2434
    fun (_cor0) ->
	%% Line 2435
	case call 'erl_parse':'get_attribute'
		 (_cor0, 'location') of
	  <{'location',Location}> when 'true' ->
	      %% Line 2436
	      Location
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'list2op'/2 =
    %% Line 2438
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|[]],_X_Op> when 'true' ->
	      %% Line 2439
	      E
	  %% Line 2440
	  <[E|Es],Op> when 'true' ->
	      let <_cor2> =
		  %% Line 2441
		  apply 'list2op'/2
		      (Es, Op)
	      in  %% Line 2441
		  {'op',0,Op,E,_cor2}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'list2op',2}}] )
	    -| ['compiler_generated'] )
	end
'qual_fold'/5 =
    %% Line 2445
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <F> =
	    %% Line 2446
	    ( fun (_cor8,_cor7,_cor6) ->
		  case <_cor8,_cor7,_cor6> of
		    <Id,{'lc',L,E,Qs0},GA0> when 'true' ->
			%% Line 2447
			case apply 'qual_fold'/7
				 (Qs0, _cor4, GA0, _cor2, Id, 1, []) of
			  <{Qs,GA,_X_NA}> when 'true' ->
			      %% Line 2448
			      {{'lc',L,E,Qs},GA}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    %% Line 2449
		    <_X_Id,Expr,GA> when 'true' ->
			%% Line 2450
			{Expr,GA}
		  end
	      -| [{'id',{0,0,'-qual_fold/5-fun-0-'}}] )
	in  %% Line 2452
	    apply 'qlc_mapfold'/4
		(F, _cor3, _cor1, _cor0)
'qual_fold'/7 =
    %% Line 2454
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Q0|Qs],F,GA0,A0,Id,No,NQs> when 'true' ->
	      let <QId> =
		  %% Line 2455
		  apply 'qid'/2
		      (Id, No)
	      in  %% Line 2456
		  case apply F
			   (QId, Q0, GA0, A0) of
		    <{Q,GA,A}> when 'true' ->
			let <_cor9> =
			    %% Line 2457
			    call 'erlang':'+'
				(No, 1)
			in  %% Line 2457
			    apply 'qual_fold'/7
				(Qs, F, GA, A, Id, _cor9, [Q|NQs])
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2458
	  <[],_X_F,GA,A,_X_Id,_X_No,NQs> when 'true' ->
	      let <_cor10> =
		  %% Line 2459
		  call 'lists':'reverse'
		      (NQs)
	      in  %% Line 2459
		  {_cor10,GA,A}
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'qual_fold',7}}] )
	    -| ['compiler_generated'] )
	end
'qlc_mapfold'/4 =
    %% Line 2461
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2462
	( case _cor0 of
	    ( <( {'state',_rec25,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'qlcmf'/5
			   (_cor1, _cor3, _rec25, _cor2, 1) of
		    <{Forms,A,_X_NNo}> when 'true' ->
			do  %% Line 2463
			    call 'erlang':'erase'
				('qlc_current_file')
			    %% Line 2464
			    {Forms,A}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'qlcmf'/5 =
    %% Line 2466
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E0|Es0],F,Imp,A0,No0> when 'true' ->
	      %% Line 2467
	      case apply 'qlcmf'/5
		       (E0, F, Imp, A0, No0) of
		<{E,A1,No1}> when 'true' ->
		    %% Line 2468
		    case apply 'qlcmf'/5
			     (Es0, F, Imp, A1, No1) of
		      <{Es,A,No}> when 'true' ->
			  %% Line 2469
			  {[E|Es],A,No}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2470
	  <{'call',L1,{'remote',L2,{'atom',L3,'qlc'},{'atom',L4,'q'}},[LC0|Os0]},F,Imp,A0,No0>
	      when try
		    let <_cor7> =
			call 'erlang':'length'
			    (Os0)
		    in  call 'erlang':'<'
			    (_cor7, 2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2471
	      case apply 'qlcmf'/5
		       (Os0, F, Imp, A0, No0) of
		<{Os,A1,No1}> when 'true' ->
		    %% Line 2472
		    case apply 'qlcmf'/5
			     (LC0, F, Imp, A1, No1) of
		      <{LC,A2,No}> when 'true' ->
			  let <NL> =
			      %% Line 2473
			      apply 'make_lcid'/2
				  (L1, No)
			  in  %% Line 2474
			      case apply F
				       (NL, LC, A2) of
				<{T,A}> when 'true' ->
				    let <_cor12> =
					%% Line 2475
					call 'erlang':'+'
					    (No, 1)
				    in  %% Line 2475
					{{'call',L1,{'remote',L2,{'atom',L3,'qlc'},{'atom',L4,'q'}},[T|Os]},A,_cor12}
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor11})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2476
	  <{'call',L,{'atom',L2,'q'},[LC0|Os0]},F,Imp = 'true',A0,No0>
	      when try
		    let <_cor13> =
			call 'erlang':'length'
			    (Os0)
		    in  call 'erlang':'<'
			    (_cor13, 2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2477
	      case apply 'qlcmf'/5
		       (Os0, F, Imp, A0, No0) of
		<{Os,A1,No1}> when 'true' ->
		    %% Line 2478
		    case apply 'qlcmf'/5
			     (LC0, F, Imp, A1, No1) of
		      <{LC,A2,No}> when 'true' ->
			  let <NL> =
			      %% Line 2479
			      apply 'make_lcid'/2
				  (L, No)
			  in  %% Line 2480
			      case apply F
				       (NL, LC, A2) of
				<{T,A}> when 'true' ->
				    let <_cor18> =
					%% Line 2481
					call 'erlang':'+'
					    (No, 1)
				    in  %% Line 2481
					{{'call',L,{'atom',L2,'q'},[T|Os]},A,_cor18}
				( <_cor17> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor17})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor15})
			-| ['compiler_generated'] )
		    end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2482
	  <Attr = {'attribute',_X_L,'file',{File,_X_Line}},_X_F,_X_Imp,A,No> when 'true' ->
	      do  %% Line 2483
		  call 'erlang':'put'
		      ('qlc_current_file', File)
		  %% Line 2484
		  {Attr,A,No}
	  %% Line 2485
	  <T,F,Imp,A0,No0>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor19> =
		  %% Line 2486
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 2486
		  case apply 'qlcmf'/5
			   (_cor19, F, Imp, A0, No0) of
		    <{TL,A,No}> when 'true' ->
			let <_cor21> =
			    %% Line 2487
			    call 'erlang':'list_to_tuple'
				(TL)
			in  %% Line 2487
			    {_cor21,A,No}
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor20})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2488
	  <T,_X_F,_X_Imp,A,No> when 'true' ->
	      %% Line 2489
	      {T,A,No}
	end
'occ_vars'/1 =
    %% Line 2491
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2492
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'var',_X_L,V}> when 'true' ->
			V
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-occ_vars/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-occ_vars/1-fun-0-'}}] )
	in  %% Line 2492
	    call 'qlc':'var_fold'
		(_cor3, [], _cor0)
'no_shadows'/2 =
    %% Line 2494
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2513
	    call 'qlc':'vars'
		(_cor1)
	in  let <_cor3> =
		%% Line 2513
		call 'ordsets':'to_list'
		    (_cor2)
	    in  let <AllVars> =
		    %% Line 2513
		    call 'sets':'from_list'
			(_cor3)
		in  let <VFun> =
			%% Line 2515
			( fun (_cor7,_cor6,_cor5) ->
			      apply 'nos'/2
				  (_cor6, _cor5)
			  -| [{'id',{0,0,'-no_shadows/2-fun-0-'}}] )
		    in  let <LI> =
			    %% Line 2516
			    call 'ets':'new'
				('qlc', [])
			in  let <UV> =
				%% Line 2517
				call 'ets':'new'
				    ('qlc', [])
			    in  let <D0> =
				    %% Line 2518
				    call 'dict':'new'
					()
				in  let <S1> =
					%% Line 2519
					{LI,D0,UV,AllVars,[]}
				    in  let <_X_> =
					    %% Line 2520
					    apply 'qlc_mapfold'/4
						(VFun, S1, _cor1, _cor0)
					in  let <Singletons> =
						%% Line 2522
						call 'ets':'select'
						    (UV, [{{'$1',0},[],['$1']}])
					    in  %% Line 2524
						case call 'ets':'delete_all_objects'
							 (LI) of
						  <'true'> when 'true' ->
						      %% Line 2525
						      case call 'ets':'delete_all_objects'
							       (UV) of
							<'true'> when 'true' ->
							    let <S2> =
								%% Line 2527
								{LI,D0,UV,AllVars,Singletons}
							    in  %% Line 2528
								case apply 'qlc_mapfold'/4
									 (VFun, S2, _cor1, _cor0) of
								  <{Forms,_cor26}> when 'true' ->
								      %% Line 2529
								      case call 'ets':'delete'
									       (LI) of
									<'true'> when 'true' ->
									    %% Line 2530
									    case call 'ets':'delete'
										     (UV) of
									      <'true'> when 'true' ->
										  %% Line 2531
										  Forms
									      ( <_cor23> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_cor23})
										-| ['compiler_generated'] )
									    end
									( <_cor22> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor22})
									  -| ['compiler_generated'] )
								      end
								  ( <_cor21> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor21})
								    -| ['compiler_generated'] )
								end
							( <_cor19> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor19})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor18> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor18})
						    -| ['compiler_generated'] )
						end
'nos'/2 =
    %% Line 2533
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E0|Es0],S0> when 'true' ->
	      %% Line 2534
	      case apply 'nos'/2
		       (E0, S0) of
		<{E,S1}> when 'true' ->
		    %% Line 2535
		    case apply 'nos'/2
			     (Es0, S1) of
		      <{Es,S}> when 'true' ->
			  %% Line 2536
			  {[E|Es],S}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2537
	  <{'fun',L,{'clauses',Cs}},S> when 'true' ->
	      let <_cor10> =
		  %% Line 2538
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[%% Line 2542
				    {'clause',Ln,H0,G0,B0}|_cor5]> when 'true' ->
				      %% Line 2539
				      case apply 'nos_pattern'/2
					       (H0, S) of
					<{H,S1}> when 'true' ->
					    %% Line 2540
					    case apply 'nos'/2
						     ([G0|[B0|[]]], S1) of
					      <{[G|[B|[]]],_cor41}> when 'true' ->
						  let <_cor9> =
						      %% Line 2542
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [%% Line 2541
							 {'clause',Ln,H,G,B}|_cor9]
							-| ['compiler_generated'] )
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor7})
					  -| ['compiler_generated'] )
				      end
				  ( <[_cor4|_cor5]> when 'true' ->
					%% Line 2542
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 2542
			     Cs)
		    -| ['list_comprehension'] )
	      in  %% Line 2543
		  {{'fun',L,{'clauses',_cor10}},S}
	  %% Line 2544
	  <{'named_fun',Loc,Name,Cs},S> when 'true' ->
	      let <_cor13> =
		  %% Line 2545
		  case Name of
		    %% Line 2546
		    <'_'> when 'true' ->
			%% Line 2547
			S
		    %% Line 2548
		    <_cor42> when 'true' ->
			%% Line 2549
			apply 'nos_pattern'/2
			    ({'var',Loc,Name}, S)
		  end
	      in  %% Line 2545
		  case _cor13 of
		    <{{'var',NLoc,NName},S1}> when 'true' ->
			let <_cor21> =
			    %% Line 2551
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor17) ->
					  case _cor17 of
					    <[%% Line 2555
					      {'clause',CLoc,H0,G0,B0}|_cor16]> when 'true' ->
						%% Line 2552
						case apply 'nos_pattern'/2
							 (H0, S1) of
						  <{H,S2}> when 'true' ->
						      %% Line 2553
						      case apply 'nos'/2
							       ([G0|[B0|[]]], S2) of
							<{[G|[B|[]]],_cor43}> when 'true' ->
							    let <_cor20> =
								%% Line 2555
								apply 'lc$^1'/1
								    (_cor16)
							    in  ( [%% Line 2554
								   {'clause',CLoc,H,G,B}|_cor20]
								  -| ['compiler_generated'] )
							( <_cor19> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor19})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor18> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor18})
						    -| ['compiler_generated'] )
						end
					    ( <[_cor15|_cor16]> when 'true' ->
						  %% Line 2555
						  apply 'lc$^1'/1
						      (_cor16)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor17> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor17})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (%% Line 2555
				       Cs)
			      -| ['list_comprehension'] )
			in  %% Line 2556
			    {{'named_fun',NLoc,NName,_cor21},S}
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2557
	  <{'lc',L,E0,Qs0},S> when 'true' ->
	      let <F> =
		  %% Line 2561
		  ( fun (_cor28,_cor27) ->
			case <_cor28,_cor27> of
			  <{T,Ln,P0,LE0},QS0>
			      when let <_cor23> =
				    call 'erlang':'=:='
					(T, 'b_generate')
				in  let <_cor24> =
					call 'erlang':'=:='
					    (T, 'generate')
				    in  call 'erlang':'or'
					    (_cor23, _cor24) ->
			      %% Line 2562
			      case apply 'nos'/2
				       (LE0, QS0) of
				<{LE,_cor44}> when 'true' ->
				    %% Line 2563
				    case apply 'nos_pattern'/2
					     (P0, QS0) of
				      <{P,QS}> when 'true' ->
					  %% Line 2564
					  {{T,Ln,P,LE},QS}
				      ( <_cor26> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor26})
					-| ['compiler_generated'] )
				    end
				( <_cor25> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor25})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2565
			  <Filter,QS> when 'true' ->
			      %% Line 2566
			      apply 'nos'/2
				  (Filter, QS)
			end
		    -| [{'id',{0,0,'-nos/2-fun-0-'}}] )
	      in  %% Line 2568
		  case call 'lists':'mapfoldl'
			   (F, S, Qs0) of
		    <{Qs,S1}> when 'true' ->
			%% Line 2569
			case apply 'nos'/2
				 (E0, S1) of
			  <{E,_cor45}> when 'true' ->
			      %% Line 2570
			      {{'lc',L,E,Qs},S}
			  ( <_cor33> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor33})
			    -| ['compiler_generated'] )
			end
		    ( <_cor32> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor32})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2571
	  <Var = {'var',L,V},S = {_X_LI,Vs,UV,_X_A,_X_Sg}>
	      when call 'erlang':'=/='
		    (V,
		     '_') ->
	      %% Line 2572
	      case apply 'used_var'/3
		       (V, Vs, UV) of
		%% Line 2573
		<{'true',VN}> when 'true' ->
		    let <NL> =
			%% Line 2574
			apply 'nos_var'/2
			    (L, V)
		    in  %% Line 2575
			{{'var',NL,VN},S}
		%% Line 2576
		<'false'> when 'true' ->
		    %% Line 2577
		    {Var,S}
		( <_cor35> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor35})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2579
	  <T,S0>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor36> =
		  %% Line 2580
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 2580
		  case apply 'nos'/2
			   (_cor36, S0) of
		    <{TL,S}> when 'true' ->
			let <_cor38> =
			    %% Line 2581
			    call 'erlang':'list_to_tuple'
				(TL)
			in  %% Line 2581
			    {_cor38,S}
		    ( <_cor37> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor37})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2582
	  <T,S> when 'true' ->
	      %% Line 2583
	      {T,S}
	end
'nos_pattern'/2 =
    %% Line 2585
    fun (_cor1,_cor0) ->
	%% Line 2586
	case apply 'nos_pattern'/3
		 (_cor1, _cor0, []) of
	  <{T,NS,_cor5}> when 'true' ->
	      %% Line 2587
	      {T,NS}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'nos_pattern'/3 =
    %% Line 2589
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[P0|Ps0],S0,PVs0> when 'true' ->
	      %% Line 2590
	      case apply 'nos_pattern'/3
		       (P0, S0, PVs0) of
		<{P,S1,PVs1}> when 'true' ->
		    %% Line 2591
		    case apply 'nos_pattern'/3
			     (Ps0, S1, PVs1) of
		      <{Ps,S,PVs}> when 'true' ->
			  %% Line 2592
			  {[P|Ps],S,PVs}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2593
	  <{'var',L,V},{LI,Vs0,UV,A,Sg},PVs0>
	      when call 'erlang':'=/='
		    (V,
		     '_') ->
	      let <Name,Vs,PVs> =
		  %% Line 2595
		  case call 'lists':'keyfind'
			   (V, 1, PVs0) of
		    %% Line 2596
		    <{_cor20,VN}>
			when call 'erlang':'=:='
			      (_cor20,
			       V) ->
			let <_X_> =
			    %% Line 2597
			    apply 'used_var'/3
				(V, Vs0, UV)
			in  %% Line 2598
			    <VN,Vs0,PVs0>
		    %% Line 2599
		    <'false'> when 'true' ->
			%% Line 2600
			case apply 'next_var'/5
				 (V, Vs0, A, LI, UV) of
			  <{VN,Vs1}> when 'true' ->
			      let <_cor8> =
				  %% Line 2601
				  case call 'lists':'member'
					   (VN, Sg) of
				    %% Line 2602
				    <'true'> when 'true' ->
					'_'
				    %% Line 2603
				    <'false'> when 'true' ->
					VN
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
			      in  <_cor8,%% Line 2605
					 Vs1,%% Line 2605
					     [{V,VN}|PVs0]>
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  let <NL> =
		      %% Line 2607
		      apply 'nos_var'/2
			  (L, V)
		  in  %% Line 2608
		      {{'var',NL,Name},{LI,Vs,UV,A,Sg},PVs}
	  %% Line 2609
	  <T,S0,PVs0>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor14> =
		  %% Line 2610
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 2610
		  case apply 'nos_pattern'/3
			   (_cor14, S0, PVs0) of
		    <{TL,S,PVs}> when 'true' ->
			let <_cor16> =
			    %% Line 2611
			    call 'erlang':'list_to_tuple'
				(TL)
			in  %% Line 2611
			    {_cor16,S,PVs}
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2612
	  <T,S,PVs> when 'true' ->
	      %% Line 2613
	      {T,S,PVs}
	end
'nos_var'/2 =
    %% Line 2615
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2616
	    ( fun (_cor2) ->
		  {'nos',_cor0,_cor2}
	      -| [{'id',{0,0,'-nos_var/2-fun-0-'}}] )
	in  %% Line 2616
	    call 'erl_parse':'set_line'
		(_cor1, _cor4)
'used_var'/3 =
    %% Line 2618
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2619
	case call 'dict':'find'
		 (_cor2, _cor1) of
	  %% Line 2620
	  <{'ok',Value}> when 'true' ->
	      let <VN> =
		  %% Line 2621
		  call 'qlc':'name_suffix'
		      (_cor2, Value)
	      in  let <_X_> =
		      %% Line 2622
		      ( call 'ets':'update_counter'
			    (_cor0, VN, 1)
			-| ['result_not_wanted'] )
		  in  %% Line 2623
		      {'true',VN}
	  %% Line 2624
	  <'error'> when 'true' ->
	      'false'
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'next_var'/5 =
    %% Line 2627
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2628
	    case call 'ets':'lookup'
		     (_cor1, _cor4) of
	      %% Line 2629
	      <[{_cor18,Value}|[]]>
		  when call 'erlang':'=:='
			(_cor18,
			 _cor4) ->
		  call 'erlang':'+'
		      (Value, 1)
	      %% Line 2630
	      <[]> when 'true' ->
		  1
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	in  %% Line 2632
	    case call 'ets':'insert'
		     (_cor1, {_cor4,_cor6}) of
	      <'true'> when 'true' ->
		  let <VN> =
		      %% Line 2633
		      call 'qlc':'name_suffix'
			  (_cor4, _cor6)
		  in  %% Line 2634
		      case call 'sets':'is_element'
			       (VN, _cor2) of
			%% Line 2635
			<'true'> when 'true' ->
			    apply 'next_var'/5
				(_cor4, _cor3, _cor2, _cor1, _cor0)
			%% Line 2636
			<'false'> when 'true' ->
			    case call 'ets':'insert'
				     (_cor0, {VN,0}) of
			      <'true'> when 'true' ->
				  let <NVs> =
				      %% Line 2637
				      call 'dict':'store'
					  (_cor4, _cor6, _cor3)
				  in  %% Line 2638
				      {VN,NVs}
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor8})
		-| ['compiler_generated'] )
	    end
'undo_no_shadows'/1 =
    %% Line 2641
    fun (_cor0) ->
	%% Line 2642
	apply 'var_map'/2
	    (( 'undo_no_shadows1'/1
	       -| [{'id',{0,0,'-undo_no_shadows/1-fun-0-'}}] ), _cor0)
'undo_no_shadows1'/1 =
    %% Line 2644
    fun (_cor0) ->
	case _cor0 of
	  <Var = {'var',L,_cor7}> when 'true' ->
	      %% Line 2645
	      case call 'erl_parse':'get_attribute'
		       (L, 'line') of
		%% Line 2646
		<{'line',{'nos',V,_X_VL}}> when 'true' ->
		    let <_cor3> =
			%% Line 2647
			( fun (_cor1) ->
			      case _cor1 of
				<{'nos',_X_V,VL}> when 'true' ->
				    VL
				( <_cor2> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor2})
					-| [{'function_name',{'-undo_no_shadows1/1-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-undo_no_shadows1/1-fun-0-'}}] )
		    in  let <NL> =
			    %% Line 2647
			    call 'erl_parse':'set_line'
				(L, _cor3)
			in  %% Line 2648
			    apply 'undo_no_shadows1'/1
				({'var',NL,V})
		%% Line 2649
		<_X_Else> when 'true' ->
		    %% Line 2650
		    Var
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'undo_no_shadows1',1}}] )
	    -| ['compiler_generated'] )
	end
'restore_line_numbers'/1 =
    %% Line 2653
    fun (_cor0) ->
	%% Line 2654
	apply 'var_map'/2
	    (( 'restore_line_numbers1'/1
	       -| [{'id',{0,0,'-restore_line_numbers/1-fun-0-'}}] ), _cor0)
'restore_line_numbers1'/1 =
    %% Line 2656
    fun (_cor0) ->
	case _cor0 of
	  <Var = {'var',L,V}> when 'true' ->
	      %% Line 2657
	      case call 'erl_parse':'get_attribute'
		       (L, 'line') of
		%% Line 2658
		<{'line',{'nos',_cor7,_cor8}}> when 'true' ->
		    let <_cor3> =
			%% Line 2659
			( fun (_cor1) ->
			      case _cor1 of
				<{'nos',_X_V,VL}> when 'true' ->
				    VL
				( <_cor2> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor2})
					-| [{'function_name',{'-restore_line_numbers1/1-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-restore_line_numbers1/1-fun-0-'}}] )
		    in  let <NL> =
			    %% Line 2659
			    call 'erl_parse':'set_line'
				(L, _cor3)
			in  %% Line 2660
			    apply 'restore_line_numbers1'/1
				({'var',NL,V})
		%% Line 2661
		<_X_Else> when 'true' ->
		    %% Line 2662
		    Var
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'restore_line_numbers1',1}}] )
	    -| ['compiler_generated'] )
	end
'make_lcid'/2 =
    %% Line 2668
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Attrs,No>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(No)
		in  let <_cor3> =
			call 'erlang':'>'
			    (No, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <F> =
		  %% Line 2669
		  ( fun (_cor12) ->
			case _cor12 of
			  <Line>
			      when let <_cor4> =
				    call 'erlang':'is_integer'
					(_cor12)
				in  let <_cor6> =
					call 'erlang':'<'
					    (_cor12, 8388608)
				    in  call 'erlang':'and'
					    (_cor4, _cor6) ->
			      let <_cor11> =
				  %% Line 2670
				  apply 'sgn'/1
				      (Line)
			      in  let <_cor9> =
				      %% Line 2670
				      call 'erlang':'bsl'
					  (No, 23)
				  in  let <_cor7> =
					  %% Line 2670
					  apply 'sgn'/1
					      (Line)
				      in  let <_cor8> =
					      %% Line 2670
					      call 'erlang':'*'
						  (_cor7, Line)
					  in  let <_cor10> =
						  %% Line 2670
						  call 'erlang':'+'
						      (_cor9, _cor8)
					      in  %% Line 2670
						  call 'erlang':'*'
						      (_cor11, _cor10)
			  ( <_cor13> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor13})
				  -| [{'function_name',{'-make_lcid/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-make_lcid/2-fun-0-'}}] )
	      in  %% Line 2672
		  call 'erl_parse':'set_line'
		      (Attrs, F)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'make_lcid',2}}] )
	    -| ['compiler_generated'] )
	end
'is_lcid'/1 =
    %% Line 2674
    fun (_cor0) ->
	%% Line 2675
	try
	    %% Line 2676
	    case call 'erl_parse':'get_attribute'
		     (_cor0, 'line') of
	      <{'line',Id}> when 'true' ->
		  %% Line 2677
		  ( case <> of
		      ( <>
			    when call 'erlang':'is_integer'
				  (Id) ->
			    let <_cor4> =
				call 'erlang':'abs'
				    (Id)
			    in  call 'erlang':'>'
				    (_cor4, 8388608)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
	of <_cor6> ->
	    _cor6
	catch <_cor9,_cor8,_cor7> ->
	    %% Line 2679
	    'false'
'get_lcid_no'/1 =
    %% Line 2682
    fun (_cor0) ->
	%% Line 2683
	case call 'erl_parse':'get_attribute'
		 (_cor0, 'line') of
	  <{'line',Id}> when 'true' ->
	      let <_cor2> =
		  %% Line 2684
		  call 'erlang':'abs'
		      (Id)
	      in  %% Line 2684
		  call 'erlang':'bsr'
		      (_cor2, 23)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'get_lcid_line'/1 =
    %% Line 2686
    fun (_cor0) ->
	%% Line 2687
	case call 'erl_parse':'get_attribute'
		 (_cor0, 'line') of
	  <{'line',Id}> when 'true' ->
	      let <_cor6> =
		  %% Line 2688
		  apply 'sgn'/1
		      (Id)
	      in  let <_cor4> =
		      %% Line 2688
		      call 'erlang':'abs'
			  (Id)
		  in  let <_cor5> =
			  %% Line 2688
			  call 'erlang':'band'
			      (_cor4, 8388607)
		      in  %% Line 2688
			  call 'erlang':'*'
			      (_cor6, _cor5)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'sgn'/1 =
    %% Line 2690
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'>='
		    (_cor0,
		     0) ->
	      %% Line 2691
	      1
	  %% Line 2692
	  <X>
	      when call 'erlang':'<'
		    (_cor0,
		     0) ->
	      -1
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'sgn',1}}] )
	    -| ['compiler_generated'] )
	end
'seq'/2 =
    %% Line 2695
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,E>
	      when try
		    let <_cor2> =
			call 'erlang':'-'
			    (S, E)
		    in  call 'erlang':'=:='
			    (_cor2, 1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2696
	      []
	  %% Line 2697
	  <S,E> when 'true' ->
	      %% Line 2698
	      call 'lists':'seq'
		  (S, E)
	end
'sublist'/2 =
    %% Line 2700
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,0> when 'true' ->
	      %% Line 2701
	      []
	  %% Line 2702
	  <L,N> when 'true' ->
	      %% Line 2703
	      call 'lists':'sublist'
		  (L, N)
	end
'qid'/2 =
    %% Line 2705
    fun (_cor1,_cor0) ->
	%% Line 2706
	{'qid',_cor1,_cor0}
'abst_vars'/2 =
    %% Line 2708
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[V|Vs],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2709
		  apply 'abst_vars'/2
		      (V, L)
	      in  let <_cor3> =
		      %% Line 2709
		      apply 'abst_vars'/2
			  (Vs, L)
		  in  %% Line 2709
		      [_cor2|_cor3]
	  %% Line 2710
	  <[],_X_L> when 'true' ->
	      %% Line 2711
	      []
	  %% Line 2712
	  <'nil',L> when 'true' ->
	      %% Line 2713
	      {'nil',L}
	  %% Line 2714
	  <V,L> when 'true' ->
	      %% Line 2715
	      {'var',L,V}
	end
'embed_vars'/2 =
    %% Line 2717
    fun (_cor1,_cor0) ->
	%% Line 2718
	apply 'embed_expr'/2
	    ({'tuple',_cor0,_cor1}, _cor0)
'embed_expr'/2 =
    %% Line 2721
    fun (_cor1,_cor0) ->
	%% Line 2722
	{'lc',_cor0,_cor1,[{'generate',_cor0,{'var',_cor0,'_'},{'nil',_cor0}}|[]]}
'var2const'/1 =
    %% Line 2725
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2726
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'var',L,V}> when 'true' ->
			{'atom',L,V}
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-var2const/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-var2const/1-fun-0-'}}] )
	in  %% Line 2726
	    apply 'var_map'/2
		(_cor3, _cor0)
'var_map'/2 =
    %% Line 2728
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,V = {'var',_cor10,_cor11}> when 'true' ->
	      %% Line 2729
	      apply F
		  (V)
	  %% Line 2730
	  <F,{'named_fun',NLoc,NName,Cs}> when 'true' ->
	      %% Line 2731
	      case apply F
		       ({'var',NLoc,NName}) of
		<{'var',Loc,Name}> when 'true' ->
		    let <_cor3> =
			%% Line 2732
			apply 'var_map'/2
			    (F, Cs)
		    in  %% Line 2732
			{'named_fun',Loc,Name,_cor3}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2733
	  <F,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor4> =
		  %% Line 2734
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor5> =
		      %% Line 2734
		      apply 'var_map'/2
			  (F, _cor4)
		  in  %% Line 2734
		      call 'erlang':'list_to_tuple'
			  (_cor5)
	  %% Line 2735
	  <F,[E|Es]> when 'true' ->
	      let <_cor6> =
		  %% Line 2736
		  apply 'var_map'/2
		      (F, E)
	      in  let <_cor7> =
		      %% Line 2736
		      apply 'var_map'/2
			  (F, Es)
		  in  %% Line 2736
		      [_cor6|_cor7]
	  %% Line 2737
	  <_X_F,E> when 'true' ->
	      %% Line 2738
	      E
	end
'var_mapfold'/3 =
    %% Line 2740
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,A,V = {'var',_cor11,_cor12}> when 'true' ->
	      %% Line 2741
	      apply F
		  (V, A)
	  %% Line 2742
	  <F,A0,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor3> =
		  %% Line 2743
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 2743
		  case apply 'var_mapfold'/3
			   (F, A0, _cor3) of
		    <{L,A}> when 'true' ->
			let <_cor5> =
			    %% Line 2744
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 2744
			    {_cor5,A}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2745
	  <F,A0,[E0|Es0]> when 'true' ->
	      %% Line 2746
	      case apply 'var_mapfold'/3
		       (F, A0, E0) of
		<{E,A1}> when 'true' ->
		    %% Line 2747
		    case apply 'var_mapfold'/3
			     (F, A1, Es0) of
		      <{Es,A}> when 'true' ->
			  %% Line 2748
			  {[E|Es],A}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2749
	  <_X_F,A,E> when 'true' ->
	      %% Line 2750
	      {E,A}
	end
'family_list'/1 =
    %% Line 2752
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2753
	    apply 'family'/1
		(_cor0)
	in  %% Line 2753
	    call 'sofs':'to_external'
		(_cor1)
'family'/1 =
    %% Line 2755
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2756
	    call 'sofs':'relation'
		(_cor0)
	in  %% Line 2756
	    call 'sofs':'relation_to_family'
		(_cor1)
'display_forms'/1 =
    %% Line 2766
    fun (_cor0) ->
	%% Line 2767
	'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('qlc_pt')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('qlc_pt', _cor0)
end