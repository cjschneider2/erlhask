module 'proc_lib' ['format'/1,
		   'format'/2,
		   'hibernate'/3,
		   'init_ack'/1,
		   'init_ack'/2,
		   'init_p'/3,
		   'init_p'/5,
		   'initial_call'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'spawn'/1,
		   'spawn'/2,
		   'spawn'/3,
		   'spawn'/4,
		   'spawn_link'/1,
		   'spawn_link'/2,
		   'spawn_link'/3,
		   'spawn_link'/4,
		   'spawn_opt'/2,
		   'spawn_opt'/3,
		   'spawn_opt'/4,
		   'spawn_opt'/5,
		   'start'/3,
		   'start'/4,
		   'start'/5,
		   'start_link'/3,
		   'start_link'/4,
		   'start_link'/5,
		   'translate_initial_call'/1,
		   'wake_up'/3]
    attributes [%% Line 38
		'export_type' =
		    %% Line 38
		    [{'spawn_option',0}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'priority_level',{'type',42,'union',[{'atom',42,'high'}|[{'atom',42,'low'}|[{'atom',42,'max'}|[{'atom',42,'normal'}]]]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'spawn_option',{'type',43,'union',[{'atom',43,'link'}|[{'atom',44,'monitor'}|[{'type',45,'tuple',[{'atom',45,'priority'}|[{'type',45,'priority_level',[]}]]}|[{'type',46,'tuple',[{'atom',46,'min_heap_size'}|[{'type',46,'non_neg_integer',[]}]]}|[{'type',47,'tuple',[{'atom',47,'min_bin_vheap_size'}|[{'type',47,'non_neg_integer',[]}]]}|[{'type',48,'tuple',[{'atom',48,'fullsweep_after'}|[{'type',48,'non_neg_integer',[]}]]}]]]]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'dict_or_pid',{'type',50,'union',[{'type',50,'pid',[]}|[{'paren_type',51,[{'ann_type',51,[{'var',51,'ProcInfo'}|[{'type',51,'list',[{'var',51,'_'}]}]]}]}|[{'type',52,'tuple',[{'ann_type',52,[{'var',52,'X'}|[{'type',52,'integer',[]}]]}|[{'ann_type',52,[{'var',52,'Y'}|[{'type',52,'integer',[]}]]}|[{'ann_type',52,[{'var',52,'Z'}|[{'type',52,'integer',[]}]]}]]]}]]]},[]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'spawn',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Fun'}]}|[{'type',56,'pid',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Fun'}|[{'type',57,'function',[]}]]]]}]]]}]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'spawn',3},[{'type',64,'bounded_fun',[{'type',64,'fun',[{'type',64,'product',[{'var',64,'Module'}|[{'var',64,'Function'}|[{'var',64,'Args'}]]]}|[{'type',64,'pid',[]}]]}|[[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Module'}|[{'type',65,'module',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Function'}|[{'type',66,'atom',[]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Args'}|[{'type',67,'list',[{'type',67,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'spawn_link',1},[{'type',74,'bounded_fun',[{'type',74,'fun',[{'type',74,'product',[{'var',74,'Fun'}]}|[{'type',74,'pid',[]}]]}|[[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'Fun'}|[{'type',75,'function',[]}]]]]}]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'spawn_link',3},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'Module'}|[{'var',82,'Function'}|[{'var',82,'Args'}]]]}|[{'type',82,'pid',[]}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Module'}|[{'type',83,'module',[]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Function'}|[{'type',84,'atom',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Args'}|[{'type',85,'list',[{'type',85,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'spawn',2},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Node'}|[{'var',92,'Fun'}]]}|[{'type',92,'pid',[]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Node'}|[{'type',93,'node',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Fun'}|[{'type',94,'function',[]}]]]]}]]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'spawn',4},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'Node'}|[{'var',101,'Module'}|[{'var',101,'Function'}|[{'var',101,'Args'}]]]]}|[{'type',101,'pid',[]}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Node'}|[{'type',102,'node',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'Module'}|[{'type',103,'module',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Function'}|[{'type',104,'atom',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Args'}|[{'type',105,'list',[{'type',105,'term',[]}]}]]]]}]]]]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'spawn_link',2},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'Node'}|[{'var',112,'Fun'}]]}|[{'type',112,'pid',[]}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Node'}|[{'type',113,'node',[]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Fun'}|[{'type',114,'function',[]}]]]]}]]]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'spawn_link',4},[{'type',121,'bounded_fun',[{'type',121,'fun',[{'type',121,'product',[{'var',121,'Node'}|[{'var',121,'Module'}|[{'var',121,'Function'}|[{'var',121,'Args'}]]]]}|[{'type',121,'pid',[]}]]}|[[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Node'}|[{'type',122,'node',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Module'}|[{'type',123,'module',[]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Function'}|[{'type',124,'atom',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'Args'}|[{'type',125,'list',[{'type',125,'term',[]}]}]]]]}]]]]]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'spawn_opt',2},[{'type',132,'bounded_fun',[{'type',132,'fun',[{'type',132,'product',[{'var',132,'Fun'}|[{'var',132,'SpawnOpts'}]]}|[{'type',132,'pid',[]}]]}|[[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Fun'}|[{'type',133,'function',[]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'SpawnOpts'}|[{'type',134,'list',[{'type',134,'spawn_option',[]}]}]]]]}]]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'spawn_opt',3},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'Node'}|[{'var',142,'Function'}|[{'var',142,'SpawnOpts'}]]]}|[{'type',142,'pid',[]}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Node'}|[{'type',143,'node',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Function'}|[{'type',144,'function',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'SpawnOpts'}|[{'type',145,'list',[{'type',145,'spawn_option',[]}]}]]]]}]]]]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'spawn_opt',4},[{'type',153,'bounded_fun',[{'type',153,'fun',[{'type',153,'product',[{'var',153,'Module'}|[{'var',153,'Function'}|[{'var',153,'Args'}|[{'var',153,'SpawnOpts'}]]]]}|[{'type',153,'pid',[]}]]}|[[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Module'}|[{'type',154,'module',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Function'}|[{'type',155,'atom',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Args'}|[{'type',156,'list',[{'type',156,'term',[]}]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'SpawnOpts'}|[{'type',157,'list',[{'type',157,'spawn_option',[]}]}]]]]}]]]]]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'spawn_opt',5},[{'type',165,'bounded_fun',[{'type',165,'fun',[{'type',165,'product',[{'var',165,'Node'}|[{'var',165,'Module'}|[{'var',165,'Function'}|[{'var',165,'Args'}|[{'var',165,'SpawnOpts'}]]]]]}|[{'type',165,'pid',[]}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Node'}|[{'type',166,'node',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Module'}|[{'type',167,'module',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Function'}|[{'type',168,'atom',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Args'}|[{'type',169,'list',[{'type',169,'term',[]}]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'SpawnOpts'}|[{'type',170,'list',[{'type',170,'spawn_option',[]}]}]]]]}]]]]]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'hibernate',3},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'Module'}|[{'var',199,'Function'}|[{'var',199,'Args'}]]]}|[{'type',199,'no_return',[]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Module'}|[{'type',200,'module',[]}]]]]}|[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'Function'}|[{'type',201,'atom',[]}]]]]}|[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'Args'}|[{'type',202,'list',[{'type',202,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'init_p',3},[{'type',215,'fun',[{'type',215,'product',[{'type',215,'pid',[]}|[{'type',215,'list',[{'type',215,'pid',[]}]}|[{'type',215,'function',[]}]]]}|[{'type',215,'term',[]}]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'init_p',5},[{'type',230,'fun',[{'type',230,'product',[{'type',230,'pid',[]}|[{'type',230,'list',[{'type',230,'pid',[]}]}|[{'type',230,'atom',[]}|[{'type',230,'atom',[]}|[{'type',230,'list',[{'type',230,'term',[]}]}]]]]]}|[{'type',230,'term',[]}]]}]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'wake_up',3},[{'type',245,'fun',[{'type',245,'product',[{'type',245,'atom',[]}|[{'type',245,'atom',[]}|[{'type',245,'list',[{'type',245,'term',[]}]}]]]}|[{'type',245,'term',[]}]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'start',3},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'Module'}|[{'var',268,'Function'}|[{'var',268,'Args'}]]]}|[{'var',268,'Ret'}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Module'}|[{'type',269,'module',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Function'}|[{'type',270,'atom',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Args'}|[{'type',271,'list',[{'type',271,'term',[]}]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Ret'}|[{'type',272,'union',[{'type',272,'term',[]}|[{'type',272,'tuple',[{'atom',272,'error'}|[{'ann_type',272,[{'var',272,'Reason'}|[{'type',272,'term',[]}]]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'start',4},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'Module'}|[{'var',277,'Function'}|[{'var',277,'Args'}|[{'var',277,'Time'}]]]]}|[{'var',277,'Ret'}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Module'}|[{'type',278,'module',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Function'}|[{'type',279,'atom',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Args'}|[{'type',280,'list',[{'type',280,'term',[]}]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Time'}|[{'type',281,'timeout',[]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Ret'}|[{'type',282,'union',[{'type',282,'term',[]}|[{'type',282,'tuple',[{'atom',282,'error'}|[{'ann_type',282,[{'var',282,'Reason'}|[{'type',282,'term',[]}]]}]]}]]}]]]]}]]]]]]]}]}],
		%% Line 288
		'spec' =
		    %% Line 288
		    [{{'start',5},[{'type',288,'bounded_fun',[{'type',288,'fun',[{'type',288,'product',[{'var',288,'Module'}|[{'var',288,'Function'}|[{'var',288,'Args'}|[{'var',288,'Time'}|[{'var',288,'SpawnOpts'}]]]]]}|[{'var',288,'Ret'}]]}|[[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Module'}|[{'type',289,'module',[]}]]]]}|[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'Function'}|[{'type',290,'atom',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Args'}|[{'type',291,'list',[{'type',291,'term',[]}]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Time'}|[{'type',292,'timeout',[]}]]]]}|[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'SpawnOpts'}|[{'type',293,'list',[{'type',293,'spawn_option',[]}]}]]]]}|[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'Ret'}|[{'type',294,'union',[{'type',294,'term',[]}|[{'type',294,'tuple',[{'atom',294,'error'}|[{'ann_type',294,[{'var',294,'Reason'}|[{'type',294,'term',[]}]]}]]}]]}]]]]}]]]]]]]]}]}],
		%% Line 300
		'spec' =
		    %% Line 300
		    [{{'start_link',3},[{'type',300,'bounded_fun',[{'type',300,'fun',[{'type',300,'product',[{'var',300,'Module'}|[{'var',300,'Function'}|[{'var',300,'Args'}]]]}|[{'var',300,'Ret'}]]}|[[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Module'}|[{'type',301,'module',[]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Function'}|[{'type',302,'atom',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Args'}|[{'type',303,'list',[{'type',303,'term',[]}]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Ret'}|[{'type',304,'union',[{'type',304,'term',[]}|[{'type',304,'tuple',[{'atom',304,'error'}|[{'ann_type',304,[{'var',304,'Reason'}|[{'type',304,'term',[]}]]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 309
		'spec' =
		    %% Line 309
		    [{{'start_link',4},[{'type',309,'bounded_fun',[{'type',309,'fun',[{'type',309,'product',[{'var',309,'Module'}|[{'var',309,'Function'}|[{'var',309,'Args'}|[{'var',309,'Time'}]]]]}|[{'var',309,'Ret'}]]}|[[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Module'}|[{'type',310,'module',[]}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Function'}|[{'type',311,'atom',[]}]]]]}|[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Args'}|[{'type',312,'list',[{'type',312,'term',[]}]}]]]]}|[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'Time'}|[{'type',313,'timeout',[]}]]]]}|[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'Ret'}|[{'type',314,'union',[{'type',314,'term',[]}|[{'type',314,'tuple',[{'atom',314,'error'}|[{'ann_type',314,[{'var',314,'Reason'}|[{'type',314,'term',[]}]]}]]}]]}]]]]}]]]]]]]}]}],
		%% Line 320
		'spec' =
		    %% Line 320
		    [{{'start_link',5},[{'type',320,'bounded_fun',[{'type',320,'fun',[{'type',320,'product',[{'var',320,'Module'}|[{'var',320,'Function'}|[{'var',320,'Args'}|[{'var',320,'Time'}|[{'var',320,'SpawnOpts'}]]]]]}|[{'var',320,'Ret'}]]}|[[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Module'}|[{'type',321,'module',[]}]]]]}|[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Function'}|[{'type',322,'atom',[]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Args'}|[{'type',323,'list',[{'type',323,'term',[]}]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'Time'}|[{'type',324,'timeout',[]}]]]]}|[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'SpawnOpts'}|[{'type',325,'list',[{'type',325,'spawn_option',[]}]}]]]]}|[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'Ret'}|[{'type',326,'union',[{'type',326,'term',[]}|[{'type',326,'tuple',[{'atom',326,'error'}|[{'ann_type',326,[{'var',326,'Reason'}|[{'type',326,'term',[]}]]}]]}]]}]]]]}]]]]]]]]}]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'flush',1},[{'type',362,'fun',[{'type',362,'product',[{'type',362,'pid',[]}]}|[{'atom',362,'true'}]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'init_ack',2},[{'type',372,'bounded_fun',[{'type',372,'fun',[{'type',372,'product',[{'var',372,'Parent'}|[{'var',372,'Ret'}]]}|[{'atom',372,'ok'}]]}|[[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'Parent'}|[{'type',373,'pid',[]}]]]]}|[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'Ret'}|[{'type',374,'term',[]}]]]]}]]]]}]}],
		%% Line 380
		'spec' =
		    %% Line 380
		    [{{'init_ack',1},[{'type',380,'bounded_fun',[{'type',380,'fun',[{'type',380,'product',[{'var',380,'Ret'}]}|[{'atom',380,'ok'}]]}|[[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'Ret'}|[{'type',381,'term',[]}]]]]}]]]}]}],
		%% Line 391
		'spec' =
		    %% Line 391
		    [{{'initial_call',1},[{'type',391,'bounded_fun',[{'type',391,'fun',[{'type',391,'product',[{'var',391,'Process'}]}|[{'type',391,'union',[{'type',391,'tuple',[{'var',391,'Module'}|[{'var',391,'Function'}|[{'var',391,'Args'}]]]}|[{'atom',391,'false'}]]}]]}|[[{'type',392,'constraint',[{'atom',392,'is_subtype'}|[[{'var',392,'Process'}|[{'type',392,'dict_or_pid',[]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Module'}|[{'type',393,'module',[]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'Function'}|[{'type',394,'atom',[]}]]]]}|[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'Args'}|[{'type',395,'list',[{'type',395,'atom',[]}]}]]]]}]]]]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'translate_initial_call',1},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'Process'}]}|[{'type',418,'tuple',[{'var',418,'Module'}|[{'var',418,'Function'}|[{'var',418,'Arity'}]]]}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Process'}|[{'type',419,'dict_or_pid',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Module'}|[{'type',420,'module',[]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Function'}|[{'type',421,'atom',[]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Arity'}|[{'type',422,'byte',[]}]]]]}]]]]]]}]}],
		%% Line 520
		'spec' =
		    %% Line 520
		    [{{'get_ancestors',1},[{'type',520,'fun',[{'type',520,'product',[{'type',520,'pid',[]}]}|[{'type',520,'tuple',[{'atom',520,'ancestors'}|[{'type',520,'list',[{'type',520,'pid',[]}]}]]}]]}]}],
		%% Line 605
		'spec' =
		    %% Line 605
		    [{{'neighbours',1},[{'type',605,'fun',[{'type',605,'product',[{'type',605,'pid',[]}]}|[{'type',605,'list',[{'type',605,'pid',[]}]}]]}]}],
		%% Line 632
		'spec' =
		    %% Line 632
		    [{{'adjacents',1},[{'type',632,'fun',[{'type',632,'product',[{'type',632,'pid',[]}]}|[{'type',632,'list',[{'type',632,'pid',[]}]}]]}]}],
		%% Line 668
		'spec' =
		    %% Line 668
		    [{{'get_ancestors',0},[{'type',668,'fun',[{'type',668,'product',[]}|[{'type',668,'list',[{'type',668,'pid',[]}]}]]}]}],
		%% Line 694
		'spec' =
		    %% Line 694
		    [{{'format',1},[{'type',694,'bounded_fun',[{'type',694,'fun',[{'type',694,'product',[{'var',694,'CrashReport'}]}|[{'type',694,'string',[]}]]}|[[{'type',695,'constraint',[{'atom',695,'is_subtype'}|[[{'var',695,'CrashReport'}|[{'type',695,'list',[{'type',695,'term',[]}]}]]]]}]]]}]}],
		%% Line 699
		'spec' =
		    %% Line 699
		    [{{'format',2},[{'type',699,'bounded_fun',[{'type',699,'fun',[{'type',699,'product',[{'var',699,'CrashReport'}|[{'var',699,'Encoding'}]]}|[{'type',699,'string',[]}]]}|[[{'type',700,'constraint',[{'atom',700,'is_subtype'}|[[{'var',700,'CrashReport'}|[{'type',700,'list',[{'type',700,'term',[]}]}]]]]}|[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'Encoding'}|[{'type',701,'union',[{'atom',701,'latin1'}|[{'atom',701,'unicode'}|[{'atom',701,'utf8'}]]]}]]]]}]]]]}]}]]
'spawn'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      let <Parent> =
		  %% Line 60
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 61
		      apply 'get_ancestors'/0
			  ()
		  in  %% Line 62
		      call 'erlang':'spawn'
			  ('proc_lib', 'init_p', [Parent|[Ancestors|[F|[]]]])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'spawn',1}}] )
	    -| ['compiler_generated'] )
	end
'spawn'/3 =
    %% Line 69
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,A>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Parent> =
		  %% Line 70
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 71
		      apply 'get_ancestors'/0
			  ()
		  in  %% Line 72
		      call 'erlang':'spawn'
			  ('proc_lib', 'init_p', [Parent|[Ancestors|[M|[F|[A|[]]]]]])
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'spawn',3}}] )
	    -| ['compiler_generated'] )
	end
'spawn_link'/1 =
    %% Line 77
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      let <Parent> =
		  %% Line 78
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 79
		      apply 'get_ancestors'/0
			  ()
		  in  %% Line 80
		      call 'erlang':'spawn_link'
			  ('proc_lib', 'init_p', [Parent|[Ancestors|[F|[]]]])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'spawn_link',1}}] )
	    -| ['compiler_generated'] )
	end
'spawn_link'/3 =
    %% Line 87
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,A>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Parent> =
		  %% Line 88
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 89
		      apply 'get_ancestors'/0
			  ()
		  in  %% Line 90
		      call 'erlang':'spawn_link'
			  ('proc_lib', 'init_p', [Parent|[Ancestors|[M|[F|[A|[]]]]]])
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'spawn_link',3}}] )
	    -| ['compiler_generated'] )
	end
'spawn'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,F>
	      when call 'erlang':'is_function'
		    (F) ->
	      let <Parent> =
		  %% Line 97
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 98
		      apply 'get_ancestors'/0
			  ()
		  in  %% Line 99
		      call 'erlang':'spawn'
			  (Node, 'proc_lib', 'init_p', [Parent|[Ancestors|[F|[]]]])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'spawn',2}}] )
	    -| ['compiler_generated'] )
	end
'spawn'/4 =
    %% Line 107
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Node,M,F,A>
	      when try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor5> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Parent> =
		  %% Line 108
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 109
		      apply 'get_ancestors'/0
			  ()
		  in  %% Line 110
		      call 'erlang':'spawn'
			  (Node, 'proc_lib', 'init_p', [Parent|[Ancestors|[M|[F|[A|[]]]]]])
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'spawn',4}}] )
	    -| ['compiler_generated'] )
	end
'spawn_link'/2 =
    %% Line 116
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,F>
	      when call 'erlang':'is_function'
		    (F) ->
	      let <Parent> =
		  %% Line 117
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 118
		      apply 'get_ancestors'/0
			  ()
		  in  %% Line 119
		      call 'erlang':'spawn_link'
			  (Node, 'proc_lib', 'init_p', [Parent|[Ancestors|[F|[]]]])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'spawn_link',2}}] )
	    -| ['compiler_generated'] )
	end
'spawn_link'/4 =
    %% Line 127
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Node,M,F,A>
	      when try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor5> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Parent> =
		  %% Line 128
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 129
		      apply 'get_ancestors'/0
			  ()
		  in  %% Line 130
		      call 'erlang':'spawn_link'
			  (Node, 'proc_lib', 'init_p', [Parent|[Ancestors|[M|[F|[A|[]]]]]])
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'spawn_link',4}}] )
	    -| ['compiler_generated'] )
	end
'spawn_opt'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,Opts>
	      when call 'erlang':'is_function'
		    (F) ->
	      let <Parent> =
		  %% Line 137
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 138
		      apply 'get_ancestors'/0
			  ()
		  in  do  %% Line 139
			  apply 'check_for_monitor'/1
			      (Opts)
			  %% Line 140
			  call 'erlang':'spawn_opt'
			      ('proc_lib', 'init_p', [Parent|[Ancestors|[F|[]]]], Opts)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'spawn_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'spawn_opt'/3 =
    %% Line 147
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node,F,Opts>
	      when call 'erlang':'is_function'
		    (F) ->
	      let <Parent> =
		  %% Line 148
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 149
		      apply 'get_ancestors'/0
			  ()
		  in  do  %% Line 150
			  apply 'check_for_monitor'/1
			      (Opts)
			  %% Line 151
			  call 'erlang':'spawn_opt'
			      (Node, 'proc_lib', 'init_p', [Parent|[Ancestors|[F|[]]]], Opts)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'spawn_opt',3}}] )
	    -| ['compiler_generated'] )
	end
'spawn_opt'/4 =
    %% Line 159
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <M,F,A,Opts>
	      when try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor5> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Parent> =
		  %% Line 160
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 161
		      apply 'get_ancestors'/0
			  ()
		  in  do  %% Line 162
			  apply 'check_for_monitor'/1
			      (Opts)
			  %% Line 163
			  call 'erlang':'spawn_opt'
			      ('proc_lib', 'init_p', [Parent|[Ancestors|[M|[F|[A|[]]]]]], Opts)
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'spawn_opt',4}}] )
	    -| ['compiler_generated'] )
	end
'spawn_opt'/5 =
    %% Line 172
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,M,F,A,Opts>
	      when try
		    let <_cor5> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor6> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Parent> =
		  %% Line 173
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 174
		      apply 'get_ancestors'/0
			  ()
		  in  do  %% Line 175
			  apply 'check_for_monitor'/1
			      (Opts)
			  %% Line 176
			  call 'erlang':'spawn_opt'
			      (Node, 'proc_lib', 'init_p', [Parent|[Ancestors|[M|[F|[A|[]]]]]], Opts)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'spawn_opt',5}}] )
	    -| ['compiler_generated'] )
	end
'check_for_monitor'/1 =
    %% Line 180
    fun (_cor0) ->
	%% Line 181
	case call 'lists':'member'
		 ('monitor', _cor0) of
	  %% Line 182
	  <'true'> when 'true' ->
	      %% Line 183
	      call 'erlang':'error'
		  ('badarg')
	  %% Line 184
	  <'false'> when 'true' ->
	      %% Line 185
	      'false'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'spawn_mon'/3 =
    %% Line 188
    fun (_cor2,_cor1,_cor0) ->
	let <Parent> =
	    %% Line 189
	    apply 'get_my_name'/0
		()
	in  let <Ancestors> =
		%% Line 190
		apply 'get_ancestors'/0
		    ()
	    in  %% Line 191
		call 'erlang':'spawn_monitor'
		    ('proc_lib', 'init_p', [Parent|[Ancestors|[_cor2|[_cor1|[_cor0|[]]]]]])
'spawn_opt_mon'/4 =
    %% Line 193
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <M,F,A,Opts>
	      when try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor5> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Parent> =
		  %% Line 194
		  apply 'get_my_name'/0
		      ()
	      in  let <Ancestors> =
		      %% Line 195
		      apply 'get_ancestors'/0
			  ()
		  in  do  %% Line 196
			  apply 'check_for_monitor'/1
			      (Opts)
			  %% Line 197
			  call 'erlang':'spawn_opt'
			      ('proc_lib', 'init_p', [Parent|[Ancestors|[M|[F|[A|[]]]]]], ['monitor'|Opts])
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'spawn_opt_mon',4}}] )
	    -| ['compiler_generated'] )
	end
'hibernate'/3 =
    %% Line 204
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,A>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 205
	      call 'erlang':'hibernate'
		  ('proc_lib', 'wake_up', [M|[F|[A|[]]]])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'hibernate',3}}] )
	    -| ['compiler_generated'] )
	end
'ensure_link'/1 =
    %% Line 207
    fun (_cor0) ->
	%% Line 208
	case call 'lists':'member'
		 ('link', _cor0) of
	  %% Line 209
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 211
	  <'false'> when 'true' ->
	      %% Line 212
	      ['link'|_cor0]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'init_p'/3 =
    %% Line 217
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Parent,Ancestors,Fun>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      do  %% Line 218
		  call 'erlang':'put'
		      ('$ancestors', [Parent|Ancestors])
		  %% Line 219
		  case call 'erlang':'fun_info'
			   (Fun, 'module') of
		    <{'module',Mod}> when 'true' ->
			%% Line 220
			case call 'erlang':'fun_info'
				 (Fun, 'name') of
			  <{'name',Name}> when 'true' ->
			      %% Line 221
			      case call 'erlang':'fun_info'
				       (Fun, 'arity') of
				<{'arity',Arity}> when 'true' ->
				    do  %% Line 222
					call 'erlang':'put'
					    ('$initial_call', {Mod,Name,Arity})
					%% Line 223
					try
					    %% Line 224
					    apply Fun
						()
					of <_cor6> ->
					    _cor6
					catch <_cor9,_cor8,_cor7> ->
					    %% Line 227
					    apply 'exit_p'/2
						(_cor9, _cor8)
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'init_p',3}}] )
	    -| ['compiler_generated'] )
	end
'init_p'/5 =
    %% Line 232
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Parent,Ancestors,M,F,A>
	      when try
		    let <_cor5> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor6> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 233
		  call 'erlang':'put'
		      ('$ancestors', [Parent|Ancestors])
		  let <_cor9> =
		      %% Line 234
		      apply 'trans_init'/3
			  (M, F, A)
		  in  do  %% Line 234
			  call 'erlang':'put'
			      ('$initial_call', _cor9)
			  %% Line 235
			  apply 'init_p_do_apply'/3
			      (M, F, A)
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'init_p',5}}] )
	    -| ['compiler_generated'] )
	end
'init_p_do_apply'/3 =
    %% Line 237
    fun (_cor2,_cor1,_cor0) ->
	%% Line 238
	try
	    %% Line 239
	    call 'erlang':'apply'
		(_cor2, _cor1, _cor0)
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    %% Line 242
	    apply 'exit_p'/2
		(_cor6, _cor5)
'wake_up'/3 =
    %% Line 247
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,A>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 248
	      try
		  %% Line 249
		  call 'erlang':'apply'
		      (M, F, A)
	      of <_cor7> ->
		  _cor7
	      catch <_cor10,_cor9,_cor8> ->
		  %% Line 252
		  apply 'exit_p'/2
		      (_cor10, _cor9)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'wake_up',3}}] )
	    -| ['compiler_generated'] )
	end
'exit_p'/2 =
    %% Line 255
    fun (_cor1,_cor0) ->
	%% Line 256
	case call 'erlang':'get'
		 ('$initial_call') of
	  %% Line 257
	  <{M,F,A}>
	      when try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor3> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 258
		  apply 'make_dummy_args'/2
		      (A, [])
	      in  let <MFA> = {%% Line 258
		       M,%% Line 258
			 F,_cor6}
		  in  do  %% Line 259
			  apply 'crash_report'/3
			      (_cor1, _cor0, MFA)
			  %% Line 260
			  call 'erlang':'exit'
			      (_cor0)
	  %% Line 261
	  <_cor11> when 'true' ->
	      do  %% Line 264
		  apply 'crash_report'/3
		      (_cor1, _cor0, [])
		  %% Line 265
		  call 'erlang':'exit'
		      (_cor0)
	end
'start'/3 =
    %% Line 274
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,A>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 275
	      apply 'start'/4
		  (M, F, A, 'infinity')
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'start',3}}] )
	    -| ['compiler_generated'] )
	end
'start'/4 =
    %% Line 284
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <M,F,A,Timeout>
	      when try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor5> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <PidRef> =
		  %% Line 285
		  apply 'spawn_mon'/3
		      (M, F, A)
	      in  %% Line 286
		  apply 'sync_wait_mon'/2
		      (PidRef, Timeout)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'start',4}}] )
	    -| ['compiler_generated'] )
	end
'start'/5 =
    %% Line 296
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <M,F,A,Timeout,SpawnOpts>
	      when try
		    let <_cor5> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor6> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <PidRef> =
		  %% Line 297
		  apply 'spawn_opt_mon'/4
		      (M, F, A, SpawnOpts)
	      in  %% Line 298
		  apply 'sync_wait_mon'/2
		      (PidRef, Timeout)
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'start',5}}] )
	    -| ['compiler_generated'] )
	end
'start_link'/3 =
    %% Line 306
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,A>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 307
	      apply 'start_link'/4
		  (M, F, A, 'infinity')
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'start_link',3}}] )
	    -| ['compiler_generated'] )
	end
'start_link'/4 =
    %% Line 316
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <M,F,A,Timeout>
	      when try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor5> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Pid> =
		  %% Line 317
		  call 'proc_lib':'spawn_link'
		      (M, F, A)
	      in  %% Line 318
		  apply 'sync_wait'/2
		      (Pid, Timeout)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'start_link',4}}] )
	    -| ['compiler_generated'] )
	end
'start_link'/5 =
    %% Line 328
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <M,F,A,Timeout,SpawnOpts>
	      when try
		    let <_cor5> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor6> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 329
		  apply 'ensure_link'/1
		      (SpawnOpts)
	      in  let <Pid> =
		      %% Line 329
		      call 'proc_lib':'spawn_opt'
			  (M, F, A, _cor9)
		  in  %% Line 330
		      apply 'sync_wait'/2
			  (Pid, Timeout)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'start_link',5}}] )
	    -| ['compiler_generated'] )
	end
'sync_wait'/2 =
    %% Line 332
    fun (_cor1,_cor0) ->
	%% Line 333
	receive
	  %% Line 334
	  <{'ack',_cor4,Return}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      %% Line 335
	      Return
	  %% Line 336
	  <{'EXIT',_cor5,Reason}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 337
	      {'error',Reason}
	after _cor0 ->
	  do  %% Line 339
	      call 'erlang':'unlink'
		  (_cor1)
	      do  %% Line 340
		  call 'erlang':'exit'
		      (_cor1, 'kill')
		  do  %% Line 341
		      apply 'flush'/1
			  (_cor1)
		      %% Line 342
		      {'error','timeout'}
'sync_wait_mon'/2 =
    %% Line 345
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Pid,Ref},Timeout> when 'true' ->
	      %% Line 346
	      receive
		%% Line 347
		<{'ack',_cor4,Return}>
		    when call 'erlang':'=:='
			  (_cor4,
			   Pid) ->
		    do  %% Line 348
			call 'erlang':'demonitor'
			    (Ref, ['flush'])
			%% Line 349
			Return
		%% Line 350
		<{'DOWN',_cor5,_X_Type,_cor6,Reason}>
		    when let <_cor7> =
			  call 'erlang':'=:='
			      (_cor5, Ref)
		      in  let <_cor8> =
			      call 'erlang':'=:='
				  (_cor6, Pid)
			  in  call 'erlang':'and'
				  (_cor7, _cor8) ->
		    %% Line 351
		    {'error',Reason}
		%% Line 352
		<{'EXIT',_cor9,Reason}>
		    when call 'erlang':'=:='
			  (_cor9,
			   Pid) ->
		    do  %% Line 353
			call 'erlang':'demonitor'
			    (Ref, ['flush'])
			%% Line 354
			{'error',Reason}
	      after %% Line 355
		    Timeout ->
		do  %% Line 356
		    call 'erlang':'demonitor'
			(Ref, ['flush'])
		    do  %% Line 357
			call 'erlang':'exit'
			    (Pid, 'kill')
			do  %% Line 358
			    apply 'flush'/1
				(Pid)
			    %% Line 359
			    {'error','timeout'}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'sync_wait_mon',2}}] )
	    -| ['compiler_generated'] )
	end
'flush'/1 =
    %% Line 364
    fun (_cor0) ->
	%% Line 365
	receive
	  %% Line 366
	  <{'EXIT',_cor2,_cor3}>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor0) ->
	      %% Line 367
	      'true'
	after %% Line 368
	      0 ->
	  %% Line 369
	  'true'
'init_ack'/2 =
    %% Line 376
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 377
	    call 'erlang':'self'
		()
	in  do  %% Line 377
		call 'erlang':'!'
		    (_cor1, {'ack',_cor2,_cor0})
		%% Line 378
		'ok'
'init_ack'/1 =
    %% Line 383
    fun (_cor0) ->
	%% Line 384
	case call 'erlang':'get'
		 ('$ancestors') of
	  <[Parent|_cor3]> when 'true' ->
	      %% Line 385
	      apply 'init_ack'/2
		  (Parent, _cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'initial_call'/1 =
    %% Line 397
    fun (_cor0) ->
	%% Line 398
	case apply 'raw_initial_call'/1
		 (_cor0) of
	  %% Line 399
	  <{M,F,A}> when 'true' ->
	      let <_cor1> =
		  %% Line 400
		  apply 'make_dummy_args'/2
		      (A, [])
	      in  %% Line 400
		  {M,F,_cor1}
	  %% Line 401
	  <'false'> when 'true' ->
	      %% Line 402
	      'false'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'make_dummy_args'/2 =
    %% Line 405
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Acc> when 'true' ->
	      %% Line 406
	      Acc
	  %% Line 407
	  <N,Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 408
		  call 'erlang':'integer_to_list'
		      (N)
	      in  let <_cor3> =
		      %% Line 408
		      call 'erlang':'++'
			  ([65|[114|[103|[117|[109|[101|[110|[116|[95|[95]]]]]]]]]], _cor2)
		  in  let <Arg> =
			  %% Line 408
			  call 'erlang':'list_to_atom'
			      (_cor3)
		      in  let <_cor5> =
			      %% Line 409
			      call 'erlang':'-'
				  (N, 1)
			  in  %% Line 409
			      apply 'make_dummy_args'/2
				  (_cor5, [Arg|Acc])
	end
'translate_initial_call'/1 =
    %% Line 424
    fun (_cor0) ->
	%% Line 425
	case apply 'raw_initial_call'/1
		 (_cor0) of
	  %% Line 426
	  <MFA = {_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 427
	      MFA
	  %% Line 428
	  <'false'> when 'true' ->
	      %% Line 429
	      {'proc_lib','init_p',5}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'raw_initial_call'/1 =
    %% Line 437
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor2> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (Z)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 438
		  call 'c':'pid'
		      (X, Y, Z)
	      in  %% Line 438
		  apply 'raw_initial_call'/1
		      (_cor5)
	  %% Line 439
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 440
	      case apply 'get_process_info'/2
		       (Pid, 'dictionary') of
		%% Line 441
		<{'dictionary',Dict}> when 'true' ->
		    %% Line 442
		    apply 'raw_init_call'/1
			(Dict)
		%% Line 443
		<_cor9> when 'true' ->
		    %% Line 444
		    'false'
	      end
	  %% Line 446
	  <ProcInfo>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 447
	      case call 'lists':'keyfind'
		       ('dictionary', 1, ProcInfo) of
		%% Line 448
		<{'dictionary',Dict}> when 'true' ->
		    %% Line 449
		    apply 'raw_init_call'/1
			(Dict)
		%% Line 450
		<_cor10> when 'true' ->
		    %% Line 451
		    'false'
	      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'raw_initial_call',1}}] )
	    -| ['compiler_generated'] )
	end
'raw_init_call'/1 =
    %% Line 454
    fun (_cor0) ->
	%% Line 455
	case call 'lists':'keyfind'
		 ('$initial_call', 1, _cor0) of
	  %% Line 456
	  <{_cor3,MFA = {_cor4,_cor5,_cor6}}> when 'true' ->
	      %% Line 457
	      MFA
	  %% Line 458
	  <_cor7> when 'true' ->
	      %% Line 459
	      'false'
	end
'trans_init'/3 =
    %% Line 466
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'gen','init_it',['gen_server'|[_cor9|[_cor10|['supervisor'|[{_cor11,Module,_cor12}|[_cor13|[]]]]]]]> when 'true' ->
	      %% Line 467
	      {'supervisor',Module,1}
	  %% Line 468
	  <'gen','init_it',['gen_server'|[_cor14|[_cor15|[_cor16|['supervisor'|[{_cor17,Module,_cor18}|[_cor19|[]]]]]]]]> when 'true' ->
	      %% Line 469
	      {'supervisor',Module,1}
	  %% Line 470
	  <'gen','init_it',['gen_server'|[_cor20|[_cor21|['supervisor_bridge'|[[Module|_cor22]|[_cor23|[]]]]]]]> when 'true' ->
	      %% Line 471
	      {'supervisor_bridge',Module,1}
	  %% Line 472
	  <'gen','init_it',['gen_server'|[_cor24|[_cor25|[_cor26|['supervisor_bridge'|[[Module|_cor27]|[_cor28|[]]]]]]]]> when 'true' ->
	      %% Line 473
	      {'supervisor_bridge',Module,1}
	  %% Line 474
	  <'gen','init_it',['gen_server'|[_cor29|[_cor30|[Module|[_cor31|[_cor32|[]]]]]]]> when 'true' ->
	      %% Line 475
	      {Module,'init',1}
	  %% Line 476
	  <'gen','init_it',['gen_server'|[_cor33|[_cor34|[_cor35|[Module|_cor36]]]]]> when 'true' ->
	      %% Line 477
	      {Module,'init',1}
	  %% Line 478
	  <'gen','init_it',['gen_fsm'|[_cor37|[_cor38|[Module|[_cor39|[_cor40|[]]]]]]]> when 'true' ->
	      %% Line 479
	      {Module,'init',1}
	  %% Line 480
	  <'gen','init_it',['gen_fsm'|[_cor41|[_cor42|[_cor43|[Module|_cor44]]]]]> when 'true' ->
	      %% Line 481
	      {Module,'init',1}
	  %% Line 482
	  <'gen','init_it',['gen_event'|_cor45]> when 'true' ->
	      %% Line 483
	      {'gen_event','init_it',6}
	  %% Line 484
	  <M,F,A>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 485
		  call 'erlang':'length'
		      (A)
	      in  %% Line 485
		  {M,F,_cor5}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'trans_init',3}}] )
	    -| ['compiler_generated'] )
	end
'crash_report'/3 =
    %% Line 491
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'exit','normal',_cor10> when 'true' ->
	      'ok'
	  %% Line 492
	  <'exit','shutdown',_cor11> when 'true' ->
	      'ok'
	  %% Line 493
	  <'exit',{'shutdown',_cor12},_cor13> when 'true' ->
	      'ok'
	  %% Line 494
	  <Class,Reason,StartF> when 'true' ->
	      let <OwnReport> =
		  %% Line 495
		  apply 'my_info'/3
		      (Class, Reason, StartF)
	      in  let <_cor4> =
		      %% Line 496
		      call 'erlang':'self'
			  ()
		  in  let <LinkReport> =
			  %% Line 496
			  apply 'linked_info'/1
			      (_cor4)
		      in  let <Rep> =
			      %% Line 497
			      [OwnReport|[LinkReport|[]]]
			  in  %% Line 498
			      call 'error_logger':'error_report'
				  ('crash_report', Rep)
	end
'my_info'/3 =
    %% Line 500
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Class,Reason,[]> when 'true' ->
	      %% Line 501
	      apply 'my_info_1'/2
		  (Class, Reason)
	  %% Line 502
	  <Class,Reason,StartF> when 'true' ->
	      let <_cor3> =
		  %% Line 503
		  apply 'my_info_1'/2
		      (Class, Reason)
	      in  %% Line 503
		  [{'initial_call',StartF}|_cor3]
	end
'my_info_1'/2 =
    %% Line 505
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 506
	    call 'erlang':'self'
		()
	in  let <_cor3> =
		%% Line 507
		call 'erlang':'self'
		    ()
	    in  let <_cor4> =
		    %% Line 507
		    apply 'get_process_info'/2
			(_cor3, 'registered_name')
		in  let <_cor5> =
			%% Line 508
			call 'erlang':'get_stacktrace'
			    ()
		    in  let <_cor6> =
			    %% Line 509
			    call 'erlang':'self'
				()
			in  let <_cor7> =
				%% Line 509
				apply 'get_ancestors'/1
				    (_cor6)
			    in  let <_cor8> =
				    %% Line 510
				    call 'erlang':'self'
					()
				in  let <_cor9> =
					%% Line 510
					apply 'get_process_info'/2
					    (_cor8, 'messages')
				    in  let <_cor10> =
					    %% Line 511
					    call 'erlang':'self'
						()
					in  let <_cor11> =
						%% Line 511
						apply 'get_process_info'/2
						    (_cor10, 'links')
					    in  let <_cor12> =
						    %% Line 512
						    call 'erlang':'self'
							()
						in  let <_cor13> =
							%% Line 512
							apply 'get_cleaned_dictionary'/1
							    (_cor12)
						    in  let <_cor14> =
							    %% Line 513
							    call 'erlang':'self'
								()
							in  let <_cor15> =
								%% Line 513
								apply 'get_process_info'/2
								    (_cor14, 'trap_exit')
							    in  let <_cor16> =
								    %% Line 514
								    call 'erlang':'self'
									()
								in  let <_cor17> =
									%% Line 514
									apply 'get_process_info'/2
									    (_cor16, 'status')
								    in  let <_cor18> =
									    %% Line 515
									    call 'erlang':'self'
										()
									in  let <_cor19> =
										%% Line 515
										apply 'get_process_info'/2
										    (_cor18, 'heap_size')
									    in  let <_cor20> =
										    %% Line 516
										    call 'erlang':'self'
											()
										in  let <_cor21> =
											%% Line 516
											apply 'get_process_info'/2
											    (_cor20, 'stack_size')
										    in  let <_cor22> =
											    %% Line 517
											    call 'erlang':'self'
												()
											in  let <_cor23> =
												%% Line 517
												apply 'get_process_info'/2
												    (_cor22, 'reductions')
											    in  %% Line 506
												[{'pid',_cor2}|%% Line 507
													       [_cor4|%% Line 508
														      [{'error_info',{_cor1,_cor0,_cor5}}|%% Line 509
																			  [_cor7|%% Line 510
																				 [_cor9|%% Line 511
																					[_cor11|%% Line 512
																						[_cor13|%% Line 513
																							[_cor15|%% Line 514
																								[_cor17|%% Line 515
																									[_cor19|%% Line 516
																										[_cor21|%% Line 517
																											[_cor23|%% Line 518
																												[]]]]]]]]]]]]]
'get_ancestors'/1 =
    %% Line 522
    fun (_cor0) ->
	%% Line 523
	case apply 'get_dictionary'/2
		 (_cor0, '$ancestors') of
	  %% Line 524
	  <{'$ancestors',Ancestors}> when 'true' ->
	      %% Line 525
	      {'ancestors',Ancestors}
	  %% Line 526
	  <_cor3> when 'true' ->
	      %% Line 527
	      {'ancestors',[]}
	end
'get_cleaned_dictionary'/1 =
    %% Line 530
    fun (_cor0) ->
	%% Line 531
	case apply 'get_process_info'/2
		 (_cor0, 'dictionary') of
	  %% Line 532
	  <{'dictionary',Dict}> when 'true' ->
	      let <_cor1> =
		  apply 'clean_dict'/1
		      (Dict)
	      in  {'dictionary',_cor1}
	  %% Line 533
	  <_cor4> when 'true' ->
	      {'dictionary',[]}
	end
'clean_dict'/1 =
    %% Line 536
    fun (_cor0) ->
	case _cor0 of
	  <[{'$ancestors',_cor3}|Dict]> when 'true' ->
	      %% Line 537
	      apply 'clean_dict'/1
		  (Dict)
	  %% Line 538
	  <[{'$initial_call',_cor4}|Dict]> when 'true' ->
	      %% Line 539
	      apply 'clean_dict'/1
		  (Dict)
	  %% Line 540
	  <[E|Dict]> when 'true' ->
	      let <_cor1> =
		  %% Line 541
		  apply 'clean_dict'/1
		      (Dict)
	      in  %% Line 541
		  [E|_cor1]
	  %% Line 542
	  <[]> when 'true' ->
	      %% Line 543
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'clean_dict',1}}] )
	    -| ['compiler_generated'] )
	end
'get_dictionary'/2 =
    %% Line 545
    fun (_cor1,_cor0) ->
	%% Line 546
	case apply 'get_process_info'/2
		 (_cor1, 'dictionary') of
	  %% Line 547
	  <{'dictionary',Dict}> when 'true' ->
	      %% Line 548
	      case call 'lists':'keysearch'
		       (_cor0, 1, Dict) of
		%% Line 549
		<{'value',Value}> when 'true' ->
		    Value
		%% Line 550
		<_cor6> when 'true' ->
		    'undefined'
	      end
	  %% Line 552
	  <_cor7> when 'true' ->
	      %% Line 553
	      'undefined'
	end
'linked_info'/1 =
    %% Line 556
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 557
	    apply 'neighbours'/1
		(_cor0)
	in  %% Line 557
	    apply 'make_neighbour_reports1'/1
		(_cor1)
'make_neighbour_reports1'/1 =
    %% Line 559
    fun (_cor0) ->
	case _cor0 of
	  <[P|Ps]> when 'true' ->
	      let <ReportBody> =
		  %% Line 560
		  apply 'make_neighbour_report'/1
		      (P)
	      in  %% Line 564
		  case call 'lists':'member'
			   ('undefined', ReportBody) of
		    %% Line 565
		    <'true'> when 'true' ->
			%% Line 566
			apply 'make_neighbour_reports1'/1
			    (Ps)
		    %% Line 567
		    <'false'> when 'true' ->
			let <_cor2> =
			    %% Line 568
			    apply 'make_neighbour_reports1'/1
				(Ps)
			in  %% Line 568
			    [{'neighbour',ReportBody}|_cor2]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 570
	  <[]> when 'true' ->
	      %% Line 571
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'make_neighbour_reports1',1}}] )
	    -| ['compiler_generated'] )
	end
'make_neighbour_report'/1 =
    %% Line 573
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 575
	    apply 'get_process_info'/2
		(_cor0, 'registered_name')
	in  let <_cor2> =
		%% Line 576
		apply 'get_initial_call'/1
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 577
		    apply 'get_process_info'/2
			(_cor0, 'current_function')
		in  let <_cor4> =
			%% Line 578
			apply 'get_ancestors'/1
			    (_cor0)
		    in  let <_cor5> =
			    %% Line 579
			    apply 'get_process_info'/2
				(_cor0, 'messages')
			in  let <_cor6> =
				%% Line 580
				apply 'get_process_info'/2
				    (_cor0, 'links')
			    in  let <_cor7> =
				    %% Line 581
				    apply 'get_cleaned_dictionary'/1
					(_cor0)
				in  let <_cor8> =
					%% Line 582
					apply 'get_process_info'/2
					    (_cor0, 'trap_exit')
				    in  let <_cor9> =
					    %% Line 583
					    apply 'get_process_info'/2
						(_cor0, 'status')
					in  let <_cor10> =
						%% Line 584
						apply 'get_process_info'/2
						    (_cor0, 'heap_size')
					    in  let <_cor11> =
						    %% Line 585
						    apply 'get_process_info'/2
							(_cor0, 'stack_size')
						in  let <_cor12> =
							%% Line 586
							apply 'get_process_info'/2
							    (_cor0, 'reductions')
						    in  %% Line 574
							[{'pid',_cor0}|%% Line 575
								       [_cor1|%% Line 576
									      [_cor2|%% Line 577
										     [_cor3|%% Line 578
											    [_cor4|%% Line 579
												   [_cor5|%% Line 580
													  [_cor6|%% Line 581
														 [_cor7|%% Line 582
															[_cor8|%% Line 583
															       [_cor9|%% Line 584
																      [_cor10|%% Line 585
																	      [_cor11|%% Line 586
																		      [_cor12|%% Line 587
																			      []]]]]]]]]]]]]]
'get_initial_call'/1 =
    %% Line 589
    fun (_cor0) ->
	%% Line 590
	case apply 'get_dictionary'/2
		 (_cor0, '$initial_call') of
	  %% Line 591
	  <{'$initial_call',{M,F,A}}> when 'true' ->
	      let <_cor1> =
		  %% Line 592
		  apply 'make_dummy_args'/2
		      (A, [])
	      in  %% Line 592
		  {'initial_call',{M,F,_cor1}}
	  %% Line 593
	  <_cor4> when 'true' ->
	      %% Line 594
	      apply 'get_process_info'/2
		  (_cor0, 'initial_call')
	end
'neighbours'/1 =
    %% Line 607
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 608
	    apply 'adjacents'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 608
		apply 'max_neighbours'/0
		    ()
	    in  %% Line 608
		case apply 'visit'/2
			 (_cor2, {_cor1,[_cor0|[]]}) of
		  <{_cor5,Visited}> when 'true' ->
		      %% Line 609
		      call 'lists':'delete'
			  (_cor0, Visited)
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'max_neighbours'/0 =
    %% Line 611
    fun () ->
	15
'visit'/2 =
    %% Line 621
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[P|Ps],NVs = {N,Vs}>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      %% Line 622
	      case call 'lists':'member'
		       (P, Vs) of
		%% Line 623
		<'false'> when 'true' ->
		    let <_cor4> =
			apply 'adjacents'/1
			    (P)
		    in  let <_cor2> =
			    call 'erlang':'-'
				(N, 1)
			in  let <_cor3> =
				apply 'visit'/2
				    (Ps, {_cor2,[P|Vs]})
			    in  apply 'visit'/2
				    (_cor4, _cor3)
		%% Line 624
		<'true'> when 'true' ->
		    apply 'visit'/2
			(Ps, NVs)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 626
	  <_cor8,NVs = {_X_N,_X_Vs}> when 'true' ->
	      %% Line 627
	      NVs
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'visit',2}}] )
	    -| ['compiler_generated'] )
	end
'adjacents'/1 =
    %% Line 634
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 635
		apply 'proc_info'/2
		    (_cor0, 'links')
	in  %% Line 635
	    case _cor1 of
	      %% Line 636
	      <{'links',Links}> when 'true' ->
		  apply 'no_trap'/1
		      (Links)
	      %% Line 637
	      <_cor4> when 'true' ->
		  []
	    end
'no_trap'/1 =
    %% Line 640
    fun (_cor0) ->
	case _cor0 of
	  <[P|Ps]> when 'true' ->
	      let <_cor1> =
		  catch
		      %% Line 641
		      apply 'proc_info'/2
			  (P, 'trap_exit')
	      in  %% Line 641
		  case _cor1 of
		    %% Line 642
		    <{'trap_exit','false'}> when 'true' ->
			let <_cor2> =
			    apply 'no_trap'/1
				(Ps)
			in  [P|_cor2]
		    %% Line 643
		    <_cor5> when 'true' ->
			apply 'no_trap'/1
			    (Ps)
		  end
	  %% Line 645
	  <[]> when 'true' ->
	      %% Line 646
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'no_trap',1}}] )
	    -| ['compiler_generated'] )
	end
'get_process_info'/2 =
    %% Line 648
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 649
		apply 'proc_info'/2
		    (_cor1, _cor0)
	in  %% Line 649
	    apply 'translate_process_info'/2
		(_cor0, _cor2)
'translate_process_info'/2 =
    %% Line 651
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'registered_name',[]> when 'true' ->
	      %% Line 652
	      {'registered_name',[]}
	  %% Line 653
	  <_cor4,{'EXIT',_cor5}> when 'true' ->
	      %% Line 654
	      'undefined'
	  %% Line 655
	  <_cor6,Result> when 'true' ->
	      %% Line 656
	      Result
	end
'get_my_name'/0 =
    %% Line 662
    fun () ->
	let <_cor0> =
	    %% Line 663
	    call 'erlang':'self'
		()
	in  %% Line 663
	    case apply 'proc_info'/2
		     (_cor0, 'registered_name') of
	      %% Line 664
	      <{'registered_name',Name}> when 'true' ->
		  Name
	      %% Line 665
	      <_cor2> when 'true' ->
		  call 'erlang':'self'
		      ()
	    end
'get_ancestors'/0 =
    %% Line 670
    fun () ->
	%% Line 671
	case call 'erlang':'get'
		 ('$ancestors') of
	  %% Line 672
	  <A>
	      when call 'erlang':'is_list'
		    (A) ->
	      A
	  %% Line 673
	  <_cor1> when 'true' ->
	      []
	end
'proc_info'/2 =
    %% Line 676
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,Item>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    (Pid)
		    in  let <_cor2> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=:='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 677
	      call 'erlang':'process_info'
		  (Pid, Item)
	  %% Line 678
	  <Pid,Item> when 'true' ->
	      let <_cor5> =
		  %% Line 679
		  call 'erlang':'node'
		      (Pid)
	      in  let <_cor4> =
		      %% Line 679
		      call 'erlang':'nodes'
			  ()
		  in  %% Line 679
		      case call 'lists':'member'
			       (_cor5, _cor4) of
			%% Line 680
			<'true'> when 'true' ->
			    let <_cor6> =
				%% Line 681
				call 'erlang':'node'
				    (Pid)
			    in  let <_cor7> =
				    %% Line 681
				    call 'rpc':'call'
					(_cor6, 'erlang', 'process_info', [Pid|[Item|[]]])
				in  %% Line 681
				    apply 'check'/1
					(_cor7)
			%% Line 682
			<_cor11> when 'true' ->
			    %% Line 683
			    'hidden'
		      end
	end
'check'/1 =
    %% Line 686
    fun (_cor0) ->
	case _cor0 of
	  <{'badrpc','nodedown'}> when 'true' ->
	      'undefined'
	  %% Line 687
	  <{'badrpc',Error}> when 'true' ->
	      Error
	  %% Line 688
	  <Res> when 'true' ->
	      Res
	end
'format'/1 =
    %% Line 696
    fun (_cor0) ->
	%% Line 697
	apply 'format'/2
	    (_cor0, 'latin1')
'format'/2 =
    %% Line 703
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[OwnReport|[LinkReport|[]]],Encoding> when 'true' ->
	      let <OwnFormat> =
		  %% Line 704
		  apply 'format_report'/2
		      (OwnReport, Encoding)
	      in  let <LinkFormat> =
		      %% Line 705
		      apply 'format_report'/2
			  (LinkReport, Encoding)
		  in  let <Str> =
			  %% Line 706
			  call 'io_lib':'format'
			      ([32|[32|[99|[114|[97|[115|[104|[101|[114|[58|[126|[110|[126|[116|[115|[32|[32|[110|[101|[105|[103|[104|[98|[111|[117|[114|[115|[58|[126|[110|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 707
																											     [OwnFormat|[LinkFormat|[]]])
		      in  %% Line 708
			  call 'lists':'flatten'
			      (Str)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'format',2}}] )
	    -| ['compiler_generated'] )
	end
'format_report'/2 =
    %% Line 710
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Rep,Enc>
	      when call 'erlang':'is_list'
		    (Rep) ->
	      %% Line 711
	      apply 'format_rep'/2
		  (Rep, Enc)
	  %% Line 712
	  <Rep,Enc> when 'true' ->
	      let <_cor2> =
		  %% Line 713
		  apply 'modifier'/1
		      (Enc)
	      in  let <_cor3> =
		      %% Line 713
		      call 'erlang':'++'
			  (_cor2, [112|[126|[110]]])
		  in  let <_cor4> =
			  %% Line 713
			  [126|_cor3]
		      in  %% Line 713
			  call 'io_lib':'format'
			      (_cor4, [Rep|[]])
	end
'format_rep'/2 =
    %% Line 715
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'initial_call',InitialCall}|Rep],Enc> when 'true' ->
	      let <_cor2> =
		  %% Line 716
		  apply 'format_mfa'/1
		      (InitialCall)
	      in  let <_cor3> =
		      %% Line 716
		      apply 'format_rep'/2
			  (Rep, Enc)
		  in  %% Line 716
		      [_cor2|_cor3]
	  %% Line 717
	  <[{'error_info',{Class,Reason,StackTrace}}|Rep],Enc> when 'true' ->
	      let <_cor4> =
		  %% Line 718
		  apply 'format_exception'/4
		      (Class, Reason, StackTrace, Enc)
	      in  let <_cor5> =
		      %% Line 718
		      apply 'format_rep'/2
			  (Rep, Enc)
		  in  %% Line 718
		      [_cor4|_cor5]
	  %% Line 719
	  <[{Tag,Data}|Rep],Enc> when 'true' ->
	      let <_cor6> =
		  %% Line 720
		  apply 'format_tag'/2
		      (Tag, Data)
	      in  let <_cor7> =
		      %% Line 720
		      apply 'format_rep'/2
			  (Rep, Enc)
		  in  %% Line 720
		      [_cor6|_cor7]
	  %% Line 721
	  <_cor10,_X_Enc> when 'true' ->
	      %% Line 722
	      []
	end
'format_exception'/4 =
    %% Line 724
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <PF> =
	    %% Line 725
	    apply 'pp_fun'/1
		(_cor0)
	in  let <StackFun> =
		%% Line 726
		( fun (_cor9,_cor8,_cor7) ->
		      let <_cor6> =
			  call 'erlang':'=:='
			      (_cor9, 'erl_eval')
		      in  let <_cor5> =
			      call 'erlang':'=:='
				  (_cor9, 'proc_lib')
			  in  call 'erlang':'or'
				  (_cor6, _cor5)
		  -| [{'id',{0,0,'-format_exception/4-fun-0-'}}] )
	    in  let <_cor17> =
		    %% Line 729
		    call 'lib':'format_exception'
			(5, _cor3, _cor2, _cor1, %% Line 730
						 StackFun, %% Line 730
							   PF, _cor0)
		in  %% Line 729
		    [[32|[32|[32|[32]]]]|[_cor17|%% Line 730
						 [[10]]]]
'format_mfa'/1 =
    %% Line 732
    fun (_cor0) ->
	case _cor0 of
	  <StartF = {M,F,Args}> when 'true' ->
	      %% Line 733
	      try
		  let <A> =
		      %% Line 734
		      call 'erlang':'length'
			  (Args)
		  in  let <_cor2> =
			  %% Line 735
			  call 'erlang':'atom_to_list'
			      (M)
		      in  let <_cor3> =
			      %% Line 735
			      call 'erlang':'atom_to_list'
				  (F)
			  in  let <_cor4> =
				  %% Line 736
				  call 'erlang':'integer_to_list'
				      (A)
			      in  %% Line 735
				  [[32|[32|[32|[32|[105|[110|[105|[116|[105|[97|[108|[32|[99|[97|[108|[108|[58|[32]]]]]]]]]]]]]]]]]]|[_cor2|[58|[_cor3|[47|%% Line 736
																			   [_cor4|[[10]]]]]]]]
	      of <_cor5> ->
		  _cor5
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 738
		    <'error',_cor10,_cor11> when 'true' ->
			%% Line 739
			apply 'format_tag'/2
			    ('initial_call', StartF)
		    ( <_cor8,_cor7,_cor6> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'format_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'pp_fun'/1 =
    %% Line 742
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 743
	    apply 'modifier'/1
		(_cor0)
	in  let <P> =
		%% Line 743
		call 'erlang':'++'
		    (_cor1, [112])
	    in  %% Line 744
		( fun (_cor7,_cor6) ->
		      let <_cor3> =
			  %% Line 745
			  call 'erlang':'integer_to_list'
			      (_cor6)
		      in  let <_cor4> =
			      %% Line 745
			      call 'erlang':'++'
				  (_cor3, P)
			  in  let <_cor5> =
				  %% Line 745
				  [126|[46|_cor4]]
			      in  %% Line 745
				  call 'io_lib':'format'
				      (_cor5, [_cor7|[]])
		  -| [{'id',{0,0,'-pp_fun/1-fun-0-'}}] )
'format_tag'/2 =
    %% Line 748
    fun (_cor1,_cor0) ->
	%% Line 749
	call 'io_lib':'format'
	    ([32|[32|[32|[32|[126|[112|[58|[32|[126|[56|[48|[46|[49|[56|[112|[126|[110]]]]]]]]]]]]]]]]], [_cor1|[_cor0|[]]])
'modifier'/1 =
    %% Line 751
    fun (_cor0) ->
	case _cor0 of
	  <'latin1'> when 'true' ->
	      []
	  %% Line 752
	  <_cor2> when 'true' ->
	      [116]
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('proc_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('proc_lib', _cor0)
end