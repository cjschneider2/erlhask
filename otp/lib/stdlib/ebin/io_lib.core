module 'io_lib' ['char_list'/1,
		 'collect_chars'/3,
		 'collect_chars'/4,
		 'collect_line'/2,
		 'collect_line'/3,
		 'collect_line'/4,
		 'deep_char_list'/1,
		 'deep_latin1_char_list'/1,
		 'deep_unicode_char_list'/1,
		 'format'/2,
		 'format_prompt'/1,
		 'format_prompt'/2,
		 'fread'/2,
		 'fread'/3,
		 'fwrite'/2,
		 'get_until'/3,
		 'get_until'/4,
		 'indentation'/2,
		 'latin1_char_list'/1,
		 'module_info'/0,
		 'module_info'/1,
		 'nl'/0,
		 'print'/1,
		 'print'/4,
		 'printable_latin1_list'/1,
		 'printable_list'/1,
		 'printable_unicode_list'/1,
		 'quote_atom'/2,
		 'write'/1,
		 'write'/2,
		 'write'/3,
		 'write_atom'/1,
		 'write_char'/1,
		 'write_char_as_latin1'/1,
		 'write_latin1_char'/1,
		 'write_latin1_string'/1,
		 'write_latin1_string'/2,
		 'write_string'/1,
		 'write_string'/2,
		 'write_string_as_latin1'/1,
		 'write_string_as_latin1'/2,
		 'write_unicode_char'/1,
		 'write_unicode_string'/1]
    attributes [%% Line 85
		'export_type' =
		    %% Line 85
		    [{'chars',0}|[{'latin1_string',0}|[{'continuation',0}|[{'fread_error',0}|[{'fread_item',0}]]]]],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'chars',{'type',90,'list',[{'type',90,'union',[{'type',90,'char',[]}|[{'type',90,'chars',[]}]]}]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'latin1_string',{'type',91,'list',[{'remote_type',91,[{'atom',91,'unicode'}|[{'atom',91,'latin1_char'}|[[]]]]}]},[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{'depth',{'type',92,'union',[{'op',92,'-',{'integer',92,1}}|[{'type',92,'non_neg_integer',[]}]]},[]}],
		%% Line 94
		'opaque' =
		    %% Line 94
		    [{'continuation',{'type',94,'tuple',[{'ann_type',94,[{'var',94,'Format'}|[{'type',94,'string',[]}]]}|[{'ann_type',95,[{'var',95,'Stack'}|[{'type',95,'chars',[]}]]}|[{'ann_type',96,[{'var',96,'Nchars'}|[{'type',96,'non_neg_integer',[]}]]}|[{'ann_type',97,[{'var',97,'Results'}|[{'type',97,'list',[{'type',97,'term',[]}]}]]}]]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'fread_error',{'type',99,'union',[{'atom',99,'atom'}|[{'atom',100,'based'}|[{'atom',101,'character'}|[{'atom',102,'float'}|[{'atom',103,'format'}|[{'atom',104,'input'}|[{'atom',105,'integer'}|[{'atom',106,'string'}|[{'atom',107,'unsigned'}]]]]]]]]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'fread_item',{'type',109,'union',[{'type',109,'string',[]}|[{'type',109,'atom',[]}|[{'type',109,'integer',[]}|[{'type',109,'float',[]}]]]]},[]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'fwrite',2},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'Format'}|[{'var',115,'Data'}]]}|[{'type',115,'chars',[]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Format'}|[{'remote_type',116,[{'atom',116,'io'}|[{'atom',116,'format'}|[[]]]]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Data'}|[{'type',117,'list',[{'type',117,'term',[]}]}]]]]}]]]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'fread',2},[{'type',122,'bounded_fun',[{'type',122,'fun',[{'type',122,'product',[{'var',122,'Format'}|[{'var',122,'String'}]]}|[{'var',122,'Result'}]]}|[[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Format'}|[{'type',123,'string',[]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'String'}|[{'type',124,'string',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'Result'}|[{'type',125,'union',[{'type',125,'tuple',[{'atom',125,'ok'}|[{'ann_type',125,[{'var',125,'InputList'}|[{'type',125,'list',[{'type',125,'fread_item',[]}]}]]}|[{'ann_type',125,[{'var',125,'LeftOverChars'}|[{'type',125,'string',[]}]]}]]]}|[{'type',126,'tuple',[{'atom',126,'more'}|[{'ann_type',126,[{'var',126,'RestFormat'}|[{'type',126,'string',[]}]]}|[{'ann_type',127,[{'var',127,'Nchars'}|[{'type',127,'non_neg_integer',[]}]]}|[{'ann_type',128,[{'var',128,'InputStack'}|[{'type',128,'chars',[]}]]}]]]]}|[{'type',129,'tuple',[{'atom',129,'error'}|[{'type',129,'tuple',[{'atom',129,'fread'}|[{'ann_type',129,[{'var',129,'What'}|[{'type',129,'fread_error',[]}]]}]]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'fread',3},[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'Continuation'}|[{'var',134,'CharSpec'}|[{'var',134,'Format'}]]]}|[{'var',134,'Return'}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Continuation'}|[{'type',135,'union',[{'type',135,'continuation',[]}|[{'type',135,'nil',[]}]]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'CharSpec'}|[{'type',136,'union',[{'type',136,'string',[]}|[{'atom',136,'eof'}]]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Format'}|[{'type',137,'string',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Return'}|[{'type',138,'union',[{'type',138,'tuple',[{'atom',138,'more'}|[{'ann_type',138,[{'var',138,'Continuation1'}|[{'type',138,'continuation',[]}]]}]]}|[{'type',139,'tuple',[{'atom',139,'done'}|[{'var',139,'Result'}|[{'ann_type',139,[{'var',139,'LeftOverChars'}|[{'type',139,'string',[]}]]}]]]}]]}]]]]}|[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Result'}|[{'type',140,'union',[{'type',140,'tuple',[{'atom',140,'ok'}|[{'ann_type',140,[{'var',140,'InputList'}|[{'type',140,'list',[{'type',140,'fread_item',[]}]}]]}]]}|[{'atom',141,'eof'}|[{'type',142,'tuple',[{'atom',142,'error'}|[{'type',142,'tuple',[{'atom',142,'fread'}|[{'ann_type',142,[{'var',142,'What'}|[{'type',142,'fread_error',[]}]]}]]}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'format',2},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'Format'}|[{'var',147,'Data'}]]}|[{'type',147,'chars',[]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Format'}|[{'remote_type',148,[{'atom',148,'io'}|[{'atom',148,'format'}|[[]]]]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Data'}|[{'type',149,'list',[{'type',149,'term',[]}]}]]]]}]]]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'print',1},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'Term'}]}|[{'type',159,'chars',[]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Term'}|[{'type',160,'term',[]}]]]]}]]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'print',4},[{'type',165,'bounded_fun',[{'type',165,'fun',[{'type',165,'product',[{'var',165,'Term'}|[{'var',165,'Column'}|[{'var',165,'LineLength'}|[{'var',165,'Depth'}]]]]}|[{'type',165,'chars',[]}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Term'}|[{'type',166,'term',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Column'}|[{'type',167,'non_neg_integer',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'LineLength'}|[{'type',168,'non_neg_integer',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Depth'}|[{'type',169,'depth',[]}]]]]}]]]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'indentation',2},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'String'}|[{'var',174,'StartIndent'}]]}|[{'type',174,'integer',[]}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'String'}|[{'type',175,'string',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'StartIndent'}|[{'type',176,'integer',[]}]]]]}]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'format_prompt',1},[{'type',186,'fun',[{'type',186,'product',[{'type',186,'term',[]}]}|[{'type',186,'chars',[]}]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'format_prompt',2},[{'type',191,'fun',[{'type',191,'product',[{'type',191,'term',[]}|[{'type',191,'atom',[]}]]}|[{'type',191,'chars',[]}]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'write',1},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[{'var',218,'Term'}]}|[{'type',218,'chars',[]}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Term'}|[{'type',219,'term',[]}]]]]}]]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'write',3},[{'type',223,'fun',[{'type',223,'product',[{'type',223,'term',[]}|[{'type',223,'depth',[]}|[{'type',223,'boolean',[]}]]]}|[{'type',223,'chars',[]}]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'write',2},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'Term'}|[{'var',230,'Depth'}]]}|[{'type',230,'chars',[]}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Term'}|[{'type',231,'term',[]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Depth'}|[{'type',232,'depth',[]}]]]]}]]]]}]}],
		%% Line 311
		'spec' =
		    %% Line 311
		    [{{'write_atom',1},[{'type',311,'bounded_fun',[{'type',311,'fun',[{'type',311,'product',[{'var',311,'Atom'}]}|[{'type',311,'chars',[]}]]}|[[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Atom'}|[{'type',312,'atom',[]}]]]]}]]]}]}],
		%% Line 327
		'spec' =
		    %% Line 327
		    [{{'quote_atom',2},[{'type',327,'fun',[{'type',327,'product',[{'type',327,'atom',[]}|[{'type',327,'chars',[]}]]}|[{'type',327,'boolean',[]}]]}]}],
		%% Line 366
		'spec' =
		    %% Line 366
		    [{{'write_string',1},[{'type',366,'bounded_fun',[{'type',366,'fun',[{'type',366,'product',[{'var',366,'String'}]}|[{'type',366,'chars',[]}]]}|[[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'String'}|[{'type',367,'string',[]}]]]]}]]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'write_string',2},[{'type',372,'fun',[{'type',372,'product',[{'type',372,'string',[]}|[{'type',372,'char',[]}]]}|[{'type',372,'chars',[]}]]}]}],
		%% Line 381
		'spec' =
		    %% Line 381
		    [{{'write_latin1_string',1},[{'type',381,'bounded_fun',[{'type',381,'fun',[{'type',381,'product',[{'var',381,'Latin1String'}]}|[{'type',381,'latin1_string',[]}]]}|[[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'Latin1String'}|[{'type',382,'latin1_string',[]}]]]]}]]]}]}],
		%% Line 387
		'spec' =
		    %% Line 387
		    [{{'write_latin1_string',2},[{'type',387,'fun',[{'type',387,'product',[{'type',387,'latin1_string',[]}|[{'type',387,'char',[]}]]}|[{'type',387,'latin1_string',[]}]]}]}],
		%% Line 392
		'spec' =
		    %% Line 392
		    [{{'write_string_as_latin1',1},[{'type',392,'bounded_fun',[{'type',392,'fun',[{'type',392,'product',[{'var',392,'String'}]}|[{'type',392,'latin1_string',[]}]]}|[[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'String'}|[{'type',393,'string',[]}]]]]}]]]}]}],
		%% Line 398
		'spec' =
		    %% Line 398
		    [{{'write_string_as_latin1',2},[{'type',398,'fun',[{'type',398,'product',[{'type',398,'string',[]}|[{'type',398,'char',[]}]]}|[{'type',398,'latin1_string',[]}]]}]}],
		%% Line 443
		'spec' =
		    %% Line 443
		    [{{'write_char',1},[{'type',443,'bounded_fun',[{'type',443,'fun',[{'type',443,'product',[{'var',443,'Char'}]}|[{'type',443,'chars',[]}]]}|[[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'Char'}|[{'type',444,'char',[]}]]]]}]]]}]}],
		%% Line 454
		'spec' =
		    %% Line 454
		    [{{'write_latin1_char',1},[{'type',454,'bounded_fun',[{'type',454,'fun',[{'type',454,'product',[{'var',454,'Latin1Char'}]}|[{'type',454,'latin1_string',[]}]]}|[[{'type',455,'constraint',[{'atom',455,'is_subtype'}|[[{'var',455,'Latin1Char'}|[{'remote_type',455,[{'atom',455,'unicode'}|[{'atom',455,'latin1_char'}|[[]]]]}]]]]}]]]}]}],
		%% Line 460
		'spec' =
		    %% Line 460
		    [{{'write_char_as_latin1',1},[{'type',460,'bounded_fun',[{'type',460,'fun',[{'type',460,'product',[{'var',460,'Char'}]}|[{'type',460,'latin1_string',[]}]]}|[[{'type',461,'constraint',[{'atom',461,'is_subtype'}|[[{'var',461,'Char'}|[{'type',461,'char',[]}]]]]}]]]}]}],
		%% Line 471
		'spec' =
		    %% Line 471
		    [{{'latin1_char_list',1},[{'type',471,'bounded_fun',[{'type',471,'fun',[{'type',471,'product',[{'var',471,'Term'}]}|[{'type',471,'boolean',[]}]]}|[[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'Term'}|[{'type',472,'term',[]}]]]]}]]]}]}],
		%% Line 479
		'spec' =
		    %% Line 479
		    [{{'char_list',1},[{'type',479,'bounded_fun',[{'type',479,'fun',[{'type',479,'product',[{'var',479,'Term'}]}|[{'type',479,'boolean',[]}]]}|[[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'Term'}|[{'type',480,'term',[]}]]]]}]]]}]}],
		%% Line 489
		'spec' =
		    %% Line 489
		    [{{'deep_latin1_char_list',1},[{'type',489,'bounded_fun',[{'type',489,'fun',[{'type',489,'product',[{'var',489,'Term'}]}|[{'type',489,'boolean',[]}]]}|[[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'Term'}|[{'type',490,'term',[]}]]]]}]]]}]}],
		%% Line 505
		'spec' =
		    %% Line 505
		    [{{'deep_char_list',1},[{'type',505,'bounded_fun',[{'type',505,'fun',[{'type',505,'product',[{'var',505,'Term'}]}|[{'type',505,'boolean',[]}]]}|[[{'type',506,'constraint',[{'atom',506,'is_subtype'}|[[{'var',506,'Term'}|[{'type',506,'term',[]}]]]]}]]]}]}],
		%% Line 531
		'spec' =
		    %% Line 531
		    [{{'printable_latin1_list',1},[{'type',531,'bounded_fun',[{'type',531,'fun',[{'type',531,'product',[{'var',531,'Term'}]}|[{'type',531,'boolean',[]}]]}|[[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Term'}|[{'type',532,'term',[]}]]]]}]]]}]}],
		%% Line 559
		'spec' =
		    %% Line 559
		    [{{'printable_list',1},[{'type',559,'bounded_fun',[{'type',559,'fun',[{'type',559,'product',[{'var',559,'Term'}]}|[{'type',559,'boolean',[]}]]}|[[{'type',560,'constraint',[{'atom',560,'is_subtype'}|[[{'var',560,'Term'}|[{'type',560,'term',[]}]]]]}]]]}]}],
		%% Line 572
		'spec' =
		    %% Line 572
		    [{{'printable_unicode_list',1},[{'type',572,'bounded_fun',[{'type',572,'fun',[{'type',572,'product',[{'var',572,'Term'}]}|[{'type',572,'boolean',[]}]]}|[[{'type',573,'constraint',[{'atom',573,'is_subtype'}|[[{'var',573,'Term'}|[{'type',573,'term',[]}]]]]}]]]}]}],
		%% Line 595
		'spec' =
		    %% Line 595
		    [{{'nl',0},[{'type',595,'fun',[{'type',595,'product',[]}|[{'type',595,'string',[]}]]}]}]]
'fwrite'/2 =
    %% Line 119
    fun (_cor1,_cor0) ->
	%% Line 120
	apply 'format'/2
	    (_cor1, _cor0)
'fread'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	%% Line 132
	call 'io_lib_fread':'fread'
	    (_cor1, _cor0)
'fread'/3 =
    %% Line 144
    fun (_cor2,_cor1,_cor0) ->
	%% Line 145
	call 'io_lib_fread':'fread'
	    (_cor2, _cor1, _cor0)
'format'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 152
		call 'io_lib_format':'fwrite'
		    (_cor1, _cor0)
	in  %% Line 152
	    case _cor2 of
	      %% Line 153
	      <{'EXIT',_cor6}> when 'true' ->
		  %% Line 154
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      %% Line 155
	      <Other> when 'true' ->
		  %% Line 156
		  Other
	    end
'print'/1 =
    %% Line 162
    fun (_cor0) ->
	%% Line 163
	call 'io_lib_pretty':'print'
	    (_cor0)
'print'/4 =
    %% Line 171
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 172
	call 'io_lib_pretty':'print'
	    (_cor3, _cor2, _cor1, _cor0)
'indentation'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	%% Line 179
	call 'io_lib_format':'indentation'
	    (_cor1, _cor0)
'format_prompt'/1 =
    %% Line 188
    fun (_cor0) ->
	%% Line 189
	apply 'format_prompt'/2
	    (_cor0, 'latin1')
'format_prompt'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'format',Format,Args},_X_Encoding> when 'true' ->
	      %% Line 194
	      apply 'do_format_prompt'/2
		  (Format, Args)
	  %% Line 195
	  <Prompt,Encoding>
	      when let <_cor2> =
		    %% Line 196
		    call 'erlang':'is_list'
			(Prompt)
		in  let <_cor3> =
			%% Line 196
			call 'erlang':'is_atom'
			    (Prompt)
		    in  let <_cor4> =
			    %% Line 196
			    call 'erlang':'is_binary'
				(Prompt)
			in  let <_cor5> =
				%% Line 196
				call 'erlang':'or'
				    (_cor3, _cor4)
			    in  %% Line 196
				call 'erlang':'or'
				    (_cor2, _cor5) ->
	      let <_cor6> =
		  %% Line 197
		  apply 'add_modifier'/2
		      (Encoding, [115])
	      in  %% Line 197
		  apply 'do_format_prompt'/2
		      (_cor6, [Prompt|[]])
	  %% Line 198
	  <Prompt,Encoding> when 'true' ->
	      let <_cor7> =
		  %% Line 199
		  apply 'add_modifier'/2
		      (Encoding, [112])
	      in  %% Line 199
		  apply 'do_format_prompt'/2
		      (_cor7, [Prompt|[]])
	end
'do_format_prompt'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 202
		call 'io_lib':'format'
		    (_cor1, _cor0)
	in  %% Line 202
	    case _cor2 of
	      %% Line 203
	      <{'EXIT',_cor6}> when 'true' ->
		  [63|[63|[63]]]
	      %% Line 204
	      <List> when 'true' ->
		  List
	    end
'add_modifier'/2 =
    %% Line 207
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'latin1',C> when 'true' ->
	      %% Line 208
	      [126|C]
	  %% Line 209
	  <_cor4,C> when 'true' ->
	      %% Line 210
	      [126|[116|C]]
	end
'write'/1 =
    %% Line 221
    fun (_cor0) ->
	apply 'write'/2
	    (_cor0, -1)
'write'/3 =
    %% Line 225
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Term,D,'true'> when 'true' ->
	      %% Line 226
	      call 'io_lib_pretty':'print'
		  (Term, 1, 80, D)
	  %% Line 227
	  <Term,D,'false'> when 'true' ->
	      %% Line 228
	      apply 'write'/2
		  (Term, D)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'write',3}}] )
	    -| ['compiler_generated'] )
	end
'write'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Term,0> when 'true' ->
	      [46|[46|[46]]]
	  %% Line 235
	  <Term,_X_D>
	      when call 'erlang':'is_integer'
		    (Term) ->
	      call 'erlang':'integer_to_list'
		  (Term)
	  %% Line 236
	  <Term,_X_D>
	      when call 'erlang':'is_float'
		    (Term) ->
	      call 'io_lib_format':'fwrite_g'
		  (Term)
	  %% Line 237
	  <Atom,_X_D>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      apply 'write_atom'/1
		  (Atom)
	  %% Line 238
	  <Term,_X_D>
	      when call 'erlang':'is_port'
		    (Term) ->
	      apply 'write_port'/1
		  (Term)
	  %% Line 239
	  <Term,_X_D>
	      when call 'erlang':'is_pid'
		    (Term) ->
	      call 'erlang':'pid_to_list'
		  (Term)
	  %% Line 240
	  <Term,_X_D>
	      when call 'erlang':'is_reference'
		    (Term) ->
	      apply 'write_ref'/1
		  (Term)
	  %% Line 241
	  <Term = #{#<_cor15>('all',1,'binary',['unsigned'|['big']])}#,D> when 'true' ->
	      apply 'write_binary'/2
		  (Term, D)
	  %% Line 242
	  <[],_X_D> when 'true' ->
	      [91|[93]]
	  %% Line 243
	  <{},_X_D> when 'true' ->
	      [123|[125]]
	  %% Line 244
	  <[H|T],D> when 'true' ->
	      %% Line 245
	      case <> of
		%% Line 246
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    [91|[46|[46|[46|[93]]]]]
		%% Line 247
		<> when 'true' ->
		    let <_cor2> =
			%% Line 248
			call 'erlang':'-'
			    (D, 1)
		    in  let <_cor3> =
			    %% Line 248
			    apply 'write'/2
				(H, _cor2)
			in  let <_cor4> =
				%% Line 248
				call 'erlang':'-'
				    (D, 1)
			    in  let <_cor5> =
				    %% Line 248
				    apply 'write_tail'/3
					(T, _cor4, 124)
				in  %% Line 248
				    [91|[[_cor3|_cor5]|[93]]]
	      end
	  %% Line 250
	  <F,_X_D>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 251
	      call 'erlang':'fun_to_list'
		  (F)
	  %% Line 252
	  <T,D>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      %% Line 253
	      case <> of
		%% Line 254
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    [123|[46|[46|[46|[125]]]]]
		%% Line 255
		<> when 'true' ->
		    let <_cor7> =
			%% Line 257
			call 'erlang':'element'
			    (1, T)
		    in  let <_cor6> =
			    %% Line 257
			    call 'erlang':'-'
				(D, 1)
			in  let <_cor8> =
				%% Line 257
				apply 'write'/2
				    (_cor7, _cor6)
			    in  let <_cor10> =
				    %% Line 258
				    call 'erlang':'tuple_to_list'
					(T)
				in  let <_cor11> =
					%% Line 258
					call 'erlang':'tl'
					    (_cor10)
				    in  let <_cor9> =
					    %% Line 258
					    call 'erlang':'-'
						(D, 1)
					in  let <_cor12> =
						%% Line 258
						apply 'write_tail'/3
						    (_cor11, _cor9, 44)
					    in  %% Line 256
						[123|%% Line 257
						     [[_cor8|_cor12]|%% Line 259
								     [125]]]
	      end
	  %% Line 262
	  <Term,D> when 'true' ->
	      apply 'write_map'/2
		  (Term, D)
	end
'write_tail'/3 =
    %% Line 267
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_D,_X_S> when 'true' ->
	      []
	  %% Line 268
	  <_cor12,1,S> when 'true' ->
	      [S|[46|[46|[46]]]]
	  %% Line 269
	  <[H|T],D,S> when 'true' ->
	      let <_cor3> =
		  %% Line 270
		  call 'erlang':'-'
		      (D, 1)
	      in  let <_cor4> =
		      %% Line 270
		      apply 'write'/2
			  (H, _cor3)
		  in  let <_cor5> =
			  %% Line 270
			  call 'erlang':'-'
			      (D, 1)
		      in  let <_cor6> =
			      %% Line 270
			      apply 'write_tail'/3
				  (T, _cor5, S)
			  in  %% Line 270
			      [44|[_cor4|_cor6]]
	  %% Line 271
	  <Other,D,S> when 'true' ->
	      let <_cor7> =
		  %% Line 272
		  call 'erlang':'-'
		      (D, 1)
	      in  let <_cor8> =
		      %% Line 272
		      apply 'write'/2
			  (Other, _cor7)
		  in  %% Line 272
		      [S|[_cor8|[]]]
	end
'write_port'/1 =
    %% Line 274
    fun (_cor0) ->
	%% Line 275
	call 'erlang':'port_to_list'
	    (_cor0)
'write_ref'/1 =
    %% Line 277
    fun (_cor0) ->
	%% Line 278
	call 'erlang':'ref_to_list'
	    (_cor0)
'write_map'/2 =
    %% Line 280
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Map,D>
	      when call 'erlang':'is_integer'
		    (D) ->
	      let <_cor2> =
		  %% Line 281
		  call 'maps':'to_list'
		      (Map)
	      in  let <_cor3> =
		      %% Line 281
		      apply 'write_map_body'/2
			  (_cor2, D)
		  in  %% Line 281
		      [35|[123|[_cor3|[125]]]]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'write_map',2}}] )
	    -| ['compiler_generated'] )
	end
'write_map_body'/2 =
    %% Line 283
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor7,0> when 'true' ->
	      [46|[46|[46]]]
	  %% Line 284
	  <[],_cor8> when 'true' ->
	      []
	  %% Line 285
	  <[{K,V}|[]],D> when 'true' ->
	      apply 'write_map_assoc'/3
		  (K, V, D)
	  %% Line 286
	  <[{K,V}|KVs],D> when 'true' ->
	      let <_cor2> =
		  %% Line 287
		  apply 'write_map_assoc'/3
		      (K, V, D)
	      in  let <_cor3> =
		      %% Line 287
		      call 'erlang':'-'
			  (D, 1)
		  in  let <_cor4> =
			  %% Line 287
			  apply 'write_map_body'/2
			      (KVs, _cor3)
		      in  %% Line 287
			  [_cor2|[44|_cor4]]
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'write_map_body',2}}] )
	    -| ['compiler_generated'] )
	end
'write_map_assoc'/3 =
    %% Line 289
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 290
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor4> =
		%% Line 290
		apply 'write'/2
		    (_cor2, _cor3)
	    in  let <_cor5> =
		    %% Line 290
		    call 'erlang':'-'
			(_cor0, 1)
		in  let <_cor6> =
			%% Line 290
			apply 'write'/2
			    (_cor1, _cor5)
		    in  %% Line 290
			[_cor4|[[61|[62]]|[_cor6|[]]]]
'write_binary'/2 =
    %% Line 292
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <B,D>
	      when call 'erlang':'is_integer'
		    (D) ->
	      let <_cor2> =
		  %% Line 293
		  apply 'write_binary_body'/2
		      (B, D)
	      in  %% Line 293
		  [60|[60|[_cor2|[62|[62]]]]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'write_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'write_binary_body'/2 =
    %% Line 295
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,_X_D> when 'true' ->
	      %% Line 296
	      []
	  %% Line 297
	  <_X_B,1> when 'true' ->
	      %% Line 298
	      [46|[46|[46]]]
	  %% Line 299
	  <#{#<X>(8,1,'integer',['unsigned'|['big']])}#,_X_D> when 'true' ->
	      let <_cor2> =
		  %% Line 300
		  call 'erlang':'integer_to_list'
		      (X)
	      in  %% Line 300
		  [_cor2|[]]
	  %% Line 301
	  <#{#<X>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',1,'binary',['unsigned'|['big']])}#,D> when 'true' ->
	      let <_cor3> =
		  %% Line 302
		  call 'erlang':'integer_to_list'
		      (X)
	      in  let <_cor4> =
		      %% Line 302
		      call 'erlang':'-'
			  (D, 1)
		  in  let <_cor5> =
			  %% Line 302
			  apply 'write_binary_body'/2
			      (Rest, _cor4)
		      in  %% Line 302
			  [_cor3|[44|_cor5]]
	  %% Line 303
	  <B,_X_D> when 'true' ->
	      let <L> =
		  %% Line 304
		  call 'erlang':'bit_size'
		      (B)
	      in  %% Line 305
		  case ( B
			 -| ['reuse_for_context'] ) of
		    <#{#<X>(L,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			let <_cor8> =
			    %% Line 306
			    call 'erlang':'integer_to_list'
				(X)
			in  let <_cor9> =
				%% Line 306
				call 'erlang':'integer_to_list'
				    (L)
			    in  %% Line 306
				[_cor8|[58|[_cor9|[]]]]
		    ( <_cor7> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor7)
			      primop 'match_fail'
				  ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	end
'write_atom'/1 =
    %% Line 314
    fun (_cor0) ->
	let <Chars> =
	    %% Line 315
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  %% Line 316
	    case apply 'quote_atom'/2
		     (_cor0, Chars) of
	      %% Line 317
	      <'true'> when 'true' ->
		  %% Line 318
		  apply 'write_string'/2
		      (Chars, 39)
	      %% Line 319
	      <'false'> when 'true' ->
		  %% Line 320
		  Chars
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'quote_atom'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	%% Line 330
	case call 'erl_scan':'reserved_word'
		 (_cor1) of
	  %% Line 331
	  <'true'> when 'true' ->
	      'true'
	  %% Line 332
	  <'false'> when 'true' ->
	      %% Line 333
	      case _cor0 of
		%% Line 334
		<[C|Cs]>
		    when let <_cor2> =
			  call 'erlang':'>='
			      (C, 97)
		      in  let <_cor3> =
			      call 'erlang':'=<'
				  (C, 122)
			  in  call 'erlang':'and'
				  (_cor2, _cor3) ->
		    let <_cor4> =
			%% Line 335
			apply 'name_chars'/1
			    (Cs)
		    in  %% Line 335
			call 'erlang':'not'
			    (_cor4)
		%% Line 336
		<[C|Cs]>
		    when try
			  let <_cor5> =
			      call 'erlang':'>='
				  (C, 223)
			  in  let <_cor6> =
				  call 'erlang':'=<'
				      (C, 255)
			      in  let <_cor7> =
				      call 'erlang':'=/='
					  (C, 247)
				  in  let <_cor8> =
					  call 'erlang':'and'
					      (_cor6, _cor7)
				      in  call 'erlang':'and'
					      (_cor5, _cor8)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor9> =
			%% Line 337
			apply 'name_chars'/1
			    (Cs)
		    in  %% Line 337
			call 'erlang':'not'
			    (_cor9)
		%% Line 338
		<_cor14> when 'true' ->
		    'true'
	      end
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'name_chars'/1 =
    %% Line 342
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]> when 'true' ->
	      %% Line 343
	      case apply 'name_char'/1
		       (C) of
		%% Line 344
		<'true'> when 'true' ->
		    apply 'name_chars'/1
			(Cs)
		%% Line 345
		<'false'> when 'true' ->
		    'false'
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 347
	  <[]> when 'true' ->
	      'true'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'name_chars',1}}] )
	    -| ['compiler_generated'] )
	end
'name_char'/1 =
    %% Line 349
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 350
	  <C>
	      when try
		    let <_cor3> =
			call 'erlang':'>='
			    (_cor0, 223)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(_cor0, 255)
			in  let <_cor5> =
				call 'erlang':'=/='
				    (_cor0, 247)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 351
	  <C>
	      when let <_cor7> =
		    call 'erlang':'>='
			(_cor0, 65)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (_cor0, 90)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      'true'
	  %% Line 352
	  <C>
	      when try
		    let <_cor9> =
			call 'erlang':'>='
			    (_cor0, 192)
		    in  let <_cor10> =
			    call 'erlang':'=<'
				(_cor0, 222)
			in  let <_cor11> =
				call 'erlang':'=/='
				    (_cor0, 215)
			    in  let <_cor12> =
				    call 'erlang':'and'
					(_cor10, _cor11)
				in  call 'erlang':'and'
					(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 353
	  <C>
	      when let <_cor13> =
		    call 'erlang':'>='
			(_cor0, 48)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (_cor0, 57)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      'true'
	  %% Line 354
	  <95> when 'true' ->
	      'true'
	  %% Line 355
	  <64> when 'true' ->
	      'true'
	  %% Line 356
	  <_cor16> when 'true' ->
	      'false'
	end
'write_string'/1 =
    %% Line 369
    fun (_cor0) ->
	%% Line 370
	apply 'write_string'/2
	    (_cor0, 34)
'write_string'/2 =
    %% Line 374
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 375
	    apply 'write_string1'/3
		('unicode_as_unicode', _cor1, _cor0)
	in  %% Line 375
	    [_cor0|_cor2]
'write_unicode_string'/1 =
    %% Line 378
    fun (_cor0) ->
	%% Line 379
	apply 'write_string'/1
	    (_cor0)
'write_latin1_string'/1 =
    %% Line 384
    fun (_cor0) ->
	%% Line 385
	apply 'write_latin1_string'/2
	    (_cor0, 34)
'write_latin1_string'/2 =
    %% Line 389
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 390
	    apply 'write_string1'/3
		('latin1', _cor1, _cor0)
	in  %% Line 390
	    [_cor0|_cor2]
'write_string_as_latin1'/1 =
    %% Line 395
    fun (_cor0) ->
	%% Line 396
	apply 'write_string_as_latin1'/2
	    (_cor0, 34)
'write_string_as_latin1'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 401
	    apply 'write_string1'/3
		('unicode_as_latin1', _cor1, _cor0)
	in  %% Line 401
	    [_cor0|_cor2]
'write_string1'/3 =
    %% Line 403
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor7,[],Q> when 'true' ->
	      %% Line 404
	      [Q|[]]
	  %% Line 405
	  <Enc,[C|Cs],Q> when 'true' ->
	      let <_cor3> =
		  %% Line 406
		  apply 'write_string1'/3
		      (Enc, Cs, Q)
	      in  %% Line 406
		  apply 'string_char'/4
		      (Enc, C, Q, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'write_string1',3}}] )
	    -| ['compiler_generated'] )
	end
'string_char'/4 =
    %% Line 408
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor24,Q,_cor25,Tail>
	      when call 'erlang':'=:='
		    (_cor25,
		     Q) ->
	      [92|[Q|Tail]]
	  %% Line 409
	  <_cor26,92,_cor27,Tail> when 'true' ->
	      [92|[92|Tail]]
	  %% Line 410
	  <_cor28,C,_cor29,Tail>
	      when let <_cor4> =
		    call 'erlang':'>='
			(C, 32)
		in  let <_cor5> =
			call 'erlang':'=<'
			    (C, 126)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 411
	      [C|Tail]
	  %% Line 412
	  <'latin1',C,_cor30,Tail>
	      when let <_cor6> =
		    call 'erlang':'>='
			(C, 160)
		in  let <_cor7> =
			call 'erlang':'=<'
			    (C, 255)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 413
	      [C|Tail]
	  %% Line 414
	  <'unicode_as_unicode',C,_cor31,Tail>
	      when call 'erlang':'>='
		    (C,
		     160) ->
	      %% Line 415
	      [C|Tail]
	  %% Line 416
	  <'unicode_as_latin1',C,_cor32,Tail>
	      when let <_cor8> =
		    call 'erlang':'>='
			(C, 160)
		in  let <_cor9> =
			call 'erlang':'=<'
			    (C, 255)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 417
	      [C|Tail]
	  %% Line 418
	  <'unicode_as_latin1',C,_cor33,Tail>
	      when call 'erlang':'>='
		    (C,
		     255) ->
	      let <_cor11> =
		  %% Line 419
		  call 'erlang':'integer_to_list'
		      (C, 16)
	      in  let <_cor10> =
		      %% Line 419
		      [125|Tail]
		  in  let <_cor12> =
			  %% Line 419
			  call 'erlang':'++'
			      (_cor11, _cor10)
		      in  %% Line 419
			  [92|[120|[123|_cor12]]]
	  %% Line 420
	  <_cor34,10,_cor35,Tail> when 'true' ->
	      [92|[110|Tail]]
	  %% Line 421
	  <_cor36,13,_cor37,Tail> when 'true' ->
	      [92|[114|Tail]]
	  %% Line 422
	  <_cor38,9,_cor39,Tail> when 'true' ->
	      [92|[116|Tail]]
	  %% Line 423
	  <_cor40,11,_cor41,Tail> when 'true' ->
	      [92|[118|Tail]]
	  %% Line 424
	  <_cor42,8,_cor43,Tail> when 'true' ->
	      [92|[98|Tail]]
	  %% Line 425
	  <_cor44,12,_cor45,Tail> when 'true' ->
	      [92|[102|Tail]]
	  %% Line 426
	  <_cor46,27,_cor47,Tail> when 'true' ->
	      [92|[101|Tail]]
	  %% Line 427
	  <_cor48,127,_cor49,Tail> when 'true' ->
	      [92|[100|Tail]]
	  %% Line 428
	  <_cor50,C,_cor51,Tail>
	      when call 'erlang':'<'
		    (C,
		     160) ->
	      let <_cor13> =
		  %% Line 429
		  call 'erlang':'bsr'
		      (C, 6)
	      in  let <C1> =
		      %% Line 429
		      call 'erlang':'+'
			  (_cor13, 48)
		  in  let <_cor15> =
			  %% Line 430
			  call 'erlang':'bsr'
			      (C, 3)
		      in  let <_cor16> =
			      %% Line 430
			      call 'erlang':'band'
				  (_cor15, 7)
			  in  let <C2> =
				  %% Line 430
				  call 'erlang':'+'
				      (_cor16, 48)
			      in  let <_cor18> =
				      %% Line 431
				      call 'erlang':'band'
					  (C, 7)
				  in  let <C3> =
					  %% Line 431
					  call 'erlang':'+'
					      (_cor18, 48)
				      in  %% Line 432
					  [92|[C1|[C2|[C3|Tail]]]]
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'string_char',4}}] )
	    -| ['compiler_generated'] )
	end
'write_char'/1 =
    %% Line 446
    fun (_cor0) ->
	case _cor0 of
	  <32> when 'true' ->
	      [36|[92|[115]]]
	  %% Line 447
	  <C>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor4> =
		  %% Line 448
		  apply 'string_char'/4
		      ('unicode_as_unicode', C, -1, [])
	      in  %% Line 448
		  [36|_cor4]
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'write_char',1}}] )
	    -| ['compiler_generated'] )
	end
'write_unicode_char'/1 =
    %% Line 451
    fun (_cor0) ->
	%% Line 452
	apply 'write_char'/1
	    (_cor0)
'write_latin1_char'/1 =
    %% Line 457
    fun (_cor0) ->
	case _cor0 of
	  <Lat1>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(_cor0, 0)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (_cor0, 255)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 458
		  apply 'string_char'/4
		      ('latin1', Lat1, -1, [])
	      in  %% Line 458
		  [36|_cor6]
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'write_latin1_char',1}}] )
	    -| ['compiler_generated'] )
	end
'write_char_as_latin1'/1 =
    %% Line 463
    fun (_cor0) ->
	case _cor0 of
	  <Uni>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor4> =
		  %% Line 464
		  apply 'string_char'/4
		      ('unicode_as_latin1', Uni, -1, [])
	      in  %% Line 464
		  [36|_cor4]
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'write_char_as_latin1',1}}] )
	    -| ['compiler_generated'] )
	end
'latin1_char_list'/1 =
    %% Line 474
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(C, 0)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 475
	      apply 'latin1_char_list'/1
		  (Cs)
	  %% Line 476
	  <[]> when 'true' ->
	      'true'
	  %% Line 477
	  <_cor6> when 'true' ->
	      'false'
	end
'char_list'/1 =
    %% Line 482
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when let <_cor5> =
		    try
			let <_cor1> =
			    call 'erlang':'is_integer'
				(C)
			in  let <_cor2> =
				call 'erlang':'>='
				    (C, 0)
			    in  let <_cor3> =
				    call 'erlang':'<'
					(C, 55296)
				in  let <_cor4> =
					call 'erlang':'and'
					    (_cor2, _cor3)
				    in  call 'erlang':'and'
					    (_cor1, _cor4)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor10> =
			%% Line 483
			try
			    let <_cor6> =
				call 'erlang':'is_integer'
				    (C)
			    in  let <_cor7> =
				    call 'erlang':'>'
					(C, 57343)
				in  let <_cor8> =
					call 'erlang':'<'
					    (C, 65534)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  call 'erlang':'and'
						(_cor6, _cor9)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor15> =
			    %% Line 484
			    try
				let <_cor11> =
				    call 'erlang':'is_integer'
					(C)
				in  let <_cor12> =
					call 'erlang':'>'
					    (C, 65535)
				    in  let <_cor13> =
					    call 'erlang':'=<'
						(C, 1114111)
					in  let <_cor14> =
						call 'erlang':'and'
						    (_cor12, _cor13)
					    in  call 'erlang':'and'
						    (_cor11, _cor14)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor16> =
				%% Line 483
				call 'erlang':'or'
				    (_cor10, _cor15)
			    in  call 'erlang':'or'
				    (_cor5, _cor16) ->
	      %% Line 485
	      apply 'char_list'/1
		  (Cs)
	  %% Line 486
	  <[]> when 'true' ->
	      'true'
	  %% Line 487
	  <_cor18> when 'true' ->
	      'false'
	end
'deep_latin1_char_list'/1 =
    %% Line 492
    fun (_cor0) ->
	%% Line 493
	apply 'deep_latin1_char_list'/2
	    (_cor0, [])
'deep_latin1_char_list'/2 =
    %% Line 495
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],More>
	      when call 'erlang':'is_list'
		    (C) ->
	      %% Line 496
	      apply 'deep_latin1_char_list'/2
		  (C, [Cs|More])
	  %% Line 497
	  <[C|Cs],More>
	      when try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_cor3> =
			    call 'erlang':'>='
				(C, 0)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 498
	      apply 'deep_latin1_char_list'/2
		  (Cs, More)
	  %% Line 499
	  <[],[Cs|More]> when 'true' ->
	      %% Line 500
	      apply 'deep_latin1_char_list'/2
		  (Cs, More)
	  %% Line 501
	  <[],[]> when 'true' ->
	      'true'
	  %% Line 502
	  <_cor8,_X_More> when 'true' ->
	      %% Line 503
	      'false'
	end
'deep_char_list'/1 =
    %% Line 508
    fun (_cor0) ->
	%% Line 509
	apply 'deep_char_list'/2
	    (_cor0, [])
'deep_char_list'/2 =
    %% Line 511
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],More>
	      when call 'erlang':'is_list'
		    (C) ->
	      %% Line 512
	      apply 'deep_char_list'/2
		  (C, [Cs|More])
	  %% Line 513
	  <[C|Cs],More>
	      when let <_cor6> =
		    %% Line 514
		    try
			let <_cor2> =
			    call 'erlang':'is_integer'
				(C)
			in  let <_cor3> =
				call 'erlang':'>='
				    (C, 0)
			    in  let <_cor4> =
				    call 'erlang':'<'
					(C, 55296)
				in  let <_cor5> =
					call 'erlang':'and'
					    (_cor3, _cor4)
				    in  call 'erlang':'and'
					    (_cor2, _cor5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor11> =
			%% Line 515
			try
			    let <_cor7> =
				call 'erlang':'is_integer'
				    (C)
			    in  let <_cor8> =
				    call 'erlang':'>'
					(C, 57343)
				in  let <_cor9> =
					call 'erlang':'<'
					    (C, 65534)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor8, _cor9)
					in  call 'erlang':'and'
						(_cor7, _cor10)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor16> =
			    %% Line 516
			    try
				let <_cor12> =
				    call 'erlang':'is_integer'
					(C)
				in  let <_cor13> =
					call 'erlang':'>'
					    (C, 65535)
				    in  let <_cor14> =
					    call 'erlang':'=<'
						(C, 1114111)
					in  let <_cor15> =
						call 'erlang':'and'
						    (_cor13, _cor14)
					    in  call 'erlang':'and'
						    (_cor12, _cor15)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor17> =
				%% Line 515
				call 'erlang':'or'
				    (_cor11, _cor16)
			    in  %% Line 514
				call 'erlang':'or'
				    (_cor6, _cor17) ->
	      %% Line 517
	      apply 'deep_char_list'/2
		  (Cs, More)
	  %% Line 518
	  <[],[Cs|More]> when 'true' ->
	      %% Line 519
	      apply 'deep_char_list'/2
		  (Cs, More)
	  %% Line 520
	  <[],[]> when 'true' ->
	      'true'
	  %% Line 521
	  <_cor20,_X_More> when 'true' ->
	      %% Line 522
	      'false'
	end
'deep_unicode_char_list'/1 =
    %% Line 524
    fun (_cor0) ->
	%% Line 525
	apply 'deep_char_list'/1
	    (_cor0)
'printable_latin1_list'/1 =
    %% Line 534
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(C, 32)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (C, 126)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 535
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 536
	  <[C|Cs]>
	      when try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_cor6> =
			    call 'erlang':'>='
				(C, 160)
			in  let <_cor7> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 537
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 538
	  <[10|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 539
	  <[13|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 540
	  <[9|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 541
	  <[11|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 542
	  <[8|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 543
	  <[12|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 544
	  <[27|Cs]> when 'true' ->
	      apply 'printable_latin1_list'/1
		  (Cs)
	  %% Line 545
	  <[]> when 'true' ->
	      'true'
	  %% Line 546
	  <_cor10> when 'true' ->
	      'false'
	end
'printable_list'/1 =
    %% Line 562
    fun (_cor0) ->
	%% Line 565
	case call 'io':'printable_range'
		 () of
	  %% Line 566
	  <'latin1'> when 'true' ->
	      %% Line 567
	      apply 'printable_latin1_list'/1
		  (_cor0)
	  %% Line 568
	  <'unicode'> when 'true' ->
	      %% Line 569
	      apply 'printable_unicode_list'/1
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'printable_unicode_list'/1 =
    %% Line 575
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(C, 32)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (C, 126)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 576
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 577
	  <[C|Cs]>
	      when let <_cor9> =
		    %% Line 578
		    try
			let <_cor5> =
			    call 'erlang':'is_integer'
				(C)
			in  let <_cor6> =
				call 'erlang':'>='
				    (C, 160)
			    in  let <_cor7> =
				    call 'erlang':'<'
					(C, 55296)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  call 'erlang':'and'
					    (_cor5, _cor8)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor14> =
			%% Line 579
			try
			    let <_cor10> =
				call 'erlang':'is_integer'
				    (C)
			    in  let <_cor11> =
				    call 'erlang':'>'
					(C, 57343)
				in  let <_cor12> =
					call 'erlang':'<'
					    (C, 65534)
				    in  let <_cor13> =
					    call 'erlang':'and'
						(_cor11, _cor12)
					in  call 'erlang':'and'
						(_cor10, _cor13)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor19> =
			    %% Line 580
			    try
				let <_cor15> =
				    call 'erlang':'is_integer'
					(C)
				in  let <_cor16> =
					call 'erlang':'>'
					    (C, 65535)
				    in  let <_cor17> =
					    call 'erlang':'=<'
						(C, 1114111)
					in  let <_cor18> =
						call 'erlang':'and'
						    (_cor16, _cor17)
					    in  call 'erlang':'and'
						    (_cor15, _cor18)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor20> =
				%% Line 579
				call 'erlang':'or'
				    (_cor14, _cor19)
			    in  %% Line 578
				call 'erlang':'or'
				    (_cor9, _cor20) ->
	      %% Line 581
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 582
	  <[10|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 583
	  <[13|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 584
	  <[9|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 585
	  <[11|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 586
	  <[8|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 587
	  <[12|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 588
	  <[27|Cs]> when 'true' ->
	      apply 'printable_unicode_list'/1
		  (Cs)
	  %% Line 589
	  <[]> when 'true' ->
	      'true'
	  %% Line 590
	  <_cor22> when 'true' ->
	      'false'
	end
'nl'/0 =
    %% Line 597
    fun () ->
	%% Line 598
	[10]
'count_and_find_utf8'/2 =
    %% Line 604
    fun (_cor1,_cor0) ->
	%% Line 605
	apply 'cafu'/5
	    (_cor1, _cor0, 0, 0, 'none')
'cafu'/5 =
    %% Line 607
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <#{}#,_X_N,Count,_X_ByteCount,SavePos> when 'true' ->
	      %% Line 608
	      {Count,SavePos}
	  %% Line 609
	  <#{#<_cor20>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,0,Count,ByteCount,_X_SavePos> when 'true' ->
	      let <_cor5> =
		  %% Line 610
		  call 'erlang':'+'
		      (Count, 1)
	      in  %% Line 610
		  apply 'cafu'/5
		      (Rest, -1, _cor5, 0, ByteCount)
	  %% Line 611
	  <#{#<_cor21>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Count,_X_ByteCount,SavePos>
	      when call 'erlang':'<'
		    (N,
		     0) ->
	      let <_cor7> =
		  %% Line 612
		  call 'erlang':'+'
		      (Count, 1)
	      in  %% Line 612
		  apply 'cafu'/5
		      (Rest, -1, _cor7, 0, SavePos)
	  %% Line 613
	  <Whole = #{#<_cor22>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Count,ByteCount,SavePos> when 'true' ->
	      let <_cor10> =
		  %% Line 614
		  call 'erlang':'byte_size'
		      (Whole)
	      in  let <_cor9> =
		      %% Line 614
		      call 'erlang':'byte_size'
			  (Rest)
		  in  let <Delta> =
			  %% Line 614
			  call 'erlang':'-'
			      (_cor10, _cor9)
		      in  let <_cor14> =
			      %% Line 615
			      call 'erlang':'-'
				  (N, 1)
			  in  let <_cor13> =
				  %% Line 615
				  call 'erlang':'+'
				      (Count, 1)
			      in  let <_cor12> =
				      %% Line 615
				      call 'erlang':'+'
					  (ByteCount, Delta)
				  in  %% Line 615
				      apply 'cafu'/5
					  (Rest, _cor14, _cor13, _cor12, SavePos)
	  %% Line 616
	  <_X_Other,_X_N,Count,_X_ByteCount,SavePos> when 'true' ->
	      %% Line 617
	      {Count,SavePos}
	end
'collect_chars'/3 =
    %% Line 624
    fun (_cor2,_cor1,_cor0) ->
	%% Line 625
	apply 'collect_chars'/4
	    (_cor2, _cor1, 'latin1', _cor0)
'collect_chars'/4 =
    %% Line 628
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'start',Data,'unicode',N>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 629
	      case apply 'count_and_find_utf8'/2
		       (Data, N) of
		<{Size,Npos}> when 'true' ->
		    %% Line 630
		    case <> of
		      <>
			  when call 'erlang':'>'
				(Size,
				 N) ->
			  %% Line 631
			  case call 'erlang':'split_binary'
				   (Data, Npos) of
			    <{B1,B2}> when 'true' ->
				%% Line 632
				{'stop',B1,B2}
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      %% Line 633
		      <>
			  when call 'erlang':'<'
				(Size,
				 N) ->
			  let <_cor6> =
			      %% Line 634
			      call 'erlang':'-'
				  (N, Size)
			  in  %% Line 634
			      {'binary',[Data|[]],_cor6}
		      %% Line 635
		      <> when 'true' ->
			  %% Line 636
			  {'stop',Data,'eof'}
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 638
	  <'start',Data,'latin1',N>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      let <Size> =
		  %% Line 639
		  call 'erlang':'byte_size'
		      (Data)
	      in  %% Line 640
		  case <> of
		    <>
			when call 'erlang':'>'
			      (Size,
			       N) ->
			%% Line 641
			case call 'erlang':'split_binary'
				 (Data, N) of
			  <{B1,B2}> when 'true' ->
			      %% Line 642
			      {'stop',B1,B2}
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor8})
			    -| ['compiler_generated'] )
			end
		    %% Line 643
		    <>
			when call 'erlang':'<'
			      (Size,
			       N) ->
			let <_cor9> =
			    %% Line 644
			    call 'erlang':'-'
				(N, Size)
			in  %% Line 644
			    {'binary',[Data|[]],_cor9}
		    %% Line 645
		    <> when 'true' ->
			%% Line 646
			{'stop',Data,'eof'}
		  end
	  %% Line 648
	  <'start',Data,_cor25,N>
	      when call 'erlang':'is_list'
		    (Data) ->
	      %% Line 649
	      apply 'collect_chars_list'/3
		  ([], N, Data)
	  %% Line 650
	  <'start','eof',_cor26,_cor27> when 'true' ->
	      %% Line 651
	      {'stop','eof','eof'}
	  %% Line 652
	  <{'binary',Stack,_X_N},'eof',_cor28,_cor29> when 'true' ->
	      let <_cor10> =
		  %% Line 653
		  apply 'binrev'/1
		      (Stack)
	      in  %% Line 653
		  {'stop',_cor10,'eof'}
	  %% Line 654
	  <{'binary',Stack,N},Data,'unicode',_cor30> when 'true' ->
	      %% Line 655
	      case apply 'count_and_find_utf8'/2
		       (Data, N) of
		<{Size,Npos}> when 'true' ->
		    %% Line 656
		    case <> of
		      <>
			  when call 'erlang':'>'
				(Size,
				 N) ->
			  %% Line 657
			  case call 'erlang':'split_binary'
				   (Data, Npos) of
			    <{B1,B2}> when 'true' ->
				let <_cor13> =
				    %% Line 658
				    apply 'binrev'/2
					(Stack, [B1|[]])
				in  %% Line 658
				    {'stop',_cor13,B2}
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor12})
			      -| ['compiler_generated'] )
			  end
		      %% Line 659
		      <>
			  when call 'erlang':'<'
				(Size,
				 N) ->
			  let <_cor14> =
			      %% Line 660
			      call 'erlang':'-'
				  (N, Size)
			  in  %% Line 660
			      {'binary',[Data|Stack],_cor14}
		      %% Line 661
		      <> when 'true' ->
			  let <_cor15> =
			      %% Line 662
			      apply 'binrev'/2
				  (Stack, [Data|[]])
			  in  %% Line 662
			      {'stop',_cor15,'eof'}
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 664
	  <{'binary',Stack,N},Data,'latin1',_cor31> when 'true' ->
	      let <Size> =
		  %% Line 665
		  call 'erlang':'byte_size'
		      (Data)
	      in  %% Line 666
		  case <> of
		    <>
			when call 'erlang':'>'
			      (Size,
			       N) ->
			%% Line 667
			case call 'erlang':'split_binary'
				 (Data, N) of
			  <{B1,B2}> when 'true' ->
			      let <_cor18> =
				  %% Line 668
				  apply 'binrev'/2
				      (Stack, [B1|[]])
			      in  %% Line 668
				  {'stop',_cor18,B2}
			  ( <_cor17> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor17})
			    -| ['compiler_generated'] )
			end
		    %% Line 669
		    <>
			when call 'erlang':'<'
			      (Size,
			       N) ->
			let <_cor19> =
			    %% Line 670
			    call 'erlang':'-'
				(N, Size)
			in  %% Line 670
			    {'binary',[Data|Stack],_cor19}
		    %% Line 671
		    <> when 'true' ->
			let <_cor20> =
			    %% Line 672
			    apply 'binrev'/2
				(Stack, [Data|[]])
			in  %% Line 672
			    {'stop',_cor20,'eof'}
		  end
	  %% Line 674
	  <{'list',Stack,N},Data,_cor32,_cor33> when 'true' ->
	      %% Line 675
	      apply 'collect_chars_list'/3
		  (Stack, N, Data)
	  %% Line 681
	  <[],Chars,_cor34,N> when 'true' ->
	      %% Line 682
	      apply 'collect_chars1'/3
		  (N, Chars, [])
	  %% Line 683
	  <{Left,Sofar},Chars,_cor35,_X_N> when 'true' ->
	      %% Line 684
	      apply 'collect_chars1'/3
		  (Left, Chars, Sofar)
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'collect_chars',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_chars1'/3 =
    %% Line 686
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,Chars,Stack>
	      when call 'erlang':'=<'
		    (N,
		     0) ->
	      let <_cor3> =
		  %% Line 687
		  call 'lists':'reverse'
		      (Stack, [])
	      in  %% Line 687
		  {'done',_cor3,Chars}
	  %% Line 688
	  <N,[C|Rest],Stack> when 'true' ->
	      let <_cor4> =
		  %% Line 689
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 689
		  apply 'collect_chars1'/3
		      (_cor4, Rest, [C|Stack])
	  %% Line 690
	  <_X_N,'eof',[]> when 'true' ->
	      %% Line 691
	      {'done','eof',[]}
	  %% Line 692
	  <_X_N,'eof',Stack> when 'true' ->
	      let <_cor5> =
		  %% Line 693
		  call 'lists':'reverse'
		      (Stack, [])
	      in  %% Line 693
		  {'done',_cor5,[]}
	  %% Line 694
	  <N,[],Stack> when 'true' ->
	      %% Line 695
	      {'more',{N,Stack}}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'collect_chars1',3}}] )
	    -| ['compiler_generated'] )
	end
'collect_chars_list'/3 =
    %% Line 697
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Stack,0,Data> when 'true' ->
	      let <_cor3> =
		  %% Line 698
		  call 'lists':'reverse'
		      (Stack, [])
	      in  %% Line 698
		  {'stop',_cor3,Data}
	  %% Line 699
	  <Stack,_X_N,'eof'> when 'true' ->
	      let <_cor4> =
		  %% Line 700
		  call 'lists':'reverse'
		      (Stack, [])
	      in  %% Line 700
		  {'stop',_cor4,'eof'}
	  %% Line 701
	  <Stack,N,[]> when 'true' ->
	      %% Line 702
	      {'list',Stack,N}
	  %% Line 703
	  <Stack,N,[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 704
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 704
		  apply 'collect_chars_list'/3
		      ([H|Stack], _cor5, T)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'collect_chars_list',3}}] )
	    -| ['compiler_generated'] )
	end
'collect_line'/2 =
    %% Line 714
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Chars> when 'true' ->
	      %% Line 715
	      apply 'collect_line1'/2
		  (Chars, [])
	  %% Line 716
	  <{SoFar},More> when 'true' ->
	      %% Line 717
	      apply 'collect_line1'/2
		  (More, SoFar)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'collect_line',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_line1'/2 =
    %% Line 719
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[13|[10|Rest]],Stack> when 'true' ->
	      %% Line 720
	      apply 'collect_line1'/2
		  ([10|Rest], Stack)
	  %% Line 721
	  <[10|Rest],Stack> when 'true' ->
	      let <_cor2> =
		  %% Line 722
		  call 'lists':'reverse'
		      ([10|Stack], [])
	      in  %% Line 722
		  {'done',_cor2,Rest}
	  %% Line 723
	  <[C|Rest],Stack> when 'true' ->
	      %% Line 724
	      apply 'collect_line1'/2
		  (Rest, [C|Stack])
	  %% Line 725
	  <'eof',[]> when 'true' ->
	      %% Line 726
	      {'done','eof',[]}
	  %% Line 727
	  <'eof',Stack> when 'true' ->
	      let <_cor3> =
		  %% Line 728
		  call 'lists':'reverse'
		      (Stack, [])
	      in  %% Line 728
		  {'done',_cor3,[]}
	  %% Line 729
	  <[],Stack> when 'true' ->
	      %% Line 730
	      {'more',{Stack}}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'collect_line1',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_line'/3 =
    %% Line 737
    fun (_cor2,_cor1,_cor0) ->
	%% Line 738
	apply 'collect_line'/4
	    (_cor2, _cor1, 'latin1', _cor0)
'collect_line'/4 =
    %% Line 741
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'start',Data,Encoding,_cor10>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 742
	      apply 'collect_line_bin'/4
		  (Data, Data, [], Encoding)
	  %% Line 743
	  <'start',Data,_cor11,_cor12>
	      when call 'erlang':'is_list'
		    (Data) ->
	      %% Line 744
	      apply 'collect_line_list'/2
		  (Data, [])
	  %% Line 745
	  <'start','eof',_cor13,_cor14> when 'true' ->
	      %% Line 746
	      {'stop','eof','eof'}
	  %% Line 747
	  <Stack,Data,Encoding,_cor15>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 748
	      apply 'collect_line_bin'/4
		  (Data, Data, Stack, Encoding)
	  %% Line 749
	  <Stack,Data,_cor16,_cor17>
	      when call 'erlang':'is_list'
		    (Data) ->
	      %% Line 750
	      apply 'collect_line_list'/2
		  (Data, Stack)
	  %% Line 751
	  <Stack = [B|_cor18],'eof',_cor19,_cor20>
	      when call 'erlang':'is_binary'
		    (B) ->
	      let <_cor4> =
		  %% Line 752
		  apply 'binrev'/1
		      (Stack)
	      in  %% Line 752
		  {'stop',_cor4,'eof'}
	  %% Line 753
	  <Stack,'eof',_cor21,_cor22> when 'true' ->
	      let <_cor5> =
		  %% Line 754
		  call 'lists':'reverse'
		      (Stack, [])
	      in  %% Line 754
		  {'stop',_cor5,'eof'}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'collect_line',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_line_bin'/4 =
    %% Line 757
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<10>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Data,Stack0,_cor24> when 'true' ->
	      let <_cor5> =
		  %% Line 758
		  call 'erlang':'byte_size'
		      (Data)
	      in  let <_cor4> =
		      %% Line 758
		      call 'erlang':'byte_size'
			  (T)
		  in  let <N> =
			  %% Line 758
			  call 'erlang':'-'
			      (_cor5, _cor4)
		      in  %% Line 759
			  case ( Data
				 -| ['reuse_for_context'] ) of
			    <#{#<Line>(N,8,'binary',['unsigned'|['big']]),
			       #<_cor25>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				%% Line 760
				case Stack0 of
				  %% Line 761
				  <[]> when 'true' ->
				      %% Line 762
				      {'stop',Line,T}
				  %% Line 763
				  <[#{#<13>(8,1,'integer',['unsigned'|['big']])}#|Stack]>
				      when call 'erlang':'=:='
					    (N,
					     1) ->
				      let <_cor8> =
					  %% Line 764
					  apply 'binrev'/2
					      (Stack, [10])
				      in  %% Line 764
					  {'stop',_cor8,T}
				  %% Line 765
				  <_cor26> when 'true' ->
				      let <_cor9> =
					  %% Line 766
					  apply 'binrev'/2
					      (Stack0, [Line|[]])
				      in  %% Line 766
					  {'stop',_cor9,T}
				end
			    ( <_cor7> when 'true' ->
				  do  primop 'bs_context_to_binary'
					  (_cor7)
				      primop 'match_fail'
					  ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	  %% Line 768
	  <#{#<13>(8,1,'integer',['unsigned'|['big']]),
	     #<10>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Data,Stack,_cor27> when 'true' ->
	      let <_cor12> =
		  %% Line 769
		  call 'erlang':'byte_size'
		      (Data)
	      in  let <_cor11> =
		      %% Line 769
		      call 'erlang':'byte_size'
			  (T)
		  in  let <_cor13> =
			  %% Line 769
			  call 'erlang':'-'
			      (_cor12, _cor11)
		      in  let <N> =
			      %% Line 769
			      call 'erlang':'-'
				  (_cor13, 2)
			  in  %% Line 770
			      case ( Data
				     -| ['reuse_for_context'] ) of
				<#{#<Line>(N,8,'binary',['unsigned'|['big']]),
				   #<_cor28>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				    let <_cor16> =
					%% Line 771
					apply 'binrev'/2
					    (Stack, [Line|[10]])
				    in  %% Line 771
					{'stop',_cor16,T}
				( <_cor15> when 'true' ->
				      do  primop 'bs_context_to_binary'
					      (_cor15)
					  primop 'match_fail'
					      ({'badmatch',_cor15})
				  -| ['compiler_generated'] )
			      end
	  %% Line 772
	  <#{#<13>(8,1,'integer',['unsigned'|['big']])}#,Data0,Stack,_cor29> when 'true' ->
	      let <_cor17> =
		  %% Line 773
		  call 'erlang':'byte_size'
		      (Data0)
	      in  let <N> =
		      %% Line 773
		      call 'erlang':'-'
			  (_cor17, 1)
		  in  %% Line 774
		      case ( Data0
			     -| ['reuse_for_context'] ) of
			<#{#<Data>(N,8,'binary',['unsigned'|['big']]),
			   #<_cor30>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			    %% Line 775
			    [#{#<13>(8,1,'integer',['unsigned'|['big']])}#|[Data|Stack]]
			( <_cor19> when 'true' ->
			      do  primop 'bs_context_to_binary'
				      (_cor19)
				  primop 'match_fail'
				      ({'badmatch',_cor19})
			  -| ['compiler_generated'] )
		      end
	  %% Line 776
	  <#{#<_cor31>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Data,Stack,Enc> when 'true' ->
	      %% Line 777
	      apply 'collect_line_bin'/4
		  (T, Data, Stack, Enc)
	  %% Line 778
	  <#{}#,Data,Stack,_cor32> when 'true' ->
	      %% Line 780
	      [Data|Stack]
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor23)
		    ( primop 'match_fail'
			  ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		      -| [{'function_name',{'collect_line_bin',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_line_list'/2 =
    %% Line 782
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[10|T],[13|Stack]> when 'true' ->
	      let <_cor2> =
		  %% Line 783
		  call 'lists':'reverse'
		      (Stack, [10])
	      in  %% Line 783
		  {'stop',_cor2,T}
	  %% Line 784
	  <[10|T],Stack> when 'true' ->
	      let <_cor3> =
		  %% Line 785
		  call 'lists':'reverse'
		      (Stack, [10])
	      in  %% Line 785
		  {'stop',_cor3,T}
	  %% Line 786
	  <[H|T],Stack> when 'true' ->
	      %% Line 787
	      apply 'collect_line_list'/2
		  (T, [H|Stack])
	  %% Line 788
	  <[],Stack> when 'true' ->
	      %% Line 789
	      Stack
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'collect_line_list',2}}] )
	    -| ['compiler_generated'] )
	end
'get_until'/3 =
    %% Line 797
    fun (_cor2,_cor1,_cor0) ->
	%% Line 798
	apply 'get_until'/4
	    (_cor2, _cor1, 'latin1', _cor0)
'get_until'/4 =
    %% Line 801
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'start',Data,Encoding,XtraArg> when 'true' ->
	      %% Line 802
	      apply 'get_until'/4
		  ([], Data, Encoding, XtraArg)
	  %% Line 803
	  <Cont,Data,Encoding,{Mod,Func,XtraArgs}> when 'true' ->
	      let <_cor6> =
		  %% Line 804
		  case <> of
		    <>
			when let <_cor4> =
			      call 'erlang':'is_binary'
				  (Data)
			  in  let <_cor5> =
				  call 'erlang':'=:='
				      (Encoding, 'unicode')
			      in  call 'erlang':'and'
				      (_cor4, _cor5) ->
			%% Line 805
			call 'unicode':'characters_to_list'
			    (Data, 'utf8')
		    %% Line 806
		    <>
			when call 'erlang':'is_binary'
			      (Data) ->
			%% Line 807
			call 'erlang':'binary_to_list'
			    (Data)
		    %% Line 808
		    <> when 'true' ->
			%% Line 809
			Data
		  end
	      in  %% Line 811
		  case call 'erlang':'apply'
			   (Mod, Func, [Cont|[_cor6|XtraArgs]]) of
		    %% Line 812
		    <{'done',Result,Buf}> when 'true' ->
			let <_cor14> =
			    %% Line 813
			    case <> of
			      <>
				  when try
					let <_cor8> =
					    call 'erlang':'is_binary'
						(Data)
					in  let <_cor9> =
						%% Line 814
						call 'erlang':'is_list'
						    (Result)
					    in  let <_cor10> =
						    %% Line 815
						    call 'erlang':'=:='
							(Encoding, 'unicode')
						in  let <_cor11> =
							call 'erlang':'and'
							    (_cor9, _cor10)
						    in  call 'erlang':'and'
							    (_cor8, _cor11)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 816
				  call 'unicode':'characters_to_binary'
				      (Result, 'unicode', 'unicode')
			      %% Line 817
			      <>
				  when let <_cor12> =
					call 'erlang':'is_binary'
					    (Data)
				    in  let <_cor13> =
					    %% Line 818
					    call 'erlang':'is_list'
						(Result)
					in  call 'erlang':'and'
						(_cor12, _cor13) ->
				  %% Line 819
				  call 'erlang':'iolist_to_binary'
				      (Result)
			      %% Line 827
			      <> when 'true' ->
				  %% Line 828
				  Result
			    end
			in  %% Line 813
			    {'stop',_cor14,%% Line 830
					   Buf}
		    %% Line 831
		    <{'more',NewCont}> when 'true' ->
			%% Line 832
			NewCont
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'get_until',4}}] )
	    -| ['compiler_generated'] )
	end
'binrev'/1 =
    %% Line 835
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 836
	    call 'lists':'reverse'
		(_cor0, [])
	in  %% Line 836
	    call 'erlang':'list_to_binary'
		(_cor1)
'binrev'/2 =
    %% Line 838
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 839
	    call 'lists':'reverse'
		(_cor1, _cor0)
	in  %% Line 839
	    call 'erlang':'list_to_binary'
		(_cor2)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('io_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('io_lib', _cor0)
end