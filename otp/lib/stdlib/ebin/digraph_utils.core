module 'digraph_utils' ['arborescence_root'/1,
			'components'/1,
			'condensation'/1,
			'cyclic_strong_components'/1,
			'is_acyclic'/1,
			'is_arborescence'/1,
			'is_tree'/1,
			'loop_vertices'/1,
			'module_info'/0,
			'module_info'/1,
			'postorder'/1,
			'preorder'/1,
			'reachable'/2,
			'reachable_neighbours'/2,
			'reaching'/2,
			'reaching_neighbours'/2,
			'strong_components'/1,
			'subgraph'/2,
			'subgraph'/3,
			'topsort'/1]
    attributes [%% Line 45
		'spec' =
		    %% Line 45
		    [{{'components',1},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'var',45,'Digraph'}]}|[{'type',45,'list',[{'var',45,'Component'}]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Digraph'}|[{'remote_type',46,[{'atom',46,'digraph'}|[{'atom',46,'graph'}|[[]]]]}]]]]}|[{'type',47,'constraint',[{'atom',47,'is_subtype'}|[[{'var',47,'Component'}|[{'type',47,'list',[{'remote_type',47,[{'atom',47,'digraph'}|[{'atom',47,'vertex'}|[[]]]]}]}]]]]}]]]]}]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'strong_components',1},[{'type',52,'bounded_fun',[{'type',52,'fun',[{'type',52,'product',[{'var',52,'Digraph'}]}|[{'type',52,'list',[{'var',52,'StrongComponent'}]}]]}|[[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'Digraph'}|[{'remote_type',53,[{'atom',53,'digraph'}|[{'atom',53,'graph'}|[[]]]]}]]]]}|[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'StrongComponent'}|[{'type',54,'list',[{'remote_type',54,[{'atom',54,'digraph'}|[{'atom',54,'vertex'}|[[]]]]}]}]]]]}]]]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'cyclic_strong_components',1},[{'type',59,'bounded_fun',[{'type',59,'fun',[{'type',59,'product',[{'var',59,'Digraph'}]}|[{'type',59,'list',[{'var',59,'StrongComponent'}]}]]}|[[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Digraph'}|[{'remote_type',60,[{'atom',60,'digraph'}|[{'atom',60,'graph'}|[[]]]]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'StrongComponent'}|[{'type',61,'list',[{'remote_type',61,[{'atom',61,'digraph'}|[{'atom',61,'vertex'}|[[]]]]}]}]]]]}]]]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'reachable',2},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'Vertices'}|[{'var',66,'Digraph'}]]}|[{'var',66,'Reachable'}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Digraph'}|[{'remote_type',67,[{'atom',67,'digraph'}|[{'atom',67,'graph'}|[[]]]]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Vertices'}|[{'type',68,'list',[{'remote_type',68,[{'atom',68,'digraph'}|[{'atom',68,'vertex'}|[[]]]]}]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Reachable'}|[{'type',69,'list',[{'remote_type',69,[{'atom',69,'digraph'}|[{'atom',69,'vertex'}|[[]]]]}]}]]]]}]]]]]}]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'reachable_neighbours',2},[{'type',74,'bounded_fun',[{'type',74,'fun',[{'type',74,'product',[{'var',74,'Vertices'}|[{'var',74,'Digraph'}]]}|[{'var',74,'Reachable'}]]}|[[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'Digraph'}|[{'remote_type',75,[{'atom',75,'digraph'}|[{'atom',75,'graph'}|[[]]]]}]]]]}|[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Vertices'}|[{'type',76,'list',[{'remote_type',76,[{'atom',76,'digraph'}|[{'atom',76,'vertex'}|[[]]]]}]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Reachable'}|[{'type',77,'list',[{'remote_type',77,[{'atom',77,'digraph'}|[{'atom',77,'vertex'}|[[]]]]}]}]]]]}]]]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'reaching',2},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'Vertices'}|[{'var',82,'Digraph'}]]}|[{'var',82,'Reaching'}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Digraph'}|[{'remote_type',83,[{'atom',83,'digraph'}|[{'atom',83,'graph'}|[[]]]]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Vertices'}|[{'type',84,'list',[{'remote_type',84,[{'atom',84,'digraph'}|[{'atom',84,'vertex'}|[[]]]]}]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Reaching'}|[{'type',85,'list',[{'remote_type',85,[{'atom',85,'digraph'}|[{'atom',85,'vertex'}|[[]]]]}]}]]]]}]]]]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'reaching_neighbours',2},[{'type',90,'bounded_fun',[{'type',90,'fun',[{'type',90,'product',[{'var',90,'Vertices'}|[{'var',90,'Digraph'}]]}|[{'var',90,'Reaching'}]]}|[[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'Digraph'}|[{'remote_type',91,[{'atom',91,'digraph'}|[{'atom',91,'graph'}|[[]]]]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Vertices'}|[{'type',92,'list',[{'remote_type',92,[{'atom',92,'digraph'}|[{'atom',92,'vertex'}|[[]]]]}]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Reaching'}|[{'type',93,'list',[{'remote_type',93,[{'atom',93,'digraph'}|[{'atom',93,'vertex'}|[[]]]]}]}]]]]}]]]]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'topsort',1},[{'type',98,'bounded_fun',[{'type',98,'fun',[{'type',98,'product',[{'var',98,'Digraph'}]}|[{'type',98,'union',[{'var',98,'Vertices'}|[{'atom',98,'false'}]]}]]}|[[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Digraph'}|[{'remote_type',99,[{'atom',99,'digraph'}|[{'atom',99,'graph'}|[[]]]]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Vertices'}|[{'type',100,'list',[{'remote_type',100,[{'atom',100,'digraph'}|[{'atom',100,'vertex'}|[[]]]]}]}]]]]}]]]]}]}],
		%% Line 109
		'spec' =
		    %% Line 109
		    [{{'is_acyclic',1},[{'type',109,'bounded_fun',[{'type',109,'fun',[{'type',109,'product',[{'var',109,'Digraph'}]}|[{'type',109,'boolean',[]}]]}|[[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Digraph'}|[{'remote_type',110,[{'atom',110,'digraph'}|[{'atom',110,'graph'}|[[]]]]}]]]]}]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'arborescence_root',1},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'Digraph'}]}|[{'type',115,'union',[{'atom',115,'no'}|[{'type',115,'tuple',[{'atom',115,'yes'}|[{'var',115,'Root'}]]}]]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Digraph'}|[{'remote_type',116,[{'atom',116,'digraph'}|[{'atom',116,'graph'}|[[]]]]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Root'}|[{'remote_type',117,[{'atom',117,'digraph'}|[{'atom',117,'vertex'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'is_arborescence',1},[{'type',138,'bounded_fun',[{'type',138,'fun',[{'type',138,'product',[{'var',138,'Digraph'}]}|[{'type',138,'boolean',[]}]]}|[[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'Digraph'}|[{'remote_type',139,[{'atom',139,'digraph'}|[{'atom',139,'graph'}|[[]]]]}]]]]}]]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'is_tree',1},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'Digraph'}]}|[{'type',144,'boolean',[]}]]}|[[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Digraph'}|[{'remote_type',145,[{'atom',145,'digraph'}|[{'atom',145,'graph'}|[[]]]]}]]]]}]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'loop_vertices',1},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'Digraph'}]}|[{'var',151,'Vertices'}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Digraph'}|[{'remote_type',152,[{'atom',152,'digraph'}|[{'atom',152,'graph'}|[[]]]]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Vertices'}|[{'type',153,'list',[{'remote_type',153,[{'atom',153,'digraph'}|[{'atom',153,'vertex'}|[[]]]]}]}]]]]}]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'subgraph',2},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'Digraph'}|[{'var',158,'Vertices'}]]}|[{'var',158,'SubGraph'}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Digraph'}|[{'remote_type',159,[{'atom',159,'digraph'}|[{'atom',159,'graph'}|[[]]]]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Vertices'}|[{'type',160,'list',[{'remote_type',160,[{'atom',160,'digraph'}|[{'atom',160,'vertex'}|[[]]]]}]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'SubGraph'}|[{'remote_type',161,[{'atom',161,'digraph'}|[{'atom',161,'graph'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'subgraph',3},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'Digraph'}|[{'var',171,'Vertices'}|[{'var',171,'Options'}]]]}|[{'var',171,'SubGraph'}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Digraph'}|[{'remote_type',172,[{'atom',172,'digraph'}|[{'atom',172,'graph'}|[[]]]]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'SubGraph'}|[{'remote_type',173,[{'atom',173,'digraph'}|[{'atom',173,'graph'}|[[]]]]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Vertices'}|[{'type',174,'list',[{'remote_type',174,[{'atom',174,'digraph'}|[{'atom',174,'vertex'}|[[]]]]}]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Options'}|[{'type',175,'list',[{'type',175,'union',[{'type',175,'tuple',[{'atom',175,'type'}|[{'var',175,'SubgraphType'}]]}|[{'type',175,'tuple',[{'atom',175,'keep_labels'}|[{'type',175,'boolean',[]}]]}]]}]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'SubgraphType'}|[{'type',176,'union',[{'atom',176,'inherit'}|[{'type',176,'list',[{'remote_type',176,[{'atom',176,'digraph'}|[{'atom',176,'d_type'}|[[]]]]}]}]]}]]]]}]]]]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'condensation',1},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'Digraph'}]}|[{'var',186,'CondensedDigraph'}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Digraph'}|[{'remote_type',187,[{'atom',187,'digraph'}|[{'atom',187,'graph'}|[[]]]]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'CondensedDigraph'}|[{'remote_type',188,[{'atom',188,'digraph'}|[{'atom',188,'graph'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'preorder',1},[{'type',211,'bounded_fun',[{'type',211,'fun',[{'type',211,'product',[{'var',211,'Digraph'}]}|[{'var',211,'Vertices'}]]}|[[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Digraph'}|[{'remote_type',212,[{'atom',212,'digraph'}|[{'atom',212,'graph'}|[[]]]]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Vertices'}|[{'type',213,'list',[{'remote_type',213,[{'atom',213,'digraph'}|[{'atom',213,'vertex'}|[[]]]]}]}]]]]}]]]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'postorder',1},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[{'var',218,'Digraph'}]}|[{'var',218,'Vertices'}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Digraph'}|[{'remote_type',219,[{'atom',219,'digraph'}|[{'atom',219,'graph'}|[[]]]]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Vertices'}|[{'type',220,'list',[{'remote_type',220,[{'atom',220,'digraph'}|[{'atom',220,'vertex'}|[[]]]]}]}]]]]}]]]]}]}]]
'components'/1 =
    %% Line 49
    fun (_cor0) ->
	%% Line 50
	apply 'forest'/2
	    (_cor0, ( 'inout'/3
		      -| [{'id',{0,0,'-components/1-fun-0-'}}] ))
'strong_components'/1 =
    %% Line 56
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 57
	    apply 'revpostorder'/1
		(_cor0)
	in  %% Line 57
	    apply 'forest'/3
		(_cor0, ( 'in'/3
			  -| [{'id',{0,0,'-strong_components/1-fun-0-'}}] ), _cor1)
'cyclic_strong_components'/1 =
    %% Line 63
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 64
	    apply 'strong_components'/1
		(_cor0)
	in  %% Line 64
	    apply 'remove_singletons'/3
		(_cor1, _cor0, [])
'reachable'/2 =
    %% Line 71
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Vs,G>
	      when call 'erlang':'is_list'
		    (Vs) ->
	      let <_cor2> =
		  %% Line 72
		  apply 'forest'/4
		      (G, ( 'out'/3
			    -| [{'id',{0,0,'-reachable/2-fun-0-'}}] ), Vs, 'first')
	      in  %% Line 72
		  call 'lists':'append'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'reachable',2}}] )
	    -| ['compiler_generated'] )
	end
'reachable_neighbours'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Vs,G>
	      when call 'erlang':'is_list'
		    (Vs) ->
	      let <_cor2> =
		  %% Line 80
		  apply 'forest'/4
		      (G, ( 'out'/3
			    -| [{'id',{0,0,'-reachable_neighbours/2-fun-0-'}}] ), Vs, 'not_first')
	      in  %% Line 80
		  call 'lists':'append'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'reachable_neighbours',2}}] )
	    -| ['compiler_generated'] )
	end
'reaching'/2 =
    %% Line 87
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Vs,G>
	      when call 'erlang':'is_list'
		    (Vs) ->
	      let <_cor2> =
		  %% Line 88
		  apply 'forest'/4
		      (G, ( 'in'/3
			    -| [{'id',{0,0,'-reaching/2-fun-0-'}}] ), Vs, 'first')
	      in  %% Line 88
		  call 'lists':'append'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'reaching',2}}] )
	    -| ['compiler_generated'] )
	end
'reaching_neighbours'/2 =
    %% Line 95
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Vs,G>
	      when call 'erlang':'is_list'
		    (Vs) ->
	      let <_cor2> =
		  %% Line 96
		  apply 'forest'/4
		      (G, ( 'in'/3
			    -| [{'id',{0,0,'-reaching_neighbours/2-fun-0-'}}] ), Vs, 'not_first')
	      in  %% Line 96
		  call 'lists':'append'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'reaching_neighbours',2}}] )
	    -| ['compiler_generated'] )
	end
'topsort'/1 =
    %% Line 102
    fun (_cor0) ->
	let <L> =
	    %% Line 103
	    apply 'revpostorder'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 104
		apply 'forest'/3
		    (_cor0, ( 'in'/3
			      -| [{'id',{0,0,'-topsort/1-fun-0-'}}] ), L)
	    in  let <_cor5> =
		    %% Line 104
		    call 'erlang':'length'
			(_cor4)
		in  let <_cor2> =
			%% Line 104
			call 'digraph':'vertices'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 104
			    call 'erlang':'length'
				(_cor2)
			in  %% Line 104
			    case <> of
			      %% Line 105
			      <>
				  when call 'erlang':'=:='
					(_cor5,
					 _cor3) ->
				  L
			      %% Line 106
			      <> when 'true' ->
				  'false'
			    end
'is_acyclic'/1 =
    %% Line 112
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 113
	    apply 'loop_vertices'/1
		(_cor0)
	in  %% Line 113
	    ( case <> of
		( <>
		      when call 'erlang':'=:='
			    (_cor2,
			     []) ->
		      let <_cor3> =
			  apply 'topsort'/1
			      (_cor0)
		      in  call 'erlang':'=/='
			      (_cor3, 'false')
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'arborescence_root'/1 =
    %% Line 119
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 120
	    call 'digraph':'no_edges'
		(_cor0)
	in  let <_cor1> =
		%% Line 120
		call 'digraph':'no_vertices'
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 120
		    call 'erlang':'-'
			(_cor1, 1)
		in  %% Line 120
		    case <> of
		      %% Line 121
		      <>
			  when call 'erlang':'=:='
				(_cor3,
				 _cor2) ->
			  %% Line 122
			  try
			      let <F> =
				  %% Line 123
				  ( fun (_cor6,_cor5) ->
					%% Line 124
					case call 'digraph':'in_degree'
						 (_cor0, _cor6) of
					  %% Line 125
					  <1> when 'true' ->
					      _cor5
					  %% Line 126
					  <0>
					      when call 'erlang':'=:='
						    (_cor5,
						     []) ->
					      [_cor6|[]]
					  ( <_cor4> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor4})
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-arborescence_root/1-fun-0-'}}] )
			      in  let <_cor10> =
				      %% Line 129
				      call 'digraph':'vertices'
					  (_cor0)
				  in  %% Line 129
				      case call 'lists':'foldl'
					       (F, [], _cor10) of
					<[Root|[]]> when 'true' ->
					    %% Line 130
					    {'yes',Root}
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			  of <_cor12> ->
			      _cor12
			  catch <_cor15,_cor14,_cor13> ->
			      %% Line 132
			      'no'
		      %% Line 134
		      <> when 'true' ->
			  %% Line 135
			  'no'
		    end
'is_arborescence'/1 =
    %% Line 141
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 142
	    apply 'arborescence_root'/1
		(_cor0)
	in  %% Line 142
	    call 'erlang':'=/='
		(_cor1, 'no')
'is_tree'/1 =
    %% Line 147
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 148
	    call 'digraph':'no_edges'
		(_cor0)
	in  let <_cor2> =
		%% Line 148
		call 'digraph':'no_vertices'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 148
		    call 'erlang':'-'
			(_cor2, 1)
		in  %% Line 149
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (_cor4,
				     _cor3) ->
			      let <_cor5> =
				  apply 'components'/1
				      (_cor0)
			      in  let <_cor6> =
				      call 'erlang':'length'
					  (_cor5)
				  in  call 'erlang':'=:='
					  (_cor6, 1)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'loop_vertices'/1 =
    %% Line 155
    fun (_cor0) ->
	%% Line 156
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[V|_cor2]> when 'true' ->
			    ( case apply 'is_reflexive_vertex'/2
				       (V, _cor0) of
				<'true'> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [V|_cor5]
					  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor2)
				  -| ['compiler_generated'] )
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  call 'digraph':'vertices'
		      (_cor0)
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'subgraph'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	%% Line 164
	try
	    %% Line 165
	    apply 'subgraph_opts'/3
		(_cor1, _cor0, [])
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 167
	      <'throw','badarg',_cor8> when 'true' ->
		  %% Line 168
		  call 'erlang':'error'
		      ('badarg')
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'subgraph'/3 =
    %% Line 178
    fun (_cor2,_cor1,_cor0) ->
	%% Line 179
	try
	    %% Line 180
	    apply 'subgraph_opts'/3
		(_cor2, _cor1, _cor0)
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 182
	      <'throw','badarg',_cor10> when 'true' ->
		  %% Line 183
		  call 'erlang':'error'
		      ('badarg')
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'condensation'/1 =
    %% Line 190
    fun (_cor0) ->
	let <SCs> =
	    %% Line 191
	    apply 'strong_components'/1
		(_cor0)
	in  let <V2I> =
		%% Line 195
		call 'ets':'new'
		    ('condensation', [])
	    in  let <I2C> =
		    %% Line 196
		    call 'ets':'new'
			('condensation', [])
		in  let <CFun> =
			%% Line 197
			( fun (_cor10,_cor9) ->
			      let <_cor7> =
				  ( fun (_cor5) ->
					let <_cor19> =
					    %% Line 198
					    call 'ets':'insert'
						(V2I, {_cor5,_cor9})
					in  %% Line 198
					    case _cor19 of
					      <'true'> when 'true' ->
						  ( _cor19
						    -| ['compiler_generated'] )
					      ( <_cor4> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor4})
						-| ['compiler_generated'] )
					    end
				    -| [{'id',{0,0,'-condensation/1-fun-0-'}}] )
			      in  do  call 'lists':'foreach'
					  (_cor7, _cor10)
				      %% Line 201
				      case call 'ets':'insert'
					       (I2C, {_cor9,_cor10}) of
					<'true'> when 'true' ->
					    %% Line 202
					    call 'erlang':'+'
						(_cor9, 1)
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor8})
					  -| ['compiler_generated'] )
				      end
			  -| [{'id',{0,0,'-condensation/1-fun-1-'}}] )
		    in  do  %% Line 204
			    call 'lists':'foldl'
				(CFun, 1, SCs)
			    let <SCG> =
				%% Line 205
				apply 'subgraph_opts'/3
				    (_cor0, [], [])
			    in  let <_cor17> =
				    %% Line 206
				    ( fun (_cor15) ->
					  apply 'condense'/5
					      (_cor15, _cor0, SCG, V2I, I2C)
				      -| [{'id',{0,0,'-condensation/1-fun-2-'}}] )
				in  do  %% Line 206
					call 'lists':'foreach'
					    (_cor17, SCs)
					do  %% Line 207
					    call 'ets':'delete'
						(V2I)
					    do  %% Line 208
						call 'ets':'delete'
						    (I2C)
						%% Line 209
						SCG
'preorder'/1 =
    %% Line 215
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 216
	    apply 'revpreorder'/1
		(_cor0)
	in  %% Line 216
	    call 'lists':'reverse'
		(_cor1)
'postorder'/1 =
    %% Line 222
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 223
	    apply 'revpostorder'/1
		(_cor0)
	in  %% Line 223
	    call 'lists':'reverse'
		(_cor1)
'forest'/2 =
    %% Line 229
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 230
	    call 'digraph':'vertices'
		(_cor1)
	in  %% Line 230
	    apply 'forest'/3
		(_cor1, _cor0, _cor2)
'forest'/3 =
    %% Line 232
    fun (_cor2,_cor1,_cor0) ->
	%% Line 233
	apply 'forest'/4
	    (_cor2, _cor1, _cor0, 'first')
'forest'/4 =
    %% Line 235
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <T> =
	    %% Line 236
	    call 'ets':'new'
		('forest', ['set'])
	in  let <F> =
		%% Line 237
		( fun (_cor6,_cor5) ->
		      apply 'pretraverse'/6
			  (_cor0, _cor6, _cor2, _cor3, T, _cor5)
		  -| [{'id',{0,0,'-forest/4-fun-0-'}}] )
	    in  let <LL> =
		    %% Line 238
		    call 'lists':'foldl'
			(F, [], _cor1)
		in  do  %% Line 239
			call 'ets':'delete'
			    (T)
			%% Line 240
			LL
'pretraverse'/6 =
    %% Line 242
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'first',V,SF,G,T,LL> when 'true' ->
	      %% Line 243
	      apply 'ptraverse'/6
		  ([V|[]], SF, G, T, [], LL)
	  %% Line 244
	  <'not_first',V,SF,G,T,LL> when 'true' ->
	      %% Line 245
	      case call 'ets':'member'
		       (T, V) of
		%% Line 246
		<'false'> when 'true' ->
		    let <_cor6> =
			apply SF
			    (G, V, [])
		    in  apply 'ptraverse'/6
			    (_cor6, SF, G, T, [], LL)
		%% Line 247
		<'true'> when 'true' ->
		    LL
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'pretraverse',6}}] )
	    -| ['compiler_generated'] )
	end
'ptraverse'/6 =
    %% Line 250
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[V|Vs],SF,G,T,Rs,LL> when 'true' ->
	      %% Line 251
	      case call 'ets':'member'
		       (T, V) of
		%% Line 252
		<'false'> when 'true' ->
		    do  %% Line 253
			call 'ets':'insert'
			    (T, {V})
			let <_cor6> =
			    %% Line 254
			    apply SF
				(G, V, Vs)
			in  %% Line 254
			    apply 'ptraverse'/6
				(_cor6, SF, G, T, [V|Rs], LL)
		%% Line 255
		<'true'> when 'true' ->
		    %% Line 256
		    apply 'ptraverse'/6
			(Vs, SF, G, T, Rs, LL)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 258
	  <[],_X_SF,_X_G,_X_T,[],LL> when 'true' ->
	      %% Line 259
	      LL
	  %% Line 260
	  <[],_X_SF,_X_G,_X_T,Rs,LL> when 'true' ->
	      %% Line 261
	      [Rs|LL]
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ptraverse',6}}] )
	    -| ['compiler_generated'] )
	end
'revpreorder'/1 =
    %% Line 263
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 264
	    apply 'forest'/2
		(_cor0, ( 'out'/3
			  -| [{'id',{0,0,'-revpreorder/1-fun-0-'}}] ))
	in  %% Line 264
	    call 'lists':'append'
		(_cor1)
'revpostorder'/1 =
    %% Line 266
    fun (_cor0) ->
	let <T> =
	    %% Line 267
	    call 'ets':'new'
		('forest', ['set'])
	in  let <_cor2> =
		%% Line 268
		call 'digraph':'vertices'
		    (_cor0)
	    in  let <L> =
		    %% Line 268
		    apply 'posttraverse'/4
			(_cor2, _cor0, T, [])
		in  do  %% Line 269
			call 'ets':'delete'
			    (T)
			%% Line 270
			L
'posttraverse'/4 =
    %% Line 272
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[V|Vs],G,T,L> when 'true' ->
	      let <_cor7> =
		  %% Line 273
		  case call 'ets':'member'
			   (T, V) of
		    %% Line 274
		    <'false'> when 'true' ->
			do  %% Line 275
			    call 'ets':'insert'
				(T, {V})
			    let <_cor4> =
				%% Line 276
				apply 'out'/3
				    (G, V, [])
			    in  let <_cor5> =
				    %% Line 276
				    apply 'posttraverse'/4
					(_cor4, G, T, L)
				in  %% Line 276
				    [V|_cor5]
		    %% Line 277
		    <'true'> when 'true' ->
			%% Line 278
			L
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 280
		  apply 'posttraverse'/4
		      (Vs, G, T, _cor7)
	  %% Line 281
	  <[],_X_G,_X_T,L> when 'true' ->
	      %% Line 282
	      L
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'posttraverse',4}}] )
	    -| ['compiler_generated'] )
	end
'in'/3 =
    %% Line 284
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 285
	    call 'digraph':'in_neighbours'
		(_cor2, _cor1)
	in  %% Line 285
	    call 'erlang':'++'
		(_cor3, _cor0)
'out'/3 =
    %% Line 287
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 288
	    call 'digraph':'out_neighbours'
		(_cor2, _cor1)
	in  %% Line 288
	    call 'erlang':'++'
		(_cor3, _cor0)
'inout'/3 =
    %% Line 290
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 291
	    apply 'out'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 291
	    apply 'in'/3
		(_cor2, _cor1, _cor3)
'remove_singletons'/3 =
    %% Line 293
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C = [V|[]]|Cs],G,L> when 'true' ->
	      %% Line 294
	      case apply 'is_reflexive_vertex'/2
		       (V, G) of
		%% Line 295
		<'true'> when 'true' ->
		    apply 'remove_singletons'/3
			(Cs, G, [C|L])
		%% Line 296
		<'false'> when 'true' ->
		    apply 'remove_singletons'/3
			(Cs, G, L)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 298
	  <[C|Cs],G,L> when 'true' ->
	      %% Line 299
	      apply 'remove_singletons'/3
		  (Cs, G, [C|L])
	  %% Line 300
	  <[],_X_G,L> when 'true' ->
	      %% Line 301
	      L
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'remove_singletons',3}}] )
	    -| ['compiler_generated'] )
	end
'is_reflexive_vertex'/2 =
    %% Line 303
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 304
	    call 'digraph':'out_neighbours'
		(_cor0, _cor1)
	in  %% Line 304
	    call 'lists':'member'
		(_cor1, _cor2)
'subgraph_opts'/3 =
    %% Line 306
    fun (_cor2,_cor1,_cor0) ->
	%% Line 307
	apply 'subgraph_opts'/5
	    (_cor0, 'inherit', 'true', _cor2, _cor1)
'subgraph_opts'/5 =
    %% Line 309
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'type',Type}|Opts],_X_Type0,Keep,G,Vs>
	      when let <_cor5> =
		    %% Line 310
		    call 'erlang':'=:='
			(Type, 'inherit')
		in  let <_cor6> =
			%% Line 310
			call 'erlang':'is_list'
			    (Type)
		    in  %% Line 310
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 311
	      apply 'subgraph_opts'/5
		  (Opts, Type, Keep, G, Vs)
	  %% Line 312
	  <[{'keep_labels',Keep}|Opts],Type,_X_Keep0,G,Vs>
	      when %% Line 313
		call 'erlang':'is_boolean'
		    (Keep) ->
	      %% Line 314
	      apply 'subgraph_opts'/5
		  (Opts, Type, Keep, G, Vs)
	  %% Line 315
	  <[],'inherit',Keep,G,Vs> when 'true' ->
	      let <Info> =
		  %% Line 316
		  call 'digraph':'info'
		      (G)
	      in  %% Line 317
		  case call 'lists':'keysearch'
			   ('cyclicity', 1, Info) of
		    <{_cor15,{_cor16,Cyclicity}}> when 'true' ->
			%% Line 318
			case call 'lists':'keysearch'
				 ('protection', 1, Info) of
			  <{_cor17,{_cor18,Protection}}> when 'true' ->
			      %% Line 319
			      apply 'subgraph'/4
				  (G, Vs, [Cyclicity|[Protection|[]]], Keep)
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 320
	  <[],Type,Keep,G,Vs> when 'true' ->
	      %% Line 321
	      apply 'subgraph'/4
		  (G, Vs, Type, Keep)
	  %% Line 322
	  <_cor19,_X_Type,_X_Keep,_X_G,_X_Vs> when 'true' ->
	      %% Line 323
	      call 'erlang':'throw'
		  ('badarg')
	end
'subgraph'/4 =
    %% Line 325
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 326
	try
	    call 'digraph':'new'
		(_cor1)
	of <_cor4> ->
	    let <_cor7> =
		%% Line 328
		( fun (_cor5) ->
		      apply 'subgraph_vertex'/4
			  (_cor5, _cor3, _cor4, _cor0)
		  -| [{'id',{0,0,'-subgraph/4-fun-0-'}}] )
	    in  do  %% Line 328
		    call 'lists':'foreach'
			(_cor7, _cor2)
		    let <EFun> =
			%% Line 329
			( fun (_cor12) ->
			      let <_cor11> =
				  ( fun (_cor9) ->
					%% Line 330
					apply 'subgraph_edge'/4
					    (_cor9, _cor3, _cor4, _cor0)
				    -| [{'id',{0,0,'-subgraph/4-fun-1-'}}] )
			      in  let <_cor8> =
				      %% Line 332
				      call 'digraph':'out_edges'
					  (_cor3, _cor12)
				  in  call 'lists':'foreach'
					  (_cor11, _cor8)
			  -| [{'id',{0,0,'-subgraph/4-fun-2-'}}] )
		    in  let <_cor15> =
			    %% Line 334
			    call 'digraph':'vertices'
				(_cor4)
			in  do  %% Line 334
				call 'lists':'foreach'
				    (EFun, _cor15)
				_cor4
	catch <_cor19,_cor18,_cor17> ->
	    case <_cor19,_cor18,_cor17> of
	      %% Line 337
	      <'error','badarg',_cor24> when 'true' ->
		  %% Line 338
		  call 'erlang':'throw'
		      ('badarg')
	      ( <_cor19,_cor18,_cor17> when 'true' ->
		    primop 'raise'
			(_cor17, _cor18)
		-| ['compiler_generated'] )
	    end
'subgraph_vertex'/4 =
    %% Line 341
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 342
	case call 'digraph':'vertex'
		 (_cor2, _cor3) of
	  %% Line 343
	  <'false'> when 'true' ->
	      'ok'
	  %% Line 344
	  <_cor11>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(_cor0, 'false')
		in  let <_cor5> =
			call 'erlang':'is_boolean'
			    (_cor0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      call 'digraph':'add_vertex'
		  (_cor1, _cor3)
	  %% Line 345
	  <{_X_V,Label}>
	      when call 'erlang':'=:='
		    (_cor0,
		     'true') ->
	      call 'digraph':'add_vertex'
		  (_cor1, _cor3, Label)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'subgraph_edge'/4 =
    %% Line 348
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 349
	case call 'digraph':'edge'
		 (_cor2, _cor3) of
	  <{_X_E,V1,V2,Label}> when 'true' ->
	      %% Line 350
	      case call 'digraph':'vertex'
		       (_cor1, V2) of
		%% Line 351
		<'false'> when 'true' ->
		    'ok'
		%% Line 352
		<_cor12>
		    when let <_cor5> =
			  call 'erlang':'=:='
			      (_cor0, 'false')
		      in  let <_cor6> =
			      call 'erlang':'is_boolean'
				  (_cor0)
			  in  call 'erlang':'and'
				  (_cor5, _cor6) ->
		    call 'digraph':'add_edge'
			(_cor1, _cor3, V1, V2, [])
		%% Line 353
		<_cor13>
		    when call 'erlang':'=:='
			  (_cor0,
			   'true') ->
		    call 'digraph':'add_edge'
			(_cor1, _cor3, V1, V2, Label)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'condense'/5 =
    %% Line 356
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <T> =
	    %% Line 357
	    call 'ets':'new'
		('condense', [])
	in  let <NFun> =
		%% Line 358
		( fun (_cor7) ->
		      %% Line 359
		      case call 'ets':'lookup'
			       (_cor1, _cor7) of
			<[{_X_V,I}|[]]> when 'true' ->
			    %% Line 360
			    call 'ets':'insert'
				(T, {I})
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-condense/5-fun-0-'}}] )
	    in  let <VFun> =
		    %% Line 362
		    ( fun (_cor11) ->
			  let <_cor10> =
			      call 'digraph':'out_neighbours'
				  (_cor3, _cor11)
			  in  call 'lists':'foreach'
				  (NFun, _cor10)
		      -| [{'id',{0,0,'-condense/5-fun-1-'}}] )
		in  do  %% Line 363
			call 'lists':'foreach'
			    (VFun, _cor4)
			do  %% Line 364
			    call 'digraph':'add_vertex'
				(_cor2, _cor4)
			    let <_cor14> =
				%% Line 365
				call 'ets':'first'
				    (T)
			    in  do  %% Line 365
				    apply 'condense'/6
					(_cor14, T, _cor4, _cor3, _cor2, _cor0)
				    %% Line 366
				    call 'ets':'delete'
					(T)
'condense'/6 =
    %% Line 368
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'$end_of_table',_X_T,_X_SC,_X_G,_X_SCG,_X_I2C> when 'true' ->
	      %% Line 369
	      'ok'
	  %% Line 370
	  <I,T,SC,G,SCG,I2C> when 'true' ->
	      %% Line 371
	      case call 'ets':'lookup'
		       (I2C, I) of
		<[{_cor17,C}|[]]> when 'true' ->
		    do  %% Line 372
			call 'digraph':'add_vertex'
			    (SCG, C)
			let <_cor8> =
			    %% Line 373
			    ( case <> of
				<>
				    when call 'erlang':'=/='
					  (C,
					   SC) ->
				    let <_cor7> =
					( call 'digraph':'add_edge'
					      (SCG, SC, C)
					  -| ['result_not_wanted'] )
				    in  ( [_cor7|[]]
					  -| ['compiler_generated'] )
				( <> when 'true' ->
				      []
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			in  let <_cor10> =
				%% Line 374
				call 'ets':'next'
				    (T, I)
			    in  %% Line 374
				apply 'condense'/6
				    (_cor10, T, SC, G, SCG, I2C)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('digraph_utils')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('digraph_utils', _cor0)
end