module 'io_lib_pretty' ['module_info'/0,
			'module_info'/1,
			'print'/1,
			'print'/2,
			'print'/3,
			'print'/4,
			'print'/5,
			'print'/6]
    attributes [%% Line 36
		'spec' =
		    %% Line 36
		    [{{'print',1},[{'type',36,'fun',[{'type',36,'product',[{'type',36,'term',[]}]}|[{'remote_type',36,[{'atom',36,'io_lib'}|[{'atom',36,'chars'}|[[]]]]}]]}]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'rec_print_fun',{'type',46,'fun',[{'type',46,'product',[{'ann_type',46,[{'var',46,'Tag'}|[{'type',46,'atom',[]}]]}|[{'ann_type',46,[{'var',46,'NFields'}|[{'type',46,'non_neg_integer',[]}]]}]]}|[{'type',47,'union',[{'atom',47,'no'}|[{'type',47,'list',[{'ann_type',47,[{'var',47,'FieldName'}|[{'type',47,'atom',[]}]]}]}]]}]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'column',{'type',48,'integer',[]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'line_length',{'type',49,'pos_integer',[]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'depth',{'type',50,'integer',[]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'max_chars',{'type',51,'integer',[]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'chars',{'remote_type',53,[{'atom',53,'io_lib'}|[{'atom',53,'chars'}|[[]]]]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'option',{'type',54,'union',[{'type',54,'tuple',[{'atom',54,'column'}|[{'type',54,'column',[]}]]}|[{'type',55,'tuple',[{'atom',55,'line_length'}|[{'type',55,'line_length',[]}]]}|[{'type',56,'tuple',[{'atom',56,'depth'}|[{'type',56,'depth',[]}]]}|[{'type',57,'tuple',[{'atom',57,'max_chars'}|[{'type',57,'max_chars',[]}]]}|[{'type',58,'tuple',[{'atom',58,'record_print_fun'}|[{'type',58,'rec_print_fun',[]}]]}|[{'type',59,'tuple',[{'atom',59,'strings'}|[{'type',59,'boolean',[]}]]}|[{'type',60,'tuple',[{'atom',60,'encoding'}|[{'type',60,'union',[{'atom',60,'latin1'}|[{'atom',60,'utf8'}|[{'atom',60,'unicode'}]]]}]]}]]]]]]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'options',{'type',61,'list',[{'type',61,'option',[]}]},[]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'print',2},[{'type',63,'fun',[{'type',63,'product',[{'type',63,'term',[]}|[{'type',63,'rec_print_fun',[]}]]}|[{'type',63,'chars',[]}]]}|[{'type',64,'fun',[{'type',64,'product',[{'type',64,'term',[]}|[{'type',64,'options',[]}]]}|[{'type',64,'chars',[]}]]}]]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'print',3},[{'type',78,'fun',[{'type',78,'product',[{'type',78,'term',[]}|[{'type',78,'depth',[]}|[{'type',78,'rec_print_fun',[]}]]]}|[{'type',78,'chars',[]}]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'print',4},[{'type',83,'fun',[{'type',83,'product',[{'type',83,'term',[]}|[{'type',83,'column',[]}|[{'type',83,'line_length',[]}|[{'type',83,'depth',[]}]]]]}|[{'type',83,'chars',[]}]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'print',5},[{'type',88,'fun',[{'type',88,'product',[{'type',88,'term',[]}|[{'type',88,'column',[]}|[{'type',88,'line_length',[]}|[{'type',88,'depth',[]}|[{'type',88,'rec_print_fun',[]}]]]]]}|[{'type',89,'chars',[]}]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'print',6},[{'type',93,'fun',[{'type',93,'product',[{'type',93,'term',[]}|[{'type',93,'column',[]}|[{'type',93,'line_length',[]}|[{'type',93,'depth',[]}|[{'type',93,'max_chars',[]}|[{'type',94,'rec_print_fun',[]}]]]]]]}|[{'type',94,'chars',[]}]]}]}]]
'print'/1 =
    %% Line 38
    fun (_cor0) ->
	%% Line 39
	apply 'print'/4
	    (_cor0, 1, 80, -1)
'print'/2 =
    %% Line 66
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Term,Options>
	      when call 'erlang':'is_list'
		    (Options) ->
	      let <Col> =
		  %% Line 67
		  apply 'get_option'/3
		      ('column', Options, 1)
	      in  let <Ll> =
		      %% Line 68
		      apply 'get_option'/3
			  ('line_length', Options, 80)
		  in  let <D> =
			  %% Line 69
			  apply 'get_option'/3
			      ('depth', Options, -1)
		      in  let <M> =
			      %% Line 70
			      apply 'get_option'/3
				  ('max_chars', Options, -1)
			  in  let <RecDefFun> =
				  %% Line 71
				  apply 'get_option'/3
				      ('record_print_fun', Options, 'no_fun')
			      in  let <_cor9> =
				      %% Line 72
				      call 'epp':'default_encoding'
					  ()
				  in  let <Encoding> =
					  %% Line 72
					  apply 'get_option'/3
					      ('encoding', Options, _cor9)
				      in  let <Strings> =
					      %% Line 73
					      apply 'get_option'/3
						  ('strings', Options, 'true')
					  in  %% Line 74
					      apply 'print'/8
						  (Term, Col, Ll, D, M, RecDefFun, Encoding, Strings)
	  %% Line 75
	  <Term,RecDefFun> when 'true' ->
	      %% Line 76
	      apply 'print'/3
		  (Term, -1, RecDefFun)
	end
'print'/3 =
    %% Line 80
    fun (_cor2,_cor1,_cor0) ->
	%% Line 81
	apply 'print'/5
	    (_cor2, 1, 80, _cor1, _cor0)
'print'/4 =
    %% Line 85
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 86
	apply 'print'/8
	    (_cor3, _cor2, _cor1, _cor0, -1, 'no_fun', 'latin1', 'true')
'print'/5 =
    %% Line 90
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 91
	apply 'print'/6
	    (_cor4, _cor3, _cor2, _cor1, -1, _cor0)
'print'/6 =
    %% Line 96
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 97
	apply 'print'/8
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0, 'latin1', 'true')
'print'/8 =
    %% Line 99
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor33,_cor34,_cor35,0,_X_M,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      [46|[46|[46]]]
	  %% Line 100
	  <Term,Col,Ll,D,M,RecDefFun,Enc,Str>
	      when call 'erlang':'=<'
		    (Col,
		     0) ->
	      %% Line 101
	      apply 'print'/8
		  (Term, 1, Ll, D, M, RecDefFun, Enc, Str)
	  %% Line 102
	  <Term,Col,Ll,D,M0,RecDefFun,Enc,Str>
	      when let <_cor8> =
		    call 'erlang':'is_tuple'
			(Term)
		in  let <_cor9> =
			%% Line 103
			call 'erlang':'is_list'
			    (Term)
		    in  let <_cor10> =
			    %% Line 104
			    call 'erlang':'is_map'
				(Term)
			in  let <_cor11> =
				%% Line 105
				call 'erlang':'is_bitstring'
				    (Term)
			    in  let <_cor12> =
				    %% Line 104
				    call 'erlang':'or'
					(_cor10, _cor11)
				in  let <_cor13> =
					%% Line 103
					call 'erlang':'or'
					    (_cor9, _cor12)
				    in  call 'erlang':'or'
					    (_cor8, _cor13) ->
	      %% Line 106
	      case apply 'print_length'/5
		       (Term, D, RecDefFun, Enc, Str) of
		<If = {_X_S,Len}> when 'true' ->
		    let <M> =
			%% Line 107
			apply 'max_cs'/2
			    (M0, Len)
		    in  %% Line 108
			case <> of
			  %% Line 109
			  <>
			      when try
				    let <_cor16> =
					call 'erlang':'-'
					    (Ll, Col)
				    in  let <_cor17> =
					    call 'erlang':'<'
						(Len, _cor16)
					in  let <_cor18> =
						call 'erlang':'=<'
						    (Len, M)
					    in  call 'erlang':'and'
						    (_cor17, _cor18)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 110
			      apply 'write'/1
				  (If)
			  %% Line 111
			  <> when 'true' ->
			      let <_cor21> =
				  %% Line 113
				  ( fun (_cor19) ->
					apply 'cind'/7
					    (If, Col, Ll, M, _cor19, 0, 0)
				    -| [{'id',{0,0,'-print/8-fun-0-'}}] )
			      in  let <TInd> =
				      %% Line 112
				      apply 'while_fail'/3
					  ([-1|[4]], _cor21, %% Line 114
							     1)
				  in  let <_cor24> =
					  %% Line 115
					  apply 'indent'/1
					      (Col)
				      in  %% Line 115
					  apply 'pp'/8
					      (If, Col, Ll, M, TInd, _cor24, 0, 0)
			end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 117
	  <Term,_X_Col,_X_Ll,_X_D,_X_M,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 118
	      call 'io_lib':'write'
		  (Term)
	end
'max_cs'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <M,Len>
	      when call 'erlang':'<'
		    (M,
		     0) ->
	      %% Line 125
	      Len
	  %% Line 126
	  <M,_X_Len> when 'true' ->
	      %% Line 127
	      M
	end
'pp'/8 =
    %% Line 132
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <If = {_X_S,Len},Col,Ll,M,_X_TInd,_X_Ind,LD,W>
	      when %% Line 133
		try
		    let <_cor8> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_cor9> =
			    call 'erlang':'-'
				(_cor8, LD)
			in  let <_cor10> =
				call 'erlang':'<'
				    (Len, _cor9)
			    in  let <_cor11> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_cor12> =
					call 'erlang':'+'
					    (_cor11, LD)
				    in  let <_cor13> =
					    call 'erlang':'=<'
						(_cor12, M)
					in  call 'erlang':'and'
						(_cor10, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 134
	      apply 'write'/1
		  (If)
	  %% Line 135
	  <{{'list',L},_X_Len},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_cor16> =
		  %% Line 136
		  call 'erlang':'+'
		      (Col, 1)
	      in  let <_cor15> =
		      %% Line 136
		      apply 'indent'/2
			  (1, Ind)
		  in  let <_cor14> =
			  %% Line 136
			  call 'erlang':'+'
			      (W, 1)
		      in  let <_cor17> =
			      %% Line 136
			      apply 'pp_list'/9
				  (L, _cor16, Ll, M, TInd, _cor15, LD, 124, _cor14)
			  in  %% Line 136
			      [91|[_cor17|[93]]]
	  %% Line 137
	  <{{'tuple','true',L},_X_Len},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_cor18> =
		  %% Line 138
		  call 'erlang':'+'
		      (W, 1)
	      in  let <_cor19> =
		      %% Line 138
		      apply 'pp_tag_tuple'/8
			  (L, Col, Ll, M, TInd, Ind, LD, _cor18)
		  in  %% Line 138
		      [123|[_cor19|[125]]]
	  %% Line 139
	  <{{'tuple','false',L},_X_Len},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_cor22> =
		  %% Line 140
		  call 'erlang':'+'
		      (Col, 1)
	      in  let <_cor21> =
		      %% Line 140
		      apply 'indent'/2
			  (1, Ind)
		  in  let <_cor20> =
			  %% Line 140
			  call 'erlang':'+'
			      (W, 1)
		      in  let <_cor23> =
			      %% Line 140
			      apply 'pp_list'/9
				  (L, _cor22, Ll, M, TInd, _cor21, LD, 44, _cor20)
			  in  %% Line 140
			      [123|[_cor23|[125]]]
	  %% Line 141
	  <{{'map',Pairs},_X_Len},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_cor26> =
		  %% Line 142
		  call 'erlang':'+'
		      (Col, 2)
	      in  let <_cor25> =
		      %% Line 142
		      apply 'indent'/2
			  (2, Ind)
		  in  let <_cor24> =
			  %% Line 142
			  call 'erlang':'+'
			      (W, 1)
		      in  let <_cor27> =
			      %% Line 142
			      apply 'pp_list'/9
				  (Pairs, _cor26, Ll, M, TInd, _cor25, LD, 44, _cor24)
			  in  %% Line 142
			      [35|[123|[_cor27|[125]]]]
	  %% Line 143
	  <{{'map_pair',K,V},_X_Len},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_cor28> =
		  %% Line 144
		  apply 'pp'/8
		      (K, Col, Ll, M, TInd, Ind, LD, W)
	      in  let <_cor29> =
		      %% Line 144
		      apply 'pp'/8
			  (V, Col, Ll, M, TInd, Ind, LD, W)
		  in  %% Line 144
		      [_cor28|[[32|[61|[62|[32]]]]|[_cor29|[]]]]
	  %% Line 145
	  <{{'record',[{Name,NLen}|L]},_X_Len},Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_cor30> =
		  %% Line 146
		  call 'erlang':'+'
		      (W, NLen)
	      in  let <_cor31> =
		      %% Line 146
		      call 'erlang':'+'
			  (_cor30, 1)
		  in  let <_cor32> =
			  %% Line 146
			  apply 'pp_record'/9
			      (L, NLen, Col, Ll, M, TInd, Ind, LD, _cor31)
		      in  %% Line 146
			  [Name|[123|[_cor32|[125]]]]
	  %% Line 147
	  <{{'bin',S},_X_Len},Col,Ll,M,_X_TInd,Ind,LD,W> when 'true' ->
	      let <_cor34> =
		  %% Line 148
		  call 'erlang':'+'
		      (Col, 2)
	      in  let <_cor33> =
		      %% Line 148
		      apply 'indent'/2
			  (2, Ind)
		  in  %% Line 148
		      apply 'pp_binary'/7
			  (S, _cor34, Ll, M, _cor33, LD, W)
	  %% Line 149
	  <{S,_X_Len},_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 150
	      S
	  ( <_cor42,_cor41,_cor40,_cor39,_cor38,_cor37,_cor36,_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor42,_cor41,_cor40,_cor39,_cor38,_cor37,_cor36,_cor35})
		  -| [{'function_name',{'pp',8}}] )
	    -| ['compiler_generated'] )
	end
'pp_tag_tuple'/8 =
    %% Line 154
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Tag,Tlen}|L],Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <TagInd> =
		  %% Line 155
		  call 'erlang':'+'
		      (Tlen, 2)
	      in  let <Tcol> =
		      %% Line 156
		      call 'erlang':'+'
			  (Col, TagInd)
		  in  %% Line 158
		      case <> of
			%% Line 159
			<>
			    when let <_cor11> =
				  call 'erlang':'>'
				      (TInd, 0)
			      in  let <_cor12> =
				      call 'erlang':'>'
					  (TagInd, TInd)
				  in  call 'erlang':'and'
					  (_cor11, _cor12) ->
			    let <Col1> =
				%% Line 160
				call 'erlang':'+'
				    (Col, TInd)
			    in  let <Indent> =
				    %% Line 161
				    apply 'indent'/2
					(TInd, Ind)
				in  let <_cor15> =
					%% Line 162
					call 'erlang':'+'
					    (W, Tlen)
				    in  let <_cor16> =
					    %% Line 162
					    apply 'pp_tail'/10
						(L, Col1, Tcol, Ll, M, TInd, Indent, LD, 44, _cor15)
					in  %% Line 162
					    [Tag|_cor16]
			%% Line 163
			<> when 'true' ->
			    let <Indent> =
				%% Line 164
				apply 'indent'/2
				    (TagInd, Ind)
			    in  let <_cor18> =
				    %% Line 165
				    call 'erlang':'+'
					(W, Tlen)
				in  let <_cor19> =
					%% Line 165
					call 'erlang':'+'
					    (_cor18, 1)
				    in  let <_cor20> =
					    %% Line 165
					    apply 'pp_list'/9
						(L, Tcol, Ll, M, TInd, Indent, LD, 44, _cor19)
					in  %% Line 165
					    [Tag|[44|_cor20]]
		      end
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'pp_tag_tuple',8}}] )
	    -| ['compiler_generated'] )
	end
'pp_record'/9 =
    %% Line 168
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Nlen,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 169
	      []
	  %% Line 170
	  <{'dots',_cor25},_X_Nlen,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 171
	      [46|[46|[46]]]
	  %% Line 172
	  <[F|Fs],Nlen,Col0,Ll,M,TInd,Ind0,LD,W0> when 'true' ->
	      let <Nind> =
		  %% Line 173
		  call 'erlang':'+'
		      (Nlen, 1)
	      in  %% Line 174
		  case apply 'rec_indent'/5
			   (Nind, TInd, Col0, Ind0, W0) of
		    <{Col,Ind,S,W}> when 'true' ->
			let <_cor11> =
			    %% Line 175
			    apply 'last_depth'/2
				(Fs, LD)
			in  %% Line 175
			    case apply 'pp_field'/8
				     (F, Col, Ll, M, TInd, Ind, _cor11, W) of
			      <{FS,FW}> when 'true' ->
				  let <_cor14> =
				      %% Line 176
				      call 'erlang':'+'
					  (Col, FW)
				  in  let <_cor13> =
					  %% Line 176
					  call 'erlang':'+'
					      (W, FW)
				      in  let <_cor15> =
					      %% Line 176
					      apply 'pp_fields_tail'/9
						  (Fs, Col, _cor14, Ll, M, TInd, Ind, LD, _cor13)
					  in  %% Line 176
					      [S|[FS|_cor15]]
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor12})
				-| ['compiler_generated'] )
			    end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'pp_record',9}}] )
	    -| ['compiler_generated'] )
	end
'pp_fields_tail'/9 =
    %% Line 178
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 179
	      []
	  %% Line 180
	  <{'dots',_cor55},_X_Col0,_X_Col,_X_M,_X_Ll,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 181
	      [44|[46|[46|[46]]]]
	  %% Line 182
	  <[F = {_cor56,Len}|Fs],Col0,Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <LD1> =
		  %% Line 183
		  apply 'last_depth'/2
		      (Fs, LD)
	      in  let <ELen> =
		      %% Line 184
		      call 'erlang':'+'
			  (1, Len)
		  in  %% Line 185
		      case <> of
			%% Line 186
			<>
			    when let <_cor24> =
				  try
				      let <_cor11> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_cor13> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_cor12> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_cor14> =
						      call 'erlang':'<'
							  (_cor13, _cor12)
						  in  let <_cor15> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_cor16> =
							      call 'erlang':'+'
								  (_cor15, 1)
							  in  let <_cor17> =
								  call 'erlang':'=<'
								      (_cor16, M)
							      in  let <_cor19> =
								      call 'erlang':'element'
									  (4, _cor56)
								  in  let <_cor20> =
									  call 'erlang':'element'
									      (1, _cor19)
								      in  let <_cor21> =
									      call 'erlang':'is_list'
										  (_cor20)
									  in  let <_cor22> =
										  call 'erlang':'and'
										      (_cor17, _cor21)
									      in  let <_cor23> =
										      call 'erlang':'and'
											  (_cor14, _cor22)
										  in  call 'erlang':'and'
											  (_cor11, _cor23)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_cor38> =
				      %% Line 187
				      try
					  let <_cor25> =
					      call 'erlang':'>'
						  (LD1, 0)
					  in  let <_cor26> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_cor27> =
						      call 'erlang':'-'
							  (_cor26, LD1)
						  in  let <_cor28> =
							  call 'erlang':'<'
							      (ELen, _cor27)
						      in  let <_cor29> =
							      call 'erlang':'+'
								  (W, ELen)
							  in  let <_cor30> =
								  call 'erlang':'+'
								      (_cor29, LD1)
							      in  let <_cor31> =
								      call 'erlang':'=<'
									  (_cor30, M)
								  in  let <_cor33> =
									  call 'erlang':'element'
									      (4, _cor56)
								      in  let <_cor34> =
									      call 'erlang':'element'
										  (1, _cor33)
									  in  let <_cor35> =
										  call 'erlang':'is_list'
										      (_cor34)
									      in  let <_cor36> =
										      call 'erlang':'and'
											  (_cor31, _cor35)
										  in  let <_cor37> =
											  call 'erlang':'and'
											      (_cor28, _cor36)
										      in  call 'erlang':'and'
											      (_cor25, _cor37)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_cor24, _cor38) ->
			    let <_cor39> =
				%% Line 188
				apply 'write_field'/1
				    (F)
			    in  let <_cor41> =
				    %% Line 189
				    call 'erlang':'+'
					(Col, ELen)
				in  let <_cor40> =
					%% Line 189
					call 'erlang':'+'
					    (W, ELen)
				    in  let <_cor42> =
					    %% Line 189
					    apply 'pp_fields_tail'/9
						(Fs, Col0, _cor41, Ll, M, TInd, Ind, LD, _cor40)
					in  %% Line 188
					    [44|[_cor39|_cor42]]
			%% Line 190
			<> when 'true' ->
			    %% Line 191
			    case apply 'pp_field'/8
				     (F, Col0, Ll, M, TInd, Ind, LD1, 0) of
			      <{FS,FW}> when 'true' ->
				  let <_cor44> =
				      %% Line 193
				      call 'erlang':'+'
					  (Col0, FW)
				  in  let <_cor45> =
					  %% Line 193
					  apply 'pp_fields_tail'/9
					      (Fs, Col0, _cor44, Ll, M, TInd, Ind, LD, FW)
				      in  %% Line 192
					  [44|[10|[Ind|[FS|_cor45]]]]
			      ( <_cor43> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor43})
				-| ['compiler_generated'] )
			    end
		      end
	  ( <_cor54,_cor53,_cor52,_cor51,_cor50,_cor49,_cor48,_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52,_cor51,_cor50,_cor49,_cor48,_cor47,_cor46})
		  -| [{'function_name',{'pp_fields_tail',9}}] )
	    -| ['compiler_generated'] )
	end
'pp_field'/8 =
    %% Line 196
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fl = {_cor30,Len},Col,Ll,M,_X_TInd,_X_Ind,LD,W>
	      when %% Line 197
		try
		    let <_cor8> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_cor9> =
			    call 'erlang':'-'
				(_cor8, LD)
			in  let <_cor10> =
				call 'erlang':'<'
				    (Len, _cor9)
			    in  let <_cor11> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_cor12> =
					call 'erlang':'+'
					    (_cor11, LD)
				    in  let <_cor13> =
					    call 'erlang':'=<'
						(_cor12, M)
					in  call 'erlang':'and'
						(_cor10, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor18> =
		  %% Line 198
		  apply 'write_field'/1
		      (Fl)
	      in  let <_cor17> =
		      %% Line 198
		      case <> of
			%% Line 199
			<>
			    when try
				  let <_cor15> =
				      call 'erlang':'element'
					  (4, _cor30)
				  in  let <_cor16> =
					  call 'erlang':'element'
					      (1, _cor15)
				      in  call 'erlang':'is_list'
					      (_cor16)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 200
			    Len
			%% Line 201
			<> when 'true' ->
			    %% Line 202
			    Ll
		      end
		  in  %% Line 198
		      {_cor18,_cor17}
	  %% Line 204
	  <{{'field',Name,NameL,F},_X_Len},Col0,Ll,M,TInd,Ind0,LD,W0> when 'true' ->
	      let <_cor19> =
		  %% Line 205
		  call 'erlang':'+'
		      (W0, NameL)
	      in  %% Line 205
		  case apply 'rec_indent'/5
			   (NameL, TInd, Col0, Ind0, _cor19) of
		    <{Col,Ind,S,W}> when 'true' ->
			let <_cor21> =
			    %% Line 206
			    apply 'pp'/8
				(F, Col, Ll, M, TInd, Ind, LD, W)
			in  %% Line 206
			    {[Name|[[32|[61|[32]]]|[S|_cor21]]],Ll}
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor20})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'pp_field',8}}] )
	    -| ['compiler_generated'] )
	end
'rec_indent'/5 =
    %% Line 208
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 209
	    call 'erlang':'>'
		(_cor3, 0)
	in  let <_cor5> =
		%% Line 209
		call 'erlang':'>'
		    (_cor4, _cor3)
	    in  let <Nl> =
		    %% Line 209
		    call 'erlang':'and'
			(_cor6, _cor5)
		in  let <_cor9> =
			%% Line 210
			case Nl of
			  %% Line 211
			  <'true'> when 'true' ->
			      _cor3
			  %% Line 212
			  <'false'> when 'true' ->
			      _cor4
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		    in  let <Col> =
			    %% Line 214
			    call 'erlang':'+'
				(_cor2, _cor9)
			in  let <Ind> =
				%% Line 215
				apply 'indent'/2
				    (_cor9, _cor1)
			    in  let <_cor14> =
				    %% Line 216
				    case Nl of
				      %% Line 217
				      <'true'> when 'true' ->
					  [10|Ind]
				      %% Line 218
				      <'false'> when 'true' ->
					  []
				      ( <_cor13> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor13})
					-| ['compiler_generated'] )
				    end
				in  let <_cor17> =
					%% Line 220
					case Nl of
					  %% Line 221
					  <'true'> when 'true' ->
					      0
					  %% Line 222
					  <'false'> when 'true' ->
					      _cor0
					  ( <_cor16> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor16})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 224
					{Col,Ind,_cor14,_cor17}
'pp_list'/9 =
    %% Line 226
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'dots',_cor23},_X_Col0,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_S,_X_W> when 'true' ->
	      %% Line 227
	      [46|[46|[46]]]
	  %% Line 228
	  <[E|Es],Col0,Ll,M,TInd,Ind,LD,S,W> when 'true' ->
	      let <_cor9> =
		  %% Line 229
		  apply 'last_depth'/2
		      (Es, LD)
	      in  %% Line 229
		  case apply 'pp_element'/8
			   (E, Col0, Ll, M, TInd, Ind, _cor9, W) of
		    <{ES,WE}> when 'true' ->
			let <_cor12> =
			    %% Line 230
			    call 'erlang':'+'
				(Col0, WE)
			in  let <_cor11> =
				%% Line 230
				call 'erlang':'+'
				    (W, WE)
			    in  let <_cor13> =
				    %% Line 230
				    apply 'pp_tail'/10
					(Es, Col0, _cor12, Ll, M, TInd, Ind, LD, S, _cor11)
				in  %% Line 230
				    [ES|_cor13]
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'pp_list',9}}] )
	    -| ['compiler_generated'] )
	end
'pp_tail'/10 =
    %% Line 232
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_S,_X_W> when 'true' ->
	      %% Line 233
	      []
	  %% Line 234
	  <[E = {_cor69,Len}|Es],Col0,Col,Ll,M,TInd,Ind,LD,S,W> when 'true' ->
	      let <LD1> =
		  %% Line 235
		  apply 'last_depth'/2
		      (Es, LD)
	      in  let <ELen> =
		      %% Line 236
		      call 'erlang':'+'
			  (1, Len)
		  in  %% Line 237
		      case <> of
			%% Line 238
			<>
			    when let <_cor23> =
				  try
				      let <_cor12> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_cor14> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_cor13> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_cor15> =
						      call 'erlang':'<'
							  (_cor14, _cor13)
						  in  let <_cor16> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_cor17> =
							      call 'erlang':'+'
								  (_cor16, 1)
							  in  let <_cor18> =
								  call 'erlang':'=<'
								      (_cor17, M)
							      in  let <_cor20> =
								      call 'erlang':'is_list'
									  (_cor69)
								  in  let <_cor21> =
									  call 'erlang':'and'
									      (_cor18, _cor20)
								      in  let <_cor22> =
									      call 'erlang':'and'
										  (_cor15, _cor21)
									  in  call 'erlang':'and'
										  (_cor12, _cor22)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_cor35> =
				      %% Line 239
				      try
					  let <_cor24> =
					      call 'erlang':'>'
						  (LD1, 0)
					  in  let <_cor25> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_cor26> =
						      call 'erlang':'-'
							  (_cor25, LD1)
						  in  let <_cor27> =
							  call 'erlang':'<'
							      (ELen, _cor26)
						      in  let <_cor28> =
							      call 'erlang':'+'
								  (W, ELen)
							  in  let <_cor29> =
								  call 'erlang':'+'
								      (_cor28, LD1)
							      in  let <_cor30> =
								      call 'erlang':'=<'
									  (_cor29, M)
								  in  let <_cor32> =
									  call 'erlang':'is_list'
									      (_cor69)
								      in  let <_cor33> =
									      call 'erlang':'and'
										  (_cor30, _cor32)
									  in  let <_cor34> =
										  call 'erlang':'and'
										      (_cor27, _cor33)
									      in  call 'erlang':'and'
										      (_cor24, _cor34)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_cor23, _cor35) ->
			    let <_cor36> =
				%% Line 240
				apply 'write'/1
				    (E)
			    in  let <_cor38> =
				    %% Line 241
				    call 'erlang':'+'
					(Col, ELen)
				in  let <_cor37> =
					%% Line 241
					call 'erlang':'+'
					    (W, ELen)
				    in  let <_cor39> =
					    %% Line 241
					    apply 'pp_tail'/10
						(Es, Col0, _cor38, Ll, M, TInd, Ind, LD, S, _cor37)
					in  %% Line 240
					    [44|[_cor36|_cor39]]
			%% Line 242
			<> when 'true' ->
			    %% Line 243
			    case apply 'pp_element'/8
				     (E, Col0, Ll, M, TInd, Ind, LD1, 0) of
			      <{ES,WE}> when 'true' ->
				  let <_cor41> =
				      %% Line 245
				      call 'erlang':'+'
					  (Col0, WE)
				  in  let <_cor42> =
					  %% Line 245
					  apply 'pp_tail'/10
					      (Es, Col0, _cor41, Ll, M, TInd, Ind, LD, S, WE)
				      in  %% Line 244
					  [44|[10|[Ind|[ES|_cor42]]]]
			      ( <_cor40> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor40})
				-| ['compiler_generated'] )
			    end
		      end
	  %% Line 247
	  <{'dots',_cor70},_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,S,_X_W> when 'true' ->
	      %% Line 248
	      [S|[46|[46|[46]]]]
	  %% Line 249
	  <E = {_cor71,Len},_X_Col0,Col,Ll,M,_X_TInd,_X_Ind,LD,S,W>
	      when %% Line 250
		try
		    let <_cor46> =
			call 'erlang':'+'
			    (Len, 1)
		    in  let <_cor44> =
			    call 'erlang':'-'
				(Ll, Col)
			in  let <_cor43> =
				call 'erlang':'+'
				    (LD, 1)
			    in  let <_cor45> =
				    call 'erlang':'-'
					(_cor44, _cor43)
				in  let <_cor47> =
					call 'erlang':'<'
					    (_cor46, _cor45)
				    in  let <_cor49> =
					    %% Line 251
					    call 'erlang':'+'
						(Len, 1)
					in  let <_cor50> =
						%% Line 251
						call 'erlang':'+'
						    (_cor49, W)
					    in  let <_cor48> =
						    %% Line 251
						    call 'erlang':'+'
							(LD, 1)
						in  let <_cor51> =
							%% Line 251
							call 'erlang':'+'
							    (_cor50, _cor48)
						    in  let <_cor52> =
							    %% Line 251
							    call 'erlang':'=<'
								(_cor51, M)
							in  let <_cor54> =
								%% Line 252
								call 'erlang':'is_list'
								    (_cor71)
							    in  let <_cor55> =
								    call 'erlang':'and'
									(_cor52, _cor54)
								in  call 'erlang':'and'
									(_cor47, _cor55)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor56> =
		  %% Line 253
		  apply 'write'/1
		      (E)
	      in  %% Line 253
		  [S|_cor56]
	  %% Line 254
	  <E,Col0,_X_Col,Ll,M,TInd,Ind,LD,S,_X_W> when 'true' ->
	      let <_cor57> =
		  %% Line 255
		  call 'erlang':'+'
		      (LD, 1)
	      in  let <_cor58> =
		      %% Line 255
		      apply 'pp'/8
			  (E, Col0, Ll, M, TInd, Ind, _cor57, 0)
		  in  %% Line 255
		      [S|[10|[Ind|_cor58]]]
	end
'pp_element'/8 =
    %% Line 257
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E = {_cor27,Len},Col,Ll,M,_X_TInd,_X_Ind,LD,W>
	      when %% Line 258
		try
		    let <_cor8> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_cor9> =
			    call 'erlang':'-'
				(_cor8, LD)
			in  let <_cor10> =
				call 'erlang':'<'
				    (Len, _cor9)
			    in  let <_cor11> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_cor12> =
					call 'erlang':'+'
					    (_cor11, LD)
				    in  let <_cor13> =
					    call 'erlang':'=<'
						(_cor12, M)
					in  let <_cor15> =
						call 'erlang':'is_list'
						    (_cor27)
					    in  let <_cor16> =
						    call 'erlang':'and'
							(_cor13, _cor15)
						in  call 'erlang':'and'
							(_cor10, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor17> =
		  %% Line 259
		  apply 'write'/1
		      (E)
	      in  %% Line 259
		  {_cor17,Len}
	  %% Line 260
	  <E,Col,Ll,M,TInd,Ind,LD,W> when 'true' ->
	      let <_cor18> =
		  %% Line 261
		  apply 'pp'/8
		      (E, Col, Ll, M, TInd, Ind, LD, W)
	      in  %% Line 261
		  {_cor18,Ll}
	end
'pp_binary'/7 =
    %% Line 264
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[LT|[_cor21|[S|[GT|[_cor22|[]]]]]],Col,Ll,M,Ind,LD,W>
	      when let <_cor23> =
		    call 'erlang':'=:='
			(_cor21, LT)
		in  let <_cor24> =
			call 'erlang':'=:='
			    (_cor22, GT)
		    in  call 'erlang':'and'
			    (_cor23, _cor24) ->
	      let <_cor9> =
		  %% Line 265
		  call 'erlang':'-'
		      (Ll, Col)
	      in  let <_cor7> =
		      %% Line 265
		      call 'erlang':'-'
			  (M, 4)
		  in  let <_cor8> =
			  %% Line 265
			  call 'erlang':'-'
			      (_cor7, W)
		      in  let <_cor10> =
			      %% Line 265
			      call 'erlang':'min'
				  (_cor9, _cor8)
			  in  let <_cor11> =
				  %% Line 265
				  call 'erlang':'-'
				      (_cor10, LD)
			      in  let <N> =
				      %% Line 265
				      call 'erlang':'max'
					  (8, _cor11)
				  in  let <_cor13> =
					  %% Line 266
					  apply 'pp_binary'/4
					      (S, N, N, Ind)
				      in  %% Line 266
					  [LT|[LT|[_cor13|[GT|[GT|[]]]]]]
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'pp_binary',7}}] )
	    -| ['compiler_generated'] )
	end
'pp_binary'/4 =
    %% Line 268
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[BS|[44|S]],N,N0,Ind> when 'true' ->
	      let <_cor4> =
		  %% Line 269
		  call 'erlang':'length'
		      (BS)
	      in  let <Len> =
		      %% Line 269
		      call 'erlang':'+'
			  (_cor4, 1)
		  in  %% Line 270
		      case call 'erlang':'-'
			       (N, Len) of
			%% Line 271
			<N1>
			    when call 'erlang':'<'
				  (N1,
				   0) ->
			    let <_cor6> =
				%% Line 272
				call 'erlang':'-'
				    (N0, Len)
			    in  let <_cor7> =
				    %% Line 272
				    apply 'pp_binary'/4
					(S, _cor6, N0, Ind)
				in  %% Line 272
				    [10|[Ind|[BS|[44|_cor7]]]]
			%% Line 273
			<N1> when 'true' ->
			    let <_cor8> =
				%% Line 274
				apply 'pp_binary'/4
				    (S, N1, N0, Ind)
			    in  %% Line 274
				[BS|[44|_cor8]]
		      end
	  %% Line 276
	  <S = [BS1|[58|[BS2|[]]]],N,_X_N0,Ind>
	      when %% Line 277
		try
		    let <_cor11> =
			call 'erlang':'length'
			    (BS1)
		    in  let <_cor10> =
			    call 'erlang':'length'
				(BS2)
			in  let <_cor12> =
				call 'erlang':'+'
				    (_cor11, _cor10)
			    in  let <_cor13> =
				    call 'erlang':'+'
					(_cor12, 1)
				in  call 'erlang':'>'
					(_cor13, N)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 278
	      [10|[Ind|[S|[]]]]
	  %% Line 279
	  <S,N,_X_N0,Ind> when 'true' ->
	      let <_cor14> =
		  %% Line 280
		  call 'erlang':'iolist_size'
		      (S)
	      in  %% Line 280
		  case <> of
		    %% Line 281
		    <>
			when call 'erlang':'>'
			      (_cor14,
			       N) ->
			%% Line 282
			[10|[Ind|[S|[]]]]
		    %% Line 283
		    <> when 'true' ->
			%% Line 284
			S
		  end
	end
'write'/1 =
    %% Line 287
    fun (_cor0) ->
	case _cor0 of
	  <{{'tuple',_X_IsTagged,L},_cor8}> when 'true' ->
	      let <_cor1> =
		  %% Line 288
		  apply 'write_list'/2
		      (L, 44)
	      in  %% Line 288
		  [123|[_cor1|[125]]]
	  %% Line 289
	  <{{'list',L},_cor9}> when 'true' ->
	      let <_cor2> =
		  %% Line 290
		  apply 'write_list'/2
		      (L, 124)
	      in  %% Line 290
		  [91|[_cor2|[93]]]
	  %% Line 291
	  <{{'map',Pairs},_cor10}> when 'true' ->
	      let <_cor3> =
		  %% Line 292
		  apply 'write_list'/2
		      (Pairs, 44)
	      in  %% Line 292
		  [35|[123|[_cor3|[125]]]]
	  %% Line 293
	  <{{'map_pair',K,V},_cor11}> when 'true' ->
	      let <_cor4> =
		  %% Line 294
		  apply 'write'/1
		      (K)
	      in  let <_cor5> =
		      %% Line 294
		      apply 'write'/1
			  (V)
		  in  %% Line 294
		      [_cor4|[[32|[61|[62|[32]]]]|[_cor5|[]]]]
	  %% Line 295
	  <{{'record',[{Name,_cor12}|L]},_cor13}> when 'true' ->
	      let <_cor6> =
		  %% Line 296
		  apply 'write_fields'/1
		      (L)
	      in  %% Line 296
		  [Name|[123|[_cor6|[125]]]]
	  %% Line 297
	  <{{'bin',S},_cor14}> when 'true' ->
	      %% Line 298
	      S
	  %% Line 299
	  <{S,_cor15}> when 'true' ->
	      %% Line 300
	      S
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'write',1}}] )
	    -| ['compiler_generated'] )
	end
'write_fields'/1 =
    %% Line 302
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 303
	      []
	  %% Line 304
	  <{'dots',_cor4}> when 'true' ->
	      %% Line 305
	      [46|[46|[46]]]
	  %% Line 306
	  <[F|Fs]> when 'true' ->
	      let <_cor1> =
		  %% Line 307
		  apply 'write_field'/1
		      (F)
	      in  let <_cor2> =
		      %% Line 307
		      apply 'write_fields_tail'/1
			  (Fs)
		  in  %% Line 307
		      [_cor1|_cor2]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'write_fields',1}}] )
	    -| ['compiler_generated'] )
	end
'write_fields_tail'/1 =
    %% Line 309
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 310
	      []
	  %% Line 311
	  <{'dots',_cor4}> when 'true' ->
	      %% Line 312
	      [44|[46|[46|[46]]]]
	  %% Line 313
	  <[F|Fs]> when 'true' ->
	      let <_cor1> =
		  %% Line 314
		  apply 'write_field'/1
		      (F)
	      in  let <_cor2> =
		      %% Line 314
		      apply 'write_fields_tail'/1
			  (Fs)
		  in  %% Line 314
		      [44|[_cor1|_cor2]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'write_fields_tail',1}}] )
	    -| ['compiler_generated'] )
	end
'write_field'/1 =
    %% Line 316
    fun (_cor0) ->
	case _cor0 of
	  <{{'field',Name,_X_NameL,F},_cor3}> when 'true' ->
	      let <_cor1> =
		  %% Line 317
		  apply 'write'/1
		      (F)
	      in  %% Line 317
		  [Name|[[32|[61|[32]]]|_cor1]]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'write_field',1}}] )
	    -| ['compiler_generated'] )
	end
'write_list'/2 =
    %% Line 319
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'dots',_cor6},_X_S> when 'true' ->
	      %% Line 320
	      [46|[46|[46]]]
	  %% Line 321
	  <[E|Es],S> when 'true' ->
	      let <_cor2> =
		  %% Line 322
		  apply 'write'/1
		      (E)
	      in  let <_cor3> =
		      %% Line 322
		      apply 'write_tail'/2
			  (Es, S)
		  in  %% Line 322
		      [_cor2|_cor3]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'write_list',2}}] )
	    -| ['compiler_generated'] )
	end
'write_tail'/2 =
    %% Line 324
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_S> when 'true' ->
	      %% Line 325
	      []
	  %% Line 326
	  <[E|Es],S> when 'true' ->
	      let <_cor2> =
		  %% Line 327
		  apply 'write'/1
		      (E)
	      in  let <_cor3> =
		      %% Line 327
		      apply 'write_tail'/2
			  (Es, S)
		  in  %% Line 327
		      [44|[_cor2|_cor3]]
	  %% Line 328
	  <{'dots',_cor7},S> when 'true' ->
	      %% Line 329
	      [S|[46|[46|[46]]]]
	  %% Line 330
	  <E,S> when 'true' ->
	      let <_cor4> =
		  %% Line 331
		  apply 'write'/1
		      (E)
	      in  %% Line 331
		  [S|_cor4]
	end
'print_length'/5 =
    %% Line 339
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_D,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 340
	      {[91|[93]],2}
	  %% Line 341
	  <{},_X_D,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 342
	      {[123|[125]],2}
	  %% Line 343
	  <M = ~{}~,_X_D,_X_RF,_X_Enc,_X_Str>
	      when try
		    let <_cor5> =
			call 'erlang':'map_size'
			    (M)
		    in  call 'erlang':'=:='
			    (_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 344
	      {[35|[123|[125]]],3}
	  %% Line 345
	  <List,D,RF,Enc,Str>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor8> =
		  %% Line 346
		  ( case Str of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'printable_list'/3
				(List, D, Enc)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor6> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor6}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 346
		  case _cor8 of
		    %% Line 347
		    <'true'> when 'true' ->
			let <S> =
			    %% Line 348
			    apply 'write_string'/2
				(List, Enc)
			in  let <_cor10> =
				%% Line 349
				call 'erlang':'length'
				    (S)
			    in  %% Line 349
				{S,_cor10}
		    %% Line 354
		    <'false'> when 'true' ->
			%% Line 355
			apply 'print_length_list'/5
			    (List, D, RF, Enc, Str)
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	  %% Line 357
	  <Fun,_X_D,_X_RF,_X_Enc,_X_Str>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      let <S> =
		  %% Line 358
		  call 'io_lib':'write'
		      (Fun)
	      in  let <_cor13> =
		      %% Line 359
		      call 'erlang':'iolist_size'
			  (S)
		  in  %% Line 359
		      {S,_cor13}
	  %% Line 360
	  <R,D,RF,Enc,Str>
	      when try
		    let <_cor14> =
			call 'erlang':'element'
			    (1, R)
		    in  let <_cor15> =
			    call 'erlang':'is_atom'
				(_cor14)
			in  let <_cor16> =
				%% Line 361
				call 'erlang':'is_function'
				    (RF)
			    in  call 'erlang':'and'
				    (_cor15, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor19> =
		  %% Line 362
		  call 'erlang':'element'
		      (1, R)
	      in  let <_cor17> =
		      %% Line 362
		      call 'erlang':'tuple_size'
			  (R)
		  in  let <_cor18> =
			  %% Line 362
			  call 'erlang':'-'
			      (_cor17, 1)
		      in  %% Line 362
			  case apply RF
				   (_cor19, _cor18) of
			    %% Line 363
			    <'no'> when 'true' ->
				%% Line 364
				apply 'print_length_tuple'/5
				    (R, D, RF, Enc, Str)
			    %% Line 365
			    <RDefs> when 'true' ->
				%% Line 366
				apply 'print_length_record'/6
				    (R, D, RF, RDefs, Enc, Str)
			  end
	  %% Line 368
	  <Tuple,D,RF,Enc,Str>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      %% Line 369
	      apply 'print_length_tuple'/5
		  (Tuple, D, RF, Enc, Str)
	  %% Line 370
	  <Map,D,RF,Enc,Str>
	      when call 'erlang':'is_map'
		    (Map) ->
	      %% Line 371
	      apply 'print_length_map'/5
		  (Map, D, RF, Enc, Str)
	  %% Line 372
	  <#{}#,_X_D,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 373
	      {[60|[60|[62|[62]]]],4}
	  %% Line 374
	  <#{#<_cor51>('all',1,'binary',['unsigned'|['big']])}#,1,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 375
	      {[60|[60|[46|[46|[46|[62|[62]]]]]]],7}
	  %% Line 376
	  <Bin = #{#<_cor52>('all',1,'binary',['unsigned'|['big']])}#,D,_X_RF,Enc,Str> when 'true' ->
	      let <_cor21> =
		  %% Line 377
		  call 'erlang':'bit_size'
		      (Bin)
	      in  %% Line 377
		  case call 'erlang':'rem'
			   (_cor21, 8) of
		    %% Line 378
		    <0> when 'true' ->
			let <D1> =
			    %% Line 379
			    call 'erlang':'-'
				(D, 1)
			in  let <_cor25> =
				%% Line 380
				( case Str of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  apply 'printable_bin'/3
					      (Bin, D1, Enc)
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_cor23> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_cor23}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 380
				case _cor25 of
				  %% Line 381
				  <{'true',List}>
				      when call 'erlang':'is_list'
					    (List) ->
				      let <S> =
					  %% Line 382
					  call 'io_lib':'write_string'
					      (List, 34)
				      in  let <_cor27> =
					      %% Line 383
					      call 'erlang':'length'
						  (S)
					  in  let <_cor28> =
						  %% Line 383
						  call 'erlang':'+'
						      (4, _cor27)
					      in  %% Line 383
						  {[60|[60|[S|[62|[62]]]]],_cor28}
				  %% Line 384
				  <{'false',List}>
				      when call 'erlang':'is_list'
					    (List) ->
				      let <S> =
					  %% Line 385
					  call 'io_lib':'write_string'
					      (List, 34)
				      in  let <_cor30> =
					      %% Line 386
					      call 'erlang':'length'
						  (S)
					  in  let <_cor31> =
						  %% Line 386
						  call 'erlang':'+'
						      (9, _cor30)
					      in  %% Line 386
						  {[60|[60|[S|[[47|[117|[116|[102|[56|[62|[62]]]]]]]]]]],_cor31}
				  %% Line 387
				  <{'true','true',Prefix}> when 'true' ->
				      let <S> =
					  %% Line 388
					  call 'io_lib':'write_string'
					      (Prefix, 34)
				      in  let <_cor33> =
					      %% Line 389
					      call 'erlang':'length'
						  (S)
					  in  let <_cor34> =
						  %% Line 389
						  call 'erlang':'+'
						      (7, _cor33)
					      in  %% Line 389
						  {[60|[60|[S|[46|[46|[46|[62|[62]]]]]]]],_cor34}
				  %% Line 390
				  <{'false','true',Prefix}> when 'true' ->
				      let <S> =
					  %% Line 391
					  call 'io_lib':'write_string'
					      (Prefix, 34)
				      in  let <_cor36> =
					      %% Line 392
					      call 'erlang':'length'
						  (S)
					  in  let <_cor37> =
						  %% Line 392
						  call 'erlang':'+'
						      (12, _cor36)
					      in  %% Line 392
						  {[60|[60|[S|[47|[117|[116|[102|[56|[46|[46|[46|[62|[62]]]]]]]]]]]]],_cor37}
				  %% Line 393
				  <'false'> when 'true' ->
				      let <S> =
					  %% Line 394
					  call 'io_lib':'write'
					      (Bin, D)
				      in  let <_cor39> =
					      %% Line 395
					      call 'erlang':'iolist_size'
						  (S)
					  in  %% Line 395
					      {{'bin',S},_cor39}
				  ( <_cor40> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor40})
				    -| ['compiler_generated'] )
				end
		    %% Line 397
		    <_cor53> when 'true' ->
			let <S> =
			    %% Line 398
			    call 'io_lib':'write'
				(Bin, D)
			in  let <_cor42> =
				%% Line 399
				call 'erlang':'iolist_size'
				    (S)
			    in  %% Line 399
				{{'bin',S},_cor42}
		  end
	  %% Line 401
	  <Term,_X_D,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      let <S> =
		  %% Line 402
		  call 'io_lib':'write'
		      (Term)
	      in  let <_cor45> =
		      %% Line 403
		      call 'lists':'flatlength'
			  (S)
		  in  %% Line 403
		      {S,_cor45}
	end
'print_length_map'/5 =
    %% Line 405
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Map,1,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 406
	      {[35|[123|[46|[46|[46|[125]]]]]],6}
	  %% Line 407
	  <Map,D,RF,Enc,Str>
	      when call 'erlang':'is_map'
		    (Map) ->
	      let <_cor5> =
		  %% Line 408
		  call 'maps':'to_list'
		      (Map)
	      in  let <Pairs> =
		      %% Line 408
		      apply 'print_length_map_pairs'/5
			  (_cor5, D, RF, Enc, Str)
		  in  let <_cor7> =
			  %% Line 409
			  apply 'list_length'/2
			      (Pairs, 3)
		      in  %% Line 409
			  {{'map',Pairs},_cor7}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'print_length_map',5}}] )
	    -| ['compiler_generated'] )
	end
'print_length_map_pairs'/5 =
    %% Line 411
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_D,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 412
	      []
	  %% Line 413
	  <_X_Pairs,1,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 414
	      {'dots',3}
	  %% Line 415
	  <[{K,V}|Pairs],D,RF,Enc,Str> when 'true' ->
	      let <_cor5> =
		  %% Line 416
		  call 'erlang':'-'
		      (D, 1)
	      in  let <_cor6> =
		      %% Line 416
		      apply 'print_length_map_pair'/6
			  (K, V, _cor5, RF, Enc, Str)
		  in  let <_cor7> =
			  %% Line 417
			  call 'erlang':'-'
			      (D, 1)
		      in  let <_cor8> =
			      %% Line 417
			      apply 'print_length_map_pairs'/5
				  (Pairs, _cor7, RF, Enc, Str)
			  in  %% Line 416
			      [_cor6|_cor8]
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'print_length_map_pairs',5}}] )
	    -| ['compiler_generated'] )
	end
'print_length_map_pair'/6 =
    %% Line 419
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 420
	case apply 'print_length'/5
		 (_cor5, _cor3, _cor2, _cor1, _cor0) of
	  <{KS,KL}> when 'true' ->
	      %% Line 421
	      case apply 'print_length'/5
		       (_cor4, _cor3, _cor2, _cor1, _cor0) of
		<{VS,VL}> when 'true' ->
		    let <_cor8> =
			%% Line 422
			call 'erlang':'+'
			    (KL, VL)
		    in  %% Line 422
			{{'map_pair',{KS,KL},{VS,VL}},_cor8}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'print_length_tuple'/5 =
    %% Line 424
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Tuple,1,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 425
	      {[123|[46|[46|[46|[125]]]]],5}
	  %% Line 426
	  <Tuple,D,RF,Enc,Str> when 'true' ->
	      let <_cor5> =
		  %% Line 427
		  call 'erlang':'tuple_to_list'
		      (Tuple)
	      in  let <L> =
		      %% Line 427
		      apply 'print_length_list1'/5
			  (_cor5, D, RF, Enc, Str)
		  in  let <_cor9> =
			  %% Line 428
			  call 'erlang':'element'
			      (1, Tuple)
		      in  let <_cor10> =
			      %% Line 428
			      call 'erlang':'is_atom'
				  (_cor9)
			  in  let <_cor7> =
				  %% Line 428
				  call 'erlang':'tuple_size'
				      (Tuple)
			      in  let <_cor8> =
				      %% Line 428
				      call 'erlang':'>'
					  (_cor7, 1)
				  in  let <IsTagged> =
					  %% Line 428
					  call 'erlang':'and'
					      (_cor10, _cor8)
				      in  let <_cor12> =
					      %% Line 429
					      apply 'list_length'/2
						  (L, 2)
					  in  %% Line 429
					      {{'tuple',IsTagged,L},_cor12}
	end
'print_length_record'/6 =
    %% Line 431
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Tuple,1,_X_RF,_X_RDefs,_X_Enc,_X_Str> when 'true' ->
	      %% Line 432
	      {[123|[46|[46|[46|[125]]]]],5}
	  %% Line 433
	  <Tuple,D,RF,RDefs,Enc,Str> when 'true' ->
	      let <_cor6> =
		  %% Line 434
		  call 'erlang':'element'
		      (1, Tuple)
	      in  let <_cor7> =
		      %% Line 434
		      call 'io_lib':'write_atom'
			  (_cor6)
		  in  let <Name> =
			  %% Line 434
			  [35|_cor7]
		      in  let <NameL> =
			      %% Line 435
			      call 'erlang':'length'
				  (Name)
			  in  let <_cor10> =
				  %% Line 436
				  call 'erlang':'tuple_to_list'
				      (Tuple)
			      in  let <Elements> =
				      %% Line 436
				      call 'erlang':'tl'
					  (_cor10)
				  in  let <_cor12> =
					  %% Line 437
					  call 'erlang':'-'
					      (D, 1)
				      in  let <L> =
					      %% Line 437
					      apply 'print_length_fields'/6
						  (RDefs, _cor12, Elements, RF, Enc, Str)
					  in  let <_cor14> =
						  %% Line 438
						  call 'erlang':'+'
						      (NameL, 2)
					      in  let <_cor15> =
						      %% Line 438
						      apply 'list_length'/2
							  (L, _cor14)
						  in  %% Line 438
						      {{'record',[{Name,NameL}|L]},_cor15}
	end
'print_length_fields'/6 =
    %% Line 440
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_D,[],_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 441
	      []
	  %% Line 442
	  <_cor16,1,_cor17,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 443
	      {'dots',3}
	  %% Line 444
	  <[Def|Defs],D,[E|Es],RF,Enc,Str> when 'true' ->
	      let <_cor6> =
		  %% Line 445
		  call 'erlang':'-'
		      (D, 1)
	      in  let <_cor7> =
		      %% Line 445
		      apply 'print_length_field'/6
			  (Def, _cor6, E, RF, Enc, Str)
		  in  let <_cor8> =
			  %% Line 446
			  call 'erlang':'-'
			      (D, 1)
		      in  let <_cor9> =
			      %% Line 446
			      apply 'print_length_fields'/6
				  (Defs, _cor8, Es, RF, Enc, Str)
			  in  %% Line 445
			      [_cor7|_cor9]
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'print_length_fields',6}}] )
	    -| ['compiler_generated'] )
	end
'print_length_field'/6 =
    %% Line 448
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Name> =
	    %% Line 449
	    call 'io_lib':'write_atom'
		(_cor5)
	in  %% Line 450
	    case apply 'print_length'/5
		     (_cor3, _cor4, _cor2, _cor1, _cor0) of
	      <{S,L}> when 'true' ->
		  let <_cor8> =
		      %% Line 451
		      call 'erlang':'length'
			  (Name)
		  in  let <NameL> =
			  %% Line 451
			  call 'erlang':'+'
			      (_cor8, 3)
		      in  let <_cor10> =
			      %% Line 452
			      call 'erlang':'+'
				  (NameL, L)
			  in  %% Line 452
			      {{'field',Name,NameL,{S,L}},_cor10}
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'print_length_list'/5 =
    %% Line 454
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <L> =
	    %% Line 455
	    apply 'print_length_list1'/5
		(_cor4, _cor3, _cor2, _cor1, _cor0)
	in  let <_cor6> =
		%% Line 456
		apply 'list_length'/2
		    (L, 2)
	    in  %% Line 456
		{{'list',L},_cor6}
'print_length_list1'/5 =
    %% Line 458
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_D,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 459
	      []
	  %% Line 460
	  <_cor15,1,_X_RF,_X_Enc,_X_Str> when 'true' ->
	      %% Line 461
	      {'dots',3}
	  %% Line 462
	  <[E|Es],D,RF,Enc,Str> when 'true' ->
	      let <_cor5> =
		  %% Line 463
		  call 'erlang':'-'
		      (D, 1)
	      in  let <_cor6> =
		      %% Line 463
		      apply 'print_length'/5
			  (E, _cor5, RF, Enc, Str)
		  in  let <_cor7> =
			  %% Line 464
			  call 'erlang':'-'
			      (D, 1)
		      in  let <_cor8> =
			      %% Line 464
			      apply 'print_length_list1'/5
				  (Es, _cor7, RF, Enc, Str)
			  in  %% Line 463
			      [_cor6|_cor8]
	  %% Line 465
	  <E,D,RF,Enc,Str> when 'true' ->
	      let <_cor9> =
		  %% Line 466
		  call 'erlang':'-'
		      (D, 1)
	      in  %% Line 466
		  apply 'print_length'/5
		      (E, _cor9, RF, Enc, Str)
	end
'list_length'/2 =
    %% Line 468
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 469
	      Acc
	  %% Line 470
	  <[{_cor5,Len}|Es],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 471
		  call 'erlang':'+'
		      (Acc, Len)
	      in  %% Line 471
		  apply 'list_length_tail'/2
		      (Es, _cor2)
	  %% Line 472
	  <{_cor6,Len},Acc> when 'true' ->
	      %% Line 473
	      call 'erlang':'+'
		  (Acc, Len)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'list_length',2}}] )
	    -| ['compiler_generated'] )
	end
'list_length_tail'/2 =
    %% Line 475
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 476
	      Acc
	  %% Line 477
	  <[{_cor7,Len}|Es],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 478
		  call 'erlang':'+'
		      (Acc, 1)
	      in  let <_cor3> =
		      %% Line 478
		      call 'erlang':'+'
			  (_cor2, Len)
		  in  %% Line 478
		      apply 'list_length_tail'/2
			  (Es, _cor3)
	  %% Line 479
	  <{_cor8,Len},Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 480
		  call 'erlang':'+'
		      (Acc, 1)
	      in  %% Line 480
		  call 'erlang':'+'
		      (_cor4, Len)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'list_length_tail',2}}] )
	    -| ['compiler_generated'] )
	end
'printable_list'/3 =
    %% Line 485
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_L,1,_X_Enc> when 'true' ->
	      %% Line 486
	      'false'
	  %% Line 487
	  <L,_X_D,'latin1'> when 'true' ->
	      %% Line 488
	      call 'io_lib':'printable_latin1_list'
		  (L)
	  %% Line 489
	  <L,_X_D,_X_Uni> when 'true' ->
	      %% Line 490
	      call 'io_lib':'printable_list'
		  (L)
	end
'printable_bin'/3 =
    %% Line 492
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bin,D,Enc>
	      when try
		    let <_cor3> =
			call 'erlang':'>='
			    (D, 0)
		    in  let <_cor5> =
			    call 'erlang':'*'
				(4, D)
			in  let <_cor4> =
				call 'erlang':'byte_size'
				    (Bin)
			    in  let <_cor6> =
				    call 'erlang':'=<'
					(_cor5, _cor4)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 493
		  call 'erlang':'*'
		      (4, D)
	      in  let <_cor7> =
		      %% Line 493
		      call 'erlang':'byte_size'
			  (Bin)
		  in  let <_cor9> =
			  %% Line 493
			  call 'erlang':'min'
			      (_cor8, _cor7)
		      in  %% Line 493
			  apply 'printable_bin'/4
			      (Bin, _cor9, D, Enc)
	  %% Line 494
	  <Bin,D,Enc> when 'true' ->
	      let <_cor10> =
		  %% Line 495
		  call 'erlang':'byte_size'
		      (Bin)
	      in  %% Line 495
		  apply 'printable_bin'/4
		      (Bin, _cor10, D, Enc)
	end
'printable_bin'/4 =
    %% Line 497
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Bin,Len,D,'latin1'> when 'true' ->
	      let <N> =
		  %% Line 498
		  call 'erlang':'min'
		      (20, Len)
	      in  let <L> =
		      %% Line 499
		      call 'erlang':'binary_to_list'
			  (Bin, 1, N)
		  in  %% Line 500
		      case apply 'printable_latin1_list'/2
			       (L, N) of
			%% Line 501
			<'all'>
			    when try
				  let <_cor6> =
				      call 'erlang':'byte_size'
					  (Bin)
				  in  call 'erlang':'=:='
					  (N, _cor6)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 502
			    {'true',L}
			%% Line 503
			<'all'>
			    when call 'erlang':'=:='
				  (N,
				   Len) ->
			    %% Line 504
			    {'true','true',L}
			%% Line 505
			<'all'> when 'true' ->
			    let <_cor8> =
				%% Line 506
				call 'erlang':'+'
				    (1, N)
			    in  let <_cor7> =
				    %% Line 506
				    call 'erlang':'-'
					(Len, N)
				in  %% Line 506
				    case apply 'printable_bin1'/3
					     (Bin, _cor8, _cor7) of
				      %% Line 507
				      <0>
					  when try
						let <_cor9> =
						    call 'erlang':'byte_size'
							(Bin)
						in  call 'erlang':'=:='
							(_cor9, Len)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_cor10> =
					      %% Line 508
					      call 'erlang':'binary_to_list'
						  (Bin)
					  in  %% Line 508
					      {'true',_cor10}
				      %% Line 509
				      <NC>
					  when try
						let <_cor11> =
						    call 'erlang':'>'
							(D, 0)
						in  let <_cor12> =
							call 'erlang':'-'
							    (Len, NC)
						    in  let <_cor13> =
							    call 'erlang':'>='
								(_cor12, D)
							in  call 'erlang':'and'
								(_cor11, _cor13)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_cor14> =
					      %% Line 510
					      call 'erlang':'-'
						  (Len, NC)
					  in  let <_cor15> =
						  %% Line 510
						  call 'erlang':'binary_to_list'
						      (Bin, 1, _cor14)
					      in  %% Line 510
						  {'true','true',_cor15}
				      %% Line 511
				      <NC>
					  when call 'erlang':'is_integer'
						(NC) ->
					  %% Line 512
					  'false'
				      ( <_cor16> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor16})
					-| ['compiler_generated'] )
				    end
			%% Line 514
			<NC>
			    when try
				  let <_cor17> =
				      call 'erlang':'is_integer'
					  (NC)
				  in  let <_cor18> =
					  call 'erlang':'>'
					      (D, 0)
				      in  let <_cor19> =
					      call 'erlang':'-'
						  (N, NC)
					  in  let <_cor20> =
						  call 'erlang':'>='
						      (_cor19, D)
					      in  let <_cor21> =
						      call 'erlang':'and'
							  (_cor18, _cor20)
						  in  call 'erlang':'and'
							  (_cor17, _cor21)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor22> =
				%% Line 515
				call 'erlang':'-'
				    (N, NC)
			    in  let <_cor23> =
				    %% Line 515
				    call 'erlang':'binary_to_list'
					(Bin, 1, _cor22)
				in  %% Line 515
				    {'true','true',_cor23}
			%% Line 516
			<NC>
			    when call 'erlang':'is_integer'
				  (NC) ->
			    %% Line 517
			    'false'
			( <_cor24> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor24})
			  -| ['compiler_generated'] )
		      end
	  %% Line 519
	  <Bin,Len,D,_X_Uni> when 'true' ->
	      %% Line 520
	      case apply 'valid_utf8'/2
		       (Bin, Len) of
		%% Line 521
		<'true'> when 'true' ->
		    let <_cor25> =
			%% Line 522
			call 'io':'printable_range'
			    ()
		    in  %% Line 522
			case apply 'printable_unicode'/4
				 (Bin, Len, [], _cor25) of
			  %% Line 523
			  <{_cor43,#{}#,L}> when 'true' ->
			      let <_cor27> =
				  %% Line 524
				  call 'erlang':'byte_size'
				      (Bin)
			      in  let <_cor26> =
				      %% Line 524
				      call 'erlang':'length'
					  (L)
				  in  let <_cor28> =
					  %% Line 524
					  call 'erlang':'=:='
					      (_cor27, _cor26)
				      in  %% Line 524
					  {_cor28,L}
			  %% Line 525
			  <{NC,Bin1,L}>
			      when try
				    let <_cor29> =
					call 'erlang':'>'
					    (D, 0)
				    in  let <_cor30> =
					    call 'erlang':'-'
						(Len, NC)
					in  let <_cor31> =
						call 'erlang':'>='
						    (_cor30, D)
					    in  call 'erlang':'and'
						    (_cor29, _cor31)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      let <_cor34> =
				  %% Line 526
				  call 'erlang':'byte_size'
				      (Bin)
			      in  let <_cor33> =
				      %% Line 526
				      call 'erlang':'byte_size'
					  (Bin1)
				  in  let <_cor35> =
					  %% Line 526
					  call 'erlang':'-'
					      (_cor34, _cor33)
				      in  let <_cor32> =
					      %% Line 526
					      call 'erlang':'length'
						  (L)
					  in  let <_cor36> =
						  %% Line 526
						  call 'erlang':'=:='
						      (_cor35, _cor32)
					      in  %% Line 526
						  {_cor36,'true',L}
			  %% Line 527
			  <{_X_NC,_X_Bin,_X_L}> when 'true' ->
			      %% Line 528
			      'false'
			  ( <_cor37> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor37})
			    -| ['compiler_generated'] )
			end
		%% Line 530
		<'false'> when 'true' ->
		    %% Line 531
		    apply 'printable_bin'/4
			(Bin, Len, D, 'latin1')
		( <_cor38> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor38})
		  -| ['compiler_generated'] )
	      end
	end
'printable_bin1'/3 =
    %% Line 534
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Bin,_X_Start,0> when 'true' ->
	      %% Line 535
	      0
	  %% Line 536
	  <Bin,Start,Len> when 'true' ->
	      let <N> =
		  %% Line 537
		  call 'erlang':'min'
		      (10000, Len)
	      in  let <_cor4> =
		      %% Line 538
		      call 'erlang':'+'
			  (Start, N)
		  in  let <_cor5> =
			  %% Line 538
			  call 'erlang':'-'
			      (_cor4, 1)
		      in  let <L> =
			      %% Line 538
			      call 'erlang':'binary_to_list'
				  (Bin, Start, _cor5)
			  in  %% Line 539
			      case apply 'printable_latin1_list'/2
				       (L, N) of
				%% Line 540
				<'all'> when 'true' ->
				    let <_cor8> =
					%% Line 541
					call 'erlang':'+'
					    (Start, N)
				    in  let <_cor7> =
					    %% Line 541
					    call 'erlang':'-'
						(Len, N)
					in  %% Line 541
					    apply 'printable_bin1'/3
						(Bin, _cor8, _cor7)
				%% Line 542
				<NC>
				    when call 'erlang':'is_integer'
					  (NC) ->
				    let <_cor9> =
					%% Line 543
					call 'erlang':'-'
					    (N, NC)
				    in  %% Line 543
					call 'erlang':'-'
					    (Len, _cor9)
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor10})
				  -| ['compiler_generated'] )
			      end
	end
'printable_latin1_list'/2 =
    %% Line 548
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],N>
	      when let <_cor2> =
		    call 'erlang':'>='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (C, 126)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 549
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 549
		  apply 'printable_latin1_list'/2
		      (Cs, _cor4)
	  %% Line 550
	  <[C|Cs],N>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 160)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 255)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 551
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 551
		  apply 'printable_latin1_list'/2
		      (Cs, _cor7)
	  %% Line 552
	  <[10|Cs],N> when 'true' ->
	      let <_cor8> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _cor8)
	  %% Line 553
	  <[13|Cs],N> when 'true' ->
	      let <_cor9> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _cor9)
	  %% Line 554
	  <[9|Cs],N> when 'true' ->
	      let <_cor10> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _cor10)
	  %% Line 555
	  <[11|Cs],N> when 'true' ->
	      let <_cor11> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _cor11)
	  %% Line 556
	  <[8|Cs],N> when 'true' ->
	      let <_cor12> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _cor12)
	  %% Line 557
	  <[12|Cs],N> when 'true' ->
	      let <_cor13> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _cor13)
	  %% Line 558
	  <[27|Cs],N> when 'true' ->
	      let <_cor14> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'printable_latin1_list'/2
		      (Cs, _cor14)
	  %% Line 559
	  <[],_cor17> when 'true' ->
	      'all'
	  %% Line 560
	  <_cor18,N> when 'true' ->
	      N
	end
'valid_utf8'/2 =
    %% Line 562
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,_cor5> when 'true' ->
	      %% Line 563
	      'true'
	  %% Line 564
	  <_cor6,0> when 'true' ->
	      %% Line 565
	      'true'
	  %% Line 566
	  <#{#<_cor7>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' ->
	      let <_cor2> =
		  %% Line 567
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 567
		  apply 'valid_utf8'/2
		      (R, _cor2)
	  %% Line 568
	  <_cor8,_cor9> when 'true' ->
	      %% Line 569
	      'false'
	end
'printable_unicode'/4 =
    %% Line 571
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Bin = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<R>('all',8,'binary',['unsigned'|['big']])}#,I,L,Range>
	      when call 'erlang':'>'
		    (I,
		     0) ->
	      %% Line 572
	      case apply 'printable_char'/2
		       (C, Range) of
		%% Line 573
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 574
			call 'erlang':'-'
			    (I, 1)
		    in  %% Line 574
			apply 'printable_unicode'/4
			    (R, _cor4, [C|L], Range)
		%% Line 575
		<'false'> when 'true' ->
		    let <_cor5> =
			%% Line 576
			call 'lists':'reverse'
			    (L)
		    in  %% Line 576
			{I,Bin,_cor5}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 578
	  <Bin,I,L,_cor12> when 'true' ->
	      let <_cor7> =
		  %% Line 579
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 579
		  {I,Bin,_cor7}
	end
'printable_char'/2 =
    %% Line 581
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <10,_cor28> when 'true' ->
	      'true'
	  %% Line 582
	  <13,_cor29> when 'true' ->
	      'true'
	  %% Line 583
	  <9,_cor30> when 'true' ->
	      'true'
	  %% Line 584
	  <11,_cor31> when 'true' ->
	      'true'
	  %% Line 585
	  <8,_cor32> when 'true' ->
	      'true'
	  %% Line 586
	  <12,_cor33> when 'true' ->
	      'true'
	  %% Line 587
	  <27,_cor34> when 'true' ->
	      'true'
	  %% Line 588
	  <C,'latin1'> when 'true' ->
	      let <_cor5> =
		  %% Line 589
		  ( case <> of
		      ( <>
			    when call 'erlang':'>='
				  (C,
				   32) ->
			    call 'erlang':'=<'
				(C, 126)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 589
		  ( case _cor5 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 590
			    ( case <> of
				( <>
				      when call 'erlang':'>='
					    (C,
					     160) ->
				      call 'erlang':'=<'
					  (C, 255)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor2}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 591
	  <C,'unicode'> when 'true' ->
	      let <_cor12> =
		  %% Line 592
		  ( case <> of
		      ( <>
			    when call 'erlang':'>='
				  (C,
				   32) ->
			    call 'erlang':'=<'
				(C, 126)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 592
		  ( case _cor12 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor16> =
				%% Line 593
				( case <> of
				    ( <>
					  when call 'erlang':'>='
						(C,
						 160) ->
					  call 'erlang':'<'
					      (C, 55296)
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 593
				( case _cor16 of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor20> =
					      %% Line 594
					      ( case <> of
						  ( <>
							when call 'erlang':'>'
							      (C,
							       57343) ->
							call 'erlang':'<'
							    (C, 65534)
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							'false'
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  in  %% Line 594
					      ( case _cor20 of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 595
							( case <> of
							    ( <>
								  when call 'erlang':'>'
									(C,
									 65535) ->
								  call 'erlang':'=<'
								      (C, 1114111)
							      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  'false'
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_cor17> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_cor17}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_cor13> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_cor13}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor9> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor9}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'printable_char',2}}] )
	    -| ['compiler_generated'] )
	end
'write_string'/2 =
    %% Line 597
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,'latin1'> when 'true' ->
	      %% Line 598
	      call 'io_lib':'write_latin1_string'
		  (S, 34)
	  %% Line 599
	  <S,_X_Uni> when 'true' ->
	      %% Line 600
	      call 'io_lib':'write_string'
		  (S, 34)
	end
'cind'/7 =
    %% Line 605
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{_X_S,Len},Col,Ll,M,Ind,LD,W>
	      when try
		    let <_cor7> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_cor8> =
			    call 'erlang':'-'
				(_cor7, LD)
			in  let <_cor9> =
				call 'erlang':'<'
				    (Len, _cor8)
			    in  let <_cor10> =
				    %% Line 606
				    call 'erlang':'+'
					(Len, W)
				in  let <_cor11> =
					%% Line 606
					call 'erlang':'+'
					    (_cor10, LD)
				    in  let <_cor12> =
					    %% Line 606
					    call 'erlang':'=<'
						(_cor11, M)
					in  call 'erlang':'and'
						(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 607
	      Ind
	  %% Line 608
	  <{{'list',L},_X_Len},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_cor14> =
		  %% Line 609
		  call 'erlang':'+'
		      (Col, 1)
	      in  let <_cor13> =
		      %% Line 609
		      call 'erlang':'+'
			  (W, 1)
		  in  %% Line 609
		      apply 'cind_list'/7
			  (L, _cor14, Ll, M, Ind, LD, _cor13)
	  %% Line 610
	  <{{'tuple','true',L},_X_Len},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_cor15> =
		  %% Line 611
		  call 'erlang':'+'
		      (W, 1)
	      in  %% Line 611
		  apply 'cind_tag_tuple'/7
		      (L, Col, Ll, M, Ind, LD, _cor15)
	  %% Line 612
	  <{{'tuple','false',L},_X_Len},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_cor17> =
		  %% Line 613
		  call 'erlang':'+'
		      (Col, 1)
	      in  let <_cor16> =
		      %% Line 613
		      call 'erlang':'+'
			  (W, 1)
		  in  %% Line 613
		      apply 'cind_list'/7
			  (L, _cor17, Ll, M, Ind, LD, _cor16)
	  %% Line 614
	  <{{'record',[{_X_Name,NLen}|L]},_X_Len},Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <_cor18> =
		  %% Line 615
		  call 'erlang':'+'
		      (W, NLen)
	      in  let <_cor19> =
		      %% Line 615
		      call 'erlang':'+'
			  (_cor18, 1)
		  in  %% Line 615
		      apply 'cind_record'/8
			  (L, NLen, Col, Ll, M, Ind, LD, _cor19)
	  %% Line 616
	  <{{'bin',_X_S},_X_Len},_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 617
	      Ind
	  %% Line 618
	  <{_X_S,_X_Len},_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 619
	      Ind
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'cind',7}}] )
	    -| ['compiler_generated'] )
	end
'cind_tag_tuple'/7 =
    %% Line 621
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{_X_Tag,Tlen}|L],Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <TagInd> =
		  %% Line 622
		  call 'erlang':'+'
		      (Tlen, 2)
	      in  let <Tcol> =
		      %% Line 623
		      call 'erlang':'+'
			  (Col, TagInd)
		  in  %% Line 624
		      case <> of
			%% Line 625
			<>
			    when let <_cor9> =
				  call 'erlang':'>'
				      (Ind, 0)
			      in  let <_cor10> =
				      call 'erlang':'>'
					  (TagInd, Ind)
				  in  call 'erlang':'and'
					  (_cor9, _cor10) ->
			    let <Col1> =
				%% Line 626
				call 'erlang':'+'
				    (Col, Ind)
			    in  %% Line 627
				case <> of
				  %% Line 628
				  <>
				      when let <_cor13> =
					    try
						let <_cor12> =
						    call 'erlang':'+'
							(M, Col1)
						in  call 'erlang':'=<'
							(_cor12, Ll)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					in  let <_cor15> =
						try
						    let <_cor14> =
							call 'erlang':'div'
							    (Ll, 2)
						    in  call 'erlang':'=<'
							    (Col1, _cor14)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false'
					    in  call 'erlang':'or'
						    (_cor13, _cor15) ->
				      let <_cor16> =
					  %% Line 629
					  call 'erlang':'+'
					      (W, Tlen)
				      in  %% Line 629
					  apply 'cind_tail'/8
					      (L, Col1, Tcol, Ll, M, Ind, LD, _cor16)
				  %% Line 630
				  <> when 'true' ->
				      %% Line 631
				      call 'erlang':'throw'
					  ('no_good')
				end
			%% Line 633
			<>
			    when let <_cor18> =
				  try
				      let <_cor17> =
					  call 'erlang':'+'
					      (M, Tcol)
				      in  call 'erlang':'<'
					      (_cor17, Ll)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_cor20> =
				      try
					  let <_cor19> =
					      call 'erlang':'div'
						  (Ll, 2)
					  in  call 'erlang':'<'
						  (Tcol, _cor19)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_cor18, _cor20) ->
			    let <_cor21> =
				%% Line 634
				call 'erlang':'+'
				    (W, Tlen)
			    in  let <_cor22> =
				    %% Line 634
				    call 'erlang':'+'
					(_cor21, 1)
				in  %% Line 634
				    apply 'cind_list'/7
					(L, Tcol, Ll, M, Ind, LD, _cor22)
			%% Line 635
			<> when 'true' ->
			    %% Line 636
			    call 'erlang':'throw'
				('no_good')
		      end
	  ( <_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'cind_tag_tuple',7}}] )
	    -| ['compiler_generated'] )
	end
'cind_record'/8 =
    %% Line 639
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[F|Fs],Nlen,Col0,Ll,M,Ind,LD,W0> when 'true' ->
	      let <Nind> =
		  %% Line 640
		  call 'erlang':'+'
		      (Nlen, 1)
	      in  %% Line 641
		  case apply 'cind_rec'/6
			   (Nind, Col0, Ll, M, Ind, W0) of
		    <{Col,W}> when 'true' ->
			let <_cor10> =
			    %% Line 642
			    apply 'last_depth'/2
				(Fs, LD)
			in  let <FW> =
				%% Line 642
				apply 'cind_field'/7
				    (F, Col, Ll, M, Ind, _cor10, W)
			    in  let <_cor13> =
				    %% Line 643
				    call 'erlang':'+'
					(Col, FW)
				in  let <_cor12> =
					%% Line 643
					call 'erlang':'+'
					    (W, FW)
				    in  %% Line 643
					apply 'cind_fields_tail'/8
					    (Fs, Col, _cor13, Ll, M, Ind, LD, _cor12)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 644
	  <_cor22,_X_Nlen,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 645
	      Ind
	end
'cind_fields_tail'/8 =
    %% Line 647
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[F = {_cor50,Len}|Fs],Col0,Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <LD1> =
		  %% Line 648
		  apply 'last_depth'/2
		      (Fs, LD)
	      in  let <ELen> =
		      %% Line 649
		      call 'erlang':'+'
			  (1, Len)
		  in  %% Line 650
		      case <> of
			%% Line 651
			<>
			    when let <_cor23> =
				  try
				      let <_cor10> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_cor12> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_cor11> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_cor13> =
						      call 'erlang':'<'
							  (_cor12, _cor11)
						  in  let <_cor14> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_cor15> =
							      call 'erlang':'+'
								  (_cor14, 1)
							  in  let <_cor16> =
								  call 'erlang':'=<'
								      (_cor15, M)
							      in  let <_cor18> =
								      call 'erlang':'element'
									  (4, _cor50)
								  in  let <_cor19> =
									  call 'erlang':'element'
									      (1, _cor18)
								      in  let <_cor20> =
									      call 'erlang':'is_list'
										  (_cor19)
									  in  let <_cor21> =
										  call 'erlang':'and'
										      (_cor16, _cor20)
									      in  let <_cor22> =
										      call 'erlang':'and'
											  (_cor13, _cor21)
										  in  call 'erlang':'and'
											  (_cor10, _cor22)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_cor37> =
				      %% Line 652
				      try
					  let <_cor24> =
					      call 'erlang':'>'
						  (LD1, 0)
					  in  let <_cor25> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_cor26> =
						      call 'erlang':'-'
							  (_cor25, LD1)
						  in  let <_cor27> =
							  call 'erlang':'<'
							      (ELen, _cor26)
						      in  let <_cor28> =
							      call 'erlang':'+'
								  (W, ELen)
							  in  let <_cor29> =
								  call 'erlang':'+'
								      (_cor28, LD1)
							      in  let <_cor30> =
								      call 'erlang':'=<'
									  (_cor29, M)
								  in  let <_cor32> =
									  call 'erlang':'element'
									      (4, _cor50)
								      in  let <_cor33> =
									      call 'erlang':'element'
										  (1, _cor32)
									  in  let <_cor34> =
										  call 'erlang':'is_list'
										      (_cor33)
									      in  let <_cor35> =
										      call 'erlang':'and'
											  (_cor30, _cor34)
										  in  let <_cor36> =
											  call 'erlang':'and'
											      (_cor27, _cor35)
										      in  call 'erlang':'and'
											      (_cor24, _cor36)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_cor23, _cor37) ->
			    let <_cor39> =
				%% Line 653
				call 'erlang':'+'
				    (Col, ELen)
			    in  let <_cor38> =
				    %% Line 653
				    call 'erlang':'+'
					(W, ELen)
				in  %% Line 653
				    apply 'cind_fields_tail'/8
					(Fs, Col0, _cor39, Ll, M, Ind, LD, _cor38)
			%% Line 654
			<> when 'true' ->
			    let <FW> =
				%% Line 655
				apply 'cind_field'/7
				    (F, Col0, Ll, M, Ind, LD1, 0)
			    in  let <_cor41> =
				    %% Line 656
				    call 'erlang':'+'
					(Col, FW)
				in  %% Line 656
				    apply 'cind_fields_tail'/8
					(Fs, Col0, _cor41, Ll, M, Ind, LD, FW)
		      end
	  %% Line 658
	  <_cor51,_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 659
	      Ind
	end
'cind_field'/7 =
    %% Line 661
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fl = {{'field',_X_N,_X_NL,_X_F},Len},Col,Ll,M,_X_Ind,LD,W>
	      when %% Line 662
		try
		    let <_cor7> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_cor8> =
			    call 'erlang':'-'
				(_cor7, LD)
			in  let <_cor9> =
				call 'erlang':'<'
				    (Len, _cor8)
			    in  let <_cor10> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_cor11> =
					call 'erlang':'+'
					    (_cor10, LD)
				    in  let <_cor12> =
					    call 'erlang':'=<'
						(_cor11, M)
					in  call 'erlang':'and'
						(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 663
	      case <> of
		%% Line 664
		<>
		    when try
			  let <_cor13> =
			      {'field',_X_N,_X_NL,_X_F}
			  in  let <_cor14> =
				  call 'erlang':'element'
				      (4, _cor13)
			      in  let <_cor15> =
				      call 'erlang':'element'
					  (1, _cor14)
				  in  call 'erlang':'is_list'
					  (_cor15)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 665
		    Len
		%% Line 666
		<> when 'true' ->
		    %% Line 667
		    Ll
	      end
	  %% Line 669
	  <{{'field',_X_Name,NameL,F},_X_Len},Col0,Ll,M,Ind,LD,W0> when 'true' ->
	      let <_cor16> =
		  %% Line 670
		  call 'erlang':'+'
		      (W0, NameL)
	      in  %% Line 670
		  case apply 'cind_rec'/6
			   (NameL, Col0, Ll, M, Ind, _cor16) of
		    <{Col,W}> when 'true' ->
			do  %% Line 671
			    apply 'cind'/7
				(F, Col, Ll, M, Ind, LD, W)
			    %% Line 672
			    Ll
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor17})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'cind_field',7}}] )
	    -| ['compiler_generated'] )
	end
'cind_rec'/6 =
    %% Line 674
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 675
	    call 'erlang':'>'
		(_cor1, 0)
	in  let <_cor6> =
		%% Line 675
		call 'erlang':'>'
		    (_cor5, _cor1)
	    in  let <Nl> =
		    %% Line 675
		    call 'erlang':'and'
			(_cor7, _cor6)
		in  let <_cor10> =
			%% Line 676
			case Nl of
			  %% Line 677
			  <'true'> when 'true' ->
			      _cor1
			  %% Line 678
			  <'false'> when 'true' ->
			      _cor5
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    in  let <Col> =
			    %% Line 680
			    call 'erlang':'+'
				(_cor4, _cor10)
			in  %% Line 681
			    case <> of
			      %% Line 682
			      <>
				  when let <_cor14> =
					try
					    let <_cor13> =
						call 'erlang':'+'
						    (_cor2, Col)
					    in  call 'erlang':'=<'
						    (_cor13, _cor3)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false'
				    in  let <_cor16> =
					    try
						let <_cor15> =
						    call 'erlang':'div'
							(_cor3, 2)
						in  call 'erlang':'=<'
							(Col, _cor15)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					in  call 'erlang':'or'
						(_cor14, _cor16) ->
				  let <_cor18> =
				      %% Line 683
				      case Nl of
					%% Line 684
					<'true'> when 'true' ->
					    0
					%% Line 685
					<'false'> when 'true' ->
					    _cor0
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor17})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 687
				      {Col,_cor18}
			      %% Line 688
			      <> when 'true' ->
				  %% Line 689
				  call 'erlang':'throw'
				      ('no_good')
			    end
'cind_list'/7 =
    %% Line 692
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'dots',_cor18},_X_Col0,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 693
	      Ind
	  %% Line 694
	  <[E|Es],Col0,Ll,M,Ind,LD,W> when 'true' ->
	      let <_cor7> =
		  %% Line 695
		  apply 'last_depth'/2
		      (Es, LD)
	      in  let <WE> =
		      %% Line 695
		      apply 'cind_element'/7
			  (E, Col0, Ll, M, Ind, _cor7, W)
		  in  let <_cor10> =
			  %% Line 696
			  call 'erlang':'+'
			      (Col0, WE)
		      in  let <_cor9> =
			      %% Line 696
			      call 'erlang':'+'
				  (W, WE)
			  in  %% Line 696
			      apply 'cind_tail'/8
				  (Es, Col0, _cor10, Ll, M, Ind, LD, _cor9)
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'cind_list',7}}] )
	    -| ['compiler_generated'] )
	end
'cind_tail'/8 =
    %% Line 698
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 699
	      Ind
	  %% Line 700
	  <[E = {_cor60,Len}|Es],Col0,Col,Ll,M,Ind,LD,W> when 'true' ->
	      let <LD1> =
		  %% Line 701
		  apply 'last_depth'/2
		      (Es, LD)
	      in  let <ELen> =
		      %% Line 702
		      call 'erlang':'+'
			  (1, Len)
		  in  %% Line 703
		      case <> of
			%% Line 704
			<>
			    when let <_cor21> =
				  try
				      let <_cor10> =
					  call 'erlang':'=:='
					      (LD1, 0)
				      in  let <_cor12> =
					      call 'erlang':'+'
						  (ELen, 1)
					  in  let <_cor11> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_cor13> =
						      call 'erlang':'<'
							  (_cor12, _cor11)
						  in  let <_cor14> =
							  call 'erlang':'+'
							      (W, ELen)
						      in  let <_cor15> =
							      call 'erlang':'+'
								  (_cor14, 1)
							  in  let <_cor16> =
								  call 'erlang':'=<'
								      (_cor15, M)
							      in  let <_cor18> =
								      call 'erlang':'is_list'
									  (_cor60)
								  in  let <_cor19> =
									  call 'erlang':'and'
									      (_cor16, _cor18)
								      in  let <_cor20> =
									      call 'erlang':'and'
										  (_cor13, _cor19)
									  in  call 'erlang':'and'
										  (_cor10, _cor20)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_cor33> =
				      %% Line 705
				      try
					  let <_cor22> =
					      call 'erlang':'>'
						  (LD1, 0)
					  in  let <_cor23> =
						  call 'erlang':'-'
						      (Ll, Col)
					      in  let <_cor24> =
						      call 'erlang':'-'
							  (_cor23, LD1)
						  in  let <_cor25> =
							  call 'erlang':'<'
							      (ELen, _cor24)
						      in  let <_cor26> =
							      call 'erlang':'+'
								  (W, ELen)
							  in  let <_cor27> =
								  call 'erlang':'+'
								      (_cor26, LD1)
							      in  let <_cor28> =
								      call 'erlang':'=<'
									  (_cor27, M)
								  in  let <_cor30> =
									  call 'erlang':'is_list'
									      (_cor60)
								      in  let <_cor31> =
									      call 'erlang':'and'
										  (_cor28, _cor30)
									  in  let <_cor32> =
										  call 'erlang':'and'
										      (_cor25, _cor31)
									      in  call 'erlang':'and'
										      (_cor22, _cor32)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false'
				  in  call 'erlang':'or'
					  (_cor21, _cor33) ->
			    let <_cor35> =
				%% Line 706
				call 'erlang':'+'
				    (Col, ELen)
			    in  let <_cor34> =
				    %% Line 706
				    call 'erlang':'+'
					(W, ELen)
				in  %% Line 706
				    apply 'cind_tail'/8
					(Es, Col0, _cor35, Ll, M, Ind, LD, _cor34)
			%% Line 707
			<> when 'true' ->
			    let <WE> =
				%% Line 708
				apply 'cind_element'/7
				    (E, Col0, Ll, M, Ind, LD1, 0)
			    in  let <_cor37> =
				    %% Line 709
				    call 'erlang':'+'
					(Col0, WE)
				in  %% Line 709
				    apply 'cind_tail'/8
					(Es, Col0, _cor37, Ll, M, Ind, LD, WE)
		      end
	  %% Line 711
	  <{'dots',_cor61},_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' ->
	      %% Line 712
	      Ind
	  %% Line 713
	  <E = {_cor62,Len},_X_Col0,Col,Ll,M,Ind,LD,W>
	      when %% Line 714
		try
		    let <_cor41> =
			call 'erlang':'+'
			    (Len, 1)
		    in  let <_cor39> =
			    call 'erlang':'-'
				(Ll, Col)
			in  let <_cor38> =
				call 'erlang':'+'
				    (LD, 1)
			    in  let <_cor40> =
				    call 'erlang':'-'
					(_cor39, _cor38)
				in  let <_cor42> =
					call 'erlang':'<'
					    (_cor41, _cor40)
				    in  let <_cor44> =
					    %% Line 715
					    call 'erlang':'+'
						(Len, 1)
					in  let <_cor45> =
						%% Line 715
						call 'erlang':'+'
						    (_cor44, W)
					    in  let <_cor43> =
						    %% Line 715
						    call 'erlang':'+'
							(LD, 1)
						in  let <_cor46> =
							%% Line 715
							call 'erlang':'+'
							    (_cor45, _cor43)
						    in  let <_cor47> =
							    %% Line 715
							    call 'erlang':'=<'
								(_cor46, M)
							in  let <_cor49> =
								%% Line 716
								call 'erlang':'is_list'
								    (_cor62)
							    in  let <_cor50> =
								    call 'erlang':'and'
									(_cor47, _cor49)
								in  call 'erlang':'and'
									(_cor42, _cor50)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 717
	      Ind
	  %% Line 718
	  <E,_X_Col0,Col,Ll,M,Ind,LD,_X_W> when 'true' ->
	      let <_cor51> =
		  %% Line 719
		  call 'erlang':'+'
		      (LD, 1)
	      in  %% Line 719
		  apply 'cind'/7
		      (E, Col, Ll, M, Ind, _cor51, 0)
	end
'cind_element'/7 =
    %% Line 721
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E = {_cor23,Len},Col,Ll,M,_X_Ind,LD,W>
	      when %% Line 722
		try
		    let <_cor7> =
			call 'erlang':'-'
			    (Ll, Col)
		    in  let <_cor8> =
			    call 'erlang':'-'
				(_cor7, LD)
			in  let <_cor9> =
				call 'erlang':'<'
				    (Len, _cor8)
			    in  let <_cor10> =
				    call 'erlang':'+'
					(Len, W)
				in  let <_cor11> =
					call 'erlang':'+'
					    (_cor10, LD)
				    in  let <_cor12> =
					    call 'erlang':'=<'
						(_cor11, M)
					in  let <_cor14> =
						call 'erlang':'is_list'
						    (_cor23)
					    in  let <_cor15> =
						    call 'erlang':'and'
							(_cor12, _cor14)
						in  call 'erlang':'and'
							(_cor9, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 723
	      Len
	  %% Line 724
	  <E,Col,Ll,M,Ind,LD,W> when 'true' ->
	      do  %% Line 725
		  apply 'cind'/7
		      (E, Col, Ll, M, Ind, LD, W)
		  %% Line 726
		  Ll
	end
'last_depth'/2 =
    %% Line 728
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[_cor4|_cor5],_X_LD> when 'true' ->
	      %% Line 729
	      0
	  %% Line 730
	  <_cor6,LD> when 'true' ->
	      %% Line 731
	      call 'erlang':'+'
		  (LD, 1)
	end
'while_fail'/3 =
    %% Line 733
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_F,V> when 'true' ->
	      %% Line 734
	      V
	  %% Line 735
	  <[A|As],F,V> when 'true' ->
	      %% Line 736
	      try
		  apply F
		      (A)
	      of <_cor3> ->
		  _cor3
	      catch <_cor6,_cor5,_cor4> ->
		  case <_cor6,_cor5,_cor4> of
		    <'throw',_cor10,_cor11> when 'true' ->
			apply 'while_fail'/3
			    (As, F, V)
		    ( <_cor6,_cor5,_cor4> when 'true' ->
			  primop 'raise'
			      (_cor4, _cor5)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'while_fail',3}}] )
	    -| ['compiler_generated'] )
	end
'indent'/1 =
    %% Line 738
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 739
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 739
		  apply 'chars'/2
		      (32, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'indent',1}}] )
	    -| ['compiler_generated'] )
	end
'indent'/2 =
    %% Line 741
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,Ind> when 'true' ->
	      %% Line 742
	      [32|Ind]
	  %% Line 743
	  <4,Ind> when 'true' ->
	      %% Line 745
	      [[32|[32]]|[[32|[32]]|Ind]]
	  %% Line 746
	  <N,Ind>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 747
		  apply 'chars'/2
		      (32, N)
	      in  %% Line 747
		  [_cor5|Ind]
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'indent',2}}] )
	    -| ['compiler_generated'] )
	end
'chars'/2 =
    %% Line 750
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_C,0> when 'true' ->
	      %% Line 751
	      []
	  %% Line 752
	  <C,2> when 'true' ->
	      %% Line 753
	      [C|[C|[]]]
	  %% Line 754
	  <C,3> when 'true' ->
	      %% Line 755
	      [C|[C|[C|[]]]]
	  %% Line 756
	  <C,N>
	      when try
		    let <_cor2> =
			call 'erlang':'band'
			    (N, 1)
		    in  call 'erlang':'=:='
			    (_cor2, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor3> =
		  %% Line 757
		  call 'erlang':'bsr'
		      (N, 1)
	      in  let <S> =
		      %% Line 757
		      apply 'chars'/2
			  (C, _cor3)
		  in  %% Line 758
		      [S|S]
	  %% Line 759
	  <C,N> when 'true' ->
	      let <_cor5> =
		  %% Line 760
		  call 'erlang':'bsr'
		      (N, 1)
	      in  let <S> =
		      %% Line 760
		      apply 'chars'/2
			  (C, _cor5)
		  in  %% Line 761
		      [C|[S|S]]
	end
'get_option'/3 =
    %% Line 763
    fun (_cor2,_cor1,_cor0) ->
	%% Line 764
	case call 'lists':'keyfind'
		 (_cor2, 1, _cor1) of
	  %% Line 765
	  <'false'> when 'true' ->
	      _cor0
	  %% Line 766
	  <{_cor7,Value}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor2) ->
	      Value
	  %% Line 767
	  <_cor8> when 'true' ->
	      _cor0
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('io_lib_pretty')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('io_lib_pretty', _cor0)
end