module 'dict' ['append'/3,
	       'append_list'/3,
	       'erase'/2,
	       'fetch'/2,
	       'fetch_keys'/1,
	       'filter'/2,
	       'find'/2,
	       'fold'/3,
	       'from_list'/1,
	       'is_empty'/1,
	       'is_key'/2,
	       'map'/2,
	       'merge'/3,
	       'module_info'/0,
	       'module_info'/1,
	       'new'/0,
	       'size'/1,
	       'store'/3,
	       'to_list'/1,
	       'update'/3,
	       'update'/4,
	       'update_counter'/3]
    attributes [%% Line 44
		'export_type' =
		    %% Line 44
		    [{'dict',0}|[{'dict',2}]],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'segs',{'type',58,'tuple','any'},[{'var',58,'_Key'}|[{'var',58,'_Value'}]]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','dict'},[{'typed_record_field',{'record_field',62,{'atom',62,'size'},{'integer',62,0}},{'type',62,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',63,{'atom',63,'n'},{'integer',63,16}},{'type',63,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'maxn'},{'integer',64,16}},{'type',64,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',65,{'atom',65,'bso'},{'op',65,'div',{'integer',65,16},{'integer',65,2}}},{'type',65,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'exp_size'},{'op',66,'*',{'integer',66,16},{'integer',66,5}}},{'type',66,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'con_size'},{'op',67,'*',{'integer',67,16},{'integer',67,3}}},{'type',67,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'empty'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'tuple','any'}]]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'segs'}},{'type',69,'union',[{'atom',69,'undefined'}|[{'type',69,'segs',[{'var',69,'_'}|[{'var',69,'_'}]]}]]}}]]]]]]]],[]}],
		%% Line 73
		'opaque' =
		    %% Line 73
		    [{'dict',{'type',73,'dict',[{'var',73,'_'}|[{'var',73,'_'}]]},[]}],
		%% Line 75
		'opaque' =
		    %% Line 75
		    [{'dict',{'type',75,'record',[{'atom',75,'dict'}|[{'type',75,'field_type',[{'atom',75,'segs'}|[{'type',75,'segs',[{'var',75,'Key'}|[{'var',75,'Value'}]]}]]}]]},[{'var',75,'Key'}|[{'var',75,'Value'}]]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'new',0},[{'type',80,'fun',[{'type',80,'product',[]}|[{'type',80,'dict',[]}]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'is_key',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'Key'}|[{'var',86,'Dict'}]]}|[{'type',86,'boolean',[]}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Dict'}|[{'type',87,'dict',[{'var',87,'Key'}|[{'ann_type',87,[{'var',87,'Value'}|[{'type',87,'term',[]}]]}]]}]]]]}]]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'to_list',1},[{'type',98,'bounded_fun',[{'type',98,'fun',[{'type',98,'product',[{'var',98,'Dict'}]}|[{'var',98,'List'}]]}|[[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Dict'}|[{'type',99,'dict',[{'var',99,'Key'}|[{'var',99,'Value'}]]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'List'}|[{'type',100,'list',[{'type',100,'tuple',[{'var',100,'Key'}|[{'var',100,'Value'}]]}]}]]]]}]]]]}]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'from_list',1},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'List'}]}|[{'var',105,'Dict'}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Dict'}|[{'type',106,'dict',[{'var',106,'Key'}|[{'var',106,'Value'}]]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'List'}|[{'type',107,'list',[{'type',107,'tuple',[{'var',107,'Key'}|[{'var',107,'Value'}]]}]}]]]]}]]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'size',1},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'Dict'}]}|[{'type',112,'non_neg_integer',[]}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Dict'}|[{'type',113,'dict',[]}]]]]}]]]}]}],
		%% Line 117
		'spec' =
		    %% Line 117
		    [{{'is_empty',1},[{'type',117,'bounded_fun',[{'type',117,'fun',[{'type',117,'product',[{'var',117,'Dict'}]}|[{'type',117,'boolean',[]}]]}|[[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Dict'}|[{'type',118,'dict',[]}]]]]}]]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'fetch',2},[{'type',122,'bounded_fun',[{'type',122,'fun',[{'type',122,'product',[{'var',122,'Key'}|[{'var',122,'Dict'}]]}|[{'var',122,'Value'}]]}|[[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Dict'}|[{'type',123,'dict',[{'var',123,'Key'}|[{'var',123,'Value'}]]}]]]]}]]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'find',2},[{'type',137,'bounded_fun',[{'type',137,'fun',[{'type',137,'product',[{'var',137,'Key'}|[{'var',137,'Dict'}]]}|[{'type',137,'union',[{'type',137,'tuple',[{'atom',137,'ok'}|[{'var',137,'Value'}]]}|[{'atom',137,'error'}]]}]]}|[[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Dict'}|[{'type',138,'dict',[{'var',138,'Key'}|[{'var',138,'Value'}]]}]]]]}]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'fetch_keys',1},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'Dict'}]}|[{'var',149,'Keys'}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Dict'}|[{'type',150,'dict',[{'var',150,'Key'}|[{'ann_type',150,[{'var',150,'Value'}|[{'type',150,'term',[]}]]}]]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Keys'}|[{'type',151,'list',[{'var',151,'Key'}]}]]]]}]]]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'erase',2},[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'Key'}|[{'var',156,'Dict1'}]]}|[{'var',156,'Dict2'}]]}|[[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Dict1'}|[{'type',157,'dict',[{'var',157,'Key'}|[{'var',157,'Value'}]]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Dict2'}|[{'type',158,'dict',[{'var',158,'Key'}|[{'var',158,'Value'}]]}]]]]}]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'store',3},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'Key'}|[{'var',174,'Value'}|[{'var',174,'Dict1'}]]]}|[{'var',174,'Dict2'}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Dict1'}|[{'type',175,'dict',[{'var',175,'Key'}|[{'var',175,'Value'}]]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Dict2'}|[{'type',176,'dict',[{'var',176,'Key'}|[{'var',176,'Value'}]]}]]]]}]]]]}]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'append',3},[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'Key'}|[{'var',192,'Value'}|[{'var',192,'Dict1'}]]]}|[{'var',192,'Dict2'}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Dict1'}|[{'type',193,'dict',[{'var',193,'Key'}|[{'var',193,'Value'}]]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Dict2'}|[{'type',194,'dict',[{'var',194,'Key'}|[{'var',194,'Value'}]]}]]]]}]]]]}]}],
		%% Line 210
		'spec' =
		    %% Line 210
		    [{{'append_list',3},[{'type',210,'bounded_fun',[{'type',210,'fun',[{'type',210,'product',[{'var',210,'Key'}|[{'var',210,'ValList'}|[{'var',210,'Dict1'}]]]}|[{'var',210,'Dict2'}]]}|[[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Dict1'}|[{'type',211,'dict',[{'var',211,'Key'}|[{'var',211,'Value'}]]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Dict2'}|[{'type',212,'dict',[{'var',212,'Key'}|[{'var',212,'Value'}]]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'ValList'}|[{'type',213,'list',[{'var',213,'Value'}]}]]]]}]]]]]}]}],
		%% Line 283
		'spec' =
		    %% Line 283
		    [{{'update',3},[{'type',283,'bounded_fun',[{'type',283,'fun',[{'type',283,'product',[{'var',283,'Key'}|[{'var',283,'Fun'}|[{'var',283,'Dict1'}]]]}|[{'var',283,'Dict2'}]]}|[[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'Dict1'}|[{'type',284,'dict',[{'var',284,'Key'}|[{'var',284,'Value'}]]}]]]]}|[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'Dict2'}|[{'type',285,'dict',[{'var',285,'Key'}|[{'var',285,'Value'}]]}]]]]}|[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'Fun'}|[{'type',286,'fun',[{'type',286,'product',[{'ann_type',286,[{'var',286,'Value1'}|[{'var',286,'Value'}]]}]}|[{'ann_type',286,[{'var',286,'Value2'}|[{'var',286,'Value'}]]}]]}]]]]}]]]]]}]}],
		%% Line 305
		'spec' =
		    %% Line 305
		    [{{'update',4},[{'type',305,'bounded_fun',[{'type',305,'fun',[{'type',305,'product',[{'var',305,'Key'}|[{'var',305,'Fun'}|[{'var',305,'Initial'}|[{'var',305,'Dict1'}]]]]}|[{'var',305,'Dict2'}]]}|[[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'Dict1'}|[{'type',306,'dict',[{'var',306,'Key'}|[{'var',306,'Value'}]]}]]]]}|[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'Dict2'}|[{'type',307,'dict',[{'var',307,'Key'}|[{'var',307,'Value'}]]}]]]]}|[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'Fun'}|[{'type',308,'fun',[{'type',308,'product',[{'ann_type',308,[{'var',308,'Value1'}|[{'var',308,'Value'}]]}]}|[{'ann_type',308,[{'var',308,'Value2'}|[{'var',308,'Value'}]]}]]}]]]]}|[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'Initial'}|[{'var',309,'Value'}]]]]}]]]]]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'update_counter',3},[{'type',324,'bounded_fun',[{'type',324,'fun',[{'type',324,'product',[{'var',324,'Key'}|[{'var',324,'Increment'}|[{'var',324,'Dict1'}]]]}|[{'var',324,'Dict2'}]]}|[[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'Dict1'}|[{'type',325,'dict',[{'var',325,'Key'}|[{'var',325,'Value'}]]}]]]]}|[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'Dict2'}|[{'type',326,'dict',[{'var',326,'Key'}|[{'var',326,'Value'}]]}]]]]}|[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'Increment'}|[{'type',327,'number',[]}]]]]}]]]]]}]}],
		%% Line 342
		'spec' =
		    %% Line 342
		    [{{'fold',3},[{'type',342,'bounded_fun',[{'type',342,'fun',[{'type',342,'product',[{'var',342,'Fun'}|[{'var',342,'Acc0'}|[{'var',342,'Dict'}]]]}|[{'var',342,'Acc1'}]]}|[[{'type',343,'constraint',[{'atom',343,'is_subtype'}|[[{'var',343,'Fun'}|[{'type',343,'fun',[{'type',343,'product',[{'var',343,'Key'}|[{'var',343,'Value'}|[{'var',343,'AccIn'}]]]}|[{'var',343,'AccOut'}]]}]]]]}|[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'Dict'}|[{'type',344,'dict',[{'var',344,'Key'}|[{'var',344,'Value'}]]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'Acc0'}|[{'var',345,'Acc'}]]]]}|[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'Acc1'}|[{'var',346,'Acc'}]]]]}|[{'type',347,'constraint',[{'atom',347,'is_subtype'}|[[{'var',347,'AccIn'}|[{'var',347,'Acc'}]]]]}|[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'AccOut'}|[{'var',348,'Acc'}]]]]}]]]]]]]]}]}],
		%% Line 354
		'spec' =
		    %% Line 354
		    [{{'map',2},[{'type',354,'bounded_fun',[{'type',354,'fun',[{'type',354,'product',[{'var',354,'Fun'}|[{'var',354,'Dict1'}]]}|[{'var',354,'Dict2'}]]}|[[{'type',355,'constraint',[{'atom',355,'is_subtype'}|[[{'var',355,'Fun'}|[{'type',355,'fun',[{'type',355,'product',[{'var',355,'Key'}|[{'var',355,'Value1'}]]}|[{'var',355,'Value2'}]]}]]]]}|[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'Dict1'}|[{'type',356,'dict',[{'var',356,'Key'}|[{'var',356,'Value1'}]]}]]]]}|[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'Dict2'}|[{'type',357,'dict',[{'var',357,'Key'}|[{'var',357,'Value2'}]]}]]]]}]]]]]}]}],
		%% Line 361
		'spec' =
		    %% Line 361
		    [{{'filter',2},[{'type',361,'bounded_fun',[{'type',361,'fun',[{'type',361,'product',[{'var',361,'Pred'}|[{'var',361,'Dict1'}]]}|[{'var',361,'Dict2'}]]}|[[{'type',362,'constraint',[{'atom',362,'is_subtype'}|[[{'var',362,'Pred'}|[{'type',362,'fun',[{'type',362,'product',[{'var',362,'Key'}|[{'var',362,'Value'}]]}|[{'type',362,'boolean',[]}]]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'Dict1'}|[{'type',363,'dict',[{'var',363,'Key'}|[{'var',363,'Value'}]]}]]]]}|[{'type',364,'constraint',[{'atom',364,'is_subtype'}|[[{'var',364,'Dict2'}|[{'type',364,'dict',[{'var',364,'Key'}|[{'var',364,'Value'}]]}]]]]}]]]]]}]}],
		%% Line 368
		'spec' =
		    %% Line 368
		    [{{'merge',3},[{'type',368,'bounded_fun',[{'type',368,'fun',[{'type',368,'product',[{'var',368,'Fun'}|[{'var',368,'Dict1'}|[{'var',368,'Dict2'}]]]}|[{'var',368,'Dict3'}]]}|[[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Fun'}|[{'type',369,'fun',[{'type',369,'product',[{'var',369,'Key'}|[{'var',369,'Value1'}|[{'var',369,'Value2'}]]]}|[{'var',369,'Value'}]]}]]]]}|[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'Dict1'}|[{'type',370,'dict',[{'var',370,'Key'}|[{'var',370,'Value1'}]]}]]]]}|[{'type',371,'constraint',[{'atom',371,'is_subtype'}|[[{'var',371,'Dict2'}|[{'type',371,'dict',[{'var',371,'Key'}|[{'var',371,'Value2'}]]}]]]]}|[{'type',372,'constraint',[{'atom',372,'is_subtype'}|[[{'var',372,'Dict3'}|[{'type',372,'dict',[{'var',372,'Key'}|[{'var',372,'Value'}]]}]]]]}]]]]]]}]}]]
'new'/0 =
    %% Line 82
    fun () ->
	let <Empty> =
	    %% Line 83
	    apply 'mk_seg'/1
		(16)
	in  %% Line 84
	    {'dict',0,16,16,8,80,48,Empty,{Empty}}
'is_key'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	let <Slot> =
	    %% Line 90
	    apply 'get_slot'/2
		(_cor0, _cor1)
	in  let <Bkt> =
		%% Line 91
		apply 'get_bucket'/2
		    (_cor0, Slot)
	    in  %% Line 92
		apply 'find_key'/2
		    (_cor1, Bkt)
'find_key'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <K,[[_cor4|_X_Val]|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     K) ->
	      'true'
	  %% Line 95
	  <K,[_cor6|Bkt]> when 'true' ->
	      apply 'find_key'/2
		  (K, Bkt)
	  %% Line 96
	  <_cor7,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_key',2}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 102
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 103
	    ( fun (_cor3,_cor2,_cor1) ->
		  [{_cor3,_cor2}|_cor1]
	      -| [{'id',{0,0,'-to_list/1-fun-0-'}}] )
	in  %% Line 103
	    apply 'fold'/3
		(_cor7, [], _cor0)
'from_list'/1 =
    %% Line 109
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 110
	    ( fun (_cor3,_cor2) ->
		  case <_cor3,_cor2> of
		    <{K,V},D> when 'true' ->
			apply 'store'/3
			    (K, V, D)
		    ( <_cor5,_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor5,_cor4})
			    -| [{'function_name',{'-from_list/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-from_list/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 110
		apply 'new'/0
		    ()
	    in  %% Line 110
		call 'lists':'foldl'
		    (_cor6, _cor1, _cor0)
'size'/1 =
    %% Line 115
    fun (_cor0) ->
	case _cor0 of
	  <{'dict',N,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor2> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      N
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'size',1}}] )
	    -| ['compiler_generated'] )
	end
'is_empty'/1 =
    %% Line 120
    fun (_cor0) ->
	case _cor0 of
	  <{'dict',N,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      call 'erlang':'=:='
		  (N, 0)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_empty',1}}] )
	    -| ['compiler_generated'] )
	end
'fetch'/2 =
    %% Line 125
    fun (_cor1,_cor0) ->
	let <Slot> =
	    %% Line 126
	    apply 'get_slot'/2
		(_cor0, _cor1)
	in  let <Bkt> =
		%% Line 127
		apply 'get_bucket'/2
		    (_cor0, Slot)
	    in  %% Line 128
		try
		    apply 'fetch_val'/2
			(_cor1, Bkt)
		of <_cor4> ->
		    _cor4
		catch <_cor7,_cor6,_cor5> ->
		    case <_cor7,_cor6,_cor5> of
		      %% Line 130
		      <'throw','badarg',_cor10> when 'true' ->
			  call 'erlang':'error'
			      ('badarg', [_cor1|[_cor0|[]]])
		      ( <_cor7,_cor6,_cor5> when 'true' ->
			    primop 'raise'
				(_cor5, _cor6)
			-| ['compiler_generated'] )
		    end
'fetch_val'/2 =
    %% Line 133
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <K,[[_cor4|Val]|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     K) ->
	      Val
	  %% Line 134
	  <K,[_cor6|Bkt]> when 'true' ->
	      apply 'fetch_val'/2
		  (K, Bkt)
	  %% Line 135
	  <_cor7,[]> when 'true' ->
	      call 'erlang':'throw'
		  ('badarg')
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'fetch_val',2}}] )
	    -| ['compiler_generated'] )
	end
'find'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	let <Slot> =
	    %% Line 141
	    apply 'get_slot'/2
		(_cor0, _cor1)
	in  let <Bkt> =
		%% Line 142
		apply 'get_bucket'/2
		    (_cor0, Slot)
	    in  %% Line 143
		apply 'find_val'/2
		    (_cor1, Bkt)
'find_val'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <K,[[_cor4|Val]|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     K) ->
	      {'ok',Val}
	  %% Line 146
	  <K,[_cor6|Bkt]> when 'true' ->
	      apply 'find_val'/2
		  (K, Bkt)
	  %% Line 147
	  <_cor7,[]> when 'true' ->
	      'error'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_val',2}}] )
	    -| ['compiler_generated'] )
	end
'fetch_keys'/1 =
    %% Line 153
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 154
	    ( fun (_cor3,_cor2,_cor1) ->
		  [_cor3|_cor1]
	      -| [{'id',{0,0,'-fetch_keys/1-fun-0-'}}] )
	in  %% Line 154
	    apply 'fold'/3
		(_cor7, [], _cor0)
'erase'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	let <Slot> =
	    %% Line 163
	    apply 'get_slot'/2
		(_cor0, _cor1)
	in  let <_cor5> =
		%% Line 164
		( fun (_cor3) ->
		      apply 'erase_key'/2
			  (_cor1, _cor3)
		  -| [{'id',{0,0,'-erase/2-fun-0-'}}] )
	    in  %% Line 164
		case apply 'on_bucket'/3
			 (_cor5, _cor0, %% Line 165
					Slot) of
		  <{D1,Dc}> when 'true' ->
		      %% Line 166
		      apply 'maybe_contract'/2
			  (D1, Dc)
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor6})
		    -| ['compiler_generated'] )
		end
'erase_key'/2 =
    %% Line 168
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[[_cor5|_X_Val]|Bkt]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Key) ->
	      {Bkt,1}
	  %% Line 169
	  <Key,[E|Bkt0]> when 'true' ->
	      %% Line 170
	      case apply 'erase_key'/2
		       (Key, Bkt0) of
		<{Bkt1,Dc}> when 'true' ->
		    %% Line 171
		    {[E|Bkt1],Dc}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 172
	  <_cor6,[]> when 'true' ->
	      {[],0}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'erase_key',2}}] )
	    -| ['compiler_generated'] )
	end
'store'/3 =
    %% Line 178
    fun (_cor2,_cor1,_cor0) ->
	let <Slot> =
	    %% Line 179
	    apply 'get_slot'/2
		(_cor0, _cor2)
	in  let <_cor6> =
		%% Line 180
		( fun (_cor4) ->
		      apply 'store_bkt_val'/3
			  (_cor2, _cor1, _cor4)
		  -| [{'id',{0,0,'-store/3-fun-0-'}}] )
	    in  %% Line 180
		case apply 'on_bucket'/3
			 (_cor6, _cor0, %% Line 181
					Slot) of
		  <{D1,Ic}> when 'true' ->
		      %% Line 182
		      apply 'maybe_expand'/2
			  (D1, Ic)
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'store_bkt_val'/3 =
    %% Line 186
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,New,[[_cor7|_X_Old]|Bkt]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Key) ->
	      {[[Key|New]|Bkt],0}
	  %% Line 187
	  <Key,New,[Other|Bkt0]> when 'true' ->
	      %% Line 188
	      case apply 'store_bkt_val'/3
		       (Key, New, Bkt0) of
		<{Bkt1,Ic}> when 'true' ->
		    %% Line 189
		    {[Other|Bkt1],Ic}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 190
	  <Key,New,[]> when 'true' ->
	      {[[Key|New]|[]],1}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'store_bkt_val',3}}] )
	    -| ['compiler_generated'] )
	end
'append'/3 =
    %% Line 196
    fun (_cor2,_cor1,_cor0) ->
	let <Slot> =
	    %% Line 197
	    apply 'get_slot'/2
		(_cor0, _cor2)
	in  let <_cor6> =
		%% Line 198
		( fun (_cor4) ->
		      apply 'append_bkt'/3
			  (_cor2, _cor1, _cor4)
		  -| [{'id',{0,0,'-append/3-fun-0-'}}] )
	    in  %% Line 198
		case apply 'on_bucket'/3
			 (_cor6, _cor0, %% Line 199
					Slot) of
		  <{D1,Ic}> when 'true' ->
		      %% Line 200
		      apply 'maybe_expand'/2
			  (D1, Ic)
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'append_bkt'/3 =
    %% Line 204
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,[[_cor8|Bag]|Bkt]>
	      when call 'erlang':'=:='
		    (_cor8,
		     Key) ->
	      let <_cor3> =
		  call 'erlang':'++'
		      (Bag, [Val|[]])
	      in  {[[Key|_cor3]|Bkt],0}
	  %% Line 205
	  <Key,Val,[Other|Bkt0]> when 'true' ->
	      %% Line 206
	      case apply 'append_bkt'/3
		       (Key, Val, Bkt0) of
		<{Bkt1,Ic}> when 'true' ->
		    %% Line 207
		    {[Other|Bkt1],Ic}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 208
	  <Key,Val,[]> when 'true' ->
	      {[[Key|[Val|[]]]|[]],1}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'append_bkt',3}}] )
	    -| ['compiler_generated'] )
	end
'append_list'/3 =
    %% Line 215
    fun (_cor2,_cor1,_cor0) ->
	let <Slot> =
	    %% Line 216
	    apply 'get_slot'/2
		(_cor0, _cor2)
	in  let <_cor6> =
		%% Line 217
		( fun (_cor4) ->
		      apply 'app_list_bkt'/3
			  (_cor2, _cor1, _cor4)
		  -| [{'id',{0,0,'-append_list/3-fun-0-'}}] )
	    in  %% Line 217
		case apply 'on_bucket'/3
			 (_cor6, _cor0, %% Line 218
					Slot) of
		  <{D1,Ic}> when 'true' ->
		      %% Line 219
		      apply 'maybe_expand'/2
			  (D1, Ic)
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'app_list_bkt'/3 =
    %% Line 223
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,L,[[_cor8|Bag]|Bkt]>
	      when call 'erlang':'=:='
		    (_cor8,
		     Key) ->
	      let <_cor3> =
		  call 'erlang':'++'
		      (Bag, L)
	      in  {[[Key|_cor3]|Bkt],0}
	  %% Line 224
	  <Key,L,[Other|Bkt0]> when 'true' ->
	      %% Line 225
	      case apply 'app_list_bkt'/3
		       (Key, L, Bkt0) of
		<{Bkt1,Ic}> when 'true' ->
		    %% Line 226
		    {[Other|Bkt1],Ic}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 227
	  <Key,L,[]> when 'true' ->
	      {[[Key|L]|[]],1}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'app_list_bkt',3}}] )
	    -| ['compiler_generated'] )
	end
'update'/3 =
    %% Line 288
    fun (_cor2,_cor1,_cor0) ->
	let <Slot> =
	    %% Line 289
	    apply 'get_slot'/2
		(_cor0, _cor2)
	in  %% Line 290
	    try
		let <_cor6> =
		    ( fun (_cor4) ->
			  apply 'update_bkt'/3
			      (_cor2, _cor1, _cor4)
		      -| [{'id',{0,0,'-update/3-fun-0-'}}] )
		in  apply 'on_bucket'/3
			(_cor6, _cor0, Slot)
	    of <_cor7> ->
		case _cor7 of
		  %% Line 291
		  <{D1,_X_Uv}> when 'true' ->
		      D1
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'try_clause',_cor8})
		    -| ['compiler_generated'] )
		end
	    catch <_cor11,_cor10,_cor9> ->
		case <_cor11,_cor10,_cor9> of
		  %% Line 293
		  <'throw','badarg',_cor15> when 'true' ->
		      call 'erlang':'error'
			  ('badarg', [_cor2|[_cor1|[_cor0|[]]]])
		  ( <_cor11,_cor10,_cor9> when 'true' ->
			primop 'raise'
			    (_cor9, _cor10)
		    -| ['compiler_generated'] )
		end
'update_bkt'/3 =
    %% Line 296
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,F,[[_cor8|Val]|Bkt]>
	      when call 'erlang':'=:='
		    (_cor8,
		     Key) ->
	      let <Upd> =
		  %% Line 297
		  apply F
		      (Val)
	      in  %% Line 298
		  {[[Key|Upd]|Bkt],Upd}
	  %% Line 299
	  <Key,F,[Other|Bkt0]> when 'true' ->
	      %% Line 300
	      case apply 'update_bkt'/3
		       (Key, F, Bkt0) of
		<{Bkt1,Upd}> when 'true' ->
		    %% Line 301
		    {[Other|Bkt1],Upd}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 302
	  <_X_Key,_X_F,[]> when 'true' ->
	      %% Line 303
	      call 'erlang':'throw'
		  ('badarg')
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'update_bkt',3}}] )
	    -| ['compiler_generated'] )
	end
'update'/4 =
    %% Line 311
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Slot> =
	    %% Line 312
	    apply 'get_slot'/2
		(_cor0, _cor3)
	in  let <_cor7> =
		%% Line 313
		( fun (_cor5) ->
		      apply 'update_bkt'/4
			  (_cor3, _cor2, _cor1, _cor5)
		  -| [{'id',{0,0,'-update/4-fun-0-'}}] )
	    in  %% Line 313
		case apply 'on_bucket'/3
			 (_cor7, _cor0, %% Line 314
					Slot) of
		  <{D1,Ic}> when 'true' ->
		      %% Line 315
		      apply 'maybe_expand'/2
			  (D1, Ic)
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
'update_bkt'/4 =
    %% Line 317
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,F,_cor10,[[_cor11|Val]|Bkt]>
	      when call 'erlang':'=:='
		    (_cor11,
		     Key) ->
	      let <_cor4> =
		  %% Line 318
		  apply F
		      (Val)
	      in  %% Line 318
		  {[[Key|_cor4]|Bkt],0}
	  %% Line 319
	  <Key,F,I,[Other|Bkt0]> when 'true' ->
	      %% Line 320
	      case apply 'update_bkt'/4
		       (Key, F, I, Bkt0) of
		<{Bkt1,Ic}> when 'true' ->
		    %% Line 321
		    {[Other|Bkt1],Ic}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 322
	  <Key,F,I,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      {[[Key|I]|[]],1}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'update_bkt',4}}] )
	    -| ['compiler_generated'] )
	end
'update_counter'/3 =
    %% Line 329
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Incr,D0>
	      when call 'erlang':'is_number'
		    (Incr) ->
	      let <Slot> =
		  %% Line 330
		  apply 'get_slot'/2
		      (D0, Key)
	      in  let <_cor6> =
		      %% Line 331
		      ( fun (_cor4) ->
			    apply 'counter_bkt'/3
				(Key, Incr, _cor4)
			-| [{'id',{0,0,'-update_counter/3-fun-0-'}}] )
		  in  %% Line 331
		      case apply 'on_bucket'/3
			       (_cor6, %% Line 332
				       D0, %% Line 332
					   Slot) of
			<{D1,Ic}> when 'true' ->
			    %% Line 333
			    apply 'maybe_expand'/2
				(D1, Ic)
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'update_counter',3}}] )
	    -| ['compiler_generated'] )
	end
'counter_bkt'/3 =
    %% Line 335
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,I,[[_cor8|Val]|Bkt]>
	      when call 'erlang':'=:='
		    (_cor8,
		     Key) ->
	      let <_cor3> =
		  %% Line 336
		  call 'erlang':'+'
		      (Val, I)
	      in  %% Line 336
		  {[[Key|_cor3]|Bkt],0}
	  %% Line 337
	  <Key,I,[Other|Bkt0]> when 'true' ->
	      %% Line 338
	      case apply 'counter_bkt'/3
		       (Key, I, Bkt0) of
		<{Bkt1,Ic}> when 'true' ->
		    %% Line 339
		    {[Other|Bkt1],Ic}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 340
	  <Key,I,[]> when 'true' ->
	      {[[Key|I]|[]],1}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'counter_bkt',3}}] )
	    -| ['compiler_generated'] )
	end
'fold'/3 =
    %% Line 352
    fun (_cor2,_cor1,_cor0) ->
	apply 'fold_dict'/3
	    (_cor2, _cor1, _cor0)
'map'/2 =
    %% Line 359
    fun (_cor1,_cor0) ->
	apply 'map_dict'/2
	    (_cor1, _cor0)
'filter'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	apply 'filter_dict'/2
	    (_cor1, _cor0)
'merge'/3 =
    %% Line 374
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,D1 = {'dict',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46},D2 = {'dict',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}>
	      when call 'erlang':'<'
		    (_cor39,
		     _cor47) ->
	      let <_cor25> =
		  %% Line 375
		  ( fun (_cor21,_cor20,_cor19) ->
			let <_cor18> =
			    %% Line 376
			    ( fun (_cor16) ->
				  apply F
				      (_cor21, _cor20, _cor16)
			      -| [{'id',{0,0,'-merge/3-fun-0-'}}] )
			in  %% Line 376
			    apply 'update'/4
				(_cor21, _cor18, _cor20, _cor19)
		    -| [{'id',{0,0,'-merge/3-fun-1-'}}] )
	      in  %% Line 375
		  apply 'fold_dict'/3
		      (_cor25, %% Line 377
			       D2, %% Line 377
				   D1)
	  %% Line 378
	  <F,D1,D2> when 'true' ->
	      let <_cor35> =
		  %% Line 379
		  ( fun (_cor31,_cor30,_cor29) ->
			let <_cor28> =
			    %% Line 380
			    ( fun (_cor26) ->
				  apply F
				      (_cor31, _cor26, _cor30)
			      -| [{'id',{0,0,'-merge/3-fun-2-'}}] )
			in  %% Line 380
			    apply 'update'/4
				(_cor31, _cor28, _cor30, _cor29)
		    -| [{'id',{0,0,'-merge/3-fun-3-'}}] )
	      in  %% Line 379
		  apply 'fold_dict'/3
		      (_cor35, %% Line 381
			       D1, %% Line 381
				   D2)
	end
'get_slot'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	%% Line 389
	( case _cor1 of
	    ( <( {'dict',_cor15,_cor16,_rec0,_cor17,_cor18,_cor19,_cor20,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <H> =
		      call 'erlang':'phash'
			  (_cor0, _rec0)
		  in  %% Line 390
		      case <> of
			%% Line 391
			<>
			    when ( call 'erlang':'>'
				    (H,
				     _cor16)
				-| ['compiler_generated'] ) ->
			    call 'erlang':'-'
				(H, _cor17)
			%% Line 392
			<> when 'true' ->
			    H
		      end
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','dict'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_bucket'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	( case _cor1 of
	    ( <( {'dict',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_rec2}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'get_bucket_s'/2
		      (_rec2, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','dict'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'on_bucket'/3 =
    %% Line 402
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 403
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor4> =
		%% Line 403
		call 'erlang':'div'
		    (_cor3, 16)
	    in  let <SegI> =
		    %% Line 403
		    call 'erlang':'+'
			(_cor4, 1)
		in  let <_cor6> =
			%% Line 404
			call 'erlang':'-'
			    (_cor0, 1)
		    in  let <_cor7> =
			    %% Line 404
			    call 'erlang':'rem'
				(_cor6, 16)
			in  let <BktI> =
				%% Line 404
				call 'erlang':'+'
				    (_cor7, 1)
			    in  %% Line 405
				( case _cor1 of
				    ( <( {'dict',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec3}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Seg> =
					      %% Line 406
					      call 'erlang':'element'
						  (SegI, _rec3)
					  in  let <B0> =
						  %% Line 407
						  call 'erlang':'element'
						      (BktI, Seg)
					      in  %% Line 408
						  case apply _cor2
							   (B0) of
						    <{B1,Res}> when 'true' ->
							let <_cor15> =
							    %% Line 409
							    call 'erlang':'setelement'
								(BktI, Seg, B1)
							in  let <_rec4> =
								%% Line 409
								call 'erlang':'setelement'
								    (SegI, _rec3, _cor15)
							    in  let <_cor19> =
								    %% Line 409
								    call 'erlang':'setelement'
									(9, _cor1, _rec4)
								in  %% Line 409
								    {_cor19,Res}
						    ( <_cor14> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor14})
						      -| ['compiler_generated'] )
						  end
				      -| ['compiler_generated'] )
				    ( <_cor30> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','dict'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
'fold_dict'/3 =
    %% Line 420
    fun (_cor2,_cor1,_cor0) ->
	%% Line 421
	( case _cor0 of
	    ( <( {'dict',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_rec6}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor6> =
		      %% Line 422
		      call 'erlang':'tuple_size'
			  (_rec6)
		  in  %% Line 422
		      apply 'fold_segs'/4
			  (_cor2, _cor1, _rec6, _cor6)
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','dict'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fold_segs'/4 =
    %% Line 424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,Acc,Segs,I>
	      when call 'erlang':'>='
		    (I,
		     1) ->
	      let <Seg> =
		  %% Line 425
		  call 'erlang':'element'
		      (I, Segs)
	      in  let <_cor6> =
		      %% Line 426
		      call 'erlang':'tuple_size'
			  (Seg)
		  in  let <_cor7> =
			  %% Line 426
			  apply 'fold_seg'/4
			      (F, Acc, Seg, _cor6)
		      in  let <_cor5> =
			      %% Line 426
			      call 'erlang':'-'
				  (I, 1)
			  in  %% Line 426
			      apply 'fold_segs'/4
				  (F, _cor7, Segs, _cor5)
	  %% Line 427
	  <F,Acc,_cor12,0>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      Acc
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fold_segs',4}}] )
	    -| ['compiler_generated'] )
	end
'fold_seg'/4 =
    %% Line 429
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,Acc,Seg,I>
	      when call 'erlang':'>='
		    (I,
		     1) ->
	      let <_cor5> =
		  %% Line 430
		  call 'erlang':'element'
		      (I, Seg)
	      in  let <_cor6> =
		      %% Line 430
		      apply 'fold_bucket'/3
			  (F, Acc, _cor5)
		  in  let <_cor4> =
			  %% Line 430
			  call 'erlang':'-'
			      (I, 1)
		      in  %% Line 430
			  apply 'fold_seg'/4
			      (F, _cor6, Seg, _cor4)
	  %% Line 431
	  <F,Acc,_cor11,0>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      Acc
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fold_seg',4}}] )
	    -| ['compiler_generated'] )
	end
'fold_bucket'/3 =
    %% Line 433
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Acc,[[Key|Val]|Bkt]> when 'true' ->
	      let <_cor3> =
		  %% Line 434
		  apply F
		      (Key, Val, Acc)
	      in  %% Line 434
		  apply 'fold_bucket'/3
		      (F, _cor3, Bkt)
	  %% Line 435
	  <F,Acc,[]>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      Acc
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fold_bucket',3}}] )
	    -| ['compiler_generated'] )
	end
'map_dict'/2 =
    %% Line 437
    fun (_cor1,_cor0) ->
	%% Line 438
	( case _cor0 of
	    ( <( {'dict',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec7}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Segs0> =
		      call 'erlang':'tuple_to_list'
			  (_rec7)
		  in  let <Segs1> =
			  %% Line 439
			  apply 'map_seg_list'/2
			      (_cor1, Segs0)
		      in  let <_rec8> =
			      %% Line 440
			      call 'erlang':'list_to_tuple'
				  (Segs1)
			  in  %% Line 440
			      call 'erlang':'setelement'
				  (9, _cor0, _rec8)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','dict'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'map_seg_list'/2 =
    %% Line 442
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[Seg|Segs]> when 'true' ->
	      let <Bkts0> =
		  %% Line 443
		  call 'erlang':'tuple_to_list'
		      (Seg)
	      in  let <Bkts1> =
		      %% Line 444
		      apply 'map_bkt_list'/2
			  (F, Bkts0)
		  in  let <_cor4> =
			  %% Line 445
			  call 'erlang':'list_to_tuple'
			      (Bkts1)
		      in  let <_cor5> =
			      %% Line 445
			      apply 'map_seg_list'/2
				  (F, Segs)
			  in  %% Line 445
			      [_cor4|_cor5]
	  %% Line 446
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'map_seg_list',2}}] )
	    -| ['compiler_generated'] )
	end
'map_bkt_list'/2 =
    %% Line 448
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[Bkt0|Bkts]> when 'true' ->
	      let <_cor2> =
		  %% Line 449
		  apply 'map_bucket'/2
		      (F, Bkt0)
	      in  let <_cor3> =
		      %% Line 449
		      apply 'map_bkt_list'/2
			  (F, Bkts)
		  in  %% Line 449
		      [_cor2|_cor3]
	  %% Line 450
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'map_bkt_list',2}}] )
	    -| ['compiler_generated'] )
	end
'map_bucket'/2 =
    %% Line 452
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[[Key|Val]|Bkt]> when 'true' ->
	      let <_cor2> =
		  %% Line 453
		  apply F
		      (Key, Val)
	      in  let <_cor3> =
		      %% Line 453
		      apply 'map_bucket'/2
			  (F, Bkt)
		  in  %% Line 453
		      [[Key|_cor2]|_cor3]
	  %% Line 454
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'map_bucket',2}}] )
	    -| ['compiler_generated'] )
	end
'filter_dict'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	%% Line 457
	( case _cor0 of
	    ( <( {'dict',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec10}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Segs0> =
		      call 'erlang':'tuple_to_list'
			  (_rec10)
		  in  %% Line 458
		      case apply 'filter_seg_list'/4
			       (_cor1, Segs0, [], 0) of
			<{Segs1,Fc}> when 'true' ->
			    let <_rec11> =
				%% Line 459
				call 'erlang':'list_to_tuple'
				    (Segs1)
			    in  let <_cor9> =
				    %% Line 459
				    call 'erlang':'setelement'
					(9, _cor0, _rec11)
				in  %% Line 459
				    apply 'maybe_contract'/2
					(_cor9, Fc)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','dict'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'filter_seg_list'/4 =
    %% Line 461
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[Seg|Segs],Fss,Fc0> when 'true' ->
	      let <Bkts0> =
		  %% Line 462
		  call 'erlang':'tuple_to_list'
		      (Seg)
	      in  %% Line 463
		  case apply 'filter_bkt_list'/4
			   (F, Bkts0, [], Fc0) of
		    <{Bkts1,Fc1}> when 'true' ->
			let <_cor6> =
			    %% Line 464
			    call 'erlang':'list_to_tuple'
				(Bkts1)
			in  %% Line 464
			    apply 'filter_seg_list'/4
				(F, Segs, [_cor6|Fss], Fc1)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 465
	  <F,[],Fss,Fc>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      let <_cor7> =
		  %% Line 466
		  call 'lists':'reverse'
		      (Fss, [])
	      in  %% Line 466
		  {_cor7,Fc}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'filter_seg_list',4}}] )
	    -| ['compiler_generated'] )
	end
'filter_bkt_list'/4 =
    %% Line 468
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[Bkt0|Bkts],Fbs,Fc0> when 'true' ->
	      %% Line 469
	      case apply 'filter_bucket'/4
		       (F, Bkt0, [], Fc0) of
		<{Bkt1,Fc1}> when 'true' ->
		    %% Line 470
		    apply 'filter_bkt_list'/4
			(F, Bkts, [Bkt1|Fbs], Fc1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 471
	  <F,[],Fbs,Fc>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      let <_cor5> =
		  %% Line 472
		  call 'lists':'reverse'
		      (Fbs)
	      in  %% Line 472
		  {_cor5,Fc}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'filter_bkt_list',4}}] )
	    -| ['compiler_generated'] )
	end
'filter_bucket'/4 =
    %% Line 474
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[E = [Key|Val]|Bkt],Fb,Fc> when 'true' ->
	      %% Line 475
	      case apply F
		       (Key, Val) of
		%% Line 476
		<'true'> when 'true' ->
		    apply 'filter_bucket'/4
			(F, Bkt, [E|Fb], Fc)
		%% Line 477
		<'false'> when 'true' ->
		    let <_cor4> =
			call 'erlang':'+'
			    (Fc, 1)
		    in  apply 'filter_bucket'/4
			    (F, Bkt, Fb, _cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 479
	  <F,[],Fb,Fc>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      let <_cor6> =
		  %% Line 480
		  call 'lists':'reverse'
		      (Fb)
	      in  %% Line 480
		  {_cor6,Fc}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'filter_bucket',4}}] )
	    -| ['compiler_generated'] )
	end
'get_bucket_s'/2 =
    %% Line 485
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 486
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor3> =
		%% Line 486
		call 'erlang':'div'
		    (_cor2, 16)
	    in  let <SegI> =
		    %% Line 486
		    call 'erlang':'+'
			(_cor3, 1)
		in  let <_cor5> =
			%% Line 487
			call 'erlang':'-'
			    (_cor0, 1)
		    in  let <_cor6> =
			    %% Line 487
			    call 'erlang':'rem'
				(_cor5, 16)
			in  let <BktI> =
				%% Line 487
				call 'erlang':'+'
				    (_cor6, 1)
			    in  let <_cor8> =
				    %% Line 488
				    call 'erlang':'element'
					(SegI, _cor1)
				in  %% Line 488
				    call 'erlang':'element'
					(BktI, _cor8)
'put_bucket_s'/3 =
    %% Line 490
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 491
	    call 'erlang':'-'
		(_cor1, 1)
	in  let <_cor4> =
		%% Line 491
		call 'erlang':'div'
		    (_cor3, 16)
	    in  let <SegI> =
		    %% Line 491
		    call 'erlang':'+'
			(_cor4, 1)
		in  let <_cor6> =
			%% Line 492
			call 'erlang':'-'
			    (_cor1, 1)
		    in  let <_cor7> =
			    %% Line 492
			    call 'erlang':'rem'
				(_cor6, 16)
			in  let <BktI> =
				%% Line 492
				call 'erlang':'+'
				    (_cor7, 1)
			    in  let <_cor9> =
				    %% Line 493
				    call 'erlang':'element'
					(SegI, _cor2)
				in  let <Seg> =
					%% Line 493
					call 'erlang':'setelement'
					    (BktI, _cor9, _cor0)
				    in  %% Line 494
					call 'erlang':'setelement'
					    (SegI, _cor2, Seg)
'maybe_expand'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,0> when 'true' ->
	      apply 'maybe_expand_aux'/2
		  (T, 0)
	  %% Line 501
	  <T,1> when 'true' ->
	      apply 'maybe_expand_aux'/2
		  (T, 1)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'maybe_expand',2}}] )
	    -| ['compiler_generated'] )
	end
'maybe_expand_aux'/2 =
    %% Line 503
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T0 = {'dict',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48},Ic>
	      when ( try
		      let <_cor8> =
			  call 'erlang':'+'
			      (_cor41, Ic)
		      in  call 'erlang':'>'
			      (_cor8, _cor45)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 505
	      ( case apply 'maybe_expand_segs'/1
			 (T0) of
		  ( <( {'dict',_cor49,_rec13,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
		       -| ['compiler_generated'] )> when 'true' ->
			let <N> =
			    call 'erlang':'+'
				(_rec13, 1)
			in  let <Slot1> =
				%% Line 507
				call 'erlang':'-'
				    (N, _cor51)
			    in  let <B> =
				    %% Line 508
				    apply 'get_bucket_s'/2
					(_cor55, Slot1)
				in  %% Line 510
				    case apply 'rehash'/4
					     (B, Slot1, N, _cor50) of
				      <[B1|B2]> when 'true' ->
					  let <Segs1> =
					      %% Line 511
					      apply 'put_bucket_s'/3
						  (_cor55, Slot1, B1)
					  in  let <Segs2> =
						  %% Line 512
						  apply 'put_bucket_s'/3
						      (Segs1, N, B2)
					      in  let <_rec17> =
						      %% Line 513
						      call 'erlang':'+'
							  (_cor49, Ic)
						  in  let <_rec18> =
							  %% Line 515
							  call 'erlang':'*'
							      (N, 5)
						      in  let <_rec19> =
							      %% Line 516
							      call 'erlang':'*'
								  (N, 3)
							  in  %% Line 517
							      {'dict',_rec17,N,_cor50,_cor51,_rec18,_rec19,_cor54,Segs2}
				      ( <_cor24> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor24})
					-| ['compiler_generated'] )
				    end
		    -| ['compiler_generated'] )
		  ( <_cor56> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','dict'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 518
	  <T,Ic> when 'true' ->
	      ( case T of
		  ( <( {'dict',_rec32,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec30> =
			    call 'erlang':'+'
				(_rec32, Ic)
			in  call 'erlang':'setelement'
				(2, T, _rec30)
		    -| ['compiler_generated'] )
		  ( <_cor97> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','dict'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'maybe_expand_segs'/1 =
    %% Line 520
    fun (_cor0) ->
	case _cor0 of
	  <T = {'dict',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}>
	      when call 'erlang':'=:='
		    (_cor25,
		     _cor26) ->
	      let <_rec33> =
		  %% Line 521
		  call 'erlang':'*'
		      (2, _cor26)
	      in  let <_rec34> =
		      %% Line 522
		      call 'erlang':'*'
			  (2, _cor27)
		  in  let <_rec35> =
			  %% Line 523
			  apply 'expand_segs'/2
			      (_cor31, _cor30)
		      in  let <_cor20> =
			      %% Line 523
			      call 'erlang':'setelement'
				  (9, T, _rec35)
			  in  let <_cor21> =
				  %% Line 522
				  call 'erlang':'setelement'
				      (5, _cor20, _rec34)
			      in  %% Line 521
				  call 'erlang':'setelement'
				      (4, _cor21, _rec33)
	  %% Line 524
	  <T> when 'true' ->
	      T
	end
'maybe_contract'/2 =
    %% Line 526
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T = {'dict',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51},Dc>
	      when ( try
		      let <_cor8> =
			  call 'erlang':'-'
			      (_cor44, Dc)
		      in  let <_cor9> =
			      call 'erlang':'<'
				  (_cor8, _cor49)
			  in  let <_cor12> =
				  %% Line 527
				  call 'erlang':'>'
				      (_cor45, 16)
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(_cor9, _cor12)
				    -| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <Slot1> =
		  %% Line 529
		  call 'erlang':'-'
		      (_cor45, _cor47)
	      in  let <B1> =
		      %% Line 531
		      apply 'get_bucket_s'/2
			  (_cor51, Slot1)
		  in  let <B2> =
			  %% Line 533
			  apply 'get_bucket_s'/2
			      (_cor51, _cor45)
		      in  let <_cor25> =
			      %% Line 534
			      call 'erlang':'++'
				  (B1, B2)
			  in  let <Segs1> =
				  %% Line 534
				  apply 'put_bucket_s'/3
				      (_cor51, Slot1, _cor25)
			      in  let <Segs2> =
				      %% Line 535
				      apply 'put_bucket_s'/3
					  (Segs1, _cor45, [])
				  in  let <N1> =
					  %% Line 536
					  call 'erlang':'-'
					      (_cor45, 1)
				      in  let <_rec44> =
					      %% Line 537
					      call 'erlang':'-'
						  (_cor44, Dc)
					  in  let <_rec45> =
						  %% Line 539
						  call 'erlang':'*'
						      (N1, 5)
					      in  let <_rec46> =
						      %% Line 540
						      call 'erlang':'*'
							  (N1, 3)
						  in  let <_cor36> =
							  %% Line 541
							  {'dict',_rec44,N1,_cor46,_cor47,_rec45,_rec46,_cor50,Segs2}
						      in  %% Line 537
							  apply 'maybe_contract_segs'/1
							      (_cor36)
	  %% Line 542
	  <T,Dc> when 'true' ->
	      ( case T of
		  ( <( {'dict',_rec59,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec57> =
			    call 'erlang':'-'
				(_rec59, Dc)
			in  call 'erlang':'setelement'
				(2, T, _rec57)
		    -| ['compiler_generated'] )
		  ( <_cor92> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','dict'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'maybe_contract_segs'/1 =
    %% Line 544
    fun (_cor0) ->
	case _cor0 of
	  <T = {'dict',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}>
	      when call 'erlang':'=:='
		    (_cor23,
		     _cor25) ->
	      let <_rec60> =
		  %% Line 545
		  call 'erlang':'div'
		      (_cor24, 2)
	      in  let <_rec61> =
		      %% Line 546
		      call 'erlang':'div'
			  (_cor25, 2)
		  in  let <_rec62> =
			  %% Line 547
			  apply 'contract_segs'/1
			      (_cor29)
		      in  let <_cor18> =
			      %% Line 547
			      call 'erlang':'setelement'
				  (9, T, _rec62)
			  in  let <_cor19> =
				  %% Line 546
				  call 'erlang':'setelement'
				      (5, _cor18, _rec61)
			      in  %% Line 545
				  call 'erlang':'setelement'
				      (4, _cor19, _rec60)
	  %% Line 548
	  <T> when 'true' ->
	      T
	end
'rehash'/4 =
    %% Line 553
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[KeyBag = [Key|_X_Bag]|T],Slot1,Slot2,MaxN> when 'true' ->
	      %% Line 554
	      case apply 'rehash'/4
		       (T, Slot1, Slot2, MaxN) of
		<[L1|L2]> when 'true' ->
		    %% Line 555
		    case call 'erlang':'phash'
			     (Key, MaxN) of
		      %% Line 556
		      <_cor10>
			  when call 'erlang':'=:='
				(_cor10,
				 Slot1) ->
			  [[KeyBag|L1]|L2]
		      %% Line 557
		      <_cor11>
			  when call 'erlang':'=:='
				(_cor11,
				 Slot2) ->
			  [L1|[KeyBag|L2]]
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 559
	  <[],_X_Slot1,_X_Slot2,_X_MaxN> when 'true' ->
	      [[]]
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rehash',4}}] )
	    -| ['compiler_generated'] )
	end
'mk_seg'/1 =
    %% Line 563
    fun (_cor0) ->
	case _cor0 of
	  <16> when 'true' ->
	      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'mk_seg',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_segs'/2 =
    %% Line 572
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{B1},Empty> when 'true' ->
	      %% Line 573
	      {B1,Empty}
	  %% Line 574
	  <{B1,B2},Empty> when 'true' ->
	      %% Line 575
	      {B1,B2,Empty,Empty}
	  %% Line 576
	  <{B1,B2,B3,B4},Empty> when 'true' ->
	      %% Line 577
	      {B1,B2,B3,B4,Empty,Empty,Empty,Empty}
	  %% Line 578
	  <{B1,B2,B3,B4,B5,B6,B7,B8},Empty> when 'true' ->
	      %% Line 579
	      {B1,B2,B3,B4,B5,B6,B7,B8,%% Line 580
				       Empty,%% Line 580
					     Empty,%% Line 580
						   Empty,%% Line 580
							 Empty,%% Line 580
							       Empty,%% Line 580
								     Empty,%% Line 580
									   Empty,%% Line 580
										 Empty}
	  %% Line 581
	  <{B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16},Empty> when 'true' ->
	      %% Line 582
	      {B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16,%% Line 583
								      Empty,%% Line 583
									    Empty,%% Line 583
										  Empty,%% Line 583
											Empty,%% Line 583
											      Empty,%% Line 583
												    Empty,%% Line 583
													  Empty,%% Line 583
														Empty,%% Line 584
														      Empty,%% Line 584
															    Empty,%% Line 584
																  Empty,%% Line 584
																	Empty,%% Line 584
																	      Empty,%% Line 584
																		    Empty,%% Line 584
																			  Empty,%% Line 584
																				Empty}
	  %% Line 585
	  <Segs,Empty> when 'true' ->
	      let <_cor4> =
		  %% Line 586
		  call 'erlang':'tuple_to_list'
		      (Segs)
	      in  let <_cor2> =
		      %% Line 587
		      call 'erlang':'tuple_size'
			  (Segs)
		  in  let <_cor3> =
			  %% Line 587
			  call 'lists':'duplicate'
			      (_cor2, Empty)
		      in  let <_cor5> =
			      %% Line 587
			      call 'erlang':'++'
				  (_cor4, _cor3)
			  in  %% Line 586
			      call 'erlang':'list_to_tuple'
				  (_cor5)
	end
'contract_segs'/1 =
    %% Line 589
    fun (_cor0) ->
	case _cor0 of
	  <{B1,_cor6}> when 'true' ->
	      %% Line 590
	      {B1}
	  %% Line 591
	  <{B1,B2,_cor7,_cor8}> when 'true' ->
	      %% Line 592
	      {B1,B2}
	  %% Line 593
	  <{B1,B2,B3,B4,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 594
	      {B1,B2,B3,B4}
	  %% Line 595
	  <{B1,B2,B3,B4,B5,B6,B7,B8,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 596
	      {B1,B2,B3,B4,B5,B6,B7,B8}
	  %% Line 597
	  <{B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      %% Line 599
	      {B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16}
	  %% Line 600
	  <Segs> when 'true' ->
	      let <_cor1> =
		  %% Line 601
		  call 'erlang':'tuple_size'
		      (Segs)
	      in  let <Ss> =
		      %% Line 601
		      call 'erlang':'div'
			  (_cor1, 2)
		  in  let <_cor3> =
			  %% Line 602
			  call 'erlang':'tuple_to_list'
			      (Segs)
		      in  let <_cor4> =
			      %% Line 602
			      call 'lists':'sublist'
				  (_cor3, 1, Ss)
			  in  %% Line 602
			      call 'erlang':'list_to_tuple'
				  (_cor4)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dict')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dict', _cor0)
end