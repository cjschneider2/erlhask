module 'lib' ['error_message'/2,
	      'eval_str'/1,
	      'flush_receive'/0,
	      'format_call'/4,
	      'format_call'/5,
	      'format_exception'/6,
	      'format_exception'/7,
	      'format_fun'/1,
	      'format_stacktrace'/4,
	      'format_stacktrace'/5,
	      'module_info'/0,
	      'module_info'/1,
	      'nonl'/1,
	      'progname'/0,
	      'send'/2,
	      'sendw'/2]
    attributes [%% Line 28
		'spec' =
		    %% Line 28
		    [{{'flush_receive',0},[{'type',28,'fun',[{'type',28,'product',[]}|[{'atom',28,'ok'}]]}]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'error_message',2},[{'type',42,'bounded_fun',[{'type',42,'fun',[{'type',42,'product',[{'var',42,'Format'}|[{'var',42,'Args'}]]}|[{'atom',42,'ok'}]]}|[[{'type',43,'constraint',[{'atom',43,'is_subtype'}|[[{'var',43,'Format'}|[{'remote_type',43,[{'atom',43,'io'}|[{'atom',43,'format'}|[[]]]]}]]]]}|[{'type',44,'constraint',[{'atom',44,'is_subtype'}|[[{'var',44,'Args'}|[{'type',44,'list',[{'type',44,'term',[]}]}]]]]}]]]]}]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'progname',0},[{'type',51,'fun',[{'type',51,'product',[]}|[{'type',51,'atom',[]}]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'nonl',1},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'String1'}]}|[{'var',61,'String2'}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'String1'}|[{'type',62,'string',[]}]]]]}|[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'String2'}|[{'type',63,'string',[]}]]]]}]]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'send',2},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[{'var',69,'To'}|[{'var',69,'Msg'}]]}|[{'var',69,'Msg'}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'To'}|[{'type',70,'union',[{'type',70,'pid',[]}|[{'type',70,'atom',[]}|[{'type',70,'tuple',[{'type',70,'atom',[]}|[{'type',70,'node',[]}]]}]]]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Msg'}|[{'type',71,'term',[]}]]]]}]]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'sendw',2},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'To'}|[{'var',75,'Msg'}]]}|[{'var',75,'Msg'}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'To'}|[{'type',76,'union',[{'type',76,'pid',[]}|[{'type',76,'atom',[]}|[{'type',76,'tuple',[{'type',76,'atom',[]}|[{'type',76,'node',[]}]]}]]]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Msg'}|[{'type',77,'term',[]}]]]]}]]]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'eval_str',1},[{'type',93,'fun',[{'type',93,'product',[{'type',93,'union',[{'type',93,'string',[]}|[{'remote_type',93,[{'atom',93,'unicode'}|[{'atom',93,'latin1_binary'}|[[]]]]}]]}]}|[{'type',94,'union',[{'type',94,'tuple',[{'atom',94,'ok'}|[{'type',94,'string',[]}]]}|[{'type',94,'tuple',[{'atom',94,'error'}|[{'type',94,'string',[]}]]}]]}]]}]}]]
'flush_receive'/0 =
    %% Line 30
    fun () ->
	%% Line 31
	receive
	  %% Line 32
	  <_X_Any> when 'true' ->
	      %% Line 33
	      apply 'flush_receive'/0
		  ()
	after %% Line 35
	      0 ->
	  %% Line 36
	  'ok'
'error_message'/2 =
    %% Line 46
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 47
	    call 'io_lib':'format'
		(_cor1, _cor0)
	in  %% Line 47
	    call 'io':'format'
		(#{#<42>(8,1,'integer',['unsigned'|['big']]),
		   #<42>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<126>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<42>(8,1,'integer',['unsigned'|['big']]),
		   #<42>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor2|[]])
'progname'/0 =
    %% Line 53
    fun () ->
	%% Line 54
	case call 'init':'get_argument'
		 ('progname') of
	  %% Line 55
	  <{'ok',[[Prog|[]]|[]]}> when 'true' ->
	      %% Line 56
	      call 'erlang':'list_to_atom'
		  (Prog)
	  %% Line 57
	  <_X_Other> when 'true' ->
	      %% Line 58
	      'no_prog_name'
	end
'nonl'/1 =
    %% Line 65
    fun (_cor0) ->
	case _cor0 of
	  <[10]> when 'true' ->
	      []
	  %% Line 66
	  <[]> when 'true' ->
	      []
	  %% Line 67
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  apply 'nonl'/1
		      (T)
	      in  [H|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'nonl',1}}] )
	    -| ['compiler_generated'] )
	end
'send'/2 =
    %% Line 73
    fun (_cor1,_cor0) ->
	call 'erlang':'!'
	    (_cor1, _cor0)
'sendw'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 80
	    call 'erlang':'self'
		()
	in  do  %% Line 80
		call 'erlang':'!'
		    (_cor1, {_cor2,_cor0})
		%% Line 81
		receive
		  %% Line 82
		  <Reply> when 'true' ->
		      Reply
		after 'infinity' ->
		  'true'
'eval_str'/1 =
    %% Line 96
    fun (_cor0) ->
	case _cor0 of
	  <Str>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 97
	      case call 'erl_scan':'tokens'
		       ([], Str, 0) of
		%% Line 98
		<{'more',_cor16}> when 'true' ->
		    %% Line 99
		    {'error',[73|[110|[99|[111|[109|[112|[108|[101|[116|[101|[32|[102|[111|[114|[109|[32|[40|[109|[105|[115|[115|[105|[110|[103|[32|[46|[60|[99|[114|[62|[41|[63|[63]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
		%% Line 100
		<{'done',{'ok',Toks,_cor17},Rest}> when 'true' ->
		    %% Line 101
		    case apply 'all_white'/1
			     (Rest) of
		      %% Line 102
		      <'true'> when 'true' ->
			  %% Line 103
			  case call 'erl_parse':'parse_exprs'
				   (Toks) of
			    %% Line 104
			    <{'ok',Exprs}> when 'true' ->
				let <_cor2> =
				    catch
					let <_cor1> =
					    %% Line 105
					    call 'erl_eval':'new_bindings'
						()
					in  %% Line 105
					    call 'erl_eval':'exprs'
						(Exprs, _cor1)
				in  %% Line 105
				    case _cor2 of
				      %% Line 106
				      <{'value',Val,_cor18}> when 'true' ->
					  %% Line 107
					  {'ok',Val}
				      %% Line 108
				      <Other> when 'true' ->
					  let <_cor3> =
					      %% Line 109
					      call 'io_lib':'format'
						  ([42|[42|[42|[32|[101|[118|[97|[108|[58|[32|[126|[112]]]]]]]]]]]], [Other|[]])
					  in  let <_cor4> =
						  %% Line 109
						  call 'lists':'flatten'
						      (_cor3)
					      in  %% Line 109
						  {'error',_cor4}
				    end
			    %% Line 111
			    <{'error',{_X_Line,Mod,Args}}> when 'true' ->
				let <_cor6> =
				    %% Line 112
				    call Mod:'format_error'
					(Args)
				in  let <_cor7> =
					%% Line 112
					call 'io_lib':'format'
					    ([42|[42|[42|[32|[126|[116|[115]]]]]]], [_cor6|[]])
				    in  let <Msg> =
					    %% Line 112
					    call 'lists':'flatten'
						(_cor7)
					in  %% Line 113
					    {'error',Msg}
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
		      %% Line 115
		      <'false'> when 'true' ->
			  let <_cor10> =
			      %% Line 116
			      call 'io_lib':'format'
				  ([78|[111|[110|[45|[119|[104|[105|[116|[101|[32|[115|[112|[97|[99|[101|[32|[102|[111|[117|[110|[100|[32|[97|[102|[116|[101|[114|[32|[101|[110|[100|[45|[111|[102|[45|[102|[111|[114|[109|[32|[58|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 117
																																			       [Rest|[]])
			  in  let <_cor11> =
				  %% Line 116
				  call 'lists':'flatten'
				      (_cor10)
			      in  %% Line 116
				  {'error',_cor11}
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 120
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor14> =
		  %% Line 121
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  %% Line 121
		  apply 'eval_str'/1
		      (_cor14)
	  ( <_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15})
		  -| [{'function_name',{'eval_str',1}}] )
	    -| ['compiler_generated'] )
	end
'all_white'/1 =
    %% Line 123
    fun (_cor0) ->
	case _cor0 of
	  <[32|T]> when 'true' ->
	      apply 'all_white'/1
		  (T)
	  %% Line 124
	  <[10|T]> when 'true' ->
	      apply 'all_white'/1
		  (T)
	  %% Line 125
	  <[9|T]> when 'true' ->
	      apply 'all_white'/1
		  (T)
	  %% Line 126
	  <[]> when 'true' ->
	      'true'
	  %% Line 127
	  <_cor2> when 'true' ->
	      'false'
	end
'format_exception'/6 =
    %% Line 138
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 139
	apply 'format_exception'/7
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0, %% Line 140
						       'latin1')
'format_exception'/7 =
    %% Line 144
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,Class,Reason,StackTrace,StackFun,FormatFun,Encoding>
	      when %% Line 145
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (I)
		    in  let <_cor8> =
			    call 'erlang':'>='
				(I, 1)
			in  let <_cor9> =
				call 'erlang':'is_function'
				    (StackFun, 3)
			    in  let <_cor10> =
				    %% Line 146
				    call 'erlang':'is_function'
					(FormatFun, 2)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 147
		  call 'erlang':'-'
		      (I, 1)
	      in  let <S> =
		      %% Line 147
		      apply 'n_spaces'/1
			  (_cor13)
		  in  %% Line 148
		      case apply 'analyze_exception'/3
			       (Class, Reason, StackTrace) of
			<{Term,Trace1,Trace}> when 'true' ->
			    let <Expl0> =
				%% Line 149
				apply 'explain_reason'/6
				    (Term, Class, Trace1, FormatFun, S, Encoding)
			    in  let <_cor18> =
				    %% Line 150
				    case Encoding of
				      %% Line 151
				      <'latin1'> when 'true' ->
					  [126|[115|[126|[115]]]]
				      %% Line 152
				      <_cor30> when 'true' ->
					  [126|[115|[126|[116|[115]]]]]
				    end
				in  let <_cor20> =
					%% Line 154
					apply 'exited'/1
					    (Class)
				    in  let <Expl> =
					    %% Line 154
					    call 'io_lib':'fwrite'
						(_cor18, [_cor20|[Expl0|[]]])
					in  %% Line 155
					    case apply 'format_stacktrace1'/5
						     (S, Trace, FormatFun, StackFun, Encoding) of
					      %% Line 156
					      <[]> when 'true' ->
						  Expl
					      %% Line 157
					      <Stack> when 'true' ->
						  [Expl|[10|[Stack|[]]]]
					    end
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor15})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'format_exception',7}}] )
	    -| ['compiler_generated'] )
	end
'format_stacktrace'/4 =
    %% Line 161
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 162
	apply 'format_stacktrace'/5
	    (_cor3, _cor2, _cor1, _cor0, 'latin1')
'format_stacktrace'/5 =
    %% Line 165
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,StackTrace,StackFun,FormatFun,Encoding>
	      when %% Line 166
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (I)
		    in  let <_cor6> =
			    call 'erlang':'>='
				(I, 1)
			in  let <_cor7> =
				call 'erlang':'is_function'
				    (StackFun, 3)
			    in  let <_cor8> =
				    %% Line 167
				    call 'erlang':'is_function'
					(FormatFun, 2)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor11> =
		  %% Line 168
		  call 'erlang':'-'
		      (I, 1)
	      in  let <S> =
		      %% Line 168
		      apply 'n_spaces'/1
			  (_cor11)
		  in  %% Line 169
		      apply 'format_stacktrace1'/5
			  (S, StackTrace, FormatFun, StackFun, Encoding)
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'format_stacktrace',5}}] )
	    -| ['compiler_generated'] )
	end
'format_call'/4 =
    %% Line 172
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 173
	apply 'format_call'/5
	    (_cor3, _cor2, _cor1, _cor0, 'latin1')
'format_call'/5 =
    %% Line 176
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,ForMForFun,As,FormatFun,Enc>
	      when %% Line 177
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (I)
		    in  let <_cor6> =
			    call 'erlang':'>='
				(I, 1)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (As)
			    in  let <_cor8> =
				    call 'erlang':'is_function'
					(FormatFun, 2)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor11> =
		  %% Line 178
		  call 'erlang':'-'
		      (I, 1)
	      in  let <_cor12> =
		      %% Line 178
		      apply 'n_spaces'/1
			  (_cor11)
		  in  %% Line 178
		      apply 'format_call'/6
			  ([], _cor12, ForMForFun, As, FormatFun, Enc)
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'format_call',5}}] )
	    -| ['compiler_generated'] )
	end
'format_fun'/1 =
    %% Line 181
    fun (_cor0) ->
	case _cor0 of
	  <Fun>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 182
	      case call 'erlang':'fun_info'
		       (Fun, 'module') of
		<{'module',M}> when 'true' ->
		    %% Line 183
		    case call 'erlang':'fun_info'
			     (Fun, 'name') of
		      <{'name',F}> when 'true' ->
			  %% Line 184
			  case call 'erlang':'fun_info'
				   (Fun, 'arity') of
			    <{'arity',A}> when 'true' ->
				%% Line 185
				case call 'erlang':'fun_info'
					 (Fun, 'type') of
				  %% Line 186
				  <{'type','local'}>
				      when call 'erlang':'=:='
					    (F,
					     []) ->
				      %% Line 187
				      call 'io_lib':'fwrite'
					  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
					     #<119>(8,1,'integer',['unsigned'|['big']])}#, [Fun|[]])
				  %% Line 188
				  <{'type','local'}>
				      when call 'erlang':'=:='
					    (M,
					     'erl_eval') ->
				      %% Line 189
				      call 'io_lib':'fwrite'
					  (#{#<105>(8,1,'integer',['unsigned'|['big']]),
					     #<110>(8,1,'integer',['unsigned'|['big']]),
					     #<116>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<112>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<116>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<100>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<102>(8,1,'integer',['unsigned'|['big']]),
					     #<117>(8,1,'integer',['unsigned'|['big']]),
					     #<110>(8,1,'integer',['unsigned'|['big']]),
					     #<99>(8,1,'integer',['unsigned'|['big']]),
					     #<116>(8,1,'integer',['unsigned'|['big']]),
					     #<105>(8,1,'integer',['unsigned'|['big']]),
					     #<111>(8,1,'integer',['unsigned'|['big']]),
					     #<110>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<119>(8,1,'integer',['unsigned'|['big']]),
					     #<105>(8,1,'integer',['unsigned'|['big']]),
					     #<116>(8,1,'integer',['unsigned'|['big']]),
					     #<104>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<97>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<105>(8,1,'integer',['unsigned'|['big']]),
					     #<116>(8,1,'integer',['unsigned'|['big']]),
					     #<121>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<126>(8,1,'integer',['unsigned'|['big']]),
					     #<119>(8,1,'integer',['unsigned'|['big']])}#, [A|[]])
				  %% Line 190
				  <{'type','local'}> when 'true' ->
				      %% Line 191
				      apply 'mfa_to_string'/3
					  (M, F, A)
				  %% Line 192
				  <{'type','external'}> when 'true' ->
				      %% Line 193
				      apply 'mfa_to_string'/3
					  (M, F, A)
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor4})
				    -| ['compiler_generated'] )
				end
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'format_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'analyze_exception'/3 =
    %% Line 196
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'error',Term,Stack> when 'true' ->
	      let <_cor3> =
		  %% Line 197
		  apply 'is_stacktrace'/1
		      (Stack)
	      in  %% Line 197
		  case <_cor3,Stack,Term> of
		    %% Line 198
		    <'true',[MFAL = {_cor9,_cor10,As,_cor11}|MFAs],'function_clause'>
			when call 'erlang':'is_list'
			      (As) ->
			%% Line 199
			{Term,[MFAL|[]],MFAs}
		    %% Line 200
		    <'true',[{'shell',F,A,_cor12}|[]],'function_clause'>
			when call 'erlang':'is_integer'
			      (A) ->
			%% Line 201
			{Term,[{F,A}|[]],[]}
		    %% Line 202
		    <'true',[MFAL = {_cor13,_cor14,_cor15,_cor16}|MFAs],'undef'> when 'true' ->
			%% Line 203
			{Term,[MFAL|[]],MFAs}
		    %% Line 204
		    <'true',_cor17,_cor18> when 'true' ->
			%% Line 205
			{Term,[],Stack}
		    %% Line 206
		    <'false',_cor19,_cor20> when 'true' ->
			%% Line 207
			{{Term,Stack},[],[]}
		    ( <_fol20,_fol21,_fol22> when 'true' ->
			  let <_cor4> = {_fol20,_fol21,_fol22}
			  in  primop 'match_fail'
				  ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 209
	  <_X_Class,Term,Stack> when 'true' ->
	      %% Line 210
	      case apply 'is_stacktrace'/1
		       (Stack) of
		%% Line 211
		<'true'> when 'true' ->
		    %% Line 212
		    {Term,[],Stack}
		%% Line 213
		<'false'> when 'true' ->
		    %% Line 214
		    {{Term,Stack},[],[]}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'is_stacktrace'/1 =
    %% Line 217
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 218
	      'true'
	  %% Line 219
	  <[{M,F,A,I}|Fs]>
	      when %% Line 220
		try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor2> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor4> =
				    call 'erlang':'is_list'
					(I)
				in  let <_cor5> =
					call 'erlang':'and'
					    (_cor3, _cor4)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor2, _cor5)
					in  call 'erlang':'and'
						(_cor1, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 221
	      apply 'is_stacktrace'/1
		  (Fs)
	  %% Line 222
	  <[{M,F,As,I}|Fs]>
	      when %% Line 223
		try
		    let <_cor7> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor8> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor9> =
				call 'erlang':'length'
				    (As)
			    in  let <_cor10> =
				    call 'erlang':'>='
					(_cor9, 0)
				in  let <_cor11> =
					call 'erlang':'is_list'
					    (I)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor10, _cor11)
					in  let <_cor13> =
						call 'erlang':'and'
						    (_cor8, _cor12)
					    in  call 'erlang':'and'
						    (_cor7, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 224
	      apply 'is_stacktrace'/1
		  (Fs)
	  %% Line 225
	  <_cor15> when 'true' ->
	      %% Line 226
	      'false'
	end
'explain_reason'/6 =
    %% Line 229
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'badarg','error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 230
	      #{#<98>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<103>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 231
	  <{'badarg',V},Cl = 'error',[],PF,S,_X_Enc> when 'true' ->
	      %% Line 232
	      apply 'format_value'/5
		  (V, #{#<98>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<100>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<114>(8,1,'integer',['unsigned'|['big']]),
			#<103>(8,1,'integer',['unsigned'|['big']]),
			#<117>(8,1,'integer',['unsigned'|['big']]),
			#<109>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<110>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<58>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, PF, S)
	  %% Line 233
	  <'badarith','error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 234
	      #{#<97>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<119>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<118>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<103>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<120>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 235
	  <{'badarity',{Fun,As}},'error',[],_X_PF,_X_S,_X_Enc>
	      when %% Line 236
		call 'erlang':'is_function'
		    (Fun) ->
	      let <_cor6> =
		  %% Line 239
		  apply 'format_fun'/1
		      (Fun)
	      in  let <_cor7> =
		      %% Line 239
		      call 'erlang':'length'
			  (As)
		  in  let <_cor8> =
			  %% Line 239
			  apply 'argss'/1
			      (_cor7)
		      in  %% Line 238
			  call 'io_lib':'fwrite'
			      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
				 #<115>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']]),
				 #<99>(8,1,'integer',['unsigned'|['big']]),
				 #<97>(8,1,'integer',['unsigned'|['big']]),
				 #<108>(8,1,'integer',['unsigned'|['big']]),
				 #<108>(8,1,'integer',['unsigned'|['big']]),
				 #<101>(8,1,'integer',['unsigned'|['big']]),
				 #<100>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']]),
				 #<119>(8,1,'integer',['unsigned'|['big']]),
				 #<105>(8,1,'integer',['unsigned'|['big']]),
				 #<116>(8,1,'integer',['unsigned'|['big']]),
				 #<104>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']]),
				 #<126>(8,1,'integer',['unsigned'|['big']]),
				 #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 239
									       [_cor6|[_cor8|[]]])
	  %% Line 240
	  <{'badfun',Term},Cl = 'error',[],PF,S,_X_Enc> when 'true' ->
	      %% Line 241
	      apply 'format_value'/5
		  (Term, #{#<98>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<100>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<102>(8,1,'integer',['unsigned'|['big']]),
			   #<117>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<105>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, PF, S)
	  %% Line 242
	  <{'badmatch',Term},Cl = 'error',[],PF,S,_X_Enc> when 'true' ->
	      %% Line 244
	      apply 'format_value'/5
		  (Term, #{#<110>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<109>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<104>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<102>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<114>(8,1,'integer',['unsigned'|['big']]),
			   #<105>(8,1,'integer',['unsigned'|['big']]),
			   #<103>(8,1,'integer',['unsigned'|['big']]),
			   #<104>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<104>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<100>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<115>(8,1,'integer',['unsigned'|['big']]),
			   #<105>(8,1,'integer',['unsigned'|['big']]),
			   #<100>(8,1,'integer',['unsigned'|['big']]),
			   #<101>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<118>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<108>(8,1,'integer',['unsigned'|['big']]),
			   #<117>(8,1,'integer',['unsigned'|['big']]),
			   #<101>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, PF, S)
	  %% Line 245
	  <{'case_clause',V},Cl = 'error',[],PF,S,_X_Enc> when 'true' ->
	      %% Line 248
	      apply 'format_value'/5
		  (V, #{#<110>(8,1,'integer',['unsigned'|['big']]),
			#<111>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<99>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<115>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<99>(8,1,'integer',['unsigned'|['big']]),
			#<108>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<117>(8,1,'integer',['unsigned'|['big']]),
			#<115>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<109>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<99>(8,1,'integer',['unsigned'|['big']]),
			#<104>(8,1,'integer',['unsigned'|['big']]),
			#<105>(8,1,'integer',['unsigned'|['big']]),
			#<110>(8,1,'integer',['unsigned'|['big']]),
			#<103>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, PF, S)
	  %% Line 249
	  <'function_clause','error',[{F,A}|[]],_X_PF,_X_S,_X_Enc> when 'true' ->
	      let <FAs> =
		  %% Line 251
		  call 'io_lib':'fwrite'
		      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']]),
			 #<47>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']])}#, [F|[A|[]]])
	      in  %% Line 252
		  [#{#<110>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<102>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<99>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<99>(8,1,'integer',['unsigned'|['big']]),
		     #<108>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<115>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<109>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<99>(8,1,'integer',['unsigned'|['big']]),
		     #<104>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<103>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<99>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<108>(8,1,'integer',['unsigned'|['big']]),
		     #<108>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']])}#|FAs]
	  %% Line 253
	  <'function_clause',Cl = 'error',[{M,F,As,Loc}|[]],PF,S,Enc> when 'true' ->
	      let <_cor12> =
		  %% Line 255
		  apply 'format_errstr_call'/7
		      (#{#<110>(8,1,'integer',['unsigned'|['big']]),
			 #<111>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<102>(8,1,'integer',['unsigned'|['big']]),
			 #<117>(8,1,'integer',['unsigned'|['big']]),
			 #<110>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<116>(8,1,'integer',['unsigned'|['big']]),
			 #<105>(8,1,'integer',['unsigned'|['big']]),
			 #<111>(8,1,'integer',['unsigned'|['big']]),
			 #<110>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<108>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<117>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<109>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<116>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<104>(8,1,'integer',['unsigned'|['big']]),
			 #<105>(8,1,'integer',['unsigned'|['big']]),
			 #<110>(8,1,'integer',['unsigned'|['big']]),
			 #<103>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, {M,F}, As, PF, S, Enc)
	      in  let <_cor13> =
		      %% Line 255
		      apply 'location'/1
			  (Loc)
		  in  %% Line 255
		      [_cor12|[32|_cor13]]
	  %% Line 256
	  <'if_clause','error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 257
	      #{#<110>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<98>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<102>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<119>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<118>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<103>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<102>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<120>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 258
	  <'noproc','error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 259
	      #{#<110>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 260
	  <'notalive','error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 261
	      #{#<116>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<98>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<102>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<98>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<121>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 262
	  <'system_limit','error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 263
	      #{#<97>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<121>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<98>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 264
	  <'timeout_value','error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 265
	      #{#<98>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<118>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<118>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 266
	  <{'try_clause',V},Cl = 'error',[],PF,S,_X_Enc> when 'true' ->
	      %% Line 269
	      apply 'format_value'/5
		  (V, #{#<110>(8,1,'integer',['unsigned'|['big']]),
			#<111>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<114>(8,1,'integer',['unsigned'|['big']]),
			#<121>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<99>(8,1,'integer',['unsigned'|['big']]),
			#<108>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<117>(8,1,'integer',['unsigned'|['big']]),
			#<115>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<109>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<99>(8,1,'integer',['unsigned'|['big']]),
			#<104>(8,1,'integer',['unsigned'|['big']]),
			#<105>(8,1,'integer',['unsigned'|['big']]),
			#<110>(8,1,'integer',['unsigned'|['big']]),
			#<103>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, PF, S)
	  %% Line 270
	  <'undef','error',[{M,F,A,_cor29}|[]],_X_PF,_X_S,_X_Enc> when 'true' ->
	      let <_cor14> =
		  %% Line 273
		  apply 'n_args'/1
		      (A)
	      in  let <_cor15> =
		      %% Line 273
		      apply 'mfa_to_string'/3
			  (M, F, _cor14)
		  in  %% Line 272
		      call 'io_lib':'fwrite'
			  (#{#<117>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<100>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<102>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<100>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<102>(8,1,'integer',['unsigned'|['big']]),
			     #<117>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<111>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 273
									   [_cor15|[]])
	  %% Line 274
	  <{'shell_undef',F,A,_cor30},'error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      let <_cor16> =
		  %% Line 277
		  apply 'n_args'/1
		      (A)
	      in  %% Line 277
		  call 'io_lib':'fwrite'
		      (#{#<117>(8,1,'integer',['unsigned'|['big']]),
			 #<110>(8,1,'integer',['unsigned'|['big']]),
			 #<100>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<102>(8,1,'integer',['unsigned'|['big']]),
			 #<105>(8,1,'integer',['unsigned'|['big']]),
			 #<110>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<100>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<104>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<108>(8,1,'integer',['unsigned'|['big']]),
			 #<108>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<111>(8,1,'integer',['unsigned'|['big']]),
			 #<109>(8,1,'integer',['unsigned'|['big']]),
			 #<109>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<110>(8,1,'integer',['unsigned'|['big']]),
			 #<100>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<47>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']])}#, [F|[_cor16|[]]])
	  %% Line 279
	  <{'argument_limit',_X_Fun},'error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 280
	      call 'io_lib':'fwrite'
		  (#{#<108>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<109>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<102>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<109>(8,1,'integer',['unsigned'|['big']]),
		     #<98>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<102>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<103>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<109>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<115>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<112>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<100>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<102>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<99>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<120>(8,1,'integer',['unsigned'|['big']]),
		     #<99>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<100>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<100>(8,1,'integer',['unsigned'|['big']])}#, %% Line 281
								   [])
	  %% Line 282
	  <{'bad_filter',V},Cl = 'error',[],PF,S,_X_Enc> when 'true' ->
	      %% Line 283
	      apply 'format_value'/5
		  (V, #{#<98>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<100>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<102>(8,1,'integer',['unsigned'|['big']]),
			#<105>(8,1,'integer',['unsigned'|['big']]),
			#<108>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<114>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, PF, S)
	  %% Line 284
	  <{'bad_generator',V},Cl = 'error',[],PF,S,_X_Enc> when 'true' ->
	      %% Line 285
	      apply 'format_value'/5
		  (V, #{#<98>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<100>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<103>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<110>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<114>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<111>(8,1,'integer',['unsigned'|['big']]),
			#<114>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, PF, S)
	  %% Line 286
	  <{'unbound',V},'error',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 287
	      call 'io_lib':'fwrite'
		  (#{#<118>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<98>(8,1,'integer',['unsigned'|['big']]),
		     #<108>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<126>(8,1,'integer',['unsigned'|['big']]),
		     #<119>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<115>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<98>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<100>(8,1,'integer',['unsigned'|['big']])}#, [V|[]])
	  %% Line 289
	  <{'restricted_shell_bad_return',V},Cl = 'exit',[],PF,S,_X_Enc> when 'true' ->
	      %% Line 291
	      apply 'format_value'/5
		  (V, #{#<114>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<115>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<114>(8,1,'integer',['unsigned'|['big']]),
			#<105>(8,1,'integer',['unsigned'|['big']]),
			#<99>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<100>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<115>(8,1,'integer',['unsigned'|['big']]),
			#<104>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<108>(8,1,'integer',['unsigned'|['big']]),
			#<108>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<109>(8,1,'integer',['unsigned'|['big']]),
			#<111>(8,1,'integer',['unsigned'|['big']]),
			#<100>(8,1,'integer',['unsigned'|['big']]),
			#<117>(8,1,'integer',['unsigned'|['big']]),
			#<108>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<114>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<116>(8,1,'integer',['unsigned'|['big']]),
			#<117>(8,1,'integer',['unsigned'|['big']]),
			#<114>(8,1,'integer',['unsigned'|['big']]),
			#<110>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<100>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<98>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<100>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']]),
			#<118>(8,1,'integer',['unsigned'|['big']]),
			#<97>(8,1,'integer',['unsigned'|['big']]),
			#<108>(8,1,'integer',['unsigned'|['big']]),
			#<117>(8,1,'integer',['unsigned'|['big']]),
			#<101>(8,1,'integer',['unsigned'|['big']]),
			#<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, PF, S)
	  %% Line 292
	  <{'restricted_shell_disallowed',{ForMF,As}},Cl = %% Line 293
							   'exit',%% Line 293
								  [],%% Line 293
								     PF,%% Line 293
									S,%% Line 293
									  Enc> when 'true' ->
	      %% Line 296
	      apply 'format_errstr_call'/7
		  (#{#<114>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<115>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<105>(8,1,'integer',['unsigned'|['big']]),
		     #<99>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<100>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<115>(8,1,'integer',['unsigned'|['big']]),
		     #<104>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<108>(8,1,'integer',['unsigned'|['big']]),
		     #<108>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<100>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<115>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<108>(8,1,'integer',['unsigned'|['big']]),
		     #<108>(8,1,'integer',['unsigned'|['big']]),
		     #<111>(8,1,'integer',['unsigned'|['big']]),
		     #<119>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']])}#, Cl, ForMF, As, PF, S, Enc)
	  %% Line 297
	  <'restricted_shell_started','exit',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 298
	      #{#<114>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<119>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 299
	  <'restricted_shell_stopped','exit',[],_X_PF,_X_S,_X_Enc> when 'true' ->
	      %% Line 300
	      #{#<114>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<100>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 302
	  <Reason,Class,[],PF,S,_X_Enc> when 'true' ->
	      let <_cor20> =
		  %% Line 303
		  call 'erlang':'iolist_size'
		      (S)
	      in  let <_cor21> =
		      %% Line 303
		      call 'erlang':'+'
			  (_cor20, 1)
		  in  let <_cor19> =
			  %% Line 303
			  apply 'exited_size'/1
			      (Class)
		      in  let <_cor22> =
			      %% Line 303
			      call 'erlang':'+'
				  (_cor21, _cor19)
			  in  %% Line 303
			      apply PF
				  (Reason, _cor22)
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'explain_reason',6}}] )
	    -| ['compiler_generated'] )
	end
'n_args'/1 =
    %% Line 305
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 306
	      A
	  %% Line 307
	  <As>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 308
	      call 'erlang':'length'
		  (As)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'n_args',1}}] )
	    -| ['compiler_generated'] )
	end
'argss'/1 =
    %% Line 310
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      %% Line 311
	      #{#<110>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<103>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 312
	  <1> when 'true' ->
	      %% Line 313
	      #{#<111>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<103>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 314
	  <2> when 'true' ->
	      %% Line 315
	      #{#<116>(8,1,'integer',['unsigned'|['big']]),
		#<119>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<103>(8,1,'integer',['unsigned'|['big']]),
		#<117>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<115>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 316
	  <I> when 'true' ->
	      %% Line 317
	      call 'io_lib':'fwrite'
		  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
		     #<119>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']]),
		     #<97>(8,1,'integer',['unsigned'|['big']]),
		     #<114>(8,1,'integer',['unsigned'|['big']]),
		     #<103>(8,1,'integer',['unsigned'|['big']]),
		     #<117>(8,1,'integer',['unsigned'|['big']]),
		     #<109>(8,1,'integer',['unsigned'|['big']]),
		     #<101>(8,1,'integer',['unsigned'|['big']]),
		     #<110>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<115>(8,1,'integer',['unsigned'|['big']])}#, [I|[]])
	end
'format_stacktrace1'/5 =
    %% Line 319
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 320
	    ( fun (_cor6) ->
		  case _cor6 of
		    <{M,F,A,_cor17}> when 'true' ->
			apply _cor1
			    (M, F, A)
		    ( <_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor7})
			    -| [{'function_name',{'-format_stacktrace1/5-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-format_stacktrace1/5-fun-0-'}}] )
	in  let <_cor5> =
		%% Line 321
		call 'lists':'reverse'
		    (_cor3)
	    in  let <Stack1> =
		    %% Line 320
		    call 'lists':'dropwhile'
			(_cor8, _cor5)
		in  let <S> =
			%% Line 322
			[[32|[32]]|_cor4]
		    in  let <Stack> =
			    %% Line 323
			    call 'lists':'reverse'
				(Stack1)
			in  %% Line 324
			    apply 'format_stacktrace2'/5
				(S, Stack, 1, _cor2, _cor0)
'format_stacktrace2'/5 =
    %% Line 326
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,[{M,F,A,L}|Fs],N,PF,Enc>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_cor5> =
		  %% Line 328
		  apply 'sep'/2
		      (N, S)
	      in  let <_cor6> =
		      %% Line 328
		      apply 'origin'/4
			  (N, M, F, A)
		  in  let <_cor7> =
			  %% Line 329
			  apply 'mfa_to_string'/3
			      (M, F, A)
		      in  let <_cor8> =
			      %% Line 330
			      apply 'location'/1
				  (L)
			  in  let <_cor9> =
				  %% Line 327
				  call 'io_lib':'fwrite'
				      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
					 #<115>(8,1,'integer',['unsigned'|['big']]),
					 #<126>(8,1,'integer',['unsigned'|['big']]),
					 #<115>(8,1,'integer',['unsigned'|['big']]),
					 #<32>(8,1,'integer',['unsigned'|['big']]),
					 #<126>(8,1,'integer',['unsigned'|['big']]),
					 #<115>(8,1,'integer',['unsigned'|['big']]),
					 #<32>(8,1,'integer',['unsigned'|['big']]),
					 #<126>(8,1,'integer',['unsigned'|['big']]),
					 #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 328
										       [_cor5|[_cor6|%% Line 329
												     [_cor7|%% Line 330
													    [_cor8|[]]]]])
			      in  let <_cor10> =
				      %% Line 331
				      call 'erlang':'+'
					  (N, 1)
				  in  let <_cor11> =
					  %% Line 331
					  apply 'format_stacktrace2'/5
					      (S, Fs, _cor10, PF, Enc)
				      in  %% Line 327
					  [_cor9|_cor11]
	  %% Line 332
	  <S,[{M,F,As,_cor26}|Fs],N,PF,Enc>
	      when call 'erlang':'is_list'
		    (As) ->
	      let <A> =
		  %% Line 333
		  call 'erlang':'length'
		      (As)
	      in  let <CalledAs> =
		      %% Line 334
		      [S|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
			    #<32>(8,1,'integer',['unsigned'|['big']]),
			    #<32>(8,1,'integer',['unsigned'|['big']]),
			    #<99>(8,1,'integer',['unsigned'|['big']]),
			    #<97>(8,1,'integer',['unsigned'|['big']]),
			    #<108>(8,1,'integer',['unsigned'|['big']]),
			    #<108>(8,1,'integer',['unsigned'|['big']]),
			    #<101>(8,1,'integer',['unsigned'|['big']]),
			    #<100>(8,1,'integer',['unsigned'|['big']]),
			    #<32>(8,1,'integer',['unsigned'|['big']]),
			    #<97>(8,1,'integer',['unsigned'|['big']]),
			    #<115>(8,1,'integer',['unsigned'|['big']]),
			    #<32>(8,1,'integer',['unsigned'|['big']])}#]]
		  in  let <C> =
			  %% Line 335
			  apply 'format_call'/6
			      ([], CalledAs, {M,F}, As, PF, Enc)
		      in  let <_cor15> =
			      %% Line 337
			      apply 'sep'/2
				  (N, S)
			  in  let <_cor16> =
				  %% Line 337
				  apply 'origin'/4
				      (N, M, F, A)
			      in  let <_cor17> =
				      %% Line 337
				      apply 'mfa_to_string'/3
					  (M, F, A)
				  in  let <_cor18> =
					  %% Line 336
					  call 'io_lib':'fwrite'
					      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']]),
						 #<126>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']]),
						 #<32>(8,1,'integer',['unsigned'|['big']]),
						 #<126>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']]),
						 #<10>(8,1,'integer',['unsigned'|['big']]),
						 #<126>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']]),
						 #<126>(8,1,'integer',['unsigned'|['big']]),
						 #<116>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 337
											       [_cor15|[_cor16|[_cor17|%% Line 338
														       [CalledAs|[C|[]]]]]])
				      in  let <_cor19> =
					      %% Line 339
					      call 'erlang':'+'
						  (N, 1)
					  in  let <_cor20> =
						  %% Line 339
						  apply 'format_stacktrace2'/5
						      (S, Fs, _cor19, PF, Enc)
					      in  %% Line 336
						  [_cor18|_cor20]
	  %% Line 340
	  <_X_S,[],_X_N,_X_PF,_X_Enc> when 'true' ->
	      %% Line 341
	      []
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'format_stacktrace2',5}}] )
	    -| ['compiler_generated'] )
	end
'location'/1 =
    %% Line 343
    fun (_cor0) ->
	let <File> =
	    %% Line 344
	    call 'proplists':'get_value'
		('file', _cor0)
	in  let <Line> =
		%% Line 345
		call 'proplists':'get_value'
		    ('line', _cor0)
	    in  %% Line 346
		case <> of
		  %% Line 347
		  <>
		      when let <_cor3> =
			    call 'erlang':'=/='
				(File, 'undefined')
			in  let <_cor4> =
				call 'erlang':'=/='
				    (Line, 'undefined')
			    in  call 'erlang':'and'
				    (_cor3, _cor4) ->
		      %% Line 348
		      call 'io_lib':'format'
			  ([40|[126|[115|[44|[32|[108|[105|[110|[101|[32|[126|[119|[41]]]]]]]]]]]]], [File|[Line|[]]])
		  %% Line 349
		  <> when 'true' ->
		      %% Line 350
		      []
		end
'sep'/2 =
    %% Line 353
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,S> when 'true' ->
	      S
	  %% Line 354
	  <_cor4,S> when 'true' ->
	      [10|S]
	end
'origin'/4 =
    %% Line 356
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <1,M,F,A> when 'true' ->
	      let <_cor4> =
		  %% Line 357
		  apply 'n_args'/1
		      (A)
	      in  %% Line 357
		  case apply 'is_op'/2
			   ({M,F}, _cor4) of
		    %% Line 358
		    <{'yes',_cor10}>
			when call 'erlang':'=:='
			      (_cor10,
			       F) ->
			#{#<105>(8,1,'integer',['unsigned'|['big']]),
			  #<110>(8,1,'integer',['unsigned'|['big']]),
			  #<32>(8,1,'integer',['unsigned'|['big']]),
			  #<111>(8,1,'integer',['unsigned'|['big']]),
			  #<112>(8,1,'integer',['unsigned'|['big']]),
			  #<101>(8,1,'integer',['unsigned'|['big']]),
			  #<114>(8,1,'integer',['unsigned'|['big']]),
			  #<97>(8,1,'integer',['unsigned'|['big']]),
			  #<116>(8,1,'integer',['unsigned'|['big']]),
			  #<111>(8,1,'integer',['unsigned'|['big']]),
			  #<114>(8,1,'integer',['unsigned'|['big']]),
			  #<32>(8,1,'integer',['unsigned'|['big']])}#
		    %% Line 359
		    <'no'> when 'true' ->
			#{#<105>(8,1,'integer',['unsigned'|['big']]),
			  #<110>(8,1,'integer',['unsigned'|['big']]),
			  #<32>(8,1,'integer',['unsigned'|['big']]),
			  #<102>(8,1,'integer',['unsigned'|['big']]),
			  #<117>(8,1,'integer',['unsigned'|['big']]),
			  #<110>(8,1,'integer',['unsigned'|['big']]),
			  #<99>(8,1,'integer',['unsigned'|['big']]),
			  #<116>(8,1,'integer',['unsigned'|['big']]),
			  #<105>(8,1,'integer',['unsigned'|['big']]),
			  #<111>(8,1,'integer',['unsigned'|['big']]),
			  #<110>(8,1,'integer',['unsigned'|['big']]),
			  #<32>(8,1,'integer',['unsigned'|['big']])}#
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 361
	  <_X_N,_X_M,_X_F,_X_A> when 'true' ->
	      %% Line 362
	      #{#<105>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<97>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<108>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<102>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<109>(8,1,'integer',['unsigned'|['big']])}#
	end
'format_errstr_call'/7 =
    %% Line 364
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 365
	    apply 'exited_size'/1
		(_cor5)
	in  let <_cor8> =
		%% Line 365
		apply 'n_spaces'/1
		    (_cor7)
	    in  let <Pre1> =
		    %% Line 365
		    [_cor1|_cor8]
		in  %% Line 366
		    apply 'format_call'/6
			(_cor6, Pre1, _cor4, _cor3, _cor2, _cor0)
'format_call'/6 =
    %% Line 368
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Arity> =
	    %% Line 369
	    call 'erlang':'length'
		(_cor2)
	in  let <_cor20> =
		%% Line 371
		case apply 'is_op'/2
			 (_cor3, Arity) of
		  %% Line 372
		  <{'yes',Op}> when 'true' ->
		      %% Line 373
		      apply 'format_op'/6
			  (_cor5, _cor4, Op, _cor2, _cor1, _cor0)
		  %% Line 374
		  <'no'> when 'true' ->
		      let <MFs> =
			  %% Line 375
			  apply 'mf_to_string'/2
			      (_cor3, Arity)
		      in  let <I1> =
			      %% Line 376
			      call 'erlang':'iolist_size'
				  ([_cor4|[_cor5|MFs]])
			  in  let <S1> =
				  %% Line 377
				  apply 'pp_arguments'/4
				      (_cor1, _cor2, I1, _cor0)
			      in  let <_cor10> =
				      %% Line 378
				      call 'erlang':'iolist_size'
					  ([_cor4|MFs])
				  in  let <S2> =
					  %% Line 378
					  apply 'pp_arguments'/4
					      (_cor1, _cor2, _cor10, _cor0)
				      in  let <_cor12> =
					      %% Line 379
					      apply 'pp_arguments'/4
						  (_cor1, ['a2345'|['b2345']], I1, _cor0)
					  in  let <_cor13> =
						  %% Line 379
						  apply 'count_nl'/1
						      (_cor12)
					      in  let <Long> =
						      %% Line 379
						      call 'erlang':'>'
							  (_cor13, 0)
						  in  let <_cor16> =
							  %% Line 380
							  apply 'count_nl'/1
							      (S2)
						      in  let <_cor15> =
							      %% Line 380
							      apply 'count_nl'/1
								  (S1)
							  in  let <_cor17> =
								  %% Line 380
								  call 'erlang':'<'
								      (_cor16, _cor15)
							      in  %% Line 380
								  case call 'erlang':'or'
									   (Long, _cor17) of
								    %% Line 381
								    <'true'> when 'true' ->
									%% Line 382
									[10|[_cor4|[MFs|[S2|[]]]]]
								    %% Line 383
								    <'false'> when 'true' ->
									%% Line 384
									[MFs|[S1|[]]]
								  end
		  ( <_cor19> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor19})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 370
		[_cor5|_cor20]
'format_op'/6 =
    %% Line 388
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ErrStr,Pre,Op,[A1|[]],PF,_X_Enc> when 'true' ->
	      let <OpS> =
		  %% Line 389
		  call 'io_lib':'fwrite'
		      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']])}#, [Op|[]])
	      in  let <I1> =
		      %% Line 390
		      call 'erlang':'iolist_size'
			  ([ErrStr|[Pre|[OpS|[]]]])
		  in  let <_cor8> =
			  %% Line 391
			  call 'erlang':'+'
			      (I1, 1)
		      in  let <_cor9> =
			      %% Line 391
			      apply PF
				  (A1, _cor8)
			  in  %% Line 391
			      [OpS|_cor9]
	  %% Line 392
	  <ErrStr,Pre,Op,[A1|[A2|[]]],PF,Enc> when 'true' ->
	      let <I1> =
		  %% Line 393
		  call 'erlang':'iolist_size'
		      ([ErrStr|[Pre|[]]])
	      in  let <_cor11> =
		      %% Line 394
		      call 'erlang':'+'
			  (I1, 1)
		  in  let <S1> =
			  %% Line 394
			  apply PF
			      (A1, _cor11)
		      in  let <_cor13> =
			      %% Line 395
			      call 'erlang':'+'
				  (I1, 1)
			  in  let <S2> =
				  %% Line 395
				  apply PF
				      (A2, _cor13)
			      in  let <OpS> =
				      %% Line 396
				      call 'erlang':'atom_to_list'
					  (Op)
				  in  let <_cor16> =
					  %% Line 397
					  apply 'n_spaces'/1
					      (I1)
				      in  let <Pre1> =
					      %% Line 397
					      [10|_cor16]
					  in  let <_cor18> =
						  %% Line 398
						  apply 'count_nl'/1
						      (S1)
					      in  %% Line 398
						  case <> of
						    %% Line 399
						    <>
							when call 'erlang':'>'
							      (_cor18,
							       0) ->
							%% Line 400
							[S1|[Pre1|[OpS|[Pre1|S2]]]]
						    %% Line 401
						    <> when 'true' ->
							let <OpS2> =
							    %% Line 402
							    call 'io_lib':'fwrite'
								(#{#<32>(8,1,'integer',['unsigned'|['big']]),
								   #<126>(8,1,'integer',['unsigned'|['big']]),
								   #<115>(8,1,'integer',['unsigned'|['big']]),
								   #<32>(8,1,'integer',['unsigned'|['big']])}#, [Op|[]])
							in  let <Size1> =
								%% Line 403
								call 'erlang':'iolist_size'
								    ([ErrStr|[Pre|OpS2]])
							    in  %% Line 404
								case apply 'size'/2
									 (Enc, S1) of
								  <{Size2,S1_2}> when 'true' ->
								      let <_cor22> =
									  %% Line 405
									  call 'erlang':'+'
									      (Size1, Size2)
								      in  let <_cor23> =
									      %% Line 405
									      call 'erlang':'+'
										  (_cor22, 1)
									  in  let <S2_2> =
										  %% Line 405
										  apply PF
										      (A2, _cor23)
									      in  let <_cor26> =
										      %% Line 406
										      apply 'count_nl'/1
											  (S2)
										  in  let <_cor25> =
											  %% Line 406
											  apply 'count_nl'/1
											      (S2_2)
										      in  %% Line 406
											  case <> of
											    %% Line 407
											    <>
												when call 'erlang':'<'
												      (_cor26,
												       _cor25) ->
												%% Line 408
												[S1_2|[Pre1|[OpS|[Pre1|S2]]]]
											    %% Line 409
											    <> when 'true' ->
												%% Line 410
												[S1_2|[OpS2|S2_2]]
											  end
								  ( <_cor21> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor21})
								    -| ['compiler_generated'] )
								end
						  end
	  ( <_cor34,_cor33,_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'format_op',6}}] )
	    -| ['compiler_generated'] )
	end
'pp_arguments'/4 =
    %% Line 414
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 415
	    apply 'printable_list'/2
		(_cor0, _cor2)
	in  %% Line 415
	    case <_cor2,_cor4> of
	      %% Line 416
	      <[Int|T],'true'> when 'true' ->
		  let <L> =
		      %% Line 417
		      call 'erlang':'integer_to_list'
			  (Int)
		  in  let <Ll> =
			  %% Line 418
			  call 'erlang':'length'
			      (L)
		      in  let <_cor7> =
			      %% Line 419
			      call 'lists':'duplicate'
				  (Ll, 97)
			  in  let <A> =
				  %% Line 419
				  call 'erlang':'list_to_atom'
				      (_cor7)
			      in  let <_cor9> =
				      %% Line 420
				      call 'erlang':'+'
					  (_cor1, 1)
				  in  let <_cor10> =
					  %% Line 420
					  apply _cor3
					      ([A|T], _cor9)
				      in  let <S0> =
					      %% Line 420
					      call 'unicode':'characters_to_list'
						  (_cor10, _cor0)
					  in  let <_cor12> =
						  %% Line 421
						  call 'erlang':'+'
						      (2, Ll)
					      in  let <_cor13> =
						      %% Line 421
						      call 'string':'sub_string'
							  (S0, _cor12)
						  in  %% Line 421
						      apply 'brackets_to_parens'/2
							  ([91|[L|[_cor13|[]]]], _cor0)
	      %% Line 422
	      <_fol42,_fol43> when 'true' ->
		  let <_cor14> =
		      %% Line 423
		      call 'erlang':'+'
			  (_cor1, 1)
		  in  let <_cor15> =
			  %% Line 423
			  apply _cor3
			      (_cor2, _cor14)
		      in  %% Line 423
			  apply 'brackets_to_parens'/2
			      (_cor15, _cor0)
	    end
'brackets_to_parens'/2 =
    %% Line 426
    fun (_cor1,_cor0) ->
	let <B> =
	    %% Line 427
	    call 'unicode':'characters_to_binary'
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 428
		call 'erlang':'byte_size'
		    (B)
	    in  let <Sz> =
		    %% Line 428
		    call 'erlang':'-'
			(_cor3, 2)
		in  %% Line 429
		    case ( B
			   -| ['reuse_for_context'] ) of
		      <#{#<91>(8,1,'integer',['unsigned'|['big']]),
			 #<R>(Sz,8,'binary',['unsigned'|['big']]),
			 #<93>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 430
			  [40|[R|[41]]]
		      ( <_cor5> when 'true' ->
			    do  primop 'bs_context_to_binary'
				    (_cor5)
				primop 'match_fail'
				    ({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
'printable_list'/2 =
    %% Line 432
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'latin1',As> when 'true' ->
	      %% Line 433
	      call 'io_lib':'printable_latin1_list'
		  (As)
	  %% Line 434
	  <_cor4,As> when 'true' ->
	      %% Line 435
	      call 'io_lib':'printable_list'
		  (As)
	end
'mfa_to_string'/3 =
    %% Line 437
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 438
	    apply 'mf_to_string'/2
		({_cor2,_cor1}, _cor0)
	in  %% Line 438
	    call 'io_lib':'fwrite'
		(#{#<126>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<126>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']])}#, [_cor3|[_cor0|[]]])
'mf_to_string'/2 =
    %% Line 440
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{M,F},A> when 'true' ->
	      %% Line 441
	      case call 'erl_internal':'bif'
		       (M, F, A) of
		%% Line 442
		<'true'> when 'true' ->
		    %% Line 443
		    call 'io_lib':'fwrite'
			(#{#<126>(8,1,'integer',['unsigned'|['big']]),
			   #<119>(8,1,'integer',['unsigned'|['big']])}#, [F|[]])
		%% Line 444
		<'false'> when 'true' ->
		    %% Line 445
		    case apply 'is_op'/2
			     ({M,F}, A) of
		      %% Line 446
		      <{'yes','/'}> when 'true' ->
			  %% Line 447
			  call 'io_lib':'fwrite'
			      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
				 #<119>(8,1,'integer',['unsigned'|['big']])}#, [F|[]])
		      %% Line 448
		      <{'yes',_cor6}>
			  when call 'erlang':'=:='
				(_cor6,
				 F) ->
			  %% Line 449
			  call 'erlang':'atom_to_list'
			      (F)
		      %% Line 450
		      <'no'> when 'true' ->
			  %% Line 451
			  call 'io_lib':'fwrite'
			      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
				 #<119>(8,1,'integer',['unsigned'|['big']]),
				 #<58>(8,1,'integer',['unsigned'|['big']]),
				 #<126>(8,1,'integer',['unsigned'|['big']]),
				 #<119>(8,1,'integer',['unsigned'|['big']])}#, [M|[F|[]]])
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 454
	  <Fun,_X_A>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 455
	      apply 'format_fun'/1
		  (Fun)
	  %% Line 456
	  <F,_X_A> when 'true' ->
	      %% Line 457
	      call 'io_lib':'fwrite'
		  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
		     #<119>(8,1,'integer',['unsigned'|['big']])}#, [F|[]])
	end
'format_value'/5 =
    %% Line 459
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Pre1Sz> =
	    %% Line 460
	    apply 'exited_size'/1
		(_cor2)
	in  let <_cor6> =
		%% Line 461
		call 'erlang':'iolist_size'
		    ([_cor0|[_cor3|[]]])
	    in  let <_cor7> =
		    %% Line 461
		    call 'erlang':'+'
			(Pre1Sz, _cor6)
		in  let <_cor8> =
			%% Line 461
			call 'erlang':'+'
			    (_cor7, 1)
		    in  let <S1> =
			    %% Line 461
			    apply _cor1
				(_cor4, _cor8)
			in  let <_cor18> =
				%% Line 462
				case apply 'count_nl'/1
					 (S1) of
				  %% Line 463
				  <N1>
				      when call 'erlang':'>'
					    (N1,
					     1) ->
				      let <_cor10> =
					  %% Line 464
					  call 'erlang':'iolist_size'
					      (_cor0)
				      in  let <_cor11> =
					      %% Line 464
					      call 'erlang':'+'
						  (_cor10, 1)
					  in  let <_cor12> =
						  %% Line 464
						  call 'erlang':'+'
						      (_cor11, Pre1Sz)
					      in  let <S2> =
						      %% Line 464
						      apply _cor1
							  (_cor4, _cor12)
						  in  let <_cor14> =
							  %% Line 465
							  apply 'count_nl'/1
							      (S2)
						      in  %% Line 465
							  case <> of
							    %% Line 466
							    <>
								when call 'erlang':'<'
								      (_cor14,
								       N1) ->
								let <_cor15> =
								    %% Line 467
								    apply 'n_spaces'/1
									(Pre1Sz)
								in  %% Line 467
								    [10|[_cor0|[_cor15|S2]]]
							    %% Line 468
							    <> when 'true' ->
								%% Line 469
								S1
							  end
				  %% Line 471
				  <_cor24> when 'true' ->
				      %% Line 472
				      S1
				end
			    in  %% Line 462
				[_cor3|_cor18]
'count_nl'/1 =
    %% Line 476
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor2> =
		  %% Line 477
		  apply 'count_nl'/1
		      (E)
	      in  let <_cor1> =
		      %% Line 477
		      apply 'count_nl'/1
			  (Es)
		  in  %% Line 477
		      call 'erlang':'+'
			  (_cor2, _cor1)
	  %% Line 478
	  <10> when 'true' ->
	      %% Line 479
	      1
	  %% Line 480
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 481
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  %% Line 481
		  apply 'count_nl'/1
		      (_cor3)
	  %% Line 482
	  <_cor5> when 'true' ->
	      %% Line 483
	      0
	end
'n_spaces'/1 =
    %% Line 485
    fun (_cor0) ->
	%% Line 486
	call 'lists':'duplicate'
	    (_cor0, 32)
'is_op'/2 =
    %% Line 488
    fun (_cor1,_cor0) ->
	%% Line 489
	try
	    %% Line 490
	    case _cor1 of
	      <{'erlang',F}> when 'true' ->
		  let <_X_> =
		      %% Line 491
		      ( call 'erl_internal':'op_type'
			    (F, _cor0)
			-| ['result_not_wanted'] )
		  in  %% Line 492
		      {'yes',F}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
	of <_cor4> ->
	    _cor4
	catch <_cor7,_cor6,_cor5> ->
	    case <_cor7,_cor6,_cor5> of
	      %% Line 493
	      <'error',_cor10,_cor11> when 'true' ->
		  'no'
	      ( <_cor7,_cor6,_cor5> when 'true' ->
		    primop 'raise'
			(_cor5, _cor6)
		-| ['compiler_generated'] )
	    end
'exited_size'/1 =
    %% Line 496
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 497
	    apply 'exited'/1
		(_cor0)
	in  %% Line 497
	    call 'erlang':'iolist_size'
		(_cor1)
'exited'/1 =
    %% Line 499
    fun (_cor0) ->
	case _cor0 of
	  <'error'> when 'true' ->
	      %% Line 500
	      #{#<101>(8,1,'integer',['unsigned'|['big']]),
		#<120>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<58>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 501
	  <'exit'> when 'true' ->
	      %% Line 502
	      #{#<101>(8,1,'integer',['unsigned'|['big']]),
		#<120>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<120>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<58>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 503
	  <'throw'> when 'true' ->
	      %% Line 504
	      #{#<101>(8,1,'integer',['unsigned'|['big']]),
		#<120>(8,1,'integer',['unsigned'|['big']]),
		#<99>(8,1,'integer',['unsigned'|['big']]),
		#<101>(8,1,'integer',['unsigned'|['big']]),
		#<112>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<105>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<110>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']]),
		#<116>(8,1,'integer',['unsigned'|['big']]),
		#<104>(8,1,'integer',['unsigned'|['big']]),
		#<114>(8,1,'integer',['unsigned'|['big']]),
		#<111>(8,1,'integer',['unsigned'|['big']]),
		#<119>(8,1,'integer',['unsigned'|['big']]),
		#<58>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'exited',1}}] )
	    -| ['compiler_generated'] )
	end
'size'/2 =
    %% Line 506
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'latin1',S> when 'true' ->
	      let <_cor2> =
		  %% Line 507
		  call 'erlang':'iolist_size'
		      (S)
	      in  %% Line 507
		  {_cor2,S}
	  %% Line 508
	  <_cor8,S0> when 'true' ->
	      let <S> =
		  %% Line 509
		  call 'unicode':'characters_to_list'
		      (S0, 'unicode')
	      in  %% Line 510
		  case call 'erlang':'is_list'
			   (S) of
		    <'true'> when 'true' ->
			let <_cor5> =
			    %% Line 511
			    call 'erlang':'length'
				(S)
			in  %% Line 511
			    {_cor5,S}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('lib', _cor0)
end