module 'orddict' ['append'/3,
		  'append_list'/3,
		  'erase'/2,
		  'fetch'/2,
		  'fetch_keys'/1,
		  'filter'/2,
		  'find'/2,
		  'fold'/3,
		  'from_list'/1,
		  'is_empty'/1,
		  'is_key'/2,
		  'map'/2,
		  'merge'/3,
		  'module_info'/0,
		  'module_info'/1,
		  'new'/0,
		  'size'/1,
		  'store'/3,
		  'to_list'/1,
		  'update'/3,
		  'update'/4,
		  'update_counter'/3]
    attributes [%% Line 28
		'export_type' =
		    %% Line 28
		    [{'orddict',0}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{'orddict',{'type',32,'list',[{'type',32,'tuple',[{'ann_type',32,[{'var',32,'Key'}|[{'type',32,'term',[]}]]}|[{'ann_type',32,[{'var',32,'Value'}|[{'type',32,'term',[]}]]}]]}]},[]}],
		%% Line 36
		'spec' =
		    %% Line 36
		    [{{'new',0},[{'type',36,'fun',[{'type',36,'product',[]}|[{'type',36,'orddict',[]}]]}]}],
		%% Line 40
		'spec' =
		    %% Line 40
		    [{{'is_key',2},[{'type',40,'bounded_fun',[{'type',40,'fun',[{'type',40,'product',[{'var',40,'Key'}|[{'var',40,'Orddict'}]]}|[{'type',40,'boolean',[]}]]}|[[{'type',41,'constraint',[{'atom',41,'is_subtype'}|[[{'var',41,'Key'}|[{'type',41,'term',[]}]]]]}|[{'type',42,'constraint',[{'atom',42,'is_subtype'}|[[{'var',42,'Orddict'}|[{'type',42,'orddict',[]}]]]]}]]]]}]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'to_list',1},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[{'var',49,'Orddict'}]}|[{'var',49,'List'}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Orddict'}|[{'type',50,'orddict',[]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'List'}|[{'type',51,'list',[{'type',51,'tuple',[{'ann_type',51,[{'var',51,'Key'}|[{'type',51,'term',[]}]]}|[{'ann_type',51,[{'var',51,'Value'}|[{'type',51,'term',[]}]]}]]}]}]]]]}]]]]}]}],
		%% Line 55
		'spec' =
		    %% Line 55
		    [{{'from_list',1},[{'type',55,'bounded_fun',[{'type',55,'fun',[{'type',55,'product',[{'var',55,'List'}]}|[{'var',55,'Orddict'}]]}|[[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'List'}|[{'type',56,'list',[{'type',56,'tuple',[{'ann_type',56,[{'var',56,'Key'}|[{'type',56,'term',[]}]]}|[{'ann_type',56,[{'var',56,'Value'}|[{'type',56,'term',[]}]]}]]}]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Orddict'}|[{'type',57,'orddict',[]}]]]]}]]]]}]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'size',1},[{'type',64,'bounded_fun',[{'type',64,'fun',[{'type',64,'product',[{'var',64,'Orddict'}]}|[{'type',64,'non_neg_integer',[]}]]}|[[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Orddict'}|[{'type',65,'orddict',[]}]]]]}]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'is_empty',1},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[{'var',69,'Orddict'}]}|[{'type',69,'boolean',[]}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Orddict'}|[{'type',70,'orddict',[]}]]]]}]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'fetch',2},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'Key'}|[{'var',75,'Orddict'}]]}|[{'var',75,'Value'}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Key'}|[{'type',76,'term',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Value'}|[{'type',77,'term',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Orddict'}|[{'type',78,'orddict',[]}]]]]}]]]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'find',2},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'Key'}|[{'var',83,'Orddict'}]]}|[{'type',83,'union',[{'type',83,'tuple',[{'atom',83,'ok'}|[{'var',83,'Value'}]]}|[{'atom',83,'error'}]]}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Key'}|[{'type',84,'term',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Orddict'}|[{'type',85,'orddict',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Value'}|[{'type',86,'term',[]}]]]]}]]]]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'fetch_keys',1},[{'type',93,'bounded_fun',[{'type',93,'fun',[{'type',93,'product',[{'var',93,'Orddict'}]}|[{'var',93,'Keys'}]]}|[[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Orddict'}|[{'type',94,'orddict',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Keys'}|[{'type',95,'list',[{'type',95,'term',[]}]}]]]]}]]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'erase',2},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'Key'}|[{'var',101,'Orddict1'}]]}|[{'var',101,'Orddict2'}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Key'}|[{'type',102,'term',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'Orddict1'}|[{'type',103,'orddict',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Orddict2'}|[{'type',104,'orddict',[]}]]]]}]]]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'store',3},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'Key'}|[{'var',112,'Value'}|[{'var',112,'Orddict1'}]]]}|[{'var',112,'Orddict2'}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Key'}|[{'type',113,'term',[]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Value'}|[{'type',114,'term',[]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Orddict1'}|[{'type',115,'orddict',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Orddict2'}|[{'type',116,'orddict',[]}]]]]}]]]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'append',3},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'Key'}|[{'var',126,'Value'}|[{'var',126,'Orddict1'}]]]}|[{'var',126,'Orddict2'}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Key'}|[{'type',127,'term',[]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Value'}|[{'type',128,'term',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Orddict1'}|[{'type',129,'orddict',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'Orddict2'}|[{'type',130,'orddict',[]}]]]]}]]]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'append_list',3},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'Key'}|[{'var',140,'ValList'}|[{'var',140,'Orddict1'}]]]}|[{'var',140,'Orddict2'}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Key'}|[{'type',141,'term',[]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'ValList'}|[{'type',142,'list',[{'ann_type',142,[{'var',142,'Value'}|[{'type',142,'term',[]}]]}]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Orddict1'}|[{'type',143,'orddict',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Orddict2'}|[{'type',144,'orddict',[]}]]]]}]]]]]]}]}],
		%% Line 155
		'spec' =
		    %% Line 155
		    [{{'update',3},[{'type',155,'bounded_fun',[{'type',155,'fun',[{'type',155,'product',[{'var',155,'Key'}|[{'var',155,'Fun'}|[{'var',155,'Orddict1'}]]]}|[{'var',155,'Orddict2'}]]}|[[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Key'}|[{'type',156,'term',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Fun'}|[{'type',157,'fun',[{'type',157,'product',[{'ann_type',157,[{'var',157,'Value1'}|[{'type',157,'term',[]}]]}]}|[{'ann_type',157,[{'var',157,'Value2'}|[{'type',157,'term',[]}]]}]]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Orddict1'}|[{'type',158,'orddict',[]}]]]]}|[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Orddict2'}|[{'type',159,'orddict',[]}]]]]}]]]]]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'update',4},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'Key'}|[{'var',166,'Fun'}|[{'var',166,'Initial'}|[{'var',166,'Orddict1'}]]]]}|[{'var',166,'Orddict2'}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Key'}|[{'type',167,'term',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Initial'}|[{'type',168,'term',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Fun'}|[{'type',169,'fun',[{'type',169,'product',[{'ann_type',169,[{'var',169,'Value1'}|[{'type',169,'term',[]}]]}]}|[{'ann_type',169,[{'var',169,'Value2'}|[{'type',169,'term',[]}]]}]]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'Orddict1'}|[{'type',170,'orddict',[]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Orddict2'}|[{'type',171,'orddict',[]}]]]]}]]]]]]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'update_counter',3},[{'type',181,'bounded_fun',[{'type',181,'fun',[{'type',181,'product',[{'var',181,'Key'}|[{'var',181,'Increment'}|[{'var',181,'Orddict1'}]]]}|[{'var',181,'Orddict2'}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Key'}|[{'type',182,'term',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Increment'}|[{'type',183,'number',[]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Orddict1'}|[{'type',184,'orddict',[]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Orddict2'}|[{'type',185,'orddict',[]}]]]]}]]]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'fold',3},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'Fun'}|[{'var',195,'Acc0'}|[{'var',195,'Orddict'}]]]}|[{'var',195,'Acc1'}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Fun'}|[{'type',196,'fun',[{'type',196,'product',[{'ann_type',196,[{'var',196,'Key'}|[{'type',196,'term',[]}]]}|[{'ann_type',196,[{'var',196,'Value'}|[{'type',196,'term',[]}]]}|[{'ann_type',196,[{'var',196,'AccIn'}|[{'type',196,'term',[]}]]}]]]}|[{'ann_type',196,[{'var',196,'AccOut'}|[{'type',196,'term',[]}]]}]]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Acc0'}|[{'type',197,'term',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Acc1'}|[{'type',198,'term',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Orddict'}|[{'type',199,'orddict',[]}]]]]}]]]]]]}]}],
		%% Line 205
		'spec' =
		    %% Line 205
		    [{{'map',2},[{'type',205,'bounded_fun',[{'type',205,'fun',[{'type',205,'product',[{'var',205,'Fun'}|[{'var',205,'Orddict1'}]]}|[{'var',205,'Orddict2'}]]}|[[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Fun'}|[{'type',206,'fun',[{'type',206,'product',[{'ann_type',206,[{'var',206,'Key'}|[{'type',206,'term',[]}]]}|[{'ann_type',206,[{'var',206,'Value1'}|[{'type',206,'term',[]}]]}]]}|[{'ann_type',206,[{'var',206,'Value2'}|[{'type',206,'term',[]}]]}]]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Orddict1'}|[{'type',207,'orddict',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Orddict2'}|[{'type',208,'orddict',[]}]]]]}]]]]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'filter',2},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Pred'}|[{'var',214,'Orddict1'}]]}|[{'var',214,'Orddict2'}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Pred'}|[{'type',215,'fun',[{'type',215,'product',[{'ann_type',215,[{'var',215,'Key'}|[{'type',215,'term',[]}]]}|[{'ann_type',215,[{'var',215,'Value'}|[{'type',215,'term',[]}]]}]]}|[{'type',215,'boolean',[]}]]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Orddict1'}|[{'type',216,'orddict',[]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Orddict2'}|[{'type',217,'orddict',[]}]]]]}]]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'merge',3},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'Fun'}|[{'var',226,'Orddict1'}|[{'var',226,'Orddict2'}]]]}|[{'var',226,'Orddict3'}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Fun'}|[{'type',227,'fun',[{'type',227,'product',[{'ann_type',227,[{'var',227,'Key'}|[{'type',227,'term',[]}]]}|[{'ann_type',227,[{'var',227,'Value1'}|[{'type',227,'term',[]}]]}|[{'ann_type',227,[{'var',227,'Value2'}|[{'type',227,'term',[]}]]}]]]}|[{'ann_type',227,[{'var',227,'Value'}|[{'type',227,'term',[]}]]}]]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Orddict1'}|[{'type',228,'orddict',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Orddict2'}|[{'type',229,'orddict',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Orddict3'}|[{'type',230,'orddict',[]}]]]]}]]]]]]}]}]]
'new'/0 =
    %% Line 38
    fun () ->
	[]
'is_key'/2 =
    %% Line 44
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[{K,_cor4}|_cor5]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      'false'
	  %% Line 45
	  <Key,[{K,_cor6}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      apply 'is_key'/2
		  (Key, Dict)
	  %% Line 46
	  <_X_Key,[{_X_K,_X_Val}|_cor7]> when 'true' ->
	      'true'
	  %% Line 47
	  <_cor8,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_key',2}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 53
    fun (_cor0) ->
	_cor0
'from_list'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 60
	  <Pair = [{_cor3,_cor4}|[]]> when 'true' ->
	      Pair
	  %% Line 61
	  <Pairs> when 'true' ->
	      let <_cor1> =
		  %% Line 62
		  apply 'reverse_pairs'/2
		      (Pairs, [])
	      in  %% Line 62
		  call 'lists':'ukeysort'
		      (1, _cor1)
	end
'size'/1 =
    %% Line 67
    fun (_cor0) ->
	call 'erlang':'length'
	    (_cor0)
'is_empty'/1 =
    %% Line 72
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'true'
	  %% Line 73
	  <[_cor2|_cor3]> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_empty',1}}] )
	    -| ['compiler_generated'] )
	end
'fetch'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[{K,_cor4}|D]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      apply 'fetch'/2
		  (Key, D)
	  %% Line 81
	  <Key,[{K,Value}|_cor5]>
	      when call 'erlang':'=='
		    (Key,
		     K) ->
	      Value
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'fetch',2}}] )
	    -| ['compiler_generated'] )
	end
'find'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[{K,_cor4}|_cor5]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      'error'
	  %% Line 89
	  <Key,[{K,_cor6}|D]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      apply 'find'/2
		  (Key, D)
	  %% Line 90
	  <_X_Key,[{_X_K,Value}|_cor7]> when 'true' ->
	      {'ok',Value}
	  %% Line 91
	  <_cor8,[]> when 'true' ->
	      'error'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find',2}}] )
	    -| ['compiler_generated'] )
	end
'fetch_keys'/1 =
    %% Line 97
    fun (_cor0) ->
	case _cor0 of
	  <[{Key,_cor3}|Dict]> when 'true' ->
	      let <_cor1> =
		  %% Line 98
		  apply 'fetch_keys'/1
		      (Dict)
	      in  %% Line 98
		  [Key|_cor1]
	  %% Line 99
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'fetch_keys',1}}] )
	    -| ['compiler_generated'] )
	end
'erase'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[E = {K,_cor5}|Dict]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      [E|Dict]
	  %% Line 107
	  <Key,[E = {K,_cor6}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_cor2> =
		  %% Line 108
		  apply 'erase'/2
		      (Key, Dict)
	      in  %% Line 108
		  [E|_cor2]
	  %% Line 109
	  <_X_Key,[{_X_K,_X_Val}|Dict]> when 'true' ->
	      Dict
	  %% Line 110
	  <_cor7,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'erase',2}}] )
	    -| ['compiler_generated'] )
	end
'store'/3 =
    %% Line 118
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,New,[E = {K,_cor7}|Dict]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 119
	      [{Key,New}|[E|Dict]]
	  %% Line 120
	  <Key,New,[E = {K,_cor8}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_cor3> =
		  %% Line 121
		  apply 'store'/3
		      (Key, New, Dict)
	      in  %% Line 121
		  [E|_cor3]
	  %% Line 122
	  <Key,New,[{_X_K,_X_Old}|Dict]> when 'true' ->
	      %% Line 123
	      [{Key,New}|Dict]
	  %% Line 124
	  <Key,New,[]> when 'true' ->
	      [{Key,New}|[]]
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'store',3}}] )
	    -| ['compiler_generated'] )
	end
'append'/3 =
    %% Line 132
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,New,[E = {K,_cor8}|Dict]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 133
	      [{Key,[New|[]]}|[E|Dict]]
	  %% Line 134
	  <Key,New,[E = {K,_cor9}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_cor3> =
		  %% Line 135
		  apply 'append'/3
		      (Key, New, Dict)
	      in  %% Line 135
		  [E|_cor3]
	  %% Line 136
	  <Key,New,[{_X_K,Old}|Dict]> when 'true' ->
	      let <_cor4> =
		  %% Line 137
		  call 'erlang':'++'
		      (Old, [New|[]])
	      in  %% Line 137
		  [{Key,_cor4}|Dict]
	  %% Line 138
	  <Key,New,[]> when 'true' ->
	      [{Key,[New|[]]}|[]]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'append',3}}] )
	    -| ['compiler_generated'] )
	end
'append_list'/3 =
    %% Line 146
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,NewList,[E = {K,_cor8}|Dict]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 147
	      [{Key,NewList}|[E|Dict]]
	  %% Line 148
	  <Key,NewList,[E = {K,_cor9}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_cor3> =
		  %% Line 149
		  apply 'append_list'/3
		      (Key, NewList, Dict)
	      in  %% Line 149
		  [E|_cor3]
	  %% Line 150
	  <Key,NewList,[{_X_K,Old}|Dict]> when 'true' ->
	      let <_cor4> =
		  %% Line 151
		  call 'erlang':'++'
		      (Old, NewList)
	      in  %% Line 151
		  [{Key,_cor4}|Dict]
	  %% Line 152
	  <Key,NewList,[]> when 'true' ->
	      %% Line 153
	      [{Key,NewList}|[]]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'append_list',3}}] )
	    -| ['compiler_generated'] )
	end
'update'/3 =
    %% Line 161
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Fun,[E = {K,_cor8}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_cor3> =
		  %% Line 162
		  apply 'update'/3
		      (Key, Fun, Dict)
	      in  %% Line 162
		  [E|_cor3]
	  %% Line 163
	  <Key,Fun,[{K,Val}|Dict]>
	      when call 'erlang':'=='
		    (Key,
		     K) ->
	      let <_cor4> =
		  %% Line 164
		  apply Fun
		      (Val)
	      in  %% Line 164
		  [{Key,_cor4}|Dict]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'update',3}}] )
	    -| ['compiler_generated'] )
	end
'update'/4 =
    %% Line 173
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,_cor10,Init,[E = {K,_cor11}|Dict]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 174
	      [{Key,Init}|[E|Dict]]
	  %% Line 175
	  <Key,Fun,Init,[E = {K,_cor12}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_cor4> =
		  %% Line 176
		  apply 'update'/4
		      (Key, Fun, Init, Dict)
	      in  %% Line 176
		  [E|_cor4]
	  %% Line 177
	  <Key,Fun,_X_Init,[{_X_K,Val}|Dict]> when 'true' ->
	      let <_cor5> =
		  %% Line 178
		  apply Fun
		      (Val)
	      in  %% Line 178
		  [{Key,_cor5}|Dict]
	  %% Line 179
	  <Key,_cor13,Init,[]> when 'true' ->
	      [{Key,Init}|[]]
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'update',4}}] )
	    -| ['compiler_generated'] )
	end
'update_counter'/3 =
    %% Line 187
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Incr,[E = {K,_cor8}|Dict]>
	      when call 'erlang':'<'
		    (Key,
		     K) ->
	      %% Line 188
	      [{Key,Incr}|[E|Dict]]
	  %% Line 189
	  <Key,Incr,[E = {K,_cor9}|Dict]>
	      when call 'erlang':'>'
		    (Key,
		     K) ->
	      let <_cor3> =
		  %% Line 190
		  apply 'update_counter'/3
		      (Key, Incr, Dict)
	      in  %% Line 190
		  [E|_cor3]
	  %% Line 191
	  <Key,Incr,[{_X_K,Val}|Dict]> when 'true' ->
	      let <_cor4> =
		  %% Line 192
		  call 'erlang':'+'
		      (Val, Incr)
	      in  %% Line 192
		  [{Key,_cor4}|Dict]
	  %% Line 193
	  <Key,Incr,[]> when 'true' ->
	      [{Key,Incr}|[]]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'update_counter',3}}] )
	    -| ['compiler_generated'] )
	end
'fold'/3 =
    %% Line 201
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Acc,[{Key,Val}|D]> when 'true' ->
	      let <_cor3> =
		  %% Line 202
		  apply F
		      (Key, Val, Acc)
	      in  %% Line 202
		  apply 'fold'/3
		      (F, _cor3, D)
	  %% Line 203
	  <F,Acc,[]>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      Acc
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fold',3}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[{Key,Val}|D]> when 'true' ->
	      let <_cor2> =
		  %% Line 211
		  apply F
		      (Key, Val)
	      in  let <_cor3> =
		      %% Line 211
		      apply 'map'/2
			  (F, D)
		  in  %% Line 211
		      [{Key,_cor2}|_cor3]
	  %% Line 212
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'filter'/2 =
    %% Line 219
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[E = {Key,Val}|D]> when 'true' ->
	      %% Line 220
	      case apply F
		       (Key, Val) of
		%% Line 221
		<'true'> when 'true' ->
		    let <_cor2> =
			apply 'filter'/2
			    (F, D)
		    in  [E|_cor2]
		%% Line 222
		<'false'> when 'true' ->
		    apply 'filter'/2
			(F, D)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 224
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'filter',2}}] )
	    -| ['compiler_generated'] )
	end
'merge'/3 =
    %% Line 232
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,[E1 = {K1,_cor10}|D1],[E2 = {K2,_cor11}|D2]>
	      when call 'erlang':'<'
		    (K1,
		     K2) ->
	      let <_cor3> =
		  %% Line 233
		  apply 'merge'/3
		      (F, D1, [E2|D2])
	      in  %% Line 233
		  [E1|_cor3]
	  %% Line 234
	  <F,[E1 = {K1,_cor12}|D1],[E2 = {K2,_cor13}|D2]>
	      when call 'erlang':'>'
		    (K1,
		     K2) ->
	      let <_cor4> =
		  %% Line 235
		  apply 'merge'/3
		      (F, [E1|D1], D2)
	      in  %% Line 235
		  [E2|_cor4]
	  %% Line 236
	  <F,[{K1,V1}|D1],[{_X_K2,V2}|D2]> when 'true' ->
	      let <_cor5> =
		  %% Line 237
		  apply F
		      (K1, V1, V2)
	      in  let <_cor6> =
		      %% Line 237
		      apply 'merge'/3
			  (F, D1, D2)
		  in  %% Line 237
		      [{K1,_cor5}|_cor6]
	  %% Line 238
	  <F,[],D2>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      D2
	  %% Line 239
	  <F,D1,[]>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      D1
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'merge',3}}] )
	    -| ['compiler_generated'] )
	end
'reverse_pairs'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H = {_cor4,_cor5}|T],Acc> when 'true' ->
	      %% Line 242
	      apply 'reverse_pairs'/2
		  (T, [H|Acc])
	  %% Line 243
	  <[],Acc> when 'true' ->
	      Acc
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'reverse_pairs',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('orddict')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('orddict', _cor0)
end