module 'filelib' ['compile_wildcard'/1,
		  'ensure_dir'/1,
		  'file_size'/1,
		  'file_size'/2,
		  'fold_files'/5,
		  'fold_files'/6,
		  'is_dir'/1,
		  'is_dir'/2,
		  'is_file'/1,
		  'is_file'/2,
		  'is_regular'/1,
		  'is_regular'/2,
		  'last_modified'/1,
		  'last_modified'/2,
		  'module_info'/0,
		  'module_info'/1,
		  'wildcard'/1,
		  'wildcard'/2,
		  'wildcard'/3]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'filename',{'remote_type',41,[{'atom',41,'file'}|[{'atom',41,'name'}|[[]]]]},[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'dirname',{'type',42,'filename',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'filename_all',{'remote_type',44,[{'atom',44,'file'}|[{'atom',44,'name_all'}|[[]]]]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'dirname_all',{'type',45,'filename_all',[]},[]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'wildcard',1},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[{'var',49,'Wildcard'}]}|[{'type',49,'list',[{'remote_type',49,[{'atom',49,'file'}|[{'atom',49,'filename'}|[[]]]]}]}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Wildcard'}|[{'type',50,'union',[{'type',50,'filename',[]}|[{'type',50,'dirname',[]}]]}]]]]}]]]}]}],
		%% Line 54
		'spec' =
		    %% Line 54
		    [{{'wildcard',2},[{'type',54,'bounded_fun',[{'type',54,'fun',[{'type',54,'product',[{'var',54,'Wildcard'}|[{'var',54,'Cwd'}]]}|[{'type',54,'list',[{'remote_type',54,[{'atom',54,'file'}|[{'atom',54,'filename'}|[[]]]]}]}]]}|[[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Wildcard'}|[{'type',55,'union',[{'type',55,'filename',[]}|[{'type',55,'dirname',[]}]]}]]]]}|[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Cwd'}|[{'type',56,'dirname',[]}]]]]}]]]]}]}],
		%% Line 62
		'spec' =
		    %% Line 62
		    [{{'wildcard',3},[{'type',62,'fun',[{'type',62,'product',[{'remote_type',62,[{'atom',62,'file'}|[{'atom',62,'name'}|[[]]]]}|[{'remote_type',62,[{'atom',62,'file'}|[{'atom',62,'name'}|[[]]]]}|[{'type',62,'atom',[]}]]]}|[{'type',62,'list',[{'remote_type',62,[{'atom',62,'file'}|[{'atom',62,'filename'}|[[]]]]}]}]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'is_dir',1},[{'type',67,'bounded_fun',[{'type',67,'fun',[{'type',67,'product',[{'var',67,'Name'}]}|[{'type',67,'boolean',[]}]]}|[[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Name'}|[{'type',68,'union',[{'type',68,'filename_all',[]}|[{'type',68,'dirname_all',[]}]]}]]]]}]]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'is_dir',2},[{'type',72,'fun',[{'type',72,'product',[{'remote_type',72,[{'atom',72,'file'}|[{'atom',72,'name_all'}|[[]]]]}|[{'type',72,'atom',[]}]]}|[{'type',72,'boolean',[]}]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'is_file',1},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'Name'}]}|[{'type',76,'boolean',[]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Name'}|[{'type',77,'union',[{'type',77,'filename_all',[]}|[{'type',77,'dirname_all',[]}]]}]]]]}]]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'is_file',2},[{'type',81,'fun',[{'type',81,'product',[{'remote_type',81,[{'atom',81,'file'}|[{'atom',81,'name_all'}|[[]]]]}|[{'type',81,'atom',[]}]]}|[{'type',81,'boolean',[]}]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'is_regular',1},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'Name'}]}|[{'type',85,'boolean',[]}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Name'}|[{'type',86,'filename_all',[]}]]]]}]]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'is_regular',2},[{'type',90,'fun',[{'type',90,'product',[{'remote_type',90,[{'atom',90,'file'}|[{'atom',90,'name_all'}|[[]]]]}|[{'type',90,'atom',[]}]]}|[{'type',90,'boolean',[]}]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'fold_files',5},[{'type',94,'bounded_fun',[{'type',94,'fun',[{'type',94,'product',[{'var',94,'Dir'}|[{'var',94,'RegExp'}|[{'var',94,'Recursive'}|[{'var',94,'Fun'}|[{'var',94,'AccIn'}]]]]]}|[{'var',94,'AccOut'}]]}|[[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Dir'}|[{'type',95,'dirname',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'RegExp'}|[{'type',96,'string',[]}]]]]}|[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'Recursive'}|[{'type',97,'boolean',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Fun'}|[{'type',98,'fun',[{'type',98,'product',[{'ann_type',98,[{'var',98,'F'}|[{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'filename'}|[[]]]]}]]}|[{'var',98,'AccIn'}]]}|[{'var',98,'AccOut'}]]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'AccIn'}|[{'type',99,'term',[]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'AccOut'}|[{'type',100,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 104
		'spec' =
		    %% Line 104
		    [{{'fold_files',6},[{'type',104,'fun',[{'type',104,'product',[{'remote_type',104,[{'atom',104,'file'}|[{'atom',104,'name'}|[[]]]]}|[{'type',104,'string',[]}|[{'type',104,'boolean',[]}|[{'type',104,'fun',[{'type',104,'product',[{'var',104,'_'}|[{'var',104,'_'}]]}|[{'var',104,'_'}]]}|[{'var',104,'_'}|[{'type',104,'atom',[]}]]]]]]}|[{'var',104,'_'}]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'last_modified',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'Name'}]}|[{'type',108,'union',[{'remote_type',108,[{'atom',108,'file'}|[{'atom',108,'date_time'}|[[]]]]}|[{'integer',108,0}]]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Name'}|[{'type',109,'union',[{'type',109,'filename_all',[]}|[{'type',109,'dirname_all',[]}]]}]]]]}]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'last_modified',2},[{'type',113,'fun',[{'type',113,'product',[{'remote_type',113,[{'atom',113,'file'}|[{'atom',113,'name_all'}|[[]]]]}|[{'type',113,'atom',[]}]]}|[{'type',113,'union',[{'remote_type',113,[{'atom',113,'file'}|[{'atom',113,'date_time'}|[[]]]]}|[{'integer',113,0}]]}]]}]}],
		%% Line 117
		'spec' =
		    %% Line 117
		    [{{'file_size',1},[{'type',117,'bounded_fun',[{'type',117,'fun',[{'type',117,'product',[{'var',117,'Filename'}]}|[{'type',117,'non_neg_integer',[]}]]}|[[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Filename'}|[{'type',118,'filename_all',[]}]]]]}]]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'file_size',2},[{'type',122,'fun',[{'type',122,'product',[{'remote_type',122,[{'atom',122,'file'}|[{'atom',122,'name'}|[[]]]]}|[{'type',122,'atom',[]}]]}|[{'type',122,'non_neg_integer',[]}]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'ensure_dir',1},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'Name'}]}|[{'type',223,'union',[{'atom',223,'ok'}|[{'type',223,'tuple',[{'atom',223,'error'}|[{'var',223,'Reason'}]]}]]}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Name'}|[{'type',224,'union',[{'type',224,'filename_all',[]}|[{'type',224,'dirname_all',[]}]]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Reason'}|[{'remote_type',225,[{'atom',225,'file'}|[{'atom',225,'posix'}|[[]]]]}]]]]}]]]]}]}]]
'wildcard'/1 =
    %% Line 51
    fun (_cor0) ->
	case _cor0 of
	  <Pattern>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 52
	      try
		  apply 'do_wildcard'/3
		      (Pattern, [46], 'file')
	      of <_cor1> ->
		  _cor1
	      catch <_cor4,_cor3,_cor2> ->
		  case <_cor4,_cor3,_cor2> of
		    <'error',UnUsUalVaRiAbLeNaMe = {'badpattern',_cor6},_cor7> when 'true' ->
			call 'erlang':'error'
			    (UnUsUalVaRiAbLeNaMe)
		    ( <_cor4,_cor3,_cor2> when 'true' ->
			  primop 'raise'
			      (_cor2, _cor3)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'wildcard',1}}] )
	    -| ['compiler_generated'] )
	end
'wildcard'/2 =
    %% Line 57
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pattern,Cwd>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Pattern)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Cwd)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 58
	      try
		  apply 'do_wildcard'/3
		      (Pattern, Cwd, 'file')
	      of <_cor4> ->
		  _cor4
	      catch <_cor7,_cor6,_cor5> ->
		  case <_cor7,_cor6,_cor5> of
		    <'error',UnUsUalVaRiAbLeNaMe = {'badpattern',_cor16},_cor17> when 'true' ->
			call 'erlang':'error'
			    (UnUsUalVaRiAbLeNaMe)
		    ( <_cor7,_cor6,_cor5> when 'true' ->
			  primop 'raise'
			      (_cor5, _cor6)
		      -| ['compiler_generated'] )
		  end
	  %% Line 59
	  <Pattern,Mod>
	      when let <_cor8> =
		    call 'erlang':'is_list'
			(Pattern)
		in  let <_cor9> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 60
	      try
		  apply 'do_wildcard'/3
		      (Pattern, [46], Mod)
	      of <_cor10> ->
		  _cor10
	      catch <_cor13,_cor12,_cor11> ->
		  case <_cor13,_cor12,_cor11> of
		    <'error',UnUsUalVaRiAbLeNaMe = {'badpattern',_cor18},_cor19> when 'true' ->
			call 'erlang':'error'
			    (UnUsUalVaRiAbLeNaMe)
		    ( <_cor13,_cor12,_cor11> when 'true' ->
			  primop 'raise'
			      (_cor11, _cor12)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'wildcard',2}}] )
	    -| ['compiler_generated'] )
	end
'wildcard'/3 =
    %% Line 63
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pattern,Cwd,Mod>
	      when %% Line 64
		try
		    let <_cor3> =
			call 'erlang':'is_list'
			    (Pattern)
		    in  let <_cor4> =
			    call 'erlang':'is_list'
				(Cwd)
			in  let <_cor5> =
				call 'erlang':'is_atom'
				    (Mod)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 65
	      try
		  apply 'do_wildcard'/3
		      (Pattern, Cwd, Mod)
	      of <_cor7> ->
		  _cor7
	      catch <_cor10,_cor9,_cor8> ->
		  case <_cor10,_cor9,_cor8> of
		    <'error',UnUsUalVaRiAbLeNaMe = {'badpattern',_cor14},_cor15> when 'true' ->
			call 'erlang':'error'
			    (UnUsUalVaRiAbLeNaMe)
		    ( <_cor10,_cor9,_cor8> when 'true' ->
			  primop 'raise'
			      (_cor8, _cor9)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'wildcard',3}}] )
	    -| ['compiler_generated'] )
	end
'is_dir'/1 =
    %% Line 69
    fun (_cor0) ->
	%% Line 70
	apply 'do_is_dir'/2
	    (_cor0, 'file')
'is_dir'/2 =
    %% Line 73
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 74
	      apply 'do_is_dir'/2
		  (Dir, Mod)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'is_file'/1 =
    %% Line 78
    fun (_cor0) ->
	%% Line 79
	apply 'do_is_file'/2
	    (_cor0, 'file')
'is_file'/2 =
    %% Line 82
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 83
	      apply 'do_is_file'/2
		  (File, Mod)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_file',2}}] )
	    -| ['compiler_generated'] )
	end
'is_regular'/1 =
    %% Line 87
    fun (_cor0) ->
	%% Line 88
	apply 'do_is_regular'/2
	    (_cor0, 'file')
'is_regular'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 92
	      apply 'do_is_regular'/2
		  (File, Mod)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_regular',2}}] )
	    -| ['compiler_generated'] )
	end
'fold_files'/5 =
    %% Line 101
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 102
	apply 'do_fold_files'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'file')
'fold_files'/6 =
    %% Line 105
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Dir,RegExp,Recursive,Fun,Acc,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 106
	      apply 'do_fold_files'/6
		  (Dir, RegExp, Recursive, Fun, Acc, Mod)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'fold_files',6}}] )
	    -| ['compiler_generated'] )
	end
'last_modified'/1 =
    %% Line 110
    fun (_cor0) ->
	%% Line 111
	apply 'do_last_modified'/2
	    (_cor0, 'file')
'last_modified'/2 =
    %% Line 114
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 115
	      apply 'do_last_modified'/2
		  (File, Mod)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'last_modified',2}}] )
	    -| ['compiler_generated'] )
	end
'file_size'/1 =
    %% Line 119
    fun (_cor0) ->
	%% Line 120
	apply 'do_file_size'/2
	    (_cor0, 'file')
'file_size'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 124
	      apply 'do_file_size'/2
		  (File, Mod)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'file_size',2}}] )
	    -| ['compiler_generated'] )
	end
'do_is_dir'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	%% Line 129
	case apply 'eval_read_file_info'/2
		 (_cor1, _cor0) of
	  %% Line 130
	  <{'ok',{'file_info',_cor5,'directory',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}}> when 'true' ->
	      %% Line 131
	      'true'
	  %% Line 132
	  <_cor17> when 'true' ->
	      %% Line 133
	      'false'
	end
'do_is_file'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	%% Line 137
	case apply 'eval_read_file_info'/2
		 (_cor1, _cor0) of
	  %% Line 138
	  <{'ok',{'file_info',_cor5,'regular',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}}> when 'true' ->
	      %% Line 139
	      'true'
	  %% Line 140
	  <{'ok',{'file_info',_cor17,'directory',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}}> when 'true' ->
	      %% Line 141
	      'true'
	  %% Line 142
	  <_cor29> when 'true' ->
	      %% Line 143
	      'false'
	end
'do_is_regular'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	%% Line 147
	case apply 'eval_read_file_info'/2
		 (_cor1, _cor0) of
	  %% Line 148
	  <{'ok',{'file_info',_cor5,'regular',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}}> when 'true' ->
	      %% Line 149
	      'true'
	  %% Line 150
	  <_cor17> when 'true' ->
	      %% Line 151
	      'false'
	end
'do_fold_files'/6 =
    %% Line 160
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 161
	case call 're':'compile'
		 (_cor4, ['unicode']) of
	  <{'ok',Re1}> when 'true' ->
	      %% Line 162
	      apply 'do_fold_files1'/7
		  (_cor5, Re1, _cor4, _cor3, _cor2, _cor1, _cor0)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'do_fold_files1'/7 =
    %% Line 164
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 165
	case apply 'eval_list_dir'/2
		 (_cor6, _cor0) of
	  %% Line 166
	  <{'ok',Files}> when 'true' ->
	      apply 'do_fold_files2'/8
		  (Files, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 168
	  <{'error',_cor15}> when 'true' ->
	      _cor1
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'do_fold_files2'/8 =
    %% Line 174
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Dir,_X_RegExp,_X_OrigRE,_X_Recursive,_X_Fun,Acc,_X_Mod> when 'true' ->
	      %% Line 175
	      Acc
	  %% Line 176
	  <[File|T],Dir,RegExp,OrigRE,Recursive,Fun,Acc0,Mod> when 'true' ->
	      let <FullName> =
		  %% Line 177
		  call 'filename':'join'
		      (Dir, File)
	      in  %% Line 178
		  case apply 'do_is_regular'/2
			   (FullName, Mod) of
		    %% Line 179
		    <'true'> when 'true' ->
			let <_cor10> =
			    catch
				let <_cor9> =
				    %% Line 180
				    case <> of
				      <>
					  when call 'erlang':'is_binary'
						(File) ->
					  OrigRE
				      %% Line 181
				      <> when 'true' ->
					  RegExp
				    end
				in  %% Line 180
				    call 're':'run'
					(File, _cor9, %% Line 182
						      [{'capture','none'}])
			in  %% Line 180
			    case _cor10 of
			      %% Line 183
			      <'match'> when 'true' ->
				  let <Acc> =
				      %% Line 184
				      apply Fun
					  (FullName, Acc0)
				  in  %% Line 185
				      apply 'do_fold_files2'/8
					  (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc, Mod)
			      %% Line 186
			      <{'EXIT',_cor27}> when 'true' ->
				  %% Line 187
				  apply 'do_fold_files2'/8
				      (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc0, Mod)
			      %% Line 188
			      <'nomatch'> when 'true' ->
				  %% Line 189
				  apply 'do_fold_files2'/8
				      (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc0, Mod)
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor12})
				-| ['compiler_generated'] )
			    end
		    %% Line 191
		    <'false'> when 'true' ->
			let <_cor15> =
			    %% Line 192
			    ( case Recursive of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'do_is_dir'/2
					  (FullName, Mod)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_cor13> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor13}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 192
			    case _cor15 of
			      %% Line 193
			      <'true'> when 'true' ->
				  let <Acc1> =
				      %% Line 194
				      apply 'do_fold_files1'/7
					  (FullName, RegExp, OrigRE, Recursive, %% Line 195
										Fun, %% Line 195
										     Acc0, %% Line 195
											   Mod)
				  in  %% Line 196
				      apply 'do_fold_files2'/8
					  (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc1, Mod)
			      %% Line 197
			      <'false'> when 'true' ->
				  %% Line 198
				  apply 'do_fold_files2'/8
				      (T, Dir, RegExp, OrigRE, Recursive, Fun, Acc0, Mod)
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor17})
				-| ['compiler_generated'] )
			    end
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'do_fold_files2',8}}] )
	    -| ['compiler_generated'] )
	end
'do_last_modified'/2 =
    %% Line 202
    fun (_cor1,_cor0) ->
	%% Line 203
	case apply 'eval_read_file_info'/2
		 (_cor1, _cor0) of
	  %% Line 204
	  <{'ok',Info}> when 'true' ->
	      %% Line 205
	      ( case Info of
		  ( <( {'file_info',_cor6,_cor7,_cor8,_cor9,_rec0,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec0
		    -| ['compiler_generated'] )
		  ( <_cor18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 206
	  <_cor19> when 'true' ->
	      %% Line 207
	      0
	end
'do_file_size'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	%% Line 211
	case apply 'eval_read_file_info'/2
		 (_cor1, _cor0) of
	  %% Line 212
	  <{'ok',Info}> when 'true' ->
	      %% Line 213
	      ( case Info of
		  ( <( {'file_info',_rec1,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec1
		    -| ['compiler_generated'] )
		  ( <_cor18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 214
	  <_cor19> when 'true' ->
	      %% Line 215
	      0
	end
'ensure_dir'/1 =
    %% Line 226
    fun (_cor0) ->
	case _cor0 of
	  <[47]> when 'true' ->
	      %% Line 227
	      'ok'
	  %% Line 228
	  <F> when 'true' ->
	      let <Dir> =
		  %% Line 229
		  call 'filename':'dirname'
		      (F)
	      in  %% Line 230
		  case apply 'do_is_dir'/2
			   (Dir, 'file') of
		    %% Line 231
		    <'true'> when 'true' ->
			%% Line 232
			'ok'
		    %% Line 233
		    <'false'>
			when call 'erlang':'=:='
			      (Dir,
			       F) ->
			%% Line 235
			{'error','einval'}
		    %% Line 236
		    <'false'> when 'true' ->
			let <_X_> =
			    %% Line 237
			    apply 'ensure_dir'/1
				(Dir)
			in  %% Line 238
			    case call 'file':'make_dir'
				     (Dir) of
			      %% Line 239
			      <EExist = {'error','eexist'}> when 'true' ->
				  %% Line 240
				  case apply 'do_is_dir'/2
					   (Dir, 'file') of
				    %% Line 241
				    <'true'> when 'true' ->
					%% Line 242
					'ok'
				    %% Line 243
				    <'false'> when 'true' ->
					%% Line 244
					EExist
				    ( <_cor3> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor3})
				      -| ['compiler_generated'] )
				  end
			      %% Line 246
			      <Err> when 'true' ->
				  %% Line 247
				  Err
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'do_wildcard'/3 =
    %% Line 256
    fun (_cor2,_cor1,_cor0) ->
	%% Line 257
	case apply 'compile_wildcard'/2
		 (_cor2, _cor1) of
	  <{Compiled,PrefixLen}> when 'true' ->
	      let <Files0> =
		  %% Line 258
		  apply 'do_wildcard_1'/2
		      (Compiled, _cor0)
	      in  let <_cor10> =
		      %% Line 259
		      case <> of
			%% Line 260
			<>
			    when call 'erlang':'=:='
				  (PrefixLen,
				   0) ->
			    %% Line 261
			    Files0
			%% Line 262
			<> when 'true' ->
			    %% Line 263
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor7) ->
					  case _cor7 of
					    <[File|_cor6]> when 'true' ->
						let <_cor8> =
						    call 'lists':'nthtail'
							(PrefixLen, File)
						in  let <_cor9> =
							apply 'lc$^0'/1
							    (_cor6)
						    in  ( [_cor8|_cor9]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor7> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor7})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Files0)
			      -| ['list_comprehension'] )
		      end
		  in  %% Line 265
		      call 'lists':'sort'
			  (_cor10)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_wildcard_1'/2 =
    %% Line 267
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'exists',File},Mod> when 'true' ->
	      %% Line 268
	      case apply 'eval_read_file_info'/2
		       (File, Mod) of
		%% Line 269
		<{'ok',_cor5}> when 'true' ->
		    [File|[]]
		%% Line 270
		<_cor6> when 'true' ->
		    []
	      end
	  %% Line 272
	  <[Base|Rest],Mod> when 'true' ->
	      %% Line 273
	      apply 'do_wildcard_2'/4
		  ([Base|[]], Rest, [], Mod)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'do_wildcard_1',2}}] )
	    -| ['compiler_generated'] )
	end
'do_wildcard_2'/4 =
    %% Line 275
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[File|Rest],Pattern,Result,Mod> when 'true' ->
	      let <_cor4> =
		  %% Line 276
		  apply 'do_wildcard_3'/4
		      (File, Pattern, Result, Mod)
	      in  %% Line 276
		  apply 'do_wildcard_2'/4
		      (Rest, Pattern, _cor4, Mod)
	  %% Line 277
	  <[],_cor9,Result,_X_Mod> when 'true' ->
	      %% Line 278
	      Result
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'do_wildcard_2',4}}] )
	    -| ['compiler_generated'] )
	end
'do_wildcard_3'/4 =
    %% Line 280
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Base,[['double_star']|Rest],Result,Mod> when 'true' ->
	      %% Line 281
	      apply 'do_double_star'/6
		  ([46], [Base|[]], Rest, Result, Mod, 'true')
	  %% Line 282
	  <Base0,[Pattern|Rest],Result,Mod> when 'true' ->
	      %% Line 283
	      case apply 'do_list_dir'/2
		       (Base0, Mod) of
		%% Line 284
		<{'ok',Files}> when 'true' ->
		    let <Base> =
			%% Line 285
			apply 'prepare_base'/1
			    (Base0)
		    in  let <Matches> =
			    %% Line 286
			    apply 'do_wildcard_4'/3
				(Pattern, Base, Files)
			in  %% Line 287
			    apply 'do_wildcard_2'/4
				(Matches, Rest, Result, Mod)
		%% Line 288
		<_cor11> when 'true' ->
		    %% Line 289
		    Result
	      end
	  %% Line 291
	  <Base,[],Result,_X_Mod> when 'true' ->
	      %% Line 292
	      [Base|Result]
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'do_wildcard_3',4}}] )
	    -| ['compiler_generated'] )
	end
'do_wildcard_4'/3 =
    %% Line 294
    fun (_cor2,_cor1,_cor0) ->
	%% Line 295
	case apply 'will_always_match'/1
		 (_cor2) of
	  %% Line 296
	  <'false'> when 'true' ->
	      %% Line 297
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor5) ->
			    case _cor5 of
			      <[F|_cor4]> when 'true' ->
				  ( case apply 'match_part'/2
					     (_cor2, F) of
				      <'true'> when 'true' ->
					  let <_cor6> =
					      call 'erlang':'++'
						  (_cor1, F)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				      ( <'false'> when 'true' ->
					    apply 'lc$^0'/1
						(_cor4)
					-| ['compiler_generated'] )
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor8})
					-| ['compiler_generated'] )
				    end
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor5> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor5})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(_cor0)
		-| ['list_comprehension'] )
	  %% Line 298
	  <'true'> when 'true' ->
	      %% Line 299
	      ( letrec
		    'lc$^1'/1 =
			fun (_cor11) ->
			    case _cor11 of
			      <[F|_cor10]> when 'true' ->
				  let <_cor12> =
				      call 'erlang':'++'
					  (_cor1, F)
				  in  let <_cor13> =
					  apply 'lc$^1'/1
					      (_cor10)
				      in  ( [_cor12|_cor13]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor11> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor11})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^1'/1
			(_cor0)
		-| ['list_comprehension'] )
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'match_part'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['question'|Rest1],[_cor8|Rest2]> when 'true' ->
	      %% Line 303
	      apply 'match_part'/2
		  (Rest1, Rest2)
	  %% Line 304
	  <['accept'],_cor9> when 'true' ->
	      %% Line 305
	      'true'
	  %% Line 306
	  <['double_star'],_cor10> when 'true' ->
	      %% Line 307
	      'true'
	  %% Line 308
	  <['star'|Rest],File> when 'true' ->
	      %% Line 309
	      apply 'do_star'/2
		  (Rest, File)
	  %% Line 310
	  <[{'one_of',Ordset}|Rest],[C|File]> when 'true' ->
	      %% Line 311
	      ( case call 'gb_sets':'is_element'
			 (C, Ordset) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'match_part'/2
			    (Rest, File)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 312
	  <[{'alt',Alts}|[]],File> when 'true' ->
	      %% Line 313
	      apply 'do_alt'/2
		  (Alts, File)
	  %% Line 314
	  <[C|Rest1],[_cor11|Rest2]>
	      when let <_cor12> =
		    call 'erlang':'=:='
			(_cor11, C)
		in  let <_cor13> =
			call 'erlang':'is_integer'
			    (C)
		    in  call 'erlang':'and'
			    (_cor12, _cor13) ->
	      %% Line 315
	      apply 'match_part'/2
		  (Rest1, Rest2)
	  %% Line 316
	  <[X|_cor14],[Y|_cor15]>
	      when let <_cor4> =
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor5> =
			call 'erlang':'is_integer'
			    (Y)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 317
	      'false'
	  %% Line 318
	  <[],[]> when 'true' ->
	      %% Line 319
	      'true'
	  %% Line 320
	  <[],[_cor16|_cor17]> when 'true' ->
	      %% Line 321
	      'false'
	  %% Line 322
	  <[_cor18|_cor19],[]> when 'true' ->
	      %% Line 323
	      'false'
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'match_part',2}}] )
	    -| ['compiler_generated'] )
	end
'will_always_match'/1 =
    %% Line 325
    fun (_cor0) ->
	case _cor0 of
	  <['accept']> when 'true' ->
	      'true'
	  %% Line 326
	  <_cor2> when 'true' ->
	      'false'
	end
'prepare_base'/1 =
    %% Line 328
    fun (_cor0) ->
	let <Base1> =
	    %% Line 329
	    call 'filename':'join'
		(_cor0, [120])
	in  %% Line 330
	    case call 'lists':'reverse'
		     (Base1) of
	      <[120|Base2]> when 'true' ->
		  %% Line 331
		  call 'lists':'reverse'
		      (Base2)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'do_double_star'/6 =
    %% Line 333
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Base,[H|T],Rest,Result,Mod,Root> when 'true' ->
	      let <_cor7> =
		  %% Line 334
		  case Root of
		    %% Line 335
		    <'false'> when 'true' ->
			call 'filename':'join'
			    (Base, H)
		    %% Line 336
		    <'true'> when 'true' ->
			H
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor10> =
		      %% Line 338
		      case apply 'do_list_dir'/2
			       (_cor7, Mod) of
			%% Line 339
			<{'ok',Files}> when 'true' ->
			    %% Line 340
			    apply 'do_double_star'/6
				(_cor7, Files, Rest, Result, Mod, 'false')
			%% Line 341
			<_cor24> when 'true' ->
			    Result
		      end
		  in  let <_cor14> =
			  %% Line 343
			  ( case Root of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    call 'erlang':'=:='
					(Rest, [])
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor12> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor12}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor16> =
			      %% Line 343
			      case _cor14 of
				%% Line 344
				<'true'> when 'true' ->
				    _cor10
				%% Line 345
				<'false'> when 'true' ->
				    apply 'do_wildcard_3'/4
					(_cor7, Rest, _cor10, Mod)
				( <_cor15> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor15})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 347
			      apply 'do_double_star'/6
				  (Base, T, Rest, _cor16, Mod, Root)
	  %% Line 348
	  <_X_Base,[],_X_Rest,Result,_X_Mod,_X_Root> when 'true' ->
	      %% Line 349
	      Result
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'do_double_star',6}}] )
	    -| ['compiler_generated'] )
	end
'do_star'/2 =
    %% Line 351
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pattern,File = [_cor6|Rest]> when 'true' ->
	      %% Line 352
	      ( case apply 'match_part'/2
			 (Pattern, File) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'do_star'/2
			    (Pattern, Rest)
		    -| ['compiler_generated'] )
		  ( <_cor2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 353
	  <Pattern,[]> when 'true' ->
	      %% Line 354
	      apply 'match_part'/2
		  (Pattern, [])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_star',2}}] )
	    -| ['compiler_generated'] )
	end
'do_alt'/2 =
    %% Line 356
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Alt|Rest],File> when 'true' ->
	      %% Line 357
	      ( case apply 'match_part'/2
			 (Alt, File) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'do_alt'/2
			    (Rest, File)
		    -| ['compiler_generated'] )
		  ( <_cor2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 358
	  <[],_X_File> when 'true' ->
	      %% Line 359
	      'false'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_alt',2}}] )
	    -| ['compiler_generated'] )
	end
'do_list_dir'/2 =
    %% Line 361
    fun (_cor1,_cor0) ->
	apply 'eval_list_dir'/2
	    (_cor1, _cor0)
'compile_wildcard'/1 =
    %% Line 367
    fun (_cor0) ->
	case _cor0 of
	  <Pattern>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor5> =
		  %% Line 368
		  try
		      apply 'compile_wildcard'/2
			  (Pattern, [46])
		  of <_cor1> ->
		      _cor1
		  catch <_cor4,_cor3,_cor2> ->
		      case <_cor4,_cor3,_cor2> of
			<'error',UnUsUalVaRiAbLeNaMe = {'badpattern',_cor7},_cor8> when 'true' ->
			    call 'erlang':'error'
				(UnUsUalVaRiAbLeNaMe)
			( <_cor4,_cor3,_cor2> when 'true' ->
			      primop 'raise'
				  (_cor2, _cor3)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 368
		  {'compiled_wildcard',_cor5}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'compile_wildcard',1}}] )
	    -| ['compiler_generated'] )
	end
'compile_wildcard'/2 =
    %% Line 370
    fun (_cor1,_cor0) ->
	%% Line 371
	case call 'filename':'split'
		 (_cor1) of
	  <[Root|Rest]> when 'true' ->
	      %% Line 372
	      case call 'filename':'pathtype'
		       (Root) of
		%% Line 373
		<'relative'> when 'true' ->
		    let <Cwd> =
			%% Line 374
			call 'filename':'join'
			    ([_cor0|[]])
		    in  %% Line 375
			apply 'compile_wildcard_2'/2
			    ([Root|Rest], {'cwd',Cwd})
		%% Line 376
		<_cor7> when 'true' ->
		    %% Line 377
		    apply 'compile_wildcard_2'/2
			(Rest, {'root',0,Root})
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'compile_wildcard_2'/2 =
    %% Line 380
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Part|Rest],Root> when 'true' ->
	      %% Line 381
	      case apply 'compile_part'/1
		       (Part) of
		%% Line 382
		<_cor6>
		    when call 'erlang':'=:='
			  (_cor6,
			   Part) ->
		    let <_cor2> =
			%% Line 383
			apply 'compile_join'/2
			    (Root, Part)
		    in  %% Line 383
			apply 'compile_wildcard_2'/2
			    (Rest, _cor2)
		%% Line 384
		<Pattern> when 'true' ->
		    %% Line 385
		    apply 'compile_wildcard_3'/2
			(Rest, [Pattern|[Root|[]]])
	      end
	  %% Line 387
	  <[],{'root',PrefixLen,Root}> when 'true' ->
	      %% Line 388
	      {{'exists',Root},PrefixLen}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'compile_wildcard_2',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_wildcard_3'/2 =
    %% Line 390
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Part|Rest],Result> when 'true' ->
	      let <_cor2> =
		  %% Line 391
		  apply 'compile_part'/1
		      (Part)
	      in  %% Line 391
		  apply 'compile_wildcard_3'/2
		      (Rest, [_cor2|Result])
	  %% Line 392
	  <[],Result> when 'true' ->
	      %% Line 393
	      case call 'lists':'reverse'
		       (Result) of
		%% Line 394
		<[{'root',PrefixLen,Root}|Compiled]> when 'true' ->
		    %% Line 395
		    {[Root|Compiled],PrefixLen}
		%% Line 396
		<[{'cwd',Root}|Compiled]> when 'true' ->
		    let <_cor3> =
			%% Line 397
			call 'filename':'join'
			    (Root, [120])
		    in  let <_cor4> =
			    %% Line 397
			    call 'erlang':'length'
				(_cor3)
			in  let <_cor5> =
				%% Line 397
				call 'erlang':'-'
				    (_cor4, 1)
			    in  %% Line 397
				{[Root|Compiled],_cor5}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'compile_wildcard_3',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_join'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'cwd',[46]},File> when 'true' ->
	      %% Line 401
	      {'root',0,File}
	  %% Line 402
	  <{'cwd',Cwd},File0> when 'true' ->
	      let <File> =
		  %% Line 403
		  call 'filename':'join'
		      ([File0|[]])
	      in  let <Root> =
		      %% Line 404
		      call 'filename':'join'
			  (Cwd, File)
		  in  let <_cor5> =
			  %% Line 405
			  call 'erlang':'length'
			      (Root)
		      in  let <_cor4> =
			      %% Line 405
			      call 'erlang':'length'
				  (File)
			  in  let <PrefixLen> =
				  %% Line 405
				  call 'erlang':'-'
				      (_cor5, _cor4)
			      in  %% Line 406
				  {'root',PrefixLen,Root}
	  %% Line 407
	  <{'root',PrefixLen,Root},File> when 'true' ->
	      let <_cor7> =
		  %% Line 408
		  call 'filename':'join'
		      (Root, File)
	      in  %% Line 408
		  {'root',PrefixLen,_cor7}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'compile_join',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_part'/1 =
    %% Line 410
    fun (_cor0) ->
	%% Line 411
	apply 'compile_part'/3
	    (_cor0, 'false', [])
'compile_part_to_sep'/1 =
    %% Line 413
    fun (_cor0) ->
	%% Line 414
	apply 'compile_part'/3
	    (_cor0, 'true', [])
'compile_part'/3 =
    %% Line 416
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],'true',_cor11> when 'true' ->
	      %% Line 417
	      apply 'badpattern'/1
		  ('missing_delimiter')
	  %% Line 418
	  <[44|Rest],'true',Result> when 'true' ->
	      let <_cor3> =
		  %% Line 419
		  call 'lists':'reverse'
		      (Result)
	      in  %% Line 419
		  {'ok',44,_cor3,Rest}
	  %% Line 420
	  <[125|Rest],'true',Result> when 'true' ->
	      let <_cor4> =
		  %% Line 421
		  call 'lists':'reverse'
		      (Result)
	      in  %% Line 421
		  {'ok',125,_cor4,Rest}
	  %% Line 422
	  <[63|Rest],Upto,Result> when 'true' ->
	      %% Line 423
	      apply 'compile_part'/3
		  (Rest, Upto, ['question'|Result])
	  %% Line 424
	  <[42|[42]],Upto,Result> when 'true' ->
	      %% Line 425
	      apply 'compile_part'/3
		  ([], Upto, ['double_star'|Result])
	  %% Line 426
	  <[42|[42|Rest]],Upto,Result> when 'true' ->
	      %% Line 427
	      apply 'compile_part'/3
		  (Rest, Upto, ['star'|Result])
	  %% Line 428
	  <[42],Upto,Result> when 'true' ->
	      %% Line 429
	      apply 'compile_part'/3
		  ([], Upto, ['accept'|Result])
	  %% Line 430
	  <[42|Rest],Upto,Result> when 'true' ->
	      %% Line 431
	      apply 'compile_part'/3
		  (Rest, Upto, ['star'|Result])
	  %% Line 432
	  <[91|Rest],Upto,Result> when 'true' ->
	      let <_cor5> =
		  %% Line 433
		  call 'ordsets':'new'
		      ()
	      in  %% Line 433
		  case apply 'compile_charset'/2
			   (Rest, _cor5) of
		    %% Line 434
		    <{'ok',Charset,Rest1}> when 'true' ->
			%% Line 435
			apply 'compile_part'/3
			    (Rest1, Upto, [Charset|Result])
		    %% Line 436
		    <'error'> when 'true' ->
			%% Line 437
			apply 'compile_part'/3
			    (Rest, Upto, [91|Result])
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 439
	  <[123|Rest],Upto,Result> when 'true' ->
	      %% Line 440
	      case apply 'compile_alt'/1
		       (Rest) of
		%% Line 441
		<{'ok',Alt}> when 'true' ->
		    %% Line 442
		    call 'lists':'reverse'
			(Result, [Alt|[]])
		%% Line 443
		<'error'> when 'true' ->
		    %% Line 444
		    apply 'compile_part'/3
			(Rest, Upto, [123|Result])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 446
	  <[X|Rest],Upto,Result> when 'true' ->
	      %% Line 447
	      apply 'compile_part'/3
		  (Rest, Upto, [X|Result])
	  %% Line 448
	  <[],_X_Upto,Result> when 'true' ->
	      %% Line 449
	      call 'lists':'reverse'
		  (Result)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'compile_part',3}}] )
	    -| ['compiler_generated'] )
	end
'compile_charset'/2 =
    %% Line 451
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[93|Rest],Ordset> when 'true' ->
	      let <_cor2> =
		  %% Line 452
		  call 'ordsets':'add_element'
		      (93, Ordset)
	      in  %% Line 452
		  apply 'compile_charset1'/2
		      (Rest, _cor2)
	  %% Line 453
	  <[],_X_Ordset> when 'true' ->
	      %% Line 454
	      'error'
	  %% Line 455
	  <List,Ordset> when 'true' ->
	      %% Line 456
	      apply 'compile_charset1'/2
		  (List, Ordset)
	end
'compile_charset1'/2 =
    %% Line 458
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Lower|[45|[Upper|Rest]]],Ordset>
	      when call 'erlang':'=<'
		    (Lower,
		     Upper) ->
	      let <_cor2> =
		  %% Line 459
		  apply 'compile_range'/3
		      (Lower, Upper, Ordset)
	      in  %% Line 459
		  apply 'compile_charset1'/2
		      (Rest, _cor2)
	  %% Line 460
	  <[93|Rest],Ordset> when 'true' ->
	      let <_cor3> =
		  %% Line 461
		  call 'gb_sets':'from_ordset'
		      (Ordset)
	      in  %% Line 461
		  {'ok',{'one_of',_cor3},Rest}
	  %% Line 462
	  <[X|Rest],Ordset> when 'true' ->
	      let <_cor4> =
		  %% Line 463
		  call 'ordsets':'add_element'
		      (X, Ordset)
	      in  %% Line 463
		  apply 'compile_charset1'/2
		      (Rest, _cor4)
	  %% Line 464
	  <[],_X_Ordset> when 'true' ->
	      %% Line 465
	      'error'
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'compile_charset1',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_range'/3 =
    %% Line 467
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Lower,Current,Ordset>
	      when call 'erlang':'=<'
		    (Lower,
		     Current) ->
	      let <_cor4> =
		  %% Line 468
		  call 'erlang':'-'
		      (Current, 1)
	      in  let <_cor3> =
		      %% Line 468
		      call 'ordsets':'add_element'
			  (Current, Ordset)
		  in  %% Line 468
		      apply 'compile_range'/3
			  (Lower, _cor4, _cor3)
	  %% Line 469
	  <_cor8,_cor9,Ordset> when 'true' ->
	      %% Line 470
	      Ordset
	end
'compile_alt'/1 =
    %% Line 472
    fun (_cor0) ->
	%% Line 473
	apply 'compile_alt'/2
	    (_cor0, [])
'compile_alt'/2 =
    %% Line 475
    fun (_cor1,_cor0) ->
	%% Line 476
	case apply 'compile_part_to_sep'/1
		 (_cor1) of
	  %% Line 477
	  <{'ok',44,AltPattern,Rest}> when 'true' ->
	      %% Line 478
	      apply 'compile_alt'/2
		  (Rest, [AltPattern|_cor0])
	  %% Line 479
	  <{'ok',125,AltPattern,Rest}> when 'true' ->
	      let <NewResult> =
		  %% Line 480
		  [AltPattern|_cor0]
	      in  let <RestPattern> =
		      %% Line 481
		      apply 'compile_part'/1
			  (Rest)
		  in  let <_cor9> =
			  %% Line 482
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[Alt|_cor5]> when 'true' ->
					      let <_cor7> =
						  call 'erlang':'++'
						      (Alt, RestPattern)
					      in  let <_cor8> =
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [_cor7|_cor8]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (NewResult)
			    -| ['list_comprehension'] )
		      in  %% Line 482
			  {'ok',{'alt',_cor9}}
	  %% Line 483
	  <_cor13>
	      when call 'erlang':'=:='
		    (_cor13,
		     _cor1) ->
	      %% Line 484
	      'error'
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'badpattern'/1 =
    %% Line 487
    fun (_cor0) ->
	%% Line 488
	call 'erlang':'error'
	    ({'badpattern',_cor0})
'eval_read_file_info'/2 =
    %% Line 490
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,'file'> when 'true' ->
	      %% Line 491
	      call 'file':'read_link_info'
		  (File)
	  %% Line 492
	  <File,'erl_prim_loader'> when 'true' ->
	      %% Line 493
	      case call 'erl_prim_loader':'read_file_info'
		       (File) of
		%% Line 494
		<'error'> when 'true' ->
		    {'error','erl_prim_loader'}
		%% Line 495
		<Res> when 'true' ->
		    Res
	      end
	  %% Line 497
	  <File,Mod> when 'true' ->
	      %% Line 498
	      call Mod:'read_file_info'
		  (File)
	end
'eval_list_dir'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,'file'> when 'true' ->
	      %% Line 501
	      call 'file':'list_dir'
		  (Dir)
	  %% Line 502
	  <Dir,'erl_prim_loader'> when 'true' ->
	      %% Line 503
	      case call 'erl_prim_loader':'list_dir'
		       (Dir) of
		%% Line 504
		<'error'> when 'true' ->
		    {'error','erl_prim_loader'}
		%% Line 505
		<Res> when 'true' ->
		    Res
	      end
	  %% Line 507
	  <Dir,Mod> when 'true' ->
	      %% Line 508
	      call Mod:'list_dir'
		  (Dir)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('filelib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('filelib', _cor0)
end