module 'sets' ['add_element'/2,
	       'del_element'/2,
	       'filter'/2,
	       'fold'/3,
	       'from_list'/1,
	       'intersection'/1,
	       'intersection'/2,
	       'is_disjoint'/2,
	       'is_element'/2,
	       'is_set'/1,
	       'is_subset'/2,
	       'module_info'/0,
	       'module_info'/1,
	       'new'/0,
	       'size'/1,
	       'subtract'/2,
	       'to_list'/1,
	       'union'/1,
	       'union'/2]
    attributes [%% Line 46
		'export_type' =
		    %% Line 46
		    [{'set',0}|[{'set',1}]],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'seg',{'type',58,'tuple','any'},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'segs',{'type',59,'tuple','any'},[{'var',59,'_Element'}]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','set'},[{'typed_record_field',{'record_field',63,{'atom',63,'size'},{'integer',63,0}},{'type',63,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'n'},{'integer',64,16}},{'type',64,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',65,{'atom',65,'maxn'},{'integer',65,16}},{'type',65,'pos_integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'bso'},{'op',66,'div',{'integer',66,16},{'integer',66,2}}},{'type',66,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'exp_size'},{'op',67,'*',{'integer',67,16},{'integer',67,5}}},{'type',67,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'con_size'},{'op',68,'*',{'integer',68,16},{'integer',68,3}}},{'type',68,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'empty'}},{'type',69,'union',[{'atom',69,'undefined'}|[{'type',69,'seg',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'segs'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'segs',[{'var',70,'_'}]}]]}}]]]]]]]],[]}],
		%% Line 73
		'opaque' =
		    %% Line 73
		    [{'set',{'type',73,'set',[{'var',73,'_'}]},[]}],
		%% Line 75
		'opaque' =
		    %% Line 75
		    [{'set',{'type',75,'record',[{'atom',75,'set'}|[{'type',75,'field_type',[{'atom',75,'segs'}|[{'type',75,'segs',[{'var',75,'Element'}]}]]}]]},[{'var',75,'Element'}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'new',0},[{'type',80,'fun',[{'type',80,'product',[]}|[{'type',80,'set',[]}]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'is_set',1},[{'type',87,'bounded_fun',[{'type',87,'fun',[{'type',87,'product',[{'var',87,'Set'}]}|[{'type',87,'boolean',[]}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Set'}|[{'type',88,'term',[]}]]]]}]]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'size',1},[{'type',94,'bounded_fun',[{'type',94,'fun',[{'type',94,'product',[{'var',94,'Set'}]}|[{'type',94,'non_neg_integer',[]}]]}|[[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Set'}|[{'type',95,'set',[]}]]]]}]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'to_list',1},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'Set'}]}|[{'var',100,'List'}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Set'}|[{'type',101,'set',[{'var',101,'Element'}]}]]]]}|[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'List'}|[{'type',102,'list',[{'var',102,'Element'}]}]]]]}]]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'from_list',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'List'}]}|[{'var',108,'Set'}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'List'}|[{'type',109,'list',[{'var',109,'Element'}]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Set'}|[{'type',110,'set',[{'var',110,'Element'}]}]]]]}]]]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'is_element',2},[{'type',116,'bounded_fun',[{'type',116,'fun',[{'type',116,'product',[{'var',116,'Element'}|[{'var',116,'Set'}]]}|[{'type',116,'boolean',[]}]]}|[[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Set'}|[{'type',117,'set',[{'var',117,'Element'}]}]]]]}]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'add_element',2},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'Element'}|[{'var',125,'Set1'}]]}|[{'var',125,'Set2'}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Set1'}|[{'type',126,'set',[{'var',126,'Element'}]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Set2'}|[{'type',127,'set',[{'var',127,'Element'}]}]]]]}]]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'add_bkt_el',3},[{'type',133,'fun',[{'type',133,'product',[{'var',133,'T'}|[{'type',133,'list',[{'var',133,'T'}]}|[{'type',133,'list',[{'var',133,'T'}]}]]]}|[{'type',133,'tuple',[{'type',133,'list',[{'var',133,'T'}]}|[{'type',133,'union',[{'integer',133,0}|[{'integer',133,1}]]}]]}]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'del_element',2},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'Element'}|[{'var',141,'Set1'}]]}|[{'var',141,'Set2'}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Set1'}|[{'type',142,'set',[{'var',142,'Element'}]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Set2'}|[{'type',143,'set',[{'var',143,'Element'}]}]]]]}]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'del_bkt_el',2},[{'type',149,'fun',[{'type',149,'product',[{'var',149,'T'}|[{'type',149,'list',[{'var',149,'T'}]}]]}|[{'type',149,'tuple',[{'type',149,'list',[{'var',149,'T'}]}|[{'type',149,'union',[{'integer',149,0}|[{'integer',149,1}]]}]]}]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'union',2},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'Set1'}|[{'var',158,'Set2'}]]}|[{'var',158,'Set3'}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Set1'}|[{'type',159,'set',[{'var',159,'Element'}]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Set2'}|[{'type',160,'set',[{'var',160,'Element'}]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Set3'}|[{'type',161,'set',[{'var',161,'Element'}]}]]]]}]]]]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'union',1},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'SetList'}]}|[{'var',169,'Set'}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'SetList'}|[{'type',170,'list',[{'type',170,'set',[{'var',170,'Element'}]}]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Set'}|[{'type',171,'set',[{'var',171,'Element'}]}]]]]}]]]]}]}],
		%% Line 177
		'spec' =
		    %% Line 177
		    [{{'union1',2},[{'type',177,'fun',[{'type',177,'product',[{'type',177,'set',[{'var',177,'E'}]}|[{'type',177,'list',[{'type',177,'set',[{'var',177,'E'}]}]}]]}|[{'type',177,'set',[{'var',177,'E'}]}]]}]}],
		%% Line 184
		'spec' =
		    %% Line 184
		    [{{'intersection',2},[{'type',184,'bounded_fun',[{'type',184,'fun',[{'type',184,'product',[{'var',184,'Set1'}|[{'var',184,'Set2'}]]}|[{'var',184,'Set3'}]]}|[[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Set1'}|[{'type',185,'set',[{'var',185,'Element'}]}]]]]}|[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'Set2'}|[{'type',186,'set',[{'var',186,'Element'}]}]]]]}|[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Set3'}|[{'type',187,'set',[{'var',187,'Element'}]}]]]]}]]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'intersection',1},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'SetList'}]}|[{'var',195,'Set'}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'SetList'}|[{'type',196,'nonempty_list',[{'type',196,'set',[{'var',196,'Element'}]}]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Set'}|[{'type',197,'set',[{'var',197,'Element'}]}]]]]}]]]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'intersection1',2},[{'type',202,'fun',[{'type',202,'product',[{'type',202,'set',[{'var',202,'E'}]}|[{'type',202,'list',[{'type',202,'set',[{'var',202,'E'}]}]}]]}|[{'type',202,'set',[{'var',202,'E'}]}]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'is_disjoint',2},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'Set1'}|[{'var',209,'Set2'}]]}|[{'type',209,'boolean',[]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Set1'}|[{'type',210,'set',[{'var',210,'Element'}]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Set2'}|[{'type',211,'set',[{'var',211,'Element'}]}]]]]}]]]]}]}],
		%% Line 224
		'spec' =
		    %% Line 224
		    [{{'subtract',2},[{'type',224,'bounded_fun',[{'type',224,'fun',[{'type',224,'product',[{'var',224,'Set1'}|[{'var',224,'Set2'}]]}|[{'var',224,'Set3'}]]}|[[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Set1'}|[{'type',225,'set',[{'var',225,'Element'}]}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'Set2'}|[{'type',226,'set',[{'var',226,'Element'}]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Set3'}|[{'type',227,'set',[{'var',227,'Element'}]}]]]]}]]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'is_subset',2},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'Set1'}|[{'var',234,'Set2'}]]}|[{'type',234,'boolean',[]}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'Set1'}|[{'type',235,'set',[{'var',235,'Element'}]}]]]]}|[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Set2'}|[{'type',236,'set',[{'var',236,'Element'}]}]]]]}]]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'fold',3},[{'type',242,'bounded_fun',[{'type',242,'fun',[{'type',242,'product',[{'var',242,'Function'}|[{'var',242,'Acc0'}|[{'var',242,'Set'}]]]}|[{'var',242,'Acc1'}]]}|[[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Function'}|[{'type',243,'fun',[{'type',243,'product',[{'var',243,'Element'}|[{'var',243,'AccIn'}]]}|[{'var',243,'AccOut'}]]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Set'}|[{'type',244,'set',[{'var',244,'Element'}]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'Acc0'}|[{'var',245,'Acc'}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Acc1'}|[{'var',246,'Acc'}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'AccIn'}|[{'var',247,'Acc'}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'AccOut'}|[{'var',248,'Acc'}]]]]}]]]]]]]]}]}],
		%% Line 253
		'spec' =
		    %% Line 253
		    [{{'filter',2},[{'type',253,'bounded_fun',[{'type',253,'fun',[{'type',253,'product',[{'var',253,'Pred'}|[{'var',253,'Set1'}]]}|[{'var',253,'Set2'}]]}|[[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'Pred'}|[{'type',254,'fun',[{'type',254,'product',[{'var',254,'Element'}]}|[{'type',254,'boolean',[]}]]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Set1'}|[{'type',255,'set',[{'var',255,'Element'}]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Set2'}|[{'type',256,'set',[{'var',256,'Element'}]}]]]]}]]]]]}]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'get_slot',2},[{'type',262,'fun',[{'type',262,'product',[{'type',262,'set',[{'var',262,'E'}]}|[{'var',262,'E'}]]}|[{'type',262,'non_neg_integer',[]}]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'get_bucket',2},[{'type',271,'fun',[{'type',271,'product',[{'type',271,'set',[]}|[{'type',271,'non_neg_integer',[]}]]}|[{'type',271,'term',[]}]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'on_bucket',3},[{'type',276,'fun',[{'type',276,'product',[{'type',276,'fun',[{'type',276,'product',[{'var',276,'_'}]}|[{'type',276,'tuple',[{'type',276,'list',[{'var',276,'_'}]}|[{'type',276,'union',[{'integer',276,0}|[{'integer',276,1}]]}]]}]]}|[{'type',276,'set',[{'var',276,'E'}]}|[{'type',276,'non_neg_integer',[]}]]]}|[{'type',277,'tuple',[{'type',277,'set',[{'var',277,'E'}]}|[{'type',277,'union',[{'integer',277,0}|[{'integer',277,1}]]}]]}]]}]}],
		%% Line 351
		'spec' =
		    %% Line 351
		    [{{'maybe_expand',2},[{'type',351,'fun',[{'type',351,'product',[{'type',351,'set',[{'var',351,'E'}]}|[{'type',351,'union',[{'integer',351,0}|[{'integer',351,1}]]}]]}|[{'type',351,'set',[{'var',351,'E'}]}]]}]}],
		%% Line 369
		'spec' =
		    %% Line 369
		    [{{'maybe_expand_segs',1},[{'type',369,'fun',[{'type',369,'product',[{'type',369,'set',[{'var',369,'E'}]}]}|[{'type',369,'set',[{'var',369,'E'}]}]]}]}],
		%% Line 376
		'spec' =
		    %% Line 376
		    [{{'maybe_contract',2},[{'type',376,'fun',[{'type',376,'product',[{'type',376,'set',[{'var',376,'E'}]}|[{'type',376,'non_neg_integer',[]}]]}|[{'type',376,'set',[{'var',376,'E'}]}]]}]}],
		%% Line 395
		'spec' =
		    %% Line 395
		    [{{'maybe_contract_segs',1},[{'type',395,'fun',[{'type',395,'product',[{'type',395,'set',[{'var',395,'E'}]}]}|[{'type',395,'set',[{'var',395,'E'}]}]]}]}],
		%% Line 403
		'spec' =
		    %% Line 403
		    [{{'rehash',4},[{'type',403,'fun',[{'type',403,'product',[{'type',403,'list',[{'var',403,'T'}]}|[{'type',403,'integer',[]}|[{'type',403,'pos_integer',[]}|[{'type',403,'pos_integer',[]}]]]]}|[{'type',403,'tuple',[{'type',403,'list',[{'var',403,'T'}]}|[{'type',403,'list',[{'var',403,'T'}]}]]}]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'mk_seg',1},[{'type',413,'fun',[{'type',413,'product',[{'integer',413,16}]}|[{'type',413,'seg',[]}]]}]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'expand_segs',2},[{'type',422,'fun',[{'type',422,'product',[{'type',422,'segs',[{'var',422,'E'}]}|[{'type',422,'seg',[]}]]}|[{'type',422,'segs',[{'var',422,'E'}]}]]}]}],
		%% Line 440
		'spec' =
		    %% Line 440
		    [{{'contract_segs',1},[{'type',440,'fun',[{'type',440,'product',[{'type',440,'segs',[{'var',440,'E'}]}]}|[{'type',440,'segs',[{'var',440,'E'}]}]]}]}]]
'new'/0 =
    %% Line 81
    fun () ->
	let <Empty> =
	    %% Line 82
	    apply 'mk_seg'/1
		(16)
	in  %% Line 83
	    {'set',0,16,16,8,80,48,Empty,{Empty}}
'is_set'/1 =
    %% Line 89
    fun (_cor0) ->
	case _cor0 of
	  <{'set',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      'true'
	  %% Line 90
	  <_cor10> when 'true' ->
	      'false'
	end
'size'/1 =
    %% Line 96
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'set',_rec0,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec0
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','set'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'to_list'/1 =
    %% Line 103
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 104
	    ( fun (_cor2,_cor1) ->
		  [_cor2|_cor1]
	      -| [{'id',{0,0,'-to_list/1-fun-0-'}}] )
	in  %% Line 104
	    apply 'fold'/3
		(_cor5, [], _cor0)
'from_list'/1 =
    %% Line 111
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 112
	    ( fun (_cor3,_cor2) ->
		  apply 'add_element'/2
		      (_cor3, _cor2)
	      -| [{'id',{0,0,'-from_list/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 112
		apply 'new'/0
		    ()
	    in  %% Line 112
		call 'lists':'foldl'
		    (_cor6, _cor1, _cor0)
'is_element'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	let <Slot> =
	    %% Line 119
	    apply 'get_slot'/2
		(_cor0, _cor1)
	in  let <Bkt> =
		%% Line 120
		apply 'get_bucket'/2
		    (_cor0, Slot)
	    in  %% Line 121
		call 'lists':'member'
		    (_cor1, Bkt)
'add_element'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	let <Slot> =
	    %% Line 129
	    apply 'get_slot'/2
		(_cor0, _cor1)
	in  let <_cor5> =
		%% Line 130
		( fun (_cor3) ->
		      apply 'add_bkt_el'/3
			  (_cor1, _cor3, _cor3)
		  -| [{'id',{0,0,'-add_element/2-fun-0-'}}] )
	    in  %% Line 130
		case apply 'on_bucket'/3
			 (_cor5, _cor0, Slot) of
		  <{S1,Ic}> when 'true' ->
		      %% Line 131
		      apply 'maybe_expand'/2
			  (S1, Ic)
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor6})
		    -| ['compiler_generated'] )
		end
'add_bkt_el'/3 =
    %% Line 134
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E,[_cor6|_cor7],Bkt>
	      when call 'erlang':'=:='
		    (_cor6,
		     E) ->
	      {Bkt,0}
	  %% Line 135
	  <E,[_cor8|B],Bkt> when 'true' ->
	      %% Line 136
	      apply 'add_bkt_el'/3
		  (E, B, Bkt)
	  %% Line 137
	  <E,[],Bkt> when 'true' ->
	      {[E|Bkt],1}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'add_bkt_el',3}}] )
	    -| ['compiler_generated'] )
	end
'del_element'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	let <Slot> =
	    %% Line 145
	    apply 'get_slot'/2
		(_cor0, _cor1)
	in  let <_cor5> =
		%% Line 146
		( fun (_cor3) ->
		      apply 'del_bkt_el'/2
			  (_cor1, _cor3)
		  -| [{'id',{0,0,'-del_element/2-fun-0-'}}] )
	    in  %% Line 146
		case apply 'on_bucket'/3
			 (_cor5, _cor0, Slot) of
		  <{S1,Dc}> when 'true' ->
		      %% Line 147
		      apply 'maybe_contract'/2
			  (S1, Dc)
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor6})
		    -| ['compiler_generated'] )
		end
'del_bkt_el'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E,[_cor5|Bkt]>
	      when call 'erlang':'=:='
		    (_cor5,
		     E) ->
	      {Bkt,1}
	  %% Line 151
	  <E,[Other|Bkt0]> when 'true' ->
	      %% Line 152
	      case apply 'del_bkt_el'/2
		       (E, Bkt0) of
		<{Bkt1,Dc}> when 'true' ->
		    %% Line 153
		    {[Other|Bkt1],Dc}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 154
	  <_cor6,[]> when 'true' ->
	      {[],0}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'del_bkt_el',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'set',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},S2 = {'set',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}>
	      when call 'erlang':'<'
		    (_cor27,
		     _cor35) ->
	      let <_cor19> =
		  %% Line 163
		  ( fun (_cor16,_cor15) ->
			apply 'add_element'/2
			    (_cor16, _cor15)
		    -| [{'id',{0,0,'-union/2-fun-0-'}}] )
	      in  %% Line 163
		  apply 'fold'/3
		      (_cor19, S2, S1)
	  %% Line 164
	  <S1,S2> when 'true' ->
	      let <_cor24> =
		  %% Line 165
		  ( fun (_cor21,_cor20) ->
			apply 'add_element'/2
			    (_cor21, _cor20)
		    -| [{'id',{0,0,'-union/2-fun-1-'}}] )
	      in  %% Line 165
		  apply 'fold'/3
		      (_cor24, S1, S2)
	end
'union'/1 =
    %% Line 172
    fun (_cor0) ->
	case _cor0 of
	  <[S1|[S2|Ss]]> when 'true' ->
	      let <_cor1> =
		  %% Line 173
		  apply 'union'/2
		      (S1, S2)
	      in  %% Line 173
		  apply 'union1'/2
		      (_cor1, Ss)
	  %% Line 174
	  <[S|[]]> when 'true' ->
	      S
	  %% Line 175
	  <[]> when 'true' ->
	      apply 'new'/0
		  ()
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'union',1}}] )
	    -| ['compiler_generated'] )
	end
'union1'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1,[S2|Ss]> when 'true' ->
	      let <_cor2> =
		  %% Line 179
		  apply 'union'/2
		      (S1, S2)
	      in  %% Line 179
		  apply 'union1'/2
		      (_cor2, Ss)
	  %% Line 180
	  <S1,[]> when 'true' ->
	      S1
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'union1',2}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'set',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30},S2 = {'set',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}>
	      when call 'erlang':'<'
		    (_cor23,
		     _cor31) ->
	      let <_cor17> =
		  %% Line 189
		  ( fun (_cor15) ->
			apply 'is_element'/2
			    (_cor15, S2)
		    -| [{'id',{0,0,'-intersection/2-fun-0-'}}] )
	      in  %% Line 189
		  apply 'filter'/2
		      (_cor17, S1)
	  %% Line 190
	  <S1,S2> when 'true' ->
	      let <_cor20> =
		  %% Line 191
		  ( fun (_cor18) ->
			apply 'is_element'/2
			    (_cor18, S1)
		    -| [{'id',{0,0,'-intersection/2-fun-1-'}}] )
	      in  %% Line 191
		  apply 'filter'/2
		      (_cor20, S2)
	end
'intersection'/1 =
    %% Line 198
    fun (_cor0) ->
	case _cor0 of
	  <[S1|[S2|Ss]]> when 'true' ->
	      let <_cor1> =
		  %% Line 199
		  apply 'intersection'/2
		      (S1, S2)
	      in  %% Line 199
		  apply 'intersection1'/2
		      (_cor1, Ss)
	  %% Line 200
	  <[S|[]]> when 'true' ->
	      S
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'intersection',1}}] )
	    -| ['compiler_generated'] )
	end
'intersection1'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1,[S2|Ss]> when 'true' ->
	      let <_cor2> =
		  %% Line 204
		  apply 'intersection'/2
		      (S1, S2)
	      in  %% Line 204
		  apply 'intersection1'/2
		      (_cor2, Ss)
	  %% Line 205
	  <S1,[]> when 'true' ->
	      S1
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'intersection1',2}}] )
	    -| ['compiler_generated'] )
	end
'is_disjoint'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'set',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36},S2 = {'set',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}>
	      when call 'erlang':'<'
		    (_cor29,
		     _cor37) ->
	      let <_cor20> =
		  %% Line 213
		  ( fun (_cor17,_cor16) ->
			case <_cor17,_cor16> of
			  <_cor45,'false'> when 'true' ->
			      'false'
			  %% Line 214
			  <E,'true'> when 'true' ->
			      let <_cor15> =
				  apply 'is_element'/2
				      (E, S2)
			      in  call 'erlang':'not'
				      (_cor15)
			  ( <_cor19,_cor18> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor19,_cor18})
				  -| [{'function_name',{'-is_disjoint/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-is_disjoint/2-fun-0-'}}] )
	      in  %% Line 213
		  apply 'fold'/3
		      (_cor20, %% Line 215
			       'true', %% Line 215
				       S1)
	  %% Line 216
	  <S1,S2> when 'true' ->
	      let <_cor26> =
		  %% Line 217
		  ( fun (_cor23,_cor22) ->
			case <_cor23,_cor22> of
			  <_cor46,'false'> when 'true' ->
			      'false'
			  %% Line 218
			  <E,'true'> when 'true' ->
			      let <_cor21> =
				  apply 'is_element'/2
				      (E, S1)
			      in  call 'erlang':'not'
				      (_cor21)
			  ( <_cor25,_cor24> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor25,_cor24})
				  -| [{'function_name',{'-is_disjoint/2-fun-1-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-is_disjoint/2-fun-1-'}}] )
	      in  %% Line 217
		  apply 'fold'/3
		      (_cor26, %% Line 219
			       'true', %% Line 219
				       S2)
	end
'subtract'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 229
	    ( fun (_cor3) ->
		  let <_cor2> =
		      apply 'is_element'/2
			  (_cor3, _cor0)
		  in  call 'erlang':'not'
			  (_cor2)
	      -| [{'id',{0,0,'-subtract/2-fun-0-'}}] )
	in  %% Line 229
	    apply 'filter'/2
		(_cor5, _cor1)
'is_subset'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 238
	    ( fun (_cor5,_cor4) ->
		  ( case _cor4 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_element'/2
				(_cor5, _cor0)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor2}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-is_subset/2-fun-0-'}}] )
	in  %% Line 238
	    apply 'fold'/3
		(_cor8, 'true', _cor1)
'fold'/3 =
    %% Line 249
    fun (_cor2,_cor1,_cor0) ->
	apply 'fold_set'/3
	    (_cor2, _cor1, _cor0)
'filter'/2 =
    %% Line 257
    fun (_cor1,_cor0) ->
	apply 'filter_set'/2
	    (_cor1, _cor0)
'get_slot'/2 =
    %% Line 263
    fun (_cor1,_cor0) ->
	%% Line 264
	( case _cor1 of
	    ( <( {'set',_cor15,_cor16,_rec1,_cor17,_cor18,_cor19,_cor20,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <H> =
		      call 'erlang':'phash'
			  (_cor0, _rec1)
		  in  %% Line 265
		      case <> of
			%% Line 266
			<>
			    when ( call 'erlang':'>'
				    (H,
				     _cor16)
				-| ['compiler_generated'] ) ->
			    call 'erlang':'-'
				(H, _cor17)
			%% Line 267
			<> when 'true' ->
			    H
		      end
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','set'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_bucket'/2 =
    %% Line 272
    fun (_cor1,_cor0) ->
	( case _cor1 of
	    ( <( {'set',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_rec3}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'get_bucket_s'/2
		      (_rec3, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','set'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'on_bucket'/3 =
    %% Line 278
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 279
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor4> =
		%% Line 279
		call 'erlang':'div'
		    (_cor3, 16)
	    in  let <SegI> =
		    %% Line 279
		    call 'erlang':'+'
			(_cor4, 1)
		in  let <_cor6> =
			%% Line 280
			call 'erlang':'-'
			    (_cor0, 1)
		    in  let <_cor7> =
			    %% Line 280
			    call 'erlang':'rem'
				(_cor6, 16)
			in  let <BktI> =
				%% Line 280
				call 'erlang':'+'
				    (_cor7, 1)
			    in  %% Line 281
				( case _cor1 of
				    ( <( {'set',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec4}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Seg> =
					      %% Line 282
					      call 'erlang':'element'
						  (SegI, _rec4)
					  in  let <B0> =
						  %% Line 283
						  call 'erlang':'element'
						      (BktI, Seg)
					      in  %% Line 284
						  case apply _cor2
							   (B0) of
						    <{B1,Res}> when 'true' ->
							let <_cor15> =
							    %% Line 285
							    call 'erlang':'setelement'
								(BktI, Seg, B1)
							in  let <_rec5> =
								%% Line 285
								call 'erlang':'setelement'
								    (SegI, _rec4, _cor15)
							    in  let <_cor19> =
								    %% Line 285
								    call 'erlang':'setelement'
									(9, _cor1, _rec5)
								in  %% Line 285
								    {_cor19,Res}
						    ( <_cor14> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor14})
						      -| ['compiler_generated'] )
						  end
				      -| ['compiler_generated'] )
				    ( <_cor30> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','set'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
'fold_set'/3 =
    %% Line 295
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Acc,D>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      %% Line 296
	      ( case D of
		  ( <( {'set',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_rec7}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    %% Line 297
			    call 'erlang':'tuple_size'
				(_rec7)
			in  %% Line 297
			    apply 'fold_segs'/4
				(F, Acc, _rec7, _cor6)
		    -| ['compiler_generated'] )
		  ( <_cor17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fold_set',3}}] )
	    -| ['compiler_generated'] )
	end
'fold_segs'/4 =
    %% Line 299
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,Acc,Segs,I>
	      when call 'erlang':'>='
		    (I,
		     1) ->
	      let <Seg> =
		  %% Line 300
		  call 'erlang':'element'
		      (I, Segs)
	      in  let <_cor6> =
		      %% Line 301
		      call 'erlang':'tuple_size'
			  (Seg)
		  in  let <_cor7> =
			  %% Line 301
			  apply 'fold_seg'/4
			      (F, Acc, Seg, _cor6)
		      in  let <_cor5> =
			      %% Line 301
			      call 'erlang':'-'
				  (I, 1)
			  in  %% Line 301
			      apply 'fold_segs'/4
				  (F, _cor7, Segs, _cor5)
	  %% Line 302
	  <_cor12,Acc,_cor13,_cor14> when 'true' ->
	      Acc
	end
'fold_seg'/4 =
    %% Line 304
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,Acc,Seg,I>
	      when call 'erlang':'>='
		    (I,
		     1) ->
	      let <_cor5> =
		  %% Line 305
		  call 'erlang':'element'
		      (I, Seg)
	      in  let <_cor6> =
		      %% Line 305
		      apply 'fold_bucket'/3
			  (F, Acc, _cor5)
		  in  let <_cor4> =
			  %% Line 305
			  call 'erlang':'-'
			      (I, 1)
		      in  %% Line 305
			  apply 'fold_seg'/4
			      (F, _cor6, Seg, _cor4)
	  %% Line 306
	  <_cor11,Acc,_cor12,_cor13> when 'true' ->
	      Acc
	end
'fold_bucket'/3 =
    %% Line 308
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Acc,[E|Bkt]> when 'true' ->
	      let <_cor3> =
		  %% Line 309
		  apply F
		      (E, Acc)
	      in  %% Line 309
		  apply 'fold_bucket'/3
		      (F, _cor3, Bkt)
	  %% Line 310
	  <_cor7,Acc,[]> when 'true' ->
	      Acc
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fold_bucket',3}}] )
	    -| ['compiler_generated'] )
	end
'filter_set'/2 =
    %% Line 312
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,D>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      %% Line 313
	      ( case D of
		  ( <( {'set',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec8}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Segs0> =
			    call 'erlang':'tuple_to_list'
				(_rec8)
			in  %% Line 314
			    case apply 'filter_seg_list'/4
				     (F, Segs0, [], 0) of
			      <{Segs1,Fc}> when 'true' ->
				  let <_rec9> =
				      %% Line 315
				      call 'erlang':'list_to_tuple'
					  (Segs1)
				  in  let <_cor9> =
					  %% Line 315
					  call 'erlang':'setelement'
					      (9, D, _rec9)
				      in  %% Line 315
					  apply 'maybe_contract'/2
					      (_cor9, Fc)
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'filter_set',2}}] )
	    -| ['compiler_generated'] )
	end
'filter_seg_list'/4 =
    %% Line 317
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[Seg|Segs],Fss,Fc0> when 'true' ->
	      let <Bkts0> =
		  %% Line 318
		  call 'erlang':'tuple_to_list'
		      (Seg)
	      in  %% Line 319
		  case apply 'filter_bkt_list'/4
			   (F, Bkts0, [], Fc0) of
		    <{Bkts1,Fc1}> when 'true' ->
			let <_cor6> =
			    %% Line 320
			    call 'erlang':'list_to_tuple'
				(Bkts1)
			in  %% Line 320
			    apply 'filter_seg_list'/4
				(F, Segs, [_cor6|Fss], Fc1)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 321
	  <_cor12,[],Fss,Fc> when 'true' ->
	      let <_cor7> =
		  %% Line 322
		  call 'lists':'reverse'
		      (Fss, [])
	      in  %% Line 322
		  {_cor7,Fc}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'filter_seg_list',4}}] )
	    -| ['compiler_generated'] )
	end
'filter_bkt_list'/4 =
    %% Line 324
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[Bkt0|Bkts],Fbs,Fc0> when 'true' ->
	      %% Line 325
	      case apply 'filter_bucket'/4
		       (F, Bkt0, [], Fc0) of
		<{Bkt1,Fc1}> when 'true' ->
		    %% Line 326
		    apply 'filter_bkt_list'/4
			(F, Bkts, [Bkt1|Fbs], Fc1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 327
	  <_cor10,[],Fbs,Fc> when 'true' ->
	      let <_cor5> =
		  %% Line 328
		  call 'lists':'reverse'
		      (Fbs)
	      in  %% Line 328
		  {_cor5,Fc}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'filter_bkt_list',4}}] )
	    -| ['compiler_generated'] )
	end
'filter_bucket'/4 =
    %% Line 330
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[E|Bkt],Fb,Fc> when 'true' ->
	      %% Line 331
	      case apply F
		       (E) of
		%% Line 332
		<'true'> when 'true' ->
		    apply 'filter_bucket'/4
			(F, Bkt, [E|Fb], Fc)
		%% Line 333
		<'false'> when 'true' ->
		    let <_cor4> =
			call 'erlang':'+'
			    (Fc, 1)
		    in  apply 'filter_bucket'/4
			    (F, Bkt, Fb, _cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 335
	  <_cor10,[],Fb,Fc> when 'true' ->
	      {Fb,Fc}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'filter_bucket',4}}] )
	    -| ['compiler_generated'] )
	end
'get_bucket_s'/2 =
    %% Line 340
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 341
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor3> =
		%% Line 341
		call 'erlang':'div'
		    (_cor2, 16)
	    in  let <SegI> =
		    %% Line 341
		    call 'erlang':'+'
			(_cor3, 1)
		in  let <_cor5> =
			%% Line 342
			call 'erlang':'-'
			    (_cor0, 1)
		    in  let <_cor6> =
			    %% Line 342
			    call 'erlang':'rem'
				(_cor5, 16)
			in  let <BktI> =
				%% Line 342
				call 'erlang':'+'
				    (_cor6, 1)
			    in  let <_cor8> =
				    %% Line 343
				    call 'erlang':'element'
					(SegI, _cor1)
				in  %% Line 343
				    call 'erlang':'element'
					(BktI, _cor8)
'put_bucket_s'/3 =
    %% Line 345
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 346
	    call 'erlang':'-'
		(_cor1, 1)
	in  let <_cor4> =
		%% Line 346
		call 'erlang':'div'
		    (_cor3, 16)
	    in  let <SegI> =
		    %% Line 346
		    call 'erlang':'+'
			(_cor4, 1)
		in  let <_cor6> =
			%% Line 347
			call 'erlang':'-'
			    (_cor1, 1)
		    in  let <_cor7> =
			    %% Line 347
			    call 'erlang':'rem'
				(_cor6, 16)
			in  let <BktI> =
				%% Line 347
				call 'erlang':'+'
				    (_cor7, 1)
			    in  let <_cor9> =
				    %% Line 348
				    call 'erlang':'element'
					(SegI, _cor2)
				in  let <Seg> =
					%% Line 348
					call 'erlang':'setelement'
					    (BktI, _cor9, _cor0)
				    in  %% Line 349
					call 'erlang':'setelement'
					    (SegI, _cor2, Seg)
'maybe_expand'/2 =
    %% Line 352
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T0 = {'set',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48},Ic>
	      when ( try
		      let <_cor8> =
			  call 'erlang':'+'
			      (_cor41, Ic)
		      in  call 'erlang':'>'
			      (_cor8, _cor45)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 354
	      ( case apply 'maybe_expand_segs'/1
			 (T0) of
		  ( <( {'set',_cor49,_rec11,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
		       -| ['compiler_generated'] )> when 'true' ->
			let <N> =
			    call 'erlang':'+'
				(_rec11, 1)
			in  let <Slot1> =
				%% Line 356
				call 'erlang':'-'
				    (N, _cor51)
			    in  let <B> =
				    %% Line 357
				    apply 'get_bucket_s'/2
					(_cor55, Slot1)
				in  %% Line 359
				    case apply 'rehash'/4
					     (B, Slot1, N, _cor50) of
				      <{B1,B2}> when 'true' ->
					  let <Segs1> =
					      %% Line 360
					      apply 'put_bucket_s'/3
						  (_cor55, Slot1, B1)
					  in  let <Segs2> =
						  %% Line 361
						  apply 'put_bucket_s'/3
						      (Segs1, N, B2)
					      in  let <_rec15> =
						      %% Line 362
						      call 'erlang':'+'
							  (_cor49, Ic)
						  in  let <_rec16> =
							  %% Line 364
							  call 'erlang':'*'
							      (N, 5)
						      in  let <_rec17> =
							      %% Line 365
							      call 'erlang':'*'
								  (N, 3)
							  in  %% Line 366
							      {'set',_rec15,N,_cor50,_cor51,_rec16,_rec17,_cor54,Segs2}
				      ( <_cor24> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor24})
					-| ['compiler_generated'] )
				    end
		    -| ['compiler_generated'] )
		  ( <_cor56> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 367
	  <T,Ic> when 'true' ->
	      ( case T of
		  ( <( {'set',_rec30,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec28> =
			    call 'erlang':'+'
				(_rec30, Ic)
			in  call 'erlang':'setelement'
				(2, T, _rec28)
		    -| ['compiler_generated'] )
		  ( <_cor97> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'maybe_expand_segs'/1 =
    %% Line 370
    fun (_cor0) ->
	case _cor0 of
	  <T = {'set',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}>
	      when call 'erlang':'=:='
		    (_cor25,
		     _cor26) ->
	      let <_rec31> =
		  %% Line 371
		  call 'erlang':'*'
		      (2, _cor26)
	      in  let <_rec32> =
		      %% Line 372
		      call 'erlang':'*'
			  (2, _cor27)
		  in  let <_rec33> =
			  %% Line 373
			  apply 'expand_segs'/2
			      (_cor31, _cor30)
		      in  let <_cor20> =
			      %% Line 373
			      call 'erlang':'setelement'
				  (9, T, _rec33)
			  in  let <_cor21> =
				  %% Line 372
				  call 'erlang':'setelement'
				      (5, _cor20, _rec32)
			      in  %% Line 371
				  call 'erlang':'setelement'
				      (4, _cor21, _rec31)
	  %% Line 374
	  <T> when 'true' ->
	      T
	end
'maybe_contract'/2 =
    %% Line 377
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T = {'set',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51},Dc>
	      when ( try
		      let <_cor8> =
			  call 'erlang':'-'
			      (_cor44, Dc)
		      in  let <_cor9> =
			      call 'erlang':'<'
				  (_cor8, _cor49)
			  in  let <_cor12> =
				  %% Line 378
				  call 'erlang':'>'
				      (_cor45, 16)
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(_cor9, _cor12)
				    -| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <Slot1> =
		  %% Line 380
		  call 'erlang':'-'
		      (_cor45, _cor47)
	      in  let <B1> =
		      %% Line 382
		      apply 'get_bucket_s'/2
			  (_cor51, Slot1)
		  in  let <B2> =
			  %% Line 384
			  apply 'get_bucket_s'/2
			      (_cor51, _cor45)
		      in  let <_cor25> =
			      %% Line 385
			      call 'erlang':'++'
				  (B1, B2)
			  in  let <Segs1> =
				  %% Line 385
				  apply 'put_bucket_s'/3
				      (_cor51, Slot1, _cor25)
			      in  let <Segs2> =
				      %% Line 386
				      apply 'put_bucket_s'/3
					  (Segs1, _cor45, [])
				  in  let <N1> =
					  %% Line 387
					  call 'erlang':'-'
					      (_cor45, 1)
				      in  let <_rec42> =
					      %% Line 388
					      call 'erlang':'-'
						  (_cor44, Dc)
					  in  let <_rec43> =
						  %% Line 390
						  call 'erlang':'*'
						      (N1, 5)
					      in  let <_rec44> =
						      %% Line 391
						      call 'erlang':'*'
							  (N1, 3)
						  in  let <_cor36> =
							  %% Line 392
							  {'set',_rec42,N1,_cor46,_cor47,_rec43,_rec44,_cor50,Segs2}
						      in  %% Line 388
							  apply 'maybe_contract_segs'/1
							      (_cor36)
	  %% Line 393
	  <T,Dc> when 'true' ->
	      ( case T of
		  ( <( {'set',_rec57,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec55> =
			    call 'erlang':'-'
				(_rec57, Dc)
			in  call 'erlang':'setelement'
				(2, T, _rec55)
		    -| ['compiler_generated'] )
		  ( <_cor92> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'maybe_contract_segs'/1 =
    %% Line 396
    fun (_cor0) ->
	case _cor0 of
	  <T = {'set',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}>
	      when call 'erlang':'=:='
		    (_cor23,
		     _cor25) ->
	      let <_rec58> =
		  %% Line 397
		  call 'erlang':'div'
		      (_cor24, 2)
	      in  let <_rec59> =
		      %% Line 398
		      call 'erlang':'div'
			  (_cor25, 2)
		  in  let <_rec60> =
			  %% Line 399
			  apply 'contract_segs'/1
			      (_cor29)
		      in  let <_cor18> =
			      %% Line 399
			      call 'erlang':'setelement'
				  (9, T, _rec60)
			  in  let <_cor19> =
				  %% Line 398
				  call 'erlang':'setelement'
				      (5, _cor18, _rec59)
			      in  %% Line 397
				  call 'erlang':'setelement'
				      (4, _cor19, _rec58)
	  %% Line 400
	  <T> when 'true' ->
	      T
	end
'rehash'/4 =
    %% Line 404
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E|T],Slot1,Slot2,MaxN> when 'true' ->
	      %% Line 405
	      case apply 'rehash'/4
		       (T, Slot1, Slot2, MaxN) of
		<{L1,L2}> when 'true' ->
		    %% Line 406
		    case call 'erlang':'phash'
			     (E, MaxN) of
		      %% Line 407
		      <_cor10>
			  when call 'erlang':'=:='
				(_cor10,
				 Slot1) ->
			  {[E|L1],L2}
		      %% Line 408
		      <_cor11>
			  when call 'erlang':'=:='
				(_cor11,
				 Slot2) ->
			  {L1,[E|L2]}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 410
	  <[],_cor12,_cor13,_cor14> when 'true' ->
	      {[],[]}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rehash',4}}] )
	    -| ['compiler_generated'] )
	end
'mk_seg'/1 =
    %% Line 414
    fun (_cor0) ->
	case _cor0 of
	  <16> when 'true' ->
	      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'mk_seg',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_segs'/2 =
    %% Line 423
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{B1},Empty> when 'true' ->
	      %% Line 424
	      {B1,Empty}
	  %% Line 425
	  <{B1,B2},Empty> when 'true' ->
	      %% Line 426
	      {B1,B2,Empty,Empty}
	  %% Line 427
	  <{B1,B2,B3,B4},Empty> when 'true' ->
	      %% Line 428
	      {B1,B2,B3,B4,Empty,Empty,Empty,Empty}
	  %% Line 429
	  <{B1,B2,B3,B4,B5,B6,B7,B8},Empty> when 'true' ->
	      %% Line 430
	      {B1,B2,B3,B4,B5,B6,B7,B8,%% Line 431
				       Empty,%% Line 431
					     Empty,%% Line 431
						   Empty,%% Line 431
							 Empty,%% Line 431
							       Empty,%% Line 431
								     Empty,%% Line 431
									   Empty,%% Line 431
										 Empty}
	  %% Line 432
	  <{B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16},Empty> when 'true' ->
	      %% Line 433
	      {B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16,%% Line 434
								      Empty,%% Line 434
									    Empty,%% Line 434
										  Empty,%% Line 434
											Empty,%% Line 434
											      Empty,%% Line 434
												    Empty,%% Line 434
													  Empty,%% Line 434
														Empty,%% Line 435
														      Empty,%% Line 435
															    Empty,%% Line 435
																  Empty,%% Line 435
																	Empty,%% Line 435
																	      Empty,%% Line 435
																		    Empty,%% Line 435
																			  Empty,%% Line 435
																				Empty}
	  %% Line 436
	  <Segs,Empty> when 'true' ->
	      let <_cor4> =
		  %% Line 437
		  call 'erlang':'tuple_to_list'
		      (Segs)
	      in  let <_cor2> =
		      %% Line 438
		      call 'erlang':'tuple_size'
			  (Segs)
		  in  let <_cor3> =
			  %% Line 438
			  call 'lists':'duplicate'
			      (_cor2, Empty)
		      in  let <_cor5> =
			      %% Line 438
			      call 'erlang':'++'
				  (_cor4, _cor3)
			  in  %% Line 437
			      call 'erlang':'list_to_tuple'
				  (_cor5)
	end
'contract_segs'/1 =
    %% Line 441
    fun (_cor0) ->
	case _cor0 of
	  <{B1,_cor6}> when 'true' ->
	      %% Line 442
	      {B1}
	  %% Line 443
	  <{B1,B2,_cor7,_cor8}> when 'true' ->
	      %% Line 444
	      {B1,B2}
	  %% Line 445
	  <{B1,B2,B3,B4,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 446
	      {B1,B2,B3,B4}
	  %% Line 447
	  <{B1,B2,B3,B4,B5,B6,B7,B8,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 448
	      {B1,B2,B3,B4,B5,B6,B7,B8}
	  %% Line 449
	  <{B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      %% Line 451
	      {B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16}
	  %% Line 452
	  <Segs> when 'true' ->
	      let <_cor1> =
		  %% Line 453
		  call 'erlang':'tuple_size'
		      (Segs)
	      in  let <Ss> =
		      %% Line 453
		      call 'erlang':'div'
			  (_cor1, 2)
		  in  let <_cor3> =
			  %% Line 454
			  call 'erlang':'tuple_to_list'
			      (Segs)
		      in  let <_cor4> =
			      %% Line 454
			      call 'lists':'sublist'
				  (_cor3, 1, Ss)
			  in  %% Line 454
			      call 'erlang':'list_to_tuple'
				  (_cor4)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sets')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('sets', _cor0)
end