module 'calendar' ['date_to_gregorian_days'/1,
		   'date_to_gregorian_days'/3,
		   'datetime_to_gregorian_seconds'/1,
		   'day_of_the_week'/1,
		   'day_of_the_week'/3,
		   'gregorian_days_to_date'/1,
		   'gregorian_seconds_to_datetime'/1,
		   'is_leap_year'/1,
		   'iso_week_number'/0,
		   'iso_week_number'/1,
		   'last_day_of_the_month'/2,
		   'local_time'/0,
		   'local_time_to_universal_time'/1,
		   'local_time_to_universal_time'/2,
		   'local_time_to_universal_time_dst'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'now_to_datetime'/1,
		   'now_to_local_time'/1,
		   'now_to_universal_time'/1,
		   'seconds_to_daystime'/1,
		   'seconds_to_time'/1,
		   'time_difference'/2,
		   'time_to_seconds'/1,
		   'universal_time'/0,
		   'universal_time_to_local_time'/1,
		   'valid_date'/1,
		   'valid_date'/3]
    attributes [%% Line 50
		'deprecated' =
		    %% Line 50
		    [{'local_time_to_universal_time',1}],
		%% Line 66
		'export_type' =
		    %% Line 66
		    [{'date',0}|[{'time',0}|[{'datetime',0}|[{'datetime1970',0}]]]],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'year',{'type',68,'non_neg_integer',[]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'year1970',{'type',69,'range',[{'integer',69,1970}|[{'integer',69,10000}]]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{'month',{'type',70,'range',[{'integer',70,1}|[{'integer',70,12}]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'day',{'type',71,'range',[{'integer',71,1}|[{'integer',71,31}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'hour',{'type',72,'range',[{'integer',72,0}|[{'integer',72,23}]]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{'minute',{'type',73,'range',[{'integer',73,0}|[{'integer',73,59}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'second',{'type',74,'range',[{'integer',74,0}|[{'integer',74,59}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'daynum',{'type',75,'range',[{'integer',75,1}|[{'integer',75,7}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'ldom',{'type',76,'union',[{'integer',76,28}|[{'integer',76,29}|[{'integer',76,30}|[{'integer',76,31}]]]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'weeknum',{'type',77,'range',[{'integer',77,1}|[{'integer',77,53}]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'date',{'type',79,'tuple',[{'type',79,'year',[]}|[{'type',79,'month',[]}|[{'type',79,'day',[]}]]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'time',{'type',80,'tuple',[{'type',80,'hour',[]}|[{'type',80,'minute',[]}|[{'type',80,'second',[]}]]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'datetime',{'type',81,'tuple',[{'type',81,'date',[]}|[{'type',81,'time',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'datetime1970',{'type',82,'tuple',[{'type',82,'tuple',[{'type',82,'year1970',[]}|[{'type',82,'month',[]}|[{'type',82,'day',[]}]]]}|[{'type',82,'time',[]}]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'yearweeknum',{'type',83,'tuple',[{'type',83,'year',[]}|[{'type',83,'weeknum',[]}]]},[]}],
		%% Line 109
		'spec' =
		    %% Line 109
		    [{{'date_to_gregorian_days',3},[{'type',109,'bounded_fun',[{'type',109,'fun',[{'type',109,'product',[{'var',109,'Year'}|[{'var',109,'Month'}|[{'var',109,'Day'}]]]}|[{'var',109,'Days'}]]}|[[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Year'}|[{'type',110,'year',[]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Month'}|[{'type',111,'month',[]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Day'}|[{'type',112,'day',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Days'}|[{'type',113,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'date_to_gregorian_days',1},[{'type',121,'bounded_fun',[{'type',121,'fun',[{'type',121,'product',[{'var',121,'Date'}]}|[{'var',121,'Days'}]]}|[[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Date'}|[{'type',122,'date',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Days'}|[{'type',123,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'datetime_to_gregorian_seconds',1},[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'DateTime'}]}|[{'var',133,'Seconds'}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'DateTime'}|[{'type',134,'datetime',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Seconds'}|[{'type',135,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'day_of_the_week',3},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'Year'}|[{'var',146,'Month'}|[{'var',146,'Day'}]]]}|[{'type',146,'daynum',[]}]]}|[[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Year'}|[{'type',147,'year',[]}]]]]}|[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Month'}|[{'type',148,'month',[]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Day'}|[{'type',149,'day',[]}]]]]}]]]]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'day_of_the_week',1},[{'type',153,'bounded_fun',[{'type',153,'fun',[{'type',153,'product',[{'var',153,'Date'}]}|[{'type',153,'daynum',[]}]]}|[[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Date'}|[{'type',154,'date',[]}]]]]}]]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'gregorian_days_to_date',1},[{'type',161,'bounded_fun',[{'type',161,'fun',[{'type',161,'product',[{'var',161,'Days'}]}|[{'type',161,'date',[]}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Days'}|[{'type',162,'non_neg_integer',[]}]]]]}]]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'gregorian_seconds_to_datetime',1},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'Seconds'}]}|[{'type',171,'datetime',[]}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Seconds'}|[{'type',172,'non_neg_integer',[]}]]]]}]]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'is_leap_year',1},[{'type',181,'bounded_fun',[{'type',181,'fun',[{'type',181,'product',[{'var',181,'Year'}]}|[{'type',181,'boolean',[]}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Year'}|[{'type',182,'year',[]}]]]]}]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'is_leap_year1',1},[{'type',186,'fun',[{'type',186,'product',[{'type',186,'year',[]}]}|[{'type',186,'boolean',[]}]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'iso_week_number',0},[{'type',197,'fun',[{'type',197,'product',[]}|[{'type',197,'yearweeknum',[]}]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'iso_week_number',1},[{'type',206,'bounded_fun',[{'type',206,'fun',[{'type',206,'product',[{'var',206,'Date'}]}|[{'type',206,'yearweeknum',[]}]]}|[[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Date'}|[{'type',207,'date',[]}]]]]}]]]}]}],
		%% Line 235
		'spec' =
		    %% Line 235
		    [{{'last_day_of_the_month',2},[{'type',235,'bounded_fun',[{'type',235,'fun',[{'type',235,'product',[{'var',235,'Year'}|[{'var',235,'Month'}]]}|[{'var',235,'LastDay'}]]}|[[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Year'}|[{'type',236,'year',[]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Month'}|[{'type',237,'month',[]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'LastDay'}|[{'type',238,'ldom',[]}]]]]}]]]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'last_day_of_the_month1',2},[{'type',242,'fun',[{'type',242,'product',[{'type',242,'year',[]}|[{'type',242,'month',[]}]]}|[{'type',242,'ldom',[]}]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'local_time',0},[{'type',259,'fun',[{'type',259,'product',[]}|[{'type',259,'datetime',[]}]]}]}],
		%% Line 266
		'spec' =
		    %% Line 266
		    [{{'local_time_to_universal_time',1},[{'type',266,'bounded_fun',[{'type',266,'fun',[{'type',266,'product',[{'var',266,'DateTime1'}]}|[{'var',266,'DateTime2'}]]}|[[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'DateTime1'}|[{'type',267,'datetime1970',[]}]]]]}|[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'DateTime2'}|[{'type',268,'datetime1970',[]}]]]]}]]]]}]}],
		%% Line 272
		'spec' =
		    %% Line 272
		    [{{'local_time_to_universal_time',2},[{'type',272,'fun',[{'type',272,'product',[{'type',272,'datetime1970',[]}|[{'type',273,'union',[{'atom',273,'true'}|[{'atom',273,'false'}|[{'atom',273,'undefined'}]]]}]]}|[{'type',274,'datetime1970',[]}]]}]}],
		%% Line 278
		'spec' =
		    %% Line 278
		    [{{'local_time_to_universal_time_dst',1},[{'type',278,'bounded_fun',[{'type',278,'fun',[{'type',278,'product',[{'var',278,'DateTime1'}]}|[{'type',278,'list',[{'var',278,'DateTime'}]}]]}|[[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'DateTime1'}|[{'type',279,'datetime1970',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'DateTime'}|[{'type',280,'datetime1970',[]}]]]]}]]]]}]}],
		%% Line 308
		'spec' =
		    %% Line 308
		    [{{'now_to_datetime',1},[{'type',308,'bounded_fun',[{'type',308,'fun',[{'type',308,'product',[{'var',308,'Now'}]}|[{'type',308,'datetime1970',[]}]]}|[[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'Now'}|[{'remote_type',309,[{'atom',309,'erlang'}|[{'atom',309,'timestamp'}|[[]]]]}]]]]}]]]}]}],
		%% Line 314
		'spec' =
		    %% Line 314
		    [{{'now_to_universal_time',1},[{'type',314,'bounded_fun',[{'type',314,'fun',[{'type',314,'product',[{'var',314,'Now'}]}|[{'type',314,'datetime1970',[]}]]}|[[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Now'}|[{'remote_type',315,[{'atom',315,'erlang'}|[{'atom',315,'timestamp'}|[[]]]]}]]]]}]]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'now_to_local_time',1},[{'type',324,'bounded_fun',[{'type',324,'fun',[{'type',324,'product',[{'var',324,'Now'}]}|[{'type',324,'datetime1970',[]}]]}|[[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'Now'}|[{'remote_type',325,[{'atom',325,'erlang'}|[{'atom',325,'timestamp'}|[[]]]]}]]]]}]]]}]}],
		%% Line 334
		'spec' =
		    %% Line 334
		    [{{'seconds_to_daystime',1},[{'type',334,'bounded_fun',[{'type',334,'fun',[{'type',334,'product',[{'var',334,'Seconds'}]}|[{'type',334,'tuple',[{'var',334,'Days'}|[{'var',334,'Time'}]]}]]}|[[{'type',335,'constraint',[{'atom',335,'is_subtype'}|[[{'var',335,'Seconds'}|[{'type',335,'integer',[]}]]]]}|[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Days'}|[{'type',336,'integer',[]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'Time'}|[{'type',337,'time',[]}]]]]}]]]]]}]}],
		%% Line 354
		'type' =
		    %% Line 354
		    [{'secs_per_day',{'type',354,'range',[{'integer',354,0}|[{'integer',354,86400}]]},[]}],
		%% Line 355
		'spec' =
		    %% Line 355
		    [{{'seconds_to_time',1},[{'type',355,'bounded_fun',[{'type',355,'fun',[{'type',355,'product',[{'var',355,'Seconds'}]}|[{'type',355,'time',[]}]]}|[[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'Seconds'}|[{'type',356,'secs_per_day',[]}]]]]}]]]}]}],
		%% Line 373
		'spec' =
		    %% Line 373
		    [{{'time_difference',2},[{'type',373,'bounded_fun',[{'type',373,'fun',[{'type',373,'product',[{'var',373,'T1'}|[{'var',373,'T2'}]]}|[{'type',373,'tuple',[{'var',373,'Days'}|[{'var',373,'Time'}]]}]]}|[[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'T1'}|[{'type',374,'datetime',[]}]]]]}|[{'type',375,'constraint',[{'atom',375,'is_subtype'}|[[{'var',375,'T2'}|[{'type',375,'datetime',[]}]]]]}|[{'type',376,'constraint',[{'atom',376,'is_subtype'}|[[{'var',376,'Days'}|[{'type',376,'integer',[]}]]]]}|[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'Time'}|[{'type',377,'time',[]}]]]]}]]]]]]}]}],
		%% Line 388
		'spec' =
		    %% Line 388
		    [{{'time_to_seconds',1},[{'type',388,'bounded_fun',[{'type',388,'fun',[{'type',388,'product',[{'var',388,'Time'}]}|[{'type',388,'secs_per_day',[]}]]}|[[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'Time'}|[{'type',389,'time',[]}]]]]}]]]}]}],
		%% Line 398
		'spec' =
		    %% Line 398
		    [{{'universal_time',0},[{'type',398,'fun',[{'type',398,'product',[]}|[{'type',398,'datetime',[]}]]}]}],
		%% Line 405
		'spec' =
		    %% Line 405
		    [{{'universal_time_to_local_time',1},[{'type',405,'bounded_fun',[{'type',405,'fun',[{'type',405,'product',[{'var',405,'DateTime'}]}|[{'type',405,'datetime',[]}]]}|[[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'DateTime'}|[{'type',406,'datetime1970',[]}]]]]}]]]}]}],
		%% Line 414
		'spec' =
		    %% Line 414
		    [{{'valid_date',3},[{'type',414,'bounded_fun',[{'type',414,'fun',[{'type',414,'product',[{'var',414,'Year'}|[{'var',414,'Month'}|[{'var',414,'Day'}]]]}|[{'type',414,'boolean',[]}]]}|[[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'Year'}|[{'type',415,'integer',[]}]]]]}|[{'type',416,'constraint',[{'atom',416,'is_subtype'}|[[{'var',416,'Month'}|[{'type',416,'integer',[]}]]]]}|[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Day'}|[{'type',417,'integer',[]}]]]]}]]]]]}]}],
		%% Line 421
		'spec' =
		    %% Line 421
		    [{{'valid_date1',3},[{'type',421,'fun',[{'type',421,'product',[{'type',421,'integer',[]}|[{'type',421,'integer',[]}|[{'type',421,'integer',[]}]]]}|[{'type',421,'boolean',[]}]]}]}],
		%% Line 427
		'spec' =
		    %% Line 427
		    [{{'valid_date',1},[{'type',427,'bounded_fun',[{'type',427,'fun',[{'type',427,'product',[{'var',427,'Date'}]}|[{'type',427,'boolean',[]}]]}|[[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'Date'}|[{'type',428,'date',[]}]]]]}]]]}]}],
		%% Line 436
		'type' =
		    %% Line 436
		    [{'day_of_year',{'type',436,'range',[{'integer',436,0}|[{'integer',436,365}]]},[]}],
		%% Line 446
		'spec' =
		    %% Line 446
		    [{{'day_to_year',1},[{'type',446,'fun',[{'type',446,'product',[{'type',446,'non_neg_integer',[]}]}|[{'type',446,'tuple',[{'type',446,'year',[]}|[{'type',446,'day_of_year',[]}]]}]]}]}],
		%% Line 452
		'spec' =
		    %% Line 452
		    [{{'dty',3},[{'type',452,'fun',[{'type',452,'product',[{'type',452,'year',[]}|[{'type',452,'non_neg_integer',[]}|[{'type',452,'non_neg_integer',[]}]]]}|[{'type',453,'tuple',[{'type',453,'year',[]}|[{'type',453,'non_neg_integer',[]}]]}]]}]}],
		%% Line 462
		'spec' =
		    %% Line 462
		    [{{'gregorian_days_of_iso_w01_1',1},[{'type',462,'fun',[{'type',462,'product',[{'type',462,'year',[]}]}|[{'type',462,'non_neg_integer',[]}]]}]}],
		%% Line 476
		'spec' =
		    %% Line 476
		    [{{'year_day_to_date',2},[{'type',476,'fun',[{'type',476,'product',[{'type',476,'year',[]}|[{'type',476,'day_of_year',[]}]]}|[{'type',476,'tuple',[{'type',476,'month',[]}|[{'type',476,'day',[]}]]}]]}]}],
		%% Line 490
		'spec' =
		    %% Line 490
		    [{{'year_day_to_date2',2},[{'type',490,'fun',[{'type',490,'product',[{'type',490,'union',[{'integer',490,0}|[{'integer',490,1}]]}|[{'type',490,'day_of_year',[]}]]}|[{'type',490,'tuple',[{'type',490,'month',[]}|[{'type',490,'range',[{'integer',490,0}|[{'integer',490,30}]]}]]}]]}]}],
		%% Line 520
		'spec' =
		    %% Line 520
		    [{{'dy',1},[{'type',520,'fun',[{'type',520,'product',[{'type',520,'integer',[]}]}|[{'type',520,'non_neg_integer',[]}]]}]}],
		%% Line 533
		'spec' =
		    %% Line 533
		    [{{'dm',1},[{'type',533,'fun',[{'type',533,'product',[{'type',533,'month',[]}]}|[{'type',534,'union',[{'integer',534,0}|[{'integer',534,31}|[{'integer',534,59}|[{'integer',534,90}|[{'integer',534,120}|[{'integer',534,151}|[{'integer',534,181}|[{'integer',534,212}|[{'integer',534,243}|[{'integer',534,273}|[{'integer',534,304}|[{'integer',534,334}]]]]]]]]]]]]}]]}]}],
		%% Line 544
		'spec' =
		    %% Line 544
		    [{{'df',2},[{'type',544,'fun',[{'type',544,'product',[{'type',544,'year',[]}|[{'type',544,'month',[]}]]}|[{'type',544,'union',[{'integer',544,0}|[{'integer',544,1}]]}]]}]}]]
'date_to_gregorian_days'/3 =
    %% Line 114
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Year,Month,Day>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Day)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Day, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <Last> =
		  %% Line 115
		  apply 'last_day_of_the_month'/2
		      (Year, Month)
	      in  %% Line 116
		  case <> of
		    %% Line 117
		    <>
			when call 'erlang':'=<'
			      (Day,
			       Last) ->
			let <_cor8> =
			    %% Line 118
			    apply 'dy'/1
				(Year)
			in  let <_cor7> =
				%% Line 118
				apply 'dm'/1
				    (Month)
			    in  let <_cor9> =
				    %% Line 118
				    call 'erlang':'+'
					(_cor8, _cor7)
				in  let <_cor6> =
					%% Line 118
					apply 'df'/2
					    (Year, Month)
				    in  let <_cor10> =
					    %% Line 118
					    call 'erlang':'+'
						(_cor9, _cor6)
					in  let <_cor11> =
						%% Line 118
						call 'erlang':'+'
						    (_cor10, Day)
					    in  %% Line 118
						call 'erlang':'-'
						    (_cor11, 1)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'date_to_gregorian_days',3}}] )
	    -| ['compiler_generated'] )
	end
'date_to_gregorian_days'/1 =
    %% Line 124
    fun (_cor0) ->
	case _cor0 of
	  <{Year,Month,Day}> when 'true' ->
	      %% Line 125
	      apply 'date_to_gregorian_days'/3
		  (Year, Month, Day)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'date_to_gregorian_days',1}}] )
	    -| ['compiler_generated'] )
	end
'datetime_to_gregorian_seconds'/1 =
    %% Line 136
    fun (_cor0) ->
	case _cor0 of
	  <{Date,Time}> when 'true' ->
	      let <_cor2> =
		  %% Line 137
		  apply 'date_to_gregorian_days'/1
		      (Date)
	      in  let <_cor3> =
		      %% Line 137
		      call 'erlang':'*'
			  (86400, _cor2)
		  in  let <_cor1> =
			  %% Line 138
			  apply 'time_to_seconds'/1
			      (Time)
		      in  %% Line 137
			  call 'erlang':'+'
			      (_cor3, _cor1)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'datetime_to_gregorian_seconds',1}}] )
	    -| ['compiler_generated'] )
	end
'day_of_the_week'/3 =
    %% Line 150
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 151
	    apply 'date_to_gregorian_days'/3
		(_cor2, _cor1, _cor0)
	in  let <_cor4> =
		%% Line 151
		call 'erlang':'+'
		    (_cor3, 5)
	    in  let <_cor5> =
		    %% Line 151
		    call 'erlang':'rem'
			(_cor4, 7)
		in  %% Line 151
		    call 'erlang':'+'
			(_cor5, 1)
'day_of_the_week'/1 =
    %% Line 155
    fun (_cor0) ->
	case _cor0 of
	  <{Year,Month,Day}> when 'true' ->
	      %% Line 156
	      apply 'day_of_the_week'/3
		  (Year, Month, Day)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'day_of_the_week',1}}] )
	    -| ['compiler_generated'] )
	end
'gregorian_days_to_date'/1 =
    %% Line 163
    fun (_cor0) ->
	%% Line 164
	case apply 'day_to_year'/1
		 (_cor0) of
	  <{Year,DayOfYear}> when 'true' ->
	      %% Line 165
	      case apply 'year_day_to_date'/2
		       (Year, DayOfYear) of
		<{Month,DayOfMonth}> when 'true' ->
		    %% Line 166
		    {Year,Month,DayOfMonth}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'gregorian_seconds_to_datetime'/1 =
    %% Line 173
    fun (_cor0) ->
	case _cor0 of
	  <Secs>
	      when call 'erlang':'>='
		    (_cor0,
		     0) ->
	      let <Days> =
		  %% Line 174
		  call 'erlang':'div'
		      (Secs, 86400)
	      in  let <Rest> =
		      %% Line 175
		      call 'erlang':'rem'
			  (Secs, 86400)
		  in  let <_cor4> =
			  %% Line 176
			  apply 'gregorian_days_to_date'/1
			      (Days)
		      in  let <_cor3> =
			      %% Line 176
			      apply 'seconds_to_time'/1
				  (Rest)
			  in  %% Line 176
			      {_cor4,_cor3}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'gregorian_seconds_to_datetime',1}}] )
	    -| ['compiler_generated'] )
	end
'is_leap_year'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <Y>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 184
	      apply 'is_leap_year1'/1
		  (Y)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'is_leap_year',1}}] )
	    -| ['compiler_generated'] )
	end
'is_leap_year1'/1 =
    %% Line 187
    fun (_cor0) ->
	case _cor0 of
	  <Year>
	      when try
		    let <_cor1> =
			call 'erlang':'rem'
			    (_cor0, 4)
		    in  let <_cor2> =
			    call 'erlang':'=:='
				(_cor1, 0)
			in  let <_cor3> =
				call 'erlang':'rem'
				    (_cor0, 100)
			    in  let <_cor4> =
				    call 'erlang':'>'
					(_cor3, 0)
				in  call 'erlang':'and'
					(_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 188
	      'true'
	  %% Line 189
	  <Year>
	      when try
		    let <_cor5> =
			call 'erlang':'rem'
			    (_cor0, 400)
		    in  call 'erlang':'=:='
			    (_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 190
	      'true'
	  %% Line 191
	  <_cor7> when 'true' ->
	      'false'
	end
'iso_week_number'/0 =
    %% Line 198
    fun () ->
	%% Line 199
	case apply 'local_time'/0
		 () of
	  <{Date,_cor1}> when 'true' ->
	      %% Line 200
	      apply 'iso_week_number'/1
		  (Date)
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'iso_week_number'/1 =
    %% Line 208
    fun (_cor0) ->
	case _cor0 of
	  <{Year,Month,Day}> when 'true' ->
	      let <D> =
		  %% Line 209
		  apply 'date_to_gregorian_days'/1
		      ({Year,Month,Day})
	      in  let <W01_1_Year> =
		      %% Line 210
		      apply 'gregorian_days_of_iso_w01_1'/1
			  (Year)
		  in  let <_cor3> =
			  %% Line 211
			  call 'erlang':'+'
			      (Year, 1)
		      in  let <W01_1_NextYear> =
			      %% Line 211
			      apply 'gregorian_days_of_iso_w01_1'/1
				  (_cor3)
			  in  %% Line 212
			      case <> of
				<>
				    when try
					  ( case <> of
					      ( <>
						    when call 'erlang':'=<'
							  (W01_1_Year,
							   D) ->
						    call 'erlang':'<'
							(D, W01_1_NextYear)
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    let <_cor8> =
					%% Line 214
					call 'erlang':'-'
					    (D, W01_1_Year)
				    in  let <_cor9> =
					    %% Line 214
					    call 'erlang':'div'
						(_cor8, 7)
					in  let <_cor10> =
						%% Line 214
						call 'erlang':'+'
						    (_cor9, 1)
					    in  %% Line 214
						{Year,_cor10}
				%% Line 215
				<>
				    when call 'erlang':'<'
					  (D,
					   W01_1_Year) ->
				    let <_cor11> =
					%% Line 217
					call 'erlang':'-'
					    (Year, 1)
				    in  let <_cor15> =
					    %% Line 217
					    case apply 'day_of_the_week'/3
						     (_cor11, 1, 1) of
					      %% Line 218
					      <4> when 'true' ->
						  53
					      %% Line 219
					      <_cor20> when 'true' ->
						  let <_cor12> =
						      call 'erlang':'-'
							  (Year, 1)
						  in  case apply 'day_of_the_week'/3
							       (_cor12, 12, 31) of
							%% Line 220
							<4> when 'true' ->
							    53
							%% Line 221
							<_cor21> when 'true' ->
							    52
						      end
					    end
					in  let <_cor17> =
						%% Line 224
						call 'erlang':'-'
						    (Year, 1)
					    in  %% Line 224
						{_cor17,_cor15}
				%% Line 225
				<>
				    when call 'erlang':'=<'
					  (W01_1_NextYear,
					   D) ->
				    let <_cor18> =
					%% Line 227
					call 'erlang':'+'
					    (Year, 1)
				    in  %% Line 227
					{_cor18,1}
				( <> when 'true' ->
				      primop 'match_fail'
					  ('if_clause')
				  -| ['compiler_generated'] )
			      end
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19})
		  -| [{'function_name',{'iso_week_number',1}}] )
	    -| ['compiler_generated'] )
	end
'last_day_of_the_month'/2 =
    %% Line 239
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Y,M>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Y)
		in  let <_cor3> =
			call 'erlang':'>='
			    (Y, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 240
	      apply 'last_day_of_the_month1'/2
		  (Y, M)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'last_day_of_the_month',2}}] )
	    -| ['compiler_generated'] )
	end
'last_day_of_the_month1'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor9,4> when 'true' ->
	      30
	  %% Line 244
	  <_cor10,6> when 'true' ->
	      30
	  %% Line 245
	  <_cor11,9> when 'true' ->
	      30
	  %% Line 246
	  <_cor12,11> when 'true' ->
	      30
	  %% Line 247
	  <Y,2> when 'true' ->
	      %% Line 248
	      case apply 'is_leap_year'/1
		       (Y) of
		%% Line 249
		<'true'> when 'true' ->
		    29
		%% Line 250
		<_cor13> when 'true' ->
		    28
	      end
	  %% Line 252
	  <_cor14,M>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'>'
				(M, 0)
			in  let <_cor5> =
				call 'erlang':'<'
				    (M, 13)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 253
	      31
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'last_day_of_the_month1',2}}] )
	    -| ['compiler_generated'] )
	end
'local_time'/0 =
    %% Line 260
    fun () ->
	%% Line 261
	call 'erlang':'localtime'
	    ()
'local_time_to_universal_time'/1 =
    %% Line 269
    fun (_cor0) ->
	%% Line 270
	call 'erlang':'localtime_to_universaltime'
	    (_cor0)
'local_time_to_universal_time'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	%% Line 276
	call 'erlang':'localtime_to_universaltime'
	    (_cor1, _cor0)
'local_time_to_universal_time_dst'/1 =
    %% Line 281
    fun (_cor0) ->
	let <UtDst> =
	    %% Line 282
	    call 'erlang':'localtime_to_universaltime'
		(_cor0, 'true')
	in  let <Ut> =
		%% Line 283
		call 'erlang':'localtime_to_universaltime'
		    (_cor0, 'false')
	    in  let <LtDst> =
		    %% Line 285
		    call 'erlang':'universaltime_to_localtime'
			(UtDst)
		in  let <Lt> =
			%% Line 286
			call 'erlang':'universaltime_to_localtime'
			    (Ut)
		    in  %% Line 288
			case <LtDst,Lt> of
			  %% Line 289
			  <_cor7,_cor8>
			      when let <_cor11> =
				    call 'erlang':'=:='
					(_cor7, _cor0)
				in  let <_cor9> =
					call 'erlang':'=:='
					    (_cor8, _cor0)
				    in  let <_cor10> =
					    call 'erlang':'=/='
						(UtDst, Ut)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor9, _cor10)
					    in  call 'erlang':'and'
						    (_cor11, _cor12) ->
			      %% Line 290
			      [UtDst|[Ut|[]]]
			  %% Line 291
			  <_cor13,_cor14>
			      when call 'erlang':'=:='
				    (_cor13,
				     _cor0) ->
			      %% Line 292
			      [UtDst|[]]
			  %% Line 293
			  <_cor15,_cor16>
			      when call 'erlang':'=:='
				    (_cor16,
				     _cor0) ->
			      %% Line 294
			      [Ut|[]]
			  %% Line 295
			  <_cor17,_cor18> when 'true' ->
			      %% Line 296
			      []
			end
'now_to_datetime'/1 =
    %% Line 310
    fun (_cor0) ->
	case _cor0 of
	  <{MSec,Sec,_X_uSec}> when 'true' ->
	      let <_cor2> =
		  %% Line 311
		  call 'erlang':'*'
		      (MSec, 1000000)
	      in  let <_cor3> =
		      %% Line 311
		      call 'erlang':'+'
			  (_cor2, Sec)
		  in  let <Sec0> =
			  %% Line 311
			  call 'erlang':'+'
			      (_cor3, 62167219200)
		      in  %% Line 312
			  apply 'gregorian_seconds_to_datetime'/1
			      (Sec0)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'now_to_datetime',1}}] )
	    -| ['compiler_generated'] )
	end
'now_to_universal_time'/1 =
    %% Line 316
    fun (_cor0) ->
	%% Line 317
	apply 'now_to_datetime'/1
	    (_cor0)
'now_to_local_time'/1 =
    %% Line 326
    fun (_cor0) ->
	case _cor0 of
	  <{MSec,Sec,_X_uSec}> when 'true' ->
	      let <_cor1> =
		  %% Line 328
		  apply 'now_to_universal_time'/1
		      ({MSec,Sec,_X_uSec})
	      in  %% Line 327
		  call 'erlang':'universaltime_to_localtime'
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'now_to_local_time',1}}] )
	    -| ['compiler_generated'] )
	end
'seconds_to_daystime'/1 =
    %% Line 338
    fun (_cor0) ->
	let <Days0> =
	    %% Line 339
	    call 'erlang':'div'
		(_cor0, 86400)
	in  let <Secs0> =
		%% Line 340
		call 'erlang':'rem'
		    (_cor0, 86400)
	    in  %% Line 341
		case <> of
		  %% Line 342
		  <>
		      when call 'erlang':'<'
			    (Secs0,
			     0) ->
		      let <_cor5> =
			  %% Line 343
			  call 'erlang':'-'
			      (Days0, 1)
		      in  let <_cor3> =
			      %% Line 343
			      call 'erlang':'+'
				  (Secs0, 86400)
			  in  let <_cor4> =
				  %% Line 343
				  apply 'seconds_to_time'/1
				      (_cor3)
			      in  %% Line 343
				  {_cor5,_cor4}
		  %% Line 344
		  <> when 'true' ->
		      let <_cor6> =
			  %% Line 345
			  apply 'seconds_to_time'/1
			      (Secs0)
		      in  %% Line 345
			  {Days0,_cor6}
		end
'seconds_to_time'/1 =
    %% Line 357
    fun (_cor0) ->
	case _cor0 of
	  <Secs>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 0)
		in  let <_cor2> =
			call 'erlang':'<'
			    (_cor0, 86400)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <Secs0> =
		  %% Line 358
		  call 'erlang':'rem'
		      (Secs, 86400)
	      in  let <Hour> =
		      %% Line 359
		      call 'erlang':'div'
			  (Secs0, 3600)
		  in  let <Secs1> =
			  %% Line 360
			  call 'erlang':'rem'
			      (Secs0, 3600)
		      in  let <Minute> =
			      %% Line 361
			      call 'erlang':'div'
				  (Secs1, 60)
			  in  let <Second> =
				  %% Line 362
				  call 'erlang':'rem'
				      (Secs1, 60)
			      in  %% Line 363
				  {Hour,Minute,Second}
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'seconds_to_time',1}}] )
	    -| ['compiler_generated'] )
	end
'time_difference'/2 =
    %% Line 378
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{{Y1,Mo1,D1},{H1,Mi1,S1}},%% Line 379
				     {{Y2,Mo2,D2},{H2,Mi2,S2}}> when 'true' ->
	      let <_cor3> =
		  %% Line 380
		  apply 'datetime_to_gregorian_seconds'/1
		      ({{Y2,Mo2,D2},{H2,Mi2,S2}})
	      in  let <_cor2> =
		      %% Line 381
		      apply 'datetime_to_gregorian_seconds'/1
			  ({{Y1,Mo1,D1},{H1,Mi1,S1}})
		  in  let <Secs> =
			  %% Line 380
			  call 'erlang':'-'
			      (_cor3, _cor2)
		      in  %% Line 382
			  apply 'seconds_to_daystime'/1
			      (Secs)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'time_difference',2}}] )
	    -| ['compiler_generated'] )
	end
'time_to_seconds'/1 =
    %% Line 390
    fun (_cor0) ->
	case _cor0 of
	  <{H,M,S}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor2> =
			    call 'erlang':'is_integer'
				(M)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (S)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 391
		  call 'erlang':'*'
		      (H, 3600)
	      in  let <_cor5> =
		      %% Line 392
		      call 'erlang':'*'
			  (M, 60)
		  in  let <_cor7> =
			  %% Line 391
			  call 'erlang':'+'
			      (_cor6, _cor5)
		      in  %% Line 392
			  call 'erlang':'+'
			      (_cor7, S)
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'time_to_seconds',1}}] )
	    -| ['compiler_generated'] )
	end
'universal_time'/0 =
    %% Line 399
    fun () ->
	%% Line 400
	call 'erlang':'universaltime'
	    ()
'universal_time_to_local_time'/1 =
    %% Line 407
    fun (_cor0) ->
	%% Line 408
	call 'erlang':'universaltime_to_localtime'
	    (_cor0)
'valid_date'/3 =
    %% Line 418
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Y,M,D>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Y)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(M)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (D)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 419
	      apply 'valid_date1'/3
		  (Y, M, D)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'valid_date',3}}] )
	    -| ['compiler_generated'] )
	end
'valid_date1'/3 =
    %% Line 422
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Y,M,D>
	      when try
		    let <_cor3> =
			call 'erlang':'>='
			    (Y, 0)
		    in  let <_cor4> =
			    call 'erlang':'>'
				(M, 0)
			in  let <_cor5> =
				call 'erlang':'<'
				    (M, 13)
			    in  let <_cor6> =
				    call 'erlang':'>'
					(D, 0)
				in  let <_cor7> =
					call 'erlang':'and'
					    (_cor5, _cor6)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor4, _cor7)
					in  call 'erlang':'and'
						(_cor3, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 423
		  apply 'last_day_of_the_month'/2
		      (Y, M)
	      in  %% Line 423
		  call 'erlang':'=<'
		      (D, _cor9)
	  %% Line 424
	  <_cor13,_cor14,_cor15> when 'true' ->
	      %% Line 425
	      'false'
	end
'valid_date'/1 =
    %% Line 429
    fun (_cor0) ->
	case _cor0 of
	  <{Y,M,D}> when 'true' ->
	      %% Line 430
	      apply 'valid_date'/3
		  (Y, M, D)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'valid_date',1}}] )
	    -| ['compiler_generated'] )
	end
'day_to_year'/1 =
    %% Line 447
    fun (_cor0) ->
	case _cor0 of
	  <DayOfEpoch>
	      when call 'erlang':'>='
		    (_cor0,
		     0) ->
	      let <Y0> =
		  %% Line 448
		  call 'erlang':'div'
		      (DayOfEpoch, 365)
	      in  let <_cor2> =
		      %% Line 449
		      apply 'dy'/1
			  (Y0)
		  in  %% Line 449
		      case apply 'dty'/3
			       (Y0, DayOfEpoch, _cor2) of
			<{Y1,D1}> when 'true' ->
			    let <_cor4> =
				%% Line 450
				call 'erlang':'-'
				    (DayOfEpoch, D1)
			    in  %% Line 450
				{Y1,_cor4}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'day_to_year',1}}] )
	    -| ['compiler_generated'] )
	end
'dty'/3 =
    %% Line 454
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Y,D1,D2>
	      when call 'erlang':'<'
		    (D1,
		     D2) ->
	      let <_cor5> =
		  %% Line 455
		  call 'erlang':'-'
		      (Y, 1)
	      in  let <_cor3> =
		      %% Line 455
		      call 'erlang':'-'
			  (Y, 1)
		  in  let <_cor4> =
			  %% Line 455
			  apply 'dy'/1
			      (_cor3)
		      in  %% Line 455
			  apply 'dty'/3
			      (_cor5, D1, _cor4)
	  %% Line 456
	  <Y,_X_D1,D2> when 'true' ->
	      %% Line 457
	      {Y,D2}
	end
'gregorian_days_of_iso_w01_1'/1 =
    %% Line 463
    fun (_cor0) ->
	let <D0101> =
	    %% Line 464
	    apply 'date_to_gregorian_days'/3
		(_cor0, 1, 1)
	in  let <DOW> =
		%% Line 465
		apply 'day_of_the_week'/3
		    (_cor0, 1, 1)
	    in  %% Line 466
		case <> of
		  <>
		      when call 'erlang':'=<'
			    (DOW,
			     4) ->
		      let <_cor3> =
			  %% Line 467
			  call 'erlang':'-'
			      (D0101, DOW)
		      in  %% Line 467
			  call 'erlang':'+'
			      (_cor3, 1)
		  %% Line 468
		  <> when 'true' ->
		      let <_cor4> =
			  %% Line 469
			  call 'erlang':'+'
			      (D0101, 7)
		      in  let <_cor5> =
			      %% Line 469
			      call 'erlang':'-'
				  (_cor4, DOW)
			  in  %% Line 469
			      call 'erlang':'+'
				  (_cor5, 1)
		end
'year_day_to_date'/2 =
    %% Line 477
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 478
	    case apply 'is_leap_year'/1
		     (_cor1) of
	      %% Line 479
	      <'true'> when 'true' ->
		  %% Line 480
		  1
	      %% Line 481
	      <'false'> when 'true' ->
		  %% Line 482
		  0
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 484
	    case apply 'year_day_to_date2'/2
		     (_cor3, _cor0) of
	      <{Month,Day}> when 'true' ->
		  let <_cor6> =
		      %% Line 485
		      call 'erlang':'+'
			  (Day, 1)
		  in  %% Line 485
		      {Month,_cor6}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'year_day_to_date2'/2 =
    %% Line 491
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor65,Day>
	      when call 'erlang':'<'
		    (Day,
		     31) ->
	      %% Line 492
	      {1,Day}
	  %% Line 493
	  <E,Day>
	      when try
		    let <_cor2> =
			call 'erlang':'=<'
			    (31, Day)
		    in  let <_cor3> =
			    call 'erlang':'+'
				(59, E)
			in  let <_cor4> =
				call 'erlang':'<'
				    (Day, _cor3)
			    in  call 'erlang':'and'
				    (_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 494
		  call 'erlang':'-'
		      (Day, 31)
	      in  %% Line 494
		  {2,_cor5}
	  %% Line 495
	  <E,Day>
	      when try
		    let <_cor6> =
			call 'erlang':'+'
			    (59, E)
		    in  let <_cor7> =
			    call 'erlang':'=<'
				(_cor6, Day)
			in  let <_cor8> =
				call 'erlang':'+'
				    (90, E)
			    in  let <_cor9> =
				    call 'erlang':'<'
					(Day, _cor8)
				in  call 'erlang':'and'
					(_cor7, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 496
		  call 'erlang':'+'
		      (59, E)
	      in  let <_cor11> =
		      %% Line 496
		      call 'erlang':'-'
			  (Day, _cor10)
		  in  %% Line 496
		      {3,_cor11}
	  %% Line 497
	  <E,Day>
	      when try
		    let <_cor12> =
			call 'erlang':'+'
			    (90, E)
		    in  let <_cor13> =
			    call 'erlang':'=<'
				(_cor12, Day)
			in  let <_cor14> =
				call 'erlang':'+'
				    (120, E)
			    in  let <_cor15> =
				    call 'erlang':'<'
					(Day, _cor14)
				in  call 'erlang':'and'
					(_cor13, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor16> =
		  %% Line 498
		  call 'erlang':'+'
		      (90, E)
	      in  let <_cor17> =
		      %% Line 498
		      call 'erlang':'-'
			  (Day, _cor16)
		  in  %% Line 498
		      {4,_cor17}
	  %% Line 499
	  <E,Day>
	      when try
		    let <_cor18> =
			call 'erlang':'+'
			    (120, E)
		    in  let <_cor19> =
			    call 'erlang':'=<'
				(_cor18, Day)
			in  let <_cor20> =
				call 'erlang':'+'
				    (151, E)
			    in  let <_cor21> =
				    call 'erlang':'<'
					(Day, _cor20)
				in  call 'erlang':'and'
					(_cor19, _cor21)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor22> =
		  %% Line 500
		  call 'erlang':'+'
		      (120, E)
	      in  let <_cor23> =
		      %% Line 500
		      call 'erlang':'-'
			  (Day, _cor22)
		  in  %% Line 500
		      {5,_cor23}
	  %% Line 501
	  <E,Day>
	      when try
		    let <_cor24> =
			call 'erlang':'+'
			    (151, E)
		    in  let <_cor25> =
			    call 'erlang':'=<'
				(_cor24, Day)
			in  let <_cor26> =
				call 'erlang':'+'
				    (181, E)
			    in  let <_cor27> =
				    call 'erlang':'<'
					(Day, _cor26)
				in  call 'erlang':'and'
					(_cor25, _cor27)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor28> =
		  %% Line 502
		  call 'erlang':'+'
		      (151, E)
	      in  let <_cor29> =
		      %% Line 502
		      call 'erlang':'-'
			  (Day, _cor28)
		  in  %% Line 502
		      {6,_cor29}
	  %% Line 503
	  <E,Day>
	      when try
		    let <_cor30> =
			call 'erlang':'+'
			    (181, E)
		    in  let <_cor31> =
			    call 'erlang':'=<'
				(_cor30, Day)
			in  let <_cor32> =
				call 'erlang':'+'
				    (212, E)
			    in  let <_cor33> =
				    call 'erlang':'<'
					(Day, _cor32)
				in  call 'erlang':'and'
					(_cor31, _cor33)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor34> =
		  %% Line 504
		  call 'erlang':'+'
		      (181, E)
	      in  let <_cor35> =
		      %% Line 504
		      call 'erlang':'-'
			  (Day, _cor34)
		  in  %% Line 504
		      {7,_cor35}
	  %% Line 505
	  <E,Day>
	      when try
		    let <_cor36> =
			call 'erlang':'+'
			    (212, E)
		    in  let <_cor37> =
			    call 'erlang':'=<'
				(_cor36, Day)
			in  let <_cor38> =
				call 'erlang':'+'
				    (243, E)
			    in  let <_cor39> =
				    call 'erlang':'<'
					(Day, _cor38)
				in  call 'erlang':'and'
					(_cor37, _cor39)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor40> =
		  %% Line 506
		  call 'erlang':'+'
		      (212, E)
	      in  let <_cor41> =
		      %% Line 506
		      call 'erlang':'-'
			  (Day, _cor40)
		  in  %% Line 506
		      {8,_cor41}
	  %% Line 507
	  <E,Day>
	      when try
		    let <_cor42> =
			call 'erlang':'+'
			    (243, E)
		    in  let <_cor43> =
			    call 'erlang':'=<'
				(_cor42, Day)
			in  let <_cor44> =
				call 'erlang':'+'
				    (273, E)
			    in  let <_cor45> =
				    call 'erlang':'<'
					(Day, _cor44)
				in  call 'erlang':'and'
					(_cor43, _cor45)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor46> =
		  %% Line 508
		  call 'erlang':'+'
		      (243, E)
	      in  let <_cor47> =
		      %% Line 508
		      call 'erlang':'-'
			  (Day, _cor46)
		  in  %% Line 508
		      {9,_cor47}
	  %% Line 509
	  <E,Day>
	      when try
		    let <_cor48> =
			call 'erlang':'+'
			    (273, E)
		    in  let <_cor49> =
			    call 'erlang':'=<'
				(_cor48, Day)
			in  let <_cor50> =
				call 'erlang':'+'
				    (304, E)
			    in  let <_cor51> =
				    call 'erlang':'<'
					(Day, _cor50)
				in  call 'erlang':'and'
					(_cor49, _cor51)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor52> =
		  %% Line 510
		  call 'erlang':'+'
		      (273, E)
	      in  let <_cor53> =
		      %% Line 510
		      call 'erlang':'-'
			  (Day, _cor52)
		  in  %% Line 510
		      {10,_cor53}
	  %% Line 511
	  <E,Day>
	      when try
		    let <_cor54> =
			call 'erlang':'+'
			    (304, E)
		    in  let <_cor55> =
			    call 'erlang':'=<'
				(_cor54, Day)
			in  let <_cor56> =
				call 'erlang':'+'
				    (334, E)
			    in  let <_cor57> =
				    call 'erlang':'<'
					(Day, _cor56)
				in  call 'erlang':'and'
					(_cor55, _cor57)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor58> =
		  %% Line 512
		  call 'erlang':'+'
		      (304, E)
	      in  let <_cor59> =
		      %% Line 512
		      call 'erlang':'-'
			  (Day, _cor58)
		  in  %% Line 512
		      {11,_cor59}
	  %% Line 513
	  <E,Day>
	      when try
		    let <_cor60> =
			call 'erlang':'+'
			    (334, E)
		    in  call 'erlang':'=<'
			    (_cor60, Day)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor61> =
		  %% Line 514
		  call 'erlang':'+'
		      (334, E)
	      in  let <_cor62> =
		      %% Line 514
		      call 'erlang':'-'
			  (Day, _cor61)
		  in  %% Line 514
		      {12,_cor62}
	  ( <_cor64,_cor63> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor64,_cor63})
		  -| [{'function_name',{'year_day_to_date2',2}}] )
	    -| ['compiler_generated'] )
	end
'dy'/1 =
    %% Line 521
    fun (_cor0) ->
	case _cor0 of
	  <Y>
	      when call 'erlang':'=<'
		    (_cor0,
		     0) ->
	      %% Line 522
	      0
	  %% Line 523
	  <Y> when 'true' ->
	      let <X> =
		  %% Line 524
		  call 'erlang':'-'
		      (Y, 1)
	      in  let <_cor5> =
		      %% Line 525
		      call 'erlang':'div'
			  (X, 4)
		  in  let <_cor4> =
			  %% Line 525
			  call 'erlang':'div'
			      (X, 100)
		      in  let <_cor6> =
			      %% Line 525
			      call 'erlang':'-'
				  (_cor5, _cor4)
			  in  let <_cor3> =
				  %% Line 525
				  call 'erlang':'div'
				      (X, 400)
			      in  let <_cor7> =
				      %% Line 525
				      call 'erlang':'+'
					  (_cor6, _cor3)
				  in  let <_cor2> =
					  %% Line 526
					  call 'erlang':'*'
					      (X, 365)
				      in  let <_cor8> =
					      %% Line 525
					      call 'erlang':'+'
						  (_cor7, _cor2)
					  in  %% Line 526
					      call 'erlang':'+'
						  (_cor8, 366)
	end
'dm'/1 =
    %% Line 535
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      0
	  <2> when 'true' ->
	      31
	  <3> when 'true' ->
	      59
	  <4> when 'true' ->
	      90
	  %% Line 536
	  <5> when 'true' ->
	      120
	  %% Line 536
	  <6> when 'true' ->
	      151
	  %% Line 536
	  <7> when 'true' ->
	      181
	  %% Line 536
	  <8> when 'true' ->
	      212
	  %% Line 537
	  <9> when 'true' ->
	      243
	  %% Line 537
	  <10> when 'true' ->
	      273
	  %% Line 537
	  <11> when 'true' ->
	      304
	  %% Line 537
	  <12> when 'true' ->
	      334
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'dm',1}}] )
	    -| ['compiler_generated'] )
	end
'df'/2 =
    %% Line 545
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor5,Month>
	      when call 'erlang':'<'
		    (Month,
		     3) ->
	      %% Line 546
	      0
	  %% Line 547
	  <Year,_cor6> when 'true' ->
	      %% Line 548
	      case apply 'is_leap_year'/1
		       (Year) of
		%% Line 549
		<'true'> when 'true' ->
		    1
		%% Line 550
		<'false'> when 'true' ->
		    0
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('calendar')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('calendar', _cor0)
end