module 'gen' ['call'/3,
	      'call'/4,
	      'debug_options'/1,
	      'format_status_header'/2,
	      'init_it'/6,
	      'init_it'/7,
	      'module_info'/0,
	      'module_info'/1,
	      'reply'/2,
	      'start'/5,
	      'start'/6]
    attributes [%% Line 39
		'type' =
		    %% Line 39
		    [{'linkage',{'type',39,'union',[{'atom',39,'link'}|[{'atom',39,'nolink'}]]},[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'emgr_name',{'type',40,'union',[{'type',40,'tuple',[{'atom',40,'local'}|[{'type',40,'atom',[]}]]}|[{'type',41,'tuple',[{'atom',41,'global'}|[{'type',41,'term',[]}]]}|[{'type',42,'tuple',[{'atom',42,'via'}|[{'ann_type',42,[{'var',42,'Module'}|[{'type',42,'module',[]}]]}|[{'ann_type',42,[{'var',42,'Name'}|[{'type',42,'term',[]}]]}]]]}]]]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'start_ret',{'type',44,'union',[{'type',44,'tuple',[{'atom',44,'ok'}|[{'type',44,'pid',[]}]]}|[{'atom',44,'ignore'}|[{'type',44,'tuple',[{'atom',44,'error'}|[{'type',44,'term',[]}]]}]]]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'debug_flag',{'type',46,'union',[{'atom',46,'trace'}|[{'atom',46,'log'}|[{'atom',46,'statistics'}|[{'atom',46,'debug'}|[{'type',47,'tuple',[{'atom',47,'logfile'}|[{'type',47,'string',[]}]]}]]]]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'option',{'type',48,'union',[{'type',48,'tuple',[{'atom',48,'timeout'}|[{'type',48,'timeout',[]}]]}|[{'type',49,'tuple',[{'atom',49,'debug'}|[{'type',49,'list',[{'type',49,'debug_flag',[]}]}]]}|[{'type',50,'tuple',[{'atom',50,'spawn_opt'}|[{'type',50,'list',[{'remote_type',50,[{'atom',50,'proc_lib'}|[{'atom',50,'spawn_option'}|[[]]]]}]}]]}]]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'options',{'type',51,'list',[{'type',51,'option',[]}]},[]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'start',6},[{'type',69,'fun',[{'type',69,'product',[{'type',69,'module',[]}|[{'type',69,'linkage',[]}|[{'type',69,'emgr_name',[]}|[{'type',69,'module',[]}|[{'type',69,'term',[]}|[{'type',69,'options',[]}]]]]]]}|[{'type',70,'start_ret',[]}]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'start',5},[{'type',80,'fun',[{'type',80,'product',[{'type',80,'module',[]}|[{'type',80,'linkage',[]}|[{'type',80,'module',[]}|[{'type',80,'term',[]}|[{'type',80,'options',[]}]]]]]}|[{'type',80,'start_ret',[]}]]}]}]]
'start'/6 =
    %% Line 72
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 73
	case apply 'where'/1
		 (_cor3) of
	  %% Line 74
	  <'undefined'> when 'true' ->
	      %% Line 75
	      apply 'do_spawn'/6
		  (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 76
	  <Pid> when 'true' ->
	      %% Line 77
	      {'error',{'already_started',Pid}}
	end
'start'/5 =
    %% Line 82
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 83
	apply 'do_spawn'/5
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'do_spawn'/5 =
    %% Line 89
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <GenMod,'link',Mod,Args,Options> when 'true' ->
	      let <Time> =
		  %% Line 90
		  apply 'timeout'/1
		      (Options)
	      in  let <_cor7> =
		      %% Line 92
		      call 'erlang':'self'
			  ()
		  in  let <_cor8> =
			  %% Line 92
			  call 'erlang':'self'
			      ()
		      in  let <_cor6> =
			      %% Line 94
			      apply 'spawn_opts'/1
				  (Options)
			  in  %% Line 91
			      call 'proc_lib':'start_link'
				  ('gen', 'init_it', %% Line 92
						     [GenMod|[_cor7|[_cor8|[Mod|[Args|[Options|[]]]]]]], %% Line 93
													 Time, _cor6)
	  %% Line 95
	  <GenMod,_cor17,Mod,Args,Options> when 'true' ->
	      let <Time> =
		  %% Line 96
		  apply 'timeout'/1
		      (Options)
	      in  let <_cor11> =
		      %% Line 98
		      call 'erlang':'self'
			  ()
		  in  let <_cor10> =
			  %% Line 100
			  apply 'spawn_opts'/1
			      (Options)
		      in  %% Line 97
			  call 'proc_lib':'start'
			      ('gen', 'init_it', %% Line 98
						 [GenMod|[_cor11|['self'|[Mod|[Args|[Options|[]]]]]]], %% Line 99
												       Time, _cor10)
	end
'do_spawn'/6 =
    %% Line 102
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <GenMod,'link',Name,Mod,Args,Options> when 'true' ->
	      let <Time> =
		  %% Line 103
		  apply 'timeout'/1
		      (Options)
	      in  let <_cor8> =
		      %% Line 105
		      call 'erlang':'self'
			  ()
		  in  let <_cor9> =
			  %% Line 105
			  call 'erlang':'self'
			      ()
		      in  let <_cor7> =
			      %% Line 107
			      apply 'spawn_opts'/1
				  (Options)
			  in  %% Line 104
			      call 'proc_lib':'start_link'
				  ('gen', 'init_it', %% Line 105
						     [GenMod|[_cor8|[_cor9|[Name|[Mod|[Args|[Options|[]]]]]]]], %% Line 106
														Time, _cor7)
	  %% Line 108
	  <GenMod,_cor19,Name,Mod,Args,Options> when 'true' ->
	      let <Time> =
		  %% Line 109
		  apply 'timeout'/1
		      (Options)
	      in  let <_cor12> =
		      %% Line 111
		      call 'erlang':'self'
			  ()
		  in  let <_cor11> =
			  %% Line 113
			  apply 'spawn_opts'/1
			      (Options)
		      in  %% Line 110
			  call 'proc_lib':'start'
			      ('gen', 'init_it', %% Line 111
						 [GenMod|[_cor12|['self'|[Name|[Mod|[Args|[Options|[]]]]]]]], %% Line 112
													      Time, _cor11)
	end
'init_it'/6 =
    %% Line 122
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 123
	    call 'erlang':'self'
		()
	in  %% Line 123
	    apply 'init_it2'/7
		(_cor5, _cor4, _cor3, _cor6, _cor2, _cor1, _cor0)
'init_it'/7 =
    %% Line 125
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 126
	case apply 'name_register'/1
		 (_cor3) of
	  %% Line 127
	  <'true'> when 'true' ->
	      %% Line 128
	      apply 'init_it2'/7
		  (_cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 129
	  <{'false',Pid}> when 'true' ->
	      %% Line 130
	      call 'proc_lib':'init_ack'
		  (_cor5, {'error',{'already_started',Pid}})
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'init_it2'/7 =
    %% Line 133
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 134
	call _cor6:'init_it'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'call'/3 =
    %% Line 145
    fun (_cor2,_cor1,_cor0) ->
	%% Line 146
	apply 'call'/4
	    (_cor2, _cor1, _cor0, 5000)
'call'/4 =
    %% Line 149
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Pid,Label,Request,Timeout>
	      when let <_cor4> =
		    %% Line 150
		    call 'erlang':'is_pid'
			(Pid)
		in  let <_cor5> =
			%% Line 150
			call 'erlang':'=:='
			    (Timeout, 'infinity')
		    in  let <_cor6> =
			    %% Line 150
			    call 'erlang':'and'
				(_cor4, _cor5)
			in  let <_cor11> =
				%% Line 151
				try
				    let <_cor7> =
					call 'erlang':'is_pid'
					    (Pid)
				    in  let <_cor8> =
					    call 'erlang':'is_integer'
						(Timeout)
					in  let <_cor9> =
						call 'erlang':'>='
						    (Timeout, 0)
					    in  let <_cor10> =
						    call 'erlang':'and'
							(_cor8, _cor9)
						in  call 'erlang':'and'
							(_cor7, _cor10)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
			    in  %% Line 150
				call 'erlang':'or'
				    (_cor6, _cor11) ->
	      %% Line 152
	      apply 'do_call'/4
		  (Pid, Label, Request, Timeout)
	  %% Line 154
	  <Name,Label,Request,Timeout>
	      when let <_cor12> =
		    %% Line 155
		    call 'erlang':'is_atom'
			(Name)
		in  let <_cor13> =
			%% Line 155
			call 'erlang':'=:='
			    (Timeout, 'infinity')
		    in  let <_cor14> =
			    %% Line 155
			    call 'erlang':'and'
				(_cor12, _cor13)
			in  let <_cor19> =
				%% Line 156
				try
				    let <_cor15> =
					call 'erlang':'is_atom'
					    (Name)
				    in  let <_cor16> =
					    call 'erlang':'is_integer'
						(Timeout)
					in  let <_cor17> =
						call 'erlang':'>='
						    (Timeout, 0)
					    in  let <_cor18> =
						    call 'erlang':'and'
							(_cor16, _cor17)
						in  call 'erlang':'and'
							(_cor15, _cor18)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
			    in  %% Line 155
				call 'erlang':'or'
				    (_cor14, _cor19) ->
	      %% Line 157
	      case call 'erlang':'whereis'
		       (Name) of
		%% Line 158
		<Pid>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    %% Line 159
		    apply 'do_call'/4
			(Pid, Label, Request, Timeout)
		%% Line 160
		<'undefined'> when 'true' ->
		    %% Line 161
		    call 'erlang':'exit'
			('noproc')
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 164
	  <Process,Label,Request,Timeout>
	      when %% Line 168
		try
		    let <_cor24> =
			call 'erlang':'tuple_size'
			    (Process)
		    in  let <_cor27> =
			    ( case <> of
				( <>
				      when ( call 'erlang':'=='
					      (_cor24,
					       2)
					  -| ['compiler_generated'] ) ->
				      let <_cor25> =
					  ( call 'erlang':'element'
						(1, Process)
					    -| ['compiler_generated'] )
				      in  ( call 'erlang':'=:='
						(_cor25, 'global')
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  let <_cor33> =
				( case _cor27 of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor29> =
					      ( call 'erlang':'tuple_size'
						    (Process)
						-| ['compiler_generated'] )
					  in  ( case <> of
						  ( <>
							when ( call 'erlang':'=='
								(_cor29,
								 3)
							    -| ['compiler_generated'] ) ->
							let <_cor30> =
							    ( call 'erlang':'element'
								  (1, Process)
							      -| ['compiler_generated'] )
							in  ( call 'erlang':'=:='
								  (_cor30, 'via')
							      -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							'false'
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_cor22> when 'true' ->
					  _cor22
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  ( let <_cor39> =
				      ( case _cor33 of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 169
						( case <> of
						    ( <>
							  when ( call 'erlang':'=:='
								  (Timeout,
								   'infinity')
							      -| ['compiler_generated'] ) ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  ( case <> of
							      ( <>
								    when ( call 'erlang':'is_integer'
									    (Timeout)
									-| ['compiler_generated'] ) ->
								    ( call 'erlang':'>='
									  (Timeout, 0)
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_cor21> when 'true' ->
						_cor21
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '=:='
									     -| ['compiler_generated'] )
					    (( _cor39
					       -| ['compiler_generated'] ), ( 'true'
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 170
	      case apply 'where'/1
		       (Process) of
		%% Line 171
		<Pid>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    let <Node> =
			%% Line 172
			call 'erlang':'node'
			    (Pid)
		    in  %% Line 173
			try
			    apply 'do_call'/4
				(Pid, Label, Request, Timeout)
			of <_cor41> ->
			    _cor41
			catch <_cor44,_cor43,_cor42> ->
			    case <_cor44,_cor43,_cor42> of
			      %% Line 175
			      <'exit',{'nodedown',_cor69},_cor70>
				  when call 'erlang':'=:='
					(_cor69,
					 Node) ->
				  %% Line 178
				  call 'erlang':'exit'
				      ('noproc')
			      ( <_cor44,_cor43,_cor42> when 'true' ->
				    primop 'raise'
					(_cor42, _cor43)
				-| ['compiler_generated'] )
			    end
		%% Line 180
		<'undefined'> when 'true' ->
		    %% Line 181
		    call 'erlang':'exit'
			('noproc')
		( <_cor45> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor45})
		  -| ['compiler_generated'] )
	      end
	  %% Line 184
	  <{Name,Node},Label,Request,Timeout>
	      when let <_cor49> =
		    %% Line 185
		    try
			let <_cor46> =
			    call 'erlang':'node'
				()
			in  let <_cor47> =
				call 'erlang':'=:='
				    (Node, _cor46)
			    in  let <_cor48> =
				    call 'erlang':'=:='
					(Timeout, 'infinity')
				in  call 'erlang':'and'
					(_cor47, _cor48)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor55> =
			%% Line 186
			try
			    let <_cor50> =
				call 'erlang':'node'
				    ()
			    in  let <_cor51> =
				    call 'erlang':'=:='
					(Node, _cor50)
				in  let <_cor52> =
					call 'erlang':'is_integer'
					    (Timeout)
				    in  let <_cor53> =
					    call 'erlang':'>='
						(Timeout, 0)
					in  let <_cor54> =
						call 'erlang':'and'
						    (_cor52, _cor53)
					    in  call 'erlang':'and'
						    (_cor51, _cor54)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 185
			call 'erlang':'or'
			    (_cor49, _cor55) ->
	      %% Line 187
	      apply 'call'/4
		  (Name, Label, Request, Timeout)
	  %% Line 189
	  <Process = {_X_Name,Node},Label,Request,Timeout>
	      when let <_cor56> =
		    %% Line 190
		    call 'erlang':'is_atom'
			(Node)
		in  let <_cor57> =
			%% Line 190
			call 'erlang':'=:='
			    (Timeout, 'infinity')
		    in  let <_cor58> =
			    %% Line 190
			    call 'erlang':'and'
				(_cor56, _cor57)
			in  let <_cor63> =
				%% Line 191
				try
				    let <_cor59> =
					call 'erlang':'is_atom'
					    (Node)
				    in  let <_cor60> =
					    call 'erlang':'is_integer'
						(Timeout)
					in  let <_cor61> =
						call 'erlang':'>='
						    (Timeout, 0)
					    in  let <_cor62> =
						    call 'erlang':'and'
							(_cor60, _cor61)
						in  call 'erlang':'and'
							(_cor59, _cor62)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
			    in  %% Line 190
				call 'erlang':'or'
				    (_cor58, _cor63) ->
	      %% Line 192
	      case <> of
		%% Line 193
		<>
		    when try
			  let <_cor64> =
			      call 'erlang':'node'
				  ()
			  in  call 'erlang':'=:='
				  (_cor64, 'nonode@nohost')
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 194
		    call 'erlang':'exit'
			({'nodedown',Node})
		%% Line 195
		<> when 'true' ->
		    %% Line 196
		    apply 'do_call'/4
			(Process, Label, Request, Timeout)
	      end
	  ( <_cor68,_cor67,_cor66,_cor65> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor68,_cor67,_cor66,_cor65})
		  -| [{'function_name',{'call',4}}] )
	    -| ['compiler_generated'] )
	end
'do_call'/4 =
    %% Line 199
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 200
	try
	    call 'erlang':'monitor'
		('process', _cor3)
	of <_cor4> ->
	    do  catch
		    let <_cor5> =
			%% Line 211
			call 'erlang':'self'
			    ()
		    in  %% Line 211
			call 'erlang':'send'
			    (_cor3, {_cor2,{_cor5,_cor4},_cor1}, %% Line 212
								 ['noconnect'])
		%% Line 213
		receive
		  %% Line 214
		  <{_cor18,Reply}>
		      when call 'erlang':'=:='
			    (_cor18,
			     _cor4) ->
		      do  %% Line 215
			  call 'erlang':'demonitor'
			      (_cor4, ['flush'])
			  %% Line 216
			  {'ok',Reply}
		  %% Line 217
		  <{'DOWN',_cor19,_cor20,_cor21,'noconnection'}>
		      when call 'erlang':'=:='
			    (_cor19,
			     _cor4) ->
		      let <Node> =
			  %% Line 252
			  ( case _cor3 of
			      %% Line 253
			      ( <( {( _X_S
				      -| ['compiler_generated'] ),( N
								    -| ['compiler_generated'] )}
				   -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_atom'
									     -| ['compiler_generated'] )
					    (( N
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    %% Line 254
				    ( N
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 255
			      ( <_fol36>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_pid'
									     -| ['compiler_generated'] )
					    (_cor3)
					-| ['compiler_generated'] ) ->
				    %% Line 256
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'node'
									   -| ['compiler_generated'] )
					  (_cor3)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_fol37> when ( 'true'
						-| ['compiler_generated'] ) ->
				    ( primop ( 'match_fail'
					       -| ['compiler_generated'] )
					  (( {( 'case_clause'
						-| ['compiler_generated'] ),_fol37}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 219
			  call 'erlang':'exit'
			      ({'nodedown',Node})
		  %% Line 220
		  <{'DOWN',_cor22,_cor23,_cor24,Reason}>
		      when call 'erlang':'=:='
			    (_cor22,
			     _cor4) ->
		      %% Line 221
		      call 'erlang':'exit'
			  (Reason)
		after _cor0 ->
		  do  %% Line 223
		      call 'erlang':'demonitor'
			  (_cor4, ['flush'])
		      %% Line 224
		      call 'erlang':'exit'
			  ('timeout')
	catch <_cor10,_cor9,_cor8> ->
	    case <_cor10,_cor9,_cor8> of
	      %% Line 227
	      <'error',_cor25,_cor26> when 'true' ->
		  let <Node> =
		      %% Line 252
		      ( case _cor3 of
			  %% Line 253
			  ( <( {( _X_S
				  -| ['compiler_generated'] ),( N
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_atom'
									 -| ['compiler_generated'] )
					(( N
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				%% Line 254
				( N
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 255
			  ( <_fol42>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_pid'
									 -| ['compiler_generated'] )
					(_cor3)
				    -| ['compiler_generated'] ) ->
				%% Line 256
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'node'
								       -| ['compiler_generated'] )
				      (_cor3)
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_fol43> when ( 'true'
					    -| ['compiler_generated'] ) ->
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'case_clause'
					    -| ['compiler_generated'] ),_fol43}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  do  %% Line 235
			  call 'erlang':'monitor_node'
			      (Node, 'true')
			  %% Line 236
			  receive
			    %% Line 237
			    <{'nodedown',_cor27}>
				when call 'erlang':'=:='
				      (_cor27,
				       Node) ->
				do  %% Line 238
				    call 'erlang':'monitor_node'
					(Node, 'false')
				    %% Line 239
				    call 'erlang':'exit'
					({'nodedown',Node})
			  after %% Line 240
				0 ->
			    let <Tag> =
				%% Line 241
				call 'erlang':'make_ref'
				    ()
			    in  let <_cor13> =
				    %% Line 242
				    call 'erlang':'self'
					()
				in  do  %% Line 242
					call 'erlang':'!'
					    (_cor3, {_cor2,{_cor13,Tag},_cor1})
					%% Line 243
					apply 'wait_resp'/3
					    (Node, Tag, _cor0)
	      ( <_cor10,_cor9,_cor8> when 'true' ->
		    primop 'raise'
			(_cor8, _cor9)
		-| ['compiler_generated'] )
	    end
'get_node'/1 =
    %% Line 247
    fun (_cor0) ->
	%% Line 252
	case _cor0 of
	  %% Line 253
	  <{_X_S,N}>
	      when call 'erlang':'is_atom'
		    (N) ->
	      %% Line 254
	      N
	  %% Line 255
	  <_cor3>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 256
	      call 'erlang':'node'
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'wait_resp'/3 =
    %% Line 259
    fun (_cor2,_cor1,_cor0) ->
	%% Line 260
	receive
	  %% Line 261
	  <{_cor6,Reply}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      do  %% Line 262
		  call 'erlang':'monitor_node'
		      (_cor2, 'false')
		  %% Line 263
		  {'ok',Reply}
	  %% Line 264
	  <{'nodedown',_cor7}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor2) ->
	      do  %% Line 265
		  call 'erlang':'monitor_node'
		      (_cor2, 'false')
		  %% Line 266
		  call 'erlang':'exit'
		      ({'nodedown',_cor2})
	after _cor0 ->
	  do  %% Line 268
	      call 'erlang':'monitor_node'
		  (_cor2, 'false')
	      %% Line 269
	      call 'erlang':'exit'
		  ('timeout')
'reply'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{To,Tag},Reply> when 'true' ->
	      let <Msg> = {%% Line 276
		   Tag,%% Line 276
		       Reply}
	      in  %% Line 277
		  try
		      call 'erlang':'!'
			  (To, Msg)
		  of <_cor3> ->
		      _cor3
		  catch <_cor6,_cor5,_cor4> ->
		      Msg
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'reply',2}}] )
	    -| ['compiler_generated'] )
	end
'where'/1 =
    %% Line 282
    fun (_cor0) ->
	case _cor0 of
	  <{'global',Name}> when 'true' ->
	      call 'global':'whereis_name'
		  (Name)
	  %% Line 283
	  <{'via',Module,Name}> when 'true' ->
	      call Module:'whereis_name'
		  (Name)
	  %% Line 284
	  <{'local',Name}> when 'true' ->
	      call 'erlang':'whereis'
		  (Name)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'where',1}}] )
	    -| ['compiler_generated'] )
	end
'name_register'/1 =
    %% Line 286
    fun (_cor0) ->
	case _cor0 of
	  <LN = {'local',Name}> when 'true' ->
	      %% Line 287
	      try
		  let <_cor1> =
		      call 'erlang':'self'
			  ()
		  in  call 'erlang':'register'
			  (Name, _cor1)
	      of <_cor2> ->
		  case _cor2 of
		    %% Line 288
		    <'true'> when 'true' ->
			'true'
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor6,_cor5,_cor4> ->
		  case <_cor6,_cor5,_cor4> of
		    %% Line 290
		    <'error',_cor15,_cor16> when 'true' ->
			let <_cor7> =
			    %% Line 291
			    apply 'where'/1
				(LN)
			in  %% Line 291
			    {'false',_cor7}
		    ( <_cor6,_cor5,_cor4> when 'true' ->
			  primop 'raise'
			      (_cor4, _cor5)
		      -| ['compiler_generated'] )
		  end
	  %% Line 293
	  <GN = {'global',Name}> when 'true' ->
	      let <_cor8> =
		  %% Line 294
		  call 'erlang':'self'
		      ()
	      in  %% Line 294
		  case call 'global':'register_name'
			   (Name, _cor8) of
		    %% Line 295
		    <'yes'> when 'true' ->
			'true'
		    %% Line 296
		    <'no'> when 'true' ->
			let <_cor9> =
			    apply 'where'/1
				(GN)
			in  {'false',_cor9}
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 298
	  <GN = {'via',Module,Name}> when 'true' ->
	      let <_cor11> =
		  %% Line 299
		  call 'erlang':'self'
		      ()
	      in  %% Line 299
		  case call Module:'register_name'
			   (Name, _cor11) of
		    %% Line 300
		    <'yes'> when 'true' ->
			%% Line 301
			'true'
		    %% Line 302
		    <'no'> when 'true' ->
			let <_cor12> =
			    %% Line 303
			    apply 'where'/1
				(GN)
			in  %% Line 303
			    {'false',_cor12}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'name_register',1}}] )
	    -| ['compiler_generated'] )
	end
'timeout'/1 =
    %% Line 307
    fun (_cor0) ->
	%% Line 308
	case apply 'opt'/2
		 ('timeout', _cor0) of
	  %% Line 309
	  <{'ok',Time}> when 'true' ->
	      %% Line 310
	      Time
	  %% Line 311
	  <_cor3> when 'true' ->
	      %% Line 312
	      'infinity'
	end
'spawn_opts'/1 =
    %% Line 315
    fun (_cor0) ->
	%% Line 316
	case apply 'opt'/2
		 ('spawn_opt', _cor0) of
	  %% Line 317
	  <{'ok',Opts}> when 'true' ->
	      %% Line 318
	      Opts
	  %% Line 319
	  <_cor3> when 'true' ->
	      %% Line 320
	      []
	end
'opt'/2 =
    %% Line 323
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Op,[{_cor4,Value}|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Op) ->
	      %% Line 324
	      {'ok',Value}
	  %% Line 325
	  <Op,[_cor6|Options]> when 'true' ->
	      %% Line 326
	      apply 'opt'/2
		  (Op, Options)
	  %% Line 327
	  <_cor7,[]> when 'true' ->
	      %% Line 328
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'opt',2}}] )
	    -| ['compiler_generated'] )
	end
'debug_options'/1 =
    %% Line 330
    fun (_cor0) ->
	%% Line 331
	case apply 'opt'/2
		 ('debug', _cor0) of
	  %% Line 332
	  <{'ok',Options}> when 'true' ->
	      call 'sys':'debug_options'
		  (Options)
	  %% Line 333
	  <_cor3> when 'true' ->
	      []
	end
'format_status_header'/2 =
    %% Line 336
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TagLine,Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor2> =
		  %% Line 337
		  call 'erlang':'pid_to_list'
		      (Pid)
	      in  %% Line 337
		  call 'lists':'concat'
		      ([TagLine|[[32]|[_cor2|[]]]])
	  %% Line 338
	  <TagLine,RegName>
	      when call 'erlang':'is_atom'
		    (RegName) ->
	      %% Line 339
	      call 'lists':'concat'
		  ([TagLine|[[32]|[RegName|[]]]])
	  %% Line 340
	  <TagLine,Name> when 'true' ->
	      %% Line 341
	      {TagLine,Name}
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gen')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gen', _cor0)
end