module 'file_sorter' ['check'/1,
		      'check'/2,
		      'keycheck'/2,
		      'keycheck'/3,
		      'keymerge'/3,
		      'keymerge'/4,
		      'keysort'/2,
		      'keysort'/3,
		      'keysort'/4,
		      'merge'/2,
		      'merge'/3,
		      'module_info'/0,
		      'module_info'/1,
		      'sort'/1,
		      'sort'/2,
		      'sort'/3]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','w'},[{'record_field',39,{'atom',39,'keypos'}}|[{'record_field',39,{'atom',39,'runs'},{'cons',39,{'nil',39},{'nil',39}}}|[{'record_field',39,{'atom',39,'seq'},{'integer',39,1}}|[{'record_field',39,{'atom',39,'in'}}|[{'record_field',39,{'atom',39,'out'}}|[{'record_field',39,{'atom',39,'fun_out'}}|[{'record_field',39,{'atom',39,'prefix'}}|[{'record_field',39,{'atom',39,'temp'},{'nil',39}}|[{'record_field',40,{'atom',40,'format'}}|[{'record_field',40,{'atom',40,'runsize'}}|[{'record_field',40,{'atom',40,'no_files'}}|[{'record_field',40,{'atom',40,'order'}}|[{'record_field',40,{'atom',40,'chunksize'}}|[{'record_field',40,{'atom',40,'wfd'}}|[{'record_field',40,{'atom',40,'ref'}}|[{'record_field',40,{'atom',40,'z'}}|[{'record_field',40,{'atom',40,'unique'}}|[{'record_field',41,{'atom',41,'hdlen'}}|[{'record_field',41,{'atom',41,'inout_value'}}]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','opts'},[{'record_field',43,{'atom',43,'format'},{'call',43,{'atom',43,'binary_term_fun'},[]}}|[{'record_field',43,{'atom',43,'size'},{'integer',43,524288}}|[{'record_field',44,{'atom',44,'no_files'},{'integer',44,16}}|[{'record_field',44,{'atom',44,'tmpdir'},{'atom',44,'default'}}|[{'record_field',44,{'atom',44,'order'},{'atom',44,'ascending'}}|[{'record_field',45,{'atom',45,'compressed'},{'atom',45,'false'}}|[{'record_field',45,{'atom',45,'unique'},{'atom',45,'false'}}|[{'record_field',45,{'atom',45,'header'},{'integer',45,4}}]]]]]]]],[]}],
		%% Line 53
		'export_type' =
		    %% Line 53
		    [{'reason',0}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'file_name',{'remote_type',55,[{'atom',55,'file'}|[{'atom',55,'name'}|[[]]]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'file_names',{'type',56,'list',[{'remote_type',56,[{'atom',56,'file'}|[{'atom',56,'name'}|[[]]]]}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'i_command',{'type',57,'union',[{'atom',57,'read'}|[{'atom',57,'close'}]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'i_reply',{'type',58,'union',[{'atom',58,'end_of_input'}|[{'type',58,'tuple',[{'atom',58,'end_of_input'}|[{'type',58,'value',[]}]]}|[{'type',59,'tuple',[{'type',59,'list',[{'type',59,'object',[]}]}|[{'type',59,'infun',[]}]]}|[{'type',59,'input_reply',[]}]]]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'infun',{'type',60,'fun',[{'type',60,'product',[{'type',60,'i_command',[]}]}|[{'type',60,'i_reply',[]}]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'input',{'type',61,'union',[{'type',61,'file_names',[]}|[{'type',61,'infun',[]}]]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'input_reply',{'type',62,'term',[]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'o_command',{'type',63,'union',[{'type',63,'tuple',[{'atom',63,'value'}|[{'type',63,'value',[]}]]}|[{'type',63,'list',[{'type',63,'object',[]}]}|[{'atom',63,'close'}]]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'o_reply',{'type',64,'union',[{'type',64,'outfun',[]}|[{'type',64,'output_reply',[]}]]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'object',{'type',65,'union',[{'type',65,'term',[]}|[{'type',65,'binary',[]}]]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'outfun',{'type',66,'fun',[{'type',66,'product',[{'type',66,'o_command',[]}]}|[{'type',66,'o_reply',[]}]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'output',{'type',67,'union',[{'type',67,'file_name',[]}|[{'type',67,'outfun',[]}]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'output_reply',{'type',68,'term',[]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'value',{'type',69,'term',[]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'options',{'type',71,'union',[{'type',71,'list',[{'type',71,'option',[]}]}|[{'type',71,'option',[]}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'option',{'type',72,'union',[{'type',72,'tuple',[{'atom',72,'compressed'}|[{'type',72,'boolean',[]}]]}|[{'type',73,'tuple',[{'atom',73,'header'}|[{'type',73,'header_length',[]}]]}|[{'type',74,'tuple',[{'atom',74,'format'}|[{'type',74,'format',[]}]]}|[{'type',75,'tuple',[{'atom',75,'no_files'}|[{'type',75,'no_files',[]}]]}|[{'type',76,'tuple',[{'atom',76,'order'}|[{'type',76,'order',[]}]]}|[{'type',77,'tuple',[{'atom',77,'size'}|[{'type',77,'size',[]}]]}|[{'type',78,'tuple',[{'atom',78,'tmpdir'}|[{'type',78,'tmp_directory',[]}]]}|[{'type',79,'tuple',[{'atom',79,'unique'}|[{'type',79,'boolean',[]}]]}]]]]]]]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'format',{'type',80,'union',[{'atom',80,'binary_term'}|[{'atom',80,'term'}|[{'atom',80,'binary'}|[{'type',80,'format_fun',[]}]]]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'format_fun',{'type',81,'fun',[{'type',81,'product',[{'type',81,'binary',[]}]}|[{'type',81,'term',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'header_length',{'type',82,'pos_integer',[]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'key_pos',{'type',83,'union',[{'type',83,'pos_integer',[]}|[{'type',83,'list',[{'type',83,'pos_integer',[]}]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'no_files',{'type',84,'pos_integer',[]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'order',{'type',85,'union',[{'atom',85,'ascending'}|[{'atom',85,'descending'}|[{'type',85,'order_fun',[]}]]]},[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'order_fun',{'type',86,'fun',[{'type',86,'product',[{'type',86,'term',[]}|[{'type',86,'term',[]}]]}|[{'type',86,'boolean',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'size',{'type',87,'non_neg_integer',[]},[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{'tmp_directory',{'type',88,'union',[{'type',88,'nil',[]}|[{'remote_type',88,[{'atom',88,'file'}|[{'atom',88,'name'}|[[]]]]}]]},[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'reason',{'type',90,'union',[{'atom',90,'bad_object'}|[{'type',91,'tuple',[{'atom',91,'bad_object'}|[{'type',91,'file_name',[]}]]}|[{'type',92,'tuple',[{'atom',92,'bad_term'}|[{'type',92,'file_name',[]}]]}|[{'type',93,'tuple',[{'atom',93,'file_error'}|[{'type',93,'file_name',[]}|[{'type',94,'union',[{'remote_type',94,[{'atom',94,'file'}|[{'atom',94,'posix'}|[[]]]]}|[{'atom',94,'badarg'}|[{'atom',94,'system_limit'}]]]}]]]}|[{'type',95,'tuple',[{'atom',95,'premature_eof'}|[{'type',95,'file_name',[]}]]}]]]]]},[]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'sort',1},[{'type',97,'bounded_fun',[{'type',97,'fun',[{'type',97,'product',[{'var',97,'FileName'}]}|[{'var',97,'Reply'}]]}|[[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'FileName'}|[{'type',98,'file_name',[]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Reply'}|[{'type',99,'union',[{'atom',99,'ok'}|[{'type',99,'tuple',[{'atom',99,'error'}|[{'type',99,'reason',[]}]]}|[{'type',99,'input_reply',[]}|[{'type',99,'output_reply',[]}]]]]}]]]]}]]]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'sort',2},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'Input'}|[{'var',103,'Output'}]]}|[{'var',103,'Reply'}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Input'}|[{'type',104,'input',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Output'}|[{'type',105,'output',[]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Reply'}|[{'type',106,'union',[{'atom',106,'ok'}|[{'type',106,'tuple',[{'atom',106,'error'}|[{'type',106,'reason',[]}]]}|[{'type',106,'input_reply',[]}|[{'type',106,'output_reply',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 110
		'spec' =
		    %% Line 110
		    [{{'sort',3},[{'type',110,'bounded_fun',[{'type',110,'fun',[{'type',110,'product',[{'var',110,'Input'}|[{'var',110,'Output'}|[{'var',110,'Options'}]]]}|[{'var',110,'Reply'}]]}|[[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Input'}|[{'type',111,'input',[]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Output'}|[{'type',112,'output',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Options'}|[{'type',113,'options',[]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Reply'}|[{'type',114,'union',[{'atom',114,'ok'}|[{'type',114,'tuple',[{'atom',114,'error'}|[{'type',114,'reason',[]}]]}|[{'type',114,'input_reply',[]}|[{'type',114,'output_reply',[]}]]]]}]]]]}]]]]]]}]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'keysort',2},[{'type',123,'bounded_fun',[{'type',123,'fun',[{'type',123,'product',[{'var',123,'KeyPos'}|[{'var',123,'FileName'}]]}|[{'var',123,'Reply'}]]}|[[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'KeyPos'}|[{'type',124,'key_pos',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'FileName'}|[{'type',125,'file_name',[]}]]]]}|[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Reply'}|[{'type',126,'union',[{'atom',126,'ok'}|[{'type',126,'tuple',[{'atom',126,'error'}|[{'type',126,'reason',[]}]]}|[{'type',126,'input_reply',[]}|[{'type',126,'output_reply',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'keysort',3},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'KeyPos'}|[{'var',130,'Input'}|[{'var',130,'Output'}]]]}|[{'var',130,'Reply'}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'KeyPos'}|[{'type',131,'key_pos',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Input'}|[{'type',132,'input',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Output'}|[{'type',133,'output',[]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Reply'}|[{'type',134,'union',[{'atom',134,'ok'}|[{'type',134,'tuple',[{'atom',134,'error'}|[{'type',134,'reason',[]}]]}|[{'type',134,'input_reply',[]}|[{'type',134,'output_reply',[]}]]]]}]]]]}]]]]]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'keysort',4},[{'type',138,'bounded_fun',[{'type',138,'fun',[{'type',138,'product',[{'var',138,'KeyPos'}|[{'var',138,'Input'}|[{'var',138,'Output'}|[{'var',138,'Options'}]]]]}|[{'var',138,'Reply'}]]}|[[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'KeyPos'}|[{'type',139,'key_pos',[]}]]]]}|[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Input'}|[{'type',140,'input',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Output'}|[{'type',141,'output',[]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Options'}|[{'type',142,'options',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Reply'}|[{'type',143,'union',[{'atom',143,'ok'}|[{'type',143,'tuple',[{'atom',143,'error'}|[{'type',143,'reason',[]}]]}|[{'type',143,'input_reply',[]}|[{'type',143,'output_reply',[]}]]]]}]]]]}]]]]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'merge',2},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'FileNames'}|[{'var',163,'Output'}]]}|[{'var',163,'Reply'}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'FileNames'}|[{'type',164,'file_names',[]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Output'}|[{'type',165,'output',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Reply'}|[{'type',166,'union',[{'atom',166,'ok'}|[{'type',166,'tuple',[{'atom',166,'error'}|[{'type',166,'reason',[]}]]}|[{'type',166,'output_reply',[]}]]]}]]]]}]]]]]}]}],
		%% Line 170
		'spec' =
		    %% Line 170
		    [{{'merge',3},[{'type',170,'bounded_fun',[{'type',170,'fun',[{'type',170,'product',[{'var',170,'FileNames'}|[{'var',170,'Output'}|[{'var',170,'Options'}]]]}|[{'var',170,'Reply'}]]}|[[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'FileNames'}|[{'type',171,'file_names',[]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Output'}|[{'type',172,'output',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Options'}|[{'type',173,'options',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Reply'}|[{'type',174,'union',[{'atom',174,'ok'}|[{'type',174,'tuple',[{'atom',174,'error'}|[{'type',174,'reason',[]}]]}|[{'type',174,'output_reply',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 184
		'spec' =
		    %% Line 184
		    [{{'keymerge',3},[{'type',184,'bounded_fun',[{'type',184,'fun',[{'type',184,'product',[{'var',184,'KeyPos'}|[{'var',184,'FileNames'}|[{'var',184,'Output'}]]]}|[{'var',184,'Reply'}]]}|[[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'KeyPos'}|[{'type',185,'key_pos',[]}]]]]}|[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'FileNames'}|[{'type',186,'file_names',[]}]]]]}|[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Output'}|[{'type',187,'output',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Reply'}|[{'type',188,'union',[{'atom',188,'ok'}|[{'type',188,'tuple',[{'atom',188,'error'}|[{'type',188,'reason',[]}]]}|[{'type',188,'output_reply',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'keymerge',4},[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'KeyPos'}|[{'var',192,'FileNames'}|[{'var',192,'Output'}|[{'var',192,'Options'}]]]]}|[{'var',192,'Reply'}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'KeyPos'}|[{'type',193,'key_pos',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'FileNames'}|[{'type',194,'file_names',[]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Output'}|[{'type',195,'output',[]}]]]]}|[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Options'}|[{'type',196,'options',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Reply'}|[{'type',197,'union',[{'atom',197,'ok'}|[{'type',197,'tuple',[{'atom',197,'error'}|[{'type',197,'reason',[]}]]}|[{'type',197,'output_reply',[]}]]]}]]]]}]]]]]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'check',1},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'FileName'}]}|[{'var',217,'Reply'}]]}|[[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'FileName'}|[{'type',218,'file_name',[]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Reply'}|[{'type',219,'union',[{'type',219,'tuple',[{'atom',219,'ok'}|[{'type',219,'list',[{'var',219,'Result'}]}]]}|[{'type',219,'tuple',[{'atom',219,'error'}|[{'type',219,'reason',[]}]]}]]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Result'}|[{'type',220,'tuple',[{'var',220,'FileName'}|[{'var',220,'TermPosition'}|[{'type',220,'term',[]}]]]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'TermPosition'}|[{'type',221,'pos_integer',[]}]]]]}]]]]]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'check',2},[{'type',225,'bounded_fun',[{'type',225,'fun',[{'type',225,'product',[{'var',225,'FileNames'}|[{'var',225,'Options'}]]}|[{'var',225,'Reply'}]]}|[[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'FileNames'}|[{'type',226,'file_names',[]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Options'}|[{'type',227,'options',[]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Reply'}|[{'type',228,'union',[{'type',228,'tuple',[{'atom',228,'ok'}|[{'type',228,'list',[{'var',228,'Result'}]}]]}|[{'type',228,'tuple',[{'atom',228,'error'}|[{'type',228,'reason',[]}]]}]]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Result'}|[{'type',229,'tuple',[{'var',229,'FileName'}|[{'var',229,'TermPosition'}|[{'type',229,'term',[]}]]]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'FileName'}|[{'type',230,'file_name',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'TermPosition'}|[{'type',231,'pos_integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 240
		'spec' =
		    %% Line 240
		    [{{'keycheck',2},[{'type',240,'bounded_fun',[{'type',240,'fun',[{'type',240,'product',[{'var',240,'KeyPos'}|[{'var',240,'FileName'}]]}|[{'var',240,'Reply'}]]}|[[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'KeyPos'}|[{'type',241,'key_pos',[]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'FileName'}|[{'type',242,'file_name',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Reply'}|[{'type',243,'union',[{'type',243,'tuple',[{'atom',243,'ok'}|[{'type',243,'list',[{'var',243,'Result'}]}]]}|[{'type',243,'tuple',[{'atom',243,'error'}|[{'type',243,'reason',[]}]]}]]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Result'}|[{'type',244,'tuple',[{'var',244,'FileName'}|[{'var',244,'TermPosition'}|[{'type',244,'term',[]}]]]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'TermPosition'}|[{'type',245,'pos_integer',[]}]]]]}]]]]]]]}]}],
		%% Line 249
		'spec' =
		    %% Line 249
		    [{{'keycheck',3},[{'type',249,'bounded_fun',[{'type',249,'fun',[{'type',249,'product',[{'var',249,'KeyPos'}|[{'var',249,'FileNames'}|[{'var',249,'Options'}]]]}|[{'var',249,'Reply'}]]}|[[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'KeyPos'}|[{'type',250,'key_pos',[]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'FileNames'}|[{'type',251,'file_names',[]}]]]]}|[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Options'}|[{'type',252,'options',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Reply'}|[{'type',253,'union',[{'type',253,'tuple',[{'atom',253,'ok'}|[{'type',253,'list',[{'var',253,'Result'}]}]]}|[{'type',253,'tuple',[{'atom',253,'error'}|[{'type',253,'reason',[]}]]}]]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'Result'}|[{'type',254,'tuple',[{'var',254,'FileName'}|[{'var',254,'TermPosition'}|[{'type',254,'term',[]}]]]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'FileName'}|[{'type',255,'file_name',[]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'TermPosition'}|[{'type',256,'pos_integer',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1471
		'spec' =
		    %% Line 1471
		    [{{'file_error',3},[{'type',1471,'fun',[{'type',1471,'product',[{'var',1471,'_'}|[{'type',1471,'tuple',[{'atom',1471,'error'}|[{'type',1471,'atom',[]}]]}|[{'type',1471,'record',[{'atom',1471,'w'}]}]]]}|[{'type',1471,'no_return',[]}]]}]}]]
'sort'/1 =
    %% Line 100
    fun (_cor0) ->
	%% Line 101
	apply 'sort'/2
	    ([_cor0|[]], _cor0)
'sort'/2 =
    %% Line 107
    fun (_cor1,_cor0) ->
	%% Line 108
	apply 'sort'/3
	    (_cor1, _cor0, [])
'sort'/3 =
    %% Line 115
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 116
	    apply 'is_input'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 116
		apply 'maybe_output'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 116
		    apply 'options'/1
			(_cor0)
		in  %% Line 116
		    case <_cor5,_cor4,_cor3> of
		      %% Line 117
		      <{'true',Input},{'true',Output},Opts = {'opts',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
			  %% Line 118
			  apply 'do_sort'/5
			      (0, Input, Output, Opts, 'sort')
		      %% Line 119
		      <_fol3,_fol4,_fol5> when 'true' ->
			  let <T> = {_fol3,_fol4,_fol5}
			  in  let <_cor6> =
				  %% Line 120
				  call 'erlang':'tuple_to_list'
				      (T)
			      in  let <_cor7> =
				      %% Line 120
				      apply 'culprit'/1
					  (_cor6)
				  in  let <_fol12> =
					  %% Line 120
					  [_cor2|[_cor1|[_cor0|[]]]]
				      in  %% Line 295
					  ( case <_cor7,_fol12> of
					      ( <( ( E
						     -| ['compiler_generated'] ) = ( {( 'error'
											-| ['compiler_generated'] ),( _cor4
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( _X_Args
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
						    %% Line 296
						    ( E
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 297
					      ( <( ( B
						     -| ['compiler_generated'] ) = ( {( 'badarg'
											-| ['compiler_generated'] ),( _cor5
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( Args
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
						    %% Line 298
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( B
							     -| ['compiler_generated'] ), ( Args
											    -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor3
						   -| ['compiler_generated'] ),_fol13> when ( 'true'
											      -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),( _cor3
											      -| ['compiler_generated'] ),_fol13}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
		    end
'keysort'/2 =
    %% Line 127
    fun (_cor1,_cor0) ->
	%% Line 128
	apply 'keysort'/3
	    (_cor1, [_cor0|[]], _cor0)
'keysort'/3 =
    %% Line 135
    fun (_cor2,_cor1,_cor0) ->
	%% Line 136
	apply 'keysort'/4
	    (_cor2, _cor1, _cor0, [])
'keysort'/4 =
    %% Line 144
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 145
	    apply 'is_keypos'/1
		(_cor3)
	in  let <_cor6> =
		%% Line 145
		apply 'is_input'/1
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 146
		    apply 'maybe_output'/1
			(_cor1)
		in  let <_cor4> =
			%% Line 146
			apply 'options'/1
			    (_cor0)
		    in  let <_cor10> =
			    %% Line 145
			    case <_cor7,_cor6,_cor5,_cor4> of
			      %% Line 147
			      <_cor18,_cor19,_cor20,{'opts','binary',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
				  %% Line 148
				  {_cor2,_cor1,[{'badarg','format'}]}
			      %% Line 149
			      <_cor28,_cor29,_cor30,{'opts',_cor31,_cor32,_cor33,_cor34,Order,_cor35,_cor36,_cor37}>
				  when call 'erlang':'is_function'
					(Order) ->
				  %% Line 150
				  {_cor2,_cor1,[{'badarg','order'}]}
			      %% Line 151
			      <'true',{'true',In},{'true',Out},Opts = {'opts',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
				  %% Line 152
				  {In,Out,Opts}
			      %% Line 153
			      <_fol19,_fol20,_fol21,_fol22> when 'true' ->
				  let <T> =
				      ( {_fol19,_fol20,_fol21,_fol22}
					-| ['compiler_generated'] )
				  in  let <_cor8> =
					  %% Line 154
					  call 'erlang':'tuple_to_list'
					      (T)
				      in  %% Line 154
					  {_cor2,_cor1,_cor8}
			    end
			in  %% Line 156
			    case _cor10 of
			      %% Line 157
			      <{Input,Output,O = {'opts',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}}> when 'true' ->
				  %% Line 158
				  apply 'do_sort'/5
				      (_cor3, Input, Output, O, 'sort')
			      %% Line 159
			      <{_cor54,_cor55,O}> when 'true' ->
				  let <_cor12> =
				      %% Line 160
				      apply 'culprit'/1
					  (O)
				  in  let <_fol31> =
					  %% Line 160
					  [_cor3|[_cor2|[_cor1|[_cor0|[]]]]]
				      in  %% Line 295
					  ( case <_cor12,_fol31> of
					      ( <( ( E
						     -| ['compiler_generated'] ) = ( {( 'error'
											-| ['compiler_generated'] ),( _cor4
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( _X_Args
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
						    %% Line 296
						    ( E
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 297
					      ( <( ( B
						     -| ['compiler_generated'] ) = ( {( 'badarg'
											-| ['compiler_generated'] ),( _cor5
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( Args
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
						    %% Line 298
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( B
							     -| ['compiler_generated'] ), ( Args
											    -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_fol32,_fol33> when ( 'true'
								       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),_fol32,_fol33}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor13})
				-| ['compiler_generated'] )
			    end
'merge'/2 =
    %% Line 167
    fun (_cor1,_cor0) ->
	%% Line 168
	apply 'merge'/3
	    (_cor1, _cor0, [])
'merge'/3 =
    %% Line 175
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 176
	    apply 'is_files'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 176
		apply 'maybe_output'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 176
		    apply 'options'/1
			(_cor0)
		in  %% Line 176
		    case <_cor5,_cor4,_cor3> of
		      %% Line 178
		      <{'true',Files},{'true',Output},Opts = {'opts',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
			  %% Line 179
			  apply 'do_sort'/5
			      (0, Files, Output, Opts, 'merge')
		      %% Line 180
		      <_fol36,_fol37,_fol38> when 'true' ->
			  let <T> = {_fol36,_fol37,_fol38}
			  in  let <_cor6> =
				  %% Line 181
				  call 'erlang':'tuple_to_list'
				      (T)
			      in  let <_cor7> =
				      %% Line 181
				      apply 'culprit'/1
					  (_cor6)
				  in  let <_fol45> =
					  %% Line 181
					  [_cor2|[_cor1|[_cor0|[]]]]
				      in  %% Line 295
					  ( case <_cor7,_fol45> of
					      ( <( ( E
						     -| ['compiler_generated'] ) = ( {( 'error'
											-| ['compiler_generated'] ),( _cor4
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( _X_Args
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
						    %% Line 296
						    ( E
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 297
					      ( <( ( B
						     -| ['compiler_generated'] ) = ( {( 'badarg'
											-| ['compiler_generated'] ),( _cor5
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( Args
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
						    %% Line 298
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( B
							     -| ['compiler_generated'] ), ( Args
											    -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor3
						   -| ['compiler_generated'] ),_fol46> when ( 'true'
											      -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),( _cor3
											      -| ['compiler_generated'] ),_fol46}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
		    end
'keymerge'/3 =
    %% Line 189
    fun (_cor2,_cor1,_cor0) ->
	%% Line 190
	apply 'keymerge'/4
	    (_cor2, _cor1, _cor0, [])
'keymerge'/4 =
    %% Line 198
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 199
	    apply 'is_keypos'/1
		(_cor3)
	in  let <_cor6> =
		%% Line 199
		apply 'is_files'/1
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 200
		    apply 'maybe_output'/1
			(_cor1)
		in  let <_cor4> =
			%% Line 200
			apply 'options'/1
			    (_cor0)
		    in  let <_cor10> =
			    %% Line 199
			    case <_cor7,_cor6,_cor5,_cor4> of
			      %% Line 201
			      <_cor18,_cor19,_cor20,{'opts','binary',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
				  %% Line 202
				  {_cor2,_cor1,[{'badarg','format'}]}
			      %% Line 203
			      <_cor28,_cor29,_cor30,{'opts',_cor31,_cor32,_cor33,_cor34,Order,_cor35,_cor36,_cor37}>
				  when call 'erlang':'is_function'
					(Order) ->
				  %% Line 204
				  {_cor2,_cor1,[{'badarg','order'}]}
			      %% Line 205
			      <'true',{'true',Fs},{'true',Out},Opts = {'opts',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
				  %% Line 206
				  {Fs,Out,Opts}
			      %% Line 207
			      <_fol50,_fol51,_fol52,_fol53> when 'true' ->
				  let <T> =
				      ( {_fol50,_fol51,_fol52,_fol53}
					-| ['compiler_generated'] )
				  in  let <_cor8> =
					  %% Line 208
					  call 'erlang':'tuple_to_list'
					      (T)
				      in  %% Line 208
					  {_cor2,_cor1,_cor8}
			    end
			in  %% Line 210
			    case _cor10 of
			      %% Line 211
			      <{Files,Output,O = {'opts',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}}> when 'true' ->
				  %% Line 212
				  apply 'do_sort'/5
				      (_cor3, Files, Output, O, 'merge')
			      %% Line 213
			      <{_cor54,_cor55,O}> when 'true' ->
				  let <_cor12> =
				      %% Line 214
				      apply 'culprit'/1
					  (O)
				  in  let <_fol62> =
					  %% Line 214
					  [_cor3|[_cor2|[_cor1|[_cor0|[]]]]]
				      in  %% Line 295
					  ( case <_cor12,_fol62> of
					      ( <( ( E
						     -| ['compiler_generated'] ) = ( {( 'error'
											-| ['compiler_generated'] ),( _cor4
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( _X_Args
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
						    %% Line 296
						    ( E
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 297
					      ( <( ( B
						     -| ['compiler_generated'] ) = ( {( 'badarg'
											-| ['compiler_generated'] ),( _cor5
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( Args
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
						    %% Line 298
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( B
							     -| ['compiler_generated'] ), ( Args
											    -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_fol63,_fol64> when ( 'true'
								       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),_fol63,_fol64}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor13})
				-| ['compiler_generated'] )
			    end
'check'/1 =
    %% Line 222
    fun (_cor0) ->
	%% Line 223
	apply 'check'/2
	    ([_cor0|[]], [])
'check'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 233
	    apply 'is_files'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 233
		apply 'options'/1
		    (_cor0)
	    in  %% Line 233
		case <_cor3,_cor2> of
		  %% Line 234
		  <{'true',Files},Opts = {'opts',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
		      %% Line 235
		      apply 'do_sort'/5
			  (0, Files, 'undefined', Opts, 'check')
		  %% Line 236
		  <_fol66,_fol67> when 'true' ->
		      let <T> = {_fol66,_fol67}
		      in  let <_cor4> =
			      %% Line 237
			      call 'erlang':'tuple_to_list'
				  (T)
			  in  let <_cor5> =
				  %% Line 237
				  apply 'culprit'/1
				      (_cor4)
			      in  let <_fol73> =
				      %% Line 237
				      [_cor1|[_cor0|[]]]
				  in  %% Line 295
				      ( case <_cor5,_fol73> of
					  ( <( ( E
						 -| ['compiler_generated'] ) = ( {( 'error'
										    -| ['compiler_generated'] ),( _cor4
														  -| ['compiler_generated'] )}
										 -| ['compiler_generated'] )
					       -| ['compiler_generated'] ),( _X_Args
									     -| ['compiler_generated'] )> when ( 'true'
														 -| ['compiler_generated'] ) ->
						%% Line 296
						( E
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 297
					  ( <( ( B
						 -| ['compiler_generated'] ) = ( {( 'badarg'
										    -| ['compiler_generated'] ),_fol70}
										 -| ['compiler_generated'] )
					       -| ['compiler_generated'] ),( Args
									     -| ['compiler_generated'] )> when ( 'true'
														 -| ['compiler_generated'] ) ->
						%% Line 298
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( B
							 -| ['compiler_generated'] ), ( Args
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( _cor3
					       -| ['compiler_generated'] ),( _cor2
									     -| ['compiler_generated'] )> when ( 'true'
														 -| ['compiler_generated'] ) ->
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),( _cor3
											  -| ['compiler_generated'] ),( _cor2
															-| ['compiler_generated'] )}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
		end
'keycheck'/2 =
    %% Line 246
    fun (_cor1,_cor0) ->
	%% Line 247
	apply 'keycheck'/3
	    (_cor1, [_cor0|[]], [])
'keycheck'/3 =
    %% Line 257
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 258
	    apply 'is_keypos'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 258
		apply 'is_files'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 258
		    apply 'options'/1
			(_cor0)
		in  let <_cor8> =
			%% Line 258
			case <_cor5,_cor4,_cor3> of
			  %% Line 259
			  <_cor15,_cor16,{'opts','binary',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
			      %% Line 260
			      {_cor1,[{'badarg','format'}]}
			  %% Line 261
			  <_cor24,_cor25,{'opts',_cor26,_cor27,_cor28,_cor29,Order,_cor30,_cor31,_cor32}>
			      when call 'erlang':'is_function'
				    (Order) ->
			      %% Line 262
			      {_cor1,[{'badarg','order'}]}
			  %% Line 263
			  <'true',{'true',Fs},Opts = {'opts',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
			      %% Line 264
			      {Fs,Opts}
			  %% Line 265
			  <_fol76,_fol77,_fol78> when 'true' ->
			      let <T> = {_fol76,_fol77,_fol78}
			      in  let <_cor6> =
				      %% Line 266
				      call 'erlang':'tuple_to_list'
					  (T)
				  in  %% Line 266
				      {_cor1,_cor6}
			end
		    in  %% Line 268
			case _cor8 of
			  %% Line 269
			  <{Files,O = {'opts',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}}> when 'true' ->
			      %% Line 270
			      apply 'do_sort'/5
				  (_cor2, Files, 'undefined', O, 'check')
			  %% Line 271
			  <{_cor49,O}> when 'true' ->
			      let <_cor10> =
				  %% Line 272
				  apply 'culprit'/1
				      (O)
			      in  let <_fol85> =
				      %% Line 272
				      [_cor2|[_cor1|[_cor0|[]]]]
				  in  %% Line 295
				      ( case <_cor10,_fol85> of
					  ( <( ( E
						 -| ['compiler_generated'] ) = ( {( 'error'
										    -| ['compiler_generated'] ),( _cor4
														  -| ['compiler_generated'] )}
										 -| ['compiler_generated'] )
					       -| ['compiler_generated'] ),( _X_Args
									     -| ['compiler_generated'] )> when ( 'true'
														 -| ['compiler_generated'] ) ->
						%% Line 296
						( E
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 297
					  ( <( ( B
						 -| ['compiler_generated'] ) = ( {( 'badarg'
										    -| ['compiler_generated'] ),( _cor5
														  -| ['compiler_generated'] )}
										 -| ['compiler_generated'] )
					       -| ['compiler_generated'] ),( Args
									     -| ['compiler_generated'] )> when ( 'true'
														 -| ['compiler_generated'] ) ->
						%% Line 298
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( B
							 -| ['compiler_generated'] ), ( Args
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( _cor3
					       -| ['compiler_generated'] ),_fol86> when ( 'true'
											  -| ['compiler_generated'] ) ->
						( primop ( 'match_fail'
							   -| ['compiler_generated'] )
						      (( {( 'function_clause'
							    -| ['compiler_generated'] ),( _cor3
											  -| ['compiler_generated'] ),_fol86}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor11})
			    -| ['compiler_generated'] )
			end
'culprit'/1 =
    %% Line 287
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'error',_cor2}|_cor3]> when 'true' ->
	      %% Line 288
	      E
	  %% Line 289
	  <[B = {'badarg',_cor4}|_cor5]> when 'true' ->
	      %% Line 290
	      B
	  %% Line 291
	  <[_cor6|B]> when 'true' ->
	      %% Line 292
	      apply 'culprit'/1
		  (B)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'culprit',1}}] )
	    -| ['compiler_generated'] )
	end
'badarg'/2 =
    %% Line 295
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'error',_cor4},_X_Args> when 'true' ->
	      %% Line 296
	      E
	  %% Line 297
	  <B = {'badarg',_cor5},Args> when 'true' ->
	      %% Line 298
	      call 'erlang':'error'
		  (B, Args)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'badarg',2}}] )
	    -| ['compiler_generated'] )
	end
'options'/1 =
    %% Line 300
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  apply 'binary_term_fun'/0
		      ()
	      in  %% Line 301
		  apply 'options'/2
		      (Options, {'opts',_cor1,524288,16,'default','ascending','false','false',4})
	  %% Line 302
	  <Option> when 'true' ->
	      %% Line 303
	      apply 'options'/1
		  ([Option|[]])
	end
'options'/2 =
    %% Line 305
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'format',Format}|L],Opts>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Format, 'binary')
		in  let <_cor3> =
			%% Line 306
			call 'erlang':'=:='
			    (Format, 'term')
		    in  let <_cor6> =
			    %% Line 307
			    try
				let <_cor4> =
				    call 'erlang':'is_function'
					(Format)
				in  let <_cor5> =
					%% Line 308
					call 'erlang':'is_function'
					    (Format, 1)
				    in  call 'erlang':'and'
					    (_cor4, _cor5)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor7> =
				%% Line 306
				call 'erlang':'or'
				    (_cor3, _cor6)
			    in  call 'erlang':'or'
				    (_cor2, _cor7) ->
	      %% Line 309
	      case Opts of
		<{'opts',_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (2, Opts, Format)
		    in  apply 'options'/2
			    (L, _cor10)
		( <_cor78> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 310
	  <[{'format','binary_term'}|L],Opts> when 'true' ->
	      let <_rec1> =
		  %% Line 311
		  apply 'binary_term_fun'/0
		      ()
	      in  %% Line 311
		  case Opts of
		    <{'opts',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86}> when 'true' ->
			let <_cor14> =
			    call 'erlang':'setelement'
				(2, Opts, _rec1)
			in  apply 'options'/2
				(L, _cor14)
		    ( <_cor87> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 312
	  <[{'size',Size}|L],Opts>
	      when let <_cor15> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor16> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      let <_rec3> =
		  %% Line 313
		  call 'erlang':'max'
		      (Size, 1)
	      in  %% Line 313
		  case Opts of
		    <{'opts',_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}> when 'true' ->
			let <_cor20> =
			    call 'erlang':'setelement'
				(3, Opts, _rec3)
			in  apply 'options'/2
				(L, _cor20)
		    ( <_cor96> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 314
	  <[{'no_files',NoFiles}|L],Opts>
	      when let <_cor21> =
		    call 'erlang':'is_integer'
			(NoFiles)
		in  let <_cor22> =
			%% Line 315
			call 'erlang':'>'
			    (NoFiles, 1)
		    in  call 'erlang':'and'
			    (_cor21, _cor22) ->
	      %% Line 316
	      case Opts of
		<{'opts',_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104}> when 'true' ->
		    let <_cor25> =
			call 'erlang':'setelement'
			    (4, Opts, NoFiles)
		    in  apply 'options'/2
			    (L, _cor25)
		( <_cor105> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 317
	  <[{'tmpdir',[]}|L],Opts> when 'true' ->
	      %% Line 318
	      case Opts of
		<{'opts',_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113}> when 'true' ->
		    let <_cor28> =
			call 'erlang':'setelement'
			    (5, Opts, 'default')
		    in  apply 'options'/2
			    (L, _cor28)
		( <_cor114> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 319
	  <[{'tmpdir',Dir}|L],Opts> when 'true' ->
	      let <_cor29> =
		  catch
		      %% Line 320
		      call 'filename':'absname'
			  (Dir)
	      in  %% Line 320
		  case _cor29 of
		    %% Line 321
		    <{'EXIT',_cor115}> when 'true' ->
			%% Line 322
			{'badarg',Dir}
		    %% Line 323
		    <FileName> when 'true' ->
			let <_rec7> = {%% Line 324
			     'dir',%% Line 324
				   FileName}
			in  %% Line 324
			    case Opts of
			      <{'opts',_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123}> when 'true' ->
				  let <_cor33> =
				      call 'erlang':'setelement'
					  (5, Opts, _rec7)
				  in  apply 'options'/2
					  (L, _cor33)
			      ( <_cor124> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','opts'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		  end
	  %% Line 326
	  <[{'order',Fun}|L],Opts>
	      when try
		    let <_cor35> =
			call 'erlang':'is_function'
			    (Fun)
		    in  let <_cor36> =
			    call 'erlang':'is_function'
				(Fun, 2)
			in  call 'erlang':'and'
				(_cor35, _cor36)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 327
	      case Opts of
		<{'opts',_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132}> when 'true' ->
		    let <_cor39> =
			call 'erlang':'setelement'
			    (6, Opts, Fun)
		    in  apply 'options'/2
			    (L, _cor39)
		( <_cor133> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 328
	  <[{'order',Order}|L],Opts>
	      when let <_cor40> =
		    call 'erlang':'=:='
			(Order, 'ascending')
		in  let <_cor41> =
			%% Line 329
			call 'erlang':'=:='
			    (Order, 'descending')
		    in  call 'erlang':'or'
			    (_cor40, _cor41) ->
	      %% Line 330
	      case Opts of
		<{'opts',_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141}> when 'true' ->
		    let <_cor44> =
			call 'erlang':'setelement'
			    (6, Opts, Order)
		    in  apply 'options'/2
			    (L, _cor44)
		( <_cor142> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 331
	  <[{'compressed',Bool}|L],Opts>
	      when call 'erlang':'is_boolean'
		    (Bool) ->
	      %% Line 332
	      case Opts of
		<{'opts',_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150}> when 'true' ->
		    let <_cor47> =
			call 'erlang':'setelement'
			    (7, Opts, Bool)
		    in  apply 'options'/2
			    (L, _cor47)
		( <_cor151> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 333
	  <[{'unique',Bool}|L],Opts>
	      when call 'erlang':'is_boolean'
		    (Bool) ->
	      %% Line 334
	      case Opts of
		<{'opts',_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159}> when 'true' ->
		    let <_cor50> =
			call 'erlang':'setelement'
			    (8, Opts, Bool)
		    in  apply 'options'/2
			    (L, _cor50)
		( <_cor160> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 335
	  <[{'header',Len}|L],Opts>
	      when %% Line 336
		try
		    let <_cor51> =
			call 'erlang':'is_integer'
			    (Len)
		    in  let <_cor52> =
			    call 'erlang':'>'
				(Len, 0)
			in  let <_cor54> =
				call 'erlang':'<'
				    (Len, 2147483648)
			    in  let <_cor55> =
				    call 'erlang':'and'
					(_cor52, _cor54)
				in  call 'erlang':'and'
					(_cor51, _cor55)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 337
	      case Opts of
		<{'opts',_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168}> when 'true' ->
		    let <_cor58> =
			call 'erlang':'setelement'
			    (9, Opts, Len)
		    in  apply 'options'/2
			    (L, _cor58)
		( <_cor169> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 338
	  <[],Opts> when 'true' ->
	      %% Line 339
	      case <> of
		%% Line 340
		<>
		    when ( try
			    ( case <> of
				( <>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_record'
									       -| ['compiler_generated'] )
					      (Opts,
					       ( 'opts'
						 -| ['compiler_generated'] ),
					       ( 9
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      let <_cor63> =
					  ( call 'erlang':'element'
						(2, Opts)
					    -| ['compiler_generated'] )
				      in  let <_cor64> =
					      ( call 'erlang':'=:='
						    (_cor63, 'term')
						-| ['compiler_generated'] )
					  in  let <_cor66> =
						  ( call 'erlang':'element'
							(9, Opts)
						    -| ['compiler_generated'] )
					      in  let <_cor67> =
						      ( call 'erlang':'=/='
							    (_cor66, 4)
							-| ['compiler_generated'] )
						  in  ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor64, _cor67)
							-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    %% Line 341
		    {'badarg','header'}
		%% Line 342
		<> when 'true' ->
		    %% Line 343
		    Opts
	      end
	  %% Line 345
	  <[Bad|_cor170],_X_Opts> when 'true' ->
	      %% Line 346
	      {'badarg',Bad}
	  %% Line 347
	  <Bad,_X_Opts> when 'true' ->
	      %% Line 348
	      {'badarg',Bad}
	end
'do_sort'/5 =
    %% Line 353
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 356
	case _cor1 of
	  <{'opts',Format0,Size,NoFiles,TmpDir,Order,Compressed,Unique,HdLen}> when 'true' ->
	      let <Prefix> =
		  %% Line 357
		  apply 'tmp_prefix'/2
		      (_cor2, TmpDir)
	      in  let <Ref> =
		      %% Line 359
		      call 'erlang':'make_ref'
			  ()
		  in  let <_cor10> =
			  %% Line 360
			  case _cor4 of
			    <[Kp|[]]> when 'true' ->
				Kp
			    <_cor26> when 'true' ->
				_cor4
			  end
		      in  %% Line 361
			  case apply 'wrap_input'/3
				   (Format0, _cor0, _cor3) of
			    <{Format,Input}> when 'true' ->
				let <_cor13> =
				    %% Line 362
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(Compressed,
						 'true') ->
					  ['compressed']
				      <> when 'true' ->
					  []
				    end
				in  %% Line 363
				    case apply 'wrap_output_terms'/3
					     (Format0, _cor2, _cor13) of
				      <{Output,FunOut}> when 'true' ->
					  let <W> =
					      %% Line 364
					      {'w',_cor10,[[]],1,'undefined',Output,FunOut,%% Line 365
											   Prefix,[],%% Line 365
												     Format,%% Line 365
													    Size,%% Line 366
														 NoFiles,%% Line 366
															 Order,16384,'undefined',%% Line 367
																		 Ref,_cor13,%% Line 367
																			    Unique,%% Line 367
																				   HdLen,%% Line 368
																					 'no_value'}
					  in  %% Line 369
					      try
						  %% Line 370
						  apply 'doit'/3
						      (_cor0, Input, W)
					      of <_cor17> ->
						  _cor17
					      catch <_cor20,_cor19,_cor18> ->
						  case <_cor20,_cor19,_cor18> of
						    %% Line 371
						    <'throw',{_cor27,Error},_cor28>
							when call 'erlang':'=:='
							      (_cor27,
							       Ref) ->
							%% Line 372
							Error
						    ( <_cor20,_cor19,_cor18> when 'true' ->
							  primop 'raise'
							      (_cor18, _cor19)
						      -| ['compiler_generated'] )
						  end
				      ( <_cor15> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor15})
					-| ['compiler_generated'] )
				    end
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor12})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'doit'/3 =
    %% Line 375
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'sort',Input,W> when 'true' ->
	      %% Line 376
	      apply 'files'/5
		  (1, [], 0, W, Input)
	  %% Line 377
	  <'merge',Input,W> when 'true' ->
	      %% Line 378
	      apply 'last_merge'/2
		  (Input, W)
	  %% Line 379
	  <'check',Input,W> when 'true' ->
	      %% Line 380
	      apply 'check_files'/3
		  (Input, W, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'doit',3}}] )
	    -| ['compiler_generated'] )
	end
'wrap_input'/3 =
    %% Line 382
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'term','check',Files> when 'true' ->
	      let <Fun> =
		  %% Line 383
		  ( fun (_cor5) ->
			let <_cor3> =
			    %% Line 384
			    apply 'file_rterms'/2
				('no_file', [_cor5|[]])
			in  let <Fn> =
				%% Line 384
				apply 'merge_terms_fun'/1
				    (_cor3)
			    in  %% Line 385
				{'fn',Fn,_cor5}
		    -| [{'id',{0,0,'-wrap_input/3-fun-0-'}}] )
	      in  let <_cor14> =
		      %% Line 387
		      apply 'binary_term_fun'/0
			  ()
		  in  let <_cor13> =
			  %% Line 387
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor10) ->
					case _cor10 of
					  <[F|_cor9]> when 'true' ->
					      let <_cor11> =
						  apply Fun
						      (F)
					      in  let <_cor12> =
						      apply 'lc$^0'/1
							  (_cor9)
						  in  ( [_cor11|_cor12]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor10> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor10})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Files)
			    -| ['list_comprehension'] )
		      in  %% Line 387
			  {_cor14,_cor13}
	  %% Line 388
	  <Format,'check',Files> when 'true' ->
	      %% Line 389
	      {Format,Files}
	  %% Line 390
	  <'term','merge',Files> when 'true' ->
	      let <Fun> =
		  %% Line 391
		  ( fun (_cor16) ->
			let <_cor15> =
			    apply 'file_rterms'/2
				('no_file', [_cor16|[]])
			in  apply 'merge_terms_fun'/1
				(_cor15)
		    -| [{'id',{0,0,'-wrap_input/3-fun-1-'}}] )
	      in  let <_cor24> =
		      %% Line 392
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor21) ->
				    case _cor21 of
				      <[F|_cor20]> when 'true' ->
					  let <_cor22> =
					      apply Fun
						  (F)
					  in  let <_cor23> =
						  apply 'lc$^1'/1
						      (_cor20)
					      in  ( [_cor22|_cor23]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor21> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor21})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(Files)
			-| ['list_comprehension'] )
		  in  let <Input> =
			  %% Line 392
			  call 'lists':'reverse'
			      (_cor24)
		      in  let <_cor26> =
			      %% Line 393
			      apply 'binary_term_fun'/0
				  ()
			  in  %% Line 393
			      {_cor26,Input}
	  %% Line 394
	  <Format,'merge',Files> when 'true' ->
	      let <_cor32> =
		  %% Line 395
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[F|_cor28]> when 'true' ->
				      let <_cor30> =
					  apply 'merge_bins_fun'/1
					      (F)
				      in  let <_cor31> =
					      apply 'lc$^2'/1
						  (_cor28)
					  in  ( [_cor30|_cor31]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor29> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^2'/1
			    (Files)
		    -| ['list_comprehension'] )
	      in  let <Input> =
		      %% Line 395
		      call 'lists':'reverse'
			  (_cor32)
		  in  %% Line 396
		      {Format,Input}
	  %% Line 397
	  <'term','sort',InFun>
	      when call 'erlang':'is_function'
		    (InFun,
		     1) ->
	      let <_cor35> =
		  %% Line 398
		  apply 'binary_term_fun'/0
		      ()
	      in  let <_cor34> =
		      %% Line 398
		      apply 'fun_rterms'/1
			  (InFun)
		  in  %% Line 398
		      {_cor35,_cor34}
	  %% Line 399
	  <'term','sort',Files> when 'true' ->
	      let <_cor37> =
		  %% Line 400
		  apply 'binary_term_fun'/0
		      ()
	      in  let <_cor36> =
		      %% Line 400
		      apply 'file_rterms'/2
			  ('no_file', Files)
		  in  %% Line 400
		      {_cor37,_cor36}
	  %% Line 401
	  <Format,'sort',Input> when 'true' ->
	      %% Line 402
	      {Format,Input}
	  ( <_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38})
		  -| [{'function_name',{'wrap_input',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_terms_fun'/1 =
    %% Line 404
    fun (_cor0) ->
	%% Line 405
	( fun (_cor7) ->
	      case _cor7 of
		<'close'> when 'true' ->
		    %% Line 406
		    apply _cor0
			('close')
		%% Line 407
		<{I,[],_X_LSz,W}> when 'true' ->
		    %% Line 408
		    case apply _cor0
			     ('read') of
		      %% Line 409
		      <'end_of_input'> when 'true' ->
			  %% Line 410
			  'eof'
		      %% Line 411
		      <{Objs,NRFun}>
			  when try
				let <_cor1> =
				    call 'erlang':'is_function'
					(NRFun)
				in  let <_cor2> =
					call 'erlang':'is_function'
					    (NRFun, 1)
				    in  call 'erlang':'and'
					    (_cor1, _cor2)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 412
			  case apply 'fun_objs'/6
				   (Objs, [], 0, 2147483648, I, W) of
			    <{_cor10,[],Ts,_cor11}> when 'true' ->
				let <_cor5> =
				    %% Line 413
				    apply 'merge_terms_fun'/1
					(NRFun)
				in  %% Line 413
				    {{I,Ts,16384},_cor5}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      %% Line 414
		      <Error> when 'true' ->
			  %% Line 415
			  apply 'error'/2
			      (Error, W)
		    end
		( <_cor8> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor8})
			-| [{'function_name',{'-merge_terms_fun/1-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-merge_terms_fun/1-fun-0-'}}] )
'merge_bins_fun'/1 =
    %% Line 419
    fun (_cor0) ->
	%% Line 420
	( fun (_cor2) ->
	      case _cor2 of
		<'close'> when 'true' ->
		    %% Line 421
		    'ok'
		%% Line 422
		<A = {_X_I,_X_L,_X_LSz,W}> when 'true' ->
		    let <Fun> =
			%% Line 423
			apply 'read_fun'/3
			    (_cor0, 'user', W)
		    in  %% Line 424
			apply Fun
			    (A)
		( <_cor3> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor3})
			-| [{'function_name',{'-merge_bins_fun/1-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-merge_bins_fun/1-fun-0-'}}] )
'wrap_output_terms'/3 =
    %% Line 427
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'term',OutFun,_X_Z>
	      when try
		    let <_cor3> =
			call 'erlang':'is_function'
			    (OutFun)
		    in  let <_cor4> =
			    %% Line 428
			    call 'erlang':'is_function'
				(OutFun, 1)
			in  call 'erlang':'and'
				(_cor3, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 429
		  apply 'fun_wterms'/1
		      (OutFun)
	      in  %% Line 429
		  {_cor5,'true'}
	  %% Line 430
	  <'term',File,Z>
	      when call 'erlang':'=/='
		    (File,
		     'undefined') ->
	      let <_cor6> =
		  %% Line 431
		  call 'erlang':'++'
		      (Z, ['write'])
	      in  let <_cor7> =
		      %% Line 431
		      apply 'file_wterms'/3
			  ('name', File, _cor6)
		  in  %% Line 431
		      {_cor7,'false'}
	  %% Line 432
	  <_X_Format,Output,_X_Z> when 'true' ->
	      let <_cor9> =
		  %% Line 433
		  call 'erlang':'is_function'
		      (Output)
	      in  let <_cor8> =
		      %% Line 433
		      call 'erlang':'is_function'
			  (Output, 1)
		  in  let <_cor10> =
			  %% Line 433
			  call 'erlang':'and'
			      (_cor9, _cor8)
		      in  %% Line 433
			  {Output,_cor10}
	end
'binary_term_fun'/0 =
    %% Line 435
    fun () ->
	%% Line 436
	( fun (_cor0) ->
	      call 'erlang':'binary_to_term'
		  (_cor0)
	  -| [{'id',{0,0,'-binary_term_fun/0-fun-0-'}}] )
'check_files'/3 =
    %% Line 438
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_W,L> when 'true' ->
	      let <_cor3> =
		  %% Line 439
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 439
		  {'ok',_cor3}
	  %% Line 440
	  <[FN|FNs],W,L> when 'true' ->
	      let <IFun,FileName> =
		  %% Line 442
		  case FN of
		    %% Line 443
		    <{'fn',Fun,File}> when 'true' ->
			%% Line 444
			<Fun,File>
		    %% Line 445
		    <File> when 'true' ->
			let <_cor4> =
			    %% Line 446
			    apply 'read_fun'/3
				(File, 'user', W)
			in  <_cor4,%% Line 446
				   File>
		  end
	      in  %% Line 448
		  case W of
		    <{'w',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
			let <_cor10> =
			    call 'erlang':'setelement'
				(5, W, IFun)
			in  %% Line 449
			    apply 'check_run'/7
				(IFun, FileName, FNs, _cor10, L, 2, 'nolast')
		    ( <_cor34> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','w'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'check_files',3}}] )
	    -| ['compiler_generated'] )
	end
'check_run'/7 =
    %% Line 451
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 452
	case apply _cor6
		 ({{'merge',_cor1},[],0,_cor3}) of
	  %% Line 453
	  <{{_X_I,Objs,_X_LSz},IFun1}> when 'true' ->
	      %% Line 454
	      case _cor3 of
		<{'w',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
		    let <_cor9> =
			call 'erlang':'setelement'
			    (5, _cor3, IFun1)
		    in  let <_cor11> =
			    %% Line 455
			    call 'lists':'reverse'
				(Objs)
			in  %% Line 455
			    apply 'check_objs0'/8
				(IFun1, _cor5, _cor4, _cor9, _cor2, _cor1, _cor0, _cor11)
		( <_cor43> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 456
	  <'eof'> when 'true' ->
	      %% Line 457
	      case _cor3 of
		<{'w',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
		    let <_cor14> =
			call 'erlang':'setelement'
			    (5, _cor3, 'undefined')
		    in  %% Line 458
			apply 'check_files'/3
			    (_cor4, _cor14, _cor2)
		( <_cor63> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'check_objs0'/8 =
    %% Line 461
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <IFun,F,FNs,W,L,I,'nolast',[{T,_X_BT}|Os]> when 'true' ->
	      %% Line 462
	      apply 'check_objs1'/8
		  (IFun, F, FNs, W, L, I, T, Os)
	  %% Line 463
	  <IFun,F,FNs,W,L,I,Last,[]> when 'true' ->
	      %% Line 464
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, Last)
	  %% Line 465
	  <IFun,F,FNs,W,L,I,{'last',Last},Os> when 'true' ->
	      %% Line 466
	      apply 'check_objs1'/8
		  (IFun, F, FNs, W, L, I, Last, Os)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'check_objs0',8}}] )
	    -| ['compiler_generated'] )
	end
'check_objs1'/8 =
    %% Line 468
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 469
	case _cor4 of
	  %% Line 470
	  <{'w',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,'ascending',_cor28,_cor29,_cor30,_cor31,'true',_cor32,_cor33}> when 'true' ->
	      %% Line 471
	      apply 'ucheck_objs'/8
		  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 472
	  <{'w',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,'ascending',_cor45,_cor46,_cor47,_cor48,'false',_cor49,_cor50}> when 'true' ->
	      %% Line 473
	      apply 'check_objs'/8
		  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 474
	  <{'w',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,'descending',_cor62,_cor63,_cor64,_cor65,'true',_cor66,_cor67}> when 'true' ->
	      %% Line 475
	      apply 'rucheck_objs'/8
		  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 476
	  <{'w',_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,'descending',_cor79,_cor80,_cor81,_cor82,'false',_cor83,_cor84}> when 'true' ->
	      %% Line 477
	      apply 'rcheck_objs'/8
		  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 478
	  <{'w',_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,CF,_cor96,_cor97,_cor98,_cor99,'true',_cor100,_cor101}> when 'true' ->
	      %% Line 479
	      apply 'uccheck_objs'/9
		  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0, CF)
	  %% Line 480
	  <{'w',_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,CF,_cor113,_cor114,_cor115,_cor116,'false',_cor117,_cor118}> when 'true' ->
	      %% Line 481
	      apply 'ccheck_objs'/9
		  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0, CF)
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'check_objs'/8 =
    %% Line 484
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <IFun,F,FNs,W,L,I,Last,[{T,_X_BT}|Os]>
	      when call 'erlang':'>='
		    (T,
		     Last) ->
	      let <_cor8> =
		  %% Line 485
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 485
		  apply 'check_objs'/8
		      (IFun, F, FNs, W, L, _cor8, T, Os)
	  %% Line 486
	  <IFun,F,FNs,W,L,I,_X_Last,[{_X_T,BT}|_cor17]> when 'true' ->
	      %% Line 487
	      apply 'culprit_found'/7
		  (IFun, F, FNs, W, L, I, BT)
	  %% Line 488
	  <IFun,F,FNs,W,L,I,Last,[]> when 'true' ->
	      %% Line 489
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',Last})
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'check_objs',8}}] )
	    -| ['compiler_generated'] )
	end
'rcheck_objs'/8 =
    %% Line 491
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <IFun,F,FNs,W,L,I,Last,[{T,_X_BT}|Os]>
	      when call 'erlang':'=<'
		    (T,
		     Last) ->
	      let <_cor8> =
		  %% Line 492
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 492
		  apply 'rcheck_objs'/8
		      (IFun, F, FNs, W, L, _cor8, T, Os)
	  %% Line 493
	  <IFun,F,FNs,W,L,I,_X_Last,[{_X_T,BT}|_cor17]> when 'true' ->
	      %% Line 494
	      apply 'culprit_found'/7
		  (IFun, F, FNs, W, L, I, BT)
	  %% Line 495
	  <IFun,F,FNs,W,L,I,Last,[]> when 'true' ->
	      %% Line 496
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',Last})
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rcheck_objs',8}}] )
	    -| ['compiler_generated'] )
	end
'ucheck_objs'/8 =
    %% Line 498
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <IFun,F,FNs,W,L,I,LT,[{T,_X_BT}|Os]>
	      when call 'erlang':'>'
		    (T,
		     LT) ->
	      let <_cor8> =
		  %% Line 499
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 499
		  apply 'ucheck_objs'/8
		      (IFun, F, FNs, W, L, _cor8, T, Os)
	  %% Line 500
	  <IFun,F,FNs,W,L,I,_X_LT,[{_X_T,BT}|_cor17]> when 'true' ->
	      %% Line 501
	      apply 'culprit_found'/7
		  (IFun, F, FNs, W, L, I, BT)
	  %% Line 502
	  <IFun,F,FNs,W,L,I,LT,[]> when 'true' ->
	      %% Line 503
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',LT})
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'ucheck_objs',8}}] )
	    -| ['compiler_generated'] )
	end
'rucheck_objs'/8 =
    %% Line 505
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <IFun,F,FNs,W,L,I,LT,[{T,_X_BT}|Os]>
	      when call 'erlang':'<'
		    (T,
		     LT) ->
	      let <_cor8> =
		  %% Line 506
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 506
		  apply 'rucheck_objs'/8
		      (IFun, F, FNs, W, L, _cor8, T, Os)
	  %% Line 507
	  <IFun,F,FNs,W,L,I,_X_LT,[{_X_T,BT}|_cor17]> when 'true' ->
	      %% Line 508
	      apply 'culprit_found'/7
		  (IFun, F, FNs, W, L, I, BT)
	  %% Line 509
	  <IFun,F,FNs,W,L,I,LT,[]> when 'true' ->
	      %% Line 510
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',LT})
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rucheck_objs',8}}] )
	    -| ['compiler_generated'] )
	end
'ccheck_objs'/9 =
    %% Line 512
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <IFun,F,FNs,W,L,I,LT,[{T,BT}|Os],CF> when 'true' ->
	      %% Line 513
	      case apply CF
		       (LT, T) of
		%% Line 514
		<'true'> when 'true' ->
		    let <_cor9> =
			%% Line 515
			call 'erlang':'+'
			    (I, 1)
		    in  %% Line 515
			apply 'ccheck_objs'/9
			    (IFun, F, FNs, W, L, _cor9, T, Os, CF)
		%% Line 516
		<'false'> when 'true' ->
		    %% Line 517
		    apply 'culprit_found'/7
			(IFun, F, FNs, W, L, I, BT)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 519
	  <IFun,F,FNs,W,L,I,LT,[],_X_CF> when 'true' ->
	      %% Line 520
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',LT})
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'ccheck_objs',9}}] )
	    -| ['compiler_generated'] )
	end
'uccheck_objs'/9 =
    %% Line 522
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <IFun,F,FNs,W,L,I,LT,[{T,BT}|Os],CF> when 'true' ->
	      %% Line 523
	      case apply CF
		       (LT, T) of
		%% Line 524
		<'true'> when 'true' ->
		    %% Line 525
		    case apply CF
			     (T, LT) of
		      %% Line 526
		      <'true'> when 'true' ->
			  %% Line 527
			  apply 'culprit_found'/7
			      (IFun, F, FNs, W, L, I, BT)
		      %% Line 528
		      <'false'> when 'true' ->
			  let <_cor9> =
			      %% Line 529
			      call 'erlang':'+'
				  (I, 1)
			  in  %% Line 529
			      apply 'uccheck_objs'/9
				  (IFun, F, FNs, W, L, _cor9, T, Os, CF)
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
		%% Line 531
		<'false'> when 'true' ->
		    %% Line 532
		    apply 'culprit_found'/7
			(IFun, F, FNs, W, L, I, BT)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 534
	  <IFun,F,FNs,W,L,I,LT,[],_X_CF> when 'true' ->
	      %% Line 535
	      apply 'check_run'/7
		  (IFun, F, FNs, W, L, I, {'last',LT})
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'uccheck_objs',9}}] )
	    -| ['compiler_generated'] )
	end
'culprit_found'/7 =
    %% Line 537
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <IFun,F,FNs,W,L,I,[_X_Size|BT]> when 'true' ->
	      do  %% Line 538
		  apply IFun
		      ('close')
		  let <_cor7> =
		      %% Line 539
		      call 'erlang':'binary_to_term'
			  (BT)
		  in  %% Line 539
		      apply 'check_files'/3
			  (FNs, W, [{F,I,_cor7}|L])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'culprit_found',7}}] )
	    -| ['compiler_generated'] )
	end
'files'/5 =
    %% Line 541
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_I,L,_X_LSz,W = {'w',_cor29,_cor30,1,_cor31,Out,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45},[]> when 'true' ->
	      %% Line 543
	      case Out of
		%% Line 544
		<Fun>
		    when call 'erlang':'is_function'
			  (Out) ->
		    let <SL> =
			%% Line 545
			apply 'internal_sort'/2
			    (L, W)
		    in  let <_cor6> =
			    %% Line 546
			    apply 'binterm_objects'/2
				(SL, [])
			in  let <W1> =
				%% Line 546
				apply 'outfun'/2
				    (_cor6, W)
			    in  let <NW> =
				    %% Line 547
				    apply 'close_input'/1
					(W1)
				in  %% Line 548
				    apply 'outfun'/2
					('close', NW)
		%% Line 549
		<_cor46> when 'true' ->
		    do  %% Line 550
			apply 'write_run'/3
			    (L, W, Out)
			%% Line 551
			'ok'
	      end
	  %% Line 553
	  <_X_I,L,_X_LSz,W,[]> when 'true' ->
	      let <W1> =
		  %% Line 554
		  apply 'write_run'/2
		      (L, W)
	      in  %% Line 555
		  ( case W1 of
		      ( <( {'w',_cor47,_rec17,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor14> =
				call 'lists':'append'
				    (_rec17)
			    in  apply 'last_merge'/2
				    (_cor14, W1)
			-| ['compiler_generated'] )
		      ( <_cor65> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','w'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 556
	  <I,L,LSz,W,Fun>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 557
	      case W of
		<{'w',_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84}> when 'true' ->
		    let <_cor17> =
			call 'erlang':'setelement'
			    (5, W, Fun)
		    in  %% Line 558
			apply 'fun_run'/5
			    (I, L, LSz, _cor17, [])
		( <_cor85> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 559
	  <I,L,LSz,W,[FileName|FileNames]> when 'true' ->
	      let <InFun> =
		  %% Line 560
		  apply 'read_fun'/3
		      (FileName, 'user', W)
	      in  %% Line 561
		  case W of
		    <{'w',_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104}> when 'true' ->
			let <_cor22> =
			    call 'erlang':'setelement'
				(5, W, InFun)
			in  %% Line 562
			    apply 'file_run'/6
				(InFun, FileNames, I, L, LSz, _cor22)
		    ( <_cor105> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','w'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'files',5}}] )
	    -| ['compiler_generated'] )
	end
'file_run'/6 =
    %% Line 564
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <InFun,FileNames,I,L,LSz,W = {'w',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}>
	      when call 'erlang':'<'
		    (LSz,
		     _cor37) ->
	      %% Line 565
	      case apply InFun
		       ({I,L,LSz,W}) of
		%% Line 566
		<{{I1,L1,LSz1},InFun1}> when 'true' ->
		    let <_cor14> =
			%% Line 567
			call 'erlang':'setelement'
			    (5, W, InFun1)
		    in  %% Line 568
			apply 'file_run'/6
			    (InFun1, FileNames, I1, L1, LSz1, _cor14)
		%% Line 569
		<'eof'> when 'true' ->
		    let <_cor18> =
			%% Line 570
			call 'erlang':'setelement'
			    (5, W, 'undefined')
		    in  %% Line 571
			apply 'files'/5
			    (I, L, LSz, _cor18, FileNames)
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 573
	  <InFun,FileNames,I,L,_X_LSz,W> when 'true' ->
	      let <NW> =
		  %% Line 574
		  apply 'write_run'/2
		      (L, W)
	      in  %% Line 575
		  apply 'file_run'/6
		      (InFun, FileNames, I, [], 0, NW)
	end
'fun_run'/5 =
    %% Line 577
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,L,LSz,W,[]> when 'true' ->
	      %% Line 578
	      case apply 'infun'/1
		       (W) of
		%% Line 579
		<{'end_of_input',NW}> when 'true' ->
		    %% Line 580
		    apply 'files'/5
			(I, L, LSz, NW, [])
		%% Line 581
		<{'cont',NW,Objs}> when 'true' ->
		    %% Line 582
		    apply 'fun_run'/5
			(I, L, LSz, NW, Objs)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 584
	  <I,L,LSz,W = {'w',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,Runsize,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30},Objs>
	      when call 'erlang':'<'
		    (LSz,
		     Runsize) ->
	      %% Line 585
	      case apply 'fun_objs'/6
		       (Objs, L, LSz, Runsize, I, W) of
		<{NI,NObjs,NL,NLSz}> when 'true' ->
		    %% Line 586
		    apply 'fun_run'/5
			(NI, NL, NLSz, W, NObjs)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 587
	  <I,L,_X_LSz,W,Objs> when 'true' ->
	      let <NW> =
		  %% Line 588
		  apply 'write_run'/2
		      (L, W)
	      in  %% Line 589
		  apply 'fun_run'/5
		      (I, [], 0, NW, Objs)
	end
'write_run'/2 =
    %% Line 591
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],W> when 'true' ->
	      %% Line 592
	      W
	  %% Line 593
	  <L,W> when 'true' ->
	      %% Line 594
	      case apply 'next_temp'/1
		       (W) of
		<{W1,Temp}> when 'true' ->
		    let <NW> =
			%% Line 595
			apply 'write_run'/3
			    (L, W1, Temp)
		    in  %% Line 596
			( case NW of
			    ( <( {'w',_cor9,_rec22,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec22 of
				    <[R|Rs]> when 'true' ->
					%% Line 597
					apply 'merge_runs'/3
					    ([[Temp|R]|Rs], [], NW)
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor27> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','w'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'write_run'/3 =
    %% Line 599
    fun (_cor2,_cor1,_cor0) ->
	let <SL> =
	    %% Line 600
	    apply 'internal_sort'/2
		(_cor2, _cor1)
	in  let <BTs> =
		%% Line 601
		apply 'binterms'/2
		    (SL, [])
	    in  %% Line 602
		case apply 'open_file'/2
			 (_cor0, _cor1) of
		  <{Fd,W1}> when 'true' ->
		      do  %% Line 603
			  apply 'write'/4
			      (Fd, _cor0, BTs, W1)
			  %% Line 604
			  apply 'close_file'/2
			      (Fd, W1)
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'internal_sort'/2 =
    %% Line 607
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = [],_X_W> when 'true' ->
	      %% Line 608
	      L
	  %% Line 609
	  <L,{'w',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,CFun,_cor28,_cor29,_cor30,_cor31,Unique,_cor32,_cor33}>
	      when call 'erlang':'is_function'
		    (CFun) ->
	      let <Fun> =
		  %% Line 610
		  ( fun (_cor3,_cor2) ->
			case <_cor3,_cor2> of
			  <{T1,_cor34},{T2,_cor35}> when 'true' ->
			      apply CFun
				  (T1, T2)
			  ( <_cor5,_cor4> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor5,_cor4})
				  -| [{'function_name',{'-internal_sort/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-internal_sort/2-fun-0-'}}] )
	      in  let <RL> =
		      %% Line 611
		      call 'lists':'reverse'
			  (L)
		  in  let <_cor8> =
			  %% Line 612
			  case <> of
			    %% Line 613
			    <>
				when call 'erlang':'=:='
				      (Unique,
				       'true') ->
				%% Line 614
				call 'lists':'usort'
				    (Fun, RL)
			    %% Line 615
			    <> when 'true' ->
				%% Line 616
				call 'lists':'sort'
				    (Fun, RL)
			  end
		      in  %% Line 612
			  call 'lists':'reverse'
			      (_cor8)
	  %% Line 618
	  <L,W = {'w',0,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,'true',_cor51,_cor52}> when 'true' ->
	      let <_cor9> =
		  %% Line 619
		  call 'lists':'usort'
		      (L)
	      in  %% Line 619
		  apply 'rev'/2
		      (_cor9, W)
	  %% Line 620
	  <L,W = {'w',0,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,'false',_cor68,_cor69}> when 'true' ->
	      let <_cor10> =
		  %% Line 621
		  call 'lists':'sort'
		      (L)
	      in  %% Line 621
		  apply 'rev'/2
		      (_cor10, W)
	  %% Line 622
	  <L,W = {'w',_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,'true',_cor86,_cor87}> when 'true' ->
	      let <_cor11> =
		  %% Line 623
		  call 'lists':'reverse'
		      (L)
	      in  let <_cor12> =
		      %% Line 623
		      call 'lists':'ukeysort'
			  (1, _cor11)
		  in  %% Line 623
		      apply 'rev'/2
			  (_cor12, W)
	  %% Line 624
	  <L,W = {'w',_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,'false',_cor104,_cor105}> when 'true' ->
	      let <_cor13> =
		  %% Line 625
		  call 'lists':'reverse'
		      (L)
	      in  let <_cor14> =
		      %% Line 625
		      call 'lists':'keysort'
			  (1, _cor13)
		  in  %% Line 625
		      apply 'rev'/2
			  (_cor14, W)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'internal_sort',2}}] )
	    -| ['compiler_generated'] )
	end
'rev'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,{'w',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,'ascending',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 628
	      call 'lists':'reverse'
		  (L)
	  %% Line 629
	  <L,{'w',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,'descending',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
	      %% Line 630
	      L
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'rev',2}}] )
	    -| ['compiler_generated'] )
	end
'last_merge'/2 =
    %% Line 632
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <R,W = {'w',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}>
	      when ( try
		      let <_cor7> =
			  call 'erlang':'length'
			      (R)
		      in  call 'erlang':'=<'
			      (_cor7, _cor36)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 633
	      case _cor30 of
		%% Line 634
		<Fun>
		    when call 'erlang':'is_function'
			  (_cor30) ->
		    let <_cor11> =
			%% Line 635
			call 'lists':'reverse'
			    (R)
		    in  %% Line 635
			case apply 'init_merge'/4
				 (_cor11, 1, [], W) of
			  <{Fs,W1}> when 'true' ->
			      let <W2> =
				  %% Line 637
				  apply 'merge_files'/5
				      (Fs, [], 0, 'nolast', W1)
			      in  let <NW> =
				      %% Line 638
				      apply 'close_input'/1
					  (W2)
				  in  %% Line 639
				      apply 'outfun'/2
					  ('close', NW)
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		%% Line 640
		<Out> when 'true' ->
		    do  %% Line 641
			apply 'merge_files'/3
			    (R, W, Out)
			%% Line 642
			'ok'
	      end
	  %% Line 644
	  <R,W> when 'true' ->
	      %% Line 645
	      ( case W of
		  ( <( {'w',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_rec24,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}
		       -| ['compiler_generated'] )> when 'true' ->
			let <L> =
			    call 'lists':'sublist'
				(R, _rec24)
			in  %% Line 646
			    case apply 'merge_files'/2
				     (L, W) of
			      <{M,NW}> when 'true' ->
				  let <_cor23> =
				      %% Line 647
				      call 'lists':'nthtail'
					  (_rec24, R)
				  in  %% Line 647
				      apply 'last_merge'/2
					  ([M|_cor23], NW)
			      ( <_cor20> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor20})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor82> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','w'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'merge_runs'/3 =
    %% Line 649
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[R|Rs],NRs0,W = {'w',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}>
	      when ( try
		      let <_cor8> =
			  call 'erlang':'length'
			      (R)
		      in  call 'erlang':'<'
			      (_cor8, _cor33)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_cor10> =
		  %% Line 650
		  call 'lists':'reverse'
		      (NRs0)
	      in  let <NRs> =
		      %% Line 650
		      call 'erlang':'++'
			  (_cor10, [R|Rs])
		  in  %% Line 651
		      call 'erlang':'setelement'
			  (3, W, NRs)
	  %% Line 652
	  <[R|[]],NRs0,W> when 'true' ->
	      %% Line 653
	      case apply 'merge_files'/2
		       (R, W) of
		<{M,NW}> when 'true' ->
		    let <_cor15> =
			%% Line 654
			call 'lists':'reverse'
			    ([[M|[]]|NRs0])
		    in  let <NRs> =
			    %% Line 654
			    [[]|_cor15]
			in  %% Line 655
			    case NW of
			      <{'w',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80}> when 'true' ->
				  call 'erlang':'setelement'
				      (3, NW, NRs)
			      ( <_cor81> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','w'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 656
	  <[R|[R1|Rs]],NRs0,W> when 'true' ->
	      %% Line 657
	      case apply 'merge_files'/2
		       (R, W) of
		<{M,NW}> when 'true' ->
		    %% Line 658
		    apply 'merge_runs'/3
			([[M|R1]|Rs], [[]|NRs0], NW)
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor19})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'merge_runs',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_files'/2 =
    %% Line 660
    fun (_cor1,_cor0) ->
	%% Line 661
	case apply 'next_temp'/1
		 (_cor0) of
	  <{W1,Temp}> when 'true' ->
	      let <_cor3> =
		  %% Line 663
		  apply 'merge_files'/3
		      (_cor1, W1, Temp)
	      in  %% Line 663
		  {Temp,_cor3}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'merge_files'/3 =
    %% Line 665
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 666
	    call 'lists':'reverse'
		(_cor2)
	in  %% Line 666
	    case apply 'init_merge'/4
		     (_cor3, 1, [], _cor1) of
	      <{Fs,W1}> when 'true' ->
		  %% Line 667
		  case apply 'open_file'/2
			   (_cor0, W1) of
		    <{Fd,W2}> when 'true' ->
			let <_rec28> = {%% Line 668
			     Fd,_cor0}
			in  %% Line 668
			    case W2 of
			      <{'w',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
				  let <_cor9> =
				      call 'erlang':'setelement'
					  (15, W2, _rec28)
				  in  let <W4> =
					  %% Line 669
					  apply 'merge_files'/5
					      (Fs, [], 0, 'nolast', _cor9)
				      in  %% Line 670
					  case W4 of
					    <{'w',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57}> when 'true' ->
						let <_cor14> =
						    call 'erlang':'setelement'
							(15, W4, 'undefined')
						in  %% Line 671
						    apply 'close_file'/2
							(Fd, _cor14)
					    ( <_cor58> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','w'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
			      ( <_cor38> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','w'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'init_merge'/4 =
    %% Line 674
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[FN|FNs],I,Fs,W> when 'true' ->
	      let <_cor5> =
		  %% Line 675
		  case FN of
		    %% Line 676
		    <_cor31>
			when call 'erlang':'is_function'
			      (FN) ->
			%% Line 678
			FN
		    %% Line 679
		    <_cor32> when 'true' ->
			%% Line 680
			apply 'read_fun'/3
			    (FN, 'fsort', W)
		  end
	      in  %% Line 682
		  ( case W of
		      ( <( {'w',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_rec33,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor9> =
				call 'lists':'delete'
				    (FN, _rec33)
			    in  let <_rec31> =
				    [_cor5|_cor9]
				in  let <_cor13> =
					call 'erlang':'setelement'
					    (9, W, _rec31)
				    in  %% Line 683
					case apply 'read_more'/4
						 (_cor5, I, 0, _cor13) of
					  %% Line 684
					  <{Ts,_X_LSz,NIFun,NW}> when 'true' ->
					      let <InEtc> = {%% Line 685
						   I,%% Line 685
						     NIFun}
					      in  let <_cor16> =
						      %% Line 686
						      call 'erlang':'+'
							  (I, 1)
						  in  %% Line 686
						      apply 'init_merge'/4
							  (FNs, _cor16, [[Ts|InEtc]|Fs], NW)
					  %% Line 687
					  <{'eof',NW}> when 'true' ->
					      let <_cor17> =
						  %% Line 688
						  call 'erlang':'+'
						      (I, 1)
					      in  %% Line 688
						  apply 'init_merge'/4
						      (FNs, _cor17, Fs, NW)
					  ( <_cor18> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor18})
					    -| ['compiler_generated'] )
					end
			-| ['compiler_generated'] )
		      ( <_cor51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','w'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 690
	  <[],_X_I,Fs0,W = {'w',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,'ascending',_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89}> when 'true' ->
	      let <_cor19> =
		  %% Line 691
		  call 'lists':'sort'
		      (Fs0)
	      in  %% Line 691
		  {_cor19,W}
	  %% Line 692
	  <[],_X_I,Fs0,W = {'w',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,'descending',_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107}> when 'true' ->
	      let <_cor20> =
		  %% Line 693
		  call 'lists':'sort'
		      (Fs0)
	      in  let <_cor21> =
		      %% Line 693
		      call 'lists':'reverse'
			  (_cor20)
		  in  %% Line 693
		      {_cor21,W}
	  %% Line 694
	  <[],_X_I,Fs0,W = {'w',_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,Order,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125}>
	      when call 'erlang':'is_function'
		    (Order) ->
	      let <_cor25> =
		  %% Line 695
		  apply 'cfun_files'/1
		      (Order)
	      in  let <_cor22> =
		      %% Line 695
		      call 'lists':'reverse'
			  (Fs0)
		  in  let <_cor26> =
			  %% Line 695
			  call 'lists':'sort'
			      (_cor25, _cor22)
		      in  %% Line 695
			  {_cor26,W}
	  ( <_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'init_merge',4}}] )
	    -| ['compiler_generated'] )
	end
'cfun_files'/1 =
    %% Line 697
    fun (_cor0) ->
	%% Line 698
	( fun (_cor4,_cor3) ->
	      %% Line 699
	      case _cor4 of
		<[[{T1,_cor8}|_cor9]|_cor10]> when 'true' ->
		    %% Line 700
		    case _cor3 of
		      <[[{T2,_cor11}|_cor12]|_cor13]> when 'true' ->
			  %% Line 701
			  apply _cor0
			      (T1, T2)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-cfun_files/1-fun-0-'}}] )
'merge_files'/5 =
    %% Line 710
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[F1|[F2|Fs]],L0,LSz,Last0,W>
	      when call 'erlang':'<'
		    (LSz,
		     16384) ->
	      %% Line 711
	      case F1 of
		<[Ts0|InEtc]> when 'true' ->
		    let <Kind> =
			%% Line 712
			apply 'merge_kind'/1
			    (W)
		    in  let <Last,L,Ts> =
			    %% Line 713
			    case <Last0,Kind> of
			      %% Line 714
			      <{'last',Lst},_cor32>
				  when call 'erlang':'=:='
					(_cor32,
					 Kind) ->
				  %% Line 715
				  <Lst,L0,Ts0>
			      %% Line 716
			      <'nolast',{'ukmerge',_X_Kp}> when 'true' ->
				  %% Line 717
				  case Ts0 of
				    <[{[T|_X_I],BT}|Ts1]> when 'true' ->
					%% Line 718
					<T,[BT|[]],Ts1>
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			      %% Line 719
			      <'nolast',{'rukmerge',_X_Kp}> when 'true' ->
				  %% Line 720
				  case Ts0 of
				    <[{[T|_X_I],BT}|Ts1]> when 'true' ->
					%% Line 721
					<{T,BT},[],Ts1>
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 722
			      <'nolast',_cor33> when 'true' ->
				  %% Line 723
				  case Ts0 of
				    <[{T,BT}|Ts1]> when 'true' ->
					%% Line 724
					<T,[BT|[]],Ts1>
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			      ( <_fol416,_fol417> when 'true' ->
				    let <_cor10> = {_fol416,_fol417}
				    in  primop 'match_fail'
					    ({'case_clause',_cor10})
				-| ['compiler_generated'] )
			    end
			in  %% Line 726
			    case F2 of
			      <[Ts2 = [{T2,BT2}|Ts2T]|InEtc2]> when 'true' ->
				  let <_cor20> =
				      %% Line 728
				      case Kind of
					%% Line 729
					<'umerge'> when 'true' ->
					    %% Line 730
					    apply 'umerge_files'/9
						(L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Last)
					%% Line 731
					<{'ukmerge',Kp}> when 'true' ->
					    %% Line 732
					    apply 'ukmerge_files'/10
						(L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, Last)
					%% Line 733
					<'merge'> when 'true' ->
					    %% Line 734
					    apply 'merge_files'/9
						(L, F2, Fs, InEtc2, BT2, Ts2T, Ts, InEtc, T2)
					%% Line 735
					<'rumerge'> when 'true' ->
					    %% Line 736
					    apply 'rumerge_files'/9
						(L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Last)
					%% Line 737
					<{'rukmerge',Kp}> when 'true' ->
					    %% Line 738
					    case Last of
					      <{Lt,LtBT}> when 'true' ->
						  %% Line 739
						  apply 'rukmerge_files'/11
						      (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, %% Line 740
												  Lt, %% Line 740
												      LtBT)
					      ( <_cor14> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor14})
						-| ['compiler_generated'] )
					    end
					%% Line 741
					<'rmerge'> when 'true' ->
					    %% Line 742
					    apply 'rmerge_files'/9
						(L, F2, Fs, InEtc2, BT2, Ts2T, Ts, InEtc, T2)
					%% Line 743
					<{'ucmerge',CF}> when 'true' ->
					    %% Line 744
					    case InEtc2 of
					      <{I2,_cor34}> when 'true' ->
						  %% Line 745
						  case InEtc of
						    <{I,_cor35}> when 'true' ->
							%% Line 746
							apply 'ucmerge_files'/12
							    (L, F2, Fs, InEtc2, Ts2, I2, Ts, I, InEtc, T2, CF, %% Line 747
													       Last)
						    ( <_cor16> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor16})
						      -| ['compiler_generated'] )
						  end
					      ( <_cor15> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor15})
						-| ['compiler_generated'] )
					    end
					%% Line 748
					<{'cmerge',CF}> when 'true' ->
					    %% Line 749
					    case InEtc2 of
					      <{I2,_cor36}> when 'true' ->
						  %% Line 750
						  case InEtc of
						    <{I,_cor37}> when 'true' ->
							%% Line 751
							apply 'cmerge_files'/12
							    (L, F2, Fs, InEtc2, BT2, Ts2T, I2, Ts, I, InEtc, T2, %% Line 752
														 CF)
						    ( <_cor18> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor18})
						      -| ['compiler_generated'] )
						  end
					      ( <_cor17> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor17})
						-| ['compiler_generated'] )
					    end
					( <_cor19> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor19})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 727
				      case _cor20 of
					<{NInEtc,NFs,NL,NLast}> when 'true' ->
					    %% Line 754
					    apply 'read_chunk'/6
						(NInEtc, NFs, NL, LSz, NLast, W)
					( <_cor21> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor21})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor13})
				-| ['compiler_generated'] )
			    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 755
	  <[F1|[]],L,LSz,Last,W>
	      when call 'erlang':'<'
		    (LSz,
		     16384) ->
	      %% Line 756
	      case F1 of
		<[Ts|InEtc]> when 'true' ->
		    let <_cor23> =
			%% Line 757
			apply 'merge_kind'/1
			    (W)
		    in  let <NL> =
			    %% Line 757
			    apply 'last_file'/5
				(Ts, L, Last, _cor23, W)
			in  %% Line 758
			    apply 'read_chunk'/6
				(InEtc, [], NL, LSz, 'nolast', W)
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 759
	  <[],[],0,'nolast',W> when 'true' ->
	      %% Line 762
	      apply 'merge_write'/2
		  (W, [])
	  %% Line 763
	  <[],L,_X_LSz,Last,W> when 'true' ->
	      %% Line 764
	      case <> of
		<>
		    when call 'erlang':'=:='
			  ('nolast',
			   Last) ->
		    %% Line 765
		    apply 'merge_write'/2
			(W, L)
		( <> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch','nolast'})
		  -| ['compiler_generated'] )
	      end
	  %% Line 766
	  <Fs,L,_X_LSz,Last,W> when 'true' ->
	      let <NW> =
		  %% Line 767
		  apply 'merge_write'/2
		      (W, L)
	      in  %% Line 768
		  apply 'merge_files'/5
		      (Fs, [], 0, Last, NW)
	end
'merge_kind'/1 =
    %% Line 770
    fun (_cor0) ->
	case _cor0 of
	  <{'w',0,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,'ascending',_cor12,_cor13,_cor14,_cor15,'true',_cor16,_cor17}> when 'true' ->
	      %% Line 771
	      'umerge'
	  %% Line 772
	  <{'w',Kp,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,'ascending',_cor28,_cor29,_cor30,_cor31,'true',_cor32,_cor33}> when 'true' ->
	      %% Line 773
	      {'ukmerge',Kp}
	  %% Line 774
	  <{'w',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,'ascending',_cor45,_cor46,_cor47,_cor48,'false',_cor49,_cor50}> when 'true' ->
	      %% Line 775
	      'merge'
	  %% Line 776
	  <{'w',0,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,'descending',_cor61,_cor62,_cor63,_cor64,'true',_cor65,_cor66}> when 'true' ->
	      %% Line 777
	      'rumerge'
	  %% Line 778
	  <{'w',Kp,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,'descending',_cor77,_cor78,_cor79,_cor80,'true',_cor81,_cor82}> when 'true' ->
	      %% Line 779
	      {'rukmerge',Kp}
	  %% Line 780
	  <{'w',_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,'descending',_cor94,_cor95,_cor96,_cor97,'false',_cor98,_cor99}> when 'true' ->
	      %% Line 781
	      'rmerge'
	  %% Line 782
	  <{'w',_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,CF,_cor111,_cor112,_cor113,_cor114,'true',_cor115,_cor116}> when 'true' ->
	      %% Line 783
	      {'ucmerge',CF}
	  %% Line 784
	  <{'w',_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,CF,_cor128,_cor129,_cor130,_cor131,'false',_cor132,_cor133}> when 'true' ->
	      %% Line 785
	      {'cmerge',CF}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'merge_kind',1}}] )
	    -| ['compiler_generated'] )
	end
'merge_write'/2 =
    %% Line 787
    fun (_cor1,_cor0) ->
	%% Line 788
	( case _cor1 of
	    ( <( {'w',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_rec35,_cor24,_cor25,_cor26,_cor27,_cor28}
		 -| ['compiler_generated'] )> when 'true' ->
		  case <_rec35,_cor15> of
		    %% Line 789
		    <'undefined',Fun>
			when call 'erlang':'is_function'
			      (Fun) ->
			let <_cor6> =
			    %% Line 790
			    apply 'objects'/2
				(_cor0, [])
			in  %% Line 790
			    apply 'outfun'/2
				(_cor6, _cor1)
		    %% Line 791
		    <{Fd,FileName},_cor49> when 'true' ->
			let <_cor7> =
			    %% Line 792
			    call 'lists':'reverse'
				(_cor0)
			in  do  %% Line 792
				apply 'write'/4
				    (Fd, FileName, _cor7, _cor1)
				_cor1
		    ( <_fol418,_fol419> when 'true' ->
			  let <_cor8> = {_fol418,_fol419}
			  in  primop 'match_fail'
				  ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor29> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','w'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'umerge_files'/9 =
    %% Line 796
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,F2,Fs,InEtc2,Ts2,[{T,_X_BT}|Ts],InEtc,T2,Last>
	      when %% Line 797
		call 'erlang':'=='
		    (T,
		     Last) ->
	      %% Line 798
	      apply 'umerge_files'/9
		  (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Last)
	  %% Line 799
	  <L,F2,Fs,InEtc2,Ts2,[{T,BT}|Ts],InEtc,T2,_X_Last>
	      when %% Line 800
		call 'erlang':'=<'
		    (T,
		     T2) ->
	      %% Line 801
	      apply 'umerge_files'/9
		  ([BT|L], F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, T)
	  %% Line 802
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,Last> when 'true' ->
	      %% Line 803
	      {InEtc,[F2|Fs],L,{'last',Last}}
	  %% Line 804
	  <L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Last> when 'true' ->
	      %% Line 805
	      case apply 'insert'/2
		       ([Ts|InEtc], Fs) of
		<[F3|NFs]> when 'true' ->
		    %% Line 806
		    case F3 of
		      <[Ts3 = [{T3,_X_BT3}|_cor20]|InEtc3]> when 'true' ->
			  %% Line 807
			  apply 'umerge_files'/9
			      (L, F3, NFs, InEtc3, Ts3, Ts2, InEtc2, T3, Last)
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	end
'rumerge_files'/9 =
    %% Line 809
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,F2,Fs,InEtc2,Ts2,[{T,_X_BT}|Ts],InEtc,T2,Last>
	      when %% Line 810
		call 'erlang':'=='
		    (T,
		     Last) ->
	      %% Line 811
	      apply 'rumerge_files'/9
		  (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Last)
	  %% Line 812
	  <L,F2,Fs,InEtc2,Ts2,[{T,BT}|Ts],InEtc,T2,_X_Last>
	      when %% Line 813
		call 'erlang':'>='
		    (T,
		     T2) ->
	      %% Line 814
	      apply 'rumerge_files'/9
		  ([BT|L], F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, T)
	  %% Line 815
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,Last> when 'true' ->
	      %% Line 816
	      {InEtc,[F2|Fs],L,{'last',Last}}
	  %% Line 817
	  <L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Last> when 'true' ->
	      %% Line 818
	      case apply 'rinsert'/2
		       ([Ts|InEtc], Fs) of
		<[F3|NFs]> when 'true' ->
		    %% Line 819
		    case F3 of
		      <[Ts3 = [{T3,_X_BT3}|_cor20]|InEtc3]> when 'true' ->
			  %% Line 820
			  apply 'rumerge_files'/9
			      (L, F3, NFs, InEtc3, Ts3, Ts2, InEtc2, T3, Last)
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	end
'merge_files'/9 =
    %% Line 822
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,F2,Fs,InEtc2,BT2,Ts2,[{T,BT}|Ts],InEtc,T2>
	      when %% Line 823
		call 'erlang':'=<'
		    (T,
		     T2) ->
	      %% Line 824
	      apply 'merge_files'/9
		  ([BT|L], F2, Fs, InEtc2, BT2, Ts2, Ts, InEtc, T2)
	  %% Line 825
	  <L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,[],InEtc,_X_T2> when 'true' ->
	      %% Line 826
	      {InEtc,[F2|Fs],L,{'last','foo'}}
	  %% Line 827
	  <L,_X_F2,Fs,InEtc2,BT2,Ts2,Ts,InEtc,_X_T2> when 'true' ->
	      let <L1> =
		  %% Line 828
		  [BT2|L]
	      in  %% Line 829
		  case apply 'insert'/2
			   ([Ts|InEtc], Fs) of
		    <[F3|NFs]> when 'true' ->
			%% Line 830
			case F3 of
			  <[[{T3,BT3}|Ts3]|InEtc3]> when 'true' ->
			      %% Line 831
			      apply 'merge_files'/9
				  (L1, F3, NFs, InEtc3, BT3, Ts3, Ts2, InEtc2, T3)
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	end
'rmerge_files'/9 =
    %% Line 833
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,F2,Fs,InEtc2,BT2,Ts2,[{T,BT}|Ts],InEtc,T2>
	      when %% Line 834
		call 'erlang':'>='
		    (T,
		     T2) ->
	      %% Line 835
	      apply 'rmerge_files'/9
		  ([BT|L], F2, Fs, InEtc2, BT2, Ts2, Ts, InEtc, T2)
	  %% Line 836
	  <L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,[],InEtc,_X_T2> when 'true' ->
	      %% Line 837
	      {InEtc,[F2|Fs],L,{'last','foo'}}
	  %% Line 838
	  <L,_X_F2,Fs,InEtc2,BT2,Ts2,Ts,InEtc,_X_T2> when 'true' ->
	      let <L1> =
		  %% Line 839
		  [BT2|L]
	      in  %% Line 840
		  case apply 'rinsert'/2
			   ([Ts|InEtc], Fs) of
		    <[F3|NFs]> when 'true' ->
			%% Line 841
			case F3 of
			  <[[{T3,BT3}|Ts3]|InEtc3]> when 'true' ->
			      %% Line 842
			      apply 'rmerge_files'/9
				  (L1, F3, NFs, InEtc3, BT3, Ts3, Ts2, InEtc2, T3)
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	end
'ukmerge_files'/10 =
    %% Line 844
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,F2,Fs,InEtc2,Ts2,[{[T|_X_I],_X_BT}|Ts],InEtc,%% Line 845
							  T2,%% Line 845
							     Kp,%% Line 845
								Last>
	      when %% Line 845
		call 'erlang':'=='
		    (T,
		     Last) ->
	      %% Line 846
	      apply 'ukmerge_files'/10
		  (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, Last)
	  %% Line 847
	  <L,F2,Fs,InEtc2,Ts2,[{T = [T0|_X_I],BT}|Ts],InEtc,%% Line 848
							    T2,%% Line 848
							       Kp,%% Line 848
								  _X_Last>
	      when %% Line 848
		call 'erlang':'=<'
		    (T,
		     T2) ->
	      %% Line 849
	      apply 'ukmerge_files'/10
		  ([BT|L], F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, T0)
	  %% Line 850
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,_X_Kp,Last> when 'true' ->
	      %% Line 851
	      {InEtc,[F2|Fs],L,{'last',Last}}
	  %% Line 852
	  <L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Kp,Last> when 'true' ->
	      %% Line 853
	      case apply 'insert'/2
		       ([Ts|InEtc], Fs) of
		<[F3|NFs]> when 'true' ->
		    %% Line 854
		    case F3 of
		      <[Ts3 = [{T3,_X_BT3}|_cor22]|InEtc3]> when 'true' ->
			  %% Line 855
			  apply 'ukmerge_files'/10
			      (L, F3, NFs, InEtc3, Ts3, Ts2, InEtc2, T3, Kp, Last)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'rukmerge_files'/11 =
    %% Line 857
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,F2,Fs,InEtc2,Ts2,[{[T|_X_I],BT}|Ts],InEtc,%% Line 858
						       T2,%% Line 858
							  Kp,%% Line 858
							     Last,%% Line 858
								  _X_LastBT>
	      when %% Line 858
		call 'erlang':'=='
		    (T,
		     Last) ->
	      %% Line 859
	      apply 'rukmerge_files'/11
		  (L, F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, T, BT)
	  %% Line 860
	  <L,F2,Fs,InEtc2,Ts2,[{T = [T0|_X_I],BT}|Ts],InEtc,%% Line 861
							    T2,%% Line 861
							       Kp,%% Line 861
								  _X_Last,%% Line 861
									  LastBT>
	      when %% Line 861
		call 'erlang':'>='
		    (T,
		     T2) ->
	      %% Line 862
	      apply 'rukmerge_files'/11
		  ([LastBT|L], F2, Fs, InEtc2, Ts2, Ts, InEtc, T2, Kp, T0, BT)
	  %% Line 863
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,_X_Kp,Last,LastBT> when 'true' ->
	      %% Line 864
	      {InEtc,[F2|Fs],L,{'last',{Last,LastBT}}}
	  %% Line 865
	  <L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Kp,Last,LastBT> when 'true' ->
	      %% Line 866
	      case apply 'rinsert'/2
		       ([Ts|InEtc], Fs) of
		<[F3|NFs]> when 'true' ->
		    %% Line 867
		    case F3 of
		      <[Ts3 = [{T3,_X_BT3}|_cor24]|InEtc3]> when 'true' ->
			  %% Line 868
			  apply 'rukmerge_files'/11
			      (L, F3, NFs, InEtc3, Ts3, Ts2, InEtc2, T3, Kp, Last, LastBT)
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	end
'ucmerge_files'/12 =
    %% Line 870
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,F2,Fs,InEtc2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,%% Line 871
						     InEtc,%% Line 871
							   T2,%% Line 871
							      CF,%% Line 871
								 Last>
	      when %% Line 871
		call 'erlang':'<'
		    (I,
		     I2) ->
	      %% Line 872
	      case apply CF
		       (T, T2) of
		%% Line 873
		<'true'> when 'true' ->
		    %% Line 874
		    case apply CF
			     (T, Last) of
		      %% Line 875
		      <'true'> when 'true' ->
			  %% Line 876
			  apply 'ucmerge_files'/12
			      (L, F2, Fs, InEtc2, Ts2, I2, Ts, I, InEtc, T2, %% Line 877
									     CF, %% Line 877
										 Last)
		      %% Line 878
		      <'false'> when 'true' ->
			  %% Line 879
			  apply 'ucmerge_files'/12
			      ([BT|L], F2, Fs, InEtc2, Ts2, I2, Ts, I, %% Line 880
								       InEtc, %% Line 880
									      T2, %% Line 880
										  CF, %% Line 880
										      T)
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
		%% Line 882
		<'false'> when 'true' ->
		    %% Line 883
		    case apply 'cinsert'/3
			     ([Ts0|InEtc], Fs, CF) of
		      <[F3|NFs]> when 'true' ->
			  %% Line 884
			  case F3 of
			    <[Ts3 = [{T3,_X_BT3}|_cor32]|InEtc3 = {I3,_cor33}]> when 'true' ->
				%% Line 885
				apply 'ucmerge_files'/12
				    (L, F3, NFs, InEtc3, Ts3, I3, Ts2, I2, InEtc2, T3, CF, Last)
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 887
	  <L,F2,Fs,InEtc2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,%% Line 888
						     InEtc,%% Line 888
							   T2,%% Line 888
							      CF,%% Line 888
								 Last> when 'true' ->
	      %% Line 889
	      case apply CF
		       (T2, T) of
		%% Line 890
		<'true'> when 'true' ->
		    %% Line 891
		    case apply 'cinsert'/3
			     ([Ts0|InEtc], Fs, CF) of
		      <[F3|NFs]> when 'true' ->
			  %% Line 892
			  case F3 of
			    <[Ts3 = [{T3,_X_BT3}|_cor34]|InEtc3 = {I3,_cor35}]> when 'true' ->
				%% Line 893
				apply 'ucmerge_files'/12
				    (L, F3, NFs, InEtc3, Ts3, I3, Ts2, I2, InEtc2, T3, %% Line 894
										       CF, %% Line 894
											   Last)
			    ( <_cor17> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor17})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor16> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor16})
			-| ['compiler_generated'] )
		    end
		%% Line 895
		<'false'> when 'true' ->
		    %% Line 896
		    case apply CF
			     (T, Last) of
		      %% Line 897
		      <'true'> when 'true' ->
			  %% Line 898
			  apply 'ucmerge_files'/12
			      (L, F2, Fs, InEtc2, Ts2, I2, Ts, I, InEtc, T2, %% Line 899
									     CF, %% Line 899
										 Last)
		      %% Line 900
		      <'false'> when 'true' ->
			  %% Line 901
			  apply 'ucmerge_files'/12
			      ([BT|L], F2, Fs, InEtc2, Ts2, I2, Ts, I, %% Line 902
								       InEtc, %% Line 902
									      T2, %% Line 902
										  CF, %% Line 902
										      T)
		      ( <_cor18> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor18})
			-| ['compiler_generated'] )
		    end
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 905
	  <L,F2,Fs,_X_InEtc2,_X_Ts2,_X_I2,[],_X_I,InEtc,_X_T2,_X_CF,Last> when 'true' ->
	      %% Line 906
	      {InEtc,[F2|Fs],L,{'last',Last}}
	  ( <_cor31,_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'ucmerge_files',12}}] )
	    -| ['compiler_generated'] )
	end
'cmerge_files'/12 =
    %% Line 908
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,F2,Fs,InEtc2,BT2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,%% Line 909
							 InEtc,%% Line 909
							       T2,%% Line 909
								  CF>
	      when %% Line 909
		call 'erlang':'<'
		    (I,
		     I2) ->
	      %% Line 910
	      case apply CF
		       (T, T2) of
		%% Line 911
		<'true'> when 'true' ->
		    %% Line 912
		    apply 'cmerge_files'/12
			([BT|L], F2, Fs, InEtc2, BT2, Ts2, I2, Ts, I, InEtc, T2, CF)
		%% Line 913
		<'false'> when 'true' ->
		    let <L1> =
			%% Line 914
			[BT2|L]
		    in  %% Line 915
			case apply 'cinsert'/3
				 ([Ts0|InEtc], Fs, CF) of
			  <[F3|NFs]> when 'true' ->
			      %% Line 916
			      case F3 of
				<[[{T3,BT3}|Ts3]|InEtc3 = {I3,_cor32}]> when 'true' ->
				    %% Line 917
				    apply 'cmerge_files'/12
					(L1, F3, NFs, InEtc3, BT3, Ts3, I3, Ts2, I2, InEtc2, T3, CF)
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor14})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor13})
			    -| ['compiler_generated'] )
			end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 919
	  <L,F2,Fs,InEtc2,BT2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,%% Line 920
							 InEtc,%% Line 920
							       T2,%% Line 920
								  CF> when 'true' ->
	      %% Line 921
	      case apply CF
		       (T2, T) of
		%% Line 922
		<'true'> when 'true' ->
		    let <L1> =
			%% Line 923
			[BT2|L]
		    in  %% Line 924
			case apply 'cinsert'/3
				 ([Ts0|InEtc], Fs, CF) of
			  <[F3|NFs]> when 'true' ->
			      %% Line 925
			      case F3 of
				<[[{T3,BT3}|Ts3]|InEtc3 = {I3,_cor33}]> when 'true' ->
				    %% Line 926
				    apply 'cmerge_files'/12
					(L1, F3, NFs, InEtc3, BT3, Ts3, I3, Ts2, I2, InEtc2, T3, CF)
				( <_cor18> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor18})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor17> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor17})
			    -| ['compiler_generated'] )
			end
		%% Line 927
		<'false'> when 'true' ->
		    %% Line 928
		    apply 'cmerge_files'/12
			([BT|L], F2, Fs, InEtc2, BT2, Ts2, I2, Ts, I, InEtc, T2, CF)
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 930
	  <L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,_X_I2,[],_X_I,InEtc,_X_T2,_X_CF> when 'true' ->
	      %% Line 931
	      {InEtc,[F2|Fs],L,{'last','foo'}}
	  ( <_cor31,_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'cmerge_files',12}}] )
	    -| ['compiler_generated'] )
	end
'last_file'/5 =
    %% Line 933
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ts,L,{'last',T},{'ukmerge',_cor10},_X_W> when 'true' ->
	      %% Line 934
	      apply 'kulast_file'/3
		  (Ts, T, L)
	  %% Line 935
	  <Ts,L,{'last',{T,BT}},{'rukmerge',_cor11},_X_W> when 'true' ->
	      %% Line 936
	      apply 'ruklast_file'/4
		  (Ts, T, BT, L)
	  %% Line 937
	  <Ts,L,{'last',T},{'ucmerge',CF},_X_W> when 'true' ->
	      %% Line 938
	      apply 'uclast_file'/4
		  (Ts, T, CF, L)
	  %% Line 939
	  <Ts,L,{'last',T},_X_Kind,{'w',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,'true',_cor28,_cor29}> when 'true' ->
	      %% Line 940
	      apply 'ulast_file'/3
		  (Ts, T, L)
	  %% Line 941
	  <Ts,L,_X_Last,_X_Kind,_X_W> when 'true' ->
	      %% Line 942
	      apply 'last_file'/2
		  (Ts, L)
	end
'ulast_file'/3 =
    %% Line 944
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{T,_X_BT}|Ts],Last,L>
	      when call 'erlang':'=='
		    (Last,
		     T) ->
	      %% Line 945
	      apply 'last_file'/2
		  (Ts, L)
	  %% Line 946
	  <Ts,_X_Last,L> when 'true' ->
	      %% Line 947
	      apply 'last_file'/2
		  (Ts, L)
	end
'kulast_file'/3 =
    %% Line 949
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{[T|_X_I],_X_BT}|Ts],Last,L>
	      when call 'erlang':'=='
		    (Last,
		     T) ->
	      %% Line 950
	      apply 'last_file'/2
		  (Ts, L)
	  %% Line 951
	  <Ts,_X_Last,L> when 'true' ->
	      %% Line 952
	      apply 'last_file'/2
		  (Ts, L)
	end
'ruklast_file'/4 =
    %% Line 954
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{[T|_X_I],BT}|Ts],Last,_X_LastBT,L>
	      when call 'erlang':'=='
		    (Last,
		     T) ->
	      %% Line 955
	      apply 'last_file'/2
		  (Ts, [BT|L])
	  %% Line 956
	  <Ts,_X_Last,LastBT,L> when 'true' ->
	      %% Line 957
	      apply 'last_file'/2
		  (Ts, [LastBT|L])
	end
'uclast_file'/4 =
    %% Line 959
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{T,BT}|Ts],Last,CF,L> when 'true' ->
	      %% Line 960
	      case apply CF
		       (T, Last) of
		%% Line 961
		<'true'> when 'true' ->
		    %% Line 962
		    apply 'last_file'/2
			(Ts, L)
		%% Line 963
		<'false'> when 'true' ->
		    %% Line 964
		    apply 'last_file'/2
			(Ts, [BT|L])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'uclast_file',4}}] )
	    -| ['compiler_generated'] )
	end
'last_file'/2 =
    %% Line 967
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_Ta,BTa}|[{_X_Tb,BTb}|Ts]],L> when 'true' ->
	      %% Line 968
	      apply 'last_file'/2
		  (Ts, [BTb|[BTa|L]])
	  %% Line 969
	  <[{_X_T,BT}|Ts],L> when 'true' ->
	      %% Line 970
	      apply 'last_file'/2
		  (Ts, [BT|L])
	  %% Line 971
	  <[],L> when 'true' ->
	      %% Line 972
	      L
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'last_file',2}}] )
	    -| ['compiler_generated'] )
	end
'insert'/2 =
    %% Line 975
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,[X1|[X2|[X3|[X4|Xs]]]]>
	      when call 'erlang':'>'
		    (A,
		     X4) ->
	      let <_cor2> =
		  %% Line 976
		  apply 'insert'/2
		      (A, Xs)
	      in  %% Line 976
		  [X1|[X2|[X3|[X4|_cor2]]]]
	  %% Line 977
	  <A,[X1|[X2|[X3|T]]]>
	      when call 'erlang':'>'
		    (A,
		     X3) ->
	      %% Line 978
	      [X1|[X2|[X3|[A|T]]]]
	  %% Line 979
	  <A,[X1|[X2|Xs]]>
	      when call 'erlang':'>'
		    (A,
		     X2) ->
	      %% Line 980
	      [X1|[X2|[A|Xs]]]
	  %% Line 981
	  <A,[X1|T]>
	      when call 'erlang':'>'
		    (A,
		     X1) ->
	      %% Line 982
	      [X1|[A|T]]
	  %% Line 983
	  <A,Xs> when 'true' ->
	      %% Line 984
	      [A|Xs]
	end
'rinsert'/2 =
    %% Line 986
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,[X1|[X2|[X3|[X4|Xs]]]]>
	      when call 'erlang':'<'
		    (A,
		     X4) ->
	      let <_cor2> =
		  %% Line 987
		  apply 'rinsert'/2
		      (A, Xs)
	      in  %% Line 987
		  [X1|[X2|[X3|[X4|_cor2]]]]
	  %% Line 988
	  <A,[X1|[X2|[X3|T]]]>
	      when call 'erlang':'<'
		    (A,
		     X3) ->
	      %% Line 989
	      [X1|[X2|[X3|[A|T]]]]
	  %% Line 990
	  <A,[X1|[X2|Xs]]>
	      when call 'erlang':'<'
		    (A,
		     X2) ->
	      %% Line 991
	      [X1|[X2|[A|Xs]]]
	  %% Line 992
	  <A,[X1|T]>
	      when call 'erlang':'<'
		    (A,
		     X1) ->
	      %% Line 993
	      [X1|[A|T]]
	  %% Line 994
	  <A,Xs> when 'true' ->
	      %% Line 995
	      [A|Xs]
	end
'cinsert'/3 =
    %% Line 1003
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <A,T1 = [F1|T2 = [F2|T3 = [F3|T4 = [F4|Fs]]]],CF> when 'true' ->
	      %% Line 1024
	      ( case F4 of
		  ( <( [( [( {_fol489,( _cor9
					-| ['compiler_generated'] )}
			     -| ['compiler_generated'] )|( _cor10
							   -| ['compiler_generated'] )]
			  -| ['compiler_generated'] )|( {( I1
							   -| ['compiler_generated'] ),( _cor11
											 -| ['compiler_generated'] )}
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 1025
			( case A of
			    ( <( [( [( {_fol490,( _cor12
						  -| ['compiler_generated'] )}
				       -| ['compiler_generated'] )|( _cor13
								     -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )|( {( I2
								     -| ['compiler_generated'] ),( _cor14
												   -| ['compiler_generated'] )}
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  case %% Line 1026
				       ( case <> of
					   %% Line 1027
					   ( <>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '<'
											  -| ['compiler_generated'] )
							 (( I1
							    -| ['compiler_generated'] ),
							  ( I2
							    -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) ->
						 %% Line 1028
						 ( apply CF
						       (_fol489, _fol490)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 1029
					   ( <> when ( 'true'
						       -| ['compiler_generated'] ) ->
						 ( let <_cor5> =
						       %% Line 1030
						       ( apply CF
							     (_fol490, _fol489)
							 -| ['compiler_generated'] )
						   in  %% Line 1030
						       ( call ( 'erlang'
								-| ['compiler_generated'] ):( 'not'
											      -| ['compiler_generated'] )
							     (( _cor5
								-| ['compiler_generated'] ))
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    <'true'> when 'true' ->
					let <_cor3> =
					    apply 'cinsert'/3
						(A, Fs, CF)
					in  [F1|[F2|[F3|[F4|_cor3]]]]
				    <'false'> when 'true' ->
					( case F2 of
					    ( <( [( [( {_fol483,( _cor9
								  -| ['compiler_generated'] )}
						       -| ['compiler_generated'] )|( _cor10
										     -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )|( {( I1
										     -| ['compiler_generated'] ),( _cor11
														   -| ['compiler_generated'] )}
										  -| ['compiler_generated'] )]
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( case A of
						      ( <( [( [( {_fol484,( _cor12
									    -| ['compiler_generated'] )}
								 -| ['compiler_generated'] )|( _cor13
											       -| ['compiler_generated'] )]
							      -| ['compiler_generated'] )|( {( I2
											       -| ['compiler_generated'] ),( _cor14
															     -| ['compiler_generated'] )}
											    -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
							    case %% Line 1026
								 ( case <> of
								     %% Line 1027
								     ( <>
									   when ( call ( 'erlang'
										      -| ['compiler_generated'] ):( '<'
														    -| ['compiler_generated'] )
										   (( I1
										      -| ['compiler_generated'] ),
										    ( I2
										      -| ['compiler_generated'] ))
									       -| ['compiler_generated'] ) ->
									   %% Line 1028
									   ( apply CF
										 (_fol483, _fol484)
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								     %% Line 1029
								     ( <> when ( 'true'
										 -| ['compiler_generated'] ) ->
									   ( let <_cor5> =
										 %% Line 1030
										 ( apply CF
										       (_fol484, _fol483)
										   -| ['compiler_generated'] )
									     in  %% Line 1030
										 ( call ( 'erlang'
											  -| ['compiler_generated'] ):( 'not'
															-| ['compiler_generated'] )
										       (( _cor5
											  -| ['compiler_generated'] ))
										   -| ['compiler_generated'] )
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								   end
								   -| ['compiler_generated'] ) of
							      <'true'> when 'true' ->
								  ( case F3 of
								      ( <( [( [( {_fol474,_fol485}
										 -| ['compiler_generated'] )|_fol486]
									      -| ['compiler_generated'] )|( {_fol487,_fol488}
													    -| ['compiler_generated'] )]
									   -| ['compiler_generated'] )> when ( 'true'
													       -| ['compiler_generated'] ) ->
									    ( case A of
										( <( [( [( {_fol475,( _cor12
												      -| ['compiler_generated'] )}
											   -| ['compiler_generated'] )|( _cor13
															 -| ['compiler_generated'] )]
											-| ['compiler_generated'] )|( {( I2
															 -| ['compiler_generated'] ),( _cor14
																		       -| ['compiler_generated'] )}
														      -| ['compiler_generated'] )]
										     -| ['compiler_generated'] )> when ( 'true'
															 -| ['compiler_generated'] ) ->
										      let <_cor5> =
											  case %% Line 1026
											       ( case <> of
												   %% Line 1027
												   ( <>
													 when ( call ( 'erlang'
														    -| ['compiler_generated'] ):( '<'
																		  -| ['compiler_generated'] )
														 (_fol487,
														  ( I2
														    -| ['compiler_generated'] ))
													     -| ['compiler_generated'] ) ->
													 %% Line 1028
													 ( apply CF
													       (_fol474, _fol475)
													   -| ['compiler_generated'] )
												     -| ['compiler_generated'] )
												   %% Line 1029
												   ( <> when ( 'true'
													       -| ['compiler_generated'] ) ->
													 ( let <_cor5> =
													       %% Line 1030
													       ( apply CF
														     (_fol475, _fol474)
														 -| ['compiler_generated'] )
													   in  %% Line 1030
													       ( call ( 'erlang'
															-| ['compiler_generated'] ):( 'not'
																		      -| ['compiler_generated'] )
														     (( _cor5
															-| ['compiler_generated'] ))
														 -| ['compiler_generated'] )
													   -| ['compiler_generated'] )
												     -| ['compiler_generated'] )
												 end
												 -| ['compiler_generated'] ) of
											    <'true'> when 'true' ->
												[F3|[A|T4]]
											    <'false'> when 'true' ->
												[A|T3]
											    ( <_cor4> when 'true' ->
												  primop 'match_fail'
												      ({'case_clause',_cor4})
											      -| ['compiler_generated'] )
											  end
										      in  [F1|[F2|_cor5]]
										  -| ['compiler_generated'] )
										( <( _cor4
										     -| ['compiler_generated'] )> when ( 'true'
															 -| ['compiler_generated'] ) ->
										      ( primop ( 'match_fail'
												 -| ['compiler_generated'] )
											    (( {( 'badmatch'
												  -| ['compiler_generated'] ),( _cor4
																-| ['compiler_generated'] )}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								      ( <( _cor3
									   -| ['compiler_generated'] )> when ( 'true'
													       -| ['compiler_generated'] ) ->
									    ( primop ( 'match_fail'
										       -| ['compiler_generated'] )
										  (( {( 'badmatch'
											-| ['compiler_generated'] ),( _cor3
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      <'false'> when 'true' ->
								  ( case F1 of
								      ( <( [( [( {_fol481,( _cor9
											    -| ['compiler_generated'] )}
										 -| ['compiler_generated'] )|( _cor10
													       -| ['compiler_generated'] )]
									      -| ['compiler_generated'] )|( {( I1
													       -| ['compiler_generated'] ),( _cor11
																	     -| ['compiler_generated'] )}
													    -| ['compiler_generated'] )]
									   -| ['compiler_generated'] )> when ( 'true'
													       -| ['compiler_generated'] ) ->
									    ( case A of
										( <( [( [( {_fol482,( _cor12
												      -| ['compiler_generated'] )}
											   -| ['compiler_generated'] )|( _cor13
															 -| ['compiler_generated'] )]
											-| ['compiler_generated'] )|( {( I2
															 -| ['compiler_generated'] ),( _cor14
																		       -| ['compiler_generated'] )}
														      -| ['compiler_generated'] )]
										     -| ['compiler_generated'] )> when ( 'true'
															 -| ['compiler_generated'] ) ->
										      case %% Line 1026
											   ( case <> of
											       %% Line 1027
											       ( <>
												     when ( call ( 'erlang'
														-| ['compiler_generated'] ):( '<'
																	      -| ['compiler_generated'] )
													     (( I1
														-| ['compiler_generated'] ),
													      ( I2
														-| ['compiler_generated'] ))
													 -| ['compiler_generated'] ) ->
												     %% Line 1028
												     ( apply CF
													   (_fol481, _fol482)
												       -| ['compiler_generated'] )
												 -| ['compiler_generated'] )
											       %% Line 1029
											       ( <> when ( 'true'
													   -| ['compiler_generated'] ) ->
												     ( let <_cor5> =
													   %% Line 1030
													   ( apply CF
														 (_fol482, _fol481)
													     -| ['compiler_generated'] )
												       in  %% Line 1030
													   ( call ( 'erlang'
														    -| ['compiler_generated'] ):( 'not'
																		  -| ['compiler_generated'] )
														 (( _cor5
														    -| ['compiler_generated'] ))
													     -| ['compiler_generated'] )
												       -| ['compiler_generated'] )
												 -| ['compiler_generated'] )
											     end
											     -| ['compiler_generated'] ) of
											<'true'> when 'true' ->
											    [F1|[A|T2]]
											<'false'> when 'true' ->
											    [A|T1]
											( <_cor6> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor6})
											  -| ['compiler_generated'] )
										      end
										  -| ['compiler_generated'] )
										( <( _cor4
										     -| ['compiler_generated'] )> when ( 'true'
															 -| ['compiler_generated'] ) ->
										      ( primop ( 'match_fail'
												 -| ['compiler_generated'] )
											    (( {( 'badmatch'
												  -| ['compiler_generated'] ),( _cor4
																-| ['compiler_generated'] )}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								      ( <( _cor3
									   -| ['compiler_generated'] )> when ( 'true'
													       -| ['compiler_generated'] ) ->
									    ( primop ( 'match_fail'
										       -| ['compiler_generated'] )
										  (( {( 'badmatch'
											-| ['compiler_generated'] ),( _cor3
														      -| ['compiler_generated'] )}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      ( <_cor7> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor7})
								-| ['compiler_generated'] )
							    end
							-| ['compiler_generated'] )
						      ( <( _cor4
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
							    ( primop ( 'match_fail'
								       -| ['compiler_generated'] )
								  (( {( 'badmatch'
									-| ['compiler_generated'] ),( _cor4
												      -| ['compiler_generated'] )}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _cor3
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'badmatch'
							      -| ['compiler_generated'] ),( _cor3
											    -| ['compiler_generated'] )}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor8})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <( _cor4
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'badmatch'
					      -| ['compiler_generated'] ),( _cor4
									    -| ['compiler_generated'] )}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <( _cor3
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),( _cor3
								  -| ['compiler_generated'] )}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1012
	  <A,T1 = [F1|T2 = [F2|Fs]],CF> when 'true' ->
	      %% Line 1024
	      ( case F2 of
		  ( <( [( [( {_fol503,( _cor9
					-| ['compiler_generated'] )}
			     -| ['compiler_generated'] )|( _cor10
							   -| ['compiler_generated'] )]
			  -| ['compiler_generated'] )|( {( I1
							   -| ['compiler_generated'] ),( _cor11
											 -| ['compiler_generated'] )}
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 1025
			( case A of
			    ( <( [( [( {_fol504,( _cor12
						  -| ['compiler_generated'] )}
				       -| ['compiler_generated'] )|( _cor13
								     -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )|( {( I2
								     -| ['compiler_generated'] ),( _cor14
												   -| ['compiler_generated'] )}
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  case %% Line 1026
				       ( case <> of
					   %% Line 1027
					   ( <>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '<'
											  -| ['compiler_generated'] )
							 (( I1
							    -| ['compiler_generated'] ),
							  ( I2
							    -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) ->
						 %% Line 1028
						 ( apply CF
						       (_fol503, _fol504)
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 1029
					   ( <> when ( 'true'
						       -| ['compiler_generated'] ) ->
						 ( let <_cor5> =
						       %% Line 1030
						       ( apply CF
							     (_fol504, _fol503)
							 -| ['compiler_generated'] )
						   in  %% Line 1030
						       ( call ( 'erlang'
								-| ['compiler_generated'] ):( 'not'
											      -| ['compiler_generated'] )
							     (( _cor5
								-| ['compiler_generated'] ))
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    <'true'> when 'true' ->
					let <_cor9> =
					    apply 'cinsert'/3
						(A, Fs, CF)
					in  [F1|[F2|_cor9]]
				    <'false'> when 'true' ->
					( case F1 of
					    ( <( [( [( {_fol501,( _cor9
								  -| ['compiler_generated'] )}
						       -| ['compiler_generated'] )|( _cor10
										     -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )|( {( I1
										     -| ['compiler_generated'] ),( _cor11
														   -| ['compiler_generated'] )}
										  -| ['compiler_generated'] )]
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( case A of
						      ( <( [( [( {_fol502,( _cor12
									    -| ['compiler_generated'] )}
								 -| ['compiler_generated'] )|( _cor13
											       -| ['compiler_generated'] )]
							      -| ['compiler_generated'] )|( {( I2
											       -| ['compiler_generated'] ),( _cor14
															     -| ['compiler_generated'] )}
											    -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
							    case %% Line 1026
								 ( case <> of
								     %% Line 1027
								     ( <>
									   when ( call ( 'erlang'
										      -| ['compiler_generated'] ):( '<'
														    -| ['compiler_generated'] )
										   (( I1
										      -| ['compiler_generated'] ),
										    ( I2
										      -| ['compiler_generated'] ))
									       -| ['compiler_generated'] ) ->
									   %% Line 1028
									   ( apply CF
										 (_fol501, _fol502)
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								     %% Line 1029
								     ( <> when ( 'true'
										 -| ['compiler_generated'] ) ->
									   ( let <_cor5> =
										 %% Line 1030
										 ( apply CF
										       (_fol502, _fol501)
										   -| ['compiler_generated'] )
									     in  %% Line 1030
										 ( call ( 'erlang'
											  -| ['compiler_generated'] ):( 'not'
															-| ['compiler_generated'] )
										       (( _cor5
											  -| ['compiler_generated'] ))
										   -| ['compiler_generated'] )
									     -| ['compiler_generated'] )
								       -| ['compiler_generated'] )
								   end
								   -| ['compiler_generated'] ) of
							      <'true'> when 'true' ->
								  [F1|[A|T2]]
							      <'false'> when 'true' ->
								  [A|T1]
							      ( <_cor10> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor10})
								-| ['compiler_generated'] )
							    end
							-| ['compiler_generated'] )
						      ( <( _cor4
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
							    ( primop ( 'match_fail'
								       -| ['compiler_generated'] )
								  (( {( 'badmatch'
									-| ['compiler_generated'] ),( _cor4
												      -| ['compiler_generated'] )}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _cor3
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'badmatch'
							      -| ['compiler_generated'] ),( _cor3
											    -| ['compiler_generated'] )}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <_cor11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor11})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <( _cor4
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'badmatch'
					      -| ['compiler_generated'] ),( _cor4
									    -| ['compiler_generated'] )}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <( _cor3
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),( _cor3
								  -| ['compiler_generated'] )}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1017
	  <A,T = [F|Fs],CF> when 'true' ->
	      %% Line 1024
	      ( case F of
		  ( <( [( [( {( T1
				-| ['compiler_generated'] ),( _cor9
							      -| ['compiler_generated'] )}
			     -| ['compiler_generated'] )|( _cor10
							   -| ['compiler_generated'] )]
			  -| ['compiler_generated'] )|( {( I1
							   -| ['compiler_generated'] ),( _cor11
											 -| ['compiler_generated'] )}
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 1025
			( case A of
			    ( <( [( [( {( T2
					  -| ['compiler_generated'] ),( _cor12
									-| ['compiler_generated'] )}
				       -| ['compiler_generated'] )|( _cor13
								     -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )|( {( I2
								     -| ['compiler_generated'] ),( _cor14
												   -| ['compiler_generated'] )}
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  case %% Line 1026
				       ( case <> of
					   %% Line 1027
					   ( <>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '<'
											  -| ['compiler_generated'] )
							 (( I1
							    -| ['compiler_generated'] ),
							  ( I2
							    -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) ->
						 %% Line 1028
						 ( apply CF
						       (( T1
							  -| ['compiler_generated'] ), ( T2
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 1029
					   ( <> when ( 'true'
						       -| ['compiler_generated'] ) ->
						 ( let <_cor5> =
						       %% Line 1030
						       ( apply CF
							     (( T2
								-| ['compiler_generated'] ), ( T1
											       -| ['compiler_generated'] ))
							 -| ['compiler_generated'] )
						   in  %% Line 1030
						       ( call ( 'erlang'
								-| ['compiler_generated'] ):( 'not'
											      -| ['compiler_generated'] )
							     (( _cor5
								-| ['compiler_generated'] ))
							 -| ['compiler_generated'] )
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    <'true'> when 'true' ->
					[F|[A|Fs]]
				    <'false'> when 'true' ->
					[A|T]
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor12})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <( _cor4
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'badmatch'
					      -| ['compiler_generated'] ),( _cor4
									    -| ['compiler_generated'] )}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <( _cor3
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),( _cor3
								  -| ['compiler_generated'] )}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1019
	  <A,_cor16,_X_CF> when 'true' ->
	      %% Line 1020
	      [A|[]]
	end
'cfun'/3 =
    %% Line 1023
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1024
	case _cor1 of
	  <[[{T1,_cor9}|_cor10]|{I1,_cor11}]> when 'true' ->
	      %% Line 1025
	      case _cor0 of
		<[[{T2,_cor12}|_cor13]|{I2,_cor14}]> when 'true' ->
		    %% Line 1026
		    case <> of
		      %% Line 1027
		      <>
			  when call 'erlang':'<'
				(I1,
				 I2) ->
			  %% Line 1028
			  apply _cor2
			      (T1, T2)
		      %% Line 1029
		      <> when 'true' ->
			  let <_cor5> =
			      %% Line 1030
			      apply _cor2
				  (T2, T1)
			  in  %% Line 1030
			      call 'erlang':'not'
				  (_cor5)
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'binterm_objects'/2 =
    %% Line 1033
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_T,[_X_Sz|BT]}|Ts],L> when 'true' ->
	      %% Line 1034
	      apply 'binterm_objects'/2
		  (Ts, [BT|L])
	  %% Line 1035
	  <[],L> when 'true' ->
	      %% Line 1036
	      L
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'binterm_objects',2}}] )
	    -| ['compiler_generated'] )
	end
'objects'/2 =
    %% Line 1038
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[_X_Sz|BT]|Ts],L> when 'true' ->
	      %% Line 1039
	      apply 'objects'/2
		  (Ts, [BT|L])
	  %% Line 1040
	  <[],L> when 'true' ->
	      %% Line 1041
	      L
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'objects',2}}] )
	    -| ['compiler_generated'] )
	end
'binterms'/2 =
    %% Line 1043
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_T1,BT1}|[{_X_T2,BT2}|Ts]],L> when 'true' ->
	      %% Line 1044
	      apply 'binterms'/2
		  (Ts, [BT2|[BT1|L]])
	  %% Line 1045
	  <[{_X_T,BT}|Ts],L> when 'true' ->
	      %% Line 1046
	      apply 'binterms'/2
		  (Ts, [BT|L])
	  %% Line 1047
	  <[],L> when 'true' ->
	      %% Line 1048
	      L
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'binterms',2}}] )
	    -| ['compiler_generated'] )
	end
'read_chunk'/6 =
    %% Line 1050
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1051
	case _cor5 of
	  <{I,IFun}> when 'true' ->
	      %% Line 1052
	      case apply 'read_more'/4
		       (IFun, I, _cor2, _cor0) of
		%% Line 1053
		<{Ts,NLSz,NIFun,NW = {'w',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,'ascending',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}}> when 'true' ->
		    let <NInEtc> = {%% Line 1054
			 I,%% Line 1054
			   NIFun}
		    in  let <NFs> =
			    %% Line 1055
			    apply 'insert'/2
				([Ts|NInEtc], _cor4)
			in  %% Line 1056
			    apply 'merge_files'/5
				(NFs, _cor3, NLSz, _cor1, NW)
		%% Line 1057
		<{Ts,NLSz,NIFun,NW = {'w',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,'descending',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57}}> when 'true' ->
		    let <NInEtc> = {%% Line 1058
			 I,%% Line 1058
			   NIFun}
		    in  let <NFs> =
			    %% Line 1059
			    apply 'rinsert'/2
				([Ts|NInEtc], _cor4)
			in  %% Line 1060
			    apply 'merge_files'/5
				(NFs, _cor3, NLSz, _cor1, NW)
		%% Line 1061
		<{Ts,NLSz,NIFun,NW}> when 'true' ->
		    let <NInEtc> = {%% Line 1062
			 I,%% Line 1062
			   NIFun}
		    in  %% Line 1063
			( case NW of
			    ( <( {'w',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_rec37,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <NFs> =
				      apply 'cinsert'/3
					  ([Ts|NInEtc], _cor4, _rec37)
				  in  %% Line 1064
				      apply 'merge_files'/5
					  (NFs, _cor3, NLSz, _cor1, NW)
			      -| ['compiler_generated'] )
			    ( <_cor76> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','w'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 1065
		<{'eof',NW}> when 'true' ->
		    %% Line 1066
		    apply 'merge_files'/5
			(_cor4, _cor3, _cor2, _cor1, NW)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'read_more'/4 =
    %% Line 1070
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1071
	case apply _cor3
		 ({{'merge',_cor2},[],_cor1,_cor0}) of
	  %% Line 1072
	  <{{_cor28,[],NLSz},NIFun}> when 'true' ->
	      %% Line 1073
	      apply 'read_more'/4
		  (NIFun, _cor2, NLSz, _cor0)
	  %% Line 1074
	  <{{_cor29,L,NLSz},NInFun}> when 'true' ->
	      %% Line 1075
	      ( case _cor0 of
		  ( <( {'w',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec38,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor13> =
			    case call 'lists':'member'
				     (_cor3, _rec38) of
			      %% Line 1076
			      <'true'> when 'true' ->
				  let <_cor8> =
				      %% Line 1078
				      call 'lists':'delete'
					  (_cor3, _rec38)
				  in  let <_rec39> =
					  %% Line 1078
					  [NInFun|_cor8]
				      in  %% Line 1078
					  call 'erlang':'setelement'
					      (9, _cor0, _rec39)
			      %% Line 1079
			      <'false'> when 'true' ->
				  _cor0
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor12})
				-| ['compiler_generated'] )
			    end
			in  let <_cor15> =
				%% Line 1083
				call 'lists':'reverse'
				    (L)
			    in  %% Line 1083
				{_cor15,NLSz,NInFun,_cor13}
		    -| ['compiler_generated'] )
		  ( <_cor48> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','w'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1084
	  <'eof'> when 'true' ->
	      %% Line 1086
	      ( case _cor0 of
		  ( <( {'w',_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_rec44,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec42> =
			    call 'lists':'delete'
				(_cor3, _rec44)
			in  let <_cor21> =
				call 'erlang':'setelement'
				    (9, _cor0, _rec42)
			    in  %% Line 1087
				{'eof',_cor21}
		    -| ['compiler_generated'] )
		  ( <_cor106> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','w'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor23> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor23})
	    -| ['compiler_generated'] )
	end
'read_fun'/3 =
    %% Line 1090
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1091
	case call 'file':'open'
		 (_cor2, ['raw'|['binary'|['read'|['compressed']]]]) of
	  %% Line 1092
	  <{'ok',Fd}> when 'true' ->
	      %% Line 1093
	      apply 'read_fun2'/5
		  (Fd, #{}#, 0, _cor2, _cor1)
	  %% Line 1094
	  <Error> when 'true' ->
	      %% Line 1095
	      apply 'file_error'/3
		  (_cor2, Error, _cor0)
	end
'read_fun2'/5 =
    %% Line 1098
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1099
	( fun (_cor7) ->
	      case _cor7 of
		<'close'> when 'true' ->
		    %% Line 1100
		    apply 'close_read_fun'/3
			(_cor4, _cor1, _cor0)
		%% Line 1101
		<{I,L,LSz,W}> when 'true' ->
		    %% Line 1102
		    case apply 'read_objs'/8
			     (_cor4, _cor1, I, L, _cor3, _cor2, LSz, W) of
		      %% Line 1103
		      <{{I1,L1,Bin1,Size1},LSz1}> when 'true' ->
			  let <NIFun> =
			      %% Line 1104
			      apply 'read_fun2'/5
				  (_cor4, Bin1, Size1, _cor1, _cor0)
			  in  %% Line 1105
			      {{I1,L1,LSz1},NIFun}
		      %% Line 1106
		      <'eof'> when 'true' ->
			  do  %% Line 1107
			      apply 'close_read_fun'/3
				  (_cor4, _cor1, _cor0)
			      %% Line 1108
			      'eof'
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor8})
			-| [{'function_name',{'-read_fun2/5-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-read_fun2/5-fun-0-'}}] )
'close_read_fun'/3 =
    %% Line 1112
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fd,_X_FileName,'user'> when 'true' ->
	      do  %% Line 1113
		  ( call 'file':'close'
			(Fd)
		    -| ['result_not_wanted'] )
		  %% Line 1114
		  'ok'
	  %% Line 1115
	  <Fd,FileName,'fsort'> when 'true' ->
	      let <_X_> =
		  %% Line 1116
		  ( call 'file':'close'
			(Fd)
		    -| ['result_not_wanted'] )
	      in  do  %% Line 1117
		      ( call 'file':'delete'
			    (FileName)
			-| ['result_not_wanted'] )
		      %% Line 1118
		      'ok'
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'close_read_fun',3}}] )
	    -| ['compiler_generated'] )
	end
'read_objs'/8 =
    %% Line 1120
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Max> =
	    %% Line 1121
	    call 'erlang':'max'
		(_cor2, 16384)
	in  let <BSz0> =
		%% Line 1122
		call 'erlang':'byte_size'
		    (_cor3)
	    in  let <_cor12> =
		    %% Line 1123
		    call 'erlang':'-'
			(_cor2, BSz0)
		in  %% Line 1123
		    ( case _cor0 of
			( <( {'w',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec45,_cor46}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Min> =
				  call 'erlang':'+'
				      (_cor12, _rec45)
			      in  let <NoBytes> =
				      %% Line 1124
				      call 'erlang':'max'
					  (Min, Max)
				  in  %% Line 1125
				      case apply 'read'/4
					       (_cor7, _cor6, NoBytes, _cor0) of
					%% Line 1126
					<{'ok',Bin}> when 'true' ->
					    let <BSz> =
						%% Line 1127
						call 'erlang':'byte_size'
						    (Bin)
					    in  let <NLSz> =
						    %% Line 1128
						    call 'erlang':'+'
							(_cor1, BSz)
						in  let <_cor17> =
							catch
							    %% Line 1129
							    apply 'file_loop'/9
								(_cor4, _cor5, _cor3, Bin, _cor2, BSz0, BSz, Min, _cor0)
						    in  %% Line 1129
							case _cor17 of
							  %% Line 1131
							  <{'EXIT',_X_R}> when 'true' ->
							      %% Line 1132
							      apply 'error'/2
								  ({'error',{'bad_object',_cor6}}, _cor0)
							  %% Line 1133
							  <Reply> when 'true' ->
							      %% Line 1134
							      {Reply,NLSz}
							end
					%% Line 1136
					<'eof'>
					    when try
						  let <_cor19> =
						      call 'erlang':'byte_size'
							  (_cor3)
						  in  call 'erlang':'=:='
							  (_cor19, 0)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 1137
					    'eof'
					%% Line 1138
					<'eof'> when 'true' ->
					    %% Line 1139
					    apply 'error'/2
						({'error',{'premature_eof',_cor6}}, _cor0)
					( <_cor20> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor20})
					  -| ['compiler_generated'] )
				      end
			  -| ['compiler_generated'] )
			( <_cor47> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','w'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'file_loop'/9 =
    %% Line 1142
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,I,_X_B1,B2,Sz,0,_X_B2Sz,_X_Min,W> when 'true' ->
	      %% Line 1143
	      apply 'file_loop'/5
		  (L, I, B2, Sz, W)
	  %% Line 1144
	  <L,I,B1,B2,Sz,_X_B1Sz,B2Sz,Min,W>
	      when call 'erlang':'>'
		    (B2Sz,
		     Min) ->
	      %% Line 1145
	      case call 'erlang':'split_binary'
		       (B2, Min) of
		<{B3,B4}> when 'true' ->
		    let <_cor10> =
			%% Line 1146
			call 'erlang':'list_to_binary'
			    ([B1|[B3|[]]])
		    in  %% Line 1146
			case apply 'file_loop'/5
				 (L, I, _cor10, Sz, W) of
			  <{I1,L1,#{}#,Sz1}> when 'true' ->
			      %% Line 1147
			      apply 'file_loop'/5
				  (L1, I1, B4, Sz1, W)
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1148
	  <L,I,B1,B2,Sz,_X_B1Sz,_X_B2Sz,_X_Min,W> when 'true' ->
	      let <_cor12> =
		  %% Line 1149
		  call 'erlang':'list_to_binary'
		      ([B1|[B2|[]]])
	      in  %% Line 1149
		  apply 'file_loop'/5
		      (L, I, _cor12, Sz, W)
	end
'file_loop'/5 =
    %% Line 1151
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1152
	case _cor0 of
	  <{'w',Kp,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Format,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,HdLen,_cor26}> when 'true' ->
	      %% Line 1153
	      apply 'file_loop1'/7
		  (_cor4, _cor3, _cor2, _cor1, Kp, Format, HdLen)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'file_loop1'/7 =
    %% Line 1155
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,I,HB,0,Kp,F,HdLen> when 'true' ->
	      %% Line 1156
	      case ( HB
		     -| ['reuse_for_context'] ) of
		<#{#<Size>(HdLen,8,'integer',['unsigned'|['big']]),
		   #<B>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor8> =
			%% Line 1157
			#{#<Size>(HdLen,8,'integer',['unsigned'|['big']])}#
		    in  %% Line 1157
			apply 'file_loop2'/8
			    (L, I, B, Size, _cor8, Kp, F, HdLen)
		( <_cor7> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor7)
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1158
	  <L,I,B,Sz,Kp,F,HdLen> when 'true' ->
	      let <_cor9> =
		  %% Line 1159
		  #{#<Sz>(HdLen,8,'integer',['unsigned'|['big']])}#
	      in  %% Line 1159
		  apply 'file_loop2'/8
		      (L, I, B, Sz, _cor9, Kp, F, HdLen)
	end
'file_loop2'/8 =
    %% Line 1161
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,_X_I,B,Sz,SzB,0,'binary',HdLen> when 'true' ->
	      %% Line 1162
	      case apply 'file_binloop'/5
		       (L, Sz, SzB, B, HdLen) of
		<{NL,NB,NSz,NSzB}> when 'true' ->
		    %% Line 1163
		    case <> of
		      %% Line 1164
		      <>
			  when try
				let <_cor9> =
				    call 'erlang':'byte_size'
					(NB)
				in  call 'erlang':'=:='
					(_cor9, NSz)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 1165
			  case ( NB
				 -| ['reuse_for_context'] ) of
			    <#{#<Bin>(NSz,8,'binary',['unsigned'|['big']])}#> when 'true' ->
				%% Line 1166
				{0,[{Bin,[NSzB|Bin]}|NL],#{}#,0}
			    ( <_cor10> when 'true' ->
				  do  primop 'bs_context_to_binary'
					  (_cor10)
				      primop 'match_fail'
					  ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1167
		      <> when 'true' ->
			  %% Line 1168
			  {0,NL,NB,NSz}
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1170
	  <L,_X_I,B,Sz,SzB,0,Fun,HdLen> when 'true' ->
	      %% Line 1171
	      apply 'file_binterm_loop'/6
		  (L, Sz, SzB, B, Fun, HdLen)
	  %% Line 1172
	  <L,{'merge',I},B,Sz,SzB,Kp,Fun,HdLen> when 'true' ->
	      %% Line 1173
	      apply 'merge_loop'/8
		  (Kp, I, L, Sz, SzB, B, Fun, HdLen)
	  %% Line 1174
	  <L,I,B,Sz,SzB,Kp,Fun,HdLen>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1175
	      apply 'key_loop'/8
		  (Kp, I, L, Sz, SzB, B, Fun, HdLen)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'file_loop2',8}}] )
	    -| ['compiler_generated'] )
	end
'file_binloop'/5 =
    %% Line 1177
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1178
	case ( _cor1
	       -| ['reuse_for_context'] ) of
	  %% Line 1179
	  <#{#<Bin>(_cor3,8,'binary',['unsigned'|['big']]),
	     #<NSizeB>(_cor0,8,'binary',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1180
	      case NSizeB of
		<#{#<NSize>(_cor0,8,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1181
		    apply 'file_binloop'/5
			([{Bin,[_cor2|Bin]}|_cor4], NSize, NSizeB, R, _cor0)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1182
	  <_cor12> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (_cor1)
		  %% Line 1183
		  {_cor4,_cor1,_cor3,_cor2}
	end
'file_binterm_loop'/6 =
    %% Line 1186
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1187
	case ( _cor2
	       -| ['reuse_for_context'] ) of
	  %% Line 1188
	  <#{#<BinTerm>(_cor4,8,'binary',['unsigned'|['big']]),
	     #<NSizeB>(_cor0,8,'binary',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1189
	      case NSizeB of
		<#{#<NSize>(_cor0,8,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <BT> =
			%% Line 1190
			[_cor3|BinTerm]
		    in  let <Term> =
			    %% Line 1191
			    apply _cor1
				(BinTerm)
			in  %% Line 1192
			    apply 'file_binterm_loop'/6
				([{Term,BT}|_cor5], NSize, NSizeB, R, _cor1, _cor0)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1193
	  <#{#<BinTerm>(_cor4,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <Term> =
		  %% Line 1194
		  apply _cor1
		      (BinTerm)
	      in  let <NL> =
		      %% Line 1195
		      [{Term,[_cor3|BinTerm]}|_cor5]
		  in  %% Line 1196
		      {0,NL,#{}#,0}
	  %% Line 1197
	  <_cor18> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (_cor2)
		  %% Line 1198
		  {0,_cor5,_cor2,_cor4}
	end
'key_loop'/8 =
    %% Line 1201
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1202
	case ( _cor2
	       -| ['reuse_for_context'] ) of
	  %% Line 1203
	  <#{#<BinTerm>(_cor4,8,'binary',['unsigned'|['big']]),
	     #<NSizeB>(_cor0,8,'binary',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1204
	      case NSizeB of
		<#{#<NSize>(_cor0,8,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <BT> =
			%% Line 1205
			[_cor3|BinTerm]
		    in  let <_cor10> =
			    %% Line 1206
			    apply _cor1
				(BinTerm)
			in  let <UniqueKey> =
				%% Line 1282
				( case <_cor7,_cor10> of
				    ( <( Kp
					 -| ['compiler_generated'] ),( T
								       -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (( Kp
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  %% Line 1283
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'element'
										 -| ['compiler_generated'] )
						(( Kp
						   -| ['compiler_generated'] ), ( T
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1284
				    ( <( [( Kp1
					    -| ['compiler_generated'] )|( [( Kp2
									     -| ['compiler_generated'] )|( []
													   -| ['compiler_generated'] )]
									  -| ['compiler_generated'] )]
					 -| ['compiler_generated'] ),( T
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
					  ( let <_fol673> =
						%% Line 1285
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp1
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( let <_fol674> =
						      %% Line 1285
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'element'
											     -| ['compiler_generated'] )
							    (( Kp2
							       -| ['compiler_generated'] ), ( T
											      -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1285
						      ( [_fol673|( [_fol674|( []
									      -| ['compiler_generated'] )]
								   -| ['compiler_generated'] )]
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1286
				    ( <( [( Kp1
					    -| ['compiler_generated'] )|( [( Kp2
									     -| ['compiler_generated'] )|( Kps
													   -| ['compiler_generated'] )]
									  -| ['compiler_generated'] )]
					 -| ['compiler_generated'] ),( T
								       -| ['compiler_generated'] )> when ( 'true'
													   -| ['compiler_generated'] ) ->
					  ( let <_fol675> =
						%% Line 1287
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp1
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( let <_fol676> =
						      %% Line 1287
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'element'
											     -| ['compiler_generated'] )
							    (( Kp2
							       -| ['compiler_generated'] ), ( T
											      -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  ( let <_fol677> =
							    %% Line 1287
							    ( apply ( 'make_key2'/2
								      -| ['compiler_generated'] )
								  (( Kps
								     -| ['compiler_generated'] ), ( T
												    -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							in  %% Line 1287
							    ( [_fol675|( [_fol676|_fol677]
									 -| ['compiler_generated'] )]
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( _cor8
					 -| ['compiler_generated'] ),_fol678> when ( 'true'
										     -| ['compiler_generated'] ) ->
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),( _cor8
										    -| ['compiler_generated'] ),_fol678}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  let <E> = {%% Line 1207
				     UniqueKey,%% Line 1207
					       BT}
				in  let <_cor13> =
					%% Line 1208
					call 'erlang':'+'
					    (_cor6, 1)
				    in  %% Line 1208
					apply 'key_loop'/8
					    (_cor7, _cor13, [E|_cor5], NSize, NSizeB, R, _cor1, _cor0)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1209
	  <#{#<BinTerm>(_cor4,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor14> =
		  %% Line 1210
		  apply _cor1
		      (BinTerm)
	      in  let <UniqueKey> =
		      %% Line 1282
		      ( case <_cor7,_cor14> of
			  ( <( Kp
			       -| ['compiler_generated'] ),( T
							     -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(( Kp
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				%% Line 1283
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'element'
								       -| ['compiler_generated'] )
				      (( Kp
					 -| ['compiler_generated'] ), ( T
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1284
			  ( <( [( Kp1
				  -| ['compiler_generated'] )|( [( Kp2
								   -| ['compiler_generated'] )|( []
												 -| ['compiler_generated'] )]
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),( T
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
				( let <_fol681> =
				      %% Line 1285
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (( Kp1
					       -| ['compiler_generated'] ), ( T
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  ( let <_fol682> =
					    %% Line 1285
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (( Kp2
						     -| ['compiler_generated'] ), ( T
										    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  %% Line 1285
					    ( [_fol681|( [_fol682|( []
								    -| ['compiler_generated'] )]
							 -| ['compiler_generated'] )]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1286
			  ( <( [( Kp1
				  -| ['compiler_generated'] )|( [( Kp2
								   -| ['compiler_generated'] )|( Kps
												 -| ['compiler_generated'] )]
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),( T
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
				( let <_fol683> =
				      %% Line 1287
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (( Kp1
					       -| ['compiler_generated'] ), ( T
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  ( let <_fol684> =
					    %% Line 1287
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (( Kp2
						     -| ['compiler_generated'] ), ( T
										    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_fol685> =
						  %% Line 1287
						  ( apply ( 'make_key2'/2
							    -| ['compiler_generated'] )
							(( Kps
							   -| ['compiler_generated'] ), ( T
											  -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  %% Line 1287
						  ( [_fol683|( [_fol684|_fol685]
							       -| ['compiler_generated'] )]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _cor8
			       -| ['compiler_generated'] ),_fol686> when ( 'true'
									   -| ['compiler_generated'] ) ->
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),( _cor8
									  -| ['compiler_generated'] ),_fol686}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  let <NL> =
			  %% Line 1211
			  [{UniqueKey,[_cor3|BinTerm]}|_cor5]
		      in  let <_cor17> =
			      %% Line 1212
			      call 'erlang':'+'
				  (_cor6, 1)
			  in  %% Line 1212
			      {_cor17,NL,#{}#,0}
	  %% Line 1213
	  <_cor27> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (_cor2)
		  %% Line 1214
		  {_cor6,_cor5,_cor2,_cor4}
	end
'merge_loop'/8 =
    %% Line 1217
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1218
	case ( _cor2
	       -| ['reuse_for_context'] ) of
	  %% Line 1219
	  <#{#<BinTerm>(_cor4,8,'binary',['unsigned'|['big']]),
	     #<NSizeB>(_cor0,8,'binary',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1220
	      case NSizeB of
		<#{#<NSize>(_cor0,8,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <BT> =
			%% Line 1221
			[_cor3|BinTerm]
		    in  let <_cor10> =
			    %% Line 1222
			    apply _cor1
				(BinTerm)
			in  let <UniqueKey> =
				%% Line 1292
				( case <_cor7,_cor6,_cor10> of
				    ( <( Kp
					 -| ['compiler_generated'] ),_fol698,( T
									       -| ['compiler_generated'] )>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_integer'
										   -| ['compiler_generated'] )
						  (( Kp
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  ( let <_fol699> =
						%% Line 1293
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  %% Line 1293
						( [_fol699|_fol698]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1294
				    ( <( [( Kp1
					    -| ['compiler_generated'] )|( [( Kp2
									     -| ['compiler_generated'] )|( []
													   -| ['compiler_generated'] )]
									  -| ['compiler_generated'] )]
					 -| ['compiler_generated'] ),_fol700,( T
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
					  ( let <_fol701> =
						%% Line 1295
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp1
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( let <_fol702> =
						      %% Line 1295
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'element'
											     -| ['compiler_generated'] )
							    (( Kp2
							       -| ['compiler_generated'] ), ( T
											      -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1295
						      ( [( [_fol701|_fol702]
							   -| ['compiler_generated'] )|_fol700]
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 1296
				    ( <( [( Kp1
					    -| ['compiler_generated'] )|( [( Kp2
									     -| ['compiler_generated'] )|( Kps
													   -| ['compiler_generated'] )]
									  -| ['compiler_generated'] )]
					 -| ['compiler_generated'] ),_fol703,( T
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
					  ( let <_fol704> =
						%% Line 1297
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp1
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( let <_fol705> =
						      %% Line 1297
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'element'
											     -| ['compiler_generated'] )
							    (( Kp2
							       -| ['compiler_generated'] ), ( T
											      -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  ( let <_cor8> =
							    %% Line 1297
							    ( apply ( 'make_key2'/2
								      -| ['compiler_generated'] )
								  (( Kps
								     -| ['compiler_generated'] ), ( T
												    -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							in  %% Line 1297
							    ( [( [_fol704|( [_fol705|( _cor8
										       -| ['compiler_generated'] )]
									    -| ['compiler_generated'] )]
								 -| ['compiler_generated'] )|_fol703]
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( _cor11
					 -| ['compiler_generated'] ),_fol706,( _cor9
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
					  ( primop ( 'match_fail'
						     -| ['compiler_generated'] )
						(( {( 'function_clause'
						      -| ['compiler_generated'] ),( _cor11
										    -| ['compiler_generated'] ),_fol706,( _cor9
															  -| ['compiler_generated'] )}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  let <E> = {%% Line 1223
				     UniqueKey,%% Line 1223
					       BT}
				in  %% Line 1224
				    apply 'merge_loop'/8
					(_cor7, _cor6, [E|_cor5], NSize, NSizeB, R, _cor1, _cor0)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1225
	  <#{#<BinTerm>(_cor4,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor13> =
		  %% Line 1226
		  apply _cor1
		      (BinTerm)
	      in  let <UniqueKey> =
		      %% Line 1292
		      ( case <_cor7,_cor6,_cor13> of
			  ( <( Kp
			       -| ['compiler_generated'] ),_fol710,( T
								     -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_integer'
									 -| ['compiler_generated'] )
					(( Kp
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				( let <_fol711> =
				      %% Line 1293
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (( Kp
					       -| ['compiler_generated'] ), ( T
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  %% Line 1293
				      ( [_fol711|_fol710]
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1294
			  ( <( [( Kp1
				  -| ['compiler_generated'] )|( [( Kp2
								   -| ['compiler_generated'] )|( []
												 -| ['compiler_generated'] )]
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),_fol712,( T
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
				( let <_fol713> =
				      %% Line 1295
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (( Kp1
					       -| ['compiler_generated'] ), ( T
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  ( let <_fol714> =
					    %% Line 1295
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (( Kp2
						     -| ['compiler_generated'] ), ( T
										    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  %% Line 1295
					    ( [( [_fol713|_fol714]
						 -| ['compiler_generated'] )|_fol712]
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1296
			  ( <( [( Kp1
				  -| ['compiler_generated'] )|( [( Kp2
								   -| ['compiler_generated'] )|( Kps
												 -| ['compiler_generated'] )]
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),_fol715,( T
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
				( let <_fol716> =
				      %% Line 1297
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'element'
									     -| ['compiler_generated'] )
					    (( Kp1
					       -| ['compiler_generated'] ), ( T
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  ( let <_fol717> =
					    %% Line 1297
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'element'
										   -| ['compiler_generated'] )
						  (( Kp2
						     -| ['compiler_generated'] ), ( T
										    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_cor8> =
						  %% Line 1297
						  ( apply ( 'make_key2'/2
							    -| ['compiler_generated'] )
							(( Kps
							   -| ['compiler_generated'] ), ( T
											  -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  %% Line 1297
						  ( [( [_fol716|( [_fol717|( _cor8
									     -| ['compiler_generated'] )]
								  -| ['compiler_generated'] )]
						       -| ['compiler_generated'] )|_fol715]
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _cor11
			       -| ['compiler_generated'] ),( _cor10
							     -| ['compiler_generated'] ),( _cor9
											   -| ['compiler_generated'] )> when ( 'true'
															       -| ['compiler_generated'] ) ->
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),( _cor11
									  -| ['compiler_generated'] ),( _cor10
													-| ['compiler_generated'] ),( _cor9
																      -| ['compiler_generated'] )}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  let <NL> =
			  %% Line 1227
			  [{UniqueKey,[_cor3|BinTerm]}|_cor5]
		      in  %% Line 1228
			  {{'merge',_cor6},NL,#{}#,0}
	  %% Line 1229
	  <_cor25> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (_cor2)
		  %% Line 1230
		  {{'merge',_cor6},_cor5,_cor2,_cor4}
	end
'fun_objs'/6 =
    %% Line 1233
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1234
	case _cor0 of
	  <{'w',Keypos,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,Format,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,HL,_cor30}> when 'true' ->
	      let <_cor7> =
		  catch
		      %% Line 1235
		      apply 'fun_loop'/8
			  (_cor5, _cor4, _cor3, _cor2, _cor1, Keypos, Format, HL)
	      in  %% Line 1235
		  case _cor7 of
		    %% Line 1236
		    <{'EXIT',_X_R}> when 'true' ->
			%% Line 1237
			apply 'error'/2
			    ({'error','bad_object'}, _cor0)
		    %% Line 1238
		    <Reply> when 'true' ->
			%% Line 1239
			Reply
		  end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'fun_loop'/8 =
    %% Line 1242
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Objs,L,LSz,RunSize,_X_I,0,'binary',HdLen> when 'true' ->
	      %% Line 1243
	      apply 'fun_binloop'/5
		  (Objs, L, LSz, RunSize, HdLen)
	  %% Line 1244
	  <Objs,L,LSz,RunSize,_X_I,0,Fun,HdLen> when 'true' ->
	      %% Line 1245
	      apply 'fun_loop'/6
		  (Objs, L, LSz, RunSize, Fun, HdLen)
	  %% Line 1246
	  <Objs,L,LSz,RunSize,{'merge',I},Keypos,Fun,HdLen> when 'true' ->
	      %% Line 1247
	      apply 'fun_mergeloop'/8
		  (Objs, L, LSz, RunSize, I, Keypos, Fun, HdLen)
	  %% Line 1248
	  <Objs,L,LSz,RunSize,I,Keypos,Fun,HdLen>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1249
	      apply 'fun_keyloop'/8
		  (Objs, L, LSz, RunSize, I, Keypos, Fun, HdLen)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fun_loop',8}}] )
	    -| ['compiler_generated'] )
	end
'fun_binloop'/5 =
    %% Line 1251
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[B|Bs],L,LSz,RunSize,HL>
	      when call 'erlang':'<'
		    (LSz,
		     RunSize) ->
	      let <Size> =
		  %% Line 1252
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor6> =
		      %% Line 1253
		      #{#<Size>(HL,8,'integer',['unsigned'|['big']])}#
		  in  let <Obj> =
			  %% Line 1253
			  {B,[_cor6|B]}
		      in  let <_cor8> =
			      %% Line 1254
			      call 'erlang':'+'
				  (LSz, Size)
			  in  %% Line 1254
			      apply 'fun_binloop'/5
				  (Bs, [Obj|L], _cor8, RunSize, HL)
	  %% Line 1255
	  <Bs,L,LSz,_X_RunSize,_X_HL> when 'true' ->
	      %% Line 1256
	      {0,Bs,L,LSz}
	end
'fun_loop'/6 =
    %% Line 1258
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[B|Bs],L,LSz,RunSize,Fun,HL>
	      when call 'erlang':'<'
		    (LSz,
		     RunSize) ->
	      let <Size> =
		  %% Line 1259
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor8> =
		      %% Line 1260
		      apply Fun
			  (B)
		  in  let <_cor7> =
			  %% Line 1260
			  #{#<Size>(HL,8,'integer',['unsigned'|['big']])}#
		      in  let <Obj> =
			      %% Line 1260
			      {_cor8,[_cor7|B]}
			  in  let <_cor10> =
				  %% Line 1261
				  call 'erlang':'+'
				      (LSz, Size)
			      in  %% Line 1261
				  apply 'fun_loop'/6
				      (Bs, [Obj|L], _cor10, RunSize, Fun, HL)
	  %% Line 1262
	  <Bs,L,LSz,_X_RunSize,_X_Fun,_X_HL> when 'true' ->
	      %% Line 1263
	      {0,Bs,L,LSz}
	end
'fun_keyloop'/8 =
    %% Line 1265
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[B|Bs],L,LSz,RunSize,I,Kp,Fun,HL>
	      when call 'erlang':'<'
		    (LSz,
		     RunSize) ->
	      let <Size> =
		  %% Line 1266
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor9> =
		      %% Line 1267
		      apply Fun
			  (B)
		  in  let <UniqueKey> =
			  %% Line 1282
			  ( case <Kp,_cor9> of
			      ( <_fol734,( T
					   -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_integer'
									     -| ['compiler_generated'] )
					    (_fol734)
					-| ['compiler_generated'] ) ->
				    %% Line 1283
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'element'
									   -| ['compiler_generated'] )
					  (_fol734, ( T
						      -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1284
			      ( <( [( Kp1
				      -| ['compiler_generated'] )|( [( Kp2
								       -| ['compiler_generated'] )|( []
												     -| ['compiler_generated'] )]
								    -| ['compiler_generated'] )]
				   -| ['compiler_generated'] ),( T
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
				    ( let <_fol735> =
					  %% Line 1285
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'element'
										 -| ['compiler_generated'] )
						(( Kp1
						   -| ['compiler_generated'] ), ( T
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_fol736> =
						%% Line 1285
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp2
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  %% Line 1285
						( [_fol735|( [_fol736|( []
									-| ['compiler_generated'] )]
							     -| ['compiler_generated'] )]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1286
			      ( <( [( Kp1
				      -| ['compiler_generated'] )|( [( Kp2
								       -| ['compiler_generated'] )|( Kps
												     -| ['compiler_generated'] )]
								    -| ['compiler_generated'] )]
				   -| ['compiler_generated'] ),( T
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
				    ( let <_fol737> =
					  %% Line 1287
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'element'
										 -| ['compiler_generated'] )
						(( Kp1
						   -| ['compiler_generated'] ), ( T
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_fol738> =
						%% Line 1287
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp2
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( let <_fol739> =
						      %% Line 1287
						      ( apply ( 'make_key2'/2
								-| ['compiler_generated'] )
							    (( Kps
							       -| ['compiler_generated'] ), ( T
											      -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1287
						      ( [_fol737|( [_fol738|_fol739]
								   -| ['compiler_generated'] )]
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _cor8
				   -| ['compiler_generated'] ),_fol740> when ( 'true'
									       -| ['compiler_generated'] ) ->
				    ( primop ( 'match_fail'
					       -| ['compiler_generated'] )
					  (( {( 'function_clause'
						-| ['compiler_generated'] ),( _cor8
									      -| ['compiler_generated'] ),_fol740}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor11> =
			      %% Line 1268
			      #{#<Size>(HL,8,'integer',['unsigned'|['big']])}#
			  in  let <E> =
				  %% Line 1268
				  {UniqueKey,[_cor11|B]}
			      in  let <_cor14> =
				      %% Line 1269
				      call 'erlang':'+'
					  (LSz, Size)
				  in  let <_cor13> =
					  %% Line 1269
					  call 'erlang':'+'
					      (I, 1)
				      in  %% Line 1269
					  apply 'fun_keyloop'/8
					      (Bs, [E|L], _cor14, RunSize, _cor13, Kp, Fun, HL)
	  %% Line 1270
	  <Bs,L,LSz,_X_RunSize,I,_X_Kp,_X_Fun,_X_HL> when 'true' ->
	      %% Line 1271
	      {I,Bs,L,LSz}
	end
'fun_mergeloop'/8 =
    %% Line 1273
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[B|Bs],L,LSz,RunSize,I,Kp,Fun,HL>
	      when call 'erlang':'<'
		    (LSz,
		     RunSize) ->
	      let <Size> =
		  %% Line 1274
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor9> =
		      %% Line 1275
		      apply Fun
			  (B)
		  in  let <UniqueKey> =
			  %% Line 1292
			  ( case <Kp,I,_cor9> of
			      ( <_fol744,_fol745,( T
						   -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_integer'
									     -| ['compiler_generated'] )
					    (_fol744)
					-| ['compiler_generated'] ) ->
				    ( let <_fol746> =
					  %% Line 1293
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'element'
										 -| ['compiler_generated'] )
						(_fol744, ( T
							    -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  %% Line 1293
					  ( [_fol746|_fol745]
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1294
			      ( <( [( Kp1
				      -| ['compiler_generated'] )|( [( Kp2
								       -| ['compiler_generated'] )|( []
												     -| ['compiler_generated'] )]
								    -| ['compiler_generated'] )]
				   -| ['compiler_generated'] ),_fol747,( T
									 -| ['compiler_generated'] )> when ( 'true'
													     -| ['compiler_generated'] ) ->
				    ( let <_fol748> =
					  %% Line 1295
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'element'
										 -| ['compiler_generated'] )
						(( Kp1
						   -| ['compiler_generated'] ), ( T
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_fol749> =
						%% Line 1295
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp2
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  %% Line 1295
						( [( [_fol748|_fol749]
						     -| ['compiler_generated'] )|_fol747]
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1296
			      ( <( [( Kp1
				      -| ['compiler_generated'] )|( [( Kp2
								       -| ['compiler_generated'] )|( Kps
												     -| ['compiler_generated'] )]
								    -| ['compiler_generated'] )]
				   -| ['compiler_generated'] ),_fol750,( T
									 -| ['compiler_generated'] )> when ( 'true'
													     -| ['compiler_generated'] ) ->
				    ( let <_fol751> =
					  %% Line 1297
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'element'
										 -| ['compiler_generated'] )
						(( Kp1
						   -| ['compiler_generated'] ), ( T
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_fol752> =
						%% Line 1297
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'element'
										       -| ['compiler_generated'] )
						      (( Kp2
							 -| ['compiler_generated'] ), ( T
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( let <_cor8> =
						      %% Line 1297
						      ( apply ( 'make_key2'/2
								-| ['compiler_generated'] )
							    (( Kps
							       -| ['compiler_generated'] ), ( T
											      -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1297
						      ( [( [_fol751|( [_fol752|( _cor8
										 -| ['compiler_generated'] )]
								      -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )|_fol750]
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _cor11
				   -| ['compiler_generated'] ),( _cor10
								 -| ['compiler_generated'] ),_fol753> when ( 'true'
													     -| ['compiler_generated'] ) ->
				    ( primop ( 'match_fail'
					       -| ['compiler_generated'] )
					  (( {( 'function_clause'
						-| ['compiler_generated'] ),( _cor11
									      -| ['compiler_generated'] ),( _cor10
													    -| ['compiler_generated'] ),_fol753}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor11> =
			      %% Line 1276
			      #{#<Size>(HL,8,'integer',['unsigned'|['big']])}#
			  in  let <E> =
				  %% Line 1276
				  {UniqueKey,[_cor11|B]}
			      in  let <_cor13> =
				      %% Line 1277
				      call 'erlang':'+'
					  (LSz, Size)
				  in  %% Line 1277
				      apply 'fun_mergeloop'/8
					  (Bs, [E|L], _cor13, RunSize, I, Kp, Fun, HL)
	  %% Line 1278
	  <Bs,L,LSz,_X_RunSize,I,_X_Kp,_X_Fun,_X_HL> when 'true' ->
	      %% Line 1279
	      {{'merge',I},Bs,L,LSz}
	end
'make_key'/2 =
    %% Line 1282
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Kp,T>
	      when call 'erlang':'is_integer'
		    (Kp) ->
	      %% Line 1283
	      call 'erlang':'element'
		  (Kp, T)
	  %% Line 1284
	  <[Kp1|[Kp2|[]]],T> when 'true' ->
	      let <_cor2> =
		  %% Line 1285
		  call 'erlang':'element'
		      (Kp1, T)
	      in  let <_cor3> =
		      %% Line 1285
		      call 'erlang':'element'
			  (Kp2, T)
		  in  %% Line 1285
		      [_cor2|[_cor3|[]]]
	  %% Line 1286
	  <[Kp1|[Kp2|Kps]],T> when 'true' ->
	      let <_cor4> =
		  %% Line 1287
		  call 'erlang':'element'
		      (Kp1, T)
	      in  let <_cor5> =
		      %% Line 1287
		      call 'erlang':'element'
			  (Kp2, T)
		  in  let <_cor6> =
			  %% Line 1287
			  apply 'make_key2'/2
			      (Kps, T)
		      in  %% Line 1287
			  [_cor4|[_cor5|_cor6]]
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'make_key',2}}] )
	    -| ['compiler_generated'] )
	end
'make_stable_key'/3 =
    %% Line 1292
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Kp,I,T>
	      when call 'erlang':'is_integer'
		    (Kp) ->
	      let <_cor3> =
		  %% Line 1293
		  call 'erlang':'element'
		      (Kp, T)
	      in  %% Line 1293
		  [_cor3|I]
	  %% Line 1294
	  <[Kp1|[Kp2|[]]],I,T> when 'true' ->
	      let <_cor4> =
		  %% Line 1295
		  call 'erlang':'element'
		      (Kp1, T)
	      in  let <_cor5> =
		      %% Line 1295
		      call 'erlang':'element'
			  (Kp2, T)
		  in  %% Line 1295
		      [[_cor4|_cor5]|I]
	  %% Line 1296
	  <[Kp1|[Kp2|Kps]],I,T> when 'true' ->
	      let <_cor6> =
		  %% Line 1297
		  call 'erlang':'element'
		      (Kp1, T)
	      in  let <_cor7> =
		      %% Line 1297
		      call 'erlang':'element'
			  (Kp2, T)
		  in  let <_cor8> =
			  %% Line 1297
			  apply 'make_key2'/2
			      (Kps, T)
		      in  %% Line 1297
			  [[_cor6|[_cor7|_cor8]]|I]
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'make_stable_key',3}}] )
	    -| ['compiler_generated'] )
	end
'make_key2'/2 =
    %% Line 1299
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Kp|[]],T> when 'true' ->
	      let <_cor2> =
		  %% Line 1300
		  call 'erlang':'element'
		      (Kp, T)
	      in  %% Line 1300
		  [_cor2|[]]
	  %% Line 1301
	  <[Kp|Kps],T> when 'true' ->
	      let <_cor3> =
		  %% Line 1302
		  call 'erlang':'element'
		      (Kp, T)
	      in  let <_cor4> =
		      %% Line 1302
		      apply 'make_key2'/2
			  (Kps, T)
		  in  %% Line 1302
		      [_cor3|_cor4]
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'make_key2',2}}] )
	    -| ['compiler_generated'] )
	end
'infun'/1 =
    %% Line 1304
    fun (_cor0) ->
	%% Line 1305
	case _cor0 of
	  <{'w',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'setelement'
		      (5, _cor0, 'undefined')
	      in  %% Line 1306
		  try
		      apply _cor28
			  ('read')
		  of <_cor7> ->
		      case _cor7 of
			%% Line 1307
			<'end_of_input'> when 'true' ->
			    %% Line 1308
			    {'end_of_input',_cor3}
			%% Line 1309
			<{'end_of_input',Value}> when 'true' ->
			    let <_rec48> = {%% Line 1310
				 'value',%% Line 1310
					 Value}
			    in  %% Line 1310
				case _cor3 of
				  <{'w',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82}> when 'true' ->
				      let <_cor11> =
					  call 'erlang':'setelement'
					      (20, _cor3, _rec48)
				      in  {'end_of_input',_cor11}
				  ( <_cor83> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','w'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			%% Line 1311
			<{Objs,NFun}>
			    when try
				  let <_cor12> =
				      call 'erlang':'is_function'
					  (NFun)
				  in  let <_cor13> =
					  %% Line 1312
					  call 'erlang':'is_function'
					      (NFun, 1)
				      in  let <_cor14> =
					      %% Line 1313
					      call 'erlang':'is_list'
						  (Objs)
					  in  let <_cor15> =
						  call 'erlang':'and'
						      (_cor13, _cor14)
					      in  call 'erlang':'and'
						      (_cor12, _cor15)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor18> =
				%% Line 1314
				call 'erlang':'setelement'
				    (5, _cor0, NFun)
			    in  %% Line 1314
				{'cont',_cor18,Objs}
			%% Line 1315
			<Error> when 'true' ->
			    %% Line 1316
			    apply 'error'/2
				(Error, _cor3)
		      end
		  catch <_cor22,_cor21,_cor20> ->
		      do  %% Line 1318
			  apply 'cleanup'/1
			      (_cor3)
			  let <_cor23> =
			      %% Line 1319
			      call 'erlang':'get_stacktrace'
				  ()
			  in  %% Line 1319
			      call 'erlang':'raise'
				  (_cor22, _cor21, _cor23)
	  ( <_cor44> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','w'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'outfun'/2 =
    %% Line 1322
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,W = {'w',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,Val}>
	      when call 'erlang':'=/='
		    (Val,
		     'no_value') ->
	      let <_cor4> =
		  %% Line 1323
		  call 'erlang':'setelement'
		      (20, W, 'no_value')
	      in  let <_cor12> =
		      %% Line 1324
		      case <> of
			%% Line 1325
			<>
			    when ( try
				    ( case <> of
					( <>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_record'
										       -| ['compiler_generated'] )
						      (_cor4,
						       ( 'w'
							 -| ['compiler_generated'] ),
						       ( 20
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] ) ->
					      let <_cor10> =
						  ( call 'erlang':'element'
							(7, _cor4)
						    -| ['compiler_generated'] )
					      in  ( call 'erlang':'=:='
							(_cor10, 'true')
						    -| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
				-| ['compiler_generated'] ) ->
			    %% Line 1326
			    apply 'outfun'/2
				(Val, _cor4)
			%% Line 1327
			<> when 'true' ->
			    _cor4
		      end
		  in  %% Line 1329
		      apply 'outfun'/2
			  (A, _cor12)
	  %% Line 1330
	  <A,W> when 'true' ->
	      %% Line 1331
	      case W of
		<{'w',_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}> when 'true' ->
		    let <_cor16> =
			call 'erlang':'setelement'
			    (6, W, 'undefined')
		    in  %% Line 1332
			try
			    apply _cor74
				(A)
			of <_cor20> ->
			    case _cor20 of
			      %% Line 1333
			      <Reply>
				  when call 'erlang':'=:='
					(A,
					 'close') ->
				  %% Line 1334
				  Reply
			      %% Line 1335
			      <NF>
				  when try
					let <_cor21> =
					    call 'erlang':'is_function'
						(_cor20)
					in  let <_cor22> =
						call 'erlang':'is_function'
						    (_cor20, 1)
					    in  call 'erlang':'and'
						    (_cor21, _cor22)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 1336
				  call 'erlang':'setelement'
				      (6, W, NF)
			      %% Line 1337
			      <Error> when 'true' ->
				  %% Line 1338
				  apply 'error'/2
				      (Error, _cor16)
			    end
			catch <_cor28,_cor27,_cor26> ->
			    do  %% Line 1340
				apply 'cleanup'/1
				    (_cor16)
				let <_cor29> =
				    %% Line 1341
				    call 'erlang':'get_stacktrace'
					()
				in  %% Line 1341
				    call 'erlang':'raise'
					(_cor28, _cor27, _cor29)
		( <_cor89> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'is_keypos'/1 =
    %% Line 1344
    fun (_cor0) ->
	case _cor0 of
	  <Keypos>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1345
	      'true'
	  %% Line 1346
	  <[]> when 'true' ->
	      %% Line 1347
	      {'badarg',[]}
	  %% Line 1348
	  <L> when 'true' ->
	      %% Line 1349
	      apply 'is_keyposs'/1
		  (L)
	end
'is_keyposs'/1 =
    %% Line 1351
    fun (_cor0) ->
	case _cor0 of
	  <[Kp|Kps]>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Kp)
		in  let <_cor2> =
			call 'erlang':'>'
			    (Kp, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1352
	      apply 'is_keyposs'/1
		  (Kps)
	  %% Line 1353
	  <[]> when 'true' ->
	      %% Line 1354
	      'true'
	  %% Line 1355
	  <[Bad|_cor4]> when 'true' ->
	      %% Line 1356
	      {'badarg',Bad}
	  %% Line 1357
	  <Bad> when 'true' ->
	      %% Line 1358
	      {'badarg',Bad}
	end
'is_input'/1 =
    %% Line 1360
    fun (_cor0) ->
	case _cor0 of
	  <Fun>
	      when try
		    let <_cor1> =
			call 'erlang':'is_function'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'is_function'
				(_cor0, 1)
			in  call 'erlang':'and'
				(_cor1, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1361
	      {'true',Fun}
	  %% Line 1362
	  <Files> when 'true' ->
	      %% Line 1363
	      apply 'is_files'/1
		  (Files)
	end
'is_files'/1 =
    %% Line 1365
    fun (_cor0) ->
	%% Line 1366
	apply 'is_files'/2
	    (_cor0, [])
'is_files'/2 =
    %% Line 1368
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[F|Fs],L> when 'true' ->
	      %% Line 1369
	      case apply 'read_file_info'/1
		       (F) of
		%% Line 1370
		<{'ok',File,_X_FI}> when 'true' ->
		    %% Line 1371
		    apply 'is_files'/2
			(Fs, [File|L])
		%% Line 1372
		<Error> when 'true' ->
		    %% Line 1373
		    Error
	      end
	  %% Line 1375
	  <[],L> when 'true' ->
	      let <_cor3> =
		  %% Line 1376
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 1376
		  {'true',_cor3}
	  %% Line 1377
	  <Bad,_X_L> when 'true' ->
	      %% Line 1378
	      {'badarg',Bad}
	end
'maybe_output'/1 =
    %% Line 1380
    fun (_cor0) ->
	case _cor0 of
	  <Fun>
	      when try
		    let <_cor1> =
			call 'erlang':'is_function'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'is_function'
				(_cor0, 1)
			in  call 'erlang':'and'
				(_cor1, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1381
	      {'true',Fun}
	  %% Line 1382
	  <File> when 'true' ->
	      %% Line 1383
	      case apply 'read_file_info'/1
		       (File) of
		%% Line 1384
		<Badarg = {'badarg',_X_File}> when 'true' ->
		    %% Line 1385
		    Badarg
		%% Line 1386
		<{'ok',FileName,_X_FileInfo}> when 'true' ->
		    %% Line 1387
		    {'true',FileName}
		%% Line 1388
		<{'error',{'file_error',FileName,_X_Reason}}> when 'true' ->
		    %% Line 1389
		    {'true',FileName}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'read_file_info'/1 =
    %% Line 1392
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 1394
		call 'filename':'absname'
		    (_cor0)
	in  %% Line 1394
	    case _cor1 of
	      %% Line 1395
	      <{'EXIT',_cor5}> when 'true' ->
		  %% Line 1396
		  {'badarg',_cor0}
	      %% Line 1397
	      <FileName> when 'true' ->
		  %% Line 1398
		  case call 'file':'read_file_info'
			   (FileName) of
		    %% Line 1399
		    <{'ok',FileInfo}> when 'true' ->
			%% Line 1400
			{'ok',FileName,FileInfo}
		    %% Line 1401
		    <{'error','einval'}> when 'true' ->
			%% Line 1402
			{'badarg',_cor0}
		    %% Line 1403
		    <{'error',Reason}> when 'true' ->
			%% Line 1404
			{'error',{'file_error',FileName,Reason}}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	    end
'next_temp'/1 =
    %% Line 1409
    fun (_cor0) ->
	%% Line 1410
	( case _cor0 of
	    ( <( {'w',_cor13,_cor14,_rec55,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec56> =
		      %% Line 1411
		      call 'erlang':'+'
			  (_rec55, 1)
		  in  let <_cor7> =
			  %% Line 1411
			  call 'erlang':'setelement'
			      (4, _cor0, _rec56)
		      in  let <Temp> =
			      %% Line 1412
			      call 'lists':'concat'
				  ([_cor18|[_rec55|[]]])
			  in  %% Line 1413
			      {_cor7,Temp}
	      -| ['compiler_generated'] )
	    ( <_cor31> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','w'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'tmp_prefix'/2 =
    %% Line 1417
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,TmpDirOpt>
	      when let <_cor2> =
		    call 'erlang':'is_function'
			(F)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (F, 'undefined')
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 1418
	      case call 'file':'get_cwd'
		       () of
		<{'ok',CurDir}> when 'true' ->
		    %% Line 1419
		    apply 'tmp_prefix1'/2
			(CurDir, TmpDirOpt)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1420
	  <OutFile,TmpDirOpt> when 'true' ->
	      let <Dir> =
		  %% Line 1421
		  call 'filename':'dirname'
		      (OutFile)
	      in  %% Line 1422
		  apply 'tmp_prefix1'/2
		      (Dir, TmpDirOpt)
	end
'tmp_prefix1'/2 =
    %% Line 1424
    fun (_cor1,_cor0) ->
	let <Node> =
	    %% Line 1426
	    call 'erlang':'node'
		()
	in  let <Pid> =
		%% Line 1427
		call 'os':'getpid'
		    ()
	    in  %% Line 1428
		case call 'erlang':'now'
			 () of
		  <{MSecs,Secs,MySecs}> when 'true' ->
		      let <F> =
			  %% Line 1429
			  call 'lists':'concat'
			      ([[102|[115|[95]]]|[Node|[[95]|[Pid|[[95]|[MSecs|[[95]|[Secs|[[95]|[MySecs|[[46]]]]]]]]]]]])
		      in  let <_cor8> =
			      %% Line 1430
			      case _cor0 of
				%% Line 1431
				<'default'> when 'true' ->
				    _cor1
				%% Line 1433
				<{'dir',TDir}> when 'true' ->
				    %% Line 1434
				    TDir
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor10> =
				  %% Line 1436
				  call 'filename':'absname'
				      (_cor8)
			      in  %% Line 1436
				  call 'filename':'join'
				      (_cor10, F)
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'open_file'/2 =
    %% Line 1439
    fun (_cor1,_cor0) ->
	%% Line 1440
	( case _cor0 of
	    ( <( {'w',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_rec59,_cor29,_cor30,_cor31}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'erlang':'++'
			  (_rec59, ['raw'|['binary'|['write']]])
		  in  case call 'file':'open'
			       (_cor1, _cor4) of
			%% Line 1441
			<{'ok',Fd}> when 'true' ->
			    let <_rec60> =
				%% Line 1442
				[{Fd,_cor1}|_cor21]
			    in  let <_cor10> =
				    %% Line 1442
				    call 'erlang':'setelement'
					(9, _cor0, _rec60)
				in  %% Line 1442
				    {Fd,_cor10}
			%% Line 1443
			<Error> when 'true' ->
			    %% Line 1444
			    apply 'file_error'/3
				(_cor1, Error, _cor0)
		      end
	      -| ['compiler_generated'] )
	    ( <_cor32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','w'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'read'/4 =
    %% Line 1447
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1448
	case call 'file':'read'
		 (_cor3, _cor1) of
	  %% Line 1449
	  <{'ok',Bin}> when 'true' ->
	      %% Line 1450
	      {'ok',Bin}
	  %% Line 1451
	  <'eof'> when 'true' ->
	      %% Line 1452
	      'eof'
	  %% Line 1453
	  <{'error','enomem'}> when 'true' ->
	      %% Line 1455
	      apply 'error'/2
		  ({'error',{'bad_object',_cor2}}, _cor0)
	  %% Line 1456
	  <{'error','einval'}> when 'true' ->
	      %% Line 1458
	      apply 'error'/2
		  ({'error',{'bad_object',_cor2}}, _cor0)
	  %% Line 1459
	  <Error> when 'true' ->
	      %% Line 1460
	      apply 'file_error'/3
		  (_cor2, Error, _cor0)
	end
'write'/4 =
    %% Line 1463
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1464
	case call 'file':'write'
		 (_cor3, _cor1) of
	  %% Line 1465
	  <'ok'> when 'true' ->
	      %% Line 1466
	      'ok'
	  %% Line 1467
	  <Error> when 'true' ->
	      %% Line 1468
	      apply 'file_error'/3
		  (_cor2, Error, _cor0)
	end
'file_error'/3 =
    %% Line 1473
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,{'error',Reason},W> when 'true' ->
	      %% Line 1474
	      apply 'error'/2
		  ({'error',{'file_error',File,Reason}}, W)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'file_error',3}}] )
	    -| ['compiler_generated'] )
	end
'error'/2 =
    %% Line 1476
    fun (_cor1,_cor0) ->
	do  %% Line 1477
	    apply 'cleanup'/1
		(_cor0)
	    %% Line 1478
	    ( case _cor0 of
		( <( {'w',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec63,_cor20,_cor21,_cor22,_cor23}
		     -| ['compiler_generated'] )> when 'true' ->
		      call 'erlang':'throw'
			  ({_rec63,_cor1})
		  -| ['compiler_generated'] )
		( <_cor24> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','w'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'cleanup'/1 =
    %% Line 1480
    fun (_cor0) ->
	do  %% Line 1481
	    apply 'close_out'/1
		(_cor0)
	    let <W1> =
		%% Line 1482
		apply 'close_input'/1
		    (_cor0)
	    in  let <F> =
		    %% Line 1483
		    ( fun (_cor5) ->
			  case _cor5 of
			    <IFun>
				when call 'erlang':'is_function'
				      (_cor5) ->
				%% Line 1484
				apply IFun
				    ('close')
			    %% Line 1485
			    <{Fd,FileName}> when 'true' ->
				let <_X_> =
				    %% Line 1486
				    ( call 'file':'close'
					  (Fd)
				      -| ['result_not_wanted'] )
				in  %% Line 1487
				    ( call 'file':'delete'
					  (FileName)
				      -| ['result_not_wanted'] )
			    %% Line 1488
			    <FileName> when 'true' ->
				%% Line 1489
				( call 'file':'delete'
				      (FileName)
				  -| ['result_not_wanted'] )
			  end
		      -| [{'id',{0,0,'-cleanup/1-fun-0-'}}] )
		in  %% Line 1491
		    ( case W1 of
			( <( {'w',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec64,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}
			     -| ['compiler_generated'] )> when 'true' ->
			      call 'lists':'foreach'
				  (F, _rec64)
			  -| ['compiler_generated'] )
			( <_cor29> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','w'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'close_input'/1 =
    %% Line 1493
    fun (_cor0) ->
	case _cor0 of
	  <W = {'w',_cor4,_cor5,_cor6,In,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}>
	      when call 'erlang':'is_function'
		    (In) ->
	      do  catch
		      %% Line 1494
		      apply In
			  ('close')
		  %% Line 1495
		  call 'erlang':'setelement'
		      (5, W, 'undefined')
	  %% Line 1496
	  <W = {'w',_cor42,_cor43,_cor44,'undefined',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}> when 'true' ->
	      %% Line 1497
	      W
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'close_input',1}}] )
	    -| ['compiler_generated'] )
	end
'close_out'/1 =
    %% Line 1499
    fun (_cor0) ->
	case _cor0 of
	  <{'w',_cor2,_cor3,_cor4,_cor5,Out,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}>
	      when call 'erlang':'is_function'
		    (Out) ->
	      catch
		  %% Line 1500
		  apply Out
		      ('close')
	  %% Line 1501
	  <_cor20> when 'true' ->
	      %% Line 1502
	      'ok'
	end
'close_file'/2 =
    %% Line 1504
    fun (_cor1,_cor0) ->
	%% Line 1505
	( case _cor0 of
	    ( <( {'w',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_rec66,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keyfind'
			   (_cor1, 1, _rec66) of
		    <{_cor33,FileName}>
			when call 'erlang':'=:='
			      (_cor33,
			       _cor1) ->
			%% Line 1507
			case call 'file':'close'
				 (_cor1) of
			  %% Line 1508
			  <'ok'> when 'true' ->
			      let <_cor7> =
				  %% Line 1509
				  call 'lists':'keydelete'
				      (_cor1, 1, _rec66)
			      in  let <_rec67> =
				      %% Line 1509
				      [FileName|_cor7]
				  in  %% Line 1509
				      call 'erlang':'setelement'
					  (9, _cor0, _rec67)
			  %% Line 1510
			  <Error> when 'true' ->
			      %% Line 1511
			      apply 'file_error'/3
				  (FileName, Error, _cor0)
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','w'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'file_rterms'/2 =
    %% Line 1518
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'no_file',Files> when 'true' ->
	      %% Line 1519
	      ( fun (_cor4) ->
		    case _cor4 of
		      <'close'> when 'true' ->
			  %% Line 1520
			  'ok'
		      %% Line 1521
		      <'read'>
			  when call 'erlang':'=:='
				(Files,
				 []) ->
			  %% Line 1522
			  'end_of_input'
		      %% Line 1523
		      <'read'> when 'true' ->
			  %% Line 1524
			  case Files of
			    <[F|Fs]> when 'true' ->
				%% Line 1525
				case call 'file':'open'
					 (F, ['read'|['compressed']]) of
				  %% Line 1526
				  <{'ok',Fd}> when 'true' ->
				      %% Line 1527
				      apply 'file_rterms2'/5
					  (Fd, [], 0, F, Fs)
				  %% Line 1528
				  <{'error',Reason}> when 'true' ->
				      %% Line 1529
				      {'error',{'file_error',F,Reason}}
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_cor5})
			      -| [{'function_name',{'-file_rterms/2-fun-0-',1}}] )
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-file_rterms/2-fun-0-'}}] )
	  %% Line 1532
	  <{Fd,FileName},Files> when 'true' ->
	      %% Line 1533
	      ( fun (_cor6) ->
		    case _cor6 of
		      <'close'> when 'true' ->
			  %% Line 1534
			  call 'file':'close'
			      (Fd)
		      %% Line 1535
		      <'read'> when 'true' ->
			  %% Line 1536
			  apply 'file_rterms2'/5
			      (Fd, [], 0, FileName, Files)
		      ( <_cor7> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_cor7})
			      -| [{'function_name',{'-file_rterms/2-fun-1-',1}}] )
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-file_rterms/2-fun-1-'}}] )
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'file_rterms',2}}] )
	    -| ['compiler_generated'] )
	end
'file_rterms2'/5 =
    %% Line 1539
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fd,L,LSz,FileName,Files>
	      when call 'erlang':'<'
		    (LSz,
		     16384) ->
	      %% Line 1540
	      case call 'io':'read'
		       (Fd, '') of
		%% Line 1541
		<{'ok',Term}> when 'true' ->
		    let <B> =
			%% Line 1542
			call 'erlang':'term_to_binary'
			    (Term)
		    in  let <_cor6> =
			    %% Line 1543
			    call 'erlang':'byte_size'
				(B)
			in  let <_cor7> =
				%% Line 1543
				call 'erlang':'+'
				    (LSz, _cor6)
			    in  %% Line 1543
				apply 'file_rterms2'/5
				    (Fd, [B|L], _cor7, FileName, Files)
		%% Line 1544
		<'eof'> when 'true' ->
		    let <_X_> =
			%% Line 1545
			( call 'file':'close'
			      (Fd)
			  -| ['result_not_wanted'] )
		    in  let <_cor10> =
			    %% Line 1546
			    call 'lists':'reverse'
				(L)
			in  let <_cor9> =
				%% Line 1546
				apply 'file_rterms'/2
				    ('no_file', Files)
			    in  %% Line 1546
				{_cor10,_cor9}
		%% Line 1547
		<_X_Error> when 'true' ->
		    let <_X_> =
			%% Line 1548
			( call 'file':'close'
			      (Fd)
			  -| ['result_not_wanted'] )
		    in  %% Line 1549
			{'error',{'bad_term',FileName}}
	      end
	  %% Line 1551
	  <Fd,L,_X_LSz,FileName,Files> when 'true' ->
	      let <_cor14> =
		  %% Line 1552
		  call 'lists':'reverse'
		      (L)
	      in  let <_cor13> =
		      %% Line 1552
		      apply 'file_rterms'/2
			  ({Fd,FileName}, Files)
		  in  %% Line 1552
		      {_cor14,_cor13}
	end
'file_wterms'/3 =
    %% Line 1554
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1555
	( fun (_cor6) ->
	      case _cor6 of
		<'close'>
		    when call 'erlang':'=:='
			  (_cor2,
			   'name') ->
		    %% Line 1556
		    'ok'
		%% Line 1557
		<'close'> when 'true' ->
		    %% Line 1558
		    case _cor2 of
		      <{'fd',Fd}> when 'true' ->
			  %% Line 1559
			  call 'file':'close'
			      (Fd)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 1560
		<L>
		    when call 'erlang':'=:='
			  (_cor2,
			   'name') ->
		    %% Line 1561
		    case call 'file':'open'
			     (_cor1, _cor0) of
		      %% Line 1562
		      <{'ok',Fd}> when 'true' ->
			  %% Line 1563
			  apply 'write_terms'/4
			      (Fd, _cor1, L, _cor0)
		      %% Line 1564
		      <{'error',Reason}> when 'true' ->
			  %% Line 1565
			  {'error',{'file_error',_cor1,Reason}}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 1567
		<L> when 'true' ->
		    %% Line 1568
		    case _cor2 of
		      <{'fd',Fd}> when 'true' ->
			  %% Line 1569
			  apply 'write_terms'/4
			      (Fd, _cor1, L, _cor0)
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
	      end
	  -| [{'id',{0,0,'-file_wterms/3-fun-0-'}}] )
'write_terms'/4 =
    %% Line 1572
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fd,F,[B|Bs],Args> when 'true' ->
	      let <_cor4> =
		  %% Line 1573
		  call 'erlang':'binary_to_term'
		      (B)
	      in  %% Line 1573
		  case call 'io':'request'
			   (Fd, {'format',[126|[112|[46|[126|[110]]]]],[_cor4|[]]}) of
		    %% Line 1574
		    <'ok'> when 'true' ->
			%% Line 1575
			apply 'write_terms'/4
			    (Fd, F, Bs, Args)
		    %% Line 1576
		    <{'error',Reason}> when 'true' ->
			let <_X_> =
			    %% Line 1577
			    ( call 'file':'close'
				  (Fd)
			      -| ['result_not_wanted'] )
			in  %% Line 1578
			    {'error',{'file_error',F,Reason}}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1580
	  <Fd,F,[],Args> when 'true' ->
	      %% Line 1581
	      apply 'file_wterms'/3
		  ({'fd',Fd}, F, Args)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'write_terms',4}}] )
	    -| ['compiler_generated'] )
	end
'fun_rterms'/1 =
    %% Line 1583
    fun (_cor0) ->
	%% Line 1584
	( fun (_cor8) ->
	      case _cor8 of
		<'close'> when 'true' ->
		    %% Line 1585
		    apply _cor0
			('close')
		%% Line 1586
		<'read'> when 'true' ->
		    %% Line 1587
		    case apply _cor0
			     ('read') of
		      %% Line 1588
		      <{Ts,NInFun}>
			  when try
				let <_cor1> =
				    call 'erlang':'is_list'
					(Ts)
				in  let <_cor2> =
					%% Line 1589
					call 'erlang':'is_function'
					    (NInFun)
				    in  let <_cor3> =
					    %% Line 1590
					    call 'erlang':'is_function'
						(NInFun, 1)
					in  let <_cor4> =
						call 'erlang':'and'
						    (_cor2, _cor3)
					    in  call 'erlang':'and'
						    (_cor1, _cor4)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  let <_cor6> =
			      %% Line 1591
			      apply 'to_bin'/2
				  (Ts, [])
			  in  let <_cor5> =
				  %% Line 1591
				  apply 'fun_rterms'/1
				      (NInFun)
			      in  %% Line 1591
				  {_cor6,_cor5}
		      %% Line 1592
		      <Else> when 'true' ->
			  %% Line 1593
			  Else
		    end
		( <_cor9> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor9})
			-| [{'function_name',{'-fun_rterms/1-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-fun_rterms/1-fun-0-'}}] )
'fun_wterms'/1 =
    %% Line 1597
    fun (_cor0) ->
	%% Line 1598
	( fun (_cor5) ->
	      case _cor5 of
		<'close'> when 'true' ->
		    %% Line 1599
		    apply _cor0
			('close')
		%% Line 1600
		<L> when 'true' ->
		    let <_cor1> =
			%% Line 1601
			apply 'wterms_arg'/1
			    (L)
		    in  %% Line 1601
			case apply _cor0
				 (_cor1) of
			  %% Line 1602
			  <NOutFun>
			      when try
				    let <_cor2> =
					call 'erlang':'is_function'
					    (NOutFun)
				    in  let <_cor3> =
					    call 'erlang':'is_function'
						(NOutFun, 1)
					in  call 'erlang':'and'
						(_cor2, _cor3)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 1603
			      apply 'fun_wterms'/1
				  (NOutFun)
			  %% Line 1604
			  <Else> when 'true' ->
			      %% Line 1605
			      Else
			end
	      end
	  -| [{'id',{0,0,'-fun_wterms/1-fun-0-'}}] )
'to_bin'/2 =
    %% Line 1609
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],L> when 'true' ->
	      let <_cor2> =
		  %% Line 1610
		  call 'erlang':'term_to_binary'
		      (E)
	      in  %% Line 1610
		  apply 'to_bin'/2
		      (Es, [_cor2|L])
	  %% Line 1611
	  <[],L> when 'true' ->
	      %% Line 1612
	      call 'lists':'reverse'
		  (L)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'to_bin',2}}] )
	    -| ['compiler_generated'] )
	end
'wterms_arg'/1 =
    %% Line 1614
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1615
	      apply 'to_term'/2
		  (L, [])
	  %% Line 1616
	  <Value> when 'true' ->
	      %% Line 1617
	      Value
	end
'to_term'/2 =
    %% Line 1619
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[B|Bs],L> when 'true' ->
	      let <_cor2> =
		  %% Line 1620
		  call 'erlang':'binary_to_term'
		      (B)
	      in  %% Line 1620
		  apply 'to_term'/2
		      (Bs, [_cor2|L])
	  %% Line 1621
	  <[],L> when 'true' ->
	      %% Line 1622
	      call 'lists':'reverse'
		  (L)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'to_term',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('file_sorter')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('file_sorter', _cor0)
end