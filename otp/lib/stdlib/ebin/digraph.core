module 'digraph' ['add_edge'/3,
		  'add_edge'/4,
		  'add_edge'/5,
		  'add_vertex'/1,
		  'add_vertex'/2,
		  'add_vertex'/3,
		  'del_edge'/2,
		  'del_edges'/2,
		  'del_path'/3,
		  'del_vertex'/2,
		  'del_vertices'/2,
		  'delete'/1,
		  'edge'/2,
		  'edges'/1,
		  'edges'/2,
		  'get_cycle'/2,
		  'get_path'/3,
		  'get_short_cycle'/2,
		  'get_short_path'/3,
		  'in_degree'/2,
		  'in_edges'/2,
		  'in_neighbours'/2,
		  'info'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'new'/0,
		  'new'/1,
		  'no_edges'/1,
		  'no_vertices'/1,
		  'out_degree'/2,
		  'out_edges'/2,
		  'out_neighbours'/2,
		  'sink_vertices'/1,
		  'source_vertices'/1,
		  'vertex'/2,
		  'vertices'/1]
    attributes [%% Line 39
		'export_type' =
		    %% Line 39
		    [{'graph',0}|[{'d_type',0}|[{'vertex',0}|[{'edge',0}]]]],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','digraph'},[{'typed_record_field',{'record_field',41,{'atom',41,'vtab'},{'atom',41,'notable'}},{'remote_type',41,[{'atom',41,'ets'}|[{'atom',41,'tab'}|[[]]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'etab'},{'atom',42,'notable'}},{'remote_type',42,[{'atom',42,'ets'}|[{'atom',42,'tab'}|[[]]]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'ntab'},{'atom',43,'notable'}},{'remote_type',43,[{'atom',43,'ets'}|[{'atom',43,'tab'}|[[]]]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'cyclic'},{'atom',44,'true'}},{'type',44,'boolean',[]}}]]]],[]}],
		%% Line 46
		'opaque' =
		    %% Line 46
		    [{'graph',{'type',46,'record',[{'atom',46,'digraph'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'edge',{'type',48,'term',[]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'label',{'type',49,'term',[]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'vertex',{'type',50,'term',[]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'add_edge_err_rsn',{'type',52,'union',[{'type',52,'tuple',[{'atom',52,'bad_edge'}|[{'ann_type',52,[{'var',52,'Path'}|[{'type',52,'list',[{'type',52,'vertex',[]}]}]]}]]}|[{'type',53,'tuple',[{'atom',53,'bad_vertex'}|[{'ann_type',53,[{'var',53,'V'}|[{'type',53,'vertex',[]}]]}]]}]]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'d_protection',{'type',62,'union',[{'atom',62,'private'}|[{'atom',62,'protected'}]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'d_cyclicity',{'type',63,'union',[{'atom',63,'acyclic'}|[{'atom',63,'cyclic'}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'d_type',{'type',64,'union',[{'type',64,'d_cyclicity',[]}|[{'type',64,'d_protection',[]}]]},[]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'new',0},[{'type',66,'fun',[{'type',66,'product',[]}|[{'type',66,'graph',[]}]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'new',1},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Type'}]}|[{'type',70,'graph',[]}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Type'}|[{'type',71,'list',[{'type',71,'d_type',[]}]}]]]]}]]]}]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'set_type',2},[{'type',105,'fun',[{'type',105,'product',[{'type',105,'list',[{'type',105,'tuple',[{'atom',105,'cyclic'}|[{'type',105,'boolean',[]}]]}]}|[{'type',105,'graph',[]}]]}|[{'type',105,'graph',[]}]]}]}],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'delete',1},[{'type',114,'bounded_fun',[{'type',114,'fun',[{'type',114,'product',[{'var',114,'G'}]}|[{'atom',114,'true'}]]}|[[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'G'}|[{'type',115,'graph',[]}]]]]}]]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'info',1},[{'type',122,'bounded_fun',[{'type',122,'fun',[{'type',122,'product',[{'var',122,'G'}]}|[{'var',122,'InfoList'}]]}|[[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'G'}|[{'type',123,'graph',[]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'InfoList'}|[{'type',124,'list',[{'type',124,'union',[{'type',124,'tuple',[{'atom',124,'cyclicity'}|[{'ann_type',124,[{'var',124,'Cyclicity'}|[{'type',124,'d_cyclicity',[]}]]}]]}|[{'type',125,'tuple',[{'atom',125,'memory'}|[{'ann_type',125,[{'var',125,'NoWords'}|[{'type',125,'non_neg_integer',[]}]]}]]}|[{'type',126,'tuple',[{'atom',126,'protection'}|[{'ann_type',126,[{'var',126,'Protection'}|[{'type',126,'d_protection',[]}]]}]]}]]]}]}]]]]}]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'add_vertex',1},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'G'}]}|[{'type',140,'vertex',[]}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'G'}|[{'type',141,'graph',[]}]]]]}]]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'add_vertex',2},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'G'}|[{'var',146,'V'}]]}|[{'type',146,'vertex',[]}]]}|[[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'G'}|[{'type',147,'graph',[]}]]]]}|[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'V'}|[{'type',148,'vertex',[]}]]]]}]]]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'add_vertex',3},[{'type',153,'bounded_fun',[{'type',153,'fun',[{'type',153,'product',[{'var',153,'G'}|[{'var',153,'V'}|[{'var',153,'Label'}]]]}|[{'type',153,'vertex',[]}]]}|[[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'G'}|[{'type',154,'graph',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'V'}|[{'type',155,'vertex',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Label'}|[{'type',156,'label',[]}]]]]}]]]]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'del_vertex',2},[{'type',161,'bounded_fun',[{'type',161,'fun',[{'type',161,'product',[{'var',161,'G'}|[{'var',161,'V'}]]}|[{'atom',161,'true'}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'G'}|[{'type',162,'graph',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'V'}|[{'type',163,'vertex',[]}]]]]}]]]]}]}],
		%% Line 168
		'spec' =
		    %% Line 168
		    [{{'del_vertices',2},[{'type',168,'bounded_fun',[{'type',168,'fun',[{'type',168,'product',[{'var',168,'G'}|[{'var',168,'Vertices'}]]}|[{'atom',168,'true'}]]}|[[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'G'}|[{'type',169,'graph',[]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'Vertices'}|[{'type',170,'list',[{'type',170,'vertex',[]}]}]]]]}]]]]}]}],
		%% Line 175
		'spec' =
		    %% Line 175
		    [{{'vertex',2},[{'type',175,'bounded_fun',[{'type',175,'fun',[{'type',175,'product',[{'var',175,'G'}|[{'var',175,'V'}]]}|[{'type',175,'union',[{'type',175,'tuple',[{'var',175,'V'}|[{'var',175,'Label'}]]}|[{'atom',175,'false'}]]}]]}|[[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'G'}|[{'type',176,'graph',[]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'V'}|[{'type',177,'vertex',[]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Label'}|[{'type',178,'label',[]}]]]]}]]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'no_vertices',1},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'G'}]}|[{'type',186,'non_neg_integer',[]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'G'}|[{'type',187,'graph',[]}]]]]}]]]}]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'vertices',1},[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'G'}]}|[{'var',192,'Vertices'}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'G'}|[{'type',193,'graph',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Vertices'}|[{'type',194,'list',[{'type',194,'vertex',[]}]}]]]]}]]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'source_vertices',1},[{'type',199,'fun',[{'type',199,'product',[{'type',199,'graph',[]}]}|[{'type',199,'list',[{'type',199,'vertex',[]}]}]]}]}],
		%% Line 204
		'spec' =
		    %% Line 204
		    [{{'sink_vertices',1},[{'type',204,'fun',[{'type',204,'product',[{'type',204,'graph',[]}]}|[{'type',204,'list',[{'type',204,'vertex',[]}]}]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'in_degree',2},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'G'}|[{'var',209,'V'}]]}|[{'type',209,'non_neg_integer',[]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'G'}|[{'type',210,'graph',[]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'V'}|[{'type',211,'vertex',[]}]]]]}]]]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'in_neighbours',2},[{'type',216,'bounded_fun',[{'type',216,'fun',[{'type',216,'product',[{'var',216,'G'}|[{'var',216,'V'}]]}|[{'var',216,'Vertex'}]]}|[[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'G'}|[{'type',217,'graph',[]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'V'}|[{'type',218,'vertex',[]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Vertex'}|[{'type',219,'list',[{'type',219,'vertex',[]}]}]]]]}]]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'in_edges',2},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'G'}|[{'var',226,'V'}]]}|[{'var',226,'Edges'}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'G'}|[{'type',227,'graph',[]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'V'}|[{'type',228,'vertex',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Edges'}|[{'type',229,'list',[{'type',229,'edge',[]}]}]]]]}]]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'out_degree',2},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'G'}|[{'var',234,'V'}]]}|[{'type',234,'non_neg_integer',[]}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'G'}|[{'type',235,'graph',[]}]]]]}|[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'V'}|[{'type',236,'vertex',[]}]]]]}]]]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'out_neighbours',2},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'G'}|[{'var',241,'V'}]]}|[{'var',241,'Vertices'}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'G'}|[{'type',242,'graph',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'V'}|[{'type',243,'vertex',[]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Vertices'}|[{'type',244,'list',[{'type',244,'vertex',[]}]}]]]]}]]]]]}]}],
		%% Line 251
		'spec' =
		    %% Line 251
		    [{{'out_edges',2},[{'type',251,'bounded_fun',[{'type',251,'fun',[{'type',251,'product',[{'var',251,'G'}|[{'var',251,'V'}]]}|[{'var',251,'Edges'}]]}|[[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'G'}|[{'type',252,'graph',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'V'}|[{'type',253,'vertex',[]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'Edges'}|[{'type',254,'list',[{'type',254,'edge',[]}]}]]]]}]]]]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'add_edge',3},[{'type',259,'bounded_fun',[{'type',259,'fun',[{'type',259,'product',[{'var',259,'G'}|[{'var',259,'V1'}|[{'var',259,'V2'}]]]}|[{'type',259,'union',[{'type',259,'edge',[]}|[{'type',259,'tuple',[{'atom',259,'error'}|[{'type',259,'add_edge_err_rsn',[]}]]}]]}]]}|[[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'G'}|[{'type',260,'graph',[]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'V1'}|[{'type',261,'vertex',[]}]]]]}|[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'V2'}|[{'type',262,'vertex',[]}]]]]}]]]]]}]}],
		%% Line 267
		'spec' =
		    %% Line 267
		    [{{'add_edge',4},[{'type',267,'bounded_fun',[{'type',267,'fun',[{'type',267,'product',[{'var',267,'G'}|[{'var',267,'V1'}|[{'var',267,'V2'}|[{'var',267,'Label'}]]]]}|[{'type',267,'union',[{'type',267,'edge',[]}|[{'type',267,'tuple',[{'atom',267,'error'}|[{'type',267,'add_edge_err_rsn',[]}]]}]]}]]}|[[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'G'}|[{'type',268,'graph',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'V1'}|[{'type',269,'vertex',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'V2'}|[{'type',270,'vertex',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Label'}|[{'type',271,'label',[]}]]]]}]]]]]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'add_edge',5},[{'type',276,'bounded_fun',[{'type',276,'fun',[{'type',276,'product',[{'var',276,'G'}|[{'var',276,'E'}|[{'var',276,'V1'}|[{'var',276,'V2'}|[{'var',276,'Label'}]]]]]}|[{'type',276,'union',[{'type',276,'edge',[]}|[{'type',276,'tuple',[{'atom',276,'error'}|[{'type',276,'add_edge_err_rsn',[]}]]}]]}]]}|[[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'G'}|[{'type',277,'graph',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'E'}|[{'type',278,'edge',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'V1'}|[{'type',279,'vertex',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'V2'}|[{'type',280,'vertex',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Label'}|[{'type',281,'label',[]}]]]]}]]]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'del_edge',2},[{'type',286,'bounded_fun',[{'type',286,'fun',[{'type',286,'product',[{'var',286,'G'}|[{'var',286,'E'}]]}|[{'atom',286,'true'}]]}|[[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'G'}|[{'type',287,'graph',[]}]]]]}|[{'type',288,'constraint',[{'atom',288,'is_subtype'}|[[{'var',288,'E'}|[{'type',288,'edge',[]}]]]]}]]]]}]}],
		%% Line 293
		'spec' =
		    %% Line 293
		    [{{'del_edges',2},[{'type',293,'bounded_fun',[{'type',293,'fun',[{'type',293,'product',[{'var',293,'G'}|[{'var',293,'Edges'}]]}|[{'atom',293,'true'}]]}|[[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'G'}|[{'type',294,'graph',[]}]]]]}|[{'type',295,'constraint',[{'atom',295,'is_subtype'}|[[{'var',295,'Edges'}|[{'type',295,'list',[{'type',295,'edge',[]}]}]]]]}]]]]}]}],
		%% Line 300
		'spec' =
		    %% Line 300
		    [{{'no_edges',1},[{'type',300,'bounded_fun',[{'type',300,'fun',[{'type',300,'product',[{'var',300,'G'}]}|[{'type',300,'non_neg_integer',[]}]]}|[[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'G'}|[{'type',301,'graph',[]}]]]]}]]]}]}],
		%% Line 306
		'spec' =
		    %% Line 306
		    [{{'edges',1},[{'type',306,'bounded_fun',[{'type',306,'fun',[{'type',306,'product',[{'var',306,'G'}]}|[{'var',306,'Edges'}]]}|[[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'G'}|[{'type',307,'graph',[]}]]]]}|[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'Edges'}|[{'type',308,'list',[{'type',308,'edge',[]}]}]]]]}]]]]}]}],
		%% Line 313
		'spec' =
		    %% Line 313
		    [{{'edges',2},[{'type',313,'bounded_fun',[{'type',313,'fun',[{'type',313,'product',[{'var',313,'G'}|[{'var',313,'V'}]]}|[{'var',313,'Edges'}]]}|[[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'G'}|[{'type',314,'graph',[]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'V'}|[{'type',315,'vertex',[]}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Edges'}|[{'type',316,'list',[{'type',316,'edge',[]}]}]]]]}]]]]]}]}],
		%% Line 322
		'spec' =
		    %% Line 322
		    [{{'edge',2},[{'type',322,'bounded_fun',[{'type',322,'fun',[{'type',322,'product',[{'var',322,'G'}|[{'var',322,'E'}]]}|[{'type',322,'union',[{'type',322,'tuple',[{'var',322,'E'}|[{'var',322,'V1'}|[{'var',322,'V2'}|[{'var',322,'Label'}]]]]}|[{'atom',322,'false'}]]}]]}|[[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'G'}|[{'type',323,'graph',[]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'E'}|[{'type',324,'edge',[]}]]]]}|[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'V1'}|[{'type',325,'vertex',[]}]]]]}|[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'V2'}|[{'type',326,'vertex',[]}]]]]}|[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'Label'}|[{'type',327,'label',[]}]]]]}]]]]]]]}]}],
		%% Line 338
		'spec' =
		    %% Line 338
		    [{{'new_edge_id',1},[{'type',338,'fun',[{'type',338,'product',[{'type',338,'graph',[]}]}|[{'type',338,'edge',[]}]]}]}],
		%% Line 350
		'spec' =
		    %% Line 350
		    [{{'new_vertex_id',1},[{'type',350,'fun',[{'type',350,'product',[{'type',350,'graph',[]}]}|[{'type',350,'vertex',[]}]]}]}],
		%% Line 370
		'spec' =
		    %% Line 370
		    [{{'do_add_vertex',2},[{'type',370,'fun',[{'type',370,'product',[{'type',370,'tuple',[{'type',370,'vertex',[]}|[{'type',370,'label',[]}]]}|[{'type',370,'graph',[]}]]}|[{'type',370,'vertex',[]}]]}]}],
		%% Line 429
		'spec' =
		    %% Line 429
		    [{{'rm_edges',2},[{'type',429,'fun',[{'type',429,'product',[{'type',429,'nonempty_list',[{'type',429,'vertex',[]}]}|[{'type',429,'graph',[]}]]}|[{'atom',429,'true'}]]}]}],
		%% Line 436
		'spec' =
		    %% Line 436
		    [{{'rm_edge',3},[{'type',436,'fun',[{'type',436,'product',[{'type',436,'vertex',[]}|[{'type',436,'vertex',[]}|[{'type',436,'graph',[]}]]]}|[{'atom',436,'ok'}]]}]}],
		%% Line 455
		'spec' =
		    %% Line 455
		    [{{'do_add_edge',2},[{'type',455,'fun',[{'type',455,'product',[{'type',455,'tuple',[{'type',455,'edge',[]}|[{'type',455,'vertex',[]}|[{'type',455,'vertex',[]}|[{'type',455,'label',[]}]]]]}|[{'type',455,'graph',[]}]]}|[{'type',456,'union',[{'type',456,'edge',[]}|[{'type',456,'tuple',[{'atom',456,'error'}|[{'type',456,'add_edge_err_rsn',[]}]]}]]}]]}]}],
		%% Line 483
		'spec' =
		    %% Line 483
		    [{{'do_insert_edge',5},[{'type',483,'fun',[{'type',483,'product',[{'type',483,'edge',[]}|[{'type',483,'vertex',[]}|[{'type',483,'vertex',[]}|[{'type',483,'label',[]}|[{'type',483,'graph',[]}]]]]]}|[{'type',483,'edge',[]}]]}]}],
		%% Line 490
		'spec' =
		    %% Line 490
		    [{{'acyclic_add_edge',5},[{'type',490,'fun',[{'type',490,'product',[{'type',490,'edge',[]}|[{'type',490,'vertex',[]}|[{'type',490,'vertex',[]}|[{'type',490,'label',[]}|[{'type',490,'graph',[]}]]]]]}|[{'type',491,'union',[{'type',491,'edge',[]}|[{'type',491,'tuple',[{'atom',491,'error'}|[{'type',491,'tuple',[{'atom',491,'bad_edge'}|[{'type',491,'list',[{'type',491,'vertex',[]}]}]]}]]}]]}]]}]}],
		%% Line 505
		'spec' =
		    %% Line 505
		    [{{'del_path',3},[{'type',505,'bounded_fun',[{'type',505,'fun',[{'type',505,'product',[{'var',505,'G'}|[{'var',505,'V1'}|[{'var',505,'V2'}]]]}|[{'atom',505,'true'}]]}|[[{'type',506,'constraint',[{'atom',506,'is_subtype'}|[[{'var',506,'G'}|[{'type',506,'graph',[]}]]]]}|[{'type',507,'constraint',[{'atom',507,'is_subtype'}|[[{'var',507,'V1'}|[{'type',507,'vertex',[]}]]]]}|[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'V2'}|[{'type',508,'vertex',[]}]]]]}]]]]]}]}],
		%% Line 527
		'spec' =
		    %% Line 527
		    [{{'get_cycle',2},[{'type',527,'bounded_fun',[{'type',527,'fun',[{'type',527,'product',[{'var',527,'G'}|[{'var',527,'V'}]]}|[{'type',527,'union',[{'var',527,'Vertices'}|[{'atom',527,'false'}]]}]]}|[[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'G'}|[{'type',528,'graph',[]}]]]]}|[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'V'}|[{'type',529,'vertex',[]}]]]]}|[{'type',530,'constraint',[{'atom',530,'is_subtype'}|[[{'var',530,'Vertices'}|[{'type',530,'nonempty_list',[{'type',530,'vertex',[]}]}]]]]}]]]]]}]}],
		%% Line 548
		'spec' =
		    %% Line 548
		    [{{'get_path',3},[{'type',548,'bounded_fun',[{'type',548,'fun',[{'type',548,'product',[{'var',548,'G'}|[{'var',548,'V1'}|[{'var',548,'V2'}]]]}|[{'type',548,'union',[{'var',548,'Vertices'}|[{'atom',548,'false'}]]}]]}|[[{'type',549,'constraint',[{'atom',549,'is_subtype'}|[[{'var',549,'G'}|[{'type',549,'graph',[]}]]]]}|[{'type',550,'constraint',[{'atom',550,'is_subtype'}|[[{'var',550,'V1'}|[{'type',550,'vertex',[]}]]]]}|[{'type',551,'constraint',[{'atom',551,'is_subtype'}|[[{'var',551,'V2'}|[{'type',551,'vertex',[]}]]]]}|[{'type',552,'constraint',[{'atom',552,'is_subtype'}|[[{'var',552,'Vertices'}|[{'type',552,'nonempty_list',[{'type',552,'vertex',[]}]}]]]]}]]]]]]}]}],
		%% Line 587
		'spec' =
		    %% Line 587
		    [{{'get_short_cycle',2},[{'type',587,'bounded_fun',[{'type',587,'fun',[{'type',587,'product',[{'var',587,'G'}|[{'var',587,'V'}]]}|[{'type',587,'union',[{'var',587,'Vertices'}|[{'atom',587,'false'}]]}]]}|[[{'type',588,'constraint',[{'atom',588,'is_subtype'}|[[{'var',588,'G'}|[{'type',588,'graph',[]}]]]]}|[{'type',589,'constraint',[{'atom',589,'is_subtype'}|[[{'var',589,'V'}|[{'type',589,'vertex',[]}]]]]}|[{'type',590,'constraint',[{'atom',590,'is_subtype'}|[[{'var',590,'Vertices'}|[{'type',590,'nonempty_list',[{'type',590,'vertex',[]}]}]]]]}]]]]]}]}],
		%% Line 600
		'spec' =
		    %% Line 600
		    [{{'get_short_path',3},[{'type',600,'bounded_fun',[{'type',600,'fun',[{'type',600,'product',[{'var',600,'G'}|[{'var',600,'V1'}|[{'var',600,'V2'}]]]}|[{'type',600,'union',[{'var',600,'Vertices'}|[{'atom',600,'false'}]]}]]}|[[{'type',601,'constraint',[{'atom',601,'is_subtype'}|[[{'var',601,'G'}|[{'type',601,'graph',[]}]]]]}|[{'type',602,'constraint',[{'atom',602,'is_subtype'}|[[{'var',602,'V1'}|[{'type',602,'vertex',[]}]]]]}|[{'type',603,'constraint',[{'atom',603,'is_subtype'}|[[{'var',603,'V2'}|[{'type',603,'vertex',[]}]]]]}|[{'type',604,'constraint',[{'atom',604,'is_subtype'}|[[{'var',604,'Vertices'}|[{'type',604,'nonempty_list',[{'type',604,'vertex',[]}]}]]]]}]]]]]]}]}]]
'new'/0 =
    %% Line 68
    fun () ->
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 73
    fun (_cor0) ->
	%% Line 74
	case apply 'check_type'/3
		 (_cor0, 'protected', []) of
	  %% Line 75
	  <{Access,Ts}> when 'true' ->
	      let <V> =
		  %% Line 76
		  call 'ets':'new'
		      ('vertices', ['set'|[Access|[]]])
	      in  let <E> =
		      %% Line 77
		      call 'ets':'new'
			  ('edges', ['set'|[Access|[]]])
		  in  let <N> =
			  %% Line 78
			  call 'ets':'new'
			      ('neighbours', ['bag'|[Access|[]]])
		      in  do  %% Line 79
			      call 'ets':'insert'
				  (N, [{'$vid',0}|[{'$eid',0}]])
			      %% Line 80
			      apply 'set_type'/2
				  (Ts, {'digraph',V,E,N,'true'})
	  %% Line 81
	  <'error'> when 'true' ->
	      %% Line 82
	      call 'erlang':'error'
		  ('badarg')
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'check_type'/3 =
    %% Line 91
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <['acyclic'|Ts],A,L> when 'true' ->
	      %% Line 92
	      apply 'check_type'/3
		  (Ts, A, [{'cyclic','false'}|L])
	  %% Line 93
	  <['cyclic'|Ts],A,L> when 'true' ->
	      %% Line 94
	      apply 'check_type'/3
		  (Ts, A, [{'cyclic','true'}|L])
	  %% Line 95
	  <['protected'|Ts],_cor6,L> when 'true' ->
	      %% Line 96
	      apply 'check_type'/3
		  (Ts, 'protected', L)
	  %% Line 97
	  <['private'|Ts],_cor7,L> when 'true' ->
	      %% Line 98
	      apply 'check_type'/3
		  (Ts, 'private', L)
	  %% Line 99
	  <[],A,L> when 'true' ->
	      {A,L}
	  %% Line 100
	  <_cor8,_cor9,_cor10> when 'true' ->
	      'error'
	end
'set_type'/2 =
    %% Line 107
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'cyclic',V}|Ks],G> when 'true' ->
	      %% Line 108
	      case G of
		<{'digraph',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (5, G, V)
		    in  apply 'set_type'/2
			    (Ks, _cor4)
		( <_cor11> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','digraph'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 109
	  <[],G> when 'true' ->
	      G
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'set_type',2}}] )
	    -| ['compiler_generated'] )
	end
'delete'/1 =
    %% Line 117
    fun (_cor0) ->
	%% Line 118
	( case _cor0 of
	    ( <( {'digraph',_rec1,_cor8,_cor9,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  call 'ets':'delete'
			  (_rec1)
		      do  %% Line 119
			  call 'ets':'delete'
			      (_cor8)
			  %% Line 120
			  call 'ets':'delete'
			      (_cor9)
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'info'/1 =
    %% Line 128
    fun (_cor0) ->
	%% Line 129
	( case _cor0 of
	    ( <( {'digraph',_rec4,_cor22,_cor23,_cor24}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor13> =
		      %% Line 132
		      case _cor24 of
			%% Line 133
			<'true'> when 'true' ->
			    'cyclic'
			%% Line 134
			<'false'> when 'true' ->
			    'acyclic'
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		  in  let <Protection> =
			  %% Line 136
			  call 'ets':'info'
			      (_rec4, 'protection')
		      in  let <_cor18> =
			      %% Line 137
			      call 'ets':'info'
				  (_rec4, 'memory')
			  in  let <_cor17> =
				  %% Line 137
				  call 'ets':'info'
				      (_cor22, 'memory')
			      in  let <_cor19> =
				      %% Line 137
				      call 'erlang':'+'
					  (_cor18, _cor17)
				  in  let <_cor16> =
					  %% Line 137
					  call 'ets':'info'
					      (_cor23, 'memory')
				      in  let <Memory> =
					      %% Line 137
					      call 'erlang':'+'
						  (_cor19, _cor16)
					  in  %% Line 138
					      [{'cyclicity',_cor13}|[{'memory',Memory}|[{'protection',Protection}|[]]]]
	      -| ['compiler_generated'] )
	    ( <_cor25> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_vertex'/1 =
    %% Line 143
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 144
	    apply 'new_vertex_id'/1
		(_cor0)
	in  %% Line 144
	    apply 'do_add_vertex'/2
		({_cor1,[]}, _cor0)
'add_vertex'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	%% Line 151
	apply 'do_add_vertex'/2
	    ({_cor0,[]}, _cor1)
'add_vertex'/3 =
    %% Line 158
    fun (_cor2,_cor1,_cor0) ->
	%% Line 159
	apply 'do_add_vertex'/2
	    ({_cor1,_cor0}, _cor2)
'del_vertex'/2 =
    %% Line 165
    fun (_cor1,_cor0) ->
	%% Line 166
	apply 'do_del_vertex'/2
	    (_cor0, _cor1)
'del_vertices'/2 =
    %% Line 172
    fun (_cor1,_cor0) ->
	%% Line 173
	apply 'do_del_vertices'/2
	    (_cor0, _cor1)
'vertex'/2 =
    %% Line 180
    fun (_cor1,_cor0) ->
	%% Line 181
	( case _cor1 of
	    ( <( {'digraph',_rec8,_cor7,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ets':'lookup'
			   (_rec8, _cor0) of
		    %% Line 182
		    <[]> when 'true' ->
			'false'
		    %% Line 183
		    <[Vertex|[]]> when 'true' ->
			Vertex
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'no_vertices'/1 =
    %% Line 189
    fun (_cor0) ->
	%% Line 190
	( case _cor0 of
	    ( <( {'digraph',_rec9,_cor4,_cor5,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'ets':'info'
		      (_rec9, 'size')
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'vertices'/1 =
    %% Line 196
    fun (_cor0) ->
	%% Line 197
	( case _cor0 of
	    ( <( {'digraph',_rec10,_cor4,_cor5,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'ets':'select'
		      (_rec10, [{{'$1','_'},[],['$1']}])
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'source_vertices'/1 =
    %% Line 201
    fun (_cor0) ->
	%% Line 202
	apply 'collect_vertices'/2
	    (_cor0, 'in')
'sink_vertices'/1 =
    %% Line 206
    fun (_cor0) ->
	%% Line 207
	apply 'collect_vertices'/2
	    (_cor0, 'out')
'in_degree'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	%% Line 214
	( case _cor1 of
	    ( <( {'digraph',_cor7,_cor8,_rec11,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'ets':'lookup'
			  (_rec11, {'in',_cor0})
		  in  call 'erlang':'length'
			  (_cor4)
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'in_neighbours'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	%% Line 222
	( case _cor1 of
	    ( <( {'digraph',_cor11,_rec12,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor8> =
		      %% Line 224
		      call 'ets':'lookup'
			  (_cor12, {'in',_cor0})
		  in  %% Line 224
		      apply 'collect_elems'/3
			  (_cor8, _rec12, 2)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'in_edges'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	%% Line 232
	( case _cor1 of
	    ( <( {'digraph',_cor6,_cor7,_rec14,_cor8}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'ets':'select'
		      (_rec14, [{{{'in',_cor0},'$1'},[],['$1']}|[]])
	      -| ['compiler_generated'] )
	    ( <_cor9> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'out_degree'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	%% Line 239
	( case _cor1 of
	    ( <( {'digraph',_cor7,_cor8,_rec15,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'ets':'lookup'
			  (_rec15, {'out',_cor0})
		  in  call 'erlang':'length'
			  (_cor4)
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'out_neighbours'/2 =
    %% Line 246
    fun (_cor1,_cor0) ->
	%% Line 247
	( case _cor1 of
	    ( <( {'digraph',_cor11,_rec16,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor8> =
		      %% Line 249
		      call 'ets':'lookup'
			  (_cor12, {'out',_cor0})
		  in  %% Line 249
		      apply 'collect_elems'/3
			  (_cor8, _rec16, 3)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'out_edges'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	%% Line 257
	( case _cor1 of
	    ( <( {'digraph',_cor6,_cor7,_rec18,_cor8}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'ets':'select'
		      (_rec18, [{{{'out',_cor0},'$1'},[],['$1']}|[]])
	      -| ['compiler_generated'] )
	    ( <_cor9> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_edge'/3 =
    %% Line 264
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 265
	    apply 'new_edge_id'/1
		(_cor2)
	in  %% Line 265
	    apply 'do_add_edge'/2
		({_cor3,_cor1,_cor0,[]}, _cor2)
'add_edge'/4 =
    %% Line 273
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 274
	    apply 'new_edge_id'/1
		(_cor3)
	in  %% Line 274
	    apply 'do_add_edge'/2
		({_cor4,_cor2,_cor1,_cor0}, _cor3)
'add_edge'/5 =
    %% Line 283
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 284
	apply 'do_add_edge'/2
	    ({_cor3,_cor2,_cor1,_cor0}, _cor4)
'del_edge'/2 =
    %% Line 290
    fun (_cor1,_cor0) ->
	%% Line 291
	apply 'do_del_edges'/2
	    ([_cor0|[]], _cor1)
'del_edges'/2 =
    %% Line 297
    fun (_cor1,_cor0) ->
	%% Line 298
	apply 'do_del_edges'/2
	    (_cor0, _cor1)
'no_edges'/1 =
    %% Line 303
    fun (_cor0) ->
	%% Line 304
	( case _cor0 of
	    ( <( {'digraph',_cor4,_rec19,_cor5,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'ets':'info'
		      (_rec19, 'size')
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'edges'/1 =
    %% Line 310
    fun (_cor0) ->
	%% Line 311
	( case _cor0 of
	    ( <( {'digraph',_cor4,_rec20,_cor5,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'ets':'select'
		      (_rec20, [{{'$1','_','_','_'},[],['$1']}])
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'edges'/2 =
    %% Line 318
    fun (_cor1,_cor0) ->
	%% Line 319
	( case _cor1 of
	    ( <( {'digraph',_cor6,_cor7,_rec21,_cor8}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'ets':'select'
		      (_rec21, [{{{'out',_cor0},'$1'},[],['$1']}|%% Line 320
								 [{{{'in',_cor0},'$1'},[],['$1']}|[]]])
	      -| ['compiler_generated'] )
	    ( <_cor9> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'edge'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	%% Line 330
	( case _cor1 of
	    ( <( {'digraph',_cor7,_rec22,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ets':'lookup'
			   (_rec22, _cor0) of
		    %% Line 331
		    <[]> when 'true' ->
			'false'
		    %% Line 332
		    <[Edge|[]]> when 'true' ->
			Edge
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'new_edge_id'/1 =
    %% Line 340
    fun (_cor0) ->
	%% Line 341
	( case _cor0 of
	    ( <( {'digraph',_cor9,_cor10,_rec23,_cor11}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 342
		  case call 'ets':'lookup'
			   (_rec23, '$eid') of
		    <[{'$eid',K}|[]]> when 'true' ->
			%% Line 343
			case call 'ets':'delete'
				 (_rec23, '$eid') of
			  <'true'> when 'true' ->
			      let <_cor6> =
				  %% Line 344
				  call 'erlang':'+'
				      (K, 1)
			      in  %% Line 344
				  case call 'ets':'insert'
					   (_rec23, {'$eid',_cor6}) of
				    <'true'> when 'true' ->
					%% Line 345
					['$e'|K]
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor12> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'new_vertex_id'/1 =
    %% Line 352
    fun (_cor0) ->
	%% Line 353
	( case _cor0 of
	    ( <( {'digraph',_cor9,_cor10,_rec24,_cor11}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 354
		  case call 'ets':'lookup'
			   (_rec24, '$vid') of
		    <[{'$vid',K}|[]]> when 'true' ->
			%% Line 355
			case call 'ets':'delete'
				 (_rec24, '$vid') of
			  <'true'> when 'true' ->
			      let <_cor6> =
				  %% Line 356
				  call 'erlang':'+'
				      (K, 1)
			      in  %% Line 356
				  case call 'ets':'insert'
					   (_rec24, {'$vid',_cor6}) of
				    <'true'> when 'true' ->
					%% Line 357
					['$v'|K]
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor12> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'collect_elems'/3 =
    %% Line 362
    fun (_cor2,_cor1,_cor0) ->
	%% Line 363
	apply 'collect_elems'/4
	    (_cor2, _cor1, _cor0, [])
'collect_elems'/4 =
    %% Line 365
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{_cor9,Key}|Keys],Table,Index,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 367
		  call 'ets':'lookup_element'
		      (Table, Key, Index)
	      in  %% Line 366
		  apply 'collect_elems'/4
		      (Keys, Table, Index, %% Line 367
					   [_cor4|Acc])
	  %% Line 368
	  <[],_cor10,_cor11,Acc> when 'true' ->
	      Acc
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'collect_elems',4}}] )
	    -| ['compiler_generated'] )
	end
'do_add_vertex'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <VL = {V,_X_Label},G> when 'true' ->
	      %% Line 373
	      ( case G of
		  ( <( {'digraph',_rec25,_cor6,_cor7,_cor8}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'ets':'insert'
				(_rec25, VL)
			    %% Line 374
			    V
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','digraph'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_add_vertex',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_vertices'/2 =
    %% Line 379
    fun (_cor1,_cor0) ->
	let <Vs> =
	    %% Line 380
	    apply 'vertices'/1
		(_cor1)
	in  let <_cor10> =
		%% Line 381
		( fun (_cor7,_cor6) ->
		      %% Line 382
		      ( case _cor1 of
			  ( <( {'digraph',_cor13,_cor14,_rec26,_cor15}
			       -| ['compiler_generated'] )> when 'true' ->
				case call 'ets':'member'
					 (_rec26, {_cor0,_cor7}) of
				  %% Line 383
				  <'true'> when 'true' ->
				      _cor6
				  %% Line 384
				  <'false'> when 'true' ->
				      [_cor7|_cor6]
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_cor16> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','digraph'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| [{'id',{0,0,'-collect_vertices/2-fun-0-'}}] )
	    in  %% Line 381
		call 'lists':'foldl'
		    (_cor10, %% Line 386
			     [], %% Line 386
				 Vs)
'do_del_vertices'/2 =
    %% Line 391
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[V|Vs],G> when 'true' ->
	      do  %% Line 392
		  apply 'do_del_vertex'/2
		      (V, G)
		  %% Line 393
		  apply 'do_del_vertices'/2
		      (Vs, G)
	  %% Line 394
	  <[],{'digraph',_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      'true'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'do_del_vertices',2}}] )
	    -| ['compiler_generated'] )
	end
'do_del_vertex'/2 =
    %% Line 396
    fun (_cor1,_cor0) ->
	%% Line 397
	( case _cor0 of
	    ( <( {'digraph',_cor12,_cor13,_rec27,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'ets':'lookup'
			  (_rec27, {'in',_cor1})
		  in  do  apply 'do_del_nedges'/2
			      (_cor4, _cor0)
			  let <_cor7> =
			      %% Line 398
			      call 'ets':'lookup'
				  (_rec27, {'out',_cor1})
			  in  do  %% Line 398
				  apply 'do_del_nedges'/2
				      (_cor7, _cor0)
				  %% Line 399
				  call 'ets':'delete'
				      (_cor12, _cor1)
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_del_nedges'/2 =
    %% Line 401
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_cor7,E}|Ns],G> when 'true' ->
	      %% Line 402
	      ( case G of
		  ( <( {'digraph',_cor8,_rec30,_cor9,_cor10}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'ets':'lookup'
				 (_rec30, E) of
			  %% Line 403
			  <[{_cor12,V1,V2,_cor13}|[]]>
			      when call 'erlang':'=:='
				    (_cor12,
				     E) ->
			      do  %% Line 404
				  apply 'do_del_edge'/4
				      (E, V1, V2, G)
				  %% Line 405
				  apply 'do_del_nedges'/2
				      (Ns, G)
			  %% Line 406
			  <[]> when 'true' ->
			      %% Line 407
			      apply 'do_del_nedges'/2
				  (Ns, G)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','digraph'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 409
	  <[],{'digraph',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      'true'
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'do_del_nedges',2}}] )
	    -| ['compiler_generated'] )
	end
'do_del_edges'/2 =
    %% Line 414
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],G> when 'true' ->
	      %% Line 415
	      ( case G of
		  ( <( {'digraph',_cor7,_rec31,_cor8,_cor9}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'ets':'lookup'
				 (_rec31, E) of
			  %% Line 416
			  <[{_cor11,V1,V2,_cor12}|[]]>
			      when call 'erlang':'=:='
				    (_cor11,
				     E) ->
			      do  %% Line 417
				  apply 'do_del_edge'/4
				      (E, V1, V2, G)
				  %% Line 418
				  apply 'do_del_edges'/2
				      (Es, G)
			  %% Line 419
			  <[]> when 'true' ->
			      %% Line 420
			      apply 'do_del_edges'/2
				  (Es, G)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor10> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','digraph'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 422
	  <[],{'digraph',_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      'true'
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'do_del_edges',2}}] )
	    -| ['compiler_generated'] )
	end
'do_del_edge'/4 =
    %% Line 424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 425
	( case _cor0 of
	    ( <( {'digraph',_cor12,_cor13,_rec32,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  call 'ets':'select_delete'
			  (_rec32, [{{{'in',_cor1},_cor3},[],['true']}|%% Line 426
								       [{{{'out',_cor2},_cor3},[],['true']}|[]]])
		      %% Line 427
		      call 'ets':'delete'
			  (_cor13, _cor3)
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','digraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'rm_edges'/2 =
    %% Line 431
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[V1|[V2|Vs]],G> when 'true' ->
	      do  %% Line 432
		  apply 'rm_edge'/3
		      (V1, V2, G)
		  %% Line 433
		  apply 'rm_edges'/2
		      ([V2|Vs], G)
	  %% Line 434
	  <_cor4,_cor5> when 'true' ->
	      'true'
	end
'rm_edge'/3 =
    %% Line 438
    fun (_cor2,_cor1,_cor0) ->
	let <Es> =
	    %% Line 439
	    apply 'out_edges'/2
		(_cor0, _cor2)
	in  %% Line 440
	    apply 'rm_edge_0'/4
		(Es, _cor2, _cor1, _cor0)
'rm_edge_0'/4 =
    %% Line 442
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],V1,V2,G> when 'true' ->
	      %% Line 443
	      ( case G of
		  ( <( {'digraph',_cor11,_rec34,_cor12,_cor13}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'ets':'lookup'
				 (_rec34, E) of
			  %% Line 444
			  <[{_cor15,_cor16,_cor17,_cor18}|[]]>
			      when let <_cor21> =
				    call 'erlang':'=:='
					(_cor15, E)
				in  let <_cor19> =
					call 'erlang':'=:='
					    (_cor16, V1)
				    in  let <_cor20> =
					    call 'erlang':'=:='
						(_cor17, V2)
					in  let <_cor22> =
						call 'erlang':'and'
						    (_cor19, _cor20)
					    in  call 'erlang':'and'
						    (_cor21, _cor22) ->
			      do  %% Line 445
				  apply 'do_del_edge'/4
				      (E, V1, V2, G)
				  %% Line 446
				  apply 'rm_edge_0'/4
				      (Es, V1, V2, G)
			  %% Line 447
			  <_cor23> when 'true' ->
			      %% Line 448
			      apply 'rm_edge_0'/4
				  (Es, V1, V2, G)
			end
		    -| ['compiler_generated'] )
		  ( <_cor14> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','digraph'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 450
	  <[],_cor24,_cor25,{'digraph',_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      'ok'
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rm_edge_0',4}}] )
	    -| ['compiler_generated'] )
	end
'do_add_edge'/2 =
    %% Line 458
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{E,V1,V2,Label},G> when 'true' ->
	      %% Line 459
	      ( case G of
		  ( <( {'digraph',_rec35,_cor17,_cor18,_cor19}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'ets':'member'
				 (_rec35, V1) of
			  %% Line 460
			  <'false'> when 'true' ->
			      {'error',{'bad_vertex',V1}}
			  %% Line 461
			  <'true'> when 'true' ->
			      %% Line 462
			      case call 'ets':'member'
				       (_rec35, V2) of
				%% Line 463
				<'false'> when 'true' ->
				    {'error',{'bad_vertex',V2}}
				%% Line 464
				<'true'> when 'true' ->
				    %% Line 465
				    case apply 'other_edge_exists'/4
					     (G, E, V1, V2) of
				      %% Line 466
				      <'true'> when 'true' ->
					  {'error',{'bad_edge',[V1|[V2|[]]]}}
				      %% Line 467
				      <'false'>
					  when ( call 'erlang':'=:='
						  (_cor19,
						   'false')
					      -| ['compiler_generated'] ) ->
					  %% Line 468
					  apply 'acyclic_add_edge'/5
					      (E, V1, V2, Label, G)
				      %% Line 469
				      <'false'> when 'true' ->
					  %% Line 470
					  apply 'do_insert_edge'/5
					      (E, V1, V2, Label, G)
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor12})
					-| ['compiler_generated'] )
				    end
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','digraph'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'do_add_edge',2}}] )
	    -| ['compiler_generated'] )
	end
'other_edge_exists'/4 =
    %% Line 475
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'digraph',_cor11,ET,_cor12,_cor13},E,V1,V2> when 'true' ->
	      %% Line 476
	      case call 'ets':'lookup'
		       (ET, E) of
		%% Line 477
		<[{_cor14,Vert1,Vert2,_cor15}|[]]>
		    when let <_cor16> =
			  call 'erlang':'=:='
			      (_cor14, E)
		      in  let <_cor4> =
			      call 'erlang':'=/='
				  (Vert1, V1)
			  in  let <_cor5> =
				  call 'erlang':'=/='
				      (Vert2, V2)
			      in  let <_cor17> =
				      call 'erlang':'or'
					  (_cor4, _cor5)
				  in  call 'erlang':'and'
					  (_cor16, _cor17) ->
		    %% Line 478
		    'true'
		%% Line 479
		<_cor18> when 'true' ->
		    %% Line 480
		    'false'
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'other_edge_exists',4}}] )
	    -| ['compiler_generated'] )
	end
'do_insert_edge'/5 =
    %% Line 485
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E,V1,V2,Label,{'digraph',_cor10,ET,NT,_cor11}> when 'true' ->
	      do  %% Line 486
		  call 'ets':'insert'
		      (NT, [{{'out',V1},E}|[{{'in',V2},E}|[]]])
		  do  %% Line 487
		      call 'ets':'insert'
			  (ET, {E,V1,V2,Label})
		      %% Line 488
		      E
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'do_insert_edge',5}}] )
	    -| ['compiler_generated'] )
	end
'acyclic_add_edge'/5 =
    %% Line 493
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_E,V1,V2,_X_L,_X_G>
	      when call 'erlang':'=:='
		    (V1,
		     V2) ->
	      %% Line 494
	      {'error',{'bad_edge',[V1|[V2|[]]]}}
	  %% Line 495
	  <E,V1,V2,Label,G> when 'true' ->
	      %% Line 496
	      case apply 'get_path'/3
		       (G, V2, V1) of
		%% Line 497
		<'false'> when 'true' ->
		    apply 'do_insert_edge'/5
			(E, V1, V2, Label, G)
		%% Line 498
		<Path> when 'true' ->
		    {'error',{'bad_edge',Path}}
	      end
	end
'del_path'/3 =
    %% Line 510
    fun (_cor2,_cor1,_cor0) ->
	%% Line 511
	case apply 'get_path'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 512
	  <'false'> when 'true' ->
	      'true'
	  %% Line 513
	  <Path> when 'true' ->
	      do  %% Line 514
		  apply 'rm_edges'/2
		      (Path, _cor2)
		  %% Line 515
		  apply 'del_path'/3
		      (_cor2, _cor1, _cor0)
	end
'get_cycle'/2 =
    %% Line 532
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 533
	    apply 'out_neighbours'/2
		(_cor1, _cor0)
	in  %% Line 533
	    case apply 'one_path'/8
		     (_cor2, _cor0, [], [_cor0|[]], [_cor0|[]], 2, _cor1, 1) of
	      %% Line 534
	      <'false'> when 'true' ->
		  let <_cor3> =
		      %% Line 535
		      apply 'out_neighbours'/2
			  (_cor1, _cor0)
		  in  %% Line 535
		      case call 'lists':'member'
			       (_cor0, _cor3) of
			%% Line 536
			<'true'> when 'true' ->
			    [_cor0|[]]
			%% Line 537
			<'false'> when 'true' ->
			    'false'
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
	      %% Line 539
	      <Vs> when 'true' ->
		  Vs
	    end
'get_path'/3 =
    %% Line 554
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 555
	    apply 'out_neighbours'/2
		(_cor2, _cor1)
	in  %% Line 555
	    apply 'one_path'/8
		(_cor3, _cor0, [], [_cor1|[]], [_cor1|[]], 1, _cor2, 1)
'prune_short_path'/2 =
    %% Line 562
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Counter,Min>
	      when call 'erlang':'<'
		    (Counter,
		     Min) ->
	      %% Line 563
	      'short'
	  %% Line 564
	  <_X_Counter,_X_Min> when 'true' ->
	      %% Line 565
	      'ok'
	end
'one_path'/8 =
    %% Line 567
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[W|Ws],_cor21,Cont,Xs,Ps,Prune,G,Counter>
	      when call 'erlang':'=:='
		    (_cor21,
		     W) ->
	      %% Line 568
	      case apply 'prune_short_path'/2
		       (Counter, Prune) of
		%% Line 569
		<'short'> when 'true' ->
		    apply 'one_path'/8
			(Ws, W, Cont, Xs, Ps, Prune, G, Counter)
		%% Line 570
		<'ok'> when 'true' ->
		    call 'lists':'reverse'
			([W|Ps])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 572
	  <[V|Vs],W,Cont,Xs,Ps,Prune,G,Counter> when 'true' ->
	      %% Line 573
	      case call 'lists':'member'
		       (V, Xs) of
		%% Line 574
		<'true'> when 'true' ->
		    apply 'one_path'/8
			(Vs, W, Cont, Xs, Ps, Prune, G, Counter)
		%% Line 575
		<'false'> when 'true' ->
		    let <_cor10> =
			apply 'out_neighbours'/2
			    (G, V)
		    in  let <_cor9> =
			    %% Line 577
			    call 'erlang':'+'
				(Counter, 1)
			in  apply 'one_path'/8
				(_cor10, W, %% Line 576
					    [{Vs,Ps}|Cont], %% Line 576
							    [V|Xs], %% Line 576
								    [V|Ps], %% Line 577
									    Prune, %% Line 577
										   G, _cor9)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 579
	  <[],W,[{Vs,Ps}|Cont],Xs,_cor22,Prune,G,Counter> when 'true' ->
	      let <_cor12> =
		  %% Line 580
		  call 'erlang':'-'
		      (Counter, 1)
	      in  %% Line 580
		  apply 'one_path'/8
		      (Vs, W, Cont, Xs, Ps, Prune, G, _cor12)
	  %% Line 581
	  <[],_cor23,[],_cor24,_cor25,_cor26,_cor27,_X_Counter> when 'true' ->
	      'false'
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'one_path',8}}] )
	    -| ['compiler_generated'] )
	end
'get_short_cycle'/2 =
    %% Line 592
    fun (_cor1,_cor0) ->
	%% Line 593
	apply 'get_short_path'/3
	    (_cor1, _cor0, _cor0)
'get_short_path'/3 =
    %% Line 606
    fun (_cor2,_cor1,_cor0) ->
	let <T> =
	    %% Line 607
	    apply 'new'/0
		()
	in  do  %% Line 608
		apply 'add_vertex'/2
		    (T, _cor1)
		let <Q> =
		    %% Line 609
		    call 'queue':'new'
			()
		in  let <Q1> =
			%% Line 610
			apply 'queue_out_neighbours'/3
			    (_cor1, _cor2, Q)
		    in  let <L> =
			    %% Line 611
			    apply 'spath'/4
				(Q1, _cor2, _cor0, T)
			in  do  %% Line 612
				apply 'delete'/1
				    (T)
				%% Line 613
				L
'spath'/4 =
    %% Line 615
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 616
	case call 'queue':'out'
		 (_cor3) of
	  %% Line 617
	  <{{'value',E},Q1}> when 'true' ->
	      %% Line 618
	      case apply 'edge'/2
		       (_cor2, E) of
		<{_X_E,V1,V2,_X_Label}> when 'true' ->
		    %% Line 619
		    case <> of
		      %% Line 620
		      <>
			  when call 'erlang':'=:='
				(_cor1,
				 V2) ->
			  %% Line 621
			  apply 'follow_path'/3
			      (V1, _cor0, [V2|[]])
		      %% Line 622
		      <> when 'true' ->
			  %% Line 623
			  case apply 'vertex'/2
				   (_cor0, V2) of
			    %% Line 624
			    <'false'> when 'true' ->
				do  %% Line 625
				    apply 'add_vertex'/2
					(_cor0, V2)
				    do  %% Line 626
					apply 'add_edge'/3
					    (_cor0, V2, V1)
					let <NQ> =
					    %% Line 627
					    apply 'queue_out_neighbours'/3
						(V2, _cor2, Q1)
					in  %% Line 628
					    apply 'spath'/4
						(NQ, _cor2, _cor1, _cor0)
			    %% Line 629
			    <_X_V> when 'true' ->
				%% Line 630
				apply 'spath'/4
				    (Q1, _cor2, _cor1, _cor0)
			  end
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 633
	  <{'empty',_X_Q1}> when 'true' ->
	      %% Line 634
	      'false'
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'follow_path'/3 =
    %% Line 637
    fun (_cor2,_cor1,_cor0) ->
	let <P1> =
	    %% Line 638
	    [_cor2|_cor0]
	in  %% Line 639
	    case apply 'out_neighbours'/2
		     (_cor1, _cor2) of
	      %% Line 640
	      <[N|[]]> when 'true' ->
		  %% Line 641
		  apply 'follow_path'/3
		      (N, _cor1, P1)
	      %% Line 642
	      <[]> when 'true' ->
		  %% Line 643
		  P1
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'queue_out_neighbours'/3 =
    %% Line 646
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 647
	    ( fun (_cor5,_cor4) ->
		  call 'queue':'in'
		      (_cor5, _cor4)
	      -| [{'id',{0,0,'-queue_out_neighbours/3-fun-0-'}}] )
	in  let <_cor3> =
		%% Line 647
		apply 'out_edges'/2
		    (_cor1, _cor2)
	    in  %% Line 647
		call 'lists':'foldl'
		    (_cor8, _cor0, _cor3)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('digraph')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('digraph', _cor0)
end