module 'qlc' ['all_selections'/1,
	      'append'/1,
	      'append'/2,
	      'aux_name'/3,
	      'cursor'/1,
	      'cursor'/2,
	      'delete_cursor'/1,
	      'e'/1,
	      'e'/2,
	      'eval'/1,
	      'eval'/2,
	      'fold'/3,
	      'fold'/4,
	      'format_error'/1,
	      'info'/1,
	      'info'/2,
	      'keysort'/2,
	      'keysort'/3,
	      'module_info'/0,
	      'module_info'/1,
	      'name_suffix'/2,
	      'next_answers'/1,
	      'next_answers'/2,
	      'parse_transform'/2,
	      'q'/1,
	      'q'/2,
	      'sort'/1,
	      'sort'/2,
	      'string_to_handle'/1,
	      'string_to_handle'/2,
	      'string_to_handle'/3,
	      'table'/2,
	      'template_state'/0,
	      'transform_from_evaluator'/2,
	      'var_fold'/3,
	      'var_ufold'/2,
	      'vars'/1]
    attributes [%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','qlc_append'},[{'record_field',58,{'atom',58,'hl'}}],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','qlc_table'},[{'record_field',62,{'atom',62,'trav_fun'}}|[{'record_field',63,{'atom',63,'trav_MS'}}|[{'record_field',64,{'atom',64,'pre_fun'}}|[{'record_field',65,{'atom',65,'post_fun'}}|[{'record_field',66,{'atom',66,'info_fun'}}|[{'record_field',67,{'atom',67,'format_fun'}}|[{'record_field',68,{'atom',68,'lookup_fun'}}|[{'record_field',69,{'atom',69,'parent_fun'}}|[{'record_field',70,{'atom',70,'key_equality'}}|[{'record_field',71,{'atom',71,'lu_vals'}}|[{'record_field',72,{'atom',72,'ms'},{'atom',72,'no_match_spec'}}]]]]]]]]]]],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','qlc_sort'},[{'record_field',77,{'atom',77,'h'}}|[{'record_field',78,{'atom',78,'keypos'}}|[{'record_field',79,{'atom',79,'unique'}}|[{'record_field',80,{'atom',80,'compressed'}}|[{'record_field',81,{'atom',81,'order'}}|[{'record_field',82,{'atom',82,'fs_opts'}}|[{'record_field',83,{'atom',83,'tmpdir_usage'},{'atom',83,'allowed'}}|[{'record_field',85,{'atom',85,'tmpdir'}}]]]]]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','qlc_lc'},[{'record_field',90,{'atom',90,'lc'}}|[{'record_field',91,{'atom',91,'opt'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','qlc_list'},[{'record_field',95,{'atom',95,'l'}}|[{'record_field',96,{'atom',96,'ms'},{'atom',96,'no_match_spec'}}]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','qlc_join'},[{'record_field',100,{'atom',100,'kind'}}|[{'record_field',102,{'atom',102,'opt'}}|[{'record_field',103,{'atom',103,'h1'}}|[{'record_field',103,{'atom',103,'q1'}}|[{'record_field',103,{'atom',103,'c1'}}|[{'record_field',104,{'atom',104,'h2'}}|[{'record_field',104,{'atom',104,'q2'}}|[{'record_field',104,{'atom',104,'c2'}}]]]]]]]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','qlc_cursor'},[{'record_field',110,{'atom',110,'c'}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','qlc_opt'},[{'record_field',113,{'atom',113,'unique'},{'atom',113,'false'}}|[{'record_field',114,{'atom',114,'cache'},{'atom',114,'false'}}|[{'record_field',115,{'atom',115,'max_lookup'},{'op',115,'-',{'integer',115,1}}}|[{'record_field',116,{'atom',116,'join'},{'atom',116,'any'}}|[{'record_field',117,{'atom',117,'tmpdir'},{'string',117,[]}}|[{'record_field',118,{'atom',118,'lookup'},{'atom',118,'any'}}|[{'record_field',119,{'atom',119,'max_list'},{'op',119,'*',{'integer',119,512},{'integer',119,1024}}}|[{'record_field',120,{'atom',120,'tmpdir_usage'},{'atom',120,'allowed'}}]]]]]]]],[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','setup'},[{'record_field',124,{'atom',124,'parent'}}],[]}],
		%% Line 128
		'export_type' =
		    %% Line 128
		    [{'query_cursor',0}|[{'query_handle',0}]],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','qlc_handle'},[{'record_field',133,{'atom',133,'h'}}],[]}],
		%% Line 149
		'type' =
		    %% Line 149
		    [{'query_list_comprehension',{'type',149,'term',[]},[]}],
		%% Line 150
		'opaque' =
		    %% Line 150
		    [{'query_cursor',{'type',150,'tuple',[{'atom',150,'qlc_cursor'}|[{'type',150,'term',[]}]]},[]}],
		%% Line 151
		'opaque' =
		    %% Line 151
		    [{'query_handle',{'type',151,'tuple',[{'atom',151,'qlc_handle'}|[{'type',151,'term',[]}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'query_handle_or_list',{'type',152,'union',[{'type',152,'query_handle',[]}|[{'type',152,'list',[]}]]},[]}],
		%% Line 153
		'type' =
		    %% Line 153
		    [{'answers',{'type',153,'list',[{'type',153,'answer',[]}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{'answer',{'type',154,'term',[]},[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{'abstract_expr',{'remote_type',155,[{'atom',155,'erl_parse'}|[{'atom',155,'abstract_expr'}|[[]]]]},[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'match_expression',{'remote_type',156,[{'atom',156,'ets'}|[{'atom',156,'match_spec'}|[[]]]]},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'spawn_options',{'type',157,'union',[{'atom',157,'default'}|[{'type',157,'list',[{'remote_type',157,[{'atom',157,'proc_lib'}|[{'atom',157,'spawn_option'}|[[]]]]}]}]]},[]}],
		%% Line 158
		'type' =
		    %% Line 158
		    [{'sort_options',{'type',158,'union',[{'type',158,'list',[{'type',158,'sort_option',[]}]}|[{'type',158,'sort_option',[]}]]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{'sort_option',{'type',159,'union',[{'type',159,'tuple',[{'atom',159,'compressed'}|[{'type',159,'boolean',[]}]]}|[{'type',160,'tuple',[{'atom',160,'no_files'}|[{'type',160,'no_files',[]}]]}|[{'type',161,'tuple',[{'atom',161,'order'}|[{'type',161,'order',[]}]]}|[{'type',162,'tuple',[{'atom',162,'size'}|[{'type',162,'pos_integer',[]}]]}|[{'type',163,'tuple',[{'atom',163,'tmpdir'}|[{'type',163,'tmp_directory',[]}]]}|[{'type',164,'tuple',[{'atom',164,'unique'}|[{'type',164,'boolean',[]}]]}]]]]]]},[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'order',{'type',165,'union',[{'atom',165,'ascending'}|[{'atom',165,'descending'}|[{'type',165,'order_fun',[]}]]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'order_fun',{'type',166,'fun',[{'type',166,'product',[{'type',166,'term',[]}|[{'type',166,'term',[]}]]}|[{'type',166,'boolean',[]}]]},[]}],
		%% Line 167
		'type' =
		    %% Line 167
		    [{'tmp_directory',{'type',167,'union',[{'type',167,'nil',[]}|[{'remote_type',167,[{'atom',167,'file'}|[{'atom',167,'name'}|[[]]]]}]]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{'no_files',{'type',168,'pos_integer',[]},[]}],
		%% Line 169
		'type' =
		    %% Line 169
		    [{'key_pos',{'type',169,'union',[{'type',169,'pos_integer',[]}|[{'type',169,'list',[{'type',169,'pos_integer',[]}]}]]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'max_list_size',{'type',170,'non_neg_integer',[]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'cache',{'type',171,'union',[{'atom',171,'ets'}|[{'atom',171,'list'}|[{'atom',171,'no'}]]]},[]}],
		%% Line 172
		'type' =
		    %% Line 172
		    [{'tmp_file_usage',{'type',172,'union',[{'atom',172,'allowed'}|[{'atom',172,'not_allowed'}|[{'atom',172,'info_msg'}|[{'atom',173,'warning_msg'}|[{'atom',173,'error_msg'}]]]]]},[]}],
		%% Line 175
		'spec' =
		    %% Line 175
		    [{{'append',1},[{'type',175,'bounded_fun',[{'type',175,'fun',[{'type',175,'product',[{'var',175,'QHL'}]}|[{'var',175,'QH'}]]}|[[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'QHL'}|[{'type',176,'list',[{'type',176,'query_handle_or_list',[]}]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'QH'}|[{'type',177,'query_handle',[]}]]]]}]]]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'append',2},[{'type',185,'bounded_fun',[{'type',185,'fun',[{'type',185,'product',[{'var',185,'QH1'}|[{'var',185,'QH2'}]]}|[{'var',185,'QH3'}]]}|[[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'QH1'}|[{'type',186,'query_handle_or_list',[]}]]]]}|[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'QH2'}|[{'type',187,'query_handle_or_list',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'QH3'}|[{'type',188,'query_handle',[]}]]]]}]]]]]}]}],
		%% Line 196
		'spec' =
		    %% Line 196
		    [{{'cursor',1},[{'type',196,'bounded_fun',[{'type',196,'fun',[{'type',196,'product',[{'var',196,'QH'}]}|[{'var',196,'Cursor'}]]}|[[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'QH'}|[{'type',197,'query_handle_or_list',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Cursor'}|[{'type',198,'query_cursor',[]}]]]]}]]]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'cursor',2},[{'type',202,'bounded_fun',[{'type',202,'fun',[{'type',202,'product',[{'var',202,'QH'}|[{'var',202,'Options'}]]}|[{'var',202,'Cursor'}]]}|[[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'QH'}|[{'type',203,'query_handle_or_list',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Options'}|[{'type',204,'union',[{'type',204,'list',[{'var',204,'Option'}]}|[{'var',204,'Option'}]]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Option'}|[{'type',205,'union',[{'type',205,'tuple',[{'atom',205,'cache_all'}|[{'type',205,'cache',[]}]]}|[{'atom',205,'cache_all'}|[{'type',206,'tuple',[{'atom',206,'max_list_size'}|[{'type',206,'max_list_size',[]}]]}|[{'type',207,'tuple',[{'atom',207,'spawn_options'}|[{'type',207,'spawn_options',[]}]]}|[{'type',208,'tuple',[{'atom',208,'tmpdir_usage'}|[{'type',208,'tmp_file_usage',[]}]]}|[{'type',209,'tuple',[{'atom',209,'tmpdir'}|[{'type',209,'tmp_directory',[]}]]}|[{'type',210,'tuple',[{'atom',210,'unique_all'}|[{'type',210,'boolean',[]}]]}|[{'atom',210,'unique_all'}]]]]]]]]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Cursor'}|[{'type',211,'query_cursor',[]}]]]]}]]]]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'delete_cursor',1},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'QueryCursor'}]}|[{'atom',230,'ok'}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'QueryCursor'}|[{'type',231,'query_cursor',[]}]]]]}]]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'e',1},[{'type',239,'bounded_fun',[{'type',239,'fun',[{'type',239,'product',[{'var',239,'QH'}]}|[{'type',239,'union',[{'var',239,'Answers'}|[{'var',239,'Error'}]]}]]}|[[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'QH'}|[{'type',240,'query_handle_or_list',[]}]]]]}|[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'Answers'}|[{'type',241,'answers',[]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Error'}|[{'type',242,'tuple',[{'atom',242,'error'}|[{'type',242,'module',[]}|[{'var',242,'Reason'}]]]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Reason'}|[{'remote_type',243,[{'atom',243,'file_sorter'}|[{'atom',243,'reason'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 247
		'spec' =
		    %% Line 247
		    [{{'e',2},[{'type',247,'bounded_fun',[{'type',247,'fun',[{'type',247,'product',[{'var',247,'QH'}|[{'var',247,'Options'}]]}|[{'type',247,'union',[{'var',247,'Answers'}|[{'var',247,'Error'}]]}]]}|[[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'QH'}|[{'type',248,'query_handle_or_list',[]}]]]]}|[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Options'}|[{'type',249,'union',[{'type',249,'list',[{'var',249,'Option'}]}|[{'var',249,'Option'}]]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Option'}|[{'type',250,'union',[{'type',250,'tuple',[{'atom',250,'cache_all'}|[{'type',250,'cache',[]}]]}|[{'atom',250,'cache_all'}|[{'type',251,'tuple',[{'atom',251,'max_list_size'}|[{'type',251,'max_list_size',[]}]]}|[{'type',252,'tuple',[{'atom',252,'tmpdir_usage'}|[{'type',252,'tmp_file_usage',[]}]]}|[{'type',253,'tuple',[{'atom',253,'tmpdir'}|[{'type',253,'tmp_directory',[]}]]}|[{'type',254,'tuple',[{'atom',254,'unique_all'}|[{'type',254,'boolean',[]}]]}|[{'atom',254,'unique_all'}]]]]]]]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Answers'}|[{'type',255,'answers',[]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Error'}|[{'type',256,'tuple',[{'atom',256,'error'}|[{'type',256,'module',[]}|[{'var',256,'Reason'}]]]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Reason'}|[{'remote_type',257,[{'atom',257,'file_sorter'}|[{'atom',257,'reason'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 261
		'spec' =
		    %% Line 261
		    [{{'eval',1},[{'type',261,'bounded_fun',[{'type',261,'fun',[{'type',261,'product',[{'var',261,'QH'}]}|[{'type',261,'union',[{'var',261,'Answers'}|[{'var',261,'Error'}]]}]]}|[[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'QH'}|[{'type',262,'query_handle_or_list',[]}]]]]}|[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'Answers'}|[{'type',263,'answers',[]}]]]]}|[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Error'}|[{'type',264,'tuple',[{'atom',264,'error'}|[{'type',264,'module',[]}|[{'var',264,'Reason'}]]]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Reason'}|[{'remote_type',265,[{'atom',265,'file_sorter'}|[{'atom',265,'reason'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 269
		'spec' =
		    %% Line 269
		    [{{'eval',2},[{'type',269,'bounded_fun',[{'type',269,'fun',[{'type',269,'product',[{'var',269,'QH'}|[{'var',269,'Options'}]]}|[{'type',269,'union',[{'var',269,'Answers'}|[{'var',269,'Error'}]]}]]}|[[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'QH'}|[{'type',270,'query_handle_or_list',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Answers'}|[{'type',271,'answers',[]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Options'}|[{'type',272,'union',[{'type',272,'list',[{'var',272,'Option'}]}|[{'var',272,'Option'}]]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Option'}|[{'type',273,'union',[{'type',273,'tuple',[{'atom',273,'cache_all'}|[{'type',273,'cache',[]}]]}|[{'atom',273,'cache_all'}|[{'type',274,'tuple',[{'atom',274,'max_list_size'}|[{'type',274,'max_list_size',[]}]]}|[{'type',275,'tuple',[{'atom',275,'tmpdir_usage'}|[{'type',275,'tmp_file_usage',[]}]]}|[{'type',276,'tuple',[{'atom',276,'tmpdir'}|[{'type',276,'tmp_directory',[]}]]}|[{'type',277,'tuple',[{'atom',277,'unique_all'}|[{'type',277,'boolean',[]}]]}|[{'atom',277,'unique_all'}]]]]]]]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Error'}|[{'type',278,'tuple',[{'atom',278,'error'}|[{'type',278,'module',[]}|[{'var',278,'Reason'}]]]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Reason'}|[{'remote_type',279,[{'atom',279,'file_sorter'}|[{'atom',279,'reason'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 311
		'spec' =
		    %% Line 311
		    [{{'fold',3},[{'type',311,'bounded_fun',[{'type',311,'fun',[{'type',311,'product',[{'var',311,'Function'}|[{'var',311,'Acc0'}|[{'var',311,'QH'}]]]}|[{'type',312,'union',[{'var',312,'Acc1'}|[{'var',312,'Error'}]]}]]}|[[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'QH'}|[{'type',313,'query_handle_or_list',[]}]]]]}|[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'Function'}|[{'type',314,'fun',[{'type',314,'product',[{'type',314,'answer',[]}|[{'var',314,'AccIn'}]]}|[{'var',314,'AccOut'}]]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Acc0'}|[{'type',315,'term',[]}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Acc1'}|[{'type',316,'term',[]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'AccIn'}|[{'type',317,'term',[]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'AccOut'}|[{'type',318,'term',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Error'}|[{'type',319,'tuple',[{'atom',319,'error'}|[{'type',319,'module',[]}|[{'var',319,'Reason'}]]]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Reason'}|[{'remote_type',320,[{'atom',320,'file_sorter'}|[{'atom',320,'reason'}|[[]]]]}]]]]}]]]]]]]]]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'fold',4},[{'type',324,'bounded_fun',[{'type',324,'fun',[{'type',324,'product',[{'var',324,'Function'}|[{'var',324,'Acc0'}|[{'var',324,'QH'}|[{'var',324,'Options'}]]]]}|[{'type',325,'union',[{'var',325,'Acc1'}|[{'var',325,'Error'}]]}]]}|[[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'QH'}|[{'type',326,'query_handle_or_list',[]}]]]]}|[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'Function'}|[{'type',327,'fun',[{'type',327,'product',[{'type',327,'answer',[]}|[{'var',327,'AccIn'}]]}|[{'var',327,'AccOut'}]]}]]]]}|[{'type',328,'constraint',[{'atom',328,'is_subtype'}|[[{'var',328,'Acc0'}|[{'type',328,'term',[]}]]]]}|[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Acc1'}|[{'type',329,'term',[]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'AccIn'}|[{'type',330,'term',[]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'AccOut'}|[{'type',331,'term',[]}]]]]}|[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Options'}|[{'type',332,'union',[{'type',332,'list',[{'var',332,'Option'}]}|[{'var',332,'Option'}]]}]]]]}|[{'type',333,'constraint',[{'atom',333,'is_subtype'}|[[{'var',333,'Option'}|[{'type',333,'union',[{'type',333,'tuple',[{'atom',333,'cache_all'}|[{'type',333,'cache',[]}]]}|[{'atom',333,'cache_all'}|[{'type',334,'tuple',[{'atom',334,'max_list_size'}|[{'type',334,'max_list_size',[]}]]}|[{'type',335,'tuple',[{'atom',335,'tmpdir_usage'}|[{'type',335,'tmp_file_usage',[]}]]}|[{'type',336,'tuple',[{'atom',336,'tmpdir'}|[{'type',336,'tmp_directory',[]}]]}|[{'type',337,'tuple',[{'atom',337,'unique_all'}|[{'type',337,'boolean',[]}]]}|[{'atom',337,'unique_all'}]]]]]]]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Error'}|[{'type',338,'tuple',[{'atom',338,'error'}|[{'type',338,'module',[]}|[{'var',338,'Reason'}]]]}]]]]}|[{'type',339,'constraint',[{'atom',339,'is_subtype'}|[[{'var',339,'Reason'}|[{'remote_type',339,[{'atom',339,'file_sorter'}|[{'atom',339,'reason'}|[[]]]]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 369
		'spec' =
		    %% Line 369
		    [{{'format_error',1},[{'type',369,'bounded_fun',[{'type',369,'fun',[{'type',369,'product',[{'var',369,'Error'}]}|[{'var',369,'Chars'}]]}|[[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'Error'}|[{'type',370,'tuple',[{'atom',370,'error'}|[{'type',370,'module',[]}|[{'type',370,'term',[]}]]]}]]]]}|[{'type',371,'constraint',[{'atom',371,'is_subtype'}|[[{'var',371,'Chars'}|[{'remote_type',371,[{'atom',371,'io_lib'}|[{'atom',371,'chars'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 409
		'spec' =
		    %% Line 409
		    [{{'info',1},[{'type',409,'bounded_fun',[{'type',409,'fun',[{'type',409,'product',[{'var',409,'QH'}]}|[{'var',409,'Info'}]]}|[[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'QH'}|[{'type',410,'query_handle_or_list',[]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Info'}|[{'type',411,'union',[{'type',411,'abstract_expr',[]}|[{'type',411,'string',[]}]]}]]]]}]]]]}]}],
		%% Line 415
		'spec' =
		    %% Line 415
		    [{{'info',2},[{'type',415,'bounded_fun',[{'type',415,'fun',[{'type',415,'product',[{'var',415,'QH'}|[{'var',415,'Options'}]]}|[{'var',415,'Info'}]]}|[[{'type',416,'constraint',[{'atom',416,'is_subtype'}|[[{'var',416,'QH'}|[{'type',416,'query_handle_or_list',[]}]]]]}|[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Options'}|[{'type',417,'union',[{'type',417,'list',[{'var',417,'Option'}]}|[{'var',417,'Option'}]]}]]]]}|[{'type',418,'constraint',[{'atom',418,'is_subtype'}|[[{'var',418,'Option'}|[{'type',418,'union',[{'var',418,'EvalOption'}|[{'var',418,'ReturnOption'}]]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'EvalOption'}|[{'type',419,'union',[{'type',419,'tuple',[{'atom',419,'cache_all'}|[{'type',419,'cache',[]}]]}|[{'atom',419,'cache_all'}|[{'type',420,'tuple',[{'atom',420,'max_list_size'}|[{'type',420,'max_list_size',[]}]]}|[{'type',421,'tuple',[{'atom',421,'tmpdir_usage'}|[{'type',421,'tmp_file_usage',[]}]]}|[{'type',422,'tuple',[{'atom',422,'tmpdir'}|[{'type',422,'tmp_directory',[]}]]}|[{'type',423,'tuple',[{'atom',423,'unique_all'}|[{'type',423,'boolean',[]}]]}|[{'atom',423,'unique_all'}]]]]]]]}]]]]}|[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'ReturnOption'}|[{'type',424,'union',[{'type',424,'tuple',[{'atom',424,'depth'}|[{'var',424,'Depth'}]]}|[{'type',425,'tuple',[{'atom',425,'flat'}|[{'type',425,'boolean',[]}]]}|[{'type',426,'tuple',[{'atom',426,'format'}|[{'var',426,'Format'}]]}|[{'type',427,'tuple',[{'atom',427,'n_elements'}|[{'var',427,'NElements'}]]}]]]]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'Depth'}|[{'type',428,'union',[{'atom',428,'infinity'}|[{'type',428,'non_neg_integer',[]}]]}]]]]}|[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'Format'}|[{'type',429,'union',[{'atom',429,'abstract_code'}|[{'atom',429,'string'}]]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'NElements'}|[{'type',430,'union',[{'atom',430,'infinity'}|[{'type',430,'pos_integer',[]}]]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Info'}|[{'type',431,'union',[{'type',431,'abstract_expr',[]}|[{'type',431,'string',[]}]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 467
		'spec' =
		    %% Line 467
		    [{{'keysort',2},[{'type',467,'bounded_fun',[{'type',467,'fun',[{'type',467,'product',[{'var',467,'KeyPos'}|[{'var',467,'QH1'}]]}|[{'var',467,'QH2'}]]}|[[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'KeyPos'}|[{'type',468,'key_pos',[]}]]]]}|[{'type',469,'constraint',[{'atom',469,'is_subtype'}|[[{'var',469,'QH1'}|[{'type',469,'query_handle_or_list',[]}]]]]}|[{'type',470,'constraint',[{'atom',470,'is_subtype'}|[[{'var',470,'QH2'}|[{'type',470,'query_handle',[]}]]]]}]]]]]}]}],
		%% Line 474
		'spec' =
		    %% Line 474
		    [{{'keysort',3},[{'type',474,'bounded_fun',[{'type',474,'fun',[{'type',474,'product',[{'var',474,'KeyPos'}|[{'var',474,'QH1'}|[{'var',474,'SortOptions'}]]]}|[{'var',474,'QH2'}]]}|[[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'KeyPos'}|[{'type',475,'key_pos',[]}]]]]}|[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'SortOptions'}|[{'type',476,'sort_options',[]}]]]]}|[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'QH1'}|[{'type',477,'query_handle_or_list',[]}]]]]}|[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'QH2'}|[{'type',478,'query_handle',[]}]]]]}]]]]]]}]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'next_answers',1},[{'type',497,'bounded_fun',[{'type',497,'fun',[{'type',497,'product',[{'var',497,'QueryCursor'}]}|[{'type',498,'union',[{'var',498,'Answers'}|[{'var',498,'Error'}]]}]]}|[[{'type',499,'constraint',[{'atom',499,'is_subtype'}|[[{'var',499,'QueryCursor'}|[{'type',499,'query_cursor',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Answers'}|[{'type',500,'answers',[]}]]]]}|[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'Error'}|[{'type',501,'tuple',[{'atom',501,'error'}|[{'type',501,'module',[]}|[{'var',501,'Reason'}]]]}]]]]}|[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'Reason'}|[{'remote_type',502,[{'atom',502,'file_sorter'}|[{'atom',502,'reason'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 506
		'spec' =
		    %% Line 506
		    [{{'next_answers',2},[{'type',506,'bounded_fun',[{'type',506,'fun',[{'type',506,'product',[{'var',506,'QueryCursor'}|[{'var',506,'NumberOfAnswers'}]]}|[{'type',507,'union',[{'var',507,'Answers'}|[{'var',507,'Error'}]]}]]}|[[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'QueryCursor'}|[{'type',508,'query_cursor',[]}]]]]}|[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'Answers'}|[{'type',509,'answers',[]}]]]]}|[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'NumberOfAnswers'}|[{'type',510,'union',[{'atom',510,'all_remaining'}|[{'type',510,'pos_integer',[]}]]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'Error'}|[{'type',511,'tuple',[{'atom',511,'error'}|[{'type',511,'module',[]}|[{'var',511,'Reason'}]]]}]]]]}|[{'type',512,'constraint',[{'atom',512,'is_subtype'}|[[{'var',512,'Reason'}|[{'remote_type',512,[{'atom',512,'file_sorter'}|[{'atom',512,'reason'}|[[]]]]}]]]]}]]]]]]]}]}],
		%% Line 526
		'spec' =
		    %% Line 526
		    [{{'parse_transform',2},[{'type',526,'bounded_fun',[{'type',526,'fun',[{'type',526,'product',[{'var',526,'Forms'}|[{'var',526,'Options'}]]}|[{'var',526,'Forms2'}]]}|[[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'Forms'}|[{'type',527,'list',[{'remote_type',527,[{'atom',527,'erl_parse'}|[{'atom',527,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'Forms2'}|[{'type',528,'list',[{'remote_type',528,[{'atom',528,'erl_parse'}|[{'atom',528,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'Options'}|[{'type',529,'list',[{'var',529,'Option'}]}]]]]}|[{'type',530,'constraint',[{'atom',530,'is_subtype'}|[[{'var',530,'Option'}|[{'type',530,'union',[{'atom',530,'type_checker'}|[{'remote_type',530,[{'atom',530,'compile'}|[{'atom',530,'option'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 537
		'spec' =
		    %% Line 537
		    [{{'q',1},[{'type',537,'bounded_fun',[{'type',537,'fun',[{'type',537,'product',[{'var',537,'QLC'}]}|[{'var',537,'QH'}]]}|[[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'QLC'}|[{'type',538,'query_list_comprehension',[]}]]]]}|[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'QH'}|[{'type',539,'query_handle',[]}]]]]}]]]]}]}],
		%% Line 543
		'spec' =
		    %% Line 543
		    [{{'q',2},[{'type',543,'bounded_fun',[{'type',543,'fun',[{'type',543,'product',[{'var',543,'QLC'}|[{'var',543,'Options'}]]}|[{'var',543,'QH'}]]}|[[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'QH'}|[{'type',544,'query_handle',[]}]]]]}|[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'Options'}|[{'type',545,'union',[{'type',545,'list',[{'var',545,'Option'}]}|[{'var',545,'Option'}]]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Option'}|[{'type',546,'union',[{'type',546,'tuple',[{'atom',546,'max_lookup'}|[{'var',546,'MaxLookup'}]]}|[{'type',547,'tuple',[{'atom',547,'cache'}|[{'type',547,'cache',[]}]]}|[{'atom',547,'cache'}|[{'type',548,'tuple',[{'atom',548,'join'}|[{'var',548,'Join'}]]}|[{'type',549,'tuple',[{'atom',549,'lookup'}|[{'var',549,'Lookup'}]]}|[{'type',550,'tuple',[{'atom',550,'unique'}|[{'type',550,'boolean',[]}]]}|[{'atom',550,'unique'}]]]]]]]}]]]]}|[{'type',551,'constraint',[{'atom',551,'is_subtype'}|[[{'var',551,'MaxLookup'}|[{'type',551,'union',[{'type',551,'non_neg_integer',[]}|[{'atom',551,'infinity'}]]}]]]]}|[{'type',552,'constraint',[{'atom',552,'is_subtype'}|[[{'var',552,'Join'}|[{'type',552,'union',[{'atom',552,'any'}|[{'atom',552,'lookup'}|[{'atom',552,'merge'}|[{'atom',552,'nested_loop'}]]]]}]]]]}|[{'type',553,'constraint',[{'atom',553,'is_subtype'}|[[{'var',553,'Lookup'}|[{'type',553,'union',[{'type',553,'boolean',[]}|[{'atom',553,'any'}]]}]]]]}|[{'type',554,'constraint',[{'atom',554,'is_subtype'}|[[{'var',554,'QLC'}|[{'type',554,'query_list_comprehension',[]}]]]]}]]]]]]]]]}]}],
		%% Line 567
		'spec' =
		    %% Line 567
		    [{{'sort',1},[{'type',567,'bounded_fun',[{'type',567,'fun',[{'type',567,'product',[{'var',567,'QH1'}]}|[{'var',567,'QH2'}]]}|[[{'type',568,'constraint',[{'atom',568,'is_subtype'}|[[{'var',568,'QH1'}|[{'type',568,'query_handle_or_list',[]}]]]]}|[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'QH2'}|[{'type',569,'query_handle',[]}]]]]}]]]]}]}],
		%% Line 573
		'spec' =
		    %% Line 573
		    [{{'sort',2},[{'type',573,'bounded_fun',[{'type',573,'fun',[{'type',573,'product',[{'var',573,'QH1'}|[{'var',573,'SortOptions'}]]}|[{'var',573,'QH2'}]]}|[[{'type',574,'constraint',[{'atom',574,'is_subtype'}|[[{'var',574,'SortOptions'}|[{'type',574,'sort_options',[]}]]]]}|[{'type',575,'constraint',[{'atom',575,'is_subtype'}|[[{'var',575,'QH1'}|[{'type',575,'query_handle_or_list',[]}]]]]}|[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'QH2'}|[{'type',576,'query_handle',[]}]]]]}]]]]]}]}],
		%% Line 590
		'spec' =
		    %% Line 590
		    [{{'string_to_handle',1},[{'type',590,'bounded_fun',[{'type',590,'fun',[{'type',590,'product',[{'var',590,'QueryString'}]}|[{'type',590,'union',[{'var',590,'QH'}|[{'var',590,'Error'}]]}]]}|[[{'type',591,'constraint',[{'atom',591,'is_subtype'}|[[{'var',591,'QueryString'}|[{'type',591,'string',[]}]]]]}|[{'type',592,'constraint',[{'atom',592,'is_subtype'}|[[{'var',592,'QH'}|[{'type',592,'query_handle',[]}]]]]}|[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'Error'}|[{'type',593,'tuple',[{'atom',593,'error'}|[{'type',593,'module',[]}|[{'var',593,'Reason'}]]]}]]]]}|[{'type',594,'constraint',[{'atom',594,'is_subtype'}|[[{'var',594,'Reason'}|[{'type',594,'union',[{'remote_type',594,[{'atom',594,'erl_parse'}|[{'atom',594,'error_info'}|[[]]]]}|[{'remote_type',594,[{'atom',594,'erl_scan'}|[{'atom',594,'error_info'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 598
		'spec' =
		    %% Line 598
		    [{{'string_to_handle',2},[{'type',598,'bounded_fun',[{'type',598,'fun',[{'type',598,'product',[{'var',598,'QueryString'}|[{'var',598,'Options'}]]}|[{'type',598,'union',[{'var',598,'QH'}|[{'var',598,'Error'}]]}]]}|[[{'type',599,'constraint',[{'atom',599,'is_subtype'}|[[{'var',599,'QueryString'}|[{'type',599,'string',[]}]]]]}|[{'type',600,'constraint',[{'atom',600,'is_subtype'}|[[{'var',600,'Options'}|[{'type',600,'union',[{'type',600,'list',[{'var',600,'Option'}]}|[{'var',600,'Option'}]]}]]]]}|[{'type',601,'constraint',[{'atom',601,'is_subtype'}|[[{'var',601,'Option'}|[{'type',601,'union',[{'type',601,'tuple',[{'atom',601,'max_lookup'}|[{'var',601,'MaxLookup'}]]}|[{'type',602,'tuple',[{'atom',602,'cache'}|[{'type',602,'cache',[]}]]}|[{'atom',602,'cache'}|[{'type',603,'tuple',[{'atom',603,'join'}|[{'var',603,'Join'}]]}|[{'type',604,'tuple',[{'atom',604,'lookup'}|[{'var',604,'Lookup'}]]}|[{'type',605,'tuple',[{'atom',605,'unique'}|[{'type',605,'boolean',[]}]]}|[{'atom',605,'unique'}]]]]]]]}]]]]}|[{'type',606,'constraint',[{'atom',606,'is_subtype'}|[[{'var',606,'MaxLookup'}|[{'type',606,'union',[{'type',606,'non_neg_integer',[]}|[{'atom',606,'infinity'}]]}]]]]}|[{'type',607,'constraint',[{'atom',607,'is_subtype'}|[[{'var',607,'Join'}|[{'type',607,'union',[{'atom',607,'any'}|[{'atom',607,'lookup'}|[{'atom',607,'merge'}|[{'atom',607,'nested_loop'}]]]]}]]]]}|[{'type',608,'constraint',[{'atom',608,'is_subtype'}|[[{'var',608,'Lookup'}|[{'type',608,'union',[{'type',608,'boolean',[]}|[{'atom',608,'any'}]]}]]]]}|[{'type',609,'constraint',[{'atom',609,'is_subtype'}|[[{'var',609,'QH'}|[{'type',609,'query_handle',[]}]]]]}|[{'type',610,'constraint',[{'atom',610,'is_subtype'}|[[{'var',610,'Error'}|[{'type',610,'tuple',[{'atom',610,'error'}|[{'type',610,'module',[]}|[{'var',610,'Reason'}]]]}]]]]}|[{'type',611,'constraint',[{'atom',611,'is_subtype'}|[[{'var',611,'Reason'}|[{'type',611,'union',[{'remote_type',611,[{'atom',611,'erl_parse'}|[{'atom',611,'error_info'}|[[]]]]}|[{'remote_type',611,[{'atom',611,'erl_scan'}|[{'atom',611,'error_info'}|[[]]]]}]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 615
		'spec' =
		    %% Line 615
		    [{{'string_to_handle',3},[{'type',615,'bounded_fun',[{'type',615,'fun',[{'type',615,'product',[{'var',615,'QueryString'}|[{'var',615,'Options'}|[{'var',615,'Bindings'}]]]}|[{'type',615,'union',[{'var',615,'QH'}|[{'var',615,'Error'}]]}]]}|[[{'type',616,'constraint',[{'atom',616,'is_subtype'}|[[{'var',616,'QueryString'}|[{'type',616,'string',[]}]]]]}|[{'type',617,'constraint',[{'atom',617,'is_subtype'}|[[{'var',617,'Options'}|[{'type',617,'union',[{'type',617,'list',[{'var',617,'Option'}]}|[{'var',617,'Option'}]]}]]]]}|[{'type',618,'constraint',[{'atom',618,'is_subtype'}|[[{'var',618,'Option'}|[{'type',618,'union',[{'type',618,'tuple',[{'atom',618,'max_lookup'}|[{'var',618,'MaxLookup'}]]}|[{'type',619,'tuple',[{'atom',619,'cache'}|[{'type',619,'cache',[]}]]}|[{'atom',619,'cache'}|[{'type',620,'tuple',[{'atom',620,'join'}|[{'var',620,'Join'}]]}|[{'type',621,'tuple',[{'atom',621,'lookup'}|[{'var',621,'Lookup'}]]}|[{'type',622,'tuple',[{'atom',622,'unique'}|[{'type',622,'boolean',[]}]]}|[{'atom',622,'unique'}]]]]]]]}]]]]}|[{'type',623,'constraint',[{'atom',623,'is_subtype'}|[[{'var',623,'MaxLookup'}|[{'type',623,'union',[{'type',623,'non_neg_integer',[]}|[{'atom',623,'infinity'}]]}]]]]}|[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'Join'}|[{'type',624,'union',[{'atom',624,'any'}|[{'atom',624,'lookup'}|[{'atom',624,'merge'}|[{'atom',624,'nested_loop'}]]]]}]]]]}|[{'type',625,'constraint',[{'atom',625,'is_subtype'}|[[{'var',625,'Lookup'}|[{'type',625,'union',[{'type',625,'boolean',[]}|[{'atom',625,'any'}]]}]]]]}|[{'type',626,'constraint',[{'atom',626,'is_subtype'}|[[{'var',626,'Bindings'}|[{'remote_type',626,[{'atom',626,'erl_eval'}|[{'atom',626,'binding_struct'}|[[]]]]}]]]]}|[{'type',627,'constraint',[{'atom',627,'is_subtype'}|[[{'var',627,'QH'}|[{'type',627,'query_handle',[]}]]]]}|[{'type',628,'constraint',[{'atom',628,'is_subtype'}|[[{'var',628,'Error'}|[{'type',628,'tuple',[{'atom',628,'error'}|[{'type',628,'module',[]}|[{'var',628,'Reason'}]]]}]]]]}|[{'type',629,'constraint',[{'atom',629,'is_subtype'}|[[{'var',629,'Reason'}|[{'type',629,'union',[{'remote_type',629,[{'atom',629,'erl_parse'}|[{'atom',629,'error_info'}|[[]]]]}|[{'remote_type',629,[{'atom',629,'erl_scan'}|[{'atom',629,'error_info'}|[[]]]]}]]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 664
		'spec' =
		    %% Line 664
		    [{{'table',2},[{'type',664,'bounded_fun',[{'type',664,'fun',[{'type',664,'product',[{'var',664,'TraverseFun'}|[{'var',664,'Options'}]]}|[{'var',664,'QH'}]]}|[[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'TraverseFun'}|[{'type',665,'union',[{'var',665,'TraverseFun0'}|[{'var',665,'TraverseFun1'}]]}]]]]}|[{'type',666,'constraint',[{'atom',666,'is_subtype'}|[[{'var',666,'TraverseFun0'}|[{'type',666,'fun',[{'type',666,'product',[]}|[{'var',666,'TraverseResult'}]]}]]]]}|[{'type',667,'constraint',[{'atom',667,'is_subtype'}|[[{'var',667,'TraverseFun1'}|[{'type',667,'fun',[{'type',667,'product',[{'type',667,'match_expression',[]}]}|[{'var',667,'TraverseResult'}]]}]]]]}|[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'TraverseResult'}|[{'type',668,'union',[{'var',668,'Objects'}|[{'type',668,'term',[]}]]}]]]]}|[{'type',669,'constraint',[{'atom',669,'is_subtype'}|[[{'var',669,'Objects'}|[{'type',669,'union',[{'type',669,'nil',[]}|[{'type',669,'list',[{'type',669,'union',[{'type',669,'term',[]}|[{'var',669,'ObjectList'}]]}]}]]}]]]]}|[{'type',670,'constraint',[{'atom',670,'is_subtype'}|[[{'var',670,'ObjectList'}|[{'type',670,'union',[{'var',670,'TraverseFun0'}|[{'var',670,'Objects'}]]}]]]]}|[{'type',671,'constraint',[{'atom',671,'is_subtype'}|[[{'var',671,'Options'}|[{'type',671,'union',[{'type',671,'list',[{'var',671,'Option'}]}|[{'var',671,'Option'}]]}]]]]}|[{'type',672,'constraint',[{'atom',672,'is_subtype'}|[[{'var',672,'Option'}|[{'type',672,'union',[{'type',672,'tuple',[{'atom',672,'format_fun'}|[{'var',672,'FormatFun'}]]}|[{'type',673,'tuple',[{'atom',673,'info_fun'}|[{'var',673,'InfoFun'}]]}|[{'type',674,'tuple',[{'atom',674,'lookup_fun'}|[{'var',674,'LookupFun'}]]}|[{'type',675,'tuple',[{'atom',675,'parent_fun'}|[{'var',675,'ParentFun'}]]}|[{'type',676,'tuple',[{'atom',676,'post_fun'}|[{'var',676,'PostFun'}]]}|[{'type',677,'tuple',[{'atom',677,'pre_fun'}|[{'var',677,'PreFun'}]]}|[{'type',678,'tuple',[{'atom',678,'key_equality'}|[{'var',678,'KeyComparison'}]]}]]]]]]]}]]]]}|[{'type',679,'constraint',[{'atom',679,'is_subtype'}|[[{'var',679,'FormatFun'}|[{'type',679,'union',[{'atom',679,'undefined'}|[{'type',679,'fun',[{'type',679,'product',[{'var',679,'SelectedObjects'}]}|[{'var',679,'FormatedTable'}]]}]]}]]]]}|[{'type',680,'constraint',[{'atom',680,'is_subtype'}|[[{'var',680,'SelectedObjects'}|[{'type',680,'union',[{'atom',680,'all'}|[{'type',681,'tuple',[{'atom',681,'all'}|[{'var',681,'NElements'}|[{'var',681,'DepthFun'}]]]}|[{'type',682,'tuple',[{'atom',682,'match_spec'}|[{'type',682,'match_expression',[]}]]}|[{'type',683,'tuple',[{'atom',683,'lookup'}|[{'var',683,'Position'}|[{'var',683,'Keys'}]]]}|[{'type',684,'tuple',[{'atom',684,'lookup'}|[{'var',684,'Position'}|[{'var',684,'Keys'}|[{'var',684,'NElements'}|[{'var',684,'DepthFun'}]]]]]}]]]]]}]]]]}|[{'type',685,'constraint',[{'atom',685,'is_subtype'}|[[{'var',685,'NElements'}|[{'type',685,'union',[{'atom',685,'infinity'}|[{'type',685,'pos_integer',[]}]]}]]]]}|[{'type',686,'constraint',[{'atom',686,'is_subtype'}|[[{'var',686,'DepthFun'}|[{'type',686,'fun',[{'type',686,'product',[{'type',686,'term',[]}]}|[{'type',686,'term',[]}]]}]]]]}|[{'type',687,'constraint',[{'atom',687,'is_subtype'}|[[{'var',687,'FormatedTable'}|[{'type',687,'union',[{'type',687,'tuple',[{'var',687,'Mod'}|[{'var',687,'Fun'}|[{'var',687,'Args'}]]]}|[{'type',688,'abstract_expr',[]}|[{'type',689,'string',[]}]]]}]]]]}|[{'type',690,'constraint',[{'atom',690,'is_subtype'}|[[{'var',690,'InfoFun'}|[{'type',690,'union',[{'atom',690,'undefined'}|[{'type',690,'fun',[{'type',690,'product',[{'var',690,'InfoTag'}]}|[{'var',690,'InfoValue'}]]}]]}]]]]}|[{'type',691,'constraint',[{'atom',691,'is_subtype'}|[[{'var',691,'InfoTag'}|[{'type',691,'union',[{'atom',691,'indices'}|[{'atom',691,'is_unique_objects'}|[{'atom',691,'keypos'}|[{'atom',691,'num_of_objects'}]]]]}]]]]}|[{'type',692,'constraint',[{'atom',692,'is_subtype'}|[[{'var',692,'InfoValue'}|[{'type',692,'union',[{'atom',692,'undefined'}|[{'type',692,'term',[]}]]}]]]]}|[{'type',693,'constraint',[{'atom',693,'is_subtype'}|[[{'var',693,'LookupFun'}|[{'type',693,'union',[{'atom',693,'undefined'}|[{'type',693,'fun',[{'type',693,'product',[{'var',693,'Position'}|[{'var',693,'Keys'}]]}|[{'var',693,'LookupResult'}]]}]]}]]]]}|[{'type',694,'constraint',[{'atom',694,'is_subtype'}|[[{'var',694,'LookupResult'}|[{'type',694,'union',[{'type',694,'list',[{'type',694,'term',[]}]}|[{'type',694,'term',[]}]]}]]]]}|[{'type',695,'constraint',[{'atom',695,'is_subtype'}|[[{'var',695,'ParentFun'}|[{'type',695,'union',[{'atom',695,'undefined'}|[{'type',695,'fun',[{'type',695,'product',[]}|[{'var',695,'ParentFunValue'}]]}]]}]]]]}|[{'type',696,'constraint',[{'atom',696,'is_subtype'}|[[{'var',696,'PostFun'}|[{'type',696,'union',[{'atom',696,'undefined'}|[{'type',696,'fun',[{'type',696,'product',[]}|[{'type',696,'term',[]}]]}]]}]]]]}|[{'type',697,'constraint',[{'atom',697,'is_subtype'}|[[{'var',697,'PreFun'}|[{'type',697,'union',[{'atom',697,'undefined'}|[{'type',697,'fun',[{'type',697,'product',[{'var',697,'PreArgs'}]}|[{'type',697,'term',[]}]]}]]}]]]]}|[{'type',698,'constraint',[{'atom',698,'is_subtype'}|[[{'var',698,'PreArgs'}|[{'type',698,'list',[{'var',698,'PreArg'}]}]]]]}|[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'PreArg'}|[{'type',699,'union',[{'type',699,'tuple',[{'atom',699,'parent_value'}|[{'var',699,'ParentFunValue'}]]}|[{'type',699,'tuple',[{'atom',699,'stop_fun'}|[{'var',699,'StopFun'}]]}]]}]]]]}|[{'type',700,'constraint',[{'atom',700,'is_subtype'}|[[{'var',700,'ParentFunValue'}|[{'type',700,'union',[{'atom',700,'undefined'}|[{'type',700,'term',[]}]]}]]]]}|[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'StopFun'}|[{'type',701,'union',[{'atom',701,'undefined'}|[{'type',701,'fun',[{'type',701,'product',[]}|[{'type',701,'term',[]}]]}]]}]]]]}|[{'type',702,'constraint',[{'atom',702,'is_subtype'}|[[{'var',702,'KeyComparison'}|[{'type',702,'union',[{'atom',702,'=:='}|[{'atom',702,'=='}]]}]]]]}|[{'type',703,'constraint',[{'atom',703,'is_subtype'}|[[{'var',703,'Position'}|[{'type',703,'pos_integer',[]}]]]]}|[{'type',704,'constraint',[{'atom',704,'is_subtype'}|[[{'var',704,'Keys'}|[{'type',704,'list',[{'type',704,'term',[]}]}]]]]}|[{'type',705,'constraint',[{'atom',705,'is_subtype'}|[[{'var',705,'Mod'}|[{'type',705,'atom',[]}]]]]}|[{'type',706,'constraint',[{'atom',706,'is_subtype'}|[[{'var',706,'Fun'}|[{'type',706,'atom',[]}]]]]}|[{'type',707,'constraint',[{'atom',707,'is_subtype'}|[[{'var',707,'Args'}|[{'type',707,'list',[{'type',707,'term',[]}]}]]]]}|[{'type',708,'constraint',[{'atom',708,'is_subtype'}|[[{'var',708,'QH'}|[{'type',708,'query_handle',[]}]]]]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]}],
		%% Line 734
		'spec' =
		    %% Line 734
		    [{{'transform_from_evaluator',2},[{'type',734,'bounded_fun',[{'type',734,'fun',[{'type',734,'product',[{'var',734,'LC'}|[{'var',734,'Bs'}]]}|[{'var',734,'Expr'}]]}|[[{'type',735,'constraint',[{'atom',735,'is_subtype'}|[[{'var',735,'LC'}|[{'type',735,'abstract_expr',[]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'Expr'}|[{'type',736,'abstract_expr',[]}]]]]}|[{'type',737,'constraint',[{'atom',737,'is_subtype'}|[[{'var',737,'Bs'}|[{'remote_type',737,[{'atom',737,'erl_eval'}|[{'atom',737,'binding_struct'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 988
		'type' =
		    %% Line 988
		    [{{'record','optz'},[{'record_field',989,{'atom',989,'unique'},{'atom',989,'false'}}|[{'record_field',990,{'atom',990,'cache'},{'atom',990,'false'}}|[{'record_field',991,{'atom',991,'join_option'},{'atom',991,'any'}}|[{'record_field',992,{'atom',992,'fast_join'},{'atom',992,'no'}}|[{'record_field',993,{'atom',993,'opt'}}]]]]],[]}],
		%% Line 997
		'type' =
		    %% Line 997
		    [{{'record','qlc'},[{'record_field',998,{'atom',998,'lcf'}}|[{'record_field',999,{'atom',999,'codef'}}|[{'record_field',1000,{'atom',1000,'qdata'}}|[{'record_field',1001,{'atom',1001,'init_value'}}|[{'record_field',1002,{'atom',1002,'optz'}}]]]]],[]}],
		%% Line 1006
		'type' =
		    %% Line 1006
		    [{{'record','simple_qlc'},[{'record_field',1007,{'atom',1007,'p'}}|[{'record_field',1008,{'atom',1008,'le'}}|[{'record_field',1009,{'atom',1009,'line'}}|[{'record_field',1010,{'atom',1010,'init_value'}}|[{'record_field',1011,{'atom',1011,'optz'}}]]]]],[]}],
		%% Line 1014
		'type' =
		    %% Line 1014
		    [{{'record','prepared'},[{'record_field',1015,{'atom',1015,'qh'}}|[{'record_field',1017,{'atom',1017,'sorted'},{'atom',1017,'no'}}|[{'record_field',1018,{'atom',1018,'sort_info'},{'nil',1018}}|[{'record_field',1019,{'atom',1019,'sort_info2'},{'nil',1019}}|[{'record_field',1020,{'atom',1020,'lu_skip_quals'},{'nil',1020}}|[{'record_field',1021,{'atom',1021,'join'},{'tuple',1021,[{'nil',1021}|[{'nil',1021}]]}}|[{'record_field',1022,{'atom',1022,'n_objs'},{'atom',1022,'undefined'}}|[{'record_field',1023,{'atom',1023,'is_unique_objects'},{'atom',1023,'false'}}|[{'record_field',1024,{'atom',1024,'is_cached'},{'atom',1024,'false'}}]]]]]]]]],[]}],
		%% Line 1406
		'type' =
		    %% Line 1406
		    [{{'record','join'},[{'record_field',1407,{'atom',1407,'op'}}|[{'record_field',1407,{'atom',1407,'q1'}}|[{'record_field',1407,{'atom',1407,'q2'}}|[{'record_field',1407,{'atom',1407,'wh1'}}|[{'record_field',1407,{'atom',1407,'wh2'}}|[{'record_field',1407,{'atom',1407,'cs_fun'}}]]]]]],[]}],
		%% Line 3296
		'type' =
		    %% Line 3296
		    [{{'record','m'},[{'record_field',3296,{'atom',3296,'id'}}|[{'record_field',3296,{'atom',3296,'tmpdir'}}|[{'record_field',3296,{'atom',3296,'max_list'}}|[{'record_field',3296,{'atom',3296,'tmp_usage'}}]]]],[]}],
		%% Line 3785
		'spec' =
		    %% Line 3785
		    [{{'throw_file_error',2},[{'type',3785,'fun',[{'type',3785,'product',[{'type',3785,'string',[]}|[{'type',3785,'tuple',[{'atom',3785,'error'}|[{'type',3785,'atom',[]}]]}]]}|[{'type',3785,'no_return',[]}]]}]}],
		%% Line 3790
		'spec' =
		    %% Line 3790
		    [{{'throw_reason',1},[{'type',3790,'fun',[{'type',3790,'product',[{'type',3790,'term',[]}]}|[{'type',3790,'no_return',[]}]]}]}],
		%% Line 3795
		'spec' =
		    %% Line 3795
		    [{{'throw_error',1},[{'type',3795,'fun',[{'type',3795,'product',[{'type',3795,'term',[]}]}|[{'type',3795,'no_return',[]}]]}]}]]
'get_handle'/1 =
    %% Line 135
    fun (_cor0) ->
	case _cor0 of
	  <{'qlc_handle',H = {'qlc_lc',_cor6,{'qlc_opt',U,C,M}}}> when 'true' ->
	      let <_rec0> =
		  %% Line 137
		  {'qlc_opt',U,C,M,'any',[],'any',524288,'allowed'}
	      in  %% Line 137
		  call 'erlang':'setelement'
		      (3, H, _rec0)
	  %% Line 138
	  <{'qlc_handle',H}> when 'true' ->
	      %% Line 139
	      H
	  %% Line 140
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 141
	      L
	  %% Line 142
	  <_cor10> when 'true' ->
	      %% Line 143
	      'badarg'
	end
'append'/1 =
    %% Line 178
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 179
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 182
			      QH|_cor2]> when 'true' ->
				let <_cor5> =
				    case apply 'get_handle'/1
					     (QH) of
				      %% Line 180
				      <'badarg'> when 'true' ->
					  call 'erlang':'error'
					      ('badarg', [_cor0|[]])
				      %% Line 181
				      <H> when 'true' ->
					  H
				    end
				in  let <_cor6> =
					%% Line 182
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 183
	    {'qlc_handle',{'qlc_append',_cor7}}
'append'/2 =
    %% Line 189
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 190
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 193
			      QH|_cor3]> when 'true' ->
				let <_cor6> =
				    case apply 'get_handle'/1
					     (QH) of
				      %% Line 191
				      <'badarg'> when 'true' ->
					  call 'erlang':'error'
					      ('badarg', [_cor1|[_cor0|[]]])
				      %% Line 192
				      <H> when 'true' ->
					  H
				    end
				in  let <_cor7> =
					%% Line 193
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 193
		       [_cor1|[_cor0|[]]])
	      -| ['list_comprehension'] )
	in  %% Line 194
	    {'qlc_handle',{'qlc_append',_cor8}}
'cursor'/1 =
    %% Line 199
    fun (_cor0) ->
	%% Line 200
	apply 'cursor'/2
	    (_cor0, [])
'cursor'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 213
	    apply 'options'/2
		(_cor0, ['unique_all'|['cache_all'|['tmpdir'|['spawn_options'|['max_list_size'|['tmpdir_usage']]]]]])
	in  let <_cor2> =
		%% Line 216
		apply 'get_handle'/1
		    (_cor1)
	    in  %% Line 213
		case <_cor3,_cor2> of
		  %% Line 217
		  <B1,B2>
		      when let <_cor4> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_cor5> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_cor4, _cor5) ->
		      %% Line 218
		      call 'erlang':'error'
			  ('badarg', [_cor1|[_cor0|[]]])
		  %% Line 219
		  <[GUnique|[GCache|[TmpDir|[SpawnOptions0|[MaxList|[TmpUsage|[]]]]]]],H> when 'true' ->
		      let <SpawnOptions> =
			  %% Line 220
			  apply 'spawn_options'/1
			      (SpawnOptions0)
		      in  %% Line 221
			  case apply 'cursor_process'/7
				   (H, GUnique, GCache, TmpDir, %% Line 222
								SpawnOptions, %% Line 222
									      MaxList, %% Line 222
										       TmpUsage) of
			    %% Line 223
			    <Pid>
				when call 'erlang':'is_pid'
				      (Pid) ->
				let <_cor7> =
				    %% Line 224
				    call 'erlang':'self'
					()
				in  %% Line 224
				    {'qlc_cursor',{Pid,_cor7}}
			    %% Line 225
			    <Error> when 'true' ->
				%% Line 226
				Error
			  end
		  ( <_fol26,_fol27> when 'true' ->
			let <_cor9> = {_fol26,_fol27}
			in  primop 'match_fail'
				({'case_clause',_cor9})
		    -| ['compiler_generated'] )
		end
'delete_cursor'/1 =
    %% Line 232
    fun (_cor0) ->
	case _cor0 of
	  <C = {'qlc_cursor',{_cor3,Owner}}>
	      when try
		    let <_cor1> =
			call 'erlang':'self'
			    ()
		    in  call 'erlang':'=/='
			    (Owner, _cor1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 233
	      call 'erlang':'error'
		  ('not_cursor_owner', [C|[]])
	  %% Line 234
	  <{'qlc_cursor',{Pid,_cor4}}> when 'true' ->
	      %% Line 235
	      apply 'stop_cursor'/1
		  (Pid)
	  %% Line 236
	  <T> when 'true' ->
	      %% Line 237
	      call 'erlang':'error'
		  ('badarg', [T|[]])
	end
'e'/1 =
    %% Line 244
    fun (_cor0) ->
	%% Line 245
	apply 'eval'/2
	    (_cor0, [])
'e'/2 =
    %% Line 258
    fun (_cor1,_cor0) ->
	%% Line 259
	apply 'eval'/2
	    (_cor1, _cor0)
'eval'/1 =
    %% Line 266
    fun (_cor0) ->
	%% Line 267
	apply 'eval'/2
	    (_cor0, [])
'eval'/2 =
    %% Line 280
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 281
	    apply 'options'/2
		(_cor0, ['unique_all'|['cache_all'|['tmpdir'|['max_list_size'|['tmpdir_usage']]]]])
	in  let <_cor2> =
		%% Line 283
		apply 'get_handle'/1
		    (_cor1)
	    in  %% Line 281
		case <_cor3,_cor2> of
		  %% Line 284
		  <B1,B2>
		      when let <_cor4> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_cor5> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_cor4, _cor5) ->
		      %% Line 285
		      call 'erlang':'error'
			  ('badarg', [_cor1|[_cor0|[]]])
		  %% Line 286
		  <[GUnique|[GCache|[TmpDir|[MaxList|[TmpUsage|[]]]]]],Handle> when 'true' ->
		      %% Line 287
		      try
			  let <Prep> =
			      %% Line 288
			      apply 'prepare_qlc'/7
				  (Handle, [], GUnique, GCache, %% Line 289
								TmpDir, %% Line 289
									MaxList, %% Line 289
										 TmpUsage)
			  in  let <_cor7> =
				  %% Line 290
				  call 'erlang':'self'
				      ()
			      in  %% Line 290
				  case apply 'setup_qlc'/2
					   (Prep, {'setup',_cor7}) of
				    %% Line 291
				    <{L,Post,_X_LocalPost}>
					when call 'erlang':'is_list'
					      (L) ->
					do  %% Line 292
					    apply 'post_funs'/1
						(Post)
					    %% Line 293
					    L
				    %% Line 294
				    <{Objs,Post,_X_LocalPost}>
					when call 'erlang':'is_function'
					      (Objs) ->
					%% Line 295
					letrec
					    'after$^0'/0 =
						fun () ->
						    %% Line 298
						    apply 'post_funs'/1
							(Post)
					in  try
						%% Line 296
						apply 'collect'/1
						    (Objs)
					    of <_cor8> ->
						do  ( apply 'after$^0'/0
							  ()
						      -| ['compiler_generated'] )
						    _cor8
					    catch <_cor11,_cor10,_cor9> ->
						do  ( apply 'after$^0'/0
							  ()
						      -| ['compiler_generated'] )
						    primop 'raise'
							(_cor9, _cor10)
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor12})
				      -| ['compiler_generated'] )
				  end
		      of <_cor13> ->
			  _cor13
		      catch <_cor16,_cor15,_cor14> ->
			  case <_cor16,_cor15,_cor14> of
			    %% Line 301
			    <'throw',Term,_cor21> when 'true' ->
				%% Line 302
				case call 'erlang':'get_stacktrace'
					 () of
				  %% Line 303
				  <[{'qlc','throw_error',_cor22,_cor23}|_cor24]> when 'true' ->
				      %% Line 304
				      Term
				  %% Line 305
				  <Stacktrace> when 'true' ->
				      %% Line 306
				      call 'erlang':'raise'
					  ('throw', Term, Stacktrace)
				end
			    ( <_cor16,_cor15,_cor14> when 'true' ->
				  primop 'raise'
				      (_cor14, _cor15)
			      -| ['compiler_generated'] )
			  end
		  ( <_fol34,_fol35> when 'true' ->
			let <_cor18> = {_fol34,_fol35}
			in  primop 'match_fail'
				({'case_clause',_cor18})
		    -| ['compiler_generated'] )
		end
'fold'/3 =
    %% Line 321
    fun (_cor2,_cor1,_cor0) ->
	%% Line 322
	apply 'fold'/4
	    (_cor2, _cor1, _cor0, [])
'fold'/4 =
    %% Line 340
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 341
	    apply 'options'/2
		(_cor0, ['unique_all'|['cache_all'|['tmpdir'|['max_list_size'|['tmpdir_usage']]]]])
	in  let <_cor4> =
		%% Line 343
		apply 'get_handle'/1
		    (_cor1)
	    in  %% Line 341
		case <_cor5,_cor4> of
		  %% Line 344
		  <B1,B2>
		      when let <_cor6> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_cor7> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_cor6, _cor7) ->
		      %% Line 345
		      call 'erlang':'error'
			  ('badarg', [_cor3|[_cor2|[_cor1|[_cor0|[]]]]])
		  %% Line 346
		  <[GUnique|[GCache|[TmpDir|[MaxList|[TmpUsage|[]]]]]],Handle> when 'true' ->
		      %% Line 347
		      try
			  let <Prep> =
			      %% Line 348
			      apply 'prepare_qlc'/7
				  (Handle, 'not_a_list', GUnique, GCache, %% Line 349
									  TmpDir, %% Line 349
										  MaxList, %% Line 349
											   TmpUsage)
			  in  let <_cor9> =
				  %% Line 350
				  call 'erlang':'self'
				      ()
			      in  %% Line 350
				  case apply 'setup_qlc'/2
					   (Prep, {'setup',_cor9}) of
				    %% Line 351
				    <{Objs,Post,_X_LocalPost}>
					when let <_cor10> =
					      call 'erlang':'is_function'
						  (Objs)
					  in  let <_cor11> =
						  %% Line 352
						  call 'erlang':'is_list'
						      (Objs)
					      in  call 'erlang':'or'
						      (_cor10, _cor11) ->
					%% Line 353
					letrec
					    'after$^0'/0 =
						fun () ->
						    %% Line 356
						    apply 'post_funs'/1
							(Post)
					in  try
						%% Line 354
						apply 'fold_loop'/3
						    (_cor3, Objs, _cor2)
					    of <_cor12> ->
						do  ( apply 'after$^0'/0
							  ()
						      -| ['compiler_generated'] )
						    _cor12
					    catch <_cor15,_cor14,_cor13> ->
						do  ( apply 'after$^0'/0
							  ()
						      -| ['compiler_generated'] )
						    primop 'raise'
							(_cor13, _cor14)
				    ( <_cor16> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor16})
				      -| ['compiler_generated'] )
				  end
		      of <_cor17> ->
			  _cor17
		      catch <_cor20,_cor19,_cor18> ->
			  case <_cor20,_cor19,_cor18> of
			    %% Line 359
			    <'throw',Term,_cor27> when 'true' ->
				%% Line 360
				case call 'erlang':'get_stacktrace'
					 () of
				  %% Line 361
				  <[{'qlc','throw_error',_cor28,_cor29}|_cor30]> when 'true' ->
				      %% Line 362
				      Term
				  %% Line 363
				  <Stacktrace> when 'true' ->
				      %% Line 364
				      call 'erlang':'raise'
					  ('throw', Term, Stacktrace)
				end
			    ( <_cor20,_cor19,_cor18> when 'true' ->
				  primop 'raise'
				      (_cor18, _cor19)
			      -| ['compiler_generated'] )
			  end
		  ( <_fol47,_fol48> when 'true' ->
			let <_cor22> = {_fol47,_fol48}
			in  primop 'match_fail'
				({'case_clause',_cor22})
		    -| ['compiler_generated'] )
		end
'format_error'/1 =
    %% Line 372
    fun (_cor0) ->
	case _cor0 of
	  <'not_a_query_list_comprehension'> when 'true' ->
	      %% Line 373
	      call 'io_lib':'format'
		  ([97|[114|[103|[117|[109|[101|[110|[116|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[113|[117|[101|[114|[121|[32|[108|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 374
	  <{'used_generator_variable',V}> when 'true' ->
	      %% Line 375
	      call 'io_lib':'format'
		  ([103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[117|[115|[101|[100|[32|[105|[110|[32|[108|[105|[115|[116|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 376
																																											    [V|[]])
	  %% Line 377
	  <'binary_generator'> when 'true' ->
	      %% Line 378
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[32|[98|[105|[110|[97|[114|[121|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 379
	  <'too_complex_join'> when 'true' ->
	      %% Line 380
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[32|[106|[111|[105|[110|[32|[111|[102|[32|[116|[104|[114|[101|[101|[32|[111|[114|[32|[109|[111|[114|[101|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[115|[32|[101|[102|[102|[105|[99|[105|[101|[110|[116|[108|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 381
																																												   [])
	  %% Line 382
	  <'too_many_joins'> when 'true' ->
	      %% Line 383
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[32|[109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[101|[32|[106|[111|[105|[110|[32|[101|[102|[102|[105|[99|[105|[101|[110|[116|[108|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 384
	  <'nomatch_pattern'> when 'true' ->
	      %% Line 385
	      call 'io_lib':'format'
		  ([112|[97|[116|[116|[101|[114|[110|[32|[99|[97|[110|[110|[111|[116|[32|[112|[111|[115|[115|[105|[98|[108|[121|[32|[109|[97|[116|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 386
	  <'nomatch_filter'> when 'true' ->
	      %% Line 387
	      call 'io_lib':'format'
		  ([102|[105|[108|[116|[101|[114|[32|[101|[118|[97|[108|[117|[97|[116|[101|[115|[32|[116|[111|[32|[39|[102|[97|[108|[115|[101|[39]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 388
	  <{Line,Mod,Reason}>
	      when call 'erlang':'is_integer'
		    (Line) ->
	      let <_cor1> =
		  %% Line 390
		  call Mod:'format_error'
		      (Reason)
	      in  let <_cor2> =
		      %% Line 390
		      call 'lists':'flatten'
			  (_cor1)
		  in  %% Line 389
		      call 'io_lib':'format'
			  ([126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]], %% Line 390
										[Line|[_cor2|[]]])
	  %% Line 392
	  <{'bad_object',FileName}> when 'true' ->
	      %% Line 393
	      call 'io_lib':'format'
		  ([116|[104|[101|[32|[116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[102|[105|[108|[101|[32|[34|[126|[116|[115|[34|[32|[104|[111|[108|[100|[105|[110|[103|[32|[97|[110|[115|[119|[101|[114|[115|[32|[105|[115|[32|[99|[111|[114|[114|[117|[112|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 394
																																							  [FileName|[]])
	  %% Line 395
	  <'bad_object'> when 'true' ->
	      %% Line 396
	      call 'io_lib':'format'
		  ([116|[104|[101|[32|[107|[101|[121|[115|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[101|[32|[101|[120|[116|[114|[97|[99|[116|[101|[100|[32|[102|[114|[111|[109|[32|[115|[111|[109|[101|[32|[116|[101|[114|[109]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 397
	  <{'file_error',FileName,Reason}> when 'true' ->
	      let <_cor3> =
		  %% Line 398
		  call 'file':'format_error'
		      (Reason)
	      in  %% Line 398
		  call 'io_lib':'format'
		      ([34|[126|[116|[115|[34|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]], [FileName|[_cor3|[]]])
	  %% Line 399
	  <{'premature_eof',FileName}> when 'true' ->
	      %% Line 400
	      call 'io_lib':'format'
		  ([34|[126|[116|[115|[34|[58|[32|[101|[110|[100|[45|[111|[102|[45|[102|[105|[108|[101|[32|[119|[97|[115|[32|[101|[110|[99|[111|[117|[110|[116|[101|[114|[101|[100|[32|[105|[110|[115|[105|[100|[101|[32|[115|[111|[109|[101|[32|[98|[105|[110|[97|[114|[121|[32|[116|[101|[114|[109]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 401
																																												[FileName|[]])
	  %% Line 402
	  <{'tmpdir_usage',Why}> when 'true' ->
	      %% Line 403
	      call 'io_lib':'format'
		  ([116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[102|[105|[108|[101|[32|[119|[97|[115|[32|[110|[101|[101|[100|[101|[100|[32|[102|[111|[114|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Why|[]])
	  %% Line 404
	  <{'error',Module,Reason}> when 'true' ->
	      %% Line 405
	      call Module:'format_error'
		  (Reason)
	  %% Line 406
	  <E> when 'true' ->
	      %% Line 407
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'info'/1 =
    %% Line 412
    fun (_cor0) ->
	%% Line 413
	apply 'info'/2
	    (_cor0, [])
'info'/2 =
    %% Line 432
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 433
	    apply 'options'/2
		(_cor0, ['unique_all'|['cache_all'|['flat'|['format'|['n_elements'|['depth'|['tmpdir'|['max_list_size'|['tmpdir_usage']]]]]]]]])
	in  let <_cor2> =
		%% Line 435
		apply 'get_handle'/1
		    (_cor1)
	    in  %% Line 433
		case <_cor3,_cor2> of
		  %% Line 436
		  <B1,B2>
		      when let <_cor4> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_cor5> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_cor4, _cor5) ->
		      %% Line 437
		      call 'erlang':'error'
			  ('badarg', [_cor1|[_cor0|[]]])
		  %% Line 438
		  <[GUnique|[GCache|[Flat|[Format|[NElements|%% Line 439
							     [Depth|[TmpDir|[MaxList|[TmpUsage|[]]]]]]]]]],%% Line 440
													   H> when 'true' ->
		      %% Line 441
		      try
			  let <Prep> =
			      %% Line 442
			      apply 'prepare_qlc'/7
				  (H, [], GUnique, GCache, %% Line 443
							   TmpDir, %% Line 443
								   MaxList, %% Line 443
									    TmpUsage)
			  in  let <Info> =
				  %% Line 444
				  apply 'le_info'/2
				      (Prep, {NElements,Depth})
			      in  let <AbstractCode> =
				      %% Line 445
				      apply 'abstract'/4
					  (Info, Flat, NElements, Depth)
				  in  %% Line 446
				      case Format of
					%% Line 447
					<'abstract_code'> when 'true' ->
					    %% Line 448
					    apply 'abstract_code'/1
						(AbstractCode)
					%% Line 449
					<'string'> when 'true' ->
					    let <Hook> =
						%% Line 450
						( fun (_cor12,_cor11,_cor10,_cor9) ->
						      case <_cor12,_cor11,_cor10,_cor9> of
							<{'special',_X_Line,String},_X_I,_X_P,_X_F> when 'true' ->
							    %% Line 451
							    String
							( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor16,_cor15,_cor14,_cor13})
								-| [{'function_name',{'-info/2-fun-0-',4}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-info/2-fun-0-'}}] )
					    in  let <_cor18> =
						    %% Line 453
						    call 'erl_pp':'expr'
							(AbstractCode, 0, Hook)
						in  %% Line 453
						    call 'lists':'flatten'
							(_cor18)
					%% Line 454
					<'debug'> when 'true' ->
					    %% Line 455
					    Info
					( <_cor19> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor19})
					  -| ['compiler_generated'] )
				      end
		      of <_cor20> ->
			  _cor20
		      catch <_cor23,_cor22,_cor21> ->
			  case <_cor23,_cor22,_cor21> of
			    %% Line 457
			    <'throw',Term,_cor28> when 'true' ->
				%% Line 458
				case call 'erlang':'get_stacktrace'
					 () of
				  %% Line 459
				  <[{'qlc','throw_error',_cor29,_cor30}|_cor31]> when 'true' ->
				      %% Line 460
				      Term
				  %% Line 461
				  <Stacktrace> when 'true' ->
				      %% Line 462
				      call 'erlang':'raise'
					  ('throw', Term, Stacktrace)
				end
			    ( <_cor23,_cor22,_cor21> when 'true' ->
				  primop 'raise'
				      (_cor21, _cor22)
			      -| ['compiler_generated'] )
			  end
		  ( <_fol60,_fol61> when 'true' ->
			let <_cor25> = {_fol60,_fol61}
			in  primop 'match_fail'
				({'case_clause',_cor25})
		    -| ['compiler_generated'] )
		end
'keysort'/2 =
    %% Line 471
    fun (_cor1,_cor0) ->
	%% Line 472
	apply 'keysort'/3
	    (_cor1, _cor0, [])
'keysort'/3 =
    %% Line 479
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 480
	    apply 'is_keypos'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 481
		apply 'options'/2
		    (_cor0, ['tmpdir'|['order'|['unique'|['compressed'|['size'|['no_files']]]]]])
	    in  let <_cor3> =
		    %% Line 483
		    apply 'get_handle'/1
			(_cor1)
		in  %% Line 480
		    case <_cor5,_cor4,_cor3> of
		      %% Line 484
		      <'true',[TmpDir|[Order|[Unique|[Compressed|_cor11]]]],H>
			  when call 'erlang':'=/='
				(H,
				 'badarg') ->
			  let <_cor6> =
			      %% Line 489
			      apply 'listify'/1
				  (_cor0)
			  in  %% Line 485
			      {'qlc_handle',{'qlc_sort',H,{'keysort',_cor2},%% Line 486
									    Unique,%% Line 487
										   Compressed,%% Line 488
											      Order,_cor6,'allowed',%% Line 490
														    TmpDir}}
		      %% Line 491
		      <_fol66,_fol67,_fol68> when 'true' ->
			  %% Line 492
			  call 'erlang':'error'
			      ('badarg', [_cor2|[_cor1|[_cor0|[]]]])
		    end
'next_answers'/1 =
    %% Line 503
    fun (_cor0) ->
	%% Line 504
	apply 'next_answers'/2
	    (_cor0, 10)
'next_answers'/2 =
    %% Line 513
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <C = {'qlc_cursor',{_cor10,Owner}},%% Line 514
					     NumOfAnswers>
	      when %% Line 514
		try
		    let <_cor2> =
			call 'erlang':'self'
			    ()
		    in  call 'erlang':'=/='
			    (Owner, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 515
	      call 'erlang':'error'
		  ('not_cursor_owner', [C|[NumOfAnswers|[]]])
	  %% Line 516
	  <C = {'qlc_cursor',{Pid,_cor11}},NumOfAnswers> when 'true' ->
	      let <_cor6> =
		  %% Line 517
		  case NumOfAnswers of
		    %% Line 518
		    <'all_remaining'> when 'true' ->
			-1
		    %% Line 519
		    <_cor12>
			when let <_cor3> =
			      call 'erlang':'is_integer'
				  (NumOfAnswers)
			  in  let <_cor4> =
				  call 'erlang':'>'
				      (NumOfAnswers, 0)
			      in  call 'erlang':'and'
				      (_cor3, _cor4) ->
			NumOfAnswers
		    %% Line 520
		    <_cor13> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [C|[NumOfAnswers|[]]])
		  end
	      in  %% Line 522
		  apply 'next_loop'/3
		      (Pid, [], _cor6)
	  %% Line 523
	  <T1,T2> when 'true' ->
	      %% Line 524
	      call 'erlang':'error'
		  ('badarg', [T1|[T2|[]]])
	end
'parse_transform'/2 =
    %% Line 532
    fun (_cor1,_cor0) ->
	%% Line 533
	call 'qlc_pt':'parse_transform'
	    (_cor1, _cor0)
'q'/1 =
    %% Line 540
    fun (_cor0) ->
	%% Line 541
	apply 'q'/2
	    (_cor0, [])
'q'/2 =
    %% Line 555
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <QLC_lc = {'qlc_lc',_cor10,_cor11},Options> when 'true' ->
	      %% Line 556
	      case apply 'options'/2
		       (Options, ['unique'|['cache'|['max_lookup'|['join'|['lookup']]]]]) of
		%% Line 557
		<[Unique|[Cache|[Max|[Join|[Lookup|[]]]]]]> when 'true' ->
		    let <Opt> =
			%% Line 558
			{'qlc_opt',Unique,Cache,%% Line 559
						Max,%% Line 559
						    Join,[],%% Line 559
							    Lookup,524288,'allowed'}
		    in  let <_cor6> =
			    %% Line 560
			    call 'erlang':'setelement'
				(3, QLC_lc, Opt)
			in  %% Line 560
			    {'qlc_handle',_cor6}
		%% Line 561
		<_cor15> when 'true' ->
		    %% Line 562
		    call 'erlang':'error'
			('badarg', [QLC_lc|[Options|[]]])
	      end
	  %% Line 564
	  <T1,T2> when 'true' ->
	      %% Line 565
	      call 'erlang':'error'
		  ('badarg', [T1|[T2|[]]])
	end
'sort'/1 =
    %% Line 570
    fun (_cor0) ->
	%% Line 571
	apply 'sort'/2
	    (_cor0, [])
'sort'/2 =
    %% Line 577
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 578
	    apply 'options'/2
		(_cor0, ['tmpdir'|['order'|['unique'|['compressed'|['size'|['no_files']]]]]])
	in  let <_cor2> =
		%% Line 579
		apply 'get_handle'/1
		    (_cor1)
	    in  %% Line 578
		case <_cor3,_cor2> of
		  %% Line 580
		  <B1,B2>
		      when let <_cor4> =
			    call 'erlang':'=:='
				(B1, 'badarg')
			in  let <_cor5> =
				call 'erlang':'=:='
				    (B2, 'badarg')
			    in  call 'erlang':'or'
				    (_cor4, _cor5) ->
		      %% Line 581
		      call 'erlang':'error'
			  ('badarg', [_cor1|[_cor0|[]]])
		  %% Line 582
		  <[TD|[Order|[Unique|[Compressed|_cor10]]]],H> when 'true' ->
		      let <_cor6> =
			  %% Line 585
			  apply 'listify'/1
			      (_cor0)
		      in  %% Line 583
			  {'qlc_handle',{'qlc_sort',H,'sort',Unique,%% Line 584
								    Compressed,%% Line 584
									       Order,_cor6,'allowed',%% Line 586
												     TD}}
		  ( <_fol85,_fol86> when 'true' ->
			let <_cor7> = {_fol85,_fol86}
			in  primop 'match_fail'
				({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
'string_to_handle'/1 =
    %% Line 595
    fun (_cor0) ->
	%% Line 596
	apply 'string_to_handle'/2
	    (_cor0, [])
'string_to_handle'/2 =
    %% Line 612
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 613
	    call 'erl_eval':'new_bindings'
		()
	in  %% Line 613
	    apply 'string_to_handle'/3
		(_cor1, _cor0, _cor2)
'string_to_handle'/3 =
    %% Line 630
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Str,Options,Bindings>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 631
	      case apply 'options'/2
		       (Options, ['unique'|['cache'|['max_lookup'|['join'|['lookup']]]]]) of
		%% Line 632
		<'badarg'> when 'true' ->
		    %% Line 633
		    call 'erlang':'error'
			('badarg', [Str|[Options|[Bindings|[]]]])
		%% Line 634
		<[Unique|[Cache|[MaxLookup|[Join|[Lookup|[]]]]]]> when 'true' ->
		    %% Line 635
		    case call 'erl_scan':'string'
			     (Str) of
		      %% Line 636
		      <{'ok',Tokens,_cor16}> when 'true' ->
			  %% Line 637
			  case call 'erl_parse':'parse_exprs'
				   (Tokens) of
			    %% Line 638
			    <{'ok',[Expr|[]]}> when 'true' ->
				%% Line 639
				case call 'qlc_pt':'transform_expression'
					 (Expr, Bindings) of
				  %% Line 640
				  <{'ok',{'call',_cor17,_X_QlcQ,Handle}}> when 'true' ->
				      %% Line 641
				      case %% Line 642
					   call 'erl_eval':'exprs'
					       (Handle, Bindings) of
					<{'value',QLC_lc,_cor18}> when 'true' ->
					    let <O> =
						%% Line 643
						{'qlc_opt',Unique,%% Line 644
								  Cache,%% Line 645
									MaxLookup,%% Line 646
										  Join,[],%% Line 647
											  Lookup,524288,'allowed'}
					    in  %% Line 648
						case QLC_lc of
						  <{'qlc_lc',_cor19,_cor20}> when 'true' ->
						      let <_cor8> =
							  call 'erlang':'setelement'
							      (3, QLC_lc, O)
						      in  {'qlc_handle',_cor8}
						  ( <_cor21> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','qlc_lc'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					( <_cor3> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor3})
					  -| ['compiler_generated'] )
				      end
				  %% Line 649
				  <{'not_ok',[{'error',Error}|_cor22]}> when 'true' ->
				      %% Line 650
				      apply 'error'/1
					  (Error)
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor9})
				    -| ['compiler_generated'] )
				end
			    %% Line 652
			    <{'ok',_X_ExprList}> when 'true' ->
				%% Line 653
				call 'erlang':'error'
				    ('badarg', [Str|[Options|[Bindings|[]]]])
			    %% Line 654
			    <{'error',ErrorInfo}> when 'true' ->
				%% Line 655
				apply 'error'/1
				    (ErrorInfo)
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
		      %% Line 657
		      <{'error',ErrorInfo,_X_EndLine}> when 'true' ->
			  %% Line 658
			  apply 'error'/1
			      (ErrorInfo)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 661
	  <T1,T2,T3> when 'true' ->
	      %% Line 662
	      call 'erlang':'error'
		  ('badarg', [T1|[T2|[T3|[]]]])
	end
'table'/2 =
    %% Line 709
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TraverseFun,Options>
	      when call 'erlang':'is_function'
		    (TraverseFun) ->
	      let <_cor4> =
		  %% Line 710
		  call 'erlang':'is_function'
		      (TraverseFun, 0)
	      in  let <_cor3> =
		      %% Line 711
		      call 'erlang':'is_function'
			  (TraverseFun, 1)
		  in  %% Line 710
		      case <_cor4,_cor3> of
			%% Line 712
			<'false','false'> when 'true' ->
			    %% Line 713
			    call 'erlang':'error'
				('badarg', [TraverseFun|[Options|[]]])
			%% Line 714
			<_fol92,_fol93> when 'true' ->
			    %% Line 715
			    case apply 'options'/2
				     (Options, ['pre_fun'|['post_fun'|['info_fun'|['format_fun'|['lookup_fun'|['parent_fun'|['key_equality']]]]]]]) of
			      %% Line 717
			      <[PreFun|[PostFun|[InfoFun|[FormatFun|[LookupFun|[ParentFun|%% Line 718
											  [KeyEquality|[]]]]]]]]> when 'true' ->
				  let <T> =
				      %% Line 719
				      {'qlc_table',TraverseFun,_cor3,PreFun,%% Line 720
									    PostFun,%% Line 720
										    InfoFun,%% Line 723
											    FormatFun,%% Line 724
												      LookupFun,%% Line 721
														ParentFun,%% Line 725
															  KeyEquality,'undefined','no_match_spec'}
				  in  %% Line 726
				      {'qlc_handle',T}
			      %% Line 727
			      <'badarg'> when 'true' ->
				  %% Line 728
				  call 'erlang':'error'
				      ('badarg', [TraverseFun|[Options|[]]])
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
		      end
	  %% Line 731
	  <T1,T2> when 'true' ->
	      %% Line 732
	      call 'erlang':'error'
		  ('badarg', [T1|[T2|[]]])
	end
'transform_from_evaluator'/2 =
    %% Line 739
    fun (_cor1,_cor0) ->
	%% Line 740
	call 'qlc_pt':'transform_from_evaluator'
	    (_cor1, _cor0)
'template_state'/0 =
    %% Line 744
    fun () ->
	%% Line 745
	1
'aux_name'/3 =
    %% Line 747
    fun (_cor2,_cor1,_cor0) ->
	%% Line 748
	case apply 'aux_name1'/3
		 (_cor2, _cor1, _cor0) of
	  <{VN,_cor7}> when 'true' ->
	      %% Line 749
	      VN
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'name_suffix'/2 =
    %% Line 751
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 752
	    call 'lists':'concat'
		([_cor1|[_cor0|[]]])
	in  %% Line 752
	    call 'erlang':'list_to_atom'
		(_cor2)
'vars'/1 =
    %% Line 754
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 755
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'var',_X_L,V}> when 'true' ->
			V
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-vars/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-vars/1-fun-0-'}}] )
	in  %% Line 755
	    apply 'var_ufold'/2
		(_cor3, _cor0)
'var_ufold'/2 =
    %% Line 757
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 758
	    apply 'var_fold'/3
		(_cor1, [], _cor0)
	in  %% Line 758
	    call 'ordsets':'from_list'
		(_cor2)
'all_selections'/1 =
    %% Line 760
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 761
	      [[]]
	  %% Line 762
	  <[{I,Cs}|ICs]> when 'true' ->
	      %% Line 763
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor6) ->
			    case _cor6 of
			      <[C|_cor2]> when 'true' ->
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor7) ->
						case _cor7 of
						  <[L|_cor4]> when 'true' ->
						      let <_cor8> =
							  apply 'lc$^1'/1
							      (_cor4)
						      in  ( [[{I,C}|L]|_cor8]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor2)
						  ( <_cor7> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor7})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor5> =
					    apply 'all_selections'/1
						(ICs)
					in  apply 'lc$^1'/1
						(_cor5)
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Cs)
		-| ['list_comprehension'] )
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'all_selections',1}}] )
	    -| ['compiler_generated'] )
	end
'aux_name1'/3 =
    %% Line 769
    fun (_cor2,_cor1,_cor0) ->
	let <SN> =
	    %% Line 770
	    apply 'name_suffix'/2
		(_cor2, _cor1)
	in  %% Line 771
	    case call 'sets':'is_element'
		     (SN, _cor0) of
	      %% Line 772
	      <'true'> when 'true' ->
		  let <_cor4> =
		      call 'erlang':'+'
			  (_cor1, 1)
		  in  apply 'aux_name1'/3
			  (_cor2, _cor4, _cor0)
	      %% Line 773
	      <'false'> when 'true' ->
		  {SN,_cor1}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'var_fold'/3 =
    %% Line 776
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,A,Var = {'var',_cor9,V}>
	      when call 'erlang':'=/='
		    (V,
		     '_') ->
	      let <_cor3> =
		  %% Line 777
		  apply F
		      (Var)
	      in  %% Line 777
		  [_cor3|A]
	  %% Line 778
	  <F,A,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor4> =
		  %% Line 779
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 779
		  apply 'var_fold'/3
		      (F, A, _cor4)
	  %% Line 780
	  <F,A,[E|Es]> when 'true' ->
	      let <_cor5> =
		  %% Line 781
		  apply 'var_fold'/3
		      (F, A, E)
	      in  %% Line 781
		  apply 'var_fold'/3
		      (F, _cor5, Es)
	  %% Line 782
	  <_X_F,A,_X_T> when 'true' ->
	      %% Line 783
	      A
	end
'options'/2 =
    %% Line 785
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Options,Keys>
	      when call 'erlang':'is_list'
		    (Options) ->
	      %% Line 786
	      apply 'options'/3
		  (Options, Keys, [])
	  %% Line 787
	  <Option,Keys> when 'true' ->
	      %% Line 788
	      apply 'options'/3
		  ([Option|[]], Keys, [])
	end
'options'/3 =
    %% Line 790
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Options0,[Key|Keys],L>
	      when call 'erlang':'is_list'
		    (Options0) ->
	      let <_cor6> =
		  %% Line 791
		  case call 'lists':'member'
			   (Key, Options0) of
		    %% Line 792
		    <'true'> when 'true' ->
			let <_cor3> =
			    %% Line 793
			    apply 'atom_option'/1
				(Key)
			in  let <_cor4> =
				%% Line 793
				call 'lists':'delete'
				    (Key, Options0)
			    in  %% Line 793
				[_cor3|_cor4]
		    %% Line 794
		    <'false'> when 'true' ->
			%% Line 795
			Options0
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor66> =
		      %% Line 797
		      case call 'lists':'keyfind'
			       (Key, 1, _cor6) of
			%% Line 798
			<{'format_fun',U = 'undefined'}> when 'true' ->
			    %% Line 799
			    {'ok',U}
			%% Line 800
			<{'info_fun',U = 'undefined'}> when 'true' ->
			    %% Line 801
			    {'ok',U}
			%% Line 802
			<{'lookup_fun',U = 'undefined'}> when 'true' ->
			    %% Line 803
			    {'ok',U}
			%% Line 804
			<{'parent_fun',U = 'undefined'}> when 'true' ->
			    %% Line 805
			    {'ok',U}
			%% Line 806
			<{'post_fun',U = 'undefined'}> when 'true' ->
			    %% Line 807
			    {'ok',U}
			%% Line 808
			<{'pre_fun',U = 'undefined'}> when 'true' ->
			    %% Line 809
			    {'ok',U}
			%% Line 810
			<{'info_fun',Fun}>
			    when try
				  let <_cor8> =
				      call 'erlang':'is_function'
					  (Fun)
				  in  let <_cor9> =
					  call 'erlang':'is_function'
					      (Fun, 1)
				      in  call 'erlang':'and'
					      (_cor8, _cor9)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 811
			    {'ok',Fun}
			%% Line 812
			<{'pre_fun',Fun}>
			    when try
				  let <_cor10> =
				      call 'erlang':'is_function'
					  (Fun)
				  in  let <_cor11> =
					  call 'erlang':'is_function'
					      (Fun, 1)
				      in  call 'erlang':'and'
					      (_cor10, _cor11)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 813
			    {'ok',Fun}
			%% Line 814
			<{'post_fun',Fun}>
			    when try
				  let <_cor12> =
				      call 'erlang':'is_function'
					  (Fun)
				  in  let <_cor13> =
					  call 'erlang':'is_function'
					      (Fun, 0)
				      in  call 'erlang':'and'
					      (_cor12, _cor13)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 815
			    {'ok',Fun}
			%% Line 816
			<{'lookup_fun',Fun}>
			    when try
				  let <_cor14> =
				      call 'erlang':'is_function'
					  (Fun)
				  in  let <_cor15> =
					  call 'erlang':'is_function'
					      (Fun, 2)
				      in  call 'erlang':'and'
					      (_cor14, _cor15)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 817
			    {'ok',Fun}
			%% Line 818
			<{'max_lookup',Max}>
			    when let <_cor16> =
				  call 'erlang':'is_integer'
				      (Max)
			      in  let <_cor17> =
				      call 'erlang':'>='
					  (Max, 0)
				  in  call 'erlang':'and'
					  (_cor16, _cor17) ->
			    %% Line 819
			    {'ok',Max}
			%% Line 820
			<{'max_lookup','infinity'}> when 'true' ->
			    %% Line 821
			    {'ok',-1}
			%% Line 822
			<{'format_fun',Fun}>
			    when try
				  let <_cor19> =
				      call 'erlang':'is_function'
					  (Fun)
				  in  let <_cor20> =
					  call 'erlang':'is_function'
					      (Fun, 1)
				      in  call 'erlang':'and'
					      (_cor19, _cor20)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 823
			    {'ok',Fun}
			%% Line 824
			<{'parent_fun',Fun}>
			    when try
				  let <_cor21> =
				      call 'erlang':'is_function'
					  (Fun)
				  in  let <_cor22> =
					  call 'erlang':'is_function'
					      (Fun, 0)
				      in  call 'erlang':'and'
					      (_cor21, _cor22)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 825
			    {'ok',Fun}
			%% Line 826
			<{'key_equality',KE = '=='}> when 'true' ->
			    %% Line 827
			    {'ok',KE}
			%% Line 828
			<{'key_equality',KE = '=:='}> when 'true' ->
			    %% Line 829
			    {'ok',KE}
			%% Line 830
			<{'join',J = 'any'}> when 'true' ->
			    %% Line 831
			    {'ok',J}
			%% Line 832
			<{'join',J = 'nested_loop'}> when 'true' ->
			    %% Line 833
			    {'ok',J}
			%% Line 834
			<{'join',J = 'merge'}> when 'true' ->
			    %% Line 835
			    {'ok',J}
			%% Line 836
			<{'join',J = 'lookup'}> when 'true' ->
			    %% Line 837
			    {'ok',J}
			%% Line 838
			<{'lookup',LookUp}>
			    when let <_cor23> =
				  call 'erlang':'is_boolean'
				      (LookUp)
			      in  let <_cor24> =
				      call 'erlang':'=:='
					  (LookUp, 'any')
				  in  call 'erlang':'or'
					  (_cor23, _cor24) ->
			    %% Line 839
			    {'ok',LookUp}
			%% Line 840
			<{'max_list_size',Max}>
			    when let <_cor25> =
				  call 'erlang':'is_integer'
				      (Max)
			      in  let <_cor26> =
				      call 'erlang':'>='
					  (Max, 0)
				  in  call 'erlang':'and'
					  (_cor25, _cor26) ->
			    %% Line 841
			    {'ok',Max}
			%% Line 842
			<{'tmpdir_usage',TmpUsage}>
			    when let <_cor27> =
				  call 'erlang':'=:='
				      (TmpUsage, 'allowed')
			      in  let <_cor28> =
				      %% Line 843
				      call 'erlang':'=:='
					  (TmpUsage, 'not_allowed')
				  in  let <_cor29> =
					  %% Line 844
					  call 'erlang':'=:='
					      (TmpUsage, 'info_msg')
				      in  let <_cor30> =
					      %% Line 845
					      call 'erlang':'=:='
						  (TmpUsage, 'warning_msg')
					  in  let <_cor31> =
						  %% Line 846
						  call 'erlang':'=:='
						      (TmpUsage, 'error_msg')
					      in  let <_cor32> =
						      %% Line 845
						      call 'erlang':'or'
							  (_cor30, _cor31)
						  in  let <_cor33> =
							  %% Line 844
							  call 'erlang':'or'
							      (_cor29, _cor32)
						      in  let <_cor34> =
							      %% Line 843
							      call 'erlang':'or'
								  (_cor28, _cor33)
							  in  call 'erlang':'or'
								  (_cor27, _cor34) ->
			    %% Line 847
			    {'ok',TmpUsage}
			%% Line 848
			<{'unique',Unique}>
			    when call 'erlang':'is_boolean'
				  (Unique) ->
			    %% Line 849
			    {'ok',Unique}
			%% Line 850
			<{'cache',Cache}>
			    when let <_cor35> =
				  call 'erlang':'is_boolean'
				      (Cache)
			      in  let <_cor36> =
				      call 'erlang':'=:='
					  (Cache, 'list')
				  in  call 'erlang':'or'
					  (_cor35, _cor36) ->
			    %% Line 851
			    {'ok',Cache}
			%% Line 852
			<{'cache','ets'}> when 'true' ->
			    %% Line 853
			    {'ok','true'}
			%% Line 854
			<{'cache','no'}> when 'true' ->
			    %% Line 855
			    {'ok','false'}
			%% Line 856
			<{'unique_all',UniqueAll}>
			    when call 'erlang':'is_boolean'
				  (UniqueAll) ->
			    %% Line 857
			    {'ok',UniqueAll}
			%% Line 858
			<{'cache_all',CacheAll}>
			    when let <_cor37> =
				  call 'erlang':'is_boolean'
				      (CacheAll)
			      in  let <_cor38> =
				      %% Line 859
				      call 'erlang':'=:='
					  (CacheAll, 'list')
				  in  call 'erlang':'or'
					  (_cor37, _cor38) ->
			    %% Line 860
			    {'ok',CacheAll}
			%% Line 861
			<{'cache_all','ets'}> when 'true' ->
			    %% Line 862
			    {'ok','true'}
			%% Line 863
			<{'cache_all','no'}> when 'true' ->
			    %% Line 864
			    {'ok','false'}
			%% Line 865
			<{'spawn_options','default'}> when 'true' ->
			    %% Line 866
			    {'ok','default'}
			%% Line 867
			<{'spawn_options',SpawnOptions}> when 'true' ->
			    %% Line 868
			    case apply 'is_proper_list'/1
				     (SpawnOptions) of
			      %% Line 869
			      <'true'> when 'true' ->
				  %% Line 870
				  {'ok',SpawnOptions}
			      %% Line 871
			      <'false'> when 'true' ->
				  %% Line 872
				  'badarg'
			      ( <_cor39> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor39})
				-| ['compiler_generated'] )
			    end
			%% Line 874
			<{'flat',Flat}>
			    when call 'erlang':'is_boolean'
				  (Flat) ->
			    %% Line 875
			    {'ok',Flat}
			%% Line 876
			<{'format',Format}>
			    when let <_cor40> =
				  call 'erlang':'=:='
				      (Format, 'string')
			      in  let <_cor41> =
				      %% Line 877
				      call 'erlang':'=:='
					  (Format, 'abstract_code')
				  in  let <_cor42> =
					  %% Line 878
					  call 'erlang':'=:='
					      (Format, 'debug')
				      in  let <_cor43> =
					      %% Line 877
					      call 'erlang':'or'
						  (_cor41, _cor42)
					  in  call 'erlang':'or'
						  (_cor40, _cor43) ->
			    %% Line 879
			    {'ok',Format}
			%% Line 880
			<{'n_elements',NElements}>
			    when let <_cor44> =
				  call 'erlang':'=:='
				      (NElements, 'infinity')
			      in  let <_cor47> =
				      let <_cor45> =
					  %% Line 881
					  call 'erlang':'is_integer'
					      (NElements)
				      in  let <_cor46> =
					      %% Line 882
					      call 'erlang':'>'
						  (NElements, 0)
					  in  %% Line 881
					      call 'erlang':'and'
						  (_cor45, _cor46)
				  in  call 'erlang':'or'
					  (_cor44, _cor47) ->
			    %% Line 883
			    {'ok',NElements}
			%% Line 884
			<{'depth',Depth}>
			    when let <_cor48> =
				  call 'erlang':'=:='
				      (Depth, 'infinity')
			      in  let <_cor51> =
				      let <_cor49> =
					  %% Line 885
					  call 'erlang':'is_integer'
					      (Depth)
				      in  let <_cor50> =
					      %% Line 885
					      call 'erlang':'>='
						  (Depth, 0)
					  in  %% Line 885
					      call 'erlang':'and'
						  (_cor49, _cor50)
				  in  call 'erlang':'or'
					  (_cor48, _cor51) ->
			    %% Line 886
			    {'ok',Depth}
			%% Line 887
			<{'order',Order}>
			    when let <_cor54> =
				  try
				      let <_cor52> =
					  call 'erlang':'is_function'
					      (Order)
				      in  let <_cor53> =
					      call 'erlang':'is_function'
						  (Order, 2)
					  in  call 'erlang':'and'
						  (_cor52, _cor53)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  let <_cor55> =
				      %% Line 888
				      call 'erlang':'=:='
					  (Order, 'ascending')
				  in  let <_cor56> =
					  %% Line 889
					  call 'erlang':'=:='
					      (Order, 'descending')
				      in  let <_cor57> =
					      %% Line 888
					      call 'erlang':'or'
						  (_cor55, _cor56)
					  in  call 'erlang':'or'
						  (_cor54, _cor57) ->
			    %% Line 890
			    {'ok',Order}
			%% Line 891
			<{'compressed',Comp}>
			    when call 'erlang':'=:='
				  (Comp,
				   'true') ->
			    %% Line 892
			    {'ok',['compressed']}
			%% Line 893
			<{'compressed',Comp}>
			    when let <_cor58> =
				  call 'erlang':'=:='
				      (Comp, 'false')
			      in  let <_cor59> =
				      call 'erlang':'is_boolean'
					  (Comp)
				  in  call 'erlang':'and'
					  (_cor58, _cor59) ->
			    %% Line 894
			    {'ok',[]}
			%% Line 895
			<{'tmpdir',T}> when 'true' ->
			    %% Line 896
			    {'ok',T}
			%% Line 897
			<{'size',Size}>
			    when let <_cor60> =
				  call 'erlang':'is_integer'
				      (Size)
			      in  let <_cor61> =
				      call 'erlang':'>'
					  (Size, 0)
				  in  call 'erlang':'and'
					  (_cor60, _cor61) ->
			    %% Line 898
			    {'ok',Size}
			%% Line 899
			<{'no_files',NoFiles}>
			    when let <_cor62> =
				  call 'erlang':'is_integer'
				      (NoFiles)
			      in  let <_cor63> =
				      call 'erlang':'>'
					  (NoFiles, 1)
				  in  call 'erlang':'and'
					  (_cor62, _cor63) ->
			    %% Line 900
			    {'ok',NoFiles}
			%% Line 901
			<{_cor73,_cor74}>
			    when call 'erlang':'=:='
				  (_cor73,
				   Key) ->
			    %% Line 902
			    'badarg'
			%% Line 903
			<'false'> when 'true' ->
			    let <Default> =
				%% Line 904
				apply 'default_option'/1
				    (Key)
			    in  %% Line 905
				{'ok',Default}
			( <_cor65> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor65})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 907
		      case _cor66 of
			%% Line 908
			<'badarg'> when 'true' ->
			    %% Line 909
			    'badarg'
			%% Line 910
			<{'ok',Value}> when 'true' ->
			    let <NewOptions> =
				%% Line 911
				call 'lists':'keydelete'
				    (Key, 1, _cor6)
			    in  %% Line 912
				apply 'options'/3
				    (NewOptions, Keys, [Value|L])
			( <_cor69> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor69})
			  -| ['compiler_generated'] )
		      end
	  %% Line 914
	  <[],[],L> when 'true' ->
	      %% Line 915
	      call 'lists':'reverse'
		  (L)
	  %% Line 916
	  <_X_Options,_cor75,_X_L> when 'true' ->
	      %% Line 917
	      'badarg'
	end
'default_option'/1 =
    %% Line 919
    fun (_cor0) ->
	case _cor0 of
	  <'pre_fun'> when 'true' ->
	      'undefined'
	  %% Line 920
	  <'post_fun'> when 'true' ->
	      'undefined'
	  %% Line 921
	  <'info_fun'> when 'true' ->
	      'undefined'
	  %% Line 922
	  <'format_fun'> when 'true' ->
	      'undefined'
	  %% Line 923
	  <'lookup_fun'> when 'true' ->
	      'undefined'
	  %% Line 924
	  <'max_lookup'> when 'true' ->
	      -1
	  %% Line 925
	  <'join'> when 'true' ->
	      'any'
	  %% Line 926
	  <'lookup'> when 'true' ->
	      'any'
	  %% Line 927
	  <'parent_fun'> when 'true' ->
	      'undefined'
	  %% Line 928
	  <'key_equality'> when 'true' ->
	      '=:='
	  %% Line 929
	  <'spawn_options'> when 'true' ->
	      'default'
	  %% Line 930
	  <'flat'> when 'true' ->
	      'true'
	  %% Line 931
	  <'format'> when 'true' ->
	      'string'
	  %% Line 932
	  <'n_elements'> when 'true' ->
	      'infinity'
	  %% Line 933
	  <'depth'> when 'true' ->
	      'infinity'
	  %% Line 934
	  <'max_list_size'> when 'true' ->
	      524288
	  %% Line 935
	  <'tmpdir_usage'> when 'true' ->
	      'allowed'
	  %% Line 936
	  <'cache'> when 'true' ->
	      'false'
	  %% Line 937
	  <'cache_all'> when 'true' ->
	      'false'
	  %% Line 938
	  <'unique'> when 'true' ->
	      'false'
	  %% Line 939
	  <'unique_all'> when 'true' ->
	      'false'
	  %% Line 940
	  <'order'> when 'true' ->
	      'ascending'
	  %% Line 941
	  <'compressed'> when 'true' ->
	      []
	  %% Line 942
	  <'tmpdir'> when 'true' ->
	      []
	  %% Line 943
	  <'size'> when 'true' ->
	      524288
	  %% Line 944
	  <'no_files'> when 'true' ->
	      16
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'default_option',1}}] )
	    -| ['compiler_generated'] )
	end
'atom_option'/1 =
    %% Line 946
    fun (_cor0) ->
	case _cor0 of
	  <'cache'> when 'true' ->
	      {'cache','true'}
	  %% Line 947
	  <'unique'> when 'true' ->
	      {'unique','true'}
	  %% Line 948
	  <'cache_all'> when 'true' ->
	      {'cache_all','true'}
	  %% Line 949
	  <'unique_all'> when 'true' ->
	      {'unique_all','true'}
	  %% Line 950
	  <'lookup'> when 'true' ->
	      {'lookup','true'}
	  %% Line 951
	  <'flat'> when 'true' ->
	      {'flat','true'}
	  %% Line 952
	  <Key> when 'true' ->
	      Key
	end
'is_proper_list'/1 =
    %% Line 954
    fun (_cor0) ->
	case _cor0 of
	  <[_cor2|L]> when 'true' ->
	      %% Line 955
	      apply 'is_proper_list'/1
		  (L)
	  %% Line 956
	  <L> when 'true' ->
	      %% Line 957
	      call 'erlang':'=:='
		  (L, [])
	end
'spawn_options'/1 =
    %% Line 959
    fun (_cor0) ->
	case _cor0 of
	  <'default'> when 'true' ->
	      %% Line 960
	      ['link']
	  %% Line 961
	  <SpawnOptions> when 'true' ->
	      let <_cor2> =
		  %% Line 963
		  case call 'lists':'member'
			   ('link', SpawnOptions) of
		    %% Line 964
		    <'true'> when 'true' ->
			%% Line 965
			SpawnOptions
		    %% Line 966
		    <'false'> when 'true' ->
			%% Line 967
			['link'|SpawnOptions]
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 962
		  call 'lists':'delete'
		      ('monitor', _cor2)
	end
'is_keypos'/1 =
    %% Line 970
    fun (_cor0) ->
	case _cor0 of
	  <Keypos>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 971
	      'true'
	  %% Line 972
	  <[]> when 'true' ->
	      %% Line 973
	      'false'
	  %% Line 974
	  <L> when 'true' ->
	      %% Line 975
	      apply 'is_keyposs'/1
		  (L)
	end
'is_keyposs'/1 =
    %% Line 977
    fun (_cor0) ->
	case _cor0 of
	  <[Kp|Kps]>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Kp)
		in  let <_cor2> =
			call 'erlang':'>'
			    (Kp, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 978
	      apply 'is_keyposs'/1
		  (Kps)
	  %% Line 979
	  <Kps> when 'true' ->
	      %% Line 980
	      call 'erlang':'=:='
		  (Kps, [])
	end
'listify'/1 =
    %% Line 982
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 983
	      L
	  %% Line 984
	  <T> when 'true' ->
	      %% Line 985
	      [T|[]]
	end
'cursor_process'/7 =
    %% Line 1029
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Parent> =
	    %% Line 1030
	    call 'erlang':'self'
		()
	in  let <Setup> = {%% Line 1031
		 'setup',%% Line 1031
			 Parent}
	    in  let <CF> =
		    %% Line 1032
		    ( fun () ->
			  do  %% Line 1035
			      call 'erlang':'process_flag'
				  ('trap_exit', 'true')
			      let <MonRef> =
				  %% Line 1036
				  call 'erlang':'monitor'
				      ('process', Parent)
			      in  let <_cor17> =
				      %% Line 1038
				      try
					  let <Prep> =
					      %% Line 1039
					      apply 'prepare_qlc'/7
						  (_cor6, 'not_a_list', _cor5, _cor4, _cor3, _cor1, _cor0)
					  in  %% Line 1041
					      apply 'setup_qlc'/2
						  (Prep, Setup)
				      of <_cor11> ->
					  _cor11
				      catch <_cor14,_cor13,_cor12> ->
					  let <_cor16> =
					      %% Line 1043
					      call 'erlang':'self'
						  ()
					  in  let <_cor15> =
						  %% Line 1044
						  call 'erlang':'get_stacktrace'
						      ()
					      in  do  %% Line 1043
						      call 'erlang':'!'
							  (Parent, {_cor16,{'caught',_cor14,_cor13,_cor15}})
						      %% Line 1045
						      call 'erlang':'exit'
							  ('normal')
				  in  %% Line 1037
				      case _cor17 of
					<{Objs,Post,_X_LocalPost}> when 'true' ->
					    let <_cor19> =
						%% Line 1047
						call 'erlang':'self'
						    ()
					    in  do  %% Line 1047
						    call 'erlang':'!'
							(Parent, {_cor19,'ok'})
						    do  %% Line 1048
							apply 'wait_for_request'/3
							    (Parent, MonRef, Post)
							%% Line 1049
							apply 'reply'/4
							    (Parent, MonRef, Post, Objs)
					( <_cor18> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor18})
					  -| ['compiler_generated'] )
				      end
		      -| [{'id',{0,0,'-cursor_process/7-fun-0-'}}] )
		in  let <Pid> =
			%% Line 1051
			call 'erlang':'spawn_opt'
			    (CF, _cor2)
		    in  %% Line 1052
			apply 'parent_fun'/2
			    (Pid, Parent)
'parent_fun'/2 =
    %% Line 1055
    fun (_cor1,_cor0) ->
	%% Line 1056
	receive
	  %% Line 1057
	  <{_cor12,'ok'}>
	      when call 'erlang':'=:='
		    (_cor12,
		     _cor1) ->
	      _cor1
	  %% Line 1058
	  <{TPid,{'parent_fun',Fun}}> when 'true' ->
	      let <_cor8> =
		  %% Line 1059
		  try
		      let <_cor2> =
			  %% Line 1060
			  apply Fun
			      ()
		      in  %% Line 1060
			  {'value',_cor2}
		  of <_cor3> ->
		      _cor3
		  catch <_cor6,_cor5,_cor4> ->
		      let <_cor7> =
			  %% Line 1062
			  call 'erlang':'get_stacktrace'
			      ()
		      in  %% Line 1062
			  {'parent_fun_caught',_cor6,_cor5,_cor7}
	      in  do  %% Line 1064
		      call 'erlang':'!'
			  (TPid, {_cor0,_cor8})
		      %% Line 1065
		      apply 'parent_fun'/2
			  (_cor1, _cor0)
	  %% Line 1066
	  <{_cor14,{'caught','throw',Error,[{'qlc','throw_error',_cor15,_cor16}|_cor17]}}>
	      when call 'erlang':'=:='
		    (_cor14,
		     _cor1) ->
	      %% Line 1067
	      Error
	  %% Line 1068
	  <{_cor18,{'caught',Class,Reason,Stacktrace}}>
	      when call 'erlang':'=:='
		    (_cor18,
		     _cor1) ->
	      %% Line 1069
	      call 'erlang':'raise'
		  (Class, Reason, Stacktrace)
	after 'infinity' ->
	  'true'
'reply'/4 =
    %% Line 1072
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Parent,MonRef,Post,[]> when 'true' ->
	      %% Line 1073
	      apply 'no_more'/3
		  (Parent, MonRef, Post)
	  %% Line 1074
	  <Parent,MonRef,Post,[Answer|Cont]> when 'true' ->
	      let <_cor4> =
		  %% Line 1075
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 1075
		      call 'erlang':'!'
			  (Parent, {_cor4,{'answer',Answer}})
		      do  %% Line 1076
			  apply 'wait_for_request'/3
			      (Parent, MonRef, Post)
			  %% Line 1077
			  apply 'reply'/4
			      (Parent, MonRef, Post, Cont)
	  %% Line 1078
	  <Parent,MonRef,Post,Cont> when 'true' ->
	      let <_cor12> =
		  %% Line 1079
		  try
		      %% Line 1080
		      case <> of
			%% Line 1081
			<>
			    when call 'erlang':'is_function'
				  (Cont) ->
			    %% Line 1082
			    apply Cont
				()
			%% Line 1083
			<> when 'true' ->
			    %% Line 1084
			    apply 'throw_error'/1
				(Cont)
		      end
		  of <_cor5> ->
		      _cor5
		  catch <_cor8,_cor7,_cor6> ->
		      do  %% Line 1088
			  apply 'post_funs'/1
			      (Post)
			  let <_cor9> =
			      %% Line 1089
			      call 'erlang':'get_stacktrace'
				  ()
			  in  let <Message> =
				  %% Line 1089
				  {'caught',_cor8,_cor7,_cor9}
			      in  let <_cor11> =
				      %% Line 1090
				      call 'erlang':'self'
					  ()
				  in  do  %% Line 1090
					  call 'erlang':'!'
					      (Parent, {_cor11,Message})
					  %% Line 1091
					  call 'erlang':'exit'
					      ('normal')
	      in  %% Line 1093
		  apply 'reply'/4
		      (Parent, MonRef, Post, _cor12)
	end
'no_more'/3 =
    %% Line 1095
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1096
	    call 'erlang':'self'
		()
	in  do  %% Line 1096
		call 'erlang':'!'
		    (_cor2, {_cor3,'no_more'})
		do  %% Line 1097
		    apply 'wait_for_request'/3
			(_cor2, _cor1, _cor0)
		    %% Line 1098
		    apply 'no_more'/3
			(_cor2, _cor1, _cor0)
'wait_for_request'/3 =
    %% Line 1100
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1101
	receive
	  %% Line 1102
	  <{_cor8,'stop'}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor2) ->
	      do  %% Line 1103
		  apply 'post_funs'/1
		      (_cor0)
		  %% Line 1104
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1105
	  <{_cor9,'more'}>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor2) ->
	      %% Line 1106
	      'ok'
	  %% Line 1107
	  <{'EXIT',_cor10,_X_Reason}>
	      when call 'erlang':'=:='
		    (_cor10,
		     _cor2) ->
	      do  %% Line 1108
		  apply 'post_funs'/1
		      (_cor0)
		  %% Line 1109
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1110
	  <{'DOWN',_cor11,'process',_cor12,_X_Info}>
	      when let <_cor13> =
		    call 'erlang':'=:='
			(_cor11, _cor1)
		in  let <_cor14> =
			call 'erlang':'=:='
			    (_cor12, _cor2)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      do  %% Line 1111
		  apply 'post_funs'/1
		      (_cor0)
		  %% Line 1112
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1113
	  <{'EXIT',Pid,_X_Reason}>
	      when try
		    let <_cor3> =
			call 'erlang':'self'
			    ()
		    in  call 'erlang':'=:='
			    (Pid, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1115
	      apply 'wait_for_request'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1116
	  <Other> when 'true' ->
	      let <_cor4> =
		  %% Line 1119
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 1117
		      call 'error_logger':'error_msg'
			  (%% Line 1118
			   [84|[104|[101|[32|[113|[108|[99|[32|[99|[117|[114|[115|[111|[114|[32|[126|[119|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[97|[110|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[10|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1119
																																									 [_cor4|[Other|[]]])
		      %% Line 1120
		      apply 'wait_for_request'/3
			  (_cor2, _cor1, _cor0)
	after 'infinity' ->
	  'true'
'abstract_code'/1 =
    %% Line 1125
    fun (_cor0) ->
	case _cor0 of
	  <{'special',Line,String}> when 'true' ->
	      %% Line 1126
	      {'string',Line,String}
	  %% Line 1127
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1128
		  call 'erlang':'tuple_to_list'
		      (Tuple)
	      in  let <_cor2> =
		      %% Line 1128
		      apply 'abstract_code'/1
			  (_cor1)
		  in  %% Line 1128
		      call 'erlang':'list_to_tuple'
			  (_cor2)
	  %% Line 1129
	  <[H|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 1130
		  apply 'abstract_code'/1
		      (H)
	      in  let <_cor4> =
		      %% Line 1130
		      apply 'abstract_code'/1
			  (T)
		  in  %% Line 1130
		      [_cor3|_cor4]
	  %% Line 1131
	  <Term> when 'true' ->
	      %% Line 1132
	      Term
	end
'abstract'/4 =
    %% Line 1139
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Info,_X_Flat = 'false',NElements,Depth> when 'true' ->
	      %% Line 1140
	      apply 'abstract'/3
		  (Info, NElements, Depth)
	  %% Line 1141
	  <Info,_X_Flat = 'true',NElements,Depth> when 'true' ->
	      let <Abstract> =
		  %% Line 1142
		  apply 'abstract'/3
		      (Info, NElements, Depth)
	      in  let <Vars> =
		      %% Line 1143
		      apply 'abstract_vars'/1
			  (Abstract)
		  in  %% Line 1144
		      case apply 'flatten_abstr'/4
			       (Abstract, 1, Vars, []) of
			<{_cor14,Body0,Expr}> when 'true' ->
			    %% Line 1145
			    case Body0 of
			      %% Line 1146
			      <[]> when 'true' ->
				  %% Line 1147
				  Expr
			      %% Line 1148
			      <[{'match',_cor15,_cor16,Q}|[]]>
				  when call 'erlang':'=:='
					(_cor16,
					 Expr) ->
				  %% Line 1149
				  Q
			      %% Line 1150
			      <[{'match',_cor17,_cor18,Q}|Body]>
				  when call 'erlang':'=:='
					(_cor18,
					 Expr) ->
				  let <_cor7> =
				      %% Line 1151
				      call 'lists':'reverse'
					  (Body, [Q|[]])
				  in  %% Line 1151
				      {'block',0,_cor7}
			      %% Line 1152
			      <_cor19> when 'true' ->
				  let <_cor8> =
				      %% Line 1153
				      call 'lists':'reverse'
					  (Body0, [Expr|[]])
				  in  %% Line 1153
				      {'block',0,_cor8}
			    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'abstract',4}}] )
	    -| ['compiler_generated'] )
	end
'abstract'/3 =
    %% Line 1156
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'qlc',E0,Qs0,Opt},NElements,Depth> when 'true' ->
	      let <_cor7> =
		  %% Line 1157
		  ( fun (_cor5) ->
			case _cor5 of
			  <{'generate',P,LE}> when 'true' ->
			      let <_cor4> =
				  %% Line 1158
				  call 'erlang':'binary_to_term'
				      (P)
			      in  let <_cor3> =
				      %% Line 1159
				      apply 'abstract'/3
					  (LE, NElements, Depth)
				  in  %% Line 1158
				      {'generate',1,_cor4,_cor3}
			  %% Line 1160
			  <F> when 'true' ->
			      %% Line 1161
			      call 'erlang':'binary_to_term'
				  (F)
			end
		    -| [{'id',{0,0,'-abstract/3-fun-0-'}}] )
	      in  let <Qs> =
		      %% Line 1157
		      call 'lists':'map'
			  (_cor7, %% Line 1162
				  Qs0)
		  in  let <E> =
			  %% Line 1163
			  call 'erlang':'binary_to_term'
			      (E0)
		      in  let <_cor12> =
			      %% Line 1164
			      case Opt of
				%% Line 1165
				<[]> when 'true' ->
				    []
				%% Line 1166
				<_cor55> when 'true' ->
				    let <_cor10> =
					apply 'abstract_term'/2
					    (Opt, 1)
				    in  [_cor10|[]]
			      end
			  in  %% Line 1168
			      {'call',1,{'remote',1,{'atom',1,'qlc'},{'atom',1,'q'}},[{'lc',1,E,Qs}|_cor12]}
	  %% Line 1169
	  <{'table',{M,F,As0}},_X_NElements,_X_Depth>
	      when %% Line 1170
		try
		    let <_cor14> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor15> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor16> =
				call 'erlang':'is_list'
				    (As0)
			    in  let <_cor17> =
				    call 'erlang':'and'
					(_cor15, _cor16)
				in  call 'erlang':'and'
					(_cor14, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor23> =
		  %% Line 1171
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor20) ->
				case _cor20 of
				  <[A|_cor19]> when 'true' ->
				      let <_cor21> =
					  apply 'abstract_term'/2
					      (A, 1)
				      in  let <_cor22> =
					      apply 'lc$^0'/1
						  (_cor19)
					  in  ( [_cor21|_cor22]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor20> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor20})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (As0)
		    -| ['list_comprehension'] )
	      in  %% Line 1172
		  {'call',1,{'remote',1,{'atom',1,M},{'atom',1,F}},_cor23}
	  %% Line 1173
	  <{'table',TableDesc},_X_NElements,_X_Depth> when 'true' ->
	      %% Line 1174
	      case call 'io_lib':'deep_char_list'
		       (TableDesc) of
		%% Line 1175
		<'true'> when 'true' ->
		    let <_cor25> =
			%% Line 1176
			call 'erlang':'++'
			    (TableDesc, [46])
		    in  let <_cor26> =
			    %% Line 1176
			    call 'lists':'flatten'
				(_cor25)
			in  %% Line 1176
			    case call 'erl_scan':'string'
				     (_cor26) of
			      <{'ok',Tokens,_cor56}> when 'true' ->
				  %% Line 1177
				  case call 'erl_parse':'parse_exprs'
					   (Tokens) of
				    <{'ok',[Expr|[]]}> when 'true' ->
					%% Line 1178
					Expr
				    ( <_cor28> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor28})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor27> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor27})
				-| ['compiler_generated'] )
			    end
		%% Line 1179
		<'false'> when 'true' ->
		    %% Line 1180
		    TableDesc
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1182
	  <{'append',Infos},NElements,Depth> when 'true' ->
	      let <_cor35> =
		  %% Line 1183
		  ( fun (_cor32,_cor31) ->
			let <_cor30> =
			    %% Line 1184
			    apply 'abstract'/3
				(_cor32, NElements, Depth)
			in  %% Line 1184
			    {'cons',1,_cor30,_cor31}
		    -| [{'id',{0,0,'-abstract/3-fun-1-'}}] )
	      in  let <As> =
		      %% Line 1183
		      call 'lists':'foldr'
			  (_cor35, %% Line 1185
				   {'nil',1}, %% Line 1185
					      Infos)
		  in  %% Line 1186
		      {'call',1,{'remote',1,{'atom',1,'qlc'},{'atom',1,'append'}},[As|[]]}
	  %% Line 1187
	  <{'sort',Info,SortOptions},NElements,Depth> when 'true' ->
	      let <_cor37> =
		  %% Line 1189
		  apply 'abstract'/3
		      (Info, NElements, Depth)
	      in  let <_cor38> =
		      %% Line 1189
		      apply 'abstract_term'/2
			  (SortOptions, 1)
		  in  %% Line 1188
		      {'call',1,{'remote',1,{'atom',1,'qlc'},{'atom',1,'sort'}},%% Line 1189
										[_cor37|[_cor38|[]]]}
	  %% Line 1190
	  <{'keysort',Info,Kp,SortOptions},NElements,Depth> when 'true' ->
	      let <_cor39> =
		  %% Line 1192
		  apply 'abstract_term'/2
		      (Kp, 1)
	      in  let <_cor40> =
		      %% Line 1192
		      apply 'abstract'/3
			  (Info, NElements, Depth)
		  in  let <_cor41> =
			  %% Line 1193
			  apply 'abstract_term'/2
			      (SortOptions, 1)
		      in  %% Line 1191
			  {'call',1,{'remote',1,{'atom',1,'qlc'},{'atom',1,'keysort'}},%% Line 1192
										       [_cor39|[_cor40|%% Line 1193
												       [_cor41|[]]]]}
	  %% Line 1194
	  <{'list',L,MS},NElements,Depth> when 'true' ->
	      let <_cor42> =
		  %% Line 1196
		  apply 'abstract'/3
		      (L, NElements, Depth)
	      in  let <_cor43> =
		      %% Line 1198
		      apply 'depth'/2
			  (MS, Depth)
		  in  let <_cor44> =
			  %% Line 1198
			  apply 'abstract_term'/2
			      (_cor43, 1)
		      in  %% Line 1195
			  {'call',1,{'remote',1,{'atom',1,'ets'},{'atom',1,'match_spec_run'}},%% Line 1196
											      [_cor42|%% Line 1197
												      [{'call',1,{'remote',1,{'atom',1,'ets'},{'atom',1,'match_spec_compile'}},%% Line 1198
																					       [_cor44|[]]}|%% Line 1198
																							    []]]}
	  %% Line 1199
	  <{'list',L},NElements,Depth>
	      when let <_cor45> =
		    call 'erlang':'=:='
			(NElements, 'infinity')
		in  let <_cor47> =
			%% Line 1200
			try
			    let <_cor46> =
				call 'erlang':'length'
				    (L)
			    in  call 'erlang':'>='
				    (NElements, _cor46)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'or'
			    (_cor45, _cor47) ->
	      let <_cor48> =
		  %% Line 1201
		  apply 'depth'/2
		      (L, Depth)
	      in  %% Line 1201
		  apply 'abstract_term'/2
		      (_cor48, 1)
	  %% Line 1202
	  <{'list',L},NElements,Depth> when 'true' ->
	      let <_cor49> =
		  %% Line 1203
		  call 'lists':'sublist'
		      (L, NElements)
	      in  let <_cor50> =
		      %% Line 1203
		      apply 'depth'/2
			  (_cor49, Depth)
		  in  let <_cor51> =
			  %% Line 1203
			  call 'erlang':'++'
			      (_cor50, '...')
		      in  %% Line 1203
			  apply 'abstract_term'/2
			      (_cor51, 1)
	  ( <_cor54,_cor53,_cor52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52})
		  -| [{'function_name',{'abstract',3}}] )
	    -| ['compiler_generated'] )
	end
'depth'/2 =
    %% Line 1205
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <List,'infinity'> when 'true' ->
	      %% Line 1206
	      List
	  %% Line 1207
	  <List,Depth> when 'true' ->
	      %% Line 1208
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[E|_cor3]> when 'true' ->
				  let <_cor5> =
				      apply 'depth1'/2
					  (E, Depth)
				  in  let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	end
'depth_fun'/1 =
    %% Line 1210
    fun (_cor0) ->
	case _cor0 of
	  <_X_Depth = 'infinity'> when 'true' ->
	      %% Line 1211
	      ( fun (_cor1) ->
		    _cor1
		-| [{'id',{0,0,'-depth_fun/1-fun-0-'}}] )
	  %% Line 1212
	  <Depth> when 'true' ->
	      %% Line 1213
	      ( fun (_cor3) ->
		    apply 'depth1'/2
			(_cor3, Depth)
		-| [{'id',{0,0,'-depth_fun/1-fun-1-'}}] )
	end
'depth1'/2 =
    %% Line 1215
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = [],_X_D> when 'true' ->
	      %% Line 1216
	      L
	  %% Line 1217
	  <_X_Term,0> when 'true' ->
	      %% Line 1218
	      '...'
	  %% Line 1219
	  <Tuple,D>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      let <_cor3> =
		  %% Line 1220
		  call 'erlang':'tuple_size'
		      (Tuple)
	      in  let <_cor2> =
		      %% Line 1220
		      call 'erlang':'-'
			  (D, 1)
		  in  %% Line 1220
		      apply 'depth_tuple'/5
			  (Tuple, _cor3, 1, _cor2, [])
	  %% Line 1221
	  <List,D>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 1222
	      case <> of
		%% Line 1223
		<>
		    when call 'erlang':'=:='
			  (D,
			   1) ->
		    %% Line 1224
		    ['...']
		%% Line 1225
		<> when 'true' ->
		    let <_cor4> =
			%% Line 1226
			call 'erlang':'-'
			    (D, 1)
		    in  %% Line 1226
			apply 'depth_list'/2
			    (List, _cor4)
	      end
	  %% Line 1228
	  <Binary,D>
	      when try
		    let <_cor6> =
			call 'erlang':'byte_size'
			    (Binary)
		    in  let <_cor5> =
			    call 'erlang':'-'
				(D, 1)
			in  call 'erlang':'>'
				(_cor6, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <D1> =
		  %% Line 1229
		  call 'erlang':'-'
		      (D, 1)
	      in  %% Line 1230
		  case ( Binary
			 -| ['reuse_for_context'] ) of
		    <#{#<Bin>(D1,8,'binary',['unsigned'|['big']]),
		       #<_cor11>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 1231
			#{#<Bin>('all',8,'binary',['unsigned'|['big']]),
			  #<46>(8,1,'integer',['unsigned'|['big']]),
			  #<46>(8,1,'integer',['unsigned'|['big']]),
			  #<46>(8,1,'integer',['unsigned'|['big']])}#
		    ( <_cor8> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor8)
			      primop 'match_fail'
				  ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1232
	  <T,_X_Depth> when 'true' ->
	      %% Line 1233
	      T
	end
'depth_list'/2 =
    %% Line 1235
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = [],_X_D> when 'true' ->
	      %% Line 1236
	      L
	  %% Line 1237
	  <_X_L,0> when 'true' ->
	      %% Line 1238
	      '...'
	  %% Line 1239
	  <[E|Es],D> when 'true' ->
	      let <_cor2> =
		  %% Line 1240
		  apply 'depth1'/2
		      (E, D)
	      in  let <_cor3> =
		      %% Line 1240
		      call 'erlang':'-'
			  (D, 1)
		  in  let <_cor4> =
			  %% Line 1240
			  apply 'depth_list'/2
			      (Es, _cor3)
		      in  %% Line 1240
			  [_cor2|_cor4]
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'depth_list',2}}] )
	    -| ['compiler_generated'] )
	end
'depth_tuple'/5 =
    %% Line 1242
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Tuple,Sz,I,_X_D,L>
	      when call 'erlang':'>'
		    (I,
		     Sz) ->
	      let <_cor5> =
		  %% Line 1243
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 1243
		  call 'erlang':'list_to_tuple'
		      (_cor5)
	  %% Line 1244
	  <_X_L,_X_Sz,_X_I,0,L> when 'true' ->
	      let <_cor6> =
		  %% Line 1245
		  call 'lists':'reverse'
		      (L, ['...'])
	      in  %% Line 1245
		  call 'erlang':'list_to_tuple'
		      (_cor6)
	  %% Line 1246
	  <Tuple,Sz,I,D,L> when 'true' ->
	      let <_cor7> =
		  %% Line 1247
		  call 'erlang':'element'
		      (I, Tuple)
	      in  let <E> =
		      %% Line 1247
		      apply 'depth1'/2
			  (_cor7, D)
		  in  let <_cor10> =
			  %% Line 1248
			  call 'erlang':'+'
			      (I, 1)
		      in  let <_cor9> =
			      %% Line 1248
			      call 'erlang':'-'
				  (D, 1)
			  in  %% Line 1248
			      apply 'depth_tuple'/5
				  (Tuple, Sz, _cor10, _cor9, [E|L])
	end
'abstract_term'/1 =
    %% Line 1250
    fun (_cor0) ->
	%% Line 1251
	apply 'abstract_term'/2
	    (_cor0, 0)
'abstract_term'/2 =
    %% Line 1253
    fun (_cor1,_cor0) ->
	%% Line 1254
	apply 'abstr_term'/2
	    (_cor1, _cor0)
'abstr_term'/2 =
    %% Line 1256
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tuple,Line>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      let <_cor8> =
		  %% Line 1257
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[E|_cor3]> when 'true' ->
				      let <_cor6> =
					  apply 'abstr_term'/2
					      (E, Line)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    call 'erlang':'tuple_to_list'
				(Tuple)
			in  apply 'lc$^0'/1
				(_cor4)
		    -| ['list_comprehension'] )
	      in  %% Line 1257
		  {'tuple',Line,_cor8}
	  %% Line 1258
	  <L = [_cor23|_cor24],Line> when 'true' ->
	      %% Line 1259
	      case call 'io_lib':'char_list'
		       (L) of
		%% Line 1260
		<'true'> when 'true' ->
		    %% Line 1261
		    call 'erl_parse':'abstract'
			(L, Line)
		%% Line 1262
		<'false'> when 'true' ->
		    %% Line 1263
		    apply 'abstr_list'/2
			(L, Line)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1265
	  <Fun,Line>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 1266
	      case call 'erl_eval':'fun_data'
		       (Fun) of
		%% Line 1267
		<{'fun_data',_X_Bs,Cs}> when 'true' ->
		    %% Line 1268
		    {'fun',Line,{'clauses',Cs}}
		%% Line 1269
		<{'named_fun_data',_X_Bs,Name,Cs}> when 'true' ->
		    %% Line 1270
		    {'named_fun',Line,Name,Cs}
		%% Line 1271
		<'false'> when 'true' ->
		    %% Line 1272
		    case call 'erlang':'fun_info'
			     (Fun, 'name') of
		      <{'name',Name}> when 'true' ->
			  %% Line 1273
			  case call 'erlang':'fun_info'
				   (Fun, 'arity') of
			    <{'arity',Arity}> when 'true' ->
				%% Line 1274
				case call 'erlang':'fun_info'
					 (Fun, 'type') of
				  %% Line 1275
				  <{'type','external'}> when 'true' ->
				      %% Line 1276
				      case call 'erlang':'fun_info'
					       (Fun, 'module') of
					<{'module',Module}> when 'true' ->
					    %% Line 1277
					    {'fun',Line,{'function',%% Line 1278
								    {'atom',Line,Module},%% Line 1279
											 {'atom',Line,Name},%% Line 1280
													    {'integer',Line,Arity}}}
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1281
				  <{'type','local'}> when 'true' ->
				      %% Line 1282
				      {'fun',Line,{'function',Name,Arity}}
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor13})
				    -| ['compiler_generated'] )
				end
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1285
	  <PPR,Line>
	      when let <_cor15> =
		    call 'erlang':'is_pid'
			(PPR)
		in  let <_cor16> =
			call 'erlang':'is_port'
			    (PPR)
		    in  let <_cor17> =
			    call 'erlang':'is_reference'
				(PPR)
			in  let <_cor18> =
				call 'erlang':'or'
				    (_cor16, _cor17)
			    in  call 'erlang':'or'
				    (_cor15, _cor18) ->
	      let <_cor19> =
		  %% Line 1286
		  call 'io_lib':'write'
		      (PPR)
	      in  let <_cor20> =
		      %% Line 1286
		      call 'lists':'flatten'
			  (_cor19)
		  in  %% Line 1286
		      {'special',Line,_cor20}
	  %% Line 1287
	  <Simple,Line> when 'true' ->
	      %% Line 1288
	      call 'erl_parse':'abstract'
		  (Simple, Line)
	end
'abstr_list'/2 =
    %% Line 1290
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Line> when 'true' ->
	      let <_cor3> =
		  %% Line 1291
		  apply 'abstr_term'/2
		      (H, Line)
	      in  let <_cor2> =
		      %% Line 1291
		      apply 'abstr_list'/2
			  (T, Line)
		  in  %% Line 1291
		      {'cons',Line,_cor3,_cor2}
	  %% Line 1292
	  <T,Line> when 'true' ->
	      %% Line 1293
	      apply 'abstr_term'/2
		  (T, Line)
	end
'flatten_abstr'/4 =
    %% Line 1298
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'call',L1,{'remote',L2,{'atom',L3,'qlc'},{'atom',L4,'q'}},[LC0|Os]},VN0,Vars,Body0> when 'true' ->
	      %% Line 1299
	      case LC0 of
		<{'lc',L,E,Qs0}> when 'true' ->
		    let <F> =
			%% Line 1300
			( fun (_cor7,_cor6) ->
			      case <_cor7,_cor6> of
				<{'generate',Ln,P,LE0},{VN1,Body1}> when 'true' ->
				    %% Line 1301
				    case apply 'flatten_abstr'/4
					     (LE0, VN1, Vars, Body1) of
				      <{VN2,Body2,LE}> when 'true' ->
					  %% Line 1302
					  {{'generate',Ln,P,LE},{VN2,Body2}}
				      ( <_cor5> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor5})
					-| ['compiler_generated'] )
				    end
				%% Line 1303
				<Fil,VN_Body> when 'true' ->
				    %% Line 1304
				    {Fil,VN_Body}
			      end
			  -| [{'id',{0,0,'-flatten_abstr/4-fun-0-'}}] )
		    in  %% Line 1306
			case call 'lists':'mapfoldl'
				 (F, {VN0,Body0}, Qs0) of
			  <{Qs,{VN3,Body}}> when 'true' ->
			      let <LC> =
				  %% Line 1307
				  {'lc',L,E,Qs}
			      in  %% Line 1308
				  case apply 'aux_name1'/3
					   ('V', VN3, Vars) of
				    <{V,VN}> when 'true' ->
					let <Var> = {%% Line 1309
					     'var',%% Line 1309
						   L1,%% Line 1309
						      V}
					in  let <QLC> =
						%% Line 1310
						{'call',L1,{'remote',L2,{'atom',L3,'qlc'},{'atom',L4,'q'}},[LC|Os]}
					    in  let <_cor16> =
						    %% Line 1311
						    call 'erlang':'+'
							(VN, 1)
						in  %% Line 1311
						    {_cor16,[{'match',L1,Var,QLC}|Body],Var}
				    ( <_cor13> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor13})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1312
	  <T0,VN0,Vars,Body0>
	      when call 'erlang':'is_tuple'
		    (T0) ->
	      let <_cor17> =
		  %% Line 1313
		  call 'erlang':'tuple_to_list'
		      (T0)
	      in  %% Line 1313
		  case apply 'flatten_abstr'/4
			   (_cor17, VN0, Vars, Body0) of
		    <{VN,Body,L}> when 'true' ->
			let <_cor19> =
			    %% Line 1314
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 1314
			    {VN,Body,_cor19}
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor18})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1315
	  <[E0|Es0],VN0,Vars,Body0> when 'true' ->
	      %% Line 1316
	      case apply 'flatten_abstr'/4
		       (E0, VN0, Vars, Body0) of
		<{VN1,Body1,E}> when 'true' ->
		    %% Line 1317
		    case apply 'flatten_abstr'/4
			     (Es0, VN1, Vars, Body1) of
		      <{VN,Body,Es}> when 'true' ->
			  %% Line 1318
			  {VN,Body,[E|Es]}
		      ( <_cor21> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor21})
			-| ['compiler_generated'] )
		    end
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1319
	  <E,VN,_X_Vars,Body> when 'true' ->
	      %% Line 1320
	      {VN,Body,E}
	end
'abstract_vars'/1 =
    %% Line 1322
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1323
	    apply 'vars'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1323
		call 'ordsets':'to_list'
		    (_cor1)
	    in  %% Line 1323
		call 'sets':'from_list'
		    (_cor2)
'collect'/1 =
    %% Line 1325
    fun (_cor0) ->
	case _cor0 of
	  <L = []> when 'true' ->
	      %% Line 1326
	      L
	  %% Line 1327
	  <[Answer|Cont]> when 'true' ->
	      let <_cor1> =
		  %% Line 1328
		  apply 'collect'/1
		      (Cont)
	      in  %% Line 1328
		  [Answer|_cor1]
	  %% Line 1329
	  <Cont> when 'true' ->
	      %% Line 1330
	      case apply Cont
		       () of
		%% Line 1331
		<Answers>
		    when call 'erlang':'is_list'
			  (Answers) ->
		    %% Line 1332
		    apply 'collect'/1
			(Answers)
		%% Line 1333
		<Term> when 'true' ->
		    %% Line 1334
		    apply 'throw_error'/1
			(Term)
	      end
	end
'fold_loop'/3 =
    %% Line 1337
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,[Obj|Cont],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1338
		  apply Fun
		      (Obj, Acc)
	      in  %% Line 1338
		  apply 'fold_loop'/3
		      (Fun, Cont, _cor3)
	  %% Line 1339
	  <_X_Fun,[],Acc> when 'true' ->
	      %% Line 1340
	      Acc
	  %% Line 1341
	  <Fun,Cont,Acc> when 'true' ->
	      %% Line 1342
	      case apply Cont
		       () of
		%% Line 1343
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 1344
		    apply 'fold_loop'/3
			(Fun, Objects, Acc)
		%% Line 1345
		<Term> when 'true' ->
		    %% Line 1346
		    Term
	      end
	end
'next_loop'/3 =
    %% Line 1349
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pid,L,N>
	      when call 'erlang':'=/='
		    (N,
		     0) ->
	      %% Line 1350
	      case apply 'monitor_request'/2
		       (Pid, 'more') of
		%% Line 1351
		<'no_more'> when 'true' ->
		    %% Line 1352
		    call 'lists':'reverse'
			(L)
		%% Line 1353
		<{'answer',Answer}> when 'true' ->
		    let <_cor3> =
			%% Line 1354
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 1354
			apply 'next_loop'/3
			    (Pid, [Answer|L], _cor3)
		%% Line 1355
		<{'caught','throw',Error,[{'qlc','throw_error',_cor12,_cor13}|_cor14]}> when 'true' ->
		    %% Line 1356
		    Error
		%% Line 1357
		<{'caught',Class,Reason,Stacktrace}> when 'true' ->
		    let <_cor4> =
			catch
			    %% Line 1358
			    ( call 'erlang':'error'
				  ('foo')
			      -| ['result_not_wanted'] )
		    in  let <_cor6> =
			    %% Line 1359
			    call 'erlang':'get_stacktrace'
				()
			in  let <_cor7> =
				%% Line 1359
				call 'erlang':'++'
				    (Stacktrace, _cor6)
			    in  %% Line 1359
				call 'erlang':'raise'
				    (Class, Reason, _cor7)
		%% Line 1360
		<'error'> when 'true' ->
		    %% Line 1361
		    call 'erlang':'error'
			({'qlc_cursor_pid_no_longer_exists',Pid})
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1363
	  <_X_Pid,L,_X_N> when 'true' ->
	      %% Line 1364
	      call 'lists':'reverse'
		  (L)
	end
'stop_cursor'/1 =
    %% Line 1366
    fun (_cor0) ->
	do  %% Line 1367
	    call 'erlang':'monitor'
		('process', _cor0)
	    do  %% Line 1368
		call 'erlang':'unlink'
		    (_cor0)
		%% Line 1369
		receive
		  %% Line 1370
		  <{'EXIT',_cor3,_X_Reason}>
		      when call 'erlang':'=:='
			    (_cor3,
			     _cor0) ->
		      %% Line 1371
		      receive
			%% Line 1372
			<{'DOWN',_cor4,'process',_cor5,_cor6}>
			    when call 'erlang':'=:='
				  (_cor5,
				   _cor0) ->
			    'ok'
		      after 'infinity' ->
			'true'
		after %% Line 1374
		      0 ->
		  let <_cor1> =
		      %% Line 1375
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 1375
			  call 'erlang':'!'
			      (_cor0, {_cor1,'stop'})
			  %% Line 1376
			  receive
			    %% Line 1377
			    <{'DOWN',_cor7,'process',_cor8,_cor9}>
				when call 'erlang':'=:='
				      (_cor8,
				       _cor0) ->
				'ok'
			  after 'infinity' ->
			    'true'
'monitor_request'/2 =
    %% Line 1381
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 1382
	    call 'erlang':'monitor'
		('process', _cor1)
	in  let <_cor3> =
		%% Line 1383
		call 'erlang':'self'
		    ()
	    in  do  %% Line 1383
		    call 'erlang':'!'
			(_cor1, {_cor3,_cor0})
		    %% Line 1384
		    receive
		      %% Line 1385
		      <{'DOWN',_cor6,'process',_cor7,_X_Info}>
			  when let <_cor8> =
				call 'erlang':'=:='
				    (_cor6, Ref)
			    in  let <_cor9> =
				    call 'erlang':'=:='
					(_cor7, _cor1)
				in  call 'erlang':'and'
					(_cor8, _cor9) ->
			  do  %% Line 1386
			      receive
				%% Line 1387
				<{'EXIT',_cor10,_X_Reason}>
				    when call 'erlang':'=:='
					  (_cor10,
					   _cor1) ->
				    'ok'
			      after %% Line 1388
				    1 ->
				'ok'
			      %% Line 1389
			      'error'
		      %% Line 1390
		      <{'EXIT',_cor11,_X_Reason}>
			  when call 'erlang':'=:='
				(_cor11,
				 _cor1) ->
			  %% Line 1391
			  receive
			    %% Line 1392
			    <{'DOWN',_cor12,'process',_cor13,_cor14}>
				when call 'erlang':'=:='
				      (_cor13,
				       _cor1) ->
				'error'
			  after 'infinity' ->
			    'true'
		      %% Line 1394
		      <{_cor15,Reply}>
			  when call 'erlang':'=:='
				(_cor15,
				 _cor1) ->
			  do  %% Line 1395
			      call 'erlang':'demonitor'
				  (Ref, ['flush'])
			      %% Line 1396
			      Reply
		    after 'infinity' ->
		      'true'
'le_info'/2 =
    %% Line 1431
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'prepared',{'simple_qlc',P,LE,L,_cor54,Optz},_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62},%% Line 1432
														  InfOpt> when 'true' ->
	      let <QVar> =
		  %% Line 1433
		  call 'erlang':'term_to_binary'
		      ({'var',L,P})
	      in  let <_cor4> =
		      %% Line 1434
		      apply 'le_info'/2
			  (LE, InfOpt)
		  in  let <_cor3> =
			  %% Line 1434
			  apply 'opt_info'/1
			      (Optz)
		      in  %% Line 1434
			  {'qlc',QVar,[{'generate',QVar,_cor4}|[]],_cor3}
	  %% Line 1435
	  <{'prepared',{'qlc',_cor63,CodeF,Qdata,_cor64,Optz},_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72},%% Line 1436
														       InfOpt> when 'true' ->
	      let <Code> =
		  %% Line 1437
		  apply CodeF
		      ()
	      in  let <TemplateState> =
		      %% Line 1438
		      apply 'template_state'/0
			  ()
		  in  let <E> =
			  %% Line 1439
			  call 'erlang':'element'
			      (TemplateState, Code)
		      in  let <QualInfo0> =
			      %% Line 1440
			      apply 'qual_info'/3
				  (Qdata, Code, InfOpt)
			  in  %% Line 1441
			      ( case Optz of
				  ( <( {'optz',_cor73,_cor74,_cor75,_rec4,_cor76}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor12> =
					    case _rec4 of
					      %% Line 1442
					      <Join = {'qlc_join',_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
						  %% Line 1443
						  apply 'join_info'/4
						      (Join, QualInfo0, Qdata, Code)
					      %% Line 1444
					      <'no'> when 'true' ->
						  %% Line 1445
						  QualInfo0
					      ( <_cor11> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor11})
						-| ['compiler_generated'] )
					    end
					in  let <_cor18> =
						%% Line 1447
						( letrec
						      'lc$^0'/1 =
							  fun (_cor16) ->
							      case _cor16 of
								<[I|_cor15]>
								    when call 'erlang':'=/='
									  (I,
									   'skip') ->
								    let <_cor17> =
									apply 'lc$^0'/1
									    (_cor15)
								    in  ( [I|_cor17]
									  -| ['compiler_generated'] )
								( <[I|_cor15]> when 'true' ->
								      apply 'lc$^0'/1
									  (_cor15)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor16> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor16})
									-| [{'function_name',{'lc$^0',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^0'/1
							  (_cor12)
						  -| ['list_comprehension'] )
					    in  let <_cor20> =
						    %% Line 1448
						    apply 'opt_info'/1
							(Optz)
						in  %% Line 1448
						    {'qlc',E,_cor18,_cor20}
				    -| ['compiler_generated'] )
				  ( <_cor77> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','optz'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
	  %% Line 1449
	  <{'prepared',{'qlc_table',_cor86,TravMS,_cor87,_cor88,_cor89,FormatFun,_cor90,_cor91,_cor92,%% Line 1450
												      LuVals,%% Line 1450
													     MS},_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100},%% Line 1450
																					   InfOpt> when 'true' ->
	      %% Line 1451
	      case InfOpt of
		<{NElements,Depth}> when 'true' ->
		    let <DepthFun> =
			%% Line 1454
			apply 'depth_fun'/1
			    (Depth)
		    in  %% Line 1455
			case LuVals of
			  %% Line 1456
			  <_cor101>
			      when call 'erlang':'=:='
				    (FormatFun,
				     'undefined') ->
			      %% Line 1457
			      {'table',{'$MOD','$FUN',[]}}
			  %% Line 1458
			  <{Pos,Vals}> when 'true' ->
			      let <_cor27> =
				  %% Line 1459
				  try
				      apply FormatFun
					  ({'lookup',Pos,Vals,NElements,DepthFun})
				  of <_cor23> ->
				      _cor23
				  catch <_cor26,_cor25,_cor24> ->
				      %% Line 1460
				      apply FormatFun
					  ({'lookup',Pos,Vals})
			      in  %% Line 1462
				  case <> of
				    %% Line 1463
				    <>
					when call 'erlang':'=:='
					      (MS,
					       'no_match_spec') ->
					%% Line 1464
					{'table',_cor27}
				    %% Line 1465
				    <> when 'true' ->
					let <_cor29> =
					    %% Line 1466
					    apply 'depth'/2
						(MS, Depth)
					in  %% Line 1466
					    {'list',{'table',_cor27},_cor29}
				  end
			  %% Line 1468
			  <_cor105>
			      when let <_cor30> =
				    call 'erlang':'=:='
					(TravMS, 'true')
				in  let <_cor31> =
					call 'erlang':'is_list'
					    (MS)
				    in  call 'erlang':'and'
					    (_cor30, _cor31) ->
			      let <_cor32> =
				  %% Line 1469
				  apply 'depth'/2
				      (MS, Depth)
			      in  let <_cor33> =
				      %% Line 1469
				      apply FormatFun
					  ({'match_spec',_cor32})
				  in  %% Line 1469
				      {'table',_cor33}
			  %% Line 1470
			  <_cor106>
			      when call 'erlang':'=:='
				    (MS,
				     'no_match_spec') ->
			      %% Line 1471
			      try
				  let <_cor34> =
				      apply FormatFun
					  ({'all',NElements,DepthFun})
				  in  {'table',_cor34}
			      of <_cor35> ->
				  _cor35
			      catch <_cor38,_cor37,_cor36> ->
				  let <_cor39> =
				      %% Line 1472
				      apply FormatFun
					  ('all')
				  in  %% Line 1472
				      {'table',_cor39}
			  ( <_cor40> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor40})
			    -| ['compiler_generated'] )
			end
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1475
	  <{'prepared',{'qlc_append',HL},_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117},InfOpt> when 'true' ->
	      let <_cor46> =
		  %% Line 1476
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor43) ->
				case _cor43 of
				  <[H|_cor42]> when 'true' ->
				      let <_cor44> =
					  apply 'le_info'/2
					      (H, InfOpt)
				      in  let <_cor45> =
					      apply 'lc$^1'/1
						  (_cor42)
					  in  ( [_cor44|_cor45]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor43> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor43})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (HL)
		    -| ['list_comprehension'] )
	      in  %% Line 1476
		  {'append',_cor46}
	  %% Line 1477
	  <{'prepared',{'qlc_sort',H,'sort',_cor118,_cor119,_cor120,%% Line 1478
								    SortOptions0,_cor121,%% Line 1478
											 TmpDir},_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129},%% Line 1479
																				  InfOpt> when 'true' ->
	      let <SortOptions> =
		  %% Line 1480
		  apply 'sort_options_global_tmp'/2
		      (SortOptions0, TmpDir)
	      in  let <_cor48> =
		      %% Line 1481
		      apply 'le_info'/2
			  (H, InfOpt)
		  in  %% Line 1481
		      {'sort',_cor48,SortOptions}
	  %% Line 1482
	  <{'prepared',{'qlc_sort',H,{'keysort',Kp},_cor130,_cor131,_cor132,%% Line 1483
									    SortOptions0,_cor133,%% Line 1483
												 TmpDir},_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141},%% Line 1484
																					  InfOpt> when 'true' ->
	      let <SortOptions> =
		  %% Line 1485
		  apply 'sort_options_global_tmp'/2
		      (SortOptions0, TmpDir)
	      in  let <_cor50> =
		      %% Line 1486
		      apply 'le_info'/2
			  (H, InfOpt)
		  in  %% Line 1486
		      {'keysort',_cor50,Kp,SortOptions}
	  %% Line 1487
	  <{'prepared',{'qlc_list',L,'no_match_spec'},_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149},_X_InfOpt> when 'true' ->
	      %% Line 1488
	      {'list',L}
	  %% Line 1489
	  <{'prepared',{'qlc_list',L,MS},_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157},_X_InfOpt>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1490
	      {'list',{'list',L},MS}
	  %% Line 1491
	  <{'prepared',{'qlc_list',L,MS},_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165},InfOpt> when 'true' ->
	      let <_cor51> =
		  %% Line 1492
		  apply 'le_info'/2
		      (L, InfOpt)
	      in  %% Line 1492
		  {'list',_cor51,MS}
	  ( <_cor53,_cor52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor53,_cor52})
		  -| [{'function_name',{'le_info',2}}] )
	    -| ['compiler_generated'] )
	end
'qual_info'/3 =
    %% Line 1494
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_X_QNum,_X_GoI,-1,'fil'}|Qdata],Code,InfOpt> when 'true' ->
	      let <_cor3> =
		  %% Line 1496
		  apply 'qual_info'/3
		      (Qdata, Code, InfOpt)
	      in  %% Line 1496
		  ['skip'|_cor3]
	  %% Line 1497
	  <[{QNum,_X_GoI,_X_SI,'fil'}|Qdata],Code,InfOpt> when 'true' ->
	      let <_cor4> =
		  %% Line 1498
		  call 'erlang':'+'
		      (QNum, 1)
	      in  let <_cor5> =
		      %% Line 1498
		      call 'erlang':'element'
			  (_cor4, Code)
		  in  let <_cor6> =
			  %% Line 1498
			  apply 'qual_info'/3
			      (Qdata, Code, InfOpt)
		      in  %% Line 1498
			  [_cor5|_cor6]
	  %% Line 1499
	  <[{_X_QNum,_X_GoI,_X_SI,{'gen',{'join',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}}}|Qdata],%% Line 1500
												     Code,%% Line 1500
													  InfOpt> when 'true' ->
	      let <_cor7> =
		  %% Line 1501
		  apply 'qual_info'/3
		      (Qdata, Code, InfOpt)
	      in  %% Line 1501
		  ['skip'|_cor7]
	  %% Line 1502
	  <[{QNum,_X_GoI,_X_SI,{'gen',LE}}|Qdata],Code,InfOpt> when 'true' ->
	      let <_cor9> =
		  %% Line 1503
		  call 'erlang':'+'
		      (QNum, 1)
	      in  let <_cor10> =
		      %% Line 1503
		      call 'erlang':'element'
			  (_cor9, Code)
		  in  let <_cor8> =
			  %% Line 1503
			  apply 'le_info'/2
			      (LE, InfOpt)
		      in  let <_cor11> =
			      %% Line 1504
			      apply 'qual_info'/3
				  (Qdata, Code, InfOpt)
			  in  %% Line 1503
			      [{'generate',_cor10,_cor8}|_cor11]
	  %% Line 1505
	  <[],_X_Code,_X_InfOpt> when 'true' ->
	      %% Line 1506
	      []
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'qual_info',3}}] )
	    -| ['compiler_generated'] )
	end
'join_info'/4 =
    %% Line 1508
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1510
	case _cor3 of
	  <{'qlc_join',Kind,Opt,_cor57,QNum1a,C1,_cor58,QNum2a,C2}> when 'true' ->
	      %% Line 1511
	      case %% Line 1512
		   apply 'find_join_data'/3
		       (_cor1, QNum1a, QNum2a) of
		<{{JQNum,_cor59,_cor60,_cor61},Rev,QNum1,QNum2,_X_WH1,_X_WH2,CsFun}> when 'true' ->
		    %% Line 1513
		    case apply CsFun
			     () of
		      <{Cs1_0,Cs2_0,Compat}> when 'true' ->
			  let <_cor22> =
			      %% Line 1514
			      case Compat of
				%% Line 1515
				<[]> when 'true' ->
				    %% Line 1516
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor9) ->
						  case _cor9 of
						    <[%% Line 1517
						      CVs|_cor8]> when 'true' ->
							let <_cor19> =
							    ( letrec
								  'lc$^1'/1 =
								      fun (_cor12) ->
									  case _cor12 of
									    <[{C,Vs}|_cor11]> when 'true' ->
										let <_cor17> =
										    ( letrec
											  'lc$^2'/1 =
											      fun (_cor15) ->
												  case _cor15 of
												    <[V|_cor14]> when 'true' ->
													let <_cor16> =
													    apply 'lc$^2'/1
														(_cor14)
													in  ( [{V,'=:='}|_cor16]
													      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_cor15> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor15})
													    -| [{'function_name',{'lc$^2',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  apply 'lc$^2'/1
											      (Vs)
										      -| ['list_comprehension'] )
										in  let <_cor18> =
											apply 'lc$^1'/1
											    (_cor11)
										    in  ( [{C,_cor17}|_cor18]
											  -| ['compiler_generated'] )
									    ( <[_cor10|_cor11]> when 'true' ->
										  apply 'lc$^1'/1
										      (_cor11)
									      -| ['compiler_generated'] )
									    <[]> when 'true' ->
										[]
									    ( <_cor12> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor12})
										    -| [{'function_name',{'lc$^1',1}}] )
									      -| ['compiler_generated'] )
									  end
							      in  apply 'lc$^1'/1
								      (CVs)
							      -| ['list_comprehension'] )
							in  let <_cor20> =
								%% Line 1517
								apply 'lc$^0'/1
								    (_cor8)
							    in  ( [_cor19|_cor20]
								  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor9> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor9})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (%% Line 1517
					       [Cs1_0|[Cs2_0|[]]])
				      -| ['list_comprehension'] )
				%% Line 1518
				<_cor62> when 'true' ->
				    %% Line 1520
				    [Cs1_0|[Cs2_0|[]]]
			      end
			  in  %% Line 1514
			      case _cor22 of
				<[Cs1|[Cs2|[]]]> when 'true' ->
				    let <_cor27> =
					%% Line 1524
					call 'erlang':'+'
					    (JQNum, 1)
				    in  let <JP> =
					    %% Line 1524
					    call 'erlang':'element'
						(_cor27, _cor0)
					in  let <_cor39> =
						%% Line 1527
						case Kind of
						  %% Line 1528
						  <{'merge',_cor63}> when 'true' ->
						      %% Line 1529
						      case apply 'join_merge_info'/5
							       (QNum1, _cor2, _cor0, {'var',0,'G1'}, Cs1) of
							<{JG1,QInfo1}> when 'true' ->
							    %% Line 1530
							    case apply 'join_merge_info'/5
								     (QNum2, _cor2, _cor0, {'var',0,'G2'}, Cs2) of
							      <{JG2,QInfo2}> when 'true' ->
								  let <_cor31> =
								      %% Line 1531
								      call 'erlang':'++'
									  (QInfo1, QInfo2)
								  in  %% Line 1531
								      {JG1,JG2,_cor31}
							      ( <_cor30> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor30})
								-| ['compiler_generated'] )
							    end
							( <_cor29> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor29})
							  -| ['compiler_generated'] )
						      end
						  %% Line 1532
						  <_cor64>
						      when call 'erlang':'=:='
							    (Rev,
							     'true') ->
						      %% Line 1533
						      case apply 'join_merge_info'/5
							       (QNum2, _cor2, _cor0, {'var',0,'G2'}, Cs2) of
							<{JG2,QInfo2}> when 'true' ->
							    %% Line 1534
							    case apply 'join_lookup_info'/3
								     (QNum1, _cor2, {'var',0,'G1'}) of
							      <{J1,QInfo1}> when 'true' ->
								  let <_cor34> =
								      %% Line 1535
								      call 'erlang':'++'
									  (QInfo2, [QInfo1|[]])
								  in  %% Line 1535
								      {{J1,{'var',0,'G1'}},JG2,_cor34}
							      ( <_cor33> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor33})
								-| ['compiler_generated'] )
							    end
							( <_cor32> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor32})
							  -| ['compiler_generated'] )
						      end
						  %% Line 1536
						  <_cor65> when 'true' ->
						      %% Line 1537
						      case apply 'join_merge_info'/5
							       (QNum1, _cor2, _cor0, {'var',0,'G1'}, Cs1) of
							<{JG1,QInfo1}> when 'true' ->
							    %% Line 1538
							    case apply 'join_lookup_info'/3
								     (QNum2, _cor2, {'var',0,'G2'}) of
							      <{J2,QInfo2}> when 'true' ->
								  let <_cor37> =
								      %% Line 1539
								      call 'erlang':'++'
									  (QInfo1, [QInfo2|[]])
								  in  %% Line 1539
								      {JG1,{J2,{'var',0,'G2'}},_cor37}
							      ( <_cor36> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor36})
								-| ['compiler_generated'] )
							    end
							( <_cor35> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor35})
							  -| ['compiler_generated'] )
						      end
						end
					    in  %% Line 1526
						case _cor39 of
						  <{{I1,G1},{I2,G2},QInfoL}> when 'true' ->
						      %% Line 1541
						      case apply 'kind2op'/1
							       (Kind) of
							<{JOptVal,JOp}> when 'true' ->
							    let <_cor42> =
								%% Line 1542
								apply 'join_unique_cache'/1
								    (Opt)
							    in  let <_cor43> =
								    %% Line 1542
								    apply 'opt_info'/1
									(_cor42)
								in  let <JOpt> =
									%% Line 1542
									[{'join',JOptVal}|_cor43]
								    in  let <JFil> =
									    %% Line 1543
									    call 'erlang':'term_to_binary'
										({'op',0,JOp,%% Line 1544
											     {'call',0,{'atom',0,'element'},[{'integer',0,C1}|[G1|[]]]},%% Line 1545
																			{'call',0,{'atom',0,'element'},[{'integer',0,C2}|[G2|[]]]}})
									in  let <P> =
										%% Line 1546
										call 'erlang':'term_to_binary'
										    ({'cons',0,G1,G2})
									    in  let <_cor47> =
										    %% Line 1547
										    call 'erlang':'++'
											(QInfoL, [JFil|[]])
										in  let <JInfo> =
											%% Line 1547
											{'generate',JP,{'qlc',P,_cor47,JOpt}}
										    in  let <_cor49> =
											    %% Line 1548
											    call 'erlang':'-'
												(QNum1, 1)
											in  %% Line 1548
											    case call 'lists':'split'
												     (_cor49, _cor2) of
											      <{Before,[_cor66|After]}>
												  when call 'erlang':'=:='
													(_cor66,
													 I1) ->
												  let <_cor51> =
												      %% Line 1549
												      call 'lists':'delete'
													  (I2, After)
												  in  let <_cor52> =
													  %% Line 1549
													  [JInfo|_cor51]
												      in  %% Line 1549
													  call 'erlang':'++'
													      (Before, _cor52)
											      ( <_cor50> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor50})
												-| ['compiler_generated'] )
											    end
							( <_cor41> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor41})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor40> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor40})
						    -| ['compiler_generated'] )
						end
				( <_cor23> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor23})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'kind2op'/1 =
    %% Line 1551
    fun (_cor0) ->
	case _cor0 of
	  <{'merge',_X_KE}> when 'true' ->
	      {'merge','=='}
	  %% Line 1552
	  <{'lookup',KE,_X_LU_fun}> when 'true' ->
	      {'lookup',KE}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'kind2op',1}}] )
	    -| ['compiler_generated'] )
	end
'join_merge_info'/5 =
    %% Line 1557
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1558
	case call 'lists':'nth'
		 (_cor4, _cor3) of
	  <I = {'generate',_cor43,LEInfo}> when 'true' ->
	      let <_cor6> =
		  %% Line 1559
		  call 'erlang':'+'
		      (_cor4, 1)
	      in  let <_cor7> =
		      %% Line 1559
		      call 'erlang':'element'
			  (_cor6, _cor2)
		  in  let <P> =
			  %% Line 1559
			  call 'erlang':'binary_to_term'
			      (_cor7)
		      in  %% Line 1560
			  case <P,_cor0> of
			    %% Line 1561
			    <{'var',_cor44,_cor45},[]> when 'true' ->
				let <TP> =
				    %% Line 1563
				    call 'erlang':'term_to_binary'
					(_cor1)
				in  let <I2> = {%% Line 1564
					 'generate',%% Line 1564
						    TP,%% Line 1564
						       LEInfo}
				    in  %% Line 1565
					{{I,_cor1},[I2|[]]}
			    %% Line 1566
			    <_fol154,_fol155> when 'true' ->
				let <EPV,M> =
				    %% Line 1568
				    case P of
				      %% Line 1569
				      <{'var',_cor47,_cor48}> when 'true' ->
					  %% Line 1571
					  <P,P>
				      %% Line 1572
				      <_cor49> when 'true' ->
					  let <_cor11> =
					      %% Line 1573
					      apply 'abstract_vars'/1
						  (P)
					  in  %% Line 1573
					      case apply 'aux_name1'/3
						       ('P', 0, _cor11) of
						<{PV,_cor50}> when 'true' ->
						    let <V> = {%% Line 1575
							 'var',%% Line 1574
							       0,%% Line 1575
								 PV}
						    in  %% Line 1576
							<V,{'match',0,V,P}>
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor12})
						  -| ['compiler_generated'] )
					      end
				    end
				in  let <DQP> =
					%% Line 1578
					call 'erlang':'term_to_binary'
					    (EPV)
				    in  let <_cor19> =
					    %% Line 1579
					    call 'erlang':'term_to_binary'
						(M)
					in  let <LEI> = {%% Line 1579
						 'generate',_cor19,%% Line 1579
								   LEInfo}
					    in  let <TP> =
						    %% Line 1580
						    call 'erlang':'term_to_binary'
							(_cor1)
						in  let <_cor35> =
							%% Line 1581
							( letrec
							      'lc$^0'/1 =
								  fun (_cor24) ->
								      case _cor24 of
									<[%% Line 1587
									  {Col,ConstOps}|_cor23]> when 'true' ->
									    let <Call> =
										%% Line 1582
										{'call',0,{'atom',0,'element'},[{'integer',0,Col}|[EPV|[]]]}
									    in  let <_cor31> =
										    %% Line 1583
										    ( letrec
											  'lc$^1'/1 =
											      fun (_cor28) ->
												  case _cor28 of
												    <[%% Line 1584
												      {Con,Op}|_cor27]> when 'true' ->
													let <_cor29> =
													    apply 'abstract_term'/1
														(Con)
													in  let <_cor30> =
														%% Line 1584
														apply 'lc$^1'/1
														    (_cor27)
													    in  ( [{'op',0,Op,_cor29,Call}|_cor30]
														  -| ['compiler_generated'] )
												    ( <[_cor26|_cor27]> when 'true' ->
													  %% Line 1584
													  apply 'lc$^1'/1
													      (_cor27)
												      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_cor28> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor28})
													    -| [{'function_name',{'lc$^1',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  apply 'lc$^1'/1
											      (%% Line 1584
											       ConstOps)
										      -| ['list_comprehension'] )
										in  let <F> =
											%% Line 1583
											apply 'list2op'/2
											    (_cor31, %% Line 1584
												     'or')
										    in  let <_cor33> =
											    %% Line 1585
											    call 'erlang':'term_to_binary'
												(F)
											in  let <_cor34> =
												%% Line 1587
												apply 'lc$^0'/1
												    (_cor23)
											    in  ( [_cor33|_cor34]
												  -| ['compiler_generated'] )
									( <[_cor22|_cor23]> when 'true' ->
									      %% Line 1587
									      apply 'lc$^0'/1
										  (_cor23)
									  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    []
									( <_cor24> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor24})
										-| [{'function_name',{'lc$^0',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  apply 'lc$^0'/1
								  (_cor0)
							  -| ['list_comprehension'] )
						    in  %% Line 1588
							{{I,_cor1},[{'generate',TP,{'qlc',DQP,[LEI|_cor35],[]}}|[]]}
			  end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'list2op'/2 =
    %% Line 1591
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|[]],_X_Op> when 'true' ->
	      %% Line 1592
	      E
	  %% Line 1593
	  <[E|Es],Op> when 'true' ->
	      let <_cor2> =
		  %% Line 1594
		  apply 'list2op'/2
		      (Es, Op)
	      in  %% Line 1594
		  {'op',0,Op,E,_cor2}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'list2op',2}}] )
	    -| ['compiler_generated'] )
	end
'join_lookup_info'/3 =
    %% Line 1596
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1597
	case call 'lists':'nth'
		 (_cor2, _cor1) of
	  <I = {'generate',_cor8,LEInfo}> when 'true' ->
	      let <TP> =
		  %% Line 1598
		  call 'erlang':'term_to_binary'
		      (_cor0)
	      in  %% Line 1599
		  {I,{'generate',TP,LEInfo}}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'opt_info'/1 =
    %% Line 1601
    fun (_cor0) ->
	case _cor0 of
	  <{'optz',Unique,Cache0,JoinOption,_cor15,_cor16}> when 'true' ->
	      let <_cor1> =
		  %% Line 1606
		  case <> of
		    %% Line 1607
		    <>
			when call 'erlang':'=:='
			      (Cache0,
			       'true') ->
			'ets'
		    %% Line 1608
		    <> when 'true' ->
			Cache0
		  end
	      in  let <_cor7> =
		      %% Line 1612
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[{T,V}|_cor4]>
					  when call 'erlang':'=:='
						(V,
						 'nested_loop') ->
					  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [{T,V}|_cor6]
						-| ['compiler_generated'] )
				      ( <[_cor3|_cor4]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor4)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				([{'join',JoinOption}|[]])
			-| ['list_comprehension'] )
		  in  %% Line 1610
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor11) ->
				    case _cor11 of
				      <[{T,V}|_cor9]> when 'true' ->
					  let <_cor10> =
					      %% Line 1611
					      apply 'default_option'/1
						  (T)
					  in  %% Line 1611
					      ( case <> of
						  <>
						      when call 'erlang':'=/='
							    (V,
							     _cor10) ->
						      let <_cor12> =
							  apply 'lc$^1'/1
							      (_cor9)
						      in  ( [{T,V}|_cor12]
							    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							apply 'lc$^1'/1
							    (_cor9)
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				      ( <[_cor8|_cor9]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor9)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  _cor7
				      ( <_cor11> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor11})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				([{'cache',_cor1}|[{'unique',Unique}|[]]])
			-| ['list_comprehension'] )
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'opt_info',1}}] )
	    -| ['compiler_generated'] )
	end
'prepare_qlc'/7 =
    %% Line 1614
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <GOpt> =
	    %% Line 1615
	    {'qlc_opt',_cor4,_cor3,-1,'any',_cor2,'any',_cor1,_cor0}
	in  let <_cor9> =
		%% Line 1618
		apply 'prep_le'/2
		    (_cor6, GOpt)
	    in  %% Line 1618
		case apply 'opt_le'/2
			 (_cor9, 1) of
		  %% Line 1619
		  <Prep = {'prepared',QLC = {'qlc',_cor30,_cor31,_cor32,_cor33,_cor34},_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
		      let <_cor12> =
			  %% Line 1620
			  call 'erlang':'setelement'
			      (5, QLC, _cor5)
		      in  %% Line 1620
			  call 'erlang':'setelement'
			      (2, Prep, _cor12)
		  %% Line 1621
		  <Prep = {'prepared',SimpleQLC = {'simple_qlc',_cor59,_cor60,_cor61,_cor62,_cor63},_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}> when 'true' ->
		      let <_cor18> =
			  %% Line 1622
			  call 'erlang':'setelement'
			      (5, SimpleQLC, _cor5)
		      in  %% Line 1622
			  call 'erlang':'setelement'
			      (2, Prep, _cor18)
		  %% Line 1623
		  <Prep> when 'true' ->
		      %% Line 1624
		      Prep
		end
'prep_le'/2 =
    %% Line 1633
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <H = {'qlc_lc',LC_fun,Opt0 = {'qlc_opt',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91}},GOpt> when 'true' ->
	      %% Line 1636
	      case GOpt of
		<{'qlc_opt',GUnique,GCache,_cor92,_cor93,TmpDir,_cor94,MaxList,TmpUsage}> when 'true' ->
		    let <Unique> =
			%% Line 1637
			call 'erlang':'or'
			    (_cor84, GUnique)
		    in  let <_cor9> =
			    %% Line 1638
			    case <> of
			      %% Line 1639
			      <>
				  when let <_cor6> =
					call 'erlang':'=:='
					    (GCache, 'false')
				    in  let <_cor7> =
					    call 'erlang':'is_boolean'
						(GCache)
					in  call 'erlang':'and'
						(_cor6, _cor7) ->
				  _cor85
			      %% Line 1640
			      <> when 'true' ->
				  GCache
			    end
			in  let <_cor13> =
				%% Line 1644
				{'qlc_opt',Unique,_cor9,_cor86,_cor87,TmpDir,_cor89,MaxList,TmpUsage}
			    in  let <_cor15> =
				    %% Line 1645
				    apply LC_fun
					()
				in  %% Line 1645
				    apply 'prep_qlc_lc'/4
					(_cor15, _cor13, GOpt, H)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1646
	  <T = {'qlc_table',_cor112,_cor113,_cor114,_cor115,IF,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121},GOpt> when 'true' ->
	      %% Line 1647
	      case apply 'table_sort_info'/1
		       (T) of
		<{SortInfo,Sorted}> when 'true' ->
		    let <IsUnique> =
			%% Line 1648
			apply 'grd'/2
			    (IF, 'is_unique_objects')
		    in  let <Prep> =
			    %% Line 1649
			    {'prepared',T,Sorted,SortInfo,[],[],{[],[]},'undefined',%% Line 1650
										    IsUnique,'false'}
			in  let <_cor44> =
				%% Line 1651
				case <> of
				  %% Line 1652
				  <>
				      when try
					    let <_cor19> =
						call 'erlang':'=:='
						    (IsUnique, 'true')
					    in  ( case <> of
						    ( <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'is_record'
												   -| ['compiler_generated'] )
								  (GOpt,
								   ( 'qlc_opt'
								     -| ['compiler_generated'] ),
								   ( 9
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ) ->
							  let <_cor24> =
							      ( call 'erlang':'element'
								    (2, GOpt)
								-| ['compiler_generated'] )
							  in  let <_cor25> =
								  ( call 'erlang':'=:='
									(_cor24, 'true')
								    -| ['compiler_generated'] )
							      in  let <_cor27> =
								      ( call 'erlang':'not'
									    (_cor25)
									-| ['compiler_generated'] )
								  in  let <_cor28> =
									  ( call 'erlang':'or'
										(_cor19, _cor27)
									    -| ['compiler_generated'] )
								      in  let <_cor34> =
									      %% Line 1653
									      ( call 'erlang':'=:='
										    (_cor121, 'no_match_spec')
										-| ['compiler_generated'] )
									  in  let <_cor36> =
										  ( call 'erlang':'and'
											(_cor28, _cor34)
										    -| ['compiler_generated'] )
									      in  let <_cor37> =
										      ( call 'erlang':'is_boolean'
											    (_cor24)
											-| ['compiler_generated'] )
										  in  let <_cor38> =
											  ( call 'erlang':'and'
												(_cor36, _cor37)
											    -| ['compiler_generated'] )
										      in  let <_cor41> =
											      ( call 'erlang':'is_boolean'
												    (IsUnique)
												-| ['compiler_generated'] )
											  in  ( call 'erlang':'and'
												    (_cor38, _cor41)
												-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 1654
				      case GOpt of
					<{'qlc_opt',_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129}> when 'true' ->
					    call 'erlang':'setelement'
						(3, GOpt, 'false')
					( <_cor130> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','qlc_opt'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 1655
				  <> when 'true' ->
				      %% Line 1656
				      GOpt
				end
			    in  %% Line 1658
				apply 'may_create_simple'/2
				    (_cor44, Prep)
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1659
	  <{'qlc_append',HL},GOpt> when 'true' ->
	      let <_cor54> =
		  %% Line 1660
		  ( fun (_cor52) ->
			case _cor52 of
			  <{'prepared',{'qlc_list',[],_cor131},_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139}> when 'true' ->
			      []
			  %% Line 1661
			  <{'prepared',{'qlc_append',HL1},_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147}> when 'true' ->
			      HL1
			  %% Line 1662
			  <H> when 'true' ->
			      [H|[]]
			end
		    -| [{'id',{0,0,'-prep_le/2-fun-0-'}}] )
	      in  let <_cor51> =
		      %% Line 1663
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor48) ->
				    case _cor48 of
				      <[H|_cor47]> when 'true' ->
					  let <_cor49> =
					      apply 'prep_le'/2
						  (H, GOpt)
					  in  let <_cor50> =
						  apply 'lc$^0'/1
						      (_cor47)
					      in  ( [_cor49|_cor50]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor48> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor48})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(HL)
			-| ['list_comprehension'] )
		  in  %% Line 1660
		      case call 'lists':'flatmap'
			       (_cor54, _cor51) of
			%% Line 1664
			<Nil = []> when 'true' ->
			    %% Line 1665
			    apply 'short_list'/1
				(Nil)
			%% Line 1666
			<[Prep|[]]> when 'true' ->
			    %% Line 1667
			    Prep
			%% Line 1668
			<PrepL> when 'true' ->
			    let <_cor57> =
				%% Line 1669
				( fun (_cor55) ->
				      case _cor55 of
					<{'prepared',_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,IsC}> when 'true' ->
					    call 'erlang':'=/='
						(IsC, 'false')
					( <_cor56> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor56})
						-| [{'function_name',{'-prep_le/2-fun-1-',1}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-prep_le/2-fun-1-'}}] )
			    in  let <Cache> =
				    %% Line 1669
				    call 'lists':'all'
					(_cor57, %% Line 1670
						 PrepL)
				in  let <Prep> =
					%% Line 1672
					{'prepared',{'qlc_append',PrepL},'no',[],[],[],{[],[]},'undefined','false',Cache}
				    in  %% Line 1673
					apply 'may_create_simple'/2
					    (GOpt, Prep)
		      end
	  %% Line 1675
	  <Q0 = {'qlc_sort',H0,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162},GOpt> when 'true' ->
	      let <_rec23> =
		  %% Line 1677
		  apply 'prep_le'/2
		      (H0, GOpt)
	      in  let <_cor64> =
		      %% Line 1677
		      call 'erlang':'setelement'
			  (2, Q0, _rec23)
		  in  %% Line 1678
		      apply 'prep_sort'/2
			  (_cor64, GOpt)
	  %% Line 1679
	  <L = [_cor172|[_cor173|_cor174]],GOpt> when 'true' ->
	      let <Prep> =
		  %% Line 1680
		  {'prepared',{'qlc_list',L,'no_match_spec'},'no',[],[],[],{[],[]},'undefined','false','true'}
	      in  let <_cor80> =
		      %% Line 1681
		      case <> of
			%% Line 1682
			<>
			    when try
				  ( case <> of
				      ( <>
					    when ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_record'
										     -| ['compiler_generated'] )
						    (GOpt,
						     ( 'qlc_opt'
						       -| ['compiler_generated'] ),
						     ( 9
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] ) ->
					    let <_cor71> =
						( call 'erlang':'element'
						      (2, GOpt)
						  -| ['compiler_generated'] )
					    in  let <_cor72> =
						    ( call 'erlang':'=:='
							  (_cor71, 'true')
						      -| ['compiler_generated'] )
						in  let <_cor74> =
							( call 'erlang':'not'
							      (_cor72)
							  -| ['compiler_generated'] )
						    in  let <_cor75> =
							    ( call 'erlang':'is_boolean'
								  (_cor71)
							      -| ['compiler_generated'] )
							in  ( call 'erlang':'and'
								  (_cor74, _cor75)
							      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 1683
			    case GOpt of
			      <{'qlc_opt',_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182}> when 'true' ->
				  call 'erlang':'setelement'
				      (3, GOpt, 'false')
			      ( <_cor183> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','qlc_opt'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 1684
			<> when 'true' ->
			    GOpt
		      end
		  in  %% Line 1686
		      apply 'may_create_simple'/2
			  (_cor80, Prep)
	  %% Line 1687
	  <L,_X_GOpt>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1688
	      apply 'short_list'/1
		  (L)
	  %% Line 1689
	  <T,_X_GOpt> when 'true' ->
	      %% Line 1690
	      call 'erlang':'error'
		  ({'unsupported_qlc_handle',{'qlc_handle',T}})
	end
'eval_le'/2 =
    %% Line 1692
    fun (_cor1,_cor0) ->
	%% Line 1693
	case apply _cor1
		 () of
	  %% Line 1694
	  <Error = {'error','qlc',_cor6}> when 'true' ->
	      %% Line 1695
	      apply 'throw_error'/1
		  (Error)
	  %% Line 1696
	  <R> when 'true' ->
	      %% Line 1697
	      case apply 'get_handle'/1
		       (R) of
		%% Line 1698
		<'badarg'> when 'true' ->
		    %% Line 1699
		    call 'erlang':'error'
			('badarg', [R|[]])
		%% Line 1700
		<H> when 'true' ->
		    %% Line 1701
		    apply 'prep_le'/2
			(H, _cor0)
	      end
	end
'prep_qlc_lc'/4 =
    %% Line 1705
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'simple_v1',PVar,LE_fun,L},Opt,GOpt,_X_H> when 'true' ->
	      do  %% Line 1706
		  apply 'check_lookup_option'/2
		      (Opt, 'false')
		  let <_cor4> =
		      %% Line 1707
		      apply 'eval_le'/2
			  (LE_fun, GOpt)
		  in  %% Line 1707
		      apply 'prep_simple_qlc'/4
			  (PVar, L, _cor4, Opt)
	  %% Line 1708
	  <{'qlc_v1',QFun,CodeF,Qdata0,QOpt},Opt,GOpt,_X_H> when 'true' ->
	      let <F> =
		  %% Line 1709
		  ( fun (_cor8,_cor7) ->
			case <_cor8,_cor7> of
			  <QualData = {_X_QNum,_X_GoI,_X_SI,'fil'},ModGens> when 'true' ->
			      %% Line 1710
			      {QualData,ModGens}
			  %% Line 1711
			  <QualData = {_X_QNum,_X_GoI,_X_SI,{'gen',{'join',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}}},ModGens> when 'true' ->
			      %% Line 1712
			      {QualData,ModGens}
			  %% Line 1713
			  <{QNum,GoI,SI,{'gen',LE_fun}},ModGens0> when 'true' ->
			      let <Prep1> =
				  %% Line 1714
				  apply 'eval_le'/2
				      (LE_fun, GOpt)
			      in  %% Line 1715
				  case %% Line 1716
				       apply 'prep_generator'/5
					   (QNum, Prep1, QOpt, Opt, ModGens0) of
				    <{Prep,ModGens}> when 'true' ->
					%% Line 1717
					{{QNum,GoI,SI,{'gen',Prep}},ModGens}
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor10,_cor9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor10,_cor9})
				  -| [{'function_name',{'-prep_qlc_lc/4-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-prep_qlc_lc/4-fun-0-'}}] )
	      in  %% Line 1719
		  case call 'lists':'mapfoldl'
			   (F, [], Qdata0) of
		    <{Qdata,ModGens}> when 'true' ->
			let <SomeLookUp> =
			    %% Line 1720
			    call 'lists':'keymember'
				('true', 2, ModGens)
			in  do  %% Line 1721
				apply 'check_lookup_option'/2
				    (Opt, SomeLookUp)
				%% Line 1722
				case ModGens of
				  %% Line 1723
				  <[{_X_QNum,_X_LookUp,'all',OnePrep}|[]]> when 'true' ->
				      do  %% Line 1724
					  apply 'check_join_option'/1
					      (Opt)
					  %% Line 1725
					  OnePrep
				  %% Line 1726
				  <_cor34> when 'true' ->
				      let <Prep0> =
					  %% Line 1727
					  apply 'prep_qlc'/5
					      (QFun, CodeF, Qdata, QOpt, Opt)
				      in  let <_cor17> =
					      %% Line 1729
					      ( fun (_cor15) ->
						    case _cor15 of
						      <{QNum,_X_LookUp,Fs,_X_Prep}> when 'true' ->
							  [{QNum,Fs}|[]]
						      ( <_cor16> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor16})
							      -| [{'function_name',{'-prep_qlc_lc/4-fun-1-',1}}] )
							-| ['compiler_generated'] )
						    end
						-| [{'id',{0,0,'-prep_qlc_lc/4-fun-1-'}}] )
					  in  let <LU_SkipQuals> =
						  %% Line 1729
						  call 'lists':'flatmap'
						      (_cor17, %% Line 1730
							       ModGens)
					      in  %% Line 1731
						  case Prep0 of
						    <{'prepared',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
							let <_cor21> =
							    call 'erlang':'setelement'
								(6, Prep0, LU_SkipQuals)
							in  %% Line 1732
							    apply 'prep_join'/3
								(_cor21, QOpt, Opt)
						    ( <_cor44> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','prepared'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
				end
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1734
	  <_cor45,_X_Opt,_X_GOpt,H> when 'true' ->
	      %% Line 1735
	      call 'erlang':'error'
		  ({'unsupported_qlc_handle',{'qlc_handle',H}})
	end
'prep_generator'/5 =
    %% Line 1737
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <PosFun> =
	    %% Line 1738
	    ( fun (_cor5) ->
		  apply 'pos_fun'/3
		      (_cor5, _cor2, _cor4)
	      -| [{'id',{0,0,'-prep_generator/5-fun-0-'}}] )
	in  let <_cor9> =
		%% Line 1739
		case apply 'match_specs'/2
			 (_cor2, _cor4) of
		  %% Line 1740
		  <'undefined'> when 'true' ->
		      %% Line 1741
		      {'no_match_spec',[]}
		  %% Line 1742
		  <MSFs0 = {_cor18,_cor19}> when 'true' ->
		      %% Line 1743
		      MSFs0
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor8})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 1745
		case _cor3 of
		  <{'prepared',LE,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
		      %% Line 1746
		      case apply 'prep_gen'/5
			       (LE, _cor3, PosFun, _cor9, _cor1) of
			%% Line 1747
			<{'replace',Fs,LookUp,Prep}> when 'true' ->
			    %% Line 1748
			    {Prep,[{_cor4,LookUp,Fs,Prep}|_cor0]}
			%% Line 1749
			<{'skip',SkipFils,LookUp,Prep}> when 'true' ->
			    %% Line 1750
			    {Prep,[{_cor4,LookUp,SkipFils,Prep}|_cor0]}
			%% Line 1751
			<{'no',_X_Fs,_X_LookUp,Prep}> when 'true' ->
			    %% Line 1752
			    {Prep,_cor0}
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor11})
		    -| ['compiler_generated'] )
		end
'pos_fun'/3 =
    %% Line 1755
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'undefined',QOpt,QNum> when 'true' ->
	      let <_cor3> =
		  %% Line 1756
		  apply 'constants'/2
		      (QOpt, QNum)
	      in  %% Line 1756
		  {'=:=',_cor3}
	  %% Line 1757
	  <'=:=',QOpt,QNum> when 'true' ->
	      let <_cor4> =
		  %% Line 1758
		  apply 'constants'/2
		      (QOpt, QNum)
	      in  %% Line 1758
		  {'=:=',_cor4}
	  %% Line 1759
	  <'==',QOpt,QNum> when 'true' ->
	      %% Line 1760
	      try
		  let <_cor5> =
		      apply 'equal_constants'/2
			  (QOpt, QNum)
		  in  {'==',_cor5}
	      of <_cor6> ->
		  _cor6
	      catch <_cor9,_cor8,_cor7> ->
		  let <_cor10> =
		      %% Line 1761
		      apply 'constants'/2
			  (QOpt, QNum)
		  in  %% Line 1761
		      {'=:=',_cor10}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'pos_fun',3}}] )
	    -| ['compiler_generated'] )
	end
'prep_gen'/5 =
    %% Line 1764
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <LE0 = {'qlc_table',_cor64,TravMS,_cor65,_cor66,%% Line 1765
							  IF,_cor67,%% Line 1765
								    LU_fun,_cor68,%% Line 1766
										  KeyEquality,LuV0,MS0},%% Line 1767
													Prep0,%% Line 1767
													      PosFun0,%% Line 1767
														      {MS,Fs},%% Line 1767
															      Opt> when 'true' ->
	      let <PosFun> =
		  %% Line 1768
		  apply PosFun0
		      (KeyEquality)
	      in  %% Line 1769
		  case apply 'find_const_positions'/4
			   (IF, LU_fun, PosFun, Opt) of
		    <{LuV,{STag,SkipFils}}> when 'true' ->
			let <LU> =
			    %% Line 1770
			    call 'erlang':'=/='
				(LuV, 'false')
			in  %% Line 1771
			    case <> of
			      %% Line 1772
			      <>
				  when let <_cor8> =
					call 'erlang':'=/='
					    (LuV0, 'undefined')
				    in  let <_cor9> =
					    call 'erlang':'=/='
						(MS0, 'no_match_spec')
					in  call 'erlang':'or'
						(_cor8, _cor9) ->
				  %% Line 1773
				  {'no',[],'false',Prep0}
			      %% Line 1774
			      <>
				  when try
					let <_cor10> =
					    call 'erlang':'=/='
						(MS, 'no_match_spec')
					in  call 'erlang':'and'
						(_cor10, LU)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor15> =
				      %% Line 1775
				      case <> of
					%% Line 1776
					<>
					    when let <_cor12> =
						  call 'erlang':'=:='
						      (Fs, SkipFils)
					      in  let <_cor13> =
						      call 'erlang':'=:='
							  (STag, Fs)
						  in  call 'erlang':'or'
							  (_cor12, _cor13) ->
					    %% Line 1779
					    case MS of
					      %% Line 1780
					      <[{'$1',_X_Guard,['$1']}|[]]> when 'true' ->
						  %% Line 1781
						  'no_match_spec'
					      %% Line 1782
					      <[{Head,_X_Guard,Body}|[]]> when 'true' ->
						  %% Line 1783
						  [{Head,[],Body}|[]]
					      ( <_cor14> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor14})
						-| ['compiler_generated'] )
					    end
					%% Line 1785
					<> when 'true' ->
					    %% Line 1786
					    MS
				      end
				  in  let <_cor18> =
					  %% Line 1788
					  call 'erlang':'setelement'
					      (12, LE0, _cor15)
				      in  let <_cor20> =
					      %% Line 1788
					      call 'erlang':'setelement'
						  (11, _cor18, LuV)
					  in  %% Line 1788
					      case Prep0 of
						<{'prepared',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89}> when 'true' ->
						    let <_cor24> =
							call 'erlang':'setelement'
							    (2, Prep0, _cor20)
						    in  %% Line 1789
							{'replace',Fs,LU,_cor24}
						( <_cor90> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','prepared'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
			      %% Line 1790
			      <>
				  when LU ->
				  let <_cor28> =
				      %% Line 1791
				      call 'erlang':'setelement'
					  (11, LE0, LuV)
				  in  %% Line 1791
				      case Prep0 of
					<{'prepared',_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111}> when 'true' ->
					    let <_cor32> =
						call 'erlang':'setelement'
						    (2, Prep0, _cor28)
					    in  %% Line 1792
						{'skip',SkipFils,LU,_cor32}
					( <_cor112> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','prepared'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      %% Line 1793
			      <>
				  when let <_cor34> =
					call 'erlang':'=:='
					    (TravMS, 'true')
				    in  let <_cor35> =
					    call 'erlang':'=/='
						(MS, 'no_match_spec')
					in  call 'erlang':'and'
						(_cor34, _cor35) ->
				  let <_cor38> =
				      %% Line 1794
				      call 'erlang':'setelement'
					  (12, LE0, MS)
				  in  %% Line 1794
				      case Prep0 of
					<{'prepared',_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133}> when 'true' ->
					    let <_cor41> =
						%% Line 1795
						call 'erlang':'setelement'
						    (9, Prep0, 'false')
					    in  let <_cor43> =
						    call 'erlang':'setelement'
							(2, _cor41, _cor38)
						in  let <_cor45> =
							%% Line 1796
							apply 'may_create_simple'/2
							    (Opt, _cor43)
						    in  %% Line 1796
							{'replace',Fs,'false',_cor45}
					( <_cor134> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','prepared'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      %% Line 1797
			      <> when 'true' ->
				  %% Line 1798
				  {'no',[],'false',Prep0}
			    end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1800
	  <{'qlc_list',[],_cor135},Prep0,_X_PosFun,{_X_MS,Fs},_X_Opt> when 'true' ->
	      %% Line 1802
	      {'replace',Fs,'false',Prep0}
	  %% Line 1803
	  <LE0 = {'qlc_list',_cor136,'no_match_spec'},Prep0,_X_PosFun,{MS,Fs},Opt>
	      when %% Line 1804
		call 'erlang':'=/='
		    (MS,
		     'no_match_spec') ->
	      let <_cor48> =
		  %% Line 1805
		  call 'erlang':'setelement'
		      (3, LE0, MS)
	      in  %% Line 1805
		  case Prep0 of
		    <{'prepared',_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148}> when 'true' ->
			let <_cor51> =
			    %% Line 1806
			    call 'erlang':'setelement'
				(10, Prep0, 'false')
			in  let <_cor53> =
				call 'erlang':'setelement'
				    (2, _cor51, _cor48)
			    in  let <_cor55> =
				    %% Line 1807
				    apply 'may_create_simple'/2
					(Opt, _cor53)
				in  %% Line 1807
				    {'replace',Fs,'false',_cor55}
		    ( <_cor149> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','prepared'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1808
	  <{'qlc_list',_cor150,_cor151},Prep0,_X_PosFun,{MS,Fs},Opt>
	      when %% Line 1809
		call 'erlang':'=/='
		    (MS,
		     'no_match_spec') ->
	      let <ListMS> = {%% Line 1810
		   'qlc_list',%% Line 1810
			      Prep0,%% Line 1810
				    MS}
	      in  let <LE> =
		      %% Line 1811
		      {'prepared',ListMS,'no',[],[],[],{[],[]},'undefined','false','false'}
		  in  let <_cor58> =
			  %% Line 1812
			  apply 'may_create_simple'/2
			      (Opt, LE)
		      in  %% Line 1812
			  {'replace',Fs,'false',_cor58}
	  %% Line 1813
	  <_X_LE0,Prep0,_X_PosFun,_X_MSFs,_X_Opt> when 'true' ->
	      %% Line 1814
	      {'no',[],'false',Prep0}
	end
'may_create_simple'/2 =
    %% Line 1818
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opt = {'qlc_opt',Unique,Cache,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15},Prep = %% Line 1819
											   {'prepared',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,%% Line 1820
																			IsUnique,IsCached}> when 'true' ->
	      %% Line 1821
	      case <> of
		%% Line 1822
		<>
		    when let <_cor4> =
			  let <_cor2> =
			      call 'erlang':'=:='
				  (Unique, 'true')
			  in  let <_cor3> =
				  call 'erlang':'=:='
				      (IsUnique, 'false')
			      in  call 'erlang':'and'
				      (_cor2, _cor3)
		      in  let <_cor7> =
			      let <_cor5> =
				  %% Line 1823
				  call 'erlang':'=/='
				      (Cache, 'false')
			      in  let <_cor6> =
				      %% Line 1823
				      call 'erlang':'=:='
					  (IsCached, 'false')
				  in  %% Line 1823
				      call 'erlang':'and'
					  (_cor5, _cor6)
			  in  call 'erlang':'or'
				  (_cor4, _cor7) ->
		    %% Line 1824
		    apply 'prep_simple_qlc'/4
			('SQV', 1, Prep, Opt)
		%% Line 1825
		<> when 'true' ->
		    %% Line 1826
		    Prep
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'may_create_simple',2}}] )
	    -| ['compiler_generated'] )
	end
'prep_simple_qlc'/4 =
    %% Line 1829
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1830
	    apply 'check_join_option'/1
		(_cor0)
	    %% Line 1833
	    case _cor1 of
	      <{'prepared',_cor21,Sorted,SortInfo,_cor22,_cor23,_cor24,_cor25,IsUnique,IsCached}> when 'true' ->
		  %% Line 1834
		  case _cor0 of
		    <{'qlc_opt',Unique,Cache,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
			let <_cor8> =
			    %% Line 1835
			    case <> of
			      %% Line 1836
			      <>
				  when call 'erlang':'=:='
					(Unique,
					 'true') ->
				  Cache
			      %% Line 1837
			      <>
				  when let <_cor6> =
					call 'erlang':'=:='
					    (IsCached, 'false')
				    in  let <_cor7> =
					    call 'erlang':'is_boolean'
						(IsCached)
					in  call 'erlang':'and'
						(_cor6, _cor7) ->
				  Cache
			      %% Line 1838
			      <> when 'true' ->
				  'false'
			    end
			in  let <_cor10> =
				%% Line 1840
				call 'erlang':'not'
				    (IsUnique)
			    in  let <_cor11> =
				    %% Line 1840
				    call 'erlang':'and'
					(Unique, _cor10)
				in  let <Optz> =
					%% Line 1840
					{'optz',_cor11,_cor8,'any','no',_cor0}
				    in  let <QLC> =
					    %% Line 1842
					    {'simple_qlc',_cor3,_cor1,_cor2,%% Line 1843
									    'not_a_list',%% Line 1843
											 Optz}
					in  let <_cor16> =
						%% Line 1845
						call 'erlang':'or'
						    (IsUnique, Unique)
					    in  let <_cor14> =
						    %% Line 1847
						    call 'erlang':'=/='
							(_cor8, 'false')
						in  let <_cor15> =
							%% Line 1847
							call 'erlang':'or'
							    (IsCached, _cor14)
						    in  %% Line 1845
							{'prepared',QLC,%% Line 1846
									Sorted,%% Line 1846
									       SortInfo,[],[],{[],[]},'undefined',_cor16,_cor15}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'prep_sort'/2 =
    %% Line 1849
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'qlc_sort',Prep = {'prepared',_cor17,'yes',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24},_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},_X_GOpt> when 'true' ->
	      %% Line 1850
	      Prep
	  %% Line 1851
	  <Q = {'qlc_sort',{'prepared',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,IsUniqueObjs,_cor39},_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46},%% Line 1852
																			       GOpt> when 'true' ->
	      let <S1> =
		  %% Line 1853
		  apply 'sort_unique'/2
		      (IsUniqueObjs, Q)
	      in  let <S2> =
		      %% Line 1854
		      apply 'sort_tmpdir'/2
			  (S1, GOpt)
		  in  %% Line 1855
		      ( case GOpt of
			  ( <( {'qlc_opt',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_rec41}
			       -| ['compiler_generated'] )> when 'true' ->
				case S2 of
				  <{'qlc_sort',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
				      let <_cor9> =
					  call 'erlang':'setelement'
					      (8, S2, _rec41)
				      in  %% Line 1856
					  case apply 'sort_sort_info'/1
						   (_cor9) of
					    <{SortInfo,Sorted}> when 'true' ->
						%% Line 1859
						( case _cor9 of
						    ( <( {'qlc_sort',_cor64,_cor65,_rec42,_cor66,_cor67,_cor68,_cor69,_cor70}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor14> =
							      call 'erlang':'or'
								  (_rec42, IsUniqueObjs)
							  in  {'prepared',_cor9,Sorted,SortInfo,[],[],{[],[]},'undefined',_cor14,'true'}
						      -| ['compiler_generated'] )
						    ( <_cor71> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','qlc_sort'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor11})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor63> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','qlc_sort'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_cor54> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','qlc_opt'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'prep_sort',2}}] )
	    -| ['compiler_generated'] )
	end
'prep_qlc'/5 =
    %% Line 1861
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1862
	case _cor0 of
	  <{'qlc_opt',Unique,Cache,_cor15,Join,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <Optz> =
		  %% Line 1863
		  {'optz',Unique,Cache,%% Line 1864
				       Join,'no',_cor0}
	      in  %% Line 1865
		  case apply 'qlc_sort_info'/2
			   (_cor2, _cor1) of
		    <{Qdata,SortInfo}> when 'true' ->
			let <QLC> =
			    %% Line 1866
			    {'qlc',_cor4,_cor3,Qdata,%% Line 1867
						     'not_a_list',%% Line 1867
								  Optz}
			in  let <_cor9> =
				%% Line 1870
				call 'erlang':'=/='
				    (Cache, 'false')
			    in  %% Line 1868
				{'prepared',QLC,'no',SortInfo,[],[],{[],[]},'undefined',%% Line 1869
											Unique,_cor9}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'qlc_sort_info'/2 =
    %% Line 1883
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 1884
	    ( fun (_cor17,_cor16) ->
		  case <_cor17,_cor16> of
		    <Qd = {_X_QNum,_X_GoI,_X_SI,'fil'},Info> when 'true' ->
			%% Line 1885
			{Qd,Info}
		    %% Line 1886
		    <Qd = {_X_QNum,_X_GoI,_X_SI,{'gen',{'join',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}}},Info> when 'true' ->
			%% Line 1887
			{Qd,Info}
		    %% Line 1888
		    <{QNum,GoI,SI,{'gen',PrepLE0}},Info> when 'true' ->
			let <PrepLE> =
			    %% Line 1889
			    apply 'sort_info'/3
				(PrepLE0, QNum, _cor0)
			in  let <Qd> =
				%% Line 1890
				{QNum,GoI,SI,{'gen',PrepLE}}
			    in  let <_cor14> =
				    %% Line 1891
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor11) ->
						  case _cor11 of
						    <[%% Line 1892
						      {{C,Order},What}|_cor5]>
							when %% Line 1893
							  call 'erlang':'=:='
							      (What,
							       []) ->
							( letrec
							      'lc$^1'/1 =
								  fun (_cor12) ->
								      case _cor12 of
									<[%% Line 1894
									  Column|_cor9]> when 'true' ->
									    let <_cor13> =
										%% Line 1894
										apply 'lc$^1'/1
										    (_cor9)
									    in  ( [{{Column,Order},[{'traverse',QNum,C}|[]]}|_cor13]
										  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    %% Line 1892
									    apply 'lc$^0'/1
										(_cor5)
									( <_cor12> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor12})
										-| [{'function_name',{'lc$^1',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  let <_cor10> =
								  %% Line 1894
								  apply 'equal_template_columns'/2
								      (_cor0, {QNum,C})
							      in  apply 'lc$^1'/1
								      (_cor10)
							  -| ['list_comprehension'] )
						    ( <[_cor4|_cor5]> when 'true' ->
							  %% Line 1892
							  apply 'lc$^0'/1
							      (_cor5)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor11> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor11})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  %% Line 1892
					  ( case PrepLE of
					      ( <( {'prepared',_cor43,_cor44,_cor45,_rec43,_cor46,_cor47,_cor48,_cor49,_cor50}
						   -| ['compiler_generated'] )> when 'true' ->
						    apply 'lc$^0'/1
							(_rec43)
						-| ['compiler_generated'] )
					      ( <_cor51> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','prepared'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['list_comprehension'] )
				in  %% Line 1895
				    {Qd,[_cor14|Info]}
		    ( <_cor19,_cor18> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor19,_cor18})
			    -| [{'function_name',{'-qlc_sort_info/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-qlc_sort_info/2-fun-0-'}}] )
	in  %% Line 1897
	    case call 'lists':'mapfoldl'
		     (F, [], _cor1) of
	      <{Qdata,SortInfoL}> when 'true' ->
		  let <_cor22> =
		      %% Line 1901
		      call 'lists':'append'
			  (SortInfoL)
		  in  let <_cor32> =
			  %% Line 1898
			  ( letrec
				'lc$^2'/1 =
				    fun (_cor29) ->
					case _cor29 of
					  <[%% Line 1899
					    Pos|_cor24]> when 'true' ->
					      ( letrec
						    'lc$^3'/1 =
							fun (_cor30) ->
							    case _cor30 of
							      <[%% Line 1900
								Ord|_cor27]> when 'true' ->
								  let <_cor31> =
								      %% Line 1900
								      apply 'lc$^3'/1
									  (_cor27)
								  in  ( [{{Pos,Ord},['template']}|_cor31]
									-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  %% Line 1899
								  apply 'lc$^2'/1
								      (_cor24)
							      ( <_cor30> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor30})
								      -| [{'function_name',{'lc$^3',1}}] )
								-| ['compiler_generated'] )
							    end
						in  let <_cor28> =
							%% Line 1900
							apply 'orders'/1
							    ('yes')
						    in  apply 'lc$^3'/1
							    (_cor28)
						-| ['list_comprehension'] )
					  <[]> when 'true' ->
					      _cor22
					  ( <_cor29> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor29})
						  -| [{'function_name',{'lc$^2',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  let <_cor25> =
				    %% Line 1899
				    apply 'constant_columns'/2
					(_cor0, 0)
				in  apply 'lc$^2'/1
					(_cor25)
			    -| ['list_comprehension'] )
		      in  let <SortInfo> =
			      %% Line 1902
			      apply 'family_union'/1
				  (_cor32)
			  in  %% Line 1903
			      {Qdata,SortInfo}
	      ( <_cor21> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor21})
		-| ['compiler_generated'] )
	    end
'sort_info'/3 =
    %% Line 1905
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Prep = {'prepared',_cor41,S,SI,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47},QNum,QOpt> when 'true' ->
	      let <_cor7> =
		  %% Line 1915
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[{PosOrd,_cor48}|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [{PosOrd,[]}|_cor6]
					    -| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (SI)
		    -| ['list_comprehension'] )
	      in  let <_cor17> =
		      %% Line 1913
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor14) ->
				    case _cor14 of
				      <[Pos|_cor9]> when 'true' ->
					  ( letrec
						'lc$^2'/1 =
						    fun (_cor15) ->
							case _cor15 of
							  <[%% Line 1914
							    Ord|_cor12]> when 'true' ->
							      let <_cor16> =
								  %% Line 1914
								  apply 'lc$^2'/1
								      (_cor12)
							      in  ( [{{Pos,Ord},[]}|_cor16]
								    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      apply 'lc$^1'/1
								  (_cor9)
							  ( <_cor15> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor15})
								  -| [{'function_name',{'lc$^2',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  let <_cor13> =
						    %% Line 1914
						    apply 'orders'/1
							('yes')
						in  apply 'lc$^2'/1
							(_cor13)
					    -| ['list_comprehension'] )
				      <[]> when 'true' ->
					  _cor7
				      ( <_cor14> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor14})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor10> =
				apply 'constant_columns'/2
				    (QOpt, QNum)
			    in  apply 'lc$^1'/1
				    (_cor10)
			-| ['list_comprehension'] )
		  in  let <_cor33> =
			  %% Line 1907
			  ( case <> of
			      <>
				  when call 'erlang':'=/='
					(S,
					 'no') ->
				  let <_cor19> =
				      %% Line 1908
				      apply 'size_of_qualifier'/2
					  (QOpt, QNum)
				  in  %% Line 1908
				      ( case <> of
					  <>
					      when call 'erlang':'is_integer'
						    (_cor19) ->
					      %% Line 1909
					      ( case <> of
						  <>
						      when call 'erlang':'>'
							    (_cor19,
							     0) ->
						      let <_cor21> =
							  %% Line 1910
							  apply 'size_of_constant_prefix'/2
							      (QOpt, QNum)
						      in  %% Line 1910
							  ( case <> of
							      <>
								  when call 'erlang':'<'
									(_cor21,
									 _cor19) ->
								  ( letrec
									'lc$^3'/1 =
									    fun (_cor28) ->
										case _cor28 of
										  <[%% Line 1911
										    C|_cor23]> when 'true' ->
										      ( letrec
											    'lc$^4'/1 =
												fun (_cor29) ->
												    case _cor29 of
												      <[%% Line 1912
													Ord|_cor26]> when 'true' ->
													  let <_cor30> =
													      %% Line 1912
													      apply 'lc$^4'/1
														  (_cor26)
													  in  ( [{{C,Ord},[]}|_cor30]
														-| ['compiler_generated'] )
												      <[]> when 'true' ->
													  %% Line 1911
													  apply 'lc$^3'/1
													      (_cor23)
												      ( <_cor29> when 'true' ->
													    ( primop 'match_fail'
														  ({'function_clause',_cor29})
													      -| [{'function_name',{'lc$^4',1}}] )
													-| ['compiler_generated'] )
												    end
											in  let <_cor27> =
												%% Line 1912
												apply 'orders'/1
												    (S)
											    in  apply 'lc$^4'/1
												    (_cor27)
											-| ['list_comprehension'] )
										  <[]> when 'true' ->
										      _cor17
										  ( <_cor28> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor28})
											  -| [{'function_name',{'lc$^3',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  let <_cor24> =
									    %% Line 1911
									    call 'erlang':'+'
										(_cor21, 1)
									in  apply 'lc$^3'/1
										(%% Line 1911
										 [_cor24|[]])
								    -| ['list_comprehension'] )
							      ( <> when 'true' ->
								    _cor17
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
						  ( <> when 'true' ->
							_cor17
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
					  ( <> when 'true' ->
						_cor17
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
			      ( <> when 'true' ->
				    _cor17
				-| ['compiler_generated'] )
			    end
			    -| ['list_comprehension'] )
		      in  let <SI2> =
			      %% Line 1916
			      call 'lists':'usort'
				  (_cor33)
			  in  %% Line 1917
			      call 'erlang':'setelement'
				  (5, Prep, SI2)
	  ( <_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38})
		  -| [{'function_name',{'sort_info',3}}] )
	    -| ['compiler_generated'] )
	end
'orders'/1 =
    %% Line 1921
    fun (_cor0) ->
	case _cor0 of
	  <O = 'ascending'> when 'true' ->
	      %% Line 1922
	      [O|[]]
	  %% Line 1923
	  <'yes'> when 'true' ->
	      %% Line 1924
	      ['ascending']
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'orders',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_unique'/2 =
    %% Line 1928
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'true',Sort = {'qlc_sort',_cor9,'sort',_cor10,_cor11,_cor12,SortOptions,_cor13,_cor14}> when 'true' ->
	      let <_cor2> =
		  %% Line 1932
		  call 'lists':'delete'
		      ('unique', SortOptions)
	      in  let <_rec45> =
		      %% Line 1931
		      call 'lists':'keydelete'
			  ('unique', 1, _cor2)
		  in  let <_cor5> =
			  %% Line 1930
			  call 'erlang':'setelement'
			      (7, Sort, _rec45)
		      in  %% Line 1929
			  call 'erlang':'setelement'
			      (4, _cor5, 'false')
	  %% Line 1933
	  <_cor24,Sort> when 'true' ->
	      %% Line 1934
	      Sort
	end
'sort_tmpdir'/2 =
    %% Line 1936
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,{'qlc_opt',_cor9,_cor10,_cor11,_cor12,[],_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 1937
	      S
	  %% Line 1938
	  <S,Opt> when 'true' ->
	      %% Line 1939
	      ( case Opt of
		  ( <( {'qlc_opt',_cor16,_cor17,_cor18,_cor19,_rec49,_cor20,_cor21,_cor22}
		       -| ['compiler_generated'] )> when 'true' ->
			case S of
			  <{'qlc_sort',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
			      call 'erlang':'setelement'
				  (9, S, _rec49)
			  ( <_cor32> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','qlc_sort'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor23> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','qlc_opt'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'short_list'/1 =
    %% Line 1941
    fun (_cor0) ->
	%% Line 1943
	{'prepared',{'qlc_list',_cor0,'no_match_spec'},'yes',[],[],[],{[],[]},'undefined','true',%% Line 1944
												 'true'}
'find_const_positions'/4 =
    %% Line 1946
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <IF,LU_fun,{KeyEquality,PosFun},%% Line 1947
					  {'qlc_opt',_cor19,_cor20,Max,_cor21,_cor22,Lookup,_cor23,_cor24}>
	      when %% Line 1948
		try
		    let <_cor4> =
			call 'erlang':'is_function'
			    (LU_fun)
		    in  let <_cor5> =
			    call 'erlang':'is_function'
				(PosFun)
			in  let <_cor6> =
				call 'erlang':'is_function'
				    (IF)
			    in  let <_cor7> =
				    %% Line 1949
				    call 'erlang':'=/='
					(Lookup, 'false')
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1950
	      case apply 'call'/4
		       (IF, 'keypos', 'undefined', []) of
		%% Line 1951
		<'undefined'> when 'true' ->
		    let <Indices> =
			%% Line 1952
			apply 'call'/4
			    (IF, 'indices', 'undefined', [])
		    in  %% Line 1953
			apply 'find_const_position_idx'/5
			    (Indices, KeyEquality, PosFun, Max, [])
		%% Line 1954
		<KeyPos> when 'true' ->
		    let <_cor11> =
			%% Line 1955
			apply PosFun
			    (KeyPos)
		    in  %% Line 1955
			case apply 'pos_vals'/4
				 (KeyPos, KeyEquality, _cor11, Max) of
			  %% Line 1956
			  <'false'> when 'true' ->
			      let <_cor12> =
				  %% Line 1957
				  apply IF
				      ('indices')
			      in  %% Line 1957
				  apply 'find_const_position_idx'/5
				      (_cor12, KeyEquality, %% Line 1958
							    PosFun, %% Line 1958
								    Max, %% Line 1958
									 [])
			  %% Line 1959
			  <PosValuesSkip> when 'true' ->
			      %% Line 1960
			      PosValuesSkip
			end
	      end
	  %% Line 1963
	  <_X_IF,_X_LU_fun,_X_KE_PosFun,_X_Opt0> when 'true' ->
	      %% Line 1964
	      {'false',{'some',[]}}
	end
'find_const_position_idx'/5 =
    %% Line 1966
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],KeyEquality,PosFun,Max,L0> when 'true' ->
	      let <_cor5> =
		  %% Line 1967
		  apply PosFun
		      (I)
	      in  %% Line 1967
		  case apply 'pos_vals'/4
			   (I, KeyEquality, _cor5, Max) of
		    %% Line 1968
		    <'false'> when 'true' ->
			%% Line 1969
			apply 'find_const_position_idx'/5
			    (Is, KeyEquality, PosFun, Max, L0)
		    %% Line 1970
		    <PosValuesFils = {{_X_Pos,Values},_X_SkipFils}> when 'true' ->
			let <_cor6> =
			    %% Line 1971
			    call 'erlang':'length'
				(Values)
			in  let <L> =
				%% Line 1971
				[{_cor6,PosValuesFils}|L0]
			    in  %% Line 1972
				apply 'find_const_position_idx'/5
				    (Is, KeyEquality, PosFun, Max, L)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1974
	  <_cor15,_X_KeyEquality,_X_PosFun,_X_Max,[]> when 'true' ->
	      %% Line 1975
	      {'false',{'some',[]}}
	  %% Line 1976
	  <_cor16,_X_KeyEquality,_X_PosFun,_X_Max,L> when 'true' ->
	      %% Line 1977
	      case call 'lists':'sort'
		       (L) of
		<[{_cor17,PVF}|_cor18]> when 'true' ->
		    %% Line 1978
		    PVF
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	end
'pos_vals'/4 =
    %% Line 1980
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Pos,'==',{'usort_needed',Values,SkipFils},Max> when 'true' ->
	      let <_cor4> =
		  %% Line 1981
		  call 'lists':'usort'
		      (Values)
	      in  %% Line 1981
		  apply 'pos_vals_max'/4
		      (Pos, _cor4, SkipFils, Max)
	  %% Line 1982
	  <Pos,'=:=',{'usort_needed',Values,SkipFils},Max> when 'true' ->
	      let <_cor5> =
		  %% Line 1983
		  apply 'nub'/1
		      (Values)
	      in  let <_cor6> =
		      %% Line 1983
		      call 'lists':'sort'
			  (_cor5)
		  in  %% Line 1983
		      apply 'pos_vals_max'/4
			  (Pos, _cor6, SkipFils, Max)
	  %% Line 1984
	  <Pos,_X_KeyEquality,{'values',Values,SkipFils},Max> when 'true' ->
	      %% Line 1985
	      apply 'pos_vals_max'/4
		  (Pos, Values, SkipFils, Max)
	  %% Line 1986
	  <_X_Pos,_X_KeyEquality,_X_T,_X_Max> when 'true' ->
	      %% Line 1987
	      'false'
	end
'nub'/1 =
    %% Line 1989
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1990
	      []
	  %% Line 1991
	  <[E|L]> when 'true' ->
	      let <_cor2> =
		  %% Line 1992
		  apply 'nub'/1
		      (L)
	      in  %% Line 1992
		  case call 'lists':'member'
			   (E, _cor2) of
		    %% Line 1993
		    <'true'> when 'true' ->
			_cor2
		    %% Line 1995
		    <'false'> when 'true' ->
			%% Line 1996
			[E|_cor2]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'nub',1}}] )
	    -| ['compiler_generated'] )
	end
'pos_vals_max'/4 =
    %% Line 2000
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Pos,Values,Skip,Max>
	      when let <_cor5> =
		    call 'erlang':'=:='
			(Max, -1)
		in  let <_cor7> =
			try
			    let <_cor6> =
				call 'erlang':'length'
				    (Values)
			    in  call 'erlang':'>='
				    (Max, _cor6)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'or'
			    (_cor5, _cor7) ->
	      %% Line 2001
	      {{Pos,Values},Skip}
	  %% Line 2002
	  <_X_Pos,_X_Value,_X_Skip,_X_Max> when 'true' ->
	      %% Line 2003
	      'false'
	end
'prep_join'/3 =
    %% Line 2005
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2006
	case apply 'join_opt'/1
		 (_cor1) of
	  %% Line 2007
	  <'undefined'> when 'true' ->
	      do  %% Line 2008
		  apply 'check_join_option'/1
		      (_cor0)
		  _cor2
	  %% Line 2010
	  <EqualMatch> when 'true' ->
	      let <_cor4> =
		  %% Line 2011
		  case EqualMatch of
		    %% Line 2012
		    <{NEqual,NMatch}> when 'true' ->
			%% Line 2013
			apply 'pref_join'/5
			    (NEqual, NMatch, _cor2, _cor1, _cor0)
		    %% Line 2014
		    <EM> when 'true' ->
			%% Line 2015
			apply 'pref_join'/5
			    (EM, EM, _cor2, _cor1, _cor0)
		  end
	      in  %% Line 2011
		  case _cor4 of
		    <{Ix,M}> when 'true' ->
			%% Line 2017
			( case _cor2 of
			    ( <( {'prepared',_cor18,_cor19,_rec50,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor8> =
				      call 'erlang':'++'
					  (_rec50, M)
				  in  let <SI> =
					  apply 'family_union'/1
					      (_cor8)
				      in  let <_rec51> = {%% Line 2018
					       Ix,%% Line 2018
						  M}
					  in  let <_cor12> =
						  %% Line 2018
						  call 'erlang':'setelement'
						      (7, _cor2, _rec51)
					      in  %% Line 2018
						  call 'erlang':'setelement'
						      (4, _cor12, SI)
			      -| ['compiler_generated'] )
			    ( <_cor26> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','prepared'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'pref_join'/5 =
    %% Line 2022
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Equal,Match,Prep,QOpt,{'qlc_opt',_cor43,_cor44,_cor45,JoinOpt,_cor46,_cor47,_cor48,_cor49}> when 'true' ->
	      let <_cor12> =
		  %% Line 2023
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor9) ->
				case _cor9 of
				  <[%% Line 2024
				    {KeyEquality,QCsL}|_cor6]> when 'true' ->
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor10) ->
						    case _cor10 of
						      <[%% Line 2025
							QCs|_cor8]> when 'true' ->
							  let <_cor11> =
							      %% Line 2025
							      apply 'lc$^1'/1
								  (_cor8)
							  in  ( [{KeyEquality,QCs}|_cor11]
								-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  %% Line 2024
							  apply 'lc$^0'/1
							      (_cor6)
						      ( <_cor10> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor10})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(%% Line 2025
						 QCsL)
					-| ['list_comprehension'] )
				  ( <[_cor5|_cor6]> when 'true' ->
					%% Line 2024
					apply 'lc$^0'/1
					    (_cor6)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor9> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor9})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 2024
			     [{'==',Equal}|[{'=:=',Match}|[]]])
		    -| ['list_comprehension'] )
	      in  let <_cor22> =
		      %% Line 2027
		      ( case <> of
			  <>
			      when try
				    ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (JoinOpt,
						     'any') ->
					      'true'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call 'erlang':'=:='
						  (JoinOpt, 'lookup')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      ( letrec
				    'lc$^2'/1 =
					fun (_cor19) ->
					    case _cor19 of
					      <[%% Line 2028
						{KE,QCs}|_cor18]> when 'true' ->
						  let <_cor20> =
						      apply 'pref_lookup_join'/4
							  (KE, QCs, Prep, QOpt)
						  in  let <_cor21> =
							  %% Line 2028
							  apply 'lc$^2'/1
							      (_cor18)
						      in  ( [_cor20|_cor21]
							    -| ['compiler_generated'] )
					      ( <[_cor17|_cor18]> when 'true' ->
						    %% Line 2028
						    apply 'lc$^2'/1
							(_cor18)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor19> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor19})
						      -| [{'function_name',{'lc$^2',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^2'/1
					(_cor12)
				-| ['list_comprehension'] )
			  ( <> when 'true' ->
				[]
			    -| ['compiler_generated'] )
			end
			-| ['list_comprehension'] )
		  in  let <_cor32> =
			  %% Line 2030
			  ( case <> of
			      <>
				  when try
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(JoinOpt,
							 'any') ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call 'erlang':'=:='
						      (JoinOpt, 'merge')
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  ( letrec
					'lc$^3'/1 =
					    fun (_cor29) ->
						case _cor29 of
						  <[%% Line 2031
						    {KE,QCs}|_cor28]> when 'true' ->
						      let <_cor30> =
							  apply 'pref_merge_join'/4
							      (KE, QCs, Prep, QOpt)
						      in  let <_cor31> =
							      %% Line 2031
							      apply 'lc$^3'/1
								  (_cor28)
							  in  ( [_cor30|_cor31]
								-| ['compiler_generated'] )
						  ( <[_cor27|_cor28]> when 'true' ->
							%% Line 2031
							apply 'lc$^3'/1
							    (_cor28)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor29> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor29})
							  -| [{'function_name',{'lc$^3',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^3'/1
					    (_cor12)
				    -| ['list_comprehension'] )
			      ( <> when 'true' ->
				    []
				-| ['compiler_generated'] )
			    end
			    -| ['list_comprehension'] )
		      in  let <_cor36> =
			      %% Line 2032
			      call 'lists':'append'
				  (_cor22)
			  in  let <_cor37> =
				  %% Line 2032
				  call 'lists':'usort'
				      (_cor36)
			      in  let <_cor34> =
				      %% Line 2032
				      call 'lists':'append'
					  (_cor32)
				  in  let <_cor35> =
					  %% Line 2032
					  call 'lists':'usort'
					      (_cor34)
				      in  %% Line 2032
					  {_cor37,_cor35}
	  ( <_cor42,_cor41,_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor42,_cor41,_cor40,_cor39,_cor38})
		  -| [{'function_name',{'pref_join',5}}] )
	    -| ['compiler_generated'] )
	end
'pref_lookup_join'/4 =
    %% Line 2034
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <KeyEquality,{[{Q1,C1}|[{Q2,C2}|[]]],Skip},Prep,QOpt>
	      when let <_cor4> =
		    %% Line 2035
		    call 'erlang':'is_integer'
			(C1)
		in  let <_cor5> =
			%% Line 2035
			call 'erlang':'is_integer'
			    (C2)
		    in  %% Line 2035
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 2036
	      case Prep of
		<{'prepared',{'qlc',_cor37,_cor38,QData,_cor39,_cor40},_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
		    let <Is1> =
			%% Line 2037
			apply 'lookup_qual_data'/3
			    (QData, Q1, KeyEquality)
		    in  let <_cor13> =
			    %% Line 2038
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor10) ->
					  case _cor10 of
					    <[%% Line 2039
					      IC1|_cor9]>
						when %% Line 2039
						  call 'erlang':'=:='
						      (IC1,
						       C1) ->
						let <_cor11> =
						    apply 'pref_lookup_join2'/7
							(Q2, C2, Q1, C1, Skip, QOpt, KeyEquality)
						in  let <_cor12> =
							%% Line 2039
							apply 'lc$^0'/1
							    (_cor9)
						    in  ( [_cor11|_cor12]
							  -| ['compiler_generated'] )
					    ( <[%% Line 2039
						IC1|_cor9]> when 'true' ->
						  %% Line 2039
						  apply 'lc$^0'/1
						      (_cor9)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor10> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor10})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (%% Line 2039
				       Is1)
			      -| ['list_comprehension'] )
			in  let <Is2> =
				%% Line 2040
				apply 'lookup_qual_data'/3
				    (QData, Q2, KeyEquality)
			    in  let <_cor21> =
				    %% Line 2041
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor18) ->
						  case _cor18 of
						    <[%% Line 2042
						      IC2|_cor17]>
							when %% Line 2042
							  call 'erlang':'=:='
							      (IC2,
							       C2) ->
							let <_cor19> =
							    apply 'pref_lookup_join2'/7
								(Q1, C1, Q2, C2, Skip, QOpt, KeyEquality)
							in  let <_cor20> =
								%% Line 2042
								apply 'lc$^1'/1
								    (_cor17)
							    in  ( [_cor19|_cor20]
								  -| ['compiler_generated'] )
						    ( <[%% Line 2042
							IC2|_cor17]> when 'true' ->
							  %% Line 2042
							  apply 'lc$^1'/1
							      (_cor17)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor18> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor18})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (%% Line 2042
					       Is2)
				      -| ['list_comprehension'] )
				in  let <_cor23> =
					%% Line 2043
					call 'erlang':'++'
					    (_cor21, _cor13)
				    in  %% Line 2043
					apply 'family'/1
					    (_cor23)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2044
	  <KE,L = [{_cor49,Cs1}|[{_cor50,Cs2}|[]]],Prep,QOpt>
	      when let <_cor24> =
		    call 'erlang':'is_list'
			(Cs1)
		in  let <_cor25> =
			%% Line 2045
			call 'erlang':'is_list'
			    (Cs2)
		    in  call 'erlang':'and'
			    (_cor24, _cor25) ->
	      let <_cor32> =
		  %% Line 2047
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[%% Line 2048
				    QC|_cor27]> when 'true' ->
				      let <_cor30> =
					  apply 'pref_lookup_join'/4
					      (KE, QC, Prep, QOpt)
				      in  let <_cor31> =
					      %% Line 2048
					      apply 'lc$^2'/1
						  (_cor27)
					  in  ( [_cor30|_cor31]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor29> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor28> =
			    %% Line 2048
			    apply 'selections_no_skip'/1
				(L)
			in  apply 'lc$^2'/1
				(_cor28)
		    -| ['list_comprehension'] )
	      in  %% Line 2047
		  call 'lists':'append'
		      (_cor32)
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'pref_lookup_join',4}}] )
	    -| ['compiler_generated'] )
	end
'lookup_qual_data'/3 =
    %% Line 2050
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2051
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor2) of
	  %% Line 2052
	  <{'value',{_cor7,_cor8,_cor9,{'gen',PrepLE}}}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor1) ->
	      %% Line 2053
	      apply 'join_indices'/2
		  (PrepLE, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'join_indices'/2 =
    %% Line 2060
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'prepared',{'qlc_table',_cor16,_cor17,_cor18,_cor19,IF,_cor20,%% Line 2061
									  LU_fun,_cor21,%% Line 2062
											KeyEquality,%% Line 2063
												    'undefined',_cor22},_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30},%% Line 2064
																						 KE>
	      when %% Line 2064
		try
		    let <_cor2> =
			call 'erlang':'is_function'
			    (LU_fun)
		    in  %% Line 2065
			( let <_cor7> =
			      ( case <> of
				  ( <>
					when ( call 'erlang':'=:='
						(KE,
						 KeyEquality)
					    -| ['compiler_generated'] ) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					%% Line 2066
					( case <> of
					    ( <>
						  when ( call 'erlang':'=:='
							  (KE,
							   '=:=')
						      -| ['compiler_generated'] ) ->
						  %% Line 2067
						  ( call 'erlang':'=:='
							(KeyEquality, 'undefined')
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call 'erlang':'and'
				    (_cor2, ( _cor7
					      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 2068
		  case apply 'call'/4
			   (IF, 'keypos', 'undefined', []) of
		    %% Line 2069
		    <'undefined'> when 'true' ->
			[]
		    %% Line 2070
		    <Kp> when 'true' ->
			[Kp|[]]
		  end
	      in  %% Line 2072
		  case apply 'call'/4
			   (IF, 'indices', 'undefined', []) of
		    %% Line 2073
		    <'undefined'> when 'true' ->
			_cor10
		    %% Line 2074
		    <Is0> when 'true' ->
			let <_cor12> =
			    call 'erlang':'++'
				(_cor10, Is0)
			in  call 'lists':'usort'
				(_cor12)
		  end
	  %% Line 2076
	  <_X_Prep,_X_KeyEquality> when 'true' ->
	      %% Line 2077
	      []
	end
'pref_lookup_join2'/7 =
    %% Line 2079
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <TemplCols> =
	    %% Line 2080
	    apply 'compared_template_columns'/3
		(_cor1, {_cor6,_cor5}, _cor0)
	in  %% Line 2081
	    {{_cor6,_cor5,_cor4,_cor3},{'lookup_join',TemplCols,_cor0,_cor2}}
'pref_merge_join'/4 =
    %% Line 2083
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <KE,{[{Q1,C1}|[{Q2,C2}|[]]],Skip},Prep,QOpt>
	      when let <_cor4> =
		    %% Line 2084
		    call 'erlang':'is_integer'
			(C1)
		in  let <_cor5> =
			%% Line 2084
			call 'erlang':'is_integer'
			    (C2)
		    in  %% Line 2084
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 2085
	      case Prep of
		<{'prepared',{'qlc',_cor23,_cor24,QData,_cor25,_cor26},_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
		    let <Sort1> =
			%% Line 2086
			apply 'merge_qual_data'/2
			    (QData, Q1)
		    in  let <Sort2> =
			    %% Line 2087
			    apply 'merge_qual_data'/2
				(QData, Q2)
			in  let <Merge> =
				%% Line 2088
				apply 'pref_merge'/9
				    (KE, Q1, C1, Q2, C2, Skip, Sort1, Sort2, QOpt)
			    in  %% Line 2089
				apply 'family_union'/1
				    (Merge)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2090
	  <KE,L = [{_cor35,Cs1}|[{_cor36,Cs2}|[]]],Prep,QOpt>
	      when let <_cor10> =
		    call 'erlang':'is_list'
			(Cs1)
		in  let <_cor11> =
			%% Line 2091
			call 'erlang':'is_list'
			    (Cs2)
		    in  call 'erlang':'and'
			    (_cor10, _cor11) ->
	      let <_cor18> =
		  %% Line 2093
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor15) ->
				case _cor15 of
				  <[%% Line 2094
				    QC|_cor13]> when 'true' ->
				      let <_cor16> =
					  apply 'pref_merge_join'/4
					      (KE, QC, Prep, QOpt)
				      in  let <_cor17> =
					      %% Line 2094
					      apply 'lc$^0'/1
						  (_cor13)
					  in  ( [_cor16|_cor17]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor15> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor15})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor14> =
			    %% Line 2094
			    apply 'selections_no_skip'/1
				(L)
			in  apply 'lc$^0'/1
				(_cor14)
		    -| ['list_comprehension'] )
	      in  %% Line 2093
		  call 'lists':'append'
		      (_cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'pref_merge_join',4}}] )
	    -| ['compiler_generated'] )
	end
'selections_no_skip'/1 =
    %% Line 2096
    fun (_cor0) ->
	%% Line 2097
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[C|_cor2]> when 'true' ->
			    let <_cor5> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [{C,{'some',[]}}|_cor5]
				  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  apply 'all_selections'/1
		      (_cor0)
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'merge_qual_data'/2 =
    %% Line 2099
    fun (_cor1,_cor0) ->
	%% Line 2100
	case call 'lists':'keysearch'
		 (_cor0, 1, _cor1) of
	  %% Line 2101
	  <{'value',{_cor6,_cor7,_cor8,{'gen',PrepLE}}}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor0) ->
	      %% Line 2102
	      case PrepLE of
		<{'prepared',_cor9,_cor10,_cor11,SortInfo,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
		    %% Line 2103
		    SortInfo
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'pref_merge'/9 =
    %% Line 2106
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Col1> = {_cor7,_cor6}
	in  let <Col2> = {_cor5,_cor4}
	    in  let <_cor17> =
		    %% Line 2109
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor14) ->
				  case _cor14 of
				    <[{QC = {_X_QNum,Col},SortL}|_cor12]> when 'true' ->
					let <_cor13> =
					    %% Line 2110
					    call 'lists':'keymember'
						({Col,'ascending'}, 1, SortL)
					in  %% Line 2110
					    ( case <> of
						<>
						    when call 'erlang':'=:='
							  (_cor13,
							   'false') ->
						    let <_cor15> =
							apply 'lc$^0'/1
							    (_cor12)
						    in  ( [QC|_cor15]
							  -| ['compiler_generated'] )
						( <> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor12)
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
				    ( <[_cor11|_cor12]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor12)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor14> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor14})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      ([{Col1,_cor2}|[{Col2,_cor1}|[]]])
		      -| ['list_comprehension'] )
		in  let <J> =
			%% Line 2111
			[{{_cor7,_cor6,_cor5,_cor4},{'merge_join',_cor17,_cor8,_cor3}}|[]]
		    in  %% Line 2113
			( letrec
			      'lc$^1'/1 =
				  fun (_cor23) ->
				      case _cor23 of
					<[%% Line 2114
					  Column|_cor21]> when 'true' ->
					    let <_cor24> =
						%% Line 2114
						apply 'lc$^1'/1
						    (_cor21)
					    in  ( [{{Column,'ascending'},J}|_cor24]
						  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    %% Line 2114
					    [{'other',J}|[]]
					( <_cor23> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor23})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor22> =
				  %% Line 2114
				  apply 'equal_template_columns'/2
				      (_cor0, Col1)
			      in  apply 'lc$^1'/1
				      (_cor22)
			  -| ['list_comprehension'] )
'table_sort_info'/1 =
    %% Line 2116
    fun (_cor0) ->
	case _cor0 of
	  <{'qlc_table',_cor4,_cor5,_cor6,_cor7,IF,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 2117
	      case apply 'call'/4
		       (IF, 'is_sorted_key', 'undefined', []) of
		%% Line 2118
		<'undefined'> when 'true' ->
		    %% Line 2119
		    {[],'no'}
		%% Line 2120
		<'false'> when 'true' ->
		    %% Line 2121
		    {[],'no'}
		%% Line 2122
		<'true'> when 'true' ->
		    %% Line 2123
		    case apply 'call'/4
			     (IF, 'keypos', 'undefined', []) of
		      %% Line 2124
		      <'undefined'> when 'true' ->
			  %% Line 2125
			  {[],'no'}
		      %% Line 2126
		      <KeyPos> when 'true' ->
			  %% Line 2127
			  {[{{KeyPos,'ascending'},[]}|[]],'no'}
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'table_sort_info',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_sort_info'/1 =
    %% Line 2131
    fun (_cor0) ->
	case _cor0 of
	  <{'qlc_sort',_cor7,'sort',_cor8,_cor9,Ord0,_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor1> =
		  %% Line 2132
		  apply 'sort_order'/1
		      (Ord0)
	      in  %% Line 2132
		  {[],_cor1}
	  %% Line 2133
	  <{'qlc_sort',_cor13,{'keysort',Kp0},_cor14,_cor15,Ord0,_cor16,_cor17,_cor18}> when 'true' ->
	      let <_cor3> =
		  %% Line 2134
		  case Kp0 of
		    %% Line 2135
		    <[Pos|_cor19]> when 'true' ->
			Pos
		    %% Line 2136
		    <_cor20> when 'true' ->
			Kp0
		  end
	      in  let <_cor5> =
		      %% Line 2138
		      apply 'sort_order'/1
			  (Ord0)
		  in  %% Line 2138
		      {[{{_cor3,_cor5},[]}|[]],'no'}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'sort_sort_info',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_order'/1 =
    %% Line 2140
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 2141
	      'no'
	  %% Line 2142
	  <Order> when 'true' ->
	      %% Line 2143
	      Order
	end
'check_join_option'/1 =
    %% Line 2145
    fun (_cor0) ->
	case _cor0 of
	  <{'qlc_opt',_cor2,_cor3,_cor4,'any',_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      %% Line 2146
	      'ok'
	  %% Line 2147
	  <{'qlc_opt',_cor9,_cor10,_cor11,Join,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 2148
	      call 'erlang':'error'
		  ('no_join_to_carry_out', [{'join',Join}|[]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_join_option',1}}] )
	    -| ['compiler_generated'] )
	end
'check_lookup_option'/2 =
    %% Line 2150
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'qlc_opt',_cor4,_cor5,_cor6,_cor7,_cor8,'true',_cor9,_cor10},'false'> when 'true' ->
	      %% Line 2151
	      call 'erlang':'error'
		  ('no_lookup_to_carry_out', [{'lookup','true'}])
	  %% Line 2152
	  <_X_QOpt,_X_LuV> when 'true' ->
	      %% Line 2153
	      'ok'
	end
'compared_template_columns'/3 =
    %% Line 2155
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2156
	    apply _cor2
		('template')
	in  %% Line 2156
	    apply _cor3
		(_cor1, _cor0)
'equal_template_columns'/2 =
    %% Line 2158
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2159
	    apply _cor1
		('template')
	in  %% Line 2159
	    apply _cor2
		(_cor0, '==')
'size_of_constant_prefix'/2 =
    %% Line 2164
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2165
	    apply _cor1
		('n_leading_constant_columns')
	in  %% Line 2165
	    apply _cor2
		(_cor0)
'constants'/2 =
    %% Line 2167
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2168
	    apply _cor1
		('constants')
	in  %% Line 2168
	    apply _cor2
		(_cor0)
'equal_constants'/2 =
    %% Line 2170
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2171
	    apply _cor1
		('equal_constants')
	in  %% Line 2171
	    apply _cor2
		(_cor0)
'join_opt'/1 =
    %% Line 2173
    fun (_cor0) ->
	%% Line 2174
	apply _cor0
	    ('join')
'match_specs'/2 =
    %% Line 2176
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2177
	    apply _cor1
		('match_specs')
	in  %% Line 2177
	    apply _cor2
		(_cor0)
'constant_columns'/2 =
    %% Line 2179
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2180
	    apply _cor1
		('constant_columns')
	in  %% Line 2180
	    apply _cor2
		(_cor0)
'size_of_qualifier'/2 =
    %% Line 2182
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2183
	    apply _cor1
		('size')
	in  %% Line 2183
	    apply _cor2
		(_cor0)
'opt_le'/2 =
    %% Line 2192
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Prep0 = {'prepared',QLC = {'simple_qlc',_cor100,LE0,_cor101,_cor102,Optz0},_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110},%% Line 2193
																		       GenNum> when 'true' ->
	      %% Line 2194
	      case LE0 of
		%% Line 2195
		<{'prepared',{'simple_qlc',LE_Pvar,LE2,_cor111,_cor112,Optz2},_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120}> when 'true' ->
		    %% Line 2197
		    ( case Optz2 of
			( <( {'optz',_cor121,_rec53,_cor122,_cor123,_cor124}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor6> =
				  case _rec53 of
				    %% Line 2198
				    <'false'> when 'true' ->
					( case Optz0 of
					    ( <( {'optz',_cor126,_rec54,_cor127,_cor128,_cor129}
						 -| ['compiler_generated'] )> when 'true' ->
						  _rec54
					      -| ['compiler_generated'] )
					    ( <_cor130> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','optz'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 2199
				    <Cache2> when 'true' ->
					Cache2
				  end
			      in  %% Line 2202
				  ( case Optz0 of
				      ( <( {'optz',_rec57,_cor131,_cor132,_cor133,_cor134}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec55> =
						call 'erlang':'or'
						    (_rec57, _cor121)
					    in  let <_cor14> =
						    call 'erlang':'setelement'
							(3, Optz0, _cor6)
						in  let <_cor16> =
							call 'erlang':'setelement'
							    (2, _cor14, _rec55)
						    in  let <_cor19> =
							    %% Line 2203
							    case <> of
							      %% Line 2204
							      <>
								  when call 'erlang':'=:='
									(LE_Pvar,
									 'SQV') ->
								  _cor100
							      %% Line 2205
							      <> when 'true' ->
								  LE_Pvar
							    end
							in  let <_cor23> =
								%% Line 2208
								{'simple_qlc',_cor19,LE2,_cor101,_cor102,_cor16}
							    in  let <_cor27> =
								    %% Line 2207
								    call 'erlang':'setelement'
									(2, Prep0, _cor23)
								in  %% Line 2209
								    apply 'opt_le'/2
									(_cor27, GenNum)
					-| ['compiler_generated'] )
				      ( <_cor135> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','optz'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_cor125> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','optz'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2210
		<_cor163> when 'true' ->
		    let <Optz1> =
			%% Line 2211
			apply 'no_cache_of_first_generator'/2
			    (Optz0, GenNum)
		    in  let <_cor30> =
			    %% Line 2212
			    apply 'opt_le'/2
				(LE0, 1)
			in  %% Line 2212
			    case <_cor30,Optz1> of
			      %% Line 2213
			      <LE,{'optz','false','false',_cor164,_cor165,_cor166}> when 'true' ->
				  %% Line 2214
				  LE
			      %% Line 2215
			      <LE,_cor167> when 'true' ->
				  let <_cor32> =
				      %% Line 2216
				      call 'erlang':'setelement'
					  (6, QLC, Optz1)
				  in  let <_cor34> =
					  %% Line 2216
					  call 'erlang':'setelement'
					      (3, _cor32, LE)
				      in  %% Line 2216
					  call 'erlang':'setelement'
					      (2, Prep0, _cor34)
			    end
	      end
	  %% Line 2219
	  <Prep0 = {'prepared',{'qlc',_cor184,_cor185,_cor186,_cor187,_cor188},_cor189,_cor190,_cor191,LU_SkipQuals0,_cor192,_cor193,_cor194,_cor195},GenNum> when 'true' ->
	      %% Line 2221
	      let <QLC> =
		  ( {'qlc',_cor184,_cor185,_cor186,_cor187,_cor188}
		    -| ['compiler_generated'] )
	      in  case _cor188 of
		    <{'optz',_cor207,_cor208,JoinOption,_cor209,Opt}> when 'true' ->
			%% Line 2223
			case %% Line 2224
			     apply 'opt_join'/5
				 (_cor192, JoinOption, _cor186, Opt, LU_SkipQuals0) of
			  <{LU_QNum,Join,JoinSkipFs,DoSort}> when 'true' ->
			      let <_cor50> =
				  %% Line 2226
				  ( fun (_cor48) ->
					case _cor48 of
					  <{QNum,_X_Fs}> when 'true' ->
					      call 'erlang':'=:='
						  (QNum, LU_QNum)
					  ( <_cor49> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor49})
						  -| [{'function_name',{'-opt_le/2-fun-0-',1}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-opt_le/2-fun-0-'}}] )
			      in  %% Line 2225
				  case %% Line 2226
				       call 'lists':'partition'
					   (_cor50, %% Line 2227
						    LU_SkipQuals0) of
				    <{LU_Skip,LU_SkipQuals}> when 'true' ->
					let <_cor54> =
					    %% Line 2228
					    ( fun (_cor52) ->
						  case _cor52 of
						    <{_X_QNum,Fs}> when 'true' ->
							Fs
						    ( <_cor53> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor53})
							    -| [{'function_name',{'-opt_le/2-fun-1-',1}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-opt_le/2-fun-1-'}}] )
					in  let <LU_SkipFs> =
						%% Line 2228
						call 'lists':'flatmap'
						    (_cor54, LU_SkipQuals)
					    in  let <_cor56> =
						    %% Line 2231
						    case <> of
						      %% Line 2232
						      <>
							  when call 'erlang':'=:='
								(LU_Skip,
								 []) ->
							  _cor186
						      %% Line 2233
						      <> when 'true' ->
							  apply 'activate_join_lookup_filter'/2
							      (LU_QNum, _cor186)
						    end
						in  let <_cor58> =
							%% Line 2235
							call 'erlang':'++'
							    (LU_SkipFs, JoinSkipFs)
						    in  let <Qdata2> =
							    %% Line 2235
							    apply 'skip_lookup_filters'/2
								(_cor56, _cor58)
							in  let <F> =
								%% Line 2236
								( fun (_cor64,_cor63) ->
								      case <_cor64,_cor63> of
									<{QNum,GoI,SI,{'gen',PrepLE = {'prepared',_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233}}},GenNum1> when 'true' ->
									    let <NewPrepLE> =
										%% Line 2237
										apply 'maybe_sort'/4
										    (PrepLE, QNum, DoSort, Opt)
									    in  let <_cor62> =
										    %% Line 2238
										    apply 'opt_le'/2
											(NewPrepLE, GenNum1)
										in  let <_cor61> =
											%% Line 2239
											call 'erlang':'+'
											    (GenNum1, 1)
										    in  %% Line 2238
											{{QNum,GoI,SI,{'gen',_cor62}},_cor61}
									%% Line 2240
									<Qd,GenNum1> when 'true' ->
									    %% Line 2241
									    {Qd,GenNum1}
								      end
								  -| [{'id',{0,0,'-opt_le/2-fun-2-'}}] )
							    in  %% Line 2243
								case call 'lists':'mapfoldl'
									 (F, 1, Qdata2) of
								  <{Qdata,_cor234}> when 'true' ->
								      let <Optz1> =
									  %% Line 2244
									  apply 'no_cache_of_first_generator'/2
									      (_cor188, GenNum)
								      in  %% Line 2245
									  case Optz1 of
									    <{'optz',_cor235,_cor236,_cor237,_cor238,_cor239}> when 'true' ->
										let <_cor72> =
										    call 'erlang':'setelement'
											(5, Optz1, Join)
										in  %% Line 2246
										    case QLC of
										      <{'qlc',_cor241,_cor242,_cor243,_cor244,_cor245}> when 'true' ->
											  let <_cor75> =
											      call 'erlang':'setelement'
												  (6, QLC, _cor72)
											  in  let <_cor77> =
												  call 'erlang':'setelement'
												      (4, _cor75, Qdata)
											      in  call 'erlang':'setelement'
												      (2, Prep0, _cor77)
										      ( <_cor246> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','qlc'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
									    ( <_cor240> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','optz'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
								  ( <_cor68> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor68})
								    -| ['compiler_generated'] )
								end
				    ( <_cor51> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor51})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor47> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor47})
			    -| ['compiler_generated'] )
			end
		    ( <_cor41> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor41})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2247
	  <Prep = {'prepared',{'qlc_append',HL},_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264},GenNum> when 'true' ->
	      let <_cor86> =
		  %% Line 2248
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor83) ->
				case _cor83 of
				  <[H|_cor82]> when 'true' ->
				      let <_cor84> =
					  apply 'opt_le'/2
					      (H, GenNum)
				      in  let <_cor85> =
					      apply 'lc$^0'/1
						  (_cor82)
					  in  ( [_cor84|_cor85]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor83> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor83})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (HL)
		    -| ['list_comprehension'] )
	      in  let <_rec77> = {%% Line 2249
		       'qlc_append',_cor86}
		  in  %% Line 2249
		      call 'erlang':'setelement'
			  (2, Prep, _rec77)
	  %% Line 2250
	  <Prep = {'prepared',Sort = {'qlc_sort',H,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281},_cor282,_cor283,_cor284,_cor285,_cor286,_cor287,_cor288,_cor289},GenNum> when 'true' ->
	      let <_rec81> =
		  %% Line 2251
		  apply 'opt_le'/2
		      (H, GenNum)
	      in  let <_cor94> =
		      %% Line 2251
		      call 'erlang':'setelement'
			  (2, Sort, _rec81)
		  in  %% Line 2251
		      call 'erlang':'setelement'
			  (2, Prep, _cor94)
	  %% Line 2252
	  <Prep,_X_GenNum> when 'true' ->
	      %% Line 2253
	      Prep
	end
'no_cache_of_first_generator'/2 =
    %% Line 2255
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Optz,GenNum>
	      when call 'erlang':'>'
		    (GenNum,
		     1) ->
	      %% Line 2256
	      Optz
	  %% Line 2257
	  <Optz,1> when 'true' ->
	      %% Line 2258
	      case Optz of
		<{'optz',_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
		    call 'erlang':'setelement'
			(3, Optz, 'false')
		( <_cor11> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','optz'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'no_cache_of_first_generator',2}}] )
	    -| ['compiler_generated'] )
	end
'maybe_sort'/4 =
    %% Line 2260
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2261
	case call 'lists':'keyfind'
		 (_cor2, 1, _cor1) of
	  %% Line 2262
	  <{_cor17,Col}>
	      when call 'erlang':'=:='
		    (_cor17,
		     _cor2) ->
	      %% Line 2263
	      case _cor0 of
		<{'qlc_opt',_cor18,_cor19,_cor20,_cor21,TmpDir,_cor22,_cor23,TmpUsage}> when 'true' ->
		    let <_cor9> =
			%% Line 2264
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[Dir|_cor6]>
					    when call 'erlang':'=/='
						  (Dir,
						   []) ->
					    let <_cor8> =
						apply 'lc$^0'/1
						    (_cor6)
					    in  ( [{'tmpdir',Dir}|_cor8]
						  -| ['compiler_generated'] )
					( <[Dir|_cor6]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor6)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  ([TmpDir|[]])
			  -| ['list_comprehension'] )
		    in  let <Sort> =
			    %% Line 2265
			    {'qlc_sort',_cor3,{'keysort',Col},'false',%% Line 2266
								      [],%% Line 2266
									 'ascending',_cor9,%% Line 2267
											   TmpUsage,%% Line 2268
												    TmpDir}
			in  %% Line 2269
			    {'prepared',Sort,'no',[],[],[],'no','undefined','false','false'}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2270
	  <'false'> when 'true' ->
	      _cor3
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'skip_lookup_filters'/2 =
    %% Line 2274
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Qdata,[]> when 'true' ->
	      %% Line 2275
	      Qdata
	  %% Line 2276
	  <Qdata0,LU_SkipFs> when 'true' ->
	      %% Line 2277
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[Qd = %% Line 2282
				     {QNum,GoI,_cor11,_cor12}|_cor3]> when 'true' ->
				  let <_cor7> =
				      case call 'lists':'member'
					       (QNum, LU_SkipFs) of
					%% Line 2278
					<'true'> when 'true' ->
					    %% Line 2279
					    {QNum,GoI,-1,'fil'}
					%% Line 2280
					<'false'> when 'true' ->
					    %% Line 2281
					    Qd
					( <_cor6> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor6})
					  -| ['compiler_generated'] )
				      end
				  in  let <_cor8> =
					  %% Line 2282
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [_cor7|_cor8]
					    -| ['compiler_generated'] )
			      ( <[_cor2|_cor3]> when 'true' ->
				    %% Line 2282
				    apply 'lc$^0'/1
					(_cor3)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(%% Line 2282
			 Qdata0)
		-| ['list_comprehension'] )
	end
'activate_join_lookup_filter'/2 =
    %% Line 2287
    fun (_cor1,_cor0) ->
	%% Line 2288
	case call 'lists':'keyfind'
		 (_cor1, 1, _cor0) of
	  <{_cor16,GoI2,SI2,{'gen',Prep2}}> when 'true' ->
	      %% Line 2289
	      ( case Prep2 of
		  ( <( {'prepared',_rec84,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 2290
			case _rec84 of
			  <{'qlc_table',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
			      let <_cor8> =
				  call 'erlang':'setelement'
				      (12, _rec84, 'no_match_spec')
			      in  let <_cor12> =
				      call 'erlang':'setelement'
					  (2, Prep2, _cor8)
				  in  %% Line 2292
				      call 'lists':'keyreplace'
					  (_cor1, 1, _cor0, {_cor1,GoI2,SI2,{'gen',_cor12}})
			  ( <_cor37> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','qlc_table'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','prepared'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'opt_join'/5 =
    %% Line 2294
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2296
	case _cor4 of
	  <{Ix0,M0}> when 'true' ->
	      let <Ix1> =
		  %% Line 2297
		  apply 'opt_join_lu'/3
		      (Ix0, _cor2, _cor0)
	      in  let <_cor7> =
		      %% Line 2298
		      call 'lists':'keysort'
			  (2, Ix1)
		  in  %% Line 2299
		      case call 'lists':'reverse'
			       (_cor7) of
			%% Line 2300
			<[{{Q1,C1,Q2,C2},Skip,KE,LU_fun}|_cor19]> when 'true' ->
			    let <J> =
				%% Line 2301
				{'qlc_join',{'lookup',KE,LU_fun},_cor1,'undefined',Q1,%% Line 2302
										      C1,'undefined',%% Line 2302
												     Q2,%% Line 2302
													C2}
			    in  %% Line 2303
				{Q2,J,Skip,[]}
			%% Line 2304
			<[]> when 'true' ->
			    %% Line 2306
			    case apply 'opt_join_merge'/1
				     (M0) of
			      %% Line 2307
			      <[{{Q1,C1,Q2,C2},{'merge_join',DoSort,KE,Skip}}|_cor20]> when 'true' ->
				  let <J> =
				      %% Line 2308
				      {'qlc_join',{'merge',KE},_cor1,'undefined',%% Line 2309
										 Q1,%% Line 2309
										    C1,'undefined',%% Line 2309
												   Q2,%% Line 2309
												      C2}
				  in  %% Line 2310
				      {'not_a_qnum',J,Skip,DoSort}
			      %% Line 2311
			      <[]>
				  when call 'erlang':'=:='
					(_cor3,
					 'nested_loop') ->
				  %% Line 2312
				  {'not_a_qnum','no',[],[]}
			      %% Line 2313
			      <_cor21>
				  when call 'erlang':'=/='
					(_cor3,
					 'any') ->
				  %% Line 2314
				  call 'erlang':'error'
				      ('cannot_carry_out_join', [_cor3|[]])
			      %% Line 2315
			      <_cor22> when 'true' ->
				  %% Line 2316
				  {'not_a_qnum','no',[],[]}
			    end
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'opt_join_lu'/3 =
    %% Line 2320
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{J = {_X_Q1,_X_C1,Q2,_X_C2},[{'lookup_join',_X_KEols,JKE,Skip0}|_cor17]}|LJ],%% Line 2321
											 Qdata,%% Line 2321
											       LU_SkipQuals> when 'true' ->
	      %% Line 2322
	      case call 'lists':'keyfind'
		       (Q2, 1, Qdata) of
		<{_cor18,_cor19,_cor20,{'gen',Prep2}}>
		    when call 'erlang':'=:='
			  (_cor18,
			   Q2) ->
		    %% Line 2324
		    ( case Prep2 of
			( <( {'prepared',_rec88,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec88 of
				<{'qlc_table',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,LU_fun,_cor36,KE,_cor37,MS}> when 'true' ->
				    let <_cor10> =
					%% Line 2328
					( case <> of
					    ( <>
						  when call 'erlang':'=/='
							(MS,
							 'no_match_spec') ->
						  let <_cor8> =
						      %% Line 2329
						      call 'lists':'keymember'
							  (Q2, 1, LU_SkipQuals)
						  in  %% Line 2329
						      call 'erlang':'=:='
							  (_cor8, 'false')
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    in  %% Line 2327
					case _cor10 of
					  %% Line 2331
					  <'true'> when 'true' ->
					      %% Line 2332
					      apply 'opt_join_lu'/3
						  (LJ, Qdata, LU_SkipQuals)
					  %% Line 2333
					  <'false'> when 'true' ->
					      let <Skip> =
						  %% Line 2336
						  apply 'skip_if_possible'/3
						      (JKE, KE, Skip0)
					      in  let <_cor12> =
						      %% Line 2337
						      apply 'opt_join_lu'/3
							  (LJ, Qdata, LU_SkipQuals)
						  in  %% Line 2337
						      [{J,Skip,KE,LU_fun}|_cor12]
					  ( <_cor13> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor13})
					    -| ['compiler_generated'] )
					end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor29> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','prepared'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2339
	  <[],_X_Qdata,_X_LU_SkipQuals> when 'true' ->
	      %% Line 2340
	      []
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'opt_join_lu',3}}] )
	    -| ['compiler_generated'] )
	end
'opt_join_merge'/1 =
    %% Line 2342
    fun (_cor0) ->
	let <_cor15> =
	    %% Line 2344
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[%% Line 2346
			      {_X_KpOrder_or_other,MJ}|_cor2]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor9) ->
					      case _cor9 of
						<[%% Line 2347
						  {QCs,{'merge_join',DoSort,KE,Skip0}}|_cor4]> when 'true' ->
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor10) ->
								  case _cor10 of
								    <[%% Line 2348
								      Skip|_cor6]> when 'true' ->
									let <_cor12> =
									    call 'erlang':'length'
										(DoSort)
									in  let <_cor13> =
										call 'erlang':'-'
										    (_cor12)
									    in  let <_cor11> =
										    call 'erlang':'length'
											(Skip)
										in  let <_cor14> =
											%% Line 2348
											apply 'lc$^2'/1
											    (_cor6)
										    in  ( [{_cor13,_cor11,%% Line 2345
													  {QCs,{'merge_join',DoSort,KE,Skip}}}|_cor14]
											  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									%% Line 2347
									apply 'lc$^1'/1
									    (_cor4)
								    ( <_cor10> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor10})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  let <_cor7> =
							      %% Line 2348
							      apply 'skip_if_possible'/3
								  (KE, '==', Skip0)
							  in  apply 'lc$^2'/1
								  (%% Line 2348
								   [_cor7|[]])
						      -| ['list_comprehension'] )
						( <[_cor3|_cor4]> when 'true' ->
						      %% Line 2347
						      apply 'lc$^1'/1
							  (_cor4)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 2346
						    apply 'lc$^0'/1
							(_cor2)
						( <_cor9> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor9})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (%% Line 2347
					   MJ)
				  -| ['list_comprehension'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 2346
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor22> =
		%% Line 2349
		( letrec
		      'lc$^3'/1 =
			  fun (_cor20) ->
			      case _cor20 of
				<[{_cor24,_cor25,J}|_cor18]> when 'true' ->
				    let <_cor21> =
					apply 'lc$^3'/1
					    (_cor18)
				    in  ( [J|_cor21]
					  -| ['compiler_generated'] )
				( <[_cor17|_cor18]> when 'true' ->
				      apply 'lc$^3'/1
					  (_cor18)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor20> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor20})
					-| [{'function_name',{'lc$^3',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor19> =
			  call 'lists':'sort'
			      (_cor15)
		      in  apply 'lc$^3'/1
			      (_cor19)
		  -| ['list_comprehension'] )
	    in  %% Line 2349
		call 'lists':'reverse'
		    (_cor22)
'skip_if_possible'/3 =
    %% Line 2353
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'=:=','==',_cor6> when 'true' ->
	      %% Line 2354
	      []
	  %% Line 2355
	  <_cor7,_cor8,{_X_SkipTag,Skip}> when 'true' ->
	      %% Line 2356
	      Skip
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'skip_if_possible',3}}] )
	    -| ['compiler_generated'] )
	end
'setup_qlc'/2 =
    %% Line 2367
    fun (_cor1,_cor0) ->
	%% Line 2369
	apply 'setup_le'/3
	    (_cor1, [], _cor0)
'setup_le'/3 =
    %% Line 2371
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'prepared',{'simple_qlc',_cor35,LE,_cor36,_cor37,Optz},_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45},Post0,Setup> when 'true' ->
	      %% Line 2372
	      case apply 'setup_le'/3
		       (LE, Post0, Setup) of
		<{Objs,Post,LocalPost}> when 'true' ->
		    %% Line 2373
		    apply 'unique_cache'/4
			(Objs, Post, LocalPost, Optz)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2374
	  <{'prepared',{'qlc',QFun,_cor46,Qdata,V,%% Line 2375
						  Optz},_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54},%% Line 2375
														 Post0,%% Line 2375
														       Setup> when 'true' ->
	      %% Line 2376
	      case %% Line 2377
		   apply 'setup_quals'/4
		       (Qdata, Post0, Setup, Optz) of
		<{GoTo,FirstState,Post,LocalPost}> when 'true' ->
		    let <Objs> =
			%% Line 2378
			( fun () ->
			      apply QFun
				  (FirstState, V, GoTo)
			  -| [{'id',{0,0,'-setup_le/3-fun-0-'}}] )
		    in  %% Line 2379
			apply 'unique_cache'/4
			    (Objs, Post, LocalPost, Optz)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2380
	  <{'prepared',Table = {'qlc_table',_cor55,_cor56,_cor57,PostFun,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64},_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72},Post,Setup> when 'true' ->
	      let <H> =
		  %% Line 2381
		  apply 'table_handle'/3
		      (Table, Post, Setup)
	      in  %% Line 2383
		  {H,[PostFun|Post],[]}
	  %% Line 2384
	  <{'prepared',{'qlc_append',PrepL},_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80},Post0,Setup> when 'true' ->
	      let <F> =
		  %% Line 2385
		  ( fun (_cor10,_cor9) ->
			case <_cor10,_cor9> of
			  <Prep,{Post1,LPost1}> when 'true' ->
			      %% Line 2386
			      case apply 'setup_le'/3
				       (Prep, Post1, Setup) of
				<{Objs,Post2,LPost2}> when 'true' ->
				    let <_cor8> =
					%% Line 2387
					call 'erlang':'++'
					    (LPost1, LPost2)
				    in  %% Line 2387
					{Objs,{Post2,_cor8}}
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor12,_cor11> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor12,_cor11})
				  -| [{'function_name',{'-setup_le/3-fun-1-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-setup_le/3-fun-1-'}}] )
	      in  %% Line 2389
		  case call 'lists':'mapfoldl'
			   (F, {Post0,[]}, PrepL) of
		    <{ObjsL,{Post,LocalPost}}> when 'true' ->
			let <_cor15> =
			    %% Line 2390
			    ( fun () ->
				  apply 'append_loop'/2
				      (ObjsL, 0)
			      -| [{'id',{0,0,'-setup_le/3-fun-2-'}}] )
			in  %% Line 2390
			    {_cor15,Post,LocalPost}
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2391
	  <{'prepared',{'qlc_sort',Prep,Kp,%% Line 2392
					   Unique,%% Line 2392
						  Compressed,%% Line 2393
							     Order,%% Line 2393
								   SortOptions0,%% Line 2394
										TmpUsage,%% Line 2394
											 TmpDir},_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88},%% Line 2395
																			  Post0,%% Line 2395
																				Setup> when 'true' ->
	      let <SortOptions> =
		  %% Line 2396
		  apply 'sort_options_global_tmp'/2
		      (SortOptions0, TmpDir)
	      in  let <LF> =
		      %% Line 2397
		      ( fun (_cor17) ->
			    %% Line 2398
			    apply 'sort_list'/6
				(_cor17, Order, Unique, Kp, SortOptions, Post0)
			-| [{'id',{0,0,'-setup_le/3-fun-3-'}}] )
		  in  %% Line 2400
		      case apply 'setup_le'/3
			       (Prep, Post0, Setup) of
			%% Line 2401
			<{L,Post,LocalPost}>
			    when call 'erlang':'is_list'
				  (L) ->
			    let <_cor20> =
				%% Line 2402
				apply LF
				    (L)
			    in  %% Line 2402
				{_cor20,Post,LocalPost}
			%% Line 2403
			<{Objs,Post,LocalPost}> when 'true' ->
			    let <FF> =
				%% Line 2404
				( fun (_cor21) ->
				      %% Line 2405
				      apply 'file_sort_handle'/7
					  (_cor21, Kp, SortOptions, TmpDir, %% Line 2406
									    Compressed, %% Line 2406
											Post, %% Line 2406
											      LocalPost)
				  -| [{'id',{0,0,'-setup_le/3-fun-4-'}}] )
			    in  %% Line 2408
				apply 'sort_handle'/7
				    (Objs, LF, FF, SortOptions, Post, LocalPost, %% Line 2409
										 {TmpUsage,'sorting'})
			( <_cor24> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor24})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2411
	  <{'prepared',{'qlc_list',L,MS},_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96},Post,_X_Setup>
	      when let <_cor25> =
		    %% Line 2412
		    call 'erlang':'=:='
			('no_match_spec', MS)
		in  let <_cor26> =
			%% Line 2412
			call 'erlang':'=:='
			    (L, [])
		    in  %% Line 2412
			call 'erlang':'or'
			    (_cor25, _cor26) ->
	      %% Line 2413
	      {L,Post,[]}
	  %% Line 2414
	  <{'prepared',{'qlc_list',L,MS},_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104},Post,_X_Setup>
	      when %% Line 2415
		call 'erlang':'is_list'
		    (L) ->
	      let <_cor27> =
		  %% Line 2416
		  call 'ets':'match_spec_compile'
		      (MS)
	      in  let <_cor28> =
		      %% Line 2416
		      call 'ets':'match_spec_run'
			  (L, _cor27)
		  in  %% Line 2416
		      {_cor28,Post,[]}
	  %% Line 2417
	  <{'prepared',{'qlc_list',H0,MS},_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112},Post0,Setup> when 'true' ->
	      %% Line 2418
	      case apply 'setup_le'/3
		       (H0, Post0, Setup) of
		<{Objs0,Post,LocalPost}> when 'true' ->
		    let <_cor30> =
			%% Line 2419
			call 'ets':'match_spec_compile'
			    (MS)
		    in  let <Objs> =
			    %% Line 2419
			    call 'ets':'match_spec_run'
				(Objs0, _cor30)
			in  %% Line 2420
			    {Objs,Post,LocalPost}
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor29})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32})
		  -| [{'function_name',{'setup_le',3}}] )
	    -| ['compiler_generated'] )
	end
'setup_quals'/4 =
    %% Line 2436
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2437
	case %% Line 2438
	     apply 'setup_quals'/6
		 (0, _cor3, [], _cor2, [], _cor1) of
	  <{GoTo0,Post1,LocalPost0}> when 'true' ->
	      let <GoTo1> =
		  %% Line 2439
		  call 'lists':'keysort'
		      (1, GoTo0)
	      in  let <FirstState0> =
		      %% Line 2440
		      apply 'next_state'/1
			  (_cor3)
		  in  %% Line 2442
		      ( case _cor0 of
			  ( <( {'optz',_cor38,_cor39,_cor40,_rec89,_cor41}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor30> =
				    case _rec89 of
				      %% Line 2443
				      <MJ = {'qlc_join',{'merge',_X_KE},Opt,_cor43,_cor44,C1,_cor45,_cor46,C2}> when 'true' ->
					  let <MF> =
					      %% Line 2444
					      ( fun (_cor13,_cor12,_cor11) ->
						    case <_cor13,_cor12,_cor11> of
						      <_X_Rev,{H1,WH1},{H2,WH2}> when 'true' ->
							  %% Line 2445
							  ( fun () ->
								let <_cor10> =
								    %% Line 2446
								    apply WH1
									(H1)
								in  let <_cor9> =
									%% Line 2446
									apply WH2
									    (H2)
								    in  %% Line 2446
									apply 'merge_join'/5
									    (_cor10, C1, _cor9, C2, Opt)
							    -| [{'id',{0,0,'-setup_quals/4-fun-0-'}}] )
						      ( <_cor16,_cor15,_cor14> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor16,_cor15,_cor14})
							      -| [{'function_name',{'-setup_quals/4-fun-1-',3}}] )
							-| ['compiler_generated'] )
						    end
						-| [{'id',{0,0,'-setup_quals/4-fun-1-'}}] )
					  in  %% Line 2449
					      apply 'setup_join'/6
						  (MJ, _cor3, GoTo1, FirstState0, MF, Post1)
				      %% Line 2450
				      <LJ = {'qlc_join',{'lookup',_X_KE,LuF},_cor47,_cor48,_cor49,C1,_cor50,_cor51,C2}> when 'true' ->
					  let <LF> =
					      %% Line 2451
					      ( fun (_cor23,_cor22,_cor21) ->
						    case <_cor23,_cor22,_cor21> of
						      <Rev,{H1,WH1},{H2,WH2}> when 'true' ->
							  let <H,W> =
							      %% Line 2452
							      case <> of
								%% Line 2453
								<>
								    when call 'erlang':'=:='
									  (Rev,
									   'true') ->
								    <H2,WH2>
								%% Line 2454
								<> when 'true' ->
								    <H1,WH1>
							      end
							  in  %% Line 2456
							      ( fun () ->
								    let <_cor20> =
									%% Line 2457
									apply W
									    (H)
								    in  %% Line 2457
									apply 'lookup_join'/5
									    (_cor20, C1, LuF, C2, Rev)
								-| [{'id',{0,0,'-setup_quals/4-fun-2-'}}] )
						      ( <_cor26,_cor25,_cor24> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor26,_cor25,_cor24})
							      -| [{'function_name',{'-setup_quals/4-fun-3-',3}}] )
							-| ['compiler_generated'] )
						    end
						-| [{'id',{0,0,'-setup_quals/4-fun-3-'}}] )
					  in  %% Line 2460
					      apply 'setup_join'/6
						  (LJ, _cor3, GoTo1, FirstState0, LF, Post1)
				      %% Line 2461
				      <'no'> when 'true' ->
					  let <_cor28> =
					      %% Line 2462
					      apply 'flat_goto'/1
						  (GoTo1)
					  in  %% Line 2462
					      {_cor28,FirstState0,Post1,[]}
				      ( <_cor29> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor29})
					-| ['compiler_generated'] )
				    end
				in  case _cor30 of
				      <{GoTo2,FirstState,Post,LocalPost1}> when 'true' ->
					  let <GoTo> =
					      %% Line 2464
					      call 'erlang':'list_to_tuple'
						  (GoTo2)
					  in  let <_cor33> =
						  %% Line 2465
						  call 'erlang':'++'
						      (LocalPost0, LocalPost1)
					      in  %% Line 2465
						  {GoTo,FirstState,Post,_cor33}
				      ( <_cor31> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor31})
					-| ['compiler_generated'] )
				    end
			    -| ['compiler_generated'] )
			  ( <_cor42> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','optz'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'setup_quals'/6 =
    %% Line 2467
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <GenLoopS,[{_X_QNum,GoI,-1,'fil'}|Qdata],%% Line 2468
						   Gs,%% Line 2468
						      P,%% Line 2468
							LP,%% Line 2468
							   Setup> when 'true' ->
	      %% Line 2470
	      apply 'setup_quals'/6
		  (GenLoopS, Qdata, [{GoI,[-1|[-1]]}|Gs], P, LP, Setup)
	  %% Line 2471
	  <GenLoopS,[{_X_QNum,GoI,_X_SI,'fil'}|Qdata],%% Line 2472
						      Gs,%% Line 2472
							 P,%% Line 2472
							   LP,%% Line 2472
							      Setup> when 'true' ->
	      let <_cor8> =
		  %% Line 2473
		  apply 'next_state'/1
		      (Qdata)
	      in  %% Line 2473
		  apply 'setup_quals'/6
		      (GenLoopS, Qdata, [{GoI,[GenLoopS|[_cor8|[]]]}|Gs], %% Line 2474
									  P, %% Line 2474
									     LP, %% Line 2474
										 Setup)
	  %% Line 2475
	  <GenLoopS,[{_X_QNum,GoI,_X_SI,{'gen',{'join',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}}}|Qdata],%% Line 2476
													   Gs,%% Line 2476
													      P,%% Line 2476
														LP,%% Line 2476
														   Setup> when 'true' ->
	      %% Line 2477
	      apply 'setup_quals'/6
		  (GenLoopS, Qdata, [{GoI,[-1|[-1|[-1]]]}|Gs], P, LP, Setup)
	  %% Line 2478
	  <GenLoopS,[{_X_QNum,GoI,SI,{'gen',LE}}|Qdata],%% Line 2479
							Gs,%% Line 2479
							   P,%% Line 2479
							     LP,%% Line 2479
								Setup> when 'true' ->
	      %% Line 2480
	      case apply 'setup_le'/3
		       (LE, P, Setup) of
		<{V,NP,LP1}> when 'true' ->
		    let <_cor15> =
			%% Line 2481
			call 'erlang':'+'
			    (SI, 1)
		    in  let <_cor14> =
			    %% Line 2481
			    apply 'next_state'/1
				(Qdata)
			in  let <_cor13> =
				%% Line 2482
				call 'erlang':'++'
				    (LP, LP1)
			    in  %% Line 2481
				apply 'setup_quals'/6
				    (_cor15, Qdata, [{GoI,[GenLoopS|[_cor14|[V|[]]]]}|Gs], %% Line 2482
											   NP, _cor13, %% Line 2482
												       Setup)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2483
	  <GenLoopS,[],Gs,P,LP,_X_Setup> when 'true' ->
	      %% Line 2484
	      {[{1,[GenLoopS|[]]}|Gs],P,LP}
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'setup_quals',6}}] )
	    -| ['compiler_generated'] )
	end
'setup_join'/6 =
    %% Line 2493
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2494
	case _cor5 of
	  <{'qlc_join',_cor70,Opt,_cor71,QNum1a,_cor72,_cor73,QNum2a,_cor74}> when 'true' ->
	      %% Line 2495
	      case %% Line 2496
		   apply 'find_join_data'/3
		       (_cor4, QNum1a, QNum2a) of
		<{{_X_QN,JGoI,JSI,_cor75},Rev,QNum1,QNum2,WH1,WH2,_X_CsFun}> when 'true' ->
		    let <_cor12> =
			%% Line 2497
			( letrec
			      'lc$^0'/1 =
				  fun (_cor10) ->
				      case _cor10 of
					<[%% Line 2498
					  {QNum,GoI,SI,_cor76}|_cor9]>
					    when %% Line 2498
					      call 'erlang':'=:='
						  (QNum,
						   QNum1) ->
					    let <_cor11> =
						%% Line 2498
						apply 'lc$^0'/1
						    (_cor9)
					    in  ( [{GoI,SI}|_cor11]
						  -| ['compiler_generated'] )
					( <[_cor8|_cor9]> when 'true' ->
					      %% Line 2498
					      apply 'lc$^0'/1
						  (_cor9)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor10> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor10})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (_cor4)
			  -| ['list_comprehension'] )
		    in  %% Line 2497
			case _cor12 of
			  <[{GoI1,SI1}|[]]> when 'true' ->
			      let <_cor18> =
				  %% Line 2499
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor16) ->
						case _cor16 of
						  <[%% Line 2500
						    {QNum,GoI,SI,_cor77}|_cor15]>
						      when %% Line 2500
							call 'erlang':'=:='
							    (QNum,
							     QNum2) ->
						      let <_cor17> =
							  %% Line 2500
							  apply 'lc$^1'/1
							      (_cor15)
						      in  ( [{GoI,SI}|_cor17]
							    -| ['compiler_generated'] )
						  ( <[_cor14|_cor15]> when 'true' ->
							%% Line 2500
							apply 'lc$^1'/1
							    (_cor15)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor16> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor16})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (_cor4)
				    -| ['list_comprehension'] )
			      in  %% Line 2499
				  case _cor18 of
				    <[{GoI2,SI2}|[]]> when 'true' ->
					let <_cor24> =
					    %% Line 2502
					    ( letrec
						  'lc$^2'/1 =
						      fun (_cor22) ->
							  case _cor22 of
							    <[{GoI,[_X_Back|[_X_Forth|[H|[]]]]}|_cor21]>
								when call 'erlang':'=:='
								      (GoI,
								       GoI1) ->
								let <_cor23> =
								    apply 'lc$^2'/1
									(_cor21)
								in  ( [H|_cor23]
								      -| ['compiler_generated'] )
							    ( <[_cor20|_cor21]> when 'true' ->
								  apply 'lc$^2'/1
								      (_cor21)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor22> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor22})
								    -| [{'function_name',{'lc$^2',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^2'/1
						      (_cor3)
					      -| ['list_comprehension'] )
					in  %% Line 2502
					    case _cor24 of
					      <[H1|[]]> when 'true' ->
						  let <_cor30> =
						      %% Line 2504
						      ( letrec
							    'lc$^3'/1 =
								fun (_cor28) ->
								    case _cor28 of
								      <[{GoI,[Back|[_X_Forth|[H|[]]]]}|_cor27]>
									  when call 'erlang':'=:='
										(GoI,
										 GoI2) ->
									  let <_cor29> =
									      apply 'lc$^3'/1
										  (_cor27)
									  in  ( [{Back,H}|_cor29]
										-| ['compiler_generated'] )
								      ( <[_cor26|_cor27]> when 'true' ->
									    apply 'lc$^3'/1
										(_cor27)
									-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_cor28> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor28})
									      -| [{'function_name',{'lc$^3',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^3'/1
								(_cor3)
							-| ['list_comprehension'] )
						  in  %% Line 2503
						      case _cor30 of
							<[{BackH2,H2}|[]]> when 'true' ->
							    let <H0> =
								%% Line 2505
								apply _cor1
								    (Rev, {H1,WH1}, {H2,WH2})
							    in  let <_cor33> =
								    %% Line 2508
								    apply 'join_unique_cache'/1
									(Opt)
								in  %% Line 2507
								    case %% Line 2508
									 apply 'unique_cache'/4
									     (H0, _cor0, [], _cor33) of
								      <{H,Post,LocalPost}> when 'true' ->
									  let <_cor39> =
									      %% Line 2509
									      ( letrec
										    'lc$^4'/1 =
											fun (_cor37) ->
											    case _cor37 of
											      <[{GoI,[Back|[_cor78|[_cor79|[]]]]}|_cor36]>
												  when call 'erlang':'=:='
													(GoI,
													 GoI1) ->
												  let <_cor38> =
												      apply 'lc$^4'/1
													  (_cor36)
												  in  ( [Back|_cor38]
													-| ['compiler_generated'] )
											      ( <[_cor35|_cor36]> when 'true' ->
												    apply 'lc$^4'/1
													(_cor36)
												-| ['compiler_generated'] )
											      <[]> when 'true' ->
												  []
											      ( <_cor37> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor37})
												      -| [{'function_name',{'lc$^4',1}}] )
												-| ['compiler_generated'] )
											    end
										in  apply 'lc$^4'/1
											(_cor3)
										-| ['list_comprehension'] )
									  in  %% Line 2509
									      case _cor39 of
										<[JBack|[]]> when 'true' ->
										    let <JForth> =
											%% Line 2510
											apply 'next_after'/3
											    (_cor4, SI1, QNum2)
										    in  let <_cor49> =
											    %% Line 2511
											    ( fun (_cor47) ->
												  case _cor47 of
												    <{GoI,_cor80}>
													when call 'erlang':'=:='
													      (GoI,
													       JGoI) ->
													%% Line 2512
													{JGoI,[JBack|[JForth|[H|[]]]]}
												    %% Line 2513
												    <{GoI,_cor81}>
													when let <_cor42> =
													      call 'erlang':'=:='
														  (GoI, GoI1)
													  in  let <_cor43> =
														  call 'erlang':'=:='
														      (GoI, GoI2)
													      in  call 'erlang':'or'
														      (_cor42, _cor43) ->
													%% Line 2514
													{GoI,[-1|[-1|[-1]]]}
												    %% Line 2515
												    <Go> when 'true' ->
													%% Line 2516
													Go
												  end
											      -| [{'id',{0,0,'-setup_join/6-fun-0-'}}] )
											in  let <GoTo1> =
												%% Line 2511
												call 'lists':'map'
												    (_cor49, _cor3)
											    in  let <_cor60> =
												    %% Line 2518
												    ( fun (_cor58) ->
													  case _cor58 of
													    <S>
														when call 'erlang':'=:='
														      (_cor58,
														       SI1) ->
														%% Line 2519
														JSI
													    %% Line 2520
													    <S>
														when call 'erlang':'=:='
														      (_cor58,
														       SI2) ->
														%% Line 2521
														apply 'next_after'/3
														    (_cor4, S, QNum2)
													    %% Line 2522
													    <S>
														when try
														      let <_cor52> =
															  call 'erlang':'+'
															      (SI1, 1)
														      in  call 'erlang':'=:='
															      (_cor58, _cor52)
														  of <Try> ->
														      Try
														  catch <T,R> ->
														      'false' ->
														%% Line 2523
														call 'erlang':'+'
														    (JSI, 1)
													    %% Line 2524
													    <S>
														when try
														      let <_cor53> =
															  call 'erlang':'+'
															      (SI2, 1)
														      in  let <_cor54> =
															      call 'erlang':'=:='
																  (_cor58, _cor53)
															  in  let <_cor55> =
																  call 'erlang':'+'
																      (SI1, 1)
															      in  let <_cor56> =
																      call 'erlang':'=:='
																	  (_cor55, BackH2)
																  in  call 'erlang':'and'
																	  (_cor54, _cor56)
														  of <Try> ->
														      Try
														  catch <T,R> ->
														      'false' ->
														%% Line 2525
														call 'erlang':'+'
														    (JSI, 1)
													    %% Line 2526
													    <S>
														when try
														      let <_cor57> =
															  call 'erlang':'+'
															      (SI2, 1)
														      in  call 'erlang':'=:='
															      (_cor58, _cor57)
														  of <Try> ->
														      Try
														  catch <T,R> ->
														      'false' ->
														%% Line 2527
														BackH2
													    %% Line 2528
													    <S> when 'true' ->
														S
													  end
												      -| [{'id',{0,0,'-setup_join/6-fun-1-'}}] )
												in  let <_cor51> =
													%% Line 2529
													apply 'flat_goto'/1
													    (GoTo1)
												    in  let <GoTo> =
													    %% Line 2518
													    call 'lists':'map'
														(_cor60, _cor51)
													in  let <_cor62> =
														%% Line 2530
														case <> of
														  %% Line 2531
														  <>
														      when call 'erlang':'=:='
															    (SI1,
															     _cor2) ->
														      JSI
														  %% Line 2532
														  <> when 'true' ->
														      _cor2
														end
													    in  %% Line 2534
														{GoTo,_cor62,Post,LocalPost}
										( <_cor40> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_cor40})
										  -| ['compiler_generated'] )
									      end
								      ( <_cor34> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor34})
									-| ['compiler_generated'] )
								    end
							( <_cor31> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor31})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor25> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor25})
						-| ['compiler_generated'] )
					    end
				    ( <_cor19> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor19})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor13})
			    -| ['compiler_generated'] )
			end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'join_unique_cache'/1 =
    %% Line 2536
    fun (_cor0) ->
	case _cor0 of
	  <Opt = {'qlc_opt',Unique,Cache,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 2537
	      {'optz',Unique,Cache,'any','no',Opt}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'join_unique_cache',1}}] )
	    -| ['compiler_generated'] )
	end
'flat_goto'/1 =
    %% Line 2539
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2540
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{_cor5,L}> when 'true' ->
			L
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-flat_goto/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-flat_goto/1-fun-0-'}}] )
	in  %% Line 2540
	    call 'lists':'flatmap'
		(_cor3, _cor0)
'next_after'/3 =
    %% Line 2542
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_cor7,_cor8,S,_cor9}|Qdata],_cor10,QNum2>
	      when call 'erlang':'=:='
		    (_cor10,
		     S) ->
	      %% Line 2543
	      case Qdata of
		%% Line 2544
		<[{_cor11,_cor12,_cor13,_cor14}|Qdata1]>
		    when call 'erlang':'=:='
			  (_cor11,
			   QNum2) ->
		    %% Line 2545
		    apply 'next_state'/1
			(Qdata1)
		%% Line 2546
		<_cor15> when 'true' ->
		    %% Line 2547
		    apply 'next_state'/1
			(Qdata)
	      end
	  %% Line 2549
	  <[_cor16|Qdata],S,QNum2> when 'true' ->
	      %% Line 2550
	      apply 'next_after'/3
		  (Qdata, S, QNum2)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'next_after',3}}] )
	    -| ['compiler_generated'] )
	end
'next_state'/1 =
    %% Line 2552
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor2,_cor3,_cor4,{'gen',{'join',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10}}}|Qdata]> when 'true' ->
	      %% Line 2553
	      apply 'next_state'/1
		  (Qdata)
	  %% Line 2554
	  <[{_cor11,_cor12,-1,'fil'}|Qdata]> when 'true' ->
	      %% Line 2556
	      apply 'next_state'/1
		  (Qdata)
	  %% Line 2557
	  <[{_cor13,_cor14,S,_cor15}|_cor16]> when 'true' ->
	      %% Line 2558
	      S
	  %% Line 2559
	  <[]> when 'true' ->
	      %% Line 2560
	      apply 'template_state'/0
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'next_state',1}}] )
	    -| ['compiler_generated'] )
	end
'find_join_data'/3 =
    %% Line 2562
    fun (_cor2,_cor1,_cor0) ->
	let <_cor17> =
	    %% Line 2563
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor14) ->
			  case _cor14 of
			    <[Q = %% Line 2564
				  {_X_QN,_X_GoI,_X_SI,%% Line 2565
						      {'gen',{'join',_cor22,QN1,QN2,%% Line 2566
										    H1,%% Line 2566
										       H2,%% Line 2567
											  CsF}}}|_cor4]> when 'true' ->
				let <_cor13,Rev> =
				    %% Line 2568
				    case <> of
				      %% Line 2569
				      <>
					  when let <_cor5> =
						call 'erlang':'=:='
						    (QN1, _cor1)
					    in  let <_cor6> =
						    call 'erlang':'=:='
							(QN2, _cor0)
						in  call 'erlang':'and'
							(_cor5, _cor6) ->
					  <'true',%% Line 2570
						  'false'>
				      %% Line 2571
				      <>
					  when let <_cor9> =
						call 'erlang':'=:='
						    (QN1, _cor0)
					    in  let <_cor10> =
						    call 'erlang':'=:='
							(QN2, _cor1)
						in  call 'erlang':'and'
							(_cor9, _cor10) ->
					  <%% Line 2572
					   'true',%% Line 2572
						  'true'>
				      %% Line 2573
				      <> when 'true' ->
					  <%% Line 2574
					   'false',%% Line 2574
						   'false'>
				    end
				in  %% Line 2568
				    ( case _cor13 of
					<'true'> when 'true' ->
					    let <_cor15> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [{Q,Rev,QN1,QN2,H1,H2,CsF}|_cor15]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					( <_cor16> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor16})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  %% Line 2567
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor14> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor14})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  %% Line 2563
	    case _cor17 of
	      <[QRev|[]]> when 'true' ->
		  %% Line 2576
		  QRev
	      ( <_cor18> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor18})
		-| ['compiler_generated'] )
	    end
'table_handle'/3 =
    %% Line 2578
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'qlc_table',TraverseFun,TravMS,%% Line 2579
					   PreFun,_cor29,_cor30,_cor31,%% Line 2579
								       LuF,%% Line 2580
									   ParentFun,_cor32,%% Line 2580
											    LuVals,%% Line 2580
												   MS},%% Line 2581
												       Post,%% Line 2581
													    Setup> when 'true' ->
	      %% Line 2582
	      case Setup of
		<{'setup',Parent}> when 'true' ->
		    let <_cor11> =
			%% Line 2584
			case <> of
			  %% Line 2585
			  <>
			      when call 'erlang':'=:='
				    (ParentFun,
				     'undefined') ->
			      %% Line 2586
			      'undefined'
			  %% Line 2587
			  <>
			      when try
				    let <_cor4> =
					call 'erlang':'self'
					    ()
				    in  call 'erlang':'=:='
					    (Parent, _cor4)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 2588
			      try
				  %% Line 2589
				  apply ParentFun
				      ()
			      of <_cor5> ->
				  _cor5
			      catch <_cor8,_cor7,_cor6> ->
				  do  %% Line 2591
				      apply 'post_funs'/1
					  (Post)
				      let <_cor9> =
					  %% Line 2592
					  call 'erlang':'get_stacktrace'
					      ()
				      in  %% Line 2592
					  call 'erlang':'raise'
					      (_cor8, _cor7, _cor9)
			  %% Line 2594
			  <> when 'true' ->
			      %% Line 2595
			      case apply 'monitor_request'/2
				       (Parent, {'parent_fun',ParentFun}) of
				%% Line 2596
				<'error'> when 'true' ->
				    do  %% Line 2597
					apply 'post_funs'/1
					    (Post)
					%% Line 2598
					call 'erlang':'exit'
					    ('normal')
				%% Line 2599
				<{'value',Value}> when 'true' ->
				    %% Line 2600
				    Value
				%% Line 2601
				<{'parent_fun_caught',Class,Reason,Stacktrace}> when 'true' ->
				    do  %% Line 2603
					apply 'post_funs'/1
					    (Post)
					%% Line 2604
					call 'erlang':'raise'
					    (Class, Reason, Stacktrace)
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor10})
				  -| ['compiler_generated'] )
			      end
			end
		    in  let <_cor16> =
			    %% Line 2608
			    case <> of
			      %% Line 2609
			      <>
				  when try
					let <_cor13> =
					    call 'erlang':'self'
						()
					in  call 'erlang':'=:='
						(Parent, _cor13)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 2610
				  'undefined'
			      %% Line 2611
			      <> when 'true' ->
				  let <_cor14> =
				      %% Line 2612
				      call 'erlang':'self'
					  ()
				  in  let <Cursor> = {%% Line 2612
					   'qlc_cursor',%% Line 2612
							{_cor14,Parent}}
				      in  %% Line 2613
					  ( fun () ->
						apply 'delete_cursor'/1
						    (Cursor)
					    -| [{'id',{0,0,'-table_handle/3-fun-0-'}}] )
			    end
			in  let <PreFunArgs> =
				%% Line 2615
				[{'parent_value',_cor11}|[{'stop_fun',_cor16}|[]]]
			    in  let <_X_> =
				    %% Line 2616
				    apply 'call'/4
					(PreFun, PreFunArgs, 'ok', Post)
				in  %% Line 2617
				    case LuVals of
				      %% Line 2618
				      <{Pos,Vals}>
					  when call 'erlang':'=:='
						(MS,
						 'no_match_spec') ->
					  %% Line 2619
					  apply LuF
					      (Pos, Vals)
				      %% Line 2620
				      <{Pos,Vals}> when 'true' ->
					  %% Line 2621
					  case apply LuF
						   (Pos, Vals) of
					    %% Line 2622
					    <[]> when 'true' ->
						%% Line 2623
						[]
					    %% Line 2624
					    <Objs>
						when call 'erlang':'is_list'
						      (Objs) ->
						let <_cor20> =
						    %% Line 2626
						    call 'ets':'match_spec_compile'
							(MS)
						in  %% Line 2625
						    call 'ets':'match_spec_run'
							(Objs, _cor20)
					    %% Line 2627
					    <Error> when 'true' ->
						do  %% Line 2628
						    apply 'post_funs'/1
							(Post)
						    %% Line 2629
						    apply 'throw_error'/1
							(Error)
					  end
				      %% Line 2631
				      <_cor34>
					  when let <_cor22> =
						call 'erlang':'=:='
						    (TravMS, 'false')
					    in  let <_cor23> =
						    call 'erlang':'is_boolean'
							(TravMS)
						in  call 'erlang':'and'
							(_cor22, _cor23) ->
					  %% Line 2632
					  case <> of
					    <>
						when call 'erlang':'=:='
						      ('no_match_spec',
						       MS) ->
						%% Line 2633
						TraverseFun
					    ( <> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch','no_match_spec'})
					      -| ['compiler_generated'] )
					  end
				      %% Line 2634
				      <_cor36>
					  when call 'erlang':'=:='
						(MS,
						 'no_match_spec') ->
					  %% Line 2635
					  ( fun () ->
						apply TraverseFun
						    ([{'$1',[],['$1']}])
					    -| [{'id',{0,0,'-table_handle/3-fun-1-'}}] )
				      %% Line 2636
				      <_cor37> when 'true' ->
					  %% Line 2637
					  ( fun () ->
						apply TraverseFun
						    (MS)
					    -| [{'id',{0,0,'-table_handle/3-fun-2-'}}] )
				    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26})
		  -| [{'function_name',{'table_handle',3}}] )
	    -| ['compiler_generated'] )
	end
'open_file'/3 =
    %% Line 2642
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2643
	case call 'file':'open'
		 (_cor2, ['read'|['raw'|['binary'|_cor1]]]) of
	  %% Line 2644
	  <{'ok',Fd}> when 'true' ->
	      let <_cor10> =
		  %% Line 2645
		  ( fun () ->
			%% Line 2646
			case call 'file':'position'
				 (Fd, 'bof') of
			  %% Line 2647
			  <{'ok',0}> when 'true' ->
			      let <TF> =
				  %% Line 2648
				  ( fun (_cor4,_cor3) ->
					case <_cor4,_cor3> of
					  <[],_cor15> when 'true' ->
					      %% Line 2649
					      []
					  %% Line 2650
					  <Ts,C>
					      when call 'erlang':'is_list'
						    (Ts) ->
					      %% Line 2651
					      call 'lists':'reverse'
						  (Ts, C)
					  ( <_cor6,_cor5> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6,_cor5})
						  -| [{'function_name',{'-open_file/3-fun-0-',2}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-open_file/3-fun-0-'}}] )
			      in  %% Line 2653
				  apply 'file_loop_read'/4
				      (#{}#, 65536, {Fd,_cor2}, TF)
			  %% Line 2654
			  <Error> when 'true' ->
			      %% Line 2655
			      apply 'file_error'/2
				  (_cor2, Error)
			end
		    -| [{'id',{0,0,'-open_file/3-fun-1-'}}] )
	      in  %% Line 2645
		  {_cor10,%% Line 2657
			  Fd}
	  %% Line 2658
	  <Error> when 'true' ->
	      do  %% Line 2659
		  apply 'post_funs'/1
		      (_cor0)
		  %% Line 2660
		  apply 'throw_file_error'/2
		      (_cor2, Error)
	end
'file_loop'/4 =
    %% Line 2663
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 2665
	    try
		apply 'file_loop2'/2
		    (_cor3, _cor1)
	    of <_cor4> ->
		_cor4
	    catch <_cor7,_cor6,_cor5> ->
		%% Line 2667
		case _cor2 of
		  <{_X_Fd,FileName}> when 'true' ->
		      %% Line 2668
		      apply 'error'/1
			  ({'bad_object',FileName})
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
	in  %% Line 2664
	    case _cor9 of
	      %% Line 2671
	      <{'terms',Bin = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
				#<B>('all',8,'binary',['unsigned'|['big']])}#,[]}> when 'true' ->
		  let <_cor10> =
		      %% Line 2672
		      call 'erlang':'byte_size'
			  (B)
		  in  let <_cor11> =
			  %% Line 2672
			  call 'erlang':'-'
			      (Size, _cor10)
		      in  let <_cor12> =
			      %% Line 2672
			      call 'erlang':'+'
				  (_cor11, 4)
			  in  %% Line 2672
			      apply 'file_loop_read'/4
				  (Bin, _cor12, _cor2, _cor0)
	      %% Line 2673
	      <{'terms',Bin = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
				#<_cor25>('all',8,'binary',['unsigned'|['big']])}#,Ts}> when 'true' ->
		  let <C> =
		      %% Line 2674
		      ( fun () ->
			    let <_cor13> =
				call 'erlang':'+'
				    (Size, 4)
			    in  apply 'file_loop_read'/4
				    (Bin, _cor13, _cor2, _cor0)
			-| [{'id',{0,0,'-file_loop/4-fun-0-'}}] )
		  in  %% Line 2675
		      apply _cor0
			  (Ts, C)
	      %% Line 2676
	      <{'terms',B,Ts}> when 'true' ->
		  let <C> =
		      %% Line 2677
		      ( fun () ->
			    apply 'file_loop_read'/4
				(B, 65536, _cor2, _cor0)
			-| [{'id',{0,0,'-file_loop/4-fun-1-'}}] )
		  in  %% Line 2678
		      apply _cor0
			  (Ts, C)
	      %% Line 2679
	      <Error> when 'true' ->
		  %% Line 2680
		  Error
	    end
'file_loop2'/2 =
    %% Line 2683
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<Size>(4,8,'integer',['unsigned'|['big']]),
	     #<B>(Size,8,'binary',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#,Ts> when 'true' ->
	      let <_cor2> =
		  %% Line 2684
		  call 'erlang':'binary_to_term'
		      (B)
	      in  %% Line 2684
		  apply 'file_loop2'/2
		      (Bin, [_cor2|Ts])
	  %% Line 2685
	  <Bin,Ts> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  %% Line 2686
		  {'terms',Bin,Ts}
	end
'file_loop_read'/4 =
    %% Line 2694
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <B,MinBytesToRead,Fd_FName = {Fd,FileName},TF> when 'true' ->
	      let <BytesToRead> =
		  %% Line 2695
		  call 'erlang':'max'
		      (65536, MinBytesToRead)
	      in  %% Line 2696
		  case call 'file':'read'
			   (Fd, BytesToRead) of
		    %% Line 2697
		    <{'ok',Bin}>
			when try
			      let <_cor6> =
				  call 'erlang':'byte_size'
				      (B)
			      in  call 'erlang':'=:='
				      (_cor6, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 2698
			apply 'file_loop'/4
			    (Bin, Fd_FName, [], TF)
		    %% Line 2699
		    <{'ok',Bin}> when 'true' ->
			%% Line 2700
			case B of
			  %% Line 2701
			  <#{#<Size>(4,8,'integer',['unsigned'|['big']]),
			     #<Tl>('all',8,'binary',['unsigned'|['big']])}#>
			      when %% Line 2702
				try
				    let <_cor8> =
					call 'erlang':'byte_size'
					    (Bin)
				    in  let <_cor7> =
					    call 'erlang':'byte_size'
						(Tl)
					in  let <_cor9> =
						call 'erlang':'+'
						    (_cor8, _cor7)
					    in  call 'erlang':'>='
						    (_cor9, Size)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      let <_cor10> =
				  %% Line 2703
				  call 'erlang':'byte_size'
				      (Tl)
			      in  let <_cor11> =
				      %% Line 2703
				      call 'erlang':'-'
					  (Size, _cor10)
				  in  %% Line 2703
				      case call 'erlang':'split_binary'
					       (Bin, _cor11) of
					<{B1,B2}> when 'true' ->
					    let <Foo> =
						%% Line 2704
						( fun (_cor14,_cor13) ->
						      case <_cor14,_cor13> of
							<[T|[]],Fun> when 'true' ->
							    [T|Fun]
							( <_cor16,_cor15> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor16,_cor15})
								-| [{'function_name',{'-file_loop_read/4-fun-0-',2}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-file_loop_read/4-fun-0-'}}] )
					    in  let <_cor18> =
						    %% Line 2707
						    call 'erlang':'list_to_binary'
							([B|[B1|[]]])
						in  %% Line 2706
						    case %% Line 2707
							 apply 'file_loop'/4
							     (_cor18, Fd_FName, [], Foo) of
						      %% Line 2709
						      <[T|Fun]> when 'true' ->
							  %% Line 2710
							  case call 'erlang':'is_function'
								   (Fun) of
							    <'true'> when 'true' ->
								%% Line 2711
								apply 'file_loop'/4
								    (B2, Fd_FName, [T|[]], TF)
							    ( <_cor19> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor19})
							      -| ['compiler_generated'] )
							  end
						      %% Line 2712
						      <Error> when 'true' ->
							  %% Line 2713
							  Error
						    end
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
			  %% Line 2715
			  <_cor29> when 'true' ->
			      let <_cor21> =
				  %% Line 2716
				  call 'erlang':'list_to_binary'
				      ([B|[Bin|[]]])
			      in  %% Line 2716
				  apply 'file_loop'/4
				      (_cor21, Fd_FName, [], TF)
			end
		    %% Line 2718
		    <'eof'>
			when try
			      let <_cor23> =
				  call 'erlang':'byte_size'
				      (B)
			      in  call 'erlang':'=:='
				      (_cor23, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 2719
			apply TF
			    ([], 'foo')
		    %% Line 2720
		    <'eof'> when 'true' ->
			%% Line 2721
			apply 'error'/1
			    ({'bad_object',FileName})
		    %% Line 2722
		    <Error> when 'true' ->
			%% Line 2723
			apply 'file_error'/2
			    (FileName, Error)
		  end
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'file_loop_read',4}}] )
	    -| ['compiler_generated'] )
	end
'sort_cursor_input'/2 =
    %% Line 2726
    fun (_cor1,_cor0) ->
	%% Line 2727
	( fun (_cor2) ->
	      case _cor2 of
		<'close'> when 'true' ->
		    %% Line 2728
		    'ok'
		%% Line 2729
		<'read'> when 'true' ->
		    %% Line 2730
		    apply 'sort_cursor_input_read'/2
			(_cor1, _cor0)
		( <_cor3> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor3})
			-| [{'function_name',{'-sort_cursor_input/2-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-sort_cursor_input/2-fun-0-'}}] )
'sort_cursor_list_output'/3 =
    %% Line 2733
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2734
	( fun (_cor11) ->
	      case _cor11 of
		<'close'> when 'true' ->
		    %% Line 2735
		    {'terms',[]}
		%% Line 2736
		<{'value',NoObjects}> when 'true' ->
		    %% Line 2737
		    ( fun (_cor9) ->
			  case _cor9 of
			    <BTerms>
				when let <_cor3> =
				      call 'erlang':'=:='
					  (_cor0, 'true')
				  in  let <_cor5> =
					  try
					      let <_cor4> =
						  call 'erlang':'length'
						      (_cor9)
					      in  call 'erlang':'=:='
						      (_cor4, NoObjects)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false'
				      in  call 'erlang':'or'
					      (_cor3, _cor5) ->
				%% Line 2738
				( fun (_cor7) ->
				      case _cor7 of
					<'close'> when 'true' ->
					    %% Line 2739
					    {'terms',BTerms}
					%% Line 2740
					<BTerms1> when 'true' ->
					    let <_cor6> =
						%% Line 2741
						call 'erlang':'++'
						    (BTerms, BTerms1)
					    in  %% Line 2741
						apply 'sort_cursor_file'/3
						    (_cor6, _cor2, _cor1)
				      end
				  -| [{'id',{0,0,'-sort_cursor_list_output/3-fun-0-'}}] )
			    %% Line 2743
			    <BTerms> when 'true' ->
				%% Line 2744
				apply 'sort_cursor_file'/3
				    (BTerms, _cor2, _cor1)
			  end
		      -| [{'id',{0,0,'-sort_cursor_list_output/3-fun-1-'}}] )
		( <_cor12> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor12})
			-| [{'function_name',{'-sort_cursor_list_output/3-fun-2-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-sort_cursor_list_output/3-fun-2-'}}] )
'sort_cursor_file'/3 =
    %% Line 2748
    fun (_cor2,_cor1,_cor0) ->
	let <FName> =
	    %% Line 2749
	    apply 'tmp_filename'/1
		(_cor1)
	in  %% Line 2750
	    case call 'file':'open'
		     (FName, ['write'|['raw'|['binary'|_cor0]]]) of
	      %% Line 2751
	      <{'ok',Fd}> when 'true' ->
		  let <WFun> =
		      %% Line 2752
		      apply 'write_terms'/2
			  (FName, Fd)
		  in  %% Line 2753
		      apply WFun
			  (_cor2)
	      %% Line 2754
	      <Error> when 'true' ->
		  %% Line 2755
		  apply 'throw_file_error'/2
		      (FName, Error)
	    end
'sort_options_global_tmp'/2 =
    %% Line 2758
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,[]> when 'true' ->
	      %% Line 2759
	      S
	  %% Line 2760
	  <S,TmpDir> when 'true' ->
	      let <_cor2> =
		  %% Line 2761
		  call 'lists':'keydelete'
		      ('tmpdir', 1, S)
	      in  %% Line 2761
		  [{'tmpdir',TmpDir}|_cor2]
	end
'tmp_filename'/1 =
    %% Line 2763
    fun (_cor0) ->
	let <Node> =
	    %% Line 2765
	    call 'erlang':'node'
		()
	in  let <Pid> =
		%% Line 2766
		call 'os':'getpid'
		    ()
	    in  %% Line 2767
		case call 'erlang':'now'
			 () of
		  <{MSecs,Secs,MySecs}> when 'true' ->
		      let <F> =
			  %% Line 2768
			  call 'lists':'concat'
			      (['qlc'|[[95]|[Node|[[95]|[Pid|[[95]|[MSecs|[[95]|[Secs|[[95]|[MySecs|[]]]]]]]]]]]])
		      in  let <_cor8> =
			      %% Line 2769
			      case _cor0 of
				%% Line 2770
				<[]> when 'true' ->
				    %% Line 2771
				    case call 'file':'get_cwd'
					     () of
				      <{'ok',CurDir}> when 'true' ->
					  %% Line 2772
					  CurDir
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor6})
					-| ['compiler_generated'] )
				    end
				%% Line 2773
				<TDir> when 'true' ->
				    %% Line 2774
				    TDir
			      end
			  in  let <_cor10> =
				  %% Line 2776
				  call 'filename':'absname'
				      (_cor8)
			      in  %% Line 2776
				  call 'filename':'join'
				      (_cor10, F)
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'write_terms'/2 =
    %% Line 2778
    fun (_cor1,_cor0) ->
	%% Line 2779
	( fun (_cor6) ->
	      case _cor6 of
		<'close'> when 'true' ->
		    let <_X_> =
			%% Line 2780
			( call 'file':'close'
			      (_cor0)
			  -| ['result_not_wanted'] )
		    in  %% Line 2781
			{'file',_cor1}
		%% Line 2782
		<BTerms> when 'true' ->
		    let <_cor3> =
			%% Line 2783
			apply 'size_bin'/2
			    (BTerms, [])
		    in  %% Line 2783
			case call 'file':'write'
				 (_cor0, _cor3) of
			  %% Line 2784
			  <'ok'> when 'true' ->
			      %% Line 2785
			      apply 'write_terms'/2
				  (_cor1, _cor0)
			  %% Line 2786
			  <Error> when 'true' ->
			      let <_X_> =
				  %% Line 2787
				  ( call 'file':'close'
					(_cor0)
				    -| ['result_not_wanted'] )
			      in  %% Line 2788
				  apply 'throw_file_error'/2
				      (_cor1, Error)
			end
	      end
	  -| [{'id',{0,0,'-write_terms/2-fun-0-'}}] )
'size_bin'/2 =
    %% Line 2792
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],L> when 'true' ->
	      %% Line 2793
	      L
	  %% Line 2794
	  <[BinTerm|BinTerms],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2795
		  call 'erlang':'byte_size'
		      (BinTerm)
	      in  let <_cor3> =
		      %% Line 2795
		      #{#<_cor2>(4,8,'integer',['unsigned'|['big']])}#
		  in  %% Line 2795
		      apply 'size_bin'/2
			  (BinTerms, [L|[_cor3|BinTerm]])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'size_bin',2}}] )
	    -| ['compiler_generated'] )
	end
'sort_cursor_input_read'/2 =
    %% Line 2797
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],NoObjects> when 'true' ->
	      %% Line 2798
	      {'end_of_input',NoObjects}
	  %% Line 2799
	  <[Object|Cont],NoObjects> when 'true' ->
	      let <_cor4> =
		  %% Line 2800
		  call 'erlang':'term_to_binary'
		      (Object)
	      in  let <_cor2> =
		      %% Line 2800
		      call 'erlang':'+'
			  (NoObjects, 1)
		  in  let <_cor3> =
			  %% Line 2800
			  apply 'sort_cursor_input'/2
			      (Cont, _cor2)
		      in  %% Line 2800
			  {[_cor4|[]],_cor3}
	  %% Line 2801
	  <F,NoObjects> when 'true' ->
	      %% Line 2802
	      case apply F
		       () of
		%% Line 2803
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 2804
		    apply 'sort_cursor_input_read'/2
			(Objects, NoObjects)
		%% Line 2805
		<Term> when 'true' ->
		    %% Line 2806
		    apply 'throw_error'/1
			(Term)
	      end
	end
'unique_cache'/4 =
    %% Line 2809
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L,Post,LocalPost,Optz>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 2810
	      ( case Optz of
		  ( <( {'optz',_rec90,_cor56,_cor57,_cor58,_cor59}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec90 of
			  %% Line 2811
			  <'true'> when 'true' ->
			      let <_cor6> =
				  %% Line 2812
				  apply 'unique_sort_list'/1
				      (L)
			      in  %% Line 2812
				  {_cor6,Post,LocalPost}
			  %% Line 2813
			  <'false'> when 'true' ->
			      %% Line 2815
			      {L,Post,LocalPost}
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor60> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','optz'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2817
	  <H,Post,LocalPost,{'optz','false','false',_cor61,_cor62,_cor63}> when 'true' ->
	      %% Line 2818
	      {H,Post,LocalPost}
	  %% Line 2819
	  <H,Post,LocalPost,{'optz','true','false',_cor64,_cor65,_cor66}> when 'true' ->
	      let <E> =
		  %% Line 2820
		  call 'ets':'new'
		      ('qlc', ['set'|['private']])
	      in  let <_cor10> =
		      %% Line 2821
		      ( fun () ->
			    apply 'no_dups'/2
				(H, E)
			-| [{'id',{0,0,'-unique_cache/4-fun-0-'}}] )
		  in  let <_cor9> =
			  %% Line 2821
			  apply 'del_table'/1
			      (E)
		      in  %% Line 2821
			  {_cor10,[_cor9|Post],LocalPost}
	  %% Line 2822
	  <H,Post,LocalPost,{'optz','false','true',_cor67,_cor68,_cor69}> when 'true' ->
	      let <E> =
		  %% Line 2823
		  call 'ets':'new'
		      ('qlc', ['set'|['private']])
	      in  %% Line 2824
		  case apply 'unique_cache_post'/1
			   (E) of
		    <{L,P}> when 'true' ->
			let <_cor13> =
			    %% Line 2825
			    ( fun () ->
				  apply 'cache'/3
				      (H, E, LocalPost)
			      -| [{'id',{0,0,'-unique_cache/4-fun-1-'}}] )
			in  %% Line 2825
			    {_cor13,[P|Post],[L|[]]}
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2826
	  <H,Post,LocalPost,{'optz','true','true',_cor70,_cor71,_cor72}> when 'true' ->
	      let <UT> =
		  %% Line 2827
		  call 'ets':'new'
		      ('qlc', ['bag'|['private']])
	      in  let <MT> =
		      %% Line 2828
		      call 'ets':'new'
			  ('qlc', ['set'|['private']])
		  in  %% Line 2829
		      case apply 'unique_cache_post'/1
			       (UT) of
			<{L1,P1}> when 'true' ->
			    %% Line 2830
			    case apply 'unique_cache_post'/1
				     (MT) of
			      <{L2,P2}> when 'true' ->
				  let <_cor18> =
				      %% Line 2831
				      ( fun () ->
					    apply 'ucache'/4
						(H, UT, MT, LocalPost)
					-| [{'id',{0,0,'-unique_cache/4-fun-2-'}}] )
				  in  %% Line 2831
				      {_cor18,[P1|[P2|Post]],[L1|[L2|[]]]}
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor17})
				-| ['compiler_generated'] )
			    end
			( <_cor16> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor16})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2832
	  <H,Post,LocalPost,Optz = {'optz','false','list',_cor73,_cor74,_cor75}> when 'true' ->
	      let <Ref> =
		  %% Line 2833
		  call 'erlang':'make_ref'
		      ()
	      in  let <F> =
		      %% Line 2834
		      apply 'del_lcache'/1
			  (Ref)
		  in  %% Line 2835
		      case _cor75 of
			<{'qlc_opt',_cor81,_cor82,_cor83,_cor84,TmpDir,_cor85,MaxList,TmpUsage}> when 'true' ->
			    let <_cor24> =
				%% Line 2837
				( fun () ->
				      apply 'lcache'/6
					  (H, Ref, LocalPost, TmpDir, MaxList, TmpUsage)
				  -| [{'id',{0,0,'-unique_cache/4-fun-3-'}}] )
			    in  %% Line 2837
				{_cor24,%% Line 2838
					[F|Post],%% Line 2838
						 [F|[]]}
			( <_cor23> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor23})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2839
	  <H,Post0,LocalPost0,Optz = {'optz','true','list',_cor86,_cor87,_cor88}> when 'true' ->
	      %% Line 2840
	      case _cor88 of
		<{'qlc_opt',_cor94,_cor95,_cor96,_cor97,TmpDir,_cor98,MaxList,TmpUsage}> when 'true' ->
		    let <_cor30> =
			%% Line 2842
			case <> of
			  %% Line 2843
			  <>
			      when call 'erlang':'>='
				    (MaxList,
				     2147483648) ->
			      2147483647
			  %% Line 2844
			  <>
			      when call 'erlang':'=:='
				    (MaxList,
				     0) ->
			      1
			  %% Line 2845
			  <> when 'true' ->
			      MaxList
			end
		    in  let <SortOptions> =
			    %% Line 2847
			    [{'size',_cor30}|[{'tmpdir',TmpDir}|[]]]
			in  let <USortOptions> =
				%% Line 2848
				[{'unique','true'}|SortOptions]
			    in  let <TmpUsageM> = {%% Line 2849
				     TmpUsage,%% Line 2849
					      'caching'}
				in  let <LF1> =
					%% Line 2850
					( fun (_cor35) ->
					      call 'lists':'ukeysort'
						  (1, _cor35)
					  -| [{'id',{0,0,'-unique_cache/4-fun-4-'}}] )
				    in  let <FF1> =
					    %% Line 2851
					    ( fun (_cor38) ->
						  %% Line 2852
						  apply 'file_sort_handle'/7
						      (_cor38, {'keysort',1}, USortOptions, %% Line 2853
											    TmpDir, %% Line 2853
												    [], %% Line 2853
													Post0, %% Line 2853
													       LocalPost0)
					      -| [{'id',{0,0,'-unique_cache/4-fun-5-'}}] )
					in  let <_cor41> =
						%% Line 2855
						apply 'tag_objects'/2
						    (H, 1)
					    in  %% Line 2855
						case apply 'sort_handle'/7
							 (_cor41, LF1, FF1, %% Line 2856
									    USortOptions, %% Line 2856
											  Post0, %% Line 2856
												 LocalPost0, %% Line 2857
													     TmpUsageM) of
						  <{UH,Post1,LocalPost1}> when 'true' ->
						      let <LF2> =
							  %% Line 2858
							  ( fun (_cor43) ->
								call 'lists':'keysort'
								    (2, _cor43)
							    -| [{'id',{0,0,'-unique_cache/4-fun-6-'}}] )
						      in  let <FF2> =
							      %% Line 2859
							      ( fun (_cor46) ->
								    %% Line 2860
								    apply 'file_sort_handle'/7
									(_cor46, {'keysort',2}, SortOptions, TmpDir, %% Line 2861
														     [], %% Line 2861
															 Post1, %% Line 2861
																LocalPost1)
								-| [{'id',{0,0,'-unique_cache/4-fun-7-'}}] )
							  in  %% Line 2863
							      case %% Line 2864
								   apply 'sort_handle'/7
								       (UH, LF2, FF2, SortOptions, Post1, LocalPost1, TmpUsageM) of
								<{SH,Post,LocalPost}> when 'true' ->
								    %% Line 2865
								    case <> of
								      %% Line 2866
								      <>
									  when call 'erlang':'is_list'
										(SH) ->
									  let <_cor50> =
									      %% Line 2868
									      apply 'untag_objects2'/1
										  (SH)
									  in  %% Line 2868
									      {_cor50,Post,LocalPost}
								      %% Line 2869
								      <> when 'true' ->
									  let <_cor51> =
									      %% Line 2871
									      ( fun () ->
										    apply 'untag_objects'/1
											(SH)
										-| [{'id',{0,0,'-unique_cache/4-fun-8-'}}] )
									  in  %% Line 2871
									      {_cor51,Post,LocalPost}
								    end
								( <_cor49> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor49})
								  -| ['compiler_generated'] )
							      end
						  ( <_cor42> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor42})
						    -| ['compiler_generated'] )
						end
		( <_cor27> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor27})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor55,_cor54,_cor53,_cor52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor55,_cor54,_cor53,_cor52})
		  -| [{'function_name',{'unique_cache',4}}] )
	    -| ['compiler_generated'] )
	end
'unique_cache_post'/1 =
    %% Line 2874
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2875
	    apply 'empty_table'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 2875
		apply 'del_table'/1
		    (_cor0)
	    in  %% Line 2875
		{_cor2,_cor1}
'unique_sort_list'/1 =
    %% Line 2877
    fun (_cor0) ->
	let <E> =
	    %% Line 2878
	    call 'ets':'new'
		('qlc', ['set'|['private']])
	in  %% Line 2879
	    apply 'unique_list'/2
		(_cor0, E)
'unique_list'/2 =
    %% Line 2881
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],E> when 'true' ->
	      %% Line 2882
	      case call 'ets':'delete'
		       (E) of
		<'true'> when 'true' ->
		    %% Line 2883
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2884
	  <[Object|Objects],E> when 'true' ->
	      %% Line 2885
	      case call 'ets':'member'
		       (E, Object) of
		%% Line 2886
		<'false'> when 'true' ->
		    %% Line 2887
		    case call 'ets':'insert'
			     (E, {Object}) of
		      <'true'> when 'true' ->
			  let <_cor4> =
			      %% Line 2888
			      apply 'unique_list'/2
				  (Objects, E)
			  in  %% Line 2888
			      [Object|_cor4]
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 2889
		<'true'> when 'true' ->
		    %% Line 2890
		    apply 'unique_list'/2
			(Objects, E)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'unique_list',2}}] )
	    -| ['compiler_generated'] )
	end
'sort_list'/6 =
    %% Line 2893
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,CFun,'true','sort',_X_SortOptions,_X_Post>
	      when call 'erlang':'is_function'
		    (CFun) ->
	      %% Line 2894
	      call 'lists':'usort'
		  (CFun, L)
	  %% Line 2895
	  <L,CFun,'false','sort',_X_SortOptions,_X_Post>
	      when call 'erlang':'is_function'
		    (CFun) ->
	      %% Line 2896
	      call 'lists':'sort'
		  (CFun, L)
	  %% Line 2897
	  <L,'ascending','true','sort',_X_SortOptions,_X_Post> when 'true' ->
	      %% Line 2898
	      call 'lists':'usort'
		  (L)
	  %% Line 2899
	  <L,'descending','true','sort',_X_SortOptions,_X_Post> when 'true' ->
	      let <_cor6> =
		  %% Line 2900
		  call 'lists':'usort'
		      (L)
	      in  %% Line 2900
		  call 'lists':'reverse'
		      (_cor6)
	  %% Line 2901
	  <L,'ascending','false','sort',_X_SortOptions,_X_Post> when 'true' ->
	      %% Line 2902
	      call 'lists':'sort'
		  (L)
	  %% Line 2903
	  <L,'descending','false','sort',_X_SortOptions,_X_Post> when 'true' ->
	      let <_cor7> =
		  %% Line 2904
		  call 'lists':'sort'
		      (L)
	      in  %% Line 2904
		  call 'lists':'reverse'
		      (_cor7)
	  %% Line 2905
	  <L,Order,Unique,{'keysort',Kp},_X_SortOptions,_X_Post>
	      when let <_cor8> =
		    %% Line 2906
		    call 'erlang':'is_integer'
			(Kp)
		in  let <_cor9> =
			%% Line 2906
			call 'erlang':'is_atom'
			    (Order)
		    in  %% Line 2906
			call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 2907
	      case <Order,Unique> of
		%% Line 2908
		<'ascending','true'> when 'true' ->
		    %% Line 2909
		    call 'lists':'ukeysort'
			(Kp, L)
		%% Line 2910
		<'ascending','false'> when 'true' ->
		    %% Line 2911
		    call 'lists':'keysort'
			(Kp, L)
		%% Line 2912
		<'descending','true'> when 'true' ->
		    let <_cor10> =
			%% Line 2913
			call 'lists':'ukeysort'
			    (Kp, L)
		    in  %% Line 2913
			call 'lists':'reverse'
			    (_cor10)
		%% Line 2914
		<'descending','false'> when 'true' ->
		    let <_cor11> =
			%% Line 2915
			call 'lists':'keysort'
			    (Kp, L)
		    in  %% Line 2915
			call 'lists':'reverse'
			    (_cor11)
		( <_fol1256,_fol1257> when 'true' ->
		      let <_cor12> = {_fol1256,_fol1257}
		      in  primop 'match_fail'
			      ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2917
	  <L,_X_Order,_X_Unique,Sort,SortOptions,Post> when 'true' ->
	      let <In> =
		  %% Line 2918
		  ( fun (_cor16) ->
			let <_cor15> =
			    ( fun (_cor13) ->
				  'end_of_input'
			      -| [{'id',{0,0,'-sort_list/6-fun-0-'}}] )
			in  {L,_cor15}
		    -| [{'id',{0,0,'-sort_list/6-fun-1-'}}] )
	      in  let <Out> =
		      %% Line 2919
		      apply 'sort_list_output'/1
			  ([])
		  in  let <TSortOptions> =
			  %% Line 2920
			  [{'format','term'}|SortOptions]
		      in  %% Line 2921
			  apply 'do_sort'/5
			      (In, Out, Sort, TSortOptions, Post)
	end
'sort_list_output'/1 =
    %% Line 2923
    fun (_cor0) ->
	%% Line 2924
	( fun (_cor2) ->
	      case _cor2 of
		<'close'> when 'true' ->
		    let <_cor1> =
			%% Line 2925
			call 'lists':'reverse'
			    (_cor0)
		    in  %% Line 2925
			call 'lists':'append'
			    (_cor1)
		%% Line 2926
		<Terms>
		    when call 'erlang':'is_list'
			  (_cor2) ->
		    %% Line 2927
		    apply 'sort_list_output'/1
			([Terms|_cor0])
		( <_cor3> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor3})
			-| [{'function_name',{'-sort_list_output/1-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-sort_list_output/1-fun-0-'}}] )
'sort_handle'/7 =
    %% Line 2932
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 2933
	    case call 'lists':'keyfind'
		     ('size', 1, _cor3) of
	      %% Line 2934
	      <{'size',Size0}> when 'true' ->
		  Size0
	      %% Line 2935
	      <'false'> when 'true' ->
		  apply 'default_option'/1
		      ('size')
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
	in  %% Line 2937
	    apply 'sort_cache'/4
		(_cor6, [], _cor8, {_cor5,_cor4,_cor2,_cor1,_cor0})
'sort_cache'/4 =
    %% Line 2939
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],CL,_X_Sz,{LF,_X_FF,Post,LocalPost,_X_TmpUsageM}> when 'true' ->
	      let <_cor4> =
		  %% Line 2940
		  call 'lists':'reverse'
		      (CL)
	      in  let <_cor5> =
		      %% Line 2940
		      apply LF
			  (_cor4)
		  in  %% Line 2940
		      {_cor5,Post,LocalPost}
	  %% Line 2941
	  <Objs,CL,Sz,C>
	      when call 'erlang':'<'
		    (Sz,
		     0) ->
	      %% Line 2942
	      apply 'sort_cache2'/4
		  (Objs, CL, 'false', C)
	  %% Line 2943
	  <[Object|Cont],CL,Sz0,C> when 'true' ->
	      let <Sz> =
		  %% Line 2944
		  apply 'decr_list_size'/2
		      (Sz0, Object)
	      in  %% Line 2945
		  apply 'sort_cache'/4
		      (Cont, [Object|CL], Sz, C)
	  %% Line 2946
	  <F,CL,Sz,C> when 'true' ->
	      %% Line 2947
	      case apply F
		       () of
		%% Line 2948
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 2949
		    apply 'sort_cache'/4
			(Objects, CL, Sz, C)
		%% Line 2950
		<Term> when 'true' ->
		    %% Line 2951
		    case C of
		      <{_X_LF,_X_FF,Post,_X_LocalPost,_X_TmpUsageM}> when 'true' ->
			  do  %% Line 2952
			      apply 'post_funs'/1
				  (Post)
			      %% Line 2953
			      apply 'throw_error'/1
				  (Term)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
	      end
	end
'sort_cache2'/4 =
    %% Line 2956
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],CL,_X_X,{LF,_X_FF,Post,LocalPost,_X_TmpUsageM}> when 'true' ->
	      let <_cor4> =
		  %% Line 2957
		  call 'lists':'reverse'
		      (CL)
	      in  let <_cor5> =
		      %% Line 2957
		      apply LF
			  (_cor4)
		  in  %% Line 2957
		      {_cor5,Post,LocalPost}
	  %% Line 2958
	  <[Object|Cont],CL,_cor13,C> when 'true' ->
	      %% Line 2959
	      apply 'sort_cache2'/4
		  (Cont, [Object|CL], 'true', C)
	  %% Line 2960
	  <F,CL,'false',C> when 'true' ->
	      %% Line 2964
	      case apply F
		       () of
		%% Line 2965
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 2966
		    apply 'sort_cache2'/4
			(Objects, CL, 'true', C)
		%% Line 2967
		<Term> when 'true' ->
		    %% Line 2968
		    case C of
		      <{_X_LF,_X_FF,Post,_X_LocalPost,_X_TmpUsageM}> when 'true' ->
			  do  %% Line 2969
			      apply 'post_funs'/1
				  (Post)
			      %% Line 2970
			      apply 'throw_error'/1
				  (Term)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 2972
	  <_X_Cont,_X_CL,'true',{_X_LF,_X_FF,Post,_X_LocalPost,{'not_allowed',M}}> when 'true' ->
	      do  %% Line 2973
		  apply 'post_funs'/1
		      (Post)
		  %% Line 2974
		  apply 'throw_reason'/1
		      ({'tmpdir_usage',M})
	  %% Line 2975
	  <Cont,CL,'true',{_X_LF,FF,_X_Post,_X_LocalPost,{TmpUsage,M}}> when 'true' ->
	      do  %% Line 2976
		  apply 'maybe_error_logger'/2
		      (TmpUsage, M)
		  let <_cor8> =
		      %% Line 2977
		      call 'lists':'reverse'
			  (CL, Cont)
		  in  %% Line 2977
		      apply FF
			  (_cor8)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'sort_cache2',4}}] )
	    -| ['compiler_generated'] )
	end
'file_sort_handle'/7 =
    %% Line 2979
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <In> =
	    %% Line 2980
	    apply 'sort_cursor_input'/2
		(_cor6, 0)
	in  let <_cor10> =
		%% Line 2982
		( case call 'lists':'member'
			   ('unique', _cor4) of
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  'true'
		      -| ['compiler_generated'] )
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  %% Line 2983
			  call 'lists':'keymember'
			      ('unique', 1, _cor4)
		      -| ['compiler_generated'] )
		    ( <_cor8> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_cor8}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    in  let <Out> =
		    %% Line 2984
		    apply 'sort_cursor_list_output'/3
			(_cor3, _cor2, _cor10)
		in  %% Line 2986
		    case apply 'do_sort'/5
			     (In, Out, _cor5, _cor4, _cor1) of
		      %% Line 2987
		      <{'file',FileName}> when 'true' ->
			  %% Line 2988
			  case apply 'open_file'/3
				   (FileName, _cor2, _cor1) of
			    <{F,Fd}> when 'true' ->
				let <P> =
				    %% Line 2989
				    ( fun () ->
					  let <_X_> =
					      ( call 'file':'close'
						    (Fd)
						-| ['result_not_wanted'] )
					  in  %% Line 2990
					      ( call 'file':'delete'
						    (FileName)
						-| ['result_not_wanted'] )
				      -| [{'id',{0,0,'-file_sort_handle/7-fun-0-'}}] )
				in  %% Line 2992
				    {F,[P|_cor1],_cor0}
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2993
		      <{'terms',BTerms}> when 'true' ->
			  %% Line 2994
			  try
			      let <_cor23> =
				  %% Line 2995
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor20) ->
						case _cor20 of
						  <[B|_cor19]> when 'true' ->
						      let <_cor21> =
							  call 'erlang':'binary_to_term'
							      (B)
						      in  let <_cor22> =
							      apply 'lc$^0'/1
								  (_cor19)
							  in  ( [_cor21|_cor22]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor20> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor20})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (BTerms)
				    -| ['list_comprehension'] )
			      in  %% Line 2995
				  {_cor23,_cor1,_cor0}
			  of <_cor24> ->
			      _cor24
			  catch <_cor27,_cor26,_cor25> ->
			      do  %% Line 2997
				  apply 'post_funs'/1
				      (_cor1)
				  let <_cor28> =
				      %% Line 2998
				      call 'erlang':'get_stacktrace'
					  ()
				  in  %% Line 2998
				      call 'erlang':'raise'
					  (_cor27, _cor26, _cor28)
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor29})
			-| ['compiler_generated'] )
		    end
'do_sort'/5 =
    %% Line 3002
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3003
	try
	    %% Line 3004
	    case apply 'do_sort'/4
		     (_cor4, _cor3, _cor2, _cor1) of
	      %% Line 3005
	      <{'error',Reason}> when 'true' ->
		  apply 'throw_reason'/1
		      (Reason)
	      %% Line 3006
	      <Reply> when 'true' ->
		  Reply
	    end
	of <_cor6> ->
	    _cor6
	catch <_cor9,_cor8,_cor7> ->
	    do  %% Line 3009
		apply 'post_funs'/1
		    (_cor0)
		let <_cor10> =
		    %% Line 3010
		    call 'erlang':'get_stacktrace'
			()
		in  %% Line 3010
		    call 'erlang':'raise'
			(_cor9, _cor8, _cor10)
'do_sort'/4 =
    %% Line 3013
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <In,Out,'sort',SortOptions> when 'true' ->
	      %% Line 3014
	      call 'file_sorter':'sort'
		  (In, Out, SortOptions)
	  %% Line 3015
	  <In,Out,{'keysort',KeyPos},SortOptions> when 'true' ->
	      %% Line 3016
	      call 'file_sorter':'keysort'
		  (KeyPos, In, Out, SortOptions)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'do_sort',4}}] )
	    -| ['compiler_generated'] )
	end
'del_table'/1 =
    %% Line 3018
    fun (_cor0) ->
	%% Line 3019
	( fun () ->
	      let <_cor3> =
		  call 'ets':'delete'
		      (_cor0)
	      in  case _cor3 of
		    <'true'> when 'true' ->
			( _cor3
			  -| ['compiler_generated'] )
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-del_table/1-fun-0-'}}] )
'empty_table'/1 =
    %% Line 3021
    fun (_cor0) ->
	%% Line 3022
	( fun () ->
	      let <_cor3> =
		  call 'ets':'delete_all_objects'
		      (_cor0)
	      in  case _cor3 of
		    <'true'> when 'true' ->
			( _cor3
			  -| ['compiler_generated'] )
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-empty_table/1-fun-0-'}}] )
'append_loop'/2 =
    %% Line 3024
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[L = [_cor4|_cor5]|[]],_X_N> when 'true' ->
	      %% Line 3025
	      L
	  %% Line 3026
	  <[F|[]],_X_N> when 'true' ->
	      %% Line 3027
	      apply F
		  ()
	  %% Line 3028
	  <[L|Hs],N> when 'true' ->
	      %% Line 3029
	      apply 'append_loop'/3
		  (L, N, Hs)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'append_loop',2}}] )
	    -| ['compiler_generated'] )
	end
'append_loop'/3 =
    %% Line 3031
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],N,Hs> when 'true' ->
	      %% Line 3032
	      apply 'append_loop'/2
		  (Hs, N)
	  %% Line 3033
	  <[Object|Cont],N,Hs> when 'true' ->
	      let <_cor3> =
		  %% Line 3034
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor4> =
		      %% Line 3034
		      apply 'append_loop'/3
			  (Cont, _cor3, Hs)
		  in  %% Line 3034
		      [Object|_cor4]
	  %% Line 3035
	  <F,0,Hs> when 'true' ->
	      %% Line 3036
	      case apply F
		       () of
		%% Line 3037
		<[]> when 'true' ->
		    %% Line 3038
		    apply 'append_loop'/2
			(Hs, 0)
		%% Line 3039
		<[Object|Cont]> when 'true' ->
		    let <_cor5> =
			%% Line 3040
			apply 'append_loop'/3
			    (Cont, 1, Hs)
		    in  %% Line 3040
			[Object|_cor5]
		%% Line 3041
		<Term> when 'true' ->
		    %% Line 3042
		    Term
	      end
	  %% Line 3044
	  <F,_X_N,Hs> when 'true' ->
	      %% Line 3045
	      ( fun () ->
		    apply 'append_loop'/3
			(F, 0, Hs)
		-| [{'id',{0,0,'-append_loop/3-fun-0-'}}] )
	end
'no_dups'/2 =
    %% Line 3047
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cont = [],UTab> when 'true' ->
	      %% Line 3048
	      case call 'ets':'delete_all_objects'
		       (UTab) of
		<'true'> when 'true' ->
		    %% Line 3049
		    Cont
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3050
	  <[Object|Cont],UTab> when 'true' ->
	      %% Line 3051
	      case call 'ets':'member'
		       (UTab, Object) of
		%% Line 3052
		<'false'> when 'true' ->
		    %% Line 3053
		    case call 'ets':'insert'
			     (UTab, {Object}) of
		      <'true'> when 'true' ->
			  let <_cor4> =
			      %% Line 3056
			      ( fun () ->
				    apply 'no_dups'/2
					(Cont, UTab)
				-| [{'id',{0,0,'-no_dups/2-fun-0-'}}] )
			  in  %% Line 3056
			      [Object|_cor4]
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 3057
		<'true'> when 'true' ->
		    %% Line 3058
		    apply 'no_dups'/2
			(Cont, UTab)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3060
	  <F,UTab> when 'true' ->
	      %% Line 3061
	      case apply F
		       () of
		%% Line 3062
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3063
		    apply 'no_dups'/2
			(Objects, UTab)
		%% Line 3064
		<Term> when 'true' ->
		    %% Line 3065
		    Term
	      end
	end
'cache'/3 =
    %% Line 3072
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3073
	case call 'ets':'member'
		 (_cor1, 0) of
	  %% Line 3074
	  <'false'> when 'true' ->
	      %% Line 3075
	      case call 'ets':'insert'
		       (_cor1, {0}) of
		<'true'> when 'true' ->
		    %% Line 3076
		    apply 'cache'/4
			(_cor2, _cor1, 1, _cor0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3077
	  <'true'> when 'true' ->
	      %% Line 3078
	      apply 'cache_recall'/2
		  (_cor1, 1)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'cache'/4 =
    %% Line 3081
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Cont = [],_X_MTab,_X_SeqNo,LocalPost> when 'true' ->
	      do  %% Line 3082
		  apply 'local_post'/1
		      (LocalPost)
		  %% Line 3083
		  Cont
	  %% Line 3084
	  <[Object|Cont],MTab,SeqNo,LocalPost> when 'true' ->
	      %% Line 3085
	      case call 'ets':'insert'
		       (MTab, {SeqNo,Object}) of
		<'true'> when 'true' ->
		    let <_cor6> =
			%% Line 3088
			( fun () ->
			      let <_cor5> =
				  call 'erlang':'+'
				      (SeqNo, 1)
			      in  apply 'cache'/4
				      (Cont, MTab, _cor5, LocalPost)
			  -| [{'id',{0,0,'-cache/4-fun-0-'}}] )
		    in  %% Line 3088
			[Object|_cor6]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3089
	  <F,MTab,SeqNo,LocalPost> when 'true' ->
	      %% Line 3090
	      case apply F
		       () of
		%% Line 3091
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3092
		    apply 'cache'/4
			(Objects, MTab, SeqNo, LocalPost)
		%% Line 3093
		<Term> when 'true' ->
		    %% Line 3094
		    Term
	      end
	end
'cache_recall'/2 =
    %% Line 3097
    fun (_cor1,_cor0) ->
	%% Line 3098
	case call 'ets':'lookup'
		 (_cor1, _cor0) of
	  %% Line 3099
	  <Cont = []> when 'true' ->
	      %% Line 3100
	      Cont
	  %% Line 3101
	  <[{_cor7,Object}|[]]>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor0) ->
	      let <_cor3> =
		  %% Line 3102
		  ( fun () ->
			let <_cor2> =
			    call 'erlang':'+'
				(_cor0, 1)
			in  apply 'cache_recall'/2
				(_cor1, _cor2)
		    -| [{'id',{0,0,'-cache_recall/2-fun-0-'}}] )
	      in  %% Line 3102
		  [Object|_cor3]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'ucache'/4 =
    %% Line 3105
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3106
	case call 'ets':'member'
		 (_cor1, 0) of
	  %% Line 3107
	  <'false'> when 'true' ->
	      %% Line 3108
	      case call 'ets':'insert'
		       (_cor1, {0}) of
		<'true'> when 'true' ->
		    %% Line 3109
		    apply 'ucache'/5
			(_cor3, _cor2, _cor1, 1, _cor0)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3110
	  <'true'> when 'true' ->
	      %% Line 3111
	      apply 'ucache_recall'/3
		  (_cor2, _cor1, 1)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'ucache'/5 =
    %% Line 3114
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Cont = [],_X_UTab,_X_MTab,_X_SeqNo,LocalPost> when 'true' ->
	      do  %% Line 3115
		  apply 'local_post'/1
		      (LocalPost)
		  %% Line 3116
		  Cont
	  %% Line 3117
	  <[Object|Cont],UTab,MTab,SeqNo,LocalPost> when 'true' ->
	      let <Hash> =
		  %% Line 3119
		  call 'erlang':'phash2'
		      (Object)
	      in  %% Line 3120
		  case call 'ets':'lookup'
			   (UTab, Hash) of
		    %% Line 3121
		    <[]> when 'true' ->
			%% Line 3122
			apply 'ucache3'/7
			    (Object, Cont, Hash, UTab, MTab, SeqNo, LocalPost)
		    %% Line 3123
		    <HashSeqObjects> when 'true' ->
			%% Line 3124
			case call 'lists':'keymember'
				 (Object, 3, HashSeqObjects) of
			  %% Line 3125
			  <'true'> when 'true' ->
			      %% Line 3126
			      apply 'ucache'/5
				  (Cont, UTab, MTab, SeqNo, LocalPost)
			  %% Line 3127
			  <'false'> when 'true' ->
			      %% Line 3128
			      apply 'ucache3'/7
				  (Object, Cont, Hash, UTab, MTab, SeqNo, LocalPost)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 3131
	  <F,UTab,MTab,SeqNo,LocalPost> when 'true' ->
	      %% Line 3132
	      case apply F
		       () of
		%% Line 3133
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3134
		    apply 'ucache'/5
			(Objects, UTab, MTab, SeqNo, LocalPost)
		%% Line 3135
		<Term> when 'true' ->
		    %% Line 3136
		    Term
	      end
	end
'ucache3'/7 =
    %% Line 3139
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3140
	case call 'ets':'insert'
		 (_cor3, {_cor4,_cor1,_cor6}) of
	  <'true'> when 'true' ->
	      %% Line 3141
	      case call 'ets':'insert'
		       (_cor2, {_cor1,_cor4}) of
		<'true'> when 'true' ->
		    let <_cor10> =
			%% Line 3144
			( fun () ->
			      let <_cor9> =
				  call 'erlang':'+'
				      (_cor1, 1)
			      in  apply 'ucache'/5
				      (_cor5, _cor3, _cor2, _cor9, _cor0)
			  -| [{'id',{0,0,'-ucache3/7-fun-0-'}}] )
		    in  %% Line 3144
			[_cor6|_cor10]
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'ucache_recall'/3 =
    %% Line 3146
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3147
	case call 'ets':'lookup'
		 (_cor1, _cor0) of
	  %% Line 3148
	  <Cont = []> when 'true' ->
	      %% Line 3149
	      Cont
	  %% Line 3150
	  <[{_cor13,Hash}|[]]>
	      when call 'erlang':'=:='
		    (_cor13,
		     _cor0) ->
	      let <_cor5> =
		  %% Line 3151
		  case call 'ets':'lookup'
			   (_cor2, Hash) of
		    %% Line 3152
		    <[{_cor14,_cor15,Object0}|[]]>
			when let <_cor16> =
			      call 'erlang':'=:='
				  (_cor14, Hash)
			  in  let <_cor17> =
				  call 'erlang':'=:='
				      (_cor15, _cor0)
			      in  call 'erlang':'and'
				      (_cor16, _cor17) ->
			Object0
		    %% Line 3153
		    <HashSeqObjects> when 'true' ->
			%% Line 3154
			case %% Line 3155
			     call 'lists':'keyfind'
				 (_cor0, 2, HashSeqObjects) of
			  <{_cor18,_cor19,Object0}>
			      when let <_cor20> =
				    call 'erlang':'=:='
					(_cor18, Hash)
				in  let <_cor21> =
					call 'erlang':'=:='
					    (_cor19, _cor0)
				    in  call 'erlang':'and'
					    (_cor20, _cor21) ->
			      %% Line 3156
			      Object0
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		  end
	      in  let <_cor8> =
		      %% Line 3158
		      ( fun () ->
			    let <_cor7> =
				call 'erlang':'+'
				    (_cor0, 1)
			    in  apply 'ucache_recall'/3
				    (_cor2, _cor1, _cor7)
			-| [{'id',{0,0,'-ucache_recall/3-fun-0-'}}] )
		  in  %% Line 3158
		      [_cor5|_cor8]
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'lcache'/6 =
    %% Line 3163
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Key> = {_cor4,%% Line 3164
		   '$_qlc_cache_tmpfiles_'}
	in  %% Line 3165
	    case call 'erlang':'get'
		     (Key) of
	      %% Line 3166
	      <'undefined'> when 'true' ->
		  %% Line 3167
		  apply 'lcache1'/4
		      (_cor5, {Key,_cor3,_cor2,_cor1,_cor0}, _cor1, %% Line 3168
								    [])
	      %% Line 3169
	      <{'file',_X_Fd,_X_TmpFile,F}> when 'true' ->
		  %% Line 3170
		  apply F
		      ()
	      %% Line 3171
	      <L>
		  when call 'erlang':'is_list'
			(L) ->
		  %% Line 3172
		  L
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
'lcache1'/4 =
    %% Line 3175
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Cont = [],{Key,LocalPost,_X_TmpDir,_X_MaxList,_X_TmpUsage},_X_Sz,Acc> when 'true' ->
	      do  %% Line 3176
		  apply 'local_post'/1
		      (LocalPost)
		  %% Line 3177
		  case call 'erlang':'get'
			   (Key) of
		    %% Line 3178
		    <'undefined'> when 'true' ->
			let <_cor4> =
			    %% Line 3179
			    call 'lists':'reverse'
				(Acc)
			in  do  %% Line 3179
				call 'erlang':'put'
				    (Key, _cor4)
				%% Line 3180
				Cont
		    %% Line 3181
		    <{'file',Fd,TmpFile,_X_F}> when 'true' ->
			%% Line 3182
			case apply 'lcache_write'/3
				 (Fd, TmpFile, Acc) of
			  %% Line 3183
			  <'ok'> when 'true' ->
			      %% Line 3184
			      Cont
			  %% Line 3185
			  <Error> when 'true' ->
			      %% Line 3186
			      Error
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3189
	  <H,State,Sz,Acc>
	      when call 'erlang':'<'
		    (Sz,
		     0) ->
	      %% Line 3190
	      case State of
		<{Key,LocalPost,TmpDir,MaxList,TmpUsage}> when 'true' ->
		    let <_cor11> =
			%% Line 3192
			case call 'erlang':'get'
				 (Key) of
			  %% Line 3193
			  <{'file',Fd0,TmpFile,_X_F}> when 'true' ->
			      %% Line 3194
			      {TmpFile,Fd0}
			  %% Line 3195
			  <'undefined'>
			      when call 'erlang':'=:='
				    (TmpUsage,
				     'not_allowed') ->
			      %% Line 3196
			      apply 'error'/1
				  ({'tmpdir_usage','caching'})
			  %% Line 3197
			  <'undefined'> when 'true' ->
			      do  %% Line 3198
				  apply 'maybe_error_logger'/2
				      (TmpUsage, 'caching')
				  let <FName> =
				      %% Line 3199
				      apply 'tmp_filename'/1
					  (TmpDir)
				  in  %% Line 3200
				      case apply 'open_file'/3
					       (FName, ['write'], LocalPost) of
					<{F,Fd0}> when 'true' ->
					    do  %% Line 3201
						call 'erlang':'put'
						    (Key, {'file',Fd0,FName,F})
						%% Line 3202
						{FName,Fd0}
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor9})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 3204
			case _cor11 of
			  %% Line 3205
			  <{FileName,Fd}> when 'true' ->
			      %% Line 3206
			      case apply 'lcache_write'/3
				       (Fd, FileName, Acc) of
				%% Line 3207
				<'ok'> when 'true' ->
				    %% Line 3208
				    apply 'lcache1'/4
					(H, State, MaxList, [])
				%% Line 3209
				<Error> when 'true' ->
				    %% Line 3210
				    Error
			      end
			  %% Line 3212
			  <Error> when 'true' ->
			      %% Line 3213
			      Error
			end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3215
	  <[Object|Cont],State,Sz0,Acc> when 'true' ->
	      let <Sz> =
		  %% Line 3216
		  apply 'decr_list_size'/2
		      (Sz0, Object)
	      in  let <_cor16> =
		      %% Line 3217
		      apply 'lcache2'/4
			  (Cont, State, Sz, [Object|Acc])
		  in  %% Line 3217
		      [Object|_cor16]
	  %% Line 3218
	  <F,State,Sz,Acc> when 'true' ->
	      %% Line 3219
	      case apply F
		       () of
		%% Line 3220
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3221
		    apply 'lcache1'/4
			(Objects, State, Sz, Acc)
		%% Line 3222
		<Term> when 'true' ->
		    %% Line 3223
		    Term
	      end
	end
'lcache2'/4 =
    %% Line 3226
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Object|Cont],State,Sz0,Acc>
	      when call 'erlang':'>='
		    (Sz0,
		     0) ->
	      let <Sz> =
		  %% Line 3227
		  apply 'decr_list_size'/2
		      (Sz0, Object)
	      in  let <_cor5> =
		      %% Line 3228
		      apply 'lcache2'/4
			  (Cont, State, Sz, [Object|Acc])
		  in  %% Line 3228
		      [Object|_cor5]
	  %% Line 3229
	  <Cont,State,Sz,Acc> when 'true' ->
	      %% Line 3230
	      ( fun () ->
		    apply 'lcache1'/4
			(Cont, State, Sz, Acc)
		-| [{'id',{0,0,'-lcache2/4-fun-0-'}}] )
	end
'lcache_write'/3 =
    %% Line 3232
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3233
	    apply 't2b'/2
		(_cor0, [])
	in  %% Line 3233
	    apply 'write_binary_terms'/3
		(_cor3, _cor2, _cor1)
't2b'/2 =
    %% Line 3235
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Bs> when 'true' ->
	      %% Line 3236
	      Bs
	  %% Line 3237
	  <[T|Ts],Bs> when 'true' ->
	      let <_cor2> =
		  %% Line 3238
		  call 'erlang':'term_to_binary'
		      (T)
	      in  %% Line 3238
		  apply 't2b'/2
		      (Ts, [_cor2|Bs])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'t2b',2}}] )
	    -| ['compiler_generated'] )
	end
'del_lcache'/1 =
    %% Line 3240
    fun (_cor0) ->
	%% Line 3241
	( fun () ->
	      let <Key> = {_cor0,%% Line 3242
			 '$_qlc_cache_tmpfiles_'}
	      in  %% Line 3243
		  case call 'erlang':'get'
			   (Key) of
		    %% Line 3244
		    <'undefined'> when 'true' ->
			%% Line 3245
			'ok'
		    %% Line 3246
		    <{'file',Fd,TmpFile,_X_F}> when 'true' ->
			let <_X_> =
			    %% Line 3247
			    ( call 'file':'close'
				  (Fd)
			      -| ['result_not_wanted'] )
			in  let <_X_> =
				%% Line 3248
				( call 'file':'delete'
				      (TmpFile)
				  -| ['result_not_wanted'] )
			    in  %% Line 3249
				call 'erlang':'erase'
				    (Key)
		    %% Line 3250
		    <_X_L> when 'true' ->
			%% Line 3251
			call 'erlang':'erase'
			    (Key)
		  end
	  -| [{'id',{0,0,'-del_lcache/1-fun-0-'}}] )
'tag_objects'/2 =
    %% Line 3255
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Object|Cont],T> when 'true' ->
	      let <_cor2> =
		  %% Line 3256
		  call 'erlang':'+'
		      (T, 1)
	      in  let <_cor3> =
		      %% Line 3256
		      apply 'tag_objects2'/2
			  (Cont, _cor2)
		  in  %% Line 3256
		      [{Object,T}|_cor3]
	  %% Line 3257
	  <Cont = [],_X_T> when 'true' ->
	      %% Line 3258
	      Cont
	  %% Line 3259
	  <F,T> when 'true' ->
	      %% Line 3260
	      case apply F
		       () of
		%% Line 3261
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3262
		    apply 'tag_objects'/2
			(Objects, T)
		%% Line 3263
		<Term> when 'true' ->
		    %% Line 3264
		    Term
	      end
	end
'tag_objects2'/2 =
    %% Line 3267
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Object|Cont],T> when 'true' ->
	      let <_cor2> =
		  %% Line 3268
		  call 'erlang':'+'
		      (T, 1)
	      in  let <_cor3> =
		      %% Line 3268
		      apply 'tag_objects2'/2
			  (Cont, _cor2)
		  in  %% Line 3268
		      [{Object,T}|_cor3]
	  %% Line 3269
	  <Objects,T> when 'true' ->
	      %% Line 3270
	      ( fun () ->
		    apply 'tag_objects'/2
			(Objects, T)
		-| [{'id',{0,0,'-tag_objects2/2-fun-0-'}}] )
	end
'untag_objects'/1 =
    %% Line 3272
    fun (_cor0) ->
	case _cor0 of
	  <Objs = []> when 'true' ->
	      %% Line 3273
	      Objs
	  %% Line 3274
	  <[{Object,_X_N}|Cont]> when 'true' ->
	      let <_cor1> =
		  %% Line 3275
		  apply 'untag_objects2'/1
		      (Cont)
	      in  %% Line 3275
		  [Object|_cor1]
	  %% Line 3276
	  <F> when 'true' ->
	      %% Line 3277
	      case apply F
		       () of
		%% Line 3278
		<Objects>
		    when call 'erlang':'is_list'
			  (Objects) ->
		    %% Line 3279
		    apply 'untag_objects'/1
			(Objects)
		%% Line 3280
		<Term> when 'true' ->
		    %% Line 3281
		    Term
	      end
	end
'untag_objects2'/1 =
    %% Line 3284
    fun (_cor0) ->
	case _cor0 of
	  <[{Object,_X_N}|Cont]> when 'true' ->
	      let <_cor1> =
		  %% Line 3285
		  apply 'untag_objects2'/1
		      (Cont)
	      in  %% Line 3285
		  [Object|_cor1]
	  %% Line 3286
	  <Cont = []> when 'true' ->
	      %% Line 3287
	      Cont
	  %% Line 3288
	  <Objects> when 'true' ->
	      %% Line 3289
	      ( fun () ->
		    apply 'untag_objects'/1
			(Objects)
		-| [{'id',{0,0,'-untag_objects2/1-fun-0-'}}] )
	end
'merge_join'/5 =
    %% Line 3298
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Cont = [],_X_C1,_X_T2,_X_C2,_X_Opt> when 'true' ->
	      %% Line 3299
	      Cont
	  %% Line 3300
	  <[E1|L1],C1,L2,C2,Opt> when 'true' ->
	      %% Line 3302
	      case Opt of
		<{'qlc_opt',_cor15,_cor16,_cor17,_cor18,TmpDir,_cor19,MaxList,TmpUsage}> when 'true' ->
		    let <_cor6> =
			%% Line 3303
			apply 'merge_join_id'/0
			    ()
		    in  let <M> =
			    %% Line 3303
			    {'m',_cor6,TmpDir,MaxList,%% Line 3304
						      TmpUsage}
			in  let <_cor8> =
				%% Line 3305
				call 'erlang':'element'
				    (C1, E1)
			    in  %% Line 3305
				apply 'merge_join2'/7
				    (E1, _cor8, L1, C1, L2, C2, M)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3306
	  <F1,C1,L2,C2,Opt> when 'true' ->
	      %% Line 3307
	      case apply F1
		       () of
		%% Line 3308
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3309
		    apply 'merge_join'/5
			(L1, C1, L2, C2, Opt)
		%% Line 3310
		<T1> when 'true' ->
		    %% Line 3311
		    T1
	      end
	end
'merge_join1'/7 =
    %% Line 3314
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_E2,_X_K2,Cont = [],_X_C1,_X_L2,_X_C2,M> when 'true' ->
	      %% Line 3315
	      apply 'end_merge_join'/2
		  (Cont, M)
	  %% Line 3316
	  <E2,K2,[E1|L1],C1,L2,C2,M> when 'true' ->
	      let <K1> =
		  %% Line 3317
		  call 'erlang':'element'
		      (C1, E1)
	      in  %% Line 3318
		  case <> of
		    %% Line 3319
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			%% Line 3320
			apply 'same_keys2'/8
			    (E1, K1, L1, C1, L2, C2, E2, M)
		    %% Line 3321
		    <>
			when call 'erlang':'>'
			      (K1,
			       K2) ->
			%% Line 3322
			apply 'merge_join2'/7
			    (E1, K1, L1, C1, L2, C2, M)
		    %% Line 3323
		    <> when 'true' ->
			%% Line 3324
			apply 'merge_join1'/7
			    (E2, K2, L1, C1, L2, C2, M)
		  end
	  %% Line 3326
	  <E2,K2,F1,C1,L2,C2,M> when 'true' ->
	      %% Line 3327
	      case apply F1
		       () of
		%% Line 3328
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3329
		    apply 'merge_join1'/7
			(E2, K2, L1, C1, L2, C2, M)
		%% Line 3330
		<T1> when 'true' ->
		    %% Line 3331
		    T1
	      end
	end
'merge_join2'/7 =
    %% Line 3334
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_E1,_X_K1,_X_L1,_X_C1,Cont = [],_X_C2,M> when 'true' ->
	      %% Line 3335
	      apply 'end_merge_join'/2
		  (Cont, M)
	  %% Line 3336
	  <E1,K1,L1,C1,[E2|L2],C2,M> when 'true' ->
	      let <K2> =
		  %% Line 3337
		  call 'erlang':'element'
		      (C2, E2)
	      in  %% Line 3338
		  case <> of
		    %% Line 3339
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			%% Line 3340
			apply 'same_keys2'/8
			    (E1, K1, L1, C1, L2, C2, E2, M)
		    %% Line 3341
		    <>
			when call 'erlang':'>'
			      (K1,
			       K2) ->
			%% Line 3342
			apply 'merge_join2'/7
			    (E1, K1, L1, C1, L2, C2, M)
		    %% Line 3343
		    <> when 'true' ->
			%% Line 3344
			apply 'merge_join1'/7
			    (E2, K2, L1, C1, L2, C2, M)
		  end
	  %% Line 3346
	  <E1,K1,L1,C1,F2,C2,M> when 'true' ->
	      %% Line 3347
	      case apply F2
		       () of
		%% Line 3348
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3349
		    apply 'merge_join2'/7
			(E1, K1, L1, C1, L2, C2, M)
		%% Line 3350
		<T2> when 'true' ->
		    %% Line 3351
		    T2
	      end
	end
'same_keys2'/8 =
    %% Line 3355
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E1,K1,L1,C1,[],_X_C2,E2_0,M> when 'true' ->
	      let <Cont> =
		  %% Line 3356
		  ( fun (_cor8) ->
			apply 'end_merge_join'/2
			    ([], M)
		    -| [{'id',{0,0,'-same_keys2/8-fun-0-'}}] )
	      in  %% Line 3357
		  apply 'loop_same_keys'/7
		      (E1, K1, L1, C1, [E2_0|[]], Cont, M)
	  %% Line 3358
	  <E1,K1,L1,C1,L2_0 = [E2|L2],C2,E2_0,M> when 'true' ->
	      let <K2> =
		  %% Line 3359
		  call 'erlang':'element'
		      (C2, E2)
	      in  %% Line 3360
		  case <> of
		    %% Line 3361
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			%% Line 3362
			apply 'same_keys1'/9
			    (E1, K1, L1, C1, E2, C2, E2_0, L2, M)
		    %% Line 3363
		    <>
			when call 'erlang':'<'
			      (K1,
			       K2) ->
			let <_cor12> =
			    %% Line 3365
			    ( fun () ->
				  apply 'same_loop1'/7
				      (L1, K1, C1, E2_0, L2_0, C2, M)
			      -| [{'id',{0,0,'-same_keys2/8-fun-1-'}}] )
			in  %% Line 3364
			    [[E1|E2_0]|_cor12]
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3367
	  <E1,K1,L1,C1,F2,C2,E2_0,M> when 'true' ->
	      %% Line 3368
	      case apply F2
		       () of
		%% Line 3369
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3370
		    apply 'same_keys2'/8
			(E1, K1, L1, C1, L2, C2, E2_0, M)
		%% Line 3371
		<T2> when 'true' ->
		    let <Cont> =
			%% Line 3372
			( fun (_cor13) ->
			      T2
			  -| [{'id',{0,0,'-same_keys2/8-fun-2-'}}] )
		    in  %% Line 3373
			apply 'loop_same_keys'/7
			    (E1, K1, L1, C1, [E2_0|[]], Cont, M)
	      end
	end
'same_loop1'/7 =
    %% Line 3376
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_K1_0,_X_C1,_X_E2_0,_X_L2,_X_C2,M> when 'true' ->
	      %% Line 3377
	      apply 'end_merge_join'/2
		  ([], M)
	  %% Line 3378
	  <[E1|L1],K1_0,C1,E2_0,L2,C2,M> when 'true' ->
	      let <K1> =
		  %% Line 3379
		  call 'erlang':'element'
		      (C1, E1)
	      in  %% Line 3380
		  case <> of
		    %% Line 3381
		    <>
			when call 'erlang':'=='
			      (K1,
			       K1_0) ->
			let <_cor8> =
			    %% Line 3383
			    ( fun () ->
				  apply 'same_loop1'/7
				      (L1, K1_0, C1, E2_0, L2, C2, M)
			      -| [{'id',{0,0,'-same_loop1/7-fun-0-'}}] )
			in  %% Line 3382
			    [[E1|E2_0]|_cor8]
		    %% Line 3384
		    <>
			when call 'erlang':'<'
			      (K1_0,
			       K1) ->
			%% Line 3385
			apply 'merge_join2'/7
			    (E1, K1, L1, C1, L2, C2, M)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3387
	  <F1,K1_0,C1,E2_0,L2,C2,M> when 'true' ->
	      %% Line 3388
	      case apply F1
		       () of
		%% Line 3389
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3390
		    apply 'same_loop1'/7
			(L1, K1_0, C1, E2_0, L2, C2, M)
		%% Line 3391
		<T1> when 'true' ->
		    %% Line 3392
		    T1
	      end
	end
'same_keys1'/9 =
    %% Line 3396
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E1_0,K1_0,L1 = [],C1,E2,C2,E2_0,L2,M> when 'true' ->
	      let <_cor9> =
		  %% Line 3398
		  ( fun () ->
			apply 'same_keys'/7
			    (K1_0, E1_0, L1, C1, L2, C2, M)
		    -| [{'id',{0,0,'-same_keys1/9-fun-0-'}}] )
	      in  %% Line 3397
		  [[E1_0|E2_0]|[[E1_0|E2]|_cor9]]
	  %% Line 3399
	  <E1_0,K1_0,L1 = [E1|_cor27],C1,E2,C2,E2_0,L2,M> when 'true' ->
	      let <K1> =
		  %% Line 3400
		  call 'erlang':'element'
		      (C1, E1)
	      in  %% Line 3401
		  case <> of
		    %% Line 3402
		    <>
			when call 'erlang':'=='
			      (K1_0,
			       K1) ->
			let <E2s> =
			    %% Line 3403
			    [E2|[E2_0|[]]]
			in  %% Line 3404
			    ( case M of
				( <( {'m',_cor28,_cor29,_rec93,_cor30}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <Sz0> =
					  apply 'decr_list_size'/2
					      (_rec93, E2s)
				      in  %% Line 3405
					  apply 'same_keys_cache'/9
					      (E1_0, K1_0, L1, C1, L2, C2, E2s, Sz0, M)
				  -| ['compiler_generated'] )
				( <_cor31> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','m'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 3406
		    <>
			when call 'erlang':'<'
			      (K1_0,
			       K1) ->
			let <_cor15> =
			    %% Line 3408
			    ( fun () ->
				  apply 'same_keys'/7
				      (K1_0, E1_0, L1, C1, L2, C2, M)
			      -| [{'id',{0,0,'-same_keys1/9-fun-1-'}}] )
			in  %% Line 3407
			    [[E1_0|E2_0]|[[E1_0|E2]|_cor15]]
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3410
	  <E1_0,K1_0,F1,C1,E2,C2,E2_0,L2,M> when 'true' ->
	      %% Line 3411
	      case apply F1
		       () of
		%% Line 3412
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3413
		    apply 'same_keys1'/9
			(E1_0, K1_0, L1, C1, E2, C2, E2_0, L2, M)
		%% Line 3414
		<T1> when 'true' ->
		    let <Cont> =
			%% Line 3415
			( fun () ->
			      T1
			  -| [{'id',{0,0,'-same_keys1/9-fun-2-'}}] )
		    in  %% Line 3416
			apply 'loop_same'/3
			    (E1_0, [E2|[E2_0|[]]], Cont)
	      end
	end
'same_keys'/7 =
    %% Line 3420
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_K1,_X_E1,_X_L1,_X_C1,Cont = [],_X_C2,M> when 'true' ->
	      %% Line 3421
	      apply 'end_merge_join'/2
		  (Cont, M)
	  %% Line 3422
	  <K1,E1,L1,C1,[E2|L2],C2,M> when 'true' ->
	      let <K2> =
		  %% Line 3423
		  call 'erlang':'element'
		      (C2, E2)
	      in  %% Line 3424
		  case <> of
		    %% Line 3425
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			let <_cor8> =
			    %% Line 3427
			    ( fun () ->
				  apply 'same_keys'/7
				      (K1, E1, L1, C1, L2, C2, M)
			      -| [{'id',{0,0,'-same_keys/7-fun-0-'}}] )
			in  %% Line 3426
			    [[E1|E2]|_cor8]
		    %% Line 3428
		    <>
			when call 'erlang':'<'
			      (K1,
			       K2) ->
			%% Line 3429
			apply 'merge_join1'/7
			    (E2, K2, L1, C1, L2, C2, M)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3431
	  <K1,E1,L1,C1,F2,C2,M> when 'true' ->
	      %% Line 3432
	      case apply F2
		       () of
		%% Line 3433
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3434
		    apply 'same_keys'/7
			(K1, E1, L1, C1, L2, C2, M)
		%% Line 3435
		<T2> when 'true' ->
		    %% Line 3436
		    T2
	      end
	end
'same_keys_cache'/9 =
    %% Line 3442
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E1,K1,L1,C1,[],_X_C2,E2s,_X_Sz,M> when 'true' ->
	      let <Cont> =
		  %% Line 3443
		  ( fun (_cor9) ->
			apply 'end_merge_join'/2
			    ([], M)
		    -| [{'id',{0,0,'-same_keys_cache/9-fun-0-'}}] )
	      in  %% Line 3444
		  apply 'loop_same_keys'/7
		      (E1, K1, L1, C1, E2s, Cont, M)
	  %% Line 3445
	  <E1,K1,L1,C1,L2,C2,E2s,Sz0,M>
	      when call 'erlang':'<'
		    (Sz0,
		     0) ->
	      %% Line 3446
	      case apply 'init_merge_join'/1
		       (M) of
		%% Line 3447
		<'ok'> when 'true' ->
		    %% Line 3448
		    ( case M of
			( <( {'m',_cor35,_cor36,_rec94,_cor37}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <C> =
				  %% Line 3449
				  ( fun () ->
					%% Line 3450
					apply 'same_keys_file'/9
					    (E1, K1, L1, C1, L2, C2, [], _rec94, M)
				    -| [{'id',{0,0,'-same_keys_cache/9-fun-1-'}}] )
			      in  %% Line 3452
				  apply 'write_same_keys'/4
				      (E1, E2s, M, C)
			  -| ['compiler_generated'] )
			( <_cor38> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','m'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 3453
		<Error> when 'true' ->
		    %% Line 3454
		    Error
	      end
	  %% Line 3456
	  <E1,K1,L1,C1,[E2|L2],C2,E2s,Sz0,M> when 'true' ->
	      let <K2> =
		  %% Line 3457
		  call 'erlang':'element'
		      (C2, E2)
	      in  %% Line 3458
		  case <> of
		    %% Line 3459
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			let <Sz> =
			    %% Line 3460
			    apply 'decr_list_size'/2
				(Sz0, E2)
			in  %% Line 3461
			    apply 'same_keys_cache'/9
				(E1, K1, L1, C1, L2, C2, [E2|E2s], Sz, M)
		    %% Line 3462
		    <>
			when call 'erlang':'<'
			      (K1,
			       K2) ->
			let <Cont> =
			    %% Line 3463
			    ( fun (_cor19) ->
				  apply 'merge_join1'/7
				      (E2, K2, _cor19, C1, L2, C2, M)
			      -| [{'id',{0,0,'-same_keys_cache/9-fun-2-'}}] )
			in  %% Line 3464
			    apply 'loop_same_keys'/7
				(E1, K1, L1, C1, E2s, Cont, M)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3466
	  <E1,K1,L1,C1,F2,C2,E2s,Sz,M> when 'true' ->
	      %% Line 3467
	      case apply F2
		       () of
		%% Line 3468
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3469
		    apply 'same_keys_cache'/9
			(E1, K1, L1, C1, L2, C2, E2s, Sz, M)
		%% Line 3470
		<T2> when 'true' ->
		    let <Cont> =
			%% Line 3471
			( fun (_cor22) ->
			      T2
			  -| [{'id',{0,0,'-same_keys_cache/9-fun-3-'}}] )
		    in  %% Line 3472
			apply 'loop_same_keys'/7
			    (E1, K1, L1, C1, E2s, Cont, M)
	      end
	end
'loop_same_keys'/7 =
    %% Line 3476
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E1,_X_K1,[],_X_C1,E2s,_X_Cont,M> when 'true' ->
	      let <_cor7> =
		  %% Line 3477
		  apply 'loop_same'/3
		      (E1, E2s, [])
	      in  %% Line 3477
		  apply 'end_merge_join'/2
		      (_cor7, M)
	  %% Line 3478
	  <E1,K1,L1,C1,E2s,Cont,M> when 'true' ->
	      let <_cor8> =
		  %% Line 3479
		  ( fun () ->
			apply 'loop_keys'/6
			    (K1, L1, C1, E2s, Cont, M)
		    -| [{'id',{0,0,'-loop_same_keys/7-fun-0-'}}] )
	      in  %% Line 3479
		  apply 'loop_same'/3
		      (E1, E2s, _cor8)
	end
'loop_same'/3 =
    %% Line 3481
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_E1,[],L> when 'true' ->
	      %% Line 3482
	      L
	  %% Line 3483
	  <E1,[E2|E2s],L> when 'true' ->
	      %% Line 3484
	      apply 'loop_same'/3
		  (E1, E2s, [[E1|E2]|L])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'loop_same',3}}] )
	    -| ['compiler_generated'] )
	end
'loop_keys'/6 =
    %% Line 3486
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <K,L1_0 = [E1|L1],C1,E2s,Cont,M> when 'true' ->
	      let <K1> =
		  %% Line 3487
		  call 'erlang':'element'
		      (C1, E1)
	      in  %% Line 3488
		  case <> of
		    %% Line 3489
		    <>
			when call 'erlang':'=='
			      (K1,
			       K) ->
			%% Line 3490
			apply 'loop_same_keys'/7
			    (E1, K1, L1, C1, E2s, Cont, M)
		    %% Line 3491
		    <>
			when call 'erlang':'>'
			      (K1,
			       K) ->
			%% Line 3492
			apply Cont
			    (L1_0)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3494
	  <_X_K,L1 = [],_X_C1,_X_Es2,Cont,_X_M> when 'true' ->
	      %% Line 3495
	      apply Cont
		  (L1)
	  %% Line 3496
	  <K,F1,C1,E2s,Cont,M> when 'true' ->
	      %% Line 3497
	      case apply F1
		       () of
		%% Line 3498
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3499
		    apply 'loop_keys'/6
			(K, L1, C1, E2s, Cont, M)
		%% Line 3500
		<T1> when 'true' ->
		    %% Line 3501
		    T1
	      end
	end
'same_keys_file'/9 =
    %% Line 3505
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E1,K1,L1,C1,[],_X_C2,E2s,_X_Sz,M> when 'true' ->
	      let <Cont> =
		  %% Line 3506
		  ( fun (_cor9) ->
			apply 'end_merge_join'/2
			    ([], M)
		    -| [{'id',{0,0,'-same_keys_file/9-fun-0-'}}] )
	      in  %% Line 3507
		  apply 'same_keys_file_write'/7
		      (E1, K1, L1, C1, E2s, M, Cont)
	  %% Line 3508
	  <E1,K1,L1,C1,L2,C2,E2s,Sz0,M>
	      when call 'erlang':'<'
		    (Sz0,
		     0) ->
	      %% Line 3509
	      ( case M of
		  ( <( {'m',_cor34,_cor35,_rec95,_cor36}
		       -| ['compiler_generated'] )> when 'true' ->
			let <C> =
			    %% Line 3510
			    ( fun () ->
				  apply 'same_keys_file'/9
				      (E1, K1, L1, C1, L2, C2, [], _rec95, M)
			      -| [{'id',{0,0,'-same_keys_file/9-fun-1-'}}] )
			in  %% Line 3511
			    apply 'write_same_keys'/4
				(E1, E2s, M, C)
		    -| ['compiler_generated'] )
		  ( <_cor37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','m'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3512
	  <E1,K1,L1,C1,[E2|L2],C2,E2s,Sz0,M> when 'true' ->
	      let <K2> =
		  %% Line 3513
		  call 'erlang':'element'
		      (C2, E2)
	      in  %% Line 3514
		  case <> of
		    %% Line 3515
		    <>
			when call 'erlang':'=='
			      (K1,
			       K2) ->
			let <Sz> =
			    %% Line 3516
			    apply 'decr_list_size'/2
				(Sz0, E2)
			in  %% Line 3517
			    apply 'same_keys_file'/9
				(E1, K1, L1, C1, L2, C2, [E2|E2s], Sz, M)
		    %% Line 3518
		    <>
			when call 'erlang':'<'
			      (K1,
			       K2) ->
			let <Cont> =
			    %% Line 3519
			    ( fun (_cor18) ->
				  %% Line 3521
				  apply 'merge_join1'/7
				      (E2, K2, _cor18, C1, L2, C2, M)
			      -| [{'id',{0,0,'-same_keys_file/9-fun-2-'}}] )
			in  %% Line 3523
			    apply 'same_keys_file_write'/7
				(E1, K1, L1, C1, E2s, M, Cont)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3525
	  <E1,K1,L1,C1,F2,C2,E2s,Sz,M> when 'true' ->
	      %% Line 3526
	      case apply F2
		       () of
		%% Line 3527
		<L2>
		    when call 'erlang':'is_list'
			  (L2) ->
		    %% Line 3528
		    apply 'same_keys_file'/9
			(E1, K1, L1, C1, L2, C2, E2s, Sz, M)
		%% Line 3529
		<T2> when 'true' ->
		    let <Cont> =
			%% Line 3530
			( fun (_cor21) ->
			      T2
			  -| [{'id',{0,0,'-same_keys_file/9-fun-3-'}}] )
		    in  %% Line 3531
			apply 'same_keys_file_write'/7
			    (E1, K1, L1, C1, E2s, M, Cont)
	      end
	end
'same_keys_file_write'/7 =
    %% Line 3534
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <C> =
	    %% Line 3535
	    ( fun () ->
		  apply 'loop_keys_file'/5
		      (_cor5, _cor4, _cor3, _cor0, _cor1)
	      -| [{'id',{0,0,'-same_keys_file_write/7-fun-0-'}}] )
	in  %% Line 3536
	    apply 'write_same_keys'/4
		(_cor6, _cor2, _cor1, C)
'write_same_keys'/4 =
    %% Line 3538
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_E1,[],_X_M,Cont> when 'true' ->
	      %% Line 3539
	      apply Cont
		  ()
	  %% Line 3540
	  <E1,Es2,M,Cont> when 'true' ->
	      %% Line 3541
	      apply 'write_same_keys'/5
		  (E1, Es2, M, [], Cont)
	end
'write_same_keys'/5 =
    %% Line 3544
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_E1,[],M,E2s,Objs> when 'true' ->
	      %% Line 3545
	      case apply 'write_merge_join'/2
		       (M, E2s) of
		%% Line 3546
		<'ok'> when 'true' ->
		    Objs
		%% Line 3547
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 3549
	  <E1,[E2|E2s0],M,E2s,Objs> when 'true' ->
	      let <BE2> =
		  %% Line 3550
		  call 'erlang':'term_to_binary'
		      (E2)
	      in  %% Line 3551
		  apply 'write_same_keys'/5
		      (E1, E2s0, M, [BE2|E2s], [[E1|E2]|Objs])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'write_same_keys',5}}] )
	    -| ['compiler_generated'] )
	end
'loop_keys_file'/5 =
    %% Line 3553
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <K,L1_0 = [E1|L1],C1,Cont,M> when 'true' ->
	      let <K1> =
		  %% Line 3554
		  call 'erlang':'element'
		      (C1, E1)
	      in  %% Line 3555
		  case <> of
		    %% Line 3556
		    <>
			when call 'erlang':'=='
			      (K1,
			       K) ->
			let <C> =
			    %% Line 3557
			    ( fun () ->
				  apply 'loop_keys_file'/5
				      (K1, L1, C1, Cont, M)
			      -| [{'id',{0,0,'-loop_keys_file/5-fun-0-'}}] )
			in  %% Line 3558
			    apply 'read_merge_join'/3
				(M, E1, C)
		    %% Line 3559
		    <>
			when call 'erlang':'>'
			      (K1,
			       K) ->
			%% Line 3560
			apply Cont
			    (L1_0)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 3562
	  <_X_K,L1 = [],_X_C1,Cont,_X_M> when 'true' ->
	      %% Line 3563
	      apply Cont
		  (L1)
	  %% Line 3564
	  <K,F1,C1,Cont,M> when 'true' ->
	      %% Line 3565
	      case apply F1
		       () of
		%% Line 3566
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3567
		    apply 'loop_keys_file'/5
			(K, L1, C1, Cont, M)
		%% Line 3568
		<T1> when 'true' ->
		    %% Line 3569
		    T1
	      end
	end
'end_merge_join'/2 =
    %% Line 3572
    fun (_cor1,_cor0) ->
	do  %% Line 3573
	    apply 'end_merge_join'/1
		(_cor0)
	    _cor1
'init_merge_join'/1 =
    %% Line 3586
    fun (_cor0) ->
	case _cor0 of
	  <{'m',MergeId,TmpDir,_cor8,TmpUsage}> when 'true' ->
	      %% Line 3587
	      case apply 'tmp_merge_file'/1
		       (MergeId) of
		%% Line 3588
		<{Fd,FileName}> when 'true' ->
		    %% Line 3589
		    case call 'file':'position'
			     (Fd, 'bof') of
		      %% Line 3590
		      <{'ok',0}> when 'true' ->
			  %% Line 3591
			  case call 'file':'truncate'
				   (Fd) of
			    %% Line 3592
			    <'ok'> when 'true' ->
				%% Line 3593
				'ok'
			    %% Line 3594
			    <Error> when 'true' ->
				%% Line 3595
				apply 'file_error'/2
				    (FileName, Error)
			  end
		      %% Line 3597
		      <Error> when 'true' ->
			  %% Line 3598
			  apply 'file_error'/2
			      (FileName, Error)
		    end
		%% Line 3600
		<'none'>
		    when call 'erlang':'=:='
			  (TmpUsage,
			   'not_allowed') ->
		    %% Line 3601
		    apply 'error'/1
			({'tmpdir_usage','joining'})
		%% Line 3602
		<'none'> when 'true' ->
		    do  %% Line 3603
			apply 'maybe_error_logger'/2
			    (TmpUsage, 'joining')
			let <FName> =
			    %% Line 3604
			    apply 'tmp_filename'/1
				(TmpDir)
			in  %% Line 3605
			    case call 'file':'open'
				     (FName, ['raw'|['binary'|['read'|['write']]]]) of
			      %% Line 3606
			      <{'ok',Fd}> when 'true' ->
				  let <TmpFiles> =
				      %% Line 3607
				      call 'erlang':'get'
					  ('$_qlc_merge_join_tmpfiles_')
				  in  do  %% Line 3608
					  call 'erlang':'put'
					      ('$_qlc_merge_join_tmpfiles_', [{MergeId,Fd,FName}|TmpFiles])
					  %% Line 3609
					  'ok'
			      %% Line 3610
			      <Error> when 'true' ->
				  %% Line 3611
				  apply 'file_error'/2
				      (FName, Error)
			    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'init_merge_join',1}}] )
	    -| ['compiler_generated'] )
	end
'write_merge_join'/2 =
    %% Line 3615
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'m',MergeId,_cor5,_cor6,_cor7},BTerms> when 'true' ->
	      %% Line 3616
	      case apply 'tmp_merge_file'/1
		       (MergeId) of
		<{Fd,FileName}> when 'true' ->
		    %% Line 3617
		    apply 'write_binary_terms'/3
			(BTerms, Fd, FileName)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'write_merge_join',2}}] )
	    -| ['compiler_generated'] )
	end
'read_merge_join'/3 =
    %% Line 3619
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'m',MergeId,_cor14,_cor15,_cor16},E1,Cont> when 'true' ->
	      %% Line 3620
	      case apply 'tmp_merge_file'/1
		       (MergeId) of
		<{Fd,FileName}> when 'true' ->
		    %% Line 3621
		    case call 'file':'position'
			     (Fd, 'bof') of
		      %% Line 3622
		      <{'ok',0}> when 'true' ->
			  let <Fun> =
			      %% Line 3623
			      ( fun (_cor5,_cor4) ->
				    case <_cor5,_cor4> of
				      <[],_cor17> when 'true' ->
					  %% Line 3624
					  apply Cont
					      ()
				      %% Line 3625
				      <Ts,C>
					  when call 'erlang':'is_list'
						(Ts) ->
					  %% Line 3626
					  apply 'join_read_terms'/3
					      (E1, Ts, C)
				      ( <_cor7,_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor7,_cor6})
					      -| [{'function_name',{'-read_merge_join/3-fun-0-',2}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-read_merge_join/3-fun-0-'}}] )
			  in  %% Line 3628
			      apply 'file_loop_read'/4
				  (#{}#, 65536, {Fd,FileName}, Fun)
		      %% Line 3629
		      <Error> when 'true' ->
			  %% Line 3630
			  apply 'file_error'/2
			      (FileName, Error)
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'read_merge_join',3}}] )
	    -| ['compiler_generated'] )
	end
'join_read_terms'/3 =
    %% Line 3633
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_E1,[],Objs> when 'true' ->
	      %% Line 3634
	      Objs
	  %% Line 3635
	  <E1,[E2|E2s],Objs> when 'true' ->
	      %% Line 3636
	      apply 'join_read_terms'/3
		  (E1, E2s, [[E1|E2]|Objs])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'join_read_terms',3}}] )
	    -| ['compiler_generated'] )
	end
'end_merge_join'/1 =
    %% Line 3638
    fun (_cor0) ->
	case _cor0 of
	  <{'m',MergeId,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 3639
	      case apply 'tmp_merge_file'/1
		       (MergeId) of
		%% Line 3640
		<'none'> when 'true' ->
		    %% Line 3641
		    'ok'
		%% Line 3642
		<{Fd,FileName}> when 'true' ->
		    let <_X_> =
			%% Line 3643
			( call 'file':'close'
			      (Fd)
			  -| ['result_not_wanted'] )
		    in  let <_X_> =
			    %% Line 3644
			    ( call 'file':'delete'
				  (FileName)
			      -| ['result_not_wanted'] )
			in  let <_cor3> =
				%% Line 3646
				call 'erlang':'get'
				    ('$_qlc_merge_join_tmpfiles_')
			    in  let <_cor4> =
				    %% Line 3646
				    call 'lists':'keydelete'
					(MergeId, 1, _cor3)
				in  %% Line 3645
				    call 'erlang':'put'
					('$_qlc_merge_join_tmpfiles_', _cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'end_merge_join',1}}] )
	    -| ['compiler_generated'] )
	end
'end_all_merge_joins'/0 =
    %% Line 3649
    fun () ->
	let <_cor9> =
	    %% Line 3651
	    ( fun (_cor7) ->
		  apply 'end_merge_join'/1
		      ({'m',_cor7,'undefined','undefined','undefined'})
	      -| [{'id',{0,0,'-end_all_merge_joins/0-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 3652
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[{Id,_X_Fd,_X_FileName}|_cor1]> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor1)
				    in  ( [Id|_cor5]
					  -| ['compiler_generated'] )
				( <[_cor0|_cor1]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor1)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor2> =
			  call 'erlang':'get'
			      ('$_qlc_merge_join_tmpfiles_')
		      in  let <_cor3> =
			      call 'lists':'flatten'
				  ([_cor2|[]])
			  in  apply 'lc$^0'/1
				  (_cor3)
		  -| ['list_comprehension'] )
	    in  do  %% Line 3650
		    call 'lists':'foreach'
			(_cor9, _cor6)
		    %% Line 3653
		    call 'erlang':'erase'
			('$_qlc_merge_join_tmpfiles_')
'merge_join_id'/0 =
    %% Line 3655
    fun () ->
	do  %% Line 3656
	    case call 'erlang':'get'
		     ('$_qlc_merge_join_tmpfiles_') of
	      %% Line 3657
	      <'undefined'> when 'true' ->
		  %% Line 3658
		  call 'erlang':'put'
		      ('$_qlc_merge_join_tmpfiles_', [])
	      %% Line 3659
	      <_cor1> when 'true' ->
		  'ok'
	    end
	    %% Line 3662
	    call 'erlang':'make_ref'
		()
'tmp_merge_file'/1 =
    %% Line 3664
    fun (_cor0) ->
	let <TmpFiles> =
	    %% Line 3665
	    call 'erlang':'get'
		('$_qlc_merge_join_tmpfiles_')
	in  %% Line 3666
	    case call 'lists':'keyfind'
		     (_cor0, 1, TmpFiles) of
	      %% Line 3667
	      <{_cor4,Fd,FileName}>
		  when call 'erlang':'=:='
			(_cor4,
			 _cor0) ->
		  %% Line 3668
		  {Fd,FileName}
	      %% Line 3669
	      <'false'> when 'true' ->
		  %% Line 3670
		  'none'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'decr_list_size'/2 =
    %% Line 3673
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Sz0,E>
	      when call 'erlang':'is_integer'
		    (Sz0) ->
	      let <_cor2> =
		  %% Line 3674
		  call 'erlang':'external_size'
		      (E)
	      in  %% Line 3674
		  call 'erlang':'-'
		      (Sz0, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'decr_list_size',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_join'/5 =
    %% Line 3678
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E1|L1],C1,LuF,C2,Rev> when 'true' ->
	      let <K1> =
		  %% Line 3679
		  call 'erlang':'element'
		      (C1, E1)
	      in  %% Line 3680
		  case apply LuF
			   (C2, [K1|[]]) of
		    %% Line 3681
		    <[]> when 'true' ->
			%% Line 3682
			apply 'lookup_join'/5
			    (L1, C1, LuF, C2, Rev)
		    %% Line 3683
		    <[E2|[]]>
			when call 'erlang':'=:='
			      (Rev,
			       'true') ->
			let <_cor6> =
			    %% Line 3684
			    ( fun () ->
				  apply 'lookup_join'/5
				      (L1, C1, LuF, C2, Rev)
			      -| [{'id',{0,0,'-lookup_join/5-fun-0-'}}] )
			in  %% Line 3684
			    [[E2|E1]|_cor6]
		    %% Line 3685
		    <[E2|[]]> when 'true' ->
			let <_cor7> =
			    %% Line 3686
			    ( fun () ->
				  apply 'lookup_join'/5
				      (L1, C1, LuF, C2, Rev)
			      -| [{'id',{0,0,'-lookup_join/5-fun-1-'}}] )
			in  %% Line 3686
			    [[E1|E2]|_cor7]
		    %% Line 3687
		    <E2s>
			when let <_cor8> =
			      call 'erlang':'is_list'
				  (E2s)
			  in  let <_cor9> =
				  call 'erlang':'=:='
				      (Rev, 'true')
			      in  call 'erlang':'and'
				      (_cor8, _cor9) ->
			let <_cor10> =
			    %% Line 3689
			    ( fun () ->
				  apply 'lookup_join'/5
				      (L1, C1, LuF, C2, Rev)
			      -| [{'id',{0,0,'-lookup_join/5-fun-2-'}}] )
			in  %% Line 3688
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor13) ->
					  case _cor13 of
					    <[E2|_cor12]> when 'true' ->
						let <_cor14> =
						    apply 'lc$^0'/1
							(_cor12)
						in  ( [[E2|E1]|_cor14]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						_cor10
					    ( <_cor13> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (E2s)
			      -| ['list_comprehension'] )
		    %% Line 3690
		    <E2s>
			when call 'erlang':'is_list'
			      (E2s) ->
			let <_cor15> =
			    %% Line 3692
			    ( fun () ->
				  apply 'lookup_join'/5
				      (L1, C1, LuF, C2, Rev)
			      -| [{'id',{0,0,'-lookup_join/5-fun-3-'}}] )
			in  %% Line 3691
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor18) ->
					  case _cor18 of
					    <[E2|_cor17]> when 'true' ->
						let <_cor19> =
						    apply 'lc$^1'/1
							(_cor17)
						in  ( [[E1|E2]|_cor19]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						_cor15
					    ( <_cor18> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor18})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (E2s)
			      -| ['list_comprehension'] )
		    %% Line 3693
		    <Term> when 'true' ->
			%% Line 3694
			Term
		  end
	  %% Line 3696
	  <Cont = [],_X_C1,_X_LuF,_X_C2,_X_Rev> when 'true' ->
	      %% Line 3697
	      Cont
	  %% Line 3698
	  <F1,C1,LuF,C2,Rev> when 'true' ->
	      %% Line 3699
	      case apply F1
		       () of
		%% Line 3700
		<L1>
		    when call 'erlang':'is_list'
			  (L1) ->
		    %% Line 3701
		    apply 'lookup_join'/5
			(L1, C1, LuF, C2, Rev)
		%% Line 3702
		<T1> when 'true' ->
		    %% Line 3703
		    T1
	      end
	end
'maybe_error_logger'/2 =
    %% Line 3706
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'allowed',_cor20> when 'true' ->
	      %% Line 3707
	      'ok'
	  %% Line 3708
	  <Name,Why> when 'true' ->
	      %% Line 3709
	      case %% Line 3710
		   apply 'expand_stacktrace'/0
		       () of
		<[_cor21|[_cor22|[{'qlc','maybe_error_logger',_cor23,_cor24}|Stacktrace]]]> when 'true' ->
		    let <Trimmer> =
			%% Line 3711
			( fun (_cor5,_cor4,_cor3) ->
			      call 'erlang':'=:='
				  (_cor5, 'erl_eval')
			  -| [{'id',{0,0,'-maybe_error_logger/2-fun-0-'}}] )
		    in  let <Formater> =
			    %% Line 3712
			    ( fun (_cor12,_cor11) ->
				  call 'io_lib':'print'
				      (_cor12, _cor11, 80, -1)
			      -| [{'id',{0,0,'-maybe_error_logger/2-fun-1-'}}] )
			in  let <X> =
				%% Line 3713
				call 'lib':'format_stacktrace'
				    (1, Stacktrace, Trimmer, Formater)
			    in  let <_cor17> =
				    %% Line 3715
				    call 'lists':'flatten'
					(X)
				in  %% Line 3714
				    call 'error_logger':Name
					([113|[108|[99|[58|[32|[116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[102|[105|[108|[101|[32|[119|[97|[115|[32|[110|[101|[101|[100|[101|[100|[32|[102|[111|[114|[32|[126|[119|[10|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3715
																																			  [Why|[_cor17|[]]])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'expand_stacktrace'/0 =
    %% Line 3717
    fun () ->
	let <D> =
	    %% Line 3718
	    call 'erlang':'system_flag'
		('backtrace_depth', 8)
	in  %% Line 3719
	    letrec
		'after$^0'/0 =
		    fun () ->
			%% Line 3723
			call 'erlang':'system_flag'
			    ('backtrace_depth', D)
	    in  try
		    let <_cor1> =
			%% Line 3721
			call 'erlang':'max'
			    (1, D)
		    in  %% Line 3721
			apply 'expand_stacktrace'/1
			    (_cor1)
		of <_cor2> ->
		    do  ( apply 'after$^0'/0
			      ()
			  -| ['compiler_generated'] )
			_cor2
		catch <_cor5,_cor4,_cor3> ->
		    do  ( apply 'after$^0'/0
			      ()
			  -| ['compiler_generated'] )
			primop 'raise'
			    (_cor3, _cor4)
'expand_stacktrace'/1 =
    %% Line 3726
    fun (_cor0) ->
	let <_X_> =
	    %% Line 3727
	    ( call 'erlang':'system_flag'
		  ('backtrace_depth', _cor0)
	      -| ['result_not_wanted'] )
	in  let <_cor2> =
		catch
		    %% Line 3728
		    call 'erlang':'error'
			('foo')
	    in  %% Line 3728
		case _cor2 of
		  <{'EXIT',{'foo',Stacktrace}}> when 'true' ->
		      let <_cor7> =
			  %% Line 3729
			  ( fun (_cor5) ->
				case _cor5 of
				  <{M,_cor16,_cor17,_cor18}> when 'true' ->
				      call 'erlang':'=/='
					  (M, 'qlc')
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'-expand_stacktrace/1-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-expand_stacktrace/1-fun-0-'}}] )
		      in  let <_cor4> =
			      %% Line 3730
			      call 'lists':'reverse'
				  (Stacktrace)
			  in  let <L> =
				  %% Line 3729
				  call 'lists':'takewhile'
				      (_cor7, _cor4)
			      in  %% Line 3731
				  case <> of
				    %% Line 3732
				    <>
					when try
					      let <_cor10> =
						  call 'erlang':'length'
						      (L)
					      in  ( case <> of
						      ( <>
							    when call 'erlang':'<'
								  (_cor10,
								   3) ->
							    let <_cor11> =
								call 'erlang':'length'
								    (Stacktrace)
							    in  call 'erlang':'=:='
								    (_cor11, _cor0)
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_cor14> =
					    %% Line 3733
					    call 'erlang':'+'
						(_cor0, 5)
					in  %% Line 3733
					    apply 'expand_stacktrace'/1
						(_cor14)
				    %% Line 3734
				    <> when 'true' ->
					%% Line 3735
					Stacktrace
				  end
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'write_binary_terms'/3 =
    %% Line 3738
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3739
	    apply 'size_bin'/2
		(_cor2, [])
	in  %% Line 3739
	    case call 'file':'write'
		     (_cor1, _cor3) of
	      %% Line 3740
	      <'ok'> when 'true' ->
		  %% Line 3741
		  'ok'
	      %% Line 3742
	      <Error> when 'true' ->
		  %% Line 3743
		  apply 'file_error'/2
		      (_cor0, Error)
	    end
'post_funs'/1 =
    %% Line 3746
    fun (_cor0) ->
	do  %% Line 3747
	    apply 'end_all_merge_joins'/0
		()
	    %% Line 3748
	    apply 'local_post'/1
		(_cor0)
'local_post'/1 =
    %% Line 3750
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 3751
	    ( fun (_cor1) ->
		  case _cor1 of
		    <'undefined'> when 'true' ->
			'ok'
		    %% Line 3752
		    <F> when 'true' ->
			catch
			    apply F
				()
		  end
	      -| [{'id',{0,0,'-local_post/1-fun-0-'}}] )
	in  %% Line 3751
	    call 'lists':'foreach'
		(_cor3, _cor0)
'call'/4 =
    %% Line 3755
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'undefined',_X_Arg,Default,_X_Post> when 'true' ->
	      %% Line 3756
	      Default
	  %% Line 3757
	  <Fun,Arg,_X_Default,Post> when 'true' ->
	      %% Line 3758
	      try
		  %% Line 3759
		  apply Fun
		      (Arg)
	      of <_cor4> ->
		  _cor4
	      catch <_cor7,_cor6,_cor5> ->
		  do  %% Line 3761
		      apply 'post_funs'/1
			  (Post)
		      let <_cor8> =
			  %% Line 3762
			  call 'erlang':'get_stacktrace'
			      ()
		      in  %% Line 3762
			  call 'erlang':'raise'
			      (_cor7, _cor6, _cor8)
	end
'grd'/2 =
    %% Line 3765
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',_X_Arg> when 'true' ->
	      %% Line 3766
	      'false'
	  %% Line 3767
	  <Fun,Arg> when 'true' ->
	      %% Line 3768
	      case apply Fun
		       (Arg) of
		%% Line 3769
		<'true'> when 'true' ->
		    %% Line 3770
		    'true'
		%% Line 3771
		<_cor5> when 'true' ->
		    %% Line 3772
		    'false'
	      end
	end
'family'/1 =
    %% Line 3775
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3776
	    call 'sofs':'relation'
		(_cor0)
	in  let <_cor2> =
		%% Line 3776
		call 'sofs':'relation_to_family'
		    (_cor1)
	    in  %% Line 3776
		call 'sofs':'to_external'
		    (_cor2)
'family_union'/1 =
    %% Line 3778
    fun (_cor0) ->
	let <R> =
	    %% Line 3779
	    call 'sofs':'relation'
		(_cor0, [{'atom',['atom']}])
	in  let <_cor2> =
		%% Line 3780
		call 'sofs':'relation_to_family'
		    (R)
	    in  let <_cor3> =
		    %% Line 3780
		    call 'sofs':'family_union'
			(_cor2)
		in  %% Line 3780
		    call 'sofs':'to_external'
			(_cor3)
'file_error'/2 =
    %% Line 3782
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,{'error',Reason}> when 'true' ->
	      %% Line 3783
	      apply 'error'/1
		  ({'file_error',File,Reason})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'throw_file_error'/2 =
    %% Line 3787
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,{'error',Reason}> when 'true' ->
	      %% Line 3788
	      apply 'throw_reason'/1
		  ({'file_error',File,Reason})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'throw_file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'throw_reason'/1 =
    %% Line 3792
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3793
	    apply 'error'/1
		(_cor0)
	in  %% Line 3793
	    apply 'throw_error'/1
		(_cor1)
'throw_error'/1 =
    %% Line 3797
    fun (_cor0) ->
	%% Line 3798
	call 'erlang':'throw'
	    (_cor0)
'error'/1 =
    %% Line 3800
    fun (_cor0) ->
	%% Line 3801
	{'error','qlc',_cor0}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('qlc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('qlc', _cor0)
end