module 'c' ['appcall'/4,
	    'bi'/1,
	    'bt'/1,
	    'c'/1,
	    'c'/2,
	    'cd'/1,
	    'display_info'/1,
	    'erlangrc'/0,
	    'erlangrc'/1,
	    'flush'/0,
	    'help'/0,
	    'i'/0,
	    'i'/1,
	    'i'/3,
	    'l'/1,
	    'lc'/1,
	    'lc_batch'/0,
	    'lc_batch'/1,
	    'ls'/0,
	    'ls'/1,
	    'm'/0,
	    'm'/1,
	    'memory'/0,
	    'memory'/1,
	    'module_info'/0,
	    'module_info'/1,
	    'nc'/1,
	    'nc'/2,
	    'ni'/0,
	    'nl'/1,
	    'nregs'/0,
	    'pid'/3,
	    'pwd'/0,
	    'q'/0,
	    'regs'/0,
	    'xm'/1,
	    'y'/1,
	    'y'/2]
    attributes [%% Line 42
		'spec' =
		    %% Line 42
		    [{{'help',0},[{'type',42,'fun',[{'type',42,'product',[]}|[{'atom',42,'ok'}]]}]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'c',1},[{'type',74,'bounded_fun',[{'type',74,'fun',[{'type',74,'product',[{'var',74,'File'}]}|[{'type',74,'union',[{'type',74,'tuple',[{'atom',74,'ok'}|[{'var',74,'Module'}]]}|[{'atom',74,'error'}]]}]]}|[[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'File'}|[{'remote_type',75,[{'atom',75,'file'}|[{'atom',75,'name'}|[[]]]]}]]]]}|[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Module'}|[{'type',76,'module',[]}]]]]}]]]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'c',2},[{'type',80,'bounded_fun',[{'type',80,'fun',[{'type',80,'product',[{'var',80,'File'}|[{'var',80,'Options'}]]}|[{'type',80,'union',[{'type',80,'tuple',[{'atom',80,'ok'}|[{'var',80,'Module'}]]}|[{'atom',80,'error'}]]}]]}|[[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'File'}|[{'remote_type',81,[{'atom',81,'file'}|[{'atom',81,'name'}|[[]]]]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'Options'}|[{'type',82,'list',[{'remote_type',82,[{'atom',82,'compile'}|[{'atom',82,'option'}|[[]]]]}]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Module'}|[{'type',83,'module',[]}]]]]}]]]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'outdir',1},[{'type',100,'fun',[{'type',100,'product',[{'type',100,'list',[{'remote_type',100,[{'atom',100,'compile'}|[{'atom',100,'option'}|[[]]]]}]}]}|[{'remote_type',100,[{'atom',100,'file'}|[{'atom',100,'filename'}|[[]]]]}]]}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'lc',1},[{'type',148,'bounded_fun',[{'type',148,'fun',[{'type',148,'product',[{'var',148,'Files'}]}|[{'type',148,'union',[{'atom',148,'ok'}|[{'atom',148,'error'}]]}]]}|[[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Files'}|[{'type',149,'list',[{'ann_type',149,[{'var',149,'File'}|[{'remote_type',149,[{'atom',149,'erl_compile'}|[{'atom',149,'cmd_line_arg'}|[[]]]]}]]}]}]]]]}]]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'lc_batch',0},[{'type',162,'fun',[{'type',162,'product',[]}|[{'type',162,'no_return',[]}]]}]}],
		%% Line 168
		'spec' =
		    %% Line 168
		    [{{'lc_batch',1},[{'type',168,'fun',[{'type',168,'product',[{'type',168,'list',[{'remote_type',168,[{'atom',168,'erl_compile'}|[{'atom',168,'cmd_line_arg'}|[[]]]]}]}]}|[{'type',168,'no_return',[]}]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'nc',1},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'File'}]}|[{'type',214,'union',[{'type',214,'tuple',[{'atom',214,'ok'}|[{'var',214,'Module'}]]}|[{'atom',214,'error'}]]}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'File'}|[{'remote_type',215,[{'atom',215,'file'}|[{'atom',215,'name'}|[[]]]]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Module'}|[{'type',216,'module',[]}]]]]}]]]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'nc',2},[{'type',220,'bounded_fun',[{'type',220,'fun',[{'type',220,'product',[{'var',220,'File'}|[{'var',220,'Options'}]]}|[{'type',220,'union',[{'type',220,'tuple',[{'atom',220,'ok'}|[{'var',220,'Module'}]]}|[{'atom',220,'error'}]]}]]}|[[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'File'}|[{'remote_type',221,[{'atom',221,'file'}|[{'atom',221,'name'}|[[]]]]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Options'}|[{'type',222,'union',[{'type',222,'list',[{'var',222,'Option'}]}|[{'var',222,'Option'}]]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Option'}|[{'remote_type',223,[{'atom',223,'compile'}|[{'atom',223,'option'}|[[]]]]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Module'}|[{'type',224,'module',[]}]]]]}]]]]]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'l',1},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'Module'}]}|[{'remote_type',248,[{'atom',248,'code'}|[{'atom',248,'load_ret'}|[[]]]]}]]}|[[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Module'}|[{'type',249,'module',[]}]]]]}]]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'nl',1},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'Module'}]}|[{'type',256,'union',[{'atom',256,'abcast'}|[{'atom',256,'error'}]]}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Module'}|[{'type',257,'module',[]}]]]]}]]]}]}],
		%% Line 267
		'spec' =
		    %% Line 267
		    [{{'i',0},[{'type',267,'fun',[{'type',267,'product',[]}|[{'atom',267,'ok'}]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'ni',0},[{'type',271,'fun',[{'type',271,'product',[]}|[{'atom',271,'ok'}]]}]}],
		%% Line 275
		'spec' =
		    %% Line 275
		    [{{'i',1},[{'type',275,'fun',[{'type',275,'product',[{'type',275,'list',[{'type',275,'pid',[]}]}]}|[{'atom',275,'ok'}]]}]}],
		%% Line 280
		'spec' =
		    %% Line 280
		    [{{'i',2},[{'type',280,'fun',[{'type',280,'product',[{'type',280,'list',[{'type',280,'pid',[]}]}|[{'type',280,'non_neg_integer',[]}]]}|[{'atom',280,'ok'}]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'pid',3},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'X'}|[{'var',418,'Y'}|[{'var',418,'Z'}]]]}|[{'type',418,'pid',[]}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'X'}|[{'type',419,'non_neg_integer',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Y'}|[{'type',420,'non_neg_integer',[]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Z'}|[{'type',421,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 428
		'spec' =
		    %% Line 428
		    [{{'i',3},[{'type',428,'bounded_fun',[{'type',428,'fun',[{'type',428,'product',[{'var',428,'X'}|[{'var',428,'Y'}|[{'var',428,'Z'}]]]}|[{'type',428,'list',[{'type',428,'tuple',[{'type',428,'atom',[]}|[{'type',428,'term',[]}]]}]}]]}|[[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'X'}|[{'type',429,'non_neg_integer',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'Y'}|[{'type',430,'non_neg_integer',[]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Z'}|[{'type',431,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 435
		'spec' =
		    %% Line 435
		    [{{'q',0},[{'type',435,'fun',[{'type',435,'product',[]}|[{'type',435,'no_return',[]}]]}]}],
		%% Line 440
		'spec' =
		    %% Line 440
		    [{{'bt',1},[{'type',440,'bounded_fun',[{'type',440,'fun',[{'type',440,'product',[{'var',440,'Pid'}]}|[{'type',440,'union',[{'atom',440,'ok'}|[{'atom',440,'undefined'}]]}]]}|[[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'Pid'}|[{'type',441,'pid',[]}]]]]}]]]}]}],
		%% Line 451
		'spec' =
		    %% Line 451
		    [{{'m',0},[{'type',451,'fun',[{'type',451,'product',[]}|[{'atom',451,'ok'}]]}]}],
		%% Line 504
		'spec' =
		    %% Line 504
		    [{{'m',1},[{'type',504,'bounded_fun',[{'type',504,'fun',[{'type',504,'product',[{'var',504,'Module'}]}|[{'atom',504,'ok'}]]}|[[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'Module'}|[{'type',505,'module',[]}]]]]}]]]}]}],
		%% Line 591
		'spec' =
		    %% Line 591
		    [{{'flush',0},[{'type',591,'fun',[{'type',591,'product',[]}|[{'atom',591,'ok'}]]}]}],
		%% Line 608
		'spec' =
		    %% Line 608
		    [{{'nregs',0},[{'type',608,'fun',[{'type',608,'product',[]}|[{'atom',608,'ok'}]]}]}],
		%% Line 613
		'spec' =
		    %% Line 613
		    [{{'regs',0},[{'type',613,'fun',[{'type',613,'product',[]}|[{'atom',613,'ok'}]]}]}],
		%% Line 688
		'spec' =
		    %% Line 688
		    [{{'pwd',0},[{'type',688,'fun',[{'type',688,'product',[]}|[{'atom',688,'ok'}]]}]}],
		%% Line 698
		'spec' =
		    %% Line 698
		    [{{'cd',1},[{'type',698,'bounded_fun',[{'type',698,'fun',[{'type',698,'product',[{'var',698,'Dir'}]}|[{'atom',698,'ok'}]]}|[[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'Dir'}|[{'remote_type',699,[{'atom',699,'file'}|[{'atom',699,'name'}|[[]]]]}]]]]}]]]}]}],
		%% Line 709
		'spec' =
		    %% Line 709
		    [{{'ls',0},[{'type',709,'fun',[{'type',709,'product',[]}|[{'atom',709,'ok'}]]}]}],
		%% Line 714
		'spec' =
		    %% Line 714
		    [{{'ls',1},[{'type',714,'bounded_fun',[{'type',714,'fun',[{'type',714,'product',[{'var',714,'Dir'}]}|[{'atom',714,'ok'}]]}|[[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Dir'}|[{'remote_type',715,[{'atom',715,'file'}|[{'atom',715,'name'}|[[]]]]}]]]]}]]]}]}],
		%% Line 751
		'spec' =
		    %% Line 751
		    [{{'memory',0},[{'type',751,'bounded_fun',[{'type',751,'fun',[{'type',751,'product',[]}|[{'type',751,'list',[{'type',751,'tuple',[{'var',751,'Type'}|[{'var',751,'Size'}]]}]}]]}|[[{'type',752,'constraint',[{'atom',752,'is_subtype'}|[[{'var',752,'Type'}|[{'type',752,'atom',[]}]]]]}|[{'type',753,'constraint',[{'atom',753,'is_subtype'}|[[{'var',753,'Size'}|[{'type',753,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 757
		'spec' =
		    %% Line 757
		    [{{'memory',1},[{'type',757,'bounded_fun',[{'type',757,'fun',[{'type',757,'product',[{'var',757,'Type'}]}|[{'var',757,'Size'}]]}|[[{'type',758,'constraint',[{'atom',758,'is_subtype'}|[[{'var',758,'Type'}|[{'type',758,'atom',[]}]]]]}|[{'type',759,'constraint',[{'atom',759,'is_subtype'}|[[{'var',759,'Size'}|[{'type',759,'non_neg_integer',[]}]]]]}]]]]}|[{'type',760,'bounded_fun',[{'type',760,'fun',[{'type',760,'product',[{'var',760,'Types'}]}|[{'type',760,'list',[{'type',760,'tuple',[{'var',760,'Type'}|[{'var',760,'Size'}]]}]}]]}|[[{'type',761,'constraint',[{'atom',761,'is_subtype'}|[[{'var',761,'Types'}|[{'type',761,'list',[{'var',761,'Type'}]}]]]]}|[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Type'}|[{'type',762,'atom',[]}]]]]}|[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'Size'}|[{'type',763,'non_neg_integer',[]}]]]]}]]]]]}]]}]]
'help'/0 =
    %% Line 44
    fun () ->
	%% Line 45
	call 'io':'put_chars'
	    (#{#<98>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<80>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<107>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<98>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<107>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<70>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<60>(8,1,'integer',['unsigned'|['big']]),
	       #<70>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<62>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<68>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<119>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<107>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<98>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<98>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<119>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<107>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<88>(8,1,'integer',['unsigned'|['big']]),
	       #<44>(8,1,'integer',['unsigned'|['big']]),
	       #<89>(8,1,'integer',['unsigned'|['big']]),
	       #<44>(8,1,'integer',['unsigned'|['big']]),
	       #<90>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<98>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<60>(8,1,'integer',['unsigned'|['big']]),
	       #<88>(8,1,'integer',['unsigned'|['big']]),
	       #<44>(8,1,'integer',['unsigned'|['big']]),
	       #<89>(8,1,'integer',['unsigned'|['big']]),
	       #<44>(8,1,'integer',['unsigned'|['big']]),
	       #<90>(8,1,'integer',['unsigned'|['big']]),
	       #<62>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<77>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<91>(8,1,'integer',['unsigned'|['big']]),
	       #<70>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<93>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<69>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<68>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<60>(8,1,'integer',['unsigned'|['big']]),
	       #<68>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<62>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<119>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<77>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<98>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<60>(8,1,'integer',['unsigned'|['big']]),
	       #<77>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<62>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<84>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<60>(8,1,'integer',['unsigned'|['big']]),
	       #<84>(8,1,'integer',['unsigned'|['big']]),
	       #<62>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<70>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<60>(8,1,'integer',['unsigned'|['big']]),
	       #<70>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<62>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<77>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<88>(8,1,'integer',['unsigned'|['big']]),
	       #<44>(8,1,'integer',['unsigned'|['big']]),
	       #<89>(8,1,'integer',['unsigned'|['big']]),
	       #<44>(8,1,'integer',['unsigned'|['big']]),
	       #<90>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<118>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<88>(8,1,'integer',['unsigned'|['big']]),
	       #<44>(8,1,'integer',['unsigned'|['big']]),
	       #<89>(8,1,'integer',['unsigned'|['big']]),
	       #<44>(8,1,'integer',['unsigned'|['big']]),
	       #<90>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<80>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<119>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<119>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<107>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<113>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<113>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<58>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<98>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<98>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<120>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<77>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<102>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<104>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<107>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<109>(8,1,'integer',['unsigned'|['big']]),
	       #<111>(8,1,'integer',['unsigned'|['big']]),
	       #<100>(8,1,'integer',['unsigned'|['big']]),
	       #<117>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']]),
	       #<121>(8,1,'integer',['unsigned'|['big']]),
	       #<40>(8,1,'integer',['unsigned'|['big']]),
	       #<70>(8,1,'integer',['unsigned'|['big']]),
	       #<105>(8,1,'integer',['unsigned'|['big']]),
	       #<108>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<41>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<45>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<103>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<110>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<116>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<89>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<99>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']]),
	       #<112>(8,1,'integer',['unsigned'|['big']]),
	       #<97>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<115>(8,1,'integer',['unsigned'|['big']]),
	       #<101>(8,1,'integer',['unsigned'|['big']]),
	       #<114>(8,1,'integer',['unsigned'|['big']]),
	       #<10>(8,1,'integer',['unsigned'|['big']])}#)
'c'/1 =
    %% Line 78
    fun (_cor0) ->
	apply 'c'/2
	    (_cor0, [])
'c'/2 =
    %% Line 85
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Opts0>
	      when call 'erlang':'is_list'
		    (Opts0) ->
	      let <Opts> =
		  %% Line 86
		  ['report_errors'|['report_warnings'|Opts0]]
	      in  %% Line 87
		  case call 'compile':'file'
			   (File, Opts) of
		    %% Line 88
		    <{'ok',Mod}> when 'true' ->
			%% Line 89
			apply 'machine_load'/3
			    (Mod, File, Opts)
		    %% Line 90
		    <{'ok',Mod,_X_Ws}> when 'true' ->
			%% Line 91
			apply 'machine_load'/3
			    (Mod, File, Opts)
		    %% Line 92
		    <Other> when 'true' ->
			%% Line 93
			Other
		  end
	  %% Line 95
	  <File,Opt> when 'true' ->
	      %% Line 96
	      apply 'c'/2
		  (File, [Opt|[]])
	end
'outdir'/1 =
    %% Line 102
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 103
	      [46]
	  %% Line 104
	  <[Opt|Rest]> when 'true' ->
	      %% Line 105
	      case Opt of
		%% Line 106
		<{'outdir',D}> when 'true' ->
		    %% Line 107
		    D
		%% Line 108
		<_cor3> when 'true' ->
		    %% Line 109
		    apply 'outdir'/1
			(Rest)
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'outdir',1}}] )
	    -| ['compiler_generated'] )
	end
'machine_load'/3 =
    %% Line 114
    fun (_cor2,_cor1,_cor0) ->
	let <Dir> =
	    %% Line 115
	    apply 'outdir'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 116
		call 'filename':'basename'
		    (_cor1, [46|[101|[114|[108]]]])
	    in  let <File2> =
		    %% Line 116
		    call 'filename':'join'
			(Dir, _cor4)
		in  %% Line 117
		    case call 'compile':'output_generated'
			     (_cor0) of
		      %% Line 118
		      <'true'> when 'true' ->
			  let <Base> =
			      %% Line 119
			      call 'erlang':'atom_to_list'
				  (_cor2)
			  in  %% Line 120
			      case call 'filename':'basename'
				       (_cor1, [46|[101|[114|[108]]]]) of
				%% Line 121
				<_cor13>
				    when call 'erlang':'=:='
					  (_cor13,
					   Base) ->
				    do  %% Line 122
					call 'code':'purge'
					    (_cor2)
					let <_cor7> =
					    %% Line 123
					    call 'code':'load_abs'
						(File2, _cor2)
					in  %% Line 123
					    apply 'check_load'/2
						(_cor7, _cor2)
				%% Line 124
				<_X_OtherMod> when 'true' ->
				    do  %% Line 125
					call 'io':'format'
					    ([42|[42|[32|[77|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[32|[39|[126|[112|[39|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[102|[105|[108|[101|[32|[110|[97|[109|[101|[32|[39|[126|[116|[112|[39|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 126
																																												 [_cor2|[_cor1|[]]])
					%% Line 127
					{'error','badfile'}
			      end
		      %% Line 129
		      <'false'> when 'true' ->
			  do  %% Line 130
			      call 'io':'format'
				  ([42|[42|[32|[87|[97|[114|[110|[105|[110|[103|[58|[32|[78|[111|[32|[111|[98|[106|[101|[99|[116|[32|[102|[105|[108|[101|[32|[99|[114|[101|[97|[116|[101|[100|[32|[45|[32|[110|[111|[116|[104|[105|[110|[103|[32|[108|[111|[97|[100|[101|[100|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			      %% Line 131
			      'ok'
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
'check_load'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Error = {'error',_X_R},_cor4> when 'true' ->
	      Error
	  %% Line 139
	  <_cor5,Mod> when 'true' ->
	      {'ok',Mod}
	end
'lc'/1 =
    %% Line 151
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 152
		apply 'split'/3
		    (_cor0, [], [])
	in  %% Line 152
	    case _cor1 of
	      %% Line 153
	      <'error'> when 'true' ->
		  'error'
	      %% Line 154
	      <{Opts,Files}> when 'true' ->
		  let <_cor2> =
		      %% Line 155
		      call 'lists':'reverse'
			  (Opts)
		  in  let <COpts> =
			  %% Line 155
			  ['report_errors'|['report_warnings'|_cor2]]
		      in  let <_cor7> =
			      %% Line 156
			      ( fun (_cor5) ->
				    call 'compile':'file'
					(_cor5, COpts)
				-| [{'id',{0,0,'-lc/1-fun-0-'}}] )
			  in  let <_cor4> =
				  %% Line 156
				  call 'lists':'reverse'
				      (Files)
			      in  %% Line 156
				  call 'lists':'foreach'
				      (_cor7, _cor4)
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'lc_batch'/0 =
    %% Line 164
    fun () ->
	do  %% Line 165
	    call 'io':'format'
		([69|[114|[114|[111|[114|[58|[32|[110|[111|[32|[102|[105|[108|[101|[115|[32|[116|[111|[32|[99|[111|[109|[112|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	    %% Line 166
	    call 'erlang':'halt'
		(1)
'lc_batch'/1 =
    %% Line 170
    fun (_cor0) ->
	%% Line 171
	try
	    apply 'split'/3
		(_cor0, [], [])
	of <_cor1> ->
	    case _cor1 of
	      %% Line 172
	      <{Opts,Files}> when 'true' ->
		  let <_cor2> =
		      %% Line 173
		      call 'lists':'reverse'
			  (Opts)
		  in  let <COpts> =
			  %% Line 173
			  ['report_errors'|['report_warnings'|_cor2]]
		      in  let <_cor10> =
			      %% Line 174
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor7) ->
					    case _cor7 of
					      <[File|_cor5]> when 'true' ->
						  let <_cor8> =
						      call 'compile':'file'
							  (File, COpts)
						  in  let <_cor9> =
							  apply 'lc$^0'/1
							      (_cor5)
						      in  ( [_cor8|_cor9]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor7> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor7})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_cor6> =
					call 'lists':'reverse'
					    (Files)
				    in  apply 'lc$^0'/1
					    (_cor6)
				-| ['list_comprehension'] )
			  in  %% Line 175
			      case call 'lists':'member'
				       ('error', _cor10) of
				%% Line 176
				<'true'> when 'true' ->
				    %% Line 177
				    call 'erlang':'halt'
					(1)
				%% Line 178
				<'false'> when 'true' ->
				    %% Line 179
				    call 'erlang':'halt'
					(0)
				( <_cor12> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor12})
				  -| ['compiler_generated'] )
			      end
	      ( <_cor13> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor13})
		-| ['compiler_generated'] )
	    end
	catch <_cor16,_cor15,_cor14> ->
	    case <_cor16,_cor15,_cor14> of
	      %% Line 182
	      <'throw','error',_cor18> when 'true' ->
		  call 'erlang':'halt'
		      (1)
	      ( <_cor16,_cor15,_cor14> when 'true' ->
		    primop 'raise'
			(_cor14, _cor15)
		-| ['compiler_generated'] )
	    end
'split'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <['@i'|[Dir|T]],Opts,Files> when 'true' ->
	      let <_cor3> =
		  %% Line 186
		  call 'erlang':'atom_to_list'
		      (Dir)
	      in  %% Line 186
		  apply 'split'/3
		      (T, [{'i',_cor3}|Opts], Files)
	  %% Line 187
	  <['@o'|[Dir|T]],Opts,Files> when 'true' ->
	      let <_cor4> =
		  %% Line 188
		  call 'erlang':'atom_to_list'
		      (Dir)
	      in  %% Line 188
		  apply 'split'/3
		      (T, [{'outdir',_cor4}|Opts], Files)
	  %% Line 189
	  <['@d'|[Def|T]],Opts,Files> when 'true' ->
	      let <_cor5> =
		  %% Line 190
		  call 'erlang':'atom_to_list'
		      (Def)
	      in  let <_cor6> =
		      %% Line 190
		      apply 'split_def'/2
			  (_cor5, [])
		  in  %% Line 190
		      apply 'split'/3
			  (T, [_cor6|Opts], Files)
	  %% Line 191
	  <[File|T],Opts,Files> when 'true' ->
	      %% Line 192
	      apply 'split'/3
		  (T, Opts, [File|Files])
	  %% Line 193
	  <[],Opts,Files> when 'true' ->
	      %% Line 194
	      {Opts,Files}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'split_def'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[61|T],Res> when 'true' ->
	      let <_cor3> =
		  call 'lists':'reverse'
		      (Res)
	      in  let <_cor4> =
		      call 'erlang':'list_to_atom'
			  (_cor3)
		  in  let <_cor2> =
			  apply 'make_term'/1
			      (T)
		      in  {'d',_cor4,_cor2}
	  %% Line 197
	  <[H|T],Res> when 'true' ->
	      apply 'split_def'/2
		  (T, [H|Res])
	  %% Line 198
	  <[],Res> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (Res)
	      in  let <_cor6> =
		      call 'erlang':'list_to_atom'
			  (_cor5)
		  in  {'d',_cor6}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'split_def',2}}] )
	    -| ['compiler_generated'] )
	end
'make_term'/1 =
    %% Line 200
    fun (_cor0) ->
	%% Line 201
	case call 'erl_scan':'string'
		 (_cor0) of
	  %% Line 202
	  <{'ok',Tokens,_cor5}> when 'true' ->
	      let <_cor1> =
		  %% Line 203
		  call 'erlang':'++'
		      (Tokens, [{'dot',1}])
	      in  %% Line 203
		  case call 'erl_parse':'parse_term'
			   (_cor1) of
		    %% Line 204
		    <{'ok',Term}> when 'true' ->
			Term
		    %% Line 205
		    <{'error',{_cor6,_cor7,Reason}}> when 'true' ->
			do  %% Line 206
			    call 'io':'format'
				([126|[116|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]], [Reason|[_cor0|[]]])
			    %% Line 207
			    call 'erlang':'throw'
				('error')
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 209
	  <{'error',{_cor8,_cor9,Reason},_cor10}> when 'true' ->
	      do  %% Line 210
		  call 'io':'format'
		      ([126|[116|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]], [Reason|[_cor0|[]]])
		  %% Line 211
		  call 'erlang':'throw'
		      ('error')
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'nc'/1 =
    %% Line 218
    fun (_cor0) ->
	apply 'nc'/2
	    (_cor0, [])
'nc'/2 =
    %% Line 226
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Opts0>
	      when call 'erlang':'is_list'
		    (Opts0) ->
	      let <Opts> =
		  %% Line 227
		  call 'erlang':'++'
		      (Opts0, ['report_errors'|['report_warnings']])
	      in  %% Line 228
		  case call 'compile':'file'
			   (File, Opts) of
		    %% Line 229
		    <{'ok',Mod}> when 'true' ->
			let <Dir> =
			    %% Line 230
			    apply 'outdir'/1
				(Opts)
			in  let <_cor5> =
				%% Line 231
				call 'filename':'basename'
				    (File, [46|[101|[114|[108]]]])
			    in  let <_cor4> =
				    %% Line 231
				    call 'code':'objfile_extension'
					()
				in  let <Obj> =
					%% Line 231
					call 'erlang':'++'
					    (_cor5, _cor4)
				    in  let <Fname> =
					    %% Line 232
					    call 'filename':'join'
						(Dir, Obj)
					in  %% Line 233
					    case call 'file':'read_file'
						     (Fname) of
					      %% Line 234
					      <{'ok',Bin}> when 'true' ->
						  do  %% Line 235
						      call 'rpc':'eval_everywhere'
							  ('code', 'load_binary', [Mod|[Fname|[Bin|[]]]])
						      %% Line 236
						      {'ok',Mod}
					      %% Line 237
					      <Other> when 'true' ->
						  %% Line 238
						  Other
					    end
		    %% Line 240
		    <Other> when 'true' ->
			%% Line 241
			Other
		  end
	  %% Line 243
	  <File,Opt>
	      when call 'erlang':'is_atom'
		    (Opt) ->
	      %% Line 244
	      apply 'nc'/2
		  (File, [Opt|[]])
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'nc',2}}] )
	    -| ['compiler_generated'] )
	end
'l'/1 =
    %% Line 251
    fun (_cor0) ->
	do  %% Line 252
	    call 'code':'purge'
		(_cor0)
	    %% Line 253
	    call 'code':'load_file'
		(_cor0)
'nl'/1 =
    %% Line 259
    fun (_cor0) ->
	%% Line 260
	case call 'code':'get_object_code'
		 (_cor0) of
	  %% Line 261
	  <{_X_Module,Bin,Fname}> when 'true' ->
	      %% Line 262
	      call 'rpc':'eval_everywhere'
		  ('code', 'load_binary', [_cor0|[Fname|[Bin|[]]]])
	  %% Line 263
	  <Other> when 'true' ->
	      %% Line 264
	      Other
	end
'i'/0 =
    %% Line 269
    fun () ->
	let <_cor0> =
	    call 'erlang':'processes'
		()
	in  apply 'i'/1
		(_cor0)
'ni'/0 =
    %% Line 273
    fun () ->
	let <_cor0> =
	    apply 'all_procs'/0
		()
	in  apply 'i'/1
		(_cor0)
'i'/1 =
    %% Line 277
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 278
	    call 'erlang':'length'
		(_cor0)
	in  %% Line 278
	    apply 'i'/2
		(_cor0, _cor1)
'i'/2 =
    %% Line 282
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ps,N>
	      when call 'erlang':'=<'
		    (N,
		     100) ->
	      do  %% Line 283
		  apply 'iformat'/5
		      ([80|[105|[100]]], [73|[110|[105|[116|[105|[97|[108|[32|[67|[97|[108|[108]]]]]]]]]]]], [72|[101|[97|[112]]]], [82|[101|[100|[115]]]], %% Line 284
																			    [77|[115|[103|[115]]]])
		  do  %% Line 285
		      apply 'iformat'/5
			  ([82|[101|[103|[105|[115|[116|[101|[114|[101|[100]]]]]]]]]], [67|[117|[114|[114|[101|[110|[116|[32|[70|[117|[110|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]], [83|[116|[97|[99|[107]]]]], [], %% Line 286
																										    [])
		      let <_cor11> =
			  %% Line 287
			  ( fun (_cor8,_cor7) ->
				case <_cor8,_cor7> of
				  <Pid,{R0,M0,H0,S0}> when 'true' ->
				      %% Line 288
				      case apply 'display_info'/1
					       (Pid) of
					<{A,B,C,D}> when 'true' ->
					    let <_cor6> =
						%% Line 289
						call 'erlang':'+'
						    (R0, A)
					    in  let <_cor5> =
						    %% Line 289
						    call 'erlang':'+'
							(M0, B)
						in  let <_cor4> =
							%% Line 289
							call 'erlang':'+'
							    (H0, C)
						    in  let <_cor3> =
							    %% Line 289
							    call 'erlang':'+'
								(S0, D)
							in  %% Line 289
							    {_cor6,_cor5,_cor4,_cor3}
					( <_cor2> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor2})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor10,_cor9> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor10,_cor9})
					  -| [{'function_name',{'-i/2-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-i/2-fun-0-'}}] )
		      in  %% Line 287
			  case call 'lists':'foldl'
				   (_cor11, %% Line 290
					    {0,0,0,0}, %% Line 290
						       Ps) of
			    <{R,M,H,S}> when 'true' ->
				let <_cor15> =
				    %% Line 291
				    apply 'w'/1
					(H)
				in  let <_cor14> =
					%% Line 291
					apply 'w'/1
					    (R)
				    in  let <_cor13> =
					    %% Line 291
					    apply 'w'/1
						(M)
					in  do  %% Line 291
						apply 'iformat'/5
						    ([84|[111|[116|[97|[108]]]]], [], _cor15, _cor14, _cor13)
						let <_cor16> =
						    %% Line 292
						    apply 'w'/1
							(S)
						in  %% Line 292
						    apply 'iformat'/5
							([], [], _cor16, [], [])
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor12})
			      -| ['compiler_generated'] )
			  end
	  %% Line 293
	  <Ps,N> when 'true' ->
	      do  %% Line 294
		  apply 'iformat'/5
		      ([80|[105|[100]]], [73|[110|[105|[116|[105|[97|[108|[32|[67|[97|[108|[108]]]]]]]]]]]], [72|[101|[97|[112]]]], [82|[101|[100|[115]]]], %% Line 295
																			    [77|[115|[103|[115]]]])
		  do  %% Line 296
		      apply 'iformat'/5
			  ([82|[101|[103|[105|[115|[116|[101|[114|[101|[100]]]]]]]]]], [67|[117|[114|[114|[101|[110|[116|[32|[70|[117|[110|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]], [83|[116|[97|[99|[107]]]]], [], %% Line 297
																										    [])
		      %% Line 298
		      apply 'paged_i'/4
			  (Ps, {0,0,0,0}, N, 50)
	end
'paged_i'/4 =
    %% Line 300
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],{R,M,H,S},_cor29,_cor30> when 'true' ->
	      let <_cor6> =
		  %% Line 301
		  apply 'w'/1
		      (H)
	      in  let <_cor5> =
		      %% Line 301
		      apply 'w'/1
			  (R)
		  in  let <_cor4> =
			  %% Line 301
			  apply 'w'/1
			      (M)
		      in  do  %% Line 301
			      apply 'iformat'/5
				  ([84|[111|[116|[97|[108]]]]], [], _cor6, _cor5, _cor4)
			      let <_cor7> =
				  %% Line 302
				  apply 'w'/1
				      (S)
			      in  %% Line 302
				  apply 'iformat'/5
				      ([], [], _cor7, [], [])
	  %% Line 303
	  <Ps,Acc,N,Page> when 'true' ->
	      let <Pids,Rest,N1> =
		  %% Line 305
		  case <> of
		    <>
			when call 'erlang':'>'
			      (N,
			       Page) ->
			%% Line 306
			case call 'lists':'split'
				 (Page, Ps) of
			  <{L1,L2}> when 'true' ->
			      let <_cor9> =
				  %% Line 307
				  call 'erlang':'-'
				      (N, Page)
			      in  %% Line 307
				  <L1,L2,_cor9>
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor8})
			    -| ['compiler_generated'] )
			end
		    %% Line 308
		    <> when 'true' ->
			%% Line 309
			<Ps,[],0>
		  end
	      in  let <_cor21> =
		      %% Line 311
		      ( fun (_cor18,_cor17) ->
			    case <_cor18,_cor17> of
			      <Pid,{R,M,H,S}> when 'true' ->
				  %% Line 312
				  case apply 'display_info'/1
					   (Pid) of
				    <{A,B,C,D}> when 'true' ->
					let <_cor16> =
					    %% Line 313
					    call 'erlang':'+'
						(R, A)
					in  let <_cor15> =
						%% Line 313
						call 'erlang':'+'
						    (M, B)
					    in  let <_cor14> =
						    %% Line 313
						    call 'erlang':'+'
							(H, C)
						in  let <_cor13> =
							%% Line 313
							call 'erlang':'+'
							    (S, D)
						    in  %% Line 313
							{_cor16,_cor15,_cor14,_cor13}
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor20,_cor19> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor20,_cor19})
				      -| [{'function_name',{'-paged_i/4-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-paged_i/4-fun-0-'}}] )
		  in  let <NewAcc> =
			  %% Line 311
			  call 'lists':'foldl'
			      (_cor21, %% Line 314
				       Acc, %% Line 314
					    Pids)
		      in  %% Line 315
			  case Rest of
			    %% Line 316
			    <[_cor31|_cor32]> when 'true' ->
				let <_cor23> =
				    %% Line 317
				    ( fun () ->
					  apply 'paged_i'/4
					      (Rest, NewAcc, N1, Page)
				      -| [{'id',{0,0,'-paged_i/4-fun-1-'}}] )
				in  %% Line 317
				    apply 'choice'/1
					(_cor23)
			    %% Line 318
			    <[]> when 'true' ->
				%% Line 319
				apply 'paged_i'/4
				    ([], NewAcc, 0, Page)
			    ( <_cor24> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor24})
			      -| ['compiler_generated'] )
			  end
	end
'choice'/1 =
    %% Line 322
    fun (_cor0) ->
	%% Line 323
	case apply 'get_line'/2
		 ('(c)ontinue (q)uit -->', [99|[10]]) of
	  %% Line 324
	  <[99|[10]]> when 'true' ->
	      %% Line 325
	      apply _cor0
		  ()
	  %% Line 326
	  <[113|[10]]> when 'true' ->
	      %% Line 327
	      'quit'
	  %% Line 328
	  <_cor3> when 'true' ->
	      %% Line 329
	      apply 'choice'/1
		  (_cor0)
	end
'get_line'/2 =
    %% Line 332
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 333
	    call 'io':'get_line'
		(_cor1)
	in  %% Line 333
	    case apply 'line_string'/1
		     (_cor2) of
	      %% Line 334
	      <[10]> when 'true' ->
		  _cor0
	      %% Line 336
	      <L> when 'true' ->
		  %% Line 337
		  L
	    end
'line_string'/1 =
    %% Line 342
    fun (_cor0) ->
	case _cor0 of
	  <Binary>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      call 'unicode':'characters_to_list'
		  (Binary)
	  %% Line 343
	  <Other> when 'true' ->
	      Other
	end
'mfa_string'/1 =
    %% Line 345
    fun (_cor0) ->
	case _cor0 of
	  <Fun>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 346
	      case call 'erlang':'fun_info'
		       (Fun, 'module') of
		<{'module',M}> when 'true' ->
		    %% Line 347
		    case call 'erlang':'fun_info'
			     (Fun, 'name') of
		      <{'name',F}> when 'true' ->
			  %% Line 348
			  case call 'erlang':'fun_info'
				   (Fun, 'arity') of
			    <{'arity',A}> when 'true' ->
				%% Line 349
				apply 'mfa_string'/1
				    ({M,F,A})
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 350
	  <{M,F,A}> when 'true' ->
	      %% Line 351
	      call 'io_lib':'format'
		  ([126|[119|[58|[126|[119|[47|[126|[119]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 352
	  <X> when 'true' ->
	      %% Line 353
	      apply 'w'/1
		  (X)
	end
'display_info'/1 =
    %% Line 355
    fun (_cor0) ->
	%% Line 356
	case apply 'pinfo'/1
		 (_cor0) of
	  %% Line 357
	  <'undefined'> when 'true' ->
	      {0,0,0,0}
	  %% Line 358
	  <Info> when 'true' ->
	      let <Call> =
		  %% Line 359
		  apply 'initial_call'/1
		      (Info)
	      in  let <_cor4> =
		      %% Line 360
		      case apply 'fetch'/2
			       ('current_function', Info) of
			%% Line 361
			<{Mod,F,Args}>
			    when call 'erlang':'is_list'
				  (Args) ->
			    let <_cor2> =
				%% Line 362
				call 'erlang':'length'
				    (Args)
			    in  %% Line 362
				{Mod,F,_cor2}
			%% Line 363
			<Other> when 'true' ->
			    %% Line 364
			    Other
		      end
		  in  let <Reds> =
			  %% Line 366
			  apply 'fetch'/2
			      ('reductions', Info)
		      in  let <_cor7> =
			      %% Line 367
			      apply 'fetch'/2
				  ('messages', Info)
			  in  let <LM> =
				  %% Line 367
				  call 'erlang':'length'
				      (_cor7)
			      in  let <HS> =
				      %% Line 368
				      apply 'fetch'/2
					  ('heap_size', Info)
				  in  let <SS> =
					  %% Line 369
					  apply 'fetch'/2
					      ('stack_size', Info)
				      in  let <_cor15> =
					      %% Line 370
					      apply 'w'/1
						  (_cor0)
					  in  let <_cor14> =
						  %% Line 370
						  apply 'mfa_string'/1
						      (Call)
					      in  let <_cor13> =
						      %% Line 371
						      apply 'w'/1
							  (HS)
						  in  let <_cor12> =
							  %% Line 372
							  apply 'w'/1
							      (Reds)
						      in  let <_cor11> =
							      %% Line 372
							      apply 'w'/1
								  (LM)
							  in  do  %% Line 370
								  apply 'iformat'/5
								      (_cor15, _cor14, _cor13, _cor12, _cor11)
								  let <_cor19> =
								      %% Line 373
								      case apply 'fetch'/2
									       ('registered_name', Info) of
									%% Line 374
									<0> when 'true' ->
									    []
									%% Line 375
									<X> when 'true' ->
									    apply 'w'/1
										(X)
								      end
								  in  let <_cor17> =
									  %% Line 377
									  apply 'mfa_string'/1
									      (_cor4)
								      in  let <_cor16> =
									      %% Line 378
									      apply 'w'/1
										  (SS)
									  in  do  %% Line 373
										  apply 'iformat'/5
										      (_cor19, _cor17, _cor16, %% Line 379
													       [], %% Line 380
														   [])
										  %% Line 381
										  {Reds,LM,HS,SS}
	end
'initial_call'/1 =
    %% Line 388
    fun (_cor0) ->
	%% Line 389
	case apply 'fetch'/2
		 ('initial_call', _cor0) of
	  %% Line 390
	  <{'proc_lib','init_p',_cor3}> when 'true' ->
	      %% Line 391
	      call 'proc_lib':'translate_initial_call'
		  (_cor0)
	  %% Line 392
	  <ICall> when 'true' ->
	      %% Line 393
	      ICall
	end
'iformat'/5 =
    %% Line 396
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 397
	call 'io':'format'
	    ([126|[45|[50|[49|[115|[32|[126|[45|[51|[51|[115|[32|[126|[56|[115|[32|[126|[56|[115|[32|[126|[52|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]])
'all_procs'/0 =
    %% Line 399
    fun () ->
	%% Line 400
	case call 'erlang':'is_alive'
		 () of
	  %% Line 401
	  <'true'> when 'true' ->
	      let <_cor4> =
		  ( fun (_cor2) ->
			call 'rpc':'call'
			    (_cor2, 'erlang', 'processes', [])
		    -| [{'id',{0,0,'-all_procs/0-fun-0-'}}] )
	      in  let <_cor0> =
		      %% Line 402
		      call 'erlang':'node'
			  ()
		  in  let <_cor1> =
			  %% Line 402
			  call 'erlang':'nodes'
			      ()
		      in  call 'lists':'flatmap'
			      (_cor4, %% Line 402
				      [_cor0|_cor1])
	  %% Line 403
	  <'false'> when 'true' ->
	      call 'erlang':'processes'
		  ()
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'pinfo'/1 =
    %% Line 406
    fun (_cor0) ->
	%% Line 407
	case call 'erlang':'is_alive'
		 () of
	  %% Line 408
	  <'true'> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'node'
		      (_cor0)
	      in  call 'rpc':'call'
		      (_cor1, 'erlang', 'process_info', [_cor0|[]])
	  %% Line 409
	  <'false'> when 'true' ->
	      call 'erlang':'process_info'
		  (_cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'fetch'/2 =
    %% Line 412
    fun (_cor1,_cor0) ->
	%% Line 413
	case call 'lists':'keyfind'
		 (_cor1, 1, _cor0) of
	  %% Line 414
	  <{_cor5,Val}> when 'true' ->
	      Val
	  %% Line 415
	  <'false'> when 'true' ->
	      0
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'pid'/3 =
    %% Line 423
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 424
	    call 'erlang':'integer_to_list'
		(_cor2)
	in  let <_cor6> =
		%% Line 425
		call 'erlang':'integer_to_list'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 426
		    call 'erlang':'integer_to_list'
			(_cor0)
		in  let <_cor4> =
			%% Line 426
			call 'erlang':'++'
			    (_cor3, [62])
		    in  let <_cor5> =
			    %% Line 425
			    [46|_cor4]
			in  let <_cor7> =
				%% Line 425
				call 'erlang':'++'
				    (_cor6, _cor5)
			    in  let <_cor8> =
				    %% Line 424
				    [46|_cor7]
				in  let <_cor10> =
					%% Line 424
					call 'erlang':'++'
					    (_cor9, _cor8)
				    in  let <_cor11> =
					    %% Line 424
					    [60|_cor10]
					in  %% Line 424
					    call 'erlang':'list_to_pid'
						(_cor11)
'i'/3 =
    %% Line 433
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    apply 'pid'/3
		(_cor2, _cor1, _cor0)
	in  apply 'pinfo'/1
		(_cor3)
'q'/0 =
    %% Line 437
    fun () ->
	%% Line 438
	call 'init':'stop'
	    ()
'bt'/1 =
    %% Line 443
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 444
		call 'erlang':'process_display'
		    (_cor0, 'backtrace')
	in  %% Line 444
	    case _cor1 of
	      %% Line 445
	      <{'EXIT',_cor4}> when 'true' ->
		  %% Line 446
		  'undefined'
	      %% Line 447
	      <_cor5> when 'true' ->
		  %% Line 448
		  'ok'
	    end
'm'/0 =
    %% Line 453
    fun () ->
	do  %% Line 454
	    apply 'mformat'/2
		([77|[111|[100|[117|[108|[101]]]]]], [70|[105|[108|[101]]]])
	    let <_cor4> =
		%% Line 455
		( fun (_cor2) ->
		      case _cor2 of
			<{Mod,File}> when 'true' ->
			    apply 'mformat'/2
				(Mod, File)
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'-m/0-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-m/0-fun-0-'}}] )
	    in  let <_cor0> =
		    %% Line 455
		    call 'code':'all_loaded'
			()
		in  let <_cor1> =
			%% Line 455
			call 'lists':'sort'
			    (_cor0)
		    in  %% Line 455
			call 'lists':'foreach'
			    (_cor4, _cor1)
'mformat'/2 =
    %% Line 457
    fun (_cor1,_cor0) ->
	%% Line 458
	call 'io':'format'
	    ([126|[45|[50|[48|[115|[32|[32|[126|[116|[115|[10]]]]]]]]]]], [_cor1|[_cor0|[]]])
'erlangrc'/0 =
    %% Line 464
    fun () ->
	%% Line 465
	case call 'init':'get_argument'
		 ('home') of
	  %% Line 466
	  <{'ok',[[Home|[]]|[]]}> when 'true' ->
	      %% Line 467
	      apply 'erlangrc'/1
		  ([Home|[]])
	  %% Line 468
	  <_cor1> when 'true' ->
	      %% Line 469
	      apply 'f_p_e'/2
		  ([[46]], [46|[101|[114|[108|[97|[110|[103]]]]]]])
	end
'erlangrc'/1 =
    %% Line 472
    fun (_cor0) ->
	case _cor0 of
	  <[Home|[]]> when 'true' ->
	      %% Line 473
	      apply 'f_p_e'/2
		  ([[46]|[Home|[]]], [46|[101|[114|[108|[97|[110|[103]]]]]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'erlangrc',1}}] )
	    -| ['compiler_generated'] )
	end
'error'/2 =
    %% Line 475
    fun (_cor1,_cor0) ->
	%% Line 476
	call 'error_logger':'error_msg'
	    (_cor1, _cor0)
'f_p_e'/2 =
    %% Line 478
    fun (_cor1,_cor0) ->
	%% Line 479
	case call 'file':'path_eval'
		 (_cor1, _cor0) of
	  %% Line 480
	  <Enoent = {'error','enoent'}> when 'true' ->
	      %% Line 481
	      Enoent
	  %% Line 482
	  <{'error',E = {Line,_X_Mod,_X_Term}}> when 'true' ->
	      let <_cor2> =
		  %% Line 484
		  call 'file':'format_error'
		      (E)
	      in  do  %% Line 483
		      apply 'error'/2
			  ([102|[105|[108|[101|[58|[112|[97|[116|[104|[95|[101|[118|[97|[108|[40|[126|[116|[112|[44|[126|[116|[112|[41|[58|[32|[101|[114|[114|[111|[114|[32|[111|[110|[32|[108|[105|[110|[101|[32|[126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 484
																																					      [_cor1|[_cor0|[Line|[_cor2|[]]]]])
		      %% Line 485
		      'ok'
	  %% Line 486
	  <{'error',E}> when 'true' ->
	      let <_cor3> =
		  %% Line 488
		  call 'file':'format_error'
		      (E)
	      in  do  %% Line 487
		      apply 'error'/2
			  ([102|[105|[108|[101|[58|[112|[97|[116|[104|[95|[101|[118|[97|[108|[40|[126|[116|[112|[44|[126|[116|[112|[41|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 488
																								       [_cor1|[_cor0|[_cor3|[]]]])
		      %% Line 489
		      'ok'
	  %% Line 490
	  <Other> when 'true' ->
	      %% Line 491
	      Other
	end
'bi'/1 =
    %% Line 494
    fun (_cor0) ->
	%% Line 495
	case call 'erlang':'system_info'
		 (_cor0) of
	  %% Line 496
	  <X>
	      when call 'erlang':'is_binary'
		    (X) ->
	      let <_cor1> =
		  call 'erlang':'binary_to_list'
		      (X)
	      in  call 'io':'put_chars'
		      (_cor1)
	  %% Line 497
	  <X>
	      when call 'erlang':'is_list'
		    (X) ->
	      call 'io':'put_chars'
		  (X)
	  %% Line 498
	  <X> when 'true' ->
	      call 'io':'format'
		  ([126|[119]], [X|[]])
	end
'm'/1 =
    %% Line 507
    fun (_cor0) ->
	let <L> =
	    %% Line 508
	    call _cor0:'module_info'
		()
	in  %% Line 509
	    case call 'lists':'keyfind'
		     ('exports', 1, L) of
	      <{'exports',E}> when 'true' ->
		  let <Time> =
		      %% Line 510
		      apply 'get_compile_time'/1
			  (L)
		  in  let <COpts> =
			  %% Line 511
			  apply 'get_compile_options'/1
			      (L)
		      in  do  %% Line 512
			      call 'io':'format'
				  ([77|[111|[100|[117|[108|[101|[32|[126|[119|[32|[99|[111|[109|[112|[105|[108|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
			      do  %% Line 512
				  apply 'print_time'/1
				      (Time)
				  do  %% Line 513
				      call 'io':'format'
					  ([67|[111|[109|[112|[105|[108|[101|[114|[32|[111|[112|[116|[105|[111|[110|[115|[58|[32|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [COpts|[]])
				      do  %% Line 514
					  apply 'print_object_file'/1
					      (_cor0)
					  do  %% Line 515
					      call 'io':'format'
						  ([69|[120|[112|[111|[114|[116|[115|[58|[32|[126|[110]]]]]]]]]]], [])
					      let <_cor5> =
						  %% Line 515
						  call 'lists':'keysort'
						      (1, E)
					      in  %% Line 515
						  apply 'print_exports'/1
						      (_cor5)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'print_object_file'/1 =
    %% Line 517
    fun (_cor0) ->
	%% Line 518
	case call 'code':'is_loaded'
		 (_cor0) of
	  %% Line 519
	  <{'file',File}> when 'true' ->
	      %% Line 520
	      call 'io':'format'
		  ([79|[98|[106|[101|[99|[116|[32|[102|[105|[108|[101|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 521
	  <_cor3> when 'true' ->
	      %% Line 522
	      'ignore'
	end
'get_compile_time'/1 =
    %% Line 525
    fun (_cor0) ->
	%% Line 526
	case apply 'get_compile_info'/2
		 (_cor0, 'time') of
	  %% Line 527
	  <{'ok',Val}> when 'true' ->
	      Val
	  %% Line 528
	  <'error'> when 'true' ->
	      'notime'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'get_compile_options'/1 =
    %% Line 531
    fun (_cor0) ->
	%% Line 532
	case apply 'get_compile_info'/2
		 (_cor0, 'options') of
	  %% Line 533
	  <{'ok',Val}> when 'true' ->
	      Val
	  %% Line 534
	  <'error'> when 'true' ->
	      []
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'get_compile_info'/2 =
    %% Line 537
    fun (_cor1,_cor0) ->
	%% Line 538
	case call 'lists':'keyfind'
		 ('compile', 1, _cor1) of
	  %% Line 539
	  <{'compile',I}> when 'true' ->
	      %% Line 540
	      case call 'lists':'keyfind'
		       (_cor0, 1, I) of
		%% Line 541
		<{_cor6,Val}>
		    when call 'erlang':'=:='
			  (_cor6,
			   _cor0) ->
		    {'ok',Val}
		%% Line 542
		<'false'> when 'true' ->
		    'error'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 544
	  <'false'> when 'true' ->
	      'error'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'print_exports'/1 =
    %% Line 547
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when try
		    let <_cor1> =
			call 'erlang':'length'
			    (_cor0)
		    in  call 'erlang':'>'
			    (_cor1, 16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 548
	      apply 'split_print_exports'/1
		  (X)
	  %% Line 549
	  <[]> when 'true' ->
	      'ok'
	  %% Line 550
	  <[{F,A}|Tail]> when 'true' ->
	      do  %% Line 551
		  call 'io':'format'
		      ([32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[119|[47|[126|[119|[126|[110]]]]]]]]]]]]]]]], [F|[A|[]]])
		  %% Line 552
		  apply 'print_exports'/1
		      (Tail)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'print_exports',1}}] )
	    -| ['compiler_generated'] )
	end
'split_print_exports'/1 =
    %% Line 554
    fun (_cor0) ->
	let <Len> =
	    %% Line 555
	    call 'erlang':'length'
		(_cor0)
	in  let <Mid> =
		%% Line 556
		call 'erlang':'div'
		    (Len, 2)
	    in  let <L1> =
		    %% Line 557
		    call 'lists':'sublist'
			(_cor0, 1, Mid)
		in  let <_cor6> =
			%% Line 558
			call 'erlang':'+'
			    (Mid, 1)
		    in  let <_cor4> =
			    %% Line 558
			    call 'erlang':'-'
				(Len, Mid)
			in  let <_cor5> =
				%% Line 558
				call 'erlang':'+'
				    (_cor4, 1)
			    in  let <L2> =
				    %% Line 558
				    call 'lists':'sublist'
					(_cor0, _cor6, _cor5)
				in  %% Line 559
				    apply 'split_print_exports'/2
					(L1, L2)
'split_print_exports'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],[{F,A}|T]> when 'true' ->
	      do  %% Line 563
		  call 'io':'format'
		      ([126|[45|[51|[48|[115|[126|[119|[47|[126|[119|[126|[110]]]]]]]]]]]], [[32]|[F|[A|[]]]])
		  %% Line 564
		  apply 'split_print_exports'/2
		      ([], T)
	  %% Line 565
	  <[{F1,A1}|T1],[{F2,A2}|T2]> when 'true' ->
	      let <_cor3> =
		  %% Line 566
		  call 'io_lib':'format'
		      ([126|[119|[47|[126|[119]]]]], [F1|[A1|[]]])
	      in  let <Str> =
		      %% Line 566
		      call 'lists':'flatten'
			  (_cor3)
		  in  do  %% Line 567
			  call 'io':'format'
			      ([126|[45|[51|[48|[115|[126|[119|[47|[126|[119|[126|[110]]]]]]]]]]]], [Str|[F2|[A2|[]]]])
			  %% Line 568
			  apply 'split_print_exports'/2
			      (T1, T2)
	  %% Line 569
	  <[],[]> when 'true' ->
	      'ok'
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'split_print_exports',2}}] )
	    -| ['compiler_generated'] )
	end
'print_time'/1 =
    %% Line 571
    fun (_cor0) ->
	case _cor0 of
	  <{Year,Month,Day,Hour,Min,_X_Secs}> when 'true' ->
	      let <_cor1> =
		  %% Line 572
		  apply 'month'/1
		      (Month)
	      in  do  %% Line 572
		      call 'io':'format'
			  ([68|[97|[116|[101|[58|[32|[126|[115|[32|[126|[119|[32|[126|[119|[44|[32]]]]]]]]]]]]]]]], [_cor1|[Day|[Year|[]]]])
		      %% Line 573
		      call 'io':'format'
			  ([84|[105|[109|[101|[58|[32|[126|[46|[50|[46|[48|[119|[46|[126|[46|[50|[46|[48|[119|[126|[110]]]]]]]]]]]]]]]]]]]]], [Hour|[Min|[]]])
	  %% Line 574
	  <'notime'> when 'true' ->
	      %% Line 575
	      call 'io':'format'
		  ([78|[111|[32|[99|[111|[109|[112|[105|[108|[101|[32|[116|[105|[109|[101|[32|[105|[110|[102|[111|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'print_time',1}}] )
	    -| ['compiler_generated'] )
	end
'month'/1 =
    %% Line 577
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      [74|[97|[110|[117|[97|[114|[121]]]]]]]
	  %% Line 578
	  <2> when 'true' ->
	      [70|[101|[98|[114|[117|[97|[114|[121]]]]]]]]
	  %% Line 579
	  <3> when 'true' ->
	      [77|[97|[114|[99|[104]]]]]
	  %% Line 580
	  <4> when 'true' ->
	      [65|[112|[114|[105|[108]]]]]
	  %% Line 581
	  <5> when 'true' ->
	      [77|[97|[121]]]
	  %% Line 582
	  <6> when 'true' ->
	      [74|[117|[110|[101]]]]
	  %% Line 583
	  <7> when 'true' ->
	      [74|[117|[108|[121]]]]
	  %% Line 584
	  <8> when 'true' ->
	      [65|[117|[103|[117|[115|[116]]]]]]
	  %% Line 585
	  <9> when 'true' ->
	      [83|[101|[112|[116|[101|[109|[98|[101|[114]]]]]]]]]
	  %% Line 586
	  <10> when 'true' ->
	      [79|[99|[116|[111|[98|[101|[114]]]]]]]
	  %% Line 587
	  <11> when 'true' ->
	      [78|[111|[118|[101|[109|[98|[101|[114]]]]]]]]
	  %% Line 588
	  <12> when 'true' ->
	      [68|[101|[99|[101|[109|[98|[101|[114]]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'month',1}}] )
	    -| ['compiler_generated'] )
	end
'flush'/0 =
    %% Line 593
    fun () ->
	%% Line 594
	receive
	  %% Line 595
	  <X> when 'true' ->
	      let <_cor0> =
		  %% Line 596
		  call 'io':'getopts'
		      ()
	      in  do  %% Line 596
		      case call 'lists':'keyfind'
			       ('encoding', 1, _cor0) of
			%% Line 597
			<{'encoding','unicode'}> when 'true' ->
			    %% Line 598
			    call 'io':'format'
				([83|[104|[101|[108|[108|[32|[103|[111|[116|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]], [X|[]])
			%% Line 599
			<_cor2> when 'true' ->
			    %% Line 600
			    call 'io':'format'
				([83|[104|[101|[108|[108|[32|[103|[111|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]]], [X|[]])
		      end
		      %% Line 602
		      apply 'flush'/0
			  ()
	after %% Line 603
	      0 ->
	  %% Line 604
	  'ok'
'nregs'/0 =
    %% Line 610
    fun () ->
	let <_cor3> =
	    %% Line 611
	    ( fun (_cor1) ->
		  apply 'print_node_regs'/1
		      (_cor1)
	      -| [{'id',{0,0,'-nregs/0-fun-0-'}}] )
	in  let <_cor0> =
		%% Line 611
		apply 'all_regs'/0
		    ()
	    in  %% Line 611
		call 'lists':'foreach'
		    (_cor3, _cor0)
'regs'/0 =
    %% Line 615
    fun () ->
	let <_cor1> =
	    %% Line 616
	    call 'erlang':'node'
		()
	in  let <_cor0> =
		%% Line 616
		call 'erlang':'registered'
		    ()
	    in  %% Line 616
		apply 'print_node_regs'/1
		    ({_cor1,_cor0})
'all_regs'/0 =
    %% Line 618
    fun () ->
	%% Line 619
	case call 'erlang':'is_alive'
		 () of
	  %% Line 620
	  <'true'> when 'true' ->
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[%% Line 621
				N|_cor1]> when 'true' ->
				  let <_cor5> =
				      call 'rpc':'call'
					  (N, 'erlang', 'registered', [])
				  in  let <_cor6> =
					  %% Line 621
					  apply 'lc$^0'/1
					      (_cor1)
				      in  ( [{N,_cor5}|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor2> =
			%% Line 621
			call 'erlang':'node'
			    ()
		    in  let <_cor3> =
			    %% Line 621
			    call 'erlang':'nodes'
				()
			in  apply 'lc$^0'/1
				(%% Line 621
				 [_cor2|_cor3])
		-| ['list_comprehension'] )
	  %% Line 622
	  <'false'> when 'true' ->
	      let <_cor8> =
		  call 'erlang':'node'
		      ()
	      in  let <_cor7> =
		      call 'erlang':'registered'
			  ()
		  in  [{_cor8,_cor7}|[]]
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'print_node_regs'/1 =
    %% Line 625
    fun (_cor0) ->
	case _cor0 of
	  <{N,List}>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor1> =
		  %% Line 626
		  call 'lists':'sort'
		      (List)
	      in  %% Line 626
		  case apply 'pids_and_ports'/5
			   (N, _cor1, [], [], []) of
		    <{Pids,Ports,_X_Dead}> when 'true' ->
			do  %% Line 628
			    call 'io':'format'
				([126|[110|[42|[42|[32|[82|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[112|[114|[111|[99|[115|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[119|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
			    do  %% Line 629
				apply 'procformat'/5
				    ([78|[97|[109|[101]]]], [80|[105|[100]]], [73|[110|[105|[116|[105|[97|[108|[32|[67|[97|[108|[108]]]]]]]]]]]], [82|[101|[100|[115]]]], [77|[115|[103|[115]]]])
				let <_cor5> =
				    %% Line 630
				    ( fun (_cor3) ->
					  case _cor3 of
					    <{Name,PI,Pid}> when 'true' ->
						apply 'procline'/3
						    (Name, PI, Pid)
					    ( <_cor4> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor4})
						    -| [{'function_name',{'-print_node_regs/1-fun-0-',1}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-print_node_regs/1-fun-0-'}}] )
				in  do  %% Line 630
					call 'lists':'foreach'
					    (_cor5, Pids)
					do  %% Line 632
					    call 'io':'format'
						([126|[110|[42|[42|[32|[82|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[112|[111|[114|[116|[115|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[119|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
					    do  %% Line 633
						apply 'portformat'/3
						    ([78|[97|[109|[101]]]], [73|[100]], [67|[111|[109|[109|[97|[110|[100]]]]]]])
						let <_cor8> =
						    %% Line 634
						    ( fun (_cor6) ->
							  case _cor6 of
							    <{Name,PI,Id}> when 'true' ->
								apply 'portline'/3
								    (Name, PI, Id)
							    ( <_cor7> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor7})
								    -| [{'function_name',{'-print_node_regs/1-fun-1-',1}}] )
							      -| ['compiler_generated'] )
							  end
						      -| [{'id',{0,0,'-print_node_regs/1-fun-1-'}}] )
						in  %% Line 634
						    call 'lists':'foreach'
							(_cor8, Ports)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'print_node_regs',1}}] )
	    -| ['compiler_generated'] )
	end
'pids_and_ports'/5 =
    %% Line 636
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor16,[],Pids,Ports,Dead> when 'true' ->
	      let <_cor7> =
		  %% Line 637
		  call 'lists':'reverse'
		      (Pids)
	      in  let <_cor6> =
		      %% Line 637
		      call 'lists':'reverse'
			  (Ports)
		  in  let <_cor5> =
			  %% Line 637
			  call 'lists':'reverse'
			      (Dead)
		      in  %% Line 637
			  {_cor7,_cor6,_cor5}
	  %% Line 639
	  <Node,[Name|Names],Pids,Ports,Dead> when 'true' ->
	      %% Line 640
	      case apply 'pwhereis'/2
		       (Node, Name) of
		%% Line 641
		<Pid>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    let <_cor8> =
			%% Line 642
			apply 'pinfo'/1
			    (Pid)
		    in  %% Line 642
			apply 'pids_and_ports'/5
			    (Node, Names, [{Name,_cor8,Pid}|Pids], %% Line 643
								   Ports, %% Line 643
									  Dead)
		%% Line 644
		<Id>
		    when call 'erlang':'is_port'
			  (Id) ->
		    let <_cor9> =
			%% Line 646
			apply 'portinfo'/1
			    (Id)
		    in  %% Line 645
			apply 'pids_and_ports'/5
			    (Node, Names, Pids, %% Line 646
						[{Name,_cor9,Id}|Ports], %% Line 646
									 Dead)
		%% Line 647
		<'undefined'> when 'true' ->
		    %% Line 648
		    apply 'pids_and_ports'/5
			(Node, Names, Pids, Ports, [Name|Dead])
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'pids_and_ports',5}}] )
	    -| ['compiler_generated'] )
	end
'pwhereis'/2 =
    %% Line 651
    fun (_cor1,_cor0) ->
	%% Line 652
	case call 'erlang':'is_alive'
		 () of
	  %% Line 653
	  <'true'> when 'true' ->
	      call 'rpc':'call'
		  (_cor1, 'erlang', 'whereis', [_cor0|[]])
	  %% Line 654
	  <'false'> when 'true' ->
	      call 'erlang':'whereis'
		  (_cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'portinfo'/1 =
    %% Line 657
    fun (_cor0) ->
	%% Line 658
	case call 'erlang':'is_alive'
		 () of
	  %% Line 659
	  <'true'> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'node'
		      (_cor0)
	      in  let <_cor2> =
		      call 'rpc':'call'
			  (_cor1, 'erlang', 'port_info', [_cor0|['name']])
		  in  [_cor2|[]]
	  %% Line 660
	  <'false'> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'port_info'
		      (_cor0, 'name')
	      in  [_cor3|[]]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'procline'/3 =
    %% Line 663
    fun (_cor2,_cor1,_cor0) ->
	let <Call> =
	    %% Line 664
	    apply 'initial_call'/1
		(_cor1)
	in  let <Reds> =
		%% Line 665
		apply 'fetch'/2
		    ('reductions', _cor1)
	    in  let <_cor5> =
		    %% Line 666
		    apply 'fetch'/2
			('messages', _cor1)
		in  let <LM> =
			%% Line 666
			call 'erlang':'length'
			    (_cor5)
		    in  let <_cor12> =
			    %% Line 667
			    call 'io_lib':'format'
				([126|[119]], [_cor2|[]])
			in  let <_cor11> =
				%% Line 668
				call 'io_lib':'format'
				    ([126|[119]], [_cor0|[]])
			    in  let <_cor9> =
				    %% Line 669
				    apply 'mfa_string'/1
					(Call)
				in  let <_cor10> =
					%% Line 669
					call 'io_lib':'format'
					    ([126|[115]], [_cor9|[]])
				    in  let <_cor8> =
					    %% Line 670
					    call 'erlang':'integer_to_list'
						(Reds)
					in  let <_cor7> =
						%% Line 670
						call 'erlang':'integer_to_list'
						    (LM)
					    in  %% Line 667
						apply 'procformat'/5
						    (_cor12, _cor11, _cor10, _cor8, _cor7)
'procformat'/5 =
    %% Line 672
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 673
	call 'io':'format'
	    ([126|[45|[50|[49|[115|[32|[126|[45|[49|[50|[115|[32|[126|[45|[50|[53|[115|[32|[126|[49|[50|[115|[32|[126|[52|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]])
'portline'/3 =
    %% Line 675
    fun (_cor2,_cor1,_cor0) ->
	let <Cmd> =
	    %% Line 676
	    apply 'fetch'/2
		('name', _cor1)
	in  let <_cor5> =
		%% Line 677
		call 'io_lib':'format'
		    ([126|[119]], [_cor2|[]])
	    in  let <_cor4> =
		    %% Line 678
		    call 'erlang':'port_to_list'
			(_cor0)
		in  %% Line 677
		    apply 'portformat'/3
			(_cor5, _cor4, %% Line 679
				       Cmd)
'portformat'/3 =
    %% Line 681
    fun (_cor2,_cor1,_cor0) ->
	%% Line 682
	call 'io':'format'
	    ([126|[45|[50|[49|[115|[32|[126|[45|[49|[53|[115|[32|[126|[45|[52|[48|[115|[126|[110]]]]]]]]]]]]]]]]]]], [_cor2|[_cor1|[_cor0|[]]]])
'pwd'/0 =
    %% Line 690
    fun () ->
	%% Line 691
	case call 'file':'get_cwd'
		 () of
	  %% Line 692
	  <{'ok',Str}> when 'true' ->
	      let <_cor3> =
		  %% Line 693
		  call 'io':'format'
		      ([126|[116|[115|[10]]]], [Str|[]])
	      in  %% Line 693
		  case _cor3 of
		    <'ok'> when 'true' ->
			( _cor3
			  -| ['compiler_generated'] )
		    ( <_cor0> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor0})
		      -| ['compiler_generated'] )
		  end
	  %% Line 694
	  <{'error',_cor4}> when 'true' ->
	      let <_cor5> =
		  %% Line 695
		  call 'io':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[100|[101|[116|[101|[114|[109|[105|[110|[101|[32|[99|[117|[114|[114|[101|[110|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      in  %% Line 695
		  case _cor5 of
		    <'ok'> when 'true' ->
			( _cor5
			  -| ['compiler_generated'] )
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'cd'/1 =
    %% Line 701
    fun (_cor0) ->
	let <_X_> =
	    %% Line 702
	    ( call 'file':'set_cwd'
		  (_cor0)
	      -| ['result_not_wanted'] )
	in  %% Line 703
	    apply 'pwd'/0
		()
'ls'/0 =
    %% Line 711
    fun () ->
	%% Line 712
	apply 'ls'/1
	    ([46])
'ls'/1 =
    %% Line 717
    fun (_cor0) ->
	%% Line 718
	case call 'file':'list_dir'
		 (_cor0) of
	  %% Line 719
	  <{'ok',Entries}> when 'true' ->
	      let <_cor1> =
		  %% Line 720
		  call 'lists':'sort'
		      (Entries)
	      in  %% Line 720
		  apply 'ls_print'/1
		      (_cor1)
	  %% Line 721
	  <{'error','enotdir'}> when 'true' ->
	      %% Line 722
	      apply 'ls_print'/1
		  ([_cor0|[]])
	  %% Line 723
	  <{'error',Error}> when 'true' ->
	      let <_cor2> =
		  %% Line 724
		  call 'file':'format_error'
		      (Error)
	      in  %% Line 724
		  call 'io':'format'
		      ([126|[116|[115|[10]]]], [_cor2|[]])
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'ls_print'/1 =
    %% Line 727
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'ok'
	  %% Line 728
	  <L> when 'true' ->
	      let <_cor1> =
		  %% Line 729
		  apply 'lengths'/2
		      (L, [])
	      in  let <_cor2> =
		      %% Line 729
		      call 'lists':'max'
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 729
			  call 'lists':'min'
			      ([_cor2|[40]])
		      in  let <Width> =
			      %% Line 729
			      call 'erlang':'+'
				  (_cor3, 5)
			  in  %% Line 730
			      apply 'ls_print'/3
				  (L, Width, 0)
	end
'ls_print'/3 =
    %% Line 732
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,Width,Len>
	      when try
		    let <_cor3> =
			call 'erlang':'+'
			    (Width, Len)
		    in  call 'erlang':'>='
			    (_cor3, 80)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 733
		  call 'io':'nl'
		      ()
		  %% Line 734
		  apply 'ls_print'/3
		      (X, Width, 0)
	  %% Line 735
	  <[H|T],Width,Len> when 'true' ->
	      do  %% Line 736
		  call 'io':'format'
		      ([126|[45|[42|[116|[115]]]]], [Width|[H|[]]])
		  let <_cor4> =
		      %% Line 737
		      call 'erlang':'+'
			  (Len, Width)
		  in  %% Line 737
		      apply 'ls_print'/3
			  (T, Width, _cor4)
	  %% Line 738
	  <[],_cor8,_cor9> when 'true' ->
	      %% Line 739
	      call 'io':'nl'
		  ()
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ls_print',3}}] )
	    -| ['compiler_generated'] )
	end
'lengths'/2 =
    %% Line 741
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],L> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'length'
		      (H)
	      in  apply 'lengths'/2
		      (T, [_cor2|L])
	  %% Line 742
	  <[],L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'lengths',2}}] )
	    -| ['compiler_generated'] )
	end
'w'/1 =
    %% Line 744
    fun (_cor0) ->
	%% Line 745
	call 'io_lib':'write'
	    (_cor0)
'memory'/0 =
    %% Line 755
    fun () ->
	call 'erlang':'memory'
	    ()
'memory'/1 =
    %% Line 765
    fun (_cor0) ->
	call 'erlang':'memory'
	    (_cor0)
'xm'/1 =
    %% Line 771
    fun (_cor0) ->
	%% Line 772
	apply 'appcall'/4
	    ('tools', 'xref', 'm', [_cor0|[]])
'y'/1 =
    %% Line 778
    fun (_cor0) ->
	apply 'y'/2
	    (_cor0, [])
'y'/2 =
    %% Line 781
    fun (_cor1,_cor0) ->
	%% Line 782
	apply 'appcall'/4
	    ('parsetools', 'yecc', 'file', [_cor1|[_cor0|[]]])
'appcall'/4 =
    %% Line 790
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 791
	try
	    %% Line 792
	    call 'erlang':'apply'
		(_cor2, _cor1, _cor0)
	of <_cor4> ->
	    _cor4
	catch <_cor7,_cor6,_cor5> ->
	    case <_cor7,_cor6,_cor5> of
	      %% Line 794
	      <'error','undef',_cor14> when 'true' ->
		  %% Line 795
		  case call 'erlang':'get_stacktrace'
			   () of
		    %% Line 796
		    <[{_cor15,_cor16,_cor17,_cor18}|_cor19]>
			when let <_cor22> =
			      call 'erlang':'=:='
				  (_cor15, _cor2)
			  in  let <_cor20> =
				  call 'erlang':'=:='
				      (_cor16, _cor1)
			      in  let <_cor21> =
				      call 'erlang':'=:='
					  (_cor17, _cor0)
				  in  let <_cor23> =
					  call 'erlang':'and'
					      (_cor20, _cor21)
				      in  call 'erlang':'and'
					      (_cor22, _cor23) ->
			let <Arity> =
			    %% Line 797
			    call 'erlang':'length'
				(_cor0)
			in  %% Line 798
			    call 'io':'format'
				([67|[97|[108|[108|[32|[116|[111|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[105|[110|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 799
																																		    [_cor2|[_cor1|[Arity|[_cor3|[]]]]])
		    %% Line 800
		    <Stk> when 'true' ->
			%% Line 801
			call 'erlang':'raise'
			    ('error', 'undef', Stk)
		  end
	      ( <_cor7,_cor6,_cor5> when 'true' ->
		    primop 'raise'
			(_cor5, _cor6)
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('c')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('c', _cor0)
end