module 'random' ['module_info'/0,
		 'module_info'/1,
		 'seed'/0,
		 'seed'/1,
		 'seed'/3,
		 'seed0'/0,
		 'uniform'/0,
		 'uniform'/1,
		 'uniform_s'/1,
		 'uniform_s'/2]
    attributes [%% Line 36
		'type' =
		    %% Line 36
		    [{'ran',{'type',36,'tuple',[{'type',36,'integer',[]}|[{'type',36,'integer',[]}|[{'type',36,'integer',[]}]]]},[]}],
		%% Line 40
		'spec' =
		    %% Line 40
		    [{{'seed0',0},[{'type',40,'fun',[{'type',40,'product',[]}|[{'type',40,'ran',[]}]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'seed',0},[{'type',48,'fun',[{'type',48,'product',[]}|[{'type',48,'ran',[]}]]}]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'seed',1},[{'type',60,'bounded_fun',[{'type',60,'fun',[{'type',60,'product',[{'type',60,'tuple',[{'var',60,'A1'}|[{'var',60,'A2'}|[{'var',60,'A3'}]]]}]}|[{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'ran',[]}]]}]]}|[[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'A1'}|[{'type',61,'integer',[]}]]]]}|[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'A2'}|[{'type',62,'integer',[]}]]]]}|[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'A3'}|[{'type',63,'integer',[]}]]]]}]]]]]}]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'seed',3},[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[{'var',71,'A1'}|[{'var',71,'A2'}|[{'var',71,'A3'}]]]}|[{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'ran',[]}]]}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'A1'}|[{'type',72,'integer',[]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'A2'}|[{'type',73,'integer',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'A3'}|[{'type',74,'integer',[]}]]]]}]]]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'seed_put',1},[{'type',82,'fun',[{'type',82,'product',[{'type',82,'ran',[]}]}|[{'type',82,'union',[{'atom',82,'undefined'}|[{'type',82,'ran',[]}]]}]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'uniform',0},[{'type',90,'fun',[{'type',90,'product',[]}|[{'type',90,'float',[]}]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'uniform',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'N'}]}|[{'type',108,'pos_integer',[]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'N'}|[{'type',109,'pos_integer',[]}]]]]}]]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'uniform_s',1},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'State0'}]}|[{'type',120,'tuple',[{'type',120,'float',[]}|[{'var',120,'State1'}]]}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'State0'}|[{'type',121,'ran',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'State1'}|[{'type',122,'ran',[]}]]]]}]]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'uniform_s',2},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'N'}|[{'var',135,'State0'}]]}|[{'type',135,'tuple',[{'type',135,'integer',[]}|[{'var',135,'State1'}]]}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'N'}|[{'type',136,'pos_integer',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'State0'}|[{'type',137,'ran',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'State1'}|[{'type',138,'ran',[]}]]]]}]]]]]}]}]]
'seed0'/0 =
    %% Line 42
    fun () ->
	%% Line 43
	{3172,9814,20125}
'seed'/0 =
    %% Line 50
    fun () ->
	let <_cor0> =
	    %% Line 51
	    apply 'seed0'/0
		()
	in  %% Line 51
	    case apply 'seed_put'/1
		     (_cor0) of
	      %% Line 52
	      <'undefined'> when 'true' ->
		  apply 'seed0'/0
		      ()
	      %% Line 53
	      <Tuple = {_cor2,_cor3,_cor4}> when 'true' ->
		  Tuple
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
'seed'/1 =
    %% Line 65
    fun (_cor0) ->
	case _cor0 of
	  <{A1,A2,A3}> when 'true' ->
	      %% Line 66
	      apply 'seed'/3
		  (A1, A2, A3)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'seed',1}}] )
	    -| ['compiler_generated'] )
	end
'seed'/3 =
    %% Line 76
    fun (_cor2,_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 77
	    call 'erlang':'abs'
		(_cor2)
	in  let <_cor13> =
		%% Line 77
		call 'erlang':'rem'
		    (_cor12, 30268)
	    in  let <_cor14> =
		    %% Line 77
		    call 'erlang':'+'
			(_cor13, 1)
		in  let <_cor8> =
			%% Line 78
			call 'erlang':'abs'
			    (_cor1)
		    in  let <_cor9> =
			    %% Line 78
			    call 'erlang':'rem'
				(_cor8, 30306)
			in  let <_cor10> =
				%% Line 78
				call 'erlang':'+'
				    (_cor9, 1)
			    in  let <_cor4> =
				    %% Line 79
				    call 'erlang':'abs'
					(_cor0)
				in  let <_cor5> =
					%% Line 79
					call 'erlang':'rem'
					    (_cor4, 30322)
				    in  let <_cor6> =
					    %% Line 79
					    call 'erlang':'+'
						(_cor5, 1)
					in  %% Line 77
					    apply 'seed_put'/1
						({_cor14,_cor10,_cor6})
'seed_put'/1 =
    %% Line 84
    fun (_cor0) ->
	%% Line 85
	call 'erlang':'put'
	    ('random_seed', _cor0)
'uniform'/0 =
    %% Line 92
    fun () ->
	let <_cor1> =
	    %% Line 93
	    case call 'erlang':'get'
		     ('random_seed') of
	      %% Line 94
	      <'undefined'> when 'true' ->
		  apply 'seed0'/0
		      ()
	      %% Line 95
	      <Tuple> when 'true' ->
		  Tuple
	    end
	in  %% Line 93
	    case _cor1 of
	      <{A1,A2,A3}> when 'true' ->
		  let <_cor3> =
		      %% Line 97
		      call 'erlang':'*'
			  (A1, 171)
		  in  let <B1> =
			  %% Line 97
			  call 'erlang':'rem'
			      (_cor3, 30269)
		      in  let <_cor5> =
			      %% Line 98
			      call 'erlang':'*'
				  (A2, 172)
			  in  let <B2> =
				  %% Line 98
				  call 'erlang':'rem'
				      (_cor5, 30307)
			      in  let <_cor7> =
				      %% Line 99
				      call 'erlang':'*'
					  (A3, 170)
				  in  let <B3> =
					  %% Line 99
					  call 'erlang':'rem'
					      (_cor7, 30323)
				      in  do  %% Line 100
					      call 'erlang':'put'
						  ('random_seed', {B1,B2,B3})
					      let <_cor11> =
						  %% Line 101
						  call 'erlang':'/'
						      (B1, 30269)
					      in  let <_cor10> =
						      %% Line 101
						      call 'erlang':'/'
							  (B2, 30307)
						  in  let <_cor12> =
							  %% Line 101
							  call 'erlang':'+'
							      (_cor11, _cor10)
						      in  let <_cor9> =
							      %% Line 101
							      call 'erlang':'/'
								  (B3, 30323)
							  in  let <R> =
								  %% Line 101
								  call 'erlang':'+'
								      (_cor12, _cor9)
							      in  let <_cor14> =
								      %% Line 102
								      call 'erlang':'trunc'
									  (R)
								  in  %% Line 102
								      call 'erlang':'-'
									  (R, _cor14)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'uniform'/1 =
    %% Line 111
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 1)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 112
		  apply 'uniform'/0
		      ()
	      in  let <_cor4> =
		      %% Line 112
		      call 'erlang':'*'
			  (_cor3, N)
		  in  let <_cor5> =
			  %% Line 112
			  call 'erlang':'trunc'
			      (_cor4)
		      in  %% Line 112
			  call 'erlang':'+'
			      (_cor5, 1)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'uniform',1}}] )
	    -| ['compiler_generated'] )
	end
'uniform_s'/1 =
    %% Line 124
    fun (_cor0) ->
	case _cor0 of
	  <{A1,A2,A3}> when 'true' ->
	      let <_cor1> =
		  %% Line 125
		  call 'erlang':'*'
		      (A1, 171)
	      in  let <B1> =
		      %% Line 125
		      call 'erlang':'rem'
			  (_cor1, 30269)
		  in  let <_cor3> =
			  %% Line 126
			  call 'erlang':'*'
			      (A2, 172)
		      in  let <B2> =
			      %% Line 126
			      call 'erlang':'rem'
				  (_cor3, 30307)
			  in  let <_cor5> =
				  %% Line 127
				  call 'erlang':'*'
				      (A3, 170)
			      in  let <B3> =
				      %% Line 127
				      call 'erlang':'rem'
					  (_cor5, 30323)
				  in  let <_cor9> =
					  %% Line 128
					  call 'erlang':'/'
					      (B1, 30269)
				      in  let <_cor8> =
					      %% Line 128
					      call 'erlang':'/'
						  (B2, 30307)
					  in  let <_cor10> =
						  %% Line 128
						  call 'erlang':'+'
						      (_cor9, _cor8)
					      in  let <_cor7> =
						      %% Line 128
						      call 'erlang':'/'
							  (B3, 30323)
						  in  let <R> =
							  %% Line 128
							  call 'erlang':'+'
							      (_cor10, _cor7)
						      in  let <_cor12> =
							      %% Line 129
							      call 'erlang':'trunc'
								  (R)
							  in  let <_cor13> =
								  %% Line 129
								  call 'erlang':'-'
								      (R, _cor12)
							      in  %% Line 129
								  {_cor13,{B1,B2,B3}}
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'uniform_s',1}}] )
	    -| ['compiler_generated'] )
	end
'uniform_s'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,State0>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor3> =
			call 'erlang':'>='
			    (N, 1)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 141
	      case apply 'uniform_s'/1
		       (State0) of
		<{F,State1}> when 'true' ->
		    let <_cor5> =
			%% Line 142
			call 'erlang':'*'
			    (F, N)
		    in  let <_cor6> =
			    %% Line 142
			    call 'erlang':'trunc'
				(_cor5)
			in  let <_cor7> =
				%% Line 142
				call 'erlang':'+'
				    (_cor6, 1)
			    in  %% Line 142
				{_cor7,State1}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'uniform_s',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('random')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('random', _cor0)
end