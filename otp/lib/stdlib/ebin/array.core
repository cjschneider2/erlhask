module 'array' ['default'/1,
		'fix'/1,
		'foldl'/3,
		'foldr'/3,
		'from_list'/1,
		'from_list'/2,
		'from_orddict'/1,
		'from_orddict'/2,
		'get'/2,
		'is_array'/1,
		'is_fix'/1,
		'map'/2,
		'module_info'/0,
		'module_info'/1,
		'new'/0,
		'new'/1,
		'new'/2,
		'relax'/1,
		'reset'/2,
		'resize'/1,
		'resize'/2,
		'set'/3,
		'size'/1,
		'sparse_foldl'/3,
		'sparse_foldr'/3,
		'sparse_map'/2,
		'sparse_size'/1,
		'sparse_to_list'/1,
		'sparse_to_orddict'/1,
		'to_list'/1,
		'to_orddict'/1]
    attributes [%% Line 89
		'export_type' =
		    %% Line 89
		    [{'array',0}|[{'array',1}]],
		%% Line 149
		'type' =
		    %% Line 149
		    [{'element_tuple',{'type',150,'union',[{'type',150,'tuple',[{'var',150,'T'}|[{'var',150,'T'}|[{'var',150,'T'}|[{'var',150,'T'}|[{'var',150,'T'}|[{'var',150,'T'}|[{'var',150,'T'}|[{'var',150,'T'}|[{'var',150,'T'}|[{'var',150,'T'}]]]]]]]]]]}|[{'type',151,'tuple',[{'type',151,'element_tuple',[{'var',151,'T'}]}|[{'type',151,'element_tuple',[{'var',151,'T'}]}|[{'type',151,'element_tuple',[{'var',151,'T'}]}|[{'type',152,'element_tuple',[{'var',152,'T'}]}|[{'type',152,'element_tuple',[{'var',152,'T'}]}|[{'type',152,'element_tuple',[{'var',152,'T'}]}|[{'type',153,'element_tuple',[{'var',153,'T'}]}|[{'type',153,'element_tuple',[{'var',153,'T'}]}|[{'type',153,'element_tuple',[{'var',153,'T'}]}|[{'type',154,'element_tuple',[{'var',154,'T'}]}|[{'type',154,'non_neg_integer',[]}]]]]]]]]]]]}]]},[{'var',149,'T'}]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'elements',{'type',156,'union',[{'type',156,'non_neg_integer',[]}|[{'type',157,'element_tuple',[{'var',157,'T'}]}|[{'type',158,'nil',[]}]]]},[{'var',156,'T'}]}],
		%% Line 160
		'type' =
		    %% Line 160
		    [{{'record','array'},[{'typed_record_field',{'record_field',160,{'atom',160,'size'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'type',160,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',161,{'atom',161,'max'}},{'type',161,'union',[{'atom',161,'undefined'}|[{'type',161,'non_neg_integer',[]}]]}}|[{'record_field',163,{'atom',163,'default'}}|[{'typed_record_field',{'record_field',164,{'atom',164,'elements'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'elements',[{'var',164,'_'}]}]]}}]]]],[]}],
		%% Line 167
		'opaque' =
		    %% Line 167
		    [{'array',{'type',167,'array',[{'type',167,'term',[]}]},[]}],
		%% Line 169
		'opaque' =
		    %% Line 169
		    [{'array',{'type',170,'record',[{'atom',170,'array'}|[{'type',170,'field_type',[{'atom',170,'default'}|[{'var',170,'Type'}]]}|[{'type',170,'field_type',[{'atom',170,'elements'}|[{'type',170,'elements',[{'var',170,'Type'}]}]]}]]]},[{'var',169,'Type'}]}],
		%% Line 176
		'type' =
		    %% Line 176
		    [{'array_indx',{'type',176,'non_neg_integer',[]},[]}],
		%% Line 178
		'type' =
		    %% Line 178
		    [{'array_opt',{'type',178,'union',[{'type',178,'tuple',[{'atom',178,'fixed'}|[{'type',178,'boolean',[]}]]}|[{'atom',178,'fixed'}|[{'type',179,'tuple',[{'atom',179,'default'}|[{'ann_type',179,[{'var',179,'Type'}|[{'type',179,'term',[]}]]}]]}|[{'type',180,'tuple',[{'atom',180,'size'}|[{'ann_type',180,[{'var',180,'N'}|[{'type',180,'non_neg_integer',[]}]]}]]}|[{'paren_type',181,[{'ann_type',181,[{'var',181,'N'}|[{'type',181,'non_neg_integer',[]}]]}]}]]]]]},[]}],
		%% Line 182
		'type' =
		    %% Line 182
		    [{'array_opts',{'type',182,'union',[{'type',182,'array_opt',[]}|[{'type',182,'list',[{'type',182,'array_opt',[]}]}]]},[]}],
		%% Line 184
		'type' =
		    %% Line 184
		    [{'indx_pair',{'type',184,'tuple',[{'ann_type',184,[{'var',184,'Index'}|[{'type',184,'array_indx',[]}]]}|[{'var',184,'Type'}]]},[{'var',184,'Type'}]}],
		%% Line 185
		'type' =
		    %% Line 185
		    [{'indx_pairs',{'type',185,'list',[{'type',185,'indx_pair',[{'var',185,'Type'}]}]},[{'var',185,'Type'}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'new',0},[{'type',195,'fun',[{'type',195,'product',[]}|[{'type',195,'array',[]}]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'new',1},[{'type',238,'fun',[{'type',238,'product',[{'ann_type',238,[{'var',238,'Options'}|[{'type',238,'array_opts',[]}]]}]}|[{'type',238,'array',[]}]]}]}],
		%% Line 258
		'spec' =
		    %% Line 258
		    [{{'new',2},[{'type',258,'fun',[{'type',258,'product',[{'ann_type',258,[{'var',258,'Size'}|[{'type',258,'non_neg_integer',[]}]]}|[{'ann_type',258,[{'var',258,'Options'}|[{'type',258,'array_opts',[]}]]}]]}|[{'type',258,'array',[]}]]}]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'find_max',2},[{'type',298,'fun',[{'type',298,'product',[{'type',298,'integer',[]}|[{'type',298,'integer',[]}]]}|[{'type',298,'integer',[]}]]}]}],
		%% Line 311
		'spec' =
		    %% Line 311
		    [{{'is_array',1},[{'type',311,'fun',[{'type',311,'product',[{'ann_type',311,[{'var',311,'X'}|[{'type',311,'term',[]}]]}]}|[{'type',311,'boolean',[]}]]}]}],
		%% Line 326
		'spec' =
		    %% Line 326
		    [{{'size',1},[{'type',326,'fun',[{'type',326,'product',[{'ann_type',326,[{'var',326,'Array'}|[{'type',326,'array',[]}]]}]}|[{'type',326,'non_neg_integer',[]}]]}]}],
		%% Line 336
		'spec' =
		    %% Line 336
		    [{{'default',1},[{'type',336,'fun',[{'type',336,'product',[{'ann_type',336,[{'var',336,'Array'}|[{'type',336,'array',[{'var',336,'Type'}]}]]}]}|[{'ann_type',336,[{'var',336,'Value'}|[{'var',336,'Type'}]]}]]}]}],
		%% Line 419
		'spec' =
		    %% Line 419
		    [{{'fix',1},[{'type',419,'fun',[{'type',419,'product',[{'ann_type',419,[{'var',419,'Array'}|[{'type',419,'array',[{'var',419,'Type'}]}]]}]}|[{'type',419,'array',[{'var',419,'Type'}]}]]}]}],
		%% Line 429
		'spec' =
		    %% Line 429
		    [{{'is_fix',1},[{'type',429,'fun',[{'type',429,'product',[{'ann_type',429,[{'var',429,'Array'}|[{'type',429,'array',[]}]]}]}|[{'type',429,'boolean',[]}]]}]}],
		%% Line 467
		'spec' =
		    %% Line 467
		    [{{'relax',1},[{'type',467,'fun',[{'type',467,'product',[{'ann_type',467,[{'var',467,'Array'}|[{'type',467,'array',[{'var',467,'Type'}]}]]}]}|[{'type',467,'array',[{'var',467,'Type'}]}]]}]}],
		%% Line 492
		'spec' =
		    %% Line 492
		    [{{'resize',2},[{'type',492,'fun',[{'type',492,'product',[{'ann_type',492,[{'var',492,'Size'}|[{'type',492,'non_neg_integer',[]}]]}|[{'ann_type',492,[{'var',492,'Array'}|[{'type',492,'array',[{'var',492,'Type'}]}]]}]]}|[{'type',493,'array',[{'var',493,'Type'}]}]]}]}],
		%% Line 524
		'spec' =
		    %% Line 524
		    [{{'resize',1},[{'type',524,'fun',[{'type',524,'product',[{'ann_type',524,[{'var',524,'Array'}|[{'type',524,'array',[{'var',524,'Type'}]}]]}]}|[{'type',524,'array',[{'var',524,'Type'}]}]]}]}],
		%% Line 574
		'spec' =
		    %% Line 574
		    [{{'set',3},[{'type',574,'fun',[{'type',574,'product',[{'ann_type',574,[{'var',574,'I'}|[{'type',574,'array_indx',[]}]]}|[{'ann_type',574,[{'var',574,'Value'}|[{'var',574,'Type'}]]}|[{'ann_type',574,[{'var',574,'Array'}|[{'type',574,'array',[{'var',574,'Type'}]}]]}]]]}|[{'type',574,'array',[{'var',574,'Type'}]}]]}]}],
		%% Line 637
		'spec' =
		    %% Line 637
		    [{{'get',2},[{'type',637,'fun',[{'type',637,'product',[{'ann_type',637,[{'var',637,'I'}|[{'type',637,'array_indx',[]}]]}|[{'ann_type',637,[{'var',637,'Array'}|[{'type',637,'array',[{'var',637,'Type'}]}]]}]]}|[{'ann_type',637,[{'var',637,'Value'}|[{'var',637,'Type'}]]}]]}]}],
		%% Line 677
		'spec' =
		    %% Line 677
		    [{{'reset',2},[{'type',677,'fun',[{'type',677,'product',[{'ann_type',677,[{'var',677,'I'}|[{'type',677,'array_indx',[]}]]}|[{'ann_type',677,[{'var',677,'Array'}|[{'type',677,'array',[{'var',677,'Type'}]}]]}]]}|[{'type',677,'array',[{'var',677,'Type'}]}]]}]}],
		%% Line 763
		'spec' =
		    %% Line 763
		    [{{'to_list',1},[{'type',763,'fun',[{'type',763,'product',[{'ann_type',763,[{'var',763,'Array'}|[{'type',763,'array',[{'var',763,'Type'}]}]]}]}|[{'type',763,'list',[{'ann_type',763,[{'var',763,'Value'}|[{'var',763,'Type'}]]}]}]]}]}],
		%% Line 836
		'spec' =
		    %% Line 836
		    [{{'sparse_to_list',1},[{'type',836,'fun',[{'type',836,'product',[{'ann_type',836,[{'var',836,'Array'}|[{'type',836,'array',[{'var',836,'Type'}]}]]}]}|[{'type',836,'list',[{'ann_type',836,[{'var',836,'Value'}|[{'var',836,'Type'}]]}]}]]}]}],
		%% Line 903
		'spec' =
		    %% Line 903
		    [{{'from_list',1},[{'type',903,'fun',[{'type',903,'product',[{'ann_type',903,[{'var',903,'List'}|[{'type',903,'list',[{'ann_type',903,[{'var',903,'Value'}|[{'var',903,'Type'}]]}]}]]}]}|[{'type',903,'array',[{'var',903,'Type'}]}]]}]}],
		%% Line 915
		'spec' =
		    %% Line 915
		    [{{'from_list',2},[{'type',915,'fun',[{'type',915,'product',[{'ann_type',915,[{'var',915,'List'}|[{'type',915,'list',[{'ann_type',915,[{'var',915,'Value'}|[{'var',915,'Type'}]]}]}]]}|[{'ann_type',915,[{'var',915,'Default'}|[{'type',915,'term',[]}]]}]]}|[{'type',915,'array',[{'var',915,'Type'}]}]]}]}],
		%% Line 1014
		'spec' =
		    %% Line 1014
		    [{{'to_orddict',1},[{'type',1014,'fun',[{'type',1014,'product',[{'ann_type',1014,[{'var',1014,'Array'}|[{'type',1014,'array',[{'var',1014,'Type'}]}]]}]}|[{'type',1014,'indx_pairs',[{'ann_type',1014,[{'var',1014,'Value'}|[{'var',1014,'Type'}]]}]}]]}]}],
		%% Line 1051
		'spec' =
		    %% Line 1051
		    [{{'push_pairs',4},[{'type',1051,'fun',[{'type',1051,'product',[{'type',1051,'non_neg_integer',[]}|[{'type',1051,'array_indx',[]}|[{'type',1051,'term',[]}|[{'type',1051,'indx_pairs',[{'var',1051,'Type'}]}]]]]}|[{'type',1052,'indx_pairs',[{'var',1052,'Type'}]}]]}]}],
		%% Line 1059
		'spec' =
		    %% Line 1059
		    [{{'push_tuple_pairs',4},[{'type',1059,'fun',[{'type',1059,'product',[{'type',1059,'non_neg_integer',[]}|[{'type',1059,'array_indx',[]}|[{'type',1059,'term',[]}|[{'type',1059,'indx_pairs',[{'var',1059,'Type'}]}]]]]}|[{'type',1060,'indx_pairs',[{'var',1060,'Type'}]}]]}]}],
		%% Line 1106
		'spec' =
		    %% Line 1106
		    [{{'sparse_to_orddict',1},[{'type',1106,'fun',[{'type',1106,'product',[{'ann_type',1106,[{'var',1106,'Array'}|[{'type',1106,'array',[{'var',1106,'Type'}]}]]}]}|[{'type',1106,'indx_pairs',[{'ann_type',1106,[{'var',1106,'Value'}|[{'var',1106,'Type'}]]}]}]]}]}],
		%% Line 1143
		'spec' =
		    %% Line 1143
		    [{{'sparse_push_tuple_pairs',5},[{'type',1143,'fun',[{'type',1143,'product',[{'type',1143,'non_neg_integer',[]}|[{'type',1143,'array_indx',[]}|[{'var',1144,'_'}|[{'var',1144,'_'}|[{'type',1144,'indx_pairs',[{'var',1144,'Type'}]}]]]]]}|[{'type',1144,'indx_pairs',[{'var',1144,'Type'}]}]]}]}],
		%% Line 1186
		'spec' =
		    %% Line 1186
		    [{{'from_orddict',1},[{'type',1186,'fun',[{'type',1186,'product',[{'ann_type',1186,[{'var',1186,'Orddict'}|[{'type',1186,'indx_pairs',[{'ann_type',1186,[{'var',1186,'Value'}|[{'var',1186,'Type'}]]}]}]]}]}|[{'type',1186,'array',[{'var',1186,'Type'}]}]]}]}],
		%% Line 1200
		'spec' =
		    %% Line 1200
		    [{{'from_orddict',2},[{'type',1200,'fun',[{'type',1200,'product',[{'ann_type',1200,[{'var',1200,'Orddict'}|[{'type',1200,'indx_pairs',[{'ann_type',1200,[{'var',1200,'Value'}|[{'var',1200,'Type'}]]}]}]]}|[{'ann_type',1200,[{'var',1200,'Default'}|[{'var',1200,'Type'}]]}]]}|[{'type',1201,'array',[{'var',1201,'Type'}]}]]}]}],
		%% Line 1396
		'spec' =
		    %% Line 1396
		    [{{'map',2},[{'type',1396,'bounded_fun',[{'type',1396,'fun',[{'type',1396,'product',[{'var',1396,'Function'}|[{'ann_type',1396,[{'var',1396,'Array'}|[{'type',1396,'array',[{'var',1396,'Type1'}]}]]}]]}|[{'type',1396,'array',[{'var',1396,'Type2'}]}]]}|[[{'type',1397,'constraint',[{'atom',1397,'is_subtype'}|[[{'var',1397,'Function'}|[{'type',1397,'fun',[{'type',1397,'product',[{'ann_type',1397,[{'var',1397,'Index'}|[{'type',1397,'array_indx',[]}]]}|[{'var',1397,'Type1'}]]}|[{'var',1397,'Type2'}]]}]]]]}]]]}]}],
		%% Line 1435
		'spec' =
		    %% Line 1435
		    [{{'map_3',7},[{'type',1435,'fun',[{'type',1435,'product',[{'type',1435,'pos_integer',[]}|[{'var',1435,'_'}|[{'type',1435,'array_indx',[]}|[{'type',1436,'fun',[{'type',1436,'product',[{'type',1436,'array_indx',[]}|[{'var',1436,'_'}]]}|[{'var',1436,'_'}]]}|[{'var',1436,'_'}|[{'type',1436,'non_neg_integer',[]}|[{'type',1436,'list',[{'var',1436,'X'}]}]]]]]]]}|[{'type',1436,'list',[{'var',1436,'X'}]}]]}]}],
		%% Line 1488
		'spec' =
		    %% Line 1488
		    [{{'sparse_map',2},[{'type',1488,'bounded_fun',[{'type',1488,'fun',[{'type',1488,'product',[{'var',1488,'Function'}|[{'ann_type',1488,[{'var',1488,'Array'}|[{'type',1488,'array',[{'var',1488,'Type1'}]}]]}]]}|[{'type',1488,'array',[{'var',1488,'Type2'}]}]]}|[[{'type',1489,'constraint',[{'atom',1489,'is_subtype'}|[[{'var',1489,'Function'}|[{'type',1489,'fun',[{'type',1489,'product',[{'ann_type',1489,[{'var',1489,'Index'}|[{'type',1489,'array_indx',[]}]]}|[{'var',1489,'Type1'}]]}|[{'var',1489,'Type2'}]]}]]]]}]]]}]}],
		%% Line 1527
		'spec' =
		    %% Line 1527
		    [{{'sparse_map_3',6},[{'type',1527,'fun',[{'type',1527,'product',[{'type',1527,'pos_integer',[]}|[{'var',1527,'_'}|[{'type',1527,'array_indx',[]}|[{'type',1528,'fun',[{'type',1528,'product',[{'type',1528,'array_indx',[]}|[{'var',1528,'_'}]]}|[{'var',1528,'_'}]]}|[{'var',1528,'_'}|[{'type',1528,'list',[{'var',1528,'X'}]}]]]]]]}|[{'type',1528,'list',[{'var',1528,'X'}]}]]}]}],
		%% Line 1584
		'spec' =
		    %% Line 1584
		    [{{'foldl',3},[{'type',1584,'bounded_fun',[{'type',1584,'fun',[{'type',1584,'product',[{'var',1584,'Function'}|[{'ann_type',1584,[{'var',1584,'InitialAcc'}|[{'var',1584,'A'}]]}|[{'ann_type',1584,[{'var',1584,'Array'}|[{'type',1584,'array',[{'var',1584,'Type'}]}]]}]]]}|[{'var',1584,'B'}]]}|[[{'type',1585,'constraint',[{'atom',1585,'is_subtype'}|[[{'var',1585,'Function'}|[{'type',1585,'fun',[{'type',1585,'product',[{'ann_type',1585,[{'var',1585,'Index'}|[{'type',1585,'array_indx',[]}]]}|[{'ann_type',1585,[{'var',1585,'Value'}|[{'var',1585,'Type'}]]}|[{'ann_type',1585,[{'var',1585,'Acc'}|[{'var',1585,'A'}]]}]]]}|[{'var',1585,'B'}]]}]]]]}]]]}]}],
		%% Line 1610
		'spec' =
		    %% Line 1610
		    [{{'foldl_3',6},[{'type',1610,'fun',[{'type',1610,'product',[{'type',1610,'pos_integer',[]}|[{'var',1610,'_'}|[{'var',1610,'A'}|[{'type',1610,'array_indx',[]}|[{'type',1611,'fun',[{'type',1611,'product',[{'atom',1611,'array_indx'}|[{'var',1611,'_'}|[{'var',1611,'A'}]]]}|[{'var',1611,'B'}]]}|[{'type',1611,'integer',[]}]]]]]]}|[{'var',1611,'B'}]]}]}],
		%% Line 1657
		'spec' =
		    %% Line 1657
		    [{{'sparse_foldl',3},[{'type',1657,'bounded_fun',[{'type',1657,'fun',[{'type',1657,'product',[{'var',1657,'Function'}|[{'ann_type',1657,[{'var',1657,'InitialAcc'}|[{'var',1657,'A'}]]}|[{'ann_type',1657,[{'var',1657,'Array'}|[{'type',1657,'array',[{'var',1657,'Type'}]}]]}]]]}|[{'var',1657,'B'}]]}|[[{'type',1658,'constraint',[{'atom',1658,'is_subtype'}|[[{'var',1658,'Function'}|[{'type',1658,'fun',[{'type',1658,'product',[{'ann_type',1658,[{'var',1658,'Index'}|[{'type',1658,'array_indx',[]}]]}|[{'ann_type',1658,[{'var',1658,'Value'}|[{'var',1658,'Type'}]]}|[{'ann_type',1658,[{'var',1658,'Acc'}|[{'var',1658,'A'}]]}]]]}|[{'var',1658,'B'}]]}]]]]}]]]}]}],
		%% Line 1734
		'spec' =
		    %% Line 1734
		    [{{'foldr',3},[{'type',1734,'bounded_fun',[{'type',1734,'fun',[{'type',1734,'product',[{'var',1734,'Function'}|[{'ann_type',1734,[{'var',1734,'InitialAcc'}|[{'var',1734,'A'}]]}|[{'ann_type',1734,[{'var',1734,'Array'}|[{'type',1734,'array',[{'var',1734,'Type'}]}]]}]]]}|[{'var',1734,'B'}]]}|[[{'type',1735,'constraint',[{'atom',1735,'is_subtype'}|[[{'var',1735,'Function'}|[{'type',1735,'fun',[{'type',1735,'product',[{'ann_type',1735,[{'var',1735,'Index'}|[{'type',1735,'array_indx',[]}]]}|[{'ann_type',1735,[{'var',1735,'Value'}|[{'var',1735,'Type'}]]}|[{'ann_type',1735,[{'var',1735,'Acc'}|[{'var',1735,'A'}]]}]]]}|[{'var',1735,'B'}]]}]]]]}]]]}]}],
		%% Line 1765
		'spec' =
		    %% Line 1765
		    [{{'foldr_3',5},[{'type',1765,'fun',[{'type',1765,'product',[{'type',1765,'array_indx',[]}|[{'type',1765,'term',[]}|[{'type',1765,'integer',[]}|[{'var',1765,'A'}|[{'type',1766,'fun',[{'type',1766,'product',[{'type',1766,'array_indx',[]}|[{'var',1766,'_'}|[{'var',1766,'A'}]]]}|[{'var',1766,'B'}]]}]]]]]}|[{'var',1766,'B'}]]}]}],
		%% Line 1813
		'spec' =
		    %% Line 1813
		    [{{'sparse_foldr',3},[{'type',1813,'bounded_fun',[{'type',1813,'fun',[{'type',1813,'product',[{'var',1813,'Function'}|[{'ann_type',1813,[{'var',1813,'InitialAcc'}|[{'var',1813,'A'}]]}|[{'ann_type',1813,[{'var',1813,'Array'}|[{'type',1813,'array',[{'var',1813,'Type'}]}]]}]]]}|[{'var',1813,'B'}]]}|[[{'type',1814,'constraint',[{'atom',1814,'is_subtype'}|[[{'var',1814,'Function'}|[{'type',1814,'fun',[{'type',1814,'product',[{'ann_type',1814,[{'var',1814,'Index'}|[{'type',1814,'array_indx',[]}]]}|[{'ann_type',1814,[{'var',1814,'Value'}|[{'var',1814,'Type'}]]}|[{'ann_type',1814,[{'var',1814,'Acc'}|[{'var',1814,'A'}]]}]]]}|[{'var',1814,'B'}]]}]]]]}]]]}]}],
		%% Line 1845
		'spec' =
		    %% Line 1845
		    [{{'sparse_foldr_3',6},[{'type',1845,'fun',[{'type',1845,'product',[{'type',1845,'array_indx',[]}|[{'var',1845,'_'}|[{'type',1845,'array_indx',[]}|[{'var',1845,'A'}|[{'type',1846,'fun',[{'type',1846,'product',[{'type',1846,'array_indx',[]}|[{'var',1846,'_'}|[{'var',1846,'A'}]]]}|[{'var',1846,'B'}]]}|[{'var',1846,'_'}]]]]]]}|[{'var',1846,'B'}]]}]}],
		%% Line 1864
		'spec' =
		    %% Line 1864
		    [{{'sparse_size',1},[{'type',1864,'fun',[{'type',1864,'product',[{'ann_type',1864,[{'var',1864,'Array'}|[{'type',1864,'array',[]}]]}]}|[{'type',1864,'non_neg_integer',[]}]]}]}]]
'new'/0 =
    %% Line 197
    fun () ->
	%% Line 198
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 240
    fun (_cor0) ->
	%% Line 241
	apply 'new_0'/3
	    (_cor0, 0, 'false')
'new'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Size,Options>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor3> =
			call 'erlang':'>='
			    (Size, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 261
	      apply 'new_0'/3
		  (Options, Size, 'true')
	  %% Line 262
	  <_cor6,_cor7> when 'true' ->
	      %% Line 263
	      call 'erlang':'error'
		  ('badarg')
	end
'new_0'/3 =
    %% Line 265
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Options,Size,Fixed>
	      when call 'erlang':'is_list'
		    (Options) ->
	      %% Line 266
	      apply 'new_1'/4
		  (Options, Size, Fixed, 'undefined')
	  %% Line 267
	  <Options,Size,Fixed> when 'true' ->
	      %% Line 268
	      apply 'new_1'/4
		  ([Options|[]], Size, Fixed, 'undefined')
	end
'new_1'/4 =
    %% Line 270
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <['fixed'|Options],Size,_cor12,Default> when 'true' ->
	      %% Line 271
	      apply 'new_1'/4
		  (Options, Size, 'true', Default)
	  %% Line 272
	  <[{'fixed',Fixed}|Options],Size,_cor13,Default>
	      when %% Line 273
		call 'erlang':'is_boolean'
		    (Fixed) ->
	      %% Line 274
	      apply 'new_1'/4
		  (Options, Size, Fixed, Default)
	  %% Line 275
	  <[{'default',Default}|Options],Size,Fixed,_cor14> when 'true' ->
	      %% Line 276
	      apply 'new_1'/4
		  (Options, Size, Fixed, Default)
	  %% Line 277
	  <[{'size',Size}|Options],_cor15,_cor16,Default>
	      when let <_cor4> =
		    %% Line 278
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor5> =
			%% Line 278
			call 'erlang':'>='
			    (Size, 0)
		    in  %% Line 278
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 279
	      apply 'new_1'/4
		  (Options, Size, 'true', Default)
	  %% Line 280
	  <[Size|Options],_cor17,_cor18,Default>
	      when let <_cor6> =
		    %% Line 281
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor7> =
			%% Line 281
			call 'erlang':'>='
			    (Size, 0)
		    in  %% Line 281
			call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 282
	      apply 'new_1'/4
		  (Options, Size, 'true', Default)
	  %% Line 283
	  <[],Size,Fixed,Default> when 'true' ->
	      %% Line 284
	      apply 'new'/3
		  (Size, Fixed, Default)
	  %% Line 285
	  <_X_Options,_X_Size,_X_Fixed,_X_Default> when 'true' ->
	      %% Line 286
	      call 'erlang':'error'
		  ('badarg')
	end
'new'/3 =
    %% Line 288
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,'false','undefined'> when 'true' ->
	      %% Line 290
	      {'array',0,10,'undefined',10}
	  %% Line 291
	  <Size,Fixed,Default> when 'true' ->
	      let <_cor3> =
		  %% Line 292
		  call 'erlang':'-'
		      (Size, 1)
	      in  let <E> =
		      %% Line 292
		      apply 'find_max'/2
			  (_cor3, 10)
		  in  let <_cor5> =
			  %% Line 293
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (Fixed,
				       'true') ->
				0
			    %% Line 294
			    <> when 'true' ->
				E
			  end
		      in  %% Line 296
			  {'array',Size,_cor5,Default,E}
	end
'find_max'/2 =
    %% Line 300
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,M>
	      when call 'erlang':'>='
		    (I,
		     M) ->
	      let <_cor2> =
		  %% Line 301
		  call 'erlang':'*'
		      (M, 10)
	      in  %% Line 301
		  apply 'find_max'/2
		      (I, _cor2)
	  %% Line 302
	  <_X_I,M> when 'true' ->
	      %% Line 303
	      M
	end
'is_array'/1 =
    %% Line 313
    fun (_cor0) ->
	case _cor0 of
	  <{'array',Size,Max,_cor4,_cor5}>
	      when let <_cor1> =
		    %% Line 314
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor2> =
			%% Line 314
			call 'erlang':'is_integer'
			    (Max)
		    in  %% Line 314
			call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 315
	      'true'
	  %% Line 316
	  <_cor6> when 'true' ->
	      %% Line 317
	      'false'
	end
'size'/1 =
    %% Line 328
    fun (_cor0) ->
	case _cor0 of
	  <{'array',N,_cor2,_cor3,_cor4}> when 'true' ->
	      N
	  %% Line 329
	  <_cor5> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'default'/1 =
    %% Line 338
    fun (_cor0) ->
	case _cor0 of
	  <{'array',_cor2,_cor3,D,_cor4}> when 'true' ->
	      D
	  %% Line 339
	  <_cor5> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'fix'/1 =
    %% Line 421
    fun (_cor0) ->
	case _cor0 of
	  <A = {'array',_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 422
	      call 'erlang':'setelement'
		  (3, A, 0)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'fix',1}}] )
	    -| ['compiler_generated'] )
	end
'is_fix'/1 =
    %% Line 431
    fun (_cor0) ->
	case _cor0 of
	  <{'array',_cor2,0,_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 432
	  <{'array',_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_fix',1}}] )
	    -| ['compiler_generated'] )
	end
'relax'/1 =
    %% Line 469
    fun (_cor0) ->
	case _cor0 of
	  <A = {'array',N,_cor6,_cor7,_cor8}> when 'true' ->
	      let <_cor1> =
		  %% Line 470
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_rec1> =
		      %% Line 470
		      apply 'find_max'/2
			  (_cor1, 10)
		  in  %% Line 470
		      call 'erlang':'setelement'
			  (3, A, _rec1)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'relax',1}}] )
	    -| ['compiler_generated'] )
	end
'resize'/2 =
    %% Line 495
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Size,A = {'array',N,M,_cor16,E}>
	      when let <_cor2> =
		    %% Line 496
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor3> =
			%% Line 496
			call 'erlang':'>='
			    (Size, 0)
		    in  %% Line 496
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 497
	      case <> of
		<>
		    when call 'erlang':'>'
			  (Size,
			   N) ->
		    let <_cor6> =
			%% Line 498
			call 'erlang':'-'
			    (Size, 1)
		    in  let <_cor5> =
			    %% Line 499
			    case <> of
			      <>
				  when call 'erlang':'>'
					(M,
					 0) ->
				  M
			      %% Line 500
			      <> when 'true' ->
				  let <_cor4> =
				      call 'erlang':'-'
					  (N, 1)
				  in  apply 'find_max'/2
					  (_cor4, 10)
			    end
			in  %% Line 498
			    case apply 'grow'/3
				     (_cor6, E, _cor5) of
			      <{E1,M1}> when 'true' ->
				  let <_cor8> =
				      %% Line 503
				      case <> of
					<>
					    when call 'erlang':'>'
						  (M,
						   0) ->
					    M1
					%% Line 504
					<> when 'true' ->
					    M
				      end
				  in  %% Line 506
				      {'array',Size,_cor8,_cor16,E1}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		%% Line 507
		<>
		    when call 'erlang':'<'
			  (Size,
			   N) ->
		    %% Line 509
		    call 'erlang':'setelement'
			(2, A, Size)
		%% Line 510
		<> when 'true' ->
		    %% Line 511
		    A
	      end
	  %% Line 513
	  <_X_Size,_cor23> when 'true' ->
	      %% Line 514
	      call 'erlang':'error'
		  ('badarg')
	end
'resize'/1 =
    %% Line 526
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 527
	    apply 'sparse_size'/1
		(_cor0)
	in  %% Line 527
	    apply 'resize'/2
		(_cor1, _cor0)
'set'/3 =
    %% Line 576
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,Value,A = {'array',N,M,D,E}>
	      when let <_cor3> =
		    %% Line 577
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor4> =
			%% Line 577
			call 'erlang':'>='
			    (I, 0)
		    in  %% Line 577
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 578
	      case <> of
		<>
		    when call 'erlang':'<'
			  (I,
			   N) ->
		    let <_rec10> =
			%% Line 579
			apply 'set_1'/4
			    (I, E, Value, D)
		    in  %% Line 579
			call 'erlang':'setelement'
			    (5, A, _rec10)
		%% Line 580
		<>
		    when call 'erlang':'<'
			  (I,
			   M) ->
		    let <_rec12> =
			%% Line 582
			call 'erlang':'+'
			    (I, 1)
		    in  let <_rec13> =
			    %% Line 582
			    apply 'set_1'/4
				(I, E, Value, D)
			in  let <_cor11> =
				%% Line 582
				call 'erlang':'setelement'
				    (5, A, _rec13)
			    in  %% Line 582
				call 'erlang':'setelement'
				    (2, _cor11, _rec12)
		%% Line 583
		<>
		    when call 'erlang':'>'
			  (M,
			   0) ->
		    %% Line 584
		    case apply 'grow'/3
			     (I, E, M) of
		      <{E1,M1}> when 'true' ->
			  let <_rec15> =
			      %% Line 585
			      call 'erlang':'+'
				  (I, 1)
			  in  let <_rec16> =
				  %% Line 586
				  apply 'set_1'/4
				      (I, E1, Value, D)
			      in  %% Line 586
				  {'array',_rec15,M1,D,_rec16}
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
		%% Line 587
		<> when 'true' ->
		    %% Line 588
		    call 'erlang':'error'
			('badarg')
	      end
	  %% Line 590
	  <_X_I,_X_V,_X_A> when 'true' ->
	      %% Line 591
	      call 'erlang':'error'
		  ('badarg')
	end
'set_1'/4 =
    %% Line 595
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,E = {_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,S},X,D> when 'true' ->
	      let <_cor4> =
		  %% Line 596
		  call 'erlang':'div'
		      (I, S)
	      in  let <I1> =
		      %% Line 596
		      call 'erlang':'+'
			  (_cor4, 1)
		  in  let <_cor7> =
			  %% Line 597
			  call 'erlang':'rem'
			      (I, S)
		      in  let <_cor6> =
			      %% Line 597
			      call 'erlang':'element'
				  (I1, E)
			  in  let <_cor8> =
				  %% Line 597
				  apply 'set_1'/4
				      (_cor7, _cor6, X, D)
			      in  %% Line 597
				  call 'erlang':'setelement'
				      (I1, E, _cor8)
	  %% Line 598
	  <I,E,X,D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 599
	      apply 'expand'/4
		  (I, E, X, D)
	  %% Line 600
	  <I,E,X,_X_D> when 'true' ->
	      let <_cor9> =
		  %% Line 601
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 601
		  call 'erlang':'setelement'
		      (_cor9, E, X)
	end
'grow'/3 =
    %% Line 606
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,E,_X_M>
	      when call 'erlang':'is_integer'
		    (E) ->
	      let <M1> =
		  %% Line 607
		  apply 'find_max'/2
		      (I, E)
	      in  %% Line 608
		  {M1,M1}
	  %% Line 609
	  <I,E,M> when 'true' ->
	      %% Line 610
	      apply 'grow_1'/3
		  (I, E, M)
	end
'grow_1'/3 =
    %% Line 612
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,E,M>
	      when call 'erlang':'>='
		    (I,
		     M) ->
	      let <_cor5> =
		  %% Line 613
		  call 'erlang':'make_tuple'
		      (11, M)
	      in  let <_cor7> =
		      %% Line 613
		      call 'erlang':'setelement'
			  (11, _cor5, M)
		  in  let <_cor8> =
			  %% Line 613
			  call 'erlang':'setelement'
			      (1, _cor7, E)
		      in  let <_cor3> =
			      %% Line 613
			      call 'erlang':'*'
				  (M, 10)
			  in  %% Line 613
			      apply 'grow'/3
				  (I, _cor8, _cor3)
	  %% Line 614
	  <_X_I,E,M> when 'true' ->
	      %% Line 615
	      {E,M}
	end
'expand'/4 =
    %% Line 620
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,S,X,D>
	      when call 'erlang':'>'
		    (S,
		     10) ->
	      let <S1> =
		  %% Line 621
		  call 'erlang':'div'
		      (S, 10)
	      in  let <_cor11> =
		      %% Line 622
		      call 'erlang':'div'
			  (I, S1)
		  in  let <_cor12> =
			  %% Line 622
			  call 'erlang':'+'
			      (_cor11, 1)
		      in  let <_cor8> =
			      %% Line 622
			      call 'erlang':'make_tuple'
				  (11, S1)
			  in  let <_cor10> =
				  %% Line 622
				  call 'erlang':'setelement'
				      (11, _cor8, S1)
			      in  let <_cor5> =
				      %% Line 623
				      call 'erlang':'rem'
					  (I, S1)
				  in  let <_cor6> =
					  %% Line 623
					  apply 'expand'/4
					      (_cor5, S1, X, D)
				      in  %% Line 622
					  call 'erlang':'setelement'
					      (_cor12, _cor10, _cor6)
	  %% Line 624
	  <I,_X_S,X,D> when 'true' ->
	      let <_cor14> =
		  %% Line 625
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor13> =
		      %% Line 625
		      call 'erlang':'make_tuple'
			  (10, D)
		  in  %% Line 625
		      call 'erlang':'setelement'
			  (_cor14, _cor13, X)
	end
'get'/2 =
    %% Line 639
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,{'array',N,M,D,E}>
	      when let <_cor2> =
		    %% Line 640
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor3> =
			%% Line 640
			call 'erlang':'>='
			    (I, 0)
		    in  %% Line 640
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 641
	      case <> of
		<>
		    when call 'erlang':'<'
			  (I,
			   N) ->
		    %% Line 642
		    apply 'get_1'/3
			(I, E, D)
		%% Line 643
		<>
		    when call 'erlang':'>'
			  (M,
			   0) ->
		    %% Line 644
		    D
		%% Line 645
		<> when 'true' ->
		    %% Line 646
		    call 'erlang':'error'
			('badarg')
	      end
	  %% Line 648
	  <_X_I,_X_A> when 'true' ->
	      %% Line 649
	      call 'erlang':'error'
		  ('badarg')
	end
'get_1'/3 =
    %% Line 655
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,E = {_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,S},D> when 'true' ->
	      let <_cor6> =
		  %% Line 656
		  call 'erlang':'rem'
		      (I, S)
	      in  let <_cor3> =
		      %% Line 656
		      call 'erlang':'div'
			  (I, S)
		  in  let <_cor4> =
			  %% Line 656
			  call 'erlang':'+'
			      (_cor3, 1)
		      in  let <_cor5> =
			      %% Line 656
			      call 'erlang':'element'
				  (_cor4, E)
			  in  %% Line 656
			      apply 'get_1'/3
				  (_cor6, _cor5, D)
	  %% Line 657
	  <_X_I,E,D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 658
	      D
	  %% Line 659
	  <I,E,_X_D> when 'true' ->
	      let <_cor7> =
		  %% Line 660
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 660
		  call 'erlang':'element'
		      (_cor7, E)
	end
'reset'/2 =
    %% Line 679
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,A = {'array',N,M,D,E}>
	      when let <_cor2> =
		    %% Line 680
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor3> =
			%% Line 680
			call 'erlang':'>='
			    (I, 0)
		    in  %% Line 680
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 681
	      case <> of
		<>
		    when call 'erlang':'<'
			  (I,
			   N) ->
		    %% Line 682
		    try
			let <_rec22> =
			    apply 'reset_1'/3
				(I, E, D)
			in  call 'erlang':'setelement'
				(5, A, _rec22)
		    of <_cor7> ->
			_cor7
		    catch <_cor10,_cor9,_cor8> ->
			case <_cor10,_cor9,_cor8> of
			  %% Line 683
			  <'throw','default',_cor18> when 'true' ->
			      A
			  ( <_cor10,_cor9,_cor8> when 'true' ->
				primop 'raise'
				    (_cor8, _cor9)
			    -| ['compiler_generated'] )
			end
		%% Line 685
		<>
		    when call 'erlang':'>'
			  (M,
			   0) ->
		    %% Line 686
		    A
		%% Line 687
		<> when 'true' ->
		    %% Line 688
		    call 'erlang':'error'
			('badarg')
	      end
	  %% Line 690
	  <_X_I,_X_A> when 'true' ->
	      %% Line 691
	      call 'erlang':'error'
		  ('badarg')
	end
'reset_1'/3 =
    %% Line 693
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,E = {_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,S},D> when 'true' ->
	      let <_cor3> =
		  %% Line 694
		  call 'erlang':'div'
		      (I, S)
	      in  let <I1> =
		      %% Line 694
		      call 'erlang':'+'
			  (_cor3, 1)
		  in  let <_cor6> =
			  %% Line 695
			  call 'erlang':'rem'
			      (I, S)
		      in  let <_cor5> =
			      %% Line 695
			      call 'erlang':'element'
				  (I1, E)
			  in  let <_cor7> =
				  %% Line 695
				  apply 'reset_1'/3
				      (_cor6, _cor5, D)
			      in  %% Line 695
				  call 'erlang':'setelement'
				      (I1, E, _cor7)
	  %% Line 696
	  <_X_I,E,_X_D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 697
	      call 'erlang':'throw'
		  ('default')
	  %% Line 698
	  <I,E,D> when 'true' ->
	      let <Indx> =
		  %% Line 699
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 700
		  case call 'erlang':'element'
			   (Indx, E) of
		    %% Line 701
		    <_cor24>
			when call 'erlang':'=:='
			      (_cor24,
			       D) ->
			call 'erlang':'throw'
			    ('default')
		    %% Line 702
		    <_cor25> when 'true' ->
			let <_cor9> =
			    call 'erlang':'+'
				(I, 1)
			in  call 'erlang':'setelement'
				(_cor9, E, D)
		  end
	end
'to_list'/1 =
    %% Line 765
    fun (_cor0) ->
	case _cor0 of
	  <{'array',0,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 766
	      []
	  %% Line 767
	  <{'array',N,_cor6,D,E}> when 'true' ->
	      let <_cor1> =
		  %% Line 768
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 768
		  apply 'to_list_1'/3
		      (E, D, _cor1)
	  %% Line 769
	  <_cor7> when 'true' ->
	      %% Line 770
	      call 'erlang':'error'
		  ('badarg')
	end
'to_list_1'/3 =
    %% Line 774
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E = {_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,S},D,I> when 'true' ->
	      let <N> =
		  %% Line 775
		  call 'erlang':'div'
		      (I, S)
	      in  let <_cor5> =
		      %% Line 776
		      call 'erlang':'+'
			  (N, 1)
		  in  let <_cor6> =
			  %% Line 776
			  call 'erlang':'element'
			      (_cor5, E)
		      in  let <_cor4> =
			      %% Line 776
			      call 'erlang':'rem'
				  (I, S)
			  in  let <_cor7> =
				  %% Line 776
				  apply 'to_list_1'/3
				      (_cor6, D, _cor4)
			      in  %% Line 776
				  apply 'to_list_3'/4
				      (N, D, _cor7, E)
	  %% Line 777
	  <E,D,I>
	      when call 'erlang':'is_integer'
		    (E) ->
	      let <_cor8> =
		  %% Line 778
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 778
		  apply 'push'/3
		      (_cor8, D, [])
	  %% Line 779
	  <E,_X_D,I> when 'true' ->
	      let <_cor9> =
		  %% Line 780
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 780
		  apply 'push_tuple'/3
		      (_cor9, E, [])
	end
'to_list_2'/3 =
    %% Line 784
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E = {_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_X_S},D,L> when 'true' ->
	      %% Line 785
	      apply 'to_list_3'/4
		  (10, D, L, E)
	  %% Line 786
	  <E,D,L>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 787
	      apply 'push'/3
		  (E, D, L)
	  %% Line 788
	  <E,_X_D,L> when 'true' ->
	      %% Line 789
	      apply 'push_tuple'/3
		  (10, E, L)
	end
'to_list_3'/4 =
    %% Line 791
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_D,L,_X_E> when 'true' ->
	      %% Line 792
	      L
	  %% Line 793
	  <N,D,L,E> when 'true' ->
	      let <_cor6> =
		  %% Line 794
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor4> =
		      %% Line 794
		      call 'erlang':'element'
			  (N, E)
		  in  let <_cor5> =
			  %% Line 794
			  apply 'to_list_2'/3
			      (_cor4, D, L)
		      in  %% Line 794
			  apply 'to_list_3'/4
			      (_cor6, D, _cor5, E)
	end
'push'/3 =
    %% Line 796
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_X_E,L> when 'true' ->
	      %% Line 797
	      L
	  %% Line 798
	  <N,E,L> when 'true' ->
	      let <_cor3> =
		  %% Line 799
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 799
		  apply 'push'/3
		      (_cor3, E, [E|L])
	end
'push_tuple'/3 =
    %% Line 801
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_X_T,L> when 'true' ->
	      %% Line 802
	      L
	  %% Line 803
	  <N,T,L> when 'true' ->
	      let <_cor4> =
		  %% Line 804
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 804
		      call 'erlang':'element'
			  (N, T)
		  in  %% Line 804
		      apply 'push_tuple'/3
			  (_cor4, T, [_cor3|L])
	end
'sparse_to_list'/1 =
    %% Line 838
    fun (_cor0) ->
	case _cor0 of
	  <{'array',0,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 839
	      []
	  %% Line 840
	  <{'array',N,_cor6,D,E}> when 'true' ->
	      let <_cor1> =
		  %% Line 841
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 841
		  apply 'sparse_to_list_1'/3
		      (E, D, _cor1)
	  %% Line 842
	  <_cor7> when 'true' ->
	      %% Line 843
	      call 'erlang':'error'
		  ('badarg')
	end
'sparse_to_list_1'/3 =
    %% Line 847
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E = {_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,S},D,I> when 'true' ->
	      let <N> =
		  %% Line 848
		  call 'erlang':'div'
		      (I, S)
	      in  let <_cor5> =
		      %% Line 850
		      call 'erlang':'+'
			  (N, 1)
		  in  let <_cor6> =
			  %% Line 850
			  call 'erlang':'element'
			      (_cor5, E)
		      in  let <_cor4> =
			      %% Line 850
			      call 'erlang':'rem'
				  (I, S)
			  in  let <_cor7> =
				  %% Line 850
				  apply 'sparse_to_list_1'/3
				      (_cor6, D, _cor4)
			      in  %% Line 849
				  apply 'sparse_to_list_3'/4
				      (N, D, _cor7, %% Line 851
						    E)
	  %% Line 852
	  <E,_X_D,_X_I>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 853
	      []
	  %% Line 854
	  <E,D,I> when 'true' ->
	      let <_cor8> =
		  %% Line 855
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 855
		  apply 'sparse_push_tuple'/4
		      (_cor8, D, E, [])
	end
'sparse_to_list_2'/3 =
    %% Line 857
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E = {_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_X_S},D,L> when 'true' ->
	      %% Line 858
	      apply 'sparse_to_list_3'/4
		  (10, D, L, E)
	  %% Line 859
	  <E,_X_D,L>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 860
	      L
	  %% Line 861
	  <E,D,L> when 'true' ->
	      %% Line 862
	      apply 'sparse_push_tuple'/4
		  (10, D, E, L)
	end
'sparse_to_list_3'/4 =
    %% Line 864
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_D,L,_X_E> when 'true' ->
	      %% Line 865
	      L
	  %% Line 866
	  <N,D,L,E> when 'true' ->
	      let <_cor6> =
		  %% Line 867
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor4> =
		      %% Line 867
		      call 'erlang':'element'
			  (N, E)
		  in  let <_cor5> =
			  %% Line 867
			  apply 'sparse_to_list_2'/3
			      (_cor4, D, L)
		      in  %% Line 867
			  apply 'sparse_to_list_3'/4
			      (_cor6, D, _cor5, E)
	end
'sparse_push_tuple'/4 =
    %% Line 869
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_D,_X_T,L> when 'true' ->
	      %% Line 870
	      L
	  %% Line 871
	  <N,D,T,L> when 'true' ->
	      %% Line 872
	      case call 'erlang':'element'
		       (N, T) of
		%% Line 873
		<_cor11>
		    when call 'erlang':'=:='
			  (_cor11,
			   D) ->
		    let <_cor4> =
			call 'erlang':'-'
			    (N, 1)
		    in  apply 'sparse_push_tuple'/4
			    (_cor4, D, T, L)
		%% Line 874
		<E> when 'true' ->
		    let <_cor5> =
			call 'erlang':'-'
			    (N, 1)
		    in  apply 'sparse_push_tuple'/4
			    (_cor5, D, T, [E|L])
	      end
	end
'from_list'/1 =
    %% Line 905
    fun (_cor0) ->
	%% Line 906
	apply 'from_list'/2
	    (_cor0, 'undefined')
'from_list'/2 =
    %% Line 917
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Default> when 'true' ->
	      %% Line 918
	      apply 'new'/1
		  ({'default',Default})
	  %% Line 919
	  <List,Default>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 920
	      case apply 'from_list_1'/6
		       (10, List, Default, 0, [], []) of
		<{E,N,M}> when 'true' ->
		    %% Line 921
		    {'array',N,M,Default,E}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 922
	  <_cor5,_cor6> when 'true' ->
	      %% Line 923
	      call 'erlang':'error'
		  ('badarg')
	end
'from_list_1'/6 =
    %% Line 932
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,Xs,D,N,As,Es> when 'true' ->
	      let <_cor6> =
		  %% Line 933
		  call 'lists':'reverse'
		      (As)
	      in  let <E> =
		      %% Line 933
		      call 'erlang':'list_to_tuple'
			  (_cor6)
		  in  %% Line 934
		      case Xs of
			%% Line 935
			<[]> when 'true' ->
			    %% Line 936
			    case Es of
			      %% Line 937
			      <[]> when 'true' ->
				  %% Line 938
				  {E,N,10}
			      %% Line 939
			      <_cor20> when 'true' ->
				  %% Line 940
				  apply 'from_list_2_0'/3
				      (N, [E|Es], 10)
			    end
			%% Line 942
			<[_cor21|_cor22]> when 'true' ->
			    %% Line 943
			    apply 'from_list_1'/6
				(10, Xs, D, N, [], [E|Es])
			%% Line 944
			<_cor23> when 'true' ->
			    %% Line 945
			    call 'erlang':'error'
				('badarg')
		      end
	  %% Line 947
	  <I,Xs,D,N,As,Es> when 'true' ->
	      %% Line 948
	      case Xs of
		%% Line 949
		<[X|Xs1]> when 'true' ->
		    let <_cor11> =
			%% Line 950
			call 'erlang':'-'
			    (I, 1)
		    in  let <_cor10> =
			    %% Line 950
			    call 'erlang':'+'
				(N, 1)
			in  %% Line 950
			    apply 'from_list_1'/6
				(_cor11, Xs1, D, _cor10, [X|As], Es)
		%% Line 951
		<_cor24> when 'true' ->
		    let <_cor12> =
			%% Line 952
			call 'erlang':'-'
			    (I, 1)
		    in  %% Line 952
			apply 'from_list_1'/6
			    (_cor12, Xs, D, N, [D|As], Es)
	      end
	end
'from_list_2_0'/3 =
    %% Line 956
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 957
	    call 'erlang':'-'
		(_cor2, 1)
	in  let <_cor4> =
		%% Line 957
		call 'erlang':'div'
		    (_cor3, _cor0)
	    in  let <_cor5> =
		    %% Line 957
		    call 'erlang':'+'
			(_cor4, 1)
		in  let <_cor6> =
			%% Line 957
			apply 'pad'/4
			    (_cor5, 10, _cor0, _cor1)
		    in  %% Line 957
			apply 'from_list_2'/6
			    (10, _cor6, _cor0, _cor2, %% Line 958
						      [_cor0|[]], %% Line 958
								  [])
'from_list_2'/6 =
    %% Line 960
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,Xs,S,N,As,Es> when 'true' ->
	      let <E> =
		  %% Line 961
		  call 'erlang':'list_to_tuple'
		      (As)
	      in  %% Line 962
		  case Xs of
		    %% Line 963
		    <[]> when 'true' ->
			%% Line 964
			case Es of
			  %% Line 965
			  <[]> when 'true' ->
			      let <_cor7> =
				  %% Line 966
				  call 'erlang':'*'
				      (S, 10)
			      in  %% Line 966
				  {E,N,_cor7}
			  %% Line 967
			  <_cor19> when 'true' ->
			      let <_cor9> =
				  %% Line 968
				  call 'lists':'reverse'
				      ([E|Es])
			      in  let <_cor8> =
				      %% Line 969
				      call 'erlang':'*'
					  (S, 10)
				  in  %% Line 968
				      apply 'from_list_2_0'/3
					  (N, _cor9, _cor8)
			end
		    %% Line 971
		    <_cor20> when 'true' ->
			%% Line 972
			apply 'from_list_2'/6
			    (10, Xs, S, N, [S|[]], [E|Es])
		  end
	  %% Line 974
	  <I,[X|Xs],S,N,As,Es> when 'true' ->
	      let <_cor12> =
		  %% Line 975
		  call 'erlang':'-'
		      (I, 1)
	      in  %% Line 975
		  apply 'from_list_2'/6
		      (_cor12, Xs, S, N, [X|As], Es)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'from_list_2',6}}] )
	    -| ['compiler_generated'] )
	end
'pad'/4 =
    %% Line 980
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 981
	    call 'erlang':'rem'
		(_cor3, _cor2)
	in  let <_cor5> =
		%% Line 981
		call 'erlang':'-'
		    (_cor2, _cor4)
	    in  let <_cor6> =
		    %% Line 981
		    call 'erlang':'rem'
			(_cor5, _cor2)
		in  %% Line 981
		    apply 'push'/3
			(_cor6, _cor1, _cor0)
'to_orddict'/1 =
    %% Line 1016
    fun (_cor0) ->
	case _cor0 of
	  <{'array',0,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 1017
	      []
	  %% Line 1018
	  <{'array',N,_cor6,D,E}> when 'true' ->
	      let <I> =
		  %% Line 1019
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1020
		  apply 'to_orddict_1'/4
		      (E, I, D, I)
	  %% Line 1021
	  <_cor7> when 'true' ->
	      %% Line 1022
	      call 'erlang':'error'
		  ('badarg')
	end
'to_orddict_1'/4 =
    %% Line 1026
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <E = {_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,S},R,D,I> when 'true' ->
	      let <N> =
		  %% Line 1027
		  call 'erlang':'div'
		      (I, S)
	      in  let <I1> =
		      %% Line 1028
		      call 'erlang':'rem'
			  (I, S)
		  in  let <_cor9> =
			  %% Line 1029
			  call 'erlang':'-'
			      (R, I1)
		      in  let <_cor10> =
			      %% Line 1029
			      call 'erlang':'-'
				  (_cor9, 1)
			  in  let <_cor6> =
				  %% Line 1030
				  call 'erlang':'+'
				      (N, 1)
			      in  let <_cor7> =
				      %% Line 1030
				      call 'erlang':'element'
					  (_cor6, E)
				  in  let <_cor8> =
					  %% Line 1030
					  apply 'to_orddict_1'/4
					      (_cor7, R, D, I1)
				      in  %% Line 1029
					  apply 'to_orddict_3'/6
					      (N, _cor10, D, _cor8, %% Line 1031
								    E, %% Line 1031
								       S)
	  %% Line 1032
	  <E,R,D,I>
	      when call 'erlang':'is_integer'
		    (E) ->
	      let <_cor11> =
		  %% Line 1033
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 1033
		  apply 'push_pairs'/4
		      (_cor11, R, D, [])
	  %% Line 1034
	  <E,R,_X_D,I> when 'true' ->
	      let <_cor12> =
		  %% Line 1035
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 1035
		  apply 'push_tuple_pairs'/4
		      (_cor12, R, E, [])
	end
'to_orddict_2'/4 =
    %% Line 1037
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <E = {_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,S},R,D,L> when 'true' ->
	      %% Line 1038
	      apply 'to_orddict_3'/6
		  (10, R, D, L, E, S)
	  %% Line 1039
	  <E,R,D,L>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 1040
	      apply 'push_pairs'/4
		  (E, R, D, L)
	  %% Line 1041
	  <E,R,_X_D,L> when 'true' ->
	      %% Line 1042
	      apply 'push_tuple_pairs'/4
		  (10, R, E, L)
	end
'to_orddict_3'/6 =
    %% Line 1044
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_R,_X_D,L,_X_E,_X_S> when 'true' ->
	      %% Line 1045
	      L
	  %% Line 1046
	  <N,R,D,L,E,S> when 'true' ->
	      let <_cor9> =
		  %% Line 1047
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor8> =
		      %% Line 1047
		      call 'erlang':'-'
			  (R, S)
		  in  let <_cor6> =
			  %% Line 1048
			  call 'erlang':'element'
			      (N, E)
		      in  let <_cor7> =
			      %% Line 1048
			      apply 'to_orddict_2'/4
				  (_cor6, R, D, L)
			  in  %% Line 1047
			      apply 'to_orddict_3'/6
				  (_cor9, _cor8, D, _cor7, %% Line 1049
							   E, %% Line 1049
							      S)
	end
'push_pairs'/4 =
    %% Line 1054
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_I,_X_E,L> when 'true' ->
	      %% Line 1055
	      L
	  %% Line 1056
	  <N,I,E,L> when 'true' ->
	      let <_cor5> =
		  %% Line 1057
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor4> =
		      %% Line 1057
		      call 'erlang':'-'
			  (I, 1)
		  in  %% Line 1057
		      apply 'push_pairs'/4
			  (_cor5, _cor4, E, [{I,E}|L])
	end
'push_tuple_pairs'/4 =
    %% Line 1062
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_I,_X_T,L> when 'true' ->
	      %% Line 1063
	      L
	  %% Line 1064
	  <N,I,T,L> when 'true' ->
	      let <_cor6> =
		  %% Line 1065
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor5> =
		      %% Line 1065
		      call 'erlang':'-'
			  (I, 1)
		  in  let <_cor4> =
			  %% Line 1065
			  call 'erlang':'element'
			      (N, T)
		      in  %% Line 1065
			  apply 'push_tuple_pairs'/4
			      (_cor6, _cor5, T, [{I,_cor4}|L])
	end
'sparse_to_orddict'/1 =
    %% Line 1108
    fun (_cor0) ->
	case _cor0 of
	  <{'array',0,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 1109
	      []
	  %% Line 1110
	  <{'array',N,_cor6,D,E}> when 'true' ->
	      let <I> =
		  %% Line 1111
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1112
		  apply 'sparse_to_orddict_1'/4
		      (E, I, D, I)
	  %% Line 1113
	  <_cor7> when 'true' ->
	      %% Line 1114
	      call 'erlang':'error'
		  ('badarg')
	end
'sparse_to_orddict_1'/4 =
    %% Line 1118
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <E = {_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,S},R,D,I> when 'true' ->
	      let <N> =
		  %% Line 1119
		  call 'erlang':'div'
		      (I, S)
	      in  let <I1> =
		      %% Line 1120
		      call 'erlang':'rem'
			  (I, S)
		  in  let <_cor9> =
			  %% Line 1121
			  call 'erlang':'-'
			      (R, I1)
		      in  let <_cor10> =
			      %% Line 1121
			      call 'erlang':'-'
				  (_cor9, 1)
			  in  let <_cor6> =
				  %% Line 1122
				  call 'erlang':'+'
				      (N, 1)
			      in  let <_cor7> =
				      %% Line 1122
				      call 'erlang':'element'
					  (_cor6, E)
				  in  let <_cor8> =
					  %% Line 1122
					  apply 'sparse_to_orddict_1'/4
					      (_cor7, R, D, I1)
				      in  %% Line 1121
					  apply 'sparse_to_orddict_3'/6
					      (N, _cor10, D, _cor8, %% Line 1123
								    E, %% Line 1123
								       S)
	  %% Line 1124
	  <E,_X_R,_X_D,_X_I>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 1125
	      []
	  %% Line 1126
	  <E,R,D,I> when 'true' ->
	      let <_cor11> =
		  %% Line 1127
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 1127
		  apply 'sparse_push_tuple_pairs'/5
		      (_cor11, R, D, E, [])
	end
'sparse_to_orddict_2'/4 =
    %% Line 1129
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <E = {_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,S},R,D,L> when 'true' ->
	      %% Line 1130
	      apply 'sparse_to_orddict_3'/6
		  (10, R, D, L, E, S)
	  %% Line 1131
	  <E,_X_R,_X_D,L>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 1132
	      L
	  %% Line 1133
	  <E,R,D,L> when 'true' ->
	      %% Line 1134
	      apply 'sparse_push_tuple_pairs'/5
		  (10, R, D, E, L)
	end
'sparse_to_orddict_3'/6 =
    %% Line 1136
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_R,_X_D,L,_X_E,_X_S> when 'true' ->
	      %% Line 1137
	      L
	  %% Line 1138
	  <N,R,D,L,E,S> when 'true' ->
	      let <_cor9> =
		  %% Line 1139
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor8> =
		      %% Line 1139
		      call 'erlang':'-'
			  (R, S)
		  in  let <_cor6> =
			  %% Line 1140
			  call 'erlang':'element'
			      (N, E)
		      in  let <_cor7> =
			      %% Line 1140
			      apply 'sparse_to_orddict_2'/4
				  (_cor6, R, D, L)
			  in  %% Line 1139
			      apply 'sparse_to_orddict_3'/6
				  (_cor9, _cor8, D, _cor7, %% Line 1141
							   E, %% Line 1141
							      S)
	end
'sparse_push_tuple_pairs'/5 =
    %% Line 1146
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_I,_X_D,_X_T,L> when 'true' ->
	      %% Line 1147
	      L
	  %% Line 1148
	  <N,I,D,T,L> when 'true' ->
	      %% Line 1149
	      case call 'erlang':'element'
		       (N, T) of
		%% Line 1150
		<_cor15>
		    when call 'erlang':'=:='
			  (_cor15,
			   D) ->
		    let <_cor6> =
			call 'erlang':'-'
			    (N, 1)
		    in  let <_cor5> =
			    call 'erlang':'-'
				(I, 1)
			in  apply 'sparse_push_tuple_pairs'/5
				(_cor6, _cor5, D, T, L)
		%% Line 1151
		<E> when 'true' ->
		    let <_cor8> =
			call 'erlang':'-'
			    (N, 1)
		    in  let <_cor7> =
			    call 'erlang':'-'
				(I, 1)
			in  apply 'sparse_push_tuple_pairs'/5
				(_cor8, _cor7, D, T, [{I,E}|L])
	      end
	end
'from_orddict'/1 =
    %% Line 1188
    fun (_cor0) ->
	%% Line 1189
	apply 'from_orddict'/2
	    (_cor0, 'undefined')
'from_orddict'/2 =
    %% Line 1203
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Default> when 'true' ->
	      %% Line 1204
	      apply 'new'/1
		  ({'default',Default})
	  %% Line 1205
	  <List,Default>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 1206
	      case apply 'from_orddict_0'/5
		       (List, 0, 10, Default, []) of
		<{E,N,M}> when 'true' ->
		    %% Line 1207
		    {'array',N,M,Default,E}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1208
	  <_cor5,_cor6> when 'true' ->
	      %% Line 1209
	      call 'erlang':'error'
		  ('badarg')
	end
'from_orddict_0'/5 =
    %% Line 1220
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],N,_X_Max,_X_D,Es> when 'true' ->
	      %% Line 1222
	      case Es of
		%% Line 1223
		<[E|[]]> when 'true' ->
		    %% Line 1224
		    {E,N,10}
		%% Line 1225
		<_cor20> when 'true' ->
		    %% Line 1226
		    apply 'collect_leafs'/3
			(N, Es, 10)
	      end
	  %% Line 1229
	  <Xs = [{Ix1,_cor21}|_cor22],Ix,Max0,D,Es0>
	      when let <_cor6> =
		    %% Line 1230
		    call 'erlang':'>'
			(Ix1, Max0)
		in  let <_cor7> =
			%% Line 1230
			call 'erlang':'is_integer'
			    (Ix1)
		    in  %% Line 1230
			call 'erlang':'and'
			    (_cor6, _cor7) ->
	      let <Hole> =
		  %% Line 1232
		  call 'erlang':'-'
		      (Ix1, Ix)
	      in  let <_cor9> =
		      %% Line 1233
		      call 'erlang':'rem'
			  (Hole, 10)
		  in  let <Step> =
			  %% Line 1233
			  call 'erlang':'-'
			      (Hole, _cor9)
		      in  let <Next> =
			      %% Line 1234
			      call 'erlang':'+'
				  (Ix, Step)
			  in  let <_cor12> =
				  %% Line 1235
				  call 'erlang':'+'
				      (Next, 10)
			      in  %% Line 1235
				  apply 'from_orddict_0'/5
				      (Xs, Next, _cor12, D, [Step|Es0])
	  %% Line 1236
	  <Xs0 = [{_cor23,_cor24}|_cor25],Ix0,Max,D,Es> when 'true' ->
	      %% Line 1238
	      case apply 'from_orddict_1'/6
		       (Ix0, Max, Xs0, Ix0, D, []) of
		<{Xs,E,Ix}> when 'true' ->
		    let <_cor14> =
			%% Line 1239
			call 'erlang':'+'
			    (Ix, 10)
		    in  %% Line 1239
			apply 'from_orddict_0'/5
			    (Xs, Ix, _cor14, D, [E|Es])
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1240
	  <Xs,_cor26,_cor27,_cor28,_cor29> when 'true' ->
	      %% Line 1241
	      call 'erlang':'error'
		  ({'badarg',Xs})
	end
'from_orddict_1'/6 =
    %% Line 1243
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ix,_cor20,Xs,N,_X_D,As>
	      when call 'erlang':'=:='
		    (_cor20,
		     Ix) ->
	      let <_cor6> =
		  %% Line 1245
		  call 'lists':'reverse'
		      (As)
	      in  let <E> =
		      %% Line 1245
		      call 'erlang':'list_to_tuple'
			  (_cor6)
		  in  %% Line 1246
		      {Xs,E,N}
	  %% Line 1247
	  <Ix,Max,Xs,N0,D,As> when 'true' ->
	      %% Line 1248
	      case Xs of
		%% Line 1249
		<[{_cor21,Val}|Xs1]>
		    when call 'erlang':'=:='
			  (_cor21,
			   Ix) ->
		    let <N> =
			%% Line 1250
			call 'erlang':'+'
			    (Ix, 1)
		    in  %% Line 1251
			apply 'from_orddict_1'/6
			    (N, Max, Xs1, N, D, [Val|As])
		%% Line 1252
		<[{Ix1,_cor22}|_cor23]>
		    when let <_cor9> =
			  call 'erlang':'is_integer'
			      (Ix1)
		      in  let <_cor10> =
			      call 'erlang':'>'
				  (Ix1, Ix)
			  in  call 'erlang':'and'
				  (_cor9, _cor10) ->
		    let <N> =
			%% Line 1253
			call 'erlang':'+'
			    (Ix, 1)
		    in  %% Line 1254
			apply 'from_orddict_1'/6
			    (N, Max, Xs, N, D, [D|As])
		%% Line 1255
		<[_cor24|_cor25]> when 'true' ->
		    %% Line 1256
		    call 'erlang':'error'
			({'badarg',Xs})
		%% Line 1257
		<_cor26> when 'true' ->
		    let <_cor12> =
			%% Line 1258
			call 'erlang':'+'
			    (Ix, 1)
		    in  %% Line 1258
			apply 'from_orddict_1'/6
			    (_cor12, Max, Xs, N0, D, [D|As])
	      end
	end
'collect_leafs'/3 =
    %% Line 1262
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1263
	    call 'erlang':'-'
		(_cor2, 1)
	in  let <_cor4> =
		%% Line 1263
		call 'erlang':'div'
		    (_cor3, _cor0)
	    in  let <I> =
		    %% Line 1263
		    call 'erlang':'+'
			(_cor4, 1)
		in  let <_cor6> =
			%% Line 1264
			call 'erlang':'rem'
			    (I, 10)
		    in  let <_cor7> =
			    %% Line 1264
			    call 'erlang':'-'
				(10, _cor6)
			in  let <_cor8> =
				%% Line 1264
				call 'erlang':'rem'
				    (_cor7, 10)
			    in  let <Pad> =
				    %% Line 1264
				    call 'erlang':'*'
					(_cor8, _cor0)
				in  %% Line 1265
				    case Pad of
				      %% Line 1266
				      <0> when 'true' ->
					  %% Line 1267
					  apply 'collect_leafs'/6
					      (10, _cor1, _cor0, _cor2, [_cor0|[]], [])
				      %% Line 1268
				      <_cor14> when 'true' ->
					  %% Line 1269
					  apply 'collect_leafs'/6
					      (10, [Pad|_cor1], _cor0, _cor2, [_cor0|[]], [])
				    end
'collect_leafs'/6 =
    %% Line 1272
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,Xs,S,N,As,Es> when 'true' ->
	      let <E> =
		  %% Line 1273
		  call 'erlang':'list_to_tuple'
		      (As)
	      in  %% Line 1274
		  case Xs of
		    %% Line 1275
		    <[]> when 'true' ->
			%% Line 1276
			case Es of
			  %% Line 1277
			  <[]> when 'true' ->
			      let <_cor7> =
				  %% Line 1278
				  call 'erlang':'*'
				      (S, 10)
			      in  %% Line 1278
				  {E,N,_cor7}
			  %% Line 1279
			  <_cor31> when 'true' ->
			      let <_cor9> =
				  %% Line 1280
				  call 'lists':'reverse'
				      ([E|Es])
			      in  let <_cor8> =
				      %% Line 1281
				      call 'erlang':'*'
					  (S, 10)
				  in  %% Line 1280
				      apply 'collect_leafs'/3
					  (N, _cor9, _cor8)
			end
		    %% Line 1283
		    <_cor32> when 'true' ->
			%% Line 1284
			apply 'collect_leafs'/6
			    (10, Xs, S, N, [S|[]], [E|Es])
		  end
	  %% Line 1286
	  <I,[X|Xs],S,N,As0,Es0>
	      when %% Line 1287
		call 'erlang':'is_integer'
		    (X) ->
	      let <Step0> =
		  %% Line 1289
		  call 'erlang':'div'
		      (X, S)
	      in  %% Line 1290
		  case <> of
		    %% Line 1291
		    <>
			when call 'erlang':'<'
			      (Step0,
			       I) ->
			let <As> =
			    %% Line 1292
			    apply 'push'/3
				(Step0, S, As0)
			in  let <_cor14> =
				%% Line 1293
				call 'erlang':'-'
				    (I, Step0)
			    in  %% Line 1293
				apply 'collect_leafs'/6
				    (_cor14, Xs, S, N, As, Es0)
		    %% Line 1294
		    <>
			when call 'erlang':'=:='
			      (I,
			       10) ->
			let <Step> =
			    %% Line 1295
			    call 'erlang':'rem'
				(Step0, 10)
			in  let <As> =
				%% Line 1296
				apply 'push'/3
				    (Step, S, As0)
			    in  let <_cor17> =
				    %% Line 1297
				    call 'erlang':'-'
					(I, Step)
				in  %% Line 1297
				    apply 'collect_leafs'/6
					(_cor17, Xs, S, N, As, [X|Es0])
		    %% Line 1298
		    <>
			when call 'erlang':'=:='
			      (I,
			       Step0) ->
			let <As> =
			    %% Line 1299
			    apply 'push'/3
				(I, S, As0)
			in  %% Line 1300
			    apply 'collect_leafs'/6
				(0, Xs, S, N, As, Es0)
		    %% Line 1301
		    <> when 'true' ->
			let <As> =
			    %% Line 1302
			    apply 'push'/3
				(I, S, As0)
			in  let <Step> =
				%% Line 1303
				call 'erlang':'-'
				    (Step0, I)
			    in  let <_cor21> =
				    %% Line 1304
				    call 'erlang':'*'
					(Step, S)
				in  %% Line 1304
				    apply 'collect_leafs'/6
					(0, [_cor21|Xs], S, N, As, Es0)
		  end
	  %% Line 1306
	  <I,[X|Xs],S,N,As,Es> when 'true' ->
	      let <_cor22> =
		  %% Line 1307
		  call 'erlang':'-'
		      (I, 1)
	      in  %% Line 1307
		  apply 'collect_leafs'/6
		      (_cor22, Xs, S, N, [X|As], Es)
	  %% Line 1308
	  <10,[],S,N,[_cor33|[]],Es> when 'true' ->
	      let <_cor24> =
		  %% Line 1309
		  call 'lists':'reverse'
		      (Es)
	      in  let <_cor23> =
		      %% Line 1309
		      call 'erlang':'*'
			  (S, 10)
		  in  %% Line 1309
		      apply 'collect_leafs'/3
			  (N, _cor24, _cor23)
	  ( <_cor30,_cor29,_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'collect_leafs',6}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 1399
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Function,Array = {'array',N,_cor12,D,E}>
	      when %% Line 1400
		call 'erlang':'is_function'
		    (Function,
		     2) ->
	      %% Line 1401
	      case <> of
		<>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    let <_cor4> =
			%% Line 1402
			call 'erlang':'setelement'
			    (5, Array, [])
		    in  let <_cor6> =
			    %% Line 1403
			    call 'erlang':'-'
				(N, 1)
			in  let <_rec25> =
				%% Line 1403
				apply 'map_1'/5
				    (_cor6, E, 0, Function, D)
			    in  %% Line 1403
				case _cor4 of
				  <{'array',_cor18,_cor19,_cor20,_cor21}> when 'true' ->
				      call 'erlang':'setelement'
					  (5, _cor4, _rec25)
				  ( <_cor22> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','array'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1404
		<> when 'true' ->
		    %% Line 1405
		    Array
	      end
	  %% Line 1407
	  <_cor23,_cor24> when 'true' ->
	      %% Line 1408
	      call 'erlang':'error'
		  ('badarg')
	end
'map_1'/5 =
    %% Line 1415
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,E = {_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,S},Ix,F,D> when 'true' ->
	      let <_cor6> =
		  %% Line 1417
		  call 'erlang':'div'
		      (N, S)
	      in  let <_cor7> =
		      %% Line 1417
		      call 'erlang':'+'
			  (_cor6, 1)
		  in  let <_cor5> =
			  %% Line 1417
			  call 'erlang':'rem'
			      (N, S)
		      in  let <_cor8> =
			      %% Line 1416
			      apply 'map_2'/9
				  (1, E, Ix, F, D, [], _cor7, _cor5, %% Line 1417
								     S)
			  in  let <_cor9> =
				  %% Line 1416
				  call 'lists':'reverse'
				      ([S|_cor8])
			      in  %% Line 1416
				  call 'erlang':'list_to_tuple'
				      (_cor9)
	  %% Line 1418
	  <N,E,Ix,F,D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      let <_cor10> =
		  %% Line 1419
		  apply 'unfold'/2
		      (E, D)
	      in  %% Line 1419
		  apply 'map_1'/5
		      (N, _cor10, Ix, F, D)
	  %% Line 1420
	  <N,E,Ix,F,D> when 'true' ->
	      let <_cor11> =
		  %% Line 1421
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor12> =
		      %% Line 1421
		      apply 'map_3'/7
			  (1, E, Ix, F, D, _cor11, [])
		  in  let <_cor13> =
			  %% Line 1421
			  call 'lists':'reverse'
			      (_cor12)
		      in  %% Line 1421
			  call 'erlang':'list_to_tuple'
			      (_cor13)
	end
'map_2'/9 =
    %% Line 1423
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E,Ix,F,D,L,_cor26,R,_X_S>
	      when call 'erlang':'=:='
		    (_cor26,
		     I) ->
	      let <_cor11> =
		  %% Line 1424
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor9> =
		      %% Line 1424
		      call 'erlang':'element'
			  (I, E)
		  in  let <_cor10> =
			  %% Line 1424
			  apply 'map_1'/5
			      (R, _cor9, Ix, F, D)
		      in  %% Line 1424
			  apply 'map_2_1'/3
			      (_cor11, E, [_cor10|L])
	  %% Line 1425
	  <I,E,Ix,F,D,L,N,R,S> when 'true' ->
	      let <_cor16> =
		  %% Line 1426
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor15> =
		      %% Line 1426
		      call 'erlang':'+'
			  (Ix, S)
		  in  let <_cor13> =
			  %% Line 1427
			  call 'erlang':'-'
			      (S, 1)
		      in  let <_cor12> =
			      %% Line 1427
			      call 'erlang':'element'
				  (I, E)
			  in  let <_cor14> =
				  %% Line 1427
				  apply 'map_1'/5
				      (_cor13, _cor12, Ix, F, D)
			      in  %% Line 1426
				  apply 'map_2'/9
				      (_cor16, E, _cor15, F, D, %% Line 1427
								[_cor14|L], %% Line 1428
									    N, %% Line 1428
									       R, %% Line 1428
										  S)
	end
'map_2_1'/3 =
    %% Line 1430
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,E,L>
	      when call 'erlang':'=<'
		    (I,
		     10) ->
	      let <_cor4> =
		  %% Line 1431
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor3> =
		      %% Line 1431
		      call 'erlang':'element'
			  (I, E)
		  in  %% Line 1431
		      apply 'map_2_1'/3
			  (_cor4, E, [_cor3|L])
	  %% Line 1432
	  <_X_I,_X_E,L> when 'true' ->
	      %% Line 1433
	      L
	end
'map_3'/7 =
    %% Line 1438
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E,Ix,F,D,N,L>
	      when call 'erlang':'=<'
		    (I,
		     N) ->
	      let <_cor10> =
		  %% Line 1439
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor9> =
		      %% Line 1439
		      call 'erlang':'+'
			  (Ix, 1)
		  in  let <_cor7> =
			  %% Line 1439
			  call 'erlang':'element'
			      (I, E)
		      in  let <_cor8> =
			      %% Line 1439
			      apply F
				  (Ix, _cor7)
			  in  %% Line 1439
			      apply 'map_3'/7
				  (_cor10, E, _cor9, F, D, N, [_cor8|L])
	  %% Line 1440
	  <I,E,Ix,F,D,N,L>
	      when call 'erlang':'=<'
		    (I,
		     10) ->
	      let <_cor12> =
		  %% Line 1441
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor11> =
		      %% Line 1441
		      call 'erlang':'+'
			  (Ix, 1)
		  in  %% Line 1441
		      apply 'map_3'/7
			  (_cor12, E, _cor11, F, D, N, [D|L])
	  %% Line 1442
	  <_X_I,_X_E,_X_Ix,_X_F,_X_D,_X_N,L> when 'true' ->
	      %% Line 1443
	      L
	end
'unfold'/2 =
    %% Line 1446
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,_X_D>
	      when call 'erlang':'>'
		    (S,
		     10) ->
	      let <_cor3> =
		  %% Line 1447
		  call 'erlang':'div'
		      (S, 10)
	      in  let <_cor5> =
		      %% Line 1447
		      call 'erlang':'make_tuple'
			  (11, _cor3)
		  in  let <_cor2> =
			  %% Line 1447
			  call 'erlang':'div'
			      (S, 10)
		      in  %% Line 1447
			  call 'erlang':'setelement'
			      (11, _cor5, _cor2)
	  %% Line 1448
	  <_X_S,D> when 'true' ->
	      %% Line 1449
	      call 'erlang':'make_tuple'
		  (10, D)
	end
'sparse_map'/2 =
    %% Line 1491
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Function,Array = {'array',N,_cor12,D,E}>
	      when %% Line 1492
		call 'erlang':'is_function'
		    (Function,
		     2) ->
	      %% Line 1493
	      case <> of
		<>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    let <_cor4> =
			%% Line 1494
			call 'erlang':'setelement'
			    (5, Array, [])
		    in  let <_cor6> =
			    %% Line 1495
			    call 'erlang':'-'
				(N, 1)
			in  let <_rec28> =
				%% Line 1495
				apply 'sparse_map_1'/5
				    (_cor6, E, 0, Function, D)
			    in  %% Line 1495
				case _cor4 of
				  <{'array',_cor18,_cor19,_cor20,_cor21}> when 'true' ->
				      call 'erlang':'setelement'
					  (5, _cor4, _rec28)
				  ( <_cor22> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','array'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		%% Line 1496
		<> when 'true' ->
		    %% Line 1497
		    Array
	      end
	  %% Line 1499
	  <_cor23,_cor24> when 'true' ->
	      %% Line 1500
	      call 'erlang':'error'
		  ('badarg')
	end
'sparse_map_1'/5 =
    %% Line 1505
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,E = {_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,S},Ix,F,D> when 'true' ->
	      let <_cor6> =
		  %% Line 1507
		  call 'erlang':'div'
		      (N, S)
	      in  let <_cor7> =
		      %% Line 1507
		      call 'erlang':'+'
			  (_cor6, 1)
		  in  let <_cor5> =
			  %% Line 1508
			  call 'erlang':'rem'
			      (N, S)
		      in  let <_cor8> =
			      %% Line 1506
			      apply 'sparse_map_2'/9
				  (1, E, Ix, F, D, [], _cor7, _cor5, %% Line 1508
								     S)
			  in  let <_cor9> =
				  %% Line 1506
				  call 'lists':'reverse'
				      ([S|_cor8])
			      in  %% Line 1506
				  call 'erlang':'list_to_tuple'
				      (_cor9)
	  %% Line 1509
	  <_X_N,E,_X_Ix,_X_F,_X_D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 1510
	      E
	  %% Line 1511
	  <_X_N,E,Ix,F,D> when 'true' ->
	      let <_cor10> =
		  %% Line 1512
		  apply 'sparse_map_3'/6
		      (1, E, Ix, F, D, [])
	      in  let <_cor11> =
		      %% Line 1512
		      call 'lists':'reverse'
			  (_cor10)
		  in  %% Line 1512
		      call 'erlang':'list_to_tuple'
			  (_cor11)
	end
'sparse_map_2'/9 =
    %% Line 1514
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E,Ix,F,D,L,_cor26,R,_X_S>
	      when call 'erlang':'=:='
		    (_cor26,
		     I) ->
	      let <_cor11> =
		  %% Line 1515
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor9> =
		      %% Line 1516
		      call 'erlang':'element'
			  (I, E)
		  in  let <_cor10> =
			  %% Line 1516
			  apply 'sparse_map_1'/5
			      (R, _cor9, Ix, F, D)
		      in  %% Line 1515
			  apply 'sparse_map_2_1'/3
			      (_cor11, E, %% Line 1516
					  [_cor10|L])
	  %% Line 1517
	  <I,E,Ix,F,D,L,N,R,S> when 'true' ->
	      let <_cor16> =
		  %% Line 1518
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor15> =
		      %% Line 1518
		      call 'erlang':'+'
			  (Ix, S)
		  in  let <_cor13> =
			  %% Line 1519
			  call 'erlang':'-'
			      (S, 1)
		      in  let <_cor12> =
			      %% Line 1519
			      call 'erlang':'element'
				  (I, E)
			  in  let <_cor14> =
				  %% Line 1519
				  apply 'sparse_map_1'/5
				      (_cor13, _cor12, Ix, F, D)
			      in  %% Line 1518
				  apply 'sparse_map_2'/9
				      (_cor16, E, _cor15, F, D, %% Line 1519
								[_cor14|L], %% Line 1520
									    N, %% Line 1520
									       R, %% Line 1520
										  S)
	end
'sparse_map_2_1'/3 =
    %% Line 1522
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,E,L>
	      when call 'erlang':'=<'
		    (I,
		     10) ->
	      let <_cor4> =
		  %% Line 1523
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor3> =
		      %% Line 1523
		      call 'erlang':'element'
			  (I, E)
		  in  %% Line 1523
		      apply 'sparse_map_2_1'/3
			  (_cor4, E, [_cor3|L])
	  %% Line 1524
	  <_X_I,_X_E,L> when 'true' ->
	      %% Line 1525
	      L
	end
'sparse_map_3'/6 =
    %% Line 1530
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,T,Ix,F,D,L>
	      when call 'erlang':'=<'
		    (I,
		     10) ->
	      %% Line 1531
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 1532
		<_cor18>
		    when call 'erlang':'=:='
			  (_cor18,
			   D) ->
		    let <_cor7> =
			call 'erlang':'+'
			    (I, 1)
		    in  let <_cor6> =
			    call 'erlang':'+'
				(Ix, 1)
			in  apply 'sparse_map_3'/6
				(_cor7, T, _cor6, F, D, [D|L])
		%% Line 1533
		<E> when 'true' ->
		    let <_cor10> =
			call 'erlang':'+'
			    (I, 1)
		    in  let <_cor9> =
			    call 'erlang':'+'
				(Ix, 1)
			in  let <_cor8> =
				apply F
				    (Ix, E)
			    in  apply 'sparse_map_3'/6
				    (_cor10, T, _cor9, F, D, [_cor8|L])
	      end
	  %% Line 1535
	  <_X_I,_X_E,_X_Ix,_X_F,_X_D,L> when 'true' ->
	      %% Line 1536
	      L
	end
'foldl'/3 =
    %% Line 1587
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Function,A,{'array',N,_cor7,D,E}>
	      when %% Line 1588
		call 'erlang':'is_function'
		    (Function,
		     3) ->
	      %% Line 1589
	      case <> of
		<>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    let <_cor3> =
			%% Line 1590
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 1590
			apply 'foldl_1'/6
			    (_cor3, E, A, 0, Function, D)
		%% Line 1591
		<> when 'true' ->
		    %% Line 1592
		    A
	      end
	  %% Line 1594
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 1595
	      call 'erlang':'error'
		  ('badarg')
	end
'foldl_1'/6 =
    %% Line 1597
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,E = {_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,S},A,Ix,F,D> when 'true' ->
	      let <_cor7> =
		  %% Line 1598
		  call 'erlang':'div'
		      (N, S)
	      in  let <_cor8> =
		      %% Line 1598
		      call 'erlang':'+'
			  (_cor7, 1)
		  in  let <_cor6> =
			  %% Line 1598
			  call 'erlang':'rem'
			      (N, S)
		      in  %% Line 1598
			  apply 'foldl_2'/9
			      (1, E, A, Ix, F, D, _cor8, _cor6, S)
	  %% Line 1599
	  <N,E,A,Ix,F,D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      let <_cor9> =
		  %% Line 1600
		  apply 'unfold'/2
		      (E, D)
	      in  %% Line 1600
		  apply 'foldl_1'/6
		      (N, _cor9, A, Ix, F, D)
	  %% Line 1601
	  <N,E,A,Ix,F,_X_D> when 'true' ->
	      let <_cor10> =
		  %% Line 1602
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1602
		  apply 'foldl_3'/6
		      (1, E, A, Ix, F, _cor10)
	end
'foldl_2'/9 =
    %% Line 1604
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E,A,Ix,F,D,_cor24,R,_X_S>
	      when call 'erlang':'=:='
		    (_cor24,
		     I) ->
	      let <_cor9> =
		  %% Line 1605
		  call 'erlang':'element'
		      (I, E)
	      in  %% Line 1605
		  apply 'foldl_1'/6
		      (R, _cor9, A, Ix, F, D)
	  %% Line 1606
	  <I,E,A,Ix,F,D,N,R,S> when 'true' ->
	      let <_cor14> =
		  %% Line 1607
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor12> =
		      %% Line 1607
		      call 'erlang':'-'
			  (S, 1)
		  in  let <_cor11> =
			  %% Line 1607
			  call 'erlang':'element'
			      (I, E)
		      in  let <_cor13> =
			      %% Line 1607
			      apply 'foldl_1'/6
				  (_cor12, _cor11, A, Ix, F, D)
			  in  let <_cor10> =
				  %% Line 1608
				  call 'erlang':'+'
				      (Ix, S)
			      in  %% Line 1607
				  apply 'foldl_2'/9
				      (_cor14, E, _cor13, _cor10, %% Line 1608
								  F, %% Line 1608
								     D, %% Line 1608
									N, %% Line 1608
									   R, %% Line 1608
									      S)
	end
'foldl_3'/6 =
    %% Line 1613
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E,A,Ix,F,N>
	      when call 'erlang':'=<'
		    (I,
		     N) ->
	      let <_cor9> =
		  %% Line 1614
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor7> =
		      %% Line 1614
		      call 'erlang':'element'
			  (I, E)
		  in  let <_cor8> =
			  %% Line 1614
			  apply F
			      (Ix, _cor7, A)
		      in  let <_cor6> =
			      %% Line 1614
			      call 'erlang':'+'
				  (Ix, 1)
			  in  %% Line 1614
			      apply 'foldl_3'/6
				  (_cor9, E, _cor8, _cor6, F, N)
	  %% Line 1615
	  <_X_I,_X_E,A,_X_Ix,_X_F,_X_N> when 'true' ->
	      %% Line 1616
	      A
	end
'sparse_foldl'/3 =
    %% Line 1660
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Function,A,{'array',N,_cor7,D,E}>
	      when %% Line 1661
		call 'erlang':'is_function'
		    (Function,
		     3) ->
	      %% Line 1662
	      case <> of
		<>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    let <_cor3> =
			%% Line 1663
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 1663
			apply 'sparse_foldl_1'/6
			    (_cor3, E, A, 0, Function, D)
		%% Line 1664
		<> when 'true' ->
		    %% Line 1665
		    A
	      end
	  %% Line 1667
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 1668
	      call 'erlang':'error'
		  ('badarg')
	end
'sparse_foldl_1'/6 =
    %% Line 1673
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,E = {_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,S},A,Ix,F,D> when 'true' ->
	      let <_cor7> =
		  %% Line 1674
		  call 'erlang':'div'
		      (N, S)
	      in  let <_cor8> =
		      %% Line 1674
		      call 'erlang':'+'
			  (_cor7, 1)
		  in  let <_cor6> =
			  %% Line 1674
			  call 'erlang':'rem'
			      (N, S)
		      in  %% Line 1674
			  apply 'sparse_foldl_2'/9
			      (1, E, A, Ix, F, D, _cor8, _cor6, S)
	  %% Line 1675
	  <_X_N,E,A,_X_Ix,_X_F,_X_D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 1676
	      A
	  %% Line 1677
	  <N,E,A,Ix,F,D> when 'true' ->
	      let <_cor9> =
		  %% Line 1678
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1678
		  apply 'sparse_foldl_3'/7
		      (1, E, A, Ix, F, D, _cor9)
	end
'sparse_foldl_2'/9 =
    %% Line 1680
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E,A,Ix,F,D,_cor24,R,_X_S>
	      when call 'erlang':'=:='
		    (_cor24,
		     I) ->
	      let <_cor9> =
		  %% Line 1681
		  call 'erlang':'element'
		      (I, E)
	      in  %% Line 1681
		  apply 'sparse_foldl_1'/6
		      (R, _cor9, A, Ix, F, D)
	  %% Line 1682
	  <I,E,A,Ix,F,D,N,R,S> when 'true' ->
	      let <_cor14> =
		  %% Line 1683
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor12> =
		      %% Line 1683
		      call 'erlang':'-'
			  (S, 1)
		  in  let <_cor11> =
			  %% Line 1683
			  call 'erlang':'element'
			      (I, E)
		      in  let <_cor13> =
			      %% Line 1683
			      apply 'sparse_foldl_1'/6
				  (_cor12, _cor11, A, Ix, F, D)
			  in  let <_cor10> =
				  %% Line 1684
				  call 'erlang':'+'
				      (Ix, S)
			      in  %% Line 1683
				  apply 'sparse_foldl_2'/9
				      (_cor14, E, _cor13, _cor10, %% Line 1684
								  F, %% Line 1684
								     D, %% Line 1684
									N, %% Line 1684
									   R, %% Line 1684
									      S)
	end
'sparse_foldl_3'/7 =
    %% Line 1686
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,T,A,Ix,F,D,N>
	      when call 'erlang':'=<'
		    (I,
		     N) ->
	      %% Line 1687
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 1688
		<_cor20>
		    when call 'erlang':'=:='
			  (_cor20,
			   D) ->
		    let <_cor8> =
			call 'erlang':'+'
			    (I, 1)
		    in  let <_cor7> =
			    call 'erlang':'+'
				(Ix, 1)
			in  apply 'sparse_foldl_3'/7
				(_cor8, T, A, _cor7, F, D, N)
		%% Line 1689
		<E> when 'true' ->
		    let <_cor11> =
			call 'erlang':'+'
			    (I, 1)
		    in  let <_cor10> =
			    apply F
				(Ix, E, A)
			in  let <_cor9> =
				call 'erlang':'+'
				    (Ix, 1)
			    in  apply 'sparse_foldl_3'/7
				    (_cor11, T, _cor10, _cor9, F, D, N)
	      end
	  %% Line 1691
	  <_X_I,_X_T,A,_X_Ix,_X_F,_X_D,_X_N> when 'true' ->
	      %% Line 1692
	      A
	end
'foldr'/3 =
    %% Line 1737
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Function,A,{'array',N,_cor7,D,E}>
	      when %% Line 1738
		call 'erlang':'is_function'
		    (Function,
		     3) ->
	      %% Line 1739
	      case <> of
		<>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    let <I> =
			%% Line 1740
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 1741
			apply 'foldr_1'/6
			    (I, E, I, A, Function, D)
		%% Line 1742
		<> when 'true' ->
		    %% Line 1743
		    A
	      end
	  %% Line 1745
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 1746
	      call 'erlang':'error'
		  ('badarg')
	end
'foldr_1'/6 =
    %% Line 1750
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E = {_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,S},Ix,A,F,D> when 'true' ->
	      let <_cor8> =
		  %% Line 1751
		  call 'erlang':'div'
		      (I, S)
	      in  let <_cor9> =
		      %% Line 1751
		      call 'erlang':'+'
			  (_cor8, 1)
		  in  let <_cor7> =
			  %% Line 1751
			  call 'erlang':'rem'
			      (I, S)
		      in  let <_cor6> =
			      %% Line 1751
			      call 'erlang':'-'
				  (S, 1)
			  in  %% Line 1751
			      apply 'foldr_2'/8
				  (_cor9, E, Ix, A, F, D, _cor7, _cor6)
	  %% Line 1752
	  <I,E,Ix,A,F,D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      let <_cor10> =
		  %% Line 1753
		  apply 'unfold'/2
		      (E, D)
	      in  %% Line 1753
		  apply 'foldr_1'/6
		      (I, _cor10, Ix, A, F, D)
	  %% Line 1754
	  <I,E,Ix,A,F,_X_D> when 'true' ->
	      let <I1> =
		  %% Line 1755
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor12> =
		      %% Line 1756
		      call 'erlang':'-'
			  (Ix, I1)
		  in  %% Line 1756
		      apply 'foldr_3'/5
			  (I1, E, _cor12, A, F)
	end
'foldr_2'/8 =
    %% Line 1758
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_E,_X_Ix,A,_X_F,_X_D,_X_R,_X_R0> when 'true' ->
	      %% Line 1759
	      A
	  %% Line 1760
	  <I,E,Ix,A,F,D,R,R0> when 'true' ->
	      let <_cor12> =
		  %% Line 1761
		  call 'erlang':'-'
		      (I, 1)
	      in  let <_cor10> =
		      %% Line 1761
		      call 'erlang':'-'
			  (Ix, R)
		  in  let <_cor11> =
			  %% Line 1761
			  call 'erlang':'-'
			      (_cor10, 1)
		      in  let <_cor8> =
			      %% Line 1762
			      call 'erlang':'element'
				  (I, E)
			  in  let <_cor9> =
				  %% Line 1762
				  apply 'foldr_1'/6
				      (R, _cor8, Ix, A, F, D)
			      in  %% Line 1761
				  apply 'foldr_2'/8
				      (_cor12, E, _cor11, _cor9, %% Line 1763
								 F, %% Line 1763
								    D, %% Line 1763
								       R0, %% Line 1763
									   R0)
	end
'foldr_3'/5 =
    %% Line 1768
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_E,_X_Ix,A,_X_F> when 'true' ->
	      %% Line 1769
	      A
	  %% Line 1770
	  <I,E,Ix,A,F> when 'true' ->
	      let <_cor8> =
		  %% Line 1771
		  call 'erlang':'-'
		      (I, 1)
	      in  let <_cor6> =
		      %% Line 1771
		      call 'erlang':'+'
			  (Ix, I)
		  in  let <_cor5> =
			  %% Line 1771
			  call 'erlang':'element'
			      (I, E)
		      in  let <_cor7> =
			      %% Line 1771
			      apply F
				  (_cor6, _cor5, A)
			  in  %% Line 1771
			      apply 'foldr_3'/5
				  (_cor8, E, Ix, _cor7, F)
	end
'sparse_foldr'/3 =
    %% Line 1816
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Function,A,{'array',N,_cor7,D,E}>
	      when %% Line 1817
		call 'erlang':'is_function'
		    (Function,
		     3) ->
	      %% Line 1818
	      case <> of
		<>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    let <I> =
			%% Line 1819
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 1820
			apply 'sparse_foldr_1'/6
			    (I, E, I, A, Function, D)
		%% Line 1821
		<> when 'true' ->
		    %% Line 1822
		    A
	      end
	  %% Line 1824
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 1825
	      call 'erlang':'error'
		  ('badarg')
	end
'sparse_foldr_1'/6 =
    %% Line 1830
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E = {_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,S},Ix,A,F,D> when 'true' ->
	      let <_cor8> =
		  %% Line 1831
		  call 'erlang':'div'
		      (I, S)
	      in  let <_cor9> =
		      %% Line 1831
		      call 'erlang':'+'
			  (_cor8, 1)
		  in  let <_cor7> =
			  %% Line 1831
			  call 'erlang':'rem'
			      (I, S)
		      in  let <_cor6> =
			      %% Line 1831
			      call 'erlang':'-'
				  (S, 1)
			  in  %% Line 1831
			      apply 'sparse_foldr_2'/8
				  (_cor9, E, Ix, A, F, D, _cor7, _cor6)
	  %% Line 1832
	  <_X_I,E,_X_Ix,A,_X_F,_X_D>
	      when call 'erlang':'is_integer'
		    (E) ->
	      %% Line 1833
	      A
	  %% Line 1834
	  <I,E,Ix,A,F,D> when 'true' ->
	      let <I1> =
		  %% Line 1835
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor11> =
		      %% Line 1836
		      call 'erlang':'-'
			  (Ix, I1)
		  in  %% Line 1836
		      apply 'sparse_foldr_3'/6
			  (I1, E, _cor11, A, F, D)
	end
'sparse_foldr_2'/8 =
    %% Line 1838
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_E,_X_Ix,A,_X_F,_X_D,_X_R,_X_R0> when 'true' ->
	      %% Line 1839
	      A
	  %% Line 1840
	  <I,E,Ix,A,F,D,R,R0> when 'true' ->
	      let <_cor12> =
		  %% Line 1841
		  call 'erlang':'-'
		      (I, 1)
	      in  let <_cor10> =
		      %% Line 1841
		      call 'erlang':'-'
			  (Ix, R)
		  in  let <_cor11> =
			  %% Line 1841
			  call 'erlang':'-'
			      (_cor10, 1)
		      in  let <_cor8> =
			      %% Line 1842
			      call 'erlang':'element'
				  (I, E)
			  in  let <_cor9> =
				  %% Line 1842
				  apply 'sparse_foldr_1'/6
				      (R, _cor8, Ix, A, F, D)
			      in  %% Line 1841
				  apply 'sparse_foldr_2'/8
				      (_cor12, E, _cor11, _cor9, %% Line 1843
								 F, %% Line 1843
								    D, %% Line 1843
								       R0, %% Line 1843
									   R0)
	end
'sparse_foldr_3'/6 =
    %% Line 1848
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_T,_X_Ix,A,_X_F,_X_D> when 'true' ->
	      %% Line 1849
	      A
	  %% Line 1850
	  <I,T,Ix,A,F,D> when 'true' ->
	      %% Line 1851
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 1852
		<_cor17>
		    when call 'erlang':'=:='
			  (_cor17,
			   D) ->
		    let <_cor6> =
			call 'erlang':'-'
			    (I, 1)
		    in  apply 'sparse_foldr_3'/6
			    (_cor6, T, Ix, A, F, D)
		%% Line 1853
		<E> when 'true' ->
		    let <_cor9> =
			call 'erlang':'-'
			    (I, 1)
		    in  let <_cor7> =
			    call 'erlang':'+'
				(Ix, I)
			in  let <_cor8> =
				apply F
				    (_cor7, E, A)
			    in  apply 'sparse_foldr_3'/6
				    (_cor9, T, Ix, _cor8, F, D)
	      end
	end
'sparse_size'/1 =
    %% Line 1866
    fun (_cor0) ->
	let <F> =
	    %% Line 1867
	    ( fun (_cor3,_cor2,_cor1) ->
		  call 'erlang':'throw'
		      ({'value',_cor3})
	      -| [{'id',{0,0,'-sparse_size/1-fun-0-'}}] )
	in  %% Line 1868
	    try
		apply 'sparse_foldr'/3
		    (F, [], _cor0)
	    of <_cor8> ->
		case _cor8 of
		  %% Line 1869
		  <[]> when 'true' ->
		      0
		  ( <_cor9> when 'true' ->
			primop 'match_fail'
			    ({'try_clause',_cor9})
		    -| ['compiler_generated'] )
		end
	    catch <_cor12,_cor11,_cor10> ->
		case <_cor12,_cor11,_cor10> of
		  %% Line 1871
		  <'throw',{'value',I},_cor14> when 'true' ->
		      %% Line 1872
		      call 'erlang':'+'
			  (I, 1)
		  ( <_cor12,_cor11,_cor10> when 'true' ->
			primop 'raise'
			    (_cor10, _cor11)
		    -| ['compiler_generated'] )
		end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('array')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('array', _cor0)
end