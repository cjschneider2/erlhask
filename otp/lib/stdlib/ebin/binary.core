module 'binary' ['at'/2,
		 'bin_to_list'/1,
		 'bin_to_list'/2,
		 'bin_to_list'/3,
		 'compile_pattern'/1,
		 'copy'/1,
		 'copy'/2,
		 'decode_unsigned'/1,
		 'decode_unsigned'/2,
		 'encode_unsigned'/1,
		 'encode_unsigned'/2,
		 'first'/1,
		 'last'/1,
		 'list_to_bin'/1,
		 'longest_common_prefix'/1,
		 'longest_common_suffix'/1,
		 'match'/2,
		 'match'/3,
		 'matches'/2,
		 'matches'/3,
		 'module_info'/0,
		 'module_info'/1,
		 'part'/2,
		 'part'/3,
		 'referenced_byte_size'/1,
		 'replace'/3,
		 'replace'/4,
		 'split'/2,
		 'split'/3]
    attributes [%% Line 24
		'export_type' =
		    %% Line 24
		    [{'cp',0}],
		%% Line 26
		'opaque' =
		    %% Line 26
		    [{'cp',{'type',26,'tuple',[{'type',26,'union',[{'atom',26,'am'}|[{'atom',26,'bm'}]]}|[{'type',26,'binary',[]}]]},[]}],
		%% Line 27
		'type' =
		    %% Line 27
		    [{'part',{'type',27,'tuple',[{'ann_type',27,[{'var',27,'Start'}|[{'type',27,'non_neg_integer',[]}]]}|[{'ann_type',27,[{'var',27,'Length'}|[{'type',27,'integer',[]}]]}]]},[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'at',2},[{'type',38,'bounded_fun',[{'type',38,'fun',[{'type',38,'product',[{'var',38,'Subject'}|[{'var',38,'Pos'}]]}|[{'type',38,'byte',[]}]]}|[[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Subject'}|[{'type',39,'binary',[]}]]]]}|[{'type',40,'constraint',[{'atom',40,'is_subtype'}|[[{'var',40,'Pos'}|[{'type',40,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'bin_to_list',1},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'var',45,'Subject'}]}|[{'type',45,'list',[{'type',45,'byte',[]}]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Subject'}|[{'type',46,'binary',[]}]]]]}]]]}]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'bin_to_list',2},[{'type',51,'bounded_fun',[{'type',51,'fun',[{'type',51,'product',[{'var',51,'Subject'}|[{'var',51,'PosLen'}]]}|[{'type',51,'list',[{'type',51,'byte',[]}]}]]}|[[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'Subject'}|[{'type',52,'binary',[]}]]]]}|[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'PosLen'}|[{'type',53,'part',[]}]]]]}]]]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'bin_to_list',3},[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'Subject'}|[{'var',58,'Pos'}|[{'var',58,'Len'}]]]}|[{'type',58,'list',[{'type',58,'byte',[]}]}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Subject'}|[{'type',59,'binary',[]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Pos'}|[{'type',60,'non_neg_integer',[]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Len'}|[{'type',61,'integer',[]}]]]]}]]]]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'compile_pattern',1},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'Pattern'}]}|[{'type',66,'cp',[]}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Pattern'}|[{'type',67,'union',[{'type',67,'binary',[]}|[{'type',67,'list',[{'type',67,'binary',[]}]}]]}]]]]}]]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'copy',1},[{'type',72,'bounded_fun',[{'type',72,'fun',[{'type',72,'product',[{'var',72,'Subject'}]}|[{'type',72,'binary',[]}]]}|[[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Subject'}|[{'type',73,'binary',[]}]]]]}]]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'copy',2},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'Subject'}|[{'var',78,'N'}]]}|[{'type',78,'binary',[]}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Subject'}|[{'type',79,'binary',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'N'}|[{'type',80,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'decode_unsigned',1},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'Subject'}]}|[{'var',85,'Unsigned'}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Subject'}|[{'type',86,'binary',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Unsigned'}|[{'type',87,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'decode_unsigned',2},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Subject'}|[{'var',92,'Endianess'}]]}|[{'var',92,'Unsigned'}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Subject'}|[{'type',93,'binary',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Endianess'}|[{'type',94,'union',[{'atom',94,'big'}|[{'atom',94,'little'}]]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Unsigned'}|[{'type',95,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'encode_unsigned',1},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'Unsigned'}]}|[{'type',100,'binary',[]}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Unsigned'}|[{'type',101,'non_neg_integer',[]}]]]]}]]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'encode_unsigned',2},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'Unsigned'}|[{'var',106,'Endianess'}]]}|[{'type',106,'binary',[]}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Unsigned'}|[{'type',107,'non_neg_integer',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Endianess'}|[{'type',108,'union',[{'atom',108,'big'}|[{'atom',108,'little'}]]}]]]]}]]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'first',1},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'Subject'}]}|[{'type',113,'byte',[]}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Subject'}|[{'type',114,'binary',[]}]]]]}]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'last',1},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'Subject'}]}|[{'type',119,'byte',[]}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Subject'}|[{'type',120,'binary',[]}]]]]}]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'list_to_bin',1},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'ByteList'}]}|[{'type',125,'binary',[]}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'ByteList'}|[{'type',126,'iodata',[]}]]]]}]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'longest_common_prefix',1},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'Binaries'}]}|[{'type',131,'non_neg_integer',[]}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Binaries'}|[{'type',132,'list',[{'type',132,'binary',[]}]}]]]]}]]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'longest_common_suffix',1},[{'type',137,'bounded_fun',[{'type',137,'fun',[{'type',137,'product',[{'var',137,'Binaries'}]}|[{'type',137,'non_neg_integer',[]}]]}|[[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Binaries'}|[{'type',138,'list',[{'type',138,'binary',[]}]}]]]]}]]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'match',2},[{'type',143,'bounded_fun',[{'type',143,'fun',[{'type',143,'product',[{'var',143,'Subject'}|[{'var',143,'Pattern'}]]}|[{'type',143,'union',[{'var',143,'Found'}|[{'atom',143,'nomatch'}]]}]]}|[[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Subject'}|[{'type',144,'binary',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Pattern'}|[{'type',145,'union',[{'type',145,'binary',[]}|[{'type',145,'list',[{'type',145,'binary',[]}]}|[{'type',145,'cp',[]}]]]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Found'}|[{'type',146,'part',[]}]]]]}]]]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'match',3},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'Subject'}|[{'var',151,'Pattern'}|[{'var',151,'Options'}]]]}|[{'type',151,'union',[{'var',151,'Found'}|[{'atom',151,'nomatch'}]]}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Subject'}|[{'type',152,'binary',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Pattern'}|[{'type',153,'union',[{'type',153,'binary',[]}|[{'type',153,'list',[{'type',153,'binary',[]}]}|[{'type',153,'cp',[]}]]]}]]]]}|[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Found'}|[{'type',154,'part',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Options'}|[{'type',155,'list',[{'var',155,'Option'}]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Option'}|[{'type',156,'tuple',[{'atom',156,'scope'}|[{'type',156,'part',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'matches',2},[{'type',161,'bounded_fun',[{'type',161,'fun',[{'type',161,'product',[{'var',161,'Subject'}|[{'var',161,'Pattern'}]]}|[{'var',161,'Found'}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Subject'}|[{'type',162,'binary',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Pattern'}|[{'type',163,'union',[{'type',163,'binary',[]}|[{'type',163,'list',[{'type',163,'binary',[]}]}|[{'type',163,'cp',[]}]]]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Found'}|[{'type',164,'list',[{'type',164,'part',[]}]}]]]]}]]]]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'matches',3},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'Subject'}|[{'var',169,'Pattern'}|[{'var',169,'Options'}]]]}|[{'var',169,'Found'}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'Subject'}|[{'type',170,'binary',[]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Pattern'}|[{'type',171,'union',[{'type',171,'binary',[]}|[{'type',171,'list',[{'type',171,'binary',[]}]}|[{'type',171,'cp',[]}]]]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Found'}|[{'type',172,'list',[{'type',172,'part',[]}]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Options'}|[{'type',173,'list',[{'var',173,'Option'}]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Option'}|[{'type',174,'tuple',[{'atom',174,'scope'}|[{'type',174,'part',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 179
		'spec' =
		    %% Line 179
		    [{{'part',2},[{'type',179,'bounded_fun',[{'type',179,'fun',[{'type',179,'product',[{'var',179,'Subject'}|[{'var',179,'PosLen'}]]}|[{'type',179,'binary',[]}]]}|[[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Subject'}|[{'type',180,'binary',[]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'PosLen'}|[{'type',181,'part',[]}]]]]}]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'part',3},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'Subject'}|[{'var',186,'Pos'}|[{'var',186,'Len'}]]]}|[{'type',186,'binary',[]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Subject'}|[{'type',187,'binary',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Pos'}|[{'type',188,'non_neg_integer',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Len'}|[{'type',189,'integer',[]}]]]]}]]]]]}]}],
		%% Line 194
		'spec' =
		    %% Line 194
		    [{{'referenced_byte_size',1},[{'type',194,'bounded_fun',[{'type',194,'fun',[{'type',194,'product',[{'var',194,'Binary'}]}|[{'type',194,'non_neg_integer',[]}]]}|[[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Binary'}|[{'type',195,'binary',[]}]]]]}]]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'split',2},[{'type',206,'bounded_fun',[{'type',206,'fun',[{'type',206,'product',[{'var',206,'Subject'}|[{'var',206,'Pattern'}]]}|[{'var',206,'Parts'}]]}|[[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Subject'}|[{'type',207,'binary',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Pattern'}|[{'type',208,'union',[{'type',208,'binary',[]}|[{'type',208,'list',[{'type',208,'binary',[]}]}|[{'type',208,'cp',[]}]]]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Parts'}|[{'type',209,'list',[{'type',209,'binary',[]}]}]]]]}]]]]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'split',3},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Subject'}|[{'var',214,'Pattern'}|[{'var',214,'Options'}]]]}|[{'var',214,'Parts'}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Subject'}|[{'type',215,'binary',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Pattern'}|[{'type',216,'union',[{'type',216,'binary',[]}|[{'type',216,'list',[{'type',216,'binary',[]}]}|[{'type',216,'cp',[]}]]]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Options'}|[{'type',217,'list',[{'var',217,'Option'}]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Option'}|[{'type',218,'union',[{'type',218,'tuple',[{'atom',218,'scope'}|[{'type',218,'part',[]}]]}|[{'atom',218,'trim'}|[{'atom',218,'global'}]]]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Parts'}|[{'type',219,'list',[{'type',219,'binary',[]}]}]]]]}]]]]]]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'replace',3},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'Subject'}|[{'var',268,'Pattern'}|[{'var',268,'Replacement'}]]]}|[{'var',268,'Result'}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Subject'}|[{'type',269,'binary',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Pattern'}|[{'type',270,'union',[{'type',270,'binary',[]}|[{'type',270,'list',[{'type',270,'binary',[]}]}|[{'type',270,'cp',[]}]]]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Replacement'}|[{'type',271,'binary',[]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Result'}|[{'type',272,'binary',[]}]]]]}]]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'replace',4},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'Subject'}|[{'var',277,'Pattern'}|[{'var',277,'Replacement'}|[{'var',277,'Options'}]]]]}|[{'var',277,'Result'}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Subject'}|[{'type',278,'binary',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Pattern'}|[{'type',279,'union',[{'type',279,'binary',[]}|[{'type',279,'list',[{'type',279,'binary',[]}]}|[{'type',279,'cp',[]}]]]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Replacement'}|[{'type',280,'binary',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Options'}|[{'type',281,'list',[{'var',281,'Option'}]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Option'}|[{'type',282,'union',[{'atom',282,'global'}|[{'type',282,'tuple',[{'atom',282,'scope'}|[{'type',282,'part',[]}]]}|[{'type',282,'tuple',[{'atom',282,'insert_replaced'}|[{'var',282,'InsPos'}]]}]]]}]]]]}|[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'InsPos'}|[{'type',283,'union',[{'var',283,'OnePos'}|[{'type',283,'list',[{'var',283,'OnePos'}]}]]}]]]]}|[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'OnePos'}|[{'type',284,'non_neg_integer',[]}]]]]}|[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'Result'}|[{'type',285,'binary',[]}]]]]}]]]]]]]]]]}]}]]
'at'/2 =
    %% Line 42
    fun (_cor1,_cor0) ->
	%% Line 43
	call 'erlang':'nif_error'
	    ('undef')
'bin_to_list'/1 =
    %% Line 48
    fun (_cor0) ->
	%% Line 49
	call 'erlang':'nif_error'
	    ('undef')
'bin_to_list'/2 =
    %% Line 55
    fun (_cor1,_cor0) ->
	%% Line 56
	call 'erlang':'nif_error'
	    ('undef')
'bin_to_list'/3 =
    %% Line 63
    fun (_cor2,_cor1,_cor0) ->
	%% Line 64
	call 'erlang':'nif_error'
	    ('undef')
'compile_pattern'/1 =
    %% Line 69
    fun (_cor0) ->
	%% Line 70
	call 'erlang':'nif_error'
	    ('undef')
'copy'/1 =
    %% Line 75
    fun (_cor0) ->
	%% Line 76
	call 'erlang':'nif_error'
	    ('undef')
'copy'/2 =
    %% Line 82
    fun (_cor1,_cor0) ->
	%% Line 83
	call 'erlang':'nif_error'
	    ('undef')
'decode_unsigned'/1 =
    %% Line 89
    fun (_cor0) ->
	%% Line 90
	call 'erlang':'nif_error'
	    ('undef')
'decode_unsigned'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	%% Line 98
	call 'erlang':'nif_error'
	    ('undef')
'encode_unsigned'/1 =
    %% Line 103
    fun (_cor0) ->
	%% Line 104
	call 'erlang':'nif_error'
	    ('undef')
'encode_unsigned'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	%% Line 111
	call 'erlang':'nif_error'
	    ('undef')
'first'/1 =
    %% Line 116
    fun (_cor0) ->
	%% Line 117
	call 'erlang':'nif_error'
	    ('undef')
'last'/1 =
    %% Line 122
    fun (_cor0) ->
	%% Line 123
	call 'erlang':'nif_error'
	    ('undef')
'list_to_bin'/1 =
    %% Line 128
    fun (_cor0) ->
	%% Line 129
	call 'erlang':'nif_error'
	    ('undef')
'longest_common_prefix'/1 =
    %% Line 134
    fun (_cor0) ->
	%% Line 135
	call 'erlang':'nif_error'
	    ('undef')
'longest_common_suffix'/1 =
    %% Line 140
    fun (_cor0) ->
	%% Line 141
	call 'erlang':'nif_error'
	    ('undef')
'match'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	%% Line 149
	call 'erlang':'nif_error'
	    ('undef')
'match'/3 =
    %% Line 158
    fun (_cor2,_cor1,_cor0) ->
	%% Line 159
	call 'erlang':'nif_error'
	    ('undef')
'matches'/2 =
    %% Line 166
    fun (_cor1,_cor0) ->
	%% Line 167
	call 'erlang':'nif_error'
	    ('undef')
'matches'/3 =
    %% Line 176
    fun (_cor2,_cor1,_cor0) ->
	%% Line 177
	call 'erlang':'nif_error'
	    ('undef')
'part'/2 =
    %% Line 183
    fun (_cor1,_cor0) ->
	%% Line 184
	call 'erlang':'nif_error'
	    ('undef')
'part'/3 =
    %% Line 191
    fun (_cor2,_cor1,_cor0) ->
	%% Line 192
	call 'erlang':'nif_error'
	    ('undef')
'referenced_byte_size'/1 =
    %% Line 197
    fun (_cor0) ->
	%% Line 198
	call 'erlang':'nif_error'
	    ('undef')
'split'/2 =
    %% Line 211
    fun (_cor1,_cor0) ->
	%% Line 212
	apply 'split'/3
	    (_cor1, _cor0, [])
'split'/3 =
    %% Line 221
    fun (_cor2,_cor1,_cor0) ->
	%% Line 222
	try
	    %% Line 223
	    case apply 'get_opts_split'/2
		     (_cor0, {'no','false','false'}) of
	      <{Part,Global,Trim}> when 'true' ->
		  let <_cor5> =
		      %% Line 224
		      case Part of
			%% Line 225
			<'no'> when 'true' ->
			    %% Line 226
			    []
			%% Line 227
			<{A,B}> when 'true' ->
			    %% Line 228
			    [{'scope',{A,B}}|[]]
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor8> =
			  %% Line 230
			  case <> of
			    %% Line 231
			    <>
				when call 'erlang':'=:='
				      (Global,
				       'true') ->
				%% Line 232
				call 'binary':'matches'
				    (_cor2, _cor1, _cor5)
			    %% Line 233
			    <> when 'true' ->
				%% Line 234
				case call 'binary':'match'
					 (_cor2, _cor1, _cor5) of
				  %% Line 235
				  <'nomatch'> when 'true' ->
				      []
				  %% Line 236
				  <Match> when 'true' ->
				      [Match|[]]
				end
			  end
		      in  %% Line 239
			  apply 'do_split'/4
			      (_cor2, _cor8, 0, Trim)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
	of <_cor10> ->
	    _cor10
	catch <_cor13,_cor12,_cor11> ->
	    %% Line 242
	    call 'erlang':'error'
		('badarg')
'do_split'/4 =
    %% Line 245
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <H,[],N,'true'>
	      when try
		    let <_cor4> =
			call 'erlang':'byte_size'
			    (H)
		    in  call 'erlang':'>='
			    (N, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 246
	      []
	  %% Line 247
	  <H,[],N,_cor19> when 'true' ->
	      let <_cor5> =
		  %% Line 248
		  call 'erlang':'byte_size'
		      (H)
	      in  let <_cor6> =
		      %% Line 248
		      call 'erlang':'-'
			  (_cor5, N)
		  in  let <_cor7> =
			  %% Line 248
			  call 'binary':'part'
			      (H, {N,_cor6})
		      in  %% Line 248
			  [_cor7|[]]
	  %% Line 249
	  <H,[{A,B}|T],N,Trim> when 'true' ->
	      let <_cor8> =
		  %% Line 250
		  call 'erlang':'-'
		      (A, N)
	      in  %% Line 250
		  case call 'binary':'part'
			   (H, {N,_cor8}) of
		    %% Line 251
		    <#{}#> when 'true' ->
			let <_cor9> =
			    %% Line 252
			    call 'erlang':'+'
				(A, B)
			in  let <Rest> =
				%% Line 252
				apply 'do_split'/4
				    (H, T, _cor9, Trim)
			    in  %% Line 253
				case <Trim,Rest> of
				  %% Line 254
				  <'true',[]> when 'true' ->
				      %% Line 255
				      []
				  %% Line 256
				  <_fol47,_fol48> when 'true' ->
				      %% Line 257
				      [#{}#|Rest]
				end
		    %% Line 259
		    <Oth> when 'true' ->
			let <_cor12> =
			    %% Line 260
			    call 'erlang':'+'
				(A, B)
			in  let <_cor13> =
				%% Line 260
				apply 'do_split'/4
				    (H, T, _cor12, Trim)
			    in  %% Line 260
				[Oth|_cor13]
		  end
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'do_split',4}}] )
	    -| ['compiler_generated'] )
	end
'replace'/3 =
    %% Line 274
    fun (_cor2,_cor1,_cor0) ->
	%% Line 275
	apply 'replace'/4
	    (_cor2, _cor1, _cor0, [])
'replace'/4 =
    %% Line 287
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 288
	try
	    %% Line 289
	    case call 'erlang':'is_binary'
		     (_cor1) of
	      <'true'> when 'true' ->
		  %% Line 290
		  case apply 'get_opts_replace'/2
			   (_cor0, {'no','false',[]}) of
		    <{Part,Global,Insert}> when 'true' ->
			let <_cor7> =
			    %% Line 291
			    case Part of
			      %% Line 292
			      <'no'> when 'true' ->
				  %% Line 293
				  []
			      %% Line 294
			      <{A,B}> when 'true' ->
				  %% Line 295
				  [{'scope',{A,B}}|[]]
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
			in  let <_cor10> =
				%% Line 297
				case <> of
				  %% Line 298
				  <>
				      when call 'erlang':'=:='
					    (Global,
					     'true') ->
				      %% Line 299
				      call 'binary':'matches'
					  (_cor3, _cor2, _cor7)
				  %% Line 300
				  <> when 'true' ->
				      %% Line 301
				      case call 'binary':'match'
					       (_cor3, _cor2, _cor7) of
					%% Line 302
					<'nomatch'> when 'true' ->
					    []
					%% Line 303
					<Match> when 'true' ->
					    [Match|[]]
				      end
				end
			    in  let <_cor14> =
				    %% Line 306
				    case Insert of
				      %% Line 307
				      <[]> when 'true' ->
					  _cor1
				      %% Line 309
				      <Y>
					  when call 'erlang':'is_integer'
						(Insert) ->
					  %% Line 310
					  apply 'splitat'/3
					      (_cor1, 0, [Y|[]])
				      %% Line 311
				      <Li>
					  when call 'erlang':'is_list'
						(Insert) ->
					  let <_cor12> =
					      %% Line 312
					      call 'lists':'sort'
						  (Li)
					  in  %% Line 312
					      apply 'splitat'/3
						  (_cor1, 0, _cor12)
				      ( <_cor13> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor13})
					-| ['compiler_generated'] )
				    end
				in  let <_cor16> =
					%% Line 314
					apply 'do_replace'/4
					    (_cor3, _cor10, _cor14, 0)
				    in  %% Line 314
					call 'erlang':'iolist_to_binary'
					    (_cor16)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
	of <_cor17> ->
	    _cor17
	catch <_cor20,_cor19,_cor18> ->
	    %% Line 317
	    call 'erlang':'error'
		('badarg')
'do_replace'/4 =
    %% Line 321
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <H,[],_cor17,N> when 'true' ->
	      let <_cor4> =
		  %% Line 322
		  call 'erlang':'byte_size'
		      (H)
	      in  let <_cor5> =
		      %% Line 322
		      call 'erlang':'-'
			  (_cor4, N)
		  in  let <_cor6> =
			  %% Line 322
			  call 'binary':'part'
			      (H, {N,_cor5})
		      in  %% Line 322
			  [_cor6|[]]
	  %% Line 323
	  <H,[{A,B}|T],Replacement,N> when 'true' ->
	      let <_cor7> =
		  %% Line 324
		  call 'erlang':'-'
		      (A, N)
	      in  let <_cor8> =
		      %% Line 324
		      call 'binary':'part'
			  (H, {N,_cor7})
		  in  let <_cor10> =
			  %% Line 325
			  case <> of
			    %% Line 326
			    <>
				when call 'erlang':'is_list'
				      (Replacement) ->
				let <_cor9> =
				    %% Line 327
				    call 'binary':'part'
					(H, {A,B})
				in  %% Line 327
				    apply 'do_insert'/2
					(Replacement, _cor9)
			    %% Line 328
			    <> when 'true' ->
				%% Line 329
				Replacement
			  end
		      in  let <_cor11> =
			      %% Line 331
			      call 'erlang':'+'
				  (A, B)
			  in  let <_cor12> =
				  %% Line 331
				  apply 'do_replace'/4
				      (H, T, Replacement, _cor11)
			      in  %% Line 324
				  [_cor8|%% Line 325
					 [_cor10|_cor12]]
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'do_replace',4}}] )
	    -| ['compiler_generated'] )
	end
'do_insert'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|[]],_cor5> when 'true' ->
	      %% Line 334
	      [X|[]]
	  %% Line 335
	  <[H|T],R> when 'true' ->
	      let <_cor2> =
		  %% Line 336
		  apply 'do_insert'/2
		      (T, R)
	      in  %% Line 336
		  [H|[R|_cor2]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'do_insert',2}}] )
	    -| ['compiler_generated'] )
	end
'splitat'/3 =
    %% Line 338
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <H,N,[]> when 'true' ->
	      let <_cor3> =
		  %% Line 339
		  call 'erlang':'byte_size'
		      (H)
	      in  let <_cor4> =
		      %% Line 339
		      call 'erlang':'-'
			  (_cor3, N)
		  in  let <_cor5> =
			  %% Line 339
			  call 'binary':'part'
			      (H, {N,_cor4})
		      in  %% Line 339
			  [_cor5|[]]
	  %% Line 340
	  <H,N,[I|T]> when 'true' ->
	      let <_cor6> =
		  %% Line 341
		  call 'erlang':'-'
		      (I, N)
	      in  let <_cor7> =
		      %% Line 341
		      call 'binary':'part'
			  (H, {N,_cor6})
		  in  let <_cor8> =
			  %% Line 341
			  apply 'splitat'/3
			      (H, I, T)
		      in  %% Line 341
			  [_cor7|_cor8]
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'splitat',3}}] )
	    -| ['compiler_generated'] )
	end
'get_opts_split'/2 =
    %% Line 349
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],{Part,Global,Trim}> when 'true' ->
	      %% Line 350
	      {Part,Global,Trim}
	  %% Line 351
	  <[{'scope',{A,B}}|T],{_X_Part,Global,Trim}> when 'true' ->
	      %% Line 352
	      apply 'get_opts_split'/2
		  (T, {{A,B},Global,Trim})
	  %% Line 353
	  <['global'|T],{Part,_X_Global,Trim}> when 'true' ->
	      %% Line 354
	      apply 'get_opts_split'/2
		  (T, {Part,'true',Trim})
	  %% Line 355
	  <['trim'|T],{Part,Global,_X_Trim}> when 'true' ->
	      %% Line 356
	      apply 'get_opts_split'/2
		  (T, {Part,Global,'true'})
	  %% Line 357
	  <_cor4,_cor5> when 'true' ->
	      %% Line 358
	      call 'erlang':'throw'
		  ('badopt')
	end
'get_opts_replace'/2 =
    %% Line 360
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],{Part,Global,Insert}> when 'true' ->
	      %% Line 361
	      {Part,Global,Insert}
	  %% Line 362
	  <[{'scope',{A,B}}|T],{_X_Part,Global,Insert}> when 'true' ->
	      %% Line 363
	      apply 'get_opts_replace'/2
		  (T, {{A,B},Global,Insert})
	  %% Line 364
	  <['global'|T],{Part,_X_Global,Insert}> when 'true' ->
	      %% Line 365
	      apply 'get_opts_replace'/2
		  (T, {Part,'true',Insert})
	  %% Line 366
	  <[{'insert_replaced',N}|T],{Part,Global,_X_Insert}> when 'true' ->
	      %% Line 367
	      apply 'get_opts_replace'/2
		  (T, {Part,Global,N})
	  %% Line 368
	  <_cor4,_cor5> when 'true' ->
	      %% Line 369
	      call 'erlang':'throw'
		  ('badopt')
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('binary')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('binary', _cor0)
end