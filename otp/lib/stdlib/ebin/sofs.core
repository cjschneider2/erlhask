module 'sofs' ['a_function'/1,
	       'a_function'/2,
	       'canonical_relation'/1,
	       'composite'/2,
	       'constant_function'/2,
	       'converse'/1,
	       'difference'/2,
	       'digraph_to_family'/1,
	       'digraph_to_family'/2,
	       'domain'/1,
	       'drestriction'/2,
	       'drestriction'/3,
	       'empty_set'/0,
	       'extension'/3,
	       'fam2rel'/1,
	       'family'/1,
	       'family'/2,
	       'family_difference'/2,
	       'family_domain'/1,
	       'family_field'/1,
	       'family_intersection'/1,
	       'family_intersection'/2,
	       'family_projection'/2,
	       'family_range'/1,
	       'family_specification'/2,
	       'family_to_digraph'/1,
	       'family_to_digraph'/2,
	       'family_to_relation'/1,
	       'family_union'/1,
	       'family_union'/2,
	       'field'/1,
	       'from_external'/2,
	       'from_sets'/1,
	       'from_term'/1,
	       'from_term'/2,
	       'image'/2,
	       'intersection'/1,
	       'intersection'/2,
	       'intersection_of_family'/1,
	       'inverse'/1,
	       'inverse_image'/2,
	       'is_a_function'/1,
	       'is_disjoint'/2,
	       'is_empty_set'/1,
	       'is_equal'/2,
	       'is_set'/1,
	       'is_sofs_set'/1,
	       'is_subset'/2,
	       'is_type'/1,
	       'join'/4,
	       'module_info'/0,
	       'module_info'/1,
	       'multiple_relative_product'/2,
	       'no_elements'/1,
	       'partition'/1,
	       'partition'/2,
	       'partition'/3,
	       'partition_family'/2,
	       'product'/1,
	       'product'/2,
	       'projection'/2,
	       'range'/1,
	       'rel2fam'/1,
	       'relation'/1,
	       'relation'/2,
	       'relation_to_family'/1,
	       'relative_product'/1,
	       'relative_product'/2,
	       'relative_product1'/2,
	       'restriction'/2,
	       'restriction'/3,
	       'set'/1,
	       'set'/2,
	       'specification'/2,
	       'strict_relation'/1,
	       'substitution'/2,
	       'symdiff'/2,
	       'symmetric_partition'/2,
	       'to_external'/1,
	       'to_sets'/1,
	       'type'/1,
	       'union'/1,
	       'union'/2,
	       'union_of_family'/1,
	       'weak_relation'/1]
    attributes [%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','Set'},[{'typed_record_field',{'record_field',83,{'atom',83,'data'},{'nil',83}},{'type',83,'list',[]}}|[{'typed_record_field',{'record_field',83,{'atom',83,'type'},{'atom',83,'type'}},{'type',83,'term',[]}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','OrdSet'},[{'typed_record_field',{'record_field',84,{'atom',84,'orddata'},{'tuple',84,[]}},{'type',84,'union',[{'type',84,'tuple','any'}|[{'type',84,'atom',[]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'ordtype'},{'atom',85,'type'}},{'type',85,'term',[]}}]],[]}],
		%% Line 117
		'export_type' =
		    %% Line 117
		    [{'anyset',0}|[{'binary_relation',0}|[{'external_set',0}|[{'a_function',0}|[{'family',0}|[{'relation',0}|[{'set_of_sets',0}|[{'set_fun',0}|[{'spec_fun',0}|[{'type',0}]]]]]]]]]],
		%% Line 120
		'export_type' =
		    %% Line 120
		    [{'ordset',0}|[{'a_set',0}]],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'anyset',{'type',122,'union',[{'type',122,'ordset',[]}|[{'type',122,'a_set',[]}]]},[]}],
		%% Line 123
		'type' =
		    %% Line 123
		    [{'binary_relation',{'type',123,'relation',[]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{'external_set',{'type',124,'term',[]},[]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{'a_function',{'type',125,'relation',[]},[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'family',{'type',126,'a_function',[]},[]}],
		%% Line 127
		'opaque' =
		    %% Line 127
		    [{'ordset',{'type',127,'record',[{'atom',127,'OrdSet'}]},[]}],
		%% Line 128
		'type' =
		    %% Line 128
		    [{'relation',{'type',128,'a_set',[]},[]}],
		%% Line 129
		'opaque' =
		    %% Line 129
		    [{'a_set',{'type',129,'record',[{'atom',129,'Set'}]},[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'set_of_sets',{'type',130,'a_set',[]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'set_fun',{'type',131,'union',[{'type',131,'pos_integer',[]}|[{'type',132,'tuple',[{'atom',132,'external'}|[{'type',132,'fun',[{'type',132,'product',[{'type',132,'external_set',[]}]}|[{'type',132,'external_set',[]}]]}]]}|[{'type',133,'fun',[{'type',133,'product',[{'type',133,'anyset',[]}]}|[{'type',133,'anyset',[]}]]}]]]},[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'spec_fun',{'type',134,'union',[{'type',134,'tuple',[{'atom',134,'external'}|[{'type',134,'fun',[{'type',134,'product',[{'type',134,'external_set',[]}]}|[{'type',134,'boolean',[]}]]}]]}|[{'type',135,'fun',[{'type',135,'product',[{'type',135,'anyset',[]}]}|[{'type',135,'boolean',[]}]]}]]},[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'type',{'type',136,'term',[]},[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'tuple_of',{'type',138,'tuple','any'},[{'var',138,'_T'}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'from_term',1},[{'type',148,'bounded_fun',[{'type',148,'fun',[{'type',148,'product',[{'var',148,'Term'}]}|[{'var',148,'AnySet'}]]}|[[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'AnySet'}|[{'type',149,'anyset',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Term'}|[{'type',150,'term',[]}]]]]}]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'from_term',2},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'Term'}|[{'var',163,'Type'}]]}|[{'var',163,'AnySet'}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'AnySet'}|[{'type',164,'anyset',[]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Term'}|[{'type',165,'term',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Type'}|[{'type',166,'type',[]}]]]]}]]]]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'from_external',2},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'ExternalSet'}|[{'var',180,'Type'}]]}|[{'var',180,'AnySet'}]]}|[[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'ExternalSet'}|[{'type',181,'external_set',[]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'AnySet'}|[{'type',182,'anyset',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Type'}|[{'type',183,'type',[]}]]]]}]]]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'empty_set',0},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[]}|[{'var',189,'Set'}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Set'}|[{'type',190,'a_set',[]}]]]]}]]]}]}],
		%% Line 194
		'spec' =
		    %% Line 194
		    [{{'is_type',1},[{'type',194,'bounded_fun',[{'type',194,'fun',[{'type',194,'product',[{'var',194,'Term'}]}|[{'var',194,'Bool'}]]}|[[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Bool'}|[{'type',195,'boolean',[]}]]]]}|[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Term'}|[{'type',196,'term',[]}]]]]}]]]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'set',1},[{'type',206,'bounded_fun',[{'type',206,'fun',[{'type',206,'product',[{'var',206,'Terms'}]}|[{'var',206,'Set'}]]}|[[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Set'}|[{'type',207,'a_set',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Terms'}|[{'type',208,'list',[{'type',208,'term',[]}]}]]]]}]]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'set',2},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'Terms'}|[{'var',217,'Type'}]]}|[{'var',217,'Set'}]]}|[[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Set'}|[{'type',218,'a_set',[]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Terms'}|[{'type',219,'list',[{'type',219,'term',[]}]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Type'}|[{'type',220,'type',[]}]]]]}]]]]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'from_sets',1},[{'type',238,'bounded_fun',[{'type',238,'fun',[{'type',238,'product',[{'var',238,'ListOfSets'}]}|[{'var',238,'Set'}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Set'}|[{'type',239,'a_set',[]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'ListOfSets'}|[{'type',240,'list',[{'type',240,'anyset',[]}]}]]]]}]]]]}|[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'TupleOfSets'}]}|[{'var',241,'Ordset'}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Ordset'}|[{'type',242,'ordset',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'TupleOfSets'}|[{'type',243,'tuple_of',[{'type',243,'anyset',[]}]}]]]]}]]]]}]]}],
		%% Line 261
		'spec' =
		    %% Line 261
		    [{{'relation',1},[{'type',261,'bounded_fun',[{'type',261,'fun',[{'type',261,'product',[{'var',261,'Tuples'}]}|[{'var',261,'Relation'}]]}|[[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'Relation'}|[{'type',262,'relation',[]}]]]]}|[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'Tuples'}|[{'type',263,'list',[{'type',263,'tuple','any'}]}]]]]}]]]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'relation',2},[{'type',276,'bounded_fun',[{'type',276,'fun',[{'type',276,'product',[{'var',276,'Tuples'}|[{'var',276,'Type'}]]}|[{'var',276,'Relation'}]]}|[[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'N'}|[{'type',277,'integer',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Type'}|[{'type',278,'union',[{'var',278,'N'}|[{'type',278,'type',[]}]]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Relation'}|[{'type',279,'relation',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Tuples'}|[{'type',280,'list',[{'type',280,'tuple','any'}]}]]]]}]]]]]]}]}],
		%% Line 289
		'spec' =
		    %% Line 289
		    [{{'a_function',1},[{'type',289,'bounded_fun',[{'type',289,'fun',[{'type',289,'product',[{'var',289,'Tuples'}]}|[{'var',289,'Function'}]]}|[[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'Function'}|[{'type',290,'a_function',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Tuples'}|[{'type',291,'list',[{'type',291,'tuple','any'}]}]]]]}]]]]}]}],
		%% Line 302
		'spec' =
		    %% Line 302
		    [{{'a_function',2},[{'type',302,'bounded_fun',[{'type',302,'fun',[{'type',302,'product',[{'var',302,'Tuples'}|[{'var',302,'Type'}]]}|[{'var',302,'Function'}]]}|[[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Function'}|[{'type',303,'a_function',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Tuples'}|[{'type',304,'list',[{'type',304,'tuple','any'}]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'Type'}|[{'type',305,'type',[]}]]]]}]]]]]}]}],
		%% Line 316
		'spec' =
		    %% Line 316
		    [{{'family',1},[{'type',316,'bounded_fun',[{'type',316,'fun',[{'type',316,'product',[{'var',316,'Tuples'}]}|[{'var',316,'Family'}]]}|[[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Family'}|[{'type',317,'family',[]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'Tuples'}|[{'type',318,'list',[{'type',318,'tuple','any'}]}]]]]}]]]]}]}],
		%% Line 329
		'spec' =
		    %% Line 329
		    [{{'family',2},[{'type',329,'bounded_fun',[{'type',329,'fun',[{'type',329,'product',[{'var',329,'Tuples'}|[{'var',329,'Type'}]]}|[{'var',329,'Family'}]]}|[[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Family'}|[{'type',330,'family',[]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'Tuples'}|[{'type',331,'list',[{'type',331,'tuple','any'}]}]]]]}|[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Type'}|[{'type',332,'type',[]}]]]]}]]]]]}]}],
		%% Line 347
		'spec' =
		    %% Line 347
		    [{{'to_external',1},[{'type',347,'bounded_fun',[{'type',347,'fun',[{'type',347,'product',[{'var',347,'AnySet'}]}|[{'var',347,'ExternalSet'}]]}|[[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'ExternalSet'}|[{'type',348,'external_set',[]}]]]]}|[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'AnySet'}|[{'type',349,'anyset',[]}]]]]}]]]]}]}],
		%% Line 355
		'spec' =
		    %% Line 355
		    [{{'type',1},[{'type',355,'bounded_fun',[{'type',355,'fun',[{'type',355,'product',[{'var',355,'AnySet'}]}|[{'var',355,'Type'}]]}|[[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'AnySet'}|[{'type',356,'anyset',[]}]]]]}|[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'Type'}|[{'type',357,'type',[]}]]]]}]]]]}]}],
		%% Line 363
		'spec' =
		    %% Line 363
		    [{{'to_sets',1},[{'type',363,'bounded_fun',[{'type',363,'fun',[{'type',363,'product',[{'var',363,'ASet'}]}|[{'var',363,'Sets'}]]}|[[{'type',364,'constraint',[{'atom',364,'is_subtype'}|[[{'var',364,'ASet'}|[{'type',364,'union',[{'type',364,'a_set',[]}|[{'type',364,'ordset',[]}]]}]]]]}|[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'Sets'}|[{'type',365,'union',[{'type',365,'tuple_of',[{'var',365,'AnySet'}]}|[{'type',365,'list',[{'var',365,'AnySet'}]}]]}]]]]}|[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'AnySet'}|[{'type',366,'anyset',[]}]]]]}]]]]]}]}],
		%% Line 377
		'spec' =
		    %% Line 377
		    [{{'no_elements',1},[{'type',377,'bounded_fun',[{'type',377,'fun',[{'type',377,'product',[{'var',377,'ASet'}]}|[{'var',377,'NoElements'}]]}|[[{'type',378,'constraint',[{'atom',378,'is_subtype'}|[[{'var',378,'ASet'}|[{'type',378,'union',[{'type',378,'a_set',[]}|[{'type',378,'ordset',[]}]]}]]]]}|[{'type',379,'constraint',[{'atom',379,'is_subtype'}|[[{'var',379,'NoElements'}|[{'type',379,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 387
		'spec' =
		    %% Line 387
		    [{{'specification',2},[{'type',387,'bounded_fun',[{'type',387,'fun',[{'type',387,'product',[{'var',387,'Fun'}|[{'var',387,'Set1'}]]}|[{'var',387,'Set2'}]]}|[[{'type',388,'constraint',[{'atom',388,'is_subtype'}|[[{'var',388,'Fun'}|[{'type',388,'spec_fun',[]}]]]]}|[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'Set1'}|[{'type',389,'a_set',[]}]]]]}|[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'Set2'}|[{'type',390,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 406
		'spec' =
		    %% Line 406
		    [{{'union',2},[{'type',406,'bounded_fun',[{'type',406,'fun',[{'type',406,'product',[{'var',406,'Set1'}|[{'var',406,'Set2'}]]}|[{'var',406,'Set3'}]]}|[[{'type',407,'constraint',[{'atom',407,'is_subtype'}|[[{'var',407,'Set1'}|[{'type',407,'a_set',[]}]]]]}|[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'Set2'}|[{'type',408,'a_set',[]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'Set3'}|[{'type',409,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 416
		'spec' =
		    %% Line 416
		    [{{'intersection',2},[{'type',416,'bounded_fun',[{'type',416,'fun',[{'type',416,'product',[{'var',416,'Set1'}|[{'var',416,'Set2'}]]}|[{'var',416,'Set3'}]]}|[[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Set1'}|[{'type',417,'a_set',[]}]]]]}|[{'type',418,'constraint',[{'atom',418,'is_subtype'}|[[{'var',418,'Set2'}|[{'type',418,'a_set',[]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Set3'}|[{'type',419,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 426
		'spec' =
		    %% Line 426
		    [{{'difference',2},[{'type',426,'bounded_fun',[{'type',426,'fun',[{'type',426,'product',[{'var',426,'Set1'}|[{'var',426,'Set2'}]]}|[{'var',426,'Set3'}]]}|[[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'Set1'}|[{'type',427,'a_set',[]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'Set2'}|[{'type',428,'a_set',[]}]]]]}|[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'Set3'}|[{'type',429,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 436
		'spec' =
		    %% Line 436
		    [{{'symdiff',2},[{'type',436,'bounded_fun',[{'type',436,'fun',[{'type',436,'product',[{'var',436,'Set1'}|[{'var',436,'Set2'}]]}|[{'var',436,'Set3'}]]}|[[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'Set1'}|[{'type',437,'a_set',[]}]]]]}|[{'type',438,'constraint',[{'atom',438,'is_subtype'}|[[{'var',438,'Set2'}|[{'type',438,'a_set',[]}]]]]}|[{'type',439,'constraint',[{'atom',439,'is_subtype'}|[[{'var',439,'Set3'}|[{'type',439,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 446
		'spec' =
		    %% Line 446
		    [{{'symmetric_partition',2},[{'type',446,'bounded_fun',[{'type',446,'fun',[{'type',446,'product',[{'var',446,'Set1'}|[{'var',446,'Set2'}]]}|[{'type',446,'tuple',[{'var',446,'Set3'}|[{'var',446,'Set4'}|[{'var',446,'Set5'}]]]}]]}|[[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'Set1'}|[{'type',447,'a_set',[]}]]]]}|[{'type',448,'constraint',[{'atom',448,'is_subtype'}|[[{'var',448,'Set2'}|[{'type',448,'a_set',[]}]]]]}|[{'type',449,'constraint',[{'atom',449,'is_subtype'}|[[{'var',449,'Set3'}|[{'type',449,'a_set',[]}]]]]}|[{'type',450,'constraint',[{'atom',450,'is_subtype'}|[[{'var',450,'Set4'}|[{'type',450,'a_set',[]}]]]]}|[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'Set5'}|[{'type',451,'a_set',[]}]]]]}]]]]]]]}]}],
		%% Line 458
		'spec' =
		    %% Line 458
		    [{{'product',2},[{'type',458,'bounded_fun',[{'type',458,'fun',[{'type',458,'product',[{'var',458,'Set1'}|[{'var',458,'Set2'}]]}|[{'var',458,'BinRel'}]]}|[[{'type',459,'constraint',[{'atom',459,'is_subtype'}|[[{'var',459,'BinRel'}|[{'type',459,'binary_relation',[]}]]]]}|[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'Set1'}|[{'type',460,'a_set',[]}]]]]}|[{'type',461,'constraint',[{'atom',461,'is_subtype'}|[[{'var',461,'Set2'}|[{'type',461,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 472
		'spec' =
		    %% Line 472
		    [{{'product',1},[{'type',472,'bounded_fun',[{'type',472,'fun',[{'type',472,'product',[{'var',472,'TupleOfSets'}]}|[{'var',472,'Relation'}]]}|[[{'type',473,'constraint',[{'atom',473,'is_subtype'}|[[{'var',473,'Relation'}|[{'type',473,'relation',[]}]]]]}|[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'TupleOfSets'}|[{'type',474,'tuple_of',[{'type',474,'a_set',[]}]}]]]]}]]]]}]}],
		%% Line 494
		'spec' =
		    %% Line 494
		    [{{'constant_function',2},[{'type',494,'bounded_fun',[{'type',494,'fun',[{'type',494,'product',[{'var',494,'Set'}|[{'var',494,'AnySet'}]]}|[{'var',494,'Function'}]]}|[[{'type',495,'constraint',[{'atom',495,'is_subtype'}|[[{'var',495,'AnySet'}|[{'type',495,'anyset',[]}]]]]}|[{'type',496,'constraint',[{'atom',496,'is_subtype'}|[[{'var',496,'Function'}|[{'type',496,'a_function',[]}]]]]}|[{'type',497,'constraint',[{'atom',497,'is_subtype'}|[[{'var',497,'Set'}|[{'type',497,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 509
		'spec' =
		    %% Line 509
		    [{{'is_equal',2},[{'type',509,'bounded_fun',[{'type',509,'fun',[{'type',509,'product',[{'var',509,'AnySet1'}|[{'var',509,'AnySet2'}]]}|[{'var',509,'Bool'}]]}|[[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'AnySet1'}|[{'type',510,'anyset',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'AnySet2'}|[{'type',511,'anyset',[]}]]]]}|[{'type',512,'constraint',[{'atom',512,'is_subtype'}|[[{'var',512,'Bool'}|[{'type',512,'boolean',[]}]]]]}]]]]]}]}],
		%% Line 528
		'spec' =
		    %% Line 528
		    [{{'is_subset',2},[{'type',528,'bounded_fun',[{'type',528,'fun',[{'type',528,'product',[{'var',528,'Set1'}|[{'var',528,'Set2'}]]}|[{'var',528,'Bool'}]]}|[[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'Bool'}|[{'type',529,'boolean',[]}]]]]}|[{'type',530,'constraint',[{'atom',530,'is_subtype'}|[[{'var',530,'Set1'}|[{'type',530,'a_set',[]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Set2'}|[{'type',531,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 538
		'spec' =
		    %% Line 538
		    [{{'is_sofs_set',1},[{'type',538,'bounded_fun',[{'type',538,'fun',[{'type',538,'product',[{'var',538,'Term'}]}|[{'var',538,'Bool'}]]}|[[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'Bool'}|[{'type',539,'boolean',[]}]]]]}|[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'Term'}|[{'type',540,'term',[]}]]]]}]]]]}]}],
		%% Line 548
		'spec' =
		    %% Line 548
		    [{{'is_set',1},[{'type',548,'bounded_fun',[{'type',548,'fun',[{'type',548,'product',[{'var',548,'AnySet'}]}|[{'var',548,'Bool'}]]}|[[{'type',549,'constraint',[{'atom',549,'is_subtype'}|[[{'var',549,'AnySet'}|[{'type',549,'anyset',[]}]]]]}|[{'type',550,'constraint',[{'atom',550,'is_subtype'}|[[{'var',550,'Bool'}|[{'type',550,'boolean',[]}]]]]}]]]]}]}],
		%% Line 556
		'spec' =
		    %% Line 556
		    [{{'is_empty_set',1},[{'type',556,'bounded_fun',[{'type',556,'fun',[{'type',556,'product',[{'var',556,'AnySet'}]}|[{'var',556,'Bool'}]]}|[[{'type',557,'constraint',[{'atom',557,'is_subtype'}|[[{'var',557,'AnySet'}|[{'type',557,'anyset',[]}]]]]}|[{'type',558,'constraint',[{'atom',558,'is_subtype'}|[[{'var',558,'Bool'}|[{'type',558,'boolean',[]}]]]]}]]]]}]}],
		%% Line 564
		'spec' =
		    %% Line 564
		    [{{'is_disjoint',2},[{'type',564,'bounded_fun',[{'type',564,'fun',[{'type',564,'product',[{'var',564,'Set1'}|[{'var',564,'Set2'}]]}|[{'var',564,'Bool'}]]}|[[{'type',565,'constraint',[{'atom',565,'is_subtype'}|[[{'var',565,'Bool'}|[{'type',565,'boolean',[]}]]]]}|[{'type',566,'constraint',[{'atom',566,'is_subtype'}|[[{'var',566,'Set1'}|[{'type',566,'a_set',[]}]]]]}|[{'type',567,'constraint',[{'atom',567,'is_subtype'}|[[{'var',567,'Set2'}|[{'type',567,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 582
		'spec' =
		    %% Line 582
		    [{{'union',1},[{'type',582,'bounded_fun',[{'type',582,'fun',[{'type',582,'product',[{'var',582,'SetOfSets'}]}|[{'var',582,'Set'}]]}|[[{'type',583,'constraint',[{'atom',583,'is_subtype'}|[[{'var',583,'Set'}|[{'type',583,'a_set',[]}]]]]}|[{'type',584,'constraint',[{'atom',584,'is_subtype'}|[[{'var',584,'SetOfSets'}|[{'type',584,'set_of_sets',[]}]]]]}]]]]}]}],
		%% Line 592
		'spec' =
		    %% Line 592
		    [{{'intersection',1},[{'type',592,'bounded_fun',[{'type',592,'fun',[{'type',592,'product',[{'var',592,'SetOfSets'}]}|[{'var',592,'Set'}]]}|[[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'Set'}|[{'type',593,'a_set',[]}]]]]}|[{'type',594,'constraint',[{'atom',594,'is_subtype'}|[[{'var',594,'SetOfSets'}|[{'type',594,'set_of_sets',[]}]]]]}]]]]}]}],
		%% Line 606
		'spec' =
		    %% Line 606
		    [{{'canonical_relation',1},[{'type',606,'bounded_fun',[{'type',606,'fun',[{'type',606,'product',[{'var',606,'SetOfSets'}]}|[{'var',606,'BinRel'}]]}|[[{'type',607,'constraint',[{'atom',607,'is_subtype'}|[[{'var',607,'BinRel'}|[{'type',607,'binary_relation',[]}]]]]}|[{'type',608,'constraint',[{'atom',608,'is_subtype'}|[[{'var',608,'SetOfSets'}|[{'type',608,'set_of_sets',[]}]]]]}]]]]}]}],
		%% Line 626
		'spec' =
		    %% Line 626
		    [{{'relation_to_family',1},[{'type',626,'bounded_fun',[{'type',626,'fun',[{'type',626,'product',[{'var',626,'BinRel'}]}|[{'var',626,'Family'}]]}|[[{'type',627,'constraint',[{'atom',627,'is_subtype'}|[[{'var',627,'Family'}|[{'type',627,'family',[]}]]]]}|[{'type',628,'constraint',[{'atom',628,'is_subtype'}|[[{'var',628,'BinRel'}|[{'type',628,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 638
		'spec' =
		    %% Line 638
		    [{{'domain',1},[{'type',638,'bounded_fun',[{'type',638,'fun',[{'type',638,'product',[{'var',638,'BinRel'}]}|[{'var',638,'Set'}]]}|[[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'BinRel'}|[{'type',639,'binary_relation',[]}]]]]}|[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'Set'}|[{'type',640,'a_set',[]}]]]]}]]]]}]}],
		%% Line 648
		'spec' =
		    %% Line 648
		    [{{'range',1},[{'type',648,'bounded_fun',[{'type',648,'fun',[{'type',648,'product',[{'var',648,'BinRel'}]}|[{'var',648,'Set'}]]}|[[{'type',649,'constraint',[{'atom',649,'is_subtype'}|[[{'var',649,'BinRel'}|[{'type',649,'binary_relation',[]}]]]]}|[{'type',650,'constraint',[{'atom',650,'is_subtype'}|[[{'var',650,'Set'}|[{'type',650,'a_set',[]}]]]]}]]]]}]}],
		%% Line 658
		'spec' =
		    %% Line 658
		    [{{'field',1},[{'type',658,'bounded_fun',[{'type',658,'fun',[{'type',658,'product',[{'var',658,'BinRel'}]}|[{'var',658,'Set'}]]}|[[{'type',659,'constraint',[{'atom',659,'is_subtype'}|[[{'var',659,'BinRel'}|[{'type',659,'binary_relation',[]}]]]]}|[{'type',660,'constraint',[{'atom',660,'is_subtype'}|[[{'var',660,'Set'}|[{'type',660,'a_set',[]}]]]]}]]]]}]}],
		%% Line 667
		'spec' =
		    %% Line 667
		    [{{'relative_product',1},[{'type',667,'bounded_fun',[{'type',667,'fun',[{'type',667,'product',[{'var',667,'ListOfBinRels'}]}|[{'var',667,'BinRel2'}]]}|[[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'ListOfBinRels'}|[{'type',668,'nonempty_list',[{'var',668,'BinRel'}]}]]]]}|[{'type',669,'constraint',[{'atom',669,'is_subtype'}|[[{'var',669,'BinRel'}|[{'type',669,'binary_relation',[]}]]]]}|[{'type',670,'constraint',[{'atom',670,'is_subtype'}|[[{'var',670,'BinRel2'}|[{'type',670,'binary_relation',[]}]]]]}]]]]]}]}],
		%% Line 683
		'spec' =
		    %% Line 683
		    [{{'relative_product',2},[{'type',683,'bounded_fun',[{'type',683,'fun',[{'type',683,'product',[{'var',683,'ListOfBinRels'}|[{'var',683,'BinRel1'}]]}|[{'var',683,'BinRel2'}]]}|[[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'ListOfBinRels'}|[{'type',684,'nonempty_list',[{'var',684,'BinRel'}]}]]]]}|[{'type',685,'constraint',[{'atom',685,'is_subtype'}|[[{'var',685,'BinRel'}|[{'type',685,'binary_relation',[]}]]]]}|[{'type',686,'constraint',[{'atom',686,'is_subtype'}|[[{'var',686,'BinRel1'}|[{'type',686,'binary_relation',[]}]]]]}|[{'type',687,'constraint',[{'atom',687,'is_subtype'}|[[{'var',687,'BinRel2'}|[{'type',687,'binary_relation',[]}]]]]}]]]]]]}|[{'type',688,'bounded_fun',[{'type',688,'fun',[{'type',688,'product',[{'var',688,'BinRel1'}|[{'var',688,'BinRel2'}]]}|[{'var',688,'BinRel3'}]]}|[[{'type',689,'constraint',[{'atom',689,'is_subtype'}|[[{'var',689,'BinRel1'}|[{'type',689,'binary_relation',[]}]]]]}|[{'type',690,'constraint',[{'atom',690,'is_subtype'}|[[{'var',690,'BinRel2'}|[{'type',690,'binary_relation',[]}]]]]}|[{'type',691,'constraint',[{'atom',691,'is_subtype'}|[[{'var',691,'BinRel3'}|[{'type',691,'binary_relation',[]}]]]]}]]]]]}]]}],
		%% Line 711
		'spec' =
		    %% Line 711
		    [{{'relative_product1',2},[{'type',711,'bounded_fun',[{'type',711,'fun',[{'type',711,'product',[{'var',711,'BinRel1'}|[{'var',711,'BinRel2'}]]}|[{'var',711,'BinRel3'}]]}|[[{'type',712,'constraint',[{'atom',712,'is_subtype'}|[[{'var',712,'BinRel1'}|[{'type',712,'binary_relation',[]}]]]]}|[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'BinRel2'}|[{'type',713,'binary_relation',[]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'BinRel3'}|[{'type',714,'binary_relation',[]}]]]]}]]]]]}]}],
		%% Line 733
		'spec' =
		    %% Line 733
		    [{{'converse',1},[{'type',733,'bounded_fun',[{'type',733,'fun',[{'type',733,'product',[{'var',733,'BinRel1'}]}|[{'var',733,'BinRel2'}]]}|[[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'BinRel1'}|[{'type',734,'binary_relation',[]}]]]]}|[{'type',735,'constraint',[{'atom',735,'is_subtype'}|[[{'var',735,'BinRel2'}|[{'type',735,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 743
		'spec' =
		    %% Line 743
		    [{{'image',2},[{'type',743,'bounded_fun',[{'type',743,'fun',[{'type',743,'product',[{'var',743,'BinRel'}|[{'var',743,'Set1'}]]}|[{'var',743,'Set2'}]]}|[[{'type',744,'constraint',[{'atom',744,'is_subtype'}|[[{'var',744,'BinRel'}|[{'type',744,'binary_relation',[]}]]]]}|[{'type',745,'constraint',[{'atom',745,'is_subtype'}|[[{'var',745,'Set1'}|[{'type',745,'a_set',[]}]]]]}|[{'type',746,'constraint',[{'atom',746,'is_subtype'}|[[{'var',746,'Set2'}|[{'type',746,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 760
		'spec' =
		    %% Line 760
		    [{{'inverse_image',2},[{'type',760,'bounded_fun',[{'type',760,'fun',[{'type',760,'product',[{'var',760,'BinRel'}|[{'var',760,'Set1'}]]}|[{'var',760,'Set2'}]]}|[[{'type',761,'constraint',[{'atom',761,'is_subtype'}|[[{'var',761,'BinRel'}|[{'type',761,'binary_relation',[]}]]]]}|[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Set1'}|[{'type',762,'a_set',[]}]]]]}|[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'Set2'}|[{'type',763,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 778
		'spec' =
		    %% Line 778
		    [{{'strict_relation',1},[{'type',778,'bounded_fun',[{'type',778,'fun',[{'type',778,'product',[{'var',778,'BinRel1'}]}|[{'var',778,'BinRel2'}]]}|[[{'type',779,'constraint',[{'atom',779,'is_subtype'}|[[{'var',779,'BinRel1'}|[{'type',779,'binary_relation',[]}]]]]}|[{'type',780,'constraint',[{'atom',780,'is_subtype'}|[[{'var',780,'BinRel2'}|[{'type',780,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 789
		'spec' =
		    %% Line 789
		    [{{'weak_relation',1},[{'type',789,'bounded_fun',[{'type',789,'fun',[{'type',789,'product',[{'var',789,'BinRel1'}]}|[{'var',789,'BinRel2'}]]}|[[{'type',790,'constraint',[{'atom',790,'is_subtype'}|[[{'var',790,'BinRel1'}|[{'type',790,'binary_relation',[]}]]]]}|[{'type',791,'constraint',[{'atom',791,'is_subtype'}|[[{'var',791,'BinRel2'}|[{'type',791,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 805
		'spec' =
		    %% Line 805
		    [{{'extension',3},[{'type',805,'bounded_fun',[{'type',805,'fun',[{'type',805,'product',[{'var',805,'BinRel1'}|[{'var',805,'Set'}|[{'var',805,'AnySet'}]]]}|[{'var',805,'BinRel2'}]]}|[[{'type',806,'constraint',[{'atom',806,'is_subtype'}|[[{'var',806,'AnySet'}|[{'type',806,'anyset',[]}]]]]}|[{'type',807,'constraint',[{'atom',807,'is_subtype'}|[[{'var',807,'BinRel1'}|[{'type',807,'binary_relation',[]}]]]]}|[{'type',808,'constraint',[{'atom',808,'is_subtype'}|[[{'var',808,'BinRel2'}|[{'type',808,'binary_relation',[]}]]]]}|[{'type',809,'constraint',[{'atom',809,'is_subtype'}|[[{'var',809,'Set'}|[{'type',809,'a_set',[]}]]]]}]]]]]]}]}],
		%% Line 838
		'spec' =
		    %% Line 838
		    [{{'is_a_function',1},[{'type',838,'bounded_fun',[{'type',838,'fun',[{'type',838,'product',[{'var',838,'BinRel'}]}|[{'var',838,'Bool'}]]}|[[{'type',839,'constraint',[{'atom',839,'is_subtype'}|[[{'var',839,'Bool'}|[{'type',839,'boolean',[]}]]]]}|[{'type',840,'constraint',[{'atom',840,'is_subtype'}|[[{'var',840,'BinRel'}|[{'type',840,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 852
		'spec' =
		    %% Line 852
		    [{{'restriction',2},[{'type',852,'bounded_fun',[{'type',852,'fun',[{'type',852,'product',[{'var',852,'BinRel1'}|[{'var',852,'Set'}]]}|[{'var',852,'BinRel2'}]]}|[[{'type',853,'constraint',[{'atom',853,'is_subtype'}|[[{'var',853,'BinRel1'}|[{'type',853,'binary_relation',[]}]]]]}|[{'type',854,'constraint',[{'atom',854,'is_subtype'}|[[{'var',854,'BinRel2'}|[{'type',854,'binary_relation',[]}]]]]}|[{'type',855,'constraint',[{'atom',855,'is_subtype'}|[[{'var',855,'Set'}|[{'type',855,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 859
		'spec' =
		    %% Line 859
		    [{{'drestriction',2},[{'type',859,'bounded_fun',[{'type',859,'fun',[{'type',859,'product',[{'var',859,'BinRel1'}|[{'var',859,'Set'}]]}|[{'var',859,'BinRel2'}]]}|[[{'type',860,'constraint',[{'atom',860,'is_subtype'}|[[{'var',860,'BinRel1'}|[{'type',860,'binary_relation',[]}]]]]}|[{'type',861,'constraint',[{'atom',861,'is_subtype'}|[[{'var',861,'BinRel2'}|[{'type',861,'binary_relation',[]}]]]]}|[{'type',862,'constraint',[{'atom',862,'is_subtype'}|[[{'var',862,'Set'}|[{'type',862,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 870
		'spec' =
		    %% Line 870
		    [{{'composite',2},[{'type',870,'bounded_fun',[{'type',870,'fun',[{'type',870,'product',[{'var',870,'Function1'}|[{'var',870,'Function2'}]]}|[{'var',870,'Function3'}]]}|[[{'type',871,'constraint',[{'atom',871,'is_subtype'}|[[{'var',871,'Function1'}|[{'type',871,'a_function',[]}]]]]}|[{'type',872,'constraint',[{'atom',872,'is_subtype'}|[[{'var',872,'Function2'}|[{'type',872,'a_function',[]}]]]]}|[{'type',873,'constraint',[{'atom',873,'is_subtype'}|[[{'var',873,'Function3'}|[{'type',873,'a_function',[]}]]]]}]]]]]}]}],
		%% Line 898
		'spec' =
		    %% Line 898
		    [{{'inverse',1},[{'type',898,'bounded_fun',[{'type',898,'fun',[{'type',898,'product',[{'var',898,'Function1'}]}|[{'var',898,'Function2'}]]}|[[{'type',899,'constraint',[{'atom',899,'is_subtype'}|[[{'var',899,'Function1'}|[{'type',899,'a_function',[]}]]]]}|[{'type',900,'constraint',[{'atom',900,'is_subtype'}|[[{'var',900,'Function2'}|[{'type',900,'a_function',[]}]]]]}]]]]}]}],
		%% Line 918
		'spec' =
		    %% Line 918
		    [{{'restriction',3},[{'type',918,'bounded_fun',[{'type',918,'fun',[{'type',918,'product',[{'var',918,'SetFun'}|[{'var',918,'Set1'}|[{'var',918,'Set2'}]]]}|[{'var',918,'Set3'}]]}|[[{'type',919,'constraint',[{'atom',919,'is_subtype'}|[[{'var',919,'SetFun'}|[{'type',919,'set_fun',[]}]]]]}|[{'type',920,'constraint',[{'atom',920,'is_subtype'}|[[{'var',920,'Set1'}|[{'type',920,'a_set',[]}]]]]}|[{'type',921,'constraint',[{'atom',921,'is_subtype'}|[[{'var',921,'Set2'}|[{'type',921,'a_set',[]}]]]]}|[{'type',922,'constraint',[{'atom',922,'is_subtype'}|[[{'var',922,'Set3'}|[{'type',922,'a_set',[]}]]]]}]]]]]]}]}],
		%% Line 987
		'spec' =
		    %% Line 987
		    [{{'drestriction',3},[{'type',987,'bounded_fun',[{'type',987,'fun',[{'type',987,'product',[{'var',987,'SetFun'}|[{'var',987,'Set1'}|[{'var',987,'Set2'}]]]}|[{'var',987,'Set3'}]]}|[[{'type',988,'constraint',[{'atom',988,'is_subtype'}|[[{'var',988,'SetFun'}|[{'type',988,'set_fun',[]}]]]]}|[{'type',989,'constraint',[{'atom',989,'is_subtype'}|[[{'var',989,'Set1'}|[{'type',989,'a_set',[]}]]]]}|[{'type',990,'constraint',[{'atom',990,'is_subtype'}|[[{'var',990,'Set2'}|[{'type',990,'a_set',[]}]]]]}|[{'type',991,'constraint',[{'atom',991,'is_subtype'}|[[{'var',991,'Set3'}|[{'type',991,'a_set',[]}]]]]}]]]]]]}]}],
		%% Line 1057
		'spec' =
		    %% Line 1057
		    [{{'projection',2},[{'type',1057,'bounded_fun',[{'type',1057,'fun',[{'type',1057,'product',[{'var',1057,'SetFun'}|[{'var',1057,'Set1'}]]}|[{'var',1057,'Set2'}]]}|[[{'type',1058,'constraint',[{'atom',1058,'is_subtype'}|[[{'var',1058,'SetFun'}|[{'type',1058,'set_fun',[]}]]]]}|[{'type',1059,'constraint',[{'atom',1059,'is_subtype'}|[[{'var',1059,'Set1'}|[{'type',1059,'a_set',[]}]]]]}|[{'type',1060,'constraint',[{'atom',1060,'is_subtype'}|[[{'var',1060,'Set2'}|[{'type',1060,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 1076
		'spec' =
		    %% Line 1076
		    [{{'substitution',2},[{'type',1076,'bounded_fun',[{'type',1076,'fun',[{'type',1076,'product',[{'var',1076,'SetFun'}|[{'var',1076,'Set1'}]]}|[{'var',1076,'Set2'}]]}|[[{'type',1077,'constraint',[{'atom',1077,'is_subtype'}|[[{'var',1077,'SetFun'}|[{'type',1077,'set_fun',[]}]]]]}|[{'type',1078,'constraint',[{'atom',1078,'is_subtype'}|[[{'var',1078,'Set1'}|[{'type',1078,'a_set',[]}]]]]}|[{'type',1079,'constraint',[{'atom',1079,'is_subtype'}|[[{'var',1079,'Set2'}|[{'type',1079,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 1120
		'spec' =
		    %% Line 1120
		    [{{'partition',1},[{'type',1120,'bounded_fun',[{'type',1120,'fun',[{'type',1120,'product',[{'var',1120,'SetOfSets'}]}|[{'var',1120,'Partition'}]]}|[[{'type',1121,'constraint',[{'atom',1121,'is_subtype'}|[[{'var',1121,'SetOfSets'}|[{'type',1121,'set_of_sets',[]}]]]]}|[{'type',1122,'constraint',[{'atom',1122,'is_subtype'}|[[{'var',1122,'Partition'}|[{'type',1122,'a_set',[]}]]]]}]]]]}]}],
		%% Line 1128
		'spec' =
		    %% Line 1128
		    [{{'partition',2},[{'type',1128,'bounded_fun',[{'type',1128,'fun',[{'type',1128,'product',[{'var',1128,'SetFun'}|[{'var',1128,'Set'}]]}|[{'var',1128,'Partition'}]]}|[[{'type',1129,'constraint',[{'atom',1129,'is_subtype'}|[[{'var',1129,'SetFun'}|[{'type',1129,'set_fun',[]}]]]]}|[{'type',1130,'constraint',[{'atom',1130,'is_subtype'}|[[{'var',1130,'Partition'}|[{'type',1130,'a_set',[]}]]]]}|[{'type',1131,'constraint',[{'atom',1131,'is_subtype'}|[[{'var',1131,'Set'}|[{'type',1131,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 1147
		'spec' =
		    %% Line 1147
		    [{{'partition',3},[{'type',1147,'bounded_fun',[{'type',1147,'fun',[{'type',1147,'product',[{'var',1147,'SetFun'}|[{'var',1147,'Set1'}|[{'var',1147,'Set2'}]]]}|[{'type',1147,'tuple',[{'var',1147,'Set3'}|[{'var',1147,'Set4'}]]}]]}|[[{'type',1148,'constraint',[{'atom',1148,'is_subtype'}|[[{'var',1148,'SetFun'}|[{'type',1148,'set_fun',[]}]]]]}|[{'type',1149,'constraint',[{'atom',1149,'is_subtype'}|[[{'var',1149,'Set1'}|[{'type',1149,'a_set',[]}]]]]}|[{'type',1150,'constraint',[{'atom',1150,'is_subtype'}|[[{'var',1150,'Set2'}|[{'type',1150,'a_set',[]}]]]]}|[{'type',1151,'constraint',[{'atom',1151,'is_subtype'}|[[{'var',1151,'Set3'}|[{'type',1151,'a_set',[]}]]]]}|[{'type',1152,'constraint',[{'atom',1152,'is_subtype'}|[[{'var',1152,'Set4'}|[{'type',1152,'a_set',[]}]]]]}]]]]]]]}]}],
		%% Line 1220
		'spec' =
		    %% Line 1220
		    [{{'multiple_relative_product',2},[{'type',1220,'bounded_fun',[{'type',1220,'fun',[{'type',1220,'product',[{'var',1220,'TupleOfBinRels'}|[{'var',1220,'BinRel1'}]]}|[{'var',1220,'BinRel2'}]]}|[[{'type',1221,'constraint',[{'atom',1221,'is_subtype'}|[[{'var',1221,'TupleOfBinRels'}|[{'type',1221,'tuple_of',[{'var',1221,'BinRel'}]}]]]]}|[{'type',1222,'constraint',[{'atom',1222,'is_subtype'}|[[{'var',1222,'BinRel'}|[{'type',1222,'binary_relation',[]}]]]]}|[{'type',1223,'constraint',[{'atom',1223,'is_subtype'}|[[{'var',1223,'BinRel1'}|[{'type',1223,'binary_relation',[]}]]]]}|[{'type',1224,'constraint',[{'atom',1224,'is_subtype'}|[[{'var',1224,'BinRel2'}|[{'type',1224,'binary_relation',[]}]]]]}]]]]]]}]}],
		%% Line 1236
		'spec' =
		    %% Line 1236
		    [{{'join',4},[{'type',1236,'bounded_fun',[{'type',1236,'fun',[{'type',1236,'product',[{'var',1236,'Relation1'}|[{'var',1236,'I'}|[{'var',1236,'Relation2'}|[{'var',1236,'J'}]]]]}|[{'var',1236,'Relation3'}]]}|[[{'type',1237,'constraint',[{'atom',1237,'is_subtype'}|[[{'var',1237,'Relation1'}|[{'type',1237,'relation',[]}]]]]}|[{'type',1238,'constraint',[{'atom',1238,'is_subtype'}|[[{'var',1238,'Relation2'}|[{'type',1238,'relation',[]}]]]]}|[{'type',1239,'constraint',[{'atom',1239,'is_subtype'}|[[{'var',1239,'Relation3'}|[{'type',1239,'relation',[]}]]]]}|[{'type',1240,'constraint',[{'atom',1240,'is_subtype'}|[[{'var',1240,'I'}|[{'type',1240,'pos_integer',[]}]]]]}|[{'type',1241,'constraint',[{'atom',1241,'is_subtype'}|[[{'var',1241,'J'}|[{'type',1241,'pos_integer',[]}]]]]}]]]]]]]}]}],
		%% Line 1278
		'spec' =
		    %% Line 1278
		    [{{'fam2rel',1},[{'type',1278,'bounded_fun',[{'type',1278,'fun',[{'type',1278,'product',[{'var',1278,'Family'}]}|[{'var',1278,'BinRel'}]]}|[[{'type',1279,'constraint',[{'atom',1279,'is_subtype'}|[[{'var',1279,'Family'}|[{'type',1279,'family',[]}]]]]}|[{'type',1280,'constraint',[{'atom',1280,'is_subtype'}|[[{'var',1280,'BinRel'}|[{'type',1280,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 1284
		'spec' =
		    %% Line 1284
		    [{{'family_to_relation',1},[{'type',1284,'bounded_fun',[{'type',1284,'fun',[{'type',1284,'product',[{'var',1284,'Family'}]}|[{'var',1284,'BinRel'}]]}|[[{'type',1285,'constraint',[{'atom',1285,'is_subtype'}|[[{'var',1285,'Family'}|[{'type',1285,'family',[]}]]]]}|[{'type',1286,'constraint',[{'atom',1286,'is_subtype'}|[[{'var',1286,'BinRel'}|[{'type',1286,'binary_relation',[]}]]]]}]]]]}]}],
		%% Line 1296
		'spec' =
		    %% Line 1296
		    [{{'family_specification',2},[{'type',1296,'bounded_fun',[{'type',1296,'fun',[{'type',1296,'product',[{'var',1296,'Fun'}|[{'var',1296,'Family1'}]]}|[{'var',1296,'Family2'}]]}|[[{'type',1297,'constraint',[{'atom',1297,'is_subtype'}|[[{'var',1297,'Fun'}|[{'type',1297,'spec_fun',[]}]]]]}|[{'type',1298,'constraint',[{'atom',1298,'is_subtype'}|[[{'var',1298,'Family1'}|[{'type',1298,'family',[]}]]]]}|[{'type',1299,'constraint',[{'atom',1299,'is_subtype'}|[[{'var',1299,'Family2'}|[{'type',1299,'family',[]}]]]]}]]]]]}]}],
		%% Line 1319
		'spec' =
		    %% Line 1319
		    [{{'union_of_family',1},[{'type',1319,'bounded_fun',[{'type',1319,'fun',[{'type',1319,'product',[{'var',1319,'Family'}]}|[{'var',1319,'Set'}]]}|[[{'type',1320,'constraint',[{'atom',1320,'is_subtype'}|[[{'var',1320,'Family'}|[{'type',1320,'family',[]}]]]]}|[{'type',1321,'constraint',[{'atom',1321,'is_subtype'}|[[{'var',1321,'Set'}|[{'type',1321,'a_set',[]}]]]]}]]]]}]}],
		%% Line 1330
		'spec' =
		    %% Line 1330
		    [{{'intersection_of_family',1},[{'type',1330,'bounded_fun',[{'type',1330,'fun',[{'type',1330,'product',[{'var',1330,'Family'}]}|[{'var',1330,'Set'}]]}|[[{'type',1331,'constraint',[{'atom',1331,'is_subtype'}|[[{'var',1331,'Family'}|[{'type',1331,'family',[]}]]]]}|[{'type',1332,'constraint',[{'atom',1332,'is_subtype'}|[[{'var',1332,'Set'}|[{'type',1332,'a_set',[]}]]]]}]]]]}]}],
		%% Line 1345
		'spec' =
		    %% Line 1345
		    [{{'family_union',1},[{'type',1345,'bounded_fun',[{'type',1345,'fun',[{'type',1345,'product',[{'var',1345,'Family1'}]}|[{'var',1345,'Family2'}]]}|[[{'type',1346,'constraint',[{'atom',1346,'is_subtype'}|[[{'var',1346,'Family1'}|[{'type',1346,'family',[]}]]]]}|[{'type',1347,'constraint',[{'atom',1347,'is_subtype'}|[[{'var',1347,'Family2'}|[{'type',1347,'family',[]}]]]]}]]]]}]}],
		%% Line 1356
		'spec' =
		    %% Line 1356
		    [{{'family_intersection',1},[{'type',1356,'bounded_fun',[{'type',1356,'fun',[{'type',1356,'product',[{'var',1356,'Family1'}]}|[{'var',1356,'Family2'}]]}|[[{'type',1357,'constraint',[{'atom',1357,'is_subtype'}|[[{'var',1357,'Family1'}|[{'type',1357,'family',[]}]]]]}|[{'type',1358,'constraint',[{'atom',1358,'is_subtype'}|[[{'var',1358,'Family2'}|[{'type',1358,'family',[]}]]]]}]]]]}]}],
		%% Line 1372
		'spec' =
		    %% Line 1372
		    [{{'family_domain',1},[{'type',1372,'bounded_fun',[{'type',1372,'fun',[{'type',1372,'product',[{'var',1372,'Family1'}]}|[{'var',1372,'Family2'}]]}|[[{'type',1373,'constraint',[{'atom',1373,'is_subtype'}|[[{'var',1373,'Family1'}|[{'type',1373,'family',[]}]]]]}|[{'type',1374,'constraint',[{'atom',1374,'is_subtype'}|[[{'var',1374,'Family2'}|[{'type',1374,'family',[]}]]]]}]]]]}]}],
		%% Line 1384
		'spec' =
		    %% Line 1384
		    [{{'family_range',1},[{'type',1384,'bounded_fun',[{'type',1384,'fun',[{'type',1384,'product',[{'var',1384,'Family1'}]}|[{'var',1384,'Family2'}]]}|[[{'type',1385,'constraint',[{'atom',1385,'is_subtype'}|[[{'var',1385,'Family1'}|[{'type',1385,'family',[]}]]]]}|[{'type',1386,'constraint',[{'atom',1386,'is_subtype'}|[[{'var',1386,'Family2'}|[{'type',1386,'family',[]}]]]]}]]]]}]}],
		%% Line 1396
		'spec' =
		    %% Line 1396
		    [{{'family_field',1},[{'type',1396,'bounded_fun',[{'type',1396,'fun',[{'type',1396,'product',[{'var',1396,'Family1'}]}|[{'var',1396,'Family2'}]]}|[[{'type',1397,'constraint',[{'atom',1397,'is_subtype'}|[[{'var',1397,'Family1'}|[{'type',1397,'family',[]}]]]]}|[{'type',1398,'constraint',[{'atom',1398,'is_subtype'}|[[{'var',1398,'Family2'}|[{'type',1398,'family',[]}]]]]}]]]]}]}],
		%% Line 1402
		'spec' =
		    %% Line 1402
		    [{{'family_union',2},[{'type',1402,'bounded_fun',[{'type',1402,'fun',[{'type',1402,'product',[{'var',1402,'Family1'}|[{'var',1402,'Family2'}]]}|[{'var',1402,'Family3'}]]}|[[{'type',1403,'constraint',[{'atom',1403,'is_subtype'}|[[{'var',1403,'Family1'}|[{'type',1403,'family',[]}]]]]}|[{'type',1404,'constraint',[{'atom',1404,'is_subtype'}|[[{'var',1404,'Family2'}|[{'type',1404,'family',[]}]]]]}|[{'type',1405,'constraint',[{'atom',1405,'is_subtype'}|[[{'var',1405,'Family3'}|[{'type',1405,'family',[]}]]]]}]]]]]}]}],
		%% Line 1409
		'spec' =
		    %% Line 1409
		    [{{'family_intersection',2},[{'type',1409,'bounded_fun',[{'type',1409,'fun',[{'type',1409,'product',[{'var',1409,'Family1'}|[{'var',1409,'Family2'}]]}|[{'var',1409,'Family3'}]]}|[[{'type',1410,'constraint',[{'atom',1410,'is_subtype'}|[[{'var',1410,'Family1'}|[{'type',1410,'family',[]}]]]]}|[{'type',1411,'constraint',[{'atom',1411,'is_subtype'}|[[{'var',1411,'Family2'}|[{'type',1411,'family',[]}]]]]}|[{'type',1412,'constraint',[{'atom',1412,'is_subtype'}|[[{'var',1412,'Family3'}|[{'type',1412,'family',[]}]]]]}]]]]]}]}],
		%% Line 1416
		'spec' =
		    %% Line 1416
		    [{{'family_difference',2},[{'type',1416,'bounded_fun',[{'type',1416,'fun',[{'type',1416,'product',[{'var',1416,'Family1'}|[{'var',1416,'Family2'}]]}|[{'var',1416,'Family3'}]]}|[[{'type',1417,'constraint',[{'atom',1417,'is_subtype'}|[[{'var',1417,'Family1'}|[{'type',1417,'family',[]}]]]]}|[{'type',1418,'constraint',[{'atom',1418,'is_subtype'}|[[{'var',1418,'Family2'}|[{'type',1418,'family',[]}]]]]}|[{'type',1419,'constraint',[{'atom',1419,'is_subtype'}|[[{'var',1419,'Family3'}|[{'type',1419,'family',[]}]]]]}]]]]]}]}],
		%% Line 1435
		'spec' =
		    %% Line 1435
		    [{{'partition_family',2},[{'type',1435,'bounded_fun',[{'type',1435,'fun',[{'type',1435,'product',[{'var',1435,'SetFun'}|[{'var',1435,'Set'}]]}|[{'var',1435,'Family'}]]}|[[{'type',1436,'constraint',[{'atom',1436,'is_subtype'}|[[{'var',1436,'Family'}|[{'type',1436,'family',[]}]]]]}|[{'type',1437,'constraint',[{'atom',1437,'is_subtype'}|[[{'var',1437,'SetFun'}|[{'type',1437,'set_fun',[]}]]]]}|[{'type',1438,'constraint',[{'atom',1438,'is_subtype'}|[[{'var',1438,'Set'}|[{'type',1438,'a_set',[]}]]]]}]]]]]}]}],
		%% Line 1483
		'spec' =
		    %% Line 1483
		    [{{'family_projection',2},[{'type',1483,'bounded_fun',[{'type',1483,'fun',[{'type',1483,'product',[{'var',1483,'SetFun'}|[{'var',1483,'Family1'}]]}|[{'var',1483,'Family2'}]]}|[[{'type',1484,'constraint',[{'atom',1484,'is_subtype'}|[[{'var',1484,'SetFun'}|[{'type',1484,'set_fun',[]}]]]]}|[{'type',1485,'constraint',[{'atom',1485,'is_subtype'}|[[{'var',1485,'Family1'}|[{'type',1485,'family',[]}]]]]}|[{'type',1486,'constraint',[{'atom',1486,'is_subtype'}|[[{'var',1486,'Family2'}|[{'type',1486,'family',[]}]]]]}]]]]]}]}],
		%% Line 1511
		'spec' =
		    %% Line 1511
		    [{{'family_to_digraph',1},[{'type',1511,'bounded_fun',[{'type',1511,'fun',[{'type',1511,'product',[{'var',1511,'Family'}]}|[{'var',1511,'Graph'}]]}|[[{'type',1512,'constraint',[{'atom',1512,'is_subtype'}|[[{'var',1512,'Graph'}|[{'remote_type',1512,[{'atom',1512,'digraph'}|[{'atom',1512,'graph'}|[[]]]]}]]]]}|[{'type',1513,'constraint',[{'atom',1513,'is_subtype'}|[[{'var',1513,'Family'}|[{'type',1513,'family',[]}]]]]}]]]]}]}],
		%% Line 1521
		'spec' =
		    %% Line 1521
		    [{{'family_to_digraph',2},[{'type',1521,'bounded_fun',[{'type',1521,'fun',[{'type',1521,'product',[{'var',1521,'Family'}|[{'var',1521,'GraphType'}]]}|[{'var',1521,'Graph'}]]}|[[{'type',1522,'constraint',[{'atom',1522,'is_subtype'}|[[{'var',1522,'Graph'}|[{'remote_type',1522,[{'atom',1522,'digraph'}|[{'atom',1522,'graph'}|[[]]]]}]]]]}|[{'type',1523,'constraint',[{'atom',1523,'is_subtype'}|[[{'var',1523,'Family'}|[{'type',1523,'family',[]}]]]]}|[{'type',1524,'constraint',[{'atom',1524,'is_subtype'}|[[{'var',1524,'GraphType'}|[{'type',1524,'list',[{'remote_type',1524,[{'atom',1524,'digraph'}|[{'atom',1524,'d_type'}|[[]]]]}]}]]]]}]]]]]}]}],
		%% Line 1543
		'spec' =
		    %% Line 1543
		    [{{'digraph_to_family',1},[{'type',1543,'bounded_fun',[{'type',1543,'fun',[{'type',1543,'product',[{'var',1543,'Graph'}]}|[{'var',1543,'Family'}]]}|[[{'type',1544,'constraint',[{'atom',1544,'is_subtype'}|[[{'var',1544,'Graph'}|[{'remote_type',1544,[{'atom',1544,'digraph'}|[{'atom',1544,'graph'}|[[]]]]}]]]]}|[{'type',1545,'constraint',[{'atom',1545,'is_subtype'}|[[{'var',1545,'Family'}|[{'type',1545,'family',[]}]]]]}]]]]}]}],
		%% Line 1552
		'spec' =
		    %% Line 1552
		    [{{'digraph_to_family',2},[{'type',1552,'bounded_fun',[{'type',1552,'fun',[{'type',1552,'product',[{'var',1552,'Graph'}|[{'var',1552,'Type'}]]}|[{'var',1552,'Family'}]]}|[[{'type',1553,'constraint',[{'atom',1553,'is_subtype'}|[[{'var',1553,'Graph'}|[{'remote_type',1553,[{'atom',1553,'digraph'}|[{'atom',1553,'graph'}|[[]]]]}]]]]}|[{'type',1554,'constraint',[{'atom',1554,'is_subtype'}|[[{'var',1554,'Family'}|[{'type',1554,'family',[]}]]]]}|[{'type',1555,'constraint',[{'atom',1555,'is_subtype'}|[[{'var',1555,'Type'}|[{'type',1555,'type',[]}]]]]}]]]]]}]}]]
'from_term'/1 =
    %% Line 151
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 152
	    case _cor0 of
	      %% Line 153
	      <_cor7>
		  when call 'erlang':'is_list'
			(_cor0) ->
		  ['_']
	      %% Line 154
	      <_cor8> when 'true' ->
		  '_'
	    end
	in  let <_cor4> =
		catch
		    %% Line 156
		    apply 'setify'/2
			(_cor0, _cor2)
	    in  %% Line 156
		case _cor4 of
		  %% Line 157
		  <{'EXIT',_cor9}> when 'true' ->
		      %% Line 158
		      call 'erlang':'error'
			  ('badarg', [_cor0|[]])
		  %% Line 159
		  <Set> when 'true' ->
		      %% Line 160
		      Set
		end
'from_term'/2 =
    %% Line 167
    fun (_cor1,_cor0) ->
	%% Line 168
	case apply 'is_type'/1
		 (_cor0) of
	  %% Line 169
	  <'true'> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 170
		      apply 'setify'/2
			  (_cor1, _cor0)
	      in  %% Line 170
		  case _cor2 of
		    %% Line 171
		    <{'EXIT',_cor7}> when 'true' ->
			%% Line 172
			call 'erlang':'error'
			    ('badarg', [_cor1|[_cor0|[]]])
		    %% Line 173
		    <Set> when 'true' ->
			%% Line 174
			Set
		  end
	  %% Line 176
	  <'false'> when 'true' ->
	      %% Line 177
	      call 'erlang':'error'
		  ('badarg', [_cor1|[_cor0|[]]])
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'from_external'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,[Type|[]]> when 'true' ->
	      %% Line 185
	      {'Set',L,Type}
	  %% Line 186
	  <T,Type> when 'true' ->
	      %% Line 187
	      {'OrdSet',T,Type}
	end
'empty_set'/0 =
    %% Line 191
    fun () ->
	%% Line 192
	{'Set',[],'_'}
'is_type'/1 =
    %% Line 197
    fun (_cor0) ->
	case _cor0 of
	  <Atom>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'=/='
			    (_cor0, '_')
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 198
	      'true'
	  %% Line 199
	  <[T|[]]> when 'true' ->
	      %% Line 200
	      apply 'is_element_type'/1
		  (T)
	  %% Line 201
	  <T>
	      when try
		    let <_cor3> =
			call 'erlang':'tuple_size'
			    (_cor0)
		    in  call 'erlang':'>'
			    (_cor3, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  %% Line 202
		  call 'erlang':'tuple_size'
		      (T)
	      in  %% Line 202
		  apply 'is_types'/2
		      (_cor4, T)
	  %% Line 203
	  <_X_T> when 'true' ->
	      %% Line 204
	      'false'
	end
'set'/1 =
    %% Line 209
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 210
		call 'lists':'usort'
		    (_cor0)
	in  %% Line 210
	    case _cor1 of
	      %% Line 211
	      <{'EXIT',_cor4}> when 'true' ->
		  %% Line 212
		  call 'erlang':'error'
		      ('badarg', [_cor0|[]])
	      %% Line 213
	      <SL> when 'true' ->
		  %% Line 214
		  {'Set',SL,'atom'}
	    end
'set'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,T = [Type|[]]>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Type)
		in  let <_cor3> =
			call 'erlang':'=/='
			    (Type, '_')
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  catch
		      %% Line 222
		      call 'lists':'usort'
			  (L)
	      in  %% Line 222
		  case _cor4 of
		    %% Line 223
		    <{'EXIT',_cor10}> when 'true' ->
			%% Line 224
			call 'erlang':'error'
			    ('badarg', [L|[T|[]]])
		    %% Line 225
		    <SL> when 'true' ->
			%% Line 226
			{'Set',SL,Type}
		  end
	  %% Line 228
	  <L,T = [_cor11|[]]> when 'true' ->
	      let <_cor6> =
		  catch
		      %% Line 229
		      apply 'setify'/2
			  (L, T)
	      in  %% Line 229
		  case _cor6 of
		    %% Line 230
		    <{'EXIT',_cor12}> when 'true' ->
			%% Line 231
			call 'erlang':'error'
			    ('badarg', [L|[T|[]]])
		    %% Line 232
		    <Set> when 'true' ->
			%% Line 233
			Set
		  end
	  %% Line 235
	  <L,T> when 'true' ->
	      %% Line 236
	      call 'erlang':'error'
		  ('badarg', [L|[T|[]]])
	end
'from_sets'/1 =
    %% Line 244
    fun (_cor0) ->
	case _cor0 of
	  <Ss>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 245
	      case apply 'set_of_sets'/3
		       (Ss, [], '_') of
		%% Line 246
		<{'error',Error}> when 'true' ->
		    %% Line 247
		    call 'erlang':'error'
			(Error, [Ss|[]])
		%% Line 248
		<Set> when 'true' ->
		    %% Line 249
		    Set
	      end
	  %% Line 251
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 252
		  call 'erlang':'tuple_to_list'
		      (Tuple)
	      in  %% Line 252
		  case apply 'ordset_of_sets'/3
			   (_cor2, [], []) of
		    %% Line 253
		    <'error'> when 'true' ->
			%% Line 254
			call 'erlang':'error'
			    ('badarg', [Tuple|[]])
		    %% Line 255
		    <Set> when 'true' ->
			%% Line 256
			Set
		  end
	  %% Line 258
	  <T> when 'true' ->
	      %% Line 259
	      call 'erlang':'error'
		  ('badarg', [T|[]])
	end
'relation'/1 =
    %% Line 264
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 265
	      {'Set',[],{'atom','atom'}}
	  %% Line 266
	  <Ts = [T|_cor5]>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor2> =
		  catch
		      let <_cor1> =
			  %% Line 267
			  call 'erlang':'tuple_size'
			      (T)
		      in  %% Line 1617
			  ( case <Ts,_cor1> of
			      ( <_fol4,( [( Type
					    -| ['compiler_generated'] )|( []
									  -| ['compiler_generated'] )]
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
				    ( let <_cor3> =
					  %% Line 1618
					  ( apply ( 'is_type'/1
						    -| ['compiler_generated'] )
						(( Type
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_cor2> =
						%% Line 1618
						( apply ( 'atoms_only'/2
							  -| ['compiler_generated'] )
						      (( Type
							 -| ['compiler_generated'] ), ( 1
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  %% Line 1618
						( case ( call ( 'erlang'
								-| ['compiler_generated'] ):( 'and'
											      -| ['compiler_generated'] )
							     (( _cor3
								-| ['compiler_generated'] ), ( _cor2
											       -| ['compiler_generated'] ))
							 -| ['compiler_generated'] ) of
						    %% Line 1619
						    ( <( 'true'
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
							  ( let <_cor4> =
								%% Line 1620
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'tuple_size'
												       -| ['compiler_generated'] )
								      (( Type
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    in  %% Line 1620
								( apply ( 'rel'/3
									  -| ['compiler_generated'] )
								      (_fol4, ( _cor4
										-| ['compiler_generated'] ), ( Type
													       -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    %% Line 1621
						    ( <( 'false'
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
							  %% Line 1622
							  ( apply ( 'rel_type'/3
								    -| ['compiler_generated'] )
								(_fol4, ( []
									  -| ['compiler_generated'] ), ( Type
													 -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      %% Line 1624
			      ( <_fol5,( Sz
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
				    ( let <_cor6> =
					  %% Line 1625
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'make_tuple'
										 -| ['compiler_generated'] )
						(( Sz
						   -| ['compiler_generated'] ), ( 'atom'
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  %% Line 1625
					  ( apply ( 'rel'/3
						    -| ['compiler_generated'] )
						(_fol5, ( Sz
							  -| ['compiler_generated'] ), ( _cor6
											 -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	      in  %% Line 267
		  case _cor2 of
		    %% Line 268
		    <{'EXIT',_cor6}> when 'true' ->
			%% Line 269
			call 'erlang':'error'
			    ('badarg', [Ts|[]])
		    %% Line 270
		    <Set> when 'true' ->
			%% Line 271
			Set
		  end
	  %% Line 273
	  <E> when 'true' ->
	      %% Line 274
	      call 'erlang':'error'
		  ('badarg', [E|[]])
	end
'relation'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 1617
		( case <_cor1,_cor0> of
		    ( <_fol6,( [( Type
				  -| ['compiler_generated'] )|( []
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
			  ( let <_cor3> =
				%% Line 1618
				( apply ( 'is_type'/1
					  -| ['compiler_generated'] )
				      (( Type
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    in  ( let <_cor2> =
				      %% Line 1618
				      ( apply ( 'atoms_only'/2
						-| ['compiler_generated'] )
					    (( Type
					       -| ['compiler_generated'] ), ( 1
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  %% Line 1618
				      ( case ( call ( 'erlang'
						      -| ['compiler_generated'] ):( 'and'
										    -| ['compiler_generated'] )
						   (( _cor3
						      -| ['compiler_generated'] ), ( _cor2
										     -| ['compiler_generated'] ))
					       -| ['compiler_generated'] ) of
					  %% Line 1619
					  ( <( 'true'
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_cor4> =
						      %% Line 1620
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'tuple_size'
											     -| ['compiler_generated'] )
							    (( Type
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1620
						      ( apply ( 'rel'/3
								-| ['compiler_generated'] )
							    (_fol6, ( _cor4
								      -| ['compiler_generated'] ), ( Type
												     -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  %% Line 1621
					  ( <( 'false'
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						%% Line 1622
						( apply ( 'rel_type'/3
							  -| ['compiler_generated'] )
						      (_fol6, ( []
								-| ['compiler_generated'] ), ( Type
											       -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    %% Line 1624
		    ( <_fol7,( Sz
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
			  ( let <_cor6> =
				%% Line 1625
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'make_tuple'
								       -| ['compiler_generated'] )
				      (( Sz
					 -| ['compiler_generated'] ), ( 'atom'
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    in  %% Line 1625
				( apply ( 'rel'/3
					  -| ['compiler_generated'] )
				      (_fol7, ( Sz
						-| ['compiler_generated'] ), ( _cor6
									       -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	in  %% Line 282
	    case _cor2 of
	      %% Line 283
	      <{'EXIT',_cor6}> when 'true' ->
		  %% Line 284
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      %% Line 285
	      <Set> when 'true' ->
		  %% Line 286
		  Set
	    end
'a_function'/1 =
    %% Line 292
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 293
		apply 'func'/2
		    (_cor0, {'atom','atom'})
	in  %% Line 293
	    case _cor1 of
	      %% Line 294
	      <{'EXIT',_cor4}> when 'true' ->
		  %% Line 295
		  call 'erlang':'error'
		      ('badarg', [_cor0|[]])
	      %% Line 296
	      <Bad>
		  when call 'erlang':'is_atom'
			(_cor1) ->
		  %% Line 297
		  call 'erlang':'error'
		      (Bad, [_cor0|[]])
	      %% Line 298
	      <Set> when 'true' ->
		  %% Line 299
		  Set
	    end
'a_function'/2 =
    %% Line 306
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		( let <_cor2> =
		      %% Line 1653
		      ( apply ( 'is_type'/1
				-| ['compiler_generated'] )
			    (_cor0)
			-| ['compiler_generated'] )
		  in  %% Line 1653
		      ( case <_cor0,( _cor2
				      -| ['compiler_generated'] )> of
			  %% Line 1654
			  ( <( [( ( Type
				    -| ['compiler_generated'] ) = ( {( DT
								       -| ['compiler_generated'] ),( RT
												     -| ['compiler_generated'] )}
								    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )|( []
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),( 'true'
							     -| ['compiler_generated'] )>
				when ( let <_cor3> =
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_atom'
									       -| ['compiler_generated'] )
					      (( DT
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  ( let <_cor4> =
					      %% Line 1655
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_atom'
										     -| ['compiler_generated'] )
						    (( RT
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (( _cor3
						       -| ['compiler_generated'] ), ( _cor4
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] ) ->
				%% Line 1656
				( apply ( 'func'/2
					  -| ['compiler_generated'] )
				      (_cor1, ( Type
						-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1657
			  ( <( [( Type
				  -| ['compiler_generated'] )|( []
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),( 'true'
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
				( let <_cor7> =
				      %% Line 1658
				      fun (( _cor5
					     -| ['compiler_generated'] )) ->
					  ( case ( _cor5
						   -| ['compiler_generated'] ) of
					      ( <( {( _cor11
						      -| ['compiler_generated'] ),( _cor12
										    -| ['compiler_generated'] )}
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( 'true'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor6
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),( _cor6
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				  in  %% Line 1658
				      ( apply ( 'func_type'/4
						-| ['compiler_generated'] )
					    (_cor1, ( []
						      -| ['compiler_generated'] ), ( Type
										     -| ['compiler_generated'] ), ( _cor7
														    -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _fol13
			       -| ['compiler_generated'] ),( _fol14
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
				( let <_cor8> = {( _fol13
					 -| ['compiler_generated'] ),( _fol14
								       -| ['compiler_generated'] )}
				  in  ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),( _cor8
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	in  %% Line 307
	    case _cor2 of
	      %% Line 308
	      <{'EXIT',_cor6}> when 'true' ->
		  %% Line 309
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      %% Line 310
	      <Bad>
		  when call 'erlang':'is_atom'
			(_cor2) ->
		  %% Line 311
		  call 'erlang':'error'
		      (Bad, [_cor1|[_cor0|[]]])
	      %% Line 312
	      <Set> when 'true' ->
		  %% Line 313
		  Set
	    end
'family'/1 =
    %% Line 319
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 320
		apply 'fam2'/2
		    (_cor0, {'atom',['atom']})
	in  %% Line 320
	    case _cor1 of
	      %% Line 321
	      <{'EXIT',_cor4}> when 'true' ->
		  %% Line 322
		  call 'erlang':'error'
		      ('badarg', [_cor0|[]])
	      %% Line 323
	      <Bad>
		  when call 'erlang':'is_atom'
			(_cor1) ->
		  %% Line 324
		  call 'erlang':'error'
		      (Bad, [_cor0|[]])
	      %% Line 325
	      <Set> when 'true' ->
		  %% Line 326
		  Set
	    end
'family'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		( let <_cor2> =
		      %% Line 1674
		      ( apply ( 'is_type'/1
				-| ['compiler_generated'] )
			    (_cor0)
			-| ['compiler_generated'] )
		  in  %% Line 1674
		      ( case <_cor0,( _cor2
				      -| ['compiler_generated'] )> of
			  %% Line 1675
			  ( <( [( ( Type
				    -| ['compiler_generated'] ) = ( {( DT
								       -| ['compiler_generated'] ),( [( RT
													-| ['compiler_generated'] )|( []
																      -| ['compiler_generated'] )]
												     -| ['compiler_generated'] )}
								    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )|( []
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),( 'true'
							     -| ['compiler_generated'] )>
				when ( let <_cor3> =
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_atom'
									       -| ['compiler_generated'] )
					      (( DT
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  ( let <_cor4> =
					      %% Line 1676
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_atom'
										     -| ['compiler_generated'] )
						    (( RT
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (( _cor3
						       -| ['compiler_generated'] ), ( _cor4
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] ) ->
				%% Line 1677
				( apply ( 'fam2'/2
					  -| ['compiler_generated'] )
				      (_cor1, ( Type
						-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1678
			  ( <( [( Type
				  -| ['compiler_generated'] )|( []
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] ),( 'true'
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
				( let <_cor7> =
				      %% Line 1679
				      fun (( _cor5
					     -| ['compiler_generated'] )) ->
					  ( case ( _cor5
						   -| ['compiler_generated'] ) of
					      ( <( {( _cor11
						      -| ['compiler_generated'] ),( [( _cor12
										       -| ['compiler_generated'] )|( []
														     -| ['compiler_generated'] )]
										    -| ['compiler_generated'] )}
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( 'true'
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor6
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),( _cor6
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				  in  %% Line 1679
				      ( apply ( 'func_type'/4
						-| ['compiler_generated'] )
					    (_cor1, ( []
						      -| ['compiler_generated'] ), ( Type
										     -| ['compiler_generated'] ), ( _cor7
														    -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _fol22
			       -| ['compiler_generated'] ),( _fol23
							     -| ['compiler_generated'] )> when ( 'true'
												 -| ['compiler_generated'] ) ->
				( let <_cor8> = {( _fol22
					 -| ['compiler_generated'] ),( _fol23
								       -| ['compiler_generated'] )}
				  in  ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),( _cor8
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	in  %% Line 334
	    case _cor2 of
	      %% Line 335
	      <{'EXIT',_cor6}> when 'true' ->
		  %% Line 336
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      %% Line 337
	      <Bad>
		  when call 'erlang':'is_atom'
			(_cor2) ->
		  %% Line 338
		  call 'erlang':'error'
		      (Bad, [_cor1|[_cor0|[]]])
	      %% Line 339
	      <Set> when 'true' ->
		  %% Line 340
		  Set
	    end
'to_external'/1 =
    %% Line 350
    fun (_cor0) ->
	case _cor0 of
	  <S = {'Set',_cor4,_cor5}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      _cor4
	  %% Line 352
	  <S = {'OrdSet',_cor8,_cor9}> when ( 'true'
					      -| ['compiler_generated'] ) ->
	      _cor8
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'to_external',1}}] )
	    -| ['compiler_generated'] )
	end
'type'/1 =
    %% Line 358
    fun (_cor0) ->
	case _cor0 of
	  <S = {'Set',_cor5,_cor6}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 359
	      [_cor6|[]]
	  %% Line 360
	  <S = {'OrdSet',_cor9,_cor10}> when ( 'true'
					       -| ['compiler_generated'] ) ->
	      _cor10
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'type',1}}] )
	    -| ['compiler_generated'] )
	end
'to_sets'/1 =
    %% Line 367
    fun (_cor0) ->
	case _cor0 of
	  <S = {'Set',_cor22,_cor23}> when ( 'true'
					     -| ['compiler_generated'] ) ->
	      %% Line 368
	      case _cor23 of
		%% Line 369
		<[Type|[]]> when 'true' ->
		    apply 'list_of_sets'/3
			(_cor22, Type, [])
		%% Line 370
		<Type> when 'true' ->
		    apply 'list_of_ordsets'/3
			(_cor22, Type, [])
	      end
	  %% Line 372
	  <S = {'OrdSet',_cor30,_cor31}>
	      when call 'erlang':'is_tuple'
		    (_cor31) ->
	      let <_cor20> =
		  %% Line 373
		  call 'erlang':'tuple_to_list'
		      (_cor30)
	      in  let <_cor17> =
		      %% Line 373
		      call 'erlang':'tuple_to_list'
			  (_cor31)
		  in  %% Line 373
		      apply 'tuple_of_sets'/3
			  (_cor20, _cor17, [])
	  %% Line 374
	  <S = {'OrdSet',_cor36,_cor37}> when ( 'true'
						-| ['compiler_generated'] ) ->
	      %% Line 375
	      call 'erlang':'error'
		  ('badarg', [S|[]])
	  ( <_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21})
		  -| [{'function_name',{'to_sets',1}}] )
	    -| ['compiler_generated'] )
	end
'no_elements'/1 =
    %% Line 380
    fun (_cor0) ->
	case _cor0 of
	  <S = {'Set',_cor13,_cor14}> when ( 'true'
					     -| ['compiler_generated'] ) ->
	      %% Line 381
	      call 'erlang':'length'
		  (_cor13)
	  %% Line 382
	  <S = {'OrdSet',_cor17,_cor18}>
	      when call 'erlang':'is_tuple'
		    (_cor18) ->
	      %% Line 383
	      call 'erlang':'tuple_size'
		  (_cor17)
	  %% Line 384
	  <S = {'OrdSet',_cor21,_cor22}> when ( 'true'
						-| ['compiler_generated'] ) ->
	      %% Line 385
	      call 'erlang':'error'
		  ('badarg', [S|[]])
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'no_elements',1}}] )
	    -| ['compiler_generated'] )
	end
'specification'/2 =
    %% Line 391
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,S = {'Set',_cor16,_cor17}> when ( 'true'
						 -| ['compiler_generated'] ) ->
	      let <_cor11> =
		  %% Line 393
		  case %% Line 2378
		       ( case Fun of
			   ( <( {( 'external'
				   -| ['compiler_generated'] ),( Function
								 -| ['compiler_generated'] )}
				-| ['compiler_generated'] )>
				 when ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'is_atom'
									  -| ['compiler_generated'] )
					 (( Function
					    -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) ->
				 %% Line 2379
				 ( 'false'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   %% Line 2380
			   ( <( {( 'external'
				   -| ['compiler_generated'] ),_fol92}
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 _fol92
			     -| ['compiler_generated'] )
			   %% Line 2382
			   ( <( _cor2
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 %% Line 2383
				 ( 'false'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			 end
			 -| ['compiler_generated'] ) of
		    %% Line 394
		    <'false'> when 'true' ->
			let <_cor5> =
			    %% Line 2386
			    ( case _cor17 of
				( <( [_fol94|( []
					       -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      _fol94
				  -| ['compiler_generated'] )
				%% Line 2387
				( <_fol95> when ( 'true'
						  -| ['compiler_generated'] ) ->
				      _fol95
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 395
			    apply 'spec'/4
				(_cor16, Fun, _cor5, [])
		    %% Line 396
		    <XFun> when 'true' ->
			%% Line 397
			apply 'specification'/3
			    (_cor16, XFun, [])
		  end
	      in  %% Line 399
		  case _cor11 of
		    %% Line 400
		    <SL>
			when call 'erlang':'is_list'
			      (_cor11) ->
			%% Line 401
			{'Set',SL,_cor17}
		    %% Line 402
		    <Bad> when 'true' ->
			%% Line 403
			call 'erlang':'error'
			    (Bad, [Fun|[S|[]]])
		  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'specification',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/2 =
    %% Line 410
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor14,_cor15},S2 = {'Set',_cor16,_cor17}> when 'true' ->
	      %% Line 411
	      case %% Line 2789
		   ( case <_cor15,_cor17> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( T
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2790
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( catch
				   %% Line 2791
				   ( apply ( 'unify_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 412
		<[]> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		%% Line 413
		<Type> when 'true' ->
		    let <_cor10> =
			call 'lists':'umerge'
			    (_cor14, _cor16)
		    in  {'Set',_cor10,Type}
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'union',2}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor14,_cor15},S2 = {'Set',_cor16,_cor17}> when 'true' ->
	      %% Line 421
	      case %% Line 2789
		   ( case <_cor15,_cor17> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( T
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2790
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( catch
				   %% Line 2791
				   ( apply ( 'unify_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 422
		<[]> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		%% Line 423
		<Type> when 'true' ->
		    let <_cor10> =
			apply 'intersection'/3
			    (_cor14, _cor16, [])
		    in  {'Set',_cor10,Type}
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'intersection',2}}] )
	    -| ['compiler_generated'] )
	end
'difference'/2 =
    %% Line 430
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor14,_cor15},S2 = {'Set',_cor16,_cor17}> when 'true' ->
	      %% Line 431
	      case %% Line 2789
		   ( case <_cor15,_cor17> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( T
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2790
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( catch
				   %% Line 2791
				   ( apply ( 'unify_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 432
		<[]> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		%% Line 433
		<Type> when 'true' ->
		    let <_cor10> =
			apply 'difference'/3
			    (_cor14, _cor16, [])
		    in  {'Set',_cor10,Type}
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'difference',2}}] )
	    -| ['compiler_generated'] )
	end
'symdiff'/2 =
    %% Line 440
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor14,_cor15},S2 = {'Set',_cor16,_cor17}> when 'true' ->
	      %% Line 441
	      case %% Line 2789
		   ( case <_cor15,_cor17> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( T
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2790
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( catch
				   %% Line 2791
				   ( apply ( 'unify_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 442
		<[]> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		%% Line 443
		<Type> when 'true' ->
		    let <_cor10> =
			%% Line 1897
			( case <_cor14,_cor16> of
			    ( <( [( H1
				    -| ['compiler_generated'] )|( T1
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] ),( T2
							       -| ['compiler_generated'] )> when ( 'true'
												   -| ['compiler_generated'] ) ->
				  %% Line 1898
				  ( apply ( 'symdiff2'/4
					    -| ['compiler_generated'] )
					(( T1
					   -| ['compiler_generated'] ), ( T2
									  -| ['compiler_generated'] ), [], ( H1
													     -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1899
			    ( <( _cor6
				 -| ['compiler_generated'] ),( T2
							       -| ['compiler_generated'] )> when ( 'true'
												   -| ['compiler_generated'] ) ->
				  %% Line 1900
				  ( call ( 'lists'
					   -| ['compiler_generated'] ):( 'reverse'
									 -| ['compiler_generated'] )
					([], ( T2
					       -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  {'Set',_cor10,Type}
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'symdiff',2}}] )
	    -| ['compiler_generated'] )
	end
'symmetric_partition'/2 =
    %% Line 452
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor13,_cor14},S2 = {'Set',_cor15,_cor16}> when 'true' ->
	      %% Line 453
	      case %% Line 2789
		   ( case <_cor14,_cor16> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( T
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2790
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( catch
				   %% Line 2791
				   ( apply ( 'unify_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 454
		<[]> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		%% Line 455
		<Type> when 'true' ->
		    apply 'sympart'/6
			(_cor13, _cor15, [], [], [], Type)
	      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'symmetric_partition',2}}] )
	    -| ['compiler_generated'] )
	end
'product'/2 =
    %% Line 462
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor31,_cor32},S2 = {'Set',_cor33,_cor34}> when 'true' ->
	      %% Line 463
	      case <> of
		%% Line 464
		<>
		    when call 'erlang':'=:='
			  (_cor32,
			   '_') ->
		    S1
		%% Line 465
		<>
		    when call 'erlang':'=:='
			  (_cor34,
			   '_') ->
		    S2
		%% Line 466
		<> when 'true' ->
		    let <F> =
			%% Line 467
			( fun (_cor14) ->
			      {0,_cor14}
			  -| [{'id',{0,0,'-product/2-fun-0-'}}] )
		    in  let <T> = {_cor32,_cor34}
			in  let <_cor27> =
				%% Line 469
				call 'lists':'map'
				    (F, _cor31)
			    in  let <_cor24> =
				    %% Line 469
				    call 'lists':'map'
					(F, _cor33)
				in  let <_cor28> =
					%% Line 469
					apply 'relprod'/2
					    (_cor27, _cor24)
				    in  %% Line 469
					{'Set',_cor28,T}
	      end
	  ( <_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29})
		  -| [{'function_name',{'product',2}}] )
	    -| ['compiler_generated'] )
	end
'product'/1 =
    %% Line 475
    fun (_cor0) ->
	case _cor0 of
	  <{S1,S2}> when 'true' ->
	      %% Line 476
	      apply 'product'/2
		  (S1, S2)
	  %% Line 477
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <Ss> =
		  %% Line 478
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor2> =
		      catch
			  %% Line 479
			  apply 'sets_to_list'/1
			      (Ss)
		  in  %% Line 479
		      case _cor2 of
			%% Line 480
			<{'EXIT',_cor9}> when 'true' ->
			    %% Line 481
			    call 'erlang':'error'
				('badarg', [T|[]])
			%% Line 482
			<[]> when 'true' ->
			    %% Line 483
			    call 'erlang':'error'
				('badarg', [T|[]])
			%% Line 484
			<L> when 'true' ->
			    let <Type> =
				%% Line 485
				apply 'types'/2
				    (Ss, [])
			    in  %% Line 486
				case call 'lists':'member'
					 ([], L) of
				  %% Line 487
				  <'true'> when 'true' ->
				      %% Line 488
				      apply 'empty_set'/0
					  ()
				  %% Line 489
				  <'false'> when 'true' ->
				      let <_cor4> =
					  %% Line 490
					  apply 'prod'/3
					      (L, [], [])
				      in  let <_cor5> =
					      %% Line 490
					      call 'lists':'reverse'
						  (_cor4)
					  in  %% Line 490
					      {'Set',_cor5,Type}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
		      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'product',1}}] )
	    -| ['compiler_generated'] )
	end
'constant_function'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'Set',_cor14,_cor15},E> when ( 'true'
					       -| ['compiler_generated'] ) ->
	      let <_cor2> =
		  %% Line 499
		  apply 'is_sofs_set'/1
		      (E)
	      in  %% Line 499
		  case <_cor15,_cor2> of
		    %% Line 500
		    <'_','true'> when 'true' ->
			S
		    %% Line 501
		    <Type,'true'> when 'true' ->
			let <_cor5> =
			    %% Line 502
			    apply 'type'/1
				(E)
			in  let <NType> = {%% Line 502
				 Type,_cor5}
			    in  let <_cor7> =
				    %% Line 503
				    apply 'to_external'/1
					(E)
				in  let <_cor10> =
					%% Line 503
					apply 'constant_function'/3
					    (_cor14, _cor7, [])
				    in  %% Line 503
					{'Set',_cor10,NType}
		    %% Line 504
		    <_fol234,_fol235> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [S|[E|[]]])
		  end
	  %% Line 506
	  <S = {'OrdSet',_cor21,_cor22},E> when ( 'true'
						  -| ['compiler_generated'] ) ->
	      %% Line 507
	      call 'erlang':'error'
		  ('badarg', [S|[E|[]]])
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'constant_function',2}}] )
	    -| ['compiler_generated'] )
	end
'is_equal'/2 =
    %% Line 513
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor22,_cor23},S2 = {'Set',_cor24,_cor25}> when 'true' ->
	      %% Line 514
	      case %% Line 2813
		   ( case <_cor23,_cor25> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2814
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( apply ( 'match_types1'/2
				       -| ['compiler_generated'] )
				   (( Type1
				      -| ['compiler_generated'] ), ( Type2
								     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 515
		<'true'> when 'true' ->
		    call 'erlang':'=='
			(_cor22, _cor24)
		%% Line 516
		<'false'> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 518
	  <S1 = {'OrdSet',_cor34,_cor35},S2 = {'OrdSet',_cor36,_cor37}> when 'true' ->
	      %% Line 519
	      case %% Line 2813
		   ( case <_cor35,_cor37> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2814
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( apply ( 'match_types1'/2
				       -| ['compiler_generated'] )
				   (( Type1
				      -| ['compiler_generated'] ), ( Type2
								     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 520
		<'true'> when 'true' ->
		    call 'erlang':'=='
			(_cor34, _cor36)
		%% Line 521
		<'false'> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 523
	  <S1 = {'Set',_cor46,_cor47},S2 = {'OrdSet',_cor48,_cor49}> when 'true' ->
	      %% Line 524
	      call 'erlang':'error'
		  ('type_mismatch', [S1|[S2|[]]])
	  %% Line 525
	  <S1 = {'OrdSet',_cor50,_cor51},S2 = {'Set',_cor52,_cor53}> when 'true' ->
	      %% Line 526
	      call 'erlang':'error'
		  ('type_mismatch', [S1|[S2|[]]])
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'is_equal',2}}] )
	    -| ['compiler_generated'] )
	end
'is_subset'/2 =
    %% Line 532
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor13,_cor14},S2 = {'Set',_cor15,_cor16}> when 'true' ->
	      %% Line 533
	      case %% Line 2813
		   ( case <_cor14,_cor16> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2814
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( apply ( 'match_types1'/2
				       -| ['compiler_generated'] )
				   (( Type1
				      -| ['compiler_generated'] ), ( Type2
								     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 534
		<'true'> when 'true' ->
		    apply 'subset'/2
			(_cor13, _cor15)
		%% Line 535
		<'false'> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'is_subset',2}}] )
	    -| ['compiler_generated'] )
	end
'is_sofs_set'/1 =
    %% Line 541
    fun (_cor0) ->
	case _cor0 of
	  <S = {'Set',_cor2,_cor3}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 542
	      'true'
	  %% Line 543
	  <S = {'OrdSet',_cor4,_cor5}> when ( 'true'
					      -| ['compiler_generated'] ) ->
	      %% Line 544
	      'true'
	  %% Line 545
	  <_X_S> when 'true' ->
	      %% Line 546
	      'false'
	end
'is_set'/1 =
    %% Line 551
    fun (_cor0) ->
	case _cor0 of
	  <S = {'Set',_cor2,_cor3}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 552
	      'true'
	  %% Line 553
	  <S = {'OrdSet',_cor4,_cor5}> when ( 'true'
					      -| ['compiler_generated'] ) ->
	      %% Line 554
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_set',1}}] )
	    -| ['compiler_generated'] )
	end
'is_empty_set'/1 =
    %% Line 559
    fun (_cor0) ->
	case _cor0 of
	  <S = {'Set',_cor4,_cor5}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 560
	      call 'erlang':'=:='
		  (_cor4, [])
	  %% Line 561
	  <S = {'OrdSet',_cor8,_cor9}> when ( 'true'
					      -| ['compiler_generated'] ) ->
	      %% Line 562
	      'false'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'is_empty_set',1}}] )
	    -| ['compiler_generated'] )
	end
'is_disjoint'/2 =
    %% Line 568
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'Set',_cor14,_cor15},S2 = {'Set',_cor16,_cor17}> when 'true' ->
	      %% Line 569
	      case %% Line 2813
		   ( case <_cor15,_cor17> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( 'true'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2814
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( apply ( 'match_types1'/2
				       -| ['compiler_generated'] )
				   (( Type1
				      -| ['compiler_generated'] ), ( Type2
								     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 570
		<'true'> when 'true' ->
		    %% Line 571
		    case _cor14 of
		      %% Line 572
		      <[]> when 'true' ->
			  'true'
		      %% Line 573
		      <[A|As]> when 'true' ->
			  apply 'disjoint'/3
			      (_cor16, A, As)
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
		%% Line 575
		<'false'> when 'true' ->
		    call 'erlang':'error'
			('type_mismatch', [S1|[S2|[]]])
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'is_disjoint',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/1 =
    %% Line 585
    fun (_cor0) ->
	case _cor0 of
	  <Sets = {'Set',_cor8,_cor9}> when ( 'true'
					      -| ['compiler_generated'] ) ->
	      %% Line 586
	      case _cor9 of
		%% Line 587
		<[Type|[]]> when 'true' ->
		    let <_cor5> =
			apply 'lunion'/1
			    (_cor8)
		    in  {'Set',_cor5,Type}
		%% Line 588
		<'_'> when 'true' ->
		    Sets
		%% Line 589
		<_cor14> when 'true' ->
		    call 'erlang':'error'
			('badarg', [Sets|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'union',1}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/1 =
    %% Line 595
    fun (_cor0) ->
	case _cor0 of
	  <Sets = {'Set',_cor9,_cor10}> when ( 'true'
					       -| ['compiler_generated'] ) ->
	      %% Line 596
	      case _cor9 of
		%% Line 597
		<[]> when 'true' ->
		    call 'erlang':'error'
			('badarg', [Sets|[]])
		%% Line 598
		<[L|Ls]> when 'true' ->
		    %% Line 599
		    case _cor10 of
		      %% Line 600
		      <[Type|[]]> when 'true' ->
			  let <_cor5> =
			      %% Line 601
			      apply 'lintersection'/2
				  (Ls, L)
			  in  %% Line 601
			      {'Set',_cor5,Type}
		      %% Line 602
		      <_cor15> when 'true' ->
			  call 'erlang':'error'
			      ('badarg', [Sets|[]])
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'intersection',1}}] )
	    -| ['compiler_generated'] )
	end
'canonical_relation'/1 =
    %% Line 609
    fun (_cor0) ->
	case _cor0 of
	  <Sets = {'Set',_cor9,_cor10}> when ( 'true'
					       -| ['compiler_generated'] ) ->
	      %% Line 611
	      case _cor10 of
		%% Line 612
		<['_']> when 'true' ->
		    apply 'empty_set'/0
			()
		%% Line 613
		<[Type|[]]> when 'true' ->
		    let <_cor6> =
			%% Line 614
			apply 'can_rel'/2
			    (_cor9, [])
		    in  %% Line 614
			{'Set',_cor6,{Type,_cor10}}
		%% Line 615
		<'_'> when 'true' ->
		    Sets
		%% Line 616
		<_cor15> when 'true' ->
		    call 'erlang':'error'
			('badarg', [Sets|[]])
	      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'canonical_relation',1}}] )
	    -| ['compiler_generated'] )
	end
'rel2fam'/1 =
    %% Line 623
    fun (_cor0) ->
	%% Line 630
	( case _cor0 of
	    ( <( _fol363 = ( {( 'Set'
				-| ['compiler_generated'] ),( _cor8
							      -| ['compiler_generated'] ),( _cor9
											    -| ['compiler_generated'] )}
			     -| ['compiler_generated'] )
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  %% Line 631
		  ( case ( _cor9
			   -| ['compiler_generated'] ) of
		      %% Line 632
		      ( <( {( DT
			      -| ['compiler_generated'] ),( RT
							    -| ['compiler_generated'] )}
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_cor5> =
				  %% Line 633
				  ( apply ( 'rel2family'/1
					    -| ['compiler_generated'] )
					(( _cor8
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  %% Line 633
				  ( {( 'Set'
				       -| ['compiler_generated'] ),( _cor5
								     -| ['compiler_generated'] ),( {( DT
												      -| ['compiler_generated'] ),( [( RT
																       -| ['compiler_generated'] )|( []
																				     -| ['compiler_generated'] )]
																    -| ['compiler_generated'] )}
												   -| ['compiler_generated'] )}
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 634
		      ( <( '_'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    _fol363
			-| ['compiler_generated'] )
		      %% Line 635
		      ( <( _X_Else
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), ( [_fol363|( []
									       -| ['compiler_generated'] )]
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <( _cor7
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'function_clause'
			      -| ['compiler_generated'] ),( _cor7
							    -| ['compiler_generated'] )}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'relation_to_family'/1 =
    %% Line 630
    fun (_cor0) ->
	case _cor0 of
	  <R = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 631
	      case _cor9 of
		%% Line 632
		<{DT,RT}> when 'true' ->
		    let <_cor5> =
			%% Line 633
			apply 'rel2family'/1
			    (_cor8)
		    in  %% Line 633
			{'Set',_cor5,{DT,[RT|[]]}}
		%% Line 634
		<'_'> when 'true' ->
		    R
		%% Line 635
		<_X_Else> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'relation_to_family',1}}] )
	    -| ['compiler_generated'] )
	end
'domain'/1 =
    %% Line 641
    fun (_cor0) ->
	case _cor0 of
	  <R = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 642
	      case _cor9 of
		%% Line 643
		<{DT,_cor12}> when 'true' ->
		    let <_cor5> =
			apply 'dom'/1
			    (_cor8)
		    in  {'Set',_cor5,DT}
		%% Line 644
		<'_'> when 'true' ->
		    R
		%% Line 645
		<_X_Else> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'domain',1}}] )
	    -| ['compiler_generated'] )
	end
'range'/1 =
    %% Line 651
    fun (_cor0) ->
	case _cor0 of
	  <R = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 652
	      case _cor9 of
		%% Line 653
		<{_cor12,RT}> when 'true' ->
		    let <_cor5> =
			apply 'ran'/2
			    (_cor8, [])
		    in  {'Set',_cor5,RT}
		%% Line 654
		<'_'> when 'true' ->
		    R
		%% Line 655
		<_cor15> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'range',1}}] )
	    -| ['compiler_generated'] )
	end
'field'/1 =
    %% Line 664
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 665
	    apply 'domain'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 665
		apply 'range'/1
		    (_cor0)
	    in  %% Line 665
		apply 'union'/2
		    (_cor2, _cor1)
'relative_product'/1 =
    %% Line 673
    fun (_cor0) ->
	case _cor0 of
	  <RT>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 674
		  call 'erlang':'tuple_to_list'
		      (RT)
	      in  %% Line 674
		  apply 'relative_product'/1
		      (_cor1)
	  %% Line 675
	  <RL>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 676
	      case apply 'relprod_n'/4
		       (RL, 'foo', 'false', 'false') of
		%% Line 677
		<{'error',Reason}> when 'true' ->
		    %% Line 678
		    call 'erlang':'error'
			(Reason, [RL|[]])
		%% Line 679
		<Reply> when 'true' ->
		    %% Line 680
		    Reply
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'relative_product',1}}] )
	    -| ['compiler_generated'] )
	end
'relative_product'/2 =
    %% Line 692
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <R1 = {'Set',_cor16,_cor17},R2 = {'Set',_cor18,_cor19}> when 'true' ->
	      let <_cor2> =
		  %% Line 693
		  apply 'converse'/1
		      (R1)
	      in  %% Line 693
		  apply 'relative_product1'/2
		      (_cor2, R2)
	  %% Line 696
	  <RT,R = {'Set',_cor20,_cor21}>
	      when call 'erlang':'is_tuple'
		    (RT) ->
	      let <_cor4> =
		  %% Line 697
		  call 'erlang':'tuple_to_list'
		      (RT)
	      in  %% Line 697
		  apply 'relative_product'/2
		      (_cor4, R)
	  %% Line 698
	  <RL,R = {'Set',_cor22,_cor23}>
	      when call 'erlang':'is_list'
		    (RL) ->
	      let <_cor11> =
		  %% Line 699
		  case _cor23 of
		    %% Line 700
		    <{_cor26,_cor27}> when 'true' ->
			call 'erlang':'=:='
			    (_cor22, [])
		    %% Line 701
		    <'_'> when 'true' ->
			'true'
		    %% Line 702
		    <_cor30> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [RL|[R|[]]])
		  end
	      in  %% Line 704
		  case apply 'relprod_n'/4
			   (RL, R, _cor11, 'true') of
		    %% Line 705
		    <{'error',Reason}> when 'true' ->
			%% Line 706
			call 'erlang':'error'
			    (Reason, [RL|[R|[]]])
		    %% Line 707
		    <Reply> when 'true' ->
			%% Line 708
			Reply
		  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'relative_product',2}}] )
	    -| ['compiler_generated'] )
	end
'relative_product1'/2 =
    %% Line 715
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <R1 = {'Set',_cor20,_cor21},R2 = {'Set',_cor22,_cor23}> when 'true' ->
	      let <_cor5> =
		  %% Line 716
		  case _cor21 of
		    %% Line 717
		    <R1T = {_cor26,_cor27}> when 'true' ->
			R1T
		    %% Line 718
		    <'_'> when 'true' ->
			{'_','_'}
		    %% Line 719
		    <_cor28> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [R1|[R2|[]]])
		  end
	      in  %% Line 716
		  case _cor5 of
		    <{DTR1,RTR1}> when 'true' ->
			let <_cor10> =
			    %% Line 721
			    case _cor23 of
			      %% Line 722
			      <R2T = {_cor31,_cor32}> when 'true' ->
				  R2T
			      %% Line 723
			      <'_'> when 'true' ->
				  {'_','_'}
			      %% Line 724
			      <_cor33> when 'true' ->
				  call 'erlang':'error'
				      ('badarg', [R1|[R2|[]]])
			    end
			in  %% Line 721
			    case _cor10 of
			      <{DTR2,RTR2}> when 'true' ->
				  %% Line 726
				  case %% Line 2813
				       ( case <DTR1,DTR2> of
					   ( <( T
						-| ['compiler_generated'] ),( _cor4
									      -| ['compiler_generated'] )>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (( _cor4
							    -| ['compiler_generated'] ),
							  ( T
							    -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2814
					   ( <( Type1
						-| ['compiler_generated'] ),( Type2
									      -| ['compiler_generated'] )> when ( 'true'
														  -| ['compiler_generated'] ) ->
						 ( apply ( 'match_types1'/2
							   -| ['compiler_generated'] )
						       (( Type1
							  -| ['compiler_generated'] ), ( Type2
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 727
				    <'true'>
					when call 'erlang':'=:='
					      (DTR1,
					       '_') ->
					R1
				    %% Line 728
				    <'true'>
					when call 'erlang':'=:='
					      (DTR2,
					       '_') ->
					R2
				    %% Line 729
				    <'true'> when 'true' ->
					let <_cor16> =
					    apply 'relprod'/2
						(_cor20, _cor22)
					in  {'Set',_cor16,{RTR1,RTR2}}
				    %% Line 730
				    <'false'> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch', [R1|[R2|[]]])
				    ( <_cor17> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor17})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'relative_product1',2}}] )
	    -| ['compiler_generated'] )
	end
'converse'/1 =
    %% Line 736
    fun (_cor0) ->
	case _cor0 of
	  <R = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 737
	      case _cor9 of
		%% Line 738
		<{DT,RT}> when 'true' ->
		    let <_cor5> =
			apply 'converse'/2
			    (_cor8, [])
		    in  {'Set',_cor5,{RT,DT}}
		%% Line 739
		<'_'> when 'true' ->
		    R
		%% Line 740
		<_cor14> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'converse',1}}] )
	    -| ['compiler_generated'] )
	end
'image'/2 =
    %% Line 747
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <R = {'Set',_cor16,_cor17},S = {'Set',_cor18,_cor19}> when 'true' ->
	      %% Line 748
	      case _cor17 of
		%% Line 749
		<{DT,RT}> when 'true' ->
		    %% Line 750
		    case %% Line 2813
			 ( case <DT,_cor19> of
			     ( <( T
				  -| ['compiler_generated'] ),( _cor4
								-| ['compiler_generated'] )>
				   when ( call ( 'erlang'
					      -| ['compiler_generated'] ):( '=:='
									    -| ['compiler_generated'] )
					   (( _cor4
					      -| ['compiler_generated'] ),
					    ( T
					      -| ['compiler_generated'] ))
				       -| ['compiler_generated'] ) ->
				   ( 'true'
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			     %% Line 2814
			     ( <( Type1
				  -| ['compiler_generated'] ),( Type2
								-| ['compiler_generated'] )> when ( 'true'
												    -| ['compiler_generated'] ) ->
				   ( apply ( 'match_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			   end
			   -| ['compiler_generated'] ) of
		      %% Line 751
		      <'true'> when 'true' ->
			  let <_cor10> =
			      %% Line 752
			      apply 'restrict'/2
				  (_cor18, _cor16)
			  in  let <_cor11> =
				  %% Line 752
				  call 'lists':'usort'
				      (_cor10)
			      in  %% Line 752
				  {'Set',_cor11,RT}
		      %% Line 753
		      <'false'> when 'true' ->
			  %% Line 754
			  call 'erlang':'error'
			      ('type_mismatch', [R|[S|[]]])
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
		%% Line 756
		<'_'> when 'true' ->
		    R
		%% Line 757
		<_cor28> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[S|[]]])
	      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'image',2}}] )
	    -| ['compiler_generated'] )
	end
'inverse_image'/2 =
    %% Line 764
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <R = {'Set',_cor17,_cor18},S = {'Set',_cor19,_cor20}> when 'true' ->
	      %% Line 765
	      case _cor18 of
		%% Line 766
		<{DT,RT}> when 'true' ->
		    %% Line 767
		    case %% Line 2813
			 ( case <RT,_cor20> of
			     ( <( T
				  -| ['compiler_generated'] ),( _cor4
								-| ['compiler_generated'] )>
				   when ( call ( 'erlang'
					      -| ['compiler_generated'] ):( '=:='
									    -| ['compiler_generated'] )
					   (( _cor4
					      -| ['compiler_generated'] ),
					    ( T
					      -| ['compiler_generated'] ))
				       -| ['compiler_generated'] ) ->
				   ( 'true'
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			     %% Line 2814
			     ( <( Type1
				  -| ['compiler_generated'] ),( Type2
								-| ['compiler_generated'] )> when ( 'true'
												    -| ['compiler_generated'] ) ->
				   ( apply ( 'match_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			   end
			   -| ['compiler_generated'] ) of
		      %% Line 768
		      <'true'> when 'true' ->
			  let <_cor8> =
			      %% Line 769
			      apply 'converse'/2
				  (_cor17, [])
			  in  let <NL> =
				  %% Line 769
				  apply 'restrict'/2
				      (_cor19, _cor8)
			      in  let <_cor12> =
				      %% Line 770
				      call 'lists':'usort'
					  (NL)
				  in  %% Line 770
				      {'Set',_cor12,DT}
		      %% Line 771
		      <'false'> when 'true' ->
			  %% Line 772
			  call 'erlang':'error'
			      ('type_mismatch', [R|[S|[]]])
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor13})
			-| ['compiler_generated'] )
		    end
		%% Line 774
		<'_'> when 'true' ->
		    R
		%% Line 775
		<_cor29> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[S|[]]])
	      end
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'inverse_image',2}}] )
	    -| ['compiler_generated'] )
	end
'strict_relation'/1 =
    %% Line 781
    fun (_cor0) ->
	case _cor0 of
	  <R = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 782
	      case _cor9 of
		%% Line 783
		<Type = {_cor12,_cor13}> when 'true' ->
		    let <_cor5> =
			%% Line 784
			apply 'strict'/2
			    (_cor8, [])
		    in  %% Line 784
			{'Set',_cor5,Type}
		%% Line 785
		<'_'> when 'true' ->
		    R
		%% Line 786
		<_cor16> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'strict_relation',1}}] )
	    -| ['compiler_generated'] )
	end
'weak_relation'/1 =
    %% Line 792
    fun (_cor0) ->
	case _cor0 of
	  <R = {'Set',_cor9,_cor10}> when ( 'true'
					    -| ['compiler_generated'] ) ->
	      %% Line 793
	      case _cor10 of
		%% Line 794
		<{DT,RT}> when 'true' ->
		    %% Line 795
		    case %% Line 2789
			 ( case <DT,RT> of
			     ( <( T
				  -| ['compiler_generated'] ),( _cor4
								-| ['compiler_generated'] )>
				   when ( call ( 'erlang'
					      -| ['compiler_generated'] ):( '=:='
									    -| ['compiler_generated'] )
					   (( _cor4
					      -| ['compiler_generated'] ),
					    ( T
					      -| ['compiler_generated'] ))
				       -| ['compiler_generated'] ) ->
				   ( T
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			     %% Line 2790
			     ( <( Type1
				  -| ['compiler_generated'] ),( Type2
								-| ['compiler_generated'] )> when ( 'true'
												    -| ['compiler_generated'] ) ->
				   ( catch
					 %% Line 2791
					 ( apply ( 'unify_types1'/2
						   -| ['compiler_generated'] )
					       (( Type1
						  -| ['compiler_generated'] ), ( Type2
										 -| ['compiler_generated'] ))
					   -| ['compiler_generated'] )
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			   end
			   -| ['compiler_generated'] ) of
		      %% Line 796
		      <[]> when 'true' ->
			  %% Line 797
			  call 'erlang':'error'
			      ('badarg', [R|[]])
		      %% Line 798
		      <Type> when 'true' ->
			  let <_cor5> =
			      %% Line 799
			      apply 'weak'/1
				  (_cor9)
			  in  %% Line 799
			      {'Set',_cor5,{Type,Type}}
		    end
		%% Line 801
		<'_'> when 'true' ->
		    R
		%% Line 802
		<_cor15> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[]])
	      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'weak_relation',1}}] )
	    -| ['compiler_generated'] )
	end
'extension'/3 =
    %% Line 810
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <R = {'Set',_cor26,_cor27},S = {'Set',_cor28,_cor29},E> when 'true' ->
	      let <_cor3> =
		  %% Line 811
		  apply 'is_sofs_set'/1
		      (E)
	      in  %% Line 811
		  case <_cor27,_cor29,_cor3> of
		    %% Line 812
		    <T = {DT,RT},ST,'true'> when 'true' ->
			let <_cor10> =
			    %% Line 2813
			    ( case <DT,ST> of
				( <_fol511,( _cor4
					     -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=:='
									       -| ['compiler_generated'] )
					      (( _cor4
						 -| ['compiler_generated'] ),
					       _fol511)
					  -| ['compiler_generated'] ) ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 2814
				( <( Type1
				     -| ['compiler_generated'] ),( Type2
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
				      ( apply ( 'match_types1'/2
						-| ['compiler_generated'] )
					    (( Type1
					       -| ['compiler_generated'] ), ( Type2
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  let <_cor8> =
				%% Line 813
				apply 'type'/1
				    (E)
			    in  let <_cor9> =
				    %% Line 2813
				    ( case <RT,_cor8> of
					( <_fol514,( _cor4
						     -| ['compiler_generated'] )>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( '=:='
										       -| ['compiler_generated'] )
						      (( _cor4
							 -| ['compiler_generated'] ),
						       _fol514)
						  -| ['compiler_generated'] ) ->
					      ( 'true'
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 2814
					( <( Type1
					     -| ['compiler_generated'] ),( Type2
									   -| ['compiler_generated'] )> when ( 'true'
													       -| ['compiler_generated'] ) ->
					      ( apply ( 'match_types1'/2
							-| ['compiler_generated'] )
						    (( Type1
						       -| ['compiler_generated'] ), ( Type2
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  %% Line 813
				    case call 'erlang':'and'
					     (_cor10, _cor9) of
				      %% Line 814
				      <'false'> when 'true' ->
					  %% Line 815
					  call 'erlang':'error'
					      ('type_mismatch', [R|[S|[E|[]]]])
				      %% Line 816
				      <'true'> when 'true' ->
					  let <_cor14> =
					      %% Line 818
					      apply 'to_external'/1
						  (E)
					  in  %% Line 818
					      case apply 'extc'/4
						       ([], _cor28, _cor14, _cor26) of
						%% Line 819
						<[]> when 'true' ->
						    %% Line 820
						    R
						%% Line 821
						<L> when 'true' ->
						    let <_cor17> =
							%% Line 822
							call 'lists':'reverse'
							    (L)
						    in  let <_cor18> =
							    %% Line 822
							    call 'lists':'merge'
								(_cor26, _cor17)
							in  %% Line 822
							    {'Set',_cor18,T}
					      end
				    end
		    %% Line 825
		    <'_','_','true'> when 'true' ->
			%% Line 826
			R
		    %% Line 827
		    <'_',ST,'true'> when 'true' ->
			%% Line 828
			case apply 'type'/1
				 (E) of
			  %% Line 829
			  <['_']> when 'true' ->
			      %% Line 830
			      R
			  %% Line 831
			  <ET> when 'true' ->
			      %% Line 832
			      {'Set',[],{ST,ET}}
			end
		    %% Line 834
		    <_cor38,_cor39,'true'> when 'true' ->
			%% Line 835
			call 'erlang':'error'
			    ('badarg', [R|[S|[E|[]]]])
		    ( <_fol506,_fol507,_fol508> when 'true' ->
			  let <_cor22> = {_fol506,_fol507,_fol508}
			  in  primop 'match_fail'
				  ({'case_clause',_cor22})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'extension',3}}] )
	    -| ['compiler_generated'] )
	end
'is_a_function'/1 =
    %% Line 841
    fun (_cor0) ->
	case _cor0 of
	  <R = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 842
	      case _cor9 of
		%% Line 843
		<{_cor12,_cor13}> when 'true' ->
		    %% Line 844
		    case _cor8 of
		      %% Line 845
		      <[]> when 'true' ->
			  'true'
		      %% Line 846
		      <[{V,_cor16}|Es]> when 'true' ->
			  apply 'is_a_func'/2
			      (Es, V)
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 848
		<'_'> when 'true' ->
		    'true'
		%% Line 849
		<_cor17> when 'true' ->
		    call 'erlang':'error'
			('badarg', [R|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'is_a_function',1}}] )
	    -| ['compiler_generated'] )
	end
'restriction'/2 =
    %% Line 856
    fun (_cor1,_cor0) ->
	%% Line 857
	apply 'restriction'/3
	    (1, _cor1, _cor0)
'drestriction'/2 =
    %% Line 863
    fun (_cor1,_cor0) ->
	%% Line 864
	apply 'drestriction'/3
	    (1, _cor1, _cor0)
'composite'/2 =
    %% Line 874
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fn1 = {'Set',_cor21,_cor22},Fn2 = {'Set',_cor23,_cor24}> when 'true' ->
	      let <_cor5> =
		  %% Line 875
		  case _cor22 of
		    %% Line 876
		    <F1T = {_cor27,_cor28}> when 'true' ->
			F1T
		    %% Line 877
		    <'_'> when 'true' ->
			{'_','_'}
		    %% Line 878
		    <_cor29> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [Fn1|[Fn2|[]]])
		  end
	      in  %% Line 875
		  case _cor5 of
		    <{DTF1,RTF1}> when 'true' ->
			let <_cor10> =
			    %% Line 880
			    case _cor24 of
			      %% Line 881
			      <F2T = {_cor32,_cor33}> when 'true' ->
				  F2T
			      %% Line 882
			      <'_'> when 'true' ->
				  {'_','_'}
			      %% Line 883
			      <_cor34> when 'true' ->
				  call 'erlang':'error'
				      ('badarg', [Fn1|[Fn2|[]]])
			    end
			in  %% Line 880
			    case _cor10 of
			      <{DTF2,RTF2}> when 'true' ->
				  %% Line 885
				  case %% Line 2813
				       ( case <RTF1,DTF2> of
					   ( <( T
						-| ['compiler_generated'] ),( _cor4
									      -| ['compiler_generated'] )>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (( _cor4
							    -| ['compiler_generated'] ),
							  ( T
							    -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2814
					   ( <( Type1
						-| ['compiler_generated'] ),( Type2
									      -| ['compiler_generated'] )> when ( 'true'
														  -| ['compiler_generated'] ) ->
						 ( apply ( 'match_types1'/2
							   -| ['compiler_generated'] )
						       (( Type1
							  -| ['compiler_generated'] ), ( Type2
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 886
				    <'true'>
					when call 'erlang':'=:='
					      (DTF1,
					       '_') ->
					Fn1
				    %% Line 887
				    <'true'>
					when call 'erlang':'=:='
					      (DTF2,
					       '_') ->
					Fn2
				    %% Line 888
				    <'true'> when 'true' ->
					%% Line 889
					case apply 'comp'/2
						 (_cor21, _cor23) of
					  %% Line 890
					  <SL>
					      when call 'erlang':'is_list'
						    (SL) ->
					      let <_cor16> =
						  %% Line 891
						  call 'lists':'sort'
						      (SL)
					      in  %% Line 891
						  {'Set',_cor16,{DTF1,RTF2}}
					  %% Line 892
					  <Bad> when 'true' ->
					      %% Line 893
					      call 'erlang':'error'
						  (Bad, [Fn1|[Fn2|[]]])
					end
				    %% Line 895
				    <'false'> when 'true' ->
					call 'erlang':'error'
					    ('type_mismatch', [Fn1|[Fn2|[]]])
				    ( <_cor18> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor18})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'composite',2}}] )
	    -| ['compiler_generated'] )
	end
'inverse'/1 =
    %% Line 901
    fun (_cor0) ->
	case _cor0 of
	  <Fn = {'Set',_cor8,_cor9}> when ( 'true'
					    -| ['compiler_generated'] ) ->
	      %% Line 902
	      case _cor9 of
		%% Line 903
		<{DT,RT}> when 'true' ->
		    %% Line 904
		    case apply 'inverse1'/1
			     (_cor8) of
		      %% Line 905
		      <SL>
			  when call 'erlang':'is_list'
				(SL) ->
			  %% Line 906
			  {'Set',SL,{RT,DT}}
		      %% Line 907
		      <Bad> when 'true' ->
			  %% Line 908
			  call 'erlang':'error'
			      (Bad, [Fn|[]])
		    end
		%% Line 910
		<'_'> when 'true' ->
		    Fn
		%% Line 911
		<_cor14> when 'true' ->
		    call 'erlang':'error'
			('badarg', [Fn|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'inverse',1}}] )
	    -| ['compiler_generated'] )
	end
'restriction'/3 =
    %% Line 924
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,R = {'Set',_cor55,_cor56},S = {'Set',_cor57,_cor58}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 927
	      case apply 'check_for_sort'/2
		       (_cor56, I) of
		%% Line 928
		<'empty'> when 'true' ->
		    %% Line 929
		    R
		%% Line 930
		<'error'> when 'true' ->
		    %% Line 931
		    call 'erlang':'error'
			('badarg', [I|[R|[S|[]]]])
		%% Line 932
		<Sort> when 'true' ->
		    let <_cor16> =
			%% Line 934
			call 'erlang':'element'
			    (I, _cor56)
		    in  let <_cor17> =
			    %% Line 2813
			    ( case <_cor16,_cor58> of
				( <( T
				     -| ['compiler_generated'] ),( _cor4
								   -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=:='
									       -| ['compiler_generated'] )
					      (( _cor4
						 -| ['compiler_generated'] ),
					       ( T
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 2814
				( <( Type1
				     -| ['compiler_generated'] ),( Type2
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
				      ( apply ( 'match_types1'/2
						-| ['compiler_generated'] )
					    (( Type1
					       -| ['compiler_generated'] ), ( Type2
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 934
			    case <_cor17,_cor57> of
			      %% Line 935
			      <'true',_X_SL>
				  when call 'erlang':'=:='
					(_cor55,
					 []) ->
				  %% Line 936
				  R
			      %% Line 937
			      <'true',[]> when 'true' ->
				  %% Line 938
				  {'Set',[],_cor56}
			      %% Line 939
			      <'true',[E|Es]>
				  when call 'erlang':'=:='
					(Sort,
					 'false') ->
				  let <_cor18> =
				      %% Line 940
				      apply 'restrict_n'/5
					  (I, _cor55, E, Es, [])
				  in  let <_cor19> =
					  %% Line 940
					  call 'lists':'reverse'
					      (_cor18)
				      in  %% Line 940
					  {'Set',_cor19,_cor56}
			      %% Line 941
			      <'true',[E|Es]> when 'true' ->
				  let <_cor20> =
				      %% Line 942
				      call 'lists':'keysort'
					  (I, _cor55)
				  in  let <_cor21> =
					  %% Line 942
					  apply 'restrict_n'/5
					      (I, _cor20, E, Es, [])
				      in  let <_cor22> =
					      %% Line 942
					      call 'lists':'sort'
						  (_cor21)
					  in  %% Line 942
					      {'Set',_cor22,_cor56}
			      %% Line 943
			      <'false',_X_SL> when 'true' ->
				  %% Line 944
				  call 'erlang':'error'
				      ('type_mismatch', [I|[R|[S|[]]]])
			      ( <_fol581,_fol582> when 'true' ->
				    let <_cor23> = {_fol581,_fol582}
				    in  primop 'match_fail'
					    ({'case_clause',_cor23})
				-| ['compiler_generated'] )
			    end
	      end
	  %% Line 947
	  <SetFun,S1 = {'Set',_cor67,_cor68},S2 = {'Set',_cor69,_cor70}> when 'true' ->
	      %% Line 951
	      case %% Line 2378
		   ( case SetFun of
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Function
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'is_atom'
								      -| ['compiler_generated'] )
				     (( Function
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     %% Line 2379
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2380
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Fun
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2381
			     ( Fun
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2382
		       ( <( _cor2
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2383
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 952
		<'false'>
		    when call 'erlang':'=:='
			  (_cor70,
			   '_') ->
		    %% Line 953
		    S2
		%% Line 954
		<'false'> when 'true' ->
		    let <_cor34> =
			%% Line 2386
			( case _cor68 of
			    ( <( [( Type
				    -| ['compiler_generated'] )|( []
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( Type
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 2387
			    ( <( Type
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( Type
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 955
			case %% Line 2390
			     ( apply ( 'subst'/5
				       -| ['compiler_generated'] )
				   (_cor67, SetFun, _cor34, ( '_'
							      -| ['compiler_generated'] ), ( []
											     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ) of
			  %% Line 956
			  <{NSL,NewType}> when 'true' ->
			      %% Line 957
			      case %% Line 2813
				   ( case <NewType,_cor70> of
				       ( <( T
					    -| ['compiler_generated'] ),( _cor4
									  -| ['compiler_generated'] )>
					     when ( call ( 'erlang'
							-| ['compiler_generated'] ):( '=:='
										      -| ['compiler_generated'] )
						     (( _cor4
							-| ['compiler_generated'] ),
						      ( T
							-| ['compiler_generated'] ))
						 -| ['compiler_generated'] ) ->
					     ( 'true'
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				       %% Line 2814
				       ( <( Type1
					    -| ['compiler_generated'] ),( Type2
									  -| ['compiler_generated'] )> when ( 'true'
													      -| ['compiler_generated'] ) ->
					     ( apply ( 'match_types1'/2
						       -| ['compiler_generated'] )
						   (( Type1
						      -| ['compiler_generated'] ), ( Type2
										     -| ['compiler_generated'] ))
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				     end
				     -| ['compiler_generated'] ) of
				%% Line 958
				<'true'> when 'true' ->
				    let <_cor35> =
					%% Line 959
					apply 'converse'/2
					    (NSL, [])
				    in  let <_cor38> =
					    %% Line 959
					    apply 'restrict'/2
						(_cor69, _cor35)
					in  let <NL> =
						%% Line 959
						call 'lists':'sort'
						    (_cor38)
					    in  %% Line 960
						{'Set',NL,_cor68}
				%% Line 961
				<'false'> when 'true' ->
				    %% Line 962
				    call 'erlang':'error'
					('type_mismatch', [SetFun|[S1|[S2|[]]]])
				( <_cor40> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor40})
				  -| ['compiler_generated'] )
			      end
			  %% Line 964
			  <Bad> when 'true' ->
			      %% Line 965
			      call 'erlang':'error'
				  (Bad, [SetFun|[S1|[S2|[]]]])
			end
		%% Line 967
		<_cor79>
		    when call 'erlang':'=:='
			  (_cor68,
			   '_') ->
		    %% Line 968
		    S1
		%% Line 969
		<_X_XFun>
		    when call 'erlang':'is_list'
			  (_cor68) ->
		    %% Line 970
		    call 'erlang':'error'
			('badarg', [SetFun|[S1|[S2|[]]]])
		%% Line 971
		<XFun> when 'true' ->
		    let <FunT> =
			%% Line 972
			apply XFun
			    (_cor68)
		    in  let <_cor43> =
			    catch
				%% Line 973
				apply 'check_fun'/3
				    (_cor68, XFun, FunT)
			in  %% Line 973
			    case _cor43 of
			      %% Line 974
			      <{'EXIT',_cor80}> when 'true' ->
				  %% Line 975
				  call 'erlang':'error'
				      ('badarg', [SetFun|[S1|[S2|[]]]])
			      %% Line 976
			      <Sort> when 'true' ->
				  %% Line 977
				  case %% Line 2813
				       ( case <FunT,_cor70> of
					   ( <( T
						-| ['compiler_generated'] ),( _cor4
									      -| ['compiler_generated'] )>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (( _cor4
							    -| ['compiler_generated'] ),
							  ( T
							    -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2814
					   ( <( Type1
						-| ['compiler_generated'] ),( Type2
									      -| ['compiler_generated'] )> when ( 'true'
														  -| ['compiler_generated'] ) ->
						 ( apply ( 'match_types1'/2
							   -| ['compiler_generated'] )
						       (( Type1
							  -| ['compiler_generated'] ), ( Type2
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 978
				    <'true'> when 'true' ->
					let <R1> =
					    %% Line 979
					    apply 'inverse_substitution'/3
						(_cor67, XFun, Sort)
					in  let <_cor47> =
						%% Line 980
						apply 'restrict'/2
						    (_cor69, R1)
					    in  let <_cor48> =
						    %% Line 980
						    apply 'sort'/2
							(Sort, _cor47)
						in  %% Line 980
						    {'Set',_cor48,_cor68}
				    %% Line 981
				    <'false'> when 'true' ->
					%% Line 982
					call 'erlang':'error'
					    ('type_mismatch', [SetFun|[S1|[S2|[]]]])
				    ( <_cor49> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor49})
				      -| ['compiler_generated'] )
				  end
			    end
	      end
	  ( <_cor54,_cor53,_cor52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52})
		  -| [{'function_name',{'restriction',3}}] )
	    -| ['compiler_generated'] )
	end
'drestriction'/3 =
    %% Line 992
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,R = {'Set',_cor55,_cor56},S = {'Set',_cor57,_cor58}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 995
	      case apply 'check_for_sort'/2
		       (_cor56, I) of
		%% Line 996
		<'empty'> when 'true' ->
		    %% Line 997
		    R
		%% Line 998
		<'error'> when 'true' ->
		    %% Line 999
		    call 'erlang':'error'
			('badarg', [I|[R|[S|[]]]])
		%% Line 1000
		<Sort> when 'true' ->
		    let <_cor16> =
			%% Line 1002
			call 'erlang':'element'
			    (I, _cor56)
		    in  let <_cor17> =
			    %% Line 2813
			    ( case <_cor16,_cor58> of
				( <( T
				     -| ['compiler_generated'] ),( _cor4
								   -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=:='
									       -| ['compiler_generated'] )
					      (( _cor4
						 -| ['compiler_generated'] ),
					       ( T
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 2814
				( <( Type1
				     -| ['compiler_generated'] ),( Type2
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
				      ( apply ( 'match_types1'/2
						-| ['compiler_generated'] )
					    (( Type1
					       -| ['compiler_generated'] ), ( Type2
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 1002
			    case <_cor17,_cor57> of
			      %% Line 1003
			      <'true',[]> when 'true' ->
				  %% Line 1004
				  R
			      %% Line 1005
			      <'true',_X_SL>
				  when call 'erlang':'=:='
					(_cor55,
					 []) ->
				  %% Line 1006
				  R
			      %% Line 1007
			      <'true',[E|Es]>
				  when call 'erlang':'=:='
					(Sort,
					 'false') ->
				  let <_cor18> =
				      %% Line 1008
				      apply 'diff_restrict_n'/5
					  (I, _cor55, E, Es, [])
				  in  %% Line 1008
				      {'Set',_cor18,_cor56}
			      %% Line 1009
			      <'true',[E|Es]> when 'true' ->
				  let <_cor19> =
				      %% Line 1010
				      call 'lists':'keysort'
					  (I, _cor55)
				  in  let <_cor20> =
					  %% Line 1010
					  apply 'diff_restrict_n'/5
					      (I, _cor19, E, Es, [])
				      in  %% Line 1010
					  {'Set',_cor20,_cor56}
			      %% Line 1011
			      <'false',_X_SL> when 'true' ->
				  %% Line 1012
				  call 'erlang':'error'
				      ('type_mismatch', [I|[R|[S|[]]]])
			      ( <_fol634,_fol635> when 'true' ->
				    let <_cor21> = {_fol634,_fol635}
				    in  primop 'match_fail'
					    ({'case_clause',_cor21})
				-| ['compiler_generated'] )
			    end
	      end
	  %% Line 1015
	  <SetFun,S1 = {'Set',_cor67,_cor68},S2 = {'Set',_cor69,_cor70}> when 'true' ->
	      %% Line 1019
	      case %% Line 2378
		   ( case SetFun of
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Function
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'is_atom'
								      -| ['compiler_generated'] )
				     (( Function
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     %% Line 2379
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2380
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Fun
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2381
			     ( Fun
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2382
		       ( <( _cor2
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2383
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1020
		<'false'>
		    when call 'erlang':'=:='
			  (_cor70,
			   '_') ->
		    %% Line 1021
		    S1
		%% Line 1022
		<'false'> when 'true' ->
		    let <_cor32> =
			%% Line 2386
			( case _cor68 of
			    ( <( [( Type
				    -| ['compiler_generated'] )|( []
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( Type
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 2387
			    ( <( Type
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( Type
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 1023
			case %% Line 2390
			     ( apply ( 'subst'/5
				       -| ['compiler_generated'] )
				   (_cor67, SetFun, _cor32, ( '_'
							      -| ['compiler_generated'] ), ( []
											     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ) of
			  %% Line 1024
			  <{NSL,NewType}> when 'true' ->
			      %% Line 1025
			      case %% Line 2813
				   ( case <NewType,_cor70> of
				       ( <( T
					    -| ['compiler_generated'] ),( _cor4
									  -| ['compiler_generated'] )>
					     when ( call ( 'erlang'
							-| ['compiler_generated'] ):( '=:='
										      -| ['compiler_generated'] )
						     (( _cor4
							-| ['compiler_generated'] ),
						      ( T
							-| ['compiler_generated'] ))
						 -| ['compiler_generated'] ) ->
					     ( 'true'
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				       %% Line 2814
				       ( <( Type1
					    -| ['compiler_generated'] ),( Type2
									  -| ['compiler_generated'] )> when ( 'true'
													      -| ['compiler_generated'] ) ->
					     ( apply ( 'match_types1'/2
						       -| ['compiler_generated'] )
						   (( Type1
						      -| ['compiler_generated'] ), ( Type2
										     -| ['compiler_generated'] ))
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				     end
				     -| ['compiler_generated'] ) of
				%% Line 1026
				<'true'> when 'true' ->
				    let <_cor36> =
					%% Line 1028
					apply 'converse'/2
					    (NSL, [])
				    in  let <_cor37> =
					    %% Line 1028
					    apply 'diff_restrict'/2
						(_cor69, _cor36)
					in  let <NL> =
						%% Line 1028
						call 'lists':'sort'
						    (_cor37)
					    in  %% Line 1029
						{'Set',NL,_cor68}
				%% Line 1030
				<'false'> when 'true' ->
				    %% Line 1031
				    call 'erlang':'error'
					('type_mismatch', [SetFun|[S1|[S2|[]]]])
				( <_cor39> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor39})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1033
			  <Bad> when 'true' ->
			      %% Line 1034
			      call 'erlang':'error'
				  (Bad, [SetFun|[S1|[S2|[]]]])
			end
		%% Line 1036
		<_cor79>
		    when call 'erlang':'=:='
			  (_cor68,
			   '_') ->
		    %% Line 1037
		    S1
		%% Line 1038
		<_X_XFun>
		    when call 'erlang':'is_list'
			  (_cor68) ->
		    %% Line 1039
		    call 'erlang':'error'
			('badarg', [SetFun|[S1|[S2|[]]]])
		%% Line 1040
		<XFun> when 'true' ->
		    let <FunT> =
			%% Line 1041
			apply XFun
			    (_cor68)
		    in  let <_cor42> =
			    catch
				%% Line 1042
				apply 'check_fun'/3
				    (_cor68, XFun, FunT)
			in  %% Line 1042
			    case _cor42 of
			      %% Line 1043
			      <{'EXIT',_cor80}> when 'true' ->
				  %% Line 1044
				  call 'erlang':'error'
				      ('badarg', [SetFun|[S1|[S2|[]]]])
			      %% Line 1045
			      <Sort> when 'true' ->
				  %% Line 1046
				  case %% Line 2813
				       ( case <FunT,_cor70> of
					   ( <( T
						-| ['compiler_generated'] ),( _cor4
									      -| ['compiler_generated'] )>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (( _cor4
							    -| ['compiler_generated'] ),
							  ( T
							    -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2814
					   ( <( Type1
						-| ['compiler_generated'] ),( Type2
									      -| ['compiler_generated'] )> when ( 'true'
														  -| ['compiler_generated'] ) ->
						 ( apply ( 'match_types1'/2
							   -| ['compiler_generated'] )
						       (( Type1
							  -| ['compiler_generated'] ), ( Type2
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 1047
				    <'true'> when 'true' ->
					let <R1> =
					    %% Line 1048
					    apply 'inverse_substitution'/3
						(_cor67, XFun, Sort)
					in  let <_cor47> =
						%% Line 1050
						apply 'diff_restrict'/2
						    (_cor69, R1)
					    in  let <_cor48> =
						    %% Line 1050
						    apply 'sort'/2
							(Sort, _cor47)
						in  %% Line 1050
						    {'Set',_cor48,_cor68}
				    %% Line 1051
				    <'false'> when 'true' ->
					%% Line 1052
					call 'erlang':'error'
					    ('type_mismatch', [SetFun|[S1|[S2|[]]]])
				    ( <_cor49> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor49})
				      -| ['compiler_generated'] )
				  end
			    end
	      end
	  ( <_cor54,_cor53,_cor52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52})
		  -| [{'function_name',{'drestriction',3}}] )
	    -| ['compiler_generated'] )
	end
'projection'/2 =
    %% Line 1061
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,Set = {'Set',_cor18,_cor19}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1063
	      case apply 'check_for_sort'/2
		       (_cor19, I) of
		%% Line 1064
		<'empty'> when 'true' ->
		    %% Line 1065
		    Set
		%% Line 1066
		<'error'> when 'true' ->
		    %% Line 1067
		    call 'erlang':'error'
			('badarg', [I|[Set|[]]])
		%% Line 1068
		<_cor22>
		    when call 'erlang':'=:='
			  (I,
			   1) ->
		    let <_cor9> =
			%% Line 1069
			apply 'projection1'/1
			    (_cor18)
		    in  let <_cor6> =
			    %% Line 1069
			    call 'erlang':'element'
				(I, _cor19)
			in  %% Line 1069
			    {'Set',_cor9,_cor6}
		%% Line 1070
		<_cor25> when 'true' ->
		    let <_cor13> =
			%% Line 1071
			apply 'projection_n'/3
			    (_cor18, I, [])
		    in  let <_cor10> =
			    %% Line 1071
			    call 'erlang':'element'
				(I, _cor19)
			in  %% Line 1071
			    {'Set',_cor13,_cor10}
	      end
	  %% Line 1073
	  <Fun,Set> when 'true' ->
	      let <_cor15> =
		  %% Line 1074
		  apply 'substitution'/2
		      (Fun, Set)
	      in  %% Line 1074
		  apply 'range'/1
		      (_cor15)
	end
'substitution'/2 =
    %% Line 1080
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,Set = {'Set',_cor27,_cor28}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1082
	      case apply 'check_for_sort'/2
		       (_cor28, I) of
		%% Line 1083
		<'empty'> when 'true' ->
		    %% Line 1084
		    Set
		%% Line 1085
		<'error'> when 'true' ->
		    %% Line 1086
		    call 'erlang':'error'
			('badarg', [I|[Set|[]]])
		%% Line 1087
		<_X_Sort> when 'true' ->
		    let <NType> =
			%% Line 1088
			call 'erlang':'element'
			    (I, _cor28)
		    in  let <NSL> =
			    %% Line 1089
			    apply 'substitute_element'/3
				(_cor27, I, [])
			in  %% Line 1090
			    {'Set',NSL,{_cor28,NType}}
	      end
	  %% Line 1092
	  <SetFun,Set = {'Set',_cor33,_cor34}> when ( 'true'
						      -| ['compiler_generated'] ) ->
	      %% Line 1095
	      case %% Line 2378
		   ( case SetFun of
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Function
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'is_atom'
								      -| ['compiler_generated'] )
				     (( Function
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     %% Line 2379
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2380
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Fun
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2381
			     ( Fun
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2382
		       ( <( _cor2
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2383
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1096
		<'false'>
		    when call 'erlang':'=/='
			  (_cor33,
			   []) ->
		    let <_cor17> =
			%% Line 2386
			( case _cor34 of
			    ( <( [_fol711|( []
					    -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  _fol711
			      -| ['compiler_generated'] )
			    %% Line 2387
			    ( <_fol712> when ( 'true'
					       -| ['compiler_generated'] ) ->
				  _fol712
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 1097
			case %% Line 2390
			     ( apply ( 'subst'/5
				       -| ['compiler_generated'] )
				   (_cor33, SetFun, _cor17, ( '_'
							      -| ['compiler_generated'] ), ( []
											     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ) of
			  %% Line 1098
			  <{SL,NewType}> when 'true' ->
			      let <_cor18> =
				  %% Line 1099
				  call 'lists':'reverse'
				      (SL)
			      in  %% Line 1099
				  {'Set',_cor18,{_cor34,NewType}}
			  %% Line 1100
			  <Bad> when 'true' ->
			      %% Line 1101
			      call 'erlang':'error'
				  (Bad, [SetFun|[Set|[]]])
			end
		%% Line 1103
		<'false'> when 'true' ->
		    %% Line 1104
		    apply 'empty_set'/0
			()
		%% Line 1105
		<_cor39>
		    when call 'erlang':'=:='
			  (_cor34,
			   '_') ->
		    %% Line 1106
		    apply 'empty_set'/0
			()
		%% Line 1107
		<_X_XFun>
		    when call 'erlang':'is_list'
			  (_cor34) ->
		    %% Line 1108
		    call 'erlang':'error'
			('badarg', [SetFun|[Set|[]]])
		%% Line 1109
		<XFun> when 'true' ->
		    let <FunT> =
			%% Line 1110
			apply XFun
			    (_cor34)
		    in  let <_cor21> =
			    catch
				%% Line 1111
				apply 'check_fun'/3
				    (_cor34, XFun, FunT)
			in  %% Line 1111
			    case _cor21 of
			      %% Line 1112
			      <{'EXIT',_cor40}> when 'true' ->
				  %% Line 1113
				  call 'erlang':'error'
				      ('badarg', [SetFun|[Set|[]]])
			      %% Line 1114
			      <_X_Sort> when 'true' ->
				  let <SL> =
				      %% Line 1115
				      apply 'substitute'/3
					  (_cor33, XFun, [])
				  in  %% Line 1116
				      {'Set',SL,{_cor34,FunT}}
			    end
	      end
	  ( <_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25})
		  -| [{'function_name',{'substitution',2}}] )
	    -| ['compiler_generated'] )
	end
'partition'/1 =
    %% Line 1123
    fun (_cor0) ->
	( case %% Line 1124
	       apply 'canonical_relation'/1
		   (_cor0) of
	    ( <( ( R
		   -| ['compiler_generated'] ) = ( {( 'Set'
						      -| ['compiler_generated'] ),( _cor8
										    -| ['compiler_generated'] ),( _cor9
														  -| ['compiler_generated'] )}
						   -| ['compiler_generated'] )
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  let <F1> =
		      ( case ( _cor9
			       -| ['compiler_generated'] ) of
			  ( <( {( DT
				  -| ['compiler_generated'] ),( RT
								-| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_cor5> =
				      ( apply ( 'rel2family'/1
						-| ['compiler_generated'] )
					    (( _cor8
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  ( {( 'Set'
					   -| ['compiler_generated'] ),( _cor5
									 -| ['compiler_generated'] ),( {( DT
													  -| ['compiler_generated'] ),( [( RT
																	   -| ['compiler_generated'] )|( []
																					 -| ['compiler_generated'] )]
																	-| ['compiler_generated'] )}
												       -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( '_'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( R
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _X_Else
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( 'badarg'
					 -| ['compiler_generated'] ), ( [( R
									   -| ['compiler_generated'] )|( []
													 -| ['compiler_generated'] )]
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  ( case %% Line 1125
			     apply 'converse'/1
				 (F1) of
			  ( <( ( R
				 -| ['compiler_generated'] ) = ( {( 'Set'
								    -| ['compiler_generated'] ),( _cor8
												  -| ['compiler_generated'] ),( _cor9
																-| ['compiler_generated'] )}
								 -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				let <F2> =
				    ( case ( _cor9
					     -| ['compiler_generated'] ) of
					( <( {( DT
						-| ['compiler_generated'] ),( RT
									      -| ['compiler_generated'] )}
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( let <_cor5> =
						    ( apply ( 'rel2family'/1
							      -| ['compiler_generated'] )
							  (( _cor8
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  ( {( 'Set'
							 -| ['compiler_generated'] ),( _cor5
										       -| ['compiler_generated'] ),( {( DT
															-| ['compiler_generated'] ),( [( RT
																			 -| ['compiler_generated'] )|( []
																						       -| ['compiler_generated'] )]
																		      -| ['compiler_generated'] )}
														     -| ['compiler_generated'] )}
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <( '_'
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( R
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <( _X_Else
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( 'badarg'
						       -| ['compiler_generated'] ), ( [( R
											 -| ['compiler_generated'] )|( []
														       -| ['compiler_generated'] )]
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  %% Line 1126
				    apply 'range'/1
					(F2)
			    -| ['compiler_generated'] )
			  ( <( _cor7
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( primop ( 'match_fail'
					   -| ['compiler_generated'] )
				      (( {( 'function_clause'
					    -| ['compiler_generated'] ),( _cor7
									  -| ['compiler_generated'] )}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <( _cor7
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'function_clause'
			      -| ['compiler_generated'] ),( _cor7
							    -| ['compiler_generated'] )}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'partition'/2 =
    %% Line 1132
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,Set = {'Set',_cor17,_cor18}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1134
	      case apply 'check_for_sort'/2
		       (_cor18, I) of
		%% Line 1135
		<'empty'> when 'true' ->
		    %% Line 1136
		    Set
		%% Line 1137
		<'error'> when 'true' ->
		    %% Line 1138
		    call 'erlang':'error'
			('badarg', [I|[Set|[]]])
		%% Line 1139
		<'false'> when 'true' ->
		    let <_cor8> =
			%% Line 1140
			apply 'partition_n'/2
			    (I, _cor17)
		    in  %% Line 1140
			{'Set',_cor8,[_cor18|[]]}
		%% Line 1141
		<'true'> when 'true' ->
		    let <_cor11> =
			%% Line 1142
			call 'lists':'keysort'
			    (I, _cor17)
		    in  let <_cor12> =
			    %% Line 1142
			    apply 'partition_n'/2
				(I, _cor11)
			in  %% Line 1142
			    {'Set',_cor12,[_cor18|[]]}
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1144
	  <Fun,Set> when 'true' ->
	      let <_cor14> =
		  %% Line 1145
		  apply 'partition_family'/2
		      (Fun, Set)
	      in  %% Line 1145
		  apply 'range'/1
		      (_cor14)
	end
'partition'/3 =
    %% Line 1153
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,R = {'Set',_cor55,_cor56},S = {'Set',_cor57,_cor58}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1156
	      case apply 'check_for_sort'/2
		       (_cor56, I) of
		%% Line 1157
		<'empty'> when 'true' ->
		    %% Line 1158
		    {R,R}
		%% Line 1159
		<'error'> when 'true' ->
		    %% Line 1160
		    call 'erlang':'error'
			('badarg', [I|[R|[S|[]]]])
		%% Line 1161
		<Sort> when 'true' ->
		    let <_cor16> =
			%% Line 1163
			call 'erlang':'element'
			    (I, _cor56)
		    in  let <_cor17> =
			    %% Line 2813
			    ( case <_cor16,_cor58> of
				( <( T
				     -| ['compiler_generated'] ),( _cor4
								   -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=:='
									       -| ['compiler_generated'] )
					      (( _cor4
						 -| ['compiler_generated'] ),
					       ( T
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      ( 'true'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 2814
				( <( Type1
				     -| ['compiler_generated'] ),( Type2
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
				      ( apply ( 'match_types1'/2
						-| ['compiler_generated'] )
					    (( Type1
					       -| ['compiler_generated'] ), ( Type2
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 1163
			    case <_cor17,_cor57> of
			      %% Line 1164
			      <'true',_X_SL>
				  when call 'erlang':'=:='
					(_cor55,
					 []) ->
				  %% Line 1165
				  {R,R}
			      %% Line 1166
			      <'true',[]> when 'true' ->
				  %% Line 1167
				  {{'Set',[],_cor56},R}
			      %% Line 1168
			      <'true',[E|Es]>
				  when call 'erlang':'=:='
					(Sort,
					 'false') ->
				  %% Line 1169
				  case apply 'partition3_n'/6
					   (I, _cor55, E, Es, [], []) of
				    <[L1|L2]> when 'true' ->
					%% Line 1170
					{{'Set',L1,_cor56},{'Set',L2,_cor56}}
				    ( <_cor18> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor18})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1171
			      <'true',[E|Es]> when 'true' ->
				  let <_cor19> =
				      %% Line 1172
				      call 'lists':'keysort'
					  (I, _cor55)
				  in  %% Line 1172
				      case apply 'partition3_n'/6
					       (I, _cor19, E, Es, [], []) of
					<[L1|L2]> when 'true' ->
					    %% Line 1173
					    {{'Set',L1,_cor56},{'Set',L2,_cor56}}
					( <_cor20> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor20})
					  -| ['compiler_generated'] )
				      end
			      %% Line 1174
			      <'false',_X_SL> when 'true' ->
				  %% Line 1175
				  call 'erlang':'error'
				      ('type_mismatch', [I|[R|[S|[]]]])
			      ( <_fol766,_fol767> when 'true' ->
				    let <_cor21> = {_fol766,_fol767}
				    in  primop 'match_fail'
					    ({'case_clause',_cor21})
				-| ['compiler_generated'] )
			    end
	      end
	  %% Line 1178
	  <SetFun,S1 = {'Set',_cor67,_cor68},S2 = {'Set',_cor69,_cor70}> when 'true' ->
	      %% Line 1182
	      case %% Line 2378
		   ( case SetFun of
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Function
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'is_atom'
								      -| ['compiler_generated'] )
				     (( Function
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     %% Line 2379
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2380
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Fun
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2381
			     ( Fun
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2382
		       ( <( _cor2
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2383
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1183
		<'false'>
		    when call 'erlang':'=:='
			  (_cor70,
			   '_') ->
		    %% Line 1184
		    {S2,S1}
		%% Line 1185
		<'false'> when 'true' ->
		    let <_cor32> =
			%% Line 2386
			( case _cor68 of
			    ( <( [( Type
				    -| ['compiler_generated'] )|( []
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( Type
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 2387
			    ( <( Type
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( Type
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 1186
			case %% Line 2390
			     ( apply ( 'subst'/5
				       -| ['compiler_generated'] )
				   (_cor67, SetFun, _cor32, ( '_'
							      -| ['compiler_generated'] ), ( []
											     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ) of
			  %% Line 1187
			  <{NSL,NewType}> when 'true' ->
			      %% Line 1188
			      case %% Line 2813
				   ( case <NewType,_cor70> of
				       ( <( T
					    -| ['compiler_generated'] ),( _cor4
									  -| ['compiler_generated'] )>
					     when ( call ( 'erlang'
							-| ['compiler_generated'] ):( '=:='
										      -| ['compiler_generated'] )
						     (( _cor4
							-| ['compiler_generated'] ),
						      ( T
							-| ['compiler_generated'] ))
						 -| ['compiler_generated'] ) ->
					     ( 'true'
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				       %% Line 2814
				       ( <( Type1
					    -| ['compiler_generated'] ),( Type2
									  -| ['compiler_generated'] )> when ( 'true'
													      -| ['compiler_generated'] ) ->
					     ( apply ( 'match_types1'/2
						       -| ['compiler_generated'] )
						   (( Type1
						      -| ['compiler_generated'] ), ( Type2
										     -| ['compiler_generated'] ))
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				     end
				     -| ['compiler_generated'] ) of
				%% Line 1189
				<'true'> when 'true' ->
				    let <R1> =
					%% Line 1190
					apply 'converse'/2
					    (NSL, [])
				    in  %% Line 1191
					case apply 'partition3'/2
						 (_cor69, R1) of
					  <[L1|L2]> when 'true' ->
					      let <_cor38> =
						  %% Line 1192
						  call 'lists':'sort'
						      (L1)
					      in  let <_cor37> =
						      %% Line 1192
						      call 'lists':'sort'
							  (L2)
						  in  %% Line 1192
						      {{'Set',_cor38,_cor68},{'Set',_cor37,_cor68}}
					  ( <_cor36> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor36})
					    -| ['compiler_generated'] )
					end
				%% Line 1193
				<'false'> when 'true' ->
				    %% Line 1194
				    call 'erlang':'error'
					('type_mismatch', [SetFun|[S1|[S2|[]]]])
				( <_cor39> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor39})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1196
			  <Bad> when 'true' ->
			      %% Line 1197
			      call 'erlang':'error'
				  (Bad, [SetFun|[S1|[S2|[]]]])
			end
		%% Line 1199
		<_cor79>
		    when call 'erlang':'=:='
			  (_cor68,
			   '_') ->
		    %% Line 1200
		    {S1,S1}
		%% Line 1201
		<_X_XFun>
		    when call 'erlang':'is_list'
			  (_cor68) ->
		    %% Line 1202
		    call 'erlang':'error'
			('badarg', [SetFun|[S1|[S2|[]]]])
		%% Line 1203
		<XFun> when 'true' ->
		    let <FunT> =
			%% Line 1204
			apply XFun
			    (_cor68)
		    in  let <_cor42> =
			    catch
				%% Line 1205
				apply 'check_fun'/3
				    (_cor68, XFun, FunT)
			in  %% Line 1205
			    case _cor42 of
			      %% Line 1206
			      <{'EXIT',_cor80}> when 'true' ->
				  %% Line 1207
				  call 'erlang':'error'
				      ('badarg', [SetFun|[S1|[S2|[]]]])
			      %% Line 1208
			      <Sort> when 'true' ->
				  %% Line 1209
				  case %% Line 2813
				       ( case <FunT,_cor70> of
					   ( <( T
						-| ['compiler_generated'] ),( _cor4
									      -| ['compiler_generated'] )>
						 when ( call ( 'erlang'
							    -| ['compiler_generated'] ):( '=:='
											  -| ['compiler_generated'] )
							 (( _cor4
							    -| ['compiler_generated'] ),
							  ( T
							    -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) ->
						 ( 'true'
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					   %% Line 2814
					   ( <( Type1
						-| ['compiler_generated'] ),( Type2
									      -| ['compiler_generated'] )> when ( 'true'
														  -| ['compiler_generated'] ) ->
						 ( apply ( 'match_types1'/2
							   -| ['compiler_generated'] )
						       (( Type1
							  -| ['compiler_generated'] ), ( Type2
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] )
					     -| ['compiler_generated'] )
					 end
					 -| ['compiler_generated'] ) of
				    %% Line 1210
				    <'true'> when 'true' ->
					let <R1> =
					    %% Line 1211
					    apply 'inverse_substitution'/3
						(_cor67, XFun, Sort)
					in  %% Line 1212
					    case apply 'partition3'/2
						     (_cor69, R1) of
					      <[L1|L2]> when 'true' ->
						  let <_cor48> =
						      %% Line 1213
						      call 'lists':'sort'
							  (L1)
						  in  let <_cor47> =
							  %% Line 1213
							  call 'lists':'sort'
							      (L2)
						      in  %% Line 1213
							  {{'Set',_cor48,_cor68},{'Set',_cor47,_cor68}}
					      ( <_cor46> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor46})
						-| ['compiler_generated'] )
					    end
				    %% Line 1214
				    <'false'> when 'true' ->
					%% Line 1215
					call 'erlang':'error'
					    ('type_mismatch', [SetFun|[S1|[S2|[]]]])
				    ( <_cor49> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor49})
				      -| ['compiler_generated'] )
				  end
			    end
	      end
	  ( <_cor54,_cor53,_cor52> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52})
		  -| [{'function_name',{'partition',3}}] )
	    -| ['compiler_generated'] )
	end
'multiple_relative_product'/2 =
    %% Line 1225
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,R = {'Set',_cor15,_cor16}>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor3> =
		  %% Line 1226
		  call 'erlang':'tuple_size'
		      (T)
	      in  %% Line 1226
		  case %% Line 1266
		       ( case _cor16 of
			   %% Line 1267
			   ( <( Rel
				-| ['compiler_generated'] )>
				 when ( try
					 ( let <_cor5> =
					       ( call ( 'erlang'
							-| ['compiler_generated'] ):( 'is_tuple'
										      -| ['compiler_generated'] )
						     (_cor16)
						 -| ['compiler_generated'] )
					   in  ( let <_cor7> =
						     ( call ( 'erlang'
							      -| ['compiler_generated'] ):( 'tuple_size'
											    -| ['compiler_generated'] )
							   (_cor16)
						       -| ['compiler_generated'] )
						 in  ( let <_cor8> =
							   ( call ( 'erlang'
								    -| ['compiler_generated'] ):( '=:='
												  -| ['compiler_generated'] )
								 (_cor3, ( _cor7
									   -| ['compiler_generated'] ))
							     -| ['compiler_generated'] )
						       in  ( call ( 'erlang'
								    -| ['compiler_generated'] ):( 'and'
												  -| ['compiler_generated'] )
								 (( _cor5
								    -| ['compiler_generated'] ), ( _cor8
												   -| ['compiler_generated'] ))
							     -| ['compiler_generated'] )
						       -| ['compiler_generated'] )
						 -| ['compiler_generated'] )
					   -| ['compiler_generated'] )
				     of <( Try
					   -| ['compiler_generated'] )> ->
					 ( Try
					   -| ['compiler_generated'] )
				     catch <( T
					      -| ['compiler_generated'] ),( R
									    -| ['compiler_generated'] )> ->
					 ( 'false'
					   -| ['compiler_generated'] )
				     -| ['compiler_generated'] ) ->
				 ( 'true'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   %% Line 1270
			   ( <( '_'
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 ( 'true'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   %% Line 1271
			   ( <( _cor23
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
				 ( 'false'
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			 end
			 -| ['compiler_generated'] ) of
		    %% Line 1227
		    <'true'>
			when call 'erlang':'=:='
			      (_cor16,
			       '_') ->
			%% Line 1228
			apply 'empty_set'/0
			    ()
		    %% Line 1229
		    <'true'> when 'true' ->
			let <_cor10> =
			    %% Line 1230
			    call 'erlang':'tuple_to_list'
				(T)
			in  let <MProd> =
				%% Line 1230
				apply 'mul_relprod'/3
				    (_cor10, 1, R)
			    in  %% Line 1231
				apply 'relative_product'/1
				    (MProd)
		    %% Line 1232
		    <'false'> when 'true' ->
			%% Line 1233
			call 'erlang':'error'
			    ('badarg', [T|[R|[]]])
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'multiple_relative_product',2}}] )
	    -| ['compiler_generated'] )
	end
'join'/4 =
    %% Line 1242
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <R1 = {'Set',_cor50,_cor51},I1,R2 = {'Set',_cor52,_cor53},I2>
	      when let <_cor4> =
		    %% Line 1243
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor5> =
			%% Line 1243
			call 'erlang':'is_integer'
			    (I2)
		    in  %% Line 1243
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor4, _cor5)
			  -| ['compiler_generated'] ) ->
	      let <_cor9> =
		  %% Line 1266
		  ( case _cor51 of
		      %% Line 1268
		      ( <( Rel
			   -| ['compiler_generated'] )>
			    when ( try
				    ( let <_cor10> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_tuple'
										 -| ['compiler_generated'] )
						(_cor51)
					    -| ['compiler_generated'] )
				      in  ( let <_cor12> =
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '>='
										       -| ['compiler_generated'] )
						      (I1, ( 1
							     -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( let <_cor13> =
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'tuple_size'
											     -| ['compiler_generated'] )
							    (_cor51)
							-| ['compiler_generated'] )
						  in  ( let <_cor14> =
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( '=<'
												   -| ['compiler_generated'] )
								  (I1, ( _cor13
									 -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							in  ( let <_cor15> =
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(( _cor12
									   -| ['compiler_generated'] ), ( _cor14
													  -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      in  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(( _cor10
									   -| ['compiler_generated'] ), ( _cor15
													  -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				of <( Try
				      -| ['compiler_generated'] )> ->
				    ( Try
				      -| ['compiler_generated'] )
				catch <( T
					 -| ['compiler_generated'] ),( R
								       -| ['compiler_generated'] )> ->
				    ( 'false'
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] ) ->
			    %% Line 1269
			    ( 'true'
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1270
		      ( <( '_'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( 'true'
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1271
		      ( <( _cor23
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( 'false'
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  let <_cor8> =
		      %% Line 1266
		      ( case _cor53 of
			  %% Line 1268
			  ( <( Rel
			       -| ['compiler_generated'] )>
				when ( try
					( let <_cor10> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'is_tuple'
										     -| ['compiler_generated'] )
						    (_cor53)
						-| ['compiler_generated'] )
					  in  ( let <_cor12> =
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '>='
											   -| ['compiler_generated'] )
							  (I2, ( 1
								 -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  ( let <_cor13> =
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'tuple_size'
												 -| ['compiler_generated'] )
								(_cor53)
							    -| ['compiler_generated'] )
						      in  ( let <_cor14> =
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( '=<'
												       -| ['compiler_generated'] )
								      (I2, ( _cor13
									     -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    in  ( let <_cor15> =
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (( _cor12
									       -| ['compiler_generated'] ), ( _cor14
													      -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  in  ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (( _cor10
									       -| ['compiler_generated'] ), ( _cor15
													      -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <( Try
					  -| ['compiler_generated'] )> ->
					( Try
					  -| ['compiler_generated'] )
				    catch <( T
					     -| ['compiler_generated'] ),( R
									   -| ['compiler_generated'] )> ->
					( 'false'
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] ) ->
				%% Line 1269
				( 'true'
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1270
			  ( <( '_'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( 'true'
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1271
			  ( <( _cor23
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( 'false'
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1244
		      case call 'erlang':'and'
			       (_cor9, _cor8) of
			%% Line 1245
			<'false'> when 'true' ->
			    %% Line 1246
			    call 'erlang':'error'
				('badarg', [R1|[I1|[R2|[I2|[]]]]])
			%% Line 1247
			<'true'>
			    when call 'erlang':'=:='
				  (_cor51,
				   '_') ->
			    R1
			%% Line 1248
			<'true'>
			    when call 'erlang':'=:='
				  (_cor53,
				   '_') ->
			    R2
			%% Line 1249
			<'true'> when 'true' ->
			    %% Line 1250
			    ( case apply 'raise_element'/2
				       (R1, I1) of
				( <( {'Set',_rec138,_cor54}
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 1251
				      ( case apply 'raise_element'/2
						 (R2, I2) of
					  ( <( {'Set',_rec139,_cor56}
					       -| ['compiler_generated'] )> when 'true' ->
						let <T> =
						    %% Line 1252
						    apply 'relprod1'/2
							(_rec138, _rec139)
						in  let <_cor30> =
							%% Line 1253
							call 'erlang':'=:='
							    (I1, 1)
						    in  let <_cor29> =
							    %% Line 1253
							    call 'erlang':'=:='
								(I2, 1)
							in  let <_cor37> =
								%% Line 1253
								case call 'erlang':'and'
									 (_cor30, _cor29) of
								  %% Line 1254
								  <'true'> when 'true' ->
								      %% Line 1255
								      ( fun (_cor31) ->
									    case _cor31 of
									      <{X,Y}> when 'true' ->
										  apply 'join_element'/2
										      (X, Y)
									      ( <_cor32> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor32})
										      -| [{'function_name',{'-join/4-fun-0-',1}}] )
										-| ['compiler_generated'] )
									    end
									-| [{'id',{0,0,'-join/4-fun-0-'}}] )
								  %% Line 1256
								  <'false'> when 'true' ->
								      %% Line 1257
								      ( fun (_cor34) ->
									    case _cor34 of
									      <{X,Y}> when 'true' ->
										  let <_cor33> =
										      %% Line 1258
										      apply 'join_element'/3
											  (X, Y, I2)
										  in  %% Line 1258
										      call 'erlang':'list_to_tuple'
											  (_cor33)
									      ( <_cor35> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor35})
										      -| [{'function_name',{'-join/4-fun-1-',1}}] )
										-| ['compiler_generated'] )
									    end
									-| [{'id',{0,0,'-join/4-fun-1-'}}] )
								end
							    in  let <_cor44> =
								    %% Line 1261
								    apply 'replace'/3
									(T, _cor37, [])
								in  let <_cor43> =
									%% Line 1261
									apply _cor37
									    ({_cor51,_cor53})
								    in  %% Line 1261
									{'Set',_cor44,_cor43}
					    -| ['compiler_generated'] )
					  ( <_cor57> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','Set'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor55> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','Set'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_cor45> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor45})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor49,_cor48,_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor49,_cor48,_cor47,_cor46})
		  -| [{'function_name',{'join',4}}] )
	    -| ['compiler_generated'] )
	end
'test_rel'/3 =
    %% Line 1265
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1266
	( case _cor2 of
	    ( <( {'Set',_cor21,_rec142}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec142 of
		    %% Line 1267
		    <Rel>
			when try
			      let <_cor5> =
				  call 'erlang':'is_tuple'
				      (_rec142)
			      in  let <_cor6> =
				      call 'erlang':'=:='
					  (_cor0, 'eq')
				  in  let <_cor7> =
					  call 'erlang':'tuple_size'
					      (_rec142)
				      in  let <_cor8> =
					      call 'erlang':'=:='
						  (_cor1, _cor7)
					  in  let <_cor9> =
						  call 'erlang':'and'
						      (_cor6, _cor8)
					      in  call 'erlang':'and'
						      (_cor5, _cor9)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			'true'
		    %% Line 1268
		    <Rel>
			when try
			      let <_cor10> =
				  call 'erlang':'is_tuple'
				      (_rec142)
			      in  let <_cor11> =
				      call 'erlang':'=:='
					  (_cor0, 'lte')
				  in  let <_cor12> =
					  call 'erlang':'>='
					      (_cor1, 1)
				      in  let <_cor13> =
					      call 'erlang':'tuple_size'
						  (_rec142)
					  in  let <_cor14> =
						  call 'erlang':'=<'
						      (_cor1, _cor13)
					      in  let <_cor15> =
						      call 'erlang':'and'
							  (_cor12, _cor14)
						  in  let <_cor16> =
							  call 'erlang':'and'
							      (_cor11, _cor15)
						      in  call 'erlang':'and'
							      (_cor10, _cor16)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 1269
			'true'
		    %% Line 1270
		    <'_'> when 'true' ->
			'true'
		    %% Line 1271
		    <_cor23> when 'true' ->
			'false'
		  end
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','Set'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fam2rel'/1 =
    %% Line 1281
    fun (_cor0) ->
	%% Line 1288
	( case _cor0 of
	    ( <( _fol868 = ( {( 'Set'
				-| ['compiler_generated'] ),( _cor8
							      -| ['compiler_generated'] ),( _cor9
											    -| ['compiler_generated'] )}
			     -| ['compiler_generated'] )
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  %% Line 1289
		  ( case ( _cor9
			   -| ['compiler_generated'] ) of
		      %% Line 1290
		      ( <( {( DT
			      -| ['compiler_generated'] ),( [( RT
							       -| ['compiler_generated'] )|( []
											     -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )}
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_cor5> =
				  %% Line 1291
				  ( apply ( 'family2rel'/2
					    -| ['compiler_generated'] )
					(( _cor8
					   -| ['compiler_generated'] ), ( []
									  -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  %% Line 1291
				  ( {( 'Set'
				       -| ['compiler_generated'] ),( _cor5
								     -| ['compiler_generated'] ),( {( DT
												      -| ['compiler_generated'] ),( RT
																    -| ['compiler_generated'] )}
												   -| ['compiler_generated'] )}
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1292
		      ( <( '_'
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    _fol868
			-| ['compiler_generated'] )
		      %% Line 1293
		      ( <( _cor14
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( 'badarg'
				     -| ['compiler_generated'] ), ( [_fol868|( []
									       -| ['compiler_generated'] )]
								    -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <( _cor7
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'function_clause'
			      -| ['compiler_generated'] ),( _cor7
							    -| ['compiler_generated'] )}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'family_to_relation'/1 =
    %% Line 1288
    fun (_cor0) ->
	case _cor0 of
	  <F = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1289
	      case _cor9 of
		%% Line 1290
		<{DT,[RT|[]]}> when 'true' ->
		    let <_cor5> =
			%% Line 1291
			apply 'family2rel'/2
			    (_cor8, [])
		    in  %% Line 1291
			{'Set',_cor5,{DT,RT}}
		%% Line 1292
		<'_'> when 'true' ->
		    F
		%% Line 1293
		<_cor14> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'family_to_relation',1}}] )
	    -| ['compiler_generated'] )
	end
'family_specification'/2 =
    %% Line 1300
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,F = {'Set',_cor15,_cor16}> when ( 'true'
						 -| ['compiler_generated'] ) ->
	      %% Line 1301
	      case _cor16 of
		%% Line 1302
		<FType = {_X_DT,[Type|[]]}> when 'true' ->
		    let <_cor9> =
			%% Line 1303
			case %% Line 2378
			     ( case Fun of
				 ( <( {( 'external'
					 -| ['compiler_generated'] ),( Function
								       -| ['compiler_generated'] )}
				      -| ['compiler_generated'] )>
				       when ( call ( 'erlang'
						  -| ['compiler_generated'] ):( 'is_atom'
										-| ['compiler_generated'] )
					       (( Function
						  -| ['compiler_generated'] ))
					   -| ['compiler_generated'] ) ->
				       %% Line 2379
				       ( 'false'
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
				 %% Line 2380
				 ( <( {( 'external'
					 -| ['compiler_generated'] ),_fol890}
				      -| ['compiler_generated'] )> when ( 'true'
									  -| ['compiler_generated'] ) ->
				       _fol890
				   -| ['compiler_generated'] )
				 %% Line 2382
				 ( <( _cor2
				      -| ['compiler_generated'] )> when ( 'true'
									  -| ['compiler_generated'] ) ->
				       %% Line 2383
				       ( 'false'
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			       end
			       -| ['compiler_generated'] ) of
			  %% Line 1304
			  <'false'> when 'true' ->
			      %% Line 1305
			      apply 'fam_spec'/4
				  (_cor15, Fun, Type, [])
			  %% Line 1306
			  <XFun> when 'true' ->
			      %% Line 1307
			      apply 'fam_specification'/3
				  (_cor15, XFun, [])
			end
		    in  %% Line 1309
			case _cor9 of
			  %% Line 1310
			  <SL>
			      when call 'erlang':'is_list'
				    (_cor9) ->
			      %% Line 1311
			      {'Set',SL,FType}
			  %% Line 1312
			  <Bad> when 'true' ->
			      %% Line 1313
			      call 'erlang':'error'
				  (Bad, [Fun|[F|[]]])
			end
		%% Line 1315
		<'_'> when 'true' ->
		    F
		%% Line 1316
		<_cor23> when 'true' ->
		    call 'erlang':'error'
			('badarg', [Fun|[F|[]]])
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'family_specification',2}}] )
	    -| ['compiler_generated'] )
	end
'union_of_family'/1 =
    %% Line 1322
    fun (_cor0) ->
	case _cor0 of
	  <F = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1323
	      case _cor9 of
		%% Line 1324
		<{_X_DT,[Type|[]]}> when 'true' ->
		    let <_cor5> =
			%% Line 1325
			apply 'un_of_fam'/2
			    (_cor8, [])
		    in  %% Line 1325
			{'Set',_cor5,Type}
		%% Line 1326
		<'_'> when 'true' ->
		    F
		%% Line 1327
		<_cor14> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'union_of_family',1}}] )
	    -| ['compiler_generated'] )
	end
'intersection_of_family'/1 =
    %% Line 1333
    fun (_cor0) ->
	case _cor0 of
	  <F = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1334
	      case _cor9 of
		%% Line 1335
		<{_X_DT,[Type|[]]}> when 'true' ->
		    %% Line 1336
		    case apply 'int_of_fam'/1
			     (_cor8) of
		      %% Line 1337
		      <FU>
			  when call 'erlang':'is_list'
				(FU) ->
			  %% Line 1338
			  {'Set',FU,Type}
		      %% Line 1339
		      <Bad> when 'true' ->
			  %% Line 1340
			  call 'erlang':'error'
			      (Bad, [F|[]])
		    end
		%% Line 1342
		<_cor14> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'intersection_of_family',1}}] )
	    -| ['compiler_generated'] )
	end
'family_union'/1 =
    %% Line 1348
    fun (_cor0) ->
	case _cor0 of
	  <F = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1349
	      case _cor9 of
		%% Line 1350
		<{DT,[[Type|[]]|[]]}> when 'true' ->
		    let <_cor5> =
			%% Line 1351
			apply 'fam_un'/2
			    (_cor8, [])
		    in  %% Line 1351
			{'Set',_cor5,{DT,[Type|[]]}}
		%% Line 1352
		<'_'> when 'true' ->
		    F
		%% Line 1353
		<_cor14> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'family_union',1}}] )
	    -| ['compiler_generated'] )
	end
'family_intersection'/1 =
    %% Line 1359
    fun (_cor0) ->
	case _cor0 of
	  <F = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1360
	      case _cor9 of
		%% Line 1361
		<{DT,[[Type|[]]|[]]}> when 'true' ->
		    %% Line 1362
		    case apply 'fam_int'/2
			     (_cor8, []) of
		      %% Line 1363
		      <FU>
			  when call 'erlang':'is_list'
				(FU) ->
			  %% Line 1364
			  {'Set',FU,{DT,[Type|[]]}}
		      %% Line 1365
		      <Bad> when 'true' ->
			  %% Line 1366
			  call 'erlang':'error'
			      (Bad, [F|[]])
		    end
		%% Line 1368
		<'_'> when 'true' ->
		    F
		%% Line 1369
		<_cor14> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'family_intersection',1}}] )
	    -| ['compiler_generated'] )
	end
'family_domain'/1 =
    %% Line 1375
    fun (_cor0) ->
	case _cor0 of
	  <F = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1376
	      case _cor9 of
		%% Line 1377
		<{FDT,[{DT,_cor12}|[]]}> when 'true' ->
		    let <_cor5> =
			%% Line 1378
			apply 'fam_dom'/2
			    (_cor8, [])
		    in  %% Line 1378
			{'Set',_cor5,{FDT,[DT|[]]}}
		%% Line 1379
		<'_'> when 'true' ->
		    F
		%% Line 1380
		<{_cor15,['_']}> when 'true' ->
		    F
		%% Line 1381
		<_cor16> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'family_domain',1}}] )
	    -| ['compiler_generated'] )
	end
'family_range'/1 =
    %% Line 1387
    fun (_cor0) ->
	case _cor0 of
	  <F = {'Set',_cor8,_cor9}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1388
	      case _cor9 of
		%% Line 1389
		<{DT,[{_cor12,RT}|[]]}> when 'true' ->
		    let <_cor5> =
			%% Line 1390
			apply 'fam_ran'/2
			    (_cor8, [])
		    in  %% Line 1390
			{'Set',_cor5,{DT,[RT|[]]}}
		%% Line 1391
		<'_'> when 'true' ->
		    F
		%% Line 1392
		<{_cor15,['_']}> when 'true' ->
		    F
		%% Line 1393
		<_cor16> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F|[]])
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'family_range',1}}] )
	    -| ['compiler_generated'] )
	end
'family_field'/1 =
    %% Line 1399
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1400
	    apply 'family_domain'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 1400
		apply 'family_range'/1
		    (_cor0)
	    in  %% Line 1400
		apply 'family_union'/2
		    (_cor2, _cor1)
'family_union'/2 =
    %% Line 1406
    fun (_cor1,_cor0) ->
	let <_fol991> = 'fam_union'/3
	in  %% Line 1424
	    ( case <_cor1,_cor0,_fol991> of
		( <( _fol967 = ( {( 'Set'
				    -| ['compiler_generated'] ),( _cor16
								  -| ['compiler_generated'] ),( _cor17
												-| ['compiler_generated'] )}
				 -| ['compiler_generated'] )
		     -| ['compiler_generated'] ),( _fol968 = ( {( 'Set'
								  -| ['compiler_generated'] ),( _cor18
												-| ['compiler_generated'] ),( _cor19
															      -| ['compiler_generated'] )}
							       -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( FF
										 -| ['compiler_generated'] )> when 'true' ->
		      %% Line 1425
		      ( case %% Line 2789
			     ( case ( <( _cor17
					 -| ['compiler_generated'] ),( _cor19
								       -| ['compiler_generated'] )>
				      -| ['compiler_generated'] ) of
				 ( <( T
				      -| ['compiler_generated'] ),( _cor4
								    -| ['compiler_generated'] )>
				       when ( call ( 'erlang'
						  -| ['compiler_generated'] ):( '=:='
										-| ['compiler_generated'] )
					       (( _cor4
						  -| ['compiler_generated'] ),
						( T
						  -| ['compiler_generated'] ))
					   -| ['compiler_generated'] ) ->
				       ( T
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
				 %% Line 2790
				 ( <( Type1
				      -| ['compiler_generated'] ),( Type2
								    -| ['compiler_generated'] )> when ( 'true'
													-| ['compiler_generated'] ) ->
				       ( catch
					     %% Line 2791
					     ( apply ( 'unify_types1'/2
						       -| ['compiler_generated'] )
						   (( Type1
						      -| ['compiler_generated'] ), ( Type2
										     -| ['compiler_generated'] ))
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			       end
			       -| ['compiler_generated'] ) of
			  %% Line 1426
			  ( <( []
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				%% Line 1427
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( 'type_mismatch'
					 -| ['compiler_generated'] ), ( [_fol967|( [_fol968|( []
											      -| ['compiler_generated'] )]
										   -| ['compiler_generated'] )]
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1428
			  ( <( '_'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				_fol967
			    -| ['compiler_generated'] )
			  %% Line 1430
			  ( <( ( Type
				 -| ['compiler_generated'] ) = ( {( _cor24
								    -| ['compiler_generated'] ),( [( _cor25
												     -| ['compiler_generated'] )|( []
																   -| ['compiler_generated'] )]
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_cor11> =
				      %% Line 1431
				      ( apply ( FF
						-| ['compiler_generated'] )
					    (( _cor16
					       -| ['compiler_generated'] ), ( _cor18
									      -| ['compiler_generated'] ), ( []
													     -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  %% Line 1431
				      ( {( 'Set'
					   -| ['compiler_generated'] ),( _cor11
									 -| ['compiler_generated'] ),( Type
												       -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1432
			  ( <( _cor30
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( 'badarg'
					 -| ['compiler_generated'] ), ( [_fol967|( [_fol968|( []
											      -| ['compiler_generated'] )]
										   -| ['compiler_generated'] )]
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor15
		     -| ['compiler_generated'] ),( _cor14
						   -| ['compiler_generated'] ),( _cor13
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'function_clause'
				  -| ['compiler_generated'] ),( _cor15
								-| ['compiler_generated'] ),( _cor14
											      -| ['compiler_generated'] ),( _cor13
															    -| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'family_intersection'/2 =
    %% Line 1413
    fun (_cor1,_cor0) ->
	let <_fol1016> = 'fam_intersect'/3
	in  %% Line 1424
	    ( case <_cor1,_cor0,_fol1016> of
		( <( _fol992 = ( {( 'Set'
				    -| ['compiler_generated'] ),( _cor16
								  -| ['compiler_generated'] ),( _cor17
												-| ['compiler_generated'] )}
				 -| ['compiler_generated'] )
		     -| ['compiler_generated'] ),( _fol993 = ( {( 'Set'
								  -| ['compiler_generated'] ),( _cor18
												-| ['compiler_generated'] ),( _cor19
															      -| ['compiler_generated'] )}
							       -| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( FF
										 -| ['compiler_generated'] )> when 'true' ->
		      %% Line 1425
		      ( case %% Line 2789
			     ( case ( <( _cor17
					 -| ['compiler_generated'] ),( _cor19
								       -| ['compiler_generated'] )>
				      -| ['compiler_generated'] ) of
				 ( <( T
				      -| ['compiler_generated'] ),( _cor4
								    -| ['compiler_generated'] )>
				       when ( call ( 'erlang'
						  -| ['compiler_generated'] ):( '=:='
										-| ['compiler_generated'] )
					       (( _cor4
						  -| ['compiler_generated'] ),
						( T
						  -| ['compiler_generated'] ))
					   -| ['compiler_generated'] ) ->
				       ( T
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
				 %% Line 2790
				 ( <( Type1
				      -| ['compiler_generated'] ),( Type2
								    -| ['compiler_generated'] )> when ( 'true'
													-| ['compiler_generated'] ) ->
				       ( catch
					     %% Line 2791
					     ( apply ( 'unify_types1'/2
						       -| ['compiler_generated'] )
						   (( Type1
						      -| ['compiler_generated'] ), ( Type2
										     -| ['compiler_generated'] ))
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			       end
			       -| ['compiler_generated'] ) of
			  %% Line 1426
			  ( <( []
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				%% Line 1427
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( 'type_mismatch'
					 -| ['compiler_generated'] ), ( [_fol992|( [_fol993|( []
											      -| ['compiler_generated'] )]
										   -| ['compiler_generated'] )]
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1428
			  ( <( '_'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				_fol992
			    -| ['compiler_generated'] )
			  %% Line 1430
			  ( <( ( Type
				 -| ['compiler_generated'] ) = ( {( _cor24
								    -| ['compiler_generated'] ),( [( _cor25
												     -| ['compiler_generated'] )|( []
																   -| ['compiler_generated'] )]
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_cor11> =
				      %% Line 1431
				      ( apply ( FF
						-| ['compiler_generated'] )
					    (( _cor16
					       -| ['compiler_generated'] ), ( _cor18
									      -| ['compiler_generated'] ), ( []
													     -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  %% Line 1431
				      ( {( 'Set'
					   -| ['compiler_generated'] ),( _cor11
									 -| ['compiler_generated'] ),( Type
												       -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1432
			  ( <( _cor30
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( 'badarg'
					 -| ['compiler_generated'] ), ( [_fol992|( [_fol993|( []
											      -| ['compiler_generated'] )]
										   -| ['compiler_generated'] )]
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor15
		     -| ['compiler_generated'] ),( _cor14
						   -| ['compiler_generated'] ),( _cor13
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'function_clause'
				  -| ['compiler_generated'] ),( _cor15
								-| ['compiler_generated'] ),( _cor14
											      -| ['compiler_generated'] ),( _cor13
															    -| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'family_difference'/2 =
    %% Line 1420
    fun (_cor1,_cor0) ->
	let <_fol1041> = 'fam_difference'/3
	in  %% Line 1424
	    ( case <_cor1,_cor0,_fol1041> of
		( <( _fol1017 = ( {( 'Set'
				     -| ['compiler_generated'] ),( _cor16
								   -| ['compiler_generated'] ),( _cor17
												 -| ['compiler_generated'] )}
				  -| ['compiler_generated'] )
		     -| ['compiler_generated'] ),( _fol1018 = ( {( 'Set'
								   -| ['compiler_generated'] ),( _cor18
												 -| ['compiler_generated'] ),( _cor19
															       -| ['compiler_generated'] )}
								-| ['compiler_generated'] )
						   -| ['compiler_generated'] ),( FF
										 -| ['compiler_generated'] )> when 'true' ->
		      %% Line 1425
		      ( case %% Line 2789
			     ( case ( <( _cor17
					 -| ['compiler_generated'] ),( _cor19
								       -| ['compiler_generated'] )>
				      -| ['compiler_generated'] ) of
				 ( <( T
				      -| ['compiler_generated'] ),( _cor4
								    -| ['compiler_generated'] )>
				       when ( call ( 'erlang'
						  -| ['compiler_generated'] ):( '=:='
										-| ['compiler_generated'] )
					       (( _cor4
						  -| ['compiler_generated'] ),
						( T
						  -| ['compiler_generated'] ))
					   -| ['compiler_generated'] ) ->
				       ( T
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
				 %% Line 2790
				 ( <( Type1
				      -| ['compiler_generated'] ),( Type2
								    -| ['compiler_generated'] )> when ( 'true'
													-| ['compiler_generated'] ) ->
				       ( catch
					     %% Line 2791
					     ( apply ( 'unify_types1'/2
						       -| ['compiler_generated'] )
						   (( Type1
						      -| ['compiler_generated'] ), ( Type2
										     -| ['compiler_generated'] ))
					       -| ['compiler_generated'] )
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			       end
			       -| ['compiler_generated'] ) of
			  %% Line 1426
			  ( <( []
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				%% Line 1427
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( 'type_mismatch'
					 -| ['compiler_generated'] ), ( [_fol1017|( [_fol1018|( []
												-| ['compiler_generated'] )]
										    -| ['compiler_generated'] )]
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1428
			  ( <( '_'
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				_fol1017
			    -| ['compiler_generated'] )
			  %% Line 1430
			  ( <( ( Type
				 -| ['compiler_generated'] ) = ( {( _cor24
								    -| ['compiler_generated'] ),( [( _cor25
												     -| ['compiler_generated'] )|( []
																   -| ['compiler_generated'] )]
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( let <_cor11> =
				      %% Line 1431
				      ( apply ( FF
						-| ['compiler_generated'] )
					    (( _cor16
					       -| ['compiler_generated'] ), ( _cor18
									      -| ['compiler_generated'] ), ( []
													     -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  %% Line 1431
				      ( {( 'Set'
					   -| ['compiler_generated'] ),( _cor11
									 -| ['compiler_generated'] ),( Type
												       -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1432
			  ( <( _cor30
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( 'badarg'
					 -| ['compiler_generated'] ), ( [_fol1017|( [_fol1018|( []
												-| ['compiler_generated'] )]
										    -| ['compiler_generated'] )]
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( _cor15
		     -| ['compiler_generated'] ),( _cor14
						   -| ['compiler_generated'] ),( _cor13
										 -| ['compiler_generated'] )> when ( 'true'
														     -| ['compiler_generated'] ) ->
		      ( primop ( 'match_fail'
				 -| ['compiler_generated'] )
			    (( {( 'function_clause'
				  -| ['compiler_generated'] ),( _cor15
								-| ['compiler_generated'] ),( _cor14
											      -| ['compiler_generated'] ),( _cor13
															    -| ['compiler_generated'] )}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'fam_binop'/3 =
    %% Line 1424
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F1 = {'Set',_cor16,_cor17},F2 = {'Set',_cor18,_cor19},FF> when 'true' ->
	      %% Line 1425
	      case %% Line 2789
		   ( case <_cor17,_cor19> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( T
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2790
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( catch
				   %% Line 2791
				   ( apply ( 'unify_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1426
		<[]> when 'true' ->
		    %% Line 1427
		    call 'erlang':'error'
			('type_mismatch', [F1|[F2|[]]])
		%% Line 1428
		<'_'> when 'true' ->
		    %% Line 1429
		    F1
		%% Line 1430
		<Type = {_cor24,[_cor25|[]]}> when 'true' ->
		    let <_cor11> =
			%% Line 1431
			apply FF
			    (_cor16, _cor18, [])
		    in  %% Line 1431
			{'Set',_cor11,Type}
		%% Line 1432
		<_cor30> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F1|[F2|[]]])
	      end
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'fam_binop',3}}] )
	    -| ['compiler_generated'] )
	end
'partition_family'/2 =
    %% Line 1439
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,Set = {'Set',_cor38,_cor39}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1441
	      case apply 'check_for_sort'/2
		       (_cor39, I) of
		%% Line 1442
		<'empty'> when 'true' ->
		    %% Line 1443
		    Set
		%% Line 1444
		<'error'> when 'true' ->
		    %% Line 1445
		    call 'erlang':'error'
			('badarg', [I|[Set|[]]])
		%% Line 1446
		<'false'> when 'true' ->
		    let <_cor9> =
			%% Line 1447
			apply 'fam_partition_n'/2
			    (I, _cor38)
		    in  let <_cor6> =
			    %% Line 1448
			    call 'erlang':'element'
				(I, _cor39)
			in  %% Line 1447
			    {'Set',_cor9,%% Line 1448
					 {_cor6,[_cor39|[]]}}
		%% Line 1449
		<'true'> when 'true' ->
		    let <_cor13> =
			%% Line 1450
			call 'lists':'keysort'
			    (I, _cor38)
		    in  let <_cor14> =
			    %% Line 1450
			    apply 'fam_partition_n'/2
				(I, _cor13)
			in  let <_cor10> =
				%% Line 1451
				call 'erlang':'element'
				    (I, _cor39)
			    in  %% Line 1450
				{'Set',_cor14,%% Line 1451
					      {_cor10,[_cor39|[]]}}
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1453
	  <SetFun,Set = {'Set',_cor46,_cor47}> when ( 'true'
						      -| ['compiler_generated'] ) ->
	      %% Line 1456
	      case %% Line 2378
		   ( case SetFun of
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Function
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( 'is_atom'
								      -| ['compiler_generated'] )
				     (( Function
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     %% Line 2379
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2380
		       ( <( {( 'external'
			       -| ['compiler_generated'] ),( Fun
							     -| ['compiler_generated'] )}
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2381
			     ( Fun
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2382
		       ( <( _cor2
			    -| ['compiler_generated'] )> when ( 'true'
								-| ['compiler_generated'] ) ->
			     %% Line 2383
			     ( 'false'
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1457
		<'false'>
		    when call 'erlang':'=/='
			  (_cor46,
			   []) ->
		    let <_cor22> =
			%% Line 2386
			( case _cor47 of
			    ( <( [_fol1078|( []
					     -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  _fol1078
			      -| ['compiler_generated'] )
			    %% Line 2387
			    ( <_fol1079> when ( 'true'
						-| ['compiler_generated'] ) ->
				  _fol1079
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 1458
			case %% Line 2390
			     ( apply ( 'subst'/5
				       -| ['compiler_generated'] )
				   (_cor46, SetFun, _cor22, ( '_'
							      -| ['compiler_generated'] ), ( []
											     -| ['compiler_generated'] ))
			       -| ['compiler_generated'] ) of
			  %% Line 1459
			  <{NSL,NewType}> when 'true' ->
			      let <_cor23> =
				  %% Line 1460
				  apply 'converse'/2
				      (NSL, [])
			      in  let <P> =
				      %% Line 1460
				      apply 'fam_partition'/2
					  (_cor23, 'true')
				  in  let <_cor25> =
					  %% Line 1461
					  call 'lists':'reverse'
					      (P)
				      in  %% Line 1461
					  {'Set',_cor25,{NewType,[_cor47|[]]}}
			  %% Line 1462
			  <Bad> when 'true' ->
			      %% Line 1463
			      call 'erlang':'error'
				  (Bad, [SetFun|[Set|[]]])
			end
		%% Line 1465
		<'false'> when 'true' ->
		    %% Line 1466
		    apply 'empty_set'/0
			()
		%% Line 1467
		<_cor52>
		    when call 'erlang':'=:='
			  (_cor47,
			   '_') ->
		    %% Line 1468
		    apply 'empty_set'/0
			()
		%% Line 1469
		<_X_XFun>
		    when call 'erlang':'is_list'
			  (_cor47) ->
		    %% Line 1470
		    call 'erlang':'error'
			('badarg', [SetFun|[Set|[]]])
		%% Line 1471
		<XFun> when 'true' ->
		    let <DType> =
			%% Line 1472
			apply XFun
			    (_cor47)
		    in  let <_cor28> =
			    catch
				%% Line 1473
				apply 'check_fun'/3
				    (_cor47, XFun, DType)
			in  %% Line 1473
			    case _cor28 of
			      %% Line 1474
			      <{'EXIT',_cor53}> when 'true' ->
				  %% Line 1475
				  call 'erlang':'error'
				      ('badarg', [SetFun|[Set|[]]])
			      %% Line 1476
			      <Sort> when 'true' ->
				  let <Ts> =
				      %% Line 1477
				      apply 'inverse_substitution'/3
					  (_cor46, XFun, Sort)
				  in  let <P> =
					  %% Line 1478
					  apply 'fam_partition'/2
					      (Ts, Sort)
				      in  let <_cor33> =
					      %% Line 1479
					      call 'lists':'reverse'
						  (P)
					  in  %% Line 1479
					      {'Set',_cor33,{DType,[_cor47|[]]}}
			    end
	      end
	  ( <_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37,_cor36})
		  -| [{'function_name',{'partition_family',2}}] )
	    -| ['compiler_generated'] )
	end
'family_projection'/2 =
    %% Line 1487
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SetFun,F = {'Set',_cor17,_cor18}> when ( 'true'
						    -| ['compiler_generated'] ) ->
	      %% Line 1488
	      case _cor18 of
		%% Line 1489
		<{_cor21,[_cor22|[]]}>
		    when call 'erlang':'=:='
			  ([],
			   _cor17) ->
		    %% Line 1490
		    apply 'empty_set'/0
			()
		%% Line 1491
		<{DT,[Type|[]]}> when 'true' ->
		    %% Line 1492
		    case %% Line 2378
			 ( case SetFun of
			     ( <( {( 'external'
				     -| ['compiler_generated'] ),( Function
								   -| ['compiler_generated'] )}
				  -| ['compiler_generated'] )>
				   when ( call ( 'erlang'
					      -| ['compiler_generated'] ):( 'is_atom'
									    -| ['compiler_generated'] )
					   (( Function
					      -| ['compiler_generated'] ))
				       -| ['compiler_generated'] ) ->
				   %% Line 2379
				   ( 'false'
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			     %% Line 2380
			     ( <( {( 'external'
				     -| ['compiler_generated'] ),( Fun
								   -| ['compiler_generated'] )}
				  -| ['compiler_generated'] )> when ( 'true'
								      -| ['compiler_generated'] ) ->
				   %% Line 2381
				   ( Fun
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			     %% Line 2382
			     ( <( _cor2
				  -| ['compiler_generated'] )> when ( 'true'
								      -| ['compiler_generated'] ) ->
				   %% Line 2383
				   ( 'false'
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			   end
			   -| ['compiler_generated'] ) of
		      %% Line 1493
		      <'false'> when 'true' ->
			  %% Line 1494
			  case apply 'fam_proj'/5
				   (_cor17, SetFun, Type, '_', []) of
			    %% Line 1495
			    <{SL,NewType}> when 'true' ->
				%% Line 1496
				{'Set',SL,{DT,NewType}}
			    %% Line 1497
			    <Bad> when 'true' ->
				%% Line 1498
				call 'erlang':'error'
				    (Bad, [SetFun|[F|[]]])
			  end
		      %% Line 1500
		      <_cor25> when 'true' ->
			  %% Line 1501
			  call 'erlang':'error'
			      ('badarg', [SetFun|[F|[]]])
		    end
		%% Line 1503
		<'_'> when 'true' ->
		    F
		%% Line 1504
		<_cor26> when 'true' ->
		    call 'erlang':'error'
			('badarg', [SetFun|[F|[]]])
	      end
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'family_projection',2}}] )
	    -| ['compiler_generated'] )
	end
'family_to_digraph'/1 =
    %% Line 1514
    fun (_cor0) ->
	case _cor0 of
	  <F = {'Set',_cor6,_cor7}> when ( 'true'
					   -| ['compiler_generated'] ) ->
	      %% Line 1515
	      case _cor7 of
		%% Line 1516
		<{_cor10,[_cor11|[]]}> when 'true' ->
		    let <_cor3> =
			call 'digraph':'new'
			    ()
		    in  apply 'fam2digraph'/2
			    (F, _cor3)
		%% Line 1517
		<'_'> when 'true' ->
		    call 'digraph':'new'
			()
		%% Line 1518
		<_X_Else> when 'true' ->
		    call 'erlang':'error'
			('badarg', [F|[]])
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'family_to_digraph',1}}] )
	    -| ['compiler_generated'] )
	end
'family_to_digraph'/2 =
    %% Line 1525
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F = {'Set',_cor15,_cor16},Type> when ( 'true'
						  -| ['compiler_generated'] ) ->
	      do  %% Line 1526
		  case _cor16 of
		    %% Line 1527
		    <{_cor19,[_cor20|[]]}> when 'true' ->
			'ok'
		    %% Line 1528
		    <'_'> when 'true' ->
			'ok'
		    %% Line 1529
		    <_X_Else> when 'true' ->
			call 'erlang':'error'
			    ('badarg', [F|[Type|[]]])
		  end
		  %% Line 1531
		  try
		      call 'digraph':'new'
			  (Type)
		  of <_cor5> ->
		      let <_cor6> =
			  catch
			      %% Line 1532
			      apply 'fam2digraph'/2
				  (F, _cor5)
		      in  %% Line 1532
			  case _cor6 of
			    %% Line 1533
			    <{'error',Reason}> when 'true' ->
				%% Line 1534
				case call 'digraph':'delete'
					 (_cor5) of
				  <'true'> when 'true' ->
				      %% Line 1535
				      call 'erlang':'error'
					  (Reason, [F|[Type|[]]])
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
			    %% Line 1536
			    <_cor21> when 'true' ->
				_cor5
			  end
		  catch <_cor12,_cor11,_cor10> ->
		      case <_cor12,_cor11,_cor10> of
			%% Line 1540
			<'error','badarg',_cor22> when 'true' ->
			    call 'erlang':'error'
				('badarg', [F|[Type|[]]])
			( <_cor12,_cor11,_cor10> when 'true' ->
			      primop 'raise'
				  (_cor10, _cor11)
			  -| ['compiler_generated'] )
		      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'family_to_digraph',2}}] )
	    -| ['compiler_generated'] )
	end
'digraph_to_family'/1 =
    %% Line 1546
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 1547
		apply 'digraph_family'/1
		    (_cor0)
	in  %% Line 1547
	    case _cor1 of
	      %% Line 1548
	      <{'EXIT',_cor4}> when 'true' ->
		  call 'erlang':'error'
		      ('badarg', [_cor0|[]])
	      %% Line 1549
	      <L> when 'true' ->
		  {'Set',L,{'atom',['atom']}}
	    end
'digraph_to_family'/2 =
    %% Line 1556
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1557
	    apply 'is_type'/1
		(_cor0)
	in  %% Line 1557
	    case <_cor2,_cor0> of
	      %% Line 1558
	      <'true',[Type = {_cor8,[_cor9|[]]}|[]]> when 'true' ->
		  let <_cor3> =
		      catch
			  %% Line 1559
			  apply 'digraph_family'/1
			      (_cor1)
		  in  %% Line 1559
		      case _cor3 of
			%% Line 1560
			<{'EXIT',_cor10}> when 'true' ->
			    call 'erlang':'error'
				('badarg', [_cor1|[_cor0|[]]])
			%% Line 1561
			<L> when 'true' ->
			    {'Set',L,Type}
		      end
	      %% Line 1563
	      <_fol1120,_fol1121> when 'true' ->
		  %% Line 1564
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	    end
'is_types'/2 =
    %% Line 1579
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_X_T> when 'true' ->
	      %% Line 1580
	      'true'
	  %% Line 1581
	  <I,T> when 'true' ->
	      let <_cor2> =
		  %% Line 1582
		  call 'erlang':'element'
		      (I, T)
	      in  %% Line 1582
		  case apply 'is_type'/1
			   (_cor2) of
		    %% Line 1583
		    <'true'> when 'true' ->
			let <_cor3> =
			    call 'erlang':'-'
				(I, 1)
			in  apply 'is_types'/2
				(_cor3, T)
		    %% Line 1584
		    <'false'> when 'true' ->
			'false'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	end
'is_element_type'/1 =
    %% Line 1587
    fun (_cor0) ->
	case _cor0 of
	  <'_'> when 'true' ->
	      %% Line 1588
	      'true'
	  %% Line 1589
	  <T> when 'true' ->
	      %% Line 1590
	      apply 'is_type'/1
		  (T)
	end
'set_of_sets'/3 =
    %% Line 1592
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[S = {'Set',_cor17,_cor18}|Ss],L,T0> when ( 'true'
						       -| ['compiler_generated'] ) ->
	      let <_fol1131> =
		  %% Line 1593
		  [_cor18|[]]
	      in  %% Line 1593
		  case %% Line 2789
		       ( case <_fol1131,T0> of
			   ( <( T
				-| ['compiler_generated'] ),_fol1132>
				 when ( call ( 'erlang'
					    -| ['compiler_generated'] ):( '=:='
									  -| ['compiler_generated'] )
					 (_fol1132,
					  ( T
					    -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) ->
				 ( T
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			   %% Line 2790
			   ( <( Type1
				-| ['compiler_generated'] ),( Type2
							      -| ['compiler_generated'] )> when ( 'true'
												  -| ['compiler_generated'] ) ->
				 ( catch
				       %% Line 2791
				       ( apply ( 'unify_types1'/2
						 -| ['compiler_generated'] )
					     (( Type1
						-| ['compiler_generated'] ), ( Type2
									       -| ['compiler_generated'] ))
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			 end
			 -| ['compiler_generated'] ) of
		    %% Line 1594
		    <[]> when 'true' ->
			{'error','type_mismatch'}
		    %% Line 1595
		    <Type> when 'true' ->
			apply 'set_of_sets'/3
			    (Ss, [_cor17|L], Type)
		  end
	  %% Line 1597
	  <[S = {'OrdSet',_cor23,_cor24}|Ss],L,T0> when ( 'true'
							  -| ['compiler_generated'] ) ->
	      %% Line 1598
	      case %% Line 2789
		   ( case <_cor24,T0> of
		       ( <( T
			    -| ['compiler_generated'] ),( _cor4
							  -| ['compiler_generated'] )>
			     when ( call ( 'erlang'
					-| ['compiler_generated'] ):( '=:='
								      -| ['compiler_generated'] )
				     (( _cor4
					-| ['compiler_generated'] ),
				      ( T
					-| ['compiler_generated'] ))
				 -| ['compiler_generated'] ) ->
			     ( T
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		       %% Line 2790
		       ( <( Type1
			    -| ['compiler_generated'] ),( Type2
							  -| ['compiler_generated'] )> when ( 'true'
											      -| ['compiler_generated'] ) ->
			     ( catch
				   %% Line 2791
				   ( apply ( 'unify_types1'/2
					     -| ['compiler_generated'] )
					 (( Type1
					    -| ['compiler_generated'] ), ( Type2
									   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			 -| ['compiler_generated'] )
		     end
		     -| ['compiler_generated'] ) of
		%% Line 1599
		<[]> when 'true' ->
		    {'error','type_mismatch'}
		%% Line 1600
		<Type> when 'true' ->
		    apply 'set_of_sets'/3
			(Ss, [_cor23|L], Type)
	      end
	  %% Line 1602
	  <[],L,T> when 'true' ->
	      let <_cor13> =
		  %% Line 1603
		  call 'lists':'usort'
		      (L)
	      in  %% Line 1603
		  {'Set',_cor13,T}
	  %% Line 1604
	  <_cor29,_X_L,_X_T> when 'true' ->
	      %% Line 1605
	      {'error','badarg'}
	end
'ordset_of_sets'/3 =
    %% Line 1607
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[S = {'Set',_cor18,_cor19}|Ss],L,T> when ( 'true'
						      -| ['compiler_generated'] ) ->
	      %% Line 1608
	      apply 'ordset_of_sets'/3
		  (Ss, [_cor18|L], [[_cor19|[]]|T])
	  %% Line 1609
	  <[S = {'OrdSet',_cor24,_cor25}|Ss],L,T> when ( 'true'
							 -| ['compiler_generated'] ) ->
	      %% Line 1610
	      apply 'ordset_of_sets'/3
		  (Ss, [_cor24|L], [_cor25|T])
	  %% Line 1611
	  <[],L,T> when 'true' ->
	      let <_cor13> =
		  %% Line 1612
		  call 'lists':'reverse'
		      (L)
	      in  let <_cor14> =
		      %% Line 1612
		      call 'erlang':'list_to_tuple'
			  (_cor13)
		  in  let <_cor11> =
			  %% Line 1612
			  call 'lists':'reverse'
			      (T)
		      in  let <_cor12> =
			      %% Line 1612
			      call 'erlang':'list_to_tuple'
				  (_cor11)
			  in  %% Line 1612
			      {'OrdSet',_cor14,_cor12}
	  %% Line 1613
	  <_cor30,_X_L,_X_T> when 'true' ->
	      %% Line 1614
	      'error'
	end
'rel'/2 =
    %% Line 1617
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ts,[Type|[]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1618
		  apply 'is_type'/1
		      (Type)
	      in  let <_cor2> =
		      %% Line 1618
		      apply 'atoms_only'/2
			  (Type, 1)
		  in  %% Line 1618
		      case call 'erlang':'and'
			       (_cor3, _cor2) of
			%% Line 1619
			<'true'> when 'true' ->
			    let <_cor4> =
				%% Line 1620
				call 'erlang':'tuple_size'
				    (Type)
			    in  %% Line 1620
				apply 'rel'/3
				    (Ts, _cor4, Type)
			%% Line 1621
			<'false'> when 'true' ->
			    %% Line 1622
			    apply 'rel_type'/3
				(Ts, [], Type)
		      end
	  %% Line 1624
	  <Ts,Sz> when 'true' ->
	      let <_cor6> =
		  %% Line 1625
		  call 'erlang':'make_tuple'
		      (Sz, 'atom')
	      in  %% Line 1625
		  apply 'rel'/3
		      (Ts, Sz, _cor6)
	end
'atoms_only'/2 =
    %% Line 1627
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,I>
	      when try
		    let <_cor2> =
			call 'erlang':'element'
			    (I, Type)
		    in  call 'erlang':'is_atom'
			    (_cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor3> =
		  %% Line 1628
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 1628
		  apply 'atoms_only'/2
		      (Type, _cor3)
	  %% Line 1629
	  <Type,I>
	      when try
		    let <_cor4> =
			call 'erlang':'tuple_size'
			    (Type)
		    in  let <_cor5> =
			    call 'erlang':'>'
				(I, _cor4)
			in  let <_cor6> =
				call 'erlang':'is_tuple'
				    (Type)
			    in  call 'erlang':'and'
				    (_cor5, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1630
	      'true'
	  %% Line 1631
	  <_X_Type,_X_I> when 'true' ->
	      %% Line 1632
	      'false'
	end
'rel'/3 =
    %% Line 1634
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ts,Sz,Type>
	      when call 'erlang':'>='
		    (Sz,
		     1) ->
	      let <SL> =
		  %% Line 1635
		  call 'lists':'usort'
		      (Ts)
	      in  %% Line 1636
		  apply 'rel'/4
		      (SL, SL, Sz, Type)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rel',3}}] )
	    -| ['compiler_generated'] )
	end
'rel'/4 =
    %% Line 1638
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T|Ts],L,Sz,Type>
	      when try
		    let <_cor4> =
			call 'erlang':'tuple_size'
			    (T)
		    in  call 'erlang':'=:='
			    (_cor4, Sz)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1639
	      apply 'rel'/4
		  (Ts, L, Sz, Type)
	  %% Line 1640
	  <[],L,_X_Sz,Type> when 'true' ->
	      %% Line 1641
	      {'Set',L,Type}
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rel',4}}] )
	    -| ['compiler_generated'] )
	end
'rel_type'/3 =
    %% Line 1643
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Ts],L,Type> when 'true' ->
	      %% Line 1644
	      case apply 'make_element'/3
		       (E, Type, Type) of
		<{NType,NE}> when 'true' ->
		    %% Line 1645
		    apply 'rel_type'/3
			(Ts, [NE|L], NType)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1646
	  <[],[],'_'> when 'true' ->
	      %% Line 1647
	      apply 'empty_set'/0
		  ()
	  %% Line 1648
	  <[],SL,Type>
	      when call 'erlang':'is_tuple'
		    (Type) ->
	      let <_cor4> =
		  %% Line 1649
		  call 'lists':'usort'
		      (SL)
	      in  %% Line 1649
		  {'Set',_cor4,Type}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rel_type',3}}] )
	    -| ['compiler_generated'] )
	end
'a_func'/2 =
    %% Line 1652
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1653
	    apply 'is_type'/1
		(_cor0)
	in  %% Line 1653
	    case <_cor0,_cor2> of
	      %% Line 1654
	      <[Type = {DT,RT}|[]],'true'>
		  when let <_cor3> =
			call 'erlang':'is_atom'
			    (DT)
		    in  let <_cor4> =
			    %% Line 1655
			    call 'erlang':'is_atom'
				(RT)
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  %% Line 1656
		  apply 'func'/2
		      (_cor1, Type)
	      %% Line 1657
	      <[Type|[]],'true'> when 'true' ->
		  let <_cor7> =
		      %% Line 1658
		      ( fun (_cor5) ->
			    case _cor5 of
			      <{_cor11,_cor12}> when 'true' ->
				  'true'
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'-a_func/2-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-a_func/2-fun-0-'}}] )
		  in  %% Line 1658
		      apply 'func_type'/4
			  (_cor1, [], Type, _cor7)
	      ( <_fol1168,_fol1169> when 'true' ->
		    let <_cor8> = {_fol1168,_fol1169}
		    in  primop 'match_fail'
			    ({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'func'/2 =
    %% Line 1661
    fun (_cor1,_cor0) ->
	let <L> =
	    %% Line 1662
	    call 'lists':'usort'
		(_cor1)
	in  %% Line 1663
	    apply 'func'/4
		(L, L, L, _cor0)
'func'/4 =
    %% Line 1665
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{X,_cor8}|Ts],X0,L,Type>
	      when call 'erlang':'/='
		    (X,
		     X0) ->
	      %% Line 1666
	      apply 'func'/4
		  (Ts, X, L, Type)
	  %% Line 1667
	  <[{X,_cor9}|_X_Ts],X0,_X_L,_X_Type>
	      when call 'erlang':'=='
		    (X,
		     X0) ->
	      %% Line 1668
	      'bad_function'
	  %% Line 1669
	  <[],_X_X0,L,Type> when 'true' ->
	      %% Line 1670
	      {'Set',L,Type}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'func',4}}] )
	    -| ['compiler_generated'] )
	end
'fam'/2 =
    %% Line 1673
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1674
	    apply 'is_type'/1
		(_cor0)
	in  %% Line 1674
	    case <_cor0,_cor2> of
	      %% Line 1675
	      <[Type = {DT,[RT|[]]}|[]],'true'>
		  when let <_cor3> =
			call 'erlang':'is_atom'
			    (DT)
		    in  let <_cor4> =
			    %% Line 1676
			    call 'erlang':'is_atom'
				(RT)
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  %% Line 1677
		  apply 'fam2'/2
		      (_cor1, Type)
	      %% Line 1678
	      <[Type|[]],'true'> when 'true' ->
		  let <_cor7> =
		      %% Line 1679
		      ( fun (_cor5) ->
			    case _cor5 of
			      <{_cor11,[_cor12|[]]}> when 'true' ->
				  'true'
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'-fam/2-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-fam/2-fun-0-'}}] )
		  in  %% Line 1679
		      apply 'func_type'/4
			  (_cor1, [], Type, _cor7)
	      ( <_fol1174,_fol1175> when 'true' ->
		    let <_cor8> = {_fol1174,_fol1175}
		    in  primop 'match_fail'
			    ({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'fam2'/2 =
    %% Line 1682
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Type> when 'true' ->
	      %% Line 1683
	      {'Set',[],Type}
	  %% Line 1684
	  <Ts,Type> when 'true' ->
	      let <_cor2> =
		  %% Line 1685
		  call 'lists':'sort'
		      (Ts)
	      in  %% Line 1685
		  apply 'fam2'/4
		      (_cor2, Ts, [], Type)
	end
'fam2'/4 =
    %% Line 1687
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{I,L}|T],I0,SL,Type>
	      when call 'erlang':'/='
		    (I,
		     I0) ->
	      let <_cor4> =
		  %% Line 1688
		  call 'lists':'usort'
		      (L)
	      in  %% Line 1688
		  apply 'fam2'/4
		      (T, I, [{I,_cor4}|SL], Type)
	  %% Line 1689
	  <[{I,L}|T],I0,SL,Type>
	      when call 'erlang':'=='
		    (I,
		     I0) ->
	      let <_cor5> =
		  %% Line 1690
		  call 'lists':'usort'
		      (L)
	      in  %% Line 1690
		  case <_cor5,SL> of
		    %% Line 1691
		    <NL,[{_X_I,NL1}|_cor12]>
			when call 'erlang':'=='
			      (NL,
			       NL1) ->
			%% Line 1692
			apply 'fam2'/4
			    (T, I0, SL, Type)
		    %% Line 1693
		    <_fol1178,_fol1179> when 'true' ->
			%% Line 1694
			'bad_function'
		  end
	  %% Line 1696
	  <[],_X_I0,SL,Type> when 'true' ->
	      let <_cor7> =
		  %% Line 1697
		  call 'lists':'reverse'
		      (SL)
	      in  %% Line 1697
		  {'Set',_cor7,Type}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fam2',4}}] )
	    -| ['compiler_generated'] )
	end
'func_type'/4 =
    %% Line 1699
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E|T],SL,Type,F> when 'true' ->
	      %% Line 1700
	      case apply 'make_element'/3
		       (E, Type, Type) of
		<{NType,NE}> when 'true' ->
		    %% Line 1701
		    apply 'func_type'/4
			(T, [NE|SL], NType, F)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1702
	  <[],[],'_',_X_F> when 'true' ->
	      %% Line 1703
	      apply 'empty_set'/0
		  ()
	  %% Line 1704
	  <[],SL,Type,F> when 'true' ->
	      %% Line 1705
	      case apply F
		       (Type) of
		<'true'> when 'true' ->
		    let <NL> =
			%% Line 1706
			call 'lists':'usort'
			    (SL)
		    in  %% Line 1707
			apply 'check_function'/2
			    (NL, {'Set',NL,Type})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'func_type',4}}] )
	    -| ['compiler_generated'] )
	end
'setify'/2 =
    %% Line 1709
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,[Atom|[]]>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Atom)
		in  let <_cor3> =
			call 'erlang':'=/='
			    (Atom, '_')
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 1710
		  call 'lists':'usort'
		      (L)
	      in  %% Line 1710
		  {'Set',_cor4,Atom}
	  %% Line 1711
	  <L,[Type0|[]]> when 'true' ->
	      let <_cor5> =
		  catch
		      %% Line 1712
		      apply 'is_no_lists'/1
			  (Type0)
	      in  %% Line 1712
		  case _cor5 of
		    %% Line 1713
		    <{'EXIT',_cor11}> when 'true' ->
			%% Line 1714
			case apply 'create'/4
				 (L, Type0, Type0, []) of
			  <{[Type|[]],Set}> when 'true' ->
			      %% Line 1715
			      {'Set',Set,Type}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    %% Line 1716
		    <N>
			when call 'erlang':'is_integer'
			      (_cor5) ->
			%% Line 1717
			apply 'rel'/3
			    (L, N, Type0)
		    %% Line 1718
		    <Sizes> when 'true' ->
			%% Line 1719
			apply 'make_oset'/4
			    (L, Sizes, L, Type0)
		  end
	  %% Line 1721
	  <E,Type0> when 'true' ->
	      %% Line 1722
	      case apply 'make_element'/3
		       (E, Type0, Type0) of
		<{Type,OrdSet}> when 'true' ->
		    %% Line 1723
		    {'OrdSet',OrdSet,Type}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	end
'is_no_lists'/1 =
    %% Line 1725
    fun (_cor0) ->
	case _cor0 of
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <Sz> =
		  %% Line 1726
		  call 'erlang':'tuple_size'
		      (T)
	      in  %% Line 1727
		  apply 'is_no_lists'/4
		      (T, Sz, Sz, [])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'is_no_lists',1}}] )
	    -| ['compiler_generated'] )
	end
'is_no_lists'/4 =
    %% Line 1729
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_T,0,Sz,[]> when 'true' ->
	      %% Line 1730
	      Sz
	  %% Line 1731
	  <_X_T,0,Sz,L> when 'true' ->
	      %% Line 1732
	      {Sz,L}
	  %% Line 1733
	  <T,I,Sz,L>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (I, T)
		    in  call 'erlang':'is_atom'
			    (_cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 1734
		  call 'erlang':'-'
		      (I, 1)
	      in  %% Line 1734
		  apply 'is_no_lists'/4
		      (T, _cor5, Sz, L)
	  %% Line 1735
	  <T,I,Sz,L> when 'true' ->
	      let <_cor8> =
		  %% Line 1736
		  call 'erlang':'-'
		      (I, 1)
	      in  let <_cor6> =
		      %% Line 1736
		      call 'erlang':'element'
			  (I, T)
		  in  let <_cor7> =
			  %% Line 1736
			  apply 'is_no_lists'/1
			      (_cor6)
		      in  %% Line 1736
			  apply 'is_no_lists'/4
			      (T, _cor8, Sz, [{I,_cor7}|L])
	end
'create'/4 =
    %% Line 1738
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],T,T0,L> when 'true' ->
	      %% Line 1739
	      case apply 'make_element'/3
		       (E, T, T0) of
		<{NT,S}> when 'true' ->
		    %% Line 1740
		    apply 'create'/4
			(Es, NT, T0, [S|L])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1741
	  <[],T,_X_T0,L> when 'true' ->
	      let <_cor5> =
		  %% Line 1742
		  call 'lists':'usort'
		      (L)
	      in  %% Line 1742
		  {[T|[]],_cor5}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'create',4}}] )
	    -| ['compiler_generated'] )
	end
'make_element'/3 =
    %% Line 1744
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <C,'_',_X_T0> when 'true' ->
	      %% Line 1745
	      apply 'make_element'/1
		  (C)
	  %% Line 1746
	  <C,Atom,'_'>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (Atom)
		    in  let <_cor4> =
			    %% Line 1747
			    call 'erlang':'is_list'
				(C)
			in  let <_cor5> =
				%% Line 1747
				call 'erlang':'not'
				    (_cor4)
			    in  let <_cor6> =
				    %% Line 1747
				    call 'erlang':'is_tuple'
					(C)
				in  let <_cor7> =
					%% Line 1747
					call 'erlang':'not'
					    (_cor6)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor5, _cor7)
					in  call 'erlang':'and'
						(_cor3, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1748
	      {Atom,C}
	  %% Line 1749
	  <C,Atom,_cor21>
	      when let <_cor22> =
		    call 'erlang':'=:='
			(_cor21, Atom)
		in  let <_cor23> =
			call 'erlang':'is_atom'
			    (Atom)
		    in  call 'erlang':'and'
			    (_cor22, _cor23) ->
	      %% Line 1750
	      {Atom,C}
	  %% Line 1751
	  <T,TT,'_'>
	      when try
		    let <_cor10> =
			call 'erlang':'tuple_size'
			    (T)
		    in  let <_cor9> =
			    call 'erlang':'tuple_size'
				(TT)
			in  call 'erlang':'=:='
				(_cor10, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 1752
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor11> =
		      %% Line 1752
		      call 'erlang':'tuple_to_list'
			  (TT)
		  in  %% Line 1752
		      apply 'make_tuple'/5
			  (_cor12, _cor11, [], [], '_')
	  %% Line 1753
	  <T,TT,T0>
	      when try
		    let <_cor14> =
			call 'erlang':'tuple_size'
			    (T)
		    in  let <_cor13> =
			    call 'erlang':'tuple_size'
				(TT)
			in  call 'erlang':'=:='
				(_cor14, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor17> =
		  %% Line 1754
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor16> =
		      %% Line 1754
		      call 'erlang':'tuple_to_list'
			  (TT)
		  in  let <_cor15> =
			  %% Line 1754
			  call 'erlang':'tuple_to_list'
			      (T0)
		      in  %% Line 1754
			  apply 'make_tuple'/5
			      (_cor17, _cor16, [], [], _cor15)
	  %% Line 1755
	  <L,[LT|[]],'_'>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1756
	      apply 'create'/4
		  (L, LT, '_', [])
	  %% Line 1757
	  <L,[LT|[]],[T0|[]]>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1758
	      apply 'create'/4
		  (L, LT, T0, [])
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'make_element',3}}] )
	    -| ['compiler_generated'] )
	end
'make_tuple'/5 =
    %% Line 1760
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],[T|Ts],NT,L,T0>
	      when call 'erlang':'=:='
		    (T0,
		     '_') ->
	      %% Line 1761
	      case apply 'make_element'/3
		       (E, T, T0) of
		<{ET,ES}> when 'true' ->
		    %% Line 1762
		    apply 'make_tuple'/5
			(Es, Ts, [ET|NT], [ES|L], T0)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1763
	  <[E|Es],[T|Ts],NT,L,[T0|T0s]> when 'true' ->
	      %% Line 1764
	      case apply 'make_element'/3
		       (E, T, T0) of
		<{ET,ES}> when 'true' ->
		    %% Line 1765
		    apply 'make_tuple'/5
			(Es, Ts, [ET|NT], [ES|L], T0s)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1766
	  <[],[],NT,L,_X_T0s>
	      when call 'erlang':'=/='
		    (NT,
		     []) ->
	      let <_cor9> =
		  %% Line 1767
		  call 'lists':'reverse'
		      (NT)
	      in  let <_cor10> =
		      %% Line 1767
		      call 'erlang':'list_to_tuple'
			  (_cor9)
		  in  let <_cor7> =
			  %% Line 1767
			  call 'lists':'reverse'
			      (L)
		      in  let <_cor8> =
			      %% Line 1767
			      call 'erlang':'list_to_tuple'
				  (_cor7)
			  in  %% Line 1767
			      {_cor10,_cor8}
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'make_tuple',5}}] )
	    -| ['compiler_generated'] )
	end
'make_element'/1 =
    %% Line 1770
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when try
		    let <_cor1> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'not'
				(_cor1)
			in  let <_cor3> =
				call 'erlang':'is_tuple'
				    (_cor0)
			    in  let <_cor4> =
				    call 'erlang':'not'
					(_cor3)
				in  call 'erlang':'and'
					(_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1771
	      {'atom',C}
	  %% Line 1772
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor5> =
		  %% Line 1773
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 1773
		  apply 'make_tuple'/3
		      (_cor5, [], [])
	  %% Line 1774
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1775
	      apply 'create'/4
		  (L, '_', '_', [])
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'make_element',1}}] )
	    -| ['compiler_generated'] )
	end
'make_tuple'/3 =
    %% Line 1777
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],T,L> when 'true' ->
	      %% Line 1778
	      case apply 'make_element'/1
		       (E) of
		<{ET,ES}> when 'true' ->
		    %% Line 1779
		    apply 'make_tuple'/3
			(Es, [ET|T], [ES|L])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1780
	  <[],T,L>
	      when call 'erlang':'=/='
		    (T,
		     []) ->
	      let <_cor6> =
		  %% Line 1781
		  call 'lists':'reverse'
		      (T)
	      in  let <_cor7> =
		      %% Line 1781
		      call 'erlang':'list_to_tuple'
			  (_cor6)
		  in  let <_cor4> =
			  %% Line 1781
			  call 'lists':'reverse'
			      (L)
		      in  let <_cor5> =
			      %% Line 1781
			      call 'erlang':'list_to_tuple'
				  (_cor4)
			  in  %% Line 1781
			      {_cor7,_cor5}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'make_tuple',3}}] )
	    -| ['compiler_generated'] )
	end
'make_oset'/4 =
    %% Line 1783
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T|Ts],Szs,L,Type> when 'true' ->
	      %% Line 1784
	      case apply 'test_oset'/3
		       (Szs, T, T) of
		<'true'> when 'true' ->
		    %% Line 1785
		    apply 'make_oset'/4
			(Ts, Szs, L, Type)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1786
	  <[],_X_Szs,L,Type> when 'true' ->
	      let <_cor5> =
		  %% Line 1787
		  call 'lists':'usort'
		      (L)
	      in  %% Line 1787
		  {'Set',_cor5,Type}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'make_oset',4}}] )
	    -| ['compiler_generated'] )
	end
'test_oset'/3 =
    %% Line 1790
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Sz,Args},T,T0>
	      when try
		    let <_cor3> =
			call 'erlang':'tuple_size'
			    (T)
		    in  call 'erlang':'=:='
			    (_cor3, Sz)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1791
	      apply 'test_oset_args'/3
		  (Args, T, T0)
	  %% Line 1792
	  <Sz,T,_X_T0>
	      when try
		    let <_cor4> =
			call 'erlang':'tuple_size'
			    (T)
		    in  call 'erlang':'=:='
			    (_cor4, Sz)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1793
	      'true'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'test_oset',3}}] )
	    -| ['compiler_generated'] )
	end
'test_oset_args'/3 =
    %% Line 1795
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Arg,Szs}|Ss],T,T0> when 'true' ->
	      let <_cor3> =
		  %% Line 1796
		  call 'erlang':'element'
		      (Arg, T)
	      in  %% Line 1796
		  case apply 'test_oset'/3
			   (Szs, _cor3, T0) of
		    <'true'> when 'true' ->
			%% Line 1797
			apply 'test_oset_args'/3
			    (Ss, T, T0)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1798
	  <[],_X_T,_X_T0> when 'true' ->
	      %% Line 1799
	      'true'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'test_oset_args',3}}] )
	    -| ['compiler_generated'] )
	end
'list_of_sets'/3 =
    %% Line 1801
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[S|Ss],Type,L> when 'true' ->
	      %% Line 1802
	      apply 'list_of_sets'/3
		  (Ss, Type, [{'Set',S,Type}|L])
	  %% Line 1803
	  <[],_X_Type,L> when 'true' ->
	      %% Line 1804
	      call 'lists':'reverse'
		  (L)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'list_of_sets',3}}] )
	    -| ['compiler_generated'] )
	end
'list_of_ordsets'/3 =
    %% Line 1806
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[S|Ss],Type,L> when 'true' ->
	      %% Line 1807
	      apply 'list_of_ordsets'/3
		  (Ss, Type, [{'OrdSet',S,Type}|L])
	  %% Line 1808
	  <[],_X_Type,L> when 'true' ->
	      %% Line 1809
	      call 'lists':'reverse'
		  (L)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'list_of_ordsets',3}}] )
	    -| ['compiler_generated'] )
	end
'tuple_of_sets'/3 =
    %% Line 1811
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[S|Ss],[[Type|[]]|Types],L> when 'true' ->
	      %% Line 1812
	      apply 'tuple_of_sets'/3
		  (Ss, Types, [{'Set',S,Type}|L])
	  %% Line 1813
	  <[S|Ss],[Type|Types],L> when 'true' ->
	      %% Line 1814
	      apply 'tuple_of_sets'/3
		  (Ss, Types, [{'OrdSet',S,Type}|L])
	  %% Line 1815
	  <[],[],L> when 'true' ->
	      let <_cor3> =
		  %% Line 1816
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 1816
		  call 'erlang':'list_to_tuple'
		      (_cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'tuple_of_sets',3}}] )
	    -| ['compiler_generated'] )
	end
'spec'/4 =
    %% Line 1818
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],Fun,Type,L> when 'true' ->
	      let <_cor4> =
		  %% Line 2706
		  ( case <E,Type> of
		      ( <_fol1184,_fol1185>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_list'
								     -| ['compiler_generated'] )
				    (_fol1184)
				-| ['compiler_generated'] ) ->
			    %% Line 2707
			    ( {( 'Set'
				 -| ['compiler_generated'] ),_fol1184,_fol1185}
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 2708
		      ( <( T
			   -| ['compiler_generated'] ),_fol1186> when ( 'true'
									-| ['compiler_generated'] ) ->
			    %% Line 2709
			    ( {( 'OrdSet'
				 -| ['compiler_generated'] ),( T
							       -| ['compiler_generated'] ),_fol1186}
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 1819
		  case apply Fun
			   (_cor4) of
		    %% Line 1820
		    <'true'> when 'true' ->
			%% Line 1821
			apply 'spec'/4
			    (Es, Fun, Type, [E|L])
		    %% Line 1822
		    <'false'> when 'true' ->
			%% Line 1823
			apply 'spec'/4
			    (Es, Fun, Type, L)
		    %% Line 1824
		    <_cor10> when 'true' ->
			%% Line 1825
			'badarg'
		  end
	  %% Line 1827
	  <[],_X_Fun,_X_Type,L> when 'true' ->
	      %% Line 1828
	      call 'lists':'reverse'
		  (L)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'spec',4}}] )
	    -| ['compiler_generated'] )
	end
'specification'/3 =
    %% Line 1830
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],Fun,L> when 'true' ->
	      %% Line 1831
	      case apply Fun
		       (E) of
		%% Line 1832
		<'true'> when 'true' ->
		    %% Line 1833
		    apply 'specification'/3
			(Es, Fun, [E|L])
		%% Line 1834
		<'false'> when 'true' ->
		    %% Line 1835
		    apply 'specification'/3
			(Es, Fun, L)
		%% Line 1836
		<_cor7> when 'true' ->
		    %% Line 1837
		    'badarg'
	      end
	  %% Line 1839
	  <[],_X_Fun,L> when 'true' ->
	      %% Line 1840
	      call 'lists':'reverse'
		  (L)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'specification',3}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/3 =
    %% Line 1843
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H1|T1],[H2|T2],L>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1844
	      apply 'intersection1'/4
		  (T1, T2, L, H2)
	  %% Line 1845
	  <[H1|T1],[H2|T2],L>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1846
	      apply 'intersection'/3
		  (T1, T2, [H1|L])
	  %% Line 1847
	  <[H1|T1],[_X_H2|T2],L> when 'true' ->
	      %% Line 1848
	      apply 'intersection2'/4
		  (T1, T2, L, H1)
	  %% Line 1849
	  <_cor6,_cor7,L> when 'true' ->
	      %% Line 1850
	      call 'lists':'reverse'
		  (L)
	end
'intersection1'/4 =
    %% Line 1852
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1853
	      apply 'intersection1'/4
		  (T1, T2, L, H2)
	  %% Line 1854
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1855
	      apply 'intersection'/3
		  (T1, T2, [H1|L])
	  %% Line 1856
	  <[H1|T1],T2,L,_X_H2> when 'true' ->
	      %% Line 1857
	      apply 'intersection2'/4
		  (T1, T2, L, H1)
	  %% Line 1858
	  <_cor8,_cor9,L,_cor10> when 'true' ->
	      %% Line 1859
	      call 'lists':'reverse'
		  (L)
	end
'intersection2'/4 =
    %% Line 1861
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1862
	      apply 'intersection2'/4
		  (T1, T2, L, H1)
	  %% Line 1863
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1864
	      apply 'intersection'/3
		  (T1, T2, [H1|L])
	  %% Line 1865
	  <T1,[H2|T2],L,_X_H1> when 'true' ->
	      %% Line 1866
	      apply 'intersection1'/4
		  (T1, T2, L, H2)
	  %% Line 1867
	  <_cor8,_cor9,L,_cor10> when 'true' ->
	      %% Line 1868
	      call 'lists':'reverse'
		  (L)
	end
'difference'/3 =
    %% Line 1870
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H1|T1],[H2|T2],L>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1871
	      apply 'diff'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1872
	  <[H1|T1],[H2|T2],L>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1873
	      apply 'difference'/3
		  (T1, T2, L)
	  %% Line 1874
	  <[H1|T1],[_X_H2|T2],L> when 'true' ->
	      %% Line 1875
	      apply 'diff2'/4
		  (T1, T2, L, H1)
	  %% Line 1876
	  <L1,_cor6,L> when 'true' ->
	      %% Line 1877
	      call 'lists':'reverse'
		  (L, L1)
	end
'diff'/4 =
    %% Line 1879
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1880
	      apply 'diff'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1881
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1882
	      apply 'difference'/3
		  (T1, T2, L)
	  %% Line 1883
	  <[H1|T1],T2,L,_X_H2> when 'true' ->
	      %% Line 1884
	      apply 'diff2'/4
		  (T1, T2, L, H1)
	  %% Line 1885
	  <_cor8,_cor9,L,_cor10> when 'true' ->
	      %% Line 1886
	      call 'lists':'reverse'
		  (L)
	end
'diff2'/4 =
    %% Line 1888
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1889
	      apply 'diff2'/4
		  (T1, T2, L, H1)
	  %% Line 1890
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1891
	      apply 'difference'/3
		  (T1, T2, L)
	  %% Line 1892
	  <T1,[H2|T2],L,H1> when 'true' ->
	      %% Line 1893
	      apply 'diff'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1894
	  <T1,_cor8,L,H1> when 'true' ->
	      %% Line 1895
	      call 'lists':'reverse'
		  (L, [H1|T1])
	end
'symdiff'/3 =
    %% Line 1897
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,L> when 'true' ->
	      %% Line 1898
	      apply 'symdiff2'/4
		  (T1, T2, L, H1)
	  %% Line 1899
	  <_cor6,T2,L> when 'true' ->
	      %% Line 1900
	      call 'lists':'reverse'
		  (L, T2)
	end
'symdiff1'/4 =
    %% Line 1902
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1903
	      apply 'symdiff1'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1904
	  <[H1|T1],T2,L,H2>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      ( case %% Line 1905
		     <T1,T2,L> of
		  ( <( [( H1
			  -| ['compiler_generated'] )|_fol1187]
		       -| ['compiler_generated'] ),_fol1188,_fol1189> when ( 'true'
									     -| ['compiler_generated'] ) ->
			( apply ( 'symdiff2'/4
				  -| ['compiler_generated'] )
			      (_fol1187, _fol1188, _fol1189, ( H1
							       -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <( _cor6
		       -| ['compiler_generated'] ),_fol1190,_fol1191> when ( 'true'
									     -| ['compiler_generated'] ) ->
			( call ( 'lists'
				 -| ['compiler_generated'] ):( 'reverse'
							       -| ['compiler_generated'] )
			      (_fol1191, _fol1190)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1906
	  <[H1|T1],T2,L,H2> when 'true' ->
	      %% Line 1907
	      apply 'symdiff2'/4
		  (T1, T2, [H2|L], H1)
	  %% Line 1908
	  <_cor8,T2,L,H2> when 'true' ->
	      %% Line 1909
	      call 'lists':'reverse'
		  (L, [H2|T2])
	end
'symdiff2'/4 =
    %% Line 1911
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1912
	      apply 'symdiff2'/4
		  (T1, T2, [H2|L], H1)
	  %% Line 1913
	  <T1,[H2|T2],L,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      ( case %% Line 1914
		     <T1,T2,L> of
		  ( <( [( H1
			  -| ['compiler_generated'] )|_fol1192]
		       -| ['compiler_generated'] ),_fol1193,_fol1194> when ( 'true'
									     -| ['compiler_generated'] ) ->
			( apply ( 'symdiff2'/4
				  -| ['compiler_generated'] )
			      (_fol1192, _fol1193, _fol1194, ( H1
							       -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <( _cor6
		       -| ['compiler_generated'] ),_fol1195,_fol1196> when ( 'true'
									     -| ['compiler_generated'] ) ->
			( call ( 'lists'
				 -| ['compiler_generated'] ):( 'reverse'
							       -| ['compiler_generated'] )
			      (_fol1196, _fol1195)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1915
	  <T1,[H2|T2],L,H1> when 'true' ->
	      %% Line 1916
	      apply 'symdiff1'/4
		  (T1, T2, [H1|L], H2)
	  %% Line 1917
	  <T1,_cor8,L,H1> when 'true' ->
	      %% Line 1918
	      call 'lists':'reverse'
		  (L, [H1|T1])
	end
'sympart'/6 =
    %% Line 1920
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],[H2|T2],L1,L12,L2,T>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1921
	      apply 'sympart1'/7
		  (T1, T2, [H1|L1], L12, L2, T, H2)
	  %% Line 1922
	  <[H1|T1],[H2|T2],L1,L12,L2,T>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1923
	      apply 'sympart'/6
		  (T1, T2, L1, [H1|L12], L2, T)
	  %% Line 1924
	  <[H1|T1],[H2|T2],L1,L12,L2,T> when 'true' ->
	      %% Line 1925
	      apply 'sympart2'/7
		  (T1, T2, L1, L12, [H2|L2], T, H1)
	  %% Line 1926
	  <S1,[],L1,L12,L2,T> when 'true' ->
	      let <_cor8> =
		  %% Line 1927
		  call 'lists':'reverse'
		      (L1, S1)
	      in  let <_cor7> =
		      %% Line 1928
		      call 'lists':'reverse'
			  (L12)
		  in  let <_cor6> =
			  %% Line 1929
			  call 'lists':'reverse'
			      (L2)
		      in  %% Line 1927
			  {{'Set',_cor8,T},%% Line 1928
					   {'Set',_cor7,T},%% Line 1929
							   {'Set',_cor6,T}}
	  %% Line 1930
	  <_cor18,S2,L1,L12,L2,T> when 'true' ->
	      let <_cor11> =
		  %% Line 1931
		  call 'lists':'reverse'
		      (L1)
	      in  let <_cor10> =
		      %% Line 1932
		      call 'lists':'reverse'
			  (L12)
		  in  let <_cor9> =
			  %% Line 1933
			  call 'lists':'reverse'
			      (L2, S2)
		      in  %% Line 1931
			  {{'Set',_cor11,T},%% Line 1932
					    {'Set',_cor10,T},%% Line 1933
							     {'Set',_cor9,T}}
	end
'sympart1'/7 =
    %% Line 1935
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,L1,L12,L2,T,H2>
	      when call 'erlang':'<'
		    (H1,
		     H2) ->
	      %% Line 1936
	      apply 'sympart1'/7
		  (T1, T2, [H1|L1], L12, L2, T, H2)
	  %% Line 1937
	  <[H1|T1],T2,L1,L12,L2,T,H2>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1938
	      apply 'sympart'/6
		  (T1, T2, L1, [H1|L12], L2, T)
	  %% Line 1939
	  <[H1|T1],T2,L1,L12,L2,T,H2> when 'true' ->
	      %% Line 1940
	      apply 'sympart2'/7
		  (T1, T2, L1, L12, [H2|L2], T, H1)
	  %% Line 1941
	  <_cor17,T2,L1,L12,L2,T,H2> when 'true' ->
	      let <_cor9> =
		  %% Line 1942
		  call 'lists':'reverse'
		      (L1)
	      in  let <_cor8> =
		      %% Line 1943
		      call 'lists':'reverse'
			  (L12)
		  in  let <_cor7> =
			  %% Line 1944
			  call 'lists':'reverse'
			      (L2, [H2|T2])
		      in  %% Line 1942
			  {{'Set',_cor9,T},%% Line 1943
					   {'Set',_cor8,T},%% Line 1944
							   {'Set',_cor7,T}}
	end
'sympart2'/7 =
    %% Line 1946
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],L1,L12,L2,T,H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1947
	      apply 'sympart2'/7
		  (T1, T2, L1, L12, [H2|L2], T, H1)
	  %% Line 1948
	  <T1,[H2|T2],L1,L12,L2,T,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1949
	      apply 'sympart'/6
		  (T1, T2, L1, [H1|L12], L2, T)
	  %% Line 1950
	  <T1,[H2|T2],L1,L12,L2,T,H1> when 'true' ->
	      %% Line 1951
	      apply 'sympart1'/7
		  (T1, T2, [H1|L1], L12, L2, T, H2)
	  %% Line 1952
	  <T1,_cor17,L1,L12,L2,T,H1> when 'true' ->
	      let <_cor9> =
		  %% Line 1953
		  call 'lists':'reverse'
		      (L1, [H1|T1])
	      in  let <_cor8> =
		      %% Line 1954
		      call 'lists':'reverse'
			  (L12)
		  in  let <_cor7> =
			  %% Line 1955
			  call 'lists':'reverse'
			      (L2)
		      in  %% Line 1953
			  {{'Set',_cor9,T},%% Line 1954
					   {'Set',_cor8,T},%% Line 1955
							   {'Set',_cor7,T}}
	end
'prod'/3 =
    %% Line 1957
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[E|Es]|Xs],T,L> when 'true' ->
	      let <_cor3> =
		  %% Line 1958
		  apply 'prod'/3
		      (Xs, [E|T], L)
	      in  %% Line 1958
		  apply 'prod'/4
		      (Es, Xs, T, _cor3)
	  %% Line 1959
	  <[],T,L> when 'true' ->
	      let <_cor4> =
		  %% Line 1960
		  call 'lists':'reverse'
		      (T)
	      in  let <_cor5> =
		      %% Line 1960
		      call 'erlang':'list_to_tuple'
			  (_cor4)
		  in  %% Line 1960
		      [_cor5|L]
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'prod',3}}] )
	    -| ['compiler_generated'] )
	end
'prod'/4 =
    %% Line 1962
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],Xs,T,L> when 'true' ->
	      let <_cor4> =
		  %% Line 1963
		  apply 'prod'/3
		      (Xs, [E|T], L)
	      in  %% Line 1963
		  apply 'prod'/4
		      (Es, Xs, T, _cor4)
	  %% Line 1964
	  <[],_X_Xs,_X_E,L> when 'true' ->
	      %% Line 1965
	      L
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'prod',4}}] )
	    -| ['compiler_generated'] )
	end
'constant_function'/3 =
    %% Line 1967
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],X,L> when 'true' ->
	      %% Line 1968
	      apply 'constant_function'/3
		  (Es, X, [{E,X}|L])
	  %% Line 1969
	  <[],_X_X,L> when 'true' ->
	      %% Line 1970
	      call 'lists':'reverse'
		  (L)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'constant_function',3}}] )
	    -| ['compiler_generated'] )
	end
'subset'/2 =
    %% Line 1972
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H1|T1],[H2|T2]>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1973
	      apply 'subset'/3
		  (T1, T2, H1)
	  %% Line 1974
	  <[H1|T1],[H2|T2]>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1975
	      apply 'subset'/2
		  (T1, T2)
	  %% Line 1976
	  <L1,_cor4> when 'true' ->
	      %% Line 1977
	      call 'erlang':'=:='
		  (L1, [])
	end
'subset'/3 =
    %% Line 1979
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],H1>
	      when call 'erlang':'>'
		    (H1,
		     H2) ->
	      %% Line 1980
	      apply 'subset'/3
		  (T1, T2, H1)
	  %% Line 1981
	  <T1,[H2|T2],H1>
	      when call 'erlang':'=='
		    (H1,
		     H2) ->
	      %% Line 1982
	      apply 'subset'/2
		  (T1, T2)
	  %% Line 1983
	  <_cor6,_cor7,_cor8> when 'true' ->
	      %% Line 1984
	      'false'
	end
'disjoint'/3 =
    %% Line 1986
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[B|Bs],A,As>
	      when call 'erlang':'<'
		    (A,
		     B) ->
	      %% Line 1987
	      apply 'disjoint'/3
		  (As, B, Bs)
	  %% Line 1988
	  <[B|_X_Bs],A,_X_As>
	      when call 'erlang':'=='
		    (A,
		     B) ->
	      %% Line 1989
	      'false'
	  %% Line 1990
	  <[_X_B|Bs],A,As> when 'true' ->
	      %% Line 1991
	      apply 'disjoint'/3
		  (Bs, A, As)
	  %% Line 1992
	  <_X_Bs,_X_A,_X_As> when 'true' ->
	      %% Line 1993
	      'true'
	end
'lunion'/1 =
    %% Line 1996
    fun (_cor0) ->
	case _cor0 of
	  <[S = [_cor4|[]]|[]]> when 'true' ->
	      %% Line 1997
	      S
	  %% Line 1998
	  <[[]|Ls]> when 'true' ->
	      %% Line 1999
	      apply 'lunion'/1
		  (Ls)
	  %% Line 2000
	  <[S|Ss]> when 'true' ->
	      let <_cor1> =
		  %% Line 2001
		  call 'lists':'last'
		      (S)
	      in  let <_cor2> =
		      %% Line 2001
		      apply 'lunion'/4
			  (Ss, _cor1, [S|[]], [])
		  in  %% Line 2001
		      call 'lists':'umerge'
			  (_cor2)
	  %% Line 2002
	  <[]> when 'true' ->
	      %% Line 2003
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'lunion',1}}] )
	    -| ['compiler_generated'] )
	end
'lunion'/4 =
    %% Line 2005
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[S = [E|[]]|Ss],Last,SL,Ls>
	      when call 'erlang':'>'
		    (E,
		     Last) ->
	      %% Line 2006
	      apply 'lunion'/4
		  (Ss, E, [S|SL], Ls)
	  %% Line 2007
	  <[S|Ss],Last,SL,Ls>
	      when try
		    let <_cor4> =
			call 'erlang':'hd'
			    (S)
		    in  call 'erlang':'>'
			    (_cor4, Last)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 2008
		  call 'lists':'last'
		      (S)
	      in  %% Line 2008
		  apply 'lunion'/4
		      (Ss, _cor5, [S|SL], Ls)
	  %% Line 2009
	  <[S|Ss],_X_Last,SL,Ls> when 'true' ->
	      let <_cor8> =
		  %% Line 2010
		  call 'lists':'last'
		      (S)
	      in  let <_cor6> =
		      %% Line 2010
		      call 'lists':'reverse'
			  (SL)
		  in  let <_cor7> =
			  %% Line 2010
			  call 'lists':'append'
			      (_cor6)
		      in  %% Line 2010
			  apply 'lunion'/4
			      (Ss, _cor8, [S|[]], [_cor7|Ls])
	  %% Line 2011
	  <[],_X_Last,SL,Ls> when 'true' ->
	      let <_cor9> =
		  %% Line 2012
		  call 'lists':'reverse'
		      (SL)
	      in  let <_cor10> =
		      %% Line 2012
		      call 'lists':'append'
			  (_cor9)
		  in  %% Line 2012
		      [_cor10|Ls]
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'lunion',4}}] )
	    -| ['compiler_generated'] )
	end
'lintersection'/2 =
    %% Line 2015
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor5,[]> when 'true' ->
	      %% Line 2016
	      []
	  %% Line 2017
	  <[S|Ss],S0> when 'true' ->
	      let <_cor2> =
		  %% Line 2018
		  apply 'intersection'/3
		      (S, S0, [])
	      in  %% Line 2018
		  apply 'lintersection'/2
		      (Ss, _cor2)
	  %% Line 2019
	  <[],S> when 'true' ->
	      %% Line 2020
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'lintersection',2}}] )
	    -| ['compiler_generated'] )
	end
'can_rel'/2 =
    %% Line 2022
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[S|Ss],L> when 'true' ->
	      %% Line 2023
	      apply 'can_rel'/4
		  (Ss, L, S, S)
	  %% Line 2024
	  <[],L> when 'true' ->
	      %% Line 2025
	      call 'lists':'sort'
		  (L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'can_rel',2}}] )
	    -| ['compiler_generated'] )
	end
'can_rel'/4 =
    %% Line 2027
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Ss,L,[E|Es],S> when 'true' ->
	      %% Line 2028
	      apply 'can_rel'/4
		  (Ss, [{E,S}|L], Es, S)
	  %% Line 2029
	  <Ss,L,_cor8,_X_S> when 'true' ->
	      %% Line 2030
	      apply 'can_rel'/2
		  (Ss, L)
	end
'rel2family'/1 =
    %% Line 2032
    fun (_cor0) ->
	case _cor0 of
	  <[{X,Y}|S]> when 'true' ->
	      %% Line 2033
	      apply 'rel2fam'/4
		  (S, X, [Y|[]], [])
	  %% Line 2034
	  <[]> when 'true' ->
	      %% Line 2035
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'rel2family',1}}] )
	    -| ['compiler_generated'] )
	end
'rel2fam'/4 =
    %% Line 2037
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{X,Y}|S],X0,YL,L>
	      when call 'erlang':'=='
		    (X0,
		     X) ->
	      %% Line 2038
	      apply 'rel2fam'/4
		  (S, X0, [Y|YL], L)
	  %% Line 2039
	  <[{X,Y}|S],X0,[A|[B|YL]],L> when 'true' ->
	      let <_cor4> =
		  %% Line 2040
		  call 'lists':'reverse'
		      (YL, [B|[A|[]]])
	      in  %% Line 2040
		  apply 'rel2fam'/4
		      (S, X, [Y|[]], [{X0,_cor4}|L])
	  %% Line 2041
	  <[{X,Y}|S],X0,YL,L> when 'true' ->
	      %% Line 2042
	      apply 'rel2fam'/4
		  (S, X, [Y|[]], [{X0,YL}|L])
	  %% Line 2043
	  <[],X,YL,L> when 'true' ->
	      let <_cor5> =
		  %% Line 2044
		  call 'lists':'reverse'
		      (YL)
	      in  %% Line 2044
		  call 'lists':'reverse'
		      ([{X,_cor5}|L])
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rel2fam',4}}] )
	    -| ['compiler_generated'] )
	end
'dom'/1 =
    %% Line 2046
    fun (_cor0) ->
	case _cor0 of
	  <[{X,_cor2}|Es]> when 'true' ->
	      %% Line 2047
	      apply 'dom'/3
		  ([], X, Es)
	  %% Line 2048
	  <L = []> when 'true' ->
	      %% Line 2049
	      L
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'dom',1}}] )
	    -| ['compiler_generated'] )
	end
'dom'/3 =
    %% Line 2051
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L,X,[{X1,_cor6}|Es]>
	      when call 'erlang':'=='
		    (X,
		     X1) ->
	      %% Line 2052
	      apply 'dom'/3
		  (L, X, Es)
	  %% Line 2053
	  <L,X,[{Y,_cor7}|Es]> when 'true' ->
	      %% Line 2054
	      apply 'dom'/3
		  ([X|L], Y, Es)
	  %% Line 2055
	  <L,X,[]> when 'true' ->
	      %% Line 2056
	      call 'lists':'reverse'
		  (L, [X|[]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'dom',3}}] )
	    -| ['compiler_generated'] )
	end
'ran'/2 =
    %% Line 2058
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_cor4,Y}|Es],L> when 'true' ->
	      %% Line 2059
	      apply 'ran'/2
		  (Es, [Y|L])
	  %% Line 2060
	  <[],L> when 'true' ->
	      %% Line 2061
	      call 'lists':'usort'
		  (L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'ran',2}}] )
	    -| ['compiler_generated'] )
	end
'relprod'/2 =
    %% Line 2063
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2064
	    apply 'relprod1'/2
		(_cor1, _cor0)
	in  %% Line 2064
	    call 'lists':'usort'
		(_cor2)
'relprod1'/2 =
    %% Line 2066
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Ay,Ax}|A],B> when 'true' ->
	      %% Line 2067
	      apply 'relprod1'/5
		  (B, Ay, Ax, A, [])
	  %% Line 2068
	  <_X_A,_X_B> when 'true' ->
	      %% Line 2069
	      []
	end
'relprod1'/5 =
    %% Line 2071
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Bx,_X_By}|B],Ay,Ax,A,L>
	      when call 'erlang':'>'
		    (Ay,
		     Bx) ->
	      %% Line 2072
	      apply 'relprod1'/5
		  (B, Ay, Ax, A, L)
	  %% Line 2073
	  <[{Bx,By}|B],Ay,Ax,A,L>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2074
	      apply 'relprod'/8
		  (B, Bx, By, A, [{Ax,By}|L], Ax, B, Ay)
	  %% Line 2075
	  <[{Bx,By}|B],_X_Ay,_X_Ax,A,L> when 'true' ->
	      %% Line 2076
	      apply 'relprod2'/5
		  (B, Bx, By, A, L)
	  %% Line 2077
	  <_X_B,_X_Ay,_X_Ax,_X_A,L> when 'true' ->
	      %% Line 2078
	      L
	end
'relprod2'/5 =
    %% Line 2080
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <B,Bx,By,[{Ay,_X_Ax}|A],L>
	      when call 'erlang':'<'
		    (Ay,
		     Bx) ->
	      %% Line 2081
	      apply 'relprod2'/5
		  (B, Bx, By, A, L)
	  %% Line 2082
	  <B,Bx,By,[{Ay,Ax}|A],L>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2083
	      apply 'relprod'/8
		  (B, Bx, By, A, [{Ax,By}|L], Ax, B, Ay)
	  %% Line 2084
	  <B,_X_Bx,_X_By,[{Ay,Ax}|A],L> when 'true' ->
	      %% Line 2085
	      apply 'relprod1'/5
		  (B, Ay, Ax, A, L)
	  %% Line 2086
	  <_cor10,_cor11,_cor12,_cor13,L> when 'true' ->
	      %% Line 2087
	      L
	end
'relprod'/8 =
    %% Line 2089
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <B0,Bx0,By0,A0,L,Ax,[{Bx,By}|B],Ay>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2090
	      apply 'relprod'/8
		  (B0, Bx0, By0, A0, [{Ax,By}|L], Ax, B, Ay)
	  %% Line 2091
	  <B0,Bx0,By0,A0,L,_X_Ax,_X_B,_X_Ay> when 'true' ->
	      %% Line 2092
	      apply 'relprod2'/5
		  (B0, Bx0, By0, A0, L)
	end
'relprod_n'/4 =
    %% Line 2094
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_R,_X_EmptyG,_X_IsR> when 'true' ->
	      %% Line 2095
	      {'error','badarg'}
	  %% Line 2096
	  <RL,R,EmptyR,IsR> when 'true' ->
	      %% Line 2097
	      case apply 'domain_type'/2
		       (RL, '_') of
		%% Line 2098
		<Error = {'error',_X_Reason}> when 'true' ->
		    %% Line 2099
		    Error
		%% Line 2100
		<DType> when 'true' ->
		    let <_cor4> =
			%% Line 2101
			call 'lists':'any'
			    (( 'is_empty_set'/1
			       -| [{'id',{0,0,'-relprod_n/4-fun-0-'}}] ), RL)
		    in  let <Empty> =
			    %% Line 2101
			    call 'erlang':'or'
				(_cor4, EmptyR)
			in  let <RType> =
				%% Line 2102
				apply 'range_type'/2
				    (RL, [])
			    in  let <Type> = {%% Line 2103
				     DType,%% Line 2103
					   RType}
				in  let <_cor20> =
					%% Line 2105
					case Empty of
					  %% Line 2106
					  <'true'>
					      when let <_cor8> =
						    call 'erlang':'=:='
							(DType, '_')
						in  let <_cor9> =
							call 'erlang':'=:='
							    (RType, '_')
						    in  call 'erlang':'or'
							    (_cor8, _cor9) ->
					      %% Line 2107
					      apply 'empty_set'/0
						  ()
					  %% Line 2108
					  <'true'> when 'true' ->
					      %% Line 2109
					      {'Set',[],Type}
					  %% Line 2110
					  <'false'> when 'true' ->
					      %% Line 2111
					      ( case apply 'relprod_n'/1
							 (RL) of
						  ( <( {'Set',_rec182,_cor28}
						       -| ['compiler_generated'] )> when 'true' ->
							let <Sz> =
							    %% Line 2112
							    call 'erlang':'length'
								(RL)
							in  let <Fun> =
								%% Line 2113
								( fun (_cor15) ->
								      case _cor15 of
									<{X,A}> when 'true' ->
									    let <_cor14> =
										apply 'flat'/3
										    (Sz, A, [])
									    in  {X,_cor14}
									( <_cor16> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor16})
										-| [{'function_name',{'-relprod_n/4-fun-1-',1}}] )
									  -| ['compiler_generated'] )
								      end
								  -| [{'id',{0,0,'-relprod_n/4-fun-1-'}}] )
							    in  let <_cor18> =
								    %% Line 2114
								    call 'lists':'map'
									(Fun, _rec182)
								in  %% Line 2114
								    {'Set',_cor18,Type}
						    -| ['compiler_generated'] )
						  ( <_cor29> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','Set'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_cor19> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor19})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 2116
					case IsR of
					  %% Line 2117
					  <'true'> when 'true' ->
					      apply 'relative_product'/2
						  (_cor20, R)
					  %% Line 2118
					  <'false'> when 'true' ->
					      _cor20
					  ( <_cor22> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor22})
					    -| ['compiler_generated'] )
					end
	      end
	end
'relprod_n'/1 =
    %% Line 2122
    fun (_cor0) ->
	case _cor0 of
	  <[R|Rs]> when 'true' ->
	      %% Line 2123
	      apply 'relprod_n'/2
		  (Rs, R)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'relprod_n',1}}] )
	    -| ['compiler_generated'] )
	end
'relprod_n'/2 =
    %% Line 2125
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],R> when 'true' ->
	      %% Line 2126
	      R
	  %% Line 2127
	  <[R|Rs],R0> when 'true' ->
	      let <T> =
		  %% Line 2128
		  apply 'raise_element'/2
		      (R0, 1)
	      in  let <R1> =
		      %% Line 2129
		      apply 'relative_product1'/2
			  (T, R)
		  in  let <_cor6> =
			  %% Line 2130
			  ( fun (_cor4) ->
				case _cor4 of
				  <{{X,A},AS}> when 'true' ->
				      {X,{A,AS}}
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'-relprod_n/2-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-relprod_n/2-fun-0-'}}] )
		      in  let <NR> =
			      %% Line 2130
			      apply 'projection'/2
				  ({'external',_cor6}, R1)
			  in  %% Line 2131
			      apply 'relprod_n'/2
				  (Rs, NR)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'relprod_n',2}}] )
	    -| ['compiler_generated'] )
	end
'flat'/3 =
    %% Line 2133
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <1,A,L> when 'true' ->
	      %% Line 2134
	      call 'erlang':'list_to_tuple'
		  ([A|L])
	  %% Line 2135
	  <N,{T,A},L> when 'true' ->
	      let <_cor3> =
		  %% Line 2136
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 2136
		  apply 'flat'/3
		      (_cor3, T, [A|L])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'flat',3}}] )
	    -| ['compiler_generated'] )
	end
'domain_type'/2 =
    %% Line 2138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T = {'Set',_cor8,_cor9}|Ts],T0> when ( 'true'
						   -| ['compiler_generated'] ) ->
	      %% Line 2139
	      case _cor9 of
		%% Line 2140
		<{DT,_X_RT}> when 'true' ->
		    %% Line 2141
		    case %% Line 2789
			 ( case <DT,T0> of
			     ( <( T
				  -| ['compiler_generated'] ),( _cor4
								-| ['compiler_generated'] )>
				   when ( call ( 'erlang'
					      -| ['compiler_generated'] ):( '=:='
									    -| ['compiler_generated'] )
					   (( _cor4
					      -| ['compiler_generated'] ),
					    ( T
					      -| ['compiler_generated'] ))
				       -| ['compiler_generated'] ) ->
				   ( T
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			     %% Line 2790
			     ( <( Type1
				  -| ['compiler_generated'] ),( Type2
								-| ['compiler_generated'] )> when ( 'true'
												    -| ['compiler_generated'] ) ->
				   ( catch
					 %% Line 2791
					 ( apply ( 'unify_types1'/2
						   -| ['compiler_generated'] )
					       (( Type1
						  -| ['compiler_generated'] ), ( Type2
										 -| ['compiler_generated'] ))
					   -| ['compiler_generated'] )
				     -| ['compiler_generated'] )
			       -| ['compiler_generated'] )
			   end
			   -| ['compiler_generated'] ) of
		      %% Line 2142
		      <[]> when 'true' ->
			  {'error','type_mismatch'}
		      %% Line 2143
		      <T1> when 'true' ->
			  apply 'domain_type'/2
			      (Ts, T1)
		    end
		%% Line 2145
		<'_'> when 'true' ->
		    %% Line 2146
		    apply 'domain_type'/2
			(Ts, T0)
		%% Line 2147
		<_cor12> when 'true' ->
		    {'error','badarg'}
	      end
	  %% Line 2149
	  <[],T0> when 'true' ->
	      %% Line 2150
	      T0
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'domain_type',2}}] )
	    -| ['compiler_generated'] )
	end
'range_type'/2 =
    %% Line 2152
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|Ts],L> when 'true' ->
	      %% Line 2153
	      ( case T of
		  ( <( {'Set',_cor8,_rec184}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec184 of
			  %% Line 2154
			  <{_X_DT,RT}> when 'true' ->
			      %% Line 2155
			      apply 'range_type'/2
				  (Ts, [RT|L])
			  %% Line 2156
			  <'_'> when 'true' ->
			      %% Line 2157
			      '_'
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2159
	  <[],L> when 'true' ->
	      let <_cor5> =
		  %% Line 2160
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 2160
		  call 'erlang':'list_to_tuple'
		      (_cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'range_type',2}}] )
	    -| ['compiler_generated'] )
	end
'converse'/2 =
    %% Line 2162
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{A,B}|X],L> when 'true' ->
	      %% Line 2163
	      apply 'converse'/2
		  (X, [{B,A}|L])
	  %% Line 2164
	  <[],L> when 'true' ->
	      %% Line 2165
	      call 'lists':'sort'
		  (L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'converse',2}}] )
	    -| ['compiler_generated'] )
	end
'strict'/2 =
    %% Line 2167
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{E1,E2}|Es],L>
	      when call 'erlang':'=='
		    (E1,
		     E2) ->
	      %% Line 2168
	      apply 'strict'/2
		  (Es, L)
	  %% Line 2169
	  <[E|Es],L> when 'true' ->
	      %% Line 2170
	      apply 'strict'/2
		  (Es, [E|L])
	  %% Line 2171
	  <[],L> when 'true' ->
	      %% Line 2172
	      call 'lists':'reverse'
		  (L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'strict',2}}] )
	    -| ['compiler_generated'] )
	end
'weak'/1 =
    %% Line 2174
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2176
	    apply 'ran'/2
		(_cor0, [])
	in  %% Line 2176
	    apply 'weak'/3
		(_cor0, _cor1, [])
'weak'/3 =
    %% Line 2178
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Es = [{X,_cor6}|_cor7],[Y|Ys],L>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 2179
	      apply 'weak'/3
		  (Es, Ys, [{Y,Y}|L])
	  %% Line 2180
	  <Es = [{X,_cor8}|_cor9],[Y|Ys],L>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 2181
	      apply 'weak'/3
		  (Es, Ys, L)
	  %% Line 2182
	  <[E = {X,Y}|Es],Ys,L>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 2183
	      apply 'weak1'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2184
	  <[E = {X,Y}|Es],Ys,L>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 2185
	      apply 'weak2'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2186
	  <[E = {X,_X_Y}|Es],Ys,L> when 'true' ->
	      %% Line 2187
	      apply 'weak2'/4
		  (Es, Ys, [E|[{X,X}|L]], X)
	  %% Line 2188
	  <[],[Y|Ys],L> when 'true' ->
	      %% Line 2189
	      apply 'weak'/3
		  ([], Ys, [{Y,Y}|L])
	  %% Line 2190
	  <[],[],L> when 'true' ->
	      %% Line 2191
	      call 'lists':'reverse'
		  (L)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'weak',3}}] )
	    -| ['compiler_generated'] )
	end
'weak1'/4 =
    %% Line 2193
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E = {X,Y}|Es],Ys,L,X0>
	      when let <_cor4> =
		    call 'erlang':'>'
			(X, Y)
		in  let <_cor5> =
			call 'erlang':'=='
			    (X, X0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 2194
	      apply 'weak1'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2195
	  <[E = {X,Y}|Es],Ys,L,X0>
	      when let <_cor6> =
		    call 'erlang':'=='
			(X, Y)
		in  let <_cor7> =
			call 'erlang':'=='
			    (X, X0)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 2196
	      apply 'weak2'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2197
	  <[E = {X,_X_Y}|Es],Ys,L,X0>
	      when call 'erlang':'=='
		    (X,
		     X0) ->
	      %% Line 2198
	      apply 'weak2'/4
		  (Es, Ys, [E|[{X,X}|L]], X)
	  %% Line 2199
	  <Es,Ys,L,X> when 'true' ->
	      %% Line 2200
	      apply 'weak'/3
		  (Es, Ys, [{X,X}|L])
	end
'weak2'/4 =
    %% Line 2202
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E = {X,_X_Y}|Es],Ys,L,X0>
	      when call 'erlang':'=='
		    (X,
		     X0) ->
	      %% Line 2203
	      apply 'weak2'/4
		  (Es, Ys, [E|L], X)
	  %% Line 2204
	  <Es,Ys,L,_X_X> when 'true' ->
	      %% Line 2205
	      apply 'weak'/3
		  (Es, Ys, L)
	end
'extc'/4 =
    %% Line 2207
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L,[D|Ds],C,Ts> when 'true' ->
	      %% Line 2208
	      apply 'extc'/5
		  (L, Ds, C, Ts, D)
	  %% Line 2209
	  <L,[],_X_C,_X_Ts> when 'true' ->
	      %% Line 2210
	      L
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'extc',4}}] )
	    -| ['compiler_generated'] )
	end
'extc'/5 =
    %% Line 2212
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,Ds,C,[{X,_X_Y}|Ts],D>
	      when call 'erlang':'<'
		    (X,
		     D) ->
	      %% Line 2213
	      apply 'extc'/5
		  (L, Ds, C, Ts, D)
	  %% Line 2214
	  <L,Ds,C,[{X,_X_Y}|Ts],D>
	      when call 'erlang':'=='
		    (X,
		     D) ->
	      %% Line 2215
	      apply 'extc'/4
		  (L, Ds, C, Ts)
	  %% Line 2216
	  <L,Ds,C,[{X,_X_Y}|Ts],D> when 'true' ->
	      %% Line 2217
	      apply 'extc2'/5
		  ([{D,C}|L], Ds, C, Ts, X)
	  %% Line 2218
	  <L,Ds,C,[],D> when 'true' ->
	      %% Line 2219
	      apply 'extc_tail'/3
		  ([{D,C}|L], Ds, C)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'extc',5}}] )
	    -| ['compiler_generated'] )
	end
'extc2'/5 =
    %% Line 2221
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,[D|Ds],C,Ts,X>
	      when call 'erlang':'>'
		    (X,
		     D) ->
	      %% Line 2222
	      apply 'extc2'/5
		  ([{D,C}|L], Ds, C, Ts, X)
	  %% Line 2223
	  <L,[D|Ds],C,Ts,X>
	      when call 'erlang':'=='
		    (X,
		     D) ->
	      %% Line 2224
	      apply 'extc'/4
		  (L, Ds, C, Ts)
	  %% Line 2225
	  <L,[D|Ds],C,Ts,_X_X> when 'true' ->
	      %% Line 2226
	      apply 'extc'/5
		  (L, Ds, C, Ts, D)
	  %% Line 2227
	  <L,[],_X_C,_X_Ts,_X_X> when 'true' ->
	      %% Line 2228
	      L
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'extc2',5}}] )
	    -| ['compiler_generated'] )
	end
'extc_tail'/3 =
    %% Line 2230
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L,[D|Ds],C> when 'true' ->
	      %% Line 2231
	      apply 'extc_tail'/3
		  ([{D,C}|L], Ds, C)
	  %% Line 2232
	  <L,[],_X_C> when 'true' ->
	      %% Line 2233
	      L
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'extc_tail',3}}] )
	    -| ['compiler_generated'] )
	end
'is_a_func'/2 =
    %% Line 2235
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{E,_cor4}|Es],E0>
	      when call 'erlang':'/='
		    (E,
		     E0) ->
	      %% Line 2236
	      apply 'is_a_func'/2
		  (Es, E)
	  %% Line 2237
	  <L,_X_E> when 'true' ->
	      %% Line 2238
	      call 'erlang':'=:='
		  (L, [])
	end
'restrict_n'/5 =
    %% Line 2240
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[T|Ts],Key,Keys,L> when 'true' ->
	      %% Line 2241
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 2242
		<K>
		    when call 'erlang':'<'
			  (K,
			   Key) ->
		    %% Line 2243
		    apply 'restrict_n'/5
			(I, Ts, Key, Keys, L)
		%% Line 2244
		<K>
		    when call 'erlang':'=='
			  (K,
			   Key) ->
		    %% Line 2245
		    apply 'restrict_n'/5
			(I, Ts, Key, Keys, [T|L])
		%% Line 2246
		<K> when 'true' ->
		    %% Line 2247
		    apply 'restrict_n'/6
			(I, K, Ts, Keys, L, T)
	      end
	  %% Line 2249
	  <_X_I,_X_Ts,_X_Key,_X_Keys,L> when 'true' ->
	      %% Line 2250
	      L
	end
'restrict_n'/6 =
    %% Line 2252
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,K,Ts,[Key|Keys],L,E>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2253
	      apply 'restrict_n'/6
		  (I, K, Ts, Keys, L, E)
	  %% Line 2254
	  <I,K,Ts,[Key|Keys],L,E>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2255
	      apply 'restrict_n'/5
		  (I, Ts, Key, Keys, [E|L])
	  %% Line 2256
	  <I,_X_K,Ts,[Key|Keys],L,_X_E> when 'true' ->
	      %% Line 2257
	      apply 'restrict_n'/5
		  (I, Ts, Key, Keys, L)
	  %% Line 2258
	  <_X_I,_X_K,_X_Ts,_X_Keys,L,_X_E> when 'true' ->
	      %% Line 2259
	      L
	end
'restrict'/2 =
    %% Line 2261
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Key|Keys],Tuples> when 'true' ->
	      %% Line 2262
	      apply 'restrict'/4
		  (Tuples, Key, Keys, [])
	  %% Line 2263
	  <_X_Keys,_X_Tuples> when 'true' ->
	      %% Line 2264
	      []
	end
'restrict'/4 =
    %% Line 2266
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{K,_X_E}|Ts],Key,Keys,L>
	      when call 'erlang':'<'
		    (K,
		     Key) ->
	      %% Line 2267
	      apply 'restrict'/4
		  (Ts, Key, Keys, L)
	  %% Line 2268
	  <[{K,E}|Ts],Key,Keys,L>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2269
	      apply 'restrict'/4
		  (Ts, Key, Keys, [E|L])
	  %% Line 2270
	  <[{K,E}|Ts],_X_Key,Keys,L> when 'true' ->
	      %% Line 2271
	      apply 'restrict'/5
		  (Ts, K, Keys, L, E)
	  %% Line 2272
	  <_X_Ts,_X_Key,_X_Keys,L> when 'true' ->
	      %% Line 2273
	      L
	end
'restrict'/5 =
    %% Line 2275
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ts,K,[Key|Keys],L,E>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2276
	      apply 'restrict'/5
		  (Ts, K, Keys, L, E)
	  %% Line 2277
	  <Ts,K,[Key|Keys],L,E>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2278
	      apply 'restrict'/4
		  (Ts, Key, Keys, [E|L])
	  %% Line 2279
	  <Ts,_X_K,[Key|Keys],L,_X_E> when 'true' ->
	      %% Line 2280
	      apply 'restrict'/4
		  (Ts, Key, Keys, L)
	  %% Line 2281
	  <_X_Ts,_X_K,_X_Keys,L,_X_E> when 'true' ->
	      %% Line 2282
	      L
	end
'diff_restrict_n'/5 =
    %% Line 2284
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[T|Ts],Key,Keys,L> when 'true' ->
	      %% Line 2285
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 2286
		<K>
		    when call 'erlang':'<'
			  (K,
			   Key) ->
		    %% Line 2287
		    apply 'diff_restrict_n'/5
			(I, Ts, Key, Keys, [T|L])
		%% Line 2288
		<K>
		    when call 'erlang':'=='
			  (K,
			   Key) ->
		    %% Line 2289
		    apply 'diff_restrict_n'/5
			(I, Ts, Key, Keys, L)
		%% Line 2290
		<K> when 'true' ->
		    %% Line 2291
		    apply 'diff_restrict_n'/6
			(I, K, Ts, Keys, L, T)
	      end
	  %% Line 2293
	  <I,_X_Ts,_X_Key,_X_Keys,L>
	      when call 'erlang':'=:='
		    (I,
		     1) ->
	      %% Line 2294
	      call 'lists':'reverse'
		  (L)
	  %% Line 2295
	  <_X_I,_X_Ts,_X_Key,_X_Keys,L> when 'true' ->
	      %% Line 2296
	      call 'lists':'sort'
		  (L)
	end
'diff_restrict_n'/6 =
    %% Line 2298
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,K,Ts,[Key|Keys],L,T>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2299
	      apply 'diff_restrict_n'/6
		  (I, K, Ts, Keys, L, T)
	  %% Line 2300
	  <I,K,Ts,[Key|Keys],L,_X_T>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2301
	      apply 'diff_restrict_n'/5
		  (I, Ts, Key, Keys, L)
	  %% Line 2302
	  <I,_X_K,Ts,[Key|Keys],L,T> when 'true' ->
	      %% Line 2303
	      apply 'diff_restrict_n'/5
		  (I, Ts, Key, Keys, [T|L])
	  %% Line 2304
	  <I,_X_K,Ts,_X_Keys,L,T>
	      when call 'erlang':'=:='
		    (I,
		     1) ->
	      %% Line 2305
	      call 'lists':'reverse'
		  (L, [T|Ts])
	  %% Line 2306
	  <_X_I,_X_K,Ts,_X_Keys,L,T> when 'true' ->
	      let <_cor6> =
		  %% Line 2307
		  call 'erlang':'++'
		      (Ts, L)
	      in  %% Line 2307
		  call 'lists':'sort'
		      ([T|_cor6])
	end
'diff_restrict'/2 =
    %% Line 2309
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Key|Keys],Tuples> when 'true' ->
	      %% Line 2310
	      apply 'diff_restrict'/4
		  (Tuples, Key, Keys, [])
	  %% Line 2311
	  <_X_Keys,Tuples> when 'true' ->
	      %% Line 2312
	      apply 'diff_restrict_tail'/2
		  (Tuples, [])
	end
'diff_restrict'/4 =
    %% Line 2314
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{K,E}|Ts],Key,Keys,L>
	      when call 'erlang':'<'
		    (K,
		     Key) ->
	      %% Line 2315
	      apply 'diff_restrict'/4
		  (Ts, Key, Keys, [E|L])
	  %% Line 2316
	  <[{K,_X_E}|Ts],Key,Keys,L>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2317
	      apply 'diff_restrict'/4
		  (Ts, Key, Keys, L)
	  %% Line 2318
	  <[{K,E}|Ts],_X_Key,Keys,L> when 'true' ->
	      %% Line 2319
	      apply 'diff_restrict'/5
		  (Ts, K, Keys, L, E)
	  %% Line 2320
	  <_X_Ts,_X_Key,_X_Keys,L> when 'true' ->
	      %% Line 2321
	      L
	end
'diff_restrict'/5 =
    %% Line 2323
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ts,K,[Key|Keys],L,E>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2324
	      apply 'diff_restrict'/5
		  (Ts, K, Keys, L, E)
	  %% Line 2325
	  <Ts,K,[Key|Keys],L,_X_E>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2326
	      apply 'diff_restrict'/4
		  (Ts, Key, Keys, L)
	  %% Line 2327
	  <Ts,_X_K,[Key|Keys],L,E> when 'true' ->
	      %% Line 2328
	      apply 'diff_restrict'/4
		  (Ts, Key, Keys, [E|L])
	  %% Line 2329
	  <Ts,_X_K,_X_Keys,L,E> when 'true' ->
	      %% Line 2330
	      apply 'diff_restrict_tail'/2
		  (Ts, [E|L])
	end
'diff_restrict_tail'/2 =
    %% Line 2332
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_K,E}|Ts],L> when 'true' ->
	      %% Line 2333
	      apply 'diff_restrict_tail'/2
		  (Ts, [E|L])
	  %% Line 2334
	  <_X_Ts,L> when 'true' ->
	      %% Line 2335
	      L
	end
'comp'/2 =
    %% Line 2337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],B> when 'true' ->
	      %% Line 2338
	      apply 'check_function'/2
		  (B, [])
	  %% Line 2339
	  <_X_A,[]> when 'true' ->
	      %% Line 2340
	      'bad_function'
	  %% Line 2341
	  <A0,[{Bx,By}|B]> when 'true' ->
	      let <A> =
		  %% Line 2342
		  apply 'converse'/2
		      (A0, [])
	      in  let <_cor3> =
		      %% Line 2343
		      apply 'comp1'/5
			  (A, B, [], Bx, By)
		  in  %% Line 2343
		      apply 'check_function'/2
			  (A0, _cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'comp',2}}] )
	    -| ['compiler_generated'] )
	end
'comp1'/5 =
    %% Line 2345
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Ay,Ax}|A],B,L,Bx,By>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2346
	      apply 'comp1'/5
		  (A, B, [{Ax,By}|L], Bx, By)
	  %% Line 2347
	  <[{Ay,Ax}|A],B,L,Bx,_X_By>
	      when call 'erlang':'>'
		    (Ay,
		     Bx) ->
	      %% Line 2348
	      apply 'comp2'/6
		  (A, B, L, Bx, Ay, Ax)
	  %% Line 2349
	  <[{Ay,_X_Ax}|_X_A],_X_B,_X_L,Bx,_X_By>
	      when call 'erlang':'<'
		    (Ay,
		     Bx) ->
	      %% Line 2350
	      'bad_function'
	  %% Line 2351
	  <[],B,L,Bx,_X_By> when 'true' ->
	      %% Line 2352
	      apply 'check_function'/3
		  (Bx, B, L)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'comp1',5}}] )
	    -| ['compiler_generated'] )
	end
'comp2'/6 =
    %% Line 2354
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <A,[{Bx,_X_By}|B],L,Bx0,Ay,Ax>
	      when let <_cor6> =
		    call 'erlang':'>'
			(Ay, Bx)
		in  let <_cor7> =
			call 'erlang':'/='
			    (Bx, Bx0)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 2355
	      apply 'comp2'/6
		  (A, B, L, Bx, Ay, Ax)
	  %% Line 2356
	  <A,[{Bx,By}|B],L,_X_Bx0,Ay,Ax>
	      when call 'erlang':'=='
		    (Ay,
		     Bx) ->
	      %% Line 2357
	      apply 'comp1'/5
		  (A, B, [{Ax,By}|L], Bx, By)
	  %% Line 2358
	  <_X_A,_X_B,_X_L,_X_Bx0,_X_Ay,_X_Ax> when 'true' ->
	      %% Line 2359
	      'bad_function'
	end
'inverse1'/1 =
    %% Line 2361
    fun (_cor0) ->
	case _cor0 of
	  <[{A,B}|X]> when 'true' ->
	      %% Line 2362
	      apply 'inverse'/3
		  (X, A, [{B,A}|[]])
	  %% Line 2363
	  <[]> when 'true' ->
	      %% Line 2364
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'inverse1',1}}] )
	    -| ['compiler_generated'] )
	end
'inverse'/3 =
    %% Line 2366
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{A,B}|X],A0,L>
	      when call 'erlang':'/='
		    (A0,
		     A) ->
	      %% Line 2367
	      apply 'inverse'/3
		  (X, A, [{B,A}|L])
	  %% Line 2368
	  <[{A,_X_B}|_X_X],A0,_X_L>
	      when call 'erlang':'=='
		    (A0,
		     A) ->
	      %% Line 2369
	      'bad_function'
	  %% Line 2370
	  <[],_X_A0,L> when 'true' ->
	      %% Line 2371
	      case call 'lists':'sort'
		       (L) of
		<SL = [{V,_cor8}|Es]> when 'true' ->
		    %% Line 2372
		    case apply 'is_a_func'/2
			     (Es, V) of
		      %% Line 2373
		      <'true'> when 'true' ->
			  SL
		      %% Line 2374
		      <'false'> when 'true' ->
			  'bad_function'
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'inverse',3}}] )
	    -| ['compiler_generated'] )
	end
'external_fun'/1 =
    %% Line 2378
    fun (_cor0) ->
	case _cor0 of
	  <{'external',Function}>
	      when call 'erlang':'is_atom'
		    (Function) ->
	      %% Line 2379
	      'false'
	  %% Line 2380
	  <{'external',Fun}> when 'true' ->
	      %% Line 2381
	      Fun
	  %% Line 2382
	  <_cor2> when 'true' ->
	      %% Line 2383
	      'false'
	end
'element_type'/1 =
    %% Line 2386
    fun (_cor0) ->
	case _cor0 of
	  <[Type|[]]> when 'true' ->
	      Type
	  %% Line 2387
	  <Type> when 'true' ->
	      Type
	end
'subst'/3 =
    %% Line 2389
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2390
	apply 'subst'/5
	    (_cor2, _cor1, _cor0, '_', [])
'subst'/5 =
    %% Line 2392
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[T|Ts],Fun,Type,NType,L> when 'true' ->
	      %% Line 2393
	      case apply 'setfun'/4
		       (T, Fun, Type, NType) of
		%% Line 2394
		<{SD,ST}> when 'true' ->
		    apply 'subst'/5
			(Ts, Fun, Type, ST, [{T,SD}|L])
		%% Line 2395
		<Bad> when 'true' ->
		    Bad
	      end
	  %% Line 2397
	  <[],_X_Fun,_X_Type,NType,L> when 'true' ->
	      %% Line 2398
	      {L,NType}
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'subst',5}}] )
	    -| ['compiler_generated'] )
	end
'projection1'/1 =
    %% Line 2400
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 2401
		  call 'erlang':'element'
		      (1, E)
	      in  %% Line 2401
		  apply 'projection1'/3
		      ([], _cor1, Es)
	  %% Line 2402
	  <L = []> when 'true' ->
	      %% Line 2403
	      L
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'projection1',1}}] )
	    -| ['compiler_generated'] )
	end
'projection1'/3 =
    %% Line 2405
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L,X,[E|Es]> when 'true' ->
	      %% Line 2406
	      case call 'erlang':'element'
		       (1, E) of
		%% Line 2407
		<X1>
		    when call 'erlang':'=='
			  (X,
			   X1) ->
		    apply 'projection1'/3
			(L, X, Es)
		%% Line 2408
		<X1> when 'true' ->
		    apply 'projection1'/3
			([X|L], X1, Es)
	      end
	  %% Line 2410
	  <L,X,[]> when 'true' ->
	      %% Line 2411
	      call 'lists':'reverse'
		  (L, [X|[]])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'projection1',3}}] )
	    -| ['compiler_generated'] )
	end
'projection_n'/3 =
    %% Line 2413
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],I,L> when 'true' ->
	      let <_cor3> =
		  %% Line 2414
		  call 'erlang':'element'
		      (I, E)
	      in  %% Line 2414
		  apply 'projection_n'/3
		      (Es, I, [_cor3|L])
	  %% Line 2415
	  <[],_X_I,L> when 'true' ->
	      %% Line 2416
	      call 'lists':'usort'
		  (L)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'projection_n',3}}] )
	    -| ['compiler_generated'] )
	end
'substitute_element'/3 =
    %% Line 2418
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T|Ts],I,L> when 'true' ->
	      let <_cor3> =
		  %% Line 2419
		  call 'erlang':'element'
		      (I, T)
	      in  %% Line 2419
		  apply 'substitute_element'/3
		      (Ts, I, [{T,_cor3}|L])
	  %% Line 2420
	  <_cor7,_X_I,L> when 'true' ->
	      %% Line 2421
	      call 'lists':'reverse'
		  (L)
	end
'substitute'/3 =
    %% Line 2423
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T|Ts],Fun,L> when 'true' ->
	      let <_cor3> =
		  %% Line 2424
		  apply Fun
		      (T)
	      in  %% Line 2424
		  apply 'substitute'/3
		      (Ts, Fun, [{T,_cor3}|L])
	  %% Line 2425
	  <_cor7,_X_Fun,L> when 'true' ->
	      %% Line 2426
	      call 'lists':'reverse'
		  (L)
	end
'partition_n'/2 =
    %% Line 2428
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,[E|Ts]> when 'true' ->
	      let <_cor2> =
		  %% Line 2429
		  call 'erlang':'element'
		      (I, E)
	      in  %% Line 2429
		  apply 'partition_n'/5
		      (I, Ts, _cor2, [E|[]], [])
	  %% Line 2430
	  <_X_I,[]> when 'true' ->
	      %% Line 2431
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'partition_n',2}}] )
	    -| ['compiler_generated'] )
	end
'partition_n'/5 =
    %% Line 2433
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[E|Ts],K,Es,P> when 'true' ->
	      let <_cor5> =
		  %% Line 2434
		  call 'erlang':'element'
		      (I, E)
	      in  %% Line 2434
		  case <_cor5,Es> of
		    %% Line 2435
		    <K1,_cor15>
			when call 'erlang':'=='
			      (K,
			       K1) ->
			%% Line 2436
			apply 'partition_n'/5
			    (I, Ts, K, [E|Es], P)
		    %% Line 2437
		    <K1,[_cor16|[]]> when 'true' ->
			%% Line 2438
			apply 'partition_n'/5
			    (I, Ts, K1, [E|[]], [Es|P])
		    %% Line 2439
		    <K1,_cor17> when 'true' ->
			let <_cor6> =
			    %% Line 2440
			    call 'lists':'reverse'
				(Es)
			in  %% Line 2440
			    apply 'partition_n'/5
				(I, Ts, K1, [E|[]], [_cor6|P])
		  end
	  %% Line 2442
	  <I,[],_X_K,Es,P>
	      when call 'erlang':'>'
		    (I,
		     1) ->
	      let <_cor8> =
		  %% Line 2443
		  call 'lists':'reverse'
		      (Es)
	      in  %% Line 2443
		  call 'lists':'sort'
		      ([_cor8|P])
	  %% Line 2444
	  <_X_I,[],_X_K,Es = [_cor18|[]],P> when 'true' ->
	      %% Line 2445
	      call 'lists':'reverse'
		  (P, [Es|[]])
	  %% Line 2446
	  <_X_I,[],_X_K,Es,P> when 'true' ->
	      let <_cor9> =
		  %% Line 2447
		  call 'lists':'reverse'
		      (Es)
	      in  %% Line 2447
		  call 'lists':'reverse'
		      (P, [_cor9|[]])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'partition_n',5}}] )
	    -| ['compiler_generated'] )
	end
'partition3_n'/6 =
    %% Line 2449
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[T|Ts],Key,Keys,L1,L2> when 'true' ->
	      %% Line 2450
	      case call 'erlang':'element'
		       (I, T) of
		%% Line 2451
		<K>
		    when call 'erlang':'<'
			  (K,
			   Key) ->
		    %% Line 2452
		    apply 'partition3_n'/6
			(I, Ts, Key, Keys, L1, [T|L2])
		%% Line 2453
		<K>
		    when call 'erlang':'=='
			  (K,
			   Key) ->
		    %% Line 2454
		    apply 'partition3_n'/6
			(I, Ts, Key, Keys, [T|L1], L2)
		%% Line 2455
		<K> when 'true' ->
		    %% Line 2456
		    apply 'partition3_n'/7
			(I, K, Ts, Keys, L1, L2, T)
	      end
	  %% Line 2458
	  <I,_X_Ts,_X_Key,_X_Keys,L1,L2>
	      when call 'erlang':'=:='
		    (I,
		     1) ->
	      let <_cor7> =
		  %% Line 2459
		  call 'lists':'reverse'
		      (L1)
	      in  let <_cor8> =
		      %% Line 2459
		      call 'lists':'reverse'
			  (L2)
		  in  %% Line 2459
		      [_cor7|_cor8]
	  %% Line 2460
	  <_X_I,_X_Ts,_X_Key,_X_Keys,L1,L2> when 'true' ->
	      let <_cor9> =
		  %% Line 2461
		  call 'lists':'sort'
		      (L1)
	      in  let <_cor10> =
		      %% Line 2461
		      call 'lists':'sort'
			  (L2)
		  in  %% Line 2461
		      [_cor9|_cor10]
	end
'partition3_n'/7 =
    %% Line 2463
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,K,Ts,[Key|Keys],L1,L2,T>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2464
	      apply 'partition3_n'/7
		  (I, K, Ts, Keys, L1, L2, T)
	  %% Line 2465
	  <I,K,Ts,[Key|Keys],L1,L2,T>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2466
	      apply 'partition3_n'/6
		  (I, Ts, Key, Keys, [T|L1], L2)
	  %% Line 2467
	  <I,_X_K,Ts,[Key|Keys],L1,L2,T> when 'true' ->
	      %% Line 2468
	      apply 'partition3_n'/6
		  (I, Ts, Key, Keys, L1, [T|L2])
	  %% Line 2469
	  <I,_X_K,Ts,_X_Keys,L1,L2,T>
	      when call 'erlang':'=:='
		    (I,
		     1) ->
	      let <_cor7> =
		  %% Line 2470
		  call 'lists':'reverse'
		      (L1)
	      in  let <_cor8> =
		      %% Line 2470
		      call 'lists':'reverse'
			  (L2, [T|Ts])
		  in  %% Line 2470
		      [_cor7|_cor8]
	  %% Line 2471
	  <_X_I,_X_K,Ts,_X_Keys,L1,L2,T> when 'true' ->
	      let <_cor9> =
		  %% Line 2472
		  call 'lists':'sort'
		      (L1)
	      in  let <_cor10> =
		      %% Line 2472
		      call 'erlang':'++'
			  (Ts, L2)
		  in  let <_cor11> =
			  %% Line 2472
			  call 'lists':'sort'
			      ([T|_cor10])
		      in  %% Line 2472
			  [_cor9|_cor11]
	end
'partition3'/2 =
    %% Line 2474
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Key|Keys],Tuples> when 'true' ->
	      %% Line 2475
	      apply 'partition3'/5
		  (Tuples, Key, Keys, [], [])
	  %% Line 2476
	  <_X_Keys,Tuples> when 'true' ->
	      %% Line 2477
	      apply 'partition3_tail'/3
		  (Tuples, [], [])
	end
'partition3'/5 =
    %% Line 2479
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{K,E}|Ts],Key,Keys,L1,L2>
	      when call 'erlang':'<'
		    (K,
		     Key) ->
	      %% Line 2480
	      apply 'partition3'/5
		  (Ts, Key, Keys, L1, [E|L2])
	  %% Line 2481
	  <[{K,E}|Ts],Key,Keys,L1,L2>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2482
	      apply 'partition3'/5
		  (Ts, Key, Keys, [E|L1], L2)
	  %% Line 2483
	  <[{K,E}|Ts],_X_Key,Keys,L1,L2> when 'true' ->
	      %% Line 2484
	      apply 'partition3'/6
		  (Ts, K, Keys, L1, L2, E)
	  %% Line 2485
	  <_X_Ts,_X_Key,_X_Keys,L1,L2> when 'true' ->
	      %% Line 2486
	      [L1|L2]
	end
'partition3'/6 =
    %% Line 2488
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ts,K,[Key|Keys],L1,L2,E>
	      when call 'erlang':'>'
		    (K,
		     Key) ->
	      %% Line 2489
	      apply 'partition3'/6
		  (Ts, K, Keys, L1, L2, E)
	  %% Line 2490
	  <Ts,K,[Key|Keys],L1,L2,E>
	      when call 'erlang':'=='
		    (K,
		     Key) ->
	      %% Line 2491
	      apply 'partition3'/5
		  (Ts, Key, Keys, [E|L1], L2)
	  %% Line 2492
	  <Ts,_X_K,[Key|Keys],L1,L2,E> when 'true' ->
	      %% Line 2493
	      apply 'partition3'/5
		  (Ts, Key, Keys, L1, [E|L2])
	  %% Line 2494
	  <Ts,_X_K,_X_Keys,L1,L2,E> when 'true' ->
	      %% Line 2495
	      apply 'partition3_tail'/3
		  (Ts, L1, [E|L2])
	end
'partition3_tail'/3 =
    %% Line 2497
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_X_K,E}|Ts],L1,L2> when 'true' ->
	      %% Line 2498
	      apply 'partition3_tail'/3
		  (Ts, L1, [E|L2])
	  %% Line 2499
	  <_X_Ts,L1,L2> when 'true' ->
	      %% Line 2500
	      [L1|L2]
	end
'replace'/3 =
    %% Line 2502
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],F,L> when 'true' ->
	      let <_cor3> =
		  %% Line 2503
		  apply F
		      (E)
	      in  %% Line 2503
		  apply 'replace'/3
		      (Es, F, [_cor3|L])
	  %% Line 2504
	  <_cor7,_X_F,L> when 'true' ->
	      %% Line 2505
	      call 'lists':'sort'
		  (L)
	end
'mul_relprod'/3 =
    %% Line 2507
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T = {'Set',_cor10,_cor11}|Ts],I,R> when ( 'true'
						      -| ['compiler_generated'] ) ->
	      let <P> =
		  %% Line 2508
		  apply 'raise_element'/2
		      (R, I)
	      in  let <F> =
		      %% Line 2509
		      apply 'relative_product1'/2
			  (P, T)
		  in  let <_cor5> =
			  %% Line 2510
			  call 'erlang':'+'
			      (I, 1)
		      in  let <_cor6> =
			      %% Line 2510
			      apply 'mul_relprod'/3
				  (Ts, _cor5, R)
			  in  %% Line 2510
			      [F|_cor6]
	  %% Line 2511
	  <[],_X_I,_X_R> when 'true' ->
	      %% Line 2512
	      []
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'mul_relprod',3}}] )
	    -| ['compiler_generated'] )
	end
'raise_element'/2 =
    %% Line 2514
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 2515
	    call 'erlang':'=/='
		(_cor0, 1)
	in  %% Line 2515
	    ( case _cor1 of
		( <( {'Set',_rec185,_cor13}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor4> =
			  apply 'rearr'/3
			      (_rec185, _cor0, [])
		      in  let <L> =
			      apply 'sort'/2
				  (_cor5, _cor4)
			  in  let <_cor10> =
				  %% Line 2517
				  call 'erlang':'element'
				      (_cor0, _cor13)
			      in  %% Line 2517
				  {'Set',L,{_cor10,_cor13}}
		  -| ['compiler_generated'] )
		( <_cor14> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','Set'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'rearr'/3 =
    %% Line 2519
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],I,L> when 'true' ->
	      let <_cor3> =
		  %% Line 2520
		  call 'erlang':'element'
		      (I, E)
	      in  %% Line 2520
		  apply 'rearr'/3
		      (Es, I, [{_cor3,E}|L])
	  %% Line 2521
	  <[],_X_I,L> when 'true' ->
	      %% Line 2522
	      L
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rearr',3}}] )
	    -| ['compiler_generated'] )
	end
'join_element'/2 =
    %% Line 2524
    fun (_cor1,_cor0) ->
	%% Line 2525
	case call 'erlang':'tuple_to_list'
		 (_cor0) of
	  <[_cor7|L2]> when 'true' ->
	      let <_cor3> =
		  %% Line 2526
		  call 'erlang':'tuple_to_list'
		      (_cor1)
	      in  let <_cor4> =
		      %% Line 2526
		      call 'erlang':'++'
			  (_cor3, L2)
		  in  %% Line 2526
		      call 'erlang':'list_to_tuple'
			  (_cor4)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'join_element'/3 =
    %% Line 2528
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 2529
	    call 'erlang':'tuple_to_list'
		(_cor2)
	in  let <_cor3> =
		%% Line 2529
		call 'erlang':'tuple_to_list'
		    (_cor1)
	    in  let <_cor4> =
		    %% Line 2529
		    apply 'join_element2'/3
			(_cor3, 1, _cor0)
		in  %% Line 2529
		    call 'erlang':'++'
			(_cor5, _cor4)
'join_element2'/3 =
    %% Line 2531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[B|Bs],C,I2>
	      when call 'erlang':'=/='
		    (C,
		     I2) ->
	      let <_cor3> =
		  %% Line 2532
		  call 'erlang':'+'
		      (C, 1)
	      in  let <_cor4> =
		      %% Line 2532
		      apply 'join_element2'/3
			  (Bs, _cor3, I2)
		  in  %% Line 2532
		      [B|_cor4]
	  %% Line 2533
	  <[_cor8|Bs],_X_C,_X_I2> when 'true' ->
	      %% Line 2534
	      Bs
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'join_element2',3}}] )
	    -| ['compiler_generated'] )
	end
'family2rel'/2 =
    %% Line 2536
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{X,S}|F],L> when 'true' ->
	      %% Line 2537
	      apply 'fam2rel'/4
		  (F, L, X, S)
	  %% Line 2538
	  <[],L> when 'true' ->
	      %% Line 2539
	      call 'lists':'reverse'
		  (L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'family2rel',2}}] )
	    -| ['compiler_generated'] )
	end
'fam2rel'/4 =
    %% Line 2541
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,L,X,[Y|Ys]> when 'true' ->
	      %% Line 2542
	      apply 'fam2rel'/4
		  (F, [{X,Y}|L], X, Ys)
	  %% Line 2543
	  <F,L,_X_X,_cor8> when 'true' ->
	      %% Line 2544
	      apply 'family2rel'/2
		  (F, L)
	end
'fam_spec'/4 =
    %% Line 2546
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E = {_cor9,S}|F],Fun,Type,L> when 'true' ->
	      %% Line 2547
	      case apply Fun
		       ({'Set',S,Type}) of
		%% Line 2548
		<'true'> when 'true' ->
		    %% Line 2549
		    apply 'fam_spec'/4
			(F, Fun, Type, [E|L])
		%% Line 2550
		<'false'> when 'true' ->
		    %% Line 2551
		    apply 'fam_spec'/4
			(F, Fun, Type, L)
		%% Line 2552
		<_cor10> when 'true' ->
		    %% Line 2553
		    'badarg'
	      end
	  %% Line 2555
	  <[],_X_Fun,_X_Type,L> when 'true' ->
	      %% Line 2556
	      call 'lists':'reverse'
		  (L)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'fam_spec',4}}] )
	    -| ['compiler_generated'] )
	end
'fam_specification'/3 =
    %% Line 2558
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E = {_cor7,S}|F],Fun,L> when 'true' ->
	      %% Line 2559
	      case apply Fun
		       (S) of
		%% Line 2560
		<'true'> when 'true' ->
		    %% Line 2561
		    apply 'fam_specification'/3
			(F, Fun, [E|L])
		%% Line 2562
		<'false'> when 'true' ->
		    %% Line 2563
		    apply 'fam_specification'/3
			(F, Fun, L)
		%% Line 2564
		<_cor8> when 'true' ->
		    %% Line 2565
		    'badarg'
	      end
	  %% Line 2567
	  <[],_X_Fun,L> when 'true' ->
	      %% Line 2568
	      call 'lists':'reverse'
		  (L)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fam_specification',3}}] )
	    -| ['compiler_generated'] )
	end
'un_of_fam'/2 =
    %% Line 2570
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_X,S}|F],L> when 'true' ->
	      %% Line 2571
	      apply 'un_of_fam'/2
		  (F, [S|L])
	  %% Line 2572
	  <[],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2573
		  call 'lists':'sort'
		      (L)
	      in  %% Line 2573
		  apply 'lunion'/1
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'un_of_fam',2}}] )
	    -| ['compiler_generated'] )
	end
'int_of_fam'/1 =
    %% Line 2575
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor2,S}|F]> when 'true' ->
	      %% Line 2576
	      apply 'int_of_fam'/2
		  (F, [S|[]])
	  %% Line 2577
	  <[]> when 'true' ->
	      %% Line 2578
	      'badarg'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'int_of_fam',1}}] )
	    -| ['compiler_generated'] )
	end
'int_of_fam'/2 =
    %% Line 2580
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_cor4,S}|F],L> when 'true' ->
	      %% Line 2581
	      apply 'int_of_fam'/2
		  (F, [S|L])
	  %% Line 2582
	  <[],[L|Ls]> when 'true' ->
	      %% Line 2583
	      apply 'lintersection'/2
		  (Ls, L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'int_of_fam',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_un'/2 =
    %% Line 2585
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{X,S}|F],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2586
		  apply 'lunion'/1
		      (S)
	      in  %% Line 2586
		  apply 'fam_un'/2
		      (F, [{X,_cor2}|L])
	  %% Line 2587
	  <[],L> when 'true' ->
	      %% Line 2588
	      call 'lists':'reverse'
		  (L)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fam_un',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_int'/2 =
    %% Line 2590
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{X,[S|Ss]}|F],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2591
		  apply 'lintersection'/2
		      (Ss, S)
	      in  %% Line 2591
		  apply 'fam_int'/2
		      (F, [{X,_cor2}|L])
	  %% Line 2592
	  <[{_X_X,[]}|_X_F],_X_L> when 'true' ->
	      %% Line 2593
	      'badarg'
	  %% Line 2594
	  <[],L> when 'true' ->
	      %% Line 2595
	      call 'lists':'reverse'
		  (L)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fam_int',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_dom'/2 =
    %% Line 2597
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{X,S}|F],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2598
		  apply 'dom'/1
		      (S)
	      in  %% Line 2598
		  apply 'fam_dom'/2
		      (F, [{X,_cor2}|L])
	  %% Line 2599
	  <[],L> when 'true' ->
	      %% Line 2600
	      call 'lists':'reverse'
		  (L)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fam_dom',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_ran'/2 =
    %% Line 2602
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{X,S}|F],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2603
		  apply 'ran'/2
		      (S, [])
	      in  %% Line 2603
		  apply 'fam_ran'/2
		      (F, [{X,_cor2}|L])
	  %% Line 2604
	  <[],L> when 'true' ->
	      %% Line 2605
	      call 'lists':'reverse'
		  (L)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fam_ran',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_union'/3 =
    %% Line 2607
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F1 = [{A,_X_AS}|_X_AL],[B1 = {B,_X_BS}|BL],L>
	      when call 'erlang':'>'
		    (A,
		     B) ->
	      %% Line 2608
	      apply 'fam_union'/3
		  (F1, BL, [B1|L])
	  %% Line 2609
	  <[{A,AS}|AL],[{B,BS}|BL],L>
	      when call 'erlang':'=='
		    (A,
		     B) ->
	      let <_cor3> =
		  %% Line 2610
		  call 'lists':'umerge'
		      (AS, BS)
	      in  %% Line 2610
		  apply 'fam_union'/3
		      (AL, BL, [{A,_cor3}|L])
	  %% Line 2611
	  <[A1|AL],F2,L> when 'true' ->
	      %% Line 2612
	      apply 'fam_union'/3
		  (AL, F2, [A1|L])
	  %% Line 2613
	  <_cor7,F2,L> when 'true' ->
	      %% Line 2614
	      call 'lists':'reverse'
		  (L, F2)
	end
'fam_intersect'/3 =
    %% Line 2616
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F1 = [{A,_X_AS}|_X_AL],[{B,_X_BS}|BL],L>
	      when call 'erlang':'>'
		    (A,
		     B) ->
	      %% Line 2617
	      apply 'fam_intersect'/3
		  (F1, BL, L)
	  %% Line 2618
	  <[{A,AS}|AL],[{B,BS}|BL],L>
	      when call 'erlang':'=='
		    (A,
		     B) ->
	      let <_cor3> =
		  %% Line 2619
		  apply 'intersection'/3
		      (AS, BS, [])
	      in  %% Line 2619
		  apply 'fam_intersect'/3
		      (AL, BL, [{A,_cor3}|L])
	  %% Line 2620
	  <[_X_A1|AL],F2,L> when 'true' ->
	      %% Line 2621
	      apply 'fam_intersect'/3
		  (AL, F2, L)
	  %% Line 2622
	  <_cor7,_cor8,L> when 'true' ->
	      %% Line 2623
	      call 'lists':'reverse'
		  (L)
	end
'fam_difference'/3 =
    %% Line 2625
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F1 = [{A,_X_AS}|_X_AL],[{B,_X_BS}|BL],L>
	      when call 'erlang':'>'
		    (A,
		     B) ->
	      %% Line 2626
	      apply 'fam_difference'/3
		  (F1, BL, L)
	  %% Line 2627
	  <[{A,AS}|AL],[{B,BS}|BL],L>
	      when call 'erlang':'=='
		    (A,
		     B) ->
	      let <_cor3> =
		  %% Line 2628
		  apply 'difference'/3
		      (AS, BS, [])
	      in  %% Line 2628
		  apply 'fam_difference'/3
		      (AL, BL, [{A,_cor3}|L])
	  %% Line 2629
	  <[A1|AL],F2,L> when 'true' ->
	      %% Line 2630
	      apply 'fam_difference'/3
		  (AL, F2, [A1|L])
	  %% Line 2631
	  <F1,_cor7,L> when 'true' ->
	      %% Line 2632
	      call 'lists':'reverse'
		  (L, F1)
	end
'check_function'/2 =
    %% Line 2634
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{X,_cor4}|XL],R> when 'true' ->
	      %% Line 2635
	      apply 'check_function'/3
		  (X, XL, R)
	  %% Line 2636
	  <[],R> when 'true' ->
	      %% Line 2637
	      R
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check_function',2}}] )
	    -| ['compiler_generated'] )
	end
'check_function'/3 =
    %% Line 2639
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X0,[{X,_cor6}|XL],R>
	      when call 'erlang':'/='
		    (X0,
		     X) ->
	      %% Line 2640
	      apply 'check_function'/3
		  (X, XL, R)
	  %% Line 2641
	  <X0,[{X,_cor7}|_X_XL],_X_R>
	      when call 'erlang':'=='
		    (X0,
		     X) ->
	      %% Line 2642
	      'bad_function'
	  %% Line 2643
	  <_X_X0,[],R> when 'true' ->
	      %% Line 2644
	      R
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'check_function',3}}] )
	    -| ['compiler_generated'] )
	end
'fam_partition_n'/2 =
    %% Line 2646
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,[E|Ts]> when 'true' ->
	      let <_cor2> =
		  %% Line 2647
		  call 'erlang':'element'
		      (I, E)
	      in  %% Line 2647
		  apply 'fam_partition_n'/5
		      (I, Ts, _cor2, [E|[]], [])
	  %% Line 2648
	  <_X_I,[]> when 'true' ->
	      %% Line 2649
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fam_partition_n',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_partition_n'/5 =
    %% Line 2651
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[E|Ts],K,Es,P> when 'true' ->
	      let <_cor5> =
		  %% Line 2652
		  call 'erlang':'element'
		      (I, E)
	      in  %% Line 2652
		  case <_cor5,Es> of
		    %% Line 2653
		    <K1,_cor14>
			when call 'erlang':'=='
			      (K,
			       K1) ->
			%% Line 2654
			apply 'fam_partition_n'/5
			    (I, Ts, K, [E|Es], P)
		    %% Line 2655
		    <K1,[_cor15|[]]> when 'true' ->
			%% Line 2656
			apply 'fam_partition_n'/5
			    (I, Ts, K1, [E|[]], [{K,Es}|P])
		    %% Line 2657
		    <K1,_cor16> when 'true' ->
			let <_cor6> =
			    %% Line 2658
			    call 'lists':'reverse'
				(Es)
			in  %% Line 2658
			    apply 'fam_partition_n'/5
				(I, Ts, K1, [E|[]], [{K,_cor6}|P])
		  end
	  %% Line 2660
	  <_X_I,[],K,Es = [_cor17|[]],P> when 'true' ->
	      %% Line 2661
	      call 'lists':'reverse'
		  (P, [{K,Es}|[]])
	  %% Line 2662
	  <_X_I,[],K,Es,P> when 'true' ->
	      let <_cor8> =
		  %% Line 2663
		  call 'lists':'reverse'
		      (Es)
	      in  %% Line 2663
		  call 'lists':'reverse'
		      (P, [{K,_cor8}|[]])
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'fam_partition_n',5}}] )
	    -| ['compiler_generated'] )
	end
'fam_partition'/2 =
    %% Line 2665
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{K,Vs}|Ts],Sort> when 'true' ->
	      %% Line 2666
	      apply 'fam_partition'/5
		  (Ts, K, [Vs|[]], [], Sort)
	  %% Line 2667
	  <[],_X_Sort> when 'true' ->
	      %% Line 2668
	      []
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'fam_partition',2}}] )
	    -| ['compiler_generated'] )
	end
'fam_partition'/5 =
    %% Line 2670
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{K1,V}|Ts],K,Vs,P,S>
	      when call 'erlang':'=='
		    (K1,
		     K) ->
	      %% Line 2671
	      apply 'fam_partition'/5
		  (Ts, K, [V|Vs], P, S)
	  %% Line 2672
	  <[{K1,V}|Ts],K,Vs = [_cor12|[]],P,S> when 'true' ->
	      %% Line 2673
	      apply 'fam_partition'/5
		  (Ts, K1, [V|[]], [{K,Vs}|P], S)
	  %% Line 2674
	  <[{K1,V}|Ts],K,Vs,P,S> when 'true' ->
	      let <_cor5> =
		  %% Line 2675
		  apply 'sort'/2
		      (S, Vs)
	      in  %% Line 2675
		  apply 'fam_partition'/5
		      (Ts, K1, [V|[]], [{K,_cor5}|P], S)
	  %% Line 2676
	  <[],K,Vs = [_cor13|[]],P,_X_S> when 'true' ->
	      %% Line 2677
	      [{K,Vs}|P]
	  %% Line 2678
	  <[],K,Vs,P,S> when 'true' ->
	      let <_cor6> =
		  %% Line 2679
		  apply 'sort'/2
		      (S, Vs)
	      in  %% Line 2679
		  [{K,_cor6}|P]
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fam_partition',5}}] )
	    -| ['compiler_generated'] )
	end
'fam_proj'/5 =
    %% Line 2681
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{X,S}|F],Fun,Type,NType,L> when 'true' ->
	      %% Line 2682
	      case apply 'setfun'/4
		       (S, Fun, Type, NType) of
		%% Line 2683
		<{SD,ST}> when 'true' ->
		    apply 'fam_proj'/5
			(F, Fun, Type, ST, [{X,SD}|L])
		%% Line 2684
		<Bad> when 'true' ->
		    Bad
	      end
	  %% Line 2686
	  <[],_X_Fun,_X_Type,NType,L> when 'true' ->
	      let <_cor6> =
		  %% Line 2687
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 2687
		  {_cor6,NType}
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fam_proj',5}}] )
	    -| ['compiler_generated'] )
	end
'setfun'/4 =
    %% Line 2689
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2706
	    ( case <_cor3,_cor1> of
		( <( L
		     -| ['compiler_generated'] ),_fol1226>
		      when ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'is_list'
							       -| ['compiler_generated'] )
			      (( L
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] ) ->
		      %% Line 2707
		      ( {( 'Set'
			   -| ['compiler_generated'] ),( L
							 -| ['compiler_generated'] ),_fol1226}
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		%% Line 2708
		( <_fol1227,_fol1228> when ( 'true'
					     -| ['compiler_generated'] ) ->
		      %% Line 2709
		      ( {( 'OrdSet'
			   -| ['compiler_generated'] ),_fol1227,_fol1228}
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 2690
	    case apply _cor2
		     (_cor4) of
	      %% Line 2691
	      <NS = {'Set',_cor21,_cor22}> when ( 'true'
						  -| ['compiler_generated'] ) ->
		  let <_fol1234> =
		      %% Line 2692
		      [_cor22|[]]
		  in  %% Line 2692
		      case %% Line 2789
			   ( case <_cor0,_fol1234> of
			       ( <_fol1235,_fol1236>
				     when ( call ( 'erlang'
						-| ['compiler_generated'] ):( '=:='
									      -| ['compiler_generated'] )
					     (_fol1236,
					      _fol1235)
					 -| ['compiler_generated'] ) ->
				     _fol1235
				 -| ['compiler_generated'] )
			       %% Line 2790
			       ( <( Type1
				    -| ['compiler_generated'] ),( Type2
								  -| ['compiler_generated'] )> when ( 'true'
												      -| ['compiler_generated'] ) ->
				     ( catch
					   %% Line 2791
					   ( apply ( 'unify_types1'/2
						     -| ['compiler_generated'] )
						 (( Type1
						    -| ['compiler_generated'] ), ( Type2
										   -| ['compiler_generated'] ))
					     -| ['compiler_generated'] )
				       -| ['compiler_generated'] )
				 -| ['compiler_generated'] )
			     end
			     -| ['compiler_generated'] ) of
			%% Line 2693
			<[]> when 'true' ->
			    'type_mismatch'
			%% Line 2694
			<NT> when 'true' ->
			    {_cor21,NT}
		      end
	      %% Line 2696
	      <NS = {'OrdSet',_cor27,_cor28}> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  %% Line 2697
		  case %% Line 2789
		       ( case <_cor0,_cor28> of
			   ( <_fol1252,( _cor4
					 -| ['compiler_generated'] )>
				 when ( call ( 'erlang'
					    -| ['compiler_generated'] ):( '=:='
									  -| ['compiler_generated'] )
					 (( _cor4
					    -| ['compiler_generated'] ),
					  _fol1252)
				     -| ['compiler_generated'] ) ->
				 _fol1252
			     -| ['compiler_generated'] )
			   %% Line 2790
			   ( <( Type1
				-| ['compiler_generated'] ),( Type2
							      -| ['compiler_generated'] )> when ( 'true'
												  -| ['compiler_generated'] ) ->
				 ( catch
				       %% Line 2791
				       ( apply ( 'unify_types1'/2
						 -| ['compiler_generated'] )
					     (( Type1
						-| ['compiler_generated'] ), ( Type2
									       -| ['compiler_generated'] ))
					 -| ['compiler_generated'] )
				   -| ['compiler_generated'] )
			     -| ['compiler_generated'] )
			 end
			 -| ['compiler_generated'] ) of
		    %% Line 2698
		    <[]> when 'true' ->
			'type_mismatch'
		    %% Line 2699
		    <_cor31>
			when call 'erlang':'=:='
			      (_cor31,
			       _cor28) ->
			{_cor27,_cor28}
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2701
	      <_cor34> when 'true' ->
		  %% Line 2702
		  'badarg'
	    end
'term2set'/2 =
    %% Line 2706
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,Type>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 2707
	      {'Set',L,Type}
	  %% Line 2708
	  <T,Type> when 'true' ->
	      %% Line 2709
	      {'OrdSet',T,Type}
	end
'fam2digraph'/2 =
    %% Line 2711
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 2712
	    ( fun (_cor6) ->
		  case _cor6 of
		    <{From,ToL}> when 'true' ->
			do  %% Line 2713
			    call 'digraph':'add_vertex'
				(_cor0, From)
			    let <Fun2> =
				%% Line 2714
				( fun (_cor3) ->
				      do  %% Line 2715
					  call 'digraph':'add_vertex'
					      (_cor0, _cor3)
					  %% Line 2716
					  case call 'digraph':'add_edge'
						   (_cor0, From, _cor3) of
					    %% Line 2717
					    <{'error',{'bad_edge',_cor12}}> when 'true' ->
						%% Line 2718
						call 'erlang':'throw'
						    ({'error','cyclic'})
					    %% Line 2719
					    <_cor13> when 'true' ->
						%% Line 2720
						'true'
					  end
				  -| [{'id',{0,0,'-fam2digraph/2-fun-0-'}}] )
			    in  %% Line 2723
				call 'lists':'foreach'
				    (Fun2, ToL)
		    ( <_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor7})
			    -| [{'function_name',{'-fam2digraph/2-fun-1-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-fam2digraph/2-fun-1-'}}] )
	in  let <_cor9> =
		%% Line 2725
		apply 'to_external'/1
		    (_cor1)
	    in  do  %% Line 2725
		    call 'lists':'foreach'
			(Fun, _cor9)
		    _cor0
'digraph_family'/1 =
    %% Line 2728
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2729
	    call 'digraph':'vertices'
		(_cor0)
	in  let <Vs> =
		%% Line 2729
		call 'lists':'sort'
		    (_cor1)
	    in  %% Line 2730
		apply 'digraph_fam'/4
		    (Vs, Vs, _cor0, [])
'digraph_fam'/4 =
    %% Line 2732
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[V|Vs],V0,G,L>
	      when call 'erlang':'/='
		    (V,
		     V0) ->
	      let <_cor4> =
		  %% Line 2733
		  call 'digraph':'out_neighbours'
		      (G, V)
	      in  let <Ns> =
		      %% Line 2733
		      call 'lists':'sort'
			  (_cor4)
		  in  %% Line 2734
		      apply 'digraph_fam'/4
			  (Vs, V, G, [{V,Ns}|L])
	  %% Line 2735
	  <[],_X_V0,_X_G,L> when 'true' ->
	      %% Line 2736
	      call 'lists':'reverse'
		  (L)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'digraph_fam',4}}] )
	    -| ['compiler_generated'] )
	end
'check_fun'/3 =
    %% Line 2739
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2740
	case apply 'is_type'/1
		 (_cor0) of
	  <'true'> when 'true' ->
	      %% Line 2741
	      case apply 'number_tuples'/2
		       (_cor2, 1) of
		<{NT,_X_MaxI}> when 'true' ->
		    let <_cor5> =
			%% Line 2742
			apply _cor1
			    (NT)
		    in  let <_cor6> =
			    %% Line 2742
			    apply 'tuple2list'/1
				(_cor5)
			in  let <L> =
				%% Line 2742
				call 'lists':'flatten'
				    (_cor6)
			    in  %% Line 2743
				apply 'has_hole'/2
				    (L, 1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'number_tuples'/2 =
    %% Line 2745
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,N>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor2> =
		  %% Line 2746
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 2746
		  case call 'lists':'mapfoldl'
			   (( 'number_tuples'/2
			      -| [{'id',{0,0,'-number_tuples/2-fun-0-'}}] ), N, _cor2) of
		    <{L,NN}> when 'true' ->
			let <_cor4> =
			    %% Line 2747
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 2747
			    {_cor4,NN}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2748
	  <_cor8,N> when 'true' ->
	      let <_cor5> =
		  %% Line 2749
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 2749
		  {N,_cor5}
	end
'tuple2list'/1 =
    %% Line 2751
    fun (_cor0) ->
	case _cor0 of
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 2752
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 2752
		  call 'lists':'map'
		      (( 'tuple2list'/1
			 -| [{'id',{0,0,'-tuple2list/1-fun-0-'}}] ), _cor1)
	  %% Line 2753
	  <C> when 'true' ->
	      %% Line 2754
	      [C|[]]
	end
'has_hole'/2 =
    %% Line 2756
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Is],I0>
	      when call 'erlang':'=<'
		    (I,
		     I0) ->
	      let <_cor2> =
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor3> =
		      call 'erlang':'max'
			  (_cor2, I0)
		  in  apply 'has_hole'/2
			  (Is, _cor3)
	  %% Line 2757
	  <Is,_X_I> when 'true' ->
	      call 'erlang':'=/='
		  (Is, [])
	end
'check_for_sort'/2 =
    %% Line 2760
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,_X_I>
	      when call 'erlang':'=:='
		    (T,
		     '_') ->
	      %% Line 2761
	      'empty'
	  %% Line 2762
	  <T,I>
	      when try
		    let <_cor2> =
			call 'erlang':'is_tuple'
			    (T)
		    in  let <_cor3> =
			    call 'erlang':'tuple_size'
				(T)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (I, _cor3)
			    in  let <_cor5> =
				    call 'erlang':'>='
					(I, 1)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  call 'erlang':'and'
					    (_cor2, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2763
	      call 'erlang':'>'
		  (I, 1)
	  %% Line 2764
	  <_X_T,_X_I> when 'true' ->
	      %% Line 2765
	      'error'
	end
'inverse_substitution'/3 =
    %% Line 2767
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2771
	    apply 'fun_rearr'/3
		(_cor2, _cor1, [])
	in  %% Line 2771
	    apply 'sort'/2
		(_cor0, _cor3)
'fun_rearr'/3 =
    %% Line 2773
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],Fun,L> when 'true' ->
	      let <_cor3> =
		  %% Line 2774
		  apply Fun
		      (E)
	      in  %% Line 2774
		  apply 'fun_rearr'/3
		      (Es, Fun, [{_cor3,E}|L])
	  %% Line 2775
	  <[],_X_Fun,L> when 'true' ->
	      %% Line 2776
	      L
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fun_rearr',3}}] )
	    -| ['compiler_generated'] )
	end
'sets_to_list'/1 =
    %% Line 2778
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 2779
	    ( fun (_cor2) ->
		  case _cor2 of
		    <S = {'Set',_cor6,_cor7}> when ( 'true'
						     -| ['compiler_generated'] ) ->
			_cor6
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-sets_to_list/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-sets_to_list/1-fun-0-'}}] )
	in  %% Line 2779
	    call 'lists':'map'
		(_cor4, _cor0)
'types'/2 =
    %% Line 2781
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2782
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 2782
		  call 'erlang':'list_to_tuple'
		      (_cor2)
	  %% Line 2783
	  <[S = {'Set',_cor13,_cor14}|_X_Ss],_X_L>
	      when call 'erlang':'=:='
		    (_cor14,
		     '_') ->
	      %% Line 2784
	      '_'
	  %% Line 2785
	  <[S|Ss],L> when 'true' ->
	      %% Line 2786
	      ( case S of
		  ( <( {'Set',_cor15,_rec192}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'types'/2
			    (Ss, [_rec192|L])
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Set'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'types',2}}] )
	    -| ['compiler_generated'] )
	end
'unify_types'/2 =
    %% Line 2789
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     T) ->
	      T
	  %% Line 2790
	  <Type1,Type2> when 'true' ->
	      catch
		  %% Line 2791
		  apply 'unify_types1'/2
		      (Type1, Type2)
	end
'unify_types1'/2 =
    %% Line 2793
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Atom,_cor8>
	      when let <_cor9> =
		    call 'erlang':'=:='
			(_cor8, Atom)
		in  let <_cor10> =
			call 'erlang':'is_atom'
			    (Atom)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 2794
	      Atom
	  %% Line 2795
	  <'_',Type> when 'true' ->
	      %% Line 2796
	      Type
	  %% Line 2797
	  <Type,'_'> when 'true' ->
	      %% Line 2798
	      Type
	  %% Line 2799
	  <[Type1|[]],[Type2|[]]> when 'true' ->
	      let <_cor2> =
		  %% Line 2800
		  apply 'unify_types1'/2
		      (Type1, Type2)
	      in  %% Line 2800
		  [_cor2|[]]
	  %% Line 2801
	  <T1,T2>
	      when try
		    let <_cor4> =
			call 'erlang':'tuple_size'
			    (T1)
		    in  let <_cor3> =
			    call 'erlang':'tuple_size'
				(T2)
			in  call 'erlang':'=:='
				(_cor4, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 2802
		  call 'erlang':'tuple_size'
		      (T1)
	      in  %% Line 2802
		  apply 'unify_typesl'/4
		      (_cor5, T1, T2, [])
	  %% Line 2803
	  <_X_T1,_X_T2> when 'true' ->
	      %% Line 2804
	      call 'erlang':'throw'
		  ([])
	end
'unify_typesl'/4 =
    %% Line 2806
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_T1,_X_T2,L> when 'true' ->
	      %% Line 2807
	      call 'erlang':'list_to_tuple'
		  (L)
	  %% Line 2808
	  <N,T1,T2,L> when 'true' ->
	      let <_cor5> =
		  %% Line 2809
		  call 'erlang':'element'
		      (N, T1)
	      in  let <_cor4> =
		      %% Line 2809
		      call 'erlang':'element'
			  (N, T2)
		  in  let <T> =
			  %% Line 2809
			  apply 'unify_types1'/2
			      (_cor5, _cor4)
		      in  let <_cor7> =
			      %% Line 2810
			      call 'erlang':'-'
				  (N, 1)
			  in  %% Line 2810
			      apply 'unify_typesl'/4
				  (_cor7, T1, T2, [T|L])
	end
'match_types'/2 =
    %% Line 2813
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     T) ->
	      'true'
	  %% Line 2814
	  <Type1,Type2> when 'true' ->
	      apply 'match_types1'/2
		  (Type1, Type2)
	end
'match_types1'/2 =
    %% Line 2816
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Atom,_cor7>
	      when let <_cor8> =
		    call 'erlang':'=:='
			(_cor7, Atom)
		in  let <_cor9> =
			call 'erlang':'is_atom'
			    (Atom)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 2817
	      'true'
	  %% Line 2818
	  <'_',_cor10> when 'true' ->
	      %% Line 2819
	      'true'
	  %% Line 2820
	  <_cor11,'_'> when 'true' ->
	      %% Line 2821
	      'true'
	  %% Line 2822
	  <[Type1|[]],[Type2|[]]> when 'true' ->
	      %% Line 2823
	      apply 'match_types1'/2
		  (Type1, Type2)
	  %% Line 2824
	  <T1,T2>
	      when try
		    let <_cor3> =
			call 'erlang':'tuple_size'
			    (T1)
		    in  let <_cor2> =
			    call 'erlang':'tuple_size'
				(T2)
			in  call 'erlang':'=:='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  %% Line 2825
		  call 'erlang':'tuple_size'
		      (T1)
	      in  %% Line 2825
		  apply 'match_typesl'/3
		      (_cor4, T1, T2)
	  %% Line 2826
	  <_X_T1,_X_T2> when 'true' ->
	      %% Line 2827
	      'false'
	end
'match_typesl'/3 =
    %% Line 2829
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_X_T1,_X_T2> when 'true' ->
	      %% Line 2830
	      'true'
	  %% Line 2831
	  <N,T1,T2> when 'true' ->
	      let <_cor4> =
		  %% Line 2832
		  call 'erlang':'element'
		      (N, T1)
	      in  let <_cor3> =
		      %% Line 2832
		      call 'erlang':'element'
			  (N, T2)
		  in  %% Line 2832
		      case apply 'match_types1'/2
			       (_cor4, _cor3) of
			%% Line 2833
			<'true'> when 'true' ->
			    let <_cor5> =
				call 'erlang':'-'
				    (N, 1)
			    in  apply 'match_typesl'/3
				    (_cor5, T1, T2)
			%% Line 2834
			<'false'> when 'true' ->
			    'false'
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
	end
'sort'/2 =
    %% Line 2837
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'true',L> when 'true' ->
	      %% Line 2838
	      call 'lists':'sort'
		  (L)
	  %% Line 2839
	  <'false',L> when 'true' ->
	      %% Line 2840
	      call 'lists':'reverse'
		  (L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'sort',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sofs')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('sofs', _cor0)
end