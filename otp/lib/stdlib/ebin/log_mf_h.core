module 'log_mf_h' ['code_change'/3,
		   'handle_call'/2,
		   'handle_event'/2,
		   'handle_info'/2,
		   'init'/1,
		   'init'/3,
		   'init'/4,
		   'module_info'/0,
		   'module_info'/1,
		   'terminate'/2]
    attributes [%% Line 21
		'behaviour' =
		    %% Line 21
		    ['gen_event'],
		%% Line 28
		'export_type' =
		    %% Line 28
		    [{'args',0}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{'b',{'type',32,'non_neg_integer',[]},[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'f',{'type',33,'range',[{'integer',33,1}|[{'integer',33,255}]]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{'pred',{'type',34,'fun',[{'type',34,'product',[{'type',34,'term',[]}]}|[{'type',34,'boolean',[]}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','state'},[{'typed_record_field',{'record_field',38,{'atom',38,'dir'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'remote_type',38,[{'atom',38,'file'}|[{'atom',38,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'maxB'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'b',[]}]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'maxF'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'f',[]}]]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'curB'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'b',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'curF'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'type',42,'f',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'cur_fd'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'remote_type',43,[{'atom',43,'file'}|[{'atom',43,'fd'}|[[]]]]}]]}}|[{'record_field',44,{'atom',44,'index'},{'nil',44}}|[{'typed_record_field',{'record_field',45,{'atom',45,'pred'}},{'type',45,'union',[{'atom',45,'undefined'}|[{'type',45,'pred',[]}]]}}]]]]]]]],[]}],
		%% Line 71
		'opaque' =
		    %% Line 71
		    [{'args',{'type',71,'tuple',[{'remote_type',71,[{'atom',71,'file'}|[{'atom',71,'filename'}|[[]]]]}|[{'type',71,'b',[]}|[{'type',71,'f',[]}|[{'type',71,'pred',[]}]]]]},[]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'init',3},[{'type',74,'bounded_fun',[{'type',74,'fun',[{'type',74,'product',[{'var',74,'Dir'}|[{'var',74,'MaxBytes'}|[{'var',74,'MaxFiles'}]]]}|[{'var',74,'Args'}]]}|[[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'Dir'}|[{'remote_type',75,[{'atom',75,'file'}|[{'atom',75,'filename'}|[[]]]]}]]]]}|[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'MaxBytes'}|[{'type',76,'non_neg_integer',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'MaxFiles'}|[{'type',77,'range',[{'integer',77,1}|[{'integer',77,255}]]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Args'}|[{'type',78,'args',[]}]]]]}]]]]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'init',4},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'Dir'}|[{'var',82,'MaxBytes'}|[{'var',82,'MaxFiles'}|[{'var',82,'Pred'}]]]]}|[{'var',82,'Args'}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Dir'}|[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'MaxBytes'}|[{'type',84,'non_neg_integer',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'MaxFiles'}|[{'type',85,'range',[{'integer',85,1}|[{'integer',85,255}]]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Pred'}|[{'type',86,'fun',[{'type',86,'product',[{'ann_type',86,[{'var',86,'Event'}|[{'type',86,'term',[]}]]}]}|[{'type',86,'boolean',[]}]]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Args'}|[{'type',87,'args',[]}]]]]}]]]]]]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'init',1},[{'type',95,'fun',[{'type',95,'product',[{'type',95,'tuple',[{'remote_type',95,[{'atom',95,'file'}|[{'atom',95,'filename'}|[[]]]]}|[{'type',95,'non_neg_integer',[]}|[{'type',95,'f',[]}|[{'type',95,'pred',[]}]]]]}]}|[{'type',95,'union',[{'type',95,'tuple',[{'atom',95,'ok'}|[{'type',95,'record',[{'atom',95,'state'}]}]]}|[{'type',95,'tuple',[{'atom',95,'error'}|[{'type',95,'term',[]}]]}]]}]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'handle_event',2},[{'type',119,'fun',[{'type',119,'product',[{'type',119,'term',[]}|[{'type',119,'record',[{'atom',119,'state'}]}]]}|[{'type',119,'tuple',[{'atom',119,'ok'}|[{'type',119,'record',[{'atom',119,'state'}]}]]}]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'handle_info',2},[{'type',149,'fun',[{'type',149,'product',[{'type',149,'term',[]}|[{'type',149,'record',[{'atom',149,'state'}]}]]}|[{'type',149,'tuple',[{'atom',149,'ok'}|[{'type',149,'record',[{'atom',149,'state'}]}]]}]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'terminate',2},[{'type',156,'fun',[{'type',156,'product',[{'type',156,'term',[]}|[{'type',156,'record',[{'atom',156,'state'}]}]]}|[{'type',156,'record',[{'atom',156,'state'}]}]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'handle_call',2},[{'type',162,'fun',[{'type',162,'product',[{'atom',162,'null'}|[{'type',162,'record',[{'atom',162,'state'}]}]]}|[{'type',162,'tuple',[{'atom',162,'ok'}|[{'atom',162,'null'}|[{'type',162,'record',[{'atom',162,'state'}]}]]]}]]}]}],
		%% Line 167
		'spec' =
		    %% Line 167
		    [{{'code_change',3},[{'type',167,'fun',[{'type',167,'product',[{'type',167,'term',[]}|[{'type',167,'record',[{'atom',167,'state'}]}|[{'type',167,'term',[]}]]]}|[{'type',167,'tuple',[{'atom',167,'ok'}|[{'type',167,'record',[{'atom',167,'state'}]}]]}]]}]}]]
'init'/3 =
    %% Line 80
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    ( fun (_cor3) ->
		  'true'
	      -| [{'id',{0,0,'-init/3-fun-0-'}}] )
	in  apply 'init'/4
		(_cor2, _cor1, _cor0, _cor5)
'init'/4 =
    %% Line 89
    fun (_cor3,_cor2,_cor1,_cor0) ->
	{_cor3,_cor2,_cor1,_cor0}
'init'/1 =
    %% Line 97
    fun (_cor0) ->
	case _cor0 of
	  <{Dir,MaxB,MaxF,Pred}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (MaxF)
		    in  let <_cor2> =
			    call 'erlang':'>'
				(MaxF, 0)
			in  let <_cor3> =
				call 'erlang':'<'
				    (MaxF, 256)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 99
		  case apply 'read_index_file'/1
			   (Dir) of
		    %% Line 100
		    <{'ok',LastWritten}> when 'true' ->
			apply 'inc'/2
			    (LastWritten, MaxF)
		    %% Line 101
		    <_cor11> when 'true' ->
			1
		  end
	      in  let <_cor8> =
		      catch
			  %% Line 103
			  apply 'file_open'/2
			      (Dir, _cor6)
		  in  %% Line 103
		      case _cor8 of
			%% Line 104
			<{'ok',Fd}> when 'true' ->
			    %% Line 105
			    {'ok',{'state',Dir,MaxB,MaxF,%% Line 106
							 0,_cor6,%% Line 106
								 Fd,[],Pred}}
			%% Line 107
			<Error> when 'true' ->
			    Error
		      end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_event'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	%% Line 123
	case _cor0 of
	  <{'state',Dir,MaxB,MaxF,CurB,CurF,CurFd,_cor31,Pred}> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 124
		      apply Pred
			  (_cor1)
	      in  %% Line 124
		  case _cor3 of
		    %% Line 125
		    <'true'> when 'true' ->
			let <_cor4> =
			    %% Line 126
			    apply 'tag_event'/1
				(_cor1)
			in  let <Bin> =
				%% Line 126
				call 'erlang':'term_to_binary'
				    (_cor4)
			    in  let <Size> =
				    %% Line 127
				    call 'erlang':'byte_size'
					(Bin)
				in  let <_cor15> =
					%% Line 129
					case <> of
					  %% Line 130
					  <>
					      when try
						    let <_cor7> =
							call 'erlang':'+'
							    (CurB, Size)
						    in  call 'erlang':'<'
							    (_cor7, MaxB)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false' ->
					      _cor0
					  %% Line 131
					  <> when 'true' ->
					      %% Line 132
					      case call 'file':'close'
						       (CurFd) of
						<'ok'> when 'true' ->
						    let <NewF> =
							%% Line 133
							apply 'inc'/2
							    (CurF, MaxF)
						    in  %% Line 134
							case apply 'file_open'/2
								 (Dir, NewF) of
							  <{'ok',NewFd}> when 'true' ->
							      let <_cor12> =
								  %% Line 135
								  call 'erlang':'setelement'
								      (7, _cor0, NewFd)
							      in  let <_cor13> =
								      %% Line 135
								      call 'erlang':'setelement'
									  (6, _cor12, NewF)
								  in  %% Line 135
								      call 'erlang':'setelement'
									  (5, _cor13, 0)
							  ( <_cor10> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor10})
							    -| ['compiler_generated'] )
							end
						( <_cor8> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor8})
						  -| ['compiler_generated'] )
					      end
					end
				    in  %% Line 137
					case apply 'put_int16'/1
						 (Size) of
					  <[Hi|[Lo|[]]]> when 'true' ->
					      %% Line 138
					      ( case _cor15 of
						  ( <( {'state',_cor41,_cor42,_cor43,_cor44,_cor45,_rec1,_cor46,_cor47}
						       -| ['compiler_generated'] )> when 'true' ->
							do  case call 'file':'write'
								     (_rec1, [Hi|[Lo|[Bin|[]]]]) of
							      %% Line 139
							      <'ok'> when 'true' ->
								  'ok'
							      %% Line 141
							      <{'error',Reason}> when 'true' ->
								  %% Line 142
								  call 'erlang':'exit'
								      ({'file_exit',Reason})
							      ( <_cor20> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor20})
								-| ['compiler_generated'] )
							    end
							    let <_cor23> =
								%% Line 144
								call 'erlang':'+'
								    (_cor44, Size)
							    in  let <_rec2> =
								    %% Line 144
								    call 'erlang':'+'
									(_cor23, 2)
								in  let <_cor27> =
									%% Line 144
									call 'erlang':'setelement'
									    (5, _cor15, _rec2)
								    in  %% Line 144
									{'ok',_cor27}
						    -| ['compiler_generated'] )
						  ( <_cor48> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor17})
					    -| ['compiler_generated'] )
					end
		    %% Line 145
		    <_cor66> when 'true' ->
			%% Line 146
			{'ok',_cor0}
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'emulator',GL,Chars},State> when 'true' ->
	      %% Line 152
	      apply 'handle_event'/2
		  ({'emulator',GL,Chars}, State)
	  %% Line 153
	  <_cor4,State> when 'true' ->
	      %% Line 154
	      {'ok',State}
	end
'terminate'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	%% Line 159
	( case _cor0 of
	    ( <( {'state',_cor8,_cor9,_cor10,_cor11,_cor12,_rec5,_cor13,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'close'
			   (_rec5) of
		    <'ok'> when 'true' ->
			_cor0
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'handle_call'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'null',State> when 'true' ->
	      %% Line 165
	      {'ok','null',State}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'handle_call',2}}] )
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 169
    fun (_cor2,_cor1,_cor0) ->
	%% Line 170
	{'ok',_cor1}
'file_open'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 177
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  let <_cor3> =
		%% Line 177
		call 'erlang':'++'
		    (_cor1, [47|_cor2])
	    in  %% Line 177
		case call 'file':'open'
			 (_cor3, ['raw'|['write']]) of
		  %% Line 178
		  <{'ok',Fd}> when 'true' ->
		      do  %% Line 179
			  apply 'write_index_file'/2
			      (_cor1, _cor0)
			  %% Line 180
			  {'ok',Fd}
		  %% Line 181
		  <_cor7> when 'true' ->
		      %% Line 182
		      call 'erlang':'exit'
			  ('file_open')
		end
'put_int16'/1 =
    %% Line 185
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 186
	    call 'erlang':'band'
		(_cor0, 65280)
	in  let <_cor2> =
		%% Line 186
		call 'erlang':'bsr'
		    (_cor1, 8)
	    in  let <_cor3> =
		    %% Line 186
		    call 'erlang':'band'
			(_cor0, 255)
		in  %% Line 186
		    [_cor2|[_cor3|[]]]
'tag_event'/1 =
    %% Line 188
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 189
	    call 'erlang':'localtime'
		()
	in  %% Line 189
	    {_cor1,_cor0}
'read_index_file'/1 =
    %% Line 191
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 192
	    call 'erlang':'++'
		(_cor0, [47|[105|[110|[100|[101|[120]]]]]])
	in  %% Line 192
	    case call 'file':'open'
		     (_cor1, ['raw'|['read']]) of
	      %% Line 193
	      <{'ok',Fd}> when 'true' ->
		  let <_cor2> =
		      catch
			  %% Line 194
			  call 'file':'read'
			      (Fd, 1)
		  in  let <_cor4> =
			  %% Line 194
			  case _cor2 of
			    %% Line 195
			    <{'ok',[Index|[]]}> when 'true' ->
				{'ok',Index}
			    %% Line 196
			    <_cor9> when 'true' ->
				'error'
			  end
		      in  %% Line 198
			  case call 'file':'close'
				   (Fd) of
			    <'ok'> when 'true' ->
				_cor4
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	      %% Line 200
	      <_cor10> when 'true' ->
		  'error'
	    end
'write_index_file'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	let <File> =
	    %% Line 211
	    call 'erlang':'++'
		(_cor1, [47|[105|[110|[100|[101|[120]]]]]])
	in  let <TmpFile> =
		%% Line 212
		call 'erlang':'++'
		    (File, [46|[116|[109|[112]]]])
	    in  %% Line 213
		case call 'file':'open'
			 (TmpFile, ['raw'|['write']]) of
		  %% Line 214
		  <{'ok',Fd}> when 'true' ->
		      %% Line 215
		      case call 'file':'write'
			       (Fd, [_cor0|[]]) of
			<'ok'> when 'true' ->
			    %% Line 216
			    case call 'file':'close'
				     (Fd) of
			      <'ok'> when 'true' ->
				  %% Line 217
				  case call 'file':'rename'
					   (TmpFile, File) of
				    <'ok'> when 'true' ->
					%% Line 218
					'ok'
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
		  %% Line 219
		  <_cor10> when 'true' ->
		      call 'erlang':'exit'
			  ('write_index_file')
		end
'inc'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	%% Line 223
	case <> of
	  %% Line 224
	  <>
	      when call 'erlang':'<'
		    (_cor1,
		     _cor0) ->
	      call 'erlang':'+'
		  (_cor1, 1)
	  %% Line 225
	  <> when 'true' ->
	      1
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('log_mf_h')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('log_mf_h', _cor0)
end