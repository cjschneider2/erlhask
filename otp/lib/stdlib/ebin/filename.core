module 'filename' ['absname'/1,
		   'absname'/2,
		   'absname_join'/2,
		   'append'/2,
		   'basename'/1,
		   'basename'/2,
		   'dirname'/1,
		   'extension'/1,
		   'find_src'/1,
		   'find_src'/2,
		   'flatten'/1,
		   'join'/1,
		   'join'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'nativename'/1,
		   'pathtype'/1,
		   'rootname'/1,
		   'rootname'/2,
		   'split'/1]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'absname',1},[{'type',64,'bounded_fun',[{'type',64,'fun',[{'type',64,'product',[{'var',64,'Filename'}]}|[{'remote_type',64,[{'atom',64,'file'}|[{'atom',64,'filename_all'}|[[]]]]}]]}|[[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Filename'}|[{'remote_type',65,[{'atom',65,'file'}|[{'atom',65,'name_all'}|[[]]]]}]]]]}]]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'absname',2},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Filename'}|[{'var',70,'Dir'}]]}|[{'remote_type',70,[{'atom',70,'file'}|[{'atom',70,'filename_all'}|[[]]]]}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Filename'}|[{'remote_type',71,[{'atom',71,'file'}|[{'atom',71,'name_all'}|[[]]]]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Dir'}|[{'remote_type',72,[{'atom',72,'file'}|[{'atom',72,'name_all'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'absname_join',2},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'Dir'}|[{'var',125,'Filename'}]]}|[{'remote_type',125,[{'atom',125,'file'}|[{'atom',125,'filename_all'}|[[]]]]}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Dir'}|[{'remote_type',126,[{'atom',126,'file'}|[{'atom',126,'name_all'}|[[]]]]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Filename'}|[{'remote_type',127,[{'atom',127,'file'}|[{'atom',127,'name_all'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 139
		'spec' =
		    %% Line 139
		    [{{'basename',1},[{'type',139,'bounded_fun',[{'type',139,'fun',[{'type',139,'product',[{'var',139,'Filename'}]}|[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename_all'}|[[]]]]}]]}|[[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Filename'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'name_all'}|[[]]]]}]]]]}]]]}]}],
		%% Line 204
		'spec' =
		    %% Line 204
		    [{{'basename',2},[{'type',204,'bounded_fun',[{'type',204,'fun',[{'type',204,'product',[{'var',204,'Filename'}|[{'var',204,'Ext'}]]}|[{'remote_type',204,[{'atom',204,'file'}|[{'atom',204,'filename_all'}|[[]]]]}]]}|[[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Filename'}|[{'remote_type',205,[{'atom',205,'file'}|[{'atom',205,'name_all'}|[[]]]]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Ext'}|[{'remote_type',206,[{'atom',206,'file'}|[{'atom',206,'name_all'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 254
		'spec' =
		    %% Line 254
		    [{{'dirname',1},[{'type',254,'bounded_fun',[{'type',254,'fun',[{'type',254,'product',[{'var',254,'Filename'}]}|[{'remote_type',254,[{'atom',254,'file'}|[{'atom',254,'filename_all'}|[[]]]]}]]}|[[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Filename'}|[{'remote_type',255,[{'atom',255,'file'}|[{'atom',255,'name_all'}|[[]]]]}]]]]}]]]}]}],
		%% Line 347
		'spec' =
		    %% Line 347
		    [{{'extension',1},[{'type',347,'bounded_fun',[{'type',347,'fun',[{'type',347,'product',[{'var',347,'Filename'}]}|[{'remote_type',347,[{'atom',347,'file'}|[{'atom',347,'filename_all'}|[[]]]]}]]}|[[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'Filename'}|[{'remote_type',348,[{'atom',348,'file'}|[{'atom',348,'name_all'}|[[]]]]}]]]]}]]]}]}],
		%% Line 390
		'spec' =
		    %% Line 390
		    [{{'join',1},[{'type',390,'bounded_fun',[{'type',390,'fun',[{'type',390,'product',[{'var',390,'Components'}]}|[{'remote_type',390,[{'atom',390,'file'}|[{'atom',390,'filename_all'}|[[]]]]}]]}|[[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Components'}|[{'type',391,'list',[{'remote_type',391,[{'atom',391,'file'}|[{'atom',391,'name_all'}|[[]]]]}]}]]]]}]]]}]}],
		%% Line 403
		'spec' =
		    %% Line 403
		    [{{'join',2},[{'type',403,'bounded_fun',[{'type',403,'fun',[{'type',403,'product',[{'var',403,'Name1'}|[{'var',403,'Name2'}]]}|[{'remote_type',403,[{'atom',403,'file'}|[{'atom',403,'filename_all'}|[[]]]]}]]}|[[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'Name1'}|[{'remote_type',404,[{'atom',404,'file'}|[{'atom',404,'name_all'}|[[]]]]}]]]]}|[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'Name2'}|[{'remote_type',405,[{'atom',405,'file'}|[{'atom',405,'name_all'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 491
		'spec' =
		    %% Line 491
		    [{{'append',2},[{'type',491,'fun',[{'type',491,'product',[{'remote_type',491,[{'atom',491,'file'}|[{'atom',491,'filename_all'}|[[]]]]}|[{'remote_type',491,[{'atom',491,'file'}|[{'atom',491,'name_all'}|[[]]]]}]]}|[{'remote_type',491,[{'atom',491,'file'}|[{'atom',491,'filename_all'}|[[]]]]}]]}]}],
		%% Line 513
		'spec' =
		    %% Line 513
		    [{{'pathtype',1},[{'type',513,'bounded_fun',[{'type',513,'fun',[{'type',513,'product',[{'var',513,'Path'}]}|[{'type',513,'union',[{'atom',513,'absolute'}|[{'atom',513,'relative'}|[{'atom',513,'volumerelative'}]]]}]]}|[[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Path'}|[{'remote_type',514,[{'atom',514,'file'}|[{'atom',514,'name_all'}|[[]]]]}]]]]}]]]}]}],
		%% Line 569
		'spec' =
		    %% Line 569
		    [{{'rootname',1},[{'type',569,'bounded_fun',[{'type',569,'fun',[{'type',569,'product',[{'var',569,'Filename'}]}|[{'remote_type',569,[{'atom',569,'file'}|[{'atom',569,'filename_all'}|[[]]]]}]]}|[[{'type',570,'constraint',[{'atom',570,'is_subtype'}|[[{'var',570,'Filename'}|[{'remote_type',570,[{'atom',570,'file'}|[{'atom',570,'name_all'}|[[]]]]}]]]]}]]]}]}],
		%% Line 599
		'spec' =
		    %% Line 599
		    [{{'rootname',2},[{'type',599,'bounded_fun',[{'type',599,'fun',[{'type',599,'product',[{'var',599,'Filename'}|[{'var',599,'Ext'}]]}|[{'remote_type',599,[{'atom',599,'file'}|[{'atom',599,'filename_all'}|[[]]]]}]]}|[[{'type',600,'constraint',[{'atom',600,'is_subtype'}|[[{'var',600,'Filename'}|[{'remote_type',600,[{'atom',600,'file'}|[{'atom',600,'name_all'}|[[]]]]}]]]]}|[{'type',601,'constraint',[{'atom',601,'is_subtype'}|[[{'var',601,'Ext'}|[{'remote_type',601,[{'atom',601,'file'}|[{'atom',601,'name_all'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 627
		'spec' =
		    %% Line 627
		    [{{'split',1},[{'type',627,'bounded_fun',[{'type',627,'fun',[{'type',627,'product',[{'var',627,'Filename'}]}|[{'var',627,'Components'}]]}|[[{'type',628,'constraint',[{'atom',628,'is_subtype'}|[[{'var',628,'Filename'}|[{'remote_type',628,[{'atom',628,'file'}|[{'atom',628,'name_all'}|[[]]]]}]]]]}|[{'type',629,'constraint',[{'atom',629,'is_subtype'}|[[{'var',629,'Components'}|[{'type',629,'list',[{'remote_type',629,[{'atom',629,'file'}|[{'atom',629,'name_all'}|[[]]]]}]}]]]]}]]]]}]}],
		%% Line 722
		'spec' =
		    %% Line 722
		    [{{'nativename',1},[{'type',722,'bounded_fun',[{'type',722,'fun',[{'type',722,'product',[{'var',722,'Path'}]}|[{'remote_type',722,[{'atom',722,'file'}|[{'atom',722,'filename_all'}|[[]]]]}]]}|[[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'Path'}|[{'remote_type',723,[{'atom',723,'file'}|[{'atom',723,'name_all'}|[[]]]]}]]]]}]]]}]}],
		%% Line 777
		'spec' =
		    %% Line 777
		    [{{'find_src',1},[{'type',777,'bounded_fun',[{'type',777,'fun',[{'type',777,'product',[{'var',777,'Beam'}]}|[{'type',777,'union',[{'type',777,'tuple',[{'var',777,'SourceFile'}|[{'var',777,'Options'}]]}|[{'type',778,'tuple',[{'atom',778,'error'}|[{'type',778,'tuple',[{'var',778,'ErrorReason'}|[{'var',778,'Module'}]]}]]}]]}]]}|[[{'type',779,'constraint',[{'atom',779,'is_subtype'}|[[{'var',779,'Beam'}|[{'type',779,'union',[{'var',779,'Module'}|[{'var',779,'Filename'}]]}]]]]}|[{'type',780,'constraint',[{'atom',780,'is_subtype'}|[[{'var',780,'Filename'}|[{'type',780,'union',[{'type',780,'atom',[]}|[{'type',780,'string',[]}]]}]]]]}|[{'type',781,'constraint',[{'atom',781,'is_subtype'}|[[{'var',781,'Module'}|[{'type',781,'module',[]}]]]]}|[{'type',782,'constraint',[{'atom',782,'is_subtype'}|[[{'var',782,'SourceFile'}|[{'type',782,'string',[]}]]]]}|[{'type',783,'constraint',[{'atom',783,'is_subtype'}|[[{'var',783,'Options'}|[{'type',783,'list',[{'var',783,'Option'}]}]]]]}|[{'type',784,'constraint',[{'atom',784,'is_subtype'}|[[{'var',784,'Option'}|[{'type',784,'union',[{'type',784,'tuple',[{'atom',784,'i'}|[{'ann_type',784,[{'var',784,'Path'}|[{'type',784,'string',[]}]]}]]}|[{'type',785,'tuple',[{'atom',785,'outdir'}|[{'ann_type',785,[{'var',785,'Path'}|[{'type',785,'string',[]}]]}]]}|[{'type',786,'tuple',[{'atom',786,'d'}|[{'type',786,'atom',[]}]]}]]]}]]]]}|[{'type',787,'constraint',[{'atom',787,'is_subtype'}|[[{'var',787,'ErrorReason'}|[{'type',787,'union',[{'atom',787,'non_existing'}|[{'atom',787,'preloaded'}|[{'atom',787,'interpreted'}]]]}]]]]}]]]]]]]]]}]}],
		%% Line 798
		'spec' =
		    %% Line 798
		    [{{'find_src',2},[{'type',798,'bounded_fun',[{'type',798,'fun',[{'type',798,'product',[{'var',798,'Beam'}|[{'var',798,'Rules'}]]}|[{'type',798,'union',[{'type',798,'tuple',[{'var',798,'SourceFile'}|[{'var',798,'Options'}]]}|[{'type',799,'tuple',[{'atom',799,'error'}|[{'type',799,'tuple',[{'var',799,'ErrorReason'}|[{'var',799,'Module'}]]}]]}]]}]]}|[[{'type',800,'constraint',[{'atom',800,'is_subtype'}|[[{'var',800,'Beam'}|[{'type',800,'union',[{'var',800,'Module'}|[{'var',800,'Filename'}]]}]]]]}|[{'type',801,'constraint',[{'atom',801,'is_subtype'}|[[{'var',801,'Filename'}|[{'type',801,'union',[{'type',801,'atom',[]}|[{'type',801,'string',[]}]]}]]]]}|[{'type',802,'constraint',[{'atom',802,'is_subtype'}|[[{'var',802,'Rules'}|[{'type',802,'list',[{'type',802,'tuple',[{'ann_type',802,[{'var',802,'BinSuffix'}|[{'type',802,'string',[]}]]}|[{'ann_type',802,[{'var',802,'SourceSuffix'}|[{'type',802,'string',[]}]]}]]}]}]]]]}|[{'type',803,'constraint',[{'atom',803,'is_subtype'}|[[{'var',803,'Module'}|[{'type',803,'module',[]}]]]]}|[{'type',804,'constraint',[{'atom',804,'is_subtype'}|[[{'var',804,'SourceFile'}|[{'type',804,'string',[]}]]]]}|[{'type',805,'constraint',[{'atom',805,'is_subtype'}|[[{'var',805,'Options'}|[{'type',805,'list',[{'var',805,'Option'}]}]]]]}|[{'type',806,'constraint',[{'atom',806,'is_subtype'}|[[{'var',806,'Option'}|[{'type',806,'union',[{'type',806,'tuple',[{'atom',806,'i'}|[{'ann_type',806,[{'var',806,'Path'}|[{'type',806,'string',[]}]]}]]}|[{'type',807,'tuple',[{'atom',807,'outdir'}|[{'ann_type',807,[{'var',807,'Path'}|[{'type',807,'string',[]}]]}]]}|[{'type',808,'tuple',[{'atom',808,'d'}|[{'type',808,'atom',[]}]]}]]]}]]]]}|[{'type',809,'constraint',[{'atom',809,'is_subtype'}|[[{'var',809,'ErrorReason'}|[{'type',809,'union',[{'atom',809,'non_existing'}|[{'atom',809,'preloaded'}|[{'atom',809,'interpreted'}]]]}]]]]}]]]]]]]]]]}]}],
		%% Line 926
		'spec' =
		    %% Line 926
		    [{{'flatten',1},[{'type',926,'bounded_fun',[{'type',926,'fun',[{'type',926,'product',[{'var',926,'Filename'}]}|[{'remote_type',926,[{'atom',926,'file'}|[{'atom',926,'filename_all'}|[[]]]]}]]}|[[{'type',927,'constraint',[{'atom',927,'is_subtype'}|[[{'var',927,'Filename'}|[{'remote_type',927,[{'atom',927,'file'}|[{'atom',927,'name_all'}|[[]]]]}]]]]}]]]}]}]]
'absname'/1 =
    %% Line 66
    fun (_cor0) ->
	%% Line 67
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 68
	      apply 'absname'/2
		  (_cor0, Cwd)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'absname'/2 =
    %% Line 73
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,AbsBase>
	      when let <_cor2> =
		    call 'erlang':'is_binary'
			(Name)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (AbsBase)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 74
		  apply 'filename_string_to_binary'/1
		      (AbsBase)
	      in  %% Line 74
		  apply 'absname'/2
		      (Name, _cor4)
	  %% Line 75
	  <Name,AbsBase>
	      when let <_cor5> =
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor6> =
			call 'erlang':'is_binary'
			    (AbsBase)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 76
		  apply 'filename_string_to_binary'/1
		      (Name)
	      in  %% Line 76
		  apply 'absname'/2
		      (_cor7, AbsBase)
	  %% Line 78
	  <Name,AbsBase> when 'true' ->
	      %% Line 79
	      case apply 'pathtype'/1
		       (Name) of
		%% Line 80
		<'relative'> when 'true' ->
		    %% Line 81
		    apply 'absname_join'/2
			(AbsBase, Name)
		%% Line 82
		<'absolute'> when 'true' ->
		    let <_cor8> =
			%% Line 85
			apply 'flatten'/1
			    (Name)
		    in  %% Line 85
			apply 'join'/1
			    ([_cor8|[]])
		%% Line 86
		<'volumerelative'> when 'true' ->
		    let <_cor10> =
			%% Line 87
			apply 'split'/1
			    (Name)
		    in  let <_cor9> =
			    %% Line 87
			    apply 'split'/1
				(AbsBase)
			in  %% Line 87
			    apply 'absname_vr'/3
				(_cor10, _cor9, AbsBase)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	end
'absname_vr'/3 =
    %% Line 92
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[#{#<47>(8,1,'integer',['unsigned'|['big']])}#|Rest1],[Volume|_cor16],_X_AbsBase> when 'true' ->
	      %% Line 94
	      apply 'join'/1
		  ([Volume|Rest1])
	  %% Line 95
	  <[#{#<X>(8,1,'integer',['unsigned'|['big']]),
	      #<58>(8,1,'integer',['unsigned'|['big']])}#|Rest1],[#{#<_cor17>(8,1,'integer',['unsigned'|['big']]),
								    #<_cor18>('all',8,'binary',['unsigned'|['big']])}#|_cor19],AbsBase>
	      when call 'erlang':'=:='
		    (_cor17,
		     X) ->
	      let <_cor3> =
		  %% Line 97
		  apply 'join'/1
		      (Rest1)
	      in  %% Line 97
		  apply 'absname'/2
		      (_cor3, AbsBase)
	  %% Line 98
	  <[#{#<X>(8,1,'integer',['unsigned'|['big']]),
	      #<58>(8,1,'integer',['unsigned'|['big']])}#|Name],_cor20,_X_AbsBase> when 'true' ->
	      let <_cor5> =
		  %% Line 101
		  case call 'file':'get_cwd'
			   ([X|[58]]) of
		    %% Line 102
		    <{'ok',Dir}> when 'true' ->
			apply 'filename_string_to_binary'/1
			    (Dir)
		    %% Line 103
		    <{'error',_cor21}> when 'true' ->
			#{#<X>(8,1,'integer',['unsigned'|['big']]),
			  #<58>(8,1,'integer',['unsigned'|['big']]),
			  #<47>(8,1,'integer',['unsigned'|['big']])}#
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 105
		      apply 'join'/1
			  (Name)
		  in  %% Line 105
		      apply 'absname'/2
			  (_cor7, _cor5)
	  %% Line 106
	  <[[47]|Rest1],[Volume|_cor22],_X_AbsBase> when 'true' ->
	      %% Line 108
	      apply 'join'/1
		  ([Volume|Rest1])
	  %% Line 109
	  <[[X|[58]]|Rest1],[[_cor23|_cor24]|_cor25],AbsBase>
	      when call 'erlang':'=:='
		    (_cor23,
		     X) ->
	      let <_cor8> =
		  %% Line 111
		  apply 'join'/1
		      (Rest1)
	      in  %% Line 111
		  apply 'absname'/2
		      (_cor8, AbsBase)
	  %% Line 112
	  <[[X|[58]]|Name],_cor26,_X_AbsBase> when 'true' ->
	      let <_cor10> =
		  %% Line 115
		  case call 'file':'get_cwd'
			   ([X|[58]]) of
		    %% Line 116
		    <{'ok',Dir}> when 'true' ->
			Dir
		    %% Line 117
		    <{'error',_cor27}> when 'true' ->
			[X|[58|[47]]]
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor12> =
		      %% Line 119
		      apply 'join'/1
			  (Name)
		  in  %% Line 119
		      apply 'absname'/2
			  (_cor12, _cor10)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'absname_vr',3}}] )
	    -| ['compiler_generated'] )
	end
'absname_join'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 129
	    apply 'flatten'/1
		(_cor0)
	in  %% Line 129
	    apply 'join'/2
		(_cor1, _cor2)
'basename'/1 =
    %% Line 141
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 142
	      case call 'os':'type'
		       () of
		%% Line 143
		<{'win32',_cor6}> when 'true' ->
		    %% Line 144
		    apply 'win_basenameb'/1
			(Name)
		%% Line 145
		<_cor7> when 'true' ->
		    %% Line 146
		    apply 'basenameb'/2
			(Name, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#])
	      end
	  %% Line 149
	  <Name0> when 'true' ->
	      let <Name1> =
		  %% Line 150
		  apply 'flatten'/1
		      (Name0)
	      in  %% Line 151
		  case apply 'separators'/0
			   () of
		    <{DirSep2,DrvSep}> when 'true' ->
			let <Name> =
			    %% Line 152
			    apply 'skip_prefix'/2
				(Name1, DrvSep)
			in  %% Line 153
			    apply 'basename1'/3
				(Name, Name, DirSep2)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	end
'win_basenameb'/1 =
    %% Line 155
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<Letter>(8,1,'integer',['unsigned'|['big']]),
	     #<58>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when try
		    let <_cor4> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'>='
					  (Letter,
					   65)
				      -| ['compiler_generated'] ) ->
				  ( call 'erlang':'=<'
					(Letter, 90)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor8> =
			      ( case _cor4 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					( case <> of
					    ( <>
						  when ( call 'erlang':'>='
							  (Letter,
							   97)
						      -| ['compiler_generated'] ) ->
						  ( call 'erlang':'=<'
							(Letter, 122)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor1> when 'true' ->
					_cor1
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor8
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 156
	      apply 'basenameb'/2
		  (Rest, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|[#{#<92>(8,1,'integer',['unsigned'|['big']])}#]])
	  %% Line 157
	  <O> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (O)
		  %% Line 158
		  apply 'basenameb'/2
		      (O, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|[#{#<92>(8,1,'integer',['unsigned'|['big']])}#]])
	end
'basenameb'/2 =
    %% Line 159
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 160
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[X|_cor3]>
				when %% Line 161
				  call 'erlang':'=/='
				      (X,
				       #{}#) ->
				let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [X|_cor6]
				      -| ['compiler_generated'] )
			    ( <[X|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      call 'binary':'split'
			  (_cor1, _cor0, ['global'])
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  %% Line 162
	    case <> of
	      %% Line 163
	      <>
		  when call 'erlang':'=:='
			(_cor7,
			 []) ->
		  %% Line 164
		  #{}#
	      %% Line 165
	      <> when 'true' ->
		  %% Line 166
		  call 'lists':'last'
		      (_cor7)
	    end
'basename1'/3 =
    %% Line 171
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[47],Tail0,_X_DirSep2> when 'true' ->
	      %% Line 173
	      case call 'lists':'reverse'
		       (Tail0) of
		<[_cor7|Tail]> when 'true' ->
		    %% Line 174
		    call 'lists':'reverse'
			(Tail)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 175
	  <[47|Rest],_X_Tail,DirSep2> when 'true' ->
	      %% Line 176
	      apply 'basename1'/3
		  (Rest, Rest, DirSep2)
	  %% Line 177
	  <[DirSep2|Rest],Tail,_cor8>
	      when let <_cor9> =
		    call 'erlang':'=:='
			(_cor8, DirSep2)
		in  let <_cor10> =
			call 'erlang':'is_integer'
			    (DirSep2)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 178
	      apply 'basename1'/3
		  ([47|Rest], Tail, DirSep2)
	  %% Line 179
	  <[Char|Rest],Tail,DirSep2>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 180
	      apply 'basename1'/3
		  (Rest, Tail, DirSep2)
	  %% Line 181
	  <[],Tail,_X_DirSep2> when 'true' ->
	      %% Line 182
	      Tail
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'basename1',3}}] )
	    -| ['compiler_generated'] )
	end
'skip_prefix'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,'false'> when 'true' ->
	      %% Line 185
	      Name
	  %% Line 186
	  <[L|[DrvSep|Name]],_cor12>
	      when let <_cor13> =
		    call 'erlang':'=:='
			(_cor12, DrvSep)
		in  let <_cor14> =
			try
			    let <_cor5> =
				( case <> of
				    ( <>
					  when ( call 'erlang':'>='
						  (L,
						   65)
					      -| ['compiler_generated'] ) ->
					  ( call 'erlang':'=<'
						(L, 90)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  ( let <_cor9> =
				      ( case _cor5 of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						( case <> of
						    ( <>
							  when ( call 'erlang':'>='
								  (L,
								   97)
							      -| ['compiler_generated'] ) ->
							  ( call 'erlang':'=<'
								(L, 122)
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor2> when 'true' ->
						_cor2
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '=:='
									     -| ['compiler_generated'] )
					    (( _cor9
					       -| ['compiler_generated'] ), ( 'true'
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      %% Line 187
	      Name
	  %% Line 188
	  <Name,_cor15> when 'true' ->
	      %% Line 189
	      Name
	end
'basename'/2 =
    %% Line 207
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Ext>
	      when let <_cor2> =
		    call 'erlang':'is_binary'
			(Name)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Ext)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 208
		  apply 'filename_string_to_binary'/1
		      (Ext)
	      in  %% Line 208
		  apply 'basename'/2
		      (Name, _cor4)
	  %% Line 209
	  <Name,Ext>
	      when let <_cor5> =
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor6> =
			call 'erlang':'is_binary'
			    (Ext)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 210
		  apply 'filename_string_to_binary'/1
		      (Name)
	      in  %% Line 210
		  apply 'basename'/2
		      (_cor7, Ext)
	  %% Line 211
	  <Name,Ext>
	      when let <_cor8> =
		    call 'erlang':'is_binary'
			(Name)
		in  let <_cor9> =
			call 'erlang':'is_binary'
			    (Ext)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      let <BName> =
		  %% Line 212
		  apply 'basename'/1
		      (Name)
	      in  let <LAll> =
		      %% Line 213
		      call 'erlang':'byte_size'
			  (Name)
		  in  let <LN> =
			  %% Line 214
			  call 'erlang':'byte_size'
			      (BName)
		      in  let <LE> =
			      %% Line 215
			      call 'erlang':'byte_size'
				  (Ext)
			  in  %% Line 216
			      case call 'erlang':'-'
				       (LN, LE) of
				%% Line 217
				<Neg>
				    when call 'erlang':'<'
					  (Neg,
					   0) ->
				    %% Line 218
				    BName
				%% Line 219
				<Pos> when 'true' ->
				    let <_cor14> =
					%% Line 220
					call 'erlang':'-'
					    (LAll, Pos)
				    in  let <StartLen> =
					    %% Line 220
					    call 'erlang':'-'
						(_cor14, LE)
					in  %% Line 221
					    case ( Name
						   -| ['reuse_for_context'] ) of
					      %% Line 222
					      <#{#<_cor24>(StartLen,8,'binary',['unsigned'|['big']]),
						 #<Part>(Pos,8,'binary',['unsigned'|['big']]),
						 #<_cor25>('all',8,'binary',['unsigned'|['big']])}#>
						  when call 'erlang':'=:='
							(_cor25,
							 Ext) ->
						  %% Line 223
						  Part
					      %% Line 224
					      <_X_Other> when 'true' ->
						  %% Line 225
						  BName
					    end
			      end
	  %% Line 229
	  <Name0,Ext0> when 'true' ->
	      let <Name> =
		  %% Line 230
		  apply 'flatten'/1
		      (Name0)
	      in  let <Ext> =
		      %% Line 231
		      apply 'flatten'/1
			  (Ext0)
		  in  %% Line 232
		      case apply 'separators'/0
			       () of
			<{DirSep2,DrvSep}> when 'true' ->
			    let <NoPrefix> =
				%% Line 233
				apply 'skip_prefix'/2
				    (Name, DrvSep)
			    in  %% Line 234
				apply 'basename'/4
				    (NoPrefix, Ext, [], DirSep2)
			( <_cor20> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor20})
			  -| ['compiler_generated'] )
		      end
	end
'basename'/4 =
    %% Line 236
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Ext,_cor8,Tail,_X_DrvSep2>
	      when call 'erlang':'=:='
		    (_cor8,
		     Ext) ->
	      %% Line 237
	      call 'lists':'reverse'
		  (Tail)
	  %% Line 238
	  <[47],Ext,Tail,DrvSep2> when 'true' ->
	      %% Line 239
	      apply 'basename'/4
		  ([], Ext, Tail, DrvSep2)
	  %% Line 240
	  <[47|Rest],Ext,_X_Tail,DrvSep2> when 'true' ->
	      %% Line 241
	      apply 'basename'/4
		  (Rest, Ext, [], DrvSep2)
	  %% Line 242
	  <[DirSep2|Rest],Ext,Tail,_cor9>
	      when let <_cor10> =
		    call 'erlang':'=:='
			(_cor9, DirSep2)
		in  let <_cor11> =
			call 'erlang':'is_integer'
			    (DirSep2)
		    in  call 'erlang':'and'
			    (_cor10, _cor11) ->
	      %% Line 243
	      apply 'basename'/4
		  ([47|Rest], Ext, Tail, DirSep2)
	  %% Line 244
	  <[Char|Rest],Ext,Tail,DrvSep2>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 245
	      apply 'basename'/4
		  (Rest, Ext, [Char|Tail], DrvSep2)
	  %% Line 246
	  <[],_X_Ext,Tail,_X_DrvSep2> when 'true' ->
	      %% Line 247
	      call 'lists':'reverse'
		  (Tail)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'basename',4}}] )
	    -| ['compiler_generated'] )
	end
'dirname'/1 =
    %% Line 256
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 257
	      case apply 'separators'/0
		       () of
		<{Dsep,Drivesep}> when 'true' ->
		    let <_cor4> =
			%% Line 258
			case Dsep of
			  %% Line 259
			  <Sep>
			      when call 'erlang':'is_integer'
				    (Dsep) ->
			      let <_cor2> =
				  %% Line 260
				  #{#<Sep>(8,1,'integer',['unsigned'|['big']])}#
			      in  %% Line 260
				  [_cor2|[]]
			  %% Line 261
			  <_cor32> when 'true' ->
			      %% Line 262
			      []
			end
		    in  let <XPart0,Dirs> =
			    %% Line 264
			    case Drivesep of
			      %% Line 265
			      <X>
				  when call 'erlang':'is_integer'
					(Drivesep) ->
				  %% Line 266
				  case ( Name
					 -| ['reuse_for_context'] ) of
				    %% Line 267
				    <#{#<DL>(8,1,'integer',['unsigned'|['big']]),
				       #<_cor33>(8,1,'integer',['unsigned'|['big']]),
				       #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
					when let <_cor34> =
					      call 'erlang':'=:='
						  (_cor33, X)
					  in  let <_cor35> =
						  try
						      let <_cor9> =
							  ( case <> of
							      ( <>
								    when ( call 'erlang':'>='
									    (DL,
									     65)
									-| ['compiler_generated'] ) ->
								    ( call 'erlang':'=<'
									  (DL, 90)
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      in  ( let <_cor13> =
								( case _cor9 of
								    ( <( 'true'
									 -| ['compiler_generated'] )> when 'true' ->
									  'true'
								      -| ['compiler_generated'] )
								    ( <( 'false'
									 -| ['compiler_generated'] )> when 'true' ->
									  ( case <> of
									      ( <>
										    when ( call 'erlang':'>='
											    (DL,
											     97)
											-| ['compiler_generated'] ) ->
										    ( call 'erlang':'=<'
											  (DL, 122)
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <> when 'true' ->
										    'false'
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <_cor6> when 'true' ->
									  _cor6
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    in  ( call ( 'erlang'
									 -| ['compiler_generated'] ):( '=:='
												       -| ['compiler_generated'] )
								      (( _cor13
									 -| ['compiler_generated'] ), ( 'true'
													-| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
						  of <Try> ->
						      Try
						  catch <T,R> ->
						      'false'
					      in  call 'erlang':'and'
						      (_cor34, _cor35) ->
					let <_cor14> =
					    %% Line 268
					    #{#<DL>(8,1,'integer',['unsigned'|['big']]),
					      #<X>(8,1,'integer',['unsigned'|['big']])}#
					in  <_cor14,%% Line 268
						    Rest>
				    %% Line 269
				    <_cor36> when 'true' ->
					do  primop 'bs_context_to_binary'
						(Name)
					    %% Line 270
					    <#{}#,Name>
				  end
			      %% Line 272
			      <_cor37> when 'true' ->
				  %% Line 273
				  <#{}#,Name>
			    end
			in  let <Parts0> =
				%% Line 275
				call 'binary':'split'
				    (Dirs, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|_cor4], ['global'])
			    in  let <_cor24> =
				    %% Line 277
				    case Parts0 of
				      %% Line 278
				      <[]> when 'true' ->
					  []
				      %% Line 279
				      <_cor38> when 'true' ->
					  let <_cor20> =
					      call 'lists':'reverse'
						  (Parts0)
					  in  let <_cor21> =
						  call 'erlang':'tl'
						      (_cor20)
					      in  let <_cor22> =
						      apply 'fstrip'/1
							  (_cor21)
						  in  call 'lists':'reverse'
							  (_cor22)
				    end
				in  let <_cor27> =
					%% Line 281
					case <_cor24,XPart0> of
					  %% Line 282
					  <[],#{}#> when 'true' ->
					      %% Line 283
					      #{#<46>(8,1,'integer',['unsigned'|['big']])}#
					  %% Line 284
					  <_fol5,_fol6> when 'true' ->
					      %% Line 285
					      XPart0
					end
				    in  %% Line 287
					apply 'dirjoin'/3
					    (_cor24, _cor27, #{#<47>(8,1,'integer',['unsigned'|['big']])}#)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 289
	  <Name0> when 'true' ->
	      let <Name> =
		  %% Line 290
		  apply 'flatten'/1
		      (Name0)
	      in  let <_cor30> =
		      %% Line 291
		      apply 'separators'/0
			  ()
		  in  %% Line 291
		      apply 'dirname'/4
			  (Name, [], [], _cor30)
	end
'dirname'/4 =
    %% Line 293
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[47|Rest],Dir,File,Seps> when 'true' ->
	      let <_cor4> =
		  %% Line 294
		  call 'erlang':'++'
		      (File, Dir)
	      in  %% Line 294
		  apply 'dirname'/4
		      (Rest, _cor4, [47], Seps)
	  %% Line 295
	  <[DirSep|Rest],Dir,File,Seps = {_cor20,_cor21}>
	      when let <_cor22> =
		    call 'erlang':'=:='
			(_cor20, DirSep)
		in  let <_cor23> =
			call 'erlang':'is_integer'
			    (DirSep)
		    in  call 'erlang':'and'
			    (_cor22, _cor23) ->
	      let <_cor5> =
		  %% Line 296
		  call 'erlang':'++'
		      (File, Dir)
	      in  %% Line 296
		  apply 'dirname'/4
		      (Rest, _cor5, [47], Seps)
	  %% Line 297
	  <[Dl|[DrvSep|Rest]],[],[],Seps = {_cor24,_cor25}>
	      when let <_cor26> =
		    call 'erlang':'=:='
			(_cor25, DrvSep)
		in  let <_cor27> =
			%% Line 298
			try
			    let <_cor6> =
				call 'erlang':'is_integer'
				    (DrvSep)
			    in  let <_cor7> =
				    call 'erlang':'=<'
					(97, Dl)
				in  let <_cor8> =
					call 'erlang':'=<'
					    (Dl, 122)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						%% Line 299
						call 'erlang':'=<'
						    (65, Dl)
					    in  let <_cor11> =
						    %% Line 299
						    call 'erlang':'=<'
							(Dl, 90)
						in  let <_cor12> =
							%% Line 299
							call 'erlang':'and'
							    (_cor10, _cor11)
						    in  let <_cor13> =
							    call 'erlang':'or'
								(_cor9, _cor12)
							in  call 'erlang':'and'
								(_cor6, _cor13)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'and'
			    (_cor26, _cor27) ->
	      %% Line 300
	      apply 'dirname'/4
		  (Rest, [DrvSep|[Dl|[]]], [], Seps)
	  %% Line 301
	  <[Char|Rest],Dir,File,Seps>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 302
	      apply 'dirname'/4
		  (Rest, Dir, [Char|File], Seps)
	  %% Line 303
	  <[],[],File,_X_Seps> when 'true' ->
	      %% Line 304
	      case call 'lists':'reverse'
		       (File) of
		%% Line 305
		<[47|_cor28]> when 'true' ->
		    [47]
		%% Line 306
		<_cor29> when 'true' ->
		    [46]
	      end
	  %% Line 308
	  <[],[47|Rest],File,Seps> when 'true' ->
	      %% Line 309
	      apply 'dirname'/4
		  ([], Rest, File, Seps)
	  %% Line 310
	  <[],[DrvSep|[Dl|[]]],File,{_cor30,_cor31}>
	      when call 'erlang':'=:='
		    (_cor31,
		     DrvSep) ->
	      %% Line 311
	      case call 'lists':'reverse'
		       (File) of
		%% Line 312
		<[47|_cor32]> when 'true' ->
		    [Dl|[DrvSep|[47]]]
		%% Line 313
		<_cor33> when 'true' ->
		    [Dl|[DrvSep|[]]]
	      end
	  %% Line 315
	  <[],Dir,_cor34,_cor35> when 'true' ->
	      %% Line 316
	      call 'lists':'reverse'
		  (Dir)
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'dirname',4}}] )
	    -| ['compiler_generated'] )
	end
'fstrip'/1 =
    %% Line 319
    fun (_cor0) ->
	case _cor0 of
	  <[#{}#|[X|Y]]> when 'true' ->
	      %% Line 320
	      apply 'fstrip'/1
		  ([X|Y])
	  %% Line 321
	  <A> when 'true' ->
	      %% Line 322
	      A
	end
'dirjoin'/3 =
    %% Line 325
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[#{}#|T],Acc,Sep> when 'true' ->
	      let <_cor3> =
		  %% Line 326
		  #{#<Acc>('all',8,'binary',['unsigned'|['big']]),
		    #<47>(8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 326
		  apply 'dirjoin1'/3
		      (T, _cor3, Sep)
	  %% Line 327
	  <A,B,C> when 'true' ->
	      %% Line 328
	      apply 'dirjoin1'/3
		  (A, B, C)
	end
'dirjoin1'/3 =
    %% Line 330
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Acc,_cor7> when 'true' ->
	      %% Line 331
	      Acc
	  %% Line 332
	  <[One|[]],Acc,_cor8> when 'true' ->
	      %% Line 333
	      #{#<Acc>('all',8,'binary',['unsigned'|['big']]),
		#<One>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 334
	  <[H|T],Acc,Sep> when 'true' ->
	      let <_cor3> =
		  %% Line 335
		  #{#<Acc>('all',8,'binary',['unsigned'|['big']]),
		    #<H>('all',8,'binary',['unsigned'|['big']]),
		    #<Sep>('all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 335
		  apply 'dirjoin'/3
		      (T, _cor3, Sep)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dirjoin1',3}}] )
	    -| ['compiler_generated'] )
	end
'extension'/1 =
    %% Line 349
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 350
	      case apply 'separators'/0
		       () of
		<{Dsep,_cor13}> when 'true' ->
		    let <_cor4> =
			%% Line 351
			case Dsep of
			  %% Line 352
			  <Sep>
			      when call 'erlang':'is_integer'
				    (Dsep) ->
			      let <_cor2> =
				  %% Line 353
				  #{#<Sep>(8,1,'integer',['unsigned'|['big']])}#
			      in  %% Line 353
				  [_cor2|[]]
			  %% Line 354
			  <_cor14> when 'true' ->
			      %% Line 355
			      []
			end
		    in  %% Line 357
			case call 'binary':'matches'
				 (Name, [#{#<46>(8,1,'integer',['unsigned'|['big']])}#]) of
			  %% Line 358
			  <[]> when 'true' ->
			      %% Line 359
			      #{}#
			  %% Line 360
			  <List> when 'true' ->
			      %% Line 361
			      case call 'lists':'last'
				       (List) of
				<{Pos,_cor15}> when 'true' ->
				    %% Line 362
				    case ( Name
					   -| ['reuse_for_context'] ) of
				      <#{#<_cor16>(Pos,8,'binary',['unsigned'|['big']]),
					 #<Part>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					  %% Line 363
					  case call 'binary':'match'
						   (Part, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|_cor4]) of
					    %% Line 364
					    <'nomatch'> when 'true' ->
						%% Line 365
						Part
					    %% Line 366
					    <_cor17> when 'true' ->
						%% Line 367
						#{}#
					  end
				      ( <_cor7> when 'true' ->
					    do  primop 'bs_context_to_binary'
						    (_cor7)
						primop 'match_fail'
						    ({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 371
	  <Name0> when 'true' ->
	      let <Name> =
		  %% Line 372
		  apply 'flatten'/1
		      (Name0)
	      in  let <_cor11> =
		      %% Line 373
		      apply 'major_os_type'/0
			  ()
		  in  %% Line 373
		      apply 'extension'/3
			  (Name, [], _cor11)
	end
'extension'/3 =
    %% Line 375
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Result = [46|Rest],_X_Result,OsType> when 'true' ->
	      %% Line 376
	      apply 'extension'/3
		  (Rest, Result, OsType)
	  %% Line 377
	  <[Char|Rest],[],OsType>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 378
	      apply 'extension'/3
		  (Rest, [], OsType)
	  %% Line 379
	  <[47|Rest],_X_Result,OsType> when 'true' ->
	      %% Line 380
	      apply 'extension'/3
		  (Rest, [], OsType)
	  %% Line 381
	  <[92|Rest],_X_Result,'win32'> when 'true' ->
	      %% Line 382
	      apply 'extension'/3
		  (Rest, [], 'win32')
	  %% Line 383
	  <[Char|Rest],Result,OsType>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 384
	      apply 'extension'/3
		  (Rest, Result, OsType)
	  %% Line 385
	  <[],Result,_X_OsType> when 'true' ->
	      %% Line 386
	      Result
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'extension',3}}] )
	    -| ['compiler_generated'] )
	end
'join'/1 =
    %% Line 392
    fun (_cor0) ->
	case _cor0 of
	  <[Name1|[Name2|Rest]]> when 'true' ->
	      let <_cor1> =
		  %% Line 393
		  apply 'join'/2
		      (Name1, Name2)
	      in  %% Line 393
		  apply 'join'/1
		      ([_cor1|Rest])
	  %% Line 394
	  <[Name|[]]>
	      when call 'erlang':'is_list'
		    (Name) ->
	      let <_cor2> =
		  %% Line 395
		  apply 'major_os_type'/0
		      ()
	      in  %% Line 395
		  apply 'join1'/4
		      (Name, [], [], _cor2)
	  %% Line 396
	  <[Name|[]]>
	      when call 'erlang':'is_binary'
		    (Name) ->
	      let <_cor3> =
		  %% Line 397
		  apply 'major_os_type'/0
		      ()
	      in  %% Line 397
		  apply 'join1b'/4
		      (Name, #{}#, [], _cor3)
	  %% Line 398
	  <[Name|[]]>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_cor4> =
		  %% Line 399
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 399
		  apply 'join'/1
		      ([_cor4|[]])
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'join',1}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 406
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name1,Name2>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Name1)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Name2)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <OsType> =
		  %% Line 407
		  apply 'major_os_type'/0
		      ()
	      in  %% Line 408
		  case apply 'pathtype'/1
			   (Name2) of
		    %% Line 409
		    <'relative'> when 'true' ->
			apply 'join1'/4
			    (Name1, Name2, [], OsType)
		    %% Line 410
		    <_X_Other> when 'true' ->
			apply 'join1'/4
			    (Name2, [], [], OsType)
		  end
	  %% Line 412
	  <Name1,Name2>
	      when let <_cor6> =
		    call 'erlang':'is_binary'
			(Name1)
		in  let <_cor7> =
			call 'erlang':'is_list'
			    (Name2)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      let <_cor8> =
		  %% Line 413
		  apply 'filename_string_to_binary'/1
		      (Name2)
	      in  %% Line 413
		  apply 'join'/2
		      (Name1, _cor8)
	  %% Line 414
	  <Name1,Name2>
	      when let <_cor9> =
		    call 'erlang':'is_list'
			(Name1)
		in  let <_cor10> =
			call 'erlang':'is_binary'
			    (Name2)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      let <_cor11> =
		  %% Line 415
		  apply 'filename_string_to_binary'/1
		      (Name1)
	      in  %% Line 415
		  apply 'join'/2
		      (_cor11, Name2)
	  %% Line 416
	  <Name1,Name2>
	      when let <_cor12> =
		    call 'erlang':'is_binary'
			(Name1)
		in  let <_cor13> =
			call 'erlang':'is_binary'
			    (Name2)
		    in  call 'erlang':'and'
			    (_cor12, _cor13) ->
	      let <OsType> =
		  %% Line 417
		  apply 'major_os_type'/0
		      ()
	      in  %% Line 418
		  case apply 'pathtype'/1
			   (Name2) of
		    %% Line 419
		    <'relative'> when 'true' ->
			apply 'join1b'/4
			    (Name1, Name2, [], OsType)
		    %% Line 420
		    <_X_Other> when 'true' ->
			apply 'join1b'/4
			    (Name2, #{}#, [], OsType)
		  end
	  %% Line 423
	  <Name1,Name2>
	      when call 'erlang':'is_atom'
		    (Name1) ->
	      let <_cor16> =
		  %% Line 424
		  call 'erlang':'atom_to_list'
		      (Name1)
	      in  %% Line 424
		  apply 'join'/2
		      (_cor16, Name2)
	  %% Line 425
	  <Name1,Name2>
	      when call 'erlang':'is_atom'
		    (Name2) ->
	      let <_cor17> =
		  %% Line 426
		  call 'erlang':'atom_to_list'
		      (Name2)
	      in  %% Line 426
		  apply 'join'/2
		      (Name1, _cor17)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'join1'/4 =
    %% Line 432
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[UcLetter|[58|Rest]],RelativeName,[],'win32'>
	      when %% Line 433
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (UcLetter)
		    in  let <_cor5> =
			    call 'erlang':'>='
				(UcLetter, 65)
			in  let <_cor6> =
				call 'erlang':'=<'
				    (UcLetter, 90)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 434
		  call 'erlang':'+'
		      (UcLetter, 97)
	      in  let <_cor9> =
		      %% Line 434
		      call 'erlang':'-'
			  (_cor8, 65)
		  in  %% Line 434
		      apply 'join1'/4
			  (Rest, RelativeName, [58|[_cor9|[]]], 'win32')
	  %% Line 435
	  <[92|Rest],RelativeName,Result,'win32'> when 'true' ->
	      %% Line 436
	      apply 'join1'/4
		  ([47|Rest], RelativeName, Result, 'win32')
	  %% Line 437
	  <[47|Rest],RelativeName,[46|[47|Result]],OsType> when 'true' ->
	      %% Line 438
	      apply 'join1'/4
		  (Rest, RelativeName, [47|Result], OsType)
	  %% Line 439
	  <[47|Rest],RelativeName,[47|Result],OsType> when 'true' ->
	      %% Line 440
	      apply 'join1'/4
		  (Rest, RelativeName, [47|Result], OsType)
	  %% Line 441
	  <[],[],Result,OsType> when 'true' ->
	      %% Line 442
	      apply 'maybe_remove_dirsep'/2
		  (Result, OsType)
	  %% Line 443
	  <[],RelativeName,[58|Rest],'win32'> when 'true' ->
	      %% Line 444
	      apply 'join1'/4
		  (RelativeName, [], [58|Rest], 'win32')
	  %% Line 445
	  <[],RelativeName,[47|Result],OsType> when 'true' ->
	      %% Line 446
	      apply 'join1'/4
		  (RelativeName, [], [47|Result], OsType)
	  %% Line 447
	  <[],RelativeName,Result,OsType> when 'true' ->
	      %% Line 448
	      apply 'join1'/4
		  (RelativeName, [], [47|Result], OsType)
	  %% Line 449
	  <[List = [_cor17|_cor18]|Rest],RelativeName,Result,OsType> when 'true' ->
	      let <_cor10> =
		  %% Line 450
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 450
		  apply 'join1'/4
		      (_cor10, RelativeName, Result, OsType)
	  %% Line 451
	  <[[]|Rest],RelativeName,Result,OsType> when 'true' ->
	      %% Line 452
	      apply 'join1'/4
		  (Rest, RelativeName, Result, OsType)
	  %% Line 453
	  <[Char|Rest],RelativeName,Result,OsType>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 454
	      apply 'join1'/4
		  (Rest, RelativeName, [Char|Result], OsType)
	  %% Line 455
	  <[Atom|Rest],RelativeName,Result,OsType>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor11> =
		  %% Line 456
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  let <_cor12> =
		      %% Line 456
		      call 'erlang':'++'
			  (_cor11, Rest)
		  in  %% Line 456
		      apply 'join1'/4
			  (_cor12, RelativeName, Result, OsType)
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'join1',4}}] )
	    -| ['compiler_generated'] )
	end
'join1b'/4 =
    %% Line 458
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<UcLetter>(8,1,'integer',['unsigned'|['big']]),
	     #<58>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,RelativeName,[],'win32'>
	      when %% Line 459
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (UcLetter)
		    in  let <_cor5> =
			    call 'erlang':'>='
				(UcLetter, 65)
			in  let <_cor6> =
				call 'erlang':'=<'
				    (UcLetter, 90)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 460
		  call 'erlang':'+'
		      (UcLetter, 97)
	      in  let <_cor9> =
		      %% Line 460
		      call 'erlang':'-'
			  (_cor8, 65)
		  in  %% Line 460
		      apply 'join1b'/4
			  (Rest, RelativeName, [58|[_cor9|[]]], 'win32')
	  %% Line 461
	  <#{#<92>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,RelativeName,Result,'win32'> when 'true' ->
	      let <_cor10> =
		  %% Line 462
		  #{#<47>(8,1,'integer',['unsigned'|['big']]),
		    #<Rest>('all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 462
		  apply 'join1b'/4
		      (_cor10, RelativeName, Result, 'win32')
	  %% Line 463
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,RelativeName,[46|[47|Result]],OsType> when 'true' ->
	      %% Line 464
	      apply 'join1b'/4
		  (Rest, RelativeName, [47|Result], OsType)
	  %% Line 465
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,RelativeName,[47|Result],OsType> when 'true' ->
	      %% Line 466
	      apply 'join1b'/4
		  (Rest, RelativeName, [47|Result], OsType)
	  %% Line 467
	  <#{}#,#{}#,Result,OsType> when 'true' ->
	      let <_cor11> =
		  %% Line 468
		  apply 'maybe_remove_dirsep'/2
		      (Result, OsType)
	      in  %% Line 468
		  call 'erlang':'list_to_binary'
		      (_cor11)
	  %% Line 469
	  <#{}#,RelativeName,[58|Rest],'win32'> when 'true' ->
	      %% Line 470
	      apply 'join1b'/4
		  (RelativeName, #{}#, [58|Rest], 'win32')
	  %% Line 471
	  <#{}#,RelativeName,[47|Result],OsType> when 'true' ->
	      %% Line 472
	      apply 'join1b'/4
		  (RelativeName, #{}#, [47|Result], OsType)
	  %% Line 473
	  <#{}#,RelativeName,Result,OsType> when 'true' ->
	      %% Line 474
	      apply 'join1b'/4
		  (RelativeName, #{}#, [47|Result], OsType)
	  %% Line 475
	  <#{#<Char>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,RelativeName,Result,OsType>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 476
	      apply 'join1b'/4
		  (Rest, RelativeName, [Char|Result], OsType)
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor15)
		    ( primop 'match_fail'
			  ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		      -| [{'function_name',{'join1b',4}}] )
	    -| ['compiler_generated'] )
	end
'maybe_remove_dirsep'/2 =
    %% Line 478
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[47|[58|[Letter|[]]]],'win32'> when 'true' ->
	      %% Line 479
	      [Letter|[58|[47]]]
	  %% Line 480
	  <[47],_cor4> when 'true' ->
	      %% Line 481
	      [47]
	  %% Line 482
	  <[47|Name],_cor5> when 'true' ->
	      %% Line 483
	      call 'lists':'reverse'
		  (Name)
	  %% Line 484
	  <Name,_cor6> when 'true' ->
	      %% Line 485
	      call 'lists':'reverse'
		  (Name)
	end
'append'/2 =
    %% Line 492
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,Name>
	      when let <_cor2> =
		    call 'erlang':'is_binary'
			(Dir)
		in  let <_cor3> =
			call 'erlang':'is_binary'
			    (Name)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 493
	      #{#<Dir>('all',8,'binary',['unsigned'|['big']]),
		#<47>(8,1,'integer',['unsigned'|['big']]),
		#<Name>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 494
	  <Dir,Name>
	      when call 'erlang':'is_binary'
		    (Dir) ->
	      let <_cor4> =
		  %% Line 495
		  apply 'filename_string_to_binary'/1
		      (Name)
	      in  %% Line 495
		  apply 'append'/2
		      (Dir, _cor4)
	  %% Line 496
	  <Dir,Name>
	      when call 'erlang':'is_binary'
		    (Name) ->
	      let <_cor5> =
		  %% Line 497
		  apply 'filename_string_to_binary'/1
		      (Dir)
	      in  %% Line 497
		  apply 'append'/2
		      (_cor5, Name)
	  %% Line 498
	  <Dir,Name> when 'true' ->
	      %% Line 499
	      call 'erlang':'++'
		  (Dir, [47|Name])
	end
'pathtype'/1 =
    %% Line 515
    fun (_cor0) ->
	case _cor0 of
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 516
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  %% Line 516
		  apply 'pathtype'/1
		      (_cor1)
	  %% Line 517
	  <Name>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(_cor0)
		in  let <_cor3> =
			call 'erlang':'is_binary'
			    (_cor0)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 518
	      case call 'os':'type'
		       () of
		%% Line 519
		<{'win32',_cor6}> when 'true' ->
		    %% Line 520
		    apply 'win32_pathtype'/1
			(Name)
		%% Line 521
		<{_cor7,_cor8}> when 'true' ->
		    %% Line 522
		    apply 'unix_pathtype'/1
			(Name)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'pathtype',1}}] )
	    -| ['compiler_generated'] )
	end
'unix_pathtype'/1 =
    %% Line 525
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor5>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 526
	      'absolute'
	  %% Line 527
	  <[47|_cor6]> when 'true' ->
	      %% Line 528
	      'absolute'
	  %% Line 529
	  <[List|Rest]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor1> =
		  %% Line 530
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 530
		  apply 'unix_pathtype'/1
		      (_cor1)
	  %% Line 531
	  <[Atom|Rest]>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor2> =
		  %% Line 532
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  let <_cor3> =
		      %% Line 532
		      call 'erlang':'++'
			  (_cor2, Rest)
		  in  %% Line 532
		      apply 'unix_pathtype'/1
			  (_cor3)
	  %% Line 533
	  <_cor7> when 'true' ->
	      %% Line 534
	      'relative'
	end
'win32_pathtype'/1 =
    %% Line 536
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <[List|Rest]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor1> =
		  %% Line 537
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 537
		  apply 'win32_pathtype'/1
		      (_cor1)
	  %% Line 538
	  <[Atom|Rest]>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor2> =
		  %% Line 539
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  let <_cor3> =
		      %% Line 539
		      call 'erlang':'++'
			  (_cor2, Rest)
		  in  %% Line 539
		      apply 'win32_pathtype'/1
			  (_cor3)
	  %% Line 540
	  <[Char|[List|Rest]]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor4> =
		  %% Line 541
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 541
		  apply 'win32_pathtype'/1
		      ([Char|_cor4])
	  %% Line 542
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<47>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor7>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'absolute'
	  %% Line 543
	  <#{#<92>(8,1,'integer',['unsigned'|['big']]),
	     #<47>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor8>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'absolute'
	  %% Line 544
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<92>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor9>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'absolute'
	  %% Line 545
	  <#{#<92>(8,1,'integer',['unsigned'|['big']]),
	     #<92>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor10>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'absolute'
	  %% Line 546
	  <#{#<47>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'volumerelative'
	  %% Line 547
	  <#{#<92>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor12>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'volumerelative'
	  %% Line 548
	  <#{#<_X_Letter>(8,1,'integer',['unsigned'|['big']]),
	     #<58>(8,1,'integer',['unsigned'|['big']]),
	     #<47>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor13>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'absolute'
	  %% Line 549
	  <#{#<_X_Letter>(8,1,'integer',['unsigned'|['big']]),
	     #<58>(8,1,'integer',['unsigned'|['big']]),
	     #<92>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor14>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'absolute'
	  %% Line 550
	  <#{#<_X_Letter>(8,1,'integer',['unsigned'|['big']]),
	     #<58>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor15>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      'volumerelative'
	  %% Line 551
	  <[47|[47|_cor16]]> when 'true' ->
	      'absolute'
	  %% Line 552
	  <[92|[47|_cor17]]> when 'true' ->
	      'absolute'
	  %% Line 553
	  <[47|[92|_cor18]]> when 'true' ->
	      'absolute'
	  %% Line 554
	  <[92|[92|_cor19]]> when 'true' ->
	      'absolute'
	  %% Line 555
	  <[47|_cor20]> when 'true' ->
	      'volumerelative'
	  %% Line 556
	  <[92|_cor21]> when 'true' ->
	      'volumerelative'
	  %% Line 557
	  <[C1|[C2|[List|Rest]]]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor5> =
		  %% Line 558
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 558
		  apply 'pathtype'/1
		      ([C1|[C2|_cor5]])
	  %% Line 559
	  <[_X_Letter|[58|[47|_cor22]]]> when 'true' ->
	      'absolute'
	  %% Line 560
	  <[_X_Letter|[58|[92|_cor23]]]> when 'true' ->
	      'absolute'
	  %% Line 561
	  <[_X_Letter|[58|_cor24]]> when 'true' ->
	      'volumerelative'
	  %% Line 562
	  <_cor25> when 'true' ->
	      'relative'
	end
'rootname'/1 =
    %% Line 571
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 572
		  call 'erlang':'binary_to_list'
		      (Name)
	      in  let <_cor2> =
		      %% Line 572
		      apply 'rootname'/1
			  (_cor1)
		  in  %% Line 572
		      call 'erlang':'list_to_binary'
			  (_cor2)
	  %% Line 573
	  <Name0> when 'true' ->
	      let <Name> =
		  %% Line 574
		  apply 'flatten'/1
		      (Name0)
	      in  let <_cor4> =
		      %% Line 575
		      apply 'major_os_type'/0
			  ()
		  in  %% Line 575
		      apply 'rootname'/4
			  (Name, [], [], _cor4)
	end
'rootname'/4 =
    %% Line 577
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[47|Rest],Root,Ext,OsType> when 'true' ->
	      let <_cor4> =
		  %% Line 578
		  call 'erlang':'++'
		      (Ext, Root)
	      in  let <_cor5> =
		      %% Line 578
		      [47|_cor4]
		  in  %% Line 578
		      apply 'rootname'/4
			  (Rest, _cor5, [], OsType)
	  %% Line 579
	  <[92|Rest],Root,Ext,'win32'> when 'true' ->
	      let <_cor6> =
		  %% Line 580
		  call 'erlang':'++'
		      (Ext, Root)
	      in  let <_cor7> =
		      %% Line 580
		      [47|_cor6]
		  in  %% Line 580
		      apply 'rootname'/4
			  (Rest, _cor7, [], 'win32')
	  %% Line 581
	  <[46|Rest],Root,[],OsType> when 'true' ->
	      %% Line 582
	      apply 'rootname'/4
		  (Rest, Root, [46], OsType)
	  %% Line 583
	  <[46|Rest],Root,Ext,OsType> when 'true' ->
	      let <_cor8> =
		  %% Line 584
		  call 'erlang':'++'
		      (Ext, Root)
	      in  %% Line 584
		  apply 'rootname'/4
		      (Rest, _cor8, [46], OsType)
	  %% Line 585
	  <[Char|Rest],Root,[],OsType>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 586
	      apply 'rootname'/4
		  (Rest, [Char|Root], [], OsType)
	  %% Line 587
	  <[Char|Rest],Root,Ext,OsType>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 588
	      apply 'rootname'/4
		  (Rest, Root, [Char|Ext], OsType)
	  %% Line 589
	  <[],Root,_X_Ext,_X_OsType> when 'true' ->
	      %% Line 590
	      call 'lists':'reverse'
		  (Root)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rootname',4}}] )
	    -| ['compiler_generated'] )
	end
'rootname'/2 =
    %% Line 602
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Ext>
	      when let <_cor2> =
		    call 'erlang':'is_binary'
			(Name)
		in  let <_cor3> =
			call 'erlang':'is_binary'
			    (Ext)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 603
		  call 'erlang':'binary_to_list'
		      (Name)
	      in  let <_cor4> =
		      %% Line 603
		      call 'erlang':'binary_to_list'
			  (Ext)
		  in  let <_cor6> =
			  %% Line 603
			  apply 'rootname'/2
			      (_cor5, _cor4)
		      in  %% Line 603
			  call 'erlang':'list_to_binary'
			      (_cor6)
	  %% Line 604
	  <Name,Ext>
	      when call 'erlang':'is_binary'
		    (Name) ->
	      let <_cor7> =
		  %% Line 605
		  apply 'filename_string_to_binary'/1
		      (Ext)
	      in  %% Line 605
		  apply 'rootname'/2
		      (Name, _cor7)
	  %% Line 606
	  <Name,Ext>
	      when call 'erlang':'is_binary'
		    (Ext) ->
	      let <_cor8> =
		  %% Line 607
		  apply 'filename_string_to_binary'/1
		      (Name)
	      in  %% Line 607
		  apply 'rootname'/2
		      (_cor8, Ext)
	  %% Line 608
	  <Name0,Ext0> when 'true' ->
	      let <Name> =
		  %% Line 609
		  apply 'flatten'/1
		      (Name0)
	      in  let <Ext> =
		      %% Line 610
		      apply 'flatten'/1
			  (Ext0)
		  in  %% Line 611
		      apply 'rootname2'/3
			  (Name, Ext, [])
	end
'rootname2'/3 =
    %% Line 613
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ext,_cor6,Result>
	      when call 'erlang':'=:='
		    (_cor6,
		     Ext) ->
	      %% Line 614
	      call 'lists':'reverse'
		  (Result)
	  %% Line 615
	  <[],_X_Ext,Result> when 'true' ->
	      %% Line 616
	      call 'lists':'reverse'
		  (Result)
	  %% Line 617
	  <[Char|Rest],Ext,Result>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 618
	      apply 'rootname2'/3
		  (Rest, Ext, [Char|Result])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'rootname2',3}}] )
	    -| ['compiler_generated'] )
	end
'split'/1 =
    %% Line 630
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 631
	      case call 'os':'type'
		       () of
		%% Line 632
		<{'win32',_cor5}> when 'true' ->
		    apply 'win32_splitb'/1
			(Name)
		%% Line 633
		<_cor6> when 'true' ->
		    apply 'unix_splitb'/1
			(Name)
	      end
	  %% Line 636
	  <Name0> when 'true' ->
	      let <Name> =
		  %% Line 637
		  apply 'flatten'/1
		      (Name0)
	      in  %% Line 638
		  case call 'os':'type'
			   () of
		    %% Line 639
		    <{'win32',_cor7}> when 'true' ->
			apply 'win32_split'/1
			    (Name)
		    %% Line 640
		    <_cor8> when 'true' ->
			apply 'unix_split'/1
			    (Name)
		  end
	end
'unix_splitb'/1 =
    %% Line 644
    fun (_cor0) ->
	let <L> =
	    %% Line 645
	    call 'binary':'split'
		(_cor0, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#], ['global'])
	in  let <_cor3> =
		%% Line 646
		case L of
		  %% Line 647
		  <[#{}#|Rest]> when 'true' ->
		      %% Line 648
		      [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|Rest]
		  %% Line 649
		  <_cor10> when 'true' ->
		      %% Line 650
		      L
		end
	    in  %% Line 652
		( letrec
		      'lc$^0'/1 =
			  fun (_cor7) ->
			      case _cor7 of
				<[X|_cor6]>
				    when call 'erlang':'=/='
					  (X,
					   #{}#) ->
				    let <_cor8> =
					apply 'lc$^0'/1
					    (_cor6)
				    in  ( [X|_cor8]
					  -| ['compiler_generated'] )
				( <[X|_cor6]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor6)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor7> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor7})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor3)
		  -| ['list_comprehension'] )
'fix_driveletter'/1 =
    %% Line 655
    fun (_cor0) ->
	%% Line 656
	case <> of
	  %% Line 657
	  <>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 65)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 90)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 658
		  call 'erlang':'+'
		      (_cor0, 97)
	      in  %% Line 658
		  call 'erlang':'-'
		      (_cor3, 65)
	  %% Line 659
	  <> when 'true' ->
	      _cor0
	end
'win32_splitb'/1 =
    %% Line 662
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<Letter0>(8,1,'integer',['unsigned'|['big']]),
	     #<58>(8,1,'integer',['unsigned'|['big']]),
	     #<Slash>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when try
		    let <_cor4> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'=:='
					  (Slash,
					   92)
				      -| ['compiler_generated'] ) ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( call 'erlang':'=:='
					(Slash, 47)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor13> =
			      ( case _cor4 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor8> =
					    %% Line 663
					    ( case <> of
						( <>
						      when ( call 'erlang':'>='
							      (Letter0,
							       65)
							  -| ['compiler_generated'] ) ->
						      ( call 'erlang':'=<'
							    (Letter0, 90)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 663
					    ( case _cor8 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      ( case <> of
							  ( <>
								when ( call 'erlang':'>='
									(Letter0,
									 97)
								    -| ['compiler_generated'] ) ->
								( call 'erlang':'=<'
								      (Letter0, 122)
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_cor5> when 'true' ->
						      _cor5
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor1> when 'true' ->
					_cor1
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor13
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Letter> =
		  %% Line 664
		  apply 'fix_driveletter'/1
		      (Letter0)
	      in  let <L> =
		      %% Line 665
		      call 'binary':'split'
			  (Rest, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|[#{#<92>(8,1,'integer',['unsigned'|['big']])}#]], ['global'])
		  in  let <_cor16> =
			  %% Line 666
			  #{#<Letter>(8,1,'integer',['unsigned'|['big']]),
			    #<58>(8,1,'integer',['unsigned'|['big']]),
			    #<47>(8,1,'integer',['unsigned'|['big']])}#
		      in  let <_cor21> =
			      %% Line 666
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor19) ->
					    case _cor19 of
					      <[X|_cor18]>
						  when call 'erlang':'=/='
							(X,
							 #{}#) ->
						  let <_cor20> =
						      apply 'lc$^0'/1
							  (_cor18)
						  in  ( [X|_cor20]
							-| ['compiler_generated'] )
					      ( <[X|_cor18]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor18)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor19> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor19})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(L)
				-| ['list_comprehension'] )
			  in  %% Line 666
			      [_cor16|_cor21]
	  %% Line 667
	  <#{#<Letter0>(8,1,'integer',['unsigned'|['big']]),
	     #<58>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when try
		    let <_cor25> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'>='
					  (Letter0,
					   65)
				      -| ['compiler_generated'] ) ->
				  ( call 'erlang':'=<'
					(Letter0, 90)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor29> =
			      ( case _cor25 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					( case <> of
					    ( <>
						  when ( call 'erlang':'>='
							  (Letter0,
							   97)
						      -| ['compiler_generated'] ) ->
						  ( call 'erlang':'=<'
							(Letter0, 122)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor22> when 'true' ->
					_cor22
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor29
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Letter> =
		  %% Line 668
		  apply 'fix_driveletter'/1
		      (Letter0)
	      in  let <L> =
		      %% Line 669
		      call 'binary':'split'
			  (Rest, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|[#{#<92>(8,1,'integer',['unsigned'|['big']])}#]], ['global'])
		  in  let <_cor32> =
			  %% Line 670
			  #{#<Letter>(8,1,'integer',['unsigned'|['big']]),
			    #<58>(8,1,'integer',['unsigned'|['big']])}#
		      in  let <_cor37> =
			      %% Line 670
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor35) ->
					    case _cor35 of
					      <[X|_cor34]>
						  when call 'erlang':'=/='
							(X,
							 #{}#) ->
						  let <_cor36> =
						      apply 'lc$^1'/1
							  (_cor34)
						  in  ( [X|_cor36]
							-| ['compiler_generated'] )
					      ( <[X|_cor34]> when 'true' ->
						    apply 'lc$^1'/1
							(_cor34)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor35> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor35})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(L)
				-| ['list_comprehension'] )
			  in  %% Line 670
			      [_cor32|_cor37]
	  %% Line 671
	  <#{#<Slash>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (Slash,
				     92) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'=:='
				  (Slash, 47)
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <L> =
		  %% Line 672
		  call 'binary':'split'
		      (Rest, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|[#{#<92>(8,1,'integer',['unsigned'|['big']])}#]], ['global'])
	      in  let <_cor46> =
		      %% Line 673
		      ( letrec
			    'lc$^2'/1 =
				fun (_cor44) ->
				    case _cor44 of
				      <[X|_cor43]>
					  when call 'erlang':'=/='
						(X,
						 #{}#) ->
					  let <_cor45> =
					      apply 'lc$^2'/1
						  (_cor43)
					  in  ( [X|_cor45]
						-| ['compiler_generated'] )
				      ( <[X|_cor43]> when 'true' ->
					    apply 'lc$^2'/1
						(_cor43)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor44> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor44})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^2'/1
				(L)
			-| ['list_comprehension'] )
		  in  %% Line 673
		      [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|_cor46]
	  %% Line 674
	  <Name> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Name)
		  let <L> =
		      %% Line 675
		      call 'binary':'split'
			  (Name, [#{#<47>(8,1,'integer',['unsigned'|['big']])}#|[#{#<92>(8,1,'integer',['unsigned'|['big']])}#]], ['global'])
		  in  %% Line 676
		      ( letrec
			    'lc$^3'/1 =
				fun (_cor50) ->
				    case _cor50 of
				      <[X|_cor49]>
					  when call 'erlang':'=/='
						(X,
						 #{}#) ->
					  let <_cor51> =
					      apply 'lc$^3'/1
						  (_cor49)
					  in  ( [X|_cor51]
						-| ['compiler_generated'] )
				      ( <[X|_cor49]> when 'true' ->
					    apply 'lc$^3'/1
						(_cor49)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor50> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor50})
					      -| [{'function_name',{'lc$^3',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^3'/1
				(L)
			-| ['list_comprehension'] )
	end
'unix_split'/1 =
    %% Line 679
    fun (_cor0) ->
	%% Line 680
	apply 'split'/3
	    (_cor0, [], 'unix')
'win32_split'/1 =
    %% Line 682
    fun (_cor0) ->
	case _cor0 of
	  <[92|Rest]> when 'true' ->
	      %% Line 683
	      apply 'win32_split'/1
		  ([47|Rest])
	  %% Line 684
	  <[X|[92|Rest]]>
	      when call 'erlang':'is_integer'
		    (X) ->
	      %% Line 685
	      apply 'win32_split'/1
		  ([X|[47|Rest]])
	  %% Line 686
	  <[X|[Y|[92|Rest]]]>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor2> =
			call 'erlang':'is_integer'
			    (Y)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 687
	      apply 'win32_split'/1
		  ([X|[Y|[47|Rest]]])
	  %% Line 688
	  <[UcLetter|[58|Rest]]>
	      when let <_cor3> =
		    call 'erlang':'>='
			(UcLetter, 65)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (UcLetter, 90)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 689
		  call 'erlang':'+'
		      (UcLetter, 97)
	      in  let <_cor6> =
		      %% Line 689
		      call 'erlang':'-'
			  (_cor5, 65)
		  in  %% Line 689
		      apply 'win32_split'/1
			  ([_cor6|[58|Rest]])
	  %% Line 690
	  <[Letter|[58|[47|Rest]]]> when 'true' ->
	      %% Line 691
	      apply 'split'/4
		  (Rest, [], [[Letter|[58|[47]]]|[]], 'win32')
	  %% Line 692
	  <[Letter|[58|Rest]]> when 'true' ->
	      %% Line 693
	      apply 'split'/4
		  (Rest, [], [[Letter|[58]]|[]], 'win32')
	  %% Line 694
	  <Name> when 'true' ->
	      %% Line 695
	      apply 'split'/3
		  (Name, [], 'win32')
	end
'split'/3 =
    %% Line 697
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[47|Rest],Components,OsType> when 'true' ->
	      %% Line 698
	      apply 'split'/4
		  (Rest, [], [[47]|Components], OsType)
	  %% Line 699
	  <[92|Rest],Components,'win32'> when 'true' ->
	      %% Line 700
	      apply 'split'/4
		  (Rest, [], [[47]|Components], 'win32')
	  %% Line 701
	  <RelativeName,Components,OsType> when 'true' ->
	      %% Line 702
	      apply 'split'/4
		  (RelativeName, [], Components, OsType)
	end
'split'/4 =
    %% Line 704
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[92|Rest],Comp,Components,'win32'> when 'true' ->
	      %% Line 705
	      apply 'split'/4
		  ([47|Rest], Comp, Components, 'win32')
	  %% Line 706
	  <[47|Rest],[],Components,OsType> when 'true' ->
	      %% Line 707
	      apply 'split'/4
		  (Rest, [], Components, OsType)
	  %% Line 708
	  <[47|Rest],Comp,Components,OsType> when 'true' ->
	      let <_cor4> =
		  %% Line 709
		  call 'lists':'reverse'
		      (Comp)
	      in  %% Line 709
		  apply 'split'/4
		      (Rest, [], [_cor4|Components], OsType)
	  %% Line 710
	  <[Char|Rest],Comp,Components,OsType>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 711
	      apply 'split'/4
		  (Rest, [Char|Comp], Components, OsType)
	  %% Line 712
	  <[],[],Components,_X_OsType> when 'true' ->
	      %% Line 713
	      call 'lists':'reverse'
		  (Components)
	  %% Line 714
	  <[],Comp,Components,OsType> when 'true' ->
	      let <_cor5> =
		  %% Line 715
		  call 'lists':'reverse'
		      (Comp)
	      in  %% Line 715
		  apply 'split'/4
		      ([], [], [_cor5|Components], OsType)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split',4}}] )
	    -| ['compiler_generated'] )
	end
'nativename'/1 =
    %% Line 724
    fun (_cor0) ->
	let <Name> =
	    %% Line 725
	    apply 'join'/1
		([_cor0|[]])
	in  %% Line 726
	    case call 'os':'type'
		     () of
	      %% Line 727
	      <{'win32',_cor4}> when 'true' ->
		  apply 'win32_nativename'/1
		      (Name)
	      %% Line 728
	      <_cor5> when 'true' ->
		  Name
	    end
'win32_nativename'/1 =
    %% Line 731
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 732
	      call 'binary':'replace'
		  (Name, #{#<47>(8,1,'integer',['unsigned'|['big']])}#, #{#<92>(8,1,'integer',['unsigned'|['big']])}#, ['global'])
	  %% Line 733
	  <[47|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 734
		  apply 'win32_nativename'/1
		      (Rest)
	      in  %% Line 734
		  [92|_cor1]
	  %% Line 735
	  <[C|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 736
		  apply 'win32_nativename'/1
		      (Rest)
	      in  %% Line 736
		  [C|_cor2]
	  %% Line 737
	  <[]> when 'true' ->
	      %% Line 738
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'win32_nativename',1}}] )
	    -| ['compiler_generated'] )
	end
'separators'/0 =
    %% Line 740
    fun () ->
	%% Line 741
	case call 'os':'type'
		 () of
	  %% Line 742
	  <{'win32',_cor1}> when 'true' ->
	      {92,58}
	  %% Line 743
	  <_cor2> when 'true' ->
	      {'false','false'}
	end
'find_src'/1 =
    %% Line 788
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 791
	    case call 'application':'get_env'
		     ('kernel', 'source_search_rules') of
	      %% Line 792
	      <'undefined'> when 'true' ->
		  [{[],[]}|[{[101|[98|[105|[110]]]],[115|[114|[99]]]}|[{[101|[98|[105|[110]]]],[101|[115|[114|[99]]]]}]]]
	      %% Line 793
	      <{'ok',[]}> when 'true' ->
		  [{[],[]}|[{[101|[98|[105|[110]]]],[115|[114|[99]]]}|[{[101|[98|[105|[110]]]],[101|[115|[114|[99]]]]}]]]
	      %% Line 794
	      <{'ok',R}>
		  when call 'erlang':'is_list'
			(R) ->
		  R
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 796
	    apply 'find_src'/2
		(_cor0, _cor3)
'find_src'/2 =
    %% Line 810
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Rules>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      let <_cor2> =
		  %% Line 811
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 811
		  apply 'find_src'/2
		      (_cor2, Rules)
	  %% Line 812
	  <File0,Rules>
	      when call 'erlang':'is_list'
		    (File0) ->
	      let <_cor3> =
		  %% Line 813
		  apply 'basename'/2
		      (File0, [46|[101|[114|[108]]]])
	      in  let <Mod> =
		      %% Line 813
		      call 'erlang':'list_to_atom'
			  (_cor3)
		  in  let <File> =
			  %% Line 814
			  apply 'rootname'/2
			      (File0, [46|[101|[114|[108]]]])
		      in  let <_cor6> =
			      %% Line 815
			      call 'erlang':'++'
				  (File, [46|[101|[114|[108]]]])
			  in  %% Line 815
			      case apply 'readable_file'/1
				       (_cor6) of
				%% Line 816
				<'true'> when 'true' ->
				    %% Line 817
				    apply 'try_file'/3
					(File, Mod, Rules)
				%% Line 818
				<'false'> when 'true' ->
				    %% Line 819
				    apply 'try_file'/3
					('undefined', Mod, Rules)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'find_src',2}}] )
	    -| ['compiler_generated'] )
	end
'try_file'/3 =
    %% Line 822
    fun (_cor2,_cor1,_cor0) ->
	%% Line 823
	case call 'code':'which'
		 (_cor1) of
	  %% Line 824
	  <Possibly_Rel_Path>
	      when call 'erlang':'is_list'
		    (Possibly_Rel_Path) ->
	      %% Line 825
	      case call 'file':'get_cwd'
		       () of
		<{'ok',Cwd}> when 'true' ->
		    let <Path> =
			%% Line 826
			apply 'join'/2
			    (Cwd, Possibly_Rel_Path)
		    in  %% Line 827
			apply 'try_file'/4
			    (_cor2, Path, _cor1, _cor0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 828
	  <Ecode>
	      when call 'erlang':'is_atom'
		    (Ecode) ->
	      %% Line 829
	      {'error',{Ecode,_cor1}}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'try_file'/4 =
    %% Line 837
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'undefined',ObjFilename,Mod,Rules> when 'true' ->
	      %% Line 838
	      case apply 'get_source_file'/3
		       (ObjFilename, Mod, Rules) of
		%% Line 839
		<{'ok',File}> when 'true' ->
		    apply 'try_file'/4
			(File, ObjFilename, Mod, Rules)
		%% Line 840
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 842
	  <Src,_X_ObjFilename,Mod,_X_Rules> when 'true' ->
	      let <_cor6> =
		  %% Line 843
		  case call Mod:'module_info'
			   ('compile') of
		    %% Line 844
		    <'none'> when 'true' ->
			[]
		    %% Line 845
		    <List0> when 'true' ->
			List0
		  end
	      in  let <Options> =
		      %% Line 847
		      call 'proplists':'get_value'
			  ('options', _cor6, [])
		  in  %% Line 848
		      case call 'file':'get_cwd'
			       () of
			<{'ok',Cwd}> when 'true' ->
			    let <AbsPath> =
				%% Line 849
				apply 'make_abs_path'/2
				    (Cwd, Src)
			    in  let <_cor11> =
				    %% Line 850
				    apply 'dirname'/1
					(AbsPath)
				in  let <_cor12> =
					%% Line 850
					apply 'filter_options'/3
					    (_cor11, Options, [])
				    in  %% Line 850
					{AbsPath,_cor12}
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	end
'filter_options'/3 =
    %% Line 862
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Base,[{'outdir',Path}|Rest],Result> when 'true' ->
	      let <_cor3> =
		  %% Line 863
		  apply 'make_abs_path'/2
		      (Base, Path)
	      in  %% Line 863
		  apply 'filter_options'/3
		      (Base, Rest, [{'outdir',_cor3}|Result])
	  %% Line 864
	  <Base,[{'i',Path}|Rest],Result> when 'true' ->
	      let <_cor4> =
		  %% Line 865
		  apply 'make_abs_path'/2
		      (Base, Path)
	      in  %% Line 865
		  apply 'filter_options'/3
		      (Base, Rest, [{'i',_cor4}|Result])
	  %% Line 866
	  <Base,[Option|Rest],Result>
	      when call 'erlang':'=:='
		    (Option,
		     'export_all') ->
	      %% Line 867
	      apply 'filter_options'/3
		  (Base, Rest, [Option|Result])
	  %% Line 868
	  <Base,[Option|Rest],Result>
	      when call 'erlang':'=:='
		    (Option,
		     'binary') ->
	      %% Line 869
	      apply 'filter_options'/3
		  (Base, Rest, [Option|Result])
	  %% Line 870
	  <Base,[Tuple|Rest],Result>
	      when try
		    let <_cor5> =
			call 'erlang':'element'
			    (1, Tuple)
		    in  call 'erlang':'=:='
			    (_cor5, 'd')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 871
	      apply 'filter_options'/3
		  (Base, Rest, [Tuple|Result])
	  %% Line 872
	  <Base,[Tuple|Rest],Result>
	      when %% Line 873
		try
		    let <_cor6> =
			call 'erlang':'element'
			    (1, Tuple)
		    in  call 'erlang':'=:='
			    (_cor6, 'parse_transform')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 874
	      apply 'filter_options'/3
		  (Base, Rest, [Tuple|Result])
	  %% Line 875
	  <Base,[_cor10|Rest],Result> when 'true' ->
	      %% Line 876
	      apply 'filter_options'/3
		  (Base, Rest, Result)
	  %% Line 877
	  <_X_Base,[],Result> when 'true' ->
	      %% Line 878
	      Result
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'filter_options',3}}] )
	    -| ['compiler_generated'] )
	end
'get_source_file'/3 =
    %% Line 882
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 883
	    apply 'dirname'/1
		(_cor2)
	in  let <_cor3> =
		%% Line 883
		call 'erlang':'atom_to_list'
		    (_cor1)
	    in  %% Line 883
		apply 'source_by_rules'/3
		    (_cor4, _cor3, _cor0)
'source_by_rules'/3 =
    %% Line 885
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dir,Base,[{From,To}|Rest]> when 'true' ->
	      %% Line 886
	      case apply 'try_rule'/4
		       (Dir, Base, From, To) of
		%% Line 887
		<{'ok',File}> when 'true' ->
		    {'ok',File}
		%% Line 888
		<'error'> when 'true' ->
		    apply 'source_by_rules'/3
			(Dir, Base, Rest)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 890
	  <_X_Dir,_X_Base,[]> when 'true' ->
	      %% Line 891
	      {'error','source_file_not_found'}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'source_by_rules',3}}] )
	    -| ['compiler_generated'] )
	end
'try_rule'/4 =
    %% Line 893
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 894
	case call 'lists':'suffix'
		 (_cor1, _cor3) of
	  %% Line 895
	  <'true'> when 'true' ->
	      let <_cor5> =
		  %% Line 896
		  call 'erlang':'length'
		      (_cor3)
	      in  let <_cor4> =
		      %% Line 896
		      call 'erlang':'length'
			  (_cor1)
		  in  let <_cor6> =
			  %% Line 896
			  call 'erlang':'-'
			      (_cor5, _cor4)
		      in  let <_cor7> =
			      %% Line 896
			      call 'lists':'sublist'
				  (_cor3, 1, _cor6)
			  in  let <NewDir> =
				  %% Line 896
				  call 'erlang':'++'
				      (_cor7, _cor0)
			      in  let <Src> =
				      %% Line 897
				      apply 'join'/2
					  (NewDir, _cor2)
				  in  let <_cor10> =
					  %% Line 898
					  call 'erlang':'++'
					      (Src, [46|[101|[114|[108]]]])
				      in  %% Line 898
					  case apply 'readable_file'/1
						   (_cor10) of
					    %% Line 899
					    <'true'> when 'true' ->
						{'ok',Src}
					    %% Line 900
					    <'false'> when 'true' ->
						'error'
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor11})
					      -| ['compiler_generated'] )
					  end
	  %% Line 902
	  <'false'> when 'true' ->
	      %% Line 903
	      'error'
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'readable_file'/1 =
    %% Line 906
    fun (_cor0) ->
	%% Line 907
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 908
	  <{'ok',{'file_info',_cor3,'regular','read',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}}> when 'true' ->
	      %% Line 909
	      'true'
	  %% Line 910
	  <{'ok',{'file_info',_cor14,'regular','read_write',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}}> when 'true' ->
	      %% Line 911
	      'true'
	  %% Line 912
	  <_X_Other> when 'true' ->
	      %% Line 913
	      'false'
	end
'make_abs_path'/2 =
    %% Line 916
    fun (_cor1,_cor0) ->
	%% Line 917
	apply 'join'/2
	    (_cor1, _cor0)
'major_os_type'/0 =
    %% Line 919
    fun () ->
	%% Line 920
	case call 'os':'type'
		 () of
	  <{OsT,_cor1}> when 'true' ->
	      %% Line 921
	      OsT
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'flatten'/1 =
    %% Line 928
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 929
	      Bin
	  %% Line 930
	  <List> when 'true' ->
	      %% Line 931
	      apply 'do_flatten'/2
		  (List, [])
	end
'do_flatten'/2 =
    %% Line 933
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Tail>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_cor2> =
		  %% Line 934
		  apply 'do_flatten'/2
		      (T, Tail)
	      in  %% Line 934
		  apply 'do_flatten'/2
		      (H, _cor2)
	  %% Line 935
	  <[H|T],Tail>
	      when call 'erlang':'is_atom'
		    (H) ->
	      let <_cor4> =
		  %% Line 936
		  call 'erlang':'atom_to_list'
		      (H)
	      in  let <_cor3> =
		      %% Line 936
		      apply 'do_flatten'/2
			  (T, Tail)
		  in  %% Line 936
		      call 'erlang':'++'
			  (_cor4, _cor3)
	  %% Line 937
	  <[H|T],Tail> when 'true' ->
	      let <_cor5> =
		  %% Line 938
		  apply 'do_flatten'/2
		      (T, Tail)
	      in  %% Line 938
		  [H|_cor5]
	  %% Line 939
	  <[],Tail> when 'true' ->
	      %% Line 940
	      Tail
	  %% Line 941
	  <Atom,Tail>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor7> =
		  %% Line 942
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  let <_cor6> =
		      %% Line 942
		      apply 'flatten'/1
			  (Tail)
		  in  %% Line 942
		      call 'erlang':'++'
			  (_cor7, _cor6)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'do_flatten',2}}] )
	    -| ['compiler_generated'] )
	end
'filename_string_to_binary'/1 =
    %% Line 944
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 945
	    apply 'flatten'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 945
		call 'file':'native_name_encoding'
		    ()
	    in  %% Line 945
		case call 'unicode':'characters_to_binary'
			 (_cor2, 'unicode', _cor1) of
		  %% Line 946
		  <{'error',_cor5,_cor6}> when 'true' ->
		      %% Line 947
		      call 'erlang':'error'
			  ('badarg')
		  %% Line 948
		  <Bin>
		      when call 'erlang':'is_binary'
			    (Bin) ->
		      %% Line 949
		      Bin
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('filename')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('filename', _cor0)
end