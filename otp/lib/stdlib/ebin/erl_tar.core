module 'erl_tar' ['add'/3,
		  'add'/4,
		  'close'/1,
		  'create'/2,
		  'create'/3,
		  'extract'/1,
		  'extract'/2,
		  'format_error'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'open'/2,
		  't'/1,
		  'table'/1,
		  'table'/2,
		  'tt'/1]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','add_opts'},[{'record_field',32,{'atom',32,'read_info'}}|[{'typed_record_field',{'record_field',33,{'atom',33,'verbose'},{'atom',33,'false'}},{'type',33,'boolean',[]}}]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{{'record','tar_header'},[{'record_field',261,{'atom',261,'name'}}|[{'record_field',262,{'atom',262,'mode'}}|[{'record_field',263,{'atom',263,'uid'}}|[{'record_field',264,{'atom',264,'gid'}}|[{'record_field',265,{'atom',265,'size'}}|[{'record_field',266,{'atom',266,'mtime'}}|[{'record_field',268,{'atom',268,'chksum'}}|[{'record_field',269,{'atom',269,'typeflag'},{'nil',269}}|[{'record_field',270,{'atom',270,'linkname'},{'nil',270}}|[{'record_field',271,{'atom',271,'filler'},{'nil',271}}|[{'record_field',272,{'atom',272,'prefix'}}]]]]]]]]]]],[]}],
		%% Line 434
		'type' =
		    %% Line 434
		    [{{'record','read_opts'},[{'typed_record_field',{'record_field',435,{'atom',435,'cwd'}},{'type',435,'union',[{'atom',435,'undefined'}|[{'type',435,'string',[]}]]}}|[{'typed_record_field',{'record_field',436,{'atom',436,'keep_old_files'},{'atom',436,'false'}},{'type',436,'boolean',[]}}|[{'record_field',437,{'atom',437,'files'},{'atom',437,'all'}}|[{'typed_record_field',{'record_field',439,{'atom',439,'output'},{'atom',439,'file'}},{'type',439,'union',[{'atom',439,'file'}|[{'atom',439,'memory'}]]}}|[{'record_field',440,{'atom',440,'open_mode'},{'nil',440}}|[{'typed_record_field',{'record_field',441,{'atom',441,'verbose'},{'atom',441,'false'}},{'type',441,'boolean',[]}}]]]]]],[]}]]
'open'/2 =
    %% Line 37
    fun (_cor1,_cor0) ->
	%% Line 38
	case apply 'open_mode'/1
		 (_cor0) of
	  %% Line 39
	  <{'ok',Access,Raw,Opts}> when 'true' ->
	      %% Line 40
	      apply 'open1'/4
		  (_cor1, Access, Raw, Opts)
	  %% Line 41
	  <{'error',Reason}> when 'true' ->
	      %% Line 42
	      {'error',{_cor1,Reason}}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'open1'/4 =
    %% Line 45
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'binary',Bin},'read',_X_Raw,Opts> when 'true' ->
	      %% Line 46
	      case call 'file':'open'
		       (Bin, ['ram'|['binary'|['read']]]) of
		%% Line 47
		<{'ok',File}> when 'true' ->
		    let <_cor5> =
			%% Line 48
			( case <> of
			    <>
				when call 'erlang':'=:='
				      (Opts,
				       ['compressed']) ->
				let <_cor4> =
				    ( call 'ram_file':'uncompress'
					  (File)
				      -| ['result_not_wanted'] )
				in  ( [_cor4|[]]
				      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  []
			      -| ['compiler_generated'] )
			  end
			  -| ['list_comprehension'] )
		    in  %% Line 49
			{'ok',{'read',File}}
		%% Line 50
		<Error> when 'true' ->
		    %% Line 51
		    Error
	      end
	  %% Line 53
	  <{'file',Fd},'read',_X_Raw,_X_Opts> when 'true' ->
	      %% Line 54
	      {'ok',{'read',Fd}}
	  %% Line 55
	  <Name,Access,Raw,Opts> when 'true' ->
	      let <_cor8> =
		  %% Line 56
		  call 'erlang':'++'
		      (Raw, ['binary'|[Access|Opts]])
	      in  %% Line 56
		  case call 'file':'open'
			   (Name, _cor8) of
		    %% Line 57
		    <{'ok',File}> when 'true' ->
			%% Line 58
			{'ok',{Access,File}}
		    %% Line 59
		    <{'error',Reason}> when 'true' ->
			%% Line 60
			{'error',{Name,Reason}}
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	end
'close'/1 =
    %% Line 65
    fun (_cor0) ->
	case _cor0 of
	  <{'read',File}> when 'true' ->
	      let <_cor5> =
		  %% Line 66
		  call 'file':'close'
		      (File)
	      in  %% Line 66
		  case _cor5 of
		    <'ok'> when 'true' ->
			( _cor5
			  -| ['compiler_generated'] )
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  %% Line 67
	  <{'write',File}> when 'true' ->
	      let <PadResult> =
		  %% Line 68
		  apply 'pad_file'/1
		      (File)
	      in  %% Line 69
		  case call 'file':'close'
			   (File) of
		    <'ok'> when 'true' ->
			%% Line 70
			PadResult
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 71
	  <_cor6> when 'true' ->
	      %% Line 72
	      {'error','einval'}
	end
'add'/3 =
    %% Line 76
    fun (_cor2,_cor1,_cor0) ->
	%% Line 77
	apply 'add'/4
	    (_cor2, _cor1, _cor1, _cor0)
'add'/4 =
    %% Line 79
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'write',File},Name,NameInArchive,Options> when 'true' ->
	      let <_cor6> =
		  %% Line 80
		  ( fun (_cor4) ->
			call 'file':'read_link_info'
			    (_cor4)
		    -| [{'id',{0,0,'-add/4-fun-0-'}}] )
	      in  let <Opts> = {%% Line 80
		       'add_opts',_cor6,'false'}
		  in  let <_cor8> =
			  %% Line 81
			  apply 'add_opts'/2
			      (Options, Opts)
		      in  %% Line 81
			  apply 'add1'/4
			      (File, Name, NameInArchive, _cor8)
	  %% Line 82
	  <{'read',_X_File},_cor13,_cor14,_cor15> when 'true' ->
	      %% Line 83
	      {'error','eacces'}
	  %% Line 84
	  <_cor16,_cor17,_cor18,_cor19> when 'true' ->
	      %% Line 85
	      {'error','einval'}
	end
'add_opts'/2 =
    %% Line 87
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['dereference'|T],Opts> when 'true' ->
	      let <_rec0> =
		  %% Line 88
		  ( fun (_cor2) ->
			call 'file':'read_file_info'
			    (_cor2)
		    -| [{'id',{0,0,'-add_opts/2-fun-0-'}}] )
	      in  %% Line 88
		  case Opts of
		    <{'add_opts',_cor13,_cor14}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(2, Opts, _rec0)
			in  apply 'add_opts'/2
				(T, _cor7)
		    ( <_cor15> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','add_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 89
	  <['verbose'|T],Opts> when 'true' ->
	      %% Line 90
	      case Opts of
		<{'add_opts',_cor16,_cor17}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (3, Opts, 'true')
		    in  apply 'add_opts'/2
			    (T, _cor10)
		( <_cor18> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','add_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 91
	  <[_cor19|T],Opts> when 'true' ->
	      %% Line 92
	      apply 'add_opts'/2
		  (T, Opts)
	  %% Line 93
	  <[],Opts> when 'true' ->
	      %% Line 94
	      Opts
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'add_opts',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	%% Line 99
	apply 'create'/3
	    (_cor1, _cor0, [])
'create'/3 =
    %% Line 104
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 105
	    ( fun (_cor5) ->
		  let <_cor4> =
		      call 'erlang':'=:='
			  (_cor5, 'compressed')
		  in  let <_cor3> =
			  call 'erlang':'=:='
			      (_cor5, 'cooked')
		      in  call 'erlang':'or'
			      (_cor4, _cor3)
	      -| [{'id',{0,0,'-create/3-fun-0-'}}] )
	in  let <Mode> =
		%% Line 105
		call 'lists':'filter'
		    (_cor7, _cor0)
	    in  %% Line 107
		case apply 'open'/2
			 (_cor2, ['write'|Mode]) of
		  %% Line 108
		  <{'ok',TarFile}> when 'true' ->
		      let <Add> =
			  %% Line 109
			  ( fun (_cor9) ->
				case _cor9 of
				  <{NmInA,NmOrBin}> when 'true' ->
				      %% Line 110
				      apply 'add'/4
					  (TarFile, NmOrBin, NmInA, _cor0)
				  %% Line 111
				  <Nm> when 'true' ->
				      %% Line 112
				      apply 'add'/4
					  (TarFile, Nm, Nm, _cor0)
				end
			    -| [{'id',{0,0,'-create/3-fun-1-'}}] )
		      in  let <Result> =
			      %% Line 114
			      apply 'foreach_while_ok'/2
				  (Add, _cor1)
			  in  let <_cor13> =
				  %% Line 115
				  apply 'close'/1
				      (TarFile)
			      in  %% Line 115
				  case <Result,_cor13> of
				    %% Line 116
				    <'ok',Res> when 'true' ->
					Res
				    %% Line 117
				    <Res,_cor19> when 'true' ->
					Res
				  end
		  %% Line 119
		  <Reason> when 'true' ->
		      %% Line 120
		      Reason
		end
'extract'/1 =
    %% Line 125
    fun (_cor0) ->
	%% Line 126
	apply 'extract'/2
	    (_cor0, [])
'extract'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 133
	    apply 'extract_opts'/1
		(_cor0)
	in  %% Line 133
	    apply 'foldl_read'/4
		(_cor1, ( 'extract1'/4
			  -| [{'id',{0,0,'-extract/2-fun-0-'}}] ), 'ok', _cor2)
'table'/1 =
    %% Line 138
    fun (_cor0) ->
	%% Line 139
	apply 'table'/2
	    (_cor0, [])
'table'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 145
	    apply 'table_opts'/1
		(_cor0)
	in  %% Line 145
	    apply 'foldl_read'/4
		(_cor1, ( 'table1'/4
			  -| [{'id',{0,0,'-table/2-fun-0-'}}] ), [], _cor2)
't'/1 =
    %% Line 151
    fun (_cor0) ->
	%% Line 152
	case apply 'table'/1
		 (_cor0) of
	  %% Line 153
	  <{'ok',List}> when 'true' ->
	      let <_cor4> =
		  %% Line 154
		  ( fun (_cor2) ->
			let <_cor7> =
			    call 'io':'format'
				([126|[116|[115|[10]]]], [_cor2|[]])
			in  case _cor7 of
			      <'ok'> when 'true' ->
				  ( _cor7
				    -| ['compiler_generated'] )
			      ( <_cor1> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor1})
				-| ['compiler_generated'] )
			    end
		    -| [{'id',{0,0,'-t/1-fun-0-'}}] )
	      in  %% Line 154
		  call 'lists':'foreach'
		      (_cor4, List)
	  %% Line 155
	  <Error> when 'true' ->
	      %% Line 156
	      Error
	end
'tt'/1 =
    %% Line 159
    fun (_cor0) ->
	%% Line 160
	case apply 'table'/2
		 (_cor0, ['verbose']) of
	  %% Line 161
	  <{'ok',List}> when 'true' ->
	      %% Line 162
	      call 'lists':'foreach'
		  (( 'print_header'/1
		     -| [{'id',{0,0,'-tt/1-fun-0-'}}] ), List)
	  %% Line 163
	  <Error> when 'true' ->
	      %% Line 164
	      Error
	end
'print_header'/1 =
    %% Line 167
    fun (_cor0) ->
	case _cor0 of
	  <{Name,Type,Size,Mtime,Mode,Uid,Gid}> when 'true' ->
	      let <_cor1> =
		  %% Line 169
		  apply 'type_to_string'/1
		      (Type)
	      in  let <_cor2> =
		      %% Line 169
		      apply 'mode_to_string'/1
			  (Mode)
		  in  let <_cor3> =
			  %% Line 170
			  apply 'time_to_string'/1
			      (Mtime)
		      in  %% Line 168
			  call 'io':'format'
			      ([126|[115|[126|[115|[32|[126|[52|[119|[47|[126|[45|[52|[119|[32|[126|[55|[119|[32|[126|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]], %% Line 169
																				      [_cor1|[_cor2|%% Line 170
																						    [Uid|[Gid|[Size|[_cor3|[Name|[]]]]]]]])
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'print_header',1}}] )
	    -| ['compiler_generated'] )
	end
'type_to_string'/1 =
    %% Line 172
    fun (_cor0) ->
	case _cor0 of
	  <'regular'> when 'true' ->
	      [45]
	  %% Line 173
	  <'directory'> when 'true' ->
	      [100]
	  %% Line 174
	  <'link'> when 'true' ->
	      [108]
	  %% Line 175
	  <'symlink'> when 'true' ->
	      [115]
	  %% Line 176
	  <'char'> when 'true' ->
	      [99]
	  %% Line 177
	  <'block'> when 'true' ->
	      [98]
	  %% Line 178
	  <'fifo'> when 'true' ->
	      [102]
	  %% Line 179
	  <_cor2> when 'true' ->
	      [63]
	end
'mode_to_string'/1 =
    %% Line 181
    fun (_cor0) ->
	%% Line 182
	apply 'mode_to_string'/3
	    (_cor0, [120|[119|[114|[120|[119|[114|[120|[119|[114]]]]]]]]], [])
'mode_to_string'/3 =
    %% Line 184
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mode,[C|T],Acc>
	      when try
		    let <_cor3> =
			call 'erlang':'band'
			    (Mode, 1)
		    in  call 'erlang':'=:='
			    (_cor3, 1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  %% Line 185
		  call 'erlang':'bsr'
		      (Mode, 1)
	      in  %% Line 185
		  apply 'mode_to_string'/3
		      (_cor4, T, [C|Acc])
	  %% Line 186
	  <Mode,[_cor9|T],Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 187
		  call 'erlang':'bsr'
		      (Mode, 1)
	      in  %% Line 187
		  apply 'mode_to_string'/3
		      (_cor5, T, [45|Acc])
	  %% Line 188
	  <_cor10,[],Acc> when 'true' ->
	      %% Line 189
	      Acc
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'mode_to_string',3}}] )
	    -| ['compiler_generated'] )
	end
'time_to_string'/1 =
    %% Line 191
    fun (_cor0) ->
	case _cor0 of
	  <{{Y,Mon,Day},{H,Min,_cor5}}> when 'true' ->
	      let <_cor1> =
		  %% Line 192
		  apply 'month'/1
		      (Mon)
	      in  let <_cor2> =
		      %% Line 192
		      apply 'two_d'/1
			  (H)
		  in  let <_cor3> =
			  %% Line 192
			  apply 'two_d'/1
			      (Min)
		      in  %% Line 192
			  call 'io_lib':'format'
			      ([126|[115|[32|[126|[50|[119|[32|[126|[115|[58|[126|[115|[32|[126|[119]]]]]]]]]]]]]]], [_cor1|[Day|[_cor2|[_cor3|[Y|[]]]]]])
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'time_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'two_d'/1 =
    %% Line 194
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 195
	    call 'erlang':'+'
		(_cor0, 100)
	in  let <_cor2> =
		%% Line 195
		call 'erlang':'integer_to_list'
		    (_cor1)
	    in  %% Line 195
		call 'erlang':'tl'
		    (_cor2)
'month'/1 =
    %% Line 197
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      [74|[97|[110]]]
	  %% Line 198
	  <2> when 'true' ->
	      [70|[101|[98]]]
	  %% Line 199
	  <3> when 'true' ->
	      [77|[97|[114]]]
	  %% Line 200
	  <4> when 'true' ->
	      [65|[112|[114]]]
	  %% Line 201
	  <5> when 'true' ->
	      [77|[97|[121]]]
	  %% Line 202
	  <6> when 'true' ->
	      [74|[117|[110]]]
	  %% Line 203
	  <7> when 'true' ->
	      [74|[117|[108]]]
	  %% Line 204
	  <8> when 'true' ->
	      [65|[117|[103]]]
	  %% Line 205
	  <9> when 'true' ->
	      [83|[101|[112]]]
	  %% Line 206
	  <10> when 'true' ->
	      [79|[99|[116]]]
	  %% Line 207
	  <11> when 'true' ->
	      [78|[111|[118]]]
	  %% Line 208
	  <12> when 'true' ->
	      [68|[101|[99]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'month',1}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 212
    fun (_cor0) ->
	case _cor0 of
	  <'bad_header'> when 'true' ->
	      [66|[97|[100|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[104|[101|[97|[100|[101|[114]]]]]]]]]]]]]]]]]]]]
	  %% Line 213
	  <'eof'> when 'true' ->
	      [85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[101|[110|[100|[32|[111|[102|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 214
	  <'symbolic_link_too_long'> when 'true' ->
	      [83|[121|[109|[98|[111|[108|[105|[99|[32|[108|[105|[110|[107|[32|[116|[111|[111|[32|[108|[111|[110|[103]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 215
	  <{Name,Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 216
		  apply 'format_error'/1
		      (Reason)
	      in  let <_cor2> =
		      %% Line 216
		      call 'io_lib':'format'
			  ([126|[116|[115|[58|[32|[126|[116|[115]]]]]]]], [Name|[_cor1|[]]])
		  in  %% Line 216
		      call 'lists':'flatten'
			  (_cor2)
	  %% Line 217
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 218
	      call 'file':'format_error'
		  (Atom)
	  %% Line 219
	  <Term> when 'true' ->
	      let <_cor3> =
		  %% Line 220
		  call 'io_lib':'format'
		      ([126|[116|[112]]], [Term|[]])
	      in  %% Line 220
		  call 'lists':'flatten'
		      (_cor3)
	end
'add1'/4 =
    %% Line 285
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <TarFile,Bin,NameInArchive,Opts>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <_cor4> =
		  %% Line 286
		  call 'erlang':'now'
		      ()
	      in  let <Now> =
		      %% Line 286
		      call 'calendar':'now_to_local_time'
			  (_cor4)
		  in  let <_cor6> =
			  %% Line 287
			  call 'erlang':'byte_size'
			      (Bin)
		      in  let <Info> =
			      %% Line 287
			      {'file_info',_cor6,%% Line 288
						 'regular',%% Line 289
							   'read_write',%% Line 290
									Now,%% Line 291
									    Now,%% Line 292
										Now,%% Line 293
										    33188,%% Line 294
											  1,%% Line 295
											    0,%% Line 296
											      0,%% Line 297
												0,%% Line 298
												  0,%% Line 299
												    0}
			  in  let <Header> =
				  %% Line 300
				  apply 'create_header'/2
				      (NameInArchive, Info)
			      in  %% Line 301
				  apply 'add1'/5
				      (TarFile, NameInArchive, Header, Bin, Opts)
	  %% Line 302
	  <TarFile,Name,NameInArchive,Opts> when 'true' ->
	      %% Line 303
	      case apply 'read_file_and_info'/2
		       (Name, Opts) of
		%% Line 304
		<{'ok',Bin,Info = {'file_info',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}}>
		    when call 'erlang':'=:='
			  (_cor41,
			   'regular') ->
		    let <Header> =
			%% Line 305
			apply 'create_header'/2
			    (NameInArchive, Info)
		    in  %% Line 306
			apply 'add1'/5
			    (TarFile, Name, Header, Bin, Opts)
		%% Line 307
		<{'ok',PointsTo,Info = {'file_info',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}}>
		    when call 'erlang':'=:='
			  (_cor54,
			   'symlink') ->
		    %% Line 308
		    case <> of
		      %% Line 309
		      <>
			  when try
				let <_cor22> =
				    call 'erlang':'length'
					(PointsTo)
				in  call 'erlang':'>'
					(_cor22, 100)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 310
			  {'error',{PointsTo,'symbolic_link_too_long'}}
		      %% Line 311
		      <> when 'true' ->
			  let <_cor25> =
			      %% Line 312
			      call 'erlang':'setelement'
				  (2, Info, 0)
			  in  let <Header> =
				  %% Line 313
				  apply 'create_header'/3
				      (NameInArchive, _cor25, PointsTo)
			      in  %% Line 314
				  apply 'add1'/5
				      (TarFile, Name, Header, #{}#, Opts)
		    end
		%% Line 316
		<{'ok',_cor80,Info = {'file_info',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93}}>
		    when call 'erlang':'=:='
			  (_cor82,
			   'directory') ->
		    %% Line 317
		    apply 'add_directory'/5
			(TarFile, Name, NameInArchive, Info, Opts)
		%% Line 318
		<{'ok',_cor94,{'file_info',_cor95,Type,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106}}> when 'true' ->
		    %% Line 319
		    {'error',{'bad_file_type',Name,Type}}
		%% Line 320
		<{'error',Reason}> when 'true' ->
		    %% Line 321
		    {'error',{Name,Reason}}
		( <_cor35> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor35})
		  -| ['compiler_generated'] )
	      end
	end
'add1'/5 =
    %% Line 324
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 325
	    apply 'add_verbose'/3
		(_cor0, [97|[32|[126|[116|[115|[126|[110]]]]]]], [_cor3|[]])
	    let <_cor5> =
		%% Line 326
		call 'erlang':'byte_size'
		    (_cor1)
	    in  let <_cor6> =
		    %% Line 326
		    apply 'padding'/2
			(_cor5, 512)
		in  %% Line 326
		    call 'file':'write'
			(_cor4, [_cor2|[_cor1|[_cor6|[]]]])
'add_directory'/5 =
    %% Line 328
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 329
	case call 'file':'list_dir'
		 (_cor3) of
	  %% Line 330
	  <{'ok',[]}> when 'true' ->
	      do  %% Line 331
		  apply 'add_verbose'/3
		      (_cor0, [97|[32|[126|[116|[115|[126|[110]]]]]]], [_cor3|[]])
		  let <Header> =
		      %% Line 332
		      apply 'create_header'/2
			  (_cor2, _cor1)
		  in  %% Line 333
		      call 'file':'write'
			  (_cor4, Header)
	  %% Line 334
	  <{'ok',Files}> when 'true' ->
	      let <Add> =
		  %% Line 335
		  ( fun (_cor8) ->
			let <_cor7> =
			    %% Line 337
			    call 'filename':'join'
				(_cor3, _cor8)
			in  let <_cor6> =
				%% Line 338
				call 'filename':'join'
				    (_cor2, _cor8)
			    in  %% Line 336
				apply 'add1'/4
				    (_cor4, _cor7, _cor6, _cor0)
		    -| [{'id',{0,0,'-add_directory/5-fun-0-'}}] )
	      in  %% Line 340
		  apply 'foreach_while_ok'/2
		      (Add, Files)
	  %% Line 341
	  <{'error',Reason}> when 'true' ->
	      %% Line 342
	      {'error',{_cor3,Reason}}
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'create_header'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	%% Line 348
	apply 'create_header'/3
	    (_cor1, _cor0, [])
'create_header'/3 =
    %% Line 349
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,{'file_info',%% Line 350
			     Size,%% Line 350
				  Type,_cor27,_cor28,%% Line 350
						     Mtime0,_cor29,Mode,_cor30,_cor31,_cor32,_cor33,Uid,Gid},%% Line 350
													     Linkname> when 'true' ->
	      let <_cor3> =
		  %% Line 351
		  call 'erlang':'localtime_to_universaltime'
		      (Mtime0)
	      in  let <Mtime> =
		      %% Line 351
		      apply 'posix_time'/1
			  (_cor3)
		  in  %% Line 352
		      case apply 'split_filename'/1
			       (Name) of
			<{Prefix,Suffix}> when 'true' ->
			    let <_cor6> =
				%% Line 353
				apply 'to_string'/2
				    (Suffix, 100)
			    in  let <_cor7> =
				    %% Line 354
				    apply 'to_octal'/2
					(Mode, 8)
				in  let <_cor8> =
					%% Line 355
					apply 'to_octal'/2
					    (Uid, 8)
				    in  let <_cor9> =
					    %% Line 356
					    apply 'to_octal'/2
						(Gid, 8)
					in  let <_cor10> =
						%% Line 357
						apply 'to_octal'/2
						    (Size, 12)
					    in  let <_cor11> =
						    %% Line 358
						    apply 'to_octal'/2
							(Mtime, 12)
						in  let <_cor12> =
							%% Line 360
							apply 'file_type'/1
							    (Type)
						    in  let <_cor13> =
							    %% Line 361
							    apply 'to_string'/2
								(Linkname, 100)
							in  let <_cor16> =
								%% Line 364
								apply 'zeroes'/1
								    (80)
							    in  let <_cor17> =
								    %% Line 365
								    apply 'to_string'/2
									(Prefix, 167)
								in  let <H0> =
									%% Line 353
									[_cor6|%% Line 354
									       [_cor7|%% Line 355
										      [_cor8|%% Line 356
											     [_cor9|%% Line 357
												    [_cor10|%% Line 358
													    [_cor11|%% Line 359
														    [#{#<32>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']])}#|%% Line 360
																				   [_cor12|%% Line 361
																					   [_cor13|%% Line 362
																						   [[117|[115|[116|[97|[114]]]]]|[0|%% Line 363
																										    [[48|[48]]|%% Line 364
																											       [_cor16|%% Line 365
																												       [_cor17|[]]]]]]]]]]]]]]]
								    in  let <H> =
									    %% Line 366
									    call 'erlang':'list_to_binary'
										(H0)
									in  %% Line 367
									    case call 'erlang':'byte_size'
										     (H) of
									      <512> when 'true' ->
										  let <_cor21> =
										      %% Line 368
										      apply 'checksum'/1
											  (H)
										  in  let <ChksumString> =
											  %% Line 368
											  apply 'to_octal'/3
											      (_cor21, 6, [0|[32]])
										      in  %% Line 369
											  case ( H
												 -| ['reuse_for_context'] ) of
											    <#{#<Before>(148,8,'binary',['unsigned'|['big']]),
											       #<_cor34>(8,8,'binary',['unsigned'|['big']]),
											       #<After>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
												%% Line 370
												[Before|[ChksumString|[After|[]]]]
											    ( <_cor23> when 'true' ->
												  do  primop 'bs_context_to_binary'
													  (_cor23)
												      primop 'match_fail'
													  ({'badmatch',_cor23})
											      -| ['compiler_generated'] )
											  end
									      ( <_cor20> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_cor20})
										-| ['compiler_generated'] )
									    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24})
		  -| [{'function_name',{'create_header',3}}] )
	    -| ['compiler_generated'] )
	end
'file_type'/1 =
    %% Line 372
    fun (_cor0) ->
	case _cor0 of
	  <'regular'> when 'true' ->
	      48
	  %% Line 373
	  <'symlink'> when 'true' ->
	      50
	  %% Line 374
	  <'directory'> when 'true' ->
	      53
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'file_type',1}}] )
	    -| ['compiler_generated'] )
	end
'to_octal'/2 =
    %% Line 376
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Int,Count>
	      when call 'erlang':'>'
		    (Count,
		     1) ->
	      let <_cor2> =
		  %% Line 377
		  call 'erlang':'-'
		      (Count, 1)
	      in  %% Line 377
		  apply 'to_octal'/3
		      (Int, _cor2, [0])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'to_octal',2}}] )
	    -| ['compiler_generated'] )
	end
'to_octal'/3 =
    %% Line 379
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor10,0,Result> when 'true' ->
	      Result
	  %% Line 380
	  <Int,Count,Result> when 'true' ->
	      let <_cor6> =
		  %% Line 381
		  call 'erlang':'div'
		      (Int, 8)
	      in  let <_cor5> =
		      %% Line 381
		      call 'erlang':'-'
			  (Count, 1)
		  in  let <_cor3> =
			  %% Line 381
			  call 'erlang':'rem'
			      (Int, 8)
		      in  let <_cor4> =
			      %% Line 381
			      call 'erlang':'+'
				  (_cor3, 48)
			  in  %% Line 381
			      apply 'to_octal'/3
				  (_cor6, _cor5, [_cor4|Result])
	end
'to_string'/2 =
    %% Line 383
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 384
	    case call 'file':'native_name_encoding'
		     () of
	      %% Line 385
	      <'utf8'> when 'true' ->
		  %% Line 386
		  call 'unicode':'characters_to_binary'
		      (_cor1)
	      %% Line 387
	      <'latin1'> when 'true' ->
		  %% Line 388
		  call 'erlang':'list_to_binary'
		      (_cor1)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 390
	    case call 'erlang':'byte_size'
		     (_cor3) of
	      %% Line 391
	      <Size>
		  when call 'erlang':'<'
			(Size,
			 _cor0) ->
		  let <_cor5> =
		      %% Line 392
		      call 'erlang':'-'
			  (_cor0, Size)
		  in  let <_cor6> =
			  %% Line 392
			  apply 'zeroes'/1
			      (_cor5)
		      in  %% Line 392
			  [_cor3|_cor6]
	      %% Line 393
	      <_cor10> when 'true' ->
		  _cor3
	    end
'pad_file'/1 =
    %% Line 398
    fun (_cor0) ->
	%% Line 399
	case call 'file':'position'
		 (_cor0, {'cur',0}) of
	  <{'ok',Position}> when 'true' ->
	      let <_cor3> =
		  %% Line 401
		  call 'erlang':'rem'
		      (Position, 10240)
	      in  let <_cor8> =
		      %% Line 401
		      case call 'erlang':'-'
			       (10240, _cor3) of
			%% Line 402
			<Fill0>
			    when call 'erlang':'<'
				  (Fill0,
				   1024) ->
			    %% Line 405
			    call 'erlang':'+'
				(Fill0, 10240)
			%% Line 406
			<Fill0> when 'true' ->
			    %% Line 408
			    Fill0
		      end
		  in  let <_cor10> =
			  %% Line 410
			  apply 'zeroes'/1
			      (_cor8)
		      in  %% Line 410
			  call 'file':'write'
			      (_cor0, _cor10)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'split_filename'/1 =
    %% Line 412
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when try
		    let <_cor1> =
			call 'erlang':'length'
			    (_cor0)
		    in  call 'erlang':'=<'
			    (_cor1, 100)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 413
	      {[],Name}
	  %% Line 414
	  <Name0> when 'true' ->
	      let <_cor2> =
		  %% Line 415
		  call 'filename':'split'
		      (Name0)
	      in  let <_cor3> =
		      %% Line 415
		      call 'lists':'reverse'
			  (_cor2)
		  in  %% Line 415
		      apply 'split_filename'/4
			  (_cor3, [], [], 0)
	end
'split_filename'/4 =
    %% Line 417
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Comp|Rest],Prefix,Suffix,Len>
	      when %% Line 418
		try
		    let <_cor4> =
			call 'erlang':'length'
			    (Comp)
		    in  let <_cor5> =
			    call 'erlang':'+'
				(Len, _cor4)
			in  call 'erlang':'<'
				(_cor5, 100)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 419
		  call 'erlang':'length'
		      (Comp)
	      in  let <_cor7> =
		      %% Line 419
		      call 'erlang':'+'
			  (Len, _cor6)
		  in  let <_cor8> =
			  %% Line 419
			  call 'erlang':'+'
			      (_cor7, 1)
		      in  %% Line 419
			  apply 'split_filename'/4
			      (Rest, Prefix, [Comp|Suffix], _cor8)
	  %% Line 420
	  <[Comp|Rest],Prefix,Suffix,Len> when 'true' ->
	      let <_cor9> =
		  %% Line 421
		  call 'erlang':'length'
		      (Comp)
	      in  let <_cor10> =
		      %% Line 421
		      call 'erlang':'+'
			  (Len, _cor9)
		  in  let <_cor11> =
			  %% Line 421
			  call 'erlang':'+'
			      (_cor10, 1)
		      in  %% Line 421
			  apply 'split_filename'/4
			      (Rest, [Comp|Prefix], Suffix, _cor11)
	  %% Line 422
	  <[],Prefix,Suffix,_cor18> when 'true' ->
	      let <_cor13> =
		  %% Line 423
		  call 'filename':'join'
		      (Prefix)
	      in  let <_cor12> =
		      %% Line 423
		      call 'filename':'join'
			  (Suffix)
		  in  %% Line 423
		      {_cor13,_cor12}
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'split_filename',4}}] )
	    -| ['compiler_generated'] )
	end
'extract_opts'/1 =
    %% Line 443
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 444
	    apply 'default_options'/0
		()
	in  %% Line 444
	    apply 'extract_opts'/2
		(_cor0, _cor1)
'table_opts'/1 =
    %% Line 446
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 447
	    apply 'default_options'/0
		()
	in  %% Line 447
	    apply 'read_opts'/2
		(_cor0, _cor1)
'default_options'/0 =
    %% Line 449
    fun () ->
	%% Line 450
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 451
	      {'read_opts',Cwd,'false','all','file',[],'false'}
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'extract_opts'/2 =
    %% Line 455
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['keep_old_files'|Rest],Opts> when 'true' ->
	      %% Line 456
	      case Opts of
		<{'read_opts',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (3, Opts, 'true')
		    in  apply 'extract_opts'/2
			    (Rest, _cor4)
		( <_cor35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 457
	  <[{'cwd',Cwd}|Rest],Opts> when 'true' ->
	      %% Line 458
	      case Opts of
		<{'read_opts',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
		    let <_cor7> =
			call 'erlang':'setelement'
			    (2, Opts, Cwd)
		    in  apply 'extract_opts'/2
			    (Rest, _cor7)
		( <_cor42> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 459
	  <[{'files',Files}|Rest],Opts> when 'true' ->
	      let <Set> =
		  %% Line 460
		  call 'ordsets':'from_list'
		      (Files)
	      in  %% Line 461
		  case Opts of
		    <{'read_opts',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
			let <_cor11> =
			    call 'erlang':'setelement'
				(4, Opts, Set)
			in  apply 'extract_opts'/2
				(Rest, _cor11)
		    ( <_cor49> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','read_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 462
	  <['memory'|Rest],Opts> when 'true' ->
	      %% Line 463
	      case Opts of
		<{'read_opts',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}> when 'true' ->
		    let <_cor14> =
			call 'erlang':'setelement'
			    (5, Opts, 'memory')
		    in  apply 'extract_opts'/2
			    (Rest, _cor14)
		( <_cor56> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 464
	  <['compressed'|Rest],Opts = {'read_opts',_cor57,_cor58,_cor59,_cor60,OpenMode,_cor61}> when 'true' ->
	      let <_rec8> =
		  %% Line 465
		  ['compressed'|OpenMode]
	      in  let <_cor18> =
		      %% Line 465
		      call 'erlang':'setelement'
			  (6, Opts, _rec8)
		  in  %% Line 465
		      apply 'extract_opts'/2
			  (Rest, _cor18)
	  %% Line 466
	  <['cooked'|Rest],Opts = {'read_opts',_cor69,_cor70,_cor71,_cor72,OpenMode,_cor73}> when 'true' ->
	      let <_rec10> =
		  %% Line 467
		  ['cooked'|OpenMode]
	      in  let <_cor22> =
		      %% Line 467
		      call 'erlang':'setelement'
			  (6, Opts, _rec10)
		  in  %% Line 467
		      apply 'extract_opts'/2
			  (Rest, _cor22)
	  %% Line 468
	  <['verbose'|Rest],Opts> when 'true' ->
	      %% Line 469
	      case Opts of
		<{'read_opts',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86}> when 'true' ->
		    let <_cor25> =
			call 'erlang':'setelement'
			    (7, Opts, 'true')
		    in  apply 'extract_opts'/2
			    (Rest, _cor25)
		( <_cor87> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 470
	  <[Other|Rest],Opts> when 'true' ->
	      let <_cor26> =
		  %% Line 471
		  apply 'read_opts'/2
		      ([Other|[]], Opts)
	      in  %% Line 471
		  apply 'extract_opts'/2
		      (Rest, _cor26)
	  %% Line 472
	  <[],Opts> when 'true' ->
	      %% Line 473
	      Opts
	  ( <_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27})
		  -| [{'function_name',{'extract_opts',2}}] )
	    -| ['compiler_generated'] )
	end
'read_opts'/2 =
    %% Line 477
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['compressed'|Rest],Opts = {'read_opts',_cor15,_cor16,_cor17,_cor18,OpenMode,_cor19}> when 'true' ->
	      let <_rec13> =
		  %% Line 478
		  ['compressed'|OpenMode]
	      in  let <_cor5> =
		      %% Line 478
		      call 'erlang':'setelement'
			  (6, Opts, _rec13)
		  in  %% Line 478
		      apply 'read_opts'/2
			  (Rest, _cor5)
	  %% Line 479
	  <['cooked'|Rest],Opts = {'read_opts',_cor27,_cor28,_cor29,_cor30,OpenMode,_cor31}> when 'true' ->
	      let <_rec15> =
		  %% Line 480
		  ['cooked'|OpenMode]
	      in  let <_cor9> =
		      %% Line 480
		      call 'erlang':'setelement'
			  (6, Opts, _rec15)
		  in  %% Line 480
		      apply 'read_opts'/2
			  (Rest, _cor9)
	  %% Line 481
	  <['verbose'|Rest],Opts> when 'true' ->
	      %% Line 482
	      case Opts of
		<{'read_opts',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
		    let <_cor12> =
			call 'erlang':'setelement'
			    (7, Opts, 'true')
		    in  apply 'read_opts'/2
			    (Rest, _cor12)
		( <_cor45> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','read_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 483
	  <[_cor46|Rest],Opts> when 'true' ->
	      %% Line 484
	      apply 'read_opts'/2
		  (Rest, Opts)
	  %% Line 485
	  <[],Opts> when 'true' ->
	      %% Line 486
	      Opts
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'read_opts',2}}] )
	    -| ['compiler_generated'] )
	end
'foldl_read'/4 =
    %% Line 488
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 489
	( case _cor0 of
	    ( <( {'read_opts',_cor16,_cor17,_cor18,_cor19,_rec18,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'open'/2
			   (_cor3, ['read'|_rec18]) of
		    %% Line 490
		    <{'ok',{'read',File}}> when 'true' ->
			let <_cor6> =
			    catch
				%% Line 492
				apply 'foldl_read1'/4
				    (_cor2, _cor1, File, _cor0)
			in  let <_cor8> =
				%% Line 492
				case _cor6 of
				  %% Line 493
				  <{'EXIT',Reason}> when 'true' ->
				      %% Line 494
				      call 'erlang':'exit'
					  (Reason)
				  %% Line 495
				  <{'error',{Reason,Format,Args}}> when 'true' ->
				      do  %% Line 496
					  apply 'read_verbose'/3
					      (_cor0, Format, Args)
					  %% Line 497
					  {'error',Reason}
				  %% Line 498
				  <{'error',Reason}> when 'true' ->
				      %% Line 499
				      {'error',Reason}
				  %% Line 500
				  <Ok> when 'true' ->
				      %% Line 501
				      Ok
				end
			    in  %% Line 503
				case call 'file':'close'
					 (File) of
				  <'ok'> when 'true' ->
				      _cor8
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor10})
				    -| ['compiler_generated'] )
				end
		    %% Line 505
		    <Error> when 'true' ->
			%% Line 506
			Error
		  end
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','read_opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'foldl_read1'/4 =
    %% Line 509
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 510
	case apply 'get_header'/1
		 (_cor1) of
	  %% Line 511
	  <'eof'> when 'true' ->
	      %% Line 512
	      apply _cor3
		  ('eof', _cor1, _cor0, _cor2)
	  %% Line 513
	  <Header> when 'true' ->
	      %% Line 514
	      case apply _cor3
		       (Header, _cor1, _cor0, _cor2) of
		<{'ok',NewAccu}> when 'true' ->
		    %% Line 515
		    apply 'foldl_read1'/4
			(_cor3, NewAccu, _cor1, _cor0)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'table1'/4 =
    %% Line 518
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'eof',_cor11,_cor12,Result> when 'true' ->
	      let <_cor4> =
		  %% Line 519
		  call 'lists':'reverse'
		      (Result)
	      in  %% Line 519
		  {'ok',_cor4}
	  %% Line 520
	  <Header = {'tar_header',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},File,{'read_opts',_cor24,_cor25,_cor26,_cor27,_cor28,'true'},Result> when 'true' ->
	      do  %% Line 523
		  apply 'skip'/2
		      (File, _cor17)
		  let <_cor6> =
		      %% Line 524
		      apply 'posix_to_erlang_time'/1
			  (_cor18)
		  in  %% Line 524
		      {'ok',[{_cor13,_cor20,_cor17,_cor6,_cor14,_cor15,_cor16}|Result]}
	  %% Line 525
	  <{'tar_header',Name,_cor33,_cor34,_cor35,Size,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41},File,_cor42,Result> when 'true' ->
	      do  %% Line 526
		  apply 'skip'/2
		      (File, Size)
		  %% Line 527
		  {'ok',[Name|Result]}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'table1',4}}] )
	    -| ['compiler_generated'] )
	end
'extract1'/4 =
    %% Line 529
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'eof',_cor18,_cor19,Acc> when 'true' ->
	      %% Line 530
	      case <> of
		%% Line 531
		<>
		    when call 'erlang':'is_list'
			  (Acc) ->
		    let <_cor4> =
			%% Line 532
			call 'lists':'reverse'
			    (Acc)
		    in  %% Line 532
			{'ok',_cor4}
		%% Line 533
		<> when 'true' ->
		    %% Line 534
		    Acc
	      end
	  %% Line 536
	  <Header,File,Opts,Acc> when 'true' ->
	      %% Line 537
	      ( case Header of
		  ( <( {'tar_header',_rec19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 538
			case apply 'check_extract'/2
				 (_rec19, Opts) of
			  %% Line 539
			  <'true'> when 'true' ->
			      %% Line 540
			      case apply 'get_element'/2
				       (File, Header) of
				<{'ok',Bin}> when 'true' ->
				    %% Line 541
				    case apply 'write_extracted_element'/3
					     (Header, Bin, Opts) of
				      %% Line 542
				      <'ok'> when 'true' ->
					  %% Line 543
					  {'ok',Acc}
				      %% Line 544
				      <{'ok',NameBin}>
					  when call 'erlang':'is_list'
						(Acc) ->
					  %% Line 545
					  {'ok',[NameBin|Acc]}
				      %% Line 546
				      <{'ok',NameBin}>
					  when call 'erlang':'=:='
						(Acc,
						 'ok') ->
					  %% Line 547
					  {'ok',[NameBin|[]]}
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor9})
					-| ['compiler_generated'] )
				    end
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
			  %% Line 549
			  <'false'> when 'true' ->
			      %% Line 550
			      case apply 'skip'/2
				       (File, _cor23) of
				<'ok'> when 'true' ->
				    %% Line 551
				    {'ok',Acc}
				( <_cor12> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor12})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor13})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor30> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tar_header'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'check_extract'/2 =
    %% Line 556
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,{'read_opts',_cor5,_cor6,'all',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 557
	      'true'
	  %% Line 558
	  <Name,{'read_opts',_cor10,_cor11,Files,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 559
	      call 'ordsets':'is_element'
		  (Name, Files)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check_extract',2}}] )
	    -| ['compiler_generated'] )
	end
'get_header'/1 =
    %% Line 561
    fun (_cor0) ->
	%% Line 562
	case call 'file':'read'
		 (_cor0, 512) of
	  %% Line 563
	  <'eof'> when 'true' ->
	      %% Line 564
	      call 'erlang':'throw'
		  ({'error','eof'})
	  %% Line 565
	  <{'ok',Bin}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 566
	      apply 'convert_header'/1
		  (Bin)
	  %% Line 567
	  <{'ok',List}> when 'true' ->
	      let <_cor1> =
		  %% Line 568
		  call 'erlang':'list_to_binary'
		      (List)
	      in  %% Line 568
		  apply 'convert_header'/1
		      (_cor1)
	  %% Line 569
	  <{'error',Reason}> when 'true' ->
	      %% Line 570
	      call 'erlang':'throw'
		  ({'error',Reason})
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'convert_header'/1 =
    %% Line 575
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when try
		    let <_cor1> =
			call 'erlang':'byte_size'
			    (_cor0)
		    in  call 'erlang':'=:='
			    (_cor1, 512)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 576
	      case apply 'verify_checksum'/1
		       (Bin) of
		%% Line 577
		<'ok'> when 'true' ->
		    let <_cor9> =
			%% Line 578
			apply 'get_name'/1
			    (Bin)
		    in  let <_cor8> =
			    %% Line 579
			    apply 'from_octal'/3
				(Bin, 100, 8)
			in  let <_cor7> =
				%% Line 580
				apply 'from_octal'/3
				    (Bin, 108, 8)
			    in  let <_cor6> =
				    %% Line 581
				    apply 'from_octal'/3
					(Bin, 116, 8)
				in  let <_cor5> =
					%% Line 582
					apply 'from_octal'/3
					    (Bin, 124, 12)
				    in  let <_cor4> =
					    %% Line 583
					    apply 'from_octal'/3
						(Bin, 136, 12)
					in  let <_cor3> =
						%% Line 586
						apply 'typeflag'/1
						    (Bin)
					    in  let <_cor2> =
						    %% Line 584
						    apply 'from_string'/3
							(Bin, %% Line 585
							      157, %% Line 585
								   100)
						in  let <Hd> =
							%% Line 578
							{'tar_header',_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,'undefined',_cor3,_cor2,[],'undefined'}
						    in  %% Line 587
							apply 'convert_header1'/1
							    (Hd)
		%% Line 588
		<'eof'> when 'true' ->
		    %% Line 589
		    'eof'
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 591
	  <Bin>
	      when try
		    let <_cor12> =
			call 'erlang':'byte_size'
			    (_cor0)
		    in  call 'erlang':'=:='
			    (_cor12, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 592
	      'eof'
	  %% Line 593
	  <_X_Bin> when 'true' ->
	      %% Line 594
	      call 'erlang':'throw'
		  ({'error','eof'})
	end
'convert_header1'/1 =
    %% Line 599
    fun (_cor0) ->
	case _cor0 of
	  <H = {'tar_header',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}>
	      when let <_cor6> =
		    call 'erlang':'=:='
			(_cor33, 'symlink')
		in  let <_cor9> =
			call 'erlang':'=/='
			    (_cor30, 0)
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor6, _cor9)
			  -| ['compiler_generated'] ) ->
	      let <_cor12> =
		  %% Line 600
		  call 'erlang':'setelement'
		      (6, H, 0)
	      in  %% Line 600
		  apply 'convert_header1'/1
		      (_cor12)
	  %% Line 601
	  <H = {'tar_header',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}>
	      when let <_cor18> =
		    call 'erlang':'=:='
			(_cor56, 'directory')
		in  let <_cor21> =
			call 'erlang':'=/='
			    (_cor53, 0)
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor18, _cor21)
			  -| ['compiler_generated'] ) ->
	      let <_cor24> =
		  %% Line 602
		  call 'erlang':'setelement'
		      (6, H, 0)
	      in  %% Line 602
		  apply 'convert_header1'/1
		      (_cor24)
	  %% Line 603
	  <Header> when 'true' ->
	      %% Line 604
	      Header
	end
'typeflag'/1 =
    %% Line 606
    fun (_cor0) ->
	%% Line 607
	case call 'erlang':'binary_to_list'
		 (_cor0, 157, 157) of
	  <[T|[]]> when 'true' ->
	      %% Line 608
	      case T of
		%% Line 609
		<0> when 'true' ->
		    'regular'
		%% Line 610
		<48> when 'true' ->
		    'regular'
		%% Line 611
		<49> when 'true' ->
		    'link'
		%% Line 612
		<50> when 'true' ->
		    'symlink'
		%% Line 613
		<51> when 'true' ->
		    'char'
		%% Line 614
		<52> when 'true' ->
		    'block'
		%% Line 615
		<53> when 'true' ->
		    'directory'
		%% Line 616
		<54> when 'true' ->
		    'fifo'
		%% Line 617
		<55> when 'true' ->
		    'regular'
		%% Line 618
		<_cor6> when 'true' ->
		    'unknown'
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'get_name'/1 =
    %% Line 624
    fun (_cor0) ->
	let <List0> =
	    %% Line 625
	    apply 'get_name_raw'/1
		(_cor0)
	in  %% Line 626
	    case call 'file':'native_name_encoding'
		     () of
	      %% Line 627
	      <'utf8'> when 'true' ->
		  let <Bin> =
		      %% Line 628
		      call 'erlang':'list_to_binary'
			  (List0)
		  in  %% Line 629
		      case call 'unicode':'characters_to_list'
			       (Bin) of
			%% Line 630
			<{'error',_cor6,_cor7}> when 'true' ->
			    %% Line 631
			    List0
			%% Line 632
			<List>
			    when call 'erlang':'is_list'
				  (List) ->
			    %% Line 633
			    List
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
	      %% Line 635
	      <'latin1'> when 'true' ->
		  %% Line 636
		  List0
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'get_name_raw'/1 =
    %% Line 639
    fun (_cor0) ->
	let <Name> =
	    %% Line 640
	    apply 'from_string'/3
		(_cor0, 0, 100)
	in  %% Line 641
	    case call 'erlang':'binary_to_list'
		     (_cor0, 346, 346) of
	      %% Line 642
	      <[0]> when 'true' ->
		  %% Line 643
		  Name
	      %% Line 644
	      <[_cor10|[]]> when 'true' ->
		  let <_cor4> =
		      %% Line 645
		      call 'erlang':'byte_size'
			  (_cor0)
		  in  let <Prefix> =
			  %% Line 645
			  call 'erlang':'binary_to_list'
			      (_cor0, 346, _cor4)
		      in  let <_cor7> =
			      %% Line 646
			      apply 'remove_nulls'/1
				  (Prefix)
			  in  %% Line 646
			      call 'lists':'reverse'
				  (_cor7, [47|Name])
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'from_string'/3 =
    %% Line 649
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 650
	    call 'erlang':'+'
		(_cor1, 1)
	in  let <_cor3> =
		%% Line 650
		call 'erlang':'+'
		    (_cor1, _cor0)
	    in  let <_cor5> =
		    %% Line 650
		    call 'erlang':'binary_to_list'
			(_cor2, _cor4, _cor3)
		in  let <_cor6> =
			%% Line 650
			apply 'remove_nulls'/1
			    (_cor5)
		    in  %% Line 650
			call 'lists':'reverse'
			    (_cor6)
'remove_nulls'/1 =
    %% Line 655
    fun (_cor0) ->
	%% Line 656
	apply 'remove_nulls'/2
	    (_cor0, [])
'remove_nulls'/2 =
    %% Line 658
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[0|_cor4],Result> when 'true' ->
	      %% Line 659
	      apply 'remove_nulls'/2
		  ([], Result)
	  %% Line 660
	  <[C|Rest],Result> when 'true' ->
	      %% Line 661
	      apply 'remove_nulls'/2
		  (Rest, [C|Result])
	  %% Line 662
	  <[],Result> when 'true' ->
	      %% Line 663
	      Result
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'remove_nulls',2}}] )
	    -| ['compiler_generated'] )
	end
'from_octal'/3 =
    %% Line 665
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 666
	    call 'erlang':'+'
		(_cor1, 1)
	in  let <_cor3> =
		%% Line 666
		call 'erlang':'+'
		    (_cor1, _cor0)
	    in  let <_cor5> =
		    %% Line 666
		    call 'erlang':'binary_to_list'
			(_cor2, _cor4, _cor3)
		in  %% Line 666
		    apply 'from_octal'/1
			(_cor5)
'from_octal'/1 =
    %% Line 668
    fun (_cor0) ->
	case _cor0 of
	  <[32|Rest]> when 'true' ->
	      %% Line 669
	      apply 'from_octal'/1
		  (Rest)
	  %% Line 670
	  <[Digit|Rest]>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(48, Digit)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (Digit, 55)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 671
		  call 'erlang':'-'
		      (Digit, 48)
	      in  %% Line 671
		  apply 'from_octal'/2
		      (Rest, _cor3)
	  %% Line 672
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 673
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  %% Line 673
		  apply 'from_octal'/1
		      (_cor4)
	  %% Line 674
	  <Other> when 'true' ->
	      %% Line 675
	      call 'erlang':'throw'
		  ({'error',{'bad_header',[66|[97|[100|[32|[111|[99|[116|[97|[108|[32|[110|[117|[109|[98|[101|[114|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]],[Other|[]]}})
	end
'from_octal'/2 =
    %% Line 677
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Digit|Rest],Result>
	      when let <_cor2> =
		    call 'erlang':'=<'
			(48, Digit)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (Digit, 55)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 678
		  call 'erlang':'*'
		      (Result, 8)
	      in  let <_cor5> =
		      %% Line 678
		      call 'erlang':'+'
			  (_cor4, Digit)
		  in  let <_cor6> =
			  %% Line 678
			  call 'erlang':'-'
			      (_cor5, 48)
		      in  %% Line 678
			  apply 'from_octal'/2
			      (Rest, _cor6)
	  %% Line 679
	  <[32|_cor9],Result> when 'true' ->
	      %% Line 680
	      Result
	  %% Line 681
	  <[0|_cor10],Result> when 'true' ->
	      %% Line 682
	      Result
	  %% Line 683
	  <Other,_cor11> when 'true' ->
	      %% Line 684
	      call 'erlang':'throw'
		  ({'error',{'bad_header',[66|[97|[100|[32|[99|[111|[110|[116|[101|[110|[116|[115|[32|[105|[110|[32|[111|[99|[116|[97|[108|[32|[102|[105|[101|[108|[100|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Other|[]]}})
	end
'get_element'/2 =
    %% Line 689
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,{'tar_header',_cor8,_cor9,_cor10,_cor11,0,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      do  %% Line 690
		  apply 'skip_to_next'/1
		      (File)
		  %% Line 691
		  {'ok',#{}#}
	  %% Line 692
	  <File,{'tar_header',_cor18,_cor19,_cor20,_cor21,Size,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
	      %% Line 693
	      case call 'file':'read'
		       (File, Size) of
		%% Line 694
		<Res = {'ok',Bin}>
		    when try
			  let <_cor2> =
			      call 'erlang':'byte_size'
				  (Bin)
			  in  call 'erlang':'=:='
				  (_cor2, Size)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    do  %% Line 695
			apply 'skip_to_next'/1
			    (File)
			%% Line 696
			Res
		%% Line 697
		<{'ok',List}>
		    when try
			  let <_cor3> =
			      call 'erlang':'length'
				  (List)
			  in  call 'erlang':'=:='
				  (_cor3, Size)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    do  %% Line 698
			apply 'skip_to_next'/1
			    (File)
			let <_cor4> =
			    %% Line 699
			    call 'erlang':'list_to_binary'
				(List)
			in  %% Line 699
			    {'ok',_cor4}
		%% Line 700
		<{'ok',_cor28}> when 'true' ->
		    call 'erlang':'throw'
			({'error','eof'})
		%% Line 701
		<{'error',Reason}> when 'true' ->
		    call 'erlang':'throw'
			({'error',Reason})
		%% Line 702
		<'eof'> when 'true' ->
		    call 'erlang':'throw'
			({'error','eof'})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'get_element',2}}] )
	    -| ['compiler_generated'] )
	end
'verify_checksum'/1 =
    %% Line 708
    fun (_cor0) ->
	%% Line 709
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<H1>(148,8,'binary',['unsigned'|['big']]),
	     #<CheckStr>(8,8,'binary',['unsigned'|['big']]),
	     #<H2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor3> =
		  %% Line 710
		  apply 'checksum'/1
		      (H1)
	      in  let <_cor2> =
		      %% Line 710
		      apply 'checksum'/1
			  (H2)
		  in  %% Line 710
		      case call 'erlang':'+'
			       (_cor3, _cor2) of
			%% Line 711
			<0> when 'true' ->
			    'eof'
			%% Line 712
			<Checksum0> when 'true' ->
			    let <Csum> =
				%% Line 713
				apply 'from_octal'/1
				    (CheckStr)
			    in  %% Line 715
				case call 'erlang':'+'
					 (Checksum0, 256) of
				  %% Line 716
				  <_cor9>
				      when call 'erlang':'=:='
					    (_cor9,
					     Csum) ->
				      'ok'
				  %% Line 717
				  <Unsigned> when 'true' ->
				      %% Line 718
				      apply 'verify_checksum'/5
					  (H1, H2, 256, Csum, Unsigned)
				end
		      end
	  ( <_cor1> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    primop 'match_fail'
			({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'verify_checksum'/5 =
    %% Line 724
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 725
	    call 'erlang':'binary_to_list'
		(_cor4)
	in  let <_cor5> =
		%% Line 725
		call 'erlang':'binary_to_list'
		    (_cor3)
	    in  let <_cor6> =
		    %% Line 725
		    apply 'signed_sum'/2
			(_cor5, _cor2)
		in  %% Line 725
		    case apply 'signed_sum'/2
			     (_cor7, _cor6) of
		      %% Line 726
		      <_cor14>
			  when call 'erlang':'=:='
				(_cor14,
				 _cor1) ->
			  'ok'
		      %% Line 727
		      <Signed> when 'true' ->
			  %% Line 728
			  call 'erlang':'throw'
			      ({'error',%% Line 729
					{'bad_header',%% Line 730
						      [73|[110|[99|[111|[114|[114|[101|[99|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[99|[104|[101|[99|[107|[115|[117|[109|[32|[126|[119|[32|[40|[126|[119|[41|[44|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 731
																																										 [Signed|[_cor0|[_cor1|[]]]]}})
		    end
'signed_sum'/2 =
    %% Line 734
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Rest],Sum>
	      when call 'erlang':'<'
		    (C,
		     128) ->
	      let <_cor2> =
		  %% Line 735
		  call 'erlang':'+'
		      (Sum, C)
	      in  %% Line 735
		  apply 'signed_sum'/2
		      (Rest, _cor2)
	  %% Line 736
	  <[C|Rest],Sum> when 'true' ->
	      let <_cor3> =
		  %% Line 737
		  call 'erlang':'+'
		      (Sum, C)
	      in  let <_cor4> =
		      %% Line 737
		      call 'erlang':'-'
			  (_cor3, 256)
		  in  %% Line 737
		      apply 'signed_sum'/2
			  (Rest, _cor4)
	  %% Line 738
	  <[],Sum> when 'true' ->
	      Sum
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'signed_sum',2}}] )
	    -| ['compiler_generated'] )
	end
'write_extracted_element'/3 =
    %% Line 740
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Header,Bin,Opts = {'read_opts',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}>
	      when %% Line 741
		call 'erlang':'=:='
		    (_cor31,
		     'memory') ->
	      %% Line 742
	      ( case Header of
		  ( <( {'tar_header',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_rec23,_cor41,_cor42,_cor43}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec23 of
			  %% Line 743
			  <'regular'> when 'true' ->
			      %% Line 744
			      {'ok',{_cor34,Bin}}
			  %% Line 745
			  <_cor56> when 'true' ->
			      %% Line 746
			      'ok'
			end
		    -| ['compiler_generated'] )
		  ( <_cor44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tar_header'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 748
	  <Header,Bin,Opts> when 'true' ->
	      %% Line 749
	      ( case Header of
		  ( <( {'tar_header',_rec25,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}
		       -| ['compiler_generated'] )> when 'true' ->
			( case Opts of
			    ( <( {'read_opts',_rec26,_cor68,_cor69,_cor70,_cor71,_cor72}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Name> =
				      call 'filename':'absname'
					  (_rec25, _rec26)
				  in  let <_cor22> =
					  %% Line 751
					  case _cor63 of
					    %% Line 752
					    <'regular'> when 'true' ->
						%% Line 753
						apply 'write_extracted_file'/3
						    (Name, Bin, Opts)
					    %% Line 754
					    <'directory'> when 'true' ->
						%% Line 755
						apply 'create_extracted_dir'/2
						    (Name, Opts)
					    %% Line 756
					    <'symlink'> when 'true' ->
						%% Line 757
						apply 'create_symlink'/3
						    (Name, Header, Opts)
					    %% Line 758
					    <Other> when 'true' ->
						do  %% Line 759
						    apply 'read_verbose'/3
							(Opts, [120|[32|[126|[116|[115|[32|[45|[32|[117|[110|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 760
																													[Name|[Other|[]]])
						    %% Line 761
						    'not_written'
					  end
				      in  %% Line 763
					  case _cor22 of
					    %% Line 764
					    <'ok'> when 'true' ->
						apply 'set_extracted_file_info'/2
						    (Name, Header)
					    %% Line 765
					    <'not_written'> when 'true' ->
						'ok'
					    ( <_cor24> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor24})
					      -| ['compiler_generated'] )
					  end
			      -| ['compiler_generated'] )
			    ( <_cor73> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','read_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor67> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tar_header'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'create_extracted_dir'/2 =
    %% Line 768
    fun (_cor1,_cor0) ->
	%% Line 769
	case call 'file':'make_dir'
		 (_cor1) of
	  %% Line 770
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 771
	  <{'error','enotsup'}> when 'true' ->
	      'not_written'
	  %% Line 772
	  <{'error','eexist'}> when 'true' ->
	      'not_written'
	  %% Line 773
	  <{'error','enoent'}> when 'true' ->
	      apply 'make_dirs'/2
		  (_cor1, 'dir')
	  %% Line 774
	  <{'error',Reason}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',Reason})
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'create_symlink'/3 =
    %% Line 777
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Header = {'tar_header',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,Linkname,_cor16,_cor17},Opts> when 'true' ->
	      %% Line 778
	      case call 'file':'make_symlink'
		       (Linkname, Name) of
		%% Line 779
		<'ok'> when 'true' ->
		    'ok'
		%% Line 780
		<{'error','enoent'}> when 'true' ->
		    %% Line 781
		    case apply 'make_dirs'/2
			     (Name, 'file') of
		      <'ok'> when 'true' ->
			  %% Line 782
			  apply 'create_symlink'/3
			      (Name, Header, Opts)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 783
		<{'error','eexist'}> when 'true' ->
		    'not_written'
		%% Line 784
		<{'error','enotsup'}> when 'true' ->
		    do  %% Line 785
			apply 'read_verbose'/3
			    (Opts, [120|[32|[126|[116|[115|[32|[45|[32|[115|[121|[109|[98|[111|[108|[105|[99|[32|[108|[105|[110|[107|[115|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
			%% Line 786
			'not_written'
		%% Line 787
		<{'error',Reason}> when 'true' ->
		    call 'erlang':'throw'
			({'error',Reason})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'create_symlink',3}}] )
	    -| ['compiler_generated'] )
	end
'write_extracted_file'/3 =
    %% Line 790
    fun (_cor2,_cor1,_cor0) ->
	%% Line 792
	( case _cor0 of
	    ( <( {'read_opts',_cor13,_rec28,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor7> =
		      case _rec28 of
			%% Line 793
			<'true'> when 'true' ->
			    %% Line 794
			    case call 'file':'read_file_info'
				     (_cor2) of
			      %% Line 795
			      <{'ok',_cor19}> when 'true' ->
				  'false'
			      %% Line 796
			      <_cor20> when 'true' ->
				  'true'
			    end
			%% Line 798
			<'false'> when 'true' ->
			    'true'
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 800
		      case _cor7 of
			%% Line 801
			<'true'> when 'true' ->
			    do  %% Line 802
				apply 'read_verbose'/3
				    (_cor0, [120|[32|[126|[116|[115|[126|[110]]]]]]], [_cor2|[]])
				%% Line 803
				apply 'write_file'/2
				    (_cor2, _cor1)
			%% Line 804
			<'false'> when 'true' ->
			    do  %% Line 805
				apply 'read_verbose'/3
				    (_cor0, [120|[32|[126|[116|[115|[32|[45|[32|[101|[120|[105|[115|[116|[115|[44|[32|[110|[111|[116|[32|[99|[114|[101|[97|[116|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[]])
				%% Line 806
				'not_written'
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor9})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','read_opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'write_file'/2 =
    %% Line 809
    fun (_cor1,_cor0) ->
	%% Line 810
	case call 'file':'write_file'
		 (_cor1, _cor0) of
	  %% Line 811
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 812
	  <{'error','enoent'}> when 'true' ->
	      %% Line 813
	      case apply 'make_dirs'/2
		       (_cor1, 'file') of
		<'ok'> when 'true' ->
		    %% Line 814
		    apply 'write_file'/2
			(_cor1, _cor0)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 815
	  <{'error',Reason}> when 'true' ->
	      %% Line 816
	      call 'erlang':'throw'
		  ({'error',Reason})
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'set_extracted_file_info'/2 =
    %% Line 819
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor6,{'tar_header',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,'symlink',_cor14,_cor15,_cor16}> when 'true' ->
	      'ok'
	  %% Line 820
	  <Name,{'tar_header',_cor17,Mode,_cor18,_cor19,_cor20,Mtime,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      let <_cor2> =
		  %% Line 821
		  apply 'posix_to_erlang_time'/1
		      (Mtime)
	      in  let <Info> =
		      %% Line 821
		      {'file_info','undefined','undefined','undefined','undefined',_cor2,'undefined',Mode,'undefined','undefined','undefined','undefined','undefined','undefined'}
		  in  %% Line 822
		      call 'file':'write_file_info'
			  (Name, Info)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'set_extracted_file_info',2}}] )
	    -| ['compiler_generated'] )
	end
'make_dirs'/2 =
    %% Line 826
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,'file'> when 'true' ->
	      %% Line 827
	      call 'filelib':'ensure_dir'
		  (Name)
	  %% Line 828
	  <Name,'dir'> when 'true' ->
	      let <_cor2> =
		  %% Line 829
		  call 'filename':'join'
		      (Name, [42])
	      in  %% Line 829
		  call 'filelib':'ensure_dir'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'make_dirs',2}}] )
	    -| ['compiler_generated'] )
	end
'read_verbose'/3 =
    %% Line 833
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'read_opts',_cor6,_cor7,_cor8,_cor9,_cor10,'true'},Format,Args> when 'true' ->
	      do  %% Line 834
		  call 'io':'format'
		      (Format, Args)
		  %% Line 835
		  call 'io':'nl'
		      ()
	  %% Line 836
	  <_cor11,_cor12,_cor13> when 'true' ->
	      %% Line 837
	      'ok'
	end
'checksum'/1 =
    %% Line 848
    fun (_cor0) ->
	apply 'checksum'/2
	    (_cor0, 0)
'checksum'/2 =
    %% Line 850
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<A>(8,1,'integer',['unsigned'|['big']]),
	     #<B>(8,1,'integer',['unsigned'|['big']]),
	     #<C>(8,1,'integer',['unsigned'|['big']]),
	     #<D>(8,1,'integer',['unsigned'|['big']]),
	     #<E>(8,1,'integer',['unsigned'|['big']]),
	     #<F>(8,1,'integer',['unsigned'|['big']]),
	     #<G>(8,1,'integer',['unsigned'|['big']]),
	     #<H>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Sum> when 'true' ->
	      let <_cor2> =
		  %% Line 851
		  call 'erlang':'+'
		      (Sum, A)
	      in  let <_cor3> =
		      %% Line 851
		      call 'erlang':'+'
			  (_cor2, B)
		  in  let <_cor4> =
			  %% Line 851
			  call 'erlang':'+'
			      (_cor3, C)
		      in  let <_cor5> =
			      %% Line 851
			      call 'erlang':'+'
				  (_cor4, D)
			  in  let <_cor6> =
				  %% Line 851
				  call 'erlang':'+'
				      (_cor5, E)
			      in  let <_cor7> =
				      %% Line 851
				      call 'erlang':'+'
					  (_cor6, F)
				  in  let <_cor8> =
					  %% Line 851
					  call 'erlang':'+'
					      (_cor7, G)
				      in  let <_cor9> =
					      %% Line 851
					      call 'erlang':'+'
						  (_cor8, H)
					  in  %% Line 851
					      apply 'checksum'/2
						  (T, _cor9)
	  %% Line 852
	  <#{#<A>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Sum> when 'true' ->
	      let <_cor10> =
		  %% Line 853
		  call 'erlang':'+'
		      (Sum, A)
	      in  %% Line 853
		  apply 'checksum'/2
		      (T, _cor10)
	  %% Line 854
	  <#{}#,Sum> when 'true' ->
	      Sum
	  ( <_cor12,_cor11> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor12)
		    ( primop 'match_fail'
			  ({'function_clause',_cor12,_cor11})
		      -| [{'function_name',{'checksum',2}}] )
	    -| ['compiler_generated'] )
	end
'padding'/2 =
    %% Line 858
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 859
	    apply 'pad_size'/2
		(_cor1, _cor0)
	in  %% Line 859
	    apply 'zeroes'/1
		(_cor2)
'pad_size'/2 =
    %% Line 861
    fun (_cor1,_cor0) ->
	%% Line 862
	case call 'erlang':'rem'
		 (_cor1, _cor0) of
	  %% Line 863
	  <0> when 'true' ->
	      0
	  %% Line 864
	  <Rem> when 'true' ->
	      call 'erlang':'-'
		  (_cor0, Rem)
	end
'zeroes'/1 =
    %% Line 867
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      []
	  %% Line 868
	  <1> when 'true' ->
	      [0]
	  %% Line 869
	  <2> when 'true' ->
	      [0|[0]]
	  %% Line 870
	  <Number> when 'true' ->
	      let <_cor1> =
		  %% Line 871
		  call 'erlang':'div'
		      (Number, 2)
	      in  let <Half> =
		      %% Line 871
		      apply 'zeroes'/1
			  (_cor1)
		  in  %% Line 872
		      case call 'erlang':'rem'
			       (Number, 2) of
			%% Line 873
			<0> when 'true' ->
			    [Half|Half]
			%% Line 874
			<1> when 'true' ->
			    [Half|[0|Half]]
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
	end
'skip'/2 =
    %% Line 879
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 882
	    call 'erlang':'+'
		(_cor0, 512)
	in  let <_cor3> =
		%% Line 882
		call 'erlang':'-'
		    (_cor2, 1)
	    in  let <_cor4> =
		    %% Line 882
		    call 'erlang':'div'
			(_cor3, 512)
		in  let <Amount> =
			%% Line 882
			call 'erlang':'*'
			    (_cor4, 512)
		    in  %% Line 883
			case call 'file':'position'
				 (_cor1, {'cur',Amount}) of
			  <{'ok',_cor9}> when 'true' ->
			      %% Line 884
			      'ok'
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
'skip_to_next'/1 =
    %% Line 888
    fun (_cor0) ->
	%% Line 891
	case call 'file':'position'
		 (_cor0, {'cur',0}) of
	  <{'ok',Position}> when 'true' ->
	      let <_cor2> =
		  %% Line 892
		  call 'erlang':'+'
		      (Position, 512)
	      in  let <_cor3> =
		      %% Line 892
		      call 'erlang':'-'
			  (_cor2, 1)
		  in  let <_cor4> =
			  %% Line 892
			  call 'erlang':'div'
			      (_cor3, 512)
		      in  let <NewPosition> =
			      %% Line 892
			      call 'erlang':'*'
				  (_cor4, 512)
			  in  %% Line 893
			      case call 'file':'position'
				       (_cor0, NewPosition) of
				<{'ok',_cor8}>
				    when call 'erlang':'=:='
					  (_cor8,
					   NewPosition) ->
				    %% Line 894
				    'ok'
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'add_verbose'/3 =
    %% Line 898
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'add_opts',_cor6,'true'},Format,Args> when 'true' ->
	      %% Line 899
	      call 'io':'format'
		  (Format, Args)
	  %% Line 900
	  <_cor7,_cor8,_cor9> when 'true' ->
	      %% Line 901
	      'ok'
	end
'posix_time'/1 =
    %% Line 906
    fun (_cor0) ->
	%% Line 908
	case call 'calendar':'time_difference'
		 ({{1970,1,1},{0,0,0}}, _cor0) of
	  <{Days,{Hour,Min,Sec}}> when 'true' ->
	      let <_cor5> =
		  %% Line 909
		  call 'erlang':'*'
		      (86400, Days)
	      in  let <_cor4> =
		      %% Line 909
		      call 'erlang':'*'
			  (3600, Hour)
		  in  let <_cor6> =
			  %% Line 909
			  call 'erlang':'+'
			      (_cor5, _cor4)
		      in  let <_cor3> =
			      %% Line 909
			      call 'erlang':'*'
				  (60, Min)
			  in  let <_cor7> =
				  %% Line 909
				  call 'erlang':'+'
				      (_cor6, _cor3)
			      in  %% Line 909
				  call 'erlang':'+'
				      (_cor7, Sec)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'posix_to_erlang_time'/1 =
    %% Line 911
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 913
	    call 'erlang':'div'
		(_cor0, 1000000)
	in  let <_cor2> =
		%% Line 913
		call 'erlang':'rem'
		    (_cor0, 1000000)
	    in  let <Time> =
		    %% Line 913
		    call 'calendar':'now_to_datetime'
			({_cor3,_cor2,0})
		in  %% Line 914
		    call 'erlang':'universaltime_to_localtime'
			(Time)
'read_file_and_info'/2 =
    %% Line 916
    fun (_cor1,_cor0) ->
	%% Line 917
	( case _cor0 of
	    ( <( {'add_opts',_rec29,_cor22}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 918
		  case apply _rec29
			   (_cor1) of
		    %% Line 919
		    <{'ok',Info = {'file_info',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}}>
			when call 'erlang':'=:='
			      (_cor25,
			       'regular') ->
			%% Line 920
			case call 'file':'read_file'
				 (_cor1) of
			  %% Line 921
			  <{'ok',Bin}> when 'true' ->
			      %% Line 922
			      {'ok',Bin,Info}
			  %% Line 923
			  <Error> when 'true' ->
			      %% Line 924
			      Error
			end
		    %% Line 926
		    <{'ok',Info = {'file_info',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}}>
			when call 'erlang':'=:='
			      (_cor38,
			       'symlink') ->
			%% Line 927
			case call 'file':'read_link'
				 (_cor1) of
			  %% Line 928
			  <{'ok',PointsTo}> when 'true' ->
			      %% Line 929
			      {'ok',PointsTo,Info}
			  %% Line 930
			  <Error> when 'true' ->
			      %% Line 931
			      Error
			end
		    %% Line 933
		    <{'ok',Info}> when 'true' ->
			%% Line 934
			{'ok',[],Info}
		    %% Line 935
		    <Error> when 'true' ->
			%% Line 936
			Error
		  end
	      -| ['compiler_generated'] )
	    ( <_cor23> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','add_opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'foreach_while_ok'/2 =
    %% Line 939
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,[First|Rest]> when 'true' ->
	      %% Line 940
	      case apply Fun
		       (First) of
		%% Line 941
		<'ok'> when 'true' ->
		    apply 'foreach_while_ok'/2
			(Fun, Rest)
		%% Line 942
		<Other> when 'true' ->
		    Other
	      end
	  %% Line 944
	  <_cor5,[]> when 'true' ->
	      'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'foreach_while_ok',2}}] )
	    -| ['compiler_generated'] )
	end
'open_mode'/1 =
    %% Line 946
    fun (_cor0) ->
	%% Line 947
	apply 'open_mode'/4
	    (_cor0, 'false', ['raw'], [])
'open_mode'/4 =
    %% Line 949
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'read',_cor8,Raw,_cor9> when 'true' ->
	      %% Line 950
	      {'ok','read',Raw,[]}
	  %% Line 951
	  <'write',_cor10,Raw,_cor11> when 'true' ->
	      %% Line 952
	      {'ok','write',Raw,[]}
	  %% Line 953
	  <['read'|Rest],'false',Raw,Opts> when 'true' ->
	      %% Line 954
	      apply 'open_mode'/4
		  (Rest, 'read', Raw, Opts)
	  %% Line 955
	  <['write'|Rest],'false',Raw,Opts> when 'true' ->
	      %% Line 956
	      apply 'open_mode'/4
		  (Rest, 'write', Raw, Opts)
	  %% Line 957
	  <['compressed'|Rest],Access,Raw,Opts> when 'true' ->
	      %% Line 958
	      apply 'open_mode'/4
		  (Rest, Access, Raw, ['compressed'|Opts])
	  %% Line 959
	  <['cooked'|Rest],Access,_X_Raw,Opts> when 'true' ->
	      %% Line 960
	      apply 'open_mode'/4
		  (Rest, Access, [], Opts)
	  %% Line 961
	  <[],Access,Raw,Opts> when 'true' ->
	      %% Line 962
	      {'ok',Access,Raw,Opts}
	  %% Line 963
	  <_cor12,_cor13,_cor14,_cor15> when 'true' ->
	      %% Line 964
	      {'error','einval'}
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_tar')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_tar', _cor0)
end