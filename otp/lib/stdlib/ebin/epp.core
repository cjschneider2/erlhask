module 'epp' ['close'/1,
	      'default_encoding'/0,
	      'encoding_to_string'/1,
	      'format_error'/1,
	      'interpret_file_attribute'/1,
	      'macro_defs'/1,
	      'module_info'/0,
	      'module_info'/1,
	      'normalize_typed_record_fields'/1,
	      'open'/1,
	      'open'/2,
	      'open'/3,
	      'open'/5,
	      'parse_erl_form'/1,
	      'parse_file'/1,
	      'parse_file'/2,
	      'parse_file'/3,
	      'read_encoding'/1,
	      'read_encoding'/2,
	      'read_encoding_from_binary'/1,
	      'read_encoding_from_binary'/2,
	      'restore_typed_record_fields'/1,
	      'scan_erl_form'/1,
	      'set_encoding'/1,
	      'set_encoding'/2]
    attributes [%% Line 34
		'export_type' =
		    %% Line 34
		    [{'source_encoding',0}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'macros',{'type',36,'list',[{'type',36,'union',[{'type',36,'atom',[]}|[{'type',36,'tuple',[{'type',36,'atom',[]}|[{'type',36,'term',[]}]]}]]}]},[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'epp_handle',{'type',37,'pid',[]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'source_encoding',{'type',38,'union',[{'atom',38,'latin1'}|[{'atom',38,'utf8'}]]},[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'ifdef',{'type',40,'union',[{'atom',40,'ifdef'}|[{'atom',40,'ifndef'}|[{'atom',40,'else'}]]]},[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'name',{'type',42,'tuple',[{'atom',42,'atom'}|[{'type',42,'atom',[]}]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'argspec',{'type',43,'union',[{'atom',43,'none'}|[{'type',44,'non_neg_integer',[]}]]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'tokens',{'type',45,'list',[{'remote_type',45,[{'atom',45,'erl_scan'}|[{'atom',45,'token'}|[[]]]]}]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'used',{'type',46,'tuple',[{'type',46,'name',[]}|[{'type',46,'argspec',[]}]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','epp'},[{'typed_record_field',{'record_field',51,{'atom',51,'file'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'remote_type',51,[{'atom',51,'file'}|[{'atom',51,'io_device'}|[[]]]]}]]}}|[{'record_field',52,{'atom',52,'location'},{'integer',52,1}}|[{'typed_record_field',{'record_field',53,{'atom',53,'delta'},{'integer',53,0}},{'type',53,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'name'},{'string',54,[]}},{'remote_type',54,[{'atom',54,'file'}|[{'atom',54,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'name2'},{'string',55,[]}},{'remote_type',55,[{'atom',55,'file'}|[{'atom',55,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',56,{'atom',56,'istk'},{'nil',56}},{'type',56,'list',[{'type',56,'ifdef',[]}]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'sstk'},{'nil',57}},{'type',57,'list',[{'type',57,'record',[{'atom',57,'epp'}]}]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'path'},{'nil',58}},{'type',58,'list',[{'remote_type',58,[{'atom',58,'file'}|[{'atom',58,'name'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'macs'},{'call',59,{'remote',59,{'atom',59,'dict'},{'atom',59,'new'}},[]}},{'remote_type',60,[{'atom',60,'dict'}|[{'atom',60,'dict'}|[[{'type',60,'name',[]}|[{'type',60,'tuple',[{'type',60,'argspec',[]}|[{'type',60,'tokens',[]}]]}]]]]]}}|[{'typed_record_field',{'record_field',61,{'atom',61,'uses'},{'call',61,{'remote',61,{'atom',61,'dict'},{'atom',61,'new'}},[]}},{'remote_type',62,[{'atom',62,'dict'}|[{'atom',62,'dict'}|[[{'type',62,'name',[]}|[{'type',62,'list',[{'type',62,'tuple',[{'type',62,'argspec',[]}|[{'type',62,'list',[{'type',62,'used',[]}]}]]}]}]]]]]}}|[{'typed_record_field',{'record_field',63,{'atom',63,'default_encoding'},{'atom',63,'utf8'}},{'type',63,'source_encoding',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'pre_opened'},{'atom',64,'false'}},{'type',64,'boolean',[]}}]]]]]]]]]]]],[]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'open',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'FileName'}|[{'var',86,'IncludePath'}]]}|[{'type',87,'union',[{'type',87,'tuple',[{'atom',87,'ok'}|[{'var',87,'Epp'}]]}|[{'type',87,'tuple',[{'atom',87,'error'}|[{'var',87,'ErrorDescriptor'}]]}]]}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'FileName'}|[{'remote_type',88,[{'atom',88,'file'}|[{'atom',88,'name'}|[[]]]]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'IncludePath'}|[{'type',89,'list',[{'ann_type',89,[{'var',89,'DirectoryName'}|[{'remote_type',89,[{'atom',89,'file'}|[{'atom',89,'name'}|[[]]]]}]]}]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Epp'}|[{'type',90,'epp_handle',[]}]]]]}|[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'ErrorDescriptor'}|[{'type',91,'term',[]}]]]]}]]]]]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'open',3},[{'type',96,'bounded_fun',[{'type',96,'fun',[{'type',96,'product',[{'var',96,'FileName'}|[{'var',96,'IncludePath'}|[{'var',96,'PredefMacros'}]]]}|[{'type',97,'union',[{'type',97,'tuple',[{'atom',97,'ok'}|[{'var',97,'Epp'}]]}|[{'type',97,'tuple',[{'atom',97,'error'}|[{'var',97,'ErrorDescriptor'}]]}]]}]]}|[[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'FileName'}|[{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'name'}|[[]]]]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'IncludePath'}|[{'type',99,'list',[{'ann_type',99,[{'var',99,'DirectoryName'}|[{'remote_type',99,[{'atom',99,'file'}|[{'atom',99,'name'}|[[]]]]}]]}]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'PredefMacros'}|[{'type',100,'macros',[]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Epp'}|[{'type',101,'epp_handle',[]}]]]]}|[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'ErrorDescriptor'}|[{'type',102,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'open',1},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'Options'}]}|[{'type',112,'union',[{'type',112,'tuple',[{'atom',112,'ok'}|[{'var',112,'Epp'}]]}|[{'type',112,'tuple',[{'atom',112,'ok'}|[{'var',112,'Epp'}|[{'var',112,'Extra'}]]]}|[{'type',112,'tuple',[{'atom',112,'error'}|[{'var',112,'ErrorDescriptor'}]]}]]]}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Options'}|[{'type',113,'list',[{'type',113,'union',[{'type',113,'tuple',[{'atom',113,'default_encoding'}|[{'ann_type',113,[{'var',113,'DefEncoding'}|[{'type',113,'source_encoding',[]}]]}]]}|[{'type',114,'tuple',[{'atom',114,'includes'}|[{'ann_type',114,[{'var',114,'IncludePath'}|[{'type',114,'list',[{'ann_type',114,[{'var',114,'DirectoryName'}|[{'remote_type',114,[{'atom',114,'file'}|[{'atom',114,'name'}|[[]]]]}]]}]}]]}]]}|[{'type',115,'tuple',[{'atom',115,'macros'}|[{'ann_type',115,[{'var',115,'PredefMacros'}|[{'type',115,'macros',[]}]]}]]}|[{'type',116,'tuple',[{'atom',116,'name'}|[{'ann_type',116,[{'var',116,'FileName'}|[{'remote_type',116,[{'atom',116,'file'}|[{'atom',116,'name'}|[[]]]]}]]}]]}|[{'atom',117,'extra'}]]]]]}]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Epp'}|[{'type',118,'epp_handle',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Extra'}|[{'type',119,'list',[{'type',119,'tuple',[{'atom',119,'encoding'}|[{'type',119,'union',[{'type',119,'source_encoding',[]}|[{'atom',119,'none'}]]}]]}]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'ErrorDescriptor'}|[{'type',120,'term',[]}]]]]}]]]]]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'close',1},[{'type',143,'bounded_fun',[{'type',143,'fun',[{'type',143,'product',[{'var',143,'Epp'}]}|[{'atom',143,'ok'}]]}|[[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Epp'}|[{'type',144,'epp_handle',[]}]]]]}]]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'parse_erl_form',1},[{'type',157,'bounded_fun',[{'type',157,'fun',[{'type',157,'product',[{'var',157,'Epp'}]}|[{'type',158,'union',[{'type',158,'tuple',[{'atom',158,'ok'}|[{'var',158,'AbsForm'}]]}|[{'type',158,'tuple',[{'atom',158,'eof'}|[{'var',158,'Line'}]]}|[{'type',158,'tuple',[{'atom',158,'error'}|[{'var',158,'ErrorInfo'}]]}]]]}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Epp'}|[{'type',159,'epp_handle',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'AbsForm'}|[{'remote_type',160,[{'atom',160,'erl_parse'}|[{'atom',160,'abstract_form'}|[[]]]]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Line'}|[{'remote_type',161,[{'atom',161,'erl_scan'}|[{'atom',161,'line'}|[[]]]]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'ErrorInfo'}|[{'type',162,'union',[{'remote_type',162,[{'atom',162,'erl_scan'}|[{'atom',162,'error_info'}|[[]]]]}|[{'remote_type',162,[{'atom',162,'erl_parse'}|[{'atom',162,'error_info'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'format_error',1},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'ErrorDescriptor'}]}|[{'remote_type',178,[{'atom',178,'io_lib'}|[{'atom',178,'chars'}|[[]]]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'ErrorDescriptor'}|[{'type',179,'term',[]}]]]]}]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'parse_file',3},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'FileName'}|[{'var',217,'IncludePath'}|[{'var',217,'PredefMacros'}]]]}|[{'type',218,'union',[{'type',218,'tuple',[{'atom',218,'ok'}|[{'type',218,'list',[{'var',218,'Form'}]}]]}|[{'type',218,'tuple',[{'atom',218,'error'}|[{'var',218,'OpenError'}]]}]]}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'FileName'}|[{'remote_type',219,[{'atom',219,'file'}|[{'atom',219,'name'}|[[]]]]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'IncludePath'}|[{'type',220,'list',[{'ann_type',220,[{'var',220,'DirectoryName'}|[{'remote_type',220,[{'atom',220,'file'}|[{'atom',220,'name'}|[[]]]]}]]}]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Form'}|[{'type',221,'union',[{'remote_type',221,[{'atom',221,'erl_parse'}|[{'atom',221,'abstract_form'}|[[]]]]}|[{'type',221,'tuple',[{'atom',221,'error'}|[{'var',221,'ErrorInfo'}]]}|[{'type',221,'tuple',[{'atom',221,'eof'}|[{'var',221,'Line'}]]}]]]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'PredefMacros'}|[{'type',222,'macros',[]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Line'}|[{'remote_type',223,[{'atom',223,'erl_scan'}|[{'atom',223,'line'}|[[]]]]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'ErrorInfo'}|[{'type',224,'union',[{'remote_type',224,[{'atom',224,'erl_scan'}|[{'atom',224,'error_info'}|[[]]]]}|[{'remote_type',224,[{'atom',224,'erl_parse'}|[{'atom',224,'error_info'}|[[]]]]}]]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'OpenError'}|[{'type',225,'union',[{'remote_type',225,[{'atom',225,'file'}|[{'atom',225,'posix'}|[[]]]]}|[{'atom',225,'badarg'}|[{'atom',225,'system_limit'}]]]}]]]]}]]]]]]]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'parse_file',2},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'FileName'}|[{'var',230,'Options'}]]}|[{'type',231,'union',[{'type',231,'tuple',[{'atom',231,'ok'}|[{'type',231,'list',[{'var',231,'Form'}]}]]}|[{'type',231,'tuple',[{'atom',231,'ok'}|[{'type',231,'list',[{'var',231,'Form'}]}|[{'var',231,'Extra'}]]]}|[{'type',231,'tuple',[{'atom',231,'error'}|[{'var',231,'OpenError'}]]}]]]}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'FileName'}|[{'remote_type',232,[{'atom',232,'file'}|[{'atom',232,'name'}|[[]]]]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Options'}|[{'type',233,'list',[{'type',233,'union',[{'type',233,'tuple',[{'atom',233,'includes'}|[{'ann_type',233,[{'var',233,'IncludePath'}|[{'type',233,'list',[{'ann_type',233,[{'var',233,'DirectoryName'}|[{'remote_type',233,[{'atom',233,'file'}|[{'atom',233,'name'}|[[]]]]}]]}]}]]}]]}|[{'type',234,'tuple',[{'atom',234,'macros'}|[{'ann_type',234,[{'var',234,'PredefMacros'}|[{'type',234,'macros',[]}]]}]]}|[{'type',235,'tuple',[{'atom',235,'default_encoding'}|[{'ann_type',235,[{'var',235,'DefEncoding'}|[{'type',235,'source_encoding',[]}]]}]]}|[{'atom',236,'extra'}]]]]}]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Form'}|[{'type',237,'union',[{'remote_type',237,[{'atom',237,'erl_parse'}|[{'atom',237,'abstract_form'}|[[]]]]}|[{'type',237,'tuple',[{'atom',237,'error'}|[{'var',237,'ErrorInfo'}]]}|[{'type',237,'tuple',[{'atom',237,'eof'}|[{'var',237,'Line'}]]}]]]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Line'}|[{'remote_type',238,[{'atom',238,'erl_scan'}|[{'atom',238,'line'}|[[]]]]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'ErrorInfo'}|[{'type',239,'union',[{'remote_type',239,[{'atom',239,'erl_scan'}|[{'atom',239,'error_info'}|[[]]]]}|[{'remote_type',239,[{'atom',239,'erl_parse'}|[{'atom',239,'error_info'}|[[]]]]}]]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Extra'}|[{'type',240,'list',[{'type',240,'tuple',[{'atom',240,'encoding'}|[{'type',240,'union',[{'type',240,'source_encoding',[]}|[{'atom',240,'none'}]]}]]}]}]]]]}|[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'OpenError'}|[{'type',241,'union',[{'remote_type',241,[{'atom',241,'file'}|[{'atom',241,'posix'}|[[]]]]}|[{'atom',241,'badarg'}|[{'atom',241,'system_limit'}]]]}]]]]}]]]]]]]]]}]}],
		%% Line 257
		'spec' =
		    %% Line 257
		    [{{'parse_file',1},[{'type',257,'bounded_fun',[{'type',257,'fun',[{'type',257,'product',[{'var',257,'Epp'}]}|[{'type',257,'list',[{'var',257,'Form'}]}]]}|[[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Epp'}|[{'type',258,'epp_handle',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Form'}|[{'type',259,'union',[{'remote_type',259,[{'atom',259,'erl_parse'}|[{'atom',259,'abstract_form'}|[[]]]]}|[{'type',259,'tuple',[{'atom',259,'error'}|[{'var',259,'ErrorInfo'}]]}|[{'type',259,'tuple',[{'atom',259,'eof'}|[{'var',259,'Line'}]]}]]]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Line'}|[{'remote_type',260,[{'atom',260,'erl_scan'}|[{'atom',260,'line'}|[[]]]]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'ErrorInfo'}|[{'type',261,'union',[{'remote_type',261,[{'atom',261,'erl_scan'}|[{'atom',261,'error_info'}|[[]]]]}|[{'remote_type',261,[{'atom',261,'erl_parse'}|[{'atom',261,'error_info'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'default_encoding',0},[{'type',286,'fun',[{'type',286,'product',[]}|[{'type',286,'source_encoding',[]}]]}]}],
		%% Line 291
		'spec' =
		    %% Line 291
		    [{{'encoding_to_string',1},[{'type',291,'bounded_fun',[{'type',291,'fun',[{'type',291,'product',[{'var',291,'Encoding'}]}|[{'type',291,'string',[]}]]}|[[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Encoding'}|[{'type',292,'source_encoding',[]}]]]]}]]]}]}],
		%% Line 297
		'spec' =
		    %% Line 297
		    [{{'read_encoding',1},[{'type',297,'bounded_fun',[{'type',297,'fun',[{'type',297,'product',[{'var',297,'FileName'}]}|[{'type',297,'union',[{'type',297,'source_encoding',[]}|[{'atom',297,'none'}]]}]]}|[[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'FileName'}|[{'remote_type',298,[{'atom',298,'file'}|[{'atom',298,'name'}|[[]]]]}]]]]}]]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'read_encoding',2},[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'var',303,'FileName'}|[{'var',303,'Options'}]]}|[{'type',303,'union',[{'type',303,'source_encoding',[]}|[{'atom',303,'none'}]]}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'FileName'}|[{'remote_type',304,[{'atom',304,'file'}|[{'atom',304,'name'}|[[]]]]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'Options'}|[{'type',305,'list',[{'var',305,'Option'}]}]]]]}|[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'Option'}|[{'type',306,'tuple',[{'atom',306,'in_comment_only'}|[{'type',306,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 319
		'spec' =
		    %% Line 319
		    [{{'set_encoding',1},[{'type',319,'bounded_fun',[{'type',319,'fun',[{'type',319,'product',[{'var',319,'File'}]}|[{'type',319,'union',[{'type',319,'source_encoding',[]}|[{'atom',319,'none'}]]}]]}|[[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'File'}|[{'remote_type',320,[{'atom',320,'io'}|[{'atom',320,'device'}|[[]]]]}]]]]}]]]}]}],
		%% Line 325
		'spec' =
		    %% Line 325
		    [{{'set_encoding',2},[{'type',325,'bounded_fun',[{'type',325,'fun',[{'type',325,'product',[{'var',325,'File'}|[{'var',325,'Default'}]]}|[{'type',325,'union',[{'type',325,'source_encoding',[]}|[{'atom',325,'none'}]]}]]}|[[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'Default'}|[{'type',326,'source_encoding',[]}]]]]}|[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'File'}|[{'remote_type',327,[{'atom',327,'io'}|[{'atom',327,'device'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 338
		'spec' =
		    %% Line 338
		    [{{'read_encoding_from_binary',1},[{'type',338,'bounded_fun',[{'type',338,'fun',[{'type',338,'product',[{'var',338,'Binary'}]}|[{'type',338,'union',[{'type',338,'source_encoding',[]}|[{'atom',338,'none'}]]}]]}|[[{'type',339,'constraint',[{'atom',339,'is_subtype'}|[[{'var',339,'Binary'}|[{'type',339,'binary',[]}]]]]}]]]}]}],
		%% Line 347
		'spec' =
		    %% Line 347
		    [{{'read_encoding_from_binary',2},[{'type',347,'bounded_fun',[{'type',347,'fun',[{'type',347,'product',[{'var',347,'Binary'}|[{'var',347,'Options'}]]}|[{'type',348,'union',[{'type',348,'source_encoding',[]}|[{'atom',348,'none'}]]}]]}|[[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'Binary'}|[{'type',349,'binary',[]}]]]]}|[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Options'}|[{'type',350,'list',[{'var',350,'Option'}]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'Option'}|[{'type',351,'tuple',[{'atom',351,'in_comment_only'}|[{'type',351,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 369
		'spec' =
		    %% Line 369
		    [{{'read_encoding_from_file',2},[{'type',369,'bounded_fun',[{'type',369,'fun',[{'type',369,'product',[{'var',369,'File'}|[{'var',369,'InComment'}]]}|[{'type',369,'union',[{'type',369,'source_encoding',[]}|[{'atom',369,'none'}]]}]]}|[[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'File'}|[{'remote_type',370,[{'atom',370,'io'}|[{'atom',370,'device'}|[[]]]]}]]]]}|[{'type',371,'constraint',[{'atom',371,'is_subtype'}|[[{'var',371,'InComment'}|[{'type',371,'boolean',[]}]]]]}]]]]}]}]]
'open'/2 =
    %% Line 93
    fun (_cor1,_cor0) ->
	%% Line 94
	apply 'open'/3
	    (_cor1, _cor0, [])
'open'/3 =
    %% Line 104
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    call 'dict':'new'
		()
	in  let <_cor3> =
		call 'dict':'new'
		    ()
	    in  %% Line 105
		apply 'internal_open'/2
		    ([{'name',_cor2}|[{'includes',_cor1}|[{'macros',_cor0}|[]]]], {'epp','undefined',1,0,[],[],[],[],[],_cor4,_cor3,'utf8','false'})
'open'/5 =
    %% Line 107
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    call 'dict':'new'
		()
	in  let <_cor5> =
		call 'dict':'new'
		    ()
	    in  %% Line 108
		apply 'internal_open'/2
		    ([{'name',_cor4}|[{'includes',_cor1}|[{'macros',_cor0}|[]]]], %% Line 109
										  {'epp',_cor3,_cor2,0,[],[],[],[],[],_cor6,_cor5,'utf8','true'})
'open'/1 =
    %% Line 122
    fun (_cor0) ->
	let <_cor2> =
	    call 'dict':'new'
		()
	in  let <_cor1> =
		call 'dict':'new'
		    ()
	    in  %% Line 123
		apply 'internal_open'/2
		    (_cor0, {'epp','undefined',1,0,[],[],[],[],[],_cor2,_cor1,'utf8','false'})
'internal_open'/2 =
    %% Line 125
    fun (_cor1,_cor0) ->
	%% Line 126
	case call 'proplists':'get_value'
		 ('name', _cor1) of
	  %% Line 127
	  <'undefined'> when 'true' ->
	      %% Line 128
	      call 'erlang':'error'
		  ('badarg')
	  %% Line 129
	  <Name> when 'true' ->
	      let <Self> =
		  %% Line 130
		  call 'erlang':'self'
		      ()
	      in  let <_cor3> =
		      %% Line 131
		      ( fun () ->
			    apply 'server'/4
				(Self, Name, _cor1, _cor0)
			-| [{'id',{0,0,'-internal_open/2-fun-0-'}}] )
		  in  let <Epp> =
			  %% Line 131
			  call 'erlang':'spawn'
			      (_cor3)
		      in  %% Line 132
			  case apply 'epp_request'/1
				   (Epp) of
			    %% Line 133
			    <{'ok',Pid,Encoding}> when 'true' ->
				%% Line 134
				case call 'proplists':'get_bool'
					 ('extra', _cor1) of
				  %% Line 135
				  <'true'> when 'true' ->
				      {'ok',Pid,[{'encoding',Encoding}|[]]}
				  %% Line 136
				  <'false'> when 'true' ->
				      {'ok',Pid}
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
			    %% Line 138
			    <Other> when 'true' ->
				%% Line 139
				Other
			  end
	end
'close'/1 =
    %% Line 146
    fun (_cor0) ->
	let <Ref> =
	    %% Line 149
	    call 'erlang':'monitor'
		('process', _cor0)
	in  let <R> =
		%% Line 150
		apply 'epp_request'/2
		    (_cor0, 'close')
	    in  do  %% Line 151
		    receive
		      <{'DOWN',_cor4,_cor5,_cor6,_cor7}>
			  when call 'erlang':'=:='
				(_cor4,
				 Ref) ->
			  'ok'
		    after 'infinity' ->
		      'ok'
		    %% Line 152
		    R
'scan_erl_form'/1 =
    %% Line 154
    fun (_cor0) ->
	%% Line 155
	apply 'epp_request'/2
	    (_cor0, 'scan_erl_form')
'parse_erl_form'/1 =
    %% Line 164
    fun (_cor0) ->
	%% Line 165
	case apply 'epp_request'/2
		 (_cor0, 'scan_erl_form') of
	  %% Line 166
	  <{'ok',Toks}> when 'true' ->
	      %% Line 167
	      call 'erl_parse':'parse_form'
		  (Toks)
	  %% Line 168
	  <Other> when 'true' ->
	      %% Line 169
	      Other
	end
'macro_defs'/1 =
    %% Line 172
    fun (_cor0) ->
	%% Line 173
	apply 'epp_request'/2
	    (_cor0, 'macro_defs')
'format_error'/1 =
    %% Line 181
    fun (_cor0) ->
	case _cor0 of
	  <'cannot_parse'> when 'true' ->
	      %% Line 182
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[112|[97|[114|[115|[101|[32|[102|[105|[108|[101|[44|[32|[103|[105|[118|[105|[110|[103|[32|[117|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 183
	  <{'bad',W}> when 'true' ->
	      %% Line 184
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]], [W|[]])
	  %% Line 185
	  <'missing_parenthesis'> when 'true' ->
	      %% Line 186
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[100|[101|[102|[105|[110|[101|[58|[32|[109|[105|[115|[115|[105|[110|[103|[32|[99|[108|[111|[115|[105|[110|[103|[32|[114|[105|[103|[104|[116|[32|[112|[97|[114|[101|[110|[116|[104|[101|[115|[105|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 187
	  <'premature_end'> when 'true' ->
	      %% Line 188
	      [112|[114|[101|[109|[97|[116|[117|[114|[101|[32|[101|[110|[100]]]]]]]]]]]]]
	  %% Line 189
	  <{'call',What}> when 'true' ->
	      %% Line 190
	      call 'io_lib':'format'
		  ([105|[108|[108|[101|[103|[97|[108|[32|[109|[97|[99|[114|[111|[32|[99|[97|[108|[108|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]], [What|[]])
	  %% Line 191
	  <{'undefined',M,'none'}> when 'true' ->
	      %% Line 192
	      call 'io_lib':'format'
		  ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 193
	  <{'undefined',M,A}> when 'true' ->
	      %% Line 194
	      call 'io_lib':'format'
		  ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[47|[126|[112|[39]]]]]]]]]]]]]]]]]]]]]]], [M|[A|[]]])
	  %% Line 195
	  <{'depth',What}> when 'true' ->
	      %% Line 196
	      call 'io_lib':'format'
		  ([126|[115|[32|[116|[111|[111|[32|[100|[101|[101|[112]]]]]]]]]]], [What|[]])
	  %% Line 197
	  <{'mismatch',M}> when 'true' ->
	      %% Line 198
	      call 'io_lib':'format'
		  ([97|[114|[103|[117|[109|[101|[110|[116|[32|[109|[105|[115|[109|[97|[116|[99|[104|[32|[102|[111|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 199
	  <{'arg_error',M}> when 'true' ->
	      %% Line 200
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[102|[111|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 201
	  <{'redefine',M}> when 'true' ->
	      %% Line 202
	      call 'io_lib':'format'
		  ([114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 203
	  <{'redefine_predef',M}> when 'true' ->
	      %% Line 204
	      call 'io_lib':'format'
		  ([114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[112|[114|[101|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 205
	  <{'circular',M,'none'}> when 'true' ->
	      %% Line 206
	      call 'io_lib':'format'
		  ([99|[105|[114|[99|[117|[108|[97|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 207
	  <{'circular',M,A}> when 'true' ->
	      %% Line 208
	      call 'io_lib':'format'
		  ([99|[105|[114|[99|[117|[108|[97|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[47|[126|[112|[39]]]]]]]]]]]]]]]]]]]]]], [M|[A|[]]])
	  %% Line 209
	  <{'include',W,F}> when 'true' ->
	      %% Line 210
	      call 'io_lib':'format'
		  ([99|[97|[110|[39|[116|[32|[102|[105|[110|[100|[32|[105|[110|[99|[108|[117|[100|[101|[32|[126|[115|[32|[34|[126|[115|[34]]]]]]]]]]]]]]]]]]]]]]]]]], [W|[F|[]]])
	  %% Line 211
	  <{'illegal',How,What}> when 'true' ->
	      %% Line 212
	      call 'io_lib':'format'
		  ([126|[115|[32|[39|[45|[126|[115|[39]]]]]]]], [How|[What|[]]])
	  %% Line 213
	  <{'NYI',What}> when 'true' ->
	      %% Line 214
	      call 'io_lib':'format'
		  ([110|[111|[116|[32|[121|[101|[116|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]]], [What|[]])
	  %% Line 215
	  <E> when 'true' ->
	      call 'file':'format_error'
		  (E)
	end
'parse_file'/3 =
    %% Line 227
    fun (_cor2,_cor1,_cor0) ->
	%% Line 228
	apply 'parse_file'/2
	    (_cor2, [{'includes',_cor1}|[{'macros',_cor0}|[]]])
'parse_file'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    call 'dict':'new'
		()
	in  let <_cor2> =
		call 'dict':'new'
		    ()
	    in  %% Line 244
		case apply 'internal_open'/2
			 ([{'name',_cor1}|_cor0], {'epp','undefined',1,0,[],[],[],[],[],_cor3,_cor2,'utf8','false'}) of
		  %% Line 245
		  <{'ok',Epp}> when 'true' ->
		      let <Forms> =
			  %% Line 246
			  apply 'parse_file'/1
			      (Epp)
		      in  do  %% Line 247
			      apply 'close'/1
				  (Epp)
			      %% Line 248
			      {'ok',Forms}
		  %% Line 249
		  <{'ok',Epp,Extra}> when 'true' ->
		      let <Forms> =
			  %% Line 250
			  apply 'parse_file'/1
			      (Epp)
		      in  do  %% Line 251
			      apply 'close'/1
				  (Epp)
			      %% Line 252
			      {'ok',Forms,Extra}
		  %% Line 253
		  <{'error',E}> when 'true' ->
		      %% Line 254
		      {'error',E}
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
'parse_file'/1 =
    %% Line 263
    fun (_cor0) ->
	%% Line 264
	case apply 'parse_erl_form'/1
		 (_cor0) of
	  %% Line 265
	  <{'ok',Form}> when 'true' ->
	      %% Line 266
	      case Form of
		%% Line 267
		<{'attribute',La,'record',{Record,Fields}}> when 'true' ->
		    %% Line 268
		    case apply 'normalize_typed_record_fields'/1
			     (Fields) of
		      %% Line 269
		      <{'typed',NewFields}> when 'true' ->
			  let <_cor1> =
			      %% Line 273
			      apply 'parse_file'/1
				  (_cor0)
			  in  %% Line 270
			      [{'attribute',La,'record',{Record,NewFields}}|%% Line 271
									    [{'attribute',La,'type',%% Line 272
												    {{'record',Record},Fields,[]}}|_cor1]]
		      %% Line 274
		      <'not_typed'> when 'true' ->
			  let <_cor2> =
			      %% Line 275
			      apply 'parse_file'/1
				  (_cor0)
			  in  %% Line 275
			      [Form|_cor2]
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 277
		<_cor9> when 'true' ->
		    let <_cor4> =
			%% Line 278
			apply 'parse_file'/1
			    (_cor0)
		    in  %% Line 278
			[Form|_cor4]
	      end
	  %% Line 280
	  <{'error',E}> when 'true' ->
	      let <_cor6> =
		  %% Line 281
		  apply 'parse_file'/1
		      (_cor0)
	      in  %% Line 281
		  [{'error',E}|_cor6]
	  %% Line 282
	  <{'eof',Location}> when 'true' ->
	      %% Line 283
	      [{'eof',Location}|[]]
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'default_encoding'/0 =
    %% Line 288
    fun () ->
	%% Line 289
	'utf8'
'encoding_to_string'/1 =
    %% Line 294
    fun (_cor0) ->
	case _cor0 of
	  <'latin1'> when 'true' ->
	      [99|[111|[100|[105|[110|[103|[58|[32|[108|[97|[116|[105|[110|[45|[49]]]]]]]]]]]]]]]
	  %% Line 295
	  <'utf8'> when 'true' ->
	      [99|[111|[100|[105|[110|[103|[58|[32|[117|[116|[102|[45|[56]]]]]]]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'encoding_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'read_encoding'/1 =
    %% Line 300
    fun (_cor0) ->
	%% Line 301
	apply 'read_encoding'/2
	    (_cor0, [])
'read_encoding'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	let <InComment> =
	    %% Line 309
	    call 'proplists':'get_value'
		('in_comment_only', _cor0, 'true')
	in  %% Line 310
	    case call 'file':'open'
		     (_cor1, ['read']) of
	      %% Line 311
	      <{'ok',File}> when 'true' ->
		  %% Line 312
		  letrec
		      'after$^0'/0 =
			  fun () ->
			      let <_cor11> =
				  %% Line 313
				  call 'file':'close'
				      (File)
			      in  %% Line 313
				  case _cor11 of
				    <'ok'> when 'true' ->
					( _cor11
					  -| ['compiler_generated'] )
				    ( <_cor3> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor3})
				      -| ['compiler_generated'] )
				  end
		  in  try
			  apply 'read_encoding_from_file'/2
			      (File, InComment)
		      of <_cor4> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      _cor4
		      catch <_cor7,_cor6,_cor5> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      primop 'raise'
				  (_cor5, _cor6)
	      %% Line 315
	      <_X_Error> when 'true' ->
		  %% Line 316
		  'none'
	    end
'set_encoding'/1 =
    %% Line 322
    fun (_cor0) ->
	%% Line 323
	apply 'set_encoding'/2
	    (_cor0, 'utf8')
'set_encoding'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	let <Encoding> =
	    %% Line 330
	    apply 'read_encoding_from_file'/2
		(_cor1, 'true')
	in  let <_cor4> =
		%% Line 331
		case Encoding of
		  %% Line 332
		  <'none'> when 'true' ->
		      _cor0
		  %% Line 333
		  <_cor9> when 'true' ->
		      Encoding
		end
	    in  %% Line 335
		case call 'io':'setopts'
			 (_cor1, [{'encoding',_cor4}|[]]) of
		  <'ok'> when 'true' ->
		      %% Line 336
		      Encoding
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor6})
		    -| ['compiler_generated'] )
		end
'read_encoding_from_binary'/1 =
    %% Line 344
    fun (_cor0) ->
	%% Line 345
	apply 'read_encoding_from_binary'/2
	    (_cor0, [])
'read_encoding_from_binary'/2 =
    %% Line 353
    fun (_cor1,_cor0) ->
	let <InComment> =
	    %% Line 354
	    call 'proplists':'get_value'
		('in_comment_only', _cor0, 'true')
	in  %% Line 355
	    try
		let <_cor3> =
		    %% Line 356
		    apply 'fake_reader'/1
			(0)
		in  %% Line 356
		    apply 'com_nl'/4
			(_cor1, _cor3, 0, InComment)
	    of <_cor4> ->
		_cor4
	    catch <_cor7,_cor6,_cor5> ->
		case <_cor7,_cor6,_cor5> of
		  %% Line 358
		  <'throw','no',_cor10> when 'true' ->
		      %% Line 359
		      'none'
		  ( <_cor7,_cor6,_cor5> when 'true' ->
			primop 'raise'
			    (_cor5, _cor6)
		    -| ['compiler_generated'] )
		end
'fake_reader'/1 =
    %% Line 362
    fun (_cor0) ->
	%% Line 363
	( fun () ->
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (_cor0,
			   16) ->
		    %% Line 364
		    call 'erlang':'throw'
			('no')
		%% Line 365
		<> when 'true' ->
		    let <_cor1> =
			%% Line 366
			call 'erlang':'+'
			    (_cor0, 1)
		    in  let <_cor2> =
			    %% Line 366
			    apply 'fake_reader'/1
				(_cor1)
			in  %% Line 366
			    {#{}#,_cor2}
	      end
	  -| [{'id',{0,0,'-fake_reader/1-fun-0-'}}] )
'read_encoding_from_file'/2 =
    %% Line 373
    fun (_cor1,_cor0) ->
	%% Line 374
	case call 'file':'position'
		 (_cor1, 'cur') of
	  <{'ok',Pos0}> when 'true' ->
	      let <Opts> =
		  %% Line 375
		  call 'io':'getopts'
		      (_cor1)
	      in  let <Encoding0> =
		      %% Line 376
		      call 'lists':'keyfind'
			  ('encoding', 1, Opts)
		  in  let <Binary0> =
			  %% Line 377
			  call 'lists':'keyfind'
			      ('binary', 1, Opts)
		      in  %% Line 378
			  case call 'io':'setopts'
				   (_cor1, ['binary'|[{'encoding','latin1'}]]) of
			    <'ok'> when 'true' ->
				%% Line 379
				letrec
				    'after$^0'/0 =
					fun () ->
					    %% Line 386
					    case call 'file':'position'
						     (_cor1, Pos0) of
					      <{'ok',_cor21}>
						  when call 'erlang':'=:='
							(_cor21,
							 Pos0) ->
						  let <_cor22> =
						      %% Line 387
						      call 'io':'setopts'
							  (_cor1, [Binary0|[Encoding0|[]]])
						  in  %% Line 387
						      case _cor22 of
							<'ok'> when 'true' ->
							    ( _cor22
							      -| ['compiler_generated'] )
							( <_cor14> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor14})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor13> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor13})
						-| ['compiler_generated'] )
					    end
				in  try
					try
					    let <_cor7> =
						%% Line 380
						apply 'reader'/2
						    (_cor1, 0)
					    in  %% Line 380
						case apply _cor7
							 () of
						  <{B,Fun}> when 'true' ->
						      %% Line 381
						      apply 'com_nl'/4
							  (B, Fun, 0, _cor0)
						  ( <_cor8> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor8})
						    -| ['compiler_generated'] )
						end
					of <_cor9> ->
					    _cor9
					catch <_cor12,_cor11,_cor10> ->
					    case <_cor12,_cor11,_cor10> of
					      %% Line 383
					      <'throw','no',_cor23> when 'true' ->
						  %% Line 384
						  'none'
					      ( <_cor12,_cor11,_cor10> when 'true' ->
						    primop 'raise'
							(_cor10, _cor11)
						-| ['compiler_generated'] )
					    end
				    of <_cor15> ->
					do  ( apply 'after$^0'/0
						  ()
					      -| ['compiler_generated'] )
					    _cor15
				    catch <_cor18,_cor17,_cor16> ->
					do  ( apply 'after$^0'/0
						  ()
					      -| ['compiler_generated'] )
					    primop 'raise'
						(_cor16, _cor17)
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'reader'/2 =
    %% Line 390
    fun (_cor1,_cor0) ->
	%% Line 391
	( fun () ->
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (_cor0,
			   16) ->
		    %% Line 392
		    call 'erlang':'throw'
			('no')
		%% Line 393
		<> when 'true' ->
		    %% Line 394
		    case call 'file':'read'
			     (_cor1, 32) of
		      %% Line 395
		      <'eof'> when 'true' ->
			  let <_cor2> =
			      %% Line 396
			      call 'erlang':'+'
				  (_cor0, 1)
			  in  let <_cor3> =
				  %% Line 396
				  apply 'reader'/2
				      (_cor1, _cor2)
			      in  %% Line 396
				  {#{}#,_cor3}
		      %% Line 397
		      <{'ok',Bin}> when 'true' ->
			  let <_cor4> =
			      %% Line 398
			      call 'erlang':'+'
				  (_cor0, 1)
			  in  let <_cor5> =
				  %% Line 398
				  apply 'reader'/2
				      (_cor1, _cor4)
			      in  %% Line 398
				  {Bin,_cor5}
		      %% Line 399
		      <{'error',_cor9}> when 'true' ->
			  %% Line 400
			  call 'erlang':'throw'
			      ('no')
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
	      end
	  -| [{'id',{0,0,'-reader/2-fun-0-'}}] )
'com_nl'/4 =
    %% Line 404
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor8,_cor9,2,_cor10> when 'true' ->
	      %% Line 405
	      call 'erlang':'throw'
		  ('no')
	  %% Line 406
	  <B,Fun,N,Com = 'false'> when 'true' ->
	      %% Line 407
	      apply 'com_c'/4
		  (B, Fun, N, Com)
	  %% Line 408
	  <B,Fun,N,Com = 'true'> when 'true' ->
	      %% Line 409
	      apply 'com'/4
		  (B, Fun, N, Com)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'com_nl',4}}] )
	    -| ['compiler_generated'] )
	end
'com'/4 =
    %% Line 411
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<10>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      let <_cor4> =
		  %% Line 412
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 412
		  apply 'com_nl'/4
		      (B, Fun, _cor4, Com)
	  %% Line 413
	  <#{#<37>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 414
	      apply 'com_c'/4
		  (B, Fun, N, Com)
	  %% Line 415
	  <#{#<_cor10>(1,8,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 416
	      apply 'com'/4
		  (B, Fun, N, Com)
	  %% Line 417
	  <#{}#,Fun,N,Com> when 'true' ->
	      %% Line 418
	      case apply Fun
		       () of
		<{B,Fun1}> when 'true' ->
		    %% Line 419
		    apply 'com'/4
			(B, Fun1, N, Com)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor9)
		    ( primop 'match_fail'
			  ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		      -| [{'function_name',{'com',4}}] )
	    -| ['compiler_generated'] )
	end
'com_c'/4 =
    %% Line 421
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<99>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 422
	      apply 'com_oding'/4
		  (B, Fun, N, Com)
	  %% Line 423
	  <#{#<10>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      let <_cor4> =
		  %% Line 424
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 424
		  apply 'com_nl'/4
		      (B, Fun, _cor4, Com)
	  %% Line 425
	  <#{#<_cor10>(1,8,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 426
	      apply 'com_c'/4
		  (B, Fun, N, Com)
	  %% Line 427
	  <#{}#,Fun,N,Com> when 'true' ->
	      %% Line 428
	      case apply Fun
		       () of
		<{B,Fun1}> when 'true' ->
		    %% Line 429
		    apply 'com_c'/4
			(B, Fun1, N, Com)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor9)
		    ( primop 'match_fail'
			  ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		      -| [{'function_name',{'com_c',4}}] )
	    -| ['compiler_generated'] )
	end
'com_oding'/4 =
    %% Line 431
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <#{#<111>(8,1,'integer',['unsigned'|['big']]),
	     #<100>(8,1,'integer',['unsigned'|['big']]),
	     #<105>(8,1,'integer',['unsigned'|['big']]),
	     #<110>(8,1,'integer',['unsigned'|['big']]),
	     #<103>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 432
	      apply 'com_sep'/4
		  (B, Fun, N, Com)
	  %% Line 433
	  <B,Fun,N,Com>
	      when try
		    let <_cor5> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'>='
			    (_cor5, 5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 434
	      apply 'com_c'/4
		  (B, Fun, N, Com)
	  %% Line 435
	  <B,Fun,N,Com> when 'true' ->
	      %% Line 436
	      case apply Fun
		       () of
		<{B1,Fun1}> when 'true' ->
		    let <_cor7> =
			%% Line 437
			call 'erlang':'list_to_binary'
			    ([B|[B1|[]]])
		    in  %% Line 437
			apply 'com_oding'/4
			    (_cor7, Fun1, N, Com)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'com_sep'/4 =
    %% Line 439
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<58>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 440
	      apply 'com_space'/4
		  (B, Fun, N, Com)
	  %% Line 441
	  <#{#<61>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 442
	      apply 'com_space'/4
		  (B, Fun, N, Com)
	  %% Line 443
	  <#{#<32>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 444
	      apply 'com_sep'/4
		  (B, Fun, N, Com)
	  %% Line 445
	  <#{}#,Fun,N,Com> when 'true' ->
	      %% Line 446
	      case apply Fun
		       () of
		<{B,Fun1}> when 'true' ->
		    %% Line 447
		    apply 'com_sep'/4
			(B, Fun1, N, Com)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 448
	  <B,Fun,N,Com> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (B)
		  %% Line 449
		  apply 'com_c'/4
		      (B, Fun, N, Com)
	end
'com_space'/4 =
    %% Line 451
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<32>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' ->
	      %% Line 452
	      apply 'com_space'/4
		  (B, Fun, N, Com)
	  %% Line 453
	  <#{}#,Fun,N,Com> when 'true' ->
	      %% Line 454
	      case apply Fun
		       () of
		<{B,Fun1}> when 'true' ->
		    %% Line 455
		    apply 'com_space'/4
			(B, Fun1, N, Com)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 456
	  <B,Fun,N,_X_Com> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (B)
		  %% Line 457
		  apply 'com_enc'/5
		      (B, Fun, N, [], [])
	end
'com_enc'/5 =
    %% Line 459
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor4
		-| ['reuse_for_context'] ),_cor3,_cor2,_cor1,_cor0> of
	  <#{#<C>(1,8,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,L,Ps>
	      when let <_cor7> =
		    let <_cor5> =
			call 'erlang':'>='
			    (C, 97)
		    in  let <_cor6> =
			    call 'erlang':'=<'
				(C, 122)
			in  call 'erlang':'and'
				(_cor5, _cor6)
		in  let <_cor10> =
			let <_cor8> =
			    %% Line 460
			    call 'erlang':'>='
				(C, 65)
			in  let <_cor9> =
				%% Line 460
				call 'erlang':'=<'
				    (C, 90)
			    in  %% Line 460
				call 'erlang':'and'
				    (_cor8, _cor9)
		    in  let <_cor13> =
			    let <_cor11> =
				%% Line 461
				call 'erlang':'>='
				    (C, 48)
			    in  let <_cor12> =
				    %% Line 461
				    call 'erlang':'=<'
					(C, 57)
				in  %% Line 461
				    call 'erlang':'and'
					(_cor11, _cor12)
			in  let <_cor14> =
				%% Line 460
				call 'erlang':'or'
				    (_cor10, _cor13)
			    in  call 'erlang':'or'
				    (_cor7, _cor14) ->
	      %% Line 462
	      apply 'com_enc'/5
		  (B, Fun, N, [C|L], Ps)
	  %% Line 463
	  <#{}#,Fun,N,L,Ps> when 'true' ->
	      %% Line 464
	      case apply Fun
		       () of
		%% Line 465
		<{#{}#,_cor21}> when 'true' ->
		    %% Line 466
		    apply 'com_enc_end'/1
			([L|Ps])
		%% Line 467
		<{B,Fun1}> when 'true' ->
		    %% Line 468
		    apply 'com_enc'/5
			(B, Fun1, N, L, Ps)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 470
	  <#{#<45>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Fun,N,L,Ps> when 'true' ->
	      %% Line 471
	      apply 'com_enc'/5
		  (B, Fun, N, [], [L|Ps])
	  %% Line 472
	  <_X_B,_X_Fun,_X_N,L,Ps> when 'true' ->
	      %% Line 473
	      apply 'com_enc_end'/1
		  ([L|Ps])
	end
'com_enc_end'/1 =
    %% Line 475
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 476
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[P|_cor2]> when 'true' ->
				let <_cor4> =
				    call 'string':'to_lower'
					(P)
				in  let <_cor5> =
					call 'lists':'reverse'
					    (_cor4)
				    in  let <_cor6> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [_cor5|_cor6]
					      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <Ps> =
		%% Line 476
		call 'lists':'reverse'
		    (_cor7)
	    in  %% Line 477
		apply 'com_encoding'/1
		    (Ps)
'com_encoding'/1 =
    %% Line 479
    fun (_cor0) ->
	case _cor0 of
	  <[[108|[97|[116|[105|[110]]]]]|[[49]|_cor2]]> when 'true' ->
	      %% Line 480
	      'latin1'
	  %% Line 481
	  <[[117|[116|[102]]]|[[56]|_cor3]]> when 'true' ->
	      %% Line 482
	      'utf8'
	  %% Line 483
	  <_cor4> when 'true' ->
	      %% Line 484
	      call 'erlang':'throw'
		  ('no')
	end
'normalize_typed_record_fields'/1 =
    %% Line 486
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 487
	      {'typed',[]}
	  %% Line 488
	  <Fields> when 'true' ->
	      %% Line 489
	      apply 'normalize_typed_record_fields'/3
		  (Fields, [], 'false')
	end
'normalize_typed_record_fields'/3 =
    %% Line 491
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],NewFields,Typed> when 'true' ->
	      %% Line 492
	      case Typed of
		%% Line 493
		<'true'> when 'true' ->
		    let <_cor3> =
			call 'lists':'reverse'
			    (NewFields)
		    in  {'typed',_cor3}
		%% Line 494
		<'false'> when 'true' ->
		    'not_typed'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 496
	  <[{'typed_record_field',Field,_cor8}|Rest],%% Line 497
						     NewFields,%% Line 497
							       _X_Typed> when 'true' ->
	      %% Line 498
	      apply 'normalize_typed_record_fields'/3
		  (Rest, [Field|NewFields], 'true')
	  %% Line 499
	  <[Field|Rest],NewFields,Typed> when 'true' ->
	      %% Line 500
	      apply 'normalize_typed_record_fields'/3
		  (Rest, [Field|NewFields], Typed)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'normalize_typed_record_fields',3}}] )
	    -| ['compiler_generated'] )
	end
'restore_typed_record_fields'/1 =
    %% Line 502
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 503
	      []
	  %% Line 504
	  <[{'attribute',La,'record',{Record,_X_NewFields}}|%% Line 505
							    [{'attribute',_cor5,'type',{{'record',_cor6},Fields,[]}}|%% Line 506
														     Forms]]>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor5, %% Line 505
				La)
		in  let <_cor8> =
			call 'erlang':'=:='
			    (_cor6, %% Line 505
				    Record)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor1> =
		  %% Line 508
		  apply 'restore_typed_record_fields'/1
		      (Forms)
	      in  %% Line 507
		  [{'attribute',La,'record',{Record,Fields}}|_cor1]
	  %% Line 509
	  <[{'attribute',La,'type',{{'record',Record},Fields,[]}}|%% Line 510
								  Forms]> when 'true' ->
	      let <_cor2> =
		  %% Line 514
		  apply 'restore_typed_record_fields'/1
		      (Forms)
	      in  %% Line 513
		  [{'attribute',La,'record',{Record,Fields}}|_cor2]
	  %% Line 515
	  <[Form|Forms]> when 'true' ->
	      let <_cor3> =
		  %% Line 516
		  apply 'restore_typed_record_fields'/1
		      (Forms)
	      in  %% Line 516
		  [Form|_cor3]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'restore_typed_record_fields',1}}] )
	    -| ['compiler_generated'] )
	end
'server'/4 =
    %% Line 518
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Pid,Name,Options,St = {'epp',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,PreOpened}> when 'true' ->
	      do  %% Line 519
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 520
		  case PreOpened of
		    %% Line 521
		    <'false'> when 'true' ->
			%% Line 522
			case call 'file':'open'
				 (Name, ['read']) of
			  %% Line 523
			  <{'ok',File}> when 'true' ->
			      let <_cor6> =
				  %% Line 524
				  call 'erlang':'setelement'
				      (2, St, File)
			      in  %% Line 524
				  apply 'init_server'/4
				      (Pid, Name, Options, _cor6)
			  %% Line 525
			  <{'error',E}> when 'true' ->
			      %% Line 526
			      apply 'epp_reply'/2
				  (Pid, {'error',E})
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    %% Line 528
		    <'true'> when 'true' ->
			%% Line 529
			apply 'init_server'/4
			    (Pid, Name, Options, St)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'server',4}}] )
	    -| ['compiler_generated'] )
	end
'init_server'/4 =
    %% Line 532
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Pdm> =
	    %% Line 533
	    call 'proplists':'get_value'
		('macros', _cor1, [])
	in  let <Ms0> =
		%% Line 534
		apply 'predef_macros'/1
		    (_cor2)
	    in  %% Line 535
		case apply 'user_predef'/2
			 (Pdm, Ms0) of
		  %% Line 536
		  <{'ok',Ms1}> when 'true' ->
		      %% Line 537
		      case _cor0 of
			<{'epp',File,AtLocation,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
			    let <DefEncoding> =
				%% Line 538
				call 'proplists':'get_value'
				    ('default_encoding', _cor1, %% Line 539
								'utf8')
			    in  let <Encoding> =
				    %% Line 540
				    apply 'set_encoding'/2
					(File, DefEncoding)
				in  let <_cor9> =
					%% Line 541
					call 'erlang':'self'
					    ()
				    in  do  %% Line 541
					    apply 'epp_reply'/2
						(_cor3, {'ok',_cor9,Encoding})
					    let <_cor10> =
						%% Line 544
						call 'filename':'dirname'
						    (_cor2)
					    in  let <_cor11> =
						    %% Line 545
						    call 'proplists':'get_value'
							('includes', _cor1, [])
						in  let <Path> =
							%% Line 544
							[_cor10|_cor11]
						    in  let <_cor14> =
							    %% Line 548
							    call 'erlang':'setelement'
								(12, _cor0, DefEncoding)
							in  let <_cor15> =
								%% Line 547
								call 'erlang':'setelement'
								    (10, _cor14, Ms1)
							    in  let <_cor16> =
								    %% Line 547
								    call 'erlang':'setelement'
									(9, _cor15, Path)
								in  let <_cor17> =
									%% Line 546
									call 'erlang':'setelement'
									    (6, _cor16, _cor2)
								    in  let <_cor18> =
									    %% Line 546
									    call 'erlang':'setelement'
										(5, _cor17, _cor2)
									in  let <_cor20> =
										%% Line 546
										call 'erlang':'setelement'
										    (4, _cor18, 0)
									    in  let <From> =
										    %% Line 549
										    apply 'wait_request'/1
											(_cor20)
										in  do  %% Line 550
											apply 'enter_file_reply'/4
											    (From, _cor2, AtLocation, AtLocation)
											%% Line 551
											apply 'wait_req_scan'/1
											    (_cor20)
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  %% Line 552
		  <{'error',E}> when 'true' ->
		      %% Line 553
		      apply 'epp_reply'/2
			  (_cor3, {'error',E})
		  ( <_cor23> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor23})
		    -| ['compiler_generated'] )
		end
'predef_macros'/1 =
    %% Line 560
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 561
	    call 'erlang':'system_info'
		('machine')
	in  let <Machine> =
		%% Line 561
		call 'erlang':'list_to_atom'
		    (_cor1)
	    in  %% Line 562
		call 'dict':'from_list'
		    ([%% Line 563
		      {{'atom','FILE'},{'none',[{'string',1,_cor0}|[]]}}|%% Line 564
									 [{{'atom','LINE'},{'none',[{'integer',1,1}]}}|%% Line 565
														       [{{'atom','MODULE'},'undefined'}|%% Line 566
																			[{{'atom','MODULE_STRING'},'undefined'}|%% Line 567
																								[{{'atom','BASE_MODULE'},'undefined'}|%% Line 568
																												      [{{'atom','BASE_MODULE_STRING'},'undefined'}|%% Line 569
																																		   [{{'atom','MACHINE'},{'none',[{'atom',1,Machine}|[]]}}|%% Line 570
																																									  [{{'atom',Machine},{'none',[{'atom',1,'true'}]}}|%% Line 571
																																															   []]]]]]]]])
'user_predef'/2 =
    %% Line 578
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{M,Val,'redefine'}|Pdm],Ms>
	      when call 'erlang':'is_atom'
		    (M) ->
	      let <_cor2> =
		  %% Line 579
		  call 'erl_parse':'abstract'
		      (Val)
	      in  let <Exp> =
		      %% Line 579
		      call 'erl_parse':'tokens'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 580
			  call 'dict':'store'
			      ({'atom',M}, {'none',Exp}, Ms)
		      in  %% Line 580
			  apply 'user_predef'/2
			      (Pdm, _cor4)
	  %% Line 581
	  <[{M,Val}|Pdm],Ms>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 582
	      case call 'dict':'find'
		       ({'atom',M}, Ms) of
		%% Line 583
		<{'ok',_X_Defs}>
		    when call 'erlang':'is_list'
			  (_X_Defs) ->
		    %% Line 584
		    {'error',{'redefine',M}}
		%% Line 585
		<{'ok',_X_Def}> when 'true' ->
		    %% Line 586
		    {'error',{'redefine_predef',M}}
		%% Line 587
		<'error'> when 'true' ->
		    let <_cor5> =
			%% Line 588
			call 'erl_parse':'abstract'
			    (Val)
		    in  let <Exp> =
			    %% Line 588
			    call 'erl_parse':'tokens'
				(_cor5)
			in  let <_cor7> =
				%% Line 589
				call 'dict':'store'
				    ({'atom',M}, [{'none',{'none',Exp}}|[]], Ms)
			    in  %% Line 589
				apply 'user_predef'/2
				    (Pdm, _cor7)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 591
	  <[M|Pdm],Ms>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 592
	      case call 'dict':'find'
		       ({'atom',M}, Ms) of
		%% Line 593
		<{'ok',_X_Defs}>
		    when call 'erlang':'is_list'
			  (_X_Defs) ->
		    %% Line 594
		    {'error',{'redefine',M}}
		%% Line 595
		<{'ok',_X_Def}> when 'true' ->
		    %% Line 596
		    {'error',{'redefine_predef',M}}
		%% Line 597
		<'error'> when 'true' ->
		    let <_cor9> =
			%% Line 599
			call 'dict':'store'
			    ({'atom',M}, [{'none',{'none',[{'atom',1,'true'}]}}], Ms)
		    in  %% Line 598
			apply 'user_predef'/2
			    (Pdm, _cor9)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 601
	  <[Md|_X_Pdm],_X_Ms> when 'true' ->
	      {'error',{'bad',Md}}
	  %% Line 602
	  <[],Ms> when 'true' ->
	      {'ok',Ms}
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'user_predef',2}}] )
	    -| ['compiler_generated'] )
	end
'wait_request'/1 =
    %% Line 610
    fun (_cor0) ->
	%% Line 611
	receive
	  %% Line 612
	  <{'epp_request',From,'scan_erl_form'}> when 'true' ->
	      From
	  %% Line 613
	  <{'epp_request',From,'macro_defs'}> when 'true' ->
	      %% Line 614
	      ( case _cor0 of
		  ( <( {'epp',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_rec2,_cor13,_cor14,_cor15}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor3> =
			    call 'dict':'to_list'
				(_rec2)
			in  do  apply 'epp_reply'/2
				    (From, _cor3)
				%% Line 615
				apply 'wait_request'/1
				    (_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 616
	  <{'epp_request',From,'close'}> when 'true' ->
	      do  %% Line 617
		  apply 'close_file'/1
		      (_cor0)
		  do  %% Line 618
		      apply 'epp_reply'/2
			  (From, 'ok')
		      %% Line 619
		      call 'erlang':'exit'
			  ('normal')
	  %% Line 620
	  <{'EXIT',_cor17,R}> when 'true' ->
	      %% Line 621
	      call 'erlang':'exit'
		  (R)
	  %% Line 622
	  <Other> when 'true' ->
	      do  %% Line 623
		  call 'io':'fwrite'
		      ([69|[112|[112|[58|[32|[117|[110|[107|[110|[111|[119|[110|[32|[39|[126|[119|[39|[10]]]]]]]]]]]]]]]]]], [Other|[]])
		  %% Line 624
		  apply 'wait_request'/1
		      (_cor0)
	after 'infinity' ->
	  'true'
'close_file'/1 =
    %% Line 627
    fun (_cor0) ->
	case _cor0 of
	  <{'epp',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,'true'}> when 'true' ->
	      %% Line 628
	      'ok'
	  %% Line 629
	  <{'epp',File,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,'false'}> when 'true' ->
	      let <_cor24> =
		  %% Line 630
		  call 'file':'close'
		      (File)
	      in  %% Line 630
		  case _cor24 of
		    <'ok'> when 'true' ->
			( _cor24
			  -| ['compiler_generated'] )
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'close_file',1}}] )
	    -| ['compiler_generated'] )
	end
'wait_req_scan'/1 =
    %% Line 632
    fun (_cor0) ->
	let <From> =
	    %% Line 633
	    apply 'wait_request'/1
		(_cor0)
	in  %% Line 634
	    apply 'scan_toks'/2
		(From, _cor0)
'wait_req_skip'/2 =
    %% Line 636
    fun (_cor1,_cor0) ->
	let <From> =
	    %% Line 637
	    apply 'wait_request'/1
		(_cor1)
	in  %% Line 638
	    apply 'skip_toks'/3
		(From, _cor1, _cor0)
'enter_file'/4 =
    %% Line 646
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_NewName,Inc,From,St = {'epp',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}>
	      when %% Line 647
		( try
		      let <_cor9> =
			  call 'erlang':'length'
			      (_cor30)
		      in  call 'erlang':'>='
			      (_cor9, 8)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_cor11> =
		  %% Line 648
		  apply 'abs_loc'/1
		      (Inc)
	      in  do  %% Line 648
		      apply 'epp_reply'/2
			  (From, {'error',{_cor11,'epp',{'depth',[105|[110|[99|[108|[117|[100|[101]]]]]]]}}})
		      %% Line 649
		      apply 'wait_req_scan'/1
			  (St)
	  %% Line 650
	  <NewName,Inc,From,St> when 'true' ->
	      %% Line 651
	      ( case St of
		  ( <( {'epp',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_rec3,_cor43,_cor44,_cor45,_cor46}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'file':'path_open'
				 (_rec3, NewName, ['read']) of
			  %% Line 652
			  <{'ok',NewF,Pname}> when 'true' ->
			      let <Loc> =
				  %% Line 653
				  apply 'start_loc'/1
				      (_cor37)
			      in  let <_cor17> =
				      %% Line 654
				      apply 'enter_file2'/5
					  (NewF, Pname, From, St, Loc)
				  in  %% Line 654
				      apply 'wait_req_scan'/1
					  (_cor17)
			  %% Line 655
			  <{'error',_X_E}> when 'true' ->
			      let <_cor18> =
				  %% Line 656
				  apply 'abs_loc'/1
				      (Inc)
			      in  do  %% Line 656
				      apply 'epp_reply'/2
					  (From, {'error',{_cor18,'epp',{'include','file',NewName}}})
				      %% Line 657
				      apply 'wait_req_scan'/1
					  (St)
			  ( <_cor19> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor19})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor47> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'enter_file2'/5 =
    %% Line 663
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Loc> =
	    %% Line 664
	    apply 'start_loc'/1
		(_cor0)
	in  do  %% Line 665
		apply 'enter_file_reply'/4
		    (_cor2, _cor3, Loc, _cor0)
		%% Line 666
		( case _cor1 of
		    ( <( {'epp',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec5,_cor34,_cor35,_cor36}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <Ms> =
			      call 'dict':'store'
				  ({'atom','FILE'}, {'none',[{'string',Loc,_cor3}|[]]}, _rec5)
			  in  let <_cor9> =
				  %% Line 673
				  call 'filename':'dirname'
				      (_cor3)
			      in  let <_cor12> =
				      %% Line 673
				      call 'erlang':'tl'
					  (_cor33)
				  in  let <Path> =
					  %% Line 673
					  [_cor9|_cor12]
				      in  let <_X_> =
					      %% Line 675
					      apply 'set_encoding'/2
						  (_cor4, _cor35)
					  in  let <_cor18> =
						  call 'dict':'new'
						      ()
					      in  %% Line 676
						  {'epp',_cor4,Loc,0,_cor3,_cor3,[],%% Line 677
										    [_cor1|_cor32],%% Line 677
												   Path,%% Line 677
													Ms,_cor18,_cor35,'false'}
		      -| ['compiler_generated'] )
		    ( <_cor37> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','epp'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'enter_file_reply'/4 =
    %% Line 680
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Attr> =
	    %% Line 681
	    apply 'loc_attr'/1
		(_cor0)
	in  let <_cor5> =
		%% Line 683
		apply 'file_name'/1
		    (_cor2)
	    in  let <_cor6> =
		    %% Line 684
		    apply 'get_line'/1
			(_cor1)
		in  let <Rep> =
			%% Line 682
			{'ok',[{'-',Attr}|[{'atom',Attr,'file'}|[{'(',Attr}|%% Line 683
									    [{'string',Attr,_cor5}|[{',',Attr}|%% Line 684
													       [{'integer',Attr,_cor6}|[{')',_cor1}|%% Line 685
																		    [{'dot',Attr}|[]]]]]]]]]}
		    in  %% Line 686
			apply 'epp_reply'/2
			    (_cor3, Rep)
'file_name'/1 =
    %% Line 690
    fun (_cor0) ->
	case _cor0 of
	  <[C|T]>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(C)
		in  let <_cor2> =
			call 'erlang':'>'
			    (C, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 691
		  apply 'file_name'/1
		      (T)
	      in  %% Line 691
		  [C|_cor3]
	  %% Line 692
	  <[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 693
		  apply 'file_name'/1
		      (H)
	      in  let <_cor4> =
		      %% Line 693
		      apply 'file_name'/1
			  (T)
		  in  %% Line 693
		      call 'erlang':'++'
			  (_cor5, _cor4)
	  %% Line 694
	  <[]> when 'true' ->
	      %% Line 695
	      []
	  %% Line 696
	  <N>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 697
	      call 'erlang':'atom_to_list'
		  (N)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'file_name',1}}] )
	    -| ['compiler_generated'] )
	end
'leave_file'/2 =
    %% Line 699
    fun (_cor1,_cor0) ->
	%% Line 700
	( case _cor0 of
	    ( <( {'epp',_cor35,_cor36,_cor37,_cor38,_cor39,_rec9,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec9 of
		    %% Line 701
		    <[I|Cis]> when 'true' ->
			do  %% Line 702
			    apply 'epp_reply'/2
				(_cor1, %% Line 703
					{'error',{_cor36,'epp',%% Line 704
							       {'illegal',[117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100]]]]]]]]]]]],I}}})
			    let <_cor9> =
				%% Line 705
				apply 'wait_request'/1
				    (_cor0)
			    in  let <_cor8> =
				    %% Line 705
				    call 'erlang':'setelement'
					(7, _cor0, Cis)
				in  %% Line 705
				    apply 'leave_file'/2
					(_cor9, _cor8)
		    %% Line 706
		    <[]> when 'true' ->
			%% Line 707
			case _cor40 of
			  %% Line 708
			  <[OldSt|Sts]> when 'true' ->
			      do  %% Line 709
				  apply 'close_file'/1
				      (_cor0)
				  %% Line 711
				  case OldSt of
				    <{'epp',_cor84,OldLoc,Delta,OldName,OldName2,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91}> when 'true' ->
					let <CurrLoc> =
					    %% Line 712
					    apply 'add_line'/2
						(OldLoc, Delta)
					in  let <Ms> =
						%% Line 713
						call 'dict':'store'
						    ({'atom','FILE'}, %% Line 714
								      {'none',[{'string',CurrLoc,OldName2}|[]]}, _cor42)
					    in  let <_cor21> =
						    %% Line 716
						    call 'erlang':'setelement'
							(11, OldSt, _cor43)
						in  let <_cor22> =
							%% Line 716
							call 'erlang':'setelement'
							    (10, _cor21, Ms)
						    in  let <_cor24> =
							    %% Line 716
							    call 'erlang':'setelement'
								(8, _cor22, Sts)
							in  do  %% Line 717
								apply 'enter_file_reply'/4
								    (_cor1, OldName, CurrLoc, CurrLoc)
								do  %% Line 718
								    case <> of
								      %% Line 719
								      <>
									  when call 'erlang':'=:='
										(OldName2,
										 OldName) ->
									  'ok'
								      %% Line 721
								      <> when 'true' ->
									  let <NFrom> =
									      %% Line 722
									      apply 'wait_request'/1
										  (_cor24)
									  in  let <_cor27> =
										  %% Line 724
										  apply 'neg_line'/1
										      (CurrLoc)
									      in  %% Line 723
										  apply 'enter_file_reply'/4
										      (NFrom, OldName2, OldLoc, _cor27)
								    end
								    %% Line 726
								    apply 'wait_req_scan'/1
									(_cor24)
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			  %% Line 727
			  <[]> when 'true' ->
			      do  %% Line 728
				  apply 'epp_reply'/2
				      (_cor1, {'eof',_cor36})
				  %% Line 729
				  apply 'wait_req_scan'/1
				      (_cor0)
			  ( <_cor31> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor31})
			    -| ['compiler_generated'] )
			end
		    ( <_cor32> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor32})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor46> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','epp'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'scan_toks'/2 =
    %% Line 736
    fun (_cor1,_cor0) ->
	%% Line 737
	( case _cor0 of
	    ( <( {'epp',_rec18,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'io':'scan_erl_form'
			   (_rec18, '', _cor21) of
		    %% Line 738
		    <{'ok',Toks,Cl}> when 'true' ->
			let <_cor8> =
			    %% Line 739
			    call 'erlang':'setelement'
				(3, _cor0, Cl)
			in  %% Line 739
			    apply 'scan_toks'/3
				(Toks, _cor1, _cor8)
		    %% Line 740
		    <{'error',E,Cl}> when 'true' ->
			do  %% Line 741
			    apply 'epp_reply'/2
				(_cor1, {'error',E})
			    let <_cor11> =
				%% Line 742
				call 'erlang':'setelement'
				    (3, _cor0, Cl)
			    in  %% Line 742
				apply 'wait_req_scan'/1
				    (_cor11)
		    %% Line 743
		    <{'eof',Cl}> when 'true' ->
			let <_cor14> =
			    %% Line 744
			    call 'erlang':'setelement'
				(3, _cor0, Cl)
			in  %% Line 744
			    apply 'leave_file'/2
				(_cor1, _cor14)
		    %% Line 745
		    <{'error',_X_E}> when 'true' ->
			do  %% Line 746
			    apply 'epp_reply'/2
				(_cor1, {'error',{_cor21,'epp','cannot_parse'}})
			    let <_cor17> =
				%% Line 747
				apply 'wait_request'/1
				    (_cor0)
			    in  %% Line 747
				apply 'leave_file'/2
				    (_cor17, _cor0)
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','epp'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'scan_toks'/3 =
    %% Line 750
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'-',_X_Lh}|[Define = {'atom',_X_Ld,'define'}|Toks]],From,St> when 'true' ->
	      %% Line 751
	      apply 'scan_define'/4
		  (Toks, Define, From, St)
	  %% Line 752
	  <[{'-',_X_Lh}|[Undef = {'atom',_X_Ld,'undef'}|Toks]],From,St> when 'true' ->
	      %% Line 753
	      apply 'scan_undef'/4
		  (Toks, Undef, From, St)
	  %% Line 754
	  <[{'-',_X_Lh}|[Inc = {'atom',_X_Li,'include'}|Toks]],From,St> when 'true' ->
	      %% Line 755
	      apply 'scan_include'/4
		  (Toks, Inc, From, St)
	  %% Line 756
	  <[{'-',_X_Lh}|[IncLib = {'atom',_X_Li,'include_lib'}|Toks]],From,St> when 'true' ->
	      %% Line 757
	      apply 'scan_include_lib'/4
		  (Toks, IncLib, From, St)
	  %% Line 758
	  <[{'-',_X_Lh}|[IfDef = {'atom',_X_Li,'ifdef'}|Toks]],From,St> when 'true' ->
	      %% Line 759
	      apply 'scan_ifdef'/4
		  (Toks, IfDef, From, St)
	  %% Line 760
	  <[{'-',_X_Lh}|[IfnDef = {'atom',_X_Li,'ifndef'}|Toks]],From,St> when 'true' ->
	      %% Line 761
	      apply 'scan_ifndef'/4
		  (Toks, IfnDef, From, St)
	  %% Line 762
	  <[{'-',_X_Lh}|[Else = {'atom',_X_Le,'else'}|Toks]],From,St> when 'true' ->
	      %% Line 763
	      apply 'scan_else'/4
		  (Toks, Else, From, St)
	  %% Line 764
	  <[{'-',_X_Lh}|[If = {'if',_X_Le}|Toks]],From,St> when 'true' ->
	      %% Line 765
	      apply 'scan_if'/4
		  (Toks, If, From, St)
	  %% Line 766
	  <[{'-',_X_Lh}|[Elif = {'atom',_X_Le,'elif'}|Toks]],From,St> when 'true' ->
	      %% Line 767
	      apply 'scan_elif'/4
		  (Toks, Elif, From, St)
	  %% Line 768
	  <[{'-',_X_Lh}|[Endif = {'atom',_X_Le,'endif'}|Toks]],From,St> when 'true' ->
	      %% Line 769
	      apply 'scan_endif'/4
		  (Toks, Endif, From, St)
	  %% Line 770
	  <[{'-',_X_Lh}|[FileToken = {'atom',_X_Lf,'file'}|Toks0]],From,St> when 'true' ->
	      let <_cor7> =
		  catch
		      %% Line 771
		      ( case St of
			  ( <( {'epp',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec24,_cor32,_cor33,_cor34}
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'expand_macros'/2
				    (Toks0, {_rec24,_cor32})
			    -| ['compiler_generated'] )
			  ( <_cor35> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','epp'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 771
		  case _cor7 of
		    %% Line 772
		    <Toks1>
			when call 'erlang':'is_list'
			      (_cor7) ->
			%% Line 773
			apply 'scan_file'/4
			    (Toks1, FileToken, From, St)
		    %% Line 774
		    <{'error',ErrL,What}> when 'true' ->
			do  %% Line 775
			    apply 'epp_reply'/2
				(From, {'error',{ErrL,'epp',What}})
			    %% Line 776
			    apply 'wait_req_scan'/1
				(St)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 778
	  <Toks0,From,St> when 'true' ->
	      let <_cor13> =
		  catch
		      %% Line 779
		      ( case St of
			  ( <( {'epp',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_rec26,_cor56,_cor57,_cor58}
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'expand_macros'/2
				    (Toks0, {_rec26,_cor56})
			    -| ['compiler_generated'] )
			  ( <_cor59> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','epp'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 779
		  case _cor13 of
		    %% Line 780
		    <Toks1>
			when call 'erlang':'is_list'
			      (_cor13) ->
			do  %% Line 781
			    apply 'epp_reply'/2
				(From, {'ok',Toks1})
			    %% Line 782
			    ( case St of
				( <( {'epp',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_rec30,_cor80,_cor81,_cor82}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec28> =
					  apply 'scan_module'/2
					      (Toks1, _rec30)
				      in  let <_cor19> =
					      call 'erlang':'setelement'
						  (10, St, _rec28)
					  in  apply 'wait_req_scan'/1
						  (_cor19)
				  -| ['compiler_generated'] )
				( <_cor83> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','epp'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 783
		    <{'error',ErrL,What}> when 'true' ->
			do  %% Line 784
			    apply 'epp_reply'/2
				(From, {'error',{ErrL,'epp',What}})
			    %% Line 785
			    apply 'wait_req_scan'/1
				(St)
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor20})
		      -| ['compiler_generated'] )
		  end
	end
'scan_module'/2 =
    %% Line 788
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'-',_X_Lh}|[{'atom',_X_Lm,'module'}|[{'(',_X_Ll}|Ts]]],Ms> when 'true' ->
	      %% Line 789
	      apply 'scan_module_1'/3
		  (Ts, [], Ms)
	  %% Line 790
	  <[{'-',_X_Lh}|[{'atom',_X_Lm,'extends'}|[{'(',_X_Ll}|Ts]]],Ms> when 'true' ->
	      %% Line 791
	      apply 'scan_extends'/3
		  (Ts, [], Ms)
	  %% Line 792
	  <_X_Ts,Ms> when 'true' ->
	      Ms
	end
'scan_module_1'/3 =
    %% Line 794
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[A = {'atom',_cor10,_cor11}|[{',',L}|Ts]],As,Ms> when 'true' ->
	      %% Line 796
	      apply 'scan_module_1'/3
		  ([A|[{')',L}|Ts]], As, Ms)
	  %% Line 797
	  <[{'atom',Ln,A}|[{')',_X_Lr}|_X_Ts]],As,Ms0> when 'true' ->
	      let <_cor3> =
		  %% Line 798
		  call 'lists':'reverse'
		      ([A|As])
	      in  let <Mod> =
		      %% Line 798
		      call 'lists':'concat'
			  (_cor3)
		  in  let <_cor5> =
			  %% Line 800
			  call 'erlang':'list_to_atom'
			      (Mod)
		      in  let <Ms> =
			      %% Line 799
			      call 'dict':'store'
				  ({'atom','MODULE'}, %% Line 800
						      {'none',[{'atom',Ln,_cor5}|[]]}, %% Line 800
										       Ms0)
			  in  %% Line 801
			      call 'dict':'store'
				  ({'atom','MODULE_STRING'}, {'none',[{'string',Ln,Mod}|[]]}, Ms)
	  %% Line 802
	  <[{'atom',_X_Ln,A}|[{'.',_X_Lr}|Ts]],As,Ms> when 'true' ->
	      %% Line 803
	      apply 'scan_module_1'/3
		  (Ts, [[46]|[A|As]], Ms)
	  %% Line 804
	  <[{'.',_X_Lr}|Ts],As,Ms> when 'true' ->
	      %% Line 805
	      apply 'scan_module_1'/3
		  (Ts, As, Ms)
	  %% Line 806
	  <_X_Ts,_X_As,Ms> when 'true' ->
	      Ms
	end
'scan_extends'/3 =
    %% Line 808
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'atom',Ln,A}|[{')',_X_Lr}|_X_Ts]],As,Ms0> when 'true' ->
	      let <_cor3> =
		  %% Line 809
		  call 'lists':'reverse'
		      ([A|As])
	      in  let <Mod> =
		      %% Line 809
		      call 'lists':'concat'
			  (_cor3)
		  in  let <_cor5> =
			  %% Line 811
			  call 'erlang':'list_to_atom'
			      (Mod)
		      in  let <Ms> =
			      %% Line 810
			      call 'dict':'store'
				  ({'atom','BASE_MODULE'}, %% Line 811
							   {'none',[{'atom',Ln,_cor5}|[]]}, %% Line 811
											    Ms0)
			  in  %% Line 812
			      call 'dict':'store'
				  ({'atom','BASE_MODULE_STRING'}, {'none',[{'string',Ln,Mod}|[]]}, Ms)
	  %% Line 813
	  <[{'atom',_X_Ln,A}|[{'.',_X_Lr}|Ts]],As,Ms> when 'true' ->
	      %% Line 814
	      apply 'scan_extends'/3
		  (Ts, [[46]|[A|As]], Ms)
	  %% Line 815
	  <[{'.',_X_Lr}|Ts],As,Ms> when 'true' ->
	      %% Line 816
	      apply 'scan_extends'/3
		  (Ts, As, Ms)
	  %% Line 817
	  <_X_Ts,_X_As,Ms> when 'true' ->
	      Ms
	end
'scan_define'/4 =
    %% Line 821
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_X_Lp}|[Mac = {Type,_X_Lm,M}|[{',',Lc}|Toks]]],_X_Def,From,St>
	      when let <_cor4> =
		    %% Line 822
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor5> =
			%% Line 822
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 822
			call 'erlang':'or'
			    (_cor4, _cor5) ->
	      let <_cor6> =
		  catch
		      %% Line 823
		      apply 'macro_expansion'/2
			  (Toks, Lc)
	      in  %% Line 823
		  case _cor6 of
		    %% Line 824
		    <Expansion>
			when call 'erlang':'is_list'
			      (_cor6) ->
			%% Line 825
			( case St of
			    ( <( {'epp',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_rec31,_cor39,_cor40,_cor41}
				 -| ['compiler_generated'] )> when 'true' ->
				  case call 'dict':'find'
					   ({'atom',M}, _rec31) of
				    %% Line 826
				    <{'ok',Defs}>
					when call 'erlang':'is_list'
					      (Defs) ->
					%% Line 828
					case call 'proplists':'is_defined'
						 ('none', Defs) of
					  %% Line 829
					  <'true'> when 'true' ->
					      let <_cor9> =
						  %% Line 830
						  apply 'loc'/1
						      (Mac)
					      in  do  %% Line 830
						      apply 'epp_reply'/2
							  (From, {'error',{_cor9,'epp',{'redefine',M}}})
						      %% Line 831
						      apply 'wait_req_scan'/1
							  (St)
					  %% Line 832
					  <'false'> when 'true' ->
					      %% Line 833
					      apply 'scan_define_cont'/4
						  (From, St, %% Line 834
							     {'atom',M}, %% Line 835
									 {'none',{'none',Expansion}})
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor10})
					    -| ['compiler_generated'] )
					end
				    %% Line 837
				    <{'ok',_X_PreDef}> when 'true' ->
					let <_cor11> =
					    %% Line 839
					    apply 'loc'/1
						(Mac)
					in  do  %% Line 839
						apply 'epp_reply'/2
						    (From, {'error',{_cor11,'epp',{'redefine_predef',M}}})
						%% Line 840
						apply 'wait_req_scan'/1
						    (St)
				    %% Line 841
				    <'error'> when 'true' ->
					%% Line 842
					apply 'scan_define_cont'/4
					    (From, St, %% Line 843
						       {'atom',M}, %% Line 844
								   {'none',{'none',Expansion}})
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor12})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor42> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','epp'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 846
		    <{'error',ErrL,What}> when 'true' ->
			do  %% Line 847
			    apply 'epp_reply'/2
				(From, {'error',{ErrL,'epp',What}})
			    %% Line 848
			    apply 'wait_req_scan'/1
				(St)
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 850
	  <[{'(',_X_Lp}|[Mac = {Type,_X_Lm,M}|[{'(',_X_Lc}|Toks]]],Def,From,St>
	      when let <_cor14> =
		    %% Line 851
		    call 'erlang':'=:='
			(Type, 'atom')
		in  let <_cor15> =
			%% Line 851
			call 'erlang':'=:='
			    (Type, 'var')
		    in  %% Line 851
			call 'erlang':'or'
			    (_cor14, _cor15) ->
	      let <_cor16> =
		  catch
		      %% Line 852
		      apply 'macro_pars'/2
			  (Toks, [])
	      in  %% Line 852
		  case _cor16 of
		    %% Line 853
		    <{'ok',{As,Me}}> when 'true' ->
			let <Len> =
			    %% Line 854
			    call 'erlang':'length'
				(As)
			in  %% Line 855
			    ( case St of
				( <( {'epp',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_rec32,_cor51,_cor52,_cor53}
				     -| ['compiler_generated'] )> when 'true' ->
				      case call 'dict':'find'
					       ({'atom',M}, _rec32) of
					%% Line 856
					<{'ok',Defs}>
					    when call 'erlang':'is_list'
						  (Defs) ->
					    %% Line 858
					    case call 'proplists':'is_defined'
						     (Len, Defs) of
					      %% Line 859
					      <'true'> when 'true' ->
						  let <_cor20> =
						      %% Line 860
						      apply 'loc'/1
							  (Mac)
						  in  do  %% Line 860
							  apply 'epp_reply'/2
							      (From, {'error',{_cor20,'epp',{'redefine',M}}})
							  %% Line 861
							  apply 'wait_req_scan'/1
							      (St)
					      %% Line 862
					      <'false'> when 'true' ->
						  %% Line 863
						  apply 'scan_define_cont'/4
						      (From, St, {'atom',M}, %% Line 864
									     {Len,{As,Me}})
					      ( <_cor21> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor21})
						-| ['compiler_generated'] )
					    end
					%% Line 866
					<{'ok',_X_PreDef}> when 'true' ->
					    let <_cor22> =
						%% Line 869
						apply 'loc'/1
						    (Mac)
					    in  do  %% Line 869
						    apply 'epp_reply'/2
							(From, {'error',{_cor22,'epp',{'redefine_predef',M}}})
						    %% Line 870
						    apply 'wait_req_scan'/1
							(St)
					%% Line 871
					<'error'> when 'true' ->
					    %% Line 872
					    apply 'scan_define_cont'/4
						(From, St, {'atom',M}, {Len,{As,Me}})
					( <_cor23> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor23})
					  -| ['compiler_generated'] )
				      end
				  -| ['compiler_generated'] )
				( <_cor54> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','epp'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 874
		    <{'error',ErrL,What}> when 'true' ->
			do  %% Line 875
			    apply 'epp_reply'/2
				(From, {'error',{ErrL,'epp',What}})
			    %% Line 876
			    apply 'wait_req_scan'/1
				(St)
		    %% Line 877
		    <_cor55> when 'true' ->
			let <_cor24> =
			    %% Line 878
			    apply 'loc'/1
				(Def)
			in  do  %% Line 878
				apply 'epp_reply'/2
				    (From, {'error',{_cor24,'epp',{'bad','define'}}})
				%% Line 879
				apply 'wait_req_scan'/1
				    (St)
		  end
	  %% Line 881
	  <_X_Toks,Def,From,St> when 'true' ->
	      let <_cor26> =
		  %% Line 882
		  apply 'loc'/1
		      (Def)
	      in  do  %% Line 882
		      apply 'epp_reply'/2
			  (From, {'error',{_cor26,'epp',{'bad','define'}}})
		      %% Line 883
		      apply 'wait_req_scan'/1
			  (St)
	end
'scan_define_cont'/4 =
    %% Line 894
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,St,M,{Arity,Def}> when 'true' ->
	      %% Line 895
	      ( case St of
		  ( <( {'epp',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec33,_cor31,_cor32,_cor33}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ms> =
			    call 'dict':'append_list'
				(M, [{Arity,Def}|[]], _rec33)
			in  %% Line 896
			    try
				let <_cor9> =
				    apply 'macro_uses'/1
					(Def)
				in  call 'dict':'append_list'
					(M, [{Arity,_cor9}|[]], _cor31)
			    of <_cor10> ->
				let <_cor12> =
				    %% Line 898
				    call 'erlang':'setelement'
					(11, St, _cor10)
				in  let <_cor14> =
					%% Line 898
					call 'erlang':'setelement'
					    (10, _cor12, Ms)
				    in  %% Line 898
					apply 'scan_toks'/2
					    (F, _cor14)
			    catch <_cor18,_cor17,_cor16> ->
				case <_cor18,_cor17,_cor16> of
				  %% Line 900
				  <'throw',{'error',Line,Reason},_cor60> when 'true' ->
				      do  %% Line 901
					  apply 'epp_reply'/2
					      (F, {'error',{Line,'epp',Reason}})
					  %% Line 902
					  apply 'wait_req_scan'/1
					      (St)
				  ( <_cor18,_cor17,_cor16> when 'true' ->
					primop 'raise'
					    (_cor16, _cor17)
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_cor34> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'scan_define_cont',4}}] )
	    -| ['compiler_generated'] )
	end
'macro_uses'/1 =
    %% Line 905
    fun (_cor0) ->
	case _cor0 of
	  <{_X_Args,Tokens}> when 'true' ->
	      let <Uses0> =
		  %% Line 906
		  apply 'macro_ref'/1
		      (Tokens)
	      in  %% Line 907
		  call 'lists':'usort'
		      (Uses0)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'macro_uses',1}}] )
	    -| ['compiler_generated'] )
	end
'macro_ref'/1 =
    %% Line 909
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 910
	      []
	  %% Line 911
	  <[{'?',_cor6}|[{'?',_cor7}|Rest]]> when 'true' ->
	      %% Line 912
	      apply 'macro_ref'/1
		  (Rest)
	  %% Line 913
	  <[{'?',_cor8}|[{'atom',Lm,A}|Rest]]> when 'true' ->
	      let <Arity> =
		  %% Line 914
		  apply 'count_args'/3
		      (Rest, Lm, A)
	      in  let <_cor2> =
		      %% Line 915
		      apply 'macro_ref'/1
			  (Rest)
		  in  %% Line 915
		      [{{'atom',A},Arity}|_cor2]
	  %% Line 916
	  <[{'?',_cor9}|[{'var',Lm,A}|Rest]]> when 'true' ->
	      let <Arity> =
		  %% Line 917
		  apply 'count_args'/3
		      (Rest, Lm, A)
	      in  let <_cor4> =
		      %% Line 918
		      apply 'macro_ref'/1
			  (Rest)
		  in  %% Line 918
		      [{{'atom',A},Arity}|_cor4]
	  %% Line 919
	  <[_X_Token|Rest]> when 'true' ->
	      %% Line 920
	      apply 'macro_ref'/1
		  (Rest)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'macro_ref',1}}] )
	    -| ['compiler_generated'] )
	end
'scan_undef'/4 =
    %% Line 924
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_Undef,From,St> when 'true' ->
	      %% Line 925
	      ( case St of
		  ( <( {'epp',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec36,_cor37,_cor38,_cor39}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Macs> =
			    call 'dict':'erase'
				({'atom',M}, _rec36)
			in  let <Uses> =
				%% Line 926
				call 'dict':'erase'
				    ({'atom',M}, _cor37)
			    in  let <_cor11> =
				    %% Line 927
				    call 'erlang':'setelement'
					(11, St, Uses)
				in  let <_cor13> =
					%% Line 927
					call 'erlang':'setelement'
					    (10, _cor11, Macs)
				    in  %% Line 927
					apply 'scan_toks'/2
					    (From, _cor13)
		    -| ['compiler_generated'] )
		  ( <_cor40> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 928
	  <[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_Undef,From,St> when 'true' ->
	      %% Line 929
	      ( case St of
		  ( <( {'epp',_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_rec39,_cor74,_cor75,_cor76}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Macs> =
			    call 'dict':'erase'
				({'atom',M}, _rec39)
			in  let <Uses> =
				%% Line 930
				call 'dict':'erase'
				    ({'atom',M}, _cor74)
			    in  let <_cor21> =
				    %% Line 931
				    call 'erlang':'setelement'
					(11, St, Uses)
				in  let <_cor23> =
					%% Line 931
					call 'erlang':'setelement'
					    (10, _cor21, Macs)
				    in  %% Line 931
					apply 'scan_toks'/2
					    (From, _cor23)
		    -| ['compiler_generated'] )
		  ( <_cor77> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 932
	  <_X_Toks,Undef,From,St> when 'true' ->
	      let <_cor24> =
		  %% Line 933
		  apply 'loc'/1
		      (Undef)
	      in  do  %% Line 933
		      apply 'epp_reply'/2
			  (From, {'error',{_cor24,'epp',{'bad','undef'}}})
		      %% Line 934
		      apply 'wait_req_scan'/1
			  (St)
	end
'scan_include'/4 =
    %% Line 938
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_X_Llp}|[{'string',_X_Lf,NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],Inc,%% Line 939
											    From,%% Line 939
												 St> when 'true' ->
	      let <NewName> =
		  %% Line 940
		  apply 'expand_var'/1
		      (NewName0)
	      in  %% Line 941
		  apply 'enter_file'/4
		      (NewName, Inc, From, St)
	  %% Line 942
	  <_X_Toks,Inc,From,St> when 'true' ->
	      let <_cor5> =
		  %% Line 943
		  apply 'abs_loc'/1
		      (Inc)
	      in  do  %% Line 943
		      apply 'epp_reply'/2
			  (From, {'error',{_cor5,'epp',{'bad','include'}}})
		      %% Line 944
		      apply 'wait_req_scan'/1
			  (St)
	end
'find_lib_dir'/1 =
    %% Line 951
    fun (_cor0) ->
	%% Line 952
	case call 'filename':'split'
		 (_cor0) of
	  <[Lib|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 953
		  call 'erlang':'list_to_atom'
		      (Lib)
	      in  let <_cor3> =
		      %% Line 953
		      call 'code':'lib_dir'
			  (_cor2)
		  in  %% Line 953
		      {_cor3,Rest}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'scan_include_lib'/4 =
    %% Line 955
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_X_Llp}|[{'string',_X_Lf,_X_NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],%% Line 956
											   Inc,%% Line 956
											       From,St = %% Line 956
													 {'epp',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}>
	      when %% Line 957
		( try
		      let <_cor9> =
			  call 'erlang':'length'
			      (_cor38)
		      in  call 'erlang':'>='
			      (_cor9, 8)
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_cor11> =
		  %% Line 958
		  apply 'abs_loc'/1
		      (Inc)
	      in  do  %% Line 958
		      apply 'epp_reply'/2
			  (From, {'error',{_cor11,'epp',{'depth',[105|[110|[99|[108|[117|[100|[101|[95|[108|[105|[98]]]]]]]]]]]}}})
		      %% Line 959
		      apply 'wait_req_scan'/1
			  (St)
	  %% Line 960
	  <[{'(',_X_Llp}|[{'string',_X_Lf,NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],%% Line 961
											Inc,%% Line 961
											    From,%% Line 961
												 St> when 'true' ->
	      let <NewName> =
		  %% Line 962
		  apply 'expand_var'/1
		      (NewName0)
	      in  %% Line 963
		  ( case St of
		      ( <( {'epp',_cor44,_rec42,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Loc> =
				apply 'start_loc'/1
				    (_rec42)
			    in  %% Line 964
				case call 'file':'path_open'
					 (_cor50, NewName, ['read']) of
				  %% Line 965
				  <{'ok',NewF,Pname}> when 'true' ->
				      let <_cor18> =
					  %% Line 966
					  apply 'enter_file2'/5
					      (NewF, Pname, From, St, Loc)
				      in  %% Line 966
					  apply 'wait_req_scan'/1
					      (_cor18)
				  %% Line 967
				  <{'error',_X_E1}> when 'true' ->
				      let <_cor19> =
					  catch
					      %% Line 968
					      apply 'find_lib_dir'/1
						  (NewName)
				      in  %% Line 968
					  case _cor19 of
					    %% Line 969
					    <{LibDir,Rest}>
						when call 'erlang':'is_list'
						      (LibDir) ->
						let <LibName> =
						    %% Line 970
						    apply 'fname_join'/1
							([LibDir|Rest])
						in  %% Line 971
						    case call 'file':'open'
							     (LibName, ['read']) of
						      %% Line 972
						      <{'ok',NewF}> when 'true' ->
							  let <_cor21> =
							      %% Line 973
							      apply 'enter_file2'/5
								  (NewF, LibName, From, %% Line 974
											St, %% Line 974
											    Loc)
							  in  %% Line 973
							      apply 'wait_req_scan'/1
								  (_cor21)
						      %% Line 975
						      <{'error',_X_E2}> when 'true' ->
							  let <_cor22> =
							      %% Line 977
							      apply 'abs_loc'/1
								  (Inc)
							  in  do  %% Line 976
								  apply 'epp_reply'/2
								      (From, %% Line 977
									     {'error',{_cor22,'epp',%% Line 978
												    {'include','lib',NewName}}})
								  %% Line 979
								  apply 'wait_req_scan'/1
								      (St)
						      ( <_cor23> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor23})
							-| ['compiler_generated'] )
						    end
					    %% Line 981
					    <_X_Error> when 'true' ->
						let <_cor24> =
						    %% Line 982
						    apply 'abs_loc'/1
							(Inc)
						in  do  %% Line 982
							apply 'epp_reply'/2
							    (From, {'error',{_cor24,'epp',%% Line 983
											  {'include','lib',NewName}}})
							%% Line 984
							apply 'wait_req_scan'/1
							    (St)
					  end
				  ( <_cor26> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor26})
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_cor55> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','epp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 987
	  <_X_Toks,Inc,From,St> when 'true' ->
	      let <_cor27> =
		  %% Line 988
		  apply 'abs_loc'/1
		      (Inc)
	      in  do  %% Line 988
		      apply 'epp_reply'/2
			  (From, {'error',{_cor27,'epp',{'bad','include_lib'}}})
		      %% Line 989
		      apply 'wait_req_scan'/1
			  (St)
	end
'scan_ifdef'/4 =
    %% Line 996
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfD,From,St> when 'true' ->
	      %% Line 997
	      ( case St of
		  ( <( {'epp',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec44,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'dict':'find'
				 ({'atom',M}, _rec44) of
			  %% Line 998
			  <{'ok',_X_Def}> when 'true' ->
			      let <_rec45> =
				  %% Line 999
				  ['ifdef'|_cor32]
			      in  let <_cor11> =
				      %% Line 999
				      call 'erlang':'setelement'
					  (7, St, _rec45)
				  in  %% Line 999
				      apply 'scan_toks'/2
					  (From, _cor11)
			  %% Line 1000
			  <'error'> when 'true' ->
			      %% Line 1001
			      apply 'skip_toks'/3
				  (From, St, ['ifdef'])
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1003
	  <[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfD,From,St> when 'true' ->
	      %% Line 1004
	      ( case St of
		  ( <( {'epp',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_rec48,_cor72,_cor73,_cor74}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'dict':'find'
				 ({'atom',M}, _rec48) of
			  %% Line 1005
			  <{'ok',_X_Def}> when 'true' ->
			      let <_rec49> =
				  %% Line 1006
				  ['ifdef'|_cor69]
			      in  let <_cor20> =
				      %% Line 1006
				      call 'erlang':'setelement'
					  (7, St, _rec49)
				  in  %% Line 1006
				      apply 'scan_toks'/2
					  (From, _cor20)
			  %% Line 1007
			  <'error'> when 'true' ->
			      %% Line 1008
			      apply 'skip_toks'/3
				  (From, St, ['ifdef'])
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor21})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor75> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1010
	  <_X_Toks,IfDef,From,St> when 'true' ->
	      let <_cor22> =
		  %% Line 1011
		  apply 'loc'/1
		      (IfDef)
	      in  do  %% Line 1011
		      apply 'epp_reply'/2
			  (From, {'error',{_cor22,'epp',{'bad','ifdef'}}})
		      %% Line 1012
		      apply 'wait_req_skip'/2
			  (St, ['ifdef'])
	end
'scan_ifndef'/4 =
    %% Line 1014
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfnD,From,St> when 'true' ->
	      %% Line 1015
	      ( case St of
		  ( <( {'epp',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec52,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'dict':'find'
				 ({'atom',M}, _rec52) of
			  %% Line 1016
			  <{'ok',_X_Def}> when 'true' ->
			      %% Line 1017
			      apply 'skip_toks'/3
				  (From, St, ['ifndef'])
			  %% Line 1018
			  <'error'> when 'true' ->
			      let <_rec53> =
				  %% Line 1019
				  ['ifndef'|_cor32]
			      in  let <_cor11> =
				      %% Line 1019
				      call 'erlang':'setelement'
					  (7, St, _rec53)
				  in  %% Line 1019
				      apply 'scan_toks'/2
					  (From, _cor11)
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1021
	  <[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfnD,From,St> when 'true' ->
	      %% Line 1022
	      ( case St of
		  ( <( {'epp',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_rec56,_cor72,_cor73,_cor74}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'dict':'find'
				 ({'atom',M}, _rec56) of
			  %% Line 1023
			  <{'ok',_X_Def}> when 'true' ->
			      %% Line 1024
			      apply 'skip_toks'/3
				  (From, St, ['ifndef'])
			  %% Line 1025
			  <'error'> when 'true' ->
			      let <_rec57> =
				  %% Line 1026
				  ['ifndef'|_cor69]
			      in  let <_cor20> =
				      %% Line 1026
				      call 'erlang':'setelement'
					  (7, St, _rec57)
				  in  %% Line 1026
				      apply 'scan_toks'/2
					  (From, _cor20)
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor21})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor75> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1028
	  <_X_Toks,IfnDef,From,St> when 'true' ->
	      let <_cor22> =
		  %% Line 1029
		  apply 'loc'/1
		      (IfnDef)
	      in  do  %% Line 1029
		      apply 'epp_reply'/2
			  (From, {'error',{_cor22,'epp',{'bad','ifndef'}}})
		      %% Line 1030
		      apply 'wait_req_skip'/2
			  (St, ['ifndef'])
	end
'scan_else'/4 =
    %% Line 1036
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'dot',_X_Ld}|[]],Else,From,St> when 'true' ->
	      %% Line 1037
	      ( case St of
		  ( <( {'epp',_cor20,_cor21,_cor22,_cor23,_cor24,_rec60,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec60 of
			  %% Line 1038
			  <['else'|Cis]> when 'true' ->
			      let <_cor6> =
				  %% Line 1039
				  apply 'loc'/1
				      (Else)
			      in  do  %% Line 1039
				      apply 'epp_reply'/2
					  (From, {'error',{_cor6,%% Line 1040
								 'epp',%% Line 1040
								       {'illegal',[114|[101|[112|[101|[97|[116|[101|[100]]]]]]]],'else'}}})
				      let <_cor9> =
					  %% Line 1041
					  call 'erlang':'setelement'
					      (7, St, Cis)
				      in  %% Line 1041
					  apply 'wait_req_skip'/2
					      (_cor9, ['else'])
			  %% Line 1042
			  <[_X_I|Cis]> when 'true' ->
			      let <_cor12> =
				  %% Line 1043
				  call 'erlang':'setelement'
				      (7, St, Cis)
			      in  %% Line 1043
				  apply 'skip_toks'/3
				      (From, _cor12, ['else'])
			  %% Line 1044
			  <[]> when 'true' ->
			      let <_cor13> =
				  %% Line 1045
				  apply 'loc'/1
				      (Else)
			      in  do  %% Line 1045
				      apply 'epp_reply'/2
					  (From, {'error',{_cor13,'epp',%% Line 1046
									{'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'else'}}})
				      %% Line 1047
				      apply 'wait_req_scan'/1
					  (St)
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor31> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1049
	  <_X_Toks,Else,From,St> when 'true' ->
	      let <_cor15> =
		  %% Line 1050
		  apply 'loc'/1
		      (Else)
	      in  do  %% Line 1050
		      apply 'epp_reply'/2
			  (From, {'error',{_cor15,'epp',{'bad','else'}}})
		      %% Line 1051
		      apply 'wait_req_scan'/1
			  (St)
	end
'scan_if'/4 =
    %% Line 1057
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1058
	    apply 'loc'/1
		(_cor2)
	in  do  %% Line 1058
		apply 'epp_reply'/2
		    (_cor1, {'error',{_cor4,'epp',{'NYI','if'}}})
		%% Line 1059
		apply 'wait_req_skip'/2
		    (_cor0, ['if'])
'scan_elif'/4 =
    %% Line 1065
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1066
	    apply 'loc'/1
		(_cor2)
	in  do  %% Line 1066
		apply 'epp_reply'/2
		    (_cor1, {'error',{_cor4,'epp',{'NYI','elif'}}})
		%% Line 1067
		apply 'wait_req_scan'/1
		    (_cor0)
'scan_endif'/4 =
    %% Line 1072
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'dot',_X_Ld}|[]],Endif,From,St> when 'true' ->
	      %% Line 1073
	      ( case St of
		  ( <( {'epp',_cor16,_cor17,_cor18,_cor19,_cor20,_rec63,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec63 of
			  %% Line 1074
			  <[_X_I|Cis]> when 'true' ->
			      let <_cor8> =
				  %% Line 1075
				  call 'erlang':'setelement'
				      (7, St, Cis)
			      in  %% Line 1075
				  apply 'scan_toks'/2
				      (From, _cor8)
			  %% Line 1076
			  <[]> when 'true' ->
			      let <_cor9> =
				  %% Line 1077
				  apply 'loc'/1
				      (Endif)
			      in  do  %% Line 1077
				      apply 'epp_reply'/2
					  (From, {'error',{_cor9,'epp',%% Line 1078
								       {'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'endif'}}})
				      %% Line 1079
				      apply 'wait_req_scan'/1
					  (St)
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor27> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1081
	  <_X_Toks,Endif,From,St> when 'true' ->
	      let <_cor11> =
		  %% Line 1082
		  apply 'loc'/1
		      (Endif)
	      in  do  %% Line 1082
		      apply 'epp_reply'/2
			  (From, {'error',{_cor11,'epp',{'bad','endif'}}})
		      %% Line 1083
		      apply 'wait_req_scan'/1
			  (St)
	end
'scan_file'/4 =
    %% Line 1089
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_X_Llp}|[{'string',_X_Ls,Name}|[{',',_X_Lc}|[{'integer',_X_Li,Ln}|[{')',_X_Lrp}|%% Line 1090
												 [{'dot',_X_Ld}|[]]]]]]],%% Line 1090
															 Tf,%% Line 1090
															    From,%% Line 1090
																 St> when 'true' ->
	      let <_cor4> =
		  %% Line 1091
		  apply 'abs_loc'/1
		      (Tf)
	      in  let <_cor5> =
		      %% Line 1091
		      apply 'neg_line'/1
			  (_cor4)
		  in  do  %% Line 1091
			  apply 'enter_file_reply'/4
			      (From, Name, Ln, _cor5)
			  %% Line 1092
			  ( case St of
			      ( <( {'epp',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_rec65,_cor39,_cor40,_cor41}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <Ms> =
					call 'dict':'store'
					    ({'atom','FILE'}, {'none',[{'string',1,Name}|[]]}, _rec65)
				    in  let <Locf> =
					    %% Line 1093
					    apply 'loc'/1
						(Tf)
					in  let <NewLoc> =
						%% Line 1094
						apply 'new_location'/3
						    (Ln, _cor32, Locf)
					    in  let <_cor15> =
						    %% Line 1095
						    call 'erlang':'element'
							(2, Tf)
						in  let <_cor16> =
							%% Line 1095
							apply 'get_line'/1
							    (_cor15)
						    in  let <_cor17> =
							    %% Line 1095
							    call 'erlang':'abs'
								(_cor16)
							in  let <_cor18> =
								%% Line 1095
								call 'erlang':'-'
								    (_cor17, Ln)
							    in  let <Delta> =
								    %% Line 1095
								    call 'erlang':'+'
									(_cor18, _cor33)
								in  let <_cor21> =
									%% Line 1096
									call 'erlang':'setelement'
									    (10, St, Ms)
								    in  let <_cor22> =
									    %% Line 1096
									    call 'erlang':'setelement'
										(6, _cor21, Name)
									in  let <_cor23> =
										%% Line 1096
										call 'erlang':'setelement'
										    (4, _cor22, Delta)
									    in  let <_cor25> =
										    %% Line 1096
										    call 'erlang':'setelement'
											(3, _cor23, NewLoc)
										in  %% Line 1096
										    apply 'wait_req_scan'/1
											(_cor25)
				-| ['compiler_generated'] )
			      ( <_cor42> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','epp'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 1097
	  <_X_Toks,Tf,From,St> when 'true' ->
	      let <_cor26> =
		  %% Line 1098
		  apply 'loc'/1
		      (Tf)
	      in  do  %% Line 1098
		      apply 'epp_reply'/2
			  (From, {'error',{_cor26,'epp',{'bad','file'}}})
		      %% Line 1099
		      apply 'wait_req_scan'/1
			  (St)
	end
'new_location'/3 =
    %% Line 1101
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ln,Le,Lf>
	      when call 'erlang':'is_integer'
		    (Lf) ->
	      let <_cor3> =
		  %% Line 1102
		  call 'erlang':'-'
		      (Le, Lf)
	      in  %% Line 1102
		  call 'erlang':'+'
		      (Ln, _cor3)
	  %% Line 1103
	  <Ln,{Le,_cor9},{Lf,_cor10}> when 'true' ->
	      let <_cor4> =
		  %% Line 1104
		  call 'erlang':'-'
		      (Le, Lf)
	      in  let <_cor5> =
		      %% Line 1104
		      call 'erlang':'+'
			  (Ln, _cor4)
		  in  %% Line 1104
		      {_cor5,1}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'new_location',3}}] )
	    -| ['compiler_generated'] )
	end
'skip_toks'/3 =
    %% Line 1110
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <From,St,[I|Sis]> when 'true' ->
	      %% Line 1111
	      ( case St of
		  ( <( {'epp',_rec69,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'io':'scan_erl_form'
				 (_rec69, '', _cor42) of
			  %% Line 1112
			  <{'ok',[{'-',_X_Lh}|[{'atom',_X_Li,'ifdef'}|_X_Toks]],Cl}> when 'true' ->
			      let <_cor9> =
				  %% Line 1113
				  call 'erlang':'setelement'
				      (3, St, Cl)
			      in  %% Line 1113
				  apply 'skip_toks'/3
				      (From, _cor9, ['ifdef'|[I|Sis]])
			  %% Line 1114
			  <{'ok',[{'-',_X_Lh}|[{'atom',_X_Li,'ifndef'}|_X_Toks]],Cl}> when 'true' ->
			      let <_cor12> =
				  %% Line 1115
				  call 'erlang':'setelement'
				      (3, St, Cl)
			      in  %% Line 1115
				  apply 'skip_toks'/3
				      (From, _cor12, ['ifndef'|[I|Sis]])
			  %% Line 1116
			  <{'ok',[{'-',_X_Lh}|[{'if',_X_Li}|_X_Toks]],Cl}> when 'true' ->
			      let <_cor15> =
				  %% Line 1117
				  call 'erlang':'setelement'
				      (3, St, Cl)
			      in  %% Line 1117
				  apply 'skip_toks'/3
				      (From, _cor15, ['if'|[I|Sis]])
			  %% Line 1118
			  <{'ok',[{'-',_X_Lh}|[Else = {'atom',_X_Le,'else'}|_X_Toks]],Cl}> when 'true' ->
			      let <_cor18> =
				  %% Line 1119
				  call 'erlang':'setelement'
				      (3, St, Cl)
			      in  %% Line 1119
				  apply 'skip_else'/4
				      (Else, From, _cor18, [I|Sis])
			  %% Line 1120
			  <{'ok',[{'-',_X_Lh}|[{'atom',_X_Le,'endif'}|_X_Toks]],Cl}> when 'true' ->
			      let <_cor21> =
				  %% Line 1121
				  call 'erlang':'setelement'
				      (3, St, Cl)
			      in  %% Line 1121
				  apply 'skip_toks'/3
				      (From, _cor21, Sis)
			  %% Line 1122
			  <{'ok',_X_Toks,Cl}> when 'true' ->
			      let <_cor24> =
				  %% Line 1123
				  call 'erlang':'setelement'
				      (3, St, Cl)
			      in  %% Line 1123
				  apply 'skip_toks'/3
				      (From, _cor24, [I|Sis])
			  %% Line 1124
			  <{'error',E,Cl}> when 'true' ->
			      %% Line 1125
			      case E of
				%% Line 1126
				<{_cor144,'file_io_server','invalid_unicode'}> when 'true' ->
				    do  %% Line 1131
					apply 'epp_reply'/2
					    (From, {'error',E})
					let <_cor25> =
					    %% Line 1132
					    apply 'wait_request'/1
						(St)
					in  %% Line 1132
					    apply 'leave_file'/2
						(_cor25, St)
				%% Line 1133
				<_cor145> when 'true' ->
				    let <_cor28> =
					%% Line 1136
					call 'erlang':'setelement'
					    (3, St, Cl)
				    in  %% Line 1136
					apply 'skip_toks'/3
					    (From, _cor28, [I|Sis])
			      end
			  %% Line 1138
			  <{'eof',Cl}> when 'true' ->
			      let <_rec78> =
				  %% Line 1139
				  [I|Sis]
			      in  let <_cor32> =
				      %% Line 1139
				      call 'erlang':'setelement'
					  (7, St, _rec78)
				  in  let <_cor34> =
					  %% Line 1139
					  call 'erlang':'setelement'
					      (3, _cor32, Cl)
				      in  %% Line 1139
					  apply 'leave_file'/2
					      (From, _cor34)
			  %% Line 1140
			  <{'error',_X_E}> when 'true' ->
			      do  %% Line 1141
				  apply 'epp_reply'/2
				      (From, {'error',{_cor42,'epp','cannot_parse'}})
				  let <_cor37> =
				      %% Line 1142
				      apply 'wait_request'/1
					  (St)
				  in  %% Line 1142
				      apply 'leave_file'/2
					  (_cor37, St)
			  ( <_cor38> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor38})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor53> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1144
	  <From,St,[]> when 'true' ->
	      %% Line 1145
	      apply 'scan_toks'/2
		  (From, St)
	  ( <_cor41,_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41,_cor40,_cor39})
		  -| [{'function_name',{'skip_toks',3}}] )
	    -| ['compiler_generated'] )
	end
'skip_else'/4 =
    %% Line 1147
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Else,From,St,['else'|Sis]> when 'true' ->
	      let <_cor4> =
		  %% Line 1148
		  apply 'loc'/1
		      (Else)
	      in  do  %% Line 1148
		      apply 'epp_reply'/2
			  (From, {'error',{_cor4,'epp',{'illegal',[114|[101|[112|[101|[97|[116|[101|[100]]]]]]]],'else'}}})
		      %% Line 1149
		      apply 'wait_req_skip'/2
			  (St, ['else'|Sis])
	  %% Line 1150
	  <_X_Else,From,St,[_X_I|[]]> when 'true' ->
	      %% Line 1151
	      ( case St of
		  ( <( {'epp',_cor15,_cor16,_cor17,_cor18,_cor19,_rec83,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec81> =
			    ['else'|_rec83]
			in  let <_cor10> =
				call 'erlang':'setelement'
				    (7, St, _rec81)
			    in  apply 'scan_toks'/2
				    (From, _cor10)
		    -| ['compiler_generated'] )
		  ( <_cor26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','epp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1152
	  <_X_Else,From,St,Sis> when 'true' ->
	      %% Line 1153
	      apply 'skip_toks'/3
		  (From, St, Sis)
	end
'macro_pars'/2 =
    %% Line 1159
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{')',_X_Lp}|[{',',Ld}|Ex]],Args> when 'true' ->
	      let <_cor3> =
		  %% Line 1160
		  call 'lists':'reverse'
		      (Args)
	      in  let <_cor2> =
		      %% Line 1160
		      apply 'macro_expansion'/2
			  (Ex, Ld)
		  in  %% Line 1160
		      {'ok',{_cor3,_cor2}}
	  %% Line 1161
	  <[{'var',_cor10,Name}|[{')',_X_Lp}|[{',',Ld}|Ex]]],Args> when 'true' ->
	      %% Line 1162
	      case call 'lists':'member'
		       (Name, Args) of
		<'false'> when 'true' ->
		    let <_cor6> =
			%% Line 1163
			call 'lists':'reverse'
			    ([Name|Args])
		    in  let <_cor5> =
			    %% Line 1163
			    apply 'macro_expansion'/2
				(Ex, Ld)
			in  %% Line 1163
			    {'ok',{_cor6,_cor5}}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1164
	  <[{'var',_X_L,Name}|[{',',_cor11}|Ts]],Args> when 'true' ->
	      %% Line 1165
	      case call 'lists':'member'
		       (Name, Args) of
		<'false'> when 'true' ->
		    %% Line 1166
		    apply 'macro_pars'/2
			(Ts, [Name|Args])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'macro_pars',2}}] )
	    -| ['compiler_generated'] )
	end
'macro_expansion'/2 =
    %% Line 1168
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{')',_X_Lp}|[{'dot',_X_Ld}|[]]],_X_L0> when 'true' ->
	      []
	  %% Line 1169
	  <[{'dot',Ld}|[]],_X_L0> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',Ld,'missing_parenthesis'})
	  %% Line 1170
	  <[T|Ts],_X_L0> when 'true' ->
	      let <_cor2> =
		  %% Line 1171
		  call 'erlang':'element'
		      (2, T)
	      in  let <_cor3> =
		      %% Line 1171
		      apply 'macro_expansion'/2
			  (Ts, _cor2)
		  in  %% Line 1171
		      [T|_cor3]
	  %% Line 1172
	  <[],L0> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',L0,'premature_end'})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'macro_expansion',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_macros'/5 =
    %% Line 1179
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1181
	case _cor0 of
	  <{Ms,U}> when 'true' ->
	      let <Lm> =
		  %% Line 1182
		  apply 'loc'/1
		      (_cor3)
	      in  let <Tinfo> =
		      %% Line 1183
		      call 'erlang':'element'
			  (2, _cor3)
		  in  %% Line 1184
		      case apply 'expand_macro1'/5
			       (_cor4, Lm, _cor2, _cor1, Ms) of
			%% Line 1185
			<{'ok',{'none',Exp}}> when 'true' ->
			    do  %% Line 1186
				apply 'check_uses'/4
				    ([{{_cor4,_cor2},'none'}|[]], [], U, Lm)
				let <_cor8> =
				    %% Line 1187
				    call 'dict':'new'
					()
				in  let <_cor9> =
					%% Line 1187
					apply 'expand_macro'/4
					    (Exp, Tinfo, [], _cor8)
				    in  let <Toks1> =
					    %% Line 1187
					    apply 'expand_macros'/2
						(_cor9, _cor0)
					in  let <_cor11> =
						%% Line 1188
						call 'erlang':'++'
						    (Toks1, _cor1)
					    in  %% Line 1188
						apply 'expand_macros'/2
						    (_cor11, _cor0)
			%% Line 1189
			<{'ok',{As,Exp}}> when 'true' ->
			    let <_cor12> =
				%% Line 1190
				call 'erlang':'length'
				    (As)
			    in  do  %% Line 1190
				    apply 'check_uses'/4
					([{{_cor4,_cor2},_cor12}|[]], [], U, Lm)
				    let <_cor13> =
					%% Line 1191
					call 'dict':'new'
					    ()
				    in  %% Line 1191
					case apply 'bind_args'/5
						 (_cor1, Lm, _cor2, As, _cor13) of
					  <{Bs,Toks1}> when 'true' ->
					      let <_cor15> =
						  %% Line 1192
						  apply 'expand_macro'/4
						      (Exp, Tinfo, Toks1, Bs)
					      in  %% Line 1192
						  apply 'expand_macros'/2
						      (_cor15, _cor0)
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor14})
					    -| ['compiler_generated'] )
					end
			( <_cor16> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor16})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'expand_macro1'/5 =
    %% Line 1195
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Arity> =
	    %% Line 1196
	    apply 'count_args'/3
		(_cor1, _cor3, _cor2)
	in  %% Line 1197
	    case call 'dict':'find'
		     ({_cor4,_cor2}, _cor0) of
	      %% Line 1198
	      <'error'> when 'true' ->
		  %% Line 1199
		  call 'erlang':'throw'
		      ({'error',_cor3,{'undefined',_cor2,Arity}})
	      %% Line 1200
	      <{'ok','undefined'}> when 'true' ->
		  %% Line 1201
		  call 'erlang':'throw'
		      ({'error',_cor3,{'undefined',_cor2,Arity}})
	      %% Line 1202
	      <{'ok',[{'none',Def}|[]]}> when 'true' ->
		  %% Line 1203
		  {'ok',Def}
	      %% Line 1204
	      <{'ok',Defs}>
		  when call 'erlang':'is_list'
			(Defs) ->
		  %% Line 1205
		  case call 'proplists':'get_value'
			   (Arity, Defs) of
		    %% Line 1206
		    <'undefined'> when 'true' ->
			%% Line 1207
			call 'erlang':'throw'
			    ({'error',_cor3,{'mismatch',_cor2}})
		    %% Line 1208
		    <Def> when 'true' ->
			%% Line 1209
			{'ok',Def}
		  end
	      %% Line 1211
	      <{'ok',PreDef}> when 'true' ->
		  %% Line 1212
		  {'ok',PreDef}
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
'check_uses'/4 =
    %% Line 1215
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Anc,_X_U,_X_Lm> when 'true' ->
	      %% Line 1216
	      'ok'
	  %% Line 1217
	  <[M|Rest],Anc,U,Lm> when 'true' ->
	      %% Line 1218
	      case call 'lists':'member'
		       (M, Anc) of
		%% Line 1219
		<'true'> when 'true' ->
		    %% Line 1220
		    case M of
		      <{{_cor11,Name},Arity}> when 'true' ->
			  %% Line 1221
			  call 'erlang':'throw'
			      ({'error',Lm,{'circular',Name,Arity}})
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 1222
		<'false'> when 'true' ->
		    let <L> =
			%% Line 1223
			apply 'get_macro_uses'/2
			    (M, U)
		    in  do  %% Line 1224
			    apply 'check_uses'/4
				(L, [M|Anc], U, Lm)
			    %% Line 1225
			    apply 'check_uses'/4
				(Rest, Anc, U, Lm)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'check_uses',4}}] )
	    -| ['compiler_generated'] )
	end
'get_macro_uses'/2 =
    %% Line 1228
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{M,Arity},U> when 'true' ->
	      %% Line 1229
	      case call 'dict':'find'
		       (M, U) of
		%% Line 1230
		<'error'> when 'true' ->
		    %% Line 1231
		    []
		%% Line 1232
		<{'ok',L}> when 'true' ->
		    let <_cor2> =
			%% Line 1233
			call 'proplists':'get_value'
			    ('none', L, [])
		    in  %% Line 1233
			call 'proplists':'get_value'
			    (Arity, L, _cor2)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_macro_uses',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_macros'/2 =
    %% Line 1238
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'?',_X_Lq}|[MacT = {'atom',_X_Lm,M}|Toks]],Ms> when 'true' ->
	      %% Line 1239
	      apply 'expand_macros'/5
		  ('atom', MacT, M, Toks, Ms)
	  %% Line 1241
	  <[{'?',_X_Lq}|[Tok = {'var',Lm,'LINE'}|Toks]],Ms> when 'true' ->
	      %% Line 1242
	      case call 'erl_scan':'token_info'
		       (Tok, 'line') of
		<{'line',Line}> when 'true' ->
		    let <_cor3> =
			%% Line 1243
			apply 'expand_macros'/2
			    (Toks, Ms)
		    in  %% Line 1243
			[{'integer',Lm,Line}|_cor3]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1244
	  <[{'?',_X_Lq}|[MacT = {'var',_X_Lm,M}|Toks]],Ms> when 'true' ->
	      %% Line 1245
	      apply 'expand_macros'/5
		  ('atom', MacT, M, Toks, Ms)
	  %% Line 1247
	  <[{'?',_X_Lq}|[Token|_X_Toks]],_X_Ms> when 'true' ->
	      let <_cor6> =
		  %% Line 1248
		  case call 'erl_scan':'token_info'
			   (Token, 'text') of
		    %% Line 1249
		    <{'text',Text}> when 'true' ->
			%% Line 1250
			Text
		    %% Line 1251
		    <'undefined'> when 'true' ->
			%% Line 1252
			case call 'erl_scan':'token_info'
				 (Token, 'symbol') of
			  <{'symbol',Symbol}> when 'true' ->
			      %% Line 1253
			      call 'io_lib':'write'
				  (Symbol)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor8> =
		      %% Line 1255
		      apply 'loc'/1
			  (Token)
		  in  %% Line 1255
		      call 'erlang':'throw'
			  ({'error',_cor8,{'call',[63|_cor6]}})
	  %% Line 1256
	  <[T|Ts],Ms> when 'true' ->
	      let <_cor9> =
		  %% Line 1257
		  apply 'expand_macros'/2
		      (Ts, Ms)
	      in  %% Line 1257
		  [T|_cor9]
	  %% Line 1258
	  <[],_X_Ms> when 'true' ->
	      []
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'expand_macros',2}}] )
	    -| ['compiler_generated'] )
	end
'bind_args'/5 =
    %% Line 1263
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'(',_X_Llp}|[{')',_X_Lrp}|Toks]],_X_Lm,_X_M,[],Bs> when 'true' ->
	      %% Line 1264
	      {Bs,Toks}
	  %% Line 1265
	  <[{'(',_X_Llp}|Toks0],Lm,M,[A|As],Bs> when 'true' ->
	      %% Line 1266
	      case apply 'macro_arg'/3
		       (Toks0, [], []) of
		<{Arg,Toks1}> when 'true' ->
		    let <_cor6> =
			%% Line 1267
			apply 'store_arg'/5
			    (Lm, M, A, Arg, Bs)
		    in  %% Line 1267
			apply 'macro_args'/5
			    (Toks1, Lm, M, As, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1268
	  <_X_Toks,Lm,M,_X_As,_X_Bs> when 'true' ->
	      %% Line 1269
	      call 'erlang':'throw'
		  ({'error',Lm,{'mismatch',M}})
	end
'macro_args'/5 =
    %% Line 1271
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{')',_X_Lrp}|Toks],_X_Lm,_X_M,[],Bs> when 'true' ->
	      %% Line 1272
	      {Bs,Toks}
	  %% Line 1273
	  <[{',',_X_Lc}|Toks0],Lm,M,[A|As],Bs> when 'true' ->
	      %% Line 1274
	      case apply 'macro_arg'/3
		       (Toks0, [], []) of
		<{Arg,Toks1}> when 'true' ->
		    let <_cor6> =
			%% Line 1275
			apply 'store_arg'/5
			    (Lm, M, A, Arg, Bs)
		    in  %% Line 1275
			apply 'macro_args'/5
			    (Toks1, Lm, M, As, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1276
	  <[],Lm,M,_X_As,_X_Bs> when 'true' ->
	      %% Line 1277
	      call 'erlang':'throw'
		  ({'error',Lm,{'arg_error',M}})
	  %% Line 1278
	  <_X_Toks,Lm,M,_X_As,_X_Bs> when 'true' ->
	      %% Line 1279
	      call 'erlang':'throw'
		  ({'error',Lm,{'mismatch',M}})
	end
'store_arg'/5 =
    %% Line 1281
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,M,_X_A,[],_X_Bs> when 'true' ->
	      %% Line 1282
	      call 'erlang':'throw'
		  ({'error',L,{'mismatch',M}})
	  %% Line 1283
	  <_X_L,_X_M,A,Arg,Bs> when 'true' ->
	      %% Line 1284
	      call 'dict':'store'
		  (A, Arg, Bs)
	end
'count_args'/3 =
    %% Line 1288
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'(',_X_Llp}|[{')',_X_Lrp}|_X_Toks]],_X_Lm,_X_M> when 'true' ->
	      %% Line 1289
	      0
	  %% Line 1290
	  <[{'(',_X_Llp}|[{',',_X_Lc}|_X_Toks]],Lm,M> when 'true' ->
	      %% Line 1291
	      call 'erlang':'throw'
		  ({'error',Lm,{'arg_error',M}})
	  %% Line 1292
	  <[{'(',_X_Llp}|Toks0],Lm,M> when 'true' ->
	      %% Line 1293
	      case apply 'macro_arg'/3
		       (Toks0, [], []) of
		<{_X_Arg,Toks1}> when 'true' ->
		    %% Line 1294
		    apply 'count_args'/4
			(Toks1, Lm, M, 1)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1295
	  <_X_Toks,_X_Lm,_X_M> when 'true' ->
	      %% Line 1296
	      'none'
	end
'count_args'/4 =
    %% Line 1298
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{')',_X_Lrp}|_X_Toks],_X_Lm,_X_M,NbArgs> when 'true' ->
	      %% Line 1299
	      NbArgs
	  %% Line 1300
	  <[{',',_X_Lc}|[{')',_X_Lrp}|_X_Toks]],Lm,M,_X_NbArgs> when 'true' ->
	      %% Line 1301
	      call 'erlang':'throw'
		  ({'error',Lm,{'arg_error',M}})
	  %% Line 1302
	  <[{',',_X_Lc}|Toks0],Lm,M,NbArgs> when 'true' ->
	      %% Line 1303
	      case apply 'macro_arg'/3
		       (Toks0, [], []) of
		<{_X_Arg,Toks1}> when 'true' ->
		    let <_cor5> =
			%% Line 1304
			call 'erlang':'+'
			    (NbArgs, 1)
		    in  %% Line 1304
			apply 'count_args'/4
			    (Toks1, Lm, M, _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1305
	  <[],Lm,M,_X_NbArgs> when 'true' ->
	      %% Line 1306
	      call 'erlang':'throw'
		  ({'error',Lm,{'arg_error',M}})
	  %% Line 1307
	  <_X_Toks,Lm,M,_X_NbArgs> when 'true' ->
	      %% Line 1308
	      call 'erlang':'throw'
		  ({'error',Lm,{'mismatch',M}})
	end
'macro_arg'/3 =
    %% Line 1315
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{',',Lc}|Toks],[],Arg> when 'true' ->
	      let <_cor3> =
		  %% Line 1316
		  call 'lists':'reverse'
		      (Arg)
	      in  %% Line 1316
		  {_cor3,[{',',Lc}|Toks]}
	  %% Line 1317
	  <[{')',Lrp}|Toks],[],Arg> when 'true' ->
	      let <_cor4> =
		  %% Line 1318
		  call 'lists':'reverse'
		      (Arg)
	      in  %% Line 1318
		  {_cor4,[{')',Lrp}|Toks]}
	  %% Line 1319
	  <[{'(',Llp}|Toks],E,Arg> when 'true' ->
	      %% Line 1320
	      apply 'macro_arg'/3
		  (Toks, [')'|E], [{'(',Llp}|Arg])
	  %% Line 1321
	  <[{'<<',Lls}|Toks],E,Arg> when 'true' ->
	      %% Line 1322
	      apply 'macro_arg'/3
		  (Toks, ['>>'|E], [{'<<',Lls}|Arg])
	  %% Line 1323
	  <[{'[',Lls}|Toks],E,Arg> when 'true' ->
	      %% Line 1324
	      apply 'macro_arg'/3
		  (Toks, [']'|E], [{'[',Lls}|Arg])
	  %% Line 1325
	  <[{'{',Llc}|Toks],E,Arg> when 'true' ->
	      %% Line 1326
	      apply 'macro_arg'/3
		  (Toks, ['}'|E], [{'{',Llc}|Arg])
	  %% Line 1327
	  <[{'begin',Lb}|Toks],E,Arg> when 'true' ->
	      %% Line 1328
	      apply 'macro_arg'/3
		  (Toks, ['end'|E], [{'begin',Lb}|Arg])
	  %% Line 1329
	  <[{'if',Li}|Toks],E,Arg> when 'true' ->
	      %% Line 1330
	      apply 'macro_arg'/3
		  (Toks, ['end'|E], [{'if',Li}|Arg])
	  %% Line 1331
	  <[{'case',Lc}|Toks],E,Arg> when 'true' ->
	      %% Line 1332
	      apply 'macro_arg'/3
		  (Toks, ['end'|E], [{'case',Lc}|Arg])
	  %% Line 1333
	  <[{'fun',Lc}|Toks = [{'(',_cor9}|_cor10]],E,Arg> when 'true' ->
	      %% Line 1334
	      apply 'macro_arg'/3
		  (Toks, ['end'|E], [{'fun',Lc}|Arg])
	  %% Line 1335
	  <[Fun = {'fun',_cor11}|[Name = {'var',_cor12,_cor13}|Toks = [{'(',_cor14}|_cor15]]],E,Arg> when 'true' ->
	      %% Line 1336
	      apply 'macro_arg'/3
		  (Toks, ['end'|E], [Name|[Fun|Arg]])
	  %% Line 1337
	  <[{'receive',Lr}|Toks],E,Arg> when 'true' ->
	      %% Line 1338
	      apply 'macro_arg'/3
		  (Toks, ['end'|E], [{'receive',Lr}|Arg])
	  %% Line 1339
	  <[{'try',Lr}|Toks],E,Arg> when 'true' ->
	      %% Line 1340
	      apply 'macro_arg'/3
		  (Toks, ['end'|E], [{'try',Lr}|Arg])
	  %% Line 1341
	  <[{'cond',Lr}|Toks],E,Arg> when 'true' ->
	      %% Line 1342
	      apply 'macro_arg'/3
		  (Toks, ['end'|E], [{'cond',Lr}|Arg])
	  %% Line 1343
	  <[{Rb,Lrb}|Toks],[_cor16|E],Arg>
	      when call 'erlang':'=:='
		    (_cor16,
		     Rb) ->
	      %% Line 1344
	      apply 'macro_arg'/3
		  (Toks, E, [{Rb,Lrb}|Arg])
	  %% Line 1345
	  <[T|Toks],E,Arg> when 'true' ->
	      %% Line 1346
	      apply 'macro_arg'/3
		  (Toks, E, [T|Arg])
	  %% Line 1347
	  <[],_X_E,Arg> when 'true' ->
	      let <_cor5> =
		  %% Line 1348
		  call 'lists':'reverse'
		      (Arg)
	      in  %% Line 1348
		  {_cor5,[]}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'macro_arg',3}}] )
	    -| ['compiler_generated'] )
	end
'expand_macro'/4 =
    %% Line 1356
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'var',_X_Lv,V}|Ts],L,Rest,Bs> when 'true' ->
	      %% Line 1357
	      case call 'dict':'find'
		       (V, Bs) of
		%% Line 1358
		<{'ok',Val}> when 'true' ->
		    %% Line 1360
		    apply 'expand_arg'/5
			(Val, Ts, L, Rest, Bs)
		%% Line 1361
		<'error'> when 'true' ->
		    let <_cor4> =
			%% Line 1362
			apply 'expand_macro'/4
			    (Ts, L, Rest, Bs)
		    in  %% Line 1362
			[{'var',L,V}|_cor4]
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1364
	  <[{'?',_cor15}|[{'?',_cor16}|[{'var',_X_Lv,V}|Ts]]],L,Rest,Bs> when 'true' ->
	      %% Line 1365
	      case call 'dict':'find'
		       (V, Bs) of
		%% Line 1366
		<{'ok',Val}> when 'true' ->
		    let <_cor6> =
			%% Line 1368
			apply 'stringify'/2
			    (Val, L)
		    in  %% Line 1368
			apply 'expand_arg'/5
			    (_cor6, Ts, L, Rest, Bs)
		%% Line 1369
		<'error'> when 'true' ->
		    let <_cor7> =
			%% Line 1370
			apply 'expand_macro'/4
			    (Ts, L, Rest, Bs)
		    in  %% Line 1370
			[{'var',L,V}|_cor7]
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1372
	  <[T|Ts],L,Rest,Bs> when 'true' ->
	      let <_cor9> =
		  %% Line 1373
		  call 'erlang':'setelement'
		      (2, T, L)
	      in  let <_cor10> =
		      %% Line 1373
		      apply 'expand_macro'/4
			  (Ts, L, Rest, Bs)
		  in  %% Line 1373
		      [_cor9|_cor10]
	  %% Line 1374
	  <[],_X_L,Rest,_X_Bs> when 'true' ->
	      Rest
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'expand_macro',4}}] )
	    -| ['compiler_generated'] )
	end
'expand_arg'/5 =
    %% Line 1376
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[A|As],Ts,_X_L,Rest,Bs> when 'true' ->
	      let <NextL> =
		  %% Line 1378
		  call 'erlang':'element'
		      (2, A)
	      in  let <_cor6> =
		      %% Line 1379
		      apply 'expand_arg'/5
			  (As, Ts, NextL, Rest, Bs)
		  in  %% Line 1379
		      [A|_cor6]
	  %% Line 1380
	  <[],Ts,L,Rest,Bs> when 'true' ->
	      %% Line 1381
	      apply 'expand_macro'/4
		  (Ts, L, Rest, Bs)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'expand_arg',5}}] )
	    -| ['compiler_generated'] )
	end
'token_src'/1 =
    %% Line 1388
    fun (_cor0) ->
	case _cor0 of
	  <{'dot',_cor2}> when 'true' ->
	      %% Line 1389
	      [46]
	  %% Line 1390
	  <{X,_cor3}>
	      when call 'erlang':'is_atom'
		    (X) ->
	      %% Line 1391
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 1392
	  <{'var',_cor4,X}> when 'true' ->
	      %% Line 1393
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 1394
	  <{'char',_cor5,C}> when 'true' ->
	      %% Line 1395
	      call 'io_lib':'write_char'
		  (C)
	  %% Line 1396
	  <{'string',_cor6,X}> when 'true' ->
	      %% Line 1397
	      call 'io_lib':'write_string'
		  (X)
	  %% Line 1398
	  <{_cor7,_cor8,X}> when 'true' ->
	      %% Line 1399
	      call 'io_lib':'format'
		  ([126|[119]], [X|[]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'token_src',1}}] )
	    -| ['compiler_generated'] )
	end
'stringify1'/1 =
    %% Line 1401
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1402
	      []
	  %% Line 1403
	  <[T|Tokens]> when 'true' ->
	      let <_cor1> =
		  %% Line 1404
		  apply 'token_src'/1
		      (T)
	      in  let <_cor2> =
		      %% Line 1404
		      call 'io_lib':'format'
			  ([32|[126|[116|[115]]]], [_cor1|[]])
		  in  let <_cor3> =
			  %% Line 1404
			  apply 'stringify1'/1
			      (Tokens)
		      in  %% Line 1404
			  [_cor2|_cor3]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'stringify1',1}}] )
	    -| ['compiler_generated'] )
	end
'stringify'/2 =
    %% Line 1406
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1407
	    apply 'stringify1'/1
		(_cor1)
	in  %% Line 1407
	    case call 'lists':'flatten'
		     (_cor2) of
	      <[32|S]> when 'true' ->
		  %% Line 1408
		  [{'string',_cor0,S}|[]]
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'epp_request'/1 =
    %% Line 1415
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1416
	    call 'erlang':'monitor'
		('process', _cor0)
	in  %% Line 1416
	    apply 'wait_epp_reply'/2
		(_cor0, _cor1)
'epp_request'/2 =
    %% Line 1418
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1419
	    call 'erlang':'self'
		()
	in  do  %% Line 1419
		call 'erlang':'!'
		    (_cor1, {'epp_request',_cor2,_cor0})
		let <_cor3> =
		    %% Line 1420
		    call 'erlang':'monitor'
			('process', _cor1)
		in  %% Line 1420
		    apply 'wait_epp_reply'/2
			(_cor1, _cor3)
'epp_reply'/2 =
    %% Line 1422
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1423
	    call 'erlang':'self'
		()
	in  do  %% Line 1423
		call 'erlang':'!'
		    (_cor1, {'epp_reply',_cor2,_cor0})
		%% Line 1424
		'ok'
'wait_epp_reply'/2 =
    %% Line 1426
    fun (_cor1,_cor0) ->
	%% Line 1427
	receive
	  %% Line 1428
	  <{'epp_reply',_cor4,Rep}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      do  %% Line 1429
		  call 'erlang':'demonitor'
		      (_cor0, ['flush'])
		  %% Line 1430
		  Rep
	  %% Line 1431
	  <{'DOWN',_cor5,_cor6,_cor7,E}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor0) ->
	      %% Line 1432
	      receive
		<{'epp_reply',_cor8,Rep}>
		    when call 'erlang':'=:='
			  (_cor8,
			   _cor1) ->
		    Rep
	      after %% Line 1433
		    0 ->
		%% Line 1433
		call 'erlang':'exit'
		    (E)
	after 'infinity' ->
	  'true'
'expand_var'/1 =
    %% Line 1437
    fun (_cor0) ->
	case _cor0 of
	  <NewName = [36|_cor4]> when 'true' ->
	      let <_cor1> =
		  catch
		      %% Line 1438
		      apply 'expand_var1'/1
			  (NewName)
	      in  %% Line 1438
		  case _cor1 of
		    %% Line 1439
		    <{'ok',ExpName}> when 'true' ->
			%% Line 1440
			ExpName
		    %% Line 1441
		    <_cor5> when 'true' ->
			%% Line 1442
			NewName
		  end
	  %% Line 1444
	  <NewName> when 'true' ->
	      %% Line 1445
	      NewName
	end
'expand_var1'/1 =
    %% Line 1447
    fun (_cor0) ->
	%% Line 1448
	case call 'filename':'split'
		 (_cor0) of
	  <[[36|Var]|Rest]> when 'true' ->
	      let <Value> =
		  %% Line 1449
		  call 'os':'getenv'
		      (Var)
	      in  %% Line 1450
		  case call 'erlang':'=/='
			   (Value, 'false') of
		    <'true'> when 'true' ->
			let <_cor4> =
			    %% Line 1451
			    apply 'fname_join'/1
				([Value|Rest])
			in  %% Line 1451
			    {'ok',_cor4}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'fname_join'/1 =
    %% Line 1453
    fun (_cor0) ->
	case _cor0 of
	  <[[46]|Rest = [_cor2|_cor3]]> when 'true' ->
	      %% Line 1454
	      apply 'fname_join'/1
		  (Rest)
	  %% Line 1455
	  <Components> when 'true' ->
	      %% Line 1456
	      call 'filename':'join'
		  (Components)
	end
'loc_attr'/1 =
    %% Line 1459
    fun (_cor0) ->
	case _cor0 of
	  <Line>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1460
	      Line
	  %% Line 1461
	  <{Line,_X_Column}> when 'true' ->
	      %% Line 1462
	      Line
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'loc_attr',1}}] )
	    -| ['compiler_generated'] )
	end
'loc'/1 =
    %% Line 1464
    fun (_cor0) ->
	%% Line 1465
	case call 'erl_scan':'token_info'
		 (_cor0, 'location') of
	  <{'location',Location}> when 'true' ->
	      %% Line 1466
	      Location
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'abs_loc'/1 =
    %% Line 1468
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1469
	    call 'erlang':'element'
		(2, _cor0)
	in  let <_cor2> =
		%% Line 1469
		apply 'abs_line'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 1469
		    call 'erlang':'setelement'
			(2, _cor0, _cor2)
		in  %% Line 1469
		    apply 'loc'/1
			(_cor3)
'neg_line'/1 =
    %% Line 1471
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 1472
	    ( fun (_cor2) ->
		  let <_cor1> =
		      call 'erlang':'abs'
			  (_cor2)
		  in  call 'erlang':'-'
			  (_cor1)
	      -| [{'id',{0,0,'-neg_line/1-fun-0-'}}] )
	in  %% Line 1472
	    call 'erl_scan':'set_attribute'
		('line', _cor0, _cor4)
'abs_line'/1 =
    %% Line 1474
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1475
	    ( fun (_cor1) ->
		  call 'erlang':'abs'
		      (_cor1)
	      -| [{'id',{0,0,'-abs_line/1-fun-0-'}}] )
	in  %% Line 1475
	    call 'erl_scan':'set_attribute'
		('line', _cor0, _cor3)
'add_line'/2 =
    %% Line 1477
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1478
	    ( fun (_cor2) ->
		  call 'erlang':'+'
		      (_cor2, _cor0)
	      -| [{'id',{0,0,'-add_line/2-fun-0-'}}] )
	in  %% Line 1478
	    call 'erl_scan':'set_attribute'
		('line', _cor1, _cor4)
'start_loc'/1 =
    %% Line 1480
    fun (_cor0) ->
	case _cor0 of
	  <Line>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1481
	      1
	  %% Line 1482
	  <{_X_Line,_X_Column}> when 'true' ->
	      %% Line 1483
	      {1,1}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'start_loc',1}}] )
	    -| ['compiler_generated'] )
	end
'get_line'/1 =
    %% Line 1485
    fun (_cor0) ->
	case _cor0 of
	  <Line>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1486
	      Line
	  %% Line 1487
	  <{Line,_X_Column}> when 'true' ->
	      %% Line 1488
	      Line
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_line',1}}] )
	    -| ['compiler_generated'] )
	end
'interpret_file_attribute'/1 =
    %% Line 1525
    fun (_cor0) ->
	%% Line 1526
	apply 'interpret_file_attr'/3
	    (_cor0, 0, [])
'interpret_file_attr'/3 =
    %% Line 1528
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Form = {'attribute',Loc,'file',{File,Line}}|Forms],%% Line 1529
							       Delta,%% Line 1529
								     Fs> when 'true' ->
	      %% Line 1530
	      case call 'erl_scan':'attributes_info'
		       (Loc, 'line') of
		<{'line',L}> when 'true' ->
		    %% Line 1531
		    case <> of
		      %% Line 1532
		      <>
			  when call 'erlang':'<'
				(L,
				 0) ->
			  let <_cor4> =
			      %% Line 1534
			      call 'erlang':'abs'
				  (L)
			  in  let <_cor5> =
				  %% Line 1534
				  call 'erlang':'+'
				      (_cor4, Delta)
			      in  let <_cor6> =
				      %% Line 1534
				      call 'erlang':'-'
					  (_cor5, Line)
				  in  %% Line 1534
				      apply 'interpret_file_attr'/3
					  (Forms, _cor6, Fs)
		      %% Line 1535
		      <> when 'true' ->
			  %% Line 1538
			  case Fs of
			    %% Line 1539
			    <[_cor22|[_cor23|Fs1]]>
				when call 'erlang':'=:='
				      (_cor23,
				       File) ->
				let <_cor7> =
				    %% Line 1540
				    apply 'interpret_file_attr'/3
					(Forms, 0, [File|Fs1])
				in  %% Line 1540
				    [Form|_cor7]
			    %% Line 1541
			    <_cor24> when 'true' ->
				let <_cor8> =
				    %% Line 1542
				    apply 'interpret_file_attr'/3
					(Forms, 0, [File|Fs])
				in  %% Line 1542
				    [Form|_cor8]
			  end
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1545
	  <[Form0|Forms],Delta,Fs> when 'true' ->
	      let <F> =
		  %% Line 1546
		  ( fun (_cor14) ->
			let <F2> =
			    %% Line 1547
			    ( fun (_cor11) ->
				  let <_cor10> =
				      call 'erlang':'abs'
					  (_cor11)
				  in  call 'erlang':'+'
					  (_cor10, Delta)
			      -| [{'id',{0,0,'-interpret_file_attr/3-fun-0-'}}] )
			in  %% Line 1548
			    call 'erl_scan':'set_attribute'
				('line', _cor14, F2)
		    -| [{'id',{0,0,'-interpret_file_attr/3-fun-1-'}}] )
	      in  let <Form> =
		      %% Line 1550
		      call 'erl_lint':'modify_line'
			  (Form0, F)
		  in  let <_cor18> =
			  %% Line 1551
			  apply 'interpret_file_attr'/3
			      (Forms, Delta, Fs)
		      in  %% Line 1551
			  [Form|_cor18]
	  %% Line 1552
	  <[],_X_Delta,_X_Fs> when 'true' ->
	      %% Line 1553
	      []
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'interpret_file_attr',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('epp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('epp', _cor0)
end