module 'ets' ['all'/0,
	      'delete'/1,
	      'delete'/2,
	      'delete_all_objects'/1,
	      'delete_object'/2,
	      'file2tab'/1,
	      'file2tab'/2,
	      'filter'/3,
	      'first'/1,
	      'foldl'/3,
	      'foldr'/3,
	      'from_dets'/2,
	      'fun2ms'/1,
	      'give_away'/3,
	      'i'/0,
	      'i'/1,
	      'i'/2,
	      'i'/3,
	      'info'/1,
	      'info'/2,
	      'init_table'/2,
	      'insert'/2,
	      'insert_new'/2,
	      'is_compiled_ms'/1,
	      'last'/1,
	      'lookup'/2,
	      'lookup_element'/3,
	      'match'/1,
	      'match'/2,
	      'match'/3,
	      'match_delete'/2,
	      'match_object'/1,
	      'match_object'/2,
	      'match_object'/3,
	      'match_spec_compile'/1,
	      'match_spec_run'/2,
	      'match_spec_run_r'/3,
	      'member'/2,
	      'module_info'/0,
	      'module_info'/1,
	      'new'/2,
	      'next'/2,
	      'prev'/2,
	      'rename'/2,
	      'repair_continuation'/2,
	      'safe_fixtable'/2,
	      'select'/1,
	      'select'/2,
	      'select'/3,
	      'select_count'/2,
	      'select_delete'/2,
	      'select_reverse'/1,
	      'select_reverse'/2,
	      'select_reverse'/3,
	      'setopts'/2,
	      'slot'/2,
	      'tab2file'/2,
	      'tab2file'/3,
	      'tab2list'/1,
	      'tabfile_info'/1,
	      'table'/1,
	      'table'/2,
	      'test_ms'/2,
	      'to_dets'/2,
	      'update_counter'/3,
	      'update_element'/3]
    attributes [%% Line 45
		'export_type' =
		    %% Line 45
		    [{'tab',0}|[{'tid',0}|[{'match_spec',0}|[{'comp_match_spec',0}|[{'match_pattern',0}]]]]],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'access',{'type',49,'union',[{'atom',49,'public'}|[{'atom',49,'protected'}|[{'atom',49,'private'}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'tab',{'type',50,'union',[{'type',50,'atom',[]}|[{'type',50,'tid',[]}]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'type',{'type',51,'union',[{'atom',51,'set'}|[{'atom',51,'ordered_set'}|[{'atom',51,'bag'}|[{'atom',51,'duplicate_bag'}]]]]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'continuation',{'type',52,'union',[{'atom',52,'$end_of_table'}|[{'type',53,'tuple',[{'type',53,'tab',[]}|[{'type',53,'integer',[]}|[{'type',53,'integer',[]}|[{'type',53,'binary',[]}|[{'type',53,'list',[]}|[{'type',53,'integer',[]}]]]]]]}|[{'type',54,'tuple',[{'type',54,'tab',[]}|[{'var',54,'_'}|[{'var',54,'_'}|[{'type',54,'integer',[]}|[{'type',54,'binary',[]}|[{'type',54,'list',[]}|[{'type',54,'integer',[]}|[{'type',54,'integer',[]}]]]]]]]]}]]]},[]}],
		%% Line 56
		'opaque' =
		    %% Line 56
		    [{'tid',{'type',56,'integer',[]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'match_pattern',{'type',58,'union',[{'type',58,'atom',[]}|[{'type',58,'tuple','any'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'match_spec',{'type',59,'list',[{'type',59,'tuple',[{'type',59,'match_pattern',[]}|[{'type',59,'list',[{'var',59,'_'}]}|[{'type',59,'list',[{'var',59,'_'}]}]]]}]},[]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'all',0},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[]}|[{'type',76,'list',[{'var',76,'Tab'}]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Tab'}|[{'type',77,'tab',[]}]]]]}]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'delete',1},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'Tab'}]}|[{'atom',82,'true'}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Tab'}|[{'type',83,'tab',[]}]]]]}]]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'delete',2},[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'Tab'}|[{'var',88,'Key'}]]}|[{'atom',88,'true'}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Tab'}|[{'type',89,'tab',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Key'}|[{'type',90,'term',[]}]]]]}]]]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'delete_all_objects',1},[{'type',95,'bounded_fun',[{'type',95,'fun',[{'type',95,'product',[{'var',95,'Tab'}]}|[{'atom',95,'true'}]]}|[[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Tab'}|[{'type',96,'tab',[]}]]]]}]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'delete_object',2},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'Tab'}|[{'var',101,'Object'}]]}|[{'atom',101,'true'}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Tab'}|[{'type',102,'tab',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'Object'}|[{'type',103,'tuple','any'}]]]]}]]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'first',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'Tab'}]}|[{'type',108,'union',[{'var',108,'Key'}|[{'atom',108,'$end_of_table'}]]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Tab'}|[{'type',109,'tab',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Key'}|[{'type',110,'term',[]}]]]]}]]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'give_away',3},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'Tab'}|[{'var',115,'Pid'}|[{'var',115,'GiftData'}]]]}|[{'atom',115,'true'}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Tab'}|[{'type',116,'tab',[]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Pid'}|[{'type',117,'pid',[]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'GiftData'}|[{'type',118,'term',[]}]]]]}]]]]]}]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'info',1},[{'type',123,'bounded_fun',[{'type',123,'fun',[{'type',123,'product',[{'var',123,'Tab'}]}|[{'type',123,'union',[{'var',123,'InfoList'}|[{'atom',123,'undefined'}]]}]]}|[[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Tab'}|[{'type',124,'tab',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'InfoList'}|[{'type',125,'list',[{'var',125,'InfoTuple'}]}]]]]}|[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'InfoTuple'}|[{'type',126,'union',[{'type',126,'tuple',[{'atom',126,'compressed'}|[{'type',126,'boolean',[]}]]}|[{'type',127,'tuple',[{'atom',127,'heir'}|[{'type',127,'union',[{'type',127,'pid',[]}|[{'atom',127,'none'}]]}]]}|[{'type',128,'tuple',[{'atom',128,'keypos'}|[{'type',128,'pos_integer',[]}]]}|[{'type',129,'tuple',[{'atom',129,'memory'}|[{'type',129,'non_neg_integer',[]}]]}|[{'type',130,'tuple',[{'atom',130,'name'}|[{'type',130,'atom',[]}]]}|[{'type',131,'tuple',[{'atom',131,'named_table'}|[{'type',131,'boolean',[]}]]}|[{'type',132,'tuple',[{'atom',132,'node'}|[{'type',132,'node',[]}]]}|[{'type',133,'tuple',[{'atom',133,'owner'}|[{'type',133,'pid',[]}]]}|[{'type',134,'tuple',[{'atom',134,'protection'}|[{'type',134,'access',[]}]]}|[{'type',135,'tuple',[{'atom',135,'size'}|[{'type',135,'non_neg_integer',[]}]]}|[{'type',136,'tuple',[{'atom',136,'type'}|[{'type',136,'type',[]}]]}]]]]]]]]]]]}]]]]}]]]]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'info',2},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'Tab'}|[{'var',141,'Item'}]]}|[{'type',141,'union',[{'var',141,'Value'}|[{'atom',141,'undefined'}]]}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Tab'}|[{'type',142,'tab',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Item'}|[{'type',143,'union',[{'atom',143,'compressed'}|[{'atom',143,'fixed'}|[{'atom',143,'heir'}|[{'atom',143,'keypos'}|[{'atom',143,'memory'}|[{'atom',144,'name'}|[{'atom',144,'named_table'}|[{'atom',144,'node'}|[{'atom',144,'owner'}|[{'atom',144,'protection'}|[{'atom',145,'safe_fixed'}|[{'atom',145,'size'}|[{'atom',145,'stats'}|[{'atom',145,'type'}]]]]]]]]]]]]]]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Value'}|[{'type',146,'term',[]}]]]]}]]]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'insert',2},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'Tab'}|[{'var',151,'ObjectOrObjects'}]]}|[{'atom',151,'true'}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Tab'}|[{'type',152,'tab',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'ObjectOrObjects'}|[{'type',153,'union',[{'type',153,'tuple','any'}|[{'type',153,'list',[{'type',153,'tuple','any'}]}]]}]]]]}]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'insert_new',2},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'Tab'}|[{'var',158,'ObjectOrObjects'}]]}|[{'type',158,'boolean',[]}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Tab'}|[{'type',159,'tab',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'ObjectOrObjects'}|[{'type',160,'union',[{'type',160,'tuple','any'}|[{'type',160,'list',[{'type',160,'tuple','any'}]}]]}]]]]}]]]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'is_compiled_ms',1},[{'type',165,'bounded_fun',[{'type',165,'fun',[{'type',165,'product',[{'var',165,'Term'}]}|[{'type',165,'boolean',[]}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Term'}|[{'type',166,'term',[]}]]]]}]]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'last',1},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'Tab'}]}|[{'type',171,'union',[{'var',171,'Key'}|[{'atom',171,'$end_of_table'}]]}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Tab'}|[{'type',172,'tab',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Key'}|[{'type',173,'term',[]}]]]]}]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'lookup',2},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'Tab'}|[{'var',178,'Key'}]]}|[{'type',178,'list',[{'var',178,'Object'}]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Tab'}|[{'type',179,'tab',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Key'}|[{'type',180,'term',[]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Object'}|[{'type',181,'tuple','any'}]]]]}]]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'lookup_element',3},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'Tab'}|[{'var',186,'Key'}|[{'var',186,'Pos'}]]]}|[{'var',186,'Elem'}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Tab'}|[{'type',187,'tab',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Key'}|[{'type',188,'term',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Pos'}|[{'type',189,'pos_integer',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Elem'}|[{'type',190,'union',[{'type',190,'term',[]}|[{'type',190,'list',[{'type',190,'term',[]}]}]]}]]]]}]]]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'match',2},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'Tab'}|[{'var',195,'Pattern'}]]}|[{'type',195,'list',[{'var',195,'Match'}]}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Tab'}|[{'type',196,'tab',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Pattern'}|[{'type',197,'match_pattern',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Match'}|[{'type',198,'list',[{'type',198,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'match',3},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'Tab'}|[{'var',203,'Pattern'}|[{'var',203,'Limit'}]]]}|[{'type',203,'union',[{'type',203,'tuple',[{'type',203,'list',[{'var',203,'Match'}]}|[{'var',203,'Continuation'}]]}|[{'atom',204,'$end_of_table'}]]}]]}|[[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Tab'}|[{'type',205,'tab',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Pattern'}|[{'type',206,'match_pattern',[]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Limit'}|[{'type',207,'pos_integer',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Match'}|[{'type',208,'list',[{'type',208,'term',[]}]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Continuation'}|[{'type',209,'continuation',[]}]]]]}]]]]]]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'match',1},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Continuation'}]}|[{'type',214,'union',[{'type',214,'tuple',[{'type',214,'list',[{'var',214,'Match'}]}|[{'var',214,'Continuation'}]]}|[{'atom',215,'$end_of_table'}]]}]]}|[[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Match'}|[{'type',216,'list',[{'type',216,'term',[]}]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Continuation'}|[{'type',217,'continuation',[]}]]]]}]]]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'match_object',2},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'Tab'}|[{'var',222,'Pattern'}]]}|[{'type',222,'list',[{'var',222,'Object'}]}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Tab'}|[{'type',223,'tab',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Pattern'}|[{'type',224,'match_pattern',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Object'}|[{'type',225,'tuple','any'}]]]]}]]]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'match_object',3},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'Tab'}|[{'var',230,'Pattern'}|[{'var',230,'Limit'}]]]}|[{'type',230,'union',[{'type',230,'tuple',[{'type',230,'list',[{'var',230,'Match'}]}|[{'var',230,'Continuation'}]]}|[{'atom',231,'$end_of_table'}]]}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Tab'}|[{'type',232,'tab',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Pattern'}|[{'type',233,'match_pattern',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Limit'}|[{'type',234,'pos_integer',[]}]]]]}|[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'Match'}|[{'type',235,'list',[{'type',235,'term',[]}]}]]]]}|[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Continuation'}|[{'type',236,'continuation',[]}]]]]}]]]]]]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'match_object',1},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'Continuation'}]}|[{'type',241,'union',[{'type',241,'tuple',[{'type',241,'list',[{'var',241,'Match'}]}|[{'var',241,'Continuation'}]]}|[{'atom',242,'$end_of_table'}]]}]]}|[[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Match'}|[{'type',243,'list',[{'type',243,'term',[]}]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Continuation'}|[{'type',244,'continuation',[]}]]]]}]]]]}]}],
		%% Line 249
		'spec' =
		    %% Line 249
		    [{{'match_spec_compile',1},[{'type',249,'bounded_fun',[{'type',249,'fun',[{'type',249,'product',[{'var',249,'MatchSpec'}]}|[{'var',249,'CompiledMatchSpec'}]]}|[[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'MatchSpec'}|[{'type',250,'match_spec',[]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'CompiledMatchSpec'}|[{'type',251,'comp_match_spec',[]}]]]]}]]]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'match_spec_run_r',3},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'List'}|[{'var',256,'CompiledMatchSpec'}|[{'type',256,'list',[]}]]]}|[{'type',256,'list',[]}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'List'}|[{'type',257,'list',[{'type',257,'tuple','any'}]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'CompiledMatchSpec'}|[{'type',258,'comp_match_spec',[]}]]]]}]]]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'member',2},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'Tab'}|[{'var',263,'Key'}]]}|[{'type',263,'boolean',[]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Tab'}|[{'type',264,'tab',[]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Key'}|[{'type',265,'term',[]}]]]]}]]]]}]}],
		%% Line 270
		'spec' =
		    %% Line 270
		    [{{'new',2},[{'type',270,'bounded_fun',[{'type',270,'fun',[{'type',270,'product',[{'var',270,'Name'}|[{'var',270,'Options'}]]}|[{'type',270,'union',[{'type',270,'tid',[]}|[{'type',270,'atom',[]}]]}]]}|[[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Name'}|[{'type',271,'atom',[]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Options'}|[{'type',272,'list',[{'var',272,'Option'}]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Option'}|[{'type',273,'union',[{'var',273,'Type'}|[{'var',273,'Access'}|[{'atom',273,'named_table'}|[{'type',273,'tuple',[{'atom',273,'keypos'}|[{'var',273,'Pos'}]]}|[{'type',274,'tuple',[{'atom',274,'heir'}|[{'ann_type',274,[{'var',274,'Pid'}|[{'type',274,'pid',[]}]]}|[{'var',274,'HeirData'}]]]}|[{'type',274,'tuple',[{'atom',274,'heir'}|[{'atom',274,'none'}]]}|[{'var',274,'Tweaks'}]]]]]]]}]]]]}|[{'type',275,'constraint',[{'atom',275,'is_subtype'}|[[{'var',275,'Type'}|[{'type',275,'type',[]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Access'}|[{'type',276,'access',[]}]]]]}|[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'Tweaks'}|[{'type',277,'union',[{'type',277,'tuple',[{'atom',277,'write_concurrency'}|[{'type',277,'boolean',[]}]]}|[{'type',278,'tuple',[{'atom',278,'read_concurrency'}|[{'type',278,'boolean',[]}]]}|[{'atom',279,'compressed'}]]]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Pos'}|[{'type',280,'pos_integer',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'HeirData'}|[{'type',281,'term',[]}]]]]}]]]]]]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'next',2},[{'type',286,'bounded_fun',[{'type',286,'fun',[{'type',286,'product',[{'var',286,'Tab'}|[{'var',286,'Key1'}]]}|[{'type',286,'union',[{'var',286,'Key2'}|[{'atom',286,'$end_of_table'}]]}]]}|[[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Tab'}|[{'type',287,'tab',[]}]]]]}|[{'type',288,'constraint',[{'atom',288,'is_subtype'}|[[{'var',288,'Key1'}|[{'type',288,'term',[]}]]]]}|[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Key2'}|[{'type',289,'term',[]}]]]]}]]]]]}]}],
		%% Line 294
		'spec' =
		    %% Line 294
		    [{{'prev',2},[{'type',294,'bounded_fun',[{'type',294,'fun',[{'type',294,'product',[{'var',294,'Tab'}|[{'var',294,'Key1'}]]}|[{'type',294,'union',[{'var',294,'Key2'}|[{'atom',294,'$end_of_table'}]]}]]}|[[{'type',295,'constraint',[{'atom',295,'is_subtype'}|[[{'var',295,'Tab'}|[{'type',295,'tab',[]}]]]]}|[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'Key1'}|[{'type',296,'term',[]}]]]]}|[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'Key2'}|[{'type',297,'term',[]}]]]]}]]]]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'rename',2},[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'var',303,'Tab'}|[{'var',303,'Name'}]]}|[{'var',303,'Name'}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Tab'}|[{'type',304,'tab',[]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'Name'}|[{'type',305,'atom',[]}]]]]}]]]]}]}],
		%% Line 310
		'spec' =
		    %% Line 310
		    [{{'safe_fixtable',2},[{'type',310,'bounded_fun',[{'type',310,'fun',[{'type',310,'product',[{'var',310,'Tab'}|[{'var',310,'Fix'}]]}|[{'atom',310,'true'}]]}|[[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Tab'}|[{'type',311,'tab',[]}]]]]}|[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Fix'}|[{'type',312,'boolean',[]}]]]]}]]]]}]}],
		%% Line 317
		'spec' =
		    %% Line 317
		    [{{'select',2},[{'type',317,'bounded_fun',[{'type',317,'fun',[{'type',317,'product',[{'var',317,'Tab'}|[{'var',317,'MatchSpec'}]]}|[{'type',317,'list',[{'var',317,'Match'}]}]]}|[[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'Tab'}|[{'type',318,'tab',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'MatchSpec'}|[{'type',319,'match_spec',[]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Match'}|[{'type',320,'term',[]}]]]]}]]]]]}]}],
		%% Line 325
		'spec' =
		    %% Line 325
		    [{{'select',3},[{'type',325,'bounded_fun',[{'type',325,'fun',[{'type',325,'product',[{'var',325,'Tab'}|[{'var',325,'MatchSpec'}|[{'var',325,'Limit'}]]]}|[{'type',325,'union',[{'type',325,'tuple',[{'type',325,'list',[{'var',325,'Match'}]}|[{'var',325,'Continuation'}]]}|[{'atom',326,'$end_of_table'}]]}]]}|[[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'Tab'}|[{'type',327,'tab',[]}]]]]}|[{'type',328,'constraint',[{'atom',328,'is_subtype'}|[[{'var',328,'MatchSpec'}|[{'type',328,'match_spec',[]}]]]]}|[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Limit'}|[{'type',329,'pos_integer',[]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Match'}|[{'type',330,'term',[]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'Continuation'}|[{'type',331,'continuation',[]}]]]]}]]]]]]]}]}],
		%% Line 336
		'spec' =
		    %% Line 336
		    [{{'select',1},[{'type',336,'bounded_fun',[{'type',336,'fun',[{'type',336,'product',[{'var',336,'Continuation'}]}|[{'type',336,'union',[{'type',336,'tuple',[{'type',336,'list',[{'var',336,'Match'}]}|[{'var',336,'Continuation'}]]}|[{'atom',336,'$end_of_table'}]]}]]}|[[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'Match'}|[{'type',337,'term',[]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Continuation'}|[{'type',338,'continuation',[]}]]]]}]]]]}]}],
		%% Line 343
		'spec' =
		    %% Line 343
		    [{{'select_count',2},[{'type',343,'bounded_fun',[{'type',343,'fun',[{'type',343,'product',[{'var',343,'Tab'}|[{'var',343,'MatchSpec'}]]}|[{'var',343,'NumMatched'}]]}|[[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'Tab'}|[{'type',344,'tab',[]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'MatchSpec'}|[{'type',345,'match_spec',[]}]]]]}|[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'NumMatched'}|[{'type',346,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 351
		'spec' =
		    %% Line 351
		    [{{'select_delete',2},[{'type',351,'bounded_fun',[{'type',351,'fun',[{'type',351,'product',[{'var',351,'Tab'}|[{'var',351,'MatchSpec'}]]}|[{'var',351,'NumDeleted'}]]}|[[{'type',352,'constraint',[{'atom',352,'is_subtype'}|[[{'var',352,'Tab'}|[{'type',352,'tab',[]}]]]]}|[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'MatchSpec'}|[{'type',353,'match_spec',[]}]]]]}|[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'NumDeleted'}|[{'type',354,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 359
		'spec' =
		    %% Line 359
		    [{{'select_reverse',2},[{'type',359,'bounded_fun',[{'type',359,'fun',[{'type',359,'product',[{'var',359,'Tab'}|[{'var',359,'MatchSpec'}]]}|[{'type',359,'list',[{'var',359,'Match'}]}]]}|[[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Tab'}|[{'type',360,'tab',[]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'MatchSpec'}|[{'type',361,'match_spec',[]}]]]]}|[{'type',362,'constraint',[{'atom',362,'is_subtype'}|[[{'var',362,'Match'}|[{'type',362,'term',[]}]]]]}]]]]]}]}],
		%% Line 367
		'spec' =
		    %% Line 367
		    [{{'select_reverse',3},[{'type',367,'bounded_fun',[{'type',367,'fun',[{'type',367,'product',[{'var',367,'Tab'}|[{'var',367,'MatchSpec'}|[{'var',367,'Limit'}]]]}|[{'type',367,'union',[{'type',367,'tuple',[{'type',367,'list',[{'var',367,'Match'}]}|[{'var',367,'Continuation'}]]}|[{'atom',368,'$end_of_table'}]]}]]}|[[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Tab'}|[{'type',369,'tab',[]}]]]]}|[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'MatchSpec'}|[{'type',370,'match_spec',[]}]]]]}|[{'type',371,'constraint',[{'atom',371,'is_subtype'}|[[{'var',371,'Limit'}|[{'type',371,'pos_integer',[]}]]]]}|[{'type',372,'constraint',[{'atom',372,'is_subtype'}|[[{'var',372,'Match'}|[{'type',372,'term',[]}]]]]}|[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'Continuation'}|[{'type',373,'continuation',[]}]]]]}]]]]]]]}]}],
		%% Line 378
		'spec' =
		    %% Line 378
		    [{{'select_reverse',1},[{'type',378,'bounded_fun',[{'type',378,'fun',[{'type',378,'product',[{'var',378,'Continuation'}]}|[{'type',378,'union',[{'type',378,'tuple',[{'type',378,'list',[{'var',378,'Match'}]}|[{'var',378,'Continuation'}]]}|[{'atom',379,'$end_of_table'}]]}]]}|[[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'Continuation'}|[{'type',380,'continuation',[]}]]]]}|[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'Match'}|[{'type',381,'term',[]}]]]]}]]]]}]}],
		%% Line 386
		'spec' =
		    %% Line 386
		    [{{'setopts',2},[{'type',386,'bounded_fun',[{'type',386,'fun',[{'type',386,'product',[{'var',386,'Tab'}|[{'var',386,'Opts'}]]}|[{'atom',386,'true'}]]}|[[{'type',387,'constraint',[{'atom',387,'is_subtype'}|[[{'var',387,'Tab'}|[{'type',387,'tab',[]}]]]]}|[{'type',388,'constraint',[{'atom',388,'is_subtype'}|[[{'var',388,'Opts'}|[{'type',388,'union',[{'var',388,'Opt'}|[{'type',388,'list',[{'var',388,'Opt'}]}]]}]]]]}|[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'Opt'}|[{'type',389,'union',[{'type',389,'tuple',[{'atom',389,'heir'}|[{'type',389,'pid',[]}|[{'var',389,'HeirData'}]]]}|[{'type',389,'tuple',[{'atom',389,'heir'}|[{'atom',389,'none'}]]}]]}]]]]}|[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'HeirData'}|[{'type',390,'term',[]}]]]]}]]]]]]}]}],
		%% Line 395
		'spec' =
		    %% Line 395
		    [{{'slot',2},[{'type',395,'bounded_fun',[{'type',395,'fun',[{'type',395,'product',[{'var',395,'Tab'}|[{'var',395,'I'}]]}|[{'type',395,'union',[{'type',395,'list',[{'var',395,'Object'}]}|[{'atom',395,'$end_of_table'}]]}]]}|[[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Tab'}|[{'type',396,'tab',[]}]]]]}|[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'I'}|[{'type',397,'non_neg_integer',[]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'Object'}|[{'type',398,'tuple','any'}]]]]}]]]]]}]}],
		%% Line 403
		'spec' =
		    %% Line 403
		    [{{'update_counter',3},[{'type',403,'bounded_fun',[{'type',403,'fun',[{'type',403,'product',[{'var',403,'Tab'}|[{'var',403,'Key'}|[{'var',403,'UpdateOp'}]]]}|[{'var',403,'Result'}]]}|[[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'Tab'}|[{'type',404,'tab',[]}]]]]}|[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'Key'}|[{'type',405,'term',[]}]]]]}|[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'UpdateOp'}|[{'type',406,'union',[{'type',406,'tuple',[{'var',406,'Pos'}|[{'var',406,'Incr'}]]}|[{'type',406,'tuple',[{'var',406,'Pos'}|[{'var',406,'Incr'}|[{'var',406,'Threshold'}|[{'var',406,'SetValue'}]]]]}]]}]]]]}|[{'type',407,'constraint',[{'atom',407,'is_subtype'}|[[{'var',407,'Pos'}|[{'type',407,'integer',[]}]]]]}|[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'Incr'}|[{'type',408,'integer',[]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'Threshold'}|[{'type',409,'integer',[]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'SetValue'}|[{'type',410,'integer',[]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Result'}|[{'type',411,'integer',[]}]]]]}]]]]]]]]]]}|[{'type',412,'bounded_fun',[{'type',412,'fun',[{'type',412,'product',[{'var',412,'Tab'}|[{'var',412,'Key'}|[{'type',412,'list',[{'var',412,'UpdateOp'}]}]]]}|[{'type',412,'list',[{'var',412,'Result'}]}]]}|[[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'Tab'}|[{'type',413,'tab',[]}]]]]}|[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'Key'}|[{'type',414,'term',[]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'UpdateOp'}|[{'type',415,'union',[{'type',415,'tuple',[{'var',415,'Pos'}|[{'var',415,'Incr'}]]}|[{'type',415,'tuple',[{'var',415,'Pos'}|[{'var',415,'Incr'}|[{'var',415,'Threshold'}|[{'var',415,'SetValue'}]]]]}]]}]]]]}|[{'type',416,'constraint',[{'atom',416,'is_subtype'}|[[{'var',416,'Pos'}|[{'type',416,'integer',[]}]]]]}|[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Incr'}|[{'type',417,'integer',[]}]]]]}|[{'type',418,'constraint',[{'atom',418,'is_subtype'}|[[{'var',418,'Threshold'}|[{'type',418,'integer',[]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'SetValue'}|[{'type',419,'integer',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Result'}|[{'type',420,'integer',[]}]]]]}]]]]]]]]]]}|[{'type',421,'bounded_fun',[{'type',421,'fun',[{'type',421,'product',[{'var',421,'Tab'}|[{'var',421,'Key'}|[{'var',421,'Incr'}]]]}|[{'var',421,'Result'}]]}|[[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Tab'}|[{'type',422,'tab',[]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Key'}|[{'type',423,'term',[]}]]]]}|[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'Incr'}|[{'type',424,'integer',[]}]]]]}|[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'Result'}|[{'type',425,'integer',[]}]]]]}]]]]]]}]]]}],
		%% Line 430
		'spec' =
		    %% Line 430
		    [{{'update_element',3},[{'type',430,'bounded_fun',[{'type',430,'fun',[{'type',430,'product',[{'var',430,'Tab'}|[{'var',430,'Key'}|[{'ann_type',430,[{'var',430,'ElementSpec'}|[{'type',430,'tuple',[{'var',430,'Pos'}|[{'var',430,'Value'}]]}]]}]]]}|[{'type',430,'boolean',[]}]]}|[[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Tab'}|[{'type',431,'tab',[]}]]]]}|[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Key'}|[{'type',432,'term',[]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'Pos'}|[{'type',433,'pos_integer',[]}]]]]}|[{'type',434,'constraint',[{'atom',434,'is_subtype'}|[[{'var',434,'Value'}|[{'type',434,'term',[]}]]]]}]]]]]]}|[{'type',435,'bounded_fun',[{'type',435,'fun',[{'type',435,'product',[{'var',435,'Tab'}|[{'var',435,'Key'}|[{'ann_type',435,[{'var',435,'ElementSpec'}|[{'type',435,'list',[{'type',435,'tuple',[{'var',435,'Pos'}|[{'var',435,'Value'}]]}]}]]}]]]}|[{'type',435,'boolean',[]}]]}|[[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'Tab'}|[{'type',436,'tab',[]}]]]]}|[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'Key'}|[{'type',437,'term',[]}]]]]}|[{'type',438,'constraint',[{'atom',438,'is_subtype'}|[[{'var',438,'Pos'}|[{'type',438,'pos_integer',[]}]]]]}|[{'type',439,'constraint',[{'atom',439,'is_subtype'}|[[{'var',439,'Value'}|[{'type',439,'term',[]}]]]]}]]]]]]}]]}],
		%% Line 446
		'opaque' =
		    %% Line 446
		    [{'comp_match_spec',{'type',446,'binary',[]},[]}],
		%% Line 448
		'spec' =
		    %% Line 448
		    [{{'match_spec_run',2},[{'type',448,'bounded_fun',[{'type',448,'fun',[{'type',448,'product',[{'var',448,'List'}|[{'var',448,'CompiledMatchSpec'}]]}|[{'type',448,'list',[]}]]}|[[{'type',449,'constraint',[{'atom',449,'is_subtype'}|[[{'var',449,'List'}|[{'type',449,'list',[{'type',449,'tuple','any'}]}]]]]}|[{'type',450,'constraint',[{'atom',450,'is_subtype'}|[[{'var',450,'CompiledMatchSpec'}|[{'type',450,'comp_match_spec',[]}]]]]}]]]]}]}],
		%% Line 455
		'spec' =
		    %% Line 455
		    [{{'repair_continuation',2},[{'type',455,'bounded_fun',[{'type',455,'fun',[{'type',455,'product',[{'var',455,'Continuation'}|[{'var',455,'MatchSpec'}]]}|[{'var',455,'Continuation'}]]}|[[{'type',456,'constraint',[{'atom',456,'is_subtype'}|[[{'var',456,'Continuation'}|[{'type',456,'continuation',[]}]]]]}|[{'type',457,'constraint',[{'atom',457,'is_subtype'}|[[{'var',457,'MatchSpec'}|[{'type',457,'match_spec',[]}]]]]}]]]]}]}],
		%% Line 491
		'spec' =
		    %% Line 491
		    [{{'fun2ms',1},[{'type',491,'bounded_fun',[{'type',491,'fun',[{'type',491,'product',[{'var',491,'LiteralFun'}]}|[{'var',491,'MatchSpec'}]]}|[[{'type',492,'constraint',[{'atom',492,'is_subtype'}|[[{'var',492,'LiteralFun'}|[{'type',492,'function',[]}]]]]}|[{'type',493,'constraint',[{'atom',493,'is_subtype'}|[[{'var',493,'MatchSpec'}|[{'type',493,'match_spec',[]}]]]]}]]]]}]}],
		%% Line 517
		'spec' =
		    %% Line 517
		    [{{'foldl',3},[{'type',517,'bounded_fun',[{'type',517,'fun',[{'type',517,'product',[{'var',517,'Function'}|[{'var',517,'Acc0'}|[{'var',517,'Tab'}]]]}|[{'var',517,'Acc1'}]]}|[[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Function'}|[{'type',518,'fun',[{'type',518,'product',[{'ann_type',518,[{'var',518,'Element'}|[{'type',518,'term',[]}]]}|[{'var',518,'AccIn'}]]}|[{'var',518,'AccOut'}]]}]]]]}|[{'type',519,'constraint',[{'atom',519,'is_subtype'}|[[{'var',519,'Tab'}|[{'type',519,'tab',[]}]]]]}|[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'Acc0'}|[{'type',520,'term',[]}]]]]}|[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'Acc1'}|[{'type',521,'term',[]}]]]]}|[{'type',522,'constraint',[{'atom',522,'is_subtype'}|[[{'var',522,'AccIn'}|[{'type',522,'term',[]}]]]]}|[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'AccOut'}|[{'type',523,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 544
		'spec' =
		    %% Line 544
		    [{{'foldr',3},[{'type',544,'bounded_fun',[{'type',544,'fun',[{'type',544,'product',[{'var',544,'Function'}|[{'var',544,'Acc0'}|[{'var',544,'Tab'}]]]}|[{'var',544,'Acc1'}]]}|[[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'Function'}|[{'type',545,'fun',[{'type',545,'product',[{'ann_type',545,[{'var',545,'Element'}|[{'type',545,'term',[]}]]}|[{'var',545,'AccIn'}]]}|[{'var',545,'AccOut'}]]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Tab'}|[{'type',546,'tab',[]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'Acc0'}|[{'type',547,'term',[]}]]]]}|[{'type',548,'constraint',[{'atom',548,'is_subtype'}|[[{'var',548,'Acc1'}|[{'type',548,'term',[]}]]]]}|[{'type',549,'constraint',[{'atom',549,'is_subtype'}|[[{'var',549,'AccIn'}|[{'type',549,'term',[]}]]]]}|[{'type',550,'constraint',[{'atom',550,'is_subtype'}|[[{'var',550,'AccOut'}|[{'type',550,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 571
		'spec' =
		    %% Line 571
		    [{{'from_dets',2},[{'type',571,'bounded_fun',[{'type',571,'fun',[{'type',571,'product',[{'var',571,'Tab'}|[{'var',571,'DetsTab'}]]}|[{'atom',571,'true'}]]}|[[{'type',572,'constraint',[{'atom',572,'is_subtype'}|[[{'var',572,'Tab'}|[{'type',572,'tab',[]}]]]]}|[{'type',573,'constraint',[{'atom',573,'is_subtype'}|[[{'var',573,'DetsTab'}|[{'remote_type',573,[{'atom',573,'dets'}|[{'atom',573,'tab_name'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 589
		'spec' =
		    %% Line 589
		    [{{'to_dets',2},[{'type',589,'bounded_fun',[{'type',589,'fun',[{'type',589,'product',[{'var',589,'Tab'}|[{'var',589,'DetsTab'}]]}|[{'var',589,'DetsTab'}]]}|[[{'type',590,'constraint',[{'atom',590,'is_subtype'}|[[{'var',590,'Tab'}|[{'type',590,'tab',[]}]]]]}|[{'type',591,'constraint',[{'atom',591,'is_subtype'}|[[{'var',591,'DetsTab'}|[{'remote_type',591,[{'atom',591,'dets'}|[{'atom',591,'tab_name'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 607
		'spec' =
		    %% Line 607
		    [{{'test_ms',2},[{'type',607,'bounded_fun',[{'type',607,'fun',[{'type',607,'product',[{'var',607,'Tuple'}|[{'var',607,'MatchSpec'}]]}|[{'type',607,'union',[{'type',607,'tuple',[{'atom',607,'ok'}|[{'var',607,'Result'}]]}|[{'type',607,'tuple',[{'atom',607,'error'}|[{'var',607,'Errors'}]]}]]}]]}|[[{'type',608,'constraint',[{'atom',608,'is_subtype'}|[[{'var',608,'Tuple'}|[{'type',608,'tuple','any'}]]]]}|[{'type',609,'constraint',[{'atom',609,'is_subtype'}|[[{'var',609,'MatchSpec'}|[{'type',609,'match_spec',[]}]]]]}|[{'type',610,'constraint',[{'atom',610,'is_subtype'}|[[{'var',610,'Result'}|[{'type',610,'term',[]}]]]]}|[{'type',611,'constraint',[{'atom',611,'is_subtype'}|[[{'var',611,'Errors'}|[{'type',611,'list',[{'type',611,'tuple',[{'type',611,'union',[{'atom',611,'warning'}|[{'atom',611,'error'}]]}|[{'type',611,'string',[]}]]}]}]]]]}]]]]]]}]}],
		%% Line 621
		'spec' =
		    %% Line 621
		    [{{'init_table',2},[{'type',621,'bounded_fun',[{'type',621,'fun',[{'type',621,'product',[{'var',621,'Tab'}|[{'var',621,'InitFun'}]]}|[{'atom',621,'true'}]]}|[[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'Tab'}|[{'type',622,'tab',[]}]]]]}|[{'type',623,'constraint',[{'atom',623,'is_subtype'}|[[{'var',623,'InitFun'}|[{'type',623,'fun',[{'type',623,'product',[{'var',623,'Arg'}]}|[{'var',623,'Res'}]]}]]]]}|[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'Arg'}|[{'type',624,'union',[{'atom',624,'read'}|[{'atom',624,'close'}]]}]]]]}|[{'type',625,'constraint',[{'atom',625,'is_subtype'}|[[{'var',625,'Res'}|[{'type',625,'union',[{'atom',625,'end_of_input'}|[{'type',625,'tuple',[{'ann_type',625,[{'var',625,'Objects'}|[{'type',625,'list',[{'type',625,'term',[]}]}]]}|[{'var',625,'InitFun'}]]}|[{'type',625,'term',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 650
		'spec' =
		    %% Line 650
		    [{{'match_delete',2},[{'type',650,'bounded_fun',[{'type',650,'fun',[{'type',650,'product',[{'var',650,'Tab'}|[{'var',650,'Pattern'}]]}|[{'atom',650,'true'}]]}|[[{'type',651,'constraint',[{'atom',651,'is_subtype'}|[[{'var',651,'Tab'}|[{'type',651,'tab',[]}]]]]}|[{'type',652,'constraint',[{'atom',652,'is_subtype'}|[[{'var',652,'Pattern'}|[{'type',652,'match_pattern',[]}]]]]}]]]]}]}],
		%% Line 660
		'spec' =
		    %% Line 660
		    [{{'tab2list',1},[{'type',660,'bounded_fun',[{'type',660,'fun',[{'type',660,'product',[{'var',660,'Tab'}]}|[{'type',660,'list',[{'var',660,'Object'}]}]]}|[[{'type',661,'constraint',[{'atom',661,'is_subtype'}|[[{'var',661,'Tab'}|[{'type',661,'tab',[]}]]]]}|[{'type',662,'constraint',[{'atom',662,'is_subtype'}|[[{'var',662,'Object'}|[{'type',662,'tuple','any'}]]]]}]]]]}]}],
		%% Line 667
		'spec' =
		    %% Line 667
		    [{{'filter',3},[{'type',667,'fun',[{'type',667,'product',[{'type',667,'tab',[]}|[{'type',667,'function',[]}|[{'type',667,'list',[{'type',667,'term',[]}]}]]]}|[{'type',667,'list',[{'type',667,'term',[]}]}]]}]}],
		%% Line 695
		'type' =
		    %% Line 695
		    [{{'record','filetab_options'},[{'typed_record_field',{'record_field',697,{'atom',697,'object_count'},{'atom',697,'false'}},{'type',697,'boolean',[]}}|[{'typed_record_field',{'record_field',698,{'atom',698,'md5sum'},{'atom',698,'false'}},{'type',698,'boolean',[]}}]],[]}],
		%% Line 701
		'spec' =
		    %% Line 701
		    [{{'tab2file',2},[{'type',701,'bounded_fun',[{'type',701,'fun',[{'type',701,'product',[{'var',701,'Tab'}|[{'var',701,'Filename'}]]}|[{'type',701,'union',[{'atom',701,'ok'}|[{'type',701,'tuple',[{'atom',701,'error'}|[{'var',701,'Reason'}]]}]]}]]}|[[{'type',702,'constraint',[{'atom',702,'is_subtype'}|[[{'var',702,'Tab'}|[{'type',702,'tab',[]}]]]]}|[{'type',703,'constraint',[{'atom',703,'is_subtype'}|[[{'var',703,'Filename'}|[{'remote_type',703,[{'atom',703,'file'}|[{'atom',703,'name'}|[[]]]]}]]]]}|[{'type',704,'constraint',[{'atom',704,'is_subtype'}|[[{'var',704,'Reason'}|[{'type',704,'term',[]}]]]]}]]]]]}]}],
		%% Line 709
		'spec' =
		    %% Line 709
		    [{{'tab2file',3},[{'type',709,'bounded_fun',[{'type',709,'fun',[{'type',709,'product',[{'var',709,'Tab'}|[{'var',709,'Filename'}|[{'var',709,'Options'}]]]}|[{'type',709,'union',[{'atom',709,'ok'}|[{'type',709,'tuple',[{'atom',709,'error'}|[{'var',709,'Reason'}]]}]]}]]}|[[{'type',710,'constraint',[{'atom',710,'is_subtype'}|[[{'var',710,'Tab'}|[{'type',710,'tab',[]}]]]]}|[{'type',711,'constraint',[{'atom',711,'is_subtype'}|[[{'var',711,'Filename'}|[{'remote_type',711,[{'atom',711,'file'}|[{'atom',711,'name'}|[[]]]]}]]]]}|[{'type',712,'constraint',[{'atom',712,'is_subtype'}|[[{'var',712,'Options'}|[{'type',712,'list',[{'var',712,'Option'}]}]]]]}|[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'Option'}|[{'type',713,'tuple',[{'atom',713,'extended_info'}|[{'type',713,'list',[{'var',713,'ExtInfo'}]}]]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'ExtInfo'}|[{'type',714,'union',[{'atom',714,'md5sum'}|[{'atom',714,'object_count'}]]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Reason'}|[{'type',715,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 878
		'spec' =
		    %% Line 878
		    [{{'file2tab',1},[{'type',878,'bounded_fun',[{'type',878,'fun',[{'type',878,'product',[{'var',878,'Filename'}]}|[{'type',878,'union',[{'type',878,'tuple',[{'atom',878,'ok'}|[{'var',878,'Tab'}]]}|[{'type',878,'tuple',[{'atom',878,'error'}|[{'var',878,'Reason'}]]}]]}]]}|[[{'type',879,'constraint',[{'atom',879,'is_subtype'}|[[{'var',879,'Filename'}|[{'remote_type',879,[{'atom',879,'file'}|[{'atom',879,'name'}|[[]]]]}]]]]}|[{'type',880,'constraint',[{'atom',880,'is_subtype'}|[[{'var',880,'Tab'}|[{'type',880,'tab',[]}]]]]}|[{'type',881,'constraint',[{'atom',881,'is_subtype'}|[[{'var',881,'Reason'}|[{'type',881,'term',[]}]]]]}]]]]]}]}],
		%% Line 886
		'spec' =
		    %% Line 886
		    [{{'file2tab',2},[{'type',886,'bounded_fun',[{'type',886,'fun',[{'type',886,'product',[{'var',886,'Filename'}|[{'var',886,'Options'}]]}|[{'type',886,'union',[{'type',886,'tuple',[{'atom',886,'ok'}|[{'var',886,'Tab'}]]}|[{'type',886,'tuple',[{'atom',886,'error'}|[{'var',886,'Reason'}]]}]]}]]}|[[{'type',887,'constraint',[{'atom',887,'is_subtype'}|[[{'var',887,'Filename'}|[{'remote_type',887,[{'atom',887,'file'}|[{'atom',887,'name'}|[[]]]]}]]]]}|[{'type',888,'constraint',[{'atom',888,'is_subtype'}|[[{'var',888,'Tab'}|[{'type',888,'tab',[]}]]]]}|[{'type',889,'constraint',[{'atom',889,'is_subtype'}|[[{'var',889,'Options'}|[{'type',889,'list',[{'var',889,'Option'}]}]]]]}|[{'type',890,'constraint',[{'atom',890,'is_subtype'}|[[{'var',890,'Option'}|[{'type',890,'tuple',[{'atom',890,'verify'}|[{'type',890,'boolean',[]}]]}]]]]}|[{'type',891,'constraint',[{'atom',891,'is_subtype'}|[[{'var',891,'Reason'}|[{'type',891,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1285
		'spec' =
		    %% Line 1285
		    [{{'tabfile_info',1},[{'type',1285,'bounded_fun',[{'type',1285,'fun',[{'type',1285,'product',[{'var',1285,'Filename'}]}|[{'type',1285,'union',[{'type',1285,'tuple',[{'atom',1285,'ok'}|[{'var',1285,'TableInfo'}]]}|[{'type',1285,'tuple',[{'atom',1285,'error'}|[{'var',1285,'Reason'}]]}]]}]]}|[[{'type',1286,'constraint',[{'atom',1286,'is_subtype'}|[[{'var',1286,'Filename'}|[{'remote_type',1286,[{'atom',1286,'file'}|[{'atom',1286,'name'}|[[]]]]}]]]]}|[{'type',1287,'constraint',[{'atom',1287,'is_subtype'}|[[{'var',1287,'TableInfo'}|[{'type',1287,'list',[{'var',1287,'InfoItem'}]}]]]]}|[{'type',1288,'constraint',[{'atom',1288,'is_subtype'}|[[{'var',1288,'InfoItem'}|[{'type',1288,'union',[{'type',1288,'tuple',[{'atom',1288,'name'}|[{'type',1288,'atom',[]}]]}|[{'type',1289,'tuple',[{'atom',1289,'type'}|[{'var',1289,'Type'}]]}|[{'type',1290,'tuple',[{'atom',1290,'protection'}|[{'var',1290,'Protection'}]]}|[{'type',1291,'tuple',[{'atom',1291,'named_table'}|[{'type',1291,'boolean',[]}]]}|[{'type',1292,'tuple',[{'atom',1292,'keypos'}|[{'type',1292,'non_neg_integer',[]}]]}|[{'type',1293,'tuple',[{'atom',1293,'size'}|[{'type',1293,'non_neg_integer',[]}]]}|[{'type',1294,'tuple',[{'atom',1294,'extended_info'}|[{'type',1294,'list',[{'var',1294,'ExtInfo'}]}]]}|[{'type',1295,'tuple',[{'atom',1295,'version'}|[{'type',1295,'tuple',[{'ann_type',1295,[{'var',1295,'Major'}|[{'type',1295,'non_neg_integer',[]}]]}|[{'ann_type',1296,[{'var',1296,'Minor'}|[{'type',1296,'non_neg_integer',[]}]]}]]}]]}]]]]]]]]}]]]]}|[{'type',1297,'constraint',[{'atom',1297,'is_subtype'}|[[{'var',1297,'ExtInfo'}|[{'type',1297,'union',[{'atom',1297,'md5sum'}|[{'atom',1297,'object_count'}]]}]]]]}|[{'type',1298,'constraint',[{'atom',1298,'is_subtype'}|[[{'var',1298,'Type'}|[{'type',1298,'union',[{'atom',1298,'bag'}|[{'atom',1298,'duplicate_bag'}|[{'atom',1298,'ordered_set'}|[{'atom',1298,'set'}]]]]}]]]]}|[{'type',1299,'constraint',[{'atom',1299,'is_subtype'}|[[{'var',1299,'Protection'}|[{'type',1299,'union',[{'atom',1299,'private'}|[{'atom',1299,'protected'}|[{'atom',1299,'public'}]]]}]]]]}|[{'type',1300,'constraint',[{'atom',1300,'is_subtype'}|[[{'var',1300,'Reason'}|[{'type',1300,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1347
		'spec' =
		    %% Line 1347
		    [{{'table',1},[{'type',1347,'bounded_fun',[{'type',1347,'fun',[{'type',1347,'product',[{'var',1347,'Tab'}]}|[{'var',1347,'QueryHandle'}]]}|[[{'type',1348,'constraint',[{'atom',1348,'is_subtype'}|[[{'var',1348,'Tab'}|[{'type',1348,'tab',[]}]]]]}|[{'type',1349,'constraint',[{'atom',1349,'is_subtype'}|[[{'var',1349,'QueryHandle'}|[{'remote_type',1349,[{'atom',1349,'qlc'}|[{'atom',1349,'query_handle'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1354
		'spec' =
		    %% Line 1354
		    [{{'table',2},[{'type',1354,'bounded_fun',[{'type',1354,'fun',[{'type',1354,'product',[{'var',1354,'Tab'}|[{'var',1354,'Options'}]]}|[{'var',1354,'QueryHandle'}]]}|[[{'type',1355,'constraint',[{'atom',1355,'is_subtype'}|[[{'var',1355,'Tab'}|[{'type',1355,'tab',[]}]]]]}|[{'type',1356,'constraint',[{'atom',1356,'is_subtype'}|[[{'var',1356,'QueryHandle'}|[{'remote_type',1356,[{'atom',1356,'qlc'}|[{'atom',1356,'query_handle'}|[[]]]]}]]]]}|[{'type',1357,'constraint',[{'atom',1357,'is_subtype'}|[[{'var',1357,'Options'}|[{'type',1357,'union',[{'type',1357,'list',[{'var',1357,'Option'}]}|[{'var',1357,'Option'}]]}]]]]}|[{'type',1358,'constraint',[{'atom',1358,'is_subtype'}|[[{'var',1358,'Option'}|[{'type',1358,'union',[{'type',1358,'tuple',[{'atom',1358,'n_objects'}|[{'var',1358,'NObjects'}]]}|[{'type',1359,'tuple',[{'atom',1359,'traverse'}|[{'var',1359,'TraverseMethod'}]]}]]}]]]]}|[{'type',1360,'constraint',[{'atom',1360,'is_subtype'}|[[{'var',1360,'NObjects'}|[{'type',1360,'union',[{'atom',1360,'default'}|[{'type',1360,'pos_integer',[]}]]}]]]]}|[{'type',1361,'constraint',[{'atom',1361,'is_subtype'}|[[{'var',1361,'TraverseMethod'}|[{'type',1361,'union',[{'atom',1361,'first_next'}|[{'atom',1361,'last_prev'}|[{'atom',1362,'select'}|[{'type',1362,'tuple',[{'atom',1362,'select'}|[{'ann_type',1362,[{'var',1362,'MatchSpec'}|[{'type',1362,'match_spec',[]}]]}]]}]]]]}]]]]}]]]]]]]]}]}],
		%% Line 1493
		'spec' =
		    %% Line 1493
		    [{{'i',0},[{'type',1493,'fun',[{'type',1493,'product',[]}|[{'atom',1493,'ok'}]]}]}],
		%% Line 1552
		'spec' =
		    %% Line 1552
		    [{{'i',1},[{'type',1552,'bounded_fun',[{'type',1552,'fun',[{'type',1552,'product',[{'var',1552,'Tab'}]}|[{'atom',1552,'ok'}]]}|[[{'type',1553,'constraint',[{'atom',1553,'is_subtype'}|[[{'var',1553,'Tab'}|[{'type',1553,'tab',[]}]]]]}]]]}]}],
		%% Line 1558
		'spec' =
		    %% Line 1558
		    [{{'i',2},[{'type',1558,'fun',[{'type',1558,'product',[{'type',1558,'tab',[]}|[{'type',1558,'pos_integer',[]}]]}|[{'atom',1558,'ok'}]]}]}],
		%% Line 1563
		'spec' =
		    %% Line 1563
		    [{{'i',3},[{'type',1563,'fun',[{'type',1563,'product',[{'type',1563,'tab',[]}|[{'type',1563,'pos_integer',[]}|[{'type',1563,'pos_integer',[]}]]]}|[{'atom',1563,'ok'}]]}]}]]
'all'/0 =
    %% Line 79
    fun () ->
	%% Line 80
	call 'erlang':'nif_error'
	    ('undef')
'delete'/1 =
    %% Line 85
    fun (_cor0) ->
	%% Line 86
	call 'erlang':'nif_error'
	    ('undef')
'delete'/2 =
    %% Line 92
    fun (_cor1,_cor0) ->
	%% Line 93
	call 'erlang':'nif_error'
	    ('undef')
'delete_all_objects'/1 =
    %% Line 98
    fun (_cor0) ->
	%% Line 99
	call 'erlang':'nif_error'
	    ('undef')
'delete_object'/2 =
    %% Line 105
    fun (_cor1,_cor0) ->
	%% Line 106
	call 'erlang':'nif_error'
	    ('undef')
'first'/1 =
    %% Line 112
    fun (_cor0) ->
	%% Line 113
	call 'erlang':'nif_error'
	    ('undef')
'give_away'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	%% Line 121
	call 'erlang':'nif_error'
	    ('undef')
'info'/1 =
    %% Line 138
    fun (_cor0) ->
	%% Line 139
	call 'erlang':'nif_error'
	    ('undef')
'info'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	%% Line 149
	call 'erlang':'nif_error'
	    ('undef')
'insert'/2 =
    %% Line 155
    fun (_cor1,_cor0) ->
	%% Line 156
	call 'erlang':'nif_error'
	    ('undef')
'insert_new'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	%% Line 163
	call 'erlang':'nif_error'
	    ('undef')
'is_compiled_ms'/1 =
    %% Line 168
    fun (_cor0) ->
	%% Line 169
	call 'erlang':'nif_error'
	    ('undef')
'last'/1 =
    %% Line 175
    fun (_cor0) ->
	%% Line 176
	call 'erlang':'nif_error'
	    ('undef')
'lookup'/2 =
    %% Line 183
    fun (_cor1,_cor0) ->
	%% Line 184
	call 'erlang':'nif_error'
	    ('undef')
'lookup_element'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	%% Line 193
	call 'erlang':'nif_error'
	    ('undef')
'match'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	%% Line 201
	call 'erlang':'nif_error'
	    ('undef')
'match'/3 =
    %% Line 211
    fun (_cor2,_cor1,_cor0) ->
	%% Line 212
	call 'erlang':'nif_error'
	    ('undef')
'match'/1 =
    %% Line 219
    fun (_cor0) ->
	%% Line 220
	call 'erlang':'nif_error'
	    ('undef')
'match_object'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	%% Line 228
	call 'erlang':'nif_error'
	    ('undef')
'match_object'/3 =
    %% Line 238
    fun (_cor2,_cor1,_cor0) ->
	%% Line 239
	call 'erlang':'nif_error'
	    ('undef')
'match_object'/1 =
    %% Line 246
    fun (_cor0) ->
	%% Line 247
	call 'erlang':'nif_error'
	    ('undef')
'match_spec_compile'/1 =
    %% Line 253
    fun (_cor0) ->
	%% Line 254
	call 'erlang':'nif_error'
	    ('undef')
'match_spec_run_r'/3 =
    %% Line 260
    fun (_cor2,_cor1,_cor0) ->
	%% Line 261
	call 'erlang':'nif_error'
	    ('undef')
'member'/2 =
    %% Line 267
    fun (_cor1,_cor0) ->
	%% Line 268
	call 'erlang':'nif_error'
	    ('undef')
'new'/2 =
    %% Line 283
    fun (_cor1,_cor0) ->
	%% Line 284
	call 'erlang':'nif_error'
	    ('undef')
'next'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	%% Line 292
	call 'erlang':'nif_error'
	    ('undef')
'prev'/2 =
    %% Line 299
    fun (_cor1,_cor0) ->
	%% Line 300
	call 'erlang':'nif_error'
	    ('undef')
'rename'/2 =
    %% Line 307
    fun (_cor1,_cor0) ->
	%% Line 308
	call 'erlang':'nif_error'
	    ('undef')
'safe_fixtable'/2 =
    %% Line 314
    fun (_cor1,_cor0) ->
	%% Line 315
	call 'erlang':'nif_error'
	    ('undef')
'select'/2 =
    %% Line 322
    fun (_cor1,_cor0) ->
	%% Line 323
	call 'erlang':'nif_error'
	    ('undef')
'select'/3 =
    %% Line 333
    fun (_cor2,_cor1,_cor0) ->
	%% Line 334
	call 'erlang':'nif_error'
	    ('undef')
'select'/1 =
    %% Line 340
    fun (_cor0) ->
	%% Line 341
	call 'erlang':'nif_error'
	    ('undef')
'select_count'/2 =
    %% Line 348
    fun (_cor1,_cor0) ->
	%% Line 349
	call 'erlang':'nif_error'
	    ('undef')
'select_delete'/2 =
    %% Line 356
    fun (_cor1,_cor0) ->
	%% Line 357
	call 'erlang':'nif_error'
	    ('undef')
'select_reverse'/2 =
    %% Line 364
    fun (_cor1,_cor0) ->
	%% Line 365
	call 'erlang':'nif_error'
	    ('undef')
'select_reverse'/3 =
    %% Line 375
    fun (_cor2,_cor1,_cor0) ->
	%% Line 376
	call 'erlang':'nif_error'
	    ('undef')
'select_reverse'/1 =
    %% Line 383
    fun (_cor0) ->
	%% Line 384
	call 'erlang':'nif_error'
	    ('undef')
'setopts'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	%% Line 393
	call 'erlang':'nif_error'
	    ('undef')
'slot'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	%% Line 401
	call 'erlang':'nif_error'
	    ('undef')
'update_counter'/3 =
    %% Line 427
    fun (_cor2,_cor1,_cor0) ->
	%% Line 428
	call 'erlang':'nif_error'
	    ('undef')
'update_element'/3 =
    %% Line 441
    fun (_cor2,_cor1,_cor0) ->
	%% Line 442
	call 'erlang':'nif_error'
	    ('undef')
'match_spec_run'/2 =
    %% Line 452
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 453
	    call 'ets':'match_spec_run_r'
		(_cor1, _cor0, [])
	in  %% Line 453
	    call 'lists':'reverse'
		(_cor2)
'repair_continuation'/2 =
    %% Line 460
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'$end_of_table',_cor26> when 'true' ->
	      %% Line 461
	      '$end_of_table'
	  %% Line 463
	  <Untouched = {Table,Lastkey,EndCondition,N2,Bin,L2,N3,N4},MS>
	      when %% Line 465
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (N2)
		    in  let <_cor3> =
			    %% Line 466
			    call 'erlang':'byte_size'
				(Bin)
			in  let <_cor4> =
				%% Line 466
				call 'erlang':'=:='
				    (_cor3, 0)
			    in  let <_cor5> =
				    %% Line 467
				    call 'erlang':'is_list'
					(L2)
				in  let <_cor6> =
					%% Line 468
					call 'erlang':'is_integer'
					    (N3)
				    in  let <_cor7> =
					    %% Line 469
					    call 'erlang':'is_integer'
						(N4)
					in  let <_cor8> =
						call 'erlang':'and'
						    (_cor6, _cor7)
					    in  let <_cor9> =
						    call 'erlang':'and'
							(_cor5, _cor8)
						in  let <_cor10> =
							call 'erlang':'and'
							    (_cor4, _cor9)
						    in  call 'erlang':'and'
							    (_cor2, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 470
	      case call 'ets':'is_compiled_ms'
		       (Bin) of
		%% Line 471
		<'true'> when 'true' ->
		    %% Line 472
		    Untouched
		%% Line 473
		<'false'> when 'true' ->
		    let <_cor11> =
			%% Line 474
			call 'ets':'match_spec_compile'
			    (MS)
		    in  %% Line 474
			{Table,Lastkey,EndCondition,N2,_cor11,L2,N3,N4}
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 477
	  <Untouched = {Table,N1,N2,Bin,L,N3},MS>
	      when %% Line 479
		try
		    let <_cor13> =
			call 'erlang':'is_integer'
			    (N1)
		    in  let <_cor14> =
			    %% Line 480
			    call 'erlang':'is_integer'
				(N2)
			in  let <_cor15> =
				%% Line 481
				call 'erlang':'byte_size'
				    (Bin)
			    in  let <_cor16> =
				    %% Line 481
				    call 'erlang':'=:='
					(_cor15, 0)
				in  let <_cor17> =
					%% Line 482
					call 'erlang':'is_list'
					    (L)
				    in  let <_cor18> =
					    %% Line 483
					    call 'erlang':'is_integer'
						(N3)
					in  let <_cor19> =
						call 'erlang':'and'
						    (_cor17, _cor18)
					    in  let <_cor20> =
						    call 'erlang':'and'
							(_cor16, _cor19)
						in  let <_cor21> =
							call 'erlang':'and'
							    (_cor14, _cor20)
						    in  call 'erlang':'and'
							    (_cor13, _cor21)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 484
	      case call 'ets':'is_compiled_ms'
		       (Bin) of
		%% Line 485
		<'true'> when 'true' ->
		    %% Line 486
		    Untouched
		%% Line 487
		<'false'> when 'true' ->
		    let <_cor22> =
			%% Line 488
			call 'ets':'match_spec_compile'
			    (MS)
		    in  %% Line 488
			{Table,N1,N2,_cor22,L,N3}
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor23})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24})
		  -| [{'function_name',{'repair_continuation',2}}] )
	    -| ['compiler_generated'] )
	end
'fun2ms'/1 =
    %% Line 495
    fun (_cor0) ->
	case _cor0 of
	  <ShellFun>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 497
	      case call 'erl_eval':'fun_data'
		       (ShellFun) of
		%% Line 498
		<{'fun_data',ImportList,Clauses}> when 'true' ->
		    %% Line 499
		    case call 'ms_transform':'transform_from_shell'
			     (%% Line 500
			      'ets', %% Line 500
				     Clauses, %% Line 500
					      ImportList) of
		      %% Line 501
		      <{'error',[{_cor5,[{_cor6,_cor7,Code}|_cor8]}|_cor9],_cor10}> when 'true' ->
			  let <_cor1> =
			      %% Line 503
			      call 'ms_transform':'format_error'
				  (Code)
			  in  do  %% Line 502
				  call 'io':'format'
				      ([69|[114|[114|[111|[114|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]], %% Line 503
													     [_cor1|[]])
				  %% Line 504
				  {'error','transform_error'}
		      %% Line 505
		      <Else> when 'true' ->
			  %% Line 506
			  Else
		    end
		%% Line 508
		<_cor11> when 'true' ->
		    %% Line 509
		    call 'erlang':'exit'
			({'badarg',{'ets','fun2ms',['function'|['called'|['with'|['real'|['fun'|['should'|['be'|['transformed'|['with'|['parse_transform'|['or'|['called'|['with'|['a'|['fun'|['generated'|['in'|['the'|['shell']]]]]]]]]]]]]]]]]]]}})
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'fun2ms',1}}] )
	    -| ['compiler_generated'] )
	end
'foldl'/3 =
    %% Line 525
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 526
	    call 'ets':'safe_fixtable'
		(_cor0, 'true')
	    let <First> =
		%% Line 527
		call 'ets':'first'
		    (_cor0)
	    in  %% Line 528
		letrec
		    'after$^0'/0 =
			fun () ->
			    %% Line 531
			    call 'ets':'safe_fixtable'
				(_cor0, 'false')
		in  try
			%% Line 529
			apply 'do_foldl'/4
			    (_cor2, _cor1, First, _cor0)
		    of <_cor4> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    _cor4
		    catch <_cor7,_cor6,_cor5> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    primop 'raise'
				(_cor5, _cor6)
'do_foldl'/4 =
    %% Line 534
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 535
	case _cor1 of
	  %% Line 536
	  <'$end_of_table'> when 'true' ->
	      _cor2
	  %% Line 538
	  <_cor12> when 'true' ->
	      let <_cor5> =
		  %% Line 540
		  call 'ets':'lookup'
		      (_cor0, _cor1)
	      in  let <_cor6> =
		      %% Line 540
		      call 'lists':'foldl'
			  (_cor3, _cor2, _cor5)
		  in  let <_cor4> =
			  %% Line 541
			  call 'ets':'next'
			      (_cor0, _cor1)
		      in  %% Line 539
			  apply 'do_foldl'/4
			      (_cor3, _cor6, _cor4, _cor0)
	end
'foldr'/3 =
    %% Line 552
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 553
	    call 'ets':'safe_fixtable'
		(_cor0, 'true')
	    let <Last> =
		%% Line 554
		call 'ets':'last'
		    (_cor0)
	    in  %% Line 555
		letrec
		    'after$^0'/0 =
			fun () ->
			    %% Line 558
			    call 'ets':'safe_fixtable'
				(_cor0, 'false')
		in  try
			%% Line 556
			apply 'do_foldr'/4
			    (_cor2, _cor1, Last, _cor0)
		    of <_cor4> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    _cor4
		    catch <_cor7,_cor6,_cor5> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    primop 'raise'
				(_cor5, _cor6)
'do_foldr'/4 =
    %% Line 561
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 562
	case _cor1 of
	  %% Line 563
	  <'$end_of_table'> when 'true' ->
	      _cor2
	  %% Line 565
	  <_cor12> when 'true' ->
	      let <_cor5> =
		  %% Line 567
		  call 'ets':'lookup'
		      (_cor0, _cor1)
	      in  let <_cor6> =
		      %% Line 567
		      call 'lists':'foldr'
			  (_cor3, _cor2, _cor5)
		  in  let <_cor4> =
			  %% Line 568
			  call 'ets':'prev'
			      (_cor0, _cor1)
		      in  %% Line 566
			  apply 'do_foldr'/4
			      (_cor3, _cor6, _cor4, _cor0)
	end
'from_dets'/2 =
    %% Line 575
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 576
		call 'dets':'to_ets'
		    (_cor0, _cor1)
	in  %% Line 576
	    case _cor2 of
	      %% Line 577
	      <{'error',Reason}> when 'true' ->
		  %% Line 578
		  call 'erlang':'error'
		      (Reason, [_cor1|[_cor0|[]]])
	      %% Line 579
	      <{'EXIT',{Reason1,_X_Stack1}}> when 'true' ->
		  %% Line 580
		  call 'erlang':'error'
		      (Reason1, [_cor1|[_cor0|[]]])
	      %% Line 581
	      <{'EXIT',EReason}> when 'true' ->
		  %% Line 582
		  call 'erlang':'error'
		      (EReason, [_cor1|[_cor0|[]]])
	      %% Line 583
	      <_cor6>
		  when call 'erlang':'=:='
			(_cor2,
			 _cor1) ->
		  %% Line 584
		  'true'
	      %% Line 585
	      <Unexpected> when 'true' ->
		  %% Line 586
		  call 'erlang':'error'
		      (Unexpected, [_cor1|[_cor0|[]]])
	    end
'to_dets'/2 =
    %% Line 593
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 594
		call 'dets':'from_ets'
		    (_cor0, _cor1)
	in  %% Line 594
	    case _cor2 of
	      %% Line 595
	      <{'error',Reason}> when 'true' ->
		  %% Line 596
		  call 'erlang':'error'
		      (Reason, [_cor1|[_cor0|[]]])
	      %% Line 597
	      <{'EXIT',{Reason1,_X_Stack1}}> when 'true' ->
		  %% Line 598
		  call 'erlang':'error'
		      (Reason1, [_cor1|[_cor0|[]]])
	      %% Line 599
	      <{'EXIT',EReason}> when 'true' ->
		  %% Line 600
		  call 'erlang':'error'
		      (EReason, [_cor1|[_cor0|[]]])
	      %% Line 601
	      <'ok'> when 'true' ->
		  _cor0
	      %% Line 603
	      <Unexpected> when 'true' ->
		  %% Line 604
		  call 'erlang':'error'
		      (Unexpected, [_cor1|[_cor0|[]]])
	    end
'test_ms'/2 =
    %% Line 613
    fun (_cor1,_cor0) ->
	%% Line 614
	case call 'erlang':'match_spec_test'
		 (_cor1, _cor0, 'table') of
	  %% Line 615
	  <{'ok',Result,_X_Flags,_X_Messages}> when 'true' ->
	      %% Line 616
	      {'ok',Result}
	  %% Line 617
	  <Error = {'error',_X_Errors}> when 'true' ->
	      %% Line 618
	      Error
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'init_table'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	do  %% Line 628
	    call 'ets':'delete_all_objects'
		(_cor1)
	    let <_cor2> =
		%% Line 629
		apply _cor0
		    ('read')
	    in  %% Line 629
		apply 'init_table_continue'/2
		    (_cor1, _cor2)
'init_table_continue'/2 =
    %% Line 631
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Table,'end_of_input'> when 'true' ->
	      %% Line 632
	      'true'
	  %% Line 633
	  <Table,{List,Fun}>
	      when try
		    let <_cor2> =
			call 'erlang':'is_list'
			    (List)
		    in  let <_cor3> =
			    call 'erlang':'is_function'
				(Fun)
			in  call 'erlang':'and'
				(_cor2, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  catch
		      %% Line 634
		      apply 'init_table_sub'/2
			  (Table, List)
	      in  %% Line 634
		  case _cor4 of
		    %% Line 635
		    <{'EXIT',Reason}> when 'true' ->
			do  catch
				%% Line 636
				apply Fun
				    ('close')
			    %% Line 637
			    call 'erlang':'exit'
				(Reason)
		    %% Line 638
		    <'true'> when 'true' ->
			let <_cor5> =
			    %% Line 639
			    apply Fun
				('read')
			in  %% Line 639
			    apply 'init_table_continue'/2
				(Table, _cor5)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 641
	  <_X_Table,Error> when 'true' ->
	      %% Line 642
	      call 'erlang':'exit'
		  (Error)
	end
'init_table_sub'/2 =
    %% Line 644
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Table,[]> when 'true' ->
	      %% Line 645
	      'true'
	  %% Line 646
	  <Table,[H|T]> when 'true' ->
	      do  %% Line 647
		  call 'ets':'insert'
		      (Table, H)
		  %% Line 648
		  apply 'init_table_sub'/2
		      (Table, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'init_table_sub',2}}] )
	    -| ['compiler_generated'] )
	end
'match_delete'/2 =
    %% Line 654
    fun (_cor1,_cor0) ->
	do  %% Line 655
	    call 'ets':'select_delete'
		(_cor1, [{_cor0,[],['true']}|[]])
	    %% Line 656
	    'true'
'tab2list'/1 =
    %% Line 664
    fun (_cor0) ->
	%% Line 665
	call 'ets':'match_object'
	    (_cor0, '_')
'filter'/3 =
    %% Line 669
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tn,F,A>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Tn)
		in  let <_cor4> =
			call 'erlang':'is_integer'
			    (Tn)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 670
		  call 'ets':'first'
		      (Tn)
	      in  %% Line 670
		  apply 'do_filter'/5
		      (Tn, _cor5, F, A, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'filter',3}}] )
	    -| ['compiler_generated'] )
	end
'do_filter'/5 =
    %% Line 672
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Tab,'$end_of_table',_cor17,_cor18,Ack> when 'true' ->
	      %% Line 673
	      Ack
	  %% Line 674
	  <Tab,Key,F,A,Ack> when 'true' ->
	      let <_cor5> =
		  %% Line 675
		  call 'ets':'lookup'
		      (Tab, Key)
	      in  %% Line 675
		  case call 'erlang':'apply'
			   (F, [_cor5|A]) of
		    %% Line 676
		    <'false'> when 'true' ->
			let <_cor6> =
			    %% Line 677
			    call 'ets':'next'
				(Tab, Key)
			in  %% Line 677
			    apply 'do_filter'/5
				(Tab, _cor6, F, A, Ack)
		    %% Line 678
		    <'true'> when 'true' ->
			let <_cor7> =
			    %% Line 679
			    call 'ets':'lookup'
				(Tab, Key)
			in  let <Ack2> =
				%% Line 679
				call 'erlang':'++'
				    (_cor7, Ack)
			    in  let <_cor9> =
				    %% Line 680
				    call 'ets':'next'
					(Tab, Key)
				in  %% Line 680
				    apply 'do_filter'/5
					(Tab, _cor9, F, A, Ack2)
		    %% Line 681
		    <{'true',Value}> when 'true' ->
			let <_cor10> =
			    %% Line 682
			    call 'ets':'next'
				(Tab, Key)
			in  %% Line 682
			    apply 'do_filter'/5
				(Tab, _cor10, F, A, [Value|Ack])
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	end
'tab2file'/2 =
    %% Line 706
    fun (_cor1,_cor0) ->
	%% Line 707
	apply 'tab2file'/3
	    (_cor1, _cor0, [])
'tab2file'/3 =
    %% Line 717
    fun (_cor2,_cor1,_cor0) ->
	%% Line 718
	try
	    %% Line 719
	    case apply 'parse_ft_options'/1
		     (_cor0) of
	      <{'ok',FtOptions}> when 'true' ->
		  let <_X_> =
		      %% Line 720
		      ( call 'file':'delete'
			    (_cor1)
			-| ['result_not_wanted'] )
		  in  do  %% Line 721
			  case call 'file':'read_file_info'
				   (_cor1) of
			    %% Line 722
			    <{'error','enoent'}> when 'true' ->
				'ok'
			    %% Line 723
			    <_cor71> when 'true' ->
				call 'erlang':'throw'
				    ('eaccess')
			  end
			  let <Name> =
			      %% Line 725
			      call 'erlang':'make_ref'
				  ()
			  in  do  %% Line 726
				  case call 'disk_log':'open'
					   ([{'name',Name}|[{'file',_cor1}|[]]]) of
				    %% Line 727
				    <{'ok',_cor72}>
					when call 'erlang':'=:='
					      (_cor72,
					       Name) ->
					'ok'
				    %% Line 729
				    <{'error',Reason}> when 'true' ->
					%% Line 730
					call 'erlang':'throw'
					    (Reason)
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
				  %% Line 732
				  try
				      let <_cor9> =
					  %% Line 733
					  case call 'ets':'info'
						   (_cor2) of
					    %% Line 734
					    <'undefined'> when 'true' ->
						%% Line 736
						call 'erlang':'throw'
						    ('badtab')
					    %% Line 737
					    <I> when 'true' ->
						%% Line 738
						I
					  end
				      in  let <_cor11> =
					      %% Line 744
					      apply 'ft_options_to_list'/1
						  (FtOptions)
					  in  let <_cor12> =
						  %% Line 740
						  call 'erlang':'++'
						      (_cor9, %% Line 741
							      [{'major_version',1}|%% Line 742
										   [{'minor_version',0}|%% Line 743
													[{'extended_info',_cor11}|%% Line 744
																  []]]])
					      in  let <_cor13> =
						      %% Line 740
						      call 'erlang':'list_to_tuple'
							  (_cor12)
						  in  let <Info> =
							  %% Line 740
							  [_cor13|%% Line 744
								  []]
						      in  %% Line 746
							  ( case FtOptions of
							      ( <( {'filetab_options',_cor73,_rec0}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <LogFun,InitState> =
									case _rec0 of
									  %% Line 747
									  <'true'> when 'true' ->
									      let <_cor24> =
										  %% Line 748
										  ( fun (_cor21,_cor20) ->
											%% Line 749
											case %% Line 750
											     apply 'md5terms'/2
												 (_cor21, _cor20) of
											  <{NewState,BinList}> when 'true' ->
											      %% Line 751
											      case call 'disk_log':'blog_terms'
												       (Name, BinList) of
												%% Line 752
												<'ok'> when 'true' ->
												    NewState
												%% Line 753
												<{'error',Reason2}> when 'true' ->
												    call 'erlang':'throw'
													(Reason2)
												( <_cor19> when 'true' ->
												      primop 'match_fail'
													  ({'case_clause',_cor19})
												  -| ['compiler_generated'] )
											      end
											  ( <_cor18> when 'true' ->
												primop 'match_fail'
												    ({'badmatch',_cor18})
											    -| ['compiler_generated'] )
											end
										    -| [{'id',{0,0,'-tab2file/3-fun-0-'}}] )
									      in  let <_cor17> =
										      %% Line 756
										      call 'erlang':'md5_init'
											  ()
										  in  <_cor24,_cor17>
									  %% Line 757
									  <'false'> when 'true' ->
									      let <_cor30> =
										  %% Line 758
										  ( fun (_cor27,_cor26) ->
											%% Line 759
											case call 'disk_log':'log_terms'
												 (Name, _cor26) of
											  %% Line 760
											  <'ok'> when 'true' ->
											      'true'
											  %% Line 761
											  <{'error',Reason2}> when 'true' ->
											      call 'erlang':'throw'
												  (Reason2)
											  ( <_cor25> when 'true' ->
												primop 'match_fail'
												    ({'case_clause',_cor25})
											    -| ['compiler_generated'] )
											end
										    -| [{'id',{0,0,'-tab2file/3-fun-1-'}}] )
									      in  <_cor30,%% Line 764
											  'true'>
									  ( <_cor31> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor31})
									    -| ['compiler_generated'] )
									end
								    in  do  %% Line 766
									    call 'ets':'safe_fixtable'
										(_cor2, 'true')
									    let <_cor40> =
										%% Line 767
										letrec
										    'after$^0'/0 =
											fun () ->
											    catch
												%% Line 773
												call 'ets':'safe_fixtable'
												    (_cor2, 'false')
										in  try
											let <NewState> =
											    %% Line 768
											    apply LogFun
												(InitState, Info)
											in  let <_cor35> =
												%% Line 770
												call 'ets':'select'
												    (_cor2, [{'_',[],['$_']}], 100)
											    in  %% Line 769
												apply 'dump_file'/4
												    (_cor35, %% Line 771
													     LogFun, %% Line 771
														     NewState, %% Line 771
															       0)
										    of <_cor36> ->
											do  ( apply 'after$^0'/0
												  ()
											      -| ['compiler_generated'] )
											    _cor36
										    catch <_cor39,_cor38,_cor37> ->
											do  ( apply 'after$^0'/0
												  ()
											      -| ['compiler_generated'] )
											    primop 'raise'
												(_cor37, _cor38)
									    in  %% Line 767
										case _cor40 of
										  <{NewState1,Num}> when 'true' ->
										      let <_cor50> =
											  %% Line 776
											  case _cor73 of
											    %% Line 777
											    <'true'> when 'true' ->
												%% Line 778
												[{'count',Num}|[]]
											    %% Line 779
											    <'false'> when 'true' ->
												%% Line 780
												[]
											    ( <_cor49> when 'true' ->
												  primop 'match_fail'
												      ({'case_clause',_cor49})
											      -| ['compiler_generated'] )
											  end
										      in  let <_cor46> =
											      %% Line 782
											      case _rec0 of
												%% Line 783
												<'true'> when 'true' ->
												    let <_cor44> =
													%% Line 784
													call 'erlang':'md5_final'
													    (NewState1)
												    in  %% Line 784
													[{'md5',_cor44}|[]]
												%% Line 785
												<'false'> when 'true' ->
												    %% Line 786
												    []
												( <_cor45> when 'true' ->
												      primop 'match_fail'
													  ({'case_clause',_cor45})
												  -| ['compiler_generated'] )
											      end
											  in  let <EndInfo> =
												  %% Line 781
												  call 'erlang':'++'
												      (_cor50, _cor46)
											      in  do  %% Line 788
												      case EndInfo of
													%% Line 789
													<[]> when 'true' ->
													    'ok'
													%% Line 791
													<List> when 'true' ->
													    %% Line 792
													    apply LogFun
														(NewState1, [['$end_of_table'|[List|[]]]|[]])
												      end
												      %% Line 794
												      call 'disk_log':'close'
													  (Name)
										  ( <_cor41> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor41})
										    -| ['compiler_generated'] )
										end
								-| ['compiler_generated'] )
							      ( <_cor74> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','filetab_options'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
				  of <_cor53> ->
				      _cor53
				  catch <_cor56,_cor55,_cor54> ->
				      case <_cor56,_cor55,_cor54> of
					%% Line 796
					<'throw',TReason,_cor80> when 'true' ->
					    let <_X_> =
						%% Line 797
						( call 'disk_log':'close'
						      (Name)
						  -| ['result_not_wanted'] )
					    in  let <_X_> =
						    %% Line 798
						    ( call 'file':'delete'
							  (_cor1)
						      -| ['result_not_wanted'] )
						in  %% Line 799
						    call 'erlang':'throw'
							(TReason)
					%% Line 800
					<'exit',ExReason,_cor81> when 'true' ->
					    let <_X_> =
						%% Line 801
						( call 'disk_log':'close'
						      (Name)
						  -| ['result_not_wanted'] )
					    in  let <_X_> =
						    %% Line 802
						    ( call 'file':'delete'
							  (_cor1)
						      -| ['result_not_wanted'] )
						in  %% Line 803
						    call 'erlang':'exit'
							(ExReason)
					%% Line 804
					<'error',ErReason,_cor82> when 'true' ->
					    let <_X_> =
						%% Line 805
						( call 'disk_log':'close'
						      (Name)
						  -| ['result_not_wanted'] )
					    in  let <_X_> =
						    %% Line 806
						    ( call 'file':'delete'
							  (_cor1)
						      -| ['result_not_wanted'] )
						in  let <_cor63> =
							%% Line 807
							call 'erlang':'get_stacktrace'
							    ()
						    in  %% Line 807
							call 'erlang':'raise'
							    ('error', ErReason, _cor63)
					( <_cor56,_cor55,_cor54> when 'true' ->
					      primop 'raise'
						  (_cor54, _cor55)
					  -| ['compiler_generated'] )
				      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
	of <_cor64> ->
	    _cor64
	catch <_cor67,_cor66,_cor65> ->
	    case <_cor67,_cor66,_cor65> of
	      %% Line 810
	      <'throw',TReason2,_cor83> when 'true' ->
		  %% Line 811
		  {'error',TReason2}
	      %% Line 812
	      <'exit',ExReason2,_cor84> when 'true' ->
		  %% Line 813
		  {'error',ExReason2}
	      ( <_cor67,_cor66,_cor65> when 'true' ->
		    primop 'raise'
			(_cor65, _cor66)
		-| ['compiler_generated'] )
	    end
'dump_file'/4 =
    %% Line 816
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'$end_of_table',_X_LogFun,State,Num> when 'true' ->
	      %% Line 817
	      {State,Num}
	  %% Line 818
	  <{Terms,Context},LogFun,State,Num> when 'true' ->
	      let <Count> =
		  %% Line 819
		  call 'erlang':'length'
		      (Terms)
	      in  let <NewState> =
		      %% Line 820
		      apply LogFun
			  (State, Terms)
		  in  let <_cor7> =
			  %% Line 821
			  call 'ets':'select'
			      (Context)
		      in  let <_cor6> =
			      %% Line 821
			      call 'erlang':'+'
				  (Num, Count)
			  in  %% Line 821
			      apply 'dump_file'/4
				  (_cor7, LogFun, NewState, _cor6)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'dump_file',4}}] )
	    -| ['compiler_generated'] )
	end
'ft_options_to_list'/1 =
    %% Line 823
    fun (_cor0) ->
	case _cor0 of
	  <{'filetab_options',PS,MD5}> when 'true' ->
	      let <_cor4> =
		  %% Line 824
		  case PS of
		    %% Line 825
		    <'true'> when 'true' ->
			%% Line 826
			['object_count']
		    %% Line 827
		    <_cor6> when 'true' ->
			%% Line 828
			[]
		  end
	      in  let <_cor2> =
		      %% Line 830
		      case MD5 of
			%% Line 831
			<'true'> when 'true' ->
			    %% Line 832
			    ['md5sum']
			%% Line 833
			<_cor7> when 'true' ->
			    %% Line 834
			    []
		      end
		  in  %% Line 829
		      call 'erlang':'++'
			  (_cor4, _cor2)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'ft_options_to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'md5terms'/2 =
    %% Line 837
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,[]> when 'true' ->
	      %% Line 838
	      {State,[]}
	  %% Line 839
	  <State,[H|T]> when 'true' ->
	      let <B> =
		  %% Line 840
		  call 'erlang':'term_to_binary'
		      (H)
	      in  let <NewState> =
		      %% Line 841
		      call 'erlang':'md5_update'
			  (State, B)
		  in  %% Line 842
		      case apply 'md5terms'/2
			       (NewState, T) of
			<{FinState,TL}> when 'true' ->
			    %% Line 843
			    {FinState,[B|TL]}
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'md5terms',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_ft_options'/1 =
    %% Line 845
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  catch
		      %% Line 846
		      call 'lists':'keytake'
			  ('extended_info', 1, Options)
	      in  let <Opt,Rest> =
		      %% Line 846
		      case _cor1 of
			%% Line 847
			<'false'> when 'true' ->
			    %% Line 848
			    <[],Options>
			%% Line 849
			<{'value',{'extended_info',L},R}>
			    when call 'erlang':'is_list'
				  (L) ->
			    %% Line 850
			    <L,R>
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor2})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 852
		      case Rest of
			%% Line 853
			<[]> when 'true' ->
			    %% Line 854
			    apply 'parse_ft_info_options'/2
				({'filetab_options','false','false'}, Opt)
			%% Line 855
			<Other> when 'true' ->
			    %% Line 856
			    call 'erlang':'throw'
				({'unknown_option',Other})
		      end
	  %% Line 858
	  <Malformed> when 'true' ->
	      %% Line 859
	      call 'erlang':'throw'
		  ({'malformed_option',Malformed})
	end
'parse_ft_info_options'/2 =
    %% Line 861
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FtOpt,[]> when 'true' ->
	      %% Line 862
	      {'ok',FtOpt}
	  %% Line 863
	  <FtOpt,['object_count'|T]> when 'true' ->
	      %% Line 864
	      case FtOpt of
		<{'filetab_options',_cor10,_cor11}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (2, FtOpt, 'true')
		    in  apply 'parse_ft_info_options'/2
			    (_cor4, T)
		( <_cor12> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','filetab_options'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 865
	  <FtOpt,['md5sum'|T]> when 'true' ->
	      %% Line 866
	      case FtOpt of
		<{'filetab_options',_cor13,_cor14}> when 'true' ->
		    let <_cor7> =
			call 'erlang':'setelement'
			    (3, FtOpt, 'true')
		    in  apply 'parse_ft_info_options'/2
			    (_cor7, T)
		( <_cor15> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','filetab_options'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 867
	  <_cor16,[Unexpected|_cor17]> when 'true' ->
	      %% Line 868
	      call 'erlang':'throw'
		  ({'unknown_option',[{'extended_info',[Unexpected|[]]}|[]]})
	  %% Line 869
	  <_cor18,Malformed> when 'true' ->
	      %% Line 870
	      call 'erlang':'throw'
		  ({'malformed_option',Malformed})
	end
'file2tab'/1 =
    %% Line 883
    fun (_cor0) ->
	%% Line 884
	apply 'file2tab'/2
	    (_cor0, [])
'file2tab'/2 =
    %% Line 893
    fun (_cor1,_cor0) ->
	%% Line 894
	try
	    %% Line 895
	    case apply 'parse_f2t_opts'/3
		     (_cor0, 'false', []) of
	      <{'ok',Verify,TabArg}> when 'true' ->
		  let <Name> =
		      %% Line 896
		      call 'erlang':'make_ref'
			  ()
		  in  let <_cor7> =
			  %% Line 898
			  case call 'disk_log':'open'
				   ([{'name',Name}|%% Line 899
						   [{'file',_cor1}|%% Line 900
								   [{'mode','read_only'}]]]) of
			    %% Line 901
			    <{'ok',_cor51}>
				when call 'erlang':'=:='
				      (_cor51,
				       Name) ->
				%% Line 902
				{'ok',Name}
			    %% Line 903
			    <{'repaired',_cor52,_cor53,_cor54}>
				when call 'erlang':'=:='
				      (_cor52,
				       Name) ->
				%% Line 904
				case Verify of
				  %% Line 905
				  <'true'> when 'true' ->
				      let <_X_> =
					  %% Line 906
					  ( call 'disk_log':'close'
						(Name)
					    -| ['result_not_wanted'] )
				      in  %% Line 907
					  call 'erlang':'throw'
					      ('badfile')
				  %% Line 908
				  <'false'> when 'true' ->
				      %% Line 909
				      {'ok',Name}
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
			    %% Line 911
			    <{'error',Other1}> when 'true' ->
				%% Line 912
				call 'erlang':'throw'
				    ({'read_error',Other1})
			    %% Line 913
			    <Other2> when 'true' ->
				%% Line 914
				call 'erlang':'throw'
				    (Other2)
			  end
		      in  %% Line 897
			  case _cor7 of
			    <{'ok',_cor55}>
				when call 'erlang':'=:='
				      (_cor55,
				       Name) ->
				let <_cor14> =
				    %% Line 917
				    try
					apply 'get_header_data'/2
					    (Name, Verify)
				    of <_cor9> ->
					_cor9
				    catch <_cor12,_cor11,_cor10> ->
					case <_cor12,_cor11,_cor10> of
					  %% Line 919
					  <'throw','badfile',_cor56> when 'true' ->
					      let <_X_> =
						  %% Line 920
						  ( call 'disk_log':'close'
							(Name)
						    -| ['result_not_wanted'] )
					      in  %% Line 921
						  call 'erlang':'throw'
						      ('badfile')
					  ( <_cor12,_cor11,_cor10> when 'true' ->
						primop 'raise'
						    (_cor10, _cor11)
					    -| ['compiler_generated'] )
					end
				in  %% Line 916
				    case _cor14 of
				      <{'ok',Major,Minor,FtOptions,MD5State,FullHeader,DLContext}> when 'true' ->
					  %% Line 923
					  letrec
					      'after$^0'/0 =
						  fun () ->
						      %% Line 986
						      ( call 'disk_log':'close'
							    (Name)
							-| ['result_not_wanted'] )
					  in  try
						  do  %% Line 924
						      case <> of
							%% Line 925
							<>
							    when call 'erlang':'>'
								  (Major,
								   1) ->
							    %% Line 926
							    call 'erlang':'throw'
								({'unsupported_file_version',{Major,Minor}})
							%% Line 927
							<> when 'true' ->
							    'ok'
						      end
						      %% Line 930
						      case apply 'create_tab'/2
							       (FullHeader, TabArg) of
							<{'ok',Tab,HeadCount}> when 'true' ->
							    let <_cor18> =
								%% Line 932
								case Verify of
								  %% Line 933
								  <'true'> when 'true' ->
								      %% Line 934
								      FtOptions
								  %% Line 935
								  <'false'> when 'true' ->
								      %% Line 936
								      {'filetab_options','false','false'}
								  ( <_cor17> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor17})
								    -| ['compiler_generated'] )
								end
							    in  %% Line 939
								( case _cor18 of
								    ( <( {'filetab_options',_cor57,_rec5}
									 -| ['compiler_generated'] )> when 'true' ->
									  let <ReadFun,InitState> =
									      case _rec5 of
										%% Line 940
										<'true'> when 'true' ->
										    let <_cor26> =
											%% Line 941
											( fun (_cor24) ->
											      case _cor24 of
												<OS = {OldMD5State,OldCount,_X_OL,ODLContext}> when 'true' ->
												    %% Line 942
												    case apply 'wrap_bchunk'/4
													     (Name, ODLContext, 100, Verify) of
												      %% Line 943
												      <'eof'> when 'true' ->
													  %% Line 944
													  {OS,[]}
												      %% Line 945
												      <{NDLContext,Blist}> when 'true' ->
													  %% Line 947
													  case %% Line 948
													       apply 'md5_and_convert'/3
														   (Blist, %% Line 949
															   OldMD5State, %% Line 950
																	OldCount) of
													    <{Termlist,NewMD5State,NewCount,NewLast}> when 'true' ->
														%% Line 951
														{{NewMD5State,NewCount,%% Line 952
																       NewLast,%% Line 952
																	       NDLContext},%% Line 953
																			   Termlist}
													    ( <_cor22> when 'true' ->
														  primop 'match_fail'
														      ({'badmatch',_cor22})
													      -| ['compiler_generated'] )
													  end
												      ( <_cor23> when 'true' ->
													    primop 'match_fail'
														({'case_clause',_cor23})
													-| ['compiler_generated'] )
												    end
												( <_cor25> when 'true' ->
												      ( primop 'match_fail'
													    ({'function_clause',_cor25})
													-| [{'function_name',{'-file2tab/2-fun-0-',1}}] )
												  -| ['compiler_generated'] )
											      end
											  -| [{'id',{0,0,'-file2tab/2-fun-0-'}}] )
										    in  <_cor26,%% Line 956
												{MD5State,0,[],DLContext}>
										%% Line 957
										<'false'> when 'true' ->
										    let <_cor31> =
											%% Line 958
											( fun (_cor29) ->
											      case _cor29 of
												<OS = {_cor59,OldCount,_X_OL,ODLContext}> when 'true' ->
												    %% Line 959
												    case apply 'wrap_chunk'/4
													     (Name, ODLContext, 100, Verify) of
												      %% Line 960
												      <'eof'> when 'true' ->
													  %% Line 961
													  {OS,[]}
												      %% Line 962
												      <{NDLContext,List}> when 'true' ->
													  %% Line 963
													  case %% Line 964
													       apply 'scan_for_endinfo'/2
														   (List, OldCount) of
													    <{NewLast,NewCount,NewList}> when 'true' ->
														%% Line 965
														{{'false',NewCount,NewLast,NDLContext},%% Line 966
																		       NewList}
													    ( <_cor27> when 'true' ->
														  primop 'match_fail'
														      ({'badmatch',_cor27})
													      -| ['compiler_generated'] )
													  end
												      ( <_cor28> when 'true' ->
													    primop 'match_fail'
														({'case_clause',_cor28})
													-| ['compiler_generated'] )
												    end
												( <_cor30> when 'true' ->
												      ( primop 'match_fail'
													    ({'function_clause',_cor30})
													-| [{'function_name',{'-file2tab/2-fun-1-',1}}] )
												  -| ['compiler_generated'] )
											      end
											  -| [{'id',{0,0,'-file2tab/2-fun-1-'}}] )
										    in  <_cor31,%% Line 969
												{'false',0,[],DLContext}>
										( <_cor32> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor32})
										  -| ['compiler_generated'] )
									      end
									  in  %% Line 971
									      try
										  %% Line 972
										  apply 'do_read_and_verify'/6
										      (ReadFun, InitState, Tab, _cor18, %% Line 973
															HeadCount, %% Line 973
																   Verify)
									      of <_cor35> ->
										  _cor35
									      catch <_cor38,_cor37,_cor36> ->
										  case <_cor38,_cor37,_cor36> of
										    %% Line 975
										    <'throw',TReason,_cor60> when 'true' ->
											do  %% Line 976
											    call 'ets':'delete'
												(Tab)
											    %% Line 977
											    call 'erlang':'throw'
												(TReason)
										    %% Line 978
										    <'exit',ExReason,_cor61> when 'true' ->
											do  %% Line 979
											    call 'ets':'delete'
												(Tab)
											    %% Line 980
											    call 'erlang':'exit'
												(ExReason)
										    %% Line 981
										    <'error',ErReason,_cor62> when 'true' ->
											do  %% Line 982
											    call 'ets':'delete'
												(Tab)
											    let <_cor39> =
												%% Line 983
												call 'erlang':'get_stacktrace'
												    ()
											    in  %% Line 983
												call 'erlang':'raise'
												    ('error', ErReason, _cor39)
										    ( <_cor38,_cor37,_cor36> when 'true' ->
											  primop 'raise'
											      (_cor36, _cor37)
										      -| ['compiler_generated'] )
										  end
								      -| ['compiler_generated'] )
								    ( <_cor58> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','filetab_options'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							( <_cor16> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor16})
							  -| ['compiler_generated'] )
						      end
					      of <_cor41> ->
						  do  ( apply 'after$^0'/0
							    ()
							-| ['compiler_generated'] )
						      _cor41
					      catch <_cor44,_cor43,_cor42> ->
						  do  ( apply 'after$^0'/0
							    ()
							-| ['compiler_generated'] )
						      primop 'raise'
							  (_cor42, _cor43)
				      ( <_cor15> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor15})
					-| ['compiler_generated'] )
				    end
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor8})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
	of <_cor45> ->
	    _cor45
	catch <_cor48,_cor47,_cor46> ->
	    case <_cor48,_cor47,_cor46> of
	      %% Line 989
	      <'throw',TReason2,_cor63> when 'true' ->
		  %% Line 990
		  {'error',TReason2}
	      %% Line 991
	      <'exit',ExReason2,_cor64> when 'true' ->
		  %% Line 992
		  {'error',ExReason2}
	      ( <_cor48,_cor47,_cor46> when 'true' ->
		    primop 'raise'
			(_cor46, _cor47)
		-| ['compiler_generated'] )
	    end
'do_read_and_verify'/6 =
    %% Line 995
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 996
	case apply 'load_table'/3
		 (_cor5, _cor4, _cor3) of
	  %% Line 997
	  <{'ok',{_cor38,FinalCount,[],_cor39}}> when 'true' ->
	      %% Line 998
	      ( case _cor2 of
		  ( <( {'filetab_options',_cor40,_rec6}
		       -| ['compiler_generated'] )> when 'true' ->
			do  case <_rec6,_cor40> of
			      %% Line 1000
			      <'false','false'> when 'true' ->
				  %% Line 1001
				  case _cor0 of
				    %% Line 1002
				    <'false'> when 'true' ->
					'ok'
				    %% Line 1004
				    <'true'> when 'true' ->
					%% Line 1005
					case FinalCount of
					  %% Line 1006
					  <_cor44>
					      when call 'erlang':'=:='
						    (FinalCount,
						     _cor1) ->
					      'ok'
					  %% Line 1008
					  <_cor45> when 'true' ->
					      %% Line 1009
					      call 'erlang':'throw'
						  ('invalid_object_count')
					end
				    ( <_cor11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor11})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1012
			      <_fol151,_fol152> when 'true' ->
				  %% Line 1013
				  call 'erlang':'throw'
				      ('badfile')
			    end
			    %% Line 1015
			    {'ok',_cor3}
		    -| ['compiler_generated'] )
		  ( <_cor41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','filetab_options'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1016
	  <{'ok',{FinalMD5State,FinalCount,['$end_of_table'|[LastInfo|[]]],_cor47}}> when 'true' ->
	      let <_cor14> =
		  %% Line 1017
		  case call 'lists':'keyfind'
			   ('count', 1, LastInfo) of
		    %% Line 1018
		    <{'count',N}> when 'true' ->
			%% Line 1019
			N
		    %% Line 1020
		    <_cor48> when 'true' ->
			%% Line 1021
			'false'
		  end
	      in  let <_cor17> =
		      %% Line 1023
		      case call 'lists':'keyfind'
			       ('md5', 1, LastInfo) of
			%% Line 1024
			<{'md5',M}> when 'true' ->
			    %% Line 1025
			    M
			%% Line 1026
			<_cor49> when 'true' ->
			    %% Line 1027
			    'false'
		      end
		  in  %% Line 1029
		      ( case _cor2 of
			  ( <( {'filetab_options',_cor50,_rec8}
			       -| ['compiler_generated'] )> when 'true' ->
				do  case _rec8 of
				      %% Line 1030
				      <'true'> when 'true' ->
					  %% Line 1031
					  case call 'erlang':'md5_final'
						   (FinalMD5State) of
					    %% Line 1032
					    <_cor52>
						when call 'erlang':'=:='
						      (_cor52,
						       _cor17) ->
						'ok'
					    %% Line 1034
					    <_X_MD5MisM> when 'true' ->
						%% Line 1035
						call 'erlang':'throw'
						    ('checksum_error')
					  end
				      %% Line 1037
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor22> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor22})
					-| ['compiler_generated'] )
				    end
				    do  %% Line 1040
					case _cor50 of
					  %% Line 1041
					  <'true'> when 'true' ->
					      %% Line 1042
					      case FinalCount of
						%% Line 1043
						<_cor55>
						    when call 'erlang':'=:='
							  (FinalCount,
							   _cor14) ->
						    'ok'
						%% Line 1045
						<_X_Other> when 'true' ->
						    %% Line 1046
						    call 'erlang':'throw'
							('invalid_object_count')
					      end
					  %% Line 1048
					  <'false'> when 'true' ->
					      %% Line 1051
					      case <_cor0,_rec8> of
						%% Line 1052
						<'true','false'> when 'true' ->
						    %% Line 1053
						    case FinalCount of
						      %% Line 1054
						      <_cor58>
							  when call 'erlang':'=:='
								(FinalCount,
								 _cor1) ->
							  'ok'
						      %% Line 1056
						      <_X_Other2> when 'true' ->
							  %% Line 1057
							  call 'erlang':'throw'
							      ('invalid_object_count')
						    end
						%% Line 1059
						<_fol160,_fol161> when 'true' ->
						    'ok'
					      end
					  ( <_cor30> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor30})
					    -| ['compiler_generated'] )
					end
					%% Line 1063
					{'ok',_cor3}
			    -| ['compiler_generated'] )
			  ( <_cor51> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','filetab_options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor31> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor31})
	    -| ['compiler_generated'] )
	end
'parse_f2t_opts'/3 =
    %% Line 1066
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Verify,Tab> when 'true' ->
	      %% Line 1067
	      {'ok',Verify,Tab}
	  %% Line 1068
	  <[{'verify','true'}|T],_X_OV,Tab> when 'true' ->
	      %% Line 1069
	      apply 'parse_f2t_opts'/3
		  (T, 'true', Tab)
	  %% Line 1070
	  <[{'verify','false'}|T],OV,Tab> when 'true' ->
	      %% Line 1071
	      apply 'parse_f2t_opts'/3
		  (T, OV, Tab)
	  %% Line 1072
	  <[{'table',Tab}|T],OV,[]> when 'true' ->
	      %% Line 1073
	      apply 'parse_f2t_opts'/3
		  (T, OV, Tab)
	  %% Line 1074
	  <[Unexpected|_cor6],_cor7,_cor8> when 'true' ->
	      %% Line 1075
	      call 'erlang':'throw'
		  ({'unknown_option',Unexpected})
	  %% Line 1076
	  <Malformed,_cor9,_cor10> when 'true' ->
	      %% Line 1077
	      call 'erlang':'throw'
		  ({'malformed_option',Malformed})
	end
'count_mandatory'/1 =
    %% Line 1079
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1080
	      0
	  %% Line 1081
	  <[{Tag,_cor13}|T]>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(Tag, 'name')
		in  let <_cor2> =
			%% Line 1082
			call 'erlang':'=:='
			    (Tag, 'type')
		    in  let <_cor3> =
			    %% Line 1083
			    call 'erlang':'=:='
				(Tag, 'protection')
			in  let <_cor4> =
				%% Line 1084
				call 'erlang':'=:='
				    (Tag, 'named_table')
			    in  let <_cor5> =
				    %% Line 1085
				    call 'erlang':'=:='
					(Tag, 'keypos')
				in  let <_cor6> =
					%% Line 1086
					call 'erlang':'=:='
					    (Tag, 'size')
				    in  let <_cor7> =
					    %% Line 1085
					    call 'erlang':'or'
						(_cor5, _cor6)
					in  let <_cor8> =
						%% Line 1084
						call 'erlang':'or'
						    (_cor4, _cor7)
					    in  let <_cor9> =
						    %% Line 1083
						    call 'erlang':'or'
							(_cor3, _cor8)
						in  let <_cor10> =
							%% Line 1082
							call 'erlang':'or'
							    (_cor2, _cor9)
						    in  call 'erlang':'or'
							    (_cor1, _cor10) ->
	      let <_cor11> =
		  %% Line 1087
		  apply 'count_mandatory'/1
		      (T)
	      in  %% Line 1087
		  call 'erlang':'+'
		      (1, _cor11)
	  %% Line 1088
	  <[_cor14|T]> when 'true' ->
	      %% Line 1089
	      apply 'count_mandatory'/1
		  (T)
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'count_mandatory',1}}] )
	    -| ['compiler_generated'] )
	end
'verify_header_mandatory'/1 =
    %% Line 1091
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1092
	    apply 'count_mandatory'/1
		(_cor0)
	in  %% Line 1092
	    call 'erlang':'=:='
		(_cor1, 6)
'wrap_bchunk'/4 =
    %% Line 1094
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,C,N,'true'> when 'true' ->
	      %% Line 1095
	      case call 'disk_log':'bchunk'
		       (Name, C, N) of
		%% Line 1096
		<{_cor10,_cor11,X}>
		    when call 'erlang':'>'
			  (X,
			   0) ->
		    %% Line 1097
		    call 'erlang':'throw'
			('badfile')
		%% Line 1098
		<{NC,Bin,_cor12}> when 'true' ->
		    %% Line 1099
		    {NC,Bin}
		%% Line 1100
		<Y> when 'true' ->
		    %% Line 1101
		    Y
	      end
	  %% Line 1103
	  <Name,C,N,'false'> when 'true' ->
	      %% Line 1104
	      case call 'disk_log':'bchunk'
		       (Name, C, N) of
		%% Line 1105
		<{NC,Bin,_cor13}> when 'true' ->
		    %% Line 1106
		    {NC,Bin}
		%% Line 1107
		<Y> when 'true' ->
		    %% Line 1108
		    Y
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'wrap_bchunk',4}}] )
	    -| ['compiler_generated'] )
	end
'wrap_chunk'/4 =
    %% Line 1111
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,C,N,'true'> when 'true' ->
	      %% Line 1112
	      case call 'disk_log':'chunk'
		       (Name, C, N) of
		%% Line 1113
		<{_cor10,_cor11,X}>
		    when call 'erlang':'>'
			  (X,
			   0) ->
		    %% Line 1114
		    call 'erlang':'throw'
			('badfile')
		%% Line 1115
		<{NC,TL,_cor12}> when 'true' ->
		    %% Line 1116
		    {NC,TL}
		%% Line 1117
		<Y> when 'true' ->
		    %% Line 1118
		    Y
	      end
	  %% Line 1120
	  <Name,C,N,'false'> when 'true' ->
	      %% Line 1121
	      case call 'disk_log':'chunk'
		       (Name, C, N) of
		%% Line 1122
		<{NC,TL,_cor13}> when 'true' ->
		    %% Line 1123
		    {NC,TL}
		%% Line 1124
		<Y> when 'true' ->
		    %% Line 1125
		    Y
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'wrap_chunk',4}}] )
	    -| ['compiler_generated'] )
	end
'get_header_data'/2 =
    %% Line 1128
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,'true'> when 'true' ->
	      %% Line 1129
	      case apply 'wrap_bchunk'/4
		       (Name, 'start', 1, 'true') of
		%% Line 1130
		<{C,[Bin|[]]}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <T> =
			%% Line 1131
			call 'erlang':'binary_to_term'
			    (Bin)
		    in  %% Line 1132
			case T of
			  %% Line 1133
			  <Tup>
			      when call 'erlang':'is_tuple'
				    (T) ->
			      let <L> =
				  %% Line 1134
				  call 'erlang':'tuple_to_list'
				      (Tup)
			      in  %% Line 1135
				  case apply 'verify_header_mandatory'/1
					   (L) of
				    %% Line 1136
				    <'false'> when 'true' ->
					%% Line 1137
					call 'erlang':'throw'
					    ('badfile')
				    %% Line 1138
				    <'true'> when 'true' ->
					let <_cor5> =
					    %% Line 1139
					    case call 'lists':'keyfind'
						     ('major', 1, L) of
					      %% Line 1140
					      <{'major',Maj}> when 'true' ->
						  %% Line 1141
						  Maj
					      %% Line 1142
					      <_cor40> when 'true' ->
						  %% Line 1143
						  0
					    end
					in  let <_cor8> =
						%% Line 1145
						case call 'lists':'keyfind'
							 ('minor', 1, L) of
						  %% Line 1146
						  <{'minor',Min}> when 'true' ->
						      %% Line 1147
						      Min
						  %% Line 1148
						  <_cor41> when 'true' ->
						      %% Line 1149
						      0
						end
					    in  let <_cor13> =
						    %% Line 1152
						    case call 'lists':'keyfind'
							     ('extended_info', 1, L) of
						      %% Line 1153
						      <{'extended_info',I}>
							  when call 'erlang':'is_list'
								(I) ->
							  let <_cor11> =
							      %% Line 1157
							      call 'lists':'member'
								  ('object_count', I)
							  in  let <_cor10> =
								  %% Line 1159
								  call 'lists':'member'
								      ('md5sum', I)
							      in  %% Line 1154
								  {'filetab_options',_cor11,_cor10}
						      %% Line 1161
						      <_cor42> when 'true' ->
							  %% Line 1162
							  {'filetab_options','false','false'}
						    end
						in  %% Line 1165
						    ( case _cor13 of
							( <( {'filetab_options',_cor43,_rec11}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_cor19> =
								  case _rec11 of
								    %% Line 1166
								    <'true'> when 'true' ->
									let <X> =
									    %% Line 1167
									    call 'erlang':'md5_init'
										()
									in  %% Line 1168
									    call 'erlang':'md5_update'
										(X, Bin)
								    %% Line 1169
								    <'false'> when 'true' ->
									%% Line 1170
									'false'
								    ( <_cor18> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor18})
								      -| ['compiler_generated'] )
								  end
							      in  %% Line 1172
								  {'ok',_cor5,_cor8,_cor13,_cor19,L,C}
							  -| ['compiler_generated'] )
							( <_cor44> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','filetab_options'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
				    ( <_cor21> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor21})
				      -| ['compiler_generated'] )
				  end
			  %% Line 1174
			  <_X_X> when 'true' ->
			      %% Line 1175
			      call 'erlang':'throw'
				  ('badfile')
			end
		%% Line 1177
		<_X_Y> when 'true' ->
		    %% Line 1178
		    call 'erlang':'throw'
			('badfile')
	      end
	  %% Line 1181
	  <Name,'false'> when 'true' ->
	      %% Line 1182
	      case apply 'wrap_chunk'/4
		       (Name, 'start', 1, 'false') of
		%% Line 1183
		<{C,[Tup|[]]}>
		    when call 'erlang':'is_tuple'
			  (Tup) ->
		    let <L> =
			%% Line 1184
			call 'erlang':'tuple_to_list'
			    (Tup)
		    in  %% Line 1185
			case apply 'verify_header_mandatory'/1
				 (L) of
			  %% Line 1186
			  <'false'> when 'true' ->
			      %% Line 1187
			      call 'erlang':'throw'
				  ('badfile')
			  %% Line 1188
			  <'true'> when 'true' ->
			      let <_cor26> =
				  %% Line 1189
				  case call 'lists':'keyfind'
					   ('major_version', 1, L) of
				    %% Line 1190
				    <{'major_version',Maj}> when 'true' ->
					%% Line 1191
					Maj
				    %% Line 1192
				    <_cor45> when 'true' ->
					%% Line 1193
					0
				  end
			      in  let <_cor29> =
				      %% Line 1195
				      case call 'lists':'keyfind'
					       ('minor_version', 1, L) of
					%% Line 1196
					<{'minor_version',Min}> when 'true' ->
					    %% Line 1197
					    Min
					%% Line 1198
					<_cor46> when 'true' ->
					    %% Line 1199
					    0
				      end
				  in  let <_cor34> =
					  %% Line 1202
					  case call 'lists':'keyfind'
						   ('extended_info', 1, L) of
					    %% Line 1203
					    <{'extended_info',I}>
						when call 'erlang':'is_list'
						      (I) ->
						let <_cor32> =
						    %% Line 1207
						    call 'lists':'member'
							('object_count', I)
						in  let <_cor31> =
							%% Line 1209
							call 'lists':'member'
							    ('md5sum', I)
						    in  %% Line 1204
							{'filetab_options',_cor32,_cor31}
					    %% Line 1211
					    <_cor47> when 'true' ->
						%% Line 1212
						{'filetab_options','false','false'}
					  end
				      in  %% Line 1214
					  {'ok',_cor26,_cor29,_cor34,'false',L,C}
			  ( <_cor36> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor36})
			    -| ['compiler_generated'] )
			end
		%% Line 1216
		<_cor48> when 'true' ->
		    %% Line 1217
		    call 'erlang':'throw'
			('badfile')
	      end
	  ( <_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor39,_cor38})
		  -| [{'function_name',{'get_header_data',2}}] )
	    -| ['compiler_generated'] )
	end
'md5_and_convert'/3 =
    %% Line 1220
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],MD5State,Count> when 'true' ->
	      %% Line 1221
	      {[],MD5State,Count,[]}
	  %% Line 1222
	  <[H|T],MD5State,Count>
	      when call 'erlang':'is_binary'
		    (H) ->
	      let <_cor3> =
		  catch
		      %% Line 1223
		      call 'erlang':'binary_to_term'
			  (H)
	      in  %% Line 1223
		  case _cor3 of
		    %% Line 1224
		    <{'EXIT',_cor11}> when 'true' ->
			%% Line 1225
			apply 'md5_and_convert'/3
			    (T, MD5State, Count)
		    %% Line 1226
		    <L = ['$end_of_table'|[_X_Dat|[]]]> when 'true' ->
			%% Line 1227
			{[],MD5State,Count,L}
		    %% Line 1228
		    <Term> when 'true' ->
			let <X> =
			    %% Line 1229
			    call 'erlang':'md5_update'
				(MD5State, H)
			in  let <_cor5> =
				%% Line 1230
				call 'erlang':'+'
				    (Count, 1)
			    in  %% Line 1230
				case apply 'md5_and_convert'/3
					 (T, X, _cor5) of
				  <{Rest,NewMD5,NewCount,NewLast}> when 'true' ->
				      %% Line 1231
				      {[Term|Rest],NewMD5,NewCount,NewLast}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
		  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'md5_and_convert',3}}] )
	    -| ['compiler_generated'] )
	end
'scan_for_endinfo'/2 =
    %% Line 1234
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Count> when 'true' ->
	      %% Line 1235
	      {[],Count,[]}
	  %% Line 1236
	  <[['$end_of_table'|[Dat|[]]]|[]],Count> when 'true' ->
	      %% Line 1237
	      {['$end_of_table'|[Dat|[]]],Count,[]}
	  %% Line 1238
	  <[Term|T],Count> when 'true' ->
	      let <_cor2> =
		  %% Line 1239
		  call 'erlang':'+'
		      (Count, 1)
	      in  %% Line 1239
		  case apply 'scan_for_endinfo'/2
			   (T, _cor2) of
		    <{NewLast,NCount,Rest}> when 'true' ->
			%% Line 1240
			{NewLast,NCount,[Term|Rest]}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'scan_for_endinfo',2}}] )
	    -| ['compiler_generated'] )
	end
'load_table'/3 =
    %% Line 1242
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1243
	case apply _cor2
		 (_cor1) of
	  <{NewState,NewData}> when 'true' ->
	      %% Line 1244
	      case NewData of
		%% Line 1245
		<[]> when 'true' ->
		    %% Line 1246
		    {'ok',NewState}
		%% Line 1247
		<List> when 'true' ->
		    do  %% Line 1248
			call 'ets':'insert'
			    (_cor0, List)
			%% Line 1249
			apply 'load_table'/3
			    (_cor2, NewState, _cor0)
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'create_tab'/2 =
    %% Line 1252
    fun (_cor1,_cor0) ->
	%% Line 1253
	case call 'lists':'keyfind'
		 ('name', 1, _cor1) of
	  <{'name',Name}> when 'true' ->
	      %% Line 1254
	      case call 'lists':'keyfind'
		       ('type', 1, _cor1) of
		<{'type',Type}> when 'true' ->
		    %% Line 1255
		    case call 'lists':'keyfind'
			     ('protection', 1, _cor1) of
		      <{'protection',P}> when 'true' ->
			  %% Line 1256
			  case call 'lists':'keyfind'
				   ('named_table', 1, _cor1) of
			    <{'named_table',Val}> when 'true' ->
				%% Line 1257
				case call 'lists':'keyfind'
					 ('keypos', 1, _cor1) of
				  <Keypos = {'keypos',_X_Kp}> when 'true' ->
				      %% Line 1258
				      case call 'lists':'keyfind'
					       ('size', 1, _cor1) of
					<{'size',Sz}> when 'true' ->
					    let <_cor9> =
						%% Line 1259
						case call 'lists':'keyfind'
							 ('compressed', 1, _cor1) of
						  %% Line 1260
						  <{'compressed','true'}> when 'true' ->
						      ['compressed']
						  %% Line 1261
						  <{'compressed','false'}> when 'true' ->
						      []
						  %% Line 1262
						  <'false'> when 'true' ->
						      []
						  ( <_cor8> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor8})
						    -| ['compiler_generated'] )
						end
					    in  %% Line 1264
						case _cor0 of
						  %% Line 1265
						  <[]> when 'true' ->
						      %% Line 1266
						      try
							  let <_cor11> =
							      %% Line 1267
							      apply 'named_table'/1
								  (Val)
							  in  let <_cor12> =
								  %% Line 1267
								  call 'erlang':'++'
								      (_cor11, _cor9)
							      in  let <_cor13> =
								      %% Line 1267
								      [Type|[P|[Keypos|_cor12]]]
								  in  let <Tab> =
									  %% Line 1267
									  call 'ets':'new'
									      (Name, _cor13)
								      in  %% Line 1268
									  {'ok',Tab,Sz}
						      of <_cor15> ->
							  _cor15
						      catch <_cor18,_cor17,_cor16> ->
							  %% Line 1270
							  call 'erlang':'throw'
							      ('cannot_create_table')
						  %% Line 1272
						  <_cor25> when 'true' ->
						      %% Line 1273
						      {'ok',_cor0,Sz}
						end
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor7})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'named_table'/1 =
    %% Line 1276
    fun (_cor0) ->
	case _cor0 of
	  <'true'> when 'true' ->
	      ['named_table']
	  %% Line 1277
	  <'false'> when 'true' ->
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'named_table',1}}] )
	    -| ['compiler_generated'] )
	end
'tabfile_info'/1 =
    %% Line 1302
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (_cor0)
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 1303
	      try
		  let <Name> =
		      %% Line 1304
		      call 'erlang':'make_ref'
			  ()
		  in  let <_cor5> =
			  %% Line 1306
			  case call 'disk_log':'open'
				   ([{'name',Name}|%% Line 1307
						   [{'file',File}|%% Line 1308
								  [{'mode','read_only'}]]]) of
			    %% Line 1309
			    <{'ok',_cor29}>
				when call 'erlang':'=:='
				      (_cor29,
				       Name) ->
				%% Line 1310
				{'ok',Name}
			    %% Line 1311
			    <{'repaired',_cor30,_cor31,_cor32}>
				when call 'erlang':'=:='
				      (_cor30,
				       Name) ->
				%% Line 1312
				{'ok',Name}
			    %% Line 1313
			    <{'error',Other1}> when 'true' ->
				%% Line 1314
				call 'erlang':'throw'
				    ({'read_error',Other1})
			    %% Line 1315
			    <Other2> when 'true' ->
				%% Line 1316
				call 'erlang':'throw'
				    (Other2)
			  end
		      in  %% Line 1305
			  case _cor5 of
			    <{'ok',_cor33}>
				when call 'erlang':'=:='
				      (_cor33,
				       Name) ->
				let <_cor12> =
				    %% Line 1319
				    try
					apply 'get_header_data'/2
					    (Name, 'false')
				    of <_cor7> ->
					_cor7
				    catch <_cor10,_cor9,_cor8> ->
					case <_cor10,_cor9,_cor8> of
					  %% Line 1321
					  <'throw','badfile',_cor34> when 'true' ->
					      let <_X_> =
						  %% Line 1322
						  ( call 'disk_log':'close'
							(Name)
						    -| ['result_not_wanted'] )
					      in  %% Line 1323
						  call 'erlang':'throw'
						      ('badfile')
					  ( <_cor10,_cor9,_cor8> when 'true' ->
						primop 'raise'
						    (_cor8, _cor9)
					    -| ['compiler_generated'] )
					end
				in  %% Line 1318
				    case _cor12 of
				      <{'ok',Major,Minor,_X_FtOptions,_X_MD5State,FullHeader,_X_DLContext}> when 'true' ->
					  do  %% Line 1325
					      case call 'disk_log':'close'
						       (Name) of
						%% Line 1326
						<'ok'> when 'true' ->
						    'ok'
						%% Line 1327
						<{'error',Reason}> when 'true' ->
						    call 'erlang':'throw'
							(Reason)
						( <_cor14> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor14})
						  -| ['compiler_generated'] )
					      end
					      %% Line 1329
					      case call 'lists':'keysearch'
						       ('name', 1, FullHeader) of
						<{'value',N}> when 'true' ->
						    %% Line 1330
						    case call 'lists':'keysearch'
							     ('type', 1, FullHeader) of
						      <{'value',Type}> when 'true' ->
							  %% Line 1331
							  case call 'lists':'keysearch'
								   ('protection', 1, FullHeader) of
							    <{'value',P}> when 'true' ->
								%% Line 1332
								case call 'lists':'keysearch'
									 ('named_table', 1, FullHeader) of
								  <{'value',Val}> when 'true' ->
								      %% Line 1333
								      case call 'lists':'keysearch'
									       ('keypos', 1, FullHeader) of
									<{'value',Kp}> when 'true' ->
									    %% Line 1334
									    case call 'lists':'keysearch'
										     ('size', 1, FullHeader) of
									      <{'value',Sz}> when 'true' ->
										  let <_cor22> =
										      %% Line 1335
										      case call 'lists':'keyfind'
											       ('extended_info', 1, FullHeader) of
											%% Line 1336
											<'false'> when 'true' ->
											    {'extended_info',[]}
											%% Line 1337
											<Ei0> when 'true' ->
											    Ei0
										      end
										  in  %% Line 1339
										      {'ok',[N|[Type|[P|[Val|[Kp|[Sz|[_cor22|[{'version',{Major,Minor}}|[]]]]]]]]]}
									      ( <_cor20> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_cor20})
										-| ['compiler_generated'] )
									    end
									( <_cor19> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor19})
									  -| ['compiler_generated'] )
								      end
								  ( <_cor18> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor18})
								    -| ['compiler_generated'] )
								end
							    ( <_cor17> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor17})
							      -| ['compiler_generated'] )
							  end
						      ( <_cor16> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor16})
							-| ['compiler_generated'] )
						    end
						( <_cor15> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor15})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor13> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor13})
					-| ['compiler_generated'] )
				    end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	      of <_cor24> ->
		  _cor24
	      catch <_cor27,_cor26,_cor25> ->
		  case <_cor27,_cor26,_cor25> of
		    %% Line 1341
		    <'throw',TReason,_cor35> when 'true' ->
			%% Line 1342
			{'error',TReason}
		    %% Line 1343
		    <'exit',ExReason,_cor36> when 'true' ->
			%% Line 1344
			{'error',ExReason}
		    ( <_cor27,_cor26,_cor25> when 'true' ->
			  primop 'raise'
			      (_cor25, _cor26)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28})
		  -| [{'function_name',{'tabfile_info',1}}] )
	    -| ['compiler_generated'] )
	end
'table'/1 =
    %% Line 1351
    fun (_cor0) ->
	%% Line 1352
	apply 'table'/2
	    (_cor0, [])
'table'/2 =
    %% Line 1364
    fun (_cor1,_cor0) ->
	%% Line 1365
	case apply 'options'/2
		 (_cor0, ['traverse'|['n_objects']]) of
	  %% Line 1366
	  <{'badarg',_cor53}> when 'true' ->
	      %% Line 1367
	      call 'erlang':'error'
		  ('badarg', [_cor1|[_cor0|[]]])
	  %% Line 1368
	  <[[Traverse|[NObjs|[]]]|[QlcOptions|[]]]> when 'true' ->
	      let <_cor9> =
		  %% Line 1369
		  case Traverse of
		    %% Line 1370
		    <'first_next'> when 'true' ->
			%% Line 1371
			( fun () ->
			      let <_cor2> =
				  call 'ets':'first'
				      (_cor1)
			      in  apply 'qlc_next'/2
				      (_cor1, _cor2)
			  -| [{'id',{0,0,'-table/2-fun-0-'}}] )
		    %% Line 1372
		    <'last_prev'> when 'true' ->
			%% Line 1373
			( fun () ->
			      let <_cor3> =
				  call 'ets':'last'
				      (_cor1)
			      in  apply 'qlc_prev'/2
				      (_cor1, _cor3)
			  -| [{'id',{0,0,'-table/2-fun-1-'}}] )
		    %% Line 1374
		    <'select'> when 'true' ->
			%% Line 1375
			( fun (_cor5) ->
			      let <_cor4> =
				  call 'ets':'select'
				      (_cor1, _cor5, NObjs)
			      in  apply 'qlc_select'/1
				      (_cor4)
			  -| [{'id',{0,0,'-table/2-fun-2-'}}] )
		    %% Line 1376
		    <{'select',MS}> when 'true' ->
			%% Line 1377
			( fun () ->
			      let <_cor7> =
				  call 'ets':'select'
				      (_cor1, MS, NObjs)
			      in  apply 'qlc_select'/1
				      (_cor7)
			  -| [{'id',{0,0,'-table/2-fun-3-'}}] )
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      in  let <PreFun> =
		      %% Line 1379
		      ( fun (_cor11) ->
			    call 'ets':'safe_fixtable'
				(_cor1, 'true')
			-| [{'id',{0,0,'-table/2-fun-4-'}}] )
		  in  let <PostFun> =
			  %% Line 1380
			  ( fun () ->
				call 'ets':'safe_fixtable'
				    (_cor1, 'false')
			    -| [{'id',{0,0,'-table/2-fun-5-'}}] )
		      in  let <InfoFun> =
			      %% Line 1381
			      ( fun (_cor15) ->
				    apply 'table_info'/2
					(_cor1, _cor15)
				-| [{'id',{0,0,'-table/2-fun-6-'}}] )
			  in  let <_cor19> =
				  %% Line 1382
				  case call 'ets':'info'
					   (_cor1, 'type') of
				    %% Line 1383
				    <'ordered_set'> when 'true' ->
					'=='
				    %% Line 1384
				    <_cor55> when 'true' ->
					'=:='
				  end
			      in  let <_cor29> =
				      %% Line 1387
				      case Traverse of
					%% Line 1388
					<{'select',_X_MS}> when 'true' ->
					    %% Line 1389
					    'undefined'
					%% Line 1390
					<_cor56> when 'true' ->
					    %% Line 1391
					    ( fun (_cor25,_cor24) ->
						  case <_cor25,_cor24> of
						    <_X_Pos,[K|[]]> when 'true' ->
							%% Line 1392
							call 'ets':'lookup'
							    (_cor1, K)
						    %% Line 1393
						    <_X_Pos,Ks> when 'true' ->
							let <_cor23> =
							    %% Line 1394
							    ( fun (_cor21) ->
								  call 'ets':'lookup'
								      (_cor1, _cor21)
							      -| [{'id',{0,0,'-table/2-fun-7-'}}] )
							in  %% Line 1394
							    call 'lists':'flatmap'
								(_cor23, %% Line 1395
									 Ks)
						  end
					      -| [{'id',{0,0,'-table/2-fun-8-'}}] )
				      end
				  in  let <FormatFun> =
					  %% Line 1399
					  ( fun (_cor46) ->
						case _cor46 of
						  <{'all',_X_NElements,_X_ElementFun}> when 'true' ->
						      let <_cor35> =
							  %% Line 1400
							  ( letrec
								'lc$^0'/1 =
								    fun (_cor33) ->
									case _cor33 of
									  <[_cor57|_cor32]>
									      when call 'erlang':'=/='
										    (_cor0,
										     []) ->
									      let <_cor34> =
										  apply 'lc$^0'/1
										      (_cor32)
									      in  ( [_cor0|_cor34]
										    -| ['compiler_generated'] )
									  ( <[_cor58|_cor32]> when 'true' ->
										apply 'lc$^0'/1
										    (_cor32)
									    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor33> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor33})
										  -| [{'function_name',{'lc$^0',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^0'/1
								    ([[]])
							    -| ['list_comprehension'] )
						      in  let <As> =
							      %% Line 1400
							      [_cor1|_cor35]
							  in  %% Line 1401
							      {'ets','table',As}
						  %% Line 1402
						  <{'match_spec',MS}> when 'true' ->
						      let <_cor37> =
							  %% Line 1405
							  apply 'listify'/1
							      (_cor0)
						      in  %% Line 1403
							  {'ets','table',%% Line 1404
									 [_cor1|[[{'traverse',{'select',MS}}|_cor37]|%% Line 1405
														     []]]}
						  %% Line 1406
						  <{'lookup',_X_KeyPos,[Value|[]],_X_NElements,ElementFun}> when 'true' ->
						      let <_cor38> =
							  %% Line 1408
							  apply ElementFun
							      (Value)
						      in  %% Line 1407
							  call 'io_lib':'format'
							      ([126|[119|[58|[108|[111|[111|[107|[117|[112|[40|[126|[119|[44|[32|[126|[119|[41]]]]]]]]]]]]]]]]], %% Line 1408
																				 ['ets'|[_cor1|[_cor38|[]]]])
						  %% Line 1409
						  <{'lookup',_X_KeyPos,Values,_X_NElements,ElementFun}> when 'true' ->
						      let <_cor44> =
							  %% Line 1410
							  ( letrec
								'lc$^1'/1 =
								    fun (_cor41) ->
									case _cor41 of
									  <[V|_cor40]> when 'true' ->
									      let <_cor42> =
										  apply ElementFun
										      (V)
									      in  let <_cor43> =
										      apply 'lc$^1'/1
											  (_cor40)
										  in  ( [_cor42|_cor43]
											-| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor41> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor41})
										  -| [{'function_name',{'lc$^1',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^1'/1
								    (Values)
							    -| ['list_comprehension'] )
						      in  %% Line 1411
							  call 'io_lib':'format'
							      ([108|[105|[115|[116|[115|[58|[102|[108|[97|[116|[109|[97|[112|[40|[102|[117|[110|[40|[86|[41|[32|[45|[62|[32|[126|[119|[58|[108|[111|[111|[107|[117|[112|[40|[126|[119|[44|[32|[86|[41|[32|[101|[110|[100|[44|[32|[126|[119|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1413
																																										 ['ets'|[_cor1|[_cor44|[]]]])
						  ( <_cor47> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor47})
							  -| [{'function_name',{'-table/2-fun-9-',1}}] )
						    -| ['compiler_generated'] )
						end
					    -| [{'id',{0,0,'-table/2-fun-9-'}}] )
				      in  let <_cor49> =
					      %% Line 1415
					      [{'pre_fun',PreFun}|[{'post_fun',PostFun}|%% Line 1416
											[{'info_fun',InfoFun}|[{'format_fun',FormatFun}|%% Line 1417
																	[{'key_equality',_cor19}|%% Line 1418
																				 [{'lookup_fun',_cor29}|QlcOptions]]]]]]
					  in  %% Line 1415
					      call 'qlc':'table'
						  (_cor9, _cor49)
	  ( <_cor50> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor50})
	    -| ['compiler_generated'] )
	end
'table_info'/2 =
    %% Line 1421
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tab,'num_of_objects'> when 'true' ->
	      %% Line 1422
	      call 'ets':'info'
		  (Tab, 'size')
	  %% Line 1423
	  <Tab,'keypos'> when 'true' ->
	      %% Line 1424
	      call 'ets':'info'
		  (Tab, 'keypos')
	  %% Line 1425
	  <Tab,'is_unique_objects'> when 'true' ->
	      let <_cor2> =
		  %% Line 1426
		  call 'ets':'info'
		      (Tab, 'type')
	      in  %% Line 1426
		  call 'erlang':'=/='
		      (_cor2, 'duplicate_bag')
	  %% Line 1427
	  <Tab,'is_sorted_key'> when 'true' ->
	      let <_cor3> =
		  %% Line 1428
		  call 'ets':'info'
		      (Tab, 'type')
	      in  %% Line 1428
		  call 'erlang':'=:='
		      (_cor3, 'ordered_set')
	  %% Line 1429
	  <_X_Tab,_cor6> when 'true' ->
	      %% Line 1430
	      'undefined'
	end
'qlc_next'/2 =
    %% Line 1432
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Tab,'$end_of_table'> when 'true' ->
	      %% Line 1433
	      []
	  %% Line 1434
	  <Tab,Key> when 'true' ->
	      let <_cor4> =
		  %% Line 1435
		  call 'ets':'lookup'
		      (Tab, Key)
	      in  let <_cor3> =
		      %% Line 1435
		      ( fun () ->
			    let <_cor2> =
				call 'ets':'next'
				    (Tab, Key)
			    in  apply 'qlc_next'/2
				    (Tab, _cor2)
			-| [{'id',{0,0,'-qlc_next/2-fun-0-'}}] )
		  in  %% Line 1435
		      call 'erlang':'++'
			  (_cor4, _cor3)
	end
'qlc_prev'/2 =
    %% Line 1437
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Tab,'$end_of_table'> when 'true' ->
	      %% Line 1438
	      []
	  %% Line 1439
	  <Tab,Key> when 'true' ->
	      let <_cor4> =
		  %% Line 1440
		  call 'ets':'lookup'
		      (Tab, Key)
	      in  let <_cor3> =
		      %% Line 1440
		      ( fun () ->
			    let <_cor2> =
				call 'ets':'prev'
				    (Tab, Key)
			    in  apply 'qlc_prev'/2
				    (Tab, _cor2)
			-| [{'id',{0,0,'-qlc_prev/2-fun-0-'}}] )
		  in  %% Line 1440
		      call 'erlang':'++'
			  (_cor4, _cor3)
	end
'qlc_select'/1 =
    %% Line 1442
    fun (_cor0) ->
	case _cor0 of
	  <'$end_of_table'> when 'true' ->
	      %% Line 1443
	      []
	  %% Line 1444
	  <{Objects,Cont}> when 'true' ->
	      let <_cor2> =
		  %% Line 1445
		  ( fun () ->
			let <_cor1> =
			    call 'ets':'select'
				(Cont)
			in  apply 'qlc_select'/1
				(_cor1)
		    -| [{'id',{0,0,'-qlc_select/1-fun-0-'}}] )
	      in  %% Line 1445
		  call 'erlang':'++'
		      (Objects, _cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'qlc_select',1}}] )
	    -| ['compiler_generated'] )
	end
'options'/2 =
    %% Line 1447
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Options,Keys>
	      when call 'erlang':'is_list'
		    (Options) ->
	      %% Line 1448
	      apply 'options'/3
		  (Options, Keys, [])
	  %% Line 1449
	  <Option,Keys> when 'true' ->
	      %% Line 1450
	      apply 'options'/3
		  ([Option|[]], Keys, [])
	end
'options'/3 =
    %% Line 1452
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Options,[Key|Keys],L>
	      when call 'erlang':'is_list'
		    (Options) ->
	      let <_cor8> =
		  %% Line 1453
		  case call 'lists':'keyfind'
			   (Key, 1, Options) of
		    %% Line 1454
		    <{'n_objects','default'}> when 'true' ->
			let <_cor3> =
			    %% Line 1455
			    apply 'default_option'/1
				(Key)
			in  %% Line 1455
			    {'ok',_cor3}
		    %% Line 1456
		    <{'n_objects',NObjs}>
			when let <_cor4> =
			      call 'erlang':'is_integer'
				  (NObjs)
			  in  let <_cor5> =
				  call 'erlang':'>='
				      (NObjs, 1)
			      in  call 'erlang':'and'
				      (_cor4, _cor5) ->
			%% Line 1457
			{'ok',NObjs}
		    %% Line 1458
		    <{'traverse','select'}> when 'true' ->
			%% Line 1459
			{'ok','select'}
		    %% Line 1460
		    <{'traverse',Select = {'select',_X_MS}}> when 'true' ->
			%% Line 1461
			{'ok',Select}
		    %% Line 1462
		    <{'traverse','first_next'}> when 'true' ->
			%% Line 1463
			{'ok','first_next'}
		    %% Line 1464
		    <{'traverse','last_prev'}> when 'true' ->
			%% Line 1465
			{'ok','last_prev'}
		    %% Line 1466
		    <{_cor16,_cor17}>
			when call 'erlang':'=:='
			      (_cor16,
			       Key) ->
			%% Line 1467
			'badarg'
		    %% Line 1468
		    <'false'> when 'true' ->
			let <Default> =
			    %% Line 1469
			    apply 'default_option'/1
				(Key)
			in  %% Line 1470
			    {'ok',Default}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1472
		  case _cor8 of
		    %% Line 1473
		    <'badarg'> when 'true' ->
			%% Line 1474
			{'badarg',Key}
		    %% Line 1475
		    <{'ok',Value}> when 'true' ->
			let <NewOptions> =
			    %% Line 1476
			    call 'lists':'keydelete'
				(Key, 1, Options)
			in  %% Line 1477
			    apply 'options'/3
				(NewOptions, Keys, [Value|L])
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1479
	  <Options,[],L> when 'true' ->
	      let <_cor12> =
		  %% Line 1480
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 1480
		  [_cor12|[Options|[]]]
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'options',3}}] )
	    -| ['compiler_generated'] )
	end
'default_option'/1 =
    %% Line 1482
    fun (_cor0) ->
	case _cor0 of
	  <'traverse'> when 'true' ->
	      'select'
	  %% Line 1483
	  <'n_objects'> when 'true' ->
	      100
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'default_option',1}}] )
	    -| ['compiler_generated'] )
	end
'listify'/1 =
    %% Line 1485
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1486
	      L
	  %% Line 1487
	  <T> when 'true' ->
	      %% Line 1488
	      [T|[]]
	end
'i'/0 =
    %% Line 1495
    fun () ->
	do  %% Line 1496
	    apply 'hform'/6
		('id', 'name', 'type', 'size', 'mem', 'owner')
	    do  %% Line 1497
		call 'io':'format'
		    ([32|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		let <_cor0> =
		    %% Line 1499
		    apply 'tabs'/0
			()
		in  do  %% Line 1499
			call 'lists':'foreach'
			    (( 'prinfo'/1
			       -| [{'id',{0,0,'-i/0-fun-0-'}}] ), _cor0)
			%% Line 1500
			'ok'
'tabs'/0 =
    %% Line 1502
    fun () ->
	let <_cor0> =
	    %% Line 1503
	    call 'ets':'all'
		()
	in  %% Line 1503
	    call 'lists':'sort'
		(_cor0)
'prinfo'/1 =
    %% Line 1505
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 1506
		apply 'prinfo2'/1
		    (_cor0)
	in  %% Line 1506
	    case _cor1 of
	      %% Line 1507
	      <{'EXIT',_cor5}> when 'true' ->
		  let <_cor2> =
		      %% Line 1508
		      apply 'to_string'/1
			  (_cor0)
		  in  %% Line 1508
		      call 'io':'format'
			  ([126|[45|[49|[48|[115|[32|[46|[46|[46|[32|[117|[110|[114|[101|[97|[100|[97|[98|[108|[101|[32|[10]]]]]]]]]]]]]]]]]]]]]], [_cor2|[]])
	      %% Line 1509
	      <'ok'> when 'true' ->
		  %% Line 1510
		  'ok'
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'prinfo2'/1 =
    %% Line 1512
    fun (_cor0) ->
	let <Name> =
	    %% Line 1513
	    call 'ets':'info'
		(_cor0, 'name')
	in  let <Type> =
		%% Line 1514
		call 'ets':'info'
		    (_cor0, 'type')
	    in  let <Size> =
		    %% Line 1515
		    call 'ets':'info'
			(_cor0, 'size')
		in  let <Mem> =
			%% Line 1516
			call 'ets':'info'
			    (_cor0, 'memory')
		    in  let <Owner> =
			    %% Line 1517
			    call 'ets':'info'
				(_cor0, 'owner')
			in  let <_cor6> =
				%% Line 1518
				apply 'is_reg'/1
				    (Owner)
			    in  %% Line 1518
				apply 'hform'/6
				    (_cor0, Name, Type, Size, Mem, _cor6)
'is_reg'/1 =
    %% Line 1520
    fun (_cor0) ->
	%% Line 1521
	case call 'erlang':'process_info'
		 (_cor0, 'registered_name') of
	  %% Line 1522
	  <{'registered_name',Name}> when 'true' ->
	      Name
	  %% Line 1523
	  <_cor3> when 'true' ->
	      _cor0
	end
'hform'/6 =
    %% Line 1529
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 1530
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[T|_cor7]> when 'true' ->
				let <_cor9> =
				    apply 'to_string'/1
					(T)
				in  let <_cor10> =
					apply 'lc$^0'/1
					    (_cor7)
				    in  ( [_cor9|_cor10]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      ([_cor5|[_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]]])
	      -| ['list_comprehension'] )
	in  %% Line 1530
	    case _cor11 of
	      <[A|[B|[C|[D|[E|[F|[]]]]]]]> when 'true' ->
		  let <A1> =
		      %% Line 1531
		      apply 'pad_right'/2
			  (A, 15)
		  in  let <B1> =
			  %% Line 1532
			  apply 'pad_right'/2
			      (B, 17)
		      in  let <C1> =
			      %% Line 1533
			      apply 'pad_right'/2
				  (C, 5)
			  in  let <D1> =
				  %% Line 1534
				  apply 'pad_right'/2
				      (D, 6)
			      in  let <E1> =
				      %% Line 1535
				      apply 'pad_right'/2
					  (E, 8)
				  in  %% Line 1537
				      call 'io':'format'
					  ([32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]], [A1|[B1|[C1|[D1|[E1|[F|[]]]]]]])
	      ( <_cor12> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor12})
		-| ['compiler_generated'] )
	    end
'pad_right'/2 =
    %% Line 1539
    fun (_cor1,_cor0) ->
	%% Line 1540
	case <> of
	  %% Line 1541
	  <>
	      when try
		    let <_cor2> =
			call 'erlang':'length'
			    (_cor1)
		    in  call 'erlang':'>='
			    (_cor2, _cor0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      _cor1
	  %% Line 1543
	  <> when 'true' ->
	      let <_cor4> =
		  %% Line 1545
		  call 'erlang':'length'
		      (_cor1)
	      in  let <_cor5> =
		      %% Line 1545
		      call 'erlang':'-'
			  (_cor0, _cor4)
		  in  let <_cor6> =
			  %% Line 1545
			  call 'lists':'duplicate'
			      (_cor5, 32)
		      in  %% Line 1545
			  call 'erlang':'++'
			      (_cor1, _cor6)
	end
'to_string'/1 =
    %% Line 1548
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1549
	    call 'io_lib':'format'
		([126|[112]], [_cor0|[]])
	in  %% Line 1549
	    call 'lists':'flatten'
		(_cor1)
'i'/1 =
    %% Line 1555
    fun (_cor0) ->
	%% Line 1556
	apply 'i'/2
	    (_cor0, 40)
'i'/2 =
    %% Line 1560
    fun (_cor1,_cor0) ->
	%% Line 1561
	apply 'i'/3
	    (_cor1, _cor0, 80)
'i'/3 =
    %% Line 1565
    fun (_cor2,_cor1,_cor0) ->
	let <First> =
	    %% Line 1566
	    call 'ets':'first'
		(_cor2)
	in  %% Line 1567
	    apply 'display_items'/6
		(_cor1, _cor0, _cor2, First, 1, 1)
'display_items'/6 =
    %% Line 1569
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Height,Width,Tab,'$end_of_table',Turn,Opos> when 'true' ->
	      %% Line 1571
	      apply 'choice'/8
		  (Height, Width, 'EOT  (q)uit (p)Digits (k)ill /Regexp -->', 'eot', Tab, '$end_of_table', Turn, Opos)
	  %% Line 1572
	  <Height,Width,Tab,Key,Turn,Opos>
	      when call 'erlang':'<'
		    (Turn,
		     Height) ->
	      %% Line 1573
	      apply 'do_display'/6
		  (Height, Width, Tab, Key, Turn, Opos)
	  %% Line 1574
	  <Height,Width,Tab,Key,Turn,Opos>
	      when call 'erlang':'>='
		    (Turn,
		     Height) ->
	      %% Line 1576
	      apply 'choice'/8
		  (Height, Width, '(c)ontinue (q)uit (p)Digits (k)ill /Regexp -->', 'normal', Tab, Key, Turn, Opos)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'display_items',6}}] )
	    -| ['compiler_generated'] )
	end
'choice'/8 =
    %% Line 1578
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1579
	case apply 'get_line'/2
		 (_cor5, [99|[10]]) of
	  %% Line 1580
	  <[99|[10]]>
	      when call 'erlang':'=:='
		    (_cor4,
		     'normal') ->
	      %% Line 1581
	      apply 'do_display'/6
		  (_cor7, _cor6, _cor3, _cor2, 1, _cor0)
	  %% Line 1582
	  <[99|[10]]>
	      when try
		    let <_cor8> =
			call 'erlang':'is_tuple'
			    (_cor4)
		    in  let <_cor9> =
			    call 'erlang':'element'
				(1, _cor4)
			in  let <_cor10> =
				call 'erlang':'=:='
				    (_cor9, 're')
			    in  call 'erlang':'and'
				    (_cor8, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1583
	      case _cor4 of
		<{'re',Re}> when 'true' ->
		    %% Line 1584
		    apply 're_search'/7
			(_cor7, _cor6, _cor3, _cor2, Re, 1, _cor0)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1585
	  <[113|[10]]> when 'true' ->
	      %% Line 1586
	      'ok'
	  %% Line 1587
	  <[107|[10]]> when 'true' ->
	      do  %% Line 1588
		  call 'ets':'delete'
		      (_cor3)
		  %% Line 1589
		  'ok'
	  %% Line 1590
	  <[112|Digs]> when 'true' ->
	      do  catch
		      let <_cor13> =
			  catch
			      let <_cor12> =
				  %% Line 1591
				  apply 'nonl'/1
				      (Digs)
			      in  %% Line 1591
				  call 'erlang':'list_to_integer'
				      (_cor12)
		      in  %% Line 1591
			  case _cor13 of
			    %% Line 1592
			    <{'EXIT',_cor31}> when 'true' ->
				%% Line 1593
				call 'io':'put_chars'
				    ([66|[97|[100|[32|[100|[105|[103|[105|[116|[115|[10]]]]]]]]]]])
			    %% Line 1594
			    <Number>
				when call 'erlang':'=:='
				      (_cor4,
				       'normal') ->
				let <_cor14> =
				    %% Line 1595
				    call 'ets':'first'
					(_cor3)
				in  %% Line 1595
				    apply 'print_number'/3
					(_cor3, _cor14, Number)
			    %% Line 1596
			    <Number>
				when call 'erlang':'=:='
				      (_cor4,
				       'eot') ->
				let <_cor15> =
				    %% Line 1597
				    call 'ets':'first'
					(_cor3)
				in  %% Line 1597
				    apply 'print_number'/3
					(_cor3, _cor15, Number)
			    %% Line 1598
			    <Number> when 'true' ->
				%% Line 1599
				case _cor4 of
				  <{'re',Re}> when 'true' ->
				      let <_cor17> =
					  %% Line 1600
					  call 'ets':'first'
					      (_cor3)
				      in  %% Line 1600
					  apply 'print_re_num'/4
					      (_cor3, _cor17, Number, Re)
				  ( <_cor16> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor16})
				    -| ['compiler_generated'] )
				end
			  end
		  %% Line 1602
		  apply 'choice'/8
		      (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 1603
	  <[47|Regexp]> when 'true' ->
	      let <_cor19> =
		  %% Line 1604
		  apply 'nonl'/1
		      (Regexp)
	      in  %% Line 1604
		  case call 're':'compile'
			   (_cor19) of
		    %% Line 1605
		    <{'ok',Re}> when 'true' ->
			let <_cor20> =
			    %% Line 1606
			    call 'ets':'first'
				(_cor3)
			in  %% Line 1606
			    apply 're_search'/7
				(_cor7, _cor6, _cor3, _cor20, Re, 1, 1)
		    %% Line 1607
		    <{'error',{ErrorString,_X_Pos}}> when 'true' ->
			do  %% Line 1608
			    call 'io':'format'
				([126|[116|[115|[10]]]], [ErrorString|[]])
			    %% Line 1609
			    apply 'choice'/8
				(_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
		    ( <_cor21> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor21})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1611
	  <_cor32> when 'true' ->
	      %% Line 1612
	      apply 'choice'/8
		  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	end
'get_line'/2 =
    %% Line 1615
    fun (_cor1,_cor0) ->
	%% Line 1616
	case call 'io':'get_line'
		 (_cor1) of
	  %% Line 1617
	  <[10]> when 'true' ->
	      _cor0
	  %% Line 1619
	  <L> when 'true' ->
	      %% Line 1620
	      L
	end
'nonl'/1 =
    %% Line 1623
    fun (_cor0) ->
	call 'string':'strip'
	    (_cor0, 'right', 10)
'print_number'/3 =
    %% Line 1625
    fun (_cor2,_cor1,_cor0) ->
	let <Os> =
	    %% Line 1626
	    call 'ets':'lookup'
		(_cor2, _cor1)
	in  let <Len> =
		%% Line 1627
		call 'erlang':'length'
		    (Os)
	    in  %% Line 1628
		case <> of
		  %% Line 1629
		  <>
		      when try
			    let <_cor5> =
				call 'erlang':'-'
				    (_cor0, Len)
			    in  call 'erlang':'<'
				    (_cor5, 1)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      let <O> =
			  %% Line 1630
			  call 'lists':'nth'
			      (_cor0, Os)
		      in  %% Line 1631
			  call 'io':'format'
			      ([126|[112|[126|[110]]]], [O|[]])
		  %% Line 1632
		  <> when 'true' ->
		      let <_cor8> =
			  %% Line 1633
			  call 'ets':'next'
			      (_cor2, _cor1)
		      in  let <_cor7> =
			      %% Line 1633
			      call 'erlang':'-'
				  (_cor0, Len)
			  in  %% Line 1633
			      apply 'print_number'/3
				  (_cor2, _cor8, _cor7)
		end
'do_display'/6 =
    %% Line 1636
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Objs> =
	    %% Line 1637
	    call 'ets':'lookup'
		(_cor3, _cor2)
	in  do  %% Line 1638
		apply 'do_display_items'/4
		    (_cor5, _cor4, Objs, _cor0)
		let <Len> =
		    %% Line 1639
		    call 'erlang':'length'
			(Objs)
		in  let <_cor10> =
			%% Line 1640
			call 'ets':'next'
			    (_cor3, _cor2)
		    in  let <_cor9> =
			    %% Line 1640
			    call 'erlang':'+'
				(_cor1, Len)
			in  let <_cor8> =
				%% Line 1640
				call 'erlang':'+'
				    (_cor0, Len)
			    in  %% Line 1640
				apply 'display_items'/6
				    (_cor5, _cor4, _cor3, _cor10, _cor9, _cor8)
'do_display_items'/4 =
    %% Line 1642
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Height,Width,[Obj|Tail],Opos> when 'true' ->
	      do  %% Line 1643
		  apply 'do_display_item'/4
		      (Height, Width, Obj, Opos)
		  let <_cor4> =
		      %% Line 1644
		      call 'erlang':'+'
			  (Opos, 1)
		  in  %% Line 1644
		      apply 'do_display_items'/4
			  (Height, Width, Tail, _cor4)
	  %% Line 1645
	  <_X_Height,_X_Width,[],Opos> when 'true' ->
	      %% Line 1646
	      Opos
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'do_display_items',4}}] )
	    -| ['compiler_generated'] )
	end
'do_display_item'/4 =
    %% Line 1648
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <L> =
	    %% Line 1649
	    apply 'to_string'/1
		(_cor1)
	in  let <_cor9> =
		%% Line 1650
		case <> of
		  %% Line 1651
		  <>
		      when try
			    let <_cor6> =
				call 'erlang':'length'
				    (L)
			    in  let <_cor5> =
				    call 'erlang':'-'
					(_cor2, 8)
				in  call 'erlang':'>'
					(_cor6, _cor5)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      let <_cor7> =
			  %% Line 1652
			  call 'erlang':'-'
			      (_cor2, 13)
		      in  let <_cor8> =
			      %% Line 1652
			      call 'string':'substr'
				  (L, 1, _cor7)
			  in  %% Line 1652
			      call 'erlang':'++'
				  (_cor8, [32|[32|[46|[46|[46]]]]])
		  %% Line 1653
		  <> when 'true' ->
		      %% Line 1654
		      L
		end
	    in  %% Line 1656
		call 'io':'format'
		    ([60|[126|[45|[52|[119|[62|[32|[126|[115|[126|[110]]]]]]]]]]], [_cor0|[_cor9|[]]])
're_search'/7 =
    %% Line 1658
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Height,Width,Tab,'$end_of_table',Re,Turn,Opos> when 'true' ->
	      %% Line 1660
	      apply 'choice'/8
		  (Height, Width, 'EOT  (q)uit (p)Digits (k)ill /Regexp -->', {'re',Re}, Tab, '$end_of_table', Turn, Opos)
	  %% Line 1661
	  <Height,Width,Tab,Key,Re,Turn,Opos>
	      when call 'erlang':'<'
		    (Turn,
		     Height) ->
	      let <_cor8> =
		  %% Line 1662
		  call 'ets':'lookup'
		      (Tab, Key)
	      in  %% Line 1662
		  apply 're_display'/8
		      (Height, Width, Tab, Key, _cor8, Re, Turn, Opos)
	  %% Line 1663
	  <Height,Width,Tab,Key,Re,Turn,Opos> when 'true' ->
	      %% Line 1665
	      apply 'choice'/8
		  (Height, Width, '(c)ontinue (q)uit (p)Digits (k)ill /Regexp -->', {'re',Re}, Tab, Key, Turn, Opos)
	end
're_display'/8 =
    %% Line 1667
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Height,Width,Tab,Key,[],Re,Turn,Opos> when 'true' ->
	      let <_cor8> =
		  %% Line 1668
		  call 'ets':'next'
		      (Tab, Key)
	      in  %% Line 1668
		  apply 're_search'/7
		      (Height, Width, Tab, _cor8, Re, Turn, Opos)
	  %% Line 1669
	  <Height,Width,Tab,Key,[H|T],Re,Turn,Opos> when 'true' ->
	      let <Str> =
		  %% Line 1670
		  apply 'to_string'/1
		      (H)
	      in  %% Line 1671
		  case call 're':'run'
			   (Str, Re, [{'capture','none'}]) of
		    %% Line 1672
		    <'match'> when 'true' ->
			do  %% Line 1673
			    apply 'do_display_item'/4
				(Height, Width, H, Opos)
			    let <_cor11> =
				%% Line 1674
				call 'erlang':'+'
				    (Turn, 1)
			    in  let <_cor10> =
				    %% Line 1674
				    call 'erlang':'+'
					(Opos, 1)
				in  %% Line 1674
				    apply 're_display'/8
					(Height, Width, Tab, Key, T, Re, _cor11, _cor10)
		    %% Line 1675
		    <'nomatch'> when 'true' ->
			%% Line 1676
			apply 're_display'/8
			    (Height, Width, Tab, Key, T, Re, Turn, Opos)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'re_display',8}}] )
	    -| ['compiler_generated'] )
	end
'print_re_num'/4 =
    %% Line 1679
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor15,'$end_of_table',_cor16,_cor17> when 'true' ->
	      'ok'
	  %% Line 1680
	  <Tab,Key,Num,Re> when 'true' ->
	      let <_cor4> =
		  %% Line 1681
		  call 'ets':'lookup'
		      (Tab, Key)
	      in  let <Os> =
		      %% Line 1681
		      apply 're_match'/2
			  (_cor4, Re)
		  in  let <Len> =
			  %% Line 1682
			  call 'erlang':'length'
			      (Os)
		      in  %% Line 1683
			  case <> of
			    %% Line 1684
			    <>
				when try
				      let <_cor7> =
					  call 'erlang':'-'
					      (Num, Len)
				      in  call 'erlang':'<'
					      (_cor7, 1)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <O> =
				    %% Line 1685
				    call 'lists':'nth'
					(Num, Os)
				in  %% Line 1686
				    call 'io':'format'
					([126|[112|[126|[110]]]], [O|[]])
			    %% Line 1687
			    <> when 'true' ->
				let <_cor10> =
				    %% Line 1688
				    call 'ets':'next'
					(Tab, Key)
				in  let <_cor9> =
					%% Line 1688
					call 'erlang':'-'
					    (Num, Len)
				    in  %% Line 1688
					apply 'print_re_num'/4
					    (Tab, _cor10, _cor9, Re)
			  end
	end
're_match'/2 =
    %% Line 1691
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor7> when 'true' ->
	      []
	  %% Line 1692
	  <[H|T],Re> when 'true' ->
	      let <_cor2> =
		  %% Line 1693
		  apply 'to_string'/1
		      (H)
	      in  %% Line 1693
		  case call 're':'run'
			   (_cor2, Re, [{'capture','none'}]) of
		    %% Line 1694
		    <'match'> when 'true' ->
			let <_cor3> =
			    %% Line 1695
			    apply 're_match'/2
				(T, Re)
			in  %% Line 1695
			    [H|_cor3]
		    %% Line 1696
		    <'nomatch'> when 'true' ->
			%% Line 1697
			apply 're_match'/2
			    (T, Re)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'re_match',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ets')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ets', _cor0)
end