module 'io' ['columns'/0,
	     'columns'/1,
	     'format'/1,
	     'format'/2,
	     'format'/3,
	     'fread'/2,
	     'fread'/3,
	     'fwrite'/1,
	     'fwrite'/2,
	     'fwrite'/3,
	     'get_chars'/2,
	     'get_chars'/3,
	     'get_line'/1,
	     'get_line'/2,
	     'get_password'/0,
	     'get_password'/1,
	     'getopts'/0,
	     'getopts'/1,
	     'module_info'/0,
	     'module_info'/1,
	     'nl'/0,
	     'nl'/1,
	     'parse_erl_exprs'/1,
	     'parse_erl_exprs'/2,
	     'parse_erl_exprs'/3,
	     'parse_erl_exprs'/4,
	     'parse_erl_form'/1,
	     'parse_erl_form'/2,
	     'parse_erl_form'/3,
	     'parse_erl_form'/4,
	     'printable_range'/0,
	     'put_chars'/1,
	     'put_chars'/2,
	     'read'/1,
	     'read'/2,
	     'read'/3,
	     'read'/4,
	     'request'/1,
	     'request'/2,
	     'requests'/1,
	     'requests'/2,
	     'rows'/0,
	     'rows'/1,
	     'scan_erl_exprs'/1,
	     'scan_erl_exprs'/2,
	     'scan_erl_exprs'/3,
	     'scan_erl_exprs'/4,
	     'scan_erl_form'/1,
	     'scan_erl_form'/2,
	     'scan_erl_form'/3,
	     'scan_erl_form'/4,
	     'setopts'/1,
	     'setopts'/2,
	     'write'/1,
	     'write'/2]
    attributes [%% Line 38
		'export_type' =
		    %% Line 38
		    [{'device',0}|[{'format',0}|[{'server_no_data',0}]]],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'device',{'type',42,'union',[{'type',42,'atom',[]}|[{'type',42,'pid',[]}]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'prompt',{'type',43,'union',[{'type',43,'atom',[]}|[{'remote_type',43,[{'atom',43,'unicode'}|[{'atom',43,'chardata'}|[[]]]]}]]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'server_no_data',{'type',46,'union',[{'type',46,'tuple',[{'atom',46,'error'}|[{'ann_type',46,[{'var',46,'ErrorDescription'}|[{'type',46,'term',[]}]]}]]}|[{'atom',46,'eof'}]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'location',{'remote_type',48,[{'atom',48,'erl_scan'}|[{'atom',48,'location'}|[[]]]]},[]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'printable_range',0},[{'type',72,'fun',[{'type',72,'product',[]}|[{'type',72,'union',[{'atom',72,'unicode'}|[{'atom',72,'latin1'}]]}]]}]}],
		%% Line 77
		'spec' =
		    %% Line 77
		    [{{'put_chars',1},[{'type',77,'bounded_fun',[{'type',77,'fun',[{'type',77,'product',[{'var',77,'CharData'}]}|[{'atom',77,'ok'}]]}|[[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'CharData'}|[{'remote_type',78,[{'atom',78,'unicode'}|[{'atom',78,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'put_chars',2},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'IoDevice'}|[{'var',83,'CharData'}]]}|[{'atom',83,'ok'}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'IoDevice'}|[{'type',84,'device',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'CharData'}|[{'remote_type',85,[{'atom',85,'unicode'}|[{'atom',85,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'nl',0},[{'type',90,'fun',[{'type',90,'product',[]}|[{'atom',90,'ok'}]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'nl',1},[{'type',95,'bounded_fun',[{'type',95,'fun',[{'type',95,'product',[{'var',95,'IoDevice'}]}|[{'atom',95,'ok'}]]}|[[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'IoDevice'}|[{'type',96,'device',[]}]]]]}]]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'columns',0},[{'type',102,'fun',[{'type',102,'product',[]}|[{'type',102,'union',[{'type',102,'tuple',[{'atom',102,'ok'}|[{'type',102,'pos_integer',[]}]]}|[{'type',102,'tuple',[{'atom',102,'error'}|[{'atom',102,'enotsup'}]]}]]}]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'columns',1},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'IoDevice'}]}|[{'type',107,'union',[{'type',107,'tuple',[{'atom',107,'ok'}|[{'type',107,'pos_integer',[]}]]}|[{'type',107,'tuple',[{'atom',107,'error'}|[{'atom',107,'enotsup'}]]}]]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'IoDevice'}|[{'type',108,'device',[]}]]]]}]]]}]}],
		%% Line 118
		'spec' =
		    %% Line 118
		    [{{'rows',0},[{'type',118,'fun',[{'type',118,'product',[]}|[{'type',118,'union',[{'type',118,'tuple',[{'atom',118,'ok'}|[{'type',118,'pos_integer',[]}]]}|[{'type',118,'tuple',[{'atom',118,'error'}|[{'atom',118,'enotsup'}]]}]]}]]}]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'rows',1},[{'type',123,'bounded_fun',[{'type',123,'fun',[{'type',123,'product',[{'var',123,'IoDevice'}]}|[{'type',123,'union',[{'type',123,'tuple',[{'atom',123,'ok'}|[{'type',123,'pos_integer',[]}]]}|[{'type',123,'tuple',[{'atom',123,'error'}|[{'atom',123,'enotsup'}]]}]]}]]}|[[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'IoDevice'}|[{'type',124,'device',[]}]]]]}]]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'get_chars',2},[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'Prompt'}|[{'var',134,'Count'}]]}|[{'type',134,'union',[{'var',134,'Data'}|[{'type',134,'server_no_data',[]}]]}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Prompt'}|[{'type',135,'prompt',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Count'}|[{'type',136,'non_neg_integer',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Data'}|[{'type',137,'union',[{'type',137,'string',[]}|[{'remote_type',137,[{'atom',137,'unicode'}|[{'atom',137,'unicode_binary'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'get_chars',3},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'IoDevice'}|[{'var',142,'Prompt'}|[{'var',142,'Count'}]]]}|[{'type',142,'union',[{'var',142,'Data'}|[{'type',142,'server_no_data',[]}]]}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'IoDevice'}|[{'type',143,'device',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Prompt'}|[{'type',144,'prompt',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Count'}|[{'type',145,'non_neg_integer',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Data'}|[{'type',146,'union',[{'type',146,'string',[]}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'unicode_binary'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'get_line',1},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'Prompt'}]}|[{'type',151,'union',[{'var',151,'Data'}|[{'type',151,'server_no_data',[]}]]}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Prompt'}|[{'type',152,'prompt',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Data'}|[{'type',153,'union',[{'type',153,'string',[]}|[{'remote_type',153,[{'atom',153,'unicode'}|[{'atom',153,'unicode_binary'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'get_line',2},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'IoDevice'}|[{'var',158,'Prompt'}]]}|[{'type',158,'union',[{'var',158,'Data'}|[{'type',158,'server_no_data',[]}]]}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'IoDevice'}|[{'type',159,'device',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Prompt'}|[{'type',160,'prompt',[]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Data'}|[{'type',161,'union',[{'type',161,'string',[]}|[{'remote_type',161,[{'atom',161,'unicode'}|[{'atom',161,'unicode_binary'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 172
		'type' =
		    %% Line 172
		    [{'encoding',{'type',172,'union',[{'atom',172,'latin1'}|[{'atom',172,'unicode'}|[{'atom',172,'utf8'}|[{'atom',172,'utf16'}|[{'atom',172,'utf32'}|[{'type',173,'tuple',[{'atom',173,'utf16'}|[{'type',173,'union',[{'atom',173,'big'}|[{'atom',173,'little'}]]}]]}|[{'type',173,'tuple',[{'atom',173,'utf32'}|[{'type',173,'union',[{'atom',173,'big'}|[{'atom',173,'little'}]]}]]}]]]]]]]},[]}],
		%% Line 174
		'type' =
		    %% Line 174
		    [{'expand_fun',{'type',174,'fun',[{'type',174,'product',[{'type',174,'term',[]}]}|[{'type',174,'tuple',[{'type',174,'union',[{'atom',174,'yes'}|[{'atom',174,'no'}]]}|[{'type',174,'string',[]}|[{'type',174,'nonempty_list',[{'type',174,'string',[]}]}]]]}]]},[]}],
		%% Line 175
		'type' =
		    %% Line 175
		    [{'opt_pair',{'type',175,'union',[{'type',175,'tuple',[{'atom',175,'binary'}|[{'type',175,'boolean',[]}]]}|[{'type',176,'tuple',[{'atom',176,'echo'}|[{'type',176,'boolean',[]}]]}|[{'type',177,'tuple',[{'atom',177,'expand_fun'}|[{'type',177,'expand_fun',[]}]]}|[{'type',178,'tuple',[{'atom',178,'encoding'}|[{'type',178,'encoding',[]}]]}]]]]},[]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'getopts',0},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[]}|[{'type',180,'union',[{'type',180,'list',[{'type',180,'opt_pair',[]}]}|[{'type',180,'tuple',[{'atom',180,'error'}|[{'var',180,'Reason'}]]}]]}]]}|[[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Reason'}|[{'type',181,'term',[]}]]]]}]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'getopts',1},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'IoDevice'}]}|[{'type',186,'union',[{'type',186,'list',[{'type',186,'opt_pair',[]}]}|[{'type',186,'tuple',[{'atom',186,'error'}|[{'var',186,'Reason'}]]}]]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'IoDevice'}|[{'type',187,'device',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Reason'}|[{'type',188,'term',[]}]]]]}]]]]}]}],
		%% Line 193
		'type' =
		    %% Line 193
		    [{'setopt',{'type',193,'union',[{'atom',193,'binary'}|[{'atom',193,'list'}|[{'type',193,'opt_pair',[]}]]]},[]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'setopts',1},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'Opts'}]}|[{'type',195,'union',[{'atom',195,'ok'}|[{'type',195,'tuple',[{'atom',195,'error'}|[{'var',195,'Reason'}]]}]]}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Opts'}|[{'type',196,'list',[{'type',196,'setopt',[]}]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Reason'}|[{'type',197,'term',[]}]]]]}]]]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'setopts',2},[{'type',202,'bounded_fun',[{'type',202,'fun',[{'type',202,'product',[{'var',202,'IoDevice'}|[{'var',202,'Opts'}]]}|[{'type',202,'union',[{'atom',202,'ok'}|[{'type',202,'tuple',[{'atom',202,'error'}|[{'var',202,'Reason'}]]}]]}]]}|[[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'IoDevice'}|[{'type',203,'device',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Opts'}|[{'type',204,'list',[{'type',204,'setopt',[]}]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Reason'}|[{'type',205,'term',[]}]]]]}]]]]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'write',1},[{'type',212,'bounded_fun',[{'type',212,'fun',[{'type',212,'product',[{'var',212,'Term'}]}|[{'atom',212,'ok'}]]}|[[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Term'}|[{'type',213,'term',[]}]]]]}]]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'write',2},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[{'var',218,'IoDevice'}|[{'var',218,'Term'}]]}|[{'atom',218,'ok'}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'IoDevice'}|[{'type',219,'device',[]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Term'}|[{'type',220,'term',[]}]]]]}]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'read',1},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'Prompt'}]}|[{'var',226,'Result'}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Prompt'}|[{'type',227,'prompt',[]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Result'}|[{'type',228,'union',[{'type',228,'tuple',[{'atom',228,'ok'}|[{'ann_type',228,[{'var',228,'Term'}|[{'type',228,'term',[]}]]}]]}|[{'type',229,'server_no_data',[]}|[{'type',230,'tuple',[{'atom',230,'error'}|[{'var',230,'ErrorInfo'}]]}]]]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'ErrorInfo'}|[{'type',231,'union',[{'remote_type',231,[{'atom',231,'erl_scan'}|[{'atom',231,'error_info'}|[[]]]]}|[{'remote_type',231,[{'atom',231,'erl_parse'}|[{'atom',231,'error_info'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'read',2},[{'type',236,'bounded_fun',[{'type',236,'fun',[{'type',236,'product',[{'var',236,'IoDevice'}|[{'var',236,'Prompt'}]]}|[{'var',236,'Result'}]]}|[[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'IoDevice'}|[{'type',237,'device',[]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Prompt'}|[{'type',238,'prompt',[]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Result'}|[{'type',239,'union',[{'type',239,'tuple',[{'atom',239,'ok'}|[{'ann_type',239,[{'var',239,'Term'}|[{'type',239,'term',[]}]]}]]}|[{'type',240,'server_no_data',[]}|[{'type',241,'tuple',[{'atom',241,'error'}|[{'var',241,'ErrorInfo'}]]}]]]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'ErrorInfo'}|[{'type',242,'union',[{'remote_type',242,[{'atom',242,'erl_scan'}|[{'atom',242,'error_info'}|[[]]]]}|[{'remote_type',242,[{'atom',242,'erl_parse'}|[{'atom',242,'error_info'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 258
		'spec' =
		    %% Line 258
		    [{{'read',3},[{'type',258,'bounded_fun',[{'type',258,'fun',[{'type',258,'product',[{'var',258,'IoDevice'}|[{'var',258,'Prompt'}|[{'var',258,'StartLocation'}]]]}|[{'var',258,'Result'}]]}|[[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'IoDevice'}|[{'type',259,'device',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Prompt'}|[{'type',260,'prompt',[]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'StartLocation'}|[{'type',261,'location',[]}]]]]}|[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'Result'}|[{'type',262,'union',[{'type',262,'tuple',[{'atom',262,'ok'}|[{'ann_type',262,[{'var',262,'Term'}|[{'type',262,'term',[]}]]}|[{'ann_type',262,[{'var',262,'EndLocation'}|[{'type',262,'location',[]}]]}]]]}|[{'type',263,'tuple',[{'atom',263,'eof'}|[{'ann_type',263,[{'var',263,'EndLocation'}|[{'type',263,'location',[]}]]}]]}|[{'type',264,'server_no_data',[]}|[{'type',265,'tuple',[{'atom',265,'error'}|[{'var',265,'ErrorInfo'}|[{'ann_type',265,[{'var',265,'ErrorLocation'}|[{'type',265,'location',[]}]]}]]]}]]]]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'ErrorInfo'}|[{'type',266,'union',[{'remote_type',266,[{'atom',266,'erl_scan'}|[{'atom',266,'error_info'}|[[]]]]}|[{'remote_type',266,[{'atom',266,'erl_parse'}|[{'atom',266,'error_info'}|[[]]]]}]]}]]]]}]]]]]]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'read',4},[{'type',271,'bounded_fun',[{'type',271,'fun',[{'type',271,'product',[{'var',271,'IoDevice'}|[{'var',271,'Prompt'}|[{'var',271,'StartLocation'}|[{'var',271,'Options'}]]]]}|[{'var',271,'Result'}]]}|[[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'IoDevice'}|[{'type',272,'device',[]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Prompt'}|[{'type',273,'prompt',[]}]]]]}|[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'StartLocation'}|[{'type',274,'location',[]}]]]]}|[{'type',275,'constraint',[{'atom',275,'is_subtype'}|[[{'var',275,'Options'}|[{'remote_type',275,[{'atom',275,'erl_scan'}|[{'atom',275,'options'}|[[]]]]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Result'}|[{'type',276,'union',[{'type',276,'tuple',[{'atom',276,'ok'}|[{'ann_type',276,[{'var',276,'Term'}|[{'type',276,'term',[]}]]}|[{'ann_type',276,[{'var',276,'EndLocation'}|[{'type',276,'location',[]}]]}]]]}|[{'type',277,'tuple',[{'atom',277,'eof'}|[{'ann_type',277,[{'var',277,'EndLocation'}|[{'type',277,'location',[]}]]}]]}|[{'type',278,'server_no_data',[]}|[{'type',279,'tuple',[{'atom',279,'error'}|[{'var',279,'ErrorInfo'}|[{'ann_type',279,[{'var',279,'ErrorLocation'}|[{'type',279,'location',[]}]]}]]]}]]]]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'ErrorInfo'}|[{'type',280,'union',[{'remote_type',280,[{'atom',280,'erl_scan'}|[{'atom',280,'error_info'}|[[]]]]}|[{'remote_type',280,[{'atom',280,'erl_parse'}|[{'atom',280,'error_info'}|[[]]]]}]]}]]]]}]]]]]]]]}]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'format',{'type',305,'union',[{'type',305,'atom',[]}|[{'type',305,'string',[]}|[{'type',305,'binary',[]}]]]},[]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'fwrite',1},[{'type',307,'bounded_fun',[{'type',307,'fun',[{'type',307,'product',[{'var',307,'Format'}]}|[{'atom',307,'ok'}]]}|[[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'Format'}|[{'type',308,'format',[]}]]]]}]]]}]}],
		%% Line 313
		'spec' =
		    %% Line 313
		    [{{'fwrite',2},[{'type',313,'bounded_fun',[{'type',313,'fun',[{'type',313,'product',[{'var',313,'Format'}|[{'var',313,'Data'}]]}|[{'atom',313,'ok'}]]}|[[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'Format'}|[{'type',314,'format',[]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Data'}|[{'type',315,'list',[{'type',315,'term',[]}]}]]]]}]]]]}]}],
		%% Line 320
		'spec' =
		    %% Line 320
		    [{{'fwrite',3},[{'type',320,'bounded_fun',[{'type',320,'fun',[{'type',320,'product',[{'var',320,'IoDevice'}|[{'var',320,'Format'}|[{'var',320,'Data'}]]]}|[{'atom',320,'ok'}]]}|[[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'IoDevice'}|[{'type',321,'device',[]}]]]]}|[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Format'}|[{'type',322,'format',[]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Data'}|[{'type',323,'list',[{'type',323,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 328
		'spec' =
		    %% Line 328
		    [{{'fread',2},[{'type',328,'bounded_fun',[{'type',328,'fun',[{'type',328,'product',[{'var',328,'Prompt'}|[{'var',328,'Format'}]]}|[{'var',328,'Result'}]]}|[[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Prompt'}|[{'type',329,'prompt',[]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Format'}|[{'type',330,'format',[]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'Result'}|[{'type',331,'union',[{'type',331,'tuple',[{'atom',331,'ok'}|[{'ann_type',331,[{'var',331,'Terms'}|[{'type',331,'list',[{'type',331,'term',[]}]}]]}]]}|[{'atom',331,'eof'}|[{'type',331,'tuple',[{'atom',331,'error'}|[{'ann_type',331,[{'var',331,'What'}|[{'type',331,'term',[]}]]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 336
		'spec' =
		    %% Line 336
		    [{{'fread',3},[{'type',336,'bounded_fun',[{'type',336,'fun',[{'type',336,'product',[{'var',336,'IoDevice'}|[{'var',336,'Prompt'}|[{'var',336,'Format'}]]]}|[{'var',336,'Result'}]]}|[[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'IoDevice'}|[{'type',337,'device',[]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Prompt'}|[{'type',338,'prompt',[]}]]]]}|[{'type',339,'constraint',[{'atom',339,'is_subtype'}|[[{'var',339,'Format'}|[{'type',339,'format',[]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Result'}|[{'type',340,'union',[{'type',340,'tuple',[{'atom',340,'ok'}|[{'ann_type',340,[{'var',340,'Terms'}|[{'type',340,'list',[{'type',340,'term',[]}]}]]}]]}|[{'type',341,'tuple',[{'atom',341,'error'}|[{'type',341,'tuple',[{'atom',341,'fread'}|[{'ann_type',341,[{'var',341,'FreadError'}|[{'remote_type',341,[{'atom',341,'io_lib'}|[{'atom',341,'fread_error'}|[[]]]]}]]}]]}]]}|[{'type',342,'server_no_data',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 352
		'spec' =
		    %% Line 352
		    [{{'format',1},[{'type',352,'bounded_fun',[{'type',352,'fun',[{'type',352,'product',[{'var',352,'Format'}]}|[{'atom',352,'ok'}]]}|[[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'Format'}|[{'type',353,'format',[]}]]]]}]]]}]}],
		%% Line 358
		'spec' =
		    %% Line 358
		    [{{'format',2},[{'type',358,'bounded_fun',[{'type',358,'fun',[{'type',358,'product',[{'var',358,'Format'}|[{'var',358,'Data'}]]}|[{'atom',358,'ok'}]]}|[[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'Format'}|[{'type',359,'format',[]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Data'}|[{'type',360,'list',[{'type',360,'term',[]}]}]]]]}]]]]}]}],
		%% Line 365
		'spec' =
		    %% Line 365
		    [{{'format',3},[{'type',365,'bounded_fun',[{'type',365,'fun',[{'type',365,'product',[{'var',365,'IoDevice'}|[{'var',365,'Format'}|[{'var',365,'Data'}]]]}|[{'atom',365,'ok'}]]}|[[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'IoDevice'}|[{'type',366,'device',[]}]]]]}|[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'Format'}|[{'type',367,'format',[]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'Data'}|[{'type',368,'list',[{'type',368,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 375
		'spec' =
		    %% Line 375
		    [{{'scan_erl_exprs',1},[{'type',375,'bounded_fun',[{'type',375,'fun',[{'type',375,'product',[{'var',375,'Prompt'}]}|[{'var',375,'Result'}]]}|[[{'type',376,'constraint',[{'atom',376,'is_subtype'}|[[{'var',376,'Prompt'}|[{'type',376,'prompt',[]}]]]]}|[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'Result'}|[{'type',377,'union',[{'remote_type',377,[{'atom',377,'erl_scan'}|[{'atom',377,'tokens_result'}|[[]]]]}|[{'type',377,'server_no_data',[]}]]}]]]]}]]]]}]}],
		%% Line 382
		'spec' =
		    %% Line 382
		    [{{'scan_erl_exprs',2},[{'type',382,'bounded_fun',[{'type',382,'fun',[{'type',382,'product',[{'var',382,'Device'}|[{'var',382,'Prompt'}]]}|[{'var',382,'Result'}]]}|[[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'Device'}|[{'type',383,'device',[]}]]]]}|[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'Prompt'}|[{'type',384,'prompt',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'Result'}|[{'type',385,'union',[{'remote_type',385,[{'atom',385,'erl_scan'}|[{'atom',385,'tokens_result'}|[[]]]]}|[{'type',385,'server_no_data',[]}]]}]]]]}]]]]]}]}],
		%% Line 390
		'spec' =
		    %% Line 390
		    [{{'scan_erl_exprs',3},[{'type',390,'bounded_fun',[{'type',390,'fun',[{'type',390,'product',[{'var',390,'Device'}|[{'var',390,'Prompt'}|[{'var',390,'StartLocation'}]]]}|[{'var',390,'Result'}]]}|[[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Device'}|[{'type',391,'device',[]}]]]]}|[{'type',392,'constraint',[{'atom',392,'is_subtype'}|[[{'var',392,'Prompt'}|[{'type',392,'prompt',[]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'StartLocation'}|[{'type',393,'location',[]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'Result'}|[{'type',394,'union',[{'remote_type',394,[{'atom',394,'erl_scan'}|[{'atom',394,'tokens_result'}|[[]]]]}|[{'type',394,'server_no_data',[]}]]}]]]]}]]]]]]}]}],
		%% Line 399
		'spec' =
		    %% Line 399
		    [{{'scan_erl_exprs',4},[{'type',399,'bounded_fun',[{'type',399,'fun',[{'type',399,'product',[{'var',399,'Device'}|[{'var',399,'Prompt'}|[{'var',399,'StartLocation'}|[{'var',399,'Options'}]]]]}|[{'var',399,'Result'}]]}|[[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Device'}|[{'type',400,'device',[]}]]]]}|[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'Prompt'}|[{'type',401,'prompt',[]}]]]]}|[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'StartLocation'}|[{'type',402,'location',[]}]]]]}|[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'Options'}|[{'remote_type',403,[{'atom',403,'erl_scan'}|[{'atom',403,'options'}|[[]]]]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'Result'}|[{'type',404,'union',[{'remote_type',404,[{'atom',404,'erl_scan'}|[{'atom',404,'tokens_result'}|[[]]]]}|[{'type',404,'server_no_data',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 409
		'spec' =
		    %% Line 409
		    [{{'scan_erl_form',1},[{'type',409,'bounded_fun',[{'type',409,'fun',[{'type',409,'product',[{'var',409,'Prompt'}]}|[{'var',409,'Result'}]]}|[[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'Prompt'}|[{'type',410,'prompt',[]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Result'}|[{'type',411,'union',[{'remote_type',411,[{'atom',411,'erl_scan'}|[{'atom',411,'tokens_result'}|[[]]]]}|[{'type',411,'server_no_data',[]}]]}]]]]}]]]]}]}],
		%% Line 416
		'spec' =
		    %% Line 416
		    [{{'scan_erl_form',2},[{'type',416,'bounded_fun',[{'type',416,'fun',[{'type',416,'product',[{'var',416,'IoDevice'}|[{'var',416,'Prompt'}]]}|[{'var',416,'Result'}]]}|[[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'IoDevice'}|[{'type',417,'device',[]}]]]]}|[{'type',418,'constraint',[{'atom',418,'is_subtype'}|[[{'var',418,'Prompt'}|[{'type',418,'prompt',[]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Result'}|[{'type',419,'union',[{'remote_type',419,[{'atom',419,'erl_scan'}|[{'atom',419,'tokens_result'}|[[]]]]}|[{'type',419,'server_no_data',[]}]]}]]]]}]]]]]}]}],
		%% Line 424
		'spec' =
		    %% Line 424
		    [{{'scan_erl_form',3},[{'type',424,'bounded_fun',[{'type',424,'fun',[{'type',424,'product',[{'var',424,'IoDevice'}|[{'var',424,'Prompt'}|[{'var',424,'StartLocation'}]]]}|[{'var',424,'Result'}]]}|[[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'IoDevice'}|[{'type',425,'device',[]}]]]]}|[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'Prompt'}|[{'type',426,'prompt',[]}]]]]}|[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'StartLocation'}|[{'type',427,'location',[]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'Result'}|[{'type',428,'union',[{'remote_type',428,[{'atom',428,'erl_scan'}|[{'atom',428,'tokens_result'}|[[]]]]}|[{'type',428,'server_no_data',[]}]]}]]]]}]]]]]]}]}],
		%% Line 433
		'spec' =
		    %% Line 433
		    [{{'scan_erl_form',4},[{'type',433,'bounded_fun',[{'type',433,'fun',[{'type',433,'product',[{'var',433,'IoDevice'}|[{'var',433,'Prompt'}|[{'var',433,'StartLocation'}|[{'var',433,'Options'}]]]]}|[{'var',433,'Result'}]]}|[[{'type',434,'constraint',[{'atom',434,'is_subtype'}|[[{'var',434,'IoDevice'}|[{'type',434,'device',[]}]]]]}|[{'type',435,'constraint',[{'atom',435,'is_subtype'}|[[{'var',435,'Prompt'}|[{'type',435,'prompt',[]}]]]]}|[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'StartLocation'}|[{'type',436,'location',[]}]]]]}|[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'Options'}|[{'remote_type',437,[{'atom',437,'erl_scan'}|[{'atom',437,'options'}|[[]]]]}]]]]}|[{'type',438,'constraint',[{'atom',438,'is_subtype'}|[[{'var',438,'Result'}|[{'type',438,'union',[{'remote_type',438,[{'atom',438,'erl_scan'}|[{'atom',438,'tokens_result'}|[[]]]]}|[{'type',438,'server_no_data',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 445
		'type' =
		    %% Line 445
		    [{'parse_ret',{'type',445,'union',[{'type',445,'tuple',[{'atom',445,'ok'}|[{'ann_type',446,[{'var',446,'ExprList'}|[{'remote_type',446,[{'atom',446,'erl_parse'}|[{'atom',446,'abstract_expr'}|[[]]]]}]]}|[{'ann_type',447,[{'var',447,'EndLocation'}|[{'type',447,'location',[]}]]}]]]}|[{'type',448,'tuple',[{'atom',448,'eof'}|[{'ann_type',448,[{'var',448,'EndLocation'}|[{'type',448,'location',[]}]]}]]}|[{'type',449,'tuple',[{'atom',449,'error'}|[{'ann_type',450,[{'var',450,'ErrorInfo'}|[{'type',450,'union',[{'remote_type',450,[{'atom',450,'erl_scan'}|[{'atom',450,'error_info'}|[[]]]]}|[{'remote_type',451,[{'atom',451,'erl_parse'}|[{'atom',451,'error_info'}|[[]]]]}]]}]]}|[{'ann_type',452,[{'var',452,'ErrorLocation'}|[{'type',452,'location',[]}]]}]]]}|[{'type',453,'server_no_data',[]}]]]]},[]}],
		%% Line 455
		'spec' =
		    %% Line 455
		    [{{'parse_erl_exprs',1},[{'type',455,'bounded_fun',[{'type',455,'fun',[{'type',455,'product',[{'var',455,'Prompt'}]}|[{'var',455,'Result'}]]}|[[{'type',456,'constraint',[{'atom',456,'is_subtype'}|[[{'var',456,'Prompt'}|[{'type',456,'prompt',[]}]]]]}|[{'type',457,'constraint',[{'atom',457,'is_subtype'}|[[{'var',457,'Result'}|[{'type',457,'parse_ret',[]}]]]]}]]]]}]}],
		%% Line 462
		'spec' =
		    %% Line 462
		    [{{'parse_erl_exprs',2},[{'type',462,'bounded_fun',[{'type',462,'fun',[{'type',462,'product',[{'var',462,'IoDevice'}|[{'var',462,'Prompt'}]]}|[{'var',462,'Result'}]]}|[[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'IoDevice'}|[{'type',463,'device',[]}]]]]}|[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'Prompt'}|[{'type',464,'prompt',[]}]]]]}|[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'Result'}|[{'type',465,'parse_ret',[]}]]]]}]]]]]}]}],
		%% Line 470
		'spec' =
		    %% Line 470
		    [{{'parse_erl_exprs',3},[{'type',470,'bounded_fun',[{'type',470,'fun',[{'type',470,'product',[{'var',470,'IoDevice'}|[{'var',470,'Prompt'}|[{'var',470,'StartLocation'}]]]}|[{'var',470,'Result'}]]}|[[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'IoDevice'}|[{'type',471,'device',[]}]]]]}|[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'Prompt'}|[{'type',472,'prompt',[]}]]]]}|[{'type',473,'constraint',[{'atom',473,'is_subtype'}|[[{'var',473,'StartLocation'}|[{'type',473,'location',[]}]]]]}|[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'Result'}|[{'type',474,'parse_ret',[]}]]]]}]]]]]]}]}],
		%% Line 479
		'spec' =
		    %% Line 479
		    [{{'parse_erl_exprs',4},[{'type',479,'bounded_fun',[{'type',479,'fun',[{'type',479,'product',[{'var',479,'IoDevice'}|[{'var',479,'Prompt'}|[{'var',479,'StartLocation'}|[{'var',479,'Options'}]]]]}|[{'var',479,'Result'}]]}|[[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'IoDevice'}|[{'type',480,'device',[]}]]]]}|[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Prompt'}|[{'type',481,'prompt',[]}]]]]}|[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'StartLocation'}|[{'type',482,'location',[]}]]]]}|[{'type',483,'constraint',[{'atom',483,'is_subtype'}|[[{'var',483,'Options'}|[{'remote_type',483,[{'atom',483,'erl_scan'}|[{'atom',483,'options'}|[[]]]]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'Result'}|[{'type',484,'parse_ret',[]}]]]]}]]]]]]]}]}],
		%% Line 497
		'type' =
		    %% Line 497
		    [{'parse_form_ret',{'type',497,'union',[{'type',497,'tuple',[{'atom',497,'ok'}|[{'ann_type',498,[{'var',498,'AbsForm'}|[{'remote_type',498,[{'atom',498,'erl_parse'}|[{'atom',498,'abstract_form'}|[[]]]]}]]}|[{'ann_type',499,[{'var',499,'EndLocation'}|[{'type',499,'location',[]}]]}]]]}|[{'type',500,'tuple',[{'atom',500,'eof'}|[{'ann_type',500,[{'var',500,'EndLocation'}|[{'type',500,'location',[]}]]}]]}|[{'type',501,'tuple',[{'atom',501,'error'}|[{'ann_type',502,[{'var',502,'ErrorInfo'}|[{'type',502,'union',[{'remote_type',502,[{'atom',502,'erl_scan'}|[{'atom',502,'error_info'}|[[]]]]}|[{'remote_type',503,[{'atom',503,'erl_parse'}|[{'atom',503,'error_info'}|[[]]]]}]]}]]}|[{'ann_type',504,[{'var',504,'ErrorLocation'}|[{'type',504,'location',[]}]]}]]]}|[{'type',505,'server_no_data',[]}]]]]},[]}],
		%% Line 507
		'spec' =
		    %% Line 507
		    [{{'parse_erl_form',1},[{'type',507,'bounded_fun',[{'type',507,'fun',[{'type',507,'product',[{'var',507,'Prompt'}]}|[{'var',507,'Result'}]]}|[[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'Prompt'}|[{'type',508,'prompt',[]}]]]]}|[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'Result'}|[{'type',509,'parse_form_ret',[]}]]]]}]]]]}]}],
		%% Line 514
		'spec' =
		    %% Line 514
		    [{{'parse_erl_form',2},[{'type',514,'bounded_fun',[{'type',514,'fun',[{'type',514,'product',[{'var',514,'IoDevice'}|[{'var',514,'Prompt'}]]}|[{'var',514,'Result'}]]}|[[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'IoDevice'}|[{'type',515,'device',[]}]]]]}|[{'type',516,'constraint',[{'atom',516,'is_subtype'}|[[{'var',516,'Prompt'}|[{'type',516,'prompt',[]}]]]]}|[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'Result'}|[{'type',517,'parse_form_ret',[]}]]]]}]]]]]}]}],
		%% Line 522
		'spec' =
		    %% Line 522
		    [{{'parse_erl_form',3},[{'type',522,'bounded_fun',[{'type',522,'fun',[{'type',522,'product',[{'var',522,'IoDevice'}|[{'var',522,'Prompt'}|[{'var',522,'StartLocation'}]]]}|[{'var',522,'Result'}]]}|[[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'IoDevice'}|[{'type',523,'device',[]}]]]]}|[{'type',524,'constraint',[{'atom',524,'is_subtype'}|[[{'var',524,'Prompt'}|[{'type',524,'prompt',[]}]]]]}|[{'type',525,'constraint',[{'atom',525,'is_subtype'}|[[{'var',525,'StartLocation'}|[{'type',525,'location',[]}]]]]}|[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'Result'}|[{'type',526,'parse_form_ret',[]}]]]]}]]]]]]}]}],
		%% Line 531
		'spec' =
		    %% Line 531
		    [{{'parse_erl_form',4},[{'type',531,'bounded_fun',[{'type',531,'fun',[{'type',531,'product',[{'var',531,'IoDevice'}|[{'var',531,'Prompt'}|[{'var',531,'StartLocation'}|[{'var',531,'Options'}]]]]}|[{'var',531,'Result'}]]}|[[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'IoDevice'}|[{'type',532,'device',[]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Prompt'}|[{'type',533,'prompt',[]}]]]]}|[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'StartLocation'}|[{'type',534,'location',[]}]]]]}|[{'type',535,'constraint',[{'atom',535,'is_subtype'}|[[{'var',535,'Options'}|[{'remote_type',535,[{'atom',535,'erl_scan'}|[{'atom',535,'options'}|[[]]]]}]]]]}|[{'type',536,'constraint',[{'atom',536,'is_subtype'}|[[{'var',536,'Result'}|[{'type',536,'parse_form_ret',[]}]]]]}]]]]]]]}]}]]
'to_tuple'/1 =
    %% Line 58
    fun (_cor0) ->
	case _cor0 of
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      T
	  %% Line 59
	  <T> when 'true' ->
	      {T}
	end
'o_request'/3 =
    %% Line 61
    fun (_cor2,_cor1,_cor0) ->
	%% Line 62
	case apply 'request'/2
		 (_cor2, _cor1) of
	  %% Line 63
	  <{'error',Reason}> when 'true' ->
	      let <_cor3> =
		  %% Line 64
		  apply 'to_tuple'/1
		      (_cor1)
	      in  %% Line 64
		  case call 'erlang':'tuple_to_list'
			   (_cor3) of
		    <[_X_Name|Args]> when 'true' ->
			let <_cor5> =
			    catch
				%% Line 65
				call 'erlang':'error'
				    ('get_stacktrace')
			in  %% Line 65
			    case _cor5 of
			      <{'EXIT',{'get_stacktrace',[_X_Current|Mfas]}}> when 'true' ->
				  let <_cor7> =
				      %% Line 66
				      apply 'conv_reason'/2
					  (_cor0, Reason)
				  in  %% Line 66
				      call 'erlang':'raise'
					  ('error', _cor7, [{'io',_cor0,[_cor2|Args]}|Mfas])
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 67
	  <Other> when 'true' ->
	      %% Line 68
	      Other
	end
'printable_range'/0 =
    %% Line 73
    fun () ->
	%% Line 74
	call 'erlang':'nif_error'
	    ('undefined')
'put_chars'/1 =
    %% Line 80
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 81
	    apply 'default_output'/0
		()
	in  %% Line 81
	    apply 'put_chars'/2
		(_cor1, _cor0)
'put_chars'/2 =
    %% Line 87
    fun (_cor1,_cor0) ->
	%% Line 88
	apply 'o_request'/3
	    (_cor1, {'put_chars','unicode',_cor0}, 'put_chars')
'nl'/0 =
    %% Line 92
    fun () ->
	let <_cor0> =
	    %% Line 93
	    apply 'default_output'/0
		()
	in  %% Line 93
	    apply 'nl'/1
		(_cor0)
'nl'/1 =
    %% Line 98
    fun (_cor0) ->
	%% Line 100
	apply 'o_request'/3
	    (_cor0, 'nl', 'nl')
'columns'/0 =
    %% Line 104
    fun () ->
	let <_cor0> =
	    %% Line 105
	    apply 'default_output'/0
		()
	in  %% Line 105
	    apply 'columns'/1
		(_cor0)
'columns'/1 =
    %% Line 110
    fun (_cor0) ->
	%% Line 111
	case apply 'request'/2
		 (_cor0, {'get_geometry','columns'}) of
	  %% Line 112
	  <N>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor2> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 113
	      {'ok',N}
	  %% Line 114
	  <_cor5> when 'true' ->
	      %% Line 115
	      {'error','enotsup'}
	end
'rows'/0 =
    %% Line 120
    fun () ->
	let <_cor0> =
	    %% Line 121
	    apply 'default_output'/0
		()
	in  %% Line 121
	    apply 'rows'/1
		(_cor0)
'rows'/1 =
    %% Line 126
    fun (_cor0) ->
	%% Line 127
	case apply 'request'/2
		 (_cor0, {'get_geometry','rows'}) of
	  %% Line 128
	  <N>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor2> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 129
	      {'ok',N}
	  %% Line 130
	  <_cor5> when 'true' ->
	      %% Line 131
	      {'error','enotsup'}
	end
'get_chars'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 140
	    apply 'default_input'/0
		()
	in  %% Line 140
	    apply 'get_chars'/3
		(_cor2, _cor1, _cor0)
'get_chars'/3 =
    %% Line 148
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Io,Prompt,N>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 149
	      apply 'request'/2
		  (Io, {'get_chars','unicode',Prompt,N})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_chars',3}}] )
	    -| ['compiler_generated'] )
	end
'get_line'/1 =
    %% Line 155
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 156
	    apply 'default_input'/0
		()
	in  %% Line 156
	    apply 'get_line'/2
		(_cor1, _cor0)
'get_line'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	%% Line 164
	apply 'request'/2
	    (_cor1, {'get_line','unicode',_cor0})
'get_password'/0 =
    %% Line 166
    fun () ->
	let <_cor0> =
	    %% Line 167
	    apply 'default_input'/0
		()
	in  %% Line 167
	    apply 'get_password'/1
		(_cor0)
'get_password'/1 =
    %% Line 169
    fun (_cor0) ->
	%% Line 170
	apply 'request'/2
	    (_cor0, {'get_password','unicode'})
'getopts'/0 =
    %% Line 183
    fun () ->
	let <_cor0> =
	    %% Line 184
	    apply 'default_input'/0
		()
	in  %% Line 184
	    apply 'getopts'/1
		(_cor0)
'getopts'/1 =
    %% Line 190
    fun (_cor0) ->
	%% Line 191
	apply 'request'/2
	    (_cor0, 'getopts')
'setopts'/1 =
    %% Line 199
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 200
	    apply 'default_input'/0
		()
	in  %% Line 200
	    apply 'setopts'/2
		(_cor1, _cor0)
'setopts'/2 =
    %% Line 207
    fun (_cor1,_cor0) ->
	%% Line 208
	apply 'request'/2
	    (_cor1, {'setopts',_cor0})
'write'/1 =
    %% Line 215
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 216
	    apply 'default_output'/0
		()
	in  %% Line 216
	    apply 'write'/2
		(_cor1, _cor0)
'write'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	%% Line 223
	apply 'o_request'/3
	    (_cor1, {'write',_cor0}, 'write')
'read'/1 =
    %% Line 233
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 234
	    apply 'default_input'/0
		()
	in  %% Line 234
	    apply 'read'/2
		(_cor1, _cor0)
'read'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	%% Line 245
	case apply 'request'/2
		 (_cor1, {'get_until','unicode',_cor0,'erl_scan','tokens',[1]}) of
	  %% Line 246
	  <{'ok',Toks,_X_EndLine}> when 'true' ->
	      %% Line 247
	      call 'erl_parse':'parse_term'
		  (Toks)
	  %% Line 250
	  <{'error',E,_X_EndLine}> when 'true' ->
	      %% Line 251
	      {'error',E}
	  %% Line 252
	  <{'eof',_X_EndLine}> when 'true' ->
	      %% Line 253
	      'eof'
	  %% Line 254
	  <Other> when 'true' ->
	      %% Line 255
	      Other
	end
'read'/3 =
    %% Line 268
    fun (_cor2,_cor1,_cor0) ->
	%% Line 269
	apply 'read'/4
	    (_cor2, _cor1, _cor0, [])
'read'/4 =
    %% Line 282
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 283
	    [_cor1|[_cor0|[]]]
	in  %% Line 284
	    case apply 'request'/2
		     (_cor3, {'get_until','unicode',_cor2,'erl_scan','tokens',Args}) of
	      %% Line 285
	      <{'ok',Toks,EndLocation}> when 'true' ->
		  %% Line 286
		  case call 'erl_parse':'parse_term'
			   (Toks) of
		    %% Line 287
		    <{'ok',Term}> when 'true' ->
			{'ok',Term,EndLocation}
		    %% Line 288
		    <{'error',ErrorInfo}> when 'true' ->
			{'error',ErrorInfo,EndLocation}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 290
	      <Error = {'error',_X_E,_X_EndLocation}> when 'true' ->
		  %% Line 291
		  Error
	      %% Line 292
	      <Eof = {'eof',_X_EndLocation}> when 'true' ->
		  %% Line 293
		  Eof
	      %% Line 294
	      <Other> when 'true' ->
		  %% Line 295
		  Other
	    end
'conv_reason'/2 =
    %% Line 300
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,'arguments'> when 'true' ->
	      'badarg'
	  %% Line 301
	  <_cor5,'terminated'> when 'true' ->
	      'terminated'
	  %% Line 302
	  <_cor6,{'no_translation',_cor7,_cor8}> when 'true' ->
	      'no_translation'
	  %% Line 303
	  <_cor9,_X_Reason> when 'true' ->
	      'badarg'
	end
'fwrite'/1 =
    %% Line 310
    fun (_cor0) ->
	%% Line 311
	apply 'format'/1
	    (_cor0)
'fwrite'/2 =
    %% Line 317
    fun (_cor1,_cor0) ->
	%% Line 318
	apply 'format'/2
	    (_cor1, _cor0)
'fwrite'/3 =
    %% Line 325
    fun (_cor2,_cor1,_cor0) ->
	%% Line 326
	apply 'format'/3
	    (_cor2, _cor1, _cor0)
'fread'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 334
	    apply 'default_input'/0
		()
	in  %% Line 334
	    apply 'fread'/3
		(_cor2, _cor1, _cor0)
'fread'/3 =
    %% Line 344
    fun (_cor2,_cor1,_cor0) ->
	%% Line 345
	apply 'request'/2
	    (_cor2, {'fread',_cor1,_cor0})
'format'/1 =
    %% Line 355
    fun (_cor0) ->
	%% Line 356
	apply 'format'/2
	    (_cor0, [])
'format'/2 =
    %% Line 362
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 363
	    apply 'default_output'/0
		()
	in  %% Line 363
	    apply 'format'/3
		(_cor2, _cor1, _cor0)
'format'/3 =
    %% Line 370
    fun (_cor2,_cor1,_cor0) ->
	%% Line 371
	apply 'o_request'/3
	    (_cor2, {'format',_cor1,_cor0}, 'format')
'scan_erl_exprs'/1 =
    %% Line 379
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 380
	    apply 'default_input'/0
		()
	in  %% Line 380
	    apply 'scan_erl_exprs'/3
		(_cor1, _cor0, 1)
'scan_erl_exprs'/2 =
    %% Line 387
    fun (_cor1,_cor0) ->
	%% Line 388
	apply 'scan_erl_exprs'/3
	    (_cor1, _cor0, 1)
'scan_erl_exprs'/3 =
    %% Line 396
    fun (_cor2,_cor1,_cor0) ->
	%% Line 397
	apply 'scan_erl_exprs'/4
	    (_cor2, _cor1, _cor0, [])
'scan_erl_exprs'/4 =
    %% Line 406
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 407
	apply 'request'/2
	    (_cor3, {'get_until','unicode',_cor2,'erl_scan','tokens',[_cor1|[_cor0|[]]]})
'scan_erl_form'/1 =
    %% Line 413
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 414
	    apply 'default_input'/0
		()
	in  %% Line 414
	    apply 'scan_erl_form'/3
		(_cor1, _cor0, 1)
'scan_erl_form'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	%% Line 422
	apply 'scan_erl_form'/3
	    (_cor1, _cor0, 1)
'scan_erl_form'/3 =
    %% Line 430
    fun (_cor2,_cor1,_cor0) ->
	%% Line 431
	apply 'scan_erl_form'/4
	    (_cor2, _cor1, _cor0, [])
'scan_erl_form'/4 =
    %% Line 440
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 441
	apply 'request'/2
	    (_cor3, {'get_until','unicode',_cor2,'erl_scan','tokens',[_cor1|[_cor0|[]]]})
'parse_erl_exprs'/1 =
    %% Line 459
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 460
	    apply 'default_input'/0
		()
	in  %% Line 460
	    apply 'parse_erl_exprs'/3
		(_cor1, _cor0, 1)
'parse_erl_exprs'/2 =
    %% Line 467
    fun (_cor1,_cor0) ->
	%% Line 468
	apply 'parse_erl_exprs'/3
	    (_cor1, _cor0, 1)
'parse_erl_exprs'/3 =
    %% Line 476
    fun (_cor2,_cor1,_cor0) ->
	%% Line 477
	apply 'parse_erl_exprs'/4
	    (_cor2, _cor1, _cor0, [])
'parse_erl_exprs'/4 =
    %% Line 486
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 487
	case apply 'request'/2
		 (_cor3, {'get_until','unicode',_cor2,'erl_scan','tokens',[_cor1|[_cor0|[]]]}) of
	  %% Line 488
	  <{'ok',Toks,EndPos}> when 'true' ->
	      %% Line 489
	      case call 'erl_parse':'parse_exprs'
		       (Toks) of
		%% Line 490
		<{'ok',Exprs}> when 'true' ->
		    {'ok',Exprs,EndPos}
		%% Line 491
		<{'error',E}> when 'true' ->
		    {'error',E,EndPos}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 493
	  <Other> when 'true' ->
	      %% Line 494
	      Other
	end
'parse_erl_form'/1 =
    %% Line 511
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 512
	    apply 'default_input'/0
		()
	in  %% Line 512
	    apply 'parse_erl_form'/3
		(_cor1, _cor0, 1)
'parse_erl_form'/2 =
    %% Line 519
    fun (_cor1,_cor0) ->
	%% Line 520
	apply 'parse_erl_form'/3
	    (_cor1, _cor0, 1)
'parse_erl_form'/3 =
    %% Line 528
    fun (_cor2,_cor1,_cor0) ->
	%% Line 529
	apply 'parse_erl_form'/4
	    (_cor2, _cor1, _cor0, [])
'parse_erl_form'/4 =
    %% Line 538
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 539
	    [_cor1|[_cor0|[]]]
	in  %% Line 540
	    case apply 'request'/2
		     (_cor3, {'get_until','unicode',_cor2,'erl_scan','tokens',Args}) of
	      %% Line 541
	      <{'ok',Toks,EndPos}> when 'true' ->
		  %% Line 542
		  case call 'erl_parse':'parse_form'
			   (Toks) of
		    %% Line 543
		    <{'ok',Exprs}> when 'true' ->
			{'ok',Exprs,EndPos}
		    %% Line 544
		    <{'error',E}> when 'true' ->
			{'error',E,EndPos}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 546
	      <Other> when 'true' ->
		  %% Line 547
		  Other
	    end
'request'/1 =
    %% Line 552
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 553
	    apply 'default_output'/0
		()
	in  %% Line 553
	    apply 'request'/2
		(_cor1, _cor0)
'request'/2 =
    %% Line 555
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'standard_io',Request> when 'true' ->
	      let <_cor2> =
		  %% Line 556
		  call 'erlang':'group_leader'
		      ()
	      in  %% Line 556
		  apply 'request'/2
		      (_cor2, Request)
	  %% Line 557
	  <Pid,Request>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor3> =
		  %% Line 558
		  apply 'io_request'/2
		      (Pid, Request)
	      in  %% Line 558
		  apply 'execute_request'/2
		      (Pid, _cor3)
	  %% Line 559
	  <Name,Request>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 560
	      case call 'erlang':'whereis'
		       (Name) of
		%% Line 561
		<'undefined'> when 'true' ->
		    %% Line 562
		    {'error','arguments'}
		%% Line 563
		<Pid> when 'true' ->
		    %% Line 564
		    apply 'request'/2
			(Pid, Request)
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'request',2}}] )
	    -| ['compiler_generated'] )
	end
'execute_request'/2 =
    %% Line 567
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,{Convert,Converted}> when 'true' ->
	      let <Mref> =
		  %% Line 568
		  call 'erlang':'monitor'
		      ('process', Pid)
	      in  let <_cor3> =
		      %% Line 569
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 569
			  call 'erlang':'!'
			      (Pid, {'io_request',_cor3,Pid,Converted})
			  %% Line 570
			  case <> of
			    %% Line 571
			    <>
				when call 'erlang':'=:='
				      (Convert,
				       'true') ->
				let <_cor4> =
				    %% Line 572
				    apply 'wait_io_mon_reply'/2
					(Pid, Mref)
				in  %% Line 572
				    apply 'convert_binaries'/1
					(_cor4)
			    %% Line 573
			    <> when 'true' ->
				%% Line 574
				apply 'wait_io_mon_reply'/2
				    (Pid, Mref)
			  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'execute_request',2}}] )
	    -| ['compiler_generated'] )
	end
'requests'/1 =
    %% Line 577
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 578
	    apply 'default_output'/0
		()
	in  %% Line 578
	    apply 'requests'/2
		(_cor1, _cor0)
'requests'/2 =
    %% Line 580
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'standard_io',Requests> when 'true' ->
	      let <_cor2> =
		  %% Line 581
		  call 'erlang':'group_leader'
		      ()
	      in  %% Line 581
		  apply 'requests'/2
		      (_cor2, Requests)
	  %% Line 582
	  <Pid,Requests>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 583
	      case apply 'io_requests'/2
		       (Pid, Requests) of
		<{Convert,Converted}> when 'true' ->
		    %% Line 584
		    apply 'execute_request'/2
			(Pid, {Convert,{'requests',Converted}})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 585
	  <Name,Requests>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 586
	      case call 'erlang':'whereis'
		       (Name) of
		%% Line 587
		<'undefined'> when 'true' ->
		    %% Line 588
		    {'error','arguments'}
		%% Line 589
		<Pid> when 'true' ->
		    %% Line 590
		    apply 'requests'/2
			(Pid, Requests)
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'requests',2}}] )
	    -| ['compiler_generated'] )
	end
'default_input'/0 =
    %% Line 594
    fun () ->
	%% Line 595
	call 'erlang':'group_leader'
	    ()
'default_output'/0 =
    %% Line 597
    fun () ->
	%% Line 598
	call 'erlang':'group_leader'
	    ()
'wait_io_mon_reply'/2 =
    %% Line 600
    fun (_cor1,_cor0) ->
	%% Line 601
	receive
	  %% Line 602
	  <{'io_reply',_cor4,Reply}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      do  %% Line 603
		  call 'erlang':'demonitor'
		      (_cor0, ['flush'])
		  %% Line 604
		  Reply
	  %% Line 605
	  <{'EXIT',_cor5,_X_What}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      do  %% Line 606
		  receive
		    %% Line 607
		    <{'DOWN',_cor6,_cor7,_cor8,_cor9}>
			when call 'erlang':'=:='
			      (_cor6,
			       _cor0) ->
			'ok'
		  after %% Line 608
			0 ->
		    'ok'
		  %% Line 610
		  {'error','terminated'}
	  %% Line 611
	  <{'DOWN',_cor10,_cor11,_cor12,_cor13}>
	      when call 'erlang':'=:='
		    (_cor10,
		     _cor0) ->
	      do  %% Line 612
		  receive
		    %% Line 613
		    <{'EXIT',_cor14,_X_What}>
			when call 'erlang':'=:='
			      (_cor14,
			       _cor1) ->
			'ok'
		  after %% Line 614
			0 ->
		    'ok'
		  %% Line 616
		  {'error','terminated'}
	after 'infinity' ->
	  'true'
'io_requests'/2 =
    %% Line 625
    fun (_cor1,_cor0) ->
	%% Line 626
	apply 'io_requests'/4
	    (_cor1, _cor0, [], [])
'io_requests'/4 =
    %% Line 628
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Pid,[{'requests',Rs1}|Rs],Cont,Tail> when 'true' ->
	      %% Line 629
	      apply 'io_requests'/4
		  (Pid, Rs1, [Rs|Cont], Tail)
	  %% Line 630
	  <Pid,[R|[]],[],_X_Tail> when 'true' ->
	      %% Line 631
	      case apply 'io_request'/2
		       (Pid, R) of
		<{Conv,Request}> when 'true' ->
		    %% Line 632
		    {Conv,[Request|[]]}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 633
	  <Pid,[R|Rs],Cont,Tail> when 'true' ->
	      %% Line 634
	      case apply 'io_request'/2
		       (Pid, R) of
		<{_cor11,Request}> when 'true' ->
		    %% Line 635
		    case apply 'io_requests'/4
			     (Pid, Rs, Cont, Tail) of
		      <{Conv,Requests}> when 'true' ->
			  %% Line 636
			  {Conv,[Request|Requests]}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 637
	  <Pid,[],[Rs|Cont],Tail> when 'true' ->
	      %% Line 638
	      apply 'io_requests'/4
		  (Pid, Rs, Cont, Tail)
	  %% Line 639
	  <_X_Pid,[],[],_X_Tail> when 'true' ->
	      %% Line 640
	      {'false',[]}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'io_requests',4}}] )
	    -| ['compiler_generated'] )
	end
'bc_req'/3 =
    %% Line 643
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pid,{Op,Enc,Param},MaybeConvert> when 'true' ->
	      %% Line 644
	      case call 'net_kernel':'dflag_unicode_io'
		       (Pid) of
		%% Line 645
		<'true'> when 'true' ->
		    %% Line 646
		    {'false',{Op,Enc,Param}}
		%% Line 647
		<'false'> when 'true' ->
		    %% Line 648
		    {MaybeConvert,{Op,Param}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 650
	  <Pid,{Op,Enc,P,F},MaybeConvert> when 'true' ->
	      %% Line 651
	      case call 'net_kernel':'dflag_unicode_io'
		       (Pid) of
		%% Line 652
		<'true'> when 'true' ->
		    %% Line 653
		    {'false',{Op,Enc,P,F}}
		%% Line 654
		<'false'> when 'true' ->
		    %% Line 655
		    {MaybeConvert,{Op,P,F}}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 657
	  <Pid,{Op,Enc,M,F,A},MaybeConvert> when 'true' ->
	      %% Line 658
	      case call 'net_kernel':'dflag_unicode_io'
		       (Pid) of
		%% Line 659
		<'true'> when 'true' ->
		    %% Line 660
		    {'false',{Op,Enc,M,F,A}}
		%% Line 661
		<'false'> when 'true' ->
		    %% Line 662
		    {MaybeConvert,{Op,M,F,A}}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 664
	  <Pid,{Op,Enc,P,M,F,A},MaybeConvert> when 'true' ->
	      %% Line 665
	      case call 'net_kernel':'dflag_unicode_io'
		       (Pid) of
		%% Line 666
		<'true'> when 'true' ->
		    %% Line 667
		    {'false',{Op,Enc,P,M,F,A}}
		%% Line 668
		<'false'> when 'true' ->
		    %% Line 669
		    {MaybeConvert,{Op,P,M,F,A}}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 671
	  <Pid,{Op,Enc},MaybeConvert> when 'true' ->
	      %% Line 672
	      case call 'net_kernel':'dflag_unicode_io'
		       (Pid) of
		%% Line 673
		<'true'> when 'true' ->
		    %% Line 674
		    {'false',{Op,Enc}}
		%% Line 675
		<'false'> when 'true' ->
		    %% Line 676
		    {MaybeConvert,Op}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'bc_req',3}}] )
	    -| ['compiler_generated'] )
	end
'io_request'/2 =
    %% Line 679
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,{'write',Term}> when 'true' ->
	      %% Line 680
	      apply 'bc_req'/3
		  (Pid, {'put_chars','unicode','io_lib','write',[Term|[]]}, 'false')
	  %% Line 681
	  <Pid,{'format',Format,Args}> when 'true' ->
	      %% Line 682
	      apply 'bc_req'/3
		  (Pid, {'put_chars','unicode','io_lib','format',[Format|[Args|[]]]}, 'false')
	  %% Line 683
	  <Pid,{'fwrite',Format,Args}> when 'true' ->
	      %% Line 684
	      apply 'bc_req'/3
		  (Pid, {'put_chars','unicode','io_lib','fwrite',[Format|[Args|[]]]}, 'false')
	  %% Line 685
	  <Pid,'nl'> when 'true' ->
	      let <_cor2> =
		  %% Line 686
		  call 'io_lib':'nl'
		      ()
	      in  %% Line 686
		  apply 'bc_req'/3
		      (Pid, {'put_chars','unicode',_cor2}, 'false')
	  %% Line 687
	  <Pid,Request0 = {'put_chars',Enc,Chars}>
	      when %% Line 688
		try
		    let <_cor3> =
			call 'erlang':'is_list'
			    (Chars)
		    in  let <_cor5> =
			    call 'erlang':'node'
				(Pid)
			in  let <_cor4> =
				call 'erlang':'node'
				    ()
			    in  let <_cor6> =
				    call 'erlang':'=:='
					(_cor5, _cor4)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  catch
		      %% Line 691
		      call 'unicode':'characters_to_binary'
			  (Chars, Enc)
	      in  let <_cor9> =
		      %% Line 691
		      case _cor7 of
			%% Line 692
			<Binary>
			    when call 'erlang':'is_binary'
				  (_cor7) ->
			    %% Line 693
			    {'put_chars',Enc,Binary}
			%% Line 694
			<_cor18> when 'true' ->
			    %% Line 695
			    Request0
		      end
		  in  %% Line 697
		      {'false',_cor9}
	  %% Line 698
	  <Pid,Request0 = {'put_chars',Enc,Chars}>
	      when %% Line 699
		call 'erlang':'is_list'
		    (Chars) ->
	      %% Line 700
	      case call 'net_kernel':'dflag_unicode_io'
		       (Pid) of
		%% Line 701
		<'true'> when 'true' ->
		    let <_cor11> =
			catch
			    %% Line 702
			    call 'unicode':'characters_to_binary'
				(Chars, Enc, 'unicode')
		    in  %% Line 702
			case _cor11 of
			  %% Line 703
			  <Binary>
			      when call 'erlang':'is_binary'
				    (_cor11) ->
			      %% Line 704
			      {'false',{'put_chars','unicode',Binary}}
			  %% Line 705
			  <_cor19> when 'true' ->
			      %% Line 706
			      {'false',Request0}
			end
		%% Line 708
		<'false'> when 'true' ->
		    let <_cor13> =
			catch
			    %% Line 710
			    call 'unicode':'characters_to_binary'
				(Chars, Enc, 'latin1')
		    in  %% Line 710
			case _cor13 of
			  %% Line 711
			  <Binary>
			      when call 'erlang':'is_binary'
				    (_cor13) ->
			      %% Line 712
			      {'false',{'put_chars',Binary}}
			  %% Line 713
			  <_cor20> when 'true' ->
			      %% Line 714
			      {'false',{'put_chars',Chars}}
			end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 717
	  <Pid,{'fread',Prompt,Format}> when 'true' ->
	      %% Line 718
	      apply 'bc_req'/3
		  (Pid, {'get_until','unicode',Prompt,'io_lib','fread',[Format|[]]}, 'true')
	  %% Line 719
	  <Pid,{'get_until',Enc,Prompt,M,F,A}> when 'true' ->
	      %% Line 720
	      apply 'bc_req'/3
		  (Pid, {'get_until',Enc,Prompt,M,F,A}, 'true')
	  %% Line 721
	  <Pid,{'get_chars',Enc,Prompt,N}> when 'true' ->
	      %% Line 722
	      apply 'bc_req'/3
		  (Pid, {'get_chars',Enc,Prompt,N}, 'true')
	  %% Line 723
	  <Pid,{'get_line',Enc,Prompt}> when 'true' ->
	      %% Line 724
	      apply 'bc_req'/3
		  (Pid, {'get_line',Enc,Prompt}, 'true')
	  %% Line 725
	  <Pid,{'get_password',Enc}> when 'true' ->
	      %% Line 726
	      apply 'bc_req'/3
		  (Pid, {'get_password',Enc}, 'true')
	  %% Line 727
	  <_X_Pid,R> when 'true' ->
	      %% Line 728
	      {'false',R}
	end
'convert_binaries'/1 =
    %% Line 730
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 731
	      call 'unicode':'characters_to_binary'
		  (Bin, 'latin1', 'unicode')
	  %% Line 732
	  <Else> when 'true' ->
	      %% Line 733
	      Else
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('io')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('io', _cor0)
end