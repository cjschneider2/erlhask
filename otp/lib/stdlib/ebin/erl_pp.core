module 'erl_pp' ['attribute'/1,
		 'attribute'/2,
		 'expr'/1,
		 'expr'/2,
		 'expr'/3,
		 'expr'/4,
		 'exprs'/1,
		 'exprs'/2,
		 'exprs'/3,
		 'form'/1,
		 'form'/2,
		 'function'/1,
		 'function'/2,
		 'guard'/1,
		 'guard'/2,
		 'module_info'/0,
		 'module_info'/1,
		 'rule'/1,
		 'rule'/2]
    attributes [%% Line 34
		'type' =
		    %% Line 34
		    [{'hook_function',{'type',34,'union',[{'atom',34,'none'}|[{'type',35,'fun',[{'type',35,'product',[{'ann_type',35,[{'var',35,'Expr'}|[{'remote_type',35,[{'atom',35,'erl_parse'}|[{'atom',35,'abstract_expr'}|[[]]]]}]]}|[{'ann_type',36,[{'var',36,'CurrentIndentation'}|[{'type',36,'integer',[]}]]}|[{'ann_type',37,[{'var',37,'CurrentPrecedence'}|[{'type',37,'non_neg_integer',[]}]]}|[{'ann_type',38,[{'var',38,'Options'}|[{'type',38,'options',[]}]]}]]]]}|[{'remote_type',39,[{'atom',39,'io_lib'}|[{'atom',39,'chars'}|[[]]]]}]]}]]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'option',{'type',41,'union',[{'type',41,'tuple',[{'atom',41,'hook'}|[{'type',41,'hook_function',[]}]]}|[{'type',42,'tuple',[{'atom',42,'encoding'}|[{'type',42,'union',[{'atom',42,'latin1'}|[{'atom',42,'unicode'}|[{'atom',42,'utf8'}]]]}]]}]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'options',{'type',43,'union',[{'type',43,'hook_function',[]}|[{'type',43,'list',[{'type',43,'option',[]}]}]]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','pp'},[{'record_field',45,{'atom',45,'string_fun'}}|[{'record_field',45,{'atom',45,'char_fun'}}]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','options'},[{'record_field',47,{'atom',47,'hook'}}|[{'record_field',47,{'atom',47,'encoding'}}|[{'record_field',47,{'atom',47,'opts'}}]]],[]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'form',1},[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'Form'}]}|[{'remote_type',53,[{'atom',53,'io_lib'}|[{'atom',53,'chars'}|[[]]]]}]]}|[[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'Form'}|[{'remote_type',54,[{'atom',54,'erl_parse'}|[{'atom',54,'abstract_form'}|[[]]]]}]]]]}]]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'form',2},[{'type',59,'bounded_fun',[{'type',59,'fun',[{'type',59,'product',[{'var',59,'Form'}|[{'var',59,'Options'}]]}|[{'remote_type',59,[{'atom',59,'io_lib'}|[{'atom',59,'chars'}|[[]]]]}]]}|[[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Form'}|[{'remote_type',60,[{'atom',60,'erl_parse'}|[{'atom',60,'abstract_form'}|[[]]]]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Options'}|[{'type',61,'options',[]}]]]]}]]]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'attribute',1},[{'type',67,'bounded_fun',[{'type',67,'fun',[{'type',67,'product',[{'var',67,'Attribute'}]}|[{'remote_type',67,[{'atom',67,'io_lib'}|[{'atom',67,'chars'}|[[]]]]}]]}|[[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Attribute'}|[{'remote_type',68,[{'atom',68,'erl_parse'}|[{'atom',68,'abstract_form'}|[[]]]]}]]]]}]]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'attribute',2},[{'type',73,'bounded_fun',[{'type',73,'fun',[{'type',73,'product',[{'var',73,'Attribute'}|[{'var',73,'Options'}]]}|[{'remote_type',73,[{'atom',73,'io_lib'}|[{'atom',73,'chars'}|[[]]]]}]]}|[[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Attribute'}|[{'remote_type',74,[{'atom',74,'erl_parse'}|[{'atom',74,'abstract_form'}|[[]]]]}]]]]}|[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'Options'}|[{'type',75,'options',[]}]]]]}]]]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'function',1},[{'type',81,'bounded_fun',[{'type',81,'fun',[{'type',81,'product',[{'var',81,'Function'}]}|[{'remote_type',81,[{'atom',81,'io_lib'}|[{'atom',81,'chars'}|[[]]]]}]]}|[[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'Function'}|[{'remote_type',82,[{'atom',82,'erl_parse'}|[{'atom',82,'abstract_form'}|[[]]]]}]]]]}]]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'function',2},[{'type',87,'bounded_fun',[{'type',87,'fun',[{'type',87,'product',[{'var',87,'Function'}|[{'var',87,'Options'}]]}|[{'remote_type',87,[{'atom',87,'io_lib'}|[{'atom',87,'chars'}|[[]]]]}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Function'}|[{'remote_type',88,[{'atom',88,'erl_parse'}|[{'atom',88,'abstract_form'}|[[]]]]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Options'}|[{'type',89,'options',[]}]]]]}]]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'guard',1},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'Guard'}]}|[{'remote_type',100,[{'atom',100,'io_lib'}|[{'atom',100,'chars'}|[[]]]]}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Guard'}|[{'type',101,'list',[{'remote_type',101,[{'atom',101,'erl_parse'}|[{'atom',101,'abstract_expr'}|[[]]]]}]}]]]]}]]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'guard',2},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'Guard'}|[{'var',106,'Options'}]]}|[{'remote_type',106,[{'atom',106,'io_lib'}|[{'atom',106,'chars'}|[[]]]]}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Guard'}|[{'type',107,'list',[{'remote_type',107,[{'atom',107,'erl_parse'}|[{'atom',107,'abstract_expr'}|[[]]]]}]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Options'}|[{'type',108,'options',[]}]]]]}]]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'exprs',1},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'Expressions'}]}|[{'remote_type',113,[{'atom',113,'io_lib'}|[{'atom',113,'chars'}|[[]]]]}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Expressions'}|[{'type',114,'list',[{'remote_type',114,[{'atom',114,'erl_parse'}|[{'atom',114,'abstract_expr'}|[[]]]]}]}]]]]}]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'exprs',2},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'Expressions'}|[{'var',119,'Options'}]]}|[{'remote_type',119,[{'atom',119,'io_lib'}|[{'atom',119,'chars'}|[[]]]]}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Expressions'}|[{'type',120,'list',[{'remote_type',120,[{'atom',120,'erl_parse'}|[{'atom',120,'abstract_expr'}|[[]]]]}]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Options'}|[{'type',121,'options',[]}]]]]}]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'exprs',3},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'Expressions'}|[{'var',126,'Indent'}|[{'var',126,'Options'}]]]}|[{'remote_type',126,[{'atom',126,'io_lib'}|[{'atom',126,'chars'}|[[]]]]}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Expressions'}|[{'type',127,'list',[{'remote_type',127,[{'atom',127,'erl_parse'}|[{'atom',127,'abstract_expr'}|[[]]]]}]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Indent'}|[{'type',128,'integer',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Options'}|[{'type',129,'options',[]}]]]]}]]]]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'expr',1},[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'Expression'}]}|[{'remote_type',134,[{'atom',134,'io_lib'}|[{'atom',134,'chars'}|[[]]]]}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Expression'}|[{'remote_type',135,[{'atom',135,'erl_parse'}|[{'atom',135,'abstract_expr'}|[[]]]]}]]]]}]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'expr',2},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'Expression'}|[{'var',140,'Options'}]]}|[{'remote_type',140,[{'atom',140,'io_lib'}|[{'atom',140,'chars'}|[[]]]]}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Expression'}|[{'remote_type',141,[{'atom',141,'erl_parse'}|[{'atom',141,'abstract_expr'}|[[]]]]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Options'}|[{'type',142,'options',[]}]]]]}]]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'expr',3},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'Expression'}|[{'var',147,'Indent'}|[{'var',147,'Options'}]]]}|[{'remote_type',147,[{'atom',147,'io_lib'}|[{'atom',147,'chars'}|[[]]]]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Expression'}|[{'remote_type',148,[{'atom',148,'erl_parse'}|[{'atom',148,'abstract_expr'}|[[]]]]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Indent'}|[{'type',149,'integer',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Options'}|[{'type',150,'options',[]}]]]]}]]]]]}]}],
		%% Line 155
		'spec' =
		    %% Line 155
		    [{{'expr',4},[{'type',155,'bounded_fun',[{'type',155,'fun',[{'type',155,'product',[{'var',155,'Expression'}|[{'var',155,'Indent'}|[{'var',155,'Precedence'}|[{'var',155,'Options'}]]]]}|[{'remote_type',155,[{'atom',155,'io_lib'}|[{'atom',155,'chars'}|[[]]]]}]]}|[[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Expression'}|[{'remote_type',156,[{'atom',156,'erl_parse'}|[{'atom',156,'abstract_expr'}|[[]]]]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Indent'}|[{'type',157,'integer',[]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Precedence'}|[{'type',158,'non_neg_integer',[]}]]]]}|[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Options'}|[{'type',159,'options',[]}]]]]}]]]]]]}]}]]
'form'/1 =
    %% Line 56
    fun (_cor0) ->
	%% Line 57
	apply 'form'/2
	    (_cor0, 'none')
'form'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	let <State> =
	    %% Line 64
	    apply 'state'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 65
		apply 'options'/1
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 65
		    apply 'lform'/3
			(_cor1, _cor3, State)
		in  %% Line 65
		    apply 'frmt'/2
			(_cor4, State)
'attribute'/1 =
    %% Line 70
    fun (_cor0) ->
	%% Line 71
	apply 'attribute'/2
	    (_cor0, 'none')
'attribute'/2 =
    %% Line 77
    fun (_cor1,_cor0) ->
	let <State> =
	    %% Line 78
	    apply 'state'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 79
		apply 'options'/1
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 79
		    apply 'lattribute'/3
			(_cor1, _cor3, State)
		in  %% Line 79
		    apply 'frmt'/2
			(_cor4, State)
'function'/1 =
    %% Line 84
    fun (_cor0) ->
	%% Line 85
	apply 'function'/2
	    (_cor0, 'none')
'function'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 92
	    apply 'options'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 92
		apply 'lfunction'/2
		    (_cor1, _cor3)
	    in  let <_cor2> =
		    %% Line 92
		    apply 'state'/1
			(_cor0)
		in  %% Line 92
		    apply 'frmt'/2
			(_cor4, _cor2)
'rule'/1 =
    %% Line 94
    fun (_cor0) ->
	%% Line 95
	apply 'rule'/2
	    (_cor0, 'none')
'rule'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 98
	    apply 'options'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 98
		apply 'lrule'/2
		    (_cor1, _cor3)
	    in  let <_cor2> =
		    %% Line 98
		    apply 'state'/1
			(_cor0)
		in  %% Line 98
		    apply 'frmt'/2
			(_cor4, _cor2)
'guard'/1 =
    %% Line 103
    fun (_cor0) ->
	%% Line 104
	apply 'guard'/2
	    (_cor0, 'none')
'guard'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 111
	    apply 'options'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 111
		apply 'lguard'/2
		    (_cor1, _cor3)
	    in  let <_cor2> =
		    %% Line 111
		    apply 'state'/1
			(_cor0)
		in  %% Line 111
		    apply 'frmt'/2
			(_cor4, _cor2)
'exprs'/1 =
    %% Line 116
    fun (_cor0) ->
	%% Line 117
	apply 'exprs'/3
	    (_cor0, 0, 'none')
'exprs'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	%% Line 124
	apply 'exprs'/3
	    (_cor1, 0, _cor0)
'exprs'/3 =
    %% Line 131
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 132
	    apply 'options'/1
		(_cor0)
	in  let <_cor5> =
		%% Line 132
		apply 'lexprs'/2
		    (_cor2, _cor4)
	    in  let <_cor3> =
		    %% Line 132
		    apply 'state'/1
			(_cor0)
		in  %% Line 132
		    apply 'frmt'/3
			({'seq',[],[],[44],_cor5}, _cor1, _cor3)
'expr'/1 =
    %% Line 137
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 138
	    apply 'options'/1
		('none')
	in  let <_cor3> =
		%% Line 138
		apply 'lexpr'/3
		    (_cor0, 0, _cor2)
	    in  let <_cor1> =
		    %% Line 138
		    apply 'state'/1
			('none')
		in  %% Line 138
		    apply 'frmt'/2
			(_cor3, _cor1)
'expr'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 145
	    apply 'options'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 145
		apply 'lexpr'/3
		    (_cor1, 0, _cor3)
	    in  let <_cor2> =
		    %% Line 145
		    apply 'state'/1
			(_cor0)
		in  %% Line 145
		    apply 'frmt'/2
			(_cor4, _cor2)
'expr'/3 =
    %% Line 152
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 153
	    apply 'options'/1
		(_cor0)
	in  let <_cor5> =
		%% Line 153
		apply 'lexpr'/3
		    (_cor2, 0, _cor4)
	    in  let <_cor3> =
		    %% Line 153
		    apply 'state'/1
			(_cor0)
		in  %% Line 153
		    apply 'frmt'/3
			(_cor5, _cor1, _cor3)
'expr'/4 =
    %% Line 161
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 162
	    apply 'options'/1
		(_cor0)
	in  let <_cor6> =
		%% Line 162
		apply 'lexpr'/3
		    (_cor3, _cor1, _cor5)
	    in  let <_cor4> =
		    %% Line 162
		    apply 'state'/1
			(_cor0)
		in  %% Line 162
		    apply 'frmt'/3
			(_cor6, _cor2, _cor4)
'options'/1 =
    %% Line 168
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <Hook> =
		  %% Line 169
		  call 'proplists':'get_value'
		      ('hook', Options, 'none')
	      in  let <Encoding> =
		      %% Line 170
		      apply 'encoding'/1
			  (Options)
		  in  %% Line 171
		      {'options',Hook,Encoding,Options}
	  %% Line 172
	  <Hook> when 'true' ->
	      let <_cor3> =
		  %% Line 173
		  apply 'encoding'/1
		      ([])
	      in  %% Line 173
		  {'options',Hook,_cor3,Hook}
	end
'state'/1 =
    %% Line 175
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 176
	      case apply 'encoding'/1
		       (Options) of
		%% Line 177
		<'latin1'> when 'true' ->
		    apply 'state'/0
			()
		%% Line 178
		<'unicode'> when 'true' ->
		    apply 'unicode_state'/0
			()
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 180
	  <_X_Hook> when 'true' ->
	      %% Line 181
	      apply 'state'/0
		  ()
	end
'state'/0 =
    %% Line 183
    fun () ->
	let <_cor1> =
	    %% Line 184
	    call 'erlang':'make_fun'
		('io_lib', 'write_string_as_latin1', 1)
	in  let <_cor0> =
		%% Line 185
		call 'erlang':'make_fun'
		    ('io_lib', 'write_char_as_latin1', 1)
	    in  %% Line 184
		{'pp',_cor1,_cor0}
'unicode_state'/0 =
    %% Line 187
    fun () ->
	let <_cor1> =
	    %% Line 188
	    call 'erlang':'make_fun'
		('io_lib', 'write_string', 1)
	in  let <_cor0> =
		%% Line 189
		call 'erlang':'make_fun'
		    ('io_lib', 'write_char', 1)
	    in  %% Line 188
		{'pp',_cor1,_cor0}
'encoding'/1 =
    %% Line 191
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 192
	    call 'epp':'default_encoding'
		()
	in  %% Line 192
	    case call 'proplists':'get_value'
		     ('encoding', _cor0, _cor1) of
	      %% Line 193
	      <'latin1'> when 'true' ->
		  'latin1'
	      %% Line 194
	      <'utf8'> when 'true' ->
		  'unicode'
	      %% Line 195
	      <'unicode'> when 'true' ->
		  'unicode'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'lform'/3 =
    %% Line 198
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'attribute',Line,Name,Arg},Opts,State> when 'true' ->
	      %% Line 199
	      apply 'lattribute'/3
		  ({'attribute',Line,Name,Arg}, Opts, State)
	  %% Line 200
	  <{'function',Line,Name,Arity,Clauses},Opts,_X_State> when 'true' ->
	      %% Line 201
	      apply 'lfunction'/2
		  ({'function',Line,Name,Arity,Clauses}, Opts)
	  %% Line 202
	  <{'rule',Line,Name,Arity,Clauses},Opts,_X_State> when 'true' ->
	      %% Line 203
	      apply 'lrule'/2
		  ({'rule',Line,Name,Arity,Clauses}, Opts)
	  %% Line 205
	  <{'error',E},_X_Opts,_X_State> when 'true' ->
	      let <_cor3> =
		  %% Line 206
		  call 'io_lib':'format'
		      ([126|[112|[10]]], [{'error',E}|[]])
	      in  %% Line 206
		  apply 'leaf'/1
		      (_cor3)
	  %% Line 207
	  <{'warning',W},_X_Opts,_X_State> when 'true' ->
	      let <_cor4> =
		  %% Line 208
		  call 'io_lib':'format'
		      ([126|[112|[10]]], [{'warning',W}|[]])
	      in  %% Line 208
		  apply 'leaf'/1
		      (_cor4)
	  %% Line 209
	  <{'eof',_X_Line},_X_Opts,_X_State> when 'true' ->
	      %% Line 210
	      10
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'lform',3}}] )
	    -| ['compiler_generated'] )
	end
'lattribute'/3 =
    %% Line 212
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'attribute',_X_Line,'type',Type},Opts,_X_State> when 'true' ->
	      let <_cor3> =
		  %% Line 213
		  apply 'typeattr'/3
		      ('type', Type, Opts)
	      in  let <_cor4> =
		      %% Line 213
		      apply 'leaf'/1
			  ([46|[10]])
		  in  %% Line 213
		      [_cor3|[_cor4|[]]]
	  %% Line 214
	  <{'attribute',_X_Line,'opaque',Type},Opts,_X_State> when 'true' ->
	      let <_cor5> =
		  %% Line 215
		  apply 'typeattr'/3
		      ('opaque', Type, Opts)
	      in  let <_cor6> =
		      %% Line 215
		      apply 'leaf'/1
			  ([46|[10]])
		  in  %% Line 215
		      [_cor5|[_cor6|[]]]
	  %% Line 216
	  <{'attribute',_X_Line,'spec',Arg},_X_Opts,_X_State> when 'true' ->
	      let <_cor7> =
		  %% Line 217
		  apply 'specattr'/2
		      ('spec', Arg)
	      in  let <_cor8> =
		      %% Line 217
		      apply 'leaf'/1
			  ([46|[10]])
		  in  %% Line 217
		      [_cor7|[_cor8|[]]]
	  %% Line 218
	  <{'attribute',_X_Line,'callback',Arg},_X_Opts,_X_State> when 'true' ->
	      let <_cor9> =
		  %% Line 219
		  apply 'specattr'/2
		      ('callback', Arg)
	      in  let <_cor10> =
		      %% Line 219
		      apply 'leaf'/1
			  ([46|[10]])
		  in  %% Line 219
		      [_cor9|[_cor10|[]]]
	  %% Line 220
	  <{'attribute',_X_Line,Name,Arg},Opts,State> when 'true' ->
	      let <_cor11> =
		  %% Line 221
		  apply 'lattribute'/4
		      (Name, Arg, Opts, State)
	      in  let <_cor12> =
		      %% Line 221
		      apply 'leaf'/1
			  ([46|[10]])
		  in  %% Line 221
		      [_cor11|[_cor12|[]]]
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'lattribute',3}}] )
	    -| ['compiler_generated'] )
	end
'lattribute'/4 =
    %% Line 223
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'module',{M,Vs},_X_Opts,_X_State> when 'true' ->
	      let <_cor4> =
		  %% Line 224
		  apply 'pname'/1
		      (M)
	      in  let <_cor9> =
		      %% Line 225
		      ( fun (_cor6,_cor5) ->
			    {'cons',0,{'var',0,_cor6},_cor5}
			-| [{'id',{0,0,'-lattribute/4-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 225
			  call 'lists':'foldr'
			      (_cor9, %% Line 226
				      {'nil',0}, %% Line 226
						 Vs)
		      in  %% Line 224
			  apply 'attr'/2
			      ([109|[111|[100|[117|[108|[101]]]]]], [{'var',0,_cor4}|%% Line 225
										     [_cor10|%% Line 226
											     []]])
	  %% Line 227
	  <'module',M,_X_Opts,_X_State> when 'true' ->
	      let <_cor11> =
		  %% Line 228
		  apply 'pname'/1
		      (M)
	      in  %% Line 228
		  apply 'attr'/2
		      ([109|[111|[100|[117|[108|[101]]]]]], [{'var',0,_cor11}|[]])
	  %% Line 229
	  <'export',Falist,_X_Opts,_X_State> when 'true' ->
	      let <_cor13> =
		  %% Line 230
		  apply 'falist'/1
		      (Falist)
	      in  let <_cor12> =
		      %% Line 230
		      apply 'options'/1
			  ('none')
		  in  %% Line 230
		      apply 'call'/4
			  ({'var',0,[45|[101|[120|[112|[111|[114|[116]]]]]]]}, [_cor13|[]], 0, _cor12)
	  %% Line 231
	  <'import',Name,_X_Opts,_X_State>
	      when call 'erlang':'is_list'
		    (Name) ->
	      let <_cor14> =
		  %% Line 232
		  apply 'pname'/1
		      (Name)
	      in  %% Line 232
		  apply 'attr'/2
		      ([105|[109|[112|[111|[114|[116]]]]]], [{'var',0,_cor14}|[]])
	  %% Line 233
	  <'import',{From,Falist},_X_Opts,_X_State> when 'true' ->
	      let <_cor15> =
		  %% Line 234
		  apply 'pname'/1
		      (From)
	      in  let <_cor16> =
		      %% Line 234
		      apply 'falist'/1
			  (Falist)
		  in  %% Line 234
		      apply 'attr'/2
			  ([105|[109|[112|[111|[114|[116]]]]]], [{'var',0,_cor15}|[_cor16|[]]])
	  %% Line 235
	  <'file',{Name,Line},_X_Opts,State> when 'true' ->
	      %% Line 236
	      ( case State of
		  ( <( {'pp',_rec0,_cor29}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor19> =
			    apply _rec0
				(Name)
			in  apply 'attr'/2
				([102|[105|[108|[101]]]], [{'var',0,_cor19}|[{'integer',0,Line}|[]]])
		    -| ['compiler_generated'] )
		  ( <_cor30> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','pp'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 237
	  <'record',{Name,Is},Opts,_X_State> when 'true' ->
	      let <_cor20> =
		  %% Line 238
		  call 'io_lib':'format'
		      ([45|[114|[101|[99|[111|[114|[100|[40|[126|[119|[44]]]]]]]]]]], [Name|[]])
	      in  let <Nl> =
		      %% Line 238
		      apply 'leaf'/1
			  (_cor20)
		  in  let <_cor22> =
			  %% Line 239
			  apply 'record_fields'/2
			      (Is, Opts)
		      in  %% Line 239
			  [{'first',Nl,_cor22}|[41]]
	  %% Line 240
	  <Name,Arg,{'options',_cor31,Encoding,_cor32},_X_State> when 'true' ->
	      let <_cor24> =
		  %% Line 241
		  call 'io_lib':'write'
		      (Name)
	      in  let <_cor23> =
		      %% Line 241
		      call 'erl_parse':'abstract'
			  (Arg, [{'encoding',Encoding}|[]])
		  in  %% Line 241
		      apply 'attr'/2
			  (_cor24, [_cor23|[]])
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'lattribute',4}}] )
	    -| ['compiler_generated'] )
	end
'typeattr'/3 =
    %% Line 243
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tag,{TypeName,Type,Args},_X_Opts> when 'true' ->
	      let <_cor6> =
		  %% Line 244
		  call 'erlang':'atom_to_list'
		      (Tag)
	      in  let <_cor7> =
		      %% Line 244
		      call 'erlang':'++'
			  (_cor6, [32])
		  in  let <_cor8> =
			  %% Line 244
			  [45|_cor7]
		      in  let <_cor9> =
			      %% Line 244
			      apply 'leaf'/1
				  (_cor8)
			  in  let <_cor3> =
				  %% Line 245
				  apply 'options'/1
				      ('none')
			      in  let <_cor4> =
				      %% Line 245
				      apply 'call'/4
					  ({'atom',0,TypeName}, Args, 0, _cor3)
				  in  let <_cor5> =
					  %% Line 245
					  apply 'typed'/2
					      (_cor4, Type)
				      in  %% Line 244
					  {'first',_cor9,_cor5}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'typeattr',3}}] )
	    -| ['compiler_generated'] )
	end
'ltype'/1 =
    %% Line 247
    fun (_cor0) ->
	case _cor0 of
	  <{'ann_type',_X_Line,[V|[T|[]]]}> when 'true' ->
	      let <_cor1> =
		  %% Line 248
		  apply 'options'/1
		      ('none')
	      in  let <_cor2> =
		      %% Line 248
		      apply 'lexpr'/2
			  (V, _cor1)
		  in  %% Line 248
		      apply 'typed'/2
			  (_cor2, T)
	  %% Line 249
	  <{'paren_type',_X_Line,[T|[]]}> when 'true' ->
	      let <_cor3> =
		  %% Line 250
		  apply 'ltype'/1
		      (T)
	      in  %% Line 250
		  [40|[_cor3|[41]]]
	  %% Line 251
	  <{'type',_X_Line,'union',Ts}> when 'true' ->
	      let <_cor4> =
		  %% Line 252
		  apply 'ltypes'/1
		      (Ts)
	      in  %% Line 252
		  {'seq',[],[],[' |'],_cor4}
	  %% Line 253
	  <{'type',_X_Line,'list',[T|[]]}> when 'true' ->
	      let <_cor5> =
		  %% Line 254
		  apply 'ltype'/1
		      (T)
	      in  %% Line 254
		  {'seq',91,93,44,[_cor5|[]]}
	  %% Line 255
	  <{'type',_X_Line,'nonempty_list',[T|[]]}> when 'true' ->
	      let <_cor6> =
		  %% Line 256
		  apply 'ltype'/1
		      (T)
	      in  let <_cor7> =
		      %% Line 256
		      apply 'leaf'/1
			  ([46|[46|[46]]])
		  in  %% Line 256
		      {'seq',91,93,[44],[_cor6|[_cor7|[]]]}
	  %% Line 257
	  <{'type',Line,'nil',[]}> when 'true' ->
	      let <_cor8> =
		  %% Line 258
		  apply 'options'/1
		      ('none')
	      in  %% Line 258
		  apply 'lexpr'/3
		      ({'nil',Line}, 0, _cor8)
	  %% Line 259
	  <{'type',Line,'map','any'}> when 'true' ->
	      %% Line 260
	      apply 'simple_type'/2
		  ({'atom',Line,'map'}, [])
	  %% Line 261
	  <{'type',_X_Line,'map',Pairs}> when 'true' ->
	      %% Line 262
	      apply 'map_type'/1
		  (Pairs)
	  %% Line 263
	  <{'type',Line,'tuple','any'}> when 'true' ->
	      %% Line 264
	      apply 'simple_type'/2
		  ({'atom',Line,'tuple'}, [])
	  %% Line 265
	  <{'type',_X_Line,'tuple',Ts}> when 'true' ->
	      %% Line 266
	      apply 'tuple_type'/2
		  (Ts, ( 'ltype'/1
			 -| [{'id',{0,0,'-ltype/1-fun-0-'}}] ))
	  %% Line 267
	  <{'type',_X_Line,'record',[{'atom',_cor15,N}|Fs]}> when 'true' ->
	      %% Line 268
	      apply 'record_type'/2
		  (N, Fs)
	  %% Line 269
	  <{'type',_X_Line,'range',Es = [_X_I1|[_X_I2|[]]]}> when 'true' ->
	      let <_cor9> =
		  %% Line 270
		  apply 'options'/1
		      ('none')
	      in  %% Line 270
		  apply 'expr_list'/4
		      (Es, '..', ( 'lexpr'/2
				   -| [{'id',{0,0,'-ltype/1-fun-1-'}}] ), _cor9)
	  %% Line 271
	  <{'type',_X_Line,'binary',[I1|[I2|[]]]}> when 'true' ->
	      %% Line 272
	      apply 'binary_type'/2
		  (I1, I2)
	  %% Line 273
	  <{'type',_X_Line,'fun',[]}> when 'true' ->
	      %% Line 274
	      apply 'leaf'/1
		  ([102|[117|[110|[40|[41]]]]])
	  %% Line 275
	  <FunType = {'type',_cor16,'fun',[{'type',_cor17,'any'}|[_cor18|[]]]}> when 'true' ->
	      let <_cor10> =
		  %% Line 276
		  apply 'fun_type'/2
		      (['fun'|[40]], FunType)
	      in  %% Line 276
		  [_cor10|[41]]
	  %% Line 277
	  <FunType = {'type',_X_Line,'fun',[{'type',_cor19,'product',_cor20}|[_cor21|[]]]}> when 'true' ->
	      let <_cor11> =
		  %% Line 278
		  apply 'fun_type'/2
		      (['fun'|[40]], FunType)
	      in  %% Line 278
		  [_cor11|[41]]
	  %% Line 279
	  <{'type',Line,T,Ts}> when 'true' ->
	      %% Line 280
	      apply 'simple_type'/2
		  ({'atom',Line,T}, Ts)
	  %% Line 281
	  <{'remote_type',Line,[M|[F|[Ts|[]]]]}> when 'true' ->
	      %% Line 282
	      apply 'simple_type'/2
		  ({'remote',Line,M,F}, Ts)
	  %% Line 283
	  <{'atom',_cor22,T}> when 'true' ->
	      let <_cor12> =
		  %% Line 284
		  call 'io_lib':'write'
		      (T)
	      in  %% Line 284
		  apply 'leaf'/1
		      (_cor12)
	  %% Line 285
	  <E> when 'true' ->
	      let <_cor13> =
		  %% Line 286
		  apply 'options'/1
		      ('none')
	      in  %% Line 286
		  apply 'lexpr'/3
		      (E, 0, _cor13)
	end
'binary_type'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 289
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{'integer',_cor28,0}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [[]|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      ([_cor1|[]])
	      -| ['list_comprehension'] )
	in  let <B> =
		%% Line 289
		call 'erlang':'=:='
		    (_cor6, [])
	    in  let <_cor12> =
		    %% Line 290
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor10) ->
				  case _cor10 of
				    <[{'integer',_cor29,0}|_cor9]> when 'true' ->
					let <_cor11> =
					    apply 'lc$^1'/1
						(_cor9)
					in  ( [[]|_cor11]
					      -| ['compiler_generated'] )
				    ( <[_cor8|_cor9]> when 'true' ->
					  apply 'lc$^1'/1
					      (_cor9)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor10> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor10})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^1'/1
			      ([_cor0|[]])
		      -| ['list_comprehension'] )
		in  let <U> =
			%% Line 290
			call 'erlang':'=:='
			    (_cor12, [])
		    in  let <P> =
			    %% Line 291
			    call 'erl_parse':'max_prec'
				()
			in  let <_cor18> =
				%% Line 292
				( case <> of
				    <>
					when B ->
					let <_cor15> =
					    apply 'leaf'/1
						([95|[58]])
					in  let <_cor16> =
						apply 'options'/1
						    ('none')
					    in  let <_cor17> =
						    apply 'lexpr'/3
							(_cor1, P, _cor16)
						in  ( [[_cor15|[_cor17|[]]]|[]]
						      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  []
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    in  let <_cor23> =
				    %% Line 293
				    ( case <> of
					<>
					    when U ->
					    let <_cor20> =
						apply 'leaf'/1
						    ([95|[58|[95|[42]]]])
					    in  let <_cor21> =
						    apply 'options'/1
							('none')
						in  let <_cor22> =
							apply 'lexpr'/3
							    (_cor0, P, _cor21)
						    in  ( [[_cor20|[_cor22|[]]]|[]]
							  -| ['compiler_generated'] )
					( <> when 'true' ->
					      []
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				in  let <_cor25> =
					%% Line 294
					call 'erlang':'++'
					    (_cor18, _cor23)
				    in  %% Line 294
					{'seq','<<','>>',[44],_cor25}
'map_type'/1 =
    %% Line 296
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 297
	    apply 'map_pair_types'/1
		(_cor0)
	in  %% Line 297
	    {'first',[35],_cor1}
'map_pair_types'/1 =
    %% Line 299
    fun (_cor0) ->
	%% Line 300
	apply 'tuple_type'/2
	    (_cor0, ( 'map_pair_type'/1
		      -| [{'id',{0,0,'-map_pair_types/1-fun-0-'}}] ))
'map_pair_type'/1 =
    %% Line 302
    fun (_cor0) ->
	case _cor0 of
	  <{'type',_X_Line,'map_field_assoc',Ktype,Vtype}> when 'true' ->
	      let <_cor1> =
		  %% Line 303
		  apply 'ltype'/1
		      (Ktype)
	      in  let <_cor2> =
		      %% Line 303
		      apply 'ltype'/1
			  (Vtype)
		  in  %% Line 303
		      {'seq',[],[],[32|[61|[62]]],[_cor1|[_cor2|[]]]}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'map_pair_type',1}}] )
	    -| ['compiler_generated'] )
	end
'record_type'/2 =
    %% Line 305
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 306
	    apply 'record_name'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 306
		apply 'field_types'/1
		    (_cor0)
	    in  %% Line 306
		{'first',[_cor3|[]],_cor2}
'field_types'/1 =
    %% Line 308
    fun (_cor0) ->
	%% Line 309
	apply 'tuple_type'/2
	    (_cor0, ( 'field_type'/1
		      -| [{'id',{0,0,'-field_types/1-fun-0-'}}] ))
'field_type'/1 =
    %% Line 311
    fun (_cor0) ->
	case _cor0 of
	  <{'type',_X_Line,'field_type',[Name|[Type|[]]]}> when 'true' ->
	      let <_cor1> =
		  %% Line 312
		  apply 'options'/1
		      ('none')
	      in  let <_cor2> =
		      %% Line 312
		      apply 'lexpr'/2
			  (Name, _cor1)
		  in  %% Line 312
		      apply 'typed'/2
			  (_cor2, Type)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'field_type',1}}] )
	    -| ['compiler_generated'] )
	end
'typed'/2 =
    %% Line 314
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <B,{'type',_cor6,'union',Ts}> when 'true' ->
	      let <_cor2> =
		  %% Line 316
		  apply 'union_type'/1
		      (Ts)
	      in  %% Line 316
		  {'first',[B|[32]],{'seq',[],[],[],_cor2}}
	  %% Line 317
	  <B,Type> when 'true' ->
	      let <_cor3> =
		  %% Line 318
		  apply 'ltype'/1
		      (Type)
	      in  %% Line 318
		  {'list',[{'cstep',[B|[' ::']],_cor3}|[]]}
	end
'union_type'/1 =
    %% Line 320
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_cor1> =
		  %% Line 321
		  apply 'leaf'/1
		      ([58|[58|[32]]])
	      in  let <_cor2> =
		      %% Line 321
		      apply 'ltype'/1
			  (T)
		  in  let <_cor3> =
			  %% Line 321
			  apply 'ltypes'/2
			      (Ts, ( 'union_elem'/1
				     -| [{'id',{0,0,'-union_type/1-fun-0-'}}] ))
		      in  %% Line 321
			  [[_cor1|[_cor2|[]]]|_cor3]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'union_type',1}}] )
	    -| ['compiler_generated'] )
	end
'union_elem'/1 =
    %% Line 323
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 324
	    apply 'leaf'/1
		([32|[124|[32]]])
	in  let <_cor2> =
		%% Line 324
		apply 'ltype'/1
		    (_cor0)
	    in  %% Line 324
		[_cor1|[_cor2|[]]]
'tuple_type'/2 =
    %% Line 326
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 327
	    apply 'ltypes'/2
		(_cor1, _cor0)
	in  %% Line 327
	    {'seq',123,125,[44],_cor2}
'specattr'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SpecKind,{FuncSpec,TypeSpecs}> when 'true' ->
	      let <_cor3> =
		  %% Line 330
		  case FuncSpec of
		    %% Line 331
		    <{F,_X_A}> when 'true' ->
			%% Line 332
			call 'io_lib':'format'
			    ([126|[119]], [F|[]])
		    %% Line 333
		    <{M,F,_X_A}> when 'true' ->
			%% Line 334
			call 'io_lib':'format'
			    ([126|[119|[58|[126|[119]]]]], [M|[F|[]]])
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 336
		      call 'lists':'concat'
			  ([[45]|[SpecKind|[[32]]]])
		  in  let <_cor8> =
			  %% Line 336
			  apply 'leaf'/1
			      (_cor7)
		      in  let <_cor6> =
			      %% Line 337
			      apply 'leaf'/1
				  (_cor3)
			  in  let <_cor5> =
				  %% Line 337
				  apply 'spec_clauses'/1
				      (TypeSpecs)
			      in  %% Line 336
				  {'first',_cor8,%% Line 337
						 {'list',[{'first',_cor6,_cor5}|[]]}}
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'specattr',2}}] )
	    -| ['compiler_generated'] )
	end
'spec_clauses'/1 =
    %% Line 339
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 340
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[T|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'sig_type'/1
					(T)
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 340
	    {'prefer_nl',[59],_cor6}
'sig_type'/1 =
    %% Line 342
    fun (_cor0) ->
	case _cor0 of
	  <{'type',_X_Line,'bounded_fun',[T|[Gs|[]]]}> when 'true' ->
	      let <_cor1> =
		  %% Line 343
		  apply 'fun_type'/2
		      ([], T)
	      in  %% Line 343
		  apply 'guard_type'/2
		      (_cor1, Gs)
	  %% Line 344
	  <FunType> when 'true' ->
	      %% Line 345
	      apply 'fun_type'/2
		  ([], FunType)
	end
'guard_type'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	let <Opts> =
	    %% Line 348
	    apply 'options'/1
		('none')
	in  let <_cor3> =
		%% Line 349
		apply 'expr_list'/4
		    (_cor0, [44], ( 'constraint'/2
				    -| [{'id',{0,0,'-guard_type/2-fun-0-'}}] ), Opts)
	    in  let <Gl> =
		    %% Line 349
		    {'list',[{'step','when',_cor3}|[]]}
		in  %% Line 350
		    {'list',[{'step',_cor1,Gl}|[]]}
'constraint'/2 =
    %% Line 352
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'type',_X_Line,'constraint',[Tag|[As|[]]]},_X_Opts> when 'true' ->
	      %% Line 353
	      apply 'simple_type'/2
		  (Tag, As)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'constraint',2}}] )
	    -| ['compiler_generated'] )
	end
'fun_type'/2 =
    %% Line 355
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Before,{'type',_cor6,'fun',[FType|[Ret|[]]]}> when 'true' ->
	      let <_cor3> =
		  %% Line 356
		  apply 'type_args'/1
		      (FType)
	      in  let <_cor2> =
		      %% Line 356
		      apply 'ltype'/1
			  (Ret)
		  in  %% Line 356
		      {'first',Before,{'step',[_cor3|[' ->']],_cor2}}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'fun_type',2}}] )
	    -| ['compiler_generated'] )
	end
'type_args'/1 =
    %% Line 358
    fun (_cor0) ->
	case _cor0 of
	  <{'type',_X_Line,'any'}> when 'true' ->
	      %% Line 359
	      apply 'leaf'/1
		  ([40|[46|[46|[46|[41]]]]])
	  %% Line 360
	  <{'type',_X_line,'product',Ts}> when 'true' ->
	      %% Line 361
	      apply 'targs'/1
		  (Ts)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type_args',1}}] )
	    -| ['compiler_generated'] )
	end
'simple_type'/2 =
    %% Line 363
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 364
	    apply 'options'/1
		('none')
	in  let <_cor4> =
		%% Line 364
		apply 'lexpr'/3
		    (_cor1, 0, _cor3)
	    in  let <_cor2> =
		    %% Line 364
		    apply 'targs'/1
			(_cor0)
		in  %% Line 364
		    {'first',_cor4,_cor2}
'targs'/1 =
    %% Line 366
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 367
	    apply 'ltypes'/1
		(_cor0)
	in  %% Line 367
	    {'seq',40,41,[44],_cor1}
'ltypes'/1 =
    %% Line 369
    fun (_cor0) ->
	%% Line 370
	apply 'ltypes'/2
	    (_cor0, ( 'ltype'/1
		      -| [{'id',{0,0,'-ltypes/1-fun-0-'}}] ))
'ltypes'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	%% Line 373
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[T|_cor3]> when 'true' ->
			    let <_cor5> =
				apply _cor0
				    (T)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'attr'/2 =
    %% Line 375
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 376
	    call 'io_lib':'format'
		([45|[126|[115]]], [_cor1|[]])
	in  let <_cor2> =
		%% Line 376
		apply 'options'/1
		    ('none')
	    in  %% Line 376
		apply 'call'/4
		    ({'var',0,_cor3}, _cor0, 0, _cor2)
'pname'/1 =
    %% Line 378
    fun (_cor0) ->
	case _cor0 of
	  <[''|As]> when 'true' ->
	      let <_cor1> =
		  %% Line 379
		  apply 'pname'/1
		      (As)
	      in  %% Line 379
		  [46|_cor1]
	  %% Line 380
	  <[A|[]]> when 'true' ->
	      %% Line 381
	      call 'io_lib':'write'
		  (A)
	  %% Line 382
	  <[A|As]> when 'true' ->
	      let <_cor2> =
		  %% Line 383
		  call 'io_lib':'write'
		      (A)
	      in  let <_cor3> =
		      %% Line 383
		      apply 'pname'/1
			  (As)
		  in  %% Line 383
		      [_cor2|[46|_cor3]]
	  %% Line 384
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 385
	      call 'io_lib':'write'
		  (A)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'pname',1}}] )
	    -| ['compiler_generated'] )
	end
'falist'/1 =
    %% Line 387
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 388
	      {'nil',0}
	  %% Line 389
	  <[{Name,Arity}|Falist]> when 'true' ->
	      let <_cor2> =
		  %% Line 390
		  call 'io_lib':'format'
		      ([126|[119|[47|[126|[119]]]]], [Name|[Arity|[]]])
	      in  let <_cor1> =
		      %% Line 390
		      apply 'falist'/1
			  (Falist)
		  in  %% Line 390
		      {'cons',0,{'var',0,_cor2},_cor1}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'falist',1}}] )
	    -| ['compiler_generated'] )
	end
'lfunction'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'function',_X_Line,Name,_X_Arity,Cs},Opts> when 'true' ->
	      let <_cor6> =
		  %% Line 393
		  ( fun (_cor3,_cor2) ->
			apply 'func_clause'/3
			    (Name, _cor3, _cor2)
		    -| [{'id',{0,0,'-lfunction/2-fun-0-'}}] )
	      in  let <Cll> =
		      %% Line 393
		      apply 'nl_clauses'/4
			  (_cor6, 59, Opts, Cs)
		  in  let <_cor8> =
			  %% Line 394
			  apply 'leaf'/1
			      ([46|[10]])
		      in  %% Line 394
			  [Cll|[_cor8|[]]]
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'lfunction',2}}] )
	    -| ['compiler_generated'] )
	end
'func_clause'/3 =
    %% Line 396
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,{'clause',Line,Head,Guard,Body},Opts> when 'true' ->
	      let <Hl> =
		  %% Line 397
		  apply 'call'/4
		      ({'atom',Line,Name}, Head, 0, Opts)
	      in  let <Gl> =
		      %% Line 398
		      apply 'guard_when'/3
			  (Hl, Guard, Opts)
		  in  let <Bl> =
			  %% Line 399
			  apply 'body'/2
			      (Body, Opts)
		      in  %% Line 400
			  {'step',Gl,Bl}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'func_clause',3}}] )
	    -| ['compiler_generated'] )
	end
'lrule'/2 =
    %% Line 402
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'rule',_X_Line,Name,_X_Arity,Cs},Opts> when 'true' ->
	      let <_cor6> =
		  %% Line 403
		  ( fun (_cor3,_cor2) ->
			apply 'rule_clause'/3
			    (Name, _cor3, _cor2)
		    -| [{'id',{0,0,'-lrule/2-fun-0-'}}] )
	      in  let <Cll> =
		      %% Line 403
		      apply 'nl_clauses'/4
			  (_cor6, 59, Opts, Cs)
		  in  let <_cor8> =
			  %% Line 404
			  apply 'leaf'/1
			      ([46|[10]])
		      in  %% Line 404
			  [Cll|[_cor8|[]]]
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'lrule',2}}] )
	    -| ['compiler_generated'] )
	end
'rule_clause'/3 =
    %% Line 406
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,{'clause',Line,Head,Guard,Body},Opts> when 'true' ->
	      let <Hl> =
		  %% Line 407
		  apply 'call'/4
		      ({'atom',Line,Name}, Head, 0, Opts)
	      in  let <_cor4> =
		      %% Line 408
		      apply 'leaf'/1
			  ([32|[58|[45]]])
		  in  let <Gl> =
			  %% Line 408
			  apply 'guard_when'/4
			      (Hl, Guard, Opts, _cor4)
		      in  let <Bl> =
			      %% Line 409
			      apply 'rule_body'/2
				  (Body, Opts)
			  in  %% Line 410
			      {'step',Gl,Bl}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rule_clause',3}}] )
	    -| ['compiler_generated'] )
	end
'rule_body'/2 =
    %% Line 412
    fun (_cor1,_cor0) ->
	%% Line 413
	apply 'lc_quals'/2
	    (_cor1, _cor0)
'guard_when'/3 =
    %% Line 415
    fun (_cor2,_cor1,_cor0) ->
	%% Line 416
	apply 'guard_when'/4
	    (_cor2, _cor1, _cor0, ' ->')
'guard_when'/4 =
    %% Line 418
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Gl> =
	    %% Line 419
	    apply 'lguard'/2
		(_cor2, _cor1)
	in  %% Line 420
	    [{'list',[{'step',_cor3,Gl}|[]]}|[_cor0|[]]]
'lguard'/2 =
    %% Line 422
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],Opts>
	      when call 'erlang':'is_list'
		    (E) ->
	      let <_cor2> =
		  %% Line 423
		  apply 'expr_list'/4
		      ([E|Es], [59], ( 'guard0'/2
				       -| [{'id',{0,0,'-lguard/2-fun-0-'}}] ), Opts)
	      in  %% Line 423
		  {'list',[{'step','when',_cor2}|[]]}
	  %% Line 424
	  <[E|Es],Opts> when 'true' ->
	      %% Line 425
	      apply 'lguard'/2
		  ([[E|Es]|[]], Opts)
	  %% Line 426
	  <[],_cor5> when 'true' ->
	      %% Line 427
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'lguard',2}}] )
	    -| ['compiler_generated'] )
	end
'guard0'/2 =
    %% Line 429
    fun (_cor1,_cor0) ->
	%% Line 430
	apply 'expr_list'/4
	    (_cor1, [44], ( 'lexpr'/2
			    -| [{'id',{0,0,'-guard0/2-fun-0-'}}] ), _cor0)
'body'/2 =
    %% Line 434
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|[]],Opts> when 'true' ->
	      %% Line 435
	      apply 'lexpr'/2
		  (E, Opts)
	  %% Line 436
	  <Es,Opts> when 'true' ->
	      let <_cor2> =
		  %% Line 437
		  apply 'lexprs'/2
		      (Es, Opts)
	      in  %% Line 437
		  {'prefer_nl',[44],_cor2}
	end
'lexpr'/2 =
    %% Line 439
    fun (_cor1,_cor0) ->
	%% Line 440
	apply 'lexpr'/3
	    (_cor1, 0, _cor0)
'lexpr'/3 =
    %% Line 442
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'var',_cor128,V},_cor129,_cor130>
	      when call 'erlang':'is_integer'
		    (V) ->
	      let <_cor3> =
		  %% Line 443
		  call 'io_lib':'format'
		      ([95|[126|[119]]], [V|[]])
	      in  %% Line 443
		  apply 'leaf'/1
		      (_cor3)
	  %% Line 444
	  <{'var',_cor131,V},_cor132,_cor133> when 'true' ->
	      let <_cor4> =
		  call 'io_lib':'format'
		      ([126|[116|[115]]], [V|[]])
	      in  apply 'leaf'/1
		      (_cor4)
	  %% Line 445
	  <{'char',_cor134,C},_cor135,_cor136> when 'true' ->
	      {'char',C}
	  %% Line 446
	  <{'integer',_cor137,N},_cor138,_cor139> when 'true' ->
	      let <_cor5> =
		  call 'io_lib':'write'
		      (N)
	      in  apply 'leaf'/1
		      (_cor5)
	  %% Line 447
	  <{'float',_cor140,F},_cor141,_cor142> when 'true' ->
	      let <_cor6> =
		  call 'io_lib':'write'
		      (F)
	      in  apply 'leaf'/1
		      (_cor6)
	  %% Line 448
	  <{'atom',_cor143,A},_cor144,_cor145> when 'true' ->
	      let <_cor7> =
		  call 'io_lib':'write'
		      (A)
	      in  apply 'leaf'/1
		      (_cor7)
	  %% Line 449
	  <{'string',_cor146,S},_cor147,_cor148> when 'true' ->
	      {'string',S}
	  %% Line 450
	  <{'nil',_cor149},_cor150,_cor151> when 'true' ->
	      '[]'
	  %% Line 451
	  <{'cons',_cor152,H,T},_cor153,Opts> when 'true' ->
	      %% Line 452
	      apply 'list'/3
		  (T, [H|[]], Opts)
	  %% Line 453
	  <{'lc',_cor154,E,Qs},_X_Prec,Opts> when 'true' ->
	      let <_cor9> =
		  %% Line 454
		  apply 'lexpr'/2
		      (E, Opts)
	      in  let <_cor10> =
		      %% Line 454
		      apply 'leaf'/1
			  ([32|[124|[124]]])
		  in  let <_cor8> =
			  %% Line 454
			  apply 'lc_quals'/2
			      (Qs, Opts)
		      in  let <Lcl> =
			      %% Line 454
			      {'list',[{'step',[_cor9|[_cor10|[]]],_cor8}|[]]}
			  in  let <_cor12> =
				  %% Line 455
				  apply 'leaf'/1
				      ([32])
			      in  %% Line 455
				  {'list',[{'seq',91,[],[[]],[{'force_nl',_cor12,[Lcl|[]]}|[]]}|[93]]}
	  %% Line 457
	  <{'bc',_cor155,E,Qs},_X_Prec,Opts> when 'true' ->
	      let <_cor14> =
		  %% Line 458
		  apply 'lexpr'/2
		      (E, Opts)
	      in  let <_cor15> =
		      %% Line 458
		      apply 'leaf'/1
			  ([32|[124|[124]]])
		  in  let <_cor13> =
			  %% Line 458
			  apply 'lc_quals'/2
			      (Qs, Opts)
		      in  let <Lcl> =
			      %% Line 458
			      {'list',[{'step',[_cor14|[_cor15|[]]],_cor13}|[]]}
			  in  let <_cor17> =
				  %% Line 459
				  apply 'leaf'/1
				      ([32])
			      in  %% Line 459
				  {'list',[{'seq','<<',[],[[]],[{'force_nl',_cor17,[Lcl|[]]}|[]]}|['>>']]}
	  %% Line 461
	  <{'tuple',_cor156,Elts},_cor157,Opts> when 'true' ->
	      %% Line 462
	      apply 'tuple'/2
		  (Elts, Opts)
	  %% Line 465
	  <{'record_index',_cor158,Name,F},Prec,Opts> when 'true' ->
	      %% Line 466
	      case call 'erl_parse':'preop_prec'
		       ('#') of
		<{P,R}> when 'true' ->
		    let <Nl> =
			%% Line 467
			apply 'record_name'/1
			    (Name)
		    in  let <_cor20> =
			    %% Line 468
			    apply 'lexpr'/3
				(F, R, Opts)
			in  let <El> =
				%% Line 468
				[Nl|[46|[_cor20|[]]]]
			    in  %% Line 469
				apply 'maybe_paren'/3
				    (P, Prec, El)
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 470
	  <{'record',_cor159,Name,Fs},Prec,Opts> when 'true' ->
	      %% Line 471
	      case call 'erl_parse':'preop_prec'
		       ('#') of
		<{P,_X_R}> when 'true' ->
		    let <Nl> =
			%% Line 472
			apply 'record_name'/1
			    (Name)
		    in  let <_cor24> =
			    %% Line 473
			    apply 'record_fields'/2
				(Fs, Opts)
			in  let <El> = {%% Line 473
				 'first',%% Line 473
					 Nl,_cor24}
			    in  %% Line 474
				apply 'maybe_paren'/3
				    (P, Prec, El)
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 475
	  <{'record_field',_cor160,Rec,Name,F},Prec,Opts> when 'true' ->
	      %% Line 476
	      case call 'erl_parse':'inop_prec'
		       ('#') of
		<{L,P,R}> when 'true' ->
		    let <Rl> =
			%% Line 477
			apply 'lexpr'/3
			    (Rec, L, Opts)
		    in  let <_cor28> =
			    %% Line 478
			    call 'io_lib':'format'
				([35|[126|[119|[46]]]], [Name|[]])
			in  let <Nl> =
				%% Line 478
				apply 'leaf'/1
				    (_cor28)
			    in  let <_cor30> =
				    %% Line 479
				    apply 'lexpr'/3
					(F, R, Opts)
				in  let <El> =
					%% Line 479
					[Rl|[Nl|[_cor30|[]]]]
				    in  %% Line 480
					apply 'maybe_paren'/3
					    (P, Prec, El)
		( <_cor26> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor26})
		  -| ['compiler_generated'] )
	      end
	  %% Line 481
	  <{'record',_cor161,Rec,Name,Fs},Prec,Opts> when 'true' ->
	      %% Line 482
	      case call 'erl_parse':'inop_prec'
		       ('#') of
		<{L,P,_X_R}> when 'true' ->
		    let <Rl> =
			%% Line 483
			apply 'lexpr'/3
			    (Rec, L, Opts)
		    in  let <Nl> =
			    %% Line 484
			    apply 'record_name'/1
				(Name)
			in  let <_cor35> =
				%% Line 485
				apply 'record_fields'/2
				    (Fs, Opts)
			    in  let <El> =
				    %% Line 485
				    {'first',[Rl|[Nl|[]]],_cor35}
				in  %% Line 486
				    apply 'maybe_paren'/3
					(P, Prec, El)
		( <_cor32> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor32})
		  -| ['compiler_generated'] )
	      end
	  %% Line 487
	  <{'record_field',_cor162,{'atom',_cor163,''},F},Prec,Opts> when 'true' ->
	      %% Line 488
	      case call 'erl_parse':'inop_prec'
		       ('.') of
		<{_X_L,P,R}> when 'true' ->
		    let <_cor38> =
			%% Line 489
			apply 'lexpr'/3
			    (F, R, Opts)
		    in  let <El> =
			    %% Line 489
			    [46|[_cor38|[]]]
			in  %% Line 490
			    apply 'maybe_paren'/3
				(P, Prec, El)
		( <_cor37> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor37})
		  -| ['compiler_generated'] )
	      end
	  %% Line 491
	  <{'record_field',_cor164,Rec,F},Prec,Opts> when 'true' ->
	      %% Line 492
	      case call 'erl_parse':'inop_prec'
		       ('.') of
		<{L,P,R}> when 'true' ->
		    let <_cor41> =
			%% Line 493
			apply 'lexpr'/3
			    (Rec, L, Opts)
		    in  let <_cor42> =
			    %% Line 493
			    apply 'lexpr'/3
				(F, R, Opts)
			in  let <El> =
				%% Line 493
				[_cor41|[46|[_cor42|[]]]]
			    in  %% Line 494
				apply 'maybe_paren'/3
				    (P, Prec, El)
		( <_cor40> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor40})
		  -| ['compiler_generated'] )
	      end
	  %% Line 495
	  <{'map',_cor165,Fs},Prec,Opts> when 'true' ->
	      %% Line 496
	      case call 'erl_parse':'preop_prec'
		       ('#') of
		<{P,_X_R}> when 'true' ->
		    let <_cor46> =
			%% Line 497
			apply 'leaf'/1
			    ([35])
		    in  let <_cor45> =
			    %% Line 497
			    apply 'map_fields'/2
				(Fs, Opts)
			in  let <El> = {%% Line 497
				 'first',_cor46,_cor45}
			    in  %% Line 498
				apply 'maybe_paren'/3
				    (P, Prec, El)
		( <_cor44> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor44})
		  -| ['compiler_generated'] )
	      end
	  %% Line 499
	  <{'map',_cor166,Map,Fs},Prec,Opts> when 'true' ->
	      %% Line 500
	      case call 'erl_parse':'inop_prec'
		       ('#') of
		<{L,P,_X_R}> when 'true' ->
		    let <Rl> =
			%% Line 501
			apply 'lexpr'/3
			    (Map, L, Opts)
		    in  let <_cor51> =
			    %% Line 502
			    apply 'leaf'/1
				([35])
			in  let <_cor50> =
				%% Line 502
				apply 'map_fields'/2
				    (Fs, Opts)
			    in  let <El> =
				    %% Line 502
				    {'first',[Rl|[_cor51|[]]],_cor50}
				in  %% Line 503
				    apply 'maybe_paren'/3
					(P, Prec, El)
		( <_cor48> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor48})
		  -| ['compiler_generated'] )
	      end
	  %% Line 504
	  <{'block',_cor167,Es},_cor168,Opts> when 'true' ->
	      let <_cor53> =
		  %% Line 505
		  apply 'body'/2
		      (Es, Opts)
	      in  %% Line 505
		  {'list',[{'step','begin',_cor53}|['end']]}
	  %% Line 506
	  <{'if',_cor169,Cs},_cor170,Opts> when 'true' ->
	      let <_cor54> =
		  %% Line 507
		  apply 'if_clauses'/2
		      (Cs, Opts)
	      in  %% Line 507
		  {'list',[{'step','if',_cor54}|['end']]}
	  %% Line 508
	  <{'case',_cor171,Expr,Cs},_cor172,Opts> when 'true' ->
	      let <_cor56> =
		  %% Line 509
		  apply 'lexpr'/2
		      (Expr, Opts)
	      in  let <_cor55> =
		      %% Line 510
		      apply 'cr_clauses'/2
			  (Cs, Opts)
		  in  %% Line 509
		      {'list',[{'step',{'list',[{'step','case',_cor56}|['of']]},_cor55}|%% Line 511
											['end']]}
	  %% Line 512
	  <{'cond',_cor173,Cs},_cor174,Opts> when 'true' ->
	      let <_cor58> =
		  %% Line 513
		  apply 'leaf'/1
		      ([99|[111|[110|[100]]]])
	      in  let <_cor57> =
		      %% Line 513
		      apply 'cond_clauses'/2
			  (Cs, Opts)
		  in  %% Line 513
		      {'list',[{'step',_cor58,_cor57}|['end']]}
	  %% Line 514
	  <{'receive',_cor175,Cs},_cor176,Opts> when 'true' ->
	      let <_cor59> =
		  %% Line 515
		  apply 'cr_clauses'/2
		      (Cs, Opts)
	      in  %% Line 515
		  {'list',[{'step','receive',_cor59}|['end']]}
	  %% Line 516
	  <{'receive',_cor177,Cs,To,ToOpt},_cor178,Opts> when 'true' ->
	      let <_cor61> =
		  %% Line 517
		  apply 'lexpr'/2
		      (To, Opts)
	      in  let <_cor60> =
		      %% Line 517
		      apply 'body'/2
			  (ToOpt, Opts)
		  in  let <Al> =
			  %% Line 517
			  {'list',[{'step',[_cor61|[' ->']],_cor60}|[]]}
		      in  let <_cor63> =
			      %% Line 518
			      apply 'cr_clauses'/2
				  (Cs, Opts)
			  in  %% Line 518
			      {'list',[{'step','receive',_cor63}|%% Line 519
								 [{'step','after',Al}|%% Line 520
										      ['end']]]}
	  %% Line 521
	  <{'fun',_cor179,{'function',F,A}},_X_Prec,_X_Opts> when 'true' ->
	      let <_cor64> =
		  %% Line 522
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[126|[119|[47|[126|[119]]]]]]]]], [F|[A|[]]])
	      in  %% Line 522
		  apply 'leaf'/1
		      (_cor64)
	  %% Line 523
	  <{'fun',_cor180,{'function',F,A},Extra},_X_Prec,_X_Opts> when 'true' ->
	      let <_cor67> =
		  %% Line 524
		  apply 'fun_info'/1
		      (Extra)
	      in  let <_cor65> =
		      %% Line 524
		      call 'io_lib':'format'
			  ([102|[117|[110|[32|[126|[119|[47|[126|[119]]]]]]]]], [F|[A|[]]])
		  in  let <_cor66> =
			  %% Line 524
			  apply 'leaf'/1
			      (_cor65)
		      in  %% Line 524
			  {'force_nl',_cor67,_cor66}
	  %% Line 525
	  <{'fun',_cor181,{'function',M,F,A}},_X_Prec,_X_Opts>
	      when %% Line 526
		try
		    let <_cor68> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor69> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor70> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor71> =
				    call 'erlang':'and'
					(_cor69, _cor70)
				in  call 'erlang':'and'
					(_cor68, _cor71)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor72> =
		  %% Line 528
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]], [M|[F|[A|[]]]])
	      in  %% Line 528
		  apply 'leaf'/1
		      (_cor72)
	  %% Line 529
	  <{'fun',_cor182,{'function',M,F,A}},_X_Prec,Opts> when 'true' ->
	      let <NameItem> =
		  %% Line 531
		  apply 'lexpr'/2
		      (M, Opts)
	      in  let <CallItem> =
		      %% Line 532
		      apply 'lexpr'/2
			  (F, Opts)
		  in  let <ArityItem> =
			  %% Line 533
			  apply 'lexpr'/2
			      (A, Opts)
		      in  %% Line 534
			  [[102|[117|[110|[32]]]]|[NameItem|[58|[CallItem|[47|[ArityItem|[]]]]]]]
	  %% Line 535
	  <{'fun',_cor183,{'clauses',Cs}},_X_Prec,Opts> when 'true' ->
	      let <_cor76> =
		  %% Line 536
		  apply 'fun_clauses'/3
		      (Cs, Opts, 'unnamed')
	      in  %% Line 536
		  {'list',[{'first','fun',_cor76}|['end']]}
	  %% Line 537
	  <{'named_fun',_cor184,Name,Cs},_X_Prec,Opts> when 'true' ->
	      let <_cor77> =
		  %% Line 538
		  apply 'fun_clauses'/3
		      (Cs, Opts, {'named',Name})
	      in  %% Line 538
		  {'list',[{'first',['fun'|[[32]]],_cor77}|['end']]}
	  %% Line 539
	  <{'fun',_cor185,{'clauses',Cs},Extra},_X_Prec,Opts> when 'true' ->
	      let <_cor79> =
		  %% Line 540
		  apply 'fun_info'/1
		      (Extra)
	      in  let <_cor78> =
		      %% Line 541
		      apply 'fun_clauses'/3
			  (Cs, Opts, 'unnamed')
		  in  %% Line 540
		      {'force_nl',_cor79,%% Line 541
					 {'list',[{'first','fun',_cor78}|['end']]}}
	  %% Line 542
	  <{'named_fun',_cor186,Name,Cs,Extra},_X_Prec,Opts> when 'true' ->
	      let <_cor81> =
		  %% Line 543
		  apply 'fun_info'/1
		      (Extra)
	      in  let <_cor80> =
		      %% Line 544
		      apply 'fun_clauses'/3
			  (Cs, Opts, {'named',Name})
		  in  %% Line 543
		      {'force_nl',_cor81,%% Line 544
					 {'list',[{'first',['fun'|[[32]]],_cor80}|['end']]}}
	  %% Line 545
	  <{'query',_cor187,Lc},_X_Prec,Opts> when 'true' ->
	      let <_cor83> =
		  %% Line 546
		  apply 'leaf'/1
		      ([113|[117|[101|[114|[121]]]]])
	      in  let <_cor82> =
		      %% Line 546
		      apply 'lexpr'/3
			  (Lc, 0, Opts)
		  in  %% Line 546
		      {'list',[{'step',_cor83,_cor82}|['end']]}
	  %% Line 547
	  <{'call',_cor188,Name = {'remote',_cor189,{'atom',_cor190,M},N = {'atom',_cor191,F}},Args},Prec,Opts> when 'true' ->
	      let <_cor84> =
		  %% Line 548
		  call 'erlang':'length'
		      (Args)
	      in  %% Line 548
		  case call 'erl_internal':'bif'
			   (M, F, _cor84) of
		    %% Line 549
		    <'true'> when 'true' ->
			%% Line 550
			apply 'call'/4
			    (N, Args, Prec, Opts)
		    %% Line 551
		    <'false'> when 'true' ->
			%% Line 552
			apply 'call'/4
			    (Name, Args, Prec, Opts)
		    ( <_cor85> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor85})
		      -| ['compiler_generated'] )
		  end
	  %% Line 554
	  <{'call',_cor192,Name,Args},Prec,Opts> when 'true' ->
	      %% Line 555
	      apply 'call'/4
		  (Name, Args, Prec, Opts)
	  %% Line 556
	  <{'try',_cor193,Es,Scs,Ccs,As},_cor194,Opts> when 'true' ->
	      let <_cor89> =
		  %% Line 557
		  case <> of
		    %% Line 558
		    <>
			when call 'erlang':'=:='
			      (Scs,
			       []) ->
			let <_cor86> =
			    %% Line 559
			    apply 'body'/2
				(Es, Opts)
			in  %% Line 559
			    {'step','try',_cor86}
		    %% Line 560
		    <> when 'true' ->
			let <_cor88> =
			    %% Line 561
			    apply 'body'/2
				(Es, Opts)
			in  let <_cor87> =
				%% Line 562
				apply 'cr_clauses'/2
				    (Scs, Opts)
			    in  %% Line 561
				{'step',{'list',[{'step','try',_cor88}|['of']]},_cor87}
		  end
	      in  let <_cor91> =
		      %% Line 564
		      case <> of
			%% Line 565
			<>
			    when call 'erlang':'=:='
				  (Ccs,
				   []) ->
			    %% Line 566
			    []
			%% Line 567
			<> when 'true' ->
			    let <_cor90> =
				%% Line 568
				apply 'try_clauses'/2
				    (Ccs, Opts)
			    in  %% Line 568
				{'step','catch',_cor90}
		      end
		  in  let <_cor93> =
			  %% Line 570
			  case <> of
			    %% Line 571
			    <>
				when call 'erlang':'=:='
				      (As,
				       []) ->
				%% Line 572
				[]
			    %% Line 573
			    <> when 'true' ->
				let <_cor92> =
				    %% Line 574
				    apply 'body'/2
					(As, Opts)
				in  %% Line 574
				    {'step','after',_cor92}
			  end
		      in  %% Line 557
			  {'list',[_cor89|%% Line 564
					  [_cor91|%% Line 570
						  [_cor93|%% Line 576
							  ['end']]]]}
	  %% Line 577
	  <{'catch',_cor195,Expr},Prec,Opts> when 'true' ->
	      %% Line 578
	      case call 'erl_parse':'preop_prec'
		       ('catch') of
		<{P,R}> when 'true' ->
		    let <_cor95> =
			%% Line 579
			apply 'lexpr'/3
			    (Expr, R, Opts)
		    in  let <El> =
			    %% Line 579
			    {'list',[{'step','catch',_cor95}|[]]}
			in  %% Line 580
			    apply 'maybe_paren'/3
				(P, Prec, El)
		( <_cor94> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor94})
		  -| ['compiler_generated'] )
	      end
	  %% Line 581
	  <{'match',_cor196,Lhs,Rhs},Prec,Opts> when 'true' ->
	      %% Line 582
	      case call 'erl_parse':'inop_prec'
		       ('=') of
		<{L,P,R}> when 'true' ->
		    let <Pl> =
			%% Line 583
			apply 'lexpr'/3
			    (Lhs, L, Opts)
		    in  let <Rl> =
			    %% Line 584
			    apply 'lexpr'/3
				(Rhs, R, Opts)
			in  let <El> =
				%% Line 585
				{'list',[{'cstep',[Pl|[' =']],Rl}|[]]}
			    in  %% Line 586
				apply 'maybe_paren'/3
				    (P, Prec, El)
		( <_cor97> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor97})
		  -| ['compiler_generated'] )
	      end
	  %% Line 587
	  <{'op',_cor197,Op,Arg},Prec,Opts> when 'true' ->
	      %% Line 588
	      case call 'erl_parse':'preop_prec'
		       (Op) of
		<{P,R}> when 'true' ->
		    let <_cor102> =
			%% Line 589
			call 'io_lib':'format'
			    ([126|[115|[32]]], [Op|[]])
		    in  let <Ol> =
			    %% Line 589
			    apply 'leaf'/1
				(_cor102)
			in  let <_cor104> =
				%% Line 590
				apply 'lexpr'/3
				    (Arg, R, Opts)
			    in  let <El> =
				    %% Line 590
				    [Ol|[_cor104|[]]]
				in  %% Line 591
				    apply 'maybe_paren'/3
					(P, Prec, El)
		( <_cor101> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor101})
		  -| ['compiler_generated'] )
	      end
	  %% Line 592
	  <{'op',_cor198,Op,Larg,Rarg},Prec,Opts>
	      when let <_cor106> =
		    call 'erlang':'=:='
			(Op, 'orelse')
		in  let <_cor107> =
			%% Line 593
			call 'erlang':'=:='
			    (Op, 'andalso')
		    in  call 'erlang':'or'
			    (_cor106, _cor107) ->
	      %% Line 595
	      case call 'erl_parse':'inop_prec'
		       (Op) of
		<{L,P,R}> when 'true' ->
		    let <Ll> =
			%% Line 596
			apply 'lexpr'/3
			    (Larg, L, Opts)
		    in  let <_cor110> =
			    %% Line 597
			    call 'io_lib':'format'
				([126|[115]], [Op|[]])
			in  let <Ol> =
				%% Line 597
				apply 'leaf'/1
				    (_cor110)
			    in  let <Lr> =
				    %% Line 598
				    apply 'lexpr'/3
					(Rarg, R, Opts)
				in  let <El> =
					%% Line 599
					{'prefer_nl',[[]],[Ll|[Ol|[Lr|[]]]]}
				    in  %% Line 600
					apply 'maybe_paren'/3
					    (P, Prec, El)
		( <_cor108> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor108})
		  -| ['compiler_generated'] )
	      end
	  %% Line 601
	  <{'op',_cor199,Op,Larg,Rarg},Prec,Opts> when 'true' ->
	      %% Line 602
	      case call 'erl_parse':'inop_prec'
		       (Op) of
		<{L,P,R}> when 'true' ->
		    let <Ll> =
			%% Line 603
			apply 'lexpr'/3
			    (Larg, L, Opts)
		    in  let <_cor116> =
			    %% Line 604
			    call 'io_lib':'format'
				([126|[115]], [Op|[]])
			in  let <Ol> =
				%% Line 604
				apply 'leaf'/1
				    (_cor116)
			    in  let <Lr> =
				    %% Line 605
				    apply 'lexpr'/3
					(Rarg, R, Opts)
				in  let <El> =
					%% Line 606
					{'list',[Ll|[Ol|[Lr|[]]]]}
				    in  %% Line 607
					apply 'maybe_paren'/3
					    (P, Prec, El)
		( <_cor114> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor114})
		  -| ['compiler_generated'] )
	      end
	  %% Line 609
	  <{'remote',_cor200,M,F},Prec,Opts> when 'true' ->
	      %% Line 610
	      case call 'erl_parse':'inop_prec'
		       (':') of
		<{L,P,R}> when 'true' ->
		    let <NameItem> =
			%% Line 611
			apply 'lexpr'/3
			    (M, L, Opts)
		    in  let <CallItem> =
			    %% Line 612
			    apply 'lexpr'/3
				(F, R, Opts)
			in  %% Line 613
			    apply 'maybe_paren'/3
				(P, Prec, [NameItem|[58|[CallItem|[]]]])
		( <_cor120> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor120})
		  -| ['compiler_generated'] )
	      end
	  %% Line 615
	  <{'bin',_cor201,Fs},_cor202,Opts> when 'true' ->
	      %% Line 616
	      apply 'bit_grp'/2
		  (Fs, Opts)
	  %% Line 618
	  <{'value',_cor203,Val},_cor204,_cor205> when 'true' ->
	      let <_cor123> =
		  %% Line 619
		  call 'io_lib':'write'
		      (Val)
	      in  %% Line 619
		  apply 'leaf'/1
		      (_cor123)
	  %% Line 621
	  <Other,_X_Precedence,{'options','none',_cor206,_cor207}> when 'true' ->
	      let <_cor124> =
		  %% Line 622
		  call 'io_lib':'format'
		      ([73|[78|[86|[65|[76|[73|[68|[45|[70|[79|[82|[77|[58|[126|[119|[58]]]]]]]]]]]]]]]], [Other|[]])
	      in  %% Line 622
		  apply 'leaf'/1
		      (_cor124)
	  %% Line 623
	  <HookExpr,Precedence,{'options',{Mod,Func,Eas},_cor208,_cor209}>
	      when %% Line 624
		call 'erlang':'=/='
		    (Mod,
		     'fun') ->
	      %% Line 625
	      {'ehook',HookExpr,Precedence,{Mod,Func,Eas}}
	  %% Line 626
	  <HookExpr,Precedence,{'options',Func,_cor210,Options}> when 'true' ->
	      %% Line 627
	      {'hook',HookExpr,Precedence,Func,Options}
	  ( <_cor127,_cor126,_cor125> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor127,_cor126,_cor125})
		  -| [{'function_name',{'lexpr',3}}] )
	    -| ['compiler_generated'] )
	end
'call'/4 =
    %% Line 629
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 630
	case call 'erl_parse':'func_prec'
		 () of
	  <{F,P}> when 'true' ->
	      let <_cor6> =
		  %% Line 631
		  apply 'lexpr'/3
		      (_cor3, F, _cor0)
	      in  let <_cor5> =
		      %% Line 631
		      apply 'args'/2
			  (_cor2, _cor0)
		  in  let <Item> = {%% Line 631
			   'first',_cor6,_cor5}
		      in  %% Line 632
			  apply 'maybe_paren'/3
			      (P, _cor1, Item)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'fun_info'/1 =
    %% Line 634
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 635
	    call 'io_lib':'format'
		([37|[32|[102|[117|[110|[45|[105|[110|[102|[111|[58|[32|[126|[119]]]]]]]]]]]]]], [_cor0|[]])
	in  %% Line 635
	    apply 'leaf'/1
		(_cor1)
'bit_grp'/2 =
    %% Line 639
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 640
	    apply 'bit_elems'/2
		(_cor1, _cor0)
	in  %% Line 640
	    call 'lists':'append'
		([['<<']|[[_cor2|[]]|[['>>']]]])
'bit_elems'/2 =
    %% Line 642
    fun (_cor1,_cor0) ->
	%% Line 643
	apply 'expr_list'/4
	    (_cor1, 44, ( 'bit_elem'/2
			  -| [{'id',{0,0,'-bit_elems/2-fun-0-'}}] ), _cor0)
'bit_elem'/2 =
    %% Line 645
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'bin_element',_cor10,Expr,Sz,Types},Opts> when 'true' ->
	      let <P> =
		  %% Line 646
		  call 'erl_parse':'max_prec'
		      ()
	      in  let <VChars> =
		      %% Line 647
		      apply 'lexpr'/3
			  (Expr, P, Opts)
		  in  let <_cor5> =
			  %% Line 648
			  case <> of
			    %% Line 649
			    <>
				when call 'erlang':'=/='
				      (Sz,
				       'default') ->
				let <_cor4> =
				    %% Line 650
				    apply 'lexpr'/3
					(Sz, P, Opts)
				in  %% Line 650
				    [VChars|[58|[_cor4|[]]]]
			    %% Line 651
			    <> when 'true' ->
				%% Line 652
				VChars
			  end
		      in  %% Line 654
			  case <> of
			    %% Line 655
			    <>
				when call 'erlang':'=/='
				      (Types,
				       'default') ->
				let <_cor7> =
				    %% Line 656
				    apply 'bit_elem_types'/1
					(Types)
				in  %% Line 656
				    [_cor5|[47|_cor7]]
			    %% Line 657
			    <> when 'true' ->
				_cor5
			  end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'bit_elem',2}}] )
	    -| ['compiler_generated'] )
	end
'bit_elem_types'/1 =
    %% Line 661
    fun (_cor0) ->
	case _cor0 of
	  <[T|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 662
		  apply 'bit_elem_type'/1
		      (T)
	      in  %% Line 662
		  [_cor1|[]]
	  %% Line 663
	  <[T|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 664
		  apply 'bit_elem_type'/1
		      (T)
	      in  let <_cor3> =
		      %% Line 664
		      apply 'bit_elem_types'/1
			  (Rest)
		  in  %% Line 664
		      [_cor2|[45|_cor3]]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'bit_elem_types',1}}] )
	    -| ['compiler_generated'] )
	end
'bit_elem_type'/1 =
    %% Line 666
    fun (_cor0) ->
	case _cor0 of
	  <{A,B}> when 'true' ->
	      let <_cor2> =
		  %% Line 667
		  call 'erl_parse':'abstract'
		      (A)
	      in  let <_cor1> =
		      %% Line 667
		      apply 'options'/1
			  ('none')
		  in  let <_cor3> =
			  %% Line 667
			  apply 'lexpr'/2
			      (_cor2, _cor1)
		      in  let <_cor5> =
			      %% Line 669
			      call 'erl_parse':'abstract'
				  (B)
			  in  let <_cor4> =
				  %% Line 669
				  apply 'options'/1
				      ('none')
			      in  let <_cor6> =
				      %% Line 669
				      apply 'lexpr'/2
					  (_cor5, _cor4)
				  in  %% Line 667
				      [_cor3|%% Line 668
					     [58|%% Line 669
						 [_cor6|[]]]]
	  %% Line 670
	  <T> when 'true' ->
	      let <_cor8> =
		  %% Line 671
		  call 'erl_parse':'abstract'
		      (T)
	      in  let <_cor7> =
		      %% Line 671
		      apply 'options'/1
			  ('none')
		  in  %% Line 671
		      apply 'lexpr'/2
			  (_cor8, _cor7)
	end
'record_name'/1 =
    %% Line 675
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 676
	    call 'io_lib':'format'
		([35|[126|[119]]], [_cor0|[]])
	in  %% Line 676
	    apply 'leaf'/1
		(_cor1)
'record_fields'/2 =
    %% Line 678
    fun (_cor1,_cor0) ->
	%% Line 679
	apply 'tuple'/3
	    (_cor1, ( 'record_field'/2
		      -| [{'id',{0,0,'-record_fields/2-fun-0-'}}] ), _cor0)
'record_field'/2 =
    %% Line 681
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'record_field',_cor12,F,Val},Opts> when 'true' ->
	      %% Line 682
	      case call 'erl_parse':'inop_prec'
		       ('=') of
		<{L,_X_P,R}> when 'true' ->
		    let <Fl> =
			%% Line 683
			apply 'lexpr'/3
			    (F, L, Opts)
		    in  let <Vl> =
			    %% Line 684
			    apply 'lexpr'/3
				(Val, R, Opts)
			in  %% Line 685
			    {'list',[{'cstep',[Fl|[' =']],Vl}|[]]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 686
	  <{'typed_record_field',{'record_field',_cor13,F,Val},Type},Opts> when 'true' ->
	      %% Line 687
	      case call 'erl_parse':'inop_prec'
		       ('=') of
		<{L,_X_P,R}> when 'true' ->
		    let <Fl> =
			%% Line 688
			apply 'lexpr'/3
			    (F, L, Opts)
		    in  let <_cor7> =
			    %% Line 689
			    apply 'lexpr'/3
				(Val, R, Opts)
			in  let <Vl> =
				%% Line 689
				apply 'typed'/2
				    (_cor7, Type)
			    in  %% Line 690
				{'list',[{'cstep',[Fl|[' =']],Vl}|[]]}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 691
	  <{'typed_record_field',Field,Type},Opts> when 'true' ->
	      let <_cor9> =
		  %% Line 692
		  apply 'record_field'/2
		      (Field, Opts)
	      in  %% Line 692
		  apply 'typed'/2
		      (_cor9, Type)
	  %% Line 693
	  <{'record_field',_cor14,F},Opts> when 'true' ->
	      %% Line 694
	      apply 'lexpr'/3
		  (F, 0, Opts)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'record_field',2}}] )
	    -| ['compiler_generated'] )
	end
'map_fields'/2 =
    %% Line 696
    fun (_cor1,_cor0) ->
	%% Line 697
	apply 'tuple'/3
	    (_cor1, ( 'map_field'/2
		      -| [{'id',{0,0,'-map_fields/2-fun-0-'}}] ), _cor0)
'map_field'/2 =
    %% Line 699
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'map_field_assoc',_cor10,K,V},Opts> when 'true' ->
	      let <Pl> =
		  %% Line 700
		  apply 'lexpr'/3
		      (K, 0, Opts)
	      in  let <_cor4> =
		      %% Line 701
		      apply 'leaf'/1
			  ([32|[61|[62]]])
		  in  let <_cor3> =
			  %% Line 701
			  apply 'lexpr'/3
			      (V, 0, Opts)
		      in  %% Line 701
			  {'list',[{'step',[Pl|[_cor4|[]]],_cor3}|[]]}
	  %% Line 702
	  <{'map_field_exact',_cor11,K,V},Opts> when 'true' ->
	      let <Pl> =
		  %% Line 703
		  apply 'lexpr'/3
		      (K, 0, Opts)
	      in  let <_cor7> =
		      %% Line 704
		      apply 'leaf'/1
			  ([32|[58|[61]]])
		  in  let <_cor6> =
			  %% Line 704
			  apply 'lexpr'/3
			      (V, 0, Opts)
		      in  %% Line 704
			  {'list',[{'step',[Pl|[_cor7|[]]],_cor6}|[]]}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'map_field',2}}] )
	    -| ['compiler_generated'] )
	end
'list'/3 =
    %% Line 706
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'cons',_cor8,H,T},Es,Opts> when 'true' ->
	      %% Line 707
	      apply 'list'/3
		  (T, [H|Es], Opts)
	  %% Line 708
	  <{'nil',_cor9},Es,Opts> when 'true' ->
	      let <_cor3> =
		  %% Line 709
		  call 'lists':'reverse'
		      (Es)
	      in  %% Line 709
		  apply 'proper_list'/2
		      (_cor3, Opts)
	  %% Line 710
	  <Other,Es,Opts> when 'true' ->
	      let <_cor4> =
		  %% Line 711
		  call 'lists':'reverse'
		      (Es, [Other|[]])
	      in  %% Line 711
		  apply 'improper_list'/2
		      (_cor4, Opts)
	end
'if_clauses'/2 =
    %% Line 716
    fun (_cor1,_cor0) ->
	%% Line 717
	apply 'clauses'/3
	    (( 'if_clause'/2
	       -| [{'id',{0,0,'-if_clauses/2-fun-0-'}}] ), _cor0, _cor1)
'if_clause'/2 =
    %% Line 719
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'clause',_cor7,[],G,B},Opts> when 'true' ->
	      let <_cor2> =
		  %% Line 720
		  apply 'guard_no_when'/2
		      (G, Opts)
	      in  let <Gl> =
		      %% Line 720
		      [_cor2|[' ->']]
		  in  let <_cor4> =
			  %% Line 721
			  apply 'body'/2
			      (B, Opts)
		      in  %% Line 721
			  {'step',Gl,_cor4}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'if_clause',2}}] )
	    -| ['compiler_generated'] )
	end
'guard_no_when'/2 =
    %% Line 723
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],Opts>
	      when call 'erlang':'is_list'
		    (E) ->
	      %% Line 724
	      apply 'expr_list'/4
		  ([E|Es], 59, ( 'guard0'/2
				 -| [{'id',{0,0,'-guard_no_when/2-fun-0-'}}] ), Opts)
	  %% Line 725
	  <[E|Es],Opts> when 'true' ->
	      %% Line 726
	      apply 'guard_no_when'/2
		  ([[E|Es]|[]], Opts)
	  %% Line 727
	  <[],_cor4> when 'true' ->
	      %% Line 728
	      apply 'leaf'/1
		  ([116|[114|[117|[101]]]])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'guard_no_when',2}}] )
	    -| ['compiler_generated'] )
	end
'cr_clauses'/2 =
    %% Line 733
    fun (_cor1,_cor0) ->
	%% Line 734
	apply 'clauses'/3
	    (( 'cr_clause'/2
	       -| [{'id',{0,0,'-cr_clauses/2-fun-0-'}}] ), _cor0, _cor1)
'cr_clause'/2 =
    %% Line 736
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'clause',_cor7,[T|[]],G,B},Opts> when 'true' ->
	      let <El> =
		  %% Line 737
		  apply 'lexpr'/3
		      (T, 0, Opts)
	      in  let <Gl> =
		      %% Line 738
		      apply 'guard_when'/3
			  (El, G, Opts)
		  in  let <Bl> =
			  %% Line 739
			  apply 'body'/2
			      (B, Opts)
		      in  %% Line 740
			  {'step',Gl,Bl}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'cr_clause',2}}] )
	    -| ['compiler_generated'] )
	end
'try_clauses'/2 =
    %% Line 745
    fun (_cor1,_cor0) ->
	%% Line 746
	apply 'clauses'/3
	    (( 'try_clause'/2
	       -| [{'id',{0,0,'-try_clauses/2-fun-0-'}}] ), _cor0, _cor1)
'try_clause'/2 =
    %% Line 748
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'clause',_cor14,[{'tuple',_cor15,[{'atom',_cor16,'throw'}|[V|[S|[]]]]}|[]],G,B},Opts> when 'true' ->
	      let <El> =
		  %% Line 749
		  apply 'lexpr'/3
		      (V, 0, Opts)
	      in  let <Sl> =
		      %% Line 750
		      apply 'stack_backtrace'/3
			  (S, [El|[]], Opts)
		  in  let <Gl> =
			  %% Line 751
			  apply 'guard_when'/3
			      (Sl, G, Opts)
		      in  let <Bl> =
			      %% Line 752
			      apply 'body'/2
				  (B, Opts)
			  in  %% Line 753
			      {'step',Gl,Bl}
	  %% Line 754
	  <{'clause',_cor17,[{'tuple',_cor18,[C|[V|[S|[]]]]}|[]],G,B},Opts> when 'true' ->
	      let <Cs> =
		  %% Line 755
		  apply 'lexpr'/3
		      (C, 0, Opts)
	      in  let <El> =
		      %% Line 756
		      apply 'lexpr'/3
			  (V, 0, Opts)
		  in  let <CsEl> =
			  %% Line 757
			  [Cs|[58|[El|[]]]]
		      in  let <Sl> =
			      %% Line 758
			      apply 'stack_backtrace'/3
				  (S, CsEl, Opts)
			  in  let <Gl> =
				  %% Line 759
				  apply 'guard_when'/3
				      (Sl, G, Opts)
			      in  let <Bl> =
				      %% Line 760
				      apply 'body'/2
					  (B, Opts)
				  in  %% Line 761
				      {'step',Gl,Bl}
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'try_clause',2}}] )
	    -| ['compiler_generated'] )
	end
'stack_backtrace'/3 =
    %% Line 763
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'var',_cor7,'_'},El,_X_Opts> when 'true' ->
	      %% Line 764
	      El
	  %% Line 765
	  <S,El,Opts> when 'true' ->
	      let <_cor3> =
		  %% Line 766
		  apply 'lexpr'/3
		      (S, 0, Opts)
	      in  %% Line 766
		  call 'erlang':'++'
		      (El, [58|[_cor3|[]]])
	end
'fun_clauses'/3 =
    %% Line 771
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Cs,Opts,'unnamed'> when 'true' ->
	      %% Line 772
	      apply 'nl_clauses'/4
		  (( 'fun_clause'/2
		     -| [{'id',{0,0,'-fun_clauses/3-fun-0-'}}] ), [59], Opts, Cs)
	  %% Line 773
	  <Cs,Opts,{'named',Name}> when 'true' ->
	      let <_cor9> =
		  %% Line 774
		  ( fun (_cor6,_cor5) ->
			%% Line 775
			case apply 'fun_clause'/2
				 (_cor6, _cor5) of
			  <{'step',Gl,Bl}> when 'true' ->
			      let <_cor4> =
				  %% Line 776
				  call 'erlang':'atom_to_list'
				      (Name)
			      in  %% Line 776
				  {'step',[_cor4|[Gl|[]]],Bl}
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-fun_clauses/3-fun-1-'}}] )
	      in  %% Line 774
		  apply 'nl_clauses'/4
		      (_cor9, %% Line 777
			      [59], %% Line 777
				    Opts, %% Line 777
					  Cs)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'fun_clauses',3}}] )
	    -| ['compiler_generated'] )
	end
'fun_clause'/2 =
    %% Line 779
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'clause',_cor7,A,G,B},Opts> when 'true' ->
	      let <El> =
		  %% Line 780
		  apply 'args'/2
		      (A, Opts)
	      in  let <Gl> =
		      %% Line 781
		      apply 'guard_when'/3
			  (El, G, Opts)
		  in  let <Bl> =
			  %% Line 782
			  apply 'body'/2
			      (B, Opts)
		      in  %% Line 783
			  {'step',Gl,Bl}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'fun_clause',2}}] )
	    -| ['compiler_generated'] )
	end
'cond_clauses'/2 =
    %% Line 788
    fun (_cor1,_cor0) ->
	%% Line 789
	apply 'clauses'/3
	    (( 'cond_clause'/2
	       -| [{'id',{0,0,'-cond_clauses/2-fun-0-'}}] ), _cor0, _cor1)
'cond_clause'/2 =
    %% Line 791
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'clause',_cor6,[],[[E|[]]|[]],B},Opts> when 'true' ->
	      let <_cor3> =
		  %% Line 792
		  apply 'lexpr'/2
		      (E, Opts)
	      in  let <_cor2> =
		      %% Line 792
		      apply 'body'/2
			  (B, Opts)
		  in  %% Line 792
		      {'step',[_cor3|[' ->']],_cor2}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'cond_clause',2}}] )
	    -| ['compiler_generated'] )
	end
'nl_clauses'/4 =
    %% Line 797
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 798
	    apply 'lexprs'/3
		(_cor0, _cor3, _cor1)
	in  %% Line 798
	    {'prefer_nl',_cor2,_cor4}
'clauses'/3 =
    %% Line 803
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 804
	    apply 'lexprs'/3
		(_cor0, _cor2, _cor1)
	in  %% Line 804
	    {'prefer_nl',[59],_cor3}
'lc_quals'/2 =
    %% Line 809
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 810
	    apply 'lexprs'/3
		(_cor1, ( 'lc_qual'/2
			  -| [{'id',{0,0,'-lc_quals/2-fun-0-'}}] ), _cor0)
	in  %% Line 810
	    {'prefer_nl',[44],_cor2}
'lc_qual'/2 =
    %% Line 812
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'b_generate',_cor10,Pat,E},Opts> when 'true' ->
	      let <Pl> =
		  %% Line 813
		  apply 'lexpr'/3
		      (Pat, 0, Opts)
	      in  let <_cor4> =
		      %% Line 814
		      apply 'leaf'/1
			  ([32|[60|[61]]])
		  in  let <_cor3> =
			  %% Line 814
			  apply 'lexpr'/3
			      (E, 0, Opts)
		      in  %% Line 814
			  {'list',[{'step',[Pl|[_cor4|[]]],_cor3}|[]]}
	  %% Line 815
	  <{'generate',_cor11,Pat,E},Opts> when 'true' ->
	      let <Pl> =
		  %% Line 816
		  apply 'lexpr'/3
		      (Pat, 0, Opts)
	      in  let <_cor7> =
		      %% Line 817
		      apply 'leaf'/1
			  ([32|[60|[45]]])
		  in  let <_cor6> =
			  %% Line 817
			  apply 'lexpr'/3
			      (E, 0, Opts)
		      in  %% Line 817
			  {'list',[{'step',[Pl|[_cor7|[]]],_cor6}|[]]}
	  %% Line 818
	  <Q,Opts> when 'true' ->
	      %% Line 819
	      apply 'lexpr'/3
		  (Q, 0, Opts)
	end
'proper_list'/2 =
    %% Line 821
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 822
	    apply 'lexprs'/2
		(_cor1, _cor0)
	in  %% Line 822
	    {'seq',91,93,44,_cor2}
'improper_list'/2 =
    %% Line 824
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 825
	    apply 'lexprs'/2
		(_cor1, _cor0)
	in  %% Line 825
	    {'seq',91,93,{44,124},_cor2}
'tuple'/2 =
    %% Line 827
    fun (_cor1,_cor0) ->
	%% Line 828
	apply 'tuple'/3
	    (_cor1, ( 'lexpr'/2
		      -| [{'id',{0,0,'-tuple/2-fun-0-'}}] ), _cor0)
'tuple'/3 =
    %% Line 830
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 831
	    apply 'lexprs'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 831
	    {'seq',123,125,44,_cor3}
'args'/2 =
    %% Line 833
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 834
	    apply 'lexprs'/2
		(_cor1, _cor0)
	in  %% Line 834
	    {'seq',40,41,[44],_cor2}
'expr_list'/4 =
    %% Line 836
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 837
	    apply 'lexprs'/3
		(_cor3, _cor1, _cor0)
	in  %% Line 837
	    {'seq',[],[],_cor2,_cor4}
'lexprs'/2 =
    %% Line 839
    fun (_cor1,_cor0) ->
	%% Line 840
	apply 'lexprs'/3
	    (_cor1, ( 'lexpr'/2
		      -| [{'id',{0,0,'-lexprs/2-fun-0-'}}] ), _cor0)
'lexprs'/3 =
    %% Line 842
    fun (_cor2,_cor1,_cor0) ->
	%% Line 843
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[E|_cor4]> when 'true' ->
			    let <_cor6> =
				apply _cor1
				    (E, _cor0)
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'maybe_paren'/3 =
    %% Line 845
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <P,Prec,Expr>
	      when call 'erlang':'<'
		    (P,
		     Prec) ->
	      %% Line 846
	      [40|[Expr|[41]]]
	  %% Line 847
	  <_X_P,_X_Prec,Expr> when 'true' ->
	      %% Line 848
	      Expr
	end
'leaf'/1 =
    %% Line 850
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 851
	    apply 'chars_size'/1
		(_cor0)
	in  %% Line 851
	    {'leaf',_cor1,_cor0}
'frmt'/2 =
    %% Line 856
    fun (_cor1,_cor0) ->
	%% Line 857
	apply 'frmt'/3
	    (_cor1, 0, _cor0)
'frmt'/3 =
    %% Line 859
    fun (_cor2,_cor1,_cor0) ->
	let <ST> =
	    %% Line 860
	    apply 'spacetab'/0
		()
	in  let <WT> =
		%% Line 861
		apply 'wordtable'/0
		    ()
	    in  %% Line 862
		case apply 'f'/5
			 (_cor2, _cor1, ST, WT, _cor0) of
		  <{Chars,_X_Length}> when 'true' ->
		      %% Line 863
		      [Chars|[]]
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'f'/5 =
    %% Line 888
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Nil = [],_X_I0,_X_ST,_X_WT,_X_PP> when 'true' ->
	      %% Line 889
	      {Nil,0}
	  %% Line 890
	  <C,_X_I0,_X_ST,_X_WT,_X_PP>
	      when call 'erlang':'is_integer'
		    (C) ->
	      %% Line 891
	      {C,1}
	  %% Line 892
	  <{'leaf',Length,Chars},_X_I0,_X_ST,_X_WT,_X_PP> when 'true' ->
	      %% Line 893
	      {Chars,Length}
	  %% Line 894
	  <[Item|Items],I0,ST,WT,PP> when 'true' ->
	      let <_cor5> =
		  %% Line 895
		  apply 'f'/5
		      (Item, I0, ST, WT, PP)
	      in  %% Line 895
		  apply 'consecutive'/6
		      (Items, _cor5, I0, ST, WT, PP)
	  %% Line 896
	  <{'list',Items},I0,ST,WT,PP> when 'true' ->
	      %% Line 897
	      apply 'f'/5
		  ({'seq',[],[],[[]],Items}, I0, ST, WT, PP)
	  %% Line 898
	  <{'first',E,Item},I0,ST,WT,PP> when 'true' ->
	      %% Line 899
	      apply 'f'/5
		  ({'seq',E,[],[[]],[Item|[]]}, I0, ST, WT, PP)
	  %% Line 900
	  <{'seq',Before,After,Sep,LItems},I0,ST,WT,PP> when 'true' ->
	      let <BCharsSize> =
		  %% Line 901
		  apply 'f'/5
		      (Before, I0, ST, WT, PP)
	      in  let <I> =
		      %% Line 902
		      apply 'indent'/2
			  (BCharsSize, I0)
		  in  let <CharsSizeL> =
			  %% Line 903
			  apply 'fl'/7
			      (LItems, Sep, I, After, ST, WT, PP)
		      in  %% Line 904
			  case apply 'unz'/1
				   (CharsSizeL) of
			    <{CharsL,SizeL}> when 'true' ->
				%% Line 905
				case apply 'unz1'/1
					 ([BCharsSize|[]]) of
				  <{BCharsL,BSizeL}> when 'true' ->
				      let <Sizes> =
					  %% Line 906
					  call 'erlang':'++'
					      (BSizeL, SizeL)
				      in  let <_cor16> =
					      %% Line 907
					      case <> of
						%% Line 908
						<>
						    when let <_cor12> =
							  call 'erlang':'is_list'
							      (Sep)
						      in  let <_cor13> =
							      call 'erlang':'=/='
								  (Sep, [])
							  in  call 'erlang':'and'
								  (_cor12, _cor13) ->
						    let <_cor14> =
							%% Line 909
							call 'erlang':'length'
							    (CharsL)
						    in  let <_cor15> =
							    %% Line 909
							    call 'erlang':'-'
								(_cor14, 1)
							in  %% Line 909
							    call 'erlang':'max'
								(0, _cor15)
						%% Line 910
						<> when 'true' ->
						    %% Line 911
						    0
					      end
					  in  %% Line 913
					      case apply 'same_line'/3
						       (I0, Sizes, _cor16) of
						%% Line 914
						<{'yes',Size}> when 'true' ->
						    let <_cor18> =
							%% Line 915
							case <> of
							  %% Line 916
							  <>
							      when call 'erlang':'>'
								    (_cor16,
								     0) ->
							      apply 'insert_sep'/2
								  (CharsL, 32)
							  %% Line 917
							  <> when 'true' ->
							      CharsL
							end
						    in  let <_cor20> =
							    %% Line 919
							    call 'erlang':'++'
								(BCharsL, _cor18)
							in  %% Line 919
							    {_cor20,Size}
						%% Line 920
						<'no'> when 'true' ->
						    let <_cor23> =
							%% Line 921
							apply 'insert_newlines'/3
							    (CharsSizeL, I, ST)
						    in  let <_cor24> =
							    %% Line 921
							    call 'erlang':'++'
								(BCharsL, _cor23)
							in  let <_cor21> =
								%% Line 922
								call 'lists':'last'
								    (Sizes)
							    in  let <_cor22> =
								    %% Line 922
								    apply 'nsz'/2
									(_cor21, I0)
								in  %% Line 921
								    {_cor24,_cor22}
						( <_cor25> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor25})
						  -| ['compiler_generated'] )
					      end
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor10})
				    -| ['compiler_generated'] )
				end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor9})
			      -| ['compiler_generated'] )
			  end
	  %% Line 924
	  <{'force_nl',_X_ExtraInfoItem,Item},I,ST,WT,PP>
	      when call 'erlang':'<'
		    (I,
		     0) ->
	      %% Line 926
	      apply 'f'/5
		  (Item, I, ST, WT, PP)
	  %% Line 927
	  <{'force_nl',ExtraInfoItem,Item},I,ST,WT,PP> when 'true' ->
	      %% Line 928
	      apply 'f'/5
		  ({'prefer_nl',[],[ExtraInfoItem|[Item|[]]]}, I, ST, WT, PP)
	  %% Line 929
	  <{'prefer_nl',Sep,LItems},I,ST,WT,PP>
	      when call 'erlang':'<'
		    (I,
		     0) ->
	      %% Line 930
	      apply 'f'/5
		  ({'seq',[],[],Sep,LItems}, I, ST, WT, PP)
	  %% Line 931
	  <{'prefer_nl',Sep,LItems},I0,ST,WT,PP> when 'true' ->
	      let <CharsSize2L> =
		  %% Line 932
		  apply 'fl'/7
		      (LItems, Sep, I0, [], ST, WT, PP)
	      in  %% Line 933
		  case apply 'unz'/1
			   (CharsSize2L) of
		    <{_X_CharsL,Sizes}> when 'true' ->
			%% Line 934
			case <> of
			  %% Line 935
			  <>
			      when call 'erlang':'=:='
				    (Sizes,
				     []) ->
			      %% Line 936
			      {[],0}
			  %% Line 937
			  <> when 'true' ->
			      let <_cor30> =
				  %% Line 938
				  apply 'insert_newlines'/3
				      (CharsSize2L, I0, ST)
			      in  let <_cor28> =
				      %% Line 938
				      call 'lists':'last'
					  (Sizes)
				  in  let <_cor29> =
					  %% Line 938
					  apply 'nsz'/2
					      (_cor28, I0)
				      in  %% Line 938
					  {_cor30,_cor29}
			end
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor27})
		      -| ['compiler_generated'] )
		  end
	  %% Line 940
	  <{'char',C},I,ST,WT,PP> when 'true' ->
	      let <_cor31> =
		  %% Line 941
		  apply 'write_a_char'/2
		      (C, PP)
	      in  %% Line 941
		  apply 'f'/5
		      (_cor31, I, ST, WT, PP)
	  %% Line 942
	  <{'string',S},I,ST,WT,PP> when 'true' ->
	      let <_cor32> =
		  %% Line 943
		  apply 'write_a_string'/3
		      (S, I, PP)
	      in  %% Line 943
		  apply 'f'/5
		      (_cor32, I, ST, WT, PP)
	  %% Line 944
	  <{'hook',HookExpr,Precedence,Func,Options},I,_X_ST,_X_WT,_X_PP> when 'true' ->
	      let <Chars> =
		  %% Line 945
		  apply Func
		      (HookExpr, I, Precedence, Options)
	      in  let <_cor34> =
		      %% Line 946
		      apply 'indentation'/2
			  (Chars, I)
		  in  %% Line 946
		      {Chars,_cor34}
	  %% Line 947
	  <{'ehook',HookExpr,Precedence,ModFuncEas = {Mod,Func,Eas}},I,_X_ST,_X_WT,_X_PP> when 'true' ->
	      let <Chars> =
		  %% Line 948
		  call 'erlang':'apply'
		      (Mod, Func, [HookExpr|[I|[Precedence|[ModFuncEas|Eas]]]])
	      in  let <_cor36> =
		      %% Line 949
		      apply 'indentation'/2
			  (Chars, I)
		  in  %% Line 949
		      {Chars,_cor36}
	  %% Line 950
	  <WordName,_X_I,_X_ST,WT,_X_PP> when 'true' ->
	      %% Line 951
	      apply 'word'/2
		  (WordName, WT)
	end
'fl'/7 =
    %% Line 957
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Sep,I0,After,ST,WT,PP> when 'true' ->
	      let <_cor7> =
		  %% Line 958
		  apply 'f'/5
		      (After, I0, ST, WT, PP)
	      in  %% Line 958
		  [[_cor7|[{[],0}]]|[]]
	  %% Line 959
	  <CItems,Sep0,I0,After,ST,WT,PP> when 'true' ->
	      let <F> =
		  %% Line 960
		  ( fun (_cor21,_cor20) ->
			case <_cor21,_cor20> of
			  <{'step',Item1,Item2},S> when 'true' ->
			      let <_cor8> =
				  %% Line 961
				  apply 'f'/5
				      (Item1, I0, ST, WT, PP)
			      in  let <_cor9> =
				      %% Line 962
				      apply 'incr'/2
					  (I0, 4)
				  in  let <_cor10> =
					  %% Line 962
					  apply 'f'/5
					      ([Item2|[S|[]]], _cor9, ST, WT, PP)
				      in  %% Line 961
					  [_cor8|%% Line 962
						 [_cor10|[]]]
			  %% Line 963
			  <{'cstep',Item1,Item2},S> when 'true' ->
			      %% Line 964
			      case apply 'f'/5
				       (Item1, I0, ST, WT, PP) of
				<CharSize1 = {_cor35,Sz1}> when 'true' ->
				    %% Line 965
				    case <> of
				      %% Line 966
				      <>
					  when let <_cor12> =
						call 'erlang':'is_integer'
						    (Sz1)
					    in  let <_cor13> =
						    call 'erlang':'<'
							(Sz1, 4)
						in  call 'erlang':'and'
							(_cor12, _cor13) ->
					  let <_cor14> =
					      %% Line 967
					      apply 'leaf'/1
						  ([32])
					  in  let <Item2p> =
						  %% Line 967
						  [_cor14|[Item2|[S|[]]]]
					      in  let <_cor16> =
						      %% Line 968
						      apply 'consecutive'/6
							  (Item2p, CharSize1, I0, ST, WT, PP)
						  in  %% Line 968
						      [_cor16|[{[],0}]]
				      %% Line 969
				      <> when 'true' ->
					  let <_cor17> =
					      %% Line 970
					      apply 'incr'/2
						  (I0, 4)
					  in  let <_cor18> =
						  %% Line 970
						  apply 'f'/5
						      ([Item2|[S|[]]], _cor17, ST, WT, PP)
					      in  %% Line 970
						  [CharSize1|[_cor18|[]]]
				    end
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor11})
				  -| ['compiler_generated'] )
			      end
			  %% Line 972
			  <Item,S> when 'true' ->
			      let <_cor19> =
				  %% Line 973
				  apply 'f'/5
				      ([Item|[S|[]]], I0, ST, WT, PP)
			      in  %% Line 973
				  [_cor19|[{[],0}]]
			end
		    -| [{'id',{0,0,'-fl/7-fun-0-'}}] )
	      in  let <_cor26> =
		      %% Line 975
		      case Sep0 of
			<{_cor36,_cor37}> when 'true' ->
			    Sep0
			<_cor38> when 'true' ->
			    {Sep0,Sep0}
		      end
		  in  %% Line 975
		      case _cor26 of
			<{Sep,LastSep}> when 'true' ->
			    %% Line 976
			    apply 'fl1'/5
				(CItems, F, Sep, LastSep, After)
			( <_cor27> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor27})
			  -| ['compiler_generated'] )
		      end
	end
'fl1'/5 =
    %% Line 978
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[CItem|[]],F,_X_Sep,_X_LastSep,After> when 'true' ->
	      let <_cor5> =
		  %% Line 979
		  apply F
		      (CItem, After)
	      in  %% Line 979
		  [_cor5|[]]
	  %% Line 980
	  <[CItem1|[CItem2|[]]],F,_X_Sep,LastSep,After> when 'true' ->
	      let <_cor6> =
		  %% Line 981
		  apply F
		      (CItem1, LastSep)
	      in  let <_cor7> =
		      %% Line 981
		      apply F
			  (CItem2, After)
		  in  %% Line 981
		      [_cor6|[_cor7|[]]]
	  %% Line 982
	  <[CItem|CItems],F,Sep,LastSep,After> when 'true' ->
	      let <_cor8> =
		  %% Line 983
		  apply F
		      (CItem, Sep)
	      in  let <_cor9> =
		      %% Line 983
		      apply 'fl1'/5
			  (CItems, F, Sep, LastSep, After)
		  in  %% Line 983
		      [_cor8|_cor9]
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'fl1',5}}] )
	    -| ['compiler_generated'] )
	end
'consecutive'/6 =
    %% Line 985
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 987
	    ( fun (_cor10,_cor9) ->
		  let <CharsSize> =
		      %% Line 988
		      apply 'f'/5
			  (_cor10, _cor9, _cor2, _cor1, _cor0)
		  in  let <_cor8> =
			  %% Line 989
			  apply 'indent'/2
			      (CharsSize, _cor9)
		      in  %% Line 989
			  {CharsSize,_cor8}
	      -| [{'id',{0,0,'-consecutive/6-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 990
		apply 'indent'/2
		    (_cor4, _cor3)
	    in  %% Line 986
		case %% Line 987
		     call 'lists':'mapfoldl'
			 (_cor13, _cor6, _cor5) of
		  <{CharsSizes,_X_Length}> when 'true' ->
		      %% Line 991
		      case apply 'unz1'/1
			       ([_cor4|CharsSizes]) of
			<{CharsL,SizeL}> when 'true' ->
			    let <_cor16> =
				%% Line 992
				apply 'line_size'/1
				    (SizeL)
			    in  %% Line 992
				{CharsL,_cor16}
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor15})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor14> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor14})
		    -| ['compiler_generated'] )
		end
'unz'/1 =
    %% Line 994
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 995
	    call 'lists':'append'
		(_cor0)
	in  %% Line 995
	    apply 'unz1'/1
		(_cor1)
'unz1'/1 =
    %% Line 997
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 998
	    apply 'nonzero'/1
		(_cor0)
	in  %% Line 998
	    call 'lists':'unzip'
		(_cor1)
'nonzero'/1 =
    %% Line 1000
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1001
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{_cor5,Sz}> when 'true' ->
			call 'erlang':'=/='
			    (Sz, 0)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-nonzero/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-nonzero/1-fun-0-'}}] )
	in  %% Line 1001
	    call 'lists':'filter'
		(_cor3, _cor0)
'insert_newlines'/3 =
    %% Line 1003
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <CharsSizesL,I,ST>
	      when call 'erlang':'>='
		    (I,
		     0) ->
	      let <_cor9> =
		  %% Line 1004
		  ( fun (_cor6,_cor5) ->
			case <_cor6,_cor5> of
			  <[{_X_C1,0}|[{_X_C2,0}|[]]],A> when 'true' ->
			      %% Line 1005
			      A
			  %% Line 1006
			  <[{C1,_X_Sz1}|[{_X_C2,0}|[]]],A> when 'true' ->
			      %% Line 1007
			      [C1|A]
			  %% Line 1008
			  <[{C1,_X_Sz1}|[{C2,Sz2}|[]]],A>
			      when call 'erlang':'>'
				    (Sz2,
				     0) ->
			      let <_cor3> =
				  %% Line 1009
				  call 'erlang':'+'
				      (I, 4)
			      in  let <_cor4> =
				      %% Line 1009
				      apply 'insert_nl'/3
					  ([C1|[C2|[]]], _cor3, ST)
				  in  %% Line 1009
				      [_cor4|A]
			  ( <_cor8,_cor7> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor8,_cor7})
				  -| [{'function_name',{'-insert_newlines/3-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-insert_newlines/3-fun-0-'}}] )
	      in  let <_cor10> =
		      %% Line 1004
		      call 'lists':'foldr'
			  (_cor9, %% Line 1010
				  [], %% Line 1010
				      CharsSizesL)
		  in  %% Line 1004
		      apply 'insert_nl'/3
			  (_cor10, %% Line 1010
				   I, %% Line 1010
				      ST)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'insert_newlines',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_nl'/3 =
    %% Line 1013
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1014
	    apply 'nl_indent'/2
		(_cor1, _cor0)
	in  %% Line 1014
	    apply 'insert_sep'/2
		(_cor2, _cor3)
'insert_sep'/2 =
    %% Line 1016
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Chars1|CharsL],Sep> when 'true' ->
	      let <_cor6> =
		  %% Line 1017
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Chars|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [[Sep|[Chars|[]]]|_cor5]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (CharsL)
		    -| ['list_comprehension'] )
	      in  %% Line 1017
		  [Chars1|_cor6]
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'insert_sep',2}}] )
	    -| ['compiler_generated'] )
	end
'nl_indent'/2 =
    %% Line 1019
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_X_T> when 'true' ->
	      %% Line 1020
	      10
	  %% Line 1021
	  <I,T>
	      when call 'erlang':'>'
		    (I,
		     0) ->
	      let <_cor2> =
		  %% Line 1022
		  apply 'spaces'/2
		      (I, T)
	      in  %% Line 1022
		  [10|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'nl_indent',2}}] )
	    -| ['compiler_generated'] )
	end
'same_line'/3 =
    %% Line 1024
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1025
	try
	    let <_cor3> =
		%% Line 1026
		call 'lists':'sum'
		    (_cor1)
	    in  let <Size> =
		    %% Line 1026
		    call 'erlang':'+'
			(_cor3, _cor0)
		in  let <_cor5> =
			%% Line 1027
			apply 'incr'/2
			    (_cor2, Size)
		    in  %% Line 1027
			case call 'erlang':'=<'
				 (_cor5, 72) of
			  <'true'> when 'true' ->
			      %% Line 1028
			      {'yes',Size}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
	of <_cor7> ->
	    _cor7
	catch <_cor10,_cor9,_cor8> ->
	    %% Line 1030
	    'no'
'line_size'/1 =
    %% Line 1033
    fun (_cor0) ->
	%% Line 1034
	apply 'line_size'/3
	    (_cor0, 0, 'false')
'line_size'/3 =
    %% Line 1036
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Size,'false'> when 'true' ->
	      %% Line 1037
	      Size
	  %% Line 1038
	  <[],Size,'true'> when 'true' ->
	      %% Line 1039
	      {'line',Size}
	  %% Line 1040
	  <[{'line',Len}|SizeL],_cor7,_cor8> when 'true' ->
	      %% Line 1041
	      apply 'line_size'/3
		  (SizeL, Len, 'true')
	  %% Line 1042
	  <[Sz|SizeL],SizeSoFar,LF> when 'true' ->
	      let <_cor3> =
		  %% Line 1043
		  call 'erlang':'+'
		      (SizeSoFar, Sz)
	      in  %% Line 1043
		  apply 'line_size'/3
		      (SizeL, _cor3, LF)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'line_size',3}}] )
	    -| ['compiler_generated'] )
	end
'nsz'/2 =
    %% Line 1045
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Sz = {'line',_X_Len},_X_I> when 'true' ->
	      %% Line 1046
	      Sz
	  %% Line 1047
	  <Size,I>
	      when call 'erlang':'>='
		    (I,
		     0) ->
	      let <_cor2> =
		  %% Line 1048
		  call 'erlang':'+'
		      (Size, I)
	      in  %% Line 1048
		  {'line',_cor2}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'nsz',2}}] )
	    -| ['compiler_generated'] )
	end
'indent'/2 =
    %% Line 1050
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_Chars,{'line',Len}},_X_I> when 'true' ->
	      %% Line 1051
	      Len
	  %% Line 1052
	  <{_X_Chars,Size},I> when 'true' ->
	      %% Line 1053
	      apply 'incr'/2
		  (I, Size)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'indent',2}}] )
	    -| ['compiler_generated'] )
	end
'incr'/2 =
    %% Line 1055
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,_X_Incr>
	      when call 'erlang':'<'
		    (I,
		     0) ->
	      %% Line 1056
	      I
	  %% Line 1057
	  <I,Incr> when 'true' ->
	      %% Line 1058
	      call 'erlang':'+'
		  (I, Incr)
	end
'indentation'/2 =
    %% Line 1060
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E,I>
	      when call 'erlang':'<'
		    (I,
		     0) ->
	      %% Line 1061
	      apply 'chars_size'/1
		  (E)
	  %% Line 1062
	  <E,I0> when 'true' ->
	      let <I> =
		  %% Line 1063
		  call 'io_lib_format':'indentation'
		      (E, I0)
	      in  %% Line 1064
		  case apply 'has_nl'/1
			   (E) of
		    %% Line 1065
		    <'true'> when 'true' ->
			{'line',I}
		    %% Line 1066
		    <'false'> when 'true' ->
			I
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	end
'has_nl'/1 =
    %% Line 1069
    fun (_cor0) ->
	case _cor0 of
	  <[10|_cor4]> when 'true' ->
	      %% Line 1070
	      'true'
	  %% Line 1071
	  <[C|Cs]>
	      when call 'erlang':'is_integer'
		    (C) ->
	      %% Line 1072
	      apply 'has_nl'/1
		  (Cs)
	  %% Line 1073
	  <[C|Cs]> when 'true' ->
	      %% Line 1074
	      ( case apply 'has_nl'/1
			 (C) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'has_nl'/1
			    (Cs)
		    -| ['compiler_generated'] )
		  ( <_cor1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1075
	  <[]> when 'true' ->
	      %% Line 1076
	      'false'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'has_nl',1}}] )
	    -| ['compiler_generated'] )
	end
'write_a_char'/2 =
    %% Line 1078
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1079
	    apply 'write_char'/2
		(_cor1, _cor0)
	in  %% Line 1079
	    apply 'flat_leaf'/1
		(_cor2)
'write_a_string'/3 =
    %% Line 1083
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,I,PP>
	      when let <_cor3> =
		    call 'erlang':'<'
			(I, 0)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (S, [])
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 1084
		  apply 'write_string'/2
		      (S, PP)
	      in  %% Line 1084
		  apply 'flat_leaf'/1
		      (_cor5)
	  %% Line 1085
	  <S,I,PP> when 'true' ->
	      let <_cor6> =
		  %% Line 1086
		  call 'erlang':'-'
		      (72, I)
	      in  let <Len> =
		      %% Line 1086
		      call 'erlang':'max'
			  (_cor6, 5)
		  in  let <_cor8> =
			  %% Line 1087
			  apply 'write_a_string'/4
			      (S, Len, Len, PP)
		      in  %% Line 1087
			  {'list',_cor8}
	end
'write_a_string'/4 =
    %% Line 1089
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_N,_X_Len,_X_PP> when 'true' ->
	      %% Line 1090
	      []
	  %% Line 1091
	  <S,N,Len,PP> when 'true' ->
	      let <SS> =
		  %% Line 1092
		  call 'string':'sub_string'
		      (S, 1, N)
	      in  let <Sl> =
		      %% Line 1093
		      apply 'write_string'/2
			  (SS, PP)
		  in  let <_cor7> =
			  %% Line 1094
			  call 'erlang':'length'
			      (Sl)
		      in  let <_cor8> =
			      %% Line 1094
			      call 'erlang':'>'
				  (_cor7, Len)
			  in  let <_cor6> =
				  %% Line 1094
				  call 'erlang':'>'
				      (N, 5)
			      in  %% Line 1094
				  case call 'erlang':'and'
					   (_cor8, _cor6) of
				    %% Line 1095
				    <'true'> when 'true' ->
					let <_cor9> =
					    %% Line 1096
					    call 'erlang':'-'
						(N, 1)
					in  %% Line 1096
					    apply 'write_a_string'/4
						(S, _cor9, Len, PP)
				    %% Line 1097
				    <'false'> when 'true' ->
					let <_cor10> =
					    %% Line 1098
					    apply 'flat_leaf'/1
						(Sl)
					in  let <_cor11> =
						%% Line 1099
						call 'erlang':'length'
						    (SS)
					    in  let <_cor12> =
						    %% Line 1099
						    call 'lists':'nthtail'
							(_cor11, S)
						in  let <_cor13> =
							%% Line 1099
							apply 'write_a_string'/4
							    (_cor12, Len, Len, PP)
						    in  %% Line 1098
							[_cor10|_cor13]
				  end
	end
'flat_leaf'/1 =
    %% Line 1102
    fun (_cor0) ->
	let <L> =
	    %% Line 1103
	    call 'lists':'flatten'
		(_cor0)
	in  let <_cor2> =
		%% Line 1104
		call 'erlang':'length'
		    (L)
	    in  %% Line 1104
		{'leaf',_cor2,L}
'write_string'/2 =
    %% Line 1106
    fun (_cor1,_cor0) ->
	%% Line 1107
	( case _cor0 of
	    ( <( {'pp',_rec1,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      apply _rec1
			  (_cor1)
		  in  call 'lists':'flatten'
			  (_cor4)
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','pp'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'write_char'/2 =
    %% Line 1109
    fun (_cor1,_cor0) ->
	%% Line 1110
	( case _cor0 of
	    ( <( {'pp',_cor7,_rec2}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      apply _rec2
			  (_cor1)
		  in  call 'lists':'flatten'
			  (_cor4)
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','pp'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'chars_size'/1 =
    %% Line 1116
    fun (_cor0) ->
	case _cor0 of
	  <[C|Es]>
	      when call 'erlang':'is_integer'
		    (C) ->
	      let <_cor1> =
		  %% Line 1117
		  apply 'chars_size'/1
		      (Es)
	      in  %% Line 1117
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 1118
	  <[E|Es]> when 'true' ->
	      let <_cor3> =
		  %% Line 1119
		  apply 'chars_size'/1
		      (E)
	      in  let <_cor2> =
		      %% Line 1119
		      apply 'chars_size'/1
			  (Es)
		  in  %% Line 1119
		      call 'erlang':'+'
			  (_cor3, _cor2)
	  %% Line 1120
	  <[]> when 'true' ->
	      %% Line 1121
	      0
	  %% Line 1122
	  <B>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 1123
	      call 'erlang':'byte_size'
		  (B)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'chars_size',1}}] )
	    -| ['compiler_generated'] )
	end
'spacetab'/0 =
    %% Line 1127
    fun () ->
	let <_cor5> =
	    %% Line 1128
	    ( fun (_cor2,_cor1) ->
		  {_cor1,[32|_cor1]}
	      -| [{'id',{0,0,'-spacetab/0-fun-0-'}}] )
	in  let <_cor0> =
		%% Line 1129
		call 'lists':'seq'
		    (0, 30)
	    in  %% Line 1128
		case call 'lists':'mapfoldl'
			 (_cor5, %% Line 1129
				 [], _cor0) of
		  <{[_cor8|L],_cor9}> when 'true' ->
		      %% Line 1130
		      call 'erlang':'list_to_tuple'
			  (L)
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor6})
		    -| ['compiler_generated'] )
		end
'spaces'/2 =
    %% Line 1132
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,T>
	      when call 'erlang':'=<'
		    (N,
		     30) ->
	      %% Line 1133
	      call 'erlang':'element'
		  (N, T)
	  %% Line 1134
	  <N,T> when 'true' ->
	      let <_cor2> =
		  %% Line 1135
		  call 'erlang':'element'
		      (30, T)
	      in  let <_cor3> =
		      %% Line 1135
		      call 'erlang':'-'
			  (N, 30)
		  in  let <_cor4> =
			  %% Line 1135
			  apply 'spaces'/2
			      (_cor3, T)
		      in  %% Line 1135
			  [_cor2|_cor4]
	end
'wordtable'/0 =
    %% Line 1137
    fun () ->
	let <_cor5> =
	    %% Line 1138
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor2) ->
			  case _cor2 of
			    <[%% Line 1139
			      W|_cor1]> when 'true' ->
				case apply 'leaf'/1
					 (W) of
				  <{'leaf',Sz,S}> when 'true' ->
				      let <_cor4> =
					  %% Line 1139
					  apply 'lc$^0'/1
					      (_cor1)
				      in  ( [{S,Sz}|_cor4]
					    -| ['compiler_generated'] )
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
			    <[]> when 'true' ->
				[]
			    ( <_cor2> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor2})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 1139
		       [[32|[45|[62]]]|[[32|[61]]|[[60|[60]]|[[62|[62]]|[[91|[93]]|[[97|[102|[116|[101|[114]]]]]|[[98|[101|[103|[105|[110]]]]]|[[99|[97|[115|[101]]]]|[[99|[97|[116|[99|[104]]]]]|[[101|[110|[100]]]|[[102|[117|[110]]]|[[105|[102]]|[[111|[102]]|[[114|[101|[99|[101|[105|[118|[101]]]]]]]|[[116|[114|[121]]]|[[119|[104|[101|[110]]]]|[[32|[58|[58]]]|[[46|[46]]|[[32|[124]]]]]]]]]]]]]]]]]]]]])
	      -| ['list_comprehension'] )
	in  %% Line 1142
	    call 'erlang':'list_to_tuple'
		(_cor5)
'word'/2 =
    %% Line 1144
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <' ->',WT> when 'true' ->
	      call 'erlang':'element'
		  (1, WT)
	  %% Line 1145
	  <' =',WT> when 'true' ->
	      call 'erlang':'element'
		  (2, WT)
	  %% Line 1146
	  <'<<',WT> when 'true' ->
	      call 'erlang':'element'
		  (3, WT)
	  %% Line 1147
	  <'>>',WT> when 'true' ->
	      call 'erlang':'element'
		  (4, WT)
	  %% Line 1148
	  <'[]',WT> when 'true' ->
	      call 'erlang':'element'
		  (5, WT)
	  %% Line 1149
	  <'after',WT> when 'true' ->
	      call 'erlang':'element'
		  (6, WT)
	  %% Line 1150
	  <'begin',WT> when 'true' ->
	      call 'erlang':'element'
		  (7, WT)
	  %% Line 1151
	  <'case',WT> when 'true' ->
	      call 'erlang':'element'
		  (8, WT)
	  %% Line 1152
	  <'catch',WT> when 'true' ->
	      call 'erlang':'element'
		  (9, WT)
	  %% Line 1153
	  <'end',WT> when 'true' ->
	      call 'erlang':'element'
		  (10, WT)
	  %% Line 1154
	  <'fun',WT> when 'true' ->
	      call 'erlang':'element'
		  (11, WT)
	  %% Line 1155
	  <'if',WT> when 'true' ->
	      call 'erlang':'element'
		  (12, WT)
	  %% Line 1156
	  <'of',WT> when 'true' ->
	      call 'erlang':'element'
		  (13, WT)
	  %% Line 1157
	  <'receive',WT> when 'true' ->
	      call 'erlang':'element'
		  (14, WT)
	  %% Line 1158
	  <'try',WT> when 'true' ->
	      call 'erlang':'element'
		  (15, WT)
	  %% Line 1159
	  <'when',WT> when 'true' ->
	      call 'erlang':'element'
		  (16, WT)
	  %% Line 1160
	  <' ::',WT> when 'true' ->
	      call 'erlang':'element'
		  (17, WT)
	  %% Line 1161
	  <'..',WT> when 'true' ->
	      call 'erlang':'element'
		  (18, WT)
	  %% Line 1162
	  <' |',WT> when 'true' ->
	      call 'erlang':'element'
		  (19, WT)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'word',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_pp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_pp', _cor0)
end