module 'erl_lint' ['bool_option'/4,
		   'exprs'/2,
		   'exprs_opt'/3,
		   'format_error'/1,
		   'is_guard_expr'/1,
		   'is_guard_test'/1,
		   'is_guard_test'/2,
		   'is_pattern_expr'/1,
		   'modify_line'/2,
		   'module'/1,
		   'module'/2,
		   'module'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'used_vars'/2,
		   'value_option'/3,
		   'value_option'/7]
    attributes [%% Line 43
		'spec' =
		    %% Line 43
		    [{{'bool_option',4},[{'type',43,'fun',[{'type',43,'product',[{'type',43,'atom',[]}|[{'type',43,'atom',[]}|[{'type',43,'boolean',[]}|[{'type',43,'list',[{'remote_type',43,[{'atom',43,'compile'}|[{'atom',43,'option'}|[[]]]]}]}]]]]}|[{'type',43,'boolean',[]}]]}]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'bt_endian',{'type',22,'union',[{'atom',22,'big'}|[{'atom',22,'little'}|[{'atom',22,'native'}]]]},[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{'bt_sign',{'type',23,'union',[{'atom',23,'signed'}|[{'atom',23,'unsigned'}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'bt_type',{'type',24,'union',[{'atom',24,'integer'}|[{'atom',24,'float'}|[{'atom',24,'binary'}|[{'atom',24,'utf8'}|[{'atom',24,'utf16'}|[{'atom',24,'utf32'}]]]]]]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'bt_unit',{'type',25,'range',[{'integer',25,1}|[{'integer',25,256}]]},[]}],
		%% Line 27
		'type' =
		    %% Line 27
		    [{{'record','bittype'},[{'typed_record_field',{'record_field',28,{'atom',28,'type'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'bt_type',[]}]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'unit'}},{'type',29,'union',[{'atom',29,'undefined'}|[{'type',29,'bt_unit',[]}]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'sign'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'bt_sign',[]}]]}}|[{'typed_record_field',{'record_field',31,{'atom',31,'endian'}},{'type',31,'union',[{'atom',31,'undefined'}|[{'type',31,'bt_endian',[]}]]}}]]]],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','bitdefault'},[{'record_field',35,{'atom',35,'integer'}}|[{'record_field',36,{'atom',36,'float'}}|[{'record_field',37,{'atom',37,'binary'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'line',{'remote_type',79,[{'atom',79,'erl_scan'}|[{'atom',79,'line'}|[[]]]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'fa',{'type',80,'tuple',[{'type',80,'atom',[]}|[{'type',80,'arity',[]}]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'ta',{'type',81,'tuple',[{'type',81,'atom',[]}|[{'type',81,'arity',[]}]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','typeinfo'},[{'record_field',83,{'atom',83,'attr'}}|[{'record_field',83,{'atom',83,'line'}}]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','usage'},[{'record_field',88,{'atom',88,'calls'},{'call',88,{'remote',88,{'atom',88,'dict'},{'atom',88,'new'}},[]}}|[{'record_field',89,{'atom',89,'imported'},{'nil',89}}|[{'typed_record_field',{'record_field',90,{'atom',90,'used_records'},{'call',90,{'remote',90,{'atom',90,'sets'},{'atom',90,'new'}},[]}},{'remote_type',91,[{'atom',91,'sets'}|[{'atom',91,'set'}|[[{'type',91,'atom',[]}]]]]}}|[{'typed_record_field',{'record_field',92,{'atom',92,'used_types'},{'call',92,{'remote',92,{'atom',92,'dict'},{'atom',92,'new'}},[]}},{'remote_type',93,[{'atom',93,'dict'}|[{'atom',93,'dict'}|[[{'type',93,'ta',[]}|[{'type',93,'line',[]}]]]]]}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','lint'},[{'typed_record_field',{'record_field',99,{'atom',99,'state'},{'atom',99,'start'}},{'type',99,'union',[{'atom',99,'start'}|[{'atom',99,'attribute'}|[{'atom',99,'function'}]]]}}|[{'record_field',100,{'atom',100,'module'},{'nil',100}}|[{'record_field',101,{'atom',101,'behaviour'},{'nil',101}}|[{'typed_record_field',{'record_field',102,{'atom',102,'exports'},{'call',102,{'remote',102,{'atom',102,'gb_sets'},{'atom',102,'empty'}},[]}},{'remote_type',102,[{'atom',102,'gb_sets'}|[{'atom',102,'set'}|[[{'type',102,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'imports'},{'nil',103}},{'type',103,'list',[{'type',103,'fa',[]}]}}|[{'record_field',104,{'atom',104,'compile'},{'nil',104}}|[{'typed_record_field',{'record_field',105,{'atom',105,'records'},{'call',105,{'remote',105,{'atom',105,'dict'},{'atom',105,'new'}},[]}},{'remote_type',106,[{'atom',106,'dict'}|[{'atom',106,'dict'}|[[{'type',106,'atom',[]}|[{'type',106,'tuple',[{'type',106,'line',[]}|[{'ann_type',106,[{'var',106,'Fields'}|[{'type',106,'term',[]}]]}]]}]]]]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'locals'},{'call',107,{'remote',107,{'atom',107,'gb_sets'},{'atom',107,'empty'}},[]}},{'remote_type',108,[{'atom',108,'gb_sets'}|[{'atom',108,'set'}|[[{'type',108,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'no_auto'},{'call',109,{'remote',109,{'atom',109,'gb_sets'},{'atom',109,'empty'}},[]}},{'type',110,'union',[{'remote_type',110,[{'atom',110,'gb_sets'}|[{'atom',110,'set'}|[[{'type',110,'fa',[]}]]]]}|[{'atom',110,'all'}]]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'defined'},{'call',111,{'remote',111,{'atom',111,'gb_sets'},{'atom',111,'empty'}},[]}},{'remote_type',112,[{'atom',112,'gb_sets'}|[{'atom',112,'set'}|[[{'type',112,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'on_load'},{'nil',113}},{'type',113,'list',[{'type',113,'fa',[]}]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'on_load_line'},{'integer',114,0}},{'type',114,'line',[]}}|[{'record_field',115,{'atom',115,'clashes'},{'nil',115}}|[{'record_field',116,{'atom',116,'not_deprecated'},{'nil',116}}|[{'record_field',117,{'atom',117,'func'},{'nil',117}}|[{'record_field',118,{'atom',118,'warn_format'},{'integer',118,0}}|[{'record_field',119,{'atom',119,'enabled_warnings'},{'nil',119}}|[{'record_field',120,{'atom',120,'errors'},{'nil',120}}|[{'record_field',121,{'atom',121,'warnings'},{'nil',121}}|[{'typed_record_field',{'record_field',122,{'atom',122,'file'},{'string',122,[]}},{'type',122,'string',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'recdef_top'},{'atom',123,'false'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'xqlc'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'new'},{'atom',126,'false'}},{'type',126,'boolean',[]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'called'},{'nil',127}},{'type',127,'list',[{'type',127,'tuple',[{'type',127,'fa',[]}|[{'type',127,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'usage'},{'record',128,'usage',[]}},{'type',128,'record',[{'atom',128,'usage'}]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'specs'},{'call',129,{'remote',129,{'atom',129,'dict'},{'atom',129,'new'}},[]}},{'remote_type',130,[{'atom',130,'dict'}|[{'atom',130,'dict'}|[[{'type',130,'mfa',[]}|[{'type',130,'line',[]}]]]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'callbacks'},{'call',131,{'remote',131,{'atom',131,'dict'},{'atom',131,'new'}},[]}},{'remote_type',132,[{'atom',132,'dict'}|[{'atom',132,'dict'}|[[{'type',132,'mfa',[]}|[{'type',132,'line',[]}]]]]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'types'},{'call',133,{'remote',133,{'atom',133,'dict'},{'atom',133,'new'}},[]}},{'remote_type',134,[{'atom',134,'dict'}|[{'atom',134,'dict'}|[[{'type',134,'ta',[]}|[{'type',134,'record',[{'atom',134,'typeinfo'}]}]]]]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'exp_types'},{'call',135,{'remote',135,{'atom',135,'gb_sets'},{'atom',135,'empty'}},[]}},{'remote_type',136,[{'atom',136,'gb_sets'}|[{'atom',136,'set'}|[[{'type',136,'ta',[]}]]]]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'lint_state',{'type',139,'record',[{'atom',139,'lint'}]},[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{'error_description',{'type',140,'term',[]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{'error_info',{'type',141,'tuple',[{'remote_type',141,[{'atom',141,'erl_scan'}|[{'atom',141,'line'}|[[]]]]}|[{'type',141,'module',[]}|[{'type',141,'error_description',[]}]]]},[]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'format_error',1},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'ErrorDescriptor'}]}|[{'remote_type',146,[{'atom',146,'io_lib'}|[{'atom',146,'chars'}|[[]]]]}]]}|[[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'ErrorDescriptor'}|[{'type',147,'error_description',[]}]]]]}]]]}]}],
		%% Line 451
		'spec' =
		    %% Line 451
		    [{{'module',1},[{'type',451,'bounded_fun',[{'type',451,'fun',[{'type',451,'product',[{'var',451,'AbsForms'}]}|[{'type',451,'union',[{'type',451,'tuple',[{'atom',451,'ok'}|[{'var',451,'Warnings'}]]}|[{'type',451,'tuple',[{'atom',451,'error'}|[{'var',451,'Errors'}|[{'var',451,'Warnings'}]]]}]]}]]}|[[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'AbsForms'}|[{'type',452,'list',[{'remote_type',452,[{'atom',452,'erl_parse'}|[{'atom',452,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',453,'constraint',[{'atom',453,'is_subtype'}|[[{'var',453,'Warnings'}|[{'type',453,'list',[{'type',453,'tuple',[{'remote_type',453,[{'atom',453,'file'}|[{'atom',453,'filename'}|[[]]]]}|[{'type',453,'list',[{'var',453,'ErrorInfo'}]}]]}]}]]]]}|[{'type',454,'constraint',[{'atom',454,'is_subtype'}|[[{'var',454,'Errors'}|[{'type',454,'list',[{'type',454,'tuple',[{'ann_type',454,[{'var',454,'FileName2'}|[{'remote_type',454,[{'atom',454,'file'}|[{'atom',454,'filename'}|[[]]]]}]]}|[{'type',454,'list',[{'var',454,'ErrorInfo'}]}]]}]}]]]]}|[{'type',455,'constraint',[{'atom',455,'is_subtype'}|[[{'var',455,'ErrorInfo'}|[{'type',455,'error_info',[]}]]]]}]]]]]]}]}],
		%% Line 462
		'spec' =
		    %% Line 462
		    [{{'module',2},[{'type',462,'bounded_fun',[{'type',462,'fun',[{'type',462,'product',[{'var',462,'AbsForms'}|[{'var',462,'FileName'}]]}|[{'type',463,'union',[{'type',463,'tuple',[{'atom',463,'ok'}|[{'var',463,'Warnings'}]]}|[{'type',463,'tuple',[{'atom',463,'error'}|[{'var',463,'Errors'}|[{'var',463,'Warnings'}]]]}]]}]]}|[[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'AbsForms'}|[{'type',464,'list',[{'remote_type',464,[{'atom',464,'erl_parse'}|[{'atom',464,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'FileName'}|[{'type',465,'union',[{'type',465,'atom',[]}|[{'type',465,'string',[]}]]}]]]]}|[{'type',466,'constraint',[{'atom',466,'is_subtype'}|[[{'var',466,'Warnings'}|[{'type',466,'list',[{'type',466,'tuple',[{'remote_type',466,[{'atom',466,'file'}|[{'atom',466,'filename'}|[[]]]]}|[{'type',466,'list',[{'var',466,'ErrorInfo'}]}]]}]}]]]]}|[{'type',467,'constraint',[{'atom',467,'is_subtype'}|[[{'var',467,'Errors'}|[{'type',467,'list',[{'type',467,'tuple',[{'ann_type',467,[{'var',467,'FileName2'}|[{'remote_type',467,[{'atom',467,'file'}|[{'atom',467,'filename'}|[[]]]]}]]}|[{'type',467,'list',[{'var',467,'ErrorInfo'}]}]]}]}]]]]}|[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'ErrorInfo'}|[{'type',468,'error_info',[]}]]]]}]]]]]]]}]}],
		%% Line 475
		'spec' =
		    %% Line 475
		    [{{'module',3},[{'type',475,'bounded_fun',[{'type',475,'fun',[{'type',475,'product',[{'var',475,'AbsForms'}|[{'var',475,'FileName'}|[{'var',475,'CompileOptions'}]]]}|[{'type',476,'union',[{'type',476,'tuple',[{'atom',476,'ok'}|[{'var',476,'Warnings'}]]}|[{'type',476,'tuple',[{'atom',476,'error'}|[{'var',476,'Errors'}|[{'var',476,'Warnings'}]]]}]]}]]}|[[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'AbsForms'}|[{'type',477,'list',[{'remote_type',477,[{'atom',477,'erl_parse'}|[{'atom',477,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'FileName'}|[{'type',478,'union',[{'type',478,'atom',[]}|[{'type',478,'string',[]}]]}]]]]}|[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'CompileOptions'}|[{'type',479,'list',[{'remote_type',479,[{'atom',479,'compile'}|[{'atom',479,'option'}|[[]]]]}]}]]]]}|[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'Warnings'}|[{'type',480,'list',[{'type',480,'tuple',[{'remote_type',480,[{'atom',480,'file'}|[{'atom',480,'filename'}|[[]]]]}|[{'type',480,'list',[{'var',480,'ErrorInfo'}]}]]}]}]]]]}|[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Errors'}|[{'type',481,'list',[{'type',481,'tuple',[{'ann_type',481,[{'var',481,'FileName2'}|[{'remote_type',481,[{'atom',481,'file'}|[{'atom',481,'filename'}|[[]]]]}]]}|[{'type',481,'list',[{'var',481,'ErrorInfo'}]}]]}]}]]]]}|[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'ErrorInfo'}|[{'type',482,'error_info',[]}]]]]}]]]]]]]]}]}],
		%% Line 1149
		'spec' =
		    %% Line 1149
		    [{{'export',3},[{'type',1149,'fun',[{'type',1149,'product',[{'type',1149,'line',[]}|[{'type',1149,'list',[{'type',1149,'fa',[]}]}|[{'type',1149,'lint_state',[]}]]]}|[{'type',1149,'lint_state',[]}]]}]}],
		%% Line 1167
		'spec' =
		    %% Line 1167
		    [{{'export_type',3},[{'type',1167,'fun',[{'type',1167,'product',[{'type',1167,'line',[]}|[{'type',1167,'list',[{'type',1167,'ta',[]}]}|[{'type',1167,'lint_state',[]}]]]}|[{'type',1167,'lint_state',[]}]]}]}],
		%% Line 1190
		'spec' =
		    %% Line 1190
		    [{{'exports',1},[{'type',1190,'fun',[{'type',1190,'product',[{'type',1190,'lint_state',[]}]}|[{'remote_type',1190,[{'atom',1190,'gb_sets'}|[{'atom',1190,'set'}|[[{'type',1190,'fa',[]}]]]]}]]}]}],
		%% Line 1198
		'type' =
		    %% Line 1198
		    [{'import',{'type',1198,'union',[{'type',1198,'tuple',[{'type',1198,'module',[]}|[{'type',1198,'list',[{'type',1198,'fa',[]}]}]]}|[{'type',1198,'module',[]}]]},[]}],
		%% Line 1199
		'spec' =
		    %% Line 1199
		    [{{'import',3},[{'type',1199,'fun',[{'type',1199,'product',[{'type',1199,'line',[]}|[{'type',1199,'import',[]}|[{'type',1199,'lint_state',[]}]]]}|[{'type',1199,'lint_state',[]}]]}]}],
		%% Line 1261
		'spec' =
		    %% Line 1261
		    [{{'imported',3},[{'type',1261,'fun',[{'type',1261,'product',[{'type',1261,'atom',[]}|[{'type',1261,'arity',[]}|[{'type',1261,'lint_state',[]}]]]}|[{'type',1261,'union',[{'type',1261,'tuple',[{'atom',1261,'yes'}|[{'type',1261,'module',[]}]]}|[{'atom',1261,'no'}]]}]]}]}],
		%% Line 1269
		'spec' =
		    %% Line 1269
		    [{{'on_load',3},[{'type',1269,'fun',[{'type',1269,'product',[{'type',1269,'line',[]}|[{'type',1269,'fa',[]}|[{'type',1269,'lint_state',[]}]]]}|[{'type',1269,'lint_state',[]}]]}]}],
		%% Line 1301
		'spec' =
		    %% Line 1301
		    [{{'call_function',4},[{'type',1301,'fun',[{'type',1301,'product',[{'type',1301,'line',[]}|[{'type',1301,'atom',[]}|[{'type',1301,'arity',[]}|[{'type',1301,'lint_state',[]}]]]]}|[{'type',1301,'lint_state',[]}]]}]}],
		%% Line 1319
		'spec' =
		    %% Line 1319
		    [{{'define_function',4},[{'type',1319,'fun',[{'type',1319,'product',[{'type',1319,'line',[]}|[{'type',1319,'atom',[]}|[{'type',1319,'arity',[]}|[{'type',1319,'lint_state',[]}]]]]}|[{'type',1319,'lint_state',[]}]]}]}],
		%% Line 1912
		'spec' =
		    %% Line 1912
		    [{{'is_guard_test',1},[{'type',1912,'bounded_fun',[{'type',1912,'fun',[{'type',1912,'product',[{'var',1912,'Expr'}]}|[{'type',1912,'boolean',[]}]]}|[[{'type',1913,'constraint',[{'atom',1913,'is_subtype'}|[[{'var',1913,'Expr'}|[{'remote_type',1913,[{'atom',1913,'erl_parse'}|[{'atom',1913,'abstract_expr'}|[[]]]]}]]]]}]]]}]}]]
'bool_option'/4 =
    %% Line 45
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 46
	    ( fun (_cor5,_cor4) ->
		  case <_cor5,_cor4> of
		    <Opt,_X_Def>
			when call 'erlang':'=:='
			      (Opt,
			       _cor3) ->
			'true'
		    %% Line 47
		    <Opt,_X_Def>
			when call 'erlang':'=:='
			      (Opt,
			       _cor2) ->
			'false'
		    %% Line 48
		    <_X_Opt,Def> when 'true' ->
			Def
		  end
	      -| [{'id',{0,0,'-bool_option/4-fun-0-'}}] )
	in  %% Line 46
	    call 'lists':'foldl'
		(_cor8, _cor1, _cor0)
'value_option'/3 =
    %% Line 51
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 52
	    ( fun (_cor4,_cor3) ->
		  case <_cor4,_cor3> of
		    <{Opt,Val},_X_Def>
			when call 'erlang':'=:='
			      (Opt,
			       _cor2) ->
			Val
		    %% Line 53
		    <_X_Opt,Def> when 'true' ->
			Def
		  end
	      -| [{'id',{0,0,'-value_option/3-fun-0-'}}] )
	in  %% Line 52
	    call 'lists':'foldl'
		(_cor7, _cor1, _cor0)
'value_option'/7 =
    %% Line 56
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 57
	    ( fun (_cor8,_cor7) ->
		  case <_cor8,_cor7> of
		    <{Opt,Val},_X_Def>
			when call 'erlang':'=:='
			      (Opt,
			       _cor6) ->
			Val
		    %% Line 58
		    <Opt,_X_Def>
			when call 'erlang':'=:='
			      (Opt,
			       _cor4) ->
			_cor3
		    %% Line 59
		    <Opt,_X_Def>
			when call 'erlang':'=:='
			      (Opt,
			       _cor2) ->
			_cor1
		    %% Line 60
		    <_X_Opt,Def> when 'true' ->
			Def
		  end
	      -| [{'id',{0,0,'-value_option/7-fun-0-'}}] )
	in  %% Line 57
	    call 'lists':'foldl'
		(_cor11, _cor5, _cor0)
'format_error'/1 =
    %% Line 149
    fun (_cor0) ->
	case _cor0 of
	  <'undefined_module'> when 'true' ->
	      %% Line 150
	      [110|[111|[32|[109|[111|[100|[117|[108|[101|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]
	  %% Line 151
	  <'redefine_module'> when 'true' ->
	      %% Line 152
	      [114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101]]]]]]]]]]]]]]]]]
	  %% Line 153
	  <'pmod_unsupported'> when 'true' ->
	      %% Line 154
	      [112|[97|[114|[97|[109|[101|[116|[101|[114|[105|[122|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[32|[97|[114|[101|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 158
	  <'invalid_call'> when 'true' ->
	      %% Line 159
	      [105|[110|[118|[97|[108|[105|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]
	  %% Line 160
	  <'invalid_record'> when 'true' ->
	      %% Line 161
	      [105|[110|[118|[97|[108|[105|[100|[32|[114|[101|[99|[111|[114|[100|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 163
	  <{'attribute',A}> when 'true' ->
	      %% Line 164
	      call 'io_lib':'format'
		  ([97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[39|[126|[119|[39|[32|[97|[102|[116|[101|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 165
	  <{'missing_qlc_hrl',A}> when 'true' ->
	      %% Line 166
	      call 'io_lib':'format'
		  ([113|[108|[99|[58|[113|[47|[126|[119|[32|[99|[97|[108|[108|[101|[100|[44|[32|[98|[117|[116|[32|[34|[113|[108|[99|[46|[104|[114|[108|[34|[32|[110|[111|[116|[32|[105|[110|[99|[108|[117|[100|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 167
	  <{'redefine_import',{{F,A},M}}> when 'true' ->
	      %% Line 168
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[M|[]]]])
	  %% Line 169
	  <{'bad_inline',{F,A}}> when 'true' ->
	      %% Line 170
	      call 'io_lib':'format'
		  ([105|[110|[108|[105|[110|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 171
	  <{'invalid_deprecated',D}> when 'true' ->
	      %% Line 172
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [D|[]])
	  %% Line 173
	  <{'bad_deprecated',{F,A}}> when 'true' ->
	      %% Line 174
	      call 'io_lib':'format'
		  ([100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[111|[114|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 175
	  <{'bad_nowarn_unused_function',{F,A}}> when 'true' ->
	      %% Line 176
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 177
	  <{'bad_nowarn_bif_clash',{F,A}}> when 'true' ->
	      %% Line 178
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 179
	  <'disallowed_nowarn_bif_clash'> when 'true' ->
	      %% Line 180
	      call 'io_lib':'format'
		  ([99|[111|[109|[112|[105|[108|[101|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[110|[111|[119|[97|[114|[110|[95|[98|[105|[102|[95|[99|[108|[97|[115|[104|[32|[105|[115|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[97|[108|[108|[111|[119|[101|[100|[44|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[120|[112|[108|[105|[99|[105|[116|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[115|[32|[111|[114|[32|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[32|[91|[70|[47|[65|[93|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 181
																																																																																									      [])
	  %% Line 182
	  <{'bad_nowarn_deprecated_function',{M,F,A}}> when 'true' ->
	      %% Line 183
	      call 'io_lib':'format'
		  ([126|[119|[58|[126|[119|[47|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 184
	  <{'bad_on_load',Term}> when 'true' ->
	      %% Line 185
	      call 'io_lib':'format'
		  ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[111|[110|[95|[108|[111|[97|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Term|[]])
	  %% Line 186
	  <'multiple_on_loads'> when 'true' ->
	      %% Line 187
	      [109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[101|[32|[111|[110|[95|[108|[111|[97|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 188
	  <{'bad_on_load_arity',{F,A}}> when 'true' ->
	      %% Line 189
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[104|[97|[115|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121|[32|[40|[109|[117|[115|[116|[32|[98|[101|[32|[48|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 190
	  <{'undefined_on_load',{F,A}}> when 'true' ->
	      %% Line 191
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 193
	  <'export_all'> when 'true' ->
	      %% Line 194
	      [101|[120|[112|[111|[114|[116|[95|[97|[108|[108|[32|[102|[108|[97|[103|[32|[101|[110|[97|[98|[108|[101|[100|[32|[45|[32|[97|[108|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[119|[105|[108|[108|[32|[98|[101|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 195
	  <{'duplicated_export',{F,A}}> when 'true' ->
	      %% Line 196
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 197
	  <{'unused_import',{{F,A},M}}> when 'true' ->
	      %% Line 198
	      call 'io_lib':'format'
		  ([105|[109|[112|[111|[114|[116|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 199
	  <{'undefined_function',{F,A}}> when 'true' ->
	      %% Line 200
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 201
	  <{'redefine_function',{F,A}}> when 'true' ->
	      %% Line 202
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 203
	  <{'define_import',{F,A}}> when 'true' ->
	      %% Line 204
	      call 'io_lib':'format'
		  ([100|[101|[102|[105|[110|[105|[110|[103|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 205
	  <{'unused_function',{F,A}}> when 'true' ->
	      %% Line 206
	      call 'io_lib':'format'
		  ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 207
	  <{'call_to_redefined_bif',{F,A}}> when 'true' ->
	      %% Line 208
	      call 'io_lib':'format'
		  ([97|[109|[98|[105|[103|[117|[111|[117|[115|[32|[99|[97|[108|[108|[32|[111|[102|[32|[111|[118|[101|[114|[114|[105|[100|[100|[101|[110|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[114|[108|[97|[110|[103|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 210
																																																																																																		      [F|[A|[F|[A|[F|[A|[]]]]]]])
	  %% Line 211
	  <{'call_to_redefined_old_bif',{F,A}}> when 'true' ->
	      %% Line 212
	      call 'io_lib':'format'
		  ([97|[109|[98|[105|[103|[117|[111|[117|[115|[32|[99|[97|[108|[108|[32|[111|[102|[32|[111|[118|[101|[114|[114|[105|[100|[100|[101|[110|[32|[112|[114|[101|[32|[82|[49|[52|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[114|[108|[97|[110|[103|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 214
																																																																																																								 [F|[A|[F|[A|[F|[A|[]]]]]]])
	  %% Line 215
	  <{'redefine_old_bif_import',{F,A}}> when 'true' ->
	      %% Line 216
	      call 'io_lib':'format'
		  ([105|[109|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[111|[118|[101|[114|[114|[105|[100|[101|[115|[32|[112|[114|[101|[32|[82|[49|[52|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 218
																																																																																											      [F|[A|[F|[A|[]]]]])
	  %% Line 219
	  <{'redefine_bif_import',{F,A}}> when 'true' ->
	      %% Line 220
	      call 'io_lib':'format'
		  ([105|[109|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[111|[118|[101|[114|[114|[105|[100|[101|[115|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 221
																																																																																						   [F|[A|[F|[A|[]]]]])
	  %% Line 223
	  <{'deprecated',MFA,ReplacementMFA,Rel}> when 'true' ->
	      let <_cor1> =
		  %% Line 225
		  apply 'format_mfa'/1
		      (MFA)
	      in  let <_cor2> =
		      %% Line 225
		      apply 'format_mfa'/1
			  (ReplacementMFA)
		  in  %% Line 224
		      call 'io_lib':'format'
			  ([126|[115|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[110|[100|[32|[119|[105|[108|[108|[32|[98|[101|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 225
																																							 [_cor1|[Rel|[_cor2|[]]]])
	  %% Line 226
	  <{'deprecated',{M1,F1,A1},String}>
	      when call 'erlang':'is_list'
		    (String) ->
	      %% Line 227
	      call 'io_lib':'format'
		  ([126|[112|[58|[126|[112|[47|[126|[112|[58|[32|[126|[115]]]]]]]]]]]], [M1|[F1|[A1|[String|[]]]]])
	  %% Line 228
	  <{'removed',MFA,ReplacementMFA,Rel}> when 'true' ->
	      let <_cor3> =
		  %% Line 230
		  apply 'format_mfa'/1
		      (MFA)
	      in  let <_cor4> =
		      %% Line 230
		      apply 'format_mfa'/1
			  (ReplacementMFA)
		  in  %% Line 229
		      call 'io_lib':'format'
			  ([99|[97|[108|[108|[32|[116|[111|[32|[126|[115|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[44|[32|[115|[105|[110|[99|[101|[32|[105|[116|[32|[119|[97|[115|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 230
																																											 [_cor3|[Rel|[_cor4|[]]]])
	  %% Line 231
	  <{'removed',MFA,String}>
	      when call 'erlang':'is_list'
		    (String) ->
	      let <_cor5> =
		  %% Line 232
		  apply 'format_mfa'/1
		      (MFA)
	      in  %% Line 232
		  call 'io_lib':'format'
		      ([126|[115|[58|[32|[126|[115]]]]]], [_cor5|[String|[]]])
	  %% Line 233
	  <{'obsolete_guard',{F,A}}> when 'true' ->
	      %% Line 234
	      call 'io_lib':'format'
		  ([126|[112|[47|[126|[112|[32|[111|[98|[115|[111|[108|[101|[116|[101]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 235
	  <{'too_many_arguments',Arity}> when 'true' ->
	      %% Line 236
	      call 'io_lib':'format'
		  ([116|[111|[111|[32|[109|[97|[110|[121|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[40|[126|[119|[41|[32|[45|[32|[109|[97|[120|[105|[109|[117|[109|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[115|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 237
																																			       [Arity|[255]])
	  %% Line 239
	  <'illegal_pattern'> when 'true' ->
	      [105|[108|[108|[101|[103|[97|[108|[32|[112|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]
	  %% Line 240
	  <'illegal_map_key'> when 'true' ->
	      %% Line 241
	      [105|[108|[108|[101|[103|[97|[108|[32|[109|[97|[112|[32|[107|[101|[121]]]]]]]]]]]]]]]
	  %% Line 242
	  <{'illegal_map_key_variable',K}> when 'true' ->
	      %% Line 243
	      call 'io_lib':'format'
		  ([105|[108|[108|[101|[103|[97|[108|[32|[117|[115|[101|[32|[111|[102|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[110|[32|[109|[97|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [K|[]])
	  %% Line 244
	  <'illegal_bin_pattern'> when 'true' ->
	      %% Line 245
	      [98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110|[115|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[109|[97|[116|[99|[104|[101|[100|[32|[105|[110|[32|[112|[97|[114|[97|[108|[108|[101|[108|[32|[117|[115|[105|[110|[103|[32|[39|[61|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 246
	  <'illegal_expr'> when 'true' ->
	      [105|[108|[108|[101|[103|[97|[108|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]
	  %% Line 247
	  <{'illegal_guard_local_call',{F,A}}> when 'true' ->
	      %% Line 248
	      call 'io_lib':'format'
		  ([99|[97|[108|[108|[32|[116|[111|[32|[108|[111|[99|[97|[108|[47|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[105|[110|[32|[103|[117|[97|[114|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 249
																																											 [F|[A|[]]])
	  %% Line 250
	  <'illegal_guard_expr'> when 'true' ->
	      [105|[108|[108|[101|[103|[97|[108|[32|[103|[117|[97|[114|[100|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 252
	  <'illegal_map_construction'> when 'true' ->
	      %% Line 253
	      [111|[110|[108|[121|[32|[97|[115|[115|[111|[99|[105|[97|[116|[105|[111|[110|[32|[111|[112|[101|[114|[97|[116|[111|[114|[115|[32|[39|[61|[62|[39|[32|[97|[114|[101|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[109|[97|[112|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 255
	  <{'undefined_record',T}> when 'true' ->
	      %% Line 256
	      call 'io_lib':'format'
		  ([114|[101|[99|[111|[114|[100|[32|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 257
	  <{'redefine_record',T}> when 'true' ->
	      %% Line 258
	      call 'io_lib':'format'
		  ([114|[101|[99|[111|[114|[100|[32|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 259
	  <{'redefine_field',T,F}> when 'true' ->
	      %% Line 260
	      call 'io_lib':'format'
		  ([102|[105|[101|[108|[100|[32|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[T|[]]])
	  %% Line 261
	  <{'undefined_field',T,F}> when 'true' ->
	      %% Line 262
	      call 'io_lib':'format'
		  ([102|[105|[101|[108|[100|[32|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[T|[]]])
	  %% Line 263
	  <'illegal_record_info'> when 'true' ->
	      %% Line 264
	      [105|[108|[108|[101|[103|[97|[108|[32|[114|[101|[99|[111|[114|[100|[32|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]]
	  %% Line 265
	  <{'field_name_is_variable',T,F}> when 'true' ->
	      %% Line 266
	      call 'io_lib':'format'
		  ([102|[105|[101|[108|[100|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[97|[116|[111|[109|[32|[111|[114|[32|[95|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[T|[]]])
	  %% Line 267
	  <{'wildcard_in_update',T}> when 'true' ->
	      %% Line 268
	      call 'io_lib':'format'
		  ([109|[101|[97|[110|[105|[110|[103|[108|[101|[115|[115|[32|[117|[115|[101|[32|[111|[102|[32|[95|[32|[105|[110|[32|[117|[112|[100|[97|[116|[101|[32|[111|[102|[32|[114|[101|[99|[111|[114|[100|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 269
	  <{'unused_record',T}> when 'true' ->
	      %% Line 270
	      call 'io_lib':'format'
		  ([114|[101|[99|[111|[114|[100|[32|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 271
	  <{'untyped_record',T}> when 'true' ->
	      %% Line 272
	      call 'io_lib':'format'
		  ([114|[101|[99|[111|[114|[100|[32|[126|[119|[32|[104|[97|[115|[32|[102|[105|[101|[108|[100|[40|[115|[41|[32|[119|[105|[116|[104|[111|[117|[116|[32|[116|[121|[112|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [T|[]])
	  %% Line 274
	  <{'unbound_var',V}> when 'true' ->
	      %% Line 275
	      call 'io_lib':'format'
		  ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]], [V|[]])
	  %% Line 276
	  <{'unsafe_var',V,{What,Where}}> when 'true' ->
	      let <_cor6> =
		  %% Line 278
		  apply 'format_where'/1
		      (Where)
	      in  %% Line 277
		  call 'io_lib':'format'
		      ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[117|[110|[115|[97|[102|[101|[32|[105|[110|[32|[126|[119|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 278
																						 [V|[What|[_cor6|[]]]])
	  %% Line 279
	  <{'exported_var',V,{What,Where}}> when 'true' ->
	      let <_cor7> =
		  %% Line 281
		  apply 'format_where'/1
		      (Where)
	      in  %% Line 280
		  call 'io_lib':'format'
		      ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[101|[120|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[126|[119|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 281
																									  [V|[What|[_cor7|[]]]])
	  %% Line 282
	  <{'shadowed_var',V,In}> when 'true' ->
	      %% Line 283
	      call 'io_lib':'format'
		  ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[115|[104|[97|[100|[111|[119|[101|[100|[32|[105|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]], [V|[In|[]]])
	  %% Line 284
	  <{'unused_var',V}> when 'true' ->
	      %% Line 285
	      call 'io_lib':'format'
		  ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]], [V|[]])
	  %% Line 286
	  <{'variable_in_record_def',V}> when 'true' ->
	      %% Line 287
	      call 'io_lib':'format'
		  ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [V|[]])
	  %% Line 289
	  <{'undefined_bittype',Type}> when 'true' ->
	      %% Line 290
	      call 'io_lib':'format'
		  ([98|[105|[116|[32|[116|[121|[112|[101|[32|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]], [Type|[]])
	  %% Line 291
	  <'bittype_unit'> when 'true' ->
	      %% Line 292
	      [97|[32|[98|[105|[116|[32|[117|[110|[105|[116|[32|[115|[105|[122|[101|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[117|[110|[108|[101|[115|[115|[32|[97|[32|[115|[105|[122|[101|[32|[105|[115|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[116|[111|[111]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 293
	  <'illegal_bitsize'> when 'true' ->
	      %% Line 294
	      [105|[108|[108|[101|[103|[97|[108|[32|[98|[105|[116|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]
	  %% Line 295
	  <'unsized_binary_not_at_end'> when 'true' ->
	      %% Line 296
	      [97|[32|[98|[105|[110|[97|[114|[121|[32|[102|[105|[101|[108|[100|[32|[119|[105|[116|[104|[111|[117|[116|[32|[115|[105|[122|[101|[32|[105|[115|[32|[111|[110|[108|[121|[32|[97|[108|[108|[111|[119|[101|[100|[32|[97|[116|[32|[116|[104|[101|[32|[101|[110|[100|[32|[111|[102|[32|[97|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 297
	  <'typed_literal_string'> when 'true' ->
	      %% Line 298
	      [97|[32|[108|[105|[116|[101|[114|[97|[108|[32|[115|[116|[114|[105|[110|[103|[32|[105|[110|[32|[97|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[104|[97|[118|[101|[32|[97|[32|[116|[121|[112|[101|[32|[111|[114|[32|[97|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 299
	  <'utf_bittype_size_or_unit'> when 'true' ->
	      %% Line 300
	      [110|[101|[105|[116|[104|[101|[114|[32|[115|[105|[122|[101|[32|[110|[111|[114|[32|[117|[110|[105|[116|[32|[109|[117|[115|[116|[32|[98|[101|[32|[103|[105|[118|[101|[110|[32|[102|[111|[114|[32|[115|[101|[103|[109|[101|[110|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[117|[116|[102|[56|[47|[117|[116|[102|[49|[54|[47|[117|[116|[102|[51|[50]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 301
	  <{'bad_bitsize',Type}> when 'true' ->
	      %% Line 302
	      call 'io_lib':'format'
		  ([98|[97|[100|[32|[126|[115|[32|[98|[105|[116|[32|[115|[105|[122|[101]]]]]]]]]]]]]]], [Type|[]])
	  %% Line 303
	  <'unsized_binary_in_bin_gen_pattern'> when 'true' ->
	      %% Line 304
	      [98|[105|[110|[97|[114|[121|[32|[102|[105|[101|[108|[100|[115|[32|[119|[105|[116|[104|[111|[117|[116|[32|[115|[105|[122|[101|[32|[97|[114|[101|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[112|[97|[116|[116|[101|[114|[110|[115|[32|[111|[102|[32|[98|[105|[116|[32|[115|[116|[114|[105|[110|[103|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 306
	  <{'conflicting_behaviours',{Name,Arity},B,FirstL,FirstB}> when 'true' ->
	      let <_cor8> =
		  %% Line 308
		  apply 'format_where'/1
		      (FirstL)
	      in  %% Line 307
		  call 'io_lib':'format'
		      ([99|[111|[110|[102|[108|[105|[99|[116|[105|[110|[103|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[115|[32|[45|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[119|[47|[126|[119|[32|[114|[101|[113|[117|[105|[114|[101|[100|[32|[98|[121|[32|[98|[111|[116|[104|[32|[39|[126|[112|[39|[32|[97|[110|[100|[32|[39|[126|[112|[39|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 308
																																																						 [Name|[Arity|[B|[FirstB|[_cor8|[]]]]]])
	  %% Line 309
	  <{'undefined_behaviour_func',{Func,Arity},Behaviour}> when 'true' ->
	      %% Line 310
	      call 'io_lib':'format'
		  ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[40|[98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[39|[126|[119|[39|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 311
																																					      [Func|[Arity|[Behaviour|[]]]])
	  %% Line 312
	  <{'undefined_behaviour',Behaviour}> when 'true' ->
	      %% Line 313
	      call 'io_lib':'format'
		  ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]], [Behaviour|[]])
	  %% Line 314
	  <{'undefined_behaviour_callbacks',Behaviour}> when 'true' ->
	      %% Line 315
	      call 'io_lib':'format'
		  ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[97|[114|[101|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 316
																																		    [Behaviour|[]])
	  %% Line 317
	  <{'ill_defined_behaviour_callbacks',Behaviour}> when 'true' ->
	      %% Line 318
	      call 'io_lib':'format'
		  ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[108|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 319
																																							 [Behaviour|[]])
	  %% Line 320
	  <{'behaviour_info',{_X_M,F,A}}> when 'true' ->
	      %% Line 321
	      call 'io_lib':'format'
		  ([99|[97|[110|[110|[111|[116|[32|[100|[101|[102|[105|[110|[101|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[97|[116|[116|[105|[98|[117|[116|[101|[32|[102|[111|[114|[32|[126|[119|[47|[126|[119|[32|[119|[104|[101|[110|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[95|[105|[110|[102|[111|[32|[105|[115|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 322
																																																					      [F|[A|[]]])
	  %% Line 324
	  <{'singleton_typevar',Name}> when 'true' ->
	      %% Line 325
	      call 'io_lib':'format'
		  ([116|[121|[112|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[111|[110|[108|[121|[32|[117|[115|[101|[100|[32|[111|[110|[99|[101|[32|[40|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 326
	  <{'bad_export_type',_X_ETs}> when 'true' ->
	      %% Line 327
	      call 'io_lib':'format'
		  ([98|[97|[100|[32|[101|[120|[112|[111|[114|[116|[95|[116|[121|[112|[101|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 328
	  <{'duplicated_export_type',{T,A}}> when 'true' ->
	      %% Line 329
	      call 'io_lib':'format'
		  ([116|[121|[112|[101|[32|[126|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]], [T|[A|[]]])
	  %% Line 330
	  <{'undefined_type',{TypeName,Arity}}> when 'true' ->
	      let <_cor9> =
		  %% Line 331
		  apply 'gen_type_paren'/1
		      (Arity)
	      in  %% Line 331
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]], [TypeName|[_cor9|[]]])
	  %% Line 332
	  <{'unused_type',{TypeName,Arity}}> when 'true' ->
	      let <_cor10> =
		  %% Line 333
		  apply 'gen_type_paren'/1
		      (Arity)
	      in  %% Line 333
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]], [TypeName|[_cor10|[]]])
	  %% Line 338
	  <{'new_var_arity_type',TypeName}> when 'true' ->
	      %% Line 339
	      call 'io_lib':'format'
		  ([116|[121|[112|[101|[32|[126|[119|[32|[105|[115|[32|[97|[32|[110|[101|[119|[32|[98|[117|[105|[108|[116|[105|[110|[32|[116|[121|[112|[101|[59|[32|[105|[116|[115|[32|[40|[114|[101|[41|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[32|[105|[115|[32|[97|[108|[108|[111|[119|[101|[100|[32|[111|[110|[108|[121|[32|[117|[110|[116|[105|[108|[32|[116|[104|[101|[32|[110|[101|[120|[116|[32|[114|[101|[108|[101|[97|[115|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 341
																																																																	      [TypeName|[]])
	  %% Line 342
	  <{'builtin_type',{TypeName,Arity}}> when 'true' ->
	      let <_cor11> =
		  %% Line 344
		  apply 'gen_type_paren'/1
		      (Arity)
	      in  %% Line 343
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[105|[115|[32|[97|[32|[98|[117|[105|[108|[116|[105|[110|[32|[116|[121|[112|[101|[59|[32|[105|[116|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[114|[101|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 344
																																							   [TypeName|[_cor11|[]]])
	  %% Line 345
	  <{'renamed_type',OldName,NewName}> when 'true' ->
	      %% Line 346
	      call 'io_lib':'format'
		  ([116|[121|[112|[101|[32|[126|[119|[40|[41|[32|[105|[115|[32|[110|[111|[119|[32|[99|[97|[108|[108|[101|[100|[32|[126|[119|[40|[41|[59|[32|[112|[108|[101|[97|[115|[101|[32|[117|[115|[101|[32|[116|[104|[101|[32|[110|[101|[119|[32|[110|[97|[109|[101|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 347
																																													     [OldName|[NewName|[]]])
	  %% Line 348
	  <{'redefine_type',{TypeName,Arity}}> when 'true' ->
	      let <_cor12> =
		  %% Line 350
		  apply 'gen_type_paren'/1
		      (Arity)
	      in  %% Line 349
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 350
																					 [TypeName|[_cor12|[]]])
	  %% Line 351
	  <{'type_syntax',Constr}> when 'true' ->
	      %% Line 352
	      call 'io_lib':'format'
		  ([98|[97|[100|[32|[126|[119|[32|[116|[121|[112|[101]]]]]]]]]]], [Constr|[]])
	  %% Line 353
	  <{'redefine_spec',{M,F,A}}> when 'true' ->
	      %% Line 354
	      call 'io_lib':'format'
		  ([115|[112|[101|[99|[32|[102|[111|[114|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 355
	  <{'redefine_callback',{M,F,A}}> when 'true' ->
	      %% Line 356
	      call 'io_lib':'format'
		  ([99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 357
	  <{'spec_fun_undefined',{M,F,A}}> when 'true' ->
	      %% Line 358
	      call 'io_lib':'format'
		  ([115|[112|[101|[99|[32|[102|[111|[114|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 359
	  <{'missing_spec',{F,A}}> when 'true' ->
	      %% Line 360
	      call 'io_lib':'format'
		  ([109|[105|[115|[115|[105|[110|[103|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 361
	  <'spec_wrong_arity'> when 'true' ->
	      %% Line 362
	      [115|[112|[101|[99|[32|[104|[97|[115|[32|[116|[104|[101|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 363
	  <'callback_wrong_arity'> when 'true' ->
	      %% Line 364
	      [99|[97|[108|[108|[98|[97|[99|[107|[32|[104|[97|[115|[32|[116|[104|[101|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 365
	  <{'deprecated_builtin_type',{Name,Arity},%% Line 366
						   Replacement,%% Line 366
							       Rel}> when 'true' ->
	      let <_cor14> =
		  %% Line 367
		  case Replacement of
		    %% Line 368
		    <{Mod,NewName}> when 'true' ->
			%% Line 369
			call 'io_lib':'format'
			    ([117|[115|[101|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]], [Mod|[NewName|[Arity|[]]]])
		    %% Line 370
		    <{Mod,NewName,NewArity}> when 'true' ->
			%% Line 371
			call 'io_lib':'format'
			    ([117|[115|[101|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[112|[114|[101|[102|[101|[114|[97|[98|[108|[121|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 372
																												      [Mod|[NewName|[Arity|%% Line 373
																															   [Mod|[NewName|[NewArity|[]]]]]]])
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 375
		  call 'io_lib':'format'
		      ([116|[121|[112|[101|[32|[126|[119|[47|[126|[119|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[110|[100|[32|[119|[105|[108|[108|[32|[98|[101|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 377
																																												   [Name|[Arity|[Rel|[_cor14|[]]]]])
	  %% Line 378
	  <{'not_exported_opaque',{TypeName,Arity}}> when 'true' ->
	      let <_cor16> =
		  %% Line 380
		  apply 'gen_type_paren'/1
		      (Arity)
	      in  %% Line 379
		  call 'io_lib':'format'
		      ([111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 380
																										  [TypeName|[_cor16|[]]])
	  %% Line 381
	  <{'underspecified_opaque',{TypeName,Arity}}> when 'true' ->
	      let <_cor17> =
		  %% Line 383
		  apply 'gen_type_paren'/1
		      (Arity)
	      in  %% Line 382
		  call 'io_lib':'format'
		      ([111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[105|[115|[32|[117|[110|[100|[101|[114|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[97|[110|[100|[32|[116|[104|[101|[114|[101|[102|[111|[114|[101|[32|[109|[101|[97|[110|[105|[110|[103|[108|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 383
																																														     [TypeName|[_cor17|[]]])
	  %% Line 385
	  <{'format_error',{Fmt,Args}}> when 'true' ->
	      %% Line 386
	      call 'io_lib':'format'
		  (Fmt, Args)
	  %% Line 387
	  <{'mnemosyne',What}> when 'true' ->
	      let <_cor18> =
		  %% Line 388
		  call 'erlang':'++'
		      (What, [44|[32|[109|[105|[115|[115|[105|[110|[103|[32|[116|[114|[97|[110|[115|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]])
	      in  %% Line 388
		  call 'erlang':'++'
		      ([109|[110|[101|[109|[111|[115|[121|[110|[101|[32]]]]]]]]]], _cor18)
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_type_paren'/1 =
    %% Line 390
    fun (_cor0) ->
	case _cor0 of
	  <Arity>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 391
	      apply 'gen_type_paren_1'/2
		  (Arity, [41])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'gen_type_paren',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_type_paren_1'/2 =
    %% Line 393
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Acc> when 'true' ->
	      [40|Acc]
	  %% Line 394
	  <1,Acc> when 'true' ->
	      [40|[95|Acc]]
	  %% Line 395
	  <N,Acc> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor2> =
		      [44|[95|Acc]]
		  in  apply 'gen_type_paren_1'/2
			  (_cor3, _cor2)
	end
'format_mfa'/1 =
    %% Line 397
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,As = [_cor10|_cor11]}> when 'true' ->
	      let <_cor6> =
		  %% Line 398
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[A|_cor2]> when 'true' ->
				      let <_cor4> =
					  call 'erlang':'integer_to_list'
					      (A)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [[44|_cor4]|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (As)
		    -| ['list_comprehension'] )
	      in  %% Line 398
		  case call 'lists':'append'
			   (_cor6) of
		    <[44|ArityString]> when 'true' ->
			%% Line 399
			apply 'format_mf'/3
			    (M, F, ArityString)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 400
	  <{M,F,A}>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_cor8> =
		  %% Line 401
		  call 'erlang':'integer_to_list'
		      (A)
	      in  %% Line 401
		  apply 'format_mf'/3
		      (M, F, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'format_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'format_mf'/3 =
    %% Line 403
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,ArityString>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor9> =
		  %% Line 404
		  call 'erlang':'atom_to_list'
		      (M)
	      in  let <_cor6> =
		      %% Line 404
		      call 'erlang':'atom_to_list'
			  (F)
		  in  let <_cor5> =
			  %% Line 404
			  [47|ArityString]
		      in  let <_cor7> =
			      %% Line 404
			      call 'erlang':'++'
				  (_cor6, _cor5)
			  in  let <_cor8> =
				  %% Line 404
				  [58|_cor7]
			      in  %% Line 404
				  call 'erlang':'++'
				      (_cor9, _cor8)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'format_mf',3}}] )
	    -| ['compiler_generated'] )
	end
'format_where'/1 =
    %% Line 406
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 407
	      call 'io_lib':'format'
		  ([40|[108|[105|[110|[101|[32|[126|[112|[41]]]]]]]]], [L|[]])
	  %% Line 408
	  <{L,C}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor2> =
			call 'erlang':'is_integer'
			    (C)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 409
	      call 'io_lib':'format'
		  ([40|[108|[105|[110|[101|[32|[126|[112|[44|[32|[99|[111|[108|[117|[109|[110|[32|[126|[112|[41]]]]]]]]]]]]]]]]]]]], [L|[C|[]]])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'format_where',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudolocals'/0 =
    %% Line 413
    fun () ->
	%% Line 414
	[{'module_info',0}|[{'module_info',1}|[{'record_info',2}]]]
'exprs'/2 =
    %% Line 419
    fun (_cor1,_cor0) ->
	%% Line 420
	apply 'exprs_opt'/3
	    (_cor1, _cor0, [])
'exprs_opt'/3 =
    %% Line 422
    fun (_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 423
	    ( fun (_cor7,_cor6) ->
		  case <_cor7,_cor6> of
		    <{{'record',_X_SequenceNumber,_X_Name},Attr0},{St1,Vs1}> when 'true' ->
			let <Attr> =
			    %% Line 424
			    apply 'zip_file_and_line'/2
				(Attr0, [110|[111|[110|[101]]]])
			in  let <_cor5> =
				%% Line 425
				apply 'attribute_state'/2
				    (Attr, St1)
			    in  %% Line 425
				{_cor5,Vs1}
		    %% Line 426
		    <{V,_cor18},{St1,Vs1}> when 'true' ->
			%% Line 427
			{St1,[{V,{'bound','unused',[]}}|Vs1]}
		    ( <_cor9,_cor8> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor9,_cor8})
			    -| [{'function_name',{'-exprs_opt/3-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-exprs_opt/3-fun-0-'}}] )
	in  let <_cor3> =
		%% Line 428
		apply 'start'/2
		    ([110|[111|[102|[105|[108|[101]]]]]], _cor0)
	    in  %% Line 423
		case call 'lists':'foldl'
			 (_cor10, %% Line 428
				  {_cor3,[]}, _cor1) of
		  <{St0,Vs}> when 'true' ->
		      let <Vt> =
			  %% Line 429
			  call 'orddict':'from_list'
			      (Vs)
		      in  let <_cor13> =
			      %% Line 430
			      apply 'zip_file_and_line'/2
				  (_cor2, [110|[111|[102|[105|[108|[101]]]]]])
			  in  %% Line 430
			      case apply 'exprs'/3
				       (_cor13, Vt, St0) of
				<{_X_Evt,St}> when 'true' ->
				    %% Line 431
				    apply 'return_status'/1
					(St)
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor14})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor11})
		    -| ['compiler_generated'] )
		end
'used_vars'/2 =
    %% Line 433
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 434
	    ( fun (_cor3,_cor2) ->
		  case <_cor3,_cor2> of
		    <{{'record',_X_SequenceNumber,_X_Name},_X_Attr},Vs0> when 'true' ->
			Vs0
		    %% Line 435
		    <{V,_X_Val},Vs0> when 'true' ->
			[{V,{'bound','unused',[]}}|Vs0]
		    ( <_cor5,_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor5,_cor4})
			    -| [{'function_name',{'-used_vars/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-used_vars/2-fun-0-'}}] )
	in  let <Vs> =
		%% Line 434
		call 'lists':'foldl'
		    (_cor6, %% Line 436
			    [], _cor0)
	    in  let <Vt> =
		    %% Line 437
		    call 'orddict':'from_list'
			(Vs)
		in  let <_cor10> =
			%% Line 438
			apply 'zip_file_and_line'/2
			    (_cor1, [110|[111|[102|[105|[108|[101]]]]]])
		    in  let <_cor9> =
			    %% Line 438
			    apply 'start'/0
				()
			in  %% Line 438
			    case apply 'exprs'/3
				     (_cor10, Vt, _cor9) of
			      <{Evt,_X_St}> when 'true' ->
				  let <_cor16> =
				      %% Line 439
				      ( fun (_cor13,_cor12) ->
					    case <_cor13,_cor12> of
					      <{V,{_cor20,'used',_cor21}},L> when 'true' ->
						  [V|L]
					      %% Line 440
					      <_cor22,L> when 'true' ->
						  L
					    end
					-| [{'id',{0,0,'-used_vars/2-fun-1-'}}] )
				  in  let <_cor17> =
					  %% Line 439
					  call 'lists':'foldl'
					      (_cor16, %% Line 441
						       [], %% Line 441
							   Evt)
				      in  %% Line 439
					  {'ok',_cor17}
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
'module'/1 =
    %% Line 457
    fun (_cor0) ->
	let <Opts> =
	    %% Line 458
	    apply 'compiler_options'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 459
		apply 'start'/2
		    ([110|[111|[102|[105|[108|[101]]]]]], Opts)
	    in  let <St> =
		    %% Line 459
		    apply 'forms'/2
			(_cor0, _cor2)
		in  %% Line 460
		    apply 'return_status'/1
			(St)
'module'/2 =
    %% Line 470
    fun (_cor1,_cor0) ->
	let <Opts> =
	    %% Line 471
	    apply 'compiler_options'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 472
		apply 'start'/2
		    (_cor0, Opts)
	    in  let <St> =
		    %% Line 472
		    apply 'forms'/2
			(_cor1, _cor3)
		in  %% Line 473
		    apply 'return_status'/1
			(St)
'module'/3 =
    %% Line 484
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 487
	    apply 'compiler_options'/1
		(_cor2)
	in  let <Opts> =
		%% Line 487
		call 'erlang':'++'
		    (_cor3, _cor0)
	    in  let <_cor5> =
		    %% Line 488
		    apply 'start'/2
			(_cor1, Opts)
		in  let <St> =
			%% Line 488
			apply 'forms'/2
			    (_cor2, _cor5)
		    in  %% Line 489
			apply 'return_status'/1
			    (St)
'compiler_options'/1 =
    %% Line 491
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 492
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{'attribute',_cor7,'compile',C}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [C|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 492
	    call 'lists':'flatten'
		(_cor5)
'start'/0 =
    %% Line 497
    fun () ->
	%% Line 498
	apply 'start'/2
	    ([110|[111|[102|[105|[108|[101]]]]]], [])
'start'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 503
	    apply 'bool_option'/4
		('warn_unused_vars', 'nowarn_unused_vars', %% Line 504
							   'true', _cor0)
	in  let <_cor3> =
		%% Line 506
		apply 'bool_option'/4
		    ('warn_export_all', 'nowarn_export_all', %% Line 507
							     'false', _cor0)
	    in  let <_cor4> =
		    %% Line 509
		    apply 'bool_option'/4
			('warn_export_vars', 'nowarn_export_vars', %% Line 510
								   'false', _cor0)
		in  let <_cor5> =
			%% Line 512
			apply 'bool_option'/4
			    ('warn_shadow_vars', 'nowarn_shadow_vars', %% Line 513
								       'true', _cor0)
		    in  let <_cor6> =
			    %% Line 515
			    apply 'bool_option'/4
				('warn_unused_import', 'nowarn_unused_import', %% Line 516
									       'false', _cor0)
			in  let <_cor7> =
				%% Line 518
				apply 'bool_option'/4
				    ('warn_unused_function', 'nowarn_unused_function', %% Line 519
										       'true', _cor0)
			    in  let <_cor8> =
				    %% Line 521
				    apply 'bool_option'/4
					('warn_bif_clash', 'nowarn_bif_clash', %% Line 522
									       'true', _cor0)
				in  let <_cor9> =
					%% Line 524
					apply 'bool_option'/4
					    ('warn_unused_record', 'nowarn_unused_record', %% Line 525
											   'true', _cor0)
				    in  let <_cor10> =
					    %% Line 527
					    apply 'bool_option'/4
						('warn_deprecated_function', 'nowarn_deprecated_function', %% Line 528
													   'true', _cor0)
					in  let <_cor11> =
						%% Line 530
						apply 'bool_option'/4
						    ('warn_deprecated_type', 'nowarn_deprecated_type', %% Line 531
												       'true', _cor0)
					    in  let <_cor12> =
						    %% Line 533
						    apply 'bool_option'/4
							('warn_obsolete_guard', 'nowarn_obsolete_guard', %% Line 534
													 'true', _cor0)
						in  let <_cor13> =
							%% Line 536
							apply 'bool_option'/4
							    ('warn_untyped_record', 'nowarn_untyped_record', %% Line 537
													     'false', _cor0)
						    in  let <_cor14> =
							    %% Line 539
							    apply 'bool_option'/4
								('warn_missing_spec', 'nowarn_missing_spec', %% Line 540
													     'false', _cor0)
							in  let <_cor15> =
								%% Line 542
								apply 'bool_option'/4
								    ('warn_missing_spec_all', 'nowarn_missing_spec_all', %% Line 543
															 'false', _cor0)
							    in  let <Enabled0> =
								    %% Line 502
								    [{'unused_vars',_cor2}|%% Line 505
											   [{'export_all',_cor3}|%% Line 508
														 [{'export_vars',_cor4}|%% Line 511
																	[{'shadow_vars',_cor5}|%% Line 514
																			       [{'unused_import',_cor6}|%% Line 517
																							[{'unused_function',_cor7}|%% Line 520
																										   [{'bif_clash',_cor8}|%% Line 523
																													[{'unused_record',_cor9}|%% Line 526
																																 [{'deprecated_function',_cor10}|%% Line 529
																																				 [{'deprecated_type',_cor11}|%% Line 532
																																							     [{'obsolete_guard',_cor12}|%% Line 535
																																											[{'untyped_record',_cor13}|%% Line 538
																																														   [{'missing_spec',_cor14}|%% Line 541
																																																	    [{'missing_spec_all',_cor15}|%% Line 544
																																																					 []]]]]]]]]]]]]]]
								in  let <_cor21> =
									%% Line 545
									( letrec
									      'lc$^0'/1 =
										  fun (_cor19) ->
										      case _cor19 of
											<[{Category,'true'}|_cor18]> when 'true' ->
											    let <_cor20> =
												apply 'lc$^0'/1
												    (_cor18)
											    in  ( [Category|_cor20]
												  -| ['compiler_generated'] )
											( <[_cor17|_cor18]> when 'true' ->
											      apply 'lc$^0'/1
												  (_cor18)
											  -| ['compiler_generated'] )
											<[]> when 'true' ->
											    []
											( <_cor19> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor19})
												-| [{'function_name',{'lc$^0',1}}] )
											  -| ['compiler_generated'] )
										      end
									  in  apply 'lc$^0'/1
										  (Enabled0)
									  -| ['list_comprehension'] )
								    in  let <Enabled> =
									    %% Line 546
									    call 'ordsets':'from_list'
										(_cor21)
									in  let <_cor26> =
										%% Line 547
										case call 'ordsets':'is_element'
											 ('unused_function', Enabled) of
										  %% Line 548
										  <'true'> when 'true' ->
										      let <_cor24> =
											  %% Line 549
											  apply 'pseudolocals'/0
											      ()
										      in  %% Line 549
											  call 'dict':'from_list'
											      ([{{'module_info',1},_cor24}|[]])
										  %% Line 550
										  <'false'> when 'true' ->
										      %% Line 551
										      'undefined'
										  ( <_cor25> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_cor25})
										    -| ['compiler_generated'] )
										end
									    in  let <_cor46> =
										    %% Line 554
										    call 'gb_sets':'from_list'
											([{'module_info',0}|[{'module_info',1}]])
										in  let <_cor45> =
											call 'dict':'new'
											    ()
										    in  let <_cor44> =
											    call 'gb_sets':'empty'
												()
											in  let <_cor43> =
												call 'gb_sets':'empty'
												    ()
											    in  let <_cor41> =
												    %% Line 557
												    apply 'pseudolocals'/0
													()
												in  let <_cor42> =
													%% Line 557
													call 'gb_sets':'from_list'
													    (_cor41)
												    in  let <_cor40> =
													    %% Line 560
													    apply 'value_option'/7
														('warn_format', 1, 'warn_format', 1, %% Line 561
																		     'nowarn_format', %% Line 561
																				      0, _cor0)
													in  let <_cor39> =
														%% Line 558
														( letrec
														      'lc$^1'/1 =
															  fun (_cor37) ->
															      case _cor37 of
																<[F|_cor35]> when 'true' ->
																    let <_cor38> =
																	apply 'lc$^1'/1
																	    (_cor35)
																    in  ( [{F,0}|_cor38]
																	  -| ['compiler_generated'] )
																<[]> when 'true' ->
																    []
																( <_cor37> when 'true' ->
																      ( primop 'match_fail'
																	    ({'function_clause',_cor37})
																	-| [{'function_name',{'lc$^1',1}}] )
																  -| ['compiler_generated'] )
															      end
														  in  let <_cor36> =
															  apply 'pseudolocals'/0
															      ()
														      in  apply 'lc$^1'/1
															      (_cor36)
														  -| ['list_comprehension'] )
													    in  let <_cor33> =
														    call 'sets':'new'
															()
														in  let <_cor32> =
															call 'dict':'new'
															    ()
														    in  let <_cor31> =
															    call 'dict':'new'
																()
															in  let <_cor30> =
																call 'dict':'new'
																    ()
															    in  let <_cor29> =
																    call 'dict':'new'
																	()
																in  let <_cor28> =
																	call 'gb_sets':'empty'
																	    ()
																    in  %% Line 553
																	{'lint','start',[],[],_cor46,[],_cor0,_cor45,_cor44,_cor43,_cor42,[],0,[],[],[],_cor40,%% Line 562
																											       Enabled,[],[],_cor1,'false','false','false',_cor39,%% Line 559
																																		  {'usage',_cor26,[],_cor33,_cor32},_cor31,_cor30,_cor29,_cor28}
'is_warn_enabled'/2 =
    %% Line 568
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,{'lint',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,Enabled,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
	      %% Line 569
	      call 'ordsets':'is_element'
		  (Type, Enabled)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_warn_enabled',2}}] )
	    -| ['compiler_generated'] )
	end
'return_status'/1 =
    %% Line 575
    fun (_cor0) ->
	%% Line 576
	( case _cor0 of
	    ( <( {'lint',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec0,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Ws> =
		      apply 'pack_warnings'/1
			  (_rec0)
		  in  %% Line 577
		      case apply 'pack_errors'/1
			       (_cor25) of
			%% Line 578
			<[]> when 'true' ->
			    {'ok',Ws}
			%% Line 579
			<Es> when 'true' ->
			    {'error',Es,Ws}
		      end
	      -| ['compiler_generated'] )
	    ( <_cor36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pack_errors'/1 =
    %% Line 585
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 586
	    ( fun (_cor4,_cor3) ->
		  case <_cor4,_cor3> of
		    <{File,E},I> when 'true' ->
			let <_cor2> =
			    call 'erlang':'-'
				(I, 1)
			in  {{File,{I,E}},_cor2}
		    ( <_cor6,_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6,_cor5})
			    -| [{'function_name',{'-pack_errors/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-pack_errors/1-fun-0-'}}] )
	in  %% Line 586
	    case call 'lists':'mapfoldl'
		     (_cor7, -1, _cor0) of
	      <{Es1,_cor18}> when 'true' ->
		  let <_cor16> =
		      %% Line 587
		      ( fun (_cor14) ->
			    case _cor14 of
			      <{File,EIs}> when 'true' ->
				  let <_cor12> =
				      ( fun (_cor10) ->
					    case _cor10 of
					      <{_X_I,E}> when 'true' ->
						  E
					      ( <_cor11> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor11})
						      -| [{'function_name',{'-pack_errors/1-fun-1-',1}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-pack_errors/1-fun-1-'}}] )
				  in  let <_cor13> =
					  call 'lists':'map'
					      (_cor12, EIs)
				      in  {File,_cor13}
			      ( <_cor15> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor15})
				      -| [{'function_name',{'-pack_errors/1-fun-2-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-pack_errors/1-fun-2-'}}] )
		  in  let <_cor9> =
			  %% Line 588
			  apply 'pack_warnings'/1
			      (Es1)
		      in  %% Line 587
			  call 'lists':'map'
			      (_cor16, _cor9)
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor8})
		-| ['compiler_generated'] )
	    end
'pack_warnings'/1 =
    %% Line 593
    fun (_cor0) ->
	%% Line 594
	( letrec
	      'lc$^1'/1 =
		  fun (_cor9) ->
		      case _cor9 of
			<[%% Line 595
			  File|_cor2]> when 'true' ->
			    let <_cor14> =
				( letrec
				      'lc$^2'/1 =
					  fun (_cor12) ->
					      case _cor12 of
						<[{F,W}|_cor11]>
						    when call 'erlang':'=:='
							  (F,
							   File) ->
						    let <_cor13> =
							apply 'lc$^2'/1
							    (_cor11)
						    in  ( [W|_cor13]
							  -| ['compiler_generated'] )
						( <[_cor10|_cor11]> when 'true' ->
						      apply 'lc$^2'/1
							  (_cor11)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor12> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor12})
							-| [{'function_name',{'lc$^2',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^2'/1
					  (_cor0)
				  -| ['list_comprehension'] )
			    in  let <_cor15> =
				    call 'lists':'sort'
					(_cor14)
				in  let <_cor16> =
					%% Line 595
					apply 'lc$^1'/1
					    (_cor2)
				    in  ( [{File,_cor15}|_cor16]
					  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor9})
				-| [{'function_name',{'lc$^1',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor7> =
		  %% Line 595
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[{F,_cor18}|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [F|_cor6]
					    -| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      in  let <_cor8> =
		      %% Line 595
		      call 'lists':'usort'
			  (_cor7)
		  in  apply 'lc$^1'/1
			  (_cor8)
	  -| ['list_comprehension'] )
'add_error'/2 =
    %% Line 602
    fun (_cor1,_cor0) ->
	( case _cor0 of
	    ( <( {'lint',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec4,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec2> =
		      [{_rec4,_cor1}|_cor28]
		  in  call 'erlang':'setelement'
			  (19, _cor0, _rec2)
	      -| ['compiler_generated'] )
	    ( <_cor39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_error'/3 =
    %% Line 604
    fun (_cor2,_cor1,_cor0) ->
	%% Line 605
	case apply 'loc'/1
		 (_cor2) of
	  <{File,Location}> when 'true' ->
	      %% Line 606
	      case _cor0 of
		<{'lint',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
		    let <_cor6> =
			call 'erlang':'setelement'
			    (21, _cor0, File)
		    in  apply 'add_error'/2
			    ({Location,'erl_lint',_cor1}, _cor6)
		( <_cor39> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'add_warning'/2 =
    %% Line 608
    fun (_cor1,_cor0) ->
	( case _cor0 of
	    ( <( {'lint',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec9,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec7> =
		      [{_rec9,_cor1}|_cor29]
		  in  call 'erlang':'setelement'
			  (20, _cor0, _rec7)
	      -| ['compiler_generated'] )
	    ( <_cor39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_warning'/3 =
    %% Line 610
    fun (_cor2,_cor1,_cor0) ->
	%% Line 611
	case apply 'loc'/1
		 (_cor2) of
	  <{File,Location}> when 'true' ->
	      %% Line 612
	      case _cor0 of
		<{'lint',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
		    let <_cor6> =
			call 'erlang':'setelement'
			    (21, _cor0, File)
		    in  apply 'add_warning'/2
			    ({Location,'erl_lint',_cor1}, _cor6)
		( <_cor39> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'loc'/1 =
    %% Line 614
    fun (_cor0) ->
	%% Line 615
	case call 'erl_parse':'get_attribute'
		 (_cor0, 'location') of
	  %% Line 616
	  <{'location',{{File,Line},Column}}> when 'true' ->
	      %% Line 617
	      {File,{Line,Column}}
	  %% Line 618
	  <{'location',{File,Line}}> when 'true' ->
	      %% Line 619
	      {File,Line}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'forms'/2 =
    %% Line 624
    fun (_cor1,_cor0) ->
	let <Forms> =
	    %% Line 625
	    apply 'eval_file_attribute'/2
		(_cor1, _cor0)
	in  let <Locals> =
		%% Line 626
		apply 'local_functions'/1
		    (Forms)
	    in  %% Line 627
		( case _cor0 of
		    ( <( {'lint',_cor19,_cor20,_cor21,_cor22,_cor23,_rec12,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <AutoImportSuppressed> =
			      apply 'auto_import_suppressed'/1
				  (_rec12)
			  in  let <StDeprecated> =
				  %% Line 628
				  apply 'disallowed_compile_flags'/2
				      (Forms, _cor0)
			      in  %% Line 630
				  case StDeprecated of
				    <{'lint',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}> when 'true' ->
					let <_cor9> =
					    %% Line 631
					    call 'erlang':'setelement'
						(10, StDeprecated, AutoImportSuppressed)
					in  let <_cor11> =
						call 'erlang':'setelement'
						    (9, _cor9, Locals)
					    in  let <St1> =
						    apply 'includes_qlc_hrl'/2
							(Forms, _cor11)
						in  let <St2> =
							%% Line 632
							apply 'bif_clashes'/2
							    (Forms, St1)
						    in  let <St3> =
							    %% Line 633
							    apply 'not_deprecated'/2
								(Forms, St2)
							in  let <_cor15> =
								%% Line 634
								apply 'pre_scan'/2
								    (Forms, St3)
							    in  let <St4> =
								    %% Line 634
								    call 'lists':'foldl'
									(( 'form'/2
									   -| [{'id',{0,0,'-forms/2-fun-0-'}}] ), _cor15, Forms)
								in  %% Line 635
								    apply 'post_traversal_check'/2
									(Forms, St4)
				    ( <_cor77> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','lint'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
		      -| ['compiler_generated'] )
		    ( <_cor47> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'pre_scan'/2 =
    %% Line 637
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'function',_X_L,'new',_X_A,_X_Cs}|Fs],St> when 'true' ->
	      %% Line 638
	      case St of
		<{'lint',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (24, St, 'true')
		    in  apply 'pre_scan'/2
			    (Fs, _cor4)
		( <_cor42> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 639
	  <[{'attribute',L,'compile',C}|Fs],St> when 'true' ->
	      let <_cor8> =
		  %% Line 640
		  ( case apply 'is_warn_enabled'/2
			     ('export_all', St) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor6> =
				%% Line 641
				call 'lists':'flatten'
				    ([C|[]])
			    in  %% Line 641
				call 'lists':'member'
				    ('export_all', _cor6)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor5> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor5}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 640
		  case _cor8 of
		    %% Line 642
		    <'true'> when 'true' ->
			let <_cor9> =
			    %% Line 643
			    apply 'add_warning'/3
				(L, 'export_all', St)
			in  %% Line 643
			    apply 'pre_scan'/2
				(Fs, _cor9)
		    %% Line 644
		    <'false'> when 'true' ->
			%% Line 645
			apply 'pre_scan'/2
			    (Fs, St)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 647
	  <[_cor43|Fs],St> when 'true' ->
	      %% Line 648
	      apply 'pre_scan'/2
		  (Fs, St)
	  %% Line 649
	  <[],St> when 'true' ->
	      %% Line 650
	      St
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'pre_scan',2}}] )
	    -| ['compiler_generated'] )
	end
'includes_qlc_hrl'/2 =
    %% Line 652
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 655
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{'attribute',_cor15,'file',{File,_X_line}}|_cor3]> when 'true' ->
				let <_cor4> =
				    %% Line 656
				    call 'filename':'basename'
					(File)
				in  %% Line 656
				    ( case <> of
					<>
					    when call 'erlang':'=:='
						  (_cor4,
						   [113|[108|[99|[46|[104|[114|[108]]]]]]]) ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor3)
					    in  ( [File|_cor6]
						  -| ['compiler_generated'] )
					( <> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor3)
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_rec15> =
		%% Line 657
		call 'erlang':'=/='
		    (_cor8, [])
	    in  %% Line 657
		case _cor0 of
		  <{'lint',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
		      call 'erlang':'setelement'
			  (23, _cor0, _rec15)
		  ( <_cor45> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'eval_file_attribute'/2 =
    %% Line 659
    fun (_cor1,_cor0) ->
	%% Line 660
	( case _cor0 of
	    ( <( {'lint',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec17,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'eval_file_attr'/2
		      (_cor1, _rec17)
	      -| ['compiler_generated'] )
	    ( <_cor34> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'eval_file_attr'/2 =
    %% Line 662
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Form = {'attribute',_X_L,'file',{File,_X_Line}}|Forms],_X_File> when 'true' ->
	      let <_cor2> =
		  %% Line 663
		  apply 'eval_file_attr'/2
		      (Forms, File)
	      in  %% Line 663
		  [Form|_cor2]
	  %% Line 664
	  <[Form0|Forms],File> when 'true' ->
	      let <Form> =
		  %% Line 665
		  apply 'zip_file_and_line'/2
		      (Form0, File)
	      in  let <_cor4> =
		      %% Line 666
		      apply 'eval_file_attr'/2
			  (Forms, File)
		  in  %% Line 666
		      [Form|_cor4]
	  %% Line 667
	  <[],_X_File> when 'true' ->
	      %% Line 668
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'eval_file_attr',2}}] )
	    -| ['compiler_generated'] )
	end
'zip_file_and_line'/2 =
    %% Line 670
    fun (_cor1,_cor0) ->
	let <F0> =
	    %% Line 671
	    ( fun (_cor2) ->
		  {_cor0,_cor2}
	      -| [{'id',{0,0,'-zip_file_and_line/2-fun-0-'}}] )
	in  let <F> =
		%% Line 672
		( fun (_cor5) ->
		      call 'erl_parse':'set_line'
			  (_cor5, F0)
		  -| [{'id',{0,0,'-zip_file_and_line/2-fun-1-'}}] )
	    in  %% Line 673
		apply 'modify_line'/2
		    (_cor1, F)
'form'/2 =
    %% Line 678
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'error',E},St> when 'true' ->
	      apply 'add_error'/2
		  (E, St)
	  %% Line 679
	  <{'warning',W},St> when 'true' ->
	      apply 'add_warning'/2
		  (W, St)
	  %% Line 680
	  <{'attribute',_X_L,'file',{File,_X_Line}},St> when 'true' ->
	      %% Line 681
	      case St of
		<{'lint',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
		    call 'erlang':'setelement'
			(21, St, File)
		( <_cor36> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 682
	  <{'attribute',_X_L,'compile',_cor37},St> when 'true' ->
	      %% Line 683
	      St
	  %% Line 684
	  <Form,St = {'lint',State,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}> when 'true' ->
	      %% Line 685
	      case State of
		%% Line 686
		<'start'> when 'true' ->
		    apply 'start_state'/2
			(Form, St)
		%% Line 687
		<'attribute'> when 'true' ->
		    apply 'attribute_state'/2
			(Form, St)
		%% Line 688
		<'function'> when 'true' ->
		    apply 'function_state'/2
			(Form, St)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'form',2}}] )
	    -| ['compiler_generated'] )
	end
'start_state'/2 =
    %% Line 693
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Form = {'attribute',Line,'module',{_cor19,_cor20}},St0> when 'true' ->
	      let <St1> =
		  %% Line 694
		  apply 'add_error'/3
		      (Line, 'pmod_unsupported', St0)
	      in  %% Line 695
		  case St1 of
		    <{'lint',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(2, St1, 'attribute')
			in  apply 'attribute_state'/2
				(Form, _cor5)
		    ( <_cor50> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 696
	  <{'attribute',_cor51,'module',M},St0> when 'true' ->
	      %% Line 697
	      case St0 of
		<{'lint',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80}> when 'true' ->
		    let <_cor8> =
			call 'erlang':'setelement'
			    (3, St0, M)
		    in  %% Line 698
			case _cor8 of
			  <{'lint',_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110}> when 'true' ->
			      call 'erlang':'setelement'
				  (2, _cor8, 'attribute')
			  ( <_cor111> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_cor81> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 699
	  <Form,St> when 'true' ->
	      let <_cor12> =
		  %% Line 700
		  call 'erlang':'element'
		      (2, Form)
	      in  let <St1> =
		      %% Line 700
		      apply 'add_error'/3
			  (_cor12, 'undefined_module', St)
		  in  %% Line 701
		      case St1 of
			<{'lint',_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140}> when 'true' ->
			    let <_cor16> =
				call 'erlang':'setelement'
				    (2, St1, 'attribute')
			    in  apply 'attribute_state'/2
				    (Form, _cor16)
			( <_cor141> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	end
'attribute_state'/2 =
    %% Line 706
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'attribute',_X_L,'module',_X_M},St = {'lint',_cor17,[],_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
	      %% Line 707
	      St
	  %% Line 708
	  <{'attribute',L,'module',_X_M},St> when 'true' ->
	      %% Line 709
	      apply 'add_error'/3
		  (L, 'redefine_module', St)
	  %% Line 710
	  <{'attribute',L,'export',Es},St> when 'true' ->
	      %% Line 711
	      apply 'export'/3
		  (L, Es, St)
	  %% Line 712
	  <{'attribute',L,'export_type',Es},St> when 'true' ->
	      %% Line 713
	      apply 'export_type'/3
		  (L, Es, St)
	  %% Line 714
	  <{'attribute',L,'import',Is},St> when 'true' ->
	      %% Line 715
	      apply 'import'/3
		  (L, Is, St)
	  %% Line 716
	  <{'attribute',L,'record',{Name,Fields}},St> when 'true' ->
	      %% Line 717
	      apply 'record_def'/4
		  (L, Name, Fields, St)
	  %% Line 718
	  <{'attribute',La,'behaviour',Behaviour},St> when 'true' ->
	      %% Line 719
	      ( case St of
		  ( <( {'lint',_cor45,_cor46,_rec25,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec23> =
			    call 'erlang':'++'
				(_rec25, [{La,Behaviour}|[]])
			in  call 'erlang':'setelement'
				(4, St, _rec23)
		    -| ['compiler_generated'] )
		  ( <_cor73> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 720
	  <{'attribute',La,'behavior',Behaviour},St> when 'true' ->
	      %% Line 721
	      ( case St of
		  ( <( {'lint',_cor104,_cor105,_rec28,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec26> =
			    call 'erlang':'++'
				(_rec28, [{La,Behaviour}|[]])
			in  call 'erlang':'setelement'
				(4, St, _rec26)
		    -| ['compiler_generated'] )
		  ( <_cor132> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 722
	  <{'attribute',L,'type',{TypeName,TypeDef,Args}},St> when 'true' ->
	      %% Line 723
	      apply 'type_def'/6
		  ('type', L, TypeName, TypeDef, Args, St)
	  %% Line 724
	  <{'attribute',L,'opaque',{TypeName,TypeDef,Args}},St> when 'true' ->
	      %% Line 725
	      apply 'type_def'/6
		  ('opaque', L, TypeName, TypeDef, Args, St)
	  %% Line 726
	  <{'attribute',L,'spec',{Fun,Types}},St> when 'true' ->
	      %% Line 727
	      apply 'spec_decl'/4
		  (L, Fun, Types, St)
	  %% Line 728
	  <{'attribute',L,'callback',{Fun,Types}},St> when 'true' ->
	      %% Line 729
	      apply 'callback_decl'/4
		  (L, Fun, Types, St)
	  %% Line 730
	  <{'attribute',L,'on_load',Val},St> when 'true' ->
	      %% Line 731
	      apply 'on_load'/3
		  (L, Val, St)
	  %% Line 732
	  <{'attribute',_X_L,_X_Other,_X_Val},St> when 'true' ->
	      %% Line 733
	      St
	  %% Line 734
	  <Form,St> when 'true' ->
	      %% Line 735
	      case St of
		<{'lint',_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191}> when 'true' ->
		    let <_cor14> =
			call 'erlang':'setelement'
			    (2, St, 'function')
		    in  apply 'function_state'/2
			    (Form, _cor14)
		( <_cor192> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'function_state'/2 =
    %% Line 742
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'attribute',L,'record',{Name,Fields}},St> when 'true' ->
	      %% Line 743
	      apply 'record_def'/4
		  (L, Name, Fields, St)
	  %% Line 744
	  <{'attribute',L,'type',{TypeName,TypeDef,Args}},St> when 'true' ->
	      %% Line 745
	      apply 'type_def'/6
		  ('type', L, TypeName, TypeDef, Args, St)
	  %% Line 746
	  <{'attribute',L,'opaque',{TypeName,TypeDef,Args}},St> when 'true' ->
	      %% Line 747
	      apply 'type_def'/6
		  ('opaque', L, TypeName, TypeDef, Args, St)
	  %% Line 748
	  <{'attribute',L,'spec',{Fun,Types}},St> when 'true' ->
	      %% Line 749
	      apply 'spec_decl'/4
		  (L, Fun, Types, St)
	  %% Line 750
	  <{'attribute',La,Attr,_X_Val},St> when 'true' ->
	      %% Line 751
	      apply 'add_error'/3
		  (La, {'attribute',Attr}, St)
	  %% Line 752
	  <{'function',L,N,A,Cs},St> when 'true' ->
	      %% Line 753
	      apply 'function'/5
		  (L, N, A, Cs, St)
	  %% Line 754
	  <{'rule',L,_X_N,_X_A,_X_Cs},St> when 'true' ->
	      %% Line 755
	      apply 'add_error'/3
		  (L, {'mnemosyne',[114|[117|[108|[101]]]]}, St)
	  %% Line 756
	  <{'eof',L},St> when 'true' ->
	      apply 'eof'/2
		  (L, St)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'function_state',2}}] )
	    -| ['compiler_generated'] )
	end
'eof'/2 =
    %% Line 761
    fun (_cor1,_cor0) ->
	_cor0
'bif_clashes'/2 =
    %% Line 766
    fun (_cor1,_cor0) ->
	%% Line 767
	( case _cor0 of
	    ( <( {'lint',_cor18,_cor19,_cor20,_cor21,_cor22,_rec30,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Nowarn> =
		      apply 'nowarn_function'/2
			  ('nowarn_bif_clash', _rec30)
		  in  let <_cor10> =
			  %% Line 768
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor7) ->
					case _cor7 of
					  <[{'function',_X_L,Name,Arity,_X_Cs}|_cor6]> when 'true' ->
					      %% Line 769
					      ( case call 'erl_internal':'bif'
							 (Name, Arity) of
						  <'true'> when 'true' ->
						      let <_cor8> =
							  apply 'lc$^0'/1
							      (_cor6)
						      in  ( [{Name,Arity}|_cor8]
							    -| ['compiler_generated'] )
						  ( <'false'> when 'true' ->
							apply 'lc$^0'/1
							    (_cor6)
						    -| ['compiler_generated'] )
						  ( <_cor9> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor9})
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
					  ( <[_cor5|_cor6]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor6)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor7> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor7})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor1)
			    -| ['list_comprehension'] )
		      in  let <_cor12> =
			      %% Line 770
			      call 'ordsets':'from_list'
				  (_cor10)
			  in  let <Clashes> =
				  %% Line 770
				  call 'ordsets':'subtract'
				      (_cor12, Nowarn)
			      in  %% Line 771
				  call 'erlang':'setelement'
				      (14, _cor0, Clashes)
	      -| ['compiler_generated'] )
	    ( <_cor46> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'not_deprecated'/2 =
    %% Line 775
    fun (_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 777
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor10) ->
			  case _cor10 of
			    <[%% Line 778
			      {'attribute',L,'compile',Args}|_cor3]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor11) ->
					      case _cor11 of
						<[%% Line 779
						  {'nowarn_deprecated_function',MFAs0}|_cor5]> when 'true' ->
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor12) ->
								  case _cor12 of
								    <[%% Line 780
								      MFA|_cor8]> when 'true' ->
									let <_cor13> =
									    %% Line 780
									    apply 'lc$^2'/1
										(_cor8)
									in  ( [{MFA,L}|_cor13]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									%% Line 779
									apply 'lc$^1'/1
									    (_cor5)
								    ( <_cor12> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor12})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  let <_cor9> =
							      %% Line 780
							      call 'lists':'flatten'
								  ([MFAs0|[]])
							  in  apply 'lc$^2'/1
								  (_cor9)
						      -| ['list_comprehension'] )
						( <[_cor4|_cor5]> when 'true' ->
						      %% Line 779
						      apply 'lc$^1'/1
							  (_cor5)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 778
						    apply 'lc$^0'/1
							(_cor3)
						( <_cor11> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor11})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor6> =
					  %% Line 779
					  call 'lists':'flatten'
					      ([Args|[]])
				      in  apply 'lc$^1'/1
					      (_cor6)
				  -| ['list_comprehension'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 778
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor10> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor10})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor20> =
		%% Line 781
		( letrec
		      'lc$^3'/1 =
			  fun (_cor18) ->
			      case _cor18 of
				<[{MFA,_X_L}|_cor17]> when 'true' ->
				    let <_cor19> =
					apply 'lc$^3'/1
					    (_cor17)
				    in  ( [MFA|_cor19]
					  -| ['compiler_generated'] )
				( <[_cor16|_cor17]> when 'true' ->
				      apply 'lc$^3'/1
					  (_cor17)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor18> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor18})
					-| [{'function_name',{'lc$^3',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^3'/1
			  (_cor14)
		  -| ['list_comprehension'] )
	    in  let <_cor28> =
		    %% Line 782
		    ( letrec
			  'lc$^4'/1 =
			      fun (_cor25) ->
				  case _cor25 of
				    <[MFAL = {{M,F,A},_X_L}|_cor23]> when 'true' ->
					let <_cor24> =
					    %% Line 783
					    call 'otp_internal':'obsolete'
						(M, F, A)
					in  %% Line 783
					    ( case <> of
						<>
						    when call 'erlang':'=:='
							  (_cor24,
							   'no') ->
						    let <_cor26> =
							apply 'lc$^4'/1
							    (_cor23)
						    in  ( [MFAL|_cor26]
							  -| ['compiler_generated'] )
						( <> when 'true' ->
						      apply 'lc$^4'/1
							  (_cor23)
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
				    ( <[_cor22|_cor23]> when 'true' ->
					  apply 'lc$^4'/1
					      (_cor23)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor25> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor25})
					    -| [{'function_name',{'lc$^4',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^4'/1
			      (_cor14)
		      -| ['list_comprehension'] )
		in  let <St1> =
			%% Line 784
			apply 'func_line_warning'/3
			    ('bad_nowarn_deprecated_function', _cor28, _cor0)
		    in  let <_rec32> =
			    %% Line 785
			    call 'ordsets':'from_list'
				(_cor20)
			in  %% Line 785
			    case St1 of
			      <{'lint',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}> when 'true' ->
				  call 'erlang':'setelement'
				      (15, St1, _rec32)
			      ( <_cor65> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
'disallowed_compile_flags'/2 =
    %% Line 788
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 790
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 791
			      {'attribute',[{'line',{_cor38,L}}|[]],'compile','nowarn_bif_clash'}|_cor3]> when 'true' ->
				( case _cor0 of
				    ( <( {'lint',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_rec34,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor7> =
					      %% Line 791
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [{_rec34,{L,'erl_lint','disallowed_nowarn_bif_clash'}}|_cor7]
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_cor67> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','lint'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 791
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor16> =
		%% Line 792
		( letrec
		      'lc$^1'/1 =
			  fun (_cor12) ->
			      case _cor12 of
				<[%% Line 793
				  {'attribute',[{'line',{_cor68,L}}|[]],'compile',{'nowarn_bif_clash',{_cor69,_cor70}}}|_cor11]> when 'true' ->
				    ( case _cor0 of
					( <( {'lint',_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_rec35,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_cor15> =
						  %% Line 793
						  apply 'lc$^1'/1
						      (_cor11)
					      in  ( [{_rec35,{L,'erl_lint','disallowed_nowarn_bif_clash'}}|_cor15]
						    -| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_cor99> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','lint'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <[_cor10|_cor11]> when 'true' ->
				      %% Line 793
				      apply 'lc$^1'/1
					  (_cor11)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor12> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor12})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor1)
		  -| ['list_comprehension'] )
	    in  let <_cor18> =
		    %% Line 794
		    apply 'is_warn_enabled'/2
			('bif_clash', _cor0)
		in  let <Disabled> =
			%% Line 794
			call 'erlang':'not'
			    (_cor18)
		    in  let <_cor32> =
			    %% Line 795
			    case <> of
			      %% Line 796
			      <>
				  when try
					( let <_cor22> =
					      ( case Disabled of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							call 'erlang':'=:='
							    (_cor8, [])
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							'false'
						    -| ['compiler_generated'] )
						  ( <_cor20> when 'true' ->
							_cor20
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '=:='
										     -| ['compiler_generated'] )
						    (( _cor22
						       -| ['compiler_generated'] ), ( 'true'
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 797
				  ( case _cor0 of
				      ( <( {'lint',_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_rec36,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127}
					   -| ['compiler_generated'] )> when 'true' ->
					    [{_rec36,{'erl_lint','disallowed_nowarn_bif_clash'}}|_cor117]
					-| ['compiler_generated'] )
				      ( <_cor128> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 798
			      <>
				  when Disabled ->
				  %% Line 799
				  ( case _cor0 of
				      ( <( {'lint',_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_rec38,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor29> =
						call 'erlang':'++'
						    (_cor16, _rec38)
					    in  call 'erlang':'++'
						    (_cor8, _cor29)
					-| ['compiler_generated'] )
				      ( <_cor186> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 800
			      <> when 'true' ->
				  %% Line 801
				  ( case _cor0 of
				      ( <( {'lint',_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_rec39,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214}
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'++'
						(_cor16, _rec39)
					-| ['compiler_generated'] )
				      ( <_cor215> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			in  %% Line 803
			    case _cor0 of
			      <{'lint',_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244}> when 'true' ->
				  call 'erlang':'setelement'
				      (19, _cor0, _cor32)
			      ( <_cor245> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
'post_traversal_check'/2 =
    %% Line 809
    fun (_cor1,_cor0) ->
	let <St1> =
	    %% Line 810
	    apply 'check_behaviour'/1
		(_cor0)
	in  let <St2> =
		%% Line 811
		apply 'check_deprecated'/2
		    (_cor1, St1)
	    in  let <St3> =
		    %% Line 812
		    apply 'check_imports'/2
			(_cor1, St2)
		in  let <St4> =
			%% Line 813
			apply 'check_inlines'/2
			    (_cor1, St3)
		    in  let <St5> =
			    %% Line 814
			    apply 'check_undefined_functions'/1
				(St4)
			in  let <St6> =
				%% Line 815
				apply 'check_unused_functions'/2
				    (_cor1, St5)
			    in  let <St7> =
				    %% Line 816
				    apply 'check_bif_clashes'/2
					(_cor1, St6)
				in  let <St8> =
					%% Line 817
					apply 'check_specs_without_function'/1
					    (St7)
				    in  let <St9> =
					    %% Line 818
					    apply 'check_functions_without_spec'/2
						(_cor1, St8)
					in  let <StA> =
						%% Line 819
						apply 'check_undefined_types'/1
						    (St9)
					    in  let <StB> =
						    %% Line 820
						    apply 'check_unused_types'/2
							(_cor1, StA)
						in  let <StC> =
							%% Line 821
							apply 'check_untyped_records'/2
							    (_cor1, StB)
						    in  let <StD> =
							    %% Line 822
							    apply 'check_on_load'/1
								(StC)
							in  let <StE> =
								%% Line 823
								apply 'check_unused_records'/2
								    (_cor1, StD)
							    in  let <StF> =
								    %% Line 824
								    apply 'check_local_opaque_types'/1
									(StE)
								in  %% Line 825
								    apply 'check_callback_information'/1
									(StF)
'check_behaviour'/1 =
    %% Line 830
    fun (_cor0) ->
	%% Line 831
	( case _cor0 of
	    ( <( {'lint',_cor4,_cor5,_rec41,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'behaviour_check'/2
		      (_rec41, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'behaviour_check'/2 =
    %% Line 836
    fun (_cor1,_cor0) ->
	%% Line 837
	case apply 'all_behaviour_callbacks'/3
		 (_cor1, [], _cor0) of
	  <{AllBfs,St1}> when 'true' ->
	      let <St> =
		  %% Line 838
		  apply 'behaviour_missing_callbacks'/2
		      (AllBfs, St1)
	      in  %% Line 839
		  apply 'behaviour_conflicting'/2
		      (AllBfs, St)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'all_behaviour_callbacks'/3 =
    %% Line 841
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Line,B}|Bs],Acc,St0> when 'true' ->
	      %% Line 842
	      case apply 'behaviour_callbacks'/3
		       (Line, B, St0) of
		<{Bfs0,St}> when 'true' ->
		    %% Line 843
		    apply 'all_behaviour_callbacks'/3
			(Bs, [{{Line,B},Bfs0}|Acc], St)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 844
	  <[],Acc,St> when 'true' ->
	      let <_cor4> =
		  call 'lists':'reverse'
		      (Acc)
	      in  {_cor4,St}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'all_behaviour_callbacks',3}}] )
	    -| ['compiler_generated'] )
	end
'behaviour_callbacks'/3 =
    %% Line 846
    fun (_cor2,_cor1,_cor0) ->
	%% Line 847
	try
	    call _cor1:'behaviour_info'
		('callbacks')
	of <_cor3> ->
	    case _cor3 of
	      %% Line 848
	      <Funcs>
		  when call 'erlang':'is_list'
			(_cor3) ->
		  let <_cor12> =
		      %% Line 849
		      ( fun (_cor10) ->
			    case _cor10 of
			      <{FuncName,Arity}> when 'true' ->
				  %% Line 850
				  ( case <> of
				      ( <>
					    when call 'erlang':'is_atom'
						  (FuncName) ->
					    call 'erlang':'is_integer'
						(Arity)
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 851
			      <{FuncName,Arity,Spec}> when 'true' ->
				  %% Line 852
				  ( case <> of
				      ( <>
					    when call 'erlang':'is_atom'
						  (FuncName) ->
					    %% Line 853
					    ( case <> of
						( <>
						      when call 'erlang':'is_integer'
							    (Arity) ->
						      call 'erlang':'is_list'
							  (Spec)
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 854
			      <_X_Other> when 'true' ->
				  %% Line 855
				  'false'
			    end
			-| [{'id',{0,0,'-behaviour_callbacks/3-fun-0-'}}] )
		  in  let <All> =
			  %% Line 849
			  call 'lists':'all'
			      (_cor12, %% Line 857
				       Funcs)
		      in  let <MaybeRemoveSpec> =
			      %% Line 858
			      ( fun (_cor14) ->
				    case _cor14 of
				      <FA = {_X_F,_X_A}> when 'true' ->
					  FA
				      %% Line 859
				      <{F,A,_X_S}> when 'true' ->
					  {F,A}
				      %% Line 860
				      <Other> when 'true' ->
					  Other
				    end
				-| [{'id',{0,0,'-behaviour_callbacks/3-fun-1-'}}] )
			  in  %% Line 862
			      case <> of
				%% Line 863
				<>
				    when call 'erlang':'=:='
					  (All,
					   'true') ->
				    let <_cor22> =
					%% Line 864
					( letrec
					      'lc$^0'/1 =
						  fun (_cor19) ->
						      case _cor19 of
							<[F|_cor18]> when 'true' ->
							    let <_cor20> =
								apply MaybeRemoveSpec
								    (F)
							    in  let <_cor21> =
								    apply 'lc$^0'/1
									(_cor18)
								in  ( [_cor20|_cor21]
								      -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor19> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor19})
								-| [{'function_name',{'lc$^0',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^0'/1
						  (Funcs)
					  -| ['list_comprehension'] )
				    in  %% Line 864
					{_cor22,_cor0}
				%% Line 865
				<> when 'true' ->
				    let <St1> =
					%% Line 866
					apply 'add_warning'/3
					    (_cor2, %% Line 867
						    {'ill_defined_behaviour_callbacks',_cor1}, _cor0)
				    in  %% Line 869
					{[],St1}
			      end
	      %% Line 871
	      <'undefined'> when 'true' ->
		  let <St1> =
		      %% Line 872
		      apply 'add_warning'/3
			  (_cor2, {'undefined_behaviour_callbacks',_cor1}, _cor0)
		  in  %% Line 873
		      {[],St1}
	      %% Line 874
	      <_X_Other> when 'true' ->
		  let <St1> =
		      %% Line 875
		      apply 'add_warning'/3
			  (_cor2, {'ill_defined_behaviour_callbacks',_cor1}, _cor0)
		  in  %% Line 876
		      {[],St1}
	    end
	catch <_cor29,_cor28,_cor27> ->
	    let <St1> =
		%% Line 879
		apply 'add_warning'/3
		    (_cor2, {'undefined_behaviour',_cor1}, _cor0)
	    in  %% Line 880
		{[],St1}
'behaviour_missing_callbacks'/2 =
    %% Line 883
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{Line,B},Bfs}|T],St0> when 'true' ->
	      let <_cor2> =
		  %% Line 884
		  apply 'exports'/1
		      (St0)
	      in  let <Exports> =
		      %% Line 884
		      call 'gb_sets':'to_list'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 885
			  call 'ordsets':'from_list'
			      (Bfs)
		      in  let <Missing> =
			      %% Line 885
			      call 'ordsets':'subtract'
				  (_cor4, Exports)
			  in  let <_cor10> =
				  %% Line 886
				  ( fun (_cor7,_cor6) ->
					%% Line 887
					apply 'add_warning'/3
					    (Line, {'undefined_behaviour_func',_cor7,B}, _cor6)
				    -| [{'id',{0,0,'-behaviour_missing_callbacks/2-fun-0-'}}] )
			      in  let <St> =
				      %% Line 886
				      call 'lists':'foldl'
					  (_cor10, %% Line 888
						   St0, %% Line 888
							Missing)
				  in  %% Line 889
				      apply 'behaviour_missing_callbacks'/2
					  (T, St)
	  %% Line 890
	  <[],St> when 'true' ->
	      St
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'behaviour_missing_callbacks',2}}] )
	    -| ['compiler_generated'] )
	end
'behaviour_conflicting'/2 =
    %% Line 892
    fun (_cor1,_cor0) ->
	let <R0> =
	    %% Line 893
	    call 'sofs':'relation'
		(_cor1, [{'item',['callback']}])
	in  let <R1> =
		%% Line 894
		call 'sofs':'family_to_relation'
		    (R0)
	    in  let <R2> =
		    %% Line 895
		    call 'sofs':'converse'
			(R1)
		in  let <R3> =
			%% Line 896
			call 'sofs':'relation_to_family'
			    (R2)
		    in  let <_cor9> =
			    %% Line 897
			    ( fun (_cor7) ->
				  let <_cor6> =
				      call 'sofs':'no_elements'
					  (_cor7)
				  in  call 'erlang':'>'
					  (_cor6, 1)
			      -| [{'id',{0,0,'-behaviour_conflicting/2-fun-0-'}}] )
			in  let <R4> =
				%% Line 897
				call 'sofs':'family_specification'
				    (_cor9, R3)
			    in  let <R> =
				    %% Line 898
				    call 'sofs':'to_external'
					(R4)
				in  %% Line 899
				    apply 'behaviour_add_conflicts'/2
					(R, _cor0)
'behaviour_add_conflicts'/2 =
    %% Line 901
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Cb,[{FirstLoc,FirstB}|Cs]}|T],St0> when 'true' ->
	      let <_cor2> =
		  %% Line 902
		  apply 'loc'/1
		      (FirstLoc)
	      in  let <FirstL> =
		      %% Line 902
		      call 'erlang':'element'
			  (2, _cor2)
		  in  let <St> =
			  %% Line 903
			  apply 'behaviour_add_conflict'/5
			      (Cs, Cb, FirstL, FirstB, St0)
		      in  %% Line 904
			  apply 'behaviour_add_conflicts'/2
			      (T, St)
	  %% Line 905
	  <[],St> when 'true' ->
	      St
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'behaviour_add_conflicts',2}}] )
	    -| ['compiler_generated'] )
	end
'behaviour_add_conflict'/5 =
    %% Line 907
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Line,B}|Cs],Cb,FirstL,FirstB,St0> when 'true' ->
	      let <St> =
		  %% Line 908
		  apply 'add_warning'/3
		      (Line, {'conflicting_behaviours',Cb,B,FirstL,FirstB}, St0)
	      in  %% Line 909
		  apply 'behaviour_add_conflict'/5
		      (Cs, Cb, FirstL, FirstB, St)
	  %% Line 910
	  <[],_cor11,_cor12,_cor13,St> when 'true' ->
	      St
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'behaviour_add_conflict',5}}] )
	    -| ['compiler_generated'] )
	end
'check_deprecated'/2 =
    %% Line 914
    fun (_cor1,_cor0) ->
	%% Line 916
	( case _cor0 of
	    ( <( {'lint',_cor32,_cor33,_cor34,_cor35,_cor36,_rec42,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor7> =
		      case call 'lists':'member'
			       ('export_all', _rec42) of
			%% Line 917
			<'true'> when 'true' ->
			    _cor40
			%% Line 918
			<'false'> when 'true' ->
			    _cor35
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		  in  let <X> =
			  %% Line 920
			  call 'gb_sets':'to_list'
			      (_cor7)
		      in  let <_cor23> =
			      %% Line 922
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor19) ->
					    case _cor19 of
					      <[{'attribute',L,'deprecated',Depr}|_cor12]> when 'true' ->
						  ( letrec
							'lc$^1'/1 =
							    fun (_cor20) ->
								case _cor20 of
								  <[%% Line 923
								    D|_cor14]> when 'true' ->
								      ( letrec
									    'lc$^2'/1 =
										fun (_cor21) ->
										    case _cor21 of
										      <[%% Line 924
											E|_cor17]> when 'true' ->
											  let <_cor22> =
											      %% Line 924
											      apply 'lc$^2'/1
												  (_cor17)
											  in  ( [{E,L}|_cor22]
												-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  %% Line 923
											  apply 'lc$^1'/1
											      (_cor14)
										      ( <_cor21> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor21})
											      -| [{'function_name',{'lc$^2',1}}] )
											-| ['compiler_generated'] )
										    end
									in  let <_cor18> =
										%% Line 924
										apply 'depr_cat'/3
										    (D, X, _cor33)
									    in  apply 'lc$^2'/1
										    (_cor18)
									-| ['list_comprehension'] )
								  <[]> when 'true' ->
								      apply 'lc$^0'/1
									  (_cor12)
								  ( <_cor20> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor20})
									  -| [{'function_name',{'lc$^1',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  let <_cor15> =
							    %% Line 923
							    call 'lists':'flatten'
								([Depr|[]])
							in  apply 'lc$^1'/1
								(_cor15)
						    -| ['list_comprehension'] )
					      ( <[_cor11|_cor12]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor12)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor19> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor19})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(_cor1)
				-| ['list_comprehension'] )
			  in  let <_cor29> =
				  %% Line 925
				  ( fun (_cor26,_cor25) ->
					case <_cor26,_cor25> of
					  <{E,L},St1> when 'true' ->
					      %% Line 926
					      apply 'add_error'/3
						  (L, E, St1)
					  ( <_cor28,_cor27> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor28,_cor27})
						  -| [{'function_name',{'-check_deprecated/2-fun-0-',2}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-check_deprecated/2-fun-0-'}}] )
			      in  %% Line 925
				  call 'lists':'foldl'
				      (_cor29, _cor0, _cor23)
	      -| ['compiler_generated'] )
	    ( <_cor60> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'depr_cat'/3 =
    %% Line 929
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <D = {F,A,Flg},X,Mod> when 'true' ->
	      %% Line 930
	      case apply 'deprecated_flag'/1
		       (Flg) of
		%% Line 931
		<'false'> when 'true' ->
		    [{'invalid_deprecated',D}|[]]
		%% Line 932
		<'true'> when 'true' ->
		    apply 'depr_fa'/4
			(F, A, X, Mod)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 934
	  <{F,A},X,Mod> when 'true' ->
	      %% Line 935
	      apply 'depr_fa'/4
		  (F, A, X, Mod)
	  %% Line 936
	  <'module',_X_X,_X_Mod> when 'true' ->
	      %% Line 937
	      []
	  %% Line 938
	  <D,_X_X,_X_Mod> when 'true' ->
	      %% Line 939
	      [{'invalid_deprecated',D}|[]]
	end
'depr_fa'/4 =
    %% Line 941
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'_','_',_X_X,_X_Mod> when 'true' ->
	      %% Line 942
	      []
	  %% Line 943
	  <F,'_',X,_X_Mod>
	      when call 'erlang':'is_atom'
		    (F) ->
	      let <_cor6> =
		  %% Line 945
		  ( fun (_cor4) ->
			case _cor4 of
			  <{F1,_cor18}> when 'true' ->
			      call 'erlang':'=:='
				  (F1, F)
			  ( <_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor5})
				  -| [{'function_name',{'-depr_fa/4-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-depr_fa/4-fun-0-'}}] )
	      in  %% Line 945
		  case call 'lists':'filter'
			   (_cor6, X) of
		    %% Line 946
		    <[]> when 'true' ->
			[{'bad_deprecated',{F,'_'}}|[]]
		    %% Line 947
		    <_cor19> when 'true' ->
			[]
		  end
	  %% Line 949
	  <F,A,X,Mod>
	      when try
		    let <_cor8> =
			call 'erlang':'is_atom'
			    (F)
		    in  let <_cor9> =
			    call 'erlang':'is_integer'
				(A)
			in  let <_cor10> =
				call 'erlang':'>='
				    (A, 0)
			    in  let <_cor11> =
				    call 'erlang':'and'
					(_cor9, _cor10)
				in  call 'erlang':'and'
					(_cor8, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 950
	      case call 'lists':'member'
		       ({F,A}, X) of
		%% Line 951
		<'true'> when 'true' ->
		    []
		%% Line 952
		<'false'> when 'true' ->
		    %% Line 953
		    case call 'erlang':'is_builtin'
			     (Mod, F, A) of
		      %% Line 954
		      <'true'> when 'true' ->
			  []
		      %% Line 955
		      <'false'> when 'true' ->
			  [{'bad_deprecated',{F,A}}|[]]
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 958
	  <F,A,_X_X,_X_Mod> when 'true' ->
	      %% Line 959
	      [{'invalid_deprecated',{F,A}}|[]]
	end
'deprecated_flag'/1 =
    %% Line 961
    fun (_cor0) ->
	case _cor0 of
	  <'next_version'> when 'true' ->
	      'true'
	  %% Line 962
	  <'next_major_release'> when 'true' ->
	      'true'
	  %% Line 963
	  <'eventually'> when 'true' ->
	      'true'
	  %% Line 964
	  <_cor2> when 'true' ->
	      'false'
	end
'check_imports'/2 =
    %% Line 968
    fun (_cor1,_cor0) ->
	%% Line 969
	case apply 'is_warn_enabled'/2
		 ('unused_import', _cor0) of
	  %% Line 970
	  <'false'> when 'true' ->
	      _cor0
	  %% Line 972
	  <'true'> when 'true' ->
	      %% Line 973
	      ( case _cor0 of
		  ( <( {'lint',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_rec45,_cor56,_cor57,_cor58,_cor59}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 974
			( case _rec45 of
			    ( <( {'usage',_cor90,_rec47,_cor91,_cor92}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Unused> =
				      call 'ordsets':'subtract'
					  (_cor36, _rec47)
				  in  let <_cor18> =
					  %% Line 975
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor15) ->
							case _cor15 of
							  <[%% Line 976
							    {'attribute',L,'import',{Mod,Fs}}|_cor11]> when 'true' ->
							      ( letrec
								    'lc$^1'/1 =
									fun (_cor16) ->
									    case _cor16 of
									      <[%% Line 977
										FA|_cor13]> when 'true' ->
										  let <_cor17> =
										      %% Line 977
										      apply 'lc$^1'/1
											  (_cor13)
										  in  ( [{{FA,Mod},L}|_cor17]
											-| ['compiler_generated'] )
									      <[]> when 'true' ->
										  %% Line 976
										  apply 'lc$^0'/1
										      (_cor11)
									      ( <_cor16> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor16})
										      -| [{'function_name',{'lc$^1',1}}] )
										-| ['compiler_generated'] )
									    end
								in  let <_cor14> =
									%% Line 977
									call 'lists':'usort'
									    (Fs)
								    in  apply 'lc$^1'/1
									    (_cor14)
								-| ['list_comprehension'] )
							  ( <[_cor10|_cor11]> when 'true' ->
								%% Line 976
								apply 'lc$^0'/1
								    (_cor11)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor15> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor15})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (_cor1)
					    -| ['list_comprehension'] )
				      in  let <_cor27> =
					      %% Line 978
					      ( letrec
						    'lc$^2'/1 =
							fun (_cor24) ->
							    case _cor24 of
							      <[FM|_cor21]> when 'true' ->
								  ( letrec
									'lc$^3'/1 =
									    fun (_cor25) ->
										case _cor25 of
										  <[{FM2,L}|_cor23]>
										      when call 'erlang':'=:='
											    (FM,
											     FM2) ->
										      let <_cor26> =
											  apply 'lc$^3'/1
											      (_cor23)
										      in  ( [{FM,L}|_cor26]
											    -| ['compiler_generated'] )
										  ( <[_cor22|_cor23]> when 'true' ->
											apply 'lc$^3'/1
											    (_cor23)
										    -| ['compiler_generated'] )
										  <[]> when 'true' ->
										      apply 'lc$^2'/1
											  (_cor21)
										  ( <_cor25> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor25})
											  -| [{'function_name',{'lc$^3',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  apply 'lc$^3'/1
									    (_cor18)
								    -| ['list_comprehension'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor24> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor24})
								      -| [{'function_name',{'lc$^2',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^2'/1
							(Unused)
						-| ['list_comprehension'] )
					  in  %% Line 979
					      apply 'func_line_warning'/3
						  ('unused_import', _cor27, _cor0)
			      -| ['compiler_generated'] )
			    ( <_cor93> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','usage'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor60> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor29> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor29})
	    -| ['compiler_generated'] )
	end
'check_inlines'/2 =
    %% Line 984
    fun (_cor1,_cor0) ->
	%% Line 985
	apply 'check_option_functions'/4
	    (_cor1, 'inline', 'bad_inline', _cor0)
'check_unused_functions'/2 =
    %% Line 989
    fun (_cor1,_cor0) ->
	let <St1> =
	    %% Line 990
	    apply 'check_option_functions'/4
		(_cor1, 'nowarn_unused_function', %% Line 991
						  'bad_nowarn_unused_function', _cor0)
	in  %% Line 992
	    ( case St1 of
		( <( {'lint',_cor41,_cor42,_cor43,_cor44,_cor45,_rec48,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor9> =
			  %% Line 993
			  ( case call 'lists':'member'
				     ('export_all', _rec48) of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor7> =
					%% Line 994
					apply 'is_warn_enabled'/2
					    ('unused_function', St1)
				    in  %% Line 994
					call 'erlang':'not'
					    (_cor7)
				-| ['compiler_generated'] )
			      ( <_cor6> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor6}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 993
			  case _cor9 of
			    %% Line 995
			    <'true'> when 'true' ->
				%% Line 996
				St1
			    %% Line 997
			    <'false'> when 'true' ->
				let <Nowarn> =
				    %% Line 998
				    apply 'nowarn_function'/2
					('nowarn_unused_function', _rec48)
				in  let <_cor16> =
					%% Line 1000
					apply 'initially_reached'/1
					    (St1)
				    in  %% Line 1001
					( case _cor64 of
					    ( <( {'usage',_rec50,_cor99,_cor100,_cor101}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <Used> =
						      apply 'reached_functions'/2
							  (_cor16, _rec50)
						  in  let <UsedOrNowarn> =
							  %% Line 1002
							  call 'ordsets':'union'
							      (Used, Nowarn)
						      in  let <_cor21> =
							      %% Line 1003
							      call 'gb_sets':'to_list'
								  (_cor49)
							  in  let <Unused> =
								  %% Line 1003
								  call 'ordsets':'subtract'
								      (_cor21, %% Line 1004
									       UsedOrNowarn)
							      in  let <_cor27> =
								      %% Line 1005
								      ( letrec
									    'lc$^0'/1 =
										fun (_cor25) ->
										    case _cor25 of
										      <[{'function',L,N,A,_cor132}|_cor24]> when 'true' ->
											  let <_cor26> =
											      apply 'lc$^0'/1
												  (_cor24)
											  in  ( [{{N,A},L}|_cor26]
												-| ['compiler_generated'] )
										      ( <[_cor23|_cor24]> when 'true' ->
											    apply 'lc$^0'/1
												(_cor24)
											-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  []
										      ( <_cor25> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor25})
											      -| [{'function_name',{'lc$^0',1}}] )
											-| ['compiler_generated'] )
										    end
									in  apply 'lc$^0'/1
										(_cor1)
									-| ['list_comprehension'] )
								  in  let <_cor36> =
									  %% Line 1006
									  ( letrec
										'lc$^1'/1 =
										    fun (_cor33) ->
											case _cor33 of
											  <[FA|_cor30]> when 'true' ->
											      ( letrec
												    'lc$^2'/1 =
													fun (_cor34) ->
													    case _cor34 of
													      <[{FA2,L}|_cor32]>
														  when call 'erlang':'=:='
															(FA,
															 FA2) ->
														  let <_cor35> =
														      apply 'lc$^2'/1
															  (_cor32)
														  in  ( [{FA,L}|_cor35]
															-| ['compiler_generated'] )
													      ( <[_cor31|_cor32]> when 'true' ->
														    apply 'lc$^2'/1
															(_cor32)
														-| ['compiler_generated'] )
													      <[]> when 'true' ->
														  apply 'lc$^1'/1
														      (_cor30)
													      ( <_cor34> when 'true' ->
														    ( primop 'match_fail'
															  ({'function_clause',_cor34})
														      -| [{'function_name',{'lc$^2',1}}] )
														-| ['compiler_generated'] )
													    end
												in  apply 'lc$^2'/1
													(_cor27)
												-| ['list_comprehension'] )
											  <[]> when 'true' ->
											      []
											  ( <_cor33> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_cor33})
												  -| [{'function_name',{'lc$^1',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lc$^1'/1
										    (Unused)
									    -| ['list_comprehension'] )
								      in  %% Line 1007
									  apply 'func_line_warning'/3
									      ('unused_function', _cor36, St1)
					      -| ['compiler_generated'] )
					    ( <_cor102> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','usage'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
			    ( <_cor38> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor38})
			      -| ['compiler_generated'] )
			  end
		  -| ['compiler_generated'] )
		( <_cor69> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'initially_reached'/1 =
    %% Line 1010
    fun (_cor0) ->
	case _cor0 of
	  <{'lint',_cor3,_cor4,_cor5,Exp,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,OnLoad,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      let <_cor1> =
		  %% Line 1011
		  call 'gb_sets':'to_list'
		      (Exp)
	      in  %% Line 1011
		  call 'erlang':'++'
		      (OnLoad, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'initially_reached',1}}] )
	    -| ['compiler_generated'] )
	end
'reached_functions'/2 =
    %% Line 1016
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1017
	    call 'gb_sets':'empty'
		()
	in  %% Line 1017
	    apply 'reached_functions'/4
		(_cor1, [], _cor0, _cor2)
'reached_functions'/4 =
    %% Line 1019
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[R|Rs],More0,Ref,Reached0> when 'true' ->
	      %% Line 1020
	      case call 'gb_sets':'is_element'
		       (R, Reached0) of
		%% Line 1021
		<'true'> when 'true' ->
		    apply 'reached_functions'/4
			(Rs, More0, Ref, Reached0)
		%% Line 1022
		<'false'> when 'true' ->
		    let <Reached> =
			%% Line 1023
			call 'gb_sets':'add_element'
			    (R, Reached0)
		    in  %% Line 1024
			case call 'dict':'find'
				 (R, Ref) of
			  %% Line 1025
			  <{'ok',More}> when 'true' ->
			      apply 'reached_functions'/4
				  (Rs, [More|More0], Ref, Reached)
			  %% Line 1026
			  <'error'> when 'true' ->
			      apply 'reached_functions'/4
				  (Rs, More0, Ref, Reached)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1029
	  <[],More = [_cor12|_cor13],Ref,Reached> when 'true' ->
	      let <_cor7> =
		  %% Line 1030
		  call 'lists':'append'
		      (More)
	      in  %% Line 1030
		  apply 'reached_functions'/4
		      (_cor7, [], Ref, Reached)
	  %% Line 1031
	  <[],[],_X_Ref,Reached> when 'true' ->
	      call 'gb_sets':'to_list'
		  (Reached)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'reached_functions',4}}] )
	    -| ['compiler_generated'] )
	end
'check_undefined_functions'/1 =
    %% Line 1035
    fun (_cor0) ->
	case _cor0 of
	  <St0 = {'lint',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,Def0,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,Called0,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      let <Called> =
		  %% Line 1036
		  call 'sofs':'relation'
		      (Called0, [{'func','location'}])
	      in  let <_cor2> =
		      %% Line 1037
		      call 'gb_sets':'to_list'
			  (Def0)
		  in  let <Def> =
			  %% Line 1037
			  call 'sofs':'from_external'
			      (_cor2, ['func'])
		      in  let <_cor4> =
			      %% Line 1038
			      call 'sofs':'drestriction'
				  (Called, Def)
			  in  let <Undef> =
				  %% Line 1038
				  call 'sofs':'to_external'
				      (_cor4)
			      in  let <_cor10> =
				      %% Line 1039
				      ( fun (_cor7,_cor6) ->
					    case <_cor7,_cor6> of
					      <{NA,L},St> when 'true' ->
						  %% Line 1040
						  apply 'add_error'/3
						      (L, {'undefined_function',NA}, St)
					      ( <_cor9,_cor8> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor9,_cor8})
						      -| [{'function_name',{'-check_undefined_functions/1-fun-0-',2}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-check_undefined_functions/1-fun-0-'}}] )
				  in  %% Line 1039
				      call 'lists':'foldl'
					  (_cor10, %% Line 1041
						   St0, %% Line 1041
							Undef)
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'check_undefined_functions',1}}] )
	    -| ['compiler_generated'] )
	end
'check_undefined_types'/1 =
    %% Line 1045
    fun (_cor0) ->
	case _cor0 of
	  <St0 = {'lint',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,Usage,_cor48,_cor49,Def,_cor50}> when 'true' ->
	      %% Line 1046
	      ( case Usage of
		  ( <( {'usage',_cor51,_cor52,_cor53,_rec52}
		       -| ['compiler_generated'] )> when 'true' ->
			let <UTAs> =
			    %% Line 1047
			    call 'dict':'fetch_keys'
				(_rec52)
			in  let <_cor16> =
				%% Line 1048
				( letrec
				      'lc$^0'/1 =
					  fun (_cor10) ->
					      case _cor10 of
						<[TA = %% Line 1049
						       {T,_cor55}|_cor6]> when 'true' ->
						    %% Line 1050
						    ( case call 'dict':'is_key'
							       (TA, Def) of
							<'false'> when 'true' ->
							    %% Line 1051
							    ( case apply 'is_default_type'/1
								       (TA) of
								<'false'> when 'true' ->
								    %% Line 1052
								    ( case apply 'is_newly_introduced_var_arity_type'/1
									       (T) of
									<'false'> when 'true' ->
									    let <_cor11> =
										call 'dict':'fetch'
										    (TA, _rec52)
									    in  let <_cor12> =
										    apply 'lc$^0'/1
											(_cor6)
										in  ( [{TA,_cor11}|_cor12]
										      -| ['compiler_generated'] )
									( <'true'> when 'true' ->
									      apply 'lc$^0'/1
										  (_cor6)
									  -| ['compiler_generated'] )
									( <_cor_variable> when 'true' ->
									      call 'erlang':'error'
										  ('badarg')
									  -| ['compiler_generated'] )
								      end
								      -| ['list_comprehension'] )
								( <'true'> when 'true' ->
								      apply 'lc$^0'/1
									  (_cor6)
								  -| ['compiler_generated'] )
								( <_cor_variable> when 'true' ->
								      call 'erlang':'error'
									  ('badarg')
								  -| ['compiler_generated'] )
							      end
							      -| ['list_comprehension'] )
							( <'true'> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor6)
							  -| ['compiler_generated'] )
							( <_cor_variable> when 'true' ->
							      call 'erlang':'error'
								  ('badarg')
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
						( <[_cor5|_cor6]> when 'true' ->
						      %% Line 1049
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor10> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor10})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (%% Line 1049
					   UTAs)
				  -| ['list_comprehension'] )
			    in  let <_cor22> =
				    %% Line 1053
				    ( fun (_cor19,_cor18) ->
					  case <_cor19,_cor18> of
					    <{TA,L},St> when 'true' ->
						%% Line 1054
						apply 'add_error'/3
						    (L, {'undefined_type',TA}, St)
					    ( <_cor21,_cor20> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor21,_cor20})
						    -| [{'function_name',{'-check_undefined_types/1-fun-0-',2}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-check_undefined_types/1-fun-0-'}}] )
				in  %% Line 1053
				    call 'lists':'foldl'
					(_cor22, %% Line 1055
						 St0, _cor16)
		    -| ['compiler_generated'] )
		  ( <_cor54> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','usage'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23})
		  -| [{'function_name',{'check_undefined_types',1}}] )
	    -| ['compiler_generated'] )
	end
'check_bif_clashes'/2 =
    %% Line 1059
    fun (_cor1,_cor0) ->
	%% Line 1061
	apply 'check_option_functions'/4
	    (_cor1, 'nowarn_bif_clash', %% Line 1062
					'bad_nowarn_bif_clash', _cor0)
'check_option_functions'/4 =
    %% Line 1064
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor16> =
	    %% Line 1066
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor12) ->
			  case _cor12 of
			    <[{'attribute',L,'compile',Args}|_cor5]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor13) ->
					      case _cor13 of
						<[%% Line 1067
						  {Tag,FAs0}|_cor7]>
						    when %% Line 1068
						      call 'erlang':'=:='
							  (_cor2,
							   Tag) ->
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor14) ->
								  case _cor14 of
								    <[%% Line 1069
								      FA|_cor10]> when 'true' ->
									let <_cor15> =
									    %% Line 1069
									    apply 'lc$^2'/1
										(_cor10)
									in  ( [{FA,L}|_cor15]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									%% Line 1067
									apply 'lc$^1'/1
									    (_cor7)
								    ( <_cor14> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor14})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  let <_cor11> =
							      %% Line 1069
							      call 'lists':'flatten'
								  ([FAs0|[]])
							  in  apply 'lc$^2'/1
								  (_cor11)
						      -| ['list_comprehension'] )
						( <[_cor6|_cor7]> when 'true' ->
						      %% Line 1067
						      apply 'lc$^1'/1
							  (_cor7)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor5)
						( <_cor13> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor13})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor8> =
					  %% Line 1067
					  call 'lists':'flatten'
					      ([Args|[]])
				      in  apply 'lc$^1'/1
					      (_cor8)
				  -| ['list_comprehension'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor12> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor12})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor3)
	      -| ['list_comprehension'] )
	in  %% Line 1070
	    ( case _cor0 of
		( <( {'lint',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_rec53,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor29> =
			  call 'gb_sets':'to_list'
			      (_rec53)
		      in  let <_cor26> =
			      apply 'pseudolocals'/0
				  ()
			  in  let <_cor30> =
				  call 'erlang':'--'
				      (_cor29, _cor26)
			      in  let <_cor25> =
				      %% Line 1071
				      ( letrec
					    'lc$^3'/1 =
						fun (_cor23) ->
						    case _cor23 of
						      <[{{F,A},_cor73}|_cor19]> when 'true' ->
							  let <_cor24> =
							      apply 'lc$^3'/1
								  (_cor19)
							  in  ( [{F,A}|_cor24]
								-| ['compiler_generated'] )
						      ( <[_cor18|_cor19]> when 'true' ->
							    apply 'lc$^3'/1
								(_cor19)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor23> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor23})
							      -| [{'function_name',{'lc$^3',1}}] )
							-| ['compiler_generated'] )
						    end
					in  let <_cor22> =
						call 'orddict':'to_list'
						    (_cor48)
					    in  apply 'lc$^3'/1
						    (_cor22)
					-| ['list_comprehension'] )
				  in  let <DefFunctions> =
					  call 'erlang':'++'
					      (_cor30, _cor25)
				      in  let <_cor38> =
					      %% Line 1072
					      ( letrec
						    'lc$^4'/1 =
							fun (_cor35) ->
							    case _cor35 of
							      <[{FA,L}|_cor33]> when 'true' ->
								  ( case call 'lists':'member'
									     (FA, DefFunctions) of
								      <'false'> when 'true' ->
									  let <_cor36> =
									      apply 'lc$^4'/1
										  (_cor33)
									  in  ( [{FA,L}|_cor36]
										-| ['compiler_generated'] )
								      ( <'true'> when 'true' ->
									    apply 'lc$^4'/1
										(_cor33)
									-| ['compiler_generated'] )
								      ( <_cor_variable> when 'true' ->
									    call 'erlang':'error'
										('badarg')
									-| ['compiler_generated'] )
								    end
								    -| ['list_comprehension'] )
							      ( <[_cor32|_cor33]> when 'true' ->
								    apply 'lc$^4'/1
									(_cor33)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor35> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor35})
								      -| [{'function_name',{'lc$^4',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^4'/1
							(_cor16)
						-| ['list_comprehension'] )
					  in  %% Line 1073
					      apply 'func_line_error'/3
						  (_cor1, _cor38, _cor0)
		  -| ['compiler_generated'] )
		( <_cor72> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','lint'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'nowarn_function'/2 =
    %% Line 1075
    fun (_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 1076
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[{Tag1,FAs}|_cor3]>
				when %% Line 1077
				  call 'erlang':'=:='
				      (Tag1,
				       _cor1) ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor8) ->
					      case _cor8 of
						<[%% Line 1078
						  FA|_cor5]> when 'true' ->
						    let <_cor9> =
							%% Line 1078
							apply 'lc$^1'/1
							    (_cor5)
						    in  ( [FA|_cor9]
							  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor3)
						( <_cor8> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor8})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor6> =
					  %% Line 1078
					  call 'lists':'flatten'
					      ([FAs|[]])
				      in  apply 'lc$^1'/1
					      (_cor6)
				  -| ['list_comprehension'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 1076
	    call 'ordsets':'from_list'
		(_cor10)
'func_line_warning'/3 =
    %% Line 1080
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1081
	    ( fun (_cor4,_cor3) ->
		  case <_cor4,_cor3> of
		    <{F,Line},St0> when 'true' ->
			apply 'add_warning'/3
			    (Line, {_cor2,F}, St0)
		    ( <_cor6,_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6,_cor5})
			    -| [{'function_name',{'-func_line_warning/3-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-func_line_warning/3-fun-0-'}}] )
	in  %% Line 1081
	    call 'lists':'foldl'
		(_cor7, _cor0, _cor1)
'func_line_error'/3 =
    %% Line 1083
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1084
	    ( fun (_cor4,_cor3) ->
		  case <_cor4,_cor3> of
		    <{F,Line},St0> when 'true' ->
			apply 'add_error'/3
			    (Line, {_cor2,F}, St0)
		    ( <_cor6,_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6,_cor5})
			    -| [{'function_name',{'-func_line_error/3-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-func_line_error/3-fun-0-'}}] )
	in  %% Line 1084
	    call 'lists':'foldl'
		(_cor7, _cor0, _cor1)
'check_untyped_records'/2 =
    %% Line 1086
    fun (_cor1,_cor0) ->
	%% Line 1087
	case apply 'is_warn_enabled'/2
		 ('untyped_record', _cor0) of
	  %% Line 1088
	  <'true'> when 'true' ->
	      %% Line 1090
	      ( case _cor0 of
		  ( <( {'lint',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec55,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
		       -| ['compiler_generated'] )> when 'true' ->
			let <RecNames> =
			    call 'dict':'fetch_keys'
				(_rec55)
			in  let <_cor13> =
				%% Line 1092
				( letrec
				      'lc$^0'/1 =
					  fun (_cor10) ->
					      case _cor10 of
						<[%% Line 1093
						  {'attribute',_cor57,'type',{{'record',Name},Fields,_cor58}}|_cor6]> when 'true' ->
						    let <_cor9> =
							%% Line 1094
							( fun (_cor7) ->
							      case _cor7 of
								<{'typed_record_field',_cor59,_cor60}> when 'true' ->
								    'true'
								%% Line 1095
								<_cor61> when 'true' ->
								    'false'
							      end
							  -| [{'id',{0,0,'-check_untyped_records/2-fun-0-'}}] )
						    in  %% Line 1094
							( case call 'lists':'all'
								   (_cor9, %% Line 1096
									   Fields) of
							    <'true'> when 'true' ->
								let <_cor11> =
								    apply 'lc$^0'/1
									(_cor6)
								in  ( [Name|_cor11]
								      -| ['compiler_generated'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor6)
							      -| ['compiler_generated'] )
							    ( <_cor12> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor12})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						( <[_cor5|_cor6]> when 'true' ->
						      %% Line 1093
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor10> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor10})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (_cor1)
				  -| ['list_comprehension'] )
			    in  let <_cor24> =
				    %% Line 1097
				    ( fun (_cor21,_cor20) ->
					  %% Line 1098
					  case call 'dict':'fetch'
						   (_cor21, _rec55) of
					    <{L,Fields}> when 'true' ->
						%% Line 1099
						case Fields of
						  %% Line 1100
						  <[]> when 'true' ->
						      _cor20
						  %% Line 1101
						  <[_cor91|_cor92]> when 'true' ->
						      apply 'add_warning'/3
							  (L, {'untyped_record',_cor21}, _cor20)
						  ( <_cor19> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor19})
						    -| ['compiler_generated'] )
						end
					    ( <_cor18> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor18})
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-check_untyped_records/2-fun-1-'}}] )
				in  let <_cor15> =
					%% Line 1103
					call 'erlang':'--'
					    (RecNames, _cor13)
				    in  %% Line 1097
					call 'lists':'foldl'
					    (_cor24, _cor0, _cor15)
		    -| ['compiler_generated'] )
		  ( <_cor56> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1104
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor25> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor25})
	    -| ['compiler_generated'] )
	end
'check_unused_records'/2 =
    %% Line 1108
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1109
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{'attribute',_X_L,'file',{File,_X_Line}}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [File|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor8> =
		%% Line 1110
		apply 'is_warn_enabled'/2
		    ('unused_record', _cor0)
	    in  %% Line 1110
		case <_cor8,_cor6> of
		  %% Line 1111
		  <'true',[FirstFile|_cor41]> when 'true' ->
		      %% Line 1114
		      ( case _cor0 of
			  ( <( {'lint',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_rec57,_cor66,_cor67,_cor68,_cor69}
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 1115
				( case _rec57 of
				    ( <( {'usage',_cor71,_cor72,_rec58,_cor73}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <UsedRecords> =
					      call 'sets':'to_list'
						  (_rec58)
					  in  let <_cor21> =
						  %% Line 1116
						  ( fun (_cor18,_cor17) ->
							%% Line 1117
							call 'dict':'erase'
							    (_cor18, _cor17)
						    -| [{'id',{0,0,'-check_unused_records/2-fun-0-'}}] )
					      in  let <URecs> =
						      %% Line 1116
						      call 'lists':'foldl'
							  (_cor21, _cor48, %% Line 1118
									   UsedRecords)
						  in  let <_cor31> =
							  %% Line 1119
							  ( letrec
								'lc$^1'/1 =
								    fun (_cor28) ->
									case _cor28 of
									  <[%% Line 1120
									    {Name,{FileLine,_X_Fields}}|_cor24]> when 'true' ->
									      let <_cor26> =
										  %% Line 1121
										  apply 'loc'/1
										      (FileLine)
									      in  let <_cor27> =
										      %% Line 1121
										      call 'erlang':'element'
											  (1, _cor26)
										  in  %% Line 1121
										      ( case <> of
											  <>
											      when call 'erlang':'=:='
												    (_cor27,
												     FirstFile) ->
											      let <_cor29> =
												  apply 'lc$^1'/1
												      (_cor24)
											      in  ( [{Name,FileLine}|_cor29]
												    -| ['compiler_generated'] )
											  ( <> when 'true' ->
												apply 'lc$^1'/1
												    (_cor24)
											    -| ['compiler_generated'] )
											end
											-| ['list_comprehension'] )
									  ( <[_cor23|_cor24]> when 'true' ->
										%% Line 1120
										apply 'lc$^1'/1
										    (_cor24)
									    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor28> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor28})
										  -| [{'function_name',{'lc$^1',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  let <_cor25> =
								    %% Line 1120
								    call 'dict':'to_list'
									(URecs)
								in  apply 'lc$^1'/1
									(_cor25)
							    -| ['list_comprehension'] )
						      in  let <_cor37> =
							      %% Line 1122
							      ( fun (_cor34,_cor33) ->
								    case <_cor34,_cor33> of
								      <{N,L},St> when 'true' ->
									  %% Line 1123
									  apply 'add_warning'/3
									      (L, {'unused_record',N}, St)
								      ( <_cor36,_cor35> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor36,_cor35})
									      -| [{'function_name',{'-check_unused_records/2-fun-1-',2}}] )
									-| ['compiler_generated'] )
								    end
								-| [{'id',{0,0,'-check_unused_records/2-fun-1-'}}] )
							  in  %% Line 1122
							      call 'lists':'foldl'
								  (_cor37, _cor0, _cor31)
				      -| ['compiler_generated'] )
				    ( <_cor74> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','usage'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_cor70> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 1125
		  <_fol1122,_fol1123> when 'true' ->
		      _cor0
		end
'check_callback_information'/1 =
    %% Line 1129
    fun (_cor0) ->
	case _cor0 of
	  <State = {'lint',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,%% Line 1130
											  Defined,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,Callbacks,_cor35,_cor36}> when 'true' ->
	      %% Line 1131
	      case call 'gb_sets':'is_member'
		       ({'behaviour_info',1}, Defined) of
		%% Line 1132
		<'false'> when 'true' ->
		    State
		%% Line 1133
		<'true'> when 'true' ->
		    %% Line 1134
		    case call 'dict':'size'
			     (Callbacks) of
		      %% Line 1135
		      <0> when 'true' ->
			  State
		      %% Line 1136
		      <_cor37> when 'true' ->
			  let <CallbacksList> =
			      %% Line 1137
			      call 'dict':'to_list'
				  (Callbacks)
			  in  let <FoldL> =
				  %% Line 1139
				  ( fun (_cor3,_cor2) ->
					case <_cor3,_cor2> of
					  <{Fa,Line},St> when 'true' ->
					      %% Line 1140
					      apply 'add_error'/3
						  (Line, {'behaviour_info',Fa}, St)
					  ( <_cor5,_cor4> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor5,_cor4})
						  -| [{'function_name',{'-check_callback_information/1-fun-0-',2}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-check_callback_information/1-fun-0-'}}] )
			      in  %% Line 1142
				  call 'lists':'foldl'
				      (FoldL, State, CallbacksList)
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'check_callback_information',1}}] )
	    -| ['compiler_generated'] )
	end
'export'/3 =
    %% Line 1152
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,Es,St0 = {'lint',_cor20,_cor21,_cor22,Es0,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,Called,_cor42,_cor43,_cor44,_cor45,_cor46}> when 'true' ->
	      let <_cor12> =
		  %% Line 1154
		  ( fun (_cor9,_cor8) ->
			case <_cor9,_cor8> of
			  <NA,{E,C,St2}> when 'true' ->
			      let <_cor5> =
				  %% Line 1155
				  case call 'gb_sets':'is_element'
					   (NA, E) of
				    %% Line 1156
				    <'true'> when 'true' ->
					let <Warn> = {%% Line 1157
					     'duplicated_export',%% Line 1157
								 NA}
					in  %% Line 1158
					    apply 'add_warning'/3
						(Line, Warn, St2)
				    %% Line 1159
				    <'false'> when 'true' ->
					%% Line 1160
					St2
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor4})
				      -| ['compiler_generated'] )
				  end
			      in  let <_cor7> =
				      %% Line 1162
				      call 'gb_sets':'add_element'
					  (NA, E)
				  in  %% Line 1162
				      {_cor7,[{NA,Line}|C],_cor5}
			  ( <_cor11,_cor10> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor11,_cor10})
				  -| [{'function_name',{'-export/3-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-export/3-fun-0-'}}] )
	      in  %% Line 1153
		  case %% Line 1154
		       call 'lists':'foldl'
			   (_cor12, %% Line 1164
				    {Es0,Called,St0}, %% Line 1164
						      Es) of
		    <{Es1,C1,St1}> when 'true' ->
			%% Line 1165
			case St1 of
			  <{'lint',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
			      let <_cor15> =
				  call 'erlang':'setelement'
				      (25, St1, C1)
			      in  call 'erlang':'setelement'
				      (5, _cor15, Es1)
			  ( <_cor76> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'export',3}}] )
	    -| ['compiler_generated'] )
	end
'export_type'/3 =
    %% Line 1170
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,ETs,St0 = {'lint',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,Usage,_cor58,_cor59,_cor60,ETs0}> when 'true' ->
	      %% Line 1171
	      ( case Usage of
		  ( <( {'usage',_cor61,_cor62,_cor63,_rec61}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1172
			try
			    let <_cor18> =
				( fun (_cor15,_cor14) ->
				      case <_cor15,_cor14> of
					<TA = {T,A},{E,U,St2}>
					    when let <_cor6> =
						  call 'erlang':'is_atom'
						      (T)
					      in  let <_cor7> =
						      call 'erlang':'is_integer'
							  (A)
						  in  call 'erlang':'and'
							  (_cor6, _cor7) ->
					    let <_cor10> =
						%% Line 1173
						case call 'gb_sets':'is_element'
							 (TA, E) of
						  %% Line 1174
						  <'true'> when 'true' ->
						      let <Warn> = {%% Line 1175
							   'duplicated_export_type',%% Line 1175
										    TA}
						      in  %% Line 1176
							  apply 'add_warning'/3
							      (Line, Warn, St2)
						  %% Line 1177
						  <'false'> when 'true' ->
						      %% Line 1178
						      St2
						  ( <_cor9> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor9})
						    -| ['compiler_generated'] )
						end
					    in  let <_cor13> =
						    %% Line 1180
						    call 'gb_sets':'add_element'
							(TA, E)
						in  let <_cor12> =
							%% Line 1180
							call 'dict':'store'
							    (TA, Line, U)
						    in  %% Line 1180
							{_cor13,_cor12,_cor10}
					( <_cor17,_cor16> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor17,_cor16})
						-| [{'function_name',{'-export_type/3-fun-0-',2}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-export_type/3-fun-0-'}}] )
			    in  call 'lists':'foldl'
				    (_cor18, %% Line 1182
					     {ETs0,_rec61,St0}, %% Line 1182
								ETs)
			of <_cor19> ->
			    case _cor19 of
			      %% Line 1183
			      <{ETs1,UTs1,St1}> when 'true' ->
				  let <_cor22> =
				      %% Line 1184
				      call 'erlang':'setelement'
					  (5, Usage, UTs1)
				  in  %% Line 1184
				      case St1 of
					<{'lint',_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98}> when 'true' ->
					    let <_cor25> =
						call 'erlang':'setelement'
						    (30, St1, ETs1)
					    in  call 'erlang':'setelement'
						    (26, _cor25, _cor22)
					( <_cor99> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','lint'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      ( <_cor27> when 'true' ->
				    primop 'match_fail'
					({'try_clause',_cor27})
				-| ['compiler_generated'] )
			    end
			catch <_cor30,_cor29,_cor28> ->
			    case <_cor30,_cor29,_cor28> of
			      %% Line 1186
			      <'error',_cor100,_cor101> when 'true' ->
				  %% Line 1187
				  apply 'add_error'/3
				      (Line, {'bad_export_type',ETs}, St0)
			      ( <_cor30,_cor29,_cor28> when 'true' ->
				    primop 'raise'
					(_cor28, _cor29)
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor64> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','usage'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31})
		  -| [{'function_name',{'export_type',3}}] )
	    -| ['compiler_generated'] )
	end
'exports'/1 =
    %% Line 1192
    fun (_cor0) ->
	case _cor0 of
	  <{'lint',_cor3,_cor4,_cor5,Es,_cor6,Opts,_cor7,_cor8,_cor9,Defs,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}> when 'true' ->
	      %% Line 1193
	      case call 'lists':'member'
		       ('export_all', Opts) of
		%% Line 1194
		<'true'> when 'true' ->
		    Defs
		%% Line 1195
		<'false'> when 'true' ->
		    Es
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'exports',1}}] )
	    -| ['compiler_generated'] )
	end
'import'/3 =
    %% Line 1201
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,{Mod,Fs},St> when 'true' ->
	      let <Mfs> =
		  %% Line 1202
		  call 'ordsets':'from_list'
		      (Fs)
	      in  %% Line 1203
		  ( case St of
		      ( <( {'lint',_cor45,_cor46,_cor47,_cor48,_rec65,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'check_imports'/3
				     (Line, Mfs, _rec65) of
			      %% Line 1204
			      <[]> when 'true' ->
				  let <_rec66> =
				      %% Line 1205
				      apply 'add_imports'/3
					  (Mod, Mfs, _rec65)
				  in  %% Line 1205
				      call 'erlang':'setelement'
					  (6, St, _rec66)
			      %% Line 1207
			      <Efs> when 'true' ->
				  let <_cor32> =
				      %% Line 1209
				      ( fun (_cor29,_cor28) ->
					    case <_cor29,_cor28> of
					      <{'bif',{F,A},_cor133},{Err,St0}> when 'true' ->
						  let <_cor14> =
						      %% Line 1211
						      ( case apply 'is_warn_enabled'/2
								 ('bif_clash', St0) of
							  ( <( 'true'
							       -| ['compiler_generated'] )> when 'true' ->
								let <_cor12> =
								    %% Line 1212
								    apply 'bif_clash_specifically_disabled'/2
									(St0, {F,A})
								in  %% Line 1212
								    call 'erlang':'not'
									(_cor12)
							    -| ['compiler_generated'] )
							  ( <( 'false'
							       -| ['compiler_generated'] )> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							  ( <_cor11> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {( 'badarg'
									    -| ['compiler_generated'] ),_cor11}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  in  %% Line 1213
						      ( case St0 of
							  ( <( {'lint',_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_rec69,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161}
							       -| ['compiler_generated'] )> when 'true' ->
								let <AutoImpSup> =
								    apply 'is_autoimport_suppressed'/2
									(_rec69, {F,A})
								in  let <OldBif> =
									%% Line 1214
									call 'erl_internal':'old_bif'
									    (F, A)
								    in  let <_cor26> =
									    %% Line 1215
									    case <> of
									      %% Line 1216
									      <>
										  when try
											let <_cor21> =
											    call 'erlang':'=:='
												(AutoImpSup, 'false')
											in  let <_cor22> =
												call 'erlang':'and'
												    (_cor14, _cor21)
											    in  let <_cor23> =
												    call 'erlang':'=:='
													(OldBif, 'true')
												in  call 'erlang':'and'
													(_cor22, _cor23)
										    of <Try> ->
											Try
										    catch <T,R> ->
											'false' ->
										  %% Line 1217
										  apply 'add_error'/3
										      (%% Line 1218
										       Line, %% Line 1219
											     {'redefine_old_bif_import',{F,A}}, %% Line 1220
																St0)
									      %% Line 1221
									      <>
										  when try
											let <_cor25> =
											    call 'erlang':'=:='
												(AutoImpSup, 'false')
											in  call 'erlang':'and'
												(_cor14, _cor25)
										    of <Try> ->
											Try
										    catch <T,R> ->
											'false' ->
										  %% Line 1222
										  apply 'add_warning'/3
										      (%% Line 1223
										       Line, %% Line 1224
											     {'redefine_bif_import',{F,A}}, %% Line 1225
															    St0)
									      %% Line 1226
									      <> when 'true' ->
										  %% Line 1227
										  St0
									    end
									in  %% Line 1215
									    {Err,_cor26}
							    -| ['compiler_generated'] )
							  ( <_cor162> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','lint'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
					      %% Line 1229
					      <Ef,{_X_Err,St0}> when 'true' ->
						  let <_cor27> =
						      %% Line 1230
						      apply 'add_error'/3
							  (Line, %% Line 1231
								 {'redefine_import',Ef}, %% Line 1232
											 St0)
						  in  %% Line 1230
						      {'true',_cor27}
					      ( <_cor31,_cor30> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor31,_cor30})
						      -| [{'function_name',{'-import/3-fun-0-',2}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-import/3-fun-0-'}}] )
				  in  %% Line 1208
				      case %% Line 1209
					   call 'lists':'foldl'
					       (_cor32, %% Line 1234
							{'false',St}, %% Line 1234
								      Efs) of
					<{Err,St1}> when 'true' ->
					    %% Line 1235
					    case <> of
					      %% Line 1236
					      <>
						  when let <_cor34> =
							call 'erlang':'=:='
							    (Err, 'false')
						    in  let <_cor35> =
							    call 'erlang':'is_boolean'
								(Err)
							in  call 'erlang':'and'
								(_cor34, _cor35) ->
						  let <_rec70> =
						      %% Line 1237
						      apply 'add_imports'/3
							  (Mod, Mfs, _rec65)
						  in  %% Line 1237
						      case St1 of
							<{'lint',_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220}> when 'true' ->
							    call 'erlang':'setelement'
								(6, St1, _rec70)
							( <_cor221> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','lint'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
					      %% Line 1239
					      <> when 'true' ->
						  %% Line 1240
						  St1
					    end
					( <_cor33> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor33})
					  -| ['compiler_generated'] )
				      end
			    end
			-| ['compiler_generated'] )
		      ( <_cor73> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','lint'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor44,_cor43,_cor42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor44,_cor43,_cor42})
		  -| [{'function_name',{'import',3}}] )
	    -| ['compiler_generated'] )
	end
'check_imports'/3 =
    %% Line 1244
    fun (_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 1245
	    ( fun (_cor7,_cor6) ->
		  %% Line 1246
		  case call 'orddict':'find'
			   (_cor7, _cor0) of
		    %% Line 1247
		    <{'ok',Mod}> when 'true' ->
			[{_cor7,Mod}|_cor6]
		    %% Line 1248
		    <'error'> when 'true' ->
			%% Line 1249
			case _cor7 of
			  <{N,A}> when 'true' ->
			      %% Line 1250
			      case call 'erl_internal':'bif'
				       (N, A) of
				%% Line 1251
				<'true'> when 'true' ->
				    %% Line 1252
				    [{'bif',_cor7,'erlang'}|_cor6]
				%% Line 1253
				<'false'> when 'true' ->
				    _cor6
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor4})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-check_imports/3-fun-0-'}}] )
	in  %% Line 1245
	    call 'lists':'foldl'
		(_cor10, %% Line 1256
			 [], _cor1)
'add_imports'/3 =
    %% Line 1258
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1259
	    ( fun (_cor4,_cor3) ->
		  call 'orddict':'store'
		      (_cor4, _cor2, _cor3)
	      -| [{'id',{0,0,'-add_imports/3-fun-0-'}}] )
	in  %% Line 1259
	    call 'lists':'foldl'
		(_cor7, _cor0, _cor1)
'imported'/3 =
    %% Line 1263
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1264
	( case _cor0 of
	    ( <( {'lint',_cor9,_cor10,_cor11,_cor12,_rec73,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'orddict':'find'
			   ({_cor2,_cor1}, _rec73) of
		    %% Line 1265
		    <{'ok',Mod}> when 'true' ->
			{'yes',Mod}
		    %% Line 1266
		    <'error'> when 'true' ->
			'no'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'on_load'/3 =
    %% Line 1272
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,Fa = {Name,Arity},St0 = {'lint',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,OnLoad0,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}>
	      when let <_cor3> =
		    %% Line 1273
		    call 'erlang':'is_atom'
			(Name)
		in  let <_cor4> =
			%% Line 1273
			call 'erlang':'is_integer'
			    (Arity)
		    in  %% Line 1273
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_rec74> =
		  %% Line 1276
		  [Fa|OnLoad0]
	      in  let <_cor7> =
		      %% Line 1276
		      call 'erlang':'setelement'
			  (13, St0, Line)
		  in  let <_cor9> =
			  %% Line 1276
			  call 'erlang':'setelement'
			      (12, _cor7, _rec74)
		      in  %% Line 1277
			  case _cor9 of
			    %% Line 1278
			    <{'lint',_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,[{_cor83,0}|[]],_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101}> when 'true' ->
				_cor9
			    %% Line 1282
			    <{'lint',_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,[{_cor112,_cor113}|[]],_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131}> when 'true' ->
				%% Line 1284
				apply 'add_error'/3
				    (Line, {'bad_on_load_arity',Fa}, _cor9)
			    %% Line 1285
			    <{'lint',_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,[_cor142|[_cor143|_cor144]],_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162}> when 'true' ->
				%% Line 1287
				apply 'add_error'/3
				    (Line, 'multiple_on_loads', _cor9)
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
	  %% Line 1289
	  <Line,Val,St> when 'true' ->
	      %% Line 1291
	      apply 'add_error'/3
		  (Line, {'bad_on_load',Val}, St)
	end
'check_on_load'/1 =
    %% Line 1293
    fun (_cor0) ->
	case _cor0 of
	  <St = {'lint',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Defined,[Fa = {_cor12,0}|[]],%% Line 1294
													     Line,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      %% Line 1295
	      case call 'gb_sets':'is_member'
		       (Fa, Defined) of
		%% Line 1296
		<'true'> when 'true' ->
		    St
		%% Line 1297
		<'false'> when 'true' ->
		    apply 'add_error'/3
			(Line, {'undefined_on_load',Fa}, St)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1299
	  <St> when 'true' ->
	      St
	end
'call_function'/4 =
    %% Line 1304
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Line,F,A,St = {'lint',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,Func,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,Cd,Usage0,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      %% Line 1305
	      case Usage0 of
		<{'usage',Cs,_cor46,_cor47,_cor48}> when 'true' ->
		    let <NA> = {%% Line 1306
			 F,%% Line 1306
			   A}
		    in  let <_cor10> =
			    %% Line 1307
			    case Cs of
			      %% Line 1308
			      <'undefined'> when 'true' ->
				  Usage0
			      %% Line 1309
			      <_cor49> when 'true' ->
				  let <_rec76> =
				      call 'dict':'append'
					  (Func, NA, Cs)
				  in  call 'erlang':'setelement'
					  (2, Usage0, _rec76)
			    end
			in  let <_rec78> =
				%% Line 1311
				[{NA,Line}|Cd]
			    in  let <_cor14> =
				    %% Line 1311
				    call 'erlang':'setelement'
					(26, St, _cor10)
				in  %% Line 1311
				    call 'erlang':'setelement'
					(25, _cor14, _rec78)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'call_function',4}}] )
	    -| ['compiler_generated'] )
	end
'function'/5 =
    %% Line 1315
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_rec80> = {_cor3,_cor2}
	in  %% Line 1316
	    case _cor0 of
	      <{'lint',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
		  let <_cor8> =
		      call 'erlang':'setelement'
			  (16, _cor0, _rec80)
		  in  let <St1> =
			  apply 'define_function'/4
			      (_cor4, _cor3, _cor2, _cor8)
		      in  %% Line 1317
			  apply 'clauses'/2
			      (_cor1, St1)
	      ( <_cor44> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','lint'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'define_function'/4 =
    %% Line 1321
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <St1> =
	    %% Line 1322
	    apply 'keyword_warning'/3
		(_cor3, _cor2, _cor0)
	in  let <NA> = {_cor2,_cor1}
	    in  %% Line 1324
		( case St1 of
		    ( <( {'lint',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec82,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
			 -| ['compiler_generated'] )> when 'true' ->
			  case call 'gb_sets':'is_member'
				   (NA, _rec82) of
			    %% Line 1325
			    <'true'> when 'true' ->
				%% Line 1326
				apply 'add_error'/3
				    (_cor3, {'redefine_function',NA}, St1)
			    %% Line 1327
			    <'false'> when 'true' ->
				let <St2> =
				    %% Line 1328
				    apply 'function_check_max_args'/3
					(_cor3, _cor1, St1)
				in  %% Line 1329
				    ( case St2 of
					( <( {'lint',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_rec85,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_rec83> =
						  call 'gb_sets':'add_element'
						      (NA, _rec85)
					      in  let <_cor14> =
						      call 'erlang':'setelement'
							  (11, St2, _rec83)
						  in  %% Line 1330
						      case apply 'imported'/3
							       (_cor2, _cor1, _cor14) of
							%% Line 1331
							<{'yes',_X_M}> when 'true' ->
							    apply 'add_error'/3
								(_cor3, {'define_import',NA}, _cor14)
							%% Line 1332
							<'no'> when 'true' ->
							    _cor14
							( <_cor16> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor16})
							  -| ['compiler_generated'] )
						      end
					  -| ['compiler_generated'] )
					( <_cor79> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','lint'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    ( <_cor17> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor17})
			      -| ['compiler_generated'] )
			  end
		      -| ['compiler_generated'] )
		    ( <_cor50> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'function_check_max_args'/3 =
    %% Line 1336
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,Arity,St>
	      when call 'erlang':'>'
		    (Arity,
		     255) ->
	      %% Line 1337
	      apply 'add_error'/3
		  (Line, {'too_many_arguments',Arity}, St)
	  %% Line 1338
	  <_cor6,_cor7,St> when 'true' ->
	      St
	end
'clauses'/2 =
    %% Line 1342
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1343
	    ( fun (_cor4,_cor3) ->
		  %% Line 1344
		  case apply 'clause'/2
			   (_cor4, _cor3) of
		    <{_cor10,St1}> when 'true' ->
			%% Line 1345
			St1
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-clauses/2-fun-0-'}}] )
	in  %% Line 1343
	    call 'lists':'foldl'
		(_cor7, _cor0, _cor1)
'clause'/2 =
    %% Line 1348
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'clause',_X_Line,H,G,B},St0> when 'true' ->
	      %% Line 1350
	      case apply 'head'/3
		       (H, [], St0) of
		<{Hvt,Binvt,St1}> when 'true' ->
		    let <_cor4> =
			%% Line 1352
			apply 'vtupdate'/2
			    (Binvt, [])
		    in  let <Vt1> =
			    %% Line 1352
			    apply 'vtupdate'/2
				(Hvt, _cor4)
			in  %% Line 1353
			    case apply 'guard'/3
				     (G, Vt1, St1) of
			      <{Gvt,St2}> when 'true' ->
				  let <Vt2> =
				      %% Line 1354
				      apply 'vtupdate'/2
					  (Gvt, Vt1)
				  in  %% Line 1355
				      case apply 'exprs'/3
					       (B, Vt2, St2) of
					<{Bvt,St3}> when 'true' ->
					    let <Upd> =
						%% Line 1356
						apply 'vtupdate'/2
						    (Bvt, Vt2)
					    in  %% Line 1357
						apply 'check_unused_vars'/3
						    (Upd, [], St3)
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor8})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'clause',2}}] )
	    -| ['compiler_generated'] )
	end
'head'/3 =
    %% Line 1364
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1365
	apply 'head'/4
	    (_cor2, _cor1, _cor1, _cor0)
'head'/4 =
    %% Line 1367
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[P|Ps],Vt,Old,St0> when 'true' ->
	      %% Line 1368
	      case apply 'pattern'/5
		       (P, Vt, Old, [], St0) of
		<{Pvt,Bvt1,St1}> when 'true' ->
		    %% Line 1369
		    case apply 'head'/4
			     (Ps, Vt, Old, St1) of
		      <{Psvt,Bvt2,St2}> when 'true' ->
			  let <_cor7> =
			      %% Line 1370
			      apply 'vtmerge_pat'/2
				  (Pvt, Psvt)
			  in  let <_cor6> =
				  %% Line 1370
				  apply 'vtmerge_pat'/2
				      (Bvt1, Bvt2)
			      in  %% Line 1370
				  {_cor7,_cor6,St2}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1371
	  <[],_X_Vt,_X_Env,St> when 'true' ->
	      {[],[],St}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'head',4}}] )
	    -| ['compiler_generated'] )
	end
'pattern'/3 =
    %% Line 1386
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1387
	apply 'pattern'/5
	    (_cor2, _cor1, _cor1, [], _cor0)
'pattern'/5 =
    %% Line 1389
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'var',_X_Line,'_'},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      %% Line 1390
	      {[],[],St}
	  %% Line 1391
	  <{'var',Line,V},_X_Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1392
	      apply 'pat_var'/5
		  (V, Line, Old, Bvt, St)
	  %% Line 1393
	  <{'char',_X_Line,_X_C},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1394
	  <{'integer',_X_Line,_X_I},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1395
	  <{'float',_X_Line,_X_F},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1396
	  <{'atom',Line,A},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      let <_cor5> =
		  %% Line 1397
		  apply 'keyword_warning'/3
		      (Line, A, St)
	      in  %% Line 1397
		  {[],[],_cor5}
	  %% Line 1398
	  <{'string',_X_Line,_X_S},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1399
	  <{'nil',_X_Line},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1400
	  <{'cons',_X_Line,H,T},Vt,Old,Bvt,St0> when 'true' ->
	      %% Line 1401
	      case apply 'pattern'/5
		       (H, Vt, Old, Bvt, St0) of
		<{Hvt,Bvt1,St1}> when 'true' ->
		    %% Line 1402
		    case apply 'pattern'/5
			     (T, Vt, Old, Bvt, St1) of
		      <{Tvt,Bvt2,St2}> when 'true' ->
			  let <_cor9> =
			      %% Line 1403
			      apply 'vtmerge_pat'/2
				  (Hvt, Tvt)
			  in  let <_cor8> =
				  %% Line 1403
				  apply 'vtmerge_pat'/2
				      (Bvt1, Bvt2)
			      in  %% Line 1403
				  {_cor9,_cor8,St2}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1404
	  <{'tuple',_X_Line,Ps},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1405
	      apply 'pattern_list'/5
		  (Ps, Vt, Old, Bvt, St)
	  %% Line 1406
	  <{'map',_X_Line,Ps},Vt,Old,Bvt,St> when 'true' ->
	      let <_cor21> =
		  %% Line 1407
		  ( fun (_cor18,_cor17) ->
			case <_cor18,_cor17> of
			  %% Line 1408
			  <{'map_field_assoc',L,_cor46,_cor47},{Psvt,Bvt0,St0}> when 'true' ->
			      let <_cor10> =
				  %% Line 1409
				  apply 'add_error'/3
				      (L, 'illegal_pattern', St0)
			      in  %% Line 1409
				  {Psvt,Bvt0,_cor10}
			  %% Line 1410
			  <{'map_field_exact',L,KP,VP},{Psvt,Bvt0,St0}> when 'true' ->
			      %% Line 1411
			      case apply 'is_valid_map_key'/3
				       (KP, 'pattern', St0) of
				%% Line 1412
				<'true'> when 'true' ->
				    %% Line 1413
				    case apply 'pattern'/5
					     (VP, Vt, Old, Bvt, St0) of
				      <{Pvt,Bvt1,St1}> when 'true' ->
					  let <_cor13> =
					      %% Line 1414
					      apply 'vtmerge_pat'/2
						  (Pvt, Psvt)
					  in  let <_cor12> =
						  %% Line 1414
						  apply 'vtmerge_pat'/2
						      (Bvt0, Bvt1)
					      in  %% Line 1414
						  {_cor13,_cor12,St1}
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor11})
					-| ['compiler_generated'] )
				    end
				%% Line 1415
				<'false'> when 'true' ->
				    let <_cor14> =
					%% Line 1416
					apply 'add_error'/3
					    (L, 'illegal_map_key', St0)
				    in  %% Line 1416
					{Psvt,Bvt0,_cor14}
				%% Line 1417
				<{'false','variable',Var}> when 'true' ->
				    let <_cor15> =
					%% Line 1418
					apply 'add_error'/3
					    (L, {'illegal_map_key_variable',Var}, St0)
				    in  %% Line 1418
					{Psvt,Bvt0,_cor15}
				( <_cor16> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor16})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor20,_cor19> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor20,_cor19})
				  -| [{'function_name',{'-pattern/5-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-pattern/5-fun-0-'}}] )
	      in  %% Line 1407
		  call 'lists':'foldl'
		      (_cor21, %% Line 1420
			       {[],[],St}, %% Line 1420
					   Ps)
	  %% Line 1423
	  <{'record_index',Line,Name,Field},_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      let <_cor26> =
		  %% Line 1426
		  ( fun (_cor23,_cor22) ->
			%% Line 1427
			apply 'pattern_field'/4
			    (Field, Name, _cor23, _cor22)
		    -| [{'id',{0,0,'-pattern/5-fun-1-'}}] )
	      in  %% Line 1424
		  case %% Line 1425
		       apply 'check_record'/4
			   (Line, Name, St, _cor26) of
		    <{Vt1,St1}> when 'true' ->
			%% Line 1429
			{Vt1,[],St1}
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor27})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1430
	  <{'record',Line,Name,Pfs},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1431
	      ( case St of
		  ( <( {'lint',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_rec86,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'dict':'find'
				 (Name, _rec86) of
			  %% Line 1432
			  <{'ok',{_X_Line,Fields}}> when 'true' ->
			      let <St1> =
				  %% Line 1433
				  apply 'used_record'/2
				      (Name, St)
			      in  %% Line 1434
				  apply 'pattern_fields'/7
				      (Pfs, Name, Fields, Vt, Old, Bvt, St1)
			  %% Line 1435
			  <'error'> when 'true' ->
			      let <_cor31> =
				  apply 'add_error'/3
				      (Line, {'undefined_record',Name}, St)
			      in  {[],[],_cor31}
			  ( <_cor32> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor32})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor76> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1437
	  <{'bin',_cor77,Fs},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1438
	      apply 'pattern_bin'/5
		  (Fs, Vt, Old, Bvt, St)
	  %% Line 1439
	  <{'op',_X_Line,'++',{'nil',_cor78},R},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1440
	      apply 'pattern'/5
		  (R, Vt, Old, Bvt, St)
	  %% Line 1441
	  <{'op',_X_Line,'++',{'cons',Li,{'char',_X_L2,_X_C},T},R},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1442
	      apply 'pattern'/5
		  ({'op',Li,'++',T,R}, Vt, Old, Bvt, St)
	  %% Line 1443
	  <{'op',_X_Line,'++',{'cons',Li,{'integer',_X_L2,_X_I},T},R},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1444
	      apply 'pattern'/5
		  ({'op',Li,'++',T,R}, Vt, Old, Bvt, St)
	  %% Line 1445
	  <{'op',_X_Line,'++',{'string',_X_Li,_X_S},R},Vt,Old,Bvt,St> when 'true' ->
	      %% Line 1446
	      apply 'pattern'/5
		  (R, Vt, Old, Bvt, St)
	  %% Line 1447
	  <{'match',_X_Line,Pat1,Pat2},Vt,Old,Bvt,St0> when 'true' ->
	      %% Line 1448
	      case apply 'pattern'/5
		       (Pat1, Vt, Old, Bvt, St0) of
		<{Lvt,Bvt1,St1}> when 'true' ->
		    %% Line 1449
		    case apply 'pattern'/5
			     (Pat2, Vt, Old, Bvt, St1) of
		      <{Rvt,Bvt2,St2}> when 'true' ->
			  let <St3> =
			      %% Line 1450
			      apply 'reject_bin_alias'/3
				  (Pat1, Pat2, St2)
			  in  let <_cor37> =
				  %% Line 1451
				  apply 'vtmerge_pat'/2
				      (Lvt, Rvt)
			      in  let <_cor36> =
				      %% Line 1451
				      apply 'vtmerge_pat'/2
					  (Bvt1, Bvt2)
				  in  %% Line 1451
				      {_cor37,_cor36,St3}
		      ( <_cor34> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor34})
			-| ['compiler_generated'] )
		    end
		( <_cor33> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1453
	  <Pat,_X_Vt,_X_Old,_X_Bvt,St> when 'true' ->
	      %% Line 1454
	      case apply 'is_pattern_expr'/1
		       (Pat) of
		%% Line 1455
		<'true'> when 'true' ->
		    {[],[],St}
		%% Line 1456
		<'false'> when 'true' ->
		    let <_cor38> =
			call 'erlang':'element'
			    (2, Pat)
		    in  let <_cor39> =
			    apply 'add_error'/3
				(_cor38, 'illegal_pattern', St)
			in  {[],[],_cor39}
		( <_cor40> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor40})
		  -| ['compiler_generated'] )
	      end
	end
'pattern_list'/5 =
    %% Line 1459
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 1460
	    ( fun (_cor9,_cor8) ->
		  case <_cor9,_cor8> of
		    <P,{Psvt,Bvt,St0}> when 'true' ->
			%% Line 1461
			case apply 'pattern'/5
				 (P, _cor3, _cor2, _cor1, St0) of
			  <{Pvt,Bvt1,St1}> when 'true' ->
			      let <_cor7> =
				  %% Line 1462
				  apply 'vtmerge_pat'/2
				      (Pvt, Psvt)
			      in  let <_cor6> =
				      %% Line 1462
				      apply 'vtmerge_pat'/2
					  (Bvt, Bvt1)
				  in  %% Line 1462
				      {_cor7,_cor6,St1}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor11,_cor10> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor11,_cor10})
			    -| [{'function_name',{'-pattern_list/5-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-pattern_list/5-fun-0-'}}] )
	in  %% Line 1460
	    call 'lists':'foldl'
		(_cor12, %% Line 1463
			 {[],[],_cor0}, _cor4)
'reject_bin_alias_expr'/3 =
    %% Line 1468
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <P = {'bin',_cor8,_cor9},{'match',_cor10,P0,E},St0> when 'true' ->
	      let <St> =
		  %% Line 1469
		  apply 'reject_bin_alias'/3
		      (P, P0, St0)
	      in  %% Line 1470
		  apply 'reject_bin_alias_expr'/3
		      (P, E, St)
	  %% Line 1471
	  <P = {'match',_cor11,_cor12,_cor13},{'match',_cor14,P0,E},St0> when 'true' ->
	      let <St> =
		  %% Line 1472
		  apply 'reject_bin_alias'/3
		      (P, P0, St0)
	      in  %% Line 1473
		  apply 'reject_bin_alias_expr'/3
		      (P, E, St)
	  %% Line 1474
	  <_cor15,_cor16,St> when 'true' ->
	      St
	end
'reject_bin_alias'/3 =
    %% Line 1485
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'bin',Line,_cor11},{'bin',_cor12,_cor13},St> when 'true' ->
	      %% Line 1486
	      apply 'add_error'/3
		  (Line, 'illegal_bin_pattern', St)
	  %% Line 1487
	  <{'cons',_cor14,H1,T1},{'cons',_cor15,H2,T2},St0> when 'true' ->
	      let <St> =
		  %% Line 1488
		  apply 'reject_bin_alias'/3
		      (H1, H2, St0)
	      in  %% Line 1489
		  apply 'reject_bin_alias'/3
		      (T1, T2, St)
	  %% Line 1490
	  <{'tuple',_cor16,Es1},{'tuple',_cor17,Es2},St> when 'true' ->
	      %% Line 1491
	      apply 'reject_bin_alias_list'/3
		  (Es1, Es2, St)
	  %% Line 1492
	  <{'record',_cor18,Name1,Pfs1},{'record',_cor19,Name2,Pfs2},St = %% Line 1493
									  {'lint',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,Recs,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}> when 'true' ->
	      let <_cor5> =
		  %% Line 1494
		  call 'dict':'find'
		      (Name1, Recs)
	      in  let <_cor4> =
		      %% Line 1494
		      call 'dict':'find'
			  (Name2, Recs)
		  in  %% Line 1494
		      case <_cor5,_cor4> of
			%% Line 1495
			<{'ok',{_X_Line1,Fields1}},{'ok',{_X_Line2,Fields2}}> when 'true' ->
			    %% Line 1496
			    apply 'reject_bin_alias_rec'/5
				(Pfs1, Pfs2, Fields1, Fields2, St)
			%% Line 1497
			<_cor48,_cor49> when 'true' ->
			    %% Line 1500
			    St
		      end
	  %% Line 1502
	  <{'match',_cor50,P1,P2},P,St0> when 'true' ->
	      let <St> =
		  %% Line 1503
		  apply 'reject_bin_alias'/3
		      (P1, P, St0)
	      in  %% Line 1504
		  apply 'reject_bin_alias'/3
		      (P2, P, St)
	  %% Line 1505
	  <P,M = {'match',_cor51,_cor52,_cor53},St> when 'true' ->
	      %% Line 1506
	      apply 'reject_bin_alias'/3
		  (M, P, St)
	  %% Line 1507
	  <_X_P1,_X_P2,St> when 'true' ->
	      St
	end
'reject_bin_alias_list'/3 =
    %% Line 1509
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E1|Es1],[E2|Es2],St0> when 'true' ->
	      let <St> =
		  %% Line 1510
		  apply 'reject_bin_alias'/3
		      (E1, E2, St0)
	      in  %% Line 1511
		  apply 'reject_bin_alias_list'/3
		      (Es1, Es2, St)
	  %% Line 1512
	  <_cor7,_cor8,St> when 'true' ->
	      St
	end
'reject_bin_alias_rec'/5 =
    %% Line 1514
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <PfsA1> =
	    %% Line 1516
	    apply 'rbia_field_vars'/1
		(_cor4)
	in  let <PfsB1> =
		%% Line 1517
		apply 'rbia_field_vars'/1
		    (_cor3)
	    in  let <_cor7> =
		    %% Line 1518
		    call 'lists':'reverse'
			(_cor2)
		in  let <FieldsA1> =
			%% Line 1518
			apply 'rbia_fields'/3
			    (_cor7, 0, [])
		    in  let <_cor9> =
			    %% Line 1519
			    call 'lists':'reverse'
				(_cor1)
			in  let <FieldsB1> =
				%% Line 1519
				apply 'rbia_fields'/3
				    (_cor9, 0, [])
			    in  let <FieldsA> =
				    %% Line 1520
				    call 'sofs':'relation'
					(FieldsA1)
				in  let <PfsA> =
					%% Line 1521
					call 'sofs':'relation'
					    (PfsA1)
				    in  let <A> =
					    %% Line 1522
					    call 'sofs':'join'
						(FieldsA, 1, PfsA, 1)
					in  let <FieldsB> =
						%% Line 1523
						call 'sofs':'relation'
						    (FieldsB1)
					    in  let <PfsB> =
						    %% Line 1524
						    call 'sofs':'relation'
							(PfsB1)
						in  let <B> =
							%% Line 1525
							call 'sofs':'join'
							    (FieldsB, 1, PfsB, 1)
						    in  let <C> =
							    %% Line 1526
							    call 'sofs':'join'
								(A, 2, B, 2)
							in  let <_cor20> =
								%% Line 1527
								( fun (_cor18) ->
								      case _cor18 of
									<{_cor29,_cor30,P1,_cor31,P2}> when 'true' ->
									    {P1,P2}
									( <_cor19> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor19})
										-| [{'function_name',{'-reject_bin_alias_rec/5-fun-0-',1}}] )
									  -| ['compiler_generated'] )
								      end
								  -| [{'id',{0,0,'-reject_bin_alias_rec/5-fun-0-'}}] )
							    in  let <D> =
								    %% Line 1527
								    call 'sofs':'projection'
									({'external',_cor20}, C)
								in  let <E> =
									%% Line 1528
									call 'sofs':'to_external'
									    (D)
								    in  %% Line 1529
									case call 'lists':'unzip'
										 (E) of
									  <{Ps1,Ps2}> when 'true' ->
									      %% Line 1530
									      apply 'reject_bin_alias_list'/3
										  (Ps1, Ps2, _cor0)
									  ( <_cor23> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor23})
									    -| ['compiler_generated'] )
									end
'rbia_field_vars'/1 =
    %% Line 1532
    fun (_cor0) ->
	%% Line 1533
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[{'record_field',_cor6,{'atom',_cor7,Name},Pat}|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [{Name,Pat}|_cor4]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'rbia_fields'/3 =
    %% Line 1535
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'record_field',_cor8,{'atom',_cor9,Name},_cor10}|Fs],I,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1536
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 1536
		  apply 'rbia_fields'/3
		      (Fs, _cor3, [{Name,I}|Acc])
	  %% Line 1537
	  <[_cor11|Fs],I,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1538
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 1538
		  apply 'rbia_fields'/3
		      (Fs, _cor4, Acc)
	  %% Line 1539
	  <[],_cor12,Acc> when 'true' ->
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rbia_fields',3}}] )
	    -| ['compiler_generated'] )
	end
'is_pattern_expr'/1 =
    %% Line 1544
    fun (_cor0) ->
	%% Line 1545
	case apply 'is_pattern_expr_1'/1
		 (_cor0) of
	  %% Line 1546
	  <'false'> when 'true' ->
	      'false'
	  %% Line 1547
	  <'true'> when 'true' ->
	      %% Line 1550
	      case call 'erl_eval':'partial_eval'
		       (_cor0) of
		%% Line 1551
		<{'integer',_cor4,_cor5}> when 'true' ->
		    'true'
		%% Line 1552
		<{'char',_cor6,_cor7}> when 'true' ->
		    'true'
		%% Line 1553
		<{'float',_cor8,_cor9}> when 'true' ->
		    'true'
		%% Line 1554
		<{'atom',_cor10,_cor11}> when 'true' ->
		    'true'
		%% Line 1555
		<_cor12> when 'true' ->
		    'false'
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'is_pattern_expr_1'/1 =
    %% Line 1559
    fun (_cor0) ->
	case _cor0 of
	  <{'char',_X_Line,_X_C}> when 'true' ->
	      'true'
	  %% Line 1560
	  <{'integer',_X_Line,_X_I}> when 'true' ->
	      'true'
	  %% Line 1561
	  <{'float',_X_Line,_X_F}> when 'true' ->
	      'true'
	  %% Line 1562
	  <{'atom',_X_Line,_X_A}> when 'true' ->
	      'true'
	  %% Line 1563
	  <{'tuple',_X_Line,Es}> when 'true' ->
	      %% Line 1564
	      call 'lists':'all'
		  (( 'is_pattern_expr'/1
		     -| [{'id',{0,0,'-is_pattern_expr_1/1-fun-0-'}}] ), Es)
	  %% Line 1565
	  <{'nil',_X_Line}> when 'true' ->
	      'true'
	  %% Line 1566
	  <{'cons',_X_Line,H,T}> when 'true' ->
	      %% Line 1567
	      ( case apply 'is_pattern_expr_1'/1
			 (H) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_pattern_expr_1'/1
			    (T)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1568
	  <{'op',_X_Line,Op,A}> when 'true' ->
	      %% Line 1569
	      ( case call 'erl_internal':'arith_op'
			 (Op, 1) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_pattern_expr_1'/1
			    (A)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor3> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor3}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1570
	  <{'op',_X_Line,Op,A1,A2}> when 'true' ->
	      %% Line 1571
	      ( case call 'erl_internal':'arith_op'
			 (Op, 2) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			call 'lists':'all'
			    (( 'is_pattern_expr'/1
			       -| [{'id',{0,0,'-is_pattern_expr_1/1-fun-1-'}}] ), [A1|[A2|[]]])
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor5> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor5}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1572
	  <_X_Other> when 'true' ->
	      'false'
	end
'pattern_bin'/5 =
    %% Line 1578
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 1579
	    ( fun (_cor6,_cor5) ->
		  %% Line 1580
		  apply 'pattern_element'/4
		      (_cor6, _cor3, _cor2, _cor5)
	      -| [{'id',{0,0,'-pattern_bin/5-fun-0-'}}] )
	in  %% Line 1579
	    case call 'lists':'foldl'
		     (_cor9, %% Line 1582
			     {0,[],_cor1,_cor0}, _cor4) of
	      <{_X_Sz,Esvt,Bvt,St1}> when 'true' ->
		  %% Line 1583
		  {Esvt,Bvt,St1}
	      ( <_cor10> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor10})
		-| ['compiler_generated'] )
	    end
'pattern_element'/4 =
    %% Line 1585
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Be = {'bin_element',Line,{'string',_cor10,_cor11},Size,Ts},Vt,%% Line 1586
									 Old,Acc = %% Line 1586
										   {Sz,Esvt,Bvt,St0}> when 'true' ->
	      %% Line 1587
	      case apply 'good_string_size_type'/2
		       (Size, Ts) of
		%% Line 1588
		<'true'> when 'true' ->
		    %% Line 1589
		    apply 'pattern_element_1'/4
			(Be, Vt, Old, Acc)
		%% Line 1590
		<'false'> when 'true' ->
		    let <St> =
			%% Line 1591
			apply 'add_error'/3
			    (Line, 'typed_literal_string', St0)
		    in  %% Line 1592
			{Sz,Esvt,Bvt,St}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1594
	  <Be,Vt,Old,Acc> when 'true' ->
	      %% Line 1595
	      apply 'pattern_element_1'/4
		  (Be, Vt, Old, Acc)
	end
'pattern_element_1'/4 =
    %% Line 1597
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'bin_element',Line,E,Sz0,Ts},Vt,Old,{Size0,Esvt,Bvt,St0}> when 'true' ->
	      %% Line 1598
	      case apply 'pat_bit_expr'/4
		       (E, Old, Bvt, St0) of
		<{Pevt,Bvt1,St1}> when 'true' ->
		    let <_cor5> =
			%% Line 1600
			apply 'vtmerge'/2
			    (Vt, Esvt)
		    in  %% Line 1600
			case apply 'pat_bit_size'/4
				 (Sz0, _cor5, Bvt, St1) of
			  <{Sz1,Szvt,Bvt2,St2}> when 'true' ->
			      %% Line 1601
			      case apply 'bit_type'/4
				       (Line, Sz1, Ts, St2) of
				<{Sz2,Bt,St3}> when 'true' ->
				    %% Line 1602
				    case apply 'bit_size_check'/4
					     (Line, Sz2, Bt, St3) of
				      <{Sz3,St4}> when 'true' ->
					  let <_cor11> =
					      %% Line 1603
					      case <E,Sz3> of
						%% Line 1604
						<{'string',_cor22,S},'all'> when 'true' ->
						    let <_cor9> =
							call 'erlang':'length'
							    (S)
						    in  call 'erlang':'*'
							    (8, _cor9)
						%% Line 1605
						<_cor23,_cor24> when 'true' ->
						    Sz3
					      end
					  in  %% Line 1607
					      case apply 'add_bit_size'/5
						       (Line, _cor11, Size0, 'false', St4) of
						<{Size1,St5}> when 'true' ->
						    let <_cor16> =
							%% Line 1608
							apply 'vtmerge'/2
							    (Pevt, Esvt)
						    in  let <_cor17> =
							    %% Line 1608
							    apply 'vtmerge'/2
								(Szvt, _cor16)
							in  let <_cor14> =
								%% Line 1609
								apply 'vtmerge'/2
								    (Bvt, Bvt1)
							    in  let <_cor15> =
								    %% Line 1609
								    apply 'vtmerge'/2
									(Bvt2, _cor14)
								in  %% Line 1608
								    {Size1,_cor17,_cor15,%% Line 1609
											 St5}
						( <_cor13> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor13})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'pattern_element_1',4}}] )
	    -| ['compiler_generated'] )
	end
'good_string_size_type'/2 =
    %% Line 1611
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'default','default'> when 'true' ->
	      %% Line 1612
	      'true'
	  %% Line 1613
	  <'default',Ts> when 'true' ->
	      let <_cor4> =
		  %% Line 1614
		  ( fun (_cor2) ->
			case _cor2 of
			  <'utf8'> when 'true' ->
			      'true'
			  %% Line 1615
			  <'utf16'> when 'true' ->
			      'true'
			  %% Line 1616
			  <'utf32'> when 'true' ->
			      'true'
			  %% Line 1617
			  <_cor7> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-good_string_size_type/2-fun-0-'}}] )
	      in  %% Line 1614
		  call 'lists':'any'
		      (_cor4, %% Line 1618
			      Ts)
	  %% Line 1619
	  <_cor8,_cor9> when 'true' ->
	      'false'
	end
'pat_bit_expr'/4 =
    %% Line 1625
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'var',_cor12,'_'},_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1626
	  <{'var',Ln,V},Old,Bvt,St> when 'true' ->
	      apply 'pat_var'/5
		  (V, Ln, Old, Bvt, St)
	  %% Line 1627
	  <{'string',_cor13,_cor14},_X_Old,_X_Bvt,St> when 'true' ->
	      {[],[],St}
	  %% Line 1628
	  <{'bin',L,_cor15},_X_Old,_X_Bvt,St> when 'true' ->
	      let <_cor4> =
		  %% Line 1629
		  apply 'add_error'/3
		      (L, 'illegal_pattern', St)
	      in  %% Line 1629
		  {[],[],_cor4}
	  %% Line 1630
	  <P,_X_Old,_X_Bvt,St> when 'true' ->
	      %% Line 1631
	      case apply 'is_pattern_expr'/1
		       (P) of
		%% Line 1632
		<'true'> when 'true' ->
		    {[],[],St}
		%% Line 1633
		<'false'> when 'true' ->
		    let <_cor5> =
			call 'erlang':'element'
			    (2, P)
		    in  let <_cor6> =
			    apply 'add_error'/3
				(_cor5, 'illegal_pattern', St)
			in  {[],[],_cor6}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'pat_bit_size'/4 =
    %% Line 1640
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'default',_X_Vt,_X_Bvt,St> when 'true' ->
	      {'default',[],[],St}
	  %% Line 1641
	  <{'atom',_X_Line,'all'},_X_Vt,_X_Bvt,St> when 'true' ->
	      {'all',[],[],St}
	  %% Line 1642
	  <{'var',Lv,V},Vt0,Bvt0,St0> when 'true' ->
	      %% Line 1643
	      case apply 'pat_binsize_var'/5
		       (V, Lv, Vt0, Bvt0, St0) of
		<{Vt,Bvt,St1}> when 'true' ->
		    %% Line 1644
		    {'unknown',Vt,Bvt,St1}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1645
	  <Size,_X_Vt,_X_Bvt,St> when 'true' ->
	      let <Line> =
		  %% Line 1646
		  call 'erlang':'element'
		      (2, Size)
	      in  %% Line 1647
		  case apply 'is_pattern_expr'/1
			   (Size) of
		    %% Line 1648
		    <'true'> when 'true' ->
			%% Line 1649
			case call 'erl_eval':'partial_eval'
				 (Size) of
			  %% Line 1650
			  <{'integer',_cor14,I}>
			      when call 'erlang':'=:='
				    (_cor14,
				     Line) ->
			      {I,[],[],St}
			  %% Line 1651
			  <_X_Other> when 'true' ->
			      let <_cor6> =
				  apply 'add_error'/3
				      (Line, 'illegal_bitsize', St)
			      in  {'unknown',[],[],_cor6}
			end
		    %% Line 1653
		    <'false'> when 'true' ->
			let <_cor8> =
			    apply 'add_error'/3
				(Line, 'illegal_bitsize', St)
			in  {'unknown',[],[],_cor8}
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	end
'expr_bin'/4 =
    %% Line 1659
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1660
	    ( fun (_cor5,_cor4) ->
		  apply 'bin_element'/4
		      (_cor5, _cor2, _cor4, _cor0)
	      -| [{'id',{0,0,'-expr_bin/4-fun-0-'}}] )
	in  %% Line 1660
	    case call 'lists':'foldl'
		     (_cor8, %% Line 1661
			     {0,[],_cor1}, _cor3) of
	      <{_X_Sz,Esvt,St1}> when 'true' ->
		  %% Line 1662
		  {Esvt,St1}
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'bin_element'/4 =
    %% Line 1664
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'bin_element',Line,E,Sz0,Ts},Vt,{Size0,Esvt,St0},Check> when 'true' ->
	      %% Line 1665
	      case apply Check
		       (E, Vt, St0) of
		<{Vt1,St1}> when 'true' ->
		    %% Line 1666
		    case apply 'bit_size'/4
			     (Sz0, Vt, St1, Check) of
		      <{Sz1,Vt2,St2}> when 'true' ->
			  %% Line 1667
			  case apply 'bit_type'/4
				   (Line, Sz1, Ts, St2) of
			    <{Sz2,Bt,St3}> when 'true' ->
				%% Line 1668
				case apply 'bit_size_check'/4
					 (Line, Sz2, Bt, St3) of
				  <{Sz3,St4}> when 'true' ->
				      %% Line 1669
				      case apply 'add_bit_size'/5
					       (Line, Sz3, Size0, 'true', St4) of
					<{Size1,St5}> when 'true' ->
					    let <_cor9> =
						%% Line 1670
						apply 'vtmerge'/1
						    ([Vt2|[Vt1|[Esvt|[]]]])
					    in  %% Line 1670
						{Size1,_cor9,St5}
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor8})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'bin_element',4}}] )
	    -| ['compiler_generated'] )
	end
'bit_size'/4 =
    %% Line 1672
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'default',_X_Vt,St,_X_Check> when 'true' ->
	      {'default',[],St}
	  %% Line 1673
	  <{'atom',_X_Line,'all'},_X_Vt,St,_X_Check> when 'true' ->
	      {'all',[],St}
	  %% Line 1674
	  <Size,Vt,St,Check> when 'true' ->
	      %% Line 1677
	      ( case St of
		  ( <( {'lint',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec87,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'is_gexpr'/2
				 (Size, _rec87) of
			  %% Line 1678
			  <'true'> when 'true' ->
			      %% Line 1679
			      case call 'erl_eval':'partial_eval'
				       (Size) of
				%% Line 1680
				<{'integer',_X_ILn,I}> when 'true' ->
				    {I,[],St}
				%% Line 1681
				<_X_Other> when 'true' ->
				    %% Line 1682
				    case apply Check
					     (Size, Vt, St) of
				      <{Evt,St1}> when 'true' ->
					  %% Line 1683
					  {'unknown',Evt,St1}
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor6})
					-| ['compiler_generated'] )
				    end
			      end
			  %% Line 1685
			  <'false'> when 'true' ->
			      %% Line 1686
			      case apply Check
				       (Size, Vt, St) of
				<{Evt,St1}> when 'true' ->
				    %% Line 1687
				    {'unknown',Evt,St1}
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor42> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'bit_type'/4 =
    %% Line 1693
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1694
	case call 'erl_bits':'set_bit_type'
		 (_cor2, _cor1) of
	  %% Line 1695
	  <{'ok',Size1,Bt}> when 'true' ->
	      {Size1,Bt,_cor0}
	  %% Line 1696
	  <{'error',What}> when 'true' ->
	      %% Line 1698
	      case call 'erl_bits':'set_bit_type'
		       ('default', []) of
		<{'ok',Size1,Bt}> when 'true' ->
		    let <_cor5> =
			%% Line 1699
			apply 'add_error'/3
			    (_cor3, What, _cor0)
		    in  %% Line 1699
			{Size1,Bt,_cor5}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'bit_size_check'/4 =
    %% Line 1706
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Line,'unknown',_cor17,St> when 'true' ->
	      {'unknown',St}
	  %% Line 1707
	  <_X_Line,'undefined',{'bittype',Type,_cor18,_cor19,_cor20},St> when 'true' ->
	      let <_cor6> =
		  %% Line 1708
		  call 'erlang':'=:='
		      (Type, 'utf8')
	      in  let <_cor5> =
		      %% Line 1708
		      call 'erlang':'=:='
			  (Type, 'utf16')
		  in  let <_cor7> =
			  %% Line 1708
			  call 'erlang':'or'
			      (_cor6, _cor5)
		      in  let <_cor4> =
			      %% Line 1708
			      call 'erlang':'=:='
				  (Type, 'utf32')
			  in  %% Line 1708
			      case call 'erlang':'or'
				       (_cor7, _cor4) of
				<'true'> when 'true' ->
				    %% Line 1709
				    {'undefined',St}
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
	  %% Line 1710
	  <Line,'all',{'bittype',Type,_cor21,_cor22,_cor23},St> when 'true' ->
	      %% Line 1711
	      case Type of
		%% Line 1712
		<'binary'> when 'true' ->
		    {'all',St}
		%% Line 1713
		<_cor24> when 'true' ->
		    let <_cor9> =
			apply 'add_error'/3
			    (Line, 'illegal_bitsize', St)
		    in  {'unknown',_cor9}
	      end
	  %% Line 1715
	  <Line,Size,{'bittype',Type,Unit,_cor25,_cor26},St> when 'true' ->
	      let <Sz> =
		  %% Line 1716
		  call 'erlang':'*'
		      (Unit, Size)
	      in  let <St2> =
		      %% Line 1717
		      apply 'elemtype_check'/4
			  (Line, Type, Sz, St)
		  in  %% Line 1718
		      {Sz,St2}
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'bit_size_check',4}}] )
	    -| ['compiler_generated'] )
	end
'elemtype_check'/4 =
    %% Line 1720
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Line,'float',32,St> when 'true' ->
	      St
	  %% Line 1721
	  <_X_Line,'float',64,St> when 'true' ->
	      St
	  %% Line 1722
	  <Line,'float',_X_Size,St> when 'true' ->
	      %% Line 1723
	      apply 'add_warning'/3
		  (Line, {'bad_bitsize',[102|[108|[111|[97|[116]]]]]}, St)
	  %% Line 1724
	  <_X_Line,_X_Type,_X_Size,St> when 'true' ->
	      St
	end
'add_bit_size'/5 =
    %% Line 1730
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Line,_X_Sz1,'all','false',St> when 'true' ->
	      let <_cor5> =
		  %% Line 1731
		  apply 'add_error'/3
		      (Line, 'unsized_binary_not_at_end', St)
	      in  %% Line 1731
		  {'all',_cor5}
	  %% Line 1732
	  <_X_Line,_X_Sz1,'all','true',St> when 'true' ->
	      %% Line 1733
	      {'all',St}
	  %% Line 1734
	  <_X_Line,'all',_X_Sz2,_X_B,St> when 'true' ->
	      {'all',St}
	  %% Line 1735
	  <_X_Line,'undefined',_X_Sz2,_X_B,St> when 'true' ->
	      {'undefined',St}
	  %% Line 1736
	  <_X_Line,'unknown',_X_Sz2,_X_B,St> when 'true' ->
	      {'unknown',St}
	  %% Line 1737
	  <_X_Line,_X_Sz1,'undefined',_X_B,St> when 'true' ->
	      {'unknown',St}
	  %% Line 1738
	  <_X_Line,_X_Sz1,'unknown',_X_B,St> when 'true' ->
	      {'unknown',St}
	  %% Line 1739
	  <_X_Line,Sz1,Sz2,_X_B,St> when 'true' ->
	      let <_cor6> =
		  call 'erlang':'+'
		      (Sz1, Sz2)
	      in  {_cor6,St}
	end
'guard'/3 =
    %% Line 1746
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[L|R],Vt,St0>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1747
	      case apply 'guard_tests'/3
		       (L, Vt, St0) of
		<{Gvt,St1}> when 'true' ->
		    let <_cor4> =
			%% Line 1748
			apply 'vtupdate'/2
			    (Gvt, Vt)
		    in  %% Line 1748
			case apply 'guard'/3
				 (R, _cor4, St1) of
			  <{Gsvt,St2}> when 'true' ->
			      let <_cor6> =
				  %% Line 1749
				  apply 'vtupdate'/2
				      (Gvt, Gsvt)
			      in  %% Line 1749
				  {_cor6,St2}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1750
	  <L,Vt,St0> when 'true' ->
	      %% Line 1751
	      apply 'guard_tests'/3
		  (L, Vt, St0)
	end
'guard_tests'/3 =
    %% Line 1754
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[G|Gs],Vt,St0> when 'true' ->
	      %% Line 1755
	      case apply 'guard_test'/3
		       (G, Vt, St0) of
		<{Gvt,St1}> when 'true' ->
		    let <_cor4> =
			%% Line 1756
			apply 'vtupdate'/2
			    (Gvt, Vt)
		    in  %% Line 1756
			case apply 'guard_tests'/3
				 (Gs, _cor4, St1) of
			  <{Gsvt,St2}> when 'true' ->
			      let <_cor6> =
				  %% Line 1757
				  apply 'vtupdate'/2
				      (Gvt, Gsvt)
			      in  %% Line 1757
				  {_cor6,St2}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1758
	  <[],_X_Vt,St> when 'true' ->
	      {[],St}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'guard_tests',3}}] )
	    -| ['compiler_generated'] )
	end
'guard_test'/3 =
    %% Line 1766
    fun (_cor2,_cor1,_cor0) ->
	let <St1> =
	    %% Line 1767
	    apply 'obsolete_guard'/2
		(_cor2, _cor0)
	in  %% Line 1768
	    apply 'guard_test2'/3
		(_cor2, _cor1, St1)
'guard_test2'/3 =
    %% Line 1771
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'call',Line,{'atom',Lr,'record'},[E|[A|[]]]},Vt,St0> when 'true' ->
	      %% Line 1772
	      apply 'gexpr'/3
		  ({'call',Line,{'atom',Lr,'is_record'},[E|[A|[]]]}, Vt, St0)
	  %% Line 1773
	  <G = {'call',Line,{'atom',_X_La,F},As},Vt,St0> when 'true' ->
	      %% Line 1774
	      case apply 'gexpr_list'/3
		       (As, Vt, St0) of
		<{Asvt,St1}> when 'true' ->
		    let <A> =
			%% Line 1775
			call 'erlang':'length'
			    (As)
		    in  %% Line 1776
			case call 'erl_internal':'type_test'
				 (F, A) of
			  %% Line 1777
			  <'true'>
			      when let <_cor5> =
				    call 'erlang':'=/='
					(F, 'is_record')
				in  let <_cor6> =
					call 'erlang':'=/='
					    (A, 2)
				    in  call 'erlang':'and'
					    (_cor5, _cor6) ->
			      %% Line 1778
			      case apply 'no_guard_bif_clash'/2
				       (St1, {F,A}) of
				%% Line 1779
				<'false'> when 'true' ->
				    let <_cor7> =
					%% Line 1780
					apply 'add_error'/3
					    (Line, {'illegal_guard_local_call',{F,A}}, St1)
				    in  %% Line 1780
					{Asvt,_cor7}
				%% Line 1781
				<'true'> when 'true' ->
				    %% Line 1782
				    {Asvt,St1}
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor8})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1784
			  <_cor13> when 'true' ->
			      %% Line 1785
			      apply 'gexpr'/3
				  (G, Vt, St0)
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1787
	  <G,Vt,St> when 'true' ->
	      %% Line 1789
	      apply 'gexpr'/3
		  (G, Vt, St)
	end
'gexpr'/3 =
    %% Line 1795
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'var',Line,V},Vt,St> when 'true' ->
	      %% Line 1796
	      apply 'expr_var'/4
		  (V, Line, Vt, St)
	  %% Line 1797
	  <{'char',_X_Line,_X_C},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 1798
	  <{'integer',_X_Line,_X_I},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 1799
	  <{'float',_X_Line,_X_F},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 1800
	  <{'atom',Line,A},_X_Vt,St> when 'true' ->
	      let <_cor3> =
		  %% Line 1801
		  apply 'keyword_warning'/3
		      (Line, A, St)
	      in  %% Line 1801
		  {[],_cor3}
	  %% Line 1802
	  <{'string',_X_Line,_X_S},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 1803
	  <{'nil',_X_Line},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 1804
	  <{'cons',_X_Line,H,T},Vt,St> when 'true' ->
	      %% Line 1805
	      apply 'gexpr_list'/3
		  ([H|[T|[]]], Vt, St)
	  %% Line 1806
	  <{'tuple',_X_Line,Es},Vt,St> when 'true' ->
	      %% Line 1807
	      apply 'gexpr_list'/3
		  (Es, Vt, St)
	  %% Line 1808
	  <{'map',_X_Line,Es},Vt,St> when 'true' ->
	      let <_cor4> =
		  %% Line 1809
		  apply 'check_assoc_fields'/2
		      (Es, St)
	      in  %% Line 1809
		  apply 'map_fields'/4
		      (Es, Vt, _cor4, ( 'gexpr_list'/3
					-| [{'id',{0,0,'-gexpr/3-fun-0-'}}] ))
	  %% Line 1810
	  <{'map',_X_Line,Src,Es},Vt,St> when 'true' ->
	      %% Line 1811
	      case apply 'gexpr'/3
		       (Src, Vt, St) of
		<{Svt,St1}> when 'true' ->
		    %% Line 1812
		    case apply 'map_fields'/4
			     (Es, Vt, St1, ( 'gexpr_list'/3
					     -| [{'id',{0,0,'-gexpr/3-fun-1-'}}] )) of
		      <{Fvt,St2}> when 'true' ->
			  let <_cor7> =
			      %% Line 1813
			      apply 'vtmerge'/2
				  (Svt, Fvt)
			  in  %% Line 1813
			      {_cor7,St2}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1814
	  <{'record_index',Line,Name,Field},_X_Vt,St> when 'true' ->
	      let <_cor12> =
		  %% Line 1816
		  ( fun (_cor9,_cor8) ->
			apply 'record_field'/4
			    (Field, Name, _cor9, _cor8)
		    -| [{'id',{0,0,'-gexpr/3-fun-2-'}}] )
	      in  %% Line 1815
		  apply 'check_record'/4
		      (Line, Name, St, _cor12)
	  %% Line 1817
	  <{'record_field',Line,Rec,Name,Field},Vt,St0> when 'true' ->
	      %% Line 1818
	      case apply 'gexpr'/3
		       (Rec, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_cor18> =
			%% Line 1820
			( fun (_cor15,_cor14) ->
			      %% Line 1821
			      apply 'record_field'/4
				  (Field, Name, _cor15, _cor14)
			  -| [{'id',{0,0,'-gexpr/3-fun-3-'}}] )
		    in  %% Line 1819
			case apply 'check_record'/4
				 (Line, Name, St1, _cor18) of
			  <{Fvt,St2}> when 'true' ->
			      let <_cor20> =
				  %% Line 1823
				  apply 'vtmerge'/2
				      (Rvt, Fvt)
			      in  %% Line 1823
				  {_cor20,St2}
			  ( <_cor19> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor19})
			    -| ['compiler_generated'] )
			end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1824
	  <{'record',Line,Name,Inits},Vt,St> when 'true' ->
	      let <_cor25> =
		  %% Line 1826
		  ( fun (_cor22,_cor21) ->
			%% Line 1827
			apply 'ginit_fields'/6
			    (Inits, Line, Name, _cor22, Vt, _cor21)
		    -| [{'id',{0,0,'-gexpr/3-fun-4-'}}] )
	      in  %% Line 1825
		  apply 'check_record'/4
		      (Line, Name, St, _cor25)
	  %% Line 1829
	  <{'bin',_X_Line,Fs},Vt,St> when 'true' ->
	      %% Line 1830
	      apply 'expr_bin'/4
		  (Fs, Vt, St, ( 'gexpr'/3
				 -| [{'id',{0,0,'-gexpr/3-fun-5-'}}] ))
	  %% Line 1831
	  <{'call',_X_Line,{'atom',_X_Lr,'is_record'},[E|[{'atom',Ln,Name}|[]]]},Vt,St0> when 'true' ->
	      %% Line 1832
	      case apply 'gexpr'/3
		       (E, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_cor27> =
			%% Line 1833
			apply 'exist_record'/3
			    (Ln, Name, St1)
		    in  %% Line 1833
			{Rvt,_cor27}
		( <_cor26> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor26})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1834
	  <{'call',Line,{'atom',_X_Lr,'is_record'},[E|[R|[]]]},Vt,St0> when 'true' ->
	      %% Line 1835
	      case apply 'gexpr_list'/3
		       ([E|[R|[]]], Vt, St0) of
		<{Asvt,St1}> when 'true' ->
		    let <_cor29> =
			%% Line 1836
			apply 'add_error'/3
			    (Line, 'illegal_guard_expr', St1)
		    in  %% Line 1836
			{Asvt,_cor29}
		( <_cor28> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor28})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1837
	  <{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},{'atom',Lf,'is_record'}},[E|[A|[]]]},%% Line 1838
												     Vt,%% Line 1838
													St0> when 'true' ->
	      %% Line 1839
	      apply 'gexpr'/3
		  ({'call',Line,{'atom',Lf,'is_record'},[E|[A|[]]]}, Vt, St0)
	  %% Line 1840
	  <{'call',Line,{'atom',_X_Lr,'is_record'},[E0|[{'atom',_cor70,_X_Name}|[{'integer',_cor71,_cor72}|[]]]]},%% Line 1841
														  Vt,%% Line 1841
														     St0> when 'true' ->
	      %% Line 1842
	      case apply 'gexpr'/3
		       (E0, Vt, St0) of
		<{E,St1}> when 'true' ->
		    %% Line 1843
		    case apply 'no_guard_bif_clash'/2
			     (St0, {'is_record',3}) of
		      %% Line 1844
		      <'true'> when 'true' ->
			  %% Line 1845
			  {E,St1}
		      %% Line 1846
		      <'false'> when 'true' ->
			  let <_cor31> =
			      %% Line 1847
			      apply 'add_error'/3
				  (Line, {'illegal_guard_local_call',{'is_record',3}}, St1)
			  in  %% Line 1847
			      {E,_cor31}
		      ( <_cor32> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor32})
			-| ['compiler_generated'] )
		    end
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor30})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1849
	  <{'call',Line,{'atom',_X_Lr,'is_record'},Asvt0 = [_cor73|[_cor74|[_cor75|[]]]]},Vt,St0> when 'true' ->
	      %% Line 1850
	      case apply 'gexpr_list'/3
		       (Asvt0, Vt, St0) of
		<{Asvt,St1}> when 'true' ->
		    let <_cor34> =
			%% Line 1851
			apply 'add_error'/3
			    (Line, 'illegal_guard_expr', St1)
		    in  %% Line 1851
			{Asvt,_cor34}
		( <_cor33> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1852
	  <{'call',Line,{'remote',_cor76,{'atom',_cor77,'erlang'},Isr = {'atom',_cor78,'is_record'}},Args = [_cor79|[_cor80|[_cor81|[]]]]},%% Line 1853
																	   Vt,%% Line 1853
																	      St0> when 'true' ->
	      %% Line 1854
	      apply 'gexpr'/3
		  ({'call',Line,Isr,Args}, Vt, St0)
	  %% Line 1855
	  <{'call',Line,{'atom',_X_La,F},As},Vt,St0> when 'true' ->
	      %% Line 1856
	      case apply 'gexpr_list'/3
		       (As, Vt, St0) of
		<{Asvt,St1}> when 'true' ->
		    let <A> =
			%% Line 1857
			call 'erlang':'length'
			    (As)
		    in  let <_cor39> =
			    %% Line 1859
			    ( case call 'erl_internal':'guard_bif'
				       (F, A) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'no_guard_bif_clash'/2
					  (St1, {F,A})
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_cor37> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor37}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 1859
			    case _cor39 of
			      %% Line 1860
			      <'true'> when 'true' ->
				  %% Line 1862
				  case call 'erl_internal':'bif'
					   (F, A) of
				    <'true'> when 'true' ->
					%% Line 1863
					{Asvt,St1}
				    ( <_cor40> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor40})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1864
			      <'false'> when 'true' ->
				  %% Line 1865
				  ( case St1 of
				      ( <( {'lint',_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_rec88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor47> =
						( case apply 'is_local_function'/2
							   (_rec88, {F,A}) of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 1866
							  apply 'is_imported_function'/2
							      (_cor86, {F,A})
						      -| ['compiler_generated'] )
						    ( <_cor41> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor41}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    in  case _cor47 of
						  %% Line 1867
						  <'true'> when 'true' ->
						      let <_cor48> =
							  %% Line 1868
							  apply 'add_error'/3
							      (Line, {'illegal_guard_local_call',{F,A}}, St1)
						      in  %% Line 1868
							  {Asvt,_cor48}
						  %% Line 1869
						  <_cor140> when 'true' ->
						      let <_cor49> =
							  %% Line 1870
							  apply 'add_error'/3
							      (Line, 'illegal_guard_expr', St1)
						      in  %% Line 1870
							  {Asvt,_cor49}
						end
					-| ['compiler_generated'] )
				      ( <_cor110> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor51> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor51})
				-| ['compiler_generated'] )
			    end
		( <_cor35> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor35})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1873
	  <{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},{'atom',_X_Lf,F}},As},Vt,St0> when 'true' ->
	      %% Line 1874
	      case apply 'gexpr_list'/3
		       (As, Vt, St0) of
		<{Asvt,St1}> when 'true' ->
		    let <A> =
			%% Line 1875
			call 'erlang':'length'
			    (As)
		    in  let <_cor56> =
			    %% Line 1876
			    ( case call 'erl_internal':'guard_bif'
				       (F, A) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'is_gexpr_op'/2
					  (F, A)
				  -| ['compiler_generated'] )
				( <_cor54> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor54}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 1876
			    case _cor56 of
			      %% Line 1877
			      <'true'> when 'true' ->
				  {Asvt,St1}
			      %% Line 1878
			      <'false'> when 'true' ->
				  let <_cor57> =
				      apply 'add_error'/3
					  (Line, 'illegal_guard_expr', St1)
				  in  {Asvt,_cor57}
			      ( <_cor58> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor58})
				-| ['compiler_generated'] )
			    end
		( <_cor52> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor52})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1880
	  <{'op',Line,Op,A},Vt,St0> when 'true' ->
	      %% Line 1881
	      case apply 'gexpr'/3
		       (A, Vt, St0) of
		<{Avt,St1}> when 'true' ->
		    %% Line 1882
		    case apply 'is_gexpr_op'/2
			     (Op, 1) of
		      %% Line 1883
		      <'true'> when 'true' ->
			  {Avt,St1}
		      %% Line 1884
		      <'false'> when 'true' ->
			  let <_cor60> =
			      apply 'add_error'/3
				  (Line, 'illegal_guard_expr', St1)
			  in  {Avt,_cor60}
		      ( <_cor61> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor61})
			-| ['compiler_generated'] )
		    end
		( <_cor59> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor59})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1886
	  <{'op',_cor141,'andalso',L,R},Vt,St> when 'true' ->
	      %% Line 1887
	      apply 'gexpr_list'/3
		  ([L|[R|[]]], Vt, St)
	  %% Line 1888
	  <{'op',_cor142,'orelse',L,R},Vt,St> when 'true' ->
	      %% Line 1889
	      apply 'gexpr_list'/3
		  ([L|[R|[]]], Vt, St)
	  %% Line 1890
	  <{'op',Line,Op,L,R},Vt,St0> when 'true' ->
	      %% Line 1891
	      case apply 'gexpr_list'/3
		       ([L|[R|[]]], Vt, St0) of
		<{Avt,St1}> when 'true' ->
		    %% Line 1892
		    case apply 'is_gexpr_op'/2
			     (Op, 2) of
		      %% Line 1893
		      <'true'> when 'true' ->
			  {Avt,St1}
		      %% Line 1894
		      <'false'> when 'true' ->
			  let <_cor63> =
			      apply 'add_error'/3
				  (Line, 'illegal_guard_expr', St1)
			  in  {Avt,_cor63}
		      ( <_cor64> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor64})
			-| ['compiler_generated'] )
		    end
		( <_cor62> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor62})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1898
	  <E,_X_Vt,St> when 'true' ->
	      let <_cor65> =
		  %% Line 1899
		  call 'erlang':'element'
		      (2, E)
	      in  let <_cor66> =
		      %% Line 1899
		      apply 'add_error'/3
			  (_cor65, 'illegal_guard_expr', St)
		  in  %% Line 1899
		      {[],_cor66}
	end
'gexpr_list'/3 =
    %% Line 1904
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 1905
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <E,{Esvt,St0}> when 'true' ->
			%% Line 1906
			case apply 'gexpr'/3
				 (E, _cor1, St0) of
			  <{Evt,St1}> when 'true' ->
			      let <_cor4> =
				  %% Line 1907
				  apply 'vtmerge'/2
				      (Evt, Esvt)
			      in  %% Line 1907
				  {_cor4,St1}
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-gexpr_list/3-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-gexpr_list/3-fun-0-'}}] )
	in  %% Line 1905
	    call 'lists':'foldl'
		(_cor9, %% Line 1908
			{[],_cor0}, _cor2)
'is_guard_test'/1 =
    %% Line 1915
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1916
	    call 'dict':'new'
		()
	in  %% Line 1916
	    apply 'is_guard_test2'/2
		(_cor0, _cor1)
'is_guard_test'/2 =
    %% Line 1919
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1920
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[A = {'attribute',_cor21,'record',_X_D}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [A|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor14> =
		%% Line 1921
		( fun (_cor11,_cor10) ->
		      let <Attr> =
			  %% Line 1922
			  apply 'zip_file_and_line'/2
			      (_cor11, [110|[111|[110|[101]]]])
		      in  %% Line 1923
			  apply 'attribute_state'/2
			      (Attr, _cor10)
		  -| [{'id',{0,0,'-is_guard_test/2-fun-0-'}}] )
	    in  let <_cor8> =
		    %% Line 1924
		    apply 'start'/0
			()
		in  let <St0> =
			%% Line 1921
			call 'lists':'foldl'
			    (_cor14, _cor8, _cor6)
		    in  let <_cor18> =
			    %% Line 1925
			    apply 'zip_file_and_line'/2
				(_cor1, [110|[111|[102|[105|[108|[101]]]]]])
			in  %% Line 1925
			    ( case St0 of
				( <( {'lint',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_rec90,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'is_guard_test2'/2
					  (_cor18, _rec90)
				  -| ['compiler_generated'] )
				( <_cor50> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
'is_guard_test2'/2 =
    %% Line 1928
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'call',Line,{'atom',Lr,'record'},[E|[A|[]]]},RDs> when 'true' ->
	      %% Line 1929
	      apply 'is_gexpr'/2
		  ({'call',Line,{'atom',Lr,'is_record'},[E|[A|[]]]}, RDs)
	  %% Line 1930
	  <Call = {'call',_X_Line,{'atom',_X_La,Test},As},RDs> when 'true' ->
	      let <_cor2> =
		  %% Line 1931
		  call 'erlang':'length'
		      (As)
	      in  %% Line 1931
		  case call 'erl_internal':'type_test'
			   (Test, _cor2) of
		    %% Line 1932
		    <'true'> when 'true' ->
			apply 'is_gexpr_list'/2
			    (As, RDs)
		    %% Line 1933
		    <'false'> when 'true' ->
			apply 'is_gexpr'/2
			    (Call, RDs)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1935
	  <G,RDs> when 'true' ->
	      %% Line 1937
	      apply 'is_gexpr'/2
		  (G, RDs)
	end
'is_guard_expr'/1 =
    %% Line 1942
    fun (_cor0) ->
	apply 'is_gexpr'/2
	    (_cor0, [])
'is_gexpr'/2 =
    %% Line 1944
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'var',_X_L,_X_V},_X_RDs> when 'true' ->
	      'true'
	  %% Line 1945
	  <{'char',_X_L,_X_C},_X_RDs> when 'true' ->
	      'true'
	  %% Line 1946
	  <{'integer',_X_L,_X_I},_X_RDs> when 'true' ->
	      'true'
	  %% Line 1947
	  <{'float',_X_L,_X_F},_X_RDs> when 'true' ->
	      'true'
	  %% Line 1948
	  <{'atom',_X_L,_X_A},_X_RDs> when 'true' ->
	      'true'
	  %% Line 1949
	  <{'string',_X_L,_X_S},_X_RDs> when 'true' ->
	      'true'
	  %% Line 1950
	  <{'nil',_X_L},_X_RDs> when 'true' ->
	      'true'
	  %% Line 1951
	  <{'cons',_X_L,H,T},RDs> when 'true' ->
	      apply 'is_gexpr_list'/2
		  ([H|[T|[]]], RDs)
	  %% Line 1952
	  <{'tuple',_X_L,Es},RDs> when 'true' ->
	      apply 'is_gexpr_list'/2
		  (Es, RDs)
	  %% Line 1955
	  <{'record_index',_X_L,_X_Name,Field},RDs> when 'true' ->
	      %% Line 1956
	      apply 'is_gexpr'/2
		  (Field, RDs)
	  %% Line 1957
	  <{'record_field',_X_L,Rec,_X_Name,Field},RDs> when 'true' ->
	      %% Line 1958
	      apply 'is_gexpr_list'/2
		  ([Rec|[Field|[]]], RDs)
	  %% Line 1959
	  <{'record',L,Name,Inits},RDs> when 'true' ->
	      %% Line 1960
	      apply 'is_gexpr_fields'/4
		  (Inits, L, Name, RDs)
	  %% Line 1961
	  <{'bin',_X_L,Fs},RDs> when 'true' ->
	      let <_cor8> =
		  %% Line 1962
		  ( fun (_cor6) ->
			case _cor6 of
			  <{'bin_element',_X_Line,E,Sz,_X_Ts}> when 'true' ->
			      let <_cor5> =
				  %% Line 1963
				  apply 'is_gexpr'/2
				      (E, RDs)
			      in  let <_cor4> =
				      %% Line 1963
				      ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (Sz,
						       'default') ->
						'true'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						apply 'is_gexpr'/2
						    (Sz, RDs)
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  %% Line 1963
				      call 'erlang':'and'
					  (_cor5, _cor4)
			  ( <_cor7> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor7})
				  -| [{'function_name',{'-is_gexpr/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-is_gexpr/2-fun-0-'}}] )
	      in  %% Line 1962
		  call 'lists':'all'
		      (_cor8, %% Line 1964
			      Fs)
	  %% Line 1965
	  <{'call',_X_L,{'atom',_X_Lf,F},As},RDs> when 'true' ->
	      let <A> =
		  %% Line 1966
		  call 'erlang':'length'
		      (As)
	      in  %% Line 1967
		  ( case call 'erl_internal':'guard_bif'
			     (F, A) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_gexpr_list'/2
				(As, RDs)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor10> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor10}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1968
	  <{'call',_X_L,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},{'atom',_X_Lf,F}},As},RDs> when 'true' ->
	      let <A> =
		  %% Line 1969
		  call 'erlang':'length'
		      (As)
	      in  let <_cor16> =
		      %% Line 1970
		      ( case call 'erl_internal':'guard_bif'
				 (F, A) of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'is_gexpr_op'/2
				    (F, A)
			    -| ['compiler_generated'] )
			  ( <_cor14> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor14}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1971
		      ( case _cor16 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'is_gexpr_list'/2
				    (As, RDs)
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor13> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor13}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 1972
	  <{'call',L,{'tuple',Lt,[{'atom',Lm,'erlang'}|[{'atom',Lf,F}|[]]]},As},RDs> when 'true' ->
	      %% Line 1973
	      apply 'is_gexpr'/2
		  ({'call',L,{'remote',Lt,{'atom',Lm,'erlang'},{'atom',Lf,F}},As}, RDs)
	  %% Line 1974
	  <{'op',_X_L,Op,A},RDs> when 'true' ->
	      %% Line 1975
	      ( case apply 'is_gexpr_op'/2
			 (Op, 1) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_gexpr'/2
			    (A, RDs)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor18}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1976
	  <{'op',_X_L,'andalso',A1,A2},RDs> when 'true' ->
	      %% Line 1977
	      apply 'is_gexpr_list'/2
		  ([A1|[A2|[]]], RDs)
	  %% Line 1978
	  <{'op',_X_L,'orelse',A1,A2},RDs> when 'true' ->
	      %% Line 1979
	      apply 'is_gexpr_list'/2
		  ([A1|[A2|[]]], RDs)
	  %% Line 1980
	  <{'op',_X_L,Op,A1,A2},RDs> when 'true' ->
	      %% Line 1981
	      ( case apply 'is_gexpr_op'/2
			 (Op, 2) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'is_gexpr_list'/2
			    ([A1|[A2|[]]], RDs)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor20}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1982
	  <_X_Other,_X_RDs> when 'true' ->
	      'false'
	end
'is_gexpr_op'/2 =
    %% Line 1984
    fun (_cor1,_cor0) ->
	%% Line 1985
	try
	    call 'erl_internal':'op_type'
		(_cor1, _cor0)
	of <_cor2> ->
	    case _cor2 of
	      %% Line 1986
	      <'arith'> when 'true' ->
		  'true'
	      %% Line 1987
	      <'bool'> when 'true' ->
		  'true'
	      %% Line 1988
	      <'comp'> when 'true' ->
		  'true'
	      %% Line 1989
	      <'list'> when 'true' ->
		  'false'
	      %% Line 1990
	      <'send'> when 'true' ->
		  'false'
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	catch <_cor6,_cor5,_cor4> ->
	    %% Line 1991
	    'false'
'is_gexpr_list'/2 =
    %% Line 1994
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    ( fun (_cor2) ->
		  apply 'is_gexpr'/2
		      (_cor2, _cor0)
	      -| [{'id',{0,0,'-is_gexpr_list/2-fun-0-'}}] )
	in  call 'lists':'all'
		(_cor4, _cor1)
'is_gexpr_fields'/4 =
    %% Line 1996
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1997
	    case call 'dict':'find'
		     (_cor1, _cor0) of
	      %% Line 1998
	      <{'ok',{_X_Line,Fields}}> when 'true' ->
		  let <_cor4> =
		      apply 'init_fields'/3
			  (_cor3, _cor2, Fields)
		  in  call 'erlang':'++'
			  (_cor3, _cor4)
	      %% Line 1999
	      <'error'> when 'true' ->
		  _cor3
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	in  let <_cor10> =
		%% Line 2001
		( fun (_cor8) ->
		      case _cor8 of
			<{'record_field',_X_Lf,_X_Name,V}> when 'true' ->
			    apply 'is_gexpr'/2
				(V, _cor0)
			%% Line 2002
			<_X_Other> when 'true' ->
			    'false'
		      end
		  -| [{'id',{0,0,'-is_gexpr_fields/4-fun-0-'}}] )
	    in  %% Line 2001
		call 'lists':'all'
		    (_cor10, _cor6)
'exprs'/3 =
    %% Line 2008
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],Vt,St0> when 'true' ->
	      %% Line 2009
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Evt,St1}> when 'true' ->
		    let <_cor4> =
			%% Line 2010
			apply 'vtupdate'/2
			    (Evt, Vt)
		    in  %% Line 2010
			case apply 'exprs'/3
				 (Es, _cor4, St1) of
			  <{Esvt,St2}> when 'true' ->
			      let <_cor6> =
				  %% Line 2011
				  apply 'vtupdate'/2
				      (Evt, Esvt)
			      in  %% Line 2011
				  {_cor6,St2}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2012
	  <[],_X_Vt,St> when 'true' ->
	      {[],St}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'exprs',3}}] )
	    -| ['compiler_generated'] )
	end
'expr'/3 =
    %% Line 2020
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'var',Line,V},Vt,St> when 'true' ->
	      %% Line 2021
	      apply 'expr_var'/4
		  (V, Line, Vt, St)
	  %% Line 2022
	  <{'char',_X_Line,_X_C},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2023
	  <{'integer',_X_Line,_X_I},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2024
	  <{'float',_X_Line,_X_F},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2025
	  <{'atom',Line,A},_X_Vt,St> when 'true' ->
	      let <_cor3> =
		  %% Line 2026
		  apply 'keyword_warning'/3
		      (Line, A, St)
	      in  %% Line 2026
		  {[],_cor3}
	  %% Line 2027
	  <{'string',_X_Line,_X_S},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2028
	  <{'nil',_X_Line},_X_Vt,St> when 'true' ->
	      {[],St}
	  %% Line 2029
	  <{'cons',_X_Line,H,T},Vt,St> when 'true' ->
	      %% Line 2030
	      apply 'expr_list'/3
		  ([H|[T|[]]], Vt, St)
	  %% Line 2031
	  <{'lc',_X_Line,E,Qs},Vt,St> when 'true' ->
	      %% Line 2032
	      apply 'handle_comprehension'/4
		  (E, Qs, Vt, St)
	  %% Line 2033
	  <{'bc',_X_Line,E,Qs},Vt,St> when 'true' ->
	      %% Line 2034
	      apply 'handle_comprehension'/4
		  (E, Qs, Vt, St)
	  %% Line 2035
	  <{'tuple',_X_Line,Es},Vt,St> when 'true' ->
	      %% Line 2036
	      apply 'expr_list'/3
		  (Es, Vt, St)
	  %% Line 2037
	  <{'map',_X_Line,Es},Vt,St> when 'true' ->
	      let <_cor4> =
		  %% Line 2038
		  apply 'check_assoc_fields'/2
		      (Es, St)
	      in  %% Line 2038
		  apply 'map_fields'/4
		      (Es, Vt, _cor4, ( 'expr_list'/3
					-| [{'id',{0,0,'-expr/3-fun-0-'}}] ))
	  %% Line 2039
	  <{'map',_X_Line,Src,Es},Vt,St> when 'true' ->
	      %% Line 2040
	      case apply 'expr'/3
		       (Src, Vt, St) of
		<{Svt,St1}> when 'true' ->
		    %% Line 2041
		    case apply 'map_fields'/4
			     (Es, Vt, St1, ( 'expr_list'/3
					     -| [{'id',{0,0,'-expr/3-fun-1-'}}] )) of
		      <{Fvt,St2}> when 'true' ->
			  let <_cor7> =
			      %% Line 2042
			      apply 'vtupdate'/2
				  (Svt, Fvt)
			  in  %% Line 2042
			      {_cor7,St2}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2043
	  <{'record_index',Line,Name,Field},_X_Vt,St> when 'true' ->
	      let <_cor12> =
		  %% Line 2045
		  ( fun (_cor9,_cor8) ->
			apply 'record_field'/4
			    (Field, Name, _cor9, _cor8)
		    -| [{'id',{0,0,'-expr/3-fun-2-'}}] )
	      in  %% Line 2044
		  apply 'check_record'/4
		      (Line, Name, St, _cor12)
	  %% Line 2046
	  <{'record',Line,Name,Inits},Vt,St> when 'true' ->
	      let <_cor17> =
		  %% Line 2048
		  ( fun (_cor14,_cor13) ->
			%% Line 2049
			apply 'init_fields'/6
			    (Inits, Line, Name, _cor14, Vt, _cor13)
		    -| [{'id',{0,0,'-expr/3-fun-3-'}}] )
	      in  %% Line 2047
		  apply 'check_record'/4
		      (Line, Name, St, _cor17)
	  %% Line 2051
	  <{'record_field',Line,Rec,Name,Field},Vt,St0> when 'true' ->
	      %% Line 2052
	      case apply 'record_expr'/4
		       (Line, Rec, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_cor23> =
			%% Line 2054
			( fun (_cor20,_cor19) ->
			      %% Line 2055
			      apply 'record_field'/4
				  (Field, Name, _cor20, _cor19)
			  -| [{'id',{0,0,'-expr/3-fun-4-'}}] )
		    in  %% Line 2053
			case apply 'check_record'/4
				 (Line, Name, St1, _cor23) of
			  <{Fvt,St2}> when 'true' ->
			      let <_cor25> =
				  %% Line 2057
				  apply 'vtmerge'/2
				      (Rvt, Fvt)
			      in  %% Line 2057
				  {_cor25,St2}
			  ( <_cor24> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor24})
			    -| ['compiler_generated'] )
			end
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2058
	  <{'record',Line,Rec,Name,Upds},Vt,St0> when 'true' ->
	      %% Line 2059
	      case apply 'record_expr'/4
		       (Line, Rec, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_cor31> =
			%% Line 2061
			( fun (_cor28,_cor27) ->
			      %% Line 2062
			      apply 'update_fields'/5
				  (Upds, Name, _cor28, Vt, _cor27)
			  -| [{'id',{0,0,'-expr/3-fun-5-'}}] )
		    in  %% Line 2060
			case apply 'check_record'/4
				 (Line, Name, St1, _cor31) of
			  <{Usvt,St2}> when 'true' ->
			      %% Line 2064
			      case apply 'has_wildcard_field'/1
				       (Upds) of
				%% Line 2065
				<'true'> when 'true' ->
				    let <_cor33> =
					apply 'add_error'/3
					    (Line, {'wildcard_in_update',Name}, St2)
				    in  {[],_cor33}
				%% Line 2066
				<'false'> when 'true' ->
				    let <_cor34> =
					apply 'vtmerge'/2
					    (Rvt, Usvt)
				    in  {_cor34,St2}
				( <_cor35> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor35})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor32> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor32})
			    -| ['compiler_generated'] )
			end
		( <_cor26> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor26})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2068
	  <{'bin',_X_Line,Fs},Vt,St> when 'true' ->
	      %% Line 2069
	      apply 'expr_bin'/4
		  (Fs, Vt, St, ( 'expr'/3
				 -| [{'id',{0,0,'-expr/3-fun-6-'}}] ))
	  %% Line 2070
	  <{'block',_X_Line,Es},Vt,St> when 'true' ->
	      %% Line 2072
	      apply 'exprs'/3
		  (Es, Vt, St)
	  %% Line 2073
	  <{'if',Line,Cs},Vt,St> when 'true' ->
	      %% Line 2074
	      apply 'icrt_clauses'/4
		  (Cs, {'if',Line}, Vt, St)
	  %% Line 2075
	  <{'case',Line,E,Cs},Vt,St0> when 'true' ->
	      %% Line 2076
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Evt,St1}> when 'true' ->
		    let <_cor37> =
			%% Line 2077
			apply 'vtupdate'/2
			    (Evt, Vt)
		    in  %% Line 2077
			case apply 'icrt_clauses'/4
				 (Cs, {'case',Line}, _cor37, St1) of
			  <{Cvt,St2}> when 'true' ->
			      let <_cor39> =
				  %% Line 2078
				  apply 'vtmerge'/2
				      (Evt, Cvt)
			      in  %% Line 2078
				  {_cor39,St2}
			  ( <_cor38> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor38})
			    -| ['compiler_generated'] )
			end
		( <_cor36> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor36})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2079
	  <{'receive',Line,Cs},Vt,St> when 'true' ->
	      %% Line 2080
	      apply 'icrt_clauses'/4
		  (Cs, {'receive',Line}, Vt, St)
	  %% Line 2081
	  <{'receive',Line,Cs,To,ToEs},Vt,St0> when 'true' ->
	      %% Line 2083
	      case apply 'expr'/3
		       (To, Vt, St0) of
		<{Tvt,St1}> when 'true' ->
		    %% Line 2084
		    case apply 'exprs'/3
			     (ToEs, Vt, St1) of
		      <{Tevt,St2}> when 'true' ->
			  %% Line 2085
			  case apply 'icrt_clauses'/3
				   (Cs, Vt, St2) of
			    <{Cvt,St3}> when 'true' ->
				let <Csvts> =
				    %% Line 2087
				    [Tevt|Cvt]
				in  %% Line 2088
				    case apply 'icrt_export'/4
					     (Csvts, Vt, {'receive',Line}, St3) of
				      <{Rvt,St4}> when 'true' ->
					  let <_cor45> =
					      %% Line 2089
					      apply 'vtmerge'/1
						  ([Tvt|[Tevt|[Rvt|[]]]])
					  in  %% Line 2089
					      {_cor45,St4}
				      ( <_cor44> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor44})
					-| ['compiler_generated'] )
				    end
			    ( <_cor42> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor42})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor41> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor41})
			-| ['compiler_generated'] )
		    end
		( <_cor40> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor40})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2090
	  <{'fun',Line,Body},Vt,St> when 'true' ->
	      %% Line 2092
	      case Body of
		%% Line 2093
		<{'clauses',Cs}> when 'true' ->
		    %% Line 2094
		    apply 'fun_clauses'/3
			(Cs, Vt, St)
		%% Line 2095
		<{'function',F,A}> when 'true' ->
		    %% Line 2098
		    ( case St of
			( <( {'lint',_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_rec91,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor49> =
				  apply 'is_local_function'/2
				      (_rec91, {F,A})
			      in  let <_cor56> =
				      ( case _cor49 of
					  ( <'false'> when 'true' ->
						%% Line 2099
						( case call 'erl_internal':'bif'
							   (F, A) of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor53> =
							      %% Line 2100
							      apply 'is_autoimport_suppressed'/2
								  (_cor189, {F,A})
							  in  %% Line 2100
							      call 'erlang':'not'
								  (_cor53)
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						    ( <_cor50> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor50}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <'true'> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_cor_variable> when 'true' ->
						call 'erlang':'error'
						    ('badarg')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  case _cor56 of
					%% Line 2101
					<'true'> when 'true' ->
					    {[],St}
					%% Line 2102
					<'false'> when 'true' ->
					    let <_cor57> =
						apply 'call_function'/4
						    (Line, F, A, St)
					    in  {[],_cor57}
					( <_cor58> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor58})
					  -| ['compiler_generated'] )
				      end
			  -| ['compiler_generated'] )
			( <_cor210> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','lint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2104
		<{'function',M,F,A}>
		    when try
			  let <_cor59> =
			      call 'erlang':'is_atom'
				  (M)
			  in  let <_cor60> =
				  call 'erlang':'is_atom'
				      (F)
			      in  let <_cor61> =
				      call 'erlang':'is_integer'
					  (A)
				  in  let <_cor62> =
					  call 'erlang':'and'
					      (_cor60, _cor61)
				      in  call 'erlang':'and'
					      (_cor59, _cor62)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 2106
		    {[],St}
		%% Line 2107
		<{'function',M,F,A}> when 'true' ->
		    %% Line 2109
		    case apply 'expr_list'/3
			     ([M|[F|[A|[]]]], Vt, St) of
		      <{Bvt,St1}> when 'true' ->
			  let <_cor64> =
			      %% Line 2110
			      apply 'vtupdate'/2
				  (Bvt, Vt)
			  in  %% Line 2110
			      {_cor64,St1}
		      ( <_cor63> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor63})
			-| ['compiler_generated'] )
		    end
		( <_cor65> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor65})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2112
	  <{'named_fun',_cor240,'_',Cs},Vt,St> when 'true' ->
	      %% Line 2113
	      apply 'fun_clauses'/3
		  (Cs, Vt, St)
	  %% Line 2114
	  <{'named_fun',Line,Name,Cs},Vt,St0> when 'true' ->
	      let <Nvt0> =
		  %% Line 2115
		  [{Name,{'bound','unused',[Line|[]]}}|[]]
	      in  let <St1> =
		      %% Line 2116
		      apply 'shadow_vars'/4
			  (Nvt0, Vt, 'named fun', St0)
		  in  let <_cor68> =
			  %% Line 2117
			  apply 'vtsubtract'/2
			      (Vt, Nvt0)
		      in  let <Nvt1> =
			      %% Line 2117
			      apply 'vtupdate'/2
				  (_cor68, Nvt0)
			  in  %% Line 2118
			      case apply 'fun_clauses'/3
				       (Cs, Nvt1, St1) of
				<{Csvt,St2}> when 'true' ->
				    let <_cor71> =
					%% Line 2119
					apply 'vtupdate'/2
					    (Csvt, Nvt0)
				    in  %% Line 2119
					case apply 'check_unused_vars'/3
						 (_cor71, [], St2) of
					  <{_cor241,St3}> when 'true' ->
					      let <_cor73> =
						  %% Line 2120
						  apply 'vtold'/2
						      (Csvt, Vt)
					      in  %% Line 2120
						  {_cor73,St3}
					  ( <_cor72> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor72})
					    -| ['compiler_generated'] )
					end
				( <_cor70> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor70})
				  -| ['compiler_generated'] )
			      end
	  %% Line 2121
	  <{'call',_X_Line,{'atom',_X_Lr,'is_record'},[E|[{'atom',Ln,Name}|[]]]},Vt,St0> when 'true' ->
	      %% Line 2122
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Rvt,St1}> when 'true' ->
		    let <_cor75> =
			%% Line 2123
			apply 'exist_record'/3
			    (Ln, Name, St1)
		    in  %% Line 2123
			{Rvt,_cor75}
		( <_cor74> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor74})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2124
	  <{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},{'atom',Lf,'is_record'}},[E|[A|[]]]},%% Line 2125
												     Vt,%% Line 2125
													St0> when 'true' ->
	      %% Line 2126
	      apply 'expr'/3
		  ({'call',Line,{'atom',Lf,'is_record'},[E|[A|[]]]}, Vt, St0)
	  %% Line 2127
	  <{'call',L,{'tuple',Lt,[{'atom',Lm,'erlang'}|[{'atom',Lf,'is_record'}|[]]]},As},Vt,St> when 'true' ->
	      %% Line 2128
	      apply 'expr'/3
		  ({'call',L,{'remote',Lt,{'atom',Lm,'erlang'},{'atom',Lf,'is_record'}},As}, Vt, St)
	  %% Line 2129
	  <{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,M},{'atom',Lf,F}},As},Vt,St0> when 'true' ->
	      let <St1> =
		  %% Line 2130
		  apply 'keyword_warning'/3
		      (Lf, F, St0)
	      in  let <St2> =
		      %% Line 2131
		      apply 'check_remote_function'/5
			  (Line, M, F, As, St1)
		  in  %% Line 2132
		      apply 'expr_list'/3
			  (As, Vt, St2)
	  %% Line 2133
	  <{'call',Line,{'remote',_X_Lr,M,F},As},Vt,St0> when 'true' ->
	      let <St1> =
		  %% Line 2134
		  apply 'keyword_warning'/3
		      (Line, M, St0)
	      in  let <St2> =
		      %% Line 2135
		      apply 'keyword_warning'/3
			  (Line, F, St1)
		  in  %% Line 2136
		      apply 'expr_list'/3
			  ([M|[F|As]], Vt, St2)
	  %% Line 2137
	  <{'call',Line,{'atom',La,F},As},Vt,St0> when 'true' ->
	      let <St1> =
		  %% Line 2138
		  apply 'keyword_warning'/3
		      (La, F, St0)
	      in  %% Line 2139
		  case apply 'expr_list'/3
			   (As, Vt, St1) of
		    <{Asvt,St2}> when 'true' ->
			let <A> =
			    %% Line 2140
			    call 'erlang':'length'
				(As)
			in  %% Line 2141
			    ( case St2 of
				( <( {'lint',_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_rec93,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_cor268,_cor269}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <IsLocal> =
					  apply 'is_local_function'/2
					      (_rec93, {F,A})
				      in  let <IsAutoBif> =
					      %% Line 2142
					      call 'erl_internal':'bif'
						  (F, A)
					  in  let <AutoSuppressed> =
						  %% Line 2143
						  apply 'is_autoimport_suppressed'/2
						      (_cor249, {F,A})
					      in  let <_cor92> =
						      %% Line 2144
						      apply 'is_warn_enabled'/2
							  ('bif_clash', St2)
						  in  let <_cor90> =
							  %% Line 2144
							  apply 'bif_clash_specifically_disabled'/2
							      (St2, {F,A})
						      in  let <_cor91> =
							      %% Line 2144
							      call 'erlang':'not'
								  (_cor90)
							  in  let <Warn> =
								  %% Line 2144
								  call 'erlang':'and'
								      (_cor92, _cor91)
							      in  let <Imported> =
								      %% Line 2145
								      apply 'imported'/3
									  (F, A, St2)
								  in  let <_cor101> =
									  %% Line 2146
									  ( case IsLocal of
									      ( <'false'> when 'true' ->
										    ( case <> of
											( <>
											      when call 'erlang':'=:='
												    (Imported,
												     'no') ->
											      %% Line 2147
											      ( case IsAutoBif of
												  ( <( 'true'
												       -| ['compiler_generated'] )> when 'true' ->
													call 'erlang':'not'
													    (AutoSuppressed)
												    -| ['compiler_generated'] )
												  ( <( 'false'
												       -| ['compiler_generated'] )> when 'true' ->
													'false'
												    -| ['compiler_generated'] )
												  ( <_cor97> when 'true' ->
													( call ( 'erlang'
														 -| ['compiler_generated'] ):( 'error'
																	       -| ['compiler_generated'] )
													      (( {( 'badarg'
														    -| ['compiler_generated'] ),_cor97}
														 -| ['compiler_generated'] ))
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												end
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
											( <> when 'true' ->
											      'false'
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <'true'> when 'true' ->
										    'false'
										-| ['compiler_generated'] )
									      ( <_cor_variable> when 'true' ->
										    call 'erlang':'error'
											('badarg')
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								      in  %% Line 2146
									  case _cor101 of
									    %% Line 2148
									    <'true'> when 'true' ->
										let <St3> =
										    %% Line 2149
										    apply 'deprecated_function'/5
											(Line, 'erlang', F, As, St2)
										in  %% Line 2150
										    {Asvt,St3}
									    %% Line 2151
									    <'false'> when 'true' ->
										let <_cor132> =
										    %% Line 2152
										    case Imported of
										      %% Line 2153
										      <{'yes',M}> when 'true' ->
											  let <St3> =
											      %% Line 2154
											      apply 'check_remote_function'/5
												  (Line, M, F, As, St2)
											  in  %% Line 2155
											      ( case St3 of
												  ( <( {'lint',_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_rec95,_cor324,_cor325,_cor326,_cor327}
												       -| ['compiler_generated'] )> when 'true' ->
													%% Line 2156
													( case _rec95 of
													    ( <( {'usage',_cor329,_rec96,_cor330,_cor331}
														 -| ['compiler_generated'] )> when 'true' ->
														  let <Imp> =
														      call 'ordsets':'add_element'
															  ({{F,A},M}, _rec96)
														  in  let <_cor112> =
															  %% Line 2157
															  call 'erlang':'setelement'
															      (3, _rec95, Imp)
														      in  %% Line 2157
															  call 'erlang':'setelement'
															      (26, St3, _cor112)
													      -| ['compiler_generated'] )
													    ( <_cor332> when 'true' ->
														  ( call ( 'erlang'
															   -| ['compiler_generated'] ):( 'error'
																			 -| ['compiler_generated'] )
															(( {'badrecord','usage'}
															   -| ['compiler_generated'] ))
														    -| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													  end
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												  ( <_cor328> when 'true' ->
													( call ( 'erlang'
														 -| ['compiler_generated'] ):( 'error'
																	       -| ['compiler_generated'] )
													      (( {'badrecord','lint'}
														 -| ['compiler_generated'] ))
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												end
												-| ['compiler_generated'] )
										      %% Line 2158
										      <'no'> when 'true' ->
											  %% Line 2159
											  case <F,A> of
											    %% Line 2160
											    <'record_info',2> when 'true' ->
												%% Line 2161
												apply 'check_record_info_call'/4
												    (Line, La, As, St2)
											    %% Line 2162
											    <_fol1931,_fol1932> when 'true' ->
												let <N> = {_fol1931,_fol1932}
												in  let <_cor122> =
													%% Line 2165
													case <> of
													  %% Line 2166
													  <>
													      when try
														    ( let <_cor120> =
															  ( case AutoSuppressed of
															      ( <'false'> when 'true' ->
																    ( case IsAutoBif of
																	( <( 'true'
																	     -| ['compiler_generated'] )> when 'true' ->
																	      Warn
																	  -| ['compiler_generated'] )
																	( <( 'false'
																	     -| ['compiler_generated'] )> when 'true' ->
																	      'false'
																	  -| ['compiler_generated'] )
																	( <_cor117> when 'true' ->
																	      _cor117
																	  -| ['compiler_generated'] )
																      end
																      -| ['compiler_generated'] )
																-| ['compiler_generated'] )
															      ( <'true'> when 'true' ->
																    'false'
																-| ['compiler_generated'] )
															      ( <_cor_variable> when 'true' ->
																    call 'erlang':'error'
																	('badarg')
																-| ['compiler_generated'] )
															    end
															    -| ['compiler_generated'] )
														      in  ( call ( 'erlang'
																   -| ['compiler_generated'] ):( '=:='
																				 -| ['compiler_generated'] )
																(( _cor120
																   -| ['compiler_generated'] ), ( 'true'
																				  -| ['compiler_generated'] ))
															    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
														of <Try> ->
														    Try
														catch <T,R> ->
														    'false' ->
													      %% Line 2167
													      case call 'erl_internal':'old_bif'
														       (F, A) of
														%% Line 2168
														<'true'> when 'true' ->
														    %% Line 2169
														    apply 'add_error'/3
															(%% Line 2170
															 Line, %% Line 2171
															       {'call_to_redefined_old_bif',{F,A}}, %% Line 2172
																				    St2)
														%% Line 2173
														<'false'> when 'true' ->
														    %% Line 2174
														    apply 'add_warning'/3
															(%% Line 2175
															 Line, %% Line 2176
															       {'call_to_redefined_bif',{F,A}}, %% Line 2177
																				St2)
														( <_cor121> when 'true' ->
														      primop 'match_fail'
															  ({'case_clause',_cor121})
														  -| ['compiler_generated'] )
													      end
													  %% Line 2179
													  <> when 'true' ->
													      %% Line 2180
													      St2
													end
												    in  %% Line 2183
													case <> of
													  %% Line 2184
													  <>
													      when ( try
														      ( case <> of
															  ( <>
																when ( call ( 'erlang'
																	   -| ['compiler_generated'] ):( 'is_record'
																					 -| ['compiler_generated'] )
																	(_cor122,
																	 ( 'lint'
																	   -| ['compiler_generated'] ),
																	 ( 30
																	   -| ['compiler_generated'] ))
																    -| ['compiler_generated'] ) ->
																let <_cor128> =
																    ( call 'erlang':'element'
																	  (16, _cor122)
																      -| ['compiler_generated'] )
																in  ( call 'erlang':'=:='
																	  (N, _cor128)
																      -| ['compiler_generated'] )
															    -| ['compiler_generated'] )
															  ( <> when 'true' ->
																'false'
															    -| ['compiler_generated'] )
															end
															-| ['compiler_generated'] )
														  of <Try> ->
														      Try
														  catch <T,R> ->
														      'false'
														  -| ['compiler_generated'] ) ->
													      _cor122
													  %% Line 2186
													  <> when 'true' ->
													      %% Line 2187
													      apply 'call_function'/4
														  (Line, F, A, _cor122)
													end
											  end
										      ( <_cor131> when 'true' ->
											    primop 'match_fail'
												({'case_clause',_cor131})
											-| ['compiler_generated'] )
										    end
										in  %% Line 2152
										    {Asvt,_cor132}
									    ( <_cor133> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor133})
									      -| ['compiler_generated'] )
									  end
				  -| ['compiler_generated'] )
				( <_cor270> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    ( <_cor81> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor81})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2192
	  <{'call',Line,F,As},Vt,St0> when 'true' ->
	      let <St> =
		  %% Line 2193
		  apply 'warn_invalid_call'/3
		      (Line, F, St0)
	      in  %% Line 2194
		  apply 'expr_list'/3
		      ([F|As], Vt, St)
	  %% Line 2195
	  <{'try',Line,Es,Scs,Ccs,As},Vt,St0> when 'true' ->
	      %% Line 2198
	      case apply 'exprs'/3
		       (Es, Vt, St0) of
		<{Evt0,St1}> when 'true' ->
		    let <TryLine> = {%% Line 2199
			 'try',%% Line 2199
			       Line}
		    in  let <_cor137> =
			    %% Line 2200
			    apply 'vtnew'/2
				(Evt0, Vt)
			in  let <_cor138> =
				%% Line 2200
				apply 'vtnames'/1
				    (_cor137)
			    in  let <Uvt> =
				    %% Line 2200
				    apply 'vtunsafe'/3
					(_cor138, TryLine, [])
				in  let <_cor140> =
					%% Line 2201
					apply 'vtsubtract'/2
					    (Evt0, Uvt)
				    in  let <Evt1> =
					    %% Line 2201
					    apply 'vtupdate'/2
						(Uvt, _cor140)
					in  let <_cor143> =
						%% Line 2202
						call 'erlang':'++'
						    (Scs, Ccs)
					    in  let <_cor142> =
						    %% Line 2202
						    apply 'vtupdate'/2
							(Evt1, Vt)
						in  %% Line 2202
						    case apply 'icrt_clauses'/4
							     (_cor143, TryLine, _cor142, St1) of
						      <{Sccs,St2}> when 'true' ->
							  let <_cor146> =
							      %% Line 2204
							      apply 'vtnew'/2
								  (Sccs, Vt)
							  in  let <_cor147> =
								  %% Line 2204
								  apply 'vtnames'/1
								      (_cor146)
							      in  let <_cor148> =
								      %% Line 2204
								      apply 'vtunsafe'/3
									  (_cor147, TryLine, [])
								  in  let <Rvt1> =
									  %% Line 2204
									  apply 'vtupdate'/2
									      (_cor148, Sccs)
								      in  let <Evt2> =
									      %% Line 2205
									      apply 'vtmerge'/2
										  (Evt1, Rvt1)
									  in  let <_cor151> =
										  %% Line 2206
										  apply 'vtupdate'/2
										      (Evt2, Vt)
									      in  %% Line 2206
										  case apply 'exprs'/3
											   (As, _cor151, St2) of
										    <{Avt0,St}> when 'true' ->
											let <_cor153> =
											    %% Line 2207
											    apply 'vtnew'/2
												(Avt0, Vt)
											in  let <_cor154> =
												%% Line 2207
												apply 'vtnames'/1
												    (_cor153)
											    in  let <_cor155> =
												    %% Line 2207
												    apply 'vtunsafe'/3
													(_cor154, TryLine, [])
												in  let <Avt1> =
													%% Line 2207
													apply 'vtupdate'/2
													    (_cor155, Avt0)
												    in  let <Avt> =
													    %% Line 2208
													    apply 'vtmerge'/2
														(Evt2, Avt1)
													in  %% Line 2209
													    {Avt,St}
										    ( <_cor152> when 'true' ->
											  primop 'match_fail'
											      ({'badmatch',_cor152})
										      -| ['compiler_generated'] )
										  end
						      ( <_cor144> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor144})
							-| ['compiler_generated'] )
						    end
		( <_cor135> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor135})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2210
	  <{'catch',Line,E},Vt,St0> when 'true' ->
	      %% Line 2212
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Evt,St1}> when 'true' ->
		    let <_cor159> =
			%% Line 2213
			apply 'vtnew'/2
			    (Evt, Vt)
		    in  let <_cor160> =
			    %% Line 2213
			    apply 'vtnames'/1
				(_cor159)
			in  let <Uvt> =
				%% Line 2213
				apply 'vtunsafe'/3
				    (_cor160, {'catch',Line}, [])
			    in  let <_cor162> =
				    %% Line 2214
				    apply 'vtupdate'/2
					(Evt, Vt)
				in  let <_cor163> =
					%% Line 2214
					apply 'vtupdate'/2
					    (Uvt, _cor162)
				    in  %% Line 2214
					{_cor163,St1}
		( <_cor158> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor158})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2215
	  <{'match',_X_Line,P,E},Vt,St0> when 'true' ->
	      %% Line 2216
	      case apply 'expr'/3
		       (E, Vt, St0) of
		<{Evt,St1}> when 'true' ->
		    let <_cor165> =
			%% Line 2217
			apply 'vtupdate'/2
			    (Evt, Vt)
		    in  %% Line 2217
			case apply 'pattern'/3
				 (P, _cor165, St1) of
			  <{Pvt,Bvt,St2}> when 'true' ->
			      let <St> =
				  %% Line 2218
				  apply 'reject_bin_alias_expr'/3
				      (P, E, St2)
			      in  let <_cor168> =
				      %% Line 2219
				      apply 'vtmerge'/2
					  (Evt, Pvt)
				  in  let <_cor169> =
					  %% Line 2219
					  apply 'vtupdate'/2
					      (Bvt, _cor168)
				      in  %% Line 2219
					  {_cor169,St}
			  ( <_cor166> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor166})
			    -| ['compiler_generated'] )
			end
		( <_cor164> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor164})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2221
	  <{'op',_X_Line,_X_Op,A},Vt,St> when 'true' ->
	      %% Line 2222
	      apply 'expr'/3
		  (A, Vt, St)
	  %% Line 2223
	  <{'op',Line,Op,L,R},Vt,St0>
	      when let <_cor170> =
		    call 'erlang':'=:='
			(Op, 'orelse')
		in  let <_cor171> =
			call 'erlang':'=:='
			    (Op, 'andalso')
		    in  call 'erlang':'or'
			    (_cor170, _cor171) ->
	      %% Line 2224
	      case apply 'expr'/3
		       (L, Vt, St0) of
		<{Evt1,St1}> when 'true' ->
		    let <Vt1> =
			%% Line 2225
			apply 'vtupdate'/2
			    (Evt1, Vt)
		    in  %% Line 2226
			case apply 'expr'/3
				 (R, Vt1, St1) of
			  <{Evt2,St2}> when 'true' ->
			      let <Vt2> =
				  %% Line 2227
				  apply 'vtmerge'/2
				      (Evt2, Vt1)
			      in  %% Line 2228
				  case apply 'icrt_export'/4
					   ([Vt1|[Vt2|[]]], Vt1, {Op,Line}, St2) of
				    <{Vt3,St3}> when 'true' ->
					let <_cor177> =
					    %% Line 2229
					    apply 'vtmerge'/2
						(Evt1, Vt3)
					in  %% Line 2229
					    {_cor177,St3}
				    ( <_cor176> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor176})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor174> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor174})
			    -| ['compiler_generated'] )
			end
		( <_cor172> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor172})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2230
	  <{'op',_X_Line,_X_Op,L,R},Vt,St> when 'true' ->
	      %% Line 2231
	      apply 'expr_list'/3
		  ([L|[R|[]]], Vt, St)
	  %% Line 2233
	  <{'remote',Line,_X_M,_X_F},_X_Vt,St> when 'true' ->
	      let <_cor178> =
		  %% Line 2234
		  apply 'add_error'/3
		      (Line, 'illegal_expr', St)
	      in  %% Line 2234
		  {[],_cor178}
	  ( <_cor181,_cor180,_cor179> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor181,_cor180,_cor179})
		  -| [{'function_name',{'expr',3}}] )
	    -| ['compiler_generated'] )
	end
'expr_list'/3 =
    %% Line 2239
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 2240
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <E,{Esvt,St0}> when 'true' ->
			%% Line 2241
			case apply 'expr'/3
				 (E, _cor1, St0) of
			  <{Evt,St1}> when 'true' ->
			      let <_cor4> =
				  %% Line 2242
				  apply 'vtmerge_pat'/2
				      (Evt, Esvt)
			      in  %% Line 2242
				  {_cor4,St1}
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-expr_list/3-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-expr_list/3-fun-0-'}}] )
	in  %% Line 2240
	    case call 'lists':'foldl'
		     (_cor9, %% Line 2243
			     {[],_cor0}, _cor2) of
	      <{Vt1,St1}> when 'true' ->
		  let <_cor12> =
		      %% Line 2244
		      apply 'vtnew'/2
			  (Vt1, _cor1)
		  in  let <_cor11> =
			  %% Line 2244
			  apply 'vtold'/2
			      (Vt1, _cor1)
		      in  let <_cor13> =
			      %% Line 2244
			      apply 'vtmerge'/2
				  (_cor12, _cor11)
			  in  %% Line 2244
			      {_cor13,St1}
	      ( <_cor10> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor10})
		-| ['compiler_generated'] )
	    end
'record_expr'/4 =
    %% Line 2246
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <St1> =
	    %% Line 2247
	    apply 'warn_invalid_record'/3
		(_cor3, _cor2, _cor0)
	in  %% Line 2248
	    apply 'expr'/3
		(_cor2, _cor1, St1)
'check_assoc_fields'/2 =
    %% Line 2250
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'map_field_exact',Line,_cor5,_cor6}|Fs],St> when 'true' ->
	      let <_cor2> =
		  %% Line 2251
		  apply 'add_error'/3
		      (Line, 'illegal_map_construction', St)
	      in  %% Line 2251
		  apply 'check_assoc_fields'/2
		      (Fs, _cor2)
	  %% Line 2252
	  <[{'map_field_assoc',_cor7,_cor8,_cor9}|Fs],St> when 'true' ->
	      %% Line 2253
	      apply 'check_assoc_fields'/2
		  (Fs, St)
	  %% Line 2254
	  <[],St> when 'true' ->
	      %% Line 2255
	      St
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'check_assoc_fields',2}}] )
	    -| ['compiler_generated'] )
	end
'map_fields'/4 =
    %% Line 2257
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Tag,Line,K,V}|Fs],Vt,St,F>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(Tag, 'map_field_assoc')
		in  let <_cor5> =
			%% Line 2258
			call 'erlang':'=:='
			    (Tag, 'map_field_exact')
		    in  call 'erlang':'or'
			    (_cor4, _cor5) ->
	      let <_cor7> =
		  %% Line 2259
		  case apply 'is_valid_map_key'/2
			   (K, St) of
		    %% Line 2260
		    <'true'> when 'true' ->
			St
		    %% Line 2261
		    <'false'> when 'true' ->
			apply 'add_error'/3
			    (Line, 'illegal_map_key', St)
		    %% Line 2262
		    <{'false','variable',Var}> when 'true' ->
			apply 'add_error'/3
			    (Line, {'illegal_map_key_variable',Var}, St)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2264
		  case apply F
			   ([K|[V|[]]], Vt, _cor7) of
		    <{Pvt,St2}> when 'true' ->
			%% Line 2265
			case apply 'map_fields'/4
				 (Fs, Vt, St2, F) of
			  <{Vts,St3}> when 'true' ->
			      let <_cor11> =
				  %% Line 2266
				  apply 'vtupdate'/2
				      (Pvt, Vts)
			      in  %% Line 2266
				  {_cor11,St3}
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2267
	  <[],Vt,St,_cor16> when 'true' ->
	      %% Line 2268
	      {Vt,St}
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'map_fields',4}}] )
	    -| ['compiler_generated'] )
	end
'warn_invalid_record'/3 =
    %% Line 2273
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2274
	case apply 'is_valid_record'/1
		 (_cor1) of
	  %% Line 2275
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 2276
	  <'false'> when 'true' ->
	      apply 'add_warning'/3
		  (_cor2, 'invalid_record', _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'is_valid_record'/1 =
    %% Line 2281
    fun (_cor0) ->
	%% Line 2282
	case _cor0 of
	  %% Line 2283
	  <{'char',_cor3,_cor4}> when 'true' ->
	      'false'
	  %% Line 2284
	  <{'integer',_cor5,_cor6}> when 'true' ->
	      'false'
	  %% Line 2285
	  <{'float',_cor7,_cor8}> when 'true' ->
	      'false'
	  %% Line 2286
	  <{'atom',_cor9,_cor10}> when 'true' ->
	      'false'
	  %% Line 2287
	  <{'string',_cor11,_cor12}> when 'true' ->
	      'false'
	  %% Line 2288
	  <{'cons',_cor13,_cor14,_cor15}> when 'true' ->
	      'false'
	  %% Line 2289
	  <{'nil',_cor16}> when 'true' ->
	      'false'
	  %% Line 2290
	  <{'lc',_cor17,_cor18,_cor19}> when 'true' ->
	      'false'
	  %% Line 2291
	  <{'record_index',_cor20,_cor21,_cor22}> when 'true' ->
	      'false'
	  %% Line 2292
	  <{'fun',_cor23,_cor24}> when 'true' ->
	      'false'
	  %% Line 2293
	  <{'named_fun',_cor25,_cor26,_cor27}> when 'true' ->
	      'false'
	  %% Line 2294
	  <_cor28> when 'true' ->
	      'true'
	end
'warn_invalid_call'/3 =
    %% Line 2300
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2301
	case apply 'is_valid_call'/1
		 (_cor1) of
	  %% Line 2302
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 2303
	  <'false'> when 'true' ->
	      apply 'add_warning'/3
		  (_cor2, 'invalid_call', _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'is_valid_call'/1 =
    %% Line 2308
    fun (_cor0) ->
	%% Line 2309
	case _cor0 of
	  %% Line 2310
	  <{'char',_cor4,_cor5}> when 'true' ->
	      'false'
	  %% Line 2311
	  <{'integer',_cor6,_cor7}> when 'true' ->
	      'false'
	  %% Line 2312
	  <{'float',_cor8,_cor9}> when 'true' ->
	      'false'
	  %% Line 2313
	  <{'string',_cor10,_cor11}> when 'true' ->
	      'false'
	  %% Line 2314
	  <{'cons',_cor12,_cor13,_cor14}> when 'true' ->
	      'false'
	  %% Line 2315
	  <{'nil',_cor15}> when 'true' ->
	      'false'
	  %% Line 2316
	  <{'lc',_cor16,_cor17,_cor18}> when 'true' ->
	      'false'
	  %% Line 2317
	  <{'record_index',_cor19,_cor20,_cor21}> when 'true' ->
	      'false'
	  %% Line 2318
	  <{'tuple',_cor22,Exprs}>
	      when try
		    let <_cor1> =
			call 'erlang':'length'
			    (Exprs)
		    in  call 'erlang':'=/='
			    (_cor1, 2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 2319
	  <_cor23> when 'true' ->
	      'true'
	end
'is_valid_map_key'/2 =
    %% Line 2325
    fun (_cor1,_cor0) ->
	%% Line 2326
	apply 'is_valid_map_key'/3
	    (_cor1, 'expr', _cor0)
'is_valid_map_key'/3 =
    %% Line 2327
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2328
	case apply 'expr'/3
		 (_cor2, [], _cor0) of
	  %% Line 2329
	  <{[],_cor8}> when 'true' ->
	      %% Line 2330
	      apply 'is_valid_map_key_value'/2
		  (_cor2, _cor1)
	  %% Line 2331
	  <{[Var|_cor9],_cor10}> when 'true' ->
	      let <_cor3> =
		  %% Line 2332
		  call 'erlang':'element'
		      (1, Var)
	      in  %% Line 2332
		  {'false','variable',_cor3}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'is_valid_map_key_value'/2 =
    %% Line 2335
    fun (_cor1,_cor0) ->
	%% Line 2336
	case _cor1 of
	  %% Line 2337
	  <{'char',_cor58,_cor59}> when 'true' ->
	      'true'
	  %% Line 2338
	  <{'integer',_cor60,_cor61}> when 'true' ->
	      'true'
	  %% Line 2339
	  <{'float',_cor62,_cor63}> when 'true' ->
	      'true'
	  %% Line 2340
	  <{'string',_cor64,_cor65}> when 'true' ->
	      'true'
	  %% Line 2341
	  <{'nil',_cor66}> when 'true' ->
	      'true'
	  %% Line 2342
	  <{'atom',_cor67,_cor68}> when 'true' ->
	      'true'
	  %% Line 2343
	  <{'cons',_cor69,H,T}> when 'true' ->
	      %% Line 2344
	      ( case apply 'is_valid_map_key_value'/2
			 (H, _cor0) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 2345
			apply 'is_valid_map_key_value'/2
			    (T, _cor0)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2346
	  <{'tuple',_cor70,Es}> when 'true' ->
	      let <_cor10> =
		  %% Line 2347
		  ( fun (_cor7,_cor6) ->
			%% Line 2348
			( case _cor6 of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'is_valid_map_key_value'/2
				      (_cor7, _cor0)
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor4> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor4}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-is_valid_map_key_value/2-fun-0-'}}] )
	      in  %% Line 2347
		  call 'lists':'foldl'
		      (_cor10, %% Line 2349
			       'true', %% Line 2349
				       Es)
	  %% Line 2350
	  <{'map',_cor71,Arg,Ps}> when 'true' ->
	      %% Line 2354
	      ( case apply 'is_valid_map_key_value'/2
			 (Arg, _cor0) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor24> =
			    ( fun (_cor21,_cor20) ->
				  case <_cor21,_cor20> of
				    %% Line 2355
				    <{Tag,_cor72,Ke,Ve},B>
					when let <_cor12> =
					      call 'erlang':'=:='
						  (Tag, 'map_field_assoc')
					  in  let <_cor13> =
						  %% Line 2356
						  call 'erlang':'=:='
						      (Tag, 'map_field_exact')
					      in  let <_cor14> =
						      %% Line 2356
						      call 'erlang':'=:='
							  (_cor0, 'expr')
						  in  let <_cor15> =
							  %% Line 2356
							  call 'erlang':'and'
							      (_cor13, _cor14)
						      in  call 'erlang':'or'
							      (_cor12, _cor15) ->
					%% Line 2357
					( case B of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  %% Line 2358
						  ( case apply 'is_valid_map_key_value'/2
							     (Ke, _cor0) of
						      ( <( 'true'
							   -| ['compiler_generated'] )> when 'true' ->
							    apply 'is_valid_map_key_value'/2
								(Ve, _cor0)
							-| ['compiler_generated'] )
						      ( <( 'false'
							   -| ['compiler_generated'] )> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						      ( <_cor17> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {( 'badarg'
									-| ['compiler_generated'] ),_cor17}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					    ( <_cor16> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {( 'badarg'
							      -| ['compiler_generated'] ),_cor16}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 2359
				    <_cor73,_cor74> when 'true' ->
					'false'
				  end
			      -| [{'id',{0,0,'-is_valid_map_key_value/2-fun-1-'}}] )
			in  call 'lists':'foldl'
				(_cor24, %% Line 2360
					 'true', %% Line 2360
						 Ps)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor11}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2361
	  <{'map',_cor75,Ps}> when 'true' ->
	      let <_cor38> =
		  %% Line 2362
		  ( fun (_cor35,_cor34) ->
			case <_cor35,_cor34> of
			  %% Line 2363
			  <{Tag,_cor76,Ke,Ve},B>
			      when let <_cor26> =
				    call 'erlang':'=:='
					(Tag, 'map_field_assoc')
				in  let <_cor27> =
					%% Line 2364
					call 'erlang':'=:='
					    (Tag, 'map_field_exact')
				    in  let <_cor28> =
					    %% Line 2364
					    call 'erlang':'=:='
						(_cor0, 'expr')
					in  let <_cor29> =
						%% Line 2364
						call 'erlang':'and'
						    (_cor27, _cor28)
					    in  call 'erlang':'or'
						    (_cor26, _cor29) ->
			      %% Line 2365
			      ( case B of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					%% Line 2366
					( case apply 'is_valid_map_key_value'/2
						   (Ke, _cor0) of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  apply 'is_valid_map_key_value'/2
						      (Ve, _cor0)
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					    ( <_cor31> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {( 'badarg'
							      -| ['compiler_generated'] ),_cor31}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor30> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor30}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 2367
			  <_cor77,_cor78> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-is_valid_map_key_value/2-fun-2-'}}] )
	      in  %% Line 2362
		  call 'lists':'foldl'
		      (_cor38, %% Line 2368
			       'true', %% Line 2368
				       Ps)
	  %% Line 2369
	  <{'record',_cor79,_cor80,Fs}> when 'true' ->
	      let <_cor47> =
		  %% Line 2370
		  ( fun (_cor44,_cor43) ->
			case <_cor44,_cor43> of
			  %% Line 2371
			  <{'record_field',_cor81,Ke,Ve},B> when 'true' ->
			      %% Line 2372
			      ( case B of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					%% Line 2373
					( case apply 'is_valid_map_key_value'/2
						   (Ke, _cor0) of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  apply 'is_valid_map_key_value'/2
						      (Ve, _cor0)
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					    ( <_cor40> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {( 'badarg'
							      -| ['compiler_generated'] ),_cor40}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor39> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor39}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor46,_cor45> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor46,_cor45})
				  -| [{'function_name',{'-is_valid_map_key_value/2-fun-3-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-is_valid_map_key_value/2-fun-3-'}}] )
	      in  %% Line 2370
		  call 'lists':'foldl'
		      (_cor47, %% Line 2374
			       'true', %% Line 2374
				       Fs)
	  %% Line 2375
	  <{'bin',_cor82,Es}> when 'true' ->
	      let <_cor54> =
		  %% Line 2379
		  ( fun (_cor51,_cor50) ->
			case <_cor51,_cor50> of
			  %% Line 2380
			  <{'bin_element',_cor83,E,_cor84,_cor85},B> when 'true' ->
			      %% Line 2381
			      ( case B of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'is_valid_map_key_value'/2
					    (E, _cor0)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor48> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor48}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor53,_cor52> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor53,_cor52})
				  -| [{'function_name',{'-is_valid_map_key_value/2-fun-4-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-is_valid_map_key_value/2-fun-4-'}}] )
	      in  %% Line 2379
		  call 'lists':'foldl'
		      (_cor54, %% Line 2382
			       'true', %% Line 2382
				       Es)
	  %% Line 2383
	  <_cor86> when 'true' ->
	      'false'
	end
'record_def'/4 =
    %% Line 2390
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2391
	( case _cor0 of
	    ( <( {'lint',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_rec100,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'is_key'
			   (_cor2, _rec100) of
		    %% Line 2392
		    <'true'> when 'true' ->
			apply 'add_error'/3
			    (_cor3, {'redefine_record',_cor2}, _cor0)
		    %% Line 2393
		    <'false'> when 'true' ->
			let <_cor6> =
			    %% Line 2394
			    apply 'normalise_fields'/1
				(_cor1)
			in  %% Line 2394
			    case apply 'def_fields'/3
				     (_cor6, _cor2, _cor0) of
			      <{Fs1,St1}> when 'true' ->
				  %% Line 2395
				  ( case St1 of
				      ( <( {'lint',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_rec103,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec101> =
						call 'dict':'store'
						    (_cor2, {_cor3,Fs1}, _rec103)
					    in  call 'erlang':'setelement'
						    (8, St1, _rec101)
					-| ['compiler_generated'] )
				      ( <_cor75> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','lint'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor46> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'def_fields'/3 =
    %% Line 2402
    fun (_cor2,_cor1,_cor0) ->
	let <_cor37> =
	    %% Line 2403
	    ( fun (_cor34,_cor33) ->
		  case <_cor34,_cor33> of
		    <{'record_field',Lf,{'atom',La,F},V},{Fs,St}> when 'true' ->
			%% Line 2404
			case apply 'exist_field'/2
				 (F, Fs) of
			  %% Line 2405
			  <'true'> when 'true' ->
			      let <_cor3> =
				  apply 'add_error'/3
				      (Lf, {'redefine_field',_cor1,F}, St)
			      in  {Fs,_cor3}
			  %% Line 2406
			  <'false'> when 'true' ->
			      %% Line 2407
			      case St of
				<{'lint',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}> when 'true' ->
				    let <_cor6> =
					call 'erlang':'setelement'
					    (22, St, 'true')
				    in  %% Line 2408
					case apply 'expr'/3
						 (V, [], _cor6) of
					  <{_cor71,St2}> when 'true' ->
					      %% Line 2411
					      ( case St2 of
						  ( <( {'lint',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_rec109,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99}
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 2412
							case _cor6 of
							  <{'lint',_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187}> when 'true' ->
							      let <_cor19> =
								  %% Line 2413
								  call 'erlang':'setelement'
								      (25, _cor6, _cor94)
							      in  let <_cor20> =
								      %% Line 2414
								      call 'erlang':'setelement'
									  (22, _cor19, 'false')
								  in  let <_cor21> =
									  call 'erlang':'setelement'
									      (20, _cor20, _rec109)
								      in  let <_cor23> =
									      call 'erlang':'setelement'
										  (19, _cor21, _cor89)
									  in  let <_cor30> =
										  %% Line 2417
										  case <> of
										    %% Line 2418
										    <>
											when call 'erlang':'=:='
											      (_cor89,
											       _cor176) ->
											V
										    %% Line 2419
										    <> when 'true' ->
											{'atom',La,'undefined'}
										  end
									      in  %% Line 2421
										  {[{'record_field',Lf,{'atom',La,F},_cor30}|Fs],_cor23}
							  ( <_cor188> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','lint'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    -| ['compiler_generated'] )
						  ( <_cor100> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','lint'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor8})
					    -| ['compiler_generated'] )
					end
				( <_cor70> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','lint'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  ( <_cor32> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor32})
			    -| ['compiler_generated'] )
			end
		    ( <_cor36,_cor35> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor36,_cor35})
			    -| [{'function_name',{'-def_fields/3-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-def_fields/3-fun-0-'}}] )
	in  %% Line 2403
	    call 'lists':'foldl'
		(_cor37, %% Line 2423
			 {[],_cor0}, _cor2)
'normalise_fields'/1 =
    %% Line 2430
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2431
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'record_field',Lf,Field}> when 'true' ->
			%% Line 2432
			{'record_field',Lf,Field,{'atom',Lf,'undefined'}}
		    %% Line 2433
		    <{'typed_record_field',{'record_field',Lf,Field},_X_Type}> when 'true' ->
			%% Line 2434
			{'record_field',Lf,Field,{'atom',Lf,'undefined'}}
		    %% Line 2435
		    <{'typed_record_field',Field,_X_Type}> when 'true' ->
			%% Line 2436
			Field
		    %% Line 2437
		    <F> when 'true' ->
			F
		  end
	      -| [{'id',{0,0,'-normalise_fields/1-fun-0-'}}] )
	in  %% Line 2431
	    call 'lists':'map'
		(_cor3, _cor0)
'exist_record'/3 =
    %% Line 2442
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2443
	( case _cor0 of
	    ( <( {'lint',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_rec114,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'is_key'
			   (_cor1, _rec114) of
		    %% Line 2444
		    <'true'> when 'true' ->
			apply 'used_record'/2
			    (_cor1, _cor0)
		    %% Line 2445
		    <'false'> when 'true' ->
			apply 'add_error'/3
			    (_cor2, {'undefined_record',_cor1}, _cor0)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_record'/4 =
    %% Line 2459
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2460
	( case _cor1 of
	    ( <( {'lint',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec115,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'find'
			   (_cor2, _rec115) of
		    %% Line 2461
		    <{'ok',{_X_Line,Fields}}> when 'true' ->
			let <_cor6> =
			    apply 'used_record'/2
				(_cor2, _cor1)
			in  apply _cor0
				(Fields, _cor6)
		    %% Line 2462
		    <'error'> when 'true' ->
			let <_cor7> =
			    apply 'add_error'/3
				(_cor3, {'undefined_record',_cor2}, _cor1)
			in  {[],_cor7}
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor41> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'used_record'/2 =
    %% Line 2465
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,St = {'lint',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,Usage,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
	      %% Line 2466
	      ( case Usage of
		  ( <( {'usage',_cor41,_cor42,_rec116,_cor43}
		       -| ['compiler_generated'] )> when 'true' ->
			let <UsedRecs> =
			    call 'sets':'add_element'
				(Name, _rec116)
			in  let <_cor7> =
				%% Line 2467
				call 'erlang':'setelement'
				    (4, Usage, UsedRecs)
			    in  %% Line 2467
				call 'erlang':'setelement'
				    (26, St, _cor7)
		    -| ['compiler_generated'] )
		  ( <_cor44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','usage'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'used_record',2}}] )
	    -| ['compiler_generated'] )
	end
'check_fields'/6 =
    %% Line 2474
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 2476
	    ( fun (_cor9,_cor8) ->
		  case <_cor9,_cor8> of
		    <Field,{Sfsa,Vta,Sta}> when 'true' ->
			%% Line 2477
			case apply 'check_field'/7
				 (Field, _cor4, _cor3, _cor2, %% Line 2478
							      Sta, %% Line 2478
								   Sfsa, _cor0) of
			  <{Sfsb,{Vtb,Stb}}> when 'true' ->
			      let <_cor7> =
				  %% Line 2479
				  apply 'vtmerge_pat'/2
				      (Vta, Vtb)
			      in  %% Line 2479
				  {Sfsb,_cor7,Stb}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor11,_cor10> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor11,_cor10})
			    -| [{'function_name',{'-check_fields/6-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-check_fields/6-fun-0-'}}] )
	in  %% Line 2475
	    case %% Line 2476
		 call 'lists':'foldl'
		     (_cor12, %% Line 2480
			      {[],[],_cor1}, _cor5) of
	      <{_X_SeenFields,Uvt,St1}> when 'true' ->
		  %% Line 2481
		  {Uvt,St1}
	      ( <_cor13> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor13})
		-| ['compiler_generated'] )
	    end
'check_field'/7 =
    %% Line 2483
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'record_field',Lf,{'atom',La,F},Val},Name,Fields,%% Line 2484
							     Vt,%% Line 2484
								St,%% Line 2484
								   Sfs,%% Line 2484
								       CheckFun> when 'true' ->
	      %% Line 2485
	      case call 'lists':'member'
		       (F, Sfs) of
		%% Line 2486
		<'true'> when 'true' ->
		    let <_cor7> =
			apply 'add_error'/3
			    (Lf, {'redefine_field',Name,F}, St)
		    in  {Sfs,{[],_cor7}}
		%% Line 2487
		<'false'> when 'true' ->
		    let <_cor10> =
			%% Line 2489
			case apply 'find_field'/2
				 (F, Fields) of
			  %% Line 2490
			  <{'ok',_X_I}> when 'true' ->
			      apply CheckFun
				  (Val, Vt, St)
			  %% Line 2491
			  <'error'> when 'true' ->
			      let <_cor8> =
				  apply 'add_error'/3
				      (La, {'undefined_field',Name,F}, St)
			      in  {[],_cor8}
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 2488
			{[F|Sfs],_cor10}
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2494
	  <{'record_field',_X_Lf,{'var',_X_La,'_'},Val},_X_Name,_X_Fields,%% Line 2495
									  Vt,%% Line 2495
									     St,%% Line 2495
										Sfs,%% Line 2495
										    CheckFun> when 'true' ->
	      let <_cor12> =
		  %% Line 2496
		  apply CheckFun
		      (Val, Vt, St)
	      in  %% Line 2496
		  {Sfs,_cor12}
	  %% Line 2497
	  <{'record_field',_X_Lf,{'var',La,V},_X_Val},Name,_X_Fields,%% Line 2498
								     Vt,%% Line 2498
									St,%% Line 2498
									   Sfs,%% Line 2498
									       _X_CheckFun> when 'true' ->
	      let <_cor13> =
		  %% Line 2499
		  apply 'add_error'/3
		      (La, {'field_name_is_variable',Name,V}, St)
	      in  %% Line 2499
		  {Sfs,{Vt,_cor13}}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'check_field',7}}] )
	    -| ['compiler_generated'] )
	end
'pattern_field'/4 =
    %% Line 2505
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'atom',La,F},Name,Fields,St> when 'true' ->
	      %% Line 2506
	      case apply 'find_field'/2
		       (F, Fields) of
		%% Line 2507
		<{'ok',_X_I}> when 'true' ->
		    {[],St}
		%% Line 2508
		<'error'> when 'true' ->
		    let <_cor4> =
			apply 'add_error'/3
			    (La, {'undefined_field',Name,F}, St)
		    in  {[],_cor4}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'pattern_field',4}}] )
	    -| ['compiler_generated'] )
	end
'pattern_fields'/7 =
    %% Line 2515
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <CheckFun> =
	    %% Line 2516
	    ( fun (_cor9,_cor8,_cor7) ->
		  apply 'pattern'/5
		      (_cor9, _cor8, _cor2, _cor1, _cor7)
	      -| [{'id',{0,0,'-pattern_fields/7-fun-0-'}}] )
	in  let <_cor22> =
		%% Line 2518
		( fun (_cor19,_cor18) ->
		      case <_cor19,_cor18> of
			<Field,{Sfsa,Vta,Bvt1,Sta}> when 'true' ->
			    %% Line 2519
			    case apply 'check_field'/7
				     (Field, _cor5, _cor4, _cor3, %% Line 2520
								  Sta, %% Line 2520
								       Sfsa, %% Line 2520
									     CheckFun) of
			      %% Line 2521
			      <{Sfsb,{Vtb,Stb}}> when 'true' ->
				  let <_cor14> =
				      %% Line 2522
				      apply 'vtmerge_pat'/2
					  (Vta, Vtb)
				  in  %% Line 2522
				      {Sfsb,_cor14,[],Stb}
			      %% Line 2523
			      <{Sfsb,{Vtb,Bvt2,Stb}}> when 'true' ->
				  let <_cor16> =
				      %% Line 2524
				      apply 'vtmerge_pat'/2
					  (Vta, Vtb)
				  in  let <_cor15> =
					  %% Line 2525
					  apply 'vtmerge_pat'/2
					      (Bvt1, Bvt2)
				      in  %% Line 2524
					  {Sfsb,_cor16,_cor15,%% Line 2525
							      Stb}
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor17})
				-| ['compiler_generated'] )
			    end
			( <_cor21,_cor20> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor21,_cor20})
				-| [{'function_name',{'-pattern_fields/7-fun-1-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-pattern_fields/7-fun-1-'}}] )
	    in  %% Line 2517
		case %% Line 2518
		     call 'lists':'foldl'
			 (_cor22, %% Line 2527
				  {[],[],[],_cor0}, _cor6) of
		  <{_X_SeenFields,Uvt,Bvt1,St1}> when 'true' ->
		      %% Line 2528
		      {Uvt,Bvt1,St1}
		  ( <_cor23> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor23})
		    -| ['compiler_generated'] )
		end
'record_field'/4 =
    %% Line 2534
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'atom',La,F},Name,Fields,St> when 'true' ->
	      %% Line 2535
	      case apply 'find_field'/2
		       (F, Fields) of
		%% Line 2536
		<{'ok',_X_I}> when 'true' ->
		    {[],St}
		%% Line 2537
		<'error'> when 'true' ->
		    let <_cor4> =
			apply 'add_error'/3
			    (La, {'undefined_field',Name,F}, St)
		    in  {[],_cor4}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'record_field',4}}] )
	    -| ['compiler_generated'] )
	end
'init_fields'/6 =
    %% Line 2552
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2553
	case apply 'check_fields'/6
		 (_cor5, _cor3, _cor2, _cor1, _cor0, ( 'expr'/3
						       -| [{'id',{0,0,'-init_fields/6-fun-0-'}}] )) of
	  <{Vt1,St1}> when 'true' ->
	      let <Defs> =
		  %% Line 2554
		  apply 'init_fields'/3
		      (_cor5, _cor4, _cor2)
	      in  %% Line 2555
		  case apply 'check_fields'/6
			   (Defs, _cor3, _cor2, Vt1, St1, ( 'expr'/3
							    -| [{'id',{0,0,'-init_fields/6-fun-1-'}}] )) of
		    <{_cor21,St2}> when 'true' ->
			%% Line 2556
			( case St2 of
			    ( <( {'lint',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec122,_cor46,_cor47,_cor48,_cor49}
				 -| ['compiler_generated'] )> when 'true' ->
				  case St1 of
				    <{'lint',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}> when 'true' ->
					let <_cor14> =
					    call 'erlang':'setelement'
						(26, St1, _rec122)
					in  {Vt1,_cor14}
				    ( <_cor80> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','lint'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor50> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','lint'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'ginit_fields'/6 =
    %% Line 2558
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2559
	case apply 'check_fields'/6
		 (_cor5, _cor3, _cor2, _cor1, _cor0, ( 'gexpr'/3
						       -| [{'id',{0,0,'-ginit_fields/6-fun-0-'}}] )) of
	  <{Vt1,St1}> when 'true' ->
	      let <Defs> =
		  %% Line 2560
		  apply 'init_fields'/3
		      (_cor5, _cor4, _cor2)
	      in  %% Line 2561
		  case St1 of
		    <{'lint',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
			let <_cor10> =
			    call 'erlang':'setelement'
				(19, St1, [])
			in  %% Line 2562
			    case apply 'check_fields'/6
				     (Defs, _cor3, _cor2, Vt1, _cor10, ( 'gexpr'/3
									 -| [{'id',{0,0,'-ginit_fields/6-fun-1-'}}] )) of
			      <{_cor64,St3}> when 'true' ->
				  %% Line 2563
				  case St3 of
				    <{'lint',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,Errors,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,Usage,_cor88,_cor89,_cor90,_cor91}> when 'true' ->
					let <_cor18> =
					    %% Line 2564
					    ( letrec
						  'lc$^0'/1 =
						      fun (_cor16) ->
							  case _cor16 of
							    <[E = {_X_File,{_X_Line,'erl_lint','illegal_guard_expr'}}|_cor15]> when 'true' ->
								let <_cor17> =
								    apply 'lc$^0'/1
									(_cor15)
								in  ( [E|_cor17]
								      -| ['compiler_generated'] )
							    ( <[_cor14|_cor15]> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor15)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor16> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor16})
								    -| [{'function_name',{'lc$^0',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^0'/1
						      (Errors)
					      -| ['list_comprehension'] )
					in  let <_rec124> =
						%% Line 2565
						call 'erlang':'++'
						    (_cor18, _cor51)
					    in  let <_cor24> =
						    %% Line 2565
						    call 'erlang':'setelement'
							(26, St1, Usage)
						in  let <_cor26> =
							%% Line 2565
							call 'erlang':'setelement'
							    (19, _cor24, _rec124)
						    in  %% Line 2566
							{Vt1,_cor26}
				    ( <_cor13> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor13})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor12})
				-| ['compiler_generated'] )
			    end
		    ( <_cor63> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','lint'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'init_fields'/3 =
    %% Line 2569
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2570
	( letrec
	      'lc$^0'/1 =
		  fun (_cor6) ->
		      case _cor6 of
			<[%% Line 2571
			  {'record_field',Lf,{'atom',La,F},Di}|_cor4]> when 'true' ->
			    %% Line 2572
			    ( case apply 'exist_field'/2
				       (F, _cor2) of
				<'false'> when 'true' ->
				    let <_cor7> =
					apply 'copy_expr'/2
					    (Di, _cor1)
				    in  let <_cor8> =
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [{'record_field',Lf,{'atom',La,F},_cor7}|_cor8]
					      -| ['compiler_generated'] )
				( <'true'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor4)
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			( <[_cor3|_cor4]> when 'true' ->
			      %% Line 2571
			      apply 'lc$^0'/1
				  (_cor4)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'update_fields'/5 =
    %% Line 2577
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2578
	apply 'check_fields'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, ( 'expr'/3
						  -| [{'id',{0,0,'-update_fields/5-fun-0-'}}] ))
'exist_field'/2 =
    %% Line 2583
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[{'record_field',_X_Lf,{'atom',_X_La,_cor4},_X_Val}|_X_Fs]>
	      when call 'erlang':'=:='
		    (_cor4,
		     F) ->
	      'true'
	  %% Line 2584
	  <F,[_cor5|Fs]> when 'true' ->
	      apply 'exist_field'/2
		  (F, Fs)
	  %% Line 2585
	  <_X_F,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'exist_field',2}}] )
	    -| ['compiler_generated'] )
	end
'find_field'/2 =
    %% Line 2590
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_F,[{'record_field',_X_Lf,{'atom',_X_La,_cor4},Val}|_X_Fs]>
	      when call 'erlang':'=:='
		    (_cor4,
		     _X_F) ->
	      {'ok',Val}
	  %% Line 2591
	  <F,[_cor5|Fs]> when 'true' ->
	      apply 'find_field'/2
		  (F, Fs)
	  %% Line 2592
	  <_X_F,[]> when 'true' ->
	      'error'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_field',2}}] )
	    -| ['compiler_generated'] )
	end
'type_def'/6 =
    %% Line 2598
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Attr,_X_Line,{'record',_X_RecName},Fields,[],St0> when 'true' ->
	      let <_cor10> =
		  %% Line 2601
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[{'typed_record_field',_cor49,T}|_cor7]> when 'true' ->
				      let <_cor9> =
					  apply 'lc$^0'/1
					      (_cor7)
				      in  ( [T|_cor9]
					    -| ['compiler_generated'] )
				  ( <[_cor6|_cor7]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor7)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor8> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Fields)
		    -| ['list_comprehension'] )
	      in  %% Line 2602
		  apply 'check_type'/2
		      ({'type',-1,'product',_cor10}, St0)
	  %% Line 2603
	  <Attr,Line,TypeName,ProtoType,Args,St0> when 'true' ->
	      %% Line 2604
	      ( case St0 of
		  ( <( {'lint',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_rec127,_cor77}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Arity> =
			    %% Line 2605
			    call 'erlang':'length'
				(Args)
			in  let <TypePair> = {%% Line 2606
				 TypeName,%% Line 2606
					  Arity}
			    in  let <Info> = {%% Line 2607
				     'typeinfo',%% Line 2607
						Attr,%% Line 2607
						     Line}
				in  let <StoreType> =
					%% Line 2609
					( fun (_cor25) ->
					      let <NewDefs> =
						  %% Line 2610
						  call 'dict':'store'
						      (TypePair, Info, _rec127)
					      in  let <CheckType> =
						      %% Line 2611
						      {'type',-1,'product',[ProtoType|Args]}
						  in  %% Line 2612
						      case _cor25 of
							<{'lint',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107}> when 'true' ->
							    let <_cor24> =
								call 'erlang':'setelement'
								    (29, _cor25, NewDefs)
							    in  apply 'check_type'/2
								    (CheckType, _cor24)
							( <_cor108> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','lint'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
					  -| [{'id',{0,0,'-type_def/6-fun-0-'}}] )
				    in  %% Line 2614
					case apply 'is_default_type'/1
						 (TypePair) of
					  %% Line 2615
					  <'true'> when 'true' ->
					      %% Line 2616
					      case apply 'is_obsolete_builtin_type'/1
						       (TypePair) of
						%% Line 2617
						<'true'> when 'true' ->
						    apply StoreType
							(St0)
						%% Line 2618
						<'false'> when 'true' ->
						    apply 'add_error'/3
							(Line, {'builtin_type',TypePair}, St0)
						( <_cor28> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor28})
						  -| ['compiler_generated'] )
					      end
					  %% Line 2629
					  <'false'> when 'true' ->
					      let <_cor31> =
						  %% Line 2631
						  ( case call 'dict':'is_key'
							     (TypePair, _rec127) of
						      ( <( 'true'
							   -| ['compiler_generated'] )> when 'true' ->
							    'true'
							-| ['compiler_generated'] )
						      ( <( 'false'
							   -| ['compiler_generated'] )> when 'true' ->
							    %% Line 2632
							    apply 'is_var_arity_type'/1
								(TypeName)
							-| ['compiler_generated'] )
						      ( <_cor29> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {( 'badarg'
									-| ['compiler_generated'] ),_cor29}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      in  %% Line 2630
						  case _cor31 of
						    %% Line 2634
						    <'true'> when 'true' ->
							%% Line 2635
							case apply 'is_newly_introduced_var_arity_type'/1
								 (TypeName) of
							  %% Line 2636
							  <'true'> when 'true' ->
							      let <Warn> = {%% Line 2637
								   'new_var_arity_type',%% Line 2637
											TypeName}
							      in  %% Line 2638
								  apply 'add_warning'/3
								      (Line, Warn, St0)
							  %% Line 2639
							  <'false'> when 'true' ->
							      %% Line 2640
							      apply 'add_error'/3
								  (Line, {'redefine_type',TypePair}, St0)
							  ( <_cor33> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor33})
							    -| ['compiler_generated'] )
							end
						    %% Line 2642
						    <'false'> when 'true' ->
							let <_cor36> =
							    %% Line 2644
							    ( case <> of
								( <>
								      when call 'erlang':'=:='
									    (Attr,
									     'opaque') ->
								      %% Line 2645
								      apply 'is_underspecified'/2
									  (ProtoType, Arity)
								  -| ['compiler_generated'] )
								( <> when 'true' ->
								      'false'
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							in  let <_cor39> =
								%% Line 2643
								case _cor36 of
								  %% Line 2647
								  <'true'> when 'true' ->
								      let <Warn> = {%% Line 2648
									   'underspecified_opaque',%% Line 2648
												   TypePair}
								      in  %% Line 2649
									  apply 'add_warning'/3
									      (Line, Warn, St0)
								  %% Line 2650
								  <'false'> when 'true' ->
								      St0
								  ( <_cor38> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor38})
								    -| ['compiler_generated'] )
								end
							    in  %% Line 2652
								apply StoreType
								    (_cor39)
						    ( <_cor41> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor41})
						      -| ['compiler_generated'] )
						  end
					  ( <_cor42> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor42})
					    -| ['compiler_generated'] )
					end
		    -| ['compiler_generated'] )
		  ( <_cor78> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'is_underspecified'/2 =
    %% Line 2656
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'type',_cor4,'term',[]},0> when 'true' ->
	      'true'
	  %% Line 2657
	  <{'type',_cor5,'any',[]},0> when 'true' ->
	      'true'
	  %% Line 2658
	  <_X_ProtType,_X_Arity> when 'true' ->
	      'false'
	end
'check_type'/2 =
    %% Line 2660
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2661
	    call 'dict':'new'
		()
	in  %% Line 2661
	    case apply 'check_type'/3
		     (_cor1, _cor2, _cor0) of
	      <{SeenVars,St1}> when 'true' ->
		  let <_cor11> =
		      %% Line 2662
		      ( fun (_cor7,_cor6,_cor5) ->
			    case <_cor7,_cor6,_cor5> of
			      <Var,{'seen_once',Line},AccSt> when 'true' ->
				  %% Line 2663
				  case call 'erlang':'atom_to_list'
					   (Var) of
				    %% Line 2664
				    <[95|_cor14]> when 'true' ->
					AccSt
				    %% Line 2665
				    <_cor15> when 'true' ->
					apply 'add_error'/3
					    (Line, {'singleton_typevar',Var}, AccSt)
				  end
			      %% Line 2667
			      <_X_Var,'seen_multiple',AccSt> when 'true' ->
				  %% Line 2668
				  AccSt
			      ( <_cor10,_cor9,_cor8> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor10,_cor9,_cor8})
				      -| [{'function_name',{'-check_type/2-fun-0-',3}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-check_type/2-fun-0-'}}] )
		  in  %% Line 2662
		      call 'dict':'fold'
			  (_cor11, %% Line 2669
				   St1, %% Line 2669
					SeenVars)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'check_type'/3 =
    %% Line 2671
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'ann_type',_X_L,[_X_Var|[Type|[]]]},SeenVars,St> when 'true' ->
	      %% Line 2672
	      apply 'check_type'/3
		  (Type, SeenVars, St)
	  %% Line 2673
	  <{'paren_type',_X_L,[Type|[]]},SeenVars,St> when 'true' ->
	      %% Line 2674
	      apply 'check_type'/3
		  (Type, SeenVars, St)
	  %% Line 2675
	  <{'remote_type',L,[{'atom',_cor79,Mod}|[{'atom',_cor80,Name}|[Args|[]]]]},%% Line 2676
										    SeenVars,St = %% Line 2676
												  {'lint',_cor81,CurrentMod,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108}> when 'true' ->
	      %% Line 2677
	      case <> of
		%% Line 2678
		<>
		    when call 'erlang':'=:='
			  (Mod,
			   CurrentMod) ->
		    apply 'check_type'/3
			({'type',L,Name,Args}, SeenVars, St)
		%% Line 2679
		<> when 'true' ->
		    let <_cor7> =
			%% Line 2680
			( fun (_cor4,_cor3) ->
			      case <_cor4,_cor3> of
				<T,{AccSeenVars,AccSt}> when 'true' ->
				    %% Line 2681
				    apply 'check_type'/3
					(T, AccSeenVars, AccSt)
				( <_cor6,_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6,_cor5})
					-| [{'function_name',{'-check_type/3-fun-0-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-check_type/3-fun-0-'}}] )
		    in  %% Line 2680
			call 'lists':'foldl'
			    (_cor7, %% Line 2682
				    {SeenVars,St}, %% Line 2682
						   Args)
	      end
	  %% Line 2684
	  <{'integer',_X_L,_cor109},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2685
	  <{'atom',_X_L,_cor110},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2686
	  <{'var',_X_L,'_'},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2687
	  <{'var',L,Name},SeenVars,St> when 'true' ->
	      let <_cor10> =
		  %% Line 2689
		  case call 'dict':'find'
			   (Name, SeenVars) of
		    %% Line 2690
		    <{'ok',{'seen_once',_cor111}}> when 'true' ->
			call 'dict':'store'
			    (Name, 'seen_multiple', SeenVars)
		    %% Line 2691
		    <{'ok','seen_multiple'}> when 'true' ->
			SeenVars
		    %% Line 2692
		    <'error'> when 'true' ->
			call 'dict':'store'
			    (Name, {'seen_once',L}, SeenVars)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2694
		  {_cor10,St}
	  %% Line 2695
	  <{'type',L,'bool',[]},SeenVars,St> when 'true' ->
	      let <_cor12> =
		  %% Line 2696
		  apply 'add_warning'/3
		      (L, {'renamed_type','bool','boolean'}, St)
	      in  %% Line 2696
		  {SeenVars,_cor12}
	  %% Line 2697
	  <{'type',L,'fun',[Dom|[Range|[]]]},SeenVars,St> when 'true' ->
	      let <_cor14> =
		  %% Line 2699
		  case Dom of
		    %% Line 2700
		    <{'type',_cor112,'product',_cor113}> when 'true' ->
			St
		    %% Line 2701
		    <{'type',_cor114,'any'}> when 'true' ->
			St
		    %% Line 2702
		    <_cor115> when 'true' ->
			apply 'add_error'/3
			    (L, {'type_syntax','fun'}, St)
		  end
	      in  %% Line 2704
		  apply 'check_type'/3
		      ({'type',-1,'product',[Dom|[Range|[]]]}, SeenVars, _cor14)
	  %% Line 2705
	  <{'type',L,'range',[From|[To|[]]]},SeenVars,St> when 'true' ->
	      let <_cor18> =
		  %% Line 2707
		  call 'erl_eval':'partial_eval'
		      (From)
	      in  let <_cor17> =
		      %% Line 2707
		      call 'erl_eval':'partial_eval'
			  (To)
		  in  let <_cor20> =
			  %% Line 2707
			  case <_cor18,_cor17> of
			    %% Line 2708
			    <{'integer',_cor116,X},{'integer',_cor117,Y}>
				when call 'erlang':'<'
				      (X,
				       Y) ->
				St
			    %% Line 2709
			    <_fol2583,_fol2584> when 'true' ->
				apply 'add_error'/3
				    (L, {'type_syntax','range'}, St)
			  end
		      in  %% Line 2711
			  {SeenVars,_cor20}
	  %% Line 2712
	  <{'type',_X_L,'map','any'},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2713
	  <{'type',_X_L,'map',Pairs},SeenVars,St> when 'true' ->
	      let <_cor26> =
		  %% Line 2714
		  ( fun (_cor23,_cor22) ->
			case <_cor23,_cor22> of
			  <Pair,{AccSeenVars,AccSt}> when 'true' ->
			      %% Line 2715
			      apply 'check_type'/3
				  (Pair, AccSeenVars, AccSt)
			  ( <_cor25,_cor24> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor25,_cor24})
				  -| [{'function_name',{'-check_type/3-fun-1-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-check_type/3-fun-1-'}}] )
	      in  %% Line 2714
		  call 'lists':'foldl'
		      (_cor26, %% Line 2716
			       {SeenVars,St}, %% Line 2716
					      Pairs)
	  %% Line 2717
	  <{'type',_X_L,'map_field_assoc',Dom,Range},SeenVars,St> when 'true' ->
	      %% Line 2718
	      apply 'check_type'/3
		  ({'type',-1,'product',[Dom|[Range|[]]]}, SeenVars, St)
	  %% Line 2719
	  <{'type',_X_L,'tuple','any'},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2720
	  <{'type',_X_L,'any'},SeenVars,St> when 'true' ->
	      {SeenVars,St}
	  %% Line 2721
	  <{'type',L,'binary',[Base|[Unit|[]]]},SeenVars,St> when 'true' ->
	      let <_cor29> =
		  %% Line 2723
		  call 'erl_eval':'partial_eval'
		      (Base)
	      in  let <_cor28> =
		      %% Line 2723
		      call 'erl_eval':'partial_eval'
			  (Unit)
		  in  let <_cor33> =
			  %% Line 2723
			  case <_cor29,_cor28> of
			    %% Line 2724
			    <{'integer',_cor119,BaseVal},%% Line 2725
							 {'integer',_cor120,UnitVal}>
				when let <_cor30> =
				      %% Line 2725
				      call 'erlang':'>='
					  (BaseVal, 0)
				  in  let <_cor31> =
					  %% Line 2725
					  call 'erlang':'>='
					      (UnitVal, 0)
				      in  %% Line 2725
					  call 'erlang':'and'
					      (_cor30, _cor31) ->
				%% Line 2725
				St
			    %% Line 2726
			    <_fol2587,_fol2588> when 'true' ->
				apply 'add_error'/3
				    (L, {'type_syntax','binary'}, St)
			  end
		      in  %% Line 2728
			  {SeenVars,_cor33}
	  %% Line 2729
	  <{'type',L,'record',[Name|Fields]},SeenVars,St> when 'true' ->
	      %% Line 2730
	      case Name of
		%% Line 2731
		<{'atom',_cor122,Atom}> when 'true' ->
		    let <St1> =
			%% Line 2732
			apply 'used_record'/2
			    (Atom, St)
		    in  %% Line 2733
			apply 'check_record_types'/5
			    (L, Atom, Fields, SeenVars, St1)
		%% Line 2734
		<_cor123> when 'true' ->
		    let <_cor36> =
			apply 'add_error'/3
			    (L, {'type_syntax','record'}, St)
		    in  {SeenVars,_cor36}
	      end
	  %% Line 2736
	  <{'type',_X_L,'product',Args},SeenVars,St> when 'true' ->
	      let <_cor42> =
		  %% Line 2737
		  ( fun (_cor39,_cor38) ->
			case <_cor39,_cor38> of
			  <T,{AccSeenVars,AccSt}> when 'true' ->
			      %% Line 2738
			      apply 'check_type'/3
				  (T, AccSeenVars, AccSt)
			  ( <_cor41,_cor40> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor41,_cor40})
				  -| [{'function_name',{'-check_type/3-fun-2-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-check_type/3-fun-2-'}}] )
	      in  %% Line 2737
		  call 'lists':'foldl'
		      (_cor42, %% Line 2739
			       {SeenVars,St}, %% Line 2739
					      Args)
	  %% Line 2740
	  <{'type',La,TypeName,Args},SeenVars,St> when 'true' ->
	      %% Line 2741
	      case St of
		<{'lint',_cor124,Module,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,Usage,_cor147,_cor148,Types,_cor149}> when 'true' ->
		    let <Arity> =
			%% Line 2742
			call 'erlang':'length'
			    (Args)
		    in  let <TypePair> = {%% Line 2743
			     TypeName,%% Line 2743
				      Arity}
			in  let <_cor70> =
				%% Line 2744
				case apply 'is_var_arity_type'/1
					 (TypeName) of
				  %% Line 2745
				  <'true'> when 'true' ->
				      St
				  %% Line 2746
				  <'false'> when 'true' ->
				      let <_cor48> =
					  %% Line 2748
					  ( case apply 'is_warn_enabled'/2
						     ('deprecated_type', St) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    apply 'obsolete_builtin_type'/1
							(TypePair)
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					      ( <_cor46> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),_cor46}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  let <_cor53> =
					      %% Line 2750
					      case _cor48 of
						%% Line 2751
						<{'deprecated',Repl,_cor150}>
						    when try
							  let <_cor50> =
							      call 'erlang':'element'
								  (1, Repl)
							  in  call 'erlang':'=/='
								  (_cor50, Module)
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false' ->
						    %% Line 2752
						    case call 'dict':'find'
							     (TypePair, Types) of
						      %% Line 2753
						      <{'ok',_cor151}> when 'true' ->
							  'false'
						      %% Line 2754
						      <'error'> when 'true' ->
							  'true'
						      ( <_cor51> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor51})
							-| ['compiler_generated'] )
						    end
						%% Line 2756
						<_cor152> when 'true' ->
						    'false'
					      end
					  in  %% Line 2758
					      case _cor53 of
						%% Line 2759
						<'true'> when 'true' ->
						    %% Line 2760
						    case _cor48 of
						      <{'deprecated',Replacement,Rel}> when 'true' ->
							  let <W> =
							      %% Line 2762
							      {'deprecated_builtin_type',TypePair,Replacement,Rel}
							  in  %% Line 2763
							      apply 'add_warning'/3
								  (La, W, St)
						      ( <_cor55> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor55})
							-| ['compiler_generated'] )
						    end
						%% Line 2764
						<'false'> when 'true' ->
						    %% Line 2765
						    ( case Usage of
							( <( {'usage',_cor153,_cor154,_cor155,_rec129}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <UsedTypes> =
								  %% Line 2766
								  call 'dict':'store'
								      (TypePair, La, _rec129)
							      in  let <_cor64> =
								      %% Line 2767
								      call 'erlang':'setelement'
									  (5, Usage, UsedTypes)
								  in  %% Line 2767
								      call 'erlang':'setelement'
									  (26, St, _cor64)
							  -| ['compiler_generated'] )
							( <_cor156> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','usage'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						( <_cor68> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor68})
						  -| ['compiler_generated'] )
					      end
				  ( <_cor69> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor69})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 2770
				apply 'check_type'/3
				    ({'type',-1,'product',Args}, SeenVars, _cor70)
		( <_cor43> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor43})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2771
	  <I,SeenVars,St> when 'true' ->
	      %% Line 2772
	      case call 'erl_eval':'partial_eval'
		       (I) of
		%% Line 2773
		<{'integer',_X_ILn,_X_Integer}> when 'true' ->
		    {SeenVars,St}
		%% Line 2774
		<_X_Other> when 'true' ->
		    let <_cor73> =
			%% Line 2775
			call 'erlang':'element'
			    (2, I)
		    in  let <_cor74> =
			    %% Line 2775
			    apply 'add_error'/3
				(_cor73, {'type_syntax','integer'}, St)
			in  %% Line 2775
			    {SeenVars,_cor74}
	      end
	end
'check_record_types'/5 =
    %% Line 2778
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2779
	( case _cor0 of
	    ( <( {'lint',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec133,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'find'
			   (_cor3, _rec133) of
		    %% Line 2780
		    <{'ok',{_X_L,DefFields}}> when 'true' ->
			let <_cor9> =
			    %% Line 2781
			    ( fun (_cor7) ->
				  case _cor7 of
				    <{'type',_cor48,'field_type',_cor49}> when 'true' ->
					'true'
				    %% Line 2782
				    <_cor50> when 'true' ->
					'false'
				  end
			      -| [{'id',{0,0,'-check_record_types/5-fun-0-'}}] )
			in  %% Line 2781
			    case call 'lists':'all'
				     (_cor9, _cor2) of
			      %% Line 2784
			      <'true'> when 'true' ->
				  %% Line 2785
				  apply 'check_record_types'/6
				      (_cor2, _cor3, DefFields, _cor1, _cor0, [])
			      %% Line 2786
			      <'false'> when 'true' ->
				  let <_cor10> =
				      %% Line 2787
				      apply 'add_error'/3
					  (_cor4, {'type_syntax','record'}, _cor0)
				  in  %% Line 2787
				      {_cor1,_cor10}
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor11})
				-| ['compiler_generated'] )
			    end
		    %% Line 2789
		    <'error'> when 'true' ->
			let <_cor12> =
			    %% Line 2790
			    apply 'add_error'/3
				(_cor4, {'undefined_record',_cor3}, _cor0)
			in  %% Line 2790
			    {_cor1,_cor12}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor47> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_record_types'/6 =
    %% Line 2793
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'type',_cor20,'field_type',[{'atom',AL,FName}|[Type|[]]]}|Left],%% Line 2794
									     Name,%% Line 2794
										  DefFields,%% Line 2794
											    SeenVars,%% Line 2794
												     St,%% Line 2794
													SeenFields> when 'true' ->
	      let <_cor7> =
		  %% Line 2796
		  case apply 'exist_field'/2
			   (FName, DefFields) of
		    %% Line 2797
		    <'true'> when 'true' ->
			St
		    %% Line 2798
		    <'false'> when 'true' ->
			apply 'add_error'/3
			    (AL, {'undefined_field',Name,FName}, St)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor10> =
		      %% Line 2801
		      case call 'ordsets':'is_element'
			       (FName, SeenFields) of
			%% Line 2802
			<'true'> when 'true' ->
			    apply 'add_error'/3
				(AL, {'redefine_field',Name,FName}, _cor7)
			%% Line 2803
			<'false'> when 'true' ->
			    _cor7
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor9})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 2806
		      case apply 'check_type'/3
			       (Type, SeenVars, _cor10) of
			<{NewSeenVars,St3}> when 'true' ->
			    let <NewSeenFields> =
				%% Line 2807
				call 'ordsets':'add_element'
				    (FName, SeenFields)
			    in  %% Line 2808
				apply 'check_record_types'/6
				    (Left, Name, DefFields, NewSeenVars, St3, NewSeenFields)
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor12})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2809
	  <[],_X_Name,_X_DefFields,SeenVars,St,_X_SeenFields> when 'true' ->
	      %% Line 2810
	      {SeenVars,St}
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'check_record_types',6}}] )
	    -| ['compiler_generated'] )
	end
'is_var_arity_type'/1 =
    %% Line 2812
    fun (_cor0) ->
	case _cor0 of
	  <'tuple'> when 'true' ->
	      'true'
	  %% Line 2813
	  <'map'> when 'true' ->
	      'true'
	  %% Line 2814
	  <'product'> when 'true' ->
	      'true'
	  %% Line 2815
	  <'union'> when 'true' ->
	      'true'
	  %% Line 2816
	  <'record'> when 'true' ->
	      'true'
	  %% Line 2817
	  <_cor2> when 'true' ->
	      'false'
	end
'is_default_type'/1 =
    %% Line 2819
    fun (_cor0) ->
	case _cor0 of
	  <{'any',0}> when 'true' ->
	      'true'
	  %% Line 2820
	  <{'arity',0}> when 'true' ->
	      'true'
	  %% Line 2821
	  <{'array',0}> when 'true' ->
	      'true'
	  %% Line 2822
	  <{'atom',0}> when 'true' ->
	      'true'
	  %% Line 2823
	  <{'atom',1}> when 'true' ->
	      'true'
	  %% Line 2824
	  <{'binary',0}> when 'true' ->
	      'true'
	  %% Line 2825
	  <{'binary',2}> when 'true' ->
	      'true'
	  %% Line 2826
	  <{'bitstring',0}> when 'true' ->
	      'true'
	  %% Line 2827
	  <{'bool',0}> when 'true' ->
	      'true'
	  %% Line 2828
	  <{'boolean',0}> when 'true' ->
	      'true'
	  %% Line 2829
	  <{'byte',0}> when 'true' ->
	      'true'
	  %% Line 2830
	  <{'char',0}> when 'true' ->
	      'true'
	  %% Line 2831
	  <{'dict',0}> when 'true' ->
	      'true'
	  %% Line 2832
	  <{'digraph',0}> when 'true' ->
	      'true'
	  %% Line 2833
	  <{'float',0}> when 'true' ->
	      'true'
	  %% Line 2834
	  <{'fun',0}> when 'true' ->
	      'true'
	  %% Line 2835
	  <{'fun',2}> when 'true' ->
	      'true'
	  %% Line 2836
	  <{'function',0}> when 'true' ->
	      'true'
	  %% Line 2837
	  <{'gb_set',0}> when 'true' ->
	      'true'
	  %% Line 2838
	  <{'gb_tree',0}> when 'true' ->
	      'true'
	  %% Line 2839
	  <{'identifier',0}> when 'true' ->
	      'true'
	  %% Line 2840
	  <{'integer',0}> when 'true' ->
	      'true'
	  %% Line 2841
	  <{'integer',1}> when 'true' ->
	      'true'
	  %% Line 2842
	  <{'iodata',0}> when 'true' ->
	      'true'
	  %% Line 2843
	  <{'iolist',0}> when 'true' ->
	      'true'
	  %% Line 2844
	  <{'list',0}> when 'true' ->
	      'true'
	  %% Line 2845
	  <{'list',1}> when 'true' ->
	      'true'
	  %% Line 2846
	  <{'maybe_improper_list',0}> when 'true' ->
	      'true'
	  %% Line 2847
	  <{'maybe_improper_list',2}> when 'true' ->
	      'true'
	  %% Line 2848
	  <{'mfa',0}> when 'true' ->
	      'true'
	  %% Line 2849
	  <{'module',0}> when 'true' ->
	      'true'
	  %% Line 2850
	  <{'neg_integer',0}> when 'true' ->
	      'true'
	  %% Line 2851
	  <{'nil',0}> when 'true' ->
	      'true'
	  %% Line 2852
	  <{'no_return',0}> when 'true' ->
	      'true'
	  %% Line 2853
	  <{'node',0}> when 'true' ->
	      'true'
	  %% Line 2854
	  <{'non_neg_integer',0}> when 'true' ->
	      'true'
	  %% Line 2855
	  <{'none',0}> when 'true' ->
	      'true'
	  %% Line 2856
	  <{'nonempty_list',0}> when 'true' ->
	      'true'
	  %% Line 2857
	  <{'nonempty_list',1}> when 'true' ->
	      'true'
	  %% Line 2858
	  <{'nonempty_improper_list',2}> when 'true' ->
	      'true'
	  %% Line 2859
	  <{'nonempty_maybe_improper_list',0}> when 'true' ->
	      'true'
	  %% Line 2860
	  <{'nonempty_maybe_improper_list',2}> when 'true' ->
	      'true'
	  %% Line 2861
	  <{'nonempty_string',0}> when 'true' ->
	      'true'
	  %% Line 2862
	  <{'number',0}> when 'true' ->
	      'true'
	  %% Line 2863
	  <{'pid',0}> when 'true' ->
	      'true'
	  %% Line 2864
	  <{'port',0}> when 'true' ->
	      'true'
	  %% Line 2865
	  <{'pos_integer',0}> when 'true' ->
	      'true'
	  %% Line 2866
	  <{'queue',0}> when 'true' ->
	      'true'
	  %% Line 2867
	  <{'range',2}> when 'true' ->
	      'true'
	  %% Line 2868
	  <{'reference',0}> when 'true' ->
	      'true'
	  %% Line 2869
	  <{'set',0}> when 'true' ->
	      'true'
	  %% Line 2870
	  <{'string',0}> when 'true' ->
	      'true'
	  %% Line 2871
	  <{'term',0}> when 'true' ->
	      'true'
	  %% Line 2872
	  <{'timeout',0}> when 'true' ->
	      'true'
	  %% Line 2873
	  <{'var',1}> when 'true' ->
	      'true'
	  %% Line 2874
	  <_cor2> when 'true' ->
	      'false'
	end
'is_newly_introduced_var_arity_type'/1 =
    %% Line 2876
    fun (_cor0) ->
	case _cor0 of
	  <'map'> when 'true' ->
	      'true'
	  %% Line 2877
	  <_cor2> when 'true' ->
	      'false'
	end
'is_obsolete_builtin_type'/1 =
    %% Line 2881
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2882
	    apply 'obsolete_builtin_type'/1
		(_cor0)
	in  %% Line 2882
	    call 'erlang':'=/='
		(_cor1, 'no')
'obsolete_builtin_type'/1 =
    %% Line 2885
    fun (_cor0) ->
	case _cor0 of
	  <{'array',0}> when 'true' ->
	      %% Line 2886
	      {'deprecated',{'array','array',1},[79|[84|[80|[32|[49|[56|[46|[48]]]]]]]]}
	  %% Line 2887
	  <{'dict',0}> when 'true' ->
	      %% Line 2888
	      {'deprecated',{'dict','dict',2},[79|[84|[80|[32|[49|[56|[46|[48]]]]]]]]}
	  %% Line 2889
	  <{'digraph',0}> when 'true' ->
	      %% Line 2890
	      {'deprecated',{'digraph','graph'},[79|[84|[80|[32|[49|[56|[46|[48]]]]]]]]}
	  %% Line 2891
	  <{'gb_set',0}> when 'true' ->
	      %% Line 2892
	      {'deprecated',{'gb_sets','set',1},[79|[84|[80|[32|[49|[56|[46|[48]]]]]]]]}
	  %% Line 2893
	  <{'gb_tree',0}> when 'true' ->
	      %% Line 2894
	      {'deprecated',{'gb_trees','tree',2},[79|[84|[80|[32|[49|[56|[46|[48]]]]]]]]}
	  %% Line 2895
	  <{'queue',0}> when 'true' ->
	      %% Line 2896
	      {'deprecated',{'queue','queue',1},[79|[84|[80|[32|[49|[56|[46|[48]]]]]]]]}
	  %% Line 2897
	  <{'set',0}> when 'true' ->
	      %% Line 2898
	      {'deprecated',{'sets','set',1},[79|[84|[80|[32|[49|[56|[46|[48]]]]]]]]}
	  %% Line 2899
	  <{'tid',0}> when 'true' ->
	      %% Line 2900
	      {'deprecated',{'ets','tid'},[79|[84|[80|[32|[49|[56|[46|[48]]]]]]]]}
	  %% Line 2901
	  <{Name,A}>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(Name)
		in  let <_cor2> =
			call 'erlang':'is_integer'
			    (A)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'no'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'obsolete_builtin_type',1}}] )
	    -| ['compiler_generated'] )
	end
'spec_decl'/4 =
    %% Line 2905
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Line,MFA0,TypeSpecs,St0 = {'lint',_cor17,Mod,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,Specs,_cor41,_cor42,_cor43}> when 'true' ->
	      let <_cor5,Arity> =
		  %% Line 2906
		  case MFA0 of
		    %% Line 2907
		    <{F,Arity}> when 'true' ->
			<{Mod,F,Arity},Arity>
		    %% Line 2908
		    <{_X_M,_X_F,Arity}> when 'true' ->
			<MFA0,Arity>
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_rec134> =
		      %% Line 2910
		      call 'dict':'store'
			  (_cor5, Line, Specs)
		  in  let <_cor10> =
			  %% Line 2910
			  call 'erlang':'setelement'
			      (27, St0, _rec134)
		      in  %% Line 2911
			  case call 'dict':'is_key'
				   (_cor5, Specs) of
			    %% Line 2912
			    <'true'> when 'true' ->
				apply 'add_error'/3
				    (Line, {'redefine_spec',_cor5}, _cor10)
			    %% Line 2913
			    <'false'> when 'true' ->
				apply 'check_specs'/3
				    (TypeSpecs, Arity, _cor10)
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'spec_decl',4}}] )
	    -| ['compiler_generated'] )
	end
'callback_decl'/4 =
    %% Line 2918
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Line,MFA0,TypeSpecs,St0 = %% Line 2919
				     {'lint',_cor17,Mod,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,Callbacks,_cor42,_cor43}> when 'true' ->
	      let <_cor5,Arity> =
		  %% Line 2920
		  case MFA0 of
		    %% Line 2921
		    <{F,Arity}> when 'true' ->
			<{Mod,F,Arity},Arity>
		    %% Line 2922
		    <{_X_M,_X_F,Arity}> when 'true' ->
			<MFA0,Arity>
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_rec136> =
		      %% Line 2924
		      call 'dict':'store'
			  (_cor5, Line, Callbacks)
		  in  let <_cor10> =
			  %% Line 2924
			  call 'erlang':'setelement'
			      (28, St0, _rec136)
		      in  %% Line 2925
			  case call 'dict':'is_key'
				   (_cor5, Callbacks) of
			    %% Line 2926
			    <'true'> when 'true' ->
				apply 'add_error'/3
				    (Line, {'redefine_callback',_cor5}, _cor10)
			    %% Line 2927
			    <'false'> when 'true' ->
				apply 'check_specs'/3
				    (TypeSpecs, Arity, _cor10)
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'callback_decl',4}}] )
	    -| ['compiler_generated'] )
	end
'check_specs'/3 =
    %% Line 2930
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[FunType|Left],Arity,St0> when 'true' ->
	      let <FunType1,CTypes> =
		  %% Line 2932
		  case FunType of
		    %% Line 2933
		    <{'type',_cor24,'bounded_fun',[FT = {'type',_cor25,'fun',_cor26}|[Cs|[]]]}> when 'true' ->
			let <_cor7> =
			    %% Line 2934
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor5) ->
					  case _cor5 of
					    <[{'type',_cor27,'constraint',[_cor28|[T|[]]]}|_cor4]> when 'true' ->
						let <_cor6> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [T|_cor6]
						      -| ['compiler_generated'] )
					    ( <[_cor3|_cor4]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor4)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor5> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor5})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Cs)
			      -| ['list_comprehension'] )
			in  let <_cor9> =
				%% Line 2935
				call 'lists':'append'
				    (_cor7)
			    in  %% Line 2935
				<FT,_cor9>
		    %% Line 2936
		    <FT = {'type',_cor29,'fun',_cor30}> when 'true' ->
			<FT,[]>
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor14,L> =
		      %% Line 2939
		      case FunType1 of
			%% Line 2940
			<{'type',L,'fun',['any'|[_cor31|[]]]}> when 'true' ->
			    <'any',L>
			%% Line 2941
			<{'type',L,'fun',[{'type',_cor32,'product',D}|[_cor33|[]]]}> when 'true' ->
			    <call 'erlang':'length'
				 (D),L>
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor17> =
			  %% Line 2943
			  case <> of
			    %% Line 2944
			    <>
				when call 'erlang':'=:='
				      (Arity,
				       _cor14) ->
				St0
			    %% Line 2945
			    <> when 'true' ->
				apply 'add_error'/3
				    (L, 'spec_wrong_arity', St0)
			  end
		      in  let <St2> =
			      %% Line 2947
			      apply 'check_type'/2
				  ({'type',-1,'product',[FunType1|CTypes]}, _cor17)
			  in  %% Line 2948
			      apply 'check_specs'/3
				  (Left, Arity, St2)
	  %% Line 2949
	  <[],_X_Arity,St> when 'true' ->
	      %% Line 2950
	      St
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'check_specs',3}}] )
	    -| ['compiler_generated'] )
	end
'check_specs_without_function'/1 =
    %% Line 2952
    fun (_cor0) ->
	case _cor0 of
	  <St = {'lint',_cor10,Mod,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Funcs,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,Specs,_cor33,_cor34,_cor35}> when 'true' ->
	      let <Fun> =
		  %% Line 2953
		  ( fun (_cor4,_cor3,_cor2) ->
			case <_cor4,_cor3,_cor2> of
			  <MFA = {M,F,A},Line,AccSt>
			      when call 'erlang':'=:='
				    (M,
				     Mod) ->
			      %% Line 2954
			      case call 'gb_sets':'is_element'
				       ({F,A}, Funcs) of
				%% Line 2955
				<'true'> when 'true' ->
				    AccSt
				%% Line 2956
				<'false'> when 'true' ->
				    apply 'add_error'/3
					(Line, {'spec_fun_undefined',MFA}, AccSt)
				( <_cor1> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor1})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2958
			  <{_X_M,_X_F,_X_A},_X_Line,AccSt> when 'true' ->
			      AccSt
			  ( <_cor7,_cor6,_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor7,_cor6,_cor5})
				  -| [{'function_name',{'-check_specs_without_function/1-fun-0-',3}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-check_specs_without_function/1-fun-0-'}}] )
	      in  %% Line 2960
		  call 'dict':'fold'
		      (Fun, St, Specs)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'check_specs_without_function',1}}] )
	    -| ['compiler_generated'] )
	end
'check_functions_without_spec'/2 =
    %% Line 2964
    fun (_cor1,_cor0) ->
	%% Line 2965
	case apply 'is_warn_enabled'/2
		 ('missing_spec_all', _cor0) of
	  %% Line 2966
	  <'true'> when 'true' ->
	      %% Line 2967
	      apply 'add_missing_spec_warnings'/3
		  (_cor1, _cor0, 'all')
	  %% Line 2968
	  <'false'> when 'true' ->
	      %% Line 2969
	      case apply 'is_warn_enabled'/2
		       ('missing_spec', _cor0) of
		%% Line 2970
		<'true'> when 'true' ->
		    %% Line 2971
		    apply 'add_missing_spec_warnings'/3
			(_cor1, _cor0, 'exported')
		%% Line 2972
		<'false'> when 'true' ->
		    _cor0
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'add_missing_spec_warnings'/3 =
    %% Line 2977
    fun (_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 2978
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[{_X_M,F,A}|_cor4]> when 'true' ->
				let <_cor9> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [{F,A}|_cor9]
				      -| ['compiler_generated'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  ( case _cor1 of
		      ( <( {'lint',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_rec138,_cor69,_cor70,_cor71}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor7> =
				call 'dict':'fetch_keys'
				    (_rec138)
			    in  apply 'lc$^0'/1
				    (_cor7)
			-| ['compiler_generated'] )
		      ( <_cor72> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','lint'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['list_comprehension'] )
	in  let <_cor34> =
		%% Line 2980
		case _cor0 of
		  %% Line 2981
		  <'all'> when 'true' ->
		      %% Line 2982
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor17) ->
				    case _cor17 of
				      <[{'function',L,F,A,_cor73}|_cor13]> when 'true' ->
					  let <_cor15> = {%% Line 2983
					       F,%% Line 2983
						 A}
					  in  let <FA> = {%% Line 2983
						   F,%% Line 2983
						     A}
					      in  %% Line 2983
						  ( case call 'lists':'member'
							     (_cor15, _cor10) of
						      <'false'> when 'true' ->
							  let <_cor18> =
							      apply 'lc$^1'/1
								  (_cor13)
							  in  ( [{FA,L}|_cor18]
								-| ['compiler_generated'] )
						      ( <'true'> when 'true' ->
							    apply 'lc$^1'/1
								(_cor13)
							-| ['compiler_generated'] )
						      ( <_cor_variable> when 'true' ->
							    call 'erlang':'error'
								('badarg')
							-| ['compiler_generated'] )
						    end
						    -| ['list_comprehension'] )
				      ( <[_cor12|_cor13]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor13)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor17> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor17})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_cor2)
			-| ['list_comprehension'] )
		  %% Line 2984
		  <'exported'> when 'true' ->
		      %% Line 2985
		      ( case _cor1 of
			  ( <( {'lint',_cor74,_cor75,_cor76,_rec139,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor23> =
				    call 'gb_sets':'to_list'
					(_rec139)
				in  let <_cor20> =
					apply 'pseudolocals'/0
					    ()
				    in  let <Exps> =
					    call 'erlang':'--'
						(_cor23, _cor20)
					in  %% Line 2986
					    ( letrec
						  'lc$^2'/1 =
						      fun (_cor30) ->
							  case _cor30 of
							    <[{'function',L,F,A,_cor103}|_cor26]> when 'true' ->
								let <_cor29> = {%% Line 2987
								     F,%% Line 2987
								       A}
								in  let <FA> = {%% Line 2987
									 F,%% Line 2987
									   A}
								    in  let <_cor27> =
									    %% Line 2987
									    call 'erlang':'--'
										(Exps, _cor10)
									in  %% Line 2987
									    ( case call 'lists':'member'
										       (_cor29, _cor27) of
										<'true'> when 'true' ->
										    let <_cor31> =
											apply 'lc$^2'/1
											    (_cor26)
										    in  ( [{FA,L}|_cor31]
											  -| ['compiler_generated'] )
										( <'false'> when 'true' ->
										      apply 'lc$^2'/1
											  (_cor26)
										  -| ['compiler_generated'] )
										( <_cor32> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor32})
										  -| ['compiler_generated'] )
									      end
									      -| ['list_comprehension'] )
							    ( <[_cor25|_cor26]> when 'true' ->
								  apply 'lc$^2'/1
								      (_cor26)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor30> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor30})
								    -| [{'function_name',{'lc$^2',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^2'/1
						      (_cor2)
					      -| ['list_comprehension'] )
			    -| ['compiler_generated'] )
			  ( <_cor102> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','lint'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  ( <_cor33> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor33})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor40> =
		    %% Line 2989
		    ( fun (_cor37,_cor36) ->
			  case <_cor37,_cor36> of
			    <{FA,L},St> when 'true' ->
				%% Line 2990
				apply 'add_warning'/3
				    (L, {'missing_spec',FA}, St)
			    ( <_cor39,_cor38> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor39,_cor38})
				    -| [{'function_name',{'-add_missing_spec_warnings/3-fun-0-',2}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-add_missing_spec_warnings/3-fun-0-'}}] )
		in  %% Line 2989
		    call 'lists':'foldl'
			(_cor40, _cor1, _cor34)
'check_unused_types'/2 =
    %% Line 2993
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Forms,St = {'lint',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,Usage,_cor51,_cor52,Ts,ExpTs}> when 'true' ->
	      let <_cor6> =
		  %% Line 2994
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{'attribute',_X_L,'file',{File,_X_Line}}|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [File|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Forms)
		    -| ['list_comprehension'] )
	      in  %% Line 2994
		  case _cor6 of
		    %% Line 2995
		    <[FirstFile|_cor53]> when 'true' ->
			%% Line 2996
			( case Usage of
			    ( <( {'usage',_cor54,_cor55,_cor56,_rec140}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor11> =
				      %% Line 2997
				      call 'gb_sets':'to_list'
					  (ExpTs)
				  in  let <_cor10> =
					  %% Line 2997
					  call 'dict':'fetch_keys'
					      (_rec140)
				      in  let <L> =
					      %% Line 2997
					      call 'erlang':'++'
						  (_cor11, _cor10)
					  in  let <UsedTypes> =
						  %% Line 2998
						  call 'gb_sets':'from_list'
						      (L)
					      in  let <FoldFun> =
						      %% Line 3000
						      ( fun (_cor19,_cor18,_cor17) ->
							    case <_cor19,_cor18,_cor17> of
							      <Type,{'typeinfo',_cor58,FileLine},AccSt> when 'true' ->
								  %% Line 3001
								  case apply 'loc'/1
									   (FileLine) of
								    %% Line 3002
								    <{_cor59,_cor60}>
									when call 'erlang':'=:='
									      (_cor59,
									       FirstFile) ->
									%% Line 3003
									case call 'gb_sets':'is_member'
										 (Type, UsedTypes) of
									  %% Line 3004
									  <'true'> when 'true' ->
									      AccSt
									  %% Line 3005
									  <'false'> when 'true' ->
									      let <Warn> = {%% Line 3006
										   'unused_type',%% Line 3006
												 Type}
									      in  %% Line 3007
										  apply 'add_warning'/3
										      (FileLine, Warn, AccSt)
									  ( <_cor15> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor15})
									    -| ['compiler_generated'] )
									end
								    %% Line 3009
								    <_cor61> when 'true' ->
									%% Line 3011
									AccSt
								  end
							      ( <_cor22,_cor21,_cor20> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor22,_cor21,_cor20})
								      -| [{'function_name',{'-check_unused_types/2-fun-0-',3}}] )
								-| ['compiler_generated'] )
							    end
							-| [{'id',{0,0,'-check_unused_types/2-fun-0-'}}] )
						  in  %% Line 3014
						      call 'dict':'fold'
							  (FoldFun, St, Ts)
			      -| ['compiler_generated'] )
			    ( <_cor57> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','usage'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 3015
		    <[]> when 'true' ->
			%% Line 3016
			St
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor24})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25})
		  -| [{'function_name',{'check_unused_types',2}}] )
	    -| ['compiler_generated'] )
	end
'check_local_opaque_types'/1 =
    %% Line 3019
    fun (_cor0) ->
	%% Line 3020
	case _cor0 of
	  <{'lint',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,Ts,ExpTs}> when 'true' ->
	      let <FoldFun> =
		  %% Line 3022
		  ( fun (_cor6,_cor5,_cor4) ->
			case <_cor6,_cor5,_cor4> of
			  <_X_Type,{'typeinfo','type',_cor39},AccSt> when 'true' ->
			      %% Line 3023
			      AccSt
			  %% Line 3024
			  <Type,{'typeinfo','opaque',FileLine},AccSt> when 'true' ->
			      %% Line 3025
			      case call 'gb_sets':'is_element'
				       (Type, ExpTs) of
				%% Line 3026
				<'true'> when 'true' ->
				    AccSt
				%% Line 3027
				<'false'> when 'true' ->
				    let <Warn> = {%% Line 3028
					 'not_exported_opaque',%% Line 3028
							       Type}
				    in  %% Line 3029
					apply 'add_warning'/3
					    (FileLine, Warn, AccSt)
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor3})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor9,_cor8,_cor7> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor9,_cor8,_cor7})
				  -| [{'function_name',{'-check_local_opaque_types/1-fun-0-',3}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-check_local_opaque_types/1-fun-0-'}}] )
	      in  %% Line 3032
		  call 'dict':'fold'
		      (FoldFun, _cor0, Ts)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'icrt_clauses'/4 =
    %% Line 3037
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3038
	case apply 'icrt_clauses'/3
		 (_cor3, _cor1, _cor0) of
	  <{Csvt,St1}> when 'true' ->
	      %% Line 3039
	      apply 'icrt_export'/4
		  (Csvt, _cor1, _cor2, St1)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'icrt_clauses'/3 =
    %% Line 3044
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 3045
	    ( fun (_cor4,_cor3) ->
		  apply 'icrt_clause'/3
		      (_cor4, _cor1, _cor3)
	      -| [{'id',{0,0,'-icrt_clauses/3-fun-0-'}}] )
	in  %% Line 3045
	    call 'lists':'mapfoldl'
		(_cor7, _cor0, _cor2)
'icrt_clause'/3 =
    %% Line 3047
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'clause',_X_Line,H,G,B},Vt0,St0> when 'true' ->
	      %% Line 3048
	      case apply 'head'/3
		       (H, Vt0, St0) of
		<{Hvt,Binvt,St1}> when 'true' ->
		    let <_cor4> =
			%% Line 3049
			apply 'vtupdate'/2
			    (Binvt, Vt0)
		    in  let <Vt1> =
			    %% Line 3049
			    apply 'vtupdate'/2
				(Hvt, _cor4)
			in  %% Line 3050
			    case apply 'guard'/3
				     (G, Vt1, St1) of
			      <{Gvt,St2}> when 'true' ->
				  let <Vt2> =
				      %% Line 3051
				      apply 'vtupdate'/2
					  (Gvt, Vt1)
				  in  %% Line 3052
				      case apply 'exprs'/3
					       (B, Vt2, St2) of
					<{Bvt,St3}> when 'true' ->
					    let <_cor9> =
						%% Line 3053
						apply 'vtupdate'/2
						    (Bvt, Vt2)
					    in  %% Line 3053
						{_cor9,St3}
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor8})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'icrt_clause',3}}] )
	    -| ['compiler_generated'] )
	end
'icrt_export'/4 =
    %% Line 3055
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Vt1> =
	    %% Line 3056
	    apply 'vtmerge'/1
		(_cor3)
	in  let <_cor6> =
		%% Line 3057
		apply 'vintersection'/1
		    (_cor3)
	    in  let <_cor5> =
		    %% Line 3057
		    apply 'vtnames'/1
			(_cor2)
		in  let <All> =
			%% Line 3057
			call 'ordsets':'subtract'
			    (_cor6, _cor5)
		    in  let <_cor9> =
			    %% Line 3058
			    apply 'vtnames'/1
				(Vt1)
			in  let <_cor8> =
				%% Line 3058
				apply 'vtnames'/1
				    (_cor2)
			    in  let <Some> =
				    %% Line 3058
				    call 'ordsets':'subtract'
					(_cor9, _cor8)
				in  let <Xvt> =
					%% Line 3059
					apply 'vtexport'/3
					    (All, _cor1, [])
				    in  let <_cor12> =
					    %% Line 3060
					    call 'ordsets':'subtract'
						(Some, All)
					in  let <Evt> =
						%% Line 3060
						apply 'vtunsafe'/3
						    (_cor12, _cor1, Xvt)
					    in  let <_cor19> =
						    %% Line 3061
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor16) ->
								  case _cor16 of
								    <[Vt0|_cor15]> when 'true' ->
									let <_cor17> =
									    apply 'unused_vars'/3
										(Vt0, _cor2, _cor0)
									in  let <_cor18> =
										apply 'lc$^0'/1
										    (_cor15)
									    in  ( [_cor17|_cor18]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor16> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor16})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      (_cor3)
						      -| ['list_comprehension'] )
						in  let <Unused> =
							%% Line 3061
							apply 'vtmerge'/1
							    (_cor19)
						    in  let <Uvt> =
							    %% Line 3063
							    apply 'vtmerge'/2
								(Evt, Unused)
							in  let <_cor22> =
								%% Line 3065
								apply 'vtsubtract'/2
								    (Vt1, Uvt)
							    in  let <Vt2> =
								    %% Line 3065
								    apply 'vtmerge'/2
									(Uvt, _cor22)
								in  let <_cor26> =
									%% Line 3067
									apply 'vtnew'/2
									    (Vt2, _cor2)
								    in  let <_cor24> =
									    %% Line 3067
									    apply 'vtold'/2
										(Vt2, _cor2)
									in  let <_cor25> =
										%% Line 3067
										apply 'vt_no_unused'/1
										    (_cor24)
									    in  let <Vt3> =
										    %% Line 3067
										    apply 'vtmerge'/2
											(_cor26, _cor25)
										in  %% Line 3068
										    {Vt3,_cor0}
'handle_comprehension'/4 =
    %% Line 3070
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3071
	case apply 'lc_quals'/3
		 (_cor2, _cor1, _cor0) of
	  <{Vt1,Uvt,St1}> when 'true' ->
	      %% Line 3072
	      case apply 'expr'/3
		       (_cor3, Vt1, St1) of
		<{Evt,St2}> when 'true' ->
		    let <Vt2> =
			%% Line 3073
			apply 'vtupdate'/2
			    (Evt, Vt1)
		    in  %% Line 3075
			case apply 'check_old_unused_vars'/3
				 (Vt2, Uvt, St2) of
			  <{_cor18,St3}> when 'true' ->
			      %% Line 3077
			      case apply 'check_unused_vars'/3
				       (Uvt, _cor1, St3) of
				<{_cor19,St4}> when 'true' ->
				    %% Line 3079
				    case apply 'check_unused_vars'/3
					     (Vt2, _cor1, St4) of
				      <{_cor20,St}> when 'true' ->
					  let <_cor10> =
					      %% Line 3080
					      apply 'vtsubtract'/2
						  (Vt2, Uvt)
					  in  let <Vt3> =
						  %% Line 3080
						  apply 'vtmerge'/2
						      (_cor10, Uvt)
					      in  let <Vt4> =
						      %% Line 3082
						      apply 'vtold'/2
							  (Vt3, _cor1)
						  in  let <Vt5> =
							  %% Line 3084
							  apply 'vt_no_unused'/1
							      (Vt4)
						      in  %% Line 3085
							  {Vt5,St}
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor9})
					-| ['compiler_generated'] )
				    end
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'lc_quals'/3 =
    %% Line 3098
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3099
	( case _cor0 of
	    ( <( {'lint',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_rec141,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor8> =
		      %% Line 3100
		      call 'erlang':'setelement'
			  (22, _cor0, 'false')
		  in  %% Line 3100
		      case apply 'lc_quals'/4
			       (_cor2, _cor1, [], _cor8) of
			<{Vt,Uvt,St}> when 'true' ->
			    %% Line 3101
			    case St of
			      <{'lint',_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103}> when 'true' ->
				  let <_cor12> =
				      call 'erlang':'setelement'
					  (22, St, _rec141)
				  in  {Vt,Uvt,_cor12}
			      ( <_cor104> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','lint'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'lc_quals'/4 =
    %% Line 3103
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'generate',_X_Line,P,E}|Qs],Vt0,Uvt0,St0> when 'true' ->
	      %% Line 3104
	      case apply 'handle_generator'/5
		       (P, E, Vt0, Uvt0, St0) of
		<{Vt,Uvt,St}> when 'true' ->
		    %% Line 3105
		    apply 'lc_quals'/4
			(Qs, Vt, Uvt, St)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3106
	  <[{'b_generate',_X_Line,P,E}|Qs],Vt0,Uvt0,St0> when 'true' ->
	      let <St1> =
		  %% Line 3107
		  apply 'handle_bitstring_gen_pat'/2
		      (P, St0)
	      in  %% Line 3108
		  case apply 'handle_generator'/5
			   (P, E, Vt0, Uvt0, St1) of
		    <{Vt,Uvt,St}> when 'true' ->
			%% Line 3109
			apply 'lc_quals'/4
			    (Qs, Vt, Uvt, St)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3110
	  <[F|Qs],Vt,Uvt,St0> when 'true' ->
	      %% Line 3111
	      ( case St0 of
		  ( <( {'lint',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_rec144,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor10> =
			    case apply 'is_guard_test2'/2
				     (F, _rec144) of
			      %% Line 3112
			      <'true'> when 'true' ->
				  apply 'guard_test'/3
				      (F, Vt, St0)
			      %% Line 3113
			      <'false'> when 'true' ->
				  apply 'expr'/3
				      (F, Vt, St0)
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor9})
				-| ['compiler_generated'] )
			    end
			in  case _cor10 of
			      <{Fvt,St1}> when 'true' ->
				  let <_cor12> =
				      %% Line 3115
				      apply 'vtupdate'/2
					  (Fvt, Vt)
				  in  %% Line 3115
				      apply 'lc_quals'/4
					  (Qs, _cor12, Uvt, St1)
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor45> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3116
	  <[],Vt,Uvt,St> when 'true' ->
	      %% Line 3117
	      {Vt,Uvt,St}
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'lc_quals',4}}] )
	    -| ['compiler_generated'] )
	end
'handle_generator'/5 =
    %% Line 3119
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3120
	case apply 'expr'/3
		 (_cor3, _cor2, _cor0) of
	  <{Evt,St1}> when 'true' ->
	      let <_cor6> =
		  %% Line 3122
		  apply 'vtold'/2
		      (Evt, _cor2)
	      in  let <Vt1> =
		      %% Line 3122
		      apply 'vtupdate'/2
			  (_cor6, _cor2)
		  in  %% Line 3123
		      case apply 'check_unused_vars'/3
			       (Evt, _cor2, St1) of
			<{_cor23,St2}> when 'true' ->
			    %% Line 3124
			    case apply 'pattern'/5
				     (_cor4, Vt1, [], [], St2) of
			      <{Pvt,Binvt,St3}> when 'true' ->
				  let <Vt2> =
				      %% Line 3128
				      apply 'vtupdate'/2
					  (Pvt, Vt1)
				  in  let <St4> =
					  %% Line 3129
					  apply 'shadow_vars'/4
					      (Binvt, Vt1, 'generate', St3)
				      in  let <Svt> =
					      %% Line 3130
					      apply 'vtold'/2
						  (Vt2, Binvt)
					  in  %% Line 3131
					      case apply 'check_old_unused_vars'/3
						       (Svt, _cor1, St4) of
						<{_cor24,St5}> when 'true' ->
						    let <_cor14> =
							%% Line 3132
							apply 'vtnew'/2
							    (Svt, _cor1)
						    in  let <NUvt> =
							    %% Line 3132
							    apply 'vtupdate'/2
								(_cor14, _cor1)
							in  let <_cor16> =
								%% Line 3133
								apply 'vtsubtract'/2
								    (Vt2, Binvt)
							    in  let <Vt3> =
								    %% Line 3133
								    apply 'vtupdate'/2
									(_cor16, Binvt)
								in  %% Line 3134
								    {Vt3,NUvt,St5}
						( <_cor13> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor13})
						  -| ['compiler_generated'] )
					      end
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor9})
				-| ['compiler_generated'] )
			    end
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'handle_bitstring_gen_pat'/2 =
    %% Line 3136
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'bin',_cor11,Segments = [_cor12|_cor13]},St> when 'true' ->
	      %% Line 3137
	      case call 'lists':'last'
		       (Segments) of
		%% Line 3138
		<{'bin_element',Line,{'var',_cor14,_cor15},'default',Flags}>
		    when call 'erlang':'is_list'
			  (Flags) ->
		    let <_cor6> =
			%% Line 3139
			( case call 'lists':'member'
				   ('binary', Flags) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 3140
				  ( case call 'lists':'member'
					     ('bits', Flags) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    'true'
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'lists':'member'
						('bitstring', Flags)
					-| ['compiler_generated'] )
				      ( <_cor3> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor3}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_cor2> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor2}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 3139
			case _cor6 of
			  %% Line 3141
			  <'true'> when 'true' ->
			      %% Line 3142
			      apply 'add_error'/3
				  (Line, 'unsized_binary_in_bin_gen_pattern', St)
			  %% Line 3143
			  <'false'> when 'true' ->
			      %% Line 3144
			      St
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		%% Line 3146
		<_cor16> when 'true' ->
		    %% Line 3147
		    St
	      end
	  %% Line 3149
	  <_cor17,St> when 'true' ->
	      %% Line 3150
	      St
	end
'fun_clauses'/3 =
    %% Line 3160
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3161
	( case _cor0 of
	    ( <( {'lint',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_rec145,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor15> =
		      %% Line 3162
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <C,{Bvt0,St0}> when 'true' ->
				  %% Line 3163
				  case apply 'fun_clause'/3
					   (C, _cor1, St0) of
				    <{Cvt,St1}> when 'true' ->
					let <_cor10> =
					    %% Line 3164
					    apply 'vtmerge'/2
						(Cvt, Bvt0)
					in  %% Line 3164
					    {_cor10,St1}
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor14,_cor13> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor14,_cor13})
				      -| [{'function_name',{'-fun_clauses/3-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-fun_clauses/3-fun-0-'}}] )
		  in  let <_cor8> =
			  %% Line 3165
			  call 'erlang':'setelement'
			      (22, _cor0, 'false')
		      in  %% Line 3162
			  case call 'lists':'foldl'
				   (_cor15, %% Line 3165
					    {[],_cor8}, _cor2) of
			    <{Bvt,St2}> when 'true' ->
				let <_cor20> =
				    %% Line 3166
				    apply 'vtold'/2
					(Bvt, _cor1)
				in  let <_cor21> =
					%% Line 3166
					apply 'vt_no_unused'/1
					    (_cor20)
				    in  %% Line 3166
					case St2 of
					  <{'lint',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112}> when 'true' ->
					      let <_cor19> =
						  call 'erlang':'setelement'
						      (22, St2, _rec145)
					      in  {_cor21,_cor19}
					  ( <_cor113> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','lint'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor16})
			      -| ['compiler_generated'] )
			  end
	      -| ['compiler_generated'] )
	    ( <_cor53> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','lint'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fun_clause'/3 =
    %% Line 3168
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'clause',_X_Line,H,G,B},Vt0,St0> when 'true' ->
	      %% Line 3169
	      case apply 'head'/4
		       (H, Vt0, [], St0) of
		<{Hvt,Binvt,St1}> when 'true' ->
		    let <Vt1> =
			%% Line 3170
			apply 'vtupdate'/2
			    (Hvt, Vt0)
		    in  let <St2> =
			    %% Line 3171
			    apply 'shadow_vars'/4
				(Binvt, Vt0, 'fun', St1)
			in  let <_cor6> =
				%% Line 3172
				apply 'vtsubtract'/2
				    (Vt1, Binvt)
			    in  let <Vt2> =
				    %% Line 3172
				    apply 'vtupdate'/2
					(_cor6, Binvt)
				in  %% Line 3173
				    case apply 'guard'/3
					     (G, Vt2, St2) of
				      <{Gvt,St3}> when 'true' ->
					  let <Vt3> =
					      %% Line 3174
					      apply 'vtupdate'/2
						  (Gvt, Vt2)
					  in  %% Line 3175
					      case apply 'exprs'/3
						       (B, Vt3, St3) of
						<{Bvt,St4}> when 'true' ->
						    let <Cvt> =
							%% Line 3176
							apply 'vtupdate'/2
							    (Bvt, Vt3)
						    in  %% Line 3178
							case apply 'check_unused_vars'/3
								 (Cvt, Vt0, St4) of
							  <{_cor21,St5}> when 'true' ->
							      let <Svt> =
								  %% Line 3180
								  apply 'vtold'/2
								      (Vt1, Binvt)
							      in  %% Line 3181
								  case apply 'check_old_unused_vars'/3
									   (Cvt, Svt, St5) of
								    <{_cor22,St6}> when 'true' ->
									let <_cor15> =
									    %% Line 3182
									    apply 'vtsubtract'/2
										(Cvt, Svt)
									in  let <Vt4> =
										%% Line 3182
										apply 'vtmerge'/2
										    (Svt, _cor15)
									    in  let <_cor17> =
										    %% Line 3183
										    apply 'vtold'/2
											(Vt4, Vt0)
										in  %% Line 3183
										    {_cor17,St6}
								    ( <_cor14> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor14})
								      -| ['compiler_generated'] )
								  end
							  ( <_cor12> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor12})
							    -| ['compiler_generated'] )
							end
						( <_cor10> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor10})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'fun_clause',3}}] )
	    -| ['compiler_generated'] )
	end
'pat_var'/5 =
    %% Line 3223
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3224
	case call 'orddict':'find'
		 (_cor4, _cor1) of
	  %% Line 3225
	  <{'ok',{'bound',_X_Usage,Ls}}> when 'true' ->
	      %% Line 3226
	      {[],[{_cor4,{'bound','used',Ls}}|[]],_cor0}
	  %% Line 3227
	  <'error'> when 'true' ->
	      %% Line 3228
	      case call 'orddict':'find'
		       (_cor4, _cor2) of
		%% Line 3229
		<{'ok',{'bound',_X_Usage,Ls}}> when 'true' ->
		    %% Line 3230
		    {[{_cor4,{'bound','used',Ls}}|[]],[],_cor0}
		%% Line 3231
		<{'ok',{{'unsafe',In},_X_Usage,Ls}}> when 'true' ->
		    let <_cor5> =
			%% Line 3233
			apply 'add_error'/3
			    (_cor3, {'unsafe_var',_cor4,In}, _cor0)
		    in  %% Line 3232
			{[{_cor4,{'bound','used',Ls}}|[]],[],_cor5}
		%% Line 3234
		<{'ok',{{'export',From},_X_Usage,Ls}}> when 'true' ->
		    let <_cor6> =
			%% Line 3237
			apply 'add_warning'/3
			    (_cor3, {'exported_var',_cor4,From}, _cor0)
		    in  %% Line 3235
			{[{_cor4,{'bound','used',Ls}}|[]],[],_cor6}
		%% Line 3238
		<'error'>
		    when ( try
			    ( case <> of
				( <>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_record'
									       -| ['compiler_generated'] )
					      (_cor0,
					       ( 'lint'
						 -| ['compiler_generated'] ),
					       ( 30
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      let <_cor11> =
					  ( call 'erlang':'element'
						(22, _cor0)
					    -| ['compiler_generated'] )
				      in  ( call 'erlang':'=:='
						(_cor11, 'true')
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <_cor13> =
			%% Line 3240
			apply 'add_error'/3
			    (_cor3, {'variable_in_record_def',_cor4}, _cor0)
		    in  %% Line 3239
			{[],[{_cor4,{'bound','unused',[_cor3|[]]}}|[]],_cor13}
		%% Line 3241
		<'error'> when 'true' ->
		    {[],[{_cor4,{'bound','unused',[_cor3|[]]}}|[]],_cor0}
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'pat_binsize_var'/5 =
    %% Line 3250
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3251
	case call 'orddict':'find'
		 (_cor4, _cor1) of
	  %% Line 3252
	  <{'ok',{'bound',_X_Used,Ls}}> when 'true' ->
	      %% Line 3253
	      {[],[{_cor4,{'bound','used',Ls}}|[]],_cor0}
	  %% Line 3254
	  <'error'> when 'true' ->
	      %% Line 3255
	      case call 'orddict':'find'
		       (_cor4, _cor2) of
		%% Line 3256
		<{'ok',{'bound',_X_Used,Ls}}> when 'true' ->
		    %% Line 3257
		    {[{_cor4,{'bound','used',Ls}}|[]],[],_cor0}
		%% Line 3258
		<{'ok',{{'unsafe',In},_X_Used,Ls}}> when 'true' ->
		    let <_cor5> =
			%% Line 3260
			apply 'add_error'/3
			    (_cor3, {'unsafe_var',_cor4,In}, _cor0)
		    in  %% Line 3259
			{[{_cor4,{'bound','used',Ls}}|[]],[],_cor5}
		%% Line 3261
		<{'ok',{{'export',From},_X_Used,Ls}}> when 'true' ->
		    let <_cor6> =
			%% Line 3265
			apply 'exported_var'/4
			    (_cor3, _cor4, From, _cor0)
		    in  %% Line 3262
			{[{_cor4,{'bound','used',Ls}}|[]],[],_cor6}
		%% Line 3266
		<'error'> when 'true' ->
		    let <_cor7> =
			%% Line 3268
			apply 'add_error'/3
			    (_cor3, {'unbound_var',_cor4}, _cor0)
		    in  %% Line 3267
			{[{_cor4,{'bound','used',[_cor3|[]]}}|[]],[],_cor7}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'expr_var'/4 =
    %% Line 3280
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3281
	case call 'orddict':'find'
		 (_cor3, _cor1) of
	  %% Line 3282
	  <{'ok',{'bound',_X_Usage,Ls}}> when 'true' ->
	      %% Line 3283
	      {[{_cor3,{'bound','used',Ls}}|[]],_cor0}
	  %% Line 3284
	  <{'ok',{{'unsafe',In},_X_Usage,Ls}}> when 'true' ->
	      let <_cor4> =
		  %% Line 3286
		  apply 'add_error'/3
		      (_cor2, {'unsafe_var',_cor3,In}, _cor0)
	      in  %% Line 3285
		  {[{_cor3,{'bound','used',Ls}}|[]],_cor4}
	  %% Line 3287
	  <{'ok',{{'export',From},_X_Usage,Ls}}> when 'true' ->
	      let <_cor5> =
		  %% Line 3289
		  apply 'exported_var'/4
		      (_cor2, _cor3, From, _cor0)
	      in  %% Line 3288
		  {[{_cor3,{'bound','used',Ls}}|[]],_cor5}
	  %% Line 3290
	  <'error'> when 'true' ->
	      let <_cor6> =
		  %% Line 3292
		  apply 'add_error'/3
		      (_cor2, {'unbound_var',_cor3}, _cor0)
	      in  %% Line 3291
		  {[{_cor3,{'bound','used',[_cor2|[]]}}|[]],_cor6}
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'exported_var'/4 =
    %% Line 3295
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3296
	case apply 'is_warn_enabled'/2
		 ('export_vars', _cor0) of
	  %% Line 3297
	  <'true'> when 'true' ->
	      apply 'add_warning'/3
		  (_cor3, {'exported_var',_cor2,_cor1}, _cor0)
	  %% Line 3298
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'shadow_vars'/4 =
    %% Line 3301
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3302
	case apply 'is_warn_enabled'/2
		 ('shadow_vars', _cor0) of
	  %% Line 3303
	  <'true'> when 'true' ->
	      let <_cor10> =
		  %% Line 3304
		  ( fun (_cor7,_cor6) ->
			case <_cor7,_cor6> of
			  <{V,{_cor16,_cor17,[L|_cor18]}},St> when 'true' ->
			      %% Line 3305
			      apply 'add_warning'/3
				  (L, {'shadowed_var',V,_cor1}, St)
			  %% Line 3306
			  <_cor19,St> when 'true' ->
			      St
			end
		    -| [{'id',{0,0,'-shadow_vars/4-fun-0-'}}] )
	      in  let <_cor4> =
		      %% Line 3307
		      apply 'vt_no_unsafe'/1
			  (_cor2)
		  in  let <_cor5> =
			  %% Line 3307
			  apply 'vtold'/2
			      (_cor3, _cor4)
		      in  %% Line 3304
			  call 'lists':'foldl'
			      (_cor10, _cor0, _cor5)
	  %% Line 3308
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'check_unused_vars'/3 =
    %% Line 3311
    fun (_cor2,_cor1,_cor0) ->
	let <U> =
	    %% Line 3312
	    apply 'unused_vars'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 3313
	    apply 'warn_unused_vars'/3
		(U, _cor2, _cor0)
'check_old_unused_vars'/3 =
    %% Line 3315
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3316
	    apply 'vtold'/2
		(_cor2, _cor1)
	in  let <U> =
		%% Line 3316
		apply 'unused_vars'/3
		    (_cor3, [], _cor0)
	    in  %% Line 3317
		apply 'warn_unused_vars'/3
		    (U, _cor2, _cor0)
'unused_vars'/3 =
    %% Line 3319
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 3320
	    ( fun (_cor5,_cor4) ->
		  case <_cor5,_cor4> of
		    <V,{_X_State,'unused',_X_Ls}> when 'true' ->
			%% Line 3321
			case call 'erlang':'atom_to_list'
				 (V) of
			  %% Line 3322
			  <[95|_cor13]> when 'true' ->
			      'false'
			  %% Line 3323
			  <_cor14> when 'true' ->
			      'true'
			end
		    %% Line 3325
		    <_X_V,_X_How> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-unused_vars/3-fun-0-'}}] )
	in  let <U0> =
		%% Line 3320
		call 'orddict':'filter'
		    (_cor8, _cor2)
	    in  %% Line 3327
		apply 'vtnew'/2
		    (U0, _cor1)
'warn_unused_vars'/3 =
    %% Line 3329
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Vt,St0> when 'true' ->
	      %% Line 3330
	      {Vt,St0}
	  %% Line 3331
	  <U,Vt,St0> when 'true' ->
	      let <_cor14> =
		  %% Line 3332
		  case apply 'is_warn_enabled'/2
			   ('unused_vars', St0) of
		    %% Line 3333
		    <'false'> when 'true' ->
			St0
		    %% Line 3334
		    <'true'> when 'true' ->
			let <_cor12> =
			    %% Line 3335
			    ( fun (_cor9,_cor8) ->
				  case <_cor9,_cor8> of
				    <{V,{_cor24,'unused',Ls}},St> when 'true' ->
					let <_cor7> =
					    %% Line 3336
					    ( fun (_cor4,_cor3) ->
						  %% Line 3337
						  apply 'add_warning'/3
						      (_cor4, {'unused_var',V}, _cor3)
					      -| [{'id',{0,0,'-warn_unused_vars/3-fun-0-'}}] )
					in  %% Line 3336
					    call 'lists':'foldl'
						(_cor7, %% Line 3339
							St, %% Line 3339
							    Ls)
				    ( <_cor11,_cor10> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11,_cor10})
					    -| [{'function_name',{'-warn_unused_vars/3-fun-1-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-warn_unused_vars/3-fun-1-'}}] )
			in  %% Line 3335
			    call 'lists':'foldl'
				(_cor12, %% Line 3340
					 St0, %% Line 3340
					      U)
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor18> =
		      %% Line 3343
		      ( fun (_cor16) ->
			    case _cor16 of
			      <{V,{State,_cor25,Ls}}> when 'true' ->
				  {V,{State,'used',Ls}}
			      ( <_cor17> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor17})
				      -| [{'function_name',{'-warn_unused_vars/3-fun-2-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-warn_unused_vars/3-fun-2-'}}] )
		  in  let <UVt> =
			  %% Line 3343
			  call 'lists':'map'
			      (_cor18, U)
		      in  let <_cor20> =
			      %% Line 3344
			      apply 'vtmerge'/2
				  (Vt, UVt)
			  in  %% Line 3344
			      {_cor20,_cor14}
	end
'vtupdate'/2 =
    %% Line 3351
    fun (_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 3352
	    ( fun (_cor6,_cor5,_cor4) ->
		  case <_cor6,_cor5,_cor4> of
		    <_X_V,{S,U1,L1},{_X_S,U2,L2}> when 'true' ->
			let <_cor3> =
			    %% Line 3353
			    apply 'merge_used'/2
				(U1, U2)
			in  let <_cor2> =
				%% Line 3353
				apply 'merge_lines'/2
				    (L1, L2)
			    in  %% Line 3353
				{S,_cor3,_cor2}
		    ( <_cor9,_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor9,_cor8,_cor7})
			    -| [{'function_name',{'-vtupdate/2-fun-0-',3}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-vtupdate/2-fun-0-'}}] )
	in  %% Line 3352
	    call 'orddict':'merge'
		(_cor10, _cor1, _cor0)
'vtexport'/3 =
    %% Line 3360
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Vs,{InTag,FileLine},Vt0> when 'true' ->
	      %% Line 3361
	      case apply 'loc'/1
		       (FileLine) of
		<{_X_File,Line}> when 'true' ->
		    let <_cor8> =
			%% Line 3362
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[V|_cor5]> when 'true' ->
					    let <_cor7> =
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [{V,{{'export',{InTag,Line}},'unused',[]}}|_cor7]
						  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Vs)
			  -| ['list_comprehension'] )
		    in  %% Line 3362
			apply 'vtupdate'/2
			    (_cor8, Vt0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'vtexport',3}}] )
	    -| ['compiler_generated'] )
	end
'vtunsafe'/3 =
    %% Line 3364
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Vs,{InTag,FileLine},Vt0> when 'true' ->
	      %% Line 3365
	      case apply 'loc'/1
		       (FileLine) of
		<{_X_File,Line}> when 'true' ->
		    let <_cor8> =
			%% Line 3366
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[V|_cor5]> when 'true' ->
					    let <_cor7> =
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [{V,{{'unsafe',{InTag,Line}},'unused',[]}}|_cor7]
						  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Vs)
			  -| ['list_comprehension'] )
		    in  %% Line 3366
			apply 'vtupdate'/2
			    (_cor8, Vt0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'vtunsafe',3}}] )
	    -| ['compiler_generated'] )
	end
'vtmerge'/2 =
    %% Line 3372
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 3373
	    ( fun (_cor7,_cor6,_cor5) ->
		  case <_cor7,_cor6,_cor5> of
		    <_X_V,{S1,U1,L1},{S2,U2,L2}> when 'true' ->
			let <_cor4> =
			    %% Line 3374
			    apply 'merge_state'/2
				(S1, S2)
			in  let <_cor3> =
				%% Line 3375
				apply 'merge_used'/2
				    (U1, U2)
			    in  let <_cor2> =
				    %% Line 3376
				    apply 'merge_lines'/2
					(L1, L2)
				in  %% Line 3374
				    {_cor4,_cor3,_cor2}
		    ( <_cor10,_cor9,_cor8> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor10,_cor9,_cor8})
			    -| [{'function_name',{'-vtmerge/2-fun-0-',3}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-vtmerge/2-fun-0-'}}] )
	in  %% Line 3373
	    call 'orddict':'merge'
		(_cor11, _cor1, _cor0)
'vtmerge'/1 =
    %% Line 3379
    fun (_cor0) ->
	let <_cor5> =
	    ( fun (_cor2,_cor1) ->
		  apply 'vtmerge'/2
		      (_cor2, _cor1)
	      -| [{'id',{0,0,'-vtmerge/1-fun-0-'}}] )
	in  call 'lists':'foldl'
		(_cor5, [], _cor0)
'vtmerge_pat'/2 =
    %% Line 3381
    fun (_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 3382
	    ( fun (_cor6,_cor5,_cor4) ->
		  case <_cor6,_cor5,_cor4> of
		    <_X_V,{S1,_X_Usage1,L1},{S2,_X_Usage2,L2}> when 'true' ->
			let <_cor3> =
			    %% Line 3383
			    apply 'merge_state'/2
				(S1, S2)
			in  let <_cor2> =
				%% Line 3383
				apply 'merge_lines'/2
				    (L1, L2)
			    in  %% Line 3383
				{_cor3,'used',_cor2}
		    ( <_cor9,_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor9,_cor8,_cor7})
			    -| [{'function_name',{'-vtmerge_pat/2-fun-0-',3}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-vtmerge_pat/2-fun-0-'}}] )
	in  %% Line 3382
	    call 'orddict':'merge'
		(_cor10, _cor1, _cor0)
'merge_lines'/2 =
    %% Line 3386
    fun (_cor1,_cor0) ->
	%% Line 3387
	call 'ordsets':'union'
	    (_cor1, _cor0)
'merge_state'/2 =
    %% Line 3389
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1 = {'unsafe',_X_F1},_X_S2> when 'true' ->
	      S1
	  %% Line 3390
	  <_X_S1,S2 = {'unsafe',_X_F2}> when 'true' ->
	      S2
	  %% Line 3391
	  <'bound',S2> when 'true' ->
	      S2
	  %% Line 3392
	  <S1,'bound'> when 'true' ->
	      S1
	  %% Line 3393
	  <{'export',F1},{'export',_X_F2}> when 'true' ->
	      %% Line 3395
	      {'export',F1}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'merge_state',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_used'/2 =
    %% Line 3397
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'used',_X_Usage2> when 'true' ->
	      'used'
	  %% Line 3398
	  <_X_Usage1,'used'> when 'true' ->
	      'used'
	  %% Line 3399
	  <'unused','unused'> when 'true' ->
	      'unused'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'merge_used',2}}] )
	    -| ['compiler_generated'] )
	end
'vtnew'/2 =
    %% Line 3404
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 3405
	    ( fun (_cor4,_cor3) ->
		  let <_cor2> =
		      call 'orddict':'is_key'
			  (_cor4, _cor0)
		  in  call 'erlang':'not'
			  (_cor2)
	      -| [{'id',{0,0,'-vtnew/2-fun-0-'}}] )
	in  %% Line 3405
	    call 'orddict':'filter'
		(_cor7, _cor1)
'vtsubtract'/2 =
    %% Line 3410
    fun (_cor1,_cor0) ->
	%% Line 3411
	apply 'vtnew'/2
	    (_cor1, _cor0)
'vtold'/2 =
    %% Line 3416
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 3417
	    ( fun (_cor3,_cor2) ->
		  call 'orddict':'is_key'
		      (_cor3, _cor0)
	      -| [{'id',{0,0,'-vtold/2-fun-0-'}}] )
	in  %% Line 3417
	    call 'orddict':'filter'
		(_cor6, _cor1)
'vtnames'/1 =
    %% Line 3419
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[{V,_X_How}|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [V|_cor4]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'vt_no_unsafe'/1 =
    %% Line 3421
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[V = {_cor9,{S,_X_U,_X_L}}|_cor2]> when 'true' ->
			    let <_cor4> =
				%% Line 3422
				case S of
				  %% Line 3423
				  <{'unsafe',_cor10}> when 'true' ->
				      'false'
				  %% Line 3424
				  <_cor11> when 'true' ->
				      'true'
				end
			    in  %% Line 3422
				( case _cor4 of
				    <'true'> when 'true' ->
					let <_cor6> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [V|_cor6]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor2)
				      -| ['compiler_generated'] )
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'vt_no_unused'/1 =
    %% Line 3427
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[V = {_cor6,{_cor7,U,_X_L}}|_cor2]>
			    when call 'erlang':'=/='
				  (U,
				   'unused') ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [V|_cor4]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'vintersection'/1 =
    %% Line 3445
    fun (_cor0) ->
	case _cor0 of
	  <[Vs|[]]> when 'true' ->
	      %% Line 3446
	      apply 'vtnames'/1
		  (Vs)
	  %% Line 3447
	  <[Vs|Vss]> when 'true' ->
	      let <_cor2> =
		  %% Line 3448
		  apply 'vtnames'/1
		      (Vs)
	      in  let <_cor1> =
		      %% Line 3448
		      apply 'vintersection'/1
			  (Vss)
		  in  %% Line 3448
		      call 'ordsets':'intersection'
			  (_cor2, _cor1)
	  %% Line 3449
	  <[]> when 'true' ->
	      %% Line 3450
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'vintersection',1}}] )
	    -| ['compiler_generated'] )
	end
'copy_expr'/2 =
    %% Line 3455
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3456
	    ( fun (_cor2) ->
		  _cor0
	      -| [{'id',{0,0,'-copy_expr/2-fun-0-'}}] )
	in  %% Line 3456
	    apply 'modify_line'/2
		(_cor1, _cor4)
'modify_line'/2 =
    %% Line 3462
    fun (_cor1,_cor0) ->
	%% Line 3463
	apply 'modify_line1'/2
	    (_cor1, _cor0)
'modify_line1'/2 =
    %% Line 3466
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'function',F,A},_X_Mf> when 'true' ->
	      {'function',F,A}
	  %% Line 3467
	  <{'function',M,F,A},Mf> when 'true' ->
	      let <_cor4> =
		  %% Line 3468
		  apply 'modify_line1'/2
		      (M, Mf)
	      in  let <_cor3> =
		      %% Line 3468
		      apply 'modify_line1'/2
			  (F, Mf)
		  in  let <_cor2> =
			  %% Line 3468
			  apply 'modify_line1'/2
			      (A, Mf)
		      in  %% Line 3468
			  {'function',_cor4,_cor3,_cor2}
	  %% Line 3469
	  <{'attribute',L,'record',{Name,Fields}},Mf> when 'true' ->
	      let <_cor6> =
		  %% Line 3470
		  apply Mf
		      (L)
	      in  let <_cor5> =
		      %% Line 3470
		      apply 'modify_line1'/2
			  (Fields, Mf)
		  in  %% Line 3470
		      {'attribute',_cor6,'record',{Name,_cor5}}
	  %% Line 3471
	  <{'attribute',L,'spec',{Fun,Types}},Mf> when 'true' ->
	      let <_cor8> =
		  %% Line 3472
		  apply Mf
		      (L)
	      in  let <_cor7> =
		      %% Line 3472
		      apply 'modify_line1'/2
			  (Types, Mf)
		  in  %% Line 3472
		      {'attribute',_cor8,'spec',{Fun,_cor7}}
	  %% Line 3473
	  <{'attribute',L,'callback',{Fun,Types}},Mf> when 'true' ->
	      let <_cor10> =
		  %% Line 3474
		  apply Mf
		      (L)
	      in  let <_cor9> =
		      %% Line 3474
		      apply 'modify_line1'/2
			  (Types, Mf)
		  in  %% Line 3474
		      {'attribute',_cor10,'callback',{Fun,_cor9}}
	  %% Line 3475
	  <{'attribute',L,'type',{TypeName,TypeDef,Args}},Mf> when 'true' ->
	      let <_cor13> =
		  %% Line 3476
		  apply Mf
		      (L)
	      in  let <_cor12> =
		      %% Line 3476
		      apply 'modify_line1'/2
			  (TypeDef, Mf)
		  in  let <_cor11> =
			  %% Line 3477
			  apply 'modify_line1'/2
			      (Args, Mf)
		      in  %% Line 3476
			  {'attribute',_cor13,'type',{TypeName,_cor12,_cor11}}
	  %% Line 3478
	  <{'attribute',L,'opaque',{TypeName,TypeDef,Args}},Mf> when 'true' ->
	      let <_cor16> =
		  %% Line 3479
		  apply Mf
		      (L)
	      in  let <_cor15> =
		      %% Line 3479
		      apply 'modify_line1'/2
			  (TypeDef, Mf)
		  in  let <_cor14> =
			  %% Line 3480
			  apply 'modify_line1'/2
			      (Args, Mf)
		      in  %% Line 3479
			  {'attribute',_cor16,'opaque',{TypeName,_cor15,_cor14}}
	  %% Line 3481
	  <{'attribute',L,Attr,Val},Mf> when 'true' ->
	      let <_cor17> =
		  apply Mf
		      (L)
	      in  {'attribute',_cor17,Attr,Val}
	  %% Line 3482
	  <{'warning',W},_X_Mf> when 'true' ->
	      {'warning',W}
	  %% Line 3483
	  <{'error',W},_X_Mf> when 'true' ->
	      {'error',W}
	  %% Line 3485
	  <{'clauses',Cs},Mf> when 'true' ->
	      let <_cor18> =
		  apply 'modify_line1'/2
		      (Cs, Mf)
	      in  {'clauses',_cor18}
	  %% Line 3486
	  <{'typed_record_field',Field,Type},Mf> when 'true' ->
	      let <_cor20> =
		  %% Line 3487
		  apply 'modify_line1'/2
		      (Field, Mf)
	      in  let <_cor19> =
		      %% Line 3487
		      apply 'modify_line1'/2
			  (Type, Mf)
		  in  %% Line 3487
		      {'typed_record_field',_cor20,_cor19}
	  %% Line 3488
	  <{Tag,L},Mf> when 'true' ->
	      let <_cor21> =
		  apply Mf
		      (L)
	      in  {Tag,_cor21}
	  %% Line 3489
	  <{Tag,L,E1},Mf> when 'true' ->
	      let <_cor23> =
		  %% Line 3490
		  apply Mf
		      (L)
	      in  let <_cor22> =
		      %% Line 3490
		      apply 'modify_line1'/2
			  (E1, Mf)
		  in  %% Line 3490
		      {Tag,_cor23,_cor22}
	  %% Line 3491
	  <{Tag,L,E1,E2},Mf> when 'true' ->
	      let <_cor26> =
		  %% Line 3492
		  apply Mf
		      (L)
	      in  let <_cor25> =
		      %% Line 3492
		      apply 'modify_line1'/2
			  (E1, Mf)
		  in  let <_cor24> =
			  %% Line 3492
			  apply 'modify_line1'/2
			      (E2, Mf)
		      in  %% Line 3492
			  {Tag,_cor26,_cor25,_cor24}
	  %% Line 3493
	  <{'bin_element',L,E1,E2,TSL},Mf> when 'true' ->
	      let <_cor29> =
		  %% Line 3494
		  apply Mf
		      (L)
	      in  let <_cor28> =
		      %% Line 3494
		      apply 'modify_line1'/2
			  (E1, Mf)
		  in  let <_cor27> =
			  %% Line 3494
			  apply 'modify_line1'/2
			      (E2, Mf)
		      in  %% Line 3494
			  {'bin_element',_cor29,_cor28,_cor27,TSL}
	  %% Line 3495
	  <{Tag,L,E1,E2,E3},Mf> when 'true' ->
	      let <_cor33> =
		  %% Line 3496
		  apply Mf
		      (L)
	      in  let <_cor32> =
		      %% Line 3496
		      apply 'modify_line1'/2
			  (E1, Mf)
		  in  let <_cor31> =
			  %% Line 3496
			  apply 'modify_line1'/2
			      (E2, Mf)
		      in  let <_cor30> =
			      %% Line 3496
			      apply 'modify_line1'/2
				  (E3, Mf)
			  in  %% Line 3496
			      {Tag,_cor33,_cor32,_cor31,_cor30}
	  %% Line 3497
	  <{Tag,L,E1,E2,E3,E4},Mf> when 'true' ->
	      let <_cor38> =
		  %% Line 3498
		  apply Mf
		      (L)
	      in  let <_cor37> =
		      %% Line 3499
		      apply 'modify_line1'/2
			  (E1, Mf)
		  in  let <_cor36> =
			  %% Line 3500
			  apply 'modify_line1'/2
			      (E2, Mf)
		      in  let <_cor35> =
			      %% Line 3501
			      apply 'modify_line1'/2
				  (E3, Mf)
			  in  let <_cor34> =
				  %% Line 3502
				  apply 'modify_line1'/2
				      (E4, Mf)
			      in  %% Line 3498
				  {Tag,_cor38,_cor37,_cor36,_cor35,_cor34}
	  %% Line 3503
	  <[H|T],Mf> when 'true' ->
	      let <_cor39> =
		  %% Line 3504
		  apply 'modify_line1'/2
		      (H, Mf)
	      in  let <_cor40> =
		      %% Line 3504
		      apply 'modify_line1'/2
			  (T, Mf)
		  in  %% Line 3504
		      [_cor39|_cor40]
	  %% Line 3505
	  <[],_X_Mf> when 'true' ->
	      []
	  %% Line 3506
	  <E,_X_Mf>
	      when try
		    let <_cor41> =
			call 'erlang':'is_tuple'
			    (E)
		    in  let <_cor42> =
			    call 'erlang':'not'
				(_cor41)
			in  let <_cor43> =
				call 'erlang':'is_list'
				    (E)
			    in  let <_cor44> =
				    call 'erlang':'not'
					(_cor43)
				in  call 'erlang':'and'
					(_cor42, _cor44)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      E
	  ( <_cor46,_cor45> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor46,_cor45})
		  -| [{'function_name',{'modify_line1',2}}] )
	    -| ['compiler_generated'] )
	end
'check_record_info_call'/4 =
    %% Line 3511
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Line,La,[{'atom',Li,Info}|[{'atom',_X_Ln,Name}|[]]],St> when 'true' ->
	      %% Line 3512
	      case call 'lists':'member'
		       (Info, ['fields'|['size']]) of
		%% Line 3513
		<'true'> when 'true' ->
		    apply 'exist_record'/3
			(La, Name, St)
		%% Line 3514
		<'false'> when 'true' ->
		    apply 'add_error'/3
			(Li, 'illegal_record_info', St)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3516
	  <Line,_X_La,_X_As,St> when 'true' ->
	      %% Line 3517
	      apply 'add_error'/3
		  (Line, 'illegal_record_info', St)
	end
'has_wildcard_field'/1 =
    %% Line 3519
    fun (_cor0) ->
	case _cor0 of
	  <[{'record_field',_X_Lf,{'var',_X_La,'_'},_X_Val}|_X_Fs]> when 'true' ->
	      'true'
	  %% Line 3520
	  <[_cor2|Fs]> when 'true' ->
	      apply 'has_wildcard_field'/1
		  (Fs)
	  %% Line 3521
	  <[]> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'has_wildcard_field',1}}] )
	    -| ['compiler_generated'] )
	end
'check_remote_function'/5 =
    %% Line 3526
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <St1> =
	    %% Line 3527
	    apply 'deprecated_function'/5
		(_cor4, _cor3, _cor2, _cor1, _cor0)
	in  let <St2> =
		%% Line 3528
		apply 'check_qlc_hrl'/5
		    (_cor4, _cor3, _cor2, _cor1, St1)
	    in  %% Line 3529
		apply 'format_function'/5
		    (_cor4, _cor3, _cor2, _cor1, St2)
'check_qlc_hrl'/5 =
    %% Line 3535
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Arity> =
	    %% Line 3536
	    call 'erlang':'length'
		(_cor1)
	in  %% Line 3537
	    case _cor1 of
	      %% Line 3538
	      <[{'lc',_X_L,_X_E,_X_Qs}|_cor29]>
		  when try
			let <_cor6> =
			    call 'erlang':'=:='
				(_cor3, 'qlc')
			in  let <_cor7> =
				call 'erlang':'=:='
				    (_cor2, 'q')
			    in  let <_cor8> =
				    %% Line 3539
				    call 'erlang':'<'
					(Arity, 3)
				in  %% Line 3539
				    ( case <> of
					( <>
					      when ( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'is_record'
										       -| ['compiler_generated'] )
						      (_cor0,
						       ( 'lint'
							 -| ['compiler_generated'] ),
						       ( 30
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] ) ->
					      let <_cor13> =
						  ( call 'erlang':'element'
							(23, _cor0)
						    -| ['compiler_generated'] )
					      in  let <_cor14> =
						      ( call 'erlang':'=:='
							    (_cor13, 'true')
							-| ['compiler_generated'] )
						  in  let <_cor16> =
							  ( call 'erlang':'not'
								(_cor14)
							    -| ['compiler_generated'] )
						      in  let <_cor17> =
							      ( call 'erlang':'and'
								    (_cor8, _cor16)
								-| ['compiler_generated'] )
							  in  let <_cor18> =
								  ( call 'erlang':'and'
									(_cor7, _cor17)
								    -| ['compiler_generated'] )
							      in  let <_cor19> =
								      ( call 'erlang':'and'
									    (_cor6, _cor18)
									-| ['compiler_generated'] )
								  in  let <_cor20> =
									  ( call 'erlang':'is_boolean'
										(_cor13)
									    -| ['compiler_generated'] )
								      in  ( call 'erlang':'and'
										(_cor19, _cor20)
									    -| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 3540
		  apply 'add_warning'/3
		      (_cor4, {'missing_qlc_hrl',Arity}, _cor0)
	      %% Line 3541
	      <_cor30> when 'true' ->
		  _cor0
	    end
'deprecated_function'/5 =
    %% Line 3548
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Arity> =
	    %% Line 3549
	    call 'erlang':'length'
		(_cor1)
	in  let <MFA> = {_cor3,_cor2,%% Line 3550
			     Arity}
	    in  %% Line 3551
		case call 'otp_internal':'obsolete'
			 (_cor3, _cor2, Arity) of
		  %% Line 3552
		  <{'deprecated',String}>
		      when call 'erlang':'is_list'
			    (String) ->
		      let <_cor8> =
			  %% Line 3553
			  apply 'is_warn_enabled'/2
			      ('deprecated_function', _cor0)
		      in  let <_cor12> =
			      %% Line 3553
			      ( case _cor8 of
				  ( <'false'> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <'true'> when 'true' ->
					%% Line 3554
					( case _cor0 of
					    ( <( {'lint',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_rec148,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'ordsets':'is_element'
						      (MFA, _rec148)
					      -| ['compiler_generated'] )
					    ( <_cor55> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','lint'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor_variable> when 'true' ->
					call 'erlang':'error'
					    ('badarg')
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 3553
			      case _cor12 of
				%% Line 3555
				<'true'> when 'true' ->
				    _cor0
				%% Line 3557
				<'false'> when 'true' ->
				    %% Line 3558
				    apply 'add_warning'/3
					(_cor4, {'deprecated',MFA,String}, _cor0)
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
		  %% Line 3560
		  <{'deprecated',Replacement,Rel}> when 'true' ->
		      let <_cor15> =
			  %% Line 3561
			  apply 'is_warn_enabled'/2
			      ('deprecated_function', _cor0)
		      in  let <_cor19> =
			      %% Line 3561
			      ( case _cor15 of
				  ( <'false'> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <'true'> when 'true' ->
					%% Line 3562
					( case _cor0 of
					    ( <( {'lint',_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_rec149,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83}
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'ordsets':'is_element'
						      (MFA, _rec149)
					      -| ['compiler_generated'] )
					    ( <_cor84> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','lint'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor_variable> when 'true' ->
					call 'erlang':'error'
					    ('badarg')
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 3561
			      case _cor19 of
				%% Line 3563
				<'true'> when 'true' ->
				    _cor0
				%% Line 3565
				<'false'> when 'true' ->
				    %% Line 3566
				    apply 'add_warning'/3
					(_cor4, {'deprecated',MFA,Replacement,Rel}, _cor0)
				( <_cor20> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor20})
				  -| ['compiler_generated'] )
			      end
		  %% Line 3568
		  <{'removed',String}>
		      when call 'erlang':'is_list'
			    (String) ->
		      %% Line 3569
		      apply 'add_warning'/3
			  (_cor4, {'removed',MFA,String}, _cor0)
		  %% Line 3570
		  <{'removed',Replacement,Rel}> when 'true' ->
		      %% Line 3571
		      apply 'add_warning'/3
			  (_cor4, {'removed',MFA,Replacement,Rel}, _cor0)
		  %% Line 3572
		  <'no'> when 'true' ->
		      _cor0
		  ( <_cor21> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor21})
		    -| ['compiler_generated'] )
		end
'obsolete_guard'/2 =
    %% Line 3576
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'call',Line,{'atom',Lr,F},As},St0> when 'true' ->
	      let <Arity> =
		  %% Line 3577
		  call 'erlang':'length'
		      (As)
	      in  %% Line 3578
		  case call 'erl_internal':'old_type_test'
			   (F, Arity) of
		    %% Line 3579
		    <'false'> when 'true' ->
			%% Line 3580
			apply 'deprecated_function'/5
			    (Line, 'erlang', F, As, St0)
		    %% Line 3581
		    <'true'> when 'true' ->
			%% Line 3582
			case apply 'is_warn_enabled'/2
				 ('obsolete_guard', St0) of
			  %% Line 3583
			  <'true'> when 'true' ->
			      %% Line 3584
			      apply 'add_warning'/3
				  (Lr, {'obsolete_guard',{F,Arity}}, St0)
			  %% Line 3585
			  <'false'> when 'true' ->
			      %% Line 3586
			      St0
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3589
	  <_X_G,St> when 'true' ->
	      %% Line 3590
	      St
	end
'keyword_warning'/3 =
    %% Line 3595
    fun (_cor2,_cor1,_cor0) ->
	_cor0
'format_function'/5 =
    %% Line 3600
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3601
	case apply 'is_format_function'/2
		 (_cor3, _cor2) of
	  %% Line 3602
	  <'true'> when 'true' ->
	      %% Line 3603
	      ( case _cor0 of
		  ( <( {'lint',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec150,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec150 of
			  %% Line 3604
			  <Lev>
			      when call 'erlang':'>'
				    (_rec150,
				     0) ->
			      %% Line 3605
			      case apply 'check_format_1'/1
				       (_cor1) of
				%% Line 3606
				<{'warn',Level,Fmt,Fas}>
				    when call 'erlang':'=<'
					  (Level,
					   Lev) ->
				    %% Line 3607
				    apply 'add_warning'/3
					(_cor4, {'format_error',{Fmt,Fas}}, _cor0)
				%% Line 3608
				<_cor44> when 'true' ->
				    _cor0
			      end
			  %% Line 3610
			  <_X_Lev> when 'true' ->
			      _cor0
			end
		    -| ['compiler_generated'] )
		  ( <_cor43> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3612
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'is_format_function'/2 =
    %% Line 3615
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'io','fwrite'> when 'true' ->
	      'true'
	  %% Line 3616
	  <'io','format'> when 'true' ->
	      'true'
	  %% Line 3617
	  <'io_lib','fwrite'> when 'true' ->
	      'true'
	  %% Line 3618
	  <'io_lib','format'> when 'true' ->
	      'true'
	  %% Line 3619
	  <M,F>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      'false'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'is_format_function',2}}] )
	    -| ['compiler_generated'] )
	end
'check_format_1'/1 =
    %% Line 3623
    fun (_cor0) ->
	case _cor0 of
	  <[Fmt|[]]> when 'true' ->
	      %% Line 3624
	      apply 'check_format_1'/1
		  ([Fmt|[{'nil',0}]])
	  %% Line 3625
	  <[Fmt|[As|[]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 3626
		  apply 'canonicalize_string'/1
		      (As)
	      in  %% Line 3626
		  apply 'check_format_2'/2
		      (Fmt, _cor1)
	  %% Line 3627
	  <[_X_Dev|[Fmt|[As|[]]]]> when 'true' ->
	      %% Line 3628
	      apply 'check_format_1'/1
		  ([Fmt|[As|[]]])
	  %% Line 3629
	  <_X_As> when 'true' ->
	      %% Line 3630
	      {'warn',1,[102|[111|[114|[109|[97|[116|[32|[99|[97|[108|[108|[32|[119|[105|[116|[104|[32|[119|[114|[111|[110|[103|[32|[110|[117|[109|[98|[101|[114|[32|[111|[102|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	end
'canonicalize_string'/1 =
    %% Line 3632
    fun (_cor0) ->
	case _cor0 of
	  <{'string',Line,Cs}> when 'true' ->
	      let <_cor5> =
		  %% Line 3633
		  ( fun (_cor2,_cor1) ->
			{'cons',Line,{'integer',Line,_cor2},_cor1}
		    -| [{'id',{0,0,'-canonicalize_string/1-fun-0-'}}] )
	      in  %% Line 3633
		  call 'lists':'foldr'
		      (_cor5, {'nil',Line}, Cs)
	  %% Line 3634
	  <Term> when 'true' ->
	      %% Line 3635
	      Term
	end
'check_format_2'/2 =
    %% Line 3639
    fun (_cor1,_cor0) ->
	%% Line 3640
	case _cor1 of
	  %% Line 3641
	  <{'string',_X_L,S}> when 'true' ->
	      apply 'check_format_2a'/2
		  (S, _cor0)
	  %% Line 3642
	  <{'atom',_X_L,A}> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'atom_to_list'
		      (A)
	      in  apply 'check_format_2a'/2
		      (_cor2, _cor0)
	  %% Line 3643
	  <_cor6> when 'true' ->
	      {'warn',2,[102|[111|[114|[109|[97|[116|[32|[115|[116|[114|[105|[110|[103|[32|[110|[111|[116|[32|[97|[32|[116|[101|[120|[116|[117|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	end
'check_format_2a'/2 =
    %% Line 3646
    fun (_cor1,_cor0) ->
	%% Line 3647
	case apply 'args_list'/1
		 (_cor0) of
	  %% Line 3648
	  <'true'> when 'true' ->
	      apply 'check_format_3'/2
		  (_cor1, _cor0)
	  %% Line 3649
	  <'false'> when 'true' ->
	      {'warn',1,[102|[111|[114|[109|[97|[116|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[115|[116]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	  %% Line 3650
	  <'maybe'> when 'true' ->
	      {'warn',2,[102|[111|[114|[109|[97|[116|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[112|[101|[114|[104|[97|[112|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[115|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'check_format_3'/2 =
    %% Line 3655
    fun (_cor1,_cor0) ->
	%% Line 3656
	case apply 'check_format_string'/1
		 (_cor1) of
	  %% Line 3657
	  <{'ok',Need}> when 'true' ->
	      %% Line 3658
	      case apply 'args_length'/1
		       (_cor0) of
		%% Line 3659
		<Len>
		    when try
			  let <_cor2> =
			      call 'erlang':'length'
				  (Need)
			  in  call 'erlang':'=:='
				  (_cor2, Len)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    'ok'
		%% Line 3660
		<_X_Len> when 'true' ->
		    {'warn',1,[119|[114|[111|[110|[103|[32|[110|[117|[109|[98|[101|[114|[32|[111|[102|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[105|[110|[32|[102|[111|[114|[109|[97|[116|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
	      end
	  %% Line 3662
	  <{'error',S}> when 'true' ->
	      %% Line 3663
	      {'warn',1,[102|[111|[114|[109|[97|[116|[32|[115|[116|[114|[105|[110|[103|[32|[105|[110|[118|[97|[108|[105|[100|[32|[40|[126|[116|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]],[S|[]]}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'args_list'/1 =
    %% Line 3666
    fun (_cor0) ->
	case _cor0 of
	  <{'cons',_X_L,_X_H,T}> when 'true' ->
	      apply 'args_list'/1
		  (T)
	  %% Line 3669
	  <{'string',_X_L,_X_Cs}> when 'true' ->
	      'maybe'
	  %% Line 3670
	  <{'nil',_X_L}> when 'true' ->
	      'true'
	  %% Line 3671
	  <{'atom',_cor2,_cor3}> when 'true' ->
	      'false'
	  %% Line 3672
	  <{'integer',_cor4,_cor5}> when 'true' ->
	      'false'
	  %% Line 3673
	  <{'float',_cor6,_cor7}> when 'true' ->
	      'false'
	  %% Line 3674
	  <_X_Other> when 'true' ->
	      'maybe'
	end
'args_length'/1 =
    %% Line 3676
    fun (_cor0) ->
	case _cor0 of
	  <{'cons',_X_L,_X_H,T}> when 'true' ->
	      let <_cor1> =
		  apply 'args_length'/1
		      (T)
	      in  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 3677
	  <{'nil',_X_L}> when 'true' ->
	      0
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'args_length',1}}] )
	    -| ['compiler_generated'] )
	end
'check_format_string'/1 =
    %% Line 3679
    fun (_cor0) ->
	%% Line 3680
	apply 'extract_sequences'/2
	    (_cor0, [])
'extract_sequences'/2 =
    %% Line 3682
    fun (_cor1,_cor0) ->
	%% Line 3683
	case call 'string':'chr'
		 (_cor1, 126) of
	  %% Line 3684
	  <0> when 'true' ->
	      let <_cor2> =
		  call 'lists':'reverse'
		      (_cor0)
	      in  {'ok',_cor2}
	  %% Line 3685
	  <Pos> when 'true' ->
	      let <_cor3> =
		  %% Line 3686
		  call 'erlang':'+'
		      (Pos, 1)
	      in  let <Fmt1> =
		      %% Line 3686
		      call 'string':'substr'
			  (_cor1, _cor3)
		  in  %% Line 3687
		      case apply 'extract_sequence'/3
			       (1, Fmt1, _cor0) of
			%% Line 3688
			<{'ok',Need1,Rest}> when 'true' ->
			    apply 'extract_sequences'/2
				(Rest, Need1)
			%% Line 3689
			<Error> when 'true' ->
			    Error
		      end
	end
'extract_sequence'/3 =
    %% Line 3693
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <1,[45|[C|Fmt]],Need>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 3694
	      apply 'extract_sequence_digits'/3
		  (1, Fmt, Need)
	  %% Line 3695
	  <1,[C|Fmt],Need>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 3696
	      apply 'extract_sequence_digits'/3
		  (1, Fmt, Need)
	  %% Line 3697
	  <1,[45|[42|Fmt]],Need> when 'true' ->
	      %% Line 3698
	      apply 'extract_sequence'/3
		  (2, Fmt, ['int'|Need])
	  %% Line 3699
	  <1,[42|Fmt],Need> when 'true' ->
	      %% Line 3700
	      apply 'extract_sequence'/3
		  (2, Fmt, ['int'|Need])
	  %% Line 3701
	  <1,Fmt,Need> when 'true' ->
	      %% Line 3702
	      apply 'extract_sequence'/3
		  (2, Fmt, Need)
	  %% Line 3703
	  <2,[46|[C|Fmt]],Need>
	      when let <_cor7> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 3704
	      apply 'extract_sequence_digits'/3
		  (2, Fmt, Need)
	  %% Line 3705
	  <2,[46|[42|Fmt]],Need> when 'true' ->
	      %% Line 3706
	      apply 'extract_sequence'/3
		  (3, Fmt, ['int'|Need])
	  %% Line 3707
	  <2,[46|Fmt],Need> when 'true' ->
	      %% Line 3708
	      apply 'extract_sequence'/3
		  (3, Fmt, Need)
	  %% Line 3709
	  <2,Fmt,Need> when 'true' ->
	      %% Line 3710
	      apply 'extract_sequence'/3
		  (4, Fmt, Need)
	  %% Line 3711
	  <3,[46|[42|Fmt]],Need> when 'true' ->
	      %% Line 3712
	      apply 'extract_sequence'/3
		  (4, Fmt, ['int'|Need])
	  %% Line 3713
	  <3,[46|[_cor16|Fmt]],Need> when 'true' ->
	      %% Line 3714
	      apply 'extract_sequence'/3
		  (4, Fmt, Need)
	  %% Line 3715
	  <3,Fmt,Need> when 'true' ->
	      %% Line 3716
	      apply 'extract_sequence'/3
		  (4, Fmt, Need)
	  %% Line 3717
	  <4,[116|[99|Fmt]],Need> when 'true' ->
	      %% Line 3718
	      apply 'extract_sequence'/3
		  (5, [99|Fmt], Need)
	  %% Line 3719
	  <4,[116|[115|Fmt]],Need> when 'true' ->
	      %% Line 3720
	      apply 'extract_sequence'/3
		  (5, [115|Fmt], Need)
	  %% Line 3721
	  <4,[116|[112|Fmt]],Need> when 'true' ->
	      %% Line 3722
	      apply 'extract_sequence'/3
		  (5, [112|Fmt], Need)
	  %% Line 3723
	  <4,[116|[80|Fmt]],Need> when 'true' ->
	      %% Line 3724
	      apply 'extract_sequence'/3
		  (5, [80|Fmt], Need)
	  %% Line 3725
	  <4,[116|[C|_X_Fmt]],_X_Need> when 'true' ->
	      let <_cor9> =
		  %% Line 3726
		  call 'erlang':'++'
		      ([105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126|[116]]]]]]]]]]]]]]]]]], [C|[]])
	      in  %% Line 3726
		  {'error',_cor9}
	  %% Line 3727
	  <4,[108|[112|Fmt]],Need> when 'true' ->
	      %% Line 3728
	      apply 'extract_sequence'/3
		  (5, [112|Fmt], Need)
	  %% Line 3729
	  <4,[108|[80|Fmt]],Need> when 'true' ->
	      %% Line 3730
	      apply 'extract_sequence'/3
		  (5, [80|Fmt], Need)
	  %% Line 3731
	  <4,[108|[C|_X_Fmt]],_X_Need> when 'true' ->
	      let <_cor10> =
		  %% Line 3732
		  call 'erlang':'++'
		      ([105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126|[108]]]]]]]]]]]]]]]]]], [C|[]])
	      in  %% Line 3732
		  {'error',_cor10}
	  %% Line 3733
	  <4,Fmt,Need> when 'true' ->
	      %% Line 3734
	      apply 'extract_sequence'/3
		  (5, Fmt, Need)
	  %% Line 3735
	  <5,[C|Fmt],Need0> when 'true' ->
	      %% Line 3736
	      case apply 'control_type'/2
		       (C, Need0) of
		%% Line 3737
		<'error'> when 'true' ->
		    let <_cor11> =
			call 'erlang':'++'
			    ([105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126]]]]]]]]]]]]]]]]], [C|[]])
		    in  {'error',_cor11}
		%% Line 3738
		<Need1> when 'true' ->
		    {'ok',Need1,Fmt}
	      end
	  %% Line 3740
	  <_cor17,[],_X_Need> when 'true' ->
	      {'error',[116|[114|[117|[110|[99|[97|[116|[101|[100]]]]]]]]]}
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'extract_sequence',3}}] )
	    -| ['compiler_generated'] )
	end
'extract_sequence_digits'/3 =
    %% Line 3742
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fld,[C|Fmt],Need>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 3743
	      apply 'extract_sequence_digits'/3
		  (Fld, Fmt, Need)
	  %% Line 3744
	  <Fld,Fmt,Need> when 'true' ->
	      let <_cor5> =
		  %% Line 3745
		  call 'erlang':'+'
		      (Fld, 1)
	      in  %% Line 3745
		  apply 'extract_sequence'/3
		      (_cor5, Fmt, Need)
	end
'control_type'/2 =
    %% Line 3747
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <126,Need> when 'true' ->
	      Need
	  %% Line 3748
	  <99,Need> when 'true' ->
	      ['int'|Need]
	  %% Line 3749
	  <102,Need> when 'true' ->
	      ['float'|Need]
	  %% Line 3750
	  <101,Need> when 'true' ->
	      ['float'|Need]
	  %% Line 3751
	  <103,Need> when 'true' ->
	      ['float'|Need]
	  %% Line 3752
	  <115,Need> when 'true' ->
	      ['string'|Need]
	  %% Line 3753
	  <119,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 3754
	  <112,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 3755
	  <87,Need> when 'true' ->
	      ['int'|['term'|Need]]
	  %% Line 3756
	  <80,Need> when 'true' ->
	      ['int'|['term'|Need]]
	  %% Line 3757
	  <98,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 3758
	  <66,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 3759
	  <120,Need> when 'true' ->
	      ['string'|['term'|Need]]
	  %% Line 3760
	  <88,Need> when 'true' ->
	      ['string'|['term'|Need]]
	  %% Line 3761
	  <43,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 3762
	  <35,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 3763
	  <110,Need> when 'true' ->
	      Need
	  %% Line 3764
	  <105,Need> when 'true' ->
	      ['term'|Need]
	  %% Line 3765
	  <_X_C,_X_Need> when 'true' ->
	      'error'
	end
'local_functions'/1 =
    %% Line 3769
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 3770
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{'function',_cor7,Func,Arity,_cor8}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{Func,Arity}|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 3770
	    call 'gb_sets':'from_list'
		(_cor5)
'is_local_function'/2 =
    %% Line 3772
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <LocalSet,{Func,Arity}> when 'true' ->
	      %% Line 3773
	      call 'gb_sets':'is_element'
		  ({Func,Arity}, LocalSet)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_local_function',2}}] )
	    -| ['compiler_generated'] )
	end
'is_imported_function'/2 =
    %% Line 3775
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ImportSet,{Func,Arity}> when 'true' ->
	      %% Line 3776
	      case call 'orddict':'find'
		       ({Func,Arity}, ImportSet) of
		%% Line 3777
		<{'ok',_X_Mod}> when 'true' ->
		    'true'
		%% Line 3778
		<'error'> when 'true' ->
		    'false'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'is_imported_function',2}}] )
	    -| ['compiler_generated'] )
	end
'is_imported_from_erlang'/2 =
    %% Line 3781
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ImportSet,{Func,Arity}> when 'true' ->
	      %% Line 3782
	      case call 'orddict':'find'
		       ({Func,Arity}, ImportSet) of
		%% Line 3783
		<{'ok','erlang'}> when 'true' ->
		    'true'
		%% Line 3784
		<_cor5> when 'true' ->
		    'false'
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'is_imported_from_erlang',2}}] )
	    -| ['compiler_generated'] )
	end
'auto_import_suppressed'/1 =
    %% Line 3787
    fun (_cor0) ->
	%% Line 3788
	case call 'lists':'member'
		 ('no_auto_import', _cor0) of
	  %% Line 3789
	  <'true'> when 'true' ->
	      %% Line 3790
	      'all'
	  %% Line 3791
	  <'false'> when 'true' ->
	      let <_cor5> =
		  %% Line 3792
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[{'no_auto_import',X}|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [X|_cor4]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      in  let <_cor14> =
		      %% Line 3793
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor12) ->
				    case _cor12 of
				      <[{Y,Z}|_cor8]>
					  when let <_cor9> =
						call 'erlang':'is_atom'
						    (Y)
					    in  let <_cor10> =
						    call 'erlang':'is_integer'
							(Z)
						in  call 'erlang':'and'
							(_cor9, _cor10) ->
					  let <_cor13> =
					      apply 'lc$^1'/1
						  (_cor8)
					  in  ( [{Y,Z}|_cor13]
						-| ['compiler_generated'] )
				      ( <[_cor7|_cor8]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor8)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor12> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor12})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor11> =
				call 'lists':'flatten'
				    (_cor5)
			    in  apply 'lc$^1'/1
				    (_cor11)
			-| ['list_comprehension'] )
		  in  %% Line 3794
		      call 'gb_sets':'from_list'
			  (_cor14)
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'is_autoimport_suppressed'/2 =
    %% Line 3797
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'all',{_X_Func,_X_Arity}> when 'true' ->
	      %% Line 3798
	      'true'
	  %% Line 3799
	  <NoAutoSet,{Func,Arity}> when 'true' ->
	      %% Line 3800
	      call 'gb_sets':'is_element'
		  ({Func,Arity}, NoAutoSet)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_autoimport_suppressed',2}}] )
	    -| ['compiler_generated'] )
	end
'bif_clash_specifically_disabled'/2 =
    %% Line 3802
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <St,{F,A}> when 'true' ->
	      %% Line 3803
	      ( case St of
		  ( <( {'lint',_cor7,_cor8,_cor9,_cor10,_cor11,_rec151,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Nowarn> =
			    apply 'nowarn_function'/2
				('nowarn_bif_clash', _rec151)
			in  %% Line 3804
			    call 'lists':'member'
				({F,A}, Nowarn)
		    -| ['compiler_generated'] )
		  ( <_cor35> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'bif_clash_specifically_disabled',2}}] )
	    -| ['compiler_generated'] )
	end
'no_guard_bif_clash'/2 =
    %% Line 3812
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <St,{F,A}> when 'true' ->
	      %% Line 3814
	      ( case St of
		  ( <( {'lint',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_rec152,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 3815
			( case apply 'is_local_function'/2
				   (_rec152, {F,A}) of
			    ( <'false'> when 'true' ->
				  let <_cor10> =
				      %% Line 3817
				      apply 'is_imported_function'/2
					  (_cor30, {F,A})
				  in  let <_cor14> =
					  %% Line 3817
					  ( case _cor10 of
					      ( <'false'> when 'true' ->
						    'true'
						-| ['compiler_generated'] )
					      ( <'true'> when 'true' ->
						    %% Line 3818
						    apply 'is_imported_from_erlang'/2
							(_cor30, {F,A})
						-| ['compiler_generated'] )
					      ( <_cor_variable> when 'true' ->
						    call 'erlang':'error'
							('badarg')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  %% Line 3820
					  ( case _cor14 of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    %% Line 3822
						    ( case apply 'is_autoimport_suppressed'/2
							       (_cor33, {F,A}) of
							( <'false'> when 'true' ->
							      'true'
							  -| ['compiler_generated'] )
							( <'true'> when 'true' ->
							      %% Line 3823
							      apply 'is_imported_from_erlang'/2
								  (_cor30, {F,A})
							  -| ['compiler_generated'] )
							( <_cor_variable> when 'true' ->
							      call 'erlang':'error'
								  ('badarg')
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					      ( <_cor6> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),_cor6}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <'true'> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor_variable> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor54> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','lint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24})
		  -| [{'function_name',{'no_guard_bif_clash',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_lint')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_lint', _cor0)
end