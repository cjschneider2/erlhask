module 'string' ['centre'/2,
		 'centre'/3,
		 'chars'/2,
		 'chars'/3,
		 'chr'/2,
		 'concat'/2,
		 'copies'/2,
		 'cspan'/2,
		 'equal'/2,
		 'join'/2,
		 'left'/2,
		 'left'/3,
		 'len'/1,
		 'module_info'/0,
		 'module_info'/1,
		 'rchr'/2,
		 'right'/2,
		 'right'/3,
		 'rstr'/2,
		 'span'/2,
		 'str'/2,
		 'strip'/1,
		 'strip'/2,
		 'strip'/3,
		 'sub_string'/2,
		 'sub_string'/3,
		 'sub_word'/2,
		 'sub_word'/3,
		 'substr'/2,
		 'substr'/3,
		 'to_float'/1,
		 'to_integer'/1,
		 'to_lower'/1,
		 'to_upper'/1,
		 'tokens'/2,
		 'words'/1,
		 'words'/2]
    attributes [%% Line 36
		'spec' =
		    %% Line 36
		    [{{'to_float',1},[{'type',36,'bounded_fun',[{'type',36,'fun',[{'type',36,'product',[{'var',36,'String'}]}|[{'type',36,'union',[{'type',36,'tuple',[{'var',36,'Float'}|[{'var',36,'Rest'}]]}|[{'type',36,'tuple',[{'atom',36,'error'}|[{'var',36,'Reason'}]]}]]}]]}|[[{'type',37,'constraint',[{'atom',37,'is_subtype'}|[[{'var',37,'String'}|[{'type',37,'string',[]}]]]]}|[{'type',38,'constraint',[{'atom',38,'is_subtype'}|[[{'var',38,'Float'}|[{'type',38,'float',[]}]]]]}|[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Rest'}|[{'type',39,'string',[]}]]]]}|[{'type',40,'constraint',[{'atom',40,'is_subtype'}|[[{'var',40,'Reason'}|[{'type',40,'union',[{'atom',40,'no_float'}|[{'atom',40,'not_a_list'}]]}]]]]}]]]]]]}]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'to_integer',1},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'var',45,'String'}]}|[{'type',45,'union',[{'type',45,'tuple',[{'var',45,'Int'}|[{'var',45,'Rest'}]]}|[{'type',45,'tuple',[{'atom',45,'error'}|[{'var',45,'Reason'}]]}]]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'String'}|[{'type',46,'string',[]}]]]]}|[{'type',47,'constraint',[{'atom',47,'is_subtype'}|[[{'var',47,'Int'}|[{'type',47,'integer',[]}]]]]}|[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'Rest'}|[{'type',48,'string',[]}]]]]}|[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Reason'}|[{'type',49,'union',[{'atom',49,'no_integer'}|[{'atom',49,'not_a_list'}]]}]]]]}]]]]]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'len',1},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'String'}]}|[{'var',61,'Length'}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'String'}|[{'type',62,'string',[]}]]]]}|[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Length'}|[{'type',63,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'equal',2},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'String1'}|[{'var',70,'String2'}]]}|[{'type',70,'boolean',[]}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'String1'}|[{'type',71,'string',[]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'String2'}|[{'type',72,'string',[]}]]]]}]]]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'concat',2},[{'type',80,'bounded_fun',[{'type',80,'fun',[{'type',80,'product',[{'var',80,'String1'}|[{'var',80,'String2'}]]}|[{'var',80,'String3'}]]}|[[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'String1'}|[{'type',81,'string',[]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'String2'}|[{'type',82,'string',[]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'String3'}|[{'type',83,'string',[]}]]]]}]]]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'chr',2},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'String'}|[{'var',91,'Character'}]]}|[{'var',91,'Index'}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'String'}|[{'type',92,'string',[]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Character'}|[{'type',93,'char',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Index'}|[{'type',94,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'rchr',2},[{'type',102,'bounded_fun',[{'type',102,'fun',[{'type',102,'product',[{'var',102,'String'}|[{'var',102,'Character'}]]}|[{'var',102,'Index'}]]}|[[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'String'}|[{'type',103,'string',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Character'}|[{'type',104,'char',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Index'}|[{'type',105,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'str',2},[{'type',121,'bounded_fun',[{'type',121,'fun',[{'type',121,'product',[{'var',121,'String'}|[{'var',121,'SubString'}]]}|[{'var',121,'Index'}]]}|[[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'String'}|[{'type',122,'string',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'SubString'}|[{'type',123,'string',[]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Index'}|[{'type',124,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'rstr',2},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'String'}|[{'var',136,'SubString'}]]}|[{'var',136,'Index'}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'String'}|[{'type',137,'string',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'SubString'}|[{'type',138,'string',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'Index'}|[{'type',139,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'span',2},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'String'}|[{'var',158,'Chars'}]]}|[{'var',158,'Length'}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'String'}|[{'type',159,'string',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Chars'}|[{'type',160,'string',[]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Length'}|[{'type',161,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'cspan',2},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'String'}|[{'var',172,'Chars'}]]}|[{'var',172,'Length'}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'String'}|[{'type',173,'string',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Chars'}|[{'type',174,'string',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Length'}|[{'type',175,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'substr',2},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'String'}|[{'var',190,'Start'}]]}|[{'var',190,'SubString'}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'String'}|[{'type',191,'string',[]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'SubString'}|[{'type',192,'string',[]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Start'}|[{'type',193,'pos_integer',[]}]]]]}]]]]]}]}],
		%% Line 200
		'spec' =
		    %% Line 200
		    [{{'substr',3},[{'type',200,'bounded_fun',[{'type',200,'fun',[{'type',200,'product',[{'var',200,'String'}|[{'var',200,'Start'}|[{'var',200,'Length'}]]]}|[{'var',200,'SubString'}]]}|[[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'String'}|[{'type',201,'string',[]}]]]]}|[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'SubString'}|[{'type',202,'string',[]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Start'}|[{'type',203,'pos_integer',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Length'}|[{'type',204,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'tokens',2},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[{'var',218,'String'}|[{'var',218,'SeparatorList'}]]}|[{'var',218,'Tokens'}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'String'}|[{'type',219,'string',[]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'SeparatorList'}|[{'type',220,'string',[]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Tokens'}|[{'type',221,'list',[{'ann_type',221,[{'var',221,'Token'}|[{'type',221,'nonempty_string',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'chars',2},[{'type',242,'bounded_fun',[{'type',242,'fun',[{'type',242,'product',[{'var',242,'Character'}|[{'var',242,'Number'}]]}|[{'var',242,'String'}]]}|[[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Character'}|[{'type',243,'char',[]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Number'}|[{'type',244,'non_neg_integer',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'String'}|[{'type',245,'string',[]}]]]]}]]]]]}]}],
		%% Line 249
		'spec' =
		    %% Line 249
		    [{{'chars',3},[{'type',249,'bounded_fun',[{'type',249,'fun',[{'type',249,'product',[{'var',249,'Character'}|[{'var',249,'Number'}|[{'var',249,'Tail'}]]]}|[{'var',249,'String'}]]}|[[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Character'}|[{'type',250,'char',[]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'Number'}|[{'type',251,'non_neg_integer',[]}]]]]}|[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Tail'}|[{'type',252,'string',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'String'}|[{'type',253,'string',[]}]]]]}]]]]]]}]}],
		%% Line 264
		'spec' =
		    %% Line 264
		    [{{'copies',2},[{'type',264,'bounded_fun',[{'type',264,'fun',[{'type',264,'product',[{'var',264,'String'}|[{'var',264,'Number'}]]}|[{'var',264,'Copies'}]]}|[[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'String'}|[{'type',265,'string',[]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Copies'}|[{'type',266,'string',[]}]]]]}|[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'Number'}|[{'type',267,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 279
		'spec' =
		    %% Line 279
		    [{{'words',1},[{'type',279,'bounded_fun',[{'type',279,'fun',[{'type',279,'product',[{'var',279,'String'}]}|[{'var',279,'Count'}]]}|[[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'String'}|[{'type',280,'string',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Count'}|[{'type',281,'pos_integer',[]}]]]]}]]]]}]}],
		%% Line 285
		'spec' =
		    %% Line 285
		    [{{'words',2},[{'type',285,'bounded_fun',[{'type',285,'fun',[{'type',285,'product',[{'var',285,'String'}|[{'var',285,'Character'}]]}|[{'var',285,'Count'}]]}|[[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'String'}|[{'type',286,'string',[]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Character'}|[{'type',287,'char',[]}]]]]}|[{'type',288,'constraint',[{'atom',288,'is_subtype'}|[[{'var',288,'Count'}|[{'type',288,'pos_integer',[]}]]]]}]]]]]}]}],
		%% Line 299
		'spec' =
		    %% Line 299
		    [{{'sub_word',2},[{'type',299,'bounded_fun',[{'type',299,'fun',[{'type',299,'product',[{'var',299,'String'}|[{'var',299,'Number'}]]}|[{'var',299,'Word'}]]}|[[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'String'}|[{'type',300,'string',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Word'}|[{'type',301,'string',[]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Number'}|[{'type',302,'integer',[]}]]]]}]]]]]}]}],
		%% Line 306
		'spec' =
		    %% Line 306
		    [{{'sub_word',3},[{'type',306,'bounded_fun',[{'type',306,'fun',[{'type',306,'product',[{'var',306,'String'}|[{'var',306,'Number'}|[{'var',306,'Character'}]]]}|[{'var',306,'Word'}]]}|[[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'String'}|[{'type',307,'string',[]}]]]]}|[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'Word'}|[{'type',308,'string',[]}]]]]}|[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'Number'}|[{'type',309,'integer',[]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Character'}|[{'type',310,'char',[]}]]]]}]]]]]]}]}],
		%% Line 330
		'spec' =
		    %% Line 330
		    [{{'strip',1},[{'type',330,'fun',[{'type',330,'product',[{'type',330,'string',[]}]}|[{'type',330,'string',[]}]]}]}],
		%% Line 334
		'spec' =
		    %% Line 334
		    [{{'strip',2},[{'type',334,'bounded_fun',[{'type',334,'fun',[{'type',334,'product',[{'var',334,'String'}|[{'var',334,'Direction'}]]}|[{'var',334,'Stripped'}]]}|[[{'type',335,'constraint',[{'atom',335,'is_subtype'}|[[{'var',335,'String'}|[{'type',335,'string',[]}]]]]}|[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Stripped'}|[{'type',336,'string',[]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'Direction'}|[{'type',337,'union',[{'atom',337,'left'}|[{'atom',337,'right'}|[{'atom',337,'both'}]]]}]]]]}]]]]]}]}],
		%% Line 344
		'spec' =
		    %% Line 344
		    [{{'strip',3},[{'type',344,'bounded_fun',[{'type',344,'fun',[{'type',344,'product',[{'var',344,'String'}|[{'var',344,'Direction'}|[{'var',344,'Character'}]]]}|[{'var',344,'Stripped'}]]}|[[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'String'}|[{'type',345,'string',[]}]]]]}|[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'Stripped'}|[{'type',346,'string',[]}]]]]}|[{'type',347,'constraint',[{'atom',347,'is_subtype'}|[[{'var',347,'Direction'}|[{'type',347,'union',[{'atom',347,'left'}|[{'atom',347,'right'}|[{'atom',347,'both'}]]]}]]]]}|[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'Character'}|[{'type',348,'char',[]}]]]]}]]]]]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'left',2},[{'type',372,'bounded_fun',[{'type',372,'fun',[{'type',372,'product',[{'var',372,'String'}|[{'var',372,'Number'}]]}|[{'var',372,'Left'}]]}|[[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'String'}|[{'type',373,'string',[]}]]]]}|[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'Left'}|[{'type',374,'string',[]}]]]]}|[{'type',375,'constraint',[{'atom',375,'is_subtype'}|[[{'var',375,'Number'}|[{'type',375,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 379
		'spec' =
		    %% Line 379
		    [{{'left',3},[{'type',379,'bounded_fun',[{'type',379,'fun',[{'type',379,'product',[{'var',379,'String'}|[{'var',379,'Number'}|[{'var',379,'Character'}]]]}|[{'var',379,'Left'}]]}|[[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'String'}|[{'type',380,'string',[]}]]]]}|[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'Left'}|[{'type',381,'string',[]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'Number'}|[{'type',382,'non_neg_integer',[]}]]]]}|[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'Character'}|[{'type',383,'char',[]}]]]]}]]]]]]}]}],
		%% Line 397
		'spec' =
		    %% Line 397
		    [{{'right',2},[{'type',397,'bounded_fun',[{'type',397,'fun',[{'type',397,'product',[{'var',397,'String'}|[{'var',397,'Number'}]]}|[{'var',397,'Right'}]]}|[[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'String'}|[{'type',398,'string',[]}]]]]}|[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Right'}|[{'type',399,'string',[]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Number'}|[{'type',400,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 404
		'spec' =
		    %% Line 404
		    [{{'right',3},[{'type',404,'bounded_fun',[{'type',404,'fun',[{'type',404,'product',[{'var',404,'String'}|[{'var',404,'Number'}|[{'var',404,'Character'}]]]}|[{'var',404,'Right'}]]}|[[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'String'}|[{'type',405,'string',[]}]]]]}|[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'Right'}|[{'type',406,'string',[]}]]]]}|[{'type',407,'constraint',[{'atom',407,'is_subtype'}|[[{'var',407,'Number'}|[{'type',407,'non_neg_integer',[]}]]]]}|[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'Character'}|[{'type',408,'char',[]}]]]]}]]]]]]}]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'centre',2},[{'type',422,'bounded_fun',[{'type',422,'fun',[{'type',422,'product',[{'var',422,'String'}|[{'var',422,'Number'}]]}|[{'var',422,'Centered'}]]}|[[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'String'}|[{'type',423,'string',[]}]]]]}|[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'Centered'}|[{'type',424,'string',[]}]]]]}|[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'Number'}|[{'type',425,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 429
		'spec' =
		    %% Line 429
		    [{{'centre',3},[{'type',429,'bounded_fun',[{'type',429,'fun',[{'type',429,'product',[{'var',429,'String'}|[{'var',429,'Number'}|[{'var',429,'Character'}]]]}|[{'var',429,'Centered'}]]}|[[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'String'}|[{'type',430,'string',[]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Centered'}|[{'type',431,'string',[]}]]]]}|[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Number'}|[{'type',432,'non_neg_integer',[]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'Character'}|[{'type',433,'char',[]}]]]]}]]]]]]}]}],
		%% Line 449
		'spec' =
		    %% Line 449
		    [{{'sub_string',2},[{'type',449,'bounded_fun',[{'type',449,'fun',[{'type',449,'product',[{'var',449,'String'}|[{'var',449,'Start'}]]}|[{'var',449,'SubString'}]]}|[[{'type',450,'constraint',[{'atom',450,'is_subtype'}|[[{'var',450,'String'}|[{'type',450,'string',[]}]]]]}|[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'SubString'}|[{'type',451,'string',[]}]]]]}|[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'Start'}|[{'type',452,'pos_integer',[]}]]]]}]]]]]}]}],
		%% Line 456
		'spec' =
		    %% Line 456
		    [{{'sub_string',3},[{'type',456,'bounded_fun',[{'type',456,'fun',[{'type',456,'product',[{'var',456,'String'}|[{'var',456,'Start'}|[{'var',456,'Stop'}]]]}|[{'var',456,'SubString'}]]}|[[{'type',457,'constraint',[{'atom',457,'is_subtype'}|[[{'var',457,'String'}|[{'type',457,'string',[]}]]]]}|[{'type',458,'constraint',[{'atom',458,'is_subtype'}|[[{'var',458,'SubString'}|[{'type',458,'string',[]}]]]]}|[{'type',459,'constraint',[{'atom',459,'is_subtype'}|[[{'var',459,'Start'}|[{'type',459,'pos_integer',[]}]]]]}|[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'Stop'}|[{'type',460,'pos_integer',[]}]]]]}]]]]]]}]}],
		%% Line 485
		'spec' =
		    %% Line 485
		    [{{'to_lower',1},[{'type',485,'bounded_fun',[{'type',485,'fun',[{'type',485,'product',[{'var',485,'String'}]}|[{'var',485,'Result'}]]}|[[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'String'}|[{'remote_type',486,[{'atom',486,'io_lib'}|[{'atom',486,'latin1_string'}|[[]]]]}]]]]}|[{'type',487,'constraint',[{'atom',487,'is_subtype'}|[[{'var',487,'Result'}|[{'remote_type',487,[{'atom',487,'io_lib'}|[{'atom',487,'latin1_string'}|[[]]]]}]]]]}]]]]}|[{'type',488,'bounded_fun',[{'type',488,'fun',[{'type',488,'product',[{'var',488,'Char'}]}|[{'var',488,'CharResult'}]]}|[[{'type',489,'constraint',[{'atom',489,'is_subtype'}|[[{'var',489,'Char'}|[{'type',489,'char',[]}]]]]}|[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'CharResult'}|[{'type',490,'char',[]}]]]]}]]]]}]]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'to_upper',1},[{'type',497,'bounded_fun',[{'type',497,'fun',[{'type',497,'product',[{'var',497,'String'}]}|[{'var',497,'Result'}]]}|[[{'type',498,'constraint',[{'atom',498,'is_subtype'}|[[{'var',498,'String'}|[{'remote_type',498,[{'atom',498,'io_lib'}|[{'atom',498,'latin1_string'}|[[]]]]}]]]]}|[{'type',499,'constraint',[{'atom',499,'is_subtype'}|[[{'var',499,'Result'}|[{'remote_type',499,[{'atom',499,'io_lib'}|[{'atom',499,'latin1_string'}|[[]]]]}]]]]}]]]]}|[{'type',500,'bounded_fun',[{'type',500,'fun',[{'type',500,'product',[{'var',500,'Char'}]}|[{'var',500,'CharResult'}]]}|[[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'Char'}|[{'type',501,'char',[]}]]]]}|[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'CharResult'}|[{'type',502,'char',[]}]]]]}]]]]}]]}],
		%% Line 509
		'spec' =
		    %% Line 509
		    [{{'join',2},[{'type',509,'bounded_fun',[{'type',509,'fun',[{'type',509,'product',[{'var',509,'StringList'}|[{'var',509,'Separator'}]]}|[{'var',509,'String'}]]}|[[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'StringList'}|[{'type',510,'list',[{'type',510,'string',[]}]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'Separator'}|[{'type',511,'string',[]}]]]]}|[{'type',512,'constraint',[{'atom',512,'is_subtype'}|[[{'var',512,'String'}|[{'type',512,'string',[]}]]]]}]]]]]}]}]]
'to_float'/1 =
    %% Line 42
    fun (_cor0) ->
	%% Line 43
	call 'erlang':'nif_error'
	    ('undef')
'to_integer'/1 =
    %% Line 51
    fun (_cor0) ->
	%% Line 52
	call 'erlang':'nif_error'
	    ('undef')
'len'/1 =
    %% Line 65
    fun (_cor0) ->
	call 'erlang':'length'
	    (_cor0)
'equal'/2 =
    %% Line 74
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     S) ->
	      'true'
	  %% Line 75
	  <_cor5,_cor6> when 'true' ->
	      'false'
	end
'concat'/2 =
    %% Line 85
    fun (_cor1,_cor0) ->
	call 'erlang':'++'
	    (_cor1, _cor0)
'chr'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,C>
	      when call 'erlang':'is_integer'
		    (C) ->
	      apply 'chr'/3
		  (S, C, 1)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'chr',2}}] )
	    -| ['compiler_generated'] )
	end
'chr'/3 =
    %% Line 98
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|_X_Cs],_cor7,I>
	      when call 'erlang':'=:='
		    (_cor7,
		     C) ->
	      I
	  %% Line 99
	  <[_cor8|Cs],C,I> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'+'
		      (I, 1)
	      in  apply 'chr'/3
		      (Cs, C, _cor3)
	  %% Line 100
	  <[],_X_C,_X_I> when 'true' ->
	      0
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'chr',3}}] )
	    -| ['compiler_generated'] )
	end
'rchr'/2 =
    %% Line 107
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,C>
	      when call 'erlang':'is_integer'
		    (C) ->
	      apply 'rchr'/4
		  (S, C, 1, 0)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'rchr',2}}] )
	    -| ['compiler_generated'] )
	end
'rchr'/4 =
    %% Line 109
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C|Cs],_cor10,I,_X_L>
	      when call 'erlang':'=:='
		    (_cor10,
		     C) ->
	      let <_cor4> =
		  %% Line 110
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 110
		  apply 'rchr'/4
		      (Cs, C, _cor4, I)
	  %% Line 111
	  <[_cor11|Cs],C,I,L> when 'true' ->
	      let <_cor5> =
		  %% Line 112
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 112
		  apply 'rchr'/4
		      (Cs, C, _cor5, L)
	  %% Line 113
	  <[],_X_C,_X_I,L> when 'true' ->
	      L
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rchr',4}}] )
	    -| ['compiler_generated'] )
	end
'str'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Sub>
	      when call 'erlang':'is_list'
		    (Sub) ->
	      apply 'str'/3
		  (S, Sub, 1)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'str',2}}] )
	    -| ['compiler_generated'] )
	end
'str'/3 =
    %% Line 128
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|S],[_cor9|Sub],I>
	      when call 'erlang':'=:='
		    (_cor9,
		     C) ->
	      %% Line 129
	      case apply 'prefix'/2
		       (Sub, S) of
		%% Line 130
		<'true'> when 'true' ->
		    I
		%% Line 131
		<'false'> when 'true' ->
		    let <_cor3> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'str'/3
			    (S, [C|Sub], _cor3)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 133
	  <[_cor10|S],Sub,I> when 'true' ->
	      let <_cor5> =
		  call 'erlang':'+'
		      (I, 1)
	      in  apply 'str'/3
		      (S, Sub, _cor5)
	  %% Line 134
	  <[],_X_Sub,_X_I> when 'true' ->
	      0
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'str',3}}] )
	    -| ['compiler_generated'] )
	end
'rstr'/2 =
    %% Line 141
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Sub>
	      when call 'erlang':'is_list'
		    (Sub) ->
	      apply 'rstr'/4
		  (S, Sub, 1, 0)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'rstr',2}}] )
	    -| ['compiler_generated'] )
	end
'rstr'/4 =
    %% Line 143
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C|S],[_cor12|Sub],I,L>
	      when call 'erlang':'=:='
		    (_cor12,
		     C) ->
	      %% Line 144
	      case apply 'prefix'/2
		       (Sub, S) of
		%% Line 145
		<'true'> when 'true' ->
		    let <_cor4> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'rstr'/4
			    (S, [C|Sub], _cor4, I)
		%% Line 146
		<'false'> when 'true' ->
		    let <_cor5> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'rstr'/4
			    (S, [C|Sub], _cor5, L)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 148
	  <[_cor13|S],Sub,I,L> when 'true' ->
	      let <_cor7> =
		  call 'erlang':'+'
		      (I, 1)
	      in  apply 'rstr'/4
		      (S, Sub, _cor7, L)
	  %% Line 149
	  <[],_X_Sub,_X_I,L> when 'true' ->
	      L
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rstr',4}}] )
	    -| ['compiler_generated'] )
	end
'prefix'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Pre],[_cor6|String]>
	      when call 'erlang':'=:='
		    (_cor6,
		     C) ->
	      apply 'prefix'/2
		  (Pre, String)
	  %% Line 152
	  <[],String>
	      when call 'erlang':'is_list'
		    (String) ->
	      'true'
	  %% Line 153
	  <Pre,String>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Pre)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (String)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      'false'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'prefix',2}}] )
	    -| ['compiler_generated'] )
	end
'span'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Cs>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      apply 'span'/3
		  (S, Cs, 0)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'span',2}}] )
	    -| ['compiler_generated'] )
	end
'span'/3 =
    %% Line 165
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|S],Cs,I> when 'true' ->
	      %% Line 166
	      case call 'lists':'member'
		       (C, Cs) of
		%% Line 167
		<'true'> when 'true' ->
		    let <_cor3> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'span'/3
			    (S, Cs, _cor3)
		%% Line 168
		<'false'> when 'true' ->
		    I
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 170
	  <[],_X_Cs,I> when 'true' ->
	      I
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'span',3}}] )
	    -| ['compiler_generated'] )
	end
'cspan'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Cs>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      apply 'cspan'/3
		  (S, Cs, 0)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'cspan',2}}] )
	    -| ['compiler_generated'] )
	end
'cspan'/3 =
    %% Line 179
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|S],Cs,I> when 'true' ->
	      %% Line 180
	      case call 'lists':'member'
		       (C, Cs) of
		%% Line 181
		<'true'> when 'true' ->
		    I
		%% Line 182
		<'false'> when 'true' ->
		    let <_cor3> =
			call 'erlang':'+'
			    (I, 1)
		    in  apply 'cspan'/3
			    (S, Cs, _cor3)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 184
	  <[],_X_Cs,I> when 'true' ->
	      I
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'cspan',3}}] )
	    -| ['compiler_generated'] )
	end
'substr'/2 =
    %% Line 195
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <String,1>
	      when call 'erlang':'is_list'
		    (String) ->
	      %% Line 196
	      String
	  %% Line 197
	  <String,S>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(S)
		in  let <_cor3> =
			call 'erlang':'>'
			    (S, 1)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 198
	      apply 'substr2'/2
		  (String, S)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'substr',2}}] )
	    -| ['compiler_generated'] )
	end
'substr'/3 =
    %% Line 206
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <String,S,L>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (S)
		    in  let <_cor4> =
			    call 'erlang':'>='
				(S, 1)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (L)
			    in  let <_cor6> =
				    call 'erlang':'>='
					(L, 0)
				in  let <_cor7> =
					call 'erlang':'and'
					    (_cor5, _cor6)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor4, _cor7)
					in  call 'erlang':'and'
						(_cor3, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 207
		  apply 'substr2'/2
		      (String, S)
	      in  %% Line 207
		  apply 'substr1'/2
		      (_cor9, L)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'substr',3}}] )
	    -| ['compiler_generated'] )
	end
'substr1'/2 =
    %% Line 209
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|String],L>
	      when call 'erlang':'>'
		    (L,
		     0) ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (L, 1)
	      in  let <_cor3> =
		      apply 'substr1'/2
			  (String, _cor2)
		  in  [C|_cor3]
	  %% Line 210
	  <String,_X_L>
	      when call 'erlang':'is_list'
		    (String) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'substr1',2}}] )
	    -| ['compiler_generated'] )
	end
'substr2'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <String,1>
	      when call 'erlang':'is_list'
		    (String) ->
	      String
	  %% Line 213
	  <[_cor5|String],S> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (S, 1)
	      in  apply 'substr2'/2
		      (String, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'substr2',2}}] )
	    -| ['compiler_generated'] )
	end
'tokens'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	%% Line 224
	apply 'tokens1'/3
	    (_cor1, _cor0, [])
'tokens1'/3 =
    %% Line 226
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|S],Seps,Toks> when 'true' ->
	      %% Line 227
	      case call 'lists':'member'
		       (C, Seps) of
		%% Line 228
		<'true'> when 'true' ->
		    apply 'tokens1'/3
			(S, Seps, Toks)
		%% Line 229
		<'false'> when 'true' ->
		    apply 'tokens2'/4
			(S, Seps, Toks, [C|[]])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 231
	  <[],_X_Seps,Toks> when 'true' ->
	      %% Line 232
	      call 'lists':'reverse'
		  (Toks)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'tokens1',3}}] )
	    -| ['compiler_generated'] )
	end
'tokens2'/4 =
    %% Line 234
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C|S],Seps,Toks,Cs> when 'true' ->
	      %% Line 235
	      case call 'lists':'member'
		       (C, Seps) of
		%% Line 236
		<'true'> when 'true' ->
		    let <_cor4> =
			call 'lists':'reverse'
			    (Cs)
		    in  apply 'tokens1'/3
			    (S, Seps, [_cor4|Toks])
		%% Line 237
		<'false'> when 'true' ->
		    apply 'tokens2'/4
			(S, Seps, Toks, [C|Cs])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 239
	  <[],_X_Seps,Toks,Cs> when 'true' ->
	      let <_cor6> =
		  %% Line 240
		  call 'lists':'reverse'
		      (Cs)
	      in  %% Line 240
		  call 'lists':'reverse'
		      ([_cor6|Toks])
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'tokens2',4}}] )
	    -| ['compiler_generated'] )
	end
'chars'/2 =
    %% Line 247
    fun (_cor1,_cor0) ->
	apply 'chars'/3
	    (_cor1, _cor0, [])
'chars'/3 =
    %% Line 255
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <C,N,Tail>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor3> =
		  %% Line 256
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 256
		  apply 'chars'/3
		      (C, _cor3, [C|Tail])
	  %% Line 257
	  <C,0,Tail>
	      when call 'erlang':'is_integer'
		    (C) ->
	      %% Line 258
	      Tail
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'chars',3}}] )
	    -| ['compiler_generated'] )
	end
'copies'/2 =
    %% Line 269
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <CharList,Num>
	      when try
		    let <_cor2> =
			call 'erlang':'is_list'
			    (CharList)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(Num)
			in  let <_cor4> =
				call 'erlang':'>='
				    (Num, 0)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 270
	      apply 'copies'/3
		  (CharList, Num, [])
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'copies',2}}] )
	    -| ['compiler_generated'] )
	end
'copies'/3 =
    %% Line 272
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_CharList,0,R> when 'true' ->
	      %% Line 273
	      R
	  %% Line 274
	  <CharList,Num,R> when 'true' ->
	      let <_cor4> =
		  %% Line 275
		  call 'erlang':'-'
		      (Num, 1)
	      in  let <_cor3> =
		      %% Line 275
		      call 'erlang':'++'
			  (CharList, R)
		  in  %% Line 275
		      apply 'copies'/3
			  (CharList, _cor4, _cor3)
	end
'words'/1 =
    %% Line 283
    fun (_cor0) ->
	apply 'words'/2
	    (_cor0, 32)
'words'/2 =
    %% Line 290
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <String,Char>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      let <_cor2> =
		  %% Line 291
		  apply 'strip'/3
		      (String, 'both', Char)
	      in  %% Line 291
		  apply 'w_count'/3
		      (_cor2, Char, 0)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'words',2}}] )
	    -| ['compiler_generated'] )
	end
'w_count'/3 =
    %% Line 293
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor8,Num> when 'true' ->
	      call 'erlang':'+'
		  (Num, 1)
	  %% Line 294
	  <[H|T],_cor9,Num>
	      when call 'erlang':'=:='
		    (_cor9,
		     H) ->
	      let <_cor4> =
		  apply 'strip'/3
		      (T, 'left', H)
	      in  let <_cor3> =
		      call 'erlang':'+'
			  (Num, 1)
		  in  apply 'w_count'/3
			  (_cor4, H, _cor3)
	  %% Line 295
	  <[_X_H|T],Char,Num> when 'true' ->
	      apply 'w_count'/3
		  (T, Char, Num)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'w_count',3}}] )
	    -| ['compiler_generated'] )
	end
'sub_word'/2 =
    %% Line 304
    fun (_cor1,_cor0) ->
	apply 'sub_word'/3
	    (_cor1, _cor0, 32)
'sub_word'/3 =
    %% Line 312
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <String,Index,Char>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'is_integer'
			    (Char)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 313
	      case apply 'words'/2
		       (String, Char) of
		%% Line 314
		<Num>
		    when call 'erlang':'<'
			  (Num,
			   Index) ->
		    %% Line 315
		    []
		%% Line 316
		<_X_Num> when 'true' ->
		    let <_cor5> =
			%% Line 317
			apply 'strip'/3
			    (String, 'left', Char)
		    in  %% Line 317
			apply 's_word'/5
			    (_cor5, Index, Char, 1, [])
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'sub_word',3}}] )
	    -| ['compiler_generated'] )
	end
's_word'/5 =
    %% Line 320
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,_cor13,_cor14,Res> when 'true' ->
	      call 'lists':'reverse'
		  (Res)
	  %% Line 321
	  <[Char|_cor15],Index,_cor16,_cor17,Res>
	      when let <_cor18> =
		    call 'erlang':'=:='
			(_cor16, Char)
		in  let <_cor19> =
			call 'erlang':'=:='
			    (_cor17, Index)
		    in  call 'erlang':'and'
			    (_cor18, _cor19) ->
	      call 'lists':'reverse'
		  (Res)
	  %% Line 322
	  <[H|T],Index,Char,_cor20,Res>
	      when call 'erlang':'=:='
		    (_cor20,
		     Index) ->
	      apply 's_word'/5
		  (T, Index, Char, Index, [H|Res])
	  %% Line 323
	  <[Char|T],Stop,_cor21,Index,Res>
	      when let <_cor22> =
		    call 'erlang':'=:='
			(_cor21, Char)
		in  let <_cor23> =
			call 'erlang':'<'
			    (Index, Stop)
		    in  call 'erlang':'and'
			    (_cor22, _cor23) ->
	      let <_cor6> =
		  %% Line 324
		  apply 'strip'/3
		      (T, 'left', Char)
	      in  let <_cor5> =
		      %% Line 324
		      call 'erlang':'+'
			  (Index, 1)
		  in  %% Line 324
		      apply 's_word'/5
			  (_cor6, Stop, Char, _cor5, Res)
	  %% Line 325
	  <[_cor24|T],Stop,Char,Index,Res>
	      when call 'erlang':'<'
		    (Index,
		     Stop) ->
	      %% Line 326
	      apply 's_word'/5
		  (T, Stop, Char, Index, Res)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'s_word',5}}] )
	    -| ['compiler_generated'] )
	end
'strip'/1 =
    %% Line 332
    fun (_cor0) ->
	apply 'strip'/2
	    (_cor0, 'both')
'strip'/2 =
    %% Line 339
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <String,'left'> when 'true' ->
	      apply 'strip_left'/2
		  (String, 32)
	  %% Line 340
	  <String,'right'> when 'true' ->
	      apply 'strip_right'/2
		  (String, 32)
	  %% Line 341
	  <String,'both'> when 'true' ->
	      let <_cor2> =
		  %% Line 342
		  apply 'strip_left'/2
		      (String, 32)
	      in  %% Line 342
		  apply 'strip_right'/2
		      (_cor2, 32)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'strip',2}}] )
	    -| ['compiler_generated'] )
	end
'strip'/3 =
    %% Line 350
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <String,'right',Char> when 'true' ->
	      apply 'strip_right'/2
		  (String, Char)
	  %% Line 351
	  <String,'left',Char> when 'true' ->
	      apply 'strip_left'/2
		  (String, Char)
	  %% Line 352
	  <String,'both',Char> when 'true' ->
	      let <_cor3> =
		  %% Line 353
		  apply 'strip_left'/2
		      (String, Char)
	      in  %% Line 353
		  apply 'strip_right'/2
		      (_cor3, Char)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'strip',3}}] )
	    -| ['compiler_generated'] )
	end
'strip_left'/2 =
    %% Line 355
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Sc|S],_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     Sc) ->
	      %% Line 356
	      apply 'strip_left'/2
		  (S, Sc)
	  %% Line 357
	  <S = [_cor5|_cor6],Sc>
	      when call 'erlang':'is_integer'
		    (Sc) ->
	      S
	  %% Line 358
	  <[],Sc>
	      when call 'erlang':'is_integer'
		    (Sc) ->
	      []
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'strip_left',2}}] )
	    -| ['compiler_generated'] )
	end
'strip_right'/2 =
    %% Line 360
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Sc|S],_cor6>
	      when call 'erlang':'=:='
		    (_cor6,
		     Sc) ->
	      %% Line 361
	      case apply 'strip_right'/2
		       (S, Sc) of
		%% Line 362
		<[]> when 'true' ->
		    []
		%% Line 363
		<T> when 'true' ->
		    [Sc|T]
	      end
	  %% Line 365
	  <[C|S],Sc> when 'true' ->
	      let <_cor3> =
		  %% Line 366
		  apply 'strip_right'/2
		      (S, Sc)
	      in  %% Line 366
		  [C|_cor3]
	  %% Line 367
	  <[],Sc>
	      when call 'erlang':'is_integer'
		    (Sc) ->
	      %% Line 368
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'strip_right',2}}] )
	    -| ['compiler_generated'] )
	end
'left'/2 =
    %% Line 377
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <String,Len>
	      when call 'erlang':'is_integer'
		    (Len) ->
	      apply 'left'/3
		  (String, Len, 32)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'left',2}}] )
	    -| ['compiler_generated'] )
	end
'left'/3 =
    %% Line 385
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <String,Len,Char>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      let <Slen> =
		  %% Line 386
		  call 'erlang':'length'
		      (String)
	      in  %% Line 387
		  case <> of
		    %% Line 388
		    <>
			when call 'erlang':'>'
			      (Slen,
			       Len) ->
			apply 'substr'/3
			    (String, 1, Len)
		    %% Line 389
		    <>
			when call 'erlang':'<'
			      (Slen,
			       Len) ->
			let <_cor4> =
			    call 'erlang':'-'
				(Len, Slen)
			in  apply 'l_pad'/3
				(String, _cor4, Char)
		    %% Line 390
		    <>
			when call 'erlang':'=:='
			      (Slen,
			       Len) ->
			String
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'left',3}}] )
	    -| ['compiler_generated'] )
	end
'l_pad'/3 =
    %% Line 393
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    apply 'chars'/2
		(_cor0, _cor1)
	in  call 'erlang':'++'
		(_cor2, _cor3)
'right'/2 =
    %% Line 402
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <String,Len>
	      when call 'erlang':'is_integer'
		    (Len) ->
	      apply 'right'/3
		  (String, Len, 32)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'right',2}}] )
	    -| ['compiler_generated'] )
	end
'right'/3 =
    %% Line 410
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <String,Len,Char>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      let <Slen> =
		  %% Line 411
		  call 'erlang':'length'
		      (String)
	      in  %% Line 412
		  case <> of
		    %% Line 413
		    <>
			when call 'erlang':'>'
			      (Slen,
			       Len) ->
			let <_cor4> =
			    call 'erlang':'-'
				(Slen, Len)
			in  let <_cor5> =
				call 'erlang':'+'
				    (_cor4, 1)
			    in  apply 'substr'/2
				    (String, _cor5)
		    %% Line 414
		    <>
			when call 'erlang':'<'
			      (Slen,
			       Len) ->
			let <_cor6> =
			    call 'erlang':'-'
				(Len, Slen)
			in  apply 'r_pad'/3
				(String, _cor6, Char)
		    %% Line 415
		    <>
			when call 'erlang':'=:='
			      (Slen,
			       Len) ->
			String
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'right',3}}] )
	    -| ['compiler_generated'] )
	end
'r_pad'/3 =
    %% Line 418
    fun (_cor2,_cor1,_cor0) ->
	apply 'chars'/3
	    (_cor0, _cor1, _cor2)
'centre'/2 =
    %% Line 427
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <String,Len>
	      when call 'erlang':'is_integer'
		    (Len) ->
	      apply 'centre'/3
		  (String, Len, 32)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'centre',2}}] )
	    -| ['compiler_generated'] )
	end
'centre'/3 =
    %% Line 435
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <String,0,Char>
	      when let <_cor3> =
		    call 'erlang':'is_list'
			(String)
		in  let <_cor4> =
			call 'erlang':'is_integer'
			    (Char)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 436
	      []
	  %% Line 437
	  <String,Len,Char>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      let <Slen> =
		  %% Line 438
		  call 'erlang':'length'
		      (String)
	      in  %% Line 439
		  case <> of
		    %% Line 440
		    <>
			when call 'erlang':'>'
			      (Slen,
			       Len) ->
			let <_cor6> =
			    call 'erlang':'-'
				(Slen, Len)
			in  let <_cor7> =
				call 'erlang':'div'
				    (_cor6, 2)
			    in  let <_cor8> =
				    call 'erlang':'+'
					(_cor7, 1)
				in  apply 'substr'/3
					(String, _cor8, Len)
		    %% Line 441
		    <>
			when call 'erlang':'<'
			      (Slen,
			       Len) ->
			let <_cor9> =
			    %% Line 442
			    call 'erlang':'-'
				(Len, Slen)
			in  let <N> =
				%% Line 442
				call 'erlang':'div'
				    (_cor9, 2)
			    in  let <_cor11> =
				    %% Line 443
				    call 'erlang':'+'
					(Slen, N)
				in  let <_cor12> =
					%% Line 443
					call 'erlang':'-'
					    (Len, _cor11)
				    in  let <_cor13> =
					    %% Line 443
					    apply 'l_pad'/3
						(String, _cor12, Char)
					in  %% Line 443
					    apply 'r_pad'/3
						(_cor13, N, Char)
		    %% Line 444
		    <>
			when call 'erlang':'=:='
			      (Slen,
			       Len) ->
			String
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'centre',3}}] )
	    -| ['compiler_generated'] )
	end
'sub_string'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	apply 'substr'/2
	    (_cor1, _cor0)
'sub_string'/3 =
    %% Line 462
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'-'
		(_cor0, _cor1)
	in  let <_cor4> =
		call 'erlang':'+'
		    (_cor3, 1)
	    in  apply 'substr'/3
		    (_cor2, _cor1, _cor4)
'to_lower_char'/1 =
    %% Line 467
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(65, _cor0)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (_cor0, 90)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 468
	      call 'erlang':'+'
		  (C, 32)
	  %% Line 469
	  <C>
	      when try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor6> =
			    call 'erlang':'=<'
				(192, _cor0)
			in  let <_cor7> =
				call 'erlang':'=<'
				    (_cor0, 214)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 470
	      call 'erlang':'+'
		  (C, 32)
	  %% Line 471
	  <C>
	      when try
		    let <_cor9> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor10> =
			    call 'erlang':'=<'
				(216, _cor0)
			in  let <_cor11> =
				call 'erlang':'=<'
				    (_cor0, 222)
			    in  let <_cor12> =
				    call 'erlang':'and'
					(_cor10, _cor11)
				in  call 'erlang':'and'
					(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 472
	      call 'erlang':'+'
		  (C, 32)
	  %% Line 473
	  <C> when 'true' ->
	      %% Line 474
	      C
	end
'to_upper_char'/1 =
    %% Line 476
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(97, _cor0)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (_cor0, 122)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 477
	      call 'erlang':'-'
		  (C, 32)
	  %% Line 478
	  <C>
	      when try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor6> =
			    call 'erlang':'=<'
				(224, _cor0)
			in  let <_cor7> =
				call 'erlang':'=<'
				    (_cor0, 246)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 479
	      call 'erlang':'-'
		  (C, 32)
	  %% Line 480
	  <C>
	      when try
		    let <_cor9> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor10> =
			    call 'erlang':'=<'
				(248, _cor0)
			in  let <_cor11> =
				call 'erlang':'=<'
				    (_cor0, 254)
			    in  let <_cor12> =
				    call 'erlang':'and'
					(_cor10, _cor11)
				in  call 'erlang':'and'
					(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 481
	      call 'erlang':'-'
		  (C, 32)
	  %% Line 482
	  <C> when 'true' ->
	      %% Line 483
	      C
	end
'to_lower'/1 =
    %% Line 492
    fun (_cor0) ->
	case _cor0 of
	  <S>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 493
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[C|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'to_lower_char'/1
					  (C)
				  in  let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [_cor4|_cor5]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(S)
		-| ['list_comprehension'] )
	  %% Line 494
	  <C>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 495
	      apply 'to_lower_char'/1
		  (C)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'to_lower',1}}] )
	    -| ['compiler_generated'] )
	end
'to_upper'/1 =
    %% Line 504
    fun (_cor0) ->
	case _cor0 of
	  <S>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 505
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[C|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'to_upper_char'/1
					  (C)
				  in  let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [_cor4|_cor5]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(S)
		-| ['list_comprehension'] )
	  %% Line 506
	  <C>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 507
	      apply 'to_upper_char'/1
		  (C)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'to_upper',1}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 514
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Sep>
	      when call 'erlang':'is_list'
		    (Sep) ->
	      %% Line 515
	      []
	  %% Line 516
	  <[H|T],Sep> when 'true' ->
	      let <_cor7> =
		  %% Line 517
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X|_cor3]> when 'true' ->
				      let <_cor5> =
					  call 'erlang':'++'
					      (Sep, X)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (T)
		    -| ['list_comprehension'] )
	      in  let <_cor8> =
		      %% Line 517
		      call 'lists':'append'
			  (_cor7)
		  in  %% Line 517
		      call 'erlang':'++'
			  (H, _cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('string')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('string', _cor0)
end