module 'ordsets' ['add_element'/2,
		  'del_element'/2,
		  'filter'/2,
		  'fold'/3,
		  'from_list'/1,
		  'intersection'/1,
		  'intersection'/2,
		  'is_disjoint'/2,
		  'is_element'/2,
		  'is_set'/1,
		  'is_subset'/2,
		  'module_info'/0,
		  'module_info'/1,
		  'new'/0,
		  'size'/1,
		  'subtract'/2,
		  'to_list'/1,
		  'union'/1,
		  'union'/2]
    attributes [%% Line 29
		'export_type' =
		    %% Line 29
		    [{'ordset',1}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'ordset',{'type',31,'list',[{'var',31,'T'}]},[{'var',31,'T'}]}],
		%% Line 36
		'spec' =
		    %% Line 36
		    [{{'new',0},[{'type',36,'fun',[{'type',36,'product',[]}|[{'type',36,'nil',[]}]]}]}],
		%% Line 43
		'spec' =
		    %% Line 43
		    [{{'is_set',1},[{'type',43,'bounded_fun',[{'type',43,'fun',[{'type',43,'product',[{'var',43,'Ordset'}]}|[{'type',43,'boolean',[]}]]}|[[{'type',44,'constraint',[{'atom',44,'is_subtype'}|[[{'var',44,'Ordset'}|[{'type',44,'term',[]}]]]]}]]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'size',1},[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'Ordset'}]}|[{'type',58,'non_neg_integer',[]}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Ordset'}|[{'type',59,'ordset',[{'var',59,'_'}]}]]]]}]]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'to_list',1},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'Ordset'}]}|[{'var',66,'List'}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Ordset'}|[{'type',67,'ordset',[{'var',67,'T'}]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'List'}|[{'type',68,'list',[{'var',68,'T'}]}]]]]}]]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'from_list',1},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'List'}]}|[{'var',75,'Ordset'}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'List'}|[{'type',76,'list',[{'var',76,'T'}]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Ordset'}|[{'type',77,'ordset',[{'var',77,'T'}]}]]]]}]]]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'is_element',2},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'Element'}|[{'var',85,'Ordset'}]]}|[{'type',85,'boolean',[]}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Element'}|[{'type',86,'term',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Ordset'}|[{'type',87,'ordset',[{'var',87,'_'}]}]]]]}]]]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'add_element',2},[{'type',97,'bounded_fun',[{'type',97,'fun',[{'type',97,'product',[{'var',97,'Element'}|[{'var',97,'Ordset1'}]]}|[{'var',97,'Ordset2'}]]}|[[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Element'}|[{'var',98,'E'}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Ordset1'}|[{'type',99,'ordset',[{'var',99,'T'}]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Ordset2'}|[{'type',100,'ordset',[{'type',100,'union',[{'var',100,'T'}|[{'var',100,'E'}]]}]}]]]]}]]]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'del_element',2},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'Element'}|[{'var',112,'Ordset1'}]]}|[{'var',112,'Ordset2'}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Element'}|[{'type',113,'term',[]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Ordset1'}|[{'type',114,'ordset',[{'var',114,'T'}]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Ordset2'}|[{'type',115,'ordset',[{'var',115,'T'}]}]]]]}]]]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'union',2},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'Ordset1'}|[{'var',125,'Ordset2'}]]}|[{'var',125,'Ordset3'}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Ordset1'}|[{'type',126,'ordset',[{'var',126,'T1'}]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Ordset2'}|[{'type',127,'ordset',[{'var',127,'T2'}]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Ordset3'}|[{'type',128,'ordset',[{'type',128,'union',[{'var',128,'T1'}|[{'var',128,'T2'}]]}]}]]]]}]]]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'union',1},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'OrdsetList'}]}|[{'var',142,'Ordset'}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'OrdsetList'}|[{'type',143,'list',[{'type',143,'ordset',[{'var',143,'T'}]}]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Ordset'}|[{'type',144,'ordset',[{'var',144,'T'}]}]]]]}]]]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'intersection',2},[{'type',157,'bounded_fun',[{'type',157,'fun',[{'type',157,'product',[{'var',157,'Ordset1'}|[{'var',157,'Ordset2'}]]}|[{'var',157,'Ordset3'}]]}|[[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Ordset1'}|[{'type',158,'ordset',[{'var',158,'_'}]}]]]]}|[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Ordset2'}|[{'type',159,'ordset',[{'var',159,'_'}]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Ordset3'}|[{'type',160,'ordset',[{'var',160,'_'}]}]]]]}]]]]]}]}],
		%% Line 176
		'spec' =
		    %% Line 176
		    [{{'intersection',1},[{'type',176,'bounded_fun',[{'type',176,'fun',[{'type',176,'product',[{'var',176,'OrdsetList'}]}|[{'var',176,'Ordset'}]]}|[[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'OrdsetList'}|[{'type',177,'nonempty_list',[{'type',177,'ordset',[{'var',177,'_'}]}]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Ordset'}|[{'type',178,'ordset',[{'var',178,'_'}]}]]]]}]]]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'is_disjoint',2},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'Ordset1'}|[{'var',191,'Ordset2'}]]}|[{'type',191,'boolean',[]}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Ordset1'}|[{'type',192,'ordset',[{'var',192,'_'}]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Ordset2'}|[{'type',193,'ordset',[{'var',193,'_'}]}]]]]}]]]]}]}],
		%% Line 210
		'spec' =
		    %% Line 210
		    [{{'subtract',2},[{'type',210,'bounded_fun',[{'type',210,'fun',[{'type',210,'product',[{'var',210,'Ordset1'}|[{'var',210,'Ordset2'}]]}|[{'var',210,'Ordset3'}]]}|[[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Ordset1'}|[{'type',211,'ordset',[{'var',211,'_'}]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Ordset2'}|[{'type',212,'ordset',[{'var',212,'_'}]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Ordset3'}|[{'type',213,'ordset',[{'var',213,'_'}]}]]]]}]]]]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'is_subset',2},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'Ordset1'}|[{'var',228,'Ordset2'}]]}|[{'type',228,'boolean',[]}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Ordset1'}|[{'type',229,'ordset',[{'var',229,'_'}]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Ordset2'}|[{'type',230,'ordset',[{'var',230,'_'}]}]]]]}]]]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'fold',3},[{'type',244,'bounded_fun',[{'type',244,'fun',[{'type',244,'product',[{'var',244,'Function'}|[{'var',244,'Acc0'}|[{'var',244,'Ordset'}]]]}|[{'var',244,'Acc1'}]]}|[[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'Function'}|[{'type',245,'fun',[{'type',245,'product',[{'ann_type',245,[{'var',245,'Element'}|[{'var',245,'T'}]]}|[{'ann_type',245,[{'var',245,'AccIn'}|[{'type',245,'term',[]}]]}]]}|[{'ann_type',245,[{'var',245,'AccOut'}|[{'type',245,'term',[]}]]}]]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Ordset'}|[{'type',246,'ordset',[{'var',246,'T'}]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Acc0'}|[{'type',247,'term',[]}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'Acc1'}|[{'type',248,'term',[]}]]]]}]]]]]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'filter',2},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'Pred'}|[{'var',256,'Ordset1'}]]}|[{'var',256,'Ordset2'}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Pred'}|[{'type',257,'fun',[{'type',257,'product',[{'ann_type',257,[{'var',257,'Element'}|[{'var',257,'T'}]]}]}|[{'type',257,'boolean',[]}]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Ordset1'}|[{'type',258,'ordset',[{'var',258,'T'}]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Ordset2'}|[{'type',259,'ordset',[{'var',259,'T'}]}]]]]}]]]]]}]}]]
'new'/0 =
    %% Line 38
    fun () ->
	[]
'is_set'/1 =
    %% Line 46
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      apply 'is_set'/2
		  (Es, E)
	  %% Line 47
	  <[]> when 'true' ->
	      'true'
	  %% Line 48
	  <_cor2> when 'true' ->
	      'false'
	end
'is_set'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E2|Es],E1>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      %% Line 51
	      apply 'is_set'/2
		  (Es, E2)
	  %% Line 52
	  <[_cor4|_cor5],_cor6> when 'true' ->
	      'false'
	  %% Line 53
	  <[],_cor7> when 'true' ->
	      'true'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_set',2}}] )
	    -| ['compiler_generated'] )
	end
'size'/1 =
    %% Line 61
    fun (_cor0) ->
	call 'erlang':'length'
	    (_cor0)
'to_list'/1 =
    %% Line 70
    fun (_cor0) ->
	_cor0
'from_list'/1 =
    %% Line 79
    fun (_cor0) ->
	%% Line 80
	call 'lists':'usort'
	    (_cor0)
'is_element'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E,[H|Es]>
	      when call 'erlang':'>'
		    (E,
		     H) ->
	      apply 'is_element'/2
		  (E, Es)
	  %% Line 90
	  <E,[H|_cor4]>
	      when call 'erlang':'<'
		    (E,
		     H) ->
	      'false'
	  %% Line 91
	  <_X_E,[_X_H|_cor5]> when 'true' ->
	      'true'
	  %% Line 92
	  <_cor6,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_element',2}}] )
	    -| ['compiler_generated'] )
	end
'add_element'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E,[H|Es]>
	      when call 'erlang':'>'
		    (E,
		     H) ->
	      let <_cor2> =
		  apply 'add_element'/2
		      (E, Es)
	      in  [H|_cor2]
	  %% Line 105
	  <E,Set = [H|_cor5]>
	      when call 'erlang':'<'
		    (E,
		     H) ->
	      [E|Set]
	  %% Line 106
	  <_X_E,Set = [_X_H|_cor6]> when 'true' ->
	      Set
	  %% Line 107
	  <E,[]> when 'true' ->
	      [E|[]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'add_element',2}}] )
	    -| ['compiler_generated'] )
	end
'del_element'/2 =
    %% Line 117
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E,[H|Es]>
	      when call 'erlang':'>'
		    (E,
		     H) ->
	      let <_cor2> =
		  apply 'del_element'/2
		      (E, Es)
	      in  [H|_cor2]
	  %% Line 118
	  <E,Set = [H|_cor5]>
	      when call 'erlang':'<'
		    (E,
		     H) ->
	      Set
	  %% Line 119
	  <_X_E,[_X_H|Es]> when 'true' ->
	      Es
	  %% Line 120
	  <_cor6,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'del_element',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/2 =
    %% Line 130
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E1|Es1],Set2 = [E2|_cor7]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      let <_cor2> =
		  %% Line 131
		  apply 'union'/2
		      (Es1, Set2)
	      in  %% Line 131
		  [E1|_cor2]
	  %% Line 132
	  <Set1 = [E1|_cor8],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      let <_cor3> =
		  %% Line 133
		  apply 'union'/2
		      (Es2, Set1)
	      in  %% Line 133
		  [E2|_cor3]
	  %% Line 134
	  <[E1|Es1],[_X_E2|Es2]> when 'true' ->
	      let <_cor4> =
		  %% Line 135
		  apply 'union'/2
		      (Es1, Es2)
	      in  %% Line 135
		  [E1|_cor4]
	  %% Line 136
	  <[],Es2> when 'true' ->
	      Es2
	  %% Line 137
	  <Es1,[]> when 'true' ->
	      Es1
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'union',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/1 =
    %% Line 146
    fun (_cor0) ->
	case _cor0 of
	  <[S1|[S2|Ss]]> when 'true' ->
	      let <_cor1> =
		  %% Line 147
		  apply 'union'/2
		      (S1, S2)
	      in  %% Line 147
		  apply 'union1'/2
		      (_cor1, Ss)
	  %% Line 148
	  <[S|[]]> when 'true' ->
	      S
	  %% Line 149
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'union',1}}] )
	    -| ['compiler_generated'] )
	end
'union1'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1,[S2|Ss]> when 'true' ->
	      let <_cor2> =
		  apply 'union'/2
		      (S1, S2)
	      in  apply 'union1'/2
		      (_cor2, Ss)
	  %% Line 152
	  <S1,[]> when 'true' ->
	      S1
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'union1',2}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E1|Es1],Set2 = [E2|_cor5]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      %% Line 163
	      apply 'intersection'/2
		  (Es1, Set2)
	  %% Line 164
	  <Set1 = [E1|_cor6],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      %% Line 165
	      apply 'intersection'/2
		  (Es2, Set1)
	  %% Line 166
	  <[E1|Es1],[_X_E2|Es2]> when 'true' ->
	      let <_cor2> =
		  %% Line 167
		  apply 'intersection'/2
		      (Es1, Es2)
	      in  %% Line 167
		  [E1|_cor2]
	  %% Line 168
	  <[],_cor7> when 'true' ->
	      %% Line 169
	      []
	  %% Line 170
	  <_cor8,[]> when 'true' ->
	      %% Line 171
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'intersection',2}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/1 =
    %% Line 180
    fun (_cor0) ->
	case _cor0 of
	  <[S1|[S2|Ss]]> when 'true' ->
	      let <_cor1> =
		  %% Line 181
		  apply 'intersection'/2
		      (S1, S2)
	      in  %% Line 181
		  apply 'intersection1'/2
		      (_cor1, Ss)
	  %% Line 182
	  <[S|[]]> when 'true' ->
	      S
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'intersection',1}}] )
	    -| ['compiler_generated'] )
	end
'intersection1'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S1,[S2|Ss]> when 'true' ->
	      let <_cor2> =
		  %% Line 185
		  apply 'intersection'/2
		      (S1, S2)
	      in  %% Line 185
		  apply 'intersection1'/2
		      (_cor2, Ss)
	  %% Line 186
	  <S1,[]> when 'true' ->
	      S1
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'intersection1',2}}] )
	    -| ['compiler_generated'] )
	end
'is_disjoint'/2 =
    %% Line 195
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E1|Es1],Set2 = [E2|_cor4]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      %% Line 196
	      apply 'is_disjoint'/2
		  (Es1, Set2)
	  %% Line 197
	  <Set1 = [E1|_cor5],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      %% Line 198
	      apply 'is_disjoint'/2
		  (Es2, Set1)
	  %% Line 199
	  <[_X_E1|_X_Es1],[_X_E2|_X_Es2]> when 'true' ->
	      %% Line 200
	      'false'
	  %% Line 201
	  <[],_cor6> when 'true' ->
	      %% Line 202
	      'true'
	  %% Line 203
	  <_cor7,[]> when 'true' ->
	      %% Line 204
	      'true'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_disjoint',2}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/2 =
    %% Line 215
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E1|Es1],Set2 = [E2|_cor5]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      let <_cor2> =
		  %% Line 216
		  apply 'subtract'/2
		      (Es1, Set2)
	      in  %% Line 216
		  [E1|_cor2]
	  %% Line 217
	  <Set1 = [E1|_cor6],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      %% Line 218
	      apply 'subtract'/2
		  (Set1, Es2)
	  %% Line 219
	  <[_X_E1|Es1],[_X_E2|Es2]> when 'true' ->
	      %% Line 220
	      apply 'subtract'/2
		  (Es1, Es2)
	  %% Line 221
	  <[],_cor7> when 'true' ->
	      []
	  %% Line 222
	  <Es1,[]> when 'true' ->
	      Es1
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'subtract',2}}] )
	    -| ['compiler_generated'] )
	end
'is_subset'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E1|_cor4],[E2|_cor5]>
	      when call 'erlang':'<'
		    (E1,
		     E2) ->
	      %% Line 233
	      'false'
	  %% Line 234
	  <Set1 = [E1|_cor6],[E2|Es2]>
	      when call 'erlang':'>'
		    (E1,
		     E2) ->
	      %% Line 235
	      apply 'is_subset'/2
		  (Set1, Es2)
	  %% Line 236
	  <[_X_E1|Es1],[_X_E2|Es2]> when 'true' ->
	      %% Line 237
	      apply 'is_subset'/2
		  (Es1, Es2)
	  %% Line 238
	  <[],_cor7> when 'true' ->
	      'true'
	  %% Line 239
	  <_cor8,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_subset',2}}] )
	    -| ['compiler_generated'] )
	end
'fold'/3 =
    %% Line 250
    fun (_cor2,_cor1,_cor0) ->
	%% Line 251
	call 'lists':'foldl'
	    (_cor2, _cor1, _cor0)
'filter'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	%% Line 262
	call 'lists':'filter'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ordsets')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ordsets', _cor0)
end