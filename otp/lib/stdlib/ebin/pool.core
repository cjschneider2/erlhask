module 'pool' ['attach'/1,
	       'do_spawn'/4,
	       'get_node'/0,
	       'get_nodes'/0,
	       'get_nodes_and_load'/0,
	       'handle_call'/3,
	       'handle_cast'/2,
	       'handle_info'/2,
	       'init'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'pspawn'/3,
	       'pspawn_link'/3,
	       'start'/1,
	       'start'/2,
	       'statistic_collector'/0,
	       'stop'/0,
	       'terminate'/2]
    attributes [%% Line 55
		'spec' =
		    %% Line 55
		    [{{'start',1},[{'type',55,'bounded_fun',[{'type',55,'fun',[{'type',55,'product',[{'var',55,'Name'}]}|[{'var',55,'Nodes'}]]}|[[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Name'}|[{'type',56,'atom',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Nodes'}|[{'type',57,'list',[{'type',57,'node',[]}]}]]]]}]]]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'start',2},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'Name'}|[{'var',61,'Args'}]]}|[{'var',61,'Nodes'}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'Name'}|[{'type',62,'atom',[]}]]]]}|[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Args'}|[{'type',63,'string',[]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Nodes'}|[{'type',64,'list',[{'type',64,'node',[]}]}]]]]}]]]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'get_nodes',0},[{'type',75,'fun',[{'type',75,'product',[]}|[{'type',75,'list',[{'type',75,'node',[]}]}]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'attach',1},[{'type',79,'bounded_fun',[{'type',79,'fun',[{'type',79,'product',[{'var',79,'Node'}]}|[{'type',79,'union',[{'atom',79,'already_attached'}|[{'atom',79,'attached'}]]}]]}|[[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Node'}|[{'type',80,'node',[]}]]]]}]]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'get_node',0},[{'type',87,'fun',[{'type',87,'product',[]}|[{'type',87,'node',[]}]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'pspawn',3},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'Mod'}|[{'var',91,'Fun'}|[{'var',91,'Args'}]]]}|[{'type',91,'pid',[]}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Mod'}|[{'type',92,'module',[]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Fun'}|[{'type',93,'atom',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Args'}|[{'type',94,'list',[{'type',94,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'pspawn_link',3},[{'type',98,'bounded_fun',[{'type',98,'fun',[{'type',98,'product',[{'var',98,'Mod'}|[{'var',98,'Fun'}|[{'var',98,'Args'}]]]}|[{'type',98,'pid',[]}]]}|[[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Mod'}|[{'type',99,'module',[]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Fun'}|[{'type',100,'atom',[]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Args'}|[{'type',101,'list',[{'type',101,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'stop',0},[{'type',120,'fun',[{'type',120,'product',[]}|[{'atom',120,'stopped'}]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'do_spawn',4},[{'type',174,'fun',[{'type',174,'product',[{'type',174,'pid',[]}|[{'type',174,'module',[]}|[{'type',174,'atom',[]}|[{'type',174,'list',[{'type',174,'term',[]}]}]]]]}|[{'type',174,'term',[]}]]}]}]]
'start'/1 =
    %% Line 58
    fun (_cor0) ->
	%% Line 59
	apply 'start'/2
	    (_cor0, [])
'start'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Args>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_X_> =
		  %% Line 66
		  ( call 'gen_server':'start'
			({'global','pool_master'}, 'pool', [], [])
		    -| ['result_not_wanted'] )
	      in  let <Hosts> =
		      %% Line 67
		      call 'net_adm':'host_file'
			  ()
		  in  let <Nodes> =
			  %% Line 68
			  apply 'start_nodes'/3
			      (Hosts, Name, Args)
		      in  do  %% Line 69
			      call 'lists':'foreach'
				  (( 'attach'/1
				     -| [{'id',{0,0,'-start/2-fun-0-'}}] ), Nodes)
			      %% Line 70
			      Nodes
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'start',2}}] )
	    -| ['compiler_generated'] )
	end
'get_nodes'/0 =
    %% Line 76
    fun () ->
	let <_cor0> =
	    %% Line 77
	    apply 'get_nodes_and_load'/0
		()
	in  %% Line 77
	    apply 'get_elements'/2
		(2, _cor0)
'attach'/1 =
    %% Line 81
    fun (_cor0) ->
	%% Line 82
	call 'gen_server':'call'
	    ({'global','pool_master'}, {'attach',_cor0})
'get_nodes_and_load'/0 =
    %% Line 84
    fun () ->
	%% Line 85
	call 'gen_server':'call'
	    ({'global','pool_master'}, 'get_nodes')
'get_node'/0 =
    %% Line 88
    fun () ->
	%% Line 89
	call 'gen_server':'call'
	    ({'global','pool_master'}, 'get_node')
'pspawn'/3 =
    %% Line 95
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 96
	    call 'erlang':'group_leader'
		()
	in  %% Line 96
	    call 'gen_server':'call'
		({'global','pool_master'}, {'spawn',_cor3,_cor2,_cor1,_cor0})
'pspawn_link'/3 =
    %% Line 102
    fun (_cor2,_cor1,_cor0) ->
	let <P> =
	    %% Line 103
	    apply 'pspawn'/3
		(_cor2, _cor1, _cor0)
	in  do  %% Line 104
		call 'erlang':'link'
		    (P)
		%% Line 105
		P
'start_nodes'/3 =
    %% Line 107
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor9,_cor10> when 'true' ->
	      []
	  %% Line 108
	  <[Host|Tail],Name,Args> when 'true' ->
	      %% Line 109
	      case call 'slave':'start'
		       (Host, Name, Args) of
		%% Line 110
		<{'error',{'already_running',Node}}> when 'true' ->
		    do  %% Line 111
			call 'io':'format'
			    ([67|[97|[110|[39|[116|[32|[115|[116|[97|[114|[116|[32|[110|[111|[100|[101|[32|[111|[110|[32|[104|[111|[115|[116|[32|[126|[119|[32|[100|[117|[101|[32|[116|[111|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Host|[{'already_running',Node}|[]]])
			let <_cor3> =
			    %% Line 112
			    apply 'start_nodes'/3
				(Tail, Name, Args)
			in  %% Line 112
			    [Node|_cor3]
		%% Line 113
		<{'error',R}> when 'true' ->
		    do  %% Line 114
			call 'io':'format'
			    ([67|[97|[110|[39|[116|[32|[115|[116|[97|[114|[116|[32|[110|[111|[100|[101|[32|[111|[110|[32|[104|[111|[115|[116|[32|[126|[119|[32|[100|[117|[101|[32|[116|[111|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Host|[R|[]]])
			%% Line 115
			apply 'start_nodes'/3
			    (Tail, Name, Args)
		%% Line 116
		<{'ok',Node}> when 'true' ->
		    let <_cor4> =
			%% Line 117
			apply 'start_nodes'/3
			    (Tail, Name, Args)
		    in  %% Line 117
			[Node|_cor4]
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'start_nodes',3}}] )
	    -| ['compiler_generated'] )
	end
'stop'/0 =
    %% Line 121
    fun () ->
	%% Line 122
	call 'gen_server':'call'
	    ({'global','pool_master'}, 'stop')
'get_elements'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Pos,[]> when 'true' ->
	      []
	  %% Line 125
	  <Pos,[E|T]> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'element'
		      (Pos, E)
	      in  let <_cor3> =
		      apply 'get_elements'/2
			  (Pos, T)
		  in  [_cor2|_cor3]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_elements',2}}] )
	    -| ['compiler_generated'] )
	end
'stop_em'/1 =
    %% Line 127
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'stopped'
	  %% Line 128
	  <[N|Tail]> when 'true' ->
	      do  %% Line 129
		  call 'rpc':'cast'
		      (N, 'erlang', 'halt', [])
		  %% Line 130
		  apply 'stop_em'/1
		      (Tail)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'stop_em',1}}] )
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 132
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 133
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  do  %% Line 134
		      call 'erlang':'spawn_link'
			  ('pool', 'statistic_collector', [])
		      let <_cor1> =
			  %% Line 135
			  call 'erlang':'node'
			      ()
		      in  %% Line 135
			  {'ok',[{0,_cor1}|[]]}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'get_nodes',_X_From,Nodes> when 'true' ->
	      %% Line 138
	      {'reply',Nodes,Nodes}
	  %% Line 139
	  <'get_node',_X_From,[{Load,N}|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 140
		  call 'erlang':'+'
		      (Load, 1)
	      in  let <_cor4> =
		      %% Line 140
		      call 'erlang':'++'
			  (Tail, [{_cor3,N}|[]])
		  in  %% Line 140
		      {'reply',N,_cor4}
	  %% Line 141
	  <{'attach',Node},_X_From,Nodes> when 'true' ->
	      %% Line 142
	      case call 'lists':'keymember'
		       (Node, 2, Nodes) of
		%% Line 143
		<'true'> when 'true' ->
		    %% Line 144
		    {'reply','already_attached',Nodes}
		%% Line 145
		<'false'> when 'true' ->
		    do  %% Line 146
			call 'erlang':'monitor_node'
			    (Node, 'true')
			do  %% Line 147
			    call 'erlang':'spawn_link'
				(Node, 'pool', 'statistic_collector', [])
			    let <_cor5> =
				%% Line 148
				call 'erlang':'++'
				    (Nodes, [{999999,Node}|[]])
			    in  %% Line 148
				{'reply','attached',_cor5}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 150
	  <{'spawn',Gl,M,F,A},_X_From,Nodes> when 'true' ->
	      %% Line 151
	      case Nodes of
		<[{Load,N}|Tail]> when 'true' ->
		    let <Pid> =
			%% Line 152
			call 'erlang':'spawn'
			    (N, 'pool', 'do_spawn', [Gl|[M|[F|[A|[]]]]])
		    in  let <_cor9> =
			    %% Line 153
			    call 'erlang':'+'
				(Load, 1)
			in  let <_cor10> =
				%% Line 153
				call 'erlang':'++'
				    (Tail, [{_cor9,N}|[]])
			    in  %% Line 153
				{'reply',Pid,_cor10}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 154
	  <'stop',_X_From,Nodes> when 'true' ->
	      %% Line 156
	      {'stop','normal','stopped',Nodes}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	%% Line 159
	{'noreply',_cor0}
'handle_info'/2 =
    %% Line 161
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Node,'load',Load},Nodes> when 'true' ->
	      let <Nodes2> =
		  %% Line 162
		  apply 'insert_node'/2
		      ({Load,Node}, Nodes)
	      in  %% Line 163
		  {'noreply',Nodes2}
	  %% Line 164
	  <{'nodedown',Node},Nodes> when 'true' ->
	      let <_cor3> =
		  %% Line 165
		  call 'lists':'keydelete'
		      (Node, 2, Nodes)
	      in  %% Line 165
		  {'noreply',_cor3}
	  %% Line 166
	  <_cor6,Nodes> when 'true' ->
	      %% Line 167
	      {'noreply',Nodes}
	end
'terminate'/2 =
    %% Line 169
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 170
	    call 'erlang':'node'
		()
	in  let <_cor2> =
		%% Line 170
		apply 'get_elements'/2
		    (2, _cor0)
	    in  let <N> =
		    %% Line 170
		    call 'lists':'delete'
			(_cor3, _cor2)
		in  do  %% Line 171
			apply 'stop_em'/1
			    (N)
			%% Line 172
			'ok'
'do_spawn'/4 =
    %% Line 175
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 176
	    call 'erlang':'self'
		()
	in  do  %% Line 176
		call 'erlang':'group_leader'
		    (_cor3, _cor4)
		%% Line 177
		call 'erlang':'apply'
		    (_cor2, _cor1, _cor0)
'insert_node'/2 =
    %% Line 179
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Load,Node},[{L,_cor6}|Tail]>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor6, Node)
		in  let <_cor8> =
			call 'erlang':'>'
			    (Load, L)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 181
	      apply 'pure_insert'/2
		  ({Load,Node}, Tail)
	  %% Line 182
	  <{Load,Node},[{L,N}|Tail]>
	      when call 'erlang':'=<'
		    (Load,
		     L) ->
	      let <T> =
		  %% Line 184
		  call 'lists':'keydelete'
		      (Node, 2, [{L,N}|Tail])
	      in  %% Line 185
		  [{Load,Node}|T]
	  %% Line 186
	  <Ln,[H|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 187
		  apply 'insert_node'/2
		      (Ln, T)
	      in  %% Line 187
		  [H|_cor3]
	  %% Line 188
	  <X,[]> when 'true' ->
	      do  %% Line 189
		  call 'error_logger':'error_msg'
		      ([80|[111|[111|[108|[95|[109|[97|[115|[116|[101|[114|[58|[32|[66|[97|[100|[32|[110|[111|[100|[101|[32|[108|[105|[115|[116|[32|[88|[61|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [X|[]])
		  %% Line 190
		  call 'erlang':'exit'
		      ('crash')
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'insert_node',2}}] )
	    -| ['compiler_generated'] )
	end
'pure_insert'/2 =
    %% Line 192
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Load,Node},[]> when 'true' ->
	      %% Line 193
	      [{Load,Node}|[]]
	  %% Line 194
	  <{Load,Node},[{L,N}|Tail]>
	      when call 'erlang':'<'
		    (Load,
		     L) ->
	      %% Line 195
	      [{Load,Node}|[{L,N}|Tail]]
	  %% Line 196
	  <L,[H|T]> when 'true' ->
	      let <_cor2> =
		  apply 'pure_insert'/2
		      (L, T)
	      in  [H|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'pure_insert',2}}] )
	    -| ['compiler_generated'] )
	end
'statistic_collector'/0 =
    %% Line 202
    fun () ->
	%% Line 203
	apply 'statistic_collector'/1
	    (5)
'statistic_collector'/1 =
    %% Line 205
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      call 'erlang':'exit'
		  ('normal')
	  %% Line 206
	  <I> when 'true' ->
	      do  %% Line 207
		  apply 'sleep'/1
		      (300)
		  %% Line 208
		  case call 'global':'whereis_name'
			   ('pool_master') of
		    %% Line 209
		    <'undefined'> when 'true' ->
			let <_cor1> =
			    %% Line 210
			    call 'erlang':'-'
				(I, 1)
			in  %% Line 210
			    apply 'statistic_collector'/1
				(_cor1)
		    %% Line 211
		    <M> when 'true' ->
			%% Line 212
			apply 'stat_loop'/2
			    (M, 999999)
		  end
	end
'stat_loop'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	do  %% Line 218
	    apply 'sleep'/1
		(2000)
	    %% Line 219
	    case call 'erlang':'statistics'
		     ('run_queue') of
	      %% Line 220
	      <_cor6>
		  when call 'erlang':'=:='
			(_cor6,
			 _cor0) ->
		  %% Line 221
		  apply 'stat_loop'/2
		      (_cor1, _cor0)
	      %% Line 222
	      <NewLoad> when 'true' ->
		  let <_cor2> =
		      %% Line 223
		      call 'erlang':'node'
			  ()
		  in  do  %% Line 223
			  call 'erlang':'!'
			      (_cor1, {_cor2,'load',NewLoad})
			  %% Line 224
			  apply 'stat_loop'/2
			      (_cor1, NewLoad)
	    end
'sleep'/1 =
    %% Line 227
    fun (_cor0) ->
	receive
	  
	after _cor0 ->
	  'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('pool')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('pool', _cor0)
end