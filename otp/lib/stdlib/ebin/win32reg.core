module 'win32reg' ['change_key'/2,
		   'change_key_create'/2,
		   'close'/1,
		   'current_key'/1,
		   'delete_key'/1,
		   'delete_value'/2,
		   'expand'/1,
		   'format_error'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'open'/1,
		   'set_value'/3,
		   'sub_keys'/1,
		   'value'/2,
		   'values'/1]
    attributes [%% Line 28
		'export_type' =
		    %% Line 28
		    [{'reg_handle',0}],
		%% Line 57
		'opaque' =
		    %% Line 57
		    [{'reg_handle',{'type',57,'tuple',[{'atom',57,'win32reg'}|[{'type',57,'port',[]}]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'name',{'type',58,'union',[{'type',58,'string',[]}|[{'atom',58,'default'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'value',{'type',59,'union',[{'type',59,'string',[]}|[{'type',59,'integer',[]}|[{'type',59,'binary',[]}]]]},[]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'open',1},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'OpenModeList'}]}|[{'var',63,'ReturnValue'}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'OpenModeList'}|[{'type',64,'list',[{'var',64,'OpenMode'}]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'OpenMode'}|[{'type',65,'union',[{'atom',65,'read'}|[{'atom',65,'write'}]]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'ReturnValue'}|[{'type',66,'union',[{'type',66,'tuple',[{'atom',66,'ok'}|[{'var',66,'RegHandle'}]]}|[{'type',66,'tuple',[{'atom',66,'error'}|[{'ann_type',66,[{'var',66,'ErrorId'}|[{'atom',66,'enotsup'}]]}]]}]]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'RegHandle'}|[{'type',67,'reg_handle',[]}]]]]}]]]]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'close',1},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'RegHandle'}]}|[{'atom',83,'ok'}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'RegHandle'}|[{'type',84,'reg_handle',[]}]]]]}]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'current_key',1},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'RegHandle'}]}|[{'var',91,'ReturnValue'}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'RegHandle'}|[{'type',92,'reg_handle',[]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'ReturnValue'}|[{'type',93,'tuple',[{'atom',93,'ok'}|[{'type',93,'string',[]}]]}]]]]}]]]]}]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'change_key',2},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'RegHandle'}|[{'var',105,'Key'}]]}|[{'var',105,'ReturnValue'}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'RegHandle'}|[{'type',106,'reg_handle',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Key'}|[{'type',107,'string',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'ReturnValue'}|[{'type',108,'union',[{'atom',108,'ok'}|[{'type',108,'tuple',[{'atom',108,'error'}|[{'ann_type',108,[{'var',108,'ErrorId'}|[{'type',108,'atom',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'change_key_create',2},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'RegHandle'}|[{'var',113,'Key'}]]}|[{'var',113,'ReturnValue'}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'RegHandle'}|[{'type',114,'reg_handle',[]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Key'}|[{'type',115,'string',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'ReturnValue'}|[{'type',116,'union',[{'atom',116,'ok'}|[{'type',116,'tuple',[{'atom',116,'error'}|[{'ann_type',116,[{'var',116,'ErrorId'}|[{'type',116,'atom',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'sub_keys',1},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'RegHandle'}]}|[{'var',130,'ReturnValue'}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'RegHandle'}|[{'type',131,'reg_handle',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'ReturnValue'}|[{'type',132,'union',[{'type',132,'tuple',[{'atom',132,'ok'}|[{'type',132,'list',[{'var',132,'SubKey'}]}]]}|[{'type',132,'tuple',[{'atom',132,'error'}|[{'ann_type',132,[{'var',132,'ErrorId'}|[{'type',132,'atom',[]}]]}]]}]]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'SubKey'}|[{'type',133,'string',[]}]]]]}]]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'delete_key',1},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'RegHandle'}]}|[{'var',140,'ReturnValue'}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'RegHandle'}|[{'type',141,'reg_handle',[]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'ReturnValue'}|[{'type',142,'union',[{'atom',142,'ok'}|[{'type',142,'tuple',[{'atom',142,'error'}|[{'ann_type',142,[{'var',142,'ErrorId'}|[{'type',142,'atom',[]}]]}]]}]]}]]]]}]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'set_value',3},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'RegHandle'}|[{'var',149,'Name'}|[{'var',149,'Value'}]]]}|[{'var',149,'ReturnValue'}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'RegHandle'}|[{'type',150,'reg_handle',[]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Name'}|[{'type',151,'name',[]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Value'}|[{'type',152,'value',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'ReturnValue'}|[{'type',153,'union',[{'atom',153,'ok'}|[{'type',153,'tuple',[{'atom',153,'error'}|[{'ann_type',153,[{'var',153,'ErrorId'}|[{'type',153,'atom',[]}]]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'value',2},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'RegHandle'}|[{'var',166,'Name'}]]}|[{'var',166,'ReturnValue'}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'RegHandle'}|[{'type',167,'reg_handle',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Name'}|[{'type',168,'name',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'ReturnValue'}|[{'type',169,'union',[{'type',169,'tuple',[{'atom',169,'ok'}|[{'ann_type',169,[{'var',169,'Value'}|[{'type',169,'value',[]}]]}]]}|[{'type',169,'tuple',[{'atom',169,'error'}|[{'ann_type',169,[{'var',169,'ErrorId'}|[{'type',169,'atom',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'values',1},[{'type',181,'bounded_fun',[{'type',181,'fun',[{'type',181,'product',[{'var',181,'RegHandle'}]}|[{'var',181,'ReturnValue'}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'RegHandle'}|[{'type',182,'reg_handle',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'ReturnValue'}|[{'type',183,'union',[{'type',183,'tuple',[{'atom',183,'ok'}|[{'type',183,'list',[{'var',183,'ValuePair'}]}]]}|[{'type',183,'tuple',[{'atom',183,'error'}|[{'ann_type',183,[{'var',183,'ErrorId'}|[{'type',183,'atom',[]}]]}]]}]]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'ValuePair'}|[{'type',184,'tuple',[{'ann_type',184,[{'var',184,'Name'}|[{'type',184,'name',[]}]]}|[{'ann_type',184,[{'var',184,'Value'}|[{'type',184,'value',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'delete_value',2},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'RegHandle'}|[{'var',191,'Name'}]]}|[{'var',191,'ReturnValue'}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'RegHandle'}|[{'type',192,'reg_handle',[]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Name'}|[{'type',193,'name',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'ReturnValue'}|[{'type',194,'union',[{'atom',194,'ok'}|[{'type',194,'tuple',[{'atom',194,'error'}|[{'ann_type',194,[{'var',194,'ErrorId'}|[{'type',194,'atom',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'expand',1},[{'type',206,'bounded_fun',[{'type',206,'fun',[{'type',206,'product',[{'var',206,'String'}]}|[{'var',206,'ExpandedString'}]]}|[[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'String'}|[{'type',207,'string',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'ExpandedString'}|[{'type',208,'string',[]}]]]]}]]]]}]}],
		%% Line 232
		'spec' =
		    %% Line 232
		    [{{'format_error',1},[{'type',232,'bounded_fun',[{'type',232,'fun',[{'type',232,'product',[{'var',232,'ErrorId'}]}|[{'var',232,'ErrorString'}]]}|[[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'ErrorId'}|[{'type',233,'atom',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'ErrorString'}|[{'type',234,'string',[]}]]]]}]]]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'collect_values',2},[{'type',241,'fun',[{'type',241,'product',[{'type',241,'port',[]}|[{'type',241,'list',[{'type',241,'tuple',[{'type',241,'name',[]}|[{'type',241,'value',[]}]]}]}]]}|[{'type',242,'union',[{'type',242,'tuple',[{'atom',242,'ok'}|[{'type',242,'list',[{'type',242,'tuple',[{'type',242,'name',[]}|[{'type',242,'value',[]}]]}]}]]}|[{'type',242,'tuple',[{'atom',242,'error'}|[{'ann_type',242,[{'var',242,'ErrorId'}|[{'type',242,'atom',[]}]]}]]}]]}]]}]}],
		%% Line 254
		'spec' =
		    %% Line 254
		    [{{'collect_keys',2},[{'type',254,'fun',[{'type',254,'product',[{'type',254,'port',[]}|[{'type',254,'string',[]}]]}|[{'type',254,'union',[{'type',254,'tuple',[{'atom',254,'ok'}|[{'type',254,'list',[{'type',254,'string',[]}]}]]}|[{'type',254,'tuple',[{'atom',254,'error'}|[{'ann_type',254,[{'var',254,'ErrorId'}|[{'type',254,'atom',[]}]]}]]}]]}]]}]}]]
'open'/1 =
    %% Line 69
    fun (_cor0) ->
	%% Line 70
	case call 'os':'type'
		 () of
	  %% Line 71
	  <{'win32',_cor6}> when 'true' ->
	      %% Line 72
	      case apply 'open_mode'/2
		       (_cor0, []) of
		%% Line 73
		<{'error',Reason}> when 'true' ->
		    %% Line 74
		    {'error',Reason}
		%% Line 75
		<ModeStr> when 'true' ->
		    let <_cor1> =
			%% Line 76
			call 'erlang':'++'
			    ([114|[101|[103|[105|[115|[116|[114|[121|[95|[95|[100|[114|[118|[95|[95|[32]]]]]]]]]]]]]]]], ModeStr)
		    in  let <P> =
			    %% Line 76
			    call 'erlang':'open_port'
				({'spawn',_cor1}, [])
			in  %% Line 77
			    {'ok',{'win32reg',P}}
	      end
	  %% Line 79
	  <_cor7> when 'true' ->
	      %% Line 80
	      {'error','enotsup'}
	end
'close'/1 =
    %% Line 86
    fun (_cor0) ->
	case _cor0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      do  %% Line 87
		  call 'erlang':'unlink'
		      (Reg)
		  do  %% Line 88
		      call 'erlang':'exit'
			  (Reg, 'die')
		      %% Line 89
		      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'close',1}}] )
	    -| ['compiler_generated'] )
	end
'current_key'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_cor2> =
		  %% Line 97
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 97
		      call 'erlang':'!'
			  (Reg, {_cor2,{'command',[0]}})
		      %% Line 98
		      case apply 'get_result'/1
			       (Reg) of
			<{'state',Hkey,Name}> when 'true' ->
			    let <Root> =
				%% Line 99
				apply 'hkey_to_string'/1
				    (Hkey)
			    in  let <_cor6> =
				    %% Line 100
				    case Name of
				      %% Line 101
				      <[]> when 'true' ->
					  Root
				      %% Line 102
				      <_cor8> when 'true' ->
					  call 'erlang':'++'
					      (Root, [92|Name])
				    end
				in  %% Line 100
				    {'ok',_cor6}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'current_key',1}}] )
	    -| ['compiler_generated'] )
	end
'change_key'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'win32reg',Reg},Key>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      %% Line 111
	      apply 'change_key'/3
		  (Reg, 1, Key)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'change_key',2}}] )
	    -| ['compiler_generated'] )
	end
'change_key_create'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'win32reg',Reg},Key>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      %% Line 119
	      apply 'change_key'/3
		  (Reg, 2, Key)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'change_key_create',2}}] )
	    -| ['compiler_generated'] )
	end
'change_key'/3 =
    %% Line 121
    fun (_cor2,_cor1,_cor0) ->
	%% Line 122
	case apply 'parse_key'/2
		 (_cor0, _cor2) of
	  %% Line 123
	  <{'ok',Hkey,Path}> when 'true' ->
	      let <_cor4> =
		  %% Line 124
		  call 'erlang':'self'
		      ()
	      in  let <_cor3> =
		      %% Line 124
		      apply 'i32'/1
			  (Hkey)
		  in  do  %% Line 124
			  call 'erlang':'!'
			      (_cor2, {_cor4,{'command',[_cor1|[_cor3|[Path|[0]]]]}})
			  %% Line 125
			  apply 'get_result'/1
			      (_cor2)
	  %% Line 126
	  <{'error',Reason}> when 'true' ->
	      %% Line 127
	      {'error',Reason}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'sub_keys'/1 =
    %% Line 135
    fun (_cor0) ->
	case _cor0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_cor2> =
		  %% Line 137
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 137
		      call 'erlang':'!'
			  (Reg, {_cor2,{'command',[3]}})
		      %% Line 138
		      apply 'collect_keys'/2
			  (Reg, [])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'sub_keys',1}}] )
	    -| ['compiler_generated'] )
	end
'delete_key'/1 =
    %% Line 144
    fun (_cor0) ->
	case _cor0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_cor2> =
		  %% Line 146
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 146
		      call 'erlang':'!'
			  (Reg, {_cor2,{'command',[7]}})
		      %% Line 147
		      apply 'get_result'/1
			  (Reg)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'delete_key',1}}] )
	    -| ['compiler_generated'] )
	end
'set_value'/3 =
    %% Line 155
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'win32reg',Reg},Name0,Value>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_cor4> =
		  %% Line 157
		  case Name0 of
		    %% Line 158
		    <'default'> when 'true' ->
			[]
		    %% Line 159
		    <_cor12> when 'true' ->
			Name0
		  end
	      in  %% Line 161
		  case apply 'term_to_value'/1
			   (Value) of
		    <{Type,V}> when 'true' ->
			let <Cmd> =
			    %% Line 162
			    [6|[Type|[_cor4|[0|[V|[]]]]]]
			in  let <_cor8> =
				%% Line 163
				call 'erlang':'self'
				    ()
			    in  do  %% Line 163
				    call 'erlang':'!'
					(Reg, {_cor8,{'command',Cmd}})
				    %% Line 164
				    apply 'get_result'/1
					(Reg)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'set_value',3}}] )
	    -| ['compiler_generated'] )
	end
'value'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'win32reg',Reg},Name>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <Cmd> =
		  %% Line 172
		  [4|[Name|[0]]]
	      in  let <_cor3> =
		      %% Line 173
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 173
			  call 'erlang':'!'
			      (Reg, {_cor3,{'command',Cmd}})
			  %% Line 174
			  case apply 'get_result'/1
				   (Reg) of
			    %% Line 175
			    <{'value',{_cor7,Value}}>
				when call 'erlang':'=:='
				      (_cor7,
				       Name) ->
				%% Line 176
				{'ok',Value}
			    %% Line 177
			    <{'error',Reason}> when 'true' ->
				%% Line 178
				{'error',Reason}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'value',2}}] )
	    -| ['compiler_generated'] )
	end
'values'/1 =
    %% Line 186
    fun (_cor0) ->
	case _cor0 of
	  <{'win32reg',Reg}>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_cor2> =
		  %% Line 188
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 188
		      call 'erlang':'!'
			  (Reg, {_cor2,{'command',[5]}})
		      %% Line 189
		      apply 'collect_values'/2
			  (Reg, [])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'values',1}}] )
	    -| ['compiler_generated'] )
	end
'delete_value'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'win32reg',Reg},Name0>
	      when call 'erlang':'is_port'
		    (Reg) ->
	      let <_cor3> =
		  %% Line 198
		  case Name0 of
		    %% Line 199
		    <'default'> when 'true' ->
			[]
		    %% Line 200
		    <_cor9> when 'true' ->
			Name0
		  end
	      in  let <Cmd> =
		      %% Line 202
		      [8|[_cor3|[0]]]
		  in  let <_cor6> =
			  %% Line 203
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 203
			      call 'erlang':'!'
				  (Reg, {_cor6,{'command',Cmd}})
			      %% Line 204
			      apply 'get_result'/1
				  (Reg)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'delete_value',2}}] )
	    -| ['compiler_generated'] )
	end
'expand'/1 =
    %% Line 210
    fun (_cor0) ->
	%% Line 211
	apply 'expand'/3
	    (_cor0, [], [])
'expand'/3 =
    %% Line 213
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[37|[37|Rest]],[],Result> when 'true' ->
	      %% Line 214
	      apply 'expand'/3
		  (Rest, [], [37|Result])
	  %% Line 215
	  <[37|[C|Rest]],[],Result> when 'true' ->
	      %% Line 216
	      apply 'expand'/3
		  (Rest, [C|[]], Result)
	  %% Line 217
	  <[C|Rest],[],Result> when 'true' ->
	      %% Line 218
	      apply 'expand'/3
		  (Rest, [], [C|Result])
	  %% Line 219
	  <[37|Rest],Env0,Result> when 'true' ->
	      let <Env> =
		  %% Line 220
		  call 'lists':'reverse'
		      (Env0)
	      in  %% Line 221
		  case call 'os':'getenv'
			   (Env) of
		    %% Line 222
		    <'false'> when 'true' ->
			%% Line 223
			apply 'expand'/3
			    (Rest, [], Result)
		    %% Line 224
		    <Value> when 'true' ->
			let <_cor4> =
			    %% Line 225
			    call 'lists':'reverse'
				(Value)
			in  let <_cor5> =
				%% Line 225
				call 'erlang':'++'
				    (_cor4, Result)
			    in  %% Line 225
				apply 'expand'/3
				    (Rest, [], _cor5)
		  end
	  %% Line 227
	  <[C|Rest],Env,Result> when 'true' ->
	      %% Line 228
	      apply 'expand'/3
		  (Rest, [C|Env], Result)
	  %% Line 229
	  <[],[],Result> when 'true' ->
	      %% Line 230
	      call 'lists':'reverse'
		  (Result)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'expand',3}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 236
    fun (_cor0) ->
	%% Line 237
	call 'erl_posix_msg':'message'
	    (_cor0)
'collect_values'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	%% Line 245
	case apply 'get_result'/1
		 (_cor1) of
	  %% Line 246
	  <'ok'> when 'true' ->
	      let <_cor2> =
		  %% Line 247
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 247
		  {'ok',_cor2}
	  %% Line 248
	  <{'value',ValueData}> when 'true' ->
	      %% Line 249
	      apply 'collect_values'/2
		  (_cor1, [ValueData|_cor0])
	  %% Line 250
	  <{'error',Reason}> when 'true' ->
	      %% Line 251
	      {'error',Reason}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'collect_keys'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	%% Line 257
	case apply 'get_result'/1
		 (_cor1) of
	  %% Line 258
	  <'ok'> when 'true' ->
	      let <_cor2> =
		  %% Line 259
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 259
		  {'ok',_cor2}
	  %% Line 260
	  <{'key',KeyData}> when 'true' ->
	      %% Line 261
	      apply 'collect_keys'/2
		  (_cor1, [KeyData|_cor0])
	  %% Line 262
	  <{'error',Reason}> when 'true' ->
	      %% Line 263
	      {'error',Reason}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'get_result'/1 =
    %% Line 266
    fun (_cor0) ->
	%% Line 267
	receive
	  %% Line 268
	  <{_cor2,{'data',Data}}>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor0) ->
	      %% Line 269
	      apply 'get_result1'/1
		  (Data)
	after 'infinity' ->
	  'true'
'get_result1'/1 =
    %% Line 272
    fun (_cor0) ->
	case _cor0 of
	  <[101|Reason]> when 'true' ->
	      let <_cor1> =
		  %% Line 273
		  call 'erlang':'list_to_atom'
		      (Reason)
	      in  %% Line 273
		  {'error',_cor1}
	  %% Line 274
	  <[111]> when 'true' ->
	      %% Line 275
	      'ok'
	  %% Line 276
	  <[107|Name]> when 'true' ->
	      %% Line 277
	      {'key',Name}
	  %% Line 278
	  <[118|Rest0]> when 'true' ->
	      %% Line 279
	      case apply 'i32_on_head'/1
		       (Rest0) of
		<{'ok',Type,Rest1}> when 'true' ->
		    %% Line 280
		    case apply 'get_cstring'/1
			     (Rest1) of
		      <{'ok',Name0,Value}> when 'true' ->
			  let <_cor5> =
			      %% Line 282
			      case Name0 of
				%% Line 283
				<[]> when 'true' ->
				    'default'
				%% Line 284
				<_cor10> when 'true' ->
				    Name0
			      end
			  in  let <_cor7> =
				  %% Line 286
				  apply 'encode_value'/2
				      (Type, Value)
			      in  %% Line 286
				  {'value',{_cor5,_cor7}}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 287
	  <[115|Rest0]> when 'true' ->
	      %% Line 288
	      case apply 'i32_on_head'/1
		       (Rest0) of
		<{'ok',Hkey,Name}> when 'true' ->
		    %% Line 289
		    {'state',Hkey,Name}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'get_result1',1}}] )
	    -| ['compiler_generated'] )
	end
'encode_value'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,Value> when 'true' ->
	      %% Line 292
	      Value
	  %% Line 293
	  <2,Value> when 'true' ->
	      %% Line 294
	      Value
	  %% Line 295
	  <4,Value> when 'true' ->
	      %% Line 296
	      apply 'i32'/1
		  (Value)
	  %% Line 297
	  <_cor4,Value> when 'true' ->
	      %% Line 298
	      call 'erlang':'list_to_binary'
		  (Value)
	end
'term_to_value'/1 =
    %% Line 300
    fun (_cor0) ->
	case _cor0 of
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 301
		  apply 'i32'/1
		      (4)
	      in  let <_cor1> =
		      %% Line 301
		      apply 'i32'/1
			  (Int)
		  in  %% Line 301
		      {_cor2,_cor1}
	  %% Line 302
	  <String>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 303
		  apply 'i32'/1
		      (1)
	      in  %% Line 303
		  {_cor3,[String|[0]]}
	  %% Line 304
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 305
		  apply 'i32'/1
		      (3)
	      in  %% Line 305
		  {_cor4,Bin}
	  %% Line 306
	  <_cor6> when 'true' ->
	      %% Line 307
	      call 'erlang':'exit'
		  ('badarg')
	end
'get_cstring'/1 =
    %% Line 309
    fun (_cor0) ->
	%% Line 310
	apply 'get_cstring'/2
	    (_cor0, [])
'get_cstring'/2 =
    %% Line 312
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[0|Rest],Result> when 'true' ->
	      let <_cor2> =
		  %% Line 313
		  call 'lists':'reverse'
		      (Result)
	      in  %% Line 313
		  {'ok',_cor2,Rest}
	  %% Line 314
	  <[C|Rest],Result> when 'true' ->
	      %% Line 315
	      apply 'get_cstring'/2
		  (Rest, [C|Result])
	  %% Line 316
	  <[],Result> when 'true' ->
	      let <_cor3> =
		  %% Line 317
		  call 'lists':'reverse'
		      (Result)
	      in  %% Line 317
		  {'ok',_cor3,[]}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_cstring',2}}] )
	    -| ['compiler_generated'] )
	end
'i32'/1 =
    %% Line 319
    fun (_cor0) ->
	case _cor0 of
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 320
		  call 'erlang':'bsr'
		      (Int, 24)
	      in  let <_cor2> =
		      %% Line 320
		      call 'erlang':'band'
			  (_cor1, 255)
		  in  let <_cor3> =
			  %% Line 321
			  call 'erlang':'bsr'
			      (Int, 16)
		      in  let <_cor4> =
			      %% Line 321
			      call 'erlang':'band'
				  (_cor3, 255)
			  in  let <_cor5> =
				  %% Line 322
				  call 'erlang':'bsr'
				      (Int, 8)
			      in  let <_cor6> =
				      %% Line 322
				      call 'erlang':'band'
					  (_cor5, 255)
				  in  let <_cor7> =
					  %% Line 323
					  call 'erlang':'band'
					      (Int, 255)
				      in  %% Line 320
					  [_cor2|%% Line 321
						 [_cor4|%% Line 322
							[_cor6|%% Line 323
							       [_cor7|[]]]]]
	  %% Line 324
	  <[X1|[X2|[X3|[X4|[]]]]]> when 'true' ->
	      let <_cor10> =
		  %% Line 325
		  call 'erlang':'bsl'
		      (X1, 24)
	      in  let <_cor9> =
		      %% Line 325
		      call 'erlang':'bsl'
			  (X2, 16)
		  in  let <_cor11> =
			  %% Line 325
			  call 'erlang':'bor'
			      (_cor10, _cor9)
		      in  let <_cor8> =
			      %% Line 325
			      call 'erlang':'bsl'
				  (X3, 8)
			  in  let <_cor12> =
				  %% Line 325
				  call 'erlang':'bor'
				      (_cor11, _cor8)
			      in  %% Line 325
				  call 'erlang':'bor'
				      (_cor12, X4)
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13})
		  -| [{'function_name',{'i32',1}}] )
	    -| ['compiler_generated'] )
	end
'i32_on_head'/1 =
    %% Line 327
    fun (_cor0) ->
	case _cor0 of
	  <[X1|[X2|[X3|[X4|Rest]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 328
		  call 'erlang':'bsl'
		      (X1, 24)
	      in  let <_cor2> =
		      %% Line 328
		      call 'erlang':'bsl'
			  (X2, 16)
		  in  let <_cor4> =
			  %% Line 328
			  call 'erlang':'bor'
			      (_cor3, _cor2)
		      in  let <_cor1> =
			      %% Line 328
			      call 'erlang':'bsl'
				  (X3, 8)
			  in  let <_cor5> =
				  %% Line 328
				  call 'erlang':'bor'
				      (_cor4, _cor1)
			      in  let <_cor6> =
				      %% Line 328
				      call 'erlang':'bor'
					  (_cor5, X4)
				  in  %% Line 328
				      {'ok',_cor6,Rest}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'i32_on_head',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_key'/2 =
    %% Line 330
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[92|Rest],_cor4> when 'true' ->
	      %% Line 331
	      apply 'parse_root'/2
		  (Rest, [])
	  %% Line 332
	  <Key,Reg> when 'true' ->
	      %% Line 333
	      apply 'parse_relative'/2
		  (Key, Reg)
	end
'parse_relative'/2 =
    %% Line 335
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 337
	    call 'erlang':'self'
		()
	in  do  %% Line 337
		call 'erlang':'!'
		    (_cor0, {_cor3,{'command',[0]}})
		%% Line 338
		case apply 'get_result'/1
			 (_cor0) of
		  <{'state',RootHandle,Name}> when 'true' ->
		      let <Original> =
			  %% Line 339
			  apply 'split_key'/1
			      (Name)
		      in  let <_cor6> =
			      %% Line 340
			      apply 'split_key'/1
				  (_cor1)
			  in  let <Relative> =
				  %% Line 340
				  call 'lists':'reverse'
				      (_cor6)
			      in  let <_fol12> =
				      %% Line 341
				      apply 'parse_relative1'/2
					  (Relative, Original)
				  in  %% Line 343
				      {'ok',RootHandle,_fol12}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'parse_relative1'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[46|[46]]|T1],[_cor4|T2]> when 'true' ->
	      %% Line 348
	      apply 'parse_relative1'/2
		  (T1, T2)
	  %% Line 349
	  <[Comp|Rest],Result> when 'true' ->
	      %% Line 350
	      apply 'parse_relative1'/2
		  (Rest, [Comp|Result])
	  %% Line 351
	  <[],Result> when 'true' ->
	      %% Line 352
	      apply 'reverse_and_join'/2
		  (Result, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'parse_relative1',2}}] )
	    -| ['compiler_generated'] )
	end
'reverse_and_join'/2 =
    %% Line 354
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Rest],[]> when 'true' ->
	      %% Line 355
	      apply 'reverse_and_join'/2
		  (Rest, [X|[]])
	  %% Line 356
	  <[X|Rest],Result> when 'true' ->
	      %% Line 357
	      apply 'reverse_and_join'/2
		  (Rest, [X|[[92]|Result]])
	  %% Line 358
	  <[],Result> when 'true' ->
	      %% Line 359
	      Result
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'reverse_and_join',2}}] )
	    -| ['compiler_generated'] )
	end
'split_key'/1 =
    %% Line 361
    fun (_cor0) ->
	%% Line 362
	apply 'split_key'/3
	    (_cor0, [], [])
'split_key'/3 =
    %% Line 364
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[92|Rest],Current,Result> when 'true' ->
	      let <_cor3> =
		  %% Line 365
		  call 'lists':'reverse'
		      (Current)
	      in  %% Line 365
		  apply 'split_key'/3
		      (Rest, [], [_cor3|Result])
	  %% Line 366
	  <[C|Rest],Current,Result> when 'true' ->
	      %% Line 367
	      apply 'split_key'/3
		  (Rest, [C|Current], Result)
	  %% Line 368
	  <[],[],Result> when 'true' ->
	      %% Line 369
	      Result
	  %% Line 370
	  <[],Current,Result> when 'true' ->
	      let <_cor4> =
		  %% Line 371
		  call 'lists':'reverse'
		      (Current)
	      in  %% Line 371
		  [_cor4|Result]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split_key',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_root'/2 =
    %% Line 373
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[92|Rest],Result> when 'true' ->
	      let <_cor3> =
		  %% Line 375
		  case call 'lists':'reverse'
			   (Result) of
		    %% Line 376
		    <[104|[107|[101|[121|[95|Root0]]]]]> when 'true' ->
			%% Line 377
			Root0
		    %% Line 378
		    <Root0> when 'true' ->
			%% Line 379
			Root0
		  end
	      in  let <_cor5> =
		      %% Line 381
		      call 'erlang':'list_to_atom'
			  (_cor3)
		  in  %% Line 381
		      case apply 'root_to_handle'/1
			       (_cor5) of
			%% Line 382
			<'false'> when 'true' ->
			    %% Line 383
			    {'error','enoent'}
			%% Line 384
			<Handle> when 'true' ->
			    %% Line 385
			    {'ok',Handle,Rest}
		      end
	  %% Line 387
	  <[C|Rest],Result> when 'true' ->
	      %% Line 388
	      apply 'parse_root'/2
		  (Rest, [C|Result])
	  %% Line 389
	  <[],Result> when 'true' ->
	      %% Line 390
	      apply 'parse_root'/2
		  ([92], Result)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'parse_root',2}}] )
	    -| ['compiler_generated'] )
	end
'root_to_handle'/1 =
    %% Line 392
    fun (_cor0) ->
	case _cor0 of
	  <'classes_root'> when 'true' ->
	      2147483648
	  %% Line 393
	  <'hkcr'> when 'true' ->
	      2147483648
	  %% Line 394
	  <'current_user'> when 'true' ->
	      2147483649
	  %% Line 395
	  <'hkcu'> when 'true' ->
	      2147483649
	  %% Line 396
	  <'local_machine'> when 'true' ->
	      2147483650
	  %% Line 397
	  <'hklm'> when 'true' ->
	      2147483650
	  %% Line 398
	  <'users'> when 'true' ->
	      2147483651
	  %% Line 399
	  <'hku'> when 'true' ->
	      2147483651
	  %% Line 400
	  <'current_config'> when 'true' ->
	      2147483653
	  %% Line 401
	  <'hkcc'> when 'true' ->
	      2147483653
	  %% Line 402
	  <'dyn_data'> when 'true' ->
	      2147483654
	  %% Line 403
	  <'hkdd'> when 'true' ->
	      2147483654
	  %% Line 404
	  <'performance_data'> when 'true' ->
	      2147483652
	  %% Line 405
	  <_cor2> when 'true' ->
	      'false'
	end
'hkey_to_string'/1 =
    %% Line 407
    fun (_cor0) ->
	case _cor0 of
	  <2147483648> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[99|[108|[97|[115|[115|[101|[115|[95|[114|[111|[111|[116]]]]]]]]]]]]]]]]]]
	  %% Line 408
	  <2147483649> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[99|[117|[114|[114|[101|[110|[116|[95|[117|[115|[101|[114]]]]]]]]]]]]]]]]]]
	  %% Line 409
	  <2147483650> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[108|[111|[99|[97|[108|[95|[109|[97|[99|[104|[105|[110|[101]]]]]]]]]]]]]]]]]]]
	  %% Line 410
	  <2147483651> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[117|[115|[101|[114|[115]]]]]]]]]]]
	  %% Line 411
	  <2147483652> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[112|[101|[114|[102|[111|[114|[109|[97|[110|[99|[101|[95|[100|[97|[116|[97]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 412
	  <2147483653> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[99|[117|[114|[114|[101|[110|[116|[95|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]]]]]]]]]
	  %% Line 413
	  <2147483654> when 'true' ->
	      [92|[104|[107|[101|[121|[95|[100|[121|[110|[95|[100|[97|[116|[97]]]]]]]]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'hkey_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'open_mode'/2 =
    %% Line 415
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['read'|Rest],Result> when 'true' ->
	      %% Line 416
	      apply 'open_mode'/2
		  (Rest, [114|Result])
	  %% Line 417
	  <['write'|Rest],Result> when 'true' ->
	      %% Line 418
	      apply 'open_mode'/2
		  (Rest, [119|Result])
	  %% Line 419
	  <[],Result> when 'true' ->
	      %% Line 420
	      Result
	  %% Line 421
	  <_cor4,_cor5> when 'true' ->
	      %% Line 422
	      {'error','einval'}
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('win32reg')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('win32reg', _cor0)
end