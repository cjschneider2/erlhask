module 'erl_eval' ['add_binding'/3,
		   'binding'/2,
		   'bindings'/1,
		   'check_command'/2,
		   'del_binding'/2,
		   'expr'/2,
		   'expr'/3,
		   'expr'/4,
		   'expr'/5,
		   'expr_list'/2,
		   'expr_list'/3,
		   'expr_list'/4,
		   'exprs'/2,
		   'exprs'/3,
		   'exprs'/4,
		   'fun_data'/1,
		   'is_constant_expr'/1,
		   'match_clause'/4,
		   'module_info'/0,
		   'module_info'/1,
		   'new_bindings'/0,
		   'partial_eval'/1]
    attributes [%% Line 40
		'export_type' =
		    %% Line 40
		    [{'binding_struct',0}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'expression',{'remote_type',42,[{'atom',42,'erl_parse'}|[{'atom',42,'abstract_expr'}|[[]]]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'expressions',{'type',43,'list',[{'remote_type',43,[{'atom',43,'erl_parse'}|[{'atom',43,'abstract_expr'}|[[]]]]}]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'expression_list',{'type',44,'list',[{'type',44,'expression',[]}]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'clauses',{'type',45,'list',[{'remote_type',45,[{'atom',45,'erl_parse'}|[{'atom',45,'abstract_clause'}|[[]]]]}]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'name',{'type',46,'term',[]},[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{'value',{'type',47,'term',[]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'bindings',{'type',48,'list',[{'type',48,'tuple',[{'type',48,'name',[]}|[{'type',48,'value',[]}]]}]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'binding_struct',{'remote_type',49,[{'atom',49,'orddict'}|[{'atom',49,'orddict'}|[[]]]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'lfun_value_handler',{'type',51,'fun',[{'type',51,'product',[{'ann_type',51,[{'var',51,'Name'}|[{'type',51,'atom',[]}]]}|[{'ann_type',52,[{'var',52,'Arguments'}|[{'type',52,'list',[{'type',52,'term',[]}]}]]}]]}|[{'ann_type',53,[{'var',53,'Value'}|[{'type',53,'value',[]}]]}]]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'lfun_eval_handler',{'type',54,'fun',[{'type',54,'product',[{'ann_type',54,[{'var',54,'Name'}|[{'type',54,'atom',[]}]]}|[{'ann_type',55,[{'var',55,'Arguments'}|[{'type',55,'expression_list',[]}]]}|[{'ann_type',56,[{'var',56,'Bindings'}|[{'type',56,'binding_struct',[]}]]}]]]}|[{'type',57,'tuple',[{'atom',57,'value'}|[{'ann_type',58,[{'var',58,'Value'}|[{'type',58,'value',[]}]]}|[{'ann_type',59,[{'var',59,'NewBindings'}|[{'type',59,'binding_struct',[]}]]}]]]}]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'local_function_handler',{'type',60,'union',[{'type',60,'tuple',[{'atom',60,'value'}|[{'type',60,'lfun_value_handler',[]}]]}|[{'type',61,'tuple',[{'atom',61,'eval'}|[{'type',61,'lfun_eval_handler',[]}]]}|[{'atom',62,'none'}]]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'func_spec',{'type',64,'union',[{'type',64,'tuple',[{'ann_type',64,[{'var',64,'Module'}|[{'type',64,'module',[]}]]}|[{'ann_type',64,[{'var',64,'Function'}|[{'type',64,'atom',[]}]]}]]}|[{'type',64,'function',[]}]]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'nlfun_handler',{'type',65,'fun',[{'type',65,'product',[{'ann_type',65,[{'var',65,'FuncSpec'}|[{'type',65,'func_spec',[]}]]}|[{'ann_type',66,[{'var',66,'Arguments'}|[{'type',66,'list',[{'type',66,'term',[]}]}]]}]]}|[{'type',67,'term',[]}]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'non_local_function_handler',{'type',68,'union',[{'type',68,'tuple',[{'atom',68,'value'}|[{'type',68,'nlfun_handler',[]}]]}|[{'atom',69,'none'}]]},[]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'exprs',2},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'Expressions'}|[{'var',82,'Bindings'}]]}|[{'type',82,'tuple',[{'atom',82,'value'}|[{'var',82,'Value'}|[{'var',82,'NewBindings'}]]]}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Expressions'}|[{'type',83,'expressions',[]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Bindings'}|[{'type',84,'binding_struct',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Value'}|[{'type',85,'value',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'NewBindings'}|[{'type',86,'binding_struct',[]}]]]]}]]]]]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'exprs',3},[{'type',95,'bounded_fun',[{'type',95,'fun',[{'type',95,'product',[{'var',95,'Expressions'}|[{'var',95,'Bindings'}|[{'var',95,'LocalFunctionHandler'}]]]}|[{'type',96,'tuple',[{'atom',96,'value'}|[{'var',96,'Value'}|[{'var',96,'NewBindings'}]]]}]]}|[[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'Expressions'}|[{'type',97,'expressions',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Bindings'}|[{'type',98,'binding_struct',[]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'LocalFunctionHandler'}|[{'type',99,'local_function_handler',[]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Value'}|[{'type',100,'value',[]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'NewBindings'}|[{'type',101,'binding_struct',[]}]]]]}]]]]]]]}]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'exprs',4},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'Expressions'}|[{'var',105,'Bindings'}|[{'var',105,'LocalFunctionHandler'}|[{'var',106,'NonLocalFunctionHandler'}]]]]}|[{'type',107,'tuple',[{'atom',107,'value'}|[{'var',107,'Value'}|[{'var',107,'NewBindings'}]]]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Expressions'}|[{'type',108,'expressions',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Bindings'}|[{'type',109,'binding_struct',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'LocalFunctionHandler'}|[{'type',110,'local_function_handler',[]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'NonLocalFunctionHandler'}|[{'type',111,'non_local_function_handler',[]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Value'}|[{'type',112,'value',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'NewBindings'}|[{'type',113,'binding_struct',[]}]]]]}]]]]]]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'expr',2},[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'Expression'}|[{'var',133,'Bindings'}]]}|[{'type',133,'tuple',[{'atom',133,'value'}|[{'var',133,'Value'}|[{'var',133,'NewBindings'}]]]}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Expression'}|[{'type',134,'expression',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Bindings'}|[{'type',135,'binding_struct',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Value'}|[{'type',136,'value',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'NewBindings'}|[{'type',137,'binding_struct',[]}]]]]}]]]]]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'expr',3},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'Expression'}|[{'var',146,'Bindings'}|[{'var',146,'LocalFunctionHandler'}]]]}|[{'type',147,'tuple',[{'atom',147,'value'}|[{'var',147,'Value'}|[{'var',147,'NewBindings'}]]]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Expression'}|[{'type',148,'expression',[]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Bindings'}|[{'type',149,'binding_struct',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'LocalFunctionHandler'}|[{'type',150,'local_function_handler',[]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Value'}|[{'type',151,'value',[]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'NewBindings'}|[{'type',152,'binding_struct',[]}]]]]}]]]]]]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'expr',4},[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'Expression'}|[{'var',156,'Bindings'}|[{'var',156,'LocalFunctionHandler'}|[{'var',157,'NonLocalFunctionHandler'}]]]]}|[{'type',158,'tuple',[{'atom',158,'value'}|[{'var',158,'Value'}|[{'var',158,'NewBindings'}]]]}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Expression'}|[{'type',159,'expression',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Bindings'}|[{'type',160,'binding_struct',[]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'LocalFunctionHandler'}|[{'type',161,'local_function_handler',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'NonLocalFunctionHandler'}|[{'type',162,'non_local_function_handler',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Value'}|[{'type',163,'value',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'NewBindings'}|[{'type',164,'binding_struct',[]}]]]]}]]]]]]]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'expr',5},[{'type',197,'bounded_fun',[{'type',197,'fun',[{'type',197,'product',[{'var',197,'Expression'}|[{'var',197,'Bindings'}|[{'var',197,'LocalFunctionHandler'}|[{'var',198,'NonLocalFunctionHandler'}|[{'var',198,'ReturnFormat'}]]]]]}|[{'type',199,'union',[{'type',199,'tuple',[{'atom',199,'value'}|[{'var',199,'Value'}|[{'var',199,'NewBindings'}]]]}|[{'var',199,'Value'}]]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Expression'}|[{'type',200,'expression',[]}]]]]}|[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'Bindings'}|[{'type',201,'binding_struct',[]}]]]]}|[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'LocalFunctionHandler'}|[{'type',202,'local_function_handler',[]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'NonLocalFunctionHandler'}|[{'type',203,'non_local_function_handler',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'ReturnFormat'}|[{'type',204,'union',[{'atom',204,'none'}|[{'atom',204,'value'}]]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Value'}|[{'type',205,'value',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'NewBindings'}|[{'type',206,'binding_struct',[]}]]]]}]]]]]]]]]}]}],
		%% Line 834
		'spec' =
		    %% Line 834
		    [{{'expr_list',2},[{'type',834,'bounded_fun',[{'type',834,'fun',[{'type',834,'product',[{'var',834,'ExpressionList'}|[{'var',834,'Bindings'}]]}|[{'type',834,'tuple',[{'var',834,'ValueList'}|[{'var',834,'NewBindings'}]]}]]}|[[{'type',835,'constraint',[{'atom',835,'is_subtype'}|[[{'var',835,'ExpressionList'}|[{'type',835,'expression_list',[]}]]]]}|[{'type',836,'constraint',[{'atom',836,'is_subtype'}|[[{'var',836,'Bindings'}|[{'type',836,'binding_struct',[]}]]]]}|[{'type',837,'constraint',[{'atom',837,'is_subtype'}|[[{'var',837,'ValueList'}|[{'type',837,'list',[{'type',837,'value',[]}]}]]]]}|[{'type',838,'constraint',[{'atom',838,'is_subtype'}|[[{'var',838,'NewBindings'}|[{'type',838,'binding_struct',[]}]]]]}]]]]]]}]}],
		%% Line 842
		'spec' =
		    %% Line 842
		    [{{'expr_list',3},[{'type',842,'bounded_fun',[{'type',842,'fun',[{'type',842,'product',[{'var',842,'ExpressionList'}|[{'var',842,'Bindings'}|[{'var',842,'LocalFunctionHandler'}]]]}|[{'type',843,'tuple',[{'var',843,'ValueList'}|[{'var',843,'NewBindings'}]]}]]}|[[{'type',844,'constraint',[{'atom',844,'is_subtype'}|[[{'var',844,'ExpressionList'}|[{'type',844,'expression_list',[]}]]]]}|[{'type',845,'constraint',[{'atom',845,'is_subtype'}|[[{'var',845,'Bindings'}|[{'type',845,'binding_struct',[]}]]]]}|[{'type',846,'constraint',[{'atom',846,'is_subtype'}|[[{'var',846,'LocalFunctionHandler'}|[{'type',846,'local_function_handler',[]}]]]]}|[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'ValueList'}|[{'type',847,'list',[{'type',847,'value',[]}]}]]]]}|[{'type',848,'constraint',[{'atom',848,'is_subtype'}|[[{'var',848,'NewBindings'}|[{'type',848,'binding_struct',[]}]]]]}]]]]]]]}]}],
		%% Line 852
		'spec' =
		    %% Line 852
		    [{{'expr_list',4},[{'type',852,'bounded_fun',[{'type',852,'fun',[{'type',852,'product',[{'var',852,'ExpressionList'}|[{'var',852,'Bindings'}|[{'var',852,'LocalFunctionHandler'}|[{'var',853,'NonLocalFunctionHandler'}]]]]}|[{'type',854,'tuple',[{'var',854,'ValueList'}|[{'var',854,'NewBindings'}]]}]]}|[[{'type',855,'constraint',[{'atom',855,'is_subtype'}|[[{'var',855,'ExpressionList'}|[{'type',855,'expression_list',[]}]]]]}|[{'type',856,'constraint',[{'atom',856,'is_subtype'}|[[{'var',856,'Bindings'}|[{'type',856,'binding_struct',[]}]]]]}|[{'type',857,'constraint',[{'atom',857,'is_subtype'}|[[{'var',857,'LocalFunctionHandler'}|[{'type',857,'local_function_handler',[]}]]]]}|[{'type',858,'constraint',[{'atom',858,'is_subtype'}|[[{'var',858,'NonLocalFunctionHandler'}|[{'type',858,'non_local_function_handler',[]}]]]]}|[{'type',859,'constraint',[{'atom',859,'is_subtype'}|[[{'var',859,'ValueList'}|[{'type',859,'list',[{'type',859,'value',[]}]}]]]]}|[{'type',860,'constraint',[{'atom',860,'is_subtype'}|[[{'var',860,'NewBindings'}|[{'type',860,'binding_struct',[]}]]]]}]]]]]]]]}]}],
		%% Line 957
		'spec' =
		    %% Line 957
		    [{{'match_clause',4},[{'type',957,'bounded_fun',[{'type',957,'fun',[{'type',957,'product',[{'var',957,'Clauses'}|[{'var',957,'ValueList'}|[{'var',957,'Bindings'}|[{'var',957,'LocalFunctionHandler'}]]]]}|[{'type',958,'union',[{'type',958,'tuple',[{'var',958,'Body'}|[{'var',958,'NewBindings'}]]}|[{'atom',958,'nomatch'}]]}]]}|[[{'type',959,'constraint',[{'atom',959,'is_subtype'}|[[{'var',959,'Clauses'}|[{'type',959,'clauses',[]}]]]]}|[{'type',960,'constraint',[{'atom',960,'is_subtype'}|[[{'var',960,'ValueList'}|[{'type',960,'list',[{'type',960,'value',[]}]}]]]]}|[{'type',961,'constraint',[{'atom',961,'is_subtype'}|[[{'var',961,'Bindings'}|[{'type',961,'binding_struct',[]}]]]]}|[{'type',962,'constraint',[{'atom',962,'is_subtype'}|[[{'var',962,'LocalFunctionHandler'}|[{'type',962,'local_function_handler',[]}]]]]}|[{'type',963,'constraint',[{'atom',963,'is_subtype'}|[[{'var',963,'Body'}|[{'type',963,'expression_list',[]}]]]]}|[{'type',964,'constraint',[{'atom',964,'is_subtype'}|[[{'var',964,'NewBindings'}|[{'type',964,'binding_struct',[]}]]]]}]]]]]]]]}]}],
		%% Line 1209
		'spec' =
		    %% Line 1209
		    [{{'new_bindings',0},[{'type',1209,'fun',[{'type',1209,'product',[]}|[{'type',1209,'binding_struct',[]}]]}]}],
		%% Line 1212
		'spec' =
		    %% Line 1212
		    [{{'bindings',1},[{'type',1212,'fun',[{'type',1212,'product',[{'ann_type',1212,[{'var',1212,'BindingStruct'}|[{'type',1212,'binding_struct',[]}]]}]}|[{'type',1212,'bindings',[]}]]}]}],
		%% Line 1215
		'spec' =
		    %% Line 1215
		    [{{'binding',2},[{'type',1215,'bounded_fun',[{'type',1215,'fun',[{'type',1215,'product',[{'var',1215,'Name'}|[{'var',1215,'BindingStruct'}]]}|[{'type',1215,'union',[{'type',1215,'tuple',[{'atom',1215,'value'}|[{'type',1215,'value',[]}]]}|[{'atom',1215,'unbound'}]]}]]}|[[{'type',1216,'constraint',[{'atom',1216,'is_subtype'}|[[{'var',1216,'Name'}|[{'type',1216,'name',[]}]]]]}|[{'type',1217,'constraint',[{'atom',1217,'is_subtype'}|[[{'var',1217,'BindingStruct'}|[{'type',1217,'binding_struct',[]}]]]]}]]]]}]}],
		%% Line 1224
		'spec' =
		    %% Line 1224
		    [{{'add_binding',3},[{'type',1224,'bounded_fun',[{'type',1224,'fun',[{'type',1224,'product',[{'var',1224,'Name'}|[{'var',1224,'Value'}|[{'var',1224,'BindingStruct'}]]]}|[{'type',1224,'binding_struct',[]}]]}|[[{'type',1225,'constraint',[{'atom',1225,'is_subtype'}|[[{'var',1225,'Name'}|[{'type',1225,'name',[]}]]]]}|[{'type',1226,'constraint',[{'atom',1226,'is_subtype'}|[[{'var',1226,'Value'}|[{'type',1226,'value',[]}]]]]}|[{'type',1227,'constraint',[{'atom',1227,'is_subtype'}|[[{'var',1227,'BindingStruct'}|[{'type',1227,'binding_struct',[]}]]]]}]]]]]}]}],
		%% Line 1230
		'spec' =
		    %% Line 1230
		    [{{'del_binding',2},[{'type',1230,'bounded_fun',[{'type',1230,'fun',[{'type',1230,'product',[{'var',1230,'Name'}|[{'var',1230,'BindingStruct'}]]}|[{'type',1230,'binding_struct',[]}]]}|[[{'type',1231,'constraint',[{'atom',1231,'is_subtype'}|[[{'var',1231,'Name'}|[{'type',1231,'name',[]}]]]]}|[{'type',1232,'constraint',[{'atom',1232,'is_subtype'}|[[{'var',1232,'BindingStruct'}|[{'type',1232,'binding_struct',[]}]]]]}]]]]}]}]]
'exprs'/2 =
    %% Line 87
    fun (_cor1,_cor0) ->
	%% Line 88
	case apply 'check_command'/2
		 (_cor1, _cor0) of
	  %% Line 89
	  <'ok'> when 'true' ->
	      %% Line 90
	      apply 'exprs'/5
		  (_cor1, _cor0, 'none', 'none', 'none')
	  %% Line 91
	  <{'error',{_X_Line,_X_Mod,Error}}> when 'true' ->
	      %% Line 92
	      call 'erlang':'raise'
		  ('error', Error, [{'erl_eval','exprs',2}])
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'exprs'/3 =
    %% Line 102
    fun (_cor2,_cor1,_cor0) ->
	%% Line 103
	apply 'exprs'/5
	    (_cor2, _cor1, _cor0, 'none', 'none')
'exprs'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 115
	apply 'exprs'/5
	    (_cor3, _cor2, _cor1, _cor0, 'none')
'exprs'/5 =
    %% Line 117
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E|[]],Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 118
	      apply 'expr'/5
		  (E, Bs0, Lf, Ef, RBs)
	  %% Line 119
	  <[E|Es],Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 121
	      case apply 'expr'/5
		       (E, Bs0, Lf, Ef, 'none') of
		<{'value',_X_V,Bs}> when 'true' ->
		    %% Line 122
		    apply 'exprs'/5
			(Es, Bs, Lf, Ef, RBs)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'exprs',5}}] )
	    -| ['compiler_generated'] )
	end
'expr'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	%% Line 139
	case apply 'check_command'/2
		 ([_cor1|[]], _cor0) of
	  %% Line 140
	  <'ok'> when 'true' ->
	      %% Line 141
	      apply 'expr'/5
		  (_cor1, _cor0, 'none', 'none', 'none')
	  %% Line 142
	  <{'error',{_X_Line,_X_Mod,Error}}> when 'true' ->
	      %% Line 143
	      call 'erlang':'raise'
		  ('error', Error, [{'erl_eval','expr',2}])
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'expr'/3 =
    %% Line 153
    fun (_cor2,_cor1,_cor0) ->
	%% Line 154
	apply 'expr'/5
	    (_cor2, _cor1, _cor0, 'none', 'none')
'expr'/4 =
    %% Line 165
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 166
	apply 'expr'/5
	    (_cor3, _cor2, _cor1, _cor0, 'none')
'check_command'/2 =
    %% Line 170
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 172
	    apply 'bindings'/1
		(_cor0)
	in  %% Line 172
	    case call 'erl_lint':'exprs_opt'
		     (_cor1, _cor3, ['bitlevel_binaries'|['binary_comprehension']]) of
	      %% Line 173
	      <{'ok',_X_Ws}> when 'true' ->
		  %% Line 174
		  'ok'
	      %% Line 175
	      <{'error',[{_X_File,[Error|_cor7]}|[]],_X_Ws}> when 'true' ->
		  %% Line 176
		  {'error',Error}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'fun_data'/1 =
    %% Line 182
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 183
	      case call 'erlang':'fun_info'
		       (F, 'module') of
		%% Line 184
		<{'module','erl_eval'}> when 'true' ->
		    %% Line 185
		    case call 'erlang':'fun_info'
			     (F, 'env') of
		      %% Line 186
		      <{'env',[{FBs,_X_FLf,_X_FEf,FCs}|[]]}> when 'true' ->
			  %% Line 187
			  {'fun_data',FBs,FCs}
		      %% Line 188
		      <{'env',[{FBs,_X_FLf,_X_FEf,FCs,FName}|[]]}> when 'true' ->
			  %% Line 189
			  {'named_fun_data',FBs,FName,FCs}
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		%% Line 191
		<_cor4> when 'true' ->
		    %% Line 192
		    'false'
	      end
	  %% Line 194
	  <_X_T> when 'true' ->
	      %% Line 195
	      'false'
	end
'expr'/5 =
    %% Line 207
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'var',_cor969,V},Bs,_X_Lf,_X_Ef,RBs> when 'true' ->
	      %% Line 208
	      case apply 'binding'/2
		       (V, Bs) of
		%% Line 209
		<{'value',Val}> when 'true' ->
		    %% Line 210
		    apply 'ret_expr'/3
			(Val, Bs, RBs)
		%% Line 211
		<'unbound'> when 'true' ->
		    let <_cor5> =
			%% Line 212
			apply 'stacktrace'/0
			    ()
		    in  %% Line 212
			call 'erlang':'raise'
			    ('error', {'unbound',V}, _cor5)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 214
	  <{'char',_cor970,C},Bs,_X_Lf,_X_Ef,RBs> when 'true' ->
	      %% Line 215
	      apply 'ret_expr'/3
		  (C, Bs, RBs)
	  %% Line 216
	  <{'integer',_cor971,I},Bs,_X_Lf,_X_Ef,RBs> when 'true' ->
	      %% Line 217
	      apply 'ret_expr'/3
		  (I, Bs, RBs)
	  %% Line 218
	  <{'float',_cor972,F},Bs,_X_Lf,_X_Ef,RBs> when 'true' ->
	      %% Line 219
	      apply 'ret_expr'/3
		  (F, Bs, RBs)
	  %% Line 220
	  <{'atom',_cor973,A},Bs,_X_Lf,_X_Ef,RBs> when 'true' ->
	      %% Line 221
	      apply 'ret_expr'/3
		  (A, Bs, RBs)
	  %% Line 222
	  <{'string',_cor974,S},Bs,_X_Lf,_X_Ef,RBs> when 'true' ->
	      %% Line 223
	      apply 'ret_expr'/3
		  (S, Bs, RBs)
	  %% Line 224
	  <{'nil',_cor975},Bs,_X_Lf,_X_Ef,RBs> when 'true' ->
	      %% Line 225
	      apply 'ret_expr'/3
		  ([], Bs, RBs)
	  %% Line 226
	  <{'cons',_cor976,H0,T0},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 227
	      case apply 'expr'/5
		       (H0, Bs0, Lf, Ef, 'none') of
		<{'value',H,Bs1}> when 'true' ->
		    %% Line 228
		    case apply 'expr'/5
			     (T0, Bs0, Lf, Ef, 'none') of
		      <{'value',T,Bs2}> when 'true' ->
			  let <_cor9> =
			      %% Line 229
			      apply 'merge_bindings'/2
				  (Bs1, Bs2)
			  in  %% Line 229
			      apply 'ret_expr'/3
				  ([H|T], _cor9, RBs)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 230
	  <{'lc',_cor977,E,Qs},Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 231
	      apply 'eval_lc'/6
		  (E, Qs, Bs, Lf, Ef, RBs)
	  %% Line 232
	  <{'bc',_cor978,E,Qs},Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 233
	      apply 'eval_bc'/6
		  (E, Qs, Bs, Lf, Ef, RBs)
	  %% Line 234
	  <{'tuple',_cor979,Es},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 235
	      case apply 'expr_list'/4
		       (Es, Bs0, Lf, Ef) of
		<{Vs,Bs}> when 'true' ->
		    let <_cor11> =
			%% Line 236
			call 'erlang':'list_to_tuple'
			    (Vs)
		    in  %% Line 236
			apply 'ret_expr'/3
			    (_cor11, Bs, RBs)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 237
	  <{'record_field',_cor980,_cor981,Name,_cor982},_X_Bs,_X_Lf,_X_Ef,_X_RBs> when 'true' ->
	      let <_cor12> =
		  %% Line 238
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 238
		  call 'erlang':'raise'
		      ('error', {'undef_record',Name}, _cor12)
	  %% Line 239
	  <{'record_index',_cor983,Name,_cor984},_X_Bs,_X_Lf,_X_Ef,_X_RBs> when 'true' ->
	      let <_cor13> =
		  %% Line 240
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 240
		  call 'erlang':'raise'
		      ('error', {'undef_record',Name}, _cor13)
	  %% Line 241
	  <{'record',_cor985,Name,_cor986},_X_Bs,_X_Lf,_X_Ef,_X_RBs> when 'true' ->
	      let <_cor14> =
		  %% Line 242
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 242
		  call 'erlang':'raise'
		      ('error', {'undef_record',Name}, _cor14)
	  %% Line 243
	  <{'record',_cor987,_cor988,Name,_cor989},_X_Bs,_X_Lf,_X_Ef,_X_RBs> when 'true' ->
	      let <_cor15> =
		  %% Line 244
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 244
		  call 'erlang':'raise'
		      ('error', {'undef_record',Name}, _cor15)
	  %% Line 247
	  <{'map',_cor990,Binding,Es},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 248
	      case apply 'expr'/5
		       (Binding, Bs0, Lf, Ef, 'none') of
		<{'value',Map0,Bs1}> when 'true' ->
		    %% Line 249
		    case Map0 of
		      %% Line 250
		      <~{}~> when 'true' ->
			  %% Line 251
			  case apply 'eval_map_fields'/4
				   (Es, Bs0, Lf, Ef) of
			    <{Vs,Bs2}> when 'true' ->
				let <_cor22> =
				    %% Line 252
				    ( fun (_cor19,_cor18) ->
					  case <_cor19,_cor18> of
					    <{'map_assoc',K,V},Mi> when 'true' ->
						%% Line 253
						call 'maps':'put'
						    (K, V, Mi)
					    %% Line 254
					    <{'map_exact',K,V},Mi> when 'true' ->
						%% Line 255
						call 'maps':'update'
						    (K, V, Mi)
					    ( <_cor21,_cor20> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor21,_cor20})
						    -| [{'function_name',{'-expr/5-fun-0-',2}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-expr/5-fun-0-'}}] )
				in  let <Map1> =
					%% Line 252
					call 'lists':'foldl'
					    (_cor22, %% Line 256
						     Map0, %% Line 256
							   Vs)
				    in  let <_cor24> =
					    %% Line 257
					    apply 'merge_bindings'/2
						(Bs2, Bs1)
					in  %% Line 257
					    apply 'ret_expr'/3
						(Map1, _cor24, RBs)
			    ( <_cor17> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor17})
			      -| ['compiler_generated'] )
			  end
		      %% Line 258
		      <_cor991> when 'true' ->
			  let <_cor25> =
			      %% Line 259
			      apply 'stacktrace'/0
				  ()
			  in  %% Line 259
			      call 'erlang':'raise'
				  ('error', {'badarg',Map0}, _cor25)
		    end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 261
	  <{'map',_cor992,Es},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 262
	      case apply 'eval_map_fields'/4
		       (Es, Bs0, Lf, Ef) of
		<{Vs,Bs}> when 'true' ->
		    let <_cor33> =
			%% Line 263
			( fun (_cor30,_cor29) ->
			      case <_cor30,_cor29> of
				%% Line 264
				<{'map_assoc',K,V},Mi> when 'true' ->
				    call 'maps':'put'
					(K, V, Mi)
				( <_cor32,_cor31> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor32,_cor31})
					-| [{'function_name',{'-expr/5-fun-1-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-expr/5-fun-1-'}}] )
		    in  let <_cor28> =
			    %% Line 265
			    call 'maps':'new'
				()
			in  let <_cor34> =
				%% Line 263
				call 'lists':'foldl'
				    (_cor33, _cor28, %% Line 265
						     Vs)
			    in  %% Line 263
				apply 'ret_expr'/3
				    (_cor34, %% Line 265
					     Bs, %% Line 265
						 RBs)
		( <_cor27> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor27})
		  -| ['compiler_generated'] )
	      end
	  %% Line 267
	  <{'block',_cor993,Es},Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 268
	      apply 'exprs'/5
		  (Es, Bs, Lf, Ef, RBs)
	  %% Line 269
	  <{'if',_cor994,Cs},Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 270
	      apply 'if_clauses'/5
		  (Cs, Bs, Lf, Ef, RBs)
	  %% Line 271
	  <{'case',_cor995,E,Cs},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 272
	      case apply 'expr'/5
		       (E, Bs0, Lf, Ef, 'none') of
		<{'value',Val,Bs}> when 'true' ->
		    %% Line 273
		    apply 'case_clauses'/6
			(Val, Cs, Bs, Lf, Ef, RBs)
		( <_cor35> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor35})
		  -| ['compiler_generated'] )
	      end
	  %% Line 274
	  <{'try',_cor996,B,Cases,Catches,AB},Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 275
	      apply 'try_clauses'/8
		  (B, Cases, Catches, AB, Bs, Lf, Ef, RBs)
	  %% Line 276
	  <{'receive',_cor997,Cs},Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 277
	      apply 'receive_clauses'/5
		  (Cs, Bs, Lf, Ef, RBs)
	  %% Line 278
	  <{'receive',_cor998,Cs,E,TB},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 279
	      case apply 'expr'/5
		       (E, Bs0, Lf, Ef, 'none') of
		<{'value',T,Bs}> when 'true' ->
		    %% Line 280
		    apply 'receive_clauses'/7
			(T, Cs, {TB,Bs}, Bs0, Lf, Ef, RBs)
		( <_cor36> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor36})
		  -| ['compiler_generated'] )
	      end
	  %% Line 281
	  <{'fun',_X_Line,{'function',Mod0,Name0,Arity0}},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 282
	      case apply 'expr_list'/4
		       ([Mod0|[Name0|[Arity0|[]]]], Bs0, Lf, Ef) of
		<{[Mod|[Name|[Arity|[]]]],Bs}> when 'true' ->
		    let <F> =
			%% Line 283
			call 'erlang':'make_fun'
			    (Mod, Name, Arity)
		    in  %% Line 284
			apply 'ret_expr'/3
			    (F, Bs, RBs)
		( <_cor37> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor37})
		  -| ['compiler_generated'] )
	      end
	  %% Line 285
	  <{'fun',_X_Line,{'function',Name,Arity}},_X_Bs0,_X_Lf,_X_Ef,_X_RBs> when 'true' ->
	      let <_cor39> =
		  %% Line 287
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 287
		  call 'erlang':'raise'
		      ('error', 'undef', [{'erl_eval',Name,Arity}|_cor39])
	  %% Line 288
	  <Ex = {'fun',Line,{'clauses',Cs}},Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 291
	      case apply 'hide_calls'/2
		       (Ex, 0) of
		<{Ex1,_cor999}> when 'true' ->
		    %% Line 292
		    case call 'erl_lint':'used_vars'
			     ([Ex1|[]], Bs) of
		      <{'ok',Used}> when 'true' ->
			  let <_cor46> =
			      %% Line 293
			      ( fun (_cor43,_cor42) ->
				    call 'lists':'member'
					(_cor43, Used)
				-| [{'id',{0,0,'-expr/5-fun-2-'}}] )
			  in  let <En> =
				  %% Line 293
				  call 'orddict':'filter'
				      (_cor46, Bs)
			      in  let <Info> =
				      %% Line 294
				      {En,Lf,Ef,Cs}
				  in  let <_cor49> =
					  %% Line 297
					  call 'erlang':'hd'
					      (Cs)
				      in  let <_cor50> =
					      %% Line 297
					      call 'erlang':'element'
						  (3, _cor49)
					  in  let <_cor473> =
						  %% Line 297
						  case call 'erlang':'length'
							   (_cor50) of
						    %% Line 298
						    <0> when 'true' ->
							( fun () ->
							      apply 'eval_fun'/2
								  ([], Info)
							  -| [{'id',{0,0,'-expr/5-fun-3-'}}] )
						    %% Line 299
						    <1> when 'true' ->
							( fun (_cor51) ->
							      apply 'eval_fun'/2
								  ([_cor51|[]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-4-'}}] )
						    %% Line 300
						    <2> when 'true' ->
							( fun (_cor54,_cor53) ->
							      apply 'eval_fun'/2
								  ([_cor54|[_cor53|[]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-5-'}}] )
						    %% Line 301
						    <3> when 'true' ->
							( fun (_cor59,_cor58,_cor57) ->
							      apply 'eval_fun'/2
								  ([_cor59|[_cor58|[_cor57|[]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-6-'}}] )
						    %% Line 302
						    <4> when 'true' ->
							( fun (_cor66,_cor65,_cor64,_cor63) ->
							      apply 'eval_fun'/2
								  ([_cor66|[_cor65|[_cor64|[_cor63|[]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-7-'}}] )
						    %% Line 303
						    <5> when 'true' ->
							( fun (_cor75,_cor74,_cor73,_cor72,_cor71) ->
							      apply 'eval_fun'/2
								  ([_cor75|[_cor74|[_cor73|[_cor72|[_cor71|[]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-8-'}}] )
						    %% Line 304
						    <6> when 'true' ->
							( fun (_cor86,_cor85,_cor84,_cor83,_cor82,_cor81) ->
							      apply 'eval_fun'/2
								  ([_cor86|[_cor85|[_cor84|[_cor83|[_cor82|[_cor81|[]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-9-'}}] )
						    %% Line 305
						    <7> when 'true' ->
							( fun (_cor99,_cor98,_cor97,_cor96,_cor95,_cor94,_cor93) ->
							      apply 'eval_fun'/2
								  ([_cor99|[_cor98|[_cor97|[_cor96|[_cor95|[_cor94|[_cor93|[]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-10-'}}] )
						    %% Line 306
						    <8> when 'true' ->
							( fun (_cor114,_cor113,_cor112,_cor111,_cor110,_cor109,_cor108,_cor107) ->
							      apply 'eval_fun'/2
								  ([_cor114|[_cor113|[_cor112|[_cor111|[_cor110|[_cor109|[_cor108|[_cor107|[]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-11-'}}] )
						    %% Line 307
						    <9> when 'true' ->
							( fun (_cor131,_cor130,_cor129,_cor128,_cor127,_cor126,_cor125,_cor124,_cor123) ->
							      apply 'eval_fun'/2
								  ([_cor131|[_cor130|[_cor129|[_cor128|[_cor127|[_cor126|[_cor125|[_cor124|[_cor123|[]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-12-'}}] )
						    %% Line 308
						    <10> when 'true' ->
							( fun (_cor150,_cor149,_cor148,_cor147,_cor146,_cor145,_cor144,_cor143,_cor142,_cor141) ->
							      %% Line 309
							      apply 'eval_fun'/2
								  ([_cor150|[_cor149|[_cor148|[_cor147|[_cor146|[_cor145|[_cor144|[_cor143|[_cor142|[_cor141|[]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-13-'}}] )
						    %% Line 310
						    <11> when 'true' ->
							( fun (_cor171,_cor170,_cor169,_cor168,_cor167,_cor166,_cor165,_cor164,_cor163,_cor162,_cor161) ->
							      %% Line 311
							      apply 'eval_fun'/2
								  ([_cor171|[_cor170|[_cor169|[_cor168|[_cor167|[_cor166|[_cor165|[_cor164|[_cor163|[_cor162|[_cor161|[]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-14-'}}] )
						    %% Line 312
						    <12> when 'true' ->
							( fun (_cor194,_cor193,_cor192,_cor191,_cor190,_cor189,_cor188,_cor187,_cor186,_cor185,_cor184,_cor183) ->
							      %% Line 313
							      apply 'eval_fun'/2
								  ([_cor194|[_cor193|[_cor192|[_cor191|[_cor190|[_cor189|[_cor188|[_cor187|[_cor186|[_cor185|[_cor184|[_cor183|[]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-15-'}}] )
						    %% Line 314
						    <13> when 'true' ->
							( fun (_cor219,_cor218,_cor217,_cor216,_cor215,_cor214,_cor213,_cor212,_cor211,_cor210,_cor209,_cor208,_cor207) ->
							      %% Line 315
							      apply 'eval_fun'/2
								  ([_cor219|[_cor218|[_cor217|[_cor216|[_cor215|[_cor214|[_cor213|[_cor212|[_cor211|[_cor210|[_cor209|[_cor208|[_cor207|[]]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-16-'}}] )
						    %% Line 316
						    <14> when 'true' ->
							( fun (_cor246,_cor245,_cor244,_cor243,_cor242,_cor241,_cor240,_cor239,_cor238,_cor237,_cor236,_cor235,_cor234,_cor233) ->
							      %% Line 317
							      apply 'eval_fun'/2
								  ([_cor246|[_cor245|[_cor244|[_cor243|[_cor242|[_cor241|[_cor240|[_cor239|[_cor238|[_cor237|[_cor236|[_cor235|[_cor234|[_cor233|[]]]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-17-'}}] )
						    %% Line 318
						    <15> when 'true' ->
							( fun (_cor275,_cor274,_cor273,_cor272,_cor271,_cor270,_cor269,_cor268,_cor267,_cor266,_cor265,_cor264,_cor263,_cor262,_cor261) ->
							      %% Line 319
							      apply 'eval_fun'/2
								  ([_cor275|[_cor274|[_cor273|[_cor272|[_cor271|[_cor270|[_cor269|[_cor268|[_cor267|[_cor266|[_cor265|[_cor264|[_cor263|[_cor262|[_cor261|[]]]]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-18-'}}] )
						    %% Line 320
						    <16> when 'true' ->
							( fun (_cor306,_cor305,_cor304,_cor303,_cor302,_cor301,_cor300,_cor299,_cor298,_cor297,_cor296,_cor295,_cor294,_cor293,_cor292,_cor291) ->
							      %% Line 321
							      apply 'eval_fun'/2
								  ([_cor306|[_cor305|[_cor304|[_cor303|[_cor302|[_cor301|[_cor300|[_cor299|[_cor298|[_cor297|[_cor296|[_cor295|[_cor294|[_cor293|[_cor292|[_cor291|[]]]]]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-19-'}}] )
						    %% Line 322
						    <17> when 'true' ->
							( fun (_cor339,_cor338,_cor337,_cor336,_cor335,_cor334,_cor333,_cor332,_cor331,_cor330,_cor329,_cor328,_cor327,_cor326,_cor325,_cor324,_cor323) ->
							      %% Line 323
							      apply 'eval_fun'/2
								  ([_cor339|[_cor338|[_cor337|[_cor336|[_cor335|[_cor334|[_cor333|[_cor332|[_cor331|[_cor330|[_cor329|[_cor328|[_cor327|[_cor326|[_cor325|[_cor324|[_cor323|[]]]]]]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-20-'}}] )
						    %% Line 324
						    <18> when 'true' ->
							( fun (_cor374,_cor373,_cor372,_cor371,_cor370,_cor369,_cor368,_cor367,_cor366,_cor365,_cor364,_cor363,_cor362,_cor361,_cor360,_cor359,_cor358,_cor357) ->
							      %% Line 325
							      apply 'eval_fun'/2
								  ([_cor374|[_cor373|[_cor372|[_cor371|[_cor370|[_cor369|[_cor368|[_cor367|[_cor366|[_cor365|[_cor364|[_cor363|[_cor362|[_cor361|[_cor360|[_cor359|[_cor358|[_cor357|[]]]]]]]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-21-'}}] )
						    %% Line 326
						    <19> when 'true' ->
							( fun (_cor411,_cor410,_cor409,_cor408,_cor407,_cor406,_cor405,_cor404,_cor403,_cor402,_cor401,_cor400,_cor399,_cor398,_cor397,_cor396,_cor395,_cor394,_cor393) ->
							      %% Line 327
							      apply 'eval_fun'/2
								  ([_cor411|[_cor410|[_cor409|[_cor408|[_cor407|[_cor406|[_cor405|[_cor404|[_cor403|[_cor402|[_cor401|[_cor400|[_cor399|[_cor398|[_cor397|[_cor396|[_cor395|[_cor394|[_cor393|[]]]]]]]]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-22-'}}] )
						    %% Line 328
						    <20> when 'true' ->
							( fun (_cor450,_cor449,_cor448,_cor447,_cor446,_cor445,_cor444,_cor443,_cor442,_cor441,_cor440,_cor439,_cor438,_cor437,_cor436,_cor435,_cor434,_cor433,_cor432,_cor431) ->
							      %% Line 329
							      apply 'eval_fun'/2
								  ([_cor450|[_cor449|[_cor448|[_cor447|[_cor446|[_cor445|[_cor444|[_cor443|[_cor442|[_cor441|[_cor440|[_cor439|[_cor438|[_cor437|[_cor436|[_cor435|[_cor434|[_cor433|[_cor432|[_cor431|[]]]]]]]]]]]]]]]]]]]]], Info)
							  -| [{'id',{0,0,'-expr/5-fun-23-'}}] )
						    %% Line 330
						    <_X_Other> when 'true' ->
							let <_cor471> =
							    %% Line 332
							    apply 'stacktrace'/0
								()
							in  %% Line 331
							    call 'erlang':'raise'
								('error', {'argument_limit',{'fun',Line,Cs}}, _cor471)
						  end
					      in  %% Line 334
						  apply 'ret_expr'/3
						      (_cor473, Bs, RBs)
		      ( <_cor41> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor41})
			-| ['compiler_generated'] )
		    end
		( <_cor40> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor40})
		  -| ['compiler_generated'] )
	      end
	  %% Line 335
	  <Ex = {'named_fun',Line,Name,Cs},Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 338
	      case apply 'hide_calls'/2
		       (Ex, 0) of
		<{Ex1,_cor1000}> when 'true' ->
		    %% Line 339
		    case call 'erl_lint':'used_vars'
			     ([Ex1|[]], Bs) of
		      <{'ok',Used}> when 'true' ->
			  let <_cor481> =
			      %% Line 340
			      ( fun (_cor478,_cor477) ->
				    call 'lists':'member'
					(_cor478, Used)
				-| [{'id',{0,0,'-expr/5-fun-24-'}}] )
			  in  let <En> =
				  %% Line 340
				  call 'orddict':'filter'
				      (_cor481, Bs)
			      in  let <Info> =
				      %% Line 341
				      {En,Lf,Ef,Cs,Name}
				  in  let <_cor484> =
					  %% Line 344
					  call 'erlang':'hd'
					      (Cs)
				      in  let <_cor485> =
					      %% Line 344
					      call 'erlang':'element'
						  (3, _cor484)
					  in  let <_cor908> =
						  %% Line 344
						  case call 'erlang':'length'
							   (_cor485) of
						    %% Line 345
						    <0> when 'true' ->
							letrec
							    'RF'/0 =
								( fun () ->
								      let <RF> = 'RF'/0
								      in  apply 'eval_named_fun'/3
									      ([], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/0
						    %% Line 346
						    <1> when 'true' ->
							letrec
							    'RF'/1 =
								( fun (_cor486) ->
								      let <RF> = 'RF'/1
								      in  apply 'eval_named_fun'/3
									      ([_cor486|[]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/1
						    %% Line 347
						    <2> when 'true' ->
							letrec
							    'RF'/2 =
								( fun (_cor489,_cor488) ->
								      let <RF> = 'RF'/2
								      in  apply 'eval_named_fun'/3
									      ([_cor489|[_cor488|[]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/2
						    %% Line 348
						    <3> when 'true' ->
							letrec
							    'RF'/3 =
								( fun (_cor494,_cor493,_cor492) ->
								      let <RF> = 'RF'/3
								      in  apply 'eval_named_fun'/3
									      ([_cor494|[_cor493|[_cor492|[]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/3
						    %% Line 349
						    <4> when 'true' ->
							letrec
							    'RF'/4 =
								( fun (_cor501,_cor500,_cor499,_cor498) ->
								      let <RF> = 'RF'/4
								      in  apply 'eval_named_fun'/3
									      ([_cor501|[_cor500|[_cor499|[_cor498|[]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/4
						    %% Line 350
						    <5> when 'true' ->
							letrec
							    'RF'/5 =
								( fun (_cor510,_cor509,_cor508,_cor507,_cor506) ->
								      let <RF> = 'RF'/5
								      in  apply 'eval_named_fun'/3
									      ([_cor510|[_cor509|[_cor508|[_cor507|[_cor506|[]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/5
						    %% Line 351
						    <6> when 'true' ->
							letrec
							    'RF'/6 =
								( fun (_cor521,_cor520,_cor519,_cor518,_cor517,_cor516) ->
								      let <RF> = 'RF'/6
								      in  apply 'eval_named_fun'/3
									      ([_cor521|[_cor520|[_cor519|[_cor518|[_cor517|[_cor516|[]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/6
						    %% Line 352
						    <7> when 'true' ->
							letrec
							    'RF'/7 =
								( fun (_cor534,_cor533,_cor532,_cor531,_cor530,_cor529,_cor528) ->
								      let <RF> = 'RF'/7
								      in  %% Line 353
									  apply 'eval_named_fun'/3
									      ([_cor534|[_cor533|[_cor532|[_cor531|[_cor530|[_cor529|[_cor528|[]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/7
						    %% Line 354
						    <8> when 'true' ->
							letrec
							    'RF'/8 =
								( fun (_cor549,_cor548,_cor547,_cor546,_cor545,_cor544,_cor543,_cor542) ->
								      let <RF> = 'RF'/8
								      in  %% Line 355
									  apply 'eval_named_fun'/3
									      ([_cor549|[_cor548|[_cor547|[_cor546|[_cor545|[_cor544|[_cor543|[_cor542|[]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/8
						    %% Line 356
						    <9> when 'true' ->
							letrec
							    'RF'/9 =
								( fun (_cor566,_cor565,_cor564,_cor563,_cor562,_cor561,_cor560,_cor559,_cor558) ->
								      let <RF> = 'RF'/9
								      in  %% Line 357
									  apply 'eval_named_fun'/3
									      ([_cor566|[_cor565|[_cor564|[_cor563|[_cor562|[_cor561|[_cor560|[_cor559|[_cor558|[]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/9
						    %% Line 358
						    <10> when 'true' ->
							letrec
							    'RF'/10 =
								( fun (_cor585,_cor584,_cor583,_cor582,_cor581,_cor580,_cor579,_cor578,_cor577,_cor576) ->
								      let <RF> = 'RF'/10
								      in  %% Line 359
									  apply 'eval_named_fun'/3
									      ([_cor585|[_cor584|[_cor583|[_cor582|[_cor581|[_cor580|[_cor579|[_cor578|[_cor577|[_cor576|[]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/10
						    %% Line 360
						    <11> when 'true' ->
							letrec
							    'RF'/11 =
								( fun (_cor606,_cor605,_cor604,_cor603,_cor602,_cor601,_cor600,_cor599,_cor598,_cor597,_cor596) ->
								      let <RF> = 'RF'/11
								      in  %% Line 361
									  apply 'eval_named_fun'/3
									      ([_cor606|[_cor605|[_cor604|[_cor603|[_cor602|[_cor601|[_cor600|[_cor599|[_cor598|[_cor597|[_cor596|[]]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/11
						    %% Line 362
						    <12> when 'true' ->
							letrec
							    'RF'/12 =
								( fun (_cor629,_cor628,_cor627,_cor626,_cor625,_cor624,_cor623,_cor622,_cor621,_cor620,_cor619,_cor618) ->
								      let <RF> = 'RF'/12
								      in  %% Line 363
									  apply 'eval_named_fun'/3
									      ([_cor629|[_cor628|[_cor627|[_cor626|[_cor625|[_cor624|[_cor623|[_cor622|[_cor621|[_cor620|[_cor619|[_cor618|[]]]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/12
						    %% Line 364
						    <13> when 'true' ->
							letrec
							    'RF'/13 =
								( fun (_cor654,_cor653,_cor652,_cor651,_cor650,_cor649,_cor648,_cor647,_cor646,_cor645,_cor644,_cor643,_cor642) ->
								      let <RF> = 'RF'/13
								      in  %% Line 365
									  apply 'eval_named_fun'/3
									      ([_cor654|[_cor653|[_cor652|[_cor651|[_cor650|[_cor649|[_cor648|[_cor647|[_cor646|[_cor645|[_cor644|[_cor643|[_cor642|[]]]]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/13
						    %% Line 366
						    <14> when 'true' ->
							letrec
							    'RF'/14 =
								( fun (_cor681,_cor680,_cor679,_cor678,_cor677,_cor676,_cor675,_cor674,_cor673,_cor672,_cor671,_cor670,_cor669,_cor668) ->
								      let <RF> = 'RF'/14
								      in  %% Line 367
									  apply 'eval_named_fun'/3
									      ([_cor681|[_cor680|[_cor679|[_cor678|[_cor677|[_cor676|[_cor675|[_cor674|[_cor673|[_cor672|[_cor671|[_cor670|[_cor669|[_cor668|[]]]]]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/14
						    %% Line 368
						    <15> when 'true' ->
							letrec
							    'RF'/15 =
								( fun (_cor710,_cor709,_cor708,_cor707,_cor706,_cor705,_cor704,_cor703,_cor702,_cor701,_cor700,_cor699,_cor698,_cor697,_cor696) ->
								      let <RF> = 'RF'/15
								      in  %% Line 369
									  apply 'eval_named_fun'/3
									      ([_cor710|[_cor709|[_cor708|[_cor707|[_cor706|[_cor705|[_cor704|[_cor703|[_cor702|[_cor701|[_cor700|[_cor699|[_cor698|[_cor697|[_cor696|[]]]]]]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/15
						    %% Line 370
						    <16> when 'true' ->
							letrec
							    'RF'/16 =
								( fun (_cor741,_cor740,_cor739,_cor738,_cor737,_cor736,_cor735,_cor734,_cor733,_cor732,_cor731,_cor730,_cor729,_cor728,_cor727,_cor726) ->
								      let <RF> = 'RF'/16
								      in  %% Line 371
									  apply 'eval_named_fun'/3
									      ([_cor741|[_cor740|[_cor739|[_cor738|[_cor737|[_cor736|[_cor735|[_cor734|[_cor733|[_cor732|[_cor731|[_cor730|[_cor729|[_cor728|[_cor727|[_cor726|[]]]]]]]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/16
						    %% Line 372
						    <17> when 'true' ->
							letrec
							    'RF'/17 =
								( fun (_cor774,_cor773,_cor772,_cor771,_cor770,_cor769,_cor768,_cor767,_cor766,_cor765,_cor764,_cor763,_cor762,_cor761,_cor760,_cor759,_cor758) ->
								      let <RF> = 'RF'/17
								      in  %% Line 373
									  apply 'eval_named_fun'/3
									      ([_cor774|[_cor773|[_cor772|[_cor771|[_cor770|[_cor769|[_cor768|[_cor767|[_cor766|[_cor765|[_cor764|[_cor763|[_cor762|[_cor761|[_cor760|[_cor759|[_cor758|[]]]]]]]]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/17
						    %% Line 374
						    <18> when 'true' ->
							letrec
							    'RF'/18 =
								( fun (_cor809,_cor808,_cor807,_cor806,_cor805,_cor804,_cor803,_cor802,_cor801,_cor800,_cor799,_cor798,_cor797,_cor796,_cor795,_cor794,_cor793,_cor792) ->
								      let <RF> = 'RF'/18
								      in  %% Line 375
									  apply 'eval_named_fun'/3
									      ([_cor809|[_cor808|[_cor807|[_cor806|[_cor805|[_cor804|[_cor803|[_cor802|[_cor801|[_cor800|[_cor799|[_cor798|[_cor797|[_cor796|[_cor795|[_cor794|[_cor793|[_cor792|[]]]]]]]]]]]]]]]]]]], RF, Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/18
						    %% Line 376
						    <19> when 'true' ->
							letrec
							    'RF'/19 =
								( fun (_cor846,_cor845,_cor844,_cor843,_cor842,_cor841,_cor840,_cor839,_cor838,_cor837,_cor836,_cor835,_cor834,_cor833,_cor832,_cor831,_cor830,_cor829,_cor828) ->
								      let <RF> = 'RF'/19
								      in  %% Line 377
									  apply 'eval_named_fun'/3
									      ([_cor846|[_cor845|[_cor844|[_cor843|[_cor842|[_cor841|[_cor840|[_cor839|[_cor838|[_cor837|[_cor836|[_cor835|[_cor834|[_cor833|[_cor832|[_cor831|[_cor830|[_cor829|[_cor828|[]]]]]]]]]]]]]]]]]]]], %% Line 378
																																		 RF, %% Line 378
																																		     Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/19
						    %% Line 379
						    <20> when 'true' ->
							letrec
							    'RF'/20 =
								( fun (_cor885,_cor884,_cor883,_cor882,_cor881,_cor880,_cor879,_cor878,_cor877,_cor876,_cor875,_cor874,_cor873,_cor872,_cor871,_cor870,_cor869,_cor868,_cor867,_cor866) ->
								      let <RF> = 'RF'/20
								      in  %% Line 380
									  apply 'eval_named_fun'/3
									      ([_cor885|[_cor884|[_cor883|[_cor882|[_cor881|[_cor880|[_cor879|[_cor878|[_cor877|[_cor876|[_cor875|[_cor874|[_cor873|[_cor872|[_cor871|[_cor870|[_cor869|[_cor868|[_cor867|[_cor866|[]]]]]]]]]]]]]]]]]]]]], %% Line 381
																																			   RF, %% Line 381
																																			       Info)
								  -| [{'id',{0,0,'RF'}}] )
							in  'RF'/20
						    %% Line 382
						    <_X_Other> when 'true' ->
							let <_cor906> =
							    %% Line 384
							    apply 'stacktrace'/0
								()
							in  %% Line 383
							    call 'erlang':'raise'
								('error', {'argument_limit',{'named_fun',Line,Name,Cs}}, _cor906)
						  end
					      in  %% Line 386
						  apply 'ret_expr'/3
						      (_cor908, Bs, RBs)
		      ( <_cor476> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor476})
			-| ['compiler_generated'] )
		    end
		( <_cor475> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor475})
		  -| ['compiler_generated'] )
	      end
	  %% Line 387
	  <{'call',_cor1001,{'remote',_cor1002,{'atom',_cor1003,'qlc'},{'atom',_cor1004,'q'}},[LC = {'lc',_cor1005,_X_E,_X_Qs}|As0]},%% Line 388
																     Bs0,%% Line 388
																	 Lf,%% Line 388
																	    Ef,%% Line 388
																	       RBs>
	      when %% Line 388
		try
		    let <_cor910> =
			call 'erlang':'length'
			    (As0)
		    in  call 'erlang':'=<'
			    (_cor910, 1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <MaxLine> =
		  %% Line 390
		  apply 'find_maxline'/1
		      (LC)
	      in  %% Line 391
		  case apply 'hide_calls'/2
			   (LC, MaxLine) of
		    <{LC1,D}> when 'true' ->
			%% Line 392
			case call 'qlc':'transform_from_evaluator'
				 (LC1, Bs0) of
			  %% Line 393
			  <{'ok',{'call',L,Remote,[QLC|[]]}}> when 'true' ->
			      let <QLC1> =
				  %% Line 394
				  apply 'unhide_calls'/3
				      (QLC, MaxLine, D)
			      in  %% Line 395
				  apply 'expr'/5
				      ({'call',L,Remote,[QLC1|As0]}, Bs0, Lf, Ef, RBs)
			  %% Line 396
			  <{'not_ok',Error}> when 'true' ->
			      %% Line 397
			      apply 'ret_expr'/3
				  (Error, Bs0, RBs)
			  ( <_cor914> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor914})
			    -| ['compiler_generated'] )
			end
		    ( <_cor912> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor912})
		      -| ['compiler_generated'] )
		  end
	  %% Line 399
	  <{'call',L1,{'remote',L2,{'record_field',_cor1006,{'atom',_cor1007,''},Mod = {'atom',_cor1008,'qlc'}},Func = %% Line 400
														       {'atom',_cor1009,'q'}},As = %% Line 401
																		   [{'lc',_cor1010,_X_E,_X_Qs}|As0]},%% Line 402
																						     Bs,%% Line 402
																							Lf,%% Line 402
																							   Ef,%% Line 402
																							      RBs>
	      when %% Line 402
		try
		    let <_cor915> =
			call 'erlang':'length'
			    (As0)
		    in  call 'erlang':'=<'
			    (_cor915, 1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 403
	      apply 'expr'/5
		  ({'call',L1,{'remote',L2,Mod,Func},As}, Bs, Lf, Ef, RBs)
	  %% Line 404
	  <{'call',_cor1011,{'remote',_cor1012,Mod,Func},As0},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 405
	      case apply 'expr'/5
		       (Mod, Bs0, Lf, Ef, 'none') of
		<{'value',M,Bs1}> when 'true' ->
		    %% Line 406
		    case apply 'expr'/5
			     (Func, Bs0, Lf, Ef, 'none') of
		      <{'value',F,Bs2}> when 'true' ->
			  let <_cor918> =
			      %% Line 407
			      apply 'merge_bindings'/2
				  (Bs1, Bs2)
			  in  %% Line 407
			      case apply 'expr_list'/4
				       (As0, _cor918, Lf, Ef) of
				<{As,Bs3}> when 'true' ->
				    let <_cor923> =
					%% Line 409
					( case <> of
					    ( <>
						  when call 'erlang':'is_atom'
							(M) ->
						  let <_cor921> =
						      call 'erlang':'length'
							  (As)
						  in  call 'erl_internal':'bif'
							  (M, F, _cor921)
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    in  %% Line 409
					case _cor923 of
					  %% Line 410
					  <'true'> when 'true' ->
					      %% Line 411
					      apply 'bif'/5
						  (F, As, Bs3, Ef, RBs)
					  %% Line 412
					  <'false'> when 'true' ->
					      %% Line 413
					      apply 'do_apply'/6
						  (M, F, As, Bs3, Ef, RBs)
					  ( <_cor924> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor924})
					    -| ['compiler_generated'] )
					end
				( <_cor919> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor919})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor917> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor917})
			-| ['compiler_generated'] )
		    end
		( <_cor916> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor916})
		  -| ['compiler_generated'] )
	      end
	  %% Line 415
	  <{'call',_cor1013,{'atom',_cor1014,Func},As0},Bs0,Lf,Ef,RBs> when 'true' ->
	      let <_cor925> =
		  %% Line 416
		  call 'erlang':'length'
		      (As0)
	      in  %% Line 416
		  case call 'erl_internal':'bif'
			   (Func, _cor925) of
		    %% Line 417
		    <'true'> when 'true' ->
			%% Line 418
			case apply 'expr_list'/4
				 (As0, Bs0, Lf, Ef) of
			  <{As,Bs}> when 'true' ->
			      %% Line 419
			      apply 'bif'/5
				  (Func, As, Bs, Ef, RBs)
			  ( <_cor926> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor926})
			    -| ['compiler_generated'] )
			end
		    %% Line 420
		    <'false'> when 'true' ->
			%% Line 421
			apply 'local_func'/5
			    (Func, As0, Bs0, Lf, RBs)
		    ( <_cor927> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor927})
		      -| ['compiler_generated'] )
		  end
	  %% Line 423
	  <{'call',_cor1015,Func0,As0},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 424
	      case apply 'expr'/5
		       (Func0, Bs0, Lf, Ef, 'none') of
		<{'value',Func,Bs1}> when 'true' ->
		    %% Line 425
		    case apply 'expr_list'/4
			     (As0, Bs1, Lf, Ef) of
		      <{As,Bs2}> when 'true' ->
			  %% Line 426
			  case Func of
			    %% Line 427
			    <{M,F}>
				when let <_cor930> =
				      call 'erlang':'is_atom'
					  (M)
				  in  let <_cor931> =
					  call 'erlang':'is_atom'
					      (F)
				      in  call 'erlang':'and'
					      (_cor930, _cor931) ->
				let <_cor932> =
				    %% Line 428
				    apply 'stacktrace'/0
					()
				in  %% Line 428
				    call 'erlang':'raise'
					('error', {'badfun',Func}, _cor932)
			    %% Line 429
			    <_cor1016> when 'true' ->
				%% Line 430
				apply 'do_apply'/5
				    (Func, As, Bs2, Ef, RBs)
			  end
		      ( <_cor929> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor929})
			-| ['compiler_generated'] )
		    end
		( <_cor928> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor928})
		  -| ['compiler_generated'] )
	      end
	  %% Line 432
	  <{'catch',_cor1017,Expr},Bs0,Lf,Ef,RBs> when 'true' ->
	      let <Ref> =
		  %% Line 433
		  call 'erlang':'make_ref'
		      ()
	      in  let <_cor936> =
		      catch
			  let <_cor935> =
			      %% Line 434
			      apply 'expr'/5
				  (Expr, Bs0, Lf, Ef, 'none')
			  in  %% Line 434
			      {Ref,_cor935}
		  in  %% Line 434
		      case _cor936 of
			%% Line 435
			<{_cor1018,{'value',V,Bs}}>
			    when call 'erlang':'=:='
				  (_cor1018,
				   Ref) ->
			    %% Line 436
			    apply 'ret_expr'/3
				(V, Bs, RBs)
			%% Line 437
			<Other> when 'true' ->
			    %% Line 438
			    apply 'ret_expr'/3
				(Other, Bs0, RBs)
		      end
	  %% Line 440
	  <{'match',_cor1019,Lhs,Rhs0},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 441
	      case apply 'expr'/5
		       (Rhs0, Bs0, Lf, Ef, 'none') of
		<{'value',Rhs,Bs1}> when 'true' ->
		    %% Line 442
		    case apply 'match'/3
			     (Lhs, Rhs, Bs1) of
		      %% Line 443
		      <{'match',Bs}> when 'true' ->
			  %% Line 444
			  apply 'ret_expr'/3
			      (Rhs, Bs, RBs)
		      %% Line 445
		      <'nomatch'> when 'true' ->
			  let <_cor939> =
			      %% Line 446
			      apply 'stacktrace'/0
				  ()
			  in  %% Line 446
			      call 'erlang':'raise'
				  ('error', {'badmatch',Rhs}, _cor939)
		      ( <_cor940> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor940})
			-| ['compiler_generated'] )
		    end
		( <_cor938> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor938})
		  -| ['compiler_generated'] )
	      end
	  %% Line 448
	  <{'op',_cor1020,Op,A0},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 449
	      case apply 'expr'/5
		       (A0, Bs0, Lf, Ef, 'none') of
		<{'value',A,Bs}> when 'true' ->
		    %% Line 450
		    apply 'eval_op'/5
			(Op, A, Bs, Ef, RBs)
		( <_cor941> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor941})
		  -| ['compiler_generated'] )
	      end
	  %% Line 451
	  <{'op',_cor1021,'andalso',L0,R0},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 452
	      case apply 'expr'/5
		       (L0, Bs0, Lf, Ef, 'none') of
		<{'value',L,Bs1}> when 'true' ->
		    let <_cor946> =
			%% Line 453
			case L of
			  %% Line 454
			  <'true'> when 'true' ->
			      %% Line 455
			      case apply 'expr'/5
				       (R0, Bs1, Lf, Ef, 'none') of
				<{'value',R,_cor1022}> when 'true' ->
				    %% Line 456
				    R
				( <_cor943> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor943})
				  -| ['compiler_generated'] )
			      end
			  %% Line 457
			  <'false'> when 'true' ->
			      'false'
			  %% Line 458
			  <_cor1023> when 'true' ->
			      let <_cor944> =
				  apply 'stacktrace'/0
				      ()
			      in  call 'erlang':'raise'
				      ('error', {'badarg',L}, _cor944)
			end
		    in  %% Line 460
			apply 'ret_expr'/3
			    (_cor946, Bs1, RBs)
		( <_cor942> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor942})
		  -| ['compiler_generated'] )
	      end
	  %% Line 461
	  <{'op',_cor1024,'orelse',L0,R0},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 462
	      case apply 'expr'/5
		       (L0, Bs0, Lf, Ef, 'none') of
		<{'value',L,Bs1}> when 'true' ->
		    let <_cor952> =
			%% Line 463
			case L of
			  %% Line 464
			  <'true'> when 'true' ->
			      'true'
			  %% Line 465
			  <'false'> when 'true' ->
			      %% Line 466
			      case apply 'expr'/5
				       (R0, Bs1, Lf, Ef, 'none') of
				<{'value',R,_cor1025}> when 'true' ->
				    %% Line 467
				    R
				( <_cor949> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor949})
				  -| ['compiler_generated'] )
			      end
			  %% Line 468
			  <_cor1026> when 'true' ->
			      let <_cor950> =
				  apply 'stacktrace'/0
				      ()
			      in  call 'erlang':'raise'
				      ('error', {'badarg',L}, _cor950)
			end
		    in  %% Line 470
			apply 'ret_expr'/3
			    (_cor952, Bs1, RBs)
		( <_cor948> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor948})
		  -| ['compiler_generated'] )
	      end
	  %% Line 471
	  <{'op',_cor1027,Op,L0,R0},Bs0,Lf,Ef,RBs> when 'true' ->
	      %% Line 472
	      case apply 'expr'/5
		       (L0, Bs0, Lf, Ef, 'none') of
		<{'value',L,Bs1}> when 'true' ->
		    %% Line 473
		    case apply 'expr'/5
			     (R0, Bs0, Lf, Ef, 'none') of
		      <{'value',R,Bs2}> when 'true' ->
			  let <_cor956> =
			      %% Line 474
			      apply 'merge_bindings'/2
				  (Bs1, Bs2)
			  in  %% Line 474
			      apply 'eval_op'/6
				  (Op, L, R, _cor956, Ef, RBs)
		      ( <_cor955> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor955})
			-| ['compiler_generated'] )
		    end
		( <_cor954> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor954})
		  -| ['compiler_generated'] )
	      end
	  %% Line 475
	  <{'bin',_cor1028,Fs},Bs0,Lf,Ef,RBs> when 'true' ->
	      let <EvalFun> =
		  %% Line 476
		  ( fun (_cor958,_cor957) ->
			apply 'expr'/5
			    (_cor958, _cor957, Lf, Ef, 'none')
		    -| [{'id',{0,0,'-expr/5-fun-46-'}}] )
	      in  %% Line 477
		  case call 'eval_bits':'expr_grp'
			   (Fs, Bs0, EvalFun) of
		    <{'value',V,Bs}> when 'true' ->
			%% Line 478
			apply 'ret_expr'/3
			    (V, Bs, RBs)
		    ( <_cor962> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor962})
		      -| ['compiler_generated'] )
		  end
	  %% Line 479
	  <{'remote',_cor1029,_cor1030,_cor1031},_X_Bs,_X_Lf,_X_Ef,_X_RBs> when 'true' ->
	      let <_cor963> =
		  %% Line 480
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 480
		  call 'erlang':'raise'
		      ('error', {'badexpr',':'}, _cor963)
	  %% Line 481
	  <{'value',_cor1032,Val},Bs,_X_Lf,_X_Ef,RBs> when 'true' ->
	      %% Line 482
	      apply 'ret_expr'/3
		  (Val, Bs, RBs)
	  ( <_cor968,_cor967,_cor966,_cor965,_cor964> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor968,_cor967,_cor966,_cor965,_cor964})
		  -| [{'function_name',{'expr',5}}] )
	    -| ['compiler_generated'] )
	end
'find_maxline'/1 =
    %% Line 484
    fun (_cor0) ->
	do  %% Line 485
	    call 'erlang':'put'
		('$erl_eval_max_line', 0)
	    let <F> =
		%% Line 486
		( fun (_cor5) ->
		      let <_cor3> =
			  %% Line 487
			  call 'erlang':'is_integer'
			      (_cor5)
		      in  let <_cor1> =
			      %% Line 487
			      call 'erlang':'get'
				  ('$erl_eval_max_line')
			  in  let <_cor2> =
				  %% Line 487
				  call 'erlang':'>'
				      (_cor5, _cor1)
			      in  %% Line 487
				  case call 'erlang':'and'
					   (_cor3, _cor2) of
				    %% Line 488
				    <'true'> when 'true' ->
					call 'erlang':'put'
					    ('$erl_eval_max_line', _cor5)
				    %% Line 489
				    <'false'> when 'true' ->
					'ok'
				  end
		  -| [{'id',{0,0,'-find_maxline/1-fun-0-'}}] )
	    in  let <_X_> =
		    %% Line 491
		    ( call 'erl_lint':'modify_line'
			  (_cor0, F)
		      -| ['result_not_wanted'] )
		in  %% Line 492
		    call 'erlang':'erase'
			('$erl_eval_max_line')
'hide_calls'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	let <LineId0> =
	    %% Line 495
	    call 'erlang':'+'
		(_cor0, 1)
	in  let <_cor3> =
		%% Line 496
		call 'dict':'new'
		    ()
	    in  %% Line 496
		case apply 'hide'/3
			 (_cor1, LineId0, _cor3) of
		  <{NLC,_cor7,D}> when 'true' ->
		      %% Line 497
		      {NLC,D}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'hide'/3 =
    %% Line 500
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'value',L,V},Id,D> when 'true' ->
	      let <_cor4> =
		  %% Line 501
		  call 'erlang':'+'
		      (Id, 1)
	      in  let <_cor3> =
		      %% Line 501
		      call 'dict':'store'
			  (Id, {'value',L,V}, D)
		  in  %% Line 501
		      {{'atom',Id,'ok'},_cor4,_cor3}
	  %% Line 502
	  <{'call',L,Atom = {'atom',_cor20,N},Args},Id0,D0> when 'true' ->
	      %% Line 503
	      case apply 'hide'/3
		       (Args, Id0, D0) of
		<{NArgs,Id,D}> when 'true' ->
		    let <_cor6> =
			%% Line 504
			call 'erlang':'length'
			    (Args)
		    in  let <_cor8> =
			    %% Line 504
			    case call 'erl_internal':'bif'
				     (N, _cor6) of
			      %% Line 505
			      <'true'> when 'true' ->
				  %% Line 506
				  {'call',L,Atom,NArgs}
			      %% Line 507
			      <'false'> when 'true' ->
				  %% Line 508
				  {'call',Id,{'remote',L,{'atom',L,'m'},{'atom',L,'f'}},NArgs}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
			in  let <_cor11> =
				%% Line 510
				call 'erlang':'+'
				    (Id, 1)
			    in  let <_cor10> =
				    %% Line 510
				    call 'dict':'store'
					(Id, {'call',Atom}, D)
				in  %% Line 510
				    {_cor8,_cor11,_cor10}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 511
	  <T0,Id0,D0>
	      when call 'erlang':'is_tuple'
		    (T0) ->
	      let <_cor12> =
		  %% Line 512
		  call 'erlang':'tuple_to_list'
		      (T0)
	      in  %% Line 512
		  case apply 'hide'/3
			   (_cor12, Id0, D0) of
		    <{L,Id,D}> when 'true' ->
			let <_cor14> =
			    %% Line 513
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 513
			    {_cor14,Id,D}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 514
	  <[E0|Es0],Id0,D0> when 'true' ->
	      %% Line 515
	      case apply 'hide'/3
		       (E0, Id0, D0) of
		<{E,Id1,D1}> when 'true' ->
		    %% Line 516
		    case apply 'hide'/3
			     (Es0, Id1, D1) of
		      <{Es,Id,D}> when 'true' ->
			  %% Line 517
			  {[E|Es],Id,D}
		      ( <_cor16> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor16})
			-| ['compiler_generated'] )
		    end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 518
	  <E,Id,D> when 'true' ->
	      %% Line 519
	      {E,Id,D}
	end
'unhide_calls'/3 =
    %% Line 521
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'atom',Id,'ok'},MaxLine,D>
	      when call 'erlang':'>'
		    (Id,
		     MaxLine) ->
	      %% Line 522
	      call 'dict':'fetch'
		  (Id, D)
	  %% Line 523
	  <{'call',Id,{'remote',L,_X_M,_X_F},Args},MaxLine,D>
	      when call 'erlang':'>'
		    (Id,
		     MaxLine) ->
	      %% Line 524
	      case call 'dict':'fetch'
		       (Id, D) of
		<{'call',Atom}> when 'true' ->
		    let <_cor4> =
			%% Line 525
			apply 'unhide_calls'/3
			    (Args, MaxLine, D)
		    in  %% Line 525
			{'call',L,Atom,_cor4}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 526
	  <T,MaxLine,D>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor5> =
		  %% Line 527
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor6> =
		      %% Line 527
		      apply 'unhide_calls'/3
			  (_cor5, MaxLine, D)
		  in  %% Line 527
		      call 'erlang':'list_to_tuple'
			  (_cor6)
	  %% Line 528
	  <[E|Es],MaxLine,D> when 'true' ->
	      let <_cor7> =
		  %% Line 529
		  apply 'unhide_calls'/3
		      (E, MaxLine, D)
	      in  let <_cor8> =
		      %% Line 529
		      apply 'unhide_calls'/3
			  (Es, MaxLine, D)
		  in  %% Line 529
		      [_cor7|_cor8]
	  %% Line 530
	  <E,_X_MaxLine,_X_D> when 'true' ->
	      %% Line 531
	      E
	end
'local_func'/5 =
    %% Line 538
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Func,As0,Bs0,{'value',F},'value'> when 'true' ->
	      %% Line 539
	      case apply 'expr_list'/3
		       (As0, Bs0, {'value',F}) of
		<{As1,_X_Bs1}> when 'true' ->
		    %% Line 541
		    apply F
			(Func, As1)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 542
	  <Func,As0,Bs0,{'value',F},RBs> when 'true' ->
	      %% Line 543
	      case apply 'expr_list'/3
		       (As0, Bs0, {'value',F}) of
		<{As1,Bs1}> when 'true' ->
		    let <_cor7> =
			%% Line 544
			apply F
			    (Func, As1)
		    in  %% Line 544
			apply 'ret_expr'/3
			    (_cor7, Bs1, RBs)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 545
	  <Func,As0,Bs0,{'value',F,Eas},RBs> when 'true' ->
	      let <Fun> =
		  %% Line 546
		  ( fun (_cor9,_cor8) ->
			call 'erlang':'apply'
			    (F, [_cor9|[_cor8|Eas]])
		    -| [{'id',{0,0,'-local_func/5-fun-0-'}}] )
	      in  %% Line 547
		  apply 'local_func'/5
		      (Func, As0, Bs0, {'value',Fun}, RBs)
	  %% Line 548
	  <Func,As,Bs,{'eval',F},RBs> when 'true' ->
	      let <_cor13> =
		  %% Line 549
		  apply F
		      (Func, As, Bs)
	      in  %% Line 549
		  apply 'local_func2'/2
		      (_cor13, RBs)
	  %% Line 550
	  <Func,As,Bs,{'eval',F,Eas},RBs> when 'true' ->
	      let <_cor14> =
		  %% Line 551
		  call 'erlang':'apply'
		      (F, [Func|[As|[Bs|Eas]]])
	      in  %% Line 551
		  apply 'local_func2'/2
		      (_cor14, RBs)
	  %% Line 553
	  <Func,As0,Bs0,{M,F},RBs> when 'true' ->
	      %% Line 554
	      case apply 'expr_list'/3
		       (As0, Bs0, {M,F}) of
		<{As1,Bs1}> when 'true' ->
		    let <_cor16> =
			%% Line 555
			call M:F
			    (Func, As1)
		    in  %% Line 555
			apply 'ret_expr'/3
			    (_cor16, Bs1, RBs)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 556
	  <Func,As,_X_Bs,{M,F,Eas},RBs> when 'true' ->
	      let <_cor17> =
		  %% Line 557
		  call 'erlang':'apply'
		      (M, F, [Func|[As|Eas]])
	      in  %% Line 557
		  apply 'local_func2'/2
		      (_cor17, RBs)
	  %% Line 559
	  <Func,As0,_X_Bs0,'none',_X_RBs> when 'true' ->
	      let <_cor18> =
		  %% Line 560
		  call 'erlang':'length'
		      (As0)
	      in  let <_cor19> =
		      %% Line 560
		      apply 'stacktrace'/0
			  ()
		  in  %% Line 560
		      call 'erlang':'raise'
			  ('error', 'undef', [{'erl_eval',Func,_cor18}|_cor19])
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'local_func',5}}] )
	    -| ['compiler_generated'] )
	end
'local_func2'/2 =
    %% Line 562
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'value',V,Bs},RBs> when 'true' ->
	      %% Line 563
	      apply 'ret_expr'/3
		  (V, Bs, RBs)
	  %% Line 564
	  <{'eval',F,As,Bs},RBs> when 'true' ->
	      %% Line 567
	      apply 'do_apply'/5
		  (F, As, Bs, 'none', RBs)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'local_func2',2}}] )
	    -| ['compiler_generated'] )
	end
'bif'/5 =
    %% Line 573
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'apply',['erlang'|['apply'|[As|[]]]],Bs,Ef,RBs> when 'true' ->
	      %% Line 574
	      apply 'bif'/5
		  ('apply', As, Bs, Ef, RBs)
	  %% Line 575
	  <'apply',[M|[F|[As|[]]]],Bs,Ef,RBs> when 'true' ->
	      %% Line 576
	      apply 'do_apply'/6
		  (M, F, As, Bs, Ef, RBs)
	  %% Line 577
	  <'apply',[F|[As|[]]],Bs,Ef,RBs> when 'true' ->
	      %% Line 578
	      apply 'do_apply'/5
		  (F, As, Bs, Ef, RBs)
	  %% Line 579
	  <Name,As,Bs,Ef,RBs> when 'true' ->
	      %% Line 580
	      apply 'do_apply'/6
		  ('erlang', Name, As, Bs, Ef, RBs)
	end
'do_apply'/5 =
    %% Line 587
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Func = {M,F},As,Bs0,Ef,RBs>
	      when %% Line 588
		try
		    let <_cor5> =
			call 'erlang':'tuple_size'
			    (M)
		    in  let <_cor6> =
			    call 'erlang':'>='
				(_cor5, 1)
			in  let <_cor7> =
				call 'erlang':'element'
				    (1, M)
			    in  let <_cor8> =
				    call 'erlang':'is_atom'
					(_cor7)
				in  let <_cor9> =
					call 'erlang':'is_atom'
					    (F)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor8, _cor9)
					in  call 'erlang':'and'
						(_cor6, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 589
	      case Ef of
		%% Line 590
		<'none'>
		    when call 'erlang':'=:='
			  (RBs,
			   'value') ->
		    %% Line 592
		    call 'erlang':'apply'
			(M, F, As)
		%% Line 593
		<'none'> when 'true' ->
		    let <_cor11> =
			%% Line 594
			call 'erlang':'apply'
			    (M, F, As)
		    in  %% Line 594
			apply 'ret_expr'/3
			    (_cor11, Bs0, RBs)
		%% Line 595
		<{'value',Fun}>
		    when call 'erlang':'=:='
			  (RBs,
			   'value') ->
		    %% Line 596
		    apply Fun
			(Func, As)
		%% Line 597
		<{'value',Fun}> when 'true' ->
		    let <_cor12> =
			%% Line 598
			apply Fun
			    (Func, As)
		    in  %% Line 598
			apply 'ret_expr'/3
			    (_cor12, Bs0, RBs)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 600
	  <Func,As,Bs0,Ef,RBs> when 'true' ->
	      let <_cor17> =
		  %% Line 601
		  case <> of
		    %% Line 602
		    <>
			when call 'erlang':'is_function'
			      (Func) ->
			let <_cor15> =
			    %% Line 603
			    call 'erlang':'fun_info'
				(Func, 'module')
			in  let <_cor14> =
				%% Line 604
				call 'erlang':'fun_info'
				    (Func, 'env')
			    in  %% Line 603
				case <_cor15,_cor14> of
				  %% Line 605
				  <{'module','erl_eval'},{'env',Env1}>
				      when call 'erlang':'=/='
					    (Env1,
					     []) ->
				      %% Line 606
				      {'env',Env1}
				  %% Line 607
				  <_fol452,_fol453> when 'true' ->
				      %% Line 608
				      'no_env'
				end
		    %% Line 610
		    <> when 'true' ->
			%% Line 611
			'no_env'
		  end
	      in  %% Line 613
		  case <_cor17,Ef> of
		    %% Line 614
		    <{'env',[{FBs,FLf,FEf,FCs}|[]]},_cor40> when 'true' ->
			let <_cor19> =
			    %% Line 619
			    case <> of
			      %% Line 620
			      <>
				  when call 'erlang':'=:='
					(RBs,
					 'none') ->
				  Bs0
			      %% Line 621
			      <> when 'true' ->
				  RBs
			    end
			in  let <_cor22> =
				%% Line 623
				call 'erlang':'fun_info'
				    (Func, 'arity')
			    in  let <_cor21> =
				    %% Line 623
				    call 'erlang':'length'
					(As)
				in  %% Line 623
				    case <_cor22,_cor21> of
				      %% Line 624
				      <{'arity',Arity},_cor41>
					  when call 'erlang':'=:='
						(_cor41,
						 Arity) ->
					  %% Line 625
					  apply 'eval_fun'/6
					      (FCs, As, FBs, FLf, FEf, _cor19)
				      %% Line 626
				      <_fol458,_fol459> when 'true' ->
					  let <_cor23> =
					      %% Line 627
					      apply 'stacktrace'/0
						  ()
					  in  %% Line 627
					      call 'erlang':'raise'
						  ('error', {'badarity',{Func,As}}, _cor23)
				    end
		    %% Line 629
		    <{'env',[{FBs,FLf,FEf,FCs,FName}|[]]},_cor43> when 'true' ->
			let <_cor25> =
			    %% Line 630
			    case <> of
			      %% Line 631
			      <>
				  when call 'erlang':'=:='
					(RBs,
					 'none') ->
				  Bs0
			      %% Line 632
			      <> when 'true' ->
				  RBs
			    end
			in  let <_cor28> =
				%% Line 634
				call 'erlang':'fun_info'
				    (Func, 'arity')
			    in  let <_cor27> =
				    %% Line 634
				    call 'erlang':'length'
					(As)
				in  %% Line 634
				    case <_cor28,_cor27> of
				      %% Line 635
				      <{'arity',Arity},_cor44>
					  when call 'erlang':'=:='
						(_cor44,
						 Arity) ->
					  %% Line 636
					  apply 'eval_named_fun'/8
					      (FCs, As, FBs, FLf, FEf, FName, Func, _cor25)
				      %% Line 637
				      <_fol462,_fol463> when 'true' ->
					  let <_cor29> =
					      %% Line 638
					      apply 'stacktrace'/0
						  ()
					  in  %% Line 638
					      call 'erlang':'raise'
						  ('error', {'badarity',{Func,As}}, _cor29)
				    end
		    %% Line 640
		    <'no_env','none'>
			when call 'erlang':'=:='
			      (RBs,
			       'value') ->
			%% Line 642
			call 'erlang':'apply'
			    (Func, As)
		    %% Line 643
		    <'no_env','none'> when 'true' ->
			let <_cor31> =
			    %% Line 644
			    call 'erlang':'apply'
				(Func, As)
			in  %% Line 644
			    apply 'ret_expr'/3
				(_cor31, Bs0, RBs)
		    %% Line 645
		    <'no_env',{'value',F}>
			when call 'erlang':'=:='
			      (RBs,
			       'value') ->
			%% Line 646
			apply F
			    (Func, As)
		    %% Line 647
		    <'no_env',{'value',F}> when 'true' ->
			let <_cor32> =
			    %% Line 648
			    apply F
				(Func, As)
			in  %% Line 648
			    apply 'ret_expr'/3
				(_cor32, Bs0, RBs)
		    ( <_fol456,_fol457> when 'true' ->
			  let <_cor33> = {_fol456,_fol457}
			  in  primop 'match_fail'
				  ({'case_clause',_cor33})
		      -| ['compiler_generated'] )
		  end
	end
'do_apply'/6 =
    %% Line 651
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 652
	case _cor1 of
	  %% Line 653
	  <'none'>
	      when call 'erlang':'=:='
		    (_cor0,
		     'value') ->
	      %% Line 655
	      call 'erlang':'apply'
		  (_cor5, _cor4, _cor3)
	  %% Line 656
	  <'none'> when 'true' ->
	      let <_cor6> =
		  %% Line 657
		  call 'erlang':'apply'
		      (_cor5, _cor4, _cor3)
	      in  %% Line 657
		  apply 'ret_expr'/3
		      (_cor6, _cor2, _cor0)
	  %% Line 658
	  <{'value',F}>
	      when call 'erlang':'=:='
		    (_cor0,
		     'value') ->
	      %% Line 659
	      apply F
		  ({_cor5,_cor4}, _cor3)
	  %% Line 660
	  <{'value',F}> when 'true' ->
	      let <_cor7> =
		  %% Line 661
		  apply F
		      ({_cor5,_cor4}, _cor3)
	      in  %% Line 661
		  apply 'ret_expr'/3
		      (_cor7, _cor2, _cor0)
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'eval_lc'/6 =
    %% Line 668
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 669
	    apply 'eval_lc1'/6
		(_cor5, _cor4, _cor3, _cor2, _cor1, [])
	in  let <_cor7> =
		%% Line 669
		call 'lists':'reverse'
		    (_cor6)
	    in  %% Line 669
		apply 'ret_expr'/3
		    (_cor7, _cor3, _cor0)
'eval_lc1'/6 =
    %% Line 671
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E,[{'generate',_cor28,P,L0}|Qs],Bs0,Lf,Ef,Acc0> when 'true' ->
	      %% Line 672
	      case apply 'expr'/5
		       (L0, Bs0, Lf, Ef, 'none') of
		<{'value',L1,_X_Bs1}> when 'true' ->
		    let <CompFun> =
			%% Line 673
			( fun (_cor8,_cor7) ->
			      apply 'eval_lc1'/6
				  (E, Qs, _cor8, Lf, Ef, _cor7)
			  -| [{'id',{0,0,'-eval_lc1/6-fun-0-'}}] )
		    in  %% Line 674
			apply 'eval_generate'/7
			    (L1, P, Bs0, Lf, Ef, CompFun, Acc0)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 675
	  <E,[{'b_generate',_cor29,P,L0}|Qs],Bs0,Lf,Ef,Acc0> when 'true' ->
	      %% Line 676
	      case apply 'expr'/5
		       (L0, Bs0, Lf, Ef, 'none') of
		<{'value',Bin,_X_Bs1}> when 'true' ->
		    let <CompFun> =
			%% Line 677
			( fun (_cor14,_cor13) ->
			      apply 'eval_lc1'/6
				  (E, Qs, _cor14, Lf, Ef, _cor13)
			  -| [{'id',{0,0,'-eval_lc1/6-fun-1-'}}] )
		    in  %% Line 678
			apply 'eval_b_generate'/7
			    (Bin, P, Bs0, Lf, Ef, CompFun, Acc0)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 679
	  <E,[F|Qs],Bs0,Lf,Ef,Acc> when 'true' ->
	      let <CompFun> =
		  %% Line 680
		  ( fun (_cor18) ->
			apply 'eval_lc1'/6
			    (E, Qs, _cor18, Lf, Ef, Acc)
		    -| [{'id',{0,0,'-eval_lc1/6-fun-2-'}}] )
	      in  %% Line 681
		  apply 'eval_filter'/6
		      (F, Bs0, Lf, Ef, CompFun, Acc)
	  %% Line 682
	  <E,[],Bs,Lf,Ef,Acc> when 'true' ->
	      %% Line 683
	      case apply 'expr'/5
		       (E, Bs, Lf, Ef, 'none') of
		<{'value',V,_cor30}> when 'true' ->
		    %% Line 684
		    [V|Acc]
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor21})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'eval_lc1',6}}] )
	    -| ['compiler_generated'] )
	end
'eval_bc'/6 =
    %% Line 690
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 691
	    apply 'eval_bc1'/6
		(_cor5, _cor4, _cor3, _cor2, _cor1, #{}#)
	in  %% Line 691
	    apply 'ret_expr'/3
		(_cor6, _cor3, _cor0)
'eval_bc1'/6 =
    %% Line 693
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E,[{'b_generate',_cor28,P,L0}|Qs],Bs0,Lf,Ef,Acc0> when 'true' ->
	      %% Line 694
	      case apply 'expr'/5
		       (L0, Bs0, Lf, Ef, 'none') of
		<{'value',Bin,_X_Bs1}> when 'true' ->
		    let <CompFun> =
			%% Line 695
			( fun (_cor8,_cor7) ->
			      apply 'eval_bc1'/6
				  (E, Qs, _cor8, Lf, Ef, _cor7)
			  -| [{'id',{0,0,'-eval_bc1/6-fun-0-'}}] )
		    in  %% Line 696
			apply 'eval_b_generate'/7
			    (Bin, P, Bs0, Lf, Ef, CompFun, Acc0)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 697
	  <E,[{'generate',_cor29,P,L0}|Qs],Bs0,Lf,Ef,Acc0> when 'true' ->
	      %% Line 698
	      case apply 'expr'/5
		       (L0, Bs0, Lf, Ef, 'none') of
		<{'value',List,_X_Bs1}> when 'true' ->
		    let <CompFun> =
			%% Line 699
			( fun (_cor14,_cor13) ->
			      apply 'eval_bc1'/6
				  (E, Qs, _cor14, Lf, Ef, _cor13)
			  -| [{'id',{0,0,'-eval_bc1/6-fun-1-'}}] )
		    in  %% Line 700
			apply 'eval_generate'/7
			    (List, P, Bs0, Lf, Ef, CompFun, Acc0)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 701
	  <E,[F|Qs],Bs0,Lf,Ef,Acc> when 'true' ->
	      let <CompFun> =
		  %% Line 702
		  ( fun (_cor18) ->
			apply 'eval_bc1'/6
			    (E, Qs, _cor18, Lf, Ef, Acc)
		    -| [{'id',{0,0,'-eval_bc1/6-fun-2-'}}] )
	      in  %% Line 703
		  apply 'eval_filter'/6
		      (F, Bs0, Lf, Ef, CompFun, Acc)
	  %% Line 704
	  <E,[],Bs,Lf,Ef,Acc> when 'true' ->
	      %% Line 705
	      case apply 'expr'/5
		       (E, Bs, Lf, Ef, 'none') of
		<{'value',V,_cor30}> when 'true' ->
		    %% Line 706
		    #{#<Acc>('all',1,'binary',['unsigned'|['big']]),
		      #<V>('all',1,'binary',['unsigned'|['big']])}#
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor21})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'eval_bc1',6}}] )
	    -| ['compiler_generated'] )
	end
'eval_generate'/7 =
    %% Line 708
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[V|Rest],P,Bs0,Lf,Ef,CompFun,Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 709
		  apply 'new_bindings'/0
		      ()
	      in  %% Line 709
		  case apply 'match'/4
			   (P, V, _cor7, Bs0) of
		    %% Line 710
		    <{'match',Bsn}> when 'true' ->
			let <Bs2> =
			    %% Line 711
			    apply 'add_bindings'/2
				(Bsn, Bs0)
			in  let <NewAcc> =
				%% Line 712
				apply CompFun
				    (Bs2, Acc)
			    in  %% Line 713
				apply 'eval_generate'/7
				    (Rest, P, Bs0, Lf, Ef, CompFun, NewAcc)
		    %% Line 714
		    <'nomatch'> when 'true' ->
			%% Line 715
			apply 'eval_generate'/7
			    (Rest, P, Bs0, Lf, Ef, CompFun, Acc)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 717
	  <[],_X_P,_X_Bs0,_X_Lf,_X_Ef,_X_CompFun,Acc> when 'true' ->
	      %% Line 718
	      Acc
	  %% Line 719
	  <Term,_X_P,_X_Bs0,_X_Lf,_X_Ef,_X_CompFun,_X_Acc> when 'true' ->
	      let <_cor11> =
		  %% Line 720
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 720
		  call 'erlang':'raise'
		      ('error', {'bad_generator',Term}, _cor11)
	end
'eval_b_generate'/7 =
    %% Line 722
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bin = #{#<_cor25>('all',1,'binary',['unsigned'|['big']])}#,P,Bs0,Lf,Ef,CompFun,Acc> when 'true' ->
	      let <Mfun> =
		  %% Line 723
		  apply 'match_fun'/1
		      (Bs0)
	      in  let <Efun> =
		      %% Line 724
		      ( fun (_cor9,_cor8) ->
			    apply 'expr'/5
				(_cor9, _cor8, Lf, Ef, 'none')
			-| [{'id',{0,0,'-eval_b_generate/7-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 725
			  apply 'new_bindings'/0
			      ()
		      in  %% Line 725
			  case call 'eval_bits':'bin_gen'
				   (P, Bin, _cor13, Bs0, Mfun, Efun) of
			    %% Line 726
			    <{'match',Rest,Bs1}> when 'true' ->
				let <Bs2> =
				    %% Line 727
				    apply 'add_bindings'/2
					(Bs1, Bs0)
				in  let <NewAcc> =
					%% Line 728
					apply CompFun
					    (Bs2, Acc)
				    in  %% Line 729
					apply 'eval_b_generate'/7
					    (Rest, P, Bs0, Lf, Ef, CompFun, NewAcc)
			    %% Line 730
			    <{'nomatch',Rest}> when 'true' ->
				%% Line 731
				apply 'eval_b_generate'/7
				    (Rest, P, Bs0, Lf, Ef, CompFun, Acc)
			    %% Line 732
			    <'done'> when 'true' ->
				%% Line 733
				Acc
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor16})
			      -| ['compiler_generated'] )
			  end
	  %% Line 735
	  <Term,_X_P,_X_Bs0,_X_Lf,_X_Ef,_X_CompFun,_X_Acc> when 'true' ->
	      let <_cor17> =
		  %% Line 736
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 736
		  call 'erlang':'raise'
		      ('error', {'bad_generator',Term}, _cor17)
	end
'eval_filter'/6 =
    %% Line 738
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 739
	case call 'erl_lint':'is_guard_test'
		 (_cor5) of
	  %% Line 740
	  <'true'> when 'true' ->
	      %% Line 741
	      case apply 'guard_test'/4
		       (_cor5, _cor4, _cor3, _cor2) of
		%% Line 742
		<{'value','true',Bs1}> when 'true' ->
		    apply _cor1
			(Bs1)
		%% Line 743
		<{'value','false',_cor16}> when 'true' ->
		    _cor0
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 745
	  <'false'> when 'true' ->
	      %% Line 746
	      case apply 'expr'/5
		       (_cor5, _cor4, _cor3, _cor2, 'none') of
		%% Line 747
		<{'value','true',Bs1}> when 'true' ->
		    apply _cor1
			(Bs1)
		%% Line 748
		<{'value','false',_cor17}> when 'true' ->
		    _cor0
		%% Line 749
		<{'value',V,_cor18}> when 'true' ->
		    let <_cor7> =
			%% Line 750
			apply 'stacktrace'/0
			    ()
		    in  %% Line 750
			call 'erlang':'raise'
			    ('error', {'bad_filter',V}, _cor7)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'eval_map_fields'/4 =
    %% Line 758
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 759
	apply 'eval_map_fields'/5
	    (_cor3, _cor2, _cor1, _cor0, [])
'eval_map_fields'/5 =
    %% Line 761
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'map_field_assoc',_cor15,K0,V0}|Fs],Bs0,Lf,Ef,Acc> when 'true' ->
	      %% Line 762
	      case apply 'expr'/5
		       (K0, Bs0, Lf, Ef, 'none') of
		<{'value',K1,Bs1}> when 'true' ->
		    %% Line 763
		    case apply 'expr'/5
			     (V0, Bs1, Lf, Ef, 'none') of
		      <{'value',V1,Bs2}> when 'true' ->
			  %% Line 764
			  apply 'eval_map_fields'/5
			      (Fs, Bs2, Lf, Ef, [{'map_assoc',K1,V1}|Acc])
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 765
	  <[{'map_field_exact',_cor16,K0,V0}|Fs],Bs0,Lf,Ef,Acc> when 'true' ->
	      %% Line 766
	      case apply 'expr'/5
		       (K0, Bs0, Lf, Ef, 'none') of
		<{'value',K1,Bs1}> when 'true' ->
		    %% Line 767
		    case apply 'expr'/5
			     (V0, Bs1, Lf, Ef, 'none') of
		      <{'value',V1,Bs2}> when 'true' ->
			  %% Line 768
			  apply 'eval_map_fields'/5
			      (Fs, Bs2, Lf, Ef, [{'map_exact',K1,V1}|Acc])
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 769
	  <[],Bs,_X_Lf,_X_Ef,Acc> when 'true' ->
	      let <_cor9> =
		  %% Line 770
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 770
		  {_cor9,Bs}
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'eval_map_fields',5}}] )
	    -| ['compiler_generated'] )
	end
'ret_expr'/3 =
    %% Line 778
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <V,_X_Bs,'value'> when 'true' ->
	      %% Line 779
	      V
	  %% Line 780
	  <V,Bs,'none'> when 'true' ->
	      %% Line 781
	      {'value',V,Bs}
	  %% Line 782
	  <V,_X_Bs,RBs>
	      when call 'erlang':'is_list'
		    (RBs) ->
	      %% Line 783
	      {'value',V,RBs}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'ret_expr',3}}] )
	    -| ['compiler_generated'] )
	end
'eval_fun'/2 =
    %% Line 790
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <As,{Bs0,Lf,Ef,Cs}> when 'true' ->
	      %% Line 791
	      apply 'eval_fun'/6
		  (Cs, As, Bs0, Lf, Ef, 'value')
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'eval_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'eval_fun'/6 =
    %% Line 793
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'clause',_cor17,H,G,B}|Cs],As,Bs0,Lf,Ef,RBs> when 'true' ->
	      let <_cor6> =
		  %% Line 794
		  apply 'new_bindings'/0
		      ()
	      in  %% Line 794
		  case apply 'match_list'/4
			   (H, As, _cor6, Bs0) of
		    %% Line 795
		    <{'match',Bsn}> when 'true' ->
			let <Bs1> =
			    %% Line 796
			    apply 'add_bindings'/2
				(Bsn, Bs0)
			in  %% Line 797
			    case apply 'guard'/4
				     (G, Bs1, Lf, Ef) of
			      %% Line 798
			      <'true'> when 'true' ->
				  apply 'exprs'/5
				      (B, Bs1, Lf, Ef, RBs)
			      %% Line 799
			      <'false'> when 'true' ->
				  apply 'eval_fun'/6
				      (Cs, As, Bs0, Lf, Ef, RBs)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
		    %% Line 801
		    <'nomatch'> when 'true' ->
			%% Line 802
			apply 'eval_fun'/6
			    (Cs, As, Bs0, Lf, Ef, RBs)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 804
	  <[],As,_X_Bs,_X_Lf,_X_Ef,_X_RBs> when 'true' ->
	      let <_cor10> =
		  %% Line 806
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 805
		  call 'erlang':'raise'
		      ('error', 'function_clause', %% Line 806
						   [{'erl_eval','-inside-an-interpreted-fun-',As}|_cor10])
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'eval_fun',6}}] )
	    -| ['compiler_generated'] )
	end
'eval_named_fun'/3 =
    %% Line 809
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <As,Fun,{Bs0,Lf,Ef,Cs,Name}> when 'true' ->
	      %% Line 810
	      apply 'eval_named_fun'/8
		  (Cs, As, Bs0, Lf, Ef, Name, Fun, 'value')
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'eval_named_fun',3}}] )
	    -| ['compiler_generated'] )
	end
'eval_named_fun'/8 =
    %% Line 812
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'clause',_cor22,H,G,B}|Cs],As,Bs0,Lf,Ef,Name,Fun,RBs> when 'true' ->
	      let <Bs1> =
		  %% Line 813
		  apply 'add_binding'/3
		      (Name, Fun, Bs0)
	      in  let <_cor9> =
		      %% Line 814
		      apply 'new_bindings'/0
			  ()
		  in  %% Line 814
		      case apply 'match_list'/4
			       (H, As, _cor9, Bs1) of
			%% Line 815
			<{'match',Bsn}> when 'true' ->
			    let <Bs2> =
				%% Line 816
				apply 'add_bindings'/2
				    (Bsn, Bs1)
			    in  %% Line 817
				case apply 'guard'/4
					 (G, Bs2, Lf, Ef) of
				  %% Line 818
				  <'true'> when 'true' ->
				      apply 'exprs'/5
					  (B, Bs2, Lf, Ef, RBs)
				  %% Line 819
				  <'false'> when 'true' ->
				      apply 'eval_named_fun'/8
					  (Cs, As, Bs0, Lf, Ef, Name, Fun, RBs)
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor11})
				    -| ['compiler_generated'] )
				end
			%% Line 821
			<'nomatch'> when 'true' ->
			    %% Line 822
			    apply 'eval_named_fun'/8
				(Cs, As, Bs0, Lf, Ef, Name, Fun, RBs)
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
	  %% Line 824
	  <[],As,_X_Bs,_X_Lf,_X_Ef,_X_Name,_X_Fun,_X_RBs> when 'true' ->
	      let <_cor13> =
		  %% Line 826
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 825
		  call 'erlang':'raise'
		      ('error', 'function_clause', %% Line 826
						   [{'erl_eval','-inside-an-interpreted-fun-',As}|_cor13])
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'eval_named_fun',8}}] )
	    -| ['compiler_generated'] )
	end
'expr_list'/2 =
    %% Line 839
    fun (_cor1,_cor0) ->
	%% Line 840
	apply 'expr_list'/4
	    (_cor1, _cor0, 'none', 'none')
'expr_list'/3 =
    %% Line 849
    fun (_cor2,_cor1,_cor0) ->
	%% Line 850
	apply 'expr_list'/4
	    (_cor2, _cor1, _cor0, 'none')
'expr_list'/4 =
    %% Line 861
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 862
	apply 'expr_list'/6
	    (_cor3, [], _cor2, _cor2, _cor1, _cor0)
'expr_list'/6 =
    %% Line 864
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],Vs,BsOrig,Bs0,Lf,Ef> when 'true' ->
	      %% Line 865
	      case apply 'expr'/5
		       (E, BsOrig, Lf, Ef, 'none') of
		<{'value',V,Bs1}> when 'true' ->
		    let <_cor7> =
			%% Line 866
			apply 'merge_bindings'/2
			    (Bs1, Bs0)
		    in  %% Line 866
			apply 'expr_list'/6
			    (Es, [V|Vs], BsOrig, _cor7, Lf, Ef)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 867
	  <[],Vs,_cor15,Bs,_X_Lf,_X_Ef> when 'true' ->
	      let <_cor8> =
		  %% Line 868
		  call 'lists':'reverse'
		      (Vs)
	      in  %% Line 868
		  {_cor8,Bs}
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'expr_list',6}}] )
	    -| ['compiler_generated'] )
	end
'eval_op'/6 =
    %% Line 870
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 871
	apply 'do_apply'/6
	    ('erlang', _cor5, [_cor4|[_cor3|[]]], _cor2, _cor1, _cor0)
'eval_op'/5 =
    %% Line 873
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 874
	apply 'do_apply'/6
	    ('erlang', _cor4, [_cor3|[]], _cor2, _cor1, _cor0)
'if_clauses'/5 =
    %% Line 878
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'clause',_cor12,[],G,B}|Cs],Bs,Lf,Ef,RBs> when 'true' ->
	      %% Line 879
	      case apply 'guard'/4
		       (G, Bs, Lf, Ef) of
		%% Line 880
		<'true'> when 'true' ->
		    apply 'exprs'/5
			(B, Bs, Lf, Ef, RBs)
		%% Line 881
		<'false'> when 'true' ->
		    apply 'if_clauses'/5
			(Cs, Bs, Lf, Ef, RBs)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 883
	  <[],_X_Bs,_X_Lf,_X_Ef,_X_RBs> when 'true' ->
	      let <_cor6> =
		  %% Line 884
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 884
		  call 'erlang':'raise'
		      ('error', 'if_clause', _cor6)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'if_clauses',5}}] )
	    -| ['compiler_generated'] )
	end
'try_clauses'/8 =
    %% Line 890
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 891
	letrec
	    'after$^0'/0 =
		fun () ->
		    %% Line 918
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(_cor4,
				 []) ->
			  _cor3
		      %% Line 920
		      <> when 'true' ->
			  %% Line 921
			  apply 'exprs'/5
			      (_cor4, _cor3, _cor2, _cor1, 'none')
		    end
	in  try
		try
		    apply 'exprs'/5
			(_cor7, _cor3, _cor2, _cor1, 'none')
		of <_cor8> ->
		    case _cor8 of
		      %% Line 892
		      <{'value',V,Bs1}>
			  when call 'erlang':'=:='
				(_cor6,
				 []) ->
			  %% Line 893
			  apply 'ret_expr'/3
			      (V, Bs1, _cor0)
		      %% Line 894
		      <{'value',V,Bs1}> when 'true' ->
			  %% Line 895
			  case apply 'match_clause'/5
				   (_cor6, [V|[]], Bs1, _cor2, _cor1) of
			    %% Line 896
			    <{B2,Bs2}> when 'true' ->
				%% Line 897
				apply 'exprs'/5
				    (B2, Bs2, _cor2, _cor1, _cor0)
			    %% Line 898
			    <'nomatch'> when 'true' ->
				let <_cor9> =
				    %% Line 899
				    apply 'stacktrace'/0
					()
				in  %% Line 899
				    call 'erlang':'raise'
					('error', {'try_clause',V}, _cor9)
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'try_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		catch <_cor14,_cor13,_cor12> ->
		    case <_cor14,_cor13,_cor12> of
		      %% Line 902
		      <Class,Reason,_cor32>
			  when call 'erlang':'=:='
				(_cor5,
				 []) ->
			  let <_cor15> =
			      %% Line 904
			      apply 'stacktrace'/0
				  ()
			  in  %% Line 904
			      call 'erlang':'raise'
				  (Class, Reason, _cor15)
		      %% Line 905
		      <Class,Reason,_cor33> when 'true' ->
			  let <_cor16> =
			      %% Line 910
			      call 'erlang':'get_stacktrace'
				  ()
			  in  let <V> = {%% Line 910
				   Class,%% Line 910
					 Reason,_cor16}
			      in  %% Line 911
				  case apply 'match_clause'/5
					   (_cor5, [V|[]], _cor3, _cor2, _cor1) of
				    %% Line 912
				    <{B2,Bs2}> when 'true' ->
					%% Line 913
					apply 'exprs'/5
					    (B2, Bs2, _cor2, _cor1, _cor0)
				    %% Line 914
				    <'nomatch'> when 'true' ->
					let <_cor18> =
					    %% Line 915
					    apply 'stacktrace'/0
						()
					in  %% Line 915
					    call 'erlang':'raise'
						(Class, Reason, _cor18)
				    ( <_cor19> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor19})
				      -| ['compiler_generated'] )
				  end
		    end
	    of <_cor20> ->
		do  ( apply 'after$^0'/0
			  ()
		      -| ['compiler_generated'] )
		    _cor20
	    catch <_cor23,_cor22,_cor21> ->
		do  ( apply 'after$^0'/0
			  ()
		      -| ['compiler_generated'] )
		    primop 'raise'
			(_cor21, _cor22)
'case_clauses'/6 =
    %% Line 928
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 929
	case apply 'match_clause'/5
		 (_cor4, [_cor5|[]], _cor3, _cor2, _cor1) of
	  %% Line 930
	  <{B,Bs1}> when 'true' ->
	      %% Line 931
	      apply 'exprs'/5
		  (B, Bs1, _cor2, _cor1, _cor0)
	  %% Line 932
	  <'nomatch'> when 'true' ->
	      let <_cor6> =
		  %% Line 933
		  apply 'stacktrace'/0
		      ()
	      in  %% Line 933
		  call 'erlang':'raise'
		      ('error', {'case_clause',_cor5}, _cor6)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'receive_clauses'/5 =
    %% Line 939
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 940
	apply 'receive_clauses'/7
	    ('infinity', _cor4, 'unused', _cor3, _cor2, _cor1, _cor0)
'receive_clauses'/7 =
    %% Line 945
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <F> =
	    %% Line 946
	    ( fun (_cor7) ->
		  apply 'match_clause'/5
		      (_cor5, [_cor7|[]], _cor3, _cor2, _cor1)
	      -| [{'id',{0,0,'-receive_clauses/7-fun-0-'}}] )
	in  %% Line 947
	    case call 'prim_eval':'receive'
		     (F, _cor6) of
	      %% Line 948
	      <{B,Bs1}> when 'true' ->
		  %% Line 949
		  apply 'exprs'/5
		      (B, Bs1, _cor2, _cor1, _cor0)
	      %% Line 950
	      <'timeout'> when 'true' ->
		  %% Line 951
		  case _cor4 of
		    <{B,Bs1}> when 'true' ->
			%% Line 952
			apply 'exprs'/5
			    (B, Bs1, _cor2, _cor1, _cor0)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor11})
		-| ['compiler_generated'] )
	    end
'match_clause'/4 =
    %% Line 966
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 967
	apply 'match_clause'/5
	    (_cor3, _cor2, _cor1, _cor0, 'none')
'match_clause'/5 =
    %% Line 969
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'clause',_cor12,H,G,B}|Cs],Vals,Bs,Lf,Ef> when 'true' ->
	      %% Line 970
	      case apply 'match_list'/3
		       (H, Vals, Bs) of
		%% Line 971
		<{'match',Bs1}> when 'true' ->
		    %% Line 972
		    case apply 'guard'/4
			     (G, Bs1, Lf, Ef) of
		      %% Line 973
		      <'true'> when 'true' ->
			  {B,Bs1}
		      %% Line 974
		      <'false'> when 'true' ->
			  apply 'match_clause'/5
			      (Cs, Vals, Bs, Lf, Ef)
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 976
		<'nomatch'> when 'true' ->
		    apply 'match_clause'/5
			(Cs, Vals, Bs, Lf, Ef)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 978
	  <[],_X_Vals,_X_Bs,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 979
	      'nomatch'
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'match_clause',5}}] )
	    -| ['compiler_generated'] )
	end
'guard'/4 =
    %% Line 984
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L = [G|_cor8],Bs0,Lf,Ef>
	      when call 'erlang':'is_list'
		    (G) ->
	      %% Line 985
	      apply 'guard1'/4
		  (L, Bs0, Lf, Ef)
	  %% Line 986
	  <L,Bs0,Lf,Ef> when 'true' ->
	      %% Line 987
	      apply 'guard0'/4
		  (L, Bs0, Lf, Ef)
	end
'guard1'/4 =
    %% Line 990
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[G|Gs],Bs0,Lf,Ef>
	      when call 'erlang':'is_list'
		    (G) ->
	      %% Line 991
	      case apply 'guard0'/4
		       (G, Bs0, Lf, Ef) of
		%% Line 992
		<'true'> when 'true' ->
		    %% Line 993
		    'true'
		%% Line 994
		<'false'> when 'true' ->
		    %% Line 995
		    apply 'guard1'/4
			(Gs, Bs0, Lf, Ef)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 997
	  <[],_X_Bs,_X_Lf,_X_Ef> when 'true' ->
	      'false'
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'guard1',4}}] )
	    -| ['compiler_generated'] )
	end
'guard0'/4 =
    %% Line 1000
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[G|Gs],Bs0,Lf,Ef> when 'true' ->
	      %% Line 1001
	      case call 'erl_lint':'is_guard_test'
		       (G) of
		%% Line 1002
		<'true'> when 'true' ->
		    %% Line 1003
		    case apply 'guard_test'/4
			     (G, Bs0, Lf, Ef) of
		      %% Line 1004
		      <{'value','true',Bs}> when 'true' ->
			  apply 'guard0'/4
			      (Gs, Bs, Lf, Ef)
		      %% Line 1005
		      <{'value','false',_cor11}> when 'true' ->
			  'false'
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 1007
		<'false'> when 'true' ->
		    let <_cor5> =
			%% Line 1008
			apply 'stacktrace'/0
			    ()
		    in  %% Line 1008
			call 'erlang':'raise'
			    ('error', 'guard_expr', _cor5)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1010
	  <[],_X_Bs,_X_Lf,_X_Ef> when 'true' ->
	      'true'
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'guard0',4}}] )
	    -| ['compiler_generated'] )
	end
'guard_test'/4 =
    %% Line 1016
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'call',L,{'atom',Ln,F},As0},Bs0,Lf,Ef> when 'true' ->
	      let <TT> =
		  %% Line 1017
		  apply 'type_test'/1
		      (F)
	      in  let <G> =
		      %% Line 1018
		      {'call',L,{'atom',Ln,TT},As0}
		  in  %% Line 1019
		      apply 'expr_guard_test'/4
			  (G, Bs0, Lf, Ef)
	  %% Line 1020
	  <{'call',L,{'remote',Lr,{'atom',Lm,'erlang'},{'atom',Lf,F}},As0},%% Line 1021
									   Bs0,_cor12,%% Line 1021
										      Ef>
	      when call 'erlang':'=:='
		    (_cor12,
		     %% Line 1021
		     Lf) ->
	      let <TT> =
		  %% Line 1022
		  apply 'type_test'/1
		      (F)
	      in  let <G> =
		      %% Line 1023
		      {'call',L,{'remote',Lr,{'atom',Lm,'erlang'},{'atom',Lf,TT}},As0}
		  in  %% Line 1024
		      apply 'expr_guard_test'/4
			  (G, Bs0, Lf, Ef)
	  %% Line 1025
	  <G,Bs0,Lf,Ef> when 'true' ->
	      %% Line 1026
	      apply 'expr_guard_test'/4
		  (G, Bs0, Lf, Ef)
	end
'expr_guard_test'/4 =
    %% Line 1028
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1029
	try
	    let <_cor13> =
		apply 'expr'/5
		    (_cor3, _cor2, _cor1, _cor0, 'none')
	    in  case _cor13 of
		  <{'value','true',_cor14}> when 'true' ->
		      ( _cor13
			-| ['compiler_generated'] )
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
	of <_cor5> ->
	    _cor5
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 1030
	      <'error',_cor15,_cor16> when 'true' ->
		  {'value','false',_cor2}
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'type_test'/1 =
    %% Line 1032
    fun (_cor0) ->
	case _cor0 of
	  <'integer'> when 'true' ->
	      'is_integer'
	  %% Line 1033
	  <'float'> when 'true' ->
	      'is_float'
	  %% Line 1034
	  <'number'> when 'true' ->
	      'is_number'
	  %% Line 1035
	  <'atom'> when 'true' ->
	      'is_atom'
	  %% Line 1036
	  <'list'> when 'true' ->
	      'is_list'
	  %% Line 1037
	  <'tuple'> when 'true' ->
	      'is_tuple'
	  %% Line 1038
	  <'pid'> when 'true' ->
	      'is_pid'
	  %% Line 1039
	  <'reference'> when 'true' ->
	      'is_reference'
	  %% Line 1040
	  <'port'> when 'true' ->
	      'is_port'
	  %% Line 1041
	  <'function'> when 'true' ->
	      'is_function'
	  %% Line 1042
	  <'binary'> when 'true' ->
	      'is_binary'
	  %% Line 1043
	  <'record'> when 'true' ->
	      'is_record'
	  %% Line 1044
	  <'map'> when 'true' ->
	      'is_map'
	  %% Line 1045
	  <Test> when 'true' ->
	      Test
	end
'match'/3 =
    %% Line 1053
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1054
	apply 'match'/4
	    (_cor2, _cor1, _cor0, _cor0)
'match'/4 =
    %% Line 1060
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    catch
		%% Line 1061
		apply 'match1'/4
		    (_cor3, _cor2, _cor1, _cor0)
	in  %% Line 1061
	    case _cor4 of
	      %% Line 1062
	      <'invalid'> when 'true' ->
		  let <_cor5> =
		      %% Line 1063
		      apply 'stacktrace'/0
			  ()
		  in  %% Line 1063
		      call 'erlang':'raise'
			  ('error', {'illegal_pattern',_cor3}, _cor5)
	      %% Line 1064
	      <Other> when 'true' ->
		  %% Line 1065
		  Other
	    end
'string_to_conses'/3 =
    %% Line 1068
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor7,Tail> when 'true' ->
	      Tail
	  %% Line 1069
	  <[E|Rest],Line,Tail> when 'true' ->
	      let <_cor3> =
		  %% Line 1070
		  apply 'string_to_conses'/3
		      (Rest, Line, Tail)
	      in  %% Line 1070
		  {'cons',Line,{'integer',Line,E},_cor3}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'string_to_conses',3}}] )
	    -| ['compiler_generated'] )
	end
'match1'/4 =
    %% Line 1072
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'atom',_cor29,A0},A,Bs,_X_BBs> when 'true' ->
	      %% Line 1073
	      case A of
		%% Line 1074
		<_cor30>
		    when call 'erlang':'=:='
			  (A,
			   A0) ->
		    {'match',Bs}
		%% Line 1075
		<_cor31> when 'true' ->
		    call 'erlang':'throw'
			('nomatch')
	      end
	  %% Line 1077
	  <{'integer',_cor32,I0},I,Bs,_X_BBs> when 'true' ->
	      %% Line 1078
	      case I of
		%% Line 1079
		<_cor33>
		    when call 'erlang':'=:='
			  (I,
			   I0) ->
		    {'match',Bs}
		%% Line 1080
		<_cor34> when 'true' ->
		    call 'erlang':'throw'
			('nomatch')
	      end
	  %% Line 1082
	  <{'float',_cor35,F0},F,Bs,_X_BBs> when 'true' ->
	      %% Line 1083
	      case F of
		%% Line 1084
		<_cor36>
		    when call 'erlang':'=:='
			  (F,
			   F0) ->
		    {'match',Bs}
		%% Line 1085
		<_cor37> when 'true' ->
		    call 'erlang':'throw'
			('nomatch')
	      end
	  %% Line 1087
	  <{'char',_cor38,C0},C,Bs,_X_BBs> when 'true' ->
	      %% Line 1088
	      case C of
		%% Line 1089
		<_cor39>
		    when call 'erlang':'=:='
			  (C,
			   C0) ->
		    {'match',Bs}
		%% Line 1090
		<_cor40> when 'true' ->
		    call 'erlang':'throw'
			('nomatch')
	      end
	  %% Line 1092
	  <{'var',_cor41,'_'},_cor42,Bs,_X_BBs> when 'true' ->
	      %% Line 1093
	      {'match',Bs}
	  %% Line 1094
	  <{'var',_cor43,Name},Term,Bs,_X_BBs> when 'true' ->
	      %% Line 1095
	      case apply 'binding'/2
		       (Name, Bs) of
		%% Line 1096
		<{'value',_cor44}>
		    when call 'erlang':'=:='
			  (_cor44,
			   Term) ->
		    %% Line 1097
		    {'match',Bs}
		%% Line 1098
		<{'value',_cor45}> when 'true' ->
		    %% Line 1099
		    call 'erlang':'throw'
			('nomatch')
		%% Line 1100
		<'unbound'> when 'true' ->
		    let <_cor8> =
			%% Line 1101
			apply 'add_binding'/3
			    (Name, Term, Bs)
		    in  %% Line 1101
			{'match',_cor8}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1103
	  <{'match',_cor46,Pat1,Pat2},Term,Bs0,BBs> when 'true' ->
	      %% Line 1104
	      case apply 'match1'/4
		       (Pat1, Term, Bs0, BBs) of
		<{'match',Bs1}> when 'true' ->
		    %% Line 1105
		    apply 'match1'/4
			(Pat2, Term, Bs1, BBs)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1106
	  <{'string',_cor47,S0},S,Bs,_X_BBs> when 'true' ->
	      %% Line 1107
	      case S of
		%% Line 1108
		<_cor48>
		    when call 'erlang':'=:='
			  (S,
			   S0) ->
		    {'match',Bs}
		%% Line 1109
		<_cor49> when 'true' ->
		    call 'erlang':'throw'
			('nomatch')
	      end
	  %% Line 1111
	  <{'nil',_cor50},Nil,Bs,_X_BBs> when 'true' ->
	      %% Line 1112
	      case Nil of
		%% Line 1113
		<[]> when 'true' ->
		    {'match',Bs}
		%% Line 1114
		<_cor51> when 'true' ->
		    call 'erlang':'throw'
			('nomatch')
	      end
	  %% Line 1116
	  <{'cons',_cor52,H,T},[H1|T1],Bs0,BBs> when 'true' ->
	      %% Line 1117
	      case apply 'match1'/4
		       (H, H1, Bs0, BBs) of
		<{'match',Bs}> when 'true' ->
		    %% Line 1118
		    apply 'match1'/4
			(T, T1, Bs, BBs)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1119
	  <{'cons',_cor53,_cor54,_cor55},_cor56,_X_Bs,_X_BBs> when 'true' ->
	      %% Line 1120
	      call 'erlang':'throw'
		  ('nomatch')
	  %% Line 1121
	  <{'tuple',_cor57,Elts},Tuple,Bs,BBs>
	      when %% Line 1122
		try
		    let <_cor15> =
			call 'erlang':'length'
			    (Elts)
		    in  let <_cor14> =
			    call 'erlang':'tuple_size'
				(Tuple)
			in  call 'erlang':'=:='
				(_cor15, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1123
	      apply 'match_tuple'/5
		  (Elts, Tuple, 1, Bs, BBs)
	  %% Line 1124
	  <{'tuple',_cor58,_cor59},_cor60,_X_Bs,_X_BBs> when 'true' ->
	      %% Line 1125
	      call 'erlang':'throw'
		  ('nomatch')
	  %% Line 1126
	  <{'map',_cor61,Fs},Map = ~{}~,Bs,BBs> when 'true' ->
	      %% Line 1127
	      apply 'match_map'/4
		  (Fs, Map, Bs, BBs)
	  %% Line 1128
	  <{'map',_cor62,_cor63},_cor64,_X_Bs,_X_BBs> when 'true' ->
	      %% Line 1129
	      call 'erlang':'throw'
		  ('nomatch')
	  %% Line 1130
	  <{'bin',_cor65,Fs},B = #{#<_cor66>('all',1,'binary',['unsigned'|['big']])}#,Bs0,BBs> when 'true' ->
	      let <_cor21> =
		  %% Line 1132
		  apply 'match_fun'/1
		      (BBs)
	      in  let <_cor20> =
		      %% Line 1133
		      ( fun (_cor17,_cor16) ->
			    apply 'expr'/5
				(_cor17, _cor16, 'none', 'none', 'none')
			-| [{'id',{0,0,'-match1/4-fun-0-'}}] )
		  in  %% Line 1131
		      call 'eval_bits':'match_bits'
			  (Fs, B, Bs0, BBs, _cor21, _cor20)
	  %% Line 1134
	  <{'bin',_cor67,_cor68},_cor69,_X_Bs,_X_BBs> when 'true' ->
	      %% Line 1135
	      call 'erlang':'throw'
		  ('nomatch')
	  %% Line 1136
	  <{'op',_cor70,'++',{'nil',_cor71},R},Term,Bs,BBs> when 'true' ->
	      %% Line 1137
	      apply 'match1'/4
		  (R, Term, Bs, BBs)
	  %% Line 1138
	  <{'op',_cor72,'++',{'cons',Li,{'integer',L2,I},T},R},Term,Bs,BBs> when 'true' ->
	      %% Line 1139
	      apply 'match1'/4
		  ({'cons',Li,{'integer',L2,I},{'op',Li,'++',T,R}}, Term, Bs, BBs)
	  %% Line 1140
	  <{'op',_cor73,'++',{'cons',Li,{'char',L2,C},T},R},Term,Bs,BBs> when 'true' ->
	      %% Line 1141
	      apply 'match1'/4
		  ({'cons',Li,{'char',L2,C},{'op',Li,'++',T,R}}, Term, Bs, BBs)
	  %% Line 1142
	  <{'op',_cor74,'++',{'string',Li,L},R},Term,Bs,BBs> when 'true' ->
	      let <_cor22> =
		  %% Line 1143
		  apply 'string_to_conses'/3
		      (L, Li, R)
	      in  %% Line 1143
		  apply 'match1'/4
		      (_cor22, Term, Bs, BBs)
	  %% Line 1144
	  <{'op',Line,Op,A},Term,Bs,BBs> when 'true' ->
	      %% Line 1145
	      case apply 'partial_eval'/1
		       ({'op',Line,Op,A}) of
		%% Line 1146
		<{'op',_cor75,_cor76,_cor77}>
		    when let <_cor80> =
			  call 'erlang':'=:='
			      (_cor75, Line)
		      in  let <_cor78> =
			      call 'erlang':'=:='
				  (_cor76, Op)
			  in  let <_cor79> =
				  call 'erlang':'=:='
				      (_cor77, A)
			      in  let <_cor81> =
				      call 'erlang':'and'
					  (_cor78, _cor79)
				  in  call 'erlang':'and'
					  (_cor80, _cor81) ->
		    %% Line 1147
		    call 'erlang':'throw'
			('invalid')
		%% Line 1148
		<X> when 'true' ->
		    %% Line 1149
		    apply 'match1'/4
			(X, Term, Bs, BBs)
	      end
	  %% Line 1151
	  <{'op',Line,Op,L,R},Term,Bs,BBs> when 'true' ->
	      %% Line 1152
	      case apply 'partial_eval'/1
		       ({'op',Line,Op,L,R}) of
		%% Line 1153
		<{'op',_cor82,_cor83,_cor84,_cor85}>
		    when let <_cor90> =
			  call 'erlang':'=:='
			      (_cor82, Line)
		      in  let <_cor88> =
			      call 'erlang':'=:='
				  (_cor83, Op)
			  in  let <_cor86> =
				  call 'erlang':'=:='
				      (_cor84, L)
			      in  let <_cor87> =
				      call 'erlang':'=:='
					  (_cor85, R)
				  in  let <_cor89> =
					  call 'erlang':'and'
					      (_cor86, _cor87)
				      in  let <_cor91> =
					      call 'erlang':'and'
						  (_cor88, _cor89)
					  in  call 'erlang':'and'
						  (_cor90, _cor91) ->
		    %% Line 1154
		    call 'erlang':'throw'
			('invalid')
		%% Line 1155
		<X> when 'true' ->
		    %% Line 1156
		    apply 'match1'/4
			(X, Term, Bs, BBs)
	      end
	  %% Line 1158
	  <_cor92,_cor93,_X_Bs,_X_BBs> when 'true' ->
	      %% Line 1159
	      call 'erlang':'throw'
		  ('invalid')
	end
'match_fun'/1 =
    %% Line 1161
    fun (_cor0) ->
	%% Line 1162
	( fun (_cor2,_cor1) ->
	      case <_cor2,_cor1> of
		<'match',{L,R,Bs}> when 'true' ->
		    apply 'match1'/4
			(L, R, Bs, _cor0)
		%% Line 1163
		<'binding',{Name,Bs}> when 'true' ->
		    apply 'binding'/2
			(Name, Bs)
		%% Line 1164
		<'add_binding',{Name,Val,Bs}> when 'true' ->
		    apply 'add_binding'/3
			(Name, Val, Bs)
		( <_cor4,_cor3> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor4,_cor3})
			-| [{'function_name',{'-match_fun/1-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-match_fun/1-fun-0-'}}] )
'match_tuple'/5 =
    %% Line 1167
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],Tuple,I,Bs0,BBs> when 'true' ->
	      let <_cor5> =
		  %% Line 1168
		  call 'erlang':'element'
		      (I, Tuple)
	      in  %% Line 1168
		  case apply 'match1'/4
			   (E, _cor5, Bs0, BBs) of
		    <{'match',Bs}> when 'true' ->
			let <_cor7> =
			    %% Line 1169
			    call 'erlang':'+'
				(I, 1)
			in  %% Line 1169
			    apply 'match_tuple'/5
				(Es, Tuple, _cor7, Bs, BBs)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1170
	  <[],_cor13,_cor14,Bs,_X_BBs> when 'true' ->
	      %% Line 1171
	      {'match',Bs}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'match_tuple',5}}] )
	    -| ['compiler_generated'] )
	end
'match_map'/4 =
    %% Line 1173
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'map_field_exact',_cor17,K,V}|Fs],Map,Bs0,BBs> when 'true' ->
	      let <_cor10> =
		  %% Line 1174
		  try
		      let <_cor4> =
			  %% Line 1175
			  apply 'new_bindings'/0
			      ()
		      in  %% Line 1175
			  case apply 'expr'/2
				   (K, _cor4) of
			    <{'value',Ke,_cor18}> when 'true' ->
				%% Line 1176
				call 'maps':'get'
				    (Ke, Map)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		  of <_cor6> ->
		      _cor6
		  catch <_cor9,_cor8,_cor7> ->
		      case <_cor9,_cor8,_cor7> of
			%% Line 1177
			<'error',_cor19,_cor20> when 'true' ->
			    %% Line 1178
			    call 'erlang':'throw'
				('nomatch')
			( <_cor9,_cor8,_cor7> when 'true' ->
			      primop 'raise'
				  (_cor7, _cor8)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 1180
		  case apply 'match1'/4
			   (V, _cor10, Bs0, BBs) of
		    <{'match',Bs}> when 'true' ->
			%% Line 1181
			apply 'match_map'/4
			    (Fs, Map, Bs, BBs)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1182
	  <[],_cor21,Bs,_cor22> when 'true' ->
	      %% Line 1183
	      {'match',Bs}
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'match_map',4}}] )
	    -| ['compiler_generated'] )
	end
'match_list'/3 =
    %% Line 1190
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1191
	apply 'match_list'/4
	    (_cor2, _cor1, _cor0, _cor0)
'match_list'/4 =
    %% Line 1193
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[P|Ps],[T|Ts],Bs0,BBs> when 'true' ->
	      %% Line 1194
	      case apply 'match'/4
		       (P, T, Bs0, BBs) of
		%% Line 1195
		<{'match',Bs1}> when 'true' ->
		    apply 'match_list'/4
			(Ps, Ts, Bs1, BBs)
		%% Line 1196
		<'nomatch'> when 'true' ->
		    'nomatch'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1198
	  <[],[],Bs,_X_BBs> when 'true' ->
	      %% Line 1199
	      {'match',Bs}
	  %% Line 1200
	  <_cor9,_cor10,_X_Bs,_X_BBs> when 'true' ->
	      %% Line 1201
	      'nomatch'
	end
'new_bindings'/0 =
    %% Line 1210
    fun () ->
	call 'orddict':'new'
	    ()
'bindings'/1 =
    %% Line 1213
    fun (_cor0) ->
	call 'orddict':'to_list'
	    (_cor0)
'binding'/2 =
    %% Line 1218
    fun (_cor1,_cor0) ->
	%% Line 1219
	case call 'orddict':'find'
		 (_cor1, _cor0) of
	  %% Line 1220
	  <{'ok',Val}> when 'true' ->
	      {'value',Val}
	  %% Line 1221
	  <'error'> when 'true' ->
	      'unbound'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'add_binding'/3 =
    %% Line 1228
    fun (_cor2,_cor1,_cor0) ->
	call 'orddict':'store'
	    (_cor2, _cor1, _cor0)
'del_binding'/2 =
    %% Line 1233
    fun (_cor1,_cor0) ->
	call 'orddict':'erase'
	    (_cor1, _cor0)
'add_bindings'/2 =
    %% Line 1235
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1236
	    ( fun (_cor4,_cor3) ->
		  case <_cor4,_cor3> of
		    <{Name,Val},Bs> when 'true' ->
			call 'orddict':'store'
			    (Name, Val, Bs)
		    ( <_cor6,_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6,_cor5})
			    -| [{'function_name',{'-add_bindings/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-add_bindings/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 1237
		call 'orddict':'to_list'
		    (_cor1)
	    in  %% Line 1236
		call 'lists':'foldl'
		    (_cor7, _cor0, _cor2)
'merge_bindings'/2 =
    %% Line 1239
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 1240
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <{Name,Val},Bs> when 'true' ->
			%% Line 1241
			case call 'orddict':'find'
				 (Name, Bs) of
			  %% Line 1242
			  <{'ok',_cor12}>
			      when call 'erlang':'=:='
				    (_cor12,
				     Val) ->
			      Bs
			  %% Line 1243
			  <{'ok',V1}> when 'true' ->
			      let <_cor3> =
				  %% Line 1244
				  apply 'stacktrace'/0
				      ()
			      in  %% Line 1244
				  call 'erlang':'raise'
				      ('error', {'badmatch',V1}, _cor3)
			  %% Line 1245
			  <'error'> when 'true' ->
			      call 'orddict':'store'
				  (Name, Val, Bs)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-merge_bindings/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-merge_bindings/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 1247
		call 'orddict':'to_list'
		    (_cor1)
	    in  %% Line 1240
		call 'lists':'foldl'
		    (_cor9, _cor0, _cor2)
'is_constant_expr'/1 =
    %% Line 1268
    fun (_cor0) ->
	%% Line 1269
	case apply 'eval_expr'/1
		 (_cor0) of
	  %% Line 1270
	  <{'ok',X}>
	      when call 'erlang':'is_number'
		    (X) ->
	      'true'
	  %% Line 1271
	  <_cor3> when 'true' ->
	      'false'
	end
'eval_expr'/1 =
    %% Line 1274
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 1275
		apply 'ev_expr'/1
		    (_cor0)
	in  %% Line 1275
	    case _cor1 of
	      %% Line 1276
	      <X>
		  when call 'erlang':'is_integer'
			(_cor1) ->
		  {'ok',X}
	      %% Line 1277
	      <X>
		  when call 'erlang':'is_float'
			(_cor1) ->
		  {'ok',X}
	      %% Line 1278
	      <X>
		  when call 'erlang':'is_atom'
			(_cor1) ->
		  {'ok',X}
	      %% Line 1279
	      <{'EXIT',Reason}> when 'true' ->
		  {'error',Reason}
	      %% Line 1280
	      <_cor4> when 'true' ->
		  {'error','badarg'}
	    end
'partial_eval'/1 =
    %% Line 1283
    fun (_cor0) ->
	let <Line> =
	    %% Line 1284
	    apply 'line'/1
		(_cor0)
	in  let <_cor2> =
		catch
		    %% Line 1285
		    apply 'ev_expr'/1
			(_cor0)
	    in  %% Line 1285
		case _cor2 of
		  %% Line 1286
		  <X>
		      when call 'erlang':'is_integer'
			    (_cor2) ->
		      apply 'ret_expr'/2
			  (_cor0, {'integer',Line,X})
		  %% Line 1287
		  <X>
		      when call 'erlang':'is_float'
			    (_cor2) ->
		      apply 'ret_expr'/2
			  (_cor0, {'float',Line,X})
		  %% Line 1288
		  <X>
		      when call 'erlang':'is_atom'
			    (_cor2) ->
		      apply 'ret_expr'/2
			  (_cor0, {'atom',Line,X})
		  %% Line 1289
		  <_cor5> when 'true' ->
		      _cor0
		end
'ev_expr'/1 =
    %% Line 1293
    fun (_cor0) ->
	case _cor0 of
	  <{'op',_cor13,Op,L,R}> when 'true' ->
	      let <_cor2> =
		  apply 'ev_expr'/1
		      (L)
	      in  let <_cor1> =
		      apply 'ev_expr'/1
			  (R)
		  in  call 'erlang':Op
			  (_cor2, _cor1)
	  %% Line 1294
	  <{'op',_cor14,Op,A}> when 'true' ->
	      let <_cor3> =
		  apply 'ev_expr'/1
		      (A)
	      in  call 'erlang':Op
		      (_cor3)
	  %% Line 1295
	  <{'integer',_cor15,X}> when 'true' ->
	      X
	  %% Line 1296
	  <{'float',_cor16,X}> when 'true' ->
	      X
	  %% Line 1297
	  <{'atom',_cor17,X}> when 'true' ->
	      X
	  %% Line 1298
	  <{'tuple',_cor18,Es}> when 'true' ->
	      let <_cor9> =
		  %% Line 1299
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[X|_cor5]> when 'true' ->
				      let <_cor7> =
					  apply 'ev_expr'/1
					      (X)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Es)
		    -| ['list_comprehension'] )
	      in  %% Line 1299
		  call 'erlang':'list_to_tuple'
		      (_cor9)
	  %% Line 1300
	  <{'nil',_cor19}> when 'true' ->
	      []
	  %% Line 1301
	  <{'cons',_cor20,H,T}> when 'true' ->
	      let <_cor10> =
		  apply 'ev_expr'/1
		      (H)
	      in  let <_cor11> =
		      apply 'ev_expr'/1
			  (T)
		  in  [_cor10|_cor11]
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'ev_expr',1}}] )
	    -| ['compiler_generated'] )
	end
'ret_expr'/2 =
    %% Line 1309
    fun (_cor1,_cor0) ->
	_cor0
'line'/1 =
    %% Line 1314
    fun (_cor0) ->
	call 'erlang':'element'
	    (2, _cor0)
'stacktrace'/0 =
    %% Line 1318
    fun () ->
	[{'erl_eval','expr',3}]
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_eval')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_eval', _cor0)
end