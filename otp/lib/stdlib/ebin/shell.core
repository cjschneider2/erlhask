module 'shell' ['history'/1,
		'local_allowed'/3,
		'module_info'/0,
		'module_info'/1,
		'non_local_allowed'/3,
		'prompt_func'/1,
		'results'/1,
		'server'/1,
		'server'/2,
		'start'/0,
		'start'/1,
		'start'/2,
		'start_restricted'/1,
		'stop_restricted'/0,
		'strings'/1,
		'whereis_evaluator'/0,
		'whereis_evaluator'/1]
    attributes [%% Line 50
		'spec' =
		    %% Line 50
		    [{{'start',0},[{'type',50,'fun',[{'type',50,'product',[]}|[{'type',50,'pid',[]}]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'whereis_evaluator',0},[{'type',65,'fun',[{'type',65,'product',[]}|[{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'pid',[]}]]}]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'whereis_evaluator',1},[{'type',102,'fun',[{'type',102,'product',[{'type',102,'pid',[]}]}|[{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'pid',[]}]]}]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'start_restricted',1},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'Module'}]}|[{'type',119,'tuple',[{'atom',119,'error'}|[{'var',119,'Reason'}]]}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Module'}|[{'type',120,'module',[]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Reason'}|[{'remote_type',121,[{'atom',121,'code'}|[{'atom',121,'load_error_rsn'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'stop_restricted',0},[{'type',137,'fun',[{'type',137,'product',[]}|[{'type',137,'no_return',[]}]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'server',2},[{'type',143,'fun',[{'type',143,'product',[{'type',143,'boolean',[]}|[{'type',143,'boolean',[]}]]}|[{'atom',143,'terminated'}]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'server',1},[{'type',160,'fun',[{'type',160,'product',[{'type',160,'boolean',[]}]}|[{'atom',160,'terminated'}]]}]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 1447
		'spec' =
		    %% Line 1447
		    [{{'history',1},[{'type',1447,'bounded_fun',[{'type',1447,'fun',[{'type',1447,'product',[{'var',1447,'N'}]}|[{'type',1447,'non_neg_integer',[]}]]}|[[{'type',1448,'constraint',[{'atom',1448,'is_subtype'}|[[{'var',1448,'N'}|[{'type',1448,'non_neg_integer',[]}]]]]}]]]}]}],
		%% Line 1453
		'spec' =
		    %% Line 1453
		    [{{'results',1},[{'type',1453,'bounded_fun',[{'type',1453,'fun',[{'type',1453,'product',[{'var',1453,'N'}]}|[{'type',1453,'non_neg_integer',[]}]]}|[[{'type',1454,'constraint',[{'atom',1454,'is_subtype'}|[[{'var',1454,'N'}|[{'type',1454,'non_neg_integer',[]}]]]]}]]]}]}],
		%% Line 1459
		'spec' =
		    %% Line 1459
		    [{{'catch_exception',1},[{'type',1459,'bounded_fun',[{'type',1459,'fun',[{'type',1459,'product',[{'var',1459,'Bool'}]}|[{'type',1459,'boolean',[]}]]}|[[{'type',1460,'constraint',[{'atom',1460,'is_subtype'}|[[{'var',1460,'Bool'}|[{'type',1460,'boolean',[]}]]]]}]]]}]}],
		%% Line 1465
		'spec' =
		    %% Line 1465
		    [{{'prompt_func',1},[{'type',1465,'bounded_fun',[{'type',1465,'fun',[{'type',1465,'product',[{'var',1465,'PromptFunc'}]}|[{'var',1465,'PromptFunc2'}]]}|[[{'type',1466,'constraint',[{'atom',1466,'is_subtype'}|[[{'var',1466,'PromptFunc'}|[{'type',1466,'union',[{'atom',1466,'default'}|[{'type',1466,'tuple',[{'type',1466,'module',[]}|[{'type',1466,'atom',[]}]]}]]}]]]]}|[{'type',1467,'constraint',[{'atom',1467,'is_subtype'}|[[{'var',1467,'PromptFunc2'}|[{'type',1467,'union',[{'atom',1467,'default'}|[{'type',1467,'tuple',[{'type',1467,'module',[]}|[{'type',1467,'atom',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1472
		'spec' =
		    %% Line 1472
		    [{{'strings',1},[{'type',1472,'bounded_fun',[{'type',1472,'fun',[{'type',1472,'product',[{'var',1472,'Strings'}]}|[{'var',1472,'Strings2'}]]}|[[{'type',1473,'constraint',[{'atom',1473,'is_subtype'}|[[{'var',1473,'Strings'}|[{'type',1473,'boolean',[]}]]]]}|[{'type',1474,'constraint',[{'atom',1474,'is_subtype'}|[[{'var',1474,'Strings2'}|[{'type',1474,'boolean',[]}]]]]}]]]]}]}]]
'local_allowed'/3 =
    %% Line 40
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'q',[],State> when 'true' ->
	      %% Line 41
	      {'true',State}
	  %% Line 42
	  <_cor6,_cor7,State> when 'true' ->
	      %% Line 43
	      {'false',State}
	end
'non_local_allowed'/3 =
    %% Line 45
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'init','stop'},[],State> when 'true' ->
	      %% Line 46
	      {'true',State}
	  %% Line 47
	  <_cor6,_cor7,State> when 'true' ->
	      %% Line 48
	      {'false',State}
	end
'start'/0 =
    %% Line 52
    fun () ->
	%% Line 53
	apply 'start'/2
	    ('false', 'false')
'start'/1 =
    %% Line 55
    fun (_cor0) ->
	case _cor0 of
	  <'init'> when 'true' ->
	      %% Line 56
	      apply 'start'/2
		  ('false', 'true')
	  %% Line 57
	  <NoCtrlG> when 'true' ->
	      %% Line 58
	      apply 'start'/2
		  (NoCtrlG, 'false')
	end
'start'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	let <_X_> =
	    %% Line 61
	    ( call 'code':'ensure_loaded'
		  ('user_default')
	      -| ['result_not_wanted'] )
	in  let <_cor3> =
		%% Line 62
		( fun () ->
		      apply 'server'/2
			  (_cor1, _cor0)
		  -| [{'id',{0,0,'-start/2-fun-0-'}}] )
	    in  %% Line 62
		call 'erlang':'spawn'
		    (_cor3)
'whereis_evaluator'/0 =
    %% Line 67
    fun () ->
	%% Line 71
	case call 'erlang':'whereis'
		 ('user') of
	  %% Line 72
	  <'undefined'> when 'true' ->
	      %% Line 73
	      'undefined'
	  %% Line 74
	  <User> when 'true' ->
	      %% Line 76
	      case call 'group':'interfaces'
		       (User) of
		%% Line 77
		<[]> when 'true' ->
		    %% Line 78
		    case call 'user':'interfaces'
			     (User) of
		      %% Line 79
		      <[]> when 'true' ->
			  %% Line 80
			  'undefined'
		      %% Line 81
		      <[{'shell',Shell}|[]]> when 'true' ->
			  %% Line 82
			  apply 'whereis_evaluator'/1
			      (Shell)
		      ( <_cor0> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor0})
			-| ['compiler_generated'] )
		    end
		%% Line 84
		<[{'user_drv',UserDrv}|[]]> when 'true' ->
		    %% Line 86
		    case call 'user_drv':'interfaces'
			     (UserDrv) of
		      %% Line 87
		      <[]> when 'true' ->
			  %% Line 88
			  'undefined'
		      %% Line 89
		      <[{'current_group',Group}|[]]> when 'true' ->
			  let <GrIfs> =
			      %% Line 91
			      call 'group':'interfaces'
				  (Group)
			  in  %% Line 92
			      case call 'lists':'keyfind'
				       ('shell', 1, GrIfs) of
				%% Line 93
				<{'shell',Shell}> when 'true' ->
				    %% Line 94
				    apply 'whereis_evaluator'/1
					(Shell)
				%% Line 95
				<'false'> when 'true' ->
				    %% Line 96
				    'undefined'
				( <_cor2> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor2})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'whereis_evaluator'/1 =
    %% Line 104
    fun (_cor0) ->
	%% Line 105
	case call 'erlang':'process_info'
		 (_cor0, 'dictionary') of
	  %% Line 106
	  <{'dictionary',Dict}> when 'true' ->
	      %% Line 107
	      case call 'lists':'keyfind'
		       ('evaluator', 1, Dict) of
		%% Line 108
		<{_cor4,Eval}>
		    when call 'erlang':'is_pid'
			  (Eval) ->
		    %% Line 109
		    Eval
		%% Line 110
		<_cor5> when 'true' ->
		    %% Line 111
		    'undefined'
	      end
	  %% Line 113
	  <_cor6> when 'true' ->
	      %% Line 114
	      'undefined'
	end
'start_restricted'/1 =
    %% Line 123
    fun (_cor0) ->
	case _cor0 of
	  <RShMod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 124
	      case call 'code':'ensure_loaded'
		       (RShMod) of
		%% Line 125
		<{'module',_cor5}>
		    when call 'erlang':'=:='
			  (_cor5,
			   RShMod) ->
		    do  %% Line 126
			call 'application':'set_env'
			    ('stdlib', 'restricted_shell', RShMod)
			%% Line 127
			call 'erlang':'exit'
			    ('restricted_shell_started')
		%% Line 128
		<Error = {'error',What}> when 'true' ->
		    let <_cor1> =
			%% Line 131
			call 'io_lib':'fwrite'
			    (%% Line 132
			     [82|[101|[115|[116|[114|[105|[99|[116|[101|[100|[32|[115|[104|[101|[108|[108|[32|[109|[111|[100|[117|[108|[101|[32|[126|[119|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 133
																																		[RShMod|[What|[]]])
		    in  let <_cor2> =
			    %% Line 130
			    call 'lists':'flatten'
				(_cor1)
			in  do  %% Line 129
				call 'error_logger':'error_report'
				    (_cor2)
				%% Line 134
				Error
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'start_restricted',1}}] )
	    -| ['compiler_generated'] )
	end
'stop_restricted'/0 =
    %% Line 139
    fun () ->
	do  %% Line 140
	    call 'application':'unset_env'
		('stdlib', 'restricted_shell')
	    %% Line 141
	    call 'erlang':'exit'
		('restricted_shell_stopped')
'server'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	do  %% Line 146
	    call 'erlang':'put'
		('no_control_g', _cor1)
	    %% Line 147
	    apply 'server'/1
		(_cor0)
'server'/1 =
    %% Line 162
    fun (_cor0) ->
	do  %% Line 163
	    case call 'init':'get_argument'
		     ('async_shell_start') of
	      %% Line 164
	      <{'ok',_cor20}> when 'true' ->
		  'ok'
	      %% Line 166
	      <_cor21>
		  when let <_cor1> =
			call 'erlang':'=:='
			    (_cor0, 'false')
		    in  let <_cor2> =
			    call 'erlang':'is_boolean'
				(_cor0)
			in  call 'erlang':'and'
				(_cor1, _cor2) ->
		  'ok'
	      %% Line 168
	      <_cor22> when 'true' ->
		  let <_cor3> =
		      %% Line 169
		      call 'erlang':'self'
			  ()
		  in  %% Line 169
		      case call 'init':'notify_when_started'
			       (_cor3) of
			%% Line 170
			<'started'> when 'true' ->
			    'ok'
			%% Line 172
			<_cor23> when 'true' ->
			    %% Line 173
			    call 'init':'wait_until_started'
				()
		      end
	    end
	    let <Bs> =
		%% Line 177
		call 'erl_eval':'new_bindings'
		    ()
	    in  let <RT> =
		    %% Line 182
		    call 'ets':'new'
			('shell_records', ['public'|['ordered_set']])
		in  let <_X_> =
			%% Line 183
			apply 'initiate_records'/2
			    (Bs, RT)
		    in  do  %% Line 184
			    call 'erlang':'process_flag'
				('trap_exit', 'true')
			    let <_cor11> =
				%% Line 188
				case call 'application':'get_env'
					 ('stdlib', 'restricted_shell') of
				  %% Line 189
				  <{'ok',RShMod}>
				      when call 'erlang':'is_atom'
					    (RShMod) ->
				      do  %% Line 190
					  call 'io':'fwrite'
					      (#{#<82>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']]),
						 #<116>(8,1,'integer',['unsigned'|['big']]),
						 #<114>(8,1,'integer',['unsigned'|['big']]),
						 #<105>(8,1,'integer',['unsigned'|['big']]),
						 #<99>(8,1,'integer',['unsigned'|['big']]),
						 #<116>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<100>(8,1,'integer',['unsigned'|['big']]),
						 #<32>(8,1,'integer',['unsigned'|['big']])}#, [])
					  %% Line 191
					  case call 'code':'ensure_loaded'
						   (RShMod) of
					    %% Line 192
					    <{'module',_cor24}>
						when call 'erlang':'=:='
						      (_cor24,
						       RShMod) ->
						%% Line 193
						'undefined'
					    %% Line 194
					    <{'error',What}> when 'true' ->
						%% Line 195
						{RShMod,What}
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor9})
					      -| ['compiler_generated'] )
					  end
				  %% Line 197
				  <{'ok',Term}> when 'true' ->
				      %% Line 198
				      {Term,'not_an_atom'}
				  %% Line 199
				  <'undefined'> when 'true' ->
				      %% Line 200
				      'undefined'
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
			    in  do  %% Line 203
				    case call 'erlang':'get'
					     ('no_control_g') of
				      %% Line 204
				      <'true'> when 'true' ->
					  let <_cor13> =
					      %% Line 205
					      call 'erlang':'system_info'
						  ('version')
					  in  %% Line 205
					      call 'io':'fwrite'
						  (#{#<69>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<104>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<86>(8,1,'integer',['unsigned'|['big']]),
						     #<126>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor13|[]])
				      %% Line 206
				      <_X_undefined_or_false> when 'true' ->
					  let <_cor14> =
					      %% Line 208
					      call 'erlang':'system_info'
						  ('version')
					  in  %% Line 207
					      call 'io':'fwrite'
						  (#{#<69>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<104>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<86>(8,1,'integer',['unsigned'|['big']]),
						     #<126>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<40>(8,1,'integer',['unsigned'|['big']]),
						     #<97>(8,1,'integer',['unsigned'|['big']]),
						     #<98>(8,1,'integer',['unsigned'|['big']]),
						     #<111>(8,1,'integer',['unsigned'|['big']]),
						     #<114>(8,1,'integer',['unsigned'|['big']]),
						     #<116>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<119>(8,1,'integer',['unsigned'|['big']]),
						     #<105>(8,1,'integer',['unsigned'|['big']]),
						     #<116>(8,1,'integer',['unsigned'|['big']]),
						     #<104>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<94>(8,1,'integer',['unsigned'|['big']]),
						     #<71>(8,1,'integer',['unsigned'|['big']]),
						     #<41>(8,1,'integer',['unsigned'|['big']]),
						     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 208
												  [_cor14|[]])
				    end
				    do  %% Line 210
					call 'erlang':'erase'
					    ('no_control_g')
					do  %% Line 212
					    case _cor11 of
					      %% Line 213
					      <'undefined'> when 'true' ->
						  'ok'
					      %% Line 215
					      <{RShMod2,What2}> when 'true' ->
						  do  %% Line 216
						      call 'io':'fwrite'
							  (%% Line 217
							   [87|[97|[114|[110|[105|[110|[103|[33|[32|[82|[101|[115|[116|[114|[105|[99|[116|[101|[100|[32|[115|[104|[101|[108|[108|[32|[109|[111|[100|[117|[108|[101|[32|[126|[119|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[116|[112|[46|[10|[79|[110|[108|[121|[32|[116|[104|[101|[32|[99|[111|[109|[109|[97|[110|[100|[115|[32|[113|[40|[41|[32|[97|[110|[100|[32|[105|[110|[105|[116|[58|[115|[116|[111|[112|[40|[41|[32|[119|[105|[108|[108|[32|[98|[101|[32|[97|[108|[108|[111|[119|[101|[100|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 219
																																																																																			  [RShMod2|[What2|[]]])
						      %% Line 220
						      call 'application':'set_env'
							  ('stdlib', 'restricted_shell', 'shell')
					      ( <_cor16> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor16})
						-| ['compiler_generated'] )
					    end
					    %% Line 223
					    case apply 'check_and_get_history_and_results'/0
						     () of
					      <{History,Results}> when 'true' ->
						  let <_cor18> =
						      %% Line 224
						      apply 'start_eval'/3
							  (Bs, RT, [])
						  in  %% Line 224
						      apply 'server_loop'/7
							  (0, _cor18, Bs, RT, [], History, Results)
					      ( <_cor17> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor17})
						-| ['compiler_generated'] )
					    end
'server_loop'/7 =
    %% Line 226
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <N> =
	    %% Line 227
	    call 'erlang':'+'
		(_cor6, 1)
	in  %% Line 228
	    case apply 'prompt'/5
		     (N, _cor5, _cor4, _cor3, _cor2) of
	      <{Eval_1,Bs0,Ds0,Prompt}> when 'true' ->
		  %% Line 229
		  case apply 'get_command'/5
			   (Prompt, Eval_1, Bs0, _cor3, Ds0) of
		    <{Res,Eval0}> when 'true' ->
			%% Line 230
			case Res of
			  %% Line 231
			  <{'ok',Es0}> when 'true' ->
			      %% Line 232
			      case apply 'expand_hist'/2
				       (Es0, N) of
				%% Line 233
				<{'ok',Es}> when 'true' ->
				    %% Line 234
				    case apply 'shell_cmd'/6
					     (Es, Eval0, Bs0, _cor3, Ds0, 'cmd') of
				      <{V,Eval,Bs,Ds}> when 'true' ->
					  %% Line 235
					  case apply 'check_and_get_history_and_results'/0
						   () of
					    <{History,Results}> when 'true' ->
						do  %% Line 236
						    apply 'add_cmd'/3
							(N, Es, V)
						    let <_cor13> =
							%% Line 237
							call 'erlang':'-'
							    (N, History)
						    in  let <_cor12> =
							    %% Line 237
							    call 'erlang':'-'
								(N, _cor1)
							in  let <HB1> =
								%% Line 237
								apply 'del_cmd'/4
								    ('command', _cor13, _cor12, 'false')
							    in  let <_cor16> =
								    %% Line 238
								    call 'erlang':'-'
									(N, Results)
								in  let <_cor15> =
									%% Line 238
									call 'erlang':'-'
									    (N, _cor0)
								    in  let <HB> =
									    %% Line 238
									    apply 'del_cmd'/4
										('result', _cor16, _cor15, HB1)
									in  do  %% Line 242
										case <> of
										  %% Line 243
										  <>
										      when call 'erlang':'=:='
											    (HB,
											     'true') ->
										      let <_cor18> =
											  %% Line 244
											  call 'erlang':'self'
											      ()
										      in  %% Line 244
											  apply 'garb'/1
											      (_cor18)
										  %% Line 245
										  <> when 'true' ->
										      'ok'
										end
										%% Line 248
										apply 'server_loop'/7
										    (N, Eval, Bs, _cor3, Ds, History, Results)
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor11})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor10})
					-| ['compiler_generated'] )
				    end
				%% Line 249
				<{'error',E}> when 'true' ->
				    do  %% Line 250
					apply 'fwrite_severity'/3
					    ('benign', #{#<126>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<115>(8,1,'integer',['unsigned'|['big']])}#, [E|[]])
					%% Line 251
					apply 'server_loop'/7
					    (_cor6, Eval0, Bs0, _cor3, Ds0, _cor1, _cor0)
				( <_cor19> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor19})
				  -| ['compiler_generated'] )
			      end
			  %% Line 253
			  <{'error',{Line,Mod,What}}> when 'true' ->
			      let <_cor20> =
				  %% Line 255
				  call Mod:'format_error'
				      (What)
			      in  do  %% Line 254
				      apply 'fwrite_severity'/3
					  ('benign', #{#<126>(8,1,'integer',['unsigned'|['big']]),
						       #<119>(8,1,'integer',['unsigned'|['big']]),
						       #<58>(8,1,'integer',['unsigned'|['big']]),
						       #<32>(8,1,'integer',['unsigned'|['big']]),
						       #<126>(8,1,'integer',['unsigned'|['big']]),
						       #<116>(8,1,'integer',['unsigned'|['big']]),
						       #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 255
												     [Line|[_cor20|[]]])
				      %% Line 256
				      apply 'server_loop'/7
					  (_cor6, Eval0, Bs0, _cor3, Ds0, _cor1, _cor0)
			  %% Line 257
			  <{'error','terminated'}> when 'true' ->
			      do  %% Line 258
				  call 'erlang':'exit'
				      (Eval0, 'kill')
				  %% Line 259
				  'terminated'
			  %% Line 260
			  <{'error','interrupted'}> when 'true' ->
			      do  %% Line 261
				  call 'erlang':'exit'
				      (Eval0, 'kill')
				  %% Line 262
				  case apply 'shell_rep'/4
					   (Eval0, Bs0, _cor3, Ds0) of
				    <{_cor31,Eval,_cor32,_cor33}> when 'true' ->
					%% Line 263
					apply 'server_loop'/7
					    (_cor6, Eval, Bs0, _cor3, Ds0, _cor1, _cor0)
				    ( <_cor21> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor21})
				      -| ['compiler_generated'] )
				  end
			  %% Line 264
			  <{'error','tokens'}> when 'true' ->
			      do  %% Line 265
				  apply 'fwrite_severity'/3
				      ('benign', #{#<126>(8,1,'integer',['unsigned'|['big']]),
						   #<119>(8,1,'integer',['unsigned'|['big']]),
						   #<58>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<73>(8,1,'integer',['unsigned'|['big']]),
						   #<110>(8,1,'integer',['unsigned'|['big']]),
						   #<118>(8,1,'integer',['unsigned'|['big']]),
						   #<97>(8,1,'integer',['unsigned'|['big']]),
						   #<108>(8,1,'integer',['unsigned'|['big']]),
						   #<105>(8,1,'integer',['unsigned'|['big']]),
						   #<100>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<111>(8,1,'integer',['unsigned'|['big']]),
						   #<107>(8,1,'integer',['unsigned'|['big']]),
						   #<101>(8,1,'integer',['unsigned'|['big']]),
						   #<110>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<46>(8,1,'integer',['unsigned'|['big']])}#, %% Line 266
												[N|[]])
				  %% Line 267
				  apply 'server_loop'/7
				      (_cor6, Eval0, Bs0, _cor3, Ds0, _cor1, _cor0)
			  %% Line 268
			  <'eof'> when 'true' ->
			      let <_cor22> =
				  %% Line 269
				  call 'erlang':'node'
				      ()
			      in  do  %% Line 269
				      apply 'fwrite_severity'/3
					  ('fatal', #{#<84>(8,1,'integer',['unsigned'|['big']]),
						      #<101>(8,1,'integer',['unsigned'|['big']]),
						      #<114>(8,1,'integer',['unsigned'|['big']]),
						      #<109>(8,1,'integer',['unsigned'|['big']]),
						      #<105>(8,1,'integer',['unsigned'|['big']]),
						      #<110>(8,1,'integer',['unsigned'|['big']]),
						      #<97>(8,1,'integer',['unsigned'|['big']]),
						      #<116>(8,1,'integer',['unsigned'|['big']]),
						      #<105>(8,1,'integer',['unsigned'|['big']]),
						      #<110>(8,1,'integer',['unsigned'|['big']]),
						      #<103>(8,1,'integer',['unsigned'|['big']]),
						      #<32>(8,1,'integer',['unsigned'|['big']]),
						      #<101>(8,1,'integer',['unsigned'|['big']]),
						      #<114>(8,1,'integer',['unsigned'|['big']]),
						      #<108>(8,1,'integer',['unsigned'|['big']]),
						      #<97>(8,1,'integer',['unsigned'|['big']]),
						      #<110>(8,1,'integer',['unsigned'|['big']]),
						      #<103>(8,1,'integer',['unsigned'|['big']]),
						      #<32>(8,1,'integer',['unsigned'|['big']]),
						      #<40>(8,1,'integer',['unsigned'|['big']]),
						      #<126>(8,1,'integer',['unsigned'|['big']]),
						      #<119>(8,1,'integer',['unsigned'|['big']]),
						      #<41>(8,1,'integer',['unsigned'|['big']])}#, [_cor22|[]])
				      %% Line 270
				      call 'erlang':'halt'
					  ()
			  ( <_cor23> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor23})
			    -| ['compiler_generated'] )
			end
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor9})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor8})
		-| ['compiler_generated'] )
	    end
'get_command'/5 =
    %% Line 273
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Parse> =
	    %% Line 275
	    ( fun () ->
		  let <_cor5> =
		      %% Line 278
		      call 'erlang':'group_leader'
			  ()
		  in  let <_cor12> =
			  %% Line 277
			  case %% Line 278
			       call 'io':'scan_erl_exprs'
				   (_cor5, _cor4, 1) of
			    %% Line 280
			    <{'ok',Toks,_X_EndPos}> when 'true' ->
				%% Line 281
				call 'erl_parse':'parse_exprs'
				    (Toks)
			    %% Line 282
			    <{'eof',_X_EndPos}> when 'true' ->
				%% Line 283
				'eof'
			    %% Line 284
			    <{'error',ErrorInfo,_X_EndPos}> when 'true' ->
				let <Opts> =
				    %% Line 286
				    call 'io':'getopts'
					()
				in  let <TmpOpts> =
					%% Line 287
					call 'lists':'keyreplace'
					    ('echo', 1, Opts, %% Line 288
							      {'echo','false'})
				    in  let <_X_> =
					    %% Line 289
					    ( call 'io':'setopts'
						  (TmpOpts)
					      -| ['result_not_wanted'] )
					in  let <_X_> =
						%% Line 290
						( call 'io':'get_line'
						      ('')
						  -| ['result_not_wanted'] )
					    in  let <_X_> =
						    %% Line 291
						    ( call 'io':'setopts'
							  (Opts)
						      -| ['result_not_wanted'] )
						in  %% Line 292
						    {'error',ErrorInfo}
			    %% Line 293
			    <Else> when 'true' ->
				%% Line 294
				Else
			  end
		      in  %% Line 276
			  call 'erlang':'exit'
			      (_cor12)
	      -| [{'id',{0,0,'-get_command/5-fun-0-'}}] )
	in  let <Pid> =
		%% Line 298
		call 'erlang':'spawn_link'
		    (Parse)
	    in  %% Line 299
		apply 'get_command1'/5
		    (Pid, _cor3, _cor2, _cor1, _cor0)
'get_command1'/5 =
    %% Line 301
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 302
	receive
	  %% Line 303
	  <{'EXIT',_cor12,Res}>
	      when call 'erlang':'=:='
		    (_cor12,
		     _cor4) ->
	      %% Line 304
	      {Res,_cor3}
	  %% Line 305
	  <{'EXIT',_cor13,{Reason,Stacktrace}}>
	      when call 'erlang':'=:='
		    (_cor13,
		     _cor3) ->
	      do  %% Line 306
		  apply 'report_exception'/3
		      ('error', {Reason,Stacktrace}, _cor1)
		  let <_cor5> =
		      %% Line 307
		      apply 'start_eval'/3
			  (_cor2, _cor1, _cor0)
		  in  %% Line 307
		      apply 'get_command1'/5
			  (_cor4, _cor5, _cor2, _cor1, _cor0)
	  %% Line 308
	  <{'EXIT',_cor14,Reason}>
	      when call 'erlang':'=:='
		    (_cor14,
		     _cor3) ->
	      do  %% Line 309
		  apply 'report_exception'/3
		      ('error', {Reason,[]}, _cor1)
		  let <_cor6> =
		      %% Line 310
		      apply 'start_eval'/3
			  (_cor2, _cor1, _cor0)
		  in  %% Line 310
		      apply 'get_command1'/5
			  (_cor4, _cor6, _cor2, _cor1, _cor0)
	after 'infinity' ->
	  'true'
'prompt'/5 =
    %% Line 313
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 314
	case apply 'get_prompt_func'/0
		 () of
	  %% Line 315
	  <{M,F}> when 'true' ->
	      let <L> =
		  %% Line 316
		  [{'history',_cor4}|[]]
	      in  let <C> =
		      %% Line 317
		      {'call',1,{'remote',1,{'atom',1,M},{'atom',1,F}},[{'value',1,L}|[]]}
		  in  %% Line 318
		      case apply 'shell_cmd'/6
			       ([C|[]], _cor3, _cor2, _cor1, _cor0, 'pmt') of
			<{V,Eval,Bs,Ds}> when 'true' ->
			    let <_cor9> =
				%% Line 319
				case V of
				  %% Line 320
				  <{'pmt',Val}> when 'true' ->
				      %% Line 321
				      Val
				  %% Line 322
				  <_cor17> when 'true' ->
				      do  %% Line 323
					  apply 'bad_prompt_func'/1
					      ({M,F})
					  %% Line 324
					  apply 'default_prompt'/1
					      (_cor4)
				end
			    in  %% Line 319
				{Eval,Bs,Ds,_cor9}
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	  %% Line 326
	  <'default'> when 'true' ->
	      let <_cor10> =
		  %% Line 327
		  apply 'default_prompt'/1
		      (_cor4)
	      in  %% Line 327
		  {_cor3,_cor2,_cor0,_cor10}
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'get_prompt_func'/0 =
    %% Line 330
    fun () ->
	%% Line 331
	case call 'application':'get_env'
		 ('stdlib', 'shell_prompt_func') of
	  %% Line 332
	  <{'ok',PromptFunc = {M,F}}>
	      when let <_cor0> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor1> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor0, _cor1) ->
	      %% Line 333
	      PromptFunc
	  %% Line 334
	  <{'ok',Default = 'default'}> when 'true' ->
	      %% Line 335
	      Default
	  %% Line 336
	  <{'ok',Term}> when 'true' ->
	      do  %% Line 337
		  apply 'bad_prompt_func'/1
		      (Term)
		  %% Line 338
		  'default'
	  %% Line 339
	  <'undefined'> when 'true' ->
	      %% Line 340
	      'default'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'bad_prompt_func'/1 =
    %% Line 343
    fun (_cor0) ->
	%% Line 344
	apply 'fwrite_severity'/3
	    ('benign', [66|[97|[100|[32|[112|[114|[111|[109|[112|[116|[32|[102|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
'default_prompt'/1 =
    %% Line 346
    fun (_cor0) ->
	%% Line 349
	case call 'erlang':'is_alive'
		 () of
	  %% Line 350
	  <'true'> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'node'
		      ()
	      in  call 'io_lib':'format'
		      (#{#<40>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<41>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']]),
			 #<62>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']])}#, [_cor1|[_cor0|[]]])
	  %% Line 351
	  <'false'> when 'true' ->
	      call 'io_lib':'format'
		  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
		     #<119>(8,1,'integer',['unsigned'|['big']]),
		     #<62>(8,1,'integer',['unsigned'|['big']]),
		     #<32>(8,1,'integer',['unsigned'|['big']])}#, [_cor0|[]])
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'expand_hist'/2 =
    %% Line 358
    fun (_cor1,_cor0) ->
	catch
	    let <_cor2> =
		%% Line 359
		apply 'expand_exprs'/2
		    (_cor1, _cor0)
	    in  %% Line 359
		{'ok',_cor2}
'expand_exprs'/2 =
    %% Line 361
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],C> when 'true' ->
	      let <_cor2> =
		  %% Line 362
		  apply 'expand_expr'/2
		      (E, C)
	      in  let <_cor3> =
		      %% Line 362
		      apply 'expand_exprs'/2
			  (Es, C)
		  in  %% Line 362
		      [_cor2|_cor3]
	  %% Line 363
	  <[],_X_C> when 'true' ->
	      %% Line 364
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'expand_exprs',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_expr'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'cons',L,H,T},C> when 'true' ->
	      let <_cor3> =
		  %% Line 367
		  apply 'expand_expr'/2
		      (H, C)
	      in  let <_cor2> =
		      %% Line 367
		      apply 'expand_expr'/2
			  (T, C)
		  in  %% Line 367
		      {'cons',L,_cor3,_cor2}
	  %% Line 368
	  <{'lc',L,E,Qs},C> when 'true' ->
	      let <_cor5> =
		  %% Line 369
		  apply 'expand_expr'/2
		      (E, C)
	      in  let <_cor4> =
		      %% Line 369
		      apply 'expand_quals'/2
			  (Qs, C)
		  in  %% Line 369
		      {'lc',L,_cor5,_cor4}
	  %% Line 370
	  <{'bc',L,E,Qs},C> when 'true' ->
	      let <_cor7> =
		  %% Line 371
		  apply 'expand_expr'/2
		      (E, C)
	      in  let <_cor6> =
		      %% Line 371
		      apply 'expand_quals'/2
			  (Qs, C)
		  in  %% Line 371
		      {'bc',L,_cor7,_cor6}
	  %% Line 372
	  <{'tuple',L,Elts},C> when 'true' ->
	      let <_cor8> =
		  %% Line 373
		  apply 'expand_exprs'/2
		      (Elts, C)
	      in  %% Line 373
		  {'tuple',L,_cor8}
	  %% Line 374
	  <{'record_index',L,Name,F},C> when 'true' ->
	      let <_cor9> =
		  %% Line 375
		  apply 'expand_expr'/2
		      (F, C)
	      in  %% Line 375
		  {'record_index',L,Name,_cor9}
	  %% Line 376
	  <{'record',L,Name,Is},C> when 'true' ->
	      let <_cor10> =
		  %% Line 377
		  apply 'expand_fields'/2
		      (Is, C)
	      in  %% Line 377
		  {'record',L,Name,_cor10}
	  %% Line 378
	  <{'record_field',L,R,Name,F},C> when 'true' ->
	      let <_cor12> =
		  %% Line 379
		  apply 'expand_expr'/2
		      (R, C)
	      in  let <_cor11> =
		      %% Line 379
		      apply 'expand_expr'/2
			  (F, C)
		  in  %% Line 379
		      {'record_field',L,_cor12,Name,_cor11}
	  %% Line 380
	  <{'record',L,R,Name,Ups},C> when 'true' ->
	      let <_cor14> =
		  %% Line 381
		  apply 'expand_expr'/2
		      (R, C)
	      in  let <_cor13> =
		      %% Line 381
		      apply 'expand_fields'/2
			  (Ups, C)
		  in  %% Line 381
		      {'record',L,_cor14,Name,_cor13}
	  %% Line 382
	  <{'record_field',L,R,F},C> when 'true' ->
	      let <_cor16> =
		  %% Line 383
		  apply 'expand_expr'/2
		      (R, C)
	      in  let <_cor15> =
		      %% Line 383
		      apply 'expand_expr'/2
			  (F, C)
		  in  %% Line 383
		      {'record_field',L,_cor16,_cor15}
	  %% Line 384
	  <{'block',L,Es},C> when 'true' ->
	      let <_cor17> =
		  %% Line 385
		  apply 'expand_exprs'/2
		      (Es, C)
	      in  %% Line 385
		  {'block',L,_cor17}
	  %% Line 386
	  <{'if',L,Cs},C> when 'true' ->
	      let <_cor18> =
		  %% Line 387
		  apply 'expand_cs'/2
		      (Cs, C)
	      in  %% Line 387
		  {'if',L,_cor18}
	  %% Line 388
	  <{'case',L,E,Cs},C> when 'true' ->
	      let <_cor20> =
		  %% Line 389
		  apply 'expand_expr'/2
		      (E, C)
	      in  let <_cor19> =
		      %% Line 389
		      apply 'expand_cs'/2
			  (Cs, C)
		  in  %% Line 389
		      {'case',L,_cor20,_cor19}
	  %% Line 390
	  <{'try',L,Es,Scs,Ccs,As},C> when 'true' ->
	      let <_cor24> =
		  %% Line 391
		  apply 'expand_exprs'/2
		      (Es, C)
	      in  let <_cor23> =
		      %% Line 391
		      apply 'expand_cs'/2
			  (Scs, C)
		  in  let <_cor22> =
			  %% Line 392
			  apply 'expand_cs'/2
			      (Ccs, C)
		      in  let <_cor21> =
			      %% Line 392
			      apply 'expand_exprs'/2
				  (As, C)
			  in  %% Line 391
			      {'try',L,_cor24,_cor23,_cor22,_cor21}
	  %% Line 393
	  <{'receive',L,Cs},C> when 'true' ->
	      let <_cor25> =
		  %% Line 394
		  apply 'expand_cs'/2
		      (Cs, C)
	      in  %% Line 394
		  {'receive',L,_cor25}
	  %% Line 395
	  <{'receive',L,Cs,To,ToEs},C> when 'true' ->
	      let <_cor28> =
		  %% Line 396
		  apply 'expand_cs'/2
		      (Cs, C)
	      in  let <_cor27> =
		      %% Line 396
		      apply 'expand_expr'/2
			  (To, C)
		  in  let <_cor26> =
			  %% Line 396
			  apply 'expand_exprs'/2
			      (ToEs, C)
		      in  %% Line 396
			  {'receive',L,_cor28,_cor27,_cor26}
	  %% Line 397
	  <{'call',L,{'atom',_cor46,'e'},[N|[]]},C> when 'true' ->
	      %% Line 398
	      case apply 'get_cmd'/2
		       (N, C) of
		%% Line 399
		<{'undefined',_cor47,_cor48}> when 'true' ->
		    %% Line 400
		    apply 'no_command'/1
			(N)
		%% Line 401
		<{[Ce|[]],_X_V,_X_CommandN}> when 'true' ->
		    %% Line 402
		    Ce
		%% Line 403
		<{Ces,_X_V,_X_CommandN}>
		    when call 'erlang':'is_list'
			  (Ces) ->
		    %% Line 404
		    {'block',L,Ces}
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 406
	  <{'call',_X_L,{'atom',_cor49,'v'},[N|[]]},C> when 'true' ->
	      %% Line 407
	      case apply 'get_cmd'/2
		       (N, C) of
		%% Line 408
		<{_cor50,'undefined',_cor51}> when 'true' ->
		    %% Line 409
		    apply 'no_command'/1
			(N)
		%% Line 410
		<{Ces,V,CommandN}>
		    when call 'erlang':'is_list'
			  (Ces) ->
		    %% Line 411
		    {'value',CommandN,V}
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor30})
		  -| ['compiler_generated'] )
	      end
	  %% Line 413
	  <{'call',L,F,Args},C> when 'true' ->
	      let <_cor32> =
		  %% Line 414
		  apply 'expand_expr'/2
		      (F, C)
	      in  let <_cor31> =
		      %% Line 414
		      apply 'expand_exprs'/2
			  (Args, C)
		  in  %% Line 414
		      {'call',L,_cor32,_cor31}
	  %% Line 415
	  <{'catch',L,E},C> when 'true' ->
	      let <_cor33> =
		  %% Line 416
		  apply 'expand_expr'/2
		      (E, C)
	      in  %% Line 416
		  {'catch',L,_cor33}
	  %% Line 417
	  <{'match',L,Lhs,Rhs},C> when 'true' ->
	      let <_cor34> =
		  %% Line 418
		  apply 'expand_expr'/2
		      (Rhs, C)
	      in  %% Line 418
		  {'match',L,Lhs,_cor34}
	  %% Line 419
	  <{'op',L,Op,Arg},C> when 'true' ->
	      let <_cor35> =
		  %% Line 420
		  apply 'expand_expr'/2
		      (Arg, C)
	      in  %% Line 420
		  {'op',L,Op,_cor35}
	  %% Line 421
	  <{'op',L,Op,Larg,Rarg},C> when 'true' ->
	      let <_cor37> =
		  %% Line 422
		  apply 'expand_expr'/2
		      (Larg, C)
	      in  let <_cor36> =
		      %% Line 422
		      apply 'expand_expr'/2
			  (Rarg, C)
		  in  %% Line 422
		      {'op',L,Op,_cor37,_cor36}
	  %% Line 423
	  <{'remote',L,M,F},C> when 'true' ->
	      let <_cor39> =
		  %% Line 424
		  apply 'expand_expr'/2
		      (M, C)
	      in  let <_cor38> =
		      %% Line 424
		      apply 'expand_expr'/2
			  (F, C)
		  in  %% Line 424
		      {'remote',L,_cor39,_cor38}
	  %% Line 425
	  <{'fun',L,{'clauses',Cs}},C> when 'true' ->
	      let <_cor40> =
		  %% Line 426
		  apply 'expand_exprs'/2
		      (Cs, C)
	      in  %% Line 426
		  {'fun',L,{'clauses',_cor40}}
	  %% Line 427
	  <{'named_fun',L,Name,Cs},C> when 'true' ->
	      let <_cor41> =
		  %% Line 428
		  apply 'expand_exprs'/2
		      (Cs, C)
	      in  %% Line 428
		  {'named_fun',L,Name,_cor41}
	  %% Line 429
	  <{'clause',L,H,G,B},C> when 'true' ->
	      let <_cor42> =
		  %% Line 431
		  apply 'expand_exprs'/2
		      (B, C)
	      in  %% Line 431
		  {'clause',L,H,G,_cor42}
	  %% Line 432
	  <{'bin',L,Fs},C> when 'true' ->
	      let <_cor43> =
		  %% Line 433
		  apply 'expand_bin_elements'/2
		      (Fs, C)
	      in  %% Line 433
		  {'bin',L,_cor43}
	  %% Line 434
	  <E,_X_C> when 'true' ->
	      %% Line 435
	      E
	end
'expand_cs'/2 =
    %% Line 437
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'clause',L,P,G,B}|Cs],C> when 'true' ->
	      let <_cor2> =
		  %% Line 438
		  apply 'expand_exprs'/2
		      (B, C)
	      in  let <_cor3> =
		      %% Line 438
		      apply 'expand_cs'/2
			  (Cs, C)
		  in  %% Line 438
		      [{'clause',L,P,G,_cor2}|_cor3]
	  %% Line 439
	  <[],_X_C> when 'true' ->
	      %% Line 440
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'expand_cs',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_fields'/2 =
    %% Line 442
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'record_field',L,F,V}|Fs],C> when 'true' ->
	      let <_cor3> =
		  %% Line 443
		  apply 'expand_expr'/2
		      (F, C)
	      in  let <_cor2> =
		      %% Line 443
		      apply 'expand_expr'/2
			  (V, C)
		  in  let <_cor4> =
			  %% Line 444
			  apply 'expand_fields'/2
			      (Fs, C)
		      in  %% Line 443
			  [{'record_field',L,_cor3,_cor2}|_cor4]
	  %% Line 445
	  <[],_X_C> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'expand_fields',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_quals'/2 =
    %% Line 447
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'generate',L,P,E}|Qs],C> when 'true' ->
	      let <_cor2> =
		  %% Line 448
		  apply 'expand_expr'/2
		      (E, C)
	      in  let <_cor3> =
		      %% Line 448
		      apply 'expand_quals'/2
			  (Qs, C)
		  in  %% Line 448
		      [{'generate',L,P,_cor2}|_cor3]
	  %% Line 449
	  <[{'b_generate',L,P,E}|Qs],C> when 'true' ->
	      let <_cor4> =
		  %% Line 450
		  apply 'expand_expr'/2
		      (E, C)
	      in  let <_cor5> =
		      %% Line 450
		      apply 'expand_quals'/2
			  (Qs, C)
		  in  %% Line 450
		      [{'b_generate',L,P,_cor4}|_cor5]
	  %% Line 451
	  <[E|Qs],C> when 'true' ->
	      let <_cor6> =
		  %% Line 452
		  apply 'expand_expr'/2
		      (E, C)
	      in  let <_cor7> =
		      %% Line 452
		      apply 'expand_quals'/2
			  (Qs, C)
		  in  %% Line 452
		      [_cor6|_cor7]
	  %% Line 453
	  <[],_X_C> when 'true' ->
	      []
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'expand_quals',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_bin_elements'/2 =
    %% Line 455
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_C> when 'true' ->
	      %% Line 456
	      []
	  %% Line 457
	  <[{'bin_element',L,E,Sz,Ts}|Fs],C> when 'true' ->
	      let <_cor2> =
		  %% Line 458
		  apply 'expand_expr'/2
		      (E, C)
	      in  let <_cor3> =
		      %% Line 458
		      apply 'expand_bin_elements'/2
			  (Fs, C)
		  in  %% Line 458
		      [{'bin_element',L,_cor2,Sz,Ts}|_cor3]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'expand_bin_elements',2}}] )
	    -| ['compiler_generated'] )
	end
'no_command'/1 =
    %% Line 460
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 463
	    apply 'enc'/0
		()
	in  let <_cor2> =
		%% Line 463
		call 'erl_pp':'expr'
		    (_cor0, _cor1)
	    in  let <_cor3> =
		    %% Line 462
		    call 'io_lib':'fwrite'
			(#{#<126>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<115>(8,1,'integer',['unsigned'|['big']]),
			   #<58>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<109>(8,1,'integer',['unsigned'|['big']]),
			   #<109>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<100>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<102>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<117>(8,1,'integer',['unsigned'|['big']]),
			   #<110>(8,1,'integer',['unsigned'|['big']]),
			   #<100>(8,1,'integer',['unsigned'|['big']])}#, %% Line 463
									 [_cor2|[]])
		in  %% Line 461
		    call 'erlang':'throw'
			({'error',_cor3})
'add_cmd'/3 =
    %% Line 469
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 470
	    call 'erlang':'put'
		({'command',_cor2}, _cor1)
	    %% Line 471
	    call 'erlang':'put'
		({'result',_cor2}, _cor0)
'getc'/1 =
    %% Line 473
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 474
	    call 'erlang':'get'
		({'command',_cor0})
	in  let <_cor1> =
		%% Line 474
		call 'erlang':'get'
		    ({'result',_cor0})
	    in  %% Line 474
		{_cor2,_cor1,_cor0}
'get_cmd'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    catch
		let <_cor2> =
		    %% Line 477
		    call 'erl_eval':'new_bindings'
			()
		in  %% Line 477
		    call 'erl_eval':'expr'
			(_cor1, _cor2)
	in  %% Line 477
	    case _cor3 of
	      %% Line 478
	      <{'value',N,_cor8}>
		  when call 'erlang':'<'
			(N,
			 0) ->
		  let <_cor4> =
		      call 'erlang':'+'
			  (_cor0, N)
		  in  apply 'getc'/1
			  (_cor4)
	      %% Line 479
	      <{'value',N,_cor9}> when 'true' ->
		  apply 'getc'/1
		      (N)
	      %% Line 480
	      <_X_Other> when 'true' ->
		  {'undefined','undefined','undefined'}
	    end
'del_cmd'/4 =
    %% Line 483
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Type,N,N0,HasBin>
	      when call 'erlang':'<'
		    (N,
		     N0) ->
	      %% Line 484
	      HasBin
	  %% Line 485
	  <Type,N,N0,HasBin0> when 'true' ->
	      let <T> =
		  %% Line 486
		  call 'erlang':'erase'
		      ({Type,N})
	      in  let <_cor7> =
		      %% Line 487
		      ( case HasBin0 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'has_binary'/1
				    (T)
			    -| ['compiler_generated'] )
			  ( <_cor5> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor5}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  let <_cor9> =
			  %% Line 488
			  call 'erlang':'-'
			      (N, 1)
		      in  %% Line 488
			  apply 'del_cmd'/4
			      (Type, _cor9, N0, _cor7)
	end
'has_binary'/1 =
    %% Line 490
    fun (_cor0) ->
	%% Line 491
	try
	    do  apply 'has_bin'/1
		    (_cor0)
		'false'
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 492
	      <'throw',Thrown = 'true',_cor6> when 'true' ->
		  Thrown
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'has_bin'/1 =
    %% Line 495
    fun (_cor0) ->
	case _cor0 of
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 496
		  call 'erlang':'tuple_size'
		      (T)
	      in  %% Line 496
		  apply 'has_bin'/2
		      (T, _cor1)
	  %% Line 497
	  <[E|Es]> when 'true' ->
	      do  %% Line 498
		  apply 'has_bin'/1
		      (E)
		  %% Line 499
		  apply 'has_bin'/1
		      (Es)
	  %% Line 500
	  <B>
	      when try
		    let <_cor2> =
			call 'erlang':'byte_size'
			    (_cor0)
		    in  call 'erlang':'>'
			    (_cor2, 64)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 501
	      call 'erlang':'throw'
		  ('true')
	  %% Line 502
	  <T> when 'true' ->
	      %% Line 503
	      T
	end
'has_bin'/2 =
    %% Line 505
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,0> when 'true' ->
	      %% Line 506
	      T
	  %% Line 507
	  <T,I> when 'true' ->
	      let <_cor2> =
		  %% Line 508
		  call 'erlang':'element'
		      (I, T)
	      in  do  %% Line 508
		      apply 'has_bin'/1
			  (_cor2)
		      let <_cor3> =
			  %% Line 509
			  call 'erlang':'-'
			      (I, 1)
		      in  %% Line 509
			  apply 'has_bin'/2
			      (T, _cor3)
	end
'shell_cmd'/6 =
    %% Line 519
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 520
	    call 'erlang':'self'
		()
	in  do  %% Line 520
		call 'erlang':'!'
		    (_cor4, {'shell_cmd',_cor6,{'eval',_cor5},_cor0})
		%% Line 521
		apply 'shell_rep'/4
		    (_cor4, _cor3, _cor2, _cor1)
'shell_rep'/4 =
    %% Line 523
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 524
	receive
	  %% Line 525
	  <{'shell_rep',_cor18,{'value',V,Bs,Ds}}>
	      when call 'erlang':'=:='
		    (_cor18,
		     _cor3) ->
	      %% Line 526
	      {V,_cor3,Bs,Ds}
	  %% Line 527
	  <{'shell_rep',_cor19,{'command_error',{Line,M,Error}}}>
	      when call 'erlang':'=:='
		    (_cor19,
		     _cor3) ->
	      let <_cor4> =
		  %% Line 529
		  call M:'format_error'
		      (Error)
	      in  do  %% Line 528
		      apply 'fwrite_severity'/3
			  ('benign', #{#<126>(8,1,'integer',['unsigned'|['big']]),
				       #<119>(8,1,'integer',['unsigned'|['big']]),
				       #<58>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']])}#, %% Line 529
										     [Line|[_cor4|[]]])
		      %% Line 530
		      {{'EXIT',Error},_cor3,_cor2,_cor0}
	  %% Line 531
	  <{'shell_req',_cor20,'get_cmd'}>
	      when call 'erlang':'=:='
		    (_cor20,
		     _cor3) ->
	      let <_cor6> =
		  %% Line 532
		  call 'erlang':'self'
		      ()
	      in  let <_cor5> =
		      %% Line 532
		      call 'erlang':'get'
			  ()
		  in  do  %% Line 532
			  call 'erlang':'!'
			      (_cor3, {'shell_rep',_cor6,_cor5})
			  %% Line 533
			  apply 'shell_rep'/4
			      (_cor3, _cor2, _cor1, _cor0)
	  %% Line 534
	  <{'shell_req',_cor21,'exit'}>
	      when call 'erlang':'=:='
		    (_cor21,
		     _cor3) ->
	      let <_cor7> =
		  %% Line 535
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 535
		      call 'erlang':'!'
			  (_cor3, {'shell_rep',_cor7,'exit'})
		      %% Line 536
		      call 'erlang':'exit'
			  ('normal')
	  %% Line 537
	  <{'shell_req',_cor22,{'update_dict',Ds}}>
	      when call 'erlang':'=:='
		    (_cor22,
		     _cor3) ->
	      let <_cor8> =
		  %% Line 538
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 538
		      call 'erlang':'!'
			  (_cor3, {'shell_rep',_cor8,'ok'})
		      %% Line 539
		      apply 'shell_rep'/4
			  (_cor3, _cor2, _cor1, Ds)
	  %% Line 540
	  <{'ev_exit',{_cor23,Class,Reason0}}>
	      when call 'erlang':'=:='
		    (_cor23,
		     _cor3) ->
	      do  %% Line 541
		  receive
		    <{'EXIT',_cor24,'normal'}>
			when call 'erlang':'=:='
			      (_cor24,
			       _cor3) ->
			'ok'
		  after 'infinity' ->
		    'ok'
		  do  %% Line 542
		      apply 'report_exception'/3
			  (Class, Reason0, _cor1)
		      let <Reason> =
			  %% Line 543
			  apply 'nocatch'/2
			      (Class, Reason0)
		      in  let <_cor10> =
			      %% Line 544
			      apply 'start_eval'/3
				  (_cor2, _cor1, _cor0)
			  in  %% Line 544
			      {{'EXIT',Reason},_cor10,_cor2,_cor0}
	  %% Line 545
	  <{'ev_caught',{_cor25,Class,Reason0}}>
	      when call 'erlang':'=:='
		    (_cor25,
		     _cor3) ->
	      do  %% Line 546
		  apply 'report_exception'/4
		      (Class, 'benign', Reason0, _cor1)
		  let <Reason> =
		      %% Line 547
		      apply 'nocatch'/2
			  (Class, Reason0)
		  in  %% Line 548
		      {{'EXIT',Reason},_cor3,_cor2,_cor0}
	  %% Line 549
	  <{'EXIT',_X_Id,'interrupt'}> when 'true' ->
	      do  %% Line 550
		  call 'erlang':'exit'
		      (_cor3, 'kill')
		  %% Line 551
		  apply 'shell_rep'/4
		      (_cor3, _cor2, _cor1, _cor0)
	  %% Line 552
	  <{'EXIT',_cor26,{Reason,Stacktrace}}>
	      when call 'erlang':'=:='
		    (_cor26,
		     _cor3) ->
	      do  %% Line 553
		  apply 'report_exception'/3
		      ('exit', {Reason,Stacktrace}, _cor1)
		  let <_cor12> =
		      %% Line 554
		      apply 'start_eval'/3
			  (_cor2, _cor1, _cor0)
		  in  %% Line 554
		      {{'EXIT',Reason},_cor12,_cor2,_cor0}
	  %% Line 555
	  <{'EXIT',_cor27,Reason}>
	      when call 'erlang':'=:='
		    (_cor27,
		     _cor3) ->
	      do  %% Line 556
		  apply 'report_exception'/3
		      ('exit', {Reason,[]}, _cor1)
		  let <_cor13> =
		      %% Line 557
		      apply 'start_eval'/3
			  (_cor2, _cor1, _cor0)
		  in  %% Line 557
		      {{'EXIT',Reason},_cor13,_cor2,_cor0}
	  %% Line 558
	  <{'EXIT',_X_Id,R}> when 'true' ->
	      do  %% Line 559
		  call 'erlang':'exit'
		      (_cor3, R)
		  %% Line 560
		  call 'erlang':'exit'
		      (R)
	  %% Line 561
	  <_X_Other> when 'true' ->
	      %% Line 562
	      apply 'shell_rep'/4
		  (_cor3, _cor2, _cor1, _cor0)
	after 'infinity' ->
	  'true'
'nocatch'/2 =
    %% Line 565
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'throw',{Term,Stack}> when 'true' ->
	      %% Line 566
	      {{'nocatch',Term},Stack}
	  %% Line 567
	  <'error',Reason> when 'true' ->
	      %% Line 568
	      Reason
	  %% Line 569
	  <'exit',Reason> when 'true' ->
	      %% Line 570
	      Reason
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'nocatch',2}}] )
	    -| ['compiler_generated'] )
	end
'report_exception'/3 =
    %% Line 572
    fun (_cor2,_cor1,_cor0) ->
	%% Line 573
	apply 'report_exception'/4
	    (_cor2, 'serious', _cor1, _cor0)
'report_exception'/4 =
    %% Line 575
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Class,Severity,{Reason,Stacktrace},RT> when 'true' ->
	      let <Tag> =
		  %% Line 576
		  apply 'severity_tag'/1
		      (Severity)
	      in  let <_cor5> =
		      %% Line 577
		      call 'erlang':'iolist_size'
			  (Tag)
		  in  let <I> =
			  %% Line 577
			  call 'erlang':'+'
			      (_cor5, 1)
		      in  let <PF> =
			      %% Line 578
			      ( fun (_cor8,_cor7) ->
				    apply 'pp'/3
					(_cor8, _cor7, RT)
				-| [{'id',{0,0,'-report_exception/4-fun-0-'}}] )
			  in  let <SF> =
				  %% Line 579
				  ( fun (_cor16,_cor15,_cor14) ->
					let <_cor13> =
					    call 'erlang':'=:='
						(_cor16, 'erl_eval')
					in  let <_cor12> =
						call 'erlang':'=:='
						    (_cor16, 'shell')
					    in  call 'erlang':'or'
						    (_cor13, _cor12)
				    -| [{'id',{0,0,'-report_exception/4-fun-1-'}}] )
			      in  let <Enc> =
				      %% Line 580
				      apply 'encoding'/0
					  ()
				  in  let <Str> =
					  %% Line 581
					  call 'lib':'format_exception'
					      (I, Class, Reason, Stacktrace, SF, PF, Enc)
				      in  %% Line 582
					  call 'io':'requests'
					      ([{'put_chars','latin1',Tag}|%% Line 583
									   [{'put_chars','unicode',Str}|%% Line 584
													['nl']]])
	  ( <_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'report_exception',4}}] )
	    -| ['compiler_generated'] )
	end
'start_eval'/3 =
    %% Line 586
    fun (_cor2,_cor1,_cor0) ->
	let <Self> =
	    %% Line 587
	    call 'erlang':'self'
		()
	in  let <_cor4> =
		%% Line 588
		( fun () ->
		      apply 'evaluator'/4
			  (Self, _cor2, _cor1, _cor0)
		  -| [{'id',{0,0,'-start_eval/3-fun-0-'}}] )
	    in  let <Eval> =
		    %% Line 588
		    call 'erlang':'spawn_link'
			(_cor4)
		in  do  %% Line 589
			call 'erlang':'put'
			    ('evaluator', Eval)
			%% Line 590
			Eval
'evaluator'/4 =
    %% Line 596
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 597
	    apply 'init_dict'/1
		(_cor0)
	    %% Line 598
	    case call 'application':'get_env'
		     ('stdlib', 'restricted_shell') of
	      %% Line 599
	      <'undefined'> when 'true' ->
		  %% Line 600
		  apply 'eval_loop'/3
		      (_cor3, _cor2, _cor1)
	      %% Line 601
	      <{'ok',RShMod}> when 'true' ->
		  do  %% Line 602
		      case call 'erlang':'get'
			       ('restricted_shell_state') of
			%% Line 603
			<'undefined'> when 'true' ->
			    call 'erlang':'put'
				('restricted_shell_state', [])
			%% Line 604
			<_cor10> when 'true' ->
			    'ok'
		      end
		      do  %% Line 606
			  call 'erlang':'put'
			      ('restricted_expr_state', [])
			  %% Line 607
			  apply 'restricted_eval_loop'/4
			      (_cor3, _cor2, _cor1, RShMod)
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'eval_loop'/3 =
    %% Line 610
    fun (_cor2,_cor1,_cor0) ->
	%% Line 611
	receive
	  %% Line 612
	  <{'shell_cmd',_cor14,{'eval',Es},W}>
	      when call 'erlang':'=:='
		    (_cor14,
		     _cor2) ->
	      let <_cor7> =
		  %% Line 614
		  ( fun (_cor4,_cor3) ->
			apply 'apply_fun'/3
			    (_cor4, _cor3, _cor2)
		    -| [{'id',{0,0,'-eval_loop/3-fun-0-'}}] )
	      in  let <Ef> = {%% Line 613
		       'value',_cor7}
		  in  let <Lf> =
			  %% Line 615
			  apply 'local_func_handler'/3
			      (_cor2, _cor0, Ef)
		      in  let <Bs> =
			      %% Line 616
			      apply 'eval_exprs'/7
				  (Es, _cor2, _cor1, _cor0, Lf, Ef, W)
			  in  %% Line 617
			      apply 'eval_loop'/3
				  (_cor2, Bs, _cor0)
	after 'infinity' ->
	  'true'
'restricted_eval_loop'/4 =
    %% Line 620
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 621
	receive
	  %% Line 622
	  <{'shell_cmd',_cor10,{'eval',Es},W}>
	      when call 'erlang':'=:='
		    (_cor10,
		     _cor3) ->
	      %% Line 623
	      case apply 'restrict_handlers'/3
		       (_cor0, _cor3, _cor1) of
		<{LFH,NLFH}> when 'true' ->
		    do  %% Line 624
			call 'erlang':'put'
			    ('restricted_expr_state', [])
			let <Bs> =
			    %% Line 625
			    apply 'eval_exprs'/7
				(Es, _cor3, _cor2, _cor1, {'eval',LFH}, {'value',NLFH}, W)
			in  %% Line 626
			    apply 'restricted_eval_loop'/4
				(_cor3, Bs, _cor1, _cor0)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	after 'infinity' ->
	  'true'
'eval_exprs'/7 =
    %% Line 629
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 630
	try
	    %% Line 631
	    case apply 'exprs'/6
		     (_cor6, _cor4, _cor3, _cor2, _cor1, _cor0) of
	      <{R,Bs2}> when 'true' ->
		  let <_cor8> =
		      %% Line 632
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 632
			  call 'erlang':'!'
			      (_cor5, {'shell_rep',_cor8,R})
			  %% Line 633
			  Bs2
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
	of <_cor9> ->
	    _cor9
	catch <_cor12,_cor11,_cor10> ->
	    case <_cor12,_cor11,_cor10> of
	      %% Line 635
	      <'exit','normal',_cor31> when 'true' ->
		  %% Line 636
		  call 'erlang':'exit'
		      ('normal')
	      %% Line 637
	      <Class,Reason,_cor32> when 'true' ->
		  let <Stacktrace> =
		      %% Line 638
		      call 'erlang':'get_stacktrace'
			  ()
		  in  let <_cor14> =
			  %% Line 639
			  call 'erlang':'self'
			      ()
		      in  let <M> = {_cor14,%% Line 639
				      Class,%% Line 639
					    {Reason,Stacktrace}}
			  in  %% Line 640
			      case apply 'do_catch'/2
				       (Class, Reason) of
				%% Line 641
				<'true'> when 'true' ->
				    do  %% Line 642
					call 'erlang':'!'
					    (_cor5, {'ev_caught',M})
					_cor4
				%% Line 644
				<'false'> when 'true' ->
				    let <_cor16> =
					%% Line 647
					call 'erlang':'self'
					    ()
				    in  %% Line 647
					case call 'erlang':'process_info'
						 (_cor16, 'links') of
					  <{'links',LPs}> when 'true' ->
					      let <ER> =
						  %% Line 648
						  apply 'nocatch'/2
						      (Class, {Reason,Stacktrace})
					      in  let <_cor22> =
						      %% Line 649
						      ( fun (_cor20) ->
							    call 'erlang':'exit'
								(_cor20, ER)
							-| [{'id',{0,0,'-eval_exprs/7-fun-0-'}}] )
						  in  let <_cor19> =
							  %% Line 649
							  call 'erlang':'--'
							      (LPs, [_cor5|[]])
						      in  do  %% Line 649
							      call 'lists':'foreach'
								  (_cor22, _cor19)
							      do  %% Line 650
								  call 'erlang':'!'
								      (_cor5, {'ev_exit',M})
								  %% Line 651
								  call 'erlang':'exit'
								      ('normal')
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor17})
					    -| ['compiler_generated'] )
					end
				( <_cor23> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor23})
				  -| ['compiler_generated'] )
			      end
	    end
'do_catch'/2 =
    %% Line 655
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'exit','restricted_shell_stopped'> when 'true' ->
	      %% Line 656
	      'false'
	  %% Line 657
	  <'exit','restricted_shell_started'> when 'true' ->
	      %% Line 658
	      'false'
	  %% Line 659
	  <_X_Class,_X_Reason> when 'true' ->
	      %% Line 660
	      case call 'application':'get_env'
		       ('stdlib', 'shell_catch_exception') of
		%% Line 661
		<{'ok','true'}> when 'true' ->
		    %% Line 662
		    'true'
		%% Line 663
		<_cor5> when 'true' ->
		    %% Line 664
		    'false'
	      end
	end
'exprs'/6 =
    %% Line 667
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 668
	apply 'exprs'/7
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor4, _cor0)
'exprs'/7 =
    %% Line 670
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E0|Es],Bs1,RT,Lf,Ef,Bs0,W> when 'true' ->
	      let <UsedRecords> =
		  %% Line 671
		  apply 'used_record_defs'/2
		      (E0, RT)
	      in  let <RBs> =
		      %% Line 672
		      apply 'record_bindings'/2
			  (UsedRecords, Bs1)
		  in  let <_cor9> =
			  %% Line 673
			  apply 'prep_check'/1
			      ([E0|[]])
		      in  %% Line 673
			  case apply 'check_command'/2
				   (_cor9, RBs) of
			    %% Line 674
			    <'ok'> when 'true' ->
				let <E1> =
				    %% Line 675
				    apply 'expand_records'/2
					(UsedRecords, E0)
				in  %% Line 676
				    case apply 'expr'/4
					     (E1, Bs1, Lf, Ef) of
				      <{'value',V0,Bs2}> when 'true' ->
					  let <_cor19> =
					      %% Line 677
					      ( letrec
						    'lc$^0'/1 =
							fun (_cor16) ->
							    case _cor16 of
							      <[VV = {X,_cor35}|_cor13]> when 'true' ->
								  %% Line 678
								  ( case apply 'is_expand_variable'/1
									     (X) of
								      <'false'> when 'true' ->
									  let <_cor17> =
									      apply 'lc$^0'/1
										  (_cor13)
									  in  ( [VV|_cor17]
										-| ['compiler_generated'] )
								      ( <'true'> when 'true' ->
									    apply 'lc$^0'/1
										(_cor13)
									-| ['compiler_generated'] )
								      ( <_cor_variable> when 'true' ->
									    call 'erlang':'error'
										('badarg')
									-| ['compiler_generated'] )
								    end
								    -| ['list_comprehension'] )
							      ( <[_cor12|_cor13]> when 'true' ->
								    apply 'lc$^0'/1
									(_cor13)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor16> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor16})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  let <_cor14> =
							call 'erl_eval':'bindings'
							    (Bs2)
						    in  apply 'lc$^0'/1
							    (_cor14)
						-| ['list_comprehension'] )
					  in  let <Bs> =
						  %% Line 677
						  call 'orddict':'from_list'
						      (_cor19)
					      in  %% Line 679
						  case <> of
						    %% Line 680
						    <>
							when call 'erlang':'=:='
							      (Es,
							       []) ->
							let <VS> =
							    %% Line 681
							    apply 'pp'/3
								(V0, 1, RT)
							in  do  %% Line 682
								case W of
								  %% Line 683
								  <'cmd'> when 'true' ->
								      call 'io':'requests'
									  ([{'put_chars','unicode',VS}|['nl']])
								  %% Line 684
								  <'pmt'> when 'true' ->
								      'ok'
								  ( <_cor22> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor22})
								    -| ['compiler_generated'] )
								end
								let <_cor24> =
								    %% Line 688
								    case <> of
								      %% Line 689
								      <>
									  when call 'erlang':'=:='
										(W,
										 'pmt') ->
									  %% Line 690
									  {W,V0}
								      %% Line 691
								      <> when 'true' ->
									  case apply 'result_will_be_saved'/0
										   () of
									    %% Line 692
									    <'true'> when 'true' ->
										V0
									    %% Line 693
									    <'false'> when 'true' ->
										'ignored'
									    ( <_cor23> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor23})
									      -| ['compiler_generated'] )
									  end
								    end
								in  let <_cor26> =
									%% Line 696
									call 'erlang':'get'
									    ()
								    in  %% Line 696
									{{'value',_cor24,Bs,_cor26},Bs}
						    %% Line 697
						    <> when 'true' ->
							%% Line 698
							apply 'exprs'/7
							    (Es, Bs, RT, Lf, Ef, Bs0, W)
						  end
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor11})
					-| ['compiler_generated'] )
				    end
			    %% Line 700
			    <{'error',Error}> when 'true' ->
				%% Line 701
				{{'command_error',Error},Bs0}
			    ( <_cor27> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor27})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'exprs',7}}] )
	    -| ['compiler_generated'] )
	end
'is_expand_variable'/1 =
    %% Line 704
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 705
		call 'erlang':'atom_to_list'
		    (_cor0)
	in  %% Line 705
	    case _cor1 of
	      %% Line 706
	      <[114|[101|[99|_X_Integer]]]> when 'true' ->
		  'true'
	      %% Line 707
	      <_cor4> when 'true' ->
		  'false'
	    end
'result_will_be_saved'/0 =
    %% Line 710
    fun () ->
	%% Line 711
	case apply 'get_history_and_results'/0
		 () of
	  %% Line 712
	  <{_cor1,0}> when 'true' ->
	      'false'
	  %% Line 713
	  <_cor2> when 'true' ->
	      'true'
	end
'used_record_defs'/2 =
    %% Line 716
    fun (_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 719
	    case apply 'used_records'/3
		     (_cor1, [], _cor0) of
	      %% Line 720
	      <[]> when 'true' ->
		  %% Line 721
		  []
	      %% Line 722
	      <L0> when 'true' ->
		  let <_cor2> =
		      %% Line 723
		      call 'erlang':'length'
			  (L0)
		  in  let <_cor3> =
			  %% Line 723
			  call 'lists':'seq'
			      (1, _cor2)
		      in  let <L1> =
			      %% Line 723
			      call 'lists':'zip'
				  (L0, _cor3)
			  in  let <_cor5> =
				  %% Line 724
				  call 'lists':'ukeysort'
				      (1, L1)
			      in  let <L2> =
				      %% Line 724
				      call 'lists':'keysort'
					  (2, _cor5)
				  in  %% Line 725
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor9) ->
						    case _cor9 of
						      <[{R,_cor16}|_cor8]> when 'true' ->
							  let <_cor10> =
							      apply 'lc$^0'/1
								  (_cor8)
							  in  ( [R|_cor10]
								-| ['compiler_generated'] )
						      ( <[_cor7|_cor8]> when 'true' ->
							    apply 'lc$^0'/1
								(_cor8)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor9> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor9})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(L2)
					-| ['list_comprehension'] )
	    end
	in  %% Line 727
	    apply 'record_defs'/2
		(_cor0, _cor12)
'used_records'/3 =
    %% Line 729
    fun (_cor2,_cor1,_cor0) ->
	%% Line 730
	case apply 'used_records'/1
		 (_cor2) of
	  %% Line 731
	  <{'name',Name,E1}> when 'true' ->
	      let <_cor3> =
		  %% Line 732
		  call 'ets':'lookup'
		      (_cor0, Name)
	      in  let <U> =
		      %% Line 732
		      apply 'used_records'/3
			  (_cor3, [Name|_cor1], _cor0)
		  in  %% Line 733
		      apply 'used_records'/3
			  (E1, U, _cor0)
	  %% Line 734
	  <{'expr',[E1|Es]}> when 'true' ->
	      let <_cor5> =
		  %% Line 735
		  apply 'used_records'/3
		      (E1, _cor1, _cor0)
	      in  %% Line 735
		  apply 'used_records'/3
		      (Es, _cor5, _cor0)
	  %% Line 736
	  <_cor10> when 'true' ->
	      _cor1
	end
'used_records'/1 =
    %% Line 740
    fun (_cor0) ->
	case _cor0 of
	  <{'record_index',_cor3,Name,F}> when 'true' ->
	      %% Line 741
	      {'name',Name,F}
	  %% Line 742
	  <{'record',_cor4,Name,Is}> when 'true' ->
	      %% Line 743
	      {'name',Name,Is}
	  %% Line 744
	  <{'record_field',_cor5,R,Name,F}> when 'true' ->
	      %% Line 745
	      {'name',Name,[R|F]}
	  %% Line 746
	  <{'record',_cor6,R,Name,Ups}> when 'true' ->
	      %% Line 747
	      {'name',Name,[R|Ups]}
	  %% Line 748
	  <{'record_field',_cor7,R,F}> when 'true' ->
	      %% Line 749
	      {'expr',[R|F]}
	  %% Line 750
	  <{'call',_cor8,{'atom',_cor9,'record'},[A|[{'atom',_cor10,Name}|[]]]}> when 'true' ->
	      %% Line 751
	      {'name',Name,A}
	  %% Line 752
	  <{'call',_cor11,{'atom',_cor12,'is_record'},[A|[{'atom',_cor13,Name}|[]]]}> when 'true' ->
	      %% Line 753
	      {'name',Name,A}
	  %% Line 754
	  <{'call',_cor14,{'remote',_cor15,{'atom',_cor16,'erlang'},{'atom',_cor17,'is_record'}},%% Line 755
												 [A|[{'atom',_cor18,Name}|[]]]}> when 'true' ->
	      %% Line 756
	      {'name',Name,A}
	  %% Line 757
	  <{'call',_cor19,{'atom',_cor20,'record_info'},[A|[{'atom',_cor21,Name}|[]]]}> when 'true' ->
	      %% Line 758
	      {'name',Name,A}
	  %% Line 759
	  <{'call',Line,{'tuple',_cor22,[M|[F|[]]]},As}> when 'true' ->
	      %% Line 760
	      apply 'used_records'/1
		  ({'call',Line,{'remote',Line,M,F},As})
	  %% Line 761
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 762
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 762
		  {'expr',_cor1}
	  %% Line 763
	  <E> when 'true' ->
	      %% Line 764
	      {'expr',E}
	end
'fwrite_severity'/3 =
    %% Line 766
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 767
	    apply 'format_severity'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 767
	    call 'io':'fwrite'
		(#{#<126>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor3|[]])
'format_severity'/3 =
    %% Line 769
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 770
	    call 'io_lib':'fwrite'
		(_cor1, _cor0)
	in  %% Line 770
	    apply 'add_severity'/2
		(_cor2, _cor3)
'add_severity'/2 =
    %% Line 772
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 773
	    apply 'severity_tag'/1
		(_cor1)
	in  %% Line 773
	    [_cor2|[_cor0|[]]]
'severity_tag'/1 =
    %% Line 775
    fun (_cor0) ->
	case _cor0 of
	  <'fatal'> when 'true' ->
	      #{#<42>(8,1,'integer',['unsigned'|['big']]),
		#<42>(8,1,'integer',['unsigned'|['big']]),
		#<42>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 776
	  <'serious'> when 'true' ->
	      #{#<42>(8,1,'integer',['unsigned'|['big']]),
		#<42>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 777
	  <'benign'> when 'true' ->
	      #{#<42>(8,1,'integer',['unsigned'|['big']]),
		#<32>(8,1,'integer',['unsigned'|['big']])}#
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'severity_tag',1}}] )
	    -| ['compiler_generated'] )
	end
'restrict_handlers'/3 =
    %% Line 779
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 780
	    ( fun (_cor10,_cor9,_cor8) ->
		  %% Line 781
		  apply 'local_allowed'/6
		      (_cor10, _cor9, _cor2, _cor8, _cor1, _cor0)
	      -| [{'id',{0,0,'-restrict_handlers/3-fun-0-'}}] )
	in  let <_cor7> =
		%% Line 783
		( fun (_cor4,_cor3) ->
		      %% Line 784
		      apply 'non_local_allowed'/4
			  (_cor4, _cor3, _cor2, _cor1)
		  -| [{'id',{0,0,'-restrict_handlers/3-fun-1-'}}] )
	    in  %% Line 780
		{_cor14,_cor7}
'local_allowed'/6 =
    %% Line 793
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <F,As,RShMod,Bs,Shell,RT>
	      when call 'erlang':'is_atom'
		    (F) ->
	      %% Line 794
	      case apply 'restrict_handlers'/3
		       (RShMod, Shell, RT) of
		<{LFH,NLFH}> when 'true' ->
		    %% Line 795
		    case apply 'not_restricted'/2
			     (F, As) of
		      %% Line 799
		      <'true'> when 'true' ->
			  %% Line 800
			  apply 'local_func'/7
			      (F, As, Bs, Shell, RT, {'eval',LFH}, {'value',NLFH})
		      %% Line 801
		      <'false'> when 'true' ->
			  %% Line 802
			  case apply 'expr_list'/4
				   (As, Bs, {'eval',LFH}, {'value',NLFH}) of
			    <{AsEv,Bs1}> when 'true' ->
				let <_cor9> =
				    %% Line 803
				    call 'erlang':'get'
					('restricted_shell_state')
				in  let <_cor8> =
					%% Line 804
					call 'erlang':'get'
					    ('restricted_expr_state')
				    in  %% Line 803
					case call RShMod:'local_allowed'
						 (F, AsEv, {_cor9,_cor8}) of
					  %% Line 805
					  <{Result,{RShShSt,RShExprSt}}> when 'true' ->
					      do  %% Line 806
						  call 'erlang':'put'
						      ('restricted_shell_state', RShShSt)
						  do  %% Line 807
						      call 'erlang':'put'
							  ('restricted_expr_state', RShExprSt)
						      %% Line 808
						      case <> of
							<>
							    when let <_cor10> =
								  call 'erlang':'=:='
								      (Result, 'false')
							      in  let <_cor11> =
								      call 'erlang':'is_boolean'
									  (Result)
								  in  call 'erlang':'and'
									  (_cor10, _cor11) ->
							    let <_cor12> =
								%% Line 809
								call 'erlang':'get'
								    ()
							    in  do  %% Line 809
								    apply 'shell_req'/2
									(Shell, {'update_dict',_cor12})
								    %% Line 810
								    call 'erlang':'exit'
									({'restricted_shell_disallowed',{F,AsEv}})
							%% Line 811
							<> when 'true' ->
							    %% Line 813
							    apply 'non_builtin_local_func'/3
								(F, AsEv, Bs1)
						      end
					  %% Line 815
					  <Unexpected> when 'true' ->
					      %% Line 816
					      try
						  call 'erlang':'error'
						      ('reason')
					      of <_cor13> ->
						  _cor13
					      catch <_cor16,_cor15,_cor14> ->
						  let <_cor17> =
						      call 'erlang':'get_stacktrace'
							  ()
						  in  call 'erlang':'raise'
							  ('exit', {'restricted_shell_bad_return',Unexpected}, [{RShMod,'local_allowed',3}|_cor17])
					end
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor19})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'local_allowed',6}}] )
	    -| ['compiler_generated'] )
	end
'non_local_allowed'/4 =
    %% Line 820
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 821
	    call 'erlang':'get'
		('restricted_shell_state')
	in  let <_cor4> =
		%% Line 822
		call 'erlang':'get'
		    ('restricted_expr_state')
	    in  %% Line 821
		case call _cor1:'non_local_allowed'
			 (_cor3, _cor2, {_cor5,_cor4}) of
		  %% Line 823
		  <{Result,{RShShSt,RShExprSt}}> when 'true' ->
		      do  %% Line 824
			  call 'erlang':'put'
			      ('restricted_shell_state', RShShSt)
			  do  %% Line 825
			      call 'erlang':'put'
				  ('restricted_expr_state', RShExprSt)
			      %% Line 826
			      case Result of
				%% Line 827
				<'false'> when 'true' ->
				    let <_cor6> =
					%% Line 828
					call 'erlang':'get'
					    ()
				    in  do  %% Line 828
					    apply 'shell_req'/2
						(_cor0, {'update_dict',_cor6})
					    %% Line 829
					    call 'erlang':'exit'
						({'restricted_shell_disallowed',{_cor3,_cor2}})
				%% Line 830
				<{'redirect',NewMForFun,NewAs}> when 'true' ->
				    %% Line 831
				    apply 'apply_fun'/3
					(NewMForFun, NewAs, _cor0)
				%% Line 832
				<_cor18> when 'true' ->
				    %% Line 833
				    apply 'apply_fun'/3
					(_cor3, _cor2, _cor0)
			      end
		  %% Line 835
		  <Unexpected> when 'true' ->
		      %% Line 836
		      try
			  call 'erlang':'error'
			      ('reason')
		      of <_cor8> ->
			  _cor8
		      catch <_cor11,_cor10,_cor9> ->
			  let <_cor12> =
			      call 'erlang':'get_stacktrace'
				  ()
			  in  call 'erlang':'raise'
				  ('exit', {'restricted_shell_bad_return',Unexpected}, [{_cor1,'non_local_allowed',3}|_cor12])
		end
'not_restricted'/2 =
    %% Line 842
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'f',[]> when 'true' ->
	      %% Line 843
	      'true'
	  %% Line 844
	  <'f',[_cor4|[]]> when 'true' ->
	      %% Line 845
	      'true'
	  %% Line 846
	  <'h',[]> when 'true' ->
	      %% Line 847
	      'true'
	  %% Line 848
	  <'b',[]> when 'true' ->
	      %% Line 849
	      'true'
	  %% Line 850
	  <'history',[_cor5|[]]> when 'true' ->
	      %% Line 851
	      'true'
	  %% Line 852
	  <'results',[_cor6|[]]> when 'true' ->
	      %% Line 853
	      'true'
	  %% Line 854
	  <'catch_exception',[_cor7|[]]> when 'true' ->
	      %% Line 855
	      'true'
	  %% Line 856
	  <'exit',[]> when 'true' ->
	      %% Line 857
	      'true'
	  %% Line 858
	  <'rd',[_cor8|[_cor9|[]]]> when 'true' ->
	      %% Line 859
	      'true'
	  %% Line 860
	  <'rf',[]> when 'true' ->
	      %% Line 861
	      'true'
	  %% Line 862
	  <'rf',[_cor10|[]]> when 'true' ->
	      %% Line 863
	      'true'
	  %% Line 864
	  <'rl',[]> when 'true' ->
	      %% Line 865
	      'true'
	  %% Line 866
	  <'rl',[_cor11|[]]> when 'true' ->
	      %% Line 867
	      'true'
	  %% Line 868
	  <'rp',[_cor12|[]]> when 'true' ->
	      %% Line 869
	      'true'
	  %% Line 870
	  <'rr',[_cor13|[]]> when 'true' ->
	      %% Line 871
	      'true'
	  %% Line 872
	  <'rr',[_cor14|[_cor15|[]]]> when 'true' ->
	      %% Line 873
	      'true'
	  %% Line 874
	  <'rr',[_cor16|[_cor17|[_cor18|[]]]]> when 'true' ->
	      %% Line 875
	      'true'
	  %% Line 876
	  <_cor19,_cor20> when 'true' ->
	      %% Line 877
	      'false'
	end
'apply_fun'/3 =
    %% Line 884
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'erlang','garbage_collect'},[],Shell> when 'true' ->
	      %% Line 885
	      apply 'garb'/1
		  (Shell)
	  %% Line 886
	  <{M,F},As,_X_Shell> when 'true' ->
	      %% Line 887
	      call 'erlang':'apply'
		  (M, F, As)
	  %% Line 888
	  <MForFun,As,_X_Shell> when 'true' ->
	      %% Line 889
	      call 'erlang':'apply'
		  (MForFun, As)
	end
'prep_check'/1 =
    %% Line 891
    fun (_cor0) ->
	case _cor0 of
	  <{'call',Line,{'atom',_cor6,'f'},[{'var',_cor7,_X_Name}|[]]}> when 'true' ->
	      %% Line 893
	      {'atom',Line,'ok'}
	  %% Line 894
	  <{'value',_X_CommandN,_X_Val}> when 'true' ->
	      %% Line 896
	      {'atom',0,'ok'}
	  %% Line 897
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 898
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor2> =
		      %% Line 898
		      apply 'prep_check'/1
			  (_cor1)
		  in  %% Line 898
		      call 'erlang':'list_to_tuple'
			  (_cor2)
	  %% Line 899
	  <[E|Es]> when 'true' ->
	      let <_cor3> =
		  %% Line 900
		  apply 'prep_check'/1
		      (E)
	      in  let <_cor4> =
		      %% Line 900
		      apply 'prep_check'/1
			  (Es)
		  in  %% Line 900
		      [_cor3|_cor4]
	  %% Line 901
	  <E> when 'true' ->
	      %% Line 902
	      E
	end
'expand_records'/2 =
    %% Line 904
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],E0> when 'true' ->
	      %% Line 905
	      E0
	  %% Line 906
	  <UsedRecords,E0> when 'true' ->
	      let <_cor6> =
		  %% Line 907
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{_X_Name,Def}|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [Def|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (UsedRecords)
		    -| ['list_comprehension'] )
	      in  let <E> =
		      %% Line 909
		      apply 'prep_rec'/1
			  (E0)
		  in  let <Forms> =
			  %% Line 910
			  call 'erlang':'++'
			      (_cor6, [{'function',1,'foo',0,[{'clause',1,[],[],[E|[]]}|[]]}|[]])
		      in  %% Line 911
			  case %% Line 912
			       call 'erl_expand_records':'module'
				   (Forms, ['strict_record_tests']) of
			    <[{'function',_cor14,'foo',0,[{'clause',_cor15,[],[],[NE|[]]}|[]]}|[]]>
				when let <_cor16> =
				      call 'erlang':'=:='
					  (_cor14, 1)
				  in  let <_cor17> =
					  call 'erlang':'=:='
					      (_cor15, 1)
				      in  call 'erlang':'and'
					      (_cor16, _cor17) ->
				%% Line 913
				apply 'prep_rec'/1
				    (NE)
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
	end
'prep_rec'/1 =
    %% Line 915
    fun (_cor0) ->
	case _cor0 of
	  <Value = {'value',_X_CommandN,_X_V}> when 'true' ->
	      %% Line 917
	      {'atom',Value,'ok'}
	  %% Line 918
	  <{'atom',Value = {'value',_X_CommandN,_X_V},'ok'}> when 'true' ->
	      %% Line 920
	      Value
	  %% Line 921
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor2> =
		      apply 'prep_rec'/1
			  (_cor1)
		  in  call 'erlang':'list_to_tuple'
			  (_cor2)
	  %% Line 922
	  <[E|Es]> when 'true' ->
	      let <_cor3> =
		  apply 'prep_rec'/1
		      (E)
	      in  let <_cor4> =
		      apply 'prep_rec'/1
			  (Es)
		  in  [_cor3|_cor4]
	  %% Line 923
	  <E> when 'true' ->
	      E
	end
'init_dict'/1 =
    %% Line 925
    fun (_cor0) ->
	case _cor0 of
	  <[{K,V}|Ds]> when 'true' ->
	      do  %% Line 926
		  call 'erlang':'put'
		      (K, V)
		  %% Line 927
		  apply 'init_dict'/1
		      (Ds)
	  %% Line 928
	  <[]> when 'true' ->
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'init_dict',1}}] )
	    -| ['compiler_generated'] )
	end
'local_func'/7 =
    %% Line 939
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'h',[],Bs,Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      let <Cs> =
		  %% Line 940
		  apply 'shell_req'/2
		      (Shell, 'get_cmd')
	      in  let <_cor10> =
		      %% Line 941
		      ( fun (_cor8) ->
			    case _cor8 of
			      <{{'command',_cor75},_cor76}> when 'true' ->
				  'true'
			      %% Line 942
			      <{{'result',_cor77},_cor78}> when 'true' ->
				  'true'
			      %% Line 943
			      <_cor79> when 'true' ->
				  'false'
			    end
			-| [{'id',{0,0,'-local_func/7-fun-0-'}}] )
		  in  let <Cs1> =
			  %% Line 941
			  call 'lists':'filter'
			      (_cor10, %% Line 945
				       Cs)
		      in  let <_cor14> =
			      %% Line 946
			      ( fun (_cor12) ->
				    case _cor12 of
				      <{{T,N},V}> when 'true' ->
					  {{N,T},V}
				      ( <_cor13> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor13})
					      -| [{'function_name',{'-local_func/7-fun-1-',1}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-local_func/7-fun-1-'}}] )
			  in  let <Cs2> =
				  %% Line 946
				  call 'lists':'map'
				      (_cor14, %% Line 947
					       Cs1)
			      in  let <Cs3> =
				      %% Line 948
				      call 'lists':'keysort'
					  (1, Cs2)
				  in  let <_cor17> =
					  %% Line 949
					  apply 'list_commands'/2
					      (Cs3, RT)
				      in  %% Line 949
					  {'value',_cor17,Bs}
	  %% Line 950
	  <'b',[],Bs,_X_Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_cor18> =
		  %% Line 951
		  call 'erl_eval':'bindings'
		      (Bs)
	      in  let <_cor19> =
		      %% Line 951
		      apply 'list_bindings'/2
			  (_cor18, RT)
		  in  %% Line 951
		      {'value',_cor19,Bs}
	  %% Line 952
	  <'f',[],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_cor20> =
		  %% Line 953
		  call 'erl_eval':'new_bindings'
		      ()
	      in  %% Line 953
		  {'value','ok',_cor20}
	  %% Line 954
	  <'f',[{'var',_cor80,Name}|[]],Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_cor21> =
		  %% Line 955
		  call 'erl_eval':'del_binding'
		      (Name, Bs)
	      in  %% Line 955
		  {'value','ok',_cor21}
	  %% Line 956
	  <'f',[_X_Other|[]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 957
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','f',1}])
	  %% Line 958
	  <'rd',[{'atom',_cor81,RecName}|[RecDef0|[]]],Bs,_X_Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      let <RecDef> =
		  %% Line 959
		  apply 'expand_value'/1
		      (RecDef0)
	      in  let <_cor23> =
		      %% Line 960
		      call 'erl_pp':'expr'
			  (RecDef)
		  in  let <RDs> =
			  %% Line 960
			  call 'lists':'flatten'
			      (_cor23)
		      in  let <Attr> =
			      %% Line 961
			      call 'lists':'concat'
				  ([[45|[114|[101|[99|[111|[114|[100|[40|[39]]]]]]]]]|[RecName|[[39|[44]]|[RDs|[[41|[46]]]]]]])
			  in  %% Line 962
			      case call 'erl_scan':'string'
				       (Attr) of
				<{'ok',Tokens,_cor82}> when 'true' ->
				    %% Line 963
				    case call 'erl_parse':'parse_form'
					     (Tokens) of
				      %% Line 964
				      <{'ok',AttrForm}> when 'true' ->
					  %% Line 965
					  case apply 'add_records'/3
						   ([AttrForm|[]], Bs, RT) of
					    <[RN|[]]> when 'true' ->
						%% Line 966
						{'value',RN,Bs}
					    ( <_cor27> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor27})
					      -| ['compiler_generated'] )
					  end
				      %% Line 967
				      <{'error',{_X_Line,M,ErrDesc}}> when 'true' ->
					  let <_cor28> =
					      %% Line 968
					      call M:'format_error'
						  (ErrDesc)
					  in  let <ErrStr> =
						  %% Line 968
						  call 'io_lib':'fwrite'
						      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<115>(8,1,'integer',['unsigned'|['big']])}#, [_cor28|[]])
					      in  let <_cor30> =
						      %% Line 969
						      call 'lists':'flatten'
							  (ErrStr)
						  in  %% Line 969
						      call 'erlang':'exit'
							  (_cor30)
				      ( <_cor31> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor31})
					-| ['compiler_generated'] )
				    end
				( <_cor26> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor26})
				  -| ['compiler_generated'] )
			      end
	  %% Line 971
	  <'rd',[_cor83|[_cor84|[]]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 972
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','rd',2}])
	  %% Line 973
	  <'rf',[],Bs,_X_Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 974
	      case call 'ets':'delete_all_objects'
		       (RT) of
		<'true'> when 'true' ->
		    let <_cor33> =
			%% Line 975
			apply 'initiate_records'/2
			    (Bs, RT)
		    in  %% Line 975
			{'value',_cor33,Bs}
		( <_cor32> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor32})
		  -| ['compiler_generated'] )
	      end
	  %% Line 976
	  <'rf',[A|[]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 977
	      case apply 'expr_list'/4
		       ([A|[]], Bs0, Lf, Ef) of
		<{[Recs|[]],Bs}> when 'true' ->
		    do  %% Line 978
			case <> of
			  <>
			      when call 'erlang':'=:='
				    ('_',
				     Recs) ->
			      %% Line 979
			      case call 'ets':'delete_all_objects'
				       (RT) of
				<'true'> when 'true' ->
				    'ok'
				( <_cor35> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor35})
				  -| ['compiler_generated'] )
			      end
			  %% Line 980
			  <> when 'true' ->
			      let <_cor40> =
				  %% Line 981
				  ( fun (_cor38) ->
					let <_cor86> =
					    call 'ets':'delete'
						(RT, _cor38)
					in  case _cor86 of
					      <'true'> when 'true' ->
						  ( _cor86
						    -| ['compiler_generated'] )
					      ( <_cor37> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor37})
						-| ['compiler_generated'] )
					    end
				    -| [{'id',{0,0,'-local_func/7-fun-2-'}}] )
			      in  let <_cor36> =
				      %% Line 982
				      apply 'listify'/1
					  (Recs)
				  in  %% Line 981
				      call 'lists':'foreach'
					  (_cor40, _cor36)
			end
			%% Line 984
			{'value','ok',Bs}
		( <_cor34> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor34})
		  -| ['compiler_generated'] )
	      end
	  %% Line 985
	  <'rl',[],Bs,_X_Shell,RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_cor41> =
		  %% Line 986
		  call 'ets':'tab2list'
		      (RT)
	      in  let <_cor42> =
		      %% Line 986
		      apply 'list_records'/1
			  (_cor41)
		  in  %% Line 986
		      {'value',_cor42,Bs}
	  %% Line 987
	  <'rl',[A|[]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 988
	      case apply 'expr_list'/4
		       ([A|[]], Bs0, Lf, Ef) of
		<{[Recs|[]],Bs}> when 'true' ->
		    let <_cor44> =
			%% Line 989
			apply 'listify'/1
			    (Recs)
		    in  let <_cor45> =
			    %% Line 989
			    apply 'record_defs'/2
				(RT, _cor44)
			in  let <_cor46> =
				%% Line 989
				apply 'list_records'/1
				    (_cor45)
			    in  %% Line 989
				{'value',_cor46,Bs}
		( <_cor43> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor43})
		  -| ['compiler_generated'] )
	      end
	  %% Line 990
	  <'rp',[A|[]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 991
	      case apply 'expr_list'/4
		       ([A|[]], Bs0, Lf, Ef) of
		<{[V|[]],Bs}> when 'true' ->
		    let <_cor49> =
			%% Line 993
			apply 'columns'/0
			    ()
		    in  let <_cor51> =
			    %% Line 996
			    apply 'record_print_fun'/1
				(RT)
			in  let <_cor48> =
				%% Line 997
				apply 'enc'/0
				    ()
			    in  let <_cor52> =
				    %% Line 992
				    [{'column',1}|%% Line 993
						  [{'line_length',_cor49}|%% Line 994
									  [{'depth',-1}|%% Line 995
											[{'max_chars',60}|%% Line 996
													  [{'record_print_fun',_cor51}|_cor48]]]]]
				in  let <Cs> =
					%% Line 992
					call 'io_lib_pretty':'print'
					    (V, _cor52)
				    in  do  %% Line 998
					    call 'io':'requests'
						([{'put_chars','unicode',Cs}|['nl']])
					    %% Line 999
					    {'value','ok',Bs}
		( <_cor47> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor47})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1000
	  <'rr',[A|[]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 1001
	      case apply 'expr_list'/4
		       ([A|[]], Bs0, Lf, Ef) of
		<{[File|[]],Bs}> when 'true' ->
		    let <_cor55> =
			%% Line 1002
			apply 'read_and_add_records'/5
			    (File, '_', [], Bs, RT)
		    in  %% Line 1002
			{'value',_cor55,Bs}
		( <_cor54> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor54})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1003
	  <'rr',As0 = [_cor87|[_cor88|[]]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 1004
	      case apply 'expr_list'/4
		       (As0, Bs0, Lf, Ef) of
		<{[File|[Sel|[]]],Bs}> when 'true' ->
		    let <_cor57> =
			%% Line 1005
			apply 'read_and_add_records'/5
			    (File, Sel, [], Bs, RT)
		    in  %% Line 1005
			{'value',_cor57,Bs}
		( <_cor56> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor56})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1006
	  <'rr',As0 = [_cor89|[_cor90|[_cor91|[]]]],Bs0,_X_Shell,RT,Lf,Ef> when 'true' ->
	      %% Line 1007
	      case apply 'expr_list'/4
		       (As0, Bs0, Lf, Ef) of
		<{[File|[Sel|[Options|[]]]],Bs}> when 'true' ->
		    let <_cor59> =
			%% Line 1008
			apply 'read_and_add_records'/5
			    (File, Sel, Options, Bs, RT)
		    in  %% Line 1008
			{'value',_cor59,Bs}
		( <_cor58> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor58})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1009
	  <'history',[{'integer',_cor92,N}|[]],Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_cor60> =
		  %% Line 1010
		  apply 'history'/1
		      (N)
	      in  %% Line 1010
		  {'value',_cor60,Bs}
	  %% Line 1011
	  <'history',[_X_Other|[]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 1012
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','history',1}])
	  %% Line 1013
	  <'results',[{'integer',_cor93,N}|[]],Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      let <_cor61> =
		  %% Line 1014
		  apply 'results'/1
		      (N)
	      in  %% Line 1014
		  {'value',_cor61,Bs}
	  %% Line 1015
	  <'results',[_X_Other|[]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 1016
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','results',1}])
	  %% Line 1017
	  <'catch_exception',[{'atom',_cor94,Bool}|[]],Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef>
	      when let <_cor62> =
		    %% Line 1018
		    call 'erlang':'=:='
			(Bool, 'true')
		in  let <_cor65> =
			let <_cor63> =
			    %% Line 1018
			    call 'erlang':'=:='
				(Bool, 'false')
			in  let <_cor64> =
				call 'erlang':'is_boolean'
				    (Bool)
			    in  call 'erlang':'and'
				    (_cor63, _cor64)
		    in  %% Line 1018
			call 'erlang':'or'
			    (_cor62, _cor65) ->
	      let <_cor66> =
		  %% Line 1019
		  apply 'catch_exception'/1
		      (Bool)
	      in  %% Line 1019
		  {'value',_cor66,Bs}
	  %% Line 1020
	  <'catch_exception',[_X_Other|[]],_X_Bs,_X_Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      %% Line 1021
	      call 'erlang':'raise'
		  ('error', 'function_clause', [{'shell','catch_exception',1}])
	  %% Line 1022
	  <'exit',[],_X_Bs,Shell,_X_RT,_X_Lf,_X_Ef> when 'true' ->
	      do  %% Line 1023
		  apply 'shell_req'/2
		      (Shell, 'exit')
		  %% Line 1024
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1025
	  <F,As0,Bs0,_X_Shell,_X_RT,Lf,Ef>
	      when call 'erlang':'is_atom'
		    (F) ->
	      %% Line 1026
	      case apply 'expr_list'/4
		       (As0, Bs0, Lf, Ef) of
		<{As,Bs}> when 'true' ->
		    %% Line 1027
		    apply 'non_builtin_local_func'/3
			(F, As, Bs)
		( <_cor67> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor67})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor74,_cor73,_cor72,_cor71,_cor70,_cor69,_cor68> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor74,_cor73,_cor72,_cor71,_cor70,_cor69,_cor68})
		  -| [{'function_name',{'local_func',7}}] )
	    -| ['compiler_generated'] )
	end
'non_builtin_local_func'/3 =
    %% Line 1029
    fun (_cor2,_cor1,_cor0) ->
	let <Arity> =
	    %% Line 1030
	    call 'erlang':'length'
		(_cor1)
	in  %% Line 1031
	    case call 'erlang':'function_exported'
		     ('user_default', _cor2, Arity) of
	      %% Line 1032
	      <'true'> when 'true' ->
		  let <_cor4> =
		      %% Line 1033
		      call 'erlang':'make_fun'
			  ('user_default', _cor2, Arity)
		  in  %% Line 1033
		      {'eval',_cor4,_cor1,_cor0}
	      %% Line 1034
	      <'false'> when 'true' ->
		  %% Line 1035
		  apply 'shell_default'/3
		      (_cor2, _cor1, _cor0)
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'shell_default'/3 =
    %% Line 1038
    fun (_cor2,_cor1,_cor0) ->
	let <A> =
	    %% Line 1040
	    call 'erlang':'length'
		(_cor1)
	in  %% Line 1041
	    case call 'code':'ensure_loaded'
		     ('shell_default') of
	      %% Line 1042
	      <{'module',_cor11}> when 'true' ->
		  %% Line 1043
		  case call 'erlang':'function_exported'
			   ('shell_default', _cor2, A) of
		    %% Line 1044
		    <'true'> when 'true' ->
			let <_cor5> =
			    %% Line 1045
			    call 'erlang':'make_fun'
				('shell_default', _cor2, A)
			in  %% Line 1045
			    {'eval',_cor5,_cor1,_cor0}
		    %% Line 1046
		    <'false'> when 'true' ->
			%% Line 1047
			apply 'shell_undef'/2
			    (_cor2, A)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1049
	      <{'error',_cor12}> when 'true' ->
		  %% Line 1050
		  apply 'shell_undef'/2
		      (_cor2, A)
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
'shell_undef'/2 =
    %% Line 1053
    fun (_cor1,_cor0) ->
	%% Line 1054
	call 'erlang':'error'
	    ({'shell_undef',_cor1,_cor0,[]})
'local_func_handler'/3 =
    %% Line 1056
    fun (_cor2,_cor1,_cor0) ->
	let <H> =
	    %% Line 1057
	    ( fun (_cor10) ->
		  %% Line 1058
		  ( fun (_cor6,_cor5,_cor4) ->
			let <_cor3> =
			    %% Line 1059
			    apply _cor10
				(_cor10)
			in  %% Line 1059
			    apply 'local_func'/7
				(_cor6, _cor5, _cor4, _cor2, _cor1, {'eval',_cor3}, _cor0)
		    -| [{'id',{0,0,'-local_func_handler/3-fun-0-'}}] )
	      -| [{'id',{0,0,'-local_func_handler/3-fun-1-'}}] )
	in  let <_cor13> =
		%% Line 1062
		apply H
		    (H)
	    in  %% Line 1062
		{'eval',_cor13}
'record_print_fun'/1 =
    %% Line 1064
    fun (_cor0) ->
	%% Line 1065
	( fun (_cor4,_cor3) ->
	      %% Line 1066
	      case call 'ets':'lookup'
		       (_cor0, _cor4) of
		%% Line 1067
		<[{_cor8,{'attribute',_cor9,'record',{_cor10,Fields}}}|[]]>
		    when let <_cor11> =
			  call 'erlang':'=:='
			      (_cor10, _cor4)
		      in  let <_cor12> =
			      %% Line 1068
			      try
				  let <_cor1> =
				      call 'erlang':'length'
					  (Fields)
				  in  call 'erlang':'=:='
					  (_cor1, _cor3)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			  in  call 'erlang':'and'
				  (_cor11, _cor12) ->
		    %% Line 1069
		    apply 'record_fields'/1
			(Fields)
		%% Line 1070
		<_cor13> when 'true' ->
		    %% Line 1071
		    'no'
	      end
	  -| [{'id',{0,0,'-record_print_fun/1-fun-0-'}}] )
'record_fields'/1 =
    %% Line 1075
    fun (_cor0) ->
	case _cor0 of
	  <[{'record_field',_cor4,{'atom',_cor5,Field}}|Fs]> when 'true' ->
	      let <_cor1> =
		  %% Line 1076
		  apply 'record_fields'/1
		      (Fs)
	      in  %% Line 1076
		  [Field|_cor1]
	  %% Line 1077
	  <[{'record_field',_cor6,{'atom',_cor7,Field},_cor8}|Fs]> when 'true' ->
	      let <_cor2> =
		  %% Line 1078
		  apply 'record_fields'/1
		      (Fs)
	      in  %% Line 1078
		  [Field|_cor2]
	  %% Line 1079
	  <[]> when 'true' ->
	      %% Line 1080
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'record_fields',1}}] )
	    -| ['compiler_generated'] )
	end
'initiate_records'/2 =
    %% Line 1082
    fun (_cor1,_cor0) ->
	let <RNs1> =
	    %% Line 1083
	    apply 'init_rec'/3
		('shell_default', _cor1, _cor0)
	in  let <_cor4> =
		%% Line 1084
		case call 'code':'is_loaded'
			 ('user_default') of
		  %% Line 1085
		  <{'file',_X_File}> when 'true' ->
		      %% Line 1086
		      apply 'init_rec'/3
			  ('user_default', _cor1, _cor0)
		  %% Line 1087
		  <'false'> when 'true' ->
		      %% Line 1088
		      []
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor6> =
		    %% Line 1090
		    call 'erlang':'++'
			(RNs1, _cor4)
		in  %% Line 1090
		    call 'lists':'usort'
			(_cor6)
'init_rec'/3 =
    %% Line 1092
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1093
	case apply 'read_records'/2
		 (_cor2, []) of
	  %% Line 1094
	  <RAs>
	      when call 'erlang':'is_list'
		    (RAs) ->
	      let <_cor3> =
		  catch
		      %% Line 1095
		      apply 'add_records'/3
			  (RAs, _cor1, _cor0)
	      in  %% Line 1095
		  case _cor3 of
		    %% Line 1096
		    <{'EXIT',_cor9}> when 'true' ->
			%% Line 1097
			[]
		    %% Line 1098
		    <RNs> when 'true' ->
			%% Line 1099
			RNs
		  end
	  %% Line 1101
	  <_X_Error> when 'true' ->
	      %% Line 1102
	      []
	end
'read_and_add_records'/5 =
    %% Line 1105
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1106
	case apply 'read_records'/3
		 (_cor4, _cor3, _cor2) of
	  %% Line 1107
	  <RAs>
	      when call 'erlang':'is_list'
		    (RAs) ->
	      %% Line 1108
	      apply 'add_records'/3
		  (RAs, _cor1, _cor0)
	  %% Line 1109
	  <Error> when 'true' ->
	      %% Line 1110
	      Error
	end
'read_records'/3 =
    %% Line 1113
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1114
	    apply 'listify'/1
		(_cor0)
	in  %% Line 1114
	    case apply 'read_records'/2
		     (_cor2, _cor3) of
	      %% Line 1115
	      <Error>
		  when call 'erlang':'is_tuple'
			(Error) ->
		  %% Line 1116
		  Error
	      %% Line 1117
	      <RAs>
		  when call 'erlang':'=:='
			(_cor1,
			 '_') ->
		  %% Line 1118
		  RAs
	      %% Line 1119
	      <RAs> when 'true' ->
		  let <Sel> =
		      %% Line 1120
		      apply 'listify'/1
			  (_cor1)
		  in  %% Line 1121
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor7) ->
				    case _cor7 of
				      <[RA = {'attribute',_cor14,_cor15,{Name,_cor16}}|_cor6]> when 'true' ->
					  %% Line 1122
					  ( case call 'lists':'member'
						     (Name, Sel) of
					      <'true'> when 'true' ->
						  let <_cor8> =
						      apply 'lc$^0'/1
							  (_cor6)
						  in  ( [RA|_cor8]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^0'/1
							(_cor6)
						-| ['compiler_generated'] )
					      ( <_cor9> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor9})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      ( <[_cor5|_cor6]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor6)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor7> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor7})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(RAs)
			-| ['list_comprehension'] )
	    end
'add_records'/3 =
    %% Line 1125
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1126
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[D = {'attribute',_cor23,_cor24,{Name,_cor25}}|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [{Name,D}|_cor6]
				      -| ['compiler_generated'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  let <Bs1> =
		%% Line 1127
		apply 'record_bindings'/2
		    (_cor7, _cor1)
	    in  %% Line 1128
		case apply 'check_command'/2
			 ([], Bs1) of
		  %% Line 1129
		  <{'error',{_X_Line,M,ErrDesc}}> when 'true' ->
		      let <_cor10> =
			  %% Line 1131
			  call M:'format_error'
			      (ErrDesc)
		      in  let <ErrStr> =
			      %% Line 1131
			      call 'io_lib':'fwrite'
				  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
				     #<116>(8,1,'integer',['unsigned'|['big']]),
				     #<115>(8,1,'integer',['unsigned'|['big']])}#, [_cor10|[]])
			  in  let <_cor12> =
				  %% Line 1132
				  call 'lists':'flatten'
				      (ErrStr)
			      in  %% Line 1132
				  call 'erlang':'exit'
				      (_cor12)
		  %% Line 1133
		  <'ok'> when 'true' ->
		      %% Line 1134
		      case call 'ets':'insert'
			       (_cor0, _cor7) of
			<'true'> when 'true' ->
			    let <_cor18> =
				%% Line 1135
				( letrec
				      'lc$^1'/1 =
					  fun (_cor16) ->
					      case _cor16 of
						<[{Name,_cor26}|_cor15]> when 'true' ->
						    let <_cor17> =
							apply 'lc$^1'/1
							    (_cor15)
						    in  ( [Name|_cor17]
							  -| ['compiler_generated'] )
						( <[_cor14|_cor15]> when 'true' ->
						      apply 'lc$^1'/1
							  (_cor15)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor16> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor16})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (_cor7)
				  -| ['list_comprehension'] )
			    in  %% Line 1135
				call 'lists':'usort'
				    (_cor18)
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor13})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor19> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor19})
		    -| ['compiler_generated'] )
		end
'listify'/1 =
    %% Line 1138
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1139
	      L
	  %% Line 1140
	  <E> when 'true' ->
	      %% Line 1141
	      [E|[]]
	end
'check_command'/2 =
    %% Line 1143
    fun (_cor1,_cor0) ->
	%% Line 1144
	call 'erl_eval':'check_command'
	    (_cor1, _cor0)
'expr'/4 =
    %% Line 1146
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1147
	call 'erl_eval':'expr'
	    (_cor3, _cor2, _cor1, _cor0)
'expr_list'/4 =
    %% Line 1149
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1150
	call 'erl_eval':'expr_list'
	    (_cor3, _cor2, _cor1, _cor0)
'record_bindings'/2 =
    %% Line 1156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Bs> when 'true' ->
	      %% Line 1157
	      Bs
	  %% Line 1158
	  <Recs0,Bs0> when 'true' ->
	      let <_cor7> =
		  %% Line 1159
		  ( fun (_cor4,_cor3) ->
			case <_cor4,_cor3> of
			  <{Name,Def},I> when 'true' ->
			      let <_cor2> =
				  call 'erlang':'+'
				      (I, 1)
			      in  {{Name,I,Def},_cor2}
			  ( <_cor6,_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor6,_cor5})
				  -| [{'function_name',{'-record_bindings/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-record_bindings/2-fun-0-'}}] )
	      in  %% Line 1159
		  case call 'lists':'mapfoldl'
			   (_cor7, %% Line 1160
				   0, %% Line 1160
				      Recs0) of
		    <{Recs1,_cor18}> when 'true' ->
			let <_cor9> =
			    %% Line 1161
			    call 'lists':'ukeysort'
				(1, Recs1)
			in  let <Recs2> =
				%% Line 1161
				call 'lists':'keysort'
				    (2, _cor9)
			    in  let <_cor15> =
				    %% Line 1162
				    ( fun (_cor12,_cor11) ->
					  case <_cor12,_cor11> of
					    <{Name,I,Def},Bs> when 'true' ->
						%% Line 1163
						call 'erl_eval':'add_binding'
						    ({'record',I,Name}, Def, Bs)
					    ( <_cor14,_cor13> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor14,_cor13})
						    -| [{'function_name',{'-record_bindings/2-fun-1-',2}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-record_bindings/2-fun-1-'}}] )
				in  %% Line 1162
				    call 'lists':'foldl'
					(_cor15, %% Line 1164
						 Bs0, %% Line 1164
						      Recs2)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	end
'read_records'/2 =
    %% Line 1168
    fun (_cor1,_cor0) ->
	let <Opts> =
	    %% Line 1169
	    call 'lists':'delete'
		('report_warnings', _cor0)
	in  %% Line 1170
	    case apply 'find_file'/1
		     (_cor1) of
	      %% Line 1171
	      <{'files',[File|[]]}> when 'true' ->
		  %% Line 1172
		  apply 'read_file_records'/2
		      (File, Opts)
	      %% Line 1173
	      <{'files',Files}> when 'true' ->
		  let <_cor6> =
		      %% Line 1174
		      ( fun (_cor4) ->
			    %% Line 1175
			    case apply 'read_file_records'/2
				     (_cor4, Opts) of
			      %% Line 1176
			      <RAs>
				  when call 'erlang':'is_list'
					(RAs) ->
				  RAs
			      %% Line 1177
			      <_cor10> when 'true' ->
				  []
			    end
			-| [{'id',{0,0,'-read_records/2-fun-0-'}}] )
		  in  %% Line 1174
		      call 'lists':'flatmap'
			  (_cor6, %% Line 1179
				  Files)
	      %% Line 1180
	      <Error> when 'true' ->
		  %% Line 1181
		  Error
	    end
'find_file'/1 =
    %% Line 1186
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1187
	      case call 'code':'which'
		       (Mod) of
		%% Line 1188
		<File>
		    when call 'erlang':'is_list'
			  (File) ->
		    %% Line 1189
		    {'files',[File|[]]}
		%% Line 1190
		<'preloaded'> when 'true' ->
		    %% Line 1191
		    case call 'code':'get_object_code'
			     (Mod) of
		      <{_X_M,_X_Bin,File}> when 'true' ->
			  %% Line 1192
			  {'files',[File|[]]}
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor1})
			-| ['compiler_generated'] )
		    end
		%% Line 1193
		<_X_Else> when 'true' ->
		    %% Line 1194
		    {'error','nofile'}
	      end
	  %% Line 1196
	  <File> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 1197
		      call 'filelib':'wildcard'
			  (File)
	      in  %% Line 1197
		  case _cor3 of
		    %% Line 1198
		    <{'EXIT',_cor6}> when 'true' ->
			%% Line 1199
			{'error','invalid_filename'}
		    %% Line 1200
		    <Files> when 'true' ->
			%% Line 1201
			{'files',Files}
		  end
	end
'read_file_records'/2 =
    %% Line 1204
    fun (_cor1,_cor0) ->
	%% Line 1205
	case call 'filename':'extension'
		 (_cor1) of
	  %% Line 1206
	  <[46|[98|[101|[97|[109]]]]]> when 'true' ->
	      %% Line 1207
	      case call 'beam_lib':'chunks'
		       (_cor1, ['abstract_code'|[[67|[73|[110|[102]]]]]]) of
		%% Line 1208
		<{'ok',{_X_Mod,[{'abstract_code',{Version,Forms}}|[{[67|[73|[110|[102]]]],CB}|[]]]}}> when 'true' ->
		    %% Line 1209
		    case apply 'record_attrs'/1
			     (Forms) of
		      %% Line 1210
		      <[]>
			  when call 'erlang':'=:='
				(Version,
				 'raw_abstract_v1') ->
			  %% Line 1211
			  []
		      %% Line 1212
		      <[]> when 'true' ->
			  %% Line 1215
			  apply 'try_source'/2
			      (_cor1, CB)
		      %% Line 1216
		      <Records> when 'true' ->
			  %% Line 1217
			  Records
		    end
		%% Line 1219
		<{'ok',{_X_Mod,[{'abstract_code','no_abstract_code'}|[{[67|[73|[110|[102]]]],CB}|[]]]}}> when 'true' ->
		    %% Line 1220
		    apply 'try_source'/2
			(_cor1, CB)
		%% Line 1221
		<Error> when 'true' ->
		    %% Line 1223
		    Error
	      end
	  %% Line 1225
	  <_cor7> when 'true' ->
	      %% Line 1226
	      apply 'parse_file'/2
		  (_cor1, _cor0)
	end
'try_source'/2 =
    %% Line 1230
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1231
	    call 'erlang':'binary_to_term'
		(_cor0)
	in  let <_cor4> =
		%% Line 1231
		case call 'lists':'keyfind'
			 ('options', 1, _cor2) of
		  %% Line 1232
		  <'false'> when 'true' ->
		      []
		  %% Line 1233
		  <{_cor16,Os0}> when 'true' ->
		      Os0
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor6> =
		    %% Line 1235
		    call 'filename':'rootname'
			(_cor1)
		in  let <Src0> =
			%% Line 1235
			call 'erlang':'++'
			    (_cor6, [46|[101|[114|[108]]]])
		    in  %% Line 1236
			case apply 'is_file'/1
				 (Src0) of
			  %% Line 1237
			  <'true'> when 'true' ->
			      apply 'parse_file'/2
				  (Src0, _cor4)
			  %% Line 1238
			  <'false'> when 'true' ->
			      let <EbinDir> =
				  %% Line 1239
				  call 'filename':'dirname'
				      (_cor1)
			      in  let <_cor9> =
				      %% Line 1240
				      call 'filename':'dirname'
					  (EbinDir)
				  in  let <_cor10> =
					  %% Line 1241
					  call 'filename':'basename'
					      (Src0)
				      in  let <Src> =
					      %% Line 1240
					      call 'filename':'join'
						  ([_cor9|[[115|[114|[99]]]|%% Line 1241
									    [_cor10|[]]]])
					  in  %% Line 1242
					      case apply 'is_file'/1
						       (Src) of
						%% Line 1243
						<'true'> when 'true' ->
						    apply 'parse_file'/2
							(Src, _cor4)
						%% Line 1244
						<'false'> when 'true' ->
						    {'error','nofile'}
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor12})
						  -| ['compiler_generated'] )
					      end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor13})
			    -| ['compiler_generated'] )
			end
'is_file'/1 =
    %% Line 1248
    fun (_cor0) ->
	%% Line 1249
	case call 'filelib':'is_file'
		 (_cor0) of
	  %% Line 1250
	  <'true'> when 'true' ->
	      let <_cor1> =
		  %% Line 1251
		  call 'filelib':'is_dir'
		      (_cor0)
	      in  %% Line 1251
		  call 'erlang':'not'
		      (_cor1)
	  %% Line 1252
	  <'false'> when 'true' ->
	      %% Line 1253
	      'false'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_file'/2 =
    %% Line 1256
    fun (_cor1,_cor0) ->
	let <Dir> =
	    %% Line 1258
	    call 'filename':'dirname'
		(_cor1)
	in  let <_cor4> =
		%% Line 1259
		apply 'inc_paths'/1
		    (_cor0)
	    in  let <IncludePath> =
		    %% Line 1259
		    [[46]|[Dir|_cor4]]
		in  let <_cor6> =
			%% Line 1260
			apply 'pre_defs'/1
			    (_cor0)
		    in  %% Line 1260
			case call 'epp':'parse_file'
				 (_cor1, IncludePath, _cor6) of
			  %% Line 1261
			  <{'ok',Forms}> when 'true' ->
			      %% Line 1262
			      apply 'record_attrs'/1
				  (Forms)
			  %% Line 1263
			  <Error> when 'true' ->
			      %% Line 1264
			      Error
			end
'pre_defs'/1 =
    %% Line 1267
    fun (_cor0) ->
	case _cor0 of
	  <[{'d',M,V}|Opts]> when 'true' ->
	      let <_cor1> =
		  %% Line 1268
		  apply 'pre_defs'/1
		      (Opts)
	      in  %% Line 1268
		  [{M,V}|_cor1]
	  %% Line 1269
	  <[{'d',M}|Opts]> when 'true' ->
	      let <_cor2> =
		  %% Line 1270
		  apply 'pre_defs'/1
		      (Opts)
	      in  %% Line 1270
		  [M|_cor2]
	  %% Line 1271
	  <[_cor4|Opts]> when 'true' ->
	      %% Line 1272
	      apply 'pre_defs'/1
		  (Opts)
	  %% Line 1273
	  <[]> when 'true' ->
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'pre_defs',1}}] )
	    -| ['compiler_generated'] )
	end
'inc_paths'/1 =
    %% Line 1275
    fun (_cor0) ->
	%% Line 1276
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[{'i',P}|_cor2]>
			    when call 'erlang':'is_list'
				  (P) ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [P|_cor4]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'record_attrs'/1 =
    %% Line 1278
    fun (_cor0) ->
	%% Line 1279
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[A = {'attribute',_cor6,'record',_X_D}|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [A|_cor4]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'shell_req'/2 =
    %% Line 1283
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1284
	    call 'erlang':'self'
		()
	in  do  %% Line 1284
		call 'erlang':'!'
		    (_cor1, {'shell_req',_cor2,_cor0})
		%% Line 1285
		receive
		  %% Line 1286
		  <{'shell_rep',_cor5,Rep}>
		      when call 'erlang':'=:='
			    (_cor5,
			     _cor1) ->
		      Rep
		after 'infinity' ->
		  'true'
'list_commands'/2 =
    %% Line 1289
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{N,'command'},Es0}|[{{_cor15,'result'},V}|Ds]],RT>
	      when call 'erlang':'=:='
		    (_cor15,
		     N) ->
	      let <Es> =
		  %% Line 1290
		  apply 'prep_list_commands'/1
		      (Es0)
	      in  let <VS> =
		      %% Line 1291
		      apply 'pp'/3
			  (V, 4, RT)
		  in  let <Ns> =
			  %% Line 1292
			  call 'io_lib':'fwrite'
			      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
				 #<119>(8,1,'integer',['unsigned'|['big']]),
				 #<58>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']])}#, [N|[]])
		      in  let <I> =
			      %% Line 1293
			      call 'erlang':'iolist_size'
				  (Ns)
			  in  let <_cor6> =
				  %% Line 1295
				  apply 'enc'/0
				      ()
			      in  let <_cor7> =
				      %% Line 1295
				      call 'erl_pp':'exprs'
					  (Es, I, _cor6)
				  in  do  %% Line 1294
					  call 'io':'requests'
					      ([{'put_chars','latin1',Ns}|%% Line 1295
									  [{'format',#{#<126>(8,1,'integer',['unsigned'|['big']]),
										       #<116>(8,1,'integer',['unsigned'|['big']]),
										       #<115>(8,1,'integer',['unsigned'|['big']]),
										       #<10>(8,1,'integer',['unsigned'|['big']])}#,[_cor7|[]]}|%% Line 1296
																	       [{'format',#{#<45>(8,1,'integer',['unsigned'|['big']]),
																			    #<62>(8,1,'integer',['unsigned'|['big']]),
																			    #<32>(8,1,'integer',['unsigned'|['big']])}#,[]}|%% Line 1297
																									    [{'put_chars','unicode',VS}|%% Line 1298
																													['nl']]]]])
					  %% Line 1299
					  apply 'list_commands'/2
					      (Ds, RT)
	  %% Line 1300
	  <[{{N,'command'},Es0}|Ds],RT> when 'true' ->
	      let <Es> =
		  %% Line 1301
		  apply 'prep_list_commands'/1
		      (Es0)
	      in  let <Ns> =
		      %% Line 1302
		      call 'io_lib':'fwrite'
			  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<58>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']])}#, [N|[]])
		  in  let <I> =
			  %% Line 1303
			  call 'erlang':'iolist_size'
			      (Ns)
		      in  let <_cor11> =
			      %% Line 1305
			      apply 'enc'/0
				  ()
			  in  let <_cor12> =
				  %% Line 1305
				  call 'erl_pp':'exprs'
				      (Es, I, _cor11)
			      in  do  %% Line 1304
				      call 'io':'requests'
					  ([{'put_chars','latin1',Ns}|%% Line 1305
								      [{'format',#{#<126>(8,1,'integer',['unsigned'|['big']]),
										   #<116>(8,1,'integer',['unsigned'|['big']]),
										   #<115>(8,1,'integer',['unsigned'|['big']]),
										   #<10>(8,1,'integer',['unsigned'|['big']])}#,[_cor12|[]]}|[]]])
				      %% Line 1306
				      apply 'list_commands'/2
					  (Ds, RT)
	  %% Line 1307
	  <[_X_D|Ds],RT> when 'true' ->
	      %% Line 1308
	      apply 'list_commands'/2
		  (Ds, RT)
	  %% Line 1309
	  <[],_X_RT> when 'true' ->
	      'ok'
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'list_commands',2}}] )
	    -| ['compiler_generated'] )
	end
'list_bindings'/2 =
    %% Line 1311
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Name,Val}|Bs],RT> when 'true' ->
	      do  %% Line 1312
		  case call 'erl_eval':'fun_data'
			   (Val) of
		    %% Line 1313
		    <{'fun_data',_X_FBs,FCs0}> when 'true' ->
			let <FCs> =
			    %% Line 1314
			    apply 'expand_value'/1
				(FCs0)
			in  let <F> = {%% Line 1315
				 'fun',%% Line 1315
				       0,%% Line 1315
					 {'clauses',FCs}}
			    in  let <M> =
				    %% Line 1316
				    {'match',0,{'var',0,Name},F}
				in  let <_cor5> =
					%% Line 1317
					apply 'enc'/0
					    ()
				    in  let <_cor6> =
					    %% Line 1317
					    call 'erl_pp':'expr'
						(M, _cor5)
					in  %% Line 1317
					    call 'io':'fwrite'
						(#{#<126>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor6|[]])
		    %% Line 1318
		    <{'named_fun_data',_X_FBs,FName,FCs0}> when 'true' ->
			let <FCs> =
			    %% Line 1319
			    apply 'expand_value'/1
				(FCs0)
			in  let <F> =
				%% Line 1320
				{'named_fun',0,FName,FCs}
			    in  let <M> =
				    %% Line 1321
				    {'match',0,{'var',0,Name},F}
				in  let <_cor10> =
					%% Line 1322
					apply 'enc'/0
					    ()
				    in  let <_cor11> =
					    %% Line 1322
					    call 'erl_pp':'expr'
						(M, _cor10)
					in  %% Line 1322
					    call 'io':'fwrite'
						(#{#<126>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor11|[]])
		    %% Line 1323
		    <'false'> when 'true' ->
			let <Namel> =
			    %% Line 1324
			    call 'io_lib':'fwrite'
				(#{#<126>(8,1,'integer',['unsigned'|['big']]),
				   #<115>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<61>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']])}#, [Name|[]])
			in  let <_cor13> =
				%% Line 1325
				call 'erlang':'iolist_size'
				    (Namel)
			    in  let <Nl> =
				    %% Line 1325
				    call 'erlang':'+'
					(_cor13, 1)
				in  let <ValS> =
					%% Line 1326
					apply 'pp'/3
					    (Val, Nl, RT)
				    in  %% Line 1327
					call 'io':'requests'
					    ([{'put_chars','latin1',Namel}|%% Line 1328
									   [{'put_chars','unicode',ValS}|%% Line 1329
													 ['nl']]])
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor16})
		      -| ['compiler_generated'] )
		  end
		  %% Line 1331
		  apply 'list_bindings'/2
		      (Bs, RT)
	  %% Line 1332
	  <[],_X_RT> when 'true' ->
	      %% Line 1333
	      'ok'
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'list_bindings',2}}] )
	    -| ['compiler_generated'] )
	end
'list_records'/1 =
    %% Line 1335
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 1336
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{_X_Name,Attr}> when 'true' ->
			let <_cor1> =
			    %% Line 1337
			    apply 'enc'/0
				()
			in  let <_cor2> =
				%% Line 1337
				call 'erl_pp':'attribute'
				    (Attr, _cor1)
			    in  %% Line 1337
				call 'io':'fwrite'
				    (#{#<126>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']])}#, [_cor2|[]])
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-list_records/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-list_records/1-fun-0-'}}] )
	in  %% Line 1336
	    call 'lists':'foreach'
		(_cor5, _cor0)
'record_defs'/2 =
    %% Line 1340
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1341
	    ( fun (_cor2) ->
		  call 'ets':'lookup'
		      (_cor1, _cor2)
	      -| [{'id',{0,0,'-record_defs/2-fun-0-'}}] )
	in  %% Line 1341
	    call 'lists':'flatmap'
		(_cor4, _cor0)
'expand_value'/1 =
    %% Line 1344
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1345
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'value',CommandN,V}> when 'true' ->
			apply 'try_abstract'/2
			    (V, CommandN)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-expand_value/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-expand_value/1-fun-0-'}}] )
	in  %% Line 1345
	    apply 'substitute_v1'/2
		(_cor3, _cor0)
'try_abstract'/2 =
    %% Line 1349
    fun (_cor1,_cor0) ->
	%% Line 1350
	try
	    call 'erl_parse':'abstract'
		(_cor1)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    %% Line 1351
	    {'call',0,{'atom',0,'v'},[{'integer',0,_cor0}|[]]}
'prep_list_commands'/1 =
    %% Line 1355
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1356
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'value',CommandN,_X_V}> when 'true' ->
			%% Line 1357
			{'call',0,{'atom',0,'v'},[{'integer',0,CommandN}|[]]}
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-prep_list_commands/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-prep_list_commands/1-fun-0-'}}] )
	in  %% Line 1356
	    apply 'substitute_v1'/2
		(_cor3, _cor0)
'substitute_v1'/2 =
    %% Line 1360
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,Value = {'value',_cor8,_cor9}> when 'true' ->
	      %% Line 1361
	      apply F
		  (Value)
	  %% Line 1362
	  <F,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor2> =
		  %% Line 1363
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor3> =
		      %% Line 1363
		      apply 'substitute_v1'/2
			  (F, _cor2)
		  in  %% Line 1363
		      call 'erlang':'list_to_tuple'
			  (_cor3)
	  %% Line 1364
	  <F,[E|Es]> when 'true' ->
	      let <_cor4> =
		  %% Line 1365
		  apply 'substitute_v1'/2
		      (F, E)
	      in  let <_cor5> =
		      %% Line 1365
		      apply 'substitute_v1'/2
			  (F, Es)
		  in  %% Line 1365
		      [_cor4|_cor5]
	  %% Line 1366
	  <_X_F,E> when 'true' ->
	      %% Line 1367
	      E
	end
'check_and_get_history_and_results'/0 =
    %% Line 1369
    fun () ->
	do  %% Line 1370
	    apply 'check_env'/1
		('shell_history_length')
	    do  %% Line 1371
		apply 'check_env'/1
		    ('shell_saved_results')
		%% Line 1372
		apply 'get_history_and_results'/0
		    ()
'get_history_and_results'/0 =
    %% Line 1374
    fun () ->
	let <History> =
	    %% Line 1375
	    apply 'get_env'/2
		('shell_history_length', 20)
	in  let <Results> =
		%% Line 1376
		apply 'get_env'/2
		    ('shell_saved_results', 20)
	    in  let <_cor2> =
		    %% Line 1377
		    call 'erlang':'min'
			(Results, History)
		in  %% Line 1377
		    {History,_cor2}
'pp'/3 =
    %% Line 1379
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1380
	    apply 'enc'/0
		()
	in  %% Line 1380
	    apply 'pp'/4
		(_cor2, _cor1, _cor0, _cor3)
'pp'/4 =
    %% Line 1382
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1384
	    case call 'application':'get_env'
		     ('stdlib', 'shell_strings') of
	      %% Line 1385
	      <{'ok','false'}> when 'true' ->
		  %% Line 1386
		  'false'
	      %% Line 1387
	      <_cor14> when 'true' ->
		  %% Line 1388
		  'true'
	    end
	in  let <_cor7> =
		%% Line 1390
		apply 'columns'/0
		    ()
	    in  let <_cor8> =
		    %% Line 1393
		    apply 'record_print_fun'/1
			(_cor1)
		in  let <_cor9> =
			%% Line 1390
			[{'column',_cor2}|[{'line_length',_cor7}|%% Line 1391
								 [{'depth',30}|[{'max_chars',60}|%% Line 1392
												 [{'strings',_cor5}|%% Line 1393
														    [{'record_print_fun',_cor8}|_cor0]]]]]]
		    in  %% Line 1390
			call 'io_lib_pretty':'print'
			    (_cor3, _cor9)
'columns'/0 =
    %% Line 1396
    fun () ->
	%% Line 1397
	case call 'io':'columns'
		 () of
	  %% Line 1398
	  <{'ok',N}> when 'true' ->
	      N
	  %% Line 1399
	  <_cor1> when 'true' ->
	      80
	end
'encoding'/0 =
    %% Line 1401
    fun () ->
	%% Line 1402
	case apply 'enc'/0
		 () of
	  <[{'encoding',Encoding}|[]]> when 'true' ->
	      %% Line 1403
	      Encoding
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'enc'/0 =
    %% Line 1404
    fun () ->
	let <_cor0> =
	    %% Line 1405
	    call 'io':'getopts'
		()
	in  %% Line 1405
	    case call 'lists':'keyfind'
		     ('encoding', 1, _cor0) of
	      %% Line 1406
	      <'false'> when 'true' ->
		  [{'encoding','latin1'}]
	      %% Line 1407
	      <Enc> when 'true' ->
		  [Enc|[]]
	    end
'garb'/1 =
    %% Line 1410
    fun (_cor0) ->
	do  %% Line 1411
	    call 'erlang':'garbage_collect'
		(_cor0)
	    do  catch
		    let <_cor1> =
			%% Line 1412
			call 'erlang':'whereis'
			    ('user')
		    in  %% Line 1412
			call 'erlang':'garbage_collect'
			    (_cor1)
		do  catch
			let <_cor2> =
			    %% Line 1413
			    call 'erlang':'group_leader'
				()
			in  %% Line 1413
			    call 'erlang':'garbage_collect'
				(_cor2)
		    %% Line 1414
		    call 'erlang':'garbage_collect'
			()
'get_env'/2 =
    %% Line 1416
    fun (_cor1,_cor0) ->
	%% Line 1417
	case call 'application':'get_env'
		 ('stdlib', _cor1) of
	  %% Line 1418
	  <{'ok',Val}>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Val)
		in  let <_cor3> =
			call 'erlang':'>='
			    (Val, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1419
	      Val
	  %% Line 1420
	  <_cor7> when 'true' ->
	      _cor0
	end
'check_env'/1 =
    %% Line 1424
    fun (_cor0) ->
	%% Line 1425
	case call 'application':'get_env'
		 ('stdlib', _cor0) of
	  %% Line 1426
	  <'undefined'> when 'true' ->
	      %% Line 1427
	      'ok'
	  %% Line 1428
	  <{'ok',Val}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Val)
		in  let <_cor2> =
			call 'erlang':'>='
			    (Val, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1429
	      'ok'
	  %% Line 1430
	  <{'ok',Val}> when 'true' ->
	      let <Txt> =
		  %% Line 1431
		  call 'io_lib':'fwrite'
		      (%% Line 1432
		       [73|[110|[118|[97|[108|[105|[100|[32|[118|[97|[108|[117|[101|[32|[111|[102|[32|[83|[84|[68|[76|[73|[66|[32|[99|[111|[110|[102|[105|[103|[117|[114|[97|[116|[105|[111|[110|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[126|[119|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1433
																																									     [_cor0|[Val|[]]])
	      in  let <_cor4> =
		      %% Line 1434
		      call 'lists':'flatten'
			  (Txt)
		  in  %% Line 1434
		      call 'error_logger':'info_report'
			  (_cor4)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'set_env'/4 =
    %% Line 1437
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1438
	    case call 'application':'get_env'
		     (_cor3, _cor2) of
	      %% Line 1439
	      <'undefined'> when 'true' ->
		  _cor0
	      %% Line 1441
	      <{'ok',Old}> when 'true' ->
		  %% Line 1442
		  Old
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	in  do  %% Line 1444
		call 'application_controller':'set_env'
		    (_cor3, _cor2, _cor1)
		_cor5
'history'/1 =
    %% Line 1450
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1451
	      apply 'set_env'/4
		  ('stdlib', 'shell_history_length', L, 20)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'history',1}}] )
	    -| ['compiler_generated'] )
	end
'results'/1 =
    %% Line 1456
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1457
	      apply 'set_env'/4
		  ('stdlib', 'shell_saved_results', L, 20)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'results',1}}] )
	    -| ['compiler_generated'] )
	end
'catch_exception'/1 =
    %% Line 1462
    fun (_cor0) ->
	%% Line 1463
	apply 'set_env'/4
	    ('stdlib', 'shell_catch_exception', _cor0, 'false')
'prompt_func'/1 =
    %% Line 1469
    fun (_cor0) ->
	%% Line 1470
	apply 'set_env'/4
	    ('stdlib', 'shell_prompt_func', _cor0, 'default')
'strings'/1 =
    %% Line 1476
    fun (_cor0) ->
	%% Line 1477
	apply 'set_env'/4
	    ('stdlib', 'shell_strings', _cor0, 'true')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('shell')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('shell', _cor0)
end