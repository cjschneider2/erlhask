module 'pg' ['create'/1,
	     'create'/2,
	     'esend'/2,
	     'join'/2,
	     'master'/1,
	     'members'/1,
	     'module_info'/0,
	     'module_info'/1,
	     'name_to_pid'/1,
	     'send'/2,
	     'standby'/2]
    attributes [%% Line 20
		'deprecated' =
		    %% Line 20
		    ['module'],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'create',1},[{'type',39,'bounded_fun',[{'type',39,'fun',[{'type',39,'product',[{'var',39,'PgName'}]}|[{'type',39,'union',[{'atom',39,'ok'}|[{'type',39,'tuple',[{'atom',39,'error'}|[{'var',39,'Reason'}]]}]]}]]}|[[{'type',40,'constraint',[{'atom',40,'is_subtype'}|[[{'var',40,'PgName'}|[{'type',40,'term',[]}]]]]}|[{'type',41,'constraint',[{'atom',41,'is_subtype'}|[[{'var',41,'Reason'}|[{'type',41,'union',[{'atom',41,'already_created'}|[{'type',41,'term',[]}]]}]]]]}]]]]}]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'create',2},[{'type',52,'bounded_fun',[{'type',52,'fun',[{'type',52,'product',[{'var',52,'PgName'}|[{'var',52,'Node'}]]}|[{'type',52,'union',[{'atom',52,'ok'}|[{'type',52,'tuple',[{'atom',52,'error'}|[{'var',52,'Reason'}]]}]]}]]}|[[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'PgName'}|[{'type',53,'term',[]}]]]]}|[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'Node'}|[{'type',54,'node',[]}]]]]}|[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Reason'}|[{'type',55,'union',[{'atom',55,'already_created'}|[{'type',55,'term',[]}]]}]]]]}]]]]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'standby',2},[{'type',67,'fun',[{'type',67,'product',[{'type',67,'term',[]}|[{'type',67,'node',[]}]]}|[{'atom',67,'ok'}]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'join',2},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'PgName'}|[{'var',75,'Pid'}]]}|[{'var',75,'Members'}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'PgName'}|[{'type',76,'term',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Pid'}|[{'type',77,'pid',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Members'}|[{'type',78,'list',[{'type',78,'pid',[]}]}]]]]}]]]]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'send',2},[{'type',89,'bounded_fun',[{'type',89,'fun',[{'type',89,'product',[{'var',89,'PgName'}|[{'var',89,'Msg'}]]}|[{'atom',89,'ok'}]]}|[[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'PgName'}|[{'type',90,'term',[]}]]]]}|[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'Msg'}|[{'type',91,'term',[]}]]]]}]]]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'esend',2},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'PgName'}|[{'var',103,'Msg'}]]}|[{'atom',103,'ok'}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'PgName'}|[{'type',104,'term',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Msg'}|[{'type',105,'term',[]}]]]]}]]]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'members',1},[{'type',116,'bounded_fun',[{'type',116,'fun',[{'type',116,'product',[{'var',116,'PgName'}]}|[{'var',116,'Members'}]]}|[[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'PgName'}|[{'type',117,'term',[]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Members'}|[{'type',118,'list',[{'type',118,'pid',[]}]}]]]]}]]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'name_to_pid',1},[{'type',133,'fun',[{'type',133,'product',[{'type',133,'atom',[]}]}|[{'type',133,'union',[{'type',133,'pid',[]}|[{'atom',133,'undefined'}]]}]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'master',1},[{'type',138,'fun',[{'type',138,'product',[{'type',138,'term',[]}]}|[{'type',138,'no_return',[]}]]}]}]]
'create'/1 =
    %% Line 43
    fun (_cor0) ->
	catch
	    do  %% Line 44
		apply 'check'/1
		    (_cor0)
		let <Pid> =
		    %% Line 45
		    call 'erlang':'spawn'
			('pg', 'master', [_cor0|[]])
		in  do  %% Line 46
			call 'global':'register_name'
			    (_cor0, Pid)
			%% Line 47
			'ok'
'create'/2 =
    %% Line 57
    fun (_cor1,_cor0) ->
	catch
	    do  %% Line 58
		apply 'check'/1
		    (_cor1)
		let <Pid> =
		    %% Line 59
		    call 'erlang':'spawn'
			(_cor0, 'pg', 'master', [_cor1|[]])
		in  do  %% Line 60
			call 'global':'register_name'
			    (_cor1, Pid)
			%% Line 61
			'ok'
'standby'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	%% Line 70
	'ok'
'join'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <PgName,Pid>
	      when call 'erlang':'is_atom'
		    (PgName) ->
	      let <_cor2> =
		  %% Line 81
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 81
		      call 'global':'send'
			  (PgName, {'join',_cor2,Pid})
		      %% Line 82
		      receive
			%% Line 83
			<{_X_P,{'members',Members}}> when 'true' ->
			    %% Line 84
			    Members
		      after 'infinity' ->
			'true'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'send'/2 =
    %% Line 93
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <PgName,Mess>
	      when call 'erlang':'is_atom'
		    (PgName) ->
	      let <_cor2> =
		  %% Line 94
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 94
		      call 'global':'send'
			  (PgName, {'send',_cor2,Mess})
		      %% Line 95
		      'ok'
	  %% Line 96
	  <Pg,Mess>
	      when call 'erlang':'is_pid'
		    (Pg) ->
	      let <_cor3> =
		  %% Line 97
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 97
		      call 'erlang':'!'
			  (Pg, {'send',_cor3,Mess})
		      %% Line 98
		      'ok'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'send',2}}] )
	    -| ['compiler_generated'] )
	end
'esend'/2 =
    %% Line 107
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <PgName,Mess>
	      when call 'erlang':'is_atom'
		    (PgName) ->
	      let <_cor2> =
		  %% Line 108
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 108
		      call 'global':'send'
			  (PgName, {'esend',_cor2,Mess})
		      %% Line 109
		      'ok'
	  %% Line 110
	  <Pg,Mess>
	      when call 'erlang':'is_pid'
		    (Pg) ->
	      let <_cor3> =
		  %% Line 111
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 111
		      call 'erlang':'!'
			  (Pg, {'esend',_cor3,Mess})
		      %% Line 112
		      'ok'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'esend',2}}] )
	    -| ['compiler_generated'] )
	end
'members'/1 =
    %% Line 120
    fun (_cor0) ->
	case _cor0 of
	  <PgName>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 121
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 121
		      call 'global':'send'
			  (PgName, {_cor1,'members'})
		      %% Line 122
		      receive
			%% Line 123
			<{_X_P,{'members',Members}}> when 'true' ->
			    %% Line 124
			    Members
		      after 'infinity' ->
			'true'
	  %% Line 126
	  <Pg>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      do  %% Line 127
		  call 'erlang':'!'
		      (Pg, {'self','members'})
		  %% Line 128
		  receive
		    %% Line 129
		    <{_X_P,{'members',Members}}> when 'true' ->
			%% Line 130
			Members
		  after 'infinity' ->
		    'true'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'members',1}}] )
	    -| ['compiler_generated'] )
	end
'name_to_pid'/1 =
    %% Line 135
    fun (_cor0) ->
	case _cor0 of
	  <PgName>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 136
	      call 'global':'whereis_name'
		  (PgName)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'name_to_pid',1}}] )
	    -| ['compiler_generated'] )
	end
'master'/1 =
    %% Line 140
    fun (_cor0) ->
	do  %% Line 141
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    %% Line 142
	    apply 'master_loop'/2
		(_cor0, [])
'master_loop'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	%% Line 145
	receive
	  %% Line 146
	  <{'send',From,Message}> when 'true' ->
	      do  %% Line 147
		  apply 'send_all'/2
		      (_cor0, {'pg_message',From,_cor1,Message})
		  %% Line 148
		  apply 'master_loop'/2
		      (_cor1, _cor0)
	  %% Line 149
	  <{'esend',From,Message}> when 'true' ->
	      let <_cor2> =
		  %% Line 150
		  call 'lists':'delete'
		      (From, _cor0)
	      in  do  %% Line 150
		      apply 'send_all'/2
			  (_cor2, %% Line 151
				  {'pg_message',From,_cor1,Message})
		      %% Line 152
		      apply 'master_loop'/2
			  (_cor1, _cor0)
	  %% Line 153
	  <{'join',From,Pid}> when 'true' ->
	      do  %% Line 154
		  call 'erlang':'link'
		      (Pid)
		  do  %% Line 155
		      apply 'send_all'/2
			  (_cor0, {'new_member',_cor1,Pid})
		      let <_cor3> =
			  %% Line 156
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 156
			      call 'erlang':'!'
				  (From, {_cor3,{'members',_cor0}})
			      %% Line 157
			      apply 'master_loop'/2
				  (_cor1, [Pid|_cor0])
	  %% Line 158
	  <{From,'members'}> when 'true' ->
	      let <_cor4> =
		  %% Line 159
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 159
		      call 'erlang':'!'
			  (From, {_cor4,{'members',_cor0}})
		      %% Line 160
		      apply 'master_loop'/2
			  (_cor1, _cor0)
	  %% Line 161
	  <{'EXIT',From,_cor11}> when 'true' ->
	      let <_cor7> =
		  %% Line 163
		  case call 'lists':'member'
			   (From, _cor0) of
		    %% Line 164
		    <'true'> when 'true' ->
			let <NewMembers> =
			    %% Line 165
			    call 'lists':'delete'
				(From, _cor0)
			in  do  %% Line 166
				apply 'send_all'/2
				    (NewMembers, {'crashed_member',_cor1,From})
				%% Line 167
				NewMembers
		    %% Line 168
		    <'false'> when 'true' ->
			_cor0
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 171
		  apply 'master_loop'/2
		      (_cor1, _cor7)
	after 'infinity' ->
	  'true'
'send_all'/2 =
    %% Line 174
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor4> when 'true' ->
	      'ok'
	  %% Line 175
	  <[P|Ps],M> when 'true' ->
	      do  %% Line 176
		  call 'erlang':'!'
		      (P, M)
		  %% Line 177
		  apply 'send_all'/2
		      (Ps, M)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'send_all',2}}] )
	    -| ['compiler_generated'] )
	end
'check'/1 =
    %% Line 181
    fun (_cor0) ->
	%% Line 182
	case call 'global':'whereis_name'
		 (_cor0) of
	  %% Line 183
	  <Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 184
	      call 'erlang':'throw'
		  ({'error','already_created'})
	  %% Line 185
	  <'undefined'> when 'true' ->
	      %% Line 186
	      'ok'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('pg')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('pg', _cor0)
end