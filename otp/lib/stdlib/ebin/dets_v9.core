module 'dets_v9' ['bchunk_init'/2,
		  'bulk_input'/3,
		  'cache_segps'/3,
		  'check_file_header'/2,
		  'compact_init'/3,
		  'db_hash'/2,
		  'do_perform_save'/1,
		  'file_info'/1,
		  'find_object'/2,
		  'fsck_input'/4,
		  'init_freelist'/2,
		  'initiate_file'/11,
		  'mark_dirty'/1,
		  'may_grow'/3,
		  'module_info'/0,
		  'module_info'/1,
		  'no_slots'/1,
		  'output_objs'/4,
		  'prep_table_copy'/9,
		  'read_bchunks'/2,
		  'read_file_header'/2,
		  'scan_objs'/8,
		  'slot_objs'/2,
		  'table_parameters'/1,
		  'try_bchunk_header'/2,
		  'v_segments'/1,
		  'write_cache'/1]
    attributes []
'mark_dirty'/1 =
    %% Line 285
    fun (_cor0) ->
	%% Line 287
	case call 'dets_utils':'pwrite'
		 (_cor0, [{8,#{#<0>(8,1,'integer',['unsigned'|['big']]),
			       #<0>(8,1,'integer',['unsigned'|['big']]),
			       #<0>(8,1,'integer',['unsigned'|['big']]),
			       #<0>(8,1,'integer',['unsigned'|['big']])}#}]) of
	  <{_X_H,'ok'}> when 'true' ->
	      %% Line 288
	      case call 'dets_utils':'sync'
		       (_cor0) of
		<'ok'> when 'true' ->
		    %% Line 289
		    ( case _cor0 of
			( <( {'head',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec0,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
			     -| ['compiler_generated'] )> when 'true' ->
			      case call 'dets_utils':'position'
				       (_cor0, _rec0) of
				<{'ok',_X_Pos}> when 'true' ->
				    %% Line 290
				    call 'dets_utils':'truncate'
					(_cor0, 'cur')
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor38> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','head'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'prep_table_copy'/9 =
    %% Line 293
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 294
	case _cor0 of
	  %% Line 295
	  <{'$hash2',9,%% Line 296
		       1,_cor35,_cor36,_cor37,%% Line 299
					      HashMethodCode,%% Line 297
							     N,%% Line 297
							       M,%% Line 297
								 Next,%% Line 298
								      Min,%% Line 298
									  Max,%% Line 300
									      NoObjects,%% Line 300
											NoKeys,%% Line 301
											       _X_NoColls}>
	      when %% Line 302
		try
		    let <_cor9> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor10> =
			    call 'erlang':'is_integer'
				(M)
			in  let <_cor11> =
				call 'erlang':'is_integer'
				    (Next)
			    in  let <_cor12> =
				    %% Line 303
				    call 'erlang':'is_integer'
					(Min)
				in  let <_cor13> =
					%% Line 303
					call 'erlang':'is_integer'
					    (Max)
				    in  let <_cor14> =
					    %% Line 304
					    call 'erlang':'is_integer'
						(NoObjects)
					in  let <_cor15> =
						%% Line 304
						call 'erlang':'is_integer'
						    (NoKeys)
					    in  let <_cor16> =
						    %% Line 305
						    call 'erlang':'>='
							(NoObjects, NoKeys)
						in  let <_cor17> =
							call 'erlang':'and'
							    (_cor15, _cor16)
						    in  let <_cor18> =
							    call 'erlang':'and'
								(_cor14, _cor17)
							in  let <_cor19> =
								call 'erlang':'and'
								    (_cor13, _cor18)
							    in  let <_cor20> =
								    call 'erlang':'and'
									(_cor12, _cor19)
								in  let <_cor21> =
									call 'erlang':'and'
									    (_cor11, _cor20)
								    in  let <_cor22> =
									    call 'erlang':'and'
										(_cor10, _cor21)
									in  call 'erlang':'and'
										(_cor9, _cor22)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <HashMethod> =
		  %% Line 306
		  apply 'code_to_hash_method'/1
		      (HashMethodCode)
	      in  %% Line 307
		  case apply 'hash_invars'/5
			   (N, M, Next, Min, Max) of
		    %% Line 308
		    <'false'> when 'true' ->
			%% Line 309
			call 'erlang':'throw'
			    ('badarg')
		    %% Line 310
		    <'true'> when 'true' ->
			%% Line 311
			apply 'init_file'/17
			    (_cor8, _cor7, _cor6, _cor5, _cor4, Min, Max, _cor3, _cor2, _cor1, %% Line 312
											       'false', %% Line 312
													M, %% Line 312
													   N, %% Line 312
													      Next, %% Line 312
														    HashMethod, %% Line 313
																NoObjects, %% Line 313
																	   NoKeys)
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor24})
		      -| ['compiler_generated'] )
		  end
	  %% Line 315
	  <_cor38> when 'true' ->
	      %% Line 316
	      call 'erlang':'throw'
		  ('badarg')
	end
'initiate_file'/11 =
    %% Line 325
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <MaxSlots1> =
	    %% Line 327
	    call 'erlang':'min'
		(_cor4, 33554432)
	in  let <MinSlots1> =
		%% Line 328
		call 'erlang':'min'
		    (_cor5, MaxSlots1)
	    in  let <MinSlots> =
		    %% Line 329
		    apply 'slots2'/1
			(MinSlots1)
		in  let <MaxSlots> =
			%% Line 330
			apply 'slots2'/1
			    (MaxSlots1)
		    in  %% Line 333
			apply 'init_file'/17
			    (_cor10, _cor9, _cor8, _cor7, _cor6, MinSlots, MaxSlots, _cor3, _cor2, _cor1, _cor0, MinSlots, 0, MinSlots, %% Line 334
																	'phash2', %% Line 334
																		  0, %% Line 334
																		     0)
'init_file'/17 =
    %% Line 336
    fun (_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Ftab> =
	    %% Line 338
	    call 'dets_utils':'init_alloc'
		(1336)
	in  let <_cor34> =
		%% Line 342
		call 'erlang':'*'
		    (_cor5, 2)
	    in  let <_cor33> =
		    %% Line 352
		    call 'orddict':'new'
			()
		in  let <_cor32> =
			%% Line 363
			call 'dets_utils':'new_cache'
			    (_cor8)
		    in  let <Head0> =
			    %% Line 340
			    {'head',_cor5,_cor34,_cor3,_cor16,_cor1,_cor0,%% Line 347
									  0,_cor4,_cor13,_cor12,%% Line 351
												Ftab,'undefined',_cor33,_cor7,%% Line 350
															      'dirty','false',_cor2,%% Line 355
																		    'true',_cor11,_cor10,_cor32,_cor14,'read_write',_cor9,_cor15,'undefined','undefined',%% Line 364
																													 9,%% Line 367
																													   'dets_v9',%% Line 365
																														     16,1336}
			in  let <NoColls> =
				%% Line 371
				#{#<0>(112,8,'integer',['unsigned'|['big']])}#
			    in  let <FileHeader> =
				    %% Line 372
				    apply 'file_header'/4
					(Head0, 0, %% Line 373
						   0, %% Line 373
						      NoColls)
				in  let <_cor41> =
					%% Line 375
					#{#<0>(1024,8,'integer',['unsigned'|['big']])}#
				    in  let <W0> =
					    %% Line 374
					    {0,[FileHeader|_cor41]}
					in  let <_cor48> =
						%% Line 378
						( fun (_cor46) ->
						      case _cor46 of
							<{I1,I2}>
							    when let <_cor44> =
								  call 'erlang':'is_integer'
								      (I1)
							      in  let <_cor45> =
								      call 'erlang':'is_integer'
									  (I2)
								  in  call 'erlang':'and'
									  (_cor44, _cor45) ->
							    'ok'
							%% Line 379
							<{K,V}> when 'true' ->
							    call 'erlang':'put'
								(K, V)
							( <_cor47> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor47})
								-| [{'function_name',{'-init_file/17-fun-0-',1}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-init_file/17-fun-0-'}}] )
					    in  let <_cor43> =
						    %% Line 380
						    call 'erlang':'erase'
							()
						in  do  %% Line 378
							call 'lists':'foreach'
							    (_cor48, _cor43)
							let <Zero> =
							    %% Line 384
							    apply 'seg_zero'/0
								()
							in  let <_cor50> =
								%% Line 385
								apply 'no_parts'/1
								    (_cor3)
							    in  %% Line 385
								case apply 'init_parts'/5
									 (Head0, 0, _cor50, Zero, []) of
								  <{Head1,Ws1}> when 'true' ->
								      let <NoSegs> =
									  %% Line 386
									  apply 'no_segs'/1
									      (_cor3)
								      in  %% Line 388
									  case apply 'init_segments'/6
										   (Head1, 0, NoSegs, Zero, [], []) of
									    <{Head2,WsI,WsP}> when 'true' ->
										let <_cor54> =
										    %% Line 389
										    case <> of
										      %% Line 390
										      <>
											  when call 'erlang':'=:='
												(_cor6,
												 'true') ->
											  call 'erlang':'++'
											      (WsP, WsI)
										      %% Line 391
										      <> when 'true' ->
											  WsP
										    end
										in  let <_cor56> =
											%% Line 393
											call 'lists':'append'
											    (Ws1)
										    in  let <_cor57> =
											    %% Line 393
											    call 'erlang':'++'
												(_cor56, _cor54)
											in  do  %% Line 393
												call 'dets_utils':'pwrite'
												    (_cor16, _cor14, [W0|_cor57])
												%% Line 394
												case apply 'hash_invars'/1
													 (Head2) of
												  <'true'> when 'true' ->
												      %% Line 399
												      case call 'dets_utils':'alloc'
													       (Head2, 16) of
													<{_cor83,Where,_cor84}> when 'true' ->
													    let <NewFtab> =
														%% Line 400
														call 'dets_utils':'init_alloc'
														    (Where)
													    in  %% Line 401
														case Head2 of
														  <{'head',_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115}> when 'true' ->
														      let <_cor62> =
															  call 'erlang':'setelement'
															      (32, Head2, Where)
														      in  let <_cor64> =
															      call 'erlang':'setelement'
																  (12, _cor62, NewFtab)
															  in  %% Line 402
															      {'ok',_cor64}
														  ( <_cor116> when 'true' ->
															( call ( 'erlang'
																 -| ['compiler_generated'] ):( 'error'
																			       -| ['compiler_generated'] )
															      (( {'badrecord','head'}
																 -| ['compiler_generated'] ))
															  -| ['compiler_generated'] )
														    -| ['compiler_generated'] )
														end
													( <_cor59> when 'true' ->
													      primop 'match_fail'
														  ({'badmatch',_cor59})
													  -| ['compiler_generated'] )
												      end
												  ( <_cor58> when 'true' ->
													primop 'match_fail'
													    ({'badmatch',_cor58})
												    -| ['compiler_generated'] )
												end
									    ( <_cor53> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor53})
									      -| ['compiler_generated'] )
									  end
								  ( <_cor51> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor51})
								    -| ['compiler_generated'] )
								end
'slots2'/1 =
    %% Line 405
    fun (_cor0) ->
	case _cor0 of
	  <NoSlots>
	      when call 'erlang':'>='
		    (_cor0,
		     256) ->
	      let <_cor1> =
		  %% Line 406
		  call 'dets_utils':'log2'
		      (NoSlots)
	      in  %% Line 406
		  call 'erlang':'bsl'
		      (1, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'slots2',1}}] )
	    -| ['compiler_generated'] )
	end
'init_parts'/5 =
    %% Line 408
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Head,PartNo,NoParts,Zero,Ws>
	      when call 'erlang':'<'
		    (PartNo,
		     NoParts) ->
	      let <_cor5> =
		  %% Line 409
		  call 'erlang':'*'
		      (4, PartNo)
	      in  let <PartPos> =
		      %% Line 409
		      call 'erlang':'+'
			  (312, _cor5)
		  in  %% Line 410
		      case apply 'alloc_part'/3
			       (Head, Zero, PartPos) of
			<{NewHead,W,_X_Part}> when 'true' ->
			    let <_cor13> =
				%% Line 411
				call 'erlang':'+'
				    (PartNo, 1)
			    in  %% Line 411
				apply 'init_parts'/5
				    (NewHead, _cor13, NoParts, Zero, [W|Ws])
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor12})
			  -| ['compiler_generated'] )
		      end
	  %% Line 412
	  <Head,_X_PartNo,_X_NoParts,_X_Zero,Ws> when 'true' ->
	      %% Line 413
	      {Head,Ws}
	end
'init_segments'/6 =
    %% Line 417
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Head,SegNo,NoSegs,SegZero,WsP,WsI>
	      when call 'erlang':'<'
		    (SegNo,
		     NoSegs) ->
	      %% Line 418
	      case apply 'allocate_segment'/3
		       (Head, SegZero, SegNo) of
		<{NewHead,WI,Ws}> when 'true' ->
		    let <_cor8> =
			%% Line 419
			call 'erlang':'+'
			    (SegNo, 1)
		    in  let <_cor7> =
			    %% Line 419
			    call 'erlang':'++'
				(Ws, WsP)
			in  %% Line 419
			    apply 'init_segments'/6
				(NewHead, _cor8, NoSegs, SegZero, _cor7, [WI|WsI])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 420
	  <Head,_X_SegNo,_X_NoSegs,_X_SegZero,WsP,WsI> when 'true' ->
	      %% Line 421
	      {Head,WsI,WsP}
	end
'allocate_segment'/3 =
    %% Line 424
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 425
	    call 'erlang':'div'
		(_cor0, 512)
	in  let <_cor4> =
		%% Line 425
		call 'erlang':'*'
		    (4, _cor3)
	    in  let <PartPos> =
		    %% Line 425
		    call 'erlang':'+'
			(312, _cor4)
		in  %% Line 426
		    case %% Line 2497
			 ( call ( 'erlang'
				  -| ['compiler_generated'] ):( 'get'
								-| ['compiler_generated'] )
			       (PartPos)
			   -| ['compiler_generated'] ) of
		      %% Line 427
		      <'undefined'> when 'true' ->
			  %% Line 429
			  case %% Line 430
			       apply 'alloc_part'/3
				   (_cor2, _cor1, PartPos) of
			    <{Head1,[InitArrPart|[ArrPartPointer|[]]],Part}> when 'true' ->
				%% Line 431
				case %% Line 432
				     apply 'alloc_seg'/4
					 (Head1, _cor1, _cor0, Part) of
				  <{NewHead,InitSegment,[SegPointer|[]]}> when 'true' ->
				      %% Line 433
				      {NewHead,InitSegment,[InitArrPart|[SegPointer|[ArrPartPointer|[]]]]}
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor12})
				    -| ['compiler_generated'] )
				end
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		      %% Line 434
		      <Part> when 'true' ->
			  %% Line 435
			  apply 'alloc_seg'/4
			      (_cor2, _cor1, _cor0, Part)
		    end
'alloc_part'/3 =
    %% Line 438
    fun (_cor2,_cor1,_cor0) ->
	%% Line 440
	case call 'dets_utils':'alloc'
		 (_cor2, 2047) of
	  <{NewHead,Part,_cor12}> when 'true' ->
	      do  %% Line 441
		  apply 'arrpart_cache'/2
		      (_cor0, Part)
		  let <InitArrPart> = {%% Line 442
		       Part,_cor1}
		  in  let <_cor7> =
			  %% Line 443
			  #{#<Part>(32,1,'integer',['unsigned'|['big']])}#
		      in  let <ArrPartPointer> = {_cor0,_cor7}
			  in  %% Line 444
			      {NewHead,[InitArrPart|[ArrPartPointer|[]]],Part}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'alloc_seg'/4 =
    %% Line 446
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 448
	case call 'dets_utils':'alloc'
		 (_cor3, 2047) of
	  <{NewHead,Segment,_cor18}> when 'true' ->
	      let <InitSegment> = {%% Line 449
		   Segment,_cor2}
	      in  let <_cor9> =
		      %% Line 450
		      call 'erlang':'band'
			  (_cor1, 511)
		  in  let <_cor10> =
			  %% Line 450
			  call 'erlang':'*'
			      (4, _cor9)
		      in  let <Pos> =
			      %% Line 450
			      call 'erlang':'+'
				  (_cor0, _cor10)
			  in  do  %% Line 2486
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'put'
									 -| ['compiler_generated'] )
					(Pos, Segment)
				    -| ['compiler_generated'] )
				  do  %% Line 452
				      call 'dets_utils':'disk_map_segment'
					  (Segment, _cor2)
				      let <_cor12> =
					  %% Line 453
					  #{#<Segment>(32,1,'integer',['unsigned'|['big']])}#
				      in  let <SegPointer> = {%% Line 453
					       Pos,_cor12}
					  in  %% Line 454
					      {NewHead,InitSegment,[SegPointer|[]]}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'init_freelist'/2 =
    %% Line 457
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Head,'true'> when 'true' ->
	      %% Line 458
	      ( case Head of
		  ( <( {'head',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec2,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 459
			apply 'free_lists_from_file'/2
			    (Head, _rec2)
		    -| ['compiler_generated'] )
		  ( <_cor37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'init_freelist',2}}] )
	    -| ['compiler_generated'] )
	end
'read_file_header'/2 =
    %% Line 462
    fun (_cor1,_cor0) ->
	%% Line 463
	case call 'dets_utils':'pread_close'
		 (_cor1, _cor0, 0, 188) of
	  <{'ok',Bin}> when 'true' ->
	      %% Line 468
	      case Bin of
		<#{#<FreeList>(32,1,'integer',['unsigned'|['big']]),
		   #<Cookie>(32,1,'integer',['unsigned'|['big']]),
		   #<CP>(32,1,'integer',['unsigned'|['big']]),
		   #<Type2>(32,1,'integer',['unsigned'|['big']]),
		   #<Version>(32,1,'integer',['unsigned'|['big']]),
		   #<M>(32,1,'integer',['unsigned'|['big']]),
		   #<Next>(32,1,'integer',['unsigned'|['big']]),
		   #<Kp>(32,1,'integer',['unsigned'|['big']]),
		   #<NoObjects>(32,1,'integer',['unsigned'|['big']]),
		   #<NoKeys>(32,1,'integer',['unsigned'|['big']]),
		   #<MinNoSlots>(32,1,'integer',['unsigned'|['big']]),
		   #<MaxNoSlots>(32,1,'integer',['unsigned'|['big']]),
		   #<HashMethod>(32,1,'integer',['unsigned'|['big']]),
		   #<N>(32,1,'integer',['unsigned'|['big']]),
		   #<NoCollsB>(112,8,'binary',['unsigned'|['big']]),
		   #<MD5>(16,8,'binary',['unsigned'|['big']]),
		   #<FlBase>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 470
		    case ( Bin
			   -| ['reuse_for_context'] ) of
		      <#{#<_cor40>(12,8,'binary',['unsigned'|['big']]),
			 #<MD5DigestedPart>(156,8,'binary',['unsigned'|['big']]),
			 #<_cor41>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 471
			  case call 'dets_utils':'position_close'
				   (_cor1, _cor0, 'eof') of
			    <{'ok',EOF}> when 'true' ->
				let <_cor10> =
				    %% Line 472
				    call 'erlang':'-'
					(EOF, 4)
				in  %% Line 472
				    case call 'dets_utils':'pread_close'
					     (_cor1, _cor0, _cor10, 4) of
				      <{'ok',#{#<FileSize>(32,1,'integer',['unsigned'|['big']])}#}> when 'true' ->
					  let <_cor18> =
					      %% Line 473
					      ( fun (_cor15,_cor14) ->
						    case <_cor15,_cor14> of
						      <LSz,{Acc,#{#<NN>(32,1,'integer',['unsigned'|['big']]),
								  #<R>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
							  %% Line 474
							  case <> of
							    %% Line 475
							    <>
								when call 'erlang':'=:='
								      (NN,
								       0) ->
								{Acc,R}
							    %% Line 476
							    <> when 'true' ->
								{[{LSz,NN}|Acc],R}
							  end
						      ( <_cor17,_cor16> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor17,_cor16})
							      -| [{'function_name',{'-read_file_header/2-fun-0-',2}}] )
							-| ['compiler_generated'] )
						    end
						-| [{'id',{0,0,'-read_file_header/2-fun-0-'}}] )
					  in  let <_cor13> =
						  %% Line 478
						  call 'lists':'seq'
						      (4, 31)
					      in  %% Line 473
						  case call 'lists':'foldl'
							   (_cor18, %% Line 478
								    {[],NoCollsB}, _cor13) of
						    <{CL,#{}#}> when 'true' ->
							let <_cor22> =
							    %% Line 480
							    case <> of
							      %% Line 481
							      <>
								  when let <_cor20> =
									call 'erlang':'=:='
									    (CL, [])
								    in  let <_cor21> =
									    call 'erlang':'>'
										(NoObjects, 0)
									in  call 'erlang':'and'
										(_cor20, _cor21) ->
								  %% Line 482
								  'undefined'
							      %% Line 483
							      <> when 'true' ->
								  %% Line 484
								  call 'lists':'reverse'
								      (CL)
							    end
							in  let <_cor31> =
								%% Line 486
								case FlBase of
								  %% Line 487
								  <0> when 'true' ->
								      1336
								  %% Line 488
								  <_cor42> when 'true' ->
								      FlBase
								end
							    in  let <_cor36> =
								    %% Line 494
								    call 'dets_utils':'code_to_type'
									(Type2)
								in  let <_cor35> =
									%% Line 506
									call 'erlang':'=/='
									    (#{#<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']]),
									       #<0>(8,1,'integer',['unsigned'|['big']])}#, MD5)
								    in  let <_cor34> =
									    %% Line 507
									    call 'erlang':'md5'
										(MD5DigestedPart)
									in  let <_cor33> =
										%% Line 508
										call 'erlang':'+'
										    (FileSize, FlBase)
									    in  let <FH> =
										    %% Line 490
										    {'fileheader',FreeList,_cor31,%% Line 492
														  Cookie,%% Line 493
															 CP,_cor36,%% Line 495
																   Version,%% Line 496
																	   M,%% Line 497
																	     Next,%% Line 498
																		  Kp,%% Line 499
																		     NoObjects,%% Line 500
																			       NoKeys,%% Line 501
																				      MinNoSlots,%% Line 502
																						 MaxNoSlots,_cor22,%% Line 504
																								   HashMethod,%% Line 505
																									      MD5,_cor35,_cor34,_cor33,%% Line 509
																												       EOF,%% Line 510
																													   N,%% Line 511
																													     'dets_v9'}
										in  %% Line 512
										    {'ok',_cor1,FH}
						    ( <_cor19> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor19})
						      -| ['compiler_generated'] )
						  end
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor11})
					-| ['compiler_generated'] )
				    end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor9})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    do  primop 'bs_context_to_binary'
				    (_cor8)
				primop 'match_fail'
				    ({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'check_file_header'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	%% Line 517
	( case _cor1 of
	    ( <( {'fileheader',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_rec3,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <HashBif> =
		      apply 'code_to_hash_method'/1
			  (_rec3)
		  in  let <_cor52> =
			  %% Line 519
			  case <> of
			    %% Line 520
			    <>
				when ( call 'erlang':'=/='
					(_cor92,
					 11259375)
				    -| ['compiler_generated'] ) ->
				%% Line 521
				{'error','not_a_dets_file'}
			    %% Line 522
			    <>
				when ( call 'erlang':'=:='
					(_cor94,
					 'badtype')
				    -| ['compiler_generated'] ) ->
				%% Line 523
				{'error','invalid_type_code'}
			    %% Line 524
			    <>
				when ( call 'erlang':'=/='
					(_cor95,
					 9)
				    -| ['compiler_generated'] ) ->
				%% Line 525
				{'error','bad_version'}
			    %% Line 526
			    <>
				when let <_cor28> =
				      ( call 'erlang':'=:='
					    (_cor105, 'true')
					-| ['compiler_generated'] )
				  in  let <_cor32> =
					  %% Line 527
					  ( call 'erlang':'=/='
						(_cor104, _cor106)
					    -| ['compiler_generated'] )
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor28, _cor32)
					    -| ['compiler_generated'] ) ->
				%% Line 528
				{'error','not_a_dets_file'}
			    %% Line 529
			    <>
				when ( call 'erlang':'=/='
					(_cor107,
					 _cor108)
				    -| ['compiler_generated'] ) ->
				%% Line 530
				{'error','not_closed'}
			    %% Line 531
			    <>
				when call 'erlang':'=:='
				      (HashBif,
				       'undefined') ->
				%% Line 532
				{'error','bad_hash_bif'}
			    %% Line 533
			    <>
				when ( call 'erlang':'=:='
					(_cor93,
					 1)
				    -| ['compiler_generated'] ) ->
				%% Line 534
				{'ok','true'}
			    %% Line 535
			    <>
				when ( call 'erlang':'=:='
					(_cor93,
					 0)
				    -| ['compiler_generated'] ) ->
				%% Line 536
				{'error','not_closed'}
			    %% Line 537
			    <> when 'true' ->
				%% Line 538
				{'error','not_a_dets_file'}
			  end
		      in  %% Line 540
			  case _cor52 of
			    %% Line 541
			    <{'ok',ExtraInfo}> when 'true' ->
				let <MaxObjSize> =
				    %% Line 573
				    ( case _cor103 of
					( <( ( NoColls
					       -| ['compiler_generated'] ) = ( 'undefined'
									       -| ['compiler_generated'] )
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      %% Line 574
					      ( NoColls
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					%% Line 575
					( <( NoColls
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      %% Line 576
					      ( apply ( 'max_objsize'/2
							-| ['compiler_generated'] )
						    (( NoColls
						       -| ['compiler_generated'] ), ( 0
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  let <_cor83> =
					%% Line 545
					call 'erlang':'*'
					    (_cor96, 2)
				    in  let <H> =
					    %% Line 543
					    {'head',_cor96,_cor83,_cor97,_cor0,_cor99,_cor100,%% Line 550
											      MaxObjSize,_cor109,_cor94,_cor98,'undefined',_cor90,_cor103,%% Line 554
																			  'infinity',%% Line 553
																				     'saved',%% Line 555
																					     'false',%% Line 557
																						     HashBif,_cor105,_cor101,_cor102,'undefined','undefined','read_write','false','undefined','undefined','undefined',%% Line 563
																																				      9,%% Line 564
																																					'dets_v9',%% Line 565
																																						  16,_cor91}
					in  %% Line 567
					    {'ok',H,ExtraInfo}
			    %% Line 568
			    <Error> when 'true' ->
				%% Line 569
				Error
			  end
	      -| ['compiler_generated'] )
	    ( <_cor111> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','fileheader'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'max_objsize'/1 =
    %% Line 573
    fun (_cor0) ->
	case _cor0 of
	  <NoColls = 'undefined'> when 'true' ->
	      %% Line 574
	      NoColls
	  %% Line 575
	  <NoColls> when 'true' ->
	      %% Line 576
	      apply 'max_objsize'/2
		  (NoColls, 0)
	end
'max_objsize'/2 =
    %% Line 578
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Max> when 'true' ->
	      %% Line 579
	      Max
	  %% Line 580
	  <[{_cor4,0}|L],Max> when 'true' ->
	      %% Line 581
	      apply 'max_objsize'/2
		  (L, Max)
	  %% Line 582
	  <[{I,_cor5}|L],_X_Max> when 'true' ->
	      %% Line 583
	      apply 'max_objsize'/2
		  (L, I)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'max_objsize',2}}] )
	    -| ['compiler_generated'] )
	end
'cache_segps'/3 =
    %% Line 585
    fun (_cor2,_cor1,_cor0) ->
	let <NoParts> =
	    %% Line 586
	    apply 'no_parts'/1
		(_cor0)
	in  let <_cor11> =
		%% Line 588
		call 'erlang':'*'
		    (4, NoParts)
	    in  %% Line 588
		case call 'dets_utils':'pread_close'
			 (_cor2, _cor1, 312, _cor11) of
		  <{'ok',Bin}> when 'true' ->
		      %% Line 589
		      apply 'cache_arrparts'/4
			  (Bin, 312, _cor2, _cor1)
		  ( <_cor12> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor12})
		    -| ['compiler_generated'] )
		end
'cache_arrparts'/4 =
    %% Line 591
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<ArrPartPos>(32,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,Pos,Fd,FileName> when 'true' ->
	      do  %% Line 592
		  apply 'arrpart_cache'/2
		      (Pos, ArrPartPos)
		  %% Line 593
		  case call 'dets_utils':'pread_close'
			   (Fd, FileName, %% Line 594
					  ArrPartPos, 2048) of
		    <{'ok',ArrPartBin}> when 'true' ->
			do  %% Line 596
			    apply 'cache_segps1'/3
				(Fd, ArrPartBin, ArrPartPos)
			    let <_cor6> =
				%% Line 597
				call 'erlang':'+'
				    (Pos, 4)
			    in  %% Line 597
				apply 'cache_arrparts'/4
				    (B, _cor6, Fd, FileName)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 598
	  <#{}#,_X_Pos,_X_Fd,_X_FileName> when 'true' ->
	      %% Line 599
	      'ok'
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor10)
		    ( primop 'match_fail'
			  ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		      -| [{'function_name',{'cache_arrparts',4}}] )
	    -| ['compiler_generated'] )
	end
'cache_segps1'/3 =
    %% Line 601
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,( _cor1
		      -| ['reuse_for_context'] ),_cor0> of
	  <_X_Fd,#{#<0>(32,1,'integer',['unsigned'|['big']]),
		   #<_cor7>('all',8,'binary',['unsigned'|['big']])}#,_X_P> when 'true' ->
	      %% Line 602
	      'ok'
	  %% Line 603
	  <Fd,#{#<S>(32,1,'integer',['unsigned'|['big']]),
		#<B>('all',8,'binary',['unsigned'|['big']])}#,P> when 'true' ->
	      do  %% Line 604
		  call 'dets_utils':'disk_map_segment_p'
		      (Fd, S)
		  do  %% Line 2486
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'put'
							     -| ['compiler_generated'] )
			    (P, S)
			-| ['compiler_generated'] )
		      let <_cor3> =
			  %% Line 606
			  call 'erlang':'+'
			      (P, 4)
		      in  %% Line 606
			  apply 'cache_segps1'/3
			      (Fd, B, _cor3)
	  %% Line 607
	  <_X_Fd,#{}#,_X_P> when 'true' ->
	      %% Line 608
	      'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor5)
		    ( primop 'match_fail'
			  ({'function_clause',_cor6,_cor5,_cor4})
		      -| [{'function_name',{'cache_segps1',3}}] )
	    -| ['compiler_generated'] )
	end
'no_parts'/1 =
    %% Line 610
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 611
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor3> =
		%% Line 611
		call 'erlang':'div'
		    (_cor2, 131072)
	    in  %% Line 611
		call 'erlang':'+'
		    (_cor3, 1)
'no_segs'/1 =
    %% Line 613
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 614
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor2> =
		%% Line 614
		call 'erlang':'div'
		    (_cor1, 256)
	    in  %% Line 614
		call 'erlang':'+'
		    (_cor2, 1)
'bulk_input'/3 =
    %% Line 624
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 625
	    call 'erlang':'make_ref'
		()
	in  %% Line 625
	    apply 'bulk_input'/4
		(_cor2, _cor1, _cor3, 0)
'bulk_input'/4 =
    %% Line 627
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 628
	( fun (_cor19) ->
	      case _cor19 of
		<'close'> when 'true' ->
		    catch
			%% Line 629
			apply _cor2
			    ('close')
		%% Line 630
		<'read'> when 'true' ->
		    let <_cor7> =
			catch
			    let <_cor6> =
				%% Line 631
				apply _cor2
				    ('read')
			    in  %% Line 631
				{_cor1,_cor6}
		    in  %% Line 631
			case _cor7 of
			  %% Line 632
			  <{_cor25,'end_of_input'}>
			      when call 'erlang':'=:='
				    (_cor25,
				     _cor1) ->
			      %% Line 633
			      'end_of_input'
			  %% Line 634
			  <{_cor26,{L0,NewInitFun}}>
			      when let <_cor27> =
				    call 'erlang':'=:='
					(_cor26, _cor1)
				in  let <_cor28> =
					try
					    let <_cor8> =
						call 'erlang':'is_list'
						    (L0)
					    in  let <_cor9> =
						    %% Line 635
						    call 'erlang':'is_function'
							(NewInitFun)
						in  call 'erlang':'and'
							(_cor8, _cor9)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false'
				    in  call 'erlang':'and'
					    (_cor27, _cor28) ->
			      %% Line 636
			      ( case _cor3 of
				  ( <( {'head',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec19,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor13> =
					    catch
						%% Line 637
						apply 'bulk_objects'/5
						    (L0, _cor3, _rec19, _cor0, [])
					in  %% Line 637
					    case _cor13 of
					      %% Line 638
					      <{'EXIT',_X_Error}> when 'true' ->
						  do  catch
							  %% Line 639
							  apply NewInitFun
							      ('close')
						      %% Line 640
						      {'error','invalid_objects_list'}
					      %% Line 641
					      <{L,NSeq}> when 'true' ->
						  let <_cor16> =
						      %% Line 642
						      apply 'bulk_input'/4
							  (_cor3, NewInitFun, _cor1, NSeq)
						  in  %% Line 642
						      {L,_cor16}
					      ( <_cor17> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor17})
						-| ['compiler_generated'] )
					    end
				    -| ['compiler_generated'] )
				  ( <_cor59> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 644
			  <{_cor60,Value}>
			      when call 'erlang':'=:='
				    (_cor60,
				     _cor1) ->
			      %% Line 645
			      {'error',{'init_fun',Value}}
			  %% Line 646
			  <Error> when 'true' ->
			      %% Line 647
			      call 'erlang':'throw'
				  ({'thrown',Error})
			end
		( <_cor20> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor20})
			-| [{'function_name',{'-bulk_input/4-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-bulk_input/4-fun-0-'}}] )
'bulk_objects'/5 =
    %% Line 651
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[T|Ts],Head,Kp,Seq,L> when 'true' ->
	      let <BT> =
		  %% Line 652
		  call 'erlang':'term_to_binary'
		      (T)
	      in  let <Key> =
		      %% Line 653
		      call 'erlang':'element'
			  (Kp, T)
		  in  let <_cor8> =
			  %% Line 654
			  call 'erlang':'+'
			      (Seq, 1)
		      in  ( let <Slot> =
				%% Line 1577
				( apply ( 'db_hash'/2
					  -| ['compiler_generated'] )
				      (Key, Head)
				  -| ['compiler_generated'] )
			    in  let <_cor7> =
				    %% Line 1578
				    ( #{#<( Slot
					    -| ['compiler_generated'] )>(( 32
									   -| ['compiler_generated'] ),( 1
													 -| ['compiler_generated'] ),( 'integer'
																       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				     -| ['compiler_generated'] )),
					#<Seq>(( 32
						 -| ['compiler_generated'] ),( 1
									       -| ['compiler_generated'] ),( 'integer'
													     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	   -| ['compiler_generated'] )),
					#<BT>(( 'all'
						-| ['compiler_generated'] ),( 8
									      -| ['compiler_generated'] ),( 'binary'
													    -| ['compiler_generated'] ),( ['unsigned'|['big']]
																	  -| ['compiler_generated'] ))}#
				      -| ['compiler_generated'] )
				in  %% Line 654
				    apply 'bulk_objects'/5
					(Ts, Head, Kp, _cor8, [_cor7|L])
			    -| ['compiler_generated'] )
	  %% Line 655
	  <[],_X_Head,Kp,Seq,L>
	      when let <_cor9> =
		    call 'erlang':'is_integer'
			(Kp)
		in  let <_cor10> =
			call 'erlang':'is_integer'
			    (Seq)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 656
	      {L,Seq}
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'bulk_objects',5}}] )
	    -| ['compiler_generated'] )
	end
'output_objs'/4 =
    %% Line 678
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <OldV,Head,SlotNums,Cntrs>
	      when call 'erlang':'=<'
		    (OldV,
		     9) ->
	      %% Line 679
	      ( fun (_cor16) ->
		    case _cor16 of
		      <'close'> when 'true' ->
			  %% Line 684
			  case call 'ets':'insert'
				   (Cntrs, {1,0,[],0}) of
			    <'true'> when 'true' ->
				%% Line 685
				case call 'ets':'insert'
					 (Cntrs, {'no',0,0}) of
				  <'true'> when 'true' ->
				      let <Fun> =
					  %% Line 686
					  apply 'output_objs2'/8
					      ('foo', [], OldV, Head, {}, Cntrs, %% Line 687
										 SlotNums, %% Line 687
											   'bar')
				      in  %% Line 688
					  apply Fun
					      ('close')
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      %% Line 689
		      <[]> when 'true' ->
			  %% Line 690
			  apply 'output_objs'/4
			      (OldV, Head, SlotNums, Cntrs)
		      %% Line 691
		      <L> when 'true' ->
			  %% Line 695
			  case call 'ets':'delete_all_objects'
				   (Cntrs) of
			    <'true'> when 'true' ->
				%% Line 696
				case call 'ets':'insert'
					 (Cntrs, {'no',0,0}) of
				  <'true'> when 'true' ->
				      %% Line 697
				      ( case Head of
					  ( <( {'head',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec20,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}
					       -| ['compiler_generated'] )> when 'true' ->
						let <Es> =
						    apply 'bin2term'/3
							(L, OldV, _rec20)
						in  %% Line 701
						    case apply 'output_slots'/6
							     (Es, Head, {}, Cntrs, 0, 0) of
						      <{NE,NAcc,NCache}> when 'true' ->
							  %% Line 702
							  apply 'output_objs2'/8
							      (NE, NAcc, OldV, Head, NCache, Cntrs, SlotNums, 1)
						      ( <_cor15> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor15})
							-| ['compiler_generated'] )
						    end
					    -| ['compiler_generated'] )
					  ( <_cor52> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor10})
				    -| ['compiler_generated'] )
				end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor9})
			      -| ['compiler_generated'] )
			  end
		    end
		-| [{'id',{0,0,'-output_objs/4-fun-0-'}}] )
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'output_objs',4}}] )
	    -| ['compiler_generated'] )
	end
'output_objs2'/8 =
    %% Line 705
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E,Acc,OldV,Head,Cache,SizeT,SlotNums,0> when 'true' ->
	      let <NCache> =
		  %% Line 706
		  apply 'write_all_sizes'/4
		      (Cache, SizeT, Head, 'more')
	      in  let <_cor9> =
		      %% Line 708
		      call 'erlang':'tuple_size'
			  (NCache)
		  in  let <_cor10> =
			  %% Line 708
			  call 'erlang':'min'
			      (_cor9, 10)
		      in  let <Max> =
			      %% Line 708
			      call 'erlang':'max'
				  (1, _cor10)
			  in  %% Line 709
			      apply 'output_objs2'/8
				  (E, Acc, OldV, Head, NCache, SizeT, SlotNums, Max)
	  %% Line 710
	  <E,Acc,OldV,Head,Cache,SizeT,SlotNums,ChunkI> when 'true' ->
	      %% Line 711
	      ( fun (_cor42) ->
		    case _cor42 of
		      <'close'> when 'true' ->
			  let <_cor12> =
			      %% Line 713
			      case <> of
				%% Line 714
				<>
				    when call 'erlang':'=:='
					  (Acc,
					   []) ->
				    {'foo',[],Cache}
				%% Line 715
				<> when 'true' ->
				    apply 'output_slot'/7
					(Acc, Head, Cache, [], SizeT, 0, 0)
			      end
			  in  %% Line 712
			      case _cor12 of
				<{_cor52,[],Cache1}> when 'true' ->
				    let <_X_NCache> =
					%% Line 717
					apply 'write_all_sizes'/4
					    (Cache1, SizeT, Head, 'no_more')
				    in  %% Line 719
					case call 'dets_utils':'alloc'
						 (Head, 2047) of
					  <{_cor53,SegEnd,_cor54}> when 'true' ->
					      %% Line 720
					      case call 'ets':'lookup'
						       (SizeT, 'no') of
						<[{'no',NoObjects,NoKeys}|[]]> when 'true' ->
						    %% Line 721
						    case Head of
						      <{'head',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
							  let <_cor20> =
							      call 'erlang':'setelement'
								  (7, Head, NoKeys)
							  in  let <_cor22> =
								  call 'erlang':'setelement'
								      (6, _cor20, NoObjects)
							      in  %% Line 722
								  case call 'ets':'delete'
									   (SizeT, 'no') of
								    <'true'> when 'true' ->
									%% Line 723
									case apply 'allocate_all_objects'/2
										 (_cor22, SizeT) of
									  <{NewHead,NL,_X_MaxSz,_X_End}> when 'true' ->
									      do  %% Line 728
										  apply 'segment_file'/4
										      (SizeT, NewHead, NL, SegEnd)
										  %% Line 729
										  case SlotNums of
										    <{MinSlots,EstNoSlots,MaxSlots}> when 'true' ->
											%% Line 730
											case <> of
											  %% Line 731
											  <>
											      when call 'erlang':'=:='
												    (EstNoSlots,
												     'bulk_init') ->
											      %% Line 732
											      {'ok',0,NewHead}
											  %% Line 733
											  <> when 'true' ->
											      let <EstNoSegs> =
												  %% Line 734
												  apply 'no_segs'/1
												      (EstNoSlots)
											      in  let <MinNoSegs> =
												      %% Line 735
												      apply 'no_segs'/1
													  (MinSlots)
												  in  let <MaxNoSegs> =
													  %% Line 736
													  apply 'no_segs'/1
													      (MaxSlots)
												      in  let <NoSegs> =
													      %% Line 737
													      apply 'no_segs'/1
														  (NoKeys)
													  in  let <_cor31> =
														  %% Line 738
														  call 'erlang':'-'
														      (NoSegs, EstNoSegs)
													      in  let <Diff> =
														      %% Line 738
														      call 'erlang':'abs'
															  (_cor31)
														  in  %% Line 739
														      case <> of
															%% Line 740
															<>
															    when try
																  let <_cor33> =
																      call 'erlang':'>'
																	  (Diff, 5)
																  in  let <_cor34> =
																	  call 'erlang':'=<'
																	      (NoSegs, MaxNoSegs)
																      in  let <_cor35> =
																	      call 'erlang':'>='
																		  (NoSegs, MinNoSegs)
																	  in  let <_cor36> =
																		  call 'erlang':'and'
																		      (_cor34, _cor35)
																	      in  call 'erlang':'and'
																		      (_cor33, _cor36)
															      of <Try> ->
																  Try
															      catch <T,R> ->
																  'false' ->
															    %% Line 741
															    {'try_again',NoKeys}
															%% Line 742
															<> when 'true' ->
															    %% Line 743
															    {'ok',0,NewHead}
														      end
											end
										    ( <_cor26> when 'true' ->
											  primop 'match_fail'
											      ({'badmatch',_cor26})
										      -| ['compiler_generated'] )
										  end
									  ( <_cor25> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor25})
									    -| ['compiler_generated'] )
									end
								    ( <_cor24> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor24})
								      -| ['compiler_generated'] )
								  end
						      ( <_cor86> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','head'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						( <_cor18> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor18})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor17})
					    -| ['compiler_generated'] )
					end
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor13})
				  -| ['compiler_generated'] )
			      end
		      %% Line 746
		      <L> when 'true' ->
			  %% Line 747
			  ( case Head of
			      ( <( {'head',_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_rec22,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <Es> =
					apply 'bin2term'/3
					    (L, OldV, _rec22)
				    in  %% Line 748
					case %% Line 749
					     apply 'output_slots'/8
						 (E, Es, Acc, Head, Cache, SizeT, 0, 0) of
					  <{NE,NAcc,NCache}> when 'true' ->
					      let <_cor41> =
						  %% Line 751
						  call 'erlang':'-'
						      (ChunkI, 1)
					      in  %% Line 750
						  apply 'output_objs2'/8
						      (NE, NAcc, OldV, Head, NCache, SizeT, SlotNums, _cor41)
					  ( <_cor40> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor40})
					    -| ['compiler_generated'] )
					end
				-| ['compiler_generated'] )
			      ( <_cor117> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','head'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-output_objs2/8-fun-0-'}}] )
	end
'compact_init'/3 =
    %% Line 756
    fun (_cor2,_cor1,_cor0) ->
	let <SizeT> =
	    %% Line 757
	    call 'ets':'new'
		('dets_compact', [])
	in  %% Line 758
	    case _cor2 of
	      <{'head',_cor20,_cor21,_cor22,_cor23,NoObjects,NoKeys,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
		  %% Line 760
		  ( case _cor0 of
		      ( <( {'$hash2',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_rec23}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 761
			    case %% Line 762
				 apply 'prepare_file_init'/5
				     (NoObjects, NoKeys, _rec23, SizeT, _cor1) of
			      <{NewWriteHead,Bases,SegAddr,SegEnd}> when 'true' ->
				  let <_cor9> =
				      %% Line 764
				      call 'erlang':'tuple_size'
					  (Bases)
				  in  let <Input> =
					  %% Line 764
					  apply 'compact_input'/4
					      (_cor2, NewWriteHead, SizeT, _cor9)
				      in  let <Output> =
					      %% Line 765
					      apply 'fast_output'/5
						  (NewWriteHead, SizeT, Bases, SegAddr, SegEnd)
					  in  %% Line 766
					      ( case NewWriteHead of
						  ( <( {'head',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_rec24,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}
						       -| ['compiler_generated'] )> when 'true' ->
							let <TmpDir> =
							    call 'filename':'dirname'
								(_rec24)
							in  let <_cor15> =
								catch
								    %% Line 767
								    call 'file_sorter':'sort'
									(Input, Output, %% Line 768
											[{'format','binary'}|[{'tmpdir',TmpDir}|%% Line 769
																[{'header',1}]]])
							    in  do  %% Line 770
								    call 'ets':'delete'
									(SizeT)
								    _cor15
						    -| ['compiler_generated'] )
						  ( <_cor93> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','head'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor62> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','$hash2'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'compact_input'/4 =
    %% Line 773
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <L> =
	    %% Line 774
	    call 'dets_utils':'all_allocated_as_list'
		(_cor3)
	in  let <_cor6> =
		%% Line 775
		call 'erlang':'-'
		    (_cor0, 0)
	    in  let <_cor7> =
		    %% Line 775
		    call 'lists':'duplicate'
			(_cor6, [0])
		in  let <Cache> =
			%% Line 775
			call 'erlang':'list_to_tuple'
			    (_cor7)
		    in  %% Line 776
			apply 'compact_input'/5
			    (_cor3, _cor2, _cor1, Cache, L)
'compact_input'/5 =
    %% Line 778
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 779
	( fun (_cor5) ->
	      case _cor5 of
		<'close'> when 'true' ->
		    %% Line 780
		    'ok'
		%% Line 781
		<'read'> when 'true' ->
		    %% Line 782
		    apply 'compact_read'/8
			(_cor4, _cor3, _cor2, _cor1, _cor0, 0, [], 0)
		( <_cor6> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor6})
			-| [{'function_name',{'-compact_input/5-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-compact_input/5-fun-0-'}}] )
'compact_read'/8 =
    %% Line 785
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Head,WHead,SizeT,Cache,[],_X_Min,[],_X_ASz> when 'true' ->
	      do  %% Line 786
		  apply 'fast_write_all_sizes'/3
		      (Cache, SizeT, WHead)
		  %% Line 787
		  'end_of_input'
	  %% Line 788
	  <Head,WHead,SizeT,Cache,L,Min,SegBs,ASz>
	      when %% Line 789
		try
		    let <_cor10> =
			call 'erlang':'+'
			    (ASz, Min)
		    in  let <_cor11> =
			    call 'erlang':'>='
				(_cor10, 491520)
			in  let <_cor12> =
				call 'erlang':'>'
				    (ASz, 0)
			    in  call 'erlang':'and'
				    (_cor11, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <NCache> =
		  %% Line 790
		  apply 'fast_write_all_sizes'/3
		      (Cache, SizeT, WHead)
	      in  let <_cor14> =
		      %% Line 791
		      apply 'compact_input'/5
			  (Head, WHead, SizeT, NCache, L)
		  in  %% Line 791
		      {SegBs,_cor14}
	  %% Line 792
	  <Head,WHead,SizeT,Cache,[[From|To]|L],Min,SegBs,ASz> when 'true' ->
	      let <Max> =
		  %% Line 793
		  call 'erlang':'max'
		      (24576, Min)
	      in  %% Line 794
		  case apply 'check_pread_arg'/2
			   (Max, Head) of
		    %% Line 795
		    <'true'> when 'true' ->
			%% Line 796
			( case Head of
			    ( <( {'head',_cor33,_cor34,_cor35,_rec25,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}
				 -| ['compiler_generated'] )> when 'true' ->
				  case call 'dets_utils':'pread_n'
					   (_rec25, From, Max) of
				    %% Line 797
				    <'eof'> when 'true' ->
					%% Line 800
					'not_ok'
				    %% Line 801
				    <Bin1>
					when try
					      let <_cor19> =
						  call 'erlang':'byte_size'
						      (Bin1)
					      in  call 'erlang':'<'
						      (_cor19, Min)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_cor20> =
					    %% Line 803
					    call 'erlang':'byte_size'
						(Bin1)
					in  let <Pad> =
						%% Line 803
						call 'erlang':'-'
						    (Min, _cor20)
					    in  let <NewBin> =
						    %% Line 804
						    #{#<Bin1>('all',8,'binary',['unsigned'|['big']]),
						      #<0>(Pad,8,'integer',['unsigned'|['big']])}#
						in  %% Line 805
						    apply 'compact_objs'/10
							(Head, WHead, SizeT, NewBin, L, %% Line 806
											From, %% Line 806
											      To, %% Line 806
												  SegBs, %% Line 806
													 Cache, %% Line 806
														ASz)
				    %% Line 807
				    <NewBin> when 'true' ->
					%% Line 808
					apply 'compact_objs'/10
					    (Head, WHead, SizeT, NewBin, L, %% Line 809
									    From, %% Line 809
										  To, %% Line 809
										      SegBs, %% Line 809
											     Cache, %% Line 809
												    ASz)
				  end
			      -| ['compiler_generated'] )
			    ( <_cor63> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','head'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 811
		    <'false'> when 'true' ->
			%% Line 812
			'not_ok'
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor24})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor32,_cor31,_cor30,_cor29,_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29,_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'compact_read',8}}] )
	    -| ['compiler_generated'] )
	end
'compact_objs'/10 =
    %% Line 815
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Head,WHead,SizeT,Bin,L,From,To,SegBs,Cache,ASz>
	      when %% Line 816
		call 'erlang':'=:='
		    (From,
		     To) ->
	      %% Line 817
	      case L of
		%% Line 818
		<[]> when 'true' ->
		    let <_cor10> =
			%% Line 819
			apply 'compact_input'/5
			    (Head, WHead, SizeT, Cache, L)
		    in  %% Line 819
			{SegBs,_cor10}
		%% Line 820
		<[[From1|To1]|L1]> when 'true' ->
		    let <Skip1> =
			%% Line 821
			call 'erlang':'-'
			    (From1, From)
		    in  %% Line 822
			case Bin of
			  %% Line 823
			  <#{#<_cor58>(Skip1,8,'binary',['unsigned'|['big']]),
			     #<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      %% Line 824
			      apply 'compact_objs'/10
				  (Head, WHead, SizeT, NewBin, L1, From1, To1, %% Line 825
									       SegBs, %% Line 825
										      Cache, %% Line 825
											     ASz)
			  %% Line 826
			  <_cor59>
			      when try
				    let <_cor12> =
					call 'erlang':'byte_size'
					    (Bin)
				    in  call 'erlang':'<'
					    (_cor12, Skip1)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 827
			      apply 'compact_read'/8
				  (Head, WHead, SizeT, Cache, L, 0, SegBs, ASz)
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor13})
			    -| ['compiler_generated'] )
			end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 830
	  <Head,WHead,SizeT,Bin = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
				    #<St>(32,1,'integer',['unsigned'|['big']]),
				    #<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
				    #<KO>('all',8,'binary',['unsigned'|['big']])}#,%% Line 831
										   L,%% Line 831
										     From,%% Line 831
											  To,%% Line 831
											     SegBs,%% Line 831
												   Cache,%% Line 831
													 ASz>
	      when %% Line 831
		call 'erlang':'=:='
		    (St,
		     305419896) ->
	      ( let <_fol779> =
		    %% Line 2500
		    ( call ( 'dets_utils'
			     -| ['compiler_generated'] ):( 'log2'
							   -| ['compiler_generated'] )
			  (Size)
		      -| ['compiler_generated'] )
		in  let <LSize> =
			%% Line 2500
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '+'
							       -| ['compiler_generated'] )
			      (( 1
				 -| ['compiler_generated'] ), _fol779)
			  -| ['compiler_generated'] )
		    in  let <_cor16> =
			    %% Line 833
			    call 'erlang':'-'
				(LSize, 1)
			in  let <Size2> =
				%% Line 833
				call 'erlang':'bsl'
				    (1, _cor16)
			    in  %% Line 834
				case <> of
				  %% Line 835
				  <>
				      when try
					    let <_cor18> =
						call 'erlang':'byte_size'
						    (Bin)
					    in  call 'erlang':'>='
						    (_cor18, Size2)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <NASz> =
					  %% Line 836
					  call 'erlang':'+'
					      (ASz, Size2)
				      in  %% Line 837
					  case ( Bin
						 -| ['reuse_for_context'] ) of
					    <#{#<SlotObjs>(Size2,8,'binary',['unsigned'|['big']]),
					       #<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
						let <_cor28> =
						    %% Line 838
						    case <> of
						      %% Line 839
						      <>
							  when ( try
								  ( case <> of
								      ( <>
									    when ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'is_record'
														     -| ['compiler_generated'] )
										    (Head,
										     ( 'head'
										       -| ['compiler_generated'] ),
										     ( 32
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] ) ->
									    let <_cor25> =
										( call 'erlang':'element'
										      (10, Head)
										  -| ['compiler_generated'] )
									    in  ( call 'erlang':'=:='
										      (_cor25, 'set')
										  -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								      ( <> when 'true' ->
									    'false'
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false'
							      -| ['compiler_generated'] ) ->
							  %% Line 840
							  call 'erlang':'binary_to_term'
							      (KO)
						      %% Line 841
						      <> when 'true' ->
							  %% Line 842
							  case ( KO
								 -| ['reuse_for_context'] ) of
							    <#{#<_X_KSz>(32,1,'integer',['unsigned'|['big']]),
							       #<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
								%% Line 843
								call 'erlang':'binary_to_term'
								    (B2)
							    ( <_cor27> when 'true' ->
								  do  primop 'bs_context_to_binary'
									  (_cor27)
								      primop 'match_fail'
									  ({'badmatch',_cor27})
							      -| ['compiler_generated'] )
							  end
						    end
						in  %% Line 845
						    ( case Head of
							( <( {'head',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_rec26,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <Key> =
								  call 'erlang':'element'
								      (_rec26, _cor28)
							      in  let <Slot> =
								      %% Line 846
								      apply 'db_hash'/2
									  (Key, Head)
								  in  let <From1> =
									  %% Line 847
									  call 'erlang':'+'
									      (From, Size2)
								      in  %% Line 848
									  case call 'erlang':'element'
										   (LSize, Cache) of
									    <[Addr|AL]> when 'true' ->
										let <_cor36> =
										    %% Line 849
										    call 'erlang':'+'
											(Addr, Size2)
										in  let <NCache> =
											%% Line 849
											call 'erlang':'setelement'
											    (LSize, Cache, [_cor36|[SlotObjs|AL]])
										    in  let <_cor38> =
											    %% Line 850
											    #{#<Slot>(32,1,'integer',['unsigned'|['big']]),
											      #<Size>(32,1,'integer',['unsigned'|['big']]),
											      #<Addr>(32,1,'integer',['unsigned'|['big']]),
											      #<LSize>(8,1,'integer',['unsigned'|['big']])}#
											in  let <NSegBs> =
												%% Line 850
												[_cor38|SegBs]
											    in  %% Line 851
												apply 'compact_objs'/10
												    (Head, WHead, SizeT, NewBin, L, From1, %% Line 852
																	   To, %% Line 852
																	       NSegBs, %% Line 852
																		       NCache, %% Line 852
																			       NASz)
									    ( <_cor35> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor35})
									      -| ['compiler_generated'] )
									  end
							  -| ['compiler_generated'] )
							( <_cor90> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','head'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					    ( <_cor20> when 'true' ->
						  do  primop 'bs_context_to_binary'
							  (_cor20)
						      primop 'match_fail'
							  ({'badmatch',_cor20})
					      -| ['compiler_generated'] )
					  end
				  %% Line 853
				  <> when 'true' ->
				      %% Line 854
				      apply 'compact_read'/8
					  (Head, WHead, SizeT, Cache, [[From|To]|L], %% Line 855
										     Size2, %% Line 855
											    SegBs, %% Line 855
												   ASz)
				end
		-| ['compiler_generated'] )
	  %% Line 857
	  <Head,WHead,SizeT,Bin = #{#<_cor91>(32,1,'integer',['unsigned'|['big']]),
				    #<_X_St>(32,1,'integer',['unsigned'|['big']]),
				    #<_cor92>(32,1,'integer',['unsigned'|['big']]),
				    #<_cor93>('all',8,'binary',['unsigned'|['big']])}#,%% Line 858
										       L,%% Line 858
											 From,%% Line 858
											      To,%% Line 858
												 SegBs,%% Line 858
												       Cache,%% Line 858
													     ASz>
	      when %% Line 859
		try
		    let <_cor41> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'>='
			    (_cor41, 2048)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 860
	      case ( Bin
		     -| ['reuse_for_context'] ) of
		<#{#<_cor94>(2048,8,'binary',['unsigned'|['big']]),
		   #<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor44> =
			%% Line 861
			call 'erlang':'+'
			    (From, 2048)
		    in  %% Line 861
			apply 'compact_objs'/10
			    (Head, WHead, SizeT, NewBin, L, _cor44, %% Line 862
								    To, %% Line 862
									SegBs, %% Line 862
									       Cache, %% Line 862
										      ASz)
		( <_cor42> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor42)
			  primop 'match_fail'
			      ({'badmatch',_cor42})
		  -| ['compiler_generated'] )
	      end
	  %% Line 863
	  <Head,WHead,SizeT,Bin = #{#<_cor95>(32,1,'integer',['unsigned'|['big']]),
				    #<_X_St>(32,1,'integer',['unsigned'|['big']]),
				    #<_cor96>(32,1,'integer',['unsigned'|['big']]),
				    #<_cor97>('all',8,'binary',['unsigned'|['big']])}#,%% Line 864
										       L,%% Line 864
											 From,%% Line 864
											      To,%% Line 864
												 SegBs,%% Line 864
												       Cache,%% Line 864
													     ASz>
	      when %% Line 865
		try
		    let <_cor46> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'<'
			    (_cor46, 2048)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 866
	      apply 'compact_read'/8
		  (Head, WHead, SizeT, Cache, [[From|To]|L], 2048, %% Line 867
								   SegBs, %% Line 867
									  ASz)
	  %% Line 868
	  <Head,WHead,SizeT,_X_Bin,L,From,To,SegBs,Cache,ASz> when 'true' ->
	      %% Line 869
	      apply 'compact_read'/8
		  (Head, WHead, SizeT, Cache, [[From|To]|L], 0, SegBs, ASz)
	end
'read_bchunks'/2 =
    %% Line 875
    fun (_cor1,_cor0) ->
	%% Line 876
	apply 'read_bchunks'/5
	    (_cor1, _cor0, 0, [], 0)
'read_bchunks'/5 =
    %% Line 878
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Head,L,Min,Bs,ASz>
	      when try
		    let <_cor6> =
			call 'erlang':'+'
			    (ASz, Min)
		    in  let <_cor7> =
			    call 'erlang':'>='
				(_cor6, 32768)
			in  let <_cor8> =
				%% Line 879
				call 'erlang':'=/='
				    (Bs, [])
			    in  call 'erlang':'and'
				    (_cor7, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 880
		  call 'lists':'reverse'
		      (Bs)
	      in  %% Line 880
		  {_cor9,L}
	  %% Line 881
	  <Head,{From,To,L},Min,Bs,ASz> when 'true' ->
	      let <Max> =
		  %% Line 882
		  call 'erlang':'max'
		      (16384, Min)
	      in  %% Line 883
		  case apply 'check_pread_arg'/2
			   (Max, Head) of
		    %% Line 884
		    <'true'> when 'true' ->
			%% Line 885
			( case Head of
			    ( <( {'head',_cor29,_cor30,_cor31,_rec27,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}
				 -| ['compiler_generated'] )> when 'true' ->
				  case call 'dets_utils':'pread_n'
					   (_rec27, From, Max) of
				    %% Line 886
				    <'eof'> when 'true' ->
					%% Line 888
					{'error','premature_eof'}
				    %% Line 889
				    <NewBin>
					when try
					      let <_cor14> =
						  call 'erlang':'byte_size'
						      (NewBin)
					      in  call 'erlang':'>='
						      (_cor14, Min)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					%% Line 890
					apply 'bchunks'/7
					    (Head, L, NewBin, Bs, ASz, From, To)
				    %% Line 891
				    <Bin1>
					when try
					      let <_cor15> =
						  call 'erlang':'-'
						      (To, From)
					      in  let <_cor16> =
						      call 'erlang':'=:='
							  (_cor15, Min)
						  in  let <_cor17> =
							  call 'erlang':'=:='
							      (L, #{}#)
						      in  call 'erlang':'and'
							      (_cor16, _cor17)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_cor18> =
					    %% Line 894
					    call 'erlang':'byte_size'
						(Bin1)
					in  let <Pad> =
						%% Line 894
						call 'erlang':'-'
						    (Min, _cor18)
					    in  let <NewBin> =
						    %% Line 895
						    #{#<Bin1>('all',8,'binary',['unsigned'|['big']]),
						      #<0>(Pad,8,'integer',['unsigned'|['big']])}#
						in  %% Line 896
						    apply 'bchunks'/7
							(Head, L, NewBin, Bs, ASz, From, To)
				    %% Line 897
				    <_cor60> when 'true' ->
					%% Line 898
					{'error','premature_eof'}
				  end
			      -| ['compiler_generated'] )
			    ( <_cor59> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','head'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 900
		    <'false'> when 'true' ->
			let <_cor22> =
			    %% Line 901
			    call 'dets_utils':'bad_object'
				('bad_object', {'read_bchunks',Max})
			in  %% Line 901
			    {'error',_cor22}
		    ( <_cor23> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor23})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'read_bchunks',5}}] )
	    -| ['compiler_generated'] )
	end
'bchunks'/7 =
    %% Line 904
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Head,L,Bin,Bs,ASz,From,To>
	      when call 'erlang':'=:='
		    (From,
		     To) ->
	      %% Line 905
	      case <> of
		%% Line 906
		<>
		    when call 'erlang':'=:='
			  (L,
			   #{}#) ->
		    let <_cor7> =
			%% Line 907
			call 'lists':'reverse'
			    (Bs)
		    in  %% Line 907
			{'finished',_cor7}
		%% Line 908
		<> when 'true' ->
		    %% Line 909
		    case ( L
			   -| ['reuse_for_context'] ) of
		      <#{#<From1>(32,1,'integer',['unsigned'|['big']]),
			 #<To1>(32,1,'integer',['unsigned'|['big']]),
			 #<L1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <Skip1> =
			      %% Line 910
			      call 'erlang':'-'
				  (From1, From)
			  in  %% Line 911
			      case Bin of
				%% Line 912
				<#{#<_cor50>(Skip1,8,'binary',['unsigned'|['big']]),
				   #<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				    %% Line 913
				    apply 'bchunks'/7
					(Head, L1, NewBin, Bs, ASz, From1, To1)
				%% Line 914
				<_cor51>
				    when try
					  let <_cor10> =
					      call 'erlang':'byte_size'
						  (Bin)
					  in  call 'erlang':'<'
						  (_cor10, Skip1)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    %% Line 915
				    apply 'read_bchunks'/5
					(Head, {From1,To1,L1}, 0, Bs, ASz)
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor11})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor8> when 'true' ->
			    do  primop 'bs_context_to_binary'
				    (_cor8)
				primop 'match_fail'
				    ({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 918
	  <Head,L,Bin = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
			  #<St>(32,1,'integer',['unsigned'|['big']]),
			  #<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
			  #<KO>('all',8,'binary',['unsigned'|['big']])}#,Bs,ASz,%% Line 919
										From,%% Line 919
										     To>
	      when let <_cor12> =
		    %% Line 919
		    call 'erlang':'=:='
			(St, 305419896)
		in  let <_cor13> =
			%% Line 919
			call 'erlang':'=:='
			    (St, 61591023)
		    in  %% Line 919
			call 'erlang':'or'
			    (_cor12, _cor13) ->
	      ( let <_fol784> =
		    %% Line 2500
		    ( call ( 'dets_utils'
			     -| ['compiler_generated'] ):( 'log2'
							   -| ['compiler_generated'] )
			  (Size)
		      -| ['compiler_generated'] )
		in  let <LSize> =
			%% Line 2500
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( '+'
							       -| ['compiler_generated'] )
			      (( 1
				 -| ['compiler_generated'] ), _fol784)
			  -| ['compiler_generated'] )
		    in  let <_cor15> =
			    %% Line 921
			    call 'erlang':'-'
				(LSize, 1)
			in  let <Size2> =
				%% Line 921
				call 'erlang':'bsl'
				    (1, _cor15)
			    in  %% Line 922
				case <> of
				  %% Line 923
				  <>
				      when try
					    let <_cor17> =
						call 'erlang':'byte_size'
						    (Bin)
					    in  call 'erlang':'>='
						    (_cor17, Size2)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 924
				      case ( Bin
					     -| ['reuse_for_context'] ) of
					<#{#<B0>(Size2,8,'binary',['unsigned'|['big']]),
					   #<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					    let <_cor26> =
						%% Line 928
						case <> of
						  %% Line 929
						  <>
						      when ( try
							      ( case <> of
								  ( <>
									when ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'is_record'
														 -| ['compiler_generated'] )
										(Head,
										 ( 'head'
										   -| ['compiler_generated'] ),
										 ( 32
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] ) ->
									let <_cor23> =
									    ( call 'erlang':'element'
										  (10, Head)
									      -| ['compiler_generated'] )
									in  ( call 'erlang':'=:='
										  (_cor23, 'set')
									      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <> when 'true' ->
									'false'
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false'
							  -| ['compiler_generated'] ) ->
						      %% Line 930
						      call 'erlang':'binary_to_term'
							  (KO)
						  %% Line 931
						  <> when 'true' ->
						      %% Line 932
						      case ( KO
							     -| ['reuse_for_context'] ) of
							<#{#<_X_KSz>(32,1,'integer',['unsigned'|['big']]),
							   #<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
							    %% Line 933
							    call 'erlang':'binary_to_term'
								(B2)
							( <_cor25> when 'true' ->
							      do  primop 'bs_context_to_binary'
								      (_cor25)
								  primop 'match_fail'
								      ({'badmatch',_cor25})
							  -| ['compiler_generated'] )
						      end
						end
					    in  %% Line 935
						( case Head of
						    ( <( {'head',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_rec28,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <Key> =
							      call 'erlang':'element'
								  (_rec28, _cor26)
							  in  let <Slot> =
								  %% Line 936
								  apply 'db_hash'/2
								      (Key, Head)
							      in  let <B> = {%% Line 937
								       LSize,%% Line 937
									     Slot,%% Line 937
										  B0}
								  in  let <_cor34> =
									  %% Line 938
									  call 'erlang':'+'
									      (ASz, Size2)
								      in  let <_cor33> =
									      %% Line 938
									      call 'erlang':'+'
										  (From, Size2)
									  in  %% Line 938
									      apply 'bchunks'/7
										  (Head, L, NewBin, [B|Bs], _cor34, _cor33, To)
						      -| ['compiler_generated'] )
						    ( <_cor82> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','head'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					( <_cor18> when 'true' ->
					      do  primop 'bs_context_to_binary'
						      (_cor18)
						  primop 'match_fail'
						      ({'badmatch',_cor18})
					  -| ['compiler_generated'] )
				      end
				  %% Line 939
				  <> when 'true' ->
				      %% Line 940
				      apply 'read_bchunks'/5
					  (Head, {From,To,L}, Size2, Bs, ASz)
				end
		-| ['compiler_generated'] )
	  %% Line 942
	  <Head,L,Bin = #{#<_cor83>(32,1,'integer',['unsigned'|['big']]),
			  #<_X_St>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor84>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor85>('all',8,'binary',['unsigned'|['big']])}#,Bs,ASz,From,To>
	      when %% Line 943
		try
		    let <_cor36> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'>='
			    (_cor36, 2048)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 944
	      case ( Bin
		     -| ['reuse_for_context'] ) of
		<#{#<_cor86>(2048,8,'binary',['unsigned'|['big']]),
		   #<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor39> =
			%% Line 945
			call 'erlang':'+'
			    (From, 2048)
		    in  %% Line 945
			apply 'bchunks'/7
			    (Head, L, NewBin, Bs, ASz, _cor39, To)
		( <_cor37> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor37)
			  primop 'match_fail'
			      ({'badmatch',_cor37})
		  -| ['compiler_generated'] )
	      end
	  %% Line 946
	  <Head,L,Bin = #{#<_cor87>(32,1,'integer',['unsigned'|['big']]),
			  #<_X_St>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor88>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor89>('all',8,'binary',['unsigned'|['big']])}#,Bs,ASz,From,To>
	      when %% Line 947
		try
		    let <_cor41> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'<'
			    (_cor41, 2048)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 948
	      apply 'read_bchunks'/5
		  (Head, {From,To,L}, 2048, Bs, ASz)
	  %% Line 949
	  <Head,L,_X_Bin,Bs,ASz,From,To> when 'true' ->
	      %% Line 950
	      apply 'read_bchunks'/5
		  (Head, {From,To,L}, 0, Bs, ASz)
	end
'bchunk_init'/2 =
    %% Line 955
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 956
	    call 'erlang':'make_ref'
		()
	in  let <_cor4> =
		catch
		    let <_cor3> =
			%% Line 958
			apply _cor0
			    ('read')
		    in  %% Line 958
			{Ref,_cor3}
	    in  %% Line 958
		case _cor4 of
		  %% Line 959
		  <{_cor35,'end_of_input'}>
		      when call 'erlang':'=:='
			    (_cor35,
			     Ref) ->
		      %% Line 960
		      {'error',{'init_fun','end_of_input'}}
		  %% Line 961
		  <{_cor36,{[],NInitFun}}>
		      when let <_cor37> =
			    call 'erlang':'=:='
				(_cor36, Ref)
			in  let <_cor38> =
				call 'erlang':'is_function'
				    (NInitFun)
			    in  call 'erlang':'and'
				    (_cor37, _cor38) ->
		      %% Line 962
		      apply 'bchunk_init'/2
			  (_cor1, NInitFun)
		  %% Line 963
		  <{_cor39,{[ParmsBin|L],NInitFun}}>
		      when let <_cor40> =
			    call 'erlang':'=:='
				(_cor39, Ref)
			in  let <_cor41> =
				%% Line 964
				try
				    let <_cor5> =
					call 'erlang':'is_list'
					    (L)
				    in  let <_cor6> =
					    call 'erlang':'is_function'
						(NInitFun)
					in  call 'erlang':'and'
						(_cor5, _cor6)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
			    in  call 'erlang':'and'
				    (_cor40, _cor41) ->
		      %% Line 968
		      case _cor1 of
			<{'head',_cor42,_cor43,_cor44,Fd,_cor45,_cor46,_cor47,_cor48,Type,Kp,_cor49,_cor50,_cor51,Auto,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,Cache,Fname,_cor58,Ram,Tab,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}> when 'true' ->
			    %% Line 969
			    case apply 'try_bchunk_header'/2
				     (ParmsBin, _cor1) of
			      %% Line 970
			      <{'ok',Parms}> when 'true' ->
				  %% Line 973
				  case Parms of
				    <{'$hash2',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,NoObjects,NoKeys,NoObjsPerSize}> when 'true' ->
					let <CacheSz> =
					    %% Line 974
					    call 'dets_utils':'cache_size'
						(Cache)
					in  %% Line 975
					    case %% Line 976
						 apply 'prep_table_copy'/9
						     (Fd, Tab, Fname, Type, %% Line 977
									    Kp, %% Line 977
										Ram, %% Line 977
										     CacheSz, %% Line 978
											      Auto, %% Line 978
												    Parms) of
					      <{'ok',Head1}> when 'true' ->
						  let <SizeT> =
						      %% Line 979
						      call 'ets':'new'
							  ('dets_init', [])
						  in  %% Line 980
						      case %% Line 981
							   apply 'prepare_file_init'/5
							       (NoObjects, NoKeys, %% Line 982
										   NoObjsPerSize, %% Line 982
												  SizeT, %% Line 982
													 Head1) of
							<{NewHead,Bases,SegAddr,SegEnd}> when 'true' ->
							    let <_cor14> =
								%% Line 983
								call 'erlang':'tuple_size'
								    (Bases)
							    in  let <_cor15> =
								    %% Line 983
								    call 'erlang':'-'
									(_cor14, 0)
								in  let <_cor16> =
									%% Line 983
									call 'lists':'duplicate'
									    (_cor15, [0])
								    in  let <ECache> =
									    %% Line 983
									    call 'erlang':'list_to_tuple'
										(_cor16)
									in  let <Input> =
										%% Line 985
										( fun (_cor22) ->
										      case _cor22 of
											<'close'> when 'true' ->
											    catch
												%% Line 986
												apply NInitFun
												    ('close')
											%% Line 987
											<'read'> when 'true' ->
											    %% Line 988
											    apply 'do_make_slots'/7
												(L, ECache, SizeT, NewHead, Ref, %% Line 989
																 0, %% Line 989
																    NInitFun)
											( <_cor23> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor23})
												-| [{'function_name',{'-bchunk_init/2-fun-0-',1}}] )
											  -| ['compiler_generated'] )
										      end
										  -| [{'id',{0,0,'-bchunk_init/2-fun-0-'}}] )
									    in  let <Output> =
										    %% Line 991
										    apply 'fast_output'/5
											(NewHead, SizeT, Bases, SegAddr, SegEnd)
										in  let <TmpDir> =
											%% Line 992
											call 'filename':'dirname'
											    (Fname)
										    in  let <_cor29> =
											    catch
												%% Line 993
												call 'file_sorter':'sort'
												    (Input, Output, %% Line 994
														    [{'format','binary'}|%% Line 995
																	 [{'tmpdir',TmpDir}|%% Line 996
																			    [{'header',1}]]])
											in  do  %% Line 997
												call 'ets':'delete'
												    (SizeT)
												_cor29
							( <_cor12> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor12})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor10})
						-| ['compiler_generated'] )
					    end
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 999
			      <'not_ok'> when 'true' ->
				  %% Line 1000
				  {'error',{'init_fun',ParmsBin}}
			      ( <_cor31> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor31})
				-| ['compiler_generated'] )
			    end
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
		  %% Line 1002
		  <{_cor107,Value}>
		      when call 'erlang':'=:='
			    (_cor107,
			     Ref) ->
		      %% Line 1003
		      {'error',{'init_fun',Value}}
		  %% Line 1004
		  <Error> when 'true' ->
		      %% Line 1005
		      {'thrown',Error}
		end
'try_bchunk_header'/2 =
    %% Line 1008
    fun (_cor1,_cor0) ->
	%% Line 1009
	case _cor0 of
	  <{'head',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,Type,Kp,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,HashBif,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
	      let <HashMethod> =
		  %% Line 1010
		  apply 'hash_method_to_code'/1
		      (HashBif)
	      in  let <_cor4> =
		      catch
			  %% Line 1011
			  call 'erlang':'binary_to_term'
			      (_cor1)
		  in  %% Line 1011
		      case _cor4 of
			%% Line 1012
			<Parms = {'$hash2',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}>
			    when ( try
				    let <_cor10> =
					%% Line 1013
					call 'erlang':'=:='
					    (_cor55, Type)
				    in  let <_cor13> =
					    %% Line 1014
					    call 'erlang':'=:='
						(_cor56, Kp)
					in  let <_cor15> =
						%% Line 1015
						call 'erlang':'=:='
						    (_cor57, HashMethod)
					    in  let <_cor17> =
						    %% Line 1016
						    call 'erlang':'=:='
							(_cor53, %% Line 1017
								 1)
						in  let <_cor18> =
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'and'
											       -| ['compiler_generated'] )
							      (_cor15, _cor17)
							  -| ['compiler_generated'] )
						    in  let <_cor19> =
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_cor13, _cor18)
							      -| ['compiler_generated'] )
							in  ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'and'
												   -| ['compiler_generated'] )
								  (_cor10, _cor19)
							      -| ['compiler_generated'] )
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false'
				-| ['compiler_generated'] ) ->
			    %% Line 1018
			    {'ok',Parms}
			%% Line 1019
			<_cor66> when 'true' ->
			    %% Line 1020
			    'not_ok'
		      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'bchunk_input'/6 =
    %% Line 1023
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1024
	( fun (_cor14) ->
	      case _cor14 of
		<'close'> when 'true' ->
		    catch
			%% Line 1025
			apply _cor5
			    ('close')
		%% Line 1026
		<'read'> when 'true' ->
		    let <_cor9> =
			catch
			    let <_cor8> =
				%% Line 1027
				apply _cor5
				    ('read')
			    in  %% Line 1027
				{_cor2,_cor8}
		    in  %% Line 1027
			case _cor9 of
			  %% Line 1028
			  <{_cor22,'end_of_input'}>
			      when call 'erlang':'=:='
				    (_cor22,
				     _cor2) ->
			      do  %% Line 1029
				  apply 'fast_write_all_sizes'/3
				      (_cor1, _cor4, _cor3)
				  %% Line 1030
				  'end_of_input'
			  %% Line 1031
			  <{_cor23,{L,NInitFun}}>
			      when let <_cor24> =
				    call 'erlang':'=:='
					(_cor23, _cor2)
				in  let <_cor25> =
					try
					    let <_cor11> =
						call 'erlang':'is_list'
						    (L)
					    in  let <_cor12> =
						    call 'erlang':'is_function'
							(NInitFun)
						in  call 'erlang':'and'
							(_cor11, _cor12)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false'
				    in  call 'erlang':'and'
					    (_cor24, _cor25) ->
			      %% Line 1032
			      apply 'do_make_slots'/7
				  (L, _cor1, _cor4, _cor3, _cor2, _cor0, %% Line 1033
									 NInitFun)
			  %% Line 1034
			  <{_cor26,Value}>
			      when call 'erlang':'=:='
				    (_cor26,
				     _cor2) ->
			      %% Line 1035
			      {'error',{'init_fun',Value}}
			  %% Line 1036
			  <Error> when 'true' ->
			      %% Line 1037
			      call 'erlang':'throw'
				  ({'thrown',Error})
			end
		( <_cor15> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor15})
			-| [{'function_name',{'-bchunk_input/6-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-bchunk_input/6-fun-0-'}}] )
'do_make_slots'/7 =
    %% Line 1041
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    catch
		%% Line 1042
		apply 'make_slots'/4
		    (_cor6, _cor5, [], _cor1)
	in  %% Line 1042
	    case _cor7 of
	      %% Line 1043
	      <{'EXIT',_cor22}> when 'true' ->
		  do  catch
			  %% Line 1044
			  apply _cor0
			      ('close')
		      %% Line 1045
		      {'error','invalid_objects_list'}
	      %% Line 1046
	      <{Cache1,SegBs,NASz}>
		  when call 'erlang':'>'
			(NASz,
			 491520) ->
		  let <NCache> =
		      %% Line 1047
		      apply 'fast_write_all_sizes'/3
			  (Cache1, _cor4, _cor3)
		  in  let <F> =
			  %% Line 1048
			  apply 'bchunk_input'/6
			      (_cor0, _cor4, _cor3, _cor2, NCache, 0)
		      in  %% Line 1049
			  {SegBs,F}
	      %% Line 1050
	      <{NCache,SegBs,NASz}> when 'true' ->
		  let <F> =
		      %% Line 1051
		      apply 'bchunk_input'/6
			  (_cor0, _cor4, _cor3, _cor2, NCache, NASz)
		  in  %% Line 1052
		      {SegBs,F}
	      ( <_cor14> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor14})
		-| ['compiler_generated'] )
	    end
'make_slots'/4 =
    %% Line 1055
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{LSize,Slot,Bin0 = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
				 #<St>(32,1,'integer',['unsigned'|['big']]),
				 #<Sz>(32,1,'integer',['unsigned'|['big']]),
				 #<KO>('all',8,'binary',['unsigned'|['big']])}#}|Bins],%% Line 1056
										       Cache,%% Line 1056
											     SegBs,%% Line 1056
												   ASz> when 'true' ->
	      let <_cor4> =
		  %% Line 1057
		  case <> of
		    %% Line 1058
		    <>
			when call 'erlang':'=:='
			      (St,
			       305419896) ->
			%% Line 1059
			Bin0
		    %% Line 1060
		    <>
			when call 'erlang':'=:='
			      (St,
			       61591023) ->
			%% Line 1061
			#{#<Size>(32,1,'integer',['unsigned'|['big']]),
			  #<305419896>(32,1,'integer',['unsigned'|['big']]),
			  #<Sz>(32,1,'integer',['unsigned'|['big']]),
			  #<KO>('all',8,'binary',['unsigned'|['big']])}#
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  let <BSz> =
		      %% Line 1063
		      call 'erlang':'byte_size'
			  (Bin0)
		  in  let <_cor7> =
			  %% Line 1064
			  call 'erlang':'-'
			      (LSize, 1)
		      in  let <_cor8> =
			      %% Line 1064
			      call 'erlang':'bsl'
				  (1, _cor7)
			  in  %% Line 1064
			      case call 'erlang':'=:='
				       (BSz, _cor8) of
				<'true'> when 'true' ->
				    let <NASz> =
					%% Line 1065
					call 'erlang':'+'
					    (ASz, BSz)
				    in  %% Line 1066
					case call 'erlang':'element'
						 (LSize, Cache) of
					  <[Addr|L]> when 'true' ->
					      let <_cor12> =
						  %% Line 1067
						  #{#<Slot>(32,1,'integer',['unsigned'|['big']]),
						    #<Size>(32,1,'integer',['unsigned'|['big']]),
						    #<Addr>(32,1,'integer',['unsigned'|['big']]),
						    #<LSize>(8,1,'integer',['unsigned'|['big']])}#
					      in  let <NSegBs> =
						      %% Line 1067
						      [_cor12|SegBs]
						  in  let <_cor14> =
							  %% Line 1068
							  call 'erlang':'+'
							      (Addr, BSz)
						      in  let <NCache> =
							      %% Line 1068
							      call 'erlang':'setelement'
								  (LSize, Cache, [_cor14|[_cor4|L]])
							  in  %% Line 1069
							      apply 'make_slots'/4
								  (Bins, NCache, NSegBs, NASz)
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor11})
					    -| ['compiler_generated'] )
					end
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor9})
				  -| ['compiler_generated'] )
			      end
	  %% Line 1070
	  <[],Cache,SegBs,ASz> when 'true' ->
	      %% Line 1071
	      {Cache,SegBs,ASz}
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'make_slots',4}}] )
	    -| ['compiler_generated'] )
	end
'fast_output'/5 =
    %% Line 1073
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1074
	( fun (_cor11) ->
	      case _cor11 of
		<'close'> when 'true' ->
		    %% Line 1075
		    apply 'fast_output_end'/2
			(_cor4, _cor3)
		%% Line 1076
		<L> when 'true' ->
		    %% Line 1077
		    ( case _cor4 of
			( <( {'head',_cor18,_cor19,_cor20,_rec30,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}
			     -| ['compiler_generated'] )> when 'true' ->
			      case call 'file':'position'
				       (_rec30, _cor1) of
				%% Line 1078
				<{'ok',_cor49}>
				    when call 'erlang':'=:='
					  (_cor49,
					   _cor1) ->
				    let <NewSegAddr> =
					%% Line 1106
					( case <L,_cor2,_cor18,_cor19,_cor20,_rec30,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor1,_cor1> of
					    ( <( [( #{#<( Slot
							  -| ['compiler_generated'] )>(( 32
											 -| ['compiler_generated'] ),( 1
														       -| ['compiler_generated'] ),( 'integer'
																		     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						   -| ['compiler_generated'] )),
						      #<( BSize
							  -| ['compiler_generated'] )>(( 32
											 -| ['compiler_generated'] ),( 1
														       -| ['compiler_generated'] ),( 'integer'
																		     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						   -| ['compiler_generated'] )),
						      #<( AddrToBe
							  -| ['compiler_generated'] )>(( 32
											 -| ['compiler_generated'] ),( 1
														       -| ['compiler_generated'] ),( 'integer'
																		     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						   -| ['compiler_generated'] )),
						      #<( LSize
							  -| ['compiler_generated'] )>(( 8
											 -| ['compiler_generated'] ),( 1
														       -| ['compiler_generated'] ),( 'integer'
																		     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						   -| ['compiler_generated'] ))}#
						    -| ['compiler_generated'] )|( Bins
										  -| ['compiler_generated'] )]
						 -| ['compiler_generated'] ),_fol871,_fol879,_fol880,_fol881,_fol882,_fol883,_fol884,_fol885,_fol886,_fol887,_fol888,_fol889,_fol890,_fol891,_fol892,_fol893,_fol894,_fol895,_fol896,_fol897,_fol898,_fol899,_fol900,_fol901,_fol902,_fol903,_fol904,_fol905,_fol906,_fol907,_fol908,_fol909,_fol873,%% Line 1107
																																										     ( SS
																																										       -| ['compiler_generated'] )> when ( 'true'
																																															   -| ['compiler_generated'] ) ->
						  ( let <_fol872> =
							( {'head',_fol879,_fol880,_fol881,_fol882,_fol883,_fol884,_fol885,_fol886,_fol887,_fol888,_fol889,_fol890,_fol891,_fol892,_fol893,_fol894,_fol895,_fol896,_fol897,_fol898,_fol899,_fol900,_fol901,_fol902,_fol903,_fol904,_fol905,_fol906,_fol907,_fol908,_fol909}
							  -| ['compiler_generated'] )
						    in  ( let <_cor7> =
							      %% Line 1111
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( '*'
												     -| ['compiler_generated'] )
								    (8, ( Slot
									  -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  in  ( let <Pos> =
								    %% Line 1111
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( '+'
													   -| ['compiler_generated'] )
									  (( SS
									     -| ['compiler_generated'] ), ( _cor7
													    -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								in  %% Line 1112
								    ( apply ( 'write_segment_file'/10
									      -| ['compiler_generated'] )
									  (( Bins
									     -| ['compiler_generated'] ), _fol871, _fol872, [], _fol873, ( SS
																	   -| ['compiler_generated'] ), ( Pos
																					  -| ['compiler_generated'] ), %% Line 1113
																								       ( BSize
																									 -| ['compiler_generated'] ), %% Line 1113
																												      ( AddrToBe
																													-| ['compiler_generated'] ), %% Line 1113
																																     ( LSize
																																       -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1114
					    ( <( []
						 -| ['compiler_generated'] ),( _X_Bases
									       -| ['compiler_generated'] ),_fol911,_fol912,_fol913,_fol914,_fol915,_fol916,_fol917,_fol918,_fol919,_fol920,_fol921,_fol922,_fol923,_fol924,_fol925,_fol926,_fol927,_fol928,_fol929,_fol930,_fol931,_fol932,_fol933,_fol934,_fol935,_fol936,_fol937,_fol938,_fol939,_fol940,_fol941,_fol876,( _X_SS
																																													     -| ['compiler_generated'] )> when ( 'true'
																																																		 -| ['compiler_generated'] ) ->
						  ( let <_fol875> =
							( {'head',_fol911,_fol912,_fol913,_fol914,_fol915,_fol916,_fol917,_fol918,_fol919,_fol920,_fol921,_fol922,_fol923,_fol924,_fol925,_fol926,_fol927,_fol928,_fol929,_fol930,_fol931,_fol932,_fol933,_fol934,_fol935,_fol936,_fol937,_fol938,_fol939,_fol940,_fol941}
							  -| ['compiler_generated'] )
						    in  ( do  %% Line 1115
							      ( call ( 'dets_utils'
								       -| ['compiler_generated'] ):( 'write'
												     -| ['compiler_generated'] )
								    (_fol875, [])
								-| ['compiler_generated'] )
							      _fol876
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _cor14
						 -| ['compiler_generated'] ),( _cor13
									       -| ['compiler_generated'] ),( _fol943
													     -| ['compiler_generated'] ),( _fol944
																	   -| ['compiler_generated'] ),( _fol945
																					 -| ['compiler_generated'] ),( _fol946
																								       -| ['compiler_generated'] ),( _fol947
																												     -| ['compiler_generated'] ),( _fol948
																																   -| ['compiler_generated'] ),( _fol949
																																				 -| ['compiler_generated'] ),( _fol950
																																							       -| ['compiler_generated'] ),( _fol951
																																											     -| ['compiler_generated'] ),( _fol952
																																															   -| ['compiler_generated'] ),( _fol953
																																																			 -| ['compiler_generated'] ),( _fol954
																																																						       -| ['compiler_generated'] ),( _fol955
																																																										     -| ['compiler_generated'] ),( _fol956
																																																														   -| ['compiler_generated'] ),( _fol957
																																																																		 -| ['compiler_generated'] ),( _fol958
																																																																					       -| ['compiler_generated'] ),( _fol959
																																																																									     -| ['compiler_generated'] ),( _fol960
																																																																													   -| ['compiler_generated'] ),( _fol961
																																																																																	 -| ['compiler_generated'] ),( _fol962
																																																																																				       -| ['compiler_generated'] ),( _fol963
																																																																																								     -| ['compiler_generated'] ),( _fol964
																																																																																												   -| ['compiler_generated'] ),( _fol965
																																																																																																 -| ['compiler_generated'] ),( _fol966
																																																																																																			       -| ['compiler_generated'] ),( _fol967
																																																																																																							     -| ['compiler_generated'] ),( _fol968
																																																																																																											   -| ['compiler_generated'] ),( _fol969
																																																																																																															 -| ['compiler_generated'] ),( _fol970
																																																																																																																		       -| ['compiler_generated'] ),( _fol971
																																																																																																																						     -| ['compiler_generated'] ),( _fol972
																																																																																																																										   -| ['compiler_generated'] ),( _fol973
																																																																																																																														 -| ['compiler_generated'] ),( _cor10
																																																																																																																																	       -| ['compiler_generated'] ),( _cor9
																																																																																																																																					     -| ['compiler_generated'] )> when ( 'true'
																																																																																																																																										 -| ['compiler_generated'] ) ->
						  ( let <_cor12> =
							( {'head',( _fol943
								    -| ['compiler_generated'] ),( _fol944
												  -| ['compiler_generated'] ),( _fol945
																-| ['compiler_generated'] ),( _fol946
																			      -| ['compiler_generated'] ),( _fol947
																							    -| ['compiler_generated'] ),( _fol948
																											  -| ['compiler_generated'] ),( _fol949
																															-| ['compiler_generated'] ),( _fol950
																																		      -| ['compiler_generated'] ),( _fol951
																																						    -| ['compiler_generated'] ),( _fol952
																																										  -| ['compiler_generated'] ),( _fol953
																																														-| ['compiler_generated'] ),( _fol954
																																																	      -| ['compiler_generated'] ),( _fol955
																																																					    -| ['compiler_generated'] ),( _fol956
																																																									  -| ['compiler_generated'] ),( _fol957
																																																													-| ['compiler_generated'] ),( _fol958
																																																																      -| ['compiler_generated'] ),( _fol959
																																																																				    -| ['compiler_generated'] ),( _fol960
																																																																								  -| ['compiler_generated'] ),( _fol961
																																																																												-| ['compiler_generated'] ),( _fol962
																																																																															      -| ['compiler_generated'] ),( _fol963
																																																																																			    -| ['compiler_generated'] ),( _fol964
																																																																																							  -| ['compiler_generated'] ),( _fol965
																																																																																											-| ['compiler_generated'] ),( _fol966
																																																																																														      -| ['compiler_generated'] ),( _fol967
																																																																																																		    -| ['compiler_generated'] ),( _fol968
																																																																																																						  -| ['compiler_generated'] ),( _fol969
																																																																																																										-| ['compiler_generated'] ),( _fol970
																																																																																																													      -| ['compiler_generated'] ),( _fol971
																																																																																																																	    -| ['compiler_generated'] ),( _fol972
																																																																																																																					  -| ['compiler_generated'] ),( _fol973
																																																																																																																									-| ['compiler_generated'] )}
							  -| ['compiler_generated','compiler_generated'] )
						    in  ( primop ( 'match_fail'
								   -| ['compiler_generated'] )
							      (( {( 'function_clause'
								    -| ['compiler_generated'] ),( _cor14
												  -| ['compiler_generated'] ),( _cor13
																-| ['compiler_generated'] ),( _cor12
																			      -| ['compiler_generated'] ),[],( _cor10
																							       -| ['compiler_generated'] ),( _cor9
																											     -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    in  %% Line 1081
					apply 'fast_output2'/6
					    (_cor4, _cor3, _cor2, NewSegAddr, _cor1, _cor0)
				%% Line 1083
				<Error> when 'true' ->
				    catch
					%% Line 1084
					call 'dets_utils':'file_error'
					    (Error, _cor38)
			      end
			  -| ['compiler_generated'] )
			( <_cor48> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','head'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-fast_output/5-fun-0-'}}] )
'fast_output2'/6 =
    %% Line 1088
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1089
	( fun (_cor9) ->
	      case _cor9 of
		<'close'> when 'true' ->
		    let <FinalZ> =
			%% Line 1090
			call 'erlang':'-'
			    (_cor0, _cor2)
		    in  let <_cor7> =
			    %% Line 1091
			    call 'dets_utils':'make_zeros'
				(FinalZ)
			in  do  %% Line 1091
				call 'dets_utils':'write'
				    (_cor5, _cor7)
				%% Line 1092
				apply 'fast_output_end'/2
				    (_cor5, _cor4)
		%% Line 1093
		<L> when 'true' ->
		    let <NewSegAddr> =
			%% Line 1106
			( case <L,_cor3,_cor5,_cor2,_cor1> of
			    ( <( [( #{#<( Slot
					  -| ['compiler_generated'] )>(( 32
									 -| ['compiler_generated'] ),( 1
												       -| ['compiler_generated'] ),( 'integer'
																     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				   -| ['compiler_generated'] )),
				      #<( BSize
					  -| ['compiler_generated'] )>(( 32
									 -| ['compiler_generated'] ),( 1
												       -| ['compiler_generated'] ),( 'integer'
																     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				   -| ['compiler_generated'] )),
				      #<( AddrToBe
					  -| ['compiler_generated'] )>(( 32
									 -| ['compiler_generated'] ),( 1
												       -| ['compiler_generated'] ),( 'integer'
																     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				   -| ['compiler_generated'] )),
				      #<( LSize
					  -| ['compiler_generated'] )>(( 8
									 -| ['compiler_generated'] ),( 1
												       -| ['compiler_generated'] ),( 'integer'
																     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				   -| ['compiler_generated'] ))}#
				    -| ['compiler_generated'] )|( Bins
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] ),_fol1048,_fol1049,_fol1050,_fol1051> when ( 'true'
													 -| ['compiler_generated'] ) ->
				  ( let <_cor7> =
					%% Line 1111
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '*'
									       -| ['compiler_generated'] )
					      (8, ( Slot
						    -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  ( let <Pos> =
					      %% Line 1111
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '+'
										     -| ['compiler_generated'] )
						    (_fol1051, ( _cor7
								 -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  %% Line 1112
					      ( apply ( 'write_segment_file'/10
							-| ['compiler_generated'] )
						    (( Bins
						       -| ['compiler_generated'] ), _fol1048, _fol1049, [], _fol1050, _fol1051, ( Pos
																  -| ['compiler_generated'] ), %% Line 1113
																			       ( BSize
																				 -| ['compiler_generated'] ), %% Line 1113
																							      ( AddrToBe
																								-| ['compiler_generated'] ), %% Line 1113
																											     ( LSize
																											       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 1114
			    ( <( []
				 -| ['compiler_generated'] ),( _X_Bases
							       -| ['compiler_generated'] ),_fol1052,_fol1053,( _X_SS
													       -| ['compiler_generated'] )> when ( 'true'
																		   -| ['compiler_generated'] ) ->
				  ( do  %% Line 1115
					( call ( 'dets_utils'
						 -| ['compiler_generated'] ):( 'write'
									       -| ['compiler_generated'] )
					      (_fol1052, [])
					  -| ['compiler_generated'] )
					_fol1053
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <( _cor14
				 -| ['compiler_generated'] ),( _cor13
							       -| ['compiler_generated'] ),( _cor12
											     -| ['compiler_generated'] ),( _cor10
															   -| ['compiler_generated'] ),_fol1054> when ( 'true'
																					-| ['compiler_generated'] ) ->
				  ( primop ( 'match_fail'
					     -| ['compiler_generated'] )
					(( {( 'function_clause'
					      -| ['compiler_generated'] ),( _cor14
									    -| ['compiler_generated'] ),( _cor13
													  -| ['compiler_generated'] ),( _cor12
																	-| ['compiler_generated'] ),[],( _cor10
																					 -| ['compiler_generated'] ),_fol1054}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 1095
			apply 'fast_output2'/6
			    (_cor5, _cor4, _cor3, NewSegAddr, _cor1, _cor0)
	      end
	  -| [{'id',{0,0,'-fast_output2/6-fun-0-'}}] )
'fast_output_end'/2 =
    %% Line 1098
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1099
	    ( fun (_cor4,_cor3) ->
		  case <_cor4,_cor3> of
		    <{_X_Sz,_X_Pos,Cnt,NoC},Acc> when 'true' ->
			let <_cor2> =
			    call 'erlang':'=:='
				(Cnt, NoC)
			in  call 'erlang':'and'
				(_cor2, Acc)
		    ( <_cor6,_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6,_cor5})
			    -| [{'function_name',{'-fast_output_end/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-fast_output_end/2-fun-0-'}}] )
	in  %% Line 1099
	    case call 'ets':'foldl'
		     (_cor7, %% Line 1100
			     'true', _cor0) of
	      %% Line 1101
	      <'true'> when 'true' ->
		  {'ok',_cor1}
	      %% Line 1102
	      <'false'> when 'true' ->
		  {'error','invalid_objects_list'}
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'write_segment_file'/6 =
    %% Line 1106
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
	      #<BSize>(32,1,'integer',['unsigned'|['big']]),
	      #<AddrToBe>(32,1,'integer',['unsigned'|['big']]),
	      #<LSize>(8,1,'integer',['unsigned'|['big']])}#|Bins],%% Line 1107
								   Bases,%% Line 1107
									 Head,%% Line 1107
									      Ws,%% Line 1107
										 SegAddr,%% Line 1107
											 SS> when 'true' ->
	      let <_cor7> =
		  %% Line 1111
		  call 'erlang':'*'
		      (8, Slot)
	      in  let <Pos> =
		      %% Line 1111
		      call 'erlang':'+'
			  (SS, _cor7)
		  in  %% Line 1112
		      apply 'write_segment_file'/10
			  (Bins, Bases, Head, Ws, SegAddr, SS, Pos, %% Line 1113
								    BSize, %% Line 1113
									   AddrToBe, %% Line 1113
										     LSize)
	  %% Line 1114
	  <[],_X_Bases,Head,Ws,SegAddr,_X_SS> when 'true' ->
	      do  %% Line 1115
		  call 'dets_utils':'write'
		      (Head, Ws)
		  %% Line 1116
		  SegAddr
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'write_segment_file',6}}] )
	    -| ['compiler_generated'] )
	end
'write_segment_file'/10 =
    %% Line 1118
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,%% Line 1119
						   AddrToBe,%% Line 1119
							    LSize>
	      when %% Line 1119
		call 'erlang':'=:='
		    (Pos,
		     SegAddr) ->
	      let <_cor10> =
		  %% Line 1120
		  call 'erlang':'element'
		      (LSize, Bases)
	      in  let <Addr> =
		      %% Line 1120
		      call 'erlang':'+'
			  (AddrToBe, _cor10)
		  in  let <_cor12> =
			  %% Line 1121
			  #{#<BSize>(32,1,'integer',['unsigned'|['big']]),
			    #<Addr>(32,1,'integer',['unsigned'|['big']])}#
		      in  let <NWs> =
			      %% Line 1121
			      [Ws|_cor12]
			  in  let <_cor15> =
				  %% Line 1122
				  call 'erlang':'+'
				      (SegAddr, 8)
			      in  ( case %% Line 1122
					 <Bins,Bases,Head,NWs,_cor15,SS> of
				      ( <( [( #{#<( Slot
						    -| ['compiler_generated'] )>(( 32
										   -| ['compiler_generated'] ),( 1
														 -| ['compiler_generated'] ),( 'integer'
																	       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																					     -| ['compiler_generated'] )),
						#<( BSize
						    -| ['compiler_generated'] )>(( 32
										   -| ['compiler_generated'] ),( 1
														 -| ['compiler_generated'] ),( 'integer'
																	       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																					     -| ['compiler_generated'] )),
						#<( AddrToBe
						    -| ['compiler_generated'] )>(( 32
										   -| ['compiler_generated'] ),( 1
														 -| ['compiler_generated'] ),( 'integer'
																	       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																					     -| ['compiler_generated'] )),
						#<( LSize
						    -| ['compiler_generated'] )>(( 8
										   -| ['compiler_generated'] ),( 1
														 -| ['compiler_generated'] ),( 'integer'
																	       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																					     -| ['compiler_generated'] ))}#
					      -| ['compiler_generated'] )|_fol1063]
					   -| ['compiler_generated'] ),_fol1064,_fol1065,( Ws
											   -| ['compiler_generated'] ),( SegAddr
															 -| ['compiler_generated'] ),_fol1066> when ( 'true'
																				      -| ['compiler_generated'] ) ->
					    ( let <_cor7> =
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( '*'
											 -| ['compiler_generated'] )
							(8, ( Slot
							      -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  ( let <Pos> =
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '+'
											       -| ['compiler_generated'] )
							      (_fol1066, ( _cor7
									   -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    in  ( apply ( 'write_segment_file'/10
								  -| ['compiler_generated'] )
							      (_fol1063, _fol1064, _fol1065, ( Ws
											       -| ['compiler_generated'] ), ( SegAddr
															      -| ['compiler_generated'] ), _fol1066, ( Pos
																				       -| ['compiler_generated'] ), ( BSize
																								      -| ['compiler_generated'] ), ( AddrToBe
																												     -| ['compiler_generated'] ), ( LSize
																																    -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( []
					   -| ['compiler_generated'] ),( _X_Bases
									 -| ['compiler_generated'] ),_fol1067,( Ws
														-| ['compiler_generated'] ),( SegAddr
																	      -| ['compiler_generated'] ),( _X_SS
																					    -| ['compiler_generated'] )> when ( 'true'
																										-| ['compiler_generated'] ) ->
					    ( do  ( call ( 'dets_utils'
							   -| ['compiler_generated'] ):( 'write'
											 -| ['compiler_generated'] )
							(_fol1067, ( Ws
								     -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
						  ( SegAddr
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( _cor14
					   -| ['compiler_generated'] ),( _cor13
									 -| ['compiler_generated'] ),( _cor12
												       -| ['compiler_generated'] ),( _cor11
																     -| ['compiler_generated'] ),( _cor10
																				   -| ['compiler_generated'] ),( _cor9
																								 -| ['compiler_generated'] )> when ( 'true'
																												     -| ['compiler_generated'] ) ->
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),( _cor14
										      -| ['compiler_generated'] ),( _cor13
														    -| ['compiler_generated'] ),( _cor12
																		  -| ['compiler_generated'] ),( _cor11
																						-| ['compiler_generated'] ),( _cor10
																									      -| ['compiler_generated'] ),( _cor9
																													    -| ['compiler_generated'] )}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
	  %% Line 1123
	  <Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,%% Line 1124
						   AddrToBe,%% Line 1124
							    LSize>
	      when %% Line 1124
		try
		    let <_cor16> =
			call 'erlang':'-'
			    (Pos, SegAddr)
		    in  call 'erlang':'<'
			    (_cor16, 100)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor17> =
		  %% Line 1125
		  call 'erlang':'element'
		      (LSize, Bases)
	      in  let <Addr> =
		      %% Line 1125
		      call 'erlang':'+'
			  (AddrToBe, _cor17)
		  in  let <NoZeros> =
			  %% Line 1126
			  call 'erlang':'-'
			      (Pos, SegAddr)
		      in  let <_cor20> =
			      %% Line 1127
			      #{#<0>(NoZeros,8,'integer',['unsigned'|['big']]),
				#<BSize>(32,1,'integer',['unsigned'|['big']]),
				#<Addr>(32,1,'integer',['unsigned'|['big']])}#
			  in  let <NWs> =
				  %% Line 1127
				  [Ws|_cor20]
			      in  let <_cor23> =
				      %% Line 1128
				      call 'erlang':'+'
					  (SegAddr, NoZeros)
				  in  let <NSegAddr> =
					  %% Line 1128
					  call 'erlang':'+'
					      (_cor23, 8)
				      in  ( case %% Line 1129
						 <Bins,Bases,Head,NWs,NSegAddr,SS> of
					      ( <( [( #{#<( Slot
							    -| ['compiler_generated'] )>(( 32
											   -| ['compiler_generated'] ),( 1
															 -| ['compiler_generated'] ),( 'integer'
																		       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						     -| ['compiler_generated'] )),
							#<( BSize
							    -| ['compiler_generated'] )>(( 32
											   -| ['compiler_generated'] ),( 1
															 -| ['compiler_generated'] ),( 'integer'
																		       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						     -| ['compiler_generated'] )),
							#<( AddrToBe
							    -| ['compiler_generated'] )>(( 32
											   -| ['compiler_generated'] ),( 1
															 -| ['compiler_generated'] ),( 'integer'
																		       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						     -| ['compiler_generated'] )),
							#<( LSize
							    -| ['compiler_generated'] )>(( 8
											   -| ['compiler_generated'] ),( 1
															 -| ['compiler_generated'] ),( 'integer'
																		       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						     -| ['compiler_generated'] ))}#
						      -| ['compiler_generated'] )|_fol1068]
						   -| ['compiler_generated'] ),_fol1069,_fol1070,( Ws
												   -| ['compiler_generated'] ),( SegAddr
																 -| ['compiler_generated'] ),_fol1071> when ( 'true'
																					      -| ['compiler_generated'] ) ->
						    ( let <_cor7> =
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( '*'
												 -| ['compiler_generated'] )
								(8, ( Slot
								      -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      in  ( let <Pos> =
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( '+'
												       -| ['compiler_generated'] )
								      (_fol1071, ( _cor7
										   -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    in  ( apply ( 'write_segment_file'/10
									  -| ['compiler_generated'] )
								      (_fol1068, _fol1069, _fol1070, ( Ws
												       -| ['compiler_generated'] ), ( SegAddr
																      -| ['compiler_generated'] ), _fol1071, ( Pos
																					       -| ['compiler_generated'] ), ( BSize
																									      -| ['compiler_generated'] ), ( AddrToBe
																													     -| ['compiler_generated'] ), ( LSize
																																	    -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( []
						   -| ['compiler_generated'] ),( _X_Bases
										 -| ['compiler_generated'] ),_fol1072,( Ws
															-| ['compiler_generated'] ),( SegAddr
																		      -| ['compiler_generated'] ),( _X_SS
																						    -| ['compiler_generated'] )> when ( 'true'
																											-| ['compiler_generated'] ) ->
						    ( do  ( call ( 'dets_utils'
								   -| ['compiler_generated'] ):( 'write'
												 -| ['compiler_generated'] )
								(_fol1072, ( Ws
									     -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
							  ( SegAddr
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor14
						   -| ['compiler_generated'] ),( _cor13
										 -| ['compiler_generated'] ),( _cor12
													       -| ['compiler_generated'] ),( _cor11
																	     -| ['compiler_generated'] ),( _cor10
																					   -| ['compiler_generated'] ),( _cor9
																									 -| ['compiler_generated'] )> when ( 'true'
																													     -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'function_clause'
								-| ['compiler_generated'] ),( _cor14
											      -| ['compiler_generated'] ),( _cor13
															    -| ['compiler_generated'] ),( _cor12
																			  -| ['compiler_generated'] ),( _cor11
																							-| ['compiler_generated'] ),( _cor10
																										      -| ['compiler_generated'] ),( _cor9
																														    -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
	  %% Line 1130
	  <Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,%% Line 1131
						   AddrToBe,%% Line 1131
							    LSize> when 'true' ->
	      let <_cor25> =
		  %% Line 1132
		  call 'erlang':'element'
		      (LSize, Bases)
	      in  let <Addr> =
		      %% Line 1132
		      call 'erlang':'+'
			  (AddrToBe, _cor25)
		  in  let <NoZeros> =
			  %% Line 1133
			  call 'erlang':'-'
			      (Pos, SegAddr)
		      in  let <_cor28> =
			      %% Line 1134
			      call 'dets_utils':'make_zeros'
				  (NoZeros)
			  in  let <_cor29> =
				  %% Line 1134
				  #{#<BSize>(32,1,'integer',['unsigned'|['big']]),
				    #<Addr>(32,1,'integer',['unsigned'|['big']])}#
			      in  let <NWs> =
				      %% Line 1134
				      [Ws|[_cor28|_cor29]]
				  in  let <_cor32> =
					  %% Line 1135
					  call 'erlang':'+'
					      (SegAddr, NoZeros)
				      in  let <NSegAddr> =
					      %% Line 1135
					      call 'erlang':'+'
						  (_cor32, 8)
					  in  ( case %% Line 1136
						     <Bins,Bases,Head,NWs,NSegAddr,SS> of
						  ( <( [( #{#<( Slot
								-| ['compiler_generated'] )>(( 32
											       -| ['compiler_generated'] ),( 1
															     -| ['compiler_generated'] ),( 'integer'
																			   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							 -| ['compiler_generated'] )),
							    #<( BSize
								-| ['compiler_generated'] )>(( 32
											       -| ['compiler_generated'] ),( 1
															     -| ['compiler_generated'] ),( 'integer'
																			   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							 -| ['compiler_generated'] )),
							    #<( AddrToBe
								-| ['compiler_generated'] )>(( 32
											       -| ['compiler_generated'] ),( 1
															     -| ['compiler_generated'] ),( 'integer'
																			   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							 -| ['compiler_generated'] )),
							    #<( LSize
								-| ['compiler_generated'] )>(( 8
											       -| ['compiler_generated'] ),( 1
															     -| ['compiler_generated'] ),( 'integer'
																			   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																							 -| ['compiler_generated'] ))}#
							  -| ['compiler_generated'] )|_fol1073]
						       -| ['compiler_generated'] ),_fol1074,_fol1075,( Ws
												       -| ['compiler_generated'] ),( SegAddr
																     -| ['compiler_generated'] ),_fol1076> when ( 'true'
																						  -| ['compiler_generated'] ) ->
							( let <_cor7> =
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( '*'
												     -| ['compiler_generated'] )
								    (8, ( Slot
									  -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  in  ( let <Pos> =
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( '+'
													   -| ['compiler_generated'] )
									  (_fol1076, ( _cor7
										       -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								in  ( apply ( 'write_segment_file'/10
									      -| ['compiler_generated'] )
									  (_fol1073, _fol1074, _fol1075, ( Ws
													   -| ['compiler_generated'] ), ( SegAddr
																	  -| ['compiler_generated'] ), _fol1076, ( Pos
																						   -| ['compiler_generated'] ), ( BSize
																										  -| ['compiler_generated'] ), ( AddrToBe
																														 -| ['compiler_generated'] ), ( LSize
																																		-| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( []
						       -| ['compiler_generated'] ),( _X_Bases
										     -| ['compiler_generated'] ),_fol1077,( Ws
															    -| ['compiler_generated'] ),( SegAddr
																			  -| ['compiler_generated'] ),( _X_SS
																							-| ['compiler_generated'] )> when ( 'true'
																											    -| ['compiler_generated'] ) ->
							( do  ( call ( 'dets_utils'
								       -| ['compiler_generated'] ):( 'write'
												     -| ['compiler_generated'] )
								    (_fol1077, ( Ws
										 -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							      ( SegAddr
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _cor14
						       -| ['compiler_generated'] ),( _cor13
										     -| ['compiler_generated'] ),( _cor12
														   -| ['compiler_generated'] ),( _cor11
																		 -| ['compiler_generated'] ),( _cor10
																					       -| ['compiler_generated'] ),( _cor9
																									     -| ['compiler_generated'] )> when ( 'true'
																														 -| ['compiler_generated'] ) ->
							( primop ( 'match_fail'
								   -| ['compiler_generated'] )
							      (( {( 'function_clause'
								    -| ['compiler_generated'] ),( _cor14
												  -| ['compiler_generated'] ),( _cor13
																-| ['compiler_generated'] ),( _cor12
																			      -| ['compiler_generated'] ),( _cor11
																							    -| ['compiler_generated'] ),( _cor10
																											  -| ['compiler_generated'] ),( _cor9
																															-| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
	end
'fast_write_all_sizes'/3 =
    %% Line 1138
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1139
	    call 'erlang':'tuple_to_list'
		(_cor2)
	in  let <CacheL> =
		%% Line 1139
		call 'lists':'reverse'
		    (_cor3)
	    in  let <_cor5> =
		    %% Line 1140
		    call 'erlang':'tuple_size'
			(_cor2)
		in  %% Line 1140
		    apply 'fast_write_sizes'/6
			(CacheL, _cor5, _cor1, _cor0, [], [])
'fast_write_sizes'/6 =
    %% Line 1142
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Sz,_X_SizeT,Head,NCL,PwriteList> when 'true' ->
	      %% Line 1143
	      case Head of
		<{'head',_cor25,_cor26,_cor27,Fd,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,FileName,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
		    %% Line 1144
		    case call 'dets_utils':'pwrite'
			     (Fd, FileName, PwriteList) of
		      <'ok'> when 'true' ->
			  %% Line 1145
			  call 'erlang':'list_to_tuple'
			      (NCL)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1146
	  <[C = [_X_Addr|[]]|CL],Sz,SizeT,Head,NCL,PwriteList> when 'true' ->
	      let <_cor8> =
		  %% Line 1147
		  call 'erlang':'-'
		      (Sz, 1)
	      in  %% Line 1147
		  apply 'fast_write_sizes'/6
		      (CL, _cor8, SizeT, Head, [C|NCL], PwriteList)
	  %% Line 1148
	  <[[Addr|C]|CL],Sz,SizeT,Head,NCL,PwriteList> when 'true' ->
	      %% Line 1149
	      case call 'ets':'lookup'
		       (SizeT, Sz) of
		%% Line 1150
		<[]> when 'true' ->
		    %% Line 1151
		    call 'erlang':'throw'
			({'error','invalid_objects_list'})
		%% Line 1152
		<[{_cor54,Position,_X_ObjCounter,_X_NoCollections}|[]]>
		    when call 'erlang':'=:='
			  (_cor54,
			   Sz) ->
		    let <NoColls> =
			%% Line 1154
			call 'erlang':'length'
			    (C)
		    in  let <_X_> =
			    %% Line 1155
			    ( call 'ets':'update_counter'
				  (SizeT, Sz, {3,NoColls})
			      -| ['result_not_wanted'] )
			in  let <_cor14> =
				%% Line 1156
				call 'erlang':'+'
				    (Position, Addr)
			    in  let <_cor11> =
				    %% Line 1156
				    call 'erlang':'-'
					(Sz, 1)
				in  let <_cor12> =
					%% Line 1156
					call 'erlang':'bsl'
					    (1, _cor11)
				    in  let <_cor13> =
					    %% Line 1156
					    call 'erlang':'*'
						(NoColls, _cor12)
					in  let <Pos> =
						%% Line 1156
						call 'erlang':'-'
						    (_cor14, _cor13)
					    in  let <_cor17> =
						    %% Line 1157
						    call 'erlang':'-'
							(Sz, 1)
						in  let <_cor16> =
							%% Line 1158
							call 'lists':'reverse'
							    (C)
						    in  %% Line 1157
							apply 'fast_write_sizes'/6
							    (CL, _cor17, SizeT, Head, [[Addr|[]]|NCL], %% Line 1158
												       [{Pos,_cor16}|PwriteList])
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor18})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'fast_write_sizes',6}}] )
	    -| ['compiler_generated'] )
	end
'prepare_file_init'/5 =
    %% Line 1161
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1163
	case call 'dets_utils':'alloc'
		 (_cor0, 2047) of
	  <{_cor48,SegEnd,_cor49}> when 'true' ->
	      %% Line 1164
	      case _cor0 of
		<{'head',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80}> when 'true' ->
		    let <_cor9> =
			call 'erlang':'setelement'
			    (7, _cor0, _cor3)
		    in  let <_cor11> =
			    call 'erlang':'setelement'
				(6, _cor9, _cor4)
			in  %% Line 1165
			    case call 'ets':'insert'
				     (_cor1, {1,0,[],0}) of
			      <'true'> when 'true' ->
				  let <_cor18> =
				      %% Line 1166
				      ( fun (_cor16) ->
					    case _cor16 of
					      <{LogSz,NoColls}> when 'true' ->
						  let <_cor14> =
						      %% Line 1167
						      call 'erlang':'+'
							  (LogSz, 1)
						  in  let <_cor82> =
							  %% Line 1167
							  call 'ets':'insert'
							      (_cor1, {_cor14,0,0,NoColls})
						      in  %% Line 1167
							  case _cor82 of
							    <'true'> when 'true' ->
								( _cor82
								  -| ['compiler_generated'] )
							    ( <_cor15> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor15})
							      -| ['compiler_generated'] )
							  end
					      ( <_cor17> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor17})
						      -| [{'function_name',{'-prepare_file_init/5-fun-0-',1}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-prepare_file_init/5-fun-0-'}}] )
				  in  do  %% Line 1166
					  call 'lists':'foreach'
					      (_cor18, _cor2)
					  %% Line 1169
					  case apply 'allocate_all_objects'/2
						   (_cor11, _cor1) of
					    <{NewHead,NL0,MaxSz,EndOfFile}> when 'true' ->
						%% Line 1170
						case NL0 of
						  <[{1,SegAddr,[],0}|NL]> when 'true' ->
						      %% Line 1171
						      case call 'ets':'delete_all_objects'
							       (_cor1) of
							<'true'> when 'true' ->
							    let <_cor25> =
								%% Line 1172
								( fun (_cor23) ->
								      let <_cor83> =
									  call 'ets':'insert'
									      (_cor1, _cor23)
								      in  case _cor83 of
									    <'true'> when 'true' ->
										( _cor83
										  -| ['compiler_generated'] )
									    ( <_cor22> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor22})
									      -| ['compiler_generated'] )
									  end
								  -| [{'id',{0,0,'-prepare_file_init/5-fun-1-'}}] )
							    in  do  %% Line 1172
								    call 'lists':'foreach'
									(_cor25, NL)
								    let <_cor31> =
									%% Line 1173
									( fun (_cor28,_cor27) ->
									      case <_cor28,_cor27> of
										<{LSz,P,_X_D,_X_N},A> when 'true' ->
										    call 'erlang':'setelement'
											(LSz, A, P)
										( <_cor30,_cor29> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor30,_cor29})
											-| [{'function_name',{'-prepare_file_init/5-fun-2-',2}}] )
										  -| ['compiler_generated'] )
									      end
									  -| [{'id',{0,0,'-prepare_file_init/5-fun-2-'}}] )
								    in  let <_cor26> =
									    %% Line 1174
									    call 'erlang':'make_tuple'
										(MaxSz, 0)
									in  let <Bases> =
										%% Line 1173
										call 'lists':'foldl'
										    (_cor31, _cor26, %% Line 1174
												     NL)
									    in  let <_cor40> =
										    %% Line 1175
										    ( fun (_cor37,_cor36) ->
											  case <_cor37,_cor36> of
											    <{LSz,_cor84,_cor85,N},A> when 'true' ->
												let <_cor33> =
												    call 'erlang':'-'
													(LSz, 1)
												in  let <_cor34> =
													call 'erlang':'bsl'
													    (1, _cor33)
												    in  let <_cor35> =
													    call 'erlang':'*'
														(_cor34, N)
													in  call 'erlang':'+'
														(A, _cor35)
											    ( <_cor39,_cor38> when 'true' ->
												  ( primop 'match_fail'
													({'function_clause',_cor39,_cor38})
												    -| [{'function_name',{'-prepare_file_init/5-fun-3-',2}}] )
											      -| ['compiler_generated'] )
											  end
										      -| [{'id',{0,0,'-prepare_file_init/5-fun-3-'}}] )
										in  let <Est> =
											%% Line 1175
											call 'lists':'foldl'
											    (_cor40, 0, NL)
										    in  %% Line 1176
											case apply 'write_bytes'/3
												 (NewHead, EndOfFile, Est) of
											  <'ok'> when 'true' ->
											      %% Line 1177
											      {NewHead,Bases,SegAddr,SegEnd}
											  ( <_cor42> when 'true' ->
												primop 'match_fail'
												    ({'badmatch',_cor42})
											    -| ['compiler_generated'] )
											end
							( <_cor21> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor21})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor20> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor20})
						    -| ['compiler_generated'] )
						end
					    ( <_cor19> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor19})
					      -| ['compiler_generated'] )
					  end
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor13})
				-| ['compiler_generated'] )
			    end
		( <_cor81> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','head'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'write_bytes'/3 =
    %% Line 1185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Head,_X_EndOfFile,Est>
	      when call 'erlang':'<'
		    (Est,
		     491520) ->
	      %% Line 1186
	      'ok'
	  %% Line 1187
	  <Head,EndOfFile,_X_Est> when 'true' ->
	      %% Line 1188
	      ( case Head of
		  ( <( {'head',_cor17,_cor18,_cor19,_rec33,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1189
			case call 'file':'position'
				 (_rec33, 'eof') of
			  <{'ok',Start}> when 'true' ->
			      let <BytesToWrite> =
				  %% Line 1190
				  call 'erlang':'-'
				      (EndOfFile, Start)
			      in  let <_cor10> =
				      %% Line 1192
				      call 'lists':'seq'
					  (0, 255)
				  in  let <_cor12> =
					  %% Line 1192
					  call 'lists':'duplicate'
					      (256, _cor10)
				      in  let <Bin> =
					      %% Line 1192
					      call 'erlang':'list_to_binary'
						  (_cor12)
					  in  %% Line 1193
					      apply 'write_loop'/3
						  (Head, BytesToWrite, Bin)
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor47> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'write_loop'/3 =
    %% Line 1195
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Head,BytesToWrite,Bin>
	      when try
		    let <_cor3> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'>='
			    (BytesToWrite, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1196
	      ( case Head of
		  ( <( {'head',_cor15,_cor16,_cor17,_rec34,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'file':'write'
				 (_rec34, Bin) of
			  %% Line 1197
			  <'ok'> when 'true' ->
			      let <_cor6> =
				  call 'erlang':'byte_size'
				      (Bin)
			      in  let <_cor7> =
				      call 'erlang':'-'
					  (BytesToWrite, _cor6)
				  in  apply 'write_loop'/3
					  (Head, _cor7, Bin)
			  %% Line 1198
			  <Error> when 'true' ->
			      call 'dets_utils':'file_error'
				  (Error, _cor35)
			end
		    -| ['compiler_generated'] )
		  ( <_cor45> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1200
	  <_X_Head,0,_X_Bin> when 'true' ->
	      %% Line 1201
	      'ok'
	  %% Line 1202
	  <Head,BytesToWrite,Bin> when 'true' ->
	      %% Line 1203
	      case ( Bin
		     -| ['reuse_for_context'] ) of
		<#{#<SmallBin>(BytesToWrite,8,'binary',['unsigned'|['big']]),
		   #<_cor77>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1204
		    apply 'write_loop'/3
			(Head, BytesToWrite, SmallBin)
		( <_cor11> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor11)
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	end
'allocate_all_objects'/2 =
    %% Line 1208
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1209
	    call 'ets':'tab2list'
		(_cor0)
	in  let <_cor3> =
		%% Line 1209
		call 'lists':'keysort'
		    (1, _cor2)
	    in  let <DTL> =
		    %% Line 1209
		    call 'lists':'reverse'
			(_cor3)
		in  let <_cor5> =
			%% Line 1210
			call 'erlang':'hd'
			    (DTL)
		    in  let <MaxSz> =
			    %% Line 1210
			    call 'erlang':'element'
				(1, _cor5)
			in  %% Line 1211
			    case apply 'allocate_all'/3
				     (_cor1, DTL, []) of
			      <{Head1,NL}> when 'true' ->
				  %% Line 1214
				  case call 'dets_utils':'alloc'
					   (Head1, 16) of
				    <{_X_Head,EndOfFile,_cor18}> when 'true' ->
					%% Line 1215
					( case Head1 of
					    ( <( {'head',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec38,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_rec36> =
						      ( case _rec38 of
							  ( <( ( NoColls
								 -| ['compiler_generated'] ) = ( 'undefined'
												 -| ['compiler_generated'] )
							       -| ['compiler_generated'] )> when ( 'true'
												   -| ['compiler_generated'] ) ->
								( NoColls
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <( NoColls
							       -| ['compiler_generated'] )> when ( 'true'
												   -| ['compiler_generated'] ) ->
								( apply ( 'max_objsize'/2
									  -| ['compiler_generated'] )
								      (( NoColls
									 -| ['compiler_generated'] ), ( 0
													-| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  in  let <_cor14> =
							  call 'erlang':'setelement'
							      (8, Head1, _rec36)
						      in  %% Line 1216
							  {_cor14,NL,MaxSz,EndOfFile}
					      -| ['compiler_generated'] )
					    ( <_cor49> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','head'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
'allocate_all'/3 =
    %% Line 1226
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Head,[{1,_cor34,Data,_cor35}|[]],L> when 'true' ->
	      %% Line 1231
	      ( case Head of
		  ( <( {'head',_cor36,_cor37,_rec39,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}
		       -| ['compiler_generated'] )> when 'true' ->
			let <NoParts> =
			    apply 'no_parts'/1
				(_rec39)
			in  let <_cor6> =
				%% Line 1233
				call 'erlang':'*'
				    (NoParts, 4)
			    in  let <_cor7> =
				    %% Line 1233
				    call 'erlang':'*'
					(_cor6, 512)
				in  let <Addr> =
					%% Line 1233
					call 'erlang':'+'
					    (1336, _cor7)
				    in  %% Line 1234
					{Head,[{1,Addr,Data,0}|L]}
		    -| ['compiler_generated'] )
		  ( <_cor66> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1235
	  <Head,[{LSize,_cor67,Data,NoCollections}|DTL],L> when 'true' ->
	      let <_cor16> =
		  %% Line 1236
		  call 'erlang':'-'
		      (LSize, 1)
	      in  let <Size> =
		      %% Line 1236
		      call 'erlang':'bsl'
			  (1, _cor16)
		  in  let <_cor18> =
			  %% Line 2504
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '-'
								 -| ['compiler_generated'] )
				(Size, ( 1
					 -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      in  %% Line 1237
			  case call 'dets_utils':'alloc'
				   (Head, _cor18) of
			    <{_X_Head,Addr,_cor68}> when 'true' ->
				let <Head1> =
				    %% Line 1238
				    call 'dets_utils':'alloc_many'
					(Head, Size, NoCollections, Addr)
				in  %% Line 1239
				    ( case Head1 of
					( <( {'head',_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_rec40,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_cor24> =
						  %% Line 1240
						  call 'erlang':'-'
						      (LSize, 1)
					      in  let <NewNoColls> =
						      %% Line 1240
						      call 'orddict':'update_counter'
							  (_cor24, NoCollections, _rec40)
						  in  let <_cor28> =
							  %% Line 1241
							  call 'erlang':'setelement'
							      (14, Head1, NewNoColls)
						      in  let <E> =
							      %% Line 1242
							      {LSize,Addr,Data,NoCollections}
							  in  %% Line 1243
							      apply 'allocate_all'/3
								  (_cor28, DTL, [E|L])
					  -| ['compiler_generated'] )
					( <_cor99> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','head'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    ( <_cor19> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor19})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31})
		  -| [{'function_name',{'allocate_all',3}}] )
	    -| ['compiler_generated'] )
	end
'bin2term'/3 =
    %% Line 1245
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bin,9,Kp> when 'true' ->
	      %% Line 1246
	      apply 'bin2term1'/3
		  (Bin, Kp, [])
	  %% Line 1247
	  <Bin,8,Kp> when 'true' ->
	      %% Line 1248
	      apply 'bin2term_v8'/3
		  (Bin, Kp, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'bin2term',3}}] )
	    -| ['compiler_generated'] )
	end
'bin2term1'/3 =
    %% Line 1250
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
	      #<Seq>(32,1,'integer',['unsigned'|['big']]),
	      #<BinTerm>('all',8,'binary',['unsigned'|['big']])}#|BTs],Kp,L> when 'true' ->
	      let <Term> =
		  %% Line 1251
		  call 'erlang':'binary_to_term'
		      (BinTerm)
	      in  let <Key> =
		      %% Line 1252
		      call 'erlang':'element'
			  (Kp, Term)
		  in  %% Line 1253
		      apply 'bin2term1'/3
			  (BTs, Kp, [{Slot,Key,Seq,Term,BinTerm}|L])
	  %% Line 1254
	  <[],_X_Kp,L> when 'true' ->
	      %% Line 1255
	      call 'lists':'reverse'
		  (L)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'bin2term1',3}}] )
	    -| ['compiler_generated'] )
	end
'bin2term_v8'/3 =
    %% Line 1257
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
	      #<BinTerm>('all',8,'binary',['unsigned'|['big']])}#|BTs],Kp,L> when 'true' ->
	      let <Term> =
		  %% Line 1258
		  call 'erlang':'binary_to_term'
		      (BinTerm)
	      in  let <Key> =
		      %% Line 1259
		      call 'erlang':'element'
			  (Kp, Term)
		  in  %% Line 1260
		      apply 'bin2term_v8'/3
			  (BTs, Kp, [{Slot,Key,'foo',Term,BinTerm}|L])
	  %% Line 1261
	  <[],_X_Kp,L> when 'true' ->
	      %% Line 1262
	      call 'lists':'reverse'
		  (L)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'bin2term_v8',3}}] )
	    -| ['compiler_generated'] )
	end
'write_all_sizes'/4 =
    %% Line 1264
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Cache = {},_X_SizeT,_X_Head,_X_More> when 'true' ->
	      %% Line 1265
	      Cache
	  %% Line 1266
	  <Cache,SizeT,Head,More> when 'true' ->
	      let <_cor4> =
		  %% Line 1267
		  call 'erlang':'tuple_to_list'
		      (Cache)
	      in  let <CacheL> =
		      %% Line 1267
		      call 'lists':'reverse'
			  (_cor4)
		  in  let <Sz> =
			  %% Line 1268
			  call 'erlang':'length'
			      (CacheL)
		      in  let <_cor8> =
			      %% Line 1269
			      case call 'ets':'info'
				       (SizeT, 'size') of
				%% Line 1270
				<1>
				    when call 'erlang':'=:='
					  (More,
					   'no_more') ->
				    %% Line 1271
				    apply 'all_sizes'/3
					(CacheL, Sz, SizeT)
				%% Line 1272
				<_cor14> when 'true' ->
				    %% Line 1273
				    apply 'write_sizes'/4
					(CacheL, Sz, SizeT, Head)
			      end
			  in  %% Line 1275
			      call 'erlang':'list_to_tuple'
				  (_cor8)
	end
'all_sizes'/3 =
    %% Line 1277
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <CL = [],_X_Sz,_X_SizeT> when 'true' ->
	      %% Line 1278
	      CL
	  %% Line 1279
	  <[C = []|CL],Sz,SizeT> when 'true' ->
	      let <_cor3> =
		  %% Line 1280
		  call 'erlang':'-'
		      (Sz, 1)
	      in  let <_cor4> =
		      %% Line 1280
		      apply 'all_sizes'/3
			  (CL, _cor3, SizeT)
		  in  %% Line 1280
		      [C|_cor4]
	  %% Line 1281
	  <[C0|CL],Sz,SizeT> when 'true' ->
	      let <C> =
		  %% Line 1282
		  call 'lists':'reverse'
		      (C0)
	      in  let <NoCollections> =
		      %% Line 1283
		      call 'erlang':'length'
			  (C)
		  in  %% Line 1284
		      case call 'ets':'insert'
			       (SizeT, {Sz,0,C,NoCollections}) of
			<'true'> when 'true' ->
			    let <_cor8> =
				%% Line 1285
				call 'erlang':'-'
				    (Sz, 1)
			    in  let <_cor9> =
				    %% Line 1285
				    apply 'all_sizes'/3
					(CL, _cor8, SizeT)
				in  %% Line 1285
				    [[]|_cor9]
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'all_sizes',3}}] )
	    -| ['compiler_generated'] )
	end
'write_sizes'/4 =
    %% Line 1287
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <CL = [],_X_Sz,_X_SizeT,_X_Head> when 'true' ->
	      %% Line 1288
	      CL
	  %% Line 1289
	  <[C = []|CL],Sz,SizeT,Head> when 'true' ->
	      let <_cor4> =
		  %% Line 1290
		  call 'erlang':'-'
		      (Sz, 1)
	      in  let <_cor5> =
		      %% Line 1290
		      apply 'write_sizes'/4
			  (CL, _cor4, SizeT, Head)
		  in  %% Line 1290
		      [C|_cor5]
	  %% Line 1291
	  <[C|CL],Sz,SizeT,Head> when 'true' ->
	      let <_cor7> =
		  %% Line 1293
		  case call 'ets':'lookup'
			   (SizeT, Sz) of
		    %% Line 1294
		    <[]> when 'true' ->
			%% Line 1295
			apply 'temp_file'/3
			    (Head, SizeT, Sz)
		    %% Line 1296
		    <[{_cor19,_cor20,{FN,F},_cor21}|[]]> when 'true' ->
			%% Line 1297
			{FN,F}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1292
		  case _cor7 of
		    <{FileName,Fd}> when 'true' ->
			let <NoCollections> =
			    %% Line 1299
			    call 'erlang':'length'
				(C)
			in  let <_X_> =
				%% Line 1300
				( call 'ets':'update_counter'
				      (SizeT, Sz, {4,NoCollections})
				  -| ['result_not_wanted'] )
			    in  let <_cor11> =
				    %% Line 1301
				    call 'lists':'reverse'
					(C)
				in  %% Line 1301
				    case call 'file':'write'
					     (Fd, _cor11) of
				      %% Line 1302
				      <'ok'> when 'true' ->
					  let <_cor12> =
					      %% Line 1303
					      call 'erlang':'-'
						  (Sz, 1)
					  in  let <_cor13> =
						  %% Line 1303
						  apply 'write_sizes'/4
						      (CL, _cor12, SizeT, Head)
					      in  %% Line 1303
						  [[]|_cor13]
				      %% Line 1304
				      <Error> when 'true' ->
					  %% Line 1305
					  call 'dets_utils':'file_error'
					      (FileName, Error)
				    end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'write_sizes',4}}] )
	    -| ['compiler_generated'] )
	end
'output_slots'/6 =
    %% Line 1308
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],Head,Cache,SizeT,NoKeys,NoObjs> when 'true' ->
	      %% Line 1309
	      apply 'output_slots'/8
		  (E, Es, [E|[]], Head, Cache, SizeT, NoKeys, NoObjs)
	  %% Line 1310
	  <[],_X_Head,Cache,SizeT,NoKeys,NoObjs> when 'true' ->
	      let <_X_> =
		  %% Line 1311
		  ( call 'ets':'update_counter'
			(SizeT, 'no', {2,NoObjs})
		    -| ['result_not_wanted'] )
	      in  let <_X_> =
		      %% Line 1312
		      ( call 'ets':'update_counter'
			    (SizeT, 'no', {3,NoKeys})
			-| ['result_not_wanted'] )
		  in  %% Line 1313
		      {'not_a_tuple',[],Cache}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'output_slots',6}}] )
	    -| ['compiler_generated'] )
	end
'output_slots'/8 =
    %% Line 1315
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E,[E1|Es],Acc,Head,Cache,SizeT,NoKeys,NoObjs>
	      when %% Line 1316
		try
		    let <_cor9> =
			call 'erlang':'element'
			    (1, E)
		    in  let <_cor8> =
			    call 'erlang':'element'
				(1, E1)
			in  call 'erlang':'=:='
				(_cor9, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1317
	      apply 'output_slots'/8
		  (E1, Es, [E1|Acc], Head, Cache, SizeT, NoKeys, NoObjs)
	  %% Line 1318
	  <E,[],Acc,_X_Head,Cache,SizeT,NoKeys,NoObjs> when 'true' ->
	      let <_X_> =
		  %% Line 1319
		  ( call 'ets':'update_counter'
			(SizeT, 'no', {2,NoObjs})
		    -| ['result_not_wanted'] )
	      in  let <_X_> =
		      %% Line 1320
		      ( call 'ets':'update_counter'
			    (SizeT, 'no', {3,NoKeys})
			-| ['result_not_wanted'] )
		  in  %% Line 1321
		      {E,Acc,Cache}
	  %% Line 1322
	  <_X_E,L,Acc,Head,Cache,SizeT,NoKeys,NoObjs> when 'true' ->
	      %% Line 1323
	      apply 'output_slot'/7
		  (Acc, Head, Cache, L, SizeT, NoKeys, NoObjs)
	end
'output_slot'/7 =
    %% Line 1325
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1326
	    call 'erlang':'hd'
		(_cor6)
	in  let <Slot> =
		%% Line 1326
		call 'erlang':'element'
		    (1, _cor7)
	    in  let <_cor9> =
		    %% Line 1328
		    call 'lists':'sort'
			(_cor6)
		in  %% Line 1328
		    case apply 'prep_slot'/2
			     (_cor9, _cor5) of
		      <{Bins,Size,No,KNo}> when 'true' ->
			  let <NNoKeys> =
			      %% Line 1329
			      call 'erlang':'+'
				  (_cor1, KNo)
			  in  let <NNoObjs> =
				  %% Line 1330
				  call 'erlang':'+'
				      (_cor0, No)
			      in  let <BSize> =
				      %% Line 1333
				      call 'erlang':'+'
					  (Size, 8)
				  in  ( let <_fol1284> =
					    %% Line 2500
					    ( call ( 'dets_utils'
						     -| ['compiler_generated'] ):( 'log2'
										   -| ['compiler_generated'] )
						  (BSize)
					      -| ['compiler_generated'] )
					in  let <LSize> =
						%% Line 2500
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '+'
										       -| ['compiler_generated'] )
						      (( 1
							 -| ['compiler_generated'] ), _fol1284)
						  -| ['compiler_generated'] )
					    in  let <_cor15> =
						    %% Line 1335
						    call 'erlang':'-'
							(LSize, 1)
						in  let <Size2> =
							%% Line 1335
							call 'erlang':'bsl'
							    (1, _cor15)
						    in  let <_cor17> =
							    %% Line 1336
							    call 'erlang':'-'
								(Size2, BSize)
							in  let <Pad> =
								%% Line 1336
								#{#<0>(_cor17,8,'integer',['unsigned'|['big']])}#
							    in  let <_cor19> =
								    %% Line 1337
								    #{#<BSize>(32,1,'integer',['unsigned'|['big']]),
								      #<305419896>(32,1,'integer',['unsigned'|['big']])}#
								in  let <BinObject> =
									%% Line 1337
									[_cor19|[Bins|Pad]]
								    in  let <_cor29> =
									    %% Line 1339
									    case <> of
									      %% Line 1340
									      <>
										  when try
											let <_cor21> =
											    call 'erlang':'tuple_size'
												(_cor4)
											in  call 'erlang':'>'
												(LSize, _cor21)
										    of <Try> ->
											Try
										    catch <T,R> ->
											'false' ->
										  let <_cor25> =
										      %% Line 1341
										      call 'erlang':'tuple_to_list'
											  (_cor4)
										  in  let <_cor22> =
											  %% Line 1341
											  call 'erlang':'tuple_size'
											      (_cor4)
										      in  let <_cor23> =
											      %% Line 1341
											      call 'erlang':'-'
												  (LSize, _cor22)
											  in  let <_cor24> =
												  %% Line 1341
												  call 'lists':'duplicate'
												      (_cor23, [])
											      in  let <_cor26> =
												      %% Line 1341
												      call 'erlang':'++'
													  (_cor25, _cor24)
												  in  let <C1> =
													  %% Line 1341
													  call 'erlang':'list_to_tuple'
													      (_cor26)
												      in  %% Line 1342
													  call 'erlang':'setelement'
													      (LSize, C1, [BinObject|[]])
									      %% Line 1343
									      <> when 'true' ->
										  let <CL> =
										      %% Line 1344
										      call 'erlang':'element'
											  (LSize, _cor4)
										  in  %% Line 1345
										      call 'erlang':'setelement'
											  (LSize, _cor4, [BinObject|CL])
									    end
									in  let <PBin> =
										%% Line 1350
										#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
										  #<BSize>(32,1,'integer',['unsigned'|['big']]),
										  #<LSize>(8,1,'integer',['unsigned'|['big']])}#
									    in  let <PL> =
										    %% Line 1351
										    call 'erlang':'element'
											(1, _cor29)
										in  let <NCache> =
											%% Line 1352
											call 'erlang':'setelement'
											    (1, _cor29, [PBin|PL])
										    in  %% Line 1353
											apply 'output_slots'/6
											    (_cor3, _cor5, NCache, _cor2, NNoKeys, NNoObjs)
					-| ['compiler_generated'] )
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
'prep_slot'/2 =
    %% Line 1355
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,Head = {'head',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}>
	      when call 'erlang':'=/='
		    (_cor18,
		     'set') ->
	      %% Line 1356
	      apply 'prep_slot'/3
		  (L, Head, [])
	  %% Line 1357
	  <[{_X_Slot,Key,_X_Seq,_X_T,BT}|L],_X_Head> when 'true' ->
	      %% Line 1358
	      apply 'prep_set_slot'/7
		  (L, Key, BT, 0, 0, 0, [])
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'prep_slot',2}}] )
	    -| ['compiler_generated'] )
	end
'prep_slot'/3 =
    %% Line 1360
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_X_Slot,Key,Seq,T,_X_BT}|L],Head,W> when 'true' ->
	      %% Line 1361
	      apply 'prep_slot'/3
		  (L, Head, [{Key,{Seq,{'insert',T}}}|W])
	  %% Line 1362
	  <[],Head,W> when 'true' ->
	      let <WLs> =
		  %% Line 1363
		  call 'dets_utils':'family'
		      (W)
	      in  %% Line 1365
		  ( case Head of
		      ( <( {'head',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec42,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'eval_slot'/9
				     (WLs, [], _rec42, [], [], 0, 0, 0, 'false') of
			      <{[],Bins,Size,No,KNo,_cor41}> when 'true' ->
				  %% Line 1366
				  {Bins,Size,No,KNo}
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor40> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'prep_slot',3}}] )
	    -| ['compiler_generated'] )
	end
'prep_set_slot'/7 =
    %% Line 1369
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{_cor27,K,_X_Seq,_X_T1,BT1}|L],_cor28,_X_BT,Sz,NoKeys,NoObjs,Ws>
	      when call 'erlang':'=:='
		    (_cor28,
		     K) ->
	      %% Line 1370
	      apply 'prep_set_slot'/7
		  (L, K, BT1, Sz, NoKeys, NoObjs, Ws)
	  %% Line 1371
	  <[{_cor29,K1,_X_Seq,_X_T1,BT1}|L],_X_K,BT,Sz,NoKeys,NoObjs,Ws> when 'true' ->
	      let <_cor7> =
		  %% Line 1372
		  call 'erlang':'byte_size'
		      (BT)
	      in  let <BSize> =
		      %% Line 1372
		      call 'erlang':'+'
			  (_cor7, 4)
		  in  let <_cor9> =
			  %% Line 1373
			  #{#<BSize>(32,1,'integer',['unsigned'|['big']])}#
		      in  let <NWs> =
			      %% Line 1373
			      [Ws|[_cor9|BT]]
			  in  let <_cor13> =
				  %% Line 1374
				  call 'erlang':'+'
				      (Sz, BSize)
			      in  let <_cor12> =
				      %% Line 1374
				      call 'erlang':'+'
					  (NoKeys, 1)
				  in  let <_cor11> =
					  %% Line 1374
					  call 'erlang':'+'
					      (NoObjs, 1)
				      in  %% Line 1374
					  apply 'prep_set_slot'/7
					      (L, K1, BT1, _cor13, _cor12, _cor11, NWs)
	  %% Line 1375
	  <[],_X_K,BT,Sz,NoKeys,NoObjs,Ws> when 'true' ->
	      let <_cor14> =
		  %% Line 1376
		  call 'erlang':'byte_size'
		      (BT)
	      in  let <BSize> =
		      %% Line 1376
		      call 'erlang':'+'
			  (_cor14, 4)
		  in  let <_cor19> =
			  %% Line 1377
			  #{#<BSize>(32,1,'integer',['unsigned'|['big']])}#
		      in  let <_cor18> =
			      %% Line 1377
			      call 'erlang':'+'
				  (Sz, BSize)
			  in  let <_cor17> =
				  %% Line 1377
				  call 'erlang':'+'
				      (NoKeys, 1)
			      in  let <_cor16> =
				      %% Line 1377
				      call 'erlang':'+'
					  (NoObjs, 1)
				  in  %% Line 1377
				      {[Ws|[_cor19|BT]],_cor18,_cor17,_cor16}
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'prep_set_slot',7}}] )
	    -| ['compiler_generated'] )
	end
'segment_file'/4 =
    %% Line 1379
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1381
	case call 'ets':'delete_all_objects'
		 (_cor3) of
	  <'true'> when 'true' ->
	      let <_cor9> =
		  %% Line 1382
		  ( fun (_cor7) ->
			let <_cor32> =
			    call 'ets':'insert'
				(_cor3, _cor7)
			in  case _cor32 of
			      <'true'> when 'true' ->
				  ( _cor32
				    -| ['compiler_generated'] )
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    -| [{'id',{0,0,'-segment_file/4-fun-0-'}}] )
	      in  do  %% Line 1382
		      call 'lists':'foreach'
			  (_cor9, _cor1)
		      %% Line 1383
		      case _cor1 of
			<[{1,SegAddr,Data,0}|FileData1]> when 'true' ->
			    let <_cor21> =
				%% Line 1385
				case Data of
				  %% Line 1386
				  <{InFile,In0}> when 'true' ->
				      %% Line 1387
				      case apply 'temp_file'/3
					       (_cor2, _cor3, 2) of
					<{OutFile,Out}> when 'true' ->
					    let <_X_> =
						%% Line 1388
						( call 'file':'close'
						      (In0)
						  -| ['result_not_wanted'] )
					    in  %% Line 1389
						case call 'dets_utils':'open'
							 (InFile, ['raw'|['binary'|['read']]]) of
						  <{'ok',In}> when 'true' ->
						      %% Line 1390
						      case call 'dets_utils':'position'
							       (In, InFile, 'bof') of
							<{'ok',0}> when 'true' ->
							    do  %% Line 1391
								apply 'seg_file'/8
								    (SegAddr, SegAddr, In, InFile, Out, OutFile, _cor3, _cor0)
								let <_X_> =
								    %% Line 1393
								    ( call 'file':'close'
									  (In)
								      -| ['result_not_wanted'] )
								in  let <_X_> =
									%% Line 1394
									( call 'file':'delete'
									      (InFile)
									  -| ['result_not_wanted'] )
								    in  %% Line 1395
									{OutFile,Out}
							( <_cor14> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor14})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor13> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor13})
						    -| ['compiler_generated'] )
						end
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1396
				  <Objects> when 'true' ->
				      %% Line 1397
				      case apply 'seg_file'/5
					       (Objects, SegAddr, SegAddr, _cor3, []) of
					<{LastAddr,B}> when 'true' ->
					    do  %% Line 1398
						call 'dets_utils':'disk_map_segment'
						    (SegAddr, B)
						let <FinalZ> =
						    %% Line 1399
						    call 'erlang':'-'
							(_cor0, LastAddr)
						in  let <_cor19> =
							%% Line 1400
							call 'dets_utils':'make_zeros'
							    (FinalZ)
						    in  %% Line 1400
							[B|_cor19]
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor17})
					  -| ['compiler_generated'] )
				      end
				end
			    in  %% Line 1403
				case call 'ets':'delete_all_objects'
					 (_cor3) of
				  <'true'> when 'true' ->
				      let <_cor27> =
					  %% Line 1406
					  ( fun (_cor25) ->
						let <_cor33> =
						    call 'ets':'insert'
							(_cor3, _cor25)
						in  case _cor33 of
						      <'true'> when 'true' ->
							  ( _cor33
							    -| ['compiler_generated'] )
						      ( <_cor24> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor24})
							-| ['compiler_generated'] )
						    end
					    -| [{'id',{0,0,'-segment_file/4-fun-1-'}}] )
				      in  do  %% Line 1406
					      call 'lists':'foreach'
						  (_cor27, %% Line 1407
							   [{10000,SegAddr,_cor21,0}|FileData1])
					      %% Line 1408
					      'ok'
				  ( <_cor23> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor23})
				    -| ['compiler_generated'] )
				end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'seg_file'/8 =
    %% Line 1410
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1411
	case call 'dets_utils':'read_n'
		 (_cor5, 4500) of
	  %% Line 1412
	  <'eof'> when 'true' ->
	      let <FinalZ> =
		  %% Line 1413
		  call 'erlang':'-'
		      (_cor0, _cor7)
	      in  let <_cor9> =
		      %% Line 1414
		      call 'dets_utils':'make_zeros'
			  (FinalZ)
		  in  %% Line 1414
		      call 'dets_utils':'fwrite'
			  (_cor3, _cor2, _cor9)
	  %% Line 1415
	  <Bin> when 'true' ->
	      %% Line 1416
	      case apply 'seg_file'/5
		       (Bin, _cor7, _cor6, _cor1, []) of
		<{NewAddr,L}> when 'true' ->
		    do  %% Line 1417
			call 'dets_utils':'disk_map_segment'
			    (_cor7, L)
			%% Line 1418
			case call 'dets_utils':'fwrite'
				 (_cor3, _cor2, L) of
			  <'ok'> when 'true' ->
			      %% Line 1419
			      apply 'seg_file'/8
				  (NewAddr, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'seg_file'/5 =
    %% Line 1422
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor4
		-| ['reuse_for_context'] ),_cor3,_cor2,_cor1,_cor0> of
	  <#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
	     #<BSize>(32,1,'integer',['unsigned'|['big']]),
	     #<LSize>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Addr,SS,SizeT,L> when 'true' ->
	      %% Line 1423
	      apply 'seg_file_item'/8
		  (T, Addr, SS, SizeT, L, Slot, BSize, LSize)
	  %% Line 1424
	  <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),
	      #<BSize>(32,1,'integer',['unsigned'|['big']]),
	      #<LSize>(8,1,'integer',['unsigned'|['big']])}#|T],Addr,SS,SizeT,L> when 'true' ->
	      %% Line 1425
	      apply 'seg_file_item'/8
		  (T, Addr, SS, SizeT, L, Slot, BSize, LSize)
	  %% Line 1426
	  <[],Addr,_X_SS,_X_SizeT,L> when 'true' ->
	      let <_cor5> =
		  %% Line 1427
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 1427
		  {Addr,_cor5}
	  %% Line 1428
	  <#{}#,Addr,_X_SS,_X_SizeT,L> when 'true' ->
	      let <_cor6> =
		  %% Line 1429
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 1429
		  {Addr,_cor6}
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor11)
		    ( primop 'match_fail'
			  ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		      -| [{'function_name',{'seg_file',5}}] )
	    -| ['compiler_generated'] )
	end
'seg_file_item'/8 =
    %% Line 1431
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 1435
	    call 'erlang':'*'
		(8, _cor2)
	in  let <SlotPos> =
		%% Line 1435
		call 'erlang':'+'
		    (_cor5, _cor9)
	    in  let <NoZeros> =
		    %% Line 1436
		    call 'erlang':'-'
			(SlotPos, _cor6)
		in  let <PSize> =
			%% Line 1437
			call 'erlang':'+'
			    (NoZeros, 8)
		    in  let <_cor14> =
			    %% Line 1438
			    call 'erlang':'-'
				(_cor0, 1)
			in  let <Inc> =
				%% Line 1438
				call 'erlang':'bsl'
				    (1, _cor14)
			    in  let <_cor16> =
				    %% Line 1439
				    call 'ets':'update_counter'
					(_cor4, _cor0, Inc)
				in  let <CollP> =
					%% Line 1439
					call 'erlang':'-'
					    (_cor16, Inc)
				    in  let <_cor20> =
					    %% Line 1440
					    case <> of
					      %% Line 1441
					      <>
						  when call 'erlang':'=:='
							(NoZeros,
							 0) ->
						  %% Line 1442
						  #{#<_cor1>(32,1,'integer',['unsigned'|['big']]),
						    #<CollP>(32,1,'integer',['unsigned'|['big']])}#
					      %% Line 1443
					      <>
						  when call 'erlang':'>'
							(NoZeros,
							 100) ->
						  let <_cor18> =
						      %% Line 1444
						      call 'dets_utils':'make_zeros'
							  (NoZeros)
						  in  let <_cor19> =
							  %% Line 1445
							  #{#<_cor1>(32,1,'integer',['unsigned'|['big']]),
							    #<CollP>(32,1,'integer',['unsigned'|['big']])}#
						      in  %% Line 1444
							  [_cor18|_cor19]
					      %% Line 1446
					      <> when 'true' ->
						  %% Line 1447
						  #{#<0>(NoZeros,8,'integer',['unsigned'|['big']]),
						    #<_cor1>(32,1,'integer',['unsigned'|['big']]),
						    #<CollP>(32,1,'integer',['unsigned'|['big']])}#
					    end
					in  let <_cor22> =
						%% Line 1449
						call 'erlang':'+'
						    (_cor6, PSize)
					    in  %% Line 1449
						apply 'seg_file'/5
						    (_cor7, _cor22, _cor5, _cor4, [_cor20|_cor3])
'temp_file'/3 =
    %% Line 1451
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1452
	( case _cor2 of
	    ( <( {'head',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec43,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <TmpName> =
		      call 'lists':'concat'
			  ([_rec43|['.'|[_cor0|[]]]])
		  in  %% Line 1453
		      case call 'dets_utils':'open'
			       (TmpName, ['raw'|['binary'|['write']]]) of
			<{'ok',Fd}> when 'true' ->
			    %% Line 1455
			    case call 'ets':'insert'
				     (_cor1, {_cor0,0,{TmpName,Fd},0}) of
			      <'true'> when 'true' ->
				  %% Line 1456
				  {TmpName,Fd}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor41> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fsck_input'/4 =
    %% Line 1459
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1460
	( case _cor0 of
	    ( <( {'fileheader',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_rec44,_cor48,_cor49,_cor50,_cor51,_cor52}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor17> =
		      case _rec44 of
			%% Line 1461
			<'true'>
			    when ( call 'erlang':'is_integer'
				    (_cor45)
				-| ['compiler_generated'] ) ->
			    let <_cor14> =
				( case _cor45 of
				    ( <( ( NoColls
					   -| ['compiler_generated'] ) = ( 'undefined'
									   -| ['compiler_generated'] )
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  ( NoColls
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( NoColls
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  ( apply ( 'max_objsize'/2
						    -| ['compiler_generated'] )
						(( NoColls
						   -| ['compiler_generated'] ), ( 0
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 1462
				call 'erlang':'bsl'
				    (1, _cor14)
			%% Line 1463
			<_cor76> when 'true' ->
			    %% Line 1466
			    case call 'file':'position'
				     (_cor2, 'eof') of
			      %% Line 1467
			      <{'ok',Pos}> when 'true' ->
				  %% Line 1468
				  Pos
			      %% Line 1469
			      <_cor77> when 'true' ->
				  4294967296
			    end
		      end
		  in  let <MaxSz> =
			  %% Line 1473
			  call 'erlang':'max'
			      (_cor17, 8192)
		      in  let <State0> =
			      %% Line 1474
			      apply 'fsck_read'/4
				  (1336, _cor2, [], 0)
			  in  %% Line 1475
			      apply 'fsck_input'/5
				  (_cor3, State0, _cor2, MaxSz, _cor1)
	      -| ['compiler_generated'] )
	    ( <_cor53> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','fileheader'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fsck_input'/5 =
    %% Line 1477
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1478
	( fun (_cor14) ->
	      case _cor14 of
		<'close'> when 'true' ->
		    %% Line 1479
		    'ok'
		%% Line 1480
		<'read'> when 'true' ->
		    %% Line 1481
		    case _cor3 of
		      %% Line 1482
		      <'done'> when 'true' ->
			  %% Line 1483
			  'end_of_input'
		      %% Line 1484
		      <{'done',L,_X_Seq}> when 'true' ->
			  let <R> =
			      %% Line 1485
			      apply 'count_input'/3
				  (_cor4, _cor0, L)
			  in  let <_cor6> =
				  %% Line 1486
				  apply 'fsck_input'/5
				      (_cor4, 'done', _cor2, _cor1, _cor0)
			      in  %% Line 1486
				  {R,_cor6}
		      %% Line 1487
		      <{'cont',L,Bin,Pos,Seq}> when 'true' ->
			  let <R> =
			      %% Line 1488
			      apply 'count_input'/3
				  (_cor4, _cor0, L)
			  in  %% Line 1489
			      ( case _cor4 of
				  ( <( {'head',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec46,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
				       -| ['compiler_generated'] )> when 'true' ->
					let <FR> =
					    apply 'fsck_objs'/5
						(Bin, _rec46, _cor4, [], Seq)
					in  let <NewState> =
						%% Line 1490
						apply 'fsck_read'/5
						    (FR, Pos, _cor2, _cor1, _cor4)
					    in  let <_cor12> =
						    %% Line 1491
						    apply 'fsck_input'/5
							(_cor4, NewState, _cor2, _cor1, _cor0)
						in  %% Line 1491
						    {R,_cor12}
				    -| ['compiler_generated'] )
				  ( <_cor51> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor13})
			-| ['compiler_generated'] )
		    end
		( <_cor15> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor15})
			-| [{'function_name',{'-fsck_input/5-fun-0-',1}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-fsck_input/5-fun-0-'}}] )
'count_input'/3 =
    %% Line 1496
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Head = {'head',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42},Cntrs,L>
	      when call 'erlang':'=:='
		    (_cor39,
		     8) ->
	      %% Line 1497
	      apply 'count_input1'/3
		  (Cntrs, L, [])
	  %% Line 1498
	  <_X_Head,_X_Cntrs,L> when 'true' ->
	      %% Line 1499
	      call 'lists':'reverse'
		  (L)
	end
'count_input1'/3 =
    %% Line 1501
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Cntrs,[[LogSz|B]|Ts],L> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 1502
		      call 'ets':'update_counter'
			  (Cntrs, LogSz, 1)
	      in  do  %% Line 1502
		      case _cor3 of
			%% Line 1503
			<N>
			    when call 'erlang':'is_integer'
				  (_cor3) ->
			    'ok'
			%% Line 1504
			<_X_Badarg> when 'true' ->
			    case call 'ets':'insert'
				     (Cntrs, {LogSz,1}) of
			      <'true'> when 'true' ->
				  'ok'
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
		      end
		      %% Line 1506
		      apply 'count_input1'/3
			  (Cntrs, Ts, [B|L])
	  %% Line 1507
	  <_X_Cntrs,[],L> when 'true' ->
	      %% Line 1508
	      L
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'count_input1',3}}] )
	    -| ['compiler_generated'] )
	end
'fsck_read'/4 =
    %% Line 1510
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1511
	case call 'file':'position'
		 (_cor2, _cor3) of
	  %% Line 1512
	  <{'ok',_cor9}> when 'true' ->
	      %% Line 1513
	      apply 'read_more_bytes'/6
		  ([], 0, _cor3, _cor2, _cor1, _cor0)
	  %% Line 1514
	  <_X_Error> when 'true' ->
	      %% Line 1515
	      {'done',_cor1,_cor0}
	end
'fsck_read'/5 =
    %% Line 1518
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'more',Bin,Sz,L,Seq},Pos,F,MaxSz,Head>
	      when call 'erlang':'>'
		    (Sz,
		     MaxSz) ->
	      %% Line 1519
	      ( case Head of
		  ( <( {'head',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_rec47,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		       -| ['compiler_generated'] )> when 'true' ->
			let <FR> =
			    %% Line 1582
			    ( case Bin of
				%% Line 1583
				( <( #{#<_fol1386>(16,( 8
							-| ['compiler_generated'] ),( 'binary'
										      -| ['compiler_generated'] ),( ['unsigned'|['big']]
														    -| ['compiler_generated'] )),
				       #<( Tail
					   -| ['compiler_generated'] )>(( 'all'
									  -| ['compiler_generated'] ),( 8
													-| ['compiler_generated'] ),( 'binary'
																      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																				    -| ['compiler_generated'] ))}#
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 1584
				      ( apply ( 'fsck_objs'/5
						-| ['compiler_generated'] )
					    (( Tail
					       -| ['compiler_generated'] ), _rec47, Head, L, Seq)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1585
				( <_fol1387>
				      when ( try
					      ( let <_fol1388> =
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'byte_size'
											   -| ['compiler_generated'] )
							  (Bin)
						      -| ['compiler_generated'] )
						in  ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '<'
											   -| ['compiler_generated'] )
							  (_fol1388, 16)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  of <( Try
						-| ['compiler_generated'] )> ->
					      ( Try
						-| ['compiler_generated'] )
					  catch <( T
						   -| ['compiler_generated'] ),( R
										 -| ['compiler_generated'] )> ->
					      ( 'false'
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] ) ->
				      ( let <_cor7> =
					    %% Line 1586
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'byte_size'
										   -| ['compiler_generated'] )
						  (Bin)
					      -| ['compiler_generated'] )
					in  ( let <_cor8> =
						  %% Line 1586
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( '-'
											 -| ['compiler_generated'] )
							(16, ( _cor7
							       -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  %% Line 1586
						  ( {( 'new'
						       -| ['compiler_generated'] ),( _cor8
										     -| ['compiler_generated'] ),L,Seq}
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor9
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'case_clause'
						  -| ['compiler_generated'] ),( _cor9
										-| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 1520
			    apply 'fsck_read'/5
				(FR, Pos, F, MaxSz, Head)
		    -| ['compiler_generated'] )
		  ( <_cor44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1521
	  <{'more',Bin,Sz,L,Seq},Pos,F,_X_MaxSz,_X_Head> when 'true' ->
	      %% Line 1522
	      apply 'read_more_bytes'/6
		  (Bin, Sz, Pos, F, L, Seq)
	  %% Line 1523
	  <{'new',Skip,L,Seq},Pos,F,_X_MaxSz,_X_Head> when 'true' ->
	      let <NewPos> =
		  %% Line 1524
		  call 'erlang':'+'
		      (Pos, Skip)
	      in  %% Line 1525
		  apply 'fsck_read'/4
		      (NewPos, F, L, Seq)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'fsck_read',5}}] )
	    -| ['compiler_generated'] )
	end
'read_more_bytes'/6 =
    %% Line 1527
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1528
	    case <> of
	      %% Line 1529
	      <>
		  when call 'erlang':'<'
			(_cor4,
			 8192) ->
		  8192
	      %% Line 1530
	      <> when 'true' ->
		  _cor4
	    end
	in  %% Line 1532
	    case call 'dets_utils':'read_n'
		     (_cor2, _cor6) of
	      %% Line 1533
	      <'eof'> when 'true' ->
		  %% Line 1534
		  {'done',_cor1,_cor0}
	      %% Line 1535
	      <Bin> when 'true' ->
		  let <_cor8> =
		      %% Line 1536
		      call 'erlang':'byte_size'
			  (Bin)
		  in  let <NewPos> =
			  %% Line 1536
			  call 'erlang':'+'
			      (_cor3, _cor8)
		      in  let <_cor10> =
			      %% Line 1537
			      call 'erlang':'list_to_binary'
				  ([_cor5|[Bin|[]]])
			  in  %% Line 1537
			      {'cont',_cor1,_cor10,NewPos,_cor0}
	    end
'fsck_objs'/5 =
    %% Line 1540
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bin = #{#<Sz>(32,1,'integer',['unsigned'|['big']]),
		   #<Status>(32,1,'integer',['unsigned'|['big']]),
		   #<Tail>('all',8,'binary',['unsigned'|['big']])}#,Kp,Head,L,Seq> when 'true' ->
	      %% Line 1541
	      case <> of
		%% Line 1542
		<>
		    when call 'erlang':'=:='
			  (Status,
			   305419896) ->
		    let <Sz1> =
			%% Line 1543
			call 'erlang':'-'
			    (Sz, 8)
		    in  %% Line 1544
			case Tail of
			  %% Line 1545
			  <#{#<BinTerm>(Sz1,8,'binary',['unsigned'|['big']]),
			     #<Tail2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      let <_cor6> =
				  catch
				      %% Line 1546
				      apply 'bin2keybins'/2
					  (BinTerm, Head)
			      in  %% Line 1546
				  case _cor6 of
				    %% Line 1547
				    <{'EXIT',_X_Reason}> when 'true' ->
					%% Line 1582
					( case Bin of
					    %% Line 1583
					    ( <( #{#<( _cor16
						       -| ['compiler_generated'] )>(16,( 8
											 -| ['compiler_generated'] ),( 'binary'
														       -| ['compiler_generated'] ),( ['unsigned'|['big']]
																		     -| ['compiler_generated'] )),
						   #<( Tail
						       -| ['compiler_generated'] )>(( 'all'
										      -| ['compiler_generated'] ),( 8
														    -| ['compiler_generated'] ),( 'binary'
																		  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						-| ['compiler_generated'] ))}#
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  %% Line 1584
						  ( apply ( 'fsck_objs'/5
							    -| ['compiler_generated'] )
							(( Tail
							   -| ['compiler_generated'] ), Kp, Head, L, Seq)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    %% Line 1585
					    ( <( _cor17
						 -| ['compiler_generated'] )>
						  when ( try
							  ( let <_cor6> =
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'byte_size'
												       -| ['compiler_generated'] )
								      (Bin)
								  -| ['compiler_generated'] )
							    in  ( call ( 'erlang'
									 -| ['compiler_generated'] ):( '<'
												       -| ['compiler_generated'] )
								      (( _cor6
									 -| ['compiler_generated'] ), 16)
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
						      of <( Try
							    -| ['compiler_generated'] )> ->
							  ( Try
							    -| ['compiler_generated'] )
						      catch <( T
							       -| ['compiler_generated'] ),( R
											     -| ['compiler_generated'] )> ->
							  ( 'false'
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] ) ->
						  ( let <_cor7> =
							%% Line 1586
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'byte_size'
											       -| ['compiler_generated'] )
							      (Bin)
							  -| ['compiler_generated'] )
						    in  ( let <_cor8> =
							      %% Line 1586
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( '-'
												     -| ['compiler_generated'] )
								    (16, ( _cor7
									   -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  in  %% Line 1586
							      ( {( 'new'
								   -| ['compiler_generated'] ),( _cor8
												 -| ['compiler_generated'] ),L,Seq}
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _cor9
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( primop ( 'match_fail'
							     -| ['compiler_generated'] )
							(( {( 'case_clause'
							      -| ['compiler_generated'] ),( _cor9
											    -| ['compiler_generated'] )}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 1550
				    <BOs> when 'true' ->
					%% Line 1551
					case apply 'make_objects'/5
						 (BOs, Seq, Kp, Head, L) of
					  <{NL,NSeq}> when 'true' ->
					      ( let <_fol1412> =
						    %% Line 2500
						    ( call ( 'dets_utils'
							     -| ['compiler_generated'] ):( 'log2'
											   -| ['compiler_generated'] )
							  (Sz)
						      -| ['compiler_generated'] )
						in  let <_cor8> =
							%% Line 2500
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '+'
											       -| ['compiler_generated'] )
							      (( 1
								 -| ['compiler_generated'] ), _fol1412)
							  -| ['compiler_generated'] )
						    in  let <_cor9> =
							    %% Line 1552
							    call 'erlang':'-'
								(_cor8, 1)
							in  let <_cor10> =
								%% Line 1552
								call 'erlang':'bsl'
								    (1, _cor9)
							    in  let <Skip> =
								    %% Line 1552
								    call 'erlang':'-'
									(_cor10, Sz)
								in  %% Line 1582
								    ( case Tail2 of
									%% Line 1583
									( <( #{#<( _cor16
										   -| ['compiler_generated'] )>(Skip,( 8
														       -| ['compiler_generated'] ),( 'binary'
																		     -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						   -| ['compiler_generated'] )),
									       #<( Tail
										   -| ['compiler_generated'] )>(( 'all'
														  -| ['compiler_generated'] ),( 8
																		-| ['compiler_generated'] ),( 'binary'
																					      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																									    -| ['compiler_generated'] ))}#
									     -| ['compiler_generated'] )> when ( 'true'
														 -| ['compiler_generated'] ) ->
									      %% Line 1584
									      ( apply ( 'fsck_objs'/5
											-| ['compiler_generated'] )
										    (( Tail
										       -| ['compiler_generated'] ), Kp, Head, NL, NSeq)
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
									%% Line 1585
									( <( _cor17
									     -| ['compiler_generated'] )>
									      when ( try
										      ( let <_cor6> =
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'byte_size'
																   -| ['compiler_generated'] )
												  (Tail2)
											      -| ['compiler_generated'] )
											in  ( call ( 'erlang'
												     -| ['compiler_generated'] ):( '<'
																   -| ['compiler_generated'] )
												  (( _cor6
												     -| ['compiler_generated'] ), Skip)
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										  of <( Try
											-| ['compiler_generated'] )> ->
										      ( Try
											-| ['compiler_generated'] )
										  catch <( T
											   -| ['compiler_generated'] ),( R
															 -| ['compiler_generated'] )> ->
										      ( 'false'
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] ) ->
									      ( let <_cor7> =
										    %% Line 1586
										    ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'byte_size'
															   -| ['compiler_generated'] )
											  (Tail2)
										      -| ['compiler_generated'] )
										in  ( let <_cor8> =
											  %% Line 1586
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( '-'
																 -| ['compiler_generated'] )
												(Skip, ( _cor7
													 -| ['compiler_generated'] ))
											    -| ['compiler_generated'] )
										      in  %% Line 1586
											  ( {( 'new'
											       -| ['compiler_generated'] ),( _cor8
															     -| ['compiler_generated'] ),NL,NSeq}
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
									( <( _cor9
									     -| ['compiler_generated'] )> when ( 'true'
														 -| ['compiler_generated'] ) ->
									      ( primop ( 'match_fail'
											 -| ['compiler_generated'] )
										    (( {( 'case_clause'
											  -| ['compiler_generated'] ),( _cor9
															-| ['compiler_generated'] )}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor7})
					    -| ['compiler_generated'] )
					end
				  end
			  %% Line 1555
			  <_cor20>
			      when try
				    let <_cor13> =
					call 'erlang':'byte_size'
					    (Tail)
				    in  call 'erlang':'<'
					    (_cor13, Sz1)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 1556
			      {'more',Bin,Sz,L,Seq}
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		%% Line 1558
		<> when 'true' ->
		    %% Line 1582
		    ( case Bin of
			%% Line 1583
			( <( #{#<( _cor16
				   -| ['compiler_generated'] )>(16,( 8
								     -| ['compiler_generated'] ),( 'binary'
												   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																 -| ['compiler_generated'] )),
			       #<( Tail
				   -| ['compiler_generated'] )>(( 'all'
								  -| ['compiler_generated'] ),( 8
												-| ['compiler_generated'] ),( 'binary'
															      -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			    -| ['compiler_generated'] ))}#
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      %% Line 1584
			      ( apply ( 'fsck_objs'/5
					-| ['compiler_generated'] )
				    (( Tail
				       -| ['compiler_generated'] ), Kp, Head, L, Seq)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1585
			( <( _cor17
			     -| ['compiler_generated'] )>
			      when ( try
				      ( let <_cor6> =
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'byte_size'
										   -| ['compiler_generated'] )
						  (Bin)
					      -| ['compiler_generated'] )
					in  ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '<'
										   -| ['compiler_generated'] )
						  (( _cor6
						     -| ['compiler_generated'] ), 16)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  of <( Try
					-| ['compiler_generated'] )> ->
				      ( Try
					-| ['compiler_generated'] )
				  catch <( T
					   -| ['compiler_generated'] ),( R
									 -| ['compiler_generated'] )> ->
				      ( 'false'
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] ) ->
			      ( let <_cor7> =
				    %% Line 1586
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'byte_size'
									   -| ['compiler_generated'] )
					  (Bin)
				      -| ['compiler_generated'] )
				in  ( let <_cor8> =
					  %% Line 1586
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '-'
										 -| ['compiler_generated'] )
						(16, ( _cor7
						       -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  %% Line 1586
					  ( {( 'new'
					       -| ['compiler_generated'] ),( _cor8
									     -| ['compiler_generated'] ),L,Seq}
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <( _cor9
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'case_clause'
					  -| ['compiler_generated'] ),( _cor9
									-| ['compiler_generated'] )}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 1561
	  <Bin,_X_Kp,_X_Head,L,Seq> when 'true' ->
	      %% Line 1562
	      {'more',Bin,0,L,Seq}
	end
'make_objects'/5 =
    %% Line 1564
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{K,BT}|Os],Seq,Kp,Head = {'head',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54},L>
	      when call 'erlang':'=:='
		    (_cor51,
		     8) ->
	      let <_cor11> =
		  %% Line 1565
		  call 'erlang':'byte_size'
		      (BT)
	      in  let <_cor12> =
		      %% Line 1565
		      call 'erlang':'+'
			  (_cor11, 12)
		  in  let <LogSz> =
			  %% Line 1565
			  call 'dets_v8':'sz2pos'
			      (_cor12)
		      in  let <Slot> =
			      %% Line 1566
			      call 'dets_v8':'db_hash'
				  (K, Head)
			  in  let <_cor15> =
				  %% Line 1567
				  #{#<Slot>(32,1,'integer',['unsigned'|['big']]),
				    #<LogSz>(8,1,'integer',['unsigned'|['big']]),
				    #<BT>('all',8,'binary',['unsigned'|['big']])}#
			      in  let <Obj> =
				      %% Line 1567
				      [LogSz|_cor15]
				  in  %% Line 1568
				      apply 'make_objects'/5
					  (Os, Seq, Kp, Head, [Obj|L])
	  %% Line 1569
	  <[{K,BT}|Os],Seq,Kp,Head,L> when 'true' ->
	      ( let <Slot> =
		    %% Line 1577
		    ( apply ( 'db_hash'/2
			      -| ['compiler_generated'] )
			  (K, Head)
		      -| ['compiler_generated'] )
		in  let <Obj> =
			%% Line 1578
			( #{#<( Slot
				-| ['compiler_generated'] )>(( 32
							       -| ['compiler_generated'] ),( 1
											     -| ['compiler_generated'] ),( 'integer'
															   -| ['compiler_generated'] ),( ['unsigned'|['big']]
																			 -| ['compiler_generated'] )),
			    #<Seq>(( 32
				     -| ['compiler_generated'] ),( 1
								   -| ['compiler_generated'] ),( 'integer'
												 -| ['compiler_generated'] ),( ['unsigned'|['big']]
															       -| ['compiler_generated'] )),
			    #<BT>(( 'all'
				    -| ['compiler_generated'] ),( 8
								  -| ['compiler_generated'] ),( 'binary'
												-| ['compiler_generated'] ),( ['unsigned'|['big']]
															      -| ['compiler_generated'] ))}#
			  -| ['compiler_generated'] )
		    in  let <_cor18> =
			    %% Line 1571
			    call 'erlang':'+'
				(Seq, 1)
			in  %% Line 1571
			    apply 'make_objects'/5
				(Os, _cor18, Kp, Head, [Obj|L])
		-| ['compiler_generated'] )
	  %% Line 1572
	  <[],Seq,_X_Kp,_X_Head,L> when 'true' ->
	      %% Line 1573
	      {L,Seq}
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'make_objects',5}}] )
	    -| ['compiler_generated'] )
	end
'make_object'/4 =
    %% Line 1576
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Slot> =
	    %% Line 1577
	    apply 'db_hash'/2
		(_cor2, _cor3)
	in  %% Line 1578
	    #{#<Slot>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor0>('all',8,'binary',['unsigned'|['big']])}#
'skip_bytes'/6 =
    %% Line 1581
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1582
	case _cor5 of
	  %% Line 1583
	  <#{#<_cor16>(_cor4,8,'binary',['unsigned'|['big']]),
	     #<Tail>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1584
	      apply 'fsck_objs'/5
		  (Tail, _cor3, _cor2, _cor1, _cor0)
	  %% Line 1585
	  <_cor17>
	      when try
		    let <_cor6> =
			call 'erlang':'byte_size'
			    (_cor5)
		    in  call 'erlang':'<'
			    (_cor6, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 1586
		  call 'erlang':'byte_size'
		      (_cor5)
	      in  let <_cor8> =
		      %% Line 1586
		      call 'erlang':'-'
			  (_cor4, _cor7)
		  in  %% Line 1586
		      {'new',_cor8,_cor1,_cor0}
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'do_perform_save'/1 =
    %% Line 1594
    fun (_cor0) ->
	%% Line 1595
	case call 'dets_utils':'position'
		 (_cor0, 'eof') of
	  <{'ok',FreeListsPointer}> when 'true' ->
	      %% Line 1596
	      case _cor0 of
		<{'head',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (13, _cor0, FreeListsPointer)
		    in  %% Line 1597
			case apply 'free_lists_to_file'/1
				 (_cor4) of
			  <{FLW,FLSize}> when 'true' ->
			      let <_cor7> =
				  %% Line 1598
				  call 'erlang':'+'
				      (FreeListsPointer, FLSize)
			      in  let <FileSize> =
				      %% Line 1598
				      call 'erlang':'+'
					  (_cor7, 4)
				  in  let <_cor12> =
					  %% Line 1599
					  case _cor69 of
					    %% Line 1600
					    <1336> when 'true' ->
						FileSize
					    %% Line 1601
					    <Base> when 'true' ->
						call 'erlang':'-'
						    (FileSize, Base)
					  end
				      in  let <_cor14> =
					      %% Line 1603
					      #{#<_cor12>(32,1,'integer',['unsigned'|['big']])}#
					  in  %% Line 1603
					      case call 'dets_utils':'write'
						       (_cor4, [FLW|_cor14]) of
						<'ok'> when 'true' ->
						    let <FileHeader> =
							%% Line 1604
							apply 'file_header'/3
							    (_cor4, FreeListsPointer, 1)
						    in  %% Line 1605
							case call 'dets_utils':'debug_mode'
								 () of
							  %% Line 1606
							  <'true'> when 'true' ->
							      %% Line 1607
							      case _cor4 of
								<{'head',_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132}> when 'true' ->
								    let <_cor19> =
									call 'erlang':'setelement'
									    (17, _cor4, 'false')
								    in  let <TmpHead0> =
									    apply 'init_freelist'/2
										(_cor19, 'true')
									in  %% Line 1608
									    case TmpHead0 of
									      <{'head',_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195}> when 'true' ->
										  let <_cor26> =
										      call 'erlang':'setelement'
											  (32, TmpHead0, _cor132)
										  in  let <_cor30> =
											  catch
											      let <_cor29> =
												  %% Line 1610
												  call 'dets_utils':'all_allocated_as_list'
												      (_cor26)
											      in  let <_cor28> =
												      %% Line 1611
												      call 'dets_utils':'all_allocated_as_list'
													  (_cor4)
												  in  %% Line 1611
												      call 'erlang':'=:='
													  (_cor29, _cor28)
										      in  %% Line 1609
											  case _cor30 of
											    %% Line 1613
											    <'true'> when 'true' ->
												%% Line 1614
												call 'dets_utils':'pwrite'
												    (_cor4, [{0,FileHeader}|[]])
											    %% Line 1615
											    <_cor197> when 'true' ->
												%% Line 1619
												( case _cor26 of
												    ( <( {'head',_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_rec54,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227}
													 -| ['compiler_generated'] )> when 'true' ->
													  let <_cor35> =
													      call 'dets_utils':'corrupt_reason'
														  (_cor4, {'failed_to_save_free_lists',FreeListsPointer,_rec54,_cor112})
													  in  call 'erlang':'throw'
														  (_cor35)
												      -| ['compiler_generated'] )
												    ( <_cor228> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {'badrecord','head'}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											  end
									      ( <_cor196> when 'true' ->
										    ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'error'
															   -| ['compiler_generated'] )
											  (( {'badrecord','head'}
											     -| ['compiler_generated'] ))
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									    end
								( <_cor133> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','head'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							  %% Line 1622
							  <'false'> when 'true' ->
							      %% Line 1623
							      call 'dets_utils':'pwrite'
								  (_cor4, [{0,FileHeader}|[]])
							  ( <_cor37> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor37})
							    -| ['compiler_generated'] )
							end
						( <_cor15> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor15})
						  -| ['compiler_generated'] )
					      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor70> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','head'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'file_header'/3 =
    %% Line 1626
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1627
	( case _cor2 of
	    ( <( {'head',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_rec56,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor6> =
		      case _rec56 of
			%% Line 1628
			<'undefined'> when 'true' ->
			    []
			%% Line 1629
			<NC> when 'true' ->
			    NC
		      end
		  in  let <_cor20> =
			  %% Line 1631
			  ( fun (_cor16,_cor15,_cor14) ->
				call 'erlang':'+'
				    (_cor15, _cor14)
			    -| [{'id',{0,0,'-file_header/3-fun-0-'}}] )
		      in  let <_cor12> =
			      %% Line 1633
			      ( fun (_cor10) ->
				    {_cor10,0}
				-| [{'id',{0,0,'-file_header/3-fun-1-'}}] )
			  in  let <_cor9> =
				  %% Line 1633
				  call 'lists':'seq'
				      (4, 31)
			      in  let <_cor13> =
				      %% Line 1633
				      call 'lists':'map'
					  (_cor12, _cor9)
				  in  let <L> =
					  %% Line 1631
					  call 'orddict':'merge'
					      (_cor20, _cor6, _cor13)
				      in  let <_cor24> =
					      %% Line 1634
					      ( fun (_cor22) ->
						    case _cor22 of
						      <{_X_LSz,N}> when 'true' ->
							  #{#<N>(32,1,'integer',['unsigned'|['big']])}#
						      ( <_cor23> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor23})
							      -| [{'function_name',{'-file_header/3-fun-2-',1}}] )
							-| ['compiler_generated'] )
						    end
						-| [{'id',{0,0,'-file_header/3-fun-2-'}}] )
					  in  let <CW> =
						  %% Line 1634
						  call 'lists':'map'
						      (_cor24, L)
					      in  %% Line 1635
						  apply 'file_header'/4
						      (_cor2, _cor1, _cor0, CW)
	      -| ['compiler_generated'] )
	    ( <_cor59> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'file_header'/4 =
    %% Line 1637
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1639
	( case _cor3 of
	    ( <( {'head',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_rec57,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <TypeCode> =
		      call 'dets_utils':'type_to_code'
			  (_rec57)
		  in  let <HashMethod> =
			  %% Line 1641
			  apply 'hash_method_to_code'/1
			      (_cor61)
		      in  let <H1> =
			      %% Line 1642
			      #{#<_cor2>(32,1,'integer',['unsigned'|['big']]),
				#<11259375>(32,1,'integer',['unsigned'|['big']]),
				#<_cor1>(32,1,'integer',['unsigned'|['big']])}#
			  in  let <H2> =
				  %% Line 1643
				  #{#<TypeCode>(32,1,'integer',['unsigned'|['big']]),
				    #<9>(%% Line 1644
					 32,1,'integer',['unsigned'|['big']]),
				    #<_cor46>(%% Line 1645
					      32,1,'integer',['unsigned'|['big']]),
				    #<_cor48>(%% Line 1646
					      32,1,'integer',['unsigned'|['big']]),
				    #<_cor54>(%% Line 1647
					      32,1,'integer',['unsigned'|['big']]),
				    #<_cor50>(%% Line 1648
					      32,1,'integer',['unsigned'|['big']]),
				    #<_cor51>(%% Line 1649
					      32,1,'integer',['unsigned'|['big']]),
				    #<_cor63>(%% Line 1650
					      32,1,'integer',['unsigned'|['big']]),
				    #<_cor64>(%% Line 1651
					      32,1,'integer',['unsigned'|['big']]),
				    #<%% Line 1652
				      HashMethod>(%% Line 1652
						  32,1,'integer',['unsigned'|['big']]),
				    #<_cor53>(%% Line 1653
					      32,1,'integer',['unsigned'|['big']])}#
			      in  let <DigH> =
				      %% Line 1654
				      [H2|_cor0]
				  in  let <_cor34> =
					  %% Line 1655
					  case _cor62 of
					    %% Line 1656
					    <'true'> when 'true' ->
						call 'erlang':'md5'
						    (DigH)
					    %% Line 1657
					    <'false'> when 'true' ->
						#{#<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']])}#
					    ( <_cor33> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor33})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor39> =
					      %% Line 1659
					      case _cor75 of
						%% Line 1660
						<1336> when 'true' ->
						    #{#<0>(8,1,'integer',['unsigned'|['big']]),
						      #<0>(8,1,'integer',['unsigned'|['big']]),
						      #<0>(8,1,'integer',['unsigned'|['big']]),
						      #<0>(8,1,'integer',['unsigned'|['big']])}#
						%% Line 1661
						<FlBase> when 'true' ->
						    #{#<FlBase>(32,1,'integer',['unsigned'|['big']])}#
					      end
					  in  let <_cor41> =
						  %% Line 1663
						  #{#<0>(124,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1663
						  [H1|[DigH|[_cor34|[_cor39|_cor41]]]]
	      -| ['compiler_generated'] )
	    ( <_cor76> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'free_lists_to_file'/1 =
    %% Line 1672
    fun (_cor0) ->
	let <FL> =
	    %% Line 1673
	    call 'dets_utils':'get_freelists'
		(_cor0)
	in  let <_cor2> =
		%% Line 1674
		call 'erlang':'tuple_size'
		    (FL)
	    in  %% Line 1674
		apply 'free_list_to_file'/6
		    (FL, _cor0, 1, _cor2, [], 0)
'free_list_to_file'/6 =
    %% Line 1676
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Ftab,_X_H,Pos,Sz,Ws,WsSz>
	      when call 'erlang':'>'
		    (Pos,
		     Sz) ->
	      let <_cor6> =
		  %% Line 1677
		  call 'erlang':'+'
		      (WsSz, 4)
	      in  let <_cor7> =
		      %% Line 1677
		      call 'erlang':'+'
			  (_cor6, 8)
		  in  %% Line 1677
		      {[Ws|#{#<0>(8,1,'integer',['unsigned'|['big']]),
			     #<0>(8,1,'integer',['unsigned'|['big']]),
			     #<0>(8,1,'integer',['unsigned'|['big']]),
			     #<12>(8,1,'integer',['unsigned'|['big']]),
			     #<3>(8,1,'integer',['unsigned'|['big']]),
			     #<171>(8,1,'integer',['unsigned'|['big']]),
			     #<205>(8,1,'integer',['unsigned'|['big']]),
			     #<239>(8,1,'integer',['unsigned'|['big']]),
			     #<0>(8,1,'integer',['unsigned'|['big']]),
			     #<0>(8,1,'integer',['unsigned'|['big']]),
			     #<48>(8,1,'integer',['unsigned'|['big']]),
			     #<57>(8,1,'integer',['unsigned'|['big']])}#],_cor7}
	  %% Line 1678
	  <Ftab,H,Pos,Sz,Ws,WsSz> when 'true' ->
	      let <F> =
		  %% Line 1680
		  ( fun (_cor30,_cor29,_cor28,_cor27) ->
			case <_cor30,_cor29,_cor28,_cor27> of
			  <N,L,W,S>
			      when call 'erlang':'=:='
				    (N,
				     0) ->
			      {N,L,W,S}
			  %% Line 1681
			  <N,L,W,S> when 'true' ->
			      let <L1,N1,More> =
				  %% Line 1683
				  case <> of
				    %% Line 1684
				    <>
					when call 'erlang':'>'
					      (N,
					       1021) ->
					let <_cor15> =
					    %% Line 1685
					    call 'lists':'sublist'
						(L, 1021)
					in  let <_cor14> =
						%% Line 1686
						call 'erlang':'-'
						    (N, 1021)
					    in  let <_cor13> =
						    %% Line 1686
						    call 'lists':'nthtail'
							(1021, L)
						in  <_cor15,1021,%% Line 1686
								 {_cor14,_cor13}>
				    %% Line 1687
				    <> when 'true' ->
					%% Line 1688
					<L,N,'no_more'>
				  end
			      in  let <_cor18> =
				      %% Line 1690
				      call 'erlang':'*'
					  (N1, 4)
				  in  let <_cor19> =
					  %% Line 1690
					  call 'erlang':'+'
					      (_cor18, 4)
				      in  let <Size> =
					      %% Line 1690
					      call 'erlang':'+'
						  (_cor19, 8)
					  in  let <Header> =
						  %% Line 1691
						  #{#<Size>(32,1,'integer',['unsigned'|['big']]),
						    #<61591023>(32,1,'integer',['unsigned'|['big']]),
						    #<Pos>(32,1,'integer',['unsigned'|['big']])}#
					      in  let <NW> =
						      %% Line 1692
						      [W|[Header|L1]]
						  in  %% Line 1693
						      case More of
							%% Line 1694
							<'no_more'> when 'true' ->
							    let <_cor23> =
								%% Line 1695
								call 'erlang':'+'
								    (S, Size)
							    in  %% Line 1695
								{0,[],NW,_cor23}
							%% Line 1696
							<{NN,NL}> when 'true' ->
							    %% Line 1697
							    case call 'dets_utils':'write'
								     (H, NW) of
							      <'ok'> when 'true' ->
								  let <_cor25> =
								      %% Line 1698
								      call 'erlang':'+'
									  (S, Size)
								  in  %% Line 1698
								      {NN,NL,[],_cor25}
							      ( <_cor24> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor24})
								-| ['compiler_generated'] )
							    end
							( <_cor26> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor26})
							  -| ['compiler_generated'] )
						      end
			end
		    -| [{'id',{0,0,'-free_list_to_file/6-fun-0-'}}] )
	      in  let <_cor36> =
		      %% Line 1701
		      call 'erlang':'element'
			  (Pos, Ftab)
		  in  %% Line 1701
		      case call 'dets_utils':'tree_to_bin'
			       (_cor36, F, 1021, Ws, WsSz) of
			<{NWs,NWsSz}> when 'true' ->
			    let <_cor38> =
				%% Line 1702
				call 'erlang':'+'
				    (Pos, 1)
			    in  %% Line 1702
				apply 'free_list_to_file'/6
				    (Ftab, H, _cor38, Sz, NWs, NWsSz)
			( <_cor37> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor37})
			  -| ['compiler_generated'] )
		      end
	end
'free_lists_from_file'/2 =
    %% Line 1704
    fun (_cor1,_cor0) ->
	%% Line 1705
	( case _cor1 of
	    ( <( {'head',_cor25,_cor26,_cor27,_rec69,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dets_utils':'position'
			   (_rec69, _cor45, _cor0) of
		    <{'ok',_cor87}>
			when call 'erlang':'=:='
			      (_cor87,
			       _cor0) ->
			let <FL> =
			    %% Line 1706
			    call 'dets_utils':'empty_free_lists'
				()
			in  let <_cor9> =
				catch
				    %% Line 1707
				    apply 'bin_to_tree'/6
					([], _cor1, 'start', FL, -1, [])
			    in  %% Line 1707
				case _cor9 of
				  %% Line 1708
				  <{'EXIT',_cor88}> when 'true' ->
				      %% Line 1709
				      call 'erlang':'throw'
					  ({'error',{'bad_freelists',_cor45}})
				  %% Line 1710
				  <Ftab> when 'true' ->
				      let <_cor20> =
					  %% Line 1711
					  call 'erlang':'setelement'
					      (32, _cor1, 1336)
				      in  %% Line 1711
					  call 'erlang':'setelement'
					      (12, _cor20, Ftab)
				end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor55> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bin_to_tree'/6 =
    %% Line 1714
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1715
	case ( _cor5
	       -| ['reuse_for_context'] ) of
	  %% Line 1716
	  <#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),
	     #<61591023>(32,1,'integer',['unsigned'|['big']]),
	     #<12345>(32,1,'integer',['unsigned'|['big']]),
	     #<_cor31>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'=:='
		    (_cor0,
		     []) ->
	      _cor2
	  %% Line 1718
	  <#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),
	     #<61591023>(32,1,'integer',['unsigned'|['big']]),
	     #<12345>(32,1,'integer',['unsigned'|['big']]),
	     #<_cor32>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor6> =
		  %% Line 1719
		  call 'dets_utils':'list_to_tree'
		      (_cor0)
	      in  %% Line 1719
		  call 'erlang':'setelement'
		      (_cor3, _cor2, _cor6)
	  %% Line 1720
	  <#{#<Size>(32,1,'integer',['unsigned'|['big']]),
	     #<61591023>(32,1,'integer',['unsigned'|['big']]),
	     #<Pos>(32,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#>
	      when %% Line 1721
		try
		    let <_cor9> =
			call 'erlang':'byte_size'
			    (T)
		    in  let <_cor7> =
			    call 'erlang':'-'
				(Size, 4)
			in  let <_cor8> =
				call 'erlang':'-'
				    (_cor7, 8)
			    in  call 'erlang':'>='
				    (_cor9, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <NFtab,L1,A1> =
		  %% Line 1723
		  case <> of
		    %% Line 1724
		    <>
			when let <_cor10> =
			      call 'erlang':'=/='
				  (Pos, _cor3)
			  in  let <_cor11> =
				  call 'erlang':'=/='
				      (_cor3, 'start')
			      in  call 'erlang':'and'
				      (_cor10, _cor11) ->
			let <Tree> =
			    %% Line 1725
			    call 'dets_utils':'list_to_tree'
				(_cor0)
			in  let <_cor14> =
				%% Line 1726
				call 'erlang':'setelement'
				    (_cor3, _cor2, Tree)
			    in  <_cor14,%% Line 1726
					[],-1>
		    %% Line 1727
		    <> when 'true' ->
			%% Line 1728
			<_cor2,_cor0,_cor1>
		  end
	      in  let <_cor17> =
		      %% Line 1730
		      call 'erlang':'-'
			  (Size, 8)
		  in  let <_cor18> =
			  %% Line 1730
			  call 'erlang':'-'
			      (_cor17, 4)
		      in  %% Line 1730
			  case apply 'bin_to_tree1'/4
				   (T, _cor18, A1, L1) of
			    <{NL,B2,A2}> when 'true' ->
				%% Line 1731
				apply 'bin_to_tree'/6
				    (B2, _cor4, Pos, NFtab, A2, NL)
			    ( <_cor19> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor19})
			      -| ['compiler_generated'] )
			  end
	  %% Line 1732
	  <_cor33> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (_cor5)
		  %% Line 1733
		  ( case _cor4 of
		      ( <( {'head',_cor34,_cor35,_cor36,_rec74,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Bin2> =
				call 'dets_utils':'read_n'
				    (_rec74, 4096)
			    in  let <_cor23> =
				    %% Line 1734
				    call 'erlang':'list_to_binary'
					([_cor5|Bin2])
				in  %% Line 1734
				    apply 'bin_to_tree'/6
					(_cor23, _cor4, _cor3, _cor2, _cor1, _cor0)
			-| ['compiler_generated'] )
		      ( <_cor64> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','head'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'bin_to_tree1'/4 =
    %% Line 1737
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<A1>(32,1,'integer',['unsigned'|['big']]),
	     #<A2>(32,1,'integer',['unsigned'|['big']]),
	     #<A3>(32,1,'integer',['unsigned'|['big']]),
	     #<A4>(32,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Size,A,L>
	      when %% Line 1738
		try
		    let <_cor4> =
			call 'erlang':'>='
			    (Size, 16)
		    in  let <_cor5> =
			    call 'erlang':'<'
				(A, A1)
			in  let <_cor6> =
				call 'erlang':'<'
				    (A1, A2)
			    in  let <_cor7> =
				    call 'erlang':'<'
					(A2, A3)
				in  let <_cor8> =
					call 'erlang':'<'
					    (A3, A4)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor5, _cor10)
						in  call 'erlang':'and'
							(_cor4, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 1739
		  call 'erlang':'-'
		      (Size, 16)
	      in  %% Line 1739
		  apply 'bin_to_tree1'/4
		      (T, _cor12, A4, [A4|[A3|[A2|[A1|L]]]])
	  %% Line 1740
	  <#{#<A1>(32,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Size,A,L>
	      when let <_cor13> =
		    call 'erlang':'>='
			(Size, 4)
		in  let <_cor14> =
			call 'erlang':'<'
			    (A, A1)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      let <_cor15> =
		  %% Line 1741
		  call 'erlang':'-'
		      (Size, 4)
	      in  %% Line 1741
		  apply 'bin_to_tree1'/4
		      (T, _cor15, A1, [A1|L])
	  %% Line 1742
	  <B,0,A,L> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (B)
		  %% Line 1743
		  {L,B,A}
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor19)
		    ( primop 'match_fail'
			  ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		      -| [{'function_name',{'bin_to_tree1',4}}] )
	    -| ['compiler_generated'] )
	end
'slot_objs'/2 =
    %% Line 1746
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <H = {'head',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41},Slot>
	      when call 'erlang':'>='
		    (Slot,
		     _cor13) ->
	      %% Line 1747
	      '$end_of_table'
	  %% Line 1748
	  <H,Slot> when 'true' ->
	      %% Line 1749
	      case apply 'slot_objects'/2
		       (H, Slot) of
		<{'ok',_X_Pointer,Objects}> when 'true' ->
		    %% Line 1750
		    Objects
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	end
'h'/2 =
    %% Line 1753
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,'phash2'> when 'true' ->
	      call 'erlang':'phash2'
		  (I)
	  %% Line 1754
	  <I,'phash'> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'phash'
		      (I, 67108863)
	      in  call 'erlang':'-'
		      (_cor2, 1)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'h',2}}] )
	    -| ['compiler_generated'] )
	end
'db_hash'/2 =
    %% Line 1756
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,Head = {'head',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}>
	      when call 'erlang':'=:='
		    (_cor54,
		     'phash2') ->
	      let <H> =
		  %% Line 1757
		  call 'erlang':'phash2'
		      (Key)
	      in  let <_cor11> =
		      %% Line 1758
		      call 'erlang':'-'
			  (_cor38, 1)
		  in  let <Hash> =
			  %% Line 1758
			  call 'erlang':'band'
			      (H, _cor11)
		      in  %% Line 1759
			  case <> of
			    %% Line 1760
			    <>
				when call 'erlang':'<'
				      (Hash,
				       _cor45) ->
				let <_cor21> =
				    %% Line 1761
				    call 'erlang':'-'
					(_cor39, 1)
				in  %% Line 1761
				    call 'erlang':'band'
					(H, _cor21)
			    %% Line 1762
			    <> when 'true' ->
				%% Line 1763
				Hash
			  end
	  %% Line 1765
	  <Key,Head> when 'true' ->
	      %% Line 1766
	      ( case Head of
		  ( <( {'head',_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_rec77,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160}
		       -| ['compiler_generated'] )> when 'true' ->
			let <H> =
			    ( case <Key,_rec77> of
				( <( I
				     -| ['compiler_generated'] ),( 'phash2'
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'phash2'
									     -| ['compiler_generated'] )
					    (( I
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( I
				     -| ['compiler_generated'] ),( 'phash'
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
				      ( let <_cor2> =
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'phash'
										   -| ['compiler_generated'] )
						  (( I
						     -| ['compiler_generated'] ), ( 67108863
										    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( call ( 'erlang'
						     -| ['compiler_generated'] ):( '-'
										   -| ['compiler_generated'] )
						  (( _cor2
						     -| ['compiler_generated'] ), ( 1
										    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor4
				     -| ['compiler_generated'] ),( _cor3
								   -| ['compiler_generated'] )> when ( 'true'
												       -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),( _cor4
										-| ['compiler_generated'] ),( _cor3
													      -| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  let <Hash> =
				%% Line 1767
				call 'erlang':'rem'
				    (H, _cor131)
			    in  %% Line 1768
				case <> of
				  %% Line 1769
				  <>
				      when ( call 'erlang':'<'
					      (Hash,
					       _cor138)
					  -| ['compiler_generated'] ) ->
				      %% Line 1770
				      call 'erlang':'rem'
					  (H, _cor132)
				  %% Line 1771
				  <> when 'true' ->
				      %% Line 1772
				      Hash
				end
		    -| ['compiler_generated'] )
		  ( <_cor161> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'hash_method_to_code'/1 =
    %% Line 1775
    fun (_cor0) ->
	case _cor0 of
	  <'phash2'> when 'true' ->
	      1
	  %% Line 1776
	  <'phash'> when 'true' ->
	      0
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'hash_method_to_code',1}}] )
	    -| ['compiler_generated'] )
	end
'code_to_hash_method'/1 =
    %% Line 1778
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      'phash2'
	  %% Line 1779
	  <0> when 'true' ->
	      'phash'
	  %% Line 1780
	  <_cor2> when 'true' ->
	      'undefined'
	end
'no_slots'/1 =
    %% Line 1782
    fun (_cor0) ->
	%% Line 1783
	( case _cor0 of
	    ( <( {'head',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec80,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		 -| ['compiler_generated'] )> when 'true' ->
		  {_rec80,_cor10,_cor26}
	      -| ['compiler_generated'] )
	    ( <_cor38> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'table_parameters'/1 =
    %% Line 1785
    fun (_cor0) ->
	%% Line 1786
	( case _cor0 of
	    ( <( {'head',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_rec83,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec83 of
		    %% Line 1787
		    <'undefined'> when 'true' ->
			%% Line 1788
			'undefined'
		    %% Line 1789
		    <CL> when 'true' ->
			let <_cor7> =
			    %% Line 1790
			    ( fun (_cor4,_cor3) ->
				  case <_cor4,_cor3> of
				    <{_cor69,0},A> when 'true' ->
					A
				    %% Line 1791
				    <E,A> when 'true' ->
					[E|A]
				  end
			      -| [{'id',{0,0,'-table_parameters/1-fun-0-'}}] )
			in  let <NoColls0> =
				%% Line 1790
				call 'lists':'foldl'
				    (_cor7, %% Line 1792
					    [], %% Line 1792
						CL)
			    in  let <NoColls> =
				    %% Line 1793
				    call 'lists':'reverse'
					(NoColls0)
				in  let <_cor33> =
					%% Line 1796
					call 'filename':'basename'
					    (_cor58)
				    in  let <_cor26> =
					    %% Line 1799
					    apply 'hash_method_to_code'/1
						(_cor53)
					in  %% Line 1794
					    {'$hash2',_cor64,%% Line 1795
							     1,_cor33,_cor46,_cor47,_cor26,_cor45,_cor38,_cor40,_cor55,_cor56,_cor42,_cor43,%% Line 1805
																	    NoColls}
		  end
	      -| ['compiler_generated'] )
	    ( <_cor68> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
're_hash'/2 =
    %% Line 1818
    fun (_cor1,_cor0) ->
	let <FromSlotPos> =
	    %% Line 1819
	    apply 'slot_position'/1
		(_cor0)
	in  %% Line 1820
	    ( case _cor1 of
		( <( {'head',_rec96,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor5> =
			  call 'erlang':'+'
			      (_cor0, _rec96)
		      in  let <ToSlotPos> =
			      apply 'slot_position'/1
				  (_cor5)
			  in  let <RSpec> =
				  %% Line 1821
				  [{FromSlotPos,2048}|[]]
			      in  %% Line 1822
				  case call 'dets_utils':'pread'
					   (RSpec, _cor1) of
				    <{'ok',[FromBin|[]]}> when 'true' ->
					%% Line 1823
					apply 'split_bins'/7
					    (FromBin, _cor1, FromSlotPos, ToSlotPos, [], [], 0)
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
		  -| ['compiler_generated'] )
		( <_cor42> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','head'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'split_bins'/7 =
    %% Line 1825
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <#{}#,Head,_X_Pos1,_X_Pos2,_X_ToRead,_X_L,0> when 'true' ->
	      %% Line 1826
	      {Head,'ok'}
	  %% Line 1827
	  <#{}#,Head,Pos1,Pos2,ToRead,L,_X_SoFar> when 'true' ->
	      %% Line 1828
	      apply 're_hash_write'/5
		  (Head, ToRead, L, Pos1, Pos2)
	  %% Line 1829
	  <FB,Head,Pos1,Pos2,ToRead,L,SoFar> when 'true' ->
	      %% Line 1830
	      case FB of
		<#{#<Sz1>(32,1,'integer',['unsigned'|['big']]),
		   #<P1>(32,1,'integer',['unsigned'|['big']]),
		   #<FT>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1831
		    case FB of
		      <#{#<B1>(8,8,'binary',['unsigned'|['big']]),
			 #<_cor28>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <NSoFar> =
			      %% Line 1832
			      call 'erlang':'+'
				  (SoFar, Sz1)
			  in  let <NPos1> =
				  %% Line 1833
				  call 'erlang':'+'
				      (Pos1, 8)
			      in  let <NPos2> =
				      %% Line 1834
				      call 'erlang':'+'
					  (Pos2, 8)
				  in  %% Line 1835
				      case <> of
					%% Line 1836
					<>
					    when let <_cor15> =
						  call 'erlang':'>'
						      (NSoFar, 81920)
					      in  let <_cor16> =
						      call 'erlang':'=/='
							  (ToRead, [])
						  in  call 'erlang':'and'
							  (_cor15, _cor16) ->
					    %% Line 1837
					    case apply 're_hash_write'/5
						     (Head, ToRead, L, Pos1, Pos2) of
					      <{NewHead,'ok'}> when 'true' ->
						  %% Line 1838
						  apply 'split_bins'/7
						      (FB, NewHead, Pos1, Pos2, [], [], 0)
					      ( <_cor17> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor17})
						-| ['compiler_generated'] )
					    end
					%% Line 1839
					<>
					    when call 'erlang':'=:='
						  (Sz1,
						   0) ->
					    let <E> = {%% Line 1840
						 'skip',%% Line 1840
							B1}
					    in  %% Line 1841
						apply 'split_bins'/7
						    (FT, Head, NPos1, NPos2, ToRead, [E|L], NSoFar)
					%% Line 1842
					<> when 'true' ->
					    let <E> =
						%% Line 1843
						{Sz1,P1,B1,Pos1,Pos2}
					    in  let <NewToRead> =
						    %% Line 1844
						    [{P1,Sz1}|ToRead]
						in  %% Line 1845
						    apply 'split_bins'/7
							(FT, Head, NPos1, NPos2, NewToRead, [E|L], NSoFar)
				      end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
're_hash_write'/5 =
    %% Line 1848
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1849
	    apply 'check_pread2_arg'/2
		(_cor3, _cor4)
	    %% Line 1850
	    case call 'dets_utils':'pread'
		     (_cor3, _cor4) of
	      <{'ok',Bins}> when 'true' ->
		  %% Line 1852
		  case apply 're_hash_slots'/7
			   (Bins, _cor2, _cor4, #{#<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']])}#, [], [], []) of
		    <{Head1,BinFS,BinTS,WsB}> when 'true' ->
			let <_cor8> =
			    %% Line 1853
			    call 'erlang':'length'
				(_cor2)
			in  let <_cor10> =
				%% Line 1853
				call 'erlang':'*'
				    (8, _cor8)
			    in  let <WPos1> =
				    %% Line 1853
				    call 'erlang':'-'
					(_cor1, _cor10)
				in  let <_cor12> =
					%% Line 1854
					call 'erlang':'length'
					    (_cor2)
				    in  let <_cor14> =
					    %% Line 1854
					    call 'erlang':'*'
						(8, _cor12)
					in  let <WPos2> =
						%% Line 1854
						call 'erlang':'-'
						    (_cor0, _cor14)
					    in  let <ToWrite> =
						    %% Line 1855
						    [{WPos1,BinFS}|[{WPos2,BinTS}|WsB]]
						in  %% Line 1856
						    call 'dets_utils':'pwrite'
							(Head1, ToWrite)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
're_hash_slots'/7 =
    %% Line 1858
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bins,[{'skip',B1}|L],Head,Z,BinFS,BinTS,WsB> when 'true' ->
	      %% Line 1859
	      apply 're_hash_slots'/7
		  (Bins, L, Head, Z, [B1|BinFS], [Z|BinTS], WsB)
	  %% Line 1860
	  <[FB|Bins],[E|L],Head,Z,BinFS,BinTS,WsB> when 'true' ->
	      %% Line 1861
	      case E of
		<{Sz1,P1,B1,Pos1,Pos2}> when 'true' ->
		    let <_cor8> =
			catch
			    %% Line 1862
			    apply 'per_key'/2
				(Head, FB)
		    in  let <_cor12> =
			    %% Line 1862
			    case _cor8 of
			      %% Line 1863
			      <{'EXIT',_X_Error}> when 'true' ->
				  let <Bad> =
				      %% Line 1864
				      call 'dets_utils':'bad_object'
					  ('re_hash_slots', {FB,E})
				  in  let <_cor10> =
					  %% Line 1865
					  call 'dets_utils':'corrupt_reason'
					      (Head, Bad)
				      in  %% Line 1865
					  call 'erlang':'throw'
					      (_cor10)
			      %% Line 1866
			      <Else> when 'true' ->
				  %% Line 1867
				  Else
			    end
			in  %% Line 1869
			    case apply 're_hash_split'/6
				     (_cor12, Head, [], 0, [], 0) of
			      %% Line 1870
			      <{_X_KL,_X_KSz,[],0}> when 'true' ->
				  %% Line 1871
				  case call 'erlang':'+'
					   (_X_KSz, 8) of
				    <_cor39>
					when call 'erlang':'=:='
					      (_cor39,
					       Sz1) ->
					%% Line 1872
					apply 're_hash_slots'/7
					    (Bins, L, Head, Z, [B1|BinFS], [Z|BinTS], WsB)
				    ( <_cor14> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor14})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1873
			      <{[],0,_X_ML,_X_MSz}> when 'true' ->
				  %% Line 1874
				  case call 'erlang':'+'
					   (_X_MSz, 8) of
				    <_cor40>
					when call 'erlang':'=:='
					      (_cor40,
					       Sz1) ->
					%% Line 1875
					apply 're_hash_slots'/7
					    (Bins, L, Head, Z, [Z|BinFS], [B1|BinTS], WsB)
				    ( <_cor15> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor15})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1876
			      <{KL,KSz,ML,MSz}>
				  when try
					let <_cor16> =
					    call 'erlang':'=/='
						(KL, [])
					in  let <_cor17> =
						call 'erlang':'>'
						    (KSz, 0)
					    in  let <_cor18> =
						    call 'erlang':'=/='
							(ML, [])
						in  let <_cor19> =
							call 'erlang':'>'
							    (MSz, 0)
						    in  let <_cor20> =
							    call 'erlang':'and'
								(_cor18, _cor19)
							in  let <_cor21> =
								call 'erlang':'and'
								    (_cor17, _cor20)
							    in  call 'erlang':'and'
								    (_cor16, _cor21)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 1877
				  case %% Line 1878
				       apply 'updated'/9
					   (Head, P1, Sz1, KSz, Pos1, KL, 'true', 'foo', 'bar') of
				    <{Head1,FS1,Ws1}> when 'true' ->
					%% Line 1879
					case %% Line 1880
					     apply 'updated'/9
						 (Head1, 0, 0, MSz, Pos2, ML, 'true', 'foo', 'bar') of
					  <{NewHead,[{_cor41,Bin2}|[]],Ws2}>
					      when call 'erlang':'=:='
						    (_cor41,
						     Pos2) ->
					      let <_cor25> =
						  %% Line 1881
						  case FS1 of
						    %% Line 1882
						    <[{_cor42,Bin1}|[]]>
							when call 'erlang':'=:='
							      (_cor42,
							       Pos1) ->
							[Bin1|BinFS]
						    %% Line 1883
						    <[]> when 'true' ->
							[B1|BinFS]
						    ( <_cor24> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor24})
						      -| ['compiler_generated'] )
						  end
					      in  let <NewBinTS> =
						      %% Line 1885
						      [Bin2|BinTS]
						  in  let <_cor28> =
							  %% Line 1886
							  call 'erlang':'++'
							      (Ws1, WsB)
						      in  let <NewWsB> =
							      %% Line 1886
							      call 'erlang':'++'
								  (Ws2, _cor28)
							  in  %% Line 1887
							      apply 're_hash_slots'/7
								  (Bins, L, NewHead, Z, _cor25, NewBinTS, NewWsB)
					  ( <_cor23> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor23})
					    -| ['compiler_generated'] )
					end
				    ( <_cor22> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor22})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor30> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor30})
				-| ['compiler_generated'] )
			    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1889
	  <[],[],Head,_X_Z,BinFS,BinTS,WsB> when 'true' ->
	      let <_cor31> =
		  %% Line 1890
		  call 'lists':'reverse'
		      (WsB)
	      in  %% Line 1890
		  {Head,BinFS,BinTS,_cor31}
	  ( <_cor38,_cor37,_cor36,_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36,_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'re_hash_slots',7}}] )
	    -| ['compiler_generated'] )
	end
're_hash_split'/6 =
    %% Line 1892
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E|KeyObjs],Head,KL,KSz,ML,MSz> when 'true' ->
	      %% Line 1893
	      case E of
		<{Key,Sz,Bin,_X_Item,_X_Objs}> when 'true' ->
		    %% Line 1894
		    ( case Head of
			( <( {'head',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_rec97,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor11> =
				  ( case <Key,_rec97> of
				      ( <( I
					   -| ['compiler_generated'] ),( 'phash2'
									 -| ['compiler_generated'] )> when ( 'true'
													     -| ['compiler_generated'] ) ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'phash2'
										   -| ['compiler_generated'] )
						  (( I
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( I
					   -| ['compiler_generated'] ),( 'phash'
									 -| ['compiler_generated'] )> when ( 'true'
													     -| ['compiler_generated'] ) ->
					    ( let <_fol3693> =
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'phash'
											 -| ['compiler_generated'] )
							(( I
							   -| ['compiler_generated'] ), ( 67108863
											  -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( '-'
											 -| ['compiler_generated'] )
							(_fol3693, ( 1
								     -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_fol3694,_fol3695> when ( 'true'
								   -| ['compiler_generated'] ) ->
					    ( primop ( 'match_fail'
						       -| ['compiler_generated'] )
						  (( {( 'function_clause'
							-| ['compiler_generated'] ),_fol3694,_fol3695}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  let <New> =
				      call 'erlang':'rem'
					  (_cor11, _cor30)
				  in  %% Line 1895
				      case <> of
					%% Line 1896
					<>
					    when ( call 'erlang':'>='
						    (New,
						     _cor29)
						-| ['compiler_generated'] ) ->
					    let <_cor19> =
						%% Line 1897
						call 'erlang':'+'
						    (MSz, Sz)
					    in  %% Line 1897
						apply 're_hash_split'/6
						    (KeyObjs, Head, KL, KSz, [Bin|ML], _cor19)
					%% Line 1898
					<> when 'true' ->
					    let <_cor20> =
						%% Line 1899
						call 'erlang':'+'
						    (KSz, Sz)
					    in  %% Line 1899
						apply 're_hash_split'/6
						    (KeyObjs, Head, [Bin|KL], _cor20, ML, MSz)
				      end
			  -| ['compiler_generated'] )
			( <_cor59> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','head'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1901
	  <[],_X_Head,KL,KSz,ML,MSz> when 'true' ->
	      let <_cor22> =
		  %% Line 1902
		  call 'lists':'reverse'
		      (KL)
	      in  let <_cor21> =
		      %% Line 1902
		      call 'lists':'reverse'
			  (ML)
		  in  %% Line 1902
		      {_cor22,KSz,_cor21,MSz}
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'re_hash_split',6}}] )
	    -| ['compiler_generated'] )
	end
'write_cache'/1 =
    %% Line 1905
    fun (_cor0) ->
	%% Line 1906
	( case _cor0 of
	    ( <( {'head',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec99,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1907
		  case call 'dets_utils':'is_empty_cache'
			   (_rec99) of
		    %% Line 1908
		    <'true'> when 'true' ->
			{_cor0,[],[]}
		    %% Line 1909
		    <'false'> when 'true' ->
			%% Line 1910
			case call 'dets_utils':'reset_cache'
				 (_rec99) of
			  <{NewC,MaxInserts,PerKey}> when 'true' ->
			      let <_cor5> =
				  %% Line 1912
				  call 'erlang':'length'
				      (PerKey)
			      in  let <MaxNoInsertedKeys> =
				      %% Line 1912
				      call 'erlang':'min'
					  (MaxInserts, _cor5)
				  in  let <_cor9> =
					  %% Line 1913
					  call 'erlang':'setelement'
					      (22, _cor0, NewC)
				      in  %% Line 1914
					  case apply 'may_grow'/3
						   (_cor9, MaxNoInsertedKeys, 'once') of
					    %% Line 1915
					    <{Head2,'ok'}> when 'true' ->
						%% Line 1916
						apply 'eval_work_list'/2
						    (Head2, PerKey)
					    %% Line 1917
					    <HeadError> when 'true' ->
						%% Line 1918
						call 'erlang':'throw'
						    (HeadError)
					  end
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'may_grow'/3 =
    %% Line 1923
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Head,0,'once'> when 'true' ->
	      %% Line 1925
	      {Head,'ok'}
	  %% Line 1926
	  <Head = {'head',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59},_X_N,_X_How>
	      when call 'erlang':'=/='
		    (_cor44,
		     'false') ->
	      %% Line 1927
	      {Head,'ok'}
	  %% Line 1928
	  <Head = {'head',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,'read',_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89},_X_N,_X_How> when 'true' ->
	      %% Line 1929
	      {Head,'ok'}
	  %% Line 1930
	  <Head = {'head',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120},_X_N,_X_How>
	      when call 'erlang':'>='
		    (_cor92,
		     _cor109) ->
	      %% Line 1931
	      {Head,'ok'}
	  %% Line 1932
	  <Head,N,How> when 'true' ->
	      %% Line 1933
	      ( case Head of
		  ( <( {'head',_cor121,_cor122,_cor123,_cor124,_cor125,_rec101,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor20> =
			    call 'erlang':'+'
				(_rec101, N)
			in  let <_cor21> =
				call 'erlang':'-'
				    (_cor20, _cor123)
			    in  let <Extra> =
				    call 'erlang':'min'
					(512, _cor21)
				in  let <_cor24> =
					catch
					    %% Line 1934
					    apply 'may_grow1'/3
						(Head, Extra, How)
				    in  %% Line 1934
					case _cor24 of
					  %% Line 1935
					  <Error = {'error',_X_Reason}> when 'true' ->
					      %% Line 1936
					      call 'dets_utils':'corrupt'
						  (Head, Error)
					  %% Line 1937
					  <{NewHead,Reply}> when 'true' ->
					      %% Line 1938
					      {NewHead,Reply}
					  ( <_cor25> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor25})
					    -| ['compiler_generated'] )
					end
		    -| ['compiler_generated'] )
		  ( <_cor151> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'may_grow1'/3 =
    %% Line 1941
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Head,Extra,'many_times'>
	      when call 'erlang':'>'
		    (Extra,
		     256) ->
	      let <Reply> =
		  %% Line 1942
		  apply 'grow'/3
		      (Head, 1, 'undefined')
	      in  let <_cor5> =
		      %% Line 1943
		      call 'erlang':'self'
			  ()
		  in  let <_cor4> =
			  %% Line 1943
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 1943
			      call 'erlang':'!'
				  (_cor5, {'$dets_call',_cor4,'may_grow'})
			      %% Line 1944
			      Reply
	  %% Line 1945
	  <Head,Extra,_X_How> when 'true' ->
	      %% Line 1946
	      apply 'grow'/3
		  (Head, Extra, 'undefined')
	end
'grow'/3 =
    %% Line 1949
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Head,Extra,_X_SegZero>
	      when call 'erlang':'=<'
		    (Extra,
		     0) ->
	      %% Line 1950
	      {Head,'ok'}
	  %% Line 1951
	  <Head,Extra,'undefined'> when 'true' ->
	      let <_cor3> =
		  %% Line 1952
		  apply 'seg_zero'/0
		      ()
	      in  %% Line 1952
		  apply 'grow'/3
		      (Head, Extra, _cor3)
	  %% Line 1953
	  <Head = {'head',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67},_X_Extra,_X_SegZero>
	      when call 'erlang':'>='
		    (_cor39,
		     _cor56) ->
	      %% Line 1954
	      {Head,'ok'}
	  %% Line 1955
	  <Head,Extra,SegZero> when 'true' ->
	      %% Line 1956
	      case Head of
		<{'head',M,_cor68,Next,_cor69,_cor70,_cor71,_cor72,N,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}> when 'true' ->
		    let <SegNum> =
			%% Line 1957
			call 'erlang':'div'
			    (Next, 256)
		    in  %% Line 1958
			case apply 'allocate_segment'/3
				 (Head, SegZero, SegNum) of
			  <{Head0,W,Ws1}> when 'true' ->
			      %% Line 1960
			      case call 'dets_utils':'pwrite'
				       (Head0, [W|Ws1]) of
				<{Head1,'ok'}> when 'true' ->
				    %% Line 1962
				    case apply 're_hash'/2
					     (Head1, N) of
				      <{Head2,'ok'}> when 'true' ->
					  let <_cor30> =
					      %% Line 1964
					      case <> of
						%% Line 1965
						<>
						    when try
							  let <_cor16> =
							      call 'erlang':'+'
								  (N, 256)
							  in  call 'erlang':'=:='
								  (_cor16, M)
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false' ->
						    let <_rec103> =
							%% Line 1966
							call 'erlang':'+'
							    (Next, 256)
						    in  let <_rec104> =
							    %% Line 1966
							    call 'erlang':'*'
								(2, M)
							in  let <_rec105> =
								%% Line 1966
								call 'erlang':'*'
								    (4, M)
							    in  %% Line 1966
								case Head2 of
								  <{'head',_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126}> when 'true' ->
								      let <_cor21> =
									  call 'erlang':'setelement'
									      (9, Head2, 0)
								      in  let <_cor22> =
									      call 'erlang':'setelement'
										  (4, _cor21, _rec103)
									  in  let <_cor23> =
										  call 'erlang':'setelement'
										      (3, _cor22, _rec105)
									      in  call 'erlang':'setelement'
										      (2, _cor23, _rec104)
								  ( <_cor127> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','head'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
						%% Line 1967
						<> when 'true' ->
						    let <_rec107> =
							%% Line 1968
							call 'erlang':'+'
							    (N, 256)
						    in  let <_rec108> =
							    %% Line 1968
							    call 'erlang':'+'
								(Next, 256)
							in  %% Line 1968
							    case Head2 of
							      <{'head',_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158}> when 'true' ->
								  let <_cor28> =
								      call 'erlang':'setelement'
									  (9, Head2, _rec107)
								  in  call 'erlang':'setelement'
									  (4, _cor28, _rec108)
							      ( <_cor159> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','head'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
					      end
					  in  %% Line 1970
					      case apply 'hash_invars'/1
						       (_cor30) of
						<'true'> when 'true' ->
						    let <_cor33> =
							%% Line 1971
							call 'erlang':'-'
							    (Extra, 256)
						    in  %% Line 1971
							apply 'grow'/3
							    (_cor30, _cor33, SegZero)
						( <_cor32> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor32})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor15> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor15})
					-| ['compiler_generated'] )
				    end
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor14})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor13})
			    -| ['compiler_generated'] )
			end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	end
'hash_invars'/1 =
    %% Line 1973
    fun (_cor0) ->
	%% Line 1974
	( case _cor0 of
	    ( <( {'head',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec110,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'hash_invars'/5
		      (_rec110, _cor12, _cor14, _cor29, _cor30)
	      -| ['compiler_generated'] )
	    ( <_cor42> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'hash_invars'/5 =
    %% Line 1978
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor29> =
	    %% Line 1979
	    call 'erlang':'band'
		(_cor4, 255)
	in  let <_cor30> =
		%% Line 1979
		call 'erlang':'=:='
		    (_cor29, 0)
	    in  let <_cor26> =
		    %% Line 1979
		    call 'erlang':'band'
			(_cor3, 255)
		in  let <_cor27> =
			%% Line 1979
			call 'erlang':'=:='
			    (_cor26, 0)
		    in  let <_cor31> =
			    %% Line 1979
			    call 'erlang':'and'
				(_cor30, _cor27)
			in  let <_cor23> =
				%% Line 1979
				call 'erlang':'band'
				    (_cor2, 255)
			    in  let <_cor24> =
				    %% Line 1979
				    call 'erlang':'=:='
					(_cor23, 0)
				in  let <_cor32> =
					%% Line 1979
					call 'erlang':'and'
					    (_cor31, _cor24)
				    in  let <_cor20> =
					    %% Line 1979
					    call 'erlang':'band'
						(_cor1, 255)
					in  let <_cor21> =
						%% Line 1979
						call 'erlang':'=:='
						    (_cor20, 0)
					    in  let <_cor33> =
						    %% Line 1979
						    call 'erlang':'and'
							(_cor32, _cor21)
						in  let <_cor17> =
							%% Line 1979
							call 'erlang':'band'
							    (_cor0, 255)
						    in  let <_cor18> =
							    %% Line 1979
							    call 'erlang':'=:='
								(_cor17, 0)
							in  let <_cor34> =
								%% Line 1979
								call 'erlang':'and'
								    (_cor33, _cor18)
							    in  let <_cor15> =
								    %% Line 1980
								    call 'erlang':'=<'
									(0, _cor4)
								in  let <_cor35> =
									%% Line 1980
									call 'erlang':'and'
									    (_cor34, _cor15)
								    in  let <_cor14> =
									    %% Line 1980
									    call 'erlang':'=<'
										(_cor4, _cor3)
									in  let <_cor36> =
										%% Line 1980
										call 'erlang':'and'
										    (_cor35, _cor14)
									    in  let <_cor12> =
										    %% Line 1980
										    call 'erlang':'*'
											(2, _cor2)
										in  let <_cor13> =
											%% Line 1980
											call 'erlang':'=<'
											    (_cor4, _cor12)
										    in  let <_cor37> =
											    %% Line 1980
											    call 'erlang':'and'
												(_cor36, _cor13)
											in  let <_cor11> =
												%% Line 1980
												call 'erlang':'=<'
												    (_cor3, _cor2)
											    in  let <_cor38> =
												    %% Line 1980
												    call 'erlang':'and'
													(_cor37, _cor11)
												in  let <_cor9> =
													%% Line 1981
													call 'erlang':'*'
													    (2, _cor3)
												    in  let <_cor10> =
													    %% Line 1981
													    call 'erlang':'=<'
														(_cor2, _cor9)
													in  let <_cor39> =
														%% Line 1981
														call 'erlang':'and'
														    (_cor38, _cor10)
													    in  let <_cor8> =
														    %% Line 1981
														    call 'erlang':'=<'
															(0, _cor1)
														in  let <_cor40> =
															%% Line 1981
															call 'erlang':'and'
															    (_cor39, _cor8)
														    in  let <_cor7> =
															    %% Line 1981
															    call 'erlang':'=<'
																(_cor1, _cor2)
															in  let <_cor41> =
																%% Line 1981
																call 'erlang':'and'
																    (_cor40, _cor7)
															    in  let <_cor6> =
																    %% Line 1981
																    call 'erlang':'=<'
																	(_cor2, _cor0)
																in  let <_cor42> =
																	%% Line 1981
																	call 'erlang':'and'
																	    (_cor41, _cor6)
																    in  let <_cor5> =
																	    %% Line 1982
																	    call 'erlang':'=<'
																		(_cor1, _cor3)
																	in  %% Line 1982
																	    call 'erlang':'and'
																		(_cor42, _cor5)
'seg_zero'/0 =
    %% Line 1984
    fun () ->
	%% Line 1985
	#{#<0>(2048,8,'integer',['unsigned'|['big']])}#
'find_object'/2 =
    %% Line 1987
    fun (_cor1,_cor0) ->
	%% Line 1988
	( case _cor1 of
	    ( <( {'head',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_rec115,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Key> =
		      call 'erlang':'element'
			  (_rec115, _cor0)
		  in  let <Slot> =
			  %% Line 1989
			  apply 'db_hash'/2
			      (Key, _cor1)
		      in  %% Line 1990
			  apply 'find_object'/3
			      (_cor1, _cor0, Slot)
	      -| ['compiler_generated'] )
	    ( <_cor38> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'find_object'/3 =
    %% Line 1992
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <H = {'head',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45},_X_Obj,Slot>
	      when call 'erlang':'>='
		    (Slot,
		     _cor17) ->
	      %% Line 1993
	      'false'
	  %% Line 1994
	  <H,Obj,Slot> when 'true' ->
	      let <_cor9> =
		  catch
		      %% Line 1995
		      apply 'slot_objects'/2
			  (H, Slot)
	      in  %% Line 1995
		  case _cor9 of
		    %% Line 1996
		    <{'ok',Pointer,Objects}> when 'true' ->
			%% Line 1997
			case call 'lists':'member'
				 (Obj, Objects) of
			  %% Line 1998
			  <'true'> when 'true' ->
			      {'ok',Pointer}
			  %% Line 1999
			  <'false'> when 'true' ->
			      'false'
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    %% Line 2001
		    <_cor46> when 'true' ->
			'false'
		  end
	end
'slot_objects'/2 =
    %% Line 2005
    fun (_cor1,_cor0) ->
	let <SlotPos> =
	    %% Line 2006
	    apply 'slot_position'/1
		(_cor0)
	in  let <MaxSize> =
		%% Line 2507
		( case _cor1 of
		    ( <( _fol4147 = ( {( 'head'
					 -| ['compiler_generated'] ),( _cor10
								       -| ['compiler_generated'] ),( _cor11
												     -| ['compiler_generated'] ),( _cor12
																   -| ['compiler_generated'] ),( _cor13
																				 -| ['compiler_generated'] ),( _cor14
																							       -| ['compiler_generated'] ),( _cor15
																											     -| ['compiler_generated'] ),( _cor16
																															   -| ['compiler_generated'] ),( _cor17
																																			 -| ['compiler_generated'] ),( _cor18
																																						       -| ['compiler_generated'] ),( _cor19
																																										     -| ['compiler_generated'] ),( _cor20
																																														   -| ['compiler_generated'] ),( _cor21
																																																		 -| ['compiler_generated'] ),( _cor22
																																																					       -| ['compiler_generated'] ),( _cor23
																																																									     -| ['compiler_generated'] ),( _cor24
																																																													   -| ['compiler_generated'] ),( _cor25
																																																																	 -| ['compiler_generated'] ),( _cor26
																																																																				       -| ['compiler_generated'] ),( _cor27
																																																																								     -| ['compiler_generated'] ),( _cor28
																																																																												   -| ['compiler_generated'] ),( _cor29
																																																																																 -| ['compiler_generated'] ),( _cor30
																																																																																			       -| ['compiler_generated'] ),( _cor31
																																																																																							     -| ['compiler_generated'] ),( _cor32
																																																																																											   -| ['compiler_generated'] ),( _cor33
																																																																																															 -| ['compiler_generated'] ),( _cor34
																																																																																																		       -| ['compiler_generated'] ),( _cor35
																																																																																																						     -| ['compiler_generated'] ),( _cor36
																																																																																																										   -| ['compiler_generated'] ),( _cor37
																																																																																																														 -| ['compiler_generated'] ),( _cor38
																																																																																																																	       -| ['compiler_generated'] ),( _cor39
																																																																																																																					     -| ['compiler_generated'] ),( _cor40
																																																																																																																									   -| ['compiler_generated'] )}
				      -| ['compiler_generated'] )
			 -| ['compiler_generated'] )>
			  when ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '=:='
								   -| ['compiler_generated'] )
				  (( _cor16
				     -| ['compiler_generated'] ),
				   ( 'undefined'
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] ) ->
			  4294967296
		      -| ['compiler_generated'] )
		    %% Line 2509
		    ( <_fol4148> when ( 'true'
					-| ['compiler_generated'] ) ->
			  %% Line 2510
			  ( case _fol4148 of
			      ( <( {( 'head'
				      -| ['compiler_generated'] ),( _cor41
								    -| ['compiler_generated'] ),( _cor42
												  -| ['compiler_generated'] ),( _cor43
																-| ['compiler_generated'] ),( _cor44
																			      -| ['compiler_generated'] ),( _cor45
																							    -| ['compiler_generated'] ),( _cor46
																											  -| ['compiler_generated'] ),( _rec129
																															-| ['compiler_generated'] ),( _cor47
																																		      -| ['compiler_generated'] ),( _cor48
																																						    -| ['compiler_generated'] ),( _cor49
																																										  -| ['compiler_generated'] ),( _cor50
																																														-| ['compiler_generated'] ),( _cor51
																																																	      -| ['compiler_generated'] ),( _cor52
																																																					    -| ['compiler_generated'] ),( _cor53
																																																									  -| ['compiler_generated'] ),( _cor54
																																																													-| ['compiler_generated'] ),( _cor55
																																																																      -| ['compiler_generated'] ),( _cor56
																																																																				    -| ['compiler_generated'] ),( _cor57
																																																																								  -| ['compiler_generated'] ),( _cor58
																																																																												-| ['compiler_generated'] ),( _cor59
																																																																															      -| ['compiler_generated'] ),( _cor60
																																																																																			    -| ['compiler_generated'] ),( _cor61
																																																																																							  -| ['compiler_generated'] ),( _cor62
																																																																																											-| ['compiler_generated'] ),( _cor63
																																																																																														      -| ['compiler_generated'] ),( _cor64
																																																																																																		    -| ['compiler_generated'] ),( _cor65
																																																																																																						  -| ['compiler_generated'] ),( _cor66
																																																																																																										-| ['compiler_generated'] ),( _cor67
																																																																																																													      -| ['compiler_generated'] ),( _cor68
																																																																																																																	    -| ['compiler_generated'] ),( _cor69
																																																																																																																					  -| ['compiler_generated'] ),( _cor70
																																																																																																																									-| ['compiler_generated'] )}
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'bsl'
									   -| ['compiler_generated'] )
					  (( 1
					     -| ['compiler_generated'] ), ( _rec129
									    -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _cor71
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','head'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    in  %% Line 2008
		case call 'dets_utils':'ipread'
			 (_cor1, SlotPos, MaxSize) of
		  %% Line 2009
		  <{'ok',{BucketSz,Pointer,#{#<_cor16>(32,1,'integer',['unsigned'|['big']]),
					     #<_X_St>(32,1,'integer',['unsigned'|['big']]),
					     #<KeysObjs>('all',8,'binary',['unsigned'|['big']])}#}}>
		      when call 'erlang':'=:='
			    (_cor16,
			     BucketSz) ->
		      let <_cor6> =
			  catch
			      %% Line 2010
			      ( case _cor1 of
				  ( <( {'head',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec116,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'bin2objs'/3
					    (KeysObjs, _rec116, [])
				    -| ['compiler_generated'] )
				  ( <_cor47> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      in  %% Line 2010
			  case _cor6 of
			    %% Line 2011
			    <{'EXIT',_X_Error}> when 'true' ->
				let <Bad> =
				    %% Line 2012
				    call 'dets_utils':'bad_object'
					('slot_objects', %% Line 2013
							 {SlotPos,KeysObjs})
				in  let <_cor8> =
					%% Line 2014
					call 'dets_utils':'corrupt_reason'
					    (_cor1, Bad)
				    in  %% Line 2014
					call 'erlang':'throw'
					    (_cor8)
			    %% Line 2015
			    <Objs>
				when call 'erlang':'is_list'
				      (_cor6) ->
				let <_cor9> =
				    %% Line 2016
				    call 'lists':'reverse'
					(Objs)
				in  %% Line 2016
				    {'ok',Pointer,_cor9}
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
		  %% Line 2018
		  <[]> when 'true' ->
		      %% Line 2019
		      {'ok',0,[]}
		  %% Line 2020
		  <BadRead> when 'true' ->
		      let <Bad> =
			  %% Line 2021
			  call 'dets_utils':'bad_object'
			      ('slot_objects', {SlotPos,BadRead})
		      in  let <_cor12> =
			      %% Line 2022
			      call 'dets_utils':'corrupt_reason'
				  (_cor1, Bad)
			  in  %% Line 2022
			      call 'erlang':'throw'
				  (_cor12)
		end
'eval_work_list'/2 =
    %% Line 2030
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Head,[{Key,[{_X_Seq,{'lookup',Pid}}|[]]}|[]]> when 'true' ->
	      let <_cor2> =
		  %% Line 2031
		  apply 'db_hash'/2
		      (Key, Head)
	      in  let <SlotPos> =
		      %% Line 2031
		      apply 'slot_position'/1
			  (_cor2)
		  in  let <MaxSize> =
			  %% Line 2507
			  ( case Head of
			      ( <( _fol4152 = ( {( 'head'
						   -| ['compiler_generated'] ),( _cor10
										 -| ['compiler_generated'] ),( _cor11
													       -| ['compiler_generated'] ),( _cor12
																	     -| ['compiler_generated'] ),( _cor13
																					   -| ['compiler_generated'] ),( _cor14
																									 -| ['compiler_generated'] ),( _cor15
																												       -| ['compiler_generated'] ),( _cor16
																																     -| ['compiler_generated'] ),( _cor17
																																				   -| ['compiler_generated'] ),( _cor18
																																								 -| ['compiler_generated'] ),( _cor19
																																											       -| ['compiler_generated'] ),( _cor20
																																															     -| ['compiler_generated'] ),( _cor21
																																																			   -| ['compiler_generated'] ),( _cor22
																																																							 -| ['compiler_generated'] ),( _cor23
																																																										       -| ['compiler_generated'] ),( _cor24
																																																														     -| ['compiler_generated'] ),( _cor25
																																																																		   -| ['compiler_generated'] ),( _cor26
																																																																						 -| ['compiler_generated'] ),( _cor27
																																																																									       -| ['compiler_generated'] ),( _cor28
																																																																													     -| ['compiler_generated'] ),( _cor29
																																																																																	   -| ['compiler_generated'] ),( _cor30
																																																																																					 -| ['compiler_generated'] ),( _cor31
																																																																																								       -| ['compiler_generated'] ),( _cor32
																																																																																												     -| ['compiler_generated'] ),( _cor33
																																																																																																   -| ['compiler_generated'] ),( _cor34
																																																																																																				 -| ['compiler_generated'] ),( _cor35
																																																																																																							       -| ['compiler_generated'] ),( _cor36
																																																																																																											     -| ['compiler_generated'] ),( _cor37
																																																																																																															   -| ['compiler_generated'] ),( _cor38
																																																																																																																			 -| ['compiler_generated'] ),( _cor39
																																																																																																																						       -| ['compiler_generated'] ),( _cor40
																																																																																																																										     -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '=:='
									     -| ['compiler_generated'] )
					    (( _cor16
					       -| ['compiler_generated'] ),
					     ( 'undefined'
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    4294967296
				-| ['compiler_generated'] )
			      %% Line 2509
			      ( <_fol4153> when ( 'true'
						  -| ['compiler_generated'] ) ->
				    %% Line 2510
				    ( case _fol4153 of
					( <( {( 'head'
						-| ['compiler_generated'] ),( _cor41
									      -| ['compiler_generated'] ),( _cor42
													    -| ['compiler_generated'] ),( _cor43
																	  -| ['compiler_generated'] ),( _cor44
																					-| ['compiler_generated'] ),( _cor45
																								      -| ['compiler_generated'] ),( _cor46
																												    -| ['compiler_generated'] ),( _rec129
																																  -| ['compiler_generated'] ),( _cor47
																																				-| ['compiler_generated'] ),( _cor48
																																							      -| ['compiler_generated'] ),( _cor49
																																											    -| ['compiler_generated'] ),( _cor50
																																															  -| ['compiler_generated'] ),( _cor51
																																																			-| ['compiler_generated'] ),( _cor52
																																																						      -| ['compiler_generated'] ),( _cor53
																																																										    -| ['compiler_generated'] ),( _cor54
																																																														  -| ['compiler_generated'] ),( _cor55
																																																																		-| ['compiler_generated'] ),( _cor56
																																																																					      -| ['compiler_generated'] ),( _cor57
																																																																									    -| ['compiler_generated'] ),( _cor58
																																																																													  -| ['compiler_generated'] ),( _cor59
																																																																																	-| ['compiler_generated'] ),( _cor60
																																																																																				      -| ['compiler_generated'] ),( _cor61
																																																																																								    -| ['compiler_generated'] ),( _cor62
																																																																																												  -| ['compiler_generated'] ),( _cor63
																																																																																																-| ['compiler_generated'] ),( _cor64
																																																																																																			      -| ['compiler_generated'] ),( _cor65
																																																																																																							    -| ['compiler_generated'] ),( _cor66
																																																																																																											  -| ['compiler_generated'] ),( _cor67
																																																																																																															-| ['compiler_generated'] ),( _cor68
																																																																																																																		      -| ['compiler_generated'] ),( _cor69
																																																																																																																						    -| ['compiler_generated'] ),( _cor70
																																																																																																																										  -| ['compiler_generated'] )}
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'bsl'
										     -| ['compiler_generated'] )
						    (( 1
						       -| ['compiler_generated'] ), ( _rec129
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <( _cor71
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','head'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor17> =
			      %% Line 2033
			      case call 'dets_utils':'ipread'
				       (Head, SlotPos, MaxSize) of
				%% Line 2034
				<{'ok',{_X_BucketSz,_X_Pointer,Bin}}> when 'true' ->
				    let <_cor5> =
					catch
					    %% Line 2035
					    apply 'per_key'/2
						(Head, Bin)
				    in  %% Line 2035
					case _cor5 of
					  %% Line 2036
					  <{'EXIT',_X_Error}> when 'true' ->
					      let <Bad> =
						  %% Line 2037
						  call 'dets_utils':'bad_object'
						      ('eval_work_list', %% Line 2038
									 {SlotPos,Bin})
					      in  let <_cor7> =
						      %% Line 2039
						      call 'dets_utils':'corrupt_reason'
							  (Head, Bad)
						  in  %% Line 2039
						      call 'erlang':'throw'
							  (_cor7)
					  %% Line 2040
					  <KeyObjs>
					      when call 'erlang':'is_list'
						    (_cor5) ->
					      %% Line 2041
					      case call 'dets_utils':'mkeysearch'
						       (Key, 1, KeyObjs) of
						%% Line 2042
						<'false'> when 'true' ->
						    %% Line 2043
						    []
						%% Line 2044
						<{'value',{_cor25,_X_KS,_X_KB,O,Os}}>
						    when call 'erlang':'=:='
							  (_cor25,
							   Key) ->
						    let <_cor8> =
							catch
							    %% Line 2045
							    apply 'binobjs2terms'/1
								(Os)
						    in  %% Line 2045
							case _cor8 of
							  %% Line 2046
							  <{'EXIT',_X_Error}> when 'true' ->
							      let <Bad> =
								  %% Line 2047
								  call 'dets_utils':'bad_object'
								      (%% Line 2048
								       'eval_work_list', %% Line 2049
											 {SlotPos,Bin,KeyObjs})
							      in  let <_cor10> =
								      %% Line 2050
								      call 'dets_utils':'corrupt_reason'
									  (%% Line 2051
									   Head, %% Line 2051
										 Bad)
								  in  %% Line 2050
								      call 'erlang':'throw'
									  (_cor10)
							  %% Line 2052
							  <Terms>
							      when call 'erlang':'is_list'
								    (_cor8) ->
							      %% Line 2053
							      apply 'get_objects'/1
								  ([O|Terms])
							  ( <_cor11> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor11})
							    -| ['compiler_generated'] )
							end
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor12})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor13> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor13})
					    -| ['compiler_generated'] )
					end
				%% Line 2057
				<[]> when 'true' ->
				    %% Line 2058
				    []
				%% Line 2059
				<BadRead> when 'true' ->
				    let <Bad> =
					%% Line 2060
					call 'dets_utils':'bad_object'
					    ('eval_work_list', %% Line 2061
							       {SlotPos,BadRead})
				    in  let <_cor15> =
					    %% Line 2062
					    call 'dets_utils':'corrupt_reason'
						(Head, Bad)
					in  %% Line 2062
					    call 'erlang':'throw'
						(_cor15)
			      end
			  in  %% Line 2064
			      {Head,[{Pid,_cor17}|[]],[]}
	  %% Line 2065
	  <Head,PerKey> when 'true' ->
	      let <SWLs> =
		  %% Line 2066
		  apply 'tag_with_slot'/3
		      (PerKey, Head, [])
	      in  let <P1> =
		      %% Line 2067
		      call 'dets_utils':'family'
			  (SWLs)
		  in  %% Line 2068
		      case apply 'remove_slot_tag'/3
			       (P1, [], []) of
			<{PerSlot,SlotPositions}> when 'true' ->
			    %% Line 2069
			    case call 'dets_utils':'pread'
				     (SlotPositions, Head) of
			      <{'ok',Bins}> when 'true' ->
				  %% Line 2070
				  apply 'read_buckets'/11
				      (PerSlot, SlotPositions, Bins, Head, [], [], [], [], 0, 0, 0)
			      ( <_cor22> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor22})
				-| ['compiler_generated'] )
			    end
			( <_cor21> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor21})
			  -| ['compiler_generated'] )
		      end
	end
'tag_with_slot'/3 =
    %% Line 2072
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[WL = {K,_cor7}|WLs],Head,L> when 'true' ->
	      let <_cor3> =
		  %% Line 2073
		  apply 'db_hash'/2
		      (K, Head)
	      in  %% Line 2073
		  apply 'tag_with_slot'/3
		      (WLs, Head, [{_cor3,WL}|L])
	  %% Line 2074
	  <[],_X_Head,L> when 'true' ->
	      %% Line 2075
	      L
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'tag_with_slot',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_slot_tag'/3 =
    %% Line 2077
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{S,SWLs}|SSWLs],Ls,SPs> when 'true' ->
	      let <_cor4> =
		  %% Line 2078
		  apply 'slot_position'/1
		      (S)
	      in  %% Line 2078
		  apply 'remove_slot_tag'/3
		      (SSWLs, [SWLs|Ls], [{_cor4,8}|SPs])
	  %% Line 2079
	  <[],Ls,SPs> when 'true' ->
	      %% Line 2080
	      {Ls,SPs}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'remove_slot_tag',3}}] )
	    -| ['compiler_generated'] )
	end
'read_buckets'/11 =
    %% Line 2082
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[WLs|SPs],[{P1,_X_8}|Ss],[#{#<_X_Zero>(32,1,'integer',['unsigned'|['big']]),
				       #<P2>(32,1,'integer',['unsigned'|['big']])}#|Bs],Head,%% Line 2083
											     PWLs,%% Line 2083
												  ToRead,%% Line 2083
													 LU,%% Line 2083
													    Ws,%% Line 2083
													       NoObjs,%% Line 2083
														      NoKeys,%% Line 2083
															     SoFar>
	      when %% Line 2083
		call 'erlang':'=:='
		    (P2,
		     0) ->
	      %% Line 2084
	      case %% Line 2085
		   apply 'eval_bucket_keys'/8
		       (WLs, P1, 0, 0, [], Head, Ws, LU) of
		<{NewHead,NLU,NWs,No,KNo}> when 'true' ->
		    let <NewNoObjs> =
			%% Line 2086
			call 'erlang':'+'
			    (No, NoObjs)
		    in  let <NewNoKeys> =
			    %% Line 2087
			    call 'erlang':'+'
				(KNo, NoKeys)
			in  %% Line 2088
			    apply 'read_buckets'/11
				(SPs, Ss, Bs, NewHead, PWLs, ToRead, NLU, NWs, %% Line 2089
									       NewNoObjs, %% Line 2089
											  NewNoKeys, %% Line 2089
												     SoFar)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2090
	  <[WorkLists|SPs],[{P1,_X_8}|Ss],[#{#<Size>(32,1,'integer',['unsigned'|['big']]),
					     #<P2>(32,1,'integer',['unsigned'|['big']])}#|Bs],Head,%% Line 2091
												   PWLs,%% Line 2091
													ToRead,%% Line 2091
													       LU,%% Line 2091
														  Ws,%% Line 2091
														     NoObjs,%% Line 2091
															    NoKeys,%% Line 2091
																   SoFar>
	      when let <_cor16> =
		    %% Line 2092
		    try
			let <_cor15> =
			    call 'erlang':'+'
				(SoFar, Size)
			in  call 'erlang':'<'
				(_cor15, 81920)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor17> =
			%% Line 2092
			call 'erlang':'=:='
			    (ToRead, [])
		    in  %% Line 2092
			call 'erlang':'or'
			    (_cor16, _cor17) ->
	      let <NewToRead> =
		  %% Line 2093
		  [{P2,Size}|ToRead]
	      in  let <NewPWLs> =
		      %% Line 2094
		      [{P2,P1,WorkLists}|PWLs]
		  in  let <NewSoFar> =
			  %% Line 2095
			  call 'erlang':'+'
			      (SoFar, Size)
		      in  %% Line 2096
			  apply 'read_buckets'/11
			      (SPs, Ss, Bs, Head, NewPWLs, NewToRead, LU, Ws, %% Line 2097
									      NoObjs, %% Line 2097
										      NoKeys, %% Line 2097
											      NewSoFar)
	  %% Line 2098
	  <SPs,Ss,Bs,Head,PWLs0,ToRead0,LU,Ws,NoObjs,NoKeys,SoFar>
	      when %% Line 2099
		call 'erlang':'>'
		    (SoFar,
		     0) ->
	      let <PWLs> =
		  %% Line 2103
		  call 'lists':'keysort'
		      (1, PWLs0)
	      in  let <ToRead> =
		      %% Line 2104
		      call 'lists':'keysort'
			  (1, ToRead0)
		  in  do  %% Line 2105
			  apply 'check_pread2_arg'/2
			      (ToRead, Head)
			  %% Line 2106
			  case call 'dets_utils':'pread'
				   (ToRead, Head) of
			    <{'ok',Bins}> when 'true' ->
				let <_cor24> =
				    catch
					%% Line 2107
					apply 'eval_buckets'/7
					    (Bins, PWLs, Head, LU, Ws, 0, 0)
				in  %% Line 2107
				    case _cor24 of
				      %% Line 2108
				      <{'ok',NewHead,NLU,[],0,0}> when 'true' ->
					  %% Line 2109
					  apply 'read_buckets'/11
					      (SPs, Ss, Bs, NewHead, [], [], NLU, [], %% Line 2110
										      NoObjs, %% Line 2110
											      NoKeys, %% Line 2110
												      0)
				      %% Line 2111
				      <{'ok',Head1,NLU,NWs,No,KNo}> when 'true' ->
					  let <NewNoObjs> =
					      %% Line 2112
					      call 'erlang':'+'
						  (NoObjs, No)
					  in  let <NewNoKeys> =
						  %% Line 2113
						  call 'erlang':'+'
						      (NoKeys, KNo)
					      in  let <_cor27> =
						      %% Line 2117
						      call 'lists':'reverse'
							  (NWs)
						  in  %% Line 2117
						      case call 'dets_utils':'pwrite'
							       (Head1, _cor27) of
							<{NewHead,'ok'}> when 'true' ->
							    %% Line 2118
							    apply 'read_buckets'/11
								(SPs, Ss, Bs, NewHead, [], [], NLU, [], %% Line 2119
													NewNoObjs, %% Line 2119
														   NewNoKeys, %% Line 2119
															      0)
							( <_cor28> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor28})
							  -| ['compiler_generated'] )
						      end
				      %% Line 2120
				      <Error> when 'true' ->
					  let <Bad> =
					      %% Line 2121
					      call 'dets_utils':'bad_object'
						  ('read_buckets', {Bins,Error})
					  in  let <_cor30> =
						  %% Line 2122
						  call 'dets_utils':'corrupt_reason'
						      (Head, Bad)
					      in  %% Line 2122
						  call 'erlang':'throw'
						      (_cor30)
				    end
			    ( <_cor23> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor23})
			      -| ['compiler_generated'] )
			  end
	  %% Line 2124
	  <[],[],[],Head,[],[],LU,Ws,NoObjs,NoKeys,0> when 'true' ->
	      %% Line 2125
	      case apply 'update_no_keys'/4
		       (Head, Ws, NoObjs, NoKeys) of
		<{NewHead,NWs}> when 'true' ->
		    let <_cor33> =
			%% Line 2126
			call 'lists':'reverse'
			    (NWs)
		    in  %% Line 2126
			{NewHead,LU,_cor33}
		( <_cor32> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor32})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor44,_cor43,_cor42,_cor41,_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor44,_cor43,_cor42,_cor41,_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34})
		  -| [{'function_name',{'read_buckets',11}}] )
	    -| ['compiler_generated'] )
	end
'eval_buckets'/7 =
    %% Line 2128
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Bin|Bins],[SP|SPs],Head,LU,Ws,NoObjs,NoKeys> when 'true' ->
	      %% Line 2129
	      case SP of
		<{Pos,P1,WLs}> when 'true' ->
		    let <KeyObjs> =
			%% Line 2130
			apply 'per_key'/2
			    (Head, Bin)
		    in  let <_cor9> =
			    %% Line 2132
			    call 'erlang':'byte_size'
				(Bin)
			in  %% Line 2131
			    case %% Line 2132
				 apply 'eval_bucket_keys'/8
				     (WLs, P1, Pos, _cor9, KeyObjs, Head, Ws, LU) of
			      <{NewHead,NLU,NWs,No,KNo}> when 'true' ->
				  let <_cor12> =
				      %% Line 2133
				      call 'erlang':'+'
					  (NoObjs, No)
				  in  let <_cor11> =
					  %% Line 2133
					  call 'erlang':'+'
					      (NoKeys, KNo)
				      in  %% Line 2133
					  apply 'eval_buckets'/7
					      (Bins, SPs, NewHead, NLU, NWs, _cor12, _cor11)
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2134
	  <[],[],Head,LU,Ws,NoObjs,NoKeys> when 'true' ->
	      %% Line 2135
	      {'ok',Head,LU,Ws,NoObjs,NoKeys}
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'eval_buckets',7}}] )
	    -| ['compiler_generated'] )
	end
'eval_bucket_keys'/8 =
    %% Line 2137
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2139
	( case _cor2 of
	    ( <( {'head',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec117,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'eval_slot'/9
			   (_cor7, _cor3, _rec117, _cor0, [], 0, 0, 0, 'false') of
		    <{NLU,Bins,BSize,No,KNo,Ch}> when 'true' ->
			%% Line 2140
			case %% Line 2141
			     apply 'updated'/9
				 (_cor2, _cor5, _cor4, BSize, _cor6, Bins, Ch, No, KNo) of
			  <{NewHead,W1,W2}> when 'true' ->
			      let <_cor12> =
				  %% Line 2142
				  call 'erlang':'++'
				      (W1, _cor1)
			      in  let <_cor13> =
				      %% Line 2142
				      call 'erlang':'++'
					  (W2, _cor12)
				  in  %% Line 2142
				      {NewHead,NLU,_cor13,No,KNo}
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor52> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','head'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'updated'/9 =
    %% Line 2144
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <BinsSize> =
	    %% Line 2145
	    call 'erlang':'+'
		(_cor5, 8)
	in  %% Line 2146
	    case <> of
	      %% Line 2147
	      <>
		  when let <_cor10> =
			call 'erlang':'=:='
			    (_cor7, 0)
		    in  let <_cor11> =
			    call 'erlang':'=:='
				(_cor5, 0)
			in  call 'erlang':'and'
				(_cor10, _cor11) ->
		  %% Line 2148
		  {_cor8,[],[]}
	      %% Line 2149
	      <>
		  when let <_cor12> =
			call 'erlang':'=:='
			    (_cor7, 0)
		    in  let <_cor13> =
			    call 'erlang':'>'
				(_cor5, 0)
			in  call 'erlang':'and'
				(_cor12, _cor13) ->
		  let <_cor14> =
		      %% Line 2504
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( '-'
							     -| ['compiler_generated'] )
			    (BinsSize, ( 1
					 -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  in  %% Line 2150
		      case call 'dets_utils':'alloc'
			       (_cor8, _cor14) of
			<{Head1,NewPos,FPos}> when 'true' ->
			    let <_cor16> =
				%% Line 2151
				call 'erlang':'-'
				    (FPos, 1)
			    in  let <NewHead> =
				    %% Line 2151
				    apply 'one_bucket_added'/2
					(Head1, _cor16)
				in  let <_cor18> =
					%% Line 2152
					#{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),
					  #<305419896>(32,1,'integer',['unsigned'|['big']])}#
				    in  let <W1> =
					    %% Line 2152
					    {NewPos,[_cor18|_cor3]}
					in  let <_cor20> =
						%% Line 2153
						#{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),
						  #<NewPos>(32,1,'integer',['unsigned'|['big']])}#
					    in  let <W2> = {_cor4,_cor20}
						in  %% Line 2154
						    {NewHead,[W2|[]],[W1|[]]}
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor15})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2155
	      <>
		  when let <_cor22> =
			call 'erlang':'=/='
			    (_cor7, 0)
		    in  let <_cor23> =
			    call 'erlang':'=:='
				(_cor5, 0)
			in  call 'erlang':'and'
				(_cor22, _cor23) ->
		  let <_cor24> =
		      %% Line 2504
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( '-'
							     -| ['compiler_generated'] )
			    (_cor6, ( 1
				      -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  in  %% Line 2156
		      case call 'dets_utils':'free'
			       (_cor8, _cor7, _cor24) of
			<{Head1,FPos}> when 'true' ->
			    let <_cor26> =
				%% Line 2157
				call 'erlang':'-'
				    (FPos, 1)
			    in  let <NewHead> =
				    %% Line 2157
				    apply 'one_bucket_removed'/2
					(Head1, _cor26)
				in  let <_cor28> =
					%% Line 2158
					call 'erlang':'+'
					    (_cor7, 4)
				    in  let <W1> = {_cor28,%% Line 2158
						    #{#<3>(8,1,'integer',['unsigned'|['big']]),
						      #<171>(8,1,'integer',['unsigned'|['big']]),
						      #<205>(8,1,'integer',['unsigned'|['big']]),
						      #<239>(8,1,'integer',['unsigned'|['big']])}#}
					in  let <W2> = {_cor4,%% Line 2159
						       #{#<0>(8,1,'integer',['unsigned'|['big']]),
							 #<0>(8,1,'integer',['unsigned'|['big']]),
							 #<0>(8,1,'integer',['unsigned'|['big']]),
							 #<0>(8,1,'integer',['unsigned'|['big']]),
							 #<0>(8,1,'integer',['unsigned'|['big']]),
							 #<0>(8,1,'integer',['unsigned'|['big']]),
							 #<0>(8,1,'integer',['unsigned'|['big']]),
							 #<0>(8,1,'integer',['unsigned'|['big']])}#}
					    in  %% Line 2160
						{NewHead,[W2|[]],[W1|[]]}
			( <_cor25> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor25})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2161
	      <>
		  when try
			let <_cor31> =
			    call 'erlang':'=/='
				(_cor7, 0)
			in  let <_cor32> =
				call 'erlang':'>'
				    (_cor5, 0)
			    in  let <_cor33> =
				    call 'erlang':'=:='
					(_cor2, 'false')
				in  let <_cor34> =
					call 'erlang':'and'
					    (_cor32, _cor33)
				    in  call 'erlang':'and'
					    (_cor31, _cor34)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 2162
		  {_cor8,[],[]}
	      %% Line 2163
	      <>
		  when let <_cor35> =
			call 'erlang':'=/='
			    (_cor7, 0)
		    in  let <_cor36> =
			    call 'erlang':'>'
				(_cor5, 0)
			in  call 'erlang':'and'
				(_cor35, _cor36) ->
		  let <_cor39> =
		      %% Line 2166
		      case <> of
			%% Line 2167
			<>
			    when call 'erlang':'=:='
				  (_cor6,
				   BinsSize) ->
			    'same'
			%% Line 2168
			<> when 'true' ->
			    ( let <_fol4167> =
				  %% Line 2500
				  ( call ( 'dets_utils'
					   -| ['compiler_generated'] ):( 'log2'
									 -| ['compiler_generated'] )
					(_cor6)
				    -| ['compiler_generated'] )
			      in  let <_cor38> =
				      %% Line 2500
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '+'
									     -| ['compiler_generated'] )
					    (( 1
					       -| ['compiler_generated'] ), _fol4167)
					-| ['compiler_generated'] )
				  in  ( let <_fol4170> =
					    %% Line 2500
					    ( call ( 'dets_utils'
						     -| ['compiler_generated'] ):( 'log2'
										   -| ['compiler_generated'] )
						  (BinsSize)
					      -| ['compiler_generated'] )
					in  let <_cor37> =
						%% Line 2500
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '+'
										       -| ['compiler_generated'] )
						      (( 1
							 -| ['compiler_generated'] ), _fol4170)
						  -| ['compiler_generated'] )
					    in  call 'erlang':'=:='
						    (_cor38, _cor37)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		      end
		  in  let <_cor51> =
			  %% Line 2170
			  case <> of
			    %% Line 2171
			    <>
				when ( try
					( case <> of
					    ( <>
						  when ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'is_record'
											   -| ['compiler_generated'] )
							  (_cor8,
							   ( 'head'
							     -| ['compiler_generated'] ),
							   ( 32
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] ) ->
						  let <_cor45> =
						      ( call 'erlang':'element'
							    (17, _cor8)
							-| ['compiler_generated'] )
						  in  ( call 'erlang':'=/='
							    (_cor45, 'false')
							-| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false'
				    -| ['compiler_generated'] ) ->
				let <_cor49> =
				    %% Line 2182
				    call 'erlang':'=/='
					(_cor39, 'false')
				in  let <_cor48> =
					%% Line 2183
					call 'erlang':'=:='
					    (_cor1, 0)
				    in  let <_cor50> =
					    %% Line 2182
					    call 'erlang':'and'
						(_cor49, _cor48)
					in  let <_cor47> =
						%% Line 2183
						call 'erlang':'=:='
						    (_cor0, 0)
					    in  %% Line 2183
						call 'erlang':'and'
						    (_cor50, _cor47)
			    %% Line 2184
			    <> when 'true' ->
				_cor39
			  end
		      in  %% Line 2187
			  case <> of
			    %% Line 2188
			    <>
				when call 'erlang':'=:='
				      (_cor51,
				       'same') ->
				let <_cor53> =
				    %% Line 2189
				    call 'erlang':'+'
					(_cor7, 8)
				in  let <W1> = {_cor53,_cor3}
				    in  %% Line 2190
					{_cor8,[],[W1|[]]}
			    %% Line 2191
			    <>
				when call 'erlang':'=:='
				      (_cor51,
				       'true') ->
				let <_cor55> =
				    %% Line 2192
				    #{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),
				      #<305419896>(32,1,'integer',['unsigned'|['big']])}#
				in  let <W1> =
					%% Line 2192
					{_cor7,[_cor55|_cor3]}
				    in  let <_cor57> =
					    %% Line 2194
					    #{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),
					      #<_cor7>(32,1,'integer',['unsigned'|['big']])}#
					in  let <W2> = {_cor4,_cor57}
					    in  %% Line 2195
						{_cor8,[W2|[]],[W1|[]]}
			    %% Line 2196
			    <> when 'true' ->
				let <_cor59> =
				    %% Line 2504
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( '-'
									   -| ['compiler_generated'] )
					  (_cor6, ( 1
						    -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				in  %% Line 2197
				    case call 'dets_utils':'free'
					     (_cor8, _cor7, _cor59) of
				      <{Head1,FPosF}> when 'true' ->
					  let <_cor61> =
					      %% Line 2504
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '-'
										     -| ['compiler_generated'] )
						    (BinsSize, ( 1
								 -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  %% Line 2198
					      case %% Line 2199
						   call 'dets_utils':'alloc'
						       (Head1, _cor61) of
						<{Head2,NewPos,FPosA}> when 'true' ->
						    let <_cor63> =
							%% Line 2200
							call 'erlang':'-'
							    (FPosA, 1)
						    in  let <Head3> =
							    %% Line 2200
							    apply 'one_bucket_added'/2
								(Head2, _cor63)
							in  let <_cor65> =
								%% Line 2201
								call 'erlang':'-'
								    (FPosF, 1)
							    in  let <NewHead> =
								    %% Line 2201
								    apply 'one_bucket_removed'/2
									(Head3, _cor65)
								in  let <_cor67> =
									%% Line 2202
									#{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),
									  #<305419896>(32,1,'integer',['unsigned'|['big']])}#
								    in  let <W0> =
									    %% Line 2202
									    {NewPos,[_cor67|_cor3]}
									in  let <_cor69> =
										%% Line 2203
										#{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),
										  #<NewPos>(32,1,'integer',['unsigned'|['big']])}#
									    in  let <W2> = {_cor4,_cor69}
										in  let <_cor72> =
											%% Line 2204
											case <> of
											  %% Line 2205
											  <>
											      when call 'erlang':'=/='
												    (_cor7,
												     NewPos) ->
											      let <_cor71> =
												  %% Line 2207
												  call 'erlang':'+'
												      (_cor7, 4)
											      in  %% Line 2207
												  [W0|[{_cor71,#{#<3>(8,1,'integer',['unsigned'|['big']]),
														 #<171>(8,1,'integer',['unsigned'|['big']]),
														 #<205>(8,1,'integer',['unsigned'|['big']]),
														 #<239>(8,1,'integer',['unsigned'|['big']])}#}|[]]]
											  %% Line 2208
											  <> when 'true' ->
											      %% Line 2209
											      [W0|[]]
											end
										    in  %% Line 2211
											{NewHead,[W2|[]],_cor72}
						( <_cor62> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor62})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor60> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor60})
					-| ['compiler_generated'] )
				    end
			  end
	      ( <> when 'true' ->
		    primop 'match_fail'
			('if_clause')
		-| ['compiler_generated'] )
	    end
'one_bucket_added'/2 =
    %% Line 2215
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <H = {'head',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57},_X_Log2>
	      when call 'erlang':'=:='
		    (_cor39,
		     'undefined') ->
	      %% Line 2216
	      H
	  %% Line 2217
	  <H = {'head',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88},Log2>
	      when call 'erlang':'>='
		    (_cor64,
		     Log2) ->
	      let <NewNoColls> =
		  %% Line 2218
		  call 'orddict':'update_counter'
		      (Log2, 1, _cor70)
	      in  %% Line 2219
		  call 'erlang':'setelement'
		      (14, H, NewNoColls)
	  %% Line 2220
	  <H,Log2> when 'true' ->
	      %% Line 2221
	      ( case H of
		  ( <( {'head',_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_rec120,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181}
		       -| ['compiler_generated'] )> when 'true' ->
			let <NewNoColls> =
			    call 'orddict':'update_counter'
				(Log2, 1, _rec120)
			in  let <_cor23> =
				%% Line 2222
				call 'erlang':'setelement'
				    (14, H, NewNoColls)
			    in  %% Line 2222
				call 'erlang':'setelement'
				    (8, _cor23, Log2)
		    -| ['compiler_generated'] )
		  ( <_cor182> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'one_bucket_removed'/2 =
    %% Line 2224
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <H = {'head',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66},_X_FPos>
	      when call 'erlang':'=:='
		    (_cor48,
		     'undefined') ->
	      %% Line 2225
	      H
	  %% Line 2226
	  <H = {'head',_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97},Log2>
	      when call 'erlang':'>'
		    (_cor73,
		     Log2) ->
	      let <NewNoColls> =
		  %% Line 2227
		  call 'orddict':'update_counter'
		      (Log2, -1, _cor79)
	      in  %% Line 2228
		  call 'erlang':'setelement'
		      (14, H, NewNoColls)
	  %% Line 2229
	  <H = {'head',_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191},Log2>
	      when call 'erlang':'=:='
		    (_cor167,
		     Log2) ->
	      let <NewNoColls> =
		  %% Line 2230
		  call 'orddict':'update_counter'
		      (Log2, -1, _cor173)
	      in  let <MaxObjSize> =
		      ( case %% Line 2231
			     NewNoColls of
			  ( <( ( NoColls
				 -| ['compiler_generated'] ) = ( 'undefined'
								 -| ['compiler_generated'] )
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( NoColls
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( NoColls
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( apply ( 'max_objsize'/2
					  -| ['compiler_generated'] )
				      (( NoColls
					 -| ['compiler_generated'] ), ( 0
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  let <_cor32> =
			  %% Line 2232
			  call 'erlang':'setelement'
			      (14, H, NewNoColls)
		      in  %% Line 2232
			  call 'erlang':'setelement'
			      (8, _cor32, MaxObjSize)
	  ( <_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34})
		  -| [{'function_name',{'one_bucket_removed',2}}] )
	    -| ['compiler_generated'] )
	end
'eval_slot'/9 =
    %% Line 2234
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <WLs0 = [{Key,Commands}|WLs],KOs = [{K,KS,KB,O,Os}|KOs1],%% Line 2235
								   Type,%% Line 2235
									LU,%% Line 2235
									   Ws,%% Line 2235
									      No,%% Line 2235
										 KNo,%% Line 2235
										     BSz,%% Line 2235
											 Ch> when 'true' ->
	      %% Line 2236
	      case call 'dets_utils':'cmp'
		       (K, Key) of
		%% Line 2237
		<0> when 'true' ->
		    let <_cor9> =
			%% Line 2238
			apply 'binobjs2terms'/1
			    (Os)
		    in  let <Old> =
			    %% Line 2238
			    [O|_cor9]
			in  %% Line 2239
			    case %% Line 2240
				 apply 'eval_key'/9
				     (Key, Commands, Old, Type, KB, KS, LU, Ws, Ch) of
			      <{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' ->
				  let <_cor14> =
				      %% Line 2241
				      call 'erlang':'+'
					  (No1, No)
				  in  let <_cor13> =
					  %% Line 2242
					  call 'erlang':'+'
					      (KNo1, KNo)
				      in  let <_cor12> =
					      %% Line 2242
					      call 'erlang':'+'
						  (Sz, BSz)
					  in  %% Line 2241
					      apply 'eval_slot'/9
						  (WLs, KOs1, Type, NLU, NWs, _cor14, _cor13, _cor12, %% Line 2242
												      NCh)
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		%% Line 2243
		<-1> when 'true' ->
		    let <_cor15> =
			%% Line 2245
			call 'erlang':'+'
			    (KS, BSz)
		    in  %% Line 2244
			apply 'eval_slot'/9
			    (WLs0, KOs1, Type, LU, [Ws|KB], No, %% Line 2245
								KNo, _cor15, %% Line 2245
									     Ch)
		%% Line 2246
		<1> when 'true' ->
		    %% Line 2247
		    case %% Line 2248
			 apply 'eval_key'/9
			     (Key, Commands, [], Type, [], 0, LU, Ws, Ch) of
		      <{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' ->
			  let <_cor19> =
			      %% Line 2249
			      call 'erlang':'+'
				  (No1, No)
			  in  let <_cor18> =
				  %% Line 2250
				  call 'erlang':'+'
				      (KNo1, KNo)
			      in  let <_cor17> =
				      %% Line 2250
				      call 'erlang':'+'
					  (Sz, BSz)
				  in  %% Line 2249
				      apply 'eval_slot'/9
					  (WLs, KOs, Type, NLU, NWs, _cor19, _cor18, _cor17, %% Line 2250
											     NCh)
		      ( <_cor16> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor16})
			-| ['compiler_generated'] )
		    end
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2252
	  <[{Key,Commands}|WLs],[],Type,LU,Ws,No,KNo,BSz,Ch> when 'true' ->
	      %% Line 2253
	      case %% Line 2254
		   apply 'eval_key'/9
		       (Key, Commands, [], Type, [], 0, LU, Ws, Ch) of
		<{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' ->
		    let <_cor24> =
			%% Line 2255
			call 'erlang':'+'
			    (No1, No)
		    in  let <_cor23> =
			    %% Line 2255
			    call 'erlang':'+'
				(KNo1, KNo)
			in  let <_cor22> =
				%% Line 2255
				call 'erlang':'+'
				    (Sz, BSz)
			    in  %% Line 2255
				apply 'eval_slot'/9
				    (WLs, [], Type, NLU, NWs, _cor24, _cor23, _cor22, NCh)
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2256
	  <[],[{_X_Key,Size,KeyBin,_cor35,_cor36}|KOs],Type,LU,Ws,No,KNo,BSz,Ch> when 'true' ->
	      let <_cor25> =
		  %% Line 2257
		  call 'erlang':'+'
		      (Size, BSz)
	      in  %% Line 2257
		  apply 'eval_slot'/9
		      ([], KOs, Type, LU, [Ws|KeyBin], No, KNo, _cor25, Ch)
	  %% Line 2258
	  <[],[],_X_Type,LU,Ws,No,KNo,BSz,Ch> when 'true' ->
	      %% Line 2259
	      {LU,Ws,BSz,No,KNo,Ch}
	  ( <_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'eval_slot',9}}] )
	    -| ['compiler_generated'] )
	end
'eval_key'/9 =
    %% Line 2261
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_K,[{_X_Seq,{'lookup',Pid}}|[]],[],_X_Type,_X_KeyBin,_X_KeySz,LU,Ws,Ch> when 'true' ->
	      let <NLU> =
		  %% Line 2262
		  [{Pid,[]}|LU]
	      in  %% Line 2263
		  {NLU,Ws,0,0,0,Ch}
	  %% Line 2264
	  <_X_K,[{_X_Seq,{'lookup',Pid}}|[]],Old0,_X_Type,KeyBin,KeySz,LU,Ws,Ch> when 'true' ->
	      let <Old> =
		  %% Line 2265
		  call 'lists':'keysort'
		      (2, Old0)
	      in  let <Objs> =
		      %% Line 2266
		      apply 'get_objects'/1
			  (Old)
		  in  let <NLU> =
			  %% Line 2267
			  [{Pid,Objs}|LU]
		      in  %% Line 2268
			  {NLU,[Ws|KeyBin],KeySz,0,0,Ch}
	  %% Line 2269
	  <K,Comms,Orig,Type,KeyBin,KeySz,LU,Ws,Ch> when 'true' ->
	      let <Old> =
		  %% Line 2270
		  call 'dets_utils':'msort'
		      (Orig)
	      in  %% Line 2271
		  case apply 'eval_key1'/9
			   (Comms, [], Old, Type, K, LU, Ws, 0, Orig) of
		    %% Line 2272
		    <{'ok',NLU}>
			when call 'erlang':'=:='
			      (Old,
			       []) ->
			%% Line 2273
			{NLU,Ws,0,0,0,Ch}
		    %% Line 2274
		    <{'ok',NLU}> when 'true' ->
			%% Line 2275
			{NLU,[Ws|KeyBin],KeySz,0,0,Ch}
		    %% Line 2276
		    <{NLU,NWs,NSz,No}>
			when let <_cor14> =
			      call 'erlang':'=:='
				  (Old, [])
			  in  let <_cor15> =
				  call 'erlang':'>'
				      (NSz, 0)
			      in  call 'erlang':'and'
				      (_cor14, _cor15) ->
			%% Line 2277
			{NLU,NWs,NSz,No,1,'true'}
		    %% Line 2278
		    <{NLU,NWs,NSz,No}>
			when let <_cor16> =
			      call 'erlang':'=/='
				  (Old, [])
			  in  let <_cor17> =
				  call 'erlang':'=:='
				      (NSz, 0)
			      in  call 'erlang':'and'
				      (_cor16, _cor17) ->
			%% Line 2279
			{NLU,NWs,NSz,No,-1,'true'}
		    %% Line 2280
		    <{NLU,NWs,NSz,No}> when 'true' ->
			%% Line 2281
			{NLU,NWs,NSz,No,0,'true'}
		    ( <_cor19> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor19})
		      -| ['compiler_generated'] )
		  end
	end
'eval_key1'/9 =
    %% Line 2285
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{_X_Seq,{'insert',Term}}|L],Cs,Old = [{_cor31,_cor32,_cor33}|[]],Type = 'set',K,%% Line 2286
											    LU,%% Line 2286
											       Ws,%% Line 2286
												  No,%% Line 2286
												     Orig>
	      when call 'erlang':'=:='
		    (_cor31,
		     Term) ->
	      %% Line 2287
	      apply 'eval_key1'/9
		  (L, Cs, Old, Type, K, LU, Ws, No, Orig)
	  %% Line 2288
	  <[{Seq,{'insert',Term}}|L],Cs,Old,Type = 'set',K,LU,Ws,No,Orig> when 'true' ->
	      let <_cor10> =
		  %% Line 2290
		  call 'erlang':'+'
		      (No, 1)
	      in  let <_cor9> =
		      %% Line 2290
		      call 'erlang':'length'
			  (Old)
		  in  let <NNo> =
			  %% Line 2290
			  call 'erlang':'-'
			      (_cor10, _cor9)
		      in  %% Line 2291
			  apply 'eval_key1'/9
			      (L, Cs, [{Term,Seq,'insert'}|[]], Type, K, LU, Ws, NNo, Orig)
	  %% Line 2292
	  <[{_X_Seq,{'lookup',Pid}}|L],Cs,Old,Type,Key,LU,Ws,No,Orig> when 'true' ->
	      %% Line 2293
	      case apply 'eval_comms'/4
		       (Cs, Old, Type, No) of
		<{'ok',New0,NewNo}> when 'true' ->
		    let <New> =
			%% Line 2294
			call 'lists':'keysort'
			    (2, New0)
		    in  let <Objs> =
			    %% Line 2295
			    apply 'get_objects'/1
				(New)
			in  let <NLU> =
				%% Line 2296
				[{Pid,Objs}|LU]
			    in  %% Line 2297
				case <> of
				  %% Line 2298
				  <>
				      when call 'erlang':'=:='
					    (L,
					     []) ->
				      %% Line 2299
				      apply 'eval_end'/6
					  (New, NLU, Type, Ws, NewNo, Orig)
				  %% Line 2300
				  <> when 'true' ->
				      let <NewOld> =
					  %% Line 2301
					  call 'dets_utils':'msort'
					      (New)
				      in  %% Line 2302
					  apply 'eval_key1'/9
					      (L, [], NewOld, Type, Key, NLU, Ws, NewNo, Orig)
				end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2304
	  <[{_X_Seq,'delete_key'}|L],_X_Cs,Old,Type,K,LU,Ws,No,Orig> when 'true' ->
	      let <_cor17> =
		  %% Line 2305
		  call 'erlang':'length'
		      (Old)
	      in  let <NewNo> =
		      %% Line 2305
		      call 'erlang':'-'
			  (No, _cor17)
		  in  %% Line 2306
		      apply 'eval_key1'/9
			  (L, [], [], Type, K, LU, Ws, NewNo, Orig)
	  %% Line 2307
	  <[{_X_Seq,{'delete_object',Term}}|L],Cs,[{_cor34,_cor35,_cor36}|[]],Type = 'set',K,%% Line 2308
											     LU,%% Line 2308
												Ws,%% Line 2308
												   No,%% Line 2308
												      Orig>
	      when call 'erlang':'=:='
		    (_cor34,
		     Term) ->
	      let <_cor19> =
		  %% Line 2309
		  call 'erlang':'-'
		      (No, 1)
	      in  %% Line 2309
		  apply 'eval_key1'/9
		      (L, Cs, [], Type, K, LU, Ws, _cor19, Orig)
	  %% Line 2310
	  <[{_X_Seq,{'delete_object',_X_T}}|L],Cs,Old1,Type = 'set',K,LU,%% Line 2311
									 Ws,%% Line 2311
									    No,%% Line 2311
									       Orig> when 'true' ->
	      %% Line 2312
	      apply 'eval_key1'/9
		  (L, Cs, Old1, Type, K, LU, Ws, No, Orig)
	  %% Line 2313
	  <[{Seq,{Comm,Term}}|L],Cs,Old,Type,K,LU,Ws,No,Orig>
	      when %% Line 2314
		call 'erlang':'=/='
		    (Type,
		     'set') ->
	      %% Line 2315
	      apply 'eval_key1'/9
		  (L, [{Term,Seq,Comm}|Cs], Old, Type, K, LU, Ws, No, Orig)
	  %% Line 2316
	  <[],Cs,Old,Type = 'set',_X_Key,LU,Ws,No,Orig> when 'true' ->
	      %% Line 2317
	      case Cs of
		<[]> when 'true' ->
		    %% Line 2318
		    apply 'eval_end'/6
			(Old, LU, Type, Ws, No, Orig)
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2319
	  <[],Cs,Old,Type,_X_Key,LU,Ws,No,Orig> when 'true' ->
	      %% Line 2320
	      case apply 'eval_comms'/4
		       (Cs, Old, Type, No) of
		<{'ok',New,NewNo}> when 'true' ->
		    %% Line 2321
		    apply 'eval_end'/6
			(New, LU, Type, Ws, NewNo, Orig)
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor21})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'eval_key1',9}}] )
	    -| ['compiler_generated'] )
	end
'eval_comms'/4 =
    %% Line 2323
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],L,_X_Type = 'set',No> when 'true' ->
	      %% Line 2324
	      {'ok',L,No}
	  %% Line 2325
	  <Cs,Old,Type,No> when 'true' ->
	      let <Commands> =
		  %% Line 2326
		  call 'dets_utils':'msort'
		      (Cs)
	      in  %% Line 2327
		  case Type of
		    %% Line 2328
		    <'bag'> when 'true' ->
			apply 'eval_bag'/4
			    (Commands, Old, [], No)
		    %% Line 2329
		    <'duplicate_bag'> when 'true' ->
			apply 'eval_dupbag'/4
			    (Commands, Old, [], No)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'eval_end'/6 =
    %% Line 2332
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <New> =
	    %% Line 2333
	    call 'lists':'keysort'
		(2, _cor5)
	in  let <_cor9> =
		%% Line 2334
		case <> of
		  %% Line 2335
		  <>
		      when try
			    let <_cor8> =
				call 'erlang':'length'
				    (New)
			    in  let <_cor7> =
				    call 'erlang':'length'
					(_cor0)
				in  call 'erlang':'=/='
					(_cor8, _cor7)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      'false'
		  %% Line 2336
		  <> when 'true' ->
		      %% Line 2337
		      apply 'same_terms'/2
			  (_cor0, New)
		end
	    in  %% Line 2339
		case <> of
		  %% Line 2340
		  <>
		      when call 'erlang':'=:='
			    (_cor9,
			     'true') ->
		      %% Line 2342
		      {'ok',_cor4}
		  %% Line 2343
		  <>
		      when call 'erlang':'=:='
			    (New,
			     []) ->
		      %% Line 2344
		      {_cor4,_cor2,0,_cor1}
		  %% Line 2345
		  <> when 'true' ->
		      %% Line 2346
		      case apply 'make_bins'/3
			       (New, [], 0) of
			<{Ws1,Sz}> when 'true' ->
			    %% Line 2347
			    case <> of
			      %% Line 2348
			      <>
				  when call 'erlang':'=:='
					(_cor3,
					 'set') ->
				  %% Line 2349
				  {_cor4,[_cor2|Ws1],Sz,_cor1}
			      %% Line 2350
			      <> when 'true' ->
				  let <NSz> =
				      %% Line 2351
				      call 'erlang':'+'
					  (Sz, 4)
				  in  let <_cor13> =
					  %% Line 2352
					  #{#<NSz>(32,1,'integer',['unsigned'|['big']])}#
				      in  %% Line 2352
					  {_cor4,[_cor2|[_cor13|Ws1]],NSz,_cor1}
			    end
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor11})
			  -| ['compiler_generated'] )
		      end
		end
'same_terms'/2 =
    %% Line 2356
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E1|L1],[E2|L2]>
	      when try
		    let <_cor3> =
			call 'erlang':'element'
			    (1, E1)
		    in  let <_cor2> =
			    call 'erlang':'element'
				(1, E2)
			in  call 'erlang':'=:='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2357
	      apply 'same_terms'/2
		  (L1, L2)
	  %% Line 2358
	  <[],[]> when 'true' ->
	      %% Line 2359
	      'true'
	  %% Line 2360
	  <_X_L1,_X_L2> when 'true' ->
	      %% Line 2361
	      'false'
	end
'make_bins'/3 =
    %% Line 2363
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_X_Term,_X_Seq,B}|L],W,Sz>
	      when call 'erlang':'is_binary'
		    (B) ->
	      let <_cor3> =
		  %% Line 2364
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor4> =
		      %% Line 2364
		      call 'erlang':'+'
			  (Sz, _cor3)
		  in  %% Line 2364
		      apply 'make_bins'/3
			  (L, [W|B], _cor4)
	  %% Line 2365
	  <[{Term,_X_Seq,'insert'}|L],W,Sz> when 'true' ->
	      let <B> =
		  %% Line 2366
		  call 'erlang':'term_to_binary'
		      (Term)
	      in  let <_cor6> =
		      %% Line 2367
		      call 'erlang':'byte_size'
			  (B)
		  in  let <BSize> =
			  %% Line 2367
			  call 'erlang':'+'
			      (_cor6, 4)
		      in  let <_cor9> =
			      %% Line 2368
			      #{#<BSize>(32,1,'integer',['unsigned'|['big']])}#
			  in  let <_cor8> =
				  %% Line 2368
				  call 'erlang':'+'
				      (Sz, BSize)
			      in  %% Line 2368
				  apply 'make_bins'/3
				      (L, [W|[[_cor9|B]|[]]], _cor8)
	  %% Line 2369
	  <[],W,Sz> when 'true' ->
	      %% Line 2370
	      {W,Sz}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'make_bins',3}}] )
	    -| ['compiler_generated'] )
	end
'get_objects'/1 =
    %% Line 2372
    fun (_cor0) ->
	case _cor0 of
	  <[{T,_X_S,_X_BT}|L]> when 'true' ->
	      let <_cor1> =
		  %% Line 2373
		  apply 'get_objects'/1
		      (L)
	      in  %% Line 2373
		  [T|_cor1]
	  %% Line 2374
	  <[]> when 'true' ->
	      %% Line 2375
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_objects',1}}] )
	    -| ['compiler_generated'] )
	end
'eval_bag'/4 =
    %% Line 2377
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L0 = [N = {Term1,_X_S1,Op}|L],Old0 = [O = {Term2,_cor12,_cor13}|Old],New,No> when 'true' ->
	      let <_cor4> =
		  %% Line 2378
		  call 'dets_utils':'cmp'
		      (Term1, Term2)
	      in  %% Line 2378
		  case <Op,_cor4> of
		    %% Line 2379
		    <'delete_object',-1> when 'true' ->
			%% Line 2380
			apply 'eval_bag'/4
			    (L, Old0, New, No)
		    %% Line 2381
		    <'insert',-1> when 'true' ->
			%% Line 2382
			apply 'bag_object'/6
			    (L, Old0, New, No, [N|[]], Term1)
		    %% Line 2383
		    <'delete_object',0> when 'true' ->
			let <_cor5> =
			    %% Line 2384
			    call 'erlang':'-'
				(No, 1)
			in  %% Line 2384
			    apply 'bag_object'/6
				(L, Old, New, _cor5, [], Term1)
		    %% Line 2385
		    <'insert',0> when 'true' ->
			let <_cor6> =
			    %% Line 2386
			    call 'erlang':'-'
				(No, 1)
			in  %% Line 2386
			    apply 'bag_object'/6
				(L, Old, New, _cor6, [N|[]], Term1)
		    %% Line 2387
		    <_cor14,1> when 'true' ->
			%% Line 2388
			apply 'eval_bag'/4
			    (L0, Old, [O|New], No)
		    ( <_fol4729,_fol4730> when 'true' ->
			  let <_cor7> = {_fol4729,_fol4730}
			  in  primop 'match_fail'
				  ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2390
	  <[{_X_Term1,_X_Seq1,'delete_object'}|L],Old = [],New,No> when 'true' ->
	      %% Line 2391
	      apply 'eval_bag'/4
		  (L, Old, New, No)
	  %% Line 2392
	  <[N = {Term,_X_Seq1,'insert'}|L],Old = [],New,No> when 'true' ->
	      %% Line 2393
	      apply 'bag_object'/6
		  (L, Old, New, No, [N|[]], Term)
	  %% Line 2394
	  <L = [],[O|Old],New,No> when 'true' ->
	      %% Line 2395
	      apply 'eval_bag'/4
		  (L, Old, [O|New], No)
	  %% Line 2396
	  <[],[],New,No> when 'true' ->
	      %% Line 2397
	      {'ok',New,No}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'eval_bag',4}}] )
	    -| ['compiler_generated'] )
	end
'bag_object'/6 =
    %% Line 2399
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[N = {Term,_cor13,'insert'}|L],Old,New,No,_X_N,_cor14>
	      when call 'erlang':'=:='
		    (_cor14,
		     Term) ->
	      %% Line 2400
	      apply 'bag_object'/6
		  (L, Old, New, No, [N|[]], Term)
	  %% Line 2401
	  <[{Term,_cor15,'delete_object'}|L],Old,New,No,_X_N,_cor16>
	      when call 'erlang':'=:='
		    (_cor16,
		     Term) ->
	      %% Line 2402
	      apply 'bag_object'/6
		  (L, Old, New, No, [], Term)
	  %% Line 2403
	  <L,Old,New,No,[],_X_Term> when 'true' ->
	      %% Line 2404
	      apply 'eval_bag'/4
		  (L, Old, New, No)
	  %% Line 2405
	  <L,Old,New,No,[N|[]],_X_Term> when 'true' ->
	      let <_cor6> =
		  %% Line 2406
		  call 'erlang':'+'
		      (No, 1)
	      in  %% Line 2406
		  apply 'eval_bag'/4
		      (L, Old, [N|New], _cor6)
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'bag_object',6}}] )
	    -| ['compiler_generated'] )
	end
'eval_dupbag'/4 =
    %% Line 2408
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L0 = [N = {Term1,_X_S1,Op}|L],Old0 = [O = {Term2,_cor12,_cor13}|Old],New,No> when 'true' ->
	      let <_cor4> =
		  %% Line 2409
		  call 'dets_utils':'cmp'
		      (Term1, Term2)
	      in  %% Line 2409
		  case <Op,_cor4> of
		    %% Line 2410
		    <'delete_object',-1> when 'true' ->
			%% Line 2411
			apply 'eval_dupbag'/4
			    (L, Old0, New, No)
		    %% Line 2412
		    <'insert',-1> when 'true' ->
			let <_cor5> =
			    %% Line 2413
			    call 'erlang':'+'
				(No, 1)
			in  %% Line 2413
			    apply 'dup_object'/6
				(L, Old0, New, _cor5, Term1, [N|[]])
		    %% Line 2414
		    <_cor14,0> when 'true' ->
			%% Line 2415
			apply 'old_dup_object'/6
			    (L0, Old, New, No, Term1, [O|[]])
		    %% Line 2416
		    <_cor15,1> when 'true' ->
			%% Line 2417
			apply 'eval_dupbag'/4
			    (L0, Old, [O|New], No)
		    ( <_fol4731,_fol4732> when 'true' ->
			  let <_cor6> = {_fol4731,_fol4732}
			  in  primop 'match_fail'
				  ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2419
	  <[{_X_Term1,_X_Seq1,'delete_object'}|L],Old = [],New,No> when 'true' ->
	      %% Line 2420
	      apply 'eval_dupbag'/4
		  (L, Old, New, No)
	  %% Line 2421
	  <[N = {Term,_X_Seq1,'insert'}|L],Old = [],New,No> when 'true' ->
	      let <_cor7> =
		  %% Line 2422
		  call 'erlang':'+'
		      (No, 1)
	      in  %% Line 2422
		  apply 'dup_object'/6
		      (L, Old, New, _cor7, Term, [N|[]])
	  %% Line 2423
	  <L = [],[O|Old],New,No> when 'true' ->
	      %% Line 2424
	      apply 'eval_dupbag'/4
		  (L, Old, [O|New], No)
	  %% Line 2425
	  <[],[],New,No> when 'true' ->
	      %% Line 2426
	      {'ok',New,No}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'eval_dupbag',4}}] )
	    -| ['compiler_generated'] )
	end
'old_dup_object'/6 =
    %% Line 2428
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,[Obj = {Term,_cor12,_cor13}|Old],New,No,_cor14,N>
	      when call 'erlang':'=:='
		    (_cor14,
		     Term) ->
	      %% Line 2429
	      apply 'old_dup_object'/6
		  (L, Old, New, No, Term, [Obj|N])
	  %% Line 2430
	  <L,Old,New,No,Term,N> when 'true' ->
	      %% Line 2431
	      apply 'dup_object'/6
		  (L, Old, New, No, Term, N)
	end
'dup_object'/6 =
    %% Line 2433
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Obj = {Term,_cor16,'insert'}|L],Old,New,No,_cor17,Q>
	      when call 'erlang':'=:='
		    (_cor17,
		     Term) ->
	      let <_cor6> =
		  %% Line 2434
		  call 'erlang':'+'
		      (No, 1)
	      in  %% Line 2434
		  apply 'dup_object'/6
		      (L, Old, New, _cor6, Term, [Obj|Q])
	  %% Line 2435
	  <[{Term,_X_Seq,'delete_object'}|L],Old,New,No,_cor18,Q>
	      when call 'erlang':'=:='
		    (_cor18,
		     Term) ->
	      let <_cor7> =
		  %% Line 2437
		  call 'erlang':'length'
		      (Q)
	      in  let <NewNo> =
		      %% Line 2437
		      call 'erlang':'-'
			  (No, _cor7)
		  in  %% Line 2438
		      apply 'dup_object'/6
			  (L, Old, New, NewNo, Term, [])
	  %% Line 2439
	  <L,Old,New,No,_X_Term,Q> when 'true' ->
	      let <_cor9> =
		  %% Line 2440
		  call 'erlang':'++'
		      (Q, New)
	      in  %% Line 2440
		  apply 'eval_dupbag'/4
		      (L, Old, _cor9, No)
	end
'update_no_keys'/4 =
    %% Line 2444
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Head,Ws,0,0> when 'true' ->
	      {Head,Ws}
	  %% Line 2445
	  <Head,Ws,DeltaObjects,DeltaKeys> when 'true' ->
	      %% Line 2446
	      ( case Head of
		  ( <( {'head',_cor31,_cor32,_cor33,_cor34,_cor35,_rec126,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}
		       -| ['compiler_generated'] )> when 'true' ->
			let <NewNoKeys> =
			    %% Line 2447
			    call 'erlang':'+'
				(_rec126, DeltaKeys)
			in  let <NewNoObject> =
				%% Line 2448
				call 'erlang':'+'
				    (_cor35, DeltaObjects)
			    in  let <_cor12> =
				    %% Line 2449
				    call 'erlang':'setelement'
					(7, Head, NewNoKeys)
				in  let <_cor14> =
					%% Line 2449
					call 'erlang':'setelement'
					    (6, _cor12, NewNoObject)
				    in  let <_cor25> =
					    %% Line 2451
					    case <> of
					      %% Line 2452
					      <>
						  when ( try
							  ( case <> of
							      ( <>
								    when ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'is_record'
													     -| ['compiler_generated'] )
									    (_cor14,
									     ( 'head'
									       -| ['compiler_generated'] ),
									     ( 32
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] ) ->
								    let <_cor20> =
									( call 'erlang':'element'
									      (21, _cor14)
									  -| ['compiler_generated'] )
								    in  ( call 'erlang':'>'
									      (NewNoKeys, _cor20)
									  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false'
						      -| ['compiler_generated'] ) ->
						  %% Line 2453
						  Ws
					      %% Line 2454
					      <>
						  when try
							let <_cor23> =
							    call 'erlang':'div'
								(_rec126, 256)
							in  let <_cor22> =
								call 'erlang':'div'
								    (NewNoKeys, 256)
							    in  call 'erlang':'=:='
								    (_cor23, _cor22)
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false' ->
						  %% Line 2455
						  Ws
					      %% Line 2456
					      <> when 'true' ->
						  let <_cor24> =
						      %% Line 2457
						      apply 'file_header'/3
							  (_cor14, 0, 0)
						  in  %% Line 2457
						      [{0,_cor24}|Ws]
					    end
					in  %% Line 2459
					    {_cor14,_cor25}
		    -| ['compiler_generated'] )
		  ( <_cor61> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'slot_position'/1 =
    %% Line 2461
    fun (_cor0) ->
	let <SegNo> =
	    %% Line 2462
	    call 'erlang':'bsr'
		(_cor0, 8)
	in  let <_cor2> =
		%% Line 2463
		call 'erlang':'bsr'
		    (SegNo, 9)
	    in  let <_cor3> =
		    %% Line 2463
		    call 'erlang':'*'
			(4, _cor2)
		in  let <PartPos> =
			%% Line 2463
			call 'erlang':'+'
			    (312, _cor3)
		    in  let <Part> =
			    %% Line 2497
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'get'
								   -| ['compiler_generated'] )
				  (PartPos)
			      -| ['compiler_generated'] )
			in  let <_cor12> =
				%% Line 2465
				call 'erlang':'band'
				    (SegNo, 511)
			    in  let <_cor13> =
				    %% Line 2465
				    call 'erlang':'*'
					(4, _cor12)
				in  let <Pos> =
					%% Line 2465
					call 'erlang':'+'
					    (Part, _cor13)
				    in  let <_cor19> =
					    %% Line 2490
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'get'
										   -| ['compiler_generated'] )
						  (Pos)
					      -| ['compiler_generated'] )
					in  let <_cor16> =
						%% Line 2466
						call 'erlang':'band'
						    (_cor0, 255)
					    in  let <_cor18> =
						    %% Line 2466
						    call 'erlang':'*'
							(8, _cor16)
						in  %% Line 2466
						    call 'erlang':'+'
							(_cor19, _cor18)
'check_pread2_arg'/2 =
    %% Line 2468
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_Pos,Sz}|[]],Head>
	      when call 'erlang':'>'
		    (Sz,
		     81920) ->
	      %% Line 2469
	      case apply 'check_pread_arg'/2
		       (Sz, Head) of
		%% Line 2470
		<'true'> when 'true' ->
		    %% Line 2471
		    'ok'
		%% Line 2472
		<'false'> when 'true' ->
		    let <Bad> =
			%% Line 2473
			call 'dets_utils':'bad_object'
			    ('check_pread2_arg', Sz)
		    in  let <_cor4> =
			    %% Line 2474
			    call 'dets_utils':'corrupt_reason'
				(Head, Bad)
			in  %% Line 2474
			    call 'erlang':'throw'
				(_cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2476
	  <_X_ToRead,_X_Head> when 'true' ->
	      %% Line 2477
	      'ok'
	end
'check_pread_arg'/2 =
    %% Line 2479
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Sz,Head>
	      when call 'erlang':'>'
		    (Sz,
		     81920) ->
	      let <_cor3> =
		  %% Line 2507
		  ( case Head of
		      ( <( _fol4866 = ( {( 'head'
					   -| ['compiler_generated'] ),( _cor10
									 -| ['compiler_generated'] ),( _cor11
												       -| ['compiler_generated'] ),( _cor12
																     -| ['compiler_generated'] ),( _cor13
																				   -| ['compiler_generated'] ),( _cor14
																								 -| ['compiler_generated'] ),( _cor15
																											       -| ['compiler_generated'] ),( _cor16
																															     -| ['compiler_generated'] ),( _cor17
																																			   -| ['compiler_generated'] ),( _cor18
																																							 -| ['compiler_generated'] ),( _cor19
																																										       -| ['compiler_generated'] ),( _cor20
																																														     -| ['compiler_generated'] ),( _cor21
																																																		   -| ['compiler_generated'] ),( _cor22
																																																						 -| ['compiler_generated'] ),( _cor23
																																																									       -| ['compiler_generated'] ),( _cor24
																																																													     -| ['compiler_generated'] ),( _cor25
																																																																	   -| ['compiler_generated'] ),( _cor26
																																																																					 -| ['compiler_generated'] ),( _cor27
																																																																								       -| ['compiler_generated'] ),( _cor28
																																																																												     -| ['compiler_generated'] ),( _cor29
																																																																																   -| ['compiler_generated'] ),( _cor30
																																																																																				 -| ['compiler_generated'] ),( _cor31
																																																																																							       -| ['compiler_generated'] ),( _cor32
																																																																																											     -| ['compiler_generated'] ),( _cor33
																																																																																															   -| ['compiler_generated'] ),( _cor34
																																																																																																			 -| ['compiler_generated'] ),( _cor35
																																																																																																						       -| ['compiler_generated'] ),( _cor36
																																																																																																										     -| ['compiler_generated'] ),( _cor37
																																																																																																														   -| ['compiler_generated'] ),( _cor38
																																																																																																																		 -| ['compiler_generated'] ),( _cor39
																																																																																																																					       -| ['compiler_generated'] ),( _cor40
																																																																																																																									     -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
			   -| ['compiler_generated'] )>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor16
				       -| ['compiler_generated'] ),
				     ( 'undefined'
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] ) ->
			    4294967296
			-| ['compiler_generated'] )
		      %% Line 2509
		      ( <_fol4867> when ( 'true'
					  -| ['compiler_generated'] ) ->
			    %% Line 2510
			    ( case _fol4867 of
				( <( {( 'head'
					-| ['compiler_generated'] ),( _cor41
								      -| ['compiler_generated'] ),( _cor42
												    -| ['compiler_generated'] ),( _cor43
																  -| ['compiler_generated'] ),( _cor44
																				-| ['compiler_generated'] ),( _cor45
																							      -| ['compiler_generated'] ),( _cor46
																											    -| ['compiler_generated'] ),( _rec129
																															  -| ['compiler_generated'] ),( _cor47
																																			-| ['compiler_generated'] ),( _cor48
																																						      -| ['compiler_generated'] ),( _cor49
																																										    -| ['compiler_generated'] ),( _cor50
																																														  -| ['compiler_generated'] ),( _cor51
																																																		-| ['compiler_generated'] ),( _cor52
																																																					      -| ['compiler_generated'] ),( _cor53
																																																									    -| ['compiler_generated'] ),( _cor54
																																																													  -| ['compiler_generated'] ),( _cor55
																																																																	-| ['compiler_generated'] ),( _cor56
																																																																				      -| ['compiler_generated'] ),( _cor57
																																																																								    -| ['compiler_generated'] ),( _cor58
																																																																												  -| ['compiler_generated'] ),( _cor59
																																																																																-| ['compiler_generated'] ),( _cor60
																																																																																			      -| ['compiler_generated'] ),( _cor61
																																																																																							    -| ['compiler_generated'] ),( _cor62
																																																																																											  -| ['compiler_generated'] ),( _cor63
																																																																																															-| ['compiler_generated'] ),( _cor64
																																																																																																		      -| ['compiler_generated'] ),( _cor65
																																																																																																						    -| ['compiler_generated'] ),( _cor66
																																																																																																										  -| ['compiler_generated'] ),( _cor67
																																																																																																														-| ['compiler_generated'] ),( _cor68
																																																																																																																	      -| ['compiler_generated'] ),( _cor69
																																																																																																																					    -| ['compiler_generated'] ),( _cor70
																																																																																																																									  -| ['compiler_generated'] )}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'bsl'
									     -| ['compiler_generated'] )
					    (( 1
					       -| ['compiler_generated'] ), ( _rec129
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor71
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','head'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 2480
		  call 'erlang':'>='
		      (_cor3, Sz)
	  %% Line 2481
	  <_X_Sz,_X_Head> when 'true' ->
	      %% Line 2482
	      'true'
	end
'segp_cache'/2 =
    %% Line 2485
    fun (_cor1,_cor0) ->
	%% Line 2486
	call 'erlang':'put'
	    (_cor1, _cor0)
'get_segp'/1 =
    %% Line 2489
    fun (_cor0) ->
	%% Line 2490
	call 'erlang':'get'
	    (_cor0)
'arrpart_cache'/2 =
    %% Line 2492
    fun (_cor1,_cor0) ->
	%% Line 2493
	call 'erlang':'put'
	    (_cor1, _cor0)
'get_arrpart'/1 =
    %% Line 2496
    fun (_cor0) ->
	%% Line 2497
	call 'erlang':'get'
	    (_cor0)
'sz2pos'/1 =
    %% Line 2499
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2500
	    call 'dets_utils':'log2'
		(_cor0)
	in  %% Line 2500
	    call 'erlang':'+'
		(1, _cor1)
'adjsz'/1 =
    %% Line 2503
    fun (_cor0) ->
	%% Line 2504
	call 'erlang':'-'
	    (_cor0, 1)
'maxobjsize'/1 =
    %% Line 2507
    fun (_cor0) ->
	case _cor0 of
	  <Head = {'head',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}>
	      when call 'erlang':'=:='
		    (_cor16,
		     'undefined') ->
	      4294967296
	  %% Line 2509
	  <Head> when 'true' ->
	      %% Line 2510
	      ( case Head of
		  ( <( {'head',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_rec129,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'bsl'
			    (1, _rec129)
		    -| ['compiler_generated'] )
		  ( <_cor71> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'scan_objs'/8 =
    %% Line 2512
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    catch
		%% Line 2513
		apply 'scan_skip'/8
		    (_cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0, 0)
	in  %% Line 2513
	    case _cor8 of
	      %% Line 2514
	      <{'EXIT',_X_Reason}> when 'true' ->
		  %% Line 2515
		  'bad_object'
	      %% Line 2516
	      <Reply = {'more',_X_From1,_X_To,_X_L,_X_Ts,_X_R,Size}>
		  when call 'erlang':'>'
			(Size,
			 81920) ->
		  %% Line 2517
		  case apply 'check_pread_arg'/2
			   (Size, _cor7) of
		    %% Line 2518
		    <'true'> when 'true' ->
			Reply
		    %% Line 2519
		    <'false'> when 'true' ->
			'bad_object'
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2521
	      <Reply> when 'true' ->
		  %% Line 2522
		  Reply
	    end
'scan_skip'/8 =
    %% Line 2525
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <From1> =
	    %% Line 2526
	    call 'erlang':'+'
		(_cor6, _cor0)
	in  %% Line 2527
	    case ( _cor7
		   -| ['reuse_for_context'] ) of
	      %% Line 2528
	      <_cor30>
		  when call 'erlang':'>='
			(From1,
			 _cor5) ->
		  do  primop 'bs_context_to_binary'
			  (_cor7)
		      %% Line 2529
		      case <> of
			%% Line 2530
			<>
			    when let <_cor9> =
				  call 'erlang':'>'
				      (From1, _cor5)
			      in  let <_cor10> =
				      call 'erlang':'=:='
					  (_cor4, #{}#)
				  in  call 'erlang':'or'
					  (_cor9, _cor10) ->
			    %% Line 2531
			    {'more',From1,_cor5,_cor4,_cor3,_cor2,0}
			%% Line 2532
			<> when 'true' ->
			    %% Line 2533
			    case ( _cor4
				   -| ['reuse_for_context'] ) of
			      <#{#<From2>(32,1,'integer',['unsigned'|['big']]),
				 #<To1>(32,1,'integer',['unsigned'|['big']]),
				 #<L1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  let <Skip1> =
				      %% Line 2534
				      call 'erlang':'-'
					  (From2, _cor6)
				  in  %% Line 2535
				      apply 'scan_skip'/8
					  (_cor7, _cor6, To1, L1, _cor3, _cor2, _cor1, Skip1)
			      ( <_cor11> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_cor11)
					primop 'match_fail'
					    ({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		      end
	      %% Line 2537
	      <#{#<_cor31>(_cor0,8,'binary',['unsigned'|['big']]),
		 #<_X_Size>(32,1,'integer',['unsigned'|['big']]),
		 #<St>(32,1,'integer',['unsigned'|['big']]),
		 #<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
		 #<KO>('all',8,'binary',['unsigned'|['big']])}#>
		  when let <_cor13> =
			%% Line 2538
			call 'erlang':'=/='
			    (St, 305419896)
		    in  let <_cor14> =
			    %% Line 2538
			    call 'erlang':'=/='
				(St, 61591023)
			in  %% Line 2538
			    call 'erlang':'and'
				(_cor13, _cor14) ->
		  let <_cor17> =
		      %% Line 2542
		      call 'erlang':'+'
			  (From1, 12)
		  in  %% Line 2542
		      apply 'scan_skip'/8
			  (KO, _cor17, _cor5, _cor4, _cor3, _cor2, _cor1, 2036)
	      %% Line 2543
	      <#{#<_cor32>(_cor0,8,'binary',['unsigned'|['big']]),
		 #<Size>(32,1,'integer',['unsigned'|['big']]),
		 #<_X_St>(32,1,'integer',['unsigned'|['big']]),
		 #<Sz>(32,1,'integer',['unsigned'|['big']]),
		 #<KO>('all',8,'binary',['unsigned'|['big']])}#>
		  when %% Line 2544
		    try
			let <_cor19> =
			    call 'erlang':'-'
				(Size, 12)
			in  let <_cor18> =
				call 'erlang':'byte_size'
				    (KO)
			    in  call 'erlang':'=<'
				    (_cor19, _cor18)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_cor20> =
		      %% Line 2547
		      call 'erlang':'+'
			  (From1, 12)
		  in  %% Line 2547
		      apply 'bin2bins'/9
			  (KO, _cor20, _cor5, _cor4, _cor3, _cor2, _cor1, Size, Sz)
	      %% Line 2548
	      <#{#<_cor33>(_cor0,8,'binary',['unsigned'|['big']]),
		 #<Size>(32,1,'integer',['unsigned'|['big']]),
		 #<_X_St>(32,1,'integer',['unsigned'|['big']]),
		 #<_X_Sz>(32,1,'integer',['unsigned'|['big']]),
		 #<_X_KO>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  %% Line 2549
		  {'more',From1,_cor5,_cor4,_cor3,_cor2,Size}
	      %% Line 2550
	      <_cor34>
		  when call 'erlang':'>='
			(_cor0,
			 0) ->
		  %% Line 2551
		  {'more',From1,_cor5,_cor4,_cor3,_cor2,0}
	      ( <_cor21> when 'true' ->
		    do  primop 'bs_context_to_binary'
			    (_cor21)
			primop 'match_fail'
			    ({'case_clause',_cor21})
		-| ['compiler_generated'] )
	    end
'bin2bins'/9 =
    %% Line 2556
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bin,From,To,L,Ts,R,Type = 'set',Size,ObjSz0> when 'true' ->
	      let <ObjsSz1> =
		  %% Line 2557
		  call 'erlang':'-'
		      (Size, ObjSz0)
	      in  %% Line 2558
		  case <> of
		    %% Line 2559
		    <>
			when call 'erlang':'=:='
			      (ObjsSz1,
			       8) ->
			%% Line 2560
			apply 'slot_end'/9
			    (Bin, From, To, L, [Bin|Ts], R, Type, Size, 1)
		    %% Line 2561
		    <> when 'true' ->
			let <ObjSz> =
			    %% Line 2562
			    call 'erlang':'-'
				(ObjSz0, 4)
			in  %% Line 2563
			    case Bin of
			      <#{#<_cor26>(ObjSz,8,'binary',['unsigned'|['big']]),
				 #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
				 #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  let <_cor12> =
				      %% Line 2565
				      call 'erlang':'-'
					  (ObjsSz1, NObjSz)
				  in  %% Line 2564
				      apply 'bins_set'/12
					  (T, From, To, L, [Bin|Ts], R, Type, Size, 2, %% Line 2565
										       NObjSz, _cor12, %% Line 2565
												       Bin)
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		  end
	  %% Line 2567
	  <KO = #{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		  #<Bin>('all',8,'binary',['unsigned'|['big']])}#,From,To,L,Ts,R,Type,Size,Sz> when 'true' ->
	      let <_cor15> =
		  %% Line 2569
		  call 'erlang':'-'
		      (Sz, ObjSz)
	      in  let <_cor16> =
		      %% Line 2569
		      call 'erlang':'-'
			  (_cor15, 4)
		  in  let <_cor14> =
			  %% Line 2569
			  call 'erlang':'-'
			      (ObjSz, 4)
		      in  let <_cor13> =
			      %% Line 2569
			      call 'erlang':'-'
				  (Size, Sz)
			  in  %% Line 2568
			      apply 'bins_bag'/13
				  (Bin, From, To, L, Ts, R, Type, Size, 1, _cor16, _cor14, _cor13, %% Line 2569
												   KO)
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'bin2bins',9}}] )
	    -| ['compiler_generated'] )
	end
'bins_set'/12 =
    %% Line 2571
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_ObjSz0,8,KO> when 'true' ->
	      %% Line 2572
	      apply 'slot_end'/9
		  (KO, From, To, L, [Bin|Ts], R, Type, Size, NoObjs)
	  %% Line 2573
	  <Bin,From,To,L,Ts,R,Type,Size,NoObjs,ObjSz0,ObjsSz,KO> when 'true' ->
	      let <ObjSz> =
		  %% Line 2574
		  call 'erlang':'-'
		      (ObjSz0, 4)
	      in  %% Line 2575
		  case Bin of
		    <#{#<_cor28>(ObjSz,8,'binary',['unsigned'|['big']]),
		       #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		       #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_cor15> =
			    %% Line 2576
			    call 'erlang':'+'
				(NoObjs, 1)
			in  let <_cor14> =
				%% Line 2577
				call 'erlang':'-'
				    (ObjsSz, NObjSz)
			    in  %% Line 2576
				apply 'bins_set'/12
				    (T, From, To, L, [Bin|Ts], R, Type, Size, _cor15, %% Line 2577
										      NObjSz, _cor14, %% Line 2577
												      KO)
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		      -| ['compiler_generated'] )
		  end
	end
'bins_bag'/13 =
    %% Line 2579
    fun (_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bin,From,To,L,Ts,R,Type,Size,NoObjs,Sz,ObjSz,ObjsSz,KO>
	      when %% Line 2580
		call 'erlang':'>'
		    (Sz,
		     0) ->
	      %% Line 2581
	      case Bin of
		<#{#<_cor36>(ObjSz,8,'binary',['unsigned'|['big']]),
		   #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor16> =
			%% Line 2582
			call 'erlang':'+'
			    (NoObjs, 1)
		    in  let <_cor15> =
			    %% Line 2583
			    call 'erlang':'-'
				(Sz, NObjSz)
			in  let <_cor14> =
				%% Line 2583
				call 'erlang':'-'
				    (NObjSz, 4)
			    in  %% Line 2582
				apply 'bins_bag'/13
				    (T, From, To, L, [Bin|Ts], R, Type, Size, _cor16, _cor15, _cor14, %% Line 2583
												      ObjsSz, %% Line 2583
													      KO)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2584
	  <Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_Z,_X_ObjSz,8,KO> when 'true' ->
	      %% Line 2585
	      apply 'slot_end'/9
		  (KO, From, To, L, [Bin|Ts], R, Type, Size, NoObjs)
	  %% Line 2586
	  <Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_Z,ObjSz,ObjsSz,KO> when 'true' ->
	      %% Line 2587
	      case Bin of
		<#{#<_cor37>(ObjSz,8,'binary',['unsigned'|['big']]),
		   #<Sz>(32,1,'integer',['unsigned'|['big']]),
		   #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor22> =
			%% Line 2588
			call 'erlang':'+'
			    (NoObjs, 1)
		    in  let <_cor20> =
			    %% Line 2589
			    call 'erlang':'-'
				(Sz, NObjSz)
			in  let <_cor21> =
				%% Line 2589
				call 'erlang':'-'
				    (_cor20, 4)
			    in  let <_cor19> =
				    %% Line 2589
				    call 'erlang':'-'
					(NObjSz, 4)
				in  let <_cor18> =
					%% Line 2589
					call 'erlang':'-'
					    (ObjsSz, Sz)
				    in  %% Line 2588
					apply 'bins_bag'/13
					    (T, From, To, L, [Bin|Ts], R, Type, Size, _cor22, _cor21, _cor19, _cor18, %% Line 2589
														      KO)
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor17})
		  -| ['compiler_generated'] )
	      end
	end
'slot_end'/9 =
    %% Line 2591
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 2592
	    call 'dets_utils':'log2'
		(_cor1)
	in  let <_cor10> =
		%% Line 2592
		call 'erlang':'bsl'
		    (1, _cor9)
	    in  let <Skip> =
		    %% Line 2592
		    call 'erlang':'-'
			(_cor10, 12)
		in  %% Line 2593
		    case <> of
		      %% Line 2594
		      <>
			  when call 'erlang':'>='
				(_cor3,
				 0) ->
			  let <_cor12> =
			      %% Line 2595
			      call 'erlang':'+'
				  (_cor3, _cor1)
			  in  %% Line 2595
			      apply 'scan_skip'/8
				  (_cor8, _cor7, _cor6, _cor5, _cor4, _cor12, _cor2, Skip)
		      %% Line 2596
		      <> when 'true' ->
			  %% Line 2598
			  case call 'erlang':'+'
				   (_cor3, _cor0) of
			    %% Line 2599
			    <R1>
				when call 'erlang':'>='
				      (R1,
				       -1) ->
				let <From1> =
				    %% Line 2600
				    call 'erlang':'+'
					(_cor7, Skip)
				in  let <_cor16> =
					%% Line 2601
					case ( _cor8
					       -| ['reuse_for_context'] ) of
					  %% Line 2602
					  <#{#<_cor28>(Skip,8,'binary',['unsigned'|['big']]),
					     #<B>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					      B
					  %% Line 2603
					  <_cor29> when 'true' ->
					      #{}#
					end
				    in  %% Line 2605
					{'stop',_cor16,From1,_cor6,_cor5,_cor4}
			    %% Line 2606
			    <R1> when 'true' ->
				%% Line 2607
				apply 'scan_skip'/8
				    (_cor8, _cor7, _cor6, _cor5, _cor4, R1, _cor2, Skip)
			  end
		    end
'file_info'/1 =
    %% Line 2613
    fun (_cor0) ->
	%% Line 2617
	case _cor0 of
	  <{'fileheader',_cor15,_cor16,_cor17,CP,Type,Version,M,Next,Kp,NoObjects,NoKeys,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,N,_cor27}> when 'true' ->
	      %% Line 2618
	      case <> of
		%% Line 2619
		<>
		    when call 'erlang':'=:='
			  (CP,
			   0) ->
		    %% Line 2620
		    {'error','not_closed'}
		%% Line 2621
		<>
		    when call 'erlang':'=/='
			  (_cor17,
			   11259375) ->
		    %% Line 2622
		    {'error','not_a_dets_file'}
		%% Line 2623
		<>
		    when call 'erlang':'=/='
			  (Version,
			   9) ->
		    %% Line 2624
		    {'error','bad_version'}
		%% Line 2625
		<> when 'true' ->
		    %% Line 2626
		    {'ok',[{'closed_properly',CP}|[{'keypos',Kp}|[{'m',M}|[{'n',N}|%% Line 2627
										   [{'next',Next}|[{'no_objects',NoObjects}|[{'no_keys',NoKeys}|%% Line 2628
																		[{'type',Type}|[{'version',Version}|[]]]]]]]]]]}
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'v_segments'/1 =
    %% Line 2631
    fun (_cor0) ->
	case _cor0 of
	  <H = {'head',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      %% Line 2632
	      apply 'v_parts'/3
		  (H, 0, 0)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'v_segments',1}}] )
	    -| ['compiler_generated'] )
	end
'v_parts'/3 =
    %% Line 2634
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_H,256,_X_SegNo> when 'true' ->
	      %% Line 2635
	      'done'
	  %% Line 2636
	  <H,PartNo,SegNo> when 'true' ->
	      %% Line 2637
	      ( case H of
		  ( <( {'head',_cor20,_cor21,_cor22,_rec130,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    %% Line 2638
			    call 'erlang':'*'
				(4, PartNo)
			in  let <_cor12> =
				%% Line 2638
				call 'erlang':'+'
				    (312, _cor6)
			    in  let <PartPos> =
				    %% Line 2638
				    call 'dets_utils':'read_4'
					(_rec130, _cor12)
				in  %% Line 2639
				    case <> of
				      %% Line 2640
				      <>
					  when call 'erlang':'=:='
						(PartPos,
						 0) ->
					  %% Line 2641
					  'done'
				      %% Line 2642
				      <> when 'true' ->
					  let <PartBin> =
					      %% Line 2643
					      call 'dets_utils':'pread_n'
						  (_rec130, PartPos, 2048)
					  in  let <_cor16> =
						  %% Line 2644
						  call 'erlang':'+'
						      (PartNo, 1)
					      in  %% Line 2644
						  apply 'v_segments'/4
						      (H, PartBin, _cor16, SegNo)
				    end
		    -| ['compiler_generated'] )
		  ( <_cor50> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'v_segments'/4 =
    %% Line 2647
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,( _cor2
		      -| ['reuse_for_context'] ),_cor1,_cor0> of
	  <H,#{}#,PartNo,SegNo> when 'true' ->
	      %% Line 2648
	      apply 'v_parts'/3
		  (H, PartNo, SegNo)
	  %% Line 2649
	  <_X_H,#{#<0>(32,1,'integer',['unsigned'|['big']]),
		  #<_cor9>('all',8,'binary',['unsigned'|['big']])}#,_X_PartNo,_X_SegNo> when 'true' ->
	      %% Line 2650
	      'done'
	  %% Line 2651
	  <H,#{#<Seg>(32,1,'integer',['unsigned'|['big']]),
	       #<T>('all',8,'binary',['unsigned'|['big']])}#,PartNo,SegNo> when 'true' ->
	      do  %% Line 2652
		  call 'io':'format'
		      ([60|[126|[119|[62|[83|[69|[71|[77|[69|[78|[84|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]], [Seg|[SegNo|[]]])
		  do  %% Line 2653
		      apply 'v_segment'/4
			  (H, SegNo, Seg, 0)
		      let <_cor4> =
			  %% Line 2654
			  call 'erlang':'+'
			      (SegNo, 1)
		      in  %% Line 2654
			  apply 'v_segments'/4
			      (H, T, PartNo, _cor4)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor7)
		    ( primop 'match_fail'
			  ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		      -| [{'function_name',{'v_segments',4}}] )
	    -| ['compiler_generated'] )
	end
'v_segment'/4 =
    %% Line 2656
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_H,_cor18,_X_SegPos,256> when 'true' ->
	      %% Line 2657
	      'done'
	  %% Line 2658
	  <H,SegNo,SegPos,SegSlot> when 'true' ->
	      let <_cor4> =
		  %% Line 2659
		  call 'erlang':'*'
		      (SegNo, 256)
	      in  let <Slot> =
		      %% Line 2659
		      call 'erlang':'+'
			  (SegSlot, _cor4)
		  in  let <_cor7> =
			  %% Line 2660
			  call 'erlang':'*'
			      (8, SegSlot)
		      in  let <BucketP> =
			      %% Line 2660
			      call 'erlang':'+'
				  (SegPos, _cor7)
			  in  let <_cor11> =
				  catch
				      %% Line 2661
				      ( case H of
					  ( <( {'head',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_rec131,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'read_bucket'/3
						    (H, BucketP, _rec131)
					    -| ['compiler_generated'] )
					  ( <_cor49> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','head'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      in  do  %% Line 2661
				      case _cor11 of
					%% Line 2662
					<{'EXIT',Reason}> when 'true' ->
					    do  %% Line 2663
						call 'dets_utils':'vformat'
						    ([42|[42|[32|[100|[101|[116|[115|[58|[32|[67|[111|[114|[114|[117|[112|[116|[32|[111|[114|[32|[116|[114|[117|[110|[99|[97|[116|[101|[100|[32|[100|[101|[116|[115|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2664
																																				[])
						%% Line 2665
						call 'io':'format'
						    ([126|[110|[69|[82|[82|[79|[82|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]], [Reason|[]])
					%% Line 2666
					<[]> when 'true' ->
					    'ok'
					%% Line 2668
					<{Size,CollP,Objects}> when 'true' ->
					    %% Line 2669
					    call 'io':'format'
						([32|[32|[32|[60|[126|[119|[62|[126|[119|[58|[32|[60|[126|[119|[58|[126|[112|[62|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]], %% Line 2670
																					    [BucketP|[Slot|[CollP|[Size|[Objects|[]]]]]])
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor12})
					  -| ['compiler_generated'] )
				      end
				      let <_cor13> =
					  %% Line 2672
					  call 'erlang':'+'
					      (SegSlot, 1)
				      in  %% Line 2672
					  apply 'v_segment'/4
					      (H, SegNo, SegPos, _cor13)
	end
'read_bucket'/3 =
    %% Line 2675
    fun (_cor2,_cor1,_cor0) ->
	let <MaxSize> =
	    ( case _cor2 of
		( <( _fol4903 = ( {( 'head'
				     -| ['compiler_generated'] ),( _cor10
								   -| ['compiler_generated'] ),( _cor11
												 -| ['compiler_generated'] ),( _cor12
															       -| ['compiler_generated'] ),( _cor13
																			     -| ['compiler_generated'] ),( _cor14
																							   -| ['compiler_generated'] ),( _cor15
																											 -| ['compiler_generated'] ),( _cor16
																														       -| ['compiler_generated'] ),( _cor17
																																		     -| ['compiler_generated'] ),( _cor18
																																						   -| ['compiler_generated'] ),( _cor19
																																										 -| ['compiler_generated'] ),( _cor20
																																													       -| ['compiler_generated'] ),( _cor21
																																																	     -| ['compiler_generated'] ),( _cor22
																																																					   -| ['compiler_generated'] ),( _cor23
																																																									 -| ['compiler_generated'] ),( _cor24
																																																												       -| ['compiler_generated'] ),( _cor25
																																																																     -| ['compiler_generated'] ),( _cor26
																																																																				   -| ['compiler_generated'] ),( _cor27
																																																																								 -| ['compiler_generated'] ),( _cor28
																																																																											       -| ['compiler_generated'] ),( _cor29
																																																																															     -| ['compiler_generated'] ),( _cor30
																																																																																			   -| ['compiler_generated'] ),( _cor31
																																																																																							 -| ['compiler_generated'] ),( _cor32
																																																																																										       -| ['compiler_generated'] ),( _cor33
																																																																																														     -| ['compiler_generated'] ),( _cor34
																																																																																																		   -| ['compiler_generated'] ),( _cor35
																																																																																																						 -| ['compiler_generated'] ),( _cor36
																																																																																																									       -| ['compiler_generated'] ),( _cor37
																																																																																																													     -| ['compiler_generated'] ),( _cor38
																																																																																																																	   -| ['compiler_generated'] ),( _cor39
																																																																																																																					 -| ['compiler_generated'] ),( _cor40
																																																																																																																								       -| ['compiler_generated'] )}
				  -| ['compiler_generated'] )
		     -| ['compiler_generated'] )>
		      when ( call ( 'erlang'
				 -| ['compiler_generated'] ):( '=:='
							       -| ['compiler_generated'] )
			      (( _cor16
				 -| ['compiler_generated'] ),
			       ( 'undefined'
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] ) ->
		      4294967296
		  -| ['compiler_generated'] )
		( <_fol4904> when ( 'true'
				    -| ['compiler_generated'] ) ->
		      ( case _fol4904 of
			  ( <( {( 'head'
				  -| ['compiler_generated'] ),( _cor41
								-| ['compiler_generated'] ),( _cor42
											      -| ['compiler_generated'] ),( _cor43
															    -| ['compiler_generated'] ),( _cor44
																			  -| ['compiler_generated'] ),( _cor45
																							-| ['compiler_generated'] ),( _cor46
																										      -| ['compiler_generated'] ),( _rec129
																														    -| ['compiler_generated'] ),( _cor47
																																		  -| ['compiler_generated'] ),( _cor48
																																						-| ['compiler_generated'] ),( _cor49
																																									      -| ['compiler_generated'] ),( _cor50
																																													    -| ['compiler_generated'] ),( _cor51
																																																	  -| ['compiler_generated'] ),( _cor52
																																																					-| ['compiler_generated'] ),( _cor53
																																																								      -| ['compiler_generated'] ),( _cor54
																																																												    -| ['compiler_generated'] ),( _cor55
																																																																  -| ['compiler_generated'] ),( _cor56
																																																																				-| ['compiler_generated'] ),( _cor57
																																																																							      -| ['compiler_generated'] ),( _cor58
																																																																											    -| ['compiler_generated'] ),( _cor59
																																																																															  -| ['compiler_generated'] ),( _cor60
																																																																																			-| ['compiler_generated'] ),( _cor61
																																																																																						      -| ['compiler_generated'] ),( _cor62
																																																																																										    -| ['compiler_generated'] ),( _cor63
																																																																																														  -| ['compiler_generated'] ),( _cor64
																																																																																																		-| ['compiler_generated'] ),( _cor65
																																																																																																					      -| ['compiler_generated'] ),( _cor66
																																																																																																									    -| ['compiler_generated'] ),( _cor67
																																																																																																													  -| ['compiler_generated'] ),( _cor68
																																																																																																																	-| ['compiler_generated'] ),( _cor69
																																																																																																																				      -| ['compiler_generated'] ),( _cor70
																																																																																																																								    -| ['compiler_generated'] )}
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'bsl'
								       -| ['compiler_generated'] )
				      (( 1
					 -| ['compiler_generated'] ), ( _rec129
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( _cor71
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','head'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 2677
	    case call 'dets_utils':'ipread'
		     (_cor2, _cor1, MaxSize) of
	      %% Line 2678
	      <{'ok',{Size,Pointer,#{#<_cor10>(32,1,'integer',['unsigned'|['big']]),
				     #<_X_Status>(32,1,'integer',['unsigned'|['big']]),
				     #<KeysObjs>('all',8,'binary',['unsigned'|['big']])}#}}>
		  when call 'erlang':'=:='
			(_cor10,
			 Size) ->
		  let <Objs> =
		      %% Line 2679
		      apply 'bin2objs'/3
			  (KeysObjs, _cor0, [])
		  in  let <_cor5> =
			  %% Line 2680
			  call 'lists':'reverse'
			      (Objs)
		      in  %% Line 2680
			  {Size,Pointer,_cor5}
	      %% Line 2681
	      <[]> when 'true' ->
		  %% Line 2682
		  []
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'per_key'/2 =
    %% Line 2690
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Head,B = #{#<BinSize>(32,1,'integer',['unsigned'|['big']]),
		      #<305419896>(32,1,'integer',['unsigned'|['big']]),
		      #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor2> =
		  %% Line 2691
		  call 'erlang':'byte_size'
		      (B)
	      in  %% Line 2691
		  case call 'erlang':'=:='
			   (_cor2, BinSize) of
		    <'true'> when 'true' ->
			%% Line 2692
			case <> of
			  %% Line 2693
			  <>
			      when ( try
				      ( case <> of
					  ( <>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_record'
											 -| ['compiler_generated'] )
							(Head,
							 ( 'head'
							   -| ['compiler_generated'] ),
							 ( 32
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] ) ->
						let <_cor8> =
						    ( call 'erlang':'element'
							  (10, Head)
						      -| ['compiler_generated'] )
						in  ( call 'erlang':'=:='
							  (_cor8, 'set')
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 2694
			      ( case Head of
				  ( <( {'head',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec132,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'per_set_key'/3
					    (Bin, _rec132, [])
				    -| ['compiler_generated'] )
				  ( <_cor46> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 2695
			  <> when 'true' ->
			      %% Line 2696
			      ( case Head of
				  ( <( {'head',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_rec133,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'per_bag_key'/3
					    (Bin, _rec133, [])
				    -| ['compiler_generated'] )
				  ( <_cor77> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','head'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'per_key',2}}] )
	    -| ['compiler_generated'] )
	end
'per_set_key'/3 =
    %% Line 2699
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <B = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
		 #<T>('all',8,'binary',['unsigned'|['big']])}#,KeyPos,L> when 'true' ->
	      %% Line 2700
	      case ( B
		     -| ['reuse_for_context'] ) of
		<#{#<KeyBin>(Size,8,'binary',['unsigned'|['big']]),
		   #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Term> =
			%% Line 2701
			call 'erlang':'binary_to_term'
			    (T)
		    in  let <Key> =
			    %% Line 2702
			    call 'erlang':'element'
				(KeyPos, Term)
			in  let <Item> = {%% Line 2703
				 Term,-67108864,%% Line 2703
						KeyBin}
			    in  %% Line 2704
				apply 'per_set_key'/3
				    (R, KeyPos, [{Key,Size,KeyBin,Item,[]}|L])
		( <_cor3> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor3)
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2705
	  <#{}#,KeyPos,L>
	      when call 'erlang':'is_integer'
		    (KeyPos) ->
	      %% Line 2706
	      call 'lists':'reverse'
		  (L)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'per_set_key',3}}] )
	    -| ['compiler_generated'] )
	end
'per_bag_key'/3 =
    %% Line 2708
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <B = #{#<Size>(32,1,'integer',['unsigned'|['big']]),
		 #<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		 #<T>('all',8,'binary',['unsigned'|['big']])}#,KeyPos,L> when 'true' ->
	      %% Line 2709
	      case B of
		<#{#<KeyBin>(Size,8,'binary',['unsigned'|['big']]),
		   #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <ObjSz1> =
			%% Line 2710
			call 'erlang':'-'
			    (ObjSz, 4)
		    in  let <_cor5> =
			    %% Line 2711
			    call 'erlang':'-'
				(Size, ObjSz)
			in  let <Size1> =
				%% Line 2711
				call 'erlang':'-'
				    (_cor5, 4)
			    in  %% Line 2712
				case T of
				  <#{#<_cor17>(ObjSz1,8,'binary',['unsigned'|['big']]),
				     #<KeyObjs>(Size1,8,'binary',['unsigned'|['big']]),
				     #<_cor18>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      %% Line 2713
				      case ( B
					     -| ['reuse_for_context'] ) of
					<#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),
					   #<Bin>(ObjSz,8,'binary',['unsigned'|['big']]),
					   #<_cor19>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					    let <Term> =
						%% Line 2714
						call 'erlang':'binary_to_term'
						    (T)
					    in  let <Key> =
						    %% Line 2715
						    call 'erlang':'element'
							(KeyPos, Term)
						in  let <Item> = {%% Line 2716
							 Term,-67108864,%% Line 2716
									Bin}
						    in  %% Line 2717
							apply 'per_bag_key'/3
							    (R, KeyPos, [{Key,Size,KeyBin,Item,KeyObjs}|L])
					( <_cor8> when 'true' ->
					      do  primop 'bs_context_to_binary'
						      (_cor8)
						  primop 'match_fail'
						      ({'badmatch',_cor8})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2718
	  <#{}#,KeyPos,L>
	      when call 'erlang':'is_integer'
		    (KeyPos) ->
	      %% Line 2719
	      call 'lists':'reverse'
		  (L)
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'per_bag_key',3}}] )
	    -| ['compiler_generated'] )
	end
'binobjs2terms'/1 =
    %% Line 2722
    fun (_cor0) ->
	case _cor0 of
	  <B = #{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		 #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor4> =
		  %% Line 2723
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor5> =
		      %% Line 2723
		      call 'erlang':'-'
			  (_cor4, ObjSz)
		  in  %% Line 2723
		      apply 'binobjs2terms'/6
			  (B, T, ObjSz, _cor5, -67108863, [])
	  %% Line 2724
	  <B = []> when 'true' ->
	      %% Line 2725
	      B
	  %% Line 2726
	  <#{}#> when 'true' ->
	      %% Line 2727
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'binobjs2terms',1}}] )
	    -| ['compiler_generated'] )
	end
'binobjs2terms'/6 =
    %% Line 2729
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bin,Obj,_X_ObjSz,_X_Size = 0,N,L> when 'true' ->
	      let <_cor6> =
		  %% Line 2730
		  call 'erlang':'binary_to_term'
		      (Obj)
	      in  %% Line 2730
		  call 'lists':'reverse'
		      (L, [{_cor6,N,Bin}|[]])
	  %% Line 2731
	  <Bin,Bin1,ObjSz,Size,N,L> when 'true' ->
	      %% Line 2732
	      case ( Bin
		     -| ['reuse_for_context'] ) of
		<#{#<B>(ObjSz,8,'binary',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2733
		    case T of
		      <#{#<NObjSz>(32,1,'integer',['unsigned'|['big']]),
			 #<T1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <_cor9> =
			      %% Line 2734
			      call 'erlang':'binary_to_term'
				  (Bin1)
			  in  let <Item> = {_cor9,%% Line 2734
					 N,%% Line 2734
					   B}
			      in  let <_cor12> =
				      %% Line 2735
				      call 'erlang':'-'
					  (Size, NObjSz)
				  in  let <_cor11> =
					  %% Line 2735
					  call 'erlang':'+'
					      (N, 1)
				      in  %% Line 2735
					  apply 'binobjs2terms'/6
					      (T, T1, NObjSz, _cor12, _cor11, [Item|L])
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor7)
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'bin2objs'/3 =
    %% Line 2739
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <KeysObjs,'set',Ts> when 'true' ->
	      %% Line 2740
	      case KeysObjs of
		<#{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor6> =
			%% Line 2741
			call 'erlang':'-'
			    (ObjSz, 4)
		    in  let <_cor4> =
			    %% Line 2741
			    call 'erlang':'byte_size'
				(KeysObjs)
			in  let <_cor5> =
				%% Line 2741
				call 'erlang':'-'
				    (_cor4, ObjSz)
			    in  %% Line 2741
				apply 'bin2objs'/4
				    (T, _cor6, _cor5, Ts)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2742
	  <KeysObjs,_X_Type,Ts> when 'true' ->
	      %% Line 2743
	      apply 'bin2objs2'/2
		  (KeysObjs, Ts)
	end
'bin2objs2'/2 =
    %% Line 2745
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<Size>(32,1,'integer',['unsigned'|['big']]),
	     #<ObjSz>(32,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Ts> when 'true' ->
	      let <_cor4> =
		  %% Line 2746
		  call 'erlang':'-'
		      (ObjSz, 4)
	      in  let <_cor2> =
		      %% Line 2746
		      call 'erlang':'-'
			  (Size, ObjSz)
		  in  let <_cor3> =
			  %% Line 2746
			  call 'erlang':'-'
			      (_cor2, 4)
		      in  %% Line 2746
			  apply 'bin2objs'/4
			      (T, _cor4, _cor3, Ts)
	  %% Line 2747
	  <#{}#,Ts> when 'true' ->
	      %% Line 2748
	      Ts
	  ( <_cor6,_cor5> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor6)
		    ( primop 'match_fail'
			  ({'function_clause',_cor6,_cor5})
		      -| [{'function_name',{'bin2objs2',2}}] )
	    -| ['compiler_generated'] )
	end
'bin2objs'/4 =
    %% Line 2750
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Bin,ObjSz,_X_Size = 0,Ts> when 'true' ->
	      %% Line 2751
	      case Bin of
		<#{#<_cor14>(ObjSz,8,'binary',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor5> =
			%% Line 2752
			call 'erlang':'binary_to_term'
			    (Bin)
		    in  %% Line 2752
			apply 'bin2objs2'/2
			    (T, [_cor5|Ts])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2753
	  <Bin,ObjSz,Size,Ts> when 'true' ->
	      %% Line 2754
	      case Bin of
		<#{#<_cor15>(ObjSz,8,'binary',['unsigned'|['big']]),
		   #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor9> =
			%% Line 2755
			call 'erlang':'-'
			    (NObjSz, 4)
		    in  let <_cor8> =
			    %% Line 2755
			    call 'erlang':'-'
				(Size, NObjSz)
			in  let <_cor7> =
				%% Line 2755
				call 'erlang':'binary_to_term'
				    (Bin)
			    in  %% Line 2755
				apply 'bin2objs'/4
				    (T, _cor9, _cor8, [_cor7|Ts])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'bin2keybins'/2 =
    %% Line 2758
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <KeysObjs,Head = {'head',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}>
	      when call 'erlang':'=:='
		    (_cor26,
		     'set') ->
	      %% Line 2759
	      case KeysObjs of
		<#{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor11> =
			%% Line 2760
			call 'erlang':'-'
			    (ObjSz, 4)
		    in  let <_cor9> =
			    %% Line 2760
			    call 'erlang':'byte_size'
				(KeysObjs)
			in  let <_cor10> =
				%% Line 2760
				call 'erlang':'-'
				    (_cor9, ObjSz)
			    in  %% Line 2760
				apply 'bin2keybins'/5
				    (T, _cor27, _cor11, _cor10, [])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2761
	  <KeysObjs,Head> when 'true' ->
	      %% Line 2762
	      ( case Head of
		  ( <( {'head',_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_rec135,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'bin2keybins2'/3
			    (KeysObjs, _rec135, [])
		    -| ['compiler_generated'] )
		  ( <_cor110> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','head'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'bin2keybins2'/3 =
    %% Line 2764
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<Size>(32,1,'integer',['unsigned'|['big']]),
	     #<ObjSz>(32,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Kp,L> when 'true' ->
	      let <_cor5> =
		  %% Line 2765
		  call 'erlang':'-'
		      (ObjSz, 4)
	      in  let <_cor3> =
		      %% Line 2765
		      call 'erlang':'-'
			  (Size, ObjSz)
		  in  let <_cor4> =
			  %% Line 2765
			  call 'erlang':'-'
			      (_cor3, 4)
		      in  %% Line 2765
			  apply 'bin2keybins'/5
			      (T, Kp, _cor5, _cor4, L)
	  %% Line 2766
	  <#{}#,Kp,L>
	      when call 'erlang':'is_integer'
		    (Kp) ->
	      %% Line 2767
	      call 'lists':'reverse'
		  (L)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor8)
		    ( primop 'match_fail'
			  ({'function_clause',_cor8,_cor7,_cor6})
		      -| [{'function_name',{'bin2keybins2',3}}] )
	    -| ['compiler_generated'] )
	end
'bin2keybins'/5 =
    %% Line 2769
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bin,Kp,ObjSz,_X_Size = 0,L> when 'true' ->
	      %% Line 2770
	      case ( Bin
		     -| ['reuse_for_context'] ) of
		<#{#<Obj>(ObjSz,8,'binary',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Term> =
			%% Line 2771
			call 'erlang':'binary_to_term'
			    (Obj)
		    in  let <_cor7> =
			    %% Line 2772
			    call 'erlang':'element'
				(Kp, Term)
			in  %% Line 2772
			    apply 'bin2keybins2'/3
				(T, Kp, [{_cor7,Obj}|L])
		( <_cor5> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor5)
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2773
	  <Bin,Kp,ObjSz,Size,L> when 'true' ->
	      %% Line 2774
	      case ( Bin
		     -| ['reuse_for_context'] ) of
		<#{#<Obj>(ObjSz,8,'binary',['unsigned'|['big']]),
		   #<NObjSz>(32,1,'integer',['unsigned'|['big']]),
		   #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Term> =
			%% Line 2775
			call 'erlang':'binary_to_term'
			    (Obj)
		    in  let <_cor12> =
			    %% Line 2776
			    call 'erlang':'-'
				(NObjSz, 4)
			in  let <_cor11> =
				%% Line 2776
				call 'erlang':'-'
				    (Size, NObjSz)
			    in  let <_cor10> =
				    %% Line 2776
				    call 'erlang':'element'
					(Kp, Term)
				in  %% Line 2776
				    apply 'bin2keybins'/5
					(T, Kp, _cor12, _cor11, [{_cor10,Obj}|L])
		( <_cor8> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor8)
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dets_v9')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dets_v9', _cor0)
end