module 'zip' ['create'/2,
	      'create'/3,
	      'extract'/1,
	      'extract'/2,
	      'foldl'/3,
	      'list_dir'/1,
	      'list_dir'/2,
	      'module_info'/0,
	      'module_info'/1,
	      'openzip_close'/1,
	      'openzip_get'/1,
	      'openzip_get'/2,
	      'openzip_list_dir'/1,
	      'openzip_list_dir'/2,
	      'openzip_open'/1,
	      'openzip_open'/2,
	      'openzip_t'/1,
	      'openzip_tt'/1,
	      't'/1,
	      'table'/1,
	      'table'/2,
	      'tt'/1,
	      'unzip'/1,
	      'unzip'/2,
	      'zip'/2,
	      'zip'/3,
	      'zip_close'/1,
	      'zip_get'/1,
	      'zip_get'/2,
	      'zip_get_state'/1,
	      'zip_list_dir'/1,
	      'zip_list_dir'/2,
	      'zip_open'/1,
	      'zip_open'/2,
	      'zip_t'/1,
	      'zip_tt'/1]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','zip_file'},[{'typed_record_field',{'record_field',21,{'atom',21,'name'}},{'type',21,'union',[{'atom',21,'undefined'}|[{'type',21,'string',[]}]]}}|[{'typed_record_field',{'record_field',22,{'atom',22,'info'}},{'type',22,'union',[{'atom',22,'undefined'}|[{'remote_type',22,[{'atom',22,'file'}|[{'atom',22,'file_info'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',23,{'atom',23,'comment'}},{'type',23,'union',[{'atom',23,'undefined'}|[{'type',23,'string',[]}]]}}|[{'typed_record_field',{'record_field',24,{'atom',24,'offset'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'type',24,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'comp_size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}]]]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','zip_comment'},[{'typed_record_field',{'record_field',29,{'atom',29,'comment'}},{'type',29,'union',[{'atom',29,'undefined'}|[{'type',29,'string',[]}]]}}],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','unzip_opts'},[{'record_field',57,{'atom',57,'output'}}|[{'record_field',58,{'atom',58,'input'}}|[{'record_field',59,{'atom',59,'file_filter'}}|[{'record_field',60,{'atom',60,'open_opts'}}|[{'record_field',61,{'atom',61,'feedback'}}|[{'record_field',62,{'atom',62,'cwd'}}]]]]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','zip_opts'},[{'record_field',66,{'atom',66,'output'}}|[{'record_field',67,{'atom',67,'input'}}|[{'record_field',68,{'atom',68,'comment'}}|[{'record_field',69,{'atom',69,'open_opts'}}|[{'record_field',70,{'atom',70,'feedback'}}|[{'record_field',71,{'atom',71,'cwd'}}|[{'record_field',72,{'atom',72,'compress'}}|[{'record_field',73,{'atom',73,'uncompress'}}]]]]]]]],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','list_dir_opts'},[{'record_field',77,{'atom',77,'input'}}|[{'record_field',78,{'atom',78,'raw_iterator'}}|[{'record_field',79,{'atom',79,'open_opts'}}]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','openzip_opts'},[{'record_field',83,{'atom',83,'output'}}|[{'record_field',84,{'atom',84,'open_opts'}}|[{'record_field',85,{'atom',85,'cwd'}}]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','openzip'},[{'record_field',90,{'atom',90,'zip_comment'}}|[{'record_field',91,{'atom',91,'files'}}|[{'record_field',92,{'atom',92,'in'}}|[{'record_field',93,{'atom',93,'input'}}|[{'record_field',94,{'atom',94,'output'}}|[{'record_field',95,{'atom',95,'zlib'}}|[{'record_field',96,{'atom',96,'cwd'}}]]]]]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','zip_file_extra'},[{'record_field',103,{'atom',103,'crc32'}}],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','local_file_header'},[{'record_field',144,{'atom',144,'version_needed'}}|[{'record_field',145,{'atom',145,'gp_flag'}}|[{'record_field',146,{'atom',146,'comp_method'}}|[{'record_field',147,{'atom',147,'last_mod_time'}}|[{'record_field',148,{'atom',148,'last_mod_date'}}|[{'record_field',149,{'atom',149,'crc32'}}|[{'record_field',150,{'atom',150,'comp_size'}}|[{'record_field',151,{'atom',151,'uncomp_size'}}|[{'record_field',152,{'atom',152,'file_name_length'}}|[{'record_field',153,{'atom',153,'extra_field_length'}}]]]]]]]]]],[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','cd_file_header'},[{'record_field',164,{'atom',164,'version_made_by'}}|[{'record_field',165,{'atom',165,'version_needed'}}|[{'record_field',166,{'atom',166,'gp_flag'}}|[{'record_field',167,{'atom',167,'comp_method'}}|[{'record_field',168,{'atom',168,'last_mod_time'}}|[{'record_field',169,{'atom',169,'last_mod_date'}}|[{'record_field',170,{'atom',170,'crc32'}}|[{'record_field',171,{'atom',171,'comp_size'}}|[{'record_field',172,{'atom',172,'uncomp_size'}}|[{'record_field',173,{'atom',173,'file_name_length'}}|[{'record_field',174,{'atom',174,'extra_field_length'}}|[{'record_field',175,{'atom',175,'file_comment_length'}}|[{'record_field',176,{'atom',176,'disk_num_start'}}|[{'record_field',177,{'atom',177,'internal_attr'}}|[{'record_field',178,{'atom',178,'external_attr'}}|[{'record_field',179,{'atom',179,'local_header_offset'}}]]]]]]]]]]]]]]]],[]}],
		%% Line 183
		'type' =
		    %% Line 183
		    [{{'record','unix_extra_field'},[{'record_field',183,{'atom',183,'atime'}}|[{'record_field',184,{'atom',184,'mtime'}}|[{'record_field',185,{'atom',185,'uid'}}|[{'record_field',186,{'atom',186,'gid'}}]]]],[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','eocd'},[{'record_field',197,{'atom',197,'disk_num'}}|[{'record_field',198,{'atom',198,'start_disk_num'}}|[{'record_field',199,{'atom',199,'entries_on_disk'}}|[{'record_field',200,{'atom',200,'entries'}}|[{'record_field',201,{'atom',201,'size'}}|[{'record_field',202,{'atom',202,'offset'}}|[{'record_field',203,{'atom',203,'zip_comment_length'}}]]]]]]],[]}],
		%% Line 206
		'type' =
		    %% Line 206
		    [{'create_option',{'type',206,'union',[{'atom',206,'memory'}|[{'atom',206,'cooked'}|[{'atom',206,'verbose'}|[{'type',206,'tuple',[{'atom',206,'comment'}|[{'type',206,'string',[]}]]}|[{'type',207,'tuple',[{'atom',207,'cwd'}|[{'remote_type',207,[{'atom',207,'file'}|[{'atom',207,'filename'}|[[]]]]}]]}|[{'type',208,'tuple',[{'atom',208,'compress'}|[{'type',208,'extension_spec',[]}]]}|[{'type',209,'tuple',[{'atom',209,'uncompress'}|[{'type',209,'extension_spec',[]}]]}]]]]]]]},[]}],
		%% Line 210
		'type' =
		    %% Line 210
		    [{'extension',{'type',210,'string',[]},[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'extension_spec',{'type',211,'union',[{'atom',211,'all'}|[{'type',211,'list',[{'type',211,'extension',[]}]}|[{'type',211,'tuple',[{'atom',211,'add'}|[{'type',211,'list',[{'type',211,'extension',[]}]}]]}|[{'type',211,'tuple',[{'atom',211,'del'}|[{'type',211,'list',[{'type',211,'extension',[]}]}]]}]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'filename',{'remote_type',212,[{'atom',212,'file'}|[{'atom',212,'filename'}|[[]]]]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{'zip_comment',{'type',214,'record',[{'atom',214,'zip_comment'}]},[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'zip_file',{'type',215,'record',[{'atom',215,'zip_file'}]},[]}],
		%% Line 217
		'export_type' =
		    %% Line 217
		    [{'create_option',0}|[{'filename',0}]],
		%% Line 339
		'spec' =
		    %% Line 339
		    [{{'unzip',1},[{'type',339,'bounded_fun',[{'type',339,'fun',[{'type',339,'product',[{'var',339,'Archive'}]}|[{'var',339,'RetValue'}]]}|[[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Archive'}|[{'type',340,'union',[{'remote_type',340,[{'atom',340,'file'}|[{'atom',340,'name'}|[[]]]]}|[{'type',340,'binary',[]}]]}]]]]}|[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'RetValue'}|[{'type',341,'union',[{'type',341,'tuple',[{'atom',341,'ok'}|[{'var',341,'FileList'}]]}|[{'type',342,'tuple',[{'atom',342,'ok'}|[{'var',342,'FileBinList'}]]}|[{'type',343,'tuple',[{'atom',343,'error'}|[{'ann_type',343,[{'var',343,'Reason'}|[{'type',343,'term',[]}]]}]]}|[{'type',344,'tuple',[{'atom',344,'error'}|[{'type',344,'tuple',[{'ann_type',344,[{'var',344,'Name'}|[{'remote_type',344,[{'atom',344,'file'}|[{'atom',344,'name'}|[[]]]]}]]}|[{'ann_type',344,[{'var',344,'Reason'}|[{'type',344,'term',[]}]]}]]}]]}]]]]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'FileList'}|[{'type',345,'list',[{'remote_type',345,[{'atom',345,'file'}|[{'atom',345,'name'}|[[]]]]}]}]]]]}|[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'FileBinList'}|[{'type',346,'list',[{'type',346,'tuple',[{'remote_type',346,[{'atom',346,'file'}|[{'atom',346,'name'}|[[]]]]}|[{'type',346,'binary',[]}]]}]}]]]]}]]]]]]}]}],
		%% Line 350
		'spec' =
		    %% Line 350
		    [{{'unzip',2},[{'type',350,'bounded_fun',[{'type',350,'fun',[{'type',350,'product',[{'var',350,'Archive'}|[{'var',350,'Options'}]]}|[{'var',350,'RetValue'}]]}|[[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'Archive'}|[{'type',351,'union',[{'remote_type',351,[{'atom',351,'file'}|[{'atom',351,'name'}|[[]]]]}|[{'type',351,'binary',[]}]]}]]]]}|[{'type',352,'constraint',[{'atom',352,'is_subtype'}|[[{'var',352,'Options'}|[{'type',352,'list',[{'var',352,'Option'}]}]]]]}|[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'Option'}|[{'type',353,'union',[{'type',353,'tuple',[{'atom',353,'file_list'}|[{'var',353,'FileList'}]]}|[{'atom',353,'cooked'}|[{'atom',354,'keep_old_files'}|[{'atom',354,'verbose'}|[{'atom',354,'memory'}|[{'type',355,'tuple',[{'atom',355,'file_filter'}|[{'var',355,'FileFilter'}]]}|[{'type',355,'tuple',[{'atom',355,'cwd'}|[{'var',355,'CWD'}]]}]]]]]]]}]]]]}|[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'FileList'}|[{'type',356,'list',[{'remote_type',356,[{'atom',356,'file'}|[{'atom',356,'name'}|[[]]]]}]}]]]]}|[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'FileBinList'}|[{'type',357,'list',[{'type',357,'tuple',[{'remote_type',357,[{'atom',357,'file'}|[{'atom',357,'name'}|[[]]]]}|[{'type',357,'binary',[]}]]}]}]]]]}|[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'FileFilter'}|[{'type',358,'fun',[{'type',358,'product',[{'var',358,'ZipFile'}]}|[{'type',358,'boolean',[]}]]}]]]]}|[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'CWD'}|[{'remote_type',359,[{'atom',359,'file'}|[{'atom',359,'filename'}|[[]]]]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'ZipFile'}|[{'type',360,'zip_file',[]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'RetValue'}|[{'type',361,'union',[{'type',361,'tuple',[{'atom',361,'ok'}|[{'var',361,'FileList'}]]}|[{'type',362,'tuple',[{'atom',362,'ok'}|[{'var',362,'FileBinList'}]]}|[{'type',363,'tuple',[{'atom',363,'error'}|[{'ann_type',363,[{'var',363,'Reason'}|[{'type',363,'term',[]}]]}]]}|[{'type',364,'tuple',[{'atom',364,'error'}|[{'type',364,'tuple',[{'ann_type',364,[{'var',364,'Name'}|[{'remote_type',364,[{'atom',364,'file'}|[{'atom',364,'name'}|[[]]]]}]]}|[{'ann_type',364,[{'var',364,'Reason'}|[{'type',364,'term',[]}]]}]]}]]}]]]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 386
		'spec' =
		    %% Line 386
		    [{{'foldl',3},[{'type',386,'bounded_fun',[{'type',386,'fun',[{'type',386,'product',[{'var',386,'Fun'}|[{'var',386,'Acc0'}|[{'var',386,'Archive'}]]]}|[{'type',386,'union',[{'type',386,'tuple',[{'atom',386,'ok'}|[{'var',386,'Acc1'}]]}|[{'type',386,'tuple',[{'atom',386,'error'}|[{'var',386,'Reason'}]]}]]}]]}|[[{'type',387,'constraint',[{'atom',387,'is_subtype'}|[[{'var',387,'Fun'}|[{'type',387,'fun',[{'type',387,'product',[{'var',387,'FileInArchive'}|[{'var',387,'GetInfo'}|[{'var',387,'GetBin'}|[{'var',387,'AccIn'}]]]]}|[{'var',387,'AccOut'}]]}]]]]}|[{'type',388,'constraint',[{'atom',388,'is_subtype'}|[[{'var',388,'FileInArchive'}|[{'remote_type',388,[{'atom',388,'file'}|[{'atom',388,'name'}|[[]]]]}]]]]}|[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'GetInfo'}|[{'type',389,'fun',[{'type',389,'product',[]}|[{'remote_type',389,[{'atom',389,'file'}|[{'atom',389,'file_info'}|[[]]]]}]]}]]]]}|[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'GetBin'}|[{'type',390,'fun',[{'type',390,'product',[]}|[{'type',390,'binary',[]}]]}]]]]}|[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Acc0'}|[{'type',391,'term',[]}]]]]}|[{'type',392,'constraint',[{'atom',392,'is_subtype'}|[[{'var',392,'Acc1'}|[{'type',392,'term',[]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'AccIn'}|[{'type',393,'term',[]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'AccOut'}|[{'type',394,'term',[]}]]]]}|[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'Archive'}|[{'type',395,'union',[{'remote_type',395,[{'atom',395,'file'}|[{'atom',395,'name'}|[[]]]]}|[{'type',395,'tuple',[{'remote_type',395,[{'atom',395,'file'}|[{'atom',395,'name'}|[[]]]]}|[{'type',395,'binary',[]}]]}]]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Reason'}|[{'type',396,'term',[]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 421
		'spec' =
		    %% Line 421
		    [{{'zip',2},[{'type',421,'bounded_fun',[{'type',421,'fun',[{'type',421,'product',[{'var',421,'Name'}|[{'var',421,'FileList'}]]}|[{'var',421,'RetValue'}]]}|[[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Name'}|[{'remote_type',422,[{'atom',422,'file'}|[{'atom',422,'name'}|[[]]]]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'FileList'}|[{'type',423,'list',[{'var',423,'FileSpec'}]}]]]]}|[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'FileSpec'}|[{'type',424,'union',[{'remote_type',424,[{'atom',424,'file'}|[{'atom',424,'name'}|[[]]]]}|[{'type',424,'tuple',[{'remote_type',424,[{'atom',424,'file'}|[{'atom',424,'name'}|[[]]]]}|[{'type',424,'binary',[]}]]}|[{'type',425,'tuple',[{'remote_type',425,[{'atom',425,'file'}|[{'atom',425,'name'}|[[]]]]}|[{'type',425,'binary',[]}|[{'remote_type',425,[{'atom',425,'file'}|[{'atom',425,'file_info'}|[[]]]]}]]]}]]]}]]]]}|[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'RetValue'}|[{'type',426,'union',[{'type',426,'tuple',[{'atom',426,'ok'}|[{'ann_type',426,[{'var',426,'FileName'}|[{'remote_type',426,[{'atom',426,'file'}|[{'atom',426,'name'}|[[]]]]}]]}]]}|[{'type',427,'tuple',[{'atom',427,'ok'}|[{'type',427,'tuple',[{'ann_type',427,[{'var',427,'FileName'}|[{'remote_type',427,[{'atom',427,'file'}|[{'atom',427,'name'}|[[]]]]}]]}|[{'type',427,'binary',[]}]]}]]}|[{'type',428,'tuple',[{'atom',428,'error'}|[{'ann_type',428,[{'var',428,'Reason'}|[{'type',428,'term',[]}]]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 432
		'spec' =
		    %% Line 432
		    [{{'zip',3},[{'type',432,'bounded_fun',[{'type',432,'fun',[{'type',432,'product',[{'var',432,'Name'}|[{'var',432,'FileList'}|[{'var',432,'Options'}]]]}|[{'var',432,'RetValue'}]]}|[[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'Name'}|[{'remote_type',433,[{'atom',433,'file'}|[{'atom',433,'name'}|[[]]]]}]]]]}|[{'type',434,'constraint',[{'atom',434,'is_subtype'}|[[{'var',434,'FileList'}|[{'type',434,'list',[{'var',434,'FileSpec'}]}]]]]}|[{'type',435,'constraint',[{'atom',435,'is_subtype'}|[[{'var',435,'FileSpec'}|[{'type',435,'union',[{'remote_type',435,[{'atom',435,'file'}|[{'atom',435,'name'}|[[]]]]}|[{'type',435,'tuple',[{'remote_type',435,[{'atom',435,'file'}|[{'atom',435,'name'}|[[]]]]}|[{'type',435,'binary',[]}]]}|[{'type',436,'tuple',[{'remote_type',436,[{'atom',436,'file'}|[{'atom',436,'name'}|[[]]]]}|[{'type',436,'binary',[]}|[{'remote_type',436,[{'atom',436,'file'}|[{'atom',436,'file_info'}|[[]]]]}]]]}]]]}]]]]}|[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'Options'}|[{'type',437,'list',[{'var',437,'Option'}]}]]]]}|[{'type',438,'constraint',[{'atom',438,'is_subtype'}|[[{'var',438,'Option'}|[{'type',438,'union',[{'atom',438,'memory'}|[{'atom',438,'cooked'}|[{'atom',438,'verbose'}|[{'type',438,'tuple',[{'atom',438,'comment'}|[{'var',438,'Comment'}]]}|[{'type',439,'tuple',[{'atom',439,'cwd'}|[{'var',439,'CWD'}]]}|[{'type',439,'tuple',[{'atom',439,'compress'}|[{'var',439,'What'}]]}|[{'type',439,'tuple',[{'atom',439,'uncompress'}|[{'var',439,'What'}]]}]]]]]]]}]]]]}|[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'What'}|[{'type',440,'union',[{'atom',440,'all'}|[{'type',440,'list',[{'var',440,'Extension'}]}|[{'type',440,'tuple',[{'atom',440,'add'}|[{'type',440,'list',[{'var',440,'Extension'}]}]]}|[{'type',440,'tuple',[{'atom',440,'del'}|[{'type',440,'list',[{'var',440,'Extension'}]}]]}]]]]}]]]]}|[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'Extension'}|[{'type',441,'string',[]}]]]]}|[{'type',442,'constraint',[{'atom',442,'is_subtype'}|[[{'var',442,'Comment'}|[{'type',442,'string',[]}]]]]}|[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'CWD'}|[{'remote_type',443,[{'atom',443,'file'}|[{'atom',443,'filename'}|[[]]]]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'RetValue'}|[{'type',444,'union',[{'type',444,'tuple',[{'atom',444,'ok'}|[{'ann_type',444,[{'var',444,'FileName'}|[{'remote_type',444,[{'atom',444,'file'}|[{'atom',444,'name'}|[[]]]]}]]}]]}|[{'type',445,'tuple',[{'atom',445,'ok'}|[{'type',445,'tuple',[{'ann_type',445,[{'var',445,'FileName'}|[{'remote_type',445,[{'atom',445,'file'}|[{'atom',445,'name'}|[[]]]]}]]}|[{'type',445,'binary',[]}]]}]]}|[{'type',446,'tuple',[{'atom',446,'error'}|[{'ann_type',446,[{'var',446,'Reason'}|[{'type',446,'term',[]}]]}]]}]]]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 470
		'spec' =
		    %% Line 470
		    [{{'list_dir',1},[{'type',470,'bounded_fun',[{'type',470,'fun',[{'type',470,'product',[{'var',470,'Archive'}]}|[{'var',470,'RetValue'}]]}|[[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'Archive'}|[{'type',471,'union',[{'remote_type',471,[{'atom',471,'file'}|[{'atom',471,'name'}|[[]]]]}|[{'type',471,'binary',[]}]]}]]]]}|[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'RetValue'}|[{'type',472,'union',[{'type',472,'tuple',[{'atom',472,'ok'}|[{'var',472,'CommentAndFiles'}]]}|[{'type',472,'tuple',[{'atom',472,'error'}|[{'ann_type',472,[{'var',472,'Reason'}|[{'type',472,'term',[]}]]}]]}]]}]]]]}|[{'type',473,'constraint',[{'atom',473,'is_subtype'}|[[{'var',473,'CommentAndFiles'}|[{'type',473,'list',[{'type',473,'union',[{'type',473,'zip_comment',[]}|[{'type',473,'zip_file',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 477
		'spec' =
		    %% Line 477
		    [{{'list_dir',2},[{'type',477,'bounded_fun',[{'type',477,'fun',[{'type',477,'product',[{'var',477,'Archive'}|[{'var',477,'Options'}]]}|[{'var',477,'RetValue'}]]}|[[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'Archive'}|[{'type',478,'union',[{'remote_type',478,[{'atom',478,'file'}|[{'atom',478,'name'}|[[]]]]}|[{'type',478,'binary',[]}]]}]]]]}|[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'RetValue'}|[{'type',479,'union',[{'type',479,'tuple',[{'atom',479,'ok'}|[{'var',479,'CommentAndFiles'}]]}|[{'type',479,'tuple',[{'atom',479,'error'}|[{'ann_type',479,[{'var',479,'Reason'}|[{'type',479,'term',[]}]]}]]}]]}]]]]}|[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'CommentAndFiles'}|[{'type',480,'list',[{'type',480,'union',[{'type',480,'zip_comment',[]}|[{'type',480,'zip_file',[]}]]}]}]]]]}|[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Options'}|[{'type',481,'list',[{'var',481,'Option'}]}]]]]}|[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'Option'}|[{'atom',482,'cooked'}]]]]}]]]]]]]}]}],
		%% Line 501
		'spec' =
		    %% Line 501
		    [{{'t',1},[{'type',501,'bounded_fun',[{'type',501,'fun',[{'type',501,'product',[{'var',501,'Archive'}]}|[{'atom',501,'ok'}]]}|[[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'Archive'}|[{'type',502,'union',[{'remote_type',502,[{'atom',502,'file'}|[{'atom',502,'name'}|[[]]]]}|[{'type',502,'binary',[]}|[{'var',502,'ZipHandle'}]]]}]]]]}|[{'type',503,'constraint',[{'atom',503,'is_subtype'}|[[{'var',503,'ZipHandle'}|[{'type',503,'pid',[]}]]]]}]]]]}]}],
		%% Line 525
		'spec' =
		    %% Line 525
		    [{{'tt',1},[{'type',525,'bounded_fun',[{'type',525,'fun',[{'type',525,'product',[{'var',525,'Archive'}]}|[{'atom',525,'ok'}]]}|[[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'Archive'}|[{'type',526,'union',[{'remote_type',526,[{'atom',526,'file'}|[{'atom',526,'name'}|[[]]]]}|[{'type',526,'binary',[]}|[{'var',526,'ZipHandle'}]]]}]]]]}|[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'ZipHandle'}|[{'type',527,'pid',[]}]]]]}]]]]}]}],
		%% Line 703
		'spec' =
		    %% Line 703
		    [{{'table',1},[{'type',703,'bounded_fun',[{'type',703,'fun',[{'type',703,'product',[{'var',703,'Archive'}]}|[{'var',703,'RetValue'}]]}|[[{'type',704,'constraint',[{'atom',704,'is_subtype'}|[[{'var',704,'Archive'}|[{'type',704,'union',[{'remote_type',704,[{'atom',704,'file'}|[{'atom',704,'name'}|[[]]]]}|[{'type',704,'binary',[]}]]}]]]]}|[{'type',705,'constraint',[{'atom',705,'is_subtype'}|[[{'var',705,'RetValue'}|[{'type',705,'union',[{'type',705,'tuple',[{'atom',705,'ok'}|[{'var',705,'CommentAndFiles'}]]}|[{'type',705,'tuple',[{'atom',705,'error'}|[{'ann_type',705,[{'var',705,'Reason'}|[{'type',705,'term',[]}]]}]]}]]}]]]]}|[{'type',706,'constraint',[{'atom',706,'is_subtype'}|[[{'var',706,'CommentAndFiles'}|[{'type',706,'list',[{'type',706,'union',[{'type',706,'zip_comment',[]}|[{'type',706,'zip_file',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 710
		'spec' =
		    %% Line 710
		    [{{'table',2},[{'type',710,'bounded_fun',[{'type',710,'fun',[{'type',710,'product',[{'var',710,'Archive'}|[{'var',710,'Options'}]]}|[{'var',710,'RetValue'}]]}|[[{'type',711,'constraint',[{'atom',711,'is_subtype'}|[[{'var',711,'Archive'}|[{'type',711,'union',[{'remote_type',711,[{'atom',711,'file'}|[{'atom',711,'name'}|[[]]]]}|[{'type',711,'binary',[]}]]}]]]]}|[{'type',712,'constraint',[{'atom',712,'is_subtype'}|[[{'var',712,'RetValue'}|[{'type',712,'union',[{'type',712,'tuple',[{'atom',712,'ok'}|[{'var',712,'CommentAndFiles'}]]}|[{'type',712,'tuple',[{'atom',712,'error'}|[{'ann_type',712,[{'var',712,'Reason'}|[{'type',712,'term',[]}]]}]]}]]}]]]]}|[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'CommentAndFiles'}|[{'type',713,'list',[{'type',713,'union',[{'type',713,'zip_comment',[]}|[{'type',713,'zip_file',[]}]]}]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Options'}|[{'type',715,'list',[{'var',715,'Option'}]}]]]]}|[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'Option'}|[{'atom',716,'cooked'}]]]]}]]]]]]]}]}],
		%% Line 720
		'spec' =
		    %% Line 720
		    [{{'create',2},[{'type',720,'bounded_fun',[{'type',720,'fun',[{'type',720,'product',[{'var',720,'Name'}|[{'var',720,'FileList'}]]}|[{'var',720,'RetValue'}]]}|[[{'type',721,'constraint',[{'atom',721,'is_subtype'}|[[{'var',721,'Name'}|[{'remote_type',721,[{'atom',721,'file'}|[{'atom',721,'name'}|[[]]]]}]]]]}|[{'type',722,'constraint',[{'atom',722,'is_subtype'}|[[{'var',722,'FileList'}|[{'type',722,'list',[{'var',722,'FileSpec'}]}]]]]}|[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'FileSpec'}|[{'type',723,'union',[{'remote_type',723,[{'atom',723,'file'}|[{'atom',723,'name'}|[[]]]]}|[{'type',723,'tuple',[{'remote_type',723,[{'atom',723,'file'}|[{'atom',723,'name'}|[[]]]]}|[{'type',723,'binary',[]}]]}|[{'type',724,'tuple',[{'remote_type',724,[{'atom',724,'file'}|[{'atom',724,'name'}|[[]]]]}|[{'type',724,'binary',[]}|[{'remote_type',724,[{'atom',724,'file'}|[{'atom',724,'file_info'}|[[]]]]}]]]}]]]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'RetValue'}|[{'type',725,'union',[{'type',725,'tuple',[{'atom',725,'ok'}|[{'ann_type',725,[{'var',725,'FileName'}|[{'type',725,'filename',[]}]]}]]}|[{'type',726,'tuple',[{'atom',726,'ok'}|[{'type',726,'tuple',[{'ann_type',726,[{'var',726,'FileName'}|[{'type',726,'filename',[]}]]}|[{'type',726,'binary',[]}]]}]]}|[{'type',727,'tuple',[{'atom',727,'error'}|[{'ann_type',727,[{'var',727,'Reason'}|[{'type',727,'term',[]}]]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 731
		'spec' =
		    %% Line 731
		    [{{'create',3},[{'type',731,'bounded_fun',[{'type',731,'fun',[{'type',731,'product',[{'var',731,'Name'}|[{'var',731,'FileList'}|[{'var',731,'Options'}]]]}|[{'var',731,'RetValue'}]]}|[[{'type',732,'constraint',[{'atom',732,'is_subtype'}|[[{'var',732,'Name'}|[{'remote_type',732,[{'atom',732,'file'}|[{'atom',732,'name'}|[[]]]]}]]]]}|[{'type',733,'constraint',[{'atom',733,'is_subtype'}|[[{'var',733,'FileList'}|[{'type',733,'list',[{'var',733,'FileSpec'}]}]]]]}|[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'FileSpec'}|[{'type',734,'union',[{'remote_type',734,[{'atom',734,'file'}|[{'atom',734,'name'}|[[]]]]}|[{'type',734,'tuple',[{'remote_type',734,[{'atom',734,'file'}|[{'atom',734,'name'}|[[]]]]}|[{'type',734,'binary',[]}]]}|[{'type',735,'tuple',[{'remote_type',735,[{'atom',735,'file'}|[{'atom',735,'name'}|[[]]]]}|[{'type',735,'binary',[]}|[{'remote_type',735,[{'atom',735,'file'}|[{'atom',735,'file_info'}|[[]]]]}]]]}]]]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'Options'}|[{'type',736,'list',[{'var',736,'Option'}]}]]]]}|[{'type',737,'constraint',[{'atom',737,'is_subtype'}|[[{'var',737,'Option'}|[{'type',737,'create_option',[]}]]]]}|[{'type',738,'constraint',[{'atom',738,'is_subtype'}|[[{'var',738,'RetValue'}|[{'type',738,'union',[{'type',738,'tuple',[{'atom',738,'ok'}|[{'ann_type',738,[{'var',738,'FileName'}|[{'type',738,'filename',[]}]]}]]}|[{'type',739,'tuple',[{'atom',739,'ok'}|[{'type',739,'tuple',[{'ann_type',739,[{'var',739,'FileName'}|[{'type',739,'filename',[]}]]}|[{'type',739,'binary',[]}]]}]]}|[{'type',740,'tuple',[{'atom',740,'error'}|[{'ann_type',740,[{'var',740,'Reason'}|[{'type',740,'term',[]}]]}]]}]]]}]]]]}]]]]]]]]}]}],
		%% Line 743
		'spec' =
		    %% Line 743
		    [{{'extract',1},[{'type',743,'bounded_fun',[{'type',743,'fun',[{'type',743,'product',[{'var',743,'Archive'}]}|[{'var',743,'RetValue'}]]}|[[{'type',744,'constraint',[{'atom',744,'is_subtype'}|[[{'var',744,'Archive'}|[{'type',744,'union',[{'remote_type',744,[{'atom',744,'file'}|[{'atom',744,'name'}|[[]]]]}|[{'type',744,'binary',[]}]]}]]]]}|[{'type',745,'constraint',[{'atom',745,'is_subtype'}|[[{'var',745,'RetValue'}|[{'type',745,'union',[{'type',745,'tuple',[{'atom',745,'ok'}|[{'var',745,'FileList'}]]}|[{'type',746,'tuple',[{'atom',746,'ok'}|[{'var',746,'FileBinList'}]]}|[{'type',747,'tuple',[{'atom',747,'error'}|[{'ann_type',747,[{'var',747,'Reason'}|[{'type',747,'term',[]}]]}]]}|[{'type',748,'tuple',[{'atom',748,'error'}|[{'type',748,'tuple',[{'ann_type',748,[{'var',748,'Name'}|[{'remote_type',748,[{'atom',748,'file'}|[{'atom',748,'name'}|[[]]]]}]]}|[{'ann_type',748,[{'var',748,'Reason'}|[{'type',748,'term',[]}]]}]]}]]}]]]]}]]]]}|[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'FileList'}|[{'type',749,'list',[{'remote_type',749,[{'atom',749,'file'}|[{'atom',749,'name'}|[[]]]]}]}]]]]}|[{'type',750,'constraint',[{'atom',750,'is_subtype'}|[[{'var',750,'FileBinList'}|[{'type',750,'list',[{'type',750,'tuple',[{'remote_type',750,[{'atom',750,'file'}|[{'atom',750,'name'}|[[]]]]}|[{'type',750,'binary',[]}]]}]}]]]]}]]]]]]}]}],
		%% Line 754
		'spec' =
		    %% Line 754
		    [{{'extract',2},[{'type',754,'bounded_fun',[{'type',754,'fun',[{'type',754,'product',[{'var',754,'Archive'}|[{'var',754,'Options'}]]}|[{'var',754,'RetValue'}]]}|[[{'type',755,'constraint',[{'atom',755,'is_subtype'}|[[{'var',755,'Archive'}|[{'type',755,'union',[{'remote_type',755,[{'atom',755,'file'}|[{'atom',755,'name'}|[[]]]]}|[{'type',755,'binary',[]}]]}]]]]}|[{'type',756,'constraint',[{'atom',756,'is_subtype'}|[[{'var',756,'Options'}|[{'type',756,'list',[{'var',756,'Option'}]}]]]]}|[{'type',757,'constraint',[{'atom',757,'is_subtype'}|[[{'var',757,'Option'}|[{'type',757,'union',[{'type',757,'tuple',[{'atom',757,'file_list'}|[{'var',757,'FileList'}]]}|[{'atom',758,'keep_old_files'}|[{'atom',758,'verbose'}|[{'atom',758,'memory'}|[{'type',759,'tuple',[{'atom',759,'file_filter'}|[{'var',759,'FileFilter'}]]}|[{'type',759,'tuple',[{'atom',759,'cwd'}|[{'var',759,'CWD'}]]}]]]]]]}]]]]}|[{'type',760,'constraint',[{'atom',760,'is_subtype'}|[[{'var',760,'FileList'}|[{'type',760,'list',[{'remote_type',760,[{'atom',760,'file'}|[{'atom',760,'name'}|[[]]]]}]}]]]]}|[{'type',761,'constraint',[{'atom',761,'is_subtype'}|[[{'var',761,'FileBinList'}|[{'type',761,'list',[{'type',761,'tuple',[{'remote_type',761,[{'atom',761,'file'}|[{'atom',761,'name'}|[[]]]]}|[{'type',761,'binary',[]}]]}]}]]]]}|[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'FileFilter'}|[{'type',762,'fun',[{'type',762,'product',[{'var',762,'ZipFile'}]}|[{'type',762,'boolean',[]}]]}]]]]}|[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'CWD'}|[{'remote_type',763,[{'atom',763,'file'}|[{'atom',763,'filename'}|[[]]]]}]]]]}|[{'type',764,'constraint',[{'atom',764,'is_subtype'}|[[{'var',764,'ZipFile'}|[{'type',764,'zip_file',[]}]]]]}|[{'type',765,'constraint',[{'atom',765,'is_subtype'}|[[{'var',765,'RetValue'}|[{'type',765,'union',[{'type',765,'tuple',[{'atom',765,'ok'}|[{'var',765,'FileList'}]]}|[{'type',766,'tuple',[{'atom',766,'ok'}|[{'var',766,'FileBinList'}]]}|[{'type',767,'tuple',[{'atom',767,'error'}|[{'ann_type',767,[{'var',767,'Reason'}|[{'type',767,'term',[]}]]}]]}|[{'type',768,'tuple',[{'atom',768,'error'}|[{'type',768,'tuple',[{'ann_type',768,[{'var',768,'Name'}|[{'remote_type',768,[{'atom',768,'file'}|[{'atom',768,'name'}|[[]]]]}]]}|[{'ann_type',768,[{'var',768,'Reason'}|[{'type',768,'term',[]}]]}]]}]]}]]]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 1150
		'spec' =
		    %% Line 1150
		    [{{'zip_open',1},[{'type',1150,'bounded_fun',[{'type',1150,'fun',[{'type',1150,'product',[{'var',1150,'Archive'}]}|[{'type',1150,'union',[{'type',1150,'tuple',[{'atom',1150,'ok'}|[{'var',1150,'ZipHandle'}]]}|[{'type',1150,'tuple',[{'atom',1150,'error'}|[{'var',1150,'Reason'}]]}]]}]]}|[[{'type',1151,'constraint',[{'atom',1151,'is_subtype'}|[[{'var',1151,'Archive'}|[{'type',1151,'union',[{'remote_type',1151,[{'atom',1151,'file'}|[{'atom',1151,'name'}|[[]]]]}|[{'type',1151,'binary',[]}]]}]]]]}|[{'type',1152,'constraint',[{'atom',1152,'is_subtype'}|[[{'var',1152,'ZipHandle'}|[{'type',1152,'pid',[]}]]]]}|[{'type',1153,'constraint',[{'atom',1153,'is_subtype'}|[[{'var',1153,'Reason'}|[{'type',1153,'term',[]}]]]]}]]]]]}]}],
		%% Line 1157
		'spec' =
		    %% Line 1157
		    [{{'zip_open',2},[{'type',1157,'bounded_fun',[{'type',1157,'fun',[{'type',1157,'product',[{'var',1157,'Archive'}|[{'var',1157,'Options'}]]}|[{'type',1157,'union',[{'type',1157,'tuple',[{'atom',1157,'ok'}|[{'var',1157,'ZipHandle'}]]}|[{'type',1157,'tuple',[{'atom',1157,'error'}|[{'var',1157,'Reason'}]]}]]}]]}|[[{'type',1158,'constraint',[{'atom',1158,'is_subtype'}|[[{'var',1158,'Archive'}|[{'type',1158,'union',[{'remote_type',1158,[{'atom',1158,'file'}|[{'atom',1158,'name'}|[[]]]]}|[{'type',1158,'binary',[]}]]}]]]]}|[{'type',1159,'constraint',[{'atom',1159,'is_subtype'}|[[{'var',1159,'ZipHandle'}|[{'type',1159,'pid',[]}]]]]}|[{'type',1160,'constraint',[{'atom',1160,'is_subtype'}|[[{'var',1160,'Options'}|[{'type',1160,'list',[{'var',1160,'Option'}]}]]]]}|[{'type',1161,'constraint',[{'atom',1161,'is_subtype'}|[[{'var',1161,'Option'}|[{'type',1161,'union',[{'atom',1161,'cooked'}|[{'atom',1161,'memory'}|[{'type',1161,'tuple',[{'atom',1161,'cwd'}|[{'ann_type',1161,[{'var',1161,'CWD'}|[{'remote_type',1161,[{'atom',1161,'file'}|[{'atom',1161,'filename'}|[[]]]]}]]}]]}]]]}]]]]}|[{'type',1162,'constraint',[{'atom',1162,'is_subtype'}|[[{'var',1162,'Reason'}|[{'type',1162,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1168
		'spec' =
		    %% Line 1168
		    [{{'zip_get',1},[{'type',1168,'bounded_fun',[{'type',1168,'fun',[{'type',1168,'product',[{'var',1168,'ZipHandle'}]}|[{'type',1168,'union',[{'type',1168,'tuple',[{'atom',1168,'ok'}|[{'type',1168,'list',[{'var',1168,'Result'}]}]]}|[{'type',1168,'tuple',[{'atom',1168,'error'}|[{'var',1168,'Reason'}]]}]]}]]}|[[{'type',1169,'constraint',[{'atom',1169,'is_subtype'}|[[{'var',1169,'ZipHandle'}|[{'type',1169,'pid',[]}]]]]}|[{'type',1170,'constraint',[{'atom',1170,'is_subtype'}|[[{'var',1170,'Result'}|[{'type',1170,'union',[{'remote_type',1170,[{'atom',1170,'file'}|[{'atom',1170,'name'}|[[]]]]}|[{'type',1170,'tuple',[{'remote_type',1170,[{'atom',1170,'file'}|[{'atom',1170,'name'}|[[]]]]}|[{'type',1170,'binary',[]}]]}]]}]]]]}|[{'type',1171,'constraint',[{'atom',1171,'is_subtype'}|[[{'var',1171,'Reason'}|[{'type',1171,'term',[]}]]]]}]]]]]}]}],
		%% Line 1176
		'spec' =
		    %% Line 1176
		    [{{'zip_close',1},[{'type',1176,'bounded_fun',[{'type',1176,'fun',[{'type',1176,'product',[{'var',1176,'ZipHandle'}]}|[{'type',1176,'union',[{'atom',1176,'ok'}|[{'type',1176,'tuple',[{'atom',1176,'error'}|[{'atom',1176,'einval'}]]}]]}]]}|[[{'type',1177,'constraint',[{'atom',1177,'is_subtype'}|[[{'var',1177,'ZipHandle'}|[{'type',1177,'pid',[]}]]]]}]]]}]}],
		%% Line 1182
		'spec' =
		    %% Line 1182
		    [{{'zip_get',2},[{'type',1182,'bounded_fun',[{'type',1182,'fun',[{'type',1182,'product',[{'var',1182,'FileName'}|[{'var',1182,'ZipHandle'}]]}|[{'type',1182,'union',[{'type',1182,'tuple',[{'atom',1182,'ok'}|[{'var',1182,'Result'}]]}|[{'type',1182,'tuple',[{'atom',1182,'error'}|[{'var',1182,'Reason'}]]}]]}]]}|[[{'type',1183,'constraint',[{'atom',1183,'is_subtype'}|[[{'var',1183,'FileName'}|[{'remote_type',1183,[{'atom',1183,'file'}|[{'atom',1183,'name'}|[[]]]]}]]]]}|[{'type',1184,'constraint',[{'atom',1184,'is_subtype'}|[[{'var',1184,'ZipHandle'}|[{'type',1184,'pid',[]}]]]]}|[{'type',1185,'constraint',[{'atom',1185,'is_subtype'}|[[{'var',1185,'Result'}|[{'type',1185,'union',[{'remote_type',1185,[{'atom',1185,'file'}|[{'atom',1185,'name'}|[[]]]]}|[{'type',1185,'tuple',[{'remote_type',1185,[{'atom',1185,'file'}|[{'atom',1185,'name'}|[[]]]]}|[{'type',1185,'binary',[]}]]}]]}]]]]}|[{'type',1186,'constraint',[{'atom',1186,'is_subtype'}|[[{'var',1186,'Reason'}|[{'type',1186,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1191
		'spec' =
		    %% Line 1191
		    [{{'zip_list_dir',1},[{'type',1191,'bounded_fun',[{'type',1191,'fun',[{'type',1191,'product',[{'var',1191,'ZipHandle'}]}|[{'type',1191,'union',[{'type',1191,'tuple',[{'atom',1191,'ok'}|[{'var',1191,'Result'}]]}|[{'type',1191,'tuple',[{'atom',1191,'error'}|[{'var',1191,'Reason'}]]}]]}]]}|[[{'type',1192,'constraint',[{'atom',1192,'is_subtype'}|[[{'var',1192,'Result'}|[{'type',1192,'list',[{'type',1192,'union',[{'type',1192,'zip_comment',[]}|[{'type',1192,'zip_file',[]}]]}]}]]]]}|[{'type',1193,'constraint',[{'atom',1193,'is_subtype'}|[[{'var',1193,'ZipHandle'}|[{'type',1193,'pid',[]}]]]]}|[{'type',1194,'constraint',[{'atom',1194,'is_subtype'}|[[{'var',1194,'Reason'}|[{'type',1194,'term',[]}]]]]}]]]]]}]}]]
'openzip_open'/1 =
    %% Line 222
    fun (_cor0) ->
	%% Line 223
	apply 'openzip_open'/2
	    (_cor0, [])
'openzip_open'/2 =
    %% Line 225
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 226
		apply 'do_openzip_open'/2
		    (_cor1, _cor0)
	in  %% Line 226
	    case _cor2 of
	      %% Line 227
	      <{'ok',OpenZip}> when 'true' ->
		  %% Line 228
		  {'ok',OpenZip}
	      %% Line 229
	      <Error> when 'true' ->
		  %% Line 230
		  {'error',Error}
	    end
'do_openzip_open'/2 =
    %% Line 233
    fun (_cor1,_cor0) ->
	%% Line 235
	case apply 'get_openzip_options'/1
		 (_cor0) of
	  <{'openzip_opts',Output,OpO,CWD}> when 'true' ->
	      let <Input> =
		  %% Line 236
		  apply 'get_input'/1
		      (_cor1)
	      in  let <_cor5> =
		      %% Line 237
		      call 'erlang':'--'
			  (OpO, ['write'])
		  in  let <In0> =
			  %% Line 237
			  apply Input
			      ({'open',_cor1,_cor5}, [])
		      in  %% Line 238
			  case %% Line 239
			       apply 'get_central_dir'/3
				   (In0, ( 'raw_file_info_etc'/5
					   -| [{'id',{0,0,'-do_openzip_open/2-fun-0-'}}] ), Input) of
			    <{[{'zip_comment',C}|Files],In1}> when 'true' ->
				let <Z> =
				    %% Line 240
				    call 'zlib':'open'
					()
				in  %% Line 241
				    {'ok',{'openzip',C,%% Line 242
						       Files,%% Line 243
							     In1,%% Line 244
								 Input,%% Line 245
								       Output,%% Line 246
									      Z,%% Line 247
										CWD}}
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'openzip_get'/1 =
    %% Line 250
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 251
		apply 'do_openzip_get'/1
		    (_cor0)
	in  %% Line 251
	    case _cor1 of
	      %% Line 252
	      <{'ok',Result}> when 'true' ->
		  {'ok',Result}
	      %% Line 253
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_openzip_get'/1 =
    %% Line 256
    fun (_cor0) ->
	case _cor0 of
	  <{'openzip',_cor4,Files,In0,Input,%% Line 257
					    Output,%% Line 257
						   Z,%% Line 257
						     CWD}> when 'true' ->
	      let <ZipOpts> =
		  %% Line 258
		  {'unzip_opts',Output,Input,%% Line 259
					     ( 'all'/1
					       -| [{'id',{0,0,'-do_openzip_get/1-fun-0-'}}] ),%% Line 259
											      [],%% Line 260
												 ( 'silent'/1
												   -| [{'id',{0,0,'-do_openzip_get/1-fun-1-'}}] ),%% Line 260
																		  CWD}
	      in  let <R> =
		      %% Line 261
		      apply 'get_z_files'/5
			  (Files, Z, In0, ZipOpts, [])
		  in  %% Line 262
		      {'ok',R}
	  %% Line 263
	  <_cor5> when 'true' ->
	      %% Line 264
	      call 'erlang':'throw'
		  ('einval')
	end
'openzip_get'/2 =
    %% Line 267
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 268
		apply 'do_openzip_get'/2
		    (_cor1, _cor0)
	in  %% Line 268
	    case _cor2 of
	      %% Line 269
	      <{'ok',Result}> when 'true' ->
		  {'ok',Result}
	      %% Line 270
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_openzip_get'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,{'openzip',_cor7,Files,In0,Input,%% Line 274
					      Output,%% Line 274
						     Z,%% Line 274
						       CWD}> when 'true' ->
	      %% Line 276
	      case apply 'file_name_search'/2
		       (F, Files) of
		%% Line 277
		<ZFile = {{'zip_file',_cor8,_cor9,_cor10,Offset,_cor11},_cor12}> when 'true' ->
		    let <In1> =
			%% Line 278
			apply Input
			    ({'seek','bof',Offset}, In0)
		    in  %% Line 279
			case apply 'get_z_file'/8
				 (In1, Z, Input, Output, [], ( 'silent'/1
							       -| [{'id',{0,0,'-do_openzip_get/2-fun-0-'}}] ), CWD, ZFile) of
			  %% Line 280
			  <{'file',R,_X_In2}> when 'true' ->
			      {'ok',R}
			  %% Line 281
			  <_cor13> when 'true' ->
			      call 'erlang':'throw'
				  ('file_not_found')
			end
		%% Line 283
		<_cor14> when 'true' ->
		    call 'erlang':'throw'
			('file_not_found')
	      end
	  %% Line 285
	  <_cor15,_cor16> when 'true' ->
	      %% Line 286
	      call 'erlang':'throw'
		  ('einval')
	end
'file_name_search'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 289
	    ( fun (_cor4) ->
		  case _cor4 of
		    <{ZipFile,_cor10}> when 'true' ->
			( case ZipFile of
			    ( <( {'zip_file',_rec0,_cor11,_cor12,_cor13,_cor14}
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'=/='
				      (_rec0, _cor1)
			      -| ['compiler_generated'] )
			    ( <_cor15> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_file'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor5})
			    -| [{'function_name',{'-file_name_search/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-file_name_search/2-fun-0-'}}] )
	in  %% Line 289
	    case call 'lists':'dropwhile'
		     (_cor6, _cor0) of
	      %% Line 291
	      <[ZFile|_cor16]> when 'true' ->
		  ZFile
	      %% Line 292
	      <[]> when 'true' ->
		  'false'
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
'openzip_list_dir'/1 =
    %% Line 313
    fun (_cor0) ->
	case _cor0 of
	  <{'openzip',Comment,%% Line 314
			      Files,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 315
	      case call 'lists':'unzip'
		       (Files) of
		<{ZipFiles,_X_Extras}> when 'true' ->
		    %% Line 316
		    {'ok',[{'zip_comment',Comment}|ZipFiles]}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 317
	  <_cor8> when 'true' ->
	      %% Line 318
	      {'error','einval'}
	end
'openzip_list_dir'/2 =
    %% Line 320
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'openzip',_cor11,Files,_cor12,_cor13,_cor14,_cor15,_cor16},['names_only']> when 'true' ->
	      %% Line 321
	      case call 'lists':'unzip'
		       (Files) of
		<{ZipFiles,_X_Extras}> when 'true' ->
		    let <_cor7> =
			%% Line 322
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[{{'zip_file',Name,_cor17,_cor18,_cor19,_cor20},_cor21}|_cor4]> when 'true' ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [Name|_cor6]
						  -| ['compiler_generated'] )
					( <[_cor3|_cor4]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor5> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (ZipFiles)
			  -| ['list_comprehension'] )
		    in  %% Line 323
			{'ok',_cor7}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 324
	  <_cor22,_cor23> when 'true' ->
	      %% Line 325
	      {'error','einval'}
	end
'openzip_close'/1 =
    %% Line 328
    fun (_cor0) ->
	case _cor0 of
	  <{'openzip',_cor2,_cor3,In0,Input,_cor4,Z,_cor5}> when 'true' ->
	      do  %% Line 329
		  apply Input
		      ('close', In0)
		  %% Line 330
		  call 'zlib':'close'
		      (Z)
	  %% Line 331
	  <_cor6> when 'true' ->
	      %% Line 332
	      {'error','einval'}
	end
'unzip'/1 =
    %% Line 348
    fun (_cor0) ->
	apply 'unzip'/2
	    (_cor0, [])
'unzip'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 367
		apply 'do_unzip'/2
		    (_cor1, _cor0)
	in  %% Line 367
	    case _cor2 of
	      %% Line 368
	      <{'ok',R}> when 'true' ->
		  {'ok',R}
	      %% Line 369
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_unzip'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	let <Opts> =
	    %% Line 373
	    apply 'get_unzip_options'/2
		(_cor1, _cor0)
	in  %% Line 374
	    case Opts of
	      <{'unzip_opts',_cor12,Input,_cor13,OpO,_cor14,_cor15}> when 'true' ->
		  let <_cor4> =
		      %% Line 375
		      call 'erlang':'--'
			  (OpO, ['write'])
		  in  let <In0> =
			  %% Line 375
			  apply Input
			      ({'open',_cor1,_cor4}, [])
		      in  let <RawIterator> = 'raw_file_info_etc'/5
			  in  %% Line 377
			      case apply 'get_central_dir'/3
				       (In0, RawIterator, Input) of
				<{Info,In1}> when 'true' ->
				    let <Z> =
					%% Line 379
					call 'zlib':'open'
					    ()
				    in  let <Files> =
					    %% Line 380
					    apply 'get_z_files'/5
						(Info, Z, In1, Opts, [])
					in  do  %% Line 381
						call 'zlib':'close'
						    (Z)
						do  %% Line 382
						    apply Input
							('close', In1)
						    %% Line 383
						    {'ok',Files}
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'foldl'/3 =
    %% Line 398
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,Acc0,Archive>
	      when call 'erlang':'is_function'
		    (Fun,
		     4) ->
	      let <ZipFun> =
		  %% Line 400
		  ( fun (_cor5,_cor4) ->
			case <_cor5,_cor4> of
			  <{Name,GetInfo,GetBin},A> when 'true' ->
			      let <A2> =
				  %% Line 401
				  apply Fun
				      (Name, GetInfo, GetBin, A)
			      in  %% Line 402
				  {'true','false',A2}
			  ( <_cor7,_cor6> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor7,_cor6})
				  -| [{'function_name',{'-foldl/3-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-foldl/3-fun-0-'}}] )
	      in  %% Line 404
		  case call 'prim_zip':'open'
			   (ZipFun, Acc0, Archive) of
		    %% Line 405
		    <{'ok',PrimZip,Acc1}> when 'true' ->
			%% Line 406
			case call 'prim_zip':'close'
				 (PrimZip) of
			  <'ok'> when 'true' ->
			      %% Line 407
			      {'ok',Acc1}
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		    %% Line 408
		    <{'error','bad_eocd'}> when 'true' ->
			%% Line 409
			{'error',[78|[111|[116|[32|[97|[110|[32|[97|[114|[99|[104|[105|[118|[101|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]}
		    %% Line 410
		    <{'error',Reason}> when 'true' ->
			%% Line 411
			{'error',Reason}
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 413
	  <_cor14,_cor15,_cor16> when 'true' ->
	      %% Line 414
	      {'error','einval'}
	end
'zip'/2 =
    %% Line 430
    fun (_cor1,_cor0) ->
	apply 'zip'/3
	    (_cor1, _cor0, [])
'zip'/3 =
    %% Line 448
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 449
		apply 'do_zip'/3
		    (_cor2, _cor1, _cor0)
	in  %% Line 449
	    case _cor3 of
	      %% Line 450
	      <{'ok',R}> when 'true' ->
		  {'ok',R}
	      %% Line 451
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_zip'/3 =
    %% Line 454
    fun (_cor2,_cor1,_cor0) ->
	let <Opts> =
	    %% Line 455
	    apply 'get_zip_options'/2
		(_cor1, _cor0)
	in  %% Line 456
	    case Opts of
	      <{'zip_opts',Output,_cor13,_cor14,OpO,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
		  let <Out0> =
		      %% Line 457
		      apply Output
			  ({'open',_cor2,OpO}, [])
		  in  let <Z> =
			  %% Line 458
			  call 'zlib':'open'
			      ()
		      in  %% Line 459
			  case apply 'put_z_files'/6
				   (_cor1, Z, Out0, 0, Opts, []) of
			    <{Out1,LHS,Pos}> when 'true' ->
				do  %% Line 460
				    call 'zlib':'close'
					(Z)
				    let <Out2> =
					%% Line 461
					apply 'put_central_dir'/4
					    (LHS, Pos, Out1, Opts)
				    in  let <Out3> =
					    %% Line 462
					    apply Output
						({'close',_cor2}, Out2)
					in  %% Line 463
					    {'ok',Out3}
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'list_dir'/1 =
    %% Line 475
    fun (_cor0) ->
	apply 'list_dir'/2
	    (_cor0, [])
'list_dir'/2 =
    %% Line 484
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 485
		apply 'do_list_dir'/2
		    (_cor1, _cor0)
	in  %% Line 485
	    case _cor2 of
	      %% Line 486
	      <{'ok',R}> when 'true' ->
		  {'ok',R}
	      %% Line 487
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_list_dir'/2 =
    %% Line 490
    fun (_cor1,_cor0) ->
	%% Line 493
	case apply 'get_list_dir_options'/2
		 (_cor1, _cor0) of
	  <{'list_dir_opts',Input,RawIterator,OpO}> when 'true' ->
	      let <In0> =
		  %% Line 494
		  apply Input
		      ({'open',_cor1,OpO}, [])
	      in  %% Line 495
		  case apply 'get_central_dir'/3
			   (In0, RawIterator, Input) of
		    <{Info,In1}> when 'true' ->
			do  %% Line 496
			    apply Input
				('close', In1)
			    %% Line 497
			    {'ok',Info}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
't'/1 =
    %% Line 505
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      apply 'zip_t'/1
		  (F)
	  %% Line 506
	  <F = {'openzip',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when ( 'true'
									     -| ['compiler_generated'] ) ->
	      apply 'openzip_t'/1
		  (F)
	  %% Line 507
	  <F> when 'true' ->
	      apply 't'/2
		  (F, ( 'raw_short_print_info_etc'/5
			-| [{'id',{0,0,'-t/1-fun-0-'}}] ))
	end
't'/2 =
    %% Line 509
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 510
		apply 'do_t'/2
		    (_cor1, _cor0)
	in  %% Line 510
	    case _cor2 of
	      %% Line 511
	      <'ok'> when 'true' ->
		  'ok'
	      %% Line 512
	      <Error> when 'true' ->
		  {'error',Error}
	    end
'do_t'/2 =
    %% Line 515
    fun (_cor1,_cor0) ->
	let <Input> =
	    %% Line 516
	    apply 'get_input'/1
		(_cor1)
	in  let <In0> =
		%% Line 518
		apply Input
		    ({'open',_cor1,['raw']}, [])
	    in  %% Line 519
		case apply 'get_central_dir'/3
			 (In0, _cor0, Input) of
		  <{_X_Info,In1}> when 'true' ->
		      do  %% Line 520
			  apply Input
			      ('close', In1)
			  %% Line 521
			  'ok'
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'tt'/1 =
    %% Line 529
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      apply 'zip_tt'/1
		  (F)
	  %% Line 530
	  <F = {'openzip',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when ( 'true'
									     -| ['compiler_generated'] ) ->
	      apply 'openzip_tt'/1
		  (F)
	  %% Line 531
	  <F> when 'true' ->
	      apply 't'/2
		  (F, ( 'raw_long_print_info_etc'/5
			-| [{'id',{0,0,'-tt/1-fun-0-'}}] ))
	end
'get_unzip_opt'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Opts> when 'true' ->
	      %% Line 536
	      Opts
	  %% Line 537
	  <['verbose'|Rest],Opts> when 'true' ->
	      let <_rec1> = 'verbose_unzip'/1
	      in  %% Line 538
		  case Opts of
		    <{'unzip_opts',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(6, Opts, _rec1)
			in  apply 'get_unzip_opt'/2
				(Rest, _cor5)
		    ( <_cor50> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','unzip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 539
	  <['cooked'|Rest],Opts = {'unzip_opts',_cor51,_cor52,_cor53,OpO,_cor54,_cor55}> when 'true' ->
	      let <_rec3> =
		  %% Line 540
		  call 'erlang':'--'
		      (OpO, ['raw'])
	      in  let <_cor9> =
		      %% Line 540
		      call 'erlang':'setelement'
			  (5, Opts, _rec3)
		  in  %% Line 540
		      apply 'get_unzip_opt'/2
			  (Rest, _cor9)
	  %% Line 541
	  <['memory'|Rest],Opts> when 'true' ->
	      let <_rec5> = 'binary_io'/2
	      in  %% Line 542
		  case Opts of
		    <{'unzip_opts',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}> when 'true' ->
			let <_cor13> =
			    call 'erlang':'setelement'
				(2, Opts, _rec5)
			in  apply 'get_unzip_opt'/2
				(Rest, _cor13)
		    ( <_cor69> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','unzip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 543
	  <[{'cwd',CWD}|Rest],Opts> when 'true' ->
	      %% Line 544
	      case Opts of
		<{'unzip_opts',_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
		    let <_cor16> =
			call 'erlang':'setelement'
			    (7, Opts, CWD)
		    in  apply 'get_unzip_opt'/2
			    (Rest, _cor16)
		( <_cor76> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','unzip_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 545
	  <[{'file_filter',F}|Rest],Opts> when 'true' ->
	      let <Filter1> =
		  %% Line 546
		  ( fun (_cor17) ->
			case _cor17 of
			  <{ZipFile,_X_Extra}> when 'true' ->
			      apply F
				  (ZipFile)
			  ( <_cor18> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor18})
				  -| [{'function_name',{'-get_unzip_opt/2-fun-2-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-get_unzip_opt/2-fun-2-'}}] )
	      in  %% Line 547
		  ( case Opts of
		      ( <( {'unzip_opts',_cor77,_cor78,_rec8,_cor79,_cor80,_cor81}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Filter2> =
				apply 'fun_and_1'/2
				    (Filter1, _rec8)
			    in  let <_cor25> =
				    %% Line 548
				    call 'erlang':'setelement'
					(4, Opts, Filter2)
				in  %% Line 548
				    apply 'get_unzip_opt'/2
					(Rest, _cor25)
			-| ['compiler_generated'] )
		      ( <_cor82> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','unzip_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 549
	  <[{'file_list',L}|Rest],Opts> when 'true' ->
	      let <FileInList> =
		  %% Line 550
		  ( fun (_cor26) ->
			apply 'file_in_list'/2
			    (_cor26, L)
		    -| [{'id',{0,0,'-get_unzip_opt/2-fun-3-'}}] )
	      in  %% Line 551
		  ( case Opts of
		      ( <( {'unzip_opts',_cor90,_cor91,_rec10,_cor92,_cor93,_cor94}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Filter> =
				apply 'fun_and_1'/2
				    (FileInList, _rec10)
			    in  let <_cor34> =
				    %% Line 552
				    call 'erlang':'setelement'
					(4, Opts, Filter)
				in  %% Line 552
				    apply 'get_unzip_opt'/2
					(Rest, _cor34)
			-| ['compiler_generated'] )
		      ( <_cor95> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','unzip_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 553
	  <['keep_old_files'|Rest],Opts> when 'true' ->
	      let <Keep> = 'keep_old_file'/1
	      in  %% Line 555
		  ( case Opts of
		      ( <( {'unzip_opts',_cor103,_cor104,_rec12,_cor105,_cor106,_cor107}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Filter> =
				apply 'fun_and_1'/2
				    (Keep, _rec12)
			    in  let <_cor41> =
				    %% Line 556
				    call 'erlang':'setelement'
					(4, Opts, Filter)
				in  %% Line 556
				    apply 'get_unzip_opt'/2
					(Rest, _cor41)
			-| ['compiler_generated'] )
		      ( <_cor108> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','unzip_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 557
	  <[Unknown|_X_Rest],_X_Opts> when 'true' ->
	      %% Line 558
	      call 'erlang':'throw'
		  ({'bad_option',Unknown})
	  ( <_cor43,_cor42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43,_cor42})
		  -| [{'function_name',{'get_unzip_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'get_list_dir_opt'/2 =
    %% Line 560
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Opts> when 'true' ->
	      %% Line 561
	      Opts
	  %% Line 562
	  <['cooked'|Rest],Opts = {'list_dir_opts',_cor22,_cor23,OpO}> when 'true' ->
	      let <_rec14> =
		  %% Line 563
		  call 'erlang':'--'
		      (OpO, ['raw'])
	      in  let <_cor5> =
		      %% Line 563
		      call 'erlang':'setelement'
			  (4, Opts, _rec14)
		  in  %% Line 563
		      apply 'get_list_dir_opt'/2
			  (Rest, _cor5)
	  %% Line 564
	  <['names_only'|Rest],Opts> when 'true' ->
	      let <_rec16> =
		  %% Line 566
		  ( fun (_cor10,_cor9,_cor8,_cor7,_cor6) ->
			apply 'raw_name_only'/5
			    (_cor10, _cor9, _cor8, _cor7, _cor6)
		    -| [{'id',{0,0,'-get_list_dir_opt/2-fun-0-'}}] )
	      in  %% Line 566
		  case Opts of
		    <{'list_dir_opts',_cor28,_cor29,_cor30}> when 'true' ->
			let <_cor19> =
			    call 'erlang':'setelement'
				(3, Opts, _rec16)
			in  apply 'get_list_dir_opt'/2
				(Rest, _cor19)
		    ( <_cor31> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','list_dir_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 571
	  <[Unknown|_X_Rest],_X_Opts> when 'true' ->
	      %% Line 572
	      call 'erlang':'throw'
		  ({'bad_option',Unknown})
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'get_list_dir_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'get_zip_opt'/2 =
    %% Line 574
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Opts> when 'true' ->
	      %% Line 575
	      Opts
	  %% Line 576
	  <['verbose'|Rest],Opts> when 'true' ->
	      let <_rec18> = 'verbose_zip'/1
	      in  %% Line 577
		  case Opts of
		    <{'zip_opts',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(6, Opts, _rec18)
			in  apply 'get_zip_opt'/2
				(Rest, _cor5)
		    ( <_cor54> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 578
	  <['cooked'|Rest],Opts = {'zip_opts',_cor55,_cor56,_cor57,OpO,_cor58,_cor59,_cor60,_cor61}> when 'true' ->
	      let <_rec20> =
		  %% Line 579
		  call 'erlang':'--'
		      (OpO, ['raw'])
	      in  let <_cor9> =
		      %% Line 579
		      call 'erlang':'setelement'
			  (5, Opts, _rec20)
		  in  %% Line 579
		      apply 'get_zip_opt'/2
			  (Rest, _cor9)
	  %% Line 580
	  <['memory'|Rest],Opts> when 'true' ->
	      let <_rec22> = 'binary_io'/2
	      in  %% Line 581
		  case Opts of
		    <{'zip_opts',_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78}> when 'true' ->
			let <_cor13> =
			    call 'erlang':'setelement'
				(2, Opts, _rec22)
			in  apply 'get_zip_opt'/2
				(Rest, _cor13)
		    ( <_cor79> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 582
	  <[{'cwd',CWD}|Rest],Opts> when 'true' ->
	      %% Line 583
	      case Opts of
		<{'zip_opts',_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87}> when 'true' ->
		    let <_cor16> =
			call 'erlang':'setelement'
			    (7, Opts, CWD)
		    in  apply 'get_zip_opt'/2
			    (Rest, _cor16)
		( <_cor88> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','zip_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 584
	  <[{'comment',C}|Rest],Opts> when 'true' ->
	      %% Line 585
	      case Opts of
		<{'zip_opts',_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96}> when 'true' ->
		    let <_cor19> =
			call 'erlang':'setelement'
			    (4, Opts, C)
		    in  apply 'get_zip_opt'/2
			    (Rest, _cor19)
		( <_cor97> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','zip_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 586
	  <[O = {'compress',Which}|Rest],Opts> when 'true' ->
	      let <_cor27> =
		  %% Line 588
		  case Which of
		    %% Line 589
		    <'all'> when 'true' ->
			%% Line 590
			'all'
		    %% Line 591
		    <Suffixes>
			when call 'erlang':'is_list'
			      (Which) ->
			%% Line 592
			call 'lists':'usort'
			    (Suffixes)
		    %% Line 593
		    <{'add',Suffixes}>
			when call 'erlang':'is_list'
			      (Suffixes) ->
			%% Line 594
			( case Opts of
			    ( <( {'zip_opts',_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_rec26,_cor104}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor22> =
				      call 'erlang':'++'
					  (_rec26, Suffixes)
				  in  call 'lists':'usort'
					  (_cor22)
			      -| ['compiler_generated'] )
			    ( <_cor105> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 595
		    <{'del',Suffixes}>
			when call 'erlang':'is_list'
			      (Suffixes) ->
			%% Line 596
			( case Opts of
			    ( <( {'zip_opts',_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_rec27,_cor112}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor25> =
				      call 'erlang':'--'
					  (_rec27, Suffixes)
				  in  call 'lists':'usort'
					  (_cor25)
			      -| ['compiler_generated'] )
			    ( <_cor113> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 597
		    <_cor114> when 'true' ->
			%% Line 598
			call 'erlang':'throw'
			    ({'bad_option',O})
		  end
	      in  %% Line 600
		  case Opts of
		    <{'zip_opts',_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122}> when 'true' ->
			let <_cor31> =
			    call 'erlang':'setelement'
				(8, Opts, _cor27)
			in  apply 'get_zip_opt'/2
				(Rest, _cor31)
		    ( <_cor123> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 601
	  <[O = {'uncompress',Which}|Rest],Opts> when 'true' ->
	      let <_cor39> =
		  %% Line 603
		  case Which of
		    %% Line 604
		    <'all'> when 'true' ->
			%% Line 605
			'all'
		    %% Line 606
		    <Suffixes>
			when call 'erlang':'is_list'
			      (Which) ->
			%% Line 607
			call 'lists':'usort'
			    (Suffixes)
		    %% Line 608
		    <{'add',Suffixes}>
			when call 'erlang':'is_list'
			      (Suffixes) ->
			%% Line 609
			( case Opts of
			    ( <( {'zip_opts',_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_rec29}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor34> =
				      call 'erlang':'++'
					  (_rec29, Suffixes)
				  in  call 'lists':'usort'
					  (_cor34)
			      -| ['compiler_generated'] )
			    ( <_cor131> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 610
		    <{'del',Suffixes}>
			when call 'erlang':'is_list'
			      (Suffixes) ->
			%% Line 611
			( case Opts of
			    ( <( {'zip_opts',_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_rec30}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor37> =
				      call 'erlang':'--'
					  (_rec30, Suffixes)
				  in  call 'lists':'usort'
					  (_cor37)
			      -| ['compiler_generated'] )
			    ( <_cor139> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','zip_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 612
		    <_cor140> when 'true' ->
			%% Line 613
			call 'erlang':'throw'
			    ({'bad_option',O})
		  end
	      in  %% Line 615
		  case Opts of
		    <{'zip_opts',_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148}> when 'true' ->
			let <_cor43> =
			    call 'erlang':'setelement'
				(9, Opts, _cor39)
			in  apply 'get_zip_opt'/2
				(Rest, _cor43)
		    ( <_cor149> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','zip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 616
	  <[Unknown|_X_Rest],_X_Opts> when 'true' ->
	      %% Line 617
	      call 'erlang':'throw'
		  ({'bad_option',Unknown})
	  ( <_cor45,_cor44> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor45,_cor44})
		  -| [{'function_name',{'get_zip_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'silent'/1 =
    %% Line 621
    fun (_cor0) ->
	'ok'
'verbose_unzip'/1 =
    %% Line 623
    fun (_cor0) ->
	call 'io':'format'
	    ([101|[120|[116|[114|[97|[99|[116|[105|[110|[103|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]], [_cor0|[]])
'verbose_zip'/1 =
    %% Line 625
    fun (_cor0) ->
	call 'io':'format'
	    ([97|[100|[100|[105|[110|[103|[58|[32|[126|[116|[112|[10]]]]]]]]]]]], [_cor0|[]])
'all'/1 =
    %% Line 628
    fun (_cor0) ->
	'true'
'file_in_list'/2 =
    %% Line 630
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{{'zip_file',FileName,_cor4,_cor5,_cor6,_cor7},_cor8},List> when 'true' ->
	      %% Line 631
	      call 'lists':'member'
		  (FileName, List)
	  %% Line 632
	  <_cor9,_cor10> when 'true' ->
	      %% Line 633
	      'false'
	end
'keep_old_file'/1 =
    %% Line 635
    fun (_cor0) ->
	case _cor0 of
	  <{{'zip_file',FileName,_cor5,_cor6,_cor7,_cor8},_cor9}> when 'true' ->
	      let <_cor3> =
		  %% Line 636
		  ( case call 'filelib':'is_file'
			     (FileName) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'filelib':'is_dir'
				(FileName)
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor1}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 636
		  call 'erlang':'not'
		      (_cor3)
	  %% Line 637
	  <_cor10> when 'true' ->
	      %% Line 638
	      'false'
	end
'fun_and_1'/2 =
    %% Line 641
    fun (_cor1,_cor0) ->
	%% Line 642
	( fun (_cor4) ->
	      ( case apply _cor1
			 (_cor4) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply _cor0
			    (_cor4)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  -| [{'id',{0,0,'-fun_and_1/2-fun-0-'}}] )
'get_zip_options'/2 =
    %% Line 645
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 648
	    apply 'get_zip_input'/1
		({'files',_cor1})
	in  let <Opts> =
		%% Line 647
		{'zip_opts',( 'file_io'/2
			      -| [{'id',{0,0,'-get_zip_options/2-fun-0-'}}] ),_cor3,%% Line 650
										    [],%% Line 649
										       ['raw'|['write']],%% Line 651
													 ( 'silent'/1
													   -| [{'id',{0,0,'-get_zip_options/2-fun-1-'}}] ),%% Line 652
																			   [],%% Line 653
																			      'all',[[46|[90]]|[[46|[122|[105|[112]]]]|[[46|[122|[111|[111]]]]|[[46|[97|[114|[99]]]]|[[46|[108|[122|[104]]]]|[[46|[97|[114|[106]]]]]]]]]]}
	    in  %% Line 656
		apply 'get_zip_opt'/2
		    (_cor0, Opts)
'get_unzip_options'/2 =
    %% Line 658
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 661
	    apply 'get_input'/1
		(_cor1)
	in  let <Opts> =
		%% Line 659
		{'unzip_opts',%% Line 660
			      ( 'file_io'/2
				-| [{'id',{0,0,'-get_unzip_options/2-fun-0-'}}] ),_cor2,( 'all'/1
											  -| [{'id',{0,0,'-get_unzip_options/2-fun-1-'}}] ),%% Line 662
																	    ['raw'],%% Line 663
																		    ( 'silent'/1
																		      -| [{'id',{0,0,'-get_unzip_options/2-fun-2-'}}] ),%% Line 664
																									[]}
	    in  %% Line 666
		apply 'get_unzip_opt'/2
		    (_cor0, Opts)
'get_openzip_options'/1 =
    %% Line 668
    fun (_cor0) ->
	let <Opts> =
	    %% Line 669
	    {'openzip_opts',%% Line 670
			    ( 'file_io'/2
			      -| [{'id',{0,0,'-get_openzip_options/1-fun-0-'}}] ),['raw'|['read']],%% Line 671
												   []}
	in  %% Line 672
	    apply 'get_openzip_opt'/2
		(_cor0, Opts)
'get_input'/1 =
    %% Line 674
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 675
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_input/1-fun-0-'}}] )
	  %% Line 676
	  <F>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 677
	      ( 'file_io'/2
		-| [{'id',{0,0,'-get_input/1-fun-1-'}}] )
	  %% Line 678
	  <_cor2> when 'true' ->
	      %% Line 679
	      call 'erlang':'throw'
		  ('einval')
	end
'get_zip_input'/1 =
    %% Line 681
    fun (_cor0) ->
	case _cor0 of
	  <{F,B}>
	      when let <_cor1> =
		    call 'erlang':'is_binary'
			(B)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 682
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-0-'}}] )
	  %% Line 683
	  <{F,B,{'file_info',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}}>
	      when let <_cor3> =
		    call 'erlang':'is_binary'
			(B)
		in  let <_cor4> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 684
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-1-'}}] )
	  %% Line 685
	  <{F,{'file_info',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33},B}>
	      when let <_cor5> =
		    call 'erlang':'is_binary'
			(B)
		in  let <_cor6> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 686
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-2-'}}] )
	  %% Line 687
	  <F>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 688
	      ( 'file_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-3-'}}] )
	  %% Line 689
	  <{'files',[]}> when 'true' ->
	      %% Line 690
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-4-'}}] )
	  %% Line 691
	  <{'files',[File|_cor34]}> when 'true' ->
	      %% Line 692
	      apply 'get_zip_input'/1
		  (File)
	  %% Line 693
	  <_cor35> when 'true' ->
	      %% Line 694
	      call 'erlang':'throw'
		  ('einval')
	end
'get_list_dir_options'/2 =
    %% Line 696
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 698
	    apply 'get_input'/1
		(_cor1)
	in  let <Opts> =
		%% Line 697
		{'list_dir_opts',_cor2,( 'raw_file_info_public'/5
					 -| [{'id',{0,0,'-get_list_dir_options/2-fun-0-'}}] ),%% Line 699
											      ['raw']}
	    in  %% Line 700
		apply 'get_list_dir_opt'/2
		    (_cor0, Opts)
'table'/1 =
    %% Line 708
    fun (_cor0) ->
	apply 'list_dir'/1
	    (_cor0)
'table'/2 =
    %% Line 718
    fun (_cor1,_cor0) ->
	apply 'list_dir'/2
	    (_cor1, _cor0)
'create'/2 =
    %% Line 729
    fun (_cor1,_cor0) ->
	apply 'zip'/2
	    (_cor1, _cor0)
'create'/3 =
    %% Line 741
    fun (_cor2,_cor1,_cor0) ->
	apply 'zip'/3
	    (_cor2, _cor1, _cor0)
'extract'/1 =
    %% Line 752
    fun (_cor0) ->
	apply 'unzip'/1
	    (_cor0)
'extract'/2 =
    %% Line 770
    fun (_cor1,_cor0) ->
	apply 'unzip'/2
	    (_cor1, _cor0)
'put_central_dir'/4 =
    %% Line 774
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <LHS,Pos,Out0,%% Line 775
			{'zip_opts',Output,_cor10,Comment,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 776
	      case apply 'put_cd_files_loop'/4
		       (LHS, Output, Out0, 0) of
		<{Out1,Sz}> when 'true' ->
		    let <_cor5> =
			%% Line 777
			call 'erlang':'length'
			    (LHS)
		    in  %% Line 777
			apply 'put_eocd'/6
			    (_cor5, Pos, Sz, Comment, Output, Out1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'put_central_dir',4}}] )
	    -| ['compiler_generated'] )
	end
'put_cd_files_loop'/4 =
    %% Line 779
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Output,Out,Sz> when 'true' ->
	      %% Line 780
	      {Out,Sz}
	  %% Line 781
	  <[{LH,Name,Pos}|LHRest],Output,Out0,Sz0> when 'true' ->
	      let <CDFH> =
		  %% Line 782
		  apply 'cd_file_header_from_lh_and_pos'/2
		      (LH, Pos)
	      in  let <BCDFH> =
		      %% Line 783
		      apply 'cd_file_header_to_bin'/1
			  (CDFH)
		  in  let <B> =
			  %% Line 784
			  [#{#<80>(8,1,'integer',['unsigned'|['big']]),
			     #<75>(8,1,'integer',['unsigned'|['big']]),
			     #<1>(8,1,'integer',['unsigned'|['big']]),
			     #<2>(8,1,'integer',['unsigned'|['big']])}#|[BCDFH|[Name|[]]]]
		      in  let <Out1> =
			      %% Line 785
			      apply Output
				  ({'write',B}, Out0)
			  in  let <_cor26> =
				  %% Line 786
				  call 'erlang':'+'
				      (Sz0, 46)
			      in  %% Line 787
				  ( case LH of
				      ( <( {'local_file_header',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_rec32,_cor40}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Sz1> =
						call 'erlang':'+'
						    (_cor26, _rec32)
					    in  %% Line 788
						apply 'put_cd_files_loop'/4
						    (LHRest, Output, Out1, Sz1)
					-| ['compiler_generated'] )
				      ( <_cor41> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','local_file_header'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
	  ( <_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'put_cd_files_loop',4}}] )
	    -| ['compiler_generated'] )
	end
'put_eocd'/6 =
    %% Line 791
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <CommentSz> =
	    %% Line 793
	    call 'erlang':'length'
		(_cor2)
	in  let <EOCD> =
		%% Line 794
		{'eocd',0,%% Line 795
			  0,_cor5,_cor5,_cor3,_cor4,%% Line 800
						    CommentSz}
	    in  let <BEOCD> =
		    %% Line 801
		    apply 'eocd_to_bin'/1
			(EOCD)
		in  let <B> =
			%% Line 802
			[#{#<80>(8,1,'integer',['unsigned'|['big']]),
			   #<75>(8,1,'integer',['unsigned'|['big']]),
			   #<5>(8,1,'integer',['unsigned'|['big']]),
			   #<6>(8,1,'integer',['unsigned'|['big']])}#|[BEOCD|[_cor2|[]]]]
		    in  %% Line 803
			apply _cor1
			    ({'write',B}, _cor0)
'get_filename'/2 =
    %% Line 805
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Name,_cor5},Type> when 'true' ->
	      %% Line 806
	      apply 'get_filename'/2
		  (Name, Type)
	  %% Line 807
	  <{Name,_cor6,_cor7},Type> when 'true' ->
	      %% Line 808
	      apply 'get_filename'/2
		  (Name, Type)
	  %% Line 809
	  <Name,'regular'> when 'true' ->
	      %% Line 810
	      Name
	  %% Line 811
	  <Name,'directory'> when 'true' ->
	      %% Line 813
	      case call 'lists':'reverse'
		       (Name) of
		%% Line 814
		<[47|_X_Rev]> when 'true' ->
		    Name
		%% Line 815
		<Rev> when 'true' ->
		    call 'lists':'reverse'
			([47|Rev])
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_filename',2}}] )
	    -| ['compiler_generated'] )
	end
'add_cwd'/2 =
    %% Line 818
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_CWD,F = {_X_Name,_cor4}> when 'true' ->
	      F
	  %% Line 819
	  <[],F> when 'true' ->
	      F
	  %% Line 820
	  <CWD,F> when 'true' ->
	      call 'filename':'join'
		  (CWD, F)
	end
'get_comp_method'/4 =
    %% Line 825
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor21,N,_cor22,_cor23>
	      when let <_cor4> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor5> =
			call 'erlang':'<'
			    (N, 10)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 826
	      0
	  %% Line 827
	  <_cor24,_cor25,_cor26,'directory'> when 'true' ->
	      %% Line 828
	      0
	  %% Line 829
	  <F,_cor27,{'zip_opts',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,Compress,Uncompress},_cor34> when 'true' ->
	      let <Ext> =
		  %% Line 830
		  call 'filename':'extension'
		      (F)
	      in  let <Test> =
		      %% Line 831
		      ( fun (_cor9) ->
			    ( case <> of
				( <>
				      when call 'erlang':'=:='
					    (_cor9,
					     'all') ->
				      'true'
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      call 'lists':'member'
					  (Ext, _cor9)
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| [{'id',{0,0,'-get_comp_method/4-fun-0-'}}] )
		  in  let <_cor15> =
			  %% Line 832
			  ( case apply Test
				     (Compress) of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor13> =
					apply Test
					    (Uncompress)
				    in  call 'erlang':'not'
					    (_cor13)
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor12> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor12}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 832
			  case _cor15 of
			    %% Line 833
			    <'true'> when 'true' ->
				8
			    %% Line 834
			    <'false'> when 'true' ->
				0
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor16})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'get_comp_method',4}}] )
	    -| ['compiler_generated'] )
	end
'put_z_files'/6 =
    %% Line 837
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Z,Out,Pos,_X_Opts,Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 838
		  call 'lists':'reverse'
		      (Acc, [])
	      in  %% Line 838
		  {Out,_cor6,Pos}
	  %% Line 839
	  <[F|Rest],Z,Out0,Pos0,Opts = %% Line 840
				       {'zip_opts',Output,Input,_cor68,OpO,%% Line 841
									   FB,%% Line 841
									      CWD,_cor69,_cor70},%% Line 841
												 Acc> when 'true' ->
	      let <F1> =
		  %% Line 843
		  apply 'add_cwd'/2
		      (CWD, F)
	      in  let <FileInfo> =
		      %% Line 844
		      apply Input
			  ({'file_info',F1}, [])
		  in  %% Line 845
		      ( case FileInfo of
			  ( <( {'file_info',_cor71,_rec33,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor15> =
				    %% Line 847
				    case _rec33 of
				      %% Line 848
				      <'regular'> when 'true' ->
					  _cor71
				      %% Line 849
				      <'directory'> when 'true' ->
					  0
				      ( <_cor14> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor14})
					-| ['compiler_generated'] )
				    end
				in  let <FileName> =
					%% Line 851
					apply 'get_filename'/2
					    (F, _rec33)
				    in  let <CompMethod> =
					    %% Line 852
					    apply 'get_comp_method'/4
						(FileName, _cor15, Opts, _rec33)
					in  let <LH> =
						%% Line 853
						apply 'local_file_header_from_info_method_name'/4
						    (FileInfo, _cor15, CompMethod, FileName)
					    in  let <BLH> =
						    %% Line 854
						    apply 'local_file_header_to_bin'/1
							(LH)
						in  let <B> =
							%% Line 855
							[#{#<80>(8,1,'integer',['unsigned'|['big']]),
							   #<75>(8,1,'integer',['unsigned'|['big']]),
							   #<3>(8,1,'integer',['unsigned'|['big']]),
							   #<4>(8,1,'integer',['unsigned'|['big']])}#|[BLH|[]]]
						    in  let <Out1> =
							    %% Line 856
							    apply Output
								({'write',B}, Out0)
							in  let <Out2> =
								%% Line 857
								apply Output
								    ({'write',FileName}, Out1)
							    in  %% Line 858
								case apply 'put_z_file'/10
									 (CompMethod, _cor15, Out2, F1, %% Line 859
													0, %% Line 859
													   Input, %% Line 859
														  Output, %% Line 859
															  OpO, %% Line 859
															       Z, _rec33) of
								  <{Out3,CompSize,CRC}> when 'true' ->
								      do  %% Line 860
									  apply FB
									      (FileName)
									  let <Patch> =
									      %% Line 861
									      #{#<CRC>(32,1,'integer',['unsigned'|['little']]),
										#<CompSize>(32,1,'integer',['unsigned'|['little']])}#
									  in  let <_cor26> =
										  %% Line 862
										  call 'erlang':'+'
										      (Pos0, 4)
									      in  let <_cor27> =
										      %% Line 862
										      call 'erlang':'+'
											  (_cor26, 2)
										  in  let <_cor28> =
											  %% Line 862
											  call 'erlang':'+'
											      (_cor27, 2)
										      in  let <_cor29> =
											      %% Line 862
											      call 'erlang':'+'
												  (_cor28, 2)
											  in  let <_cor30> =
												  %% Line 862
												  call 'erlang':'+'
												      (_cor29, 2)
											      in  let <_cor31> =
												      %% Line 862
												      call 'erlang':'+'
													  (_cor30, 2)
												  in  let <Out4> =
													  %% Line 862
													  apply Output
													      ({'pwrite',_cor31,Patch}, Out3)
												      in  let <Out5> =
													      %% Line 863
													      apply Output
														  ({'seek','eof',0}, Out4)
													  in  let <_cor46> =
														  %% Line 864
														  call 'erlang':'+'
														      (Pos0, 30)
													      in  %% Line 864
														  ( case LH of
														      ( <( {'local_file_header',_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_rec35,_cor105}
															   -| ['compiler_generated'] )> when 'true' ->
															    let <Pos1> =
																call 'erlang':'+'
																    (_cor46, _rec35)
															    in  let <Pos2> =
																    %% Line 865
																    call 'erlang':'+'
																	(Pos1, CompSize)
																in  let <_cor50> =
																	%% Line 866
																	call 'erlang':'setelement'
																	    (8, LH, CompSize)
																    in  let <_cor52> =
																	    %% Line 866
																	    call 'erlang':'setelement'
																		(7, _cor50, CRC)
																	in  let <ThisAcc> =
																		%% Line 867
																		[{_cor52,FileName,Pos0}|[]]
																	    in  let <_cor58> =
																		    %% Line 869
																		    case _rec33 of
																		      %% Line 870
																		      <'regular'> when 'true' ->
																			  %% Line 871
																			  {Out5,ThisAcc,Pos2}
																		      %% Line 872
																		      <'directory'> when 'true' ->
																			  let <Files> =
																			      %% Line 873
																			      apply Input
																				  ({'list_dir',F1}, [])
																			  in  let <RevFiles> =
																				  %% Line 874
																				  apply 'reverse_join_files'/3
																				      (F, Files, [])
																			      in  %% Line 875
																				  apply 'put_z_files'/6
																				      (RevFiles, Z, Out5, Pos2, Opts, ThisAcc)
																		      ( <_cor57> when 'true' ->
																			    primop 'match_fail'
																				({'case_clause',_cor57})
																			-| ['compiler_generated'] )
																		    end
																		in  %% Line 868
																		    case _cor58 of
																		      <{Out6,SubAcc,Pos3}> when 'true' ->
																			  let <_cor60> =
																			      %% Line 877
																			      call 'lists':'reverse'
																				  (SubAcc)
																			  in  let <Acc2> =
																				  %% Line 877
																				  call 'erlang':'++'
																				      (_cor60, Acc)
																			      in  %% Line 878
																				  apply 'put_z_files'/6
																				      (Rest, Z, Out6, Pos3, Opts, Acc2)
																		      ( <_cor59> when 'true' ->
																			    primop 'match_fail'
																				({'badmatch',_cor59})
																			-| ['compiler_generated'] )
																		    end
															-| ['compiler_generated'] )
														      ( <_cor106> when 'true' ->
															    ( call ( 'erlang'
																     -| ['compiler_generated'] ):( 'error'
																				   -| ['compiler_generated'] )
																  (( {'badrecord','local_file_header'}
																     -| ['compiler_generated'] ))
															      -| ['compiler_generated'] )
															-| ['compiler_generated'] )
														    end
														    -| ['compiler_generated'] )
								  ( <_cor24> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor24})
								    -| ['compiler_generated'] )
								end
			    -| ['compiler_generated'] )
			  ( <_cor83> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','file_info'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor67,_cor66,_cor65,_cor64,_cor63,_cor62> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor67,_cor66,_cor65,_cor64,_cor63,_cor62})
		  -| [{'function_name',{'put_z_files',6}}] )
	    -| ['compiler_generated'] )
	end
'reverse_join_files'/3 =
    %% Line 880
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dir,[File|Files],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 881
		  call 'filename':'join'
		      ([Dir|[File|[]]])
	      in  %% Line 881
		  apply 'reverse_join_files'/3
		      (Dir, Files, [_cor3|Acc])
	  %% Line 882
	  <_X_Dir,[],Acc> when 'true' ->
	      %% Line 883
	      Acc
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'reverse_join_files',3}}] )
	    -| ['compiler_generated'] )
	end
'put_z_file'/10 =
    %% Line 889
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Method,Sz,Out,_X_F,Pos,_X_Input,_X_Output,_X_OpO,_X_Z,'directory'> when 'true' ->
	      let <_cor10> =
		  %% Line 890
		  call 'erlang':'+'
		      (Pos, Sz)
	      in  %% Line 890
		  {Out,_cor10,0}
	  %% Line 891
	  <_X_Method,0,Out,_X_F,Pos,_X_Input,_X_Output,_X_OpO,_X_Z,'regular'> when 'true' ->
	      %% Line 892
	      {Out,Pos,0}
	  %% Line 893
	  <0,UncompSize,Out0,F,Pos0,Input,Output,OpO,Z,'regular'> when 'true' ->
	      let <_cor12> =
		  %% Line 895
		  call 'erlang':'--'
		      (OpO, ['write'])
	      in  let <In1> =
		      %% Line 895
		      apply Input
			  ({'open',F,_cor12}, [])
		  in  let <CRC0> =
			  %% Line 896
			  call 'zlib':'crc32'
			      (Z, #{}#)
		      in  %% Line 897
			  case apply Input
				   ({'read',UncompSize}, In1) of
			    <{Data,In2}> when 'true' ->
				let <Out1> =
				    %% Line 898
				    apply Output
					({'write',Data}, Out0)
				in  let <CRC> =
					%% Line 899
					call 'zlib':'crc32'
					    (Z, CRC0, Data)
				    in  do  %% Line 900
					    apply Input
						('close', In2)
					    let <_cor18> =
						%% Line 901
						call 'erlang':'iolist_size'
						    (Data)
					    in  let <_cor19> =
						    %% Line 901
						    call 'erlang':'+'
							(Pos0, _cor18)
						in  %% Line 901
						    {Out1,_cor19,CRC}
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor15})
			      -| ['compiler_generated'] )
			  end
	  %% Line 902
	  <8,UncompSize,Out0,F,Pos0,Input,Output,OpO,Z,'regular'> when 'true' ->
	      let <_cor21> =
		  %% Line 904
		  call 'erlang':'--'
		      (OpO, ['write'])
	      in  let <In1> =
		      %% Line 904
		      apply Input
			  ({'open',F,_cor21}, [])
		  in  %% Line 905
		      case call 'zlib':'deflateInit'
			       (Z, 'default', 'deflated', -15, 8, 'default') of
			<'ok'> when 'true' ->
			    %% Line 906
			    case %% Line 907
				 apply 'put_z_data_loop'/7
				     (UncompSize, In1, Out0, Pos0, Input, Output, Z) of
			      <{Out1,Pos1}> when 'true' ->
				  let <CRC> =
				      %% Line 908
				      call 'zlib':'crc32'
					  (Z)
				  in  %% Line 909
				      case call 'zlib':'deflateEnd'
					       (Z) of
					<'ok'> when 'true' ->
					    do  %% Line 910
						apply Input
						    ('close', In1)
						%% Line 911
						{Out1,Pos1,CRC}
					( <_cor27> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor27})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor25> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor25})
				-| ['compiler_generated'] )
			    end
			( <_cor24> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor24})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor37,_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37,_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'put_z_file',10}}] )
	    -| ['compiler_generated'] )
	end
'get_sync'/2 =
    %% Line 914
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     N) ->
	      'finish'
	  %% Line 915
	  <_cor5,_cor6> when 'true' ->
	      'full'
	end
'put_z_data_loop'/7 =
    %% Line 918
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_In,Out,Pos,_X_Input,_X_Output,_X_Z> when 'true' ->
	      %% Line 919
	      {Out,Pos}
	  %% Line 920
	  <UncompSize,In0,Out0,Pos0,Input,Output,Z> when 'true' ->
	      let <N> =
		  %% Line 921
		  call 'erlang':'min'
		      (8192, UncompSize)
	      in  %% Line 922
		  case apply Input
			   ({'read',N}, In0) of
		    %% Line 923
		    <{'eof',_X_In1}> when 'true' ->
			%% Line 924
			{Out0,Pos0}
		    %% Line 925
		    <{Uncompressed,In1}> when 'true' ->
			let <_cor9> =
			    %% Line 926
			    apply 'get_sync'/2
				(N, UncompSize)
			in  let <Compressed> =
				%% Line 926
				call 'zlib':'deflate'
				    (Z, Uncompressed, _cor9)
			    in  let <Sz> =
				    %% Line 927
				    call 'erlang':'iolist_size'
					(Compressed)
				in  let <Out1> =
					%% Line 928
					apply Output
					    ({'write',Compressed}, Out0)
				    in  let <_cor14> =
					    %% Line 929
					    call 'erlang':'-'
						(UncompSize, N)
					in  let <_cor13> =
						%% Line 929
						call 'erlang':'+'
						    (Pos0, Sz)
					    in  %% Line 929
						apply 'put_z_data_loop'/7
						    (_cor14, In1, Out1, _cor13, %% Line 930
										Input, %% Line 930
										       Output, %% Line 930
											       Z)
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	end
'raw_name_only'/5 =
    %% Line 936
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <CD = {'cd_file_header',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},FileName,_X_FileComment,_X_BExtraField,Acc> when %% Line 937
																								    ( 'true'
																								      -| ['compiler_generated'] ) ->
	      %% Line 938
	      [FileName|Acc]
	  %% Line 939
	  <EOCD = {'eocd',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32},_cor33,_X_Comment,_cor34,Acc> when ( 'true'
														 -| ['compiler_generated'] ) ->
	      %% Line 940
	      Acc
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'raw_name_only',5}}] )
	    -| ['compiler_generated'] )
	end
'raw_short_print_info_etc'/5 =
    %% Line 943
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <CD = {'cd_file_header',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},FileName,_X_FileComment,_X_BExtraField,Acc> when %% Line 944
																								    ( 'true'
																								      -| ['compiler_generated'] ) ->
	      do  %% Line 945
		  apply 'print_file_name'/1
		      (FileName)
		  %% Line 946
		  Acc
	  %% Line 947
	  <EOCD = {'eocd',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32},X,Comment,Y,Acc> when ( 'true'
												    -| ['compiler_generated'] ) ->
	      %% Line 948
	      apply 'raw_long_print_info_etc'/5
		  (EOCD, X, Comment, Y, Acc)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'raw_short_print_info_etc',5}}] )
	    -| ['compiler_generated'] )
	end
'print_file_name'/1 =
    %% Line 950
    fun (_cor0) ->
	%% Line 951
	call 'io':'format'
	    ([126|[116|[115|[10]]]], [_cor0|[]])
'raw_long_print_info_etc'/5 =
    %% Line 955
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'cd_file_header',_cor11,_cor12,_cor13,_cor14,%% Line 958
							 LMTime,%% Line 957
								LMDate,_cor15,CompSize,%% Line 956
										       UncompSize,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22},%% Line 959
																		    FileName,%% Line 959
																			     FileComment,%% Line 959
																					 _X_BExtraField,%% Line 959
																							Acc> when 'true' ->
	      let <MTime> =
		  %% Line 960
		  apply 'dos_date_time_to_datetime'/2
		      (LMDate, LMTime)
	      in  do  %% Line 961
		      apply 'print_header'/5
			  (CompSize, MTime, UncompSize, FileName, FileComment)
		      %% Line 962
		      Acc
	  %% Line 963
	  <EOCD = {'eocd',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29},_cor30,Comment,_cor31,Acc> when ( 'true'
													      -| ['compiler_generated'] ) ->
	      do  %% Line 964
		  apply 'print_comment'/1
		      (Comment)
		  %% Line 965
		  Acc
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'raw_long_print_info_etc',5}}] )
	    -| ['compiler_generated'] )
	end
'print_header'/5 =
    %% Line 967
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 969
	    apply 'time_to_string'/1
		(_cor3)
	in  let <_cor6> =
		%% Line 970
		apply 'get_percent'/2
		    (_cor4, _cor2)
	    in  %% Line 968
		call 'io':'format'
		    ([126|[56|[119|[32|[126|[115|[32|[126|[56|[119|[32|[126|[50|[119|[37|[32|[126|[116|[115|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]]]]], %% Line 969
																			    [_cor4|[_cor5|[_cor2|%% Line 970
																						 [_cor6|[_cor1|[_cor0|[]]]]]]])
'print_comment'/1 =
    %% Line 972
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 973
	      'ok'
	  %% Line 974
	  <Comment> when 'true' ->
	      %% Line 975
	      call 'io':'format'
		  ([65|[114|[99|[104|[105|[118|[101|[32|[99|[111|[109|[109|[101|[110|[116|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]], [Comment|[]])
	end
'get_percent'/2 =
    %% Line 977
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor6,0> when 'true' ->
	      100
	  %% Line 978
	  <CompSize,Size> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'*'
		      (CompSize, 100)
	      in  let <_cor3> =
		      call 'erlang':'/'
			  (_cor2, Size)
		  in  call 'erlang':'round'
			  (_cor3)
	end
'time_to_string'/1 =
    %% Line 981
    fun (_cor0) ->
	case _cor0 of
	  <{{Y,Mon,Day},{H,Min,_cor5}}> when 'true' ->
	      let <_cor1> =
		  %% Line 983
		  apply 'month'/1
		      (Mon)
	      in  let <_cor2> =
		      %% Line 983
		      apply 'two_d'/1
			  (H)
		  in  let <_cor3> =
			  %% Line 983
			  apply 'two_d'/1
			      (Min)
		      in  %% Line 982
			  call 'io_lib':'format'
			      ([126|[115|[32|[126|[50|[119|[32|[126|[115|[58|[126|[115|[32|[126|[119]]]]]]]]]]]]]]], %% Line 983
														     [_cor1|[Day|[_cor2|[_cor3|[Y|[]]]]]])
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'time_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'two_d'/1 =
    %% Line 985
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 986
	    call 'erlang':'+'
		(_cor0, 100)
	in  let <_cor2> =
		%% Line 986
		call 'erlang':'integer_to_list'
		    (_cor1)
	    in  %% Line 986
		call 'erlang':'tl'
		    (_cor2)
'month'/1 =
    %% Line 988
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      [74|[97|[110]]]
	  %% Line 989
	  <2> when 'true' ->
	      [70|[101|[98]]]
	  %% Line 990
	  <3> when 'true' ->
	      [77|[97|[114]]]
	  %% Line 991
	  <4> when 'true' ->
	      [65|[112|[114]]]
	  %% Line 992
	  <5> when 'true' ->
	      [77|[97|[121]]]
	  %% Line 993
	  <6> when 'true' ->
	      [74|[117|[110]]]
	  %% Line 994
	  <7> when 'true' ->
	      [74|[117|[108]]]
	  %% Line 995
	  <8> when 'true' ->
	      [65|[117|[103]]]
	  %% Line 996
	  <9> when 'true' ->
	      [83|[101|[112]]]
	  %% Line 997
	  <10> when 'true' ->
	      [79|[99|[116]]]
	  %% Line 998
	  <11> when 'true' ->
	      [78|[111|[118]]]
	  %% Line 999
	  <12> when 'true' ->
	      [68|[101|[99]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'month',1}}] )
	    -| ['compiler_generated'] )
	end
'cd_file_header_from_lh_and_pos'/2 =
    %% Line 1002
    fun (_cor1,_cor0) ->
	%% Line 1012
	case _cor1 of
	  <{'local_file_header',VersionNeeded,GPFlag,CompMethod,LastModTime,LastModDate,CRC32,CompSize,UncompSize,FileNameLength,ExtraFieldLength}> when 'true' ->
	      %% Line 1013
	      {'cd_file_header',20,%% Line 1014
				   VersionNeeded,%% Line 1015
						 GPFlag,%% Line 1016
							CompMethod,%% Line 1017
								   LastModTime,%% Line 1018
									       LastModDate,%% Line 1019
											   CRC32,%% Line 1020
												 CompSize,%% Line 1021
													  UncompSize,%% Line 1022
														     FileNameLength,%% Line 1023
																    ExtraFieldLength,%% Line 1024
																		     0,%% Line 1025
																		       0,%% Line 1026
																			 0,%% Line 1027
																			   0,_cor0}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'cd_file_header_to_bin'/1 =
    %% Line 1030
    fun (_cor0) ->
	case _cor0 of
	  <%% Line 1031
	   {'cd_file_header',VersionMadeBy,%% Line 1032
					   VersionNeeded,%% Line 1033
							 GPFlag,%% Line 1034
								CompMethod,%% Line 1035
									   LastModTime,%% Line 1036
										       LastModDate,%% Line 1037
												   CRC32,%% Line 1038
													 CompSize,%% Line 1039
														  UncompSize,%% Line 1040
															     FileNameLength,%% Line 1041
																	    ExtraFieldLength,%% Line 1042
																			     FileCommentLength,%% Line 1043
																					       DiskNumStart,%% Line 1044
																							    InternalAttr,%% Line 1045
																									 ExternalAttr,%% Line 1046
																										      LocalHeaderOffset}> when 'true' ->
	      %% Line 1047
	      #{#<VersionMadeBy>(16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1048
		  VersionNeeded>(%% Line 1048
				 16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1049
		  GPFlag>(%% Line 1049
			  16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1050
		  CompMethod>(%% Line 1050
			      16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1051
		  LastModTime>(%% Line 1051
			       16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1052
		  LastModDate>(%% Line 1052
			       16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1053
		  CRC32>(%% Line 1053
			 32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1054
		  CompSize>(%% Line 1054
			    32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1055
		  UncompSize>(%% Line 1055
			      32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1056
		  FileNameLength>(%% Line 1056
				  16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1057
		  ExtraFieldLength>(%% Line 1057
				    16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1058
		  FileCommentLength>(%% Line 1058
				     16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1059
		  DiskNumStart>(%% Line 1059
				16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1060
		  InternalAttr>(%% Line 1060
				16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1061
		  ExternalAttr>(%% Line 1061
				32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1062
		  LocalHeaderOffset>(%% Line 1062
				     32,1,'integer',['unsigned'|['little']])}#
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'cd_file_header_to_bin',1}}] )
	    -| ['compiler_generated'] )
	end
'local_file_header_to_bin'/1 =
    %% Line 1064
    fun (_cor0) ->
	case _cor0 of
	  <%% Line 1065
	   {'local_file_header',VersionNeeded,%% Line 1066
					      GPFlag,%% Line 1067
						     CompMethod,%% Line 1068
								LastModTime,%% Line 1069
									    LastModDate,%% Line 1070
											CRC32,%% Line 1071
											      CompSize,%% Line 1072
												       UncompSize,%% Line 1073
														  FileNameLength,%% Line 1074
																 ExtraFieldLength}> when 'true' ->
	      %% Line 1075
	      #{#<VersionNeeded>(16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1076
		  GPFlag>(%% Line 1076
			  16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1077
		  CompMethod>(%% Line 1077
			      16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1078
		  LastModTime>(%% Line 1078
			       16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1079
		  LastModDate>(%% Line 1079
			       16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1080
		  CRC32>(%% Line 1080
			 32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1081
		  CompSize>(%% Line 1081
			    32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1082
		  UncompSize>(%% Line 1082
			      32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1083
		  FileNameLength>(%% Line 1083
				  16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1084
		  ExtraFieldLength>(%% Line 1084
				    16,1,'integer',['unsigned'|['little']])}#
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'local_file_header_to_bin',1}}] )
	    -| ['compiler_generated'] )
	end
'eocd_to_bin'/1 =
    %% Line 1086
    fun (_cor0) ->
	case _cor0 of
	  <{'eocd',DiskNum,%% Line 1087
			   StartDiskNum,%% Line 1088
					EntriesOnDisk,%% Line 1089
						      Entries,%% Line 1090
							      Size,%% Line 1091
								   Offset,%% Line 1092
									  ZipCommentLength}> when 'true' ->
	      %% Line 1093
	      #{#<DiskNum>(16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1094
		  StartDiskNum>(%% Line 1094
				16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1095
		  EntriesOnDisk>(%% Line 1095
				 16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1096
		  Entries>(%% Line 1096
			   16,1,'integer',['unsigned'|['little']]),
		#<%% Line 1097
		  Size>(%% Line 1097
			32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1098
		  Offset>(%% Line 1098
			  32,1,'integer',['unsigned'|['little']]),
		#<%% Line 1099
		  ZipCommentLength>(%% Line 1099
				    16,1,'integer',['unsigned'|['little']])}#
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'eocd_to_bin',1}}] )
	    -| ['compiler_generated'] )
	end
'local_file_header_from_info_method_name'/4 =
    %% Line 1102
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'file_info',_cor12,_cor13,_cor14,_cor15,MTime,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},%% Line 1103
														   UncompSize,%% Line 1104
															      CompMethod,%% Line 1104
																	 Name> when 'true' ->
	      %% Line 1105
	      case apply 'dos_date_time_from_datetime'/1
		       (MTime) of
		<{ModDate,ModTime}> when 'true' ->
		    let <_cor5> =
			%% Line 1114
			call 'erlang':'length'
			    (Name)
		    in  %% Line 1106
			{'local_file_header',20,%% Line 1107
						0,%% Line 1108
						  CompMethod,%% Line 1109
							     ModTime,%% Line 1110
								     ModDate,-1,-1,%% Line 1113
										   UncompSize,_cor5,%% Line 1115
												    0}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'local_file_header_from_info_method_name',4}}] )
	    -| ['compiler_generated'] )
	end
'server_loop'/1 =
    %% Line 1119
    fun (_cor0) ->
	%% Line 1120
	receive
	  %% Line 1121
	  <{From,{'open',Archive,Options}}> when 'true' ->
	      %% Line 1122
	      case apply 'openzip_open'/2
		       (Archive, Options) of
		%% Line 1123
		<{'ok',NewOpenZip}> when 'true' ->
		    let <_cor2> =
			%% Line 1124
			call 'erlang':'self'
			    ()
		    in  let <_cor1> =
			    %% Line 1124
			    call 'erlang':'self'
				()
			in  do  %% Line 1124
				call 'erlang':'!'
				    (From, {_cor2,{'ok',_cor1}})
				%% Line 1125
				apply 'server_loop'/1
				    (NewOpenZip)
		%% Line 1126
		<Error> when 'true' ->
		    let <_cor3> =
			%% Line 1127
			call 'erlang':'self'
			    ()
		    in  %% Line 1127
			call 'erlang':'!'
			    (From, {_cor3,Error})
	      end
	  %% Line 1129
	  <{From,'close'}> when 'true' ->
	      let <_cor6> =
		  %% Line 1130
		  call 'erlang':'self'
		      ()
	      in  let <_cor5> =
		      %% Line 1130
		      apply 'openzip_close'/1
			  (_cor0)
		  in  %% Line 1130
		      call 'erlang':'!'
			  (From, {_cor6,_cor5})
	  %% Line 1131
	  <{From,'get'}> when 'true' ->
	      let <_cor8> =
		  %% Line 1132
		  call 'erlang':'self'
		      ()
	      in  let <_cor7> =
		      %% Line 1132
		      apply 'openzip_get'/1
			  (_cor0)
		  in  do  %% Line 1132
			  call 'erlang':'!'
			      (From, {_cor8,_cor7})
			  %% Line 1133
			  apply 'server_loop'/1
			      (_cor0)
	  %% Line 1134
	  <{From,{'get',FileName}}> when 'true' ->
	      let <_cor10> =
		  %% Line 1135
		  call 'erlang':'self'
		      ()
	      in  let <_cor9> =
		      %% Line 1135
		      apply 'openzip_get'/2
			  (FileName, _cor0)
		  in  do  %% Line 1135
			  call 'erlang':'!'
			      (From, {_cor10,_cor9})
			  %% Line 1136
			  apply 'server_loop'/1
			      (_cor0)
	  %% Line 1137
	  <{From,'list_dir'}> when 'true' ->
	      let <_cor12> =
		  %% Line 1138
		  call 'erlang':'self'
		      ()
	      in  let <_cor11> =
		      %% Line 1138
		      apply 'openzip_list_dir'/1
			  (_cor0)
		  in  do  %% Line 1138
			  call 'erlang':'!'
			      (From, {_cor12,_cor11})
			  %% Line 1139
			  apply 'server_loop'/1
			      (_cor0)
	  %% Line 1140
	  <{From,{'list_dir',Opts}}> when 'true' ->
	      let <_cor14> =
		  %% Line 1141
		  call 'erlang':'self'
		      ()
	      in  let <_cor13> =
		      %% Line 1141
		      apply 'openzip_list_dir'/2
			  (_cor0, Opts)
		  in  do  %% Line 1141
			  call 'erlang':'!'
			      (From, {_cor14,_cor13})
			  %% Line 1142
			  apply 'server_loop'/1
			      (_cor0)
	  %% Line 1143
	  <{From,'get_state'}> when 'true' ->
	      let <_cor15> =
		  %% Line 1144
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 1144
		      call 'erlang':'!'
			  (From, {_cor15,_cor0})
		      %% Line 1145
		      apply 'server_loop'/1
			  (_cor0)
	  %% Line 1146
	  <_cor17> when 'true' ->
	      %% Line 1147
	      {'error','bad_msg'}
	after 'infinity' ->
	  'true'
'zip_open'/1 =
    %% Line 1155
    fun (_cor0) ->
	apply 'zip_open'/2
	    (_cor0, [])
'zip_open'/2 =
    %% Line 1164
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1165
	    ( fun () ->
		  apply 'server_loop'/1
		      ('not_open')
	      -| [{'id',{0,0,'-zip_open/2-fun-0-'}}] )
	in  let <Pid> =
		%% Line 1165
		call 'erlang':'spawn'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 1166
		    call 'erlang':'self'
			()
		in  %% Line 1166
		    apply 'request'/3
			(_cor4, Pid, {'open',_cor1,_cor0})
'zip_get'/1 =
    %% Line 1173
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1174
		  call 'erlang':'self'
		      ()
	      in  %% Line 1174
		  apply 'request'/3
		      (_cor1, Pid, 'get')
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'zip_get',1}}] )
	    -| ['compiler_generated'] )
	end
'zip_close'/1 =
    %% Line 1179
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1180
		  call 'erlang':'self'
		      ()
	      in  %% Line 1180
		  apply 'request'/3
		      (_cor1, Pid, 'close')
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'zip_close',1}}] )
	    -| ['compiler_generated'] )
	end
'zip_get'/2 =
    %% Line 1188
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FileName,Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor2> =
		  %% Line 1189
		  call 'erlang':'self'
		      ()
	      in  %% Line 1189
		  apply 'request'/3
		      (_cor2, Pid, {'get',FileName})
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'zip_get',2}}] )
	    -| ['compiler_generated'] )
	end
'zip_list_dir'/1 =
    %% Line 1196
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1197
		  call 'erlang':'self'
		      ()
	      in  %% Line 1197
		  apply 'request'/3
		      (_cor1, Pid, 'list_dir')
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'zip_list_dir',1}}] )
	    -| ['compiler_generated'] )
	end
'zip_list_dir'/2 =
    %% Line 1199
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,Opts>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor2> =
		  %% Line 1200
		  call 'erlang':'self'
		      ()
	      in  %% Line 1200
		  apply 'request'/3
		      (_cor2, Pid, {'list_dir',Opts})
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'zip_list_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'zip_get_state'/1 =
    %% Line 1202
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1203
		  call 'erlang':'self'
		      ()
	      in  %% Line 1203
		  apply 'request'/3
		      (_cor1, Pid, 'get_state')
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'zip_get_state',1}}] )
	    -| ['compiler_generated'] )
	end
'request'/3 =
    %% Line 1205
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1206
	    call 'erlang':'!'
		(_cor1, {_cor2,_cor0})
	    %% Line 1207
	    receive
	      %% Line 1208
	      <{_cor6,R}>
		  when call 'erlang':'=:='
			(_cor6,
			 _cor1) ->
		  R
	    after 'infinity' ->
	      'true'
'zip_t'/1 =
    %% Line 1211
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1212
		  call 'erlang':'self'
		      ()
	      in  let <Openzip> =
		      %% Line 1212
		      apply 'request'/3
			  (_cor1, Pid, 'get_state')
		  in  %% Line 1213
		      apply 'openzip_t'/1
			  (Openzip)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'zip_t',1}}] )
	    -| ['compiler_generated'] )
	end
'zip_tt'/1 =
    %% Line 1215
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1216
		  call 'erlang':'self'
		      ()
	      in  let <Openzip> =
		      %% Line 1216
		      apply 'request'/3
			  (_cor1, Pid, 'get_state')
		  in  %% Line 1217
		      apply 'openzip_tt'/1
			  (Openzip)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'zip_tt',1}}] )
	    -| ['compiler_generated'] )
	end
'openzip_tt'/1 =
    %% Line 1219
    fun (_cor0) ->
	case _cor0 of
	  <{'openzip',ZipComment,Files,_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      do  %% Line 1220
		  apply 'print_comment'/1
		      (ZipComment)
		  let <_cor4> =
		      %% Line 1221
		      ( fun (_cor2) ->
			    case _cor2 of
			      <{{'zip_file',%% Line 1222
					    FileName,%% Line 1224
						     FI,%% Line 1223
							FileComment,_cor11,CompSize},_cor12}> when 'true' ->
				  %% Line 1225
				  case FI of
				    <{'file_info',UncompSize,_cor13,_cor14,_cor15,MTime,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
					%% Line 1226
					apply 'print_header'/5
					    (CompSize, MTime, UncompSize, %% Line 1227
									  FileName, %% Line 1227
										    FileComment)
				    ( <_cor1> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor1})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'-openzip_tt/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-openzip_tt/1-fun-0-'}}] )
		  in  do  %% Line 1221
			  apply 'lists_foreach'/2
			      (_cor4, %% Line 1228
				      Files)
			  %% Line 1229
			  'ok'
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'openzip_tt',1}}] )
	    -| ['compiler_generated'] )
	end
'openzip_t'/1 =
    %% Line 1231
    fun (_cor0) ->
	case _cor0 of
	  <{'openzip',ZipComment,Files,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      do  %% Line 1232
		  apply 'print_comment'/1
		      (ZipComment)
		  let <_cor3> =
		      %% Line 1233
		      ( fun (_cor1) ->
			    case _cor1 of
			      <{{'zip_file',FileName,_cor10,_cor11,_cor12,_cor13},_cor14}> when 'true' ->
				  %% Line 1234
				  apply 'print_file_name'/1
				      (FileName)
			      ( <_cor2> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor2})
				      -| [{'function_name',{'-openzip_t/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-openzip_t/1-fun-0-'}}] )
		  in  do  %% Line 1233
			  apply 'lists_foreach'/2
			      (_cor3, %% Line 1235
				      Files)
			  %% Line 1236
			  'ok'
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'openzip_t',1}}] )
	    -| ['compiler_generated'] )
	end
'lists_foreach'/2 =
    %% Line 1238
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,[]> when 'true' ->
	      %% Line 1239
	      'ok'
	  %% Line 1240
	  <F,[Hd|Tl]> when 'true' ->
	      do  %% Line 1241
		  apply F
		      (Hd)
		  %% Line 1242
		  apply 'lists_foreach'/2
		      (F, Tl)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lists_foreach',2}}] )
	    -| ['compiler_generated'] )
	end
'get_openzip_opt'/2 =
    %% Line 1245
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Opts> when 'true' ->
	      %% Line 1246
	      Opts
	  %% Line 1247
	  <['cooked'|Rest],Opts = {'openzip_opts',_cor15,OO,_cor16}> when 'true' ->
	      let <_rec37> =
		  %% Line 1248
		  call 'erlang':'--'
		      (OO, ['raw'])
	      in  let <_cor5> =
		      %% Line 1248
		      call 'erlang':'setelement'
			  (3, Opts, _rec37)
		  in  %% Line 1248
		      apply 'get_openzip_opt'/2
			  (Rest, _cor5)
	  %% Line 1249
	  <['memory'|Rest],Opts> when 'true' ->
	      let <_rec39> = 'binary_io'/2
	      in  %% Line 1250
		  case Opts of
		    <{'openzip_opts',_cor21,_cor22,_cor23}> when 'true' ->
			let <_cor9> =
			    call 'erlang':'setelement'
				(2, Opts, _rec39)
			in  apply 'get_openzip_opt'/2
				(Rest, _cor9)
		    ( <_cor24> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','openzip_opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1251
	  <[{'cwd',CWD}|Rest],Opts> when 'true' ->
	      %% Line 1252
	      case Opts of
		<{'openzip_opts',_cor25,_cor26,_cor27}> when 'true' ->
		    let <_cor12> =
			call 'erlang':'setelement'
			    (4, Opts, CWD)
		    in  apply 'get_openzip_opt'/2
			    (Rest, _cor12)
		( <_cor28> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','openzip_opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1253
	  <[Unknown|_X_Rest],_X_Opts> when 'true' ->
	      %% Line 1254
	      call 'erlang':'throw'
		  ({'bad_option',Unknown})
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'get_openzip_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'get_central_dir'/3 =
    %% Line 1257
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1258
	case apply 'get_end_of_central_dir'/3
		 (_cor2, 22, _cor0) of
	  <{B,In1}> when 'true' ->
	      %% Line 1259
	      case apply 'eocd_and_comment_from_bin'/1
		       (B) of
		<{EOCD,BComment}> when 'true' ->
		    %% Line 1260
		    ( case EOCD of
			( <( {'eocd',_cor24,_cor25,_cor26,_cor27,_cor28,_rec42,_cor29}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <In2> =
				  apply _cor0
				      ({'seek','bof',_rec42}, In1)
			      in  let <_cor19> =
				      %% Line 1263
				      call 'erlang':'binary_to_list'
					  (BComment)
				  in  let <Out0> =
					  %% Line 1263
					  apply _cor1
					      (EOCD, [], _cor19, #{}#, [])
				      in  %% Line 1264
					  apply 'get_cd_loop'/5
					      (_cor27, In2, _cor1, _cor0, Out0)
			  -| ['compiler_generated'] )
			( <_cor30> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','eocd'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor10})
	    -| ['compiler_generated'] )
	end
'get_cd_loop'/5 =
    %% Line 1266
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,In,_X_RawIterator,_X_Input,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 1267
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1267
		  {_cor5,In}
	  %% Line 1268
	  <N,In0,RawIterator,Input,Acc0> when 'true' ->
	      %% Line 1269
	      case apply Input
		       ({'read',46}, In0) of
		<{B,In1}> when 'true' ->
		    %% Line 1270
		    case ( B
			   -| ['reuse_for_context'] ) of
		      %% Line 1271
		      <#{#<33639248>(32,1,'integer',['unsigned'|['little']]),
			 #<XBCD>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <CD> =
			      %% Line 1274
			      apply 'cd_file_header_from_bin'/1
				  (XBCD)
			  in  %% Line 1275
			      ( case CD of
				  ( <( {'cd_file_header',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_rec44,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor36> =
					    %% Line 1278
					    call 'erlang':'+'
						(_rec44, _cor57)
					in  let <ToRead> =
						%% Line 1278
						call 'erlang':'+'
						    (_cor36, _cor58)
					    in  %% Line 1279
						case apply Input
							 ({'read',ToRead}, In1) of
						  <{B2,In2}> when 'true' ->
						      %% Line 1280
						      case %% Line 1281
							   apply 'get_name_extra_comment'/4
							       (B2, _rec44, _cor57, _cor58) of
							<{FileName,Comment,BExtra}> when 'true' ->
							    let <Acc1> =
								%% Line 1282
								apply RawIterator
								    (CD, FileName, Comment, BExtra, Acc0)
							    in  let <_cor41> =
								    %% Line 1283
								    call 'erlang':'-'
									(N, 1)
								in  %% Line 1283
								    apply 'get_cd_loop'/5
									(_cor41, In2, RawIterator, Input, Acc1)
							( <_cor39> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor39})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor38> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor38})
						    -| ['compiler_generated'] )
						end
				    -| ['compiler_generated'] )
				  ( <_cor63> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','cd_file_header'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      %% Line 1272
		      <_cor47> when 'true' ->
			  call 'erlang':'throw'
			      ('bad_central_directory')
		    end
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	end
'get_name_extra_comment'/4 =
    %% Line 1285
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1286
	case ( _cor3
	       -| ['reuse_for_context'] ) of
	  %% Line 1287
	  <#{#<BFileName>(_cor2,8,'binary',['unsigned'|['big']]),
	     #<%% Line 1288
	       BExtra>(_cor1,8,'binary',['unsigned'|['big']]),
	     #<%% Line 1289
	       BComment>(_cor0,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor5> =
		  %% Line 1290
		  call 'erlang':'binary_to_list'
		      (BFileName)
	      in  let <_cor4> =
		      %% Line 1290
		      call 'erlang':'binary_to_list'
			  (BComment)
		  in  %% Line 1290
		      {_cor5,_cor4,BExtra}
	  %% Line 1291
	  <_cor11> when 'true' ->
	      %% Line 1292
	      call 'erlang':'throw'
		  ('bad_central_directory')
	end
'get_end_of_central_dir'/3 =
    %% Line 1298
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_In,Sz,_X_Input>
	      when call 'erlang':'>'
		    (Sz,
		     65535) ->
	      %% Line 1299
	      call 'erlang':'throw'
		  ('bad_eocd')
	  %% Line 1300
	  <In0,Sz,Input> when 'true' ->
	      let <_cor3> =
		  %% Line 1301
		  call 'erlang':'-'
		      (Sz)
	      in  let <In1> =
		      %% Line 1301
		      apply Input
			  ({'seek','eof',_cor3}, In0)
		  in  %% Line 1302
		      case apply Input
			       ({'read',Sz}, In1) of
			<{B,In2}> when 'true' ->
			    %% Line 1303
			    case apply 'find_eocd_header'/1
				     (B) of
			      %% Line 1304
			      <'none'> when 'true' ->
				  let <_cor6> =
				      %% Line 1305
				      call 'erlang':'+'
					  (Sz, Sz)
				  in  %% Line 1305
				      apply 'get_end_of_central_dir'/3
					  (In2, _cor6, Input)
			      %% Line 1306
			      <Header> when 'true' ->
				  %% Line 1307
				  {Header,In2}
			    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	end
'find_eocd_header'/1 =
    %% Line 1311
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<101010256>(32,1,'integer',['unsigned'|['little']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1312
	      Rest
	  %% Line 1313
	  <#{#<_cor11>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when %% Line 1314
		try
		    let <_cor9> =
			call 'erlang':'byte_size'
			    (Rest)
		    in  call 'erlang':'>'
			    (_cor9, 18)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1315
	      apply 'find_eocd_header'/1
		  (Rest)
	  %% Line 1316
	  <_cor12> when 'true' ->
	      %% Line 1317
	      'none'
	end
'raw_file_info_etc'/5 =
    %% Line 1322
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <CD = {'cd_file_header',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27},FileName,FileComment,BExtraField,Acc> when %% Line 1323
																							      ( 'true'
																								-| ['compiler_generated'] ) ->
	      let <FileInfo> =
		  %% Line 1327
		  apply 'cd_file_header_to_file_info'/3
		      (FileName, CD, BExtraField)
	      in  %% Line 1328
		  [{{'zip_file',FileName,FileInfo,FileComment,_cor27,_cor19},%% Line 1329
									     {'zip_file_extra',_cor18}}|%% Line 1329
													Acc]
	  %% Line 1330
	  <EOCD = {'eocd',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47},_cor48,Comment,_cor49,Acc> when ( 'true'
													      -| ['compiler_generated'] ) ->
	      %% Line 1331
	      [{'zip_comment',Comment}|Acc]
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'raw_file_info_etc',5}}] )
	    -| ['compiler_generated'] )
	end
'raw_file_info_public'/5 =
    %% Line 1334
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1335
	case apply 'raw_file_info_etc'/5
		 (_cor4, _cor3, _cor2, _cor1, _cor0) of
	  <[H1|T]> when 'true' ->
	      let <_cor7> =
		  %% Line 1336
		  case H1 of
		    %% Line 1337
		    <{ZF,Extra = {'zip_file_extra',_cor14}}> when ( 'true'
								    -| ['compiler_generated'] ) ->
			ZF
		    %% Line 1338
		    <Other> when 'true' ->
			Other
		  end
	      in  %% Line 1340
		  [_cor7|T]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'cd_file_header_to_file_info'/3 =
    %% Line 1344
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <FileName,%% Line 1345
		    {'cd_file_header',_cor11,_cor12,_cor13,_cor14,%% Line 1346
								  ModTime,%% Line 1347
									  ModDate,_cor15,_cor16,UncompSize,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},%% Line 1348
																			     ExtraField> when 'true' ->
	      let <T> =
		  %% Line 1349
		  apply 'dos_date_time_to_datetime'/2
		      (ModDate, ModTime)
	      in  let <_cor5> =
		      %% Line 1351
		      case call 'lists':'last'
			       (FileName) of
			%% Line 1352
			<47> when 'true' ->
			    'directory'
			%% Line 1353
			<_cor24> when 'true' ->
			    'regular'
		      end
		  in  let <FI> =
			  %% Line 1355
			  {'file_info',UncompSize,_cor5,%% Line 1357
							'read_write',%% Line 1358
								     T,%% Line 1359
								       T,%% Line 1360
									 T,%% Line 1361
									   54,%% Line 1362
									      1,%% Line 1363
										0,%% Line 1364
										  0,%% Line 1365
										    0,%% Line 1366
										      0,%% Line 1367
											0}
		      in  %% Line 1368
			  apply 'add_extra_info'/2
			      (FI, ExtraField)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'cd_file_header_to_file_info',3}}] )
	    -| ['compiler_generated'] )
	end
'add_extra_info'/2 =
    %% Line 1371
    fun (_cor1,_cor0) ->
	case <_cor1,( _cor0
		      -| ['reuse_for_context'] )> of
	  <FI,#{#<21589>(16,1,'integer',['unsigned'|['little']]),
		#<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1372
	      FI
	  %% Line 1373
	  <FI,#{#<13>(16,1,'integer',['unsigned'|['little']]),
		#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      do  %% Line 1374
		  apply 'unix_extra_field_and_var_from_bin'/1
		      (Rest)
		  %% Line 1375
		  FI
	  %% Line 1376
	  <FI,_cor5> when 'true' ->
	      %% Line 1377
	      FI
	end
'get_z_files'/5 =
    %% Line 1383
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Z,_X_In,_X_Opts,Acc> when 'true' ->
	      %% Line 1384
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 1385
	  <[{'zip_comment',_cor15}|Rest],Z,In,Opts,Acc> when 'true' ->
	      %% Line 1386
	      apply 'get_z_files'/5
		  (Rest, Z, In, Opts, Acc)
	  %% Line 1387
	  <[ZFile = {{'zip_file',_cor16,_cor17,_cor18,Offset,_cor19},_cor20}|Rest],Z,In0,Opts = %% Line 1388
												{'unzip_opts',Output,Input,%% Line 1389
															   Filter,OpO,%% Line 1389
																      FB,%% Line 1390
																	 CWD},%% Line 1390
																	      Acc0> when 'true' ->
	      %% Line 1391
	      case apply Filter
		       (ZFile) of
		%% Line 1392
		<'true'> when 'true' ->
		    let <In1> =
			%% Line 1393
			apply Input
			    ({'seek','bof',Offset}, In0)
		    in  let <In2,Acc1> =
			    %% Line 1395
			    case apply 'get_z_file'/8
				     (In1, Z, Input, Output, OpO, FB, CWD, ZFile) of
			      %% Line 1396
			      <{'file',GZD,Inx}> when 'true' ->
				  <Inx,[GZD|Acc0]>
			      %% Line 1397
			      <{'dir',Inx}> when 'true' ->
				  <Inx,Acc0>
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
			in  %% Line 1399
			    apply 'get_z_files'/5
				(Rest, Z, In2, Opts, Acc1)
		%% Line 1400
		<_cor21> when 'true' ->
		    %% Line 1401
		    apply 'get_z_files'/5
			(Rest, Z, In0, Opts, Acc0)
	      end
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'get_z_files',5}}] )
	    -| ['compiler_generated'] )
	end
'get_z_file'/8 =
    %% Line 1405
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <In0,Z,Input,Output,OpO,FB,CWD,{ZipFile,Extra}> when 'true' ->
	      %% Line 1406
	      case apply Input
		       ({'read',30}, In0) of
		%% Line 1407
		<{'eof',In1}> when 'true' ->
		    %% Line 1408
		    {'eof',In1}
		%% Line 1410
		<{#{#<67324752>(32,1,'integer',['unsigned'|['little']]),
		    #<B>('all',8,'binary',['unsigned'|['big']])}#,In1}> when 'true' ->
		    %% Line 1415
		    case apply 'local_file_header_from_bin'/1
			     (B) of
		      <{'local_file_header',_cor50,GPFlag,CompMethod,_cor51,_cor52,_cor53,_cor54,_cor55,FileNameLen,ExtraLen}> when 'true' ->
			  let <_cor20> =
			      %% Line 1417
			      call 'erlang':'band'
				  (GPFlag, 8)
			  in  let <CompSize,CRC32> =
				  %% Line 1417
				  case <> of
				    %% Line 1418
				    <>
					when call 'erlang':'=:='
					      (_cor20,
					       8) ->
					( case ZipFile of
					    ( <( {'zip_file',_cor56,_cor57,_cor58,_cor59,_rec47}
						 -| ['compiler_generated'] )> when 'true' ->
						  %% Line 1419
						  ( case Extra of
						      ( <( {'zip_file_extra',_rec48}
							   -| ['compiler_generated'] )> when 'true' ->
							    <_rec47,_rec48>
							-| ['compiler_generated'] )
						      ( <_cor61> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','zip_file_extra'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_cor60> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','zip_file'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 1420
				    <> when 'true' ->
					<_cor54,_cor53>
				  end
			      in  let <_cor32> =
				      %% Line 1423
				      call 'erlang':'+'
					  (FileNameLen, ExtraLen)
				  in  %% Line 1423
				      case apply Input
					       ({'read',_cor32}, In1) of
					<{BFileN,In3}> when 'true' ->
					    %% Line 1424
					    case apply 'get_file_name_extra'/3
						     (FileNameLen, ExtraLen, BFileN) of
					      <{FileName,_cor82}> when 'true' ->
						  let <FileName1> =
						      %% Line 1425
						      apply 'add_cwd'/2
							  (CWD, FileName)
						  in  %% Line 1426
						      case call 'lists':'last'
							       (FileName) of
							%% Line 1427
							<47> when 'true' ->
							    do  %% Line 1429
								apply Output
								    ({'ensure_dir',FileName1}, [])
								%% Line 1430
								{'dir',In3}
							%% Line 1431
							<_cor83> when 'true' ->
							    %% Line 1434
							    case %% Line 1435
								 apply 'get_z_data'/8
								     (CompMethod, In3, FileName1, %% Line 1436
												  CompSize, %% Line 1436
													    Input, %% Line 1436
														   Output, %% Line 1436
															   OpO, %% Line 1436
																Z) of
							      <{Out,In4,CRC,_X_UncompSize}> when 'true' ->
								  let <In5> =
								      %% Line 1437
								      apply 'skip_z_data_descriptor'/3
									  (GPFlag, Input, In4)
								  in  do  %% Line 1440
									  apply FB
									      (FileName)
									  do  %% Line 1441
									      ( case <> of
										  ( <>
											when call 'erlang':'=:='
											      (CRC,
											       CRC32) ->
											'ok'
										    -| ['compiler_generated'] )
										  ( <> when 'true' ->
											call 'erlang':'throw'
											    ({'bad_crc',FileName})
										    -| ['compiler_generated'] )
										end
										-| ['compiler_generated'] )
									      %% Line 1442
									      {'file',Out,In5}
							      ( <_cor36> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor36})
								-| ['compiler_generated'] )
							    end
						      end
					      ( <_cor34> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor34})
						-| ['compiler_generated'] )
					    end
					( <_cor33> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor33})
					  -| ['compiler_generated'] )
				      end
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor19})
			-| ['compiler_generated'] )
		    end
		%% Line 1444
		<_cor84> when 'true' ->
		    %% Line 1445
		    call 'erlang':'throw'
			('bad_local_file_header')
	      end
	  ( <_cor49,_cor48,_cor47,_cor46,_cor45,_cor44,_cor43,_cor42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor49,_cor48,_cor47,_cor46,_cor45,_cor44,_cor43,_cor42})
		  -| [{'function_name',{'get_z_file',8}}] )
	    -| ['compiler_generated'] )
	end
'get_file_name_extra'/3 =
    %% Line 1449
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1450
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  %% Line 1451
	  <#{#<BFileName>(_cor2,8,'binary',['unsigned'|['big']]),
	     #<BExtra>(_cor1,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor3> =
		  %% Line 1452
		  call 'erlang':'binary_to_list'
		      (BFileName)
	      in  %% Line 1452
		  {_cor3,BExtra}
	  %% Line 1453
	  <_cor8> when 'true' ->
	      %% Line 1454
	      call 'erlang':'throw'
		  ('bad_file_header')
	end
'get_z_data'/8 =
    %% Line 1458
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <8,In0,FileName,CompSize,Input,Output,OpO,Z> when 'true' ->
	      %% Line 1459
	      case call 'zlib':'inflateInit'
		       (Z, -15) of
		<'ok'> when 'true' ->
		    let <Out0> =
			%% Line 1460
			apply Output
			    ({'open',FileName,['write'|OpO]}, [])
		    in  %% Line 1461
			case apply 'get_z_data_loop'/7
				 (CompSize, 0, In0, Out0, Input, Output, Z) of
			  <{In1,Out1,UncompSize}> when 'true' ->
			      let <CRC> =
				  %% Line 1462
				  call 'zlib':'crc32'
				      (Z)
			      in  do  catch
					  %% Line 1463
					  call 'zlib':'inflateEnd'
					      (Z)
				      let <Out2> =
					  %% Line 1464
					  apply Output
					      ({'close',FileName}, Out1)
				      in  %% Line 1465
					  {Out2,In1,CRC,UncompSize}
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1466
	  <0,In0,FileName,CompSize,Input,Output,OpO,Z> when 'true' ->
	      let <Out0> =
		  %% Line 1467
		  apply Output
		      ({'open',FileName,['write'|OpO]}, [])
	      in  let <CRC0> =
		      %% Line 1468
		      call 'zlib':'crc32'
			  (Z, #{}#)
		  in  %% Line 1469
		      case apply 'copy_data_loop'/7
			       (CompSize, In0, Out0, Input, Output, %% Line 1470
								    CRC0, %% Line 1470
									  Z) of
			<{In1,Out1,CRC}> when 'true' ->
			    let <Out2> =
				%% Line 1471
				apply Output
				    ({'close',FileName}, Out1)
			    in  %% Line 1472
				{Out2,In1,CRC,CompSize}
			( <_cor16> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor16})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1473
	  <_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33> when 'true' ->
	      %% Line 1474
	      call 'erlang':'throw'
		  ('bad_file_header')
	end
'copy_data_loop'/7 =
    %% Line 1476
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,In,Out,_X_Input,_X_Output,CRC,_X_Z> when 'true' ->
	      %% Line 1477
	      {In,Out,CRC}
	  %% Line 1478
	  <CompSize,In0,Out0,Input,Output,CRC0,Z> when 'true' ->
	      let <N> =
		  %% Line 1479
		  call 'erlang':'min'
		      (16384, CompSize)
	      in  %% Line 1480
		  case apply Input
			   ({'read',N}, In0) of
		    %% Line 1481
		    <{'eof',In1}> when 'true' ->
			{Out0,In1}
		    %% Line 1482
		    <{Uncompressed,In1}> when 'true' ->
			let <CRC1> =
			    %% Line 1483
			    call 'zlib':'crc32'
				(Z, CRC0, Uncompressed)
			in  let <Out1> =
				%% Line 1484
				apply Output
				    ({'write',Uncompressed}, Out0)
			    in  let <_cor11> =
				    %% Line 1485
				    call 'erlang':'-'
					(CompSize, N)
				in  %% Line 1485
				    apply 'copy_data_loop'/7
					(_cor11, In1, Out1, Input, Output, CRC1, Z)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	end
'get_z_data_loop'/7 =
    %% Line 1488
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,UncompSize,In,Out,_X_Input,_X_Output,_X_Z> when 'true' ->
	      %% Line 1489
	      {In,Out,UncompSize}
	  %% Line 1490
	  <CompSize,UncompSize,In0,Out0,Input,Output,Z> when 'true' ->
	      let <N> =
		  %% Line 1491
		  call 'erlang':'min'
		      (16384, CompSize)
	      in  %% Line 1492
		  case apply Input
			   ({'read',N}, In0) of
		    %% Line 1493
		    <{'eof',In1}> when 'true' ->
			%% Line 1494
			{Out0,In1}
		    %% Line 1495
		    <{Compressed,In1}> when 'true' ->
			let <Uncompressed> =
			    %% Line 1496
			    call 'zlib':'inflate'
				(Z, Compressed)
			in  let <Out1> =
				%% Line 1497
				apply Output
				    ({'write',Uncompressed}, Out0)
			    in  let <_cor13> =
				    %% Line 1498
				    call 'erlang':'-'
					(CompSize, N)
				in  let <_cor11> =
					%% Line 1498
					call 'erlang':'iolist_size'
					    (Uncompressed)
				    in  let <_cor12> =
					    %% Line 1498
					    call 'erlang':'+'
						(UncompSize, _cor11)
					in  %% Line 1498
					    apply 'get_z_data_loop'/7
						(_cor13, _cor12, %% Line 1499
								 In1, %% Line 1499
								      Out1, %% Line 1499
									    Input, %% Line 1499
										   Output, %% Line 1499
											   Z)
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	end
'skip_z_data_descriptor'/3 =
    %% Line 1504
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <GPFlag,Input,In0>
	      when try
		    let <_cor3> =
			call 'erlang':'band'
			    (GPFlag, 8)
		    in  call 'erlang':'=:='
			    (_cor3, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1505
	      apply Input
		  ({'seek','cur',12}, In0)
	  %% Line 1506
	  <_X_GPFlag,_X_Input,In0> when 'true' ->
	      %% Line 1507
	      In0
	end
'dos_date_time_to_datetime'/2 =
    %% Line 1514
    fun (_cor1,_cor0) ->
	%% Line 1515
	case #{#<_cor0>(16,1,'integer',['unsigned'|['big']])}# of
	  <#{#<Hour>(5,1,'integer',['unsigned'|['big']]),
	     #<Min>(6,1,'integer',['unsigned'|['big']]),
	     #<Sec>(5,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1516
	      case #{#<_cor1>(16,1,'integer',['unsigned'|['big']])}# of
		<#{#<YearFrom1980>(7,1,'integer',['unsigned'|['big']]),
		   #<Month>(4,1,'integer',['unsigned'|['big']]),
		   #<Day>(5,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor4> =
			%% Line 1517
			call 'erlang':'+'
			    (YearFrom1980, 1980)
		    in  %% Line 1517
			{{_cor4,Month,Day},%% Line 1518
					   {Hour,Min,Sec}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dos_date_time_from_datetime'/1 =
    %% Line 1520
    fun (_cor0) ->
	case _cor0 of
	  <{{Year,Month,Day},{Hour,Min,Sec}}> when 'true' ->
	      let <YearFrom1980> =
		  %% Line 1521
		  call 'erlang':'-'
		      (Year, 1980)
	      in  %% Line 1522
		  case #{#<Hour>(5,1,'integer',['unsigned'|['big']]),
			 #<Min>(6,1,'integer',['unsigned'|['big']]),
			 #<Sec>(5,1,'integer',['unsigned'|['big']])}# of
		    <#{#<DosTime>(16,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			%% Line 1523
			case #{#<YearFrom1980>(7,1,'integer',['unsigned'|['big']]),
			       #<Month>(4,1,'integer',['unsigned'|['big']]),
			       #<Day>(5,1,'integer',['unsigned'|['big']])}# of
			  <#{#<DosDate>(16,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			      %% Line 1524
			      {DosDate,DosTime}
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'dos_date_time_from_datetime',1}}] )
	    -| ['compiler_generated'] )
	end
'unix_extra_field_and_var_from_bin'/1 =
    %% Line 1526
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<TSize>(16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1527
	       ATime>(%% Line 1527
		      32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1528
	       MTime>(%% Line 1528
		      32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1529
	       UID>(%% Line 1529
		    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1530
	       GID>(%% Line 1530
		    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1531
	       Var>(TSize,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1532
	      {{'unix_extra_field',ATime,%% Line 1533
					 MTime,%% Line 1534
					       UID,%% Line 1535
						   GID},%% Line 1536
							Var}
	  %% Line 1537
	  <_cor2> when 'true' ->
	      %% Line 1538
	      call 'erlang':'throw'
		  ('bad_unix_extra_field')
	end
'split_iolist'/2 =
    %% Line 1542
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <B,Pos>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1543
	      call 'erlang':'split_binary'
		  (B, Pos)
	  %% Line 1544
	  <L,Pos>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1545
	      apply 'splitter'/3
		  ([], L, Pos)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'split_iolist',2}}] )
	    -| ['compiler_generated'] )
	end
'splitter'/3 =
    %% Line 1547
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Left,Right,0> when 'true' ->
	      %% Line 1548
	      {Left,Right}
	  %% Line 1549
	  <Left,[A|Right],RelPos>
	      when let <_cor3> =
		    call 'erlang':'is_list'
			(A)
		in  let <_cor4> =
			call 'erlang':'is_binary'
			    (A)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      let <Sz> =
		  %% Line 1550
		  call 'erlang':'iolist_size'
		      (A)
	      in  %% Line 1551
		  case call 'erlang':'>'
			   (Sz, RelPos) of
		    %% Line 1552
		    <'true'> when 'true' ->
			%% Line 1553
			case apply 'split_iolist'/2
				 (A, RelPos) of
			  <{Leftx,Rightx}> when 'true' ->
			      %% Line 1554
			      {[Left|Leftx],[Rightx|[Right|[]]]}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    %% Line 1555
		    <_cor13> when 'true' ->
			let <_cor7> =
			    %% Line 1556
			    call 'erlang':'-'
				(RelPos, Sz)
			in  %% Line 1556
			    apply 'splitter'/3
				([Left|A], Right, _cor7)
		  end
	  %% Line 1558
	  <Left,[A|Right],RelPos>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_cor9> =
		  %% Line 1559
		  call 'erlang':'-'
		      (RelPos, 1)
	      in  %% Line 1559
		  apply 'splitter'/3
		      ([Left|[A|[]]], Right, _cor9)
	  %% Line 1560
	  <Left,Right,RelPos>
	      when call 'erlang':'is_binary'
		    (Right) ->
	      %% Line 1561
	      apply 'splitter'/3
		  (Left, [Right|[]], RelPos)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'splitter',3}}] )
	    -| ['compiler_generated'] )
	end
'skip_iolist'/2 =
    %% Line 1563
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <B,Pos>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1564
	      case ( B
		     -| ['reuse_for_context'] ) of
		%% Line 1565
		<#{#<_cor5>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    Bin
		%% Line 1566
		<_cor6> when 'true' ->
		    #{}#
	      end
	  %% Line 1568
	  <L,Pos>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 1569
	      apply 'skipper'/2
		  (L, Pos)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'skip_iolist',2}}] )
	    -| ['compiler_generated'] )
	end
'skipper'/2 =
    %% Line 1571
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Right,0> when 'true' ->
	      %% Line 1572
	      Right
	  %% Line 1573
	  <[A|Right],RelPos>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(A)
		in  let <_cor3> =
			call 'erlang':'is_binary'
			    (A)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      let <Sz> =
		  %% Line 1574
		  call 'erlang':'iolist_size'
		      (A)
	      in  %% Line 1575
		  case call 'erlang':'>'
			   (Sz, RelPos) of
		    %% Line 1576
		    <'true'> when 'true' ->
			let <Rightx> =
			    %% Line 1577
			    apply 'skip_iolist'/2
				(A, RelPos)
			in  %% Line 1578
			    [Rightx|[Right|[]]]
		    %% Line 1579
		    <_cor11> when 'true' ->
			let <_cor6> =
			    %% Line 1580
			    call 'erlang':'-'
				(RelPos, Sz)
			in  %% Line 1580
			    apply 'skip_iolist'/2
				(Right, _cor6)
		  end
	  %% Line 1582
	  <[A|Right],RelPos>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_cor8> =
		  %% Line 1583
		  call 'erlang':'-'
		      (RelPos, 1)
	      in  %% Line 1583
		  apply 'skip_iolist'/2
		      (Right, _cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'skipper',2}}] )
	    -| ['compiler_generated'] )
	end
'pwrite_iolist'/3 =
    %% Line 1585
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1586
	case apply 'split_iolist'/2
		 (_cor2, _cor1) of
	  <{Left,Right}> when 'true' ->
	      let <Sz> =
		  %% Line 1587
		  call 'erlang':'iolist_size'
		      (_cor0)
	      in  let <R> =
		      %% Line 1588
		      apply 'skip_iolist'/2
			  (Right, Sz)
		  in  %% Line 1589
		      [Left|[_cor0|R]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'pwrite_binary'/3 =
    %% Line 1591
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1592
	    apply 'pwrite_iolist'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 1592
	    call 'erlang':'iolist_to_binary'
		(_cor3)
'eocd_and_comment_from_bin'/1 =
    %% Line 1596
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<DiskNum>(16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1597
	       StartDiskNum>(%% Line 1597
			     16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1598
	       EntriesOnDisk>(%% Line 1598
			      16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1599
	       Entries>(%% Line 1599
			16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1600
	       Size>(%% Line 1600
		     32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1601
	       Offset>(%% Line 1601
		       32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1602
	       ZipCommentLength>(%% Line 1602
				 16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1603
	       Comment>(%% Line 1602
			ZipCommentLength,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1604
	      {{'eocd',DiskNum,%% Line 1605
			       StartDiskNum,%% Line 1606
					    EntriesOnDisk,%% Line 1607
							  Entries,%% Line 1608
								  Size,%% Line 1609
								       Offset,%% Line 1610
									      ZipCommentLength},%% Line 1611
												Comment}
	  %% Line 1612
	  <_cor2> when 'true' ->
	      %% Line 1613
	      call 'erlang':'throw'
		  ('bad_eocd')
	end
'cd_file_header_from_bin'/1 =
    %% Line 1615
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<VersionMadeBy>(16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1616
	       VersionNeeded>(%% Line 1616
			      16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1617
	       GPFlag>(%% Line 1617
		       16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1618
	       CompMethod>(%% Line 1618
			   16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1619
	       LastModTime>(%% Line 1619
			    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1620
	       LastModDate>(%% Line 1620
			    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1621
	       CRC32>(%% Line 1621
		      32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1622
	       CompSize>(%% Line 1622
			 32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1623
	       UncompSize>(%% Line 1623
			   32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1624
	       FileNameLength>(%% Line 1624
			       16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1625
	       ExtraFieldLength>(%% Line 1625
				 16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1626
	       FileCommentLength>(%% Line 1626
				  16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1627
	       DiskNumStart>(%% Line 1627
			     16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1628
	       InternalAttr>(%% Line 1628
			     16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1629
	       ExternalAttr>(%% Line 1629
			     32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1630
	       LocalHeaderOffset>(%% Line 1630
				  32,1,'integer',['unsigned'|['little']])}#> when 'true' ->
	      %% Line 1631
	      {'cd_file_header',VersionMadeBy,%% Line 1632
					      VersionNeeded,%% Line 1633
							    GPFlag,%% Line 1634
								   CompMethod,%% Line 1635
									      LastModTime,%% Line 1636
											  LastModDate,%% Line 1637
												      CRC32,%% Line 1638
													    CompSize,%% Line 1639
														     UncompSize,%% Line 1640
																FileNameLength,%% Line 1641
																	       ExtraFieldLength,%% Line 1642
																				FileCommentLength,%% Line 1643
																						  DiskNumStart,%% Line 1644
																							       InternalAttr,%% Line 1645
																									    ExternalAttr,%% Line 1646
																											 LocalHeaderOffset}
	  %% Line 1647
	  <_cor2> when 'true' ->
	      %% Line 1648
	      call 'erlang':'throw'
		  ('bad_cd_file_header')
	end
'local_file_header_from_bin'/1 =
    %% Line 1650
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<VersionNeeded>(16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1651
	       GPFlag>(%% Line 1651
		       16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1652
	       CompMethod>(%% Line 1652
			   16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1653
	       LastModTime>(%% Line 1653
			    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1654
	       LastModDate>(%% Line 1654
			    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1655
	       CRC32>(%% Line 1655
		      32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1656
	       CompSize>(%% Line 1656
			 32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1657
	       UncompSize>(%% Line 1657
			   32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1658
	       FileNameLength>(%% Line 1658
			       16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 1659
	       ExtraFieldLength>(%% Line 1659
				 16,1,'integer',['unsigned'|['little']])}#> when 'true' ->
	      %% Line 1660
	      {'local_file_header',VersionNeeded,%% Line 1661
						 GPFlag,%% Line 1662
							CompMethod,%% Line 1663
								   LastModTime,%% Line 1664
									       LastModDate,%% Line 1665
											   CRC32,%% Line 1666
												 CompSize,%% Line 1667
													  UncompSize,%% Line 1668
														     FileNameLength,%% Line 1669
																    ExtraFieldLength}
	  %% Line 1670
	  <_cor2> when 'true' ->
	      %% Line 1671
	      call 'erlang':'throw'
		  ('bad_local_file_header')
	end
'binary_io'/2 =
    %% Line 1695
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_info',{_X_Filename,_X_B,FI = {'file_info',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}}},_X_A> when 'true' ->
	      %% Line 1696
	      FI
	  %% Line 1697
	  <{'file_info',{_X_Filename,FI = {'file_info',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50},_X_B}},_X_A> when 'true' ->
	      %% Line 1698
	      FI
	  %% Line 1699
	  <{'file_info',{_X_Filename,B}},A> when 'true' ->
	      %% Line 1700
	      apply 'binary_io'/2
		  ({'file_info',B}, A)
	  %% Line 1701
	  <{'file_info',B},_cor51> when 'true' ->
	      let <Type,Size> =
		  %% Line 1703
		  case <> of
		    %% Line 1704
		    <>
			when call 'erlang':'is_binary'
			      (B) ->
			let <_cor2> =
			    call 'erlang':'byte_size'
				(B)
			in  <'regular',_cor2>
		    %% Line 1705
		    <>
			when call 'erlang':'=:='
			      (B,
			       'directory') ->
			<'directory',0>
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  let <Now> =
		      %% Line 1707
		      call 'calendar':'local_time'
			  ()
		  in  %% Line 1708
		      {'file_info',Size,Type,%% Line 1709
					     'read_write',%% Line 1709
							  Now,%% Line 1710
							      Now,%% Line 1710
								  Now,%% Line 1710
								      0,%% Line 1711
									1,%% Line 1711
									  0,%% Line 1712
									    0,%% Line 1712
									      0,%% Line 1713
										0,%% Line 1713
										  0}
	  %% Line 1714
	  <{'open',{_X_Filename,B,_X_FI},_X_Opts},_cor52>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1715
	      {0,B}
	  %% Line 1716
	  <{'open',{_X_Filename,_X_FI,B},_X_Opts},_cor53>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1717
	      {0,B}
	  %% Line 1718
	  <{'open',{_X_Filename,B},_X_Opts},_cor54>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1719
	      {0,B}
	  %% Line 1720
	  <{'open',B,_X_Opts},_cor55>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1721
	      {0,B}
	  %% Line 1722
	  <{'open',Filename,_X_Opts},_cor56>
	      when call 'erlang':'is_list'
		    (Filename) ->
	      %% Line 1723
	      {0,#{}#}
	  %% Line 1724
	  <{'read',N},{Pos,B}>
	      when try
		    let <_cor6> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'>='
			    (Pos, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 1725
		  call 'erlang':'+'
		      (Pos, N)
	      in  %% Line 1725
		  {'eof',{_cor7,B}}
	  %% Line 1726
	  <{'read',N},{Pos,B}>
	      when try
		    let <_cor9> =
			call 'erlang':'+'
			    (Pos, N)
		    in  let <_cor8> =
			    call 'erlang':'byte_size'
				(B)
			in  call 'erlang':'>'
				(_cor9, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1727
	      case B of
		<#{#<_cor57>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Read>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor11> =
			%% Line 1728
			call 'erlang':'byte_size'
			    (B)
		    in  %% Line 1728
			{Read,{_cor11,B}}
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1729
	  <{'pread',Pos,N},{OldPos,B}> when 'true' ->
	      %% Line 1730
	      case B of
		%% Line 1731
		<#{#<_cor58>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Read>(N,8,'binary',['unsigned'|['big']]),
		   #<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor12> =
			%% Line 1732
			call 'erlang':'+'
			    (Pos, N)
		    in  %% Line 1732
			{Read,{_cor12,B}}
		%% Line 1733
		<_cor59> when 'true' ->
		    %% Line 1734
		    {'eof',{OldPos,B}}
	      end
	  %% Line 1736
	  <{'read',N},{Pos,B}> when 'true' ->
	      %% Line 1737
	      case B of
		<#{#<_cor60>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Read>(N,8,'binary',['unsigned'|['big']]),
		   #<_cor61>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor15> =
			%% Line 1738
			call 'erlang':'+'
			    (Pos, N)
		    in  %% Line 1738
			{Read,{_cor15,B}}
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1739
	  <{'seek','bof',Pos},{_X_OldPos,B}> when 'true' ->
	      %% Line 1740
	      {Pos,B}
	  %% Line 1741
	  <{'seek','cur',Pos},{OldPos,B}> when 'true' ->
	      let <_cor16> =
		  %% Line 1742
		  call 'erlang':'+'
		      (OldPos, Pos)
	      in  %% Line 1742
		  {_cor16,B}
	  %% Line 1743
	  <{'seek','eof',Pos},{_X_OldPos,B}> when 'true' ->
	      let <_cor17> =
		  %% Line 1744
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor18> =
		      %% Line 1744
		      call 'erlang':'+'
			  (_cor17, Pos)
		  in  %% Line 1744
		      {_cor18,B}
	  %% Line 1745
	  <{'pwrite',Pos,Data},{OldPos,B}> when 'true' ->
	      let <_cor19> =
		  %% Line 1746
		  apply 'pwrite_binary'/3
		      (B, Pos, Data)
	      in  %% Line 1746
		  {OldPos,_cor19}
	  %% Line 1747
	  <{'write',Data},{Pos,B}> when 'true' ->
	      let <_cor21> =
		  %% Line 1748
		  call 'erlang':'iolist_size'
		      (Data)
	      in  let <_cor22> =
		      %% Line 1748
		      call 'erlang':'+'
			  (Pos, _cor21)
		  in  let <_cor20> =
			  %% Line 1748
			  apply 'pwrite_binary'/3
			      (B, Pos, Data)
		      in  %% Line 1748
			  {_cor22,_cor20}
	  %% Line 1749
	  <'close',{_X_Pos,B}> when 'true' ->
	      %% Line 1750
	      B
	  %% Line 1751
	  <{'close',FN},{_X_Pos,B}> when 'true' ->
	      %% Line 1752
	      {FN,B}
	  %% Line 1753
	  <{'list_dir',_X_F},_X_B> when 'true' ->
	      %% Line 1754
	      []
	  %% Line 1755
	  <{'set_file_info',_X_F,_X_FI},B> when 'true' ->
	      %% Line 1756
	      B
	  %% Line 1757
	  <{'ensure_dir',_X_Dir},B> when 'true' ->
	      %% Line 1758
	      B
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'binary_io',2}}] )
	    -| ['compiler_generated'] )
	end
'file_io'/2 =
    %% Line 1760
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_info',F},_cor18> when 'true' ->
	      %% Line 1761
	      case call 'file':'read_file_info'
		       (F) of
		%% Line 1762
		<{'ok',Info}> when 'true' ->
		    Info
		%% Line 1763
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1765
	  <{'open',FN,Opts},_cor19> when 'true' ->
	      do  %% Line 1766
		  case call 'lists':'member'
			   ('write', Opts) of
		    %% Line 1767
		    <'true'> when 'true' ->
			case call 'filelib':'ensure_dir'
				 (FN) of
			  <'ok'> when 'true' ->
			      'ok'
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    %% Line 1768
		    <_cor21> when 'true' ->
			'ok'
		  end
		  let <_cor5> =
		      %% Line 1770
		      call 'erlang':'++'
			  (Opts, ['binary'])
		  in  %% Line 1770
		      case call 'file':'open'
			       (FN, _cor5) of
			%% Line 1771
			<{'ok',H}> when 'true' ->
			    H
			%% Line 1772
			<{'error',E}> when 'true' ->
			    call 'erlang':'throw'
				(E)
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1774
	  <{'read',N},H> when 'true' ->
	      %% Line 1775
	      case call 'file':'read'
		       (H, N) of
		%% Line 1776
		<{'ok',B}> when 'true' ->
		    {B,H}
		%% Line 1777
		<'eof'> when 'true' ->
		    {'eof',H}
		%% Line 1778
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1780
	  <{'pread',Pos,N},H> when 'true' ->
	      %% Line 1781
	      case call 'file':'pread'
		       (H, Pos, N) of
		%% Line 1782
		<{'ok',B}> when 'true' ->
		    {B,H}
		%% Line 1783
		<'eof'> when 'true' ->
		    {'eof',H}
		%% Line 1784
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1786
	  <{'seek',S,Pos},H> when 'true' ->
	      %% Line 1787
	      case call 'file':'position'
		       (H, {S,Pos}) of
		%% Line 1788
		<{'ok',_X_NewPos}> when 'true' ->
		    H
		%% Line 1789
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1791
	  <{'write',Data},H> when 'true' ->
	      %% Line 1792
	      case call 'file':'write'
		       (H, Data) of
		%% Line 1793
		<'ok'> when 'true' ->
		    H
		%% Line 1794
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1796
	  <{'pwrite',Pos,Data},H> when 'true' ->
	      %% Line 1797
	      case call 'file':'pwrite'
		       (H, Pos, Data) of
		%% Line 1798
		<'ok'> when 'true' ->
		    H
		%% Line 1799
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1801
	  <{'close',FN},H> when 'true' ->
	      %% Line 1802
	      case call 'file':'close'
		       (H) of
		%% Line 1803
		<'ok'> when 'true' ->
		    FN
		%% Line 1804
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1806
	  <'close',H> when 'true' ->
	      %% Line 1807
	      apply 'file_io'/2
		  ({'close','ok'}, H)
	  %% Line 1808
	  <{'list_dir',F},_X_H> when 'true' ->
	      %% Line 1809
	      case call 'file':'list_dir'
		       (F) of
		%% Line 1810
		<{'ok',Files}> when 'true' ->
		    Files
		%% Line 1811
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1813
	  <{'set_file_info',F,FI},H> when 'true' ->
	      %% Line 1814
	      case call 'file':'write_file_info'
		       (F, FI) of
		%% Line 1815
		<'ok'> when 'true' ->
		    H
		%% Line 1816
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1818
	  <{'ensure_dir',Dir},H> when 'true' ->
	      %% Line 1819
	      case call 'filelib':'ensure_dir'
		       (Dir) of
		<'ok'> when 'true' ->
		    %% Line 1820
		    H
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'file_io',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('zip')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('zip', _cor0)
end