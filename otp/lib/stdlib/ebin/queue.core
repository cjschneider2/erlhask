module 'queue' ['cons'/2,
		'daeh'/1,
		'drop'/1,
		'drop_r'/1,
		'filter'/2,
		'from_list'/1,
		'get'/1,
		'get_r'/1,
		'head'/1,
		'in'/2,
		'in_r'/2,
		'init'/1,
		'is_empty'/1,
		'is_queue'/1,
		'join'/2,
		'lait'/1,
		'last'/1,
		'len'/1,
		'liat'/1,
		'member'/2,
		'module_info'/0,
		'module_info'/1,
		'new'/0,
		'out'/1,
		'out_r'/1,
		'peek'/1,
		'peek_r'/1,
		'reverse'/1,
		'snoc'/2,
		'split'/2,
		'tail'/1,
		'to_list'/1]
    attributes [%% Line 35
		'export_type' =
		    %% Line 35
		    [{'queue',0}|[{'queue',1}]],
		%% Line 49
		'opaque' =
		    %% Line 49
		    [{'queue',{'type',49,'tuple',[{'type',49,'list',[{'var',49,'Item'}]}|[{'type',49,'list',[{'var',49,'Item'}]}]]},[{'var',49,'Item'}]}],
		%% Line 51
		'opaque' =
		    %% Line 51
		    [{'queue',{'type',51,'queue',[{'var',51,'_'}]},[]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'new',0},[{'type',56,'fun',[{'type',56,'product',[]}|[{'type',56,'queue',[]}]]}]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'is_queue',1},[{'type',60,'fun',[{'type',60,'product',[{'ann_type',60,[{'var',60,'Term'}|[{'type',60,'term',[]}]]}]}|[{'type',60,'boolean',[]}]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'is_empty',1},[{'type',67,'fun',[{'type',67,'product',[{'ann_type',67,[{'var',67,'Q'}|[{'type',67,'queue',[]}]]}]}|[{'type',67,'boolean',[]}]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'len',1},[{'type',76,'fun',[{'type',76,'product',[{'ann_type',76,[{'var',76,'Q'}|[{'type',76,'queue',[]}]]}]}|[{'type',76,'non_neg_integer',[]}]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'to_list',1},[{'type',83,'fun',[{'type',83,'product',[{'ann_type',83,[{'var',83,'Q'}|[{'type',83,'queue',[{'var',83,'Item'}]}]]}]}|[{'type',83,'list',[{'var',83,'Item'}]}]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'from_list',1},[{'type',92,'fun',[{'type',92,'product',[{'ann_type',92,[{'var',92,'L'}|[{'type',92,'list',[{'var',92,'Item'}]}]]}]}|[{'type',92,'queue',[{'var',92,'Item'}]}]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'member',2},[{'type',101,'fun',[{'type',101,'product',[{'var',101,'Item'}|[{'ann_type',101,[{'var',101,'Q'}|[{'type',101,'queue',[{'var',101,'Item'}]}]]}]]}|[{'type',101,'boolean',[]}]]}]}],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'in',2},[{'type',114,'fun',[{'type',114,'product',[{'var',114,'Item'}|[{'ann_type',114,[{'var',114,'Q1'}|[{'type',114,'queue',[{'var',114,'Item'}]}]]}]]}|[{'ann_type',114,[{'var',114,'Q2'}|[{'type',114,'queue',[{'var',114,'Item'}]}]]}]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'in_r',2},[{'type',126,'fun',[{'type',126,'product',[{'var',126,'Item'}|[{'ann_type',126,[{'var',126,'Q1'}|[{'type',126,'queue',[{'var',126,'Item'}]}]]}]]}|[{'ann_type',126,[{'var',126,'Q2'}|[{'type',126,'queue',[{'var',126,'Item'}]}]]}]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'out',1},[{'type',137,'fun',[{'type',137,'product',[{'ann_type',137,[{'var',137,'Q1'}|[{'type',137,'queue',[{'var',137,'Item'}]}]]}]}|[{'type',138,'union',[{'type',138,'tuple',[{'type',138,'tuple',[{'atom',138,'value'}|[{'var',138,'Item'}]]}|[{'ann_type',138,[{'var',138,'Q2'}|[{'type',138,'queue',[{'var',138,'Item'}]}]]}]]}|[{'type',139,'tuple',[{'atom',139,'empty'}|[{'ann_type',139,[{'var',139,'Q1'}|[{'type',139,'queue',[{'var',139,'Item'}]}]]}]]}]]}]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'out_r',1},[{'type',157,'fun',[{'type',157,'product',[{'ann_type',157,[{'var',157,'Q1'}|[{'type',157,'queue',[{'var',157,'Item'}]}]]}]}|[{'type',158,'union',[{'type',158,'tuple',[{'type',158,'tuple',[{'atom',158,'value'}|[{'var',158,'Item'}]]}|[{'ann_type',158,[{'var',158,'Q2'}|[{'type',158,'queue',[{'var',158,'Item'}]}]]}]]}|[{'type',159,'tuple',[{'atom',159,'empty'}|[{'ann_type',159,[{'var',159,'Q1'}|[{'type',159,'queue',[{'var',159,'Item'}]}]]}]]}]]}]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'get',1},[{'type',180,'fun',[{'type',180,'product',[{'ann_type',180,[{'var',180,'Q'}|[{'type',180,'queue',[{'var',180,'Item'}]}]]}]}|[{'var',180,'Item'}]]}]}],
		%% Line 188
		'spec' =
		    %% Line 188
		    [{{'get',2},[{'type',188,'fun',[{'type',188,'product',[{'type',188,'list',[]}|[{'type',188,'list',[]}]]}|[{'type',188,'term',[]}]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'get_r',1},[{'type',199,'fun',[{'type',199,'product',[{'ann_type',199,[{'var',199,'Q'}|[{'type',199,'queue',[{'var',199,'Item'}]}]]}]}|[{'var',199,'Item'}]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'peek',1},[{'type',214,'fun',[{'type',214,'product',[{'ann_type',214,[{'var',214,'Q'}|[{'type',214,'queue',[{'var',214,'Item'}]}]]}]}|[{'type',214,'union',[{'atom',214,'empty'}|[{'type',214,'tuple',[{'atom',214,'value'}|[{'var',214,'Item'}]]}]]}]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'peek_r',1},[{'type',229,'fun',[{'type',229,'product',[{'ann_type',229,[{'var',229,'Q'}|[{'type',229,'queue',[{'var',229,'Item'}]}]]}]}|[{'type',229,'union',[{'atom',229,'empty'}|[{'type',229,'tuple',[{'atom',229,'value'}|[{'var',229,'Item'}]]}]]}]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'drop',1},[{'type',244,'fun',[{'type',244,'product',[{'ann_type',244,[{'var',244,'Q1'}|[{'type',244,'queue',[{'var',244,'Item'}]}]]}]}|[{'ann_type',244,[{'var',244,'Q2'}|[{'type',244,'queue',[{'var',244,'Item'}]}]]}]]}]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'drop_r',1},[{'type',262,'fun',[{'type',262,'product',[{'ann_type',262,[{'var',262,'Q1'}|[{'type',262,'queue',[{'var',262,'Item'}]}]]}]}|[{'ann_type',262,[{'var',262,'Q2'}|[{'type',262,'queue',[{'var',262,'Item'}]}]]}]]}]}],
		%% Line 283
		'spec' =
		    %% Line 283
		    [{{'reverse',1},[{'type',283,'fun',[{'type',283,'product',[{'ann_type',283,[{'var',283,'Q1'}|[{'type',283,'queue',[{'var',283,'Item'}]}]]}]}|[{'ann_type',283,[{'var',283,'Q2'}|[{'type',283,'queue',[{'var',283,'Item'}]}]]}]]}]}],
		%% Line 293
		'spec' =
		    %% Line 293
		    [{{'join',2},[{'type',293,'fun',[{'type',293,'product',[{'ann_type',293,[{'var',293,'Q1'}|[{'type',293,'queue',[{'var',293,'Item'}]}]]}|[{'ann_type',293,[{'var',293,'Q2'}|[{'type',293,'queue',[{'var',293,'Item'}]}]]}]]}|[{'ann_type',293,[{'var',293,'Q3'}|[{'type',293,'queue',[{'var',293,'Item'}]}]]}]]}]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'split',2},[{'type',307,'fun',[{'type',307,'product',[{'ann_type',307,[{'var',307,'N'}|[{'type',307,'non_neg_integer',[]}]]}|[{'ann_type',307,[{'var',307,'Q1'}|[{'type',307,'queue',[{'var',307,'Item'}]}]]}]]}|[{'type',308,'tuple',[{'ann_type',308,[{'var',308,'Q2'}|[{'type',308,'queue',[{'var',308,'Item'}]}]]}|[{'ann_type',308,[{'var',308,'Q3'}|[{'type',308,'queue',[{'var',308,'Item'}]}]]}]]}]]}]}],
		%% Line 349
		'spec' =
		    %% Line 349
		    [{{'filter',2},[{'type',349,'bounded_fun',[{'type',349,'fun',[{'type',349,'product',[{'var',349,'Fun'}|[{'ann_type',349,[{'var',349,'Q1'}|[{'type',349,'queue',[{'var',349,'Item'}]}]]}]]}|[{'ann_type',349,[{'var',349,'Q2'}|[{'type',349,'queue',[{'var',349,'Item'}]}]]}]]}|[[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Fun'}|[{'type',350,'fun',[{'type',350,'product',[{'var',350,'Item'}]}|[{'type',350,'union',[{'type',350,'boolean',[]}|[{'type',350,'list',[{'var',350,'Item'}]}]]}]]}]]]]}]]]}]}],
		%% Line 426
		'spec' =
		    %% Line 426
		    [{{'cons',2},[{'type',426,'fun',[{'type',426,'product',[{'var',426,'Item'}|[{'ann_type',426,[{'var',426,'Q1'}|[{'type',426,'queue',[{'var',426,'Item'}]}]]}]]}|[{'ann_type',426,[{'var',426,'Q2'}|[{'type',426,'queue',[{'var',426,'Item'}]}]]}]]}]}],
		%% Line 435
		'spec' =
		    %% Line 435
		    [{{'head',1},[{'type',435,'fun',[{'type',435,'product',[{'ann_type',435,[{'var',435,'Q'}|[{'type',435,'queue',[{'var',435,'Item'}]}]]}]}|[{'var',435,'Item'}]]}]}],
		%% Line 445
		'spec' =
		    %% Line 445
		    [{{'tail',1},[{'type',445,'fun',[{'type',445,'product',[{'ann_type',445,[{'var',445,'Q1'}|[{'type',445,'queue',[{'var',445,'Item'}]}]]}]}|[{'ann_type',445,[{'var',445,'Q2'}|[{'type',445,'queue',[{'var',445,'Item'}]}]]}]]}]}],
		%% Line 453
		'spec' =
		    %% Line 453
		    [{{'snoc',2},[{'type',453,'fun',[{'type',453,'product',[{'ann_type',453,[{'var',453,'Q1'}|[{'type',453,'queue',[{'var',453,'Item'}]}]]}|[{'var',453,'Item'}]]}|[{'ann_type',453,[{'var',453,'Q2'}|[{'type',453,'queue',[{'var',453,'Item'}]}]]}]]}]}],
		%% Line 458
		'spec' =
		    %% Line 458
		    [{{'daeh',1},[{'type',458,'fun',[{'type',458,'product',[{'ann_type',458,[{'var',458,'Q'}|[{'type',458,'queue',[{'var',458,'Item'}]}]]}]}|[{'var',458,'Item'}]]}]}],
		%% Line 460
		'spec' =
		    %% Line 460
		    [{{'last',1},[{'type',460,'fun',[{'type',460,'product',[{'ann_type',460,[{'var',460,'Q'}|[{'type',460,'queue',[{'var',460,'Item'}]}]]}]}|[{'var',460,'Item'}]]}]}],
		%% Line 464
		'spec' =
		    %% Line 464
		    [{{'liat',1},[{'type',464,'fun',[{'type',464,'product',[{'ann_type',464,[{'var',464,'Q1'}|[{'type',464,'queue',[{'var',464,'Item'}]}]]}]}|[{'ann_type',464,[{'var',464,'Q2'}|[{'type',464,'queue',[{'var',464,'Item'}]}]]}]]}]}],
		%% Line 466
		'spec' =
		    %% Line 466
		    [{{'lait',1},[{'type',466,'fun',[{'type',466,'product',[{'ann_type',466,[{'var',466,'Q1'}|[{'type',466,'queue',[{'var',466,'Item'}]}]]}]}|[{'ann_type',466,[{'var',466,'Q2'}|[{'type',466,'queue',[{'var',466,'Item'}]}]]}]]}]}],
		%% Line 468
		'spec' =
		    %% Line 468
		    [{{'init',1},[{'type',468,'fun',[{'type',468,'product',[{'ann_type',468,[{'var',468,'Q1'}|[{'type',468,'queue',[{'var',468,'Item'}]}]]}]}|[{'ann_type',468,[{'var',468,'Q2'}|[{'type',468,'queue',[{'var',468,'Item'}]}]]}]]}]}]]
'new'/0 =
    %% Line 57
    fun () ->
	{[],[]}
'is_queue'/1 =
    %% Line 61
    fun (_cor0) ->
	case _cor0 of
	  <{R,F}>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 62
	      'true'
	  %% Line 63
	  <_cor4> when 'true' ->
	      %% Line 64
	      'false'
	end
'is_empty'/1 =
    %% Line 68
    fun (_cor0) ->
	case _cor0 of
	  <{[],[]}> when 'true' ->
	      %% Line 69
	      'true'
	  %% Line 70
	  <{In,Out}>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(In)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (Out)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 71
	      'false'
	  %% Line 72
	  <Q> when 'true' ->
	      %% Line 73
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'len'/1 =
    %% Line 77
    fun (_cor0) ->
	case _cor0 of
	  <{R,F}>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor4> =
		  %% Line 78
		  call 'erlang':'length'
		      (R)
	      in  let <_cor3> =
		      %% Line 78
		      call 'erlang':'length'
			  (F)
		  in  %% Line 78
		      call 'erlang':'+'
			  (_cor4, _cor3)
	  %% Line 79
	  <Q> when 'true' ->
	      %% Line 80
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'to_list'/1 =
    %% Line 84
    fun (_cor0) ->
	case _cor0 of
	  <{In,Out}>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(In)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (Out)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 85
		  call 'lists':'reverse'
		      (In, [])
	      in  %% Line 85
		  call 'erlang':'++'
		      (Out, _cor3)
	  %% Line 86
	  <Q> when 'true' ->
	      %% Line 87
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'from_list'/1 =
    %% Line 93
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 488
	      ( case L of
		  ( <( []
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 489
			( {[],[]}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 490
		  ( <( ( F
			 -| ['compiler_generated'] ) = ( [( _cor7
							    -| ['compiler_generated'] )|( []
											  -| ['compiler_generated'] )]
							 -| ['compiler_generated'] )
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 491
			( {( F
			     -| ['compiler_generated'] ),( []
							   -| ['compiler_generated'] )}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 492
		  ( <( [( X
			  -| ['compiler_generated'] )|( [( Y
							   -| ['compiler_generated'] )|( []
											 -| ['compiler_generated'] )]
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 493
			( {( [( Y
				-| ['compiler_generated'] )|( []
							      -| ['compiler_generated'] )]
			     -| ['compiler_generated'] ),( [( X
							      -| ['compiler_generated'] )|( []
											    -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 494
		  ( <( List
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_cor1> =
			      %% Line 495
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'length'
								     -| ['compiler_generated'] )
				    (( List
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  ( let <_cor2> =
				    %% Line 495
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'div'
									   -| ['compiler_generated'] )
					  (( _cor1
					     -| ['compiler_generated'] ), ( 2
									    -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				in  ( let <_cor3> =
					  %% Line 495
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '+'
										 -| ['compiler_generated'] )
						(( _cor2
						   -| ['compiler_generated'] ), ( 1
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  %% Line 495
					  ( case ( call ( 'lists'
							  -| ['compiler_generated'] ):( 'split'
											-| ['compiler_generated'] )
						       (( _cor3
							  -| ['compiler_generated'] ), ( List
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      ( <( {( FF
						      -| ['compiler_generated'] ),( RR
										    -| ['compiler_generated'] )}
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( let <_cor5> =
							  %% Line 496
							  ( call ( 'lists'
								   -| ['compiler_generated'] ):( 'reverse'
												 -| ['compiler_generated'] )
								(( RR
								   -| ['compiler_generated'] ), ( []
												  -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      in  %% Line 496
							  ( {( _cor5
							       -| ['compiler_generated'] ),( FF
											     -| ['compiler_generated'] )}
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor4
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'badmatch'
								-| ['compiler_generated'] ),( _cor4
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 95
	  <L> when 'true' ->
	      %% Line 96
	      call 'erlang':'error'
		  ('badarg', [L|[]])
	end
'member'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,{R,F}>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 103
	      ( case call 'lists':'member'
			 (X, R) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			call 'lists':'member'
			    (X, F)
		    -| ['compiler_generated'] )
		  ( <_cor4> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor4}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 104
	  <X,Q> when 'true' ->
	      %% Line 105
	      call 'erlang':'error'
		  ('badarg', [X|[Q|[]]])
	end
'in'/2 =
    %% Line 115
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,{In = [_cor6|[]],[]}> when 'true' ->
	      %% Line 116
	      {[X|[]],In}
	  %% Line 117
	  <X,{In,Out}>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(In)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Out)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 118
	      {[X|In],Out}
	  %% Line 119
	  <X,Q> when 'true' ->
	      %% Line 120
	      call 'erlang':'error'
		  ('badarg', [X|[Q|[]]])
	end
'in_r'/2 =
    %% Line 127
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,{[],F = [_cor6|[]]}> when 'true' ->
	      %% Line 128
	      {F,[X|[]]}
	  %% Line 129
	  <X,{R,F}>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 130
	      {R,[X|F]}
	  %% Line 131
	  <X,Q> when 'true' ->
	      %% Line 132
	      call 'erlang':'error'
		  ('badarg', [X|[Q|[]]])
	end
'out'/1 =
    %% Line 140
    fun (_cor0) ->
	case _cor0 of
	  <Q = {[],[]}> when 'true' ->
	      %% Line 141
	      {'empty',Q}
	  %% Line 142
	  <{[V|[]],[]}> when 'true' ->
	      %% Line 143
	      {{'value',V},{[],[]}}
	  %% Line 144
	  <{[Y|In],[]}> when 'true' ->
	      %% Line 145
	      case call 'lists':'reverse'
		       (In, []) of
		<[V|Out]> when 'true' ->
		    %% Line 146
		    {{'value',V},{[Y|[]],Out}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 147
	  <{In,[V|[]]}>
	      when call 'erlang':'is_list'
		    (In) ->
	      let <_cor2> =
		  %% Line 477
		  ( case In of
		      ( <( []
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    %% Line 478
			    ( {[],[]}
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 479
		      ( <( ( R
			     -| ['compiler_generated'] ) = ( [( _cor7
								-| ['compiler_generated'] )|( []
											      -| ['compiler_generated'] )]
							     -| ['compiler_generated'] )
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    %% Line 480
			    ( {( []
				 -| ['compiler_generated'] ),( R
							       -| ['compiler_generated'] )}
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 481
		      ( <( [( X
			      -| ['compiler_generated'] )|( [( Y
							       -| ['compiler_generated'] )|( []
											     -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    %% Line 482
			    ( {( [( X
				    -| ['compiler_generated'] )|( []
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] ),( [( Y
								  -| ['compiler_generated'] )|( []
												-| ['compiler_generated'] )]
							       -| ['compiler_generated'] )}
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 483
		      ( <( List
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_cor1> =
				  %% Line 484
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'length'
									 -| ['compiler_generated'] )
					(( List
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  ( let <_cor2> =
					%% Line 484
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'div'
									       -| ['compiler_generated'] )
					      (( _cor1
						 -| ['compiler_generated'] ), ( 2
										-| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  ( let <_cor3> =
					      %% Line 484
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '+'
										     -| ['compiler_generated'] )
						    (( _cor2
						       -| ['compiler_generated'] ), ( 1
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  %% Line 484
					      ( case ( call ( 'lists'
							      -| ['compiler_generated'] ):( 'split'
											    -| ['compiler_generated'] )
							   (( _cor3
							      -| ['compiler_generated'] ), ( List
											     -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( {( FF
							  -| ['compiler_generated'] ),( RR
											-| ['compiler_generated'] )}
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
							( let <_cor5> =
							      %% Line 485
							      ( call ( 'lists'
								       -| ['compiler_generated'] ):( 'reverse'
												     -| ['compiler_generated'] )
								    (( RR
								       -| ['compiler_generated'] ), ( []
												      -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  in  %% Line 485
							      ( {( FF
								   -| ['compiler_generated'] ),( _cor5
												 -| ['compiler_generated'] )}
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _cor4
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
							( primop ( 'match_fail'
								   -| ['compiler_generated'] )
							      (( {( 'badmatch'
								    -| ['compiler_generated'] ),( _cor4
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 148
		  {{'value',V},_cor2}
	  %% Line 149
	  <{In,[V|Out]}>
	      when call 'erlang':'is_list'
		    (In) ->
	      %% Line 150
	      {{'value',V},{In,Out}}
	  %% Line 151
	  <Q> when 'true' ->
	      %% Line 152
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'out_r'/1 =
    %% Line 160
    fun (_cor0) ->
	case _cor0 of
	  <Q = {[],[]}> when 'true' ->
	      %% Line 161
	      {'empty',Q}
	  %% Line 162
	  <{[],[V|[]]}> when 'true' ->
	      %% Line 163
	      {{'value',V},{[],[]}}
	  %% Line 164
	  <{[],[Y|Out]}> when 'true' ->
	      %% Line 165
	      case call 'lists':'reverse'
		       (Out, []) of
		<[V|In]> when 'true' ->
		    %% Line 166
		    {{'value',V},{In,[Y|[]]}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 167
	  <{[V|[]],Out}>
	      when call 'erlang':'is_list'
		    (Out) ->
	      let <_cor2> =
		  %% Line 488
		  ( case Out of
		      ( <( []
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    %% Line 489
			    ( {[],[]}
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 490
		      ( <( ( F
			     -| ['compiler_generated'] ) = ( [( _cor7
								-| ['compiler_generated'] )|( []
											      -| ['compiler_generated'] )]
							     -| ['compiler_generated'] )
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    %% Line 491
			    ( {( F
				 -| ['compiler_generated'] ),( []
							       -| ['compiler_generated'] )}
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 492
		      ( <( [( X
			      -| ['compiler_generated'] )|( [( Y
							       -| ['compiler_generated'] )|( []
											     -| ['compiler_generated'] )]
							    -| ['compiler_generated'] )]
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    %% Line 493
			    ( {( [( Y
				    -| ['compiler_generated'] )|( []
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] ),( [( X
								  -| ['compiler_generated'] )|( []
												-| ['compiler_generated'] )]
							       -| ['compiler_generated'] )}
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 494
		      ( <( List
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_cor1> =
				  %% Line 495
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'length'
									 -| ['compiler_generated'] )
					(( List
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  ( let <_cor2> =
					%% Line 495
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'div'
									       -| ['compiler_generated'] )
					      (( _cor1
						 -| ['compiler_generated'] ), ( 2
										-| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  ( let <_cor3> =
					      %% Line 495
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '+'
										     -| ['compiler_generated'] )
						    (( _cor2
						       -| ['compiler_generated'] ), ( 1
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  %% Line 495
					      ( case ( call ( 'lists'
							      -| ['compiler_generated'] ):( 'split'
											    -| ['compiler_generated'] )
							   (( _cor3
							      -| ['compiler_generated'] ), ( List
											     -| ['compiler_generated'] ))
						       -| ['compiler_generated'] ) of
						  ( <( {( FF
							  -| ['compiler_generated'] ),( RR
											-| ['compiler_generated'] )}
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
							( let <_cor5> =
							      %% Line 496
							      ( call ( 'lists'
								       -| ['compiler_generated'] ):( 'reverse'
												     -| ['compiler_generated'] )
								    (( RR
								       -| ['compiler_generated'] ), ( []
												      -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  in  %% Line 496
							      ( {( _cor5
								   -| ['compiler_generated'] ),( FF
												 -| ['compiler_generated'] )}
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <( _cor4
						       -| ['compiler_generated'] )> when ( 'true'
											   -| ['compiler_generated'] ) ->
							( primop ( 'match_fail'
								   -| ['compiler_generated'] )
							      (( {( 'badmatch'
								    -| ['compiler_generated'] ),( _cor4
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 168
		  {{'value',V},_cor2}
	  %% Line 169
	  <{[V|In],Out}>
	      when call 'erlang':'is_list'
		    (Out) ->
	      %% Line 170
	      {{'value',V},{In,Out}}
	  %% Line 171
	  <Q> when 'true' ->
	      %% Line 172
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'get'/1 =
    %% Line 181
    fun (_cor0) ->
	case _cor0 of
	  <Q = {[],[]}> when 'true' ->
	      %% Line 182
	      call 'erlang':'error'
		  ('empty', [Q|[]])
	  %% Line 183
	  <{R,F}>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 184
	      apply 'get'/2
		  (R, F)
	  %% Line 185
	  <Q> when 'true' ->
	      %% Line 186
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'get'/2 =
    %% Line 189
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <R,[H|_cor4]>
	      when call 'erlang':'is_list'
		    (R) ->
	      %% Line 190
	      H
	  %% Line 191
	  <[H|[]],[]> when 'true' ->
	      %% Line 192
	      H
	  %% Line 193
	  <[_cor5|R],[]> when 'true' ->
	      %% Line 194
	      call 'lists':'last'
		  (R)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get',2}}] )
	    -| ['compiler_generated'] )
	end
'get_r'/1 =
    %% Line 200
    fun (_cor0) ->
	case _cor0 of
	  <Q = {[],[]}> when 'true' ->
	      %% Line 201
	      call 'erlang':'error'
		  ('empty', [Q|[]])
	  %% Line 202
	  <{[H|_cor2],F}>
	      when call 'erlang':'is_list'
		    (F) ->
	      %% Line 203
	      H
	  %% Line 204
	  <{[],[H|[]]}> when 'true' ->
	      %% Line 205
	      H
	  %% Line 206
	  <{[],[_cor3|F]}> when 'true' ->
	      %% Line 207
	      call 'lists':'last'
		  (F)
	  %% Line 208
	  <Q> when 'true' ->
	      %% Line 209
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'peek'/1 =
    %% Line 215
    fun (_cor0) ->
	case _cor0 of
	  <{[],[]}> when 'true' ->
	      %% Line 216
	      'empty'
	  %% Line 217
	  <{R,[H|_cor3]}>
	      when call 'erlang':'is_list'
		    (R) ->
	      %% Line 218
	      {'value',H}
	  %% Line 219
	  <{[H|[]],[]}> when 'true' ->
	      %% Line 220
	      {'value',H}
	  %% Line 221
	  <{[_cor4|R],[]}> when 'true' ->
	      let <_cor1> =
		  %% Line 222
		  call 'lists':'last'
		      (R)
	      in  %% Line 222
		  {'value',_cor1}
	  %% Line 223
	  <Q> when 'true' ->
	      %% Line 224
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'peek_r'/1 =
    %% Line 230
    fun (_cor0) ->
	case _cor0 of
	  <{[],[]}> when 'true' ->
	      %% Line 231
	      'empty'
	  %% Line 232
	  <{[H|_cor3],F}>
	      when call 'erlang':'is_list'
		    (F) ->
	      %% Line 233
	      {'value',H}
	  %% Line 234
	  <{[],[H|[]]}> when 'true' ->
	      %% Line 235
	      {'value',H}
	  %% Line 236
	  <{[],[_cor4|R]}> when 'true' ->
	      let <_cor1> =
		  %% Line 237
		  call 'lists':'last'
		      (R)
	      in  %% Line 237
		  {'value',_cor1}
	  %% Line 238
	  <Q> when 'true' ->
	      %% Line 239
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'drop'/1 =
    %% Line 245
    fun (_cor0) ->
	case _cor0 of
	  <Q = {[],[]}> when 'true' ->
	      %% Line 246
	      call 'erlang':'error'
		  ('empty', [Q|[]])
	  %% Line 247
	  <{[_cor3|[]],[]}> when 'true' ->
	      %% Line 248
	      {[],[]}
	  %% Line 249
	  <{[Y|R],[]}> when 'true' ->
	      %% Line 250
	      case call 'lists':'reverse'
		       (R, []) of
		<[_cor4|F]> when 'true' ->
		    %% Line 251
		    {[Y|[]],F}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 252
	  <{R,[_cor5|[]]}>
	      when call 'erlang':'is_list'
		    (R) ->
	      %% Line 477
	      ( case R of
		  ( <( []
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 478
			( {[],[]}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 479
		  ( <( _fol2 = ( [( _cor7
				    -| ['compiler_generated'] )|( []
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 480
			( {( []
			     -| ['compiler_generated'] ),_fol2}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 481
		  ( <( [( X
			  -| ['compiler_generated'] )|( [( Y
							   -| ['compiler_generated'] )|( []
											 -| ['compiler_generated'] )]
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 482
			( {( [( X
				-| ['compiler_generated'] )|( []
							      -| ['compiler_generated'] )]
			     -| ['compiler_generated'] ),( [( Y
							      -| ['compiler_generated'] )|( []
											    -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 483
		  ( <( List
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_cor1> =
			      %% Line 484
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'length'
								     -| ['compiler_generated'] )
				    (( List
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  ( let <_cor2> =
				    %% Line 484
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'div'
									   -| ['compiler_generated'] )
					  (( _cor1
					     -| ['compiler_generated'] ), ( 2
									    -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				in  ( let <_cor3> =
					  %% Line 484
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '+'
										 -| ['compiler_generated'] )
						(( _cor2
						   -| ['compiler_generated'] ), ( 1
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  %% Line 484
					  ( case ( call ( 'lists'
							  -| ['compiler_generated'] ):( 'split'
											-| ['compiler_generated'] )
						       (( _cor3
							  -| ['compiler_generated'] ), ( List
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      ( <( {( FF
						      -| ['compiler_generated'] ),( RR
										    -| ['compiler_generated'] )}
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( let <_cor5> =
							  %% Line 485
							  ( call ( 'lists'
								   -| ['compiler_generated'] ):( 'reverse'
												 -| ['compiler_generated'] )
								(( RR
								   -| ['compiler_generated'] ), ( []
												  -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      in  %% Line 485
							  ( {( FF
							       -| ['compiler_generated'] ),( _cor5
											     -| ['compiler_generated'] )}
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor4
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'badmatch'
								-| ['compiler_generated'] ),( _cor4
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 254
	  <{R,[_cor6|F]}>
	      when call 'erlang':'is_list'
		    (R) ->
	      %% Line 255
	      {R,F}
	  %% Line 256
	  <Q> when 'true' ->
	      %% Line 257
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'drop_r'/1 =
    %% Line 263
    fun (_cor0) ->
	case _cor0 of
	  <Q = {[],[]}> when 'true' ->
	      %% Line 264
	      call 'erlang':'error'
		  ('empty', [Q|[]])
	  %% Line 265
	  <{[],[_cor3|[]]}> when 'true' ->
	      %% Line 266
	      {[],[]}
	  %% Line 267
	  <{[],[Y|F]}> when 'true' ->
	      %% Line 268
	      case call 'lists':'reverse'
		       (F, []) of
		<[_cor4|R]> when 'true' ->
		    %% Line 269
		    {R,[Y|[]]}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 270
	  <{[_cor5|[]],F}>
	      when call 'erlang':'is_list'
		    (F) ->
	      %% Line 488
	      ( case F of
		  ( <( []
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 489
			( {[],[]}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 490
		  ( <( _fol3 = ( [( _cor7
				    -| ['compiler_generated'] )|( []
								  -| ['compiler_generated'] )]
				 -| ['compiler_generated'] )
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 491
			( {_fol3,( []
				   -| ['compiler_generated'] )}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 492
		  ( <( [( X
			  -| ['compiler_generated'] )|( [( Y
							   -| ['compiler_generated'] )|( []
											 -| ['compiler_generated'] )]
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 493
			( {( [( Y
				-| ['compiler_generated'] )|( []
							      -| ['compiler_generated'] )]
			     -| ['compiler_generated'] ),( [( X
							      -| ['compiler_generated'] )|( []
											    -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 494
		  ( <( List
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_cor1> =
			      %% Line 495
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'length'
								     -| ['compiler_generated'] )
				    (( List
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  ( let <_cor2> =
				    %% Line 495
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'div'
									   -| ['compiler_generated'] )
					  (( _cor1
					     -| ['compiler_generated'] ), ( 2
									    -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				in  ( let <_cor3> =
					  %% Line 495
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( '+'
										 -| ['compiler_generated'] )
						(( _cor2
						   -| ['compiler_generated'] ), ( 1
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  %% Line 495
					  ( case ( call ( 'lists'
							  -| ['compiler_generated'] ):( 'split'
											-| ['compiler_generated'] )
						       (( _cor3
							  -| ['compiler_generated'] ), ( List
											 -| ['compiler_generated'] ))
						   -| ['compiler_generated'] ) of
					      ( <( {( FF
						      -| ['compiler_generated'] ),( RR
										    -| ['compiler_generated'] )}
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( let <_cor5> =
							  %% Line 496
							  ( call ( 'lists'
								   -| ['compiler_generated'] ):( 'reverse'
												 -| ['compiler_generated'] )
								(( RR
								   -| ['compiler_generated'] ), ( []
												  -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      in  %% Line 496
							  ( {( _cor5
							       -| ['compiler_generated'] ),( FF
											     -| ['compiler_generated'] )}
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <( _cor4
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( primop ( 'match_fail'
							       -| ['compiler_generated'] )
							  (( {( 'badmatch'
								-| ['compiler_generated'] ),( _cor4
											      -| ['compiler_generated'] )}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 272
	  <{[_cor6|R],F}>
	      when call 'erlang':'is_list'
		    (F) ->
	      %% Line 273
	      {R,F}
	  %% Line 274
	  <Q> when 'true' ->
	      %% Line 275
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'reverse'/1 =
    %% Line 284
    fun (_cor0) ->
	case _cor0 of
	  <{R,F}>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 285
	      {F,R}
	  %% Line 286
	  <Q> when 'true' ->
	      %% Line 287
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'join'/2 =
    %% Line 294
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Q = {R,F},{[],[]}>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 295
	      Q
	  %% Line 296
	  <{[],[]},Q = {R,F}>
	      when let <_cor4> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor5> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 297
	      Q
	  %% Line 298
	  <{R1,F1},{R2,F2}>
	      when try
		    let <_cor6> =
			call 'erlang':'is_list'
			    (R1)
		    in  let <_cor7> =
			    call 'erlang':'is_list'
				(F1)
			in  let <_cor8> =
				call 'erlang':'is_list'
				    (R2)
			    in  let <_cor9> =
				    call 'erlang':'is_list'
					(F2)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 299
		  call 'lists':'reverse'
		      (R1, F2)
	      in  let <_cor13> =
		      %% Line 299
		      call 'erlang':'++'
			  (F1, _cor12)
		  in  %% Line 299
		      {R2,_cor13}
	  %% Line 300
	  <Q1,Q2> when 'true' ->
	      %% Line 301
	      call 'erlang':'error'
		  ('badarg', [Q1|[Q2|[]]])
	end
'split'/2 =
    %% Line 309
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Q = {R,F}>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 310
	      {{[],[]},Q}
	  %% Line 311
	  <N,Q = {R,F}>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor5> =
			    call 'erlang':'>='
				(N, 1)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (R)
			    in  let <_cor7> =
				    call 'erlang':'is_list'
					(F)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Lf> =
		  %% Line 312
		  call 'erlang':'length'
		      (F)
	      in  %% Line 313
		  case <> of
		    <>
			when call 'erlang':'<'
			      (N,
			       Lf) ->
			%% Line 314
			case F of
			  <[X|F1]> when 'true' ->
			      let <_cor12> =
				  %% Line 315
				  call 'erlang':'-'
				      (N, 1)
			      in  %% Line 315
				  apply 'split_f1_to_r2'/5
				      (_cor12, R, F1, [], [X|[]])
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		    %% Line 316
		    <>
			when call 'erlang':'>'
			      (N,
			       Lf) ->
			let <Lr> =
			    %% Line 317
			    call 'erlang':'length'
				(R)
			in  let <_cor14> =
				%% Line 318
				call 'erlang':'-'
				    (N, Lf)
			    in  let <M> =
				    %% Line 318
				    call 'erlang':'-'
					(Lr, _cor14)
				in  %% Line 319
				    case <> of
				      <>
					  when call 'erlang':'<'
						(M,
						 0) ->
					  %% Line 320
					  call 'erlang':'error'
					      ('badarg', [N|[Q|[]]])
				      %% Line 321
				      <>
					  when call 'erlang':'>'
						(M,
						 0) ->
					  %% Line 322
					  case R of
					    <[X|R1]> when 'true' ->
						let <_cor17> =
						    %% Line 323
						    call 'erlang':'-'
							(M, 1)
						in  %% Line 323
						    apply 'split_r1_to_f2'/5
							(_cor17, R1, F, [X|[]], [])
					    ( <_cor16> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor16})
					      -| ['compiler_generated'] )
					  end
				      %% Line 324
				      <> when 'true' ->
					  %% Line 325
					  {Q,{[],[]}}
				    end
		    %% Line 327
		    <> when 'true' ->
			let <_cor19> =
			    %% Line 488
			    ( case F of
				( <( []
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 489
				      ( {[],[]}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 490
				( <( _fol5 = ( [( _cor7
						  -| ['compiler_generated'] )|( []
										-| ['compiler_generated'] )]
					       -| ['compiler_generated'] )
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 491
				      ( {_fol5,( []
						 -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 492
				( <( [( X
					-| ['compiler_generated'] )|( [( Y
									 -| ['compiler_generated'] )|( []
												       -| ['compiler_generated'] )]
								      -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 493
				      ( {( [( Y
					      -| ['compiler_generated'] )|( []
									    -| ['compiler_generated'] )]
					   -| ['compiler_generated'] ),( [( X
									    -| ['compiler_generated'] )|( []
													  -| ['compiler_generated'] )]
									 -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 494
				( <( List
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_fol6> =
					    %% Line 495
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'length'
										   -| ['compiler_generated'] )
						  (( List
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_cor2> =
						  %% Line 495
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'div'
											 -| ['compiler_generated'] )
							(_fol6, ( 2
								  -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  ( let <_cor3> =
							%% Line 495
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '+'
											       -| ['compiler_generated'] )
							      (( _cor2
								 -| ['compiler_generated'] ), ( 1
												-| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    in  %% Line 495
							( case ( call ( 'lists'
									-| ['compiler_generated'] ):( 'split'
												      -| ['compiler_generated'] )
								     (( _cor3
									-| ['compiler_generated'] ), ( List
												       -| ['compiler_generated'] ))
								 -| ['compiler_generated'] ) of
							    ( <( {( FF
								    -| ['compiler_generated'] ),( RR
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( let <_cor5> =
									%% Line 496
									( call ( 'lists'
										 -| ['compiler_generated'] ):( 'reverse'
													       -| ['compiler_generated'] )
									      (( RR
										 -| ['compiler_generated'] ), ( []
														-| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    in  %% Line 496
									( {( _cor5
									     -| ['compiler_generated'] ),( FF
													   -| ['compiler_generated'] )}
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <( _cor4
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( primop ( 'match_fail'
									     -| ['compiler_generated'] )
									(( {( 'badmatch'
									      -| ['compiler_generated'] ),( _cor4
													    -| ['compiler_generated'] )}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  let <_cor18> =
				%% Line 477
				( case R of
				    ( <( []
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  %% Line 478
					  ( {[],[]}
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 479
				    ( <( _fol8 = ( [( _cor7
						      -| ['compiler_generated'] )|( []
										    -| ['compiler_generated'] )]
						   -| ['compiler_generated'] )
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  %% Line 480
					  ( {( []
					       -| ['compiler_generated'] ),_fol8}
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 481
				    ( <( [( X
					    -| ['compiler_generated'] )|( [( Y
									     -| ['compiler_generated'] )|( []
													   -| ['compiler_generated'] )]
									  -| ['compiler_generated'] )]
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  %% Line 482
					  ( {( [( X
						  -| ['compiler_generated'] )|( []
										-| ['compiler_generated'] )]
					       -| ['compiler_generated'] ),( [( Y
										-| ['compiler_generated'] )|( []
													      -| ['compiler_generated'] )]
									     -| ['compiler_generated'] )}
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    %% Line 483
				    ( <( List
					 -| ['compiler_generated'] )> when ( 'true'
									     -| ['compiler_generated'] ) ->
					  ( let <_fol9> =
						%% Line 484
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'length'
										       -| ['compiler_generated'] )
						      (( List
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( let <_cor2> =
						      %% Line 484
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'div'
											     -| ['compiler_generated'] )
							    (_fol9, ( 2
								      -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  ( let <_cor3> =
							    %% Line 484
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( '+'
												   -| ['compiler_generated'] )
								  (( _cor2
								     -| ['compiler_generated'] ), ( 1
												    -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							in  %% Line 484
							    ( case ( call ( 'lists'
									    -| ['compiler_generated'] ):( 'split'
													  -| ['compiler_generated'] )
									 (( _cor3
									    -| ['compiler_generated'] ), ( List
													   -| ['compiler_generated'] ))
								     -| ['compiler_generated'] ) of
								( <( {( FF
									-| ['compiler_generated'] ),( RR
												      -| ['compiler_generated'] )}
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
								      ( let <_cor5> =
									    %% Line 485
									    ( call ( 'lists'
										     -| ['compiler_generated'] ):( 'reverse'
														   -| ['compiler_generated'] )
										  (( RR
										     -| ['compiler_generated'] ), ( []
														    -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									in  %% Line 485
									    ( {( FF
										 -| ['compiler_generated'] ),( _cor5
													       -| ['compiler_generated'] )}
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( _cor4
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
								      ( primop ( 'match_fail'
										 -| ['compiler_generated'] )
									    (( {( 'badmatch'
										  -| ['compiler_generated'] ),( _cor4
														-| ['compiler_generated'] )}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 328
				{_cor19,_cor18}
		  end
	  %% Line 330
	  <N,Q> when 'true' ->
	      %% Line 331
	      call 'erlang':'error'
		  ('badarg', [N|[Q|[]]])
	end
'split_f1_to_r2'/5 =
    %% Line 334
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,R1,F1,R2,F2> when 'true' ->
	      %% Line 335
	      {{R2,F2},{R1,F1}}
	  %% Line 336
	  <N,R1,[X|F1],R2,F2> when 'true' ->
	      let <_cor5> =
		  %% Line 337
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 337
		  apply 'split_f1_to_r2'/5
		      (_cor5, R1, F1, [X|R2], F2)
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_f1_to_r2',5}}] )
	    -| ['compiler_generated'] )
	end
'split_r1_to_f2'/5 =
    %% Line 340
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,R1,F1,R2,F2> when 'true' ->
	      %% Line 341
	      {{R1,F1},{R2,F2}}
	  %% Line 342
	  <N,[X|R1],F1,R2,F2> when 'true' ->
	      let <_cor5> =
		  %% Line 343
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 343
		  apply 'split_r1_to_f2'/5
		      (_cor5, R1, F1, R2, [X|F2])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_r1_to_f2',5}}] )
	    -| ['compiler_generated'] )
	end
'filter'/2 =
    %% Line 351
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,{R0,F0}>
	      when try
		    let <_cor2> =
			call 'erlang':'is_function'
			    (Fun, 1)
		    in  let <_cor3> =
			    call 'erlang':'is_list'
				(R0)
			in  let <_cor4> =
				call 'erlang':'is_list'
				    (F0)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <F> =
		  %% Line 352
		  apply 'filter_f'/2
		      (Fun, F0)
	      in  let <R> =
		      %% Line 353
		      apply 'filter_r'/2
			  (Fun, R0)
		  in  %% Line 354
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (R,
				   []) ->
			    %% Line 488
			    ( case F of
				( <( []
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 489
				      ( {[],[]}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 490
				( <( _fol10 = ( [( _cor7
						   -| ['compiler_generated'] )|( []
										 -| ['compiler_generated'] )]
						-| ['compiler_generated'] )
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 491
				      ( {_fol10,( []
						  -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 492
				( <( [( X
					-| ['compiler_generated'] )|( [( Y
									 -| ['compiler_generated'] )|( []
												       -| ['compiler_generated'] )]
								      -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 493
				      ( {( [( Y
					      -| ['compiler_generated'] )|( []
									    -| ['compiler_generated'] )]
					   -| ['compiler_generated'] ),( [( X
									    -| ['compiler_generated'] )|( []
													  -| ['compiler_generated'] )]
									 -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 494
				( <( List
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_cor1> =
					    %% Line 495
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'length'
										   -| ['compiler_generated'] )
						  (( List
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_cor2> =
						  %% Line 495
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'div'
											 -| ['compiler_generated'] )
							(( _cor1
							   -| ['compiler_generated'] ), ( 2
											  -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  ( let <_cor3> =
							%% Line 495
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '+'
											       -| ['compiler_generated'] )
							      (( _cor2
								 -| ['compiler_generated'] ), ( 1
												-| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    in  %% Line 495
							( case ( call ( 'lists'
									-| ['compiler_generated'] ):( 'split'
												      -| ['compiler_generated'] )
								     (( _cor3
									-| ['compiler_generated'] ), ( List
												       -| ['compiler_generated'] ))
								 -| ['compiler_generated'] ) of
							    ( <( {( FF
								    -| ['compiler_generated'] ),( RR
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( let <_cor5> =
									%% Line 496
									( call ( 'lists'
										 -| ['compiler_generated'] ):( 'reverse'
													       -| ['compiler_generated'] )
									      (( RR
										 -| ['compiler_generated'] ), ( []
														-| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    in  %% Line 496
									( {( _cor5
									     -| ['compiler_generated'] ),( FF
													   -| ['compiler_generated'] )}
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <( _cor4
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( primop ( 'match_fail'
									     -| ['compiler_generated'] )
									(( {( 'badmatch'
									      -| ['compiler_generated'] ),( _cor4
													    -| ['compiler_generated'] )}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 356
			<>
			    when call 'erlang':'=:='
				  (F,
				   []) ->
			    %% Line 477
			    ( case R of
				( <( []
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 478
				      ( {[],[]}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 479
				( <( _fol11 = ( [( _cor7
						   -| ['compiler_generated'] )|( []
										 -| ['compiler_generated'] )]
						-| ['compiler_generated'] )
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 480
				      ( {( []
					   -| ['compiler_generated'] ),_fol11}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 481
				( <( [( X
					-| ['compiler_generated'] )|( [( Y
									 -| ['compiler_generated'] )|( []
												       -| ['compiler_generated'] )]
								      -| ['compiler_generated'] )]
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      %% Line 482
				      ( {( [( X
					      -| ['compiler_generated'] )|( []
									    -| ['compiler_generated'] )]
					   -| ['compiler_generated'] ),( [( Y
									    -| ['compiler_generated'] )|( []
													  -| ['compiler_generated'] )]
									 -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 483
				( <( List
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_cor1> =
					    %% Line 484
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'length'
										   -| ['compiler_generated'] )
						  (( List
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_cor2> =
						  %% Line 484
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'div'
											 -| ['compiler_generated'] )
							(( _cor1
							   -| ['compiler_generated'] ), ( 2
											  -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  ( let <_cor3> =
							%% Line 484
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '+'
											       -| ['compiler_generated'] )
							      (( _cor2
								 -| ['compiler_generated'] ), ( 1
												-| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    in  %% Line 484
							( case ( call ( 'lists'
									-| ['compiler_generated'] ):( 'split'
												      -| ['compiler_generated'] )
								     (( _cor3
									-| ['compiler_generated'] ), ( List
												       -| ['compiler_generated'] ))
								 -| ['compiler_generated'] ) of
							    ( <( {( FF
								    -| ['compiler_generated'] ),( RR
												  -| ['compiler_generated'] )}
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( let <_cor5> =
									%% Line 485
									( call ( 'lists'
										 -| ['compiler_generated'] ):( 'reverse'
													       -| ['compiler_generated'] )
									      (( RR
										 -| ['compiler_generated'] ), ( []
														-| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    in  %% Line 485
									( {( FF
									     -| ['compiler_generated'] ),( _cor5
													   -| ['compiler_generated'] )}
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <( _cor4
								 -| ['compiler_generated'] )> when ( 'true'
												     -| ['compiler_generated'] ) ->
								  ( primop ( 'match_fail'
									     -| ['compiler_generated'] )
									(( {( 'badmatch'
									      -| ['compiler_generated'] ),( _cor4
													    -| ['compiler_generated'] )}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 358
			<> when 'true' ->
			    %% Line 359
			    {R,F}
		      end
	  %% Line 361
	  <Fun,Q> when 'true' ->
	      %% Line 362
	      call 'erlang':'error'
		  ('badarg', [Fun|[Q|[]]])
	end
'filter_f'/2 =
    %% Line 365
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor7,[]> when 'true' ->
	      %% Line 366
	      []
	  %% Line 367
	  <Fun,[X|F]> when 'true' ->
	      %% Line 368
	      case apply Fun
		       (X) of
		%% Line 369
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 370
			apply 'filter_f'/2
			    (Fun, F)
		    in  %% Line 370
			[X|_cor2]
		%% Line 371
		<'false'> when 'true' ->
		    %% Line 372
		    apply 'filter_f'/2
			(Fun, F)
		%% Line 373
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    let <_cor3> =
			%% Line 374
			apply 'filter_f'/2
			    (Fun, F)
		    in  %% Line 374
			call 'erlang':'++'
			    (L, _cor3)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'filter_f',2}}] )
	    -| ['compiler_generated'] )
	end
'filter_r'/2 =
    %% Line 379
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor6,[]> when 'true' ->
	      %% Line 380
	      []
	  %% Line 381
	  <Fun,[X|R0]> when 'true' ->
	      let <R> =
		  %% Line 382
		  apply 'filter_r'/2
		      (Fun, R0)
	      in  %% Line 383
		  case apply Fun
			   (X) of
		    %% Line 384
		    <'true'> when 'true' ->
			%% Line 385
			[X|R]
		    %% Line 386
		    <'false'> when 'true' ->
			%% Line 387
			R
		    %% Line 388
		    <L>
			when call 'erlang':'is_list'
			      (L) ->
			%% Line 389
			call 'lists':'reverse'
			    (L, R)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'filter_r',2}}] )
	    -| ['compiler_generated'] )
	end
'cons'/2 =
    %% Line 427
    fun (_cor1,_cor0) ->
	%% Line 428
	apply 'in_r'/2
	    (_cor1, _cor0)
'head'/1 =
    %% Line 436
    fun (_cor0) ->
	case _cor0 of
	  <Q = {[],[]}> when 'true' ->
	      %% Line 437
	      call 'erlang':'error'
		  ('empty', [Q|[]])
	  %% Line 438
	  <{R,F}>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(R)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 439
	      apply 'get'/2
		  (R, F)
	  %% Line 440
	  <Q> when 'true' ->
	      %% Line 441
	      call 'erlang':'error'
		  ('badarg', [Q|[]])
	end
'tail'/1 =
    %% Line 446
    fun (_cor0) ->
	%% Line 447
	apply 'drop'/1
	    (_cor0)
'snoc'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	%% Line 455
	apply 'in'/2
	    (_cor0, _cor1)
'daeh'/1 =
    %% Line 459
    fun (_cor0) ->
	apply 'get_r'/1
	    (_cor0)
'last'/1 =
    %% Line 461
    fun (_cor0) ->
	apply 'get_r'/1
	    (_cor0)
'liat'/1 =
    %% Line 465
    fun (_cor0) ->
	apply 'drop_r'/1
	    (_cor0)
'lait'/1 =
    %% Line 467
    fun (_cor0) ->
	apply 'drop_r'/1
	    (_cor0)
'init'/1 =
    %% Line 469
    fun (_cor0) ->
	apply 'drop_r'/1
	    (_cor0)
'r2f'/1 =
    %% Line 477
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 478
	      {[],[]}
	  %% Line 479
	  <R = [_cor7|[]]> when 'true' ->
	      %% Line 480
	      {[],R}
	  %% Line 481
	  <[X|[Y|[]]]> when 'true' ->
	      %% Line 482
	      {[X|[]],[Y|[]]}
	  %% Line 483
	  <List> when 'true' ->
	      let <_cor1> =
		  %% Line 484
		  call 'erlang':'length'
		      (List)
	      in  let <_cor2> =
		      %% Line 484
		      call 'erlang':'div'
			  (_cor1, 2)
		  in  let <_cor3> =
			  %% Line 484
			  call 'erlang':'+'
			      (_cor2, 1)
		      in  %% Line 484
			  case call 'lists':'split'
				   (_cor3, List) of
			    <{FF,RR}> when 'true' ->
				let <_cor5> =
				    %% Line 485
				    call 'lists':'reverse'
					(RR, [])
				in  %% Line 485
				    {FF,_cor5}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
	end
'f2r'/1 =
    %% Line 488
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 489
	      {[],[]}
	  %% Line 490
	  <F = [_cor7|[]]> when 'true' ->
	      %% Line 491
	      {F,[]}
	  %% Line 492
	  <[X|[Y|[]]]> when 'true' ->
	      %% Line 493
	      {[Y|[]],[X|[]]}
	  %% Line 494
	  <List> when 'true' ->
	      let <_cor1> =
		  %% Line 495
		  call 'erlang':'length'
		      (List)
	      in  let <_cor2> =
		      %% Line 495
		      call 'erlang':'div'
			  (_cor1, 2)
		  in  let <_cor3> =
			  %% Line 495
			  call 'erlang':'+'
			      (_cor2, 1)
		      in  %% Line 495
			  case call 'lists':'split'
				   (_cor3, List) of
			    <{FF,RR}> when 'true' ->
				let <_cor5> =
				    %% Line 496
				    call 'lists':'reverse'
					(RR, [])
				in  %% Line 496
				    {_cor5,FF}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('queue')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('queue', _cor0)
end