module 'ms_transform' ['format_error'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'parse_transform'/2,
		       'transform_from_shell'/3]
    attributes [%% Line 70
		'spec' =
		    %% Line 70
		    [{{'format_error',1},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Error'}]}|[{'var',70,'Chars'}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Error'}|[{'type',71,'tuple',[{'atom',71,'error'}|[{'type',71,'module',[]}|[{'type',71,'term',[]}]]]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Chars'}|[{'remote_type',72,[{'atom',72,'io_lib'}|[{'atom',72,'chars'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'transform_from_shell',3},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'Dialect'}|[{'var',195,'Clauses'}|[{'var',195,'BoundEnvironment'}]]]}|[{'type',195,'term',[]}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Dialect'}|[{'type',196,'union',[{'atom',196,'ets'}|[{'atom',196,'dbg'}]]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Clauses'}|[{'type',197,'list',[{'remote_type',197,[{'atom',197,'erl_parse'}|[{'atom',197,'abstract_clause'}|[[]]]]}]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'BoundEnvironment'}|[{'remote_type',198,[{'atom',198,'erl_eval'}|[{'atom',198,'binding_struct'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'parse_transform',2},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'Forms'}|[{'var',226,'Options'}]]}|[{'var',226,'Forms'}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Forms'}|[{'type',227,'list',[{'remote_type',227,[{'atom',227,'erl_parse'}|[{'atom',227,'abstract_form'}|[[]]]]}]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Options'}|[{'type',228,'term',[]}]]]]}]]]]}]}],
		%% Line 458
		'type' =
		    %% Line 458
		    [{{'record','tgd'},[{'record_field',458,{'atom',458,'b'}}|[{'record_field',459,{'atom',459,'p'}}|[{'record_field',460,{'atom',460,'eb'}}]]],[]}]]
'format_error'/1 =
    %% Line 74
    fun (_cor0) ->
	case _cor0 of
	  <{50,Name}> when 'true' ->
	      let <_cor1> =
		  %% Line 76
		  call 'io_lib':'format'
		      ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[112|[32|[115|[104|[97|[100|[111|[119|[101|[100|[32|[105|[110|[32|[109|[115|[95|[116|[114|[97|[110|[115|[102|[111|[114|[109|[32|[102|[117|[110|[32|[104|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 77
																																			 [Name|[]])
	      in  %% Line 75
		  call 'lists':'flatten'
		      (_cor1)
	  %% Line 79
	  <1> when 'true' ->
	      %% Line 80
	      [80|[97|[114|[97|[109|[101|[116|[101|[114|[32|[111|[102|[32|[101|[116|[115|[47|[100|[98|[103|[58|[102|[117|[110|[50|[109|[115|[47|[49|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[116|[101|[114|[97|[108|[32|[102|[117|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 81
	  <2> when 'true' ->
	      %% Line 82
	      [101|[116|[115|[58|[102|[117|[110|[50|[109|[115|[32|[114|[101|[113|[117|[105|[114|[101|[115|[32|[102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[105|[110|[103|[108|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[111|[114|[32|[116|[117|[112|[108|[101|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 83
	  <3> when 'true' ->
	      %% Line 84
	      [100|[98|[103|[58|[102|[117|[110|[50|[109|[115|[32|[114|[101|[113|[117|[105|[114|[101|[115|[32|[102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[105|[110|[103|[108|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[111|[114|[32|[108|[105|[115|[116|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 85
	  <4> when 'true' ->
	      %% Line 86
	      [105|[110|[32|[102|[117|[110|[32|[104|[101|[97|[100|[44|[32|[111|[110|[108|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[61|[41|[32|[111|[110|[32|[116|[111|[112|[108|[101|[118|[101|[108|[32|[99|[97|[110|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 87
	  <5> when 'true' ->
	      %% Line 88
	      [102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[101|[109|[105|[99|[111|[108|[111|[110|[32|[40|[59|[41|[32|[105|[110|[32|[103|[117|[97|[114|[100|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 89
	  <16> when 'true' ->
	      %% Line 90
	      [102|[117|[110|[32|[119|[105|[116|[104|[32|[103|[117|[97|[114|[100|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[39|[61|[39|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[97|[115|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[32|[97|[115|[32|[119|[101|[108|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 91
	  <{17,Name,Arithy}> when 'true' ->
	      let <_cor2> =
		  %% Line 92
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[108|[111|[99|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 95
																																																																										[Name|[Arithy|[]]])
	      in  %% Line 92
		  call 'lists':'flatten'
		      (_cor2)
	  %% Line 96
	  <{22,Module,Name,Arithy}> when 'true' ->
	      let <_cor3> =
		  %% Line 97
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[114|[101|[109|[111|[116|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[119|[58|[126|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 100
																																																																													 [Module|[Name|[Arithy|[]]]])
	      in  %% Line 97
		  call 'lists':'flatten'
		      (_cor3)
	  %% Line 101
	  <{18,Str}> when 'true' ->
	      let <_cor4> =
		  %% Line 103
		  call 'io_lib':'format'
		      ([116|[104|[101|[32|[108|[97|[110|[103|[117|[97|[103|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[116|[115|[32|[40|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 104
																																																						[Str|[]])
	      in  %% Line 102
		  call 'lists':'flatten'
		      (_cor4)
	  %% Line 105
	  <{23,Var}> when 'true' ->
	      let <_cor5> =
		  %% Line 107
		  call 'io_lib':'format'
		      ([98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[40|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 109
																																																																	 [Var|[]])
	      in  %% Line 106
		  call 'lists':'flatten'
		      (_cor5)
	  %% Line 110
	  <{24,Operator}> when 'true' ->
	      let <_cor6> =
		  %% Line 114
		  call 'io_lib':'format'
		      ([116|[104|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Operator|[]])
	      in  %% Line 113
		  call 'lists':'flatten'
		      (_cor6)
	  %% Line 115
	  <116> when 'true' ->
	      %% Line 116
	      [102|[117|[110|[32|[119|[105|[116|[104|[32|[98|[111|[100|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[39|[61|[39|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[97|[115|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 117
	  <{117,Name,Arithy}> when 'true' ->
	      let <_cor7> =
		  %% Line 118
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[108|[111|[99|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 121
																																																																									  [Name|[Arithy|[]]])
	      in  %% Line 118
		  call 'lists':'flatten'
		      (_cor7)
	  %% Line 122
	  <{122,Module,Name,Arithy}> when 'true' ->
	      let <_cor8> =
		  %% Line 123
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[114|[101|[109|[111|[116|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[119|[58|[126|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 126
																																																																												   [Module|[Name|[Arithy|[]]]])
	      in  %% Line 123
		  call 'lists':'flatten'
		      (_cor8)
	  %% Line 127
	  <{118,Str}> when 'true' ->
	      let <_cor9> =
		  %% Line 129
		  call 'io_lib':'format'
		      ([116|[104|[101|[32|[108|[97|[110|[103|[117|[97|[103|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[116|[115|[32|[40|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 130
																																																					  [Str|[]])
	      in  %% Line 128
		  call 'lists':'flatten'
		      (_cor9)
	  %% Line 131
	  <{123,Var}> when 'true' ->
	      let <_cor10> =
		  %% Line 133
		  call 'io_lib':'format'
		      ([98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[40|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 135
																																																																   [Var|[]])
	      in  %% Line 132
		  call 'lists':'flatten'
		      (_cor10)
	  %% Line 136
	  <{124,Operator}> when 'true' ->
	      let <_cor11> =
		  %% Line 140
		  call 'io_lib':'format'
		      ([116|[104|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[98|[111|[100|[105|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 141
																																						  [Operator|[]])
	      in  %% Line 139
		  call 'lists':'flatten'
		      (_cor11)
	  %% Line 143
	  <{6,Str}> when 'true' ->
	      let <_cor12> =
		  %% Line 145
		  call 'io_lib':'format'
		      ([116|[104|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[115|[32|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100|[44|[32|[99|[97|[110|[110|[111|[116|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 146
																																													   [Str|[]])
	      in  %% Line 144
		  call 'lists':'flatten'
		      (_cor12)
	  %% Line 147
	  <{7,Name}> when 'true' ->
	      let <_cor13> =
		  %% Line 149
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	      in  %% Line 148
		  call 'lists':'flatten'
		      (_cor13)
	  %% Line 150
	  <{8,RName,FName}> when 'true' ->
	      let <_cor14> =
		  %% Line 152
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 153
																																																	      [FName|[RName|[]]])
	      in  %% Line 151
		  call 'lists':'flatten'
		      (_cor14)
	  %% Line 154
	  <{9,RName,FName}> when 'true' ->
	      let <_cor15> =
		  %% Line 156
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 157
																																														[FName|[RName|[]]])
	      in  %% Line 155
		  call 'lists':'flatten'
		      (_cor15)
	  %% Line 158
	  <{10,Atom}> when 'true' ->
	      let <_cor16> =
		  %% Line 160
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[116|[111|[109|[32|[126|[119|[44|[32|[119|[104|[105|[99|[104|[32|[99|[111|[110|[102|[108|[105|[99|[115|[32|[119|[105|[116|[104|[32|[114|[101|[115|[101|[114|[118|[101|[100|[32|[97|[116|[111|[109|[115|[32|[105|[110|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[32|[104|[101|[97|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 161
																																																												    [Atom|[]])
	      in  %% Line 159
		  call 'lists':'flatten'
		      (_cor16)
	  %% Line 162
	  <{11,Atom}> when 'true' ->
	      let <_cor17> =
		  %% Line 164
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[111|[102|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[44|[32|[119|[104|[105|[99|[104|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 165
																																																																						     [Atom|[]])
	      in  %% Line 163
		  call 'lists':'flatten'
		      (_cor17)
	  %% Line 166
	  <{20,Name}> when 'true' ->
	      let <_cor18> =
		  %% Line 168
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	      in  %% Line 167
		  call 'lists':'flatten'
		      (_cor18)
	  %% Line 169
	  <{19,RName,FName}> when 'true' ->
	      let <_cor19> =
		  %% Line 171
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 172
																																																		    [FName|[RName|[]]])
	      in  %% Line 170
		  call 'lists':'flatten'
		      (_cor19)
	  %% Line 173
	  <{21,RName,FName}> when 'true' ->
	      let <_cor20> =
		  %% Line 175
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 176
																																														      [FName|[RName|[]]])
	      in  %% Line 174
		  call 'lists':'flatten'
		      (_cor20)
	  %% Line 177
	  <{120,Name}> when 'true' ->
	      let <_cor21> =
		  %% Line 179
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	      in  %% Line 178
		  call 'lists':'flatten'
		      (_cor21)
	  %% Line 180
	  <{119,RName,FName}> when 'true' ->
	      let <_cor22> =
		  %% Line 182
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 183
																																																	      [FName|[RName|[]]])
	      in  %% Line 181
		  call 'lists':'flatten'
		      (_cor22)
	  %% Line 184
	  <{121,RName,FName}> when 'true' ->
	      let <_cor23> =
		  %% Line 186
		  call 'io_lib':'format'
		      ([102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 187
																																														[FName|[RName|[]]])
	      in  %% Line 185
		  call 'lists':'flatten'
		      (_cor23)
	  %% Line 188
	  <Else> when 'true' ->
	      let <_cor24> =
		  %% Line 189
		  call 'io_lib':'format'
		      ([85|[110|[107|[110|[111|[119|[110|[32|[101|[114|[114|[111|[114|[32|[99|[111|[100|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]], [Else|[]])
	      in  %% Line 189
		  call 'lists':'flatten'
		      (_cor24)
	end
'transform_from_shell'/3 =
    %% Line 200
    fun (_cor2,_cor1,_cor0) ->
	let <SaveFilename> =
	    %% Line 201
	    apply 'setup_filename'/0
		()
	in  let <_cor5> =
		catch
		    let <_cor4> =
			%% Line 202
			call 'gb_sets':'new'
			    ()
		    in  %% Line 202
			apply 'ms_clause_list'/4
			    (1, _cor1, _cor2, _cor4)
	    in  %% Line 202
		case _cor5 of
		  %% Line 203
		  <{'EXIT',Reason}> when 'true' ->
		      do  %% Line 204
			  apply 'cleanup_filename'/1
			      (SaveFilename)
			  %% Line 205
			  call 'erlang':'exit'
			      (Reason)
		  %% Line 206
		  <{'error',Line,R}> when 'true' ->
		      let <_cor6> =
			  %% Line 207
			  apply 'cleanup_filename'/1
			      (SaveFilename)
		      in  %% Line 207
			  {'error',[{_cor6,%% Line 208
					   [{Line,'ms_transform',R}|[]]}|%% Line 208
									 []],%% Line 208
									     []}
		  %% Line 209
		  <Else> when 'true' ->
		      let <_cor7> =
			  catch
			      %% Line 210
			      apply 'fixup_environment'/2
				  (Else, _cor0)
		      in  %% Line 210
			  case _cor7 of
			    %% Line 211
			    <{'error',Line1,R1}> when 'true' ->
				let <_cor8> =
				    %% Line 212
				    apply 'cleanup_filename'/1
					(SaveFilename)
				in  %% Line 212
				    {'error',[{_cor8,%% Line 213
						     [{Line1,'ms_transform',R1}|[]]}|%% Line 213
										     []],%% Line 213
											 []}
			    %% Line 214
			    <Else1> when 'true' ->
				let <Ret> =
				    %% Line 215
				    apply 'normalise'/1
					(Else1)
				in  do  %% Line 216
					apply 'cleanup_filename'/1
					    (SaveFilename)
					%% Line 217
					Ret
			  end
		end
'parse_transform'/2 =
    %% Line 230
    fun (_cor1,_cor0) ->
	let <SaveFilename> =
	    %% Line 231
	    apply 'setup_filename'/0
		()
	in  let <_cor3> =
		catch
		    %% Line 233
		    apply 'forms'/1
			(_cor1)
	    in  %% Line 233
		case _cor3 of
		  %% Line 234
		  <{'EXIT',Reason}> when 'true' ->
		      do  %% Line 235
			  apply 'cleanup_filename'/1
			      (SaveFilename)
			  %% Line 236
			  call 'erlang':'exit'
			      (Reason)
		  %% Line 237
		  <{'error',Line,R}> when 'true' ->
		      let <_cor4> =
			  %% Line 238
			  apply 'cleanup_filename'/1
			      (SaveFilename)
		      in  %% Line 238
			  {'error',[{_cor4,%% Line 239
					   [{Line,'ms_transform',R}|[]]}|%% Line 239
									 []],%% Line 239
									     []}
		  %% Line 240
		  <Else> when 'true' ->
		      %% Line 242
		      case apply 'get_warnings'/0
			       () of
			%% Line 243
			<[]> when 'true' ->
			    do  %% Line 244
				apply 'cleanup_filename'/1
				    (SaveFilename)
				%% Line 245
				Else
			%% Line 246
			<WL> when 'true' ->
			    let <FName> =
				%% Line 247
				apply 'cleanup_filename'/1
				    (SaveFilename)
			    in  let <_cor10> =
				    %% Line 248
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor8) ->
						  case _cor8 of
						    <[{L,R}|_cor7]> when 'true' ->
							let <_cor9> =
							    apply 'lc$^0'/1
								(_cor7)
							in  ( [{FName,[{L,'ms_transform',R}|[]]}|_cor9]
							      -| ['compiler_generated'] )
						    ( <[_cor6|_cor7]> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor7)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor8> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor8})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (WL)
				      -| ['list_comprehension'] )
				in  %% Line 249
				    {'warning',Else,_cor10}
		      end
		end
'get_warnings'/0 =
    %% Line 253
    fun () ->
	%% Line 254
	case call 'erlang':'get'
		 ('warnings') of
	  %% Line 255
	  <'undefined'> when 'true' ->
	      %% Line 256
	      []
	  %% Line 257
	  <Else> when 'true' ->
	      %% Line 258
	      Else
	end
'add_warning'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 262
	    apply 'get_warnings'/0
		()
	in  %% Line 262
	    call 'erlang':'put'
		('warnings', [{_cor1,_cor0}|_cor2])
'setup_filename'/0 =
    %% Line 264
    fun () ->
	let <_cor2> =
	    %% Line 265
	    call 'erlang':'erase'
		('filename')
	in  let <_cor1> =
		%% Line 265
		call 'erlang':'erase'
		    ('records')
	    in  let <_cor0> =
		    %% Line 265
		    call 'erlang':'erase'
			('warnings')
		in  %% Line 265
		    {_cor2,_cor1,_cor0}
'put_filename'/1 =
    %% Line 267
    fun (_cor0) ->
	%% Line 268
	call 'erlang':'put'
	    ('filename', _cor0)
'put_records'/1 =
    %% Line 270
    fun (_cor0) ->
	do  %% Line 271
	    call 'erlang':'put'
		('records', _cor0)
	    %% Line 272
	    'ok'
'get_records'/0 =
    %% Line 273
    fun () ->
	%% Line 274
	case call 'erlang':'get'
		 ('records') of
	  %% Line 275
	  <'undefined'> when 'true' ->
	      %% Line 276
	      []
	  %% Line 277
	  <Else> when 'true' ->
	      %% Line 278
	      Else
	end
'cleanup_filename'/1 =
    %% Line 280
    fun (_cor0) ->
	case _cor0 of
	  <{Old,OldRec,OldWarnings}> when 'true' ->
	      let <_cor2> =
		  %% Line 281
		  case call 'erlang':'erase'
			   ('filename') of
		    %% Line 282
		    <'undefined'> when 'true' ->
			%% Line 283
			[84|[79|[80|[95|[76|[69|[86|[69|[76]]]]]]]]]
		    %% Line 284
		    <X> when 'true' ->
			%% Line 285
			X
		  end
	      in  do  %% Line 287
		      case OldRec of
			%% Line 288
			<'undefined'> when 'true' ->
			    %% Line 289
			    call 'erlang':'erase'
				('records')
			%% Line 290
			<Rec> when 'true' ->
			    %% Line 291
			    call 'erlang':'put'
				('records', Rec)
		      end
		      do  %% Line 293
			  case OldWarnings of
			    %% Line 294
			    <'undefined'> when 'true' ->
				%% Line 295
				call 'erlang':'erase'
				    ('warnings')
			    %% Line 296
			    <Warn> when 'true' ->
				%% Line 297
				call 'erlang':'put'
				    ('warnings', Warn)
			  end
			  %% Line 299
			  case Old of
			    %% Line 300
			    <'undefined'> when 'true' ->
				_cor2
			    %% Line 302
			    <Y> when 'true' ->
				do  %% Line 303
				    call 'erlang':'put'
					('filename', Y)
				    _cor2
			  end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'cleanup_filename',1}}] )
	    -| ['compiler_generated'] )
	end
'add_record_definition'/1 =
    %% Line 307
    fun (_cor0) ->
	case _cor0 of
	  <{Name,FieldList}> when 'true' ->
	      let <_cor7> =
		  %% Line 309
		  ( fun (_cor4,_cor3) ->
			case <_cor4,_cor3> of
			  <{'record_field',_cor11,{'atom',Line0,FieldName}},{L,C}> when 'true' ->
			      let <_cor1> =
				  %% Line 310
				  call 'erlang':'+'
				      (C, 1)
			      in  %% Line 310
				  {[{FieldName,C,{'atom',Line0,'undefined'}}|L],_cor1}
			  %% Line 311
			  <{'record_field',_cor12,{'atom',_cor13,FieldName},Def},{L,C}> when 'true' ->
			      let <_cor2> =
				  %% Line 312
				  call 'erlang':'+'
				      (C, 1)
			      in  %% Line 312
				  {[{FieldName,C,Def}|L],_cor2}
			  ( <_cor6,_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor6,_cor5})
				  -| [{'function_name',{'-add_record_definition/1-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-add_record_definition/1-fun-0-'}}] )
	      in  %% Line 308
		  case call 'lists':'foldl'
			   (_cor7, %% Line 314
				   {[],2}, %% Line 315
					   FieldList) of
		    <{KeyList,_cor14}> when 'true' ->
			let <_cor9> =
			    %% Line 316
			    apply 'get_records'/0
				()
			in  %% Line 316
			    apply 'put_records'/1
				([{Name,KeyList}|_cor9])
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'add_record_definition',1}}] )
	    -| ['compiler_generated'] )
	end
'forms'/1 =
    %% Line 318
    fun (_cor0) ->
	case _cor0 of
	  <[F0|Fs0]> when 'true' ->
	      let <F1> =
		  %% Line 319
		  apply 'form'/1
		      (F0)
	      in  let <Fs1> =
		      %% Line 320
		      apply 'forms'/1
			  (Fs0)
		  in  %% Line 321
		      [F1|Fs1]
	  %% Line 322
	  <[]> when 'true' ->
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'forms',1}}] )
	    -| ['compiler_generated'] )
	end
'form'/1 =
    %% Line 324
    fun (_cor0) ->
	case _cor0 of
	  <Form = {'attribute',_cor3,'file',{Filename,_cor4}}> when 'true' ->
	      do  %% Line 325
		  apply 'put_filename'/1
		      (Filename)
		  %% Line 326
		  Form
	  %% Line 327
	  <Form = {'attribute',_cor5,'record',Definition}> when 'true' ->
	      do  %% Line 328
		  apply 'add_record_definition'/1
		      (Definition)
		  %% Line 329
		  Form
	  %% Line 330
	  <{'function',Line,Name0,Arity0,Clauses0}> when 'true' ->
	      %% Line 331
	      case apply 'function'/3
		       (Name0, Arity0, Clauses0) of
		<{Name,Arity,Clauses}> when 'true' ->
		    %% Line 332
		    {'function',Line,Name,Arity,Clauses}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 333
	  <AnyOther> when 'true' ->
	      %% Line 334
	      AnyOther
	end
'function'/3 =
    %% Line 335
    fun (_cor2,_cor1,_cor0) ->
	let <Clauses1> =
	    %% Line 336
	    apply 'clauses'/1
		(_cor0)
	in  %% Line 337
	    {_cor2,_cor1,Clauses1}
'clauses'/1 =
    %% Line 338
    fun (_cor0) ->
	case _cor0 of
	  <[C0|Cs]> when 'true' ->
	      let <_cor1> =
		  %% Line 339
		  call 'gb_sets':'new'
		      ()
	      in  let <C1> =
		      %% Line 339
		      apply 'clause'/2
			  (C0, _cor1)
		  in  let <C2> =
			  %% Line 340
			  apply 'clauses'/1
			      (Cs)
		      in  %% Line 341
			  [C1|C2]
	  %% Line 342
	  <[]> when 'true' ->
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clauses',1}}] )
	    -| ['compiler_generated'] )
	end
'clause'/2 =
    %% Line 344
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'clause',Line,H0,G0,B0},Bound> when 'true' ->
	      %% Line 345
	      case apply 'copy'/2
		       (H0, Bound) of
		<{H1,Bound1}> when 'true' ->
		    %% Line 346
		    case apply 'copy'/2
			     (B0, Bound1) of
		      <{B1,_X_Bound2}> when 'true' ->
			  %% Line 347
			  {'clause',Line,H1,G0,B1}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'clause',2}}] )
	    -| ['compiler_generated'] )
	end
'copy'/2 =
    %% Line 349
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'call',Line,{'remote',_X_Line2,{'atom',_X_Line3,'ets'},{'atom',_X_Line4,'fun2ms'}},%% Line 350
											       As0},%% Line 350
												    Bound> when 'true' ->
	      let <_cor2> =
		  %% Line 351
		  apply 'transform_call'/4
		      ('ets', Line, As0, Bound)
	      in  %% Line 351
		  {_cor2,Bound}
	  %% Line 352
	  <{'call',Line,{'remote',_X_Line2,{'record_field',_X_Line3,%% Line 353
								    {'atom',_X_Line4,''},%% Line 353
											 {'atom',_X_Line5,'ets'}},%% Line 354
														  {'atom',_X_Line6,'fun2ms'}},%% Line 354
																	      As0},%% Line 354
																		   Bound> when 'true' ->
	      let <_cor3> =
		  %% Line 356
		  apply 'transform_call'/4
		      ('ets', Line, As0, Bound)
	      in  %% Line 356
		  {_cor3,Bound}
	  %% Line 357
	  <{'call',Line,{'remote',_X_Line2,{'atom',_X_Line3,'dbg'},{'atom',_X_Line4,'fun2ms'}},%% Line 358
											       As0},%% Line 358
												    Bound> when 'true' ->
	      let <_cor4> =
		  %% Line 359
		  apply 'transform_call'/4
		      ('dbg', Line, As0, Bound)
	      in  %% Line 359
		  {_cor4,Bound}
	  %% Line 360
	  <{'match',Line,A,B},Bound> when 'true' ->
	      %% Line 361
	      case apply 'copy'/2
		       (B, Bound) of
		<{B1,Bound1}> when 'true' ->
		    %% Line 362
		    case apply 'copy'/2
			     (A, Bound) of
		      <{A1,Bound2}> when 'true' ->
			  let <_cor7> =
			      %% Line 363
			      call 'gb_sets':'union'
				  (Bound1, Bound2)
			  in  %% Line 363
			      {{'match',Line,A1,B1},_cor7}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 364
	  <VarDef = {'var',_X_Line,'_'},Bound> when 'true' ->
	      %% Line 365
	      {VarDef,Bound}
	  %% Line 366
	  <VarDef = {'var',_X_Line,Name},Bound> when 'true' ->
	      let <Bound1> =
		  %% Line 367
		  call 'gb_sets':'add'
		      (Name, Bound)
	      in  %% Line 368
		  {VarDef,Bound1}
	  %% Line 369
	  <{'fun',Line,{'clauses',Clauses}},Bound> when 'true' ->
	      %% Line 370
	      case apply 'copy_list'/2
		       (Clauses, Bound) of
		<{NewClauses,_X_IgnoredBindings}> when 'true' ->
		    %% Line 371
		    {{'fun',Line,{'clauses',NewClauses}},Bound}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 372
	  <{'named_fun',Line,Name,Clauses},Bound> when 'true' ->
	      let <_cor11> =
		  %% Line 373
		  case Name of
		    %% Line 374
		    <'_'> when 'true' ->
			Bound
		    %% Line 375
		    <_cor21> when 'true' ->
			call 'gb_sets':'add'
			    (Name, Bound)
		  end
	      in  %% Line 377
		  case apply 'copy_list'/2
			   (Clauses, _cor11) of
		    <{NewClauses,_X_IgnoredBindings}> when 'true' ->
			%% Line 378
			{{'named_fun',Line,Name,NewClauses},Bound}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 379
	  <{'case',Line,Of,ClausesList},Bound> when 'true' ->
	      %% Line 380
	      case apply 'copy'/2
		       (Of, Bound) of
		<{NewOf,NewBind0}> when 'true' ->
		    %% Line 381
		    case apply 'copy_case_clauses'/3
			     (ClausesList, NewBind0, []) of
		      <{NewClausesList,NewBindings}> when 'true' ->
			  %% Line 382
			  {{'case',Line,NewOf,NewClausesList},NewBindings}
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor15})
			-| ['compiler_generated'] )
		    end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 383
	  <T,Bound>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor16> =
		  %% Line 384
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 384
		  case apply 'copy_list'/2
			   (_cor16, Bound) of
		    <{L,Bound1}> when 'true' ->
			let <_cor18> =
			    %% Line 385
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 385
			    {_cor18,Bound1}
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor17})
		      -| ['compiler_generated'] )
		  end
	  %% Line 386
	  <L,Bound>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 387
	      apply 'copy_list'/2
		  (L, Bound)
	  %% Line 388
	  <AnyOther,Bound> when 'true' ->
	      %% Line 389
	      {AnyOther,Bound}
	end
'copy_case_clauses'/3 =
    %% Line 391
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Bound,AddSets> when 'true' ->
	      let <ReallyAdded> =
		  %% Line 392
		  call 'gb_sets':'intersection'
		      (AddSets)
	      in  let <_cor4> =
		      %% Line 393
		      call 'gb_sets':'union'
			  (Bound, ReallyAdded)
		  in  %% Line 393
		      {[],_cor4}
	  %% Line 394
	  <[{'clause',Line,Match,Guard,Clauses}|T],Bound,AddSets> when 'true' ->
	      %% Line 395
	      case apply 'copy'/2
		       (Match, Bound) of
		<{NewMatch,MatchBinds}> when 'true' ->
		    %% Line 396
		    case apply 'copy'/2
			     (Guard, MatchBinds) of
		      <{NewGuard,GuardBinds}> when 'true' ->
			  %% Line 397
			  case apply 'copy'/2
				   (Clauses, GuardBinds) of
			    <{NewClauses,AllBinds}> when 'true' ->
				let <AddedBinds> =
				    %% Line 400
				    call 'gb_sets':'subtract'
					(AllBinds, Bound)
				in  %% Line 401
				    case %% Line 402
					 apply 'copy_case_clauses'/3
					     (T, Bound, [AddedBinds|AddSets]) of
				      <{NewTail,ExportedBindings}> when 'true' ->
					  %% Line 403
					  {[{'clause',Line,NewMatch,NewGuard,NewClauses}|NewTail],ExportedBindings}
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor9})
					-| ['compiler_generated'] )
				    end
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'copy_case_clauses',3}}] )
	    -| ['compiler_generated'] )
	end
'copy_list'/2 =
    %% Line 405
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Bound> when 'true' ->
	      %% Line 406
	      case apply 'copy'/2
		       (H, Bound) of
		<{C1,Bound1}> when 'true' ->
		    %% Line 407
		    case apply 'copy_list'/2
			     (T, Bound1) of
		      <{C2,Bound2}> when 'true' ->
			  %% Line 408
			  {[C1|C2],Bound2}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 409
	  <[],Bound> when 'true' ->
	      %% Line 410
	      {[],Bound}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'copy_list',2}}] )
	    -| ['compiler_generated'] )
	end
'transform_call'/4 =
    %% Line 412
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type,_X_Line,[{'fun',Line2,{'clauses',ClauseList}}|[]],Bound> when 'true' ->
	      %% Line 413
	      apply 'ms_clause_list'/4
		  (Line2, ClauseList, Type, Bound)
	  %% Line 414
	  <_X_Type,Line,_X_NoAbstractFun,_cor8> when 'true' ->
	      %% Line 415
	      call 'erlang':'throw'
		  ({'error',Line,1})
	end
'ms_clause_expand'/1 =
    %% Line 418
    fun (_cor0) ->
	case _cor0 of
	  <{'clause',Line,Parameters,Guard = [_cor6|[_cor7|_cor8]],Body}> when 'true' ->
	      %% Line 419
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[X|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [{'clause',Line,Parameters,[X|[]],Body}|_cor4]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Guard)
		-| ['list_comprehension'] )
	  %% Line 420
	  <_X_Other> when 'true' ->
	      %% Line 421
	      'false'
	end
'ms_clause_list'/4 =
    %% Line 423
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Line,[H|T],Type,Bound> when 'true' ->
	      %% Line 424
	      case apply 'ms_clause_expand'/1
		       (H) of
		%% Line 425
		<NewHead>
		    when call 'erlang':'is_list'
			  (NewHead) ->
		    let <_cor4> =
			%% Line 426
			call 'erlang':'++'
			    (NewHead, T)
		    in  %% Line 426
			apply 'ms_clause_list'/4
			    (Line, _cor4, Type, Bound)
		%% Line 427
		<'false'> when 'true' ->
		    let <_cor6> =
			%% Line 428
			apply 'ms_clause'/3
			    (H, Type, Bound)
		    in  let <_cor5> =
			    %% Line 429
			    apply 'ms_clause_list'/4
				(Line, T, Type, Bound)
			in  %% Line 428
			    {'cons',Line,_cor6,_cor5}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 431
	  <Line,[],_cor12,_cor13> when 'true' ->
	      %% Line 432
	      {'nil',Line}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ms_clause_list',4}}] )
	    -| ['compiler_generated'] )
	end
'ms_clause'/3 =
    %% Line 433
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'clause',Line,Parameters,Guards,Body},Type,Bound> when 'true' ->
	      do  %% Line 434
		  apply 'check_type'/3
		      (Line, Parameters, Type)
		  %% Line 435
		  case apply 'transform_head'/2
			   (Parameters, Bound) of
		    <{MSHead,Bindings}> when 'true' ->
			let <MSGuards> =
			    %% Line 436
			    apply 'transform_guards'/3
				(Line, Guards, Bindings)
			in  let <MSBody> =
				%% Line 437
				apply 'transform_body'/3
				    (Line, Body, Bindings)
			    in  %% Line 438
				{'tuple',Line,[MSHead|[MSGuards|[MSBody|[]]]]}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'ms_clause',3}}] )
	    -| ['compiler_generated'] )
	end
'check_type'/3 =
    %% Line 441
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor6,[{'var',_cor7,_cor8}|[]],_cor9> when 'true' ->
	      %% Line 442
	      'ok'
	  %% Line 443
	  <_cor10,[{'tuple',_cor11,_cor12}|[]],'ets'> when 'true' ->
	      %% Line 444
	      'ok'
	  %% Line 445
	  <_cor13,[{'record',_cor14,_cor15,_cor16}|[]],'ets'> when 'true' ->
	      %% Line 446
	      'ok'
	  %% Line 447
	  <_cor17,[{'cons',_cor18,_cor19,_cor20}|[]],'dbg'> when 'true' ->
	      %% Line 448
	      'ok'
	  %% Line 449
	  <Line0,[{'match',_cor21,{'var',_cor22,_cor23},X}|[]],Any> when 'true' ->
	      %% Line 450
	      apply 'check_type'/3
		  (Line0, [X|[]], Any)
	  %% Line 451
	  <Line0,[{'match',_cor24,X,{'var',_cor25,_cor26}}|[]],Any> when 'true' ->
	      %% Line 452
	      apply 'check_type'/3
		  (Line0, [X|[]], Any)
	  %% Line 453
	  <Line,_X_Type,'ets'> when 'true' ->
	      %% Line 454
	      call 'erlang':'throw'
		  ({'error',Line,2})
	  %% Line 455
	  <Line,_cor27,'dbg'> when 'true' ->
	      %% Line 456
	      call 'erlang':'throw'
		  ({'error',Line,3})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'check_type',3}}] )
	    -| ['compiler_generated'] )
	end
'transform_guards'/3 =
    %% Line 463
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,[],_X_Bindings> when 'true' ->
	      %% Line 464
	      {'nil',Line}
	  %% Line 465
	  <Line,[G|[]],Bindings> when 'true' ->
	      let <B> =
		  %% Line 466
		  {'tgd',Bindings,'guard',0}
	      in  %% Line 467
		  apply 'tg0'/3
		      (Line, G, B)
	  %% Line 468
	  <Line,_cor7,_cor8> when 'true' ->
	      %% Line 469
	      call 'erlang':'throw'
		  ({'error',Line,5})
	end
'transform_body'/3 =
    %% Line 471
    fun (_cor2,_cor1,_cor0) ->
	let <B> =
	    %% Line 472
	    {'tgd',_cor0,'body',100}
	in  %% Line 473
	    apply 'tg0'/3
		(_cor2, _cor1, B)
'guard_top_trans'/1 =
    %% Line 476
    fun (_cor0) ->
	case _cor0 of
	  <{'call',Line0,{'atom',Line1,OldTest},Params}> when 'true' ->
	      let <_cor1> =
		  %% Line 477
		  call 'erlang':'length'
		      (Params)
	      in  %% Line 477
		  case apply 'old_bool_test'/2
			   (OldTest, _cor1) of
		    %% Line 478
		    <'undefined'> when 'true' ->
			%% Line 479
			{'call',Line0,{'atom',Line1,OldTest},Params}
		    %% Line 480
		    <Trans> when 'true' ->
			%% Line 481
			{'call',Line0,{'atom',Line1,Trans},Params}
		  end
	  %% Line 483
	  <Else> when 'true' ->
	      %% Line 484
	      Else
	end
'tg0'/3 =
    %% Line 486
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,[],_cor17> when 'true' ->
	      %% Line 487
	      {'nil',Line}
	  %% Line 488
	  <Line,[H0|T],B = {'tgd',_cor18,_cor19,_cor20}>
	      when call 'erlang':'=:='
		    (_cor19,
		     'guard') ->
	      let <H> =
		  %% Line 489
		  apply 'guard_top_trans'/1
		      (H0)
	      in  let <_cor11> =
		      %% Line 490
		      apply 'tg'/2
			  (H, B)
		  in  let <_cor10> =
			  %% Line 490
			  apply 'tg0'/3
			      (Line, T, B)
		      in  %% Line 490
			  {'cons',Line,_cor11,_cor10}
	  %% Line 491
	  <Line,[H|T],B> when 'true' ->
	      let <_cor13> =
		  %% Line 492
		  apply 'tg'/2
		      (H, B)
	      in  let <_cor12> =
		      %% Line 492
		      apply 'tg0'/3
			  (Line, T, B)
		  in  %% Line 492
		      {'cons',Line,_cor13,_cor12}
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'tg0',3}}] )
	    -| ['compiler_generated'] )
	end
'tg'/2 =
    %% Line 495
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'match',Line,_cor169,_cor170},B> when 'true' ->
	      %% Line 496
	      ( case B of
		  ( <( {'tgd',_cor171,_cor172,_rec0}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor4> =
			    call 'erlang':'+'
				(16, _rec0)
			in  call 'erlang':'throw'
				({'error',Line,_cor4})
		    -| ['compiler_generated'] )
		  ( <_cor173> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tgd'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 497
	  <{'op',Line,Operator,O1,O2},B> when 'true' ->
	      let <_cor5> =
		  %% Line 498
		  apply 'tg'/2
		      (O1, B)
	      in  let <_cor6> =
		      %% Line 498
		      apply 'tg'/2
			  (O2, B)
		  in  %% Line 498
		      {'tuple',Line,[{'atom',Line,Operator}|[_cor5|[_cor6|[]]]]}
	  %% Line 499
	  <{'op',Line,Operator,O1},B> when 'true' ->
	      let <_cor7> =
		  %% Line 500
		  apply 'tg'/2
		      (O1, B)
	      in  %% Line 500
		  {'tuple',Line,[{'atom',Line,Operator}|[_cor7|[]]]}
	  %% Line 501
	  <{'call',_X_Line,{'atom',Line2,'bindings'},[]},_X_B> when 'true' ->
	      %% Line 502
	      {'atom',Line2,'$*'}
	  %% Line 503
	  <{'call',_X_Line,{'atom',Line2,'object'},[]},_X_B> when 'true' ->
	      %% Line 504
	      {'atom',Line2,'$_'}
	  %% Line 505
	  <{'call',Line,Call = {'atom',_cor174,'is_record'},[Object|[R = {'atom',Line3,RName}|[]]]},B> when 'true' ->
	      let <MSObject> =
		  %% Line 506
		  apply 'tg'/2
		      (Object, B)
	      in  let <RDefs> =
		      %% Line 507
		      apply 'get_records'/0
			  ()
		  in  %% Line 508
		      case call 'lists':'keysearch'
			       (RName, 1, RDefs) of
			%% Line 509
			<{'value',{_cor175,FieldList}}>
			    when call 'erlang':'=:='
				  (_cor175,
				   RName) ->
			    let <_cor10> =
				%% Line 510
				call 'erlang':'length'
				    (FieldList)
			    in  let <RSize> =
				    %% Line 510
				    call 'erlang':'+'
					(_cor10, 1)
				in  %% Line 511
				    {'tuple',Line,[Call|[MSObject|[R|[{'integer',Line3,RSize}|[]]]]]}
			%% Line 512
			<_cor176> when 'true' ->
			    %% Line 513
			    ( case B of
				( <( {'tgd',_cor177,_cor178,_rec1}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor14> =
					  call 'erlang':'+'
					      (20, _rec1)
				      in  call 'erlang':'throw'
					      ({'error',Line3,{_cor14,RName}})
				  -| ['compiler_generated'] )
				( <_cor179> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','tgd'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		      end
	  %% Line 515
	  <{'call',Line,{'atom',Line2,FunName},ParaList},B> when 'true' ->
	      let <_cor18> =
		  %% Line 516
		  call 'erlang':'length'
		      (ParaList)
	      in  %% Line 516
		  ( case B of
		      ( <( {'tgd',_cor180,_rec2,_cor181}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'is_ms_function'/3
				     (FunName, _cor18, _rec2) of
			      %% Line 517
			      <'true'> when 'true' ->
				  let <_cor21> =
				      %% Line 519
				      ( fun (_cor19) ->
					    apply 'tg'/2
						(_cor19, B)
					-| [{'id',{0,0,'-tg/2-fun-0-'}}] )
				  in  let <_cor22> =
					  %% Line 519
					  call 'lists':'map'
					      (_cor21, ParaList)
				      in  %% Line 518
					  {'tuple',Line,[{'atom',Line2,FunName}|_cor22]}
			      %% Line 520
			      <_cor183> when 'true' ->
				  let <_cor26> =
				      %% Line 521
				      call 'erlang':'+'
					  (17, _cor181)
				  in  let <_cor23> =
					  %% Line 522
					  call 'erlang':'length'
					      (ParaList)
				      in  %% Line 521
					  call 'erlang':'throw'
					      ({'error',Line,{_cor26,%% Line 522
								     FunName,_cor23}})
			    end
			-| ['compiler_generated'] )
		      ( <_cor182> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','tgd'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 524
	  <{'call',Line,{'remote',_cor187,{'atom',_cor188,'erlang'},{'atom',Line2,FunName}},ParaList},%% Line 525
												      B> when 'true' ->
	      let <L> =
		  %% Line 526
		  call 'erlang':'length'
		      (ParaList)
	      in  %% Line 527
		  ( case B of
		      ( <( {'tgd',_cor189,_rec4,_cor190}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'is_imported_from_erlang'/3
				     (FunName, L, _rec4) of
			      %% Line 528
			      <'true'> when 'true' ->
				  %% Line 529
				  case apply 'is_operator'/3
					   (FunName, L, _rec4) of
				    %% Line 530
				    <'false'> when 'true' ->
					%% Line 531
					apply 'tg'/2
					    ({'call',Line,{'atom',Line2,FunName},ParaList}, B)
				    %% Line 532
				    <'true'> when 'true' ->
					let <_cor33> =
					    %% Line 533
					    call 'erlang':'list_to_tuple'
						(['op'|[Line2|[FunName|ParaList]]])
					in  %% Line 533
					    apply 'tg'/2
						(_cor33, B)
				    ( <_cor34> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor34})
				      -| ['compiler_generated'] )
				  end
			      %% Line 535
			      <_cor195> when 'true' ->
				  let <_cor38> =
				      %% Line 536
				      call 'erlang':'+'
					  (22, _cor190)
				  in  let <_cor35> =
					  %% Line 537
					  call 'erlang':'length'
					      (ParaList)
				      in  %% Line 536
					  call 'erlang':'throw'
					      ({'error',Line,{_cor38,'erlang',%% Line 537
									      FunName,_cor35}})
			    end
			-| ['compiler_generated'] )
		      ( <_cor191> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','tgd'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 539
	  <{'call',Line,{'remote',_cor199,{'atom',_cor200,ModuleName},%% Line 540
								      {'atom',_cor201,FunName}},%% Line 540
												_X_ParaList},%% Line 540
													     B> when 'true' ->
	      %% Line 541
	      ( case B of
		  ( <( {'tgd',_cor202,_cor203,_rec7}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor42> =
			    call 'erlang':'+'
				(22, _rec7)
			in  call 'erlang':'throw'
				({'error',Line,{_cor42,ModuleName,FunName}})
		    -| ['compiler_generated'] )
		  ( <_cor204> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tgd'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 542
	  <{'cons',Line,H,T},B> when 'true' ->
	      let <_cor44> =
		  %% Line 543
		  apply 'tg'/2
		      (H, B)
	      in  let <_cor43> =
		      %% Line 543
		      apply 'tg'/2
			  (T, B)
		  in  %% Line 543
		      {'cons',Line,_cor44,_cor43}
	  %% Line 544
	  <{'nil',Line},_X_B> when 'true' ->
	      %% Line 545
	      {'nil',Line}
	  %% Line 546
	  <{'tuple',Line,L},B> when 'true' ->
	      let <_cor47> =
		  %% Line 547
		  ( fun (_cor45) ->
			apply 'tg'/2
			    (_cor45, B)
		    -| [{'id',{0,0,'-tg/2-fun-1-'}}] )
	      in  let <_cor48> =
		      %% Line 547
		      call 'lists':'map'
			  (_cor47, L)
		  in  %% Line 547
		      {'tuple',Line,[{'tuple',Line,_cor48}|[]]}
	  %% Line 548
	  <{'integer',Line,I},_cor205> when 'true' ->
	      %% Line 549
	      {'integer',Line,I}
	  %% Line 550
	  <{'char',Line,C},_cor206> when 'true' ->
	      %% Line 551
	      {'char',Line,C}
	  %% Line 552
	  <{'float',Line,F},_cor207> when 'true' ->
	      %% Line 553
	      {'float',Line,F}
	  %% Line 554
	  <{'atom',Line,A},_cor208> when 'true' ->
	      %% Line 555
	      case call 'erlang':'atom_to_list'
		       (A) of
		%% Line 556
		<[36|_cor209]> when 'true' ->
		    %% Line 557
		    {'tuple',Line,[{'atom',Line,'const'}|[{'atom',Line,A}|[]]]}
		%% Line 558
		<_cor210> when 'true' ->
		    %% Line 559
		    {'atom',Line,A}
	      end
	  %% Line 561
	  <{'string',Line,S},_cor211> when 'true' ->
	      %% Line 562
	      {'string',Line,S}
	  %% Line 563
	  <{'var',Line,VarName},B> when 'true' ->
	      %% Line 564
	      ( case B of
		  ( <( {'tgd',_rec8,_cor212,_cor213}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'lkup_bind'/2
				 (VarName, _rec8) of
			  %% Line 565
			  <'undefined'> when 'true' ->
			      %% Line 566
			      {'tuple',Line,[{'atom',Line,'const'}|[{'var',Line,VarName}|[]]]}
			  %% Line 567
			  <AtomName> when 'true' ->
			      %% Line 568
			      {'atom',Line,AtomName}
			end
		    -| ['compiler_generated'] )
		  ( <_cor214> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tgd'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 570
	  <{'record_field',Line,Object,RName,{'atom',_X_Line1,KeyName}},B> when 'true' ->
	      let <RDefs> =
		  %% Line 571
		  apply 'get_records'/0
		      ()
	      in  %% Line 572
		  case call 'lists':'keysearch'
			   (RName, 1, RDefs) of
		    %% Line 573
		    <{'value',{_cor215,FieldList}}>
			when call 'erlang':'=:='
			      (_cor215,
			       RName) ->
			%% Line 574
			case call 'lists':'keysearch'
				 (KeyName, 1, FieldList) of
			  %% Line 575
			  <{'value',{_cor216,Position,_cor217}}>
			      when call 'erlang':'=:='
				    (_cor216,
				     KeyName) ->
			      let <NewObject> =
				  %% Line 576
				  apply 'tg'/2
				      (Object, B)
			      in  %% Line 577
				  {'tuple',Line,[{'atom',Line,'element'}|%% Line 578
									 [{'integer',Line,Position}|[NewObject|[]]]]}
			  %% Line 579
			  <_cor218> when 'true' ->
			      %% Line 580
			      ( case B of
				  ( <( {'tgd',_cor219,_cor220,_rec9}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor57> =
					    call 'erlang':'+'
						(19, _rec9)
					in  call 'erlang':'throw'
						({'error',Line,{_cor57,RName,%% Line 581
									     KeyName}})
				    -| ['compiler_generated'] )
				  ( <_cor221> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','tgd'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    %% Line 583
		    <_cor222> when 'true' ->
			%% Line 584
			( case B of
			    ( <( {'tgd',_cor223,_cor224,_rec10}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor61> =
				      call 'erlang':'+'
					  (20, _rec10)
				  in  call 'erlang':'throw'
					  ({'error',Line,{_cor61,RName}})
			      -| ['compiler_generated'] )
			    ( <_cor225> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','tgd'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	  %% Line 587
	  <{'record',Line,RName,RFields},B> when 'true' ->
	      let <RDefs> =
		  %% Line 588
		  apply 'get_records'/0
		      ()
	      in  let <_cor73> =
		      %% Line 589
		      ( fun (_cor70,_cor69) ->
			    case <_cor70,_cor69> of
			      <{'record_field',_cor226,{'atom',_cor227,Key},Value},%% Line 590
										   L> when 'true' ->
				  let <NV> =
				      %% Line 591
				      apply 'tg'/2
					  (Value, B)
				  in  %% Line 592
				      [{Key,NV}|L]
			      %% Line 593
			      <{'record_field',_cor228,{'var',_cor229,'_'},Value},%% Line 594
										  L> when 'true' ->
				  let <NV> =
				      %% Line 595
				      apply 'tg'/2
					  (Value, B)
				  in  %% Line 596
				      [{{'default'},NV}|L]
			      %% Line 597
			      <_cor230,_cor231> when 'true' ->
				  %% Line 599
				  ( case B of
				      ( <( {'tgd',_cor232,_cor233,_rec11}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor68> =
						call 'erlang':'+'
						    (20, _rec11)
					    in  call 'erlang':'throw'
						    ({'error',Line,{_cor68,%% Line 600
									   RName}})
					-| ['compiler_generated'] )
				      ( <_cor234> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','tgd'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-tg/2-fun-2-'}}] )
		  in  let <KeyList0> =
			  %% Line 589
			  call 'lists':'foldl'
			      (_cor73, %% Line 602
				       [], %% Line 603
					   RFields)
		      in  let <_cor76> =
			      %% Line 604
			      case call 'lists':'keysearch'
				       ({'default'}, 1, KeyList0) of
				%% Line 605
				<{'value',{{'default'},OverriddenDefValue}}> when 'true' ->
				    %% Line 606
				    {'true',OverriddenDefValue}
				%% Line 607
				<_cor235> when 'true' ->
				    %% Line 608
				    'false'
			      end
			  in  let <KeyList> =
				  %% Line 610
				  call 'lists':'keydelete'
				      ({'default'}, 1, KeyList0)
			      in  do  %% Line 611
				      case call 'lists':'keysearch'
					       ({'default'}, 1, KeyList) of
					%% Line 612
					<{'value',{{'default'},_cor236}}> when 'true' ->
					    %% Line 613
					    ( case B of
						( <( {'tgd',_cor237,_cor238,_rec12}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_cor81> =
							  call 'erlang':'+'
							      (21, _rec12)
						      in  call 'erlang':'throw'
							      ({'error',Line,{_cor81,RName,'_'}})
						  -| ['compiler_generated'] )
						( <_cor239> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','tgd'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					%% Line 614
					<_cor240> when 'true' ->
					    'ok'
				      end
				      %% Line 617
				      case call 'lists':'keysearch'
					       (RName, 1, RDefs) of
					%% Line 618
					<{'value',{_cor241,FieldList0}}>
					    when call 'erlang':'=:='
						  (_cor241,
						   RName) ->
					    let <_cor91> =
						%% Line 620
						( fun (_cor88,_cor87) ->
						      case <_cor88,_cor87> of
							<{FN,_cor242,Def},Acc> when 'true' ->
							    let <_cor85> =
								%% Line 621
								case call 'lists':'keysearch'
									 (FN, 1, KeyList) of
								  %% Line 622
								  <{'value',{_cor243,X0}}>
								      when call 'erlang':'=:='
									    (_cor243,
									     FN) ->
								      %% Line 623
								      X0
								  %% Line 624
								  <_cor244> when 'true' ->
								      %% Line 625
								      case _cor76 of
									%% Line 626
									<{'true',Overridden}> when 'true' ->
									    %% Line 627
									    Overridden
									%% Line 628
									<'false'> when 'true' ->
									    %% Line 629
									    Def
									( <_cor83> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor83})
									  -| ['compiler_generated'] )
								      end
								end
							    in  %% Line 632
								[_cor85|Acc]
							( <_cor90,_cor89> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor90,_cor89})
								-| [{'function_name',{'-tg/2-fun-3-',2}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-tg/2-fun-3-'}}] )
					    in  let <FieldList1> =
						    %% Line 619
						    call 'lists':'foldl'
							(_cor91, %% Line 634
								 [], %% Line 635
								     FieldList0)
						in  %% Line 637
						    ( case B of
							( <( {'tgd',_cor245,_cor246,_rec13}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_cor95> =
								  call 'erlang':'+'
								      (21, _rec13)
							      in  do  apply 'check_multi_field'/4
									  (RName, Line, KeyList, _cor95)
								      let <_cor98> =
									  %% Line 639
									  call 'erlang':'+'
									      (19, _rec13)
								      in  do  %% Line 638
									      apply 'check_undef_field'/5
										  (RName, Line, KeyList, FieldList0, _cor98)
									      %% Line 640
									      {'tuple',Line,[{'tuple',Line,[{'atom',Line,RName}|FieldList1]}|[]]}
							  -| ['compiler_generated'] )
							( <_cor247> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','tgd'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					%% Line 641
					<_cor251> when 'true' ->
					    %% Line 642
					    ( case B of
						( <( {'tgd',_cor252,_cor253,_rec15}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_cor101> =
							  call 'erlang':'+'
							      (20, _rec15)
						      in  call 'erlang':'throw'
							      ({'error',Line,{_cor101,RName}})
						  -| ['compiler_generated'] )
						( <_cor254> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','tgd'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				      end
	  %% Line 645
	  <{'record_index',Line,RName,{'atom',Line2,KeyName}},B> when 'true' ->
	      let <RDefs> =
		  %% Line 646
		  apply 'get_records'/0
		      ()
	      in  %% Line 647
		  case call 'lists':'keysearch'
			   (RName, 1, RDefs) of
		    %% Line 648
		    <{'value',{_cor255,FieldList}}>
			when call 'erlang':'=:='
			      (_cor255,
			       RName) ->
			%% Line 649
			case call 'lists':'keysearch'
				 (KeyName, 1, FieldList) of
			  %% Line 650
			  <{'value',{_cor256,Position,_cor257}}>
			      when call 'erlang':'=:='
				    (_cor256,
				     KeyName) ->
			      %% Line 651
			      {'integer',Line2,Position}
			  %% Line 652
			  <_cor258> when 'true' ->
			      %% Line 653
			      ( case B of
				  ( <( {'tgd',_cor259,_cor260,_rec16}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor106> =
					    call 'erlang':'+'
						(19, _rec16)
					in  call 'erlang':'throw'
						({'error',Line2,{_cor106,RName,%% Line 654
									       KeyName}})
				    -| ['compiler_generated'] )
				  ( <_cor261> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','tgd'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    %% Line 656
		    <_cor262> when 'true' ->
			%% Line 657
			( case B of
			    ( <( {'tgd',_cor263,_cor264,_rec17}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor110> =
				      call 'erlang':'+'
					  (20, _rec17)
				  in  call 'erlang':'throw'
					  ({'error',Line,{_cor110,RName}})
			      -| ['compiler_generated'] )
			    ( <_cor265> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','tgd'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	  %% Line 660
	  <{'record',Line,AVName = {'var',Line2,_X_VName},RName,RFields},B> when 'true' ->
	      let <RDefs> =
		  %% Line 661
		  apply 'get_records'/0
		      ()
	      in  let <MSVName> =
		      %% Line 662
		      apply 'tg'/2
			  (AVName, B)
		  in  let <_cor119> =
			  %% Line 663
			  ( fun (_cor116,_cor115) ->
				case <_cor116,_cor115> of
				  <{'record_field',_cor266,{'atom',_cor267,Key},Value},%% Line 664
										       L> when 'true' ->
				      let <NV> =
					  %% Line 665
					  apply 'tg'/2
					      (Value, B)
				      in  %% Line 666
					  [{Key,NV}|L]
				  %% Line 667
				  <_cor268,_cor269> when 'true' ->
				      %% Line 668
				      call 'erlang':'throw'
					  ({'error',Line,7})
				end
			    -| [{'id',{0,0,'-tg/2-fun-4-'}}] )
		      in  let <KeyList> =
			      %% Line 663
			      call 'lists':'foldl'
				  (_cor119, %% Line 670
					    [], %% Line 671
						RFields)
			  in  %% Line 672
			      case call 'lists':'keysearch'
				       (RName, 1, RDefs) of
				%% Line 673
				<{'value',{_cor270,FieldList0}}>
				    when call 'erlang':'=:='
					  (_cor270,
					   RName) ->
				    let <_cor128> =
					%% Line 675
					( fun (_cor125,_cor124) ->
					      case <_cor125,_cor124> of
						<{FN,Pos,_cor271},Acc> when 'true' ->
						    let <_cor122> =
							%% Line 676
							case call 'lists':'keysearch'
								 (FN, 1, KeyList) of
							  %% Line 677
							  <{'value',{_cor272,X0}}>
							      when call 'erlang':'=:='
								    (_cor272,
								     FN) ->
							      %% Line 678
							      X0
							  %% Line 679
							  <_cor273> when 'true' ->
							      %% Line 680
							      {'tuple',Line2,%% Line 681
									     [{'atom',Line2,'element'}|%% Line 682
												       [{'integer',Line2,Pos}|%% Line 683
															      [MSVName|[]]]]}
							end
						    in  %% Line 685
							[_cor122|Acc]
						( <_cor127,_cor126> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor127,_cor126})
							-| [{'function_name',{'-tg/2-fun-5-',2}}] )
						  -| ['compiler_generated'] )
					      end
					  -| [{'id',{0,0,'-tg/2-fun-5-'}}] )
				    in  let <FieldList1> =
					    %% Line 674
					    call 'lists':'foldl'
						(_cor128, %% Line 687
							  [], %% Line 688
							      FieldList0)
					in  %% Line 690
					    ( case B of
						( <( {'tgd',_cor274,_cor275,_rec18}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_cor132> =
							  call 'erlang':'+'
							      (21, _rec18)
						      in  do  apply 'check_multi_field'/4
								  (RName, Line, KeyList, _cor132)
							      let <_cor135> =
								  %% Line 692
								  call 'erlang':'+'
								      (19, _rec18)
							      in  do  %% Line 691
								      apply 'check_undef_field'/5
									  (RName, Line, KeyList, FieldList0, _cor135)
								      %% Line 693
								      {'tuple',Line,[{'tuple',Line,[{'atom',Line,RName}|FieldList1]}|[]]}
						  -| ['compiler_generated'] )
						( <_cor276> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','tgd'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				%% Line 694
				<_cor280> when 'true' ->
				    %% Line 695
				    ( case B of
					( <( {'tgd',_cor281,_cor282,_rec20}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_cor138> =
						  call 'erlang':'+'
						      (20, _rec20)
					      in  call 'erlang':'throw'
						      ({'error',Line,{_cor138,RName}})
					  -| ['compiler_generated'] )
					( <_cor283> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','tgd'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			      end
	  %% Line 698
	  <Whole = {'bin_element',_X_Line0,{'var',Line,A},_cor284,_cor285},B> when 'true' ->
	      %% Line 699
	      ( case B of
		  ( <( {'tgd',_rec21,_cor286,_cor287}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'lkup_bind'/2
				 (A, _rec21) of
			  %% Line 700
			  <'undefined'> when 'true' ->
			      %% Line 701
			      Whole
			  %% Line 702
			  <_X_AtomName> when 'true' ->
			      let <_cor144> =
				  %% Line 703
				  call 'erlang':'+'
				      (23, _cor287)
			      in  %% Line 703
				  call 'erlang':'throw'
				      ({'error',Line,{_cor144,A}})
			end
		    -| ['compiler_generated'] )
		  ( <_cor288> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','tgd'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 705
	  <'default',_X_B> when 'true' ->
	      %% Line 706
	      'default'
	  %% Line 707
	  <{'bin_element',Line,X,Y,Z},B> when 'true' ->
	      let <_cor147> =
		  %% Line 708
		  apply 'tg'/2
		      (X, B)
	      in  let <_cor146> =
		      %% Line 708
		      apply 'tg'/2
			  (Y, B)
		  in  %% Line 708
		      {'bin_element',Line,_cor147,_cor146,Z}
	  %% Line 710
	  <{'bin',Line,List},B> when 'true' ->
	      let <_cor153> =
		  %% Line 711
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor150) ->
				case _cor150 of
				  <[X|_cor149]> when 'true' ->
				      let <_cor151> =
					  apply 'tg'/2
					      (X, B)
				      in  let <_cor152> =
					      apply 'lc$^0'/1
						  (_cor149)
					  in  ( [_cor151|_cor152]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor150> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor150})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 711
		  {'bin',Line,_cor153}
	  %% Line 713
	  <T,B>
	      when try
		    let <_cor154> =
			call 'erlang':'is_tuple'
			    (T)
		    in  let <_cor155> =
			    call 'erlang':'tuple_size'
				(T)
			in  let <_cor156> =
				call 'erlang':'>='
				    (_cor155, 2)
			    in  call 'erlang':'and'
				    (_cor154, _cor156)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Element> =
		  %% Line 714
		  call 'erlang':'element'
		      (1, T)
	      in  let <Line> =
		      %% Line 715
		      call 'erlang':'element'
			  (2, T)
		  in  %% Line 716
		      ( case B of
			  ( <( {'tgd',_cor292,_cor293,_rec23}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor162> =
				    call 'erlang':'+'
					(18, _rec23)
				in  let <_cor159> =
					%% Line 717
					apply 'translate_language_element'/1
					    (Element)
				    in  call 'erlang':'throw'
					    ({'error',Line,{_cor162,_cor159}})
			    -| ['compiler_generated'] )
			  ( <_cor294> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','tgd'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 718
	  <Other,B> when 'true' ->
	      let <Element> =
		  %% Line 719
		  call 'io_lib':'format'
		      ([117|[110|[107|[110|[111|[119|[110|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[119]]]]]]]]]]]]]]]]]], [Other|[]])
	      in  %% Line 720
		  ( case B of
		      ( <( {'tgd',_cor295,_cor296,_rec24}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor166> =
				call 'erlang':'+'
				    (18, _rec24)
			    in  call 'erlang':'throw'
				    ({'error','unknown',{_cor166,Element}})
			-| ['compiler_generated'] )
		      ( <_cor297> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','tgd'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'transform_head'/2 =
    %% Line 722
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[V|[]],OuterBound> when 'true' ->
	      let <Bind> =
		  %% Line 723
		  apply 'cre_bind'/0
		      ()
	      in  %% Line 724
		  case apply 'toplevel_head_match'/3
			   (V, Bind, OuterBound) of
		    <{NewV,NewBind}> when 'true' ->
			%% Line 725
			apply 'th'/3
			    (NewV, NewBind, OuterBound)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'transform_head',2}}] )
	    -| ['compiler_generated'] )
	end
'toplevel_head_match'/3 =
    %% Line 728
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'match',Line,{'var',_cor8,VName},Expr},B,OB> when 'true' ->
	      do  %% Line 729
		  apply 'warn_var_clash'/3
		      (Line, VName, OB)
		  let <_cor3> =
		      %% Line 730
		      apply 'new_bind'/2
			  ({VName,'$_'}, B)
		  in  %% Line 730
		      {Expr,_cor3}
	  %% Line 731
	  <{'match',Line,Expr,{'var',_cor9,VName}},B,OB> when 'true' ->
	      do  %% Line 732
		  apply 'warn_var_clash'/3
		      (Line, VName, OB)
		  let <_cor4> =
		      %% Line 733
		      apply 'new_bind'/2
			  ({VName,'$_'}, B)
		  in  %% Line 733
		      {Expr,_cor4}
	  %% Line 734
	  <Other,B,_X_OB> when 'true' ->
	      %% Line 735
	      {Other,B}
	end
'th'/3 =
    %% Line 737
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'record',Line,RName,RFields},B,OB> when 'true' ->
	      let <RDefs> =
		  %% Line 739
		  apply 'get_records'/0
		      ()
	      in  let <_cor10> =
		      %% Line 740
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'record_field',_cor41,{'atom',_cor42,Key},Value},%% Line 741
										 {L,B0}> when 'true' ->
				  %% Line 742
				  case apply 'th'/3
					   (Value, B0, OB) of
				    <{NV,B1}> when 'true' ->
					%% Line 743
					{[{Key,NV}|L],B1}
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor4})
				      -| ['compiler_generated'] )
				  end
			      %% Line 744
			      <{'record_field',_cor43,{'var',_cor44,'_'},Value},%% Line 745
										{L,B0}> when 'true' ->
				  %% Line 746
				  case apply 'th'/3
					   (Value, B0, OB) of
				    <{NV,B1}> when 'true' ->
					%% Line 747
					{[{{'default'},NV}|L],B1}
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			      %% Line 748
			      <_cor45,_cor46> when 'true' ->
				  %% Line 749
				  call 'erlang':'throw'
				      ({'error',Line,{7,%% Line 750
							RName}})
			    end
			-| [{'id',{0,0,'-th/3-fun-0-'}}] )
		  in  %% Line 740
		      case call 'lists':'foldl'
			       (_cor10, %% Line 752
					{[],B}, %% Line 753
						RFields) of
			<{KeyList0,NewB}> when 'true' ->
			    let <_cor13> =
				%% Line 754
				case call 'lists':'keysearch'
					 ({'default'}, 1, KeyList0) of
				  %% Line 755
				  <{'value',{{'default'},OverriddenDefValue}}> when 'true' ->
				      %% Line 756
				      OverriddenDefValue
				  %% Line 757
				  <_cor47> when 'true' ->
				      %% Line 758
				      {'atom',Line,'_'}
				end
			    in  let <KeyList> =
				    %% Line 760
				    call 'lists':'keydelete'
					({'default'}, 1, KeyList0)
				in  do  %% Line 761
					case call 'lists':'keysearch'
						 ({'default'}, 1, KeyList) of
					  %% Line 762
					  <{'value',{{'default'},_cor48}}> when 'true' ->
					      %% Line 763
					      call 'erlang':'throw'
						  ({'error',Line,{9,RName,'_'}})
					  %% Line 764
					  <_cor49> when 'true' ->
					      'ok'
					end
					%% Line 767
					case call 'lists':'keysearch'
						 (RName, 1, RDefs) of
					  %% Line 768
					  <{'value',{_cor50,FieldList0}}>
					      when call 'erlang':'=:='
						    (_cor50,
						     RName) ->
					      let <_cor24> =
						  %% Line 770
						  ( fun (_cor21,_cor20) ->
							case <_cor21,_cor20> of
							  <{FN,_cor51,_cor52},Acc> when 'true' ->
							      let <_cor18> =
								  %% Line 771
								  case call 'lists':'keysearch'
									   (FN, 1, KeyList) of
								    %% Line 772
								    <{'value',{_cor53,X0}}>
									when call 'erlang':'=:='
									      (_cor53,
									       FN) ->
									%% Line 773
									X0
								    %% Line 774
								    <_cor54> when 'true' ->
									_cor13
								  end
							      in  %% Line 777
								  [_cor18|Acc]
							  ( <_cor23,_cor22> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor23,_cor22})
								  -| [{'function_name',{'-th/3-fun-1-',2}}] )
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-th/3-fun-1-'}}] )
					      in  let <FieldList1> =
						      %% Line 769
						      call 'lists':'foldl'
							  (_cor24, %% Line 779
								   [], %% Line 780
								       FieldList0)
						  in  do  %% Line 781
							  apply 'check_multi_field'/4
							      (RName, Line, KeyList, %% Line 782
										     9)
							  do  %% Line 783
							      apply 'check_undef_field'/5
								  (RName, Line, KeyList, FieldList0, %% Line 784
												     8)
							      %% Line 785
							      {{'tuple',Line,[{'atom',Line,RName}|FieldList1]},NewB}
					  %% Line 786
					  <_cor55> when 'true' ->
					      %% Line 787
					      call 'erlang':'throw'
						  ({'error',Line,{7,RName}})
					end
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor11})
			  -| ['compiler_generated'] )
		      end
	  %% Line 789
	  <{'match',Line,_cor56,_cor57},_cor58,_cor59> when 'true' ->
	      %% Line 790
	      call 'erlang':'throw'
		  ({'error',Line,4})
	  %% Line 791
	  <{'atom',Line,A},B,_X_OB> when 'true' ->
	      %% Line 792
	      case call 'erlang':'atom_to_list'
		       (A) of
		%% Line 793
		<[36|NL]> when 'true' ->
		    let <_cor27> =
			catch
			    %% Line 794
			    call 'erlang':'list_to_integer'
				(NL)
		    in  %% Line 794
			case _cor27 of
			  %% Line 795
			  <N>
			      when call 'erlang':'is_integer'
				    (_cor27) ->
			      %% Line 796
			      call 'erlang':'throw'
				  ({'error',Line,{10,A}})
			  %% Line 797
			  <_cor60> when 'true' ->
			      %% Line 798
			      {{'atom',Line,A},B}
			end
		%% Line 800
		<_cor61> when 'true' ->
		    %% Line 801
		    {{'atom',Line,A},B}
	      end
	  %% Line 803
	  <{'bin_element',_X_Line0,{'var',Line,A},_cor62,_cor63},_cor64,_cor65> when 'true' ->
	      %% Line 804
	      call 'erlang':'throw'
		  ({'error',Line,{11,A}})
	  %% Line 806
	  <{'var',Line,Name},B,OB> when 'true' ->
	      do  %% Line 807
		  apply 'warn_var_clash'/3
		      (Line, Name, OB)
		  %% Line 808
		  case apply 'lkup_bind'/2
			   (Name, B) of
		    %% Line 809
		    <'undefined'> when 'true' ->
			let <NewB> =
			    %% Line 810
			    apply 'new_bind'/2
				(Name, B)
			in  let <_cor31> =
				%% Line 811
				apply 'lkup_bind'/2
				    (Name, NewB)
			    in  %% Line 811
				{{'atom',Line,_cor31},NewB}
		    %% Line 812
		    <Trans> when 'true' ->
			%% Line 813
			{{'atom',Line,Trans},B}
		  end
	  %% Line 815
	  <[H|T],B,OB> when 'true' ->
	      %% Line 816
	      case apply 'th'/3
		       (H, B, OB) of
		<{NH,NB}> when 'true' ->
		    %% Line 817
		    case apply 'th'/3
			     (T, NB, OB) of
		      <{NT,NNB}> when 'true' ->
			  %% Line 818
			  {[NH|NT],NNB}
		      ( <_cor34> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor34})
			-| ['compiler_generated'] )
		    end
		( <_cor33> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 819
	  <T,B,OB>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor35> =
		  %% Line 820
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 820
		  case apply 'th'/3
			   (_cor35, B, OB) of
		    <{L,NB}> when 'true' ->
			let <_cor37> =
			    %% Line 821
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 821
			    {_cor37,NB}
		    ( <_cor36> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor36})
		      -| ['compiler_generated'] )
		  end
	  %% Line 822
	  <Nonstruct,B,_X_OB> when 'true' ->
	      %% Line 823
	      {Nonstruct,B}
	end
'warn_var_clash'/3 =
    %% Line 825
    fun (_cor2,_cor1,_cor0) ->
	%% Line 826
	case call 'gb_sets':'is_member'
		 (_cor1, _cor0) of
	  %% Line 827
	  <'true'> when 'true' ->
	      %% Line 828
	      apply 'add_warning'/2
		  (_cor2, {50,_cor1})
	  %% Line 829
	  <_cor7> when 'true' ->
	      %% Line 830
	      'ok'
	end
'check_multi_field'/4 =
    %% Line 834
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor9,_cor10,[],_cor11> when 'true' ->
	      %% Line 835
	      'ok'
	  %% Line 836
	  <RName,Line,[{Key,_cor12}|T],ErrCode> when 'true' ->
	      %% Line 837
	      case call 'lists':'keymember'
		       (Key, 1, T) of
		%% Line 838
		<'true'> when 'true' ->
		    %% Line 839
		    call 'erlang':'throw'
			({'error',Line,{ErrCode,RName,Key}})
		%% Line 840
		<'false'> when 'true' ->
		    %% Line 841
		    apply 'check_multi_field'/4
			(RName, Line, T, ErrCode)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'check_multi_field',4}}] )
	    -| ['compiler_generated'] )
	end
'check_undef_field'/5 =
    %% Line 843
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor11,_cor12,[],_cor13,_cor14> when 'true' ->
	      %% Line 844
	      'ok'
	  %% Line 845
	  <RName,Line,[{Key,_cor15}|T],FieldList,ErrCode> when 'true' ->
	      %% Line 846
	      case call 'lists':'keymember'
		       (Key, 1, FieldList) of
		%% Line 847
		<'true'> when 'true' ->
		    %% Line 848
		    apply 'check_undef_field'/5
			(RName, Line, T, FieldList, ErrCode)
		%% Line 849
		<'false'> when 'true' ->
		    %% Line 850
		    call 'erlang':'throw'
			({'error',Line,{ErrCode,RName,Key}})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'check_undef_field',5}}] )
	    -| ['compiler_generated'] )
	end
'cre_bind'/0 =
    %% Line 853
    fun () ->
	%% Line 854
	{1,[{'_','_'}]}
'lkup_bind'/2 =
    %% Line 856
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{_cor5,List}> when 'true' ->
	      %% Line 857
	      case call 'lists':'keysearch'
		       (Name, 1, List) of
		%% Line 858
		<{'value',{_cor6,Trans}}>
		    when call 'erlang':'=:='
			  (_cor6,
			   Name) ->
		    %% Line 859
		    Trans
		%% Line 860
		<_cor7> when 'true' ->
		    %% Line 861
		    'undefined'
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'lkup_bind',2}}] )
	    -| ['compiler_generated'] )
	end
'new_bind'/2 =
    %% Line 864
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Name,Trans},{Next,L}> when 'true' ->
	      %% Line 865
	      {Next,[{Name,Trans}|L]}
	  %% Line 866
	  <Name,{Next,L}> when 'true' ->
	      let <_cor2> =
		  %% Line 867
		  call 'erlang':'integer_to_list'
		      (Next)
	      in  let <Trans> =
		      %% Line 867
		      call 'erlang':'list_to_atom'
			  ([36|_cor2])
		  in  let <_cor4> =
			  %% Line 868
			  call 'erlang':'+'
			      (Next, 1)
		      in  %% Line 868
			  {_cor4,[{Name,Trans}|L]}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'new_bind',2}}] )
	    -| ['compiler_generated'] )
	end
'translate_language_element'/1 =
    %% Line 870
    fun (_cor0) ->
	%% Line 883
	case call 'lists':'keysearch'
		 (_cor0, 1, [{'lc',[108|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]}|[{'bc',[98|[105|[110|[97|[114|[121|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]}|[{'block',[98|[101|[103|[105|[110|[47|[101|[110|[100|[32|[98|[108|[111|[99|[107]]]]]]]]]]]]]]]}|[{'if',[105|[102]]}|[{'case',[99|[97|[115|[101]]]]}|[{'receive',[114|[101|[99|[101|[105|[118|[101]]]]]]]}|[{'try',[116|[114|[121]]]}|[{'catch',[99|[97|[116|[99|[104]]]]]}|[{'match',[109|[97|[116|[99|[104|[32|[40|[61|[41]]]]]]]]]}|[{'remote',[101|[120|[116|[101|[114|[110|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]]}]]]]]]]]]]) of
	  %% Line 884
	  <{'value',{_cor4,String}}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor0) ->
	      %% Line 885
	      String
	  %% Line 886
	  <_cor5> when 'true' ->
	      %% Line 887
	      call 'erlang':'atom_to_list'
		  (_cor0)
	end
'old_bool_test'/2 =
    %% Line 890
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'atom',1> when 'true' ->
	      'is_atom'
	  %% Line 891
	  <'float',1> when 'true' ->
	      'is_float'
	  %% Line 892
	  <'integer',1> when 'true' ->
	      'is_integer'
	  %% Line 893
	  <'list',1> when 'true' ->
	      'is_list'
	  %% Line 894
	  <'number',1> when 'true' ->
	      'is_number'
	  %% Line 895
	  <'pid',1> when 'true' ->
	      'is_pid'
	  %% Line 896
	  <'port',1> when 'true' ->
	      'is_port'
	  %% Line 897
	  <'reference',1> when 'true' ->
	      'is_reference'
	  %% Line 898
	  <'tuple',1> when 'true' ->
	      'is_tuple'
	  %% Line 899
	  <'binary',1> when 'true' ->
	      'is_binary'
	  %% Line 900
	  <'function',1> when 'true' ->
	      'is_function'
	  %% Line 901
	  <'record',2> when 'true' ->
	      'is_record'
	  %% Line 902
	  <_cor4,_cor5> when 'true' ->
	      'undefined'
	end
'bool_test'/2 =
    %% Line 904
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'is_atom',1> when 'true' ->
	      'true'
	  %% Line 905
	  <'is_float',1> when 'true' ->
	      'true'
	  %% Line 906
	  <'is_integer',1> when 'true' ->
	      'true'
	  %% Line 907
	  <'is_list',1> when 'true' ->
	      'true'
	  %% Line 908
	  <'is_number',1> when 'true' ->
	      'true'
	  %% Line 909
	  <'is_pid',1> when 'true' ->
	      'true'
	  %% Line 910
	  <'is_port',1> when 'true' ->
	      'true'
	  %% Line 911
	  <'is_reference',1> when 'true' ->
	      'true'
	  %% Line 912
	  <'is_tuple',1> when 'true' ->
	      'true'
	  %% Line 913
	  <'is_map',1> when 'true' ->
	      'true'
	  %% Line 914
	  <'is_binary',1> when 'true' ->
	      'true'
	  %% Line 915
	  <'is_function',1> when 'true' ->
	      'true'
	  %% Line 916
	  <'is_record',2> when 'true' ->
	      'true'
	  %% Line 917
	  <'is_seq_trace',0> when 'true' ->
	      'true'
	  %% Line 918
	  <_cor4,_cor5> when 'true' ->
	      'false'
	end
'real_guard_function'/2 =
    %% Line 920
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'abs',1> when 'true' ->
	      'true'
	  %% Line 921
	  <'element',2> when 'true' ->
	      'true'
	  %% Line 922
	  <'hd',1> when 'true' ->
	      'true'
	  %% Line 923
	  <'length',1> when 'true' ->
	      'true'
	  %% Line 924
	  <'node',0> when 'true' ->
	      'true'
	  %% Line 925
	  <'node',1> when 'true' ->
	      'true'
	  %% Line 926
	  <'round',1> when 'true' ->
	      'true'
	  %% Line 927
	  <'size',1> when 'true' ->
	      'true'
	  %% Line 928
	  <'map_size',1> when 'true' ->
	      'true'
	  %% Line 929
	  <'tl',1> when 'true' ->
	      'true'
	  %% Line 930
	  <'trunc',1> when 'true' ->
	      'true'
	  %% Line 931
	  <'self',0> when 'true' ->
	      'true'
	  %% Line 932
	  <'float',1> when 'true' ->
	      'true'
	  %% Line 933
	  <_cor4,_cor5> when 'true' ->
	      'false'
	end
'pseudo_guard_function'/2 =
    %% Line 935
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'get_tcw',0> when 'true' ->
	      'true'
	  %% Line 936
	  <_cor4,_cor5> when 'true' ->
	      'false'
	end
'guard_function'/2 =
    %% Line 938
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 939
	    apply 'real_guard_function'/2
		(_cor1, _cor0)
	in  let <_cor2> =
		%% Line 939
		apply 'pseudo_guard_function'/2
		    (_cor1, _cor0)
	    in  %% Line 939
		call 'erlang':'or'
		    (_cor3, _cor2)
'action_function'/2 =
    %% Line 941
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'set_seq_token',2> when 'true' ->
	      'true'
	  %% Line 942
	  <'get_seq_token',0> when 'true' ->
	      'true'
	  %% Line 943
	  <'message',1> when 'true' ->
	      'true'
	  %% Line 944
	  <'return_trace',0> when 'true' ->
	      'true'
	  %% Line 945
	  <'exception_trace',0> when 'true' ->
	      'true'
	  %% Line 946
	  <'process_dump',0> when 'true' ->
	      'true'
	  %% Line 947
	  <'enable_trace',1> when 'true' ->
	      'true'
	  %% Line 948
	  <'enable_trace',2> when 'true' ->
	      'true'
	  %% Line 949
	  <'disable_trace',1> when 'true' ->
	      'true'
	  %% Line 950
	  <'disable_trace',2> when 'true' ->
	      'true'
	  %% Line 951
	  <'display',1> when 'true' ->
	      'true'
	  %% Line 952
	  <'caller',0> when 'true' ->
	      'true'
	  %% Line 953
	  <'set_tcw',1> when 'true' ->
	      'true'
	  %% Line 954
	  <'silent',1> when 'true' ->
	      'true'
	  %% Line 955
	  <'trace',2> when 'true' ->
	      'true'
	  %% Line 956
	  <'trace',3> when 'true' ->
	      'true'
	  %% Line 957
	  <_cor4,_cor5> when 'true' ->
	      'false'
	end
'bool_operator'/2 =
    %% Line 959
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'and',2> when 'true' ->
	      %% Line 960
	      'true'
	  %% Line 961
	  <'or',2> when 'true' ->
	      %% Line 962
	      'true'
	  %% Line 963
	  <'xor',2> when 'true' ->
	      %% Line 964
	      'true'
	  %% Line 965
	  <'not',1> when 'true' ->
	      %% Line 966
	      'true'
	  %% Line 967
	  <'andalso',2> when 'true' ->
	      %% Line 968
	      'true'
	  %% Line 969
	  <'orelse',2> when 'true' ->
	      %% Line 970
	      'true'
	  %% Line 971
	  <_cor4,_cor5> when 'true' ->
	      %% Line 972
	      'false'
	end
'arith_operator'/2 =
    %% Line 974
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'+',1> when 'true' ->
	      %% Line 975
	      'true'
	  %% Line 976
	  <'+',2> when 'true' ->
	      %% Line 977
	      'true'
	  %% Line 978
	  <'-',1> when 'true' ->
	      %% Line 979
	      'true'
	  %% Line 980
	  <'-',2> when 'true' ->
	      %% Line 981
	      'true'
	  %% Line 982
	  <'*',2> when 'true' ->
	      %% Line 983
	      'true'
	  %% Line 984
	  <'/',2> when 'true' ->
	      %% Line 985
	      'true'
	  %% Line 986
	  <'div',2> when 'true' ->
	      %% Line 987
	      'true'
	  %% Line 988
	  <'rem',2> when 'true' ->
	      %% Line 989
	      'true'
	  %% Line 990
	  <'band',2> when 'true' ->
	      %% Line 991
	      'true'
	  %% Line 992
	  <'bor',2> when 'true' ->
	      %% Line 993
	      'true'
	  %% Line 994
	  <'bxor',2> when 'true' ->
	      %% Line 995
	      'true'
	  %% Line 996
	  <'bnot',1> when 'true' ->
	      %% Line 997
	      'true'
	  %% Line 998
	  <'bsl',2> when 'true' ->
	      %% Line 999
	      'true'
	  %% Line 1000
	  <'bsr',2> when 'true' ->
	      %% Line 1001
	      'true'
	  %% Line 1002
	  <_cor4,_cor5> when 'true' ->
	      %% Line 1003
	      'false'
	end
'cmp_operator'/2 =
    %% Line 1005
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'>',2> when 'true' ->
	      %% Line 1006
	      'true'
	  %% Line 1007
	  <'>=',2> when 'true' ->
	      %% Line 1008
	      'true'
	  %% Line 1009
	  <'<',2> when 'true' ->
	      %% Line 1010
	      'true'
	  %% Line 1011
	  <'=<',2> when 'true' ->
	      %% Line 1012
	      'true'
	  %% Line 1013
	  <'==',2> when 'true' ->
	      %% Line 1014
	      'true'
	  %% Line 1015
	  <'=:=',2> when 'true' ->
	      %% Line 1016
	      'true'
	  %% Line 1017
	  <'/=',2> when 'true' ->
	      %% Line 1018
	      'true'
	  %% Line 1019
	  <'=/=',2> when 'true' ->
	      %% Line 1020
	      'true'
	  %% Line 1021
	  <_cor4,_cor5> when 'true' ->
	      %% Line 1022
	      'false'
	end
'is_operator'/3 =
    %% Line 1024
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1025
	    apply 'bool_operator'/2
		(_cor2, _cor1)
	in  let <_cor4> =
		%% Line 1025
		apply 'arith_operator'/2
		    (_cor2, _cor1)
	    in  let <_cor6> =
		    %% Line 1025
		    call 'erlang':'or'
			(_cor5, _cor4)
		in  let <_cor3> =
			%% Line 1025
			apply 'cmp_operator'/2
			    (_cor2, _cor1)
		    in  %% Line 1025
			call 'erlang':'or'
			    (_cor6, _cor3)
'is_imported_from_erlang'/3 =
    %% Line 1027
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1028
	    apply 'real_guard_function'/2
		(_cor2, _cor1)
	in  let <_cor6> =
		%% Line 1028
		apply 'bool_test'/2
		    (_cor2, _cor1)
	    in  let <_cor8> =
		    %% Line 1028
		    call 'erlang':'or'
			(_cor7, _cor6)
		in  let <_cor5> =
			%% Line 1028
			apply 'bool_operator'/2
			    (_cor2, _cor1)
		    in  let <_cor9> =
			    %% Line 1028
			    call 'erlang':'or'
				(_cor8, _cor5)
			in  let <_cor4> =
				%% Line 1029
				apply 'arith_operator'/2
				    (_cor2, _cor1)
			    in  let <_cor10> =
				    %% Line 1028
				    call 'erlang':'or'
					(_cor9, _cor4)
				in  let <_cor3> =
					%% Line 1029
					apply 'cmp_operator'/2
					    (_cor2, _cor1)
				    in  %% Line 1029
					call 'erlang':'or'
					    (_cor10, _cor3)
'is_ms_function'/3 =
    %% Line 1031
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,A,'body'> when 'true' ->
	      let <_cor5> =
		  %% Line 1032
		  apply 'action_function'/2
		      (X, A)
	      in  let <_cor4> =
		      %% Line 1032
		      apply 'guard_function'/2
			  (X, A)
		  in  let <_cor6> =
			  %% Line 1032
			  call 'erlang':'or'
			      (_cor5, _cor4)
		      in  let <_cor3> =
			      %% Line 1032
			      apply 'bool_test'/2
				  (X, A)
			  in  %% Line 1032
			      call 'erlang':'or'
				  (_cor6, _cor3)
	  %% Line 1034
	  <X,A,'guard'> when 'true' ->
	      let <_cor8> =
		  %% Line 1035
		  apply 'guard_function'/2
		      (X, A)
	      in  let <_cor7> =
		      %% Line 1035
		      apply 'bool_test'/2
			  (X, A)
		  in  %% Line 1035
		      call 'erlang':'or'
			  (_cor8, _cor7)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'is_ms_function',3}}] )
	    -| ['compiler_generated'] )
	end
'fixup_environment'/2 =
    %% Line 1037
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,B>
	      when call 'erlang':'is_list'
		    (L) ->
	      let <_cor4> =
		  %% Line 1038
		  ( fun (_cor2) ->
			%% Line 1039
			apply 'fixup_environment'/2
			    (_cor2, B)
		    -| [{'id',{0,0,'-fixup_environment/2-fun-0-'}}] )
	      in  %% Line 1038
		  call 'lists':'map'
		      (_cor4, %% Line 1041
			      L)
	  %% Line 1042
	  <{'var',Line,Name},B> when 'true' ->
	      %% Line 1043
	      case call 'lists':'keysearch'
		       (Name, 1, B) of
		%% Line 1044
		<{'value',{_cor14,Value}}>
		    when call 'erlang':'=:='
			  (_cor14,
			   Name) ->
		    %% Line 1045
		    apply 'freeze'/2
			(Line, Value)
		%% Line 1046
		<_cor15> when 'true' ->
		    let <_cor5> =
			%% Line 1047
			call 'erlang':'atom_to_list'
			    (Name)
		    in  %% Line 1047
			call 'erlang':'throw'
			    ({'error',Line,{6,_cor5}})
	      end
	  %% Line 1049
	  <T,B>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor10> =
		  %% Line 1051
		  ( fun (_cor8) ->
			%% Line 1052
			apply 'fixup_environment'/2
			    (_cor8, B)
		    -| [{'id',{0,0,'-fixup_environment/2-fun-1-'}}] )
	      in  let <_cor7> =
		      %% Line 1054
		      call 'erlang':'tuple_to_list'
			  (T)
		  in  let <_cor11> =
			  %% Line 1051
			  call 'lists':'map'
			      (_cor10, _cor7)
		      in  %% Line 1050
			  call 'erlang':'list_to_tuple'
			      (_cor11)
	  %% Line 1055
	  <Other,_X_B> when 'true' ->
	      %% Line 1056
	      Other
	end
'freeze'/2 =
    %% Line 1058
    fun (_cor1,_cor0) ->
	%% Line 1059
	{'frozen',_cor1,_cor0}
'normalise'/1 =
    %% Line 1063
    fun (_cor0) ->
	case _cor0 of
	  <{'frozen',_cor12,Term}> when 'true' ->
	      %% Line 1064
	      Term
	  %% Line 1065
	  <{'char',_cor13,C}> when 'true' ->
	      C
	  %% Line 1066
	  <{'integer',_cor14,I}> when 'true' ->
	      I
	  %% Line 1067
	  <{'float',_cor15,F}> when 'true' ->
	      F
	  %% Line 1068
	  <{'atom',_cor16,A}> when 'true' ->
	      A
	  %% Line 1069
	  <{'string',_cor17,S}> when 'true' ->
	      S
	  %% Line 1070
	  <{'nil',_cor18}> when 'true' ->
	      []
	  %% Line 1071
	  <{'bin',_cor19,Fs}> when 'true' ->
	      let <_cor6> =
		  %% Line 1074
		  ( fun (_cor3,_cor2) ->
			let <_cor1> =
			    %% Line 1075
			    apply 'normalise'/1
				(_cor3)
			in  %% Line 1075
			    {'value',_cor1,[]}
		    -| [{'id',{0,0,'-normalise/1-fun-0-'}}] )
	      in  %% Line 1072
		  case %% Line 1073
		       call 'eval_bits':'expr_grp'
			   (Fs, [], _cor6, %% Line 1076
					   [], %% Line 1076
					       'true') of
		    <{'value',B,_cor21}> when 'true' ->
			%% Line 1077
			B
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1078
	  <{'cons',_cor22,Head,Tail}> when 'true' ->
	      let <_cor8> =
		  %% Line 1079
		  apply 'normalise'/1
		      (Head)
	      in  let <_cor9> =
		      %% Line 1079
		      apply 'normalise'/1
			  (Tail)
		  in  %% Line 1079
		      [_cor8|_cor9]
	  %% Line 1080
	  <{'tuple',_cor23,Args}> when 'true' ->
	      let <_cor10> =
		  %% Line 1081
		  apply 'normalise_list'/1
		      (Args)
	      in  %% Line 1081
		  call 'erlang':'list_to_tuple'
		      (_cor10)
	  %% Line 1083
	  <{'op',_cor24,'+',{'char',_cor25,I}}> when 'true' ->
	      I
	  %% Line 1084
	  <{'op',_cor26,'+',{'integer',_cor27,I}}> when 'true' ->
	      I
	  %% Line 1085
	  <{'op',_cor28,'+',{'float',_cor29,F}}> when 'true' ->
	      F
	  %% Line 1086
	  <{'op',_cor30,'-',{'char',_cor31,I}}> when 'true' ->
	      call 'erlang':'-'
		  (I)
	  %% Line 1087
	  <{'op',_cor32,'-',{'integer',_cor33,I}}> when 'true' ->
	      call 'erlang':'-'
		  (I)
	  %% Line 1088
	  <{'op',_cor34,'-',{'float',_cor35,F}}> when 'true' ->
	      call 'erlang':'-'
		  (F)
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'normalise',1}}] )
	    -| ['compiler_generated'] )
	end
'normalise_list'/1 =
    %% Line 1090
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1091
		  apply 'normalise'/1
		      (H)
	      in  let <_cor2> =
		      %% Line 1091
		      apply 'normalise_list'/1
			  (T)
		  in  %% Line 1091
		      [_cor1|_cor2]
	  %% Line 1092
	  <[]> when 'true' ->
	      %% Line 1093
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'normalise_list',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ms_transform')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ms_transform', _cor0)
end