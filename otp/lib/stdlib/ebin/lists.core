module 'lists' ['all'/2,
		'any'/2,
		'append'/1,
		'append'/2,
		'concat'/1,
		'delete'/2,
		'droplast'/1,
		'dropwhile'/2,
		'duplicate'/2,
		'filter'/2,
		'filtermap'/2,
		'flatlength'/1,
		'flatmap'/2,
		'flatten'/1,
		'flatten'/2,
		'foldl'/3,
		'foldr'/3,
		'foreach'/2,
		'keydelete'/3,
		'keyfind'/3,
		'keymap'/3,
		'keymember'/3,
		'keymerge'/3,
		'keyreplace'/4,
		'keysearch'/3,
		'keysort'/2,
		'keystore'/4,
		'keytake'/3,
		'last'/1,
		'map'/2,
		'mapfoldl'/3,
		'mapfoldr'/3,
		'max'/1,
		'member'/2,
		'merge'/1,
		'merge'/2,
		'merge'/3,
		'merge3'/3,
		'min'/1,
		'module_info'/0,
		'module_info'/1,
		'nth'/2,
		'nthtail'/2,
		'partition'/2,
		'prefix'/2,
		'reverse'/1,
		'reverse'/2,
		'rkeymerge'/3,
		'rmerge'/2,
		'rmerge'/3,
		'rmerge3'/3,
		'rukeymerge'/3,
		'rumerge'/2,
		'rumerge'/3,
		'rumerge3'/3,
		'seq'/2,
		'seq'/3,
		'sort'/1,
		'sort'/2,
		'split'/2,
		'splitwith'/2,
		'sublist'/2,
		'sublist'/3,
		'subtract'/2,
		'suffix'/2,
		'sum'/1,
		'takewhile'/2,
		'ukeymerge'/3,
		'ukeysort'/2,
		'umerge'/1,
		'umerge'/2,
		'umerge'/3,
		'umerge3'/3,
		'unzip'/1,
		'unzip3'/1,
		'usort'/1,
		'usort'/2,
		'zf'/2,
		'zip'/2,
		'zip3'/3,
		'zipwith'/3,
		'zipwith3'/4]
    attributes [%% Line 47
		'spec' =
		    %% Line 47
		    [{{'keyfind',3},[{'type',47,'bounded_fun',[{'type',47,'fun',[{'type',47,'product',[{'var',47,'Key'}|[{'var',47,'N'}|[{'var',47,'TupleList'}]]]}|[{'type',47,'union',[{'var',47,'Tuple'}|[{'atom',47,'false'}]]}]]}|[[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'Key'}|[{'type',48,'term',[]}]]]]}|[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'N'}|[{'type',49,'pos_integer',[]}]]]]}|[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'TupleList'}|[{'type',50,'list',[{'var',50,'Tuple'}]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Tuple'}|[{'type',51,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'keymember',3},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'Key'}|[{'var',57,'N'}|[{'var',57,'TupleList'}]]]}|[{'type',57,'boolean',[]}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Key'}|[{'type',58,'term',[]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'N'}|[{'type',59,'pos_integer',[]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'TupleList'}|[{'type',60,'list',[{'var',60,'Tuple'}]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Tuple'}|[{'type',61,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'keysearch',3},[{'type',67,'bounded_fun',[{'type',67,'fun',[{'type',67,'product',[{'var',67,'Key'}|[{'var',67,'N'}|[{'var',67,'TupleList'}]]]}|[{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'value'}|[{'var',67,'Tuple'}]]}|[{'atom',67,'false'}]]}]]}|[[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Key'}|[{'type',68,'term',[]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'N'}|[{'type',69,'pos_integer',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'TupleList'}|[{'type',70,'list',[{'var',70,'Tuple'}]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Tuple'}|[{'type',71,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 77
		'spec' =
		    %% Line 77
		    [{{'member',2},[{'type',77,'bounded_fun',[{'type',77,'fun',[{'type',77,'product',[{'var',77,'Elem'}|[{'var',77,'List'}]]}|[{'type',77,'boolean',[]}]]}|[[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Elem'}|[{'var',78,'T'}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'List'}|[{'type',79,'list',[{'var',79,'T'}]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'T'}|[{'type',80,'term',[]}]]]]}]]]]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'reverse',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'List1'}|[{'var',86,'Tail'}]]}|[{'var',86,'List2'}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'List1'}|[{'type',87,'list',[{'var',87,'T'}]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Tail'}|[{'type',88,'term',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'List2'}|[{'type',89,'list',[{'var',89,'T'}]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'T'}|[{'type',90,'term',[]}]]]]}]]]]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'append',2},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'List1'}|[{'var',108,'List2'}]]}|[{'var',108,'List3'}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'List1'}|[{'type',109,'list',[{'var',109,'T'}]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'List2'}|[{'type',110,'list',[{'var',110,'T'}]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'List3'}|[{'type',111,'list',[{'var',111,'T'}]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'T'}|[{'type',112,'term',[]}]]]]}]]]]]]}]}],
		%% Line 118
		'spec' =
		    %% Line 118
		    [{{'append',1},[{'type',118,'bounded_fun',[{'type',118,'fun',[{'type',118,'product',[{'var',118,'ListOfLists'}]}|[{'var',118,'List1'}]]}|[[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'ListOfLists'}|[{'type',119,'list',[{'var',119,'List'}]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'List'}|[{'type',120,'list',[{'var',120,'T'}]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'List1'}|[{'type',121,'list',[{'var',121,'T'}]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'T'}|[{'type',122,'term',[]}]]]]}]]]]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'subtract',2},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'List1'}|[{'var',130,'List2'}]]}|[{'var',130,'List3'}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'List1'}|[{'type',131,'list',[{'var',131,'T'}]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'List2'}|[{'type',132,'list',[{'var',132,'T'}]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'List3'}|[{'type',133,'list',[{'var',133,'T'}]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'T'}|[{'type',134,'term',[]}]]]]}]]]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'reverse',1},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'List1'}]}|[{'var',140,'List2'}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'List1'}|[{'type',141,'list',[{'var',141,'T'}]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'List2'}|[{'type',142,'list',[{'var',142,'T'}]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'T'}|[{'type',143,'term',[]}]]]]}]]]]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'nth',2},[{'type',162,'bounded_fun',[{'type',162,'fun',[{'type',162,'product',[{'var',162,'N'}|[{'var',162,'List'}]]}|[{'var',162,'Elem'}]]}|[[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'N'}|[{'type',163,'pos_integer',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'List'}|[{'type',164,'nonempty_list',[{'var',164,'T'}]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Elem'}|[{'var',165,'T'}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'T'}|[{'type',166,'term',[]}]]]]}]]]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'nthtail',2},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'N'}|[{'var',172,'List'}]]}|[{'var',172,'Tail'}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'N'}|[{'type',173,'non_neg_integer',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'List'}|[{'type',174,'nonempty_list',[{'var',174,'T'}]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Tail'}|[{'type',175,'list',[{'var',175,'T'}]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'T'}|[{'type',176,'term',[]}]]]]}]]]]]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'prefix',2},[{'type',185,'bounded_fun',[{'type',185,'fun',[{'type',185,'product',[{'var',185,'List1'}|[{'var',185,'List2'}]]}|[{'type',185,'boolean',[]}]]}|[[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'List1'}|[{'type',186,'list',[{'var',186,'T'}]}]]]]}|[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'List2'}|[{'type',187,'list',[{'var',187,'T'}]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'T'}|[{'type',188,'term',[]}]]]]}]]]]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'suffix',2},[{'type',197,'bounded_fun',[{'type',197,'fun',[{'type',197,'product',[{'var',197,'List1'}|[{'var',197,'List2'}]]}|[{'type',197,'boolean',[]}]]}|[[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'List1'}|[{'type',198,'list',[{'var',198,'T'}]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'List2'}|[{'type',199,'list',[{'var',199,'T'}]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'T'}|[{'type',200,'term',[]}]]]]}]]]]]}]}],
		%% Line 208
		'spec' =
		    %% Line 208
		    [{{'droplast',1},[{'type',208,'bounded_fun',[{'type',208,'fun',[{'type',208,'product',[{'var',208,'List'}]}|[{'var',208,'InitList'}]]}|[[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'List'}|[{'type',209,'nonempty_list',[{'var',209,'T'}]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'InitList'}|[{'type',210,'list',[{'var',210,'T'}]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'T'}|[{'type',211,'term',[]}]]]]}]]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'last',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'List'}]}|[{'var',221,'Last'}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'List'}|[{'type',222,'nonempty_list',[{'var',222,'T'}]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Last'}|[{'var',223,'T'}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'T'}|[{'type',224,'term',[]}]]]]}]]]]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'seq',2},[{'type',236,'bounded_fun',[{'type',236,'fun',[{'type',236,'product',[{'var',236,'From'}|[{'var',236,'To'}]]}|[{'var',236,'Seq'}]]}|[[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'From'}|[{'type',237,'integer',[]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'To'}|[{'type',238,'integer',[]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Seq'}|[{'type',239,'list',[{'type',239,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 254
		'spec' =
		    %% Line 254
		    [{{'seq',3},[{'type',254,'bounded_fun',[{'type',254,'fun',[{'type',254,'product',[{'var',254,'From'}|[{'var',254,'To'}|[{'var',254,'Incr'}]]]}|[{'var',254,'Seq'}]]}|[[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'From'}|[{'type',255,'integer',[]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'To'}|[{'type',256,'integer',[]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Incr'}|[{'type',257,'integer',[]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Seq'}|[{'type',258,'list',[{'type',258,'integer',[]}]}]]]]}]]]]]]}]}],
		%% Line 284
		'spec' =
		    %% Line 284
		    [{{'sum',1},[{'type',284,'bounded_fun',[{'type',284,'fun',[{'type',284,'product',[{'var',284,'List'}]}|[{'type',284,'number',[]}]]}|[[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'List'}|[{'type',285,'list',[{'type',285,'number',[]}]}]]]]}]]]}]}],
		%% Line 295
		'spec' =
		    %% Line 295
		    [{{'duplicate',2},[{'type',295,'bounded_fun',[{'type',295,'fun',[{'type',295,'product',[{'var',295,'N'}|[{'var',295,'Elem'}]]}|[{'var',295,'List'}]]}|[[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'N'}|[{'type',296,'non_neg_integer',[]}]]]]}|[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'Elem'}|[{'var',297,'T'}]]]]}|[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'List'}|[{'type',298,'list',[{'var',298,'T'}]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'T'}|[{'type',299,'term',[]}]]]]}]]]]]]}]}],
		%% Line 308
		'spec' =
		    %% Line 308
		    [{{'min',1},[{'type',308,'bounded_fun',[{'type',308,'fun',[{'type',308,'product',[{'var',308,'List'}]}|[{'var',308,'Min'}]]}|[[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'List'}|[{'type',309,'nonempty_list',[{'var',309,'T'}]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Min'}|[{'var',310,'T'}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'T'}|[{'type',311,'term',[]}]]]]}]]]]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'max',1},[{'type',321,'bounded_fun',[{'type',321,'fun',[{'type',321,'product',[{'var',321,'List'}]}|[{'var',321,'Max'}]]}|[[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'List'}|[{'type',322,'nonempty_list',[{'var',322,'T'}]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Max'}|[{'var',323,'T'}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'T'}|[{'type',324,'term',[]}]]]]}]]]]]}]}],
		%% Line 335
		'spec' =
		    %% Line 335
		    [{{'sublist',3},[{'type',335,'bounded_fun',[{'type',335,'fun',[{'type',335,'product',[{'var',335,'List1'}|[{'var',335,'Start'}|[{'var',335,'Len'}]]]}|[{'var',335,'List2'}]]}|[[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'List1'}|[{'type',336,'list',[{'var',336,'T'}]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'List2'}|[{'type',337,'list',[{'var',337,'T'}]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Start'}|[{'type',338,'pos_integer',[]}]]]]}|[{'type',339,'constraint',[{'atom',339,'is_subtype'}|[[{'var',339,'Len'}|[{'type',339,'non_neg_integer',[]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'T'}|[{'type',340,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 345
		'spec' =
		    %% Line 345
		    [{{'sublist',2},[{'type',345,'bounded_fun',[{'type',345,'fun',[{'type',345,'product',[{'var',345,'List1'}|[{'var',345,'Len'}]]}|[{'var',345,'List2'}]]}|[[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'List1'}|[{'type',346,'list',[{'var',346,'T'}]}]]]]}|[{'type',347,'constraint',[{'atom',347,'is_subtype'}|[[{'var',347,'List2'}|[{'type',347,'list',[{'var',347,'T'}]}]]]]}|[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'Len'}|[{'type',348,'non_neg_integer',[]}]]]]}|[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'T'}|[{'type',349,'term',[]}]]]]}]]]]]]}]}],
		%% Line 364
		'spec' =
		    %% Line 364
		    [{{'delete',2},[{'type',364,'bounded_fun',[{'type',364,'fun',[{'type',364,'product',[{'var',364,'Elem'}|[{'var',364,'List1'}]]}|[{'var',364,'List2'}]]}|[[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'Elem'}|[{'var',365,'T'}]]]]}|[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'List1'}|[{'type',366,'list',[{'var',366,'T'}]}]]]]}|[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'List2'}|[{'type',367,'list',[{'var',367,'T'}]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'T'}|[{'type',368,'term',[]}]]]]}]]]]]]}]}],
		%% Line 378
		'spec' =
		    %% Line 378
		    [{{'zip',2},[{'type',378,'bounded_fun',[{'type',378,'fun',[{'type',378,'product',[{'var',378,'List1'}|[{'var',378,'List2'}]]}|[{'var',378,'List3'}]]}|[[{'type',379,'constraint',[{'atom',379,'is_subtype'}|[[{'var',379,'List1'}|[{'type',379,'list',[{'var',379,'A'}]}]]]]}|[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'List2'}|[{'type',380,'list',[{'var',380,'B'}]}]]]]}|[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'List3'}|[{'type',381,'list',[{'type',381,'tuple',[{'var',381,'A'}|[{'var',381,'B'}]]}]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'A'}|[{'type',382,'term',[]}]]]]}|[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'B'}|[{'type',383,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 391
		'spec' =
		    %% Line 391
		    [{{'unzip',1},[{'type',391,'bounded_fun',[{'type',391,'fun',[{'type',391,'product',[{'var',391,'List1'}]}|[{'type',391,'tuple',[{'var',391,'List2'}|[{'var',391,'List3'}]]}]]}|[[{'type',392,'constraint',[{'atom',392,'is_subtype'}|[[{'var',392,'List1'}|[{'type',392,'list',[{'type',392,'tuple',[{'var',392,'A'}|[{'var',392,'B'}]]}]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'List2'}|[{'type',393,'list',[{'var',393,'A'}]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'List3'}|[{'type',394,'list',[{'var',394,'B'}]}]]]]}|[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'A'}|[{'type',395,'term',[]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'B'}|[{'type',396,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 406
		'spec' =
		    %% Line 406
		    [{{'zip3',3},[{'type',406,'bounded_fun',[{'type',406,'fun',[{'type',406,'product',[{'var',406,'List1'}|[{'var',406,'List2'}|[{'var',406,'List3'}]]]}|[{'var',406,'List4'}]]}|[[{'type',407,'constraint',[{'atom',407,'is_subtype'}|[[{'var',407,'List1'}|[{'type',407,'list',[{'var',407,'A'}]}]]]]}|[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'List2'}|[{'type',408,'list',[{'var',408,'B'}]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'List3'}|[{'type',409,'list',[{'var',409,'C'}]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'List4'}|[{'type',410,'list',[{'type',410,'tuple',[{'var',410,'A'}|[{'var',410,'B'}|[{'var',410,'C'}]]]}]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'A'}|[{'type',411,'term',[]}]]]]}|[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'B'}|[{'type',412,'term',[]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'C'}|[{'type',413,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 421
		'spec' =
		    %% Line 421
		    [{{'unzip3',1},[{'type',421,'bounded_fun',[{'type',421,'fun',[{'type',421,'product',[{'var',421,'List1'}]}|[{'type',421,'tuple',[{'var',421,'List2'}|[{'var',421,'List3'}|[{'var',421,'List4'}]]]}]]}|[[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'List1'}|[{'type',422,'list',[{'type',422,'tuple',[{'var',422,'A'}|[{'var',422,'B'}|[{'var',422,'C'}]]]}]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'List2'}|[{'type',423,'list',[{'var',423,'A'}]}]]]]}|[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'List3'}|[{'type',424,'list',[{'var',424,'B'}]}]]]]}|[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'List4'}|[{'type',425,'list',[{'var',425,'C'}]}]]]]}|[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'A'}|[{'type',426,'term',[]}]]]]}|[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'B'}|[{'type',427,'term',[]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'C'}|[{'type',428,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 440
		'spec' =
		    %% Line 440
		    [{{'zipwith',3},[{'type',440,'bounded_fun',[{'type',440,'fun',[{'type',440,'product',[{'var',440,'Combine'}|[{'var',440,'List1'}|[{'var',440,'List2'}]]]}|[{'var',440,'List3'}]]}|[[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'Combine'}|[{'type',441,'fun',[{'type',441,'product',[{'var',441,'X'}|[{'var',441,'Y'}]]}|[{'var',441,'T'}]]}]]]]}|[{'type',442,'constraint',[{'atom',442,'is_subtype'}|[[{'var',442,'List1'}|[{'type',442,'list',[{'var',442,'X'}]}]]]]}|[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'List2'}|[{'type',443,'list',[{'var',443,'Y'}]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'List3'}|[{'type',444,'list',[{'var',444,'T'}]}]]]]}|[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'X'}|[{'type',445,'term',[]}]]]]}|[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'Y'}|[{'type',446,'term',[]}]]]]}|[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'T'}|[{'type',447,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 455
		'spec' =
		    %% Line 455
		    [{{'zipwith3',4},[{'type',455,'bounded_fun',[{'type',455,'fun',[{'type',455,'product',[{'var',455,'Combine'}|[{'var',455,'List1'}|[{'var',455,'List2'}|[{'var',455,'List3'}]]]]}|[{'var',455,'List4'}]]}|[[{'type',456,'constraint',[{'atom',456,'is_subtype'}|[[{'var',456,'Combine'}|[{'type',456,'fun',[{'type',456,'product',[{'var',456,'X'}|[{'var',456,'Y'}|[{'var',456,'Z'}]]]}|[{'var',456,'T'}]]}]]]]}|[{'type',457,'constraint',[{'atom',457,'is_subtype'}|[[{'var',457,'List1'}|[{'type',457,'list',[{'var',457,'X'}]}]]]]}|[{'type',458,'constraint',[{'atom',458,'is_subtype'}|[[{'var',458,'List2'}|[{'type',458,'list',[{'var',458,'Y'}]}]]]]}|[{'type',459,'constraint',[{'atom',459,'is_subtype'}|[[{'var',459,'List3'}|[{'type',459,'list',[{'var',459,'Z'}]}]]]]}|[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'List4'}|[{'type',460,'list',[{'var',460,'T'}]}]]]]}|[{'type',461,'constraint',[{'atom',461,'is_subtype'}|[[{'var',461,'X'}|[{'type',461,'term',[]}]]]]}|[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'Y'}|[{'type',462,'term',[]}]]]]}|[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'Z'}|[{'type',463,'term',[]}]]]]}|[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'T'}|[{'type',464,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 473
		'spec' =
		    %% Line 473
		    [{{'sort',1},[{'type',473,'bounded_fun',[{'type',473,'fun',[{'type',473,'product',[{'var',473,'List1'}]}|[{'var',473,'List2'}]]}|[[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'List1'}|[{'type',474,'list',[{'var',474,'T'}]}]]]]}|[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'List2'}|[{'type',475,'list',[{'var',475,'T'}]}]]]]}|[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'T'}|[{'type',476,'term',[]}]]]]}]]]]]}]}],
		%% Line 523
		'spec' =
		    %% Line 523
		    [{{'merge',1},[{'type',523,'bounded_fun',[{'type',523,'fun',[{'type',523,'product',[{'var',523,'ListOfLists'}]}|[{'var',523,'List1'}]]}|[[{'type',524,'constraint',[{'atom',524,'is_subtype'}|[[{'var',524,'ListOfLists'}|[{'type',524,'list',[{'var',524,'List'}]}]]]]}|[{'type',525,'constraint',[{'atom',525,'is_subtype'}|[[{'var',525,'List'}|[{'type',525,'list',[{'var',525,'T'}]}]]]]}|[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'List1'}|[{'type',526,'list',[{'var',526,'T'}]}]]]]}|[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'T'}|[{'type',527,'term',[]}]]]]}]]]]]]}]}],
		%% Line 535
		'spec' =
		    %% Line 535
		    [{{'merge3',3},[{'type',535,'bounded_fun',[{'type',535,'fun',[{'type',535,'product',[{'var',535,'List1'}|[{'var',535,'List2'}|[{'var',535,'List3'}]]]}|[{'var',535,'List4'}]]}|[[{'type',536,'constraint',[{'atom',536,'is_subtype'}|[[{'var',536,'List1'}|[{'type',536,'list',[{'var',536,'X'}]}]]]]}|[{'type',537,'constraint',[{'atom',537,'is_subtype'}|[[{'var',537,'List2'}|[{'type',537,'list',[{'var',537,'Y'}]}]]]]}|[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'List3'}|[{'type',538,'list',[{'var',538,'Z'}]}]]]]}|[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'List4'}|[{'type',539,'list',[{'paren_type',539,[{'type',539,'union',[{'var',539,'X'}|[{'var',539,'Y'}|[{'var',539,'Z'}]]]}]}]}]]]]}|[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'X'}|[{'type',540,'term',[]}]]]]}|[{'type',541,'constraint',[{'atom',541,'is_subtype'}|[[{'var',541,'Y'}|[{'type',541,'term',[]}]]]]}|[{'type',542,'constraint',[{'atom',542,'is_subtype'}|[[{'var',542,'Z'}|[{'type',542,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 554
		'spec' =
		    %% Line 554
		    [{{'rmerge3',3},[{'type',554,'fun',[{'type',554,'product',[{'type',554,'list',[{'var',554,'X'}]}|[{'type',554,'list',[{'var',554,'Y'}]}|[{'type',554,'list',[{'var',554,'Z'}]}]]]}|[{'type',554,'list',[{'paren_type',554,[{'type',554,'union',[{'var',554,'X'}|[{'var',554,'Y'}|[{'var',554,'Z'}]]]}]}]}]]}]}],
		%% Line 566
		'spec' =
		    %% Line 566
		    [{{'merge',2},[{'type',566,'bounded_fun',[{'type',566,'fun',[{'type',566,'product',[{'var',566,'List1'}|[{'var',566,'List2'}]]}|[{'var',566,'List3'}]]}|[[{'type',567,'constraint',[{'atom',567,'is_subtype'}|[[{'var',567,'List1'}|[{'type',567,'list',[{'var',567,'X'}]}]]]]}|[{'type',568,'constraint',[{'atom',568,'is_subtype'}|[[{'var',568,'List2'}|[{'type',568,'list',[{'var',568,'Y'}]}]]]]}|[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'List3'}|[{'type',569,'list',[{'paren_type',569,[{'type',569,'union',[{'var',569,'X'}|[{'var',569,'Y'}]]}]}]}]]]]}|[{'type',570,'constraint',[{'atom',570,'is_subtype'}|[[{'var',570,'X'}|[{'type',570,'term',[]}]]]]}|[{'type',571,'constraint',[{'atom',571,'is_subtype'}|[[{'var',571,'Y'}|[{'type',571,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 583
		'spec' =
		    %% Line 583
		    [{{'rmerge',2},[{'type',583,'fun',[{'type',583,'product',[{'type',583,'list',[{'var',583,'X'}]}|[{'type',583,'list',[{'var',583,'Y'}]}]]}|[{'type',583,'list',[{'paren_type',583,[{'type',583,'union',[{'var',583,'X'}|[{'var',583,'Y'}]]}]}]}]]}]}],
		%% Line 594
		'spec' =
		    %% Line 594
		    [{{'concat',1},[{'type',594,'bounded_fun',[{'type',594,'fun',[{'type',594,'product',[{'var',594,'Things'}]}|[{'type',594,'string',[]}]]}|[[{'type',595,'constraint',[{'atom',595,'is_subtype'}|[[{'var',595,'Things'}|[{'type',595,'list',[{'var',595,'Thing'}]}]]]]}|[{'type',596,'constraint',[{'atom',596,'is_subtype'}|[[{'var',596,'Thing'}|[{'type',596,'union',[{'type',596,'atom',[]}|[{'type',596,'integer',[]}|[{'type',596,'float',[]}|[{'type',596,'string',[]}]]]]}]]]]}]]]]}]}],
		%% Line 610
		'spec' =
		    %% Line 610
		    [{{'flatten',1},[{'type',610,'bounded_fun',[{'type',610,'fun',[{'type',610,'product',[{'var',610,'DeepList'}]}|[{'var',610,'List'}]]}|[[{'type',611,'constraint',[{'atom',611,'is_subtype'}|[[{'var',611,'DeepList'}|[{'type',611,'list',[{'type',611,'union',[{'type',611,'term',[]}|[{'var',611,'DeepList'}]]}]}]]]]}|[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'List'}|[{'type',612,'list',[{'type',612,'term',[]}]}]]]]}]]]]}]}],
		%% Line 617
		'spec' =
		    %% Line 617
		    [{{'flatten',2},[{'type',617,'bounded_fun',[{'type',617,'fun',[{'type',617,'product',[{'var',617,'DeepList'}|[{'var',617,'Tail'}]]}|[{'var',617,'List'}]]}|[[{'type',618,'constraint',[{'atom',618,'is_subtype'}|[[{'var',618,'DeepList'}|[{'type',618,'list',[{'type',618,'union',[{'type',618,'term',[]}|[{'var',618,'DeepList'}]]}]}]]]]}|[{'type',619,'constraint',[{'atom',619,'is_subtype'}|[[{'var',619,'Tail'}|[{'type',619,'list',[{'type',619,'term',[]}]}]]]]}|[{'type',620,'constraint',[{'atom',620,'is_subtype'}|[[{'var',620,'List'}|[{'type',620,'list',[{'type',620,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 635
		'spec' =
		    %% Line 635
		    [{{'flatlength',1},[{'type',635,'bounded_fun',[{'type',635,'fun',[{'type',635,'product',[{'var',635,'DeepList'}]}|[{'type',635,'non_neg_integer',[]}]]}|[[{'type',636,'constraint',[{'atom',636,'is_subtype'}|[[{'var',636,'DeepList'}|[{'type',636,'list',[{'type',636,'union',[{'type',636,'term',[]}|[{'var',636,'DeepList'}]]}]}]]]]}]]]}]}],
		%% Line 678
		'spec' =
		    %% Line 678
		    [{{'keydelete',3},[{'type',678,'bounded_fun',[{'type',678,'fun',[{'type',678,'product',[{'var',678,'Key'}|[{'var',678,'N'}|[{'var',678,'TupleList1'}]]]}|[{'var',678,'TupleList2'}]]}|[[{'type',679,'constraint',[{'atom',679,'is_subtype'}|[[{'var',679,'Key'}|[{'type',679,'term',[]}]]]]}|[{'type',680,'constraint',[{'atom',680,'is_subtype'}|[[{'var',680,'N'}|[{'type',680,'pos_integer',[]}]]]]}|[{'type',681,'constraint',[{'atom',681,'is_subtype'}|[[{'var',681,'TupleList1'}|[{'type',681,'list',[{'var',681,'Tuple'}]}]]]]}|[{'type',682,'constraint',[{'atom',682,'is_subtype'}|[[{'var',682,'TupleList2'}|[{'type',682,'list',[{'var',682,'Tuple'}]}]]]]}|[{'type',683,'constraint',[{'atom',683,'is_subtype'}|[[{'var',683,'Tuple'}|[{'type',683,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 693
		'spec' =
		    %% Line 693
		    [{{'keyreplace',4},[{'type',693,'bounded_fun',[{'type',693,'fun',[{'type',693,'product',[{'var',693,'Key'}|[{'var',693,'N'}|[{'var',693,'TupleList1'}|[{'var',693,'NewTuple'}]]]]}|[{'var',693,'TupleList2'}]]}|[[{'type',694,'constraint',[{'atom',694,'is_subtype'}|[[{'var',694,'Key'}|[{'type',694,'term',[]}]]]]}|[{'type',695,'constraint',[{'atom',695,'is_subtype'}|[[{'var',695,'N'}|[{'type',695,'pos_integer',[]}]]]]}|[{'type',696,'constraint',[{'atom',696,'is_subtype'}|[[{'var',696,'TupleList1'}|[{'type',696,'list',[{'var',696,'Tuple'}]}]]]]}|[{'type',697,'constraint',[{'atom',697,'is_subtype'}|[[{'var',697,'TupleList2'}|[{'type',697,'list',[{'var',697,'Tuple'}]}]]]]}|[{'type',698,'constraint',[{'atom',698,'is_subtype'}|[[{'var',698,'NewTuple'}|[{'var',698,'Tuple'}]]]]}|[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'Tuple'}|[{'type',699,'tuple','any'}]]]]}]]]]]]]]}]}],
		%% Line 710
		'spec' =
		    %% Line 710
		    [{{'keytake',3},[{'type',710,'bounded_fun',[{'type',710,'fun',[{'type',710,'product',[{'var',710,'Key'}|[{'var',710,'N'}|[{'var',710,'TupleList1'}]]]}|[{'type',710,'union',[{'type',710,'tuple',[{'atom',710,'value'}|[{'var',710,'Tuple'}|[{'var',710,'TupleList2'}]]]}|[{'atom',710,'false'}]]}]]}|[[{'type',711,'constraint',[{'atom',711,'is_subtype'}|[[{'var',711,'Key'}|[{'type',711,'term',[]}]]]]}|[{'type',712,'constraint',[{'atom',712,'is_subtype'}|[[{'var',712,'N'}|[{'type',712,'pos_integer',[]}]]]]}|[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'TupleList1'}|[{'type',713,'list',[{'type',713,'tuple','any'}]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'TupleList2'}|[{'type',714,'list',[{'type',714,'tuple','any'}]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Tuple'}|[{'type',715,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 726
		'spec' =
		    %% Line 726
		    [{{'keystore',4},[{'type',726,'bounded_fun',[{'type',726,'fun',[{'type',726,'product',[{'var',726,'Key'}|[{'var',726,'N'}|[{'var',726,'TupleList1'}|[{'var',726,'NewTuple'}]]]]}|[{'var',726,'TupleList2'}]]}|[[{'type',727,'constraint',[{'atom',727,'is_subtype'}|[[{'var',727,'Key'}|[{'type',727,'term',[]}]]]]}|[{'type',728,'constraint',[{'atom',728,'is_subtype'}|[[{'var',728,'N'}|[{'type',728,'pos_integer',[]}]]]]}|[{'type',729,'constraint',[{'atom',729,'is_subtype'}|[[{'var',729,'TupleList1'}|[{'type',729,'list',[{'var',729,'Tuple'}]}]]]]}|[{'type',730,'constraint',[{'atom',730,'is_subtype'}|[[{'var',730,'TupleList2'}|[{'type',730,'nonempty_list',[{'var',730,'Tuple'}]}]]]]}|[{'type',731,'constraint',[{'atom',731,'is_subtype'}|[[{'var',731,'NewTuple'}|[{'var',731,'Tuple'}]]]]}|[{'type',732,'constraint',[{'atom',732,'is_subtype'}|[[{'var',732,'Tuple'}|[{'type',732,'tuple','any'}]]]]}]]]]]]]]}]}],
		%% Line 744
		'spec' =
		    %% Line 744
		    [{{'keysort',2},[{'type',744,'bounded_fun',[{'type',744,'fun',[{'type',744,'product',[{'var',744,'N'}|[{'var',744,'TupleList1'}]]}|[{'var',744,'TupleList2'}]]}|[[{'type',745,'constraint',[{'atom',745,'is_subtype'}|[[{'var',745,'N'}|[{'type',745,'pos_integer',[]}]]]]}|[{'type',746,'constraint',[{'atom',746,'is_subtype'}|[[{'var',746,'TupleList1'}|[{'type',746,'list',[{'var',746,'Tuple'}]}]]]]}|[{'type',747,'constraint',[{'atom',747,'is_subtype'}|[[{'var',747,'TupleList2'}|[{'type',747,'list',[{'var',747,'Tuple'}]}]]]]}|[{'type',748,'constraint',[{'atom',748,'is_subtype'}|[[{'var',748,'Tuple'}|[{'type',748,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 805
		'spec' =
		    %% Line 805
		    [{{'keymerge',3},[{'type',805,'bounded_fun',[{'type',805,'fun',[{'type',805,'product',[{'var',805,'N'}|[{'var',805,'TupleList1'}|[{'var',805,'TupleList2'}]]]}|[{'var',805,'TupleList3'}]]}|[[{'type',806,'constraint',[{'atom',806,'is_subtype'}|[[{'var',806,'N'}|[{'type',806,'pos_integer',[]}]]]]}|[{'type',807,'constraint',[{'atom',807,'is_subtype'}|[[{'var',807,'TupleList1'}|[{'type',807,'list',[{'var',807,'T1'}]}]]]]}|[{'type',808,'constraint',[{'atom',808,'is_subtype'}|[[{'var',808,'TupleList2'}|[{'type',808,'list',[{'var',808,'T2'}]}]]]]}|[{'type',809,'constraint',[{'atom',809,'is_subtype'}|[[{'var',809,'TupleList3'}|[{'type',809,'list',[{'paren_type',809,[{'type',809,'union',[{'var',809,'T1'}|[{'var',809,'T2'}]]}]}]}]]]]}|[{'type',810,'constraint',[{'atom',810,'is_subtype'}|[[{'var',810,'T1'}|[{'var',810,'Tuple'}]]]]}|[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'T2'}|[{'var',811,'Tuple'}]]]]}|[{'type',812,'constraint',[{'atom',812,'is_subtype'}|[[{'var',812,'Tuple'}|[{'type',812,'tuple','any'}]]]]}]]]]]]]]]}]}],
		%% Line 826
		'spec' =
		    %% Line 826
		    [{{'rkeymerge',3},[{'type',826,'bounded_fun',[{'type',826,'fun',[{'type',826,'product',[{'type',826,'pos_integer',[]}|[{'type',826,'list',[{'var',826,'X'}]}|[{'type',826,'list',[{'var',826,'Y'}]}]]]}|[{'type',827,'list',[{'var',827,'R'}]}]]}|[[{'type',827,'constraint',[{'atom',827,'is_subtype'}|[[{'var',827,'X'}|[{'type',827,'tuple','any'}]]]]}|[{'type',827,'constraint',[{'atom',827,'is_subtype'}|[[{'var',827,'Y'}|[{'type',827,'tuple','any'}]]]]}|[{'type',827,'constraint',[{'atom',827,'is_subtype'}|[[{'var',827,'R'}|[{'type',827,'tuple','any'}]]]]}]]]]]}]}],
		%% Line 839
		'spec' =
		    %% Line 839
		    [{{'ukeysort',2},[{'type',839,'bounded_fun',[{'type',839,'fun',[{'type',839,'product',[{'var',839,'N'}|[{'var',839,'TupleList1'}]]}|[{'var',839,'TupleList2'}]]}|[[{'type',840,'constraint',[{'atom',840,'is_subtype'}|[[{'var',840,'N'}|[{'type',840,'pos_integer',[]}]]]]}|[{'type',841,'constraint',[{'atom',841,'is_subtype'}|[[{'var',841,'TupleList1'}|[{'type',841,'list',[{'var',841,'Tuple'}]}]]]]}|[{'type',842,'constraint',[{'atom',842,'is_subtype'}|[[{'var',842,'TupleList2'}|[{'type',842,'list',[{'var',842,'Tuple'}]}]]]]}|[{'type',843,'constraint',[{'atom',843,'is_subtype'}|[[{'var',843,'Tuple'}|[{'type',843,'tuple','any'}]]]]}]]]]]]}]}],
		%% Line 908
		'spec' =
		    %% Line 908
		    [{{'ukeymerge',3},[{'type',908,'bounded_fun',[{'type',908,'fun',[{'type',908,'product',[{'var',908,'N'}|[{'var',908,'TupleList1'}|[{'var',908,'TupleList2'}]]]}|[{'var',908,'TupleList3'}]]}|[[{'type',909,'constraint',[{'atom',909,'is_subtype'}|[[{'var',909,'N'}|[{'type',909,'pos_integer',[]}]]]]}|[{'type',910,'constraint',[{'atom',910,'is_subtype'}|[[{'var',910,'TupleList1'}|[{'type',910,'list',[{'var',910,'T1'}]}]]]]}|[{'type',911,'constraint',[{'atom',911,'is_subtype'}|[[{'var',911,'TupleList2'}|[{'type',911,'list',[{'var',911,'T2'}]}]]]]}|[{'type',912,'constraint',[{'atom',912,'is_subtype'}|[[{'var',912,'TupleList3'}|[{'type',912,'list',[{'paren_type',912,[{'type',912,'union',[{'var',912,'T1'}|[{'var',912,'T2'}]]}]}]}]]]]}|[{'type',913,'constraint',[{'atom',913,'is_subtype'}|[[{'var',913,'T1'}|[{'var',913,'Tuple'}]]]]}|[{'type',914,'constraint',[{'atom',914,'is_subtype'}|[[{'var',914,'T2'}|[{'var',914,'Tuple'}]]]]}|[{'type',915,'constraint',[{'atom',915,'is_subtype'}|[[{'var',915,'Tuple'}|[{'type',915,'tuple','any'}]]]]}]]]]]]]]]}]}],
		%% Line 929
		'spec' =
		    %% Line 929
		    [{{'rukeymerge',3},[{'type',929,'bounded_fun',[{'type',929,'fun',[{'type',929,'product',[{'type',929,'pos_integer',[]}|[{'type',929,'list',[{'var',929,'X'}]}|[{'type',929,'list',[{'var',929,'Y'}]}]]]}|[{'type',930,'list',[{'paren_type',930,[{'type',930,'union',[{'var',930,'X'}|[{'var',930,'Y'}]]}]}]}]]}|[[{'type',930,'constraint',[{'atom',930,'is_subtype'}|[[{'var',930,'X'}|[{'type',930,'tuple','any'}]]]]}|[{'type',930,'constraint',[{'atom',930,'is_subtype'}|[[{'var',930,'Y'}|[{'type',930,'tuple','any'}]]]]}]]]]}]}],
		%% Line 942
		'spec' =
		    %% Line 942
		    [{{'keymap',3},[{'type',942,'bounded_fun',[{'type',942,'fun',[{'type',942,'product',[{'var',942,'Fun'}|[{'var',942,'N'}|[{'var',942,'TupleList1'}]]]}|[{'var',942,'TupleList2'}]]}|[[{'type',943,'constraint',[{'atom',943,'is_subtype'}|[[{'var',943,'Fun'}|[{'type',943,'fun',[{'type',943,'product',[{'ann_type',943,[{'var',943,'Term1'}|[{'type',943,'term',[]}]]}]}|[{'ann_type',943,[{'var',943,'Term2'}|[{'type',943,'term',[]}]]}]]}]]]]}|[{'type',944,'constraint',[{'atom',944,'is_subtype'}|[[{'var',944,'N'}|[{'type',944,'pos_integer',[]}]]]]}|[{'type',945,'constraint',[{'atom',945,'is_subtype'}|[[{'var',945,'TupleList1'}|[{'type',945,'list',[{'var',945,'Tuple'}]}]]]]}|[{'type',946,'constraint',[{'atom',946,'is_subtype'}|[[{'var',946,'TupleList2'}|[{'type',946,'list',[{'var',946,'Tuple'}]}]]]]}|[{'type',947,'constraint',[{'atom',947,'is_subtype'}|[[{'var',947,'Tuple'}|[{'type',947,'tuple','any'}]]]]}]]]]]]]}]}],
		%% Line 956
		'spec' =
		    %% Line 956
		    [{{'sort',2},[{'type',956,'bounded_fun',[{'type',956,'fun',[{'type',956,'product',[{'var',956,'Fun'}|[{'var',956,'List1'}]]}|[{'var',956,'List2'}]]}|[[{'type',957,'constraint',[{'atom',957,'is_subtype'}|[[{'var',957,'Fun'}|[{'type',957,'fun',[{'type',957,'product',[{'ann_type',957,[{'var',957,'A'}|[{'var',957,'T'}]]}|[{'ann_type',957,[{'var',957,'B'}|[{'var',957,'T'}]]}]]}|[{'type',957,'boolean',[]}]]}]]]]}|[{'type',958,'constraint',[{'atom',958,'is_subtype'}|[[{'var',958,'List1'}|[{'type',958,'list',[{'var',958,'T'}]}]]]]}|[{'type',959,'constraint',[{'atom',959,'is_subtype'}|[[{'var',959,'List2'}|[{'type',959,'list',[{'var',959,'T'}]}]]]]}|[{'type',960,'constraint',[{'atom',960,'is_subtype'}|[[{'var',960,'T'}|[{'type',960,'term',[]}]]]]}]]]]]]}]}],
		%% Line 974
		'spec' =
		    %% Line 974
		    [{{'merge',3},[{'type',974,'bounded_fun',[{'type',974,'fun',[{'type',974,'product',[{'var',974,'Fun'}|[{'var',974,'List1'}|[{'var',974,'List2'}]]]}|[{'var',974,'List3'}]]}|[[{'type',975,'constraint',[{'atom',975,'is_subtype'}|[[{'var',975,'Fun'}|[{'type',975,'fun',[{'type',975,'product',[{'var',975,'A'}|[{'var',975,'B'}]]}|[{'type',975,'boolean',[]}]]}]]]]}|[{'type',976,'constraint',[{'atom',976,'is_subtype'}|[[{'var',976,'List1'}|[{'type',976,'list',[{'var',976,'A'}]}]]]]}|[{'type',977,'constraint',[{'atom',977,'is_subtype'}|[[{'var',977,'List2'}|[{'type',977,'list',[{'var',977,'B'}]}]]]]}|[{'type',978,'constraint',[{'atom',978,'is_subtype'}|[[{'var',978,'List3'}|[{'type',978,'list',[{'paren_type',978,[{'type',978,'union',[{'var',978,'A'}|[{'var',978,'B'}]]}]}]}]]]]}|[{'type',979,'constraint',[{'atom',979,'is_subtype'}|[[{'var',979,'A'}|[{'type',979,'term',[]}]]]]}|[{'type',980,'constraint',[{'atom',980,'is_subtype'}|[[{'var',980,'B'}|[{'type',980,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 989
		'spec' =
		    %% Line 989
		    [{{'rmerge',3},[{'type',989,'fun',[{'type',989,'product',[{'type',989,'fun',[{'type',989,'product',[{'var',989,'X'}|[{'var',989,'Y'}]]}|[{'type',989,'boolean',[]}]]}|[{'type',989,'list',[{'var',989,'X'}]}|[{'type',989,'list',[{'var',989,'Y'}]}]]]}|[{'type',989,'list',[{'paren_type',989,[{'type',989,'union',[{'var',989,'X'}|[{'var',989,'Y'}]]}]}]}]]}]}],
		%% Line 996
		'spec' =
		    %% Line 996
		    [{{'usort',2},[{'type',996,'bounded_fun',[{'type',996,'fun',[{'type',996,'product',[{'var',996,'Fun'}|[{'var',996,'List1'}]]}|[{'var',996,'List2'}]]}|[[{'type',997,'constraint',[{'atom',997,'is_subtype'}|[[{'var',997,'Fun'}|[{'type',997,'fun',[{'type',997,'product',[{'var',997,'T'}|[{'var',997,'T'}]]}|[{'type',997,'boolean',[]}]]}]]]]}|[{'type',998,'constraint',[{'atom',998,'is_subtype'}|[[{'var',998,'List1'}|[{'type',998,'list',[{'var',998,'T'}]}]]]]}|[{'type',999,'constraint',[{'atom',999,'is_subtype'}|[[{'var',999,'List2'}|[{'type',999,'list',[{'var',999,'T'}]}]]]]}|[{'type',1000,'constraint',[{'atom',1000,'is_subtype'}|[[{'var',1000,'T'}|[{'type',1000,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1027
		'spec' =
		    %% Line 1027
		    [{{'umerge',3},[{'type',1027,'bounded_fun',[{'type',1027,'fun',[{'type',1027,'product',[{'var',1027,'Fun'}|[{'var',1027,'List1'}|[{'var',1027,'List2'}]]]}|[{'var',1027,'List3'}]]}|[[{'type',1028,'constraint',[{'atom',1028,'is_subtype'}|[[{'var',1028,'Fun'}|[{'type',1028,'fun',[{'type',1028,'product',[{'var',1028,'A'}|[{'var',1028,'B'}]]}|[{'type',1028,'boolean',[]}]]}]]]]}|[{'type',1029,'constraint',[{'atom',1029,'is_subtype'}|[[{'var',1029,'List1'}|[{'type',1029,'list',[{'var',1029,'A'}]}]]]]}|[{'type',1030,'constraint',[{'atom',1030,'is_subtype'}|[[{'var',1030,'List2'}|[{'type',1030,'list',[{'var',1030,'B'}]}]]]]}|[{'type',1031,'constraint',[{'atom',1031,'is_subtype'}|[[{'var',1031,'List3'}|[{'type',1031,'list',[{'paren_type',1031,[{'type',1031,'union',[{'var',1031,'A'}|[{'var',1031,'B'}]]}]}]}]]]]}|[{'type',1032,'constraint',[{'atom',1032,'is_subtype'}|[[{'var',1032,'A'}|[{'type',1032,'term',[]}]]]]}|[{'type',1033,'constraint',[{'atom',1033,'is_subtype'}|[[{'var',1033,'B'}|[{'type',1033,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 1042
		'spec' =
		    %% Line 1042
		    [{{'rumerge',3},[{'type',1042,'fun',[{'type',1042,'product',[{'type',1042,'fun',[{'type',1042,'product',[{'var',1042,'X'}|[{'var',1042,'Y'}]]}|[{'type',1042,'boolean',[]}]]}|[{'type',1042,'list',[{'var',1042,'X'}]}|[{'type',1042,'list',[{'var',1042,'Y'}]}]]]}|[{'type',1042,'list',[{'paren_type',1042,[{'type',1042,'union',[{'var',1042,'X'}|[{'var',1042,'Y'}]]}]}]}]]}]}],
		%% Line 1052
		'spec' =
		    %% Line 1052
		    [{{'usort',1},[{'type',1052,'bounded_fun',[{'type',1052,'fun',[{'type',1052,'product',[{'var',1052,'List1'}]}|[{'var',1052,'List2'}]]}|[[{'type',1053,'constraint',[{'atom',1053,'is_subtype'}|[[{'var',1053,'List1'}|[{'type',1053,'list',[{'var',1053,'T'}]}]]]]}|[{'type',1054,'constraint',[{'atom',1054,'is_subtype'}|[[{'var',1054,'List2'}|[{'type',1054,'list',[{'var',1054,'T'}]}]]]]}|[{'type',1055,'constraint',[{'atom',1055,'is_subtype'}|[[{'var',1055,'T'}|[{'type',1055,'term',[]}]]]]}]]]]]}]}],
		%% Line 1110
		'spec' =
		    %% Line 1110
		    [{{'umerge',1},[{'type',1110,'bounded_fun',[{'type',1110,'fun',[{'type',1110,'product',[{'var',1110,'ListOfLists'}]}|[{'var',1110,'List1'}]]}|[[{'type',1111,'constraint',[{'atom',1111,'is_subtype'}|[[{'var',1111,'ListOfLists'}|[{'type',1111,'list',[{'var',1111,'List'}]}]]]]}|[{'type',1112,'constraint',[{'atom',1112,'is_subtype'}|[[{'var',1112,'List'}|[{'type',1112,'list',[{'var',1112,'T'}]}]]]]}|[{'type',1113,'constraint',[{'atom',1113,'is_subtype'}|[[{'var',1113,'List1'}|[{'type',1113,'list',[{'var',1113,'T'}]}]]]]}|[{'type',1114,'constraint',[{'atom',1114,'is_subtype'}|[[{'var',1114,'T'}|[{'type',1114,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1123
		'spec' =
		    %% Line 1123
		    [{{'umerge3',3},[{'type',1123,'bounded_fun',[{'type',1123,'fun',[{'type',1123,'product',[{'var',1123,'List1'}|[{'var',1123,'List2'}|[{'var',1123,'List3'}]]]}|[{'var',1123,'List4'}]]}|[[{'type',1124,'constraint',[{'atom',1124,'is_subtype'}|[[{'var',1124,'List1'}|[{'type',1124,'list',[{'var',1124,'X'}]}]]]]}|[{'type',1125,'constraint',[{'atom',1125,'is_subtype'}|[[{'var',1125,'List2'}|[{'type',1125,'list',[{'var',1125,'Y'}]}]]]]}|[{'type',1126,'constraint',[{'atom',1126,'is_subtype'}|[[{'var',1126,'List3'}|[{'type',1126,'list',[{'var',1126,'Z'}]}]]]]}|[{'type',1127,'constraint',[{'atom',1127,'is_subtype'}|[[{'var',1127,'List4'}|[{'type',1127,'list',[{'paren_type',1127,[{'type',1127,'union',[{'var',1127,'X'}|[{'var',1127,'Y'}|[{'var',1127,'Z'}]]]}]}]}]]]]}|[{'type',1128,'constraint',[{'atom',1128,'is_subtype'}|[[{'var',1128,'X'}|[{'type',1128,'term',[]}]]]]}|[{'type',1129,'constraint',[{'atom',1129,'is_subtype'}|[[{'var',1129,'Y'}|[{'type',1129,'term',[]}]]]]}|[{'type',1130,'constraint',[{'atom',1130,'is_subtype'}|[[{'var',1130,'Z'}|[{'type',1130,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1143
		'spec' =
		    %% Line 1143
		    [{{'rumerge3',3},[{'type',1143,'fun',[{'type',1143,'product',[{'type',1143,'list',[{'var',1143,'X'}]}|[{'type',1143,'list',[{'var',1143,'Y'}]}|[{'type',1143,'list',[{'var',1143,'Z'}]}]]]}|[{'type',1143,'list',[{'paren_type',1143,[{'type',1143,'union',[{'var',1143,'X'}|[{'var',1143,'Y'}|[{'var',1143,'Z'}]]]}]}]}]]}]}],
		%% Line 1155
		'spec' =
		    %% Line 1155
		    [{{'umerge',2},[{'type',1155,'bounded_fun',[{'type',1155,'fun',[{'type',1155,'product',[{'var',1155,'List1'}|[{'var',1155,'List2'}]]}|[{'var',1155,'List3'}]]}|[[{'type',1156,'constraint',[{'atom',1156,'is_subtype'}|[[{'var',1156,'List1'}|[{'type',1156,'list',[{'var',1156,'X'}]}]]]]}|[{'type',1157,'constraint',[{'atom',1157,'is_subtype'}|[[{'var',1157,'List2'}|[{'type',1157,'list',[{'var',1157,'Y'}]}]]]]}|[{'type',1158,'constraint',[{'atom',1158,'is_subtype'}|[[{'var',1158,'List3'}|[{'type',1158,'list',[{'paren_type',1158,[{'type',1158,'union',[{'var',1158,'X'}|[{'var',1158,'Y'}]]}]}]}]]]]}|[{'type',1159,'constraint',[{'atom',1159,'is_subtype'}|[[{'var',1159,'X'}|[{'type',1159,'term',[]}]]]]}|[{'type',1160,'constraint',[{'atom',1160,'is_subtype'}|[[{'var',1160,'Y'}|[{'type',1160,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1173
		'spec' =
		    %% Line 1173
		    [{{'rumerge',2},[{'type',1173,'fun',[{'type',1173,'product',[{'type',1173,'list',[{'var',1173,'X'}]}|[{'type',1173,'list',[{'var',1173,'Y'}]}]]}|[{'type',1173,'list',[{'paren_type',1173,[{'type',1173,'union',[{'var',1173,'X'}|[{'var',1173,'Y'}]]}]}]}]]}]}],
		%% Line 1205
		'spec' =
		    %% Line 1205
		    [{{'all',2},[{'type',1205,'bounded_fun',[{'type',1205,'fun',[{'type',1205,'product',[{'var',1205,'Pred'}|[{'var',1205,'List'}]]}|[{'type',1205,'boolean',[]}]]}|[[{'type',1206,'constraint',[{'atom',1206,'is_subtype'}|[[{'var',1206,'Pred'}|[{'type',1206,'fun',[{'type',1206,'product',[{'ann_type',1206,[{'var',1206,'Elem'}|[{'var',1206,'T'}]]}]}|[{'type',1206,'boolean',[]}]]}]]]]}|[{'type',1207,'constraint',[{'atom',1207,'is_subtype'}|[[{'var',1207,'List'}|[{'type',1207,'list',[{'var',1207,'T'}]}]]]]}|[{'type',1208,'constraint',[{'atom',1208,'is_subtype'}|[[{'var',1208,'T'}|[{'type',1208,'term',[]}]]]]}]]]]]}]}],
		%% Line 1217
		'spec' =
		    %% Line 1217
		    [{{'any',2},[{'type',1217,'bounded_fun',[{'type',1217,'fun',[{'type',1217,'product',[{'var',1217,'Pred'}|[{'var',1217,'List'}]]}|[{'type',1217,'boolean',[]}]]}|[[{'type',1218,'constraint',[{'atom',1218,'is_subtype'}|[[{'var',1218,'Pred'}|[{'type',1218,'fun',[{'type',1218,'product',[{'ann_type',1218,[{'var',1218,'Elem'}|[{'var',1218,'T'}]]}]}|[{'type',1218,'boolean',[]}]]}]]]]}|[{'type',1219,'constraint',[{'atom',1219,'is_subtype'}|[[{'var',1219,'List'}|[{'type',1219,'list',[{'var',1219,'T'}]}]]]]}|[{'type',1220,'constraint',[{'atom',1220,'is_subtype'}|[[{'var',1220,'T'}|[{'type',1220,'term',[]}]]]]}]]]]]}]}],
		%% Line 1229
		'spec' =
		    %% Line 1229
		    [{{'map',2},[{'type',1229,'bounded_fun',[{'type',1229,'fun',[{'type',1229,'product',[{'var',1229,'Fun'}|[{'var',1229,'List1'}]]}|[{'var',1229,'List2'}]]}|[[{'type',1230,'constraint',[{'atom',1230,'is_subtype'}|[[{'var',1230,'Fun'}|[{'type',1230,'fun',[{'type',1230,'product',[{'var',1230,'A'}]}|[{'var',1230,'B'}]]}]]]]}|[{'type',1231,'constraint',[{'atom',1231,'is_subtype'}|[[{'var',1231,'List1'}|[{'type',1231,'list',[{'var',1231,'A'}]}]]]]}|[{'type',1232,'constraint',[{'atom',1232,'is_subtype'}|[[{'var',1232,'List2'}|[{'type',1232,'list',[{'var',1232,'B'}]}]]]]}|[{'type',1233,'constraint',[{'atom',1233,'is_subtype'}|[[{'var',1233,'A'}|[{'type',1233,'term',[]}]]]]}|[{'type',1234,'constraint',[{'atom',1234,'is_subtype'}|[[{'var',1234,'B'}|[{'type',1234,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1240
		'spec' =
		    %% Line 1240
		    [{{'flatmap',2},[{'type',1240,'bounded_fun',[{'type',1240,'fun',[{'type',1240,'product',[{'var',1240,'Fun'}|[{'var',1240,'List1'}]]}|[{'var',1240,'List2'}]]}|[[{'type',1241,'constraint',[{'atom',1241,'is_subtype'}|[[{'var',1241,'Fun'}|[{'type',1241,'fun',[{'type',1241,'product',[{'var',1241,'A'}]}|[{'type',1241,'list',[{'var',1241,'B'}]}]]}]]]]}|[{'type',1242,'constraint',[{'atom',1242,'is_subtype'}|[[{'var',1242,'List1'}|[{'type',1242,'list',[{'var',1242,'A'}]}]]]]}|[{'type',1243,'constraint',[{'atom',1243,'is_subtype'}|[[{'var',1243,'List2'}|[{'type',1243,'list',[{'var',1243,'B'}]}]]]]}|[{'type',1244,'constraint',[{'atom',1244,'is_subtype'}|[[{'var',1244,'A'}|[{'type',1244,'term',[]}]]]]}|[{'type',1245,'constraint',[{'atom',1245,'is_subtype'}|[[{'var',1245,'B'}|[{'type',1245,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1251
		'spec' =
		    %% Line 1251
		    [{{'foldl',3},[{'type',1251,'bounded_fun',[{'type',1251,'fun',[{'type',1251,'product',[{'var',1251,'Fun'}|[{'var',1251,'Acc0'}|[{'var',1251,'List'}]]]}|[{'var',1251,'Acc1'}]]}|[[{'type',1252,'constraint',[{'atom',1252,'is_subtype'}|[[{'var',1252,'Fun'}|[{'type',1252,'fun',[{'type',1252,'product',[{'ann_type',1252,[{'var',1252,'Elem'}|[{'var',1252,'T'}]]}|[{'var',1252,'AccIn'}]]}|[{'var',1252,'AccOut'}]]}]]]]}|[{'type',1253,'constraint',[{'atom',1253,'is_subtype'}|[[{'var',1253,'Acc0'}|[{'type',1253,'term',[]}]]]]}|[{'type',1254,'constraint',[{'atom',1254,'is_subtype'}|[[{'var',1254,'Acc1'}|[{'type',1254,'term',[]}]]]]}|[{'type',1255,'constraint',[{'atom',1255,'is_subtype'}|[[{'var',1255,'AccIn'}|[{'type',1255,'term',[]}]]]]}|[{'type',1256,'constraint',[{'atom',1256,'is_subtype'}|[[{'var',1256,'AccOut'}|[{'type',1256,'term',[]}]]]]}|[{'type',1257,'constraint',[{'atom',1257,'is_subtype'}|[[{'var',1257,'List'}|[{'type',1257,'list',[{'var',1257,'T'}]}]]]]}|[{'type',1258,'constraint',[{'atom',1258,'is_subtype'}|[[{'var',1258,'T'}|[{'type',1258,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1264
		'spec' =
		    %% Line 1264
		    [{{'foldr',3},[{'type',1264,'bounded_fun',[{'type',1264,'fun',[{'type',1264,'product',[{'var',1264,'Fun'}|[{'var',1264,'Acc0'}|[{'var',1264,'List'}]]]}|[{'var',1264,'Acc1'}]]}|[[{'type',1265,'constraint',[{'atom',1265,'is_subtype'}|[[{'var',1265,'Fun'}|[{'type',1265,'fun',[{'type',1265,'product',[{'ann_type',1265,[{'var',1265,'Elem'}|[{'var',1265,'T'}]]}|[{'var',1265,'AccIn'}]]}|[{'var',1265,'AccOut'}]]}]]]]}|[{'type',1266,'constraint',[{'atom',1266,'is_subtype'}|[[{'var',1266,'Acc0'}|[{'type',1266,'term',[]}]]]]}|[{'type',1267,'constraint',[{'atom',1267,'is_subtype'}|[[{'var',1267,'Acc1'}|[{'type',1267,'term',[]}]]]]}|[{'type',1268,'constraint',[{'atom',1268,'is_subtype'}|[[{'var',1268,'AccIn'}|[{'type',1268,'term',[]}]]]]}|[{'type',1269,'constraint',[{'atom',1269,'is_subtype'}|[[{'var',1269,'AccOut'}|[{'type',1269,'term',[]}]]]]}|[{'type',1270,'constraint',[{'atom',1270,'is_subtype'}|[[{'var',1270,'List'}|[{'type',1270,'list',[{'var',1270,'T'}]}]]]]}|[{'type',1271,'constraint',[{'atom',1271,'is_subtype'}|[[{'var',1271,'T'}|[{'type',1271,'term',[]}]]]]}]]]]]]]]]}]}],
		%% Line 1277
		'spec' =
		    %% Line 1277
		    [{{'filter',2},[{'type',1277,'bounded_fun',[{'type',1277,'fun',[{'type',1277,'product',[{'var',1277,'Pred'}|[{'var',1277,'List1'}]]}|[{'var',1277,'List2'}]]}|[[{'type',1278,'constraint',[{'atom',1278,'is_subtype'}|[[{'var',1278,'Pred'}|[{'type',1278,'fun',[{'type',1278,'product',[{'ann_type',1278,[{'var',1278,'Elem'}|[{'var',1278,'T'}]]}]}|[{'type',1278,'boolean',[]}]]}]]]]}|[{'type',1279,'constraint',[{'atom',1279,'is_subtype'}|[[{'var',1279,'List1'}|[{'type',1279,'list',[{'var',1279,'T'}]}]]]]}|[{'type',1280,'constraint',[{'atom',1280,'is_subtype'}|[[{'var',1280,'List2'}|[{'type',1280,'list',[{'var',1280,'T'}]}]]]]}|[{'type',1281,'constraint',[{'atom',1281,'is_subtype'}|[[{'var',1281,'T'}|[{'type',1281,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1289
		'spec' =
		    %% Line 1289
		    [{{'partition',2},[{'type',1289,'bounded_fun',[{'type',1289,'fun',[{'type',1289,'product',[{'var',1289,'Pred'}|[{'var',1289,'List'}]]}|[{'type',1289,'tuple',[{'var',1289,'Satisfying'}|[{'var',1289,'NotSatisfying'}]]}]]}|[[{'type',1290,'constraint',[{'atom',1290,'is_subtype'}|[[{'var',1290,'Pred'}|[{'type',1290,'fun',[{'type',1290,'product',[{'ann_type',1290,[{'var',1290,'Elem'}|[{'var',1290,'T'}]]}]}|[{'type',1290,'boolean',[]}]]}]]]]}|[{'type',1291,'constraint',[{'atom',1291,'is_subtype'}|[[{'var',1291,'List'}|[{'type',1291,'list',[{'var',1291,'T'}]}]]]]}|[{'type',1292,'constraint',[{'atom',1292,'is_subtype'}|[[{'var',1292,'Satisfying'}|[{'type',1292,'list',[{'var',1292,'T'}]}]]]]}|[{'type',1293,'constraint',[{'atom',1293,'is_subtype'}|[[{'var',1293,'NotSatisfying'}|[{'type',1293,'list',[{'var',1293,'T'}]}]]]]}|[{'type',1294,'constraint',[{'atom',1294,'is_subtype'}|[[{'var',1294,'T'}|[{'type',1294,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1307
		'spec' =
		    %% Line 1307
		    [{{'filtermap',2},[{'type',1307,'bounded_fun',[{'type',1307,'fun',[{'type',1307,'product',[{'var',1307,'Fun'}|[{'var',1307,'List1'}]]}|[{'var',1307,'List2'}]]}|[[{'type',1308,'constraint',[{'atom',1308,'is_subtype'}|[[{'var',1308,'Fun'}|[{'type',1308,'fun',[{'type',1308,'product',[{'var',1308,'Elem'}]}|[{'type',1308,'union',[{'type',1308,'boolean',[]}|[{'type',1308,'tuple',[{'atom',1308,'true'}|[{'var',1308,'Value'}]]}]]}]]}]]]]}|[{'type',1309,'constraint',[{'atom',1309,'is_subtype'}|[[{'var',1309,'List1'}|[{'type',1309,'list',[{'var',1309,'Elem'}]}]]]]}|[{'type',1310,'constraint',[{'atom',1310,'is_subtype'}|[[{'var',1310,'List2'}|[{'type',1310,'list',[{'type',1310,'union',[{'var',1310,'Elem'}|[{'var',1310,'Value'}]]}]}]]]]}|[{'type',1311,'constraint',[{'atom',1311,'is_subtype'}|[[{'var',1311,'Elem'}|[{'type',1311,'term',[]}]]]]}|[{'type',1312,'constraint',[{'atom',1312,'is_subtype'}|[[{'var',1312,'Value'}|[{'type',1312,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1325
		'spec' =
		    %% Line 1325
		    [{{'zf',2},[{'type',1325,'fun',[{'type',1325,'product',[{'type',1325,'fun',[{'type',1325,'product',[{'var',1325,'T'}]}|[{'type',1325,'union',[{'type',1325,'boolean',[]}|[{'type',1325,'tuple',[{'atom',1325,'true'}|[{'var',1325,'X'}]]}]]}]]}|[{'type',1325,'list',[{'var',1325,'T'}]}]]}|[{'type',1325,'list',[{'paren_type',1325,[{'type',1325,'union',[{'var',1325,'T'}|[{'var',1325,'X'}]]}]}]}]]}]}],
		%% Line 1330
		'spec' =
		    %% Line 1330
		    [{{'foreach',2},[{'type',1330,'bounded_fun',[{'type',1330,'fun',[{'type',1330,'product',[{'var',1330,'Fun'}|[{'var',1330,'List'}]]}|[{'atom',1330,'ok'}]]}|[[{'type',1331,'constraint',[{'atom',1331,'is_subtype'}|[[{'var',1331,'Fun'}|[{'type',1331,'fun',[{'type',1331,'product',[{'ann_type',1331,[{'var',1331,'Elem'}|[{'var',1331,'T'}]]}]}|[{'type',1331,'term',[]}]]}]]]]}|[{'type',1332,'constraint',[{'atom',1332,'is_subtype'}|[[{'var',1332,'List'}|[{'type',1332,'list',[{'var',1332,'T'}]}]]]]}|[{'type',1333,'constraint',[{'atom',1333,'is_subtype'}|[[{'var',1333,'T'}|[{'type',1333,'term',[]}]]]]}]]]]]}]}],
		%% Line 1340
		'spec' =
		    %% Line 1340
		    [{{'mapfoldl',3},[{'type',1340,'bounded_fun',[{'type',1340,'fun',[{'type',1340,'product',[{'var',1340,'Fun'}|[{'var',1340,'Acc0'}|[{'var',1340,'List1'}]]]}|[{'type',1340,'tuple',[{'var',1340,'List2'}|[{'var',1340,'Acc1'}]]}]]}|[[{'type',1341,'constraint',[{'atom',1341,'is_subtype'}|[[{'var',1341,'Fun'}|[{'type',1341,'fun',[{'type',1341,'product',[{'var',1341,'A'}|[{'var',1341,'AccIn'}]]}|[{'type',1341,'tuple',[{'var',1341,'B'}|[{'var',1341,'AccOut'}]]}]]}]]]]}|[{'type',1342,'constraint',[{'atom',1342,'is_subtype'}|[[{'var',1342,'Acc0'}|[{'type',1342,'term',[]}]]]]}|[{'type',1343,'constraint',[{'atom',1343,'is_subtype'}|[[{'var',1343,'Acc1'}|[{'type',1343,'term',[]}]]]]}|[{'type',1344,'constraint',[{'atom',1344,'is_subtype'}|[[{'var',1344,'AccIn'}|[{'type',1344,'term',[]}]]]]}|[{'type',1345,'constraint',[{'atom',1345,'is_subtype'}|[[{'var',1345,'AccOut'}|[{'type',1345,'term',[]}]]]]}|[{'type',1346,'constraint',[{'atom',1346,'is_subtype'}|[[{'var',1346,'List1'}|[{'type',1346,'list',[{'var',1346,'A'}]}]]]]}|[{'type',1347,'constraint',[{'atom',1347,'is_subtype'}|[[{'var',1347,'List2'}|[{'type',1347,'list',[{'var',1347,'B'}]}]]]]}|[{'type',1348,'constraint',[{'atom',1348,'is_subtype'}|[[{'var',1348,'A'}|[{'type',1348,'term',[]}]]]]}|[{'type',1349,'constraint',[{'atom',1349,'is_subtype'}|[[{'var',1349,'B'}|[{'type',1349,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 1357
		'spec' =
		    %% Line 1357
		    [{{'mapfoldr',3},[{'type',1357,'bounded_fun',[{'type',1357,'fun',[{'type',1357,'product',[{'var',1357,'Fun'}|[{'var',1357,'Acc0'}|[{'var',1357,'List1'}]]]}|[{'type',1357,'tuple',[{'var',1357,'List2'}|[{'var',1357,'Acc1'}]]}]]}|[[{'type',1358,'constraint',[{'atom',1358,'is_subtype'}|[[{'var',1358,'Fun'}|[{'type',1358,'fun',[{'type',1358,'product',[{'var',1358,'A'}|[{'var',1358,'AccIn'}]]}|[{'type',1358,'tuple',[{'var',1358,'B'}|[{'var',1358,'AccOut'}]]}]]}]]]]}|[{'type',1359,'constraint',[{'atom',1359,'is_subtype'}|[[{'var',1359,'Acc0'}|[{'type',1359,'term',[]}]]]]}|[{'type',1360,'constraint',[{'atom',1360,'is_subtype'}|[[{'var',1360,'Acc1'}|[{'type',1360,'term',[]}]]]]}|[{'type',1361,'constraint',[{'atom',1361,'is_subtype'}|[[{'var',1361,'AccIn'}|[{'type',1361,'term',[]}]]]]}|[{'type',1362,'constraint',[{'atom',1362,'is_subtype'}|[[{'var',1362,'AccOut'}|[{'type',1362,'term',[]}]]]]}|[{'type',1363,'constraint',[{'atom',1363,'is_subtype'}|[[{'var',1363,'List1'}|[{'type',1363,'list',[{'var',1363,'A'}]}]]]]}|[{'type',1364,'constraint',[{'atom',1364,'is_subtype'}|[[{'var',1364,'List2'}|[{'type',1364,'list',[{'var',1364,'B'}]}]]]]}|[{'type',1365,'constraint',[{'atom',1365,'is_subtype'}|[[{'var',1365,'A'}|[{'type',1365,'term',[]}]]]]}|[{'type',1366,'constraint',[{'atom',1366,'is_subtype'}|[[{'var',1366,'B'}|[{'type',1366,'term',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 1374
		'spec' =
		    %% Line 1374
		    [{{'takewhile',2},[{'type',1374,'bounded_fun',[{'type',1374,'fun',[{'type',1374,'product',[{'var',1374,'Pred'}|[{'var',1374,'List1'}]]}|[{'var',1374,'List2'}]]}|[[{'type',1375,'constraint',[{'atom',1375,'is_subtype'}|[[{'var',1375,'Pred'}|[{'type',1375,'fun',[{'type',1375,'product',[{'ann_type',1375,[{'var',1375,'Elem'}|[{'var',1375,'T'}]]}]}|[{'type',1375,'boolean',[]}]]}]]]]}|[{'type',1376,'constraint',[{'atom',1376,'is_subtype'}|[[{'var',1376,'List1'}|[{'type',1376,'list',[{'var',1376,'T'}]}]]]]}|[{'type',1377,'constraint',[{'atom',1377,'is_subtype'}|[[{'var',1377,'List2'}|[{'type',1377,'list',[{'var',1377,'T'}]}]]]]}|[{'type',1378,'constraint',[{'atom',1378,'is_subtype'}|[[{'var',1378,'T'}|[{'type',1378,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1387
		'spec' =
		    %% Line 1387
		    [{{'dropwhile',2},[{'type',1387,'bounded_fun',[{'type',1387,'fun',[{'type',1387,'product',[{'var',1387,'Pred'}|[{'var',1387,'List1'}]]}|[{'var',1387,'List2'}]]}|[[{'type',1388,'constraint',[{'atom',1388,'is_subtype'}|[[{'var',1388,'Pred'}|[{'type',1388,'fun',[{'type',1388,'product',[{'ann_type',1388,[{'var',1388,'Elem'}|[{'var',1388,'T'}]]}]}|[{'type',1388,'boolean',[]}]]}]]]]}|[{'type',1389,'constraint',[{'atom',1389,'is_subtype'}|[[{'var',1389,'List1'}|[{'type',1389,'list',[{'var',1389,'T'}]}]]]]}|[{'type',1390,'constraint',[{'atom',1390,'is_subtype'}|[[{'var',1390,'List2'}|[{'type',1390,'list',[{'var',1390,'T'}]}]]]]}|[{'type',1391,'constraint',[{'atom',1391,'is_subtype'}|[[{'var',1391,'T'}|[{'type',1391,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1400
		'spec' =
		    %% Line 1400
		    [{{'splitwith',2},[{'type',1400,'bounded_fun',[{'type',1400,'fun',[{'type',1400,'product',[{'var',1400,'Pred'}|[{'var',1400,'List'}]]}|[{'type',1400,'tuple',[{'var',1400,'List1'}|[{'var',1400,'List2'}]]}]]}|[[{'type',1401,'constraint',[{'atom',1401,'is_subtype'}|[[{'var',1401,'Pred'}|[{'type',1401,'fun',[{'type',1401,'product',[{'var',1401,'T'}]}|[{'type',1401,'boolean',[]}]]}]]]]}|[{'type',1402,'constraint',[{'atom',1402,'is_subtype'}|[[{'var',1402,'List'}|[{'type',1402,'list',[{'var',1402,'T'}]}]]]]}|[{'type',1403,'constraint',[{'atom',1403,'is_subtype'}|[[{'var',1403,'List1'}|[{'type',1403,'list',[{'var',1403,'T'}]}]]]]}|[{'type',1404,'constraint',[{'atom',1404,'is_subtype'}|[[{'var',1404,'List2'}|[{'type',1404,'list',[{'var',1404,'T'}]}]]]]}|[{'type',1405,'constraint',[{'atom',1405,'is_subtype'}|[[{'var',1405,'T'}|[{'type',1405,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 1418
		'spec' =
		    %% Line 1418
		    [{{'split',2},[{'type',1418,'bounded_fun',[{'type',1418,'fun',[{'type',1418,'product',[{'var',1418,'N'}|[{'var',1418,'List1'}]]}|[{'type',1418,'tuple',[{'var',1418,'List2'}|[{'var',1418,'List3'}]]}]]}|[[{'type',1419,'constraint',[{'atom',1419,'is_subtype'}|[[{'var',1419,'N'}|[{'type',1419,'non_neg_integer',[]}]]]]}|[{'type',1420,'constraint',[{'atom',1420,'is_subtype'}|[[{'var',1420,'List1'}|[{'type',1420,'list',[{'var',1420,'T'}]}]]]]}|[{'type',1421,'constraint',[{'atom',1421,'is_subtype'}|[[{'var',1421,'List2'}|[{'type',1421,'list',[{'var',1421,'T'}]}]]]]}|[{'type',1422,'constraint',[{'atom',1422,'is_subtype'}|[[{'var',1422,'List3'}|[{'type',1422,'list',[{'var',1422,'T'}]}]]]]}|[{'type',1423,'constraint',[{'atom',1423,'is_subtype'}|[[{'var',1423,'T'}|[{'type',1423,'term',[]}]]]]}]]]]]]]}]}]]
'keyfind'/3 =
    %% Line 53
    fun (_cor2,_cor1,_cor0) ->
	%% Line 54
	call 'erlang':'nif_error'
	    ('undef')
'keymember'/3 =
    %% Line 63
    fun (_cor2,_cor1,_cor0) ->
	%% Line 64
	call 'erlang':'nif_error'
	    ('undef')
'keysearch'/3 =
    %% Line 73
    fun (_cor2,_cor1,_cor0) ->
	%% Line 74
	call 'erlang':'nif_error'
	    ('undef')
'member'/2 =
    %% Line 82
    fun (_cor1,_cor0) ->
	%% Line 83
	call 'erlang':'nif_error'
	    ('undef')
'reverse'/2 =
    %% Line 92
    fun (_cor1,_cor0) ->
	%% Line 93
	call 'erlang':'nif_error'
	    ('undef')
'append'/2 =
    %% Line 114
    fun (_cor1,_cor0) ->
	call 'erlang':'++'
	    (_cor1, _cor0)
'append'/1 =
    %% Line 124
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      E
	  %% Line 125
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  apply 'append'/1
		      (T)
	      in  call 'erlang':'++'
		      (H, _cor1)
	  %% Line 126
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'append',1}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	call 'erlang':'--'
	    (_cor1, _cor0)
'reverse'/1 =
    %% Line 145
    fun (_cor0) ->
	case _cor0 of
	  <L = []> when 'true' ->
	      %% Line 146
	      L
	  %% Line 147
	  <L = [_cor2|[]]> when 'true' ->
	      %% Line 148
	      L
	  %% Line 149
	  <[A|[B|[]]]> when 'true' ->
	      %% Line 150
	      [B|[A|[]]]
	  %% Line 151
	  <[A|[B|L]]> when 'true' ->
	      %% Line 152
	      call 'lists':'reverse'
		  (L, [B|[A|[]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'reverse',1}}] )
	    -| ['compiler_generated'] )
	end
'nth'/2 =
    %% Line 168
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,[H|_cor5]> when 'true' ->
	      H
	  %% Line 169
	  <N,[_cor6|T]>
	      when call 'erlang':'>'
		    (N,
		     1) ->
	      let <_cor2> =
		  %% Line 170
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 170
		  apply 'nth'/2
		      (_cor2, T)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'nth',2}}] )
	    -| ['compiler_generated'] )
	end
'nthtail'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,[_cor5|T]> when 'true' ->
	      T
	  %% Line 179
	  <N,[_cor6|T]>
	      when call 'erlang':'>'
		    (N,
		     1) ->
	      let <_cor2> =
		  %% Line 180
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 180
		  apply 'nthtail'/2
		      (_cor2, T)
	  %% Line 181
	  <0,L>
	      when call 'erlang':'is_list'
		    (L) ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'nthtail',2}}] )
	    -| ['compiler_generated'] )
	end
'prefix'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|PreTail],[_cor4|Tail]>
	      when call 'erlang':'=:='
		    (_cor4,
		     X) ->
	      %% Line 191
	      apply 'prefix'/2
		  (PreTail, Tail)
	  %% Line 192
	  <[],List>
	      when call 'erlang':'is_list'
		    (List) ->
	      'true'
	  %% Line 193
	  <[_cor5|_cor6],List>
	      when call 'erlang':'is_list'
		    (List) ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'prefix',2}}] )
	    -| ['compiler_generated'] )
	end
'suffix'/2 =
    %% Line 202
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 203
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		%% Line 203
		call 'erlang':'length'
		    (_cor1)
	    in  let <Delta> =
		    %% Line 203
		    call 'erlang':'-'
			(_cor3, _cor2)
		in  %% Line 204
		    ( case <> of
			( <>
			      when call 'erlang':'>='
				    (Delta,
				     0) ->
			      let <_cor6> =
				  apply 'nthtail'/2
				      (Delta, _cor0)
			      in  call 'erlang':'=:='
				      (_cor6, _cor1)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'droplast'/1 =
    %% Line 216
    fun (_cor0) ->
	case _cor0 of
	  <[_X_T|[]]> when 'true' ->
	      []
	  %% Line 217
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  apply 'droplast'/1
		      (T)
	      in  [H|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'droplast',1}}] )
	    -| ['compiler_generated'] )
	end
'last'/1 =
    %% Line 226
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      apply 'last'/2
		  (E, Es)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'last',1}}] )
	    -| ['compiler_generated'] )
	end
'last'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,[E|Es]> when 'true' ->
	      apply 'last'/2
		  (E, Es)
	  %% Line 229
	  <E,[]> when 'true' ->
	      E
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'last',2}}] )
	    -| ['compiler_generated'] )
	end
'seq'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <First,Last>
	      when %% Line 242
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (First)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(Last)
			in  let <_cor4> =
				call 'erlang':'-'
				    (First, 1)
			    in  let <_cor5> =
				    call 'erlang':'=<'
					(_cor4, Last)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor3, _cor5)
				    in  call 'erlang':'and'
					    (_cor2, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 243
		  call 'erlang':'-'
		      (Last, First)
	      in  let <_cor8> =
		      %% Line 243
		      call 'erlang':'+'
			  (_cor7, 1)
		  in  %% Line 243
		      apply 'seq_loop'/3
			  (_cor8, Last, [])
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'seq',2}}] )
	    -| ['compiler_generated'] )
	end
'seq_loop'/3 =
    %% Line 245
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,X,L>
	      when call 'erlang':'>='
		    (N,
		     4) ->
	      let <_cor7> =
		  %% Line 246
		  call 'erlang':'-'
		      (N, 4)
	      in  let <_cor6> =
		      %% Line 246
		      call 'erlang':'-'
			  (X, 4)
		  in  let <_cor3> =
			  %% Line 246
			  call 'erlang':'-'
			      (X, 3)
		      in  let <_cor4> =
			      %% Line 246
			      call 'erlang':'-'
				  (X, 2)
			  in  let <_cor5> =
				  %% Line 246
				  call 'erlang':'-'
				      (X, 1)
			      in  %% Line 246
				  apply 'seq_loop'/3
				      (_cor7, _cor6, [_cor3|[_cor4|[_cor5|[X|L]]]])
	  %% Line 247
	  <N,X,L>
	      when call 'erlang':'>='
		    (N,
		     2) ->
	      let <_cor10> =
		  %% Line 248
		  call 'erlang':'-'
		      (N, 2)
	      in  let <_cor9> =
		      %% Line 248
		      call 'erlang':'-'
			  (X, 2)
		  in  let <_cor8> =
			  %% Line 248
			  call 'erlang':'-'
			      (X, 1)
		      in  %% Line 248
			  apply 'seq_loop'/3
			      (_cor10, _cor9, [_cor8|[X|L]])
	  %% Line 249
	  <1,X,L> when 'true' ->
	      %% Line 250
	      [X|L]
	  %% Line 251
	  <0,_cor14,L> when 'true' ->
	      %% Line 252
	      L
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'seq_loop',3}}] )
	    -| ['compiler_generated'] )
	end
'seq'/3 =
    %% Line 260
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <First,Last,Inc>
	      when %% Line 261
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (First)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Last)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Inc)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 262
	      case <> of
		%% Line 263
		<>
		    when let <_cor10> =
			  try
			      let <_cor7> =
				  call 'erlang':'>'
				      (Inc, 0)
			      in  let <_cor8> =
				      call 'erlang':'-'
					  (First, Inc)
				  in  let <_cor9> =
					  call 'erlang':'=<'
					      (_cor8, Last)
				      in  call 'erlang':'and'
					      (_cor7, _cor9)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
		      in  let <_cor14> =
			      %% Line 264
			      try
				  let <_cor11> =
				      call 'erlang':'<'
					  (Inc, 0)
				  in  let <_cor12> =
					  call 'erlang':'-'
					      (First, Inc)
				      in  let <_cor13> =
					      call 'erlang':'>='
						  (_cor12, Last)
					  in  call 'erlang':'and'
						  (_cor11, _cor13)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			  in  call 'erlang':'or'
				  (_cor10, _cor14) ->
		    let <_cor15> =
			%% Line 265
			call 'erlang':'-'
			    (Last, First)
		    in  let <_cor16> =
			    %% Line 265
			    call 'erlang':'+'
				(_cor15, Inc)
			in  let <N> =
				%% Line 265
				call 'erlang':'div'
				    (_cor16, Inc)
			    in  let <_cor18> =
				    %% Line 266
				    call 'erlang':'-'
					(N, 1)
				in  let <_cor19> =
					%% Line 266
					call 'erlang':'*'
					    (Inc, _cor18)
				    in  let <_cor20> =
					    %% Line 266
					    call 'erlang':'+'
						(_cor19, First)
					in  %% Line 266
					    apply 'seq_loop'/4
						(N, _cor20, Inc, [])
		%% Line 267
		<>
		    when let <_cor21> =
			  call 'erlang':'=:='
			      (Inc, 0)
		      in  let <_cor22> =
			      call 'erlang':'=:='
				  (First, Last)
			  in  call 'erlang':'and'
				  (_cor21, _cor22) ->
		    %% Line 268
		    apply 'seq_loop'/4
			(1, First, Inc, [])
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'seq',3}}] )
	    -| ['compiler_generated'] )
	end
'seq_loop'/4 =
    %% Line 271
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,X,D,L>
	      when call 'erlang':'>='
		    (N,
		     4) ->
	      let <Y> =
		  %% Line 272
		  call 'erlang':'-'
		      (X, D)
	      in  let <Z> =
		      %% Line 272
		      call 'erlang':'-'
			  (Y, D)
		  in  let <W> =
			  %% Line 272
			  call 'erlang':'-'
			      (Z, D)
		      in  let <_cor8> =
			      %% Line 273
			      call 'erlang':'-'
				  (N, 4)
			  in  let <_cor7> =
				  %% Line 273
				  call 'erlang':'-'
				      (W, D)
			      in  %% Line 273
				  apply 'seq_loop'/4
				      (_cor8, _cor7, D, [W|[Z|[Y|[X|L]]]])
	  %% Line 274
	  <N,X,D,L>
	      when call 'erlang':'>='
		    (N,
		     2) ->
	      let <Y> =
		  %% Line 275
		  call 'erlang':'-'
		      (X, D)
	      in  let <_cor11> =
		      %% Line 276
		      call 'erlang':'-'
			  (N, 2)
		  in  let <_cor10> =
			  %% Line 276
			  call 'erlang':'-'
			      (Y, D)
		      in  %% Line 276
			  apply 'seq_loop'/4
			      (_cor11, _cor10, D, [Y|[X|L]])
	  %% Line 277
	  <1,X,_cor16,L> when 'true' ->
	      %% Line 278
	      [X|L]
	  %% Line 279
	  <0,_cor17,_cor18,L> when 'true' ->
	      %% Line 280
	      L
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'seq_loop',4}}] )
	    -| ['compiler_generated'] )
	end
'sum'/1 =
    %% Line 287
    fun (_cor0) ->
	apply 'sum'/2
	    (_cor0, 0)
'sum'/2 =
    %% Line 289
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Sum> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'+'
		      (Sum, H)
	      in  apply 'sum'/2
		      (T, _cor2)
	  %% Line 290
	  <[],Sum> when 'true' ->
	      Sum
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'sum',2}}] )
	    -| ['compiler_generated'] )
	end
'duplicate'/2 =
    %% Line 301
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,X>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor3> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      apply 'duplicate'/3
		  (N, X, [])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'duplicate',2}}] )
	    -| ['compiler_generated'] )
	end
'duplicate'/3 =
    %% Line 303
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_cor7,L> when 'true' ->
	      L
	  %% Line 304
	  <N,X,L> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'duplicate'/3
		      (_cor3, X, [X|L])
	end
'min'/1 =
    %% Line 313
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      apply 'min'/2
		  (T, H)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'min',1}}] )
	    -| ['compiler_generated'] )
	end
'min'/2 =
    %% Line 315
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Min>
	      when call 'erlang':'<'
		    (H,
		     Min) ->
	      apply 'min'/2
		  (T, H)
	  %% Line 316
	  <[_cor4|T],Min> when 'true' ->
	      apply 'min'/2
		  (T, Min)
	  %% Line 317
	  <[],Min> when 'true' ->
	      Min
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'min',2}}] )
	    -| ['compiler_generated'] )
	end
'max'/1 =
    %% Line 326
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      apply 'max'/2
		  (T, H)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'max',1}}] )
	    -| ['compiler_generated'] )
	end
'max'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Max>
	      when call 'erlang':'>'
		    (H,
		     Max) ->
	      apply 'max'/2
		  (T, H)
	  %% Line 329
	  <[_cor4|T],Max> when 'true' ->
	      apply 'max'/2
		  (T, Max)
	  %% Line 330
	  <[],Max> when 'true' ->
	      Max
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'max',2}}] )
	    -| ['compiler_generated'] )
	end
'sublist'/3 =
    %% Line 342
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <List,S,L>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor4> =
			call 'erlang':'>='
			    (L, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 343
		  call 'erlang':'-'
		      (S, 1)
	      in  let <_cor6> =
		      %% Line 343
		      apply 'nthtail'/2
			  (_cor5, List)
		  in  %% Line 343
		      apply 'sublist'/2
			  (_cor6, L)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'sublist',3}}] )
	    -| ['compiler_generated'] )
	end
'sublist'/2 =
    %% Line 351
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <List,L>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (List)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 352
	      apply 'sublist_2'/2
		  (List, L)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'sublist',2}}] )
	    -| ['compiler_generated'] )
	end
'sublist_2'/2 =
    %% Line 354
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],L>
	      when call 'erlang':'>'
		    (L,
		     0) ->
	      let <_cor2> =
		  %% Line 355
		  call 'erlang':'-'
		      (L, 1)
	      in  let <_cor3> =
		      %% Line 355
		      apply 'sublist_2'/2
			  (T, _cor2)
		  in  %% Line 355
		      [H|_cor3]
	  %% Line 356
	  <_cor8,0> when 'true' ->
	      %% Line 357
	      []
	  %% Line 358
	  <List,L>
	      when let <_cor4> =
		    call 'erlang':'is_list'
			(List)
		in  let <_cor5> =
			call 'erlang':'>'
			    (L, 0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 359
	      []
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'sublist_2',2}}] )
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 370
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Item,[_cor5|Rest]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Item) ->
	      Rest
	  %% Line 371
	  <Item,[H|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 372
		  apply 'delete'/2
		      (Item, Rest)
	      in  %% Line 372
		  [H|_cor2]
	  %% Line 373
	  <_cor6,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'zip'/2 =
    %% Line 385
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Xs],[Y|Ys]> when 'true' ->
	      let <_cor2> =
		  apply 'zip'/2
		      (Xs, Ys)
	      in  [{X,Y}|_cor2]
	  %% Line 386
	  <[],[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'zip',2}}] )
	    -| ['compiler_generated'] )
	end
'unzip'/1 =
    %% Line 398
    fun (_cor0) ->
	apply 'unzip'/3
	    (_cor0, [], [])
'unzip'/3 =
    %% Line 400
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{X,Y}|Ts],Xs,Ys> when 'true' ->
	      apply 'unzip'/3
		  (Ts, [X|Xs], [Y|Ys])
	  %% Line 401
	  <[],Xs,Ys> when 'true' ->
	      let <_cor4> =
		  apply 'reverse'/1
		      (Xs)
	      in  let <_cor3> =
		      apply 'reverse'/1
			  (Ys)
		  in  {_cor4,_cor3}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'unzip',3}}] )
	    -| ['compiler_generated'] )
	end
'zip3'/3 =
    %% Line 415
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[X|Xs],[Y|Ys],[Z|Zs]> when 'true' ->
	      let <_cor3> =
		  apply 'zip3'/3
		      (Xs, Ys, Zs)
	      in  [{X,Y,Z}|_cor3]
	  %% Line 416
	  <[],[],[]> when 'true' ->
	      []
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'zip3',3}}] )
	    -| ['compiler_generated'] )
	end
'unzip3'/1 =
    %% Line 430
    fun (_cor0) ->
	apply 'unzip3'/4
	    (_cor0, [], [], [])
'unzip3'/4 =
    %% Line 432
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{X,Y,Z}|Ts],Xs,Ys,Zs> when 'true' ->
	      %% Line 433
	      apply 'unzip3'/4
		  (Ts, [X|Xs], [Y|Ys], [Z|Zs])
	  %% Line 434
	  <[],Xs,Ys,Zs> when 'true' ->
	      let <_cor6> =
		  %% Line 435
		  apply 'reverse'/1
		      (Xs)
	      in  let <_cor5> =
		      %% Line 435
		      apply 'reverse'/1
			  (Ys)
		  in  let <_cor4> =
			  %% Line 435
			  apply 'reverse'/1
			      (Zs)
		      in  %% Line 435
			  {_cor6,_cor5,_cor4}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'unzip3',4}}] )
	    -| ['compiler_generated'] )
	end
'zipwith'/3 =
    %% Line 449
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,[X|Xs],[Y|Ys]> when 'true' ->
	      let <_cor3> =
		  apply F
		      (X, Y)
	      in  let <_cor4> =
		      apply 'zipwith'/3
			  (F, Xs, Ys)
		  in  [_cor3|_cor4]
	  %% Line 450
	  <F,[],[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'zipwith',3}}] )
	    -| ['compiler_generated'] )
	end
'zipwith3'/4 =
    %% Line 466
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[X|Xs],[Y|Ys],[Z|Zs]> when 'true' ->
	      let <_cor4> =
		  %% Line 467
		  apply F
		      (X, Y, Z)
	      in  let <_cor5> =
		      %% Line 467
		      apply 'zipwith3'/4
			  (F, Xs, Ys, Zs)
		  in  %% Line 467
		      [_cor4|_cor5]
	  %% Line 468
	  <F,[],[],[]>
	      when call 'erlang':'is_function'
		    (F,
		     3) ->
	      []
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'zipwith3',4}}] )
	    -| ['compiler_generated'] )
	end
'sort'/1 =
    %% Line 478
    fun (_cor0) ->
	case _cor0 of
	  <L0 = [X|[Y|L]]>
	      when call 'erlang':'=<'
		    (X,
		     Y) ->
	      %% Line 479
	      case L of
		%% Line 480
		<[]> when 'true' ->
		    %% Line 481
		    L0
		%% Line 482
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (Y,
			   Z) ->
		    %% Line 483
		    L0
		%% Line 484
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (X,
			   Z) ->
		    %% Line 485
		    [X|[Z|[Y|[]]]]
		%% Line 486
		<[Z|[]]> when 'true' ->
		    %% Line 487
		    [Z|[X|[Y|[]]]]
		%% Line 488
		<_cor4>
		    when call 'erlang':'=='
			  (X,
			   Y) ->
		    %% Line 489
		    apply 'sort_1'/3
			(Y, L, [X|[]])
		%% Line 490
		<_cor5> when 'true' ->
		    %% Line 491
		    apply 'split_1'/5
			(X, Y, L, [], [])
	      end
	  %% Line 493
	  <[X|[Y|L]]> when 'true' ->
	      %% Line 494
	      case L of
		%% Line 495
		<[]> when 'true' ->
		    %% Line 496
		    [Y|[X|[]]]
		%% Line 497
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (X,
			   Z) ->
		    %% Line 498
		    [Y|[X|L]]
		%% Line 499
		<[Z|[]]>
		    when call 'erlang':'=<'
			  (Y,
			   Z) ->
		    %% Line 500
		    [Y|[Z|[X|[]]]]
		%% Line 501
		<[Z|[]]> when 'true' ->
		    %% Line 502
		    [Z|[Y|[X|[]]]]
		%% Line 503
		<_cor6> when 'true' ->
		    %% Line 504
		    apply 'split_2'/5
			(X, Y, L, [], [])
	      end
	  %% Line 506
	  <L = [_cor7|[]]> when 'true' ->
	      %% Line 507
	      L
	  %% Line 508
	  <L = []> when 'true' ->
	      %% Line 509
	      L
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'sort',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_1'/3 =
    %% Line 511
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,[Y|L],R>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 512
	      apply 'sort_1'/3
		  (Y, L, [X|R])
	  %% Line 513
	  <X,[Y|L],R>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 514
	      apply 'split_1'/5
		  (X, Y, L, R, [])
	  %% Line 515
	  <X,[Y|L],R> when 'true' ->
	      %% Line 516
	      apply 'split_2'/5
		  (X, Y, L, R, [])
	  %% Line 517
	  <X,[],R> when 'true' ->
	      %% Line 518
	      call 'lists':'reverse'
		  (R, [X|[]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'sort_1',3}}] )
	    -| ['compiler_generated'] )
	end
'merge'/1 =
    %% Line 529
    fun (_cor0) ->
	%% Line 530
	apply 'mergel'/2
	    (_cor0, [])
'merge3'/3 =
    %% Line 544
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1,[],L3> when 'true' ->
	      %% Line 545
	      apply 'merge'/2
		  (L1, L3)
	  %% Line 546
	  <L1,L2,[]> when 'true' ->
	      %% Line 547
	      apply 'merge'/2
		  (L1, L2)
	  %% Line 548
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_cor3> =
		  %% Line 549
		  apply 'merge3_1'/6
		      (L1, [], H2, T2, H3, T3)
	      in  %% Line 549
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'merge3',3}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3'/3 =
    %% Line 556
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1,[],L3> when 'true' ->
	      %% Line 557
	      apply 'rmerge'/2
		  (L1, L3)
	  %% Line 558
	  <L1,L2,[]> when 'true' ->
	      %% Line 559
	      apply 'rmerge'/2
		  (L1, L2)
	  %% Line 560
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_cor3> =
		  %% Line 561
		  apply 'rmerge3_1'/6
		      (L1, [], H2, T2, H3, T3)
	      in  %% Line 561
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rmerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'merge'/2 =
    %% Line 573
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1,[]> when 'true' ->
	      %% Line 574
	      T1
	  %% Line 575
	  <T1,[H2|T2]> when 'true' ->
	      let <_cor2> =
		  %% Line 576
		  apply 'merge2_1'/4
		      (T1, H2, T2, [])
	      in  %% Line 576
		  call 'lists':'reverse'
		      (_cor2, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'merge',2}}] )
	    -| ['compiler_generated'] )
	end
'rmerge'/2 =
    %% Line 585
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1,[]> when 'true' ->
	      %% Line 586
	      T1
	  %% Line 587
	  <T1,[H2|T2]> when 'true' ->
	      let <_cor2> =
		  %% Line 588
		  apply 'rmerge2_1'/4
		      (T1, H2, T2, [])
	      in  %% Line 588
		  call 'lists':'reverse'
		      (_cor2, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'rmerge',2}}] )
	    -| ['compiler_generated'] )
	end
'concat'/1 =
    %% Line 598
    fun (_cor0) ->
	%% Line 599
	apply 'flatmap'/2
	    (( 'thing_to_list'/1
	       -| [{'id',{0,0,'-concat/1-fun-0-'}}] ), _cor0)
'thing_to_list'/1 =
    %% Line 601
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'erlang':'integer_to_list'
		  (X)
	  %% Line 602
	  <X>
	      when call 'erlang':'is_float'
		    (_cor0) ->
	      call 'erlang':'float_to_list'
		  (X)
	  %% Line 603
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 604
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      X
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'thing_to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'flatten'/1 =
    %% Line 614
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 615
	      apply 'do_flatten'/2
		  (List, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'flatten',1}}] )
	    -| ['compiler_generated'] )
	end
'flatten'/2 =
    %% Line 622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <List,Tail>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(List)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Tail)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 623
	      apply 'do_flatten'/2
		  (List, Tail)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'flatten',2}}] )
	    -| ['compiler_generated'] )
	end
'do_flatten'/2 =
    %% Line 625
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Tail>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_cor2> =
		  %% Line 626
		  apply 'do_flatten'/2
		      (T, Tail)
	      in  %% Line 626
		  apply 'do_flatten'/2
		      (H, _cor2)
	  %% Line 627
	  <[H|T],Tail> when 'true' ->
	      let <_cor3> =
		  %% Line 628
		  apply 'do_flatten'/2
		      (T, Tail)
	      in  %% Line 628
		  [H|_cor3]
	  %% Line 629
	  <[],Tail> when 'true' ->
	      %% Line 630
	      Tail
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_flatten',2}}] )
	    -| ['compiler_generated'] )
	end
'flatlength'/1 =
    %% Line 638
    fun (_cor0) ->
	%% Line 639
	apply 'flatlength'/2
	    (_cor0, 0)
'flatlength'/2 =
    %% Line 641
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],L>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_cor2> =
		  %% Line 642
		  apply 'flatlength'/2
		      (T, L)
	      in  %% Line 642
		  apply 'flatlength'/2
		      (H, _cor2)
	  %% Line 643
	  <[_cor6|T],L> when 'true' ->
	      let <_cor3> =
		  %% Line 644
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 644
		  apply 'flatlength'/2
		      (T, _cor3)
	  %% Line 645
	  <[],L> when 'true' ->
	      L
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'flatlength',2}}] )
	    -| ['compiler_generated'] )
	end
'keydelete'/3 =
    %% Line 685
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <K,N,L>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 686
	      apply 'keydelete3'/3
		  (K, N, L)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'keydelete',3}}] )
	    -| ['compiler_generated'] )
	end
'keydelete3'/3 =
    %% Line 688
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,N,[H|T]>
	      when try
		    let <_cor3> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_cor3, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      T
	  %% Line 689
	  <Key,N,[H|T]> when 'true' ->
	      let <_cor4> =
		  %% Line 690
		  apply 'keydelete3'/3
		      (Key, N, T)
	      in  %% Line 690
		  [H|_cor4]
	  %% Line 691
	  <_cor8,_cor9,[]> when 'true' ->
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'keydelete3',3}}] )
	    -| ['compiler_generated'] )
	end
'keyreplace'/4 =
    %% Line 701
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <K,N,L,New>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor5> =
			    call 'erlang':'>'
				(N, 0)
			in  let <_cor6> =
				call 'erlang':'is_tuple'
				    (New)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 702
	      apply 'keyreplace3'/4
		  (K, N, L, New)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'keyreplace',4}}] )
	    -| ['compiler_generated'] )
	end
'keyreplace3'/4 =
    %% Line 704
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,Pos,[Tup|Tail],New>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (Pos, Tup)
		    in  call 'erlang':'=='
			    (_cor4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 705
	      [New|Tail]
	  %% Line 706
	  <Key,Pos,[H|T],New> when 'true' ->
	      let <_cor5> =
		  %% Line 707
		  apply 'keyreplace3'/4
		      (Key, Pos, T, New)
	      in  %% Line 707
		  [H|_cor5]
	  %% Line 708
	  <_cor10,_cor11,[],_cor12> when 'true' ->
	      []
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keyreplace3',4}}] )
	    -| ['compiler_generated'] )
	end
'keytake'/3 =
    %% Line 717
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,N,L>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 718
	      apply 'keytake'/4
		  (Key, N, L, [])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'keytake',3}}] )
	    -| ['compiler_generated'] )
	end
'keytake'/4 =
    %% Line 720
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,N,[H|T],L>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_cor4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 721
		  call 'lists':'reverse'
		      (L, T)
	      in  %% Line 721
		  {'value',H,_cor5}
	  %% Line 722
	  <Key,N,[H|T],L> when 'true' ->
	      %% Line 723
	      apply 'keytake'/4
		  (Key, N, T, [H|L])
	  %% Line 724
	  <_X_K,_X_N,[],_X_L> when 'true' ->
	      'false'
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keytake',4}}] )
	    -| ['compiler_generated'] )
	end
'keystore'/4 =
    %% Line 734
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <K,N,L,New>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor5> =
			    call 'erlang':'>'
				(N, 0)
			in  let <_cor6> =
				call 'erlang':'is_tuple'
				    (New)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 735
	      apply 'keystore2'/4
		  (K, N, L, New)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'keystore',4}}] )
	    -| ['compiler_generated'] )
	end
'keystore2'/4 =
    %% Line 737
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Key,N,[H|T],New>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (N, H)
		    in  call 'erlang':'=='
			    (_cor4, Key)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 738
	      [New|T]
	  %% Line 739
	  <Key,N,[H|T],New> when 'true' ->
	      let <_cor5> =
		  %% Line 740
		  apply 'keystore2'/4
		      (Key, N, T, New)
	      in  %% Line 740
		  [H|_cor5]
	  %% Line 741
	  <_X_Key,_X_N,[],New> when 'true' ->
	      %% Line 742
	      [New|[]]
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keystore2',4}}] )
	    -| ['compiler_generated'] )
	end
'keysort'/2 =
    %% Line 750
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,L>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor3> =
			call 'erlang':'>'
			    (I, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 751
	      case L of
		%% Line 752
		<[]> when 'true' ->
		    L
		%% Line 753
		<[_cor14|[]]> when 'true' ->
		    L
		%% Line 754
		<[X|[Y|T]]> when 'true' ->
		    let <_cor5> =
			%% Line 755
			call 'erlang':'element'
			    (I, X)
		    in  let <_cor4> =
			    %% Line 755
			    call 'erlang':'element'
				(I, Y)
			in  %% Line 755
			    case <_cor5,_cor4> of
			      %% Line 756
			      <EX,EY>
				  when call 'erlang':'=<'
					(EX,
					 EY) ->
				  %% Line 757
				  case T of
				    %% Line 758
				    <[]> when 'true' ->
					%% Line 759
					L
				    %% Line 760
				    <[Z|[]]> when 'true' ->
					%% Line 761
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 762
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 763
					      L
					  %% Line 764
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 765
					      [X|[Z|[Y|[]]]]
					  %% Line 766
					  <_X_EZ> when 'true' ->
					      %% Line 767
					      [Z|[X|[Y|[]]]]
					end
				    %% Line 769
				    <_cor15>
					when call 'erlang':'=='
					      (X,
					       Y) ->
					%% Line 770
					apply 'keysort_1'/5
					    (I, Y, EY, T, [X|[]])
				    %% Line 771
				    <_cor16> when 'true' ->
					%% Line 772
					apply 'keysplit_1'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			      %% Line 774
			      <EX,EY> when 'true' ->
				  %% Line 775
				  case T of
				    %% Line 776
				    <[]> when 'true' ->
					%% Line 777
					[Y|[X|[]]]
				    %% Line 778
				    <[Z|[]]> when 'true' ->
					%% Line 779
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 780
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 781
					      [Y|[X|T]]
					  %% Line 782
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 783
					      [Y|[Z|[X|[]]]]
					  %% Line 784
					  <_X_EZ> when 'true' ->
					      %% Line 785
					      [Z|[Y|[X|[]]]]
					end
				    %% Line 787
				    <_cor17> when 'true' ->
					%% Line 788
					apply 'keysplit_2'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'keysort',2}}] )
	    -| ['compiler_generated'] )
	end
'keysort_1'/5 =
    %% Line 793
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,[Y|L],R>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 794
	      apply 'keysort_1'/5
		  (I, Y, EX, L, [X|R])
	  %% Line 795
	  <I,X,EX,[Y|L],R> when 'true' ->
	      %% Line 796
	      case call 'erlang':'element'
		       (I, Y) of
		%% Line 797
		<EY>
		    when call 'erlang':'=<'
			  (EX,
			   EY) ->
		    %% Line 798
		    apply 'keysplit_1'/8
			(I, X, EX, Y, EY, L, R, [])
		%% Line 799
		<EY> when 'true' ->
		    %% Line 800
		    apply 'keysplit_2'/8
			(I, X, EX, Y, EY, L, R, [])
	      end
	  %% Line 802
	  <_X_I,X,_X_EX,[],R> when 'true' ->
	      %% Line 803
	      call 'lists':'reverse'
		  (R, [X|[]])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keysort_1',5}}] )
	    -| ['compiler_generated'] )
	end
'keymerge'/3 =
    %% Line 814
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Index,T1,L2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 815
	      case L2 of
		%% Line 816
		<[]> when 'true' ->
		    %% Line 817
		    T1
		%% Line 818
		<[H2|T2]> when 'true' ->
		    let <E2> =
			%% Line 819
			call 'erlang':'element'
			    (Index, H2)
		    in  let <M> =
			    %% Line 820
			    apply 'keymerge2_1'/6
				(Index, T1, E2, H2, T2, [])
			in  %% Line 821
			    call 'lists':'reverse'
				(M, [])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'keymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge'/3 =
    %% Line 829
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Index,T1,L2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 830
	      case L2 of
		%% Line 831
		<[]> when 'true' ->
		    %% Line 832
		    T1
		%% Line 833
		<[H2|T2]> when 'true' ->
		    let <E2> =
			%% Line 834
			call 'erlang':'element'
			    (Index, H2)
		    in  let <M> =
			    %% Line 835
			    apply 'rkeymerge2_1'/6
				(Index, T1, E2, H2, T2, [])
			in  %% Line 836
			    call 'lists':'reverse'
				(M, [])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rkeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'ukeysort'/2 =
    %% Line 845
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,L>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor3> =
			call 'erlang':'>'
			    (I, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 846
	      case L of
		%% Line 847
		<[]> when 'true' ->
		    L
		%% Line 848
		<[_cor14|[]]> when 'true' ->
		    L
		%% Line 849
		<[X|[Y|T]]> when 'true' ->
		    let <_cor5> =
			%% Line 850
			call 'erlang':'element'
			    (I, X)
		    in  let <_cor4> =
			    %% Line 850
			    call 'erlang':'element'
				(I, Y)
			in  %% Line 850
			    case <_cor5,_cor4> of
			      %% Line 851
			      <EX,EY>
				  when call 'erlang':'=='
					(EX,
					 EY) ->
				  %% Line 852
				  apply 'ukeysort_1'/4
				      (I, X, EX, T)
			      %% Line 853
			      <EX,EY>
				  when call 'erlang':'<'
					(EX,
					 EY) ->
				  %% Line 854
				  case T of
				    %% Line 855
				    <[]> when 'true' ->
					%% Line 856
					L
				    %% Line 857
				    <[Z|[]]> when 'true' ->
					%% Line 858
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 859
					  <EZ>
					      when call 'erlang':'=='
						    (EY,
						     EZ) ->
					      %% Line 860
					      [X|[Y|[]]]
					  %% Line 861
					  <EZ>
					      when call 'erlang':'<'
						    (EY,
						     EZ) ->
					      %% Line 862
					      [X|[Y|[Z|[]]]]
					  %% Line 863
					  <EZ>
					      when call 'erlang':'=='
						    (EZ,
						     EX) ->
					      %% Line 864
					      [X|[Y|[]]]
					  %% Line 865
					  <EZ>
					      when call 'erlang':'=<'
						    (EX,
						     EZ) ->
					      %% Line 866
					      [X|[Z|[Y|[]]]]
					  %% Line 867
					  <_X_EZ> when 'true' ->
					      %% Line 868
					      [Z|[X|[Y|[]]]]
					end
				    %% Line 870
				    <_cor15> when 'true' ->
					%% Line 871
					apply 'ukeysplit_1'/8
					    (I, X, EX, Y, EY, T, [], [])
				  end
			      %% Line 873
			      <EX,EY> when 'true' ->
				  %% Line 874
				  case T of
				    %% Line 875
				    <[]> when 'true' ->
					%% Line 876
					[Y|[X|[]]]
				    %% Line 877
				    <[Z|[]]> when 'true' ->
					%% Line 878
					case call 'erlang':'element'
						 (I, Z) of
					  %% Line 879
					  <EZ>
					      when call 'erlang':'=='
						    (EX,
						     EZ) ->
					      %% Line 880
					      [Y|[X|[]]]
					  %% Line 881
					  <EZ>
					      when call 'erlang':'<'
						    (EX,
						     EZ) ->
					      %% Line 882
					      [Y|[X|[Z|[]]]]
					  %% Line 883
					  <EZ>
					      when call 'erlang':'=='
						    (EY,
						     EZ) ->
					      %% Line 884
					      [Y|[X|[]]]
					  %% Line 885
					  <EZ>
					      when call 'erlang':'=<'
						    (EY,
						     EZ) ->
					      %% Line 886
					      [Y|[Z|[X|[]]]]
					  %% Line 887
					  <_X_EZ> when 'true' ->
					      %% Line 888
					      [Z|[Y|[X|[]]]]
					end
				    %% Line 890
				    <_cor16> when 'true' ->
					%% Line 891
					apply 'ukeysplit_2'/5
					    (I, Y, EY, T, [X|[]])
				  end
			    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'ukeysort',2}}] )
	    -| ['compiler_generated'] )
	end
'ukeysort_1'/4 =
    %% Line 896
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,[Y|L]> when 'true' ->
	      %% Line 897
	      case call 'erlang':'element'
		       (I, Y) of
		%% Line 898
		<EY>
		    when call 'erlang':'=='
			  (EX,
			   EY) ->
		    %% Line 899
		    apply 'ukeysort_1'/4
			(I, X, EX, L)
		%% Line 900
		<EY>
		    when call 'erlang':'<'
			  (EX,
			   EY) ->
		    %% Line 901
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, [], [])
		%% Line 902
		<EY> when 'true' ->
		    %% Line 903
		    apply 'ukeysplit_2'/5
			(I, Y, EY, L, [X|[]])
	      end
	  %% Line 905
	  <_X_I,X,_X_EX,[]> when 'true' ->
	      %% Line 906
	      [X|[]]
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ukeysort_1',4}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge'/3 =
    %% Line 917
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Index,L1,T2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 918
	      case L1 of
		%% Line 919
		<[]> when 'true' ->
		    %% Line 920
		    T2
		%% Line 921
		<[H1|T1]> when 'true' ->
		    let <E1> =
			%% Line 922
			call 'erlang':'element'
			    (Index, H1)
		    in  let <M> =
			    %% Line 923
			    apply 'ukeymerge2_2'/6
				(Index, T1, E1, H1, T2, [])
			in  %% Line 924
			    call 'lists':'reverse'
				(M, [])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ukeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge'/3 =
    %% Line 932
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Index,T1,L2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			call 'erlang':'>'
			    (Index, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 933
	      case L2 of
		%% Line 934
		<[]> when 'true' ->
		    %% Line 935
		    T1
		%% Line 936
		<[H2|T2]> when 'true' ->
		    let <E2> =
			%% Line 937
			call 'erlang':'element'
			    (Index, H2)
		    in  let <M> =
			    %% Line 938
			    apply 'rukeymerge2_1'/6
				(Index, T1, E2, T2, [], H2)
			in  %% Line 939
			    call 'lists':'reverse'
				(M, [])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rukeymerge',3}}] )
	    -| ['compiler_generated'] )
	end
'keymap'/3 =
    %% Line 949
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,Index,[Tup|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 950
		  call 'erlang':'element'
		      (Index, Tup)
	      in  let <_cor4> =
		      %% Line 950
		      apply Fun
			  (_cor3)
		  in  let <_cor5> =
			  %% Line 950
			  call 'erlang':'setelement'
			      (Index, Tup, _cor4)
		      in  let <_cor6> =
			      %% Line 950
			      apply 'keymap'/3
				  (Fun, Index, Tail)
			  in  %% Line 950
			      [_cor5|_cor6]
	  %% Line 951
	  <Fun,Index,[]>
	      when try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor8> =
			    call 'erlang':'>='
				(Index, 1)
			in  let <_cor9> =
				%% Line 952
				call 'erlang':'is_function'
				    (Fun, 1)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 952
	      []
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keymap',3}}] )
	    -| ['compiler_generated'] )
	end
'sort'/2 =
    %% Line 962
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 963
	      []
	  %% Line 964
	  <Fun,L = [_cor5|[]]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 965
	      L
	  %% Line 966
	  <Fun,[X|[Y|T]]> when 'true' ->
	      %% Line 967
	      case apply Fun
		       (X, Y) of
		%% Line 968
		<'true'> when 'true' ->
		    %% Line 969
		    apply 'fsplit_1'/6
			(Y, X, Fun, T, [], [])
		%% Line 970
		<'false'> when 'true' ->
		    %% Line 971
		    apply 'fsplit_2'/6
			(Y, X, Fun, T, [], [])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'sort',2}}] )
	    -| ['compiler_generated'] )
	end
'merge'/3 =
    %% Line 982
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_cor3> =
		  %% Line 983
		  apply 'fmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 983
		  call 'lists':'reverse'
		      (_cor3, [])
	  %% Line 984
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 985
	      T1
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'merge',3}}] )
	    -| ['compiler_generated'] )
	end
'rmerge'/3 =
    %% Line 991
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_cor3> =
		  %% Line 992
		  apply 'rfmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 992
		  call 'lists':'reverse'
		      (_cor3, [])
	  %% Line 993
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 994
	      T1
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rmerge',3}}] )
	    -| ['compiler_generated'] )
	end
'usort'/2 =
    %% Line 1002
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,L = [_cor4|[]]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1003
	      L
	  %% Line 1004
	  <Fun,L = []>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1005
	      L
	  %% Line 1006
	  <Fun,[X|L]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1007
	      apply 'usort_1'/3
		  (Fun, X, L)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'usort',2}}] )
	    -| ['compiler_generated'] )
	end
'usort_1'/3 =
    %% Line 1009
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,X,[Y|L]> when 'true' ->
	      %% Line 1010
	      case apply Fun
		       (X, Y) of
		%% Line 1011
		<'true'> when 'true' ->
		    %% Line 1012
		    case apply Fun
			     (Y, X) of
		      %% Line 1013
		      <'true'> when 'true' ->
			  %% Line 1014
			  case L of
			    %% Line 1015
			    <[]> when 'true' ->
				%% Line 1016
				[X|[]]
			    %% Line 1017
			    <_cor9> when 'true' ->
				%% Line 1018
				apply 'usort_1'/3
				    (Fun, X, L)
			  end
		      %% Line 1020
		      <'false'> when 'true' ->
			  %% Line 1021
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, [], [])
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 1023
		<'false'> when 'true' ->
		    %% Line 1024
		    apply 'ufsplit_2'/4
			(Y, L, Fun, [X|[]])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'usort_1',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/3 =
    %% Line 1035
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,[],T2>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1036
	      T2
	  %% Line 1037
	  <Fun,[H1|T1],T2>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_cor3> =
		  %% Line 1038
		  apply 'ufmerge2_2'/5
		      (H1, T1, Fun, T2, [])
	      in  %% Line 1038
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'umerge',3}}] )
	    -| ['compiler_generated'] )
	end
'rumerge'/3 =
    %% Line 1044
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,T1,[]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      %% Line 1045
	      T1
	  %% Line 1046
	  <Fun,T1,[H2|T2]>
	      when call 'erlang':'is_function'
		    (Fun,
		     2) ->
	      let <_cor3> =
		  %% Line 1047
		  apply 'rufmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 1047
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rumerge',3}}] )
	    -| ['compiler_generated'] )
	end
'usort'/1 =
    %% Line 1057
    fun (_cor0) ->
	case _cor0 of
	  <L0 = [X|[Y|L]]>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 1058
	      case L of
		%% Line 1059
		<[]> when 'true' ->
		    %% Line 1060
		    L0
		%% Line 1061
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Y,
			   Z) ->
		    %% Line 1062
		    L0
		%% Line 1063
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Y,
			   Z) ->
		    %% Line 1064
		    [X|[Y|[]]]
		%% Line 1065
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Z,
			   X) ->
		    %% Line 1066
		    [Z|[X|[Y|[]]]]
		%% Line 1067
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Z,
			   X) ->
		    %% Line 1068
		    [X|[Y|[]]]
		%% Line 1069
		<[Z|[]]> when 'true' ->
		    %% Line 1070
		    [X|[Z|[Y|[]]]]
		%% Line 1071
		<_cor4> when 'true' ->
		    %% Line 1072
		    apply 'usplit_1'/5
			(X, Y, L, [], [])
	      end
	  %% Line 1074
	  <[X|[Y|L]]>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 1075
	      case L of
		%% Line 1076
		<[]> when 'true' ->
		    %% Line 1077
		    [Y|[X|[]]]
		%% Line 1078
		<[Z|[]]>
		    when call 'erlang':'<'
			  (X,
			   Z) ->
		    %% Line 1079
		    [Y|[X|L]]
		%% Line 1080
		<[Z|[]]>
		    when call 'erlang':'=='
			  (X,
			   Z) ->
		    %% Line 1081
		    [Y|[X|[]]]
		%% Line 1082
		<[Z|[]]>
		    when call 'erlang':'<'
			  (Z,
			   Y) ->
		    %% Line 1083
		    [Z|[Y|[X|[]]]]
		%% Line 1084
		<[Z|[]]>
		    when call 'erlang':'=='
			  (Z,
			   Y) ->
		    %% Line 1085
		    [Y|[X|[]]]
		%% Line 1086
		<[Z|[]]> when 'true' ->
		    %% Line 1087
		    [Y|[Z|[X|[]]]]
		%% Line 1088
		<_cor5> when 'true' ->
		    %% Line 1089
		    apply 'usplit_2'/5
			(X, Y, L, [], [])
	      end
	  %% Line 1091
	  <[X|[_X_Y|L]]> when 'true' ->
	      %% Line 1092
	      apply 'usort_1'/2
		  (X, L)
	  %% Line 1093
	  <L = [_cor6|[]]> when 'true' ->
	      %% Line 1094
	      L
	  %% Line 1095
	  <[]> when 'true' ->
	      %% Line 1096
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'usort',1}}] )
	    -| ['compiler_generated'] )
	end
'usort_1'/2 =
    %% Line 1098
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,[Y|L]>
	      when call 'erlang':'=='
		    (X,
		     Y) ->
	      %% Line 1099
	      apply 'usort_1'/2
		  (X, L)
	  %% Line 1100
	  <X,[Y|L]>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 1101
	      apply 'usplit_1'/5
		  (X, Y, L, [], [])
	  %% Line 1102
	  <X,[Y|L]> when 'true' ->
	      %% Line 1103
	      apply 'usplit_2'/5
		  (X, Y, L, [], [])
	  %% Line 1104
	  <X,[]> when 'true' ->
	      %% Line 1105
	      [X|[]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'usort_1',2}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/1 =
    %% Line 1116
    fun (_cor0) ->
	%% Line 1117
	apply 'umergel'/1
	    (_cor0)
'umerge3'/3 =
    %% Line 1132
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1,[],L3> when 'true' ->
	      %% Line 1133
	      apply 'umerge'/2
		  (L1, L3)
	  %% Line 1134
	  <L1,L2,[]> when 'true' ->
	      %% Line 1135
	      apply 'umerge'/2
		  (L1, L2)
	  %% Line 1136
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_cor3> =
		  %% Line 1137
		  apply 'umerge3_1'/7
		      (L1, [H2|H3], T2, H2, [], T3, H3)
	      in  %% Line 1137
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'umerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3'/3 =
    %% Line 1145
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1,[],L3> when 'true' ->
	      %% Line 1146
	      apply 'rumerge'/2
		  (L1, L3)
	  %% Line 1147
	  <L1,L2,[]> when 'true' ->
	      %% Line 1148
	      apply 'rumerge'/2
		  (L1, L2)
	  %% Line 1149
	  <L1,[H2|T2],[H3|T3]> when 'true' ->
	      let <_cor3> =
		  %% Line 1150
		  apply 'rumerge3_1'/6
		      (L1, T2, H2, [], T3, H3)
	      in  %% Line 1150
		  call 'lists':'reverse'
		      (_cor3, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rumerge3',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge'/2 =
    %% Line 1162
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],T2> when 'true' ->
	      %% Line 1163
	      T2
	  %% Line 1164
	  <[H1|T1],T2> when 'true' ->
	      let <_cor2> =
		  %% Line 1165
		  apply 'umerge2_2'/4
		      (T1, T2, [], H1)
	      in  %% Line 1165
		  call 'lists':'reverse'
		      (_cor2, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'umerge',2}}] )
	    -| ['compiler_generated'] )
	end
'rumerge'/2 =
    %% Line 1175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1,[]> when 'true' ->
	      %% Line 1176
	      T1
	  %% Line 1177
	  <T1,[H2|T2]> when 'true' ->
	      let <_cor2> =
		  %% Line 1178
		  apply 'rumerge2_1'/4
		      (T1, T2, [], H2)
	      in  %% Line 1178
		  call 'lists':'reverse'
		      (_cor2, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'rumerge',2}}] )
	    -| ['compiler_generated'] )
	end
'all'/2 =
    %% Line 1210
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1211
	      case apply Pred
		       (Hd) of
		%% Line 1212
		<'true'> when 'true' ->
		    apply 'all'/2
			(Pred, Tail)
		%% Line 1213
		<'false'> when 'true' ->
		    'false'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1215
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      'true'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'all',2}}] )
	    -| ['compiler_generated'] )
	end
'any'/2 =
    %% Line 1222
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1223
	      case apply Pred
		       (Hd) of
		%% Line 1224
		<'true'> when 'true' ->
		    'true'
		%% Line 1225
		<'false'> when 'true' ->
		    apply 'any'/2
			(Pred, Tail)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1227
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      'false'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'any',2}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 1236
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[H|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 1237
		  apply F
		      (H)
	      in  let <_cor3> =
		      %% Line 1237
		      apply 'map'/2
			  (F, T)
		  in  %% Line 1237
		      [_cor2|_cor3]
	  %% Line 1238
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'flatmap'/2 =
    %% Line 1247
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[Hd|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 1248
		  apply F
		      (Hd)
	      in  let <_cor2> =
		      %% Line 1248
		      apply 'flatmap'/2
			  (F, Tail)
		  in  %% Line 1248
		      call 'erlang':'++'
			  (_cor3, _cor2)
	  %% Line 1249
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'flatmap',2}}] )
	    -| ['compiler_generated'] )
	end
'foldl'/3 =
    %% Line 1260
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu,[Hd|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 1261
		  apply F
		      (Hd, Accu)
	      in  %% Line 1261
		  apply 'foldl'/3
		      (F, _cor3, Tail)
	  %% Line 1262
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      Accu
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'foldl',3}}] )
	    -| ['compiler_generated'] )
	end
'foldr'/3 =
    %% Line 1273
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu,[Hd|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 1274
		  apply 'foldr'/3
		      (F, Accu, Tail)
	      in  %% Line 1274
		  apply F
		      (Hd, _cor3)
	  %% Line 1275
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      Accu
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'foldr',3}}] )
	    -| ['compiler_generated'] )
	end
'filter'/2 =
    %% Line 1283
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,List>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      %% Line 1284
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[E|_cor3]> when 'true' ->
				  ( case apply Pred
					     (E) of
				      <'true'> when 'true' ->
					  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [E|_cor5]
						-| ['compiler_generated'] )
				      ( <'false'> when 'true' ->
					    apply 'lc$^0'/1
						(_cor3)
					-| ['compiler_generated'] )
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor6})
					-| ['compiler_generated'] )
				    end
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'filter',2}}] )
	    -| ['compiler_generated'] )
	end
'partition'/2 =
    %% Line 1296
    fun (_cor1,_cor0) ->
	%% Line 1297
	apply 'partition'/4
	    (_cor1, _cor0, [], [])
'partition'/4 =
    %% Line 1299
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Pred,[H|T],As,Bs> when 'true' ->
	      %% Line 1300
	      case apply Pred
		       (H) of
		%% Line 1301
		<'true'> when 'true' ->
		    apply 'partition'/4
			(Pred, T, [H|As], Bs)
		%% Line 1302
		<'false'> when 'true' ->
		    apply 'partition'/4
			(Pred, T, As, [H|Bs])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1304
	  <Pred,[],As,Bs>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      let <_cor6> =
		  %% Line 1305
		  apply 'reverse'/1
		      (As)
	      in  let <_cor5> =
		      %% Line 1305
		      apply 'reverse'/1
			  (Bs)
		  in  %% Line 1305
		      {_cor6,_cor5}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'partition',4}}] )
	    -| ['compiler_generated'] )
	end
'filtermap'/2 =
    %% Line 1314
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[Hd|Tail]> when 'true' ->
	      %% Line 1315
	      case apply F
		       (Hd) of
		%% Line 1316
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 1317
			apply 'filtermap'/2
			    (F, Tail)
		    in  %% Line 1317
			[Hd|_cor2]
		%% Line 1318
		<{'true',Val}> when 'true' ->
		    let <_cor3> =
			%% Line 1319
			apply 'filtermap'/2
			    (F, Tail)
		    in  %% Line 1319
			[Val|_cor3]
		%% Line 1320
		<'false'> when 'true' ->
		    %% Line 1321
		    apply 'filtermap'/2
			(F, Tail)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1323
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'filtermap',2}}] )
	    -| ['compiler_generated'] )
	end
'zf'/2 =
    %% Line 1327
    fun (_cor1,_cor0) ->
	%% Line 1328
	apply 'filtermap'/2
	    (_cor1, _cor0)
'foreach'/2 =
    %% Line 1335
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[Hd|Tail]> when 'true' ->
	      do  %% Line 1336
		  apply F
		      (Hd)
		  %% Line 1337
		  apply 'foreach'/2
		      (F, Tail)
	  %% Line 1338
	  <F,[]>
	      when call 'erlang':'is_function'
		    (F,
		     1) ->
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'foreach',2}}] )
	    -| ['compiler_generated'] )
	end
'mapfoldl'/3 =
    %% Line 1351
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu0,[Hd|Tail]> when 'true' ->
	      %% Line 1352
	      case apply F
		       (Hd, Accu0) of
		<{R,Accu1}> when 'true' ->
		    %% Line 1353
		    case apply 'mapfoldl'/3
			     (F, Accu1, Tail) of
		      <{Rs,Accu2}> when 'true' ->
			  %% Line 1354
			  {[R|Rs],Accu2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1355
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      {[],Accu}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mapfoldl',3}}] )
	    -| ['compiler_generated'] )
	end
'mapfoldr'/3 =
    %% Line 1368
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu0,[Hd|Tail]> when 'true' ->
	      %% Line 1369
	      case apply 'mapfoldr'/3
		       (F, Accu0, Tail) of
		<{Rs,Accu1}> when 'true' ->
		    %% Line 1370
		    case apply F
			     (Hd, Accu1) of
		      <{R,Accu2}> when 'true' ->
			  %% Line 1371
			  {[R|Rs],Accu2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1372
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      {[],Accu}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mapfoldr',3}}] )
	    -| ['compiler_generated'] )
	end
'takewhile'/2 =
    %% Line 1380
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,[Hd|Tail]> when 'true' ->
	      %% Line 1381
	      case apply Pred
		       (Hd) of
		%% Line 1382
		<'true'> when 'true' ->
		    let <_cor2> =
			apply 'takewhile'/2
			    (Pred, Tail)
		    in  [Hd|_cor2]
		%% Line 1383
		<'false'> when 'true' ->
		    []
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1385
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'takewhile',2}}] )
	    -| ['compiler_generated'] )
	end
'dropwhile'/2 =
    %% Line 1393
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,Rest = [Hd|Tail]> when 'true' ->
	      %% Line 1394
	      case apply Pred
		       (Hd) of
		%% Line 1395
		<'true'> when 'true' ->
		    apply 'dropwhile'/2
			(Pred, Tail)
		%% Line 1396
		<'false'> when 'true' ->
		    Rest
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1398
	  <Pred,[]>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'dropwhile',2}}] )
	    -| ['compiler_generated'] )
	end
'splitwith'/2 =
    %% Line 1407
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pred,List>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      %% Line 1408
	      apply 'splitwith'/3
		  (Pred, List, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'splitwith',2}}] )
	    -| ['compiler_generated'] )
	end
'splitwith'/3 =
    %% Line 1410
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pred,[Hd|Tail],Taken> when 'true' ->
	      %% Line 1411
	      case apply Pred
		       (Hd) of
		%% Line 1412
		<'true'> when 'true' ->
		    apply 'splitwith'/3
			(Pred, Tail, [Hd|Taken])
		%% Line 1413
		<'false'> when 'true' ->
		    let <_cor3> =
			apply 'reverse'/1
			    (Taken)
		    in  {_cor3,[Hd|Tail]}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1415
	  <Pred,[],Taken>
	      when call 'erlang':'is_function'
		    (Pred,
		     1) ->
	      let <_cor5> =
		  %% Line 1416
		  apply 'reverse'/1
		      (Taken)
	      in  %% Line 1416
		  {_cor5,[]}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'splitwith',3}}] )
	    -| ['compiler_generated'] )
	end
'split'/2 =
    %% Line 1425
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,List>
	      when try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor3> =
			    call 'erlang':'>='
				(N, 0)
			in  let <_cor4> =
				call 'erlang':'is_list'
				    (List)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1426
	      case apply 'split'/3
		       (N, List, []) of
		%% Line 1427
		<Result = {_cor9,_cor10}> when 'true' ->
		    Result
		%% Line 1428
		<Fault>
		    when call 'erlang':'is_atom'
			  (Fault) ->
		    %% Line 1429
		    call 'erlang':'error'
			(Fault, [N|[List|[]]])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1431
	  <N,List> when 'true' ->
	      %% Line 1432
	      call 'erlang':'error'
		  ('badarg', [N|[List|[]]])
	end
'split'/3 =
    %% Line 1434
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,L,R> when 'true' ->
	      let <_cor3> =
		  %% Line 1435
		  call 'lists':'reverse'
		      (R, [])
	      in  %% Line 1435
		  {_cor3,L}
	  %% Line 1436
	  <N,[H|T],R> when 'true' ->
	      let <_cor4> =
		  %% Line 1437
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1437
		  apply 'split'/3
		      (_cor4, T, [H|R])
	  %% Line 1438
	  <_cor8,[],_cor9> when 'true' ->
	      %% Line 1439
	      'badarg'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'split_1'/5 =
    %% Line 1468
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>='
		    (Z,
		     Y) ->
	      %% Line 1469
	      apply 'split_1'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1470
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>='
		    (Z,
		     X) ->
	      %% Line 1471
	      apply 'split_1'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1472
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1473
	      apply 'split_1'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1474
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1475
	      apply 'split_1_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1476
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1477
	      apply 'rmergel'/2
		  ([[Y|[X|R]]|Rs], [])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split_1',5}}] )
	    -| ['compiler_generated'] )
	end
'split_1_1'/6 =
    %% Line 1479
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>='
		    (Z,
		     Y) ->
	      %% Line 1480
	      apply 'split_1_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1481
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>='
		    (Z,
		     X) ->
	      %% Line 1482
	      apply 'split_1_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1483
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (S,
		     Z) ->
	      %% Line 1484
	      apply 'split_1'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1485
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1486
	      apply 'split_1'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1487
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1488
	      apply 'rmergel'/2
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_1_1',6}}] )
	    -| ['compiler_generated'] )
	end
'split_2'/5 =
    %% Line 1491
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=<'
		    (Z,
		     Y) ->
	      %% Line 1492
	      apply 'split_2'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1493
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=<'
		    (Z,
		     X) ->
	      %% Line 1494
	      apply 'split_2'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1495
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1496
	      apply 'split_2'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1497
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1498
	      apply 'split_2_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1499
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1500
	      apply 'mergel'/2
		  ([[Y|[X|R]]|Rs], [])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split_2',5}}] )
	    -| ['compiler_generated'] )
	end
'split_2_1'/6 =
    %% Line 1502
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (Z,
		     Y) ->
	      %% Line 1503
	      apply 'split_2_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1504
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=<'
		    (Z,
		     X) ->
	      %% Line 1505
	      apply 'split_2_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1506
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (S,
		     Z) ->
	      %% Line 1507
	      apply 'split_2'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1508
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1509
	      apply 'split_2'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1510
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1511
	      apply 'mergel'/2
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'mergel'/2 =
    %% Line 1515
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[]|L],Acc> when 'true' ->
	      %% Line 1516
	      apply 'mergel'/2
		  (L, Acc)
	  %% Line 1517
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1518
		  apply 'merge3_1'/6
		      (T1, [], H2, T2, H3, T3)
	      in  %% Line 1518
		  apply 'mergel'/2
		      (L, [_cor2|Acc])
	  %% Line 1519
	  <[T1|[[H2|T2]|[]]],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1520
		  apply 'merge2_1'/4
		      (T1, H2, T2, [])
	      in  %% Line 1520
		  apply 'rmergel'/2
		      ([_cor3|Acc], [])
	  %% Line 1521
	  <[L|[]],[]> when 'true' ->
	      %% Line 1522
	      L
	  %% Line 1523
	  <[L|[]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1524
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1524
		  apply 'rmergel'/2
		      ([_cor4|Acc], [])
	  %% Line 1525
	  <[],[]> when 'true' ->
	      %% Line 1526
	      []
	  %% Line 1527
	  <[],Acc> when 'true' ->
	      %% Line 1528
	      apply 'rmergel'/2
		  (Acc, [])
	  %% Line 1529
	  <[A|[[]|L]],Acc> when 'true' ->
	      %% Line 1530
	      apply 'mergel'/2
		  ([A|L], Acc)
	  %% Line 1531
	  <[A|[B|[[]|L]]],Acc> when 'true' ->
	      %% Line 1532
	      apply 'mergel'/2
		  ([A|[B|L]], Acc)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'mergel',2}}] )
	    -| ['compiler_generated'] )
	end
'rmergel'/2 =
    %% Line 1534
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1535
		  apply 'rmerge3_1'/6
		      (T1, [], H2, T2, H3, T3)
	      in  %% Line 1535
		  apply 'rmergel'/2
		      (L, [_cor2|Acc])
	  %% Line 1536
	  <[[H2|T2]|[T1|[]]],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1537
		  apply 'rmerge2_1'/4
		      (T1, H2, T2, [])
	      in  %% Line 1537
		  apply 'mergel'/2
		      ([_cor3|Acc], [])
	  %% Line 1538
	  <[L|[]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1539
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1539
		  apply 'mergel'/2
		      ([_cor4|Acc], [])
	  %% Line 1540
	  <[],Acc> when 'true' ->
	      %% Line 1541
	      apply 'mergel'/2
		  (Acc, [])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'rmergel',2}}] )
	    -| ['compiler_generated'] )
	end
'merge3_1'/6 =
    %% Line 1546
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1566
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol34,_fol35,_fol36,_fol37,_fol38,_fol39,_fol40>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol35,
				 _fol38)
			    -| ['compiler_generated'] ) ->
			%% Line 1567
			( apply ( 'merge3_1'/6
				  -| ['compiler_generated'] )
			      (_fol34, ( [_fol35|_fol40]
					 -| ['compiler_generated'] ), _fol36, _fol37, _fol38, _fol39)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1568
		  ( <_fol41,_fol42,_fol43,_fol44,_fol45,_fol46,_fol47> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1569
			( apply ( 'merge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol41, _fol42, _fol43, _fol44, ( [_fol45|_fol47]
								 -| ['compiler_generated'] ), _fol46)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1548
	  <[H1|T1],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1580
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol48,_fol49,_fol50,_fol51,_fol52,_fol53,_fol54>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol50,
				 _fol52)
			    -| ['compiler_generated'] ) ->
			%% Line 1581
			( apply ( 'merge3_2'/6
				  -| ['compiler_generated'] )
			      (_fol48, _fol49, ( [_fol50|_fol54]
						 -| ['compiler_generated'] ), _fol51, _fol52, _fol53)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1582
		  ( <_fol55,_fol56,_fol57,_fol58,_fol59,_fol60,_fol61> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1583
			( apply ( 'merge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol55, _fol56, _fol57, _fol58, ( [_fol59|_fol61]
								 -| ['compiler_generated'] ), _fol60)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1550
	  <[],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1551
	      apply 'merge2_1'/4
		  (T2, H3, T3, [H2|M])
	  %% Line 1552
	  <[],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1553
	      apply 'merge2_2'/5
		  (T2, H3, T3, M, H2)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_2'/6 =
    %% Line 1556
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,M,[H2|T2],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1566
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol62,_fol63,_fol64,_fol65,_fol66,_fol67,_fol68>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol63,
				 _fol66)
			    -| ['compiler_generated'] ) ->
			%% Line 1567
			( apply ( 'merge3_1'/6
				  -| ['compiler_generated'] )
			      (_fol62, ( [_fol63|_fol68]
					 -| ['compiler_generated'] ), _fol64, _fol65, _fol66, _fol67)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1568
		  ( <_fol69,_fol70,_fol71,_fol72,_fol73,_fol74,_fol75> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1569
			( apply ( 'merge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol69, _fol70, _fol71, _fol72, ( [_fol73|_fol75]
								 -| ['compiler_generated'] ), _fol74)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1558
	  <T1,H1,M,[H2|T2],H3,T3> when 'true' ->
	      %% Line 1580
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol76,_fol77,_fol78,_fol79,_fol80,_fol81,_fol82>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol78,
				 _fol80)
			    -| ['compiler_generated'] ) ->
			%% Line 1581
			( apply ( 'merge3_2'/6
				  -| ['compiler_generated'] )
			      (_fol76, _fol77, ( [_fol78|_fol82]
						 -| ['compiler_generated'] ), _fol79, _fol80, _fol81)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1582
		  ( <_fol83,_fol84,_fol85,_fol86,_fol87,_fol88,_fol89> when ( 'true'
									      -| ['compiler_generated'] ) ->
			%% Line 1583
			( apply ( 'merge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol83, _fol84, _fol85, _fol86, ( [_fol87|_fol89]
								 -| ['compiler_generated'] ), _fol88)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1560
	  <T1,H1,M,[],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1561
	      apply 'merge2_1'/4
		  (T1, H3, T3, [H1|M])
	  %% Line 1562
	  <T1,H1,M,[],H3,T3> when 'true' ->
	      %% Line 1563
	      apply 'merge2_2'/5
		  (T1, H3, T3, M, H1)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge3_2',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_12'/7 =
    %% Line 1566
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1567
	      apply 'merge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1568
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1569
	      apply 'merge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	end
'merge3_12_3'/6 =
    %% Line 1572
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1573
	      apply 'merge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1574
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1575
	      apply 'merge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1576
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1577
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|M])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'merge3_21'/7 =
    %% Line 1580
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1581
	      apply 'merge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1582
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1583
	      apply 'merge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	end
'merge3_21_3'/6 =
    %% Line 1586
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1587
	      apply 'merge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1588
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1589
	      apply 'merge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1590
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1591
	      apply 'merge2_2'/5
		  (T1, H2, T2, M, H1)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_1'/6 =
    %% Line 1596
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1616
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol90,_fol91,_fol92,_fol93,_fol94,_fol95,_fol96>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol92,
				 _fol94)
			    -| ['compiler_generated'] ) ->
			%% Line 1617
			( apply ( 'rmerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol90, _fol91, _fol92, _fol93, ( [_fol94|_fol96]
								 -| ['compiler_generated'] ), _fol95)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1618
		  ( <_fol97,_fol98,_fol99,_fol100,_fol101,_fol102,_fol103> when ( 'true'
										  -| ['compiler_generated'] ) ->
			%% Line 1619
			( apply ( 'rmerge3_2'/6
				  -| ['compiler_generated'] )
			      (_fol97, _fol98, ( [_fol99|_fol103]
						 -| ['compiler_generated'] ), _fol100, _fol101, _fol102)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1598
	  <[H1|T1],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1630
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol104,_fol105,_fol106,_fol107,_fol108,_fol109,_fol110>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol105,
				 _fol108)
			    -| ['compiler_generated'] ) ->
			%% Line 1631
			( apply ( 'rmerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol104, _fol105, _fol106, _fol107, ( [_fol108|_fol110]
								     -| ['compiler_generated'] ), _fol109)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1632
		  ( <_fol111,_fol112,_fol113,_fol114,_fol115,_fol116,_fol117> when ( 'true'
										     -| ['compiler_generated'] ) ->
			%% Line 1633
			( apply ( 'rmerge3_1'/6
				  -| ['compiler_generated'] )
			      (_fol111, ( [_fol112|_fol117]
					  -| ['compiler_generated'] ), _fol113, _fol114, _fol115, _fol116)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1600
	  <[],M,H2,T2,H3,T3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1601
	      apply 'rmerge2_2'/5
		  (T2, H3, T3, M, H2)
	  %% Line 1602
	  <[],M,H2,T2,H3,T3> when 'true' ->
	      %% Line 1603
	      apply 'rmerge2_1'/4
		  (T2, H3, T3, [H2|M])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rmerge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_2'/6 =
    %% Line 1606
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,M,[H2|T2],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1616
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol118,_fol119,_fol120,_fol121,_fol122,_fol123,_fol124>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol120,
				 _fol122)
			    -| ['compiler_generated'] ) ->
			%% Line 1617
			( apply ( 'rmerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol118, _fol119, _fol120, _fol121, ( [_fol122|_fol124]
								     -| ['compiler_generated'] ), _fol123)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1618
		  ( <_fol125,_fol126,_fol127,_fol128,_fol129,_fol130,_fol131> when ( 'true'
										     -| ['compiler_generated'] ) ->
			%% Line 1619
			( apply ( 'rmerge3_2'/6
				  -| ['compiler_generated'] )
			      (_fol125, _fol126, ( [_fol127|_fol131]
						   -| ['compiler_generated'] ), _fol128, _fol129, _fol130)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1608
	  <T1,H1,M,[H2|T2],H3,T3> when 'true' ->
	      %% Line 1630
	      ( case <T1,H1,H2,T2,H3,T3,M> of
		  ( <_fol132,_fol133,_fol134,_fol135,_fol136,_fol137,_fol138>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol133,
				 _fol136)
			    -| ['compiler_generated'] ) ->
			%% Line 1631
			( apply ( 'rmerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol132, _fol133, _fol134, _fol135, ( [_fol136|_fol138]
								     -| ['compiler_generated'] ), _fol137)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1632
		  ( <_fol139,_fol140,_fol141,_fol142,_fol143,_fol144,_fol145> when ( 'true'
										     -| ['compiler_generated'] ) ->
			%% Line 1633
			( apply ( 'rmerge3_1'/6
				  -| ['compiler_generated'] )
			      (_fol139, ( [_fol140|_fol145]
					  -| ['compiler_generated'] ), _fol141, _fol142, _fol143, _fol144)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1610
	  <T1,H1,M,[],H3,T3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1611
	      apply 'rmerge2_2'/5
		  (T1, H3, T3, M, H1)
	  %% Line 1612
	  <T1,H1,M,[],H3,T3> when 'true' ->
	      %% Line 1613
	      apply 'rmerge2_1'/4
		  (T1, H3, T3, [H1|M])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rmerge3_2',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_12'/7 =
    %% Line 1616
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1617
	      apply 'rmerge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1618
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1619
	      apply 'rmerge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	end
'rmerge3_12_3'/6 =
    %% Line 1622
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1623
	      apply 'rmerge3_12_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1624
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1625
	      apply 'rmerge3_2'/6
		  (T1, H1, [H2|M], T2, H3, T3)
	  %% Line 1626
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1627
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, M, H1)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rmerge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rmerge3_21'/7 =
    %% Line 1630
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,H3,T3,M>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1631
	      apply 'rmerge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1632
	  <T1,H1,H2,T2,H3,T3,M> when 'true' ->
	      %% Line 1633
	      apply 'rmerge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	end
'rmerge3_21_3'/6 =
    %% Line 1636
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,H2,T2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1637
	      apply 'rmerge3_21_3'/6
		  (T1, H1, H2, T2, [H3|M], T3)
	  %% Line 1638
	  <T1,H1,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 1639
	      apply 'rmerge3_1'/6
		  (T1, [H1|M], H2, T2, H3, T3)
	  %% Line 1640
	  <T1,H1,H2,T2,M,[]> when 'true' ->
	      %% Line 1641
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|M])
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rmerge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'merge2_1'/4 =
    %% Line 1645
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,T2,M>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1646
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|M])
	  %% Line 1647
	  <[H1|T1],H2,T2,M> when 'true' ->
	      %% Line 1648
	      apply 'merge2_2'/5
		  (T1, H2, T2, M, H1)
	  %% Line 1649
	  <[],H2,T2,M> when 'true' ->
	      %% Line 1650
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'merge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'merge2_2'/5 =
    %% Line 1652
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,HdM,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1653
	      apply 'merge2_1'/4
		  (T1, H2, T2, [H1|[HdM|M]])
	  %% Line 1654
	  <T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 1655
	      apply 'merge2_2'/5
		  (T1, H2, T2, [HdM|M], H1)
	  %% Line 1656
	  <T1,HdM,[],M,H1> when 'true' ->
	      %% Line 1657
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'merge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rmerge2_1'/4 =
    %% Line 1661
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,T2,M>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1662
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, M, H1)
	  %% Line 1663
	  <[H1|T1],H2,T2,M> when 'true' ->
	      %% Line 1664
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|M])
	  %% Line 1665
	  <[],H2,T2,M> when 'true' ->
	      %% Line 1666
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rmerge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'rmerge2_2'/5 =
    %% Line 1668
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,HdM,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1669
	      apply 'rmerge2_2'/5
		  (T1, H2, T2, [HdM|M], H1)
	  %% Line 1670
	  <T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 1671
	      apply 'rmerge2_1'/4
		  (T1, H2, T2, [H1|[HdM|M]])
	  %% Line 1672
	  <T1,HdM,[],M,H1> when 'true' ->
	      %% Line 1673
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_1'/5 =
    %% Line 1678
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>'
		    (Z,
		     Y) ->
	      %% Line 1679
	      apply 'usplit_1'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1680
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1681
	      apply 'usplit_1'/5
		  (X, Y, L, R, Rs)
	  %% Line 1682
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'>'
		    (Z,
		     X) ->
	      %% Line 1683
	      apply 'usplit_1'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1684
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1685
	      apply 'usplit_1'/5
		  (X, Y, L, R, Rs)
	  %% Line 1686
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1687
	      apply 'usplit_1'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1688
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1689
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1690
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1691
	      apply 'rumergel'/3
		  ([[Y|[X|R]]|Rs], [], 'asc')
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'usplit_1',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_1_1'/6 =
    %% Line 1693
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     Y) ->
	      %% Line 1694
	      apply 'usplit_1_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1695
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1696
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1697
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     X) ->
	      %% Line 1698
	      apply 'usplit_1_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1699
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1700
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1701
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'>'
		    (Z,
		     S) ->
	      %% Line 1702
	      apply 'usplit_1'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1703
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     S) ->
	      %% Line 1704
	      apply 'usplit_1_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1705
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1706
	      apply 'usplit_1'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1707
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1708
	      apply 'rumergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], 'asc')
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'usplit_1_1',6}}] )
	    -| ['compiler_generated'] )
	end
'usplit_2'/5 =
    %% Line 1711
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'<'
		    (Z,
		     Y) ->
	      %% Line 1712
	      apply 'usplit_2'/5
		  (Y, Z, L, [X|R], Rs)
	  %% Line 1713
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1714
	      apply 'usplit_2'/5
		  (X, Y, L, R, Rs)
	  %% Line 1715
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'<'
		    (Z,
		     X) ->
	      %% Line 1716
	      apply 'usplit_2'/5
		  (Z, Y, L, [X|R], Rs)
	  %% Line 1717
	  <X,Y,[Z|L],R,Rs>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1718
	      apply 'usplit_2'/5
		  (X, Y, L, R, Rs)
	  %% Line 1719
	  <X,Y,[Z|L],[],Rs> when 'true' ->
	      %% Line 1720
	      apply 'usplit_2'/5
		  (X, Y, L, [Z|[]], Rs)
	  %% Line 1721
	  <X,Y,[Z|L],R,Rs> when 'true' ->
	      %% Line 1722
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, Z)
	  %% Line 1723
	  <X,Y,[],R,Rs> when 'true' ->
	      %% Line 1724
	      apply 'umergel'/3
		  ([[Y|[X|R]]|Rs], [], 'desc')
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'usplit_2',5}}] )
	    -| ['compiler_generated'] )
	end
'usplit_2_1'/6 =
    %% Line 1726
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     Y) ->
	      %% Line 1727
	      apply 'usplit_2_1'/6
		  (Y, Z, L, [X|R], Rs, S)
	  %% Line 1728
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     Y) ->
	      %% Line 1729
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1730
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     X) ->
	      %% Line 1731
	      apply 'usplit_2_1'/6
		  (Z, Y, L, [X|R], Rs, S)
	  %% Line 1732
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     X) ->
	      %% Line 1733
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1734
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'<'
		    (Z,
		     S) ->
	      %% Line 1735
	      apply 'usplit_2'/5
		  (S, Z, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1736
	  <X,Y,[Z|L],R,Rs,S>
	      when call 'erlang':'=='
		    (Z,
		     S) ->
	      %% Line 1737
	      apply 'usplit_2_1'/6
		  (X, Y, L, R, Rs, S)
	  %% Line 1738
	  <X,Y,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 1739
	      apply 'usplit_2'/5
		  (Z, S, L, [], [[Y|[X|R]]|Rs])
	  %% Line 1740
	  <X,Y,[],R,Rs,S> when 'true' ->
	      %% Line 1741
	      apply 'umergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], 'desc')
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'usplit_2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'umergel'/1 =
    %% Line 1745
    fun (_cor0) ->
	%% Line 1746
	apply 'umergel'/3
	    (_cor0, [], 'asc')
'umergel'/3 =
    %% Line 1748
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[]|L],Acc,O> when 'true' ->
	      %% Line 1749
	      apply 'umergel'/3
		  (L, Acc, O)
	  %% Line 1750
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,'asc'> when 'true' ->
	      let <_cor3> =
		  %% Line 1751
		  apply 'umerge3_1'/7
		      (T1, [H2|H3], T2, H2, [], T3, H3)
	      in  %% Line 1751
		  apply 'umergel'/3
		      (L, [_cor3|Acc], 'asc')
	  %% Line 1752
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,'desc'> when 'true' ->
	      let <_cor4> =
		  %% Line 1753
		  apply 'umerge3_1'/7
		      (T1, [H2|H3], T2, H2, [], T3, H3)
	      in  %% Line 1753
		  apply 'umergel'/3
		      (L, [_cor4|Acc], 'desc')
	  %% Line 1754
	  <[A|[[]|L]],Acc,O> when 'true' ->
	      %% Line 1755
	      apply 'umergel'/3
		  ([A|L], Acc, O)
	  %% Line 1756
	  <[A|[B|[[]|L]]],Acc,O> when 'true' ->
	      %% Line 1757
	      apply 'umergel'/3
		  ([A|[B|L]], Acc, O)
	  %% Line 1758
	  <[[H1|T1]|[T2|L]],Acc,'asc'> when 'true' ->
	      let <_cor5> =
		  %% Line 1759
		  apply 'umerge2_2'/4
		      (T1, T2, [], H1)
	      in  %% Line 1759
		  apply 'umergel'/3
		      (L, [_cor5|Acc], 'asc')
	  %% Line 1760
	  <[T2|[[H1|T1]|L]],Acc,'desc'> when 'true' ->
	      let <_cor6> =
		  %% Line 1761
		  apply 'umerge2_2'/4
		      (T1, T2, [], H1)
	      in  %% Line 1761
		  apply 'umergel'/3
		      (L, [_cor6|Acc], 'desc')
	  %% Line 1762
	  <[L|[]],[],_X_O> when 'true' ->
	      %% Line 1763
	      L
	  %% Line 1764
	  <[L|[]],Acc,O> when 'true' ->
	      let <_cor7> =
		  %% Line 1765
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1765
		  apply 'rumergel'/3
		      ([_cor7|Acc], [], O)
	  %% Line 1766
	  <[],[],_X_O> when 'true' ->
	      %% Line 1767
	      []
	  %% Line 1768
	  <[],Acc,O> when 'true' ->
	      %% Line 1769
	      apply 'rumergel'/3
		  (Acc, [], O)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'umergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rumergel'/3 =
    %% Line 1771
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,'asc'> when 'true' ->
	      let <_cor3> =
		  %% Line 1772
		  apply 'rumerge3_1'/6
		      (T1, T2, H2, [], T3, H3)
	      in  %% Line 1772
		  apply 'rumergel'/3
		      (L, [_cor3|Acc], 'asc')
	  %% Line 1773
	  <[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,'desc'> when 'true' ->
	      let <_cor4> =
		  %% Line 1774
		  apply 'rumerge3_1'/6
		      (T1, T2, H2, [], T3, H3)
	      in  %% Line 1774
		  apply 'rumergel'/3
		      (L, [_cor4|Acc], 'desc')
	  %% Line 1775
	  <[[H2|T2]|[T1|L]],Acc,'asc'> when 'true' ->
	      let <_cor5> =
		  %% Line 1776
		  apply 'rumerge2_1'/4
		      (T1, T2, [], H2)
	      in  %% Line 1776
		  apply 'rumergel'/3
		      (L, [_cor5|Acc], 'asc')
	  %% Line 1777
	  <[T1|[[H2|T2]|L]],Acc,'desc'> when 'true' ->
	      let <_cor6> =
		  %% Line 1778
		  apply 'rumerge2_1'/4
		      (T1, T2, [], H2)
	      in  %% Line 1778
		  apply 'rumergel'/3
		      (L, [_cor6|Acc], 'desc')
	  %% Line 1779
	  <[L|[]],Acc,O> when 'true' ->
	      let <_cor7> =
		  %% Line 1780
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 1780
		  apply 'umergel'/3
		      ([_cor7|Acc], [], O)
	  %% Line 1781
	  <[],Acc,O> when 'true' ->
	      %% Line 1782
	      apply 'umergel'/3
		  (Acc, [], O)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rumergel',3}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_1'/7 =
    %% Line 1787
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1815
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_fol147,_fol148,_fol149,_fol150,_fol151,_fol152,_fol153,( _X_HdM
									       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol148,
				 _fol153)
			    -| ['compiler_generated'] ) ->
			%% Line 1816
			( apply ( 'umerge3_1'/7
				  -| ['compiler_generated'] )
			      (_fol147, _fol148, _fol149, _fol150, ( [_fol148|_fol151]
								     -| ['compiler_generated'] ), _fol152, _fol153)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1817
		  ( <_fol154,_fol155,_fol156,_fol157,_fol158,_fol159,_fol160,_fol161>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_fol160,
				 _fol161)
			    -| ['compiler_generated'] ) ->
			%% Line 1818
			( apply ( 'umerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol154, _fol155, _fol156, _fol157, _fol158, _fol159)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1819
		  ( <_fol162,_fol163,_fol164,_fol165,_fol166,_fol167,_fol168,( _X_HdM
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
			%% Line 1820
			( apply ( 'umerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol162, _fol163, _fol164, _fol165, ( [_fol168|_fol166]
								     -| ['compiler_generated'] ), _fol167)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1789
	  <[H1|T1],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1790
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, M, T3, H3)
	  %% Line 1791
	  <[H1|T1],HdM,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1831
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_fol169,_fol170,_fol171,_fol172,_fol173,_fol174,_fol175,( _X_HdM
									       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol172,
				 _fol175)
			    -| ['compiler_generated'] ) ->
			%% Line 1832
			( apply ( 'umerge3_2'/7
				  -| ['compiler_generated'] )
			      (_fol169, _fol170, _fol171, _fol172, ( [_fol172|_fol173]
								     -| ['compiler_generated'] ), _fol174, _fol175)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1833
		  ( <_fol176,_fol177,_fol178,_fol179,_fol180,_fol181,_fol182,_fol183>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_fol182,
				 _fol183)
			    -| ['compiler_generated'] ) ->
			%% Line 1834
			( apply ( 'umerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol176, _fol177, _fol178, _fol179, _fol180, _fol181)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1835
		  ( <_fol184,_fol185,_fol186,_fol187,_fol188,_fol189,_fol190,( _X_HdM
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
			%% Line 1836
			( apply ( 'umerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol184, _fol185, _fol186, _fol187, ( [_fol190|_fol188]
								     -| ['compiler_generated'] ), _fol189)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1793
	  <[],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1794
	      apply 'umerge2_1'/5
		  (T2, T3, M, HdM, H3)
	  %% Line 1795
	  <[],_X_HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1796
	      apply 'umerge2_1'/5
		  (T2, T3, [H2|M], H2, H3)
	  %% Line 1797
	  <[],HdM,T2,H2,M,T3,H3>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1798
	      apply 'umerge2_2'/4
		  (T2, T3, M, H2)
	  %% Line 1799
	  <[],_X_HdM,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1800
	      apply 'umerge2_2'/4
		  (T2, T3, [H3|M], H2)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'umerge3_1',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_2'/7 =
    %% Line 1803
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,[H2|T2],HdM,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1815
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_fol191,_fol192,_fol193,_fol194,_fol195,_fol196,_fol197,( _X_HdM
									       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol192,
				 _fol197)
			    -| ['compiler_generated'] ) ->
			%% Line 1816
			( apply ( 'umerge3_1'/7
				  -| ['compiler_generated'] )
			      (_fol191, _fol192, _fol193, _fol194, ( [_fol192|_fol195]
								     -| ['compiler_generated'] ), _fol196, _fol197)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1817
		  ( <_fol198,_fol199,_fol200,_fol201,_fol202,_fol203,_fol204,_fol205>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_fol204,
				 _fol205)
			    -| ['compiler_generated'] ) ->
			%% Line 1818
			( apply ( 'umerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol198, _fol199, _fol200, _fol201, _fol202, _fol203)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1819
		  ( <_fol206,_fol207,_fol208,_fol209,_fol210,_fol211,_fol212,( _X_HdM
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
			%% Line 1820
			( apply ( 'umerge3_12_3'/6
				  -| ['compiler_generated'] )
			      (_fol206, _fol207, _fol208, _fol209, ( [_fol212|_fol210]
								     -| ['compiler_generated'] ), _fol211)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1805
	  <T1,H1,[H2|T2],HdM,M,T3,H3> when 'true' ->
	      %% Line 1831
	      ( case <T1,H1,T2,H2,M,T3,H3,HdM> of
		  ( <_fol213,_fol214,_fol215,_fol216,_fol217,_fol218,_fol219,( _X_HdM
									       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol216,
				 _fol219)
			    -| ['compiler_generated'] ) ->
			%% Line 1832
			( apply ( 'umerge3_2'/7
				  -| ['compiler_generated'] )
			      (_fol213, _fol214, _fol215, _fol216, ( [_fol216|_fol217]
								     -| ['compiler_generated'] ), _fol218, _fol219)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1833
		  ( <_fol220,_fol221,_fol222,_fol223,_fol224,_fol225,_fol226,_fol227>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=='
								 -| ['compiler_generated'] )
				(_fol226,
				 _fol227)
			    -| ['compiler_generated'] ) ->
			%% Line 1834
			( apply ( 'umerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol220, _fol221, _fol222, _fol223, _fol224, _fol225)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1835
		  ( <_fol228,_fol229,_fol230,_fol231,_fol232,_fol233,_fol234,( _X_HdM
									       -| ['compiler_generated'] )> when ( 'true'
														   -| ['compiler_generated'] ) ->
			%% Line 1836
			( apply ( 'umerge3_21_3'/6
				  -| ['compiler_generated'] )
			      (_fol228, _fol229, _fol230, _fol231, ( [_fol234|_fol232]
								     -| ['compiler_generated'] ), _fol233)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1807
	  <T1,H1,[],_X_HdM,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1808
	      apply 'umerge2_1'/5
		  (T1, T3, [H1|M], H1, H3)
	  %% Line 1809
	  <T1,H1,[],HdM,M,T3,H3>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1810
	      apply 'umerge2_2'/4
		  (T1, T3, M, H1)
	  %% Line 1811
	  <T1,H1,[],_X_HdM,M,T3,H3> when 'true' ->
	      %% Line 1812
	      apply 'umerge2_2'/4
		  (T1, T3, [H3|M], H1)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'umerge3_2',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_12'/8 =
    %% Line 1815
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1816
	      apply 'umerge3_1'/7
		  (T1, H1, T2, H2, [H1|M], T3, H3)
	  %% Line 1817
	  <T1,H1,T2,H2,M,T3,H3,HdM>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1818
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, M, T3)
	  %% Line 1819
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM> when 'true' ->
	      %% Line 1820
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	end
'umerge3_12_3'/6 =
    %% Line 1823
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1824
	      apply 'umerge3_1'/7
		  (T1, H1, T2, H2, [H1|M], T3, H3)
	  %% Line 1825
	  <T1,H1,T2,H2,M,[H3|T3]> when 'true' ->
	      %% Line 1826
	      apply 'umerge3_12_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	  %% Line 1827
	  <T1,H1,T2,H2,M,[]> when 'true' ->
	      %% Line 1828
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'umerge3_12_3',6}}] )
	    -| ['compiler_generated'] )
	end
'umerge3_21'/8 =
    %% Line 1831
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1832
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, [H2|M], T3, H3)
	  %% Line 1833
	  <T1,H1,T2,H2,M,T3,H3,HdM>
	      when call 'erlang':'=='
		    (H3,
		     HdM) ->
	      %% Line 1834
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, M, T3)
	  %% Line 1835
	  <T1,H1,T2,H2,M,T3,H3,_X_HdM> when 'true' ->
	      %% Line 1836
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	end
'umerge3_21_3'/6 =
    %% Line 1839
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,[H3|T3]>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1840
	      apply 'umerge3_2'/7
		  (T1, H1, T2, H2, [H2|M], T3, H3)
	  %% Line 1841
	  <T1,H1,T2,H2,M,[H3|T3]> when 'true' ->
	      %% Line 1842
	      apply 'umerge3_21_3'/6
		  (T1, H1, T2, H2, [H3|M], T3)
	  %% Line 1843
	  <T1,H1,T2,H2,M,[]> when 'true' ->
	      %% Line 1844
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'umerge3_21_3',6}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_1'/6 =
    %% Line 1847
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1859
	      ( case <T1,H1,T2,H2,M,T3,H3> of
		  ( <_fol235,_fol236,_fol237,_fol238,_fol239,_fol240,_fol241>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol238,
				 _fol241)
			    -| ['compiler_generated'] ) ->
			%% Line 1860
			( apply ( 'rumerge3_12_3'/7
				  -| ['compiler_generated'] )
			      (_fol235, _fol237, _fol238, _fol239, _fol240, _fol241, _fol236)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1861
		  ( <_fol242,_fol243,_fol244,_fol245,_fol246,_fol247,_fol248> when ( 'true'
										     -| ['compiler_generated'] ) ->
			%% Line 1862
			( apply ( 'rumerge3_2'/7
				  -| ['compiler_generated'] )
			      (_fol242, _fol244, _fol245, _fol246, _fol247, _fol248, _fol243)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1849
	  <[H1|T1],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1850
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1851
	  <[H1|T1],T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1852
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1853
	  <[],T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1854
	      apply 'rumerge2_2'/5
		  (T2, T3, M, H3, H2)
	  %% Line 1855
	  <[],T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1856
	      apply 'rumerge2_1'/4
		  (T2, T3, [H2|M], H3)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rumerge3_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_12a'/7 =
    %% Line 1859
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,T3,H3>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1860
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1861
	  <T1,H1,T2,H2,M,T3,H3> when 'true' ->
	      %% Line 1862
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, M, T3, H3, H1)
	end
'rumerge3_2'/7 =
    %% Line 1865
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1884
	      ( case <T1,H1,T2,H2,M,T3,H3,H2M> of
		  ( <_fol249,_fol250,_fol251,_fol252,_fol253,_fol254,_fol255,_fol256>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=<'
								 -| ['compiler_generated'] )
				(_fol252,
				 _fol255)
			    -| ['compiler_generated'] ) ->
			%% Line 1885
			( apply ( 'rumerge3_12_3'/7
				  -| ['compiler_generated'] )
			      (_fol249, _fol251, _fol252, ( [_fol256|_fol253]
							    -| ['compiler_generated'] ), _fol254, _fol255, _fol250)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 1886
		  ( <_fol257,_fol258,_fol259,_fol260,_fol261,_fol262,_fol263,_fol264> when ( 'true'
											     -| ['compiler_generated'] ) ->
			%% Line 1887
			( apply ( 'rumerge3_2'/7
				  -| ['compiler_generated'] )
			      (_fol257, _fol259, _fol260, ( [_fol264|_fol261]
							    -| ['compiler_generated'] ), _fol262, _fol263, _fol258)
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1868
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1869
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1870
	  <T1,[H2|T2],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1872
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	  %% Line 1873
	  <T1,[H2|T2],H2M,M,T3,H3,H1> when 'true' ->
	      %% Line 1875
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|[H2M|M]], T3, H3)
	  %% Line 1876
	  <T1,[],H2M,M,T3,H3,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1877
	      apply 'rumerge2_1'/4
		  (T1, T3, [H1|M], H3)
	  %% Line 1878
	  <T1,[],H2M,M,T3,H3,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1879
	      apply 'rumerge2_2'/5
		  (T1, T3, [H2M|M], H3, H1)
	  %% Line 1880
	  <T1,[],H2M,M,T3,H3,H1> when 'true' ->
	      %% Line 1881
	      apply 'rumerge2_1'/4
		  (T1, T3, [H1|[H2M|M]], H3)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rumerge3_2',7}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_12b'/8 =
    %% Line 1884
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,H1,T2,H2,M,T3,H3,H2M>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1885
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	  %% Line 1886
	  <T1,H1,T2,H2,M,T3,H3,H2M> when 'true' ->
	      %% Line 1887
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, [H2M|M], T3, H3, H1)
	end
'rumerge3_12_3'/7 =
    %% Line 1890
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=<'
		    (H2,
		     H3) ->
	      %% Line 1891
	      apply 'rumerge3_12_3'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1892
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=='
		    (H2,
		     H3M) ->
	      %% Line 1893
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, M, T3, H3, H1)
	  %% Line 1894
	  <T1,T2,H2,M,[H3|T3],H3M,H1> when 'true' ->
	      %% Line 1895
	      apply 'rumerge3_2'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1896
	  <T1,T2,H2,M,[],H3M,H1>
	      when call 'erlang':'=='
		    (H2,
		     H3M) ->
	      %% Line 1897
	      apply 'rumerge2_2'/5
		  (T1, T2, M, H2, H1)
	  %% Line 1898
	  <T1,T2,H2,M,[],H3M,H1> when 'true' ->
	      %% Line 1899
	      apply 'rumerge2_2'/5
		  (T1, T2, [H3M|M], H2, H1)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rumerge3_12_3',7}}] )
	    -| ['compiler_generated'] )
	end
'rumerge3_21_3'/7 =
    %% Line 1902
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H3) ->
	      %% Line 1903
	      apply 'rumerge3_21_3'/7
		  (T1, T2, H2, [H3M|M], T3, H3, H1)
	  %% Line 1904
	  <T1,T2,H2,M,[H3|T3],H3M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H3M) ->
	      %% Line 1905
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|M], T3, H3)
	  %% Line 1906
	  <T1,T2,H2,M,[H3|T3],H3M,H1> when 'true' ->
	      %% Line 1907
	      apply 'rumerge3_1'/6
		  (T1, T2, H2, [H1|[H3M|M]], T3, H3)
	  %% Line 1908
	  <T1,T2,H2,M,[],H3M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H3M) ->
	      %% Line 1909
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1910
	  <T1,T2,H2,M,[],H3M,H1> when 'true' ->
	      %% Line 1911
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|[H3M|M]], H2)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rumerge3_21_3',7}}] )
	    -| ['compiler_generated'] )
	end
'umerge2_1'/5 =
    %% Line 1916
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,M,_X_HdM,H2>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1917
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  %% Line 1918
	  <[H1|T1],T2,M,HdM,H2>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1919
	      apply 'umerge2_2'/4
		  (T1, T2, M, H1)
	  %% Line 1920
	  <[H1|T1],T2,M,_X_HdM,H2> when 'true' ->
	      %% Line 1921
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  %% Line 1922
	  <[],T2,M,HdM,H2>
	      when call 'erlang':'=='
		    (H2,
		     HdM) ->
	      %% Line 1923
	      call 'lists':'reverse'
		  (T2, M)
	  %% Line 1924
	  <[],T2,M,_X_HdM,H2> when 'true' ->
	      %% Line 1925
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'umerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'umerge2_2'/4 =
    %% Line 1927
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1928
	      apply 'umerge2_1'/5
		  (T1, T2, [H1|M], H1, H2)
	  %% Line 1929
	  <T1,[H2|T2],M,H1> when 'true' ->
	      %% Line 1930
	      apply 'umerge2_2'/4
		  (T1, T2, [H2|M], H1)
	  %% Line 1931
	  <T1,[],M,H1> when 'true' ->
	      %% Line 1932
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'umerge2_2',4}}] )
	    -| ['compiler_generated'] )
	end
'rumerge2_1'/4 =
    %% Line 1937
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],T2,M,H2>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1938
	      apply 'rumerge2_2'/5
		  (T1, T2, M, H2, H1)
	  %% Line 1939
	  <[H1|T1],T2,M,H2> when 'true' ->
	      %% Line 1940
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1941
	  <[],T2,M,H2> when 'true' ->
	      %% Line 1942
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rumerge2_1',4}}] )
	    -| ['compiler_generated'] )
	end
'rumerge2_2'/5 =
    %% Line 1945
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T1,[H2|T2],M,H2M,H1>
	      when call 'erlang':'=<'
		    (H1,
		     H2) ->
	      %% Line 1946
	      apply 'rumerge2_2'/5
		  (T1, T2, [H2M|M], H2, H1)
	  %% Line 1947
	  <T1,[H2|T2],M,H2M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1948
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|M], H2)
	  %% Line 1949
	  <T1,[H2|T2],M,H2M,H1> when 'true' ->
	      %% Line 1950
	      apply 'rumerge2_1'/4
		  (T1, T2, [H1|[H2M|M]], H2)
	  %% Line 1951
	  <T1,[],M,H2M,H1>
	      when call 'erlang':'=='
		    (H1,
		     H2M) ->
	      %% Line 1952
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  %% Line 1953
	  <T1,[],M,H2M,H1> when 'true' ->
	      %% Line 1954
	      call 'lists':'reverse'
		  (T1, [H1|[H2M|M]])
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rumerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_1'/8 =
    %% Line 1959
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 1960
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 1961
		<EZ>
		    when call 'erlang':'=<'
			  (EY,
			   EZ) ->
		    %% Line 1962
		    apply 'keysplit_1'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 1963
		<EZ>
		    when call 'erlang':'=<'
			  (EX,
			   EZ) ->
		    %% Line 1964
		    apply 'keysplit_1'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 1965
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 1966
		    apply 'keysplit_1'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 1967
		<EZ> when 'true' ->
		    %% Line 1968
		    apply 'keysplit_1_1'/10
			(I, X, EX, Y, EY, EZ, R, Rs, Z, L)
	      end
	  %% Line 1970
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 1971
	      apply 'rkeymergel'/4
		  (I, [[Y|[X|R]]|Rs], [], 'asc')
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'keysplit_1',8}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_1_1'/10 =
    %% Line 1973
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,ES,R,Rs,S,[Z|L]> when 'true' ->
	      %% Line 1974
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 1975
		<EZ>
		    when call 'erlang':'=<'
			  (EY,
			   EZ) ->
		    %% Line 1976
		    apply 'keysplit_1_1'/10
			(I, Y, EY, Z, EZ, ES, [X|R], Rs, S, L)
		%% Line 1977
		<EZ>
		    when call 'erlang':'=<'
			  (EX,
			   EZ) ->
		    %% Line 1978
		    apply 'keysplit_1_1'/10
			(I, Z, EZ, Y, EY, ES, [X|R], Rs, S, L)
		%% Line 1979
		<EZ>
		    when call 'erlang':'=<'
			  (ES,
			   EZ) ->
		    %% Line 1980
		    apply 'keysplit_1'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 1981
		<EZ> when 'true' ->
		    %% Line 1982
		    apply 'keysplit_1'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 1984
	  <I,X,_X_EX,Y,_X_EY,_X_ES,R,Rs,S,[]> when 'true' ->
	      %% Line 1985
	      apply 'rkeymergel'/4
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [], 'asc')
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keysplit_1_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_2'/8 =
    %% Line 1988
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 1989
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 1990
		<EZ>
		    when call 'erlang':'>'
			  (EY,
			   EZ) ->
		    %% Line 1991
		    apply 'keysplit_2'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 1992
		<EZ>
		    when call 'erlang':'>'
			  (EX,
			   EZ) ->
		    %% Line 1993
		    apply 'keysplit_2'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 1994
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 1995
		    apply 'keysplit_2'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 1996
		<EZ> when 'true' ->
		    %% Line 1997
		    apply 'keysplit_2_1'/10
			(I, X, EX, Y, EY, EZ, R, Rs, Z, L)
	      end
	  %% Line 1999
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 2000
	      apply 'keymergel'/4
		  (I, [[Y|[X|R]]|Rs], [], 'desc')
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'keysplit_2',8}}] )
	    -| ['compiler_generated'] )
	end
'keysplit_2_1'/10 =
    %% Line 2002
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,ES,R,Rs,S,[Z|L]> when 'true' ->
	      %% Line 2003
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2004
		<EZ>
		    when call 'erlang':'>'
			  (EY,
			   EZ) ->
		    %% Line 2005
		    apply 'keysplit_2_1'/10
			(I, Y, EY, Z, EZ, ES, [X|R], Rs, S, L)
		%% Line 2006
		<EZ>
		    when call 'erlang':'>'
			  (EX,
			   EZ) ->
		    %% Line 2007
		    apply 'keysplit_2_1'/10
			(I, Z, EZ, Y, EY, ES, [X|R], Rs, S, L)
		%% Line 2008
		<EZ>
		    when call 'erlang':'>'
			  (ES,
			   EZ) ->
		    %% Line 2009
		    apply 'keysplit_2'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 2010
		<EZ> when 'true' ->
		    %% Line 2011
		    apply 'keysplit_2'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 2013
	  <I,X,_X_EX,Y,_X_EY,_X_ES,R,Rs,S,[]> when 'true' ->
	      %% Line 2014
	      apply 'keymergel'/4
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [], 'desc')
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keysplit_2_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keymergel'/4 =
    %% Line 2016
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'asc') ->
	      let <_cor5> =
		  %% Line 2017
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor4> =
		      %% Line 2017
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 2017
			  apply 'keymerge3_1'/10
			      (I, T1, [], O, _cor5, H2, T2, _cor4, H3, T3)
		      in  %% Line 2018
			  apply 'keymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 2019
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'desc') ->
	      let <_cor8> =
		  %% Line 2020
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor7> =
		      %% Line 2020
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 2020
			  apply 'keymerge3_1'/10
			      (I, T1, [], O, _cor8, H2, T2, _cor7, H3, T3)
		      in  %% Line 2021
			  apply 'keymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 2022
	  <I,[T1|[[H2|T2]|L]],Acc,'asc'> when 'true' ->
	      let <_cor10> =
		  %% Line 2023
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor11> =
		      %% Line 2023
		      apply 'keymerge2_1'/6
			  (I, T1, _cor10, H2, T2, [])
		  in  %% Line 2023
		      apply 'keymergel'/4
			  (I, L, [_cor11|Acc], 'asc')
	  %% Line 2024
	  <I,[[H2|T2]|[T1|L]],Acc,'desc'> when 'true' ->
	      let <_cor12> =
		  %% Line 2025
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor13> =
		      %% Line 2025
		      apply 'keymerge2_1'/6
			  (I, T1, _cor12, H2, T2, [])
		  in  %% Line 2025
		      apply 'keymergel'/4
			  (I, L, [_cor13|Acc], 'desc')
	  %% Line 2026
	  <_X_I,[L|[]],[],_X_O> when 'true' ->
	      %% Line 2027
	      L
	  %% Line 2028
	  <I,[L|[]],Acc,O> when 'true' ->
	      let <_cor14> =
		  %% Line 2029
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2029
		  apply 'rkeymergel'/4
		      (I, [_cor14|Acc], [], O)
	  %% Line 2030
	  <I,[],Acc,O> when 'true' ->
	      %% Line 2031
	      apply 'rkeymergel'/4
		  (I, Acc, [], O)
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'keymergel',4}}] )
	    -| ['compiler_generated'] )
	end
'rkeymergel'/4 =
    %% Line 2033
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'asc') ->
	      let <_cor5> =
		  %% Line 2034
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor4> =
		      %% Line 2034
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 2034
			  apply 'rkeymerge3_1'/10
			      (I, T1, [], O, _cor5, H2, T2, _cor4, H3, T3)
		      in  %% Line 2035
			  apply 'rkeymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 2036
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc,O>
	      when call 'erlang':'=:='
		    (O,
		     'desc') ->
	      let <_cor8> =
		  %% Line 2037
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor7> =
		      %% Line 2037
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 2037
			  apply 'rkeymerge3_1'/10
			      (I, T1, [], O, _cor8, H2, T2, _cor7, H3, T3)
		      in  %% Line 2038
			  apply 'rkeymergel'/4
			      (I, L, [M|Acc], O)
	  %% Line 2039
	  <I,[[H2|T2]|[T1|L]],Acc,'asc'> when 'true' ->
	      let <_cor10> =
		  %% Line 2040
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor11> =
		      %% Line 2040
		      apply 'rkeymerge2_1'/6
			  (I, T1, _cor10, H2, T2, [])
		  in  %% Line 2040
		      apply 'rkeymergel'/4
			  (I, L, [_cor11|Acc], 'asc')
	  %% Line 2041
	  <I,[T1|[[H2|T2]|L]],Acc,'desc'> when 'true' ->
	      let <_cor12> =
		  %% Line 2042
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor13> =
		      %% Line 2042
		      apply 'rkeymerge2_1'/6
			  (I, T1, _cor12, H2, T2, [])
		  in  %% Line 2042
		      apply 'rkeymergel'/4
			  (I, L, [_cor13|Acc], 'desc')
	  %% Line 2043
	  <I,[L|[]],Acc,O> when 'true' ->
	      let <_cor14> =
		  %% Line 2044
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2044
		  apply 'keymergel'/4
		      (I, [_cor14|Acc], [], O)
	  %% Line 2045
	  <I,[],Acc,O> when 'true' ->
	      %% Line 2046
	      apply 'keymergel'/4
		  (I, Acc, [], O)
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'rkeymergel',4}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_1'/10 =
    %% Line 2051
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],M,D,E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2052
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2053
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2077
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_fol265,_fol266,_fol267,_fol268,_fol269,_fol270,_fol271,_fol272,_fol273,_fol274,_fol275,_fol276>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol266,
				       _fol272)
				  -| ['compiler_generated'] ) ->
			      %% Line 2078
			      ( apply ( 'keymerge3_1'/10
					-| ['compiler_generated'] )
				    (_fol265, _fol268, ( [_fol267|_fol275]
							 -| ['compiler_generated'] ), _fol276, _fol269, _fol270, _fol271, _fol272, _fol273, _fol274)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2079
			( <_fol277,_fol278,_fol279,_fol280,_fol281,_fol282,_fol283,( _X_E3
										     -| ['compiler_generated'] ),_fol284,_fol285,_fol286,( _X_D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2080
			      ( apply ( 'keymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol277, _fol278, _fol279, _fol280, _fol281, _fol282, _fol283, _fol285, ( [_fol284|_fol286]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2055
		<E1> when 'true' ->
		    %% Line 2094
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T2> of
			( <_fol287,_fol288,_fol289,_fol290,_fol291,_fol292,_fol293,_fol294,_fol295,_fol296,_fol297,( D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol291,
				       _fol294)
				  -| ['compiler_generated'] ) ->
			      %% Line 2095
			      ( apply ( 'keymerge3_2'/10
					-| ['compiler_generated'] )
				    (_fol287, _fol288, _fol289, _fol290, _fol293, ( [_fol292|_fol297]
										    -| ['compiler_generated'] ), ( D
														   -| ['compiler_generated'] ), _fol294, _fol295, _fol296)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2096
			( <_fol298,_fol299,_fol300,_fol301,_fol302,_fol303,_fol304,( _X_E3
										     -| ['compiler_generated'] ),_fol305,_fol306,_fol307,( _X_D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2097
			      ( apply ( 'keymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol298, _fol299, _fol300, _fol301, _fol302, _fol303, _fol304, _fol306, ( [_fol305|_fol307]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2058
	  <I,[],M,_X_D,E2,H2,T2,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2059
	      apply 'keymerge2_1'/6
		  (I, T2, E3, H3, T3, [H2|M])
	  %% Line 2060
	  <I,[],M,_X_D,E2,H2,T2,_X_E3,H3,T3> when 'true' ->
	      %% Line 2061
	      apply 'keymerge2_2'/7
		  (I, T2, E2, H3, T3, M, H2)
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keymerge3_1',10}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_2'/10 =
    %% Line 2064
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,[H2|T2],M,D,E3,H3,T3> when 'true' ->
	      %% Line 2065
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2066
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2077
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T1> of
			( <_fol308,_fol309,_fol310,_fol311,_fol312,_fol313,_fol314,_fol315,_fol316,_fol317,_fol318,( D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol309,
				       _fol315)
				  -| ['compiler_generated'] ) ->
			      %% Line 2078
			      ( apply ( 'keymerge3_1'/10
					-| ['compiler_generated'] )
				    (_fol308, _fol311, ( [_fol310|_fol318]
							 -| ['compiler_generated'] ), ( D
											-| ['compiler_generated'] ), _fol312, _fol313, _fol314, _fol315, _fol316, _fol317)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2079
			( <_fol319,_fol320,_fol321,_fol322,_fol323,_fol324,_fol325,( _X_E3
										     -| ['compiler_generated'] ),_fol326,_fol327,_fol328,( _X_D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2080
			      ( apply ( 'keymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol319, _fol320, _fol321, _fol322, _fol323, _fol324, _fol325, _fol327, ( [_fol326|_fol328]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2068
		<E2> when 'true' ->
		    %% Line 2094
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_fol329,_fol330,_fol331,_fol332,_fol333,_fol334,_fol335,_fol336,_fol337,_fol338,_fol339,_fol340>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol333,
				       _fol336)
				  -| ['compiler_generated'] ) ->
			      %% Line 2095
			      ( apply ( 'keymerge3_2'/10
					-| ['compiler_generated'] )
				    (_fol329, _fol330, _fol331, _fol332, _fol335, ( [_fol334|_fol339]
										    -| ['compiler_generated'] ), _fol340, _fol336, _fol337, _fol338)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2096
			( <_fol341,_fol342,_fol343,_fol344,_fol345,_fol346,_fol347,( _X_E3
										     -| ['compiler_generated'] ),_fol348,_fol349,_fol350,( _X_D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2097
			      ( apply ( 'keymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol341, _fol342, _fol343, _fol344, _fol345, _fol346, _fol347, _fol349, ( [_fol348|_fol350]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2071
	  <I,E1,H1,T1,[],M,_X_D,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2072
	      apply 'keymerge2_1'/6
		  (I, T1, E3, H3, T3, [H1|M])
	  %% Line 2073
	  <I,E1,H1,T1,[],M,_X_D,_X_E3,H3,T3> when 'true' ->
	      %% Line 2074
	      apply 'keymerge2_2'/7
		  (I, T1, E1, H3, T3, M, H1)
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'keymerge3_2',10}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_12'/12 =
    %% Line 2077
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2078
	      apply 'keymerge3_1'/10
		  (I, T1, [H1|M], D, E2, H2, T2, E3, H3, T3)
	  %% Line 2079
	  <I,E1,H1,T1,E2,H2,T2,_X_E3,H3,T3,M,_X_D> when 'true' ->
	      %% Line 2080
	      apply 'keymerge3_12_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	end
'keymerge3_12_3'/9 =
    %% Line 2083
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2084
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2085
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2086
		    apply 'keymerge3_1'/10
			(I, T1, [H1|M], T1, E2, H2, T2, E3, H3, T3)
		%% Line 2087
		<_X_E3> when 'true' ->
		    %% Line 2088
		    apply 'keymerge3_12_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	      end
	  %% Line 2090
	  <I,_X_E1,H1,T1,E2,H2,T2,[],M> when 'true' ->
	      %% Line 2091
	      apply 'keymerge2_1'/6
		  (I, T1, E2, H2, T2, [H1|M])
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'keymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'keymerge3_21'/12 =
    %% Line 2094
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2095
	      apply 'keymerge3_2'/10
		  (I, E1, H1, T1, T2, [H2|M], D, E3, H3, T3)
	  %% Line 2096
	  <I,E1,H1,T1,E2,H2,T2,_X_E3,H3,T3,M,_X_D> when 'true' ->
	      %% Line 2097
	      apply 'keymerge3_21_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	end
'keymerge3_21_3'/9 =
    %% Line 2100
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2101
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2102
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2103
		    apply 'keymerge3_2'/10
			(I, E1, H1, T1, T2, [H2|M], T2, E3, H3, T3)
		%% Line 2104
		<_X_E3> when 'true' ->
		    %% Line 2105
		    apply 'keymerge3_21_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	      end
	  %% Line 2107
	  <I,E1,H1,T1,_X_E2,H2,T2,[],M> when 'true' ->
	      %% Line 2108
	      apply 'keymerge2_2'/7
		  (I, T1, E1, H2, T2, M, H1)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'keymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_1'/10 =
    %% Line 2111
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],M,D,E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2112
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2113
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2137
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T2> of
			( <_fol351,_fol352,_fol353,_fol354,_fol355,_fol356,_fol357,_fol358,_fol359,_fol360,_fol361,( _X_D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol355,
				       _fol358)
				  -| ['compiler_generated'] ) ->
			      %% Line 2138
			      ( apply ( 'rkeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol351, _fol352, _fol353, _fol354, _fol355, _fol356, _fol357, _fol360, ( [_fol359|_fol361]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2139
			( <_fol362,_fol363,_fol364,_fol365,( _X_E2
							     -| ['compiler_generated'] ),_fol366,_fol367,_fol368,_fol369,_fol370,_fol371,( D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2140
			      ( apply ( 'rkeymerge3_2'/10
					-| ['compiler_generated'] )
				    (_fol362, _fol363, _fol364, _fol365, _fol367, ( [_fol366|_fol371]
										    -| ['compiler_generated'] ), ( D
														   -| ['compiler_generated'] ), _fol368, _fol369, _fol370)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2115
		<E1> when 'true' ->
		    %% Line 2154
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_fol372,_fol373,_fol374,_fol375,_fol376,_fol377,_fol378,_fol379,_fol380,_fol381,_fol382,( _X_D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol373,
				       _fol379)
				  -| ['compiler_generated'] ) ->
			      %% Line 2155
			      ( apply ( 'rkeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol372, _fol373, _fol374, _fol375, _fol376, _fol377, _fol378, _fol381, ( [_fol380|_fol382]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2156
			( <_fol383,( _X_E1
				     -| ['compiler_generated'] ),_fol384,_fol385,_fol386,_fol387,_fol388,_fol389,_fol390,_fol391,_fol392,_fol393> when ( 'true'
																			 -| ['compiler_generated'] ) ->
			      %% Line 2157
			      ( apply ( 'rkeymerge3_1'/10
					-| ['compiler_generated'] )
				    (_fol383, _fol385, ( [_fol384|_fol392]
							 -| ['compiler_generated'] ), _fol393, _fol386, _fol387, _fol388, _fol389, _fol390, _fol391)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2118
	  <I,[],M,_X_D,E2,H2,T2,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2119
	      apply 'rkeymerge2_2'/7
		  (I, E2, T2, H3, T3, M, H2)
	  %% Line 2120
	  <I,[],M,_X_D,_X_E2,H2,T2,E3,H3,T3> when 'true' ->
	      %% Line 2121
	      apply 'rkeymerge2_1'/6
		  (I, T2, E3, H3, T3, [H2|M])
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'rkeymerge3_1',10}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_2'/10 =
    %% Line 2124
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,[H2|T2],M,D,E3,H3,T3> when 'true' ->
	      %% Line 2125
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2126
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2137
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> of
			( <_fol394,_fol395,_fol396,_fol397,_fol398,_fol399,_fol400,_fol401,_fol402,_fol403,_fol404,( _X_D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol398,
				       _fol401)
				  -| ['compiler_generated'] ) ->
			      %% Line 2138
			      ( apply ( 'rkeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol394, _fol395, _fol396, _fol397, _fol398, _fol399, _fol400, _fol403, ( [_fol402|_fol404]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2139
			( <_fol405,_fol406,_fol407,_fol408,( _X_E2
							     -| ['compiler_generated'] ),_fol409,_fol410,_fol411,_fol412,_fol413,_fol414,_fol415> when ( 'true'
																			 -| ['compiler_generated'] ) ->
			      %% Line 2140
			      ( apply ( 'rkeymerge3_2'/10
					-| ['compiler_generated'] )
				    (_fol405, _fol406, _fol407, _fol408, _fol410, ( [_fol409|_fol414]
										    -| ['compiler_generated'] ), _fol415, _fol411, _fol412, _fol413)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2128
		<E2> when 'true' ->
		    %% Line 2154
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,T1> of
			( <_fol416,_fol417,_fol418,_fol419,_fol420,_fol421,_fol422,_fol423,_fol424,_fol425,_fol426,( _X_D
														     -| ['compiler_generated'] )>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol417,
				       _fol423)
				  -| ['compiler_generated'] ) ->
			      %% Line 2155
			      ( apply ( 'rkeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol416, _fol417, _fol418, _fol419, _fol420, _fol421, _fol422, _fol425, ( [_fol424|_fol426]
													       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2156
			( <_fol427,( _X_E1
				     -| ['compiler_generated'] ),_fol428,_fol429,_fol430,_fol431,_fol432,_fol433,_fol434,_fol435,_fol436,( D
																	   -| ['compiler_generated'] )> when ( 'true'
																					       -| ['compiler_generated'] ) ->
			      %% Line 2157
			      ( apply ( 'rkeymerge3_1'/10
					-| ['compiler_generated'] )
				    (_fol427, _fol429, ( [_fol428|_fol436]
							 -| ['compiler_generated'] ), ( D
											-| ['compiler_generated'] ), _fol430, _fol431, _fol432, _fol433, _fol434, _fol435)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2131
	  <I,E1,H1,T1,[],M,_X_D,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2132
	      apply 'rkeymerge2_2'/7
		  (I, E1, T1, H3, T3, M, H1)
	  %% Line 2133
	  <I,_X_E1,H1,T1,[],M,_X_D,E3,H3,T3> when 'true' ->
	      %% Line 2134
	      apply 'rkeymerge2_1'/6
		  (I, T1, E3, H3, T3, [H1|M])
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'rkeymerge3_2',10}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_12'/12 =
    %% Line 2137
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2138
	      apply 'rkeymerge3_12_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	  %% Line 2139
	  <I,E1,H1,T1,_X_E2,H2,T2,E3,H3,T3,M,D> when 'true' ->
	      %% Line 2140
	      apply 'rkeymerge3_2'/10
		  (I, E1, H1, T1, T2, [H2|M], D, E3, H3, T3)
	end
'rkeymerge3_12_3'/9 =
    %% Line 2143
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2144
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2145
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2146
		    apply 'rkeymerge3_12_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
		%% Line 2147
		<E3> when 'true' ->
		    %% Line 2148
		    apply 'rkeymerge3_2'/10
			(I, E1, H1, T1, T2, [H2|M], T2, E3, H3, T3)
	      end
	  %% Line 2150
	  <I,E1,H1,T1,_X_E2,H2,T2,[],M> when 'true' ->
	      %% Line 2151
	      apply 'rkeymerge2_2'/7
		  (I, E1, T1, H2, T2, M, H1)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'rkeymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge3_21'/12 =
    %% Line 2154
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2155
	      apply 'rkeymerge3_21_3'/9
		  (I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
	  %% Line 2156
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D> when 'true' ->
	      %% Line 2157
	      apply 'rkeymerge3_1'/10
		  (I, T1, [H1|M], D, E2, H2, T2, E3, H3, T3)
	end
'rkeymerge3_21_3'/9 =
    %% Line 2160
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,[H3|T3],M> when 'true' ->
	      %% Line 2161
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2162
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2163
		    apply 'rkeymerge3_21_3'/9
			(I, E1, H1, T1, E2, H2, T2, T3, [H3|M])
		%% Line 2164
		<E3> when 'true' ->
		    %% Line 2165
		    apply 'rkeymerge3_1'/10
			(I, T1, [H1|M], T1, E2, H2, T2, E3, H3, T3)
	      end
	  %% Line 2167
	  <I,_X_E1,H1,T1,E2,H2,T2,[],M> when 'true' ->
	      %% Line 2168
	      apply 'rkeymerge2_1'/6
		  (I, T1, E2, H2, T2, [H1|M])
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'rkeymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'keymerge2_1'/6 =
    %% Line 2173
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],E2,H2,T2,M> when 'true' ->
	      %% Line 2174
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2175
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2176
		    apply 'keymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|M])
		%% Line 2177
		<E1> when 'true' ->
		    %% Line 2178
		    apply 'keymerge2_2'/7
			(I, T1, E1, H2, T2, M, H1)
	      end
	  %% Line 2180
	  <_X_I,[],_X_E2,H2,T2,M> when 'true' ->
	      %% Line 2181
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'keymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'keymerge2_2'/7 =
    %% Line 2183
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,T1,E1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 2184
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2185
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2186
		    apply 'keymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|[HdM|M]])
		%% Line 2187
		<_X_E2> when 'true' ->
		    %% Line 2188
		    apply 'keymerge2_2'/7
			(I, T1, E1, H2, T2, [HdM|M], H1)
	      end
	  %% Line 2190
	  <_X_I,T1,_X_E1,HdM,[],M,H1> when 'true' ->
	      %% Line 2191
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'keymerge2_2',7}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge2_1'/6 =
    %% Line 2195
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],E2,H2,T2,M> when 'true' ->
	      %% Line 2196
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2197
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2198
		    apply 'rkeymerge2_2'/7
			(I, E1, T1, H2, T2, M, H1)
		%% Line 2199
		<_X_E1> when 'true' ->
		    %% Line 2200
		    apply 'rkeymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|M])
	      end
	  %% Line 2202
	  <_X_I,[],_X_E2,H2,T2,M> when 'true' ->
	      %% Line 2203
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rkeymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rkeymerge2_2'/7 =
    %% Line 2205
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,HdM,[H2|T2],M,H1> when 'true' ->
	      %% Line 2206
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2207
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2208
		    apply 'rkeymerge2_2'/7
			(I, E1, T1, H2, T2, [HdM|M], H1)
		%% Line 2209
		<E2> when 'true' ->
		    %% Line 2210
		    apply 'rkeymerge2_1'/6
			(I, T1, E2, H2, T2, [H1|[HdM|M]])
	      end
	  %% Line 2212
	  <_X_I,_X_E1,T1,HdM,[],M,H1> when 'true' ->
	      %% Line 2213
	      call 'lists':'reverse'
		  (T1, [H1|[HdM|M]])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rkeymerge2_2',7}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_1'/8 =
    %% Line 2218
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs> when 'true' ->
	      %% Line 2219
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2220
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2221
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, R, Rs)
		%% Line 2222
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    %% Line 2223
		    apply 'ukeysplit_1'/8
			(I, Y, EY, Z, EZ, L, [X|R], Rs)
		%% Line 2224
		<EZ>
		    when call 'erlang':'=='
			  (EX,
			   EZ) ->
		    %% Line 2225
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, R, Rs)
		%% Line 2226
		<EZ>
		    when call 'erlang':'<'
			  (EX,
			   EZ) ->
		    %% Line 2227
		    apply 'ukeysplit_1'/8
			(I, Z, EZ, Y, EY, L, [X|R], Rs)
		%% Line 2228
		<_X_EZ>
		    when call 'erlang':'=:='
			  (R,
			   []) ->
		    %% Line 2229
		    apply 'ukeysplit_1'/8
			(I, X, EX, Y, EY, L, [Z|[]], Rs)
		%% Line 2230
		<EZ> when 'true' ->
		    %% Line 2231
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, Z, EZ)
	      end
	  %% Line 2233
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs> when 'true' ->
	      %% Line 2234
	      apply 'rukeymergel'/3
		  (I, [[Y|[X|R]]|Rs], [])
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'ukeysplit_1',8}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_1_1'/10 =
    %% Line 2236
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,X,EX,Y,EY,[Z|L],R,Rs,S,ES> when 'true' ->
	      %% Line 2237
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2238
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2239
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2240
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    %% Line 2241
		    apply 'ukeysplit_1_1'/10
			(I, Y, EY, Z, EZ, L, [X|R], Rs, S, ES)
		%% Line 2242
		<EZ>
		    when call 'erlang':'=='
			  (EX,
			   EZ) ->
		    %% Line 2243
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2244
		<EZ>
		    when call 'erlang':'<'
			  (EX,
			   EZ) ->
		    %% Line 2245
		    apply 'ukeysplit_1_1'/10
			(I, Z, EZ, Y, EY, L, [X|R], Rs, S, ES)
		%% Line 2246
		<EZ>
		    when call 'erlang':'=='
			  (ES,
			   EZ) ->
		    %% Line 2247
		    apply 'ukeysplit_1_1'/10
			(I, X, EX, Y, EY, L, R, Rs, S, ES)
		%% Line 2248
		<EZ>
		    when call 'erlang':'<'
			  (ES,
			   EZ) ->
		    %% Line 2249
		    apply 'ukeysplit_1'/8
			(I, S, ES, Z, EZ, L, [], [[Y|[X|R]]|Rs])
		%% Line 2250
		<EZ> when 'true' ->
		    %% Line 2251
		    apply 'ukeysplit_1'/8
			(I, Z, EZ, S, ES, L, [], [[Y|[X|R]]|Rs])
	      end
	  %% Line 2253
	  <I,X,_X_EX,Y,_X_EY,[],R,Rs,S,_X_ES> when 'true' ->
	      %% Line 2254
	      apply 'rukeymergel'/3
		  (I, [[S|[]]|[[Y|[X|R]]|Rs]], [])
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'ukeysplit_1_1',10}}] )
	    -| ['compiler_generated'] )
	end
'ukeysplit_2'/5 =
    %% Line 2257
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,Y,EY,[Z|L],R> when 'true' ->
	      %% Line 2258
	      case call 'erlang':'element'
		       (I, Z) of
		%% Line 2259
		<EZ>
		    when call 'erlang':'=='
			  (EY,
			   EZ) ->
		    %% Line 2260
		    apply 'ukeysplit_2'/5
			(I, Y, EY, L, R)
		%% Line 2261
		<EZ>
		    when call 'erlang':'<'
			  (EY,
			   EZ) ->
		    let <_cor5> =
			%% Line 2262
			call 'lists':'reverse'
			    (R, [])
		    in  %% Line 2262
			apply 'ukeysplit_1'/8
			    (I, Y, EY, Z, EZ, L, [], [_cor5|[]])
		%% Line 2263
		<EZ> when 'true' ->
		    %% Line 2264
		    apply 'ukeysplit_2'/5
			(I, Z, EZ, L, [Y|R])
	      end
	  %% Line 2266
	  <_X_I,Y,_X_EY,[],R> when 'true' ->
	      %% Line 2267
	      [Y|R]
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ukeysplit_2',5}}] )
	    -| ['compiler_generated'] )
	end
'ukeymergel'/3 =
    %% Line 2269
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,[T1|[[H2|T2]|[[H3|T3]|L]]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2273
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor3> =
		      %% Line 2274
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 2273
			  apply 'ukeymerge3_1'/11
			      (I, T1, Acc, [H2|H3], _cor4, H2, T2, [], _cor3, %% Line 2274
									      H3, %% Line 2274
										  T3)
		      in  %% Line 2275
			  apply 'ukeymergel'/3
			      (I, L, [M|Acc])
	  %% Line 2276
	  <I,[[H1|T1]|[T2|L]],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2277
		  call 'erlang':'element'
		      (I, H1)
	      in  let <_cor7> =
		      %% Line 2277
		      apply 'ukeymerge2_2'/6
			  (I, T1, _cor6, H1, T2, [])
		  in  %% Line 2277
		      apply 'ukeymergel'/3
			  (I, L, [_cor7|Acc])
	  %% Line 2278
	  <_X_I,[L|[]],[]> when 'true' ->
	      %% Line 2279
	      L
	  %% Line 2280
	  <I,[L|[]],Acc> when 'true' ->
	      let <_cor8> =
		  %% Line 2281
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2281
		  apply 'rukeymergel'/3
		      (I, [_cor8|Acc], [])
	  %% Line 2282
	  <I,[],Acc> when 'true' ->
	      %% Line 2283
	      apply 'rukeymergel'/3
		  (I, Acc, [])
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'ukeymergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rukeymergel'/3 =
    %% Line 2285
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,[[H3|T3]|[[H2|T2]|[T1|L]]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2286
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor3> =
		      %% Line 2287
		      call 'erlang':'element'
			  (I, H3)
		  in  let <M> =
			  %% Line 2286
			  apply 'rukeymerge3_1'/11
			      (I, T1, Acc, [], _cor4, H2, T2, [], _cor3, %% Line 2287
									 H3, %% Line 2287
									     T3)
		      in  %% Line 2288
			  apply 'rukeymergel'/3
			      (I, L, [M|Acc])
	  %% Line 2289
	  <I,[[H2|T2]|[T1|L]],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2290
		  call 'erlang':'element'
		      (I, H2)
	      in  let <_cor7> =
		      %% Line 2290
		      apply 'rukeymerge2_1'/6
			  (I, T1, _cor6, T2, [], H2)
		  in  %% Line 2290
		      apply 'rukeymergel'/3
			  (I, L, [_cor7|Acc])
	  %% Line 2291
	  <I,[L|[]],Acc> when 'true' ->
	      let <_cor8> =
		  %% Line 2292
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2292
		  apply 'ukeymergel'/3
		      (I, [_cor8|Acc], [])
	  %% Line 2293
	  <I,[],Acc> when 'true' ->
	      %% Line 2294
	      apply 'ukeymergel'/3
		  (I, Acc, [])
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rukeymergel',3}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_1'/11 =
    %% Line 2299
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],D,HdM,E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2300
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2301
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2333
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,D> of
			( <_fol437,_fol438,_fol439,_fol440,_fol441,_fol442,_fol443,_fol444,_fol445,_fol446,_fol447,( _X_HdM
														     -| ['compiler_generated'] ),_fol448>
			      when %% Line 2334
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol438,
				       _fol444)
				  -| ['compiler_generated'] ) ->
			      %% Line 2335
			      ( apply ( 'ukeymerge3_1'/11
					-| ['compiler_generated'] )
				    (_fol437, _fol439, _fol448, _fol438, _fol441, _fol442, _fol443, ( [_fol440|_fol447]
												      -| ['compiler_generated'] ), _fol444, _fol445, _fol446)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2336
			( <_fol449,_fol450,_fol451,_fol452,_fol453,_fol454,_fol455,_fol456,( _X_H3
											     -| ['compiler_generated'] ),_fol457,_fol458,_fol459,( _X_D
																		   -| ['compiler_generated'] )>
			      when %% Line 2337
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_fol456,
				       _fol459)
				  -| ['compiler_generated'] ) ->
			      %% Line 2338
			      ( apply ( 'ukeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol449, _fol450, _fol451, _fol452, _fol453, _fol454, _fol455, _fol458, _fol457)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2339
			( <_fol460,_fol461,_fol462,_fol463,_fol464,_fol465,_fol466,( _X_E3
										     -| ['compiler_generated'] ),_fol467,_fol468,_fol469,( _X_HdM
																	   -| ['compiler_generated'] ),( _X_D
																					 -| ['compiler_generated'] )> when ( 'true'
																									     -| ['compiler_generated'] ) ->
			      %% Line 2340
			      ( apply ( 'ukeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol460, _fol461, _fol462, _fol463, _fol464, _fol465, _fol466, ( [_fol467|_fol469]
												      -| ['compiler_generated'] ), _fol468)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2303
		<E1>
		    when call 'erlang':'=='
			  (E2,
			   HdM) ->
		    %% Line 2304
		    apply 'ukeymerge3_2'/11
			(I, E1, T1, H1, T2, HdM, T2, M, E3, H3, T3)
		%% Line 2305
		<E1> when 'true' ->
		    %% Line 2354
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,T2> of
			( <_fol470,_fol471,_fol472,_fol473,_fol474,_fol475,_fol476,_fol477,_fol478,_fol479,_fol480,( _X_HdM
														     -| ['compiler_generated'] ),( D
																		   -| ['compiler_generated'] )>
			      when %% Line 2355
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol474,
				       _fol477)
				  -| ['compiler_generated'] ) ->
			      %% Line 2356
			      ( apply ( 'ukeymerge3_2'/11
					-| ['compiler_generated'] )
				    (_fol470, _fol471, _fol472, _fol473, _fol476, _fol474, ( D
											     -| ['compiler_generated'] ), ( [_fol475|_fol480]
															    -| ['compiler_generated'] ), _fol477, _fol478, _fol479)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2357
			( <_fol481,_fol482,_fol483,_fol484,_fol485,_fol486,_fol487,_fol488,( _X_H3
											     -| ['compiler_generated'] ),_fol489,_fol490,_fol491,( _X_D
																		   -| ['compiler_generated'] )>
			      when %% Line 2358
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_fol488,
				       _fol491)
				  -| ['compiler_generated'] ) ->
			      %% Line 2359
			      ( apply ( 'ukeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol481, _fol482, _fol483, _fol484, _fol485, _fol486, _fol487, _fol490, _fol489)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2360
			( <_fol492,_fol493,_fol494,_fol495,_fol496,_fol497,_fol498,( _X_E3
										     -| ['compiler_generated'] ),_fol499,_fol500,_fol501,( _X_HdM
																	   -| ['compiler_generated'] ),( _X_D
																					 -| ['compiler_generated'] )> when ( 'true'
																									     -| ['compiler_generated'] ) ->
			      %% Line 2361
			      ( apply ( 'ukeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol492, _fol493, _fol494, _fol495, _fol496, _fol497, _fol498, ( [_fol499|_fol501]
												      -| ['compiler_generated'] ), _fol500)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2308
	  <I,[],_X_D,HdM,E2,_X_H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=='
		    (E2,
		     HdM) ->
	      %% Line 2309
	      apply 'ukeymerge2_1'/7
		  (I, T2, E3, HdM, T3, M, H3)
	  %% Line 2310
	  <I,[],_X_D,_X_HdM,E2,H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2311
	      apply 'ukeymerge2_1'/7
		  (I, T2, E3, E2, T3, [H2|M], H3)
	  %% Line 2312
	  <I,[],_X_D,HdM,E2,H2,T2,M,E3,_X_H3,T3>
	      when call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2313
	      apply 'ukeymerge2_2'/6
		  (I, T2, E2, H2, T3, M)
	  %% Line 2314
	  <I,[],_X_D,_X_HdM,E2,H2,T2,M,_X_E3,H3,T3> when 'true' ->
	      %% Line 2315
	      apply 'ukeymerge2_2'/6
		  (I, T2, E2, H2, T3, [H3|M])
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'ukeymerge3_1',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_2'/11 =
    %% Line 2318
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,[H2|T2],HdM,D,M,E3,H3,T3> when 'true' ->
	      %% Line 2319
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2320
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2333
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,T1> of
			( <_fol502,_fol503,_fol504,_fol505,_fol506,_fol507,_fol508,_fol509,_fol510,_fol511,_fol512,( _X_HdM
														     -| ['compiler_generated'] ),( D
																		   -| ['compiler_generated'] )>
			      when %% Line 2334
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol503,
				       _fol509)
				  -| ['compiler_generated'] ) ->
			      %% Line 2335
			      ( apply ( 'ukeymerge3_1'/11
					-| ['compiler_generated'] )
				    (_fol502, _fol504, ( D
							 -| ['compiler_generated'] ), _fol503, _fol506, _fol507, _fol508, ( [_fol505|_fol512]
															    -| ['compiler_generated'] ), _fol509, _fol510, _fol511)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2336
			( <_fol513,_fol514,_fol515,_fol516,_fol517,_fol518,_fol519,_fol520,( _X_H3
											     -| ['compiler_generated'] ),_fol521,_fol522,_fol523,( _X_D
																		   -| ['compiler_generated'] )>
			      when %% Line 2337
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_fol520,
				       _fol523)
				  -| ['compiler_generated'] ) ->
			      %% Line 2338
			      ( apply ( 'ukeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol513, _fol514, _fol515, _fol516, _fol517, _fol518, _fol519, _fol522, _fol521)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2339
			( <_fol524,_fol525,_fol526,_fol527,_fol528,_fol529,_fol530,( _X_E3
										     -| ['compiler_generated'] ),_fol531,_fol532,_fol533,( _X_HdM
																	   -| ['compiler_generated'] ),( _X_D
																					 -| ['compiler_generated'] )> when ( 'true'
																									     -| ['compiler_generated'] ) ->
			      %% Line 2340
			      ( apply ( 'ukeymerge3_12_3'/9
					-| ['compiler_generated'] )
				    (_fol524, _fol525, _fol526, _fol527, _fol528, _fol529, _fol530, ( [_fol531|_fol533]
												      -| ['compiler_generated'] ), _fol532)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2322
		<E2> when 'true' ->
		    %% Line 2354
		    ( case <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,HdM,D> of
			( <_fol534,_fol535,_fol536,_fol537,_fol538,_fol539,_fol540,_fol541,_fol542,_fol543,_fol544,( _X_HdM
														     -| ['compiler_generated'] ),_fol545>
			      when %% Line 2355
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol538,
				       _fol541)
				  -| ['compiler_generated'] ) ->
			      %% Line 2356
			      ( apply ( 'ukeymerge3_2'/11
					-| ['compiler_generated'] )
				    (_fol534, _fol535, _fol536, _fol537, _fol540, _fol538, _fol545, ( [_fol539|_fol544]
												      -| ['compiler_generated'] ), _fol541, _fol542, _fol543)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2357
			( <_fol546,_fol547,_fol548,_fol549,_fol550,_fol551,_fol552,_fol553,( _X_H3
											     -| ['compiler_generated'] ),_fol554,_fol555,_fol556,( _X_D
																		   -| ['compiler_generated'] )>
			      when %% Line 2358
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=='
								       -| ['compiler_generated'] )
				      (_fol553,
				       _fol556)
				  -| ['compiler_generated'] ) ->
			      %% Line 2359
			      ( apply ( 'ukeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol546, _fol547, _fol548, _fol549, _fol550, _fol551, _fol552, _fol555, _fol554)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2360
			( <_fol557,_fol558,_fol559,_fol560,_fol561,_fol562,_fol563,( _X_E3
										     -| ['compiler_generated'] ),_fol564,_fol565,_fol566,( _X_HdM
																	   -| ['compiler_generated'] ),( _X_D
																					 -| ['compiler_generated'] )> when ( 'true'
																									     -| ['compiler_generated'] ) ->
			      %% Line 2361
			      ( apply ( 'ukeymerge3_21_3'/9
					-| ['compiler_generated'] )
				    (_fol557, _fol558, _fol559, _fol560, _fol561, _fol562, _fol563, ( [_fol564|_fol566]
												      -| ['compiler_generated'] ), _fol565)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2325
	  <I,E1,T1,H1,[],_X_HdM,_X_D,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2326
	      apply 'ukeymerge2_1'/7
		  (I, T1, E3, E1, T3, [H1|M], H3)
	  %% Line 2327
	  <I,E1,T1,H1,[],HdM,_X_D,M,E3,_X_H3,T3>
	      when call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2328
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T3, M)
	  %% Line 2329
	  <I,E1,T1,H1,[],_X_HdM,_X_D,M,_X_E3,H3,T3> when 'true' ->
	      %% Line 2330
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T3, [H3|M])
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'ukeymerge3_2',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_12'/13 =
    %% Line 2333
    fun (_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,_X_HdM,D>
	      when %% Line 2334
		call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2335
	      apply 'ukeymerge3_1'/11
		  (I, T1, D, E1, E2, H2, T2, [H1|M], E3, H3, T3)
	  %% Line 2336
	  <I,E1,T1,H1,E2,H2,T2,E3,_X_H3,T3,M,HdM,_X_D>
	      when %% Line 2337
		call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2338
	      apply 'ukeymerge3_12_3'/9
		  (I, E1, T1, H1, E2, H2, T2, M, T3)
	  %% Line 2339
	  <I,E1,T1,H1,E2,H2,T2,_X_E3,H3,T3,M,_X_HdM,_X_D> when 'true' ->
	      %% Line 2340
	      apply 'ukeymerge3_12_3'/9
		  (I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	end
'ukeymerge3_12_3'/9 =
    %% Line 2343
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,E2,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 2344
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2345
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2346
		    apply 'ukeymerge3_1'/11
			(I, T1, T1, E1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2347
		<_X_E3> when 'true' ->
		    %% Line 2348
		    apply 'ukeymerge3_12_3'/9
			(I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	      end
	  %% Line 2350
	  <I,E1,T1,H1,E2,H2,T2,M,[]> when 'true' ->
	      %% Line 2351
	      apply 'ukeymerge2_1'/7
		  (I, T1, E2, E1, T2, [H1|M], H2)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'ukeymerge3_12_3',9}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge3_21'/13 =
    %% Line 2354
    fun (_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,E2,H2,T2,E3,H3,T3,M,_X_HdM,D>
	      when %% Line 2355
		call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2356
	      apply 'ukeymerge3_2'/11
		  (I, E1, T1, H1, T2, E2, D, [H2|M], E3, H3, T3)
	  %% Line 2357
	  <I,E1,T1,H1,E2,H2,T2,E3,_X_H3,T3,M,HdM,_X_D>
	      when %% Line 2358
		call 'erlang':'=='
		    (E3,
		     HdM) ->
	      %% Line 2359
	      apply 'ukeymerge3_21_3'/9
		  (I, E1, T1, H1, E2, H2, T2, M, T3)
	  %% Line 2360
	  <I,E1,T1,H1,E2,H2,T2,_X_E3,H3,T3,M,_X_HdM,_X_D> when 'true' ->
	      %% Line 2361
	      apply 'ukeymerge3_21_3'/9
		  (I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	end
'ukeymerge3_21_3'/9 =
    %% Line 2364
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,T1,H1,E2,H2,T2,M,[H3|T3]> when 'true' ->
	      %% Line 2365
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2366
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2367
		    apply 'ukeymerge3_2'/11
			(I, E1, T1, H1, T2, E2, T2, [H2|M], E3, H3, T3)
		%% Line 2368
		<_X_E3> when 'true' ->
		    %% Line 2369
		    apply 'ukeymerge3_21_3'/9
			(I, E1, T1, H1, E2, H2, T2, [H3|M], T3)
	      end
	  %% Line 2371
	  <I,E1,T1,H1,_X_E2,H2,T2,M,[]> when 'true' ->
	      %% Line 2372
	      apply 'ukeymerge2_2'/6
		  (I, T1, E1, H1, T2, [H2|M])
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'ukeymerge3_21_3',9}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_1'/11 =
    %% Line 2377
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],D1,D2,E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2378
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2379
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2390
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M> of
			( <_fol567,_fol568,_fol569,_fol570,_fol571,_fol572,_fol573,_fol574,_fol575,_fol576,_fol577>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol571,
				       _fol574)
				  -| ['compiler_generated'] ) ->
			      %% Line 2391
			      ( apply ( 'rukeymerge3_12_3'/11
					-| ['compiler_generated'] )
				    (_fol567, _fol568, _fol569, _fol570, _fol571, _fol572, _fol573, _fol577, _fol574, _fol575, _fol576)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2392
			( <_fol578,_fol579,_fol580,_fol581,_fol582,_fol583,_fol584,_fol585,_fol586,_fol587,_fol588> when ( 'true'
															   -| ['compiler_generated'] ) ->
			      %% Line 2393
			      ( apply ( 'rukeymerge3_2'/11
					-| ['compiler_generated'] )
				    (_fol578, _fol579, _fol580, _fol581, _fol584, _fol583, _fol582, _fol588, _fol585, _fol586, _fol587)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2381
		<E1> when 'true' ->
		    %% Line 2396
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D1,D2> of
			( <_fol589,_fol590,_fol591,_fol592,_fol593,_fol594,_fol595,_fol596,_fol597,_fol598,_fol599,( _X_D1
														     -| ['compiler_generated'] ),( _X_D2
																		   -| ['compiler_generated'] )>
			      when %% Line 2397
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol590,
				       _fol596)
				  -| ['compiler_generated'] ) ->
			      %% Line 2398
			      ( apply ( 'rukeymerge3_21_3'/11
					-| ['compiler_generated'] )
				    (_fol589, _fol590, _fol591, _fol592, _fol593, _fol594, _fol595, _fol599, _fol596, _fol597, _fol598)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2399
			( <_fol600,( _X_E1
				     -| ['compiler_generated'] ),_fol601,_fol602,_fol603,_fol604,_fol605,_fol606,_fol607,_fol608,_fol609,_fol610,_fol611> when ( 'true'
																				 -| ['compiler_generated'] ) ->
			      %% Line 2400
			      ( apply ( 'rukeymerge3_1'/11
					-| ['compiler_generated'] )
				    (_fol600, _fol602, _fol610, _fol611, _fol603, _fol604, _fol605, ( [_fol601|_fol609]
												      -| ['compiler_generated'] ), _fol606, _fol607, _fol608)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2384
	  <I,[],_X_D1,_X_D2,E2,H2,T2,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2385
	      apply 'rukeymerge2_2'/8
		  (I, T2, E2, T3, M, E3, H3, H2)
	  %% Line 2386
	  <I,[],_X_D1,_X_D2,_X_E2,H2,T2,M,E3,H3,T3> when 'true' ->
	      %% Line 2387
	      apply 'rukeymerge2_1'/6
		  (I, T2, E3, T3, [H2|M], H3)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'rukeymerge3_1',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_12a'/11 =
    %% Line 2390
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M>
	      when call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2391
	      apply 'rukeymerge3_12_3'/11
		  (I, E1, H1, T1, E2, H2, T2, M, E3, H3, T3)
	  %% Line 2392
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M> when 'true' ->
	      %% Line 2393
	      apply 'rukeymerge3_2'/11
		  (I, E1, H1, T1, T2, H2, E2, M, E3, H3, T3)
	end
'rukeymerge3_21a'/13 =
    %% Line 2396
    fun (_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,_X_D1,_X_D2>
	      when %% Line 2397
		call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2398
	      apply 'rukeymerge3_21_3'/11
		  (I, E1, H1, T1, E2, H2, T2, M, E3, H3, T3)
	  %% Line 2399
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,D1,D2> when 'true' ->
	      %% Line 2400
	      apply 'rukeymerge3_1'/11
		  (I, T1, D1, D2, E2, H2, T2, [H1|M], E3, H3, T3)
	end
'rukeymerge3_2'/11 =
    %% Line 2403
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,[H2|T2],H2M,E2M,M,E3,H3,T3> when 'true' ->
	      %% Line 2404
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2405
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2422
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> of
			( <_fol612,_fol613,_fol614,_fol615,_fol616,_fol617,_fol618,_fol619,_fol620,_fol621,_fol622,_fol623>
			      when %% Line 2423
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol616,
				       _fol619)
				  -| ['compiler_generated'] ) ->
			      %% Line 2424
			      ( apply ( 'rukeymerge3_12_3'/11
					-| ['compiler_generated'] )
				    (_fol612, _fol613, _fol614, _fol615, _fol616, _fol617, _fol618, ( [_fol623|_fol622]
												      -| ['compiler_generated'] ), _fol619, _fol620, _fol621)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2425
			( <_fol624,_fol625,_fol626,_fol627,_fol628,_fol629,_fol630,_fol631,_fol632,_fol633,_fol634,_fol635> when ( 'true'
																   -| ['compiler_generated'] ) ->
			      %% Line 2426
			      ( apply ( 'rukeymerge3_2'/11
					-| ['compiler_generated'] )
				    (_fol624, _fol625, _fol626, _fol627, _fol630, _fol629, _fol628, ( [_fol635|_fol634]
												      -| ['compiler_generated'] ), _fol631, _fol632, _fol633)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 2408
		<E2>
		    when call 'erlang':'=='
			  (E1,
			   E2M) ->
		    %% Line 2409
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2410
		<E2> when 'true' ->
		    %% Line 2429
		    ( case <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> of
			( <_fol636,_fol637,_fol638,_fol639,_fol640,_fol641,_fol642,_fol643,_fol644,_fol645,_fol646,_fol647>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( '=<'
								       -| ['compiler_generated'] )
				      (_fol637,
				       _fol643)
				  -| ['compiler_generated'] ) ->
			      %% Line 2430
			      ( apply ( 'rukeymerge3_21_3'/11
					-| ['compiler_generated'] )
				    (_fol636, _fol637, _fol638, _fol639, _fol640, _fol641, _fol642, ( [_fol647|_fol646]
												      -| ['compiler_generated'] ), _fol643, _fol644, _fol645)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 2431
			( <_fol648,( _X_E1
				     -| ['compiler_generated'] ),_fol649,_fol650,_fol651,_fol652,_fol653,_fol654,_fol655,_fol656,_fol657,_fol658> when ( 'true'
																			 -| ['compiler_generated'] ) ->
			      %% Line 2432
			      ( apply ( 'rukeymerge3_1'/11
					-| ['compiler_generated'] )
				    (_fol648, _fol650, _fol649, _fol650, _fol651, _fol652, _fol653, ( [_fol649|( [_fol658|_fol657]
														 -| ['compiler_generated'] )]
												      -| ['compiler_generated'] ), _fol654, _fol655, _fol656)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 2414
	  <I,E1,H1,T1,[],_X_H2M,E2M,M,E3,H3,T3>
	      when call 'erlang':'=='
		    (E1,
		     E2M) ->
	      %% Line 2415
	      apply 'rukeymerge2_1'/6
		  (I, T1, E3, T3, [H1|M], H3)
	  %% Line 2416
	  <I,E1,H1,T1,[],H2M,_X_E2M,M,E3,H3,T3>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2417
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T3, [H2M|M], E3, H3, H1)
	  %% Line 2418
	  <I,_X_E1,H1,T1,[],H2M,_X_E2M,M,E3,H3,T3> when 'true' ->
	      %% Line 2419
	      apply 'rukeymerge2_1'/6
		  (I, T1, E3, T3, [H1|[H2M|M]], H3)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'rukeymerge3_2',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_12b'/12 =
    %% Line 2422
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M>
	      when %% Line 2423
		call 'erlang':'=<'
		    (E2,
		     E3) ->
	      %% Line 2424
	      apply 'rukeymerge3_12_3'/11
		  (I, E1, H1, T1, E2, H2, T2, [H2M|M], E3, H3, T3)
	  %% Line 2425
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> when 'true' ->
	      %% Line 2426
	      apply 'rukeymerge3_2'/11
		  (I, E1, H1, T1, T2, H2, E2, [H2M|M], E3, H3, T3)
	end
'rukeymerge3_21b'/12 =
    %% Line 2429
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M>
	      when call 'erlang':'=<'
		    (E1,
		     E3) ->
	      %% Line 2430
	      apply 'rukeymerge3_21_3'/11
		  (I, E1, H1, T1, E2, H2, T2, [H2M|M], E3, H3, T3)
	  %% Line 2431
	  <I,_X_E1,H1,T1,E2,H2,T2,E3,H3,T3,M,H2M> when 'true' ->
	      %% Line 2432
	      apply 'rukeymerge3_1'/11
		  (I, T1, H1, T1, E2, H2, T2, [H1|[H2M|M]], E3, H3, T3)
	end
'rukeymerge3_12_3'/11 =
    %% Line 2435
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,H3M,[H3|T3]> when 'true' ->
	      %% Line 2436
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2437
		<E3>
		    when call 'erlang':'=<'
			  (E2,
			   E3) ->
		    %% Line 2438
		    apply 'rukeymerge3_12_3'/11
			(I, E1, H1, T1, E2, H2, T2, [H3M|M], E3, H3, T3)
		%% Line 2439
		<E3>
		    when call 'erlang':'=='
			  (E2,
			   E3M) ->
		    %% Line 2440
		    apply 'rukeymerge3_2'/11
			(I, E1, H1, T1, T2, H2, E2, M, E3, H3, T3)
		%% Line 2441
		<E3> when 'true' ->
		    %% Line 2442
		    apply 'rukeymerge3_2'/11
			(I, E1, H1, T1, T2, H2, E2, [H3M|M], E3, H3, T3)
	      end
	  %% Line 2444
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,_X_H3M,[]>
	      when call 'erlang':'=='
		    (E2,
		     E3M) ->
	      %% Line 2445
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T2, M, E2, H2, H1)
	  %% Line 2446
	  <I,E1,H1,T1,E2,H2,T2,M,_X_E3M,H3M,[]> when 'true' ->
	      %% Line 2447
	      apply 'rukeymerge2_2'/8
		  (I, T1, E1, T2, [H3M|M], E2, H2, H1)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'rukeymerge3_12_3',11}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge3_21_3'/11 =
    %% Line 2450
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,H3M,[H3|T3]> when 'true' ->
	      %% Line 2451
	      case call 'erlang':'element'
		       (I, H3) of
		%% Line 2452
		<E3>
		    when call 'erlang':'=<'
			  (E1,
			   E3) ->
		    %% Line 2453
		    apply 'rukeymerge3_21_3'/11
			(I, E1, H1, T1, E2, H2, T2, [H3M|M], E3, H3, T3)
		%% Line 2454
		<E3>
		    when call 'erlang':'=='
			  (E1,
			   E3M) ->
		    %% Line 2455
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|M], E3, H3, T3)
		%% Line 2456
		<E3> when 'true' ->
		    %% Line 2457
		    apply 'rukeymerge3_1'/11
			(I, T1, H1, T1, E2, H2, T2, [H1|[H3M|M]], E3, H3, T3)
	      end
	  %% Line 2459
	  <I,E1,H1,T1,E2,H2,T2,M,E3M,_X_H3M,[]>
	      when call 'erlang':'=='
		    (E1,
		     E3M) ->
	      %% Line 2460
	      apply 'rukeymerge2_1'/6
		  (I, T1, E2, T2, [H1|M], H2)
	  %% Line 2461
	  <I,_X_E1,H1,T1,E2,H2,T2,M,_X_E3M,H3M,[]> when 'true' ->
	      %% Line 2462
	      apply 'rukeymerge2_1'/6
		  (I, T1, E2, T2, [H1|[H3M|M]], H2)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'rukeymerge3_21_3',11}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge2_1'/7 =
    %% Line 2467
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],E2,HdM,T2,M,H2> when 'true' ->
	      %% Line 2468
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2469
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2470
		    apply 'ukeymerge2_1'/7
			(I, T1, E2, E1, T2, [H1|M], H2)
		%% Line 2471
		<E1>
		    when call 'erlang':'=='
			  (E2,
			   HdM) ->
		    %% Line 2472
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, M)
		%% Line 2473
		<E1> when 'true' ->
		    %% Line 2474
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, [H2|M])
	      end
	  %% Line 2476
	  <_X_I,[],E2,HdM,T2,M,_X_H2>
	      when call 'erlang':'=='
		    (E2,
		     HdM) ->
	      %% Line 2477
	      call 'lists':'reverse'
		  (T2, M)
	  %% Line 2478
	  <_X_I,[],_X_E2,_X_HdM,T2,M,H2> when 'true' ->
	      %% Line 2479
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ukeymerge2_1',7}}] )
	    -| ['compiler_generated'] )
	end
'ukeymerge2_2'/6 =
    %% Line 2481
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,T1,E1,H1,[H2|T2],M> when 'true' ->
	      %% Line 2482
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2483
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2484
		    apply 'ukeymerge2_1'/7
			(I, T1, E2, E1, T2, [H1|M], H2)
		%% Line 2485
		<_X_E2> when 'true' ->
		    %% Line 2486
		    apply 'ukeymerge2_2'/6
			(I, T1, E1, H1, T2, [H2|M])
	      end
	  %% Line 2488
	  <_X_I,T1,_X_E1,H1,[],M> when 'true' ->
	      %% Line 2489
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ukeymerge2_2',6}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge2_1'/6 =
    %% Line 2493
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,[H1|T1],E2,T2,M,H2> when 'true' ->
	      %% Line 2494
	      case call 'erlang':'element'
		       (I, H1) of
		%% Line 2495
		<E1>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2496
		    apply 'rukeymerge2_2'/8
			(I, T1, E1, T2, M, E2, H2, H1)
		%% Line 2497
		<_X_E1> when 'true' ->
		    %% Line 2498
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|M], H2)
	      end
	  %% Line 2500
	  <_X_I,[],_X_E2,T2,M,H2> when 'true' ->
	      %% Line 2501
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rukeymerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'rukeymerge2_2'/8 =
    %% Line 2503
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,T1,E1,[H2|T2],M,E2M,H2M,H1> when 'true' ->
	      %% Line 2504
	      case call 'erlang':'element'
		       (I, H2) of
		%% Line 2505
		<E2>
		    when call 'erlang':'=<'
			  (E1,
			   E2) ->
		    %% Line 2506
		    apply 'rukeymerge2_2'/8
			(I, T1, E1, T2, [H2M|M], E2, H2, H1)
		%% Line 2507
		<E2>
		    when call 'erlang':'=='
			  (E1,
			   E2M) ->
		    %% Line 2508
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|M], H2)
		%% Line 2509
		<E2> when 'true' ->
		    %% Line 2510
		    apply 'rukeymerge2_1'/6
			(I, T1, E2, T2, [H1|[H2M|M]], H2)
	      end
	  %% Line 2512
	  <_X_I,T1,E1,[],M,E2M,_X_H2M,H1>
	      when call 'erlang':'=='
		    (E1,
		     E2M) ->
	      %% Line 2513
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  %% Line 2514
	  <_X_I,T1,_X_E1,[],M,_X_E2M,H2M,H1> when 'true' ->
	      %% Line 2515
	      call 'lists':'reverse'
		  (T1, [H1|[H2M|M]])
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rukeymerge2_2',8}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_1'/6 =
    %% Line 2520
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2521
	      case apply Fun
		       (Y, Z) of
		%% Line 2522
		<'true'> when 'true' ->
		    %% Line 2523
		    apply 'fsplit_1'/6
			(Z, Y, Fun, L, [X|R], Rs)
		%% Line 2524
		<'false'> when 'true' ->
		    %% Line 2525
		    case apply Fun
			     (X, Z) of
		      %% Line 2526
		      <'true'> when 'true' ->
			  %% Line 2527
			  apply 'fsplit_1'/6
			      (Y, Z, Fun, L, [X|R], Rs)
		      %% Line 2528
		      <'false'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2529
			  apply 'fsplit_1'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2530
		      <'false'> when 'true' ->
			  %% Line 2531
			  apply 'fsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2534
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2535
	      apply 'rfmergel'/4
		  ([[Y|[X|R]]|Rs], [], Fun, 'asc')
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fsplit_1',6}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_1_1'/7 =
    %% Line 2537
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2538
	      case apply Fun
		       (Y, Z) of
		%% Line 2539
		<'true'> when 'true' ->
		    %% Line 2540
		    apply 'fsplit_1_1'/7
			(Z, Y, Fun, L, [X|R], Rs, S)
		%% Line 2541
		<'false'> when 'true' ->
		    %% Line 2542
		    case apply Fun
			     (X, Z) of
		      %% Line 2543
		      <'true'> when 'true' ->
			  %% Line 2544
			  apply 'fsplit_1_1'/7
			      (Y, Z, Fun, L, [X|R], Rs, S)
		      %% Line 2545
		      <'false'> when 'true' ->
			  %% Line 2546
			  case apply Fun
				   (S, Z) of
			    %% Line 2547
			    <'true'> when 'true' ->
				%% Line 2548
				apply 'fsplit_1'/6
				    (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
			    %% Line 2549
			    <'false'> when 'true' ->
				%% Line 2550
				apply 'fsplit_1'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2554
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2555
	      apply 'rfmergel'/4
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun, 'asc')
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'fsplit_1_1',7}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_2'/6 =
    %% Line 2558
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2559
	      case apply Fun
		       (Y, Z) of
		%% Line 2560
		<'false'> when 'true' ->
		    %% Line 2561
		    apply 'fsplit_2'/6
			(Z, Y, Fun, L, [X|R], Rs)
		%% Line 2562
		<'true'> when 'true' ->
		    %% Line 2563
		    case apply Fun
			     (X, Z) of
		      %% Line 2564
		      <'false'> when 'true' ->
			  %% Line 2565
			  apply 'fsplit_2'/6
			      (Y, Z, Fun, L, [X|R], Rs)
		      %% Line 2566
		      <'true'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2567
			  apply 'fsplit_2'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2568
		      <'true'> when 'true' ->
			  %% Line 2569
			  apply 'fsplit_2_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2572
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2573
	      apply 'fmergel'/4
		  ([[Y|[X|R]]|Rs], [], Fun, 'desc')
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fsplit_2',6}}] )
	    -| ['compiler_generated'] )
	end
'fsplit_2_1'/7 =
    %% Line 2575
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2576
	      case apply Fun
		       (Y, Z) of
		%% Line 2577
		<'false'> when 'true' ->
		    %% Line 2578
		    apply 'fsplit_2_1'/7
			(Z, Y, Fun, L, [X|R], Rs, S)
		%% Line 2579
		<'true'> when 'true' ->
		    %% Line 2580
		    case apply Fun
			     (X, Z) of
		      %% Line 2581
		      <'false'> when 'true' ->
			  %% Line 2582
			  apply 'fsplit_2_1'/7
			      (Y, Z, Fun, L, [X|R], Rs, S)
		      %% Line 2583
		      <'true'> when 'true' ->
			  %% Line 2584
			  case apply Fun
				   (S, Z) of
			    %% Line 2585
			    <'false'> when 'true' ->
				%% Line 2586
				apply 'fsplit_2'/6
				    (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
			    %% Line 2587
			    <'true'> when 'true' ->
				%% Line 2588
				apply 'fsplit_2'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2592
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2593
	      apply 'fmergel'/4
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun, 'desc')
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'fsplit_2_1',7}}] )
	    -| ['compiler_generated'] )
	end
'fmergel'/4 =
    %% Line 2595
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T1|[[H2|T2]|L]],Acc,Fun,'asc'> when 'true' ->
	      let <_cor4> =
		  %% Line 2596
		  apply 'fmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2596
		  apply 'fmergel'/4
		      (L, [_cor4|Acc], Fun, 'asc')
	  %% Line 2597
	  <[[H2|T2]|[T1|L]],Acc,Fun,'desc'> when 'true' ->
	      let <_cor5> =
		  %% Line 2598
		  apply 'fmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2598
		  apply 'fmergel'/4
		      (L, [_cor5|Acc], Fun, 'desc')
	  %% Line 2599
	  <[L|[]],[],_X_Fun,_X_O> when 'true' ->
	      %% Line 2600
	      L
	  %% Line 2601
	  <[L|[]],Acc,Fun,O> when 'true' ->
	      let <_cor6> =
		  %% Line 2602
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2602
		  apply 'rfmergel'/4
		      ([_cor6|Acc], [], Fun, O)
	  %% Line 2603
	  <[],Acc,Fun,O> when 'true' ->
	      %% Line 2604
	      apply 'rfmergel'/4
		  (Acc, [], Fun, O)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fmergel',4}}] )
	    -| ['compiler_generated'] )
	end
'rfmergel'/4 =
    %% Line 2606
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[[H2|T2]|[T1|L]],Acc,Fun,'asc'> when 'true' ->
	      let <_cor4> =
		  %% Line 2607
		  apply 'rfmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2607
		  apply 'rfmergel'/4
		      (L, [_cor4|Acc], Fun, 'asc')
	  %% Line 2608
	  <[T1|[[H2|T2]|L]],Acc,Fun,'desc'> when 'true' ->
	      let <_cor5> =
		  %% Line 2609
		  apply 'rfmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2609
		  apply 'rfmergel'/4
		      (L, [_cor5|Acc], Fun, 'desc')
	  %% Line 2610
	  <[L|[]],Acc,Fun,O> when 'true' ->
	      let <_cor6> =
		  %% Line 2611
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2611
		  apply 'fmergel'/4
		      ([_cor6|Acc], [], Fun, O)
	  %% Line 2612
	  <[],Acc,Fun,O> when 'true' ->
	      %% Line 2613
	      apply 'fmergel'/4
		  (Acc, [], Fun, O)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rfmergel',4}}] )
	    -| ['compiler_generated'] )
	end
'fmerge2_1'/5 =
    %% Line 2618
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2619
	      case apply Fun
		       (H1, H2) of
		%% Line 2620
		<'true'> when 'true' ->
		    %% Line 2621
		    apply 'fmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		%% Line 2622
		<'false'> when 'true' ->
		    %% Line 2623
		    apply 'fmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2625
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2626
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'fmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'fmerge2_2'/5 =
    %% Line 2628
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2629
	      case apply Fun
		       (H1, H2) of
		%% Line 2630
		<'true'> when 'true' ->
		    %% Line 2631
		    apply 'fmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		%% Line 2632
		<'false'> when 'true' ->
		    %% Line 2633
		    apply 'fmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2635
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2636
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'fmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rfmerge2_1'/5 =
    %% Line 2640
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2641
	      case apply Fun
		       (H1, H2) of
		%% Line 2642
		<'true'> when 'true' ->
		    %% Line 2643
		    apply 'rfmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		%% Line 2644
		<'false'> when 'true' ->
		    %% Line 2645
		    apply 'rfmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2647
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2648
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rfmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'rfmerge2_2'/5 =
    %% Line 2650
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2651
	      case apply Fun
		       (H1, H2) of
		%% Line 2652
		<'true'> when 'true' ->
		    %% Line 2653
		    apply 'rfmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		%% Line 2654
		<'false'> when 'true' ->
		    %% Line 2655
		    apply 'rfmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2657
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2658
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rfmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_1'/6 =
    %% Line 2663
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs> when 'true' ->
	      %% Line 2664
	      case apply Fun
		       (Y, Z) of
		%% Line 2665
		<'true'> when 'true' ->
		    %% Line 2666
		    case apply Fun
			     (Z, Y) of
		      %% Line 2667
		      <'true'> when 'true' ->
			  %% Line 2668
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, R, Rs)
		      %% Line 2669
		      <'false'> when 'true' ->
			  %% Line 2670
			  apply 'ufsplit_1'/6
			      (Z, Y, Fun, L, [X|R], Rs)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		%% Line 2672
		<'false'> when 'true' ->
		    %% Line 2673
		    case apply Fun
			     (X, Z) of
		      %% Line 2674
		      <'true'> when 'true' ->
			  %% Line 2675
			  case apply Fun
				   (Z, X) of
			    %% Line 2676
			    <'true'> when 'true' ->
				%% Line 2677
				apply 'ufsplit_1'/6
				    (Y, X, Fun, L, R, Rs)
			    %% Line 2678
			    <'false'> when 'true' ->
				%% Line 2679
				apply 'ufsplit_1'/6
				    (Y, Z, Fun, L, [X|R], Rs)
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2681
		      <'false'>
			  when call 'erlang':'=:='
				(R,
				 []) ->
			  %% Line 2682
			  apply 'ufsplit_1'/6
			      (Y, X, Fun, L, [Z|[]], Rs)
		      %% Line 2683
		      <'false'> when 'true' ->
			  %% Line 2684
			  apply 'ufsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, Z)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2687
	  <Y,X,Fun,[],R,Rs> when 'true' ->
	      %% Line 2688
	      apply 'rufmergel'/3
		  ([[Y|[X|R]]|Rs], [], Fun)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'ufsplit_1',6}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_1_1'/7 =
    %% Line 2691
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Y,X,Fun,[Z|L],R,Rs,S> when 'true' ->
	      %% Line 2692
	      case apply Fun
		       (Y, Z) of
		%% Line 2693
		<'true'> when 'true' ->
		    %% Line 2694
		    case apply Fun
			     (Z, Y) of
		      %% Line 2695
		      <'true'> when 'true' ->
			  %% Line 2696
			  apply 'ufsplit_1_1'/7
			      (Y, X, Fun, L, R, Rs, S)
		      %% Line 2697
		      <'false'> when 'true' ->
			  %% Line 2698
			  apply 'ufsplit_1_1'/7
			      (Z, Y, Fun, L, [X|R], Rs, S)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 2700
		<'false'> when 'true' ->
		    %% Line 2701
		    case apply Fun
			     (X, Z) of
		      %% Line 2702
		      <'true'> when 'true' ->
			  %% Line 2703
			  case apply Fun
				   (Z, X) of
			    %% Line 2704
			    <'true'> when 'true' ->
				%% Line 2705
				apply 'ufsplit_1_1'/7
				    (Y, X, Fun, L, R, Rs, S)
			    %% Line 2706
			    <'false'> when 'true' ->
				%% Line 2707
				apply 'ufsplit_1_1'/7
				    (Y, Z, Fun, L, [X|R], Rs, S)
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2709
		      <'false'> when 'true' ->
			  %% Line 2710
			  case apply Fun
				   (S, Z) of
			    %% Line 2711
			    <'true'> when 'true' ->
				%% Line 2712
				case apply Fun
					 (Z, S) of
				  %% Line 2713
				  <'true'> when 'true' ->
				      %% Line 2714
				      apply 'ufsplit_1_1'/7
					  (Y, X, Fun, L, R, Rs, S)
				  %% Line 2715
				  <'false'> when 'true' ->
				      %% Line 2716
				      apply 'ufsplit_1'/6
					  (Z, S, Fun, L, [], [[Y|[X|R]]|Rs])
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor9})
				    -| ['compiler_generated'] )
				end
			    %% Line 2718
			    <'false'> when 'true' ->
				%% Line 2719
				apply 'ufsplit_1'/6
				    (S, Z, Fun, L, [], [[Y|[X|R]]|Rs])
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2723
	  <Y,X,Fun,[],R,Rs,S> when 'true' ->
	      %% Line 2724
	      apply 'rufmergel'/3
		  ([[S|[]]|[[Y|[X|R]]|Rs]], [], Fun)
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'ufsplit_1_1',7}}] )
	    -| ['compiler_generated'] )
	end
'ufsplit_2'/4 =
    %% Line 2727
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Y,[Z|L],Fun,R> when 'true' ->
	      %% Line 2728
	      case apply Fun
		       (Y, Z) of
		%% Line 2729
		<'true'> when 'true' ->
		    %% Line 2730
		    case apply Fun
			     (Z, Y) of
		      %% Line 2731
		      <'true'> when 'true' ->
			  %% Line 2732
			  apply 'ufsplit_2'/4
			      (Y, L, Fun, R)
		      %% Line 2733
		      <'false'> when 'true' ->
			  let <_cor4> =
			      %% Line 2734
			      call 'lists':'reverse'
				  (R, [])
			  in  %% Line 2734
			      apply 'ufsplit_1'/6
				  (Z, Y, Fun, L, [], [_cor4|[]])
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 2736
		<'false'> when 'true' ->
		    %% Line 2737
		    apply 'ufsplit_2'/4
			(Z, L, Fun, [Y|R])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2739
	  <Y,[],_X_Fun,R> when 'true' ->
	      %% Line 2740
	      [Y|R]
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ufsplit_2',4}}] )
	    -| ['compiler_generated'] )
	end
'ufmergel'/3 =
    %% Line 2742
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[H1|T1]|[T2|L]],Acc,Fun> when 'true' ->
	      let <_cor3> =
		  %% Line 2743
		  apply 'ufmerge2_2'/5
		      (H1, T1, Fun, T2, [])
	      in  %% Line 2743
		  apply 'ufmergel'/3
		      (L, [_cor3|Acc], Fun)
	  %% Line 2744
	  <[L|[]],[],_X_Fun> when 'true' ->
	      %% Line 2745
	      L
	  %% Line 2746
	  <[L|[]],Acc,Fun> when 'true' ->
	      let <_cor4> =
		  %% Line 2747
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2747
		  apply 'rufmergel'/3
		      ([_cor4|Acc], [], Fun)
	  %% Line 2748
	  <[],Acc,Fun> when 'true' ->
	      %% Line 2749
	      apply 'rufmergel'/3
		  (Acc, [], Fun)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ufmergel',3}}] )
	    -| ['compiler_generated'] )
	end
'rufmergel'/3 =
    %% Line 2751
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[H2|T2]|[T1|L]],Acc,Fun> when 'true' ->
	      let <_cor3> =
		  %% Line 2752
		  apply 'rufmerge2_1'/5
		      (T1, H2, Fun, T2, [])
	      in  %% Line 2752
		  apply 'rufmergel'/3
		      (L, [_cor3|Acc], Fun)
	  %% Line 2753
	  <[L|[]],Acc,Fun> when 'true' ->
	      let <_cor4> =
		  %% Line 2754
		  call 'lists':'reverse'
		      (L, [])
	      in  %% Line 2754
		  apply 'ufmergel'/3
		      ([_cor4|Acc], [], Fun)
	  %% Line 2755
	  <[],Acc,Fun> when 'true' ->
	      %% Line 2756
	      apply 'ufmergel'/3
		  (Acc, [], Fun)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rufmergel',3}}] )
	    -| ['compiler_generated'] )
	end
'ufmerge2_1'/6 =
    %% Line 2762
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,Fun,T2,M,HdM> when 'true' ->
	      %% Line 2763
	      case apply Fun
		       (H1, H2) of
		%% Line 2764
		<'true'> when 'true' ->
		    %% Line 2765
		    apply 'ufmerge2_1'/6
			(T1, H2, Fun, T2, [H1|M], H1)
		%% Line 2766
		<'false'> when 'true' ->
		    %% Line 2767
		    case apply Fun
			     (H2, HdM) of
		      %% Line 2768
		      <'true'> when 'true' ->
			  %% Line 2769
			  apply 'ufmerge2_2'/5
			      (H1, T1, Fun, T2, M)
		      %% Line 2770
		      <'false'> when 'true' ->
			  %% Line 2771
			  apply 'ufmerge2_2'/5
			      (H1, T1, Fun, T2, [H2|M])
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2774
	  <[],H2,Fun,T2,M,HdM> when 'true' ->
	      %% Line 2775
	      case apply Fun
		       (H2, HdM) of
		%% Line 2776
		<'true'> when 'true' ->
		    %% Line 2777
		    call 'lists':'reverse'
			(T2, M)
		%% Line 2778
		<'false'> when 'true' ->
		    %% Line 2779
		    call 'lists':'reverse'
			(T2, [H2|M])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'ufmerge2_1',6}}] )
	    -| ['compiler_generated'] )
	end
'ufmerge2_2'/5 =
    %% Line 2782
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <H1,T1,Fun,[H2|T2],M> when 'true' ->
	      %% Line 2783
	      case apply Fun
		       (H1, H2) of
		%% Line 2784
		<'true'> when 'true' ->
		    %% Line 2785
		    apply 'ufmerge2_1'/6
			(T1, H2, Fun, T2, [H1|M], H1)
		%% Line 2786
		<'false'> when 'true' ->
		    %% Line 2787
		    apply 'ufmerge2_2'/5
			(H1, T1, Fun, T2, [H2|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2789
	  <H1,T1,_X_Fun,[],M> when 'true' ->
	      %% Line 2790
	      call 'lists':'reverse'
		  (T1, [H1|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'ufmerge2_2',5}}] )
	    -| ['compiler_generated'] )
	end
'rufmerge2_1'/5 =
    %% Line 2794
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H1|T1],H2,Fun,T2,M> when 'true' ->
	      %% Line 2795
	      case apply Fun
		       (H1, H2) of
		%% Line 2796
		<'true'> when 'true' ->
		    %% Line 2797
		    apply 'rufmerge2_2'/6
			(H1, T1, Fun, T2, M, H2)
		%% Line 2798
		<'false'> when 'true' ->
		    %% Line 2799
		    apply 'rufmerge2_1'/5
			(T1, H2, Fun, T2, [H1|M])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2801
	  <[],H2,_X_Fun,T2,M> when 'true' ->
	      %% Line 2802
	      call 'lists':'reverse'
		  (T2, [H2|M])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rufmerge2_1',5}}] )
	    -| ['compiler_generated'] )
	end
'rufmerge2_2'/6 =
    %% Line 2805
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <H1,T1,Fun,[H2|T2],M,H2M> when 'true' ->
	      %% Line 2806
	      case apply Fun
		       (H1, H2) of
		%% Line 2807
		<'true'> when 'true' ->
		    %% Line 2808
		    apply 'rufmerge2_2'/6
			(H1, T1, Fun, T2, [H2M|M], H2)
		%% Line 2809
		<'false'> when 'true' ->
		    %% Line 2810
		    case apply Fun
			     (H2M, H1) of
		      %% Line 2811
		      <'true'> when 'true' ->
			  %% Line 2812
			  apply 'rufmerge2_1'/5
			      (T1, H2, Fun, T2, [H1|M])
		      %% Line 2813
		      <'false'> when 'true' ->
			  %% Line 2814
			  apply 'rufmerge2_1'/5
			      (T1, H2, Fun, T2, [H1|[H2M|M]])
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2817
	  <H1,T1,Fun,[],M,H2M> when 'true' ->
	      %% Line 2818
	      case apply Fun
		       (H2M, H1) of
		%% Line 2819
		<'true'> when 'true' ->
		    %% Line 2820
		    call 'lists':'reverse'
			(T1, [H1|M])
		%% Line 2821
		<'false'> when 'true' ->
		    %% Line 2822
		    call 'lists':'reverse'
			(T1, [H1|[H2M|M]])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rufmerge2_2',6}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('lists')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('lists', _cor0)
end