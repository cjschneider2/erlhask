module 'gb_sets' ['add'/2,
		  'add_element'/2,
		  'balance'/1,
		  'del_element'/2,
		  'delete'/2,
		  'delete_any'/2,
		  'difference'/2,
		  'empty'/0,
		  'filter'/2,
		  'fold'/3,
		  'from_list'/1,
		  'from_ordset'/1,
		  'insert'/2,
		  'intersection'/1,
		  'intersection'/2,
		  'is_disjoint'/2,
		  'is_element'/2,
		  'is_empty'/1,
		  'is_member'/2,
		  'is_set'/1,
		  'is_subset'/2,
		  'iterator'/1,
		  'largest'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'new'/0,
		  'next'/1,
		  'singleton'/1,
		  'size'/1,
		  'smallest'/1,
		  'subtract'/2,
		  'take_largest'/1,
		  'take_smallest'/1,
		  'to_list'/1,
		  'union'/1,
		  'union'/2]
    attributes [%% Line 199
		'export_type' =
		    %% Line 199
		    [{'set',0}|[{'set',1}|[{'iter',0}|[{'iter',1}]]]],
		%% Line 201
		'type' =
		    %% Line 201
		    [{'gb_set_node',{'type',201,'union',[{'atom',201,'nil'}|[{'type',201,'tuple',[{'var',201,'Element'}|[{'var',201,'_'}|[{'var',201,'_'}]]]}]]},[{'var',201,'Element'}]}],
		%% Line 202
		'type' =
		    %% Line 202
		    [{'gb_set_node',{'type',202,'gb_set_node',[{'var',202,'_'}]},[]}],
		%% Line 203
		'opaque' =
		    %% Line 203
		    [{'set',{'type',203,'tuple',[{'type',203,'non_neg_integer',[]}|[{'type',203,'gb_set_node',[{'var',203,'Element'}]}]]},[{'var',203,'Element'}]}],
		%% Line 204
		'opaque' =
		    %% Line 204
		    [{'set',{'type',204,'set',[{'var',204,'_'}]},[]}],
		%% Line 205
		'opaque' =
		    %% Line 205
		    [{'iter',{'type',205,'list',[{'type',205,'gb_set_node',[{'var',205,'Element'}]}]},[{'var',205,'Element'}]}],
		%% Line 206
		'opaque' =
		    %% Line 206
		    [{'iter',{'type',206,'list',[{'type',206,'gb_set_node',[]}]},[]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'empty',0},[{'type',212,'bounded_fun',[{'type',212,'fun',[{'type',212,'product',[]}|[{'var',212,'Set'}]]}|[[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Set'}|[{'remote_type',213,[{'atom',213,'gb_sets'}|[{'atom',213,'set'}|[[]]]]}]]]]}]]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'new',0},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[]}|[{'var',218,'Set'}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Set'}|[{'remote_type',219,[{'atom',219,'gb_sets'}|[{'atom',219,'set'}|[[]]]]}]]]]}]]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'is_empty',1},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'Set'}]}|[{'type',223,'boolean',[]}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Set'}|[{'remote_type',224,[{'atom',224,'gb_sets'}|[{'atom',224,'set'}|[[]]]]}]]]]}]]]}]}],
		%% Line 231
		'spec' =
		    %% Line 231
		    [{{'size',1},[{'type',231,'bounded_fun',[{'type',231,'fun',[{'type',231,'product',[{'var',231,'Set'}]}|[{'type',231,'non_neg_integer',[]}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Set'}|[{'remote_type',232,[{'atom',232,'gb_sets'}|[{'atom',232,'set'}|[[]]]]}]]]]}]]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'singleton',1},[{'type',237,'fun',[{'type',237,'product',[{'var',237,'Element'}]}|[{'type',237,'set',[{'var',237,'Element'}]}]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'is_element',2},[{'type',242,'bounded_fun',[{'type',242,'fun',[{'type',242,'product',[{'var',242,'Element'}|[{'var',242,'Set'}]]}|[{'type',242,'boolean',[]}]]}|[[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Set'}|[{'type',243,'set',[{'var',243,'Element'}]}]]]]}]]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'is_member',2},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'Element'}|[{'var',248,'Set'}]]}|[{'type',248,'boolean',[]}]]}|[[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Set'}|[{'type',249,'set',[{'var',249,'Element'}]}]]]]}]]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'insert',2},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'Element'}|[{'var',263,'Set1'}]]}|[{'var',263,'Set2'}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Set1'}|[{'type',264,'set',[{'var',264,'Element'}]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Set2'}|[{'type',265,'set',[{'var',265,'Element'}]}]]]]}]]]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'balance',1},[{'type',321,'bounded_fun',[{'type',321,'fun',[{'type',321,'product',[{'var',321,'Set1'}]}|[{'var',321,'Set2'}]]}|[[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Set1'}|[{'type',322,'set',[{'var',322,'Element'}]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Set2'}|[{'type',323,'set',[{'var',323,'Element'}]}]]]]}]]]]}]}],
		%% Line 348
		'spec' =
		    %% Line 348
		    [{{'add_element',2},[{'type',348,'bounded_fun',[{'type',348,'fun',[{'type',348,'product',[{'var',348,'Element'}|[{'var',348,'Set1'}]]}|[{'var',348,'Set2'}]]}|[[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'Set1'}|[{'type',349,'set',[{'var',349,'Element'}]}]]]]}|[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Set2'}|[{'type',350,'set',[{'var',350,'Element'}]}]]]]}]]]]}]}],
		%% Line 355
		'spec' =
		    %% Line 355
		    [{{'add',2},[{'type',355,'bounded_fun',[{'type',355,'fun',[{'type',355,'product',[{'var',355,'Element'}|[{'var',355,'Set1'}]]}|[{'var',355,'Set2'}]]}|[[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'Set1'}|[{'type',356,'set',[{'var',356,'Element'}]}]]]]}|[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'Set2'}|[{'type',357,'set',[{'var',357,'Element'}]}]]]]}]]]]}]}],
		%% Line 367
		'spec' =
		    %% Line 367
		    [{{'from_list',1},[{'type',367,'bounded_fun',[{'type',367,'fun',[{'type',367,'product',[{'var',367,'List'}]}|[{'var',367,'Set'}]]}|[[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'List'}|[{'type',368,'list',[{'var',368,'Element'}]}]]]]}|[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Set'}|[{'type',369,'set',[{'var',369,'Element'}]}]]]]}]]]]}]}],
		%% Line 374
		'spec' =
		    %% Line 374
		    [{{'from_ordset',1},[{'type',374,'bounded_fun',[{'type',374,'fun',[{'type',374,'product',[{'var',374,'List'}]}|[{'var',374,'Set'}]]}|[[{'type',375,'constraint',[{'atom',375,'is_subtype'}|[[{'var',375,'List'}|[{'type',375,'list',[{'var',375,'Element'}]}]]]]}|[{'type',376,'constraint',[{'atom',376,'is_subtype'}|[[{'var',376,'Set'}|[{'type',376,'set',[{'var',376,'Element'}]}]]]]}]]]]}]}],
		%% Line 382
		'spec' =
		    %% Line 382
		    [{{'del_element',2},[{'type',382,'bounded_fun',[{'type',382,'fun',[{'type',382,'product',[{'var',382,'Element'}|[{'var',382,'Set1'}]]}|[{'var',382,'Set2'}]]}|[[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'Set1'}|[{'type',383,'set',[{'var',383,'Element'}]}]]]]}|[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'Set2'}|[{'type',384,'set',[{'var',384,'Element'}]}]]]]}]]]]}]}],
		%% Line 389
		'spec' =
		    %% Line 389
		    [{{'delete_any',2},[{'type',389,'bounded_fun',[{'type',389,'fun',[{'type',389,'product',[{'var',389,'Element'}|[{'var',389,'Set1'}]]}|[{'var',389,'Set2'}]]}|[[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'Set1'}|[{'type',390,'set',[{'var',390,'Element'}]}]]]]}|[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'Set2'}|[{'type',391,'set',[{'var',391,'Element'}]}]]]]}]]]]}]}],
		%% Line 401
		'spec' =
		    %% Line 401
		    [{{'delete',2},[{'type',401,'bounded_fun',[{'type',401,'fun',[{'type',401,'product',[{'var',401,'Element'}|[{'var',401,'Set1'}]]}|[{'var',401,'Set2'}]]}|[[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'Set1'}|[{'type',402,'set',[{'var',402,'Element'}]}]]]]}|[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'Set2'}|[{'type',403,'set',[{'var',403,'Element'}]}]]]]}]]]]}]}],
		%% Line 425
		'spec' =
		    %% Line 425
		    [{{'take_smallest',1},[{'type',425,'bounded_fun',[{'type',425,'fun',[{'type',425,'product',[{'var',425,'Set1'}]}|[{'type',425,'tuple',[{'var',425,'Element'}|[{'var',425,'Set2'}]]}]]}|[[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'Set1'}|[{'type',426,'set',[{'var',426,'Element'}]}]]]]}|[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'Set2'}|[{'type',427,'set',[{'var',427,'Element'}]}]]]]}]]]]}]}],
		%% Line 439
		'spec' =
		    %% Line 439
		    [{{'smallest',1},[{'type',439,'bounded_fun',[{'type',439,'fun',[{'type',439,'product',[{'var',439,'Set'}]}|[{'var',439,'Element'}]]}|[[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'Set'}|[{'type',440,'set',[{'var',440,'Element'}]}]]]]}]]]}]}],
		%% Line 450
		'spec' =
		    %% Line 450
		    [{{'take_largest',1},[{'type',450,'bounded_fun',[{'type',450,'fun',[{'type',450,'product',[{'var',450,'Set1'}]}|[{'type',450,'tuple',[{'var',450,'Element'}|[{'var',450,'Set2'}]]}]]}|[[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'Set1'}|[{'type',451,'set',[{'var',451,'Element'}]}]]]]}|[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'Set2'}|[{'type',452,'set',[{'var',452,'Element'}]}]]]]}]]]]}]}],
		%% Line 464
		'spec' =
		    %% Line 464
		    [{{'largest',1},[{'type',464,'bounded_fun',[{'type',464,'fun',[{'type',464,'product',[{'var',464,'Set'}]}|[{'var',464,'Element'}]]}|[[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'Set'}|[{'type',465,'set',[{'var',465,'Element'}]}]]]]}]]]}]}],
		%% Line 475
		'spec' =
		    %% Line 475
		    [{{'to_list',1},[{'type',475,'bounded_fun',[{'type',475,'fun',[{'type',475,'product',[{'var',475,'Set'}]}|[{'var',475,'List'}]]}|[[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'Set'}|[{'type',476,'set',[{'var',476,'Element'}]}]]]]}|[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'List'}|[{'type',477,'list',[{'var',477,'Element'}]}]]]]}]]]]}]}],
		%% Line 488
		'spec' =
		    %% Line 488
		    [{{'iterator',1},[{'type',488,'bounded_fun',[{'type',488,'fun',[{'type',488,'product',[{'var',488,'Set'}]}|[{'var',488,'Iter'}]]}|[[{'type',489,'constraint',[{'atom',489,'is_subtype'}|[[{'var',489,'Set'}|[{'type',489,'set',[{'var',489,'Element'}]}]]]]}|[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'Iter'}|[{'type',490,'iter',[{'var',490,'Element'}]}]]]]}]]]]}]}],
		%% Line 505
		'spec' =
		    %% Line 505
		    [{{'next',1},[{'type',505,'bounded_fun',[{'type',505,'fun',[{'type',505,'product',[{'var',505,'Iter1'}]}|[{'type',505,'union',[{'type',505,'tuple',[{'var',505,'Element'}|[{'var',505,'Iter2'}]]}|[{'atom',505,'none'}]]}]]}|[[{'type',506,'constraint',[{'atom',506,'is_subtype'}|[[{'var',506,'Iter1'}|[{'type',506,'iter',[{'var',506,'Element'}]}]]]]}|[{'type',507,'constraint',[{'atom',507,'is_subtype'}|[[{'var',507,'Iter2'}|[{'type',507,'iter',[{'var',507,'Element'}]}]]]]}]]]]}]}],
		%% Line 537
		'spec' =
		    %% Line 537
		    [{{'union',2},[{'type',537,'bounded_fun',[{'type',537,'fun',[{'type',537,'product',[{'var',537,'Set1'}|[{'var',537,'Set2'}]]}|[{'var',537,'Set3'}]]}|[[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'Set1'}|[{'type',538,'set',[{'var',538,'Element'}]}]]]]}|[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'Set2'}|[{'type',539,'set',[{'var',539,'Element'}]}]]]]}|[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'Set3'}|[{'type',540,'set',[{'var',540,'Element'}]}]]]]}]]]]]}]}],
		%% Line 562
		'spec' =
		    %% Line 562
		    [{{'mk_set',2},[{'type',562,'fun',[{'type',562,'product',[{'type',562,'non_neg_integer',[]}|[{'type',562,'gb_set_node',[{'var',562,'T'}]}]]}|[{'type',562,'set',[{'var',562,'T'}]}]]}]}],
		%% Line 642
		'spec' =
		    %% Line 642
		    [{{'union',1},[{'type',642,'bounded_fun',[{'type',642,'fun',[{'type',642,'product',[{'var',642,'SetList'}]}|[{'var',642,'Set'}]]}|[[{'type',643,'constraint',[{'atom',643,'is_subtype'}|[[{'var',643,'SetList'}|[{'type',643,'nonempty_list',[{'type',643,'set',[{'var',643,'Element'}]}]}]]]]}|[{'type',644,'constraint',[{'atom',644,'is_subtype'}|[[{'var',644,'Set'}|[{'type',644,'set',[{'var',644,'Element'}]}]]]]}]]]]}]}],
		%% Line 657
		'spec' =
		    %% Line 657
		    [{{'intersection',2},[{'type',657,'bounded_fun',[{'type',657,'fun',[{'type',657,'product',[{'var',657,'Set1'}|[{'var',657,'Set2'}]]}|[{'var',657,'Set3'}]]}|[[{'type',658,'constraint',[{'atom',658,'is_subtype'}|[[{'var',658,'Set1'}|[{'type',658,'set',[{'var',658,'Element'}]}]]]]}|[{'type',659,'constraint',[{'atom',659,'is_subtype'}|[[{'var',659,'Set2'}|[{'type',659,'set',[{'var',659,'Element'}]}]]]]}|[{'type',660,'constraint',[{'atom',660,'is_subtype'}|[[{'var',660,'Set3'}|[{'type',660,'set',[{'var',660,'Element'}]}]]]]}]]]]]}]}],
		%% Line 708
		'spec' =
		    %% Line 708
		    [{{'intersection',1},[{'type',708,'bounded_fun',[{'type',708,'fun',[{'type',708,'product',[{'var',708,'SetList'}]}|[{'var',708,'Set'}]]}|[[{'type',709,'constraint',[{'atom',709,'is_subtype'}|[[{'var',709,'SetList'}|[{'type',709,'nonempty_list',[{'type',709,'set',[{'var',709,'Element'}]}]}]]]]}|[{'type',710,'constraint',[{'atom',710,'is_subtype'}|[[{'var',710,'Set'}|[{'type',710,'set',[{'var',710,'Element'}]}]]]]}]]]]}]}],
		%% Line 719
		'spec' =
		    %% Line 719
		    [{{'is_disjoint',2},[{'type',719,'bounded_fun',[{'type',719,'fun',[{'type',719,'product',[{'var',719,'Set1'}|[{'var',719,'Set2'}]]}|[{'type',719,'boolean',[]}]]}|[[{'type',720,'constraint',[{'atom',720,'is_subtype'}|[[{'var',720,'Set1'}|[{'type',720,'set',[{'var',720,'Element'}]}]]]]}|[{'type',721,'constraint',[{'atom',721,'is_subtype'}|[[{'var',721,'Set2'}|[{'type',721,'set',[{'var',721,'Element'}]}]]]]}]]]]}]}],
		%% Line 749
		'spec' =
		    %% Line 749
		    [{{'subtract',2},[{'type',749,'bounded_fun',[{'type',749,'fun',[{'type',749,'product',[{'var',749,'Set1'}|[{'var',749,'Set2'}]]}|[{'var',749,'Set3'}]]}|[[{'type',750,'constraint',[{'atom',750,'is_subtype'}|[[{'var',750,'Set1'}|[{'type',750,'set',[{'var',750,'Element'}]}]]]]}|[{'type',751,'constraint',[{'atom',751,'is_subtype'}|[[{'var',751,'Set2'}|[{'type',751,'set',[{'var',751,'Element'}]}]]]]}|[{'type',752,'constraint',[{'atom',752,'is_subtype'}|[[{'var',752,'Set3'}|[{'type',752,'set',[{'var',752,'Element'}]}]]]]}]]]]]}]}],
		%% Line 757
		'spec' =
		    %% Line 757
		    [{{'difference',2},[{'type',757,'bounded_fun',[{'type',757,'fun',[{'type',757,'product',[{'var',757,'Set1'}|[{'var',757,'Set2'}]]}|[{'var',757,'Set3'}]]}|[[{'type',758,'constraint',[{'atom',758,'is_subtype'}|[[{'var',758,'Set1'}|[{'type',758,'set',[{'var',758,'Element'}]}]]]]}|[{'type',759,'constraint',[{'atom',759,'is_subtype'}|[[{'var',759,'Set2'}|[{'type',759,'set',[{'var',759,'Element'}]}]]]]}|[{'type',760,'constraint',[{'atom',760,'is_subtype'}|[[{'var',760,'Set3'}|[{'type',760,'set',[{'var',760,'Element'}]}]]]]}]]]]]}]}],
		%% Line 808
		'spec' =
		    %% Line 808
		    [{{'is_subset',2},[{'type',808,'bounded_fun',[{'type',808,'fun',[{'type',808,'product',[{'var',808,'Set1'}|[{'var',808,'Set2'}]]}|[{'type',808,'boolean',[]}]]}|[[{'type',809,'constraint',[{'atom',809,'is_subtype'}|[[{'var',809,'Set1'}|[{'type',809,'set',[{'var',809,'Element'}]}]]]]}|[{'type',810,'constraint',[{'atom',810,'is_subtype'}|[[{'var',810,'Set2'}|[{'type',810,'set',[{'var',810,'Element'}]}]]]]}]]]]}]}],
		%% Line 851
		'spec' =
		    %% Line 851
		    [{{'is_set',1},[{'type',851,'bounded_fun',[{'type',851,'fun',[{'type',851,'product',[{'var',851,'Term'}]}|[{'type',851,'boolean',[]}]]}|[[{'type',852,'constraint',[{'atom',852,'is_subtype'}|[[{'var',852,'Term'}|[{'type',852,'term',[]}]]]]}]]]}]}],
		%% Line 858
		'spec' =
		    %% Line 858
		    [{{'filter',2},[{'type',858,'bounded_fun',[{'type',858,'fun',[{'type',858,'product',[{'var',858,'Pred'}|[{'var',858,'Set1'}]]}|[{'var',858,'Set2'}]]}|[[{'type',859,'constraint',[{'atom',859,'is_subtype'}|[[{'var',859,'Pred'}|[{'type',859,'fun',[{'type',859,'product',[{'var',859,'Element'}]}|[{'type',859,'boolean',[]}]]}]]]]}|[{'type',860,'constraint',[{'atom',860,'is_subtype'}|[[{'var',860,'Set1'}|[{'type',860,'set',[{'var',860,'Element'}]}]]]]}|[{'type',861,'constraint',[{'atom',861,'is_subtype'}|[[{'var',861,'Set2'}|[{'type',861,'set',[{'var',861,'Element'}]}]]]]}]]]]]}]}],
		%% Line 866
		'spec' =
		    %% Line 866
		    [{{'fold',3},[{'type',866,'bounded_fun',[{'type',866,'fun',[{'type',866,'product',[{'var',866,'Function'}|[{'var',866,'Acc0'}|[{'var',866,'Set'}]]]}|[{'var',866,'Acc1'}]]}|[[{'type',867,'constraint',[{'atom',867,'is_subtype'}|[[{'var',867,'Function'}|[{'type',867,'fun',[{'type',867,'product',[{'var',867,'Element'}|[{'var',867,'AccIn'}]]}|[{'var',867,'AccOut'}]]}]]]]}|[{'type',868,'constraint',[{'atom',868,'is_subtype'}|[[{'var',868,'Acc0'}|[{'var',868,'Acc'}]]]]}|[{'type',869,'constraint',[{'atom',869,'is_subtype'}|[[{'var',869,'Acc1'}|[{'var',869,'Acc'}]]]]}|[{'type',870,'constraint',[{'atom',870,'is_subtype'}|[[{'var',870,'AccIn'}|[{'var',870,'Acc'}]]]]}|[{'type',871,'constraint',[{'atom',871,'is_subtype'}|[[{'var',871,'AccOut'}|[{'var',871,'Acc'}]]]]}|[{'type',872,'constraint',[{'atom',872,'is_subtype'}|[[{'var',872,'Set'}|[{'type',872,'set',[{'var',872,'Element'}]}]]]]}]]]]]]]]}]}]]
'empty'/0 =
    %% Line 215
    fun () ->
	%% Line 216
	{0,'nil'}
'new'/0 =
    %% Line 221
    fun () ->
	apply 'empty'/0
	    ()
'is_empty'/1 =
    %% Line 226
    fun (_cor0) ->
	case _cor0 of
	  <{0,'nil'}> when 'true' ->
	      %% Line 227
	      'true'
	  %% Line 228
	  <_cor2> when 'true' ->
	      %% Line 229
	      'false'
	end
'size'/1 =
    %% Line 234
    fun (_cor0) ->
	case _cor0 of
	  <{Size,_cor2}> when 'true' ->
	      %% Line 235
	      Size
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'size',1}}] )
	    -| ['compiler_generated'] )
	end
'singleton'/1 =
    %% Line 239
    fun (_cor0) ->
	%% Line 240
	{1,{_cor0,'nil','nil'}}
'is_element'/2 =
    %% Line 245
    fun (_cor1,_cor0) ->
	%% Line 246
	apply 'is_member'/2
	    (_cor1, _cor0)
'is_member'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{_cor4,T}> when 'true' ->
	      %% Line 252
	      apply 'is_member_1'/2
		  (Key, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_member',2}}] )
	    -| ['compiler_generated'] )
	end
'is_member_1'/2 =
    %% Line 254
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,Smaller,_cor4}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      %% Line 255
	      apply 'is_member_1'/2
		  (Key, Smaller)
	  %% Line 256
	  <Key,{Key1,_cor5,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      %% Line 257
	      apply 'is_member_1'/2
		  (Key, Bigger)
	  %% Line 258
	  <_cor6,{_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 259
	      'true'
	  %% Line 260
	  <_cor10,'nil'> when 'true' ->
	      %% Line 261
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_member_1',2}}] )
	    -| ['compiler_generated'] )
	end
'insert'/2 =
    %% Line 267
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{S,T}> when 'true' ->
	      let <S1> =
		  %% Line 268
		  call 'erlang':'+'
		      (S, 1)
	      in  let <_cor3> =
		      %% Line 269
		      call 'erlang':'*'
			  (S1, S1)
		  in  let <_cor4> =
			  %% Line 269
			  apply 'insert_1'/3
			      (Key, T, _cor3)
		      in  %% Line 269
			  {S1,_cor4}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'insert',2}}] )
	    -| ['compiler_generated'] )
	end
'insert_1'/3 =
    %% Line 271
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,{Key1,Smaller,Bigger},S>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      let <_cor3> =
		  %% Line 272
		  call 'erlang':'bsr'
		      (S, 1)
	      in  %% Line 272
		  case apply 'insert_1'/3
			   (Key, Smaller, _cor3) of
		    %% Line 273
		    <{T1,H1,S1}>
			when call 'erlang':'is_integer'
			      (H1) ->
			let <T> = {%% Line 274
			     Key1,%% Line 274
				  T1,%% Line 274
				     Bigger}
			in  %% Line 275
			    case apply 'count'/1
				     (Bigger) of
			      <{H2,S2}> when 'true' ->
				  let <_cor6> =
				      %% Line 276
				      call 'erlang':'max'
					  (H1, H2)
				  in  let <H> =
					  %% Line 276
					  call 'erlang':'bsl'
					      (_cor6, 1)
				      in  let <_cor8> =
					      %% Line 277
					      call 'erlang':'+'
						  (S1, S2)
					  in  let <SS> =
						  %% Line 277
						  call 'erlang':'+'
						      (_cor8, 1)
					      in  let <P> =
						      %% Line 278
						      call 'erlang':'*'
							  (SS, SS)
						  in  %% Line 279
						      case <> of
							%% Line 280
							<>
							    when call 'erlang':'>'
								  (H,
								   P) ->
							    %% Line 281
							    apply 'balance'/2
								(T, SS)
							%% Line 282
							<> when 'true' ->
							    %% Line 283
							    {T,H,SS}
						      end
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		    %% Line 285
		    <T1> when 'true' ->
			%% Line 286
			{Key1,T1,Bigger}
		  end
	  %% Line 288
	  <Key,{Key1,Smaller,Bigger},S>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      let <_cor12> =
		  %% Line 289
		  call 'erlang':'bsr'
		      (S, 1)
	      in  %% Line 289
		  case apply 'insert_1'/3
			   (Key, Bigger, _cor12) of
		    %% Line 290
		    <{T1,H1,S1}>
			when call 'erlang':'is_integer'
			      (H1) ->
			let <T> = {%% Line 291
			     Key1,%% Line 291
				  Smaller,%% Line 291
					  T1}
			in  %% Line 292
			    case apply 'count'/1
				     (Smaller) of
			      <{H2,S2}> when 'true' ->
				  let <_cor15> =
				      %% Line 293
				      call 'erlang':'max'
					  (H1, H2)
				  in  let <H> =
					  %% Line 293
					  call 'erlang':'bsl'
					      (_cor15, 1)
				      in  let <_cor17> =
					      %% Line 294
					      call 'erlang':'+'
						  (S1, S2)
					  in  let <SS> =
						  %% Line 294
						  call 'erlang':'+'
						      (_cor17, 1)
					      in  let <P> =
						      %% Line 295
						      call 'erlang':'*'
							  (SS, SS)
						  in  %% Line 296
						      case <> of
							%% Line 297
							<>
							    when call 'erlang':'>'
								  (H,
								   P) ->
							    %% Line 298
							    apply 'balance'/2
								(T, SS)
							%% Line 299
							<> when 'true' ->
							    %% Line 300
							    {T,H,SS}
						      end
			      ( <_cor14> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor14})
				-| ['compiler_generated'] )
			    end
		    %% Line 302
		    <T1> when 'true' ->
			%% Line 303
			{Key1,Smaller,T1}
		  end
	  %% Line 305
	  <Key,'nil',0> when 'true' ->
	      %% Line 306
	      {{Key,'nil','nil'},1,1}
	  %% Line 307
	  <Key,'nil',_cor24> when 'true' ->
	      %% Line 308
	      {Key,'nil','nil'}
	  %% Line 309
	  <Key,_cor25,_cor26> when 'true' ->
	      %% Line 310
	      call 'erlang':'error'
		  ({'key_exists',Key})
	end
'count'/1 =
    %% Line 312
    fun (_cor0) ->
	case _cor0 of
	  <{_cor8,'nil','nil'}> when 'true' ->
	      %% Line 313
	      {1,1}
	  %% Line 314
	  <{_cor9,Sm,Bi}> when 'true' ->
	      %% Line 315
	      case apply 'count'/1
		       (Sm) of
		<{H1,S1}> when 'true' ->
		    %% Line 316
		    case apply 'count'/1
			     (Bi) of
		      <{H2,S2}> when 'true' ->
			  let <_cor5> =
			      %% Line 317
			      call 'erlang':'max'
				  (H1, H2)
			  in  let <_cor6> =
				  %% Line 317
				  call 'erlang':'bsl'
				      (_cor5, 1)
			      in  let <_cor3> =
				      %% Line 317
				      call 'erlang':'+'
					  (S1, S2)
				  in  let <_cor4> =
					  %% Line 317
					  call 'erlang':'+'
					      (_cor3, 1)
				      in  %% Line 317
					  {_cor6,_cor4}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 318
	  <'nil'> when 'true' ->
	      %% Line 319
	      {1,0}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'count',1}}] )
	    -| ['compiler_generated'] )
	end
'balance'/1 =
    %% Line 325
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      let <_cor1> =
		  %% Line 326
		  apply 'balance'/2
		      (T, S)
	      in  %% Line 326
		  {S,_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'balance',1}}] )
	    -| ['compiler_generated'] )
	end
'balance'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 329
	    apply 'to_list_1'/1
		(_cor1)
	in  %% Line 329
	    apply 'balance_list'/2
		(_cor2, _cor0)
'balance_list'/2 =
    %% Line 331
    fun (_cor1,_cor0) ->
	%% Line 332
	case apply 'balance_list_1'/2
		 (_cor1, _cor0) of
	  <{T,_cor5}> when 'true' ->
	      %% Line 333
	      T
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'balance_list_1'/2 =
    %% Line 335
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,S>
	      when call 'erlang':'>'
		    (S,
		     1) ->
	      let <Sm> =
		  %% Line 336
		  call 'erlang':'-'
		      (S, 1)
	      in  let <S2> =
		      %% Line 337
		      call 'erlang':'div'
			  (Sm, 2)
		  in  let <S1> =
			  %% Line 338
			  call 'erlang':'-'
			      (Sm, S2)
		      in  %% Line 339
			  case apply 'balance_list_1'/2
				   (L, S1) of
			    <{T1,[K|L1]}> when 'true' ->
				%% Line 340
				case apply 'balance_list_1'/2
					 (L1, S2) of
				  <{T2,L2}> when 'true' ->
				      let <T> = {%% Line 341
					   K,%% Line 341
					     T1,%% Line 341
						T2}
				      in  %% Line 342
					  {T,L2}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	  %% Line 343
	  <[Key|L],1> when 'true' ->
	      %% Line 344
	      {{Key,'nil','nil'},L}
	  %% Line 345
	  <L,0> when 'true' ->
	      %% Line 346
	      {'nil',L}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'balance_list_1',2}}] )
	    -| ['compiler_generated'] )
	end
'add_element'/2 =
    %% Line 352
    fun (_cor1,_cor0) ->
	%% Line 353
	apply 'add'/2
	    (_cor1, _cor0)
'add'/2 =
    %% Line 359
    fun (_cor1,_cor0) ->
	%% Line 360
	case apply 'is_member'/2
		 (_cor1, _cor0) of
	  %% Line 361
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 363
	  <'false'> when 'true' ->
	      %% Line 364
	      apply 'insert'/2
		  (_cor1, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'from_list'/1 =
    %% Line 371
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 372
	    call 'ordsets':'from_list'
		(_cor0)
	in  %% Line 372
	    apply 'from_ordset'/1
		(_cor1)
'from_ordset'/1 =
    %% Line 378
    fun (_cor0) ->
	let <S> =
	    %% Line 379
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		%% Line 380
		apply 'balance_list'/2
		    (_cor0, S)
	    in  %% Line 380
		{S,_cor2}
'del_element'/2 =
    %% Line 386
    fun (_cor1,_cor0) ->
	%% Line 387
	apply 'delete_any'/2
	    (_cor1, _cor0)
'delete_any'/2 =
    %% Line 393
    fun (_cor1,_cor0) ->
	%% Line 394
	case apply 'is_member'/2
		 (_cor1, _cor0) of
	  %% Line 395
	  <'true'> when 'true' ->
	      %% Line 396
	      apply 'delete'/2
		  (_cor1, _cor0)
	  %% Line 397
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 405
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{S,T}> when 'true' ->
	      let <_cor3> =
		  %% Line 406
		  call 'erlang':'-'
		      (S, 1)
	      in  let <_cor2> =
		      %% Line 406
		      apply 'delete_1'/2
			  (Key, T)
		  in  %% Line 406
		      {_cor3,_cor2}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_1'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{Key1,Smaller,Larger}>
	      when call 'erlang':'<'
		    (Key,
		     Key1) ->
	      let <Smaller1> =
		  %% Line 409
		  apply 'delete_1'/2
		      (Key, Smaller)
	      in  %% Line 410
		  {Key1,Smaller1,Larger}
	  %% Line 411
	  <Key,{Key1,Smaller,Bigger}>
	      when call 'erlang':'>'
		    (Key,
		     Key1) ->
	      let <Bigger1> =
		  %% Line 412
		  apply 'delete_1'/2
		      (Key, Bigger)
	      in  %% Line 413
		  {Key1,Smaller,Bigger1}
	  %% Line 414
	  <_cor6,{_cor7,Smaller,Larger}> when 'true' ->
	      %% Line 415
	      apply 'merge'/2
		  (Smaller, Larger)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'delete_1',2}}] )
	    -| ['compiler_generated'] )
	end
'merge'/2 =
    %% Line 417
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Smaller,'nil'> when 'true' ->
	      %% Line 418
	      Smaller
	  %% Line 419
	  <'nil',Larger> when 'true' ->
	      %% Line 420
	      Larger
	  %% Line 421
	  <Smaller,Larger> when 'true' ->
	      %% Line 422
	      case apply 'take_smallest1'/1
		       (Larger) of
		<{Key,Larger1}> when 'true' ->
		    %% Line 423
		    {Key,Smaller,Larger1}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'take_smallest'/1 =
    %% Line 429
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      %% Line 430
	      case apply 'take_smallest1'/1
		       (T) of
		<{Key,Larger}> when 'true' ->
		    let <_cor2> =
			%% Line 431
			call 'erlang':'-'
			    (S, 1)
		    in  %% Line 431
			{Key,{_cor2,Larger}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'take_smallest',1}}] )
	    -| ['compiler_generated'] )
	end
'take_smallest1'/1 =
    %% Line 433
    fun (_cor0) ->
	case _cor0 of
	  <{Key,'nil',Larger}> when 'true' ->
	      %% Line 434
	      {Key,Larger}
	  %% Line 435
	  <{Key,Smaller,Larger}> when 'true' ->
	      %% Line 436
	      case apply 'take_smallest1'/1
		       (Smaller) of
		<{Key1,Smaller1}> when 'true' ->
		    %% Line 437
		    {Key1,{Key,Smaller1,Larger}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'take_smallest1',1}}] )
	    -| ['compiler_generated'] )
	end
'smallest'/1 =
    %% Line 442
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 443
	      apply 'smallest_1'/1
		  (T)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'smallest',1}}] )
	    -| ['compiler_generated'] )
	end
'smallest_1'/1 =
    %% Line 445
    fun (_cor0) ->
	case _cor0 of
	  <{Key,'nil',_X_Larger}> when 'true' ->
	      %% Line 446
	      Key
	  %% Line 447
	  <{_X_Key,Smaller,_X_Larger}> when 'true' ->
	      %% Line 448
	      apply 'smallest_1'/1
		  (Smaller)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'smallest_1',1}}] )
	    -| ['compiler_generated'] )
	end
'take_largest'/1 =
    %% Line 454
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      %% Line 455
	      case apply 'take_largest1'/1
		       (T) of
		<{Key,Smaller}> when 'true' ->
		    let <_cor2> =
			%% Line 456
			call 'erlang':'-'
			    (S, 1)
		    in  %% Line 456
			{Key,{_cor2,Smaller}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'take_largest',1}}] )
	    -| ['compiler_generated'] )
	end
'take_largest1'/1 =
    %% Line 458
    fun (_cor0) ->
	case _cor0 of
	  <{Key,Smaller,'nil'}> when 'true' ->
	      %% Line 459
	      {Key,Smaller}
	  %% Line 460
	  <{Key,Smaller,Larger}> when 'true' ->
	      %% Line 461
	      case apply 'take_largest1'/1
		       (Larger) of
		<{Key1,Larger1}> when 'true' ->
		    %% Line 462
		    {Key1,{Key,Smaller,Larger1}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'take_largest1',1}}] )
	    -| ['compiler_generated'] )
	end
'largest'/1 =
    %% Line 467
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 468
	      apply 'largest_1'/1
		  (T)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'largest',1}}] )
	    -| ['compiler_generated'] )
	end
'largest_1'/1 =
    %% Line 470
    fun (_cor0) ->
	case _cor0 of
	  <{Key,_X_Smaller,'nil'}> when 'true' ->
	      %% Line 471
	      Key
	  %% Line 472
	  <{_X_Key,_X_Smaller,Larger}> when 'true' ->
	      %% Line 473
	      apply 'largest_1'/1
		  (Larger)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'largest_1',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 479
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 480
	      apply 'to_list'/2
		  (T, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list_1'/1 =
    %% Line 482
    fun (_cor0) ->
	apply 'to_list'/2
	    (_cor0, [])
'to_list'/2 =
    %% Line 484
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Key,Small,Big},L> when 'true' ->
	      let <_cor2> =
		  %% Line 485
		  apply 'to_list'/2
		      (Big, L)
	      in  %% Line 485
		  apply 'to_list'/2
		      (Small, [Key|_cor2])
	  %% Line 486
	  <'nil',L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'to_list',2}}] )
	    -| ['compiler_generated'] )
	end
'iterator'/1 =
    %% Line 492
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,T}> when 'true' ->
	      %% Line 493
	      apply 'iterator'/2
		  (T, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'iterator',1}}] )
	    -| ['compiler_generated'] )
	end
'iterator'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T = {_cor4,'nil',_cor5},As> when 'true' ->
	      %% Line 499
	      [T|As]
	  %% Line 500
	  <T = {_cor6,L,_cor7},As> when 'true' ->
	      %% Line 501
	      apply 'iterator'/2
		  (L, [T|As])
	  %% Line 502
	  <'nil',As> when 'true' ->
	      %% Line 503
	      As
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'iterator',2}}] )
	    -| ['compiler_generated'] )
	end
'next'/1 =
    %% Line 509
    fun (_cor0) ->
	case _cor0 of
	  <[{X,_cor3,T}|As]> when 'true' ->
	      let <_cor1> =
		  %% Line 510
		  apply 'iterator'/2
		      (T, As)
	      in  %% Line 510
		  {X,_cor1}
	  %% Line 511
	  <[]> when 'true' ->
	      %% Line 512
	      'none'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'next',1}}] )
	    -| ['compiler_generated'] )
	end
'union'/2 =
    %% Line 542
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{N1,T1},{N2,T2}>
	      when call 'erlang':'<'
		    (N2,
		     N1) ->
	      let <_cor2> =
		  %% Line 543
		  apply 'to_list_1'/1
		      (T2)
	      in  %% Line 543
		  apply 'union'/4
		      (_cor2, N2, T1, N1)
	  %% Line 544
	  <{N1,T1},{N2,T2}> when 'true' ->
	      let <_cor3> =
		  %% Line 545
		  apply 'to_list_1'/1
		      (T1)
	      in  %% Line 545
		  apply 'union'/4
		      (_cor3, N1, T2, N2)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'union',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/4 =
    %% Line 551
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L,N1,T2,N2>
	      when call 'erlang':'<'
		    (N2,
		     10) ->
	      let <_cor5> =
		  %% Line 553
		  apply 'to_list_1'/1
		      (T2)
	      in  let <_cor4> =
		      %% Line 553
		      call 'erlang':'+'
			  (N1, N2)
		  in  %% Line 553
		      apply 'union_2'/3
			  (L, _cor5, _cor4)
	  %% Line 554
	  <L,N1,T2,N2> when 'true' ->
	      let <_cor6> =
		  %% Line 555
		  call 'math':'log'
		      (N2)
	      in  let <_cor7> =
		      %% Line 555
		      call 'erlang':'*'
			  (1.45999999999999996447e+00, _cor6)
		  in  let <_cor8> =
			  %% Line 555
			  call 'erlang':'round'
			      (_cor7)
		      in  let <X> =
			      %% Line 555
			      call 'erlang':'*'
				  (N1, _cor8)
			  in  %% Line 556
			      case <> of
				<>
				    when call 'erlang':'<'
					  (N2,
					   X) ->
				    let <_cor11> =
					%% Line 557
					apply 'to_list_1'/1
					    (T2)
				    in  let <_cor10> =
					    %% Line 557
					    call 'erlang':'+'
						(N1, N2)
					in  %% Line 557
					    apply 'union_2'/3
						(L, _cor11, _cor10)
				%% Line 558
				<> when 'true' ->
				    let <_cor12> =
					%% Line 559
					apply 'mk_set'/2
					    (N2, T2)
				    in  %% Line 559
					apply 'union_1'/2
					    (L, _cor12)
			      end
	end
'mk_set'/2 =
    %% Line 564
    fun (_cor1,_cor0) ->
	%% Line 565
	{_cor1,_cor0}
'union_1'/2 =
    %% Line 571
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Xs],S> when 'true' ->
	      let <_cor2> =
		  %% Line 572
		  apply 'add'/2
		      (X, S)
	      in  %% Line 572
		  apply 'union_1'/2
		      (Xs, _cor2)
	  %% Line 573
	  <[],S> when 'true' ->
	      %% Line 574
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'union_1',2}}] )
	    -| ['compiler_generated'] )
	end
'union_2'/3 =
    %% Line 606
    fun (_cor2,_cor1,_cor0) ->
	%% Line 607
	apply 'union_2'/4
	    (_cor2, _cor1, [], _cor0)
'union_2'/4 =
    %% Line 609
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[X|Xs1],Ys = [Y|_cor13],As,S>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 610
	      apply 'union_2'/4
		  (Xs1, Ys, [X|As], S)
	  %% Line 611
	  <Xs = [X|_cor14],[Y|Ys1],As,S>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 612
	      apply 'union_2'/4
		  (Ys1, Xs, [Y|As], S)
	  %% Line 613
	  <[X|Xs1],[_cor15|Ys1],As,S> when 'true' ->
	      let <_cor4> =
		  %% Line 614
		  call 'erlang':'-'
		      (S, 1)
	      in  %% Line 614
		  apply 'union_2'/4
		      (Xs1, Ys1, [X|As], _cor4)
	  %% Line 615
	  <[],Ys,As,S> when 'true' ->
	      let <_cor5> =
		  %% Line 616
		  apply 'push'/2
		      (Ys, As)
	      in  let <_cor6> =
		      %% Line 616
		      apply 'balance_revlist'/2
			  (_cor5, S)
		  in  %% Line 616
		      {S,_cor6}
	  %% Line 617
	  <Xs,[],As,S> when 'true' ->
	      let <_cor7> =
		  %% Line 618
		  apply 'push'/2
		      (Xs, As)
	      in  let <_cor8> =
		      %% Line 618
		      apply 'balance_revlist'/2
			  (_cor7, S)
		  in  %% Line 618
		      {S,_cor8}
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'union_2',4}}] )
	    -| ['compiler_generated'] )
	end
'push'/2 =
    %% Line 620
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Xs],As> when 'true' ->
	      %% Line 621
	      apply 'push'/2
		  (Xs, [X|As])
	  %% Line 622
	  <[],As> when 'true' ->
	      %% Line 623
	      As
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'push',2}}] )
	    -| ['compiler_generated'] )
	end
'balance_revlist'/2 =
    %% Line 625
    fun (_cor1,_cor0) ->
	%% Line 626
	case apply 'balance_revlist_1'/2
		 (_cor1, _cor0) of
	  <{T,_cor5}> when 'true' ->
	      %% Line 627
	      T
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'balance_revlist_1'/2 =
    %% Line 629
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,S>
	      when call 'erlang':'>'
		    (S,
		     1) ->
	      let <Sm> =
		  %% Line 630
		  call 'erlang':'-'
		      (S, 1)
	      in  let <S2> =
		      %% Line 631
		      call 'erlang':'div'
			  (Sm, 2)
		  in  let <S1> =
			  %% Line 632
			  call 'erlang':'-'
			      (Sm, S2)
		      in  %% Line 633
			  case apply 'balance_revlist_1'/2
				   (L, S1) of
			    <{T2,[K|L1]}> when 'true' ->
				%% Line 634
				case apply 'balance_revlist_1'/2
					 (L1, S2) of
				  <{T1,L2}> when 'true' ->
				      let <T> = {%% Line 635
					   K,%% Line 635
					     T1,%% Line 635
						T2}
				      in  %% Line 636
					  {T,L2}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	  %% Line 637
	  <[Key|L],1> when 'true' ->
	      %% Line 638
	      {{Key,'nil','nil'},L}
	  %% Line 639
	  <L,0> when 'true' ->
	      %% Line 640
	      {'nil',L}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'balance_revlist_1',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/1 =
    %% Line 646
    fun (_cor0) ->
	case _cor0 of
	  <[S|Ss]> when 'true' ->
	      %% Line 647
	      apply 'union_list'/2
		  (S, Ss)
	  %% Line 648
	  <[]> when 'true' ->
	      apply 'empty'/0
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'union',1}}] )
	    -| ['compiler_generated'] )
	end
'union_list'/2 =
    %% Line 650
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,[S1|Ss]> when 'true' ->
	      let <_cor2> =
		  %% Line 651
		  apply 'union'/2
		      (S, S1)
	      in  %% Line 651
		  apply 'union_list'/2
		      (_cor2, Ss)
	  %% Line 652
	  <S,[]> when 'true' ->
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'union_list',2}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/2 =
    %% Line 662
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{N1,T1},{N2,T2}>
	      when call 'erlang':'<'
		    (N2,
		     N1) ->
	      let <_cor2> =
		  %% Line 663
		  apply 'to_list_1'/1
		      (T2)
	      in  %% Line 663
		  apply 'intersection'/4
		      (_cor2, N2, T1, N1)
	  %% Line 664
	  <{N1,T1},{N2,T2}> when 'true' ->
	      let <_cor3> =
		  %% Line 665
		  apply 'to_list_1'/1
		      (T1)
	      in  %% Line 665
		  apply 'intersection'/4
		      (_cor3, N1, T2, N2)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'intersection',2}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/4 =
    %% Line 667
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L,_X_N1,T2,N2>
	      when call 'erlang':'<'
		    (N2,
		     10) ->
	      let <_cor4> =
		  %% Line 668
		  apply 'to_list_1'/1
		      (T2)
	      in  %% Line 668
		  apply 'intersection_2'/2
		      (L, _cor4)
	  %% Line 669
	  <L,N1,T2,N2> when 'true' ->
	      let <_cor5> =
		  %% Line 670
		  call 'math':'log'
		      (N2)
	      in  let <_cor6> =
		      %% Line 670
		      call 'erlang':'*'
			  (1.45999999999999996447e+00, _cor5)
		  in  let <_cor7> =
			  %% Line 670
			  call 'erlang':'round'
			      (_cor6)
		      in  let <X> =
			      %% Line 670
			      call 'erlang':'*'
				  (N1, _cor7)
			  in  %% Line 671
			      case <> of
				<>
				    when call 'erlang':'<'
					  (N2,
					   X) ->
				    let <_cor9> =
					%% Line 672
					apply 'to_list_1'/1
					    (T2)
				    in  %% Line 672
					apply 'intersection_2'/2
					    (L, _cor9)
				%% Line 673
				<> when 'true' ->
				    %% Line 674
				    apply 'intersection_1'/2
					(L, T2)
			      end
	end
'intersection_1'/2 =
    %% Line 680
    fun (_cor1,_cor0) ->
	%% Line 681
	apply 'intersection_1'/4
	    (_cor1, _cor0, [], 0)
'intersection_1'/4 =
    %% Line 683
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[X|Xs],T,As,N> when 'true' ->
	      %% Line 684
	      case apply 'is_member_1'/2
		       (X, T) of
		%% Line 685
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 686
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 686
			apply 'intersection_1'/4
			    (Xs, T, [X|As], _cor4)
		%% Line 687
		<'false'> when 'true' ->
		    %% Line 688
		    apply 'intersection_1'/4
			(Xs, T, As, N)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 690
	  <[],_cor11,As,N> when 'true' ->
	      let <_cor6> =
		  %% Line 691
		  apply 'balance_revlist'/2
		      (As, N)
	      in  %% Line 691
		  {N,_cor6}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'intersection_1',4}}] )
	    -| ['compiler_generated'] )
	end
'intersection_2'/2 =
    %% Line 694
    fun (_cor1,_cor0) ->
	%% Line 695
	apply 'intersection_2'/4
	    (_cor1, _cor0, [], 0)
'intersection_2'/4 =
    %% Line 697
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[X|Xs1],Ys = [Y|_cor11],As,S>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 698
	      apply 'intersection_2'/4
		  (Xs1, Ys, As, S)
	  %% Line 699
	  <Xs = [X|_cor12],[Y|Ys1],As,S>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 700
	      apply 'intersection_2'/4
		  (Ys1, Xs, As, S)
	  %% Line 701
	  <[X|Xs1],[_cor13|Ys1],As,S> when 'true' ->
	      let <_cor4> =
		  %% Line 702
		  call 'erlang':'+'
		      (S, 1)
	      in  %% Line 702
		  apply 'intersection_2'/4
		      (Xs1, Ys1, [X|As], _cor4)
	  %% Line 703
	  <[],_cor14,As,S> when 'true' ->
	      let <_cor5> =
		  %% Line 704
		  apply 'balance_revlist'/2
		      (As, S)
	      in  %% Line 704
		  {S,_cor5}
	  %% Line 705
	  <_cor15,[],As,S> when 'true' ->
	      let <_cor6> =
		  %% Line 706
		  apply 'balance_revlist'/2
		      (As, S)
	      in  %% Line 706
		  {S,_cor6}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'intersection_2',4}}] )
	    -| ['compiler_generated'] )
	end
'intersection'/1 =
    %% Line 712
    fun (_cor0) ->
	case _cor0 of
	  <[S|Ss]> when 'true' ->
	      %% Line 713
	      apply 'intersection_list'/2
		  (S, Ss)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'intersection',1}}] )
	    -| ['compiler_generated'] )
	end
'intersection_list'/2 =
    %% Line 715
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,[S1|Ss]> when 'true' ->
	      let <_cor2> =
		  %% Line 716
		  apply 'intersection'/2
		      (S, S1)
	      in  %% Line 716
		  apply 'intersection_list'/2
		      (_cor2, Ss)
	  %% Line 717
	  <S,[]> when 'true' ->
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'intersection_list',2}}] )
	    -| ['compiler_generated'] )
	end
'is_disjoint'/2 =
    %% Line 723
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{N1,T1},{N2,T2}>
	      when call 'erlang':'<'
		    (N1,
		     N2) ->
	      %% Line 724
	      apply 'is_disjoint_1'/2
		  (T1, T2)
	  %% Line 725
	  <{_cor4,T1},{_cor5,T2}> when 'true' ->
	      %% Line 726
	      apply 'is_disjoint_1'/2
		  (T2, T1)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_disjoint',2}}] )
	    -| ['compiler_generated'] )
	end
'is_disjoint_1'/2 =
    %% Line 728
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{K1,Smaller1,Bigger},Tree = {K2,Smaller2,_cor14}>
	      when call 'erlang':'<'
		    (K1,
		     K2) ->
	      %% Line 729
	      ( case apply 'is_member_1'/2
			 (K1, Smaller2) of
		  ( <'false'> when 'true' ->
			%% Line 730
			( case apply 'is_disjoint_1'/2
				   (Smaller1, Smaller2) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 731
				  apply 'is_disjoint_1'/2
				      (Bigger, Tree)
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor4> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor4}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <'true'> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor_variable> when 'true' ->
			call 'erlang':'error'
			    ('badarg')
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 732
	  <{K1,Smaller,Bigger1},Tree = {K2,_cor15,Bigger2}>
	      when call 'erlang':'>'
		    (K1,
		     K2) ->
	      %% Line 733
	      ( case apply 'is_member_1'/2
			 (K1, Bigger2) of
		  ( <'false'> when 'true' ->
			%% Line 734
			( case apply 'is_disjoint_1'/2
				   (Bigger1, Bigger2) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 735
				  apply 'is_disjoint_1'/2
				      (Smaller, Tree)
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor9> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor9}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <'true'> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor_variable> when 'true' ->
			call 'erlang':'error'
			    ('badarg')
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 736
	  <{_X_K1,_cor16,_cor17},{_X_K2,_cor18,_cor19}> when 'true' ->
	      %% Line 737
	      'false'
	  %% Line 738
	  <'nil',_cor20> when 'true' ->
	      %% Line 739
	      'true'
	  %% Line 740
	  <_cor21,'nil'> when 'true' ->
	      %% Line 741
	      'true'
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'is_disjoint_1',2}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/2 =
    %% Line 754
    fun (_cor1,_cor0) ->
	%% Line 755
	apply 'difference'/2
	    (_cor1, _cor0)
'difference'/2 =
    %% Line 762
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{N1,T1},{N2,T2}> when 'true' ->
	      let <_cor2> =
		  %% Line 763
		  apply 'to_list_1'/1
		      (T1)
	      in  %% Line 763
		  apply 'difference'/4
		      (_cor2, N1, T2, N2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'difference',2}}] )
	    -| ['compiler_generated'] )
	end
'difference'/4 =
    %% Line 765
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L,N1,T2,N2>
	      when call 'erlang':'<'
		    (N2,
		     10) ->
	      let <_cor4> =
		  %% Line 766
		  apply 'to_list_1'/1
		      (T2)
	      in  %% Line 766
		  apply 'difference_2'/3
		      (L, _cor4, N1)
	  %% Line 767
	  <L,N1,T2,N2> when 'true' ->
	      let <_cor5> =
		  %% Line 768
		  call 'math':'log'
		      (N2)
	      in  let <_cor6> =
		      %% Line 768
		      call 'erlang':'*'
			  (1.45999999999999996447e+00, _cor5)
		  in  let <_cor7> =
			  %% Line 768
			  call 'erlang':'round'
			      (_cor6)
		      in  let <X> =
			      %% Line 768
			      call 'erlang':'*'
				  (N1, _cor7)
			  in  %% Line 769
			      case <> of
				<>
				    when call 'erlang':'<'
					  (N2,
					   X) ->
				    let <_cor9> =
					%% Line 770
					apply 'to_list_1'/1
					    (T2)
				    in  %% Line 770
					apply 'difference_2'/3
					    (L, _cor9, N1)
				%% Line 771
				<> when 'true' ->
				    %% Line 772
				    apply 'difference_1'/2
					(L, T2)
			      end
	end
'difference_1'/2 =
    %% Line 776
    fun (_cor1,_cor0) ->
	%% Line 777
	apply 'difference_1'/4
	    (_cor1, _cor0, [], 0)
'difference_1'/4 =
    %% Line 779
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[X|Xs],T,As,N> when 'true' ->
	      %% Line 780
	      case apply 'is_member_1'/2
		       (X, T) of
		%% Line 781
		<'true'> when 'true' ->
		    %% Line 782
		    apply 'difference_1'/4
			(Xs, T, As, N)
		%% Line 783
		<'false'> when 'true' ->
		    let <_cor4> =
			%% Line 784
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 784
			apply 'difference_1'/4
			    (Xs, T, [X|As], _cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 786
	  <[],_cor11,As,N> when 'true' ->
	      let <_cor6> =
		  %% Line 787
		  apply 'balance_revlist'/2
		      (As, N)
	      in  %% Line 787
		  {N,_cor6}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'difference_1',4}}] )
	    -| ['compiler_generated'] )
	end
'difference_2'/3 =
    %% Line 790
    fun (_cor2,_cor1,_cor0) ->
	%% Line 791
	apply 'difference_2'/4
	    (_cor2, _cor1, [], _cor0)
'difference_2'/4 =
    %% Line 793
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[X|Xs1],Ys = [Y|_cor12],As,S>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 794
	      apply 'difference_2'/4
		  (Xs1, Ys, [X|As], S)
	  %% Line 795
	  <Xs = [X|_cor13],[Y|Ys1],As,S>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 796
	      apply 'difference_2'/4
		  (Xs, Ys1, As, S)
	  %% Line 797
	  <[_X_X|Xs1],[_X_Y|Ys1],As,S> when 'true' ->
	      let <_cor4> =
		  %% Line 798
		  call 'erlang':'-'
		      (S, 1)
	      in  %% Line 798
		  apply 'difference_2'/4
		      (Xs1, Ys1, As, _cor4)
	  %% Line 799
	  <[],_X_Ys,As,S> when 'true' ->
	      let <_cor5> =
		  %% Line 800
		  apply 'balance_revlist'/2
		      (As, S)
	      in  %% Line 800
		  {S,_cor5}
	  %% Line 801
	  <Xs,[],As,S> when 'true' ->
	      let <_cor6> =
		  %% Line 802
		  apply 'push'/2
		      (Xs, As)
	      in  let <_cor7> =
		      %% Line 802
		      apply 'balance_revlist'/2
			  (_cor6, S)
		  in  %% Line 802
		      {S,_cor7}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'difference_2',4}}] )
	    -| ['compiler_generated'] )
	end
'is_subset'/2 =
    %% Line 812
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{N1,T1},{N2,T2}> when 'true' ->
	      let <_cor2> =
		  %% Line 813
		  apply 'to_list_1'/1
		      (T1)
	      in  %% Line 813
		  apply 'is_subset'/4
		      (_cor2, N1, T2, N2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'is_subset',2}}] )
	    -| ['compiler_generated'] )
	end
'is_subset'/4 =
    %% Line 815
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L,_X_N1,T2,N2>
	      when call 'erlang':'<'
		    (N2,
		     10) ->
	      let <_cor4> =
		  %% Line 816
		  apply 'to_list_1'/1
		      (T2)
	      in  %% Line 816
		  apply 'is_subset_2'/2
		      (L, _cor4)
	  %% Line 817
	  <L,N1,T2,N2> when 'true' ->
	      let <_cor5> =
		  %% Line 818
		  call 'math':'log'
		      (N2)
	      in  let <_cor6> =
		      %% Line 818
		      call 'erlang':'*'
			  (1.45999999999999996447e+00, _cor5)
		  in  let <_cor7> =
			  %% Line 818
			  call 'erlang':'round'
			      (_cor6)
		      in  let <X> =
			      %% Line 818
			      call 'erlang':'*'
				  (N1, _cor7)
			  in  %% Line 819
			      case <> of
				<>
				    when call 'erlang':'<'
					  (N2,
					   X) ->
				    let <_cor9> =
					%% Line 820
					apply 'to_list_1'/1
					    (T2)
				    in  %% Line 820
					apply 'is_subset_2'/2
					    (L, _cor9)
				%% Line 821
				<> when 'true' ->
				    %% Line 822
				    apply 'is_subset_1'/2
					(L, T2)
			      end
	end
'is_subset_1'/2 =
    %% Line 826
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Xs],T> when 'true' ->
	      %% Line 827
	      case apply 'is_member_1'/2
		       (X, T) of
		%% Line 828
		<'true'> when 'true' ->
		    %% Line 829
		    apply 'is_subset_1'/2
			(Xs, T)
		%% Line 830
		<'false'> when 'true' ->
		    %% Line 831
		    'false'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 833
	  <[],_cor5> when 'true' ->
	      %% Line 834
	      'true'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'is_subset_1',2}}] )
	    -| ['compiler_generated'] )
	end
'is_subset_2'/2 =
    %% Line 837
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|_cor4],[Y|_cor5]>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 838
	      'false'
	  %% Line 839
	  <Xs = [X|_cor6],[Y|Ys1]>
	      when call 'erlang':'>'
		    (X,
		     Y) ->
	      %% Line 840
	      apply 'is_subset_2'/2
		  (Xs, Ys1)
	  %% Line 841
	  <[_cor7|Xs1],[_cor8|Ys1]> when 'true' ->
	      %% Line 842
	      apply 'is_subset_2'/2
		  (Xs1, Ys1)
	  %% Line 843
	  <[],_cor9> when 'true' ->
	      %% Line 844
	      'true'
	  %% Line 845
	  <_cor10,[]> when 'true' ->
	      %% Line 846
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_subset_2',2}}] )
	    -| ['compiler_generated'] )
	end
'is_set'/1 =
    %% Line 854
    fun (_cor0) ->
	case _cor0 of
	  <{0,'nil'}> when 'true' ->
	      'true'
	  %% Line 855
	  <{N,{_cor4,_cor5,_cor6}}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor2> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 856
	  <_cor7> when 'true' ->
	      'false'
	end
'filter'/2 =
    %% Line 863
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 864
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[X|_cor3]> when 'true' ->
				( case apply _cor1
					   (X) of
				    <'true'> when 'true' ->
					let <_cor6> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [X|_cor6]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor3)
				      -| ['compiler_generated'] )
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      apply 'to_list'/1
			  (_cor0)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  %% Line 864
	    apply 'from_ordset'/1
		(_cor8)
'fold'/3 =
    %% Line 874
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,A,{_cor6,T}>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      %% Line 875
	      apply 'fold_1'/3
		  (F, A, T)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'fold',3}}] )
	    -| ['compiler_generated'] )
	end
'fold_1'/3 =
    %% Line 877
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Acc0,{Key,Small,Big}> when 'true' ->
	      let <Acc1> =
		  %% Line 878
		  apply 'fold_1'/3
		      (F, Acc0, Small)
	      in  let <Acc> =
		      %% Line 879
		      apply F
			  (Key, Acc1)
		  in  %% Line 880
		      apply 'fold_1'/3
			  (F, Acc, Big)
	  %% Line 881
	  <_cor8,Acc,_cor9> when 'true' ->
	      %% Line 882
	      Acc
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gb_sets')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gb_sets', _cor0)
end