module 'gen_event' ['add_handler'/3,
		    'add_sup_handler'/3,
		    'behaviour_info'/1,
		    'call'/3,
		    'call'/4,
		    'delete_handler'/3,
		    'format_status'/2,
		    'init_it'/6,
		    'module_info'/0,
		    'module_info'/1,
		    'notify'/2,
		    'start'/0,
		    'start'/1,
		    'start_link'/0,
		    'start_link'/1,
		    'stop'/1,
		    'swap_handler'/3,
		    'swap_sup_handler'/3,
		    'sync_notify'/2,
		    'system_code_change'/4,
		    'system_continue'/3,
		    'system_get_state'/1,
		    'system_replace_state'/2,
		    'system_terminate'/4,
		    'wake_hib'/4,
		    'which_handlers'/1]
    attributes [%% Line 47
		'export_type' =
		    %% Line 47
		    [{'handler',0}|[{'handler_args',0}|[{'add_handler_ret',0}|[{'del_handler_ret',0}]]]],
		%% Line 54
		'type' =
		    %% Line 54
		    [{{'record','handler'},[{'typed_record_field',{'record_field',54,{'atom',54,'module'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'atom',[]}]]}}|[{'record_field',55,{'atom',55,'id'},{'atom',55,'false'}}|[{'record_field',56,{'atom',56,'state'}}|[{'typed_record_field',{'record_field',57,{'atom',57,'supervised'},{'atom',57,'false'}},{'type',57,'union',[{'atom',57,'false'}|[{'type',57,'pid',[]}]]}}]]]],[]}],
		%% Line 73
		'callback' =
		    %% Line 73
		    [{{'init',1},[{'type',73,'fun',[{'type',73,'product',[{'ann_type',73,[{'var',73,'InitArgs'}|[{'type',73,'term',[]}]]}]}|[{'type',74,'union',[{'type',74,'tuple',[{'atom',74,'ok'}|[{'ann_type',74,[{'var',74,'State'}|[{'type',74,'term',[]}]]}]]}|[{'type',75,'tuple',[{'atom',75,'ok'}|[{'ann_type',75,[{'var',75,'State'}|[{'type',75,'term',[]}]]}|[{'atom',75,'hibernate'}]]]}|[{'type',76,'tuple',[{'atom',76,'error'}|[{'ann_type',76,[{'var',76,'Reason'}|[{'type',76,'term',[]}]]}]]}]]]}]]}]}],
		%% Line 77
		'callback' =
		    %% Line 77
		    [{{'handle_event',2},[{'type',77,'fun',[{'type',77,'product',[{'ann_type',77,[{'var',77,'Event'}|[{'type',77,'term',[]}]]}|[{'ann_type',77,[{'var',77,'State'}|[{'type',77,'term',[]}]]}]]}|[{'type',78,'union',[{'type',78,'tuple',[{'atom',78,'ok'}|[{'ann_type',78,[{'var',78,'NewState'}|[{'type',78,'term',[]}]]}]]}|[{'type',79,'tuple',[{'atom',79,'ok'}|[{'ann_type',79,[{'var',79,'NewState'}|[{'type',79,'term',[]}]]}|[{'atom',79,'hibernate'}]]]}|[{'type',80,'tuple',[{'atom',80,'swap_handler'}|[{'ann_type',80,[{'var',80,'Args1'}|[{'type',80,'term',[]}]]}|[{'ann_type',80,[{'var',80,'NewState'}|[{'type',80,'term',[]}]]}|[{'ann_type',81,[{'var',81,'Handler2'}|[{'paren_type',81,[{'type',81,'union',[{'type',81,'atom',[]}|[{'type',81,'tuple',[{'type',81,'atom',[]}|[{'ann_type',81,[{'var',81,'Id'}|[{'type',81,'term',[]}]]}]]}]]}]}]]}|[{'ann_type',81,[{'var',81,'Args2'}|[{'type',81,'term',[]}]]}]]]]]}|[{'atom',82,'remove_handler'}]]]]}]]}]}],
		%% Line 83
		'callback' =
		    %% Line 83
		    [{{'handle_call',2},[{'type',83,'fun',[{'type',83,'product',[{'ann_type',83,[{'var',83,'Request'}|[{'type',83,'term',[]}]]}|[{'ann_type',83,[{'var',83,'State'}|[{'type',83,'term',[]}]]}]]}|[{'type',84,'union',[{'type',84,'tuple',[{'atom',84,'ok'}|[{'ann_type',84,[{'var',84,'Reply'}|[{'type',84,'term',[]}]]}|[{'ann_type',84,[{'var',84,'NewState'}|[{'type',84,'term',[]}]]}]]]}|[{'type',85,'tuple',[{'atom',85,'ok'}|[{'ann_type',85,[{'var',85,'Reply'}|[{'type',85,'term',[]}]]}|[{'ann_type',85,[{'var',85,'NewState'}|[{'type',85,'term',[]}]]}|[{'atom',85,'hibernate'}]]]]}|[{'type',86,'tuple',[{'atom',86,'swap_handler'}|[{'ann_type',86,[{'var',86,'Reply'}|[{'type',86,'term',[]}]]}|[{'ann_type',86,[{'var',86,'Args1'}|[{'type',86,'term',[]}]]}|[{'ann_type',86,[{'var',86,'NewState'}|[{'type',86,'term',[]}]]}|[{'ann_type',87,[{'var',87,'Handler2'}|[{'paren_type',87,[{'type',87,'union',[{'type',87,'atom',[]}|[{'type',87,'tuple',[{'type',87,'atom',[]}|[{'ann_type',87,[{'var',87,'Id'}|[{'type',87,'term',[]}]]}]]}]]}]}]]}|[{'ann_type',87,[{'var',87,'Args2'}|[{'type',87,'term',[]}]]}]]]]]]}|[{'type',88,'tuple',[{'atom',88,'remove_handler'}|[{'ann_type',88,[{'var',88,'Reply'}|[{'type',88,'term',[]}]]}]]}]]]]}]]}]}],
		%% Line 89
		'callback' =
		    %% Line 89
		    [{{'handle_info',2},[{'type',89,'fun',[{'type',89,'product',[{'ann_type',89,[{'var',89,'Info'}|[{'type',89,'term',[]}]]}|[{'ann_type',89,[{'var',89,'State'}|[{'type',89,'term',[]}]]}]]}|[{'type',90,'union',[{'type',90,'tuple',[{'atom',90,'ok'}|[{'ann_type',90,[{'var',90,'NewState'}|[{'type',90,'term',[]}]]}]]}|[{'type',91,'tuple',[{'atom',91,'ok'}|[{'ann_type',91,[{'var',91,'NewState'}|[{'type',91,'term',[]}]]}|[{'atom',91,'hibernate'}]]]}|[{'type',92,'tuple',[{'atom',92,'swap_handler'}|[{'ann_type',92,[{'var',92,'Args1'}|[{'type',92,'term',[]}]]}|[{'ann_type',92,[{'var',92,'NewState'}|[{'type',92,'term',[]}]]}|[{'ann_type',93,[{'var',93,'Handler2'}|[{'paren_type',93,[{'type',93,'union',[{'type',93,'atom',[]}|[{'type',93,'tuple',[{'type',93,'atom',[]}|[{'ann_type',93,[{'var',93,'Id'}|[{'type',93,'term',[]}]]}]]}]]}]}]]}|[{'ann_type',93,[{'var',93,'Args2'}|[{'type',93,'term',[]}]]}]]]]]}|[{'atom',94,'remove_handler'}]]]]}]]}]}],
		%% Line 95
		'callback' =
		    %% Line 95
		    [{{'terminate',2},[{'type',95,'fun',[{'type',95,'product',[{'ann_type',95,[{'var',95,'Args'}|[{'paren_type',95,[{'type',95,'union',[{'type',95,'term',[]}|[{'type',95,'tuple',[{'atom',95,'stop'}|[{'ann_type',95,[{'var',95,'Reason'}|[{'type',95,'term',[]}]]}]]}|[{'atom',96,'stop'}|[{'atom',96,'remove_handler'}|[{'type',97,'tuple',[{'atom',97,'error'}|[{'type',97,'tuple',[{'atom',97,'EXIT'}|[{'ann_type',97,[{'var',97,'Reason'}|[{'type',97,'term',[]}]]}]]}]]}|[{'type',98,'tuple',[{'atom',98,'error'}|[{'type',98,'term',[]}]]}]]]]]]}]}]]}|[{'ann_type',99,[{'var',99,'State'}|[{'type',99,'term',[]}]]}]]}|[{'type',100,'term',[]}]]}]}],
		%% Line 101
		'callback' =
		    %% Line 101
		    [{{'code_change',3},[{'type',101,'fun',[{'type',101,'product',[{'ann_type',101,[{'var',101,'OldVsn'}|[{'paren_type',101,[{'type',101,'union',[{'type',101,'term',[]}|[{'type',101,'tuple',[{'atom',101,'down'}|[{'type',101,'term',[]}]]}]]}]}]]}|[{'ann_type',102,[{'var',102,'State'}|[{'type',102,'term',[]}]]}|[{'ann_type',102,[{'var',102,'Extra'}|[{'type',102,'term',[]}]]}]]]}|[{'type',103,'tuple',[{'atom',103,'ok'}|[{'ann_type',103,[{'var',103,'NewState'}|[{'type',103,'term',[]}]]}]]}]]}]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'handler',{'type',107,'union',[{'type',107,'atom',[]}|[{'type',107,'tuple',[{'type',107,'atom',[]}|[{'type',107,'term',[]}]]}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'handler_args',{'type',108,'term',[]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'add_handler_ret',{'type',109,'union',[{'atom',109,'ok'}|[{'type',109,'term',[]}|[{'type',109,'tuple',[{'atom',109,'EXIT'}|[{'type',109,'term',[]}]]}]]]},[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{'del_handler_ret',{'type',110,'union',[{'atom',110,'ok'}|[{'type',110,'term',[]}|[{'type',110,'tuple',[{'atom',110,'EXIT'}|[{'type',110,'term',[]}]]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'emgr_name',{'type',112,'union',[{'type',112,'tuple',[{'atom',112,'local'}|[{'type',112,'atom',[]}]]}|[{'type',112,'tuple',[{'atom',112,'global'}|[{'type',112,'atom',[]}]]}|[{'type',113,'tuple',[{'atom',113,'via'}|[{'type',113,'atom',[]}|[{'type',113,'term',[]}]]]}]]]},[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{'emgr_ref',{'type',114,'union',[{'type',114,'atom',[]}|[{'type',114,'tuple',[{'type',114,'atom',[]}|[{'type',114,'atom',[]}]]}|[{'type',114,'tuple',[{'atom',114,'global'}|[{'type',114,'atom',[]}]]}|[{'type',115,'tuple',[{'atom',115,'via'}|[{'type',115,'atom',[]}|[{'type',115,'term',[]}]]]}|[{'type',115,'pid',[]}]]]]]},[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{'start_ret',{'type',116,'union',[{'type',116,'tuple',[{'atom',116,'ok'}|[{'type',116,'pid',[]}]]}|[{'type',116,'tuple',[{'atom',116,'error'}|[{'type',116,'term',[]}]]}]]},[]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'start',0},[{'type',122,'fun',[{'type',122,'product',[]}|[{'type',122,'start_ret',[]}]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'start',1},[{'type',126,'fun',[{'type',126,'product',[{'type',126,'emgr_name',[]}]}|[{'type',126,'start_ret',[]}]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'start_link',0},[{'type',130,'fun',[{'type',130,'product',[]}|[{'type',130,'start_ret',[]}]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'start_link',1},[{'type',134,'fun',[{'type',134,'product',[{'type',134,'emgr_name',[]}]}|[{'type',134,'start_ret',[]}]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'add_handler',3},[{'type',153,'fun',[{'type',153,'product',[{'type',153,'emgr_ref',[]}|[{'type',153,'handler',[]}|[{'type',153,'term',[]}]]]}|[{'type',153,'term',[]}]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'add_sup_handler',3},[{'type',156,'fun',[{'type',156,'product',[{'type',156,'emgr_ref',[]}|[{'type',156,'handler',[]}|[{'type',156,'term',[]}]]]}|[{'type',156,'term',[]}]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'notify',2},[{'type',160,'fun',[{'type',160,'product',[{'type',160,'emgr_ref',[]}|[{'type',160,'term',[]}]]}|[{'atom',160,'ok'}]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'sync_notify',2},[{'type',163,'fun',[{'type',163,'product',[{'type',163,'emgr_ref',[]}|[{'type',163,'term',[]}]]}|[{'atom',163,'ok'}]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'call',3},[{'type',166,'fun',[{'type',166,'product',[{'type',166,'emgr_ref',[]}|[{'type',166,'handler',[]}|[{'type',166,'term',[]}]]]}|[{'type',166,'term',[]}]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'call',4},[{'type',169,'fun',[{'type',169,'product',[{'type',169,'emgr_ref',[]}|[{'type',169,'handler',[]}|[{'type',169,'term',[]}|[{'type',169,'timeout',[]}]]]]}|[{'type',169,'term',[]}]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'delete_handler',3},[{'type',172,'fun',[{'type',172,'product',[{'type',172,'emgr_ref',[]}|[{'type',172,'handler',[]}|[{'type',172,'term',[]}]]]}|[{'type',172,'term',[]}]]}]}],
		%% Line 175
		'spec' =
		    %% Line 175
		    [{{'swap_handler',3},[{'type',175,'fun',[{'type',175,'product',[{'type',175,'emgr_ref',[]}|[{'type',175,'tuple',[{'type',175,'handler',[]}|[{'type',175,'term',[]}]]}|[{'type',175,'tuple',[{'type',175,'handler',[]}|[{'type',175,'term',[]}]]}]]]}|[{'type',176,'union',[{'atom',176,'ok'}|[{'type',176,'tuple',[{'atom',176,'error'}|[{'type',176,'term',[]}]]}]]}]]}]}],
		%% Line 179
		'spec' =
		    %% Line 179
		    [{{'swap_sup_handler',3},[{'type',179,'fun',[{'type',179,'product',[{'type',179,'emgr_ref',[]}|[{'type',179,'tuple',[{'type',179,'handler',[]}|[{'type',179,'term',[]}]]}|[{'type',179,'tuple',[{'type',179,'handler',[]}|[{'type',179,'term',[]}]]}]]]}|[{'type',180,'union',[{'atom',180,'ok'}|[{'type',180,'tuple',[{'atom',180,'error'}|[{'type',180,'term',[]}]]}]]}]]}]}],
		%% Line 184
		'spec' =
		    %% Line 184
		    [{{'which_handlers',1},[{'type',184,'fun',[{'type',184,'product',[{'type',184,'emgr_ref',[]}]}|[{'type',184,'list',[{'type',184,'handler',[]}]}]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'stop',1},[{'type',187,'fun',[{'type',187,'product',[{'type',187,'emgr_ref',[]}]}|[{'atom',187,'ok'}]]}]}],
		%% Line 351
		'spec' =
		    %% Line 351
		    [{{'system_terminate',4},[{'type',351,'fun',[{'type',351,'product',[{'var',351,'_'}|[{'var',351,'_'}|[{'var',351,'_'}|[{'type',351,'list',[{'var',351,'_'}]}]]]]}|[{'type',351,'no_return',[]}]]}]}],
		%% Line 563
		'spec' =
		    %% Line 563
		    [{{'split',2},[{'type',563,'fun',[{'type',563,'product',[{'type',563,'handler',[]}|[{'type',563,'list',[{'type',563,'record',[{'atom',563,'handler'}]}]}]]}|[{'type',564,'union',[{'type',564,'tuple',[{'type',564,'atom',[]}|[{'type',564,'record',[{'atom',564,'handler'}]}|[{'type',564,'list',[{'type',564,'record',[{'atom',564,'handler'}]}]}]]]}|[{'atom',564,'error'}]]}]]}]}]]
'start'/0 =
    %% Line 123
    fun () ->
	%% Line 124
	call 'gen':'start'
	    ('gen_event', 'nolink', 'no callback module', [], [])
'start'/1 =
    %% Line 127
    fun (_cor0) ->
	%% Line 128
	call 'gen':'start'
	    ('gen_event', 'nolink', _cor0, 'no callback module', [], [])
'start_link'/0 =
    %% Line 131
    fun () ->
	%% Line 132
	call 'gen':'start'
	    ('gen_event', 'link', 'no callback module', [], [])
'start_link'/1 =
    %% Line 135
    fun (_cor0) ->
	%% Line 136
	call 'gen':'start'
	    ('gen_event', 'link', _cor0, 'no callback module', [], [])
'init_it'/6 =
    %% Line 139
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Starter,'self',Name,Mod,Args,Options> when 'true' ->
	      let <_cor6> =
		  %% Line 140
		  call 'erlang':'self'
		      ()
	      in  %% Line 140
		  apply 'init_it'/6
		      (Starter, _cor6, Name, Mod, Args, Options)
	  %% Line 141
	  <Starter,Parent,Name0,_cor16,_cor17,Options> when 'true' ->
	      do  %% Line 142
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  let <Debug> =
		      %% Line 143
		      call 'gen':'debug_options'
			  (Options)
		  in  let <_cor8> =
			  %% Line 144
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 144
			      call 'proc_lib':'init_ack'
				  (Starter, {'ok',_cor8})
			      let <Name> =
				  %% Line 145
				  apply 'name'/1
				      (Name0)
			      in  %% Line 146
				  apply 'loop'/5
				      (Parent, Name, [], Debug, 'false')
	end
'name'/1 =
    %% Line 148
    fun (_cor0) ->
	case _cor0 of
	  <{'local',Name}> when 'true' ->
	      Name
	  %% Line 149
	  <{'global',Name}> when 'true' ->
	      Name
	  %% Line 150
	  <{'via',_cor2,Name}> when 'true' ->
	      Name
	  %% Line 151
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      Pid
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'name',1}}] )
	    -| ['compiler_generated'] )
	end
'add_handler'/3 =
    %% Line 154
    fun (_cor2,_cor1,_cor0) ->
	apply 'rpc'/2
	    (_cor2, {'add_handler',_cor1,_cor0})
'add_sup_handler'/3 =
    %% Line 157
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 158
	    call 'erlang':'self'
		()
	in  %% Line 158
	    apply 'rpc'/2
		(_cor2, {'add_sup_handler',_cor1,_cor0,_cor3})
'notify'/2 =
    %% Line 161
    fun (_cor1,_cor0) ->
	apply 'send'/2
	    (_cor1, {'notify',_cor0})
'sync_notify'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	apply 'rpc'/2
	    (_cor1, {'sync_notify',_cor0})
'call'/3 =
    %% Line 167
    fun (_cor2,_cor1,_cor0) ->
	apply 'call1'/3
	    (_cor2, _cor1, _cor0)
'call'/4 =
    %% Line 170
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'call1'/4
	    (_cor3, _cor2, _cor1, _cor0)
'delete_handler'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	apply 'rpc'/2
	    (_cor2, {'delete_handler',_cor1,_cor0})
'swap_handler'/3 =
    %% Line 177
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,{H1,A1},{H2,A2}> when 'true' ->
	      apply 'rpc'/2
		  (M, {'swap_handler',H1,A1,H2,A2})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'swap_handler',3}}] )
	    -| ['compiler_generated'] )
	end
'swap_sup_handler'/3 =
    %% Line 181
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,{H1,A1},{H2,A2}> when 'true' ->
	      let <_cor3> =
		  %% Line 182
		  call 'erlang':'self'
		      ()
	      in  %% Line 182
		  apply 'rpc'/2
		      (M, {'swap_sup_handler',H1,A1,H2,A2,_cor3})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'swap_sup_handler',3}}] )
	    -| ['compiler_generated'] )
	end
'which_handlers'/1 =
    %% Line 185
    fun (_cor0) ->
	apply 'rpc'/2
	    (_cor0, 'which_handlers')
'stop'/1 =
    %% Line 188
    fun (_cor0) ->
	apply 'rpc'/2
	    (_cor0, 'stop')
'rpc'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 191
	    call 'erlang':'self'
		()
	in  %% Line 191
	    case call 'gen':'call'
		     (_cor1, _cor2, _cor0, 'infinity') of
	      <{'ok',Reply}> when 'true' ->
		  %% Line 192
		  Reply
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'call1'/3 =
    %% Line 194
    fun (_cor2,_cor1,_cor0) ->
	let <Cmd> = {%% Line 195
	     'call',_cor1,_cor0}
	in  %% Line 196
	    try
		let <_cor4> =
		    call 'erlang':'self'
			()
		in  call 'gen':'call'
			(_cor2, _cor4, Cmd)
	    of <_cor5> ->
		case _cor5 of
		  %% Line 197
		  <{'ok',Res}> when 'true' ->
		      %% Line 198
		      Res
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'try_clause',_cor6})
		    -| ['compiler_generated'] )
		end
	    catch <_cor9,_cor8,_cor7> ->
		case <_cor9,_cor8,_cor7> of
		  %% Line 200
		  <'exit',Reason,_cor13> when 'true' ->
		      %% Line 201
		      call 'erlang':'exit'
			  ({Reason,{'gen_event','call',[_cor2|[_cor1|[_cor0|[]]]]}})
		  ( <_cor9,_cor8,_cor7> when 'true' ->
			primop 'raise'
			    (_cor7, _cor8)
		    -| ['compiler_generated'] )
		end
'call1'/4 =
    %% Line 204
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Cmd> = {%% Line 205
	     'call',_cor2,_cor1}
	in  %% Line 206
	    try
		let <_cor5> =
		    call 'erlang':'self'
			()
		in  call 'gen':'call'
			(_cor3, _cor5, Cmd, _cor0)
	    of <_cor6> ->
		case _cor6 of
		  %% Line 207
		  <{'ok',Res}> when 'true' ->
		      %% Line 208
		      Res
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'try_clause',_cor7})
		    -| ['compiler_generated'] )
		end
	    catch <_cor10,_cor9,_cor8> ->
		case <_cor10,_cor9,_cor8> of
		  %% Line 210
		  <'exit',Reason,_cor15> when 'true' ->
		      %% Line 211
		      call 'erlang':'exit'
			  ({Reason,{'gen_event','call',[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]}})
		  ( <_cor10,_cor9,_cor8> when 'true' ->
			primop 'raise'
			    (_cor8, _cor9)
		    -| ['compiler_generated'] )
		end
'send'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'global',Name},Cmd> when 'true' ->
	      do  catch
		      %% Line 215
		      call 'global':'send'
			  (Name, Cmd)
		  %% Line 216
		  'ok'
	  %% Line 217
	  <{'via',Mod,Name},Cmd> when 'true' ->
	      do  catch
		      %% Line 218
		      call Mod:'send'
			  (Name, Cmd)
		  %% Line 219
		  'ok'
	  %% Line 220
	  <M,Cmd> when 'true' ->
	      do  %% Line 221
		  call 'erlang':'!'
		      (M, Cmd)
		  %% Line 222
		  'ok'
	end
'loop'/5 =
    %% Line 224
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Parent,ServerName,MSL,Debug,'true'> when 'true' ->
	      %% Line 225
	      call 'proc_lib':'hibernate'
		  ('gen_event', 'wake_hib', [Parent|[ServerName|[MSL|[Debug|[]]]]])
	  %% Line 226
	  <Parent,ServerName,MSL,Debug,_cor10> when 'true' ->
	      %% Line 227
	      apply 'fetch_msg'/5
		  (Parent, ServerName, MSL, Debug, 'false')
	end
'wake_hib'/4 =
    %% Line 229
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 230
	apply 'fetch_msg'/5
	    (_cor3, _cor2, _cor1, _cor0, 'true')
'fetch_msg'/5 =
    %% Line 232
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 233
	receive
	  %% Line 234
	  <{'system',From,Req}> when 'true' ->
	      %% Line 235
	      call 'sys':'handle_system_msg'
		  (Req, From, _cor4, 'gen_event', _cor1, %% Line 236
							 [_cor3|[_cor2|[_cor0|[]]]], _cor0)
	  %% Line 237
	  <{'EXIT',_cor11,Reason}>
	      when call 'erlang':'=:='
		    (_cor11,
		     _cor4) ->
	      %% Line 238
	      apply 'terminate_server'/4
		  (Reason, _cor4, _cor2, _cor3)
	  %% Line 239
	  <Msg>
	      when call 'erlang':'=:='
		    (_cor1,
		     []) ->
	      %% Line 240
	      apply 'handle_msg'/5
		  (Msg, _cor4, _cor3, _cor2, [])
	  %% Line 241
	  <Msg> when 'true' ->
	      let <Debug1> =
		  %% Line 242
		  call 'sys':'handle_debug'
		      (_cor1, ( 'print_event'/3
				-| [{'id',{0,0,'-fetch_msg/5-fun-0-'}}] ), _cor3, %% Line 243
										  {'in',Msg})
	      in  %% Line 244
		  apply 'handle_msg'/5
		      (Msg, _cor4, _cor3, _cor2, Debug1)
	after 'infinity' ->
	  'true'
'handle_msg'/5 =
    %% Line 247
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 248
	case _cor4 of
	  %% Line 249
	  <{'notify',Event}> when 'true' ->
	      %% Line 250
	      case apply 'server_notify'/4
		       (Event, 'handle_event', _cor1, _cor2) of
		<{Hib,MSL1}> when 'true' ->
		    %% Line 251
		    apply 'loop'/5
			(_cor3, _cor2, MSL1, _cor0, Hib)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 252
	  <{From,Tag,{'sync_notify',Event}}> when 'true' ->
	      %% Line 253
	      case apply 'server_notify'/4
		       (Event, 'handle_event', _cor1, _cor2) of
		<{Hib,MSL1}> when 'true' ->
		    let <_cor7> =
			%% Line 254
			call 'erlang':'element'
			    (2, Tag)
		    in  do  %% Line 254
			    call 'erlang':'!'
				(From, {_cor7,'ok'})
			    %% Line 255
			    apply 'loop'/5
				(_cor3, _cor2, MSL1, _cor0, Hib)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 256
	  <{'EXIT',From,Reason}> when 'true' ->
	      let <MSL1> =
		  %% Line 257
		  apply 'handle_exit'/4
		      (From, Reason, _cor1, _cor2)
	      in  %% Line 258
		  apply 'loop'/5
		      (_cor3, _cor2, MSL1, _cor0, 'false')
	  %% Line 259
	  <{From,Tag,{'call',Handler,Query}}> when 'true' ->
	      %% Line 260
	      case apply 'server_call'/4
		       (Handler, Query, _cor1, _cor2) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    let <_cor10> =
			%% Line 261
			call 'erlang':'element'
			    (2, Tag)
		    in  do  %% Line 261
			    call 'erlang':'!'
				(From, {_cor10,Reply})
			    %% Line 262
			    apply 'loop'/5
				(_cor3, _cor2, MSL1, _cor0, Hib)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 263
	  <{From,Tag,{'add_handler',Handler,Args}}> when 'true' ->
	      %% Line 264
	      case apply 'server_add_handler'/3
		       (Handler, Args, _cor1) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    let <_cor12> =
			%% Line 265
			call 'erlang':'element'
			    (2, Tag)
		    in  do  %% Line 265
			    call 'erlang':'!'
				(From, {_cor12,Reply})
			    %% Line 266
			    apply 'loop'/5
				(_cor3, _cor2, MSL1, _cor0, Hib)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 267
	  <{From,Tag,{'add_sup_handler',Handler,Args,SupP}}> when 'true' ->
	      %% Line 268
	      case apply 'server_add_sup_handler'/4
		       (Handler, Args, _cor1, SupP) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    let <_cor14> =
			%% Line 269
			call 'erlang':'element'
			    (2, Tag)
		    in  do  %% Line 269
			    call 'erlang':'!'
				(From, {_cor14,Reply})
			    %% Line 270
			    apply 'loop'/5
				(_cor3, _cor2, MSL1, _cor0, Hib)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 271
	  <{From,Tag,{'delete_handler',Handler,Args}}> when 'true' ->
	      %% Line 272
	      case apply 'server_delete_handler'/4
		       (Handler, Args, _cor1, _cor2) of
		<{Reply,MSL1}> when 'true' ->
		    let <_cor16> =
			%% Line 274
			call 'erlang':'element'
			    (2, Tag)
		    in  do  %% Line 274
			    call 'erlang':'!'
				(From, {_cor16,Reply})
			    %% Line 275
			    apply 'loop'/5
				(_cor3, _cor2, MSL1, _cor0, 'false')
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 276
	  <{From,Tag,{'swap_handler',Handler1,Args1,Handler2,Args2}}> when 'true' ->
	      %% Line 277
	      case apply 'server_swap_handler'/6
		       (Handler1, Args1, Handler2, %% Line 278
						   Args2, _cor1, _cor2) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    let <_cor18> =
			%% Line 279
			call 'erlang':'element'
			    (2, Tag)
		    in  do  %% Line 279
			    call 'erlang':'!'
				(From, {_cor18,Reply})
			    %% Line 280
			    apply 'loop'/5
				(_cor3, _cor2, MSL1, _cor0, Hib)
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 281
	  <{From,Tag,{'swap_sup_handler',Handler1,Args1,Handler2,Args2,%% Line 282
								       Sup}}> when 'true' ->
	      %% Line 283
	      case apply 'server_swap_handler'/7
		       (Handler1, Args1, Handler2, %% Line 284
						   Args2, _cor1, %% Line 284
								 Sup, _cor2) of
		<{Hib,Reply,MSL1}> when 'true' ->
		    let <_cor20> =
			%% Line 285
			call 'erlang':'element'
			    (2, Tag)
		    in  do  %% Line 285
			    call 'erlang':'!'
				(From, {_cor20,Reply})
			    %% Line 286
			    apply 'loop'/5
				(_cor3, _cor2, MSL1, _cor0, Hib)
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 287
	  <{From,Tag,'stop'}> when 'true' ->
	      do  catch
		      %% Line 288
		      apply 'terminate_server'/4
			  ('normal', _cor3, _cor1, _cor2)
		  let <_cor21> =
		      %% Line 289
		      call 'erlang':'element'
			  (2, Tag)
		  in  %% Line 289
		      call 'erlang':'!'
			  (From, {_cor21,'ok'})
	  %% Line 290
	  <{From,Tag,'which_handlers'}> when 'true' ->
	      let <_cor23> =
		  %% Line 291
		  call 'erlang':'element'
		      (2, Tag)
	      in  let <_cor22> =
		      %% Line 291
		      apply 'the_handlers'/1
			  (_cor1)
		  in  do  %% Line 291
			  call 'erlang':'!'
			      (From, {_cor23,_cor22})
			  %% Line 292
			  apply 'loop'/5
			      (_cor3, _cor2, _cor1, _cor0, 'false')
	  %% Line 293
	  <{From,Tag,'get_modules'}> when 'true' ->
	      let <_cor25> =
		  %% Line 294
		  call 'erlang':'element'
		      (2, Tag)
	      in  let <_cor24> =
		      %% Line 294
		      apply 'get_modules'/1
			  (_cor1)
		  in  do  %% Line 294
			  call 'erlang':'!'
			      (From, {_cor25,_cor24})
			  %% Line 295
			  apply 'loop'/5
			      (_cor3, _cor2, _cor1, _cor0, 'false')
	  %% Line 296
	  <Other> when 'true' ->
	      %% Line 297
	      case apply 'server_notify'/4
		       (Other, 'handle_info', _cor1, _cor2) of
		<{Hib,MSL1}> when 'true' ->
		    %% Line 298
		    apply 'loop'/5
			(_cor3, _cor2, MSL1, _cor0, Hib)
		( <_cor26> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor26})
		  -| ['compiler_generated'] )
	      end
	end
'terminate_server'/4 =
    %% Line 301
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 302
	    apply 'stop_handlers'/2
		(_cor1, _cor0)
	    do  %% Line 303
		apply 'do_unlink'/2
		    (_cor2, _cor1)
		%% Line 304
		call 'erlang':'exit'
		    (_cor3)
'do_unlink'/2 =
    %% Line 310
    fun (_cor1,_cor0) ->
	let <_cor18> =
	    %% Line 311
	    ( fun (_cor16) ->
		  case _cor16 of
		    <Handler = {'handler',_cor21,_cor22,_cor23,_cor24}>
			when call 'erlang':'=:='
			      (_cor24,
			       _cor1) ->
			%% Line 312
			'true'
		    %% Line 313
		    <Handler = {'handler',_cor25,_cor26,_cor27,_cor28}>
			when call 'erlang':'is_pid'
			      (_cor28) ->
			do  %% Line 314
			    call 'erlang':'unlink'
				(_cor28)
			    %% Line 315
			    'true'
		    %% Line 316
		    <_cor33> when 'true' ->
			%% Line 317
			'true'
		  end
	      -| [{'id',{0,0,'-do_unlink/2-fun-0-'}}] )
	in  %% Line 311
	    call 'lists':'foreach'
		(_cor18, _cor0)
'handle_exit'/4 =
    %% Line 325
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <MSL1> =
	    %% Line 326
	    apply 'terminate_supervised'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  %% Line 327
	    case apply 'server_notify'/4
		     ({'EXIT',_cor3,_cor2}, 'handle_info', MSL1, _cor0) of
	      <{_cor10,MSL2}> when 'true' ->
		  %% Line 328
		  MSL2
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'terminate_supervised'/4 =
    %% Line 330
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <F> =
	    %% Line 331
	    ( fun (_cor14) ->
		  case _cor14 of
		    <Ha = {'handler',_cor21,_cor22,_cor23,_cor24}>
			when call 'erlang':'=:='
			      (_cor24,
			       _cor3) ->
			do  %% Line 332
			    apply 'do_terminate'/7
				(_cor21, %% Line 333
					 Ha, %% Line 334
					     {'stop',_cor2}, _cor23, %% Line 336
								     {'parent_terminated',{_cor3,_cor2}}, _cor0, %% Line 338
														 'shutdown')
			    %% Line 339
			    'false'
		    %% Line 340
		    <_cor33> when 'true' ->
			%% Line 341
			'true'
		  end
	      -| [{'id',{0,0,'-terminate_supervised/4-fun-0-'}}] )
	in  %% Line 343
	    call 'lists':'filter'
		(F, _cor1)
'system_continue'/3 =
    %% Line 348
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Parent,Debug,[ServerName|[MSL|[Hib|[]]]]> when 'true' ->
	      %% Line 349
	      apply 'loop'/5
		  (Parent, ServerName, MSL, Debug, Hib)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'system_continue',3}}] )
	    -| ['compiler_generated'] )
	end
'system_terminate'/4 =
    %% Line 352
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Reason,Parent,_X_Debug,[ServerName|[MSL|[_X_Hib|[]]]]> when 'true' ->
	      %% Line 353
	      apply 'terminate_server'/4
		  (Reason, Parent, MSL, ServerName)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'system_terminate',4}}] )
	    -| ['compiler_generated'] )
	end
'system_code_change'/4 =
    %% Line 359
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[ServerName|[MSL|[Hib|[]]]],Module,OldVsn,Extra> when 'true' ->
	      let <_cor18> =
		  %% Line 360
		  ( fun (_cor16) ->
			case _cor16 of
			  <H = {'handler',_cor24,_cor25,_cor26,_cor27}>
			      when call 'erlang':'=:='
				    (_cor24,
				     Module) ->
			      %% Line 361
			      case %% Line 362
				   call Module:'code_change'
				       (OldVsn, _cor26, %% Line 363
							Extra) of
				<{'ok',NewState}> when 'true' ->
				    let <_cor15> =
					%% Line 364
					call 'erlang':'setelement'
					    (4, H, NewState)
				    in  %% Line 364
					{'true',_cor15}
				( <_cor12> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor12})
				  -| ['compiler_generated'] )
			      end
			  %% Line 365
			  <_cor37> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-system_code_change/4-fun-0-'}}] )
	      in  let <MSL1> =
		      %% Line 360
		      call 'lists':'zf'
			  (_cor18, %% Line 367
				   MSL)
		  in  %% Line 368
		      {'ok',[ServerName|[MSL1|[Hib|[]]]]}
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'system_code_change',4}}] )
	    -| ['compiler_generated'] )
	end
'system_get_state'/1 =
    %% Line 370
    fun (_cor0) ->
	case _cor0 of
	  <[_X_ServerName|[MSL|[_X_Hib|[]]]]> when 'true' ->
	      let <_cor5> =
		  %% Line 371
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[{'handler',Mod,Id,State,_cor7}|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [{Mod,Id,State}|_cor4]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (MSL)
		    -| ['list_comprehension'] )
	      in  %% Line 371
		  {'ok',_cor5}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'system_get_state',1}}] )
	    -| ['compiler_generated'] )
	end
'system_replace_state'/2 =
    %% Line 373
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <StateFun,[ServerName|[MSL|[Hib|[]]]]> when 'true' ->
	      let <_cor16> =
		  %% Line 375
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[HS = %% Line 384
					 {'handler',Mod,Id,State,_cor20}|_cor3]> when 'true' ->
				      let <Cur> = {%% Line 376
					   Mod,%% Line 376
					       Id,%% Line 376
						  State}
				      in  let <_cor14> =
					      %% Line 377
					      try
						  %% Line 378
						  case apply StateFun
							   (Cur) of
						    <NState = {_cor21,_cor22,NS}>
							when let <_cor23> =
							      call 'erlang':'=:='
								  (_cor21, Mod)
							  in  let <_cor24> =
								  call 'erlang':'=:='
								      (_cor22, Id)
							      in  call 'erlang':'and'
								      (_cor23, _cor24) ->
							let <_cor9> =
							    %% Line 379
							    call 'erlang':'setelement'
								(4, HS, NS)
							in  %% Line 379
							    {_cor9,NState}
						    ( <_cor6> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor6})
						      -| ['compiler_generated'] )
						  end
					      of <_cor10> ->
						  _cor10
					      catch <_cor13,_cor12,_cor11> ->
						  %% Line 382
						  {HS,Cur}
					  in  let <_cor15> =
						  %% Line 384
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor14|_cor15]
						    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					%% Line 384
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 384
			     MSL)
		    -| ['list_comprehension'] )
	      in  %% Line 374
		  case %% Line 375
		       call 'lists':'unzip'
			   (_cor16) of
		    <{NMSL,NStates}> when 'true' ->
			%% Line 385
			{'ok',NStates,[ServerName|[NMSL|[Hib|[]]]]}
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor17})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'system_replace_state',2}}] )
	    -| ['compiler_generated'] )
	end
'print_event'/3 =
    %% Line 391
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dev,{'in',Msg},Name> when 'true' ->
	      %% Line 392
	      case Msg of
		%% Line 393
		<{'notify',Event}> when 'true' ->
		    %% Line 394
		    call 'io':'format'
			(Dev, [42|[68|[66|[71|[42|[32|[126|[112|[32|[103|[111|[116|[32|[101|[118|[101|[110|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [Name|[Event|[]]])
		%% Line 395
		<{_cor7,_cor8,{'call',Handler,Query}}> when 'true' ->
		    %% Line 396
		    call 'io':'format'
			(Dev, [42|[68|[66|[71|[42|[32|[126|[112|[40|[126|[112|[41|[32|[103|[111|[116|[32|[99|[97|[108|[108|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 397
																					      [Name|[Handler|[Query|[]]]])
		%% Line 398
		<_cor9> when 'true' ->
		    %% Line 399
		    call 'io':'format'
			(Dev, [42|[68|[66|[71|[42|[32|[126|[112|[32|[103|[111|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]], [Name|[Msg|[]]])
	      end
	  %% Line 401
	  <Dev,Dbg,Name> when 'true' ->
	      %% Line 402
	      call 'io':'format'
		  (Dev, [42|[68|[66|[71|[42|[32|[126|[112|[32|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]], [Name|[Dbg|[]]])
	end
'server_add_handler'/3 =
    %% Line 410
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Mod,Id},Args,MSL> when 'true' ->
	      let <Handler> =
		  %% Line 411
		  {'handler',Mod,%% Line 412
				 Id,'undefined','false'}
	      in  %% Line 413
		  apply 'server_add_handler'/4
		      (Mod, Handler, Args, MSL)
	  %% Line 414
	  <Mod,Args,MSL> when 'true' ->
	      let <Handler> =
		  %% Line 415
		  {'handler',Mod,'false','undefined','false'}
	      in  %% Line 416
		  apply 'server_add_handler'/4
		      (Mod, Handler, Args, MSL)
	end
'server_add_handler'/4 =
    %% Line 418
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    catch
		%% Line 419
		call _cor3:'init'
		    (_cor1)
	in  %% Line 419
	    case _cor4 of
	      %% Line 420
	      <{'ok',State}> when 'true' ->
		  %% Line 421
		  case _cor2 of
		    <{'handler',_cor16,_cor17,_cor18,_cor19}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(4, _cor2, State)
			in  {'false','ok',[_cor7|_cor0]}
		    ( <_cor20> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','handler'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 422
	      <{'ok',State,'hibernate'}> when 'true' ->
		  %% Line 423
		  case _cor2 of
		    <{'handler',_cor21,_cor22,_cor23,_cor24}> when 'true' ->
			let <_cor10> =
			    call 'erlang':'setelement'
				(4, _cor2, State)
			in  {'true','ok',[_cor10|_cor0]}
		    ( <_cor25> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','handler'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 424
	      <Other> when 'true' ->
		  %% Line 425
		  {'false',Other,_cor0}
	    end
'server_add_sup_handler'/4 =
    %% Line 433
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{Mod,Id},Args,MSL,Parent> when 'true' ->
	      do  %% Line 434
		  call 'erlang':'link'
		      (Parent)
		  let <Handler> =
		      %% Line 435
		      {'handler',Mod,%% Line 436
				     Id,'undefined',%% Line 437
						    Parent}
		  in  %% Line 438
		      apply 'server_add_handler'/4
			  (Mod, Handler, Args, MSL)
	  %% Line 439
	  <Mod,Args,MSL,Parent> when 'true' ->
	      do  %% Line 440
		  call 'erlang':'link'
		      (Parent)
		  let <Handler> =
		      %% Line 441
		      {'handler',Mod,'false','undefined',%% Line 442
							 Parent}
		  in  %% Line 443
		      apply 'server_add_handler'/4
			  (Mod, Handler, Args, MSL)
	end
'server_delete_handler'/4 =
    %% Line 447
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 448
	case apply 'split'/2
		 (_cor3, _cor1) of
	  %% Line 449
	  <{Mod,Handler,MSL1}> when 'true' ->
	      %% Line 451
	      ( case Handler of
		  ( <( {'handler',_cor12,_cor13,_rec8,_cor14}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    apply 'do_terminate'/7
				(Mod, Handler, _cor2, _rec8, 'delete', _cor0, 'normal')
			in  {_cor6,%% Line 452
				   MSL1}
		    -| ['compiler_generated'] )
		  ( <_cor15> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 453
	  <'error'> when 'true' ->
	      %% Line 454
	      {{'error','module_not_found'},_cor1}
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'server_swap_handler'/6 =
    %% Line 460
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 461
	case apply 'split_and_terminate'/6
		 (_cor5, _cor4, _cor1, _cor0, _cor3, %% Line 462
						     'false') of
	  <{State2,Sup,MSL1}> when 'true' ->
	      %% Line 463
	      case apply 's_s_h'/4
		       (Sup, _cor3, {_cor2,State2}, MSL1) of
		%% Line 464
		<{Hib,'ok',MSL2}> when 'true' ->
		    %% Line 465
		    {Hib,'ok',MSL2}
		%% Line 466
		<{Hib,What,MSL2}> when 'true' ->
		    %% Line 467
		    {Hib,{'error',What},MSL2}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'server_swap_handler'/7 =
    %% Line 470
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 471
	case apply 'split_and_terminate'/6
		 (_cor6, _cor5, _cor2, _cor0, _cor4, _cor1) of
	  <{State2,_cor16,MSL1}> when 'true' ->
	      %% Line 473
	      case apply 's_s_h'/4
		       (_cor1, _cor4, {_cor3,State2}, MSL1) of
		%% Line 474
		<{Hib,'ok',MSL2}> when 'true' ->
		    %% Line 475
		    {Hib,'ok',MSL2}
		%% Line 476
		<{Hib,What,MSL2}> when 'true' ->
		    %% Line 477
		    {Hib,{'error',What},MSL2}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
's_s_h'/4 =
    %% Line 480
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'false',Handler,Args,MSL> when 'true' ->
	      %% Line 481
	      apply 'server_add_handler'/3
		  (Handler, Args, MSL)
	  %% Line 482
	  <Pid,Handler,Args,MSL> when 'true' ->
	      %% Line 483
	      apply 'server_add_sup_handler'/4
		  (Handler, Args, MSL, Pid)
	end
'split_and_terminate'/6 =
    %% Line 485
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 486
	case apply 'split'/2
		 (_cor5, _cor3) of
	  %% Line 487
	  <{Mod,Handler,MSL1}> when 'true' ->
	      %% Line 488
	      ( case Handler of
		  ( <( {'handler',_cor23,_cor24,_cor25,_rec9}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor11> =
			    %% Line 489
			    case <> of
			      %% Line 490
			      <>
				  when let <_cor9> =
					call 'erlang':'=:='
					    (_cor0, 'false')
				    in  let <_cor10> =
					    call 'erlang':'is_boolean'
						(_cor0)
					in  call 'erlang':'and'
						(_cor9, _cor10) ->
				  _rec9
			      %% Line 491
			      <> when 'true' ->
				  _cor0
			    end
			in  let <_cor15> =
				%% Line 493
				apply 'do_terminate'/7
				    (Mod, Handler, _cor4, _cor25, %% Line 494
								  'swapped', _cor2, %% Line 495
										    {'swapped',_cor1,_cor11})
			    in  %% Line 493
				{_cor15,_rec9,%% Line 497
					      MSL1}
		    -| ['compiler_generated'] )
		  ( <_cor26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 498
	  <'error'> when 'true' ->
	      %% Line 499
	      {'error','false',_cor3}
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'server_notify'/4 =
    %% Line 504
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Event,Func,[Handler|T],SName> when 'true' ->
	      %% Line 505
	      case apply 'server_update'/4
		       (Handler, Func, Event, SName) of
		%% Line 506
		<{'ok',Handler1}> when 'true' ->
		    %% Line 507
		    case apply 'server_notify'/4
			     (Event, Func, T, SName) of
		      <{Hib,NewHandlers}> when 'true' ->
			  %% Line 508
			  {Hib,[Handler1|NewHandlers]}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 509
		<{'hibernate',Handler1}> when 'true' ->
		    %% Line 510
		    case apply 'server_notify'/4
			     (Event, Func, T, SName) of
		      <{_X_Hib,NewHandlers}> when 'true' ->
			  %% Line 511
			  {'true',[Handler1|NewHandlers]}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 512
		<'no'> when 'true' ->
		    %% Line 513
		    apply 'server_notify'/4
			(Event, Func, T, SName)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 515
	  <_cor11,_cor12,[],_cor13> when 'true' ->
	      %% Line 516
	      {'false',[]}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'server_notify',4}}] )
	    -| ['compiler_generated'] )
	end
'server_update'/4 =
    %% Line 520
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 521
	( case _cor3 of
	    ( <( {'handler',_rec11,_cor22,_cor23,_cor24}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor10> =
		      catch
			  %% Line 523
			  call _rec11:_cor2
			      (_cor1, _cor23)
		  in  %% Line 523
		      case _cor10 of
			%% Line 524
			<{'ok',State1}> when 'true' ->
			    let <_cor13> =
				%% Line 525
				call 'erlang':'setelement'
				    (4, _cor3, State1)
			    in  %% Line 525
				{'ok',_cor13}
			%% Line 526
			<{'ok',State1,'hibernate'}> when 'true' ->
			    let <_cor16> =
				%% Line 527
				call 'erlang':'setelement'
				    (4, _cor3, State1)
			    in  %% Line 527
				{'hibernate',_cor16}
			%% Line 528
			<{'swap_handler',Args1,State1,Handler2,Args2}> when 'true' ->
			    %% Line 529
			    apply 'do_swap'/7
				(_rec11, _cor3, Args1, State1, Handler2, Args2, _cor0)
			%% Line 530
			<'remove_handler'> when 'true' ->
			    do  %% Line 531
				apply 'do_terminate'/7
				    (_rec11, _cor3, 'remove_handler', _cor23, %% Line 532
									      'remove', _cor0, %% Line 532
											       'normal')
				%% Line 533
				'no'
			%% Line 534
			<Other> when 'true' ->
			    do  %% Line 535
				apply 'do_terminate'/7
				    (_rec11, _cor3, {'error',Other}, _cor23, _cor1, _cor0, %% Line 536
											   'crash')
				%% Line 537
				'no'
		      end
	      -| ['compiler_generated'] )
	    ( <_cor25> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','handler'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_swap'/7 =
    %% Line 540
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 544
	( case _cor5 of
	    ( <( {'handler',_cor23,_cor24,_cor25,_rec15}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <State2> =
		      apply 'do_terminate'/7
			  (_cor6, _cor5, _cor4, _cor3, 'swapped', _cor0, {'swapped',_cor2,_rec15})
		  in  %% Line 545
		      case apply 'new_handler'/2
			       (_cor2, _cor5) of
			<{Mod2,Handler}> when 'true' ->
			    let <_cor11> =
				catch
				    %% Line 546
				    call Mod2:'init'
					({_cor1,State2})
			    in  %% Line 546
				case _cor11 of
				  %% Line 547
				  <{'ok',State2a}> when 'true' ->
				      %% Line 548
				      case Handler of
					<{'handler',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
					    let <_cor14> =
						call 'erlang':'setelement'
						    (4, Handler, State2a)
					    in  {'ok',_cor14}
					( <_cor31> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','handler'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  %% Line 549
				  <Other> when 'true' ->
				      do  %% Line 550
					  apply 'report_terminate'/5
					      (Handler, 'crash', {'error',Other}, _cor0, 'false')
					  %% Line 551
					  'no'
				end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','handler'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'new_handler'/2 =
    %% Line 554
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Id},Handler1> when 'true' ->
	      %% Line 557
	      ( case Handler1 of
		  ( <( {'handler',_cor8,_cor9,_cor10,_rec17}
		       -| ['compiler_generated'] )> when 'true' ->
			{Mod,{'handler',Mod,Id,'undefined',_rec17}}
		    -| ['compiler_generated'] )
		  ( <_cor11> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 558
	  <Mod,Handler1> when 'true' ->
	      %% Line 560
	      ( case Handler1 of
		  ( <( {'handler',_cor12,_cor13,_cor14,_rec18}
		       -| ['compiler_generated'] )> when 'true' ->
			{Mod,{'handler',Mod,'false','undefined',_rec18}}
		    -| ['compiler_generated'] )
		  ( <_cor15> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'split'/2 =
    %% Line 566
    fun (_cor1,_cor0) ->
	apply 'split'/3
	    (_cor1, _cor0, [])
'split'/3 =
    %% Line 568
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Mod,Id},[Ha = {'handler',_cor26,_cor27,_cor28,_cor29}|T],L>
	      when let <_cor8> =
		    call 'erlang':'=:='
			(_cor26, Mod)
		in  let <_cor11> =
			%% Line 569
			call 'erlang':'=:='
			    (_cor27, Id)
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor8, _cor11)
			  -| ['compiler_generated'] ) ->
	      let <_cor12> =
		  %% Line 570
		  call 'lists':'reverse'
		      (L, T)
	      in  %% Line 570
		  {Mod,Ha,_cor12}
	  %% Line 571
	  <Mod,[Ha = {'handler',_cor30,_cor31,_cor32,_cor33}|T],L>
	      when let <_cor18> =
		    call 'erlang':'=:='
			(_cor30, Mod)
		in  let <_cor21> =
			%% Line 572
			call 'erlang':'=:='
			    (_cor31, 'false')
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor18, _cor21)
			  -| ['compiler_generated'] ) ->
	      let <_cor22> =
		  %% Line 573
		  call 'lists':'reverse'
		      (L, T)
	      in  %% Line 573
		  {Mod,Ha,_cor22}
	  %% Line 574
	  <Ha,[H|T],L> when 'true' ->
	      %% Line 575
	      apply 'split'/3
		  (Ha, T, [H|L])
	  %% Line 576
	  <_cor34,[],_cor35> when 'true' ->
	      %% Line 577
	      'error'
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'server_call'/4 =
    %% Line 582
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 583
	case apply 'search'/2
		 (_cor3, _cor1) of
	  %% Line 584
	  <{'ok',Ha}> when 'true' ->
	      %% Line 585
	      case apply 'server_call_update'/3
		       (Ha, _cor2, _cor0) of
		%% Line 586
		<{'no',Reply}> when 'true' ->
		    let <_cor4> =
			%% Line 587
			apply 'delete'/2
			    (_cor3, _cor1)
		    in  %% Line 587
			{'false',Reply,_cor4}
		%% Line 588
		<{{'ok',Ha1},Reply}> when 'true' ->
		    let <_cor5> =
			%% Line 589
			apply 'replace'/3
			    (_cor3, _cor1, Ha1)
		    in  %% Line 589
			{'false',Reply,_cor5}
		%% Line 590
		<{{'hibernate',Ha1},Reply}> when 'true' ->
		    let <_cor6> =
			%% Line 591
			apply 'replace'/3
			    (_cor3, _cor1, Ha1)
		    in  %% Line 591
			{'true',Reply,_cor6}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 593
	  <'false'> when 'true' ->
	      %% Line 594
	      {'false',{'error','bad_module'},_cor1}
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'search'/2 =
    %% Line 597
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Id},[Ha = {'handler',_cor22,_cor23,_cor24,_cor25}|_X_MSL]>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor22, Mod)
		in  let <_cor10> =
			%% Line 598
			call 'erlang':'=:='
			    (_cor23, Id)
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor7, _cor10)
			  -| ['compiler_generated'] ) ->
	      %% Line 599
	      {'ok',Ha}
	  %% Line 600
	  <Mod,[Ha = {'handler',_cor26,_cor27,_cor28,_cor29}|_X_MSL]>
	      when let <_cor16> =
		    call 'erlang':'=:='
			(_cor26, Mod)
		in  let <_cor19> =
			%% Line 601
			call 'erlang':'=:='
			    (_cor27, 'false')
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor16, _cor19)
			  -| ['compiler_generated'] ) ->
	      %% Line 602
	      {'ok',Ha}
	  %% Line 603
	  <Handler,[_cor30|MSL]> when 'true' ->
	      %% Line 604
	      apply 'search'/2
		  (Handler, MSL)
	  %% Line 605
	  <_cor31,[]> when 'true' ->
	      %% Line 606
	      'false'
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'search',2}}] )
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 608
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Id},[Ha = {'handler',_cor23,_cor24,_cor25,_cor26}|MSL]>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor23, Mod)
		in  let <_cor10> =
			%% Line 609
			call 'erlang':'=:='
			    (_cor24, Id)
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor7, _cor10)
			  -| ['compiler_generated'] ) ->
	      %% Line 610
	      MSL
	  %% Line 611
	  <Mod,[Ha = {'handler',_cor27,_cor28,_cor29,_cor30}|MSL]>
	      when let <_cor16> =
		    call 'erlang':'=:='
			(_cor27, Mod)
		in  let <_cor19> =
			%% Line 612
			call 'erlang':'=:='
			    (_cor28, 'false')
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor16, _cor19)
			  -| ['compiler_generated'] ) ->
	      %% Line 613
	      MSL
	  %% Line 614
	  <Handler,[Ha|MSL]> when 'true' ->
	      let <_cor20> =
		  %% Line 615
		  apply 'delete'/2
		      (Handler, MSL)
	      in  %% Line 615
		  [Ha|_cor20]
	  %% Line 616
	  <_cor31,[]> when 'true' ->
	      %% Line 617
	      []
	  ( <_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'replace'/3 =
    %% Line 619
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Mod,Id},[Ha = {'handler',_cor25,_cor26,_cor27,_cor28}|MSL],NewHa>
	      when let <_cor8> =
		    call 'erlang':'=:='
			(_cor25, Mod)
		in  let <_cor11> =
			%% Line 620
			call 'erlang':'=:='
			    (_cor26, Id)
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor8, _cor11)
			  -| ['compiler_generated'] ) ->
	      %% Line 621
	      [NewHa|MSL]
	  %% Line 622
	  <Mod,[Ha = {'handler',_cor29,_cor30,_cor31,_cor32}|MSL],NewHa>
	      when let <_cor17> =
		    call 'erlang':'=:='
			(_cor29, Mod)
		in  let <_cor20> =
			%% Line 623
			call 'erlang':'=:='
			    (_cor30, 'false')
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor17, _cor20)
			  -| ['compiler_generated'] ) ->
	      %% Line 624
	      [NewHa|MSL]
	  %% Line 625
	  <Handler,[Ha|MSL],NewHa> when 'true' ->
	      let <_cor21> =
		  %% Line 626
		  apply 'replace'/3
		      (Handler, MSL, NewHa)
	      in  %% Line 626
		  [Ha|_cor21]
	  %% Line 627
	  <_cor33,[],NewHa> when 'true' ->
	      %% Line 628
	      [NewHa|[]]
	  ( <_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22})
		  -| [{'function_name',{'replace',3}}] )
	    -| ['compiler_generated'] )
	end
'server_call_update'/3 =
    %% Line 633
    fun (_cor2,_cor1,_cor0) ->
	%% Line 634
	( case _cor2 of
	    ( <( {'handler',_rec19,_cor21,_cor22,_cor23}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor9> =
		      catch
			  %% Line 636
			  call _rec19:'handle_call'
			      (_cor1, _cor22)
		  in  %% Line 636
		      case _cor9 of
			%% Line 637
			<{'ok',Reply,State1}> when 'true' ->
			    let <_cor12> =
				%% Line 638
				call 'erlang':'setelement'
				    (4, _cor2, State1)
			    in  %% Line 638
				{{'ok',_cor12},Reply}
			%% Line 639
			<{'ok',Reply,State1,'hibernate'}> when 'true' ->
			    let <_cor15> =
				%% Line 640
				call 'erlang':'setelement'
				    (4, _cor2, State1)
			    in  %% Line 640
				{{'hibernate',_cor15},%% Line 641
						      Reply}
			%% Line 642
			<{'swap_handler',Reply,Args1,State1,Handler2,Args2}> when 'true' ->
			    let <_cor16> =
				%% Line 643
				apply 'do_swap'/7
				    (_rec19, _cor2, Args1, State1, Handler2, Args2, _cor0)
			    in  %% Line 643
				{_cor16,Reply}
			%% Line 644
			<{'remove_handler',Reply}> when 'true' ->
			    do  %% Line 645
				apply 'do_terminate'/7
				    (_rec19, _cor2, 'remove_handler', _cor22, %% Line 646
									      'remove', _cor0, %% Line 646
											       'normal')
				%% Line 647
				{'no',Reply}
			%% Line 648
			<Other> when 'true' ->
			    do  %% Line 649
				apply 'do_terminate'/7
				    (_rec19, _cor2, {'error',Other}, _cor22, _cor1, _cor0, %% Line 650
											   'crash')
				%% Line 651
				{'no',{'error',Other}}
		      end
	      -| ['compiler_generated'] )
	    ( <_cor24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','handler'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_terminate'/7 =
    %% Line 654
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    catch
		%% Line 655
		call _cor6:'terminate'
		    (_cor4, _cor3)
	in  do  %% Line 656
		apply 'report_terminate'/7
		    (_cor5, _cor0, _cor4, _cor3, _cor2, _cor1, _cor7)
		_cor7
'report_terminate'/7 =
    %% Line 659
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Handler,'crash',{'error',Why},State,LastIn,SName,_cor14> when 'true' ->
	      %% Line 660
	      apply 'report_terminate'/5
		  (Handler, Why, State, LastIn, SName)
	  %% Line 661
	  <Handler,How,_cor15,State,LastIn,SName,_cor16> when 'true' ->
	      %% Line 663
	      apply 'report_terminate'/5
		  (Handler, How, State, LastIn, SName)
	end
'report_terminate'/5 =
    %% Line 665
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 666
	    apply 'report_error'/5
		(_cor4, _cor3, _cor2, _cor1, _cor0)
	    %% Line 667
	    ( case _cor4 of
		( <( {'handler',_cor14,_cor15,_cor16,_rec23}
		     -| ['compiler_generated'] )> when 'true' ->
		      case _rec23 of
			%% Line 668
			<'false'> when 'true' ->
			    %% Line 669
			    'ok'
			%% Line 670
			<Pid> when 'true' ->
			    let <_cor7> =
				%% Line 671
				apply 'handler'/1
				    (_cor4)
			    in  do  %% Line 671
				    call 'erlang':'!'
					(Pid, {'gen_event_EXIT',_cor7,_cor3})
				    %% Line 672
				    'ok'
		      end
		  -| ['compiler_generated'] )
		( <_cor17> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','handler'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'report_error'/5 =
    %% Line 675
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Handler,'normal',_cor27,_cor28,_cor29> when 'true' ->
	      'ok'
	  %% Line 676
	  <_X_Handler,'shutdown',_cor30,_cor31,_cor32> when 'true' ->
	      'ok'
	  %% Line 677
	  <_X_Handler,{'swapped',_cor33,_cor34},_cor35,_cor36,_cor37> when 'true' ->
	      'ok'
	  %% Line 678
	  <Handler,Reason,State,LastIn,SName> when 'true' ->
	      let <_cor9> =
		  %% Line 680
		  case Reason of
		    %% Line 681
		    <{'EXIT',{'undef',[{M,F,A,L}|MFAs]}}> when 'true' ->
			%% Line 682
			case call 'code':'is_loaded'
				 (M) of
			  %% Line 683
			  <'false'> when 'true' ->
			      %% Line 684
			      {'module could not be loaded',[{M,F,A,L}|MFAs]}
			  %% Line 685
			  <_cor38> when 'true' ->
			      let <_cor5> =
				  %% Line 686
				  call 'erlang':'length'
				      (A)
			      in  %% Line 686
				  case call 'erlang':'function_exported'
					   (M, F, _cor5) of
				    %% Line 687
				    <'true'> when 'true' ->
					%% Line 688
					{'undef',[{M,F,A,L}|MFAs]}
				    %% Line 689
				    <'false'> when 'true' ->
					%% Line 690
					{'function not exported',[{M,F,A,L}|MFAs]}
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
			end
		    %% Line 693
		    <{'EXIT',Why}> when 'true' ->
			%% Line 694
			Why
		    %% Line 695
		    <_cor39> when 'true' ->
			%% Line 696
			Reason
		  end
	      in  %% Line 698
		  ( case Handler of
		      ( <( {'handler',_rec24,_cor40,_cor41,_cor42}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor19> =
				%% Line 699
				case call 'erlang':'function_exported'
					 (_rec24, 'format_status', 2) of
				  %% Line 700
				  <'true'> when 'true' ->
				      let <_cor14> =
					  %% Line 701
					  call 'erlang':'get'
					      ()
				      in  let <Args> =
					      %% Line 701
					      [_cor14|[State|[]]]
					  in  let <_cor16> =
						  catch
						      %% Line 702
						      call _rec24:'format_status'
							  ('terminate', Args)
					      in  %% Line 702
						  case _cor16 of
						    %% Line 703
						    <{'EXIT',_cor44}> when 'true' ->
							State
						    %% Line 704
						    <Else> when 'true' ->
							Else
						  end
				  %% Line 706
				  <_cor45> when 'true' ->
				      %% Line 707
				      State
				end
			    in  let <_cor21> =
				    %% Line 714
				    apply 'handler'/1
					(Handler)
				in  %% Line 709
				    call 'error_logger':'error_msg'
					([42|[42|[32|[103|[101|[110|[95|[101|[118|[101|[110|[116|[32|[104|[97|[110|[100|[108|[101|[114|[32|[126|[112|[32|[99|[114|[97|[115|[104|[101|[100|[46|[126|[110|[42|[42|[32|[87|[97|[115|[32|[105|[110|[115|[116|[97|[108|[108|[101|[100|[32|[105|[110|[32|[126|[112|[126|[110|[42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[119|[97|[115|[58|[32|[126|[112|[126|[110|[42|[42|[32|[87|[104|[101|[110|[32|[104|[97|[110|[100|[108|[101|[114|[32|[115|[116|[97|[116|[101|[32|[61|[61|[32|[126|[112|[126|[110|[42|[42|[32|[82|[101|[97|[115|[111|[110|[32|[61|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 714
																																																																																														 [_cor21|[SName|[LastIn|[_cor19|[_cor9|[]]]]]])
			-| ['compiler_generated'] )
		      ( <_cor43> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','handler'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'handler'/1 =
    %% Line 716
    fun (_cor0) ->
	case _cor0 of
	  <Handler>
	      when try
		    ( case <> of
			( <>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_record'
								       -| ['compiler_generated'] )
				      (_cor0,
				       ( 'handler'
					 -| ['compiler_generated'] ),
				       ( 5
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] ) ->
			      let <_cor5> =
				  ( call 'erlang':'element'
					(3, _cor0)
				    -| ['compiler_generated'] )
			      in  let <_cor6> =
				      ( call 'erlang':'=:='
					    (_cor5, 'true')
					-| ['compiler_generated'] )
				  in  let <_cor8> =
					  ( call 'erlang':'not'
						(_cor6)
					    -| ['compiler_generated'] )
				      in  let <_cor9> =
					      ( call 'erlang':'is_boolean'
						    (_cor5)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'and'
						    (_cor8, _cor9)
						-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 717
	      ( case Handler of
		  ( <( {'handler',_rec25,_cor18,_cor19,_cor20}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec25
		    -| ['compiler_generated'] )
		  ( <_cor21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 718
	  <Handler> when 'true' ->
	      %% Line 719
	      ( case Handler of
		  ( <( {'handler',_rec26,_cor22,_cor23,_cor24}
		       -| ['compiler_generated'] )> when 'true' ->
			{_rec26,_cor22}
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'the_handlers'/1 =
    %% Line 721
    fun (_cor0) ->
	%% Line 722
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Handler|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'handler'/1
				    (Handler)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'stop_handlers'/2 =
    %% Line 726
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Handler|T],SName> when 'true' ->
	      %% Line 727
	      ( case Handler of
		  ( <( {'handler',_rec28,_cor9,_cor10,_cor11}
		       -| ['compiler_generated'] )> when 'true' ->
			do  %% Line 728
			    apply 'do_terminate'/7
				(_rec28, Handler, 'stop', _cor10, %% Line 729
								  'stop', %% Line 729
									  SName, %% Line 729
										 'shutdown')
			    %% Line 730
			    apply 'stop_handlers'/2
				(T, SName)
		    -| ['compiler_generated'] )
		  ( <_cor12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handler'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 731
	  <[],_cor17> when 'true' ->
	      %% Line 732
	      []
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'stop_handlers',2}}] )
	    -| ['compiler_generated'] )
	end
'get_modules'/1 =
    %% Line 736
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 737
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[Handler|_cor2]> when 'true' ->
				( case Handler of
				    ( <( {'handler',_rec30,_cor11,_cor12,_cor13}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_rec30|_cor6]
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_cor14> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','handler'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor9> =
		%% Line 738
		call 'ordsets':'from_list'
		    (_cor7)
	    in  %% Line 738
		call 'ordsets':'to_list'
		    (_cor9)
'format_status'/2 =
    %% Line 743
    fun (_cor1,_cor0) ->
	%% Line 744
	case _cor0 of
	  <[PDict|[SysState|[Parent|[_X_Debug|[[ServerName|[MSL|[_X_Hib|[]]]]|[]]]]]]> when 'true' ->
	      let <Header> =
		  %% Line 745
		  call 'gen':'format_status_header'
		      ([83|[116|[97|[116|[117|[115|[32|[102|[111|[114|[32|[101|[118|[101|[110|[116|[32|[104|[97|[110|[100|[108|[101|[114]]]]]]]]]]]]]]]]]]]]]]]], %% Line 746
																				  ServerName)
	      in  let <_cor15> =
		      %% Line 747
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[MS = %% Line 756
					     {'handler',Mod,_cor19,State,_cor20}|_cor5]> when 'true' ->
					  let <_cor13> =
					      case call 'erlang':'function_exported'
						       (Mod, 'format_status', 2) of
						%% Line 748
						<'true'> when 'true' ->
						    let <Args> =
							%% Line 749
							[PDict|[State|[]]]
						    in  let <_cor8> =
							    catch
								%% Line 750
								call Mod:'format_status'
								    (_cor1, Args)
							in  %% Line 750
							    case _cor8 of
							      %% Line 751
							      <{'EXIT',_cor21}> when 'true' ->
								  MSL
							      %% Line 752
							      <Else> when 'true' ->
								  call 'erlang':'setelement'
								      (4, MS, Else)
							    end
						%% Line 754
						<_cor27> when 'true' ->
						    %% Line 755
						    MS
					      end
					  in  let <_cor14> =
						  %% Line 756
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [_cor13|_cor14]
						    -| ['compiler_generated'] )
				      ( <[_cor4|_cor5]> when 'true' ->
					    %% Line 756
					    apply 'lc$^0'/1
						(_cor5)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(%% Line 756
				 MSL)
			-| ['list_comprehension'] )
		  in  %% Line 757
		      [{'header',Header}|%% Line 758
					 [{'data',[{[83|[116|[97|[116|[117|[115]]]]]],SysState}|%% Line 759
												[{[80|[97|[114|[101|[110|[116]]]]]],Parent}|[]]]}|%% Line 760
																		  [{'items',{[73|[110|[115|[116|[97|[108|[108|[101|[100|[32|[104|[97|[110|[100|[108|[101|[114|[115]]]]]]]]]]]]]]]]]],_cor15}}|[]]]]
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'behaviour_info'/1 =
    fun (_cor0) ->
	case _cor0 of
	  <'callbacks'> when 'true' ->
	      [{'init',1}|[{'handle_event',2}|[{'handle_call',2}|[{'handle_info',2}|[{'terminate',2}|[{'code_change',3}]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'behaviour_info',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gen_event')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gen_event', _cor0)
end