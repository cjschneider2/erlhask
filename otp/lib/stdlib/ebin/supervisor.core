module 'supervisor' ['behaviour_info'/1,
		     'check_childspecs'/1,
		     'code_change'/3,
		     'count_children'/1,
		     'delete_child'/2,
		     'handle_call'/3,
		     'handle_cast'/2,
		     'handle_info'/2,
		     'init'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'restart_child'/2,
		     'start_child'/2,
		     'start_link'/2,
		     'start_link'/3,
		     'terminate'/2,
		     'terminate_child'/2,
		     'try_again_restart'/2,
		     'which_children'/1]
    attributes [%% Line 21
		'behaviour' =
		    %% Line 21
		    ['gen_server'],
		%% Line 37
		'export_type' =
		    %% Line 37
		    [{'child_spec',0}|[{'startchild_ret',0}|[{'strategy',0}]]],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'child',{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'pid',[]}]]},[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'child_id',{'type',42,'term',[]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'mfargs',{'type',43,'tuple',[{'ann_type',43,[{'var',43,'M'}|[{'type',43,'module',[]}]]}|[{'ann_type',43,[{'var',43,'F'}|[{'type',43,'atom',[]}]]}|[{'ann_type',43,[{'var',43,'A'}|[{'type',43,'union',[{'type',43,'list',[{'type',43,'term',[]}]}|[{'atom',43,'undefined'}]]}]]}]]]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'modules',{'type',44,'union',[{'type',44,'list',[{'type',44,'module',[]}]}|[{'atom',44,'dynamic'}]]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'restart',{'type',45,'union',[{'atom',45,'permanent'}|[{'atom',45,'transient'}|[{'atom',45,'temporary'}]]]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'shutdown',{'type',46,'union',[{'atom',46,'brutal_kill'}|[{'type',46,'timeout',[]}]]},[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{'worker',{'type',47,'union',[{'atom',47,'worker'}|[{'atom',47,'supervisor'}]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'sup_name',{'type',48,'union',[{'type',48,'tuple',[{'atom',48,'local'}|[{'ann_type',48,[{'var',48,'Name'}|[{'type',48,'atom',[]}]]}]]}|[{'type',49,'tuple',[{'atom',49,'global'}|[{'ann_type',49,[{'var',49,'Name'}|[{'type',49,'atom',[]}]]}]]}|[{'type',50,'tuple',[{'atom',50,'via'}|[{'ann_type',50,[{'var',50,'Module'}|[{'type',50,'module',[]}]]}|[{'ann_type',50,[{'var',50,'Name'}|[{'type',50,'any',[]}]]}]]]}]]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'sup_ref',{'type',51,'union',[{'paren_type',51,[{'ann_type',51,[{'var',51,'Name'}|[{'type',51,'atom',[]}]]}]}|[{'type',52,'tuple',[{'ann_type',52,[{'var',52,'Name'}|[{'type',52,'atom',[]}]]}|[{'ann_type',52,[{'var',52,'Node'}|[{'type',52,'node',[]}]]}]]}|[{'type',53,'tuple',[{'atom',53,'global'}|[{'ann_type',53,[{'var',53,'Name'}|[{'type',53,'atom',[]}]]}]]}|[{'type',54,'tuple',[{'atom',54,'via'}|[{'ann_type',54,[{'var',54,'Module'}|[{'type',54,'module',[]}]]}|[{'ann_type',54,[{'var',54,'Name'}|[{'type',54,'any',[]}]]}]]]}|[{'type',55,'pid',[]}]]]]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'child_spec',{'type',56,'tuple',[{'ann_type',56,[{'var',56,'Id'}|[{'type',56,'child_id',[]}]]}|[{'ann_type',57,[{'var',57,'StartFunc'}|[{'type',57,'mfargs',[]}]]}|[{'ann_type',58,[{'var',58,'Restart'}|[{'type',58,'restart',[]}]]}|[{'ann_type',59,[{'var',59,'Shutdown'}|[{'type',59,'shutdown',[]}]]}|[{'ann_type',60,[{'var',60,'Type'}|[{'type',60,'worker',[]}]]}|[{'ann_type',61,[{'var',61,'Modules'}|[{'type',61,'modules',[]}]]}]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'strategy',{'type',63,'union',[{'atom',63,'one_for_all'}|[{'atom',63,'one_for_one'}|[{'atom',64,'rest_for_one'}|[{'atom',64,'simple_one_for_one'}]]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','child'},[{'typed_record_field',{'record_field',69,{'atom',69,'pid'},{'atom',69,'undefined'}},{'type',69,'union',[{'type',69,'child',[]}|[{'type',70,'tuple',[{'atom',70,'restarting'}|[{'type',70,'union',[{'type',70,'pid',[]}|[{'atom',70,'undefined'}]]}]]}|[{'type',71,'list',[{'type',71,'pid',[]}]}]]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'name'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'child_id',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'mfargs'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'mfargs',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'restart_type'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'restart',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shutdown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'shutdown',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'child_type'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'worker',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'modules'},{'nil',77}},{'type',77,'modules',[]}}]]]]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'child_rec',{'type',78,'record',[{'atom',78,'child'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','state'},[{'record_field',85,{'atom',85,'name'}}|[{'typed_record_field',{'record_field',86,{'atom',86,'strategy'}},{'type',86,'union',[{'atom',86,'undefined'}|[{'type',86,'strategy',[]}]]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'children'},{'nil',87}},{'type',87,'list',[{'type',87,'child_rec',[]}]}}|[{'typed_record_field',{'record_field',88,{'atom',88,'dynamics'}},{'type',88,'union',[{'atom',88,'undefined'}|[{'remote_type',88,[{'atom',88,'dict'}|[{'atom',88,'dict'}|[[{'type',88,'pid',[]}|[{'type',88,'list',[]}]]]]]}|[{'remote_type',88,[{'atom',88,'sets'}|[{'atom',88,'set'}|[[{'type',88,'pid',[]}]]]]}]]]}}|[{'typed_record_field',{'record_field',89,{'atom',89,'intensity'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',90,{'atom',90,'period'}},{'type',90,'union',[{'atom',90,'undefined'}|[{'type',90,'pos_integer',[]}]]}}|[{'record_field',91,{'atom',91,'restarts'},{'nil',91}}|[{'record_field',92,{'atom',92,'module'}}|[{'record_field',93,{'atom',93,'args'}}]]]]]]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'state',{'type',94,'record',[{'atom',94,'state'}]},[]}],
		%% Line 98
		'callback' =
		    %% Line 98
		    [{{'init',1},[{'type',98,'fun',[{'type',98,'product',[{'ann_type',98,[{'var',98,'Args'}|[{'type',98,'term',[]}]]}]}|[{'type',99,'union',[{'type',99,'tuple',[{'atom',99,'ok'}|[{'type',99,'tuple',[{'type',99,'tuple',[{'ann_type',99,[{'var',99,'RestartStrategy'}|[{'type',99,'strategy',[]}]]}|[{'ann_type',100,[{'var',100,'MaxR'}|[{'type',100,'non_neg_integer',[]}]]}|[{'ann_type',101,[{'var',101,'MaxT'}|[{'type',101,'non_neg_integer',[]}]]}]]]}|[{'type',102,'list',[{'ann_type',102,[{'var',102,'ChildSpec'}|[{'type',102,'child_spec',[]}]]}]}]]}]]}|[{'atom',103,'ignore'}]]}]]}]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'startlink_err',{'type',113,'union',[{'type',113,'tuple',[{'atom',113,'already_started'}|[{'type',113,'pid',[]}]]}|[{'type',114,'tuple',[{'atom',114,'shutdown'}|[{'type',114,'term',[]}]]}|[{'type',115,'term',[]}]]]},[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{'startlink_ret',{'type',116,'union',[{'type',116,'tuple',[{'atom',116,'ok'}|[{'type',116,'pid',[]}]]}|[{'atom',116,'ignore'}|[{'type',116,'tuple',[{'atom',116,'error'}|[{'type',116,'startlink_err',[]}]]}]]]},[]}],
		%% Line 118
		'spec' =
		    %% Line 118
		    [{{'start_link',2},[{'type',118,'bounded_fun',[{'type',118,'fun',[{'type',118,'product',[{'var',118,'Module'}|[{'var',118,'Args'}]]}|[{'type',118,'startlink_ret',[]}]]}|[[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Module'}|[{'type',119,'module',[]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Args'}|[{'type',120,'term',[]}]]]]}]]]]}]}],
		%% Line 124
		'spec' =
		    %% Line 124
		    [{{'start_link',3},[{'type',124,'bounded_fun',[{'type',124,'fun',[{'type',124,'product',[{'var',124,'SupName'}|[{'var',124,'Module'}|[{'var',124,'Args'}]]]}|[{'type',124,'startlink_ret',[]}]]}|[[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'SupName'}|[{'type',125,'sup_name',[]}]]]]}|[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Module'}|[{'type',126,'module',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Args'}|[{'type',127,'term',[]}]]]]}]]]]]}]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'startchild_err',{'type',135,'union',[{'atom',135,'already_present'}|[{'type',136,'tuple',[{'atom',136,'already_started'}|[{'ann_type',136,[{'var',136,'Child'}|[{'type',136,'child',[]}]]}]]}|[{'type',136,'term',[]}]]]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{'startchild_ret',{'type',137,'union',[{'type',137,'tuple',[{'atom',137,'ok'}|[{'ann_type',137,[{'var',137,'Child'}|[{'type',137,'child',[]}]]}]]}|[{'type',138,'tuple',[{'atom',138,'ok'}|[{'ann_type',138,[{'var',138,'Child'}|[{'type',138,'child',[]}]]}|[{'ann_type',138,[{'var',138,'Info'}|[{'type',138,'term',[]}]]}]]]}|[{'type',139,'tuple',[{'atom',139,'error'}|[{'type',139,'startchild_err',[]}]]}]]]},[]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'start_child',2},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'SupRef'}|[{'var',141,'ChildSpec'}]]}|[{'type',141,'startchild_ret',[]}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'SupRef'}|[{'type',142,'sup_ref',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'ChildSpec'}|[{'type',143,'union',[{'type',143,'child_spec',[]}|[{'paren_type',143,[{'ann_type',143,[{'var',143,'List'}|[{'type',143,'list',[{'type',143,'term',[]}]}]]}]}]]}]]]]}]]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'restart_child',2},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'SupRef'}|[{'var',147,'Id'}]]}|[{'var',147,'Result'}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'SupRef'}|[{'type',148,'sup_ref',[]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Id'}|[{'type',149,'child_id',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Result'}|[{'type',150,'union',[{'type',150,'tuple',[{'atom',150,'ok'}|[{'ann_type',150,[{'var',150,'Child'}|[{'type',150,'child',[]}]]}]]}|[{'type',151,'tuple',[{'atom',151,'ok'}|[{'ann_type',151,[{'var',151,'Child'}|[{'type',151,'child',[]}]]}|[{'ann_type',151,[{'var',151,'Info'}|[{'type',151,'term',[]}]]}]]]}|[{'type',152,'tuple',[{'atom',152,'error'}|[{'var',152,'Error'}]]}]]]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Error'}|[{'type',153,'union',[{'atom',153,'running'}|[{'atom',153,'restarting'}|[{'atom',153,'not_found'}|[{'atom',153,'simple_one_for_one'}|[{'type',154,'term',[]}]]]]]}]]]]}]]]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'delete_child',2},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'SupRef'}|[{'var',158,'Id'}]]}|[{'var',158,'Result'}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'SupRef'}|[{'type',159,'sup_ref',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Id'}|[{'type',160,'child_id',[]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Result'}|[{'type',161,'union',[{'atom',161,'ok'}|[{'type',161,'tuple',[{'atom',161,'error'}|[{'var',161,'Error'}]]}]]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Error'}|[{'type',162,'union',[{'atom',162,'running'}|[{'atom',162,'restarting'}|[{'atom',162,'not_found'}|[{'atom',162,'simple_one_for_one'}]]]]}]]]]}]]]]]]}]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'terminate_child',2},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'SupRef'}|[{'var',173,'Id'}]]}|[{'var',173,'Result'}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'SupRef'}|[{'type',174,'sup_ref',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Id'}|[{'type',175,'union',[{'type',175,'pid',[]}|[{'type',175,'child_id',[]}]]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Result'}|[{'type',176,'union',[{'atom',176,'ok'}|[{'type',176,'tuple',[{'atom',176,'error'}|[{'var',176,'Error'}]]}]]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Error'}|[{'type',177,'union',[{'atom',177,'not_found'}|[{'atom',177,'simple_one_for_one'}]]}]]]]}]]]]]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'which_children',1},[{'type',181,'bounded_fun',[{'type',181,'fun',[{'type',181,'product',[{'var',181,'SupRef'}]}|[{'type',181,'list',[{'type',181,'tuple',[{'var',181,'Id'}|[{'var',181,'Child'}|[{'var',181,'Type'}|[{'var',181,'Modules'}]]]]}]}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'SupRef'}|[{'type',182,'sup_ref',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Id'}|[{'type',183,'union',[{'type',183,'child_id',[]}|[{'atom',183,'undefined'}]]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Child'}|[{'type',184,'union',[{'type',184,'child',[]}|[{'atom',184,'restarting'}]]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Type'}|[{'type',185,'worker',[]}]]]]}|[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'Modules'}|[{'type',186,'modules',[]}]]]]}]]]]]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'count_children',1},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'SupRef'}]}|[{'var',190,'PropListOfCounts'}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'SupRef'}|[{'type',191,'sup_ref',[]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'PropListOfCounts'}|[{'type',192,'list',[{'var',192,'Count'}]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Count'}|[{'type',193,'union',[{'type',193,'tuple',[{'atom',193,'specs'}|[{'ann_type',193,[{'var',193,'ChildSpecCount'}|[{'type',193,'non_neg_integer',[]}]]}]]}|[{'type',194,'tuple',[{'atom',194,'active'}|[{'ann_type',194,[{'var',194,'ActiveProcessCount'}|[{'type',194,'non_neg_integer',[]}]]}]]}|[{'type',195,'tuple',[{'atom',195,'supervisors'}|[{'ann_type',195,[{'var',195,'ChildSupervisorCount'}|[{'type',195,'non_neg_integer',[]}]]}]]}|[{'type',196,'tuple',[{'atom',196,'workers'}|[{'ann_type',196,[{'var',196,'ChildWorkerCount'}|[{'type',196,'non_neg_integer',[]}]]}]]}]]]]}]]]]}]]]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'check_childspecs',1},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'ChildSpecs'}]}|[{'var',203,'Result'}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'ChildSpecs'}|[{'type',204,'list',[{'type',204,'child_spec',[]}]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Result'}|[{'type',205,'union',[{'atom',205,'ok'}|[{'type',205,'tuple',[{'atom',205,'error'}|[{'ann_type',205,[{'var',205,'Error'}|[{'type',205,'term',[]}]]}]]}]]}]]]]}]]]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'try_again_restart',2},[{'type',215,'bounded_fun',[{'type',215,'fun',[{'type',215,'product',[{'var',215,'SupRef'}|[{'var',215,'Child'}]]}|[{'atom',215,'ok'}]]}|[[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'SupRef'}|[{'type',216,'sup_ref',[]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Child'}|[{'type',217,'union',[{'type',217,'child_id',[]}|[{'type',217,'pid',[]}]]}]]]]}]]]]}]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'init_sup_name',{'type',230,'union',[{'type',230,'sup_name',[]}|[{'atom',230,'self'}]]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{'stop_rsn',{'type',232,'union',[{'type',232,'tuple',[{'atom',232,'shutdown'}|[{'type',232,'term',[]}]]}|[{'type',233,'tuple',[{'atom',233,'bad_return'}|[{'type',233,'tuple',[{'type',233,'module',[]}|[{'atom',233,'init'}|[{'type',233,'term',[]}]]]}]]}|[{'type',234,'tuple',[{'atom',234,'bad_start_spec'}|[{'type',234,'term',[]}]]}|[{'type',235,'tuple',[{'atom',235,'start_spec'}|[{'type',235,'term',[]}]]}|[{'type',236,'tuple',[{'atom',236,'supervisor_data'}|[{'type',236,'term',[]}]]}]]]]]},[]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'init',1},[{'type',238,'fun',[{'type',238,'product',[{'type',238,'tuple',[{'type',238,'init_sup_name',[]}|[{'type',238,'module',[]}|[{'type',238,'list',[{'type',238,'term',[]}]}]]]}]}|[{'type',239,'union',[{'type',239,'tuple',[{'atom',239,'ok'}|[{'type',239,'state',[]}]]}|[{'atom',239,'ignore'}|[{'type',239,'tuple',[{'atom',239,'stop'}|[{'type',239,'stop_rsn',[]}]]}]]]}]]}]}],
		%% Line 348
		'type' =
		    %% Line 348
		    [{'call',{'type',348,'union',[{'atom',348,'which_children'}|[{'atom',348,'count_children'}|[{'type',348,'tuple',[{'var',348,'_'}|[{'var',348,'_'}]]}]]]},[]}],
		%% Line 349
		'spec' =
		    %% Line 349
		    [{{'handle_call',3},[{'type',349,'fun',[{'type',349,'product',[{'type',349,'call',[]}|[{'type',349,'term',[]}|[{'type',349,'state',[]}]]]}|[{'type',349,'tuple',[{'atom',349,'reply'}|[{'type',349,'term',[]}|[{'type',349,'state',[]}]]]}]]}]}],
		%% Line 533
		'spec' =
		    %% Line 533
		    [{{'handle_cast',2},[{'type',533,'fun',[{'type',533,'product',[{'type',533,'tuple',[{'atom',533,'try_again_restart'}|[{'type',533,'union',[{'type',533,'child_id',[]}|[{'type',533,'pid',[]}]]}]]}|[{'type',533,'state',[]}]]}|[{'type',534,'union',[{'type',534,'tuple',[{'atom',534,'noreply'}|[{'type',534,'state',[]}]]}|[{'type',534,'tuple',[{'atom',534,'stop'}|[{'atom',534,'shutdown'}|[{'type',534,'state',[]}]]]}]]}]]}]}],
		%% Line 570
		'spec' =
		    %% Line 570
		    [{{'handle_info',2},[{'type',570,'fun',[{'type',570,'product',[{'type',570,'term',[]}|[{'type',570,'state',[]}]]}|[{'type',571,'union',[{'type',571,'tuple',[{'atom',571,'noreply'}|[{'type',571,'state',[]}]]}|[{'type',571,'tuple',[{'atom',571,'stop'}|[{'atom',571,'shutdown'}|[{'type',571,'state',[]}]]]}]]}]]}]}],
		%% Line 589
		'spec' =
		    %% Line 589
		    [{{'terminate',2},[{'type',589,'fun',[{'type',589,'product',[{'type',589,'term',[]}|[{'type',589,'state',[]}]]}|[{'atom',589,'ok'}]]}]}],
		%% Line 607
		'spec' =
		    %% Line 607
		    [{{'code_change',3},[{'type',607,'fun',[{'type',607,'product',[{'type',607,'term',[]}|[{'type',607,'state',[]}|[{'type',607,'term',[]}]]]}|[{'type',608,'union',[{'type',608,'tuple',[{'atom',608,'ok'}|[{'type',608,'state',[]}]]}|[{'type',608,'tuple',[{'atom',608,'error'}|[{'type',608,'term',[]}]]}]]}]]}]}]]
'start_link'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	%% Line 122
	call 'gen_server':'start_link'
	    ('supervisor', {'self',_cor1,_cor0}, [])
'start_link'/3 =
    %% Line 128
    fun (_cor2,_cor1,_cor0) ->
	%% Line 129
	call 'gen_server':'start_link'
	    (_cor2, 'supervisor', {_cor2,_cor1,_cor0}, [])
'start_child'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	%% Line 145
	apply 'call'/2
	    (_cor1, {'start_child',_cor0})
'restart_child'/2 =
    %% Line 155
    fun (_cor1,_cor0) ->
	%% Line 156
	apply 'call'/2
	    (_cor1, {'restart_child',_cor0})
'delete_child'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	%% Line 164
	apply 'call'/2
	    (_cor1, {'delete_child',_cor0})
'terminate_child'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	%% Line 179
	apply 'call'/2
	    (_cor1, {'terminate_child',_cor0})
'which_children'/1 =
    %% Line 187
    fun (_cor0) ->
	%% Line 188
	apply 'call'/2
	    (_cor0, 'which_children')
'count_children'/1 =
    %% Line 197
    fun (_cor0) ->
	%% Line 198
	apply 'call'/2
	    (_cor0, 'count_children')
'call'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	%% Line 201
	call 'gen_server':'call'
	    (_cor1, _cor0, 'infinity')
'check_childspecs'/1 =
    %% Line 206
    fun (_cor0) ->
	case _cor0 of
	  <ChildSpecs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 207
	      case apply 'check_startspec'/1
		       (ChildSpecs) of
		%% Line 208
		<{'ok',_cor3}> when 'true' ->
		    'ok'
		%% Line 209
		<Error> when 'true' ->
		    {'error',Error}
	      end
	  %% Line 211
	  <X> when 'true' ->
	      {'error',{'badarg',X}}
	end
'try_again_restart'/2 =
    %% Line 218
    fun (_cor1,_cor0) ->
	%% Line 219
	apply 'cast'/2
	    (_cor1, {'try_again_restart',_cor0})
'cast'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	%% Line 222
	call 'gen_server':'cast'
	    (_cor1, _cor0)
'init'/1 =
    %% Line 241
    fun (_cor0) ->
	case _cor0 of
	  <{SupName,Mod,Args}> when 'true' ->
	      do  %% Line 242
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 243
		  case call Mod:'init'
			   (Args) of
		    %% Line 244
		    <{'ok',{SupFlags,StartSpec}}> when 'true' ->
			%% Line 245
			case apply 'init_state'/4
				 (SupName, SupFlags, Mod, Args) of
			  %% Line 246
			  <{'ok',State = {'state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}}>
			      when call 'erlang':'=:='
				    (_cor11,
				     'simple_one_for_one') ->
			      %% Line 247
			      apply 'init_dynamic'/2
				  (State, StartSpec)
			  %% Line 248
			  <{'ok',State}> when 'true' ->
			      %% Line 249
			      apply 'init_children'/2
				  (State, StartSpec)
			  %% Line 250
			  <Error> when 'true' ->
			      %% Line 251
			      {'stop',{'supervisor_data',Error}}
			end
		    %% Line 253
		    <'ignore'> when 'true' ->
			%% Line 254
			'ignore'
		    %% Line 255
		    <Error> when 'true' ->
			%% Line 256
			{'stop',{'bad_return',{Mod,'init',Error}}}
		  end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'init_children'/2 =
    %% Line 259
    fun (_cor1,_cor0) ->
	%% Line 260
	( case _cor1 of
	    ( <( {'state',_rec0,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 261
		  case apply 'check_startspec'/1
			   (_cor0) of
		    %% Line 262
		    <{'ok',Children}> when 'true' ->
			%% Line 263
			case apply 'start_children'/2
				 (Children, _rec0) of
			  %% Line 264
			  <{'ok',NChildren}> when 'true' ->
			      let <_cor7> =
				  %% Line 265
				  call 'erlang':'setelement'
				      (4, _cor1, NChildren)
			      in  %% Line 265
				  {'ok',_cor7}
			  %% Line 266
			  <{'error',NChildren,Reason}> when 'true' ->
			      let <_X_> =
				  %% Line 267
				  apply 'terminate_children'/2
				      (NChildren, _rec0)
			      in  %% Line 268
				  {'stop',{'shutdown',Reason}}
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    %% Line 270
		    <Error> when 'true' ->
			%% Line 271
			{'stop',{'start_spec',Error}}
		  end
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'init_dynamic'/2 =
    %% Line 274
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,[StartSpec|[]]> when 'true' ->
	      %% Line 275
	      case apply 'check_startspec'/1
		       ([StartSpec|[]]) of
		%% Line 276
		<{'ok',Children}> when 'true' ->
		    %% Line 277
		    case State of
		      <{'state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
			  let <_cor4> =
			      call 'erlang':'setelement'
				  (4, State, Children)
			  in  {'ok',_cor4}
		      ( <_cor17> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 278
		<Error> when 'true' ->
		    %% Line 279
		    {'stop',{'start_spec',Error}}
	      end
	  %% Line 281
	  <_X_State,StartSpec> when 'true' ->
	      %% Line 282
	      {'stop',{'bad_start_spec',StartSpec}}
	end
'start_children'/2 =
    %% Line 294
    fun (_cor1,_cor0) ->
	apply 'start_children'/3
	    (_cor1, [], _cor0)
'start_children'/3 =
    %% Line 296
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Child|Chs],NChildren,SupName> when 'true' ->
	      %% Line 297
	      case apply 'do_start_child'/2
		       (SupName, Child) of
		%% Line 298
		<{'ok','undefined'}>
		    when ( try
			    ( case <> of
				( <>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_record'
									       -| ['compiler_generated'] )
					      (Child,
					       ( 'child'
						 -| ['compiler_generated'] ),
					       ( 8
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      let <_cor7> =
					  ( call 'erlang':'element'
						(5, Child)
					    -| ['compiler_generated'] )
				      in  ( call 'erlang':'=:='
						(_cor7, 'temporary')
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    %% Line 299
		    apply 'start_children'/3
			(Chs, NChildren, SupName)
		%% Line 300
		<{'ok',Pid}> when 'true' ->
		    %% Line 301
		    case Child of
		      <{'child',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
			  let <_cor11> =
			      call 'erlang':'setelement'
				  (2, Child, Pid)
			  in  apply 'start_children'/3
				  (Chs, [_cor11|NChildren], SupName)
		      ( <_cor30> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','child'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 302
		<{'ok',Pid,_X_Extra}> when 'true' ->
		    %% Line 303
		    case Child of
		      <{'child',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
			  let <_cor14> =
			      call 'erlang':'setelement'
				  (2, Child, Pid)
			  in  apply 'start_children'/3
				  (Chs, [_cor14|NChildren], SupName)
		      ( <_cor38> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','child'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 304
		<{'error',Reason}> when 'true' ->
		    do  %% Line 305
			apply 'report_error'/4
			    ('start_error', Reason, Child, SupName)
			let <_cor17> =
			    %% Line 306
			    call 'lists':'reverse'
				(Chs)
			in  let <_cor18> =
				%% Line 306
				call 'erlang':'++'
				    (_cor17, [Child|NChildren])
			    in  %% Line 307
				( case Child of
				    ( <( {'child',_cor39,_rec5,_cor40,_cor41,_cor42,_cor43,_cor44}
					 -| ['compiler_generated'] )> when 'true' ->
					  {'error',_cor18,{'failed_to_start_child',_rec5,Reason}}
				      -| ['compiler_generated'] )
				    ( <_cor45> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','child'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 309
	  <[],NChildren,_X_SupName> when 'true' ->
	      %% Line 310
	      {'ok',NChildren}
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'start_children',3}}] )
	    -| ['compiler_generated'] )
	end
'do_start_child'/2 =
    %% Line 312
    fun (_cor1,_cor0) ->
	%% Line 313
	case _cor0 of
	  <{'child',_cor15,_cor16,{M,F,Args},_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 314
		      call 'erlang':'apply'
			  (M, F, Args)
	      in  %% Line 314
		  case _cor3 of
		    %% Line 315
		    <{'ok',Pid}>
			when call 'erlang':'is_pid'
			      (Pid) ->
			let <_cor6> =
			    %% Line 316
			    call 'erlang':'setelement'
				(2, _cor0, Pid)
			in  do  %% Line 317
				apply 'report_progress'/2
				    (_cor6, _cor1)
				%% Line 318
				{'ok',Pid}
		    %% Line 319
		    <{'ok',Pid,Extra}>
			when call 'erlang':'is_pid'
			      (Pid) ->
			let <_cor10> =
			    %% Line 320
			    call 'erlang':'setelement'
				(2, _cor0, Pid)
			in  do  %% Line 321
				apply 'report_progress'/2
				    (_cor10, _cor1)
				%% Line 322
				{'ok',Pid,Extra}
		    %% Line 323
		    <'ignore'> when 'true' ->
			%% Line 324
			{'ok','undefined'}
		    %% Line 325
		    <{'error',What}> when 'true' ->
			{'error',What}
		    %% Line 326
		    <What> when 'true' ->
			{'error',What}
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'do_start_child_i'/3 =
    %% Line 329
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 330
		call 'erlang':'apply'
		    (_cor2, _cor1, _cor0)
	in  %% Line 330
	    case _cor3 of
	      %% Line 331
	      <{'ok',Pid}>
		  when call 'erlang':'is_pid'
			(Pid) ->
		  %% Line 332
		  {'ok',Pid}
	      %% Line 333
	      <{'ok',Pid,Extra}>
		  when call 'erlang':'is_pid'
			(Pid) ->
		  %% Line 334
		  {'ok',Pid,Extra}
	      %% Line 335
	      <'ignore'> when 'true' ->
		  %% Line 336
		  {'ok','undefined'}
	      %% Line 337
	      <{'error',Error}> when 'true' ->
		  %% Line 338
		  {'error',Error}
	      %% Line 339
	      <What> when 'true' ->
		  %% Line 340
		  {'error',What}
	    end
'handle_call'/3 =
    %% Line 351
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'start_child',EArgs},_X_From,State = {'state',_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193}>
	      when call 'erlang':'=:='
		    (_cor186,
		     'simple_one_for_one') ->
	      %% Line 353
	      case call 'erlang':'hd'
		       (_cor187) of
		<{'child',_cor203,_cor204,{M,F,A},_cor205,_cor206,_cor207,_cor208}> when 'true' ->
		    let <Args> =
			%% Line 354
			call 'erlang':'++'
			    (A, EArgs)
		    in  %% Line 355
			case apply 'do_start_child_i'/3
				 (M, F, Args) of
			  %% Line 356
			  <{'ok','undefined'}>
			      when call 'erlang':'=:='
				    (_cor205,
				     'temporary') ->
			      %% Line 357
			      {'reply',{'ok','undefined'},State}
			  %% Line 358
			  <{'ok',Pid}> when 'true' ->
			      let <NState> =
				  %% Line 359
				  apply 'save_dynamic_child'/4
				      (_cor205, Pid, Args, State)
			      in  %% Line 360
				  {'reply',{'ok',Pid},NState}
			  %% Line 361
			  <{'ok',Pid,Extra}> when 'true' ->
			      let <NState> =
				  %% Line 362
				  apply 'save_dynamic_child'/4
				      (_cor205, Pid, Args, State)
			      in  %% Line 363
				  {'reply',{'ok',Pid,Extra},NState}
			  %% Line 364
			  <What> when 'true' ->
			      %% Line 365
			      {'reply',What,State}
			end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 369
	  <{'terminate_child',Name},_X_From,State = {'state',_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231}>
	      when try
		    let <_cor27> =
			call 'erlang':'is_pid'
			    (Name)
		    in  let <_cor28> =
			    call 'erlang':'not'
				(_cor27)
			in  let <_cor34> =
				%% Line 370
				call 'erlang':'=:='
				    (_cor224, 'simple_one_for_one')
			    in  call 'erlang':'and'
				    (_cor28, _cor34)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 371
	      {'reply',{'error','simple_one_for_one'},State}
	  %% Line 373
	  <{'terminate_child',Name},_X_From,State> when 'true' ->
	      %% Line 374
	      ( case State of
		  ( <( {'state',_cor232,_rec11,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor38> =
			    call 'erlang':'=:='
				(_rec11, 'simple_one_for_one')
			in  case apply 'get_child'/3
				     (Name, State, _cor38) of
			      %% Line 375
			      <{'value',Child}> when 'true' ->
				  %% Line 376
				  case apply 'do_terminate'/2
					   (Child, _cor232) of
				    %% Line 377
				    <{'child',_cor250,_cor251,_cor252,RT,_cor253,_cor254,_cor255}>
					when let <_cor41> =
					      call 'erlang':'=:='
						  (RT, 'temporary')
					  in  let <_cor48> =
						  ( call 'erlang':'=:='
							(_rec11, 'simple_one_for_one')
						    -| ['compiler_generated'] )
					      in  call 'erlang':'or'
						      (_cor41, _cor48) ->
					let <_cor49> =
					    %% Line 378
					    apply 'state_del_child'/2
						(Child, State)
					in  %% Line 378
					    {'reply','ok',_cor49}
				    %% Line 379
				    <NChild> when 'true' ->
					let <_cor50> =
					    %% Line 380
					    apply 'replace_child'/2
						(NChild, State)
					in  %% Line 380
					    {'reply','ok',_cor50}
				  end
			      %% Line 382
			      <'false'> when 'true' ->
				  %% Line 383
				  {'reply',{'error','not_found'},State}
			      ( <_cor52> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor52})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor240> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 388
	  <{_X_Req,_X_Data},_X_From,State = {'state',_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264}>
	      when call 'erlang':'=:='
		    (_cor257,
		     'simple_one_for_one') ->
	      %% Line 389
	      {'reply',{'error','simple_one_for_one'},State}
	  %% Line 391
	  <{'start_child',ChildSpec},_X_From,State> when 'true' ->
	      %% Line 392
	      case apply 'check_childspec'/1
		       (ChildSpec) of
		%% Line 393
		<{'ok',Child}> when 'true' ->
		    %% Line 394
		    case apply 'handle_start_child'/2
			     (Child, State) of
		      <{Resp,NState}> when 'true' ->
			  %% Line 395
			  {'reply',Resp,NState}
		      ( <_cor59> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor59})
			-| ['compiler_generated'] )
		    end
		%% Line 396
		<What> when 'true' ->
		    %% Line 397
		    {'reply',{'error',What},State}
	      end
	  %% Line 400
	  <{'restart_child',Name},_X_From,State> when 'true' ->
	      %% Line 401
	      case apply 'get_child'/2
		       (Name, State) of
		%% Line 402
		<{'value',Child = {'child',_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271}}>
		    when call 'erlang':'=:='
			  (_cor265,
			   'undefined') ->
		    %% Line 403
		    ( case State of
			( <( {'state',_rec13,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 'do_start_child'/2
				       (_rec13, Child) of
				%% Line 404
				<{'ok',Pid}> when 'true' ->
				    let <_cor71> =
					%% Line 405
					call 'erlang':'setelement'
					    (2, Child, Pid)
				    in  let <NState> =
					    %% Line 405
					    apply 'replace_child'/2
						(_cor71, State)
					in  %% Line 406
					    {'reply',{'ok',Pid},NState}
				%% Line 407
				<{'ok',Pid,Extra}> when 'true' ->
				    let <_cor75> =
					%% Line 408
					call 'erlang':'setelement'
					    (2, Child, Pid)
				    in  let <NState> =
					    %% Line 408
					    apply 'replace_child'/2
						(_cor75, State)
					in  %% Line 409
					    {'reply',{'ok',Pid,Extra},NState}
				%% Line 410
				<Error> when 'true' ->
				    %% Line 411
				    {'reply',Error,State}
			      end
			  -| ['compiler_generated'] )
			( <_cor280> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 413
		<{'value',{'child',{'restarting',_cor297},_cor298,_cor299,_cor300,_cor301,_cor302,_cor303}}> when 'true' ->
		    %% Line 414
		    {'reply',{'error','restarting'},State}
		%% Line 415
		<{'value',_cor304}> when 'true' ->
		    %% Line 416
		    {'reply',{'error','running'},State}
		%% Line 417
		<_cor305> when 'true' ->
		    %% Line 418
		    {'reply',{'error','not_found'},State}
	      end
	  %% Line 421
	  <{'delete_child',Name},_X_From,State> when 'true' ->
	      %% Line 422
	      case apply 'get_child'/2
		       (Name, State) of
		%% Line 423
		<{'value',Child = {'child',_cor306,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312}}>
		    when call 'erlang':'=:='
			  (_cor306,
			   'undefined') ->
		    let <NState> =
			%% Line 424
			apply 'remove_child'/2
			    (Child, State)
		    in  %% Line 425
			{'reply','ok',NState}
		%% Line 426
		<{'value',{'child',{'restarting',_cor313},_cor314,_cor315,_cor316,_cor317,_cor318,_cor319}}> when 'true' ->
		    %% Line 427
		    {'reply',{'error','restarting'},State}
		%% Line 428
		<{'value',_cor320}> when 'true' ->
		    %% Line 429
		    {'reply',{'error','running'},State}
		%% Line 430
		<_cor321> when 'true' ->
		    %% Line 431
		    {'reply',{'error','not_found'},State}
	      end
	  %% Line 434
	  <'which_children',_X_From,State = {'state',_cor322 = _cor323,_cor324 = _cor325,_cor326 = [{'child',_cor327,_cor328,_cor329,'temporary',_cor330,%% Line 435
																			 CT,%% Line 436
																			    Mods}|%% Line 436
																				  []],_cor331 = _cor332,_cor333 = _cor334,_cor335 = _cor336,_cor337 = _cor338,_cor339 = _cor340,_cor341 = _cor342}>
	      when %% Line 437
		call 'erlang':'=:='
		    (_cor324,
		     'simple_one_for_one') ->
	      let <_cor99> =
		  %% Line 438
		  ( fun (_cor97) ->
			{'undefined',_cor97,CT,Mods}
		    -| [{'id',{0,0,'-handle_call/3-fun-0-'}}] )
	      in  let <_cor95> =
		      %% Line 439
		      apply 'dynamics_db'/2
			  ('temporary', _cor332)
		  in  let <_cor96> =
			  %% Line 439
			  call 'sets':'to_list'
			      (_cor95)
		      in  let <Reply> =
			      %% Line 438
			      call 'lists':'map'
				  (_cor99, _cor96)
			  in  %% Line 440
			      {'reply',Reply,State}
	  %% Line 442
	  <'which_children',_X_From,State = {'state',_cor352 = _cor353,_cor354 = _cor355,_cor356 = [{'child',_cor357,_cor358,_cor359,RType,_cor360,%% Line 443
																		   CT,%% Line 444
																		      Mods}|%% Line 444
																			    []],_cor361 = _cor362,_cor363 = _cor364,_cor365 = _cor366,_cor367 = _cor368,_cor369 = _cor370,_cor371 = _cor372}>
	      when %% Line 445
		call 'erlang':'=:='
		    (_cor354,
		     'simple_one_for_one') ->
	      let <_cor113> =
		  %% Line 446
		  ( fun (_cor111) ->
			case _cor111 of
			  <{{'restarting',_cor373},_cor374}> when 'true' ->
			      {'undefined','restarting',CT,Mods}
			  %% Line 447
			  <{Pid,_cor375}> when 'true' ->
			      {'undefined',Pid,CT,Mods}
			  ( <_cor112> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor112})
				  -| [{'function_name',{'-handle_call/3-fun-1-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_call/3-fun-1-'}}] )
	      in  let <_cor109> =
		      %% Line 448
		      apply 'dynamics_db'/2
			  (RType, _cor362)
		  in  let <_cor110> =
			  %% Line 448
			  call 'dict':'to_list'
			      (_cor109)
		      in  let <Reply> =
			      %% Line 446
			      call 'lists':'map'
				  (_cor113, _cor110)
			  in  %% Line 449
			      {'reply',Reply,State}
	  %% Line 451
	  <'which_children',_X_From,State> when 'true' ->
	      let <_cor119> =
		  %% Line 453
		  ( fun (_cor117) ->
			case _cor117 of
			  <{'child',{'restarting',_cor385},Name,_cor386,_cor387,_cor388,%% Line 454
											ChildType,%% Line 454
												  Mods}> when 'true' ->
			      %% Line 455
			      {Name,'restarting',ChildType,Mods}
			  %% Line 456
			  <{'child',Pid,Name,_cor389,_cor390,_cor391,%% Line 457
								     ChildType,%% Line 457
									       Mods}> when 'true' ->
			      %% Line 458
			      {Name,Pid,ChildType,Mods}
			  ( <_cor118> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor118})
				  -| [{'function_name',{'-handle_call/3-fun-2-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_call/3-fun-2-'}}] )
	      in  %% Line 460
		  ( case State of
		      ( <( {'state',_cor392,_cor393,_rec18,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Resp> =
				call 'lists':'map'
				    (_cor119, _rec18)
			    in  %% Line 461
				{'reply',Resp,State}
			-| ['compiler_generated'] )
		      ( <_cor400> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 464
	  <'count_children',_X_From,State = {'state',_cor401 = _cor402,_cor403 = _cor404,_cor405 = [{'child',_cor406,_cor407,_cor408,'temporary',_cor409,%% Line 465
																			 CT,_cor410}|%% Line 465
																				     []],_cor411 = _cor412,_cor413 = _cor414,_cor415 = _cor416,_cor417 = _cor418,_cor419 = _cor420,_cor421 = _cor422}>
	      when %% Line 466
		call 'erlang':'=:='
		    (_cor403,
		     'simple_one_for_one') ->
	      let <_cor141> =
		  %% Line 468
		  ( fun (_cor138,_cor137) ->
			case <_cor138,_cor137> of
			  <Pid,{Alive,Tot}> when 'true' ->
			      let <_cor132> =
				  %% Line 469
				  ( case <> of
				      ( <>
					    when call 'erlang':'is_pid'
						  (Pid) ->
					    call 'erlang':'is_process_alive'
						(Pid)
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 469
				  case _cor132 of
				    %% Line 470
				    <'true'> when 'true' ->
					let <_cor134> =
					    call 'erlang':'+'
						(Alive, 1)
					in  let <_cor133> =
						call 'erlang':'+'
						    (Tot, 1)
					    in  {_cor134,_cor133}
				    %% Line 471
				    <'false'> when 'true' ->
					let <_cor135> =
					    %% Line 472
					    call 'erlang':'+'
						(Tot, 1)
					in  %% Line 472
					    {Alive,_cor135}
				    ( <_cor136> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor136})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor140,_cor139> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor140,_cor139})
				  -| [{'function_name',{'-handle_call/3-fun-3-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_call/3-fun-3-'}}] )
	      in  let <_cor129> =
		      %% Line 474
		      apply 'dynamics_db'/2
			  ('temporary', _cor412)
		  in  %% Line 467
		      case %% Line 468
			   call 'sets':'fold'
			       (_cor141, %% Line 474
					 {0,0}, _cor129) of
			<{Active,Count}> when 'true' ->
			    let <_cor144> =
				%% Line 475
				case CT of
				  %% Line 476
				  <'supervisor'> when 'true' ->
				      [{'specs',1}|[{'active',Active}|%% Line 477
								      [{'supervisors',Count}|[{'workers',0}]]]]
				  %% Line 478
				  <'worker'> when 'true' ->
				      [{'specs',1}|[{'active',Active}|%% Line 479
								      [{'supervisors',0}|[{'workers',Count}|[]]]]]
				  ( <_cor143> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor143})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 481
				{'reply',_cor144,State}
			( <_cor142> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor142})
			  -| ['compiler_generated'] )
		      end
	  %% Line 483
	  <'count_children',_X_From,State = {'state',_cor432 = _cor433,_cor434 = _cor435,_cor436 = [{'child',_cor437,_cor438,_cor439,RType,_cor440,%% Line 484
																		   CT,_cor441}|%% Line 484
																			       []],_cor442 = _cor443,_cor444 = _cor445,_cor446 = _cor447,_cor448 = _cor449,_cor450 = _cor451,_cor452 = _cor453}>
	      when %% Line 485
		call 'erlang':'=:='
		    (_cor434,
		     'simple_one_for_one') ->
	      let <_cor168> =
		  %% Line 487
		  ( fun (_cor164,_cor163,_cor162) ->
			case <_cor164,_cor163,_cor162> of
			  <Pid,_X_Val,{Alive,Tot}> when 'true' ->
			      let <_cor157> =
				  %% Line 488
				  ( case <> of
				      ( <>
					    when call 'erlang':'is_pid'
						  (Pid) ->
					    call 'erlang':'is_process_alive'
						(Pid)
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 488
				  case _cor157 of
				    %% Line 489
				    <'true'> when 'true' ->
					let <_cor159> =
					    %% Line 490
					    call 'erlang':'+'
						(Alive, 1)
					in  let <_cor158> =
						%% Line 490
						call 'erlang':'+'
						    (Tot, 1)
					    in  %% Line 490
						{_cor159,_cor158}
				    %% Line 491
				    <'false'> when 'true' ->
					let <_cor160> =
					    %% Line 492
					    call 'erlang':'+'
						(Tot, 1)
					in  %% Line 492
					    {Alive,_cor160}
				    ( <_cor161> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor161})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor167,_cor166,_cor165> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor167,_cor166,_cor165})
				  -| [{'function_name',{'-handle_call/3-fun-4-',3}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_call/3-fun-4-'}}] )
	      in  let <_cor154> =
		      %% Line 494
		      apply 'dynamics_db'/2
			  (RType, _cor443)
		  in  %% Line 486
		      case %% Line 487
			   call 'dict':'fold'
			       (_cor168, %% Line 494
					 {0,0}, _cor154) of
			<{Active,Count}> when 'true' ->
			    let <_cor171> =
				%% Line 495
				case CT of
				  %% Line 496
				  <'supervisor'> when 'true' ->
				      [{'specs',1}|[{'active',Active}|%% Line 497
								      [{'supervisors',Count}|[{'workers',0}]]]]
				  %% Line 498
				  <'worker'> when 'true' ->
				      [{'specs',1}|[{'active',Active}|%% Line 499
								      [{'supervisors',0}|[{'workers',Count}|[]]]]]
				  ( <_cor170> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor170})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 501
				{'reply',_cor171,State}
			( <_cor169> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor169})
			  -| ['compiler_generated'] )
		      end
	  %% Line 503
	  <'count_children',_X_From,State> when 'true' ->
	      let <_cor179> =
		  %% Line 506
		  ( fun (_cor176,_cor175) ->
			%% Line 507
			apply 'count_child'/2
			    (_cor176, _cor175)
		    -| [{'id',{0,0,'-handle_call/3-fun-5-'}}] )
	      in  %% Line 508
		  ( case State of
		      ( <( {'state',_cor463,_cor464,_rec21,_cor465,_cor466,_cor467,_cor468,_cor469,_cor470}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'lists':'foldl'
				     (_cor179, {0,0,0,0}, _rec21) of
			      <{Specs,Active,Supers,Workers}> when 'true' ->
				  let <Reply> =
				      %% Line 511
				      [{'specs',Specs}|[{'active',Active}|%% Line 512
									  [{'supervisors',Supers}|[{'workers',Workers}|[]]]]]
				  in  %% Line 513
				      {'reply',Reply,State}
			      ( <_cor180> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor180})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor471> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor184,_cor183,_cor182> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor184,_cor183,_cor182})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'count_child'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'child',Pid,_cor22,_cor23,_cor24,_cor25,'worker',_cor26},%% Line 517
								     {Specs,Active,Supers,Workers}> when 'true' ->
	      let <_cor4> =
		  %% Line 518
		  ( case <> of
		      ( <>
			    when call 'erlang':'is_pid'
				  (Pid) ->
			    call 'erlang':'is_process_alive'
				(Pid)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 518
		  case _cor4 of
		    %% Line 519
		    <'true'> when 'true' ->
			let <_cor7> =
			    call 'erlang':'+'
				(Specs, 1)
			in  let <_cor6> =
				call 'erlang':'+'
				    (Active, 1)
			    in  let <_cor5> =
				    call 'erlang':'+'
					(Workers, 1)
				in  {_cor7,_cor6,Supers,_cor5}
		    %% Line 520
		    <'false'> when 'true' ->
			let <_cor9> =
			    call 'erlang':'+'
				(Specs, 1)
			in  let <_cor8> =
				call 'erlang':'+'
				    (Workers, 1)
			    in  {_cor9,Active,Supers,_cor8}
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 522
	  <{'child',Pid,_cor27,_cor28,_cor29,_cor30,'supervisor',_cor31},%% Line 523
									 {Specs,Active,Supers,Workers}> when 'true' ->
	      let <_cor13> =
		  %% Line 524
		  ( case <> of
		      ( <>
			    when call 'erlang':'is_pid'
				  (Pid) ->
			    call 'erlang':'is_process_alive'
				(Pid)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 524
		  case _cor13 of
		    %% Line 525
		    <'true'> when 'true' ->
			let <_cor16> =
			    call 'erlang':'+'
				(Specs, 1)
			in  let <_cor15> =
				call 'erlang':'+'
				    (Active, 1)
			    in  let <_cor14> =
				    call 'erlang':'+'
					(Supers, 1)
				in  {_cor16,_cor15,_cor14,Workers}
		    %% Line 526
		    <'false'> when 'true' ->
			let <_cor18> =
			    call 'erlang':'+'
				(Specs, 1)
			in  let <_cor17> =
				call 'erlang':'+'
				    (Supers, 1)
			    in  {_cor18,Active,_cor17,Workers}
		    ( <_cor19> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor19})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'count_child',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 536
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'try_again_restart',Pid},State = {'state',_cor32 = _cor33,_cor34 = _cor35,_cor36 = [Child|[]],_cor37 = _cor38,_cor39 = _cor40,_cor41 = _cor42,_cor43 = _cor44,_cor45 = _cor46,_cor47 = _cor48}>
	      when %% Line 537
		call 'erlang':'=:='
		    (_cor34,
		     'simple_one_for_one') ->
	      %% Line 538
	      ( case Child of
		  ( <( {'child',_cor49,_cor50,_cor51,_rec22,_cor52,_cor53,_cor54}
		       -| ['compiler_generated'] )> when 'true' ->
			let <RPid> =
			    %% Line 539
			    apply 'restarting'/1
				(Pid)
			in  let <_cor14> =
				%% Line 540
				apply 'dynamics_db'/2
				    (_rec22, _cor38)
			    in  %% Line 540
				case apply 'dynamic_child_args'/2
					 (RPid, _cor14) of
				  %% Line 541
				  <{'ok',Args}> when 'true' ->
				      %% Line 542
				      case _cor51 of
					<{M,F,_cor72}> when 'true' ->
					    let <_rec25> = {%% Line 543
						 M,%% Line 543
						   F,%% Line 543
						     Args}
					    in  let <_cor20> =
						    %% Line 543
						    call 'erlang':'setelement'
							(4, Child, _rec25)
						in  let <_cor22> =
							%% Line 543
							call 'erlang':'setelement'
							    (2, _cor20, RPid)
						    in  %% Line 544
							case apply 'restart'/2
								 (_cor22, State) of
							  %% Line 545
							  <{'ok',State1}> when 'true' ->
							      %% Line 546
							      {'noreply',State1}
							  %% Line 547
							  <{'shutdown',State1}> when 'true' ->
							      %% Line 548
							      {'stop','shutdown',State1}
							  ( <_cor24> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor24})
							    -| ['compiler_generated'] )
							end
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor17})
					  -| ['compiler_generated'] )
				      end
				  %% Line 550
				  <'error'> when 'true' ->
				      %% Line 551
				      {'noreply',State}
				  ( <_cor25> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor25})
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_cor55> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 554
	  <{'try_again_restart',Name},State> when 'true' ->
	      %% Line 555
	      ( case State of
		  ( <( {'state',_cor81,_cor82,_rec27,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keyfind'
				 (Name, 3, _rec27) of
			  %% Line 556
			  <Child = {'child',{'restarting',_cor90},_cor91,_cor92,_cor93,_cor94,_cor95,_cor96}> when 'true' ->
			      %% Line 557
			      case apply 'restart'/2
				       (Child, State) of
				%% Line 558
				<{'ok',State1}> when 'true' ->
				    %% Line 559
				    {'noreply',State1}
				%% Line 560
				<{'shutdown',State1}> when 'true' ->
				    %% Line 561
				    {'stop','shutdown',State1}
				( <_cor28> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor28})
				  -| ['compiler_generated'] )
			      end
			  %% Line 563
			  <_cor97> when 'true' ->
			      %% Line 564
			      {'noreply',State}
			end
		    -| ['compiler_generated'] )
		  ( <_cor89> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30})
		  -| [{'function_name',{'handle_cast',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 573
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'EXIT',Pid,Reason},State> when 'true' ->
	      %% Line 574
	      case apply 'restart_child'/3
		       (Pid, Reason, State) of
		%% Line 575
		<{'ok',State1}> when 'true' ->
		    %% Line 576
		    {'noreply',State1}
		%% Line 577
		<{'shutdown',State1}> when 'true' ->
		    %% Line 578
		    {'stop','shutdown',State1}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 581
	  <Msg,State> when 'true' ->
	      do  %% Line 582
		  call 'error_logger':'error_msg'
		      ([83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 583
																																		       [Msg|[]])
		  %% Line 584
		  {'noreply',State}
	end
'terminate'/2 =
    %% Line 591
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Reason,State = {'state',_cor21 = _cor22,_cor23 = _cor24,_cor25 = [Child|[]],_cor26 = _cor27,_cor28 = _cor29,_cor30 = _cor31,_cor32 = _cor33,_cor34 = _cor35,_cor36 = _cor37}>
	      when call 'erlang':'=:='
		    (_cor23,
		     'simple_one_for_one') ->
	      %% Line 592
	      ( case Child of
		  ( <( {'child',_cor38,_cor39,_cor40,_rec28,_cor41,_cor42,_cor43}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor14> =
			    apply 'dynamics_db'/2
				(_rec28, _cor27)
			in  apply 'terminate_dynamic_children'/3
				(Child, _cor14, _cor22)
		    -| ['compiler_generated'] )
		  ( <_cor44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 595
	  <_X_Reason,State> when 'true' ->
	      %% Line 596
	      ( case State of
		  ( <( {'state',_cor63,_cor64,_rec31,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'terminate_children'/2
			    (_rec31, _cor63)
		    -| ['compiler_generated'] )
		  ( <_cor71> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 610
    fun (_cor2,_cor1,_cor0) ->
	%% Line 611
	( case _cor1 of
	    ( <( {'state',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_rec33,_cor28}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call _rec33:'init'
			   (_cor28) of
		    %% Line 612
		    <{'ok',{SupFlags,StartSpec}}> when 'true' ->
			let <_cor7> =
			    catch
				%% Line 613
				apply 'check_flags'/1
				    (SupFlags)
			in  %% Line 613
			    case _cor7 of
			      %% Line 614
			      <'ok'> when 'true' ->
				  %% Line 615
				  case SupFlags of
				    <{Strategy,MaxIntensity,Period}> when 'true' ->
					let <_cor10> =
					    %% Line 618
					    call 'erlang':'setelement'
						(7, _cor1, Period)
					in  let <_cor11> =
						%% Line 617
						call 'erlang':'setelement'
						    (6, _cor10, MaxIntensity)
					    in  let <_cor13> =
						    %% Line 616
						    call 'erlang':'setelement'
							(3, _cor11, Strategy)
						in  %% Line 616
						    apply 'update_childspec'/2
							(_cor13, %% Line 619
								 StartSpec)
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 620
			      <Error> when 'true' ->
				  %% Line 621
				  {'error',Error}
			    end
		    %% Line 623
		    <'ignore'> when 'true' ->
			%% Line 624
			{'ok',_cor1}
		    %% Line 625
		    <Error> when 'true' ->
			%% Line 626
			Error
		  end
	      -| ['compiler_generated'] )
	    ( <_cor29> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_flags'/1 =
    %% Line 629
    fun (_cor0) ->
	case _cor0 of
	  <{Strategy,MaxIntensity,Period}> when 'true' ->
	      do  %% Line 630
		  apply 'validStrategy'/1
		      (Strategy)
		  do  %% Line 631
		      apply 'validIntensity'/1
			  (MaxIntensity)
		      do  %% Line 632
			  apply 'validPeriod'/1
			      (Period)
			  %% Line 633
			  'ok'
	  %% Line 634
	  <What> when 'true' ->
	      %% Line 635
	      {'bad_flags',What}
	end
'update_childspec'/2 =
    %% Line 637
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},StartSpec>
	      when call 'erlang':'=:='
		    (_cor24,
		     'simple_one_for_one') ->
	      %% Line 638
	      case apply 'check_startspec'/1
		       (StartSpec) of
		%% Line 639
		<{'ok',[Child|[]]}> when 'true' ->
		    let <_rec36> =
			%% Line 640
			[Child|[]]
		    in  let <_cor11> =
			    %% Line 640
			    call 'erlang':'setelement'
				(4, State, _rec36)
			in  %% Line 640
			    {'ok',_cor11}
		%% Line 641
		<Error> when 'true' ->
		    %% Line 642
		    {'error',Error}
	      end
	  %% Line 644
	  <State,StartSpec> when 'true' ->
	      %% Line 645
	      case apply 'check_startspec'/1
		       (StartSpec) of
		%% Line 646
		<{'ok',Children}> when 'true' ->
		    %% Line 647
		    ( case State of
			( <( {'state',_cor42,_cor43,_rec38,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <NewC> =
				  %% Line 648
				  apply 'update_childspec1'/3
				      (_rec38, Children, [])
			      in  let <_cor19> =
				      %% Line 649
				      call 'erlang':'setelement'
					  (4, State, NewC)
				  in  %% Line 649
				      {'ok',_cor19}
			  -| ['compiler_generated'] )
			( <_cor50> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 650
		<Error> when 'true' ->
		    %% Line 651
		    {'error',Error}
	      end
	end
'update_childspec1'/3 =
    %% Line 654
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Child|OldC],Children,KeepOld> when 'true' ->
	      %% Line 655
	      case apply 'update_chsp'/2
		       (Child, Children) of
		%% Line 656
		<{'ok',NewChildren}> when 'true' ->
		    %% Line 657
		    apply 'update_childspec1'/3
			(OldC, NewChildren, KeepOld)
		%% Line 658
		<'false'> when 'true' ->
		    %% Line 659
		    apply 'update_childspec1'/3
			(OldC, Children, [Child|KeepOld])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 661
	  <[],Children,KeepOld> when 'true' ->
	      let <_cor4> =
		  %% Line 663
		  call 'erlang':'++'
		      (Children, KeepOld)
	      in  %% Line 663
		  call 'lists':'reverse'
		      (_cor4)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'update_childspec1',3}}] )
	    -| ['compiler_generated'] )
	end
'update_chsp'/2 =
    %% Line 665
    fun (_cor1,_cor0) ->
	let <_cor22> =
	    %% Line 666
	    ( fun (_cor20) ->
		  case _cor20 of
		    <Ch = {'child',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}>
			when ( try
				( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (_cor1,
						   ( 'child'
						     -| ['compiler_generated'] ),
						   ( 8
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor13> =
					      ( call 'erlang':'element'
						    (3, _cor1)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'=:='
						    (_cor13, _cor27)
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 667
			( case _cor1 of
			    ( <( {'child',_rec42,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'setelement'
				      (2, Ch, _rec42)
			      -| ['compiler_generated'] )
			    ( <_cor39> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','child'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 668
		    <Ch> when 'true' ->
			%% Line 669
			Ch
		  end
	      -| [{'id',{0,0,'-update_chsp/2-fun-0-'}}] )
	in  %% Line 666
	    case call 'lists':'map'
		     (_cor22, _cor0) of
	      %% Line 672
	      <_cor48>
		  when call 'erlang':'=:='
			(_cor48,
			 _cor0) ->
		  %% Line 673
		  'false'
	      %% Line 674
	      <NewC> when 'true' ->
		  %% Line 675
		  {'ok',NewC}
	    end
'handle_start_child'/2 =
    %% Line 682
    fun (_cor1,_cor0) ->
	%% Line 683
	( case _cor1 of
	    ( <( {'child',_cor32,_rec43,_cor33,_cor34,_cor35,_cor36,_cor37}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'get_child'/2
			   (_rec43, _cor0) of
		    %% Line 684
		    <'false'> when 'true' ->
			%% Line 685
			( case _cor0 of
			    ( <( {'state',_rec44,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
				 -| ['compiler_generated'] )> when 'true' ->
				  case apply 'do_start_child'/2
					   (_rec44, _cor1) of
				    %% Line 686
				    <{'ok','undefined'}>
					when ( call 'erlang':'=:='
						(_cor34,
						 'temporary')
					    -| ['compiler_generated'] ) ->
					%% Line 687
					{{'ok','undefined'},_cor0}
				    %% Line 688
				    <{'ok',Pid}> when 'true' ->
					let <_cor14> =
					    %% Line 689
					    call 'erlang':'setelement'
						(2, _cor1, Pid)
					in  let <_cor15> =
						%% Line 689
						apply 'save_child'/2
						    (_cor14, _cor0)
					    in  %% Line 689
						{{'ok',Pid},_cor15}
				    %% Line 690
				    <{'ok',Pid,Extra}> when 'true' ->
					let <_cor18> =
					    %% Line 691
					    call 'erlang':'setelement'
						(2, _cor1, Pid)
					in  let <_cor19> =
						%% Line 691
						apply 'save_child'/2
						    (_cor18, _cor0)
					    in  %% Line 691
						{{'ok',Pid,Extra},_cor19}
				    %% Line 692
				    <{'error',What}> when 'true' ->
					%% Line 693
					{{'error',{What,_cor1}},_cor0}
				    ( <_cor20> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor20})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor47> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 695
		    <{'value',OldChild = {'child',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}}>
			when call 'erlang':'is_pid'
			      (_cor64) ->
			%% Line 696
			{{'error',{'already_started',_cor64}},_cor0}
		    %% Line 697
		    <{'value',_X_OldChild}> when 'true' ->
			%% Line 698
			{{'error','already_present'},_cor0}
		    ( <_cor29> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor29})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor38> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','child'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'restart_child'/3 =
    %% Line 706
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pid,Reason,State = {'state',_cor32 = _cor33,_cor34 = _cor35,_cor36 = [Child|[]],_cor37 = _cor38,_cor39 = _cor40,_cor41 = _cor42,_cor43 = _cor44,_cor45 = _cor46,_cor47 = _cor48}>
	      when call 'erlang':'=:='
		    (_cor34,
		     'simple_one_for_one') ->
	      %% Line 707
	      ( case Child of
		  ( <( {'child',_cor49,_cor50,_cor51,_rec48,_cor52,_cor53,_cor54}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor14> =
			    %% Line 708
			    apply 'dynamics_db'/2
				(_rec48, _cor38)
			in  %% Line 708
			    case apply 'dynamic_child_args'/2
				     (Pid, _cor14) of
			      %% Line 709
			      <{'ok',Args}> when 'true' ->
				  %% Line 710
				  case _cor51 of
				    <{M,F,_cor72}> when 'true' ->
					let <_rec51> = {%% Line 711
					     M,%% Line 711
					       F,%% Line 711
						 Args}
					in  let <_cor20> =
						%% Line 711
						call 'erlang':'setelement'
						    (4, Child, _rec51)
					    in  let <_cor22> =
						    %% Line 711
						    call 'erlang':'setelement'
							(2, _cor20, Pid)
						in  %% Line 712
						    apply 'do_restart'/4
							(_rec48, Reason, _cor22, State)
				    ( <_cor17> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor17})
				      -| ['compiler_generated'] )
				  end
			      %% Line 713
			      <'error'> when 'true' ->
				  %% Line 714
				  {'ok',State}
			      ( <_cor24> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor24})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor55> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 717
	  <Pid,Reason,State> when 'true' ->
	      %% Line 718
	      ( case State of
		  ( <( {'state',_cor81,_cor82,_rec53,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 719
			case call 'lists':'keyfind'
				 (Pid, 2, _rec53) of
			  %% Line 720
			  <Child = {'child',_cor90,_cor91,_cor92,RestartType,_cor93,_cor94,_cor95}> when 'true' ->
			      %% Line 721
			      apply 'do_restart'/4
				  (RestartType, Reason, Child, State)
			  %% Line 722
			  <'false'> when 'true' ->
			      %% Line 723
			      {'ok',State}
			  ( <_cor28> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor28})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor89> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'do_restart'/4 =
    %% Line 726
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'permanent',Reason,Child,State> when 'true' ->
	      %% Line 727
	      ( case State of
		  ( <( {'state',_rec54,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'report_error'/4
				('child_terminated', Reason, Child, _rec54)
			    %% Line 728
			    apply 'restart'/2
				(Child, State)
		    -| ['compiler_generated'] )
		  ( <_cor26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 729
	  <_cor27,'normal',Child,State> when 'true' ->
	      let <NState> =
		  %% Line 730
		  apply 'state_del_child'/2
		      (Child, State)
	      in  %% Line 731
		  {'ok',NState}
	  %% Line 732
	  <_cor28,'shutdown',Child,State> when 'true' ->
	      let <NState> =
		  %% Line 733
		  apply 'state_del_child'/2
		      (Child, State)
	      in  %% Line 734
		  {'ok',NState}
	  %% Line 735
	  <_cor29,{'shutdown',_X_Term},Child,State> when 'true' ->
	      let <NState> =
		  %% Line 736
		  apply 'state_del_child'/2
		      (Child, State)
	      in  %% Line 737
		  {'ok',NState}
	  %% Line 738
	  <'transient',Reason,Child,State> when 'true' ->
	      %% Line 739
	      ( case State of
		  ( <( {'state',_rec55,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'report_error'/4
				('child_terminated', Reason, Child, _rec55)
			    %% Line 740
			    apply 'restart'/2
				(Child, State)
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 741
	  <'temporary',Reason,Child,State> when 'true' ->
	      %% Line 742
	      ( case State of
		  ( <( {'state',_rec56,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'report_error'/4
				('child_terminated', Reason, Child, _rec56)
			    let <NState> =
				%% Line 743
				apply 'state_del_child'/2
				    (Child, State)
			    in  %% Line 744
				{'ok',NState}
		    -| ['compiler_generated'] )
		  ( <_cor47> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'do_restart',4}}] )
	    -| ['compiler_generated'] )
	end
'restart'/2 =
    %% Line 746
    fun (_cor1,_cor0) ->
	%% Line 747
	case apply 'add_restart'/1
		 (_cor0) of
	  %% Line 748
	  <{'ok',NState}> when 'true' ->
	      %% Line 749
	      ( case NState of
		  ( <( {'state',_cor25,_rec57,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'restart'/3
				 (_rec57, _cor1, NState) of
			  %% Line 750
			  <{'try_again',NState2}> when 'true' ->
			      let <_cor12> =
				  %% Line 756
				  case <> of
				    <>
					when ( try
						( case <> of
						    ( <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'is_record'
												   -| ['compiler_generated'] )
								  (_cor0,
								   ( 'state'
								     -| ['compiler_generated'] ),
								   ( 10
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ) ->
							  let <_cor8> =
							      ( call 'erlang':'element'
								    (3, _cor0)
								-| ['compiler_generated'] )
							  in  ( call 'erlang':'=:='
								    (_cor8, 'simple_one_for_one')
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					    -| ['compiler_generated'] ) ->
					( case _cor1 of
					    ( <( {'child',_rec58,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
						 -| ['compiler_generated'] )> when 'true' ->
						  _rec58
					      -| ['compiler_generated'] )
					    ( <_cor40> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','child'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 757
				    <> when 'true' ->
					( case _cor1 of
					    ( <( {'child',_cor41,_rec59,_cor42,_cor43,_cor44,_cor45,_cor46}
						 -| ['compiler_generated'] )> when 'true' ->
						  _rec59
					      -| ['compiler_generated'] )
					    ( <_cor47> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','child'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      in  let <_cor14> =
				      %% Line 762
				      call 'erlang':'self'
					  ()
				  in  %% Line 759
				      case call 'timer':'apply_after'
					       (0, %% Line 760
						   'supervisor', %% Line 761
								 'try_again_restart', %% Line 762
										      [_cor14|[_cor12|[]]]) of
					<{'ok',_X_TRef}> when 'true' ->
					    %% Line 763
					    {'ok',NState2}
					( <_cor15> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor15})
					  -| ['compiler_generated'] )
				      end
			  %% Line 764
			  <{'try_again',NState2,{'child',_cor48,ChName,_cor49,_cor50,_cor51,_cor52,_cor53}}> when 'true' ->
			      let <_cor16> =
				  %% Line 768
				  call 'erlang':'self'
				      ()
			      in  %% Line 765
				  case call 'timer':'apply_after'
					   (0, %% Line 766
					       'supervisor', %% Line 767
							     'try_again_restart', %% Line 768
										  [_cor16|[ChName|[]]]) of
				    <{'ok',_X_TRef}> when 'true' ->
					%% Line 769
					{'ok',NState2}
				    ( <_cor17> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor17})
				      -| ['compiler_generated'] )
				  end
			  %% Line 770
			  <Other> when 'true' ->
			      %% Line 771
			      Other
			end
		    -| ['compiler_generated'] )
		  ( <_cor33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 773
	  <{'terminate',NState}> when 'true' ->
	      %% Line 775
	      ( case _cor0 of
		  ( <( {'state',_rec60,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'report_error'/4
				('shutdown', 'reached_max_restart_intensity', _cor1, _rec60)
			    let <_cor21> =
				%% Line 776
				apply 'remove_child'/2
				    (_cor1, NState)
			    in  %% Line 776
				{'shutdown',_cor21}
		    -| ['compiler_generated'] )
		  ( <_cor62> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor22> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor22})
	    -| ['compiler_generated'] )
	end
'restart'/3 =
    %% Line 779
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'simple_one_for_one',Child,State> when 'true' ->
	      %% Line 780
	      case Child of
		<{'child',OldPid,_cor140,{M,F,A},_cor141,_cor142,_cor143,_cor144}> when 'true' ->
		    %% Line 782
		    ( case State of
			( <( {'state',_cor152,_cor153,_cor154,_rec62,_cor155,_cor156,_cor157,_cor158,_cor159}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor8> =
				  apply 'dynamics_db'/2
				      (_cor141, _rec62)
			      in  let <Dynamics> =
				      call 'dict':'erase'
					  (OldPid, _cor8)
				  in  %% Line 783
				      case apply 'do_start_child_i'/3
					       (M, F, A) of
					%% Line 784
					<{'ok',Pid}> when 'true' ->
					    let <_rec63> =
						%% Line 785
						call 'dict':'store'
						    (Pid, A, Dynamics)
					    in  let <_cor13> =
						    %% Line 785
						    call 'erlang':'setelement'
							(5, State, _rec63)
						in  %% Line 786
						    {'ok',_cor13}
					%% Line 787
					<{'ok',Pid,_X_Extra}> when 'true' ->
					    let <_rec65> =
						%% Line 788
						call 'dict':'store'
						    (Pid, A, Dynamics)
					    in  let <_cor18> =
						    %% Line 788
						    call 'erlang':'setelement'
							(5, State, _rec65)
						in  %% Line 789
						    {'ok',_cor18}
					%% Line 790
					<{'error',Error}> when 'true' ->
					    let <_cor20> =
						%% Line 791
						apply 'restarting'/1
						    (OldPid)
					    in  let <_rec67> =
						    %% Line 791
						    call 'dict':'store'
							(_cor20, A, %% Line 792
								    Dynamics)
						in  let <_cor24> =
							%% Line 791
							call 'erlang':'setelement'
							    (5, State, _rec67)
						    in  do  %% Line 793
							    apply 'report_error'/4
								('start_error', Error, Child, _cor152)
							    %% Line 794
							    {'try_again',_cor24}
					( <_cor28> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor28})
					  -| ['compiler_generated'] )
				      end
			  -| ['compiler_generated'] )
			( <_cor160> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 796
	  <'one_for_one',Child,State> when 'true' ->
	      %% Line 797
	      ( case Child of
		  ( <( {'child',_rec70,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 798
			( case State of
			    ( <( {'state',_rec71,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214}
				 -| ['compiler_generated'] )> when 'true' ->
				  case apply 'do_start_child'/2
					   (_rec71, Child) of
				    %% Line 799
				    <{'ok',Pid}> when 'true' ->
					let <_cor36> =
					    %% Line 800
					    call 'erlang':'setelement'
						(2, Child, Pid)
					in  let <NState> =
						%% Line 800
						apply 'replace_child'/2
						    (_cor36, State)
					    in  %% Line 801
						{'ok',NState}
				    %% Line 802
				    <{'ok',Pid,_X_Extra}> when 'true' ->
					let <_cor40> =
					    %% Line 803
					    call 'erlang':'setelement'
						(2, Child, Pid)
					in  let <NState> =
						%% Line 803
						apply 'replace_child'/2
						    (_cor40, State)
					    in  %% Line 804
						{'ok',NState}
				    %% Line 805
				    <{'error',Reason}> when 'true' ->
					let <_rec74> =
					    %% Line 806
					    apply 'restarting'/1
						(_rec70)
					in  let <_cor45> =
						%% Line 806
						call 'erlang':'setelement'
						    (2, Child, _rec74)
					    in  let <NState> =
						    %% Line 806
						    apply 'replace_child'/2
							(_cor45, State)
						in  do  %% Line 807
							apply 'report_error'/4
							    ('start_error', Reason, Child, _rec71)
							%% Line 808
							{'try_again',NState}
				    ( <_cor49> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor49})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor215> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor206> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 810
	  <'rest_for_one',Child,State> when 'true' ->
	      %% Line 811
	      ( case Child of
		  ( <( {'child',_rec77,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254}
		       -| ['compiler_generated'] )> when 'true' ->
			( case State of
			    ( <( {'state',_cor256,_cor257,_rec78,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263}
				 -| ['compiler_generated'] )> when 'true' ->
				  case apply 'split_child'/2
					   (_rec77, _rec78) of
				    <{ChAfter,ChBefore}> when 'true' ->
					let <ChAfter2> =
					    %% Line 812
					    apply 'terminate_children'/2
						(ChAfter, _cor256)
					in  %% Line 813
					    case apply 'start_children'/2
						     (ChAfter2, _cor256) of
					      %% Line 814
					      <{'ok',ChAfter3}> when 'true' ->
						  let <_rec81> =
						      %% Line 815
						      call 'erlang':'++'
							  (ChAfter3, ChBefore)
						  in  let <_cor63> =
							  %% Line 815
							  call 'erlang':'setelement'
							      (4, State, _rec81)
						      in  %% Line 815
							  {'ok',_cor63}
					      %% Line 816
					      <{'error',ChAfter3,{'failed_to_start_child',ChName,_X_Reason}}>
						  when %% Line 817
						    ( call 'erlang':'=:='
							  (ChName,
							   _cor249)
						      -| ['compiler_generated'] ) ->
						  let <_rec83> =
						      %% Line 818
						      apply 'restarting'/1
							  (_rec77)
						  in  let <_cor75> =
							  %% Line 818
							  call 'erlang':'setelement'
							      (2, Child, _rec83)
						      in  let <_rec86> =
							      %% Line 819
							      call 'erlang':'++'
								  (ChAfter3, ChBefore)
							  in  let <_cor80> =
								  %% Line 819
								  call 'erlang':'setelement'
								      (4, State, _rec86)
							      in  let <_cor82> =
								      %% Line 820
								      apply 'replace_child'/2
									  (_cor75, _cor80)
								  in  %% Line 820
								      {'try_again',_cor82}
					      %% Line 821
					      <{'error',ChAfter3,{'failed_to_start_child',ChName,_X_Reason}}> when 'true' ->
						  let <NChild> =
						      %% Line 822
						      call 'lists':'keyfind'
							  (ChName, 3, ChAfter3)
						  in  %% Line 823
						      case NChild of
							<{'child',_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324}> when 'true' ->
							    let <_cor86> =
								call 'erlang':'setelement'
								    (2, NChild, {'restarting','undefined'})
							    in  let <_rec89> =
								    %% Line 824
								    call 'erlang':'++'
									(ChAfter3, ChBefore)
								in  let <_cor91> =
									%% Line 824
									call 'erlang':'setelement'
									    (4, State, _rec89)
								    in  let <_cor93> =
									    %% Line 825
									    apply 'replace_child'/2
										(_cor86, _cor91)
									in  %% Line 825
									    {'try_again',_cor93,_cor86}
							( <_cor325> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','child'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
					      ( <_cor94> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor94})
						-| ['compiler_generated'] )
					    end
				    ( <_cor54> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor54})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor264> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor255> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 827
	  <'one_for_all',Child,State> when 'true' ->
	      %% Line 828
	      ( case Child of
		  ( <( {'child',_rec91,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341}
		       -| ['compiler_generated'] )> when 'true' ->
			( case State of
			    ( <( {'state',_cor343,_cor344,_rec92,_cor345,_cor346,_cor347,_cor348,_cor349,_cor350}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Children1> =
				      apply 'del_child'/2
					  (_rec91, _rec92)
				  in  let <Children2> =
					  %% Line 829
					  apply 'terminate_children'/2
					      (Children1, _cor343)
				      in  %% Line 830
					  case apply 'start_children'/2
						   (Children2, _cor343) of
					    %% Line 831
					    <{'ok',NChs}> when 'true' ->
						let <_cor107> =
						    %% Line 832
						    call 'erlang':'setelement'
							(4, State, NChs)
						in  %% Line 832
						    {'ok',_cor107}
					    %% Line 833
					    <{'error',NChs,{'failed_to_start_child',ChName,_X_Reason}}>
						when %% Line 834
						  ( call 'erlang':'=:='
							(ChName,
							 _cor336)
						    -| ['compiler_generated'] ) ->
						let <_rec96> =
						    %% Line 835
						    apply 'restarting'/1
							(_rec91)
						in  let <_cor119> =
							%% Line 835
							call 'erlang':'setelement'
							    (2, Child, _rec96)
						    in  let <_cor123> =
							    %% Line 836
							    call 'erlang':'setelement'
								(4, State, NChs)
							in  let <_cor125> =
								%% Line 837
								apply 'replace_child'/2
								    (_cor119, _cor123)
							    in  %% Line 837
								{'try_again',_cor125}
					    %% Line 838
					    <{'error',NChs,{'failed_to_start_child',ChName,_X_Reason}}> when 'true' ->
						let <NChild> =
						    %% Line 839
						    call 'lists':'keyfind'
							(ChName, 3, NChs)
						in  %% Line 840
						    case NChild of
						      <{'child',_cor405,_cor406,_cor407,_cor408,_cor409,_cor410,_cor411}> when 'true' ->
							  let <_cor129> =
							      call 'erlang':'setelement'
								  (2, NChild, {'restarting','undefined'})
							  in  let <_cor133> =
								  %% Line 841
								  call 'erlang':'setelement'
								      (4, State, NChs)
							      in  let <_cor135> =
								      %% Line 842
								      apply 'replace_child'/2
									  (_cor129, _cor133)
								  in  %% Line 842
								      {'try_again',_cor135,_cor129}
						      ( <_cor412> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','child'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
					    ( <_cor136> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor136})
					      -| ['compiler_generated'] )
					  end
			      -| ['compiler_generated'] )
			    ( <_cor351> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor342> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor139,_cor138,_cor137> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor139,_cor138,_cor137})
		  -| [{'function_name',{'restart',3}}] )
	    -| ['compiler_generated'] )
	end
'restarting'/1 =
    %% Line 845
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      {'restarting',Pid}
	  %% Line 846
	  <RPid> when 'true' ->
	      RPid
	end
'terminate_children'/2 =
    %% Line 855
    fun (_cor1,_cor0) ->
	%% Line 856
	apply 'terminate_children'/3
	    (_cor1, _cor0, [])
'terminate_children'/3 =
    %% Line 862
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Child = {'child',_cor8,_cor9,_cor10,'temporary',_cor11,_cor12,_cor13}|Children],SupName,Res> when 'true' ->
	      let <_X_> =
		  %% Line 863
		  apply 'do_terminate'/2
		      (Child, SupName)
	      in  %% Line 864
		  apply 'terminate_children'/3
		      (Children, SupName, Res)
	  %% Line 865
	  <[Child|Children],SupName,Res> when 'true' ->
	      let <NChild> =
		  %% Line 866
		  apply 'do_terminate'/2
		      (Child, SupName)
	      in  %% Line 867
		  apply 'terminate_children'/3
		      (Children, SupName, [NChild|Res])
	  %% Line 868
	  <[],_X_SupName,Res> when 'true' ->
	      %% Line 869
	      Res
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'terminate_children',3}}] )
	    -| ['compiler_generated'] )
	end
'do_terminate'/2 =
    %% Line 871
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Child = {'child',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},SupName>
	      when call 'erlang':'is_pid'
		    (_cor25) ->
	      do  %% Line 872
		  case apply 'shutdown'/2
			   (_cor25, _cor29) of
		    %% Line 873
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 875
		    <{'error','normal'}>
			when call 'erlang':'=/='
			      (_cor28,
			       'permanent') ->
			'ok'
		    %% Line 877
		    <{'error',OtherReason}> when 'true' ->
			%% Line 878
			apply 'report_error'/4
			    ('shutdown_error', OtherReason, Child, SupName)
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
		  %% Line 880
		  call 'erlang':'setelement'
		      (2, Child, 'undefined')
	  %% Line 881
	  <Child,_X_SupName> when 'true' ->
	      %% Line 882
	      case Child of
		<{'child',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}> when 'true' ->
		    call 'erlang':'setelement'
			(2, Child, 'undefined')
		( <_cor61> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','child'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'shutdown'/2 =
    %% Line 894
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,'brutal_kill'> when 'true' ->
	      %% Line 895
	      case apply 'monitor_child'/1
		       (Pid) of
		%% Line 896
		<'ok'> when 'true' ->
		    do  %% Line 897
			call 'erlang':'exit'
			    (Pid, 'kill')
			%% Line 898
			receive
			  %% Line 899
			  <{'DOWN',_X_MRef,'process',_cor6,'killed'}>
			      when call 'erlang':'=:='
				    (_cor6,
				     Pid) ->
			      %% Line 900
			      'ok'
			  %% Line 901
			  <{'DOWN',_X_MRef,'process',_cor7,OtherReason}>
			      when call 'erlang':'=:='
				    (_cor7,
				     Pid) ->
			      %% Line 902
			      {'error',OtherReason}
			after 'infinity' ->
			  'true'
		%% Line 904
		<{'error',Reason}> when 'true' ->
		    %% Line 905
		    {'error',Reason}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 907
	  <Pid,Time> when 'true' ->
	      %% Line 908
	      case apply 'monitor_child'/1
		       (Pid) of
		%% Line 909
		<'ok'> when 'true' ->
		    do  %% Line 910
			call 'erlang':'exit'
			    (Pid, 'shutdown')
			%% Line 911
			receive
			  %% Line 912
			  <{'DOWN',_X_MRef,'process',_cor8,'shutdown'}>
			      when call 'erlang':'=:='
				    (_cor8,
				     Pid) ->
			      %% Line 913
			      'ok'
			  %% Line 914
			  <{'DOWN',_X_MRef,'process',_cor9,OtherReason}>
			      when call 'erlang':'=:='
				    (_cor9,
				     Pid) ->
			      %% Line 915
			      {'error',OtherReason}
			after %% Line 916
			      Time ->
			  do  %% Line 917
			      call 'erlang':'exit'
				  (Pid, 'kill')
			      %% Line 918
			      receive
				%% Line 919
				<{'DOWN',_X_MRef,'process',_cor10,OtherReason}>
				    when call 'erlang':'=:='
					  (_cor10,
					   Pid) ->
				    %% Line 920
				    {'error',OtherReason}
			      after 'infinity' ->
				'true'
		%% Line 923
		<{'error',Reason}> when 'true' ->
		    %% Line 924
		    {'error',Reason}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'monitor_child'/1 =
    %% Line 928
    fun (_cor0) ->
	do  %% Line 934
	    call 'erlang':'monitor'
		('process', _cor0)
	    do  %% Line 935
		call 'erlang':'unlink'
		    (_cor0)
		%% Line 937
		receive
		  %% Line 940
		  <{'EXIT',_cor2,Reason}>
		      when call 'erlang':'=:='
			    (_cor2,
			     _cor0) ->
		      %% Line 941
		      receive
			%% Line 942
			<{'DOWN',_cor3,'process',_cor4,_cor5}>
			    when call 'erlang':'=:='
				  (_cor4,
				   _cor0) ->
			    %% Line 943
			    {'error',Reason}
		      after 'infinity' ->
			'true'
		after %% Line 945
		      0 ->
		  %% Line 952
		  'ok'
'terminate_dynamic_children'/3 =
    %% Line 968
    fun (_cor2,_cor1,_cor0) ->
	%% Line 969
	case apply 'monitor_dynamic_children'/2
		 (_cor2, _cor1) of
	  <{Pids,EStack0}> when 'true' ->
	      let <Sz> =
		  %% Line 970
		  call 'sets':'size'
		      (Pids)
	      in  %% Line 971
		  ( case _cor2 of
		      ( <( {'child',_cor40,_cor41,_cor42,_cor43,_rec106,_cor44,_cor45}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor25> =
				case _rec106 of
				  %% Line 972
				  <'brutal_kill'> when 'true' ->
				      let <_cor11> =
					  %% Line 973
					  ( fun (_cor8,_cor7) ->
						call 'erlang':'exit'
						    (_cor8, 'kill')
					    -| [{'id',{0,0,'-terminate_dynamic_children/3-fun-0-'}}] )
				      in  do  %% Line 973
					      call 'sets':'fold'
						  (_cor11, 'ok', Pids)
					      %% Line 974
					      apply 'wait_dynamic_children'/5
						  (_cor2, Pids, Sz, 'undefined', EStack0)
				  %% Line 975
				  <'infinity'> when 'true' ->
				      let <_cor16> =
					  %% Line 976
					  ( fun (_cor13,_cor12) ->
						call 'erlang':'exit'
						    (_cor13, 'shutdown')
					    -| [{'id',{0,0,'-terminate_dynamic_children/3-fun-1-'}}] )
				      in  do  %% Line 976
					      call 'sets':'fold'
						  (_cor16, 'ok', Pids)
					      %% Line 977
					      apply 'wait_dynamic_children'/5
						  (_cor2, Pids, Sz, 'undefined', EStack0)
				  %% Line 978
				  <Time> when 'true' ->
				      let <_cor21> =
					  %% Line 979
					  ( fun (_cor18,_cor17) ->
						call 'erlang':'exit'
						    (_cor18, 'shutdown')
					    -| [{'id',{0,0,'-terminate_dynamic_children/3-fun-2-'}}] )
				      in  do  %% Line 979
					      call 'sets':'fold'
						  (_cor21, 'ok', Pids)
					      let <_cor22> =
						  %% Line 980
						  call 'erlang':'self'
						      ()
					      in  let <TRef> =
						      %% Line 980
						      call 'erlang':'start_timer'
							  (Time, _cor22, 'kill')
						  in  %% Line 981
						      apply 'wait_dynamic_children'/5
							  (_cor2, Pids, Sz, TRef, EStack0)
				end
			    in  let <_cor36> =
				    %% Line 984
				    ( fun (_cor32,_cor31,_cor30) ->
					  let <_cor29> =
					      %% Line 986
					      call 'erlang':'setelement'
						  (2, _cor2, _cor31)
					  in  %% Line 985
					      apply 'report_error'/4
						  ('shutdown_error', _cor32, _cor29, _cor0)
				      -| [{'id',{0,0,'-terminate_dynamic_children/3-fun-3-'}}] )
				in  %% Line 984
				    call 'dict':'fold'
					(_cor36, %% Line 987
						 'ok', _cor25)
			-| ['compiler_generated'] )
		      ( <_cor46> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','child'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'monitor_dynamic_children'/2 =
    %% Line 990
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'child',_cor26,_cor27,_cor28,'temporary',_cor29,_cor30,_cor31},Dynamics> when 'true' ->
	      let <_cor11> =
		  %% Line 991
		  ( fun (_cor8,_cor7) ->
			case <_cor8,_cor7> of
			  <P,{Pids,EStack}> when 'true' ->
			      %% Line 992
			      case apply 'monitor_child'/1
				       (P) of
				%% Line 993
				<'ok'> when 'true' ->
				    let <_cor4> =
					%% Line 994
					call 'sets':'add_element'
					    (P, Pids)
				    in  %% Line 994
					{_cor4,EStack}
				%% Line 995
				<{'error','normal'}> when 'true' ->
				    %% Line 996
				    {Pids,EStack}
				%% Line 997
				<{'error',Reason}> when 'true' ->
				    let <_cor5> =
					%% Line 998
					call 'dict':'append'
					    (Reason, P, EStack)
				    in  %% Line 998
					{Pids,_cor5}
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor10,_cor9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor10,_cor9})
				  -| [{'function_name',{'-monitor_dynamic_children/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-monitor_dynamic_children/2-fun-0-'}}] )
	      in  let <_cor3> =
		      %% Line 1000
		      call 'sets':'new'
			  ()
		  in  let <_cor2> =
			  %% Line 1000
			  call 'dict':'new'
			      ()
		      in  %% Line 991
			  call 'sets':'fold'
			      (_cor11, %% Line 1000
				       {_cor3,_cor2}, %% Line 1000
						      Dynamics)
	  %% Line 1001
	  <{'child',_cor32,_cor33,_cor34,RType,_cor35,_cor36,_cor37},Dynamics> when 'true' ->
	      let <_cor23> =
		  %% Line 1002
		  ( fun (_cor19,_cor18,_cor17) ->
			case <_cor19,_cor18,_cor17> of
			  <P,_cor38,{Pids,EStack}>
			      when call 'erlang':'is_pid'
				    (P) ->
			      %% Line 1003
			      case apply 'monitor_child'/1
				       (P) of
				%% Line 1004
				<'ok'> when 'true' ->
				    let <_cor14> =
					%% Line 1005
					call 'sets':'add_element'
					    (P, Pids)
				    in  %% Line 1005
					{_cor14,EStack}
				%% Line 1006
				<{'error','normal'}>
				    when call 'erlang':'=/='
					  (RType,
					   'permanent') ->
				    %% Line 1007
				    {Pids,EStack}
				%% Line 1008
				<{'error',Reason}> when 'true' ->
				    let <_cor15> =
					%% Line 1009
					call 'dict':'append'
					    (Reason, P, EStack)
				    in  %% Line 1009
					{Pids,_cor15}
				( <_cor16> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor16})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1011
			  <{'restarting',_cor39},_cor40,{Pids,EStack}> when 'true' ->
			      %% Line 1012
			      {Pids,EStack}
			  ( <_cor22,_cor21,_cor20> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor22,_cor21,_cor20})
				  -| [{'function_name',{'-monitor_dynamic_children/2-fun-1-',3}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-monitor_dynamic_children/2-fun-1-'}}] )
	      in  let <_cor13> =
		      %% Line 1013
		      call 'sets':'new'
			  ()
		  in  let <_cor12> =
			  %% Line 1013
			  call 'dict':'new'
			      ()
		      in  %% Line 1002
			  call 'dict':'fold'
			      (_cor23, %% Line 1013
				       {_cor13,_cor12}, %% Line 1013
							Dynamics)
	  ( <_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24})
		  -| [{'function_name',{'monitor_dynamic_children',2}}] )
	    -| ['compiler_generated'] )
	end
'wait_dynamic_children'/5 =
    %% Line 1016
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Child,_X_Pids,0,'undefined',EStack> when 'true' ->
	      %% Line 1017
	      EStack
	  %% Line 1018
	  <_X_Child,_X_Pids,0,TRef,EStack> when 'true' ->
	      let <_X_> =
		  %% Line 1021
		  ( call 'erlang':'cancel_timer'
			(TRef)
		    -| ['result_not_wanted'] )
	      in  %% Line 1022
		  receive
		    %% Line 1023
		    <{'timeout',_cor29,'kill'}>
			when call 'erlang':'=:='
			      (_cor29,
			       TRef) ->
			%% Line 1024
			EStack
		  after %% Line 1025
			0 ->
		    %% Line 1026
		    EStack
	  %% Line 1028
	  <Child = {'child',_cor30,_cor31,_cor32,_cor33,'brutal_kill',_cor34,_cor35},Pids,Sz,%% Line 1029
											     TRef,%% Line 1029
												  EStack> when 'true' ->
	      %% Line 1030
	      receive
		%% Line 1031
		<{'DOWN',_X_MRef,'process',Pid,'killed'}> when 'true' ->
		    let <_cor7> =
			%% Line 1032
			call 'sets':'del_element'
			    (Pid, Pids)
		    in  let <_cor6> =
			    %% Line 1032
			    call 'erlang':'-'
				(Sz, 1)
			in  %% Line 1032
			    apply 'wait_dynamic_children'/5
				(Child, _cor7, _cor6, %% Line 1033
						      TRef, %% Line 1033
							    EStack)
		%% Line 1035
		<{'DOWN',_X_MRef,'process',Pid,Reason}> when 'true' ->
		    let <_cor10> =
			%% Line 1036
			call 'sets':'del_element'
			    (Pid, Pids)
		    in  let <_cor9> =
			    %% Line 1036
			    call 'erlang':'-'
				(Sz, 1)
			in  let <_cor8> =
				%% Line 1037
				call 'dict':'append'
				    (Reason, Pid, EStack)
			    in  %% Line 1036
				apply 'wait_dynamic_children'/5
				    (Child, _cor10, _cor9, %% Line 1037
							   TRef, _cor8)
	      after 'infinity' ->
		'true'
	  %% Line 1039
	  <Child = {'child',_cor36,_cor37,_cor38,RType,_cor39,_cor40,_cor41},Pids,Sz,%% Line 1040
										     TRef,%% Line 1040
											  EStack> when 'true' ->
	      %% Line 1041
	      receive
		%% Line 1042
		<{'DOWN',_X_MRef,'process',Pid,'shutdown'}> when 'true' ->
		    let <_cor12> =
			%% Line 1043
			call 'sets':'del_element'
			    (Pid, Pids)
		    in  let <_cor11> =
			    %% Line 1043
			    call 'erlang':'-'
				(Sz, 1)
			in  %% Line 1043
			    apply 'wait_dynamic_children'/5
				(Child, _cor12, _cor11, %% Line 1044
							TRef, %% Line 1044
							      EStack)
		%% Line 1046
		<{'DOWN',_X_MRef,'process',Pid,'normal'}>
		    when call 'erlang':'=/='
			  (RType,
			   'permanent') ->
		    let <_cor14> =
			%% Line 1047
			call 'sets':'del_element'
			    (Pid, Pids)
		    in  let <_cor13> =
			    %% Line 1047
			    call 'erlang':'-'
				(Sz, 1)
			in  %% Line 1047
			    apply 'wait_dynamic_children'/5
				(Child, _cor14, _cor13, %% Line 1048
							TRef, %% Line 1048
							      EStack)
		%% Line 1050
		<{'DOWN',_X_MRef,'process',Pid,Reason}> when 'true' ->
		    let <_cor17> =
			%% Line 1051
			call 'sets':'del_element'
			    (Pid, Pids)
		    in  let <_cor16> =
			    %% Line 1051
			    call 'erlang':'-'
				(Sz, 1)
			in  let <_cor15> =
				%% Line 1052
				call 'dict':'append'
				    (Reason, Pid, EStack)
			    in  %% Line 1051
				apply 'wait_dynamic_children'/5
				    (Child, _cor17, _cor16, %% Line 1052
							    TRef, _cor15)
		%% Line 1054
		<{'timeout',_cor42,'kill'}>
		    when call 'erlang':'=:='
			  (_cor42,
			   TRef) ->
		    let <_cor22> =
			%% Line 1055
			( fun (_cor19,_cor18) ->
			      call 'erlang':'exit'
				  (_cor19, 'kill')
			  -| [{'id',{0,0,'-wait_dynamic_children/5-fun-0-'}}] )
		    in  do  %% Line 1055
			    call 'sets':'fold'
				(_cor22, 'ok', Pids)
			    let <_cor23> =
				%% Line 1056
				call 'erlang':'-'
				    (Sz, 1)
			    in  %% Line 1056
				apply 'wait_dynamic_children'/5
				    (Child, Pids, _cor23, 'undefined', EStack)
	      after 'infinity' ->
		'true'
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'wait_dynamic_children',5}}] )
	    -| ['compiler_generated'] )
	end
'save_child'/2 =
    %% Line 1068
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Child = {'child',_cor14,_cor15,%% Line 1069
					  {M,F,_cor16},'temporary',_cor17,_cor18,_cor19},State = %% Line 1069
												 {'state',_cor20,_cor21,Children,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
	      let <_rec110> = {%% Line 1070
		   M,%% Line 1070
		     F,%% Line 1070
		       'undefined'}
	      in  let <_cor5> =
		      %% Line 1070
		      call 'erlang':'setelement'
			  (4, Child, _rec110)
		  in  let <_rec108> =
			  %% Line 1070
			  [_cor5|Children]
		      in  %% Line 1070
			  call 'erlang':'setelement'
			      (4, State, _rec108)
	  %% Line 1071
	  <Child,State = {'state',_cor46,_cor47,Children,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
	      let <_rec112> =
		  %% Line 1072
		  [Child|Children]
	      in  %% Line 1072
		  call 'erlang':'setelement'
		      (4, State, _rec112)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'save_child',2}}] )
	    -| ['compiler_generated'] )
	end
'save_dynamic_child'/4 =
    %% Line 1074
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'temporary',Pid,_cor16,State = {'state',_cor17,_cor18,_cor19,Dynamics,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      let <_cor4> =
		  %% Line 1075
		  apply 'dynamics_db'/2
		      ('temporary', Dynamics)
	      in  let <_rec114> =
		      %% Line 1075
		      call 'sets':'add_element'
			  (Pid, _cor4)
		  in  %% Line 1075
		      call 'erlang':'setelement'
			  (5, State, _rec114)
	  %% Line 1076
	  <RestartType,Pid,Args,State = {'state',_cor35,_cor36,_cor37,Dynamics,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
	      let <_cor8> =
		  %% Line 1077
		  apply 'dynamics_db'/2
		      (RestartType, Dynamics)
	      in  let <_rec116> =
		      %% Line 1077
		      call 'dict':'store'
			  (Pid, Args, _cor8)
		  in  %% Line 1077
		      call 'erlang':'setelement'
			  (5, State, _rec116)
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'save_dynamic_child',4}}] )
	    -| ['compiler_generated'] )
	end
'dynamics_db'/2 =
    %% Line 1079
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'temporary','undefined'> when 'true' ->
	      %% Line 1080
	      call 'sets':'new'
		  ()
	  %% Line 1081
	  <_cor4,'undefined'> when 'true' ->
	      %% Line 1082
	      call 'dict':'new'
		  ()
	  %% Line 1083
	  <_cor5,Dynamics> when 'true' ->
	      %% Line 1084
	      Dynamics
	end
'dynamic_child_args'/2 =
    %% Line 1086
    fun (_cor1,_cor0) ->
	%% Line 1087
	case call 'sets':'is_set'
		 (_cor0) of
	  %% Line 1088
	  <'true'> when 'true' ->
	      %% Line 1089
	      {'ok','undefined'}
	  %% Line 1090
	  <'false'> when 'true' ->
	      %% Line 1091
	      call 'dict':'find'
		  (_cor1, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'state_del_child'/2 =
    %% Line 1094
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'child',Pid,_cor35,_cor36,'temporary',_cor37,_cor38,_cor39},State = {'state',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}>
	      when call 'erlang':'=:='
		    (_cor41,
		     'simple_one_for_one') ->
	      let <_cor10> =
		  %% Line 1095
		  apply 'dynamics_db'/2
		      ('temporary', _cor43)
	      in  let <NDynamics> =
		      %% Line 1095
		      call 'sets':'del_element'
			  (Pid, _cor10)
		  in  %% Line 1096
		      call 'erlang':'setelement'
			  (5, State, NDynamics)
	  %% Line 1097
	  <{'child',Pid,_cor68,_cor69,RType,_cor70,_cor71,_cor72},State = {'state',_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}>
	      when call 'erlang':'=:='
		    (_cor74,
		     'simple_one_for_one') ->
	      let <_cor22> =
		  %% Line 1098
		  apply 'dynamics_db'/2
		      (RType, _cor76)
	      in  let <NDynamics> =
		      %% Line 1098
		      call 'dict':'erase'
			  (Pid, _cor22)
		  in  %% Line 1099
		      call 'erlang':'setelement'
			  (5, State, NDynamics)
	  %% Line 1100
	  <Child,State> when 'true' ->
	      %% Line 1101
	      ( case Child of
		  ( <( {'child',_cor101,_rec122,_cor102,_cor103,_cor104,_cor105,_cor106}
		       -| ['compiler_generated'] )> when 'true' ->
			( case State of
			    ( <( {'state',_cor108,_cor109,_rec123,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <NChildren> =
				      apply 'del_child'/2
					  (_rec122, _rec123)
				  in  %% Line 1102
				      call 'erlang':'setelement'
					  (4, State, NChildren)
			      -| ['compiler_generated'] )
			    ( <_cor116> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor107> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'del_child'/2 =
    %% Line 1104
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[Ch = {'child',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}|Chs]>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor42, Name)
		in  let <_cor10> =
			call 'erlang':'=:='
			    (_cor44, 'temporary')
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor7, _cor10)
			  -| ['compiler_generated'] ) ->
	      %% Line 1105
	      Chs
	  %% Line 1106
	  <Name,[Ch = {'child',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}|Chs]>
	      when call 'erlang':'=:='
		    (_cor49,
		     Name) ->
	      let <_cor19> =
		  %% Line 1107
		  call 'erlang':'setelement'
		      (2, Ch, 'undefined')
	      in  %% Line 1107
		  [_cor19|Chs]
	  %% Line 1108
	  <Pid,[Ch = {'child',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}|Chs]>
	      when let <_cor25> =
		    call 'erlang':'=:='
			(_cor63, Pid)
		in  let <_cor28> =
			call 'erlang':'=:='
			    (_cor66, 'temporary')
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor25, _cor28)
			  -| ['compiler_generated'] ) ->
	      %% Line 1109
	      Chs
	  %% Line 1110
	  <Pid,[Ch = {'child',_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}|Chs]>
	      when call 'erlang':'=:='
		    (_cor70,
		     Pid) ->
	      let <_cor37> =
		  %% Line 1111
		  call 'erlang':'setelement'
		      (2, Ch, 'undefined')
	      in  %% Line 1111
		  [_cor37|Chs]
	  %% Line 1112
	  <Name,[Ch|Chs]> when 'true' ->
	      let <_cor38> =
		  %% Line 1113
		  apply 'del_child'/2
		      (Name, Chs)
	      in  %% Line 1113
		  [Ch|_cor38]
	  %% Line 1114
	  <_cor85,[]> when 'true' ->
	      %% Line 1115
	      []
	  ( <_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39})
		  -| [{'function_name',{'del_child',2}}] )
	    -| ['compiler_generated'] )
	end
'split_child'/2 =
    %% Line 1119
    fun (_cor1,_cor0) ->
	%% Line 1120
	apply 'split_child'/3
	    (_cor1, _cor0, [])
'split_child'/3 =
    %% Line 1122
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,[Ch = {'child',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}|Chs],After>
	      when call 'erlang':'=:='
		    (_cor28,
		     Name) ->
	      let <_cor11> =
		  %% Line 1123
		  call 'erlang':'setelement'
		      (2, Ch, 'undefined')
	      in  let <_cor12> =
		      %% Line 1123
		      call 'lists':'reverse'
			  ([_cor11|After])
		  in  %% Line 1123
		      {_cor12,Chs}
	  %% Line 1124
	  <Pid,[Ch = {'child',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}|Chs],After>
	      when call 'erlang':'=:='
		    (_cor42,
		     Pid) ->
	      let <_cor21> =
		  %% Line 1125
		  call 'erlang':'setelement'
		      (2, Ch, 'undefined')
	      in  let <_cor22> =
		      %% Line 1125
		      call 'lists':'reverse'
			  ([_cor21|After])
		  in  %% Line 1125
		      {_cor22,Chs}
	  %% Line 1126
	  <Name,[Ch|Chs],After> when 'true' ->
	      %% Line 1127
	      apply 'split_child'/3
		  (Name, Chs, [Ch|After])
	  %% Line 1128
	  <_cor57,[],After> when 'true' ->
	      let <_cor23> =
		  %% Line 1129
		  call 'lists':'reverse'
		      (After)
	      in  %% Line 1129
		  {_cor23,[]}
	  ( <_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24})
		  -| [{'function_name',{'split_child',3}}] )
	    -| ['compiler_generated'] )
	end
'get_child'/2 =
    %% Line 1131
    fun (_cor1,_cor0) ->
	%% Line 1132
	apply 'get_child'/3
	    (_cor1, _cor0, 'false')
'get_child'/3 =
    %% Line 1133
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pid,State,AllowPid>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(AllowPid, 'true')
		in  let <_cor4> =
			call 'erlang':'is_pid'
			    (Pid)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 1134
	      apply 'get_dynamic_child'/2
		  (Pid, State)
	  %% Line 1135
	  <Name,State,_cor10> when 'true' ->
	      %% Line 1136
	      ( case State of
		  ( <( {'state',_cor11,_cor12,_rec129,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'lists':'keysearch'
			    (Name, 3, _rec129)
		    -| ['compiler_generated'] )
		  ( <_cor19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'get_dynamic_child'/2 =
    %% Line 1138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,{'state',_cor17,_cor18,[Child|[]],Dynamics,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
	      %% Line 1139
	      ( case Child of
		  ( <( {'child',_cor24,_cor25,_cor26,_rec130,_cor27,_cor28,_cor29}
		       -| ['compiler_generated'] )> when 'true' ->
			let <DynamicsDb> =
			    apply 'dynamics_db'/2
				(_rec130, Dynamics)
			in  %% Line 1140
			    case apply 'is_dynamic_pid'/2
				     (Pid, DynamicsDb) of
			      %% Line 1141
			      <'true'> when 'true' ->
				  let <_cor7> =
				      %% Line 1142
				      call 'erlang':'setelement'
					  (2, Child, Pid)
				  in  %% Line 1142
				      {'value',_cor7}
			      %% Line 1143
			      <'false'> when 'true' ->
				  let <RPid> =
				      %% Line 1144
				      apply 'restarting'/1
					  (Pid)
				  in  %% Line 1145
				      case apply 'is_dynamic_pid'/2
					       (RPid, DynamicsDb) of
					%% Line 1146
					<'true'> when 'true' ->
					    let <_cor11> =
						%% Line 1147
						call 'erlang':'setelement'
						    (2, Child, RPid)
					    in  %% Line 1147
						{'value',_cor11}
					%% Line 1148
					<'false'> when 'true' ->
					    %% Line 1149
					    case call 'erlang':'is_process_alive'
						     (Pid) of
					      %% Line 1150
					      <'true'> when 'true' ->
						  'false'
					      %% Line 1151
					      <'false'> when 'true' ->
						  {'value',Child}
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor12})
						-| ['compiler_generated'] )
					    end
					( <_cor13> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor13})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor14> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor14})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor30> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'get_dynamic_child',2}}] )
	    -| ['compiler_generated'] )
	end
'is_dynamic_pid'/2 =
    %% Line 1156
    fun (_cor1,_cor0) ->
	%% Line 1157
	case call 'sets':'is_set'
		 (_cor0) of
	  %% Line 1158
	  <'true'> when 'true' ->
	      %% Line 1159
	      call 'sets':'is_element'
		  (_cor1, _cor0)
	  %% Line 1160
	  <'false'> when 'true' ->
	      %% Line 1161
	      call 'dict':'is_key'
		  (_cor1, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'replace_child'/2 =
    %% Line 1164
    fun (_cor1,_cor0) ->
	%% Line 1165
	( case _cor0 of
	    ( <( {'state',_cor9,_cor10,_rec133,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Chs> =
		      apply 'do_replace_child'/2
			  (_cor1, _rec133)
		  in  %% Line 1166
		      call 'erlang':'setelement'
			  (4, _cor0, Chs)
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_replace_child'/2 =
    %% Line 1168
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Child = {'child',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24},[Ch = {'child',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}|Chs]>
	      when call 'erlang':'=:='
		    (_cor26,
		     _cor19) ->
	      %% Line 1169
	      [Child|Chs]
	  %% Line 1170
	  <Child,[Ch|Chs]> when 'true' ->
	      let <_cor15> =
		  %% Line 1171
		  apply 'do_replace_child'/2
		      (Child, Chs)
	      in  %% Line 1171
		  [Ch|_cor15]
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'do_replace_child',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_child'/2 =
    %% Line 1173
    fun (_cor1,_cor0) ->
	%% Line 1174
	( case _cor1 of
	    ( <( {'child',_cor11,_rec135,_cor12,_cor13,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _cor0 of
		      ( <( {'state',_cor18,_cor19,_rec136,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Chs> =
				call 'lists':'keydelete'
				    (_rec135, 3, _rec136)
			    in  %% Line 1175
				call 'erlang':'setelement'
				    (4, _cor0, Chs)
			-| ['compiler_generated'] )
		      ( <_cor26> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','child'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'init_state'/4 =
    %% Line 1190
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    catch
		%% Line 1191
		apply 'init_state1'/4
		    (_cor3, _cor2, _cor1, _cor0)
	in  %% Line 1191
	    case _cor4 of
	      %% Line 1192
	      <{'ok',State}> when 'true' ->
		  %% Line 1193
		  {'ok',State}
	      %% Line 1194
	      <Error> when 'true' ->
		  %% Line 1195
		  Error
	    end
'init_state1'/4 =
    %% Line 1198
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <SupName,{Strategy,MaxIntensity,Period},Mod,Args> when 'true' ->
	      do  %% Line 1199
		  apply 'validStrategy'/1
		      (Strategy)
		  do  %% Line 1200
		      apply 'validIntensity'/1
			  (MaxIntensity)
		      do  %% Line 1201
			  apply 'validPeriod'/1
			      (Period)
			  let <_cor4> =
			      %% Line 1202
			      apply 'supname'/2
				  (SupName, Mod)
			  in  %% Line 1202
			      {'ok',{'state',_cor4,%% Line 1203
						   Strategy,[],'undefined',%% Line 1204
									   MaxIntensity,%% Line 1205
											Period,[],%% Line 1206
												  Mod,%% Line 1207
												      Args}}
	  %% Line 1208
	  <_X_SupName,Type,_cor9,_cor10> when 'true' ->
	      %% Line 1209
	      {'invalid_type',Type}
	end
'validStrategy'/1 =
    %% Line 1211
    fun (_cor0) ->
	case _cor0 of
	  <'simple_one_for_one'> when 'true' ->
	      'true'
	  %% Line 1212
	  <'one_for_one'> when 'true' ->
	      'true'
	  %% Line 1213
	  <'one_for_all'> when 'true' ->
	      'true'
	  %% Line 1214
	  <'rest_for_one'> when 'true' ->
	      'true'
	  %% Line 1215
	  <What> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_strategy',What})
	end
'validIntensity'/1 =
    %% Line 1217
    fun (_cor0) ->
	case _cor0 of
	  <Max>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			%% Line 1218
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1218
	      'true'
	  %% Line 1219
	  <What> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_intensity',What})
	end
'validPeriod'/1 =
    %% Line 1221
    fun (_cor0) ->
	case _cor0 of
	  <Period>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			%% Line 1222
			call 'erlang':'>'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1222
	      'true'
	  %% Line 1223
	  <What> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_period',What})
	end
'supname'/2 =
    %% Line 1225
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'self',Mod> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'self'
		      ()
	      in  {_cor2,Mod}
	  %% Line 1226
	  <N,_cor5> when 'true' ->
	      N
	end
'check_startspec'/1 =
    %% Line 1241
    fun (_cor0) ->
	apply 'check_startspec'/2
	    (_cor0, [])
'check_startspec'/2 =
    %% Line 1243
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[ChildSpec|T],Res> when 'true' ->
	      %% Line 1244
	      case apply 'check_childspec'/1
		       (ChildSpec) of
		%% Line 1245
		<{'ok',Child}> when 'true' ->
		    %% Line 1246
		    ( case Child of
			( <( {'child',_cor11,_rec138,_cor12,_cor13,_cor14,_cor15,_cor16}
			     -| ['compiler_generated'] )> when 'true' ->
			      case call 'lists':'keymember'
				       (_rec138, 3, Res) of
				%% Line 1247
				<'true'> when 'true' ->
				    {'duplicate_child_name',_rec138}
				%% Line 1248
				<'false'> when 'true' ->
				    apply 'check_startspec'/2
					(T, [Child|Res])
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor17> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','child'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1250
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 1252
	  <[],Res> when 'true' ->
	      let <_cor8> =
		  %% Line 1253
		  call 'lists':'reverse'
		      (Res)
	      in  %% Line 1253
		  {'ok',_cor8}
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'check_startspec',2}}] )
	    -| ['compiler_generated'] )
	end
'check_childspec'/1 =
    %% Line 1255
    fun (_cor0) ->
	case _cor0 of
	  <{Name,Func,RestartType,Shutdown,ChildType,Mods}> when 'true' ->
	      catch
		  %% Line 1256
		  apply 'check_childspec'/6
		      (Name, Func, RestartType, Shutdown, ChildType, Mods)
	  %% Line 1257
	  <X> when 'true' ->
	      {'invalid_child_spec',X}
	end
'check_childspec'/6 =
    %% Line 1259
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1260
	    apply 'validName'/1
		(_cor5)
	    do  %% Line 1261
		apply 'validFunc'/1
		    (_cor4)
		do  %% Line 1262
		    apply 'validRestartType'/1
			(_cor3)
		    do  %% Line 1263
			apply 'validChildType'/1
			    (_cor1)
			do  %% Line 1264
			    apply 'validShutdown'/2
				(_cor2, _cor1)
			    do  %% Line 1265
				apply 'validMods'/1
				    (_cor0)
				%% Line 1266
				{'ok',{'child','undefined',_cor5,_cor4,_cor3,_cor2,_cor1,_cor0}}
'validChildType'/1 =
    %% Line 1269
    fun (_cor0) ->
	case _cor0 of
	  <'supervisor'> when 'true' ->
	      'true'
	  %% Line 1270
	  <'worker'> when 'true' ->
	      'true'
	  %% Line 1271
	  <What> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_child_type',What})
	end
'validName'/1 =
    %% Line 1273
    fun (_cor0) ->
	'true'
'validFunc'/1 =
    %% Line 1275
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,A}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor2> =
			    %% Line 1276
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor3> =
				%% Line 1277
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1277
	      'true'
	  %% Line 1278
	  <Func> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_mfa',Func})
	end
'validRestartType'/1 =
    %% Line 1280
    fun (_cor0) ->
	case _cor0 of
	  <'permanent'> when 'true' ->
	      'true'
	  %% Line 1281
	  <'temporary'> when 'true' ->
	      'true'
	  %% Line 1282
	  <'transient'> when 'true' ->
	      'true'
	  %% Line 1283
	  <RestartType> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_restart_type',RestartType})
	end
'validShutdown'/2 =
    %% Line 1285
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Shutdown,_cor6>
	      when let <_cor2> =
		    %% Line 1286
		    call 'erlang':'is_integer'
			(Shutdown)
		in  let <_cor3> =
			%% Line 1286
			call 'erlang':'>'
			    (Shutdown, 0)
		    in  %% Line 1286
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1286
	      'true'
	  %% Line 1287
	  <'infinity',_cor7> when 'true' ->
	      'true'
	  %% Line 1288
	  <'brutal_kill',_cor8> when 'true' ->
	      'true'
	  %% Line 1289
	  <Shutdown,_cor9> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_shutdown',Shutdown})
	end
'validMods'/1 =
    %% Line 1291
    fun (_cor0) ->
	case _cor0 of
	  <'dynamic'> when 'true' ->
	      'true'
	  %% Line 1292
	  <Mods>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 1293
		  ( fun (_cor1) ->
			%% Line 1294
			case <> of
			  %% Line 1295
			  <>
			      when call 'erlang':'is_atom'
				    (_cor1) ->
			      'ok'
			  %% Line 1296
			  <> when 'true' ->
			      call 'erlang':'throw'
				  ({'invalid_module',_cor1})
			end
		    -| [{'id',{0,0,'-validMods/1-fun-0-'}}] )
	      in  %% Line 1293
		  call 'lists':'foreach'
		      (_cor3, %% Line 1299
			      Mods)
	  %% Line 1300
	  <Mods> when 'true' ->
	      call 'erlang':'throw'
		  ({'invalid_modules',Mods})
	end
'add_restart'/1 =
    %% Line 1311
    fun (_cor0) ->
	%% Line 1312
	( case _cor0 of
	    ( <( {'state',_cor18,_cor19,_cor20,_cor21,_rec140,_cor22,_cor23,_cor24,_cor25}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Now> =
		      %% Line 1315
		      call 'erlang':'now'
			  ()
		  in  let <R1> =
			  %% Line 1316
			  apply 'add_restart'/3
			      ([Now|_cor23], Now, _cor22)
		      in  let <_cor14> =
			      %% Line 1317
			      call 'erlang':'setelement'
				  (8, _cor0, R1)
			  in  %% Line 1318
			      case call 'erlang':'length'
				       (R1) of
				%% Line 1319
				<CurI>
				    when call 'erlang':'=<'
					  (CurI,
					   _rec140) ->
				    %% Line 1320
				    {'ok',_cor14}
				%% Line 1321
				<_cor55> when 'true' ->
				    %% Line 1322
				    {'terminate',_cor14}
			      end
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_restart'/3 =
    %% Line 1325
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[R|Restarts],Now,Period> when 'true' ->
	      %% Line 1326
	      case apply 'inPeriod'/3
		       (R, Now, Period) of
		%% Line 1327
		<'true'> when 'true' ->
		    let <_cor3> =
			%% Line 1328
			apply 'add_restart'/3
			    (Restarts, Now, Period)
		    in  %% Line 1328
			[R|_cor3]
		%% Line 1329
		<_cor8> when 'true' ->
		    %% Line 1330
		    []
	      end
	  %% Line 1332
	  <[],_cor9,_cor10> when 'true' ->
	      %% Line 1333
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'add_restart',3}}] )
	    -| ['compiler_generated'] )
	end
'inPeriod'/3 =
    %% Line 1335
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1336
	case apply 'difference'/2
		 (_cor2, _cor1) of
	  %% Line 1337
	  <T>
	      when call 'erlang':'>'
		    (T,
		     _cor0) ->
	      %% Line 1338
	      'false'
	  %% Line 1339
	  <_cor7> when 'true' ->
	      %% Line 1340
	      'true'
	end
'difference'/2 =
    %% Line 1351
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{TimeM,TimeS,_cor7},{CurM,CurS,_cor8}>
	      when call 'erlang':'>'
		    (CurM,
		     TimeM) ->
	      let <_cor3> =
		  %% Line 1352
		  call 'erlang':'-'
		      (CurM, TimeM)
	      in  let <_cor4> =
		      %% Line 1352
		      call 'erlang':'*'
			  (_cor3, 1000000)
		  in  let <_cor2> =
			  %% Line 1352
			  call 'erlang':'-'
			      (CurS, TimeS)
		      in  %% Line 1352
			  call 'erlang':'+'
			      (_cor4, _cor2)
	  %% Line 1353
	  <{_cor9,TimeS,_cor10},{_cor11,CurS,_cor12}> when 'true' ->
	      %% Line 1354
	      call 'erlang':'-'
		  (CurS, TimeS)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'difference',2}}] )
	    -| ['compiler_generated'] )
	end
'report_error'/4 =
    %% Line 1360
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1364
	    apply 'extract_child'/1
		(_cor1)
	in  let <ErrorMsg> =
		%% Line 1361
		[{'supervisor',_cor0}|%% Line 1362
				      [{'errorContext',_cor3}|%% Line 1363
							      [{'reason',_cor2}|%% Line 1364
										[{'offender',_cor4}|[]]]]]
	    in  %% Line 1365
		call 'error_logger':'error_report'
		    ('supervisor_report', ErrorMsg)
'extract_child'/1 =
    %% Line 1368
    fun (_cor0) ->
	case _cor0 of
	  <Child = {'child',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}>
	      when call 'erlang':'is_list'
		    (_cor33) ->
	      let <_cor9> =
		  %% Line 1369
		  call 'erlang':'length'
		      (_cor33)
	      in  %% Line 1369
		  [{'nb_children',_cor9}|%% Line 1370
					 [{'name',_cor34}|%% Line 1371
							  [{'mfargs',_cor35}|%% Line 1372
									     [{'restart_type',_cor36}|%% Line 1373
												      [{'shutdown',_cor37}|%% Line 1374
															   [{'child_type',_cor38}|[]]]]]]]
	  %% Line 1375
	  <Child> when 'true' ->
	      %% Line 1376
	      ( case Child of
		  ( <( {'child',_rec150,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87}
		       -| ['compiler_generated'] )> when 'true' ->
			[{'pid',_rec150}|%% Line 1377
					 [{'name',_cor82}|%% Line 1378
							  [{'mfargs',_cor83}|%% Line 1379
									     [{'restart_type',_cor84}|%% Line 1380
												      [{'shutdown',_cor85}|%% Line 1381
															   [{'child_type',_cor86}|[]]]]]]]
		    -| ['compiler_generated'] )
		  ( <_cor88> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','child'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'report_progress'/2 =
    %% Line 1383
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1385
	    apply 'extract_child'/1
		(_cor1)
	in  let <Progress> =
		%% Line 1384
		[{'supervisor',_cor0}|%% Line 1385
				      [{'started',_cor2}|[]]]
	    in  %% Line 1386
		call 'error_logger':'info_report'
		    ('progress', Progress)
'behaviour_info'/1 =
    fun (_cor0) ->
	case _cor0 of
	  <'callbacks'> when 'true' ->
	      [{'init',1}]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'behaviour_info',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('supervisor')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('supervisor', _cor0)
end