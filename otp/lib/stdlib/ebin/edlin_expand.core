module 'edlin_expand' ['expand'/1,
		       'format_matches'/1,
		       'module_info'/0,
		       'module_info'/1]
    attributes []
'expand'/1 =
    %% Line 34
    fun (_cor0) ->
	%% Line 35
	case call 'edlin':'over_word'
		 (_cor0, [], 0) of
	  <{Bef1,Word,_cor6}> when 'true' ->
	      %% Line 36
	      case apply 'over_white'/3
		       (Bef1, [], 0) of
		%% Line 37
		<{[58|Bef2],_X_White,_X_Nwh}> when 'true' ->
		    %% Line 38
		    case apply 'over_white'/3
			     (Bef2, [], 0) of
		      <{Bef3,_X_White1,_X_Nwh1}> when 'true' ->
			  %% Line 39
			  case call 'edlin':'over_word'
				   (Bef3, [], 0) of
			    <{_cor7,Mod,_X_Nm}> when 'true' ->
				%% Line 40
				apply 'expand_function_name'/2
				    (Mod, Word)
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 41
		<{_cor8,_cor9,_cor10}> when 'true' ->
		    %% Line 42
		    apply 'expand_module_name'/1
			(Word)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'expand_module_name'/1 =
    %% Line 45
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 46
	    call 'code':'all_loaded'
		()
	in  %% Line 46
	    apply 'match'/3
		(_cor0, _cor1, [58])
'expand_function_name'/2 =
    %% Line 48
    fun (_cor1,_cor0) ->
	%% Line 49
	case apply 'to_atom'/1
		 (_cor1) of
	  %% Line 50
	  <{'ok',Mod}> when 'true' ->
	      %% Line 51
	      case call 'erlang':'module_loaded'
		       (Mod) of
		%% Line 52
		<'true'> when 'true' ->
		    let <L> =
			%% Line 53
			call Mod:'module_info'
			    ()
		    in  %% Line 54
			case call 'lists':'keyfind'
				 ('exports', 1, L) of
			  %% Line 55
			  <{_cor8,Exports}> when 'true' ->
			      %% Line 56
			      apply 'match'/3
				  (_cor0, Exports, [40])
			  %% Line 57
			  <_cor9> when 'true' ->
			      %% Line 58
			      {'no',[],[]}
			end
		%% Line 60
		<'false'> when 'true' ->
		    %% Line 61
		    {'no',[],[]}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 63
	  <'error'> when 'true' ->
	      %% Line 64
	      {'no',[],[]}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'to_atom'/1 =
    %% Line 68
    fun (_cor0) ->
	%% Line 69
	case call 'erl_scan':'string'
		 (_cor0) of
	  %% Line 70
	  <{'ok',[{'atom',_cor3,A}|[]],_cor4}> when 'true' ->
	      %% Line 71
	      {'ok',A}
	  %% Line 72
	  <_cor5> when 'true' ->
	      %% Line 73
	      'error'
	end
'match'/3 =
    %% Line 76
    fun (_cor2,_cor1,_cor0) ->
	let <Len> =
	    %% Line 77
	    call 'erlang':'length'
		(_cor2)
	in  let <_cor12> =
		%% Line 79
		( letrec
		      'lc$^0'/1 =
			  fun (_cor9) ->
			      case _cor9 of
				<[{H,A}|_cor5]> when 'true' ->
				    let <_cor6> =
					%% Line 80
					call 'io_lib':'fwrite'
					    ([126|[119]], [H|[]])
				    in  let <_cor8> =
					    %% Line 80
					    call 'erlang':'hd'
						(_cor6)
					in  %% Line 80
					    ( case call 'lists':'prefix'
						       (_cor2, _cor8) of
						<'true'> when 'true' ->
						    let <_cor10> =
							apply 'lc$^0'/1
							    (_cor5)
						    in  ( [{_cor8,A}|_cor10]
							  -| ['compiler_generated'] )
						( <'false'> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor5)
						  -| ['compiler_generated'] )
						( <_cor11> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor11})
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
				( <[_cor4|_cor5]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor5)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor9> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor9})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor1)
		  -| ['list_comprehension'] )
	    in  let <Matches> =
		    %% Line 78
		    call 'lists':'sort'
			(_cor12)
		in  let <_cor18> =
			%% Line 81
			( letrec
			      'lc$^1'/1 =
				  fun (_cor16) ->
				      case _cor16 of
					<[{N,_cor29}|_cor15]> when 'true' ->
					    let <_cor17> =
						apply 'lc$^1'/1
						    (_cor15)
					    in  ( [N|_cor17]
						  -| ['compiler_generated'] )
					( <[_cor14|_cor15]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor15)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor16> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor16})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^1'/1
				  (Matches)
			  -| ['list_comprehension'] )
		    in  %% Line 81
			case apply 'longest_common_head'/1
				 (_cor18) of
			  %% Line 82
			  <{'partial',[]}> when 'true' ->
			      %% Line 83
			      {'no',[],Matches}
			  %% Line 84
			  <{'partial',Str}> when 'true' ->
			      %% Line 85
			      case call 'lists':'nthtail'
				       (Len, Str) of
				%% Line 86
				<[]> when 'true' ->
				    %% Line 87
				    {'yes',[],Matches}
				%% Line 88
				<Remain> when 'true' ->
				    %% Line 89
				    {'yes',Remain,[]}
			      end
			  %% Line 91
			  <{'complete',Str}> when 'true' ->
			      let <_cor21> =
				  %% Line 92
				  case <_cor0,Matches> of
				    %% Line 93
				    <[40],[{_cor30,0}|[]]>
					when call 'erlang':'=:='
					      (_cor30,
					       Str) ->
					[40|[41]]
				    %% Line 94
				    <_cor31,_cor32> when 'true' ->
					_cor0
				  end
			      in  let <_cor23> =
				      %% Line 96
				      call 'lists':'nthtail'
					  (Len, Str)
				  in  let <_cor24> =
					  %% Line 96
					  call 'erlang':'++'
					      (_cor23, _cor21)
				      in  %% Line 96
					  {'yes',_cor24,[]}
			  %% Line 97
			  <'no'> when 'true' ->
			      %% Line 98
			      {'no',[],[]}
			  ( <_cor25> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor25})
			    -| ['compiler_generated'] )
			end
'format_matches'/1 =
    %% Line 102
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 103
	    call 'lists':'sort'
		(_cor0)
	in  let <S> =
		%% Line 103
		apply 'format_col'/2
		    (_cor1, [])
	    in  %% Line 104
		[[10]|S]
'format_col'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor5> when 'true' ->
	      []
	  %% Line 107
	  <L,Acc> when 'true' ->
	      let <_cor2> =
		  apply 'field_width'/1
		      (L)
	      in  apply 'format_col'/4
		      (L, _cor2, 0, Acc)
	end
'format_col'/4 =
    %% Line 109
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <X,Width,Len,Acc>
	      when try
		    let <_cor4> =
			call 'erlang':'+'
			    (Width, Len)
		    in  call 'erlang':'>'
			    (_cor4, 79)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 110
	      apply 'format_col'/4
		  (X, Width, 0, [[10]|Acc])
	  %% Line 111
	  <[A|T],Width,Len,Acc0> when 'true' ->
	      let <_cor8> =
		  %% Line 112
		  case A of
		    %% Line 115
		    <{H0,I}>
			when call 'erlang':'is_integer'
			      (I) ->
			let <_cor5> =
			    %% Line 116
			    call 'erlang':'integer_to_list'
				(I)
			in  let <_cor6> =
				%% Line 116
				[47|_cor5]
			    in  %% Line 116
				call 'erlang':'++'
				    (H0, _cor6)
		    %% Line 117
		    <{H1,_cor17}> when 'true' ->
			H1
		    %% Line 118
		    <H2> when 'true' ->
			H2
		  end
	      in  let <_cor10> =
		      %% Line 120
		      call 'io_lib':'format'
			  ([126|[45|[42|[115]]]], [Width|[_cor8|[]]])
		  in  let <Acc> =
			  %% Line 120
			  [_cor10|Acc0]
		      in  let <_cor12> =
			      %% Line 121
			      call 'erlang':'+'
				  (Len, Width)
			  in  %% Line 121
			      apply 'format_col'/4
				  (T, Width, _cor12, Acc)
	  %% Line 122
	  <[],_cor18,_cor19,Acc> when 'true' ->
	      %% Line 123
	      call 'lists':'reverse'
		  (Acc, [10])
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'format_col',4}}] )
	    -| ['compiler_generated'] )
	end
'field_width'/1 =
    %% Line 125
    fun (_cor0) ->
	apply 'field_width'/2
	    (_cor0, 0)
'field_width'/2 =
    %% Line 127
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{H,_cor6}|T],W> when 'true' ->
	      %% Line 128
	      case call 'erlang':'length'
		       (H) of
		%% Line 129
		<L>
		    when call 'erlang':'>'
			  (L,
			   W) ->
		    apply 'field_width'/2
			(T, L)
		%% Line 130
		<_cor7> when 'true' ->
		    apply 'field_width'/2
			(T, W)
	      end
	  %% Line 132
	  <[H|T],W> when 'true' ->
	      %% Line 133
	      case call 'erlang':'length'
		       (H) of
		%% Line 134
		<L>
		    when call 'erlang':'>'
			  (L,
			   W) ->
		    apply 'field_width'/2
			(T, L)
		%% Line 135
		<_cor8> when 'true' ->
		    apply 'field_width'/2
			(T, W)
	      end
	  %% Line 137
	  <[],W>
	      when call 'erlang':'<'
		    (W,
		     40) ->
	      %% Line 138
	      call 'erlang':'+'
		  (W, 4)
	  %% Line 139
	  <[],_cor9> when 'true' ->
	      %% Line 140
	      40
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'field_width',2}}] )
	    -| ['compiler_generated'] )
	end
'longest_common_head'/1 =
    %% Line 142
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 143
	      'no'
	  %% Line 144
	  <LL> when 'true' ->
	      %% Line 145
	      apply 'longest_common_head'/2
		  (LL, [])
	end
'longest_common_head'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[]|_cor11],L> when 'true' ->
	      let <_cor2> =
		  %% Line 148
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 148
		  {'partial',_cor2}
	  %% Line 149
	  <LL,L> when 'true' ->
	      %% Line 150
	      case apply 'same_head'/1
		       (LL) of
		%% Line 151
		<'true'> when 'true' ->
		    %% Line 152
		    case LL of
		      <[[H|_cor12]|_cor13]> when 'true' ->
			  let <LL1> =
			      %% Line 153
			      apply 'all_tails'/1
				  (LL)
			  in  %% Line 154
			      case apply 'all_nil'/1
				       (LL1) of
				%% Line 155
				<'false'> when 'true' ->
				    %% Line 156
				    apply 'longest_common_head'/2
					(LL1, [H|L])
				%% Line 157
				<'true'> when 'true' ->
				    let <_cor5> =
					%% Line 158
					call 'lists':'reverse'
					    ([H|L])
				    in  %% Line 158
					{'complete',_cor5}
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 160
		<'false'> when 'true' ->
		    let <_cor7> =
			%% Line 161
			call 'lists':'reverse'
			    (L)
		    in  %% Line 161
			{'partial',_cor7}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	end
'same_head'/1 =
    %% Line 164
    fun (_cor0) ->
	case _cor0 of
	  <[[H|_cor2]|T1]> when 'true' ->
	      apply 'same_head'/2
		  (H, T1)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'same_head',1}}] )
	    -| ['compiler_generated'] )
	end
'same_head'/2 =
    %% Line 166
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <H,[[_cor4|_cor5]|T]>
	      when call 'erlang':'=:='
		    (_cor4,
		     H) ->
	      apply 'same_head'/2
		  (H, T)
	  %% Line 167
	  <_cor6,[]> when 'true' ->
	      'true'
	  %% Line 168
	  <_cor7,_cor8> when 'true' ->
	      'false'
	end
'all_tails'/1 =
    %% Line 170
    fun (_cor0) ->
	apply 'all_tails'/2
	    (_cor0, [])
'all_tails'/2 =
    %% Line 172
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[_cor4|T]|T1],L> when 'true' ->
	      apply 'all_tails'/2
		  (T1, [T|L])
	  %% Line 173
	  <[],L> when 'true' ->
	      L
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'all_tails',2}}] )
	    -| ['compiler_generated'] )
	end
'all_nil'/1 =
    %% Line 175
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'true'
	  %% Line 176
	  <[[]|Rest]> when 'true' ->
	      apply 'all_nil'/1
		  (Rest)
	  %% Line 177
	  <_cor2> when 'true' ->
	      'false'
	end
'over_white'/3 =
    %% Line 182
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[32|Cs],Stack,N> when 'true' ->
	      let <_cor3> =
		  %% Line 183
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 183
		  apply 'over_white'/3
		      (Cs, [32|Stack], _cor3)
	  %% Line 184
	  <[9|Cs],Stack,N> when 'true' ->
	      let <_cor4> =
		  %% Line 185
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 185
		  apply 'over_white'/3
		      (Cs, [9|Stack], _cor4)
	  %% Line 186
	  <Cs,Stack,N>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      %% Line 187
	      {Cs,Stack,N}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'over_white',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edlin_expand')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edlin_expand', _cor0)
end