module 'unicode' ['bin_is_7bit'/1,
		  'bom_to_encoding'/1,
		  'characters_to_binary'/1,
		  'characters_to_binary'/2,
		  'characters_to_binary'/3,
		  'characters_to_binary_int'/2,
		  'characters_to_list'/1,
		  'characters_to_list'/2,
		  'characters_to_list_int'/2,
		  'encoding_to_bom'/1,
		  'module_info'/0,
		  'module_info'/1]
    attributes [%% Line 26
		'export_type' =
		    %% Line 26
		    [{'chardata',0}|[{'charlist',0}|[{'encoding',0}|[{'external_chardata',0}|[{'external_charlist',0}|[{'latin1_char',0}|[{'latin1_chardata',0}|[{'latin1_charlist',0}|[{'latin1_binary',0}|[{'unicode_binary',0}]]]]]]]]]],
		%% Line 30
		'type' =
		    %% Line 30
		    [{'encoding',{'type',30,'union',[{'atom',30,'latin1'}|[{'atom',30,'unicode'}|[{'atom',30,'utf8'}|[{'atom',31,'utf16'}|[{'type',31,'tuple',[{'atom',31,'utf16'}|[{'type',31,'endian',[]}]]}|[{'atom',32,'utf32'}|[{'type',32,'tuple',[{'atom',32,'utf32'}|[{'type',32,'endian',[]}]]}]]]]]]]},[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'endian',{'type',33,'union',[{'atom',33,'big'}|[{'atom',33,'little'}]]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{'unicode_binary',{'type',34,'binary',[]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'charlist',{'type',36,'maybe_improper_list',[{'type',36,'union',[{'type',36,'char',[]}|[{'type',36,'unicode_binary',[]}|[{'type',36,'charlist',[]}]]]}|[{'type',37,'union',[{'type',37,'unicode_binary',[]}|[{'type',37,'nil',[]}]]}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'chardata',{'type',38,'union',[{'type',38,'charlist',[]}|[{'type',38,'unicode_binary',[]}]]},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'external_unicode_binary',{'type',39,'binary',[]},[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'external_chardata',{'type',40,'union',[{'type',40,'external_charlist',[]}|[{'type',40,'external_unicode_binary',[]}]]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'external_charlist',{'type',42,'maybe_improper_list',[{'type',42,'union',[{'type',42,'char',[]}|[{'type',43,'external_unicode_binary',[]}|[{'type',44,'external_charlist',[]}]]]}|[{'type',45,'union',[{'type',45,'external_unicode_binary',[]}|[{'type',45,'nil',[]}]]}]]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'latin1_binary',{'type',46,'binary',[]},[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{'latin1_char',{'type',47,'byte',[]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'latin1_chardata',{'type',48,'union',[{'type',48,'latin1_charlist',[]}|[{'type',48,'latin1_binary',[]}]]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'latin1_charlist',{'type',50,'maybe_improper_list',[{'type',50,'union',[{'type',50,'latin1_char',[]}|[{'type',51,'latin1_binary',[]}|[{'type',52,'latin1_charlist',[]}]]]}|[{'type',53,'union',[{'type',53,'latin1_binary',[]}|[{'type',53,'nil',[]}]]}]]},[]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'bin_is_7bit',1},[{'type',64,'bounded_fun',[{'type',64,'fun',[{'type',64,'product',[{'var',64,'Binary'}]}|[{'type',64,'boolean',[]}]]}|[[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Binary'}|[{'type',65,'binary',[]}]]]]}]]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'characters_to_binary',2},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Data'}|[{'var',70,'InEncoding'}]]}|[{'var',70,'Result'}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Data'}|[{'type',71,'union',[{'type',71,'latin1_chardata',[]}|[{'type',71,'chardata',[]}|[{'type',71,'external_chardata',[]}]]]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'InEncoding'}|[{'type',72,'encoding',[]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Result'}|[{'type',73,'union',[{'type',73,'binary',[]}|[{'type',74,'tuple',[{'atom',74,'error'}|[{'type',74,'binary',[]}|[{'var',74,'RestData'}]]]}|[{'type',75,'tuple',[{'atom',75,'incomplete'}|[{'type',75,'binary',[]}|[{'type',75,'binary',[]}]]]}]]]}]]]]}|[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'RestData'}|[{'type',76,'union',[{'type',76,'latin1_chardata',[]}|[{'type',76,'chardata',[]}|[{'type',76,'external_chardata',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'characters_to_list',2},[{'type',81,'bounded_fun',[{'type',81,'fun',[{'type',81,'product',[{'var',81,'Data'}|[{'var',81,'InEncoding'}]]}|[{'var',81,'Result'}]]}|[[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'Data'}|[{'type',82,'union',[{'type',82,'latin1_chardata',[]}|[{'type',82,'chardata',[]}|[{'type',82,'external_chardata',[]}]]]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'InEncoding'}|[{'type',83,'encoding',[]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Result'}|[{'type',84,'union',[{'type',84,'list',[]}|[{'type',85,'tuple',[{'atom',85,'error'}|[{'type',85,'list',[]}|[{'var',85,'RestData'}]]]}|[{'type',86,'tuple',[{'atom',86,'incomplete'}|[{'type',86,'list',[]}|[{'type',86,'binary',[]}]]]}]]]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'RestData'}|[{'type',87,'union',[{'type',87,'latin1_chardata',[]}|[{'type',87,'chardata',[]}|[{'type',87,'external_chardata',[]}]]]}]]]]}]]]]]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'characters_to_list',1},[{'type',94,'bounded_fun',[{'type',94,'fun',[{'type',94,'product',[{'var',94,'Data'}]}|[{'var',94,'Result'}]]}|[[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Data'}|[{'type',95,'union',[{'type',95,'latin1_chardata',[]}|[{'type',95,'chardata',[]}|[{'type',95,'external_chardata',[]}]]]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Result'}|[{'type',96,'union',[{'type',96,'list',[]}|[{'type',97,'tuple',[{'atom',97,'error'}|[{'type',97,'list',[]}|[{'var',97,'RestData'}]]]}|[{'type',98,'tuple',[{'atom',98,'incomplete'}|[{'type',98,'list',[]}|[{'type',98,'binary',[]}]]]}]]]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'RestData'}|[{'type',99,'union',[{'type',99,'latin1_chardata',[]}|[{'type',99,'chardata',[]}|[{'type',99,'external_chardata',[]}]]]}]]]]}]]]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'characters_to_binary',1},[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'Data'}]}|[{'var',133,'Result'}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Data'}|[{'type',134,'union',[{'type',134,'latin1_chardata',[]}|[{'type',134,'chardata',[]}|[{'type',134,'external_chardata',[]}]]]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Result'}|[{'type',135,'union',[{'type',135,'binary',[]}|[{'type',136,'tuple',[{'atom',136,'error'}|[{'type',136,'binary',[]}|[{'var',136,'RestData'}]]]}|[{'type',137,'tuple',[{'atom',137,'incomplete'}|[{'type',137,'binary',[]}|[{'type',137,'binary',[]}]]]}]]]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'RestData'}|[{'type',138,'union',[{'type',138,'latin1_chardata',[]}|[{'type',138,'chardata',[]}|[{'type',138,'external_chardata',[]}]]]}]]]]}]]]]]}]}],
		%% Line 175
		'spec' =
		    %% Line 175
		    [{{'characters_to_binary',3},[{'type',175,'bounded_fun',[{'type',175,'fun',[{'type',175,'product',[{'var',175,'Data'}|[{'var',175,'InEncoding'}|[{'var',175,'OutEncoding'}]]]}|[{'var',175,'Result'}]]}|[[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Data'}|[{'type',176,'union',[{'type',176,'latin1_chardata',[]}|[{'type',176,'chardata',[]}|[{'type',176,'external_chardata',[]}]]]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'InEncoding'}|[{'type',177,'encoding',[]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'OutEncoding'}|[{'type',178,'encoding',[]}]]]]}|[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Result'}|[{'type',179,'union',[{'type',179,'binary',[]}|[{'type',180,'tuple',[{'atom',180,'error'}|[{'type',180,'binary',[]}|[{'var',180,'RestData'}]]]}|[{'type',181,'tuple',[{'atom',181,'incomplete'}|[{'type',181,'binary',[]}|[{'type',181,'binary',[]}]]]}]]]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'RestData'}|[{'type',182,'union',[{'type',182,'latin1_chardata',[]}|[{'type',182,'chardata',[]}|[{'type',182,'external_chardata',[]}]]]}]]]]}]]]]]]]}]}],
		%% Line 295
		'spec' =
		    %% Line 295
		    [{{'bom_to_encoding',1},[{'type',295,'bounded_fun',[{'type',295,'fun',[{'type',295,'product',[{'var',295,'Bin'}]}|[{'type',295,'tuple',[{'var',295,'Encoding'}|[{'var',295,'Length'}]]}]]}|[[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'Bin'}|[{'type',296,'binary',[]}]]]]}|[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'Encoding'}|[{'type',297,'union',[{'atom',297,'latin1'}|[{'atom',297,'utf8'}|[{'type',298,'tuple',[{'atom',298,'utf16'}|[{'type',298,'endian',[]}]]}|[{'type',299,'tuple',[{'atom',299,'utf32'}|[{'type',299,'endian',[]}]]}]]]]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Length'}|[{'type',300,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 315
		'spec' =
		    %% Line 315
		    [{{'encoding_to_bom',1},[{'type',315,'bounded_fun',[{'type',315,'fun',[{'type',315,'product',[{'var',315,'InEncoding'}]}|[{'var',315,'Bin'}]]}|[[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Bin'}|[{'type',316,'binary',[]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'InEncoding'}|[{'type',317,'encoding',[]}]]]]}]]]]}]}]]
'bin_is_7bit'/1 =
    %% Line 67
    fun (_cor0) ->
	%% Line 68
	call 'erlang':'nif_error'
	    ('undef')
'characters_to_binary'/2 =
    %% Line 78
    fun (_cor1,_cor0) ->
	%% Line 79
	call 'erlang':'nif_error'
	    ('undef')
'characters_to_list'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	%% Line 90
	call 'erlang':'nif_error'
	    ('undef')
'characters_to_list'/1 =
    %% Line 101
    fun (_cor0) ->
	%% Line 102
	call 'unicode':'characters_to_list'
	    (_cor0, 'unicode')
'characters_to_list_int'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	%% Line 105
	try
	    %% Line 106
	    apply 'do_characters_to_list'/2
		(_cor1, _cor0)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 108
	      <'error',AnyError,_cor13> when 'true' ->
		  let <_cor7> =
		      %% Line 109
		      case AnyError of
			%% Line 110
			<'system_limit'> when 'true' ->
			    %% Line 111
			    'system_limit'
			%% Line 112
			<_cor14> when 'true' ->
			    %% Line 113
			    'badarg'
		      end
		  in  let <_cor9> =
			  catch
			      %% Line 116
			      call 'erlang':'error'
				  ('new_stacktrace', %% Line 117
						     [_cor1|[_cor0|[]]])
		      in  %% Line 115
			  case _cor9 of
			    <{'EXIT',{'new_stacktrace',[{Mod,_cor15,L,_cor16}|Rest]}}> when 'true' ->
				%% Line 118
				call 'erlang':'raise'
				    ('error', _cor7, [{Mod,'characters_to_list',L}|Rest])
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'do_characters_to_list'/2 =
    %% Line 122
    fun (_cor1,_cor0) ->
	%% Line 123
	case call 'unicode':'characters_to_binary'
		 (_cor1, _cor0) of
	  %% Line 124
	  <Bin>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 125
	      call 'unicode':'characters_to_list'
		  (Bin, 'utf8')
	  %% Line 126
	  <{'error',Encoded,Rest}> when 'true' ->
	      let <_cor2> =
		  %% Line 127
		  call 'unicode':'characters_to_list'
		      (Encoded, 'utf8')
	      in  %% Line 127
		  {'error',_cor2,Rest}
	  %% Line 128
	  <{'incomplete',Encoded2,Rest2}> when 'true' ->
	      let <_cor3> =
		  %% Line 129
		  call 'unicode':'characters_to_list'
		      (Encoded2, 'utf8')
	      in  %% Line 129
		  {'incomplete',_cor3,Rest2}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'characters_to_binary'/1 =
    %% Line 140
    fun (_cor0) ->
	%% Line 141
	try
	    %% Line 142
	    call 'unicode':'characters_to_binary'
		(_cor0, 'unicode')
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 144
	      <'error',AnyError,_cor11> when 'true' ->
		  let <_cor6> =
		      %% Line 145
		      case AnyError of
			%% Line 146
			<'system_limit'> when 'true' ->
			    %% Line 147
			    'system_limit'
			%% Line 148
			<_cor12> when 'true' ->
			    %% Line 149
			    'badarg'
		      end
		  in  let <_cor8> =
			  catch
			      %% Line 152
			      call 'erlang':'error'
				  ('new_stacktrace', %% Line 153
						     [_cor0|[]])
		      in  %% Line 151
			  case _cor8 of
			    <{'EXIT',{'new_stacktrace',[{Mod,_cor13,L,_cor14}|Rest]}}> when 'true' ->
				%% Line 154
				call 'erlang':'raise'
				    ('error', _cor6, [{Mod,'characters_to_binary',L}|Rest])
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor9})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'characters_to_binary_int'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	%% Line 159
	try
	    %% Line 160
	    apply 'characters_to_binary_int'/3
		(_cor1, _cor0, 'unicode')
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 162
	      <'error',AnyError,_cor13> when 'true' ->
		  let <_cor7> =
		      %% Line 163
		      case AnyError of
			%% Line 164
			<'system_limit'> when 'true' ->
			    %% Line 165
			    'system_limit'
			%% Line 166
			<_cor14> when 'true' ->
			    %% Line 167
			    'badarg'
		      end
		  in  let <_cor9> =
			  catch
			      %% Line 170
			      call 'erlang':'error'
				  ('new_stacktrace', %% Line 171
						     [_cor1|[_cor0|[]]])
		      in  %% Line 169
			  case _cor9 of
			    <{'EXIT',{'new_stacktrace',[{Mod,_cor15,L,_cor16}|Rest]}}> when 'true' ->
				%% Line 172
				call 'erlang':'raise'
				    ('error', _cor7, [{Mod,'characters_to_binary',L}|Rest])
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'characters_to_binary'/3 =
    %% Line 184
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <ML,'latin1','latin1'>
	      when call 'erlang':'is_binary'
		    (ML) ->
	      %% Line 185
	      ML
	  %% Line 186
	  <ML,'latin1',Uni>
	      when try
		    let <_cor3> =
			call 'erlang':'is_binary'
			    (ML)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(Uni, 'utf8')
			in  let <_cor5> =
				call 'erlang':'=:='
				    (Uni, 'unicode')
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 187
	      case call 'unicode':'bin_is_7bit'
		       (ML) of
		%% Line 188
		<'true'> when 'true' ->
		    %% Line 189
		    ML
		%% Line 190
		<'false'> when 'true' ->
		    %% Line 191
		    try
			%% Line 192
			apply 'characters_to_binary_int'/3
			    (ML, 'latin1', 'utf8')
		    of <_cor7> ->
			_cor7
		    catch <_cor10,_cor9,_cor8> ->
			case <_cor10,_cor9,_cor8> of
			  %% Line 194
			  <'error',AnyError,_cor43> when 'true' ->
			      let <_cor12> =
				  %% Line 195
				  case AnyError of
				    %% Line 196
				    <'system_limit'> when 'true' ->
					%% Line 197
					'system_limit'
				    %% Line 198
				    <_cor44> when 'true' ->
					%% Line 199
					'badarg'
				  end
			      in  let <_cor14> =
				      catch
					  %% Line 202
					  call 'erlang':'error'
					      ('new_stacktrace', %% Line 203
								 [ML|['latin1'|[Uni|[]]]])
				  in  %% Line 201
				      case _cor14 of
					<{'EXIT',{'new_stacktrace',[{Mod,_cor45,L,_cor46}|Rest]}}> when 'true' ->
					    %% Line 204
					    call 'erlang':'raise'
						('error', _cor12, %% Line 205
								  [{Mod,'characters_to_binary',L}|Rest])
					( <_cor15> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor15})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor10,_cor9,_cor8> when 'true' ->
				primop 'raise'
				    (_cor8, _cor9)
			    -| ['compiler_generated'] )
			end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 208
	  <ML,Uni,'latin1'>
	      when try
		    let <_cor17> =
			call 'erlang':'is_binary'
			    (ML)
		    in  let <_cor18> =
			    call 'erlang':'=:='
				(Uni, 'utf8')
			in  let <_cor19> =
				call 'erlang':'=:='
				    (Uni, 'unicode')
			    in  let <_cor20> =
				    call 'erlang':'or'
					(_cor18, _cor19)
				in  call 'erlang':'and'
					(_cor17, _cor20)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 209
	      case call 'unicode':'bin_is_7bit'
		       (ML) of
		%% Line 210
		<'true'> when 'true' ->
		    %% Line 211
		    ML
		%% Line 212
		<'false'> when 'true' ->
		    %% Line 213
		    try
			%% Line 214
			apply 'characters_to_binary_int'/3
			    (ML, 'utf8', 'latin1')
		    of <_cor21> ->
			_cor21
		    catch <_cor24,_cor23,_cor22> ->
			case <_cor24,_cor23,_cor22> of
			  %% Line 216
			  <'error',AnyError,_cor47> when 'true' ->
			      let <_cor26> =
				  %% Line 217
				  case AnyError of
				    %% Line 218
				    <'system_limit'> when 'true' ->
					%% Line 219
					'system_limit'
				    %% Line 220
				    <_cor48> when 'true' ->
					%% Line 221
					'badarg'
				  end
			      in  let <_cor28> =
				      catch
					  %% Line 224
					  call 'erlang':'error'
					      ('new_stacktrace', %% Line 225
								 [ML|[Uni|['latin1']]])
				  in  %% Line 223
				      case _cor28 of
					<{'EXIT',{'new_stacktrace',[{Mod,_cor49,L,_cor50}|Rest]}}> when 'true' ->
					    %% Line 226
					    call 'erlang':'raise'
						('error', _cor26, %% Line 227
								  [{Mod,'characters_to_binary',L}|Rest])
					( <_cor29> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor29})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor24,_cor23,_cor22> when 'true' ->
				primop 'raise'
				    (_cor22, _cor23)
			    -| ['compiler_generated'] )
			end
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor30})
		  -| ['compiler_generated'] )
	      end
	  %% Line 231
	  <ML,InEncoding,OutEncoding> when 'true' ->
	      %% Line 232
	      try
		  %% Line 233
		  apply 'characters_to_binary_int'/3
		      (ML, InEncoding, OutEncoding)
	      of <_cor31> ->
		  _cor31
	      catch <_cor34,_cor33,_cor32> ->
		  case <_cor34,_cor33,_cor32> of
		    %% Line 235
		    <'error',AnyError,_cor51> when 'true' ->
			let <_cor36> =
			    %% Line 236
			    case AnyError of
			      %% Line 237
			      <'system_limit'> when 'true' ->
				  %% Line 238
				  'system_limit'
			      %% Line 239
			      <_cor52> when 'true' ->
				  %% Line 240
				  'badarg'
			    end
			in  let <_cor38> =
				catch
				    %% Line 243
				    call 'erlang':'error'
					('new_stacktrace', %% Line 244
							   [ML|[InEncoding|[OutEncoding|[]]]])
			    in  %% Line 242
				case _cor38 of
				  <{'EXIT',{'new_stacktrace',[{Mod,_cor53,L,_cor54}|Rest]}}> when 'true' ->
				      %% Line 245
				      call 'erlang':'raise'
					  ('error', _cor36, [{Mod,'characters_to_binary',L}|Rest])
				  ( <_cor39> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor39})
				    -| ['compiler_generated'] )
				end
		    ( <_cor34,_cor33,_cor32> when 'true' ->
			  primop 'raise'
			      (_cor32, _cor33)
		      -| ['compiler_generated'] )
		  end
	end
'characters_to_binary_int'/3 =
    %% Line 248
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <ML,InEncoding,OutEncoding>
	      when let <_cor5> =
		    let <_cor3> =
			%% Line 249
			call 'erlang':'=:='
			    (InEncoding, 'latin1')
		    in  let <_cor4> =
			    %% Line 249
			    call 'erlang':'=:='
				(OutEncoding, 'unicode')
			in  %% Line 249
			    call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor8> =
			let <_cor6> =
			    %% Line 250
			    call 'erlang':'=:='
				(InEncoding, 'latin1')
			in  let <_cor7> =
				%% Line 250
				call 'erlang':'=:='
				    (OutEncoding, 'utf8')
			    in  %% Line 250
				call 'erlang':'and'
				    (_cor6, _cor7)
		    in  let <_cor11> =
			    let <_cor9> =
				%% Line 251
				call 'erlang':'=:='
				    (InEncoding, 'unicode')
			    in  let <_cor10> =
				    %% Line 251
				    call 'erlang':'=:='
					(OutEncoding, 'unicode')
				in  %% Line 251
				    call 'erlang':'and'
					(_cor9, _cor10)
			in  let <_cor14> =
				let <_cor12> =
				    %% Line 252
				    call 'erlang':'=:='
					(InEncoding, 'unicode')
				in  let <_cor13> =
					%% Line 252
					call 'erlang':'=:='
					    (OutEncoding, 'utf8')
				    in  %% Line 252
					call 'erlang':'and'
					    (_cor12, _cor13)
			    in  let <_cor17> =
				    let <_cor15> =
					%% Line 253
					call 'erlang':'=:='
					    (InEncoding, 'utf8')
				    in  let <_cor16> =
					    %% Line 253
					    call 'erlang':'=:='
						(OutEncoding, 'unicode')
					in  %% Line 253
					    call 'erlang':'and'
						(_cor15, _cor16)
				in  let <_cor20> =
					let <_cor18> =
					    %% Line 254
					    call 'erlang':'=:='
						(InEncoding, 'utf8')
					in  let <_cor19> =
						%% Line 254
						call 'erlang':'=:='
						    (OutEncoding, 'utf8')
					    in  %% Line 254
						call 'erlang':'and'
						    (_cor18, _cor19)
				    in  let <_cor21> =
					    %% Line 253
					    call 'erlang':'or'
						(_cor17, _cor20)
					in  let <_cor22> =
						%% Line 252
						call 'erlang':'or'
						    (_cor14, _cor21)
					    in  let <_cor23> =
						    %% Line 251
						    call 'erlang':'or'
							(_cor11, _cor22)
						in  let <_cor24> =
							%% Line 250
							call 'erlang':'or'
							    (_cor8, _cor23)
						    in  %% Line 249
							call 'erlang':'or'
							    (_cor5, _cor24) ->
	      %% Line 255
	      call 'unicode':'characters_to_binary'
		  (ML, InEncoding)
	  %% Line 257
	  <ML,InEncoding,OutEncoding> when 'true' ->
	      let <InTrans,Limit> =
		  %% Line 258
		  case OutEncoding of
		    %% Line 259
		    <'latin1'> when 'true' ->
			let <_cor25> =
			    apply 'i_trans_chk'/1
				(InEncoding)
			in  <_cor25,255>
		    %% Line 260
		    <_cor52> when 'true' ->
			let <_cor28> =
			    apply 'i_trans'/1
				(InEncoding)
			in  let <_cor27> =
				case InEncoding of
				  <'latin1'> when 'true' ->
				      255
				  <_cor53> when 'true' ->
				      1114111
				end
			    in  <_cor28,_cor27>
		  end
	      in  let <OutTrans> =
		      %% Line 262
		      apply 'o_trans'/1
			  (OutEncoding)
		  in  let <_cor46> =
			  %% Line 265
			  ( fun (_cor43,_cor42) ->
				case <_cor43,_cor42> of
				  <Part,Accum>
				      when call 'erlang':'is_binary'
					    (Part) ->
				      %% Line 266
				      case apply InTrans
					       (Part) of
					%% Line 267
					<List>
					    when call 'erlang':'is_list'
						  (List) ->
					    let <Tail> =
						%% Line 268
						apply OutTrans
						    (List)
					    in  %% Line 269
						#{#<Accum>('all',8,'binary',['unsigned'|['big']]),
						  #<Tail>('all',8,'binary',['unsigned'|['big']])}#
					%% Line 270
					<{'error',Translated,Rest}> when 'true' ->
					    let <Tail> =
						%% Line 271
						apply OutTrans
						    (Translated)
					    in  let <_cor35> =
						    %% Line 272
						    #{#<Accum>('all',8,'binary',['unsigned'|['big']]),
						      #<Tail>('all',8,'binary',['unsigned'|['big']])}#
						in  %% Line 272
						    {'error',_cor35,Rest}
					%% Line 273
					<{'incomplete',Translated,Rest,Missing}> when 'true' ->
					    let <Tail> =
						%% Line 274
						apply OutTrans
						    (Translated)
					    in  let <_cor37> =
						    %% Line 275
						    #{#<Accum>('all',8,'binary',['unsigned'|['big']]),
						      #<Tail>('all',8,'binary',['unsigned'|['big']])}#
						in  %% Line 275
						    {'incomplete',_cor37,Rest,%% Line 276
									      Missing}
					( <_cor38> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor38})
					  -| ['compiler_generated'] )
				      end
				  %% Line 278
				  <Part,Accum>
				      when let <_cor39> =
					    call 'erlang':'is_integer'
						(Part)
					in  let <_cor40> =
						call 'erlang':'=<'
						    (Part, Limit)
					    in  call 'erlang':'and'
						    (_cor39, _cor40) ->
				      %% Line 279
				      case apply OutTrans
					       ([Part|[]]) of
					%% Line 280
					<Binary>
					    when call 'erlang':'is_binary'
						  (Binary) ->
					    %% Line 281
					    #{#<Accum>('all',8,'binary',['unsigned'|['big']]),
					      #<Binary>('all',8,'binary',['unsigned'|['big']])}#
					%% Line 282
					<{'error',_cor54,[_cor55|[]]}>
					    when call 'erlang':'=:='
						  (_cor55,
						   Part) ->
					    %% Line 283
					    {'error',Accum,[Part|[]]}
					( <_cor41> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor41})
					  -| ['compiler_generated'] )
				      end
				  %% Line 285
				  <Part,Accum> when 'true' ->
				      %% Line 286
				      {'error',Accum,[Part|[]]}
				end
			    -| [{'id',{0,0,'-characters_to_binary_int/3-fun-0-'}}] )
		      in  let <Res> =
			      %% Line 264
			      apply 'ml_map'/3
				  (ML, _cor46, %% Line 287
					       #{}#)
			  in  %% Line 288
			      case Res of
				%% Line 289
				<{'incomplete',A,B,_cor56}> when 'true' ->
				    %% Line 290
				    {'incomplete',A,B}
				%% Line 291
				<_cor57> when 'true' ->
				    %% Line 292
				    Res
			      end
	end
'bom_to_encoding'/1 =
    %% Line 302
    fun (_cor0) ->
	case _cor0 of
	  <#{#<239>(8,1,'integer',['unsigned'|['big']]),
	     #<187>(8,1,'integer',['unsigned'|['big']]),
	     #<191>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 303
	      {'utf8',3}
	  %% Line 304
	  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
	     #<0>(8,1,'integer',['unsigned'|['big']]),
	     #<254>(8,1,'integer',['unsigned'|['big']]),
	     #<255>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor3>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 305
	      {{'utf32','big'},4}
	  %% Line 306
	  <#{#<255>(8,1,'integer',['unsigned'|['big']]),
	     #<254>(8,1,'integer',['unsigned'|['big']]),
	     #<0>(8,1,'integer',['unsigned'|['big']]),
	     #<0>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor4>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 307
	      {{'utf32','little'},4}
	  %% Line 308
	  <#{#<254>(8,1,'integer',['unsigned'|['big']]),
	     #<255>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor5>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 309
	      {{'utf16','big'},2}
	  %% Line 310
	  <#{#<255>(8,1,'integer',['unsigned'|['big']]),
	     #<254>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor6>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 311
	      {{'utf16','little'},2}
	  %% Line 312
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 313
	      {'latin1',0}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'bom_to_encoding',1}}] )
	    -| ['compiler_generated'] )
	end
'encoding_to_bom'/1 =
    %% Line 319
    fun (_cor0) ->
	case _cor0 of
	  <'unicode'> when 'true' ->
	      %% Line 320
	      #{#<239>(8,1,'integer',['unsigned'|['big']]),
		#<187>(8,1,'integer',['unsigned'|['big']]),
		#<191>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 321
	  <'utf8'> when 'true' ->
	      %% Line 322
	      #{#<239>(8,1,'integer',['unsigned'|['big']]),
		#<187>(8,1,'integer',['unsigned'|['big']]),
		#<191>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 323
	  <'utf16'> when 'true' ->
	      %% Line 324
	      #{#<254>(8,1,'integer',['unsigned'|['big']]),
		#<255>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 325
	  <{'utf16','big'}> when 'true' ->
	      %% Line 326
	      #{#<254>(8,1,'integer',['unsigned'|['big']]),
		#<255>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 327
	  <{'utf16','little'}> when 'true' ->
	      %% Line 328
	      #{#<255>(8,1,'integer',['unsigned'|['big']]),
		#<254>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 329
	  <'utf32'> when 'true' ->
	      %% Line 330
	      #{#<0>(8,1,'integer',['unsigned'|['big']]),
		#<0>(8,1,'integer',['unsigned'|['big']]),
		#<254>(8,1,'integer',['unsigned'|['big']]),
		#<255>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 331
	  <{'utf32','big'}> when 'true' ->
	      %% Line 332
	      #{#<0>(8,1,'integer',['unsigned'|['big']]),
		#<0>(8,1,'integer',['unsigned'|['big']]),
		#<254>(8,1,'integer',['unsigned'|['big']]),
		#<255>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 333
	  <{'utf32','little'}> when 'true' ->
	      %% Line 334
	      #{#<255>(8,1,'integer',['unsigned'|['big']]),
		#<254>(8,1,'integer',['unsigned'|['big']]),
		#<0>(8,1,'integer',['unsigned'|['big']]),
		#<0>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 335
	  <'latin1'> when 'true' ->
	      %% Line 336
	      #{}#
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'encoding_to_bom',1}}] )
	    -| ['compiler_generated'] )
	end
'cbv'/2 =
    %% Line 339
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'utf8',#{#<1>(1,1,'integer',['unsigned'|['big']]),
		    #<1>(1,1,'integer',['unsigned'|['big']]),
		    #<0>(1,1,'integer',['unsigned'|['big']]),
		    #<_cor22>(5,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 340
	      1
	  %% Line 341
	  <'utf8',#{#<1>(1,1,'integer',['unsigned'|['big']]),
		    #<1>(1,1,'integer',['unsigned'|['big']]),
		    #<1>(1,1,'integer',['unsigned'|['big']]),
		    #<0>(1,1,'integer',['unsigned'|['big']]),
		    #<_cor23>(4,1,'integer',['unsigned'|['big']]),
		    #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 342
	      case ( R
		     -| ['reuse_for_context'] ) of
		%% Line 343
		<#{}#> when 'true' ->
		    %% Line 344
		    2
		%% Line 345
		<#{#<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<_cor24>(6,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 346
		    1
		%% Line 347
		<_cor25> when 'true' ->
		    %% Line 348
		    'false'
	      end
	  %% Line 350
	  <'utf8',#{#<1>(1,1,'integer',['unsigned'|['big']]),
		    #<1>(1,1,'integer',['unsigned'|['big']]),
		    #<1>(1,1,'integer',['unsigned'|['big']]),
		    #<1>(1,1,'integer',['unsigned'|['big']]),
		    #<0>(1,1,'integer',['unsigned'|['big']]),
		    #<_cor26>(3,1,'integer',['unsigned'|['big']]),
		    #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 351
	      case ( R
		     -| ['reuse_for_context'] ) of
		%% Line 352
		<#{}#> when 'true' ->
		    %% Line 353
		    3
		%% Line 354
		<#{#<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<_cor27>(6,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 355
		    2
		%% Line 356
		<#{#<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<_cor28>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<_cor29>(6,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 357
		    1
		%% Line 358
		<_cor30> when 'true' ->
		    %% Line 359
		    'false'
	      end
	  %% Line 361
	  <'utf8',_cor31> when 'true' ->
	      %% Line 362
	      'false'
	  %% Line 364
	  <{'utf16','big'},#{#<A>(8,1,'integer',['unsigned'|['big']])}#>
	      when let <_cor4> =
		    call 'erlang':'=<'
			(A, 215)
		in  let <_cor5> =
			call 'erlang':'>='
			    (A, 224)
		    in  call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 365
	      1
	  %% Line 366
	  <{'utf16','big'},#{#<54>(6,1,'integer',['unsigned'|['big']]),
			     #<_cor32>(2,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 367
	      3
	  %% Line 368
	  <{'utf16','big'},#{#<54>(6,1,'integer',['unsigned'|['big']]),
			     #<_cor33>(10,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 369
	      2
	  %% Line 370
	  <{'utf16','big'},#{#<54>(6,1,'integer',['unsigned'|['big']]),
			     #<_cor34>(10,1,'integer',['unsigned'|['big']]),
			     #<55>(6,1,'integer',['unsigned'|['big']]),
			     #<_cor35>(2,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 371
	      1
	  %% Line 372
	  <{'utf16','big'},_cor36> when 'true' ->
	      %% Line 373
	      'false'
	  %% Line 374
	  <{'utf16','little'},#{#<_cor37>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 375
	      1
	  %% Line 376
	  <{'utf16','little'},#{#<_cor38>(8,1,'integer',['unsigned'|['big']]),
				#<54>(6,1,'integer',['unsigned'|['big']]),
				#<_cor39>(2,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 377
	      2
	  %% Line 378
	  <{'utf16','little'},#{#<_cor40>(8,1,'integer',['unsigned'|['big']]),
				#<54>(6,1,'integer',['unsigned'|['big']]),
				#<_cor41>(2,1,'integer',['unsigned'|['big']]),
				#<_cor42>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 379
	      1
	  %% Line 380
	  <{'utf16','little'},_cor43> when 'true' ->
	      %% Line 381
	      'false'
	  %% Line 384
	  <{'utf32','big'},#{#<0>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 385
	      3
	  %% Line 386
	  <{'utf32','big'},#{#<0>(8,1,'integer',['unsigned'|['big']]),
			     #<X>(8,1,'integer',['unsigned'|['big']])}#>
	      when call 'erlang':'=<'
		    (X,
		     16) ->
	      %% Line 387
	      2
	  %% Line 388
	  <{'utf32','big'},#{#<0>(8,1,'integer',['unsigned'|['big']]),
			     #<X>(8,1,'integer',['unsigned'|['big']]),
			     #<Y>(8,1,'integer',['unsigned'|['big']])}#>
	      when %% Line 389
		try
		    let <_cor6> =
			call 'erlang':'=<'
			    (X, 16)
		    in  let <_cor7> =
			    call 'erlang':'>'
				(X, 0)
			in  let <_cor8> =
				call 'erlang':'=<'
				    (Y, 215)
			    in  let <_cor9> =
				    call 'erlang':'>='
					(Y, 224)
				in  let <_cor10> =
					call 'erlang':'or'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'or'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 390
	      1
	  %% Line 391
	  <{'utf32','big'},_cor44> when 'true' ->
	      %% Line 392
	      'false'
	  %% Line 393
	  <{'utf32','little'},#{#<_cor45>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 394
	      3
	  %% Line 395
	  <{'utf32','little'},#{#<_cor46>(8,1,'integer',['unsigned'|['big']]),
				#<_cor47>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 396
	      2
	  %% Line 397
	  <{'utf32','little'},#{#<X>(8,1,'integer',['unsigned'|['big']]),
				#<255>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']])}#>
	      when let <_cor12> =
		    call 'erlang':'=:='
			(X, 254)
		in  let <_cor13> =
			call 'erlang':'=:='
			    (X, 255)
		    in  call 'erlang':'or'
			    (_cor12, _cor13) ->
	      %% Line 398
	      'false'
	  %% Line 399
	  <{'utf32','little'},#{#<_cor48>(8,1,'integer',['unsigned'|['big']]),
				#<Y>(8,1,'integer',['unsigned'|['big']]),
				#<X>(8,1,'integer',['unsigned'|['big']])}#>
	      when %% Line 400
		try
		    let <_cor14> =
			call 'erlang':'=<'
			    (X, 16)
		    in  let <_cor15> =
			    call 'erlang':'>'
				(X, 0)
			in  let <_cor16> =
				call 'erlang':'=<'
				    (Y, 215)
			    in  let <_cor17> =
				    call 'erlang':'>='
					(Y, 224)
				in  let <_cor18> =
					call 'erlang':'or'
					    (_cor16, _cor17)
				    in  let <_cor19> =
					    call 'erlang':'or'
						(_cor15, _cor18)
					in  call 'erlang':'and'
						(_cor14, _cor19)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 401
	      1
	  %% Line 402
	  <{'utf32','little'},_cor49> when 'true' ->
	      %% Line 403
	      'false'
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'cbv',2}}] )
	    -| ['compiler_generated'] )
	end
'ml_map'/3 =
    %% Line 406
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor26,{{Inc,X},Accum}> when 'true' ->
	      %% Line 407
	      {'incomplete',Accum,Inc,X}
	  %% Line 408
	  <[],_X_Fun,Accum> when 'true' ->
	      %% Line 409
	      Accum
	  %% Line 410
	  <Whole = [Part|_cor27],_cor28,{{Incomplete,_cor29},Accum}>
	      when call 'erlang':'is_integer'
		    (Part) ->
	      %% Line 411
	      {'error',Accum,[Incomplete|Whole]}
	  %% Line 412
	  <[Part|T],Fun,Accum>
	      when call 'erlang':'is_integer'
		    (Part) ->
	      %% Line 413
	      case apply Fun
		       (Part, Accum) of
		%% Line 414
		<Bin>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    %% Line 415
		    case apply 'ml_map'/3
			     (T, Fun, Bin) of
		      %% Line 416
		      <Bin2>
			  when call 'erlang':'is_binary'
				(Bin2) ->
			  %% Line 417
			  Bin2
		      %% Line 418
		      <{'error',Converted,Rest}> when 'true' ->
			  %% Line 419
			  {'error',Converted,Rest}
		      %% Line 420
		      <{'incomplete',Converted,Rest,X}> when 'true' ->
			  %% Line 421
			  {'incomplete',Converted,Rest,X}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 424
		<{'error',Converted,Rest}> when 'true' ->
		    %% Line 425
		    {'error',Converted,[Rest|T]}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 427
	  <[Part|T],Fun,{{Incomplete,Missing},Accum}>
	      when call 'erlang':'is_binary'
		    (Part) ->
	      %% Line 429
	      case call 'erlang':'byte_size'
		       (Part) of
		%% Line 430
		<N>
		    when call 'erlang':'>='
			  (N,
			   Missing) ->
		    %% Line 431
		    case ( Part
			   -| ['reuse_for_context'] ) of
		      <#{#<FillIn>(Missing,8,'binary',['unsigned'|['big']]),
			 #<Trailing>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <NewPart> =
			      %% Line 432
			      #{#<Incomplete>('all',8,'binary',['unsigned'|['big']]),
				#<FillIn>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 433
			      apply 'ml_map'/3
				  ([NewPart|[Trailing|T]], Fun, Accum)
		      ( <_cor5> when 'true' ->
			    do  primop 'bs_context_to_binary'
				    (_cor5)
				primop 'match_fail'
				    ({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 434
		<M> when 'true' ->
		    let <NewIncomplete> =
			%% Line 435
			#{#<Incomplete>('all',8,'binary',['unsigned'|['big']]),
			  #<Part>('all',8,'binary',['unsigned'|['big']])}#
		    in  let <NewMissing> =
			    %% Line 436
			    call 'erlang':'-'
				(Missing, M)
			in  %% Line 437
			    apply 'ml_map'/3
				(T, Fun, {{NewIncomplete,NewMissing},Accum})
	      end
	  %% Line 439
	  <[Part|T],Fun,Accum>
	      when try
		    let <_cor10> =
			call 'erlang':'is_binary'
			    (Part)
		    in  let <_cor11> =
			    call 'erlang':'byte_size'
				(Part)
			in  let <_cor12> =
				call 'erlang':'>'
				    (_cor11, 8192)
			    in  call 'erlang':'and'
				    (_cor10, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 440
	      case ( Part
		     -| ['reuse_for_context'] ) of
		<#{#<Part1>(8192,8,'binary',['unsigned'|['big']]),
		   #<Part2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 441
		    apply 'ml_map'/3
			([Part1|[Part2|T]], Fun, Accum)
		( <_cor13> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor13)
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 442
	  <[Part|T],Fun,Accum>
	      when call 'erlang':'is_binary'
		    (Part) ->
	      %% Line 443
	      case apply Fun
		       (Part, Accum) of
		%% Line 444
		<Bin>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    %% Line 445
		    apply 'ml_map'/3
			(T, Fun, Bin)
		%% Line 446
		<{'incomplete',Converted,Rest,Missing}> when 'true' ->
		    %% Line 447
		    apply 'ml_map'/3
			(T, Fun, {{Rest,Missing},Converted})
		%% Line 448
		<{'error',Converted,Rest}> when 'true' ->
		    %% Line 449
		    {'error',Converted,[Rest|T]}
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 451
	  <[List|T],Fun,Accum>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 452
	      case apply 'ml_map'/3
		       (List, Fun, Accum) of
		%% Line 453
		<Bin>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    %% Line 454
		    apply 'ml_map'/3
			(T, Fun, Bin)
		%% Line 455
		<{'error',Converted,Rest}> when 'true' ->
		    %% Line 456
		    {'error',Converted,[Rest|T]}
		%% Line 457
		<{'incomplete',Converted,Rest,N}> when 'true' ->
		    %% Line 458
		    apply 'ml_map'/3
			(T, Fun, {{Rest,N},Converted})
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 460
	  <Bin,Fun,{{Incomplete,Missing},Accum}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 461
	      case call 'erlang':'byte_size'
		       (Bin) of
		%% Line 462
		<N>
		    when call 'erlang':'>='
			  (N,
			   Missing) ->
		    %% Line 463
		    apply 'ml_map'/3
			([Incomplete|[Bin|[]]], Fun, Accum)
		%% Line 464
		<M> when 'true' ->
		    let <_cor17> =
			%% Line 465
			#{#<Incomplete>('all',8,'binary',['unsigned'|['big']]),
			  #<Bin>('all',8,'binary',['unsigned'|['big']])}#
		    in  let <_cor16> =
			    %% Line 465
			    call 'erlang':'-'
				(Missing, M)
			in  %% Line 465
			    {'incomplete',Accum,_cor17,_cor16}
	      end
	  %% Line 467
	  <Part,Fun,Accum>
	      when try
		    let <_cor19> =
			call 'erlang':'is_binary'
			    (Part)
		    in  let <_cor20> =
			    call 'erlang':'byte_size'
				(Part)
			in  let <_cor21> =
				call 'erlang':'>'
				    (_cor20, 8192)
			    in  call 'erlang':'and'
				    (_cor19, _cor21)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 468
	      case ( Part
		     -| ['reuse_for_context'] ) of
		<#{#<Part1>(8192,8,'binary',['unsigned'|['big']]),
		   #<Part2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 469
		    apply 'ml_map'/3
			([Part1|[Part2|[]]], Fun, Accum)
		( <_cor22> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor22)
			  primop 'match_fail'
			      ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 470
	  <Bin,Fun,Accum>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 471
	      apply Fun
		  (Bin, Accum)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'ml_map',3}}] )
	    -| ['compiler_generated'] )
	end
'i_trans'/1 =
    %% Line 477
    fun (_cor0) ->
	case _cor0 of
	  <'latin1'> when 'true' ->
	      %% Line 478
	      ( fun (_cor1) ->
		    call 'erlang':'binary_to_list'
			(_cor1)
		-| [{'id',{0,0,'-i_trans/1-fun-0-'}}] )
	  %% Line 479
	  <'unicode'> when 'true' ->
	      %% Line 480
	      apply 'i_trans'/1
		  ('utf8')
	  %% Line 481
	  <'utf8'> when 'true' ->
	      %% Line 482
	      ( 'do_i_utf8'/1
		-| [{'id',{0,0,'-i_trans/1-fun-1-'}}] )
	  %% Line 483
	  <'utf16'> when 'true' ->
	      %% Line 484
	      ( 'do_i_utf16_big'/1
		-| [{'id',{0,0,'-i_trans/1-fun-2-'}}] )
	  %% Line 485
	  <{'utf16','big'}> when 'true' ->
	      %% Line 486
	      ( 'do_i_utf16_big'/1
		-| [{'id',{0,0,'-i_trans/1-fun-3-'}}] )
	  %% Line 487
	  <{'utf16','little'}> when 'true' ->
	      %% Line 488
	      ( 'do_i_utf16_little'/1
		-| [{'id',{0,0,'-i_trans/1-fun-4-'}}] )
	  %% Line 489
	  <'utf32'> when 'true' ->
	      %% Line 490
	      ( 'do_i_utf32_big'/1
		-| [{'id',{0,0,'-i_trans/1-fun-5-'}}] )
	  %% Line 491
	  <{'utf32','big'}> when 'true' ->
	      %% Line 492
	      ( 'do_i_utf32_big'/1
		-| [{'id',{0,0,'-i_trans/1-fun-6-'}}] )
	  %% Line 493
	  <{'utf32','little'}> when 'true' ->
	      %% Line 494
	      ( 'do_i_utf32_little'/1
		-| [{'id',{0,0,'-i_trans/1-fun-7-'}}] )
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'i_trans',1}}] )
	    -| ['compiler_generated'] )
	end
'i_trans_chk'/1 =
    %% Line 496
    fun (_cor0) ->
	case _cor0 of
	  <'latin1'> when 'true' ->
	      %% Line 497
	      ( fun (_cor1) ->
		    call 'erlang':'binary_to_list'
			(_cor1)
		-| [{'id',{0,0,'-i_trans_chk/1-fun-0-'}}] )
	  %% Line 498
	  <'unicode'> when 'true' ->
	      %% Line 499
	      apply 'i_trans_chk'/1
		  ('utf8')
	  %% Line 500
	  <'utf8'> when 'true' ->
	      %% Line 501
	      ( 'do_i_utf8_chk'/1
		-| [{'id',{0,0,'-i_trans_chk/1-fun-1-'}}] )
	  %% Line 502
	  <'utf16'> when 'true' ->
	      %% Line 503
	      ( 'do_i_utf16_big_chk'/1
		-| [{'id',{0,0,'-i_trans_chk/1-fun-2-'}}] )
	  %% Line 504
	  <{'utf16','big'}> when 'true' ->
	      %% Line 505
	      ( 'do_i_utf16_big_chk'/1
		-| [{'id',{0,0,'-i_trans_chk/1-fun-3-'}}] )
	  %% Line 506
	  <{'utf16','little'}> when 'true' ->
	      %% Line 507
	      ( 'do_i_utf16_little_chk'/1
		-| [{'id',{0,0,'-i_trans_chk/1-fun-4-'}}] )
	  %% Line 508
	  <'utf32'> when 'true' ->
	      %% Line 509
	      ( 'do_i_utf32_big_chk'/1
		-| [{'id',{0,0,'-i_trans_chk/1-fun-5-'}}] )
	  %% Line 510
	  <{'utf32','big'}> when 'true' ->
	      %% Line 511
	      ( 'do_i_utf32_big_chk'/1
		-| [{'id',{0,0,'-i_trans_chk/1-fun-6-'}}] )
	  %% Line 512
	  <{'utf32','little'}> when 'true' ->
	      %% Line 513
	      ( 'do_i_utf32_little_chk'/1
		-| [{'id',{0,0,'-i_trans_chk/1-fun-7-'}}] )
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'i_trans_chk',1}}] )
	    -| ['compiler_generated'] )
	end
'o_trans'/1 =
    %% Line 515
    fun (_cor0) ->
	case _cor0 of
	  <'latin1'> when 'true' ->
	      %% Line 516
	      ( fun (_cor1) ->
		    call 'erlang':'list_to_binary'
			(_cor1)
		-| [{'id',{0,0,'-o_trans/1-fun-0-'}}] )
	  %% Line 517
	  <'unicode'> when 'true' ->
	      %% Line 518
	      apply 'o_trans'/1
		  ('utf8')
	  %% Line 519
	  <'utf8'> when 'true' ->
	      %% Line 520
	      ( fun (_cor6) ->
		    let <_cor5> =
			%% Line 521
			( fun (_cor3) ->
			      %% Line 522
			      #{#<_cor3>('undefined','undefined','utf8',['unsigned'|['big']])}#
			  -| [{'id',{0,0,'-o_trans/1-fun-1-'}}] )
		    in  %% Line 521
			apply 'do_o_binary'/2
			    (_cor5, _cor6)
		-| [{'id',{0,0,'-o_trans/1-fun-2-'}}] )
	  %% Line 526
	  <'utf16'> when 'true' ->
	      %% Line 527
	      ( fun (_cor11) ->
		    let <_cor10> =
			%% Line 528
			( fun (_cor8) ->
			      %% Line 529
			      #{#<_cor8>('undefined','undefined','utf16',['unsigned'|['big']])}#
			  -| [{'id',{0,0,'-o_trans/1-fun-3-'}}] )
		    in  %% Line 528
			apply 'do_o_binary'/2
			    (_cor10, _cor11)
		-| [{'id',{0,0,'-o_trans/1-fun-4-'}}] )
	  %% Line 532
	  <{'utf16','big'}> when 'true' ->
	      %% Line 533
	      apply 'o_trans'/1
		  ('utf16')
	  %% Line 534
	  <{'utf16','little'}> when 'true' ->
	      %% Line 535
	      ( fun (_cor16) ->
		    let <_cor15> =
			%% Line 536
			( fun (_cor13) ->
			      %% Line 537
			      #{#<_cor13>('undefined','undefined','utf16',['unsigned'|['little']])}#
			  -| [{'id',{0,0,'-o_trans/1-fun-5-'}}] )
		    in  %% Line 536
			apply 'do_o_binary'/2
			    (_cor15, _cor16)
		-| [{'id',{0,0,'-o_trans/1-fun-6-'}}] )
	  %% Line 540
	  <'utf32'> when 'true' ->
	      %% Line 541
	      ( fun (_cor21) ->
		    let <_cor20> =
			%% Line 542
			( fun (_cor18) ->
			      %% Line 543
			      #{#<_cor18>('undefined','undefined','utf32',['unsigned'|['big']])}#
			  -| [{'id',{0,0,'-o_trans/1-fun-7-'}}] )
		    in  %% Line 542
			apply 'do_o_binary'/2
			    (_cor20, _cor21)
		-| [{'id',{0,0,'-o_trans/1-fun-8-'}}] )
	  %% Line 546
	  <{'utf32','big'}> when 'true' ->
	      %% Line 547
	      apply 'o_trans'/1
		  ('utf32')
	  %% Line 548
	  <{'utf32','little'}> when 'true' ->
	      %% Line 549
	      ( fun (_cor26) ->
		    let <_cor25> =
			%% Line 550
			( fun (_cor23) ->
			      %% Line 551
			      #{#<_cor23>('undefined','undefined','utf32',['unsigned'|['little']])}#
			  -| [{'id',{0,0,'-o_trans/1-fun-9-'}}] )
		    in  %% Line 550
			apply 'do_o_binary'/2
			    (_cor25, _cor26)
		-| [{'id',{0,0,'-o_trans/1-fun-10-'}}] )
	  ( <_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28})
		  -| [{'function_name',{'o_trans',1}}] )
	    -| ['compiler_generated'] )
	end
'do_o_binary'/2 =
    %% Line 555
    fun (_cor1,_cor0) ->
	%% Line 556
	case apply 'do_o_binary2'/2
		 (_cor1, _cor0) of
	  %% Line 557
	  <{Tag,List,R}> when 'true' ->
	      let <_cor2> =
		  %% Line 558
		  call 'erlang':'iolist_to_binary'
		      (List)
	      in  %% Line 558
		  {Tag,_cor2,R}
	  %% Line 559
	  <List> when 'true' ->
	      %% Line 560
	      call 'erlang':'iolist_to_binary'
		  (List)
	end
'do_o_binary2'/2 =
    %% Line 563
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_F,[]> when 'true' ->
	      %% Line 564
	      #{}#
	  %% Line 565
	  <F,[H|T]> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 566
		      apply F
			  (H)
	      in  %% Line 566
		  case _cor2 of
		    %% Line 567
		    <{'EXIT',_cor7}> when 'true' ->
			%% Line 568
			{'error',#{}#,[H|T]}
		    %% Line 569
		    <Bin>
			when call 'erlang':'is_binary'
			      (_cor2) ->
			%% Line 570
			case apply 'do_o_binary2'/2
				 (F, T) of
			  %% Line 571
			  <{'error',Bin2,Rest}> when 'true' ->
			      %% Line 572
			      {'error',[Bin|Bin2],Rest}
			  %% Line 573
			  <Bin3> when 'true' ->
			      %% Line 574
			      [Bin|Bin3]
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'do_o_binary2',2}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf8_chk'/1 =
    %% Line 580
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 581
	      []
	  %% Line 582
	  <#{#<U>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'=<'
		    (U,
		     255) ->
	      %% Line 583
	      case apply 'do_i_utf8_chk'/1
		       (R) of
		%% Line 584
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 585
		    {'error',[U|Trans],Rest}
		%% Line 586
		<{'incomplete',Trans,Rest,N}> when 'true' ->
		    %% Line 587
		    {'incomplete',[U|Trans],Rest,N}
		%% Line 588
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 589
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 591
	  <Bin = #{#<_cor4>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<_cor5>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 592
	      {'error',[],Bin}
	  %% Line 593
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 594
	      case apply 'cbv'/2
		       ('utf8', Bin) of
		%% Line 595
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 596
		    {'incomplete',[],Bin,N}
		%% Line 597
		<'false'> when 'true' ->
		    %% Line 598
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf8_chk',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf16_big_chk'/1 =
    %% Line 600
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 601
	      []
	  %% Line 602
	  <#{#<U>('undefined','undefined','utf16',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'=<'
		    (U,
		     255) ->
	      %% Line 603
	      case apply 'do_i_utf16_big_chk'/1
		       (R) of
		%% Line 604
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 605
		    {'error',[U|Trans],Rest}
		%% Line 606
		<{'incomplete',Trans,Rest,N}> when 'true' ->
		    %% Line 607
		    {'incomplete',[U|Trans],Rest,N}
		%% Line 608
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 609
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 611
	  <Bin = #{#<_cor4>('undefined','undefined','utf16',['unsigned'|['big']]),
		   #<_cor5>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 612
	      {'error',[],Bin}
	  %% Line 613
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 614
	      case apply 'cbv'/2
		       ({'utf16','big'}, Bin) of
		%% Line 615
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 616
		    {'incomplete',[],Bin,N}
		%% Line 617
		<'false'> when 'true' ->
		    %% Line 618
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf16_big_chk',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf16_little_chk'/1 =
    %% Line 620
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 621
	      []
	  %% Line 622
	  <#{#<U>('undefined','undefined','utf16',['unsigned'|['little']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'=<'
		    (U,
		     255) ->
	      %% Line 623
	      case apply 'do_i_utf16_little_chk'/1
		       (R) of
		%% Line 624
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 625
		    {'error',[U|Trans],Rest}
		%% Line 626
		<{'incomplete',Trans,Rest,N}> when 'true' ->
		    %% Line 627
		    {'incomplete',[U|Trans],Rest,N}
		%% Line 628
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 629
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 631
	  <Bin = #{#<_cor4>('undefined','undefined','utf16',['unsigned'|['little']]),
		   #<_cor5>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 632
	      {'error',[],Bin}
	  %% Line 633
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 634
	      case apply 'cbv'/2
		       ({'utf16','little'}, Bin) of
		%% Line 635
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 636
		    {'incomplete',[],Bin,N}
		%% Line 637
		<'false'> when 'true' ->
		    %% Line 638
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf16_little_chk',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf32_big_chk'/1 =
    %% Line 642
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 643
	      []
	  %% Line 644
	  <#{#<U>('undefined','undefined','utf32',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'=<'
		    (U,
		     255) ->
	      %% Line 645
	      case apply 'do_i_utf32_big_chk'/1
		       (R) of
		%% Line 646
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 647
		    {'error',[U|Trans],Rest}
		%% Line 648
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 649
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 651
	  <Bin = #{#<_cor4>('undefined','undefined','utf32',['unsigned'|['big']]),
		   #<_cor5>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 652
	      {'error',[],Bin}
	  %% Line 653
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 654
	      case apply 'cbv'/2
		       ({'utf32','big'}, Bin) of
		%% Line 655
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 656
		    {'incomplete',[],Bin,N}
		%% Line 657
		<'false'> when 'true' ->
		    %% Line 658
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf32_big_chk',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf32_little_chk'/1 =
    %% Line 660
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 661
	      []
	  %% Line 662
	  <#{#<U>('undefined','undefined','utf32',['unsigned'|['little']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'=<'
		    (U,
		     255) ->
	      %% Line 663
	      case apply 'do_i_utf32_little_chk'/1
		       (R) of
		%% Line 664
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 665
		    {'error',[U|Trans],Rest}
		%% Line 666
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 667
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 669
	  <Bin = #{#<_cor4>('undefined','undefined','utf32',['unsigned'|['little']]),
		   #<_cor5>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 670
	      {'error',[],Bin}
	  %% Line 671
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 672
	      case apply 'cbv'/2
		       ({'utf32','little'}, Bin) of
		%% Line 673
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 674
		    {'incomplete',[],Bin,N}
		%% Line 675
		<'false'> when 'true' ->
		    %% Line 676
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf32_little_chk',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf8'/1 =
    %% Line 682
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 683
	      []
	  %% Line 684
	  <#{#<U>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 685
	      case apply 'do_i_utf8'/1
		       (R) of
		%% Line 686
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 687
		    {'error',[U|Trans],Rest}
		%% Line 688
		<{'incomplete',Trans,Rest,N}> when 'true' ->
		    %% Line 689
		    {'incomplete',[U|Trans],Rest,N}
		%% Line 690
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 691
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 693
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 694
	      case apply 'cbv'/2
		       ('utf8', Bin) of
		%% Line 695
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 696
		    {'incomplete',[],Bin,N}
		%% Line 697
		<'false'> when 'true' ->
		    %% Line 698
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf8',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf16_big'/1 =
    %% Line 701
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 702
	      []
	  %% Line 703
	  <#{#<U>('undefined','undefined','utf16',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 704
	      case apply 'do_i_utf16_big'/1
		       (R) of
		%% Line 705
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 706
		    {'error',[U|Trans],Rest}
		%% Line 707
		<{'incomplete',Trans,Rest,N}> when 'true' ->
		    %% Line 708
		    {'incomplete',[U|Trans],Rest,N}
		%% Line 709
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 710
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 712
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 713
	      case apply 'cbv'/2
		       ({'utf16','big'}, Bin) of
		%% Line 714
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 715
		    {'incomplete',[],Bin,N}
		%% Line 716
		<'false'> when 'true' ->
		    %% Line 717
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf16_big',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf16_little'/1 =
    %% Line 719
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 720
	      []
	  %% Line 721
	  <#{#<U>('undefined','undefined','utf16',['unsigned'|['little']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 722
	      case apply 'do_i_utf16_little'/1
		       (R) of
		%% Line 723
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 724
		    {'error',[U|Trans],Rest}
		%% Line 725
		<{'incomplete',Trans,Rest,N}> when 'true' ->
		    %% Line 726
		    {'incomplete',[U|Trans],Rest,N}
		%% Line 727
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 728
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 730
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 731
	      case apply 'cbv'/2
		       ({'utf16','little'}, Bin) of
		%% Line 732
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 733
		    {'incomplete',[],Bin,N}
		%% Line 734
		<'false'> when 'true' ->
		    %% Line 735
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf16_little',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf32_big'/1 =
    %% Line 739
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 740
	      []
	  %% Line 741
	  <#{#<U>('undefined','undefined','utf32',['unsigned'|['big']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 742
	      case apply 'do_i_utf32_big'/1
		       (R) of
		%% Line 743
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 744
		    {'error',[U|Trans],Rest}
		%% Line 745
		<{'incomplete',Trans,Rest,N}> when 'true' ->
		    %% Line 746
		    {'incomplete',[U|Trans],Rest,N}
		%% Line 747
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 748
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 750
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 751
	      case apply 'cbv'/2
		       ({'utf32','big'}, Bin) of
		%% Line 752
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 753
		    {'incomplete',[],Bin,N}
		%% Line 754
		<'false'> when 'true' ->
		    %% Line 755
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf32_big',1}}] )
	    -| ['compiler_generated'] )
	end
'do_i_utf32_little'/1 =
    %% Line 757
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 758
	      []
	  %% Line 759
	  <#{#<U>('undefined','undefined','utf32',['unsigned'|['little']]),
	     #<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 760
	      case apply 'do_i_utf32_little'/1
		       (R) of
		%% Line 761
		<{'error',Trans,Rest}> when 'true' ->
		    %% Line 762
		    {'error',[U|Trans],Rest}
		%% Line 763
		<{'incomplete',Trans,Rest,N}> when 'true' ->
		    %% Line 764
		    {'incomplete',[U|Trans],Rest,N}
		%% Line 765
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 766
		    [U|L]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 768
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 769
	      case apply 'cbv'/2
		       ({'utf32','little'}, Bin) of
		%% Line 770
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 771
		    {'incomplete',[],Bin,N}
		%% Line 772
		<'false'> when 'true' ->
		    %% Line 773
		    {'error',[],Bin}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_i_utf32_little',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('unicode')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('unicode', _cor0)
end