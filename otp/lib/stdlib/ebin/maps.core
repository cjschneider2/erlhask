module 'maps' ['find'/2,
	       'fold'/3,
	       'from_list'/1,
	       'get'/2,
	       'get'/3,
	       'is_key'/2,
	       'keys'/1,
	       'map'/2,
	       'merge'/2,
	       'module_info'/0,
	       'module_info'/1,
	       'new'/0,
	       'put'/3,
	       'remove'/2,
	       'size'/1,
	       'to_list'/1,
	       'update'/3,
	       'values'/1,
	       'without'/2]
    attributes [%% Line 47
		'spec' =
		    %% Line 47
		    [{{'get',2},[{'type',47,'bounded_fun',[{'type',47,'fun',[{'type',47,'product',[{'var',47,'Key'}|[{'var',47,'Map'}]]}|[{'var',47,'Value'}]]}|[[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'Key'}|[{'type',48,'term',[]}]]]]}|[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Map'}|[{'type',49,'map','any'}]]]]}|[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Value'}|[{'type',50,'term',[]}]]]]}]]]]]}]}],
		%% Line 55
		'spec' =
		    %% Line 55
		    [{{'find',2},[{'type',55,'bounded_fun',[{'type',55,'fun',[{'type',55,'product',[{'var',55,'Key'}|[{'var',55,'Map'}]]}|[{'type',55,'union',[{'type',55,'tuple',[{'atom',55,'ok'}|[{'var',55,'Value'}]]}|[{'atom',55,'error'}]]}]]}|[[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Key'}|[{'type',56,'term',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Map'}|[{'type',57,'map','any'}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Value'}|[{'type',58,'term',[]}]]]]}]]]]]}]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'from_list',1},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'List'}]}|[{'var',63,'Map'}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'List'}|[{'type',64,'list',[{'type',64,'tuple',[{'var',64,'Key'}|[{'var',64,'Value'}]]}]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Key'}|[{'type',65,'term',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Value'}|[{'type',66,'term',[]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Map'}|[{'type',67,'map','any'}]]]]}]]]]]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'is_key',2},[{'type',72,'bounded_fun',[{'type',72,'fun',[{'type',72,'product',[{'var',72,'Key'}|[{'var',72,'Map'}]]}|[{'type',72,'boolean',[]}]]}|[[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Key'}|[{'type',73,'term',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Map'}|[{'type',74,'map','any'}]]]]}]]]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'keys',1},[{'type',79,'bounded_fun',[{'type',79,'fun',[{'type',79,'product',[{'var',79,'Map'}]}|[{'var',79,'Keys'}]]}|[[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Map'}|[{'type',80,'map','any'}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'Keys'}|[{'type',81,'list',[{'var',81,'Key'}]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'Key'}|[{'type',82,'term',[]}]]]]}]]]]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'merge',2},[{'type',87,'bounded_fun',[{'type',87,'fun',[{'type',87,'product',[{'var',87,'Map1'}|[{'var',87,'Map2'}]]}|[{'var',87,'Map3'}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Map1'}|[{'type',88,'map','any'}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Map2'}|[{'type',89,'map','any'}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Map3'}|[{'type',90,'map','any'}]]]]}]]]]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'new',0},[{'type',96,'bounded_fun',[{'type',96,'fun',[{'type',96,'product',[]}|[{'var',96,'Map'}]]}|[[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'Map'}|[{'type',97,'map','any'}]]]]}]]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'put',3},[{'type',102,'bounded_fun',[{'type',102,'fun',[{'type',102,'product',[{'var',102,'Key'}|[{'var',102,'Value'}|[{'var',102,'Map1'}]]]}|[{'var',102,'Map2'}]]}|[[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'Key'}|[{'type',103,'term',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Value'}|[{'type',104,'term',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Map1'}|[{'type',105,'map','any'}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Map2'}|[{'type',106,'map','any'}]]]]}]]]]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'remove',2},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'Key'}|[{'var',111,'Map1'}]]}|[{'var',111,'Map2'}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Key'}|[{'type',112,'term',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Map1'}|[{'type',113,'map','any'}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Map2'}|[{'type',114,'map','any'}]]]]}]]]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'to_list',1},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'Map'}]}|[{'type',119,'list',[{'type',119,'tuple',[{'var',119,'Key'}|[{'var',119,'Value'}]]}]}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Map'}|[{'type',120,'map','any'}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Key'}|[{'type',121,'term',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Value'}|[{'type',122,'term',[]}]]]]}]]]]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'update',3},[{'type',127,'bounded_fun',[{'type',127,'fun',[{'type',127,'product',[{'var',127,'Key'}|[{'var',127,'Value'}|[{'var',127,'Map1'}]]]}|[{'var',127,'Map2'}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Key'}|[{'type',128,'term',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Value'}|[{'type',129,'term',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'Map1'}|[{'type',130,'map','any'}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Map2'}|[{'type',131,'map','any'}]]]]}]]]]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'values',1},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'Map'}]}|[{'var',136,'Keys'}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Map'}|[{'type',137,'map','any'}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Keys'}|[{'type',138,'list',[{'var',138,'Key'}]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'Key'}|[{'type',139,'term',[]}]]]]}]]]]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'get',3},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'Key'}|[{'var',146,'Map'}|[{'var',146,'Default'}]]]}|[{'type',146,'union',[{'var',146,'Value'}|[{'var',146,'Default'}]]}]]}|[[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Key'}|[{'type',147,'term',[]}]]]]}|[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Map'}|[{'type',148,'map','any'}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Value'}|[{'type',149,'term',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Default'}|[{'type',150,'term',[]}]]]]}]]]]]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'fold',3},[{'type',161,'bounded_fun',[{'type',161,'fun',[{'type',161,'product',[{'var',161,'Fun'}|[{'var',161,'Init'}|[{'var',161,'Map'}]]]}|[{'var',161,'Acc'}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Fun'}|[{'type',162,'fun',[{'type',162,'product',[{'var',162,'K'}|[{'var',162,'V'}|[{'var',162,'AccIn'}]]]}|[{'var',162,'AccOut'}]]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Init'}|[{'type',163,'term',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Acc'}|[{'type',164,'term',[]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'AccIn'}|[{'type',165,'term',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'AccOut'}|[{'type',166,'term',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Map'}|[{'type',167,'map','any'}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'K'}|[{'type',168,'term',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'V'}|[{'type',169,'term',[]}]]]]}]]]]]]]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'map',2},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'Fun'}|[{'var',174,'Map1'}]]}|[{'var',174,'Map2'}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Fun'}|[{'type',175,'fun',[{'type',175,'product',[{'var',175,'K'}|[{'var',175,'V1'}]]}|[{'var',175,'V2'}]]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Map1'}|[{'type',176,'map','any'}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Map2'}|[{'type',177,'map','any'}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'K'}|[{'type',178,'term',[]}]]]]}|[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'V1'}|[{'type',179,'term',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'V2'}|[{'type',180,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'size',1},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'Map'}]}|[{'type',189,'non_neg_integer',[]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Map'}|[{'type',190,'map','any'}]]]]}]]]}]}],
		%% Line 196
		'spec' =
		    %% Line 196
		    [{{'without',2},[{'type',196,'bounded_fun',[{'type',196,'fun',[{'type',196,'product',[{'var',196,'Ks'}|[{'var',196,'Map1'}]]}|[{'var',196,'Map2'}]]}|[[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Ks'}|[{'type',197,'list',[{'var',197,'K'}]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Map1'}|[{'type',198,'map','any'}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Map2'}|[{'type',199,'map','any'}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'K'}|[{'type',200,'term',[]}]]]]}]]]]]]}]}]]
'get'/2 =
    %% Line 52
    fun (_cor1,_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'find'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'from_list'/1 =
    %% Line 69
    fun (_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'is_key'/2 =
    %% Line 76
    fun (_cor1,_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'keys'/1 =
    %% Line 84
    fun (_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'merge'/2 =
    %% Line 92
    fun (_cor1,_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'new'/0 =
    %% Line 99
    fun () ->
	call 'erlang':'nif_error'
	    ('undef')
'put'/3 =
    %% Line 108
    fun (_cor2,_cor1,_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'remove'/2 =
    %% Line 116
    fun (_cor1,_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'to_list'/1 =
    %% Line 124
    fun (_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'update'/3 =
    %% Line 133
    fun (_cor2,_cor1,_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'values'/1 =
    %% Line 141
    fun (_cor0) ->
	call 'erlang':'nif_error'
	    ('undef')
'get'/3 =
    %% Line 152
    fun (_cor2,_cor1,_cor0) ->
	%% Line 153
	case call 'maps':'find'
		 (_cor2, _cor1) of
	  %% Line 154
	  <{'ok',Value}> when 'true' ->
	      %% Line 155
	      Value
	  %% Line 156
	  <'error'> when 'true' ->
	      _cor0
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'fold'/3 =
    %% Line 171
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,Init,Map>
	      when try
		    let <_cor3> =
			call 'erlang':'is_function'
			    (Fun, 3)
		    in  let <_cor4> =
			    call 'erlang':'is_map'
				(Map)
			in  call 'erlang':'and'
				(_cor3, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 172
		  ( fun (_cor7,_cor6) ->
			case <_cor7,_cor6> of
			  <{K,V},A> when 'true' ->
			      apply Fun
				  (K, V, A)
			  ( <_cor9,_cor8> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor9,_cor8})
				  -| [{'function_name',{'-fold/3-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-fold/3-fun-0-'}}] )
	      in  let <_cor5> =
		      %% Line 172
		      call 'maps':'to_list'
			  (Map)
		  in  %% Line 172
		      call 'lists':'foldl'
			  (_cor10, Init, _cor5)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'fold',3}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,Map>
	      when try
		    let <_cor2> =
			call 'erlang':'is_function'
			    (Fun, 2)
		    in  let <_cor3> =
			    call 'erlang':'is_map'
				(Map)
			in  call 'erlang':'and'
				(_cor2, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 183
		  ( fun (_cor6) ->
			case _cor6 of
			  %% Line 184
			  <{K,V}> when 'true' ->
			      let <_cor5> =
				  %% Line 185
				  apply Fun
				      (K, V)
			      in  %% Line 185
				  {K,_cor5}
			  ( <_cor7> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor7})
				  -| [{'function_name',{'-map/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-map/2-fun-0-'}}] )
	      in  let <_cor4> =
		      %% Line 186
		      call 'maps':'to_list'
			  (Map)
		  in  let <_cor9> =
			  %% Line 183
			  call 'lists':'map'
			      (_cor8, _cor4)
		      in  %% Line 183
			  call 'maps':'from_list'
			      (_cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'size'/1 =
    %% Line 192
    fun (_cor0) ->
	case _cor0 of
	  <Map>
	      when call 'erlang':'is_map'
		    (_cor0) ->
	      %% Line 193
	      call 'erlang':'map_size'
		  (Map)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'size',1}}] )
	    -| ['compiler_generated'] )
	end
'without'/2 =
    %% Line 202
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ks,M>
	      when try
		    let <_cor2> =
			call 'erlang':'is_list'
			    (Ks)
		    in  let <_cor3> =
			    call 'erlang':'is_map'
				(M)
			in  call 'erlang':'and'
				(_cor2, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor11> =
		  %% Line 203
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[{K,V}|_cor5]> when 'true' ->
				      ( case call 'lists':'member'
						 (K, Ks) of
					  <'false'> when 'true' ->
					      let <_cor9> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [{K,V}|_cor9]
						    -| ['compiler_generated'] )
					  ( <'true'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor5)
					    -| ['compiler_generated'] )
					  ( <_cor_variable> when 'true' ->
						call 'erlang':'error'
						    ('badarg')
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor8> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor6> =
			    call 'maps':'to_list'
				(M)
			in  apply 'lc$^0'/1
				(_cor6)
		    -| ['list_comprehension'] )
	      in  %% Line 203
		  call 'maps':'from_list'
		      (_cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'without',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('maps')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('maps', _cor0)
end