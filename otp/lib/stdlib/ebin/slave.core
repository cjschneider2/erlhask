module 'slave' ['module_info'/0,
		'module_info'/1,
		'pseudo'/1,
		'pseudo'/2,
		'relay'/1,
		'slave_start'/1,
		'start'/1,
		'start'/2,
		'start'/3,
		'start'/5,
		'start_link'/1,
		'start_link'/2,
		'start_link'/3,
		'stop'/1,
		'wait_for_master_to_die'/2,
		'wait_for_slave'/7]
    attributes [%% Line 57
		'spec' =
		    %% Line 57
		    [{{'pseudo',2},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'Master'}|[{'var',57,'ServerList'}]]}|[{'atom',57,'ok'}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Master'}|[{'type',58,'node',[]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'ServerList'}|[{'type',59,'list',[{'type',59,'atom',[]}]}]]]]}]]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'relay',1},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'Pid'}]}|[{'type',75,'no_return',[]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Pid'}|[{'type',76,'pid',[]}]]]]}]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'start',1},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'Host'}]}|[{'type',130,'union',[{'type',130,'tuple',[{'atom',130,'ok'}|[{'var',130,'Node'}]]}|[{'type',130,'tuple',[{'atom',130,'error'}|[{'var',130,'Reason'}]]}]]}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Host'}|[{'type',131,'atom',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Node'}|[{'type',132,'node',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Reason'}|[{'type',133,'union',[{'atom',133,'timeout'}|[{'atom',133,'no_rsh'}|[{'type',133,'tuple',[{'atom',133,'already_running'}|[{'var',133,'Node'}]]}]]]}]]]]}]]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'start',2},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'Host'}|[{'var',140,'Name'}]]}|[{'type',140,'union',[{'type',140,'tuple',[{'atom',140,'ok'}|[{'var',140,'Node'}]]}|[{'type',140,'tuple',[{'atom',140,'error'}|[{'var',140,'Reason'}]]}]]}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Host'}|[{'type',141,'atom',[]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Name'}|[{'type',142,'atom',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Node'}|[{'type',143,'node',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Reason'}|[{'type',144,'union',[{'atom',144,'timeout'}|[{'atom',144,'no_rsh'}|[{'type',144,'tuple',[{'atom',144,'already_running'}|[{'var',144,'Node'}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'start',3},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'Host'}|[{'var',149,'Name'}|[{'var',149,'Args'}]]]}|[{'type',149,'union',[{'type',149,'tuple',[{'atom',149,'ok'}|[{'var',149,'Node'}]]}|[{'type',149,'tuple',[{'atom',149,'error'}|[{'var',149,'Reason'}]]}]]}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Host'}|[{'type',150,'atom',[]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Name'}|[{'type',151,'atom',[]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Args'}|[{'type',152,'string',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Node'}|[{'type',153,'node',[]}]]]]}|[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Reason'}|[{'type',154,'union',[{'atom',154,'timeout'}|[{'atom',154,'no_rsh'}|[{'type',154,'tuple',[{'atom',154,'already_running'}|[{'var',154,'Node'}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'start_link',1},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'Host'}]}|[{'type',159,'union',[{'type',159,'tuple',[{'atom',159,'ok'}|[{'var',159,'Node'}]]}|[{'type',159,'tuple',[{'atom',159,'error'}|[{'var',159,'Reason'}]]}]]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Host'}|[{'type',160,'atom',[]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Node'}|[{'type',161,'node',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Reason'}|[{'type',162,'union',[{'atom',162,'timeout'}|[{'atom',162,'no_rsh'}|[{'type',162,'tuple',[{'atom',162,'already_running'}|[{'var',162,'Node'}]]}]]]}]]]]}]]]]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'start_link',2},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'Host'}|[{'var',169,'Name'}]]}|[{'type',169,'union',[{'type',169,'tuple',[{'atom',169,'ok'}|[{'var',169,'Node'}]]}|[{'type',169,'tuple',[{'atom',169,'error'}|[{'var',169,'Reason'}]]}]]}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'Host'}|[{'type',170,'atom',[]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Name'}|[{'type',171,'atom',[]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Node'}|[{'type',172,'node',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Reason'}|[{'type',173,'union',[{'atom',173,'timeout'}|[{'atom',173,'no_rsh'}|[{'type',173,'tuple',[{'atom',173,'already_running'}|[{'var',173,'Node'}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'start_link',3},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'Host'}|[{'var',178,'Name'}|[{'var',178,'Args'}]]]}|[{'type',178,'union',[{'type',178,'tuple',[{'atom',178,'ok'}|[{'var',178,'Node'}]]}|[{'type',178,'tuple',[{'atom',178,'error'}|[{'var',178,'Reason'}]]}]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Host'}|[{'type',179,'atom',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Name'}|[{'type',180,'atom',[]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Args'}|[{'type',181,'string',[]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Node'}|[{'type',182,'node',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Reason'}|[{'type',183,'union',[{'atom',183,'timeout'}|[{'atom',183,'no_rsh'}|[{'type',183,'tuple',[{'atom',183,'already_running'}|[{'var',183,'Node'}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'stop',1},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'Node'}]}|[{'atom',209,'ok'}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Node'}|[{'type',210,'node',[]}]]]]}]]]}]}]]
'pseudo'/1 =
    %% Line 52
    fun (_cor0) ->
	case _cor0 of
	  <[Master|ServerList]> when 'true' ->
	      %% Line 53
	      apply 'pseudo'/2
		  (Master, ServerList)
	  %% Line 54
	  <_cor2> when 'true' ->
	      %% Line 55
	      call 'error_logger':'error_msg'
		  ([78|[111|[32|[109|[97|[115|[116|[101|[114|[32|[110|[111|[100|[101|[32|[103|[105|[118|[101|[110|[32|[116|[111|[32|[115|[108|[97|[118|[101|[58|[112|[115|[101|[117|[100|[111|[47|[49|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	end
'pseudo'/2 =
    %% Line 61
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor5,[]> when 'true' ->
	      'ok'
	  %% Line 62
	  <Master,[S|Tail]> when 'true' ->
	      let <_cor2> =
		  %% Line 63
		  call 'erlang':'whereis'
		      (S)
	      in  do  %% Line 63
		      apply 'start_pseudo'/3
			  (S, _cor2, Master)
		      %% Line 64
		      apply 'pseudo'/2
			  (Master, Tail)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'pseudo',2}}] )
	    -| ['compiler_generated'] )
	end
'start_pseudo'/3 =
    %% Line 66
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,'undefined',Master> when 'true' ->
	      let <X> =
		  %% Line 67
		  call 'rpc':'call'
		      (Master, 'erlang', 'whereis', [Name|[]])
	      in  let <_cor4> =
		      %% Line 68
		      call 'erlang':'spawn'
			  ('slave', 'relay', [X|[]])
		  in  %% Line 68
		      call 'erlang':'register'
			  (Name, _cor4)
	  %% Line 70
	  <_cor8,_cor9,_cor10> when 'true' ->
	      'ok'
	end
'relay'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <{'badrpc',Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 79
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 79
		      call 'error_logger':'error_msg'
			  ([32|[42|[42|[32|[101|[120|[105|[116|[105|[110|[103|[32|[114|[101|[108|[97|[121|[32|[115|[101|[114|[118|[101|[114|[32|[126|[119|[32|[58|[126|[119|[32|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[Reason|[]]])
		      %% Line 80
		      call 'erlang':'exit'
			  (Reason)
	  %% Line 81
	  <'undefined'> when 'true' ->
	      let <_cor2> =
		  %% Line 82
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 82
		      call 'error_logger':'error_msg'
			  ([32|[42|[42|[32|[101|[120|[105|[116|[105|[110|[103|[32|[114|[101|[108|[97|[121|[32|[115|[101|[114|[118|[101|[114|[32|[126|[119|[32|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[]])
		      %% Line 83
		      call 'erlang':'exit'
			  ('undefined')
	  %% Line 84
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 85
	      apply 'relay1'/1
		  (Pid)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'relay',1}}] )
	    -| ['compiler_generated'] )
	end
'relay1'/1 =
    %% Line 87
    fun (_cor0) ->
	do  %% Line 88
	    receive
	      %% Line 89
	      <X> when 'true' ->
		  %% Line 90
		  call 'erlang':'!'
		      (_cor0, X)
	    after 'infinity' ->
	      'ok'
	    %% Line 92
	    apply 'relay1'/1
		(_cor0)
'start'/1 =
    %% Line 135
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 136
	    call 'erlang':'node'
		()
	in  let <L> =
		%% Line 136
		call 'erlang':'atom_to_list'
		    (_cor1)
	    in  let <Name> =
		    %% Line 137
		    apply 'upto'/2
			(64, L)
		in  %% Line 138
		    apply 'start'/4
			(_cor0, Name, [], 'no_link')
'start'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	%% Line 147
	apply 'start'/3
	    (_cor1, _cor0, [])
'start'/3 =
    %% Line 156
    fun (_cor2,_cor1,_cor0) ->
	%% Line 157
	apply 'start'/4
	    (_cor2, _cor1, _cor0, 'no_link')
'start_link'/1 =
    %% Line 164
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 165
	    call 'erlang':'node'
		()
	in  let <L> =
		%% Line 165
		call 'erlang':'atom_to_list'
		    (_cor1)
	    in  let <Name> =
		    %% Line 166
		    apply 'upto'/2
			(64, L)
		in  let <_cor4> =
			%% Line 167
			call 'erlang':'self'
			    ()
		    in  %% Line 167
			apply 'start'/4
			    (_cor0, Name, [], _cor4)
'start_link'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	%% Line 176
	apply 'start_link'/3
	    (_cor1, _cor0, [])
'start_link'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 186
	    call 'erlang':'self'
		()
	in  %% Line 186
	    apply 'start'/4
		(_cor2, _cor1, _cor0, _cor3)
'start'/4 =
    %% Line 188
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Prog> =
	    %% Line 189
	    call 'lib':'progname'
		()
	in  %% Line 190
	    apply 'start'/5
		(_cor3, _cor2, _cor1, _cor0, Prog)
'start'/5 =
    %% Line 192
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 194
	    case call 'net_kernel':'longnames'
		     () of
	      %% Line 195
	      <'true'> when 'true' ->
		  apply 'dns'/1
		      (_cor4)
	      %% Line 196
	      <'false'> when 'true' ->
		  let <_cor5> =
		      apply 'to_list'/1
			  (_cor4)
		  in  apply 'strip_host_name'/1
			  (_cor5)
	      %% Line 197
	      <'ignored'> when 'true' ->
		  call 'erlang':'exit'
		      ('not_alive')
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
	in  let <_cor9> =
		%% Line 199
		call 'lists':'concat'
		    ([_cor3|[[64]|[_cor7|[]]]])
	    in  let <Node> =
		    %% Line 199
		    call 'erlang':'list_to_atom'
			(_cor9)
		in  %% Line 200
		    case call 'net_adm':'ping'
			     (Node) of
		      %% Line 201
		      <'pang'> when 'true' ->
			  %% Line 202
			  apply 'start_it'/6
			      (_cor7, _cor3, Node, _cor2, _cor1, _cor0)
		      %% Line 203
		      <'pong'> when 'true' ->
			  %% Line 204
			  {'error',{'already_running',Node}}
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
'stop'/1 =
    %% Line 212
    fun (_cor0) ->
	do  %% Line 214
	    call 'rpc':'call'
		(_cor0, 'erlang', 'halt', [])
	    %% Line 215
	    'ok'
'start_it'/6 =
    %% Line 219
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 220
	    call 'erlang':'self'
		()
	in  do  %% Line 220
		call 'erlang':'spawn'
		    ('slave', 'wait_for_slave', [_cor6|[_cor5|[_cor4|[_cor3|[_cor2|[_cor1|%% Line 221
											  [_cor0|[]]]]]]]])
		%% Line 222
		receive
		  %% Line 223
		  <{'result',Result}> when 'true' ->
		      Result
		after 'infinity' ->
		  'true'
'wait_for_slave'/7 =
    %% Line 228
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Waiter> =
	    %% Line 229
	    apply 'register_unique_name'/1
		(0)
	in  %% Line 230
	    case apply 'mk_cmd'/5
		     (_cor5, _cor4, _cor2, Waiter, _cor0) of
	      %% Line 231
	      <{'ok',Cmd}> when 'true' ->
		  do  %% Line 233
		      call 'erlang':'open_port'
			  ({'spawn',Cmd}, ['stream'])
		      %% Line 234
		      receive
			%% Line 235
			<{SlavePid,'slave_started'}> when 'true' ->
			    do  %% Line 236
				call 'erlang':'unregister'
				    (Waiter)
				%% Line 237
				apply 'slave_started'/3
				    (_cor6, _cor1, SlavePid)
		      after %% Line 238
			    32000 ->
			let <_cor8> =
			    %% Line 241
			    call 'lists':'concat'
				([_cor4|[[64]|[_cor5|[]]]])
			in  %% Line 241
			    case call 'erlang':'list_to_atom'
				     (_cor8) of
			      <_cor19>
				  when call 'erlang':'=:='
					(_cor19,
					 _cor3) ->
				  do  %% Line 242
				      case call 'net_adm':'ping'
					       (_cor3) of
					%% Line 243
					<'pong'> when 'true' ->
					    do  %% Line 244
						call 'erlang':'spawn'
						    (_cor3, 'erlang', 'halt', [])
						'ok'
					%% Line 246
					<_cor20> when 'true' ->
					    'ok'
				      end
				      %% Line 249
				      call 'erlang':'!'
					  (_cor6, {'result',{'error','timeout'}})
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor9})
				-| ['compiler_generated'] )
			    end
	      %% Line 251
	      <Other> when 'true' ->
		  %% Line 252
		  call 'erlang':'!'
		      (_cor6, {'result',Other})
	    end
'slave_started'/3 =
    %% Line 255
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <ReplyTo,'no_link',Slave>
	      when call 'erlang':'is_pid'
		    (Slave) ->
	      let <_cor3> =
		  %% Line 256
		  call 'erlang':'node'
		      (Slave)
	      in  %% Line 256
		  call 'erlang':'!'
		      (ReplyTo, {'result',{'ok',_cor3}})
	  %% Line 257
	  <ReplyTo,Master,Slave>
	      when let <_cor4> =
		    call 'erlang':'is_pid'
			(Master)
		in  let <_cor5> =
			call 'erlang':'is_pid'
			    (Slave)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 258
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  do  %% Line 259
		      call 'erlang':'link'
			  (Master)
		      do  %% Line 260
			  call 'erlang':'link'
			      (Slave)
			  let <_cor6> =
			      %% Line 261
			      call 'erlang':'node'
				  (Slave)
			  in  do  %% Line 261
				  call 'erlang':'!'
				      (ReplyTo, {'result',{'ok',_cor6}})
				  %% Line 262
				  apply 'one_way_link'/2
				      (Master, Slave)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'slave_started',3}}] )
	    -| ['compiler_generated'] )
	end
'one_way_link'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	%% Line 269
	receive
	  %% Line 270
	  <{'EXIT',_cor5,_X_Reason}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      do  %% Line 271
		  call 'erlang':'unlink'
		      (_cor0)
		  let <_cor2> =
		      %% Line 272
		      call 'erlang':'node'
			  ()
		  in  %% Line 272
		      call 'erlang':'!'
			  (_cor0, {'nodedown',_cor2})
	  %% Line 273
	  <{'EXIT',_cor6,_X_Reason}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor0) ->
	      %% Line 274
	      call 'erlang':'unlink'
		  (_cor1)
	  %% Line 275
	  <_X_Other> when 'true' ->
	      %% Line 276
	      apply 'one_way_link'/2
		  (_cor1, _cor0)
	after 'infinity' ->
	  'true'
'register_unique_name'/1 =
    %% Line 279
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 280
	    call 'lists':'concat'
		([[115|[108|[97|[118|[101|[95|[119|[97|[105|[116|[101|[114|[95]]]]]]]]]]]]]|[_cor0|[]]])
	in  let <Name> =
		%% Line 280
		call 'erlang':'list_to_atom'
		    (_cor1)
	    in  let <_cor4> =
		    catch
			let <_cor3> =
			    %% Line 281
			    call 'erlang':'self'
				()
			in  %% Line 281
			    call 'erlang':'register'
				(Name, _cor3)
		in  %% Line 281
		    case _cor4 of
		      %% Line 282
		      <'true'> when 'true' ->
			  %% Line 283
			  Name
		      %% Line 284
		      <{'EXIT',{'badarg',_cor8}}> when 'true' ->
			  let <_cor5> =
			      %% Line 285
			      call 'erlang':'+'
				  (_cor0, 1)
			  in  %% Line 285
			      apply 'register_unique_name'/1
				  (_cor5)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
'mk_cmd'/5 =
    %% Line 292
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 293
	    case call 'os':'type'
		     () of
	      %% Line 294
	      <{'ose',_cor22}> when 'true' ->
		  apply 'mk_ose_prog'/1
		      (_cor0)
	      %% Line 295
	      <_cor23> when 'true' ->
		  apply 'quote_progname'/1
		      (_cor0)
	    end
	in  let <_cor8> =
		%% Line 298
		call 'erlang':'node'
		    ()
	    in  let <_cor9> =
		    %% Line 299
		    apply 'long_or_short'/0
			()
		in  let <_cor10> =
			%% Line 300
			call 'erlang':'node'
			    ()
		    in  let <BasicCmd> =
			    %% Line 297
			    call 'lists':'concat'
				([_cor6|%% Line 298
					[[32|[45|[100|[101|[116|[97|[99|[104|[101|[100|[32|[45|[110|[111|[105|[110|[112|[117|[116|[32|[45|[109|[97|[115|[116|[101|[114|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor8|%% Line 299
																									      [[32]|[_cor9|[_cor3|[[64]|[_cor4|%% Line 300
																													       [[32|[45|[115|[32|[115|[108|[97|[118|[101|[32|[115|[108|[97|[118|[101|[95|[115|[116|[97|[114|[116|[32]]]]]]]]]]]]]]]]]]]]]]|[_cor10|%% Line 301
																																														   [[32]|[_cor1|%% Line 302
																																																[[32]|[_cor2|[]]]]]]]]]]]]]]])
			in  let <_cor12> =
				%% Line 304
				call 'erlang':'node'
				    ()
			    in  let <_cor13> =
				    %% Line 304
				    call 'erlang':'atom_to_list'
					(_cor12)
				in  %% Line 304
				    case apply 'after_char'/2
					     (64, _cor13) of
				      %% Line 305
				      <_cor24>
					  when call 'erlang':'=:='
						(_cor24,
						 _cor4) ->
					  %% Line 306
					  {'ok',BasicCmd}
				      %% Line 307
				      <_cor25> when 'true' ->
					  %% Line 308
					  case apply 'rsh'/0
						   () of
					    %% Line 309
					    <{'ok',Rsh}> when 'true' ->
						let <_cor14> =
						    %% Line 310
						    call 'lists':'concat'
							([Rsh|[[32]|[_cor4|[[32]|[BasicCmd|[]]]]]])
						in  %% Line 310
						    {'ok',_cor14}
					    %% Line 311
					    <Other> when 'true' ->
						%% Line 312
						Other
					  end
				    end
'mk_ose_prog'/1 =
    %% Line 324
    fun (_cor0) ->
	let <SkipTail> =
	    %% Line 325
	    ( fun (_cor2,_cor1) ->
		  case <_cor2,_cor1> of
		    <[45|[45]],[]> when 'true' ->
			%% Line 326
			[[45|[45]]]
		    %% Line 327
		    <_cor10,[]> when 'true' ->
			%% Line 328
			[]
		    %% Line 329
		    <Arg,Args> when 'true' ->
			%% Line 330
			[Arg|[[32]|Args]]
		  end
	      -| [{'id',{0,0,'-mk_ose_prog/1-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 332
		call 'erlang':'system_info'
		    ('emu_args')
	    in  let <_cor7> =
		    %% Line 332
		    call 'lists':'foldr'
			(SkipTail, [], _cor6)
		in  let <_cor8> =
			%% Line 332
			call 'erlang':'tl'
			    (_cor7)
		    in  %% Line 332
			[_cor0|[_cor8|[]]]
'quote_progname'/1 =
    %% Line 344
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 345
	    apply 'to_list'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 345
		call 'string':'tokens'
		    (_cor1, [32])
	    in  %% Line 345
		apply 'do_quote_progname'/1
		    (_cor2)
'do_quote_progname'/1 =
    %% Line 347
    fun (_cor0) ->
	case _cor0 of
	  <[Prog|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 348
		  call 'erlang':'++'
		      (Prog, [34])
	      in  %% Line 348
		  [34|_cor1]
	  %% Line 349
	  <[Prog|[Arg|Args]]> when 'true' ->
	      %% Line 350
	      case call 'os':'find_executable'
		       (Prog) of
		%% Line 351
		<'false'> when 'true' ->
		    let <_cor2> =
			%% Line 352
			[32|Arg]
		    in  let <_cor3> =
			    %% Line 352
			    call 'erlang':'++'
				(Prog, _cor2)
			in  %% Line 352
			    apply 'do_quote_progname'/1
				([_cor3|Args])
		%% Line 353
		<_cor13> when 'true' ->
		    let <_cor6> =
			%% Line 356
			( fun (_cor4) ->
			      [[32]|[_cor4|[]]]
			  -| [{'id',{0,0,'-do_quote_progname/1-fun-0-'}}] )
		    in  let <_cor7> =
			    %% Line 356
			    call 'lists':'map'
				(_cor6, [Arg|Args])
			in  let <_cor8> =
				%% Line 356
				call 'lists':'flatten'
				    (_cor7)
			    in  let <_cor9> =
				    %% Line 355
				    [34|_cor8]
				in  let <_cor10> =
					%% Line 355
					call 'erlang':'++'
					    (Prog, _cor9)
				    in  %% Line 355
					[34|_cor10]
	      end
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'do_quote_progname',1}}] )
	    -| ['compiler_generated'] )
	end
'rsh'/0 =
    %% Line 367
    fun () ->
	let <_cor1> =
	    %% Line 369
	    case call 'init':'get_argument'
		     ('rsh') of
	      %% Line 370
	      <{'ok',[[Prog|[]]|[]]}> when 'true' ->
		  Prog
	      %% Line 371
	      <_cor4> when 'true' ->
		  [114|[115|[104]]]
	    end
	in  %% Line 373
	    case call 'os':'find_executable'
		     (_cor1) of
	      %% Line 374
	      <'false'> when 'true' ->
		  {'error','no_rsh'}
	      %% Line 375
	      <Path> when 'true' ->
		  {'ok',Path}
	    end
'long_or_short'/0 =
    %% Line 378
    fun () ->
	%% Line 379
	case call 'net_kernel':'longnames'
		 () of
	  %% Line 380
	  <'true'> when 'true' ->
	      [32|[45|[110|[97|[109|[101|[32]]]]]]]
	  %% Line 381
	  <'false'> when 'true' ->
	      [32|[45|[115|[110|[97|[109|[101|[32]]]]]]]]
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'slave_start'/1 =
    %% Line 387
    fun (_cor0) ->
	case _cor0 of
	  <[Master|[Waiter|[]]]> when 'true' ->
	      %% Line 389
	      call 'erlang':'spawn'
		  ('slave', 'wait_for_master_to_die', [Master|[Waiter|[]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'slave_start',1}}] )
	    -| ['compiler_generated'] )
	end
'wait_for_master_to_die'/2 =
    %% Line 391
    fun (_cor1,_cor0) ->
	do  %% Line 393
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    do  %% Line 394
		call 'erlang':'monitor_node'
		    (_cor1, 'true')
		let <_cor2> =
		    %% Line 395
		    call 'erlang':'self'
			()
		in  do  %% Line 395
			call 'erlang':'!'
			    ({_cor0,_cor1}, {_cor2,'slave_started'})
			%% Line 396
			apply 'wloop'/1
			    (_cor1)
'wloop'/1 =
    %% Line 398
    fun (_cor0) ->
	%% Line 399
	receive
	  %% Line 400
	  <{'nodedown',_cor2}>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor0) ->
	      %% Line 403
	      call 'erlang':'halt'
		  ()
	  %% Line 404
	  <_X_Other> when 'true' ->
	      %% Line 405
	      apply 'wloop'/1
		  (_cor0)
	after 'infinity' ->
	  'true'
'strip_host_name'/1 =
    %% Line 410
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 411
	  <[46|_cor3]> when 'true' ->
	      []
	  %% Line 412
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  apply 'strip_host_name'/1
		      (T)
	      in  [H|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'strip_host_name',1}}] )
	    -| ['compiler_generated'] )
	end
'dns'/1 =
    %% Line 414
    fun (_cor0) ->
	case call 'net_adm':'dns_hostname'
		 (_cor0) of
	  <{'ok',Host}> when 'true' ->
	      Host
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 416
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      X
	  %% Line 417
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'upto'/2 =
    %% Line 419
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor5,[]> when 'true' ->
	      []
	  %% Line 420
	  <Char,[_cor6|_cor7]>
	      when call 'erlang':'=:='
		    (_cor6,
		     Char) ->
	      []
	  %% Line 421
	  <Char,[H|T]> when 'true' ->
	      let <_cor2> =
		  apply 'upto'/2
		      (Char, T)
	      in  [H|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'upto',2}}] )
	    -| ['compiler_generated'] )
	end
'after_char'/2 =
    %% Line 423
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,[]> when 'true' ->
	      []
	  %% Line 424
	  <Char,[_cor5|Rest]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Char) ->
	      Rest
	  %% Line 425
	  <Char,[_cor6|Rest]> when 'true' ->
	      apply 'after_char'/2
		  (Char, Rest)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'after_char',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('slave')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('slave', _cor0)
end