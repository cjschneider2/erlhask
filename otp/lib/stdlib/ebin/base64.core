module 'base64' ['decode'/1,
		 'decode_to_string'/1,
		 'encode'/1,
		 'encode_to_string'/1,
		 'mime_decode'/1,
		 'mime_decode_to_string'/1,
		 'module_info'/0,
		 'module_info'/1]
    attributes [%% Line 31
		'type' =
		    %% Line 31
		    [{'ascii_string',{'type',31,'list',[{'type',31,'range',[{'integer',31,1}|[{'integer',31,255}]]}]},[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{'ascii_binary',{'type',32,'binary',[]},[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'encode_to_string',1},[{'type',42,'bounded_fun',[{'type',42,'fun',[{'type',42,'product',[{'var',42,'Data'}]}|[{'var',42,'Base64String'}]]}|[[{'type',43,'constraint',[{'atom',43,'is_subtype'}|[[{'var',43,'Data'}|[{'type',43,'union',[{'type',43,'ascii_string',[]}|[{'type',43,'ascii_binary',[]}]]}]]]]}|[{'type',44,'constraint',[{'atom',44,'is_subtype'}|[[{'var',44,'Base64String'}|[{'type',44,'ascii_string',[]}]]]]}]]]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'encode',1},[{'type',59,'bounded_fun',[{'type',59,'fun',[{'type',59,'product',[{'var',59,'Data'}]}|[{'var',59,'Base64'}]]}|[[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Data'}|[{'type',60,'union',[{'type',60,'ascii_string',[]}|[{'type',60,'ascii_binary',[]}]]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Base64'}|[{'type',61,'ascii_binary',[]}]]]]}]]]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'encode_l',1},[{'type',68,'fun',[{'type',68,'product',[{'type',68,'ascii_string',[]}]}|[{'type',68,'ascii_string',[]}]]}]}],
		%% Line 110
		'spec' =
		    %% Line 110
		    [{{'decode',1},[{'type',110,'bounded_fun',[{'type',110,'fun',[{'type',110,'product',[{'var',110,'Base64'}]}|[{'var',110,'Data'}]]}|[[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Base64'}|[{'type',111,'union',[{'type',111,'ascii_string',[]}|[{'type',111,'ascii_binary',[]}]]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Data'}|[{'type',112,'ascii_binary',[]}]]]]}]]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'mime_decode',1},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'Base64'}]}|[{'var',119,'Data'}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Base64'}|[{'type',120,'union',[{'type',120,'ascii_string',[]}|[{'type',120,'ascii_binary',[]}]]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Data'}|[{'type',121,'ascii_binary',[]}]]]]}]]]]}]}],
		%% Line 128
		'spec' =
		    %% Line 128
		    [{{'decode_l',1},[{'type',128,'fun',[{'type',128,'product',[{'type',128,'ascii_string',[]}]}|[{'type',128,'ascii_string',[]}]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'mime_decode_l',1},[{'type',134,'fun',[{'type',134,'product',[{'type',134,'ascii_string',[]}]}|[{'type',134,'ascii_string',[]}]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'decode_to_string',1},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'Base64'}]}|[{'var',151,'DataString'}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Base64'}|[{'type',152,'union',[{'type',152,'ascii_string',[]}|[{'type',152,'ascii_binary',[]}]]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'DataString'}|[{'type',153,'ascii_string',[]}]]]]}]]]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'mime_decode_to_string',1},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'Base64'}]}|[{'var',160,'DataString'}]]}|[[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Base64'}|[{'type',161,'union',[{'type',161,'ascii_string',[]}|[{'type',161,'ascii_binary',[]}]]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'DataString'}|[{'type',162,'ascii_string',[]}]]]]}]]]]}]}]]
'encode_to_string'/1 =
    %% Line 46
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 47
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  %% Line 47
		  apply 'encode_to_string'/1
		      (_cor1)
	  %% Line 48
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 49
	      apply 'encode_l'/1
		  (List)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'encode_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'encode'/1 =
    %% Line 63
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 64
	      apply 'encode_binary'/1
		  (Bin)
	  %% Line 65
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 66
		  apply 'encode_l'/1
		      (List)
	      in  %% Line 66
		  call 'erlang':'list_to_binary'
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'encode',1}}] )
	    -| ['compiler_generated'] )
	end
'encode_l'/1 =
    %% Line 70
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 71
	      []
	  %% Line 72
	  <[A|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 73
		  call 'erlang':'bsr'
		      (A, 2)
	      in  let <_cor2> =
		      %% Line 73
		      apply 'b64e'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 74
			  call 'erlang':'band'
			      (A, 3)
		      in  let <_cor4> =
			      %% Line 74
			      call 'erlang':'bsl'
				  (_cor3, 4)
			  in  let <_cor5> =
				  %% Line 74
				  apply 'b64e'/1
				      (_cor4)
			      in  %% Line 73
				  [_cor2|%% Line 74
					 [_cor5|[61|[61]]]]
	  %% Line 75
	  <[A|[B|[]]]> when 'true' ->
	      let <_cor6> =
		  %% Line 76
		  call 'erlang':'bsr'
		      (A, 2)
	      in  let <_cor7> =
		      %% Line 76
		      apply 'b64e'/1
			  (_cor6)
		  in  let <_cor9> =
			  %% Line 77
			  call 'erlang':'band'
			      (A, 3)
		      in  let <_cor10> =
			      %% Line 77
			      call 'erlang':'bsl'
				  (_cor9, 4)
			  in  let <_cor8> =
				  %% Line 77
				  call 'erlang':'bsr'
				      (B, 4)
			      in  let <_cor11> =
				      %% Line 77
				      call 'erlang':'bor'
					  (_cor10, _cor8)
				  in  let <_cor12> =
					  %% Line 77
					  apply 'b64e'/1
					      (_cor11)
				      in  let <_cor13> =
					      %% Line 78
					      call 'erlang':'band'
						  (B, 15)
					  in  let <_cor14> =
						  %% Line 78
						  call 'erlang':'bsl'
						      (_cor13, 2)
					      in  let <_cor15> =
						      %% Line 78
						      apply 'b64e'/1
							  (_cor14)
						  in  %% Line 76
						      [_cor7|%% Line 77
							     [_cor12|%% Line 78
								     [_cor15|[61]]]]
	  %% Line 79
	  <[A|[B|[C|Ls]]]> when 'true' ->
	      let <_cor17> =
		  %% Line 80
		  call 'erlang':'bsl'
		      (A, 16)
	      in  let <_cor16> =
		      %% Line 80
		      call 'erlang':'bsl'
			  (B, 8)
		  in  let <_cor18> =
			  %% Line 80
			  call 'erlang':'bor'
			      (_cor17, _cor16)
		      in  let <BB> =
			      %% Line 80
			      call 'erlang':'bor'
				  (_cor18, C)
			  in  let <_cor20> =
				  %% Line 81
				  call 'erlang':'bsr'
				      (BB, 18)
			      in  let <_cor21> =
				      %% Line 81
				      apply 'b64e'/1
					  (_cor20)
				  in  let <_cor22> =
					  %% Line 82
					  call 'erlang':'bsr'
					      (BB, 12)
				      in  let <_cor23> =
					      %% Line 82
					      call 'erlang':'band'
						  (_cor22, 63)
					  in  let <_cor24> =
						  %% Line 82
						  apply 'b64e'/1
						      (_cor23)
					      in  let <_cor25> =
						      %% Line 83
						      call 'erlang':'bsr'
							  (BB, 6)
						  in  let <_cor26> =
							  %% Line 83
							  call 'erlang':'band'
							      (_cor25, 63)
						      in  let <_cor27> =
							      %% Line 83
							      apply 'b64e'/1
								  (_cor26)
							  in  let <_cor28> =
								  %% Line 84
								  call 'erlang':'band'
								      (BB, 63)
							      in  let <_cor29> =
								      %% Line 84
								      apply 'b64e'/1
									  (_cor28)
								  in  let <_cor30> =
									  %% Line 84
									  apply 'encode_l'/1
									      (Ls)
								      in  %% Line 81
									  [_cor21|%% Line 82
										  [_cor24|%% Line 83
											  [_cor27|%% Line 84
												  [_cor29|_cor30]]]]
	  ( <_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31})
		  -| [{'function_name',{'encode_l',1}}] )
	    -| ['compiler_generated'] )
	end
'encode_binary'/1 =
    %% Line 86
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 87
	    call 'erlang':'byte_size'
		(_cor0)
	in  let <_cor2> =
		%% Line 87
		call 'erlang':'div'
		    (_cor1, 3)
	    in  let <Split> =
		    %% Line 87
		    call 'erlang':'*'
			(3, _cor2)
		in  %% Line 88
		    case ( _cor0
			   -| ['reuse_for_context'] ) of
		      <#{#<Main0>(Split,8,'binary',['unsigned'|['big']]),
			 #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <_cor8> =
			      %% Line 89
			      call 'erlang':'bit_size'
				  (Main0)
			  in  let <_cor7> =
				  call 'erlang':'div'
				      (_cor8, 6)
			      in  let <_cor5> =
				      primop 'bs_init_writable'
					  (_cor7)
				  in  let <_cor13> =
					  %% Line 89
					  ( letrec
						'lbc$^0'/2 =
						    fun (_cor11,_cor10) ->
							case <( _cor11
								-| ['reuse_for_context'] ),_cor10> of
							  <#{#<C>(6,1,'integer',['unsigned'|['big']]),
							     #<_cor9>('all',1,'binary',['unsigned'|['big']])}#,_cor10> when 'true' ->
							      let <_cor12> =
								  apply 'b64e'/1
								      (C)
							      in  let <_cor10> =
								      ( #{#<_cor10>('all',1,'binary',[]),
									  #<_cor12>(8,1,'integer',['unsigned'|['big']])}#
									-| ['compiler_generated','single_use'] )
								  in  apply 'lbc$^0'/2
									  (_cor9, _cor10)
							  <#{#<_cor9>('all',1,'binary',['unsigned'|['big']])}#,_cor10> when 'true' ->
							      _cor10
							  ( <_cor11,_cor10> when 'true' ->
								do  primop 'bs_context_to_binary'
									(_cor11)
								    ( primop 'match_fail'
									  ({'function_clause',_cor11,_cor10})
								      -| [{'function_name',{'lbc$^0',2}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lbc$^0'/2
						    (Main0, _cor5)
					    -| ['list_comprehension'] )
				      in  %% Line 90
					  case ( Rest
						 -| ['reuse_for_context'] ) of
					    %% Line 91
					    <#{#<A>(6,1,'integer',['unsigned'|['big']]),
					       #<B>(6,1,'integer',['unsigned'|['big']]),
					       #<C>(4,1,'integer',['unsigned'|['big']])}#> when 'true' ->
						let <_cor18> =
						    %% Line 92
						    apply 'b64e'/1
							(A)
						in  let <_cor17> =
							%% Line 92
							apply 'b64e'/1
							    (B)
						    in  let <_cor15> =
							    %% Line 92
							    call 'erlang':'bsl'
								(C, 2)
							in  let <_cor16> =
								%% Line 92
								apply 'b64e'/1
								    (_cor15)
							    in  %% Line 92
								#{#<_cor13>('all',8,'binary',['unsigned'|['big']]),
								  #<_cor18>(8,1,'integer',['unsigned'|['big']]),
								  #<_cor17>(8,1,'integer',['unsigned'|['big']]),
								  #<_cor16>(8,1,'integer',['unsigned'|['big']]),
								  #<61>(8,1,'integer',['unsigned'|['big']])}#
					    %% Line 93
					    <#{#<A>(6,1,'integer',['unsigned'|['big']]),
					       #<B>(2,1,'integer',['unsigned'|['big']])}#> when 'true' ->
						let <_cor21> =
						    %% Line 94
						    apply 'b64e'/1
							(A)
						in  let <_cor19> =
							%% Line 94
							call 'erlang':'bsl'
							    (B, 4)
						    in  let <_cor20> =
							    %% Line 94
							    apply 'b64e'/1
								(_cor19)
							in  %% Line 94
							    #{#<_cor13>('all',8,'binary',['unsigned'|['big']]),
							      #<_cor21>(8,1,'integer',['unsigned'|['big']]),
							      #<_cor20>(8,1,'integer',['unsigned'|['big']]),
							      #<61>(8,1,'integer',['unsigned'|['big']]),
							      #<61>(8,1,'integer',['unsigned'|['big']])}#
					    %% Line 95
					    <#{}#> when 'true' ->
						_cor13
					    ( <_cor22> when 'true' ->
						  do  primop 'bs_context_to_binary'
							  (_cor22)
						      primop 'match_fail'
							  ({'case_clause',_cor22})
					      -| ['compiler_generated'] )
					  end
		      ( <_cor4> when 'true' ->
			    do  primop 'bs_context_to_binary'
				    (_cor4)
				primop 'match_fail'
				    ({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
'decode'/1 =
    %% Line 114
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 115
	      apply 'decode_binary'/2
		  (#{}#, Bin)
	  %% Line 116
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 117
		  apply 'decode_l'/1
		      (List)
	      in  %% Line 117
		  call 'erlang':'list_to_binary'
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'decode',1}}] )
	    -| ['compiler_generated'] )
	end
'mime_decode'/1 =
    %% Line 123
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 124
	      apply 'mime_decode_binary'/2
		  (#{}#, Bin)
	  %% Line 125
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 126
		  call 'erlang':'list_to_binary'
		      (List)
	      in  %% Line 126
		  apply 'mime_decode'/1
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'mime_decode',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_l'/1 =
    %% Line 130
    fun (_cor0) ->
	let <L> =
	    %% Line 131
	    apply 'strip_spaces'/2
		(_cor0, [])
	in  %% Line 132
	    apply 'decode'/2
		(L, [])
'mime_decode_l'/1 =
    %% Line 136
    fun (_cor0) ->
	let <L> =
	    %% Line 137
	    apply 'strip_illegal'/3
		(_cor0, [], 0)
	in  %% Line 138
	    apply 'decode'/2
		(L, [])
'decode_to_string'/1 =
    %% Line 155
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 156
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  %% Line 156
		  apply 'decode_to_string'/1
		      (_cor1)
	  %% Line 157
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 158
	      apply 'decode_l'/1
		  (List)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'decode_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'mime_decode_to_string'/1 =
    %% Line 164
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 165
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  %% Line 165
		  apply 'mime_decode_to_string'/1
		      (_cor1)
	  %% Line 166
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 167
	      apply 'mime_decode_l'/1
		  (List)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'mime_decode_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_binary'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	case <_cor1,( _cor0
		      -| ['reuse_for_context'] )> of
	  <Result0,#{#<C>(8,1,'integer',['unsigned'|['big']]),
		     #<T0>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 189
	      case call 'erlang':'element'
		       (C, {'bad','bad','bad','bad','bad','bad','bad','bad','ws','ws','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad',62,'bad','bad','bad',63,52,53,54,55,56,57,58,59,60,61,'bad','bad','bad','eq','bad','bad','bad',0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,'bad','bad','bad','bad','bad','bad',26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,'bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad'}) of
		%% Line 190
		<'bad'> when 'true' ->
		    %% Line 191
		    call 'erlang':'error'
			({'badarg',C})
		%% Line 192
		<'ws'> when 'true' ->
		    %% Line 193
		    apply 'decode_binary'/2
			(Result0, T0)
		%% Line 194
		<'eq'> when 'true' ->
		    %% Line 195
		    case apply 'strip_ws'/1
			     (T0) of
		      %% Line 196
		      <#{#<61>(8,1,'integer',['unsigned'|['big']]),
			 #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 197
			  case apply 'strip_ws'/1
				   (T) of
			    <#{}#> when 'true' ->
				let <_cor3> =
				    %% Line 198
				    call 'erlang':'byte_size'
					(Result0)
				in  let <Split> =
					%% Line 198
					call 'erlang':'-'
					    (_cor3, 1)
				    in  %% Line 199
					case ( Result0
					       -| ['reuse_for_context'] ) of
					  <#{#<Result>(Split,8,'binary',['unsigned'|['big']]),
					     #<_cor16>(4,1,'integer',['unsigned'|['big']])}#> when 'true' ->
					      %% Line 200
					      Result
					  ( <_cor5> when 'true' ->
						do  primop 'bs_context_to_binary'
							(_cor5)
						    primop 'match_fail'
							({'badmatch',_cor5})
					    -| ['compiler_generated'] )
					end
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 201
		      <T> when 'true' ->
			  %% Line 202
			  case apply 'strip_ws'/1
				   (T) of
			    <#{}#> when 'true' ->
				let <_cor7> =
				    %% Line 203
				    call 'erlang':'byte_size'
					(Result0)
				in  let <Split> =
					%% Line 203
					call 'erlang':'-'
					    (_cor7, 1)
				    in  %% Line 204
					case ( Result0
					       -| ['reuse_for_context'] ) of
					  <#{#<Result>(Split,8,'binary',['unsigned'|['big']]),
					     #<_cor17>(2,1,'integer',['unsigned'|['big']])}#> when 'true' ->
					      %% Line 205
					      Result
					  ( <_cor9> when 'true' ->
						do  primop 'bs_context_to_binary'
							(_cor9)
						    primop 'match_fail'
							({'badmatch',_cor9})
					    -| ['compiler_generated'] )
					end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		    end
		%% Line 207
		<Bits> when 'true' ->
		    let <_cor11> =
			%% Line 208
			#{#<Result0>('all',1,'binary',['unsigned'|['big']]),
			  #<Bits>(6,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 208
			apply 'decode_binary'/2
			    (_cor11, T0)
	      end
	  %% Line 210
	  <Result,#{}#> when 'true' ->
	      %% Line 211
	      case call 'erlang':'is_binary'
		       (Result) of
		<'true'> when 'true' ->
		    %% Line 212
		    Result
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor14)
		    ( primop 'match_fail'
			  ({'function_clause',_cor15,_cor14})
		      -| [{'function_name',{'decode_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'mime_decode_binary'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	case <_cor1,( _cor0
		      -| ['reuse_for_context'] )> of
	  <Result,#{#<0>(8,1,'integer',['unsigned'|['big']]),
		    #<T>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 218
	      apply 'mime_decode_binary'/2
		  (Result, T)
	  %% Line 219
	  <Result0,#{#<C>(8,1,'integer',['unsigned'|['big']]),
		     #<T>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 220
	      case call 'erlang':'element'
		       (C, {'bad','bad','bad','bad','bad','bad','bad','bad','ws','ws','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad',62,'bad','bad','bad',63,52,53,54,55,56,57,58,59,60,61,'bad','bad','bad','eq','bad','bad','bad',0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,'bad','bad','bad','bad','bad','bad',26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,'bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad'}) of
		%% Line 221
		<Bits>
		    when call 'erlang':'is_integer'
			  (Bits) ->
		    let <_cor2> =
			%% Line 222
			#{#<Result0>('all',1,'binary',['unsigned'|['big']]),
			  #<Bits>(6,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 222
			apply 'mime_decode_binary'/2
			    (_cor2, T)
		%% Line 223
		<'eq'> when 'true' ->
		    %% Line 224
		    case apply 'tail_contains_more'/2
			     (T, 'false') of
		      %% Line 225
		      <{#{}#,Eq}> when 'true' ->
			  let <_cor3> =
			      %% Line 227
			      call 'erlang':'bit_size'
				  (Result0)
			  in  %% Line 227
			      case call 'erlang':'rem'
				       (_cor3, 8) of
				%% Line 228
				<0> when 'true' ->
				    %% Line 230
				    Result0
				%% Line 231
				<4>
				    when call 'erlang':'=:='
					  (Eq,
					   'true') ->
				    let <_cor4> =
					%% Line 233
					call 'erlang':'byte_size'
					    (Result0)
				    in  let <Split> =
					    %% Line 233
					    call 'erlang':'-'
						(_cor4, 1)
					in  %% Line 234
					    case ( Result0
						   -| ['reuse_for_context'] ) of
					      <#{#<Result>(Split,8,'binary',['unsigned'|['big']]),
						 #<_cor16>(4,1,'integer',['unsigned'|['big']])}#> when 'true' ->
						  %% Line 235
						  Result
					      ( <_cor6> when 'true' ->
						    do  primop 'bs_context_to_binary'
							    (_cor6)
							primop 'match_fail'
							    ({'badmatch',_cor6})
						-| ['compiler_generated'] )
					    end
				%% Line 236
				<2> when 'true' ->
				    let <_cor7> =
					%% Line 238
					call 'erlang':'byte_size'
					    (Result0)
				    in  let <Split> =
					    %% Line 238
					    call 'erlang':'-'
						(_cor7, 1)
					in  %% Line 239
					    case ( Result0
						   -| ['reuse_for_context'] ) of
					      <#{#<Result>(Split,8,'binary',['unsigned'|['big']]),
						 #<_cor17>(2,1,'integer',['unsigned'|['big']])}#> when 'true' ->
						  %% Line 240
						  Result
					      ( <_cor9> when 'true' ->
						    do  primop 'bs_context_to_binary'
							    (_cor9)
							primop 'match_fail'
							    ({'badmatch',_cor9})
						-| ['compiler_generated'] )
					    end
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor10})
				  -| ['compiler_generated'] )
			      end
		      %% Line 242
		      <{More,_cor18}> when 'true' ->
			  %% Line 244
			  apply 'mime_decode_binary'/2
			      (Result0, More)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		%% Line 246
		<_cor19> when 'true' ->
		    %% Line 247
		    apply 'mime_decode_binary'/2
			(Result0, T)
	      end
	  %% Line 249
	  <Result,#{}#> when 'true' ->
	      %% Line 250
	      case call 'erlang':'is_binary'
		       (Result) of
		<'true'> when 'true' ->
		    %% Line 251
		    Result
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor14)
		    ( primop 'match_fail'
			  ({'function_clause',_cor15,_cor14})
		      -| [{'function_name',{'mime_decode_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'decode'/2 =
    %% Line 253
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],A> when 'true' ->
	      A
	  %% Line 254
	  <[61|[61|[C2|[C1|Cs]]]],A> when 'true' ->
	      let <_cor4> =
		  %% Line 255
		  apply 'b64d'/1
		      (C1)
	      in  let <_cor5> =
		      %% Line 255
		      call 'erlang':'bsl'
			  (_cor4, 18)
		  in  let <_cor2> =
			  %% Line 255
			  apply 'b64d'/1
			      (C2)
		      in  let <_cor3> =
			      %% Line 255
			      call 'erlang':'bsl'
				  (_cor2, 12)
			  in  let <Bits2x6> =
				  %% Line 255
				  call 'erlang':'bor'
				      (_cor5, _cor3)
			      in  let <Octet1> =
				      %% Line 256
				      call 'erlang':'bsr'
					  (Bits2x6, 16)
				  in  %% Line 257
				      apply 'decode'/2
					  (Cs, [Octet1|A])
	  %% Line 258
	  <[61|[C3|[C2|[C1|Cs]]]],A> when 'true' ->
	      let <_cor12> =
		  %% Line 259
		  apply 'b64d'/1
		      (C1)
	      in  let <_cor13> =
		      %% Line 259
		      call 'erlang':'bsl'
			  (_cor12, 18)
		  in  let <_cor10> =
			  %% Line 259
			  apply 'b64d'/1
			      (C2)
		      in  let <_cor11> =
			      %% Line 259
			      call 'erlang':'bsl'
				  (_cor10, 12)
			  in  let <_cor14> =
				  %% Line 259
				  call 'erlang':'bor'
				      (_cor13, _cor11)
			      in  let <_cor8> =
				      %% Line 260
				      apply 'b64d'/1
					  (C3)
				  in  let <_cor9> =
					  %% Line 260
					  call 'erlang':'bsl'
					      (_cor8, 6)
				      in  let <Bits3x6> =
					      %% Line 260
					      call 'erlang':'bor'
						  (_cor14, _cor9)
					  in  let <Octet1> =
						  %% Line 261
						  call 'erlang':'bsr'
						      (Bits3x6, 16)
					      in  let <_cor17> =
						      %% Line 262
						      call 'erlang':'bsr'
							  (Bits3x6, 8)
						  in  let <Octet2> =
							  %% Line 262
							  call 'erlang':'band'
							      (_cor17, 255)
						      in  %% Line 263
							  apply 'decode'/2
							      (Cs, [Octet1|[Octet2|A]])
	  %% Line 264
	  <[C4|[C3|[C2|[C1|Cs]]]],A> when 'true' ->
	      let <_cor24> =
		  %% Line 265
		  apply 'b64d'/1
		      (C1)
	      in  let <_cor25> =
		      %% Line 265
		      call 'erlang':'bsl'
			  (_cor24, 18)
		  in  let <_cor22> =
			  %% Line 265
			  apply 'b64d'/1
			      (C2)
		      in  let <_cor23> =
			      %% Line 265
			      call 'erlang':'bsl'
				  (_cor22, 12)
			  in  let <_cor26> =
				  %% Line 265
				  call 'erlang':'bor'
				      (_cor25, _cor23)
			      in  let <_cor20> =
				      %% Line 266
				      apply 'b64d'/1
					  (C3)
				  in  let <_cor21> =
					  %% Line 266
					  call 'erlang':'bsl'
					      (_cor20, 6)
				      in  let <_cor27> =
					      %% Line 266
					      call 'erlang':'bor'
						  (_cor26, _cor21)
					  in  let <_cor19> =
						  %% Line 266
						  apply 'b64d'/1
						      (C4)
					      in  let <Bits4x6> =
						      %% Line 266
						      call 'erlang':'bor'
							  (_cor27, _cor19)
						  in  let <Octet1> =
							  %% Line 267
							  call 'erlang':'bsr'
							      (Bits4x6, 16)
						      in  let <_cor30> =
							      %% Line 268
							      call 'erlang':'bsr'
								  (Bits4x6, 8)
							  in  let <Octet2> =
								  %% Line 268
								  call 'erlang':'band'
								      (_cor30, 255)
							      in  let <Octet3> =
								      %% Line 269
								      call 'erlang':'band'
									  (Bits4x6, 255)
								  in  %% Line 270
								      apply 'decode'/2
									  (Cs, [Octet1|[Octet2|[Octet3|A]]])
	  ( <_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33})
		  -| [{'function_name',{'decode',2}}] )
	    -| ['compiler_generated'] )
	end
'strip_spaces'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],A> when 'true' ->
	      A
	  %% Line 277
	  <[32|Cs],A> when 'true' ->
	      apply 'strip_spaces'/2
		  (Cs, A)
	  %% Line 278
	  <[9|Cs],A> when 'true' ->
	      apply 'strip_spaces'/2
		  (Cs, A)
	  %% Line 279
	  <[13|Cs],A> when 'true' ->
	      apply 'strip_spaces'/2
		  (Cs, A)
	  %% Line 280
	  <[10|Cs],A> when 'true' ->
	      apply 'strip_spaces'/2
		  (Cs, A)
	  %% Line 281
	  <[C|Cs],A> when 'true' ->
	      apply 'strip_spaces'/2
		  (Cs, [C|A])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'strip_spaces',2}}] )
	    -| ['compiler_generated'] )
	end
'strip_ws'/1 =
    %% Line 283
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<9>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 284
	      apply 'strip_ws'/1
		  (T)
	  %% Line 285
	  <#{#<10>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 286
	      apply 'strip_ws'/1
		  (T)
	  %% Line 287
	  <#{#<13>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 288
	      apply 'strip_ws'/1
		  (T)
	  %% Line 289
	  <#{#<32>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 290
	      apply 'strip_ws'/1
		  (T)
	  %% Line 291
	  <T> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (T)
		  T
	end
'strip_illegal'/3 =
    %% Line 296
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],A,_X_Cnt> when 'true' ->
	      %% Line 297
	      A
	  %% Line 298
	  <[0|Cs],A,Cnt> when 'true' ->
	      %% Line 299
	      apply 'strip_illegal'/3
		  (Cs, A, Cnt)
	  %% Line 300
	  <[C|Cs],A,Cnt> when 'true' ->
	      %% Line 301
	      case call 'erlang':'element'
		       (C, {'bad','bad','bad','bad','bad','bad','bad','bad','ws','ws','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad',62,'bad','bad','bad',63,52,53,54,55,56,57,58,59,60,61,'bad','bad','bad','eq','bad','bad','bad',0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,'bad','bad','bad','bad','bad','bad',26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,'bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad'}) of
		%% Line 302
		<'bad'> when 'true' ->
		    %% Line 303
		    apply 'strip_illegal'/3
			(Cs, A, Cnt)
		%% Line 304
		<'ws'> when 'true' ->
		    %% Line 305
		    apply 'strip_illegal'/3
			(Cs, A, Cnt)
		%% Line 306
		<'eq'> when 'true' ->
		    let <_cor4> =
			%% Line 307
			apply 'tail_contains_more'/2
			    (Cs, 'false')
		    in  let <_cor3> =
			    %% Line 307
			    call 'erlang':'rem'
				(Cnt, 4)
			in  %% Line 307
			    case <_cor4,_cor3> of
			      %% Line 308
			      <{[],_cor12},0> when 'true' ->
				  %% Line 309
				  A
			      %% Line 310
			      <{[],'true'},2> when 'true' ->
				  %% Line 311
				  [61|[61|A]]
			      %% Line 312
			      <{[],_cor13},3> when 'true' ->
				  %% Line 313
				  [61|A]
			      %% Line 314
			      <{[H|T],_cor14},_cor15> when 'true' ->
				  let <_cor5> =
				      %% Line 316
				      call 'erlang':'+'
					  (Cnt, 1)
				  in  %% Line 316
				      apply 'strip_illegal'/3
					  (T, [H|A], _cor5)
			      ( <_fol3,_fol4> when 'true' ->
				    let <_cor6> = {_fol3,_fol4}
				    in  primop 'match_fail'
					    ({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
		%% Line 318
		<_cor16> when 'true' ->
		    let <_cor7> =
			%% Line 319
			call 'erlang':'+'
			    (Cnt, 1)
		    in  %% Line 319
			apply 'strip_illegal'/3
			    (Cs, [C|A], _cor7)
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'strip_illegal',3}}] )
	    -| ['compiler_generated'] )
	end
'tail_contains_more'/2 =
    %% Line 324
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Eq> when 'true' ->
	      %% Line 325
	      {[],Eq}
	  %% Line 326
	  <#{}#,Eq> when 'true' ->
	      %% Line 327
	      {#{}#,Eq}
	  %% Line 328
	  <More = [C|T],Eq> when 'true' ->
	      %% Line 329
	      case call 'erlang':'element'
		       (C, {'bad','bad','bad','bad','bad','bad','bad','bad','ws','ws','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad',62,'bad','bad','bad',63,52,53,54,55,56,57,58,59,60,61,'bad','bad','bad','eq','bad','bad','bad',0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,'bad','bad','bad','bad','bad','bad',26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,'bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad'}) of
		%% Line 330
		<'bad'> when 'true' ->
		    %% Line 331
		    apply 'tail_contains_more'/2
			(T, Eq)
		%% Line 332
		<'ws'> when 'true' ->
		    %% Line 333
		    apply 'tail_contains_more'/2
			(T, Eq)
		%% Line 334
		<'eq'> when 'true' ->
		    %% Line 335
		    apply 'tail_contains_more'/2
			(T, 'true')
		%% Line 336
		<_cor6> when 'true' ->
		    %% Line 337
		    {More,Eq}
	      end
	  %% Line 339
	  <More = #{#<C>(8,1,'integer',['unsigned'|['big']]),
		    #<T>('all',1,'binary',['unsigned'|['big']])}#,Eq> when 'true' ->
	      %% Line 340
	      case call 'erlang':'element'
		       (C, {'bad','bad','bad','bad','bad','bad','bad','bad','ws','ws','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad',62,'bad','bad','bad',63,52,53,54,55,56,57,58,59,60,61,'bad','bad','bad','eq','bad','bad','bad',0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,'bad','bad','bad','bad','bad','bad',26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,'bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad'}) of
		%% Line 341
		<'bad'> when 'true' ->
		    %% Line 342
		    apply 'tail_contains_more'/2
			(T, Eq)
		%% Line 343
		<'ws'> when 'true' ->
		    %% Line 344
		    apply 'tail_contains_more'/2
			(T, Eq)
		%% Line 345
		<'eq'> when 'true' ->
		    %% Line 346
		    apply 'tail_contains_more'/2
			(T, 'true')
		%% Line 347
		<_cor7> when 'true' ->
		    %% Line 348
		    {More,Eq}
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'tail_contains_more',2}}] )
	    -| ['compiler_generated'] )
	end
'b64e'/1 =
    %% Line 352
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 353
	    call 'erlang':'+'
		(_cor0, 1)
	in  %% Line 353
	    call 'erlang':'element'
		(_cor1, %% Line 354
			{65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47})
'b64d'/1 =
    %% Line 361
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 362
	    call 'erlang':'element'
		(_cor0, {'bad','bad','bad','bad','bad','bad','bad','bad','ws','ws','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','ws','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad',62,'bad','bad','bad',63,52,53,54,55,56,57,58,59,60,61,'bad','bad','bad','eq','bad','bad','bad',0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,'bad','bad','bad','bad','bad','bad',26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,'bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad','bad'})
	in  %% Line 362
	    apply 'b64d_ok'/1
		(_cor1)
'b64d_ok'/1 =
    %% Line 364
    fun (_cor0) ->
	case _cor0 of
	  <I>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      I
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'b64d_ok',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('base64')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('base64', _cor0)
end