module 'beam_lib' ['all_chunks'/1,
		   'build_module'/1,
		   'chunks'/2,
		   'chunks'/3,
		   'clear_crypto_key_fun'/0,
		   'cmp'/2,
		   'cmp_dirs'/2,
		   'code_change'/3,
		   'crypto_key_fun'/1,
		   'diff_dirs'/2,
		   'format_error'/1,
		   'get_crypto_key'/1,
		   'handle_call'/3,
		   'handle_cast'/2,
		   'handle_info'/2,
		   'info'/1,
		   'init'/1,
		   'make_crypto_key'/2,
		   'md5'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'strip'/1,
		   'strip_files'/1,
		   'strip_release'/1,
		   'terminate'/2,
		   'version'/1]
    attributes [%% Line 20
		'behaviour' =
		    %% Line 20
		    ['gen_server'],
		%% Line 48
		'export_type' =
		    %% Line 48
		    [{'attrib_entry',0}|[{'compinfo_entry',0}|[{'labeled_entry',0}]]],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'beam',{'type',55,'union',[{'type',55,'module',[]}|[{'remote_type',55,[{'atom',55,'file'}|[{'atom',55,'filename'}|[[]]]]}|[{'type',55,'binary',[]}]]]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'forms',{'type',57,'list',[{'remote_type',57,[{'atom',57,'erl_parse'}|[{'atom',57,'abstract_form'}|[[]]]]}]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'abst_code',{'type',59,'union',[{'type',59,'tuple',[{'ann_type',59,[{'var',59,'AbstVersion'}|[{'type',59,'atom',[]}]]}|[{'type',59,'forms',[]}]]}|[{'atom',59,'no_abstract_code'}]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'dataB',{'type',60,'binary',[]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'index',{'type',61,'non_neg_integer',[]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'label',{'type',62,'integer',[]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'chunkid',{'type',64,'nonempty_string',[]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'chunkname',{'type',66,'union',[{'atom',66,'abstract_code'}|[{'atom',66,'attributes'}|[{'atom',66,'compile_info'}|[{'atom',67,'exports'}|[{'atom',67,'labeled_exports'}|[{'atom',68,'imports'}|[{'atom',68,'indexed_imports'}|[{'atom',69,'locals'}|[{'atom',69,'labeled_locals'}|[{'atom',70,'atoms'}]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'chunkref',{'type',71,'union',[{'type',71,'chunkname',[]}|[{'type',71,'chunkid',[]}]]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{'attrib_entry',{'type',73,'tuple',[{'ann_type',73,[{'var',73,'Attribute'}|[{'type',73,'atom',[]}]]}|[{'type',73,'list',[{'ann_type',73,[{'var',73,'AttributeValue'}|[{'type',73,'term',[]}]]}]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'compinfo_entry',{'type',74,'tuple',[{'ann_type',74,[{'var',74,'InfoKey'}|[{'type',74,'atom',[]}]]}|[{'type',74,'term',[]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'labeled_entry',{'type',75,'tuple',[{'ann_type',75,[{'var',75,'Function'}|[{'type',75,'atom',[]}]]}|[{'type',75,'arity',[]}|[{'type',75,'label',[]}]]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'chunkdata',{'type',77,'union',[{'type',77,'tuple',[{'type',77,'chunkid',[]}|[{'type',77,'dataB',[]}]]}|[{'type',78,'tuple',[{'atom',78,'abstract_code'}|[{'type',78,'abst_code',[]}]]}|[{'type',79,'tuple',[{'atom',79,'attributes'}|[{'type',79,'list',[{'type',79,'attrib_entry',[]}]}]]}|[{'type',80,'tuple',[{'atom',80,'compile_info'}|[{'type',80,'list',[{'type',80,'compinfo_entry',[]}]}]]}|[{'type',81,'tuple',[{'atom',81,'exports'}|[{'type',81,'list',[{'type',81,'tuple',[{'type',81,'atom',[]}|[{'type',81,'arity',[]}]]}]}]]}|[{'type',82,'tuple',[{'atom',82,'labeled_exports'}|[{'type',82,'list',[{'type',82,'labeled_entry',[]}]}]]}|[{'type',83,'tuple',[{'atom',83,'imports'}|[{'type',83,'list',[{'type',83,'mfa',[]}]}]]}|[{'type',84,'tuple',[{'atom',84,'indexed_imports'}|[{'type',84,'list',[{'type',84,'tuple',[{'type',84,'index',[]}|[{'type',84,'module',[]}|[{'ann_type',84,[{'var',84,'Function'}|[{'type',84,'atom',[]}]]}|[{'type',84,'arity',[]}]]]]}]}]]}|[{'type',85,'tuple',[{'atom',85,'locals'}|[{'type',85,'list',[{'type',85,'tuple',[{'type',85,'atom',[]}|[{'type',85,'arity',[]}]]}]}]]}|[{'type',86,'tuple',[{'atom',86,'labeled_locals'}|[{'type',86,'list',[{'type',86,'labeled_entry',[]}]}]]}|[{'type',87,'tuple',[{'atom',87,'atoms'}|[{'type',87,'list',[{'type',87,'tuple',[{'type',87,'integer',[]}|[{'type',87,'atom',[]}]]}]}]]}]]]]]]]]]]]},[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'info_rsn',{'type',90,'union',[{'type',90,'tuple',[{'atom',90,'chunk_too_big'}|[{'remote_type',90,[{'atom',90,'file'}|[{'atom',90,'filename'}|[[]]]]}|[{'type',91,'chunkid',[]}|[{'ann_type',91,[{'var',91,'ChunkSize'}|[{'type',91,'non_neg_integer',[]}]]}|[{'ann_type',92,[{'var',92,'FileSize'}|[{'type',92,'non_neg_integer',[]}]]}]]]]]}|[{'type',93,'tuple',[{'atom',93,'invalid_beam_file'}|[{'remote_type',93,[{'atom',93,'file'}|[{'atom',93,'filename'}|[[]]]]}|[{'ann_type',94,[{'var',94,'Position'}|[{'type',94,'non_neg_integer',[]}]]}]]]}|[{'type',95,'tuple',[{'atom',95,'invalid_chunk'}|[{'remote_type',95,[{'atom',95,'file'}|[{'atom',95,'filename'}|[[]]]]}|[{'type',95,'chunkid',[]}]]]}|[{'type',96,'tuple',[{'atom',96,'missing_chunk'}|[{'remote_type',96,[{'atom',96,'file'}|[{'atom',96,'filename'}|[[]]]]}|[{'type',96,'chunkid',[]}]]]}|[{'type',97,'tuple',[{'atom',97,'not_a_beam_file'}|[{'remote_type',97,[{'atom',97,'file'}|[{'atom',97,'filename'}|[[]]]]}]]}|[{'type',98,'tuple',[{'atom',98,'file_error'}|[{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'filename'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'posix'}|[[]]]]}]]]}]]]]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'chnk_rsn',{'type',99,'union',[{'type',99,'tuple',[{'atom',99,'unknown_chunk'}|[{'remote_type',99,[{'atom',99,'file'}|[{'atom',99,'filename'}|[[]]]]}|[{'type',99,'atom',[]}]]]}|[{'type',100,'tuple',[{'atom',100,'key_missing_or_invalid'}|[{'remote_type',100,[{'atom',100,'file'}|[{'atom',100,'filename'}|[[]]]]}|[{'atom',101,'abstract_code'}]]]}|[{'type',102,'info_rsn',[]}]]]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'cmp_rsn',{'type',103,'union',[{'type',103,'tuple',[{'atom',103,'modules_different'}|[{'type',103,'module',[]}|[{'type',103,'module',[]}]]]}|[{'type',104,'tuple',[{'atom',104,'chunks_different'}|[{'type',104,'chunkid',[]}]]}|[{'atom',105,'different_chunks'}|[{'type',106,'info_rsn',[]}]]]]},[]}],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'info',1},[{'type',114,'bounded_fun',[{'type',114,'fun',[{'type',114,'product',[{'var',114,'Beam'}]}|[{'type',114,'union',[{'type',114,'list',[{'var',114,'InfoPair'}]}|[{'type',114,'tuple',[{'atom',114,'error'}|[{'atom',114,'beam_lib'}|[{'type',114,'info_rsn',[]}]]]}]]}]]}|[[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Beam'}|[{'type',115,'beam',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'InfoPair'}|[{'type',116,'union',[{'type',116,'tuple',[{'atom',116,'file'}|[{'ann_type',116,[{'var',116,'Filename'}|[{'remote_type',116,[{'atom',116,'file'}|[{'atom',116,'filename'}|[[]]]]}]]}]]}|[{'type',117,'tuple',[{'atom',117,'binary'}|[{'ann_type',117,[{'var',117,'Binary'}|[{'type',117,'binary',[]}]]}]]}|[{'type',118,'tuple',[{'atom',118,'module'}|[{'ann_type',118,[{'var',118,'Module'}|[{'type',118,'module',[]}]]}]]}|[{'type',119,'tuple',[{'atom',119,'chunks'}|[{'type',119,'list',[{'type',119,'tuple',[{'ann_type',119,[{'var',119,'ChunkId'}|[{'type',119,'chunkid',[]}]]}|[{'ann_type',120,[{'var',120,'Pos'}|[{'type',120,'non_neg_integer',[]}]]}|[{'ann_type',121,[{'var',121,'Size'}|[{'type',121,'non_neg_integer',[]}]]}]]]}]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'chunks',2},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'Beam'}|[{'var',126,'ChunkRefs'}]]}|[{'type',127,'union',[{'type',127,'tuple',[{'atom',127,'ok'}|[{'type',127,'tuple',[{'type',127,'module',[]}|[{'type',127,'list',[{'type',127,'chunkdata',[]}]}]]}]]}|[{'type',128,'tuple',[{'atom',128,'error'}|[{'atom',128,'beam_lib'}|[{'type',128,'chnk_rsn',[]}]]]}]]}]]}|[[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Beam'}|[{'type',129,'beam',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'ChunkRefs'}|[{'type',130,'list',[{'type',130,'chunkref',[]}]}]]]]}]]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'chunks',3},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'Beam'}|[{'var',135,'ChunkRefs'}|[{'var',135,'Options'}]]]}|[{'type',136,'union',[{'type',136,'tuple',[{'atom',136,'ok'}|[{'type',136,'tuple',[{'type',136,'module',[]}|[{'type',136,'list',[{'var',136,'ChunkResult'}]}]]}]]}|[{'type',137,'tuple',[{'atom',137,'error'}|[{'atom',137,'beam_lib'}|[{'type',137,'chnk_rsn',[]}]]]}]]}]]}|[[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Beam'}|[{'type',138,'beam',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'ChunkRefs'}|[{'type',139,'list',[{'type',139,'chunkref',[]}]}]]]]}|[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Options'}|[{'type',140,'list',[{'atom',140,'allow_missing_chunks'}]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'ChunkResult'}|[{'type',141,'union',[{'type',141,'chunkdata',[]}|[{'type',141,'tuple',[{'ann_type',141,[{'var',141,'ChunkRef'}|[{'type',141,'chunkref',[]}]]}|[{'atom',141,'missing_chunk'}]]}]]}]]]]}]]]]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'all_chunks',1},[{'type',147,'fun',[{'type',147,'product',[{'type',147,'beam',[]}]}|[{'type',147,'tuple',[{'atom',147,'ok'}|[{'atom',147,'beam_lib'}|[{'type',147,'list',[{'type',147,'tuple',[{'type',147,'chunkid',[]}|[{'type',147,'dataB',[]}]]}]}]]]}]]}]}],
		%% Line 152
		'spec' =
		    %% Line 152
		    [{{'cmp',2},[{'type',152,'bounded_fun',[{'type',152,'fun',[{'type',152,'product',[{'var',152,'Beam1'}|[{'var',152,'Beam2'}]]}|[{'type',152,'union',[{'atom',152,'ok'}|[{'type',152,'tuple',[{'atom',152,'error'}|[{'atom',152,'beam_lib'}|[{'type',152,'cmp_rsn',[]}]]]}]]}]]}|[[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Beam1'}|[{'type',153,'beam',[]}]]]]}|[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Beam2'}|[{'type',154,'beam',[]}]]]]}]]]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'cmp_dirs',2},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'Dir1'}|[{'var',160,'Dir2'}]]}|[{'type',161,'union',[{'type',161,'tuple',[{'var',161,'Only1'}|[{'var',161,'Only2'}|[{'var',161,'Different'}]]]}|[{'type',161,'tuple',[{'atom',161,'error'}|[{'atom',161,'beam_lib'}|[{'var',161,'Reason'}]]]}]]}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Dir1'}|[{'type',162,'union',[{'type',162,'atom',[]}|[{'remote_type',162,[{'atom',162,'file'}|[{'atom',162,'filename'}|[[]]]]}]]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Dir2'}|[{'type',163,'union',[{'type',163,'atom',[]}|[{'remote_type',163,[{'atom',163,'file'}|[{'atom',163,'filename'}|[[]]]]}]]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Only1'}|[{'type',164,'list',[{'remote_type',164,[{'atom',164,'file'}|[{'atom',164,'filename'}|[[]]]]}]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Only2'}|[{'type',165,'list',[{'remote_type',165,[{'atom',165,'file'}|[{'atom',165,'filename'}|[[]]]]}]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Different'}|[{'type',166,'list',[{'type',166,'tuple',[{'ann_type',166,[{'var',166,'Filename1'}|[{'remote_type',166,[{'atom',166,'file'}|[{'atom',166,'filename'}|[[]]]]}]]}|[{'ann_type',166,[{'var',166,'Filename2'}|[{'remote_type',166,[{'atom',166,'file'}|[{'atom',166,'filename'}|[[]]]]}]]}]]}]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Reason'}|[{'type',167,'union',[{'type',167,'tuple',[{'atom',167,'not_a_directory'}|[{'type',167,'term',[]}]]}|[{'type',167,'info_rsn',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'diff_dirs',2},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'Dir1'}|[{'var',172,'Dir2'}]]}|[{'type',172,'union',[{'atom',172,'ok'}|[{'type',172,'tuple',[{'atom',172,'error'}|[{'atom',172,'beam_lib'}|[{'var',172,'Reason'}]]]}]]}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Dir1'}|[{'type',173,'union',[{'type',173,'atom',[]}|[{'remote_type',173,[{'atom',173,'file'}|[{'atom',173,'filename'}|[[]]]]}]]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Dir2'}|[{'type',174,'union',[{'type',174,'atom',[]}|[{'remote_type',174,[{'atom',174,'file'}|[{'atom',174,'filename'}|[[]]]]}]]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Reason'}|[{'type',175,'union',[{'type',175,'tuple',[{'atom',175,'not_a_directory'}|[{'type',175,'term',[]}]]}|[{'type',175,'info_rsn',[]}]]}]]]]}]]]]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'strip',1},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'Beam1'}]}|[{'type',181,'union',[{'type',181,'tuple',[{'atom',181,'ok'}|[{'type',181,'tuple',[{'type',181,'module',[]}|[{'var',181,'Beam2'}]]}]]}|[{'type',181,'tuple',[{'atom',181,'error'}|[{'atom',181,'beam_lib'}|[{'type',181,'info_rsn',[]}]]]}]]}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Beam1'}|[{'type',182,'beam',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Beam2'}|[{'type',183,'beam',[]}]]]]}]]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'strip_files',1},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'Files'}]}|[{'type',190,'union',[{'type',190,'tuple',[{'atom',190,'ok'}|[{'type',190,'list',[{'type',190,'tuple',[{'type',190,'module',[]}|[{'var',190,'Beam'}]]}]}]]}|[{'type',190,'tuple',[{'atom',190,'error'}|[{'atom',190,'beam_lib'}|[{'type',190,'info_rsn',[]}]]]}]]}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Files'}|[{'type',191,'list',[{'type',191,'beam',[]}]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Beam'}|[{'type',192,'beam',[]}]]]]}]]]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'strip_release',1},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'Dir'}]}|[{'type',199,'union',[{'type',199,'tuple',[{'atom',199,'ok'}|[{'type',199,'list',[{'type',199,'tuple',[{'type',199,'module',[]}|[{'remote_type',199,[{'atom',199,'file'}|[{'atom',199,'filename'}|[[]]]]}]]}]}]]}|[{'type',200,'tuple',[{'atom',200,'error'}|[{'atom',200,'beam_lib'}|[{'var',200,'Reason'}]]]}]]}]]}|[[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'Dir'}|[{'type',201,'union',[{'type',201,'atom',[]}|[{'remote_type',201,[{'atom',201,'file'}|[{'atom',201,'filename'}|[[]]]]}]]}]]]]}|[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'Reason'}|[{'type',202,'union',[{'type',202,'tuple',[{'atom',202,'not_a_directory'}|[{'type',202,'term',[]}]]}|[{'type',202,'info_rsn',[]}]]}]]]]}]]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'version',1},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'Beam'}]}|[{'type',208,'union',[{'type',208,'tuple',[{'atom',208,'ok'}|[{'type',208,'tuple',[{'type',208,'module',[]}|[{'type',208,'list',[{'ann_type',208,[{'var',208,'Version'}|[{'type',208,'term',[]}]]}]}]]}]]}|[{'type',209,'tuple',[{'atom',209,'error'}|[{'atom',209,'beam_lib'}|[{'type',209,'chnk_rsn',[]}]]]}]]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Beam'}|[{'type',210,'beam',[]}]]]]}]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'md5',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'Beam'}]}|[{'type',222,'union',[{'type',222,'tuple',[{'atom',222,'ok'}|[{'type',222,'tuple',[{'type',222,'module',[]}|[{'var',222,'MD5'}]]}]]}|[{'type',222,'tuple',[{'atom',222,'error'}|[{'atom',222,'beam_lib'}|[{'type',222,'chnk_rsn',[]}]]]}]]}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Beam'}|[{'type',223,'beam',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'MD5'}|[{'type',224,'binary',[]}]]]]}]]]]}]}],
		%% Line 235
		'spec' =
		    %% Line 235
		    [{{'format_error',1},[{'type',235,'bounded_fun',[{'type',235,'fun',[{'type',235,'product',[{'var',235,'Reason'}]}|[{'remote_type',235,[{'atom',235,'io_lib'}|[{'atom',235,'chars'}|[[]]]]}]]}|[[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Reason'}|[{'type',236,'term',[]}]]]]}]]]}]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'mode',{'atom',283,'des3_cbc'},[]}],
		%% Line 284
		'type' =
		    %% Line 284
		    [{'crypto_fun_arg',{'type',284,'union',[{'atom',284,'init'}|[{'atom',285,'clear'}|[{'type',286,'tuple',[{'atom',286,'debug_info'}|[{'type',286,'mode',[]}|[{'type',286,'module',[]}|[{'remote_type',286,[{'atom',286,'file'}|[{'atom',286,'filename'}|[[]]]]}]]]]}]]]},[]}],
		%% Line 287
		'type' =
		    %% Line 287
		    [{'crypto_fun',{'type',287,'fun',[{'type',287,'product',[{'type',287,'crypto_fun_arg',[]}]}|[{'type',287,'term',[]}]]},[]}],
		%% Line 289
		'spec' =
		    %% Line 289
		    [{{'crypto_key_fun',1},[{'type',289,'bounded_fun',[{'type',289,'fun',[{'type',289,'product',[{'var',289,'CryptoKeyFun'}]}|[{'type',289,'union',[{'atom',289,'ok'}|[{'type',289,'tuple',[{'atom',289,'error'}|[{'var',289,'Reason'}]]}]]}]]}|[[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'CryptoKeyFun'}|[{'type',290,'crypto_fun',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Reason'}|[{'type',291,'union',[{'atom',291,'badfun'}|[{'atom',291,'exists'}|[{'type',291,'term',[]}]]]}]]]]}]]]]}]}],
		%% Line 296
		'spec' =
		    %% Line 296
		    [{{'clear_crypto_key_fun',0},[{'type',296,'bounded_fun',[{'type',296,'fun',[{'type',296,'product',[]}|[{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'tuple',[{'atom',296,'ok'}|[{'var',296,'Result'}]]}]]}]]}|[[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'Result'}|[{'type',297,'union',[{'atom',297,'undefined'}|[{'type',297,'term',[]}]]}]]]]}]]]}]}],
		%% Line 302
		'spec' =
		    %% Line 302
		    [{{'make_crypto_key',2},[{'type',302,'fun',[{'type',302,'product',[{'type',302,'mode',[]}|[{'type',302,'string',[]}]]}|[{'type',303,'tuple',[{'type',303,'mode',[]}|[{'type',303,'list',[{'type',303,'binary',[]}]}|[{'type',303,'binary',[]}|[{'type',303,'integer',[]}]]]]}]]}]}],
		%% Line 751
		'type' =
		    %% Line 751
		    [{{'record','bb'},[{'typed_record_field',{'record_field',751,{'atom',751,'pos'},{'integer',751,0}},{'type',751,'integer',[]}}|[{'typed_record_field',{'record_field',752,{'atom',752,'bin'}},{'type',752,'union',[{'atom',752,'undefined'}|[{'type',752,'binary',[]}]]}}|[{'typed_record_field',{'record_field',753,{'atom',753,'source'}},{'type',753,'union',[{'atom',753,'undefined'}|[{'type',753,'binary',[]}|[{'type',753,'string',[]}]]]}}]]],[]}],
		%% Line 828
		'spec' =
		    %% Line 828
		    [{{'file_error',2},[{'type',828,'fun',[{'type',828,'product',[{'remote_type',828,[{'atom',828,'file'}|[{'atom',828,'filename'}|[[]]]]}|[{'type',828,'tuple',[{'atom',828,'error'}|[{'type',828,'atom',[]}]]}]]}|[{'type',828,'no_return',[]}]]}]}],
		%% Line 833
		'spec' =
		    %% Line 833
		    [{{'error',1},[{'type',833,'fun',[{'type',833,'product',[{'type',833,'term',[]}]}|[{'type',833,'no_return',[]}]]}]}],
		%% Line 863
		'type' =
		    %% Line 863
		    [{{'record','state'},[{'typed_record_field',{'record_field',863,{'atom',863,'crypto_key_f'}},{'type',863,'union',[{'atom',863,'undefined'}|[{'type',863,'crypto_fun',[]}]]}}],[]}],
		%% Line 911
		'spec' =
		    %% Line 911
		    [{{'init',1},[{'type',911,'fun',[{'type',911,'product',[{'type',911,'nil',[]}]}|[{'type',911,'tuple',[{'atom',911,'ok'}|[{'type',911,'record',[{'atom',911,'state'}]}]]}]]}]}],
		%% Line 916
		'type' =
		    %% Line 916
		    [{'calls',{'type',916,'union',[{'atom',916,'clear_crypto_key_fun'}|[{'type',917,'tuple',[{'atom',917,'crypto_key_fun'}|[{'var',917,'_'}]]}|[{'type',918,'tuple',[{'atom',918,'get_crypto_key'}|[{'var',918,'_'}]]}]]]},[]}],
		%% Line 920
		'spec' =
		    %% Line 920
		    [{{'handle_call',3},[{'type',920,'fun',[{'type',920,'product',[{'type',920,'calls',[]}|[{'type',920,'tuple',[{'type',920,'pid',[]}|[{'type',920,'term',[]}]]}|[{'type',920,'record',[{'atom',920,'state'}]}]]]}|[{'type',921,'union',[{'type',921,'tuple',[{'atom',921,'noreply'}|[{'type',921,'record',[{'atom',921,'state'}]}]]}|[{'type',922,'tuple',[{'atom',922,'reply'}|[{'type',922,'union',[{'atom',922,'error'}|[{'type',922,'tuple',[{'atom',922,'error'}|[{'type',922,'union',[{'atom',922,'badfun'}|[{'atom',922,'exists'}]]}]]}]]}|[{'type',922,'record',[{'atom',922,'state'}]}]]]}|[{'type',923,'tuple',[{'atom',923,'stop'}|[{'atom',923,'normal'}|[{'type',923,'union',[{'atom',923,'undefined'}|[{'type',923,'tuple',[{'atom',923,'ok'}|[{'type',923,'term',[]}]]}]]}|[{'type',923,'record',[{'atom',923,'state'}]}]]]]}]]]}]]}]}],
		%% Line 992
		'spec' =
		    %% Line 992
		    [{{'handle_cast',2},[{'type',992,'fun',[{'type',992,'product',[{'type',992,'term',[]}|[{'type',992,'record',[{'atom',992,'state'}]}]]}|[{'type',992,'tuple',[{'atom',992,'noreply'}|[{'type',992,'record',[{'atom',992,'state'}]}]]}]]}]}],
		%% Line 997
		'spec' =
		    %% Line 997
		    [{{'handle_info',2},[{'type',997,'fun',[{'type',997,'product',[{'type',997,'term',[]}|[{'type',997,'record',[{'atom',997,'state'}]}]]}|[{'type',997,'tuple',[{'atom',997,'noreply'}|[{'type',997,'record',[{'atom',997,'state'}]}]]}]]}]}],
		%% Line 1002
		'spec' =
		    %% Line 1002
		    [{{'code_change',3},[{'type',1002,'fun',[{'type',1002,'product',[{'type',1002,'term',[]}|[{'type',1002,'record',[{'atom',1002,'state'}]}|[{'type',1002,'term',[]}]]]}|[{'type',1002,'tuple',[{'atom',1002,'ok'}|[{'type',1002,'record',[{'atom',1002,'state'}]}]]}]]}]}],
		%% Line 1007
		'spec' =
		    %% Line 1007
		    [{{'terminate',2},[{'type',1007,'fun',[{'type',1007,'product',[{'type',1007,'term',[]}|[{'type',1007,'record',[{'atom',1007,'state'}]}]]}|[{'atom',1007,'ok'}]]}]}]]
'info'/1 =
    %% Line 123
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 124
	    apply 'beam_filename'/1
		(_cor0)
	in  %% Line 124
	    apply 'read_info'/1
		(_cor1)
'chunks'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	%% Line 133
	apply 'read_chunk_data'/2
	    (_cor1, _cor0)
'chunks'/3 =
    %% Line 143
    fun (_cor2,_cor1,_cor0) ->
	%% Line 144
	try
	    apply 'read_chunk_data'/3
		(_cor2, _cor1, _cor0)
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 145
	      <'throw',Error,_cor10> when 'true' ->
		  Error
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'all_chunks'/1 =
    %% Line 149
    fun (_cor0) ->
	%% Line 150
	apply 'read_all_chunks'/1
	    (_cor0)
'cmp'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	%% Line 157
	try
	    apply 'cmp_files'/2
		(_cor1, _cor0)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 158
	      <'throw',Error,_cor8> when 'true' ->
		  Error
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'cmp_dirs'/2 =
    %% Line 169
    fun (_cor1,_cor0) ->
	catch
	    %% Line 170
	    apply 'compare_dirs'/2
		(_cor1, _cor0)
'diff_dirs'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	catch
	    %% Line 178
	    apply 'diff_directories'/2
		(_cor1, _cor0)
'strip'/1 =
    %% Line 185
    fun (_cor0) ->
	%% Line 186
	try
	    apply 'strip_file'/1
		(_cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 187
	      <'throw',Error,_cor6> when 'true' ->
		  Error
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'strip_files'/1 =
    %% Line 194
    fun (_cor0) ->
	case _cor0 of
	  <Files>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 195
	      try
		  apply 'strip_fils'/1
		      (Files)
	      of <_cor1> ->
		  _cor1
	      catch <_cor4,_cor3,_cor2> ->
		  case <_cor4,_cor3,_cor2> of
		    %% Line 196
		    <'throw',Error,_cor6> when 'true' ->
			Error
		    ( <_cor4,_cor3,_cor2> when 'true' ->
			  primop 'raise'
			      (_cor2, _cor3)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'strip_files',1}}] )
	    -| ['compiler_generated'] )
	end
'strip_release'/1 =
    %% Line 204
    fun (_cor0) ->
	catch
	    %% Line 205
	    apply 'strip_rel'/1
		(_cor0)
'version'/1 =
    %% Line 212
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 213
		apply 'read_chunk_data'/2
		    (_cor0, ['attributes'])
	in  %% Line 213
	    case _cor1 of
	      %% Line 214
	      <{'ok',{Module,[{'attributes',Attrs}|[]]}}> when 'true' ->
		  %% Line 215
		  case call 'lists':'keyfind'
			   ('vsn', 1, Attrs) of
		    <{'vsn',Version}> when 'true' ->
			%% Line 216
			{'ok',{Module,Version}}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      %% Line 217
	      <Error> when 'true' ->
		  %% Line 218
		  Error
	    end
'md5'/1 =
    %% Line 226
    fun (_cor0) ->
	let <_cor2> =
	    catch
		let <_cor1> =
		    %% Line 227
		    apply 'md5_chunks'/0
			()
		in  %% Line 227
		    apply 'read_significant_chunks'/2
			(_cor0, _cor1)
	in  %% Line 227
	    case _cor2 of
	      %% Line 228
	      <{'ok',{Module,Chunks0}}> when 'true' ->
		  let <Chunks> =
		      %% Line 229
		      apply 'filter_funtab'/1
			  (Chunks0)
		  in  let <_cor8> =
			  %% Line 230
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[{_X_Id,C}|_cor5]> when 'true' ->
					      let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [C|_cor7]
						    -| ['compiler_generated'] )
					  ( <[_cor4|_cor5]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor5)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Chunks)
			    -| ['list_comprehension'] )
		      in  let <_cor9> =
			      %% Line 230
			      call 'erlang':'md5'
				  (_cor8)
			  in  %% Line 230
			      {'ok',{Module,_cor9}}
	      %% Line 231
	      <Error> when 'true' ->
		  %% Line 232
		  Error
	    end
'format_error'/1 =
    %% Line 238
    fun (_cor0) ->
	case _cor0 of
	  <{'error',Error}> when 'true' ->
	      %% Line 239
	      apply 'format_error'/1
		  (Error)
	  %% Line 240
	  <{'error',Module,Error}> when 'true' ->
	      %% Line 241
	      call Module:'format_error'
		  (Error)
	  %% Line 242
	  <{'unknown_chunk',File,ChunkName}> when 'true' ->
	      %% Line 243
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[67|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[99|[104|[117|[110|[107|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[ChunkName|[]]])
	  %% Line 244
	  <{'invalid_chunk',File,ChunkId}> when 'true' ->
	      %% Line 245
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[73|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[101|[110|[116|[115|[32|[111|[102|[32|[99|[104|[117|[110|[107|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[ChunkId|[]]])
	  %% Line 246
	  <{'not_a_beam_file',File}> when 'true' ->
	      %% Line 247
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[78|[111|[116|[32|[97|[32|[66|[69|[65|[77|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 248
	  <{'file_error',File,Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 249
		  call 'file':'format_error'
		      (Reason)
	      in  %% Line 249
		  call 'io_lib':'format'
		      ([126|[116|[112|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]], [File|[_cor1|[]]])
	  %% Line 250
	  <{'missing_chunk',File,ChunkId}> when 'true' ->
	      %% Line 251
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[78|[111|[116|[32|[97|[32|[66|[69|[65|[77|[32|[102|[105|[108|[101|[58|[32|[110|[111|[32|[73|[70|[70|[32|[34|[126|[115|[34|[32|[99|[104|[117|[110|[107|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 252
																														    [File|[ChunkId|[]]])
	  %% Line 253
	  <{'invalid_beam_file',File,Pos}> when 'true' ->
	      %% Line 254
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[73|[110|[118|[97|[108|[105|[100|[32|[102|[111|[114|[109|[97|[116|[32|[111|[102|[32|[66|[69|[65|[77|[32|[102|[105|[108|[101|[32|[110|[101|[97|[114|[32|[98|[121|[116|[101|[32|[110|[117|[109|[98|[101|[114|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 255
																																								    [File|[Pos|[]]])
	  %% Line 256
	  <{'chunk_too_big',File,ChunkId,Size,Len}> when 'true' ->
	      %% Line 257
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[83|[105|[122|[101|[32|[111|[102|[32|[99|[104|[117|[110|[107|[32|[34|[126|[115|[34|[32|[105|[115|[32|[126|[112|[32|[98|[121|[116|[101|[115|[44|[32|[98|[117|[116|[32|[111|[110|[108|[121|[32|[126|[112|[32|[98|[121|[116|[101|[115|[32|[99|[111|[117|[108|[100|[32|[98|[101|[32|[114|[101|[97|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 259
																																																			      [File|[ChunkId|[Size|[Len|[]]]]])
	  %% Line 260
	  <{'chunks_different',Id}> when 'true' ->
	      %% Line 261
	      call 'io_lib':'format'
		  ([67|[104|[117|[110|[107|[32|[34|[126|[115|[34|[32|[100|[105|[102|[102|[101|[114|[115|[32|[105|[110|[32|[116|[104|[101|[32|[116|[119|[111|[32|[102|[105|[108|[101|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Id|[]])
	  %% Line 262
	  <'different_chunks'> when 'true' ->
	      %% Line 263
	      [84|[104|[101|[32|[116|[119|[111|[32|[102|[105|[108|[101|[115|[32|[104|[97|[118|[101|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[99|[104|[117|[110|[107|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 264
	  <{'modules_different',Module1,Module2}> when 'true' ->
	      %% Line 265
	      call 'io_lib':'format'
		  ([77|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[115|[32|[126|[112|[32|[97|[110|[100|[32|[126|[112|[32|[100|[105|[102|[102|[101|[114|[32|[105|[110|[32|[116|[104|[101|[32|[116|[119|[111|[32|[102|[105|[108|[101|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 266
																																					[Module1|[Module2|[]]])
	  %% Line 267
	  <{'not_a_directory',Name}> when 'true' ->
	      %% Line 268
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[78|[111|[116|[32|[97|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[126|[110]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 269
	  <{'key_missing_or_invalid',File,'abstract_code'}> when 'true' ->
	      %% Line 270
	      call 'io_lib':'format'
		  ([126|[116|[112|[58|[32|[67|[97|[110|[110|[111|[116|[32|[100|[101|[99|[114|[121|[112|[116|[32|[97|[98|[115|[116|[114|[97|[99|[116|[32|[99|[111|[100|[101|[32|[98|[101|[99|[97|[117|[115|[101|[32|[107|[101|[121|[32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103|[32|[111|[114|[32|[105|[110|[118|[97|[108|[105|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 271
																																																	       [File|[]])
	  %% Line 272
	  <'badfun'> when 'true' ->
	      %% Line 273
	      [110|[111|[116|[32|[97|[32|[102|[117|[110|[32|[111|[114|[32|[116|[104|[101|[32|[102|[117|[110|[32|[104|[97|[115|[32|[116|[104|[101|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 274
	  <'exists'> when 'true' ->
	      %% Line 275
	      [97|[32|[102|[117|[110|[32|[104|[97|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[98|[101|[101|[110|[32|[105|[110|[115|[116|[97|[108|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 276
	  <E> when 'true' ->
	      %% Line 277
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'crypto_key_fun'/1 =
    %% Line 293
    fun (_cor0) ->
	%% Line 294
	apply 'call_crypto_server'/1
	    ({'crypto_key_fun',_cor0})
'clear_crypto_key_fun'/0 =
    %% Line 299
    fun () ->
	%% Line 300
	apply 'call_crypto_server'/1
	    ('clear_crypto_key_fun')
'make_crypto_key'/2 =
    %% Line 305
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type = 'des3_cbc',String> when 'true' ->
	      %% Line 306
	      case call 'erlang':'md5'
		       (String) of
		<First = #{#<K1>(8,8,'binary',['unsigned'|['big']]),
			   #<K2>(8,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor3> =
			%% Line 307
			call 'lists':'reverse'
			    (String)
		    in  %% Line 307
			case call 'erlang':'md5'
				 ([First|_cor3]) of
			  <#{#<K3>(8,8,'binary',['unsigned'|['big']]),
			     #<IVec>(8,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      %% Line 308
			      {Type,[K1|[K2|[K3|[]]]],IVec,8}
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'make_crypto_key',2}}] )
	    -| ['compiler_generated'] )
	end
'read_info'/1 =
    %% Line 314
    fun (_cor0) ->
	%% Line 315
	try
	    %% Line 316
	    case apply 'scan_beam'/2
		     (_cor0, 'info') of
	      <{'ok',Module,Data}> when 'true' ->
		  let <_cor2> =
		      %% Line 317
		      case <> of
			%% Line 318
			<>
			    when call 'erlang':'is_binary'
				  (_cor0) ->
			    {'binary',_cor0}
			%% Line 319
			<> when 'true' ->
			    {'file',_cor0}
		      end
		  in  %% Line 317
		      [_cor2|%% Line 320
			     [{'module',Module}|[{'chunks',Data}|[]]]]
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 321
	      <'throw',Error,_cor8> when 'true' ->
		  Error
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'diff_directories'/2 =
    %% Line 323
    fun (_cor1,_cor0) ->
	%% Line 324
	case apply 'compare_dirs'/2
		 (_cor1, _cor0) of
	  <{OnlyDir1,OnlyDir2,Diff}> when 'true' ->
	      do  %% Line 325
		  apply 'diff_only'/2
		      (_cor1, OnlyDir1)
		  do  %% Line 326
		      apply 'diff_only'/2
			  (_cor0, OnlyDir2)
		      let <_cor5> =
			  %% Line 327
			  ( fun (_cor3) ->
				call 'io':'format'
				    ([42|[42|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]], [_cor3|[]])
			    -| [{'id',{0,0,'-diff_directories/2-fun-0-'}}] )
		      in  do  %% Line 327
			      call 'lists':'foreach'
				  (_cor5, Diff)
			      %% Line 328
			      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'diff_only'/2 =
    %% Line 330
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Dir,[]> when 'true' ->
	      %% Line 331
	      'ok'
	  %% Line 332
	  <Dir,Only> when 'true' ->
	      %% Line 333
	      call 'io':'format'
		  ([79|[110|[108|[121|[32|[105|[110|[32|[126|[116|[112|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]], [Dir|[Only|[]]])
	end
'compare_dirs'/2 =
    %% Line 336
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 337
	    apply 'beam_files'/1
		(_cor1)
	in  let <R1> =
		%% Line 337
		call 'sofs':'relation'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 338
		    apply 'beam_files'/1
			(_cor0)
		in  let <R2> =
			%% Line 338
			call 'sofs':'relation'
			    (_cor4)
		    in  let <F1> =
			    %% Line 339
			    call 'sofs':'domain'
				(R1)
			in  let <F2> =
				%% Line 340
				call 'sofs':'domain'
				    (R2)
			    in  %% Line 341
				case call 'sofs':'symmetric_partition'
					 (F1, F2) of
				  <{O1,Both,O2}> when 'true' ->
				      let <OnlyL1> =
					  %% Line 342
					  call 'sofs':'image'
					      (R1, O1)
				      in  let <OnlyL2> =
					      %% Line 343
					      call 'sofs':'image'
						  (R2, O2)
					  in  let <_cor11> =
						  %% Line 344
						  call 'sofs':'restriction'
						      (R1, Both)
					      in  let <B1> =
						      %% Line 344
						      call 'sofs':'to_external'
							  (_cor11)
						  in  let <_cor13> =
							  %% Line 345
							  call 'sofs':'restriction'
							      (R2, Both)
						      in  let <B2> =
							      %% Line 345
							      call 'sofs':'to_external'
								  (_cor13)
							  in  let <Diff> =
								  %% Line 346
								  apply 'compare_files'/3
								      (B1, B2, [])
							      in  let <_cor17> =
								      %% Line 347
								      call 'sofs':'to_external'
									  (OnlyL1)
								  in  let <_cor16> =
									  %% Line 347
									  call 'sofs':'to_external'
									      (OnlyL2)
								      in  %% Line 347
									  {_cor17,_cor16,Diff}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
'compare_files'/3 =
    %% Line 349
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],[],Acc> when 'true' ->
	      %% Line 350
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 351
	  <[{_cor10,F1}|R1],[{_cor11,F2}|R2],Acc> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 352
		      apply 'cmp_files'/2
			  (F1, F2)
	      in  let <_cor5> =
		      %% Line 352
		      case _cor3 of
			%% Line 353
			<{'error',_X_Mod,_X_Reason}> when 'true' ->
			    %% Line 354
			    [{F1,F2}|Acc]
			%% Line 355
			<'ok'> when 'true' ->
			    %% Line 356
			    Acc
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 358
		      apply 'compare_files'/3
			  (R1, R2, _cor5)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'compare_files',3}}] )
	    -| ['compiler_generated'] )
	end
'beam_files'/1 =
    %% Line 360
    fun (_cor0) ->
	%% Line 361
	case apply 'assert_directory'/1
		 (_cor0) of
	  <'ok'> when 'true' ->
	      let <_cor2> =
		  %% Line 362
		  call 'filename':'join'
		      (_cor0, [42|[46|[98|[101|[97|[109]]]]]])
	      in  let <L> =
		      %% Line 362
		      call 'filelib':'wildcard'
			  (_cor2)
		  in  %% Line 363
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[Path|_cor5]> when 'true' ->
					  let <_cor7> =
					      call 'filename':'basename'
						  (Path)
					  in  let <_cor8> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [{_cor7,Path}|_cor8]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(L)
			-| ['list_comprehension'] )
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'cmp_files'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	%% Line 367
	case apply 'read_all_but_useless_chunks'/1
		 (_cor1) of
	  <{'ok',{M1,L1}}> when 'true' ->
	      %% Line 368
	      case apply 'read_all_but_useless_chunks'/1
		       (_cor0) of
		<{'ok',{M2,L2}}> when 'true' ->
		    %% Line 369
		    case <> of
		      %% Line 370
		      <>
			  when call 'erlang':'=:='
				(M1,
				 M2) ->
			  %% Line 371
			  apply 'cmp_lists'/2
			      (L1, L2)
		      %% Line 372
		      <> when 'true' ->
			  %% Line 373
			  apply 'error'/1
			      ({'modules_different',M1,M2})
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'cmp_lists'/2 =
    %% Line 376
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],[]> when 'true' ->
	      %% Line 377
	      'ok'
	  %% Line 378
	  <[{Id,C1}|R1],[{_cor4,C2}|R2]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Id) ->
	      %% Line 379
	      case <> of
		%% Line 380
		<>
		    when call 'erlang':'=:='
			  (C1,
			   C2) ->
		    %% Line 381
		    apply 'cmp_lists'/2
			(R1, R2)
		%% Line 382
		<> when 'true' ->
		    %% Line 383
		    apply 'error'/1
			({'chunks_different',Id})
	      end
	  %% Line 385
	  <_cor5,_cor6> when 'true' ->
	      %% Line 386
	      apply 'error'/1
		  ('different_chunks')
	end
'strip_rel'/1 =
    %% Line 388
    fun (_cor0) ->
	%% Line 389
	case apply 'assert_directory'/1
		 (_cor0) of
	  <'ok'> when 'true' ->
	      let <_cor2> =
		  %% Line 390
		  call 'filename':'join'
		      (_cor0, [108|[105|[98|[47|[42|[47|[101|[98|[105|[110|[47|[42|[46|[98|[101|[97|[109]]]]]]]]]]]]]]]]])
	      in  let <_cor3> =
		      %% Line 390
		      call 'filelib':'wildcard'
			  (_cor2)
		  in  %% Line 390
		      apply 'strip_fils'/1
			  (_cor3)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'strip_fils'/1 =
    %% Line 393
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 394
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[F|_cor2]> when 'true' ->
				case apply 'strip_file'/1
					 (F) of
				  <{'ok',Reply}> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [Reply|_cor5]
					    -| ['compiler_generated'] )
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor4})
				    -| ['compiler_generated'] )
				end
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 394
	    {'ok',_cor6}
'strip_file'/1 =
    %% Line 397
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 398
	    apply 'significant_chunks'/0
		()
	in  %% Line 398
	    case apply 'read_significant_chunks'/2
		     (_cor0, _cor1) of
	      <{'ok',{Mod,Chunks}}> when 'true' ->
		  %% Line 399
		  case apply 'build_module'/1
			   (Chunks) of
		    <{'ok',Stripped0}> when 'true' ->
			let <Stripped> =
			    %% Line 400
			    apply 'compress'/1
				(Stripped0)
			in  %% Line 401
			    case _cor0 of
			      %% Line 402
			      <_cor12>
				  when call 'erlang':'is_binary'
					(_cor0) ->
				  %% Line 403
				  {'ok',{Mod,Stripped}}
			      %% Line 404
			      <_cor13> when 'true' ->
				  let <FileName> =
				      %% Line 405
				      apply 'beam_filename'/1
					  (_cor0)
				  in  %% Line 406
				      case call 'file':'open'
					       (FileName, ['raw'|['binary'|['write']]]) of
					%% Line 407
					<{'ok',Fd}> when 'true' ->
					    %% Line 408
					    case call 'file':'write'
						     (Fd, Stripped) of
					      %% Line 409
					      <'ok'> when 'true' ->
						  %% Line 410
						  case call 'file':'close'
							   (Fd) of
						    <'ok'> when 'true' ->
							%% Line 411
							{'ok',{Mod,FileName}}
						    ( <_cor6> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor6})
						      -| ['compiler_generated'] )
						  end
					      %% Line 412
					      <Error> when 'true' ->
						  %% Line 413
						  case call 'file':'close'
							   (Fd) of
						    <'ok'> when 'true' ->
							%% Line 414
							apply 'file_error'/2
							    (FileName, Error)
						    ( <_cor7> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor7})
						      -| ['compiler_generated'] )
						  end
					    end
					%% Line 416
					<Error> when 'true' ->
					    %% Line 417
					    apply 'file_error'/2
						(FileName, Error)
				      end
			    end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'build_module'/1 =
    %% Line 421
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 422
	    apply 'build_chunks'/1
		(_cor0)
	in  let <Chunks> =
		%% Line 422
		call 'erlang':'list_to_binary'
		    (_cor1)
	    in  let <Size> =
		    %% Line 423
		    call 'erlang':'byte_size'
			(Chunks)
		in  %% Line 424
		    case call 'erlang':'rem'
			     (Size, 4) of
		      <0> when 'true' ->
			  let <_cor5> =
			      %% Line 425
			      call 'erlang':'+'
				  (Size, 4)
			  in  let <_cor6> =
				  %% Line 425
				  #{#<70>(8,1,'integer',['unsigned'|['big']]),
				    #<79>(8,1,'integer',['unsigned'|['big']]),
				    #<82>(8,1,'integer',['unsigned'|['big']]),
				    #<49>(8,1,'integer',['unsigned'|['big']]),
				    #<_cor5>(32,1,'integer',['unsigned'|['big']]),
				    #<66>(8,1,'integer',['unsigned'|['big']]),
				    #<69>(8,1,'integer',['unsigned'|['big']]),
				    #<65>(8,1,'integer',['unsigned'|['big']]),
				    #<77>(8,1,'integer',['unsigned'|['big']]),
				    #<Chunks>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 425
				  {'ok',_cor6}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
'build_chunks'/1 =
    %% Line 427
    fun (_cor0) ->
	case _cor0 of
	  <[{Id,Data}|Chunks]> when 'true' ->
	      let <BId> =
		  %% Line 428
		  call 'erlang':'list_to_binary'
		      (Id)
	      in  let <Size> =
		      %% Line 429
		      call 'erlang':'byte_size'
			  (Data)
		  in  let <_cor3> =
			  %% Line 430
			  #{#<BId>('all',8,'binary',['unsigned'|['big']]),
			    #<Size>(32,1,'integer',['unsigned'|['big']])}#
		      in  let <_cor4> =
			      %% Line 430
			      apply 'pad'/1
				  (Size)
			  in  let <Chunk> =
				  %% Line 430
				  [_cor3|[Data|_cor4]]
			      in  let <_cor6> =
				      %% Line 431
				      apply 'build_chunks'/1
					  (Chunks)
				  in  %% Line 431
				      [Chunk|_cor6]
	  %% Line 432
	  <[]> when 'true' ->
	      %% Line 433
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'build_chunks',1}}] )
	    -| ['compiler_generated'] )
	end
'pad'/1 =
    %% Line 435
    fun (_cor0) ->
	%% Line 436
	case call 'erlang':'rem'
		 (_cor0, 4) of
	  %% Line 437
	  <0> when 'true' ->
	      []
	  %% Line 438
	  <Rem> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'-'
		      (4, Rem)
	      in  call 'lists':'duplicate'
		      (_cor1, 0)
	end
'read_all_but_useless_chunks'/1 =
    %% Line 442
    fun (_cor0) ->
	case _cor0 of
	  <File0>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(_cor0)
		in  let <_cor2> =
			%% Line 443
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 444
			    call 'erlang':'is_binary'
				(_cor0)
			in  let <_cor4> =
				%% Line 443
				call 'erlang':'or'
				    (_cor2, _cor3)
			    in  call 'erlang':'or'
				    (_cor1, _cor4) ->
	      let <File> =
		  %% Line 445
		  apply 'beam_filename'/1
		      (File0)
	      in  %% Line 446
		  case apply 'scan_beam'/2
			   (File, 'info') of
		    <{'ok',Module,ChunkIds0}> when 'true' ->
			let <_cor13> =
			    %% Line 447
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor10) ->
					  case _cor10 of
					    <[{Name,_cor18,_cor19}|_cor8]> when 'true' ->
						%% Line 448
						( case apply 'is_useless_chunk'/1
							   (Name) of
						    <'false'> when 'true' ->
							let <_cor11> =
							    apply 'lc$^0'/1
								(_cor8)
							in  ( [Name|_cor11]
							      -| ['compiler_generated'] )
						    ( <'true'> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor8)
						      -| ['compiler_generated'] )
						    ( <_cor_variable> when 'true' ->
							  call 'erlang':'error'
							      ('badarg')
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					    ( <[_cor7|_cor8]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor8)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor10> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor10})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (ChunkIds0)
			      -| ['list_comprehension'] )
			in  %% Line 449
			    case apply 'scan_beam'/2
				     (File, _cor13) of
			      <{'ok',_cor20,Chunks}>
				  when call 'erlang':'=:='
					(_cor20,
					 Module) ->
				  let <_cor16> =
				      %% Line 450
				      call 'lists':'reverse'
					  (Chunks)
				  in  %% Line 450
				      {'ok',{Module,_cor16}}
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor15})
				-| ['compiler_generated'] )
			    end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'read_all_but_useless_chunks',1}}] )
	    -| ['compiler_generated'] )
	end
'is_useless_chunk'/1 =
    %% Line 452
    fun (_cor0) ->
	case _cor0 of
	  <[67|[73|[110|[102]]]]> when 'true' ->
	      'true'
	  %% Line 453
	  <_cor2> when 'true' ->
	      'false'
	end
'read_significant_chunks'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	%% Line 457
	case apply 'read_chunk_data'/3
		 (_cor1, _cor0, ['allow_missing_chunks']) of
	  %% Line 458
	  <{'ok',{Module,Chunks0}}> when 'true' ->
	      let <Mandatory> =
		  %% Line 459
		  apply 'mandatory_chunks'/0
		      ()
	      in  let <Chunks> =
		      %% Line 460
		      apply 'filter_significant_chunks'/4
			  (Chunks0, Mandatory, _cor1, Module)
		  in  %% Line 461
		      {'ok',{Module,Chunks}}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'filter_significant_chunks'/4 =
    %% Line 464
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Pair = {_cor10,Data}|Cs],Mandatory,File,Mod>
	      when %% Line 465
		call 'erlang':'is_binary'
		    (Data) ->
	      let <_cor4> =
		  %% Line 466
		  apply 'filter_significant_chunks'/4
		      (Cs, Mandatory, File, Mod)
	      in  %% Line 466
		  [Pair|_cor4]
	  %% Line 467
	  <[{Id,'missing_chunk'}|Cs],Mandatory,File,Mod> when 'true' ->
	      %% Line 468
	      case call 'lists':'member'
		       (Id, Mandatory) of
		%% Line 469
		<'false'> when 'true' ->
		    %% Line 470
		    apply 'filter_significant_chunks'/4
			(Cs, Mandatory, File, Mod)
		%% Line 471
		<'true'> when 'true' ->
		    %% Line 472
		    apply 'error'/1
			({'missing_chunk',File,Id})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 474
	  <[],_cor11,_cor12,_cor13> when 'true' ->
	      []
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'filter_significant_chunks',4}}] )
	    -| ['compiler_generated'] )
	end
'filter_funtab'/1 =
    %% Line 476
    fun (_cor0) ->
	case _cor0 of
	  <[{Tag = [70|[117|[110|[84]]]],#{#<L>(4,8,'binary',['unsigned'|['big']]),
					   #<Data0>('all',8,'binary',['unsigned'|['big']])}#}|Cs]> when 'true' ->
	      let <Data> =
		  %% Line 477
		  apply 'filter_funtab_1'/2
		      (Data0, #{#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']])}#)
	      in  let <_cor2> =
		      %% Line 478
		      call 'erlang':'iolist_to_binary'
			  (Data)
		  in  let <Funtab> =
			  %% Line 478
			  #{#<L>('all',8,'binary',['unsigned'|['big']]),
			    #<_cor2>('all',8,'binary',['unsigned'|['big']])}#
		      in  let <_cor4> =
			      %% Line 479
			      apply 'filter_funtab'/1
				  (Cs)
			  in  %% Line 479
			      [{Tag,Funtab}|_cor4]
	  %% Line 480
	  <[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 481
		  apply 'filter_funtab'/1
		      (T)
	      in  %% Line 481
		  [H|_cor5]
	  %% Line 482
	  <[]> when 'true' ->
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'filter_funtab',1}}] )
	    -| ['compiler_generated'] )
	end
'filter_funtab_1'/2 =
    %% Line 484
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{#<Important>(20,8,'binary',['unsigned'|['big']]),
	     #<_X_OldUniq>(4,8,'binary',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Zero> when 'true' ->
	      let <_cor2> =
		  %% Line 485
		  apply 'filter_funtab_1'/2
		      (T, Zero)
	      in  %% Line 485
		  [Important|[Zero|_cor2]]
	  %% Line 486
	  <Tail,_cor5>
	      when call 'erlang':'is_binary'
		    (Tail) ->
	      [Tail|[]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'filter_funtab_1',2}}] )
	    -| ['compiler_generated'] )
	end
'read_all_chunks'/1 =
    %% Line 488
    fun (_cor0) ->
	case _cor0 of
	  <File0>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(_cor0)
		in  let <_cor2> =
			%% Line 489
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 490
			    call 'erlang':'is_binary'
				(_cor0)
			in  let <_cor4> =
				%% Line 489
				call 'erlang':'or'
				    (_cor2, _cor3)
			    in  call 'erlang':'or'
				    (_cor1, _cor4) ->
	      %% Line 491
	      try
		  let <File> =
		      %% Line 492
		      apply 'beam_filename'/1
			  (File0)
		  in  %% Line 493
		      case apply 'scan_beam'/2
			       (File, 'info') of
			<{'ok',Module,ChunkIds0}> when 'true' ->
			    let <_cor11> =
				%% Line 494
				( letrec
				      'lc$^0'/1 =
					  fun (_cor9) ->
					      case _cor9 of
						<[{Name,_cor20,_cor21}|_cor8]> when 'true' ->
						    let <_cor10> =
							apply 'lc$^0'/1
							    (_cor8)
						    in  ( [Name|_cor10]
							  -| ['compiler_generated'] )
						( <[_cor7|_cor8]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor8)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor9> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor9})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (ChunkIds0)
				  -| ['list_comprehension'] )
			    in  %% Line 495
				case apply 'scan_beam'/2
					 (File, _cor11) of
				  <{'ok',_cor22,Chunks}>
				      when call 'erlang':'=:='
					    (_cor22,
					     Module) ->
				      let <_cor14> =
					  %% Line 496
					  call 'lists':'reverse'
					      (Chunks)
				      in  %% Line 496
					  {'ok',Module,_cor14}
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor13})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	      of <_cor15> ->
		  _cor15
	      catch <_cor18,_cor17,_cor16> ->
		  case <_cor18,_cor17,_cor16> of
		    %% Line 497
		    <'throw',Error,_cor23> when 'true' ->
			Error
		    ( <_cor18,_cor17,_cor16> when 'true' ->
			  primop 'raise'
			      (_cor16, _cor17)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19})
		  -| [{'function_name',{'read_all_chunks',1}}] )
	    -| ['compiler_generated'] )
	end
'read_chunk_data'/2 =
    %% Line 499
    fun (_cor1,_cor0) ->
	%% Line 500
	try
	    apply 'read_chunk_data'/3
		(_cor1, _cor0, [])
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 501
	      <'throw',Error,_cor8> when 'true' ->
		  Error
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'read_chunk_data'/3 =
    %% Line 504
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File0,ChunkNames0,Options>
	      when let <_cor3> =
		    %% Line 505
		    call 'erlang':'is_atom'
			(File0)
		in  let <_cor4> =
			%% Line 505
			call 'erlang':'is_list'
			    (File0)
		    in  let <_cor5> =
			    %% Line 505
			    call 'erlang':'is_binary'
				(File0)
			in  let <_cor6> =
				%% Line 505
				call 'erlang':'or'
				    (_cor4, _cor5)
			    in  %% Line 505
				call 'erlang':'or'
				    (_cor3, _cor6) ->
	      let <File> =
		  %% Line 506
		  apply 'beam_filename'/1
		      (File0)
	      in  %% Line 507
		  case apply 'check_chunks'/4
			   (ChunkNames0, File, [], []) of
		    <{ChunkIds,Names}> when 'true' ->
			let <AllowMissingChunks> =
			    %% Line 508
			    call 'lists':'member'
				('allow_missing_chunks', Options)
			in  %% Line 509
			    case apply 'scan_beam'/3
				     (File, ChunkIds, AllowMissingChunks) of
			      <{'ok',Module,Chunks}> when 'true' ->
				  let <AT> =
				      %% Line 510
				      call 'ets':'new'
					  ('beam_symbols', [])
				  in  let <T> = {%% Line 511
					   'empty',%% Line 511
						   AT}
				      in  %% Line 512
					  letrec
					      'after$^0'/0 =
						  fun () ->
						      %% Line 513
						      call 'ets':'delete'
							  (AT)
					  in  try
						  apply 'chunks_to_data'/7
						      (Names, Chunks, File, Chunks, Module, T, [])
					      of <_cor13> ->
						  do  ( apply 'after$^0'/0
							    ()
							-| ['compiler_generated'] )
						      _cor13
					      catch <_cor16,_cor15,_cor14> ->
						  do  ( apply 'after$^0'/0
							    ()
							-| ['compiler_generated'] )
						      primop 'raise'
							  (_cor14, _cor15)
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'read_chunk_data',3}}] )
	    -| ['compiler_generated'] )
	end
'check_chunks'/4 =
    %% Line 517
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[ChunkName|Ids],File,IL,L>
	      when call 'erlang':'is_atom'
		    (ChunkName) ->
	      let <ChunkId> =
		  %% Line 518
		  apply 'chunk_name_to_id'/2
		      (ChunkName, File)
	      in  %% Line 519
		  apply 'check_chunks'/4
		      (Ids, File, [ChunkId|IL], [{ChunkId,ChunkName}|L])
	  %% Line 520
	  <[ChunkId|Ids],File,IL,L> when 'true' ->
	      %% Line 521
	      apply 'check_chunks'/4
		  (Ids, File, [ChunkId|IL], [{ChunkId,ChunkId}|L])
	  %% Line 522
	  <[],_X_File,IL,L> when 'true' ->
	      let <_cor6> =
		  %% Line 523
		  call 'lists':'usort'
		      (IL)
	      in  let <_cor5> =
		      %% Line 523
		      call 'lists':'reverse'
			  (L)
		  in  %% Line 523
		      {_cor6,_cor5}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'check_chunks',4}}] )
	    -| ['compiler_generated'] )
	end
'scan_beam'/2 =
    %% Line 526
    fun (_cor1,_cor0) ->
	%% Line 527
	apply 'scan_beam'/3
	    (_cor1, _cor0, 'false')
'scan_beam'/3 =
    %% Line 530
    fun (_cor2,_cor1,_cor0) ->
	%% Line 531
	case apply 'scan_beam1'/2
		 (_cor2, _cor1) of
	  %% Line 532
	  <{'missing',_X_FD,Mod,Data,What}>
	      when call 'erlang':'=:='
		    (_cor0,
		     'true') ->
	      let <_cor7> =
		  %% Line 533
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[Id|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [{Id,'missing_chunk'}|_cor6]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      Data
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (What)
		    -| ['list_comprehension'] )
	      in  %% Line 533
		  {'ok',Mod,_cor7}
	  %% Line 534
	  <{'missing',FD,_X_Mod,_X_Data,What}> when 'true' ->
	      let <_cor9> =
		  %% Line 535
		  apply 'filename'/1
		      (FD)
	      in  let <_cor8> =
		      %% Line 535
		      call 'erlang':'hd'
			  (What)
		  in  %% Line 535
		      apply 'error'/1
			  ({'missing_chunk',_cor9,_cor8})
	  %% Line 536
	  <R> when 'true' ->
	      %% Line 537
	      R
	end
'scan_beam1'/2 =
    %% Line 541
    fun (_cor1,_cor0) ->
	let <FD> =
	    %% Line 542
	    apply 'open_file'/1
		(_cor1)
	in  let <_cor3> =
		catch
		    %% Line 543
		    apply 'scan_beam2'/2
			(FD, _cor0)
	    in  %% Line 543
		case _cor3 of
		  %% Line 544
		  <Error>
		      when try
			    let <_cor4> =
				call 'erlang':'element'
				    (1, _cor3)
			    in  call 'erlang':'=:='
				    ('error', _cor4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      %% Line 545
		      call 'erlang':'throw'
			  (Error)
		  %% Line 546
		  <R> when 'true' ->
		      %% Line 547
		      R
		end
'scan_beam2'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	%% Line 551
	case apply 'pread'/3
		 (_cor1, 0, 12) of
	  %% Line 552
	  <{NFD,{'ok',#{#<70>(8,1,'integer',['unsigned'|['big']]),
			#<79>(8,1,'integer',['unsigned'|['big']]),
			#<82>(8,1,'integer',['unsigned'|['big']]),
			#<49>(8,1,'integer',['unsigned'|['big']]),
			#<_X_Size>(32,1,'integer',['unsigned'|['big']]),
			#<66>(8,1,'integer',['unsigned'|['big']]),
			#<69>(8,1,'integer',['unsigned'|['big']]),
			#<65>(8,1,'integer',['unsigned'|['big']]),
			#<77>(8,1,'integer',['unsigned'|['big']])}#}}> when 'true' ->
	      %% Line 554
	      apply 'scan_beam'/5
		  (NFD, 12, _cor0, 17, [])
	  %% Line 555
	  <_X_Error> when 'true' ->
	      let <_cor3> =
		  %% Line 556
		  apply 'filename'/1
		      (_cor1)
	      in  %% Line 556
		  apply 'error'/1
		      ({'not_a_beam_file',_cor3})
	end
'scan_beam'/5 =
    %% Line 559
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_FD,_X_Pos,[],Mod,Data>
	      when call 'erlang':'=/='
		    (Mod,
		     17) ->
	      %% Line 560
	      {'ok',Mod,Data}
	  %% Line 561
	  <FD,Pos,What,Mod,Data> when 'true' ->
	      %% Line 562
	      case apply 'pread'/3
		       (FD, Pos, 8) of
		%% Line 563
		<{_X_NFD,'eof'}>
		    when call 'erlang':'=:='
			  (Mod,
			   17) ->
		    let <_cor5> =
			%% Line 564
			apply 'filename'/1
			    (FD)
		    in  %% Line 564
			apply 'error'/1
			    ({'missing_chunk',_cor5,[65|[116|[111|[109]]]]})
		%% Line 565
		<{_X_NFD,'eof'}>
		    when call 'erlang':'=:='
			  (What,
			   'info') ->
		    let <_cor6> =
			%% Line 566
			call 'lists':'reverse'
			    (Data)
		    in  %% Line 566
			{'ok',Mod,_cor6}
		%% Line 567
		<{NFD,'eof'}> when 'true' ->
		    %% Line 568
		    {'missing',NFD,Mod,Data,What}
		%% Line 569
		<{NFD,{'ok',#{#<IdL>(4,8,'binary',['unsigned'|['big']]),
			      #<Sz>(32,1,'integer',['unsigned'|['big']])}#}}> when 'true' ->
		    let <Id> =
			%% Line 570
			call 'erlang':'binary_to_list'
			    (IdL)
		    in  let <Pos1> =
			    %% Line 571
			    call 'erlang':'+'
				(Pos, 8)
			in  let <_cor9> =
				%% Line 572
				call 'erlang':'+'
				    (Sz, 3)
			    in  let <_cor10> =
				    %% Line 572
				    call 'erlang':'/'
					(_cor9, 4)
				in  let <_cor11> =
					%% Line 572
					call 'erlang':'trunc'
					    (_cor10)
				    in  let <_cor12> =
					    %% Line 572
					    call 'erlang':'*'
						(4, _cor11)
					in  let <Pos2> =
						%% Line 572
						call 'erlang':'+'
						    (_cor12, Pos1)
					    in  %% Line 573
						apply 'get_data'/8
						    (What, Id, NFD, Sz, Pos1, Pos2, Mod, Data)
		%% Line 574
		<{_X_NFD,{'ok',_X_ChunkHead}}> when 'true' ->
		    let <_cor14> =
			%% Line 575
			apply 'filename'/1
			    (FD)
		    in  %% Line 575
			apply 'error'/1
			    ({'invalid_beam_file',_cor14,Pos})
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	end
'get_data'/8 =
    %% Line 578
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Cs,Id = [65|[116|[111|[109]]]],FD,Size,Pos,Pos2,_X_Mod,Data> when 'true' ->
	      let <NewCs> =
		  %% Line 579
		  apply 'del_chunk'/2
		      (Id, Cs)
	      in  %% Line 580
		  case apply 'get_chunk'/4
			   (Id, Pos, Size, FD) of
		    <{NFD,Chunk}> when 'true' ->
			%% Line 581
			case Chunk of
			  <#{#<_X_Num>(32,1,'integer',['unsigned'|['big']]),
			     #<Chunk2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      %% Line 582
			      case apply 'extract_atom'/1
				       (Chunk2) of
				<{Module,_cor28}> when 'true' ->
				    let <_cor13> =
					%% Line 583
					case Cs of
					  %% Line 584
					  <'info'> when 'true' ->
					      %% Line 585
					      {Id,Pos,Size}
					  %% Line 586
					  <_cor29> when 'true' ->
					      %% Line 587
					      {Id,Chunk}
					end
				    in  %% Line 589
					apply 'scan_beam'/5
					    (NFD, Pos2, NewCs, Module, [_cor13|Data])
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor11})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 590
	  <'info',Id,FD,Size,Pos,Pos2,Mod,Data> when 'true' ->
	      %% Line 591
	      apply 'scan_beam'/5
		  (FD, Pos2, 'info', Mod, [{Id,Pos,Size}|Data])
	  %% Line 592
	  <Chunks,Id,FD,Size,Pos,Pos2,Mod,Data> when 'true' ->
	      let <NFD,NewData> =
		  %% Line 593
		  case call 'lists':'member'
			   (Id, Chunks) of
		    %% Line 594
		    <'true'> when 'true' ->
			%% Line 595
			case apply 'get_chunk'/4
				 (Id, Pos, Size, FD) of
			  <{FD1,Chunk}> when 'true' ->
			      %% Line 596
			      <FD1,[{Id,Chunk}|Data]>
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor15})
			    -| ['compiler_generated'] )
			end
		    %% Line 597
		    <'false'> when 'true' ->
			%% Line 598
			<FD,Data>
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor16})
		      -| ['compiler_generated'] )
		  end
	      in  let <NewChunks> =
		      %% Line 600
		      apply 'del_chunk'/2
			  (Id, Chunks)
		  in  %% Line 601
		      apply 'scan_beam'/5
			  (NFD, Pos2, NewChunks, Mod, NewData)
	end
'del_chunk'/2 =
    %% Line 603
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Id,'info'> when 'true' ->
	      %% Line 604
	      'info'
	  %% Line 605
	  <Id,Chunks> when 'true' ->
	      %% Line 606
	      call 'lists':'delete'
		  (Id, Chunks)
	end
'get_chunk'/4 =
    %% Line 609
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 610
	case apply 'pread'/3
		 (_cor0, _cor2, _cor1) of
	  %% Line 611
	  <{NFD,'eof'}>
	      when call 'erlang':'=:='
		    (_cor1,
		     0) ->
	      %% Line 612
	      {NFD,#{}#}
	  %% Line 613
	  <{_X_NFD,'eof'}>
	      when call 'erlang':'>'
		    (_cor1,
		     0) ->
	      let <_cor4> =
		  %% Line 614
		  apply 'filename'/1
		      (_cor0)
	      in  %% Line 614
		  apply 'error'/1
		      ({'chunk_too_big',_cor4,_cor3,_cor1,0})
	  %% Line 615
	  <{_X_NFD,{'ok',Chunk}}>
	      when try
		    let <_cor5> =
			call 'erlang':'byte_size'
			    (Chunk)
		    in  call 'erlang':'>'
			    (_cor1, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 616
		  apply 'filename'/1
		      (_cor0)
	      in  let <_cor6> =
		      %% Line 616
		      call 'erlang':'byte_size'
			  (Chunk)
		  in  %% Line 616
		      apply 'error'/1
			  ({'chunk_too_big',_cor7,_cor3,_cor1,_cor6})
	  %% Line 617
	  <{NFD,{'ok',Chunk}}> when 'true' ->
	      %% Line 618
	      {NFD,Chunk}
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'chunks_to_data'/7 =
    %% Line 621
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Id,Name}|CNs],Chunks,File,Cs,Module,Atoms,L> when 'true' ->
	      %% Line 622
	      case call 'lists':'keyfind'
		       (Id, 1, Chunks) of
		<{_X_Id,Chunk}> when 'true' ->
		    %% Line 623
		    case apply 'chunk_to_data'/6
			     (Name, Chunk, File, Cs, Atoms, Module) of
		      <{NewAtoms,Ret}> when 'true' ->
			  %% Line 624
			  apply 'chunks_to_data'/7
			      (CNs, Chunks, File, Cs, Module, NewAtoms, [Ret|L])
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 625
	  <[],_X_Chunks,_X_File,_X_Cs,Module,_X_Atoms,L> when 'true' ->
	      let <_cor9> =
		  %% Line 626
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 626
		  {'ok',{Module,_cor9}}
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'chunks_to_data',7}}] )
	    -| ['compiler_generated'] )
	end
'chunk_to_data'/6 =
    %% Line 628
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Id = 'attributes',Chunk,File,_X_Cs,AtomTable,_X_Mod> when 'true' ->
	      %% Line 629
	      try
		  let <Term> =
		      %% Line 630
		      call 'erlang':'binary_to_term'
			  (Chunk)
		  in  let <_cor7> =
			  %% Line 631
			  apply 'attributes'/1
			      (Term)
		      in  %% Line 631
			  {AtomTable,{Id,_cor7}}
	      of <_cor8> ->
		  _cor8
	      catch <_cor11,_cor10,_cor9> ->
		  case <_cor11,_cor10,_cor9> of
		    %% Line 633
		    <'error','badarg',_cor37> when 'true' ->
			let <_cor12> =
			    %% Line 634
			    apply 'chunk_name_to_id'/2
				(Id, File)
			in  %% Line 634
			    apply 'error'/1
				({'invalid_chunk',File,_cor12})
		    ( <_cor11,_cor10,_cor9> when 'true' ->
			  primop 'raise'
			      (_cor9, _cor10)
		      -| ['compiler_generated'] )
		  end
	  %% Line 636
	  <Id = 'compile_info',Chunk,File,_X_Cs,AtomTable,_X_Mod> when 'true' ->
	      %% Line 637
	      try
		  let <_cor13> =
		      %% Line 638
		      call 'erlang':'binary_to_term'
			  (Chunk)
		  in  %% Line 638
		      {AtomTable,{Id,_cor13}}
	      of <_cor14> ->
		  _cor14
	      catch <_cor17,_cor16,_cor15> ->
		  case <_cor17,_cor16,_cor15> of
		    %% Line 640
		    <'error','badarg',_cor38> when 'true' ->
			let <_cor18> =
			    %% Line 641
			    apply 'chunk_name_to_id'/2
				(Id, File)
			in  %% Line 641
			    apply 'error'/1
				({'invalid_chunk',File,_cor18})
		    ( <_cor17,_cor16,_cor15> when 'true' ->
			  primop 'raise'
			      (_cor15, _cor16)
		      -| ['compiler_generated'] )
		  end
	  %% Line 643
	  <Id = 'abstract_code',Chunk,File,_X_Cs,AtomTable,Mod> when 'true' ->
	      %% Line 644
	      case ( Chunk
		     -| ['reuse_for_context'] ) of
		%% Line 645
		<#{}#> when 'true' ->
		    %% Line 646
		    {AtomTable,{Id,'no_abstract_code'}}
		%% Line 647
		<#{#<0>(8,1,'integer',['unsigned'|['big']]),
		   #<N>(8,1,'integer',['unsigned'|['big']]),
		   #<Mode0>(N,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor19> =
			%% Line 648
			call 'erlang':'binary_to_list'
			    (Mode0)
		    in  let <Mode> =
			    %% Line 648
			    call 'erlang':'list_to_atom'
				(_cor19)
			in  %% Line 649
			    apply 'decrypt_abst'/6
				(Mode, Mod, File, Id, AtomTable, Rest)
		%% Line 650
		<_cor39> when 'true' ->
		    do  primop 'bs_context_to_binary'
			    (Chunk)
			let <_cor21> =
			    catch
				%% Line 651
				call 'erlang':'binary_to_term'
				    (Chunk)
			in  %% Line 651
			    case _cor21 of
			      %% Line 652
			      <{'EXIT',_cor40}> when 'true' ->
				  let <_cor22> =
				      %% Line 653
				      apply 'chunk_name_to_id'/2
					  (Id, File)
				  in  %% Line 653
				      apply 'error'/1
					  ({'invalid_chunk',File,_cor22})
			      %% Line 654
			      <Term> when 'true' ->
				  %% Line 655
				  {AtomTable,{Id,Term}}
			    end
	      end
	  %% Line 658
	  <Id = 'atoms',_X_Chunk,_X_File,Cs,AtomTable0,_X_Mod> when 'true' ->
	      let <AtomTable> =
		  %% Line 659
		  apply 'ensure_atoms'/2
		      (AtomTable0, Cs)
	      in  let <Atoms> =
		      %% Line 660
		      call 'ets':'tab2list'
			  (AtomTable)
		  in  let <_cor27> =
			  %% Line 661
			  call 'lists':'sort'
			      (Atoms)
		      in  %% Line 661
			  {AtomTable,{Id,_cor27}}
	  %% Line 662
	  <ChunkName,Chunk,File,%% Line 663
				Cs,%% Line 663
				   AtomTable,%% Line 663
					     _X_Mod>
	      when %% Line 663
		call 'erlang':'is_atom'
		    (ChunkName) ->
	      let <_cor28> =
		  catch
		      %% Line 664
		      apply 'symbols'/4
			  (Chunk, AtomTable, Cs, ChunkName)
	      in  %% Line 664
		  case _cor28 of
		    %% Line 665
		    <{'ok',NewAtomTable,S}> when 'true' ->
			%% Line 666
			{NewAtomTable,{ChunkName,S}}
		    %% Line 667
		    <{'EXIT',_cor41}> when 'true' ->
			let <_cor29> =
			    %% Line 668
			    apply 'chunk_name_to_id'/2
				(ChunkName, File)
			in  %% Line 668
			    apply 'error'/1
				({'invalid_chunk',File,_cor29})
		    ( <_cor30> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor30})
		      -| ['compiler_generated'] )
		  end
	  %% Line 670
	  <ChunkId,Chunk,_X_File,%% Line 671
				 _X_Cs,%% Line 671
				       AtomTable,%% Line 671
						 _X_Module>
	      when %% Line 671
		call 'erlang':'is_list'
		    (ChunkId) ->
	      %% Line 672
	      {AtomTable,{ChunkId,Chunk}}
	  ( <_cor36,_cor35,_cor34,_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33,_cor32,_cor31})
		  -| [{'function_name',{'chunk_to_data',6}}] )
	    -| ['compiler_generated'] )
	end
'chunk_name_to_id'/2 =
    %% Line 674
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'atoms',_cor4> when 'true' ->
	      [65|[116|[111|[109]]]]
	  %% Line 675
	  <'indexed_imports',_cor5> when 'true' ->
	      [73|[109|[112|[84]]]]
	  %% Line 676
	  <'imports',_cor6> when 'true' ->
	      [73|[109|[112|[84]]]]
	  %% Line 677
	  <'exports',_cor7> when 'true' ->
	      [69|[120|[112|[84]]]]
	  %% Line 678
	  <'labeled_exports',_cor8> when 'true' ->
	      [69|[120|[112|[84]]]]
	  %% Line 679
	  <'locals',_cor9> when 'true' ->
	      [76|[111|[99|[84]]]]
	  %% Line 680
	  <'labeled_locals',_cor10> when 'true' ->
	      [76|[111|[99|[84]]]]
	  %% Line 681
	  <'attributes',_cor11> when 'true' ->
	      [65|[116|[116|[114]]]]
	  %% Line 682
	  <'abstract_code',_cor12> when 'true' ->
	      [65|[98|[115|[116]]]]
	  %% Line 683
	  <'compile_info',_cor13> when 'true' ->
	      [67|[73|[110|[102]]]]
	  %% Line 684
	  <Other,File> when 'true' ->
	      %% Line 685
	      apply 'error'/1
		  ({'unknown_chunk',File,Other})
	end
'attributes'/1 =
    %% Line 689
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 690
	    call 'lists':'keysort'
		(1, _cor0)
	in  %% Line 690
	    apply 'attributes'/2
		(_cor1, [])
'attributes'/2 =
    %% Line 692
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],R> when 'true' ->
	      %% Line 693
	      call 'lists':'reverse'
		  (R)
	  %% Line 694
	  <L,R> when 'true' ->
	      let <_cor2> =
		  %% Line 695
		  call 'erlang':'hd'
		      (L)
	      in  let <K> =
		      %% Line 695
		      call 'erlang':'element'
			  (1, _cor2)
		  in  let <_cor7> =
			  %% Line 696
			  ( fun (_cor5) ->
				let <_cor4> =
				    call 'erlang':'element'
					(1, _cor5)
				in  call 'erlang':'=:='
					(_cor4, K)
			    -| [{'id',{0,0,'-attributes/2-fun-0-'}}] )
		      in  %% Line 696
			  case call 'lists':'splitwith'
				   (_cor7, L) of
			    <{L1,L2}> when 'true' ->
				let <_cor13> =
				    %% Line 697
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor11) ->
						  case _cor11 of
						    <[{_cor17,A}|_cor10]> when 'true' ->
							let <_cor12> =
							    apply 'lc$^0'/1
								(_cor10)
							in  ( [A|_cor12]
							      -| ['compiler_generated'] )
						    ( <[_cor9|_cor10]> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor10)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor11> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor11})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (L1)
				      -| ['list_comprehension'] )
				in  let <V> =
					%% Line 697
					call 'lists':'append'
					    (_cor13)
				    in  %% Line 698
					apply 'attributes'/2
					    (L2, [{K,V}|R])
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor8})
			      -| ['compiler_generated'] )
			  end
	end
'symbols'/4 =
    %% Line 702
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<_X_Num>(32,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,AT0,Cs,Name> when 'true' ->
	      let <AT> =
		  %% Line 703
		  apply 'ensure_atoms'/2
		      (AT0, Cs)
	      in  %% Line 704
		  apply 'symbols1'/5
		      (B, AT, Name, [], 1)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor8)
		    ( primop 'match_fail'
			  ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		      -| [{'function_name',{'symbols',4}}] )
	    -| ['compiler_generated'] )
	end
'symbols1'/5 =
    %% Line 706
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor4
		-| ['reuse_for_context'] ),_cor3,_cor2,_cor1,_cor0> of
	  <#{#<I1>(32,1,'integer',['unsigned'|['big']]),
	     #<I2>(32,1,'integer',['unsigned'|['big']]),
	     #<I3>(32,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,AT,Name,S,Cnt> when 'true' ->
	      let <Symbol> =
		  %% Line 707
		  apply 'symbol'/6
		      (Name, AT, I1, I2, I3, Cnt)
	      in  let <_cor6> =
		      %% Line 708
		      call 'erlang':'+'
			  (Cnt, 1)
		  in  %% Line 708
		      apply 'symbols1'/5
			  (B, AT, Name, [Symbol|S], _cor6)
	  %% Line 709
	  <#{}#,AT,_X_Name,S,_X_Cnt> when 'true' ->
	      let <_cor7> =
		  %% Line 710
		  call 'lists':'sort'
		      (S)
	      in  %% Line 710
		  {'ok',AT,_cor7}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor12)
		    ( primop 'match_fail'
			  ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		      -| [{'function_name',{'symbols1',5}}] )
	    -| ['compiler_generated'] )
	end
'symbol'/6 =
    %% Line 712
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'indexed_imports',AT,I1,I2,I3,Cnt> when 'true' ->
	      let <_cor7> =
		  %% Line 713
		  apply 'atm'/2
		      (AT, I1)
	      in  let <_cor6> =
		      %% Line 713
		      apply 'atm'/2
			  (AT, I2)
		  in  %% Line 713
		      {Cnt,_cor7,_cor6,I3}
	  %% Line 714
	  <'imports',AT,I1,I2,I3,_X_Cnt> when 'true' ->
	      let <_cor9> =
		  %% Line 715
		  apply 'atm'/2
		      (AT, I1)
	      in  let <_cor8> =
		      %% Line 715
		      apply 'atm'/2
			  (AT, I2)
		  in  %% Line 715
		      {_cor9,_cor8,I3}
	  %% Line 716
	  <'labeled_exports',AT,I1,I2,I3,_X_Cnt> when 'true' ->
	      let <_cor10> =
		  %% Line 717
		  apply 'atm'/2
		      (AT, I1)
	      in  %% Line 717
		  {_cor10,I2,I3}
	  %% Line 718
	  <'labeled_locals',AT,I1,I2,I3,_X_Cnt> when 'true' ->
	      let <_cor11> =
		  %% Line 719
		  apply 'atm'/2
		      (AT, I1)
	      in  %% Line 719
		  {_cor11,I2,I3}
	  %% Line 720
	  <_cor19,AT,I1,I2,_X_I3,_X_Cnt> when 'true' ->
	      let <_cor12> =
		  %% Line 721
		  apply 'atm'/2
		      (AT, I1)
	      in  %% Line 721
		  {_cor12,I2}
	end
'atm'/2 =
    %% Line 723
    fun (_cor1,_cor0) ->
	%% Line 724
	case call 'ets':'lookup'
		 (_cor1, _cor0) of
	  <[{_X_N,S}|[]]> when 'true' ->
	      %% Line 725
	      S
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'ensure_atoms'/2 =
    %% Line 728
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'empty',AT},Cs> when 'true' ->
	      %% Line 729
	      case call 'lists':'keyfind'
		       ([65|[116|[111|[109]]]], 1, Cs) of
		<{_X_Id,AtomChunk}> when 'true' ->
		    do  %% Line 730
			apply 'extract_atoms'/2
			    (AtomChunk, AT)
			%% Line 731
			AT
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 732
	  <AT,_X_Cs> when 'true' ->
	      %% Line 733
	      AT
	end
'extract_atoms'/2 =
    %% Line 735
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<_X_Num>(32,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#,AT> when 'true' ->
	      %% Line 736
	      apply 'extract_atoms'/3
		  (B, 1, AT)
	  ( <_cor3,_cor2> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor3)
		    ( primop 'match_fail'
			  ({'function_clause',_cor3,_cor2})
		      -| [{'function_name',{'extract_atoms',2}}] )
	    -| ['compiler_generated'] )
	end
'extract_atoms'/3 =
    %% Line 738
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,_X_I,_X_AT> when 'true' ->
	      %% Line 739
	      'true'
	  %% Line 740
	  <B,I,AT> when 'true' ->
	      %% Line 741
	      case apply 'extract_atom'/1
		       (B) of
		<{Atom,B1}> when 'true' ->
		    %% Line 742
		    case call 'ets':'insert'
			     (AT, {I,Atom}) of
		      <'true'> when 'true' ->
			  let <_cor5> =
			      %% Line 743
			      call 'erlang':'+'
				  (I, 1)
			  in  %% Line 743
			      apply 'extract_atoms'/3
				  (B1, _cor5, AT)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'extract_atom'/1 =
    %% Line 745
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<Len>(8,1,'integer',['unsigned'|['big']]),
	     #<B>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 746
	      case ( B
		     -| ['reuse_for_context'] ) of
		<#{#<SB>(Len,8,'binary',['unsigned'|['big']]),
		   #<Tail>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor2> =
			%% Line 747
			call 'erlang':'binary_to_list'
			    (SB)
		    in  let <_cor3> =
			    %% Line 747
			    call 'erlang':'list_to_atom'
				(_cor2)
			in  %% Line 747
			    {_cor3,Tail}
		( <_cor1> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor1)
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor4)
		    ( primop 'match_fail'
			  ({'function_clause',_cor4})
		      -| [{'function_name',{'extract_atom',1}}] )
	    -| ['compiler_generated'] )
	end
'open_file'/1 =
    %% Line 755
    fun (_cor0) ->
	case _cor0 of
	  <Binary = #{#<70>(8,1,'integer',['unsigned'|['big']]),
		      #<79>(8,1,'integer',['unsigned'|['big']]),
		      #<82>(8,1,'integer',['unsigned'|['big']]),
		      #<49>(8,1,'integer',['unsigned'|['big']]),
		      #<_cor4>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 756
	      {'bb',0,Binary,Binary}
	  %% Line 757
	  <Binary0>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <Binary> =
		  %% Line 758
		  apply 'uncompress'/1
		      (Binary0)
	      in  %% Line 759
		  {'bb',0,Binary,Binary}
	  %% Line 760
	  <FileName> when 'true' ->
	      %% Line 761
	      case call 'file':'open'
		       (FileName, ['read'|['raw'|['binary']]]) of
		%% Line 762
		<{'ok',Fd}> when 'true' ->
		    %% Line 763
		    apply 'read_all'/3
			(Fd, FileName, [])
		%% Line 764
		<Error> when 'true' ->
		    %% Line 765
		    apply 'file_error'/2
			(FileName, Error)
	      end
	end
'read_all'/3 =
    %% Line 768
    fun (_cor2,_cor1,_cor0) ->
	%% Line 769
	case call 'file':'read'
		 (_cor2, 262144) of
	  %% Line 770
	  <{'ok',Bin}> when 'true' ->
	      %% Line 771
	      apply 'read_all'/3
		  (_cor2, _cor1, [Bin|_cor0])
	  %% Line 772
	  <'eof'> when 'true' ->
	      %% Line 773
	      case call 'file':'close'
		       (_cor2) of
		<'ok'> when 'true' ->
		    let <_cor5> =
			%% Line 774
			call 'lists':'reverse'
			    (_cor0)
		    in  let <_cor6> =
			    %% Line 774
			    apply 'uncompress'/1
				(_cor5)
			in  %% Line 774
			    {'bb',0,_cor6,_cor1}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 775
	  <Error> when 'true' ->
	      %% Line 776
	      case call 'file':'close'
		       (_cor2) of
		<'ok'> when 'true' ->
		    %% Line 777
		    apply 'file_error'/2
			(_cor1, Error)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'pread'/3 =
    %% Line 780
    fun (_cor2,_cor1,_cor0) ->
	%% Line 781
	case _cor2 of
	  <{'bb',Pos,Binary,_cor21}> when 'true' ->
	      let <Skip> =
		  %% Line 782
		  call 'erlang':'-'
		      (_cor1, Pos)
	      in  %% Line 783
		  case ( Binary
			 -| ['reuse_for_context'] ) of
		    %% Line 784
		    <#{#<_cor22>(Skip,8,'binary',['unsigned'|['big']]),
		       #<B>(_cor0,8,'binary',['unsigned'|['big']]),
		       #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_rec0> =
			    %% Line 785
			    call 'erlang':'+'
				(_cor1, _cor0)
			in  let <_cor8> =
				%% Line 785
				{'bb',_rec0,Bin,_cor21}
			    in  %% Line 786
				{_cor8,{'ok',B}}
		    %% Line 787
		    <#{#<_cor24>(Skip,8,'binary',['unsigned'|['big']]),
		       #<Bin>('all',8,'binary',['unsigned'|['big']])}#>
			when try
			      let <_cor10> =
				  call 'erlang':'byte_size'
				      (Bin)
			      in  call 'erlang':'>'
				      (_cor10, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_cor11> =
			    %% Line 788
			    call 'erlang':'byte_size'
				(Bin)
			in  let <_rec5> =
				%% Line 788
				call 'erlang':'+'
				    (_cor1, _cor11)
			    in  let <_cor15> =
				    %% Line 788
				    {'bb',_rec5,#{}#,_cor21}
				in  %% Line 789
				    {_cor15,{'ok',Bin}}
		    %% Line 790
		    <_cor26> when 'true' ->
			%% Line 791
			{_cor2,'eof'}
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'filename'/1 =
    %% Line 794
    fun (_cor0) ->
	case _cor0 of
	  <BB = {'bb',_cor11,_cor12,_cor13}>
	      when call 'erlang':'is_binary'
		    (_cor13) ->
	      _cor13
	  %% Line 796
	  <BB> when 'true' ->
	      %% Line 797
	      ( case BB of
		  ( <( {'bb',_cor17,_cor18,_rec11}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'list_to_atom'
			    (_rec11)
		    -| ['compiler_generated'] )
		  ( <_cor19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','bb'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'beam_filename'/1 =
    %% Line 799
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 800
	      Bin
	  %% Line 801
	  <File> when 'true' ->
	      let <_cor1> =
		  %% Line 802
		  call 'filename':'rootname'
		      (File, [46|[98|[101|[97|[109]]]]])
	      in  %% Line 802
		  call 'erlang':'++'
		      (_cor1, [46|[98|[101|[97|[109]]]]])
	end
'uncompress'/1 =
    %% Line 805
    fun (_cor0) ->
	%% Line 806
	case call 'ram_file':'open'
		 (_cor0, ['write'|['binary']]) of
	  <{'ok',Fd}> when 'true' ->
	      %% Line 807
	      case call 'ram_file':'uncompress'
		       (Fd) of
		<{'ok',_cor6}> when 'true' ->
		    %% Line 808
		    case call 'ram_file':'get_file'
			     (Fd) of
		      <{'ok',Binary}> when 'true' ->
			  %% Line 809
			  case call 'ram_file':'close'
				   (Fd) of
			    <'ok'> when 'true' ->
				%% Line 810
				Binary
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'compress'/1 =
    %% Line 812
    fun (_cor0) ->
	%% Line 813
	case call 'ram_file':'open'
		 (_cor0, ['write'|['binary']]) of
	  <{'ok',Fd}> when 'true' ->
	      %% Line 814
	      case call 'ram_file':'compress'
		       (Fd) of
		<{'ok',_cor6}> when 'true' ->
		    %% Line 815
		    case call 'ram_file':'get_file'
			     (Fd) of
		      <{'ok',Binary}> when 'true' ->
			  %% Line 816
			  case call 'ram_file':'close'
				   (Fd) of
			    <'ok'> when 'true' ->
				%% Line 817
				Binary
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'assert_directory'/1 =
    %% Line 820
    fun (_cor0) ->
	%% Line 821
	case call 'filelib':'is_dir'
		 (_cor0) of
	  %% Line 822
	  <'true'> when 'true' ->
	      %% Line 823
	      'ok'
	  %% Line 824
	  <'false'> when 'true' ->
	      %% Line 825
	      apply 'error'/1
		  ({'not_a_directory',_cor0})
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'file_error'/2 =
    %% Line 830
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FileName,{'error',Reason}> when 'true' ->
	      %% Line 831
	      apply 'error'/1
		  ({'file_error',FileName,Reason})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'error'/1 =
    %% Line 835
    fun (_cor0) ->
	%% Line 836
	call 'erlang':'throw'
	    ({'error','beam_lib',_cor0})
'significant_chunks'/0 =
    %% Line 840
    fun () ->
	let <_cor0> =
	    %% Line 841
	    apply 'md5_chunks'/0
		()
	in  %% Line 841
	    [[76|[105|[110|[101]]]]|_cor0]
'md5_chunks'/0 =
    %% Line 846
    fun () ->
	%% Line 847
	[[65|[116|[111|[109]]]]|[[67|[111|[100|[101]]]]|[[83|[116|[114|[84]]]]|[[73|[109|[112|[84]]]]|[[69|[120|[112|[84]]]]|[[70|[117|[110|[84]]]]|[[76|[105|[116|[84]]]]]]]]]]]
'mandatory_chunks'/0 =
    %% Line 851
    fun () ->
	%% Line 852
	[[67|[111|[100|[101]]]]|[[69|[120|[112|[84]]]]|[[73|[109|[112|[84]]]]|[[83|[116|[114|[84]]]]|[[65|[116|[111|[109]]]]]]]]]
'decrypt_abst'/6 =
    %% Line 867
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 868
	try
	    let <KeyString> =
		%% Line 869
		apply 'get_crypto_key'/1
		    ({'debug_info',_cor5,_cor4,_cor3})
	    in  let <Key> =
		    %% Line 870
		    apply 'make_crypto_key'/2
			(_cor5, KeyString)
		in  let <Term> =
			%% Line 871
			apply 'decrypt_abst_1'/2
			    (Key, _cor0)
		    in  %% Line 872
			{_cor1,{_cor2,Term}}
	of <_cor9> ->
	    _cor9
	catch <_cor12,_cor11,_cor10> ->
	    %% Line 875
	    apply 'error'/1
		({'key_missing_or_invalid',_cor3,_cor2})
'decrypt_abst_1'/2 =
    %% Line 878
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Type,Key,IVec,_X_BlockSize},Bin> when 'true' ->
	      %% Line 879
	      case apply 'start_crypto'/0
		       () of
		<'ok'> when 'true' ->
		    let <NewBin> =
			%% Line 880
			call 'crypto':'block_decrypt'
			    (Type, Key, IVec, Bin)
		    in  %% Line 881
			call 'erlang':'binary_to_term'
			    (NewBin)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'decrypt_abst_1',2}}] )
	    -| ['compiler_generated'] )
	end
'start_crypto'/0 =
    %% Line 883
    fun () ->
	%% Line 884
	case call 'crypto':'start'
		 () of
	  %% Line 885
	  <{'error',{'already_started',_cor1}}> when 'true' ->
	      %% Line 886
	      'ok'
	  %% Line 887
	  <'ok'> when 'true' ->
	      %% Line 888
	      'ok'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'get_crypto_key'/1 =
    %% Line 891
    fun (_cor0) ->
	%% Line 892
	apply 'call_crypto_server'/1
	    ({'get_crypto_key',_cor0})
'call_crypto_server'/1 =
    %% Line 894
    fun (_cor0) ->
	%% Line 895
	try
	    %% Line 896
	    call 'gen_server':'call'
		('beam_lib__crypto_key_server', _cor0, 'infinity')
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 898
	      <'exit',{'noproc',_cor6},_cor7> when 'true' ->
		  %% Line 900
		  apply 'call_crypto_server_1'/1
		      (_cor0)
	      %% Line 901
	      <'exit',{'normal',_cor8},_cor9> when 'true' ->
		  %% Line 903
		  apply 'call_crypto_server_1'/1
		      (_cor0)
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'call_crypto_server_1'/1 =
    %% Line 906
    fun (_cor0) ->
	%% Line 907
	case call 'gen_server':'start'
		 ({'local','beam_lib__crypto_key_server'}, 'beam_lib', [], []) of
	  <{'ok',_cor3}> when 'true' ->
	      do  %% Line 908
		  call 'erlang':'yield'
		      ()
		  %% Line 909
		  apply 'call_crypto_server'/1
		      (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 913
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 914
	      {'ok',{'state','undefined'}}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 925
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <R = {'get_crypto_key',_cor34},From,S = {'state','undefined'}> when 'true' ->
	      %% Line 926
	      case apply 'crypto_key_fun_from_file'/0
		       () of
		%% Line 927
		<'error'> when 'true' ->
		    %% Line 928
		    {'reply','error',S}
		%% Line 929
		<F>
		    when call 'erlang':'is_function'
			  (F) ->
		    %% Line 931
		    case S of
		      <{'state',_rec13}> when 'true' ->
			  let <_cor5> = {'state',F}
			  in  apply 'handle_call'/3
				  (R, From, _cor5)
		      ( <_cor35> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 933
	  <{'get_crypto_key',What},From,S = {'state',F}> when 'true' ->
	      %% Line 934
	      try
		  let <Result> =
		      %% Line 935
		      apply F
			  (What)
		  in  do  %% Line 938
			  call 'gen_server':'reply'
			      (From, Result)
			  do  %% Line 939
			      call 'erlang':'garbage_collect'
				  ()
			      %% Line 940
			      {'noreply',S}
	      of <_cor8> ->
		  _cor8
	      catch <_cor11,_cor10,_cor9> ->
		  %% Line 943
		  {'reply','error',S}
	  %% Line 945
	  <{'crypto_key_fun',F},From = {_cor39,_cor40},S> when 'true' ->
	      %% Line 946
	      ( case S of
		  ( <( {'state',_rec14}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec14 of
			  %% Line 947
			  <'undefined'> when 'true' ->
			      %% Line 950
			      case <> of
				<>
				    when try
					  let <_cor14> =
					      call 'erlang':'is_function'
						  (F)
					  in  let <_cor15> =
						  call 'erlang':'is_function'
						      (F, 1)
					      in  call 'erlang':'and'
						      (_cor14, _cor15)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    let <_cor16> =
					catch
					    %% Line 952
					    apply F
						('init')
				    in  let <Result,Fun,Reply> =
					    %% Line 952
					    case _cor16 of
					      %% Line 953
					      <'ok'> when 'true' ->
						  %% Line 954
						  <'true',F,'ok'>
					      %% Line 955
					      <{'ok',F1}>
						  when call 'erlang':'is_function'
							(F1) ->
						  %% Line 956
						  case <> of
						    %% Line 957
						    <>
							when call 'erlang':'is_function'
							      (F1,
							       1) ->
							%% Line 958
							<'true',F1,'ok'>
						    %% Line 959
						    <> when 'true' ->
							%% Line 960
							<'false','undefined',{'error','badfun'}>
						  end
					      %% Line 963
					      <{'error',Reason}> when 'true' ->
						  %% Line 964
						  <'false','undefined',{'error',Reason}>
					      %% Line 965
					      <{'EXIT',Reason}> when 'true' ->
						  %% Line 966
						  <'false','undefined',{'error',Reason}>
					      ( <_cor17> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor17})
						-| ['compiler_generated'] )
					    end
					in  do  %% Line 968
						call 'gen_server':'reply'
						    (From, Reply)
						do  %% Line 969
						    call 'erlang':'garbage_collect'
							()
						    let <_cor23> =
							%% Line 970
							case Result of
							  %% Line 971
							  <'true'> when 'true' ->
							      %% Line 972
							      {'state',Fun}
							  %% Line 973
							  <'false'> when 'true' ->
							      %% Line 974
							      S
							  ( <_cor22> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor22})
							    -| ['compiler_generated'] )
							end
						    in  %% Line 976
							{'noreply',_cor23}
				%% Line 977
				<> when 'true' ->
				    %% Line 978
				    {'reply',{'error','badfun'},S}
			      end
			  %% Line 980
			  <OtherF>
			      when call 'erlang':'is_function'
				    (_rec14) ->
			      %% Line 981
			      {'reply',{'error','exists'},S}
			  ( <_cor25> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor25})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 983
	  <'clear_crypto_key_fun',_X_From,S> when 'true' ->
	      %% Line 984
	      ( case S of
		  ( <( {'state',_rec17}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec17 of
			  %% Line 985
			  <'undefined'> when 'true' ->
			      %% Line 986
			      {'stop','normal','undefined',S}
			  %% Line 987
			  <F> when 'true' ->
			      let <_cor28> =
				  catch
				      %% Line 988
				      apply F
					  ('clear')
			      in  %% Line 989
				  {'stop','normal',{'ok',_cor28},S}
			end
		    -| ['compiler_generated'] )
		  ( <_cor43> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 994
    fun (_cor1,_cor0) ->
	%% Line 995
	{'noreply',_cor0}
'handle_info'/2 =
    %% Line 999
    fun (_cor1,_cor0) ->
	%% Line 1000
	{'noreply',_cor0}
'code_change'/3 =
    %% Line 1004
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1005
	{'ok',_cor1}
'terminate'/2 =
    %% Line 1009
    fun (_cor1,_cor0) ->
	%% Line 1010
	'ok'
'crypto_key_fun_from_file'/0 =
    %% Line 1012
    fun () ->
	%% Line 1013
	case call 'init':'get_argument'
		 ('home') of
	  %% Line 1014
	  <{'ok',[[Home|[]]|[]]}> when 'true' ->
	      %% Line 1015
	      apply 'crypto_key_fun_from_file_1'/1
		  ([[46]|[Home|[]]])
	  %% Line 1016
	  <_cor1> when 'true' ->
	      %% Line 1017
	      apply 'crypto_key_fun_from_file_1'/1
		  ([[46]])
	end
'crypto_key_fun_from_file_1'/1 =
    %% Line 1020
    fun (_cor0) ->
	%% Line 1021
	case apply 'f_p_s'/2
		 (_cor0, [46|[101|[114|[108|[97|[110|[103|[46|[99|[114|[121|[112|[116]]]]]]]]]]]]]) of
	  %% Line 1022
	  <{'ok',KeyInfo,_cor3}> when 'true' ->
	      %% Line 1023
	      apply 'try_load_crypto_fun'/1
		  (KeyInfo)
	  %% Line 1024
	  <_cor4> when 'true' ->
	      %% Line 1025
	      'error'
	end
'f_p_s'/2 =
    %% Line 1028
    fun (_cor1,_cor0) ->
	%% Line 1029
	case call 'file':'path_script'
		 (_cor1, _cor0) of
	  %% Line 1030
	  <{'error','enoent'}> when 'true' ->
	      %% Line 1031
	      {'error','enoent'}
	  %% Line 1032
	  <{'error',E = {Line,_X_Mod,_X_Term}}> when 'true' ->
	      let <_cor2> =
		  %% Line 1034
		  call 'file':'format_error'
		      (E)
	      in  do  %% Line 1033
		      apply 'error'/2
			  ([102|[105|[108|[101|[58|[112|[97|[116|[104|[95|[115|[99|[114|[105|[112|[116|[40|[126|[116|[112|[44|[126|[116|[112|[41|[58|[32|[101|[114|[114|[111|[114|[32|[111|[110|[32|[108|[105|[110|[101|[32|[126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1034
																																							  [_cor1|[_cor0|[Line|[_cor2|[]]]]])
		      %% Line 1035
		      'ok'
	  %% Line 1036
	  <{'error',E}>
	      when call 'erlang':'is_atom'
		    (E) ->
	      let <_cor3> =
		  %% Line 1038
		  call 'file':'format_error'
		      (E)
	      in  do  %% Line 1037
		      apply 'error'/2
			  ([102|[105|[108|[101|[58|[112|[97|[116|[104|[95|[115|[99|[114|[105|[112|[116|[40|[126|[116|[112|[44|[126|[116|[112|[41|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1038
																										   [_cor1|[_cor0|[_cor3|[]]]])
		      %% Line 1039
		      'ok'
	  %% Line 1040
	  <Other> when 'true' ->
	      %% Line 1041
	      Other
	end
'try_load_crypto_fun'/1 =
    %% Line 1044
    fun (_cor0) ->
	case _cor0 of
	  <KeyInfo>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <T> =
		  %% Line 1045
		  call 'ets':'new'
		      ('keys', ['private'|['set']])
	      in  let <_cor4> =
		      %% Line 1047
		      ( fun (_cor2) ->
			    case _cor2 of
			      <{'debug_info',Mode,M,Key}>
				  when call 'erlang':'is_atom'
					(M) ->
				  %% Line 1048
				  call 'ets':'insert'
				      (T, {{'debug_info',Mode,M,[]},Key})
			      %% Line 1049
			      <{'debug_info',Mode,[],Key}> when 'true' ->
				  %% Line 1050
				  call 'ets':'insert'
				      (T, {{'debug_info',Mode,[],[]},Key})
			      %% Line 1051
			      <Other> when 'true' ->
				  %% Line 1052
				  apply 'error'/2
				      ([117|[110|[107|[110|[111|[119|[110|[32|[107|[101|[121|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]], [Other|[]])
			    end
			-| [{'id',{0,0,'-try_load_crypto_fun/1-fun-0-'}}] )
		  in  do  %% Line 1046
			  call 'lists':'foreach'
			      (_cor4, %% Line 1053
				      KeyInfo)
			  %% Line 1054
			  ( fun (_cor5) ->
				case _cor5 of
				  <{'debug_info',Mode,M,F}> when 'true' ->
				      %% Line 1055
				      apply 'alt_lookup_key'/2
					  (%% Line 1056
					   [{'debug_info',Mode,M,F}|%% Line 1057
								    [{'debug_info',Mode,M,[]}|%% Line 1058
											      [{'debug_info',Mode,[],[]}|[]]]], %% Line 1058
																T)
				  %% Line 1059
				  <'clear'> when 'true' ->
				      %% Line 1060
				      call 'ets':'delete'
					  (T)
				  %% Line 1061
				  <_cor8> when 'true' ->
				      %% Line 1062
				      'error'
				end
			    -| [{'id',{0,0,'-try_load_crypto_fun/1-fun-1-'}}] )
	  %% Line 1064
	  <KeyInfo> when 'true' ->
	      %% Line 1065
	      apply 'error'/2
		  ([117|[110|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[99|[114|[121|[112|[116|[111|[32|[107|[101|[121|[32|[105|[110|[102|[111|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [KeyInfo|[]])
	end
'alt_lookup_key'/2 =
    %% Line 1067
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Tab> when 'true' ->
	      %% Line 1068
	      case call 'ets':'lookup'
		       (Tab, H) of
		%% Line 1069
		<[]> when 'true' ->
		    %% Line 1070
		    apply 'alt_lookup_key'/2
			(T, Tab)
		%% Line 1071
		<[{_cor5,Val}|[]]> when 'true' ->
		    %% Line 1072
		    Val
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1074
	  <[],_cor6> when 'true' ->
	      %% Line 1075
	      'error'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'alt_lookup_key',2}}] )
	    -| ['compiler_generated'] )
	end
'error'/2 =
    %% Line 1077
    fun (_cor1,_cor0) ->
	do  %% Line 1078
	    call 'error_logger':'error_msg'
		(_cor1, _cor0)
	    %% Line 1079
	    'error'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('beam_lib', _cor0)
end