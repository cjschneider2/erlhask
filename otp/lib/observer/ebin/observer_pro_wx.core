module 'observer_pro_wx' ['code_change'/3,
			  'handle_call'/3,
			  'handle_cast'/2,
			  'handle_event'/2,
			  'handle_info'/2,
			  'init'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'start_link'/2,
			  'terminate'/2]
    attributes [%% Line 20
		'behaviour' =
		    %% Line 20
		    ['wx_object'],
		%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','etop_info'},[{'record_field',21,{'atom',21,'now'},{'tuple',21,[{'integer',21,0}|[{'integer',21,0}|[{'integer',21,0}]]]}}|[{'record_field',22,{'atom',22,'n_procs'},{'integer',22,0}}|[{'record_field',23,{'atom',23,'wall_clock'}}|[{'record_field',24,{'atom',24,'runtime'}}|[{'record_field',25,{'atom',25,'run_queue'},{'integer',25,0}}|[{'record_field',26,{'atom',26,'alloc_areas'},{'nil',26}}|[{'record_field',27,{'atom',27,'memi'},{'cons',27,{'tuple',27,[{'atom',27,'total'}|[{'integer',27,0}]]},{'cons',28,{'tuple',28,[{'atom',28,'processes'}|[{'integer',28,0}]]},{'cons',29,{'tuple',29,[{'atom',29,'ets'}|[{'integer',29,0}]]},{'cons',30,{'tuple',30,[{'atom',30,'atom'}|[{'integer',30,0}]]},{'cons',31,{'tuple',31,[{'atom',31,'code'}|[{'integer',31,0}]]},{'cons',32,{'tuple',32,[{'atom',32,'binary'}|[{'integer',32,0}]]},{'nil',32}}}}}}}}|[{'record_field',33,{'atom',33,'procinfo'},{'nil',33}}]]]]]]]],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','etop_proc_info'},[{'record_field',37,{'atom',37,'pid'}}|[{'record_field',38,{'atom',38,'mem'},{'integer',38,0}}|[{'record_field',39,{'atom',39,'reds'},{'integer',39,0}}|[{'record_field',40,{'atom',40,'name'}}|[{'record_field',41,{'atom',41,'runtime'},{'integer',41,0}}|[{'record_field',42,{'atom',42,'cf'}}|[{'record_field',43,{'atom',43,'mq'},{'integer',43,0}}]]]]]]],[]}],
		%% Line 19
		'type' =
		    %% Line 19
		    [{{'record','match_spec'},[{'record_field',19,{'atom',19,'name'},{'string',19,[]}}|[{'record_field',20,{'atom',20,'term'},{'nil',20}}|[{'record_field',21,{'atom',21,'str'},{'nil',21}}|[{'record_field',22,{'atom',22,'func'},{'string',22,[]}}]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','tpattern'},[{'record_field',24,{'atom',24,'m'}}|[{'record_field',24,{'atom',24,'fa'}}|[{'record_field',24,{'atom',24,'ms'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','traced_func'},[{'record_field',26,{'atom',26,'func_name'}}|[{'record_field',27,{'atom',27,'arity'}}|[{'record_field',28,{'atom',28,'match_spec'},{'record',28,'match_spec',[]}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','create_menu'},[{'record_field',31,{'atom',31,'id'}}|[{'record_field',32,{'atom',32,'text'}}|[{'record_field',33,{'atom',33,'help'},{'nil',33}}|[{'record_field',34,{'atom',34,'type'},{'atom',34,'append'}}|[{'record_field',35,{'atom',35,'check'},{'atom',35,'false'}}]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','attrs'},[{'record_field',38,{'atom',38,'even'}}|[{'record_field',38,{'atom',38,'odd'}}|[{'record_field',38,{'atom',38,'searched'}}|[{'record_field',38,{'atom',38,'deleted'}}|[{'record_field',38,{'atom',38,'changed_odd'}}|[{'record_field',38,{'atom',38,'changed_even'}}|[{'record_field',38,{'atom',38,'new_odd'}}|[{'record_field',38,{'atom',38,'new_even'}}]]]]]]]],[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','opts'},[{'record_field',25,{'atom',25,'node'},{'call',25,{'atom',25,'node'},[]}}|[{'record_field',25,{'atom',25,'port'},{'integer',25,8415}}|[{'record_field',25,{'atom',25,'accum'},{'atom',25,'false'}}|[{'record_field',25,{'atom',25,'intv'},{'integer',25,5000}}|[{'record_field',25,{'atom',25,'lines'},{'integer',25,10}}|[{'record_field',26,{'atom',26,'width'},{'integer',26,700}}|[{'record_field',26,{'atom',26,'height'},{'integer',26,340}}|[{'record_field',26,{'atom',26,'sort'},{'atom',26,'runtime'}}|[{'record_field',26,{'atom',26,'tracing'},{'atom',26,'on'}}|[{'record_field',28,{'atom',28,'out_mod'},{'atom',28,'etop_txt'}}|[{'record_field',28,{'atom',28,'out_proc'}}|[{'record_field',28,{'atom',28,'server'}}|[{'record_field',28,{'atom',28,'host'}}|[{'record_field',28,{'atom',28,'tracer'}}|[{'record_field',28,{'atom',28,'store'}}|[{'record_field',29,{'atom',29,'accum_tab'}}|[{'record_field',29,{'atom',29,'remote'}}]]]]]]]]]]]]]]]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','sort'},[{'record_field',63,{'atom',63,'sort_key'},{'op',63,'+',{'op',63,'+',{'integer',63,0},{'integer',63,1}},{'integer',63,1}}}|[{'record_field',64,{'atom',64,'sort_incr'},{'atom',64,'false'}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','holder'},[{'record_field',67,{'atom',67,'parent'}}|[{'record_field',68,{'atom',68,'info'}}|[{'record_field',69,{'atom',69,'etop'}}|[{'record_field',70,{'atom',70,'sort'},{'record',70,'sort',[]}}|[{'record_field',71,{'atom',71,'accum'},{'nil',71}}|[{'record_field',72,{'atom',72,'attrs'}}|[{'record_field',73,{'atom',73,'node'}}|[{'record_field',74,{'atom',74,'backend_pid'}}]]]]]]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','state'},[{'record_field',77,{'atom',77,'parent'}}|[{'record_field',78,{'atom',78,'grid'}}|[{'record_field',79,{'atom',79,'panel'}}|[{'record_field',80,{'atom',80,'popup_menu'}}|[{'record_field',81,{'atom',81,'parent_notebook'}}|[{'record_field',82,{'atom',82,'timer'}}|[{'record_field',83,{'atom',83,'procinfo_menu_pids'},{'nil',83}}|[{'record_field',84,{'atom',84,'sel'},{'tuple',84,[{'nil',84}|[{'nil',84}]]}}|[{'record_field',85,{'atom',85,'holder'}}]]]]]]]]],[]}]]
'start_link'/2 =
    %% Line 87
    fun (_cor1,_cor0) ->
	%% Line 88
	call 'wx_object':'start_link'
	    ('observer_pro_wx', [_cor1|[_cor0|[]]], [])
'init'/1 =
    %% Line 91
    fun (_cor0) ->
	case _cor0 of
	  <[Notebook|[Parent|[]]]> when 'true' ->
	      let <Attrs> =
		  %% Line 92
		  call 'observer_lib':'create_attrs'
		      ()
	      in  let <Self> =
		      %% Line 93
		      call 'erlang':'self'
			  ()
		  in  let <_cor3> =
			  %% Line 94
			  ( fun () ->
				apply 'init_table_holder'/2
				    (Self, Attrs)
			    -| [{'id',{0,0,'-init/1-fun-0-'}}] )
		      in  let <Holder> =
			      %% Line 94
			      call 'erlang':'spawn_link'
				  (_cor3)
			  in  %% Line 95
			      case apply 'setup'/3
				       (Notebook, Parent, Holder) of
				<{ProPanel,State}> when 'true' ->
				    %% Line 96
				    case State of
				      <{'state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
					  let <_cor8> =
					      call 'erlang':'setelement'
						  (10, State, Holder)
					  in  {ProPanel,_cor8}
				      ( <_cor19> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'setup'/3 =
    %% Line 98
    fun (_cor2,_cor1,_cor0) ->
	let <ProPanel> =
	    %% Line 99
	    call 'wxPanel':'new'
		(_cor2, [])
	in  let <Grid> =
		%% Line 101
		apply 'create_list_box'/2
		    (ProPanel, _cor0)
	    in  let <Sizer> =
		    %% Line 102
		    call 'wxBoxSizer':'new'
			(8)
		in  do  %% Line 103
			call 'wxSizer':'add'
			    (Sizer, Grid, [{'flag',8432}|[{'proportion',1}|[{'border',4}]]])
			do  %% Line 107
			    call 'wxWindow':'setSizer'
				(ProPanel, Sizer)
			    let <State> =
				%% Line 109
				{'state',_cor1,%% Line 110
					       Grid,%% Line 111
						    ProPanel,'undefined',_cor2,%% Line 114
									       {'false',10},[],{[],[]},_cor0}
			    in  %% Line 116
				{ProPanel,State}
'create_pro_menu'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 127
	    call 'erlang':'self'
		()
	in  let <_cor3> =
		%% Line 127
		apply 'call'/2
		    (_cor0, {'get_accum',_cor2})
	    in  let <MenuEntries> =
		    %% Line 122
		    [{[70|[105|[108|[101]]]],[{'create_menu',205,[68|[117|[109|[112|[32|[116|[111|[32|[102|[105|[108|[101]]]]]]]]]]]],[],'append','false'}]}|%% Line 124
																			     [{[86|[105|[101|[119]]]],%% Line 125
																						      [{'create_menu',210,[65|[99|[99|[117|[109|[117|[108|[97|[116|[101]]]]]]]]]],[],%% Line 126
																																     'check',_cor3}|%% Line 128
																																		    ['separator'|[{'create_menu',203,[82|[101|[102|[114|[101|[115|[104|[9|[67|[116|[114|[108|[45|[82]]]]]]]]]]]]]],[],'append','false'}|[{'create_menu',204,[82|[101|[102|[114|[101|[115|[104|[32|[73|[110|[116|[101|[114|[118|[97|[108]]]]]]]]]]]]]]]],[],'append','false'}]]]]}|%% Line 131
																																																																				  [{[84|[114|[97|[99|[101]]]]],[{'create_menu',206,[84|[114|[97|[99|[101|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115]]]]]]]]]]]]]]],[],'append','false'}|[{'create_menu',207,[84|[114|[97|[99|[101|[32|[110|[97|[109|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[32|[40|[97|[108|[108|[32|[110|[111|[100|[101|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[],'append','false'}|[{'create_menu',208,[84|[114|[97|[99|[101|[32|[110|[101|[119|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115]]]]]]]]]]]]]]]]]]],[],'append','false'}]]]}]]]
		in  %% Line 138
		    call 'observer_wx':'create_menus'
			(_cor1, MenuEntries)
'create_list_box'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 144
	    ( fun (_cor7,_cor6,_cor5) ->
		  let <_cor4> =
		      %% Line 145
		      call 'erlang':'self'
			  ()
		  in  %% Line 145
		      apply 'call'/2
			  (_cor0, {'get_row',_cor4,_cor6,_cor5})
	      -| [{'id',{0,0,'-create_list_box/2-fun-0-'}}] )
	in  let <_cor17> =
		%% Line 148
		( fun (_cor14,_cor13) ->
		      let <_cor12> =
			  %% Line 149
			  call 'erlang':'self'
			      ()
		      in  %% Line 149
			  apply 'call'/2
			      (_cor0, {'get_attr',_cor12,_cor13})
		  -| [{'id',{0,0,'-create_list_box/2-fun-1-'}}] )
	    in  let <ListCtrl> =
		    %% Line 142
		    call 'wxListCtrl':'new'
			(_cor1, [{'style',546}|%% Line 143
					       [{'onGetItemText',_cor11}|%% Line 147
									 [{'onGetItemAttr',_cor17}|%% Line 151
												   []]]])
		in  let <Li> =
			%% Line 152
			call 'wxListItem':'new'
			    ()
		    in  let <AddListEntry> =
			    %% Line 153
			    ( fun (_cor21,_cor20) ->
				  case <_cor21,_cor20> of
				    <{Name,Align,DefSize},Col> when 'true' ->
					do  %% Line 154
					    call 'wxListItem':'setText'
						(Li, Name)
					    do  %% Line 155
						call 'wxListItem':'setAlign'
						    (Li, Align)
						do  %% Line 156
						    call 'wxListCtrl':'insertColumn'
							(ListCtrl, Col, Li)
						    do  %% Line 157
							call 'wxListCtrl':'setColumnWidth'
							    (ListCtrl, Col, DefSize)
							%% Line 158
							call 'erlang':'+'
							    (Col, 1)
				    ( <_cor23,_cor22> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor23,_cor22})
					    -| [{'function_name',{'-create_list_box/2-fun-2-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-create_list_box/2-fun-2-'}}] )
			in  do  %% Line 167
				call 'lists':'foldl'
				    (AddListEntry, 0, [{[80|[105|[100]]],2,120}|[{[78|[97|[109|[101|[32|[111|[114|[32|[73|[110|[105|[116|[105|[97|[108|[32|[70|[117|[110|[99]]]]]]]]]]]]]]]]]]]],0,200}|[{[82|[101|[100|[115]]]],1,100}|[{[77|[101|[109|[111|[114|[121]]]]]],1,100}|[{[77|[115|[103|[81]]]],1,50}|[{[67|[117|[114|[114|[101|[110|[116|[32|[70|[117|[110|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]],0,200}]]]]]])
				do  %% Line 168
				    call 'wxListItem':'destroy'
					(Li)
				    do  %% Line 170
					call 'wxListCtrl':'setItemCount'
					    (ListCtrl, 1)
					do  %% Line 171
					    call 'wxListCtrl':'connect'
						(ListCtrl, 'size', [{'skip','true'}])
					    do  %% Line 172
						call 'wxListCtrl':'connect'
						    (ListCtrl, 'command_list_item_activated')
						do  %% Line 173
						    call 'wxListCtrl':'connect'
							(ListCtrl, 'command_list_item_right_click')
						    do  %% Line 174
							call 'wxListCtrl':'connect'
							    (ListCtrl, 'command_list_col_click')
							do  %% Line 177
							    call 'wxListCtrl':'connect'
								(ListCtrl, 'command_list_item_focused')
							    %% Line 178
							    ListCtrl
'dump_to_file'/3 =
    %% Line 180
    fun (_cor2,_cor1,_cor0) ->
	%% Line 181
	case call 'file':'open'
		 (_cor1, ['write']) of
	  %% Line 182
	  <{'ok',Fd}> when 'true' ->
	      %% Line 184
	      call 'erlang':'!'
		  (_cor0, {'dump',Fd})
	  %% Line 185
	  <{'error',Reason}> when 'true' ->
	      let <FailMsg> =
		  %% Line 186
		  call 'file':'format_error'
		      (Reason)
	      in  let <MD> =
		      %% Line 187
		      call 'wxMessageDialog':'new'
			  (_cor2, FailMsg)
		  in  do  %% Line 188
			  call 'wxDialog':'showModal'
			      (MD)
			  %% Line 189
			  call 'wxDialog':'destroy'
			      (MD)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'start_procinfo'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'undefined',_X_Frame,Opened> when 'true' ->
	      %% Line 193
	      Opened
	  %% Line 194
	  <Pid,Frame,Opened> when 'true' ->
	      %% Line 195
	      case call 'lists':'keyfind'
		       (Pid, 1, Opened) of
		%% Line 196
		<'false'> when 'true' ->
		    let <_cor3> =
			%% Line 197
			call 'erlang':'self'
			    ()
		    in  %% Line 197
			case call 'observer_procinfo':'start'
				 (Pid, Frame, _cor3) of
			  %% Line 198
			  <{'error',_cor9}> when 'true' ->
			      Opened
			  %% Line 199
			  <PI> when 'true' ->
			      [{Pid,PI}|Opened]
			end
		%% Line 201
		<{_cor10,PI}> when 'true' ->
		    do  %% Line 202
			call 'wxFrame':'raise'
			    (PI)
			%% Line 203
			Opened
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'call'/2 =
    %% Line 206
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 207
	    call 'erlang':'monitor'
		('process', _cor1)
	in  do  %% Line 208
		call 'erlang':'!'
		    (_cor1, _cor0)
		%% Line 209
		receive
		  %% Line 210
		  <{'DOWN',_cor5,_cor6,_cor7,_cor8}>
		      when call 'erlang':'=:='
			    (_cor5,
			     Ref) ->
		      []
		  %% Line 211
		  <{_cor9,Res}>
		      when call 'erlang':'=:='
			    (_cor9,
			     _cor1) ->
		      do  %% Line 212
			  call 'erlang':'demonitor'
			      (Ref)
			  %% Line 213
			  Res
		after %% Line 214
		      2000 ->
		  do  %% Line 215
		      call 'io':'format'
			  ([72|[97|[110|[103|[105|[110|[103|[32|[99|[97|[108|[108|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]], [_cor0|[]])
		      %% Line 216
		      []
'handle_info'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'holder_updated',Count},State0 = {'state',_cor24,Grid,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
	      let <State> =
		  %% Line 222
		  apply 'update_selection'/1
		      (State0)
	      in  do  %% Line 224
		      call 'wxListCtrl':'setItemCount'
			  (Grid, Count)
		      do  %% Line 225
			  ( case <> of
			      ( <>
				    when call 'erlang':'>'
					  (Count,
					   0) ->
				    let <_cor4> =
					call 'erlang':'-'
					    (Count, 1)
				    in  call 'wxListCtrl':'refreshItems'
					    (Grid, 0, _cor4)
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'ok'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  %% Line 227
			  {'noreply',State}
	  %% Line 229
	  <'refresh_interval',State = {'state',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,Holder}> when 'true' ->
	      do  %% Line 230
		  call 'erlang':'!'
		      (Holder, 'refresh')
		  %% Line 231
		  {'noreply',State}
	  %% Line 233
	  <{'procinfo_menu_closed',Pid},State = %% Line 234
						{'state',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,Opened,_cor46,_cor47}> when 'true' ->
	      let <NewPids> =
		  %% Line 235
		  call 'lists':'keydelete'
		      (Pid, 1, Opened)
	      in  let <_cor9> =
		      %% Line 236
		      call 'erlang':'setelement'
			  (8, State, NewPids)
		  in  %% Line 236
		      {'noreply',_cor9}
	  %% Line 238
	  <{'procinfo_open',Pid},State = %% Line 239
					 {'state',_cor58,_cor59,Panel,_cor60,_cor61,_cor62,Opened,_cor63,_cor64}> when 'true' ->
	      let <Opened2> =
		  %% Line 240
		  apply 'start_procinfo'/3
		      (Pid, Panel, Opened)
	      in  let <_cor13> =
		      %% Line 241
		      call 'erlang':'setelement'
			  (8, State, Opened2)
		  in  %% Line 241
		      {'noreply',_cor13}
	  %% Line 243
	  <{'active',Node},State = %% Line 244
				   {'state',Parent,_cor75,_cor76,_cor77,_cor78,Timer,_cor79,_cor80,Holder}> when 'true' ->
	      do  %% Line 245
		  apply 'create_pro_menu'/2
		      (Parent, Holder)
		  do  %% Line 246
		      call 'erlang':'!'
			  (Holder, {'change_node',Node})
		      let <_rec3> =
			  %% Line 247
			  call 'observer_lib':'start_timer'
			      (Timer)
		      in  let <_cor17> =
			      %% Line 247
			      call 'erlang':'setelement'
				  (7, State, _rec3)
			  in  %% Line 247
			      {'noreply',_cor17}
	  %% Line 249
	  <'not_active',State = {'state',_cor91,_cor92,_cor93,_cor94,_cor95,Timer0,_cor96,_cor97,_cor98}> when 'true' ->
	      let <Timer> =
		  %% Line 250
		  call 'observer_lib':'stop_timer'
		      (Timer0)
	      in  let <_cor21> =
		      %% Line 251
		      call 'erlang':'setelement'
			  (7, State, Timer)
		  in  %% Line 251
		      {'noreply',_cor21}
	  %% Line 253
	  <Info,State> when 'true' ->
	      do  %% Line 254
		  call 'io':'format'
		      ([126|[112|[58|[126|[112|[44|[32|[85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[105|[110|[102|[111|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['observer_pro_wx'|[254|[Info|[]]]])
		  %% Line 255
		  {'noreply',State}
	end
'terminate'/2 =
    %% Line 257
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Reason,{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Holder}> when 'true' ->
	      do  %% Line 258
		  call 'erlang':'!'
		      (Holder, 'stop')
		  do  %% Line 259
		      call 'etop':'stop'
			  ()
		      %% Line 260
		      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'terminate',2}}] )
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 262
    fun (_cor2,_cor1,_cor0) ->
	%% Line 263
	{'ok',_cor0}
'handle_call'/3 =
    %% Line 265
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 266
	    call 'io':'format'
		([126|[112|[58|[126|[112|[58|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[99|[97|[108|[108|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], ['observer_pro_wx'|[266|[_cor2|[]]]])
	    %% Line 267
	    {'reply','ok',_cor0}
'handle_cast'/2 =
    %% Line 270
    fun (_cor1,_cor0) ->
	do  %% Line 271
	    call 'io':'format'
		([126|[112|[58|[126|[112|[58|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[99|[97|[115|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], ['observer_pro_wx'|[271|[_cor1|[]]]])
	    %% Line 272
	    {'noreply',_cor0}
'handle_event'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx',205,_cor46,_cor47,_cor48},State = {'state',_cor49,_cor50,Panel,_cor51,_cor52,_cor53,_cor54,_cor55,Holder}> when 'true' ->
	      let <FD> =
		  %% Line 277
		  call 'wxFileDialog':'new'
		      (Panel, %% Line 278
			      [{'style',6}])
	      in  do  %% Line 279
		      case call 'wxFileDialog':'showModal'
			       (FD) of
			%% Line 280
			<5100> when 'true' ->
			    let <Path> =
				%% Line 281
				call 'wxFileDialog':'getPath'
				    (FD)
			    in  do  %% Line 282
				    call 'wxDialog':'destroy'
					(FD)
				    %% Line 283
				    apply 'dump_to_file'/3
					(Panel, Path, Holder)
			%% Line 284
			<_cor56> when 'true' ->
			    %% Line 285
			    call 'wxDialog':'destroy'
				(FD)
		      end
		      %% Line 287
		      {'noreply',State}
	  %% Line 289
	  <{'wx',210,_cor57,_cor58,%% Line 290
				   {'wxCommand','command_menu_selected',_cor59,CmdInt,_cor60}},State = %% Line 291
												       {'state',_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,Holder}> when 'true' ->
	      let <_cor6> =
		  %% Line 292
		  call 'erlang':'=:='
		      (CmdInt, 1)
	      in  do  %% Line 292
		      call 'erlang':'!'
			  (Holder, {'accum',_cor6})
		      %% Line 293
		      {'noreply',State}
	  %% Line 295
	  <{'wx',203,_cor69,_cor70,{'wxCommand','command_menu_selected',_cor71,_cor72,_cor73}},State = %% Line 296
												       {'state',_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,Holder}> when 'true' ->
	      do  %% Line 297
		  call 'erlang':'!'
		      (Holder, 'refresh')
		  %% Line 298
		  {'noreply',State}
	  %% Line 300
	  <{'wx',204,_cor82,_cor83,_cor84},State = %% Line 301
						   {'state',_cor85,_cor86,Panel,_cor87,_cor88,Timer0,_cor89,_cor90,_cor91}> when 'true' ->
	      let <Timer> =
		  %% Line 302
		  call 'observer_lib':'interval_dialog'
		      (Panel, Timer0, 1, 300)
	      in  let <_cor11> =
		      %% Line 303
		      call 'erlang':'setelement'
			  (7, State, Timer)
		  in  %% Line 303
		      {'noreply',_cor11}
	  %% Line 305
	  <{'wx',201,_cor102,_cor103,_cor104},State = {'state',_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,{[_cor112|Ids],[ToKill|Pids]},_cor113}> when 'true' ->
	      do  %% Line 306
		  call 'erlang':'exit'
		      (ToKill, 'kill')
		  let <_rec7> = {%% Line 307
		       Ids,%% Line 307
			   Pids}
		  in  let <_cor15> =
			  %% Line 307
			  call 'erlang':'setelement'
			      (9, State, _rec7)
		      in  %% Line 307
			  {'noreply',_cor15}
	  %% Line 310
	  <{'wx',202,_cor124,_cor125,_cor126},State = %% Line 311
						      {'state',_cor127,_cor128,Panel,_cor129,_cor130,_cor131,Opened,{_cor132,[Pid|_cor133]},_cor134}> when 'true' ->
	      let <Opened2> =
		  %% Line 312
		  apply 'start_procinfo'/3
		      (Pid, Panel, Opened)
	      in  let <_cor19> =
		      %% Line 313
		      call 'erlang':'setelement'
			  (8, State, Opened2)
		  in  %% Line 313
		      {'noreply',_cor19}
	  %% Line 315
	  <{'wx',206,_cor145,_cor146,_cor147},State = {'state',_cor148,_cor149,Panel,_cor150,_cor151,_cor152,_cor153,{_cor154,Pids},_cor155}> when 'true' ->
	      %% Line 316
	      case Pids of
		%% Line 317
		<[]> when 'true' ->
		    do  %% Line 318
			call 'observer_wx':'create_txt_dialog'
			    (Panel, [78|[111|[32|[115|[101|[108|[101|[99|[116|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115]]]]]]]]]]]]]]]]]]]]], [84|[114|[97|[99|[101|[114]]]]]], 256)
			%% Line 319
			{'noreply',State}
		%% Line 320
		<_cor156> when 'true' ->
		    let <_cor20> =
			%% Line 321
			call 'observer_wx':'get_tracer'
			    ()
		    in  do  %% Line 321
			    call 'observer_trace_wx':'add_processes'
				(_cor20, Pids)
			    %% Line 322
			    {'noreply',State}
	      end
	  %% Line 325
	  <{'wx',207,_cor157,_cor158,_cor159},State = {'state',_cor160,_cor161,Panel,_cor162,_cor163,_cor164,_cor165,{SelIds,_X_Pids},Holder}> when 'true' ->
	      %% Line 326
	      case SelIds of
		%% Line 327
		<[]> when 'true' ->
		    do  %% Line 328
			call 'observer_wx':'create_txt_dialog'
			    (Panel, [78|[111|[32|[115|[101|[108|[101|[99|[116|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115]]]]]]]]]]]]]]]]]]]]], [84|[114|[97|[99|[101|[114]]]]]], 256)
			%% Line 329
			{'noreply',State}
		%% Line 330
		<_cor166> when 'true' ->
		    let <_cor22> =
			%% Line 331
			call 'erlang':'self'
			    ()
		    in  let <PidsOrReg> =
			    %% Line 331
			    apply 'call'/2
				(Holder, {'get_name_or_pid',_cor22,SelIds})
			in  let <_cor24> =
				%% Line 332
				call 'observer_wx':'get_tracer'
				    ()
			    in  do  %% Line 332
				    call 'observer_trace_wx':'add_processes'
					(_cor24, PidsOrReg)
				    %% Line 333
				    {'noreply',State}
	      end
	  %% Line 336
	  <{'wx',208,_cor167,_cor168,{'wxCommand','command_menu_selected',_cor169,_cor170,_cor171}},State> when 'true' ->
	      let <_cor26> =
		  %% Line 337
		  call 'observer_wx':'get_tracer'
		      ()
	      in  do  %% Line 337
		      call 'observer_trace_wx':'add_processes'
			  (_cor26, ['new'])
		      %% Line 338
		      {'noreply',State}
	  %% Line 340
	  <{'wx',_cor172,_cor173,_cor174,{'wxSize',_cor175,{W,_cor176},_cor177}},State = %% Line 341
											 {'state',_cor178,Grid,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185}> when 'true' ->
	      do  %% Line 342
		  call 'observer_lib':'set_listctrl_col_size'
		      (Grid, W)
		  %% Line 343
		  {'noreply',State}
	  %% Line 345
	  <{'wx',_cor186,_cor187,_cor188,{'wxList','command_list_item_right_click',_cor189,_cor190,%% Line 346
												   Row,_cor191,_cor192}},State = %% Line 347
																 {'state',_cor193,_cor194,Panel,_cor195,_cor196,_cor197,_cor198,_cor199,Holder}> when 'true' ->
	      let <_cor27> =
		  %% Line 349
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 349
		      case apply 'call'/2
			       (Holder, {'get_row',_cor27,Row,'pid'}) of
			%% Line 350
			<{'error','undefined'}> when 'true' ->
			    'ok'
			%% Line 352
			<{'ok',_cor200}> when 'true' ->
			    let <Menu> =
				%% Line 353
				call 'wxMenu':'new'
				    ()
			    in  do  %% Line 354
				    call 'wxMenu':'append'
					(Menu, 202, [80|[114|[111|[99|[101|[115|[115|[32|[105|[110|[102|[111]]]]]]]]]]]])
				    do  %% Line 355
					call 'wxMenu':'append'
					    (Menu, 206, [84|[114|[97|[99|[101|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115]]]]]]]]]]]]]]], [{'help',[84|[114|[97|[99|[101|[32|[115|[101|[108|[101|[99|[116|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[32|[105|[100|[101|[110|[116|[105|[102|[105|[101|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}])
					do  %% Line 356
					    call 'wxMenu':'append'
						(Menu, 207, [84|[114|[97|[99|[101|[32|[110|[97|[109|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[32|[40|[97|[108|[108|[32|[110|[111|[100|[101|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 357
																														       [{'help',[84|[114|[97|[99|[101|[32|[115|[101|[108|[101|[99|[116|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[44|[32|[105|[102|[32|[97|[32|[112|[114|[111|[99|[101|[115|[115|[32|[104|[97|[118|[101|[32|[97|[32|[114|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[110|[97|[109|[101|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[32|[119|[105|[116|[104|[32|[115|[97|[109|[101|[32|[110|[97|[109|[101|[32|[119|[105|[108|[108|[32|[98|[101|[32|[116|[114|[97|[99|[101|[100|[32|[111|[110|[32|[97|[108|[108|[32|[110|[111|[100|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}])
					    do  %% Line 358
						call 'wxMenu':'append'
						    (Menu, 201, [75|[105|[108|[108|[32|[80|[114|[111|[99|[101|[115|[115]]]]]]]]]]]])
						do  %% Line 359
						    call 'wxWindow':'popupMenu'
							(Panel, Menu)
						    %% Line 360
						    call 'wxMenu':'destroy'
							(Menu)
			( <_cor29> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor29})
			  -| ['compiler_generated'] )
		      end
		      %% Line 362
		      {'noreply',State}
	  %% Line 364
	  <{'wx',_cor201,_cor202,_cor203,{'wxList','command_list_item_focused',_cor204,_cor205,%% Line 365
											       Row,_cor206,_cor207}},State = %% Line 366
															     {'state',_cor208,Grid,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,Holder}> when 'true' ->
	      %% Line 367
	      case <> of
		%% Line 368
		<>
		    when call 'erlang':'>='
			  (Row,
			   0) ->
		    let <_cor30> =
			%% Line 369
			apply 'get_selected_items'/1
			    (Grid)
		    in  let <_cor31> =
			    %% Line 369
			    call 'lists':'delete'
				(Row, _cor30)
			in  let <SelIds> =
				%% Line 369
				[Row|_cor31]
			    in  let <_cor33> =
				    %% Line 370
				    call 'erlang':'self'
					()
				in  let <Pids> =
					%% Line 370
					apply 'call'/2
					    (Holder, {'get_pids',_cor33,SelIds})
				    in  let <_rec10> = {%% Line 371
					     SelIds,%% Line 371
						    Pids}
					in  let <_cor38> =
						%% Line 371
						call 'erlang':'setelement'
						    (9, State, _rec10)
					    in  %% Line 371
						{'noreply',_cor38}
		%% Line 372
		<> when 'true' ->
		    %% Line 373
		    {'noreply',State}
	      end
	  %% Line 376
	  <{'wx',_cor225,_cor226,_cor227,{'wxList','command_list_col_click',_cor228,_cor229,_cor230,Col,_cor231}},State = %% Line 377
															  {'state',_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,Holder}> when 'true' ->
	      do  %% Line 378
		  call 'erlang':'!'
		      (Holder, {'change_sort',Col})
		  %% Line 379
		  {'noreply',State}
	  %% Line 381
	  <{'wx',_cor240,_cor241,_cor242,{'wxList','command_list_item_activated',_cor243,_cor244,_cor245,_cor246,_cor247}},State = %% Line 382
																   {'state',_cor248,_cor249,Panel,_cor250,_cor251,_cor252,Opened,%% Line 383
																								 {_cor253,[Pid|_cor254]},_cor255}> when 'true' ->
	      let <Opened2> =
		  %% Line 384
		  apply 'start_procinfo'/3
		      (Pid, Panel, Opened)
	      in  let <_cor43> =
		      %% Line 385
		      call 'erlang':'setelement'
			  (8, State, Opened2)
		  in  %% Line 385
		      {'noreply',_cor43}
	  %% Line 387
	  <Event,State> when 'true' ->
	      do  %% Line 388
		  call 'io':'format'
		      ([126|[112|[58|[126|[112|[58|[32|[104|[97|[110|[100|[108|[101|[32|[101|[118|[101|[110|[116|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]], ['observer_pro_wx'|[388|[Event|[]]]])
		  %% Line 389
		  {'noreply',State}
	end
'update_selection'/1 =
    %% Line 394
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor18,Grid,_cor19,_cor20,_cor21,_cor22,_cor23,%% Line 395
									   {SelIds0,SelPids0},Holder}> when 'true' ->
	      let <_cor1> =
		  %% Line 396
		  call 'erlang':'self'
		      ()
	      in  %% Line 396
		  case apply 'call'/2
			   (Holder, {'get_rows_from_pids',_cor1,SelPids0}) of
		    <Sel = {SelIds,_X_SelPids}> when 'true' ->
			do  %% Line 397
			    apply 'set_focus'/3
				(SelIds0, SelIds, Grid)
			    do  %% Line 398
				case <> of
				  %% Line 399
				  <>
				      when call 'erlang':'=:='
					    (SelIds,
					     SelIds0) ->
				      'ok'
				  %% Line 400
				  <> when 'true' ->
				      let <_cor13> =
					  %% Line 401
					  ( fun () ->
						do  %% Line 402
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor5) ->
								  case _cor5 of
								    <[%% Line 403
								      I|_cor4]> when 'true' ->
									do  call 'wxListCtrl':'setItemState'
										(Grid, I, 0, 4)
									    %% Line 403
									    apply 'lc$^0'/1
										(_cor4)
								    <[]> when 'true' ->
									[]
								    ( <_cor5> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor5})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      (%% Line 403
							       SelIds0)
						      -| ['list_comprehension'] )
						    %% Line 404
						    ( letrec
							  'lc$^1'/1 =
							      fun (_cor10) ->
								  case _cor10 of
								    <[%% Line 405
								      I|_cor9]> when 'true' ->
									let <_cor11> =
									    call 'wxListCtrl':'setItemState'
										(Grid, I, 65535, 4)
									in  let <_cor12> =
										%% Line 405
										apply 'lc$^1'/1
										    (_cor9)
									    in  ( [_cor11|_cor12]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor10> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor10})
									    -| [{'function_name',{'lc$^1',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^1'/1
							      (%% Line 405
							       SelIds)
						      -| ['list_comprehension'] )
					    -| [{'id',{0,0,'-update_selection/1-fun-0-'}}] )
				      in  %% Line 401
					  call 'wx':'batch'
					      (_cor13)
				end
				%% Line 409
				call 'erlang':'setelement'
				    (9, State, Sel)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'update_selection',1}}] )
	    -| ['compiler_generated'] )
	end
'get_selected_items'/1 =
    %% Line 411
    fun (_cor0) ->
	%% Line 412
	apply 'get_selected_items'/3
	    (_cor0, -1, [])
'get_selected_items'/3 =
    %% Line 414
    fun (_cor2,_cor1,_cor0) ->
	let <Item> =
	    %% Line 415
	    call 'wxListCtrl':'getNextItem'
		(_cor2, _cor1, [{'geometry',1}|[{'state',4}]])
	in  %% Line 417
	    case Item of
	      %% Line 418
	      <-1> when 'true' ->
		  %% Line 419
		  call 'lists':'reverse'
		      (_cor0)
	      %% Line 420
	      <_cor8> when 'true' ->
		  %% Line 421
		  apply 'get_selected_items'/3
		      (_cor2, Item, [Item|_cor0])
	    end
'set_focus'/3 =
    %% Line 424
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],[],_X_Grid> when 'true' ->
	      'ok'
	  %% Line 425
	  <[Same|_cor6],[_cor7|_cor8],_X_Grid>
	      when call 'erlang':'=:='
		    (_cor7,
		     Same) ->
	      'ok'
	  %% Line 426
	  <[],[New|_cor9],Grid> when 'true' ->
	      %% Line 427
	      call 'wxListCtrl':'setItemState'
		  (Grid, New, 65535, 2)
	  %% Line 428
	  <[Old|_cor10],[],Grid> when 'true' ->
	      %% Line 429
	      call 'wxListCtrl':'setItemState'
		  (Grid, Old, 0, 2)
	  %% Line 430
	  <[Old|_cor11],[New|_cor12],Grid> when 'true' ->
	      do  %% Line 431
		  call 'wxListCtrl':'setItemState'
		      (Grid, Old, 0, 2)
		  %% Line 432
		  call 'wxListCtrl':'setItemState'
		      (Grid, New, 65535, 2)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'set_focus',3}}] )
	    -| ['compiler_generated'] )
	end
'init_table_holder'/2 =
    %% Line 436
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 437
	    call 'erlang':'node'
		()
	in  let <_cor2> =
		%% Line 437
		call 'erlang':'self'
		    ()
	    in  let <Backend> =
		    %% Line 437
		    call 'erlang':'spawn_link'
			(_cor3, 'observer_backend', 'etop_collect', [_cor2|[]])
		in  let <_cor8> =
			%% Line 440
			call 'array':'new'
			    ()
		    in  let <_cor5> =
			    %% Line 441
			    call 'erlang':'node'
				()
			in  %% Line 438
			    apply 'table_holder'/1
				({'holder',_cor1,_cor8,%% Line 439
						       {'etop_info',{0,0,0},0,'undefined','undefined',0,[],[{'total',0}|[{'processes',0}|[{'ets',0}|[{'atom',0}|[{'code',0}|[{'binary',0}]]]]]],[]},{'sort',2,'false'},[],_cor0,_cor5,%% Line 442
																												      Backend})
'table_holder'/1 =
    %% Line 446
    fun (_cor0) ->
	case _cor0 of
	  <S0 = {'holder',_cor30,Info,_cor31,_cor32,_cor33,Attrs,%% Line 447
								 Node,%% Line 447
								      Backend}> when 'true' ->
	      %% Line 448
	      receive
		%% Line 449
		<{'get_row',From,Row,Col}> when 'true' ->
		    do  %% Line 450
			apply 'get_row'/4
			    (From, Row, Col, Info)
			%% Line 451
			apply 'table_holder'/1
			    (S0)
		%% Line 452
		<{'get_attr',From,Row}> when 'true' ->
		    do  %% Line 453
			apply 'get_attr'/3
			    (From, Row, Attrs)
			%% Line 454
			apply 'table_holder'/1
			    (S0)
		%% Line 455
		<{_cor34,EtopInfo = {'etop_info',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}}>
		    when call 'erlang':'=:='
			  (_cor34,
			   Backend) ->
		    let <State> =
			%% Line 456
			apply 'handle_update'/2
			    (EtopInfo, S0)
		    in  %% Line 457
			case State of
			  <{'holder',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
			      let <_cor4> =
				  call 'erlang':'setelement'
				      (9, State, 'undefined')
			      in  apply 'table_holder'/1
				      (_cor4)
			  ( <_cor51> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','holder'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 458
		<'refresh'>
		    when call 'erlang':'is_pid'
			  (Backend) ->
		    %% Line 459
		    apply 'table_holder'/1
			(S0)
		%% Line 460
		<'refresh'> when 'true' ->
		    let <_cor5> =
			%% Line 461
			call 'erlang':'self'
			    ()
		    in  let <Pid> =
			    %% Line 461
			    call 'erlang':'spawn_link'
				(Node, 'observer_backend', 'etop_collect', [_cor5|[]])
			in  let <_cor9> =
				%% Line 462
				call 'erlang':'setelement'
				    (9, S0, Pid)
			    in  %% Line 462
				apply 'table_holder'/1
				    (_cor9)
		%% Line 463
		<{'change_sort',Col}> when 'true' ->
		    let <State> =
			%% Line 464
			apply 'change_sort'/2
			    (Col, S0)
		    in  %% Line 465
			apply 'table_holder'/1
			    (State)
		%% Line 466
		<{'get_pids',From,Indices}> when 'true' ->
		    do  %% Line 467
			apply 'get_pids'/3
			    (From, Indices, Info)
			%% Line 468
			apply 'table_holder'/1
			    (S0)
		%% Line 469
		<{'get_rows_from_pids',From,Pids}> when 'true' ->
		    do  %% Line 470
			apply 'get_rows_from_pids'/3
			    (From, Pids, Info)
			%% Line 471
			apply 'table_holder'/1
			    (S0)
		%% Line 472
		<{'get_name_or_pid',From,Indices}> when 'true' ->
		    do  %% Line 473
			apply 'get_name_or_pid'/3
			    (From, Indices, Info)
			%% Line 474
			apply 'table_holder'/1
			    (S0)
		%% Line 476
		<{'get_node',From}> when 'true' ->
		    let <_cor11> =
			%% Line 477
			call 'erlang':'self'
			    ()
		    in  do  %% Line 477
			    call 'erlang':'!'
				(From, {_cor11,Node})
			    %% Line 478
			    apply 'table_holder'/1
				(S0)
		%% Line 479
		<{'change_node',NewNode}> when 'true' ->
		    %% Line 480
		    case <> of
		      %% Line 481
		      <>
			  when call 'erlang':'=='
				(Node,
				 NewNode) ->
			  %% Line 482
			  apply 'table_holder'/1
			      (S0)
		      %% Line 483
		      <> when 'true' ->
			  let <_cor12> =
			      %% Line 484
			      call 'erlang':'self'
				  ()
			  in  do  %% Line 484
				  call 'erlang':'!'
				      (_cor12, 'refresh')
				  let <_cor15> =
				      %% Line 485
				      call 'erlang':'setelement'
					  (8, S0, NewNode)
				  in  %% Line 485
				      apply 'table_holder'/1
					  (_cor15)
		    end
		%% Line 487
		<{'accum',Bool}> when 'true' ->
		    let <_cor17> =
			%% Line 488
			apply 'change_accum'/2
			    (Bool, S0)
		    in  %% Line 488
			apply 'table_holder'/1
			    (_cor17)
		%% Line 489
		<{'get_accum',From}> when 'true' ->
		    let <_cor21> =
			%% Line 490
			call 'erlang':'self'
			    ()
		    in  let <_cor20> =
			    %% Line 490
			    call 'erlang':'=:='
				(_cor33, 'true')
			in  do  %% Line 490
				call 'erlang':'!'
				    (From, {_cor21,_cor20})
				%% Line 491
				apply 'table_holder'/1
				    (S0)
		%% Line 492
		<{'dump',Fd}> when 'true' ->
		    let <_rec18> =
			%% Line 493
			call 'array':'to_list'
			    (Info)
		    in  %% Line 493
			case _cor31 of
			  <{'etop_info',_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93}> when 'true' ->
			      let <_cor27> =
				  call 'erlang':'setelement'
				      (9, _cor31, _rec18)
			      in  do  %% Line 494
				      call 'etop_txt':'do_update'
					  (Fd, _cor27, {'opts',Node,8415,'false',5000,10,700,340,'runtime','on','etop_txt','undefined','undefined','undefined','undefined','undefined','undefined','undefined'})
				      do  %% Line 495
					  call 'file':'close'
					      (Fd)
					  %% Line 496
					  apply 'table_holder'/1
					      (S0)
			  ( <_cor94> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','etop_info'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 497
		<'stop'> when 'true' ->
		    %% Line 498
		    'ok'
		%% Line 499
		<What> when 'true' ->
		    do  %% Line 500
			call 'io':'format'
			    ([84|[97|[98|[108|[101|[32|[104|[111|[108|[100|[101|[114|[32|[103|[111|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [What|[]])
			%% Line 501
			apply 'table_holder'/1
			    (S0)
	      after 'infinity' ->
		'true'
	  ( <_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29})
		  -| [{'function_name',{'table_holder',1}}] )
	    -| ['compiler_generated'] )
	end
'change_sort'/2 =
    %% Line 504
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Col,S0 = {'holder',Parent,Data,_cor9,Sort0,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 505
	      case apply 'sort'/3
		       (Col, Sort0, Data) of
		<{Sort,ProcInfo}> when 'true' ->
		    let <_cor3> =
			%% Line 506
			call 'array':'size'
			    (Data)
		    in  do  %% Line 506
			    call 'erlang':'!'
				(Parent, {'holder_updated',_cor3})
			    let <_cor5> =
				%% Line 507
				call 'erlang':'setelement'
				    (5, S0, Sort)
			    in  %% Line 507
				call 'erlang':'setelement'
				    (3, _cor5, ProcInfo)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'change_sort',2}}] )
	    -| ['compiler_generated'] )
	end
'change_accum'/2 =
    %% Line 509
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'true',S0> when 'true' ->
	      %% Line 510
	      case S0 of
		<{'holder',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
		    call 'erlang':'setelement'
			(6, S0, 'true')
		( <_cor19> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','holder'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 511
	  <'false',S0 = {'holder',_cor20,Info,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
	      let <_cor4> =
		  %% Line 512
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 512
		      call 'erlang':'!'
			  (_cor4, 'refresh')
		      let <_cor5> =
			  %% Line 513
			  call 'array':'to_list'
			      (Info)
		      in  let <_rec23> =
			      %% Line 513
			      call 'lists':'sort'
				  (_cor5)
			  in  %% Line 513
			      call 'erlang':'setelement'
				  (6, S0, _rec23)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'change_accum',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_update'/2 =
    %% Line 515
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <EI = {'etop_info',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,ProcInfo0},S0 = %% Line 516
											      {'holder',Parent,_cor24,_cor25,Sort = {'sort',KeyField,_cor26},_cor27,_cor28,_cor29,_cor30}> when 'true' ->
	      %% Line 517
	      case apply 'accum'/2
		       (ProcInfo0, S0) of
		<{ProcInfo1,S1}> when 'true' ->
		    let <_cor5> =
			%% Line 518
			call 'erlang':'setelement'
			    (2, Sort, 'undefined')
		    in  %% Line 518
			case apply 'sort'/3
				 (KeyField, _cor5, ProcInfo1) of
			  <{_X_SO,ProcInfo}> when 'true' ->
			      let <_cor7> =
				  %% Line 519
				  call 'array':'size'
				      (ProcInfo)
			      in  do  %% Line 519
				      call 'erlang':'!'
					  (Parent, {'holder_updated',_cor7})
				      let <_cor10> =
					  %% Line 520
					  call 'erlang':'setelement'
					      (9, EI, [])
				      in  %% Line 520
					  case S1 of
					    <{'holder',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
						let <_cor13> =
						    call 'erlang':'setelement'
							(4, S1, _cor10)
						in  call 'erlang':'setelement'
							(3, _cor13, ProcInfo)
					    ( <_cor51> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','holder'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'handle_update',2}}] )
	    -| ['compiler_generated'] )
	end
'accum'/2 =
    %% Line 522
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ProcInfo,State = {'holder',_cor9,_cor10,_cor11,_cor12,'true',_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 523
	      {ProcInfo,State}
	  %% Line 524
	  <ProcInfo0,State = {'holder',_cor16,_cor17,_cor18,_cor19,Previous,_cor20,_cor21,_cor22}> when 'true' ->
	      let <ProcInfo> =
		  %% Line 525
		  call 'lists':'sort'
		      (ProcInfo0)
	      in  let <_cor6> =
		      %% Line 526
		      apply 'accum2'/3
			  (ProcInfo, Previous, [])
		  in  let <_cor5> =
			  %% Line 526
			  call 'erlang':'setelement'
			      (6, State, ProcInfo)
		      in  %% Line 526
			  {_cor6,_cor5}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'accum',2}}] )
	    -| ['compiler_generated'] )
	end
'accum2'/3 =
    %% Line 528
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[PI = {'etop_proc_info',Pid,_cor12,Reds,_cor13,RT,_cor14,_cor15}|PIs],%% Line 529
										 [{'etop_proc_info',_cor16,_cor17,OldReds,_cor18,OldRT,_cor19,_cor20}|Old],%% Line 529
																			   Acc>
	      when call 'erlang':'=:='
		    (_cor16,
		     %% Line 529
		     Pid) ->
	      let <_rec30> =
		  %% Line 530
		  call 'erlang':'-'
		      (Reds, OldReds)
	      in  let <_rec31> =
		      %% Line 530
		      call 'erlang':'-'
			  (RT, OldRT)
		  in  let <_cor6> =
			  %% Line 530
			  call 'erlang':'setelement'
			      (6, PI, _rec31)
		      in  let <_cor8> =
			      %% Line 530
			      call 'erlang':'setelement'
				  (4, _cor6, _rec30)
			  in  %% Line 530
			      apply 'accum2'/3
				  (PIs, Old, [_cor8|Acc])
	  %% Line 531
	  <PIs = [{'etop_proc_info',Pid,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}|_cor35],[{'etop_proc_info',OldPid,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}|Old],Acc>
	      when %% Line 532
		call 'erlang':'>'
		    (Pid,
		     OldPid) ->
	      %% Line 533
	      apply 'accum2'/3
		  (PIs, Old, Acc)
	  %% Line 534
	  <[PI|PIs],Old,Acc> when 'true' ->
	      %% Line 535
	      apply 'accum2'/3
		  (PIs, Old, [PI|Acc])
	  %% Line 536
	  <[],_cor42,Acc> when 'true' ->
	      Acc
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'accum2',3}}] )
	    -| ['compiler_generated'] )
	end
'sort'/3 =
    %% Line 538
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Col,Opt,Table>
	      when let <_cor3> =
		    %% Line 539
		    call 'erlang':'is_list'
			(Table)
		in  %% Line 539
		    call 'erlang':'not'
			(_cor3) ->
	      let <_cor4> =
		  %% Line 540
		  call 'array':'to_list'
		      (Table)
	      in  %% Line 540
		  apply 'sort'/3
		      (Col, Opt, _cor4)
	  %% Line 541
	  <Col,Opt = {'sort',_cor27,Bool},Table>
	      when call 'erlang':'=:='
		    (_cor27,
		     Col) ->
	      let <_rec33> =
		  %% Line 542
		  call 'erlang':'not'
		      (Bool)
	      in  let <_cor10> =
		      %% Line 542
		      call 'erlang':'setelement'
			  (3, Opt, _rec33)
		  in  let <_cor5> =
			  %% Line 543
			  call 'lists':'reverse'
			      (Table)
		      in  let <_cor6> =
			      %% Line 543
			      call 'array':'from_list'
				  (_cor5)
			  in  %% Line 542
			      {_cor10,_cor6}
	  %% Line 544
	  <Col,S = {'sort',_cor31,'true'},Table> when 'true' ->
	      let <_cor16> =
		  %% Line 545
		  call 'erlang':'setelement'
		      (2, S, Col)
	      in  let <_cor11> =
		      %% Line 546
		      apply 'col_to_element'/1
			  (Col)
		  in  let <_cor12> =
			  %% Line 546
			  call 'lists':'keysort'
			      (_cor11, Table)
		      in  let <_cor13> =
			      %% Line 546
			      call 'array':'from_list'
				  (_cor12)
			  in  %% Line 545
			      {_cor16,_cor13}
	  %% Line 547
	  <Col,S = {'sort',_cor35,'false'},Table> when 'true' ->
	      let <_cor23> =
		  %% Line 548
		  call 'erlang':'setelement'
		      (2, S, Col)
	      in  let <_cor17> =
		      %% Line 549
		      apply 'col_to_element'/1
			  (Col)
		  in  let <_cor18> =
			  %% Line 549
			  call 'lists':'keysort'
			      (_cor17, Table)
		      in  let <_cor19> =
			      %% Line 549
			      call 'lists':'reverse'
				  (_cor18)
			  in  let <_cor20> =
				  %% Line 549
				  call 'array':'from_list'
				      (_cor19)
			      in  %% Line 548
				  {_cor23,_cor20}
	  ( <_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24})
		  -| [{'function_name',{'sort',3}}] )
	    -| ['compiler_generated'] )
	end
'get_procinfo_data'/2 =
    %% Line 553
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 554
	    apply 'col_to_element'/1
		(_cor1)
	in  %% Line 554
	    call 'erlang':'element'
		(_cor2, _cor0)
'col_to_element'/1 =
    %% Line 555
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      2
	  %% Line 556
	  <1> when 'true' ->
	      5
	  %% Line 557
	  <3> when 'true' ->
	      3
	  %% Line 559
	  <2> when 'true' ->
	      4
	  %% Line 560
	  <5> when 'true' ->
	      7
	  %% Line 561
	  <4> when 'true' ->
	      8
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'col_to_element',1}}] )
	    -| ['compiler_generated'] )
	end
'get_pids'/3 =
    %% Line 563
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 564
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[I|_cor4]> when 'true' ->
				( case call 'array':'get'
					   (I, _cor0) of
				    ( <( {'etop_proc_info',_rec37,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_rec37|_cor8]
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <_cor21> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','etop_proc_info'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor11> =
		%% Line 565
		call 'erlang':'self'
		    ()
	    in  %% Line 565
		call 'erlang':'!'
		    (_cor2, {_cor11,_cor9})
'get_name_or_pid'/3 =
    %% Line 567
    fun (_cor2,_cor1,_cor0) ->
	let <Get> =
	    %% Line 568
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{'etop_proc_info',_cor18,_cor19,_cor20,Name,_cor21,_cor22,_cor23}>
			when call 'erlang':'is_atom'
			      (Name) ->
			Name
		    %% Line 569
		    <{'etop_proc_info',Pid,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
			Pid
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-get_name_or_pid/3-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-get_name_or_pid/3-fun-0-'}}] )
	in  let <_cor12> =
		%% Line 571
		( letrec
		      'lc$^0'/1 =
			  fun (_cor8) ->
			      case _cor8 of
				<[I|_cor7]> when 'true' ->
				    let <_cor9> =
					call 'array':'get'
					    (I, _cor0)
				    in  let <_cor10> =
					    apply Get
						(_cor9)
					in  let <_cor11> =
						apply 'lc$^0'/1
						    (_cor7)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor8> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor8})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor1)
		  -| ['list_comprehension'] )
	    in  let <_cor14> =
		    %% Line 572
		    call 'erlang':'self'
			()
		in  %% Line 572
		    call 'erlang':'!'
			(_cor2, {_cor14,_cor12})
'get_row'/4 =
    %% Line 574
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <From,Row,'pid',Info> when 'true' ->
	      let <_cor8> =
		  %% Line 575
		  case <> of
		    %% Line 576
		    <>
			when call 'erlang':'=:='
			      (Row,
			       -1) ->
			{'error','undefined'}
		    %% Line 577
		    <> when 'true' ->
			let <_cor5> =
			    call 'array':'get'
				(Row, Info)
			in  let <_cor6> =
				apply 'get_procinfo_data'/2
				    (0, _cor5)
			    in  {'ok',_cor6}
		  end
	      in  let <_cor10> =
		      %% Line 579
		      call 'erlang':'self'
			  ()
		  in  %% Line 579
		      call 'erlang':'!'
			  (From, {_cor10,_cor8})
	  %% Line 580
	  <From,Row,Col,Info> when 'true' ->
	      let <_cor11> =
		  %% Line 581
		  call 'array':'size'
		      (Info)
	      in  let <_cor14> =
		      %% Line 581
		      case <> of
			%% Line 582
			<>
			    when call 'erlang':'>'
				  (Row,
				   _cor11) ->
			    %% Line 583
			    []
			%% Line 584
			<> when 'true' ->
			    let <ProcInfo> =
				%% Line 585
				call 'array':'get'
				    (Row, Info)
			    in  %% Line 586
				apply 'get_procinfo_data'/2
				    (Col, ProcInfo)
		      end
		  in  let <_cor17> =
			  %% Line 588
			  call 'erlang':'self'
			      ()
		      in  let <_cor16> =
			      %% Line 588
			      call 'observer_lib':'to_str'
				  (_cor14)
			  in  %% Line 588
			      call 'erlang':'!'
				  (From, {_cor17,_cor16})
	end
'get_rows_from_pids'/3 =
    %% Line 590
    fun (_cor2,_cor1,_cor0) ->
	let <Search> =
	    %% Line 591
	    ( fun (_cor9,_cor8,_cor7) ->
		  case <_cor9,_cor8,_cor7> of
		    <Idx,{'etop_proc_info',Pid,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},Acc0 = {Pick0,{Idxs,Pids}}> when 'true' ->
			%% Line 592
			case call 'ordsets':'is_element'
				 (Pid, Pick0) of
			  %% Line 593
			  <'true'> when 'true' ->
			      let <Acc> =
				  %% Line 594
				  {[Idx|Idxs],[Pid|Pids]}
			      in  let <Pick> =
				      %% Line 595
				      call 'ordsets':'del_element'
					  (Pid, Pick0)
				  in  %% Line 596
				      case <> of
					%% Line 597
					<>
					    when call 'erlang':'=:='
						  (Pick,
						   []) ->
					    call 'erlang':'throw'
						(Acc)
					%% Line 598
					<> when 'true' ->
					    {Pick,Acc}
				      end
			  %% Line 600
			  <'false'> when 'true' ->
			      Acc0
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor12,_cor11,_cor10> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor12,_cor11,_cor10})
			    -| [{'function_name',{'-get_rows_from_pids/3-fun-0-',3}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-get_rows_from_pids/3-fun-0-'}}] )
	in  let <_cor20> =
		%% Line 603
		try
		    let <_cor14> =
			%% Line 604
			call 'ordsets':'from_list'
			    (_cor1)
		    in  %% Line 604
			case call 'array':'foldl'
				 (Search, {_cor14,{[],[]}}, _cor0) of
			  <{_cor32,R}> when 'true' ->
			      %% Line 605
			      R
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor15})
			    -| ['compiler_generated'] )
			end
		of <_cor16> ->
		    _cor16
		catch <_cor19,_cor18,_cor17> ->
		    case <_cor19,_cor18,_cor17> of
		      %% Line 606
		      <'throw',R0,_cor33> when 'true' ->
			  R0
		      ( <_cor19,_cor18,_cor17> when 'true' ->
			    primop 'raise'
				(_cor17, _cor18)
			-| ['compiler_generated'] )
		    end
	    in  let <_cor22> =
		    %% Line 608
		    call 'erlang':'self'
			()
		in  %% Line 608
		    call 'erlang':'!'
			(_cor2, {_cor22,_cor20})
'get_attr'/3 =
    %% Line 610
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 611
	    call 'erlang':'rem'
		(_cor1, 2)
	in  let <_cor7> =
		%% Line 611
		case <> of
		  %% Line 612
		  <>
		      when call 'erlang':'=:='
			    (_cor3,
			     0) ->
		      ( case _cor0 of
			  ( <( {'attrs',_rec38,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
			       -| ['compiler_generated'] )> when 'true' ->
				_rec38
			    -| ['compiler_generated'] )
			  ( <_cor20> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','attrs'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 613
		  <> when 'true' ->
		      ( case _cor0 of
			  ( <( {'attrs',_cor21,_rec39,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
			       -| ['compiler_generated'] )> when 'true' ->
				_rec39
			    -| ['compiler_generated'] )
			  ( <_cor28> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','attrs'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		end
	    in  let <_cor9> =
		    %% Line 615
		    call 'erlang':'self'
			()
		in  %% Line 615
		    call 'erlang':'!'
			(_cor2, {_cor9,_cor7})
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('observer_pro_wx')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('observer_pro_wx', _cor0)
end