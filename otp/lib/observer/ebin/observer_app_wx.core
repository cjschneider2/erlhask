module 'observer_app_wx' ['code_change'/3,
			  'handle_call'/3,
			  'handle_cast'/2,
			  'handle_event'/2,
			  'handle_info'/2,
			  'handle_sync_event'/3,
			  'init'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'start_link'/2,
			  'terminate'/2]
    attributes [%% Line 26
		'behaviour' =
		    %% Line 26
		    ['wx_object'],
		%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 19
		'type' =
		    %% Line 19
		    [{{'record','match_spec'},[{'record_field',19,{'atom',19,'name'},{'string',19,[]}}|[{'record_field',20,{'atom',20,'term'},{'nil',20}}|[{'record_field',21,{'atom',21,'str'},{'nil',21}}|[{'record_field',22,{'atom',22,'func'},{'string',22,[]}}]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','tpattern'},[{'record_field',24,{'atom',24,'m'}}|[{'record_field',24,{'atom',24,'fa'}}|[{'record_field',24,{'atom',24,'ms'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','traced_func'},[{'record_field',26,{'atom',26,'func_name'}}|[{'record_field',27,{'atom',27,'arity'}}|[{'record_field',28,{'atom',28,'match_spec'},{'record',28,'match_spec',[]}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','create_menu'},[{'record_field',31,{'atom',31,'id'}}|[{'record_field',32,{'atom',32,'text'}}|[{'record_field',33,{'atom',33,'help'},{'nil',33}}|[{'record_field',34,{'atom',34,'type'},{'atom',34,'append'}}|[{'record_field',35,{'atom',35,'check'},{'atom',35,'false'}}]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','attrs'},[{'record_field',38,{'atom',38,'even'}}|[{'record_field',38,{'atom',38,'odd'}}|[{'record_field',38,{'atom',38,'searched'}}|[{'record_field',38,{'atom',38,'deleted'}}|[{'record_field',38,{'atom',38,'changed_odd'}}|[{'record_field',38,{'atom',38,'changed_even'}}|[{'record_field',38,{'atom',38,'new_odd'}}|[{'record_field',38,{'atom',38,'new_even'}}]]]]]]]],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','state'},[{'record_field',38,{'atom',38,'parent'}}|[{'record_field',39,{'atom',39,'panel'}}|[{'record_field',40,{'atom',40,'apps_w'}}|[{'record_field',41,{'atom',41,'app_w'}}|[{'record_field',42,{'atom',42,'paint'}}|[{'record_field',43,{'atom',43,'current'}}|[{'record_field',44,{'atom',44,'app'}}|[{'record_field',45,{'atom',45,'sel'}}|[{'record_field',46,{'atom',46,'appmon'}}|[{'record_field',47,{'atom',47,'usegc'},{'atom',47,'false'}}]]]]]]]]]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','paint'},[{'record_field',50,{'atom',50,'font'}}|[{'record_field',50,{'atom',50,'pen'}}|[{'record_field',50,{'atom',50,'brush'}}|[{'record_field',50,{'atom',50,'sel'}}|[{'record_field',50,{'atom',50,'links'}}]]]]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','app'},[{'record_field',52,{'atom',52,'ptree'}}|[{'record_field',52,{'atom',52,'n2p'}}|[{'record_field',52,{'atom',52,'links'}}|[{'record_field',52,{'atom',52,'dim'}}]]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','box'},[{'record_field',53,{'atom',53,'x'}}|[{'record_field',53,{'atom',53,'y'}}|[{'record_field',53,{'atom',53,'w'}}|[{'record_field',53,{'atom',53,'h'}}|[{'record_field',53,{'atom',53,'s1'}}]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{{'record','str'},[{'record_field',54,{'atom',54,'x'}}|[{'record_field',54,{'atom',54,'y'}}|[{'record_field',54,{'atom',54,'text'}}|[{'record_field',54,{'atom',54,'pid'}}]]]],[]}]]
'start_link'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	%% Line 76
	call 'wx_object':'start_link'
	    ('observer_app_wx', [_cor1|[_cor0|[]]], [])
'init'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <[Notebook|[Parent|[]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 79
		  call 'wxWindow':'getClientSize'
		      (Notebook)
	      in  let <Panel> =
		      %% Line 79
		      call 'wxPanel':'new'
			  (Notebook, [{'size',_cor1}|%% Line 80
						     [{'winid',1}]])
		  in  let <Main> =
			  %% Line 82
			  call 'wxBoxSizer':'new'
			      (4)
		      in  let <_cor4> =
			      %% Line 83
			      call 'wxWindow':'getClientSize'
				  (Panel)
			  in  let <Splitter> =
				  %% Line 83
				  call 'wxSplitterWindow':'new'
				      (Panel, [{'size',_cor4}|%% Line 84
							      [{'style',384}|[{'id',2}]]])
			      in  let <Apps> =
				      %% Line 87
				      call 'wxListBox':'new'
					  (Splitter, 3, [])
				  in  let <P2> =
					  %% Line 90
					  call 'wxPanel':'new'
					      (Splitter, [{'winid',4}])
				      in  let <Extra> =
					      %% Line 91
					      call 'wxBoxSizer':'new'
						  (8)
					  in  let <DrawingArea> =
						  %% Line 92
						  call 'wxScrolledWindow':'new'
						      (P2, [{'winid',5}|[{'style',65536}]])
					      in  let <_cor12> =
						      %% Line 94
						      call 'wxe_util':'get_const'
							  ('wxWHITE')
						  in  do  %% Line 94
							  call 'wxWindow':'setBackgroundColour'
							      (DrawingArea, _cor12)
							  do  %% Line 95
							      call 'wxWindow':'setVirtualSize'
								  (DrawingArea, 800, 800)
							      do  %% Line 96
								  call 'wxSplitterWindow':'setMinimumPaneSize'
								      (Splitter, 50)
								  do  %% Line 97
								      call 'wxSizer':'add'
									  (Extra, DrawingArea, [{'flag',8192}|[{'proportion',1}]])
								      do  %% Line 98
									  call 'wxWindow':'setSizer'
									      (P2, Extra)
									  do  %% Line 99
									      call 'wxSplitterWindow':'splitVertically'
										  (Splitter, Apps, P2, [{'sashPosition',150}])
									      do  %% Line 100
										  call 'wxWindow':'setSizer'
										      (Panel, Main)
										  do  %% Line 102
										      call 'wxSizer':'add'
											  (Main, Splitter, [{'flag',8432}|[{'proportion',1}|[{'border',5}]]])
										      do  %% Line 104
											  call 'wxWindow':'setSizer'
											      (Panel, Main)
											  do  %% Line 105
											      call 'wxListBox':'connect'
												  (Apps, 'command_listbox_selected')
											      do  %% Line 106
												  call 'wxPanel':'connect'
												      (DrawingArea, 'paint', ['callback'])
												  do  %% Line 107
												      call 'wxPanel':'connect'
													  (DrawingArea, 'size', [{'skip','true'}])
												      do  %% Line 108
													  call 'wxPanel':'connect'
													      (DrawingArea, 'left_up')
													  do  %% Line 109
													      call 'wxPanel':'connect'
														  (DrawingArea, 'left_dclick')
													      do  %% Line 110
														  call 'wxPanel':'connect'
														      (DrawingArea, 'right_down')
														  do  %% Line 111
														      case call 'os':'type'
															       () of
															%% Line 112
															<{'win32',_cor42}> when 'true' ->
															    let <_cor21> =
																%% Line 113
																( fun (_cor18,_cor17) ->
																      'ok'
																  -| [{'id',{0,0,'-init/1-fun-0-'}}] )
															    in  %% Line 113
																call 'wxPanel':'connect'
																    (DrawingArea, 'erase_background', [{'callback',_cor21}|[]])
															%% Line 114
															<_cor45> when 'true' ->
															    'ok'
														      end
														      let <UseGC> =
															  %% Line 117
															  call 'observer_perf_wx':'haveGC'
															      ()
														      in  let <_cor25> =
															      %% Line 118
															      call 'wxe_util':'get_const'
																  ('wxMAJOR_VERSION')
															  in  let <_cor28> =
																  %% Line 118
																  ( case <> of
																      ( <>
																	    when call 'erlang':'=:='
																		  (_cor25,
																		   2) ->
																	    let <_cor26> =
																		call 'wxe_util':'get_const'
																		    ('wxMINOR_VERSION')
																	    in  call 'erlang':'=:='
																		    (_cor26, 8)
																	-| ['compiler_generated'] )
																      ( <> when 'true' ->
																	    'false'
																	-| ['compiler_generated'] )
																    end
																    -| ['compiler_generated'] )
															      in  let <_cor33> =
																      %% Line 119
																      case call 'os':'type'
																	       () of
																	%% Line 120
																	<{'unix',_cor46}>
																	    when try
																		  let <_cor30> =
																		      call 'erlang':'=:='
																			  (UseGC, 'true')
																		  in  call 'erlang':'and'
																			  (_cor30, _cor28)
																	      of <Try> ->
																		  Try
																	      catch <T,R> ->
																		  'false' ->
																	    %% Line 121
																	    call 'wxFont':'new'
																		(12, 71, 90, 90)
																	%% Line 122
																	<_cor47> when 'true' ->
																	    %% Line 123
																	    call 'wxSystemSettings':'getFont'
																		(17)
																      end
																  in  let <SelCol> =
																	  %% Line 125
																	  call 'wxSystemSettings':'getColour'
																	      (13)
																      in  let <GreyBrush> =
																	      %% Line 126
																	      call 'wxBrush':'new'
																		  ({230,230,240})
																	  in  let <SelBrush> =
																		  %% Line 127
																		  call 'wxBrush':'new'
																		      (SelCol)
																	      in  let <LinkPen> =
																		      %% Line 128
																		      call 'wxPen':'new'
																			  (SelCol, [{'width',2}])
																		  in  do  %% Line 129
																			  call 'erlang':'process_flag'
																			      ('trap_exit', 'true')
																			  let <_cor40> =
																			      %% Line 136
																			      call 'wxPen':'new'
																				  ({80,80,80}, [{'width',2}])
																			  in  %% Line 130
																			      {Panel,{'state',Parent,%% Line 131
																						     Panel,%% Line 132
																							   Apps,%% Line 133
																								DrawingArea,%% Line 135
																									    {'paint',_cor33,_cor40,%% Line 137
																												   GreyBrush,%% Line 138
																													     SelBrush,%% Line 139
																														      LinkPen},'undefined','undefined','undefined','undefined',%% Line 134
																																					       UseGC}}
	  ( <_cor41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'setup_scrollbar'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 144
	    call 'wxWindow':'getClientSize'
		(_cor1)
	in  %% Line 144
	    apply 'setup_scrollbar'/3
		(_cor2, _cor1, _cor0)
'setup_scrollbar'/3 =
    %% Line 146
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{CW,CH},AppWin,{'app',_cor19,_cor20,_cor21,{W0,H0}}> when 'true' ->
	      let <W> =
		  %% Line 147
		  call 'erlang':'max'
		      (W0, CW)
	      in  let <H> =
		      %% Line 148
		      call 'erlang':'max'
			  (H0, CH)
		  in  %% Line 150
		      case <> of
			<>
			    when let <_cor6> =
				  call 'erlang':'=<'
				      (W0, CW)
			      in  let <_cor7> =
				      call 'erlang':'=<'
					  (H0, CH)
				  in  call 'erlang':'and'
					  (_cor6, _cor7) ->
			    %% Line 151
			    call 'wxScrolledWindow':'setScrollbars'
				(AppWin, W, H, 0, 0)
			%% Line 152
			<>
			    when call 'erlang':'=<'
				  (H0,
				   CH) ->
			    let <_cor8> =
				%% Line 153
				call 'erlang':'div'
				    (W, 20)
			    in  let <_cor9> =
				    %% Line 153
				    call 'erlang':'+'
					(_cor8, 1)
				in  %% Line 153
				    call 'wxScrolledWindow':'setScrollbars'
					(AppWin, 20, H, _cor9, 0)
			%% Line 154
			<>
			    when call 'erlang':'=<'
				  (W0,
				   CW) ->
			    let <_cor10> =
				%% Line 155
				call 'erlang':'div'
				    (H, 20)
			    in  let <_cor11> =
				    %% Line 155
				    call 'erlang':'+'
					(_cor10, 1)
				in  %% Line 155
				    call 'wxScrolledWindow':'setScrollbars'
					(AppWin, W, 20, 0, _cor11)
			%% Line 156
			<> when 'true' ->
			    let <_cor14> =
				%% Line 157
				call 'erlang':'div'
				    (W, 20)
			    in  let <_cor15> =
				    %% Line 157
				    call 'erlang':'+'
					(_cor14, 1)
				in  let <_cor12> =
					%% Line 157
					call 'erlang':'div'
					    (H, 20)
				    in  let <_cor13> =
					    %% Line 157
					    call 'erlang':'+'
						(_cor12, 1)
					in  %% Line 157
					    call 'wxScrolledWindow':'setScrollbars'
						(AppWin, 20, 20, _cor15, _cor13)
		      end
	  %% Line 159
	  <_cor22,_cor23,'undefined'> when 'true' ->
	      'ok'
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'setup_scrollbar',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_event'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx',_cor33,_cor34,_cor35,{'wxCommand','command_listbox_selected',AppStr,_cor36,_cor37}},State = %% Line 164
													     {'state',_cor38,_cor39,_cor40,_cor41,_cor42,Prev,_cor43,_cor44,AppMon,_cor45}> when 'true' ->
	      %% Line 165
	      case AppStr of
		%% Line 166
		<[]> when 'true' ->
		    %% Line 167
		    {'noreply',State}
		%% Line 168
		<_cor46> when 'true' ->
		    let <App> =
			%% Line 169
			call 'erlang':'list_to_atom'
			    (AppStr)
		    in  do  %% Line 170
			    ( case <> of
				( <>
				      when call 'erlang':'=/='
					    (Prev,
					     'undefined') ->
				      call 'appmon_info':'app'
					  (AppMon, Prev, 'false', [])
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'ok'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			    do  %% Line 171
				call 'appmon_info':'app'
				    (AppMon, App, 'true', [])
				let <_cor7> =
				    %% Line 172
				    call 'erlang':'setelement'
					(7, State, App)
				in  %% Line 172
				    {'noreply',_cor7}
	      end
	  %% Line 175
	  <{'wx',Id,_cor58,_cor59,_X_Sz = {'wxSize',_cor60,Size,_cor61}},State = %% Line 176
										 {'state',_cor62,_cor63,_cor64,AppWin,_cor65,_cor66,App,_cor67,_cor68,_cor69}> when 'true' ->
	      do  %% Line 177
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Id,
				   5) ->
			    apply 'setup_scrollbar'/3
				(Size, AppWin, App)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'ok'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  %% Line 178
		  {'noreply',State}
	  %% Line 180
	  <{'wx',_cor70,_cor71,_cor72,{'wxMouse',Type,X0,Y0,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82}},S0 = %% Line 181
																	 {'state',_cor83,_cor84,_cor85,AppWin,_cor86,_cor87,App,_cor88,_cor89,_cor90}> when 'true' ->
	      %% Line 182
	      case App of
		%% Line 183
		<{'app',Tree,_cor91,_cor92,_cor93}> when 'true' ->
		    %% Line 184
		    case call 'wxScrolledWindow':'calcUnscrolledPosition'
			     (AppWin, X0, Y0) of
		      <{X,Y}> when 'true' ->
			  let <Hit> =
			      %% Line 185
			      apply 'locate_node'/3
				  (X, Y, [Tree|[]])
			  in  let <State> =
				  %% Line 186
				  apply 'handle_mouse_click'/3
				      (Hit, Type, S0)
			      in  %% Line 187
				  {'noreply',State}
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
		%% Line 188
		<_cor94> when 'true' ->
		    %% Line 189
		    {'noreply',S0}
	      end
	  %% Line 192
	  <{'wx',_cor95,_cor96,_cor97,{'wxCommand','command_menu_selected',_cor98,_cor99,_cor100}},State = %% Line 193
													   {'state',_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,'undefined',_cor108,_cor109}> when 'true' ->
	      do  %% Line 194
		  call 'observer_lib':'display_info_dialog'
		      ([83|[101|[108|[101|[99|[116|[32|[112|[114|[111|[99|[101|[115|[115|[32|[102|[105|[114|[115|[116]]]]]]]]]]]]]]]]]]]])
		  %% Line 195
		  {'noreply',State}
	  %% Line 197
	  <{'wx',101,_cor110,_cor111,{'wxCommand','command_menu_selected',_cor112,_cor113,_cor114}},State = %% Line 198
													    {'state',_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,{{'box',_cor122,_cor123,_cor124,_cor125,{'str',_cor126,_cor127,_cor128,Pid}},_cor129},_cor130,_cor131}> when 'true' ->
	      do  %% Line 199
		  call 'erlang':'!'
		      ('observer', {'open_link',Pid})
		  %% Line 200
		  {'noreply',State}
	  %% Line 202
	  <{'wx',102,_cor132,_cor133,{'wxCommand','command_menu_selected',_cor134,_cor135,_cor136}},State = %% Line 203
													    {'state',_cor137,Panel,_cor138,_cor139,_cor140,_cor141,_cor142,{{'box',_cor143,_cor144,_cor145,_cor146,{'str',_cor147,_cor148,_cor149,Pid}},_cor150},_cor151,_cor152}> when 'true' ->
	      do  %% Line 204
		  case call 'observer_lib':'user_term'
			   (Panel, [69|[110|[116|[101|[114|[32|[109|[101|[115|[115|[97|[103|[101]]]]]]]]]]]]], []) of
		    %% Line 205
		    <'cancel'> when 'true' ->
			'ok'
		    %% Line 206
		    <{'ok',Term}> when 'true' ->
			call 'erlang':'!'
			    (Pid, Term)
		    %% Line 207
		    <{'error',Error}> when 'true' ->
			call 'observer_lib':'display_info_dialog'
			    (Error)
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
		  %% Line 209
		  {'noreply',State}
	  %% Line 211
	  <{'wx',103,_cor153,_cor154,{'wxCommand','command_menu_selected',_cor155,_cor156,_cor157}},State = %% Line 212
													    {'state',_cor158,Panel,_cor159,_cor160,_cor161,_cor162,_cor163,{{'box',_cor164,_cor165,_cor166,_cor167,{'str',_cor168,_cor169,_cor170,Pid}},_cor171},_cor172,_cor173}> when 'true' ->
	      do  %% Line 213
		  case call 'observer_lib':'user_term'
			   (Panel, [69|[110|[116|[101|[114|[32|[69|[120|[105|[116|[32|[82|[101|[97|[115|[111|[110]]]]]]]]]]]]]]]]], [107|[105|[108|[108]]]]) of
		    %% Line 214
		    <'cancel'> when 'true' ->
			'ok'
		    %% Line 215
		    <{'ok',Term}> when 'true' ->
			call 'erlang':'exit'
			    (Pid, Term)
		    %% Line 216
		    <{'error',Error}> when 'true' ->
			call 'observer_lib':'display_info_dialog'
			    (Error)
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor16})
		      -| ['compiler_generated'] )
		  end
		  %% Line 218
		  {'noreply',State}
	  %% Line 221
	  <{'wx',104,_cor174,_cor175,{'wxCommand','command_menu_selected',_cor176,_cor177,_cor178}},State = %% Line 222
													    {'state',_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,{Box,_cor186},_cor187,_cor188}> when 'true' ->
	      let <_cor18> =
		  %% Line 223
		  call 'observer_wx':'get_tracer'
		      ()
	      in  let <_cor17> =
		      %% Line 223
		      apply 'box_to_pid'/1
			  (Box)
		  in  do  %% Line 223
			  call 'observer_trace_wx':'add_processes'
			      (_cor18, [_cor17|[]])
			  %% Line 224
			  {'noreply',State}
	  %% Line 225
	  <{'wx',105,_cor189,_cor190,{'wxCommand','command_menu_selected',_cor191,_cor192,_cor193}},State = %% Line 226
													    {'state',_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,{Box,_cor201},_cor202,_cor203}> when 'true' ->
	      let <_cor20> =
		  %% Line 227
		  call 'observer_wx':'get_tracer'
		      ()
	      in  let <_cor19> =
		      %% Line 227
		      apply 'box_to_reg'/1
			  (Box)
		  in  do  %% Line 227
			  call 'observer_trace_wx':'add_processes'
			      (_cor20, [_cor19|[]])
			  %% Line 228
			  {'noreply',State}
	  %% Line 229
	  <{'wx',106,_cor204,_cor205,{'wxCommand','command_menu_selected',_cor206,_cor207,_cor208}},State = %% Line 230
													    {'state',_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,Sel,_cor216,_cor217}> when 'true' ->
	      let <Get> =
		  %% Line 231
		  ( fun (_cor21) ->
			apply 'box_to_pid'/1
			    (_cor21)
		    -| [{'id',{0,0,'-handle_event/2-fun-0-'}}] )
	      in  let <_cor25> =
		      %% Line 232
		      call 'observer_wx':'get_tracer'
			  ()
		  in  let <_cor24> =
			  %% Line 232
			  apply 'tree_map'/2
			      (Sel, Get)
		      in  do  %% Line 232
			      call 'observer_trace_wx':'add_processes'
				  (_cor25, _cor24)
			      %% Line 233
			      {'noreply',State}
	  %% Line 234
	  <{'wx',107,_cor218,_cor219,{'wxCommand','command_menu_selected',_cor220,_cor221,_cor222}},State = %% Line 235
													    {'state',_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,Sel,_cor230,_cor231}> when 'true' ->
	      let <Get> =
		  %% Line 236
		  ( fun (_cor26) ->
			apply 'box_to_reg'/1
			    (_cor26)
		    -| [{'id',{0,0,'-handle_event/2-fun-1-'}}] )
	      in  let <_cor30> =
		      %% Line 237
		      call 'observer_wx':'get_tracer'
			  ()
		  in  let <_cor29> =
			  %% Line 237
			  apply 'tree_map'/2
			      (Sel, Get)
		      in  do  %% Line 237
			      call 'observer_trace_wx':'add_processes'
				  (_cor30, _cor29)
			      %% Line 238
			      {'noreply',State}
	  %% Line 240
	  <Event,_X_State> when 'true' ->
	      %% Line 241
	      call 'erlang':'error'
		  ({'unhandled_event',Event})
	end
'handle_sync_event'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx',_cor21,_cor22,_cor23,{'wxPaint',_cor24}},_cor25,%% Line 245
								 {'state',_cor26,_cor27,_cor28,DA,Paint,_cor29,App,Sel,_cor30,UseGC}> when 'true' ->
	      let <_cor3> =
		  %% Line 247
		  call 'os':'type'
		      ()
	      in  let <_cor4> =
		      %% Line 247
		      call 'erlang':'element'
			  (1, _cor3)
		  in  let <IsWindows> =
			  %% Line 247
			  call 'erlang':'=:='
			      (_cor4, 'win32')
		      in  let <_cor7> =
			      %% Line 249
			      case <> of
				<>
				    when IsWindows ->
				    let <_cor6> =
					call 'wxBufferedPaintDC':'new'
					    (DA)
				    in  call 'wx':'typeCast'
					    (_cor6, 'wxPaintDC')
				%% Line 250
				<> when 'true' ->
				    call 'wxPaintDC':'new'
					(DA)
			      end
			  in  do  %% Line 252
				  ( case IsWindows of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'wxDC':'clear'
						(_cor7)
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <_cor9> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor9}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor14> =
				      %% Line 253
				      case UseGC of
					%% Line 254
					<'true'> when 'true' ->
					    let <GC0> =
						%% Line 255
						call 'wxGraphicsContext':'create'
						    (_cor7)
					    in  %% Line 257
						case call 'wxScrolledWindow':'calcScrolledPosition'
							 (DA, {0,0}) of
						  <{Sx,Sy}> when 'true' ->
						      do  %% Line 258
							  call 'wxGraphicsContext':'translate'
							      (GC0, Sx, Sy)
							  %% Line 259
							  GC0
						  ( <_cor12> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor12})
						    -| ['compiler_generated'] )
						end
					%% Line 260
					<'false'> when 'true' ->
					    do  %% Line 261
						call 'wxScrolledWindow':'doPrepareDC'
						    (DA, _cor7)
						_cor7
					( <_cor13> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor13})
					  -| ['compiler_generated'] )
				      end
				  in  do  %% Line 265
					  apply 'draw'/4
					      ({UseGC,_cor14}, App, Sel, Paint)
					  do  %% Line 266
					      ( case UseGC of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							call 'wxGraphicsContext':'destroy'
							    (_cor14)
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <_cor16> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_cor16}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      do  %% Line 267
						  call 'wxPaintDC':'destroy'
						      (_cor7)
						  %% Line 268
						  'ok'
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'handle_sync_event',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 270
    fun (_cor2,_cor1,_cor0) ->
	%% Line 271
	call 'erlang':'error'
	    ({'unhandled_call',_cor2,_cor1})
'handle_cast'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	%% Line 274
	call 'erlang':'error'
	    ({'unhandled_cast',_cor1})
'handle_info'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'active',Node},State = {'state',Parent,_cor56,_cor57,_cor58,_cor59,Curr,_cor60,_cor61,Appmon,_cor62}> when 'true' ->
	      do  %% Line 277
		  apply 'create_menus'/2
		      (Parent, [])
		  let <_cor9> =
		      %% Line 278
		      try
			  %% Line 279
			  case call 'erlang':'node'
				   (Appmon) of
			    <_cor63>
				when call 'erlang':'=:='
				      (_cor63,
				       Node) ->
				%% Line 280
				Appmon
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      of <_cor3> ->
			  _cor3
		      catch <_cor6,_cor5,_cor4> ->
			  let <_cor7> =
			      %% Line 282
			      call 'erlang':'self'
				  ()
			  in  %% Line 282
			      case call 'appmon_info':'start_link'
				       (Node, _cor7, []) of
				<{'ok',P}> when 'true' ->
				    %% Line 283
				    P
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
		  in  do  %% Line 285
			  call 'appmon_info':'app_ctrl'
			      (_cor9, Node, 'true', [])
			  do  %% Line 286
			      ( case <> of
				  ( <>
					when call 'erlang':'=/='
					      (Curr,
					       'undefined') ->
					call 'appmon_info':'app'
					    (_cor9, Curr, 'true', [])
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					'ok'
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			      let <_cor15> =
				  %% Line 287
				  call 'erlang':'setelement'
				      (10, State, _cor9)
			      in  %% Line 287
				  {'noreply',_cor15}
	  %% Line 288
	  <'not_active',State = {'state',_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,AppMon,_cor86}> when 'true' ->
	      let <_cor16> =
		  %% Line 289
		  call 'erlang':'node'
		      (AppMon)
	      in  do  %% Line 289
		      call 'appmon_info':'app_ctrl'
			  (AppMon, _cor16, 'false', [])
		      let <_cor19> =
			  %% Line 290
			  call 'erlang':'node'
			      (AppMon)
		      in  let <_cor18> =
			      %% Line 290
			      call 'erlang':'nodes'
				  ()
			  in  do  %% Line 290
				  ( case call 'lists':'member'
					     (_cor19, _cor18) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'exit'
						(AppMon, 'normal')
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <_cor17> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor17}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  do  %% Line 291
				      call 'observer_wx':'set_status'
					  ([])
				      let <_cor23> =
					  %% Line 292
					  call 'erlang':'setelement'
					      (10, State, 'undefined')
				      in  %% Line 292
					  {'noreply',_cor23}
	  %% Line 293
	  <{'delivery',Pid,'app_ctrl',_cor98,Apps0},State = %% Line 294
							    {'state',_cor99,_cor100,LBox,_cor101,_cor102,Curr0,_cor103,_cor104,_cor105,_cor106}>
	      when call 'erlang':'=:='
		    (_cor105,
		     %% Line 294
		     Pid) ->
	      let <_cor29> =
		  %% Line 295
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor26) ->
				case _cor26 of
				  <[{_cor107,App,{_cor108,_cor109,_cor110}}|_cor25]> when 'true' ->
				      let <_cor27> =
					  call 'erlang':'atom_to_list'
					      (App)
				      in  let <_cor28> =
					      apply 'lc$^0'/1
						  (_cor25)
					  in  ( [_cor27|_cor28]
						-| ['compiler_generated'] )
				  ( <[_cor24|_cor25]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor25)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor26> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor26})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Apps0)
		    -| ['list_comprehension'] )
	      in  do  %% Line 296
		      call 'wxListBox':'clear'
			  (LBox)
		      let <_cor36> =
			  %% Line 297
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor34) ->
					case _cor34 of
					  <[App|_cor32]> when 'true' ->
					      let <_cor35> =
						  apply 'lc$^1'/1
						      (_cor32)
					      in  ( [App|_cor35]
						    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor34> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor34})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  let <_cor33> =
				    call 'lists':'sort'
					(_cor29)
				in  apply 'lc$^1'/1
					(_cor33)
			    -| ['list_comprehension'] )
		      in  do  %% Line 297
			      call 'wxListBox':'appendStrings'
				  (LBox, _cor36)
			      %% Line 298
			      case _cor29 of
				%% Line 299
				<[App|_cor111]>
				    when call 'erlang':'=:='
					  (Curr0,
					   'undefined') ->
				    let <Curr> =
					%% Line 300
					call 'erlang':'list_to_atom'
					    (App)
				    in  do  %% Line 301
					    call 'appmon_info':'app'
						(Pid, Curr, 'true', [])
					    let <_cor40> =
						%% Line 302
						call 'erlang':'setelement'
						    (7, State, Curr)
					    in  %% Line 302
						{'noreply',_cor40}
				%% Line 303
				<_cor123> when 'true' ->
				    %% Line 304
				    {'noreply',State}
			      end
	  %% Line 306
	  <{'delivery',_X_Pid,'app',_X_Curr,{[],[],[],[]}},State = %% Line 307
								   {'state',_cor124,Panel,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132}> when 'true' ->
	      do  %% Line 308
		  call 'wxWindow':'refresh'
		      (Panel)
		  let <_cor43> =
		      %% Line 309
		      call 'erlang':'setelement'
			  (9, State, 'undefined')
		  in  let <_cor45> =
			  %% Line 309
			  call 'erlang':'setelement'
			      (8, _cor43, 'undefined')
		      in  %% Line 309
			  {'noreply',_cor45}
	  %% Line 311
	  <{'delivery',Pid,'app',Curr,AppData},State = %% Line 312
						       {'state',_cor144,Panel,_cor145,%% Line 313
										      AppWin,%% Line 313
											     {'paint',Font,_cor146,_cor147,_cor148,_cor149},_cor150,_cor151,_cor152,_cor153,UseGC}>
	      when let <_cor154> =
		    call 'erlang':'=:='
			(_cor150, %% Line 312
				  Curr)
		in  let <_cor155> =
			call 'erlang':'=:='
			    (_cor153, %% Line 312
				      Pid)
		    in  call 'erlang':'and'
			    (_cor154, _cor155) ->
	      let <_cor46> =
		  %% Line 314
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (UseGC,
			       'true') ->
			call 'wxGraphicsContext':'create'
			    (AppWin)
		    %% Line 315
		    <> when 'true' ->
			call 'wxWindowDC':'new'
			    (AppWin)
		  end
	      in  let <FontW> = {%% Line 317
		       UseGC,_cor46}
		  in  do  %% Line 318
			  call 'observer_perf_wx':'setFont'
			      (FontW, Font, {0,0,0})
			  let <App> =
			      %% Line 319
			      apply 'build_tree'/2
				  (AppData, FontW)
			  in  do  %% Line 320
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (UseGC,
					       'true') ->
					call 'wxGraphicsContext':'destroy'
					    (_cor46)
				    %% Line 321
				    <> when 'true' ->
					call 'wxWindowDC':'destroy'
					    (_cor46)
				  end
				  do  %% Line 323
				      apply 'setup_scrollbar'/2
					  (AppWin, App)
				      do  %% Line 324
					  call 'wxWindow':'refresh'
					      (Panel)
					  do  %% Line 325
					      call 'wxWindow':'layout'
						  (Panel)
					      let <_cor51> =
						  %% Line 326
						  call 'erlang':'setelement'
						      (9, State, 'undefined')
					      in  let <_cor53> =
						      %% Line 326
						      call 'erlang':'setelement'
							  (8, _cor51, App)
						  in  %% Line 326
						      {'noreply',_cor53}
	  %% Line 328
	  <{'EXIT',_cor167,'noconnection'},State> when 'true' ->
	      %% Line 329
	      {'noreply',State}
	  %% Line 330
	  <{'EXIT',_cor168,'normal'},State> when 'true' ->
	      %% Line 331
	      {'noreply',State}
	  %% Line 332
	  <_X_Event,State> when 'true' ->
	      %% Line 334
	      {'noreply',State}
	end
'terminate'/2 =
    %% Line 337
    fun (_cor1,_cor0) ->
	%% Line 338
	'ok'
'code_change'/3 =
    %% Line 339
    fun (_cor2,_cor1,_cor0) ->
	_cor0
'handle_mouse_click'/3 =
    %% Line 342
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node = {{'box',_cor12,_cor13,_cor14,_cor15,{'str',_cor16,_cor17,_cor18,Pid}},_cor19},Type,State = %% Line 343
													     {'state',_cor20,Panel,_cor21,AppWin,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
	      do  %% Line 344
		  case Type of
		    %% Line 345
		    <'left_dclick'> when 'true' ->
			call 'erlang':'!'
			    ('observer', {'open_link',Pid})
		    %% Line 346
		    <'right_down'> when 'true' ->
			apply 'popup_menu'/1
			    (Panel)
		    %% Line 347
		    <_cor28> when 'true' ->
			'ok'
		  end
		  let <_cor4> =
		      %% Line 349
		      call 'io_lib':'format'
			  ([80|[105|[100|[58|[32|[126|[112]]]]]]], [Pid|[]])
		  in  do  %% Line 349
			  call 'observer_wx':'set_status'
			      (_cor4)
			  do  %% Line 350
			      call 'wxWindow':'refresh'
				  (AppWin)
			      %% Line 351
			      call 'erlang':'setelement'
				  (9, State, Node)
	  %% Line 352
	  <_cor40,_cor41,State = {'state',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,'undefined',_cor49,_cor50}> when 'true' ->
	      %% Line 353
	      State
	  %% Line 354
	  <_cor51,'right_down',State = {'state',_cor52,Panel,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}> when 'true' ->
	      do  %% Line 355
		  apply 'popup_menu'/1
		      (Panel)
		  %% Line 356
		  State
	  %% Line 357
	  <_cor61,_cor62,State = {'state',_cor63,_cor64,_cor65,AppWin,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}> when 'true' ->
	      do  %% Line 358
		  call 'observer_wx':'set_status'
		      ([])
		  do  %% Line 359
		      call 'wxWindow':'refresh'
			  (AppWin)
		      %% Line 360
		      call 'erlang':'setelement'
			  (9, State, 'undefined')
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'handle_mouse_click',3}}] )
	    -| ['compiler_generated'] )
	end
'create_menus'/2 =
    %% Line 364
    fun (_cor1,_cor0) ->
	%% Line 377
	call 'observer_wx':'create_menus'
	    (_cor1, [{[70|[105|[108|[101]]]],[{'create_menu',101,[80|[114|[111|[99|[101|[115|[115|[32|[105|[110|[102|[111]]]]]]]]]]]],[],'append','false'}|[{'create_menu',102,[83|[101|[110|[100|[32|[77|[115|[103]]]]]]]],[],'append','false'}|[{'create_menu',103,[75|[105|[108|[108|[32|[112|[114|[111|[99|[101|[115|[115]]]]]]]]]]]],[],'append','false'}]]]}|[{[84|[114|[97|[99|[101]]]]],[{'create_menu',104,[84|[114|[97|[99|[101|[32|[112|[114|[111|[99|[101|[115|[115]]]]]]]]]]]]],[],'append','false'}|[{'create_menu',105,[84|[114|[97|[99|[101|[32|[110|[97|[109|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115]]]]]]]]]]]]]]]]]]],[],'append','false'}|[{'create_menu',106,[84|[114|[97|[99|[101|[32|[112|[114|[111|[99|[101|[115|[115|[32|[116|[114|[101|[101]]]]]]]]]]]]]]]]]],[],'append','false'}|[{'create_menu',107,[84|[114|[97|[99|[101|[32|[110|[97|[109|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[32|[116|[114|[101|[101]]]]]]]]]]]]]]]]]]]]]]]],[],'append','false'}]]]]}]])
'popup_menu'/1 =
    %% Line 379
    fun (_cor0) ->
	let <Menu> =
	    %% Line 380
	    call 'wxMenu':'new'
		()
	in  do  %% Line 381
		call 'wxMenu':'append'
		    (Menu, 101, [80|[114|[111|[99|[101|[115|[115|[32|[105|[110|[102|[111]]]]]]]]]]]])
		do  %% Line 382
		    call 'wxMenu':'append'
			(Menu, 104, [84|[114|[97|[99|[101|[32|[112|[114|[111|[99|[101|[115|[115]]]]]]]]]]]]])
		    do  %% Line 383
			call 'wxMenu':'append'
			    (Menu, 105, [84|[114|[97|[99|[101|[32|[110|[97|[109|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115]]]]]]]]]]]]]]]]]]])
			do  %% Line 384
			    call 'wxMenu':'append'
				(Menu, 106, [84|[114|[97|[99|[101|[32|[112|[114|[111|[99|[101|[115|[115|[32|[116|[114|[101|[101]]]]]]]]]]]]]]]]]])
			    do  %% Line 385
				call 'wxMenu':'append'
				    (Menu, 107, [84|[114|[97|[99|[101|[32|[110|[97|[109|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[32|[116|[114|[101|[101]]]]]]]]]]]]]]]]]]]]]]]])
				do  %% Line 386
				    call 'wxMenu':'append'
					(Menu, 102, [83|[101|[110|[100|[32|[77|[115|[103]]]]]]]])
				    do  %% Line 387
					call 'wxMenu':'append'
					    (Menu, 103, [75|[105|[108|[108|[32|[112|[114|[111|[99|[101|[115|[115]]]]]]]]]]]])
					do  %% Line 388
					    call 'wxWindow':'popupMenu'
						(_cor0, Menu)
					    %% Line 389
					    call 'wxMenu':'destroy'
						(Menu)
'locate_node'/3 =
    %% Line 392
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,_X_Y,[{Box = {'box',BX,_cor9,_cor10,_cor11,_cor12},_X_Chs}|_X_Rest]>
	      when %% Line 393
		call 'erlang':'<'
		    (X,
		     BX) ->
	      %% Line 394
	      {'left',Box}
	  %% Line 395
	  <X,Y,[Node = {Box = {'box',BX,BY,BW,BH,_cor13},_X_Chs}|Rest]>
	      when %% Line 396
		try
		    let <_cor3> =
			call 'erlang':'+'
			    (BX, BW)
		    in  call 'erlang':'=<'
			    (X, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 397
	      case <> of
		%% Line 398
		<>
		    when call 'erlang':'<'
			  (Y,
			   BY) ->
		    {'above',Box}
		%% Line 399
		<>
		    when try
			  let <_cor4> =
			      call 'erlang':'+'
				  (BY, BH)
			  in  call 'erlang':'=<'
				  (Y, _cor4)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    Node
		%% Line 400
		<> when 'true' ->
		    apply 'locate_node'/3
			(X, Y, Rest)
	      end
	  %% Line 402
	  <X,Y,[{_cor14,Chs}|Rest]> when 'true' ->
	      %% Line 403
	      case apply 'locate_node'/3
		       (X, Y, Chs) of
		%% Line 404
		<Node = {{'box',_cor15,_cor16,_cor17,_cor18,_cor19},_cor20}> when 'true' ->
		    Node
		%% Line 405
		<_X_Miss> when 'true' ->
		    %% Line 406
		    apply 'locate_node'/3
			(X, Y, Rest)
	      end
	  %% Line 408
	  <_cor21,_cor22,[]> when 'true' ->
	      'false'
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'locate_node',3}}] )
	    -| ['compiler_generated'] )
	end
'locate_box'/2 =
    %% Line 410
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <From,[{Box = {'box',_cor5,_cor6,_cor7,_cor8,{'str',_cor9,_cor10,_cor11,_cor12}},_cor13}|_cor14]>
	      when call 'erlang':'=:='
		    (_cor12,
		     From) ->
	      Box
	  %% Line 411
	  <From,[{_cor15,Chs}|Rest]> when 'true' ->
	      %% Line 412
	      case apply 'locate_box'/2
		       (From, Chs) of
		%% Line 413
		<Box = {'box',_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
		    Box
		%% Line 414
		<_cor21> when 'true' ->
		    apply 'locate_box'/2
			(From, Rest)
	      end
	  %% Line 416
	  <From,[]> when 'true' ->
	      {'false',From}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'locate_box',2}}] )
	    -| ['compiler_generated'] )
	end
'build_tree'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Root,P2Name,Links,XLinks0},FontW> when 'true' ->
	      let <_cor2> =
		  %% Line 421
		  call 'sofs':'relation'
		      (Links)
	      in  let <Fam> =
		      %% Line 421
		      call 'sofs':'relation_to_family'
			  (_cor2)
		  in  let <_cor8> =
			  %% Line 422
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[{Pid,Name}|_cor5]> when 'true' ->
					      let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [{Name,Pid}|_cor7]
						    -| ['compiler_generated'] )
					  ( <[_cor4|_cor5]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor5)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (P2Name)
			    -| ['list_comprehension'] )
		      in  let <_cor9> =
			      %% Line 422
			      call 'lists':'sort'
				  (_cor8)
			  in  let <Name2P> =
				  %% Line 422
				  call 'gb_trees':'from_orddict'
				      (_cor9)
			      in  let <_cor11> =
				      %% Line 423
				      call 'sofs':'to_external'
					  (Fam)
				  in  let <Lookup> =
					  %% Line 423
					  call 'gb_trees':'from_orddict'
					      (_cor11)
				      in  %% Line 424
					  case apply 'build_tree2'/4
						   (Root, Lookup, Name2P, FontW) of
					    <{_cor31,Tree0}> when 'true' ->
						%% Line 425
						case apply 'calc_tree_size'/1
							 (Tree0) of
						  <{Tree,Dim}> when 'true' ->
						      let <Fetch> =
							  %% Line 426
							  ( fun (_cor24,_cor23) ->
								case <_cor24,_cor23> of
								  <{From,To},Acc> when 'true' ->
								      %% Line 427
								      try
									  case call 'gb_trees':'lookup'
										   (To, Name2P) of
									    <{'value',ToPid}> when 'true' ->
										let <FromPid> =
										    %% Line 428
										    call 'gb_trees':'get'
											(From, Name2P)
										in  let <_cor18> =
											%% Line 429
											apply 'locate_box'/2
											    (FromPid, [Tree|[]])
										    in  let <_cor17> =
											    %% Line 429
											    apply 'locate_box'/2
												(ToPid, [Tree|[]])
											in  %% Line 429
											    [{_cor18,_cor17}|Acc]
									    ( <_cor15> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor15})
									      -| ['compiler_generated'] )
									  end
								      of <_cor19> ->
									  _cor19
								      catch <_cor22,_cor21,_cor20> ->
									  %% Line 431
									  Acc
								  ( <_cor26,_cor25> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor26,_cor25})
									  -| [{'function_name',{'-build_tree/2-fun-0-',2}}] )
								    -| ['compiler_generated'] )
								end
							    -| [{'id',{0,0,'-build_tree/2-fun-0-'}}] )
						      in  let <XLinks> =
							      %% Line 434
							      call 'lists':'foldl'
								  (Fetch, [], XLinks0)
							  in  %% Line 435
							      {'app',Tree,'undefined',XLinks,Dim}
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor14})
						    -| ['compiler_generated'] )
						end
					    ( <_cor13> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor13})
					      -| ['compiler_generated'] )
					  end
	  ( <_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29})
		  -| [{'function_name',{'build_tree',2}}] )
	    -| ['compiler_generated'] )
	end
'build_tree2'/4 =
    %% Line 437
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 438
	case call 'gb_trees':'lookup'
		 (_cor3, _cor2) of
	  %% Line 439
	  <'none'> when 'true' ->
	      let <_cor4> =
		  apply 'box'/3
		      (_cor3, _cor1, _cor0)
	      in  {_cor2,{_cor4,[]}}
	  %% Line 440
	  <{'value',Children}> when 'true' ->
	      let <Tree1> =
		  %% Line 441
		  call 'gb_trees':'delete'
		      (_cor3, _cor2)
	      in  let <_cor11> =
		      %% Line 442
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <[112|[111|[114|[116|[32|_cor19]]]]],Acc> when 'true' ->
				  %% Line 443
				  Acc
			      %% Line 444
			      <Child,{T0,Acc}> when 'true' ->
				  %% Line 445
				  case apply 'build_tree2'/4
					   (Child, T0, _cor1, _cor0) of
				    <{T,C}> when 'true' ->
					%% Line 446
					{T,[C|Acc]}
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor10,_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor10,_cor9})
				      -| [{'function_name',{'-build_tree2/4-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-build_tree2/4-fun-0-'}}] )
		  in  %% Line 442
		      case call 'lists':'foldr'
			       (_cor11, %% Line 447
					{Tree1,[]}, %% Line 447
						    Children) of
			<{Tree,CHs}> when 'true' ->
			    let <_cor13> =
				%% Line 448
				apply 'box'/3
				    (_cor3, _cor1, _cor0)
			    in  %% Line 448
				{Tree,{_cor13,CHs}}
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor12})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'calc_tree_size'/1 =
    %% Line 451
    fun (_cor0) ->
	let <Cols> =
	    %% Line 452
	    apply 'calc_col_start'/2
		(_cor0, [0])
	in  %% Line 453
	    case apply 'calc_tree_size'/4
		     (_cor0, Cols, 16, [12]) of
	      <{Boxes,{W,Hs}}> when 'true' ->
		  let <_cor3> =
		      %% Line 454
		      call 'lists':'max'
			  (Hs)
		  in  %% Line 454
		      {Boxes,{W,_cor3}}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'calc_col_start'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{{'box',_cor13,_cor14,W,_cor15,_cor16},Chs},[Max|Acc0]> when 'true' ->
	      let <_cor2> =
		  %% Line 457
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Acc0,
			       []) ->
			[0]
		    <> when 'true' ->
			Acc0
		  end
	      in  let <_cor8> =
		      %% Line 458
		      ( fun (_cor5,_cor4) ->
			    apply 'calc_col_start'/2
				(_cor5, _cor4)
			-| [{'id',{0,0,'-calc_col_start/2-fun-0-'}}] )
		  in  let <Depth> =
			  %% Line 458
			  call 'lists':'foldl'
			      (_cor8, _cor2, %% Line 459
					     Chs)
		      in  let <_cor10> =
			      %% Line 460
			      call 'erlang':'max'
				  (W, Max)
			  in  %% Line 460
			      [_cor10|Depth]
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'calc_col_start',2}}] )
	    -| ['compiler_generated'] )
	end
'calc_tree_size'/4 =
    %% Line 462
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{Box = {'box',_cor29,_cor30,W,H,_cor31},[]},_cor32,X,[Y|Ys]> when 'true' ->
	      let <_cor9> =
		  %% Line 463
		  call 'erlang':'setelement'
		      (3, Box, Y)
	      in  let <_cor11> =
		      %% Line 463
		      call 'erlang':'setelement'
			  (2, _cor9, X)
		  in  let <_cor6> =
			  %% Line 463
			  call 'erlang':'+'
			      (X, W)
		      in  let <_cor7> =
			      %% Line 463
			      call 'erlang':'+'
				  (_cor6, 16)
			  in  let <_cor4> =
				  %% Line 463
				  call 'erlang':'+'
				      (Y, H)
			      in  let <_cor5> =
				      %% Line 463
				      call 'erlang':'+'
					  (_cor4, 12)
				  in  %% Line 463
				      {{_cor11,[]},{_cor7,[_cor5|Ys]}}
	  %% Line 464
	  <{Box,Children},[Col|Cols],X,[H0|Hs0]> when 'true' ->
	      let <Hs1> =
		  %% Line 465
		  apply 'calc_row_start'/3
		      (Children, H0, Hs0)
	      in  let <_cor13> =
		      %% Line 466
		      call 'erlang':'+'
			  (X, Col)
		  in  let <StartX> =
			  %% Line 466
			  call 'erlang':'+'
			      (_cor13, 16)
		      in  %% Line 467
			  case apply 'calc_tree_sizes'/6
				   (Children, Cols, StartX, StartX, Hs1, []) of
			    <{Boxes,{W,Hs}}> when 'true' ->
				let <Y> =
				    %% Line 468
				    apply 'middle'/2
					(Boxes, H0)
				in  %% Line 469
				    ( case Box of
					( <( {'box',_cor39,_cor40,_cor41,_rec9,_cor42}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_cor19> =
						  call 'erlang':'+'
						      (Y, _rec9)
					      in  let <H> =
						      call 'erlang':'+'
							  (_cor19, 12)
						  in  let <_cor22> =
							  %% Line 470
							  call 'erlang':'setelement'
							      (3, Box, Y)
						      in  let <_cor24> =
							      %% Line 470
							      call 'erlang':'setelement'
								  (2, _cor22, X)
							  in  %% Line 470
							      {{_cor24,Boxes},{W,[H|Hs]}}
					  -| ['compiler_generated'] )
					( <_cor43> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','box'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor15})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'calc_tree_size',4}}] )
	    -| ['compiler_generated'] )
	end
'calc_tree_sizes'/6 =
    %% Line 472
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Child|Chs],Cols,X0,W0,Hs0,Acc> when 'true' ->
	      %% Line 473
	      case apply 'calc_tree_size'/4
		       (Child, Cols, X0, Hs0) of
		<{Tree,{W,Hs}}> when 'true' ->
		    let <_cor7> =
			%% Line 474
			call 'erlang':'max'
			    (W, W0)
		    in  %% Line 474
			apply 'calc_tree_sizes'/6
			    (Chs, Cols, X0, _cor7, Hs, [Tree|Acc])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 475
	  <[],_cor15,_cor16,W,Hs,Acc> when 'true' ->
	      let <_cor8> =
		  %% Line 476
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 476
		  {_cor8,{W,Hs}}
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'calc_tree_sizes',6}}] )
	    -| ['compiler_generated'] )
	end
'calc_row_start'/3 =
    %% Line 478
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Chs = [{{'box',_cor19,_cor20,_cor21,H,_cor22},_cor23}|_cor24],Start,Hs0> when 'true' ->
	      let <NChs> =
		  %% Line 479
		  call 'erlang':'length'
		      (Chs)
	      in  let <_cor7> =
		      %% Line 480
		      call 'erlang':'*'
			  (H, NChs)
		  in  let <_cor5> =
			  %% Line 480
			  call 'erlang':'-'
			      (NChs, 1)
		      in  let <_cor6> =
			      %% Line 480
			      call 'erlang':'*'
				  (12, _cor5)
			  in  let <_cor8> =
				  %% Line 480
				  call 'erlang':'+'
				      (_cor7, _cor6)
			      in  let <_cor9> =
				      %% Line 480
				      call 'erlang':'div'
					  (_cor8, 2)
				  in  let <_cor4> =
					  %% Line 480
					  call 'erlang':'div'
					      (H, 2)
				      in  let <Wanted> =
					      %% Line 480
					      call 'erlang':'-'
						  (_cor9, _cor4)
					  in  %% Line 481
					      case Hs0 of
						%% Line 482
						<[]> when 'true' ->
						    let <_cor11> =
							call 'erlang':'-'
							    (Start, Wanted)
						    in  let <_cor12> =
							    call 'erlang':'max'
								(12, _cor11)
							in  [_cor12|[]]
						%% Line 483
						<[Next|Hs]> when 'true' ->
						    let <_cor13> =
							%% Line 484
							call 'erlang':'-'
							    (Start, Wanted)
						    in  let <_cor14> =
							    %% Line 484
							    call 'erlang':'max'
								(Next, _cor13)
							in  %% Line 484
							    [_cor14|Hs]
						( <_cor15> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor15})
						  -| ['compiler_generated'] )
					      end
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'calc_row_start',3}}] )
	    -| ['compiler_generated'] )
	end
'middle'/2 =
    %% Line 487
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Y> when 'true' ->
	      Y
	  %% Line 488
	  <[{{'box',_cor6,Y,_cor7,_cor8,_cor9},_cor10}|[]],_cor11> when 'true' ->
	      Y
	  %% Line 489
	  <[{{'box',_cor12,Y0,_cor13,_cor14,_cor15},_cor16}|List],_cor17> when 'true' ->
	      %% Line 490
	      case call 'lists':'last'
		       (List) of
		<{{'box',_cor18,Y1,_cor19,_cor20,_cor21},_cor22}> when 'true' ->
		    let <_cor3> =
			%% Line 491
			call 'erlang':'+'
			    (Y0, Y1)
		    in  %% Line 491
			call 'erlang':'div'
			    (_cor3, 2)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'middle',2}}] )
	    -| ['compiler_generated'] )
	end
'box'/3 =
    %% Line 493
    fun (_cor2,_cor1,_cor0) ->
	let <Pid> =
	    %% Line 494
	    call 'gb_trees':'get'
		(_cor2, _cor1)
	in  let <_cor6> =
		%% Line 495
		case <> of
		  <>
		      when try
			    let <_cor4> =
				call 'erlang':'hd'
				    (_cor2)
			    in  call 'erlang':'=:='
				    (_cor4, 60)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      let <_cor5> =
			  call 'io_lib':'format'
			      ([126|[119]], [Pid|[]])
		      in  call 'lists':'append'
			      (_cor5)
		  %% Line 496
		  <> when 'true' ->
		      _cor2
		end
	    in  %% Line 498
		case call 'observer_perf_wx':'getTextExtent'
			 (_cor0, _cor6) of
		  <{TW,TH}> when 'true' ->
		      let <Data> =
			  %% Line 499
			  {'str',5,5,_cor6,Pid}
		      in  let <_cor14> =
			      %% Line 501
			      call 'erlang':'round'
				  (TW)
			  in  let <_cor15> =
				  %% Line 501
				  call 'erlang':'+'
				      (_cor14, 10)
			      in  let <_cor12> =
				      %% Line 501
				      call 'erlang':'round'
					  (TH)
				  in  let <_cor13> =
					  %% Line 501
					  call 'erlang':'+'
					      (_cor12, 10)
				      in  %% Line 501
					  {'box','undefined','undefined',_cor15,_cor13,Data}
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
'box_to_pid'/1 =
    %% Line 503
    fun (_cor0) ->
	case _cor0 of
	  <{'box',_cor2,_cor3,_cor4,_cor5,{'str',_cor6,_cor7,_cor8,Pid}}> when 'true' ->
	      Pid
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'box_to_pid',1}}] )
	    -| ['compiler_generated'] )
	end
'box_to_reg'/1 =
    %% Line 504
    fun (_cor0) ->
	case _cor0 of
	  <{'box',_cor2,_cor3,_cor4,_cor5,{'str',_cor6,_cor7,[60|_cor8],Pid}}> when 'true' ->
	      Pid
	  %% Line 505
	  <{'box',_cor9,_cor10,_cor11,_cor12,{'str',_cor13,_cor14,Name,_cor15}}> when 'true' ->
	      call 'erlang':'list_to_atom'
		  (Name)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'box_to_reg',1}}] )
	    -| ['compiler_generated'] )
	end
'tree_map'/2 =
    %% Line 507
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Box,Chs},Fun> when 'true' ->
	      let <_cor2> =
		  %% Line 508
		  apply Fun
		      (Box)
	      in  %% Line 508
		  apply 'tree_map'/3
		      (Chs, Fun, [_cor2|[]])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'tree_map',2}}] )
	    -| ['compiler_generated'] )
	end
'tree_map'/3 =
    %% Line 509
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Box,Chs}|Rest],Fun,Acc0> when 'true' ->
	      let <_cor3> =
		  %% Line 510
		  apply Fun
		      (Box)
	      in  let <Acc> =
		      %% Line 510
		      apply 'tree_map'/3
			  (Chs, Fun, [_cor3|Acc0])
		  in  %% Line 511
		      apply 'tree_map'/3
			  (Rest, Fun, Acc)
	  %% Line 512
	  <[],_cor8,Acc> when 'true' ->
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'tree_map',3}}] )
	    -| ['compiler_generated'] )
	end
'draw'/4 =
    %% Line 515
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_DC,'undefined',_cor18,_cor19> when 'true' ->
	      %% Line 516
	      'ok'
	  %% Line 517
	  <DC,{'app',Tree,_cor20,Links,{_X_W,_X_H}},Sel,%% Line 518
							{'paint',Font,Pen,Brush,SelBrush,LPen}> when 'true' ->
	      do  %% Line 519
		  call 'observer_perf_wx':'setPen'
		      (DC, LPen)
		  do  %% Line 520
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[Link|_cor5]> when 'true' ->
					  do  apply 'draw_xlink'/2
						  (Link, DC)
					      apply 'lc$^0'/1
						  (_cor5)
				      <[]> when 'true' ->
					  []
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Links)
			-| ['list_comprehension'] )
		      do  %% Line 521
			  call 'observer_perf_wx':'setPen'
			      (DC, Pen)
			  do  %% Line 523
			      call 'observer_perf_wx':'setBrush'
				  (DC, Brush)
			      do  %% Line 524
				  call 'observer_perf_wx':'setFont'
				      (DC, Font, {0,0,0})
				  do  %% Line 525
				      apply 'draw_tree'/3
					  (Tree, 'root', DC)
				      %% Line 526
				      case Sel of
					%% Line 527
					<'undefined'> when 'true' ->
					    'ok'
					%% Line 528
					<{{'box',X,Y,W,H,Str1},_cor21}> when 'true' ->
					    do  %% Line 529
						call 'observer_perf_wx':'setBrush'
						    (DC, SelBrush)
						let <_cor12> =
						    %% Line 530
						    call 'erlang':'-'
							(X, 1)
						in  let <_cor11> =
							%% Line 530
							call 'erlang':'-'
							    (Y, 1)
						    in  let <_cor10> =
							    %% Line 530
							    call 'erlang':'+'
								(W, 2)
							in  let <_cor9> =
								%% Line 530
								call 'erlang':'+'
								    (H, 2)
							    in  do  %% Line 530
								    call 'observer_perf_wx':'drawRoundedRectangle'
									(DC, _cor12, _cor11, _cor10, _cor9, 8.00000000000000000000e+00)
								    %% Line 531
								    apply 'draw_str'/4
									(DC, Str1, X, Y)
					( <_cor13> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor13})
					  -| ['compiler_generated'] )
				      end
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'draw',4}}] )
	    -| ['compiler_generated'] )
	end
'draw_tree'/3 =
    %% Line 534
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Box = {'box',X,Y,W,H,Str1},Chs},Parent,DC> when 'true' ->
	      do  %% Line 535
		  call 'observer_perf_wx':'drawRoundedRectangle'
		      (DC, X, Y, W, H, 8.00000000000000000000e+00)
		  do  %% Line 536
		      apply 'draw_str'/4
			  (DC, Str1, X, Y)
		      let <_cor9> =
			  %% Line 537
			  case Chs of
			    %% Line 538
			    <[]> when 'true' ->
				'ok'
			    %% Line 539
			    <[{{'box',CX0,_cor19,_cor20,_cor21,_cor22},_cor23}|_cor24]> when 'true' ->
				let <_cor3> =
				    %% Line 540
				    call 'erlang':'div'
					(H, 2)
				in  let <CY> =
					%% Line 540
					call 'erlang':'+'
					    (Y, _cor3)
				    in  let <CX> =
					    %% Line 541
					    call 'erlang':'-'
						(CX0, 8)
					in  let <_cor7> =
						%% Line 542
						call 'erlang':'+'
						    (X, W)
					    in  do  %% Line 542
						    call 'observer_perf_wx':'strokeLine'
							(DC, _cor7, CY, CX, CY)
						    %% Line 543
						    {CX,CY}
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		      in  do  %% Line 545
			      apply 'draw_link'/3
				  (Parent, Box, DC)
			      %% Line 546
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor13) ->
					    case _cor13 of
					      <[Child|_cor12]> when 'true' ->
						  let <_cor14> =
						      apply 'draw_tree'/3
							  (Child, _cor9, DC)
						  in  let <_cor15> =
							  apply 'lc$^0'/1
							      (_cor12)
						      in  ( [_cor14|_cor15]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor13> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor13})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(Chs)
				-| ['list_comprehension'] )
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'draw_tree',3}}] )
	    -| ['compiler_generated'] )
	end
'draw_link'/3 =
    %% Line 548
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{CX,CY},{'box',X,Y0,_cor9,H,_cor10},DC> when 'true' ->
	      let <_cor3> =
		  %% Line 549
		  call 'erlang':'div'
		      (H, 2)
	      in  let <Y> =
		      %% Line 549
		      call 'erlang':'+'
			  (Y0, _cor3)
		  in  %% Line 550
		      case <> of
			%% Line 551
			<>
			    when call 'erlang':'=:='
				  (Y,
				   CY) ->
			    %% Line 552
			    call 'observer_perf_wx':'strokeLine'
				(DC, CX, CY, X, CY)
			%% Line 553
			<> when 'true' ->
			    %% Line 554
			    call 'observer_perf_wx':'strokeLines'
				(DC, [{CX,CY}|[{CX,Y}|[{X,Y}|[]]]])
		      end
	  %% Line 556
	  <_cor11,_cor12,_cor13> when 'true' ->
	      'ok'
	end
'draw_xlink'/2 =
    %% Line 558
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{{'box',X0,Y0,_cor6,BH,_cor7},{'box',X1,Y1,_cor8,_cor9,_cor10}},DC>
	      when %% Line 559
		call 'erlang':'=:='
		    (X0,
		     X1) ->
	      %% Line 560
	      apply 'draw_xlink'/6
		  (X0, Y0, X1, Y1, BH, DC)
	  %% Line 561
	  <{{'box',X0,Y0,BW,BH,_cor11},{'box',X1,Y1,_cor12,_cor13,_cor14}},DC>
	      when %% Line 562
		call 'erlang':'<'
		    (X0,
		     X1) ->
	      let <_cor2> =
		  %% Line 563
		  call 'erlang':'+'
		      (X0, BW)
	      in  %% Line 563
		  apply 'draw_xlink'/6
		      (_cor2, Y0, X1, Y1, BH, DC)
	  %% Line 564
	  <{{'box',X0,Y0,_cor15,BH,_cor16},{'box',X1,Y1,BW,_cor17,_cor18}},DC>
	      when %% Line 565
		call 'erlang':'>'
		    (X0,
		     X1) ->
	      let <_cor3> =
		  %% Line 566
		  call 'erlang':'+'
		      (X1, BW)
	      in  %% Line 566
		  apply 'draw_xlink'/6
		      (_cor3, Y1, X0, Y0, BH, DC)
	  %% Line 567
	  <{_X_From,_X_To},_X_DC> when 'true' ->
	      %% Line 568
	      'ignore'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'draw_xlink',2}}] )
	    -| ['compiler_generated'] )
	end
'draw_xlink'/6 =
    %% Line 569
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Y0,Y1> =
	    %% Line 570
	    case <> of
	      <>
		  when call 'erlang':'<'
			(_cor4,
			 _cor2) ->
		  let <_cor7> =
		      call 'erlang':'+'
			  (_cor4, _cor1)
		  in  let <_cor8> =
			  call 'erlang':'-'
			      (_cor7, 6)
		      in  let <_cor6> =
			      call 'erlang':'+'
				  (_cor2, 6)
			  in  <_cor8,_cor6>
	      %% Line 571
	      <> when 'true' ->
		  let <_cor11> =
		      call 'erlang':'+'
			  (_cor4, 6)
		  in  let <_cor9> =
			  call 'erlang':'+'
			      (_cor2, _cor1)
		      in  let <_cor10> =
			      call 'erlang':'-'
				  (_cor9, 6)
			  in  <_cor11,_cor10>
	    end
	in  let <_cor14> =
		%% Line 573
		call 'erlang':'+'
		    (_cor5, 5)
	    in  let <_cor15> =
		    %% Line 573
		    call 'erlang':'-'
			(_cor3, 5)
		in  %% Line 573
		    call 'observer_perf_wx':'strokeLines'
			(_cor0, [{_cor5,Y0}|[{_cor14,Y0}|[{_cor15,Y1}|[{_cor3,Y1}|[]]]]])
'draw_str'/4 =
    %% Line 575
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <DC,{'str',Sx,Sy,Text,_cor10},X,Y> when 'true' ->
	      let <_cor5> =
		  %% Line 576
		  call 'erlang':'+'
		      (X, Sx)
	      in  let <_cor4> =
		      %% Line 576
		      call 'erlang':'+'
			  (Y, Sy)
		  in  %% Line 576
		      call 'observer_perf_wx':'drawText'
			  (DC, Text, _cor5, _cor4)
	  %% Line 577
	  <_cor11,_cor12,_cor13,_cor14> when 'true' ->
	      'ok'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('observer_app_wx')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('observer_app_wx', _cor0)
end