module 'observer_tv_table' ['code_change'/3,
			    'format'/1,
			    'handle_call'/3,
			    'handle_cast'/2,
			    'handle_event'/2,
			    'handle_info'/2,
			    'handle_sync_event'/3,
			    'init'/1,
			    'module_info'/0,
			    'module_info'/1,
			    'start_link'/2,
			    'terminate'/2]
    attributes [%% Line 19
		'type' =
		    %% Line 19
		    [{{'record','match_spec'},[{'record_field',19,{'atom',19,'name'},{'string',19,[]}}|[{'record_field',20,{'atom',20,'term'},{'nil',20}}|[{'record_field',21,{'atom',21,'str'},{'nil',21}}|[{'record_field',22,{'atom',22,'func'},{'string',22,[]}}]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','tpattern'},[{'record_field',24,{'atom',24,'m'}}|[{'record_field',24,{'atom',24,'fa'}}|[{'record_field',24,{'atom',24,'ms'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','traced_func'},[{'record_field',26,{'atom',26,'func_name'}}|[{'record_field',27,{'atom',27,'arity'}}|[{'record_field',28,{'atom',28,'match_spec'},{'record',28,'match_spec',[]}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','create_menu'},[{'record_field',31,{'atom',31,'id'}}|[{'record_field',32,{'atom',32,'text'}}|[{'record_field',33,{'atom',33,'help'},{'nil',33}}|[{'record_field',34,{'atom',34,'type'},{'atom',34,'append'}}|[{'record_field',35,{'atom',35,'check'},{'atom',35,'false'}}]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','attrs'},[{'record_field',38,{'atom',38,'even'}}|[{'record_field',38,{'atom',38,'odd'}}|[{'record_field',38,{'atom',38,'searched'}}|[{'record_field',38,{'atom',38,'deleted'}}|[{'record_field',38,{'atom',38,'changed_odd'}}|[{'record_field',38,{'atom',38,'changed_even'}}|[{'record_field',38,{'atom',38,'new_odd'}}|[{'record_field',38,{'atom',38,'new_even'}}]]]]]]]],[]}],
		%% Line 32
		'behaviour' =
		    %% Line 32
		    ['wx_object'],
		%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 19
		'type' =
		    %% Line 19
		    [{{'record','tab'},[{'record_field',19,{'atom',19,'name'}}|[{'record_field',20,{'atom',20,'id'},{'atom',20,'ignore'}}|[{'record_field',21,{'atom',21,'size'}}|[{'record_field',22,{'atom',22,'memory'},{'integer',22,0}}|[{'record_field',23,{'atom',23,'owner'}}|[{'record_field',24,{'atom',24,'reg_name'}}|[{'record_field',25,{'atom',25,'protection'},{'atom',25,'public'}}|[{'record_field',26,{'atom',26,'type'},{'atom',26,'set'}}|[{'record_field',27,{'atom',27,'keypos'},{'integer',27,1}}|[{'record_field',28,{'atom',28,'heir'},{'atom',28,'none'}}|[{'record_field',29,{'atom',29,'compressed'},{'atom',29,'false'}}|[{'record_field',30,{'atom',30,'fixed'},{'atom',30,'false'}}|[{'record_field',32,{'atom',32,'storage'}}|[{'record_field',33,{'atom',33,'index'}}]]]]]]]]]]]]]],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','state'},[{'record_field',50,{'atom',50,'parent'}}|[{'record_field',51,{'atom',51,'frame'}}|[{'record_field',52,{'atom',52,'grid'}}|[{'record_field',53,{'atom',53,'status'}}|[{'record_field',54,{'atom',54,'sizer'}}|[{'record_field',55,{'atom',55,'search'}}|[{'record_field',56,{'atom',56,'selected'}}|[{'record_field',57,{'atom',57,'node'},{'call',57,{'atom',57,'node'},[]}}|[{'record_field',58,{'atom',58,'columns'}}|[{'record_field',59,{'atom',59,'pid'}}|[{'record_field',60,{'atom',60,'source'}}|[{'record_field',61,{'atom',61,'tab'}}|[{'record_field',62,{'atom',62,'attrs'}}|[{'record_field',63,{'atom',63,'timer'},{'tuple',63,[{'atom',63,'false'}|[{'integer',63,30}]]}}]]]]]]]]]]]]]],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','opt'},[{'record_field',68,{'atom',68,'sort_key'},{'integer',68,2}}|[{'record_field',69,{'atom',69,'sort_incr'},{'atom',69,'true'}}]],[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{{'record','search'},[{'record_field',73,{'atom',73,'enable'},{'atom',73,'true'}}|[{'record_field',74,{'atom',74,'win'}}|[{'record_field',75,{'atom',75,'name'}}|[{'record_field',77,{'atom',77,'search'}}|[{'record_field',78,{'atom',78,'goto'}}|[{'record_field',79,{'atom',79,'radio'}}|[{'record_field',81,{'atom',81,'find'}}]]]]]]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','find'},[{'record_field',84,{'atom',84,'start'}}|[{'record_field',85,{'atom',85,'strlen'}}|[{'record_field',86,{'atom',86,'found'}}]]],[]}],
		%% Line 485
		'type' =
		    %% Line 485
		    [{{'record','holder'},[{'record_field',485,{'atom',485,'node'}}|[{'record_field',485,{'atom',485,'parent'}}|[{'record_field',485,{'atom',485,'pid'}}|[{'record_field',486,{'atom',486,'table'},{'call',486,{'remote',486,{'atom',486,'array'},{'atom',486,'new'}},[]}}|[{'record_field',486,{'atom',486,'n'},{'integer',486,0}}|[{'record_field',486,{'atom',486,'columns'}}|[{'record_field',487,{'atom',487,'temp'},{'nil',487}}|[{'record_field',488,{'atom',488,'search'}}|[{'record_field',489,{'atom',489,'source'}}|[{'record_field',489,{'atom',489,'tabid'}}|[{'record_field',490,{'atom',490,'sort'}}|[{'record_field',491,{'atom',491,'key'}}|[{'record_field',492,{'atom',492,'type'}}|[{'record_field',493,{'atom',493,'attrs'}}]]]]]]]]]]]]]],[]}]]
'start_link'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	%% Line 90
	call 'wx_object':'start_link'
	    ('observer_tv_table', [_cor1|[_cor0|[]]], [])
'init'/1 =
    %% Line 92
    fun (_cor0) ->
	case _cor0 of
	  <[Parent|[Opts|[]]]> when 'true' ->
	      let <Source> =
		  %% Line 93
		  call 'proplists':'get_value'
		      ('type', Opts)
	      in  let <Table> =
		      %% Line 94
		      call 'proplists':'get_value'
			  ('table', Opts)
		  in  let <Node> =
			  %% Line 95
			  call 'proplists':'get_value'
			      ('node', Opts)
		      in  %% Line 96
			  ( case Table of
			      ( <( {'tab',_rec0,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor8> =
					call 'erlang':'atom_to_list'
					    (_rec0)
				    in  let <_cor4> =
					    call 'erlang':'atom_to_list'
						(Node)
					in  let <_cor5> =
						[32|[64|[32|_cor4]]]
					    in  let <Title0> =
						    call 'erlang':'++'
							(_cor8, _cor5)
						in  let <_cor11> =
							%% Line 97
							case Source of
							  %% Line 98
							  <'ets'> when 'true' ->
							      call 'erlang':'++'
								  ([84|[86|[32|[69|[116|[115|[58|[32]]]]]]]], Title0)
							  %% Line 99
							  <'mnesia'> when 'true' ->
							      call 'erlang':'++'
								  ([84|[86|[32|[77|[110|[101|[115|[105|[97|[58|[32]]]]]]]]]]], Title0)
							  ( <_cor10> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor10})
							    -| ['compiler_generated'] )
							end
						    in  let <Frame> =
							    %% Line 101
							    call 'wxFrame':'new'
								(Parent, -1, _cor11, [{'size',{800,600}}])
							in  let <_cor15> =
								%% Line 102
								call 'code':'priv_dir'
								    ('observer')
							    in  let <IconFile> =
								    %% Line 102
								    call 'filename':'join'
									(_cor15, [101|[114|[108|[97|[110|[103|[95|[111|[98|[115|[101|[114|[118|[101|[114|[46|[112|[110|[103]]]]]]]]]]]]]]]]]]])
								in  let <Icon> =
									%% Line 103
									call 'wxIcon':'new'
									    (IconFile, [{'type',15}])
								    in  do  %% Line 104
									    call 'wxFrame':'setIcon'
										(Frame, Icon)
									    do  %% Line 105
										call 'wxIcon':'destroy'
										    (Icon)
										let <MenuBar> =
										    %% Line 106
										    call 'wxMenuBar':'new'
											()
										in  do  %% Line 107
											apply 'create_menus'/1
											    (MenuBar)
											do  %% Line 108
											    call 'wxFrame':'setMenuBar'
												(Frame, MenuBar)
											    do  %% Line 110
												call 'wxMenu':'connect'
												    (Frame, 'command_menu_selected')
												let <StatusBar> =
												    %% Line 112
												    call 'wxFrame':'createStatusBar'
													(Frame, [])
												in  %% Line 113
												    try
													let <TabId> =
													    %% Line 114
													    apply 'table_id'/1
														(Table)
													in  let <ColumnNames> =
														%% Line 115
														apply 'column_names'/3
														    (Node, Source, TabId)
													    in  let <KeyPos> =
														    %% Line 116
														    apply 'key_pos'/3
															(Node, Source, TabId)
														in  let <Attrs> =
															%% Line 118
															call 'observer_lib':'create_attrs'
															    ()
														    in  let <Self> =
															    %% Line 120
															    call 'erlang':'self'
																()
															in  let <_cor27> =
																%% Line 121
																( fun () ->
																      let <_cor26> =
																	  %% Line 123
																	  call 'erlang':'length'
																	      (ColumnNames)
																      in  %% Line 122
																	  apply 'init_table_holder'/6
																	      (Self, Table, Source, _cor26, %% Line 123
																					    Node, %% Line 123
																						  Attrs)
																  -| [{'id',{0,0,'-init/1-fun-0-'}}] )
															    in  let <Holder> =
																    %% Line 121
																    call 'erlang':'spawn_link'
																	(_cor27)
																in  let <Panel> =
																	%% Line 126
																	call 'wxPanel':'new'
																	    (Frame)
																    in  let <Sizer> =
																	    %% Line 127
																	    call 'wxBoxSizer':'new'
																		(8)
																	in  let <_cor41> =
																		%% Line 131
																		( fun (_cor37,_cor36,_cor35) ->
																		      let <_cor34> =
																			  call 'erlang':'+'
																			      (_cor35, 1)
																		      in  apply 'get_row'/3
																			      (Holder, _cor36, _cor34)
																		  -| [{'id',{0,0,'-init/1-fun-1-'}}] )
																	    in  let <_cor46> =
																		    %% Line 133
																		    ( fun (_cor43,_cor42) ->
																			  apply 'get_attr'/2
																			      (Holder, _cor42)
																		      -| [{'id',{0,0,'-init/1-fun-2-'}}] )
																		in  let <Grid> =
																			%% Line 129
																			call 'wxListCtrl':'new'
																			    (Panel, [{'style',8738}|%% Line 130
																						    [{'onGetItemText',_cor41}|%% Line 132
																									      [{'onGetItemAttr',_cor46}|%% Line 134
																													[]]]])
																		    in  do  %% Line 135
																			    call 'wxListCtrl':'connect'
																				(Grid, 'command_list_item_activated')
																			    do  %% Line 136
																				call 'wxListCtrl':'connect'
																				    (Grid, 'command_list_item_selected')
																				do  %% Line 137
																				    call 'wxListCtrl':'connect'
																					(Grid, 'command_list_col_click')
																				    do  %% Line 138
																					call 'wxListCtrl':'connect'
																					    (Grid, 'size', [{'skip','true'}])
																					do  %% Line 139
																					    call 'wxWindow':'setFocus'
																						(Grid)
																					    let <Search> =
																						%% Line 141
																						apply 'search_area'/1
																						    (Panel)
																					    in  do  %% Line 142
																						    call 'wxSizer':'add'
																							(Sizer, Grid, %% Line 143
																								      [{'flag',8432}|[{'proportion',1}|[{'border',5}]]])
																						    %% Line 144
																						    ( case Search of
																							( <( {'search',_cor86,_rec1,_cor87,_cor88,_cor89,_cor90,_cor91}
																							     -| ['compiler_generated'] )> when 'true' ->
																							      do  call 'wxSizer':'add'
																								      (Sizer, _rec1, %% Line 145
																										     [{'flag',8242}|[{'border',5}]])
																								  do  %% Line 148
																								      call 'wxWindow':'setSizer'
																									  (Panel, Sizer)
																								      do  %% Line 149
																									  call 'wxSizer':'hide'
																									      (Sizer, _rec1)
																									  let <Cols> =
																									      %% Line 151
																									      apply 'add_columns'/3
																										  (Grid, 0, ColumnNames)
																									  in  do  %% Line 152
																										  call 'wxFrame':'show'
																										      (Frame)
																										  let <_cor64> =
																										      call 'erlang':'node'
																											  ()
																										  in  let <_cor63> =
																											  %% Line 156
																											  call 'erlang':'setelement'
																											      (10, Table, KeyPos)
																										      in  %% Line 153
																											  {Panel,{'state',%% Line 155
																													  Parent,Frame,Grid,StatusBar,%% Line 154
																																      Sizer,Search,'undefined',_cor64,%% Line 155
																																				      Cols,%% Line 156
																																					   Holder,%% Line 156
																																						  Source,_cor63,%% Line 157
																																								Attrs,{'false',30}}}
																							  -| ['compiler_generated'] )
																							( <_cor92> when 'true' ->
																							      ( call ( 'erlang'
																								       -| ['compiler_generated'] ):( 'error'
																												     -| ['compiler_generated'] )
																								    (( {'badrecord','search'}
																								       -| ['compiler_generated'] ))
																								-| ['compiler_generated'] )
																							  -| ['compiler_generated'] )
																						      end
																						      -| ['compiler_generated'] )
												    of <_cor65> ->
													_cor65
												    catch <_cor68,_cor67,_cor66> ->
													case <_cor68,_cor67,_cor66> of
													  %% Line 158
													  <'throw','node_or_table_down',_cor115> when 'true' ->
													      do  %% Line 159
														  call 'wxFrame':'destroy'
														      (Frame)
														  %% Line 160
														  'stop'
													  ( <_cor68,_cor67,_cor66> when 'true' ->
														primop 'raise'
														    (_cor66, _cor67)
													    -| ['compiler_generated'] )
													end
				-| ['compiler_generated'] )
			      ( <_cor83> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','tab'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  ( <_cor69> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor69})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'add_columns'/3 =
    %% Line 163
    fun (_cor2,_cor1,_cor0) ->
	let <Li> =
	    %% Line 164
	    call 'wxListItem':'new'
		()
	in  let <AddListEntry> =
		%% Line 165
		( fun (_cor6,_cor5) ->
		      let <_cor4> =
			  %% Line 166
			  call 'observer_lib':'to_str'
			      (_cor6)
		      in  do  %% Line 166
			      call 'wxListItem':'setText'
				  (Li, _cor4)
			      do  %% Line 167
				  call 'wxListItem':'setAlign'
				      (Li, 0)
				  do  %% Line 168
				      call 'wxListCtrl':'insertColumn'
					  (_cor2, _cor5, Li)
				      do  %% Line 169
					  call 'wxListCtrl':'setColumnWidth'
					      (_cor2, _cor5, 150)
					  %% Line 170
					  call 'erlang':'+'
					      (_cor5, 1)
		  -| [{'id',{0,0,'-add_columns/3-fun-0-'}}] )
	    in  let <Cols> =
		    %% Line 172
		    call 'lists':'foldl'
			(AddListEntry, _cor1, _cor0)
		in  do  %% Line 173
			call 'wxListItem':'destroy'
			    (Li)
			%% Line 174
			Cols
'create_menus'/1 =
    %% Line 176
    fun (_cor0) ->
	let <File> =
	    %% Line 177
	    call 'wxMenu':'new'
		()
	in  do  %% Line 178
		call 'wxMenu':'append'
		    (File, 400, [84|[97|[98|[108|[101|[32|[73|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[9|[67|[116|[114|[108|[45|[73]]]]]]]]]]]]]]]]]]]]]]]])
		do  %% Line 179
		    call 'wxMenu':'append'
			(File, 5001, [67|[108|[111|[115|[101]]]]])
		    do  %% Line 180
			call 'wxMenuBar':'append'
			    (_cor0, File, [70|[105|[108|[101]]]])
			let <Edit> =
			    %% Line 181
			    call 'wxMenu':'new'
				()
			in  do  %% Line 182
				call 'wxMenu':'append'
				    (Edit, 403, [69|[100|[105|[116|[32|[79|[98|[106|[101|[99|[116]]]]]]]]]]])
				do  %% Line 183
				    call 'wxMenu':'append'
					(Edit, 404, [68|[101|[108|[101|[116|[101|[32|[79|[98|[106|[101|[99|[116|[9|[67|[116|[114|[108|[45|[68]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 184
					call 'wxMenu':'appendSeparator'
					    (Edit)
					do  %% Line 185
					    call 'wxMenu':'append'
						(Edit, 405, [83|[101|[97|[114|[99|[104|[9|[67|[116|[114|[108|[45|[83]]]]]]]]]]]]])
					    do  %% Line 186
						call 'wxMenu':'appendSeparator'
						    (Edit)
						do  %% Line 187
						    call 'wxMenu':'append'
							(Edit, 401, [82|[101|[102|[114|[101|[115|[104|[9|[67|[116|[114|[108|[45|[82]]]]]]]]]]]]]])
						    do  %% Line 188
							call 'wxMenu':'append'
							    (Edit, 402, [82|[101|[102|[114|[101|[115|[104|[32|[105|[110|[116|[101|[114|[118|[97|[108|[46|[46|[46]]]]]]]]]]]]]]]]]]])
							do  %% Line 189
							    call 'wxMenuBar':'append'
								(_cor0, Edit, [69|[100|[105|[116]]]])
							    let <Help> =
								%% Line 190
								call 'wxMenu':'new'
								    ()
							    in  do  %% Line 191
								    call 'wxMenu':'append'
									(Help, 5009, [72|[101|[108|[112]]]])
								    do  %% Line 192
									call 'wxMenuBar':'append'
									    (_cor0, Help, [72|[101|[108|[112]]]])
									%% Line 193
									'ok'
'search_area'/1 =
    %% Line 195
    fun (_cor0) ->
	let <HSz> =
	    %% Line 196
	    call 'wxBoxSizer':'new'
		(4)
	in  let <_cor3> =
		%% Line 197
		call 'wxStaticText':'new'
		    (_cor0, -1, [70|[105|[110|[100|[58]]]]])
	    in  do  %% Line 197
		    call 'wxSizer':'add'
			(HSz, _cor3, %% Line 198
				     [{'flag',2048}])
		    let <TC1> =
			%% Line 199
			call 'wxTextCtrl':'new'
			    (_cor0, 420, [{'style',1024}])
		    in  do  %% Line 200
			    call 'wxSizer':'add'
				(HSz, TC1, [{'proportion',3}|[{'flag',8192}]])
			    let <Nbtn> =
				%% Line 201
				call 'wxRadioButton':'new'
				    (_cor0, -1, [78|[101|[120|[116]]]])
			    in  do  %% Line 202
				    call 'wxRadioButton':'setValue'
					(Nbtn, 'true')
				    do  %% Line 203
					call 'wxSizer':'add'
					    (HSz, Nbtn, [{'flag',2048}])
					let <Pbtn> =
					    %% Line 204
					    call 'wxRadioButton':'new'
						(_cor0, -1, [80|[114|[101|[118|[105|[111|[117|[115]]]]]]]])
					in  do  %% Line 205
						call 'wxSizer':'add'
						    (HSz, Pbtn, [{'flag',2048}])
						let <Cbtn> =
						    %% Line 206
						    call 'wxCheckBox':'new'
							(_cor0, -1, [77|[97|[116|[99|[104|[32|[67|[97|[115|[101]]]]]]]]]])
						in  do  %% Line 207
							call 'wxSizer':'add'
							    (HSz, Cbtn, [{'flag',2048}])
							do  %% Line 208
							    call 'wxSizer':'add'
								(HSz, 15, 15, [{'proportion',1}|[{'flag',8192}]])
							    let <_cor12> =
								%% Line 209
								call 'wxStaticText':'new'
								    (_cor0, -1, [71|[111|[116|[111|[32|[69|[110|[116|[114|[121|[58]]]]]]]]]]])
							    in  do  %% Line 209
								    call 'wxSizer':'add'
									(HSz, _cor12, %% Line 210
										      [{'flag',2048}])
								    let <TC2> =
									%% Line 211
									call 'wxTextCtrl':'new'
									    (_cor0, 421, [{'style',1024}])
								    in  do  %% Line 212
									    call 'wxSizer':'add'
										(HSz, TC2, [{'proportion',0}|[{'flag',8192}]])
									    do  %% Line 213
										call 'wxTextCtrl':'connect'
										    (TC1, 'command_text_updated')
										do  %% Line 214
										    call 'wxTextCtrl':'connect'
											(TC1, 'command_text_enter')
										    do  %% Line 215
											call 'wxTextCtrl':'connect'
											    (TC1, 'kill_focus')
											do  %% Line 216
											    call 'wxTextCtrl':'connect'
												(TC2, 'command_text_enter')
											    do  %% Line 217
												call 'wxWindow':'connect'
												    (_cor0, 'command_button_clicked')
												%% Line 219
												{'search','true',HSz,'Search Area',%% Line 220
																   TC1,%% Line 220
																       TC2,%% Line 220
																	   {Nbtn,Pbtn,Cbtn},'undefined'}
'edit'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{'state',_cor7,Frame,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,Pid,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      let <Str> =
		  %% Line 223
		  apply 'get_row'/3
		      (Pid, Index, 'all_multiline')
	      in  %% Line 224
		  case call 'observer_lib':'user_term_multiline'
			   (Frame, [69|[100|[105|[116|[32|[111|[98|[106|[101|[99|[116|[58]]]]]]]]]]]], Str) of
		    %% Line 225
		    <'cancel'> when 'true' ->
			'ok'
		    %% Line 226
		    <{'ok',Term}> when 'true' ->
			call 'erlang':'!'
			    (Pid, {'edit',Index,Term})
		    %% Line 227
		    <Err = {'error',_cor19}> when 'true' ->
			let <_cor3> =
			    call 'erlang':'self'
				()
			in  call 'erlang':'!'
				(_cor3, Err)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'edit',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_event'/2 =
    %% Line 230
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx',401,_cor135,_cor136,_cor137},State = {'state',_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,Pid,_cor147,_cor148,_cor149,_cor150}> when 'true' ->
	      do  %% Line 231
		  call 'erlang':'!'
		      (Pid, 'refresh')
		  %% Line 232
		  {'noreply',State}
	  %% Line 234
	  <{'wx',_cor151,_cor152,_cor153,{'wxList','command_list_col_click',_cor154,_cor155,_cor156,Col,_cor157}},State = %% Line 235
															  {'state',_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,Pid,_cor167,_cor168,_cor169,_cor170}> when 'true' ->
	      let <_cor2> =
		  %% Line 236
		  call 'erlang':'+'
		      (Col, 1)
	      in  do  %% Line 236
		      call 'erlang':'!'
			  (Pid, {'sort',_cor2})
		      %% Line 237
		      {'noreply',State}
	  %% Line 239
	  <{'wx',_cor171,_cor172,_cor173,{'wxSize',_cor174,{W,_cor175},_cor176}},State = {'state',_cor177,_cor178,Grid,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189}> when 'true' ->
	      do  %% Line 240
		  call 'observer_lib':'set_listctrl_col_size'
		      (Grid, W)
		  %% Line 241
		  {'noreply',State}
	  %% Line 243
	  <{'wx',_cor190,_cor191,_cor192,{'wxList','command_list_item_selected',_cor193,_cor194,Index,_cor195,_cor196}},State = %% Line 244
																{'state',_cor197,_cor198,Grid,StatusBar,_cor199,_cor200,_cor201,_cor202,_cor203,Pid,_cor204,_cor205,_cor206,_cor207}> when 'true' ->
	      let <N> =
		  %% Line 245
		  call 'wxListCtrl':'getItemCount'
		      (Grid)
	      in  let <Str> =
		      %% Line 246
		      apply 'get_row'/3
			  (Pid, Index, 'all')
		  in  let <_cor5> =
			  %% Line 247
			  call 'io_lib':'format'
			      ([79|[98|[106|[101|[99|[116|[115|[58|[32|[126|[119|[58|[32|[126|[115]]]]]]]]]]]]]]], [N|[Str|[]]])
		      in  do  %% Line 247
			      call 'wxStatusBar':'setStatusText'
				  (StatusBar, _cor5)
			      let <_cor8> =
				  %% Line 248
				  call 'erlang':'setelement'
				      (8, State, Index)
			      in  %% Line 248
				  {'noreply',_cor8}
	  %% Line 250
	  <{'wx',_cor223,_cor224,_cor225,{'wxList','command_list_item_activated',_cor226,_cor227,Index,_cor228,_cor229}},%% Line 251
															 State> when 'true' ->
	      do  %% Line 252
		  apply 'edit'/2
		      (Index, State)
		  %% Line 253
		  {'noreply',State}
	  %% Line 255
	  <{'wx',403,_cor230,_cor231,_cor232},State = {'state',_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,'undefined',_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245}> when 'true' ->
	      %% Line 256
	      {'noreply',State}
	  %% Line 257
	  <{'wx',403,_cor246,_cor247,_cor248},State = {'state',_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,Index,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261}> when 'true' ->
	      do  %% Line 258
		  apply 'edit'/2
		      (Index, State)
		  %% Line 259
		  {'noreply',State}
	  %% Line 261
	  <{'wx',404,_cor262,_cor263,_cor264},State = {'state',_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,'undefined',_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277}> when 'true' ->
	      %% Line 262
	      {'noreply',State}
	  %% Line 263
	  <{'wx',404,_cor278,_cor279,_cor280},State = %% Line 264
						      {'state',_cor281,_cor282,Grid,StatusBar,_cor283,_cor284,Index,_cor285,_cor286,Pid,_cor287,_cor288,_cor289,_cor290}> when 'true' ->
	      let <Str> =
		  %% Line 265
		  apply 'get_row'/3
		      (Pid, Index, 'all')
	      in  do  %% Line 266
		      call 'erlang':'!'
			  (Pid, {'delete',Index})
		      let <_cor10> =
			  %% Line 267
			  call 'io_lib':'format'
			      ([68|[101|[108|[101|[116|[101|[100|[32|[111|[98|[106|[101|[99|[116|[58|[32|[126|[115]]]]]]]]]]]]]]]]]], [Str|[]])
		      in  do  %% Line 267
			      call 'wxStatusBar':'setStatusText'
				  (StatusBar, _cor10)
			      do  %% Line 268
				  call 'wxListCtrl':'setItemState'
				      (Grid, Index, 0, 2)
				  let <_cor13> =
				      %% Line 269
				      call 'erlang':'setelement'
					  (8, State, 'undefined')
				  in  %% Line 269
				      {'noreply',_cor13}
	  %% Line 271
	  <{'wx',5001,_cor306,_cor307,_cor308},State = {'state',_cor309,Frame,_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321}> when 'true' ->
	      do  %% Line 272
		  call 'wxFrame':'destroy'
		      (Frame)
		  %% Line 273
		  {'stop','normal',State}
	  %% Line 275
	  <Help = {'wx',5009,_cor322,_cor323,_cor324},State> when 'true' ->
	      do  %% Line 276
		  call 'erlang':'!'
		      ('observer', Help)
		  %% Line 277
		  {'noreply',State}
	  %% Line 279
	  <{'wx',421,_cor325,_cor326,{'wxCommand',_cor327,Str,_cor328,_cor329}},State = %% Line 280
											{'state',_cor330,_cor331,Grid,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342}> when 'true' ->
	      do  %% Line 281
		  try
		      let <Row0> =
			  %% Line 282
			  call 'erlang':'list_to_integer'
			      (Str)
		      in  let <Row1> =
			      %% Line 283
			      call 'erlang':'max'
				  (0, Row0)
			  in  let <_cor16> =
				  %% Line 284
				  call 'wxListCtrl':'getItemCount'
				      (Grid)
			      in  let <_cor17> =
				      %% Line 284
				      call 'erlang':'-'
					  (_cor16, 1)
				  in  let <Row> =
					  %% Line 284
					  call 'erlang':'min'
					      (_cor17, Row1)
				      in  do  %% Line 285
					      call 'wxListCtrl':'ensureVisible'
						  (Grid, Row)
					      %% Line 286
					      'ok'
		  of <_cor19> ->
		      _cor19
		  catch <_cor22,_cor21,_cor20> ->
		      %% Line 287
		      'ok'
		  %% Line 289
		  {'noreply',State}
	  %% Line 292
	  <{'wx',405,_cor346,_cor347,_cor348},State = %% Line 293
						      {'state',_cor349,_cor350,Grid,_cor351,Sz,Search,Index,_cor352,_cor353,_cor354,_cor355,_cor356,_cor357,_cor358}> when 'true' ->
	      do  %% Line 294
		  ( case <> of
		      ( <>
			    when call 'erlang':'is_integer'
				  (Index) ->
			    %% Line 295
			    call 'wxListCtrl':'setItemState'
				(Grid, Index, 0, 2)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'ok'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  %% Line 296
		  ( case Search of
		      ( <( {'search',_cor359,_rec6,_cor360,_cor361,_cor362,_cor363,_cor364}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  call 'wxSizer':'show'
				    (Sz, _rec6)
				do  %% Line 297
				    call 'wxWindow':'setFocus'
					(_cor361)
				    do  %% Line 298
					call 'wxSizer':'layout'
					    (Sz)
					%% Line 299
					{'noreply',State}
			-| ['compiler_generated'] )
		      ( <_cor365> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','search'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 300
	  <{'wx',420,_cor373,_cor374,{'wxFocus',_cor375}},State = %% Line 301
								  {'state',_cor376,_cor377,_cor378,_cor379,_cor380,Search,_cor381,_cor382,_cor383,Pid,_cor384,_cor385,_cor386,_cor387}> when 'true' ->
	      do  %% Line 302
		  call 'erlang':'!'
		      (Pid, {'mark_search_hit','false'})
		  %% Line 303
		  case Search of
		    <{'search',_cor388,_cor389,_cor390,_cor391,_cor392,_cor393,_cor394}> when 'true' ->
			let <_cor31> =
			    call 'erlang':'setelement'
				(8, Search, 'undefined')
			in  let <_cor35> =
				call 'erlang':'setelement'
				    (7, State, _cor31)
			    in  {'noreply',_cor35}
		    ( <_cor395> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','search'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 304
	  <{'wx',420,_cor411,_cor412,{'wxCommand',_cor413,[],_cor414,_cor415}},State = %% Line 305
										       {'state',_cor416,_cor417,_cor418,_cor419,_cor420,Search,_cor421,_cor422,_cor423,Pid,_cor424,_cor425,_cor426,_cor427}> when 'true' ->
	      do  %% Line 306
		  call 'erlang':'!'
		      (Pid, {'mark_search_hit','false'})
		  %% Line 307
		  case Search of
		    <{'search',_cor428,_cor429,_cor430,_cor431,_cor432,_cor433,_cor434}> when 'true' ->
			let <_cor38> =
			    call 'erlang':'setelement'
				(8, Search, 'undefined')
			in  let <_cor42> =
				call 'erlang':'setelement'
				    (7, State, _cor38)
			    in  {'noreply',_cor42}
		    ( <_cor435> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','search'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 308
	  <{'wx',420,_cor451,_cor452,{'wxCommand','command_text_enter',Str,_cor453,_cor454}},State = %% Line 309
												     {'state',_cor455,_cor456,Grid,SB,_cor457,Search = %% Line 310
																		       {'search',_cor458,_cor459,_cor460,_cor461,_cor462,{Next0,_cor463,Case0},%% Line 311
																											       Find},_cor464,_cor465,_cor466,Pid,_cor467,_cor468,_cor469,_cor470}>
	      when %% Line 312
		call 'erlang':'=/='
		    (Find,
		     'undefined') ->
	      let <_cor44> =
		  %% Line 313
		  call 'wxRadioButton':'getValue'
		      (Next0)
	      in  let <_cor43> =
		      %% Line 313
		      call 'wx_misc':'getKeyState'
			  (306)
		  in  let <Dir> =
			  %% Line 313
			  call 'erlang':'xor'
			      (_cor44, _cor43)
		      in  let <Case> =
			      %% Line 314
			      call 'wxCheckBox':'getValue'
				  (Case0)
			  in  let <_cor66> =
				  %% Line 315
				  case <> of
				    <>
					when ( try
						( case <> of
						    ( <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'is_record'
												   -| ['compiler_generated'] )
								  (Find,
								   ( 'find'
								     -| ['compiler_generated'] ),
								   ( 4
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ) ->
							  let <_cor51> =
							      ( call 'erlang':'element'
								    (4, Find)
								-| ['compiler_generated'] )
							  in  let <_cor52> =
								  ( call 'erlang':'=:='
									(_cor51, 'true')
								    -| ['compiler_generated'] )
							      in  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(_cor52, Dir)
								    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					    -| ['compiler_generated'] ) ->
					%% Line 316
					( case Find of
					    ( <( {'find',_rec14,_cor471,_cor472}
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'erlang':'+'
						      (_rec14, 1)
					      -| ['compiler_generated'] )
					    ( <_cor473> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','find'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 317
				    <>
					when ( try
						( case <> of
						    ( <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'is_record'
												   -| ['compiler_generated'] )
								  (Find,
								   ( 'find'
								     -| ['compiler_generated'] ),
								   ( 4
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ) ->
							  let <_cor61> =
							      ( call 'erlang':'element'
								    (4, Find)
								-| ['compiler_generated'] )
							  in  ( call 'erlang':'=:='
								    (_cor61, 'true')
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					    -| ['compiler_generated'] ) ->
					%% Line 318
					( case Find of
					    ( <( {'find',_rec15,_cor474,_cor475}
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'erlang':'-'
						      (_rec15, 1)
					      -| ['compiler_generated'] )
					    ( <_cor476> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','find'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 319
				    <>
					when Dir ->
					%% Line 320
					0
				    %% Line 321
				    <> when 'true' ->
					let <_cor65> =
					    %% Line 322
					    call 'wxListCtrl':'getItemCount'
						(Grid)
					in  %% Line 322
					    call 'erlang':'-'
						(_cor65, 1)
				  end
			      in  do  %% Line 324
				      call 'erlang':'!'
					  (Pid, {'mark_search_hit','false'})
				      %% Line 325
				      case apply 'search'/5
					       (Pid, Str, _cor66, Dir, Case) of
					%% Line 326
					<'false'> when 'true' ->
					    let <_cor68> =
						%% Line 327
						call 'io_lib':'format'
						    ([78|[111|[116|[32|[102|[111|[117|[110|[100|[32|[40|[114|[101|[103|[101|[120|[112|[41|[58|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]], [Str|[]])
					    in  do  %% Line 327
						    call 'wxStatusBar':'setStatusText'
							(SB, _cor68)
						    %% Line 328
						    ( case Find of
							( <( {'find',_rec16,_cor477,_cor478}
							     -| ['compiler_generated'] )> when 'true' ->
							      do  call 'erlang':'!'
								      (Pid, {'mark_search_hit',_rec16})
								  do  %% Line 329
								      call 'wxListCtrl':'refreshItem'
									  (Grid, _rec16)
								      let <_cor75> =
									  %% Line 330
									  call 'erlang':'setelement'
									      (4, Find, 'false')
								      in  let <_cor79> =
									      %% Line 330
									      call 'erlang':'setelement'
										  (8, Search, _cor75)
									  in  let <_cor83> =
										  %% Line 330
										  call 'erlang':'setelement'
										      (7, State, _cor79)
									      in  %% Line 330
										  {'noreply',_cor83}
							  -| ['compiler_generated'] )
							( <_cor479> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','find'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					%% Line 331
					<Row> when 'true' ->
					    do  %% Line 332
						call 'wxListCtrl':'ensureVisible'
						    (Grid, Row)
						do  %% Line 333
						    call 'wxListCtrl':'refreshItem'
							(Grid, Row)
						    do  %% Line 335
							call 'wxStatusBar':'setStatusText'
							    (SB, [70|[111|[117|[110|[100|[58|[32|[40|[72|[105|[116|[32|[69|[110|[116|[101|[114|[32|[102|[111|[114|[32|[110|[101|[120|[116|[44|[32|[83|[104|[105|[102|[116|[45|[69|[110|[116|[101|[114|[32|[102|[111|[114|[32|[112|[114|[101|[118|[105|[111|[117|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							let <_rec25> =
							    %% Line 336
							    {'find',Row,'undefined','true'}
							in  let <_cor88> =
								%% Line 336
								call 'erlang':'setelement'
								    (8, Search, _rec25)
							    in  let <_cor92> =
								    %% Line 336
								    call 'erlang':'setelement'
									(7, State, _cor88)
								in  %% Line 336
								    {'noreply',_cor92}
				      end
	  %% Line 338
	  <{'wx',420,_cor533,_cor534,{'wxCommand',_cor535,Str,_cor536,_cor537}},State = %% Line 339
											{'state',_cor538,_cor539,Grid,SB,_cor540,Search = %% Line 340
																	  {'search',_cor541,_cor542,_cor543,_cor544,_cor545,{Next0,_cor546,Case0},%% Line 341
																										  Find},_cor547,_cor548,_cor549,Pid,_cor550,_cor551,_cor552,_cor553}> when 'true' ->
	      %% Line 342
	      try
		  let <Dir> =
		      %% Line 343
		      call 'wxRadioButton':'getValue'
			  (Next0)
		  in  let <Case> =
			  %% Line 344
			  call 'wxCheckBox':'getValue'
			      (Case0)
		      in  let <_cor98> =
			      %% Line 345
			      case Dir of
				%% Line 346
				<'true'> when 'true' ->
				    0
				%% Line 347
				<'false'> when 'true' ->
				    let <_cor96> =
					call 'wxListCtrl':'getItemCount'
					    (Grid)
				    in  call 'erlang':'-'
					    (_cor96, 1)
				( <_cor97> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor97})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor109> =
				  %% Line 349
				  case Find of
				    %% Line 350
				    <'undefined'> when 'true' ->
					let <_cor100> =
					    %% Line 351
					    call 'erlang':'length'
						(Str)
					in  %% Line 351
					    {'find',_cor98,_cor100,'undefined'}
				    %% Line 352
				    <{'find',_cor554,Old,_cor555}>
					when try
					      let <_cor101> =
						  call 'erlang':'length'
						      (Str)
					      in  call 'erlang':'<'
						      (Old, _cor101)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_rec27> =
					    %% Line 353
					    call 'erlang':'length'
						(Str)
					in  %% Line 353
					    {'find',_cor98,_rec27,_cor555}
				    %% Line 354
				    <_cor557> when 'true' ->
					let <_rec32> =
					    %% Line 355
					    call 'erlang':'length'
						(Str)
					in  %% Line 355
					    case Find of
					      <{'find',_cor558,_cor559,_cor560}> when 'true' ->
						  call 'erlang':'setelement'
						      (3, Find, _rec32)
					      ( <_cor561> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','find'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				  end
			      in  do  %% Line 358
				      call 'erlang':'!'
					  (Pid, {'mark_search_hit','false'})
				      %% Line 359
				      ( case _cor109 of
					  ( <( {'find',_rec34,_cor562,_cor563}
					       -| ['compiler_generated'] )> when 'true' ->
						case apply 'search'/5
							 (Pid, Str, _rec34, Dir, Case) of
						  %% Line 360
						  <'false'> when 'true' ->
						      let <_cor113> =
							  %% Line 361
							  call 'io_lib':'format'
							      ([78|[111|[116|[32|[102|[111|[117|[110|[100|[32|[40|[114|[101|[103|[101|[120|[112|[41|[58|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]], [Str|[]])
						      in  do  %% Line 361
							      call 'wxStatusBar':'setStatusText'
								  (SB, _cor113)
							      %% Line 362
							      {'noreply',State}
						  %% Line 363
						  <Row> when 'true' ->
						      do  %% Line 364
							  call 'wxListCtrl':'ensureVisible'
							      (Grid, Row)
							  do  %% Line 365
							      call 'wxListCtrl':'refreshItem'
								  (Grid, Row)
							      do  %% Line 367
								  call 'wxStatusBar':'setStatusText'
								      (SB, [70|[111|[117|[110|[100|[58|[32|[40|[72|[105|[116|[32|[69|[110|[116|[101|[114|[32|[102|[111|[114|[32|[110|[101|[120|[116|[44|[32|[83|[104|[105|[102|[116|[45|[69|[110|[116|[101|[114|[32|[102|[111|[114|[32|[112|[114|[101|[118|[105|[111|[117|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								  let <_rec37> =
								      %% Line 368
								      {'find',Row,'undefined','true'}
								  in  let <_cor118> =
									  %% Line 368
									  call 'erlang':'setelement'
									      (8, Search, _rec37)
								      in  let <_cor122> =
									      %% Line 368
									      call 'erlang':'setelement'
										  (7, State, _cor118)
									  in  %% Line 368
									      {'noreply',_cor122}
						end
					    -| ['compiler_generated'] )
					  ( <_cor564> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','find'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
	      of <_cor124> ->
		  _cor124
	      catch <_cor127,_cor126,_cor125> ->
		  %% Line 370
		  {'noreply',State}
	  %% Line 373
	  <{'wx',400,_cor591,_cor592,_cor593},State = %% Line 374
						      {'state',_cor594,Frame,_cor595,_cor596,_cor597,_cor598,_cor599,Node,_cor600,_cor601,Source,Table,_cor602,_cor603}> when 'true' ->
	      do  %% Line 375
		  call 'observer_tv_wx':'display_table_info'
		      (Frame, Node, Source, Table)
		  %% Line 376
		  {'noreply',State}
	  %% Line 378
	  <{'wx',402,_cor604,_cor605,_cor606},State = %% Line 379
						      {'state',_cor607,_cor608,Grid,_cor609,_cor610,_cor611,_cor612,_cor613,_cor614,_cor615,_cor616,_cor617,_cor618,Timer0}> when 'true' ->
	      let <Timer> =
		  %% Line 380
		  call 'observer_lib':'interval_dialog'
		      (Grid, Timer0, 10, 300)
	      in  let <_cor132> =
		      %% Line 381
		      call 'erlang':'setelement'
			  (15, State, Timer)
		  in  %% Line 381
		      {'noreply',_cor132}
	  %% Line 383
	  <_X_Event,State> when 'true' ->
	      %% Line 385
	      {'noreply',State}
	end
'handle_sync_event'/3 =
    %% Line 387
    fun (_cor2,_cor1,_cor0) ->
	%% Line 389
	'ok'
'handle_call'/3 =
    %% Line 391
    fun (_cor2,_cor1,_cor0) ->
	%% Line 393
	{'noreply',_cor0}
'handle_cast'/2 =
    %% Line 395
    fun (_cor1,_cor0) ->
	%% Line 397
	{'noreply',_cor0}
'handle_info'/2 =
    %% Line 399
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'no_rows',N},State = {'state',_cor18,_cor19,Grid,StatusBar,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      do  %% Line 400
		  call 'wxListCtrl':'setItemCount'
		      (Grid, N)
		  let <_cor2> =
		      %% Line 401
		      call 'io_lib':'format'
			  ([79|[98|[106|[101|[99|[116|[115|[58|[32|[126|[119]]]]]]]]]]], [N|[]])
		  in  do  %% Line 401
			  call 'wxStatusBar':'setStatusText'
			      (StatusBar, _cor2)
			  %% Line 402
			  {'noreply',State}
	  %% Line 404
	  <{'new_cols',New},State = {'state',_cor30,_cor31,Grid,_cor32,_cor33,_cor34,_cor35,_cor36,Cols0,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
	      let <Cols> =
		  %% Line 405
		  apply 'add_columns'/3
		      (Grid, Cols0, New)
	      in  let <_cor6> =
		      %% Line 406
		      call 'erlang':'setelement'
			  (10, State, Cols)
		  in  %% Line 406
		      {'noreply',_cor6}
	  %% Line 408
	  <{'refresh',Min,_cor57},State = {'state',_cor58,_cor59,Grid,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}>
	      when call 'erlang':'=:='
		    (_cor57,
		     Min) ->
	      do  %% Line 409
		  call 'wxListCtrl':'refreshItem'
		      (Grid, Min)
		  %% Line 410
		  {'noreply',State}
	  %% Line 411
	  <{'refresh',Min,Max},State = {'state',_cor71,_cor72,Grid,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83}> when 'true' ->
	      do  %% Line 412
		  ( case <> of
		      ( <>
			    when call 'erlang':'>'
				  (Max,
				   0) ->
			    call 'wxListCtrl':'refreshItems'
				(Grid, Min, Max)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'ok'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  %% Line 413
		  {'noreply',State}
	  %% Line 415
	  <'refresh_interval',State = {'state',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,Pid,_cor93,_cor94,_cor95,_cor96}> when 'true' ->
	      do  %% Line 416
		  call 'erlang':'!'
		      (Pid, 'refresh')
		  %% Line 417
		  {'noreply',State}
	  %% Line 419
	  <{'error',Error},State = {'state',_cor97,Frame,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109}> when 'true' ->
	      let <_cor13> =
		  %% Line 421
		  try
		      do  call 'io_lib':'format'
			      ([126|[116|[115]]], [Error|[]])
			  Error
		  of <_cor9> ->
		      _cor9
		  catch <_cor12,_cor11,_cor10> ->
		      %% Line 422
		      call 'io_lib':'format'
			  ([126|[112]], [Error|[]])
	      in  let <Dlg> =
		      %% Line 424
		      call 'wxMessageDialog':'new'
			  (Frame, _cor13)
		  in  do  %% Line 425
			  call 'wxMessageDialog':'showModal'
			      (Dlg)
			  do  %% Line 426
			      call 'wxMessageDialog':'destroy'
				  (Dlg)
			      %% Line 427
			      {'noreply',State}
	  %% Line 429
	  <_X_Event,State> when 'true' ->
	      %% Line 431
	      {'noreply',State}
	end
'terminate'/2 =
    %% Line 433
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Event,{'state',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,Pid,_cor14,_cor15,Attrs,_cor16}> when 'true' ->
	      %% Line 438
	      case Attrs of
		<{'attrs',Even,Odd,S,D,Ch1,Ch2,New1,New2}> when 'true' ->
		    do  %% Line 439
			call 'wxListItemAttr':'destroy'
			    (Odd)
			do  %% Line 439
			    call 'wxListItemAttr':'destroy'
				(Even)
			    do  %% Line 440
				call 'wxListItemAttr':'destroy'
				    (D)
				do  %% Line 441
				    call 'wxListItemAttr':'destroy'
					(Ch1)
				    do  %% Line 441
					call 'wxListItemAttr':'destroy'
					    (Ch2)
					do  %% Line 442
					    call 'wxListItemAttr':'destroy'
						(New1)
					    do  %% Line 442
						call 'wxListItemAttr':'destroy'
						    (New2)
						do  %% Line 443
						    call 'wxListItemAttr':'destroy'
							(S)
						    do  %% Line 444
							call 'erlang':'unlink'
							    (Pid)
							do  %% Line 445
							    call 'erlang':'exit'
								(Pid, 'window_closed')
							    %% Line 446
							    'ok'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'terminate',2}}] )
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 448
    fun (_cor2,_cor1,_cor0) ->
	_cor0
'get_row'/3 =
    %% Line 455
    fun (_cor2,_cor1,_cor0) ->
	let <Ref> =
	    %% Line 456
	    call 'erlang':'monitor'
		('process', _cor2)
	in  let <_cor4> =
		%% Line 457
		call 'erlang':'self'
		    ()
	    in  do  %% Line 457
		    call 'erlang':'!'
			(_cor2, {'get_row',_cor4,_cor1,_cor0})
		    %% Line 458
		    receive
		      %% Line 459
		      <{'DOWN',_cor8,_cor9,_cor10,_cor11}>
			  when call 'erlang':'=:='
				(_cor8,
				 Ref) ->
			  []
		      %% Line 460
		      <{_cor12,Res}>
			  when call 'erlang':'=:='
				(_cor12,
				 _cor2) ->
			  do  %% Line 461
			      call 'erlang':'demonitor'
				  (Ref)
			      %% Line 462
			      Res
		    after 'infinity' ->
		      'true'
'get_attr'/2 =
    %% Line 465
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 466
	    call 'erlang':'monitor'
		('process', _cor1)
	in  let <_cor3> =
		%% Line 467
		call 'erlang':'self'
		    ()
	    in  do  %% Line 467
		    call 'erlang':'!'
			(_cor1, {'get_attr',_cor3,_cor0})
		    %% Line 468
		    receive
		      %% Line 469
		      <{'DOWN',_cor6,_cor7,_cor8,_cor9}>
			  when call 'erlang':'=:='
				(_cor6,
				 Ref) ->
			  call 'wx':'null'
			      ()
		      %% Line 470
		      <{_cor10,Res}>
			  when call 'erlang':'=:='
				(_cor10,
				 _cor1) ->
			  do  %% Line 471
			      call 'erlang':'demonitor'
				  (Ref)
			      %% Line 472
			      Res
		    after 'infinity' ->
		      'true'
'search'/5 =
    %% Line 475
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Ref> =
	    %% Line 476
	    call 'erlang':'monitor'
		('process', _cor4)
	in  do  %% Line 477
		call 'erlang':'!'
		    (_cor4, {'search',[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]})
		%% Line 478
		receive
		  %% Line 479
		  <{'DOWN',_cor11,_cor12,_cor13,_cor14}>
		      when call 'erlang':'=:='
			    (_cor11,
			     Ref) ->
		      []
		  %% Line 480
		  <{_cor15,Res}>
		      when call 'erlang':'=:='
			    (_cor15,
			     _cor4) ->
		      do  %% Line 481
			  call 'erlang':'demonitor'
			      (Ref)
			  %% Line 482
			  Res
		after 'infinity' ->
		  'true'
'init_table_holder'/6 =
    %% Line 496
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 497
	( case _cor4 of
	    ( <( {'tab',_cor26,_rec41,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor10> =
		      case _rec41 of
			%% Line 498
			<'ignore'> when 'true' ->
			    _cor26
			%% Line 499
			<Id> when 'true' ->
			    Id
		      end
		  in  let <_cor12> =
			  %% Line 501
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 501
			      call 'erlang':'!'
				  (_cor12, 'refresh')
			      let <_cor19> =
				  call 'array':'new'
				      ()
			      in  %% Line 502
				  apply 'table_holder'/1
				      ({'holder',_cor1,_cor5,'undefined',_cor19,0,_cor2,[],'undefined',_cor3,_cor10,%% Line 504
														    {'opt',_cor33,'true'},_cor33,_cor32,_cor0})
	      -| ['compiler_generated'] )
	    ( <_cor39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','tab'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'table_holder'/1 =
    %% Line 508
    fun (_cor0) ->
	case _cor0 of
	  <S0 = {'holder',_cor30,Parent,Pid,Table,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
	      %% Line 509
	      receive
		%% Line 510
		<{'get_attr',From,Row}> when 'true' ->
		    do  %% Line 511
			apply 'get_attr'/3
			    (From, Row, S0)
			%% Line 512
			apply 'table_holder'/1
			    (S0)
		%% Line 513
		<{'get_row',From,Row,Col}> when 'true' ->
		    do  %% Line 514
			apply 'get_row'/4
			    (From, Row, Col, Table)
			%% Line 515
			apply 'table_holder'/1
			    (S0)
		%% Line 516
		<{_cor41,Data}>
		    when call 'erlang':'=:='
			  (_cor41,
			   Pid) ->
		    let <S1> =
			%% Line 517
			apply 'handle_new_data_chunk'/2
			    (Data, S0)
		    in  %% Line 518
			apply 'table_holder'/1
			    (S1)
		%% Line 519
		<{'sort',Col}> when 'true' ->
		    let <_cor4> =
			%% Line 520
			call 'erlang':'-'
			    (_cor31, 1)
		    in  do  %% Line 520
			    call 'erlang':'!'
				(Parent, {'refresh',0,_cor4})
			    let <_cor5> =
				%% Line 521
				apply 'sort'/2
				    (Col, S0)
			    in  %% Line 521
				apply 'table_holder'/1
				    (_cor5)
		%% Line 522
		<{'search',Data}> when 'true' ->
		    let <_cor6> =
			%% Line 523
			apply 'search'/2
			    (Data, S0)
		    in  %% Line 523
			apply 'table_holder'/1
			    (_cor6)
		%% Line 524
		<{'mark_search_hit',Row}> when 'true' ->
		    do  %% Line 526
			( case <> of
			    ( <>
				  when call 'erlang':'is_integer'
					(_cor34) ->
				  call 'erlang':'!'
				      (Parent, {'refresh',_cor34,_cor34})
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'ok'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
			let <_cor14> =
			    %% Line 527
			    call 'erlang':'setelement'
				(9, S0, Row)
			in  %% Line 527
			    apply 'table_holder'/1
				(_cor14)
		%% Line 528
		<'refresh'>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    %% Line 531
		    apply 'table_holder'/1
			(S0)
		%% Line 532
		<'refresh'> when 'true' ->
		    let <_cor15> =
			%% Line 534
			call 'erlang':'self'
			    ()
		    in  let <GetTab> =
			    %% Line 533
			    call 'rpc':'call'
				(_cor30, 'observer_backend', 'get_table', %% Line 534
									  [_cor15|[_cor36|[_cor35|[]]]])
			in  let <_cor25> =
				%% Line 535
				call 'erlang':'setelement'
				    (4, S0, GetTab)
			    in  %% Line 535
				apply 'table_holder'/1
				    (_cor25)
		%% Line 536
		<{'delete',Row}> when 'true' ->
		    do  %% Line 537
			apply 'delete_row'/2
			    (Row, S0)
			%% Line 538
			apply 'table_holder'/1
			    (S0)
		%% Line 539
		<{'edit',Row,Term}> when 'true' ->
		    do  %% Line 540
			apply 'edit_row'/3
			    (Row, Term, S0)
			%% Line 541
			apply 'table_holder'/1
			    (S0)
		%% Line 542
		<What> when 'true' ->
		    do  %% Line 543
			call 'io':'format'
			    ([84|[97|[98|[108|[101|[32|[104|[111|[108|[100|[101|[114|[32|[103|[111|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [What|[]])
			let <_cor28> =
			    %% Line 544
			    call 'erlang':'-'
				(_cor31, 1)
			in  do  %% Line 544
				call 'erlang':'!'
				    (Parent, {'refresh',0,_cor28})
				%% Line 545
				apply 'table_holder'/1
				    (S0)
	      after 'infinity' ->
		'true'
	  ( <_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29})
		  -| [{'function_name',{'table_holder',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_new_data_chunk'/2 =
    %% Line 548
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Data,S0 = {'holder',_cor9,Parent,_cor10,_cor11,_cor12,Cols,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 549
	      case apply 'handle_new_data_chunk2'/2
		       (Data, S0) of
		<S1 = {'holder',_cor21,_cor22,_cor23,_cor24,N,NewCols,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
		    do  %% Line 550
			call 'erlang':'!'
			    (Parent, {'no_rows',N})
			let <_cor3> =
			    %% Line 551
			    call 'erlang':'-'
				(N, 1)
			in  do  %% Line 551
				call 'erlang':'!'
				    (Parent, {'refresh',0,_cor3})
				%% Line 552
				case <> of
				  %% Line 553
				  <>
				      when call 'erlang':'=:='
					    (NewCols,
					     Cols) ->
				      S1
				  %% Line 554
				  <> when 'true' ->
				      let <_cor4> =
					  %% Line 555
					  call 'erlang':'+'
					      (Cols, 1)
				      in  let <_cor5> =
					      %% Line 555
					      call 'lists':'seq'
						  (_cor4, NewCols)
					  in  do  %% Line 555
						  call 'erlang':'!'
						      (Parent, {'new_cols',_cor5})
						  %% Line 556
						  S1
				end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'handle_new_data_chunk',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_new_data_chunk2'/2 =
    %% Line 559
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'$end_of_table',S0 = %% Line 560
				{'holder',_cor27,_cor28,_cor29,%% Line 561
							       Old,_cor30,_cor31,%% Line 561
										 New,_cor32,_cor33,_cor34,Opt0,Key,_cor35,_cor36}> when 'true' ->
	      let <_cor2> =
		  %% Line 562
		  call 'array':'to_list'
		      (Old)
	      in  let <Merged> =
		      %% Line 562
		      apply 'merge'/3
			  (_cor2, New, Key)
		  in  %% Line 563
		      ( case Opt0 of
			  ( <( {'opt',_rec54,_cor37}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor6> =
				    call 'erlang':'setelement'
					(2, Opt0, 'undefined')
				in  case apply 'sort'/3
					     (_rec54, _cor6, Merged) of
				      <{Opt,Sorted}> when 'true' ->
					  let <SortedA> =
					      %% Line 564
					      call 'array':'from_list'
						  (Sorted)
					  in  let <_rec56> =
						  %% Line 565
						  call 'array':'size'
						      (SortedA)
					      in  let <_cor13> =
						      %% Line 565
						      call 'erlang':'setelement'
							  (12, S0, Opt)
						  in  let <_cor14> =
							  %% Line 565
							  call 'erlang':'setelement'
							      (8, _cor13, [])
						      in  let <_cor15> =
							      %% Line 565
							      call 'erlang':'setelement'
								  (6, _cor14, _rec56)
							  in  let <_cor16> =
								  %% Line 565
								  call 'erlang':'setelement'
								      (5, _cor15, SortedA)
							      in  %% Line 565
								  call 'erlang':'setelement'
								      (4, _cor16, 'undefined')
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor9})
					-| ['compiler_generated'] )
				    end
			    -| ['compiler_generated'] )
			  ( <_cor38> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','opt'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 566
	  <Data,S0 = {'holder',_cor57,_cor58,_cor59,_cor60,_cor61,Cols0,Tab0,_cor62,'ets',_cor63,_cor64,_cor65,_cor66,_cor67}> when 'true' ->
	      %% Line 567
	      case apply 'parse_ets_data'/3
		       (Data, Cols0, Tab0) of
		<{Tab,Cols}> when 'true' ->
		    let <_cor20> =
			%% Line 568
			call 'erlang':'setelement'
			    (8, S0, Tab)
		    in  %% Line 568
			call 'erlang':'setelement'
			    (7, _cor20, Cols)
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 569
	  <Data,S0 = {'holder',_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,Tab,_cor89,'mnesia',_cor90,_cor91,_cor92,_cor93,_cor94}> when 'true' ->
	      let <_rec59> =
		  %% Line 570
		  call 'erlang':'++'
		      (Data, Tab)
	      in  %% Line 570
		  call 'erlang':'setelement'
		      (8, S0, _rec59)
	  ( <_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25})
		  -| [{'function_name',{'handle_new_data_chunk2',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_ets_data'/3 =
    %% Line 572
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[Rec|[]]|Rs],C,Tab> when 'true' ->
	      let <_cor3> =
		  %% Line 573
		  call 'erlang':'tuple_size'
		      (Rec)
	      in  let <_cor4> =
		      %% Line 573
		      call 'erlang':'max'
			  (_cor3, C)
		  in  %% Line 573
		      apply 'parse_ets_data'/3
			  (Rs, _cor4, [Rec|Tab])
	  %% Line 574
	  <[Recs|Rs],C0,Tab0> when 'true' ->
	      %% Line 575
	      case apply 'parse_ets_data'/3
		       (Recs, C0, Tab0) of
		<{Tab,Cols}> when 'true' ->
		    %% Line 576
		    apply 'parse_ets_data'/3
			(Rs, Cols, Tab)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 577
	  <[],Cols,Tab> when 'true' ->
	      %% Line 578
	      {Tab,Cols}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'parse_ets_data',3}}] )
	    -| ['compiler_generated'] )
	end
'sort'/2 =
    %% Line 580
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Col,S = {'holder',_cor10,_cor11,_cor12,Table0,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,Opt0,_cor19,_cor20,_cor21}> when 'true' ->
	      let <_cor2> =
		  %% Line 581
		  call 'array':'to_list'
		      (Table0)
	      in  %% Line 581
		  case apply 'sort'/3
			   (Col, Opt0, _cor2) of
		    <{Opt,Table}> when 'true' ->
			let <_rec61> =
			    %% Line 582
			    call 'array':'from_list'
				(Table)
			in  let <_cor6> =
				%% Line 582
				call 'erlang':'setelement'
				    (12, S, Opt)
			    in  %% Line 582
				call 'erlang':'setelement'
				    (5, _cor6, _rec61)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'sort',2}}] )
	    -| ['compiler_generated'] )
	end
'sort'/3 =
    %% Line 584
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Col,Opt = {'opt',_cor20,Bool},Table>
	      when call 'erlang':'=:='
		    (_cor20,
		     Col) ->
	      let <_rec63> =
		  %% Line 585
		  call 'erlang':'not'
		      (Bool)
	      in  let <_cor7> =
		      %% Line 585
		      call 'erlang':'setelement'
			  (3, Opt, _rec63)
		  in  let <_cor3> =
			  %% Line 585
			  call 'lists':'reverse'
			      (Table)
		      in  %% Line 585
			  {_cor7,_cor3}
	  %% Line 586
	  <Col,S = {'opt',_cor24,'true'},Table> when 'true' ->
	      let <_cor11> =
		  %% Line 587
		  call 'erlang':'setelement'
		      (2, S, Col)
	      in  let <_cor8> =
		      %% Line 587
		      apply 'keysort'/2
			  (Col, Table)
		  in  %% Line 587
		      {_cor11,_cor8}
	  %% Line 588
	  <Col,S = {'opt',_cor28,'false'},Table> when 'true' ->
	      let <_cor16> =
		  %% Line 589
		  call 'erlang':'setelement'
		      (2, S, Col)
	      in  let <_cor12> =
		      %% Line 589
		      apply 'keysort'/2
			  (Col, Table)
		  in  let <_cor13> =
			  %% Line 589
			  call 'lists':'reverse'
			      (_cor12)
		      in  %% Line 589
			  {_cor16,_cor13}
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'sort',3}}] )
	    -| ['compiler_generated'] )
	end
'keysort'/2 =
    %% Line 591
    fun (_cor1,_cor0) ->
	let <Sort> =
	    %% Line 592
	    ( fun (_cor31,_cor30) ->
		  case <_cor31,_cor30> of
		    <[A0|_cor37],[B0|_cor38]> when 'true' ->
			let <_cor6> =
			    %% Line 593
			    try
				call 'erlang':'element'
				    (_cor1, A0)
			    of <_cor2> ->
				_cor2
			    catch <_cor5,_cor4,_cor3> ->
				[]
			in  let <_cor12> =
				%% Line 594
				try
				    call 'erlang':'element'
					(_cor1, B0)
				of <_cor8> ->
				    _cor8
				catch <_cor11,_cor10,_cor9> ->
				    []
			    in  %% Line 595
				case <> of
				  %% Line 596
				  <>
				      when call 'erlang':'=='
					    (_cor6,
					     _cor12) ->
				      call 'erlang':'=<'
					  (A0, B0)
				  %% Line 597
				  <> when 'true' ->
				      call 'erlang':'<'
					  (_cor6, _cor12)
				end
		    %% Line 599
		    <A0,B0>
			when let <_cor15> =
			      call 'erlang':'is_tuple'
				  (A0)
			  in  let <_cor16> =
				  call 'erlang':'is_tuple'
				      (B0)
			      in  call 'erlang':'and'
				      (_cor15, _cor16) ->
			let <_cor21> =
			    %% Line 600
			    try
				call 'erlang':'element'
				    (_cor1, A0)
			    of <_cor17> ->
				_cor17
			    catch <_cor20,_cor19,_cor18> ->
				[]
			in  let <_cor27> =
				%% Line 601
				try
				    call 'erlang':'element'
					(_cor1, B0)
				of <_cor23> ->
				    _cor23
				catch <_cor26,_cor25,_cor24> ->
				    []
			    in  %% Line 602
				case <> of
				  %% Line 603
				  <>
				      when call 'erlang':'=='
					    (_cor21,
					     _cor27) ->
				      call 'erlang':'=<'
					  (A0, B0)
				  %% Line 604
				  <> when 'true' ->
				      call 'erlang':'<'
					  (_cor21, _cor27)
				end
		    ( <_cor33,_cor32> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor33,_cor32})
			    -| [{'function_name',{'-keysort/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-keysort/2-fun-0-'}}] )
	in  %% Line 607
	    call 'lists':'sort'
		(Sort, _cor0)
'search'/2 =
    %% Line 609
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Str|[Row|[Dir0|[CaseSens|[]]]]],S = %% Line 610
						{'holder',_cor16,Parent,_cor17,Table,N,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
	      let <_cor3> =
		  %% Line 611
		  case CaseSens of
		    %% Line 612
		    <'true'> when 'true' ->
			[]
		    %% Line 613
		    <'false'> when 'true' ->
			['caseless']
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 615
		      case Dir0 of
			%% Line 616
			<'true'> when 'true' ->
			    1
			%% Line 617
			<'false'> when 'true' ->
			    -1
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor9> =
			  %% Line 619
			  case call 're':'compile'
				   (Str, _cor3) of
			    %% Line 620
			    <{'ok',Re}> when 'true' ->
				apply 're_search'/5
				    (Row, _cor6, N, Re, Table)
			    %% Line 621
			    <{'error',_cor27}> when 'true' ->
				'false'
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor11> =
			      %% Line 623
			      call 'erlang':'self'
				  ()
			  in  do  %% Line 623
				  call 'erlang':'!'
				      (Parent, {_cor11,_cor9})
				  %% Line 624
				  call 'erlang':'setelement'
				      (9, S, _cor9)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'search',2}}] )
	    -| ['compiler_generated'] )
	end
're_search'/5 =
    %% Line 626
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Row,Dir,N,Re,Table>
	      when let <_cor5> =
		    call 'erlang':'>='
			(Row, 0)
		in  let <_cor6> =
			call 'erlang':'<'
			    (Row, N)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 627
	      case call 'array':'get'
		       (Row, Table) of
		<[Term|_cor17]> when 'true' ->
		    let <Str> =
			%% Line 628
			apply 'format'/1
			    (Term)
		    in  %% Line 630
			case call 're':'run'
				 (Str, Re) of
			  %% Line 631
			  <'nomatch'> when 'true' ->
			      let <_cor10> =
				  call 'erlang':'+'
				      (Row, Dir)
			      in  apply 're_search'/5
				      (_cor10, Dir, N, Re, Table)
			  %% Line 632
			  <{'match',_cor18}> when 'true' ->
			      %% Line 633
			      Row
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor11})
			    -| ['compiler_generated'] )
			end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 635
	  <_cor19,_cor20,_cor21,_cor22,_cor23> when 'true' ->
	      %% Line 636
	      'false'
	end
'get_row'/4 =
    %% Line 638
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 639
	case call 'array':'get'
		 (_cor2, _cor0) of
	  %% Line 640
	  <[Object|_cor18]>
	      when call 'erlang':'=:='
		    (_cor1,
		     'all') ->
	      let <_cor5> =
		  %% Line 641
		  call 'erlang':'self'
		      ()
	      in  let <_cor4> =
		      %% Line 641
		      apply 'format'/1
			  (Object)
		  in  %% Line 641
		      call 'erlang':'!'
			  (_cor3, {_cor5,_cor4})
	  %% Line 642
	  <[Object|_cor19]>
	      when call 'erlang':'=:='
		    (_cor1,
		     'all_multiline') ->
	      let <_cor7> =
		  %% Line 643
		  call 'erlang':'self'
		      ()
	      in  let <_cor6> =
		      %% Line 643
		      call 'io_lib':'format'
			  ([126|[112]], [Object|[]])
		  in  %% Line 643
		      call 'erlang':'!'
			  (_cor3, {_cor7,_cor6})
	  %% Line 644
	  <[Object|_cor20]>
	      when try
		    let <_cor8> =
			call 'erlang':'tuple_size'
			    (Object)
		    in  call 'erlang':'>='
			    (_cor8, _cor1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor11> =
		  %% Line 645
		  call 'erlang':'self'
		      ()
	      in  let <_cor9> =
		      %% Line 645
		      call 'erlang':'element'
			  (_cor1, Object)
		  in  let <_cor10> =
			  %% Line 645
			  apply 'format'/1
			      (_cor9)
		      in  %% Line 645
			  call 'erlang':'!'
			      (_cor3, {_cor11,_cor10})
	  %% Line 646
	  <_cor21> when 'true' ->
	      let <_cor12> =
		  %% Line 647
		  call 'erlang':'self'
		      ()
	      in  %% Line 647
		  call 'erlang':'!'
		      (_cor3, {_cor12,[]})
	end
'get_attr'/3 =
    %% Line 650
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <From,Row,{'holder',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,Attrs}>
	      when call 'erlang':'=:='
		    (_cor30,
		     Row) ->
	      %% Line 651
	      ( case Attrs of
		  ( <( {'attrs',_cor36,_cor37,_rec68,_cor38,_cor39,_cor40,_cor41,_cor42}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    %% Line 652
			    call 'erlang':'self'
				()
			in  %% Line 652
			    call 'erlang':'!'
				(From, {_cor6,_rec68})
		    -| ['compiler_generated'] )
		  ( <_cor43> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','attrs'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 653
	  <From,Row,{'holder',_cor44,_cor45,_cor46,Table,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,Attrs}> when 'true' ->
	      let <_cor7> =
		  %% Line 654
		  call 'erlang':'rem'
		      (Row, 2)
	      in  let <Odd> =
		      %% Line 654
		      call 'erlang':'>'
			  (_cor7, 0)
		  in  let <_cor17> =
			  %% Line 655
			  case call 'array':'get'
				   (Row, Table) of
			    %% Line 656
			    <[_cor56|'deleted']> when 'true' ->
				( case Attrs of
				    ( <( {'attrs',_cor57,_cor58,_cor59,_rec69,_cor60,_cor61,_cor62,_cor63}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec69
				      -| ['compiler_generated'] )
				    ( <_cor64> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','attrs'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 657
			    <[_cor65|'changed']>
				when Odd ->
				( case Attrs of
				    ( <( {'attrs',_cor66,_cor67,_cor68,_cor69,_rec70,_cor70,_cor71,_cor72}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec70
				      -| ['compiler_generated'] )
				    ( <_cor73> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','attrs'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 658
			    <[_cor74|'changed']> when 'true' ->
				( case Attrs of
				    ( <( {'attrs',_cor75,_cor76,_cor77,_cor78,_cor79,_rec71,_cor80,_cor81}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec71
				      -| ['compiler_generated'] )
				    ( <_cor82> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','attrs'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 659
			    <[_cor83|'new']>
				when Odd ->
				( case Attrs of
				    ( <( {'attrs',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_rec72,_cor90}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec72
				      -| ['compiler_generated'] )
				    ( <_cor91> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','attrs'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 660
			    <[_cor92|'new']> when 'true' ->
				( case Attrs of
				    ( <( {'attrs',_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_rec73}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec73
				      -| ['compiler_generated'] )
				    ( <_cor100> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','attrs'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 661
			    <_cor101>
				when Odd ->
				( case Attrs of
				    ( <( {'attrs',_cor102,_rec74,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec74
				      -| ['compiler_generated'] )
				    ( <_cor109> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','attrs'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 662
			    <_cor110> when 'true' ->
				( case Attrs of
				    ( <( {'attrs',_rec75,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec75
				      -| ['compiler_generated'] )
				    ( <_cor118> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','attrs'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			  end
		      in  let <_cor19> =
			      %% Line 664
			      call 'erlang':'self'
				  ()
			  in  %% Line 664
			      call 'erlang':'!'
				  (From, {_cor19,_cor17})
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'get_attr',3}}] )
	    -| ['compiler_generated'] )
	end
'merge'/3 =
    %% Line 666
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],New,_X_Key> when 'true' ->
	      %% Line 667
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor5) ->
			    case _cor5 of
			      <[N|_cor4]> when 'true' ->
				  let <_cor6> =
				      apply 'lc$^0'/1
					  (_cor4)
				  in  ( [[N|[]]|_cor6]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor5> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor5})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(New)
		-| ['list_comprehension'] )
	  %% Line 668
	  <Old,New,Key> when 'true' ->
	      let <_cor8> =
		  %% Line 669
		  apply 'keysort'/2
		      (Key, Old)
	      in  let <_cor7> =
		      %% Line 669
		      apply 'keysort'/2
			  (Key, New)
		  in  %% Line 669
		      apply 'merge2'/3
			  (_cor8, _cor7, Key)
	end
'merge2'/3 =
    %% Line 671
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[Obj|_cor28]|Old],[_cor29|New],Key>
	      when call 'erlang':'=:='
		    (_cor29,
		     Obj) ->
	      let <_cor3> =
		  %% Line 672
		  apply 'merge2'/3
		      (Old, New, Key)
	      in  %% Line 672
		  [[Obj|[]]|_cor3]
	  %% Line 673
	  <[[A|Op]|Old],[B|New],Key>
	      when %% Line 674
		try
		    let <_cor5> =
			call 'erlang':'element'
			    (Key, A)
		    in  let <_cor4> =
			    call 'erlang':'element'
				(Key, B)
			in  call 'erlang':'=='
				(_cor5, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 675
	      case Op of
		%% Line 676
		<'deleted'> when 'true' ->
		    let <_cor6> =
			%% Line 677
			apply 'merge2'/3
			    (Old, New, Key)
		    in  %% Line 677
			[[B|'new']|_cor6]
		%% Line 678
		<_cor30> when 'true' ->
		    let <_cor7> =
			%% Line 679
			apply 'merge2'/3
			    (Old, New, Key)
		    in  %% Line 679
			[[B|'changed']|_cor7]
	      end
	  %% Line 681
	  <[[A|Op]|Old],New = [B|_cor31],Key>
	      when %% Line 682
		try
		    let <_cor10> =
			call 'erlang':'element'
			    (Key, A)
		    in  let <_cor9> =
			    call 'erlang':'element'
				(Key, B)
			in  call 'erlang':'<'
				(_cor10, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 683
	      case Op of
		%% Line 684
		<'deleted'> when 'true' ->
		    apply 'merge2'/3
			(Old, New, Key)
		%% Line 685
		<_cor32> when 'true' ->
		    let <_cor11> =
			apply 'merge2'/3
			    (Old, New, Key)
		    in  [[A|'deleted']|_cor11]
	      end
	  %% Line 687
	  <Old = [[A|_cor33]|_cor34],[B|New],Key>
	      when %% Line 688
		try
		    let <_cor14> =
			call 'erlang':'element'
			    (Key, A)
		    in  let <_cor13> =
			    call 'erlang':'element'
				(Key, B)
			in  call 'erlang':'>'
				(_cor14, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor15> =
		  %% Line 689
		  apply 'merge2'/3
		      (Old, New, Key)
	      in  %% Line 689
		  [[B|'new']|_cor15]
	  %% Line 690
	  <[],New,_X_Key> when 'true' ->
	      %% Line 691
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor18) ->
			    case _cor18 of
			      <[N|_cor17]> when 'true' ->
				  let <_cor19> =
				      apply 'lc$^0'/1
					  (_cor17)
				  in  ( [[N|'new']|_cor19]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor18> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor18})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(New)
		-| ['list_comprehension'] )
	  %% Line 692
	  <Old,[],_X_Key> when 'true' ->
	      let <_cor24> =
		  %% Line 693
		  ( fun (_cor21,_cor20) ->
			case <_cor21,_cor20> of
			  <[_X_O|'deleted'],Acc> when 'true' ->
			      Acc
			  %% Line 694
			  <[O|_cor35],Acc> when 'true' ->
			      [[O|'deleted']|Acc]
			  ( <_cor23,_cor22> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor23,_cor22})
				  -| [{'function_name',{'-merge2/3-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-merge2/3-fun-0-'}}] )
	      in  %% Line 693
		  call 'lists':'foldl'
		      (_cor24, %% Line 695
			       [], %% Line 695
				   Old)
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'merge2',3}}] )
	    -| ['compiler_generated'] )
	end
'delete_row'/2 =
    %% Line 698
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Row,S0 = {'holder',_cor7,Parent,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 699
	      case apply 'delete'/2
		       (Row, S0) of
		%% Line 700
		<'ok'> when 'true' ->
		    let <_cor2> =
			%% Line 701
			call 'erlang':'self'
			    ()
		    in  %% Line 701
			call 'erlang':'!'
			    (_cor2, 'refresh')
		%% Line 702
		<{'error',Err}> when 'true' ->
		    let <_cor3> =
			%% Line 703
			call 'erlang':'++'
			    ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[100|[101|[108|[101|[116|[101|[32|[111|[98|[106|[101|[99|[116|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]], Err)
		    in  %% Line 703
			call 'erlang':'!'
			    (Parent, {'error',_cor3})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'delete_row',2}}] )
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 707
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Row,{'holder',%% Line 708
			 Node,_cor12,_cor13,Table,_cor14,_cor15,_cor16,_cor17,%% Line 708
									      Source,Id,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 709
	      case call 'array':'get'
		       (Row, Table) of
		<[Object|_cor22]> when 'true' ->
		    %% Line 710
		    try
			do  %% Line 711
			    case Source of
			      %% Line 712
			      <'ets'> when 'true' ->
				  %% Line 713
				  case call 'rpc':'call'
					   (Node, 'ets', 'delete_object', [Id|[Object|[]]]) of
				    <'true'> when 'true' ->
					'ok'
				    ( <_cor3> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor3})
				      -| ['compiler_generated'] )
				  end
			      %% Line 714
			      <'mnesia'> when 'true' ->
				  %% Line 715
				  case call 'rpc':'call'
					   (Node, 'mnesia', 'dirty_delete_object', [Id|[Object|[]]]) of
				    <'ok'> when 'true' ->
					'ok'
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor4})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
			    %% Line 717
			    'ok'
		    of <_cor6> ->
			_cor6
		    catch <_cor9,_cor8,_cor7> ->
			%% Line 719
			{'error',[110|[111|[100|[101|[32|[111|[114|[32|[116|[97|[98|[108|[101|[32|[105|[115|[32|[110|[111|[116|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'edit_row'/3 =
    %% Line 722
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Row,Term,S0 = {'holder',_cor10,Parent,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      %% Line 723
	      case apply 'delete'/2
		       (Row, S0) of
		%% Line 724
		<'ok'> when 'true' ->
		    %% Line 725
		    case apply 'insert'/2
			     (Term, S0) of
		      %% Line 726
		      <'ok'> when 'true' ->
			  let <_cor3> =
			      call 'erlang':'self'
				  ()
			  in  call 'erlang':'!'
				  (_cor3, 'refresh')
		      %% Line 727
		      <Err> when 'true' ->
			  call 'erlang':'!'
			      (Parent, {'error',Err})
		    end
		%% Line 729
		<{'error',Err}> when 'true' ->
		    let <_cor5> =
			%% Line 730
			call 'erlang':'++'
			    ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[101|[100|[105|[116|[32|[111|[98|[106|[101|[99|[116|[58|[32]]]]]]]]]]]]]]]]]]]]]]], Err)
		    in  %% Line 730
			call 'erlang':'!'
			    (Parent, {'error',_cor5})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'edit_row',3}}] )
	    -| ['compiler_generated'] )
	end
'insert'/2 =
    %% Line 733
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Object,{'holder',Node,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Source,Id,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 734
	      try
		  do  %% Line 735
		      case Source of
			%% Line 736
			<'ets'> when 'true' ->
			    %% Line 737
			    case call 'rpc':'call'
				     (Node, 'ets', 'insert', [Id|[Object|[]]]) of
			      <'true'> when 'true' ->
				  'ok'
			      ( <_cor2> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor2})
				-| ['compiler_generated'] )
			    end
			%% Line 738
			<'mnesia'> when 'true' ->
			    %% Line 739
			    case call 'rpc':'call'
				     (Node, 'mnesia', 'dirty_write', [Id|[Object|[]]]) of
			      <'ok'> when 'true' ->
				  'ok'
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor3})
				-| ['compiler_generated'] )
			    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
		      %% Line 741
		      'ok'
	      of <_cor5> ->
		  _cor5
	      catch <_cor8,_cor7,_cor6> ->
		  %% Line 743
		  {'error',[110|[111|[100|[101|[32|[111|[114|[32|[116|[97|[98|[108|[101|[32|[105|[115|[32|[110|[111|[116|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'insert',2}}] )
	    -| ['compiler_generated'] )
	end
'column_names'/3 =
    %% Line 748
    fun (_cor2,_cor1,_cor0) ->
	%% Line 749
	case _cor1 of
	  %% Line 750
	  <'ets'> when 'true' ->
	      [1|[2]]
	  %% Line 751
	  <'mnesia'> when 'true' ->
	      let <Attrs> =
		  %% Line 752
		  call 'rpc':'call'
		      (_cor2, 'mnesia', 'table_info', [_cor0|['attributes']])
	      in  do  %% Line 753
		      ( case <> of
			  ( <>
				when call 'erlang':'is_list'
				      (Attrs) ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call 'erlang':'throw'
				    ('node_or_table_down')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      %% Line 754
		      [[82|[101|[99|[111|[114|[100|[32|[78|[97|[109|[101]]]]]]]]]]]|Attrs]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'table_id'/1 =
    %% Line 757
    fun (_cor0) ->
	case _cor0 of
	  <{'tab',Name,'ignore',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      Name
	  %% Line 758
	  <{'tab',_cor14,Id,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
	      Id
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'table_id',1}}] )
	    -| ['compiler_generated'] )
	end
'key_pos'/3 =
    %% Line 760
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor9,'mnesia',_cor10> when 'true' ->
	      2
	  %% Line 761
	  <Node,'ets',TabId> when 'true' ->
	      let <KeyPos> =
		  %% Line 762
		  call 'rpc':'call'
		      (Node, 'ets', 'info', [TabId|['keypos']])
	      in  do  %% Line 763
		      ( case <> of
			  ( <>
				when call 'erlang':'is_integer'
				      (KeyPos) ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call 'erlang':'throw'
				    ('node_or_table_down')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      %% Line 764
		      KeyPos
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'key_pos',3}}] )
	    -| ['compiler_generated'] )
	end
'format'/1 =
    %% Line 768
    fun (_cor0) ->
	case _cor0 of
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 769
		  call 'erlang':'tuple_size'
		      (Tuple)
	      in  let <_cor2> =
		      %% Line 769
		      apply 'format_tuple'/3
			  (Tuple, 1, _cor1)
		  in  %% Line 769
		      [123|_cor2]
	  %% Line 770
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 771
	      apply 'format_list'/1
		  (List)
	  %% Line 772
	  <Bin>
	      when try
		    let <_cor3> =
			call 'erlang':'is_binary'
			    (_cor0)
		    in  let <_cor4> =
			    call 'erlang':'byte_size'
				(_cor0)
			in  let <_cor5> =
				call 'erlang':'>'
				    (_cor4, 100)
			    in  call 'erlang':'and'
				    (_cor3, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 773
		  call 'erlang':'byte_size'
		      (Bin)
	      in  %% Line 773
		  call 'io_lib':'format'
		      ([60|[60|[35|[66|[105|[110|[58|[126|[119|[62|[62]]]]]]]]]]], [_cor6|[]])
	  %% Line 774
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 775
	      try
		  let <_cor7> =
		      %% Line 776
		      call 'unicode':'characters_to_list'
			  (Bin)
		  in  %% Line 776
		      case apply 'printable_list'/1
			       (_cor7) of
			<'true'> when 'true' ->
			    %% Line 777
			    call 'io_lib':'format'
				([60|[60|[34|[126|[116|[115|[34|[62|[62]]]]]]]]], [Bin|[]])
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	      of <_cor9> ->
		  _cor9
	      catch <_cor12,_cor11,_cor10> ->
		  %% Line 779
		  call 'io_lib':'format'
		      ([126|[119]], [Bin|[]])
	  %% Line 781
	  <Float>
	      when call 'erlang':'is_float'
		    (_cor0) ->
	      %% Line 782
	      call 'io_lib':'format'
		  ([126|[46|[51|[103]]]], [Float|[]])
	  %% Line 783
	  <Term> when 'true' ->
	      %% Line 784
	      call 'io_lib':'format'
		  ([126|[119]], [Term|[]])
	end
'format_tuple'/3 =
    %% Line 786
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tuple,I,Max>
	      when call 'erlang':'<'
		    (I,
		     Max) ->
	      let <_cor3> =
		  %% Line 787
		  call 'erlang':'element'
		      (I, Tuple)
	      in  let <_cor4> =
		      %% Line 787
		      apply 'format'/1
			  (_cor3)
		  in  let <_cor5> =
			  %% Line 787
			  call 'erlang':'+'
			      (I, 1)
		      in  let <_cor6> =
			      %% Line 787
			      apply 'format_tuple'/3
				  (Tuple, _cor5, Max)
			  in  %% Line 787
			      [_cor4|[44|_cor6]]
	  %% Line 788
	  <Tuple,Max,_cor12>
	      when call 'erlang':'=:='
		    (_cor12,
		     Max) ->
	      let <_cor7> =
		  %% Line 789
		  call 'erlang':'element'
		      (Max, Tuple)
	      in  let <_cor8> =
		      %% Line 789
		      apply 'format'/1
			  (_cor7)
		  in  %% Line 789
		      [_cor8|[125]]
	  %% Line 790
	  <_X_Tuple,1,0> when 'true' ->
	      %% Line 791
	      [125]
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'format_tuple',3}}] )
	    -| ['compiler_generated'] )
	end
'format_list'/1 =
    %% Line 793
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      [91|[93]]
	  %% Line 794
	  <List> when 'true' ->
	      %% Line 795
	      case apply 'printable_list'/1
		       (List) of
		%% Line 796
		<'true'> when 'true' ->
		    let <_cor1> =
			apply 'map_printable_list'/1
			    (List)
		    in  call 'io_lib':'format'
			    ([34|[126|[116|[115|[34]]]]], [_cor1|[]])
		%% Line 797
		<'false'> when 'true' ->
		    let <_cor2> =
			apply 'make_list'/1
			    (List)
		    in  [91|_cor2]
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'make_list'/1 =
    %% Line 800
    fun (_cor0) ->
	case _cor0 of
	  <[Last|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 801
		  apply 'format'/1
		      (Last)
	      in  %% Line 801
		  [_cor1|[93]]
	  %% Line 802
	  <[Head|Tail]>
	      when call 'erlang':'is_list'
		    (Tail) ->
	      let <_cor2> =
		  %% Line 803
		  apply 'format'/1
		      (Head)
	      in  let <_cor3> =
		      %% Line 803
		      apply 'make_list'/1
			  (Tail)
		  in  %% Line 803
		      [_cor2|[44|_cor3]]
	  %% Line 804
	  <[Head|Tail]> when 'true' ->
	      let <_cor4> =
		  %% Line 805
		  apply 'format'/1
		      (Head)
	      in  let <_cor5> =
		      %% Line 805
		      apply 'format'/1
			  (Tail)
		  in  %% Line 805
		      [_cor4|[124|[_cor5|[93]]]]
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'make_list',1}}] )
	    -| ['compiler_generated'] )
	end
'map_printable_list'/1 =
    %% Line 807
    fun (_cor0) ->
	case _cor0 of
	  <[10|Cs]> when 'true' ->
	      let <_cor1> =
		  %% Line 808
		  apply 'map_printable_list'/1
		      (Cs)
	      in  %% Line 808
		  [92|[110|_cor1]]
	  %% Line 809
	  <[13|Cs]> when 'true' ->
	      let <_cor2> =
		  %% Line 810
		  apply 'map_printable_list'/1
		      (Cs)
	      in  %% Line 810
		  [92|[114|_cor2]]
	  %% Line 811
	  <[9|Cs]> when 'true' ->
	      let <_cor3> =
		  %% Line 812
		  apply 'map_printable_list'/1
		      (Cs)
	      in  %% Line 812
		  [92|[116|_cor3]]
	  %% Line 813
	  <[11|Cs]> when 'true' ->
	      let <_cor4> =
		  %% Line 814
		  apply 'map_printable_list'/1
		      (Cs)
	      in  %% Line 814
		  [92|[118|_cor4]]
	  %% Line 815
	  <[8|Cs]> when 'true' ->
	      let <_cor5> =
		  %% Line 816
		  apply 'map_printable_list'/1
		      (Cs)
	      in  %% Line 816
		  [92|[98|_cor5]]
	  %% Line 817
	  <[12|Cs]> when 'true' ->
	      let <_cor6> =
		  %% Line 818
		  apply 'map_printable_list'/1
		      (Cs)
	      in  %% Line 818
		  [92|[102|_cor6]]
	  %% Line 819
	  <[27|Cs]> when 'true' ->
	      let <_cor7> =
		  %% Line 820
		  apply 'map_printable_list'/1
		      (Cs)
	      in  %% Line 820
		  [92|[101|_cor7]]
	  %% Line 821
	  <[]> when 'true' ->
	      []
	  %% Line 822
	  <[C|Cs]> when 'true' ->
	      let <_cor8> =
		  %% Line 823
		  apply 'map_printable_list'/1
		      (Cs)
	      in  %% Line 823
		  [C|_cor8]
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'map_printable_list',1}}] )
	    -| ['compiler_generated'] )
	end
'printable_list'/1 =
    %% Line 829
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(C, 32)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 830
	      apply 'printable_list'/1
		  (Cs)
	  %% Line 831
	  <[10|Cs]> when 'true' ->
	      %% Line 832
	      apply 'printable_list'/1
		  (Cs)
	  %% Line 833
	  <[13|Cs]> when 'true' ->
	      %% Line 834
	      apply 'printable_list'/1
		  (Cs)
	  %% Line 835
	  <[9|Cs]> when 'true' ->
	      %% Line 836
	      apply 'printable_list'/1
		  (Cs)
	  %% Line 837
	  <[11|Cs]> when 'true' ->
	      %% Line 838
	      apply 'printable_list'/1
		  (Cs)
	  %% Line 839
	  <[8|Cs]> when 'true' ->
	      %% Line 840
	      apply 'printable_list'/1
		  (Cs)
	  %% Line 841
	  <[12|Cs]> when 'true' ->
	      %% Line 842
	      apply 'printable_list'/1
		  (Cs)
	  %% Line 843
	  <[27|Cs]> when 'true' ->
	      %% Line 844
	      apply 'printable_list'/1
		  (Cs)
	  %% Line 845
	  <[]> when 'true' ->
	      'true'
	  %% Line 846
	  <_X_Other> when 'true' ->
	      'false'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('observer_tv_table')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('observer_tv_table', _cor0)
end