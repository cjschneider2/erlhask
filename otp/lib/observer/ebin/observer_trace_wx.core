module 'observer_trace_wx' ['add_processes'/2,
			    'code_change'/3,
			    'handle_call'/3,
			    'handle_cast'/2,
			    'handle_event'/2,
			    'handle_info'/2,
			    'init'/1,
			    'module_info'/0,
			    'module_info'/1,
			    'start_link'/2,
			    'terminate'/2]
    attributes [%% Line 25
		'behaviour' =
		    %% Line 25
		    ['wx_object'],
		%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 19
		'type' =
		    %% Line 19
		    [{{'record','match_spec'},[{'record_field',19,{'atom',19,'name'},{'string',19,[]}}|[{'record_field',20,{'atom',20,'term'},{'nil',20}}|[{'record_field',21,{'atom',21,'str'},{'nil',21}}|[{'record_field',22,{'atom',22,'func'},{'string',22,[]}}]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','tpattern'},[{'record_field',24,{'atom',24,'m'}}|[{'record_field',24,{'atom',24,'fa'}}|[{'record_field',24,{'atom',24,'ms'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','traced_func'},[{'record_field',26,{'atom',26,'func_name'}}|[{'record_field',27,{'atom',27,'arity'}}|[{'record_field',28,{'atom',28,'match_spec'},{'record',28,'match_spec',[]}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','create_menu'},[{'record_field',31,{'atom',31,'id'}}|[{'record_field',32,{'atom',32,'text'}}|[{'record_field',33,{'atom',33,'help'},{'nil',33}}|[{'record_field',34,{'atom',34,'type'},{'atom',34,'append'}}|[{'record_field',35,{'atom',35,'check'},{'atom',35,'false'}}]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','attrs'},[{'record_field',38,{'atom',38,'even'}}|[{'record_field',38,{'atom',38,'odd'}}|[{'record_field',38,{'atom',38,'searched'}}|[{'record_field',38,{'atom',38,'deleted'}}|[{'record_field',38,{'atom',38,'changed_odd'}}|[{'record_field',38,{'atom',38,'changed_even'}}|[{'record_field',38,{'atom',38,'new_odd'}}|[{'record_field',38,{'atom',38,'new_even'}}]]]]]]]],[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','state'},[{'record_field',58,{'atom',58,'parent'}}|[{'record_field',59,{'atom',59,'panel'}}|[{'record_field',60,{'atom',60,'n_view'}}|[{'record_field',60,{'atom',60,'p_view'}}|[{'record_field',60,{'atom',60,'m_view'}}|[{'record_field',60,{'atom',60,'f_view'}}|[{'record_field',61,{'atom',61,'logwin'}}|[{'record_field',62,{'atom',62,'nodes'},{'nil',62}}|[{'record_field',63,{'atom',63,'toggle_button'}}|[{'record_field',64,{'atom',64,'tpids'},{'nil',64}}|[{'record_field',65,{'atom',65,'def_trace_opts'},{'nil',65}}|[{'record_field',66,{'atom',66,'output'},{'nil',66}}|[{'record_field',67,{'atom',67,'tpatterns'},{'call',67,{'remote',67,{'atom',67,'dict'},{'atom',67,'new'}},[]}}|[{'record_field',68,{'atom',68,'match_specs'},{'nil',68}}]]]]]]]]]]]]]],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','tpid'},[{'record_field',70,{'atom',70,'pid'}}|[{'record_field',70,{'atom',70,'opts'}}]],[]}]]
'start_link'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	%% Line 73
	call 'wx_object':'start_link'
	    ('observer_trace_wx', [_cor1|[_cor0|[]]], [])
'add_processes'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tracer,Pids>
	      when call 'erlang':'is_list'
		    (Pids) ->
	      %% Line 76
	      call 'wx_object':'cast'
		  (Tracer, {'add_processes',Pids})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'add_processes',2}}] )
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 80
    fun (_cor0) ->
	case _cor0 of
	  <[Notebook|[ParentPid|[]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 81
		  ( fun () ->
			apply 'create_window'/2
			    (Notebook, ParentPid)
		    -| [{'id',{0,0,'-init/1-fun-0-'}}] )
	      in  %% Line 81
		  call 'wx':'batch'
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'create_window'/2 =
    %% Line 83
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 85
	    call 'wxWindow':'getClientSize'
		(_cor1)
	in  let <Panel> =
		%% Line 85
		call 'wxPanel':'new'
		    (_cor1, [{'size',_cor2}|[]])
	    in  let <Sizer> =
		    %% Line 86
		    call 'wxBoxSizer':'new'
			(8)
		in  let <_cor5> =
			%% Line 87
			call 'wxWindow':'getClientSize'
			    (Panel)
		    in  let <Splitter> =
			    %% Line 87
			    call 'wxSplitterWindow':'new'
				(Panel, [{'size',_cor5}|%% Line 88
							[{'style',384}]])
			in  %% Line 89
			    case apply 'create_process_view'/1
				     (Splitter) of
			      <{NodeProcView,NodeView,ProcessView}> when 'true' ->
				  %% Line 90
				  case apply 'create_matchspec_view'/1
					   (Splitter) of
				    <{MatchSpecView,ModView,FuncView}> when 'true' ->
					do  %% Line 91
					    call 'wxSplitterWindow':'setSashGravity'
						(Splitter, 5.00000000000000000000e-01)
					    do  %% Line 92
						call 'wxSplitterWindow':'setMinimumPaneSize'
						    (Splitter, 50)
						do  %% Line 93
						    call 'wxSplitterWindow':'splitHorizontally'
							(Splitter, NodeProcView, MatchSpecView)
						    do  %% Line 94
							call 'wxSizer':'add'
							    (Sizer, Splitter, [{'flag',8432}|[{'border',5}|[{'proportion',1}]]])
							let <Buttons> =
							    %% Line 96
							    call 'wxBoxSizer':'new'
								(4)
							in  let <ToggleButton> =
								%% Line 97
								call 'wxToggleButton':'new'
								    (Panel, 307, [83|[116|[97|[114|[116|[32|[84|[114|[97|[99|[101]]]]]]]]]]], [])
							    in  do  %% Line 98
								    call 'wxSizer':'add'
									(Buttons, ToggleButton, [{'flag',2048}])
								    do  %% Line 99
									call 'wxSizer':'addSpacer'
									    (Buttons, 15)
									let <_cor17> =
									    %% Line 100
									    call 'wxButton':'new'
										(Panel, 331, [{'label',[65|[100|[100|[32|[78|[111|[100|[101|[115]]]]]]]]]}])
									in  do  %% Line 100
										call 'wxSizer':'add'
										    (Buttons, _cor17)
										let <_cor18> =
										    %% Line 101
										    call 'wxButton':'new'
											(Panel, 308, [{'label',[65|[100|[100|[32|[39|[110|[101|[119|[39|[32|[80|[114|[111|[99|[101|[115|[115]]]]]]]]]]]]]]]]]}])
										in  do  %% Line 101
											call 'wxSizer':'add'
											    (Buttons, _cor18)
											let <_cor19> =
											    %% Line 102
											    call 'wxButton':'new'
												(Panel, 309, [{'label',[65|[100|[100|[32|[84|[114|[97|[99|[101|[32|[80|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]]]}])
											in  do  %% Line 102
												call 'wxSizer':'add'
												    (Buttons, _cor19)
												do  %% Line 103
												    call 'wxMenu':'connect'
													(Panel, 'command_togglebutton_clicked', [{'skip','true'}])
												    do  %% Line 104
													call 'wxMenu':'connect'
													    (Panel, 'command_button_clicked', [{'skip','true'}])
													do  %% Line 105
													    call 'wxSizer':'add'
														(Sizer, Buttons, [{'flag',176}|[{'border',5}|[{'proportion',0}]]])
													    do  %% Line 107
														call 'wxWindow':'setSizer'
														    (Panel, Sizer)
														let <_cor23> =
														    call 'dict':'new'
															()
														in  let <_cor22> =
															%% Line 111
															apply 'default_matchspecs'/0
															    ()
														    in  %% Line 108
															{Panel,{'state',_cor0,Panel,%% Line 109
																		    NodeView,%% Line 109
																			     ProcessView,%% Line 109
																					 ModView,%% Line 109
																						 FuncView,'undefined',[],%% Line 110
																									 ToggleButton,[],[],[],_cor23,_cor22}}
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor10})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor9})
				-| ['compiler_generated'] )
			    end
'default_matchspecs'/0 =
    %% Line 113
    fun () ->
	%% Line 118
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[{Name,Term,FunStr}|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'make_ms'/3
				    (Name, Term, FunStr)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  ([{[82|[101|[116|[117|[114|[110|[32|[84|[114|[97|[99|[101]]]]]]]]]]]],[{'_',[],[{'return_trace'}]}],[102|[117|[110|[40|[95|[41|[32|[45|[62|[32|[114|[101|[116|[117|[114|[110|[95|[116|[114|[97|[99|[101|[40|[41|[32|[101|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[69|[120|[99|[101|[112|[116|[105|[111|[110|[32|[84|[114|[97|[99|[101]]]]]]]]]]]]]]],[{'_',[],[{'exception_trace'}]}],[102|[117|[110|[40|[95|[41|[32|[45|[62|[32|[101|[120|[99|[101|[112|[116|[105|[111|[110|[95|[116|[114|[97|[99|[101|[40|[41|[32|[101|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[77|[101|[115|[115|[97|[103|[101|[32|[67|[97|[108|[108|[101|[114]]]]]]]]]]]]]],[{'_',[],[{'message',{'caller'}}]}],[102|[117|[110|[40|[95|[41|[32|[45|[62|[32|[109|[101|[115|[115|[97|[103|[101|[40|[99|[97|[108|[108|[101|[114|[40|[41|[41|[32|[101|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{[77|[101|[115|[115|[97|[103|[101|[32|[68|[117|[109|[112]]]]]]]]]]]],[{'_',[],[{'message',{'process_dump'}}]}],[102|[117|[110|[40|[95|[41|[32|[45|[62|[32|[109|[101|[115|[115|[97|[103|[101|[40|[112|[114|[111|[99|[101|[115|[115|[95|[100|[117|[109|[112|[40|[41|[41|[32|[101|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]])
	  -| ['list_comprehension'] )
'create_process_view'/1 =
    %% Line 120
    fun (_cor0) ->
	let <Panel> =
	    %% Line 121
	    call 'wxPanel':'new'
		(_cor0)
	in  let <MainSz> =
		%% Line 122
		call 'wxBoxSizer':'new'
		    (4)
	    in  let <Splitter> =
		    %% Line 124
		    call 'wxSplitterWindow':'new'
			(Panel, [{'style',384}])
		in  let <Nodes> =
			%% Line 125
			call 'wxListCtrl':'new'
			    (Splitter, [{'winid',330}|[{'style',34}]])
		    in  let <Procs> =
			    %% Line 126
			    call 'wxListCtrl':'new'
				(Splitter, [{'winid',340}|[{'style',34}]])
			in  let <Li> =
				%% Line 127
				call 'wxListItem':'new'
				    ()
			    in  do  %% Line 128
				    call 'wxListItem':'setText'
					(Li, [78|[111|[100|[101|[115]]]]])
				    do  %% Line 129
					call 'wxListCtrl':'insertColumn'
					    (Nodes, 0, Li)
					let <AddProc> =
					    %% Line 131
					    ( fun (_cor11,_cor10) ->
						  case <_cor11,_cor10> of
						    <{Name,Align,DefSize},Col> when 'true' ->
							do  %% Line 132
							    call 'wxListItem':'setText'
								(Li, Name)
							    do  %% Line 133
								call 'wxListItem':'setAlign'
								    (Li, Align)
								do  %% Line 134
								    call 'wxListCtrl':'insertColumn'
									(Procs, Col, Li)
								    do  %% Line 135
									call 'wxListCtrl':'setColumnWidth'
									    (Procs, Col, DefSize)
									%% Line 136
									call 'erlang':'+'
									    (Col, 1)
						    ( <_cor13,_cor12> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor13,_cor12})
							    -| [{'function_name',{'-create_process_view/1-fun-0-',2}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-create_process_view/1-fun-0-'}}] )
					in  do  %% Line 140
						call 'lists':'foldl'
						    (AddProc, 0, [{[80|[114|[111|[99|[101|[115|[115|[32|[73|[100]]]]]]]]]],2,120}|[{[84|[114|[97|[99|[101|[32|[79|[112|[116|[105|[111|[110|[115]]]]]]]]]]]]],0,300}]])
						do  %% Line 141
						    call 'wxListItem':'destroy'
							(Li)
						    do  %% Line 143
							call 'wxSplitterWindow':'setSashGravity'
							    (Splitter, 0.00000000000000000000e+00)
							do  %% Line 144
							    call 'wxSplitterWindow':'setMinimumPaneSize'
								(Splitter, 50)
							    do  %% Line 145
								call 'wxSplitterWindow':'splitVertically'
								    (Splitter, Nodes, Procs, [{'sashPosition',155}])
								do  %% Line 146
								    call 'wxSizer':'add'
									(MainSz, Splitter, [{'flag',8192}|[{'proportion',1}]])
								    do  %% Line 148
									call 'wxListCtrl':'connect'
									    (Procs, 'command_list_item_right_click')
									do  %% Line 149
									    call 'wxListCtrl':'connect'
										(Nodes, 'command_list_item_right_click')
									    do  %% Line 150
										call 'wxListCtrl':'connect'
										    (Procs, 'size', [{'skip','true'}])
										do  %% Line 151
										    call 'wxListCtrl':'connect'
											(Nodes, 'size', [{'skip','true'}])
										    do  %% Line 153
											call 'wxPanel':'setSizer'
											    (Panel, MainSz)
											do  %% Line 154
											    call 'wxWindow':'setFocus'
												(Procs)
											    %% Line 155
											    {Panel,Nodes,Procs}
'create_matchspec_view'/1 =
    %% Line 157
    fun (_cor0) ->
	let <Panel> =
	    %% Line 158
	    call 'wxPanel':'new'
		(_cor0)
	in  let <MainSz> =
		%% Line 159
		call 'wxBoxSizer':'new'
		    (4)
	    in  let <Splitter> =
		    %% Line 161
		    call 'wxSplitterWindow':'new'
			(Panel, [{'style',384}])
		in  let <Modules> =
			%% Line 162
			call 'wxListCtrl':'new'
			    (Splitter, [{'winid',350}|[{'style',34}]])
		    in  let <Funcs> =
			    %% Line 163
			    call 'wxListCtrl':'new'
				(Splitter, [{'winid',360}|[{'style',34}]])
			in  let <Li> =
				%% Line 164
				call 'wxListItem':'new'
				    ()
			    in  do  %% Line 166
				    call 'wxListItem':'setText'
					(Li, [77|[111|[100|[117|[108|[101|[115]]]]]]])
				    do  %% Line 167
					call 'wxListCtrl':'insertColumn'
					    (Modules, 0, Li)
					do  %% Line 168
					    call 'wxListItem':'setText'
						(Li, [70|[117|[110|[99|[116|[105|[111|[110|[115]]]]]]]]])
					    do  %% Line 169
						call 'wxListCtrl':'insertColumn'
						    (Funcs, 0, Li)
						do  %% Line 170
						    call 'wxListCtrl':'setColumnWidth'
							(Funcs, 0, 150)
						    do  %% Line 171
							call 'wxListItem':'setText'
							    (Li, [77|[97|[116|[99|[104|[32|[83|[112|[101|[99]]]]]]]]]])
							do  %% Line 172
							    call 'wxListCtrl':'insertColumn'
								(Funcs, 1, Li)
							    do  %% Line 173
								call 'wxListCtrl':'setColumnWidth'
								    (Funcs, 1, 300)
								do  %% Line 174
								    call 'wxListItem':'destroy'
									(Li)
								    do  %% Line 176
									call 'wxSplitterWindow':'setSashGravity'
									    (Splitter, 0.00000000000000000000e+00)
									do  %% Line 177
									    call 'wxSplitterWindow':'setMinimumPaneSize'
										(Splitter, 50)
									    do  %% Line 178
										call 'wxSplitterWindow':'splitVertically'
										    (Splitter, Modules, Funcs, [{'sashPosition',155}])
										do  %% Line 179
										    call 'wxSizer':'add'
											(MainSz, Splitter, [{'flag',8192}|[{'proportion',1}]])
										    do  %% Line 181
											call 'wxListCtrl':'connect'
											    (Modules, 'size', [{'skip','true'}])
											do  %% Line 182
											    call 'wxListCtrl':'connect'
												(Funcs, 'size', [{'skip','true'}])
											    do  %% Line 183
												call 'wxListCtrl':'connect'
												    (Modules, 'command_list_item_selected')
												do  %% Line 184
												    call 'wxListCtrl':'connect'
													(Funcs, 'command_list_item_right_click')
												    do  %% Line 185
													call 'wxPanel':'setSizer'
													    (Panel, MainSz)
													%% Line 186
													{Panel,Modules,Funcs}
'create_menues'/1 =
    %% Line 188
    fun (_cor0) ->
	%% Line 197
	call 'observer_wx':'create_menus'
	    (_cor0, [{[70|[105|[108|[101]]]],[{'create_menu',306,[76|[111|[97|[100|[32|[115|[101|[116|[116|[105|[110|[103|[115]]]]]]]]]]]]],[],'append','false'}|[{'create_menu',305,[83|[97|[118|[101|[32|[115|[101|[116|[116|[105|[110|[103|[115]]]]]]]]]]]]],[],'append','false'}]]}|[{[79|[112|[116|[105|[111|[110|[115]]]]]]],[{'create_menu',310,[79|[117|[116|[112|[117|[116]]]]]],[],'append','false'}|[{'create_menu',311,[77|[97|[116|[99|[104|[32|[83|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]],[],'append','false'}|[{'create_menu',312,[68|[101|[102|[97|[117|[108|[116|[32|[80|[114|[111|[99|[101|[115|[115|[32|[79|[112|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]],[],'append','false'}]]]}]])
'handle_event'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx',_cor180,Obj,_cor181,{'wxSize',_cor182,{W,_cor183},_cor184}},State> when 'true' ->
	      let <_cor2> =
		  %% Line 202
		  call 'wx':'getObjectType'
		      (Obj)
	      in  do  %% Line 202
		      case <> of
			%% Line 203
			<>
			    when call 'erlang':'=:='
				  (_cor2,
				   'wxListCtrl') ->
			    call 'observer_lib':'set_listctrl_col_size'
				(Obj, W)
			%% Line 204
			<> when 'true' ->
			    'ok'
		      end
		      %% Line 206
		      {'noreply',State}
	  %% Line 208
	  <{'wx',308,_cor185,_cor186,_cor187},State = {'state',_cor188,Parent,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,TraceOpts,_cor197,_cor198,_cor199}> when 'true' ->
	      %% Line 209
	      try
		  let <Opts> =
		      %% Line 210
		      call 'observer_traceoptions_wx':'process_trace'
			  (Parent, TraceOpts)
		  in  let <Process> = {%% Line 211
			   'tpid',%% Line 211
				  'new',%% Line 211
					Opts}
		      in  let <_cor8> =
			      %% Line 212
			      call 'erlang':'setelement'
				  (12, State, Opts)
			  in  let <_cor9> =
				  %% Line 212
				  apply 'do_add_processes'/2
				      ([Process|[]], _cor8)
			      in  %% Line 212
				  {'noreply',_cor9}
	      of <_cor10> ->
		  _cor10
	      catch <_cor13,_cor12,_cor11> ->
		  case <_cor13,_cor12,_cor11> of
		    %% Line 213
		    <'throw','cancel',_cor215> when 'true' ->
			{'noreply',State}
		    ( <_cor13,_cor12,_cor11> when 'true' ->
			  primop 'raise'
			      (_cor11, _cor12)
		      -| ['compiler_generated'] )
		  end
	  %% Line 216
	  <{'wx',309,_cor216,_cor217,_cor218},State = %% Line 217
						      {'state',_cor219,Parent,_cor220,_cor221,_cor222,_cor223,_cor224,Nodes,_cor225,_cor226,_cor227,_cor228,_cor229,Ms}> when 'true' ->
	      let <_cor15> =
		  %% Line 218
		  case Nodes of
		    %% Line 219
		    <[N|_cor230]> when 'true' ->
			N
		    %% Line 220
		    <[]> when 'true' ->
			call 'erlang':'node'
			    ()
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor17> =
		      %% Line 222
		      call 'erlang':'self'
			  ()
		  in  %% Line 222
		      case call 'observer_traceoptions_wx':'trace_pattern'
			       (_cor17, Parent, _cor15, Ms) of
			%% Line 223
			<'cancel'> when 'true' ->
			    %% Line 224
			    {'noreply',State}
			%% Line 225
			<Patterns> when 'true' ->
			    let <_cor18> =
				%% Line 226
				apply 'do_add_patterns'/2
				    (Patterns, State)
			    in  %% Line 226
				{'noreply',_cor18}
		      end
	  %% Line 229
	  <{'wx',350,_cor231,_cor232,{'wxList','command_list_item_selected',_cor233,_cor234,Row,_cor235,_cor236}},State = %% Line 230
															  {'state',_cor237,_cor238,_cor239,_cor240,Mview,Fview,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,TPs,_cor247}> when 'true' ->
	      let <_cor20> =
		  %% Line 231
		  call 'wxListCtrl':'getItemText'
		      (Mview, Row)
	      in  let <Module> =
		      %% Line 231
		      call 'erlang':'list_to_atom'
			  (_cor20)
		  in  let <_cor22> =
			  %% Line 232
			  call 'dict':'fetch'
			      (Module, TPs)
		      in  do  %% Line 232
			      apply 'update_functions_view'/2
				  (_cor22, Fview)
			      %% Line 233
			      {'noreply',State}
	  %% Line 235
	  <{'wx',_cor248,_cor249,_cor250,{'wxCommand','command_togglebutton_clicked',_cor251,1,_cor252}},State = %% Line 236
														 {'state',_cor253,Panel,_cor254,_cor255,_cor256,_cor257,_cor258,%% Line 237
																						Nodes,%% Line 240
																						      ToggleBtn,%% Line 238
																								TProcs,_cor259,%% Line 241
																									       Opts,%% Line 239
																										    TPs0,_cor260}> when 'true' ->
	      %% Line 243
	      try
		  let <TPs> =
		      %% Line 244
		      call 'dict':'to_list'
			  (TPs0)
		  in  do  %% Line 245
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (TProcs,
					   []) ->
				    call 'erlang':'throw'
					({'error',[78|[111|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[32|[116|[114|[97|[99|[101|[100]]]]]]]]]]]]]]]]]]]})
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'ok'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  do  %% Line 246
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (Nodes,
					       []) ->
					call 'erlang':'throw'
					    ({'error',[78|[111|[32|[110|[111|[100|[101|[115|[32|[116|[114|[97|[99|[101|[100]]]]]]]]]]]]]]]})
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					'ok'
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			      let <HaveCallTrace> =
				  %% Line 247
				  ( fun (_cor28) ->
					case _cor28 of
					  <{'tpid',_cor261,Os}> when 'true' ->
					      call 'lists':'member'
						  ('functions', Os)
					  ( <_cor29> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor29})
						  -| [{'function_name',{'-handle_event/2-fun-0-',1}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-handle_event/2-fun-0-'}}] )
			      in  do  %% Line 249
				      ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (TPs,
						       []) ->
						( case call 'lists':'any'
							   (HaveCallTrace, TProcs) of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 250
							  call 'observer_wx':'create_txt_dialog'
							      (Panel, [67|[97|[108|[108|[32|[116|[114|[97|[99|[101|[32|[97|[99|[116|[105|[118|[101|[100|[32|[98|[117|[116|[32|[110|[111|[32|[116|[114|[97|[99|[101|[32|[112|[97|[116|[116|[101|[114|[110|[115|[32|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [87|[97|[114|[110|[105|[110|[103]]]]]]], 256)
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'ok'
						      -| ['compiler_generated'] )
						    ( <_cor33> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor33}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'ok'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      %% Line 252
				      case apply 'ttb_output_args'/2
					       (Panel, Opts) of
					<{TTB,LogWin}> when 'true' ->
					    %% Line 253
					    case call 'ttb':'tracer'
						     (Nodes, TTB) of
					      <{'ok',_cor262}> when 'true' ->
						  do  %% Line 254
						      apply 'setup_ttb'/2
							  (TPs, TProcs)
						      do  %% Line 255
							  call 'wxToggleButton':'setLabel'
							      (ToggleBtn, [83|[116|[111|[112|[32|[84|[114|[97|[99|[101]]]]]]]]]])
							  let <_cor40> =
							      %% Line 256
							      call 'erlang':'setelement'
								  (8, State, LogWin)
							  in  %% Line 256
							      {'noreply',_cor40}
					      ( <_cor37> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor37})
						-| ['compiler_generated'] )
					    end
					( <_cor36> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor36})
					  -| ['compiler_generated'] )
				      end
	      of <_cor41> ->
		  _cor41
	      catch <_cor44,_cor43,_cor42> ->
		  case <_cor44,_cor43,_cor42> of
		    %% Line 257
		    <'throw',{'error',Msg},_cor278> when 'true' ->
			do  %% Line 258
			    call 'observer_wx':'create_txt_dialog'
				(Panel, Msg, [69|[114|[114|[111|[114]]]]], 512)
			    do  %% Line 259
				call 'wxToggleButton':'setValue'
				    (ToggleBtn, 'false')
				%% Line 260
				{'noreply',State}
		    ( <_cor44,_cor43,_cor42> when 'true' ->
			  primop 'raise'
			      (_cor42, _cor43)
		      -| ['compiler_generated'] )
		  end
	  %% Line 263
	  <{'wx',_cor279,_cor280,_cor281,{'wxCommand','command_togglebutton_clicked',_cor282,0,_cor283}},State = %% Line 264
														 {'state',_cor284,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290,_cor291,ToggleBtn,_cor292,_cor293,_cor294,_cor295,_cor296}> when 'true' ->
	      do  %% Line 266
		  call 'ttb':'stop'
		      ('nofetch')
		  do  %% Line 267
		      call 'wxToggleButton':'setLabel'
			  (ToggleBtn, [83|[116|[97|[114|[116|[32|[84|[114|[97|[99|[101]]]]]]]]]]])
		      do  %% Line 268
			  call 'wxToggleButton':'setValue'
			      (ToggleBtn, 'false')
			  let <_cor47> =
			      %% Line 269
			      call 'erlang':'setelement'
				  (8, State, 'false')
			  in  %% Line 269
			      {'noreply',_cor47}
	  %% Line 271
	  <{'wx',Id,LogWin,_cor312,Ev},State = %% Line 272
					       {'state',_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,Latest,_cor319,ToggleBtn,_cor320,_cor321,_cor322,_cor323,_cor324}>
	      when let <_cor48> =
		    %% Line 273
		    call 'erlang':'=:='
			(Id, 370)
		in  let <_cor49> =
			%% Line 273
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'is_record'
							       -| ['compiler_generated'] )
			      (Ev, 'wxClose', 2)
			  -| ['compiler_generated'] )
		    in  %% Line 273
			call 'erlang':'or'
			    (_cor48, _cor49) ->
	      %% Line 274
	      case LogWin of
		%% Line 275
		<_cor325>
		    when call 'erlang':'=:='
			  (LogWin,
			   Latest) ->
		    do  %% Line 277
			call 'ttb':'stop'
			    ('nofetch')
			do  %% Line 278
			    call 'wxToggleButton':'setLabel'
				(ToggleBtn, [83|[116|[97|[114|[116|[32|[84|[114|[97|[99|[101]]]]]]]]]]])
			    do  %% Line 279
				call 'wxToggleButton':'setValue'
				    (ToggleBtn, 'false')
				let <_cor52> =
				    %% Line 280
				    call 'erlang':'setelement'
					(8, State, 'false')
				in  %% Line 280
				    {'noreply',_cor52}
		%% Line 281
		<_cor341> when 'true' ->
		    %% Line 282
		    {'noreply',State}
	      end
	  %% Line 285
	  <{'wx',322,_cor342,TCtrl,_cor343},State> when 'true' ->
	      do  %% Line 286
		  call 'wxTextCtrl':'clear'
		      (TCtrl)
		  %% Line 287
		  {'noreply',State}
	  %% Line 289
	  <{'wx',321,_cor344,TCtrl,_cor345},State = {'state',_cor346,Panel,_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355,_cor356,_cor357,_cor358}> when 'true' ->
	      let <Dialog> =
		  %% Line 290
		  call 'wxFileDialog':'new'
		      (Panel, [{'style',6}])
	      in  do  %% Line 291
		      case call 'wxFileDialog':'showModal'
			       (Dialog) of
			%% Line 292
			<5100> when 'true' ->
			    let <Path> =
				%% Line 293
				call 'wxFileDialog':'getPath'
				    (Dialog)
			    in  do  %% Line 294
				    call 'wxDialog':'destroy'
					(Dialog)
				    %% Line 295
				    call 'wxTextCtrl':'saveFile'
					(TCtrl, [{'file',Path}|[]])
			%% Line 296
			<_cor359> when 'true' ->
			    do  %% Line 297
				call 'wxDialog':'destroy'
				    (Dialog)
				'ok'
		      end
		      %% Line 300
		      {'noreply',State}
	  %% Line 302
	  <{'wx',305,_cor360,_cor361,_cor362},State = %% Line 303
						      {'state',_cor363,Panel,_cor364,_cor365,_cor366,_cor367,_cor368,_cor369,_cor370,_cor371,%% Line 304
																	     TraceOpts,%% Line 307
																		       Output,%% Line 306
																			      TracePatterns,%% Line 305
																					    MatchSpecs}> when 'true' ->
	      let <Dialog> =
		  %% Line 309
		  call 'wxFileDialog':'new'
		      (Panel, [{'style',6}])
	      in  do  %% Line 310
		      case call 'wxFileDialog':'showModal'
			       (Dialog) of
			%% Line 311
			<5100> when 'true' ->
			    let <Path> =
				%% Line 312
				call 'wxFileDialog':'getPath'
				    (Dialog)
			    in  let <_cor61> =
				    %% Line 315
				    call 'dict':'to_list'
					(TracePatterns)
				in  %% Line 313
				    apply 'write_file'/6
					(Panel, Path, %% Line 314
						      TraceOpts, %% Line 314
								 MatchSpecs, %% Line 314
									     Output, _cor61)
			%% Line 317
			<_cor372> when 'true' ->
			    'ok'
		      end
		      do  %% Line 320
			  call 'wxDialog':'destroy'
			      (Dialog)
			  %% Line 321
			  {'noreply',State}
	  %% Line 323
	  <{'wx',306,_cor373,_cor374,_cor375},State = {'state',_cor376,Panel,_cor377,_cor378,_cor379,_cor380,_cor381,_cor382,_cor383,_cor384,_cor385,_cor386,_cor387,_cor388}> when 'true' ->
	      let <Dialog> =
		  %% Line 324
		  call 'wxFileDialog':'new'
		      (Panel, [{'style',16}])
	      in  let <_cor66> =
		      %% Line 325
		      case call 'wxFileDialog':'showModal'
			       (Dialog) of
			%% Line 326
			<5100> when 'true' ->
			    let <Path> =
				%% Line 327
				call 'wxFileDialog':'getPath'
				    (Dialog)
			    in  %% Line 328
				apply 'read_settings'/2
				    (Path, State)
			%% Line 329
			<_cor389> when 'true' ->
			    %% Line 330
			    State
		      end
		  in  do  %% Line 332
			  call 'wxDialog':'destroy'
			      (Dialog)
			  %% Line 333
			  {'noreply',_cor66}
	  %% Line 335
	  <{'wx',Type,_cor390,_cor391,{'wxList','command_list_item_right_click',_cor392,_cor393,_cor394,_cor395,_cor396}},State = %% Line 336
																  {'state',_cor397,Panel,_cor398,_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405,_cor406,_cor407,_cor408,_cor409}> when 'true' ->
	      let <_cor69> =
		  %% Line 337
		  case Type of
		    %% Line 338
		    <340> when 'true' ->
			%% Line 339
			[{341,[69|[100|[105|[116|[32|[112|[114|[111|[99|[101|[115|[115|[32|[111|[112|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]}|[{342,[82|[101|[109|[111|[118|[101|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115]]]]]]]]]]]]]]]]}]]
		    %% Line 341
		    <360> when 'true' ->
			%% Line 342
			[{361,[69|[100|[105|[116|[32|[109|[97|[116|[99|[104|[115|[112|[101|[99|[115]]]]]]]]]]]]]]]}|[{362,[82|[101|[109|[111|[118|[101|[32|[116|[114|[97|[99|[101|[32|[112|[97|[116|[116|[101|[114|[110|[115]]]]]]]]]]]]]]]]]]]]]}]]
		    %% Line 344
		    <330> when 'true' ->
			%% Line 345
			[{331,[84|[114|[97|[99|[101|[32|[111|[116|[104|[101|[114|[32|[110|[111|[100|[101|[115]]]]]]]]]]]]]]]]]}|[{332,[82|[101|[109|[111|[118|[101|[32|[110|[111|[100|[101|[115]]]]]]]]]]]]}]]
		    ( <_cor68> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor68})
		      -| ['compiler_generated'] )
		  end
	      in  let <Menu> =
		      %% Line 348
		      call 'wxMenu':'new'
			  ()
		  in  do  %% Line 349
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor74) ->
					case _cor74 of
					  <[{Id,Str}|_cor73]> when 'true' ->
					      do  call 'wxMenu':'append'
						      (Menu, Id, Str)
						  apply 'lc$^0'/1
						      (_cor73)
					  ( <[_cor72|_cor73]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor73)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor74> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor74})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor69)
			    -| ['list_comprehension'] )
			  do  %% Line 350
			      call 'wxWindow':'popupMenu'
				  (Panel, Menu)
			      do  %% Line 351
				  call 'wxMenu':'destroy'
				      (Menu)
				  %% Line 352
				  {'noreply',State}
	  %% Line 354
	  <{'wx',341,_cor410,_cor411,_cor412},State = {'state',_cor413,Panel,_cor414,Ps,_cor415,_cor416,_cor417,_cor418,_cor419,Tpids,_cor420,_cor421,_cor422,_cor423}> when 'true' ->
	      %% Line 355
	      try
		  %% Line 356
		  case apply 'get_selected_items'/2
			   (Ps, Tpids) of
		    <Selected = [{'tpid',_cor424,DefOpts}|_cor425]> when 'true' ->
			let <Opts> =
			    %% Line 357
			    call 'observer_traceoptions_wx':'process_trace'
				(Panel, DefOpts)
			in  let <_cor86> =
				%% Line 358
				( letrec
				      'lc$^1'/1 =
					  fun (_cor81) ->
					      case _cor81 of
						<[Tpid|_cor80]> when 'true' ->
						    case Tpid of
						      <{'tpid',_cor426,_cor427}> when 'true' ->
							  let <_cor84> =
							      call 'erlang':'setelement'
								  (3, Tpid, Opts)
							  in  let <_cor85> =
								  apply 'lc$^1'/1
								      (_cor80)
							      in  ( [_cor84|_cor85]
								    -| ['compiler_generated'] )
						      ( <_cor428> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','tpid'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						<[]> when 'true' ->
						    []
						( <_cor81> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor81})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (Selected)
				  -| ['list_comprehension'] )
			    in  let <_cor90> =
				    %% Line 359
				    call 'erlang':'setelement'
					(12, State, Opts)
				in  let <_cor91> =
					%% Line 359
					apply 'do_add_processes'/2
					    (_cor86, _cor90)
				    in  %% Line 359
					{'noreply',_cor91}
		    ( <_cor77> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor77})
		      -| ['compiler_generated'] )
		  end
	      of <_cor92> ->
		  _cor92
	      catch <_cor95,_cor94,_cor93> ->
		  %% Line 361
		  {'noreply',State}
	  %% Line 364
	  <{'wx',342,_cor447,_cor448,_cor449},State = {'state',_cor450,_cor451,_cor452,LCtrl,_cor453,_cor454,_cor455,_cor456,_cor457,Tpids,_cor458,_cor459,_cor460,_cor461}> when 'true' ->
	      let <Selected> =
		  %% Line 365
		  apply 'get_selected_items'/2
		      (LCtrl, Tpids)
	      in  let <Pids> =
		      %% Line 366
		      call 'erlang':'--'
			  (Tpids, Selected)
		  in  do  %% Line 367
			  apply 'update_process_view'/2
			      (Pids, LCtrl)
			  let <_cor100> =
			      %% Line 368
			      call 'erlang':'setelement'
				  (11, State, Pids)
			  in  %% Line 368
			      {'noreply',_cor100}
	  %% Line 370
	  <{'wx',312,_cor477,_cor478,_cor479},State = {'state',_cor480,Panel,_cor481,_cor482,_cor483,_cor484,_cor485,_cor486,_cor487,_cor488,PO,_cor489,_cor490,_cor491}> when 'true' ->
	      %% Line 371
	      try
		  let <Opts> =
		      %% Line 372
		      call 'observer_traceoptions_wx':'process_trace'
			  (Panel, PO)
		  in  let <_cor104> =
			  %% Line 373
			  call 'erlang':'setelement'
			      (12, State, Opts)
		      in  %% Line 373
			  {'noreply',_cor104}
	      of <_cor105> ->
		  _cor105
	      catch <_cor108,_cor107,_cor106> ->
		  %% Line 375
		  {'noreply',State}
	  %% Line 378
	  <{'wx',311,_cor510,_cor511,_cor512},State = {'state',_cor513,Panel,_cor514,_cor515,_cor516,_cor517,_cor518,_cor519,_cor520,_cor521,_cor522,_cor523,_cor524,Ms}> when 'true' ->
	      do  %% Line 379
		  try
		      let <_cor109> =
			  %% Line 380
			  call 'erlang':'self'
			      ()
		      in  %% Line 380
			  call 'observer_traceoptions_wx':'select_matchspec'
			      (_cor109, Panel, Ms)
		  of <_cor110> ->
		      _cor110
		  catch <_cor113,_cor112,_cor111> ->
		      %% Line 382
		      'cancel'
		  %% Line 384
		  {'noreply',State}
	  %% Line 386
	  <{'wx',361,_cor528,_cor529,_cor530},State = {'state',_cor531,Panel,_cor532,_cor533,%% Line 387
											     Mview,%% Line 387
												   LCtrl,_cor534,_cor535,_cor536,_cor537,_cor538,_cor539,TPs,%% Line 388
																			     Mss}> when 'true' ->
	      %% Line 390
	      try
		  let <_cor114> =
		      %% Line 391
		      call 'dict':'fetch_keys'
			  (TPs)
		  in  let <_cor115> =
			  %% Line 391
			  call 'lists':'sort'
			      (_cor114)
		      in  %% Line 391
			  case apply 'get_selected_items'/2
				   (Mview, _cor115) of
			    <[Module|[]]> when 'true' ->
				let <_cor117> =
				    %% Line 392
				    call 'dict':'fetch'
					(Module, TPs)
				in  let <Selected> =
					%% Line 392
					apply 'get_selected_items'/2
					    (LCtrl, _cor117)
				    in  let <_cor119> =
					    %% Line 393
					    call 'erlang':'self'
						()
					in  let <Ms> =
						%% Line 393
						call 'observer_traceoptions_wx':'select_matchspec'
						    (_cor119, Panel, Mss)
					    in  let <_cor128> =
						    %% Line 394
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor123) ->
								  case _cor123 of
								    <[TP|_cor122]> when 'true' ->
									case TP of
									  <{'tpattern',_cor540,_cor541,_cor542}> when 'true' ->
									      let <_cor126> =
										  call 'erlang':'setelement'
										      (4, TP, Ms)
									      in  let <_cor127> =
										      apply 'lc$^2'/1
											  (_cor122)
										  in  ( [_cor126|_cor127]
											-| ['compiler_generated'] )
									  ( <_cor543> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','tpattern'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
								    <[]> when 'true' ->
									[]
								    ( <_cor123> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor123})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^2'/1
							      (Selected)
						      -| ['list_comprehension'] )
						in  let <_cor130> =
							%% Line 395
							apply 'do_add_patterns'/2
							    ({Module,_cor128}, State)
						    in  %% Line 395
							{'noreply',_cor130}
			    ( <_cor116> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor116})
			      -| ['compiler_generated'] )
			  end
	      of <_cor131> ->
		  _cor131
	      catch <_cor134,_cor133,_cor132> ->
		  %% Line 397
		  {'noreply',State}
	  %% Line 400
	  <{'wx',362,_cor547,_cor548,_cor549},State = {'state',_cor550,_cor551,_cor552,_cor553,Mview,LCtrl,_cor554,_cor555,_cor556,_cor557,_cor558,_cor559,TPs0,_cor560}> when 'true' ->
	      let <_cor135> =
		  %% Line 401
		  call 'dict':'fetch_keys'
		      (TPs0)
	      in  let <_cor136> =
		      %% Line 401
		      call 'lists':'sort'
			  (_cor135)
		  in  %% Line 401
		      case apply 'get_selected_items'/2
			       (Mview, _cor136) of
			%% Line 402
			<[]> when 'true' ->
			    {'noreply',State}
			%% Line 403
			<[Module|[]]> when 'true' ->
			    let <FMs0> =
				%% Line 404
				call 'dict':'fetch'
				    (Module, TPs0)
			    in  let <Selected> =
				    %% Line 405
				    apply 'get_selected_items'/2
					(LCtrl, FMs0)
				in  let <FMs> =
					%% Line 406
					call 'erlang':'--'
					    (FMs0, Selected)
				    in  do  %% Line 407
					    apply 'update_functions_view'/2
						(FMs, LCtrl)
					    let <_cor144> =
						%% Line 408
						case FMs of
						  %% Line 409
						  <[]> when 'true' ->
						      let <New> =
							  %% Line 410
							  call 'dict':'erase'
							      (Module, TPs0)
						      in  let <_cor141> =
							      %% Line 411
							      call 'dict':'fetch_keys'
								  (New)
							  in  let <_cor142> =
								  %% Line 411
								  call 'lists':'sort'
								      (_cor141)
							      in  do  %% Line 411
								      apply 'update_modules_view'/3
									  (_cor142, Module, Mview)
								      %% Line 412
								      New
						  %% Line 413
						  <_cor561> when 'true' ->
						      %% Line 414
						      call 'dict':'store'
							  (Module, FMs, TPs0)
						end
					    in  let <_cor148> =
						    %% Line 416
						    call 'erlang':'setelement'
							(14, State, _cor144)
						in  %% Line 416
						    {'noreply',_cor148}
			( <_cor149> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor149})
			  -| ['compiler_generated'] )
		      end
	  %% Line 419
	  <{'wx',310,_cor577,_cor578,_cor579},State = {'state',_cor580,Panel,_cor581,_cor582,_cor583,_cor584,_cor585,_cor586,_cor587,_cor588,_cor589,Out0,_cor590,_cor591}> when 'true' ->
	      %% Line 420
	      try
		  let <Out> =
		      %% Line 421
		      call 'observer_traceoptions_wx':'output'
			  (Panel, Out0)
		  in  let <_cor153> =
			  %% Line 422
			  call 'erlang':'setelement'
			      (13, State, Out)
		      in  %% Line 422
			  {'noreply',_cor153}
	      of <_cor154> ->
		  _cor154
	      catch <_cor157,_cor156,_cor155> ->
		  %% Line 424
		  {'noreply',State}
	  %% Line 427
	  <{'wx',331,_cor610,_cor611,_cor612},State = {'state',_cor613,Panel,Nview,_cor614,_cor615,_cor616,_cor617,Ns0,_cor618,_cor619,_cor620,_cor621,_cor622,_cor623}> when 'true' ->
	      %% Line 428
	      try
		  let <_cor158> =
		      %% Line 429
		      call 'erlang':'node'
			  ()
		  in  let <_cor159> =
			  %% Line 429
			  call 'erlang':'nodes'
			      ()
		      in  let <Possible> =
			      %% Line 429
			      call 'erlang':'--'
				  ([_cor158|_cor159], Ns0)
			  in  %% Line 430
			      case Possible of
				%% Line 431
				<[]> when 'true' ->
				    do  %% Line 434
					call 'observer_wx':'create_txt_dialog'
					    (Panel, [65|[108|[114|[101|[97|[100|[121|[32|[115|[101|[108|[101|[99|[116|[101|[100|[32|[97|[108|[108|[32|[99|[111|[110|[110|[101|[99|[116|[101|[100|[32|[110|[111|[100|[101|[115|[10|[85|[115|[101|[32|[116|[104|[101|[32|[78|[111|[100|[101|[115|[32|[109|[101|[110|[117|[32|[116|[111|[32|[99|[111|[110|[110|[101|[99|[116|[32|[116|[111|[32|[110|[101|[119|[32|[110|[111|[100|[101|[115|[32|[102|[105|[114|[115|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [78|[111|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[32|[110|[111|[100|[101|[115]]]]]]]]]]]]]]]]]], 2048)
					%% Line 435
					call 'erlang':'throw'
					    ('cancel')
				%% Line 436
				<_cor624> when 'true' ->
				    let <_cor162> =
					%% Line 437
					call 'observer_traceoptions_wx':'select_nodes'
					    (Panel, Possible)
				    in  let <_cor163> =
					    %% Line 437
					    call 'erlang':'++'
						(Ns0, _cor162)
					in  let <Ns> =
						%% Line 437
						call 'lists':'usort'
						    (_cor163)
					    in  do  %% Line 438
						    apply 'update_nodes_view'/2
							(Ns, Nview)
						    let <_cor167> =
							%% Line 439
							call 'erlang':'setelement'
							    (9, State, Ns)
						    in  %% Line 439
							{'noreply',_cor167}
			      end
	      of <_cor169> ->
		  _cor169
	      catch <_cor172,_cor171,_cor170> ->
		  case <_cor172,_cor171,_cor170> of
		    %% Line 441
		    <'throw','cancel',_cor640> when 'true' ->
			%% Line 442
			{'noreply',State}
		    ( <_cor172,_cor171,_cor170> when 'true' ->
			  primop 'raise'
			      (_cor170, _cor171)
		      -| ['compiler_generated'] )
		  end
	  %% Line 445
	  <{'wx',332,_cor641,_cor642,_cor643},State = {'state',_cor644,_cor645,Nview,_cor646,_cor647,_cor648,_cor649,Ns0,_cor650,_cor651,_cor652,_cor653,_cor654,_cor655}> when 'true' ->
	      let <Sel> =
		  %% Line 446
		  apply 'get_selected_items'/2
		      (Nview, Ns0)
	      in  let <Ns> =
		      %% Line 447
		      call 'erlang':'--'
			  (Ns0, Sel)
		  in  do  %% Line 448
			  apply 'update_nodes_view'/2
			      (Ns, Nview)
			  let <_cor177> =
			      %% Line 449
			      call 'erlang':'setelement'
				  (9, State, Ns)
			  in  %% Line 449
			      {'noreply',_cor177}
	  %% Line 451
	  <{'wx',ID,_cor671,_cor672,What},State> when 'true' ->
	      do  %% Line 452
		  call 'io':'format'
		      ([126|[112|[58|[126|[112|[58|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[101|[118|[101|[110|[116|[58|[32|[126|[112|[44|[32|[126|[112|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['observer_trace_wx'|[452|[ID|[What|[]]]]])
		  %% Line 453
		  {'noreply',State}
	  ( <_cor179,_cor178> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor179,_cor178})
		  -| [{'function_name',{'handle_event',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 456
    fun (_cor2,_cor1,_cor0) ->
	%% Line 457
	call 'erlang':'error'
	    ({'unhandled_call',_cor2,_cor1})
'handle_cast'/2 =
    %% Line 460
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'add_processes',Pids},State = {'state',_cor19,Parent,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,TraceOpts,_cor28,_cor29,_cor30}> when 'true' ->
	      %% Line 461
	      try
		  let <Opts> =
		      %% Line 462
		      call 'observer_traceoptions_wx':'process_trace'
			  (Parent, TraceOpts)
		  in  let <_cor7> =
			  %% Line 463
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor5) ->
					case _cor5 of
					  <[Pid|_cor4]> when 'true' ->
					      let <_cor6> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [{'tpid',Pid,Opts}|_cor6]
						    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor5> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor5})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Pids)
			    -| ['list_comprehension'] )
		      in  let <_cor11> =
			      %% Line 464
			      call 'erlang':'setelement'
				  (12, State, Opts)
			  in  let <S> =
				  %% Line 464
				  apply 'do_add_processes'/2
				      (_cor7, _cor11)
			      in  %% Line 465
				  {'noreply',S}
	      of <_cor13> ->
		  _cor13
	      catch <_cor16,_cor15,_cor14> ->
		  case <_cor16,_cor15,_cor14> of
		    %% Line 466
		    <'throw','cancel',_cor46> when 'true' ->
			%% Line 467
			{'noreply',State}
		    ( <_cor16,_cor15,_cor14> when 'true' ->
			  primop 'raise'
			      (_cor14, _cor15)
		      -| ['compiler_generated'] )
		  end
	  %% Line 469
	  <Msg,_X_State> when 'true' ->
	      %% Line 470
	      call 'erlang':'error'
		  ({'unhandled_cast',Msg})
	end
'handle_info'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'active',_X_Node},State = {'state',Parent,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      do  %% Line 475
		  apply 'create_menues'/1
		      (Parent)
		  %% Line 476
		  {'noreply',State}
	  %% Line 478
	  <'not_active',State> when 'true' ->
	      %% Line 479
	      {'noreply',State}
	  %% Line 481
	  <{'update_ms',NewMs},State> when 'true' ->
	      %% Line 482
	      case State of
		<{'state',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (15, State, NewMs)
		    in  {'noreply',_cor4}
		( <_cor35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 484
	  <Any,State> when 'true' ->
	      let <_cor5> =
		  %% Line 485
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 485
		      call 'io':'format'
			  ([126|[112|[126|[112|[58|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['observer_trace_wx'|[_cor5|[Any|[]]]])
		      %% Line 486
		      {'noreply',State}
	end
'terminate'/2 =
    %% Line 488
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Reason,{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_X_Nodes,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      do  %% Line 489
		  call 'ttb':'stop'
		      ('nofetch')
		  %% Line 490
		  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'terminate',2}}] )
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 492
    fun (_cor2,_cor1,_cor0) ->
	%% Line 493
	{'ok',_cor0}
'do_add_patterns'/2 =
    %% Line 496
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Module,NewPs},State = {'state',_cor14,_cor15,_cor16,_cor17,Mview,Fview,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,TPs0,_cor24}> when 'true' ->
	      let <_cor3> =
		  %% Line 497
		  case call 'dict':'find'
			   (Module, TPs0) of
		    %% Line 498
		    <{'ok',Prev}> when 'true' ->
			Prev
		    %% Line 499
		    <'error'> when 'true' ->
			[]
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 501
		  case apply 'merge_patterns'/2
			   (NewPs, _cor3) of
		    %% Line 502
		    <{_cor25,[],[]}>
			when call 'erlang':'=:='
			      (_cor25,
			       _cor3) ->
			%% Line 503
			State
		    %% Line 504
		    <{MPatterns,_X_New,_X_Changed}> when 'true' ->
			let <TPs> =
			    %% Line 506
			    call 'dict':'store'
				(Module, MPatterns, TPs0)
			in  let <_cor6> =
				%% Line 507
				call 'dict':'fetch_keys'
				    (TPs)
			    in  let <_cor7> =
				    %% Line 507
				    call 'lists':'sort'
					(_cor6)
				in  do  %% Line 507
					apply 'update_modules_view'/3
					    (_cor7, Module, Mview)
					let <_cor8> =
					    %% Line 508
					    call 'dict':'fetch'
						(Module, TPs)
					in  do  %% Line 508
						apply 'update_functions_view'/2
						    (_cor8, Fview)
						%% Line 509
						call 'erlang':'setelement'
						    (14, State, TPs)
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'do_add_patterns',2}}] )
	    -| ['compiler_generated'] )
	end
'do_add_processes'/2 =
    %% Line 512
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <POpts,S0 = {'state',_cor19,_cor20,Nview,LCtrl,_cor21,_cor22,_cor23,Ns0,_cor24,OldPids,_cor25,_cor26,_cor27,_cor28}> when 'true' ->
	      %% Line 513
	      case apply 'merge_pids'/2
		       (POpts, OldPids) of
		%% Line 514
		<{_cor29,[],[]}>
		    when call 'erlang':'=:='
			  (_cor29,
			   OldPids) ->
		    %% Line 515
		    S0
		%% Line 516
		<{Pids,New,_X_Changed}> when 'true' ->
		    do  %% Line 517
			apply 'update_process_view'/2
			    (Pids, LCtrl)
			let <_cor7> =
			    %% Line 518
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor4) ->
					  case _cor4 of
					    <[{'tpid',Pid,_cor30}|_cor3]>
						when call 'erlang':'is_pid'
						      (Pid) ->
						let <_cor5> =
						    call 'erlang':'node'
							(Pid)
						in  let <_cor6> =
							apply 'lc$^0'/1
							    (_cor3)
						    in  ( [_cor5|_cor6]
							  -| ['compiler_generated'] )
					    ( <[_cor2|_cor3]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor3)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor4> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor4})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (New)
			      -| ['list_comprehension'] )
			in  let <Ns1> =
				%% Line 518
				call 'lists':'usort'
				    (_cor7)
			    in  let <_cor11> =
				    %% Line 519
				    case call 'ordsets':'subtract'
					     (Ns1, Ns0) of
				      %% Line 520
				      <[]> when 'true' ->
					  Ns0
				      %% Line 521
				      <NewNs> when 'true' ->
					  let <All> =
					      %% Line 523
					      call 'ordsets':'union'
						  (NewNs, Ns0)
					  in  do  %% Line 524
						  apply 'update_nodes_view'/2
						      (All, Nview)
						  %% Line 525
						  All
				    end
				in  let <_cor14> =
					%% Line 527
					call 'erlang':'setelement'
					    (11, S0, Pids)
				    in  %% Line 527
					call 'erlang':'setelement'
					    (9, _cor14, _cor11)
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'do_add_processes',2}}] )
	    -| ['compiler_generated'] )
	end
'update_process_view'/2 =
    %% Line 531
    fun (_cor1,_cor0) ->
	do  %% Line 532
	    call 'wxListCtrl':'deleteAllItems'
		(_cor0)
	    let <_cor12> =
		%% Line 533
		( fun (_cor9,_cor8) ->
		      case <_cor9,_cor8> of
			<{'tpid',Pid,Opts},Row> when 'true' ->
			    let <_X_Item> =
				%% Line 534
				call 'wxListCtrl':'insertItem'
				    (_cor0, Row, [])
			    in  let <_cor4> =
				    %% Line 535
				    call 'erlang':'rem'
					(Row, 2)
				in  do  %% Line 535
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(_cor4,
							 0) ->
						  %% Line 536
						  call 'wxListCtrl':'setItemBackgroundColour'
						      (_cor0, Row, {230,230,250})
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'ok'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
					let <_cor6> =
					    %% Line 537
					    call 'observer_lib':'to_str'
						(Pid)
					in  do  %% Line 537
						call 'wxListCtrl':'setItem'
						    (_cor0, Row, 0, _cor6)
						let <_cor7> =
						    %% Line 538
						    call 'observer_lib':'to_str'
							(Opts)
						in  do  %% Line 538
							call 'wxListCtrl':'setItem'
							    (_cor0, Row, 1, _cor7)
							%% Line 539
							call 'erlang':'+'
							    (Row, 1)
			( <_cor11,_cor10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor11,_cor10})
				-| [{'function_name',{'-update_process_view/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-update_process_view/2-fun-0-'}}] )
	    in  %% Line 533
		call 'wx':'foldl'
		    (_cor12, %% Line 540
			     0, _cor1)
'update_nodes_view'/2 =
    %% Line 542
    fun (_cor1,_cor0) ->
	do  %% Line 543
	    call 'wxListCtrl':'deleteAllItems'
		(_cor0)
	    let <_cor11> =
		%% Line 544
		( fun (_cor8,_cor7) ->
		      let <_X_Item> =
			  %% Line 545
			  call 'wxListCtrl':'insertItem'
			      (_cor0, _cor7, [])
		      in  let <_cor4> =
			      %% Line 546
			      call 'erlang':'rem'
				  (_cor7, 2)
			  in  do  %% Line 546
				  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (_cor4,
						   0) ->
					    %% Line 547
					    call 'wxListCtrl':'setItemBackgroundColour'
						(_cor0, _cor7, {230,230,250})
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'ok'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor6> =
				      %% Line 548
				      call 'observer_lib':'to_str'
					  (_cor8)
				  in  do  %% Line 548
					  call 'wxListCtrl':'setItem'
					      (_cor0, _cor7, 0, _cor6)
					  %% Line 549
					  call 'erlang':'+'
					      (_cor7, 1)
		  -| [{'id',{0,0,'-update_nodes_view/2-fun-0-'}}] )
	    in  %% Line 544
		call 'wx':'foldl'
		    (_cor11, %% Line 550
			     0, _cor1)
'update_modules_view'/3 =
    %% Line 552
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 553
	    call 'wxListCtrl':'deleteAllItems'
		(_cor0)
	    let <_cor14> =
		%% Line 554
		( fun (_cor11,_cor10) ->
		      let <_X_Item> =
			  %% Line 555
			  call 'wxListCtrl':'insertItem'
			      (_cor0, _cor10, [])
		      in  let <_cor5> =
			      %% Line 556
			      call 'erlang':'rem'
				  (_cor10, 2)
			  in  do  %% Line 556
				  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (_cor5,
						   0) ->
					    %% Line 557
					    call 'wxListCtrl':'setItemBackgroundColour'
						(_cor0, _cor10, {230,230,250})
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'ok'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor7> =
				      %% Line 558
				      call 'observer_lib':'to_str'
					  (_cor11)
				  in  do  %% Line 558
					  call 'wxListCtrl':'setItem'
					      (_cor0, _cor10, 0, _cor7)
					  do  %% Line 559
					      ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (_cor11,
							       _cor1) ->
							%% Line 560
							call 'wxListCtrl':'setItemState'
							    (_cor0, _cor10, 65535, 4)
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							'ok'
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      %% Line 561
					      call 'erlang':'+'
						  (_cor10, 1)
		  -| [{'id',{0,0,'-update_modules_view/3-fun-0-'}}] )
	    in  %% Line 554
		call 'wx':'foldl'
		    (_cor14, %% Line 562
			     0, _cor2)
'update_functions_view'/2 =
    %% Line 564
    fun (_cor1,_cor0) ->
	do  %% Line 565
	    call 'wxListCtrl':'deleteAllItems'
		(_cor0)
	    let <_cor11> =
		%% Line 566
		( fun (_cor8,_cor7) ->
		      case <_cor8,_cor7> of
			<{'tpattern',_cor14,FA,{'match_spec',_cor15,_cor16,Ms,_cor17}},Row> when 'true' ->
			    let <_X_Item> =
				%% Line 567
				call 'wxListCtrl':'insertItem'
				    (_cor0, Row, [])
			    in  let <_cor4> =
				    %% Line 568
				    call 'erlang':'rem'
					(Row, 2)
				in  do  %% Line 568
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(_cor4,
							 0) ->
						  call 'wxListCtrl':'setItemBackgroundColour'
						      (_cor0, Row, {230,230,250})
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'ok'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
					let <_cor6> =
					    %% Line 569
					    call 'observer_lib':'to_str'
						({'func',FA})
					in  do  %% Line 569
						call 'wxListCtrl':'setItem'
						    (_cor0, Row, 0, _cor6)
						do  %% Line 570
						    call 'wxListCtrl':'setItem'
							(_cor0, Row, 1, Ms)
						    %% Line 571
						    call 'erlang':'+'
							(Row, 1)
			( <_cor10,_cor9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor10,_cor9})
				-| [{'function_name',{'-update_functions_view/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-update_functions_view/2-fun-0-'}}] )
	    in  %% Line 566
		call 'wx':'foldl'
		    (_cor11, %% Line 572
			     0, _cor1)
'merge_pids'/2 =
    %% Line 575
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[N1 = {'tpid','new',_cor7}|Ns],[N2 = {'tpid','new',_cor8}|Old]> when 'true' ->
	      %% Line 576
	      case apply 'merge_pids_1'/2
		       (Ns, Old) of
		<{Pids,New,Changed}> when 'true' ->
		    %% Line 577
		    {[N1|Pids],New,[{N2,N2}|Changed]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 578
	  <[N1 = {'tpid','new',_cor9}|Ns],Old> when 'true' ->
	      %% Line 579
	      case apply 'merge_pids_1'/2
		       (Ns, Old) of
		<{Pids,New,Changed}> when 'true' ->
		    %% Line 580
		    {[N1|Pids],[N1|New],Changed}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 581
	  <Ns,[N2 = {'tpid','new',_cor10}|Old]> when 'true' ->
	      %% Line 582
	      case apply 'merge_pids_1'/2
		       (Ns, Old) of
		<{Pids,New,Changed}> when 'true' ->
		    %% Line 583
		    {[N2|Pids],New,Changed}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 584
	  <New,Old> when 'true' ->
	      %% Line 585
	      apply 'merge_pids_1'/2
		  (New, Old)
	end
'merge_pids_1'/2 =
    %% Line 587
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 588
	    call 'lists':'sort'
		(_cor1)
	in  %% Line 588
	    apply 'merge'/6
		(_cor2, _cor0, 2, [], [], [])
'merge_patterns'/2 =
    %% Line 590
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 591
	    call 'lists':'sort'
		(_cor1)
	in  %% Line 591
	    apply 'merge'/6
		(_cor2, _cor0, 3, [], [], [])
'merge'/6 =
    %% Line 593
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[N|Ns],[_cor21|Os],El,New,Ch,All>
	      when call 'erlang':'=:='
		    (_cor21,
		     N) ->
	      %% Line 594
	      apply 'merge'/6
		  (Ns, Os, El, New, Ch, [N|All])
	  %% Line 595
	  <[N|Ns],[O|Os],El,New,Ch,All>
	      when %% Line 596
		try
		    let <_cor7> =
			call 'erlang':'element'
			    (El, N)
		    in  let <_cor6> =
			    call 'erlang':'element'
				(El, O)
			in  call 'erlang':'=='
				(_cor7, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 597
	      apply 'merge'/6
		  (Ns, Os, El, New, [{O,N}|Ch], [N|All])
	  %% Line 598
	  <[N|Ns],Os = [O|_cor22],El,New,Ch,All>
	      when %% Line 599
		try
		    let <_cor9> =
			call 'erlang':'element'
			    (El, N)
		    in  let <_cor8> =
			    call 'erlang':'element'
				(El, O)
			in  call 'erlang':'<'
				(_cor9, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 600
	      apply 'merge'/6
		  (Ns, Os, El, [N|New], Ch, [N|All])
	  %% Line 601
	  <Ns = [N|_cor23],[O|Os],El,New,Ch,All>
	      when %% Line 602
		try
		    let <_cor11> =
			call 'erlang':'element'
			    (El, N)
		    in  let <_cor10> =
			    call 'erlang':'element'
				(El, O)
			in  call 'erlang':'>'
				(_cor11, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 603
	      apply 'merge'/6
		  (Ns, Os, El, New, Ch, [O|All])
	  %% Line 604
	  <[],Os,_X_El,New,Ch,All> when 'true' ->
	      let <_cor12> =
		  %% Line 605
		  call 'lists':'reverse'
		      (All, Os)
	      in  %% Line 605
		  {_cor12,New,Ch}
	  %% Line 606
	  <Ns,[],_X_El,New,Ch,All> when 'true' ->
	      let <_cor14> =
		  %% Line 607
		  call 'lists':'reverse'
		      (All, Ns)
	      in  let <_cor13> =
		      %% Line 607
		      call 'erlang':'++'
			  (Ns, New)
		  in  %% Line 607
		      {_cor14,_cor13,Ch}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'merge',6}}] )
	    -| ['compiler_generated'] )
	end
'ttb_output_args'/2 =
    %% Line 610
    fun (_cor1,_cor0) ->
	let <ToWindow> =
	    %% Line 611
	    call 'proplists':'get_value'
		('window', _cor0, 'true')
	in  let <ToShell> =
		%% Line 612
		call 'proplists':'get_value'
		    ('shell', _cor0, 'false')
	    in  let <ToFile> =
		    %% Line 613
		    call 'proplists':'get_value'
			('file', _cor0, 'false')
		in  do  %% Line 614
			( case ToWindow of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'ok'
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  ( case ToShell of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( case ToFile of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'ok'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 615
						      call 'erlang':'throw'
							  ({'error',[78|[111|[32|[111|[117|[116|[112|[117|[116|[32|[111|[102|[32|[116|[114|[97|[99|[101]]]]]]]]]]]]]]]]]]})
						  -| ['compiler_generated'] )
						( <_cor7> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor7}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_cor6> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor6}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_cor5> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor5}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
			%% Line 616
			case apply 'create_logwindow'/2
				 (_cor1, ToWindow) of
			  <{LogWin,Text}> when 'true' ->
			      let <Write> =
				  %% Line 617
				  apply 'output_fun'/2
				      (Text, ToShell)
			      in  let <Shell> =
				      %% Line 618
				      apply 'output_shell'/2
					  (ToFile, Write)
				  in  let <_cor14> =
					  %% Line 619
					  call 'proplists':'get_value'
					      ('wrap', _cor0, 'false')
				      in  let <FileOpts> =
					      %% Line 619
					      apply 'output_file'/3
						  (ToFile, _cor14, _cor0)
					  in  %% Line 620
					      {[{'file',{'local',FileOpts}}|Shell],LogWin}
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
'output_shell'/2 =
    %% Line 622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'true','false'> when 'true' ->
	      %% Line 623
	      []
	  %% Line 624
	  <'true',Write>
	      when call 'erlang':'is_function'
		    (Write) ->
	      %% Line 625
	      [{'shell',Write}|[]]
	  %% Line 626
	  <'false',Write>
	      when call 'erlang':'is_function'
		    (Write) ->
	      %% Line 627
	      [{'shell',{'only',Write}}|[]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'output_shell',2}}] )
	    -| ['compiler_generated'] )
	end
'output_fun'/2 =
    %% Line 629
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'false','false'> when 'true' ->
	      'false'
	  %% Line 630
	  <'false','true'> when 'true' ->
	      ( fun (_cor3) ->
		    let <_cor2> =
			apply 'textformat'/1
			    (_cor3)
		    in  call 'io':'put_chars'
			    (_cor2)
		-| [{'id',{0,0,'-output_fun/2-fun-0-'}}] )
	  %% Line 631
	  <Text,'false'> when 'true' ->
	      let <Env> =
		  %% Line 632
		  call 'wx':'get_env'
		      ()
	      in  %% Line 633
		  ( fun (_cor7) ->
			do  %% Line 634
			    call 'wx':'set_env'
				(Env)
			    let <_cor6> =
				%% Line 635
				apply 'textformat'/1
				    (_cor7)
			    in  %% Line 635
				call 'wxTextCtrl':'appendText'
				    (Text, _cor6)
		    -| [{'id',{0,0,'-output_fun/2-fun-1-'}}] )
	  %% Line 637
	  <Text,'true'> when 'true' ->
	      let <Env> =
		  %% Line 638
		  call 'wx':'get_env'
		      ()
	      in  %% Line 639
		  ( fun (_cor12) ->
			do  %% Line 640
			    call 'wx':'set_env'
				(Env)
			    let <IoList> =
				%% Line 641
				apply 'textformat'/1
				    (_cor12)
			    in  do  %% Line 642
				    call 'wxTextCtrl':'appendText'
					(Text, IoList)
				    let <_cor11> =
					%% Line 643
					apply 'textformat'/1
					    (_cor12)
				    in  %% Line 643
					call 'io':'put_chars'
					    (_cor11)
		    -| [{'id',{0,0,'-output_fun/2-fun-2-'}}] )
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'output_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'output_file'/3 =
    %% Line 646
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'false',_cor10,_X_Opts> when 'true' ->
	      %% Line 647
	      [116|[116|[98]]]
	  %% Line 648
	  <'true','false',Opts> when 'true' ->
	      %% Line 649
	      call 'proplists':'get_value'
		  ('filename', Opts, [116|[116|[98]]])
	  %% Line 650
	  <'true','true',Opts> when 'true' ->
	      let <Name> =
		  %% Line 651
		  call 'proplists':'get_value'
		      ('filename', Opts, [116|[116|[98]]])
	      in  let <Size> =
		      %% Line 652
		      call 'proplists':'get_value'
			  ('wrap_sz', Opts, 128)
		  in  let <Count> =
			  %% Line 653
			  call 'proplists':'get_value'
			      ('wrap_c', Opts, 8)
		      in  let <_cor6> =
			      %% Line 654
			      call 'erlang':'*'
				  (Size, 1024)
			  in  %% Line 654
			      {'wrap',Name,_cor6,Count}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'output_file',3}}] )
	    -| ['compiler_generated'] )
	end
'create_logwindow'/2 =
    %% Line 657
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Parent,'false'> when 'true' ->
	      {'false','false'}
	  %% Line 658
	  <Parent,'true'> when 'true' ->
	      let <LogWin> =
		  %% Line 659
		  call 'wxFrame':'new'
		      (Parent, 370, [84|[114|[97|[99|[101|[32|[76|[111|[103]]]]]]]]], [{'size',{750,800}}])
	      in  let <MB> =
		      %% Line 660
		      call 'wxMenuBar':'new'
			  ()
		  in  let <File> =
			  %% Line 661
			  call 'wxMenu':'new'
			      ()
		      in  do  %% Line 662
			      call 'wxMenu':'append'
				  (File, 322, [67|[108|[101|[97|[114|[32|[76|[111|[103|[9|[67|[116|[114|[108|[45|[67]]]]]]]]]]]]]]]])
			      do  %% Line 663
				  call 'wxMenu':'append'
				      (File, 321, [83|[97|[118|[101|[32|[76|[111|[103|[9|[67|[116|[114|[108|[45|[83]]]]]]]]]]]]]]])
				  do  %% Line 664
				      call 'wxMenu':'append'
					  (File, 5001, [67|[108|[111|[115|[101]]]]])
				      do  %% Line 665
					  call 'wxMenuBar':'append'
					      (MB, File, [70|[105|[108|[101]]]])
					  do  %% Line 666
					      call 'wxFrame':'setMenuBar'
						  (LogWin, MB)
					      let <Text> =
						  %% Line 667
						  call 'wxTextCtrl':'new'
						      (LogWin, -1, %% Line 668
								   [{'style',1073774640}])
					      in  let <Font> =
						      %% Line 670
						      call 'observer_wx':'get_attrib'
							  ({'font','fixed'})
						  in  let <_cor11> =
							  %% Line 671
							  call 'wxe_util':'get_const'
							      ('wxBLACK')
						      in  let <Attr> =
							      %% Line 671
							      call 'wxTextAttr':'new'
								  (_cor11, [{'font',Font}|[]])
							  in  %% Line 672
							      case call 'wxTextCtrl':'setDefaultStyle'
								       (Text, Attr) of
								<'true'> when 'true' ->
								    do  %% Line 673
									call 'wxFrame':'connect'
									    (LogWin, 'close_window', [{'skip','true'}])
									do  %% Line 674
									    call 'wxFrame':'connect'
										(LogWin, 'command_menu_selected', [{'userData',Text}|[]])
									    do  %% Line 675
										call 'wxFrame':'show'
										    (LogWin)
										%% Line 676
										{LogWin,Text}
								( <_cor13> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor13})
								  -| ['compiler_generated'] )
							      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'create_logwindow',2}}] )
	    -| ['compiler_generated'] )
	end
'setup_ttb'/2 =
    %% Line 678
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 679
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{_cor20,FTP}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'setup_tps'/2
					(FTP, [])
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor15> =
		%% Line 680
		( letrec
		      'lc$^1'/1 =
			  fun (_cor11) ->
			      case _cor11 of
				<[{'tpid',Pid,Flags}|_cor10]> when 'true' ->
				    let <_cor12> =
					apply 'dbg_flags'/1
					    (Flags)
				    in  let <_cor13> =
					    call 'ttb':'p'
						(Pid, _cor12)
					in  let <_cor14> =
						apply 'lc$^1'/1
						    (_cor10)
					    in  ( [_cor13|_cor14]
						  -| ['compiler_generated'] )
				( <[_cor9|_cor10]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor10)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor11> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor11})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  %% Line 681
		case _cor0 of
		  <[{'tpid',_X_Pid,_X_Flags}|_cor21]> when 'true' ->
		      %% Line 682
		      'ok'
		  ( <_cor17> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor17})
		    -| ['compiler_generated'] )
		end
'setup_tps'/2 =
    %% Line 685
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[First = {'tpattern',_cor22,{_cor23,'_'},_cor24}|Rest],Prev> when 'true' ->
	      do  %% Line 686
		  apply 'setup_tp'/1
		      (First)
		  do  %% Line 687
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[TP|_cor3]> when 'true' ->
					  do  apply 'setup_tp'/1
						  (TP)
					      apply 'lc$^0'/1
						  (_cor3)
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor4> =
				call 'lists':'reverse'
				    (Prev)
			    in  apply 'lc$^0'/1
				    (_cor4)
			-| ['list_comprehension'] )
		      %% Line 688
		      apply 'setup_tps'/2
			  (Rest, [])
	  %% Line 689
	  <[First = {'tpattern',_cor25,{F,_cor26},_cor27}|Rest],Prev = [{'tpattern',_cor28,{_cor29,_cor30},_cor31}|_cor32]>
	      when call 'erlang':'=:='
		    (_cor29,
		     F) ->
	      %% Line 690
	      apply 'setup_tps'/2
		  (Rest, [First|Prev])
	  %% Line 691
	  <[First|Rest],Prev> when 'true' ->
	      do  %% Line 692
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor11) ->
				case _cor11 of
				  <[TP|_cor9]> when 'true' ->
				      do  apply 'setup_tp'/1
					      (TP)
					  apply 'lc$^1'/1
					      (_cor9)
				  <[]> when 'true' ->
				      []
				  ( <_cor11> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor11})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor10> =
			    call 'lists':'reverse'
				(Prev)
			in  apply 'lc$^1'/1
				(_cor10)
		    -| ['list_comprehension'] )
		  %% Line 693
		  apply 'setup_tps'/2
		      (Rest, [First|[]])
	  %% Line 694
	  <[],Prev> when 'true' ->
	      %% Line 695
	      ( letrec
		    'lc$^2'/1 =
			fun (_cor17) ->
			    case _cor17 of
			      <[TP|_cor15]> when 'true' ->
				  let <_cor18> =
				      apply 'setup_tp'/1
					  (TP)
				  in  let <_cor19> =
					  apply 'lc$^2'/1
					      (_cor15)
				      in  ( [_cor18|_cor19]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor17> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor17})
				      -| [{'function_name',{'lc$^2',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor16> =
			call 'lists':'reverse'
			    (Prev)
		    in  apply 'lc$^2'/1
			    (_cor16)
		-| ['list_comprehension'] )
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'setup_tps',2}}] )
	    -| ['compiler_generated'] )
	end
'setup_tp'/1 =
    %% Line 697
    fun (_cor0) ->
	case _cor0 of
	  <{'tpattern',M,{F,A},{'match_spec',_cor2,Ms,_cor3,_cor4}}> when 'true' ->
	      %% Line 698
	      call 'ttb':'tpl'
		  (M, F, A, Ms)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'setup_tp',1}}] )
	    -| ['compiler_generated'] )
	end
'dbg_flags'/1 =
    %% Line 700
    fun (_cor0) ->
	%% Line 701
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Flag|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'dbg_flag'/1
				    (Flag)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'dbg_flag'/1 =
    %% Line 703
    fun (_cor0) ->
	case _cor0 of
	  <'send'> when 'true' ->
	      's'
	  %% Line 704
	  <'receive'> when 'true' ->
	      'r'
	  %% Line 705
	  <'functions'> when 'true' ->
	      'c'
	  %% Line 706
	  <'on_spawn'> when 'true' ->
	      'sos'
	  %% Line 707
	  <'on_link'> when 'true' ->
	      'sol'
	  %% Line 708
	  <'on_first_spawn'> when 'true' ->
	      'sofs'
	  %% Line 709
	  <'on_first_link'> when 'true' ->
	      'sofl'
	  %% Line 710
	  <'events'> when 'true' ->
	      'p'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'dbg_flag',1}}] )
	    -| ['compiler_generated'] )
	end
'textformat'/1 =
    %% Line 712
    fun (_cor0) ->
	case _cor0 of
	  <Trace>
	      when try
		    let <_cor1> =
			call 'erlang':'element'
			    (1, _cor0)
		    in  let <_cor2> =
			    call 'erlang':'=:='
				(_cor1, 'trace_ts')
			in  let <_cor3> =
				call 'erlang':'tuple_size'
				    (_cor0)
			    in  let <_cor4> =
				    call 'erlang':'>='
					(_cor3, 4)
				in  call 'erlang':'and'
					(_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 713
		  call 'erlang':'tuple_size'
		      (Trace)
	      in  let <_cor8> =
		      %% Line 713
		      call 'erlang':'-'
			  (_cor7, 1)
		  in  let <_cor5> =
			  %% Line 713
			  call 'erlang':'tuple_size'
			      (Trace)
		      in  let <_cor6> =
			      %% Line 713
			      call 'erlang':'element'
				  (_cor5, Trace)
			  in  %% Line 713
			      apply 'format_trace'/3
				  (Trace, _cor8, _cor6)
	  %% Line 714
	  <Trace>
	      when try
		    let <_cor9> =
			call 'erlang':'element'
			    (1, _cor0)
		    in  let <_cor10> =
			    call 'erlang':'=:='
				(_cor9, 'drop')
			in  let <_cor11> =
				call 'erlang':'tuple_size'
				    (_cor0)
			    in  let <_cor12> =
				    call 'erlang':'=:='
					(_cor11, 2)
				in  call 'erlang':'and'
					(_cor10, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 715
		  call 'erlang':'element'
		      (2, Trace)
	      in  %% Line 715
		  call 'io_lib':'format'
		      ([42|[42|[42|[32|[68|[114|[111|[112|[112|[101|[100|[32|[126|[112|[32|[109|[101|[115|[115|[97|[103|[101|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor13|[]])
	  %% Line 716
	  <Trace>
	      when try
		    let <_cor14> =
			call 'erlang':'element'
			    (1, _cor0)
		    in  let <_cor15> =
			    call 'erlang':'=:='
				(_cor14, 'seq_trace')
			in  let <_cor16> =
				call 'erlang':'tuple_size'
				    (_cor0)
			    in  let <_cor17> =
				    call 'erlang':'>='
					(_cor16, 3)
				in  call 'erlang':'and'
					(_cor15, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 717
	      call 'io_lib':'format'
		  ([42|[42|[42|[32|[83|[101|[113|[32|[116|[114|[97|[99|[101|[32|[110|[111|[116|[32|[105|[109|[112|[108|[109|[101|[110|[116|[101|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 718
	  <_cor19> when 'true' ->
	      %% Line 719
	      []
	end
'format_trace'/3 =
    %% Line 721
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Trace,Size,TS0 = {_cor26,_cor27,MS}> when 'true' ->
	      %% Line 722
	      case call 'calendar':'now_to_local_time'
		       (TS0) of
		<{_cor28,{H,M,S}}> when 'true' ->
		    let <TS> =
			%% Line 723
			call 'io_lib':'format'
			    ([126|[46|[50|[46|[48|[119|[58|[126|[46|[50|[46|[48|[119|[58|[126|[46|[50|[46|[48|[119|[58|[126|[46|[54|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]]]]]], [H|[M|[S|[MS|[]]]]])
		    in  let <From> =
			    %% Line 724
			    call 'erlang':'element'
				(2, Trace)
			in  %% Line 725
			    case call 'erlang':'element'
				     (3, Trace) of
			      %% Line 726
			      <'receive'> when 'true' ->
				  %% Line 727
				  case call 'erlang':'element'
					   (4, Trace) of
				    %% Line 728
				    <{'dbg','ok'}> when 'true' ->
					[]
				    %% Line 729
				    <Message> when 'true' ->
					%% Line 730
					call 'io_lib':'format'
					    ([126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[60|[60|[32|[126|[49|[48|[48|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [TS|[From|[Message|[]]]])
				  end
			      %% Line 732
			      <'send'> when 'true' ->
				  let <Message> =
				      %% Line 733
				      call 'erlang':'element'
					  (4, Trace)
				  in  let <To> =
					  %% Line 734
					  call 'erlang':'element'
					      (5, Trace)
				      in  %% Line 735
					  call 'io_lib':'format'
					      ([126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[126|[49|[48|[48|[112|[32|[33|[32|[126|[49|[48|[48|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], [TS|[From|[To|[Message|[]]]]])
			      %% Line 736
			      <'call'> when 'true' ->
				  %% Line 737
				  case call 'erlang':'element'
					   (4, Trace) of
				    %% Line 738
				    <MFA>
					when call 'erlang':'=='
					      (Size,
					       5) ->
					let <Message> =
					    %% Line 739
					    call 'erlang':'element'
						(5, Trace)
					in  let <_cor10> =
						%% Line 740
						apply 'ffunc'/1
						    (MFA)
					    in  %% Line 740
						call 'io_lib':'format'
						    ([126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[99|[97|[108|[108|[32|[126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TS|[From|[_cor10|[Message|[]]]]])
				    %% Line 741
				    <MFA> when 'true' ->
					let <_cor11> =
					    %% Line 742
					    apply 'ffunc'/1
						(MFA)
					in  %% Line 742
					    call 'io_lib':'format'
						([126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[99|[97|[108|[108|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]], [TS|[From|[_cor11|[]]]])
				  end
			      %% Line 744
			      <'return_from'> when 'true' ->
				  let <MFA> =
				      %% Line 745
				      call 'erlang':'element'
					  (4, Trace)
				  in  let <Ret> =
					  %% Line 746
					  call 'erlang':'element'
					      (5, Trace)
				      in  let <_cor15> =
					      %% Line 747
					      apply 'ffunc'/1
						  (MFA)
					  in  %% Line 747
					      call 'io_lib':'format'
						  ([126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[102|[114|[111|[109|[32|[126|[115|[32|[45|[62|[32|[126|[49|[48|[48|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TS|[From|[_cor15|[Ret|[]]]]])
			      %% Line 748
			      <'return_to'> when 'true' ->
				  let <MFA> =
				      %% Line 749
				      call 'erlang':'element'
					  (4, Trace)
				  in  let <_cor17> =
					  %% Line 750
					  apply 'ffunc'/1
					      (MFA)
				      in  %% Line 750
					  call 'io_lib':'format'
					      ([126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[114|[101|[116|[117|[114|[110|[105|[110|[103|[32|[116|[111|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TS|[From|[_cor17|[]]]])
			      %% Line 751
			      <'spawn'>
				  when call 'erlang':'=='
					(Size,
					 5) ->
				  let <Pid> =
				      %% Line 752
				      call 'erlang':'element'
					  (4, Trace)
				  in  let <MFA> =
					  %% Line 753
					  call 'erlang':'element'
					      (5, Trace)
				      in  let <_cor20> =
					      %% Line 754
					      apply 'ffunc'/1
						  (MFA)
					  in  %% Line 754
					      call 'io_lib':'format'
						  ([126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[115|[112|[97|[119|[110|[32|[126|[49|[48|[48|[112|[32|[97|[115|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TS|[From|[Pid|[_cor20|[]]]]])
			      %% Line 755
			      <Op> when 'true' ->
				  let <_cor21> =
				      %% Line 756
				      apply 'ftup'/3
					  (Trace, 4, Size)
				  in  %% Line 756
				      call 'io_lib':'format'
					  ([126|[115|[32|[40|[126|[49|[48|[48|[112|[41|[32|[126|[49|[48|[48|[112|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]], [TS|[From|[Op|[_cor21|[]]]]])
			    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'format_trace',3}}] )
	    -| ['compiler_generated'] )
	end
'ffunc'/1 =
    %% Line 763
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,Argl}>
	      when call 'erlang':'is_list'
		    (Argl) ->
	      let <_cor1> =
		  %% Line 764
		  apply 'fargs'/1
		      (Argl)
	      in  %% Line 764
		  call 'io_lib':'format'
		      ([126|[49|[48|[48|[112|[58|[126|[49|[48|[48|[112|[40|[126|[115|[41]]]]]]]]]]]]]]], [M|[F|[_cor1|[]]]])
	  %% Line 765
	  <{M,F,Arity}> when 'true' ->
	      %% Line 766
	      call 'io_lib':'format'
		  ([126|[49|[48|[48|[112|[58|[126|[49|[48|[48|[112|[47|[126|[49|[48|[48|[112]]]]]]]]]]]]]]]]], [M|[F|[Arity|[]]]])
	  %% Line 767
	  <X> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[49|[48|[48|[112]]]]], [X|[]])
	end
'fargs'/1 =
    %% Line 771
    fun (_cor0) ->
	case _cor0 of
	  <Arity>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'erlang':'integer_to_list'
		  (Arity)
	  %% Line 772
	  <[]> when 'true' ->
	      []
	  %% Line 773
	  <[A|[]]> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[49|[48|[48|[112]]]]], [A|[]])
	  %% Line 774
	  <[A|Args]> when 'true' ->
	      let <_cor1> =
		  call 'io_lib':'format'
		      ([126|[49|[48|[48|[112|[44]]]]]], [A|[]])
	      in  let <_cor2> =
		      apply 'fargs'/1
			  (Args)
		  in  [_cor1|_cor2]
	  %% Line 775
	  <A> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[49|[48|[48|[112]]]]], [A|[]])
	end
'ftup'/3 =
    %% Line 778
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Trace,Index,_cor11>
	      when call 'erlang':'=:='
		    (_cor11,
		     Index) ->
	      let <_cor3> =
		  %% Line 779
		  call 'erlang':'element'
		      (Index, Trace)
	      in  %% Line 779
		  call 'io_lib':'format'
		      ([126|[49|[48|[48|[112]]]]], [_cor3|[]])
	  %% Line 780
	  <Trace,Index,Size> when 'true' ->
	      let <_cor4> =
		  %% Line 781
		  call 'erlang':'element'
		      (Index, Trace)
	      in  let <_cor5> =
		      %% Line 781
		      call 'io_lib':'format'
			  ([126|[49|[48|[48|[112|[32]]]]]], [_cor4|[]])
		  in  let <_cor6> =
			  %% Line 782
			  call 'erlang':'+'
			      (Index, 1)
		      in  let <_cor7> =
			      %% Line 782
			      apply 'ftup'/3
				  (Trace, _cor6, Size)
			  in  %% Line 781
			      [_cor5|_cor7]
	end
'write_file'/6 =
    %% Line 786
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <FormatMS> =
	    %% Line 787
	    ( fun (_cor6) ->
		  case _cor6 of
		    <{'match_spec',Id,T,_cor37,F}> when 'true' ->
			%% Line 788
			call 'io_lib':'format'
			    ([91|[123|[110|[97|[109|[101|[44|[34|[126|[115|[34|[125|[44|[32|[123|[116|[101|[114|[109|[44|[32|[126|[119|[125|[44|[32|[123|[102|[117|[110|[99|[44|[32|[34|[126|[115|[34|[125|[93]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 789
																														       [Id|[T|[F|[]]]])
		    ( <_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor7})
			    -| [{'function_name',{'-write_file/6-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-write_file/6-fun-0-'}}] )
	in  let <FormatTP> =
		%% Line 791
		( fun (_cor10) ->
		      case _cor10 of
			<{Module,FTPs}> when 'true' ->
			    let <List> =
				%% Line 792
				apply 'format_ftp'/2
				    (FTPs, FormatMS)
			    in  %% Line 793
				call 'io_lib':'format'
				    ([123|[116|[112|[44|[32|[126|[119|[44|[32|[91|[126|[115|[93|[125|[46|[126|[110]]]]]]]]]]]]]]]]], [Module|[List|[]]])
			( <_cor11> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor11})
				-| [{'function_name',{'-write_file/6-fun-1-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-write_file/6-fun-1-'}}] )
	    in  let <_cor18> =
		    %% Line 798
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor15) ->
				  case _cor15 of
				    <[Ms|_cor14]> when 'true' ->
					let <_cor16> =
					    apply FormatMS
						(Ms)
					in  let <_cor17> =
						apply 'lc$^0'/1
						    (_cor14)
					    in  ( [[[123|[109|[115|[44|[32]]]]]|[_cor16|[[125|[46|[10]]]]]]|_cor17]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor15> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor15})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor2)
		      -| ['list_comprehension'] )
		in  let <_cor19> =
			%% Line 799
			call 'io_lib':'format'
			    ([126|[119]], [_cor3|[]])
		    in  let <_cor20> =
			    %% Line 800
			    call 'io_lib':'format'
				([126|[119]], [_cor1|[]])
			in  let <_cor26> =
				%% Line 801
				( letrec
				      'lc$^1'/1 =
					  fun (_cor23) ->
					      case _cor23 of
						<[TP|_cor22]> when 'true' ->
						    let <_cor24> =
							apply FormatTP
							    (TP)
						    in  let <_cor25> =
							    apply 'lc$^1'/1
								(_cor22)
							in  ( [_cor24|_cor25]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor23> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor23})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (_cor0)
				  -| ['list_comprehension'] )
			    in  let <Str> =
				    %% Line 796
				    [[37|[37|[37|[10|[37|[37|[37|[32|[84|[104|[105|[115|[32|[102|[105|[108|[101|[32|[105|[115|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[79|[98|[115|[101|[114|[118|[101|[114|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 797
																																		    [[37|[37|[37|[10|[37|[37|[37|[32|[68|[79|[32|[78|[79|[84|[32|[69|[68|[73|[84|[33|[10|[37|[37|[37|[10]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 798
																																																		  [_cor18|%% Line 799
																																																			  [[123|[116|[114|[97|[99|[101|[111|[112|[116|[115|[44|[32]]]]]]]]]]]]|[_cor19|[[125|[46|[10]]]|%% Line 800
																																																															[[123|[111|[117|[116|[112|[117|[116|[44|[32]]]]]]]]]|[_cor20|[[125|[46|[10]]]|%% Line 801
																																																																								      [_cor26|%% Line 802
																																																																									      []]]]]]]]]]]
				in  let <_cor28> =
					%% Line 803
					call 'erlang':'list_to_binary'
					    (Str)
				    in  %% Line 803
					case call 'file':'write_file'
						 (_cor4, _cor28) of
					  %% Line 804
					  <'ok'> when 'true' ->
					      %% Line 805
					      'success'
					  %% Line 806
					  <{'error',Reason}> when 'true' ->
					      let <FailMsg> =
						  %% Line 807
						  call 'file':'format_error'
						      (Reason)
					      in  %% Line 808
						  call 'observer_wx':'create_txt_dialog'
						      (_cor5, FailMsg, [69|[114|[114|[111|[114]]]]], 512)
					  ( <_cor30> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor30})
					    -| ['compiler_generated'] )
					end
'format_ftp'/2 =
    %% Line 811
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'tpattern',_cor8,{F,A},Ms}|[]],FormatMS> when 'true' ->
	      let <_cor2> =
		  %% Line 812
		  apply FormatMS
		      (Ms)
	      in  %% Line 812
		  call 'io_lib':'format'
		      ([123|[126|[119|[44|[32|[126|[119|[44|[32|[126|[115|[125]]]]]]]]]]]], [F|[A|[_cor2|[]]]])
	  %% Line 813
	  <[{'tpattern',_cor9,{F,A},Ms}|Rest],FormatMS> when 'true' ->
	      let <_cor3> =
		  %% Line 814
		  apply FormatMS
		      (Ms)
	      in  let <_cor4> =
		      %% Line 814
		      call 'io_lib':'format'
			  ([123|[126|[119|[44|[32|[126|[119|[44|[32|[126|[115|[125|[44|[126|[110|[32|[32|[32|[32|[32]]]]]]]]]]]]]]]]]]]], [F|[A|[_cor3|[]]]])
		  in  let <_cor5> =
			  %% Line 815
			  apply 'format_ftp'/2
			      (Rest, FormatMS)
		      in  %% Line 814
			  [_cor4|%% Line 815
				 [_cor5|[]]]
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'format_ftp',2}}] )
	    -| ['compiler_generated'] )
	end
'read_settings'/2 =
    %% Line 817
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Filename,State = {'state',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,TO0,_cor34,_cor35,Ms0}> when 'true' ->
	      %% Line 818
	      case call 'file':'consult'
		       (Filename) of
		%% Line 819
		<{'ok',Terms}> when 'true' ->
		    let <_cor7> =
			%% Line 820
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[{'ms',MsList}|_cor3]> when 'true' ->
					    let <_cor5> =
						apply 'parse_ms'/1
						    (MsList)
					    in  let <_cor6> =
						    apply 'lc$^0'/1
							(_cor3)
						in  ( [_cor5|_cor6]
						      -| ['compiler_generated'] )
					( <[_cor2|_cor3]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor3)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor4> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor4})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Terms)
			  -| ['list_comprehension'] )
		    in  let <_cor8> =
			    %% Line 820
			    call 'erlang':'++'
				(Ms0, _cor7)
			in  let <Ms> =
				%% Line 820
				call 'lists':'usort'
				    (_cor8)
			    in  let <_cor10> =
				    %% Line 821
				    call 'proplists':'get_value'
					('traceopts', Terms, [])
				in  let <_cor11> =
					%% Line 821
					call 'erlang':'++'
					    (TO0, _cor10)
				    in  let <TOs> =
					    %% Line 821
					    call 'lists':'usort'
						(_cor11)
					in  let <Out> =
						%% Line 822
						call 'proplists':'get_value'
						    ('output', Terms, [])
					    in  let <_cor15> =
						    %% Line 824
						    call 'erlang':'setelement'
							(15, State, Ms)
						in  let <_cor16> =
							%% Line 824
							call 'erlang':'setelement'
							    (13, _cor15, Out)
						    in  let <_cor18> =
							    %% Line 824
							    call 'erlang':'setelement'
								(12, _cor16, TOs)
							in  %% Line 823
							    call 'lists':'foldl'
								(( 'parse_tp'/2
								   -| [{'id',{0,0,'-read_settings/2-fun-0-'}}] ), _cor18, %% Line 825
															  Terms)
		%% Line 826
		<{'error',_cor51}> when 'true' ->
		    do  %% Line 827
			call 'observer_wx':'create_txt_dialog'
			    (_cor25, [67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[108|[111|[97|[100|[32|[115|[101|[116|[116|[105|[110|[103|[115]]]]]]]]]]]]]]]]]]]]]]], %% Line 828
																					   [69|[114|[114|[111|[114]]]]], %% Line 828
																									 512)
			%% Line 829
			State
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor21})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22})
		  -| [{'function_name',{'read_settings',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_ms'/1 =
    %% Line 832
    fun (_cor0) ->
	let <Name> =
	    %% Line 833
	    call 'proplists':'get_value'
		('name', _cor0, [84|[114|[97|[99|[101|[80|[97|[116|[116|[101|[114|[110]]]]]]]]]]]])
	in  let <Term> =
		%% Line 834
		call 'proplists':'get_value'
		    ('term', _cor0, [{'_',[],['ok']}])
	    in  let <FunStr> =
		    %% Line 835
		    call 'proplists':'get_value'
			('term', _cor0, [102|[117|[110|[40|[95|[41|[32|[45|[62|[32|[111|[107|[32|[101|[110|[100]]]]]]]]]]]]]]]])
		in  %% Line 836
		    apply 'make_ms'/3
			(Name, Term, FunStr)
'make_ms'/3 =
    %% Line 838
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 839
	    call 'io_lib':'format'
		([126|[119]], _cor1)
	in  %% Line 839
	    {'match_spec',_cor2,_cor1,_cor3,_cor0}
'parse_tp'/2 =
    %% Line 841
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'tp',Mod,FAs},State> when 'true' ->
	      let <_cor7> =
		  %% Line 842
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[%% Line 843
				    {F,A,List}|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'parse_ms'/1
					      (List)
				      in  let <_cor6> =
					      %% Line 843
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [{'tpattern',Mod,{F,A},_cor5}|_cor6]
						-| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					%% Line 843
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 843
			     FAs)
		    -| ['list_comprehension'] )
	      in  %% Line 844
		  apply 'do_add_patterns'/2
		      ({Mod,_cor7}, State)
	  %% Line 845
	  <_cor11,State> when 'true' ->
	      %% Line 846
	      State
	end
'get_selected_items'/2 =
    %% Line 848
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 849
	    apply 'get_selected_items'/3
		(_cor1, -1, [])
	in  %% Line 849
	    apply 'get_indecies'/2
		(_cor3, _cor0)
'get_selected_items'/3 =
    %% Line 850
    fun (_cor2,_cor1,_cor0) ->
	let <Item> =
	    %% Line 851
	    call 'wxListCtrl':'getNextItem'
		(_cor2, _cor1, [{'geometry',1}|[{'state',4}]])
	in  %% Line 853
	    case Item of
	      %% Line 854
	      <-1> when 'true' ->
		  %% Line 855
		  call 'lists':'reverse'
		      (_cor0)
	      %% Line 856
	      <_cor8> when 'true' ->
		  %% Line 857
		  apply 'get_selected_items'/3
		      (_cor2, Item, [Item|_cor0])
	    end
'get_indecies'/2 =
    %% Line 860
    fun (_cor1,_cor0) ->
	%% Line 861
	apply 'get_indecies'/3
	    (_cor1, 0, _cor0)
'get_indecies'/3 =
    %% Line 862
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Rest],_cor9,[H|T]>
	      when call 'erlang':'=:='
		    (_cor9,
		     I) ->
	      let <_cor3> =
		  %% Line 863
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor4> =
		      %% Line 863
		      apply 'get_indecies'/3
			  (Rest, _cor3, T)
		  in  %% Line 863
		      [H|_cor4]
	  %% Line 864
	  <Rest = [_cor10|_cor11],I,[_cor12|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 865
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 865
		  apply 'get_indecies'/3
		      (Rest, _cor5, T)
	  %% Line 866
	  <_cor13,_cor14,_cor15> when 'true' ->
	      %% Line 867
	      []
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('observer_trace_wx')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('observer_trace_wx', _cor0)
end