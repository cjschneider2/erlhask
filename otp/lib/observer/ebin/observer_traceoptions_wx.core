module 'observer_traceoptions_wx' ['module_info'/0,
				   'module_info'/1,
				   'output'/2,
				   'process_trace'/2,
				   'select_matchspec'/3,
				   'select_nodes'/2,
				   'trace_pattern'/4]
    attributes [%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 19
		'type' =
		    %% Line 19
		    [{{'record','match_spec'},[{'record_field',19,{'atom',19,'name'},{'string',19,[]}}|[{'record_field',20,{'atom',20,'term'},{'nil',20}}|[{'record_field',21,{'atom',21,'str'},{'nil',21}}|[{'record_field',22,{'atom',22,'func'},{'string',22,[]}}]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','tpattern'},[{'record_field',24,{'atom',24,'m'}}|[{'record_field',24,{'atom',24,'fa'}}|[{'record_field',24,{'atom',24,'ms'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','traced_func'},[{'record_field',26,{'atom',26,'func_name'}}|[{'record_field',27,{'atom',27,'arity'}}|[{'record_field',28,{'atom',28,'match_spec'},{'record',28,'match_spec',[]}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','create_menu'},[{'record_field',31,{'atom',31,'id'}}|[{'record_field',32,{'atom',32,'text'}}|[{'record_field',33,{'atom',33,'help'},{'nil',33}}|[{'record_field',34,{'atom',34,'type'},{'atom',34,'append'}}|[{'record_field',35,{'atom',35,'check'},{'atom',35,'false'}}]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','attrs'},[{'record_field',38,{'atom',38,'even'}}|[{'record_field',38,{'atom',38,'odd'}}|[{'record_field',38,{'atom',38,'searched'}}|[{'record_field',38,{'atom',38,'deleted'}}|[{'record_field',38,{'atom',38,'changed_odd'}}|[{'record_field',38,{'atom',38,'changed_even'}}|[{'record_field',38,{'atom',38,'new_odd'}}|[{'record_field',38,{'atom',38,'new_even'}}]]]]]]]],[]}]]
'process_trace'/2 =
    %% Line 27
    fun (_cor1,_cor0) ->
	let <Dialog> =
	    %% Line 28
	    call 'wxDialog':'new'
		(_cor1, -1, [80|[114|[111|[99|[101|[115|[115|[32|[79|[112|[116|[105|[111|[110|[115]]]]]]]]]]]]]]], %% Line 29
														   [{'style',536877120}])
	in  let <Panel> =
		%% Line 30
		call 'wxPanel':'new'
		    (Dialog)
	    in  let <MainSz> =
		    %% Line 31
		    call 'wxBoxSizer':'new'
			(8)
		in  let <PanelSz> =
			%% Line 32
			call 'wxBoxSizer':'new'
			    (4)
		    in  let <LeftSz> =
			    %% Line 33
			    call 'wxStaticBoxSizer':'new'
				(8, Panel, [{'label',[84|[114|[97|[99|[105|[110|[103|[32|[111|[112|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]}])
			in  let <RightSz> =
				%% Line 34
				call 'wxStaticBoxSizer':'new'
				    (8, Panel, [{'label',[73|[110|[104|[101|[114|[105|[116|[97|[110|[99|[101|[32|[111|[112|[116|[105|[111|[110|[115|[58]]]]]]]]]]]]]]]]]]]]}])
			    in  let <FuncBox> =
				    %% Line 36
				    call 'wxCheckBox':'new'
					(Panel, -1, [84|[114|[97|[99|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]], [])
				in  let <_cor14> =
					%% Line 37
					call 'lists':'member'
					    ('functions', _cor0)
				    in  do  %% Line 37
					    apply 'check_box'/2
						(FuncBox, _cor14)
					    let <SendBox> =
						%% Line 38
						call 'wxCheckBox':'new'
						    (Panel, -1, [84|[114|[97|[99|[101|[32|[115|[101|[110|[100|[32|[109|[101|[115|[115|[97|[103|[101]]]]]]]]]]]]]]]]]], [])
					    in  let <_cor17> =
						    %% Line 39
						    call 'lists':'member'
							('send', _cor0)
						in  do  %% Line 39
							apply 'check_box'/2
							    (SendBox, _cor17)
							let <RecBox> =
							    %% Line 40
							    call 'wxCheckBox':'new'
								(Panel, -1, [84|[114|[97|[99|[101|[32|[114|[101|[99|[101|[105|[118|[101|[32|[109|[101|[115|[115|[97|[103|[101]]]]]]]]]]]]]]]]]]]]], [])
							in  let <_cor20> =
								%% Line 41
								call 'lists':'member'
								    ('receive', _cor0)
							    in  do  %% Line 41
								    apply 'check_box'/2
									(RecBox, _cor20)
								    let <EventBox> =
									%% Line 42
									call 'wxCheckBox':'new'
									    (Panel, -1, [84|[114|[97|[99|[101|[32|[112|[114|[111|[99|[101|[115|[115|[32|[101|[118|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]], [])
								    in  let <_cor23> =
									    %% Line 43
									    call 'lists':'member'
										('events', _cor0)
									in  do  %% Line 43
										apply 'check_box'/2
										    (EventBox, _cor23)
										%% Line 45
										case %% Line 46
										     apply 'optionpage_top_right'/4
											 (Panel, RightSz, [{'flag',128}|[{'border',5}]], [115|[112|[97|[119|[110]]]]]) of
										  <{SpawnBox,SpwnAllRadio,SpwnFirstRadio}> when 'true' ->
										      %% Line 47
										      case %% Line 48
											   apply 'optionpage_top_right'/4
											       (Panel, RightSz, [{'flag',128}|[{'border',5}]], [108|[105|[110|[107]]]]) of
											<{LinkBox,LinkAllRadio,LinkFirstRadio}> when 'true' ->
											    let <_cor28> =
												%% Line 49
												( case call 'lists':'member'
													   ('on_spawn', _cor0) of
												    ( <( 'true'
													 -| ['compiler_generated'] )> when 'true' ->
													  'true'
												      -| ['compiler_generated'] )
												    ( <( 'false'
													 -| ['compiler_generated'] )> when 'true' ->
													  call 'lists':'member'
													      ('on_first_spawn', _cor0)
												      -| ['compiler_generated'] )
												    ( <_cor26> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {( 'badarg'
														      -| ['compiler_generated'] ),_cor26}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											    in  let <_cor32> =
												    %% Line 50
												    ( case call 'lists':'member'
													       ('on_link', _cor0) of
													( <( 'true'
													     -| ['compiler_generated'] )> when 'true' ->
													      'true'
													  -| ['compiler_generated'] )
													( <( 'false'
													     -| ['compiler_generated'] )> when 'true' ->
													      call 'lists':'member'
														  ('on_first_link', _cor0)
													  -| ['compiler_generated'] )
													( <_cor30> when 'true' ->
													      ( call ( 'erlang'
														       -| ['compiler_generated'] ):( 'error'
																		     -| ['compiler_generated'] )
														    (( {( 'badarg'
															  -| ['compiler_generated'] ),_cor30}
														       -| ['compiler_generated'] ))
														-| ['compiler_generated'] )
													  -| ['compiler_generated'] )
												      end
												      -| ['compiler_generated'] )
												in  do  %% Line 51
													apply 'check_box'/2
													    (SpawnBox, _cor28)
													do  %% Line 52
													    apply 'check_box'/2
														(LinkBox, _cor32)
													    do  %% Line 53
														apply 'enable'/2
														    (SpawnBox, [SpwnAllRadio|[SpwnFirstRadio|[]]])
														do  %% Line 54
														    apply 'enable'/2
															(LinkBox, [LinkAllRadio|[LinkFirstRadio|[]]])
														    do  %% Line 55
															( letrec
															      'lc$^0'/1 =
																  fun (_cor36) ->
																      case _cor36 of
																	<[%% Line 56
																	  {Radio,Opt}|_cor35]> when 'true' ->
																	    let <_cor37> =
																		call 'lists':'member'
																		    (Opt, _cor0)
																	    in  do  call 'wxRadioButton':'setValue'
																			(Radio, _cor37)
																		    %% Line 56
																		    apply 'lc$^0'/1
																			(_cor35)
																	( <[_cor34|_cor35]> when 'true' ->
																	      %% Line 56
																	      apply 'lc$^0'/1
																		  (_cor35)
																	  -| ['compiler_generated'] )
																	<[]> when 'true' ->
																	    []
																	( <_cor36> when 'true' ->
																	      ( primop 'match_fail'
																		    ({'function_clause',_cor36})
																		-| [{'function_name',{'lc$^0',1}}] )
																	  -| ['compiler_generated'] )
																      end
															  in  apply 'lc$^0'/1
																  (%% Line 56
																   [{SpwnAllRadio,'on_spawn'}|[{SpwnFirstRadio,'on_first_spawn'}|%% Line 57
																								 [{LinkAllRadio,'on_link'}|[{LinkFirstRadio,'on_first_link'}|[]]]]])
															  -| ['list_comprehension'] )
															do  %% Line 59
															    ( letrec
																  'lc$^1'/1 =
																      fun (_cor42) ->
																	  case _cor42 of
																	    <[CheckBox|_cor41]> when 'true' ->
																		do  call 'wxSizer':'add'
																			(LeftSz, CheckBox, [])
																		    apply 'lc$^1'/1
																			(_cor41)
																	    <[]> when 'true' ->
																		[]
																	    ( <_cor42> when 'true' ->
																		  ( primop 'match_fail'
																			({'function_clause',_cor42})
																		    -| [{'function_name',{'lc$^1',1}}] )
																	      -| ['compiler_generated'] )
																	  end
															      in  apply 'lc$^1'/1
																      ([FuncBox|[SendBox|[RecBox|[EventBox|[]]]]])
															      -| ['list_comprehension'] )
															    do  %% Line 60
																call 'wxSizer':'add'
																    (LeftSz, 150, -1)
																do  %% Line 62
																    call 'wxSizer':'add'
																	(PanelSz, LeftSz, [{'flag',8192}|[{'proportion',1}]])
																    do  %% Line 63
																	call 'wxSizer':'add'
																	    (PanelSz, RightSz, [{'flag',8192}|[{'proportion',1}]])
																	do  %% Line 64
																	    call 'wxPanel':'setSizer'
																		(Panel, PanelSz)
																	    do  %% Line 65
																		call 'wxSizer':'add'
																		    (MainSz, Panel, [{'flag',8192}|[{'proportion',1}]])
																		let <Buttons> =
																		    %% Line 66
																		    call 'wxDialog':'createButtonSizer'
																			(Dialog, 20)
																		in  do  %% Line 67
																			call 'wxSizer':'add'
																			    (MainSz, Buttons, [{'flag',8432}|[{'border',5}]])
																			do  %% Line 68
																			    call 'wxWindow':'setSizerAndFit'
																				(Dialog, MainSz)
																			    do  %% Line 69
																				call 'wxSizer':'setSizeHints'
																				    (MainSz, Dialog)
																				let <_cor56> =
																				    %% Line 71
																				    ( fun (_cor53,_cor52) ->
																					  case <_cor53,_cor52> of
																					    <{'wx',_cor78,_cor79,_cor80,{'wxCommand',_cor81,_cor82,_cor83,_cor84}},_cor85> when 'true' ->
																						%% Line 72
																						apply 'enable'/2
																						    (SpawnBox, [SpwnAllRadio|[SpwnFirstRadio|[]]])
																					    ( <_cor55,_cor54> when 'true' ->
																						  ( primop 'match_fail'
																							({'function_clause',_cor55,_cor54})
																						    -| [{'function_name',{'-process_trace/2-fun-0-',2}}] )
																					      -| ['compiler_generated'] )
																					  end
																				      -| [{'id',{0,0,'-process_trace/2-fun-0-'}}] )
																				in  do  %% Line 70
																					call 'wxCheckBox':'connect'
																					    (SpawnBox, 'command_checkbox_clicked', %% Line 71
																										   [{'callback',_cor56}|%% Line 73
																													[]])
																					let <_cor61> =
																					    %% Line 75
																					    ( fun (_cor58,_cor57) ->
																						  case <_cor58,_cor57> of
																						    <{'wx',_cor86,_cor87,_cor88,{'wxCommand',_cor89,_cor90,_cor91,_cor92}},_cor93> when 'true' ->
																							%% Line 76
																							apply 'enable'/2
																							    (LinkBox, [LinkAllRadio|[LinkFirstRadio|[]]])
																						    ( <_cor60,_cor59> when 'true' ->
																							  ( primop 'match_fail'
																								({'function_clause',_cor60,_cor59})
																							    -| [{'function_name',{'-process_trace/2-fun-1-',2}}] )
																						      -| ['compiler_generated'] )
																						  end
																					      -| [{'id',{0,0,'-process_trace/2-fun-1-'}}] )
																					in  do  %% Line 74
																						call 'wxCheckBox':'connect'
																						    (LinkBox, 'command_checkbox_clicked', %% Line 75
																											  [{'callback',_cor61}|%% Line 77
																													       []])
																						%% Line 79
																						case call 'wxDialog':'showModal'
																							 (Dialog) of
																						  %% Line 80
																						  <5100> when 'true' ->
																						      let <All> =
																							  %% Line 81
																							  [{SendBox,'send'}|[{RecBox,'receive'}|%% Line 82
																												[{FuncBox,'functions'}|[{EventBox,'events'}|%% Line 83
																																	    [{{SpawnBox,SpwnAllRadio},'on_spawn'}|%% Line 84
																																						  [{{SpawnBox,SpwnFirstRadio},'on_first_spawn'}|%% Line 85
																																												[{{LinkBox,LinkAllRadio},'on_link'}|%% Line 86
																																																    [{{LinkBox,LinkFirstRadio},'on_first_link'}|[]]]]]]]]]
																						      in  let <Check> =
																							      %% Line 87
																							      ( fun (_cor65) ->
																								    case _cor65 of
																								      <{Box,Radio}> when 'true' ->
																									  %% Line 88
																									  ( case call 'wxCheckBox':'getValue'
																										     (Box) of
																									      ( <( 'true'
																										   -| ['compiler_generated'] )> when 'true' ->
																										    call 'wxRadioButton':'getValue'
																											(Radio)
																										-| ['compiler_generated'] )
																									      ( <( 'false'
																										   -| ['compiler_generated'] )> when 'true' ->
																										    'false'
																										-| ['compiler_generated'] )
																									      ( <_cor63> when 'true' ->
																										    ( call ( 'erlang'
																											     -| ['compiler_generated'] ):( 'error'
																															   -| ['compiler_generated'] )
																											  (( {( 'badarg'
																												-| ['compiler_generated'] ),_cor63}
																											     -| ['compiler_generated'] ))
																										      -| ['compiler_generated'] )
																										-| ['compiler_generated'] )
																									    end
																									    -| ['compiler_generated'] )
																								      %% Line 89
																								      <Box> when 'true' ->
																									  %% Line 90
																									  call 'wxCheckBox':'getValue'
																									      (Box)
																								    end
																								-| [{'id',{0,0,'-process_trace/2-fun-2-'}}] )
																							  in  let <_cor73> =
																								  %% Line 92
																								  ( letrec
																									'lc$^2'/1 =
																									    fun (_cor70) ->
																										case _cor70 of
																										  <[{Tick,Id}|_cor69]> when 'true' ->
																										      ( case apply Check
																												 (Tick) of
																											  <'true'> when 'true' ->
																											      let <_cor71> =
																												  apply 'lc$^2'/1
																												      (_cor69)
																											      in  ( [Id|_cor71]
																												    -| ['compiler_generated'] )
																											  ( <'false'> when 'true' ->
																												apply 'lc$^2'/1
																												    (_cor69)
																											    -| ['compiler_generated'] )
																											  ( <_cor72> when 'true' ->
																												primop 'match_fail'
																												    ({'case_clause',_cor72})
																											    -| ['compiler_generated'] )
																											end
																											-| ['list_comprehension'] )
																										  ( <[_cor68|_cor69]> when 'true' ->
																											apply 'lc$^2'/1
																											    (_cor69)
																										    -| ['compiler_generated'] )
																										  <[]> when 'true' ->
																										      []
																										  ( <_cor70> when 'true' ->
																											( primop 'match_fail'
																											      ({'function_clause',_cor70})
																											  -| [{'function_name',{'lc$^2',1}}] )
																										    -| ['compiler_generated'] )
																										end
																								    in  apply 'lc$^2'/1
																									    (All)
																								    -| ['list_comprehension'] )
																							      in  do  %% Line 93
																								      call 'wxDialog':'destroy'
																									  (Dialog)
																								      %% Line 94
																								      call 'lists':'reverse'
																									  (_cor73)
																						  %% Line 95
																						  <5101> when 'true' ->
																						      do  %% Line 96
																							  call 'wxDialog':'destroy'
																							      (Dialog)
																							  %% Line 97
																							  call 'erlang':'throw'
																							      ('cancel')
																						  ( <_cor75> when 'true' ->
																							primop 'match_fail'
																							    ({'case_clause',_cor75})
																						    -| ['compiler_generated'] )
																						end
											( <_cor25> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_cor25})
											  -| ['compiler_generated'] )
										      end
										  ( <_cor24> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor24})
										    -| ['compiler_generated'] )
										end
'trace_pattern'/4 =
    %% Line 100
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 101
	try
	    let <Module> =
		%% Line 102
		apply 'module_selector'/2
		    (_cor2, _cor1)
	    in  let <MFAs> =
		    %% Line 103
		    apply 'function_selector'/3
			(_cor2, _cor1, Module)
		in  let <MatchSpec> =
			%% Line 104
			apply 'select_matchspec'/3
			    (_cor3, _cor2, _cor0)
		    in  let <_cor11> =
			    %% Line 105
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor9) ->
					  case _cor9 of
					    <[{M,F,A}|_cor8]> when 'true' ->
						let <_cor10> =
						    apply 'lc$^0'/1
							(_cor8)
						in  ( [{'tpattern',M,{F,A},MatchSpec}|_cor10]
						      -| ['compiler_generated'] )
					    ( <[_cor7|_cor8]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor8)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor9> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor9})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (MFAs)
			      -| ['list_comprehension'] )
			in  %% Line 105
			    {Module,_cor11}
	of <_cor12> ->
	    _cor12
	catch <_cor15,_cor14,_cor13> ->
	    case <_cor15,_cor14,_cor13> of
	      %% Line 106
	      <'throw','cancel',_cor20> when 'true' ->
		  'cancel'
	      ( <_cor15,_cor14,_cor13> when 'true' ->
		    primop 'raise'
			(_cor13, _cor14)
		-| ['compiler_generated'] )
	    end
'select_nodes'/2 =
    %% Line 109
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 110
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[X|_cor3]> when 'true' ->
				let <_cor5> =
				    call 'erlang':'atom_to_list'
					(X)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [{_cor5,X}|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 111
	    apply 'check_selector'/2
		(_cor1, _cor7)
'module_selector'/2 =
    %% Line 113
    fun (_cor1,_cor0) ->
	let <Dialog> =
	    %% Line 114
	    call 'wxDialog':'new'
		(_cor1, -1, [83|[101|[108|[101|[99|[116|[32|[77|[111|[100|[117|[108|[101]]]]]]]]]]]]], %% Line 115
												       [{'style',536877120}|[{'size',{400,400}}]])
	in  let <Panel> =
		%% Line 117
		call 'wxPanel':'new'
		    (Dialog)
	    in  let <PanelSz> =
		    %% Line 118
		    call 'wxBoxSizer':'new'
			(8)
		in  let <MainSz> =
			%% Line 119
			call 'wxBoxSizer':'new'
			    (8)
		    in  let <TxtCtrl> =
			    %% Line 121
			    call 'wxTextCtrl':'new'
				(Panel, -1)
			in  let <ListBox> =
				%% Line 122
				call 'wxListBox':'new'
				    (Panel, -1, [{'style',32}])
			    in  do  %% Line 123
				    call 'wxSizer':'add'
					(PanelSz, TxtCtrl, [{'flag',8192}])
				    do  %% Line 124
					call 'wxSizer':'add'
					    (PanelSz, ListBox, [{'flag',8192}|[{'proportion',1}]])
					do  %% Line 125
					    call 'wxPanel':'setSizer'
						(Panel, PanelSz)
					    do  %% Line 126
						call 'wxSizer':'add'
						    (MainSz, Panel, [{'flag',8432}|[{'border',5}|[{'proportion',1}]]])
						let <Buttons> =
						    %% Line 128
						    call 'wxDialog':'createButtonSizer'
							(Dialog, 20)
						in  do  %% Line 129
							call 'wxSizer':'add'
							    (MainSz, Buttons, [{'flag',8432}|[{'border',5}|[{'proportion',0}]]])
							do  %% Line 131
							    call 'wxWindow':'setSizer'
								(Dialog, MainSz)
							    let <OkId> =
								%% Line 132
								call 'wxDialog':'getAffirmativeId'
								    (Dialog)
							    in  let <OkButt> =
								    %% Line 133
								    call 'wxWindow':'findWindowById'
									(OkId)
								in  do  %% Line 134
									call 'wxWindow':'disable'
									    (OkButt)
									do  %% Line 135
									    call 'wxWindow':'setFocus'
										(TxtCtrl)
									    let <Modules> =
										%% Line 137
										apply 'get_modules'/1
										    (_cor0)
									    in  let <_cor32> =
										    %% Line 138
										    ( letrec
											  'lc$^0'/1 =
											      fun (_cor29) ->
												  case _cor29 of
												    <[X|_cor28]> when 'true' ->
													let <_cor30> =
													    call 'erlang':'atom_to_list'
														(X)
													in  let <_cor31> =
														apply 'lc$^0'/1
														    (_cor28)
													    in  ( [{_cor30,X}|_cor31]
														  -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_cor29> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor29})
													    -| [{'function_name',{'lc$^0',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  apply 'lc$^0'/1
											      (Modules)
										      -| ['list_comprehension'] )
										in  do  %% Line 139
											apply 'filter_listbox_data'/3
											    ([], _cor32, ListBox)
											let <_cor38> =
											    %% Line 141
											    ( fun (_cor35,_cor34) ->
												  case <_cor35,_cor34> of
												    <{'wx',_cor57,_cor58,_cor59,{'wxCommand',_cor60,Input,_cor61,_cor62}},_cor63> when 'true' ->
													%% Line 142
													apply 'filter_listbox_data'/3
													    (Input, _cor32, ListBox)
												    ( <_cor37,_cor36> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor37,_cor36})
													    -| [{'function_name',{'-module_selector/2-fun-0-',2}}] )
												      -| ['compiler_generated'] )
												  end
											      -| [{'id',{0,0,'-module_selector/2-fun-0-'}}] )
											in  do  %% Line 140
												call 'wxTextCtrl':'connect'
												    (TxtCtrl, 'command_text_updated', %% Line 141
																      [{'callback',_cor38}|%% Line 143
																			   []])
												let <_cor43> =
												    %% Line 145
												    ( fun (_cor40,_cor39) ->
													  call 'wxDialog':'endModal'
													      (Dialog, 5100)
												      -| [{'id',{0,0,'-module_selector/2-fun-1-'}}] )
												in  do  %% Line 144
													call 'wxListBox':'connect'
													    (ListBox, 'command_listbox_doubleclicked', %% Line 145
																		       [{'callback',_cor43}|[]])
													let <_cor50> =
													    %% Line 147
													    ( fun (_cor47,_cor46) ->
														  case <_cor47,_cor46> of
														    <{'wx',_cor66,_cor67,_cor68,{'wxCommand',_cor69,_cor70,Id,_cor71}},_cor72> when 'true' ->
															%% Line 148
															( case <> of
															    ( <>
																  when call 'erlang':'>='
																	(Id,
																	 0) ->
																  call 'wxWindow':'enable'
																      (OkButt)
															      -| ['compiler_generated'] )
															    ( <> when 'true' ->
																  'false'
															      -| ['compiler_generated'] )
															  end
															  -| ['compiler_generated'] )
														    ( <_cor49,_cor48> when 'true' ->
															  ( primop 'match_fail'
																({'function_clause',_cor49,_cor48})
															    -| [{'function_name',{'-module_selector/2-fun-2-',2}}] )
														      -| ['compiler_generated'] )
														  end
													      -| [{'id',{0,0,'-module_selector/2-fun-2-'}}] )
													in  do  %% Line 146
														call 'wxListBox':'connect'
														    (ListBox, 'command_listbox_selected', %% Line 147
																			  [{'callback',_cor50}|%% Line 149
																					       []])
														%% Line 151
														case call 'wxDialog':'showModal'
															 (Dialog) of
														  %% Line 152
														  <5100> when 'true' ->
														      let <SelId> =
															  %% Line 153
															  call 'wxListBox':'getSelection'
															      (ListBox)
														      in  %% Line 154
															  case <> of
															    %% Line 155
															    <>
																when call 'erlang':'>='
																      (SelId,
																       0) ->
																let <Module> =
																    %% Line 156
																    call 'wxListBox':'getClientData'
																	(ListBox, SelId)
																in  do  %% Line 157
																	call 'wxDialog':'destroy'
																	    (Dialog)
																	%% Line 158
																	Module
															    %% Line 159
															    <> when 'true' ->
																do  %% Line 160
																    call 'wxDialog':'destroy'
																	(Dialog)
																    %% Line 161
																    call 'erlang':'throw'
																	('cancel')
															  end
														  %% Line 163
														  <5101> when 'true' ->
														      do  %% Line 164
															  call 'wxDialog':'destroy'
															      (Dialog)
															  %% Line 165
															  call 'erlang':'throw'
															      ('cancel')
														  ( <_cor54> when 'true' ->
															primop 'match_fail'
															    ({'case_clause',_cor54})
														    -| ['compiler_generated'] )
														end
'function_selector'/3 =
    %% Line 168
    fun (_cor2,_cor1,_cor0) ->
	let <Functions> =
	    %% Line 169
	    call 'observer_wx':'try_rpc'
		(_cor1, _cor0, 'module_info', ['functions'])
	in  let <Externals> =
		%% Line 170
		call 'observer_wx':'try_rpc'
		    (_cor1, _cor0, 'module_info', ['exports'])
	    in  let <_cor12> =
		    %% Line 172
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor9) ->
				  case _cor9 of
				    <[{Name,Arity}|_cor6]> when 'true' ->
					%% Line 173
					( case call 'erl_internal':'guard_bif'
						   (Name, Arity) of
					    <'false'> when 'true' ->
						let <_cor10> =
						    apply 'lc$^0'/1
							(_cor6)
						in  ( [{Name,Arity}|_cor10]
						      -| ['compiler_generated'] )
					    ( <'true'> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor6)
					      -| ['compiler_generated'] )
					    ( <_cor_variable> when 'true' ->
						  call 'erlang':'error'
						      ('badarg')
					      -| ['compiler_generated'] )
					  end
					  -| ['list_comprehension'] )
				    ( <[_cor5|_cor6]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor6)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor9> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor7> =
			      call 'erlang':'++'
				  (Externals, Functions)
			  in  apply 'lc$^0'/1
				  (_cor7)
		      -| ['list_comprehension'] )
		in  let <Choices> =
			%% Line 172
			call 'lists':'usort'
			    (_cor12)
		    in  let <ParsedChoices> =
			    %% Line 174
			    apply 'parse_function_names'/1
				(Choices)
			in  %% Line 175
			    case apply 'check_selector'/2
				     (_cor2, ParsedChoices) of
			      %% Line 176
			      <[]> when 'true' ->
				  [{_cor0,'_','_'}|[]]
			      %% Line 177
			      <FAs> when 'true' ->
				  %% Line 178
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor17) ->
						case _cor17 of
						  <[{F,A}|_cor16]> when 'true' ->
						      let <_cor18> =
							  apply 'lc$^1'/1
							      (_cor16)
						      in  ( [{_cor0,F,A}|_cor18]
							    -| ['compiler_generated'] )
						  ( <[_cor15|_cor16]> when 'true' ->
							apply 'lc$^1'/1
							    (_cor16)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor17> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor17})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (FAs)
				    -| ['list_comprehension'] )
			    end
'check_selector'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	let <Dialog> =
	    %% Line 182
	    call 'wxDialog':'new'
		(_cor1, -1, [84|[114|[97|[99|[101|[32|[70|[117|[110|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]], %% Line 183
														 [{'style',536877120}|[{'size',{400,400}}]])
	in  let <Panel> =
		%% Line 186
		call 'wxPanel':'new'
		    (Dialog)
	    in  let <PanelSz> =
		    %% Line 187
		    call 'wxBoxSizer':'new'
			(8)
		in  let <MainSz> =
			%% Line 188
			call 'wxBoxSizer':'new'
			    (8)
		    in  let <TxtCtrl> =
			    %% Line 190
			    call 'wxTextCtrl':'new'
				(Panel, -1)
			in  let <ListBox> =
				%% Line 191
				call 'wxCheckListBox':'new'
				    (Panel, -1, [{'style',128}])
			    in  do  %% Line 192
				    call 'wxSizer':'add'
					(PanelSz, TxtCtrl, [{'flag',8192}])
				    do  %% Line 193
					call 'wxSizer':'add'
					    (PanelSz, ListBox, [{'flag',8192}|[{'proportion',1}]])
					let <SelAllBtn> =
					    %% Line 194
					    call 'wxButton':'new'
						(Panel, -1, [{'label',[67|[104|[101|[99|[107|[32|[86|[105|[115|[105|[98|[108|[101]]]]]]]]]]]]]}])
					in  let <DeSelAllBtn> =
						%% Line 195
						call 'wxButton':'new'
						    (Panel, -1, [{'label',[85|[110|[99|[104|[101|[99|[107|[32|[86|[105|[115|[105|[98|[108|[101]]]]]]]]]]]]]]]}])
					    in  let <ButtonSz> =
						    %% Line 196
						    call 'wxBoxSizer':'new'
							(4)
						in  do  %% Line 197
							( letrec
							      'lc$^0'/1 =
								  fun (_cor21) ->
								      case _cor21 of
									<[Button|_cor20]> when 'true' ->
									    do  call 'wxSizer':'add'
										    (ButtonSz, Button, [])
										apply 'lc$^0'/1
										    (_cor20)
									<[]> when 'true' ->
									    []
									( <_cor21> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor21})
										-| [{'function_name',{'lc$^0',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  apply 'lc$^0'/1
								  ([SelAllBtn|[DeSelAllBtn|[]]])
							  -| ['list_comprehension'] )
							do  %% Line 198
							    call 'wxSizer':'add'
								(PanelSz, ButtonSz, [{'flag',8432}|[{'border',5}|[{'proportion',0}]]])
							    do  %% Line 200
								call 'wxPanel':'setSizer'
								    (Panel, PanelSz)
								do  %% Line 201
								    call 'wxSizer':'add'
									(MainSz, Panel, [{'flag',8432}|[{'border',5}|[{'proportion',1}]]])
								    let <Buttons> =
									%% Line 204
									call 'wxDialog':'createButtonSizer'
									    (Dialog, 20)
								    in  do  %% Line 205
									    call 'wxSizer':'add'
										(MainSz, Buttons, [{'flag',8432}|[{'border',5}|[{'proportion',0}]]])
									    do  %% Line 207
										call 'wxWindow':'setSizer'
										    (Dialog, MainSz)
										do  %% Line 208
										    call 'wxWindow':'setFocus'
											(TxtCtrl)
										    do  %% Line 210
											apply 'filter_listbox_data'/4
											    ([], _cor0, ListBox, 'false')
											let <_cor42> =
											    %% Line 214
											    ( fun (_cor39,_cor38) ->
												  case <_cor39,_cor38> of
												    <{'wx',_cor96,_cor97,_cor98,{'wxCommand',_cor99,Input,_cor100,_cor101}},_cor102> when 'true' ->
													%% Line 215
													apply 'filter_listbox_data'/4
													    (Input, _cor0, ListBox, 'false')
												    ( <_cor41,_cor40> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor41,_cor40})
													    -| [{'function_name',{'-check_selector/2-fun-0-',2}}] )
												      -| ['compiler_generated'] )
												  end
											      -| [{'id',{0,0,'-check_selector/2-fun-0-'}}] )
											in  do  %% Line 212
												call 'wxTextCtrl':'connect'
												    (TxtCtrl, 'command_text_updated', %% Line 213
																      [{'callback',_cor42}|%% Line 216
																			   []])
												let <Self> =
												    %% Line 217
												    call 'erlang':'self'
													()
												in  let <GetClientData> =
													%% Line 221
													( fun (_cor47,_cor46) ->
													      let <String> =
														  %% Line 222
														  call 'wxListBox':'getString'
														      (_cor47, _cor46)
													      in  %% Line 223
														  case call 'lists':'keyfind'
															   (String, 1, _cor0) of
														    <{_cor103,Data}> when 'true' ->
															%% Line 224
															Data
														    ( <_cor45> when 'true' ->
															  primop 'match_fail'
															      ({'badmatch',_cor45})
														      -| ['compiler_generated'] )
														  end
													  -| [{'id',{0,0,'-check_selector/2-fun-1-'}}] )
												    in  let <_cor57> =
													    %% Line 228
													    ( fun (_cor54,_cor53) ->
														  case <_cor54,_cor53> of
														    <{'wx',_cor104,_cor105,_cor106,{'wxCommand',_cor107,_cor108,N,_cor109}},_cor110> when 'true' ->
															let <_cor52> =
															    %% Line 229
															    call 'wxCheckListBox':'isChecked'
																(ListBox, N)
															in  let <_cor51> =
																%% Line 230
																apply GetClientData
																    (ListBox, N)
															    in  %% Line 229
																call 'erlang':'!'
																    (Self, {ListBox,_cor52,_cor51})
														    ( <_cor56,_cor55> when 'true' ->
															  ( primop 'match_fail'
																({'function_clause',_cor56,_cor55})
															    -| [{'function_name',{'-check_selector/2-fun-2-',2}}] )
														      -| ['compiler_generated'] )
														  end
													      -| [{'id',{0,0,'-check_selector/2-fun-2-'}}] )
													in  do  %% Line 226
														call 'wxCheckListBox':'connect'
														    (ListBox, 'command_checklistbox_toggled', %% Line 227
																			      [{'callback',_cor57}|%% Line 231
																						   []])
														let <Check> =
														    %% Line 232
														    ( fun (_cor60,_cor59) ->
															  do  %% Line 233
															      call 'wxCheckListBox':'check'
																  (ListBox, _cor60, [{'check',_cor59}|[]])
															      let <_cor58> =
																  %% Line 234
																  apply GetClientData
																      (ListBox, _cor60)
															      in  %% Line 234
																  call 'erlang':'!'
																      (Self, {ListBox,_cor59,_cor58})
														      -| [{'id',{0,0,'-check_selector/2-fun-3-'}}] )
														in  let <_cor78> =
															%% Line 237
															( fun (_cor75,_cor74) ->
															      case <_cor75,_cor74> of
																<{'wx',_cor111,_cor112,_cor113,_cor114},_cor115> when 'true' ->
																    let <Count> =
																	%% Line 238
																	call 'wxListBox':'getCount'
																	    (ListBox)
																    in  %% Line 239
																	( letrec
																	      'lc$^1'/1 =
																		  fun (_cor70) ->
																		      case _cor70 of
																			<[%% Line 240
																			  SelId|_cor66]> when 'true' ->
																			    %% Line 241
																			    ( case call 'wxCheckListBox':'isChecked'
																				       (ListBox, SelId) of
																				<'false'> when 'true' ->
																				    let <_cor71> =
																					apply Check
																					    (SelId, 'true')
																				    in  let <_cor72> =
																					    apply 'lc$^1'/1
																						(_cor66)
																					in  ( [_cor71|_cor72]
																					      -| ['compiler_generated'] )
																				( <'true'> when 'true' ->
																				      apply 'lc$^1'/1
																					  (_cor66)
																				  -| ['compiler_generated'] )
																				( <_cor_variable> when 'true' ->
																				      call 'erlang':'error'
																					  ('badarg')
																				  -| ['compiler_generated'] )
																			      end
																			      -| ['list_comprehension'] )
																			<[]> when 'true' ->
																			    []
																			( <_cor70> when 'true' ->
																			      ( primop 'match_fail'
																				    ({'function_clause',_cor70})
																				-| [{'function_name',{'lc$^1',1}}] )
																			  -| ['compiler_generated'] )
																		      end
																	  in  let <_cor67> =
																		  %% Line 240
																		  call 'erlang':'-'
																		      (Count, 1)
																	      in  let <_cor68> =
																		      %% Line 240
																		      call 'lists':'seq'
																			  (0, _cor67)
																		  in  apply 'lc$^1'/1
																			  (_cor68)
																	  -| ['list_comprehension'] )
																( <_cor77,_cor76> when 'true' ->
																      ( primop 'match_fail'
																	    ({'function_clause',_cor77,_cor76})
																	-| [{'function_name',{'-check_selector/2-fun-4-',2}}] )
																  -| ['compiler_generated'] )
															      end
															  -| [{'id',{0,0,'-check_selector/2-fun-4-'}}] )
														    in  do  %% Line 236
															    call 'wxButton':'connect'
																(SelAllBtn, 'command_button_clicked', %% Line 237
																				      [{'callback',_cor78}|%% Line 242
																							   []])
															    let <_cor92> =
																%% Line 244
																( fun (_cor89,_cor88) ->
																      case <_cor89,_cor88> of
																	<{'wx',_cor116,_cor117,_cor118,_cor119},_cor120> when 'true' ->
																	    let <Count> =
																		%% Line 245
																		call 'wxListBox':'getCount'
																		    (ListBox)
																	    in  %% Line 246
																		( letrec
																		      'lc$^2'/1 =
																			  fun (_cor84) ->
																			      case _cor84 of
																				<[%% Line 247
																				  SelId|_cor81]> when 'true' ->
																				    %% Line 248
																				    ( case call 'wxCheckListBox':'isChecked'
																					       (ListBox, SelId) of
																					<'true'> when 'true' ->
																					    let <_cor85> =
																						apply Check
																						    (SelId, 'false')
																					    in  let <_cor86> =
																						    apply 'lc$^2'/1
																							(_cor81)
																						in  ( [_cor85|_cor86]
																						      -| ['compiler_generated'] )
																					( <'false'> when 'true' ->
																					      apply 'lc$^2'/1
																						  (_cor81)
																					  -| ['compiler_generated'] )
																					( <_cor87> when 'true' ->
																					      primop 'match_fail'
																						  ({'case_clause',_cor87})
																					  -| ['compiler_generated'] )
																				      end
																				      -| ['list_comprehension'] )
																				<[]> when 'true' ->
																				    []
																				( <_cor84> when 'true' ->
																				      ( primop 'match_fail'
																					    ({'function_clause',_cor84})
																					-| [{'function_name',{'lc$^2',1}}] )
																				  -| ['compiler_generated'] )
																			      end
																		  in  let <_cor82> =
																			  %% Line 247
																			  call 'erlang':'-'
																			      (Count, 1)
																		      in  let <_cor83> =
																			      %% Line 247
																			      call 'lists':'seq'
																				  (0, _cor82)
																			  in  apply 'lc$^2'/1
																				  (_cor83)
																		  -| ['list_comprehension'] )
																	( <_cor91,_cor90> when 'true' ->
																	      ( primop 'match_fail'
																		    ({'function_clause',_cor91,_cor90})
																		-| [{'function_name',{'-check_selector/2-fun-5-',2}}] )
																	  -| ['compiler_generated'] )
																      end
																  -| [{'id',{0,0,'-check_selector/2-fun-5-'}}] )
															    in  do  %% Line 243
																    call 'wxButton':'connect'
																	(DeSelAllBtn, 'command_button_clicked', %% Line 244
																						[{'callback',_cor92}|%% Line 249
																								     []])
																    %% Line 250
																    case call 'wxDialog':'showModal'
																	     (Dialog) of
																      %% Line 251
																      <5100> when 'true' ->
																	  do  %% Line 252
																	      call 'wxDialog':'destroy'
																		  (Dialog)
																	      %% Line 253
																	      apply 'get_checked'/2
																		  (ListBox, [])
																      %% Line 254
																      <5101> when 'true' ->
																	  do  %% Line 255
																	      call 'wxDialog':'destroy'
																		  (Dialog)
																	      do  %% Line 256
																		  apply 'get_checked'/2
																		      (ListBox, [])
																		  %% Line 257
																		  call 'erlang':'throw'
																		      ('cancel')
																      ( <_cor93> when 'true' ->
																	    primop 'match_fail'
																		({'case_clause',_cor93})
																	-| ['compiler_generated'] )
																    end
'get_checked'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	%% Line 261
	receive
	  %% Line 262
	  <{_cor6,'true',FA}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      let <_cor2> =
		  %% Line 263
		  call 'lists':'delete'
		      (FA, _cor0)
	      in  %% Line 263
		  apply 'get_checked'/2
		      (_cor1, [FA|_cor2])
	  %% Line 264
	  <{_cor7,'false',FA}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor1) ->
	      let <_cor3> =
		  %% Line 265
		  call 'lists':'delete'
		      (FA, _cor0)
	      in  %% Line 265
		  apply 'get_checked'/2
		      (_cor1, _cor3)
	after %% Line 266
	      0 ->
	  %% Line 267
	  call 'lists':'reverse'
	      (_cor0)
'select_matchspec'/3 =
    %% Line 270
    fun (_cor2,_cor1,_cor0) ->
	let <Dialog> =
	    %% Line 271
	    call 'wxDialog':'new'
		(_cor1, -1, [84|[114|[97|[99|[101|[32|[77|[97|[116|[99|[104|[32|[83|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 272
																					     [{'style',536877120}|[{'size',{400,400}}]])
	in  let <Panel> =
		%% Line 275
		call 'wxPanel':'new'
		    (Dialog)
	    in  let <PanelSz> =
		    %% Line 276
		    call 'wxBoxSizer':'new'
			(8)
		in  let <MainSz> =
			%% Line 277
			call 'wxBoxSizer':'new'
			    (8)
		    in  let <TxtSz> =
			    %% Line 278
			    call 'wxStaticBoxSizer':'new'
				(8, Panel, [{'label',[77|[97|[116|[99|[104|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[58]]]]]]]]]]]]]]]]]]]]}])
			in  let <BtnSz> =
				%% Line 279
				call 'wxBoxSizer':'new'
				    (4)
			    in  let <SavedSz> =
				    %% Line 280
				    call 'wxStaticBoxSizer':'new'
					(8, Panel, [{'label',[83|[97|[118|[101|[100|[32|[109|[97|[116|[99|[104|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[115|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]}])
				in  let <TextCtrl> =
					%% Line 282
					apply 'create_styled_txtctrl'/1
					    (Panel)
				    in  do  %% Line 283
					    call 'wxSizer':'add'
						(TxtSz, TextCtrl, [{'flag',8192}|[{'proportion',1}]])
					    let <AddMsBtn> =
						%% Line 285
						call 'wxButton':'new'
						    (Panel, -1, [{'label',[78|[101|[119]]]}])
					    in  let <EditMsBtn> =
						    %% Line 286
						    call 'wxButton':'new'
							(Panel, -1, [{'label',[69|[100|[105|[116]]]]}])
						in  let <DelMsBtn> =
							%% Line 287
							call 'wxButton':'new'
							    (Panel, -1, [{'label',[68|[101|[108|[101|[116|[101]]]]]]}])
						    in  do  %% Line 288
							    call 'wxSizer':'add'
								(BtnSz, AddMsBtn)
							    do  %% Line 289
								call 'wxSizer':'add'
								    (BtnSz, EditMsBtn)
								do  %% Line 290
								    call 'wxSizer':'add'
									(BtnSz, DelMsBtn)
								    let <ListBox> =
									%% Line 292
									call 'wxListBox':'new'
									    (Panel, -1, [])
								    in  do  %% Line 293
									    call 'wxSizer':'add'
										(SavedSz, ListBox, [{'flag',8192}|[{'proportion',1}]])
									    do  %% Line 294
										call 'wxSizer':'add'
										    (PanelSz, TxtSz, [{'flag',8192}|[{'proportion',1}]])
										do  %% Line 295
										    call 'wxSizer':'add'
											(PanelSz, BtnSz)
										    do  %% Line 296
											call 'wxSizer':'add'
											    (PanelSz, SavedSz, [{'flag',8192}|[{'proportion',1}]])
											do  %% Line 298
											    call 'wxWindow':'setSizer'
												(Panel, PanelSz)
											    do  %% Line 299
												call 'wxSizer':'add'
												    (MainSz, Panel, [{'flag',8432}|[{'border',5}|[{'proportion',1}]]])
												let <Buttons> =
												    %% Line 301
												    call 'wxDialog':'createButtonSizer'
													(Dialog, 20)
												in  do  %% Line 302
													call 'wxSizer':'add'
													    (MainSz, Buttons, [{'flag',8432}|[{'border',5}|[{'proportion',0}]]])
													do  %% Line 304
													    call 'wxWindow':'setSizer'
														(Dialog, MainSz)
													    let <OkId> =
														%% Line 305
														call 'wxDialog':'getAffirmativeId'
														    (Dialog)
													    in  let <OkButt> =
														    %% Line 306
														    call 'wxWindow':'findWindowById'
															(OkId)
														in  do  %% Line 307
															call 'wxWindow':'disable'
															    (OkButt)
															do  %% Line 308
															    call 'wxWindow':'disable'
																(EditMsBtn)
															    do  %% Line 309
																call 'wxWindow':'disable'
																    (DelMsBtn)
																let <Choices> =
																    %% Line 311
																    apply 'ms_names'/1
																	(_cor0)
																in  do  %% Line 312
																	apply 'filter_listbox_data'/3
																	    ([], Choices, ListBox)
																	let <Add> =
																	    %% Line 314
																	    ( fun (_cor39,_cor38) ->
																		  %% Line 315
																		  case apply 'edit_ms'/3
																			   (TextCtrl, 'new', _cor1) of
																		    %% Line 316
																		    <Ms = {'match_spec',_cor89,_cor90,_cor91,_cor92}> when 'true' ->
																			apply 'add_and_select'/3
																			    (-1, Ms, ListBox)
																		    %% Line 317
																		    <Else> when 'true' ->
																			Else
																		  end
																	      -| [{'id',{0,0,'-select_matchspec/3-fun-0-'}}] )
																	in  let <Edit> =
																		%% Line 320
																		( fun (_cor48,_cor47) ->
																		      let <SelId> =
																			  %% Line 321
																			  call 'wxListBox':'getSelection'
																			      (ListBox)
																		      in  %% Line 322
																			  case <> of
																			    %% Line 323
																			    <>
																				when call 'erlang':'>='
																				      (SelId,
																				       0) ->
																				%% Line 324
																				case call 'wxListBox':'getClientData'
																					 (ListBox, SelId) of
																				  <{'match_spec',Name,_cor95,_cor96,_cor97}> when 'true' ->
																				      %% Line 325
																				      case apply 'edit_ms'/3
																					       (TextCtrl, Name, _cor1) of
																					%% Line 326
																					<Ms = {'match_spec',_cor98,_cor99,_cor100,_cor101}> when 'true' ->
																					    apply 'add_and_select'/3
																						(SelId, Ms, ListBox)
																					%% Line 327
																					<Else> when 'true' ->
																					    Else
																				      end
																				  ( <_cor44> when 'true' ->
																					primop 'match_fail'
																					    ({'badmatch',_cor44})
																				    -| ['compiler_generated'] )
																				end
																			    %% Line 329
																			    <> when 'true' ->
																				%% Line 330
																				'ok'
																			  end
																		  -| [{'id',{0,0,'-select_matchspec/3-fun-1-'}}] )
																	    in  let <Del> =
																		    %% Line 333
																		    ( fun (_cor55,_cor54) ->
																			  let <SelId> =
																			      %% Line 334
																			      call 'wxListBox':'getSelection'
																				  (ListBox)
																			  in  %% Line 335
																			      case <> of
																				%% Line 336
																				<>
																				    when call 'erlang':'>='
																					  (SelId,
																					   0) ->
																				    %% Line 337
																				    call 'wxListBox':'delete'
																					(ListBox, SelId)
																				%% Line 338
																				<> when 'true' ->
																				    %% Line 339
																				    'ok'
																			      end
																		      -| [{'id',{0,0,'-select_matchspec/3-fun-2-'}}] )
																		in  let <Sel> =
																			%% Line 342
																			( fun (_cor66,_cor65) ->
																			      case <_cor66,_cor65> of
																				<{'wx',_cor104,_cor105,_cor106,{'wxCommand',_cor107,_cor108,Id,_cor109}},_cor110> when 'true' ->
																				    %% Line 343
																				    case <> of
																				      %% Line 344
																				      <>
																					  when call 'erlang':'>='
																						(Id,
																						 0) ->
																					  do  %% Line 345
																					      call 'wxWindow':'enable'
																						  (OkButt)
																					      do  %% Line 346
																						  call 'wxWindow':'enable'
																						      (EditMsBtn)
																						  do  %% Line 347
																						      call 'wxWindow':'enable'
																							  (DelMsBtn)
																						      %% Line 348
																						      case call 'wxListBox':'getClientData'
																							       (ListBox, Id) of
																							<{'match_spec',_cor111,_cor112,_cor113,Str}> when 'true' ->
																							    %% Line 349
																							    call 'wxStyledTextCtrl':'setText'
																								(TextCtrl, Str)
																							( <_cor59> when 'true' ->
																							      primop 'match_fail'
																								  ({'badmatch',_cor59})
																							  -| ['compiler_generated'] )
																						      end
																				      %% Line 350
																				      <> when 'true' ->
																					  %% Line 351
																					  try
																					      do  %% Line 352
																						  call 'wxWindow':'disable'
																						      (OkButt)
																						  do  %% Line 353
																						      call 'wxWindow':'disable'
																							  (EditMsBtn)
																						      %% Line 354
																						      call 'wxWindow':'disable'
																							  (DelMsBtn)
																					  of <_cor60> ->
																					      _cor60
																					  catch <_cor63,_cor62,_cor61> ->
																					      %% Line 355
																					      'ok'
																				    end
																				( <_cor68,_cor67> when 'true' ->
																				      ( primop 'match_fail'
																					    ({'function_clause',_cor68,_cor67})
																					-| [{'function_name',{'-select_matchspec/3-fun-3-',2}}] )
																				  -| ['compiler_generated'] )
																			      end
																			  -| [{'id',{0,0,'-select_matchspec/3-fun-3-'}}] )
																		    in  do  %% Line 359
																			    call 'wxButton':'connect'
																				(AddMsBtn, 'command_button_clicked', [{'callback',Add}|[]])
																			    do  %% Line 360
																				call 'wxButton':'connect'
																				    (EditMsBtn, 'command_button_clicked', [{'callback',Edit}|[]])
																				do  %% Line 361
																				    call 'wxButton':'connect'
																					(DelMsBtn, 'command_button_clicked', [{'callback',Del}|[]])
																				    do  %% Line 362
																					call 'wxListBox':'connect'
																					    (ListBox, 'command_listbox_selected', [{'callback',Sel}|[]])
																					%% Line 363
																					case call 'wxDialog':'showModal'
																						 (Dialog) of
																					  %% Line 364
																					  <5100> when 'true' ->
																					      let <SelId> =
																						  %% Line 365
																						  call 'wxListBox':'getSelection'
																						      (ListBox)
																					      in  let <Count> =
																						      %% Line 366
																						      call 'wxListBox':'getCount'
																							  (ListBox)
																						  in  let <_cor79> =
																							  %% Line 367
																							  ( letrec
																								'lc$^0'/1 =
																								    fun (_cor76) ->
																									case _cor76 of
																									  <[%% Line 368
																									    Id|_cor73]> when 'true' ->
																									      let <_cor77> =
																										  call 'wxListBox':'getClientData'
																										      (ListBox, Id)
																									      in  let <_cor78> =
																										      %% Line 368
																										      apply 'lc$^0'/1
																											  (_cor73)
																										  in  ( [_cor77|_cor78]
																											-| ['compiler_generated'] )
																									  <[]> when 'true' ->
																									      []
																									  ( <_cor76> when 'true' ->
																										( primop 'match_fail'
																										      ({'function_clause',_cor76})
																										  -| [{'function_name',{'lc$^0',1}}] )
																									    -| ['compiler_generated'] )
																									end
																							    in  let <_cor74> =
																								    %% Line 368
																								    call 'erlang':'-'
																									(Count, 1)
																								in  let <_cor75> =
																									%% Line 368
																									call 'lists':'seq'
																									    (0, _cor74)
																								    in  apply 'lc$^0'/1
																									    (_cor75)
																							    -| ['list_comprehension'] )
																						      in  do  %% Line 369
																							      call 'erlang':'!'
																								  (_cor2, {'update_ms',_cor79})
																							      let <_cor81> =
																								  %% Line 370
																								  call 'erlang':'+'
																								      (SelId, 1)
																							      in  let <MS> =
																								      %% Line 370
																								      call 'lists':'nth'
																									  (_cor81, _cor79)
																								  in  do  %% Line 371
																									  call 'wxDialog':'destroy'
																									      (Dialog)
																									  %% Line 372
																									  MS
																					  %% Line 373
																					  <5101> when 'true' ->
																					      do  %% Line 374
																						  call 'wxDialog':'destroy'
																						      (Dialog)
																						  %% Line 375
																						  call 'erlang':'throw'
																						      ('cancel')
																					  ( <_cor83> when 'true' ->
																						primop 'match_fail'
																						    ({'case_clause',_cor83})
																					    -| ['compiler_generated'] )
																					end
'output'/2 =
    %% Line 378
    fun (_cor1,_cor0) ->
	let <Dialog> =
	    %% Line 379
	    call 'wxDialog':'new'
		(_cor1, -1, [80|[114|[111|[99|[101|[115|[115|[32|[79|[112|[116|[105|[111|[110|[115]]]]]]]]]]]]]]], %% Line 380
														   [{'style',536877120}])
	in  let <Panel> =
		%% Line 381
		call 'wxPanel':'new'
		    (Dialog)
	    in  let <MainSz> =
		    %% Line 382
		    call 'wxBoxSizer':'new'
			(8)
		in  let <PanelSz> =
			%% Line 383
			call 'wxStaticBoxSizer':'new'
			    (8, Panel, [{'label',[79|[117|[116|[112|[117|[116]]]]]]}])
		    in  let <WinB> =
			    %% Line 386
			    call 'wxCheckBox':'new'
				(Panel, -1, [87|[105|[110|[100|[111|[119]]]]]], [])
			in  let <_cor12> =
				%% Line 387
				call 'proplists':'get_value'
				    ('window', _cor0, 'true')
			    in  do  %% Line 387
				    apply 'check_box'/2
					(WinB, _cor12)
				    let <ShellB> =
					%% Line 388
					call 'wxCheckBox':'new'
					    (Panel, -1, [83|[104|[101|[108|[108]]]]], [])
				    in  let <_cor15> =
					    %% Line 389
					    call 'proplists':'get_value'
						('shell', _cor0, 'false')
					in  do  %% Line 389
						apply 'check_box'/2
						    (ShellB, _cor15)
						do  %% Line 390
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor18) ->
								  case _cor18 of
								    <[CheckBox|_cor17]> when 'true' ->
									do  call 'wxSizer':'add'
										(PanelSz, CheckBox, [])
									    apply 'lc$^0'/1
										(_cor17)
								    <[]> when 'true' ->
									[]
								    ( <_cor18> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor18})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      ([WinB|[ShellB|[]]])
						      -| ['list_comprehension'] )
						    let <GetFileOpts> =
							%% Line 391
							apply 'ttb_file_options'/3
							    (Panel, PanelSz, _cor0)
						    in  do  %% Line 393
							    call 'wxPanel':'setSizer'
								(Panel, PanelSz)
							    do  %% Line 394
								call 'wxSizer':'add'
								    (MainSz, Panel, [{'flag',8432}|[{'proportion',1}|[{'border',3}]]])
								let <Buttons> =
								    %% Line 395
								    call 'wxDialog':'createButtonSizer'
									(Dialog, 20)
								in  do  %% Line 396
									call 'wxSizer':'add'
									    (MainSz, Buttons, [{'flag',8432}|[{'border',5}]])
									do  %% Line 397
									    call 'wxWindow':'setSizerAndFit'
										(Dialog, MainSz)
									    do  %% Line 398
										call 'wxSizer':'setSizeHints'
										    (MainSz, Dialog)
										%% Line 399
										case call 'wxDialog':'showModal'
											 (Dialog) of
										  %% Line 400
										  <5100> when 'true' ->
										      let <_cor32> =
											  %% Line 401
											  call 'wxCheckBox':'getValue'
											      (WinB)
										      in  let <_cor33> =
											      %% Line 402
											      call 'wxCheckBox':'getValue'
												  (ShellB)
											  in  let <_cor34> =
												  %% Line 402
												  apply GetFileOpts
												      ()
											      in  let <Res> =
												      %% Line 401
												      [{'window',_cor32}|%% Line 402
															 [{'shell',_cor33}|_cor34]]
												  in  do  %% Line 403
													  call 'wxDialog':'destroy'
													      (Dialog)
													  %% Line 404
													  Res
										  %% Line 405
										  <5101> when 'true' ->
										      do  %% Line 406
											  call 'wxDialog':'destroy'
											      (Dialog)
											  %% Line 407
											  call 'erlang':'throw'
											      ('cancel')
										  ( <_cor36> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_cor36})
										    -| ['compiler_generated'] )
										end
'edit_ms'/3 =
    %% Line 410
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 411
	    call 'wxStyledTextCtrl':'getText'
		(_cor2)
	in  let <Str> =
		%% Line 411
		apply 'ensure_last_is_dot'/1
		    (_cor3)
	    in  %% Line 412
		try
		    let <MatchSpec> =
			%% Line 413
			apply 'ms_from_string'/1
			    (Str)
		    in  let <_cor7> =
			    %% Line 414
			    case call 'erlang':'=:='
				     (_cor1, 'new') of
			      %% Line 415
			      <'true'> when 'true' ->
				  apply 'get_label'/1
				      (_cor0)
			      %% Line 416
			      <_cor17> when 'true' ->
				  _cor1
			    end
			in  let <_cor9> =
				%% Line 419
				call 'io_lib':'format'
				    ([126|[119]], [MatchSpec|[]])
			    in  %% Line 418
				{'match_spec',_cor7,MatchSpec,_cor9,%% Line 420
								    Str}
		of <_cor10> ->
		    _cor10
		catch <_cor13,_cor12,_cor11> ->
		    case <_cor13,_cor12,_cor11> of
		      %% Line 422
		      <'throw','cancel',_cor18> when 'true' ->
			  %% Line 423
			  'ok'
		      %% Line 424
		      <'throw',Error,_cor19> when 'true' ->
			  do  %% Line 425
			      call 'observer_wx':'create_txt_dialog'
				  (_cor0, Error, [69|[114|[114|[111|[114]]]]], 512)
			      %% Line 426
			      'ok'
		      ( <_cor13,_cor12,_cor11> when 'true' ->
			    primop 'raise'
				(_cor11, _cor12)
			-| ['compiler_generated'] )
		    end
'get_label'/1 =
    %% Line 429
    fun (_cor0) ->
	let <Dialog> =
	    %% Line 430
	    call 'wxTextEntryDialog':'new'
		(_cor0, [69|[110|[116|[101|[114|[32|[97|[108|[105|[97|[115|[58|[32]]]]]]]]]]]]])
	in  %% Line 431
	    case call 'wxDialog':'showModal'
		     (Dialog) of
	      %% Line 432
	      <5100> when 'true' ->
		  %% Line 433
		  call 'wxTextEntryDialog':'getValue'
		      (Dialog)
	      %% Line 434
	      <5101> when 'true' ->
		  %% Line 435
		  call 'erlang':'throw'
		      ('cancel')
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'ms_from_string'/1 =
    %% Line 438
    fun (_cor0) ->
	%% Line 439
	try
	    let <_cor4> =
		%% Line 440
		case call 'erl_scan':'string'
			 (_cor0) of
		  %% Line 441
		  <{'ok',Ts,_cor29}> when 'true' ->
		      Ts
		  %% Line 442
		  <{'error',{SLine,SMod,SError},_cor30}> when 'true' ->
		      let <_cor1> =
			  %% Line 443
			  call SMod:'format_error'
			      (SError)
		      in  let <_cor2> =
			      %% Line 443
			      call 'io_lib':'format'
				  ([126|[119|[58|[32|[126|[115]]]]]], [SLine|[_cor1|[]]])
			  in  %% Line 443
			      call 'erlang':'throw'
				  (_cor2)
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor9> =
		    %% Line 445
		    case call 'erl_parse':'parse_exprs'
			     (_cor4) of
		      %% Line 446
		      <{'ok',T}> when 'true' ->
			  T
		      %% Line 447
		      <{'error',{PLine,PMod,PError}}> when 'true' ->
			  let <_cor6> =
			      %% Line 448
			      call PMod:'format_error'
				  (PError)
			  in  let <_cor7> =
				  %% Line 448
				  call 'io_lib':'format'
				      ([126|[119|[58|[32|[126|[115]]]]]], [PLine|[_cor6|[]]])
			      in  %% Line 448
				  call 'erlang':'throw'
				      (_cor7)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		in  let <_cor16> =
			%% Line 450
			case _cor9 of
			  %% Line 451
			  <[{'fun',_cor31,{'clauses',Clauses}}|_cor32]> when 'true' ->
			      let <_cor11> =
				  %% Line 452
				  call 'orddict':'new'
				      ()
			      in  %% Line 452
				  case call 'ms_transform':'transform_from_shell'
					   ('dbg', Clauses, _cor11) of
				    %% Line 453
				    <{'error',[{_cor33,[{MSLine,Mod,MSInfo}|[]]}|[]],_cor34}> when 'true' ->
					let <_cor12> =
					    %% Line 454
					    call Mod:'format_error'
						(MSInfo)
					in  let <_cor13> =
						%% Line 454
						call 'io_lib':'format'
						    ([126|[119|[58|[32|[126|[112]]]]]], [MSLine|[_cor12|[]]])
					    in  %% Line 454
						call 'erlang':'throw'
						    (_cor13)
				    %% Line 455
				    <{'error',_cor35}> when 'true' ->
					%% Line 456
					call 'erlang':'throw'
					    ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[99|[111|[110|[118|[101|[114|[116|[32|[102|[117|[110|[40|[41|[32|[116|[111|[32|[109|[97|[116|[99|[104|[32|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    %% Line 457
				    <Ms> when 'true' ->
					%% Line 458
					Ms
				  end
			  %% Line 460
			  <[Expr|_cor36]> when 'true' ->
			      %% Line 461
			      call 'erl_parse':'normalise'
				  (Expr)
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor15})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 463
			case call 'erlang':'match_spec_test'
				 ([], _cor16, 'trace') of
			  %% Line 464
			  <{'ok',_cor37,_cor38,_cor39}> when 'true' ->
			      _cor16
			  %% Line 465
			  <{'error',List}> when 'true' ->
			      let <_cor22> =
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor20) ->
						case _cor20 of
						  <[{_cor40,Error}|_cor19]> when 'true' ->
						      let <_cor21> =
							  apply 'lc$^0'/1
							      (_cor19)
						      in  ( [[Error|[10]]|_cor21]
							    -| ['compiler_generated'] )
						  ( <[_cor18|_cor19]> when 'true' ->
							apply 'lc$^0'/1
							    (_cor19)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor20> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor20})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (List)
				    -| ['list_comprehension'] )
			      in  call 'erlang':'throw'
				      (_cor22)
			  ( <_cor23> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor23})
			    -| ['compiler_generated'] )
			end
	of <_cor24> ->
	    _cor24
	catch <_cor27,_cor26,_cor25> ->
	    case <_cor27,_cor26,_cor25> of
	      %% Line 467
	      <'error',_X_Reason,_cor41> when 'true' ->
		  %% Line 469
		  call 'erlang':'throw'
		      ([73|[110|[118|[97|[108|[105|[100|[32|[116|[101|[114|[109]]]]]]]]]]]])
	      ( <_cor27,_cor26,_cor25> when 'true' ->
		    primop 'raise'
			(_cor25, _cor26)
		-| ['compiler_generated'] )
	    end
'add_and_select'/3 =
    %% Line 472
    fun (_cor2,_cor1,_cor0) ->
	%% Line 473
	case apply 'ms_names'/1
		 ([_cor1|[]]) of
	  <[{Str,User}|[]]> when 'true' ->
	      let <_cor5> =
		  %% Line 474
		  case <> of
		    %% Line 475
		    <>
			when call 'erlang':'>='
			      (_cor2,
			       0) ->
			do  %% Line 476
			    call 'wxListBox':'setString'
				(_cor0, _cor2, Str)
			    do  %% Line 477
				call 'wxListBox':'setClientData'
				    (_cor0, _cor2, User)
				_cor2
		    %% Line 479
		    <> when 'true' ->
			%% Line 480
			call 'wxListBox':'append'
			    (_cor0, Str, User)
		  end
	      in  %% Line 482
		  call 'wxListBox':'setSelection'
		      (_cor0, _cor5)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'filter_listbox_data'/3 =
    %% Line 484
    fun (_cor2,_cor1,_cor0) ->
	%% Line 485
	apply 'filter_listbox_data'/4
	    (_cor2, _cor1, _cor0, 'true')
'filter_listbox_data'/4 =
    %% Line 487
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 488
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[X = {Str,_cor28}|_cor5]> when 'true' ->
				let <_cor6> =
				    call 're':'run'
					(Str, _cor3)
				in  ( case <> of
					<>
					    when call 'erlang':'=/='
						  (_cor6,
						   'nomatch') ->
					    let <_cor8> =
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [X|_cor8]
						  -| ['compiler_generated'] )
					( <> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor5)
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  do  %% Line 489
		call 'wxListBox':'clear'
		    (_cor1)
		let <_cor16> =
		    %% Line 490
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor14) ->
				  case _cor14 of
				    <[{Str,_cor29}|_cor13]> when 'true' ->
					let <_cor15> =
					    apply 'lc$^1'/1
						(_cor13)
					in  ( [Str|_cor15]
					      -| ['compiler_generated'] )
				    ( <[_cor12|_cor13]> when 'true' ->
					  apply 'lc$^1'/1
					      (_cor13)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor14> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor14})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^1'/1
			      (_cor10)
		      -| ['list_comprehension'] )
		in  do  %% Line 490
			call 'wxListBox':'appendStrings'
			    (_cor1, _cor16)
			do  %% Line 491
			    ( case _cor0 of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor22> =
					  %% Line 492
					  ( fun (_cor19,_cor18) ->
						case <_cor19,_cor18> of
						  <{_cor30,Term},N> when 'true' ->
						      do  %% Line 493
							  call 'wxListBox':'setClientData'
							      (_cor1, N, Term)
							  %% Line 494
							  call 'erlang':'+'
							      (N, 1)
						  ( <_cor21,_cor20> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor21,_cor20})
							  -| [{'function_name',{'-filter_listbox_data/4-fun-0-',2}}] )
						    -| ['compiler_generated'] )
						end
					    -| [{'id',{0,0,'-filter_listbox_data/4-fun-0-'}}] )
				      in  %% Line 492
					  call 'wx':'foldl'
					      (_cor22, %% Line 495
						       0, _cor10)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'ok'
				  -| ['compiler_generated'] )
				( <_cor17> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor17}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			    _cor10
'get_modules'/1 =
    %% Line 498
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 499
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{Module,_cor8}|_cor2]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [Module|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      call 'observer_wx':'try_rpc'
			  (_cor0, 'code', 'all_loaded', [])
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  %% Line 499
	    call 'lists':'sort'
		(_cor6)
'optionpage_top_right'/4 =
    %% Line 501
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Sizer> =
	    %% Line 502
	    call 'wxBoxSizer':'new'
		(8)
	in  let <_cor5> =
		%% Line 503
		call 'erlang':'++'
		    ([73|[110|[104|[101|[114|[105|[116|[32|[111|[110|[32]]]]]]]]]]], _cor0)
	    in  let <ChkBox> =
		    %% Line 503
		    call 'wxCheckBox':'new'
			(_cor3, -1, _cor5, [])
		in  let <RadioSz> =
			%% Line 504
			call 'wxBoxSizer':'new'
			    (8)
		    in  let <_cor9> =
			    %% Line 505
			    [65|[108|[108|[32|_cor0]]]]
			in  let <Radio1> =
				%% Line 505
				call 'wxRadioButton':'new'
				    (_cor3, -1, _cor9, [{'style',4}])
			    in  let <_cor12> =
				    %% Line 506
				    call 'erlang':'++'
					(_cor0, [32|[111|[110|[108|[121]]]]])
				in  let <_cor13> =
					%% Line 506
					call 'erlang':'++'
					    ([70|[105|[114|[115|[116|[32]]]]]], _cor12)
				    in  let <Radio2> =
					    %% Line 506
					    call 'wxRadioButton':'new'
						(_cor3, -1, _cor13, [])
					in  do  %% Line 507
						call 'wxSizer':'add'
						    (Sizer, ChkBox, [])
						do  %% Line 508
						    call 'wxSizer':'add'
							(RadioSz, Radio1, [])
						    do  %% Line 509
							call 'wxSizer':'add'
							    (RadioSz, Radio2, [])
							do  %% Line 510
							    call 'wxSizer':'add'
								(Sizer, RadioSz, [{'flag',16}|[{'border',20}]])
							    do  %% Line 511
								call 'wxSizer':'add'
								    (_cor2, Sizer, _cor1)
								%% Line 512
								{ChkBox,Radio1,Radio2}
'create_styled_txtctrl'/1 =
    %% Line 515
    fun (_cor0) ->
	let <FixedFont> =
	    %% Line 516
	    call 'observer_wx':'get_attrib'
		({'font','fixed'})
	in  let <Ed> =
		%% Line 517
		call 'wxStyledTextCtrl':'new'
		    (_cor0)
	    in  do  %% Line 518
		    call 'wxStyledTextCtrl':'styleClearAll'
			(Ed)
		    do  %% Line 519
			call 'wxStyledTextCtrl':'styleSetFont'
			    (Ed, 32, FixedFont)
			do  %% Line 520
			    call 'wxStyledTextCtrl':'setLexer'
				(Ed, 53)
			    do  %% Line 521
				call 'wxStyledTextCtrl':'setMarginType'
				    (Ed, 1, 1)
				do  %% Line 522
				    call 'wxStyledTextCtrl':'setSelectionMode'
					(Ed, 2)
				    do  %% Line 523
					call 'wxStyledTextCtrl':'setUseHorizontalScrollBar'
					    (Ed, 'false')
					let <SetStyle> =
					    %% Line 539
					    ( fun (_cor4) ->
						  case _cor4 of
						    <{Style,Color}> when 'true' ->
							do  %% Line 540
							    call 'wxStyledTextCtrl':'styleSetFont'
								(Ed, Style, FixedFont)
							    %% Line 541
							    call 'wxStyledTextCtrl':'styleSetForeground'
								(Ed, Style, Color)
						    ( <_cor5> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor5})
							    -| [{'function_name',{'-create_styled_txtctrl/1-fun-0-',1}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-create_styled_txtctrl/1-fun-0-'}}] )
					in  do  %% Line 543
						( letrec
						      'lc$^0'/1 =
							  fun (_cor9) ->
							      case _cor9 of
								<[Style|_cor8]> when 'true' ->
								    do  apply SetStyle
									    (Style)
									apply 'lc$^0'/1
									    (_cor8)
								<[]> when 'true' ->
								    []
								( <_cor9> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor9})
									-| [{'function_name',{'lc$^0',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^0'/1
							  ([{0,{0,0,0}}|[{1,{160,53,35}}|[{2,{150,100,40}}|[{3,{5,5,100}}|[{4,{130,40,172}}|[{5,{170,45,132}}|[{6,{30,0,0}}|[{7,{0,0,0}}|[{8,{64,102,244}}|[{9,{236,155,172}}|[{10,{40,144,170}}|[{11,{40,100,20}}|[{12,{0,0,0}}|[{13,{0,0,0}}]]]]]]]]]]]]]])
						  -| ['list_comprehension'] )
						let <_cor12> =
						    %% Line 544
						    apply 'keyWords'/0
							()
						in  do  %% Line 544
							call 'wxStyledTextCtrl':'setKeyWords'
							    (Ed, 0, _cor12)
							%% Line 545
							Ed
'keyWords'/0 =
    %% Line 548
    fun () ->
	let <_cor6> =
	    %% Line 552
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[K|_cor2]> when 'true' ->
				let <_cor4> =
				    call 'erlang':'++'
					(K, [32])
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[0]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      ([[97|[102|[116|[101|[114]]]]]|[[98|[101|[103|[105|[110]]]]]|[[99|[97|[115|[101]]]]|[[116|[114|[121]]]|[[99|[111|[110|[100]]]]|[[99|[97|[116|[99|[104]]]]]|[[97|[110|[100|[97|[108|[115|[111]]]]]]]|[[111|[114|[101|[108|[115|[101]]]]]]|[[101|[110|[100]]]|[[102|[117|[110]]]|[[105|[102]]|[[108|[101|[116]]]|[[111|[102]]|[[113|[117|[101|[114|[121]]]]]|[[114|[101|[99|[101|[105|[118|[101]]]]]]]|[[119|[104|[101|[110]]]]|[[98|[110|[111|[116]]]]|[[110|[111|[116]]]|[[100|[105|[118]]]|[[114|[101|[109]]]|[[98|[97|[110|[100]]]]|[[97|[110|[100]]]|[[98|[111|[114]]]|[[98|[120|[111|[114]]]]|[[98|[115|[108]]]|[[98|[115|[114]]]|[[111|[114]]|[[120|[111|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      -| ['list_comprehension'] )
	in  %% Line 552
	    call 'lists':'flatten'
		(_cor6)
'enable'/2 =
    %% Line 555
    fun (_cor1,_cor0) ->
	%% Line 556
	case call 'wxCheckBox':'isChecked'
		 (_cor1) of
	  %% Line 557
	  <'false'> when 'true' ->
	      %% Line 558
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[R|_cor3]> when 'true' ->
				  let <_cor5> =
				      call 'wxWindow':'disable'
					  (R)
				  in  let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(_cor0)
		-| ['list_comprehension'] )
	  %% Line 559
	  <'true'> when 'true' ->
	      %% Line 560
	      ( letrec
		    'lc$^1'/1 =
			fun (_cor9) ->
			    case _cor9 of
			      <[R|_cor8]> when 'true' ->
				  let <_cor10> =
				      call 'wxWindow':'enable'
					  (R)
				  in  let <_cor11> =
					  apply 'lc$^1'/1
					      (_cor8)
				      in  ( [_cor10|_cor11]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor9})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^1'/1
			(_cor0)
		-| ['list_comprehension'] )
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'check_box'/2 =
    %% Line 564
    fun (_cor1,_cor0) ->
	%% Line 565
	case _cor0 of
	  %% Line 566
	  <'true'> when 'true' ->
	      %% Line 567
	      call 'wxCheckBox':'set3StateValue'
		  (_cor1, 1)
	  %% Line 568
	  <'false'> when 'true' ->
	      %% Line 569
	      'ignore'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_function_names'/1 =
    %% Line 572
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 573
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[Term = %% Line 574
				     {Name,Arity}|_cor2]> when 'true' ->
				let <_cor6> =
				    call 'erlang':'atom_to_list'
					(Name)
				in  let <_cor4> =
					call 'erlang':'integer_to_list'
					    (Arity)
				    in  let <_cor5> =
					    [47|_cor4]
					in  let <_cor7> =
						call 'erlang':'++'
						    (_cor6, _cor5)
					    in  let <_cor8> =
						    %% Line 574
						    apply 'lc$^0'/1
							(_cor2)
						in  ( [{_cor7,Term}|_cor8]
						      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 574
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 575
	    apply 'parse_function_names'/2
		(_cor9, [])
'parse_function_names'/2 =
    %% Line 577
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 578
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 579
	  <[{H,Term}|T],Acc> when 'true' ->
	      let <IsFun> =
		  %% Line 580
		  call 're':'run'
		      (H, [46|[42|[45|[102|[117|[110|[45|[92|[100|[42|[63|[45]]]]]]]]]]]])
	      in  let <IsLc> =
		      %% Line 581
		      call 're':'run'
			  (H, [46|[42|[45|[108|[99|[92|[36|[92|[94|[92|[100|[42|[63|[47|[92|[100|[42|[63|[45|[92|[100|[42|[63|[45]]]]]]]]]]]]]]]]]]]]]]]])
		  in  let <IsLbc> =
			  %% Line 582
			  call 're':'run'
			      (H, [46|[42|[45|[108|[98|[99|[92|[36|[92|[94|[92|[100|[42|[63|[47|[92|[100|[42|[63|[45|[92|[100|[42|[63|[45]]]]]]]]]]]]]]]]]]]]]]]]])
		      in  let <_cor5> =
			      %% Line 584
			      case <> of
				<>
				    when call 'erlang':'=/='
					  (IsFun,
					   'nomatch') ->
				    call 'erlang':'++'
					([70|[117|[110|[58|[32]]]]], H)
				%% Line 585
				<>
				    when call 'erlang':'=/='
					  (IsLc,
					   'nomatch') ->
				    call 'erlang':'++'
					([76|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110|[58|[32]]]]]]]]]]]]]]]]]]]], H)
				%% Line 586
				<>
				    when call 'erlang':'=/='
					  (IsLbc,
					   'nomatch') ->
				    call 'erlang':'++'
					([66|[105|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110|[58|[32]]]]]]]]]]]]]]]]]]], H)
				%% Line 587
				<> when 'true' ->
				    %% Line 588
				    H
			      end
			  in  %% Line 590
			      apply 'parse_function_names'/2
				  (T, [{_cor5,Term}|Acc])
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'parse_function_names',2}}] )
	    -| ['compiler_generated'] )
	end
'ms_names'/1 =
    %% Line 592
    fun (_cor0) ->
	let <MsOrAlias> =
	    %% Line 593
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{'match_spec',A,_cor12,M,_cor13}> when 'true' ->
			%% Line 594
			case A of
			  %% Line 595
			  <[]> when 'true' ->
			      M
			  %% Line 596
			  <_cor14> when 'true' ->
			      let <_cor1> =
				  [32|[32|[32|[32|M]]]]
			      in  call 'erlang':'++'
				      (A, _cor1)
			end
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-ms_names/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-ms_names/1-fun-0-'}}] )
	in  %% Line 599
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[X|_cor7]> when 'true' ->
				let <_cor9> =
				    apply MsOrAlias
					(X)
				in  let <_cor10> =
					apply 'lc$^0'/1
					    (_cor7)
				    in  ( [{_cor9,X}|_cor10]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
'ensure_last_is_dot'/1 =
    %% Line 601
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 602
	      [46]
	  %% Line 603
	  <String> when 'true' ->
	      let <_cor1> =
		  %% Line 604
		  call 'lists':'last'
		      (String)
	      in  %% Line 604
		  case <> of
		    %% Line 605
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       46) ->
			%% Line 606
			String
		    %% Line 607
		    <> when 'true' ->
			%% Line 608
			call 'erlang':'++'
			    (String, [46])
		  end
	end
'ttb_file_options'/3 =
    %% Line 611
    fun (_cor2,_cor1,_cor0) ->
	let <Top> =
	    %% Line 612
	    call 'wxBoxSizer':'new'
		(8)
	in  let <NameS> =
		%% Line 613
		call 'wxBoxSizer':'new'
		    (4)
	    in  let <FileBox> =
		    %% Line 614
		    call 'wxCheckBox':'new'
			(_cor2, -1, [70|[105|[108|[101|[32|[40|[85|[115|[105|[110|[103|[32|[116|[116|[98|[32|[102|[105|[108|[101|[32|[116|[114|[97|[99|[101|[114|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		in  let <_cor7> =
			%% Line 615
			call 'proplists':'get_value'
			    ('file', _cor0, 'false')
		    in  do  %% Line 615
			    apply 'check_box'/2
				(FileBox, _cor7)
			    do  %% Line 616
				call 'wxSizer':'add'
				    (_cor1, FileBox)
				let <Desc> =
				    %% Line 617
				    call 'wxStaticText':'new'
					(_cor2, -1, [70|[105|[108|[101]]]])
				in  let <FileName> =
					%% Line 618
					call 'proplists':'get_value'
					    ('filename', _cor0, [116|[116|[98]]])
				    in  let <FileT> =
					    %% Line 619
					    call 'wxTextCtrl':'new'
						(_cor2, -1, [{'size',{150,-1}}|[{'value',FileName}|[]]])
					in  let <FileB> =
						%% Line 620
						call 'wxButton':'new'
						    (_cor2, -1, [{'label',[66|[114|[111|[119|[115|[101]]]]]]}])
					    in  do  %% Line 621
						    call 'wxSizer':'add'
							(NameS, Desc, [{'proportion',0}|[{'flag',2048}]])
						    do  %% Line 622
							call 'wxSizer':'add'
							    (NameS, FileT, [{'proportion',1}|[{'flag',10240}]])
							do  %% Line 623
							    call 'wxSizer':'add'
								(NameS, FileB, [{'proportion',0}|[{'flag',2048}]])
							    let <WrapB> =
								%% Line 625
								call 'wxCheckBox':'new'
								    (_cor2, -1, [87|[114|[97|[112|[32|[108|[111|[103|[115]]]]]]]]])
							    in  let <_cor22> =
								    %% Line 626
								    call 'proplists':'get_value'
									('wrap_sz', _cor0, 128)
								in  let <_cor19> =
									%% Line 627
									call 'wxe_util':'get_const'
									    ('wxSL_LABELS')
								    in  let <_cor20> =
									    %% Line 627
									    call 'erlang':'bor'
										(4, _cor19)
									in  let <WrapSz> =
										%% Line 626
										call 'wxSlider':'new'
										    (_cor2, -1, _cor22, %% Line 627
													64, 10240, %% Line 627
														   [{'style',_cor20}|[]])
									    in  let <_cor27> =
										    %% Line 628
										    call 'proplists':'get_value'
											('wrap_c', _cor0, 8)
										in  let <_cor25> =
											%% Line 629
											call 'wxe_util':'get_const'
											    ('wxSL_LABELS')
										    in  let <_cor26> =
											    %% Line 629
											    call 'erlang':'bor'
												(4, _cor25)
											in  let <WrapC> =
												%% Line 628
												call 'wxSlider':'new'
												    (_cor2, -1, _cor27, %% Line 629
															2, %% Line 629
															   100, %% Line 629
																[{'style',_cor26}|[]])
											    in  do  %% Line 631
												    call 'wxSizer':'add'
													(Top, NameS, [{'flag',8192}])
												    do  %% Line 632
													call 'wxSizer':'add'
													    (Top, WrapB, [])
													do  %% Line 633
													    call 'wxSizer':'add'
														(Top, WrapSz, [{'flag',8192}])
													    do  %% Line 634
														call 'wxSizer':'add'
														    (Top, WrapC, [{'flag',8192}])
														do  %% Line 635
														    call 'wxSizer':'add'
															(_cor1, Top, [{'flag',8208}|[{'border',20}]])
														    let <Enable> =
															%% Line 637
															( fun (_cor46,_cor45) ->
															      let <_cor33> =
																  %% Line 638
																  ( case _cor46 of
																      ( <( 'true'
																	   -| ['compiler_generated'] )> when 'true' ->
																	    _cor45
																	-| ['compiler_generated'] )
																      ( <( 'false'
																	   -| ['compiler_generated'] )> when 'true' ->
																	    'false'
																	-| ['compiler_generated'] )
																      ( <_cor31> when 'true' ->
																	    ( call ( 'erlang'
																		     -| ['compiler_generated'] ):( 'error'
																						   -| ['compiler_generated'] )
																		  (( {( 'badarg'
																			-| ['compiler_generated'] ),_cor31}
																		     -| ['compiler_generated'] ))
																	      -| ['compiler_generated'] )
																	-| ['compiler_generated'] )
																    end
																    -| ['compiler_generated'] )
															      in  do  %% Line 639
																      ( letrec
																	    'lc$^0'/1 =
																		fun (_cor37) ->
																		    case _cor37 of
																		      <[W|_cor36]> when 'true' ->
																			  do  call 'wxWindow':'enable'
																				  (W, [{'enable',_cor46}|[]])
																			      apply 'lc$^0'/1
																				  (_cor36)
																		      <[]> when 'true' ->
																			  []
																		      ( <_cor37> when 'true' ->
																			    ( primop 'match_fail'
																				  ({'function_clause',_cor37})
																			      -| [{'function_name',{'lc$^0',1}}] )
																			-| ['compiler_generated'] )
																		    end
																	in  apply 'lc$^0'/1
																		([Desc|[FileT|[FileB|[WrapB|[]]]]])
																	-| ['list_comprehension'] )
																      do  %% Line 640
																	  ( letrec
																		'lc$^1'/1 =
																		    fun (_cor42) ->
																			case _cor42 of
																			  <[W|_cor41]> when 'true' ->
																			      do  call 'wxWindow':'enable'
																				      (W, [{'enable',_cor33}|[]])
																				  apply 'lc$^1'/1
																				      (_cor41)
																			  <[]> when 'true' ->
																			      []
																			  ( <_cor42> when 'true' ->
																				( primop 'match_fail'
																				      ({'function_clause',_cor42})
																				  -| [{'function_name',{'lc$^1',1}}] )
																			    -| ['compiler_generated'] )
																			end
																	    in  apply 'lc$^1'/1
																		    ([WrapSz|[WrapC|[]]])
																	    -| ['list_comprehension'] )
																	  %% Line 641
																	  apply 'check_box'/2
																	      (WrapB, _cor45)
															  -| [{'id',{0,0,'-ttb_file_options/3-fun-0-'}}] )
														    in  let <_cor51> =
															    %% Line 643
															    call 'proplists':'get_value'
																('file', _cor0, 'false')
															in  let <_cor50> =
																%% Line 643
																call 'proplists':'get_value'
																    ('wrap', _cor0, 'false')
															    in  do  %% Line 643
																    apply Enable
																	(_cor51, _cor50)
																    let <_cor58> =
																	%% Line 645
																	( fun (_cor55,_cor54) ->
																	      let <_cor53> =
																		  %% Line 646
																		  call 'wxCheckBox':'getValue'
																		      (FileBox)
																	      in  let <_cor52> =
																		      %% Line 647
																		      call 'wxCheckBox':'getValue'
																			  (WrapB)
																		  in  %% Line 646
																		      apply Enable
																			  (_cor53, _cor52)
																	  -| [{'id',{0,0,'-ttb_file_options/3-fun-1-'}}] )
																    in  do  %% Line 644
																	    call 'wxPanel':'connect'
																		(FileBox, 'command_checkbox_clicked', %% Line 645
																						      [{'callback',_cor58}|%% Line 648
																									   []])
																	    let <_cor64> =
																		%% Line 650
																		( fun (_cor61,_cor60) ->
																		      let <_cor59> =
																			  %% Line 651
																			  call 'wxCheckBox':'getValue'
																			      (WrapB)
																		      in  %% Line 651
																			  apply Enable
																			      ('true', _cor59)
																		  -| [{'id',{0,0,'-ttb_file_options/3-fun-2-'}}] )
																	    in  do  %% Line 649
																		    call 'wxPanel':'connect'
																			(WrapB, 'command_checkbox_clicked', %% Line 650
																							    [{'callback',_cor64}|%% Line 652
																										 []])
																		    let <_cor69> =
																			%% Line 654
																			( fun (_cor66,_cor65) ->
																			      apply 'get_file'/1
																				  (FileT)
																			  -| [{'id',{0,0,'-ttb_file_options/3-fun-3-'}}] )
																		    in  do  %% Line 653
																			    call 'wxPanel':'connect'
																				(FileB, 'command_button_clicked', %% Line 654
																								  [{'callback',_cor69}|[]])
																			    %% Line 655
																			    ( fun () ->
																				  let <_cor70> =
																				      %% Line 656
																				      call 'wxCheckBox':'getValue'
																					  (FileBox)
																				  in  let <_cor71> =
																					  %% Line 657
																					  call 'wxTextCtrl':'getValue'
																					      (FileT)
																				      in  let <_cor72> =
																					      %% Line 658
																					      call 'wxCheckBox':'getValue'
																						  (WrapB)
																					  in  let <_cor73> =
																						  %% Line 659
																						  call 'wxSlider':'getValue'
																						      (WrapSz)
																					      in  let <_cor74> =
																						      %% Line 660
																						      call 'wxSlider':'getValue'
																							  (WrapC)
																						  in  %% Line 656
																						      [{'file',_cor70}|%% Line 657
																								       [{'filename',_cor71}|%% Line 658
																											    [{'wrap',_cor72}|%% Line 659
																													     [{'wrap_sz',_cor73}|%% Line 660
																																 [{'wrap_c',_cor74}|[]]]]]]
																			      -| [{'id',{0,0,'-ttb_file_options/3-fun-4-'}}] )
'get_file'/1 =
    %% Line 663
    fun (_cor0) ->
	let <Str> =
	    %% Line 664
	    call 'wxTextCtrl':'getValue'
		(_cor0)
	in  let <Dialog> =
		%% Line 665
		call 'wxFileDialog':'new'
		    (_cor0, %% Line 666
			    [{'message',[83|[101|[108|[101|[99|[116|[32|[97|[32|[102|[105|[108|[101]]]]]]]]]]]]]}|%% Line 667
														  [{'default_file',Str}|[]]])
	    in  do  %% Line 668
		    case call 'wxDialog':'showModal'
			     (Dialog) of
		      %% Line 669
		      <5100> when 'true' ->
			  let <Dir> =
			      %% Line 670
			      call 'wxFileDialog':'getDirectory'
				  (Dialog)
			  in  let <File> =
				  %% Line 671
				  call 'wxFileDialog':'getFilename'
				      (Dialog)
			      in  let <_cor5> =
				      %% Line 672
				      call 'filename':'join'
					  (Dir, File)
				  in  %% Line 672
				      call 'wxTextCtrl':'setValue'
					  (_cor0, _cor5)
		      %% Line 673
		      <_cor8> when 'true' ->
			  'ok'
		    end
		    %% Line 675
		    call 'wxFileDialog':'destroy'
			(Dialog)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('observer_traceoptions_wx')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('observer_traceoptions_wx', _cor0)
end