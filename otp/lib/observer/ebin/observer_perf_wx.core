module 'observer_perf_wx' ['code_change'/3,
			   'drawRoundedRectangle'/6,
			   'drawText'/4,
			   'getTextExtent'/2,
			   'handle_call'/3,
			   'handle_cast'/2,
			   'handle_event'/2,
			   'handle_info'/2,
			   'handle_sync_event'/3,
			   'haveGC'/0,
			   'init'/1,
			   'module_info'/0,
			   'module_info'/1,
			   'setBrush'/2,
			   'setFont'/3,
			   'setPen'/2,
			   'start_link'/2,
			   'strokeLine'/5,
			   'strokeLines'/2,
			   'terminate'/2]
    attributes [%% Line 32
		'behaviour' =
		    %% Line 32
		    ['wx_object'],
		%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 19
		'type' =
		    %% Line 19
		    [{{'record','match_spec'},[{'record_field',19,{'atom',19,'name'},{'string',19,[]}}|[{'record_field',20,{'atom',20,'term'},{'nil',20}}|[{'record_field',21,{'atom',21,'str'},{'nil',21}}|[{'record_field',22,{'atom',22,'func'},{'string',22,[]}}]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','tpattern'},[{'record_field',24,{'atom',24,'m'}}|[{'record_field',24,{'atom',24,'fa'}}|[{'record_field',24,{'atom',24,'ms'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','traced_func'},[{'record_field',26,{'atom',26,'func_name'}}|[{'record_field',27,{'atom',27,'arity'}}|[{'record_field',28,{'atom',28,'match_spec'},{'record',28,'match_spec',[]}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','create_menu'},[{'record_field',31,{'atom',31,'id'}}|[{'record_field',32,{'atom',32,'text'}}|[{'record_field',33,{'atom',33,'help'},{'nil',33}}|[{'record_field',34,{'atom',34,'type'},{'atom',34,'append'}}|[{'record_field',35,{'atom',35,'check'},{'atom',35,'false'}}]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','attrs'},[{'record_field',38,{'atom',38,'even'}}|[{'record_field',38,{'atom',38,'odd'}}|[{'record_field',38,{'atom',38,'searched'}}|[{'record_field',38,{'atom',38,'deleted'}}|[{'record_field',38,{'atom',38,'changed_odd'}}|[{'record_field',38,{'atom',38,'changed_even'}}|[{'record_field',38,{'atom',38,'new_odd'}}|[{'record_field',38,{'atom',38,'new_even'}}]]]]]]]],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','state'},[{'record_field',38,{'atom',38,'offset'},{'float',38,0.00000000000000000000e+00}}|[{'record_field',39,{'atom',39,'active'},{'atom',39,'false'}}|[{'record_field',40,{'atom',40,'parent'}}|[{'record_field',41,{'atom',41,'windows'}}|[{'record_field',42,{'atom',42,'data'},{'tuple',42,[{'integer',42,0}|[{'call',42,{'remote',42,{'atom',42,'queue'},{'atom',42,'new'}},[]}]]}}|[{'record_field',43,{'atom',43,'panel'}}|[{'record_field',44,{'atom',44,'paint'}}|[{'record_field',45,{'atom',45,'appmon'}}|[{'record_field',46,{'atom',46,'usegc'},{'atom',46,'false'}}]]]]]]]]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','paint'},[{'record_field',51,{'atom',51,'font'}}|[{'record_field',51,{'atom',51,'small'}}|[{'record_field',51,{'atom',51,'pen'}}|[{'record_field',51,{'atom',51,'pen2'}}|[{'record_field',51,{'atom',51,'pens'}}]]]]],[]}]]
'start_link'/2 =
    %% Line 57
    fun (_cor1,_cor0) ->
	%% Line 58
	call 'wx_object':'start_link'
	    ('observer_perf_wx', [_cor1|[_cor0|[]]], [])
'init'/1 =
    %% Line 60
    fun (_cor0) ->
	case _cor0 of
	  <[Notebook|[Parent|[]]]> when 'true' ->
	      %% Line 61
	      try
		  let <Panel> =
		      %% Line 62
		      call 'wxPanel':'new'
			  (Notebook)
		  in  let <Main> =
			  %% Line 63
			  call 'wxBoxSizer':'new'
			      (8)
		      in  let <CPU> =
			      %% Line 65
			      call 'wxPanel':'new'
				  (Panel, [{'winid',1}|[{'style',4259840}]])
			  in  let <_cor5> =
				  %% Line 66
				  call 'wxe_util':'get_const'
				      ('wxWHITE')
			      in  do  %% Line 66
				      call 'wxWindow':'setBackgroundColour'
					  (CPU, _cor5)
				      do  %% Line 67
					  call 'wxSizer':'add'
					      (Main, CPU, [{'flag',8432}|[{'proportion',1}|[{'border',5}]]])
					  let <MemIO> =
					      %% Line 69
					      call 'wxBoxSizer':'new'
						  (4)
					  in  let <MEM> =
						  %% Line 70
						  call 'wxPanel':'new'
						      (Panel, [{'winid',2}|[{'style',4259840}]])
					      in  let <_cor12> =
						      %% Line 71
						      call 'wxe_util':'get_const'
							  ('wxWHITE')
						  in  do  %% Line 71
							  call 'wxWindow':'setBackgroundColour'
							      (MEM, _cor12)
							  let <IO> =
							      %% Line 72
							      call 'wxPanel':'new'
								  (Panel, [{'winid',3}|[{'style',4259840}]])
							  in  let <_cor14> =
								  %% Line 73
								  call 'wxe_util':'get_const'
								      ('wxWHITE')
							      in  do  %% Line 73
								      call 'wxWindow':'setBackgroundColour'
									  (IO, _cor14)
								      do  %% Line 74
									  call 'wxSizer':'add'
									      (MemIO, MEM, [{'flag',8208}|[{'proportion',1}|[{'border',5}]]])
									  do  %% Line 76
									      call 'wxSizer':'add'
										  (MemIO, IO, [{'flag',8240}|[{'proportion',1}|[{'border',5}]]])
									      do  %% Line 78
										  call 'wxSizer':'add'
										      (Main, MemIO, [{'flag',8320}|[{'proportion',1}|[{'border',5}]]])
										  do  %% Line 80
										      call 'wxWindow':'setSizer'
											  (Panel, Main)
										      do  %% Line 82
											  call 'wxPanel':'connect'
											      (CPU, 'paint', ['callback'])
											  do  %% Line 83
											      call 'wxPanel':'connect'
												  (IO, 'paint', ['callback'])
											      do  %% Line 84
												  call 'wxPanel':'connect'
												      (MEM, 'paint', ['callback'])
												  do  %% Line 85
												      case call 'os':'type'
													       () of
													%% Line 86
													<{'win32',_cor74}> when 'true' ->
													    let <_cor23> =
														%% Line 87
														( fun (_cor20,_cor19) ->
														      'ok'
														  -| [{'id',{0,0,'-init/1-fun-0-'}}] )
													    in  do  %% Line 87
														    call 'wxPanel':'connect'
															(CPU, 'erase_background', [{'callback',_cor23}|[]])
														    let <_cor28> =
															%% Line 88
															( fun (_cor25,_cor24) ->
															      'ok'
															  -| [{'id',{0,0,'-init/1-fun-1-'}}] )
														    in  do  %% Line 88
															    call 'wxPanel':'connect'
																(IO, 'erase_background', [{'callback',_cor28}|[]])
															    let <_cor33> =
																%% Line 89
																( fun (_cor30,_cor29) ->
																      'ok'
																  -| [{'id',{0,0,'-init/1-fun-2-'}}] )
															    in  %% Line 89
																call 'wxPanel':'connect'
																    (MEM, 'erase_background', [{'callback',_cor33}|[]])
													%% Line 90
													<_cor81> when 'true' ->
													    'ok'
												      end
												      let <UseGC> =
													  %% Line 93
													  apply 'haveGC'/0
													      ()
												      in  let <_cor37> =
													      %% Line 94
													      call 'wxe_util':'get_const'
														  ('wxMAJOR_VERSION')
													  in  let <_cor40> =
														  %% Line 94
														  ( case <> of
														      ( <>
															    when call 'erlang':'=:='
																  (_cor37,
																   2) ->
															    let <_cor38> =
																call 'wxe_util':'get_const'
																    ('wxMINOR_VERSION')
															    in  call 'erlang':'=:='
																    (_cor38, 8)
															-| ['compiler_generated'] )
														      ( <> when 'true' ->
															    'false'
															-| ['compiler_generated'] )
														    end
														    -| ['compiler_generated'] )
													      in  let <Font,SmallFont> =
														      %% Line 96
														      case call 'os':'type'
															       () of
															%% Line 97
															<{'unix',_cor82}>
															    when try
																  let <_cor42> =
																      call 'erlang':'=:='
																	  (UseGC, 'true')
																  in  call 'erlang':'and'
																	  (_cor42, _cor40)
															      of <Try> ->
																  Try
															      catch <T,R> ->
																  'false' ->
															    let <F> =
																%% Line 100
																call 'wxFont':'new'
																    (12, 71, 90, 92)
															    in  let <SF> =
																    %% Line 101
																    call 'wxFont':'new'
																	(10, 71, 90, 90)
																in  %% Line 102
																    <F,SF>
															%% Line 103
															<_cor83> when 'true' ->
															    let <DefFont> =
																%% Line 104
																call 'wxSystemSettings':'getFont'
																    (17)
															    in  let <DefSize> =
																    %% Line 105
																    call 'wxFont':'getPointSize'
																	(DefFont)
																in  let <DefFamily> =
																	%% Line 106
																	call 'wxFont':'getFamily'
																	    (DefFont)
																    in  let <F> =
																	    %% Line 107
																	    call 'wxFont':'new'
																		(DefSize, DefFamily, 90, 92)
																	in  let <_cor50> =
																		%% Line 108
																		call 'erlang':'-'
																		    (DefSize, 1)
																	    in  let <SF> =
																		    %% Line 108
																		    call 'wxFont':'new'
																			(_cor50, DefFamily, 90, 90)
																		in  %% Line 109
																		    <F,SF>
														      end
														  in  let <BlackPen> =
															  %% Line 111
															  call 'wxPen':'new'
															      ({0,0,0}, [{'width',2}])
														      in  let <_cor63> =
															      %% Line 112
															      ( letrec
																    'lc$^0'/1 =
																	fun (_cor60) ->
																	    case _cor60 of
																	      <[Col|_cor57]> when 'true' ->
																		  let <_cor61> =
																		      call 'wxPen':'new'
																			  (Col, [{'width',2}])
																		  in  let <_cor62> =
																			  apply 'lc$^0'/1
																			      (_cor57)
																		      in  ( [_cor61|_cor62]
																			    -| ['compiler_generated'] )
																	      <[]> when 'true' ->
																		  []
																	      ( <_cor60> when 'true' ->
																		    ( primop 'match_fail'
																			  ({'function_clause',_cor60})
																		      -| [{'function_name',{'lc$^0',1}}] )
																		-| ['compiler_generated'] )
																	    end
																in  let <_cor58> =
																	apply 'colors'/0
																	    ()
																    in  let <_cor59> =
																	    call 'erlang':'tuple_to_list'
																		(_cor58)
																	in  apply 'lc$^0'/1
																		(_cor59)
																-| ['list_comprehension'] )
															  in  do  %% Line 113
																  call 'erlang':'process_flag'
																      ('trap_exit', 'true')
																  let <_cor67> =
																      call 'queue':'new'
																	  ()
																  in  let <_cor66> =
																	  %% Line 120
																	  call 'wxe_util':'get_const'
																	      ('wxGREY_PEN')
																      in  let <_cor65> =
																	      %% Line 122
																	      call 'erlang':'list_to_tuple'
																		  (_cor63)
																	  in  %% Line 114
																	      {Panel,{'state',0.00000000000000000000e+00,'false',Parent,%% Line 116
																									{CPU,MEM,IO},{0,_cor67},%% Line 115
																												Panel,%% Line 118
																												      {'paint',Font,%% Line 119
																														    SmallFont,_cor66,%% Line 121
																																     BlackPen,_cor65},'undefined',%% Line 117
																																				  UseGC}}
	      of <_cor68> ->
		  _cor68
	      catch <_cor71,_cor70,_cor69> ->
		  let <_cor72> =
		      %% Line 126
		      call 'erlang':'get_stacktrace'
			  ()
		  in  do  %% Line 126
			  call 'io':'format'
			      ([126|[112|[32|[99|[114|[97|[115|[104|[101|[100|[32|[126|[112|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]], ['observer_perf_wx'|[_cor70|[_cor72|[]]]])
			  %% Line 127
			  {'stop',_cor70}
	  ( <_cor73> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor73})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_event'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx',_cor4,_cor5,_cor6,{'wxCommand','command_menu_selected',_cor7,_cor8,_cor9}},State = %% Line 133
												    {'state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      %% Line 134
	      {'noreply',State}
	  %% Line 136
	  <Event,_X_State> when 'true' ->
	      %% Line 137
	      call 'erlang':'error'
		  ({'unhandled_event',Event})
	end
'handle_sync_event'/3 =
    %% Line 140
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx',_cor28,Panel,_cor29,{'wxPaint',_cor30}},_cor31,%% Line 141
								{'state',Offset,Active,_cor32,%% Line 142
											      Windows,%% Line 142
												      Data,_cor33,Paint,_cor34,%% Line 142
															       UseGC}> when 'true' ->
	      let <_cor6> =
		  %% Line 146
		  case <> of
		    <>
			when try
			      let <_cor3> =
				  call 'erlang':'element'
				      (1, Windows)
			      in  call 'erlang':'=:='
				      (Panel, _cor3)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			1
		    %% Line 147
		    <>
			when try
			      let <_cor4> =
				  call 'erlang':'element'
				      (2, Windows)
			      in  call 'erlang':'=:='
				      (Panel, _cor4)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			2
		    %% Line 148
		    <>
			when try
			      let <_cor5> =
				  call 'erlang':'element'
				      (3, Windows)
			      in  call 'erlang':'=:='
				      (Panel, _cor5)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			3
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor8> =
		      %% Line 150
		      call 'os':'type'
			  ()
		  in  let <_cor9> =
			  %% Line 150
			  call 'erlang':'element'
			      (1, _cor8)
		      in  let <IsWindows> =
			      %% Line 150
			      call 'erlang':'=:='
				  (_cor9, 'win32')
			  in  let <_cor12> =
				  %% Line 152
				  case <> of
				    <>
					when IsWindows ->
					let <_cor11> =
					    %% Line 155
					    call 'wxBufferedPaintDC':'new'
						(Panel)
					in  %% Line 155
					    call 'wx':'typeCast'
						(_cor11, 'wxPaintDC')
				    %% Line 156
				    <> when 'true' ->
					%% Line 157
					call 'wxPaintDC':'new'
					    (Panel)
				  end
			      in  do  %% Line 159
				      ( case IsWindows of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						call 'wxDC':'clear'
						    (_cor12)
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <_cor14> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor14}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor16> =
					  %% Line 160
					  case <> of
					    <>
						when call 'erlang':'=:='
						      (UseGC,
						       'true') ->
						call 'wxGraphicsContext':'create'
						    (_cor12)
					    %% Line 161
					    <> when 'true' ->
						_cor12
					  end
				      in  do  %% Line 164
					      try
						  %% Line 165
						  apply 'draw'/7
						      (Offset, _cor6, {UseGC,_cor16}, Panel, Paint, Data, Active)
					      of <_cor18> ->
						  _cor18
					      catch <_cor21,_cor20,_cor19> ->
						  let <_cor22> =
						      %% Line 167
						      call 'erlang':'get_stacktrace'
							  ()
						  in  %% Line 167
						      call 'io':'format'
							  ([73|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[126|[112|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]], [_cor20|[_cor22|[]]])
					      do  %% Line 169
						  ( case UseGC of
						      ( <( 'true'
							   -| ['compiler_generated'] )> when 'true' ->
							    call 'wxGraphicsContext':'destroy'
								(_cor16)
							-| ['compiler_generated'] )
						      ( <( 'false'
							   -| ['compiler_generated'] )> when 'true' ->
							    'ok'
							-| ['compiler_generated'] )
						      ( <_cor23> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {( 'badarg'
									-| ['compiler_generated'] ),_cor23}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
						  do  %% Line 170
						      call 'wxPaintDC':'destroy'
							  (_cor12)
						      %% Line 171
						      'ok'
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'handle_sync_event',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	%% Line 174
	call 'erlang':'error'
	    ({'unhandled_call',_cor2,_cor1})
'handle_cast'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	%% Line 177
	call 'erlang':'error'
	    ({'unhandled_cast',_cor1})
'handle_info'/2 =
    %% Line 179
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Stats = {'stats',1,_cor51,_cor52,_cor53},State = %% Line 180
							    {'state',_cor54,Active,_cor55,_cor56,Data,Panel,_cor57,_cor58,_cor59}> when 'true' ->
	      do  %% Line 181
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Active,
			       'true') ->
			do  %% Line 182
			    call 'wxWindow':'refresh'
				(Panel)
			    let <_cor3> =
				%% Line 184
				call 'erlang':'self'
				    ()
			    in  %% Line 184
				call 'erlang':'send_after'
				    (166, _cor3, {'refresh',1,6})
		    %% Line 185
		    <> when 'true' ->
			'ok'
		  end
		  let <_rec0> =
		      %% Line 187
		      apply 'add_data'/2
			  (Stats, Data)
		  in  let <_cor8> =
			  %% Line 187
			  call 'erlang':'setelement'
			      (6, State, _rec0)
		      in  let <_cor10> =
			      %% Line 187
			      call 'erlang':'setelement'
				  (2, _cor8, 0.00000000000000000000e+00)
			  in  %% Line 187
			      {'noreply',_cor10}
	  %% Line 189
	  <{'refresh',Seq,Freq},State = {'state',Prev,_cor70,_cor71,_cor72,_cor73,Panel,_cor74,_cor75,_cor76}> when 'true' ->
	      do  %% Line 190
		  call 'wxWindow':'refresh'
		      (Panel)
		  let <Next> =
		      %% Line 191
		      call 'erlang':'+'
			  (Seq, 1)
		  in  %% Line 192
		      case <> of
			<>
			    when let <_cor12> =
				  call 'erlang':'>'
				      (Seq, 1)
			      in  let <_cor13> =
				      call 'erlang':'=:='
					  (Prev, 0.00000000000000000000e+00)
				  in  call 'erlang':'and'
					  (_cor12, _cor13) ->
			    %% Line 194
			    {'noreply',State}
			%% Line 195
			<>
			    when call 'erlang':'<'
				  (Next,
				   Freq) ->
			    let <_cor15> =
				%% Line 196
				call 'erlang':'/'
				    (1000, Freq)
			    in  let <_cor16> =
				    %% Line 196
				    call 'erlang':'trunc'
					(_cor15)
				in  let <_cor14> =
					%% Line 196
					call 'erlang':'self'
					    ()
				    in  do  %% Line 196
					    call 'erlang':'send_after'
						(_cor16, _cor14, {'refresh',Next,Freq})
					    let <_rec2> =
						%% Line 197
						call 'erlang':'/'
						    (Seq, Freq)
					    in  let <_cor20> =
						    %% Line 197
						    call 'erlang':'setelement'
							(2, State, _rec2)
						in  %% Line 197
						    {'noreply',_cor20}
			%% Line 198
			<> when 'true' ->
			    let <_rec4> =
				%% Line 199
				call 'erlang':'/'
				    (Seq, Freq)
			    in  let <_cor24> =
				    %% Line 199
				    call 'erlang':'setelement'
					(2, State, _rec4)
				in  %% Line 199
				    {'noreply',_cor24}
		      end
	  %% Line 202
	  <{'active',Node},State = {'state',_cor97,_cor98,Parent,_cor99,_cor100,Panel,_cor101,Old,_cor102}> when 'true' ->
	      do  %% Line 203
		  apply 'create_menus'/2
		      (Parent, [])
		  %% Line 204
		  try
		      %% Line 205
		      case call 'erlang':'node'
			       (Old) of
			<_cor103>
			    when call 'erlang':'=:='
				  (_cor103,
				   Node) ->
			    do  %% Line 206
				call 'wxWindow':'refresh'
				    (Panel)
				let <_cor28> =
				    %% Line 207
				    call 'erlang':'setelement'
					(3, State, 'true')
				in  %% Line 207
				    {'noreply',_cor28}
			( <_cor25> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor25})
			  -| ['compiler_generated'] )
		      end
		  of <_cor29> ->
		      _cor29
		  catch <_cor32,_cor31,_cor30> ->
		      do  catch
			      %% Line 209
			      call 'erlang':'!'
				  (Old, 'exit')
			  let <Me> =
			      %% Line 210
			      call 'erlang':'self'
				  ()
			  in  let <Pid> =
				  %% Line 211
				  call 'erlang':'spawn_link'
				      (Node, 'observer_backend', 'fetch_stats', [Me|[1000]])
			      in  do  %% Line 212
				      call 'wxWindow':'refresh'
					  (Panel)
				      let <_cor35> =
					  %% Line 213
					  call 'queue':'new'
					      ()
				      in  let <_rec7> = {%% Line 213
					       0,_cor35}
					  in  let <_cor38> =
						  %% Line 213
						  call 'erlang':'setelement'
						      (9, State, Pid)
					      in  let <_cor39> =
						      %% Line 213
						      call 'erlang':'setelement'
							  (6, _cor38, _rec7)
						  in  let <_cor41> =
							  %% Line 213
							  call 'erlang':'setelement'
							      (3, _cor39, 'true')
						      in  %% Line 213
							  {'noreply',_cor41}
	  %% Line 216
	  <'not_active',State = {'state',_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_X_Pid,_cor134}> when 'true' ->
	      let <_cor44> =
		  %% Line 218
		  call 'erlang':'setelement'
		      (3, State, 'false')
	      in  %% Line 218
		  {'noreply',_cor44}
	  %% Line 220
	  <{'EXIT',Old,_cor145},State = {'state',_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154}>
	      when call 'erlang':'=:='
		    (_cor153,
		     Old) ->
	      let <_cor46> =
		  %% Line 221
		  call 'erlang':'setelement'
		      (9, State, 'undefined')
	      in  let <_cor48> =
		      %% Line 221
		      call 'erlang':'setelement'
			  (3, _cor46, 'false')
		  in  %% Line 221
		      {'noreply',_cor48}
	  %% Line 223
	  <_X_Event,State> when 'true' ->
	      %% Line 225
	      {'noreply',State}
	end
'terminate'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Event,{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Pid,_cor11}> when 'true' ->
	      do  catch
		      %% Line 229
		      call 'erlang':'!'
			  (Pid, 'exit')
		  %% Line 230
		  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'terminate',2}}] )
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 231
    fun (_cor2,_cor1,_cor0) ->
	_cor0
'add_data'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Stats,{N,Q}>
	      when call 'erlang':'>'
		    (N,
		     60) ->
	      let <_cor2> =
		  %% Line 235
		  call 'queue':'in'
		      (Stats, Q)
	      in  let <_cor3> =
		      %% Line 235
		      call 'queue':'drop'
			  (_cor2)
		  in  %% Line 235
		      {N,_cor3}
	  %% Line 236
	  <Stats,{N,Q}> when 'true' ->
	      let <_cor5> =
		  %% Line 237
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor4> =
		      %% Line 237
		      call 'queue':'in'
			  (Stats, Q)
		  in  %% Line 237
		      {_cor5,_cor4}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'add_data',2}}] )
	    -| ['compiler_generated'] )
	end
'create_menus'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	%% Line 247
	call 'observer_wx':'create_menus'
	    (_cor1, [{[70|[105|[108|[101]]]],[]}])
'collect_data'/2 =
    %% Line 250
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,{N,Q}> when 'true' ->
	      %% Line 251
	      case call 'queue':'to_list'
		       (Q) of
		%% Line 252
		<[]> when 'true' ->
		    {0,0,[]}
		%% Line 253
		<[_cor44|[]]> when 'true' ->
		    {0,0,[]}
		%% Line 254
		<[{'stats',_X_Ver,Init0,_X_IO,_X_Mem}|Data0]> when 'true' ->
		    let <Init> =
			%% Line 255
			call 'lists':'sort'
			    (Init0)
		    in  let <_cor10> =
			    %% Line 256
			    ( fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <{'stats',_cor45,T0,_cor46,_cor47},[Prev|Acc]> when 'true' ->
					let <TN> =
					    %% Line 257
					    call 'lists':'sort'
						(T0)
					in  let <Delta> =
						%% Line 258
						apply 'calc_delta'/2
						    (TN, Prev)
					    in  let <_cor5> =
						    %% Line 259
						    call 'erlang':'list_to_tuple'
							(Delta)
						in  %% Line 259
						    [TN|[_cor5|Acc]]
				    ( <_cor9,_cor8> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9,_cor8})
					    -| [{'function_name',{'-collect_data/2-fun-0-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-collect_data/2-fun-0-'}}] )
			in  %% Line 256
			    case call 'lists':'foldl'
				     (_cor10, %% Line 260
					      [Init|[]], %% Line 260
							 Data0) of
			      <[_cor48|Data = [First|_cor49]]> when 'true' ->
				  let <_cor13> =
				      %% Line 261
				      apply 'lmax'/1
					  (Data)
				  in  let <_cor12> =
					  %% Line 261
					  call 'lists':'reverse'
					      ([First|Data])
				      in  %% Line 261
					  {N,_cor13,_cor12}
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 263
	  <2,{N,Q}> when 'true' ->
	      let <MemT> =
		  %% Line 264
		  apply 'mem_types'/0
		      ()
	      in  let <_cor28> =
		      %% Line 265
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor19) ->
				    case _cor19 of
				      <[%% Line 267
					{'stats',_X_Ver,_X_RQ,_X_IO,MemInfo}|_cor17]> when 'true' ->
					  let <_cor25> =
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor22) ->
							    case _cor22 of
							      <[{Type,Value}|_cor21]> when 'true' ->
								  %% Line 266
								  ( case call 'lists':'member'
									     (Type, MemT) of
								      <'true'> when 'true' ->
									  let <_cor23> =
									      apply 'lc$^1'/1
										  (_cor21)
									  in  ( [Value|_cor23]
										-| ['compiler_generated'] )
								      ( <'false'> when 'true' ->
									    apply 'lc$^1'/1
										(_cor21)
									-| ['compiler_generated'] )
								      ( <_cor24> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor24})
									-| ['compiler_generated'] )
								    end
								    -| ['list_comprehension'] )
							      ( <[_cor20|_cor21]> when 'true' ->
								    apply 'lc$^1'/1
									(_cor21)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor22> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor22})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(MemInfo)
						-| ['list_comprehension'] )
					  in  let <_cor26> =
						  call 'erlang':'list_to_tuple'
						      (_cor25)
					      in  let <_cor27> =
						      %% Line 267
						      apply 'lc$^0'/1
							  (_cor17)
						  in  ( [_cor26|_cor27]
							-| ['compiler_generated'] )
				      ( <[_cor16|_cor17]> when 'true' ->
					    %% Line 267
					    apply 'lc$^0'/1
						(_cor17)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor19> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor19})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor18> =
				%% Line 267
				call 'queue':'to_list'
				    (Q)
			    in  apply 'lc$^0'/1
				    (_cor18)
			-| ['list_comprehension'] )
		  in  let <_cor30> =
			  %% Line 268
			  apply 'lmax'/1
			      (_cor28)
		      in  %% Line 268
			  {N,_cor30,_cor28}
	  %% Line 269
	  <3,{N,Q}> when 'true' ->
	      %% Line 270
	      case call 'queue':'to_list'
		       (Q) of
		%% Line 271
		<[]> when 'true' ->
		    {0,0,[]}
		%% Line 272
		<[_cor50|[]]> when 'true' ->
		    {0,0,[]}
		%% Line 273
		<[{'stats',_X_Ver,_X_RQ,{{_cor51,In0},{_cor52,Out0}},_X_Mem}|Data0]> when 'true' ->
		    let <_cor37> =
			%% Line 275
			( fun (_cor34,_cor33) ->
			      case <_cor34,_cor33> of
				<{'stats',_cor53,_cor54,{{_cor55,In},{_cor56,Out}},_cor57},[PIn|[Pout|Acc]]> when 'true' ->
				    let <_cor32> =
					%% Line 276
					call 'erlang':'-'
					    (In, PIn)
				    in  let <_cor31> =
					    %% Line 276
					    call 'erlang':'-'
						(Out, Pout)
					in  %% Line 276
					    [In|[Out|[{_cor32,_cor31}|Acc]]]
				( <_cor36,_cor35> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor36,_cor35})
					-| [{'function_name',{'-collect_data/2-fun-1-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-collect_data/2-fun-1-'}}] )
		    in  %% Line 274
			case %% Line 275
			     call 'lists':'foldl'
				 (_cor37, %% Line 277
					  [In0|[Out0|[]]], %% Line 277
							   Data0) of
			  <[_cor58|[_cor59|Data = [First|_cor60]]]> when 'true' ->
			      let <_cor40> =
				  %% Line 278
				  apply 'lmax'/1
				      (Data)
			      in  let <_cor39> =
				      %% Line 278
				      call 'lists':'reverse'
					  ([First|Data])
				  in  %% Line 278
				      {N,_cor40,_cor39}
			  ( <_cor38> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor38})
			    -| ['compiler_generated'] )
			end
		( <_cor41> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor41})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor43,_cor42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43,_cor42})
		  -| [{'function_name',{'collect_data',2}}] )
	    -| ['compiler_generated'] )
	end
'mem_types'/0 =
    %% Line 281
    fun () ->
	%% Line 282
	['total'|['processes'|['atom'|['binary'|['code'|['ets']]]]]]
'lmax'/1 =
    %% Line 284
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      0
	  %% Line 285
	  <List> when 'true' ->
	      let <_cor8> =
		  %% Line 286
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[T|_cor2]>
				      when %% Line 287
					try
					    let <_cor3> =
						call 'erlang':'tuple_size'
						    (T)
					    in  call 'erlang':'>'
						    (_cor3, 0)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor5> =
					  call 'erlang':'tuple_to_list'
					      (T)
				      in  let <_cor6> =
					      call 'lists':'max'
						  (_cor5)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor2)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				  ( <[T|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 288
		  case _cor8 of
		    %% Line 289
		    <[]> when 'true' ->
			0
		    %% Line 290
		    <_cor12> when 'true' ->
			call 'lists':'max'
			    (_cor8)
		  end
	end
'calc_delta'/2 =
    %% Line 293
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Id,WN,TN}|Ss],[{_cor9,WP,TP}|Ps]>
	      when call 'erlang':'=:='
		    (_cor9,
		     Id) ->
	      let <_cor3> =
		  %% Line 294
		  call 'erlang':'-'
		      (WN, WP)
	      in  let <_cor4> =
		      %% Line 294
		      call 'erlang':'*'
			  (100, _cor3)
		  in  let <_cor2> =
			  %% Line 294
			  call 'erlang':'-'
			      (TN, TP)
		      in  let <_cor5> =
			      %% Line 294
			      call 'erlang':'div'
				  (_cor4, _cor2)
			  in  let <_cor6> =
				  %% Line 294
				  apply 'calc_delta'/2
				      (Ss, Ps)
			      in  %% Line 294
				  [_cor5|_cor6]
	  %% Line 295
	  <[],[]> when 'true' ->
	      []
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'calc_delta',2}}] )
	    -| ['compiler_generated'] )
	end
'draw'/7 =
    %% Line 298
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Offset,Id,DC,Panel,Paint = {'paint',_cor67,Small,_cor68,_cor69,Pens},Data,Active> when 'true' ->
	      %% Line 302
	      case apply 'collect_data'/2
		       (Id, Data) of
		<{Len,Max0,Hs}> when 'true' ->
		    let <Max> =
			%% Line 303
			apply 'calc_max'/1
			    (Max0)
		    in  let <_cor14> =
			    %% Line 304
			    try
				let <_cor9> =
				    call 'erlang':'hd'
					(Hs)
				in  call 'erlang':'tuple_size'
					(_cor9)
			    of <_cor10> ->
				_cor10
			    catch <_cor13,_cor12,_cor11> ->
				0
			in  let <Size> =
				%% Line 305
				call 'wxWindow':'getClientSize'
				    (Panel)
			    in  %% Line 306
				case apply 'draw_borders'/6
					 (Id, _cor14, DC, Size, Max, Paint) of
				  <{X0,Y0,WS,HS}> when 'true' ->
				      let <_cor18> =
					  %% Line 307
					  call 'erlang':'*'
					      (60, WS)
				      in  let <_cor19> =
					      %% Line 307
					      call 'erlang':'+'
						  (_cor18, X0)
					  in  let <Last> =
						  %% Line 307
						  call 'erlang':'-'
						      (_cor19, 1)
					      in  let <_cor22> =
						      %% Line 308
						      call 'erlang':'-'
							  (61, Len)
						  in  let <_cor23> =
							  %% Line 308
							  call 'erlang':'max'
							      (_cor22, 0)
						      in  let <_cor24> =
							      %% Line 308
							      call 'erlang':'*'
								  (_cor23, WS)
							  in  let <_cor25> =
								  %% Line 308
								  call 'erlang':'+'
								      (_cor24, X0)
							      in  let <_cor21> =
								      %% Line 308
								      call 'erlang':'*'
									  (Offset, WS)
								  in  let <Start> =
									  %% Line 308
									  call 'erlang':'-'
									      (_cor25, _cor21)
								      in  let <Samples> =
									      %% Line 309
									      call 'erlang':'length'
										  (Hs)
									  in  let <_cor32> =
										  %% Line 310
										  ( case Active of
										      ( <( 'true'
											   -| ['compiler_generated'] )> when 'true' ->
											    ( case <> of
												( <>
												      when call 'erlang':'>'
													    (Samples,
													     1) ->
												      call 'erlang':'>'
													  (_cor14, 0)
												  -| ['compiler_generated'] )
												( <> when 'true' ->
												      'false'
												  -| ['compiler_generated'] )
											      end
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										      ( <( 'false'
											   -| ['compiler_generated'] )> when 'true' ->
											    'false'
											-| ['compiler_generated'] )
										      ( <_cor28> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {( 'badarg'
													-| ['compiler_generated'] ),_cor28}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									      in  do  %% Line 310
										      case _cor32 of
											%% Line 311
											<'true'> when 'true' ->
											    let <Draw> =
												%% Line 312
												( fun (_cor40) ->
												      let <_cor33> =
													  %% Line 313
													  call 'erlang':'*'
													      (Max, HS)
												      in  let <Lines> =
													      %% Line 313
													      apply 'make_lines'/7
														  (Hs, Start, _cor40, {X0,_cor33,Last}, Y0, WS, HS)
													  in  let <_cor36> =
														  %% Line 314
														  call 'erlang':'-'
														      (_cor40, 1)
													      in  let <_cor35> =
														      %% Line 314
														      call 'erlang':'tuple_size'
															  (Pens)
														  in  let <_cor37> =
															  %% Line 314
															  call 'erlang':'rem'
															      (_cor36, _cor35)
														      in  let <_cor38> =
															      %% Line 314
															      call 'erlang':'+'
																  (1, _cor37)
															  in  let <_cor39> =
																  %% Line 314
																  call 'erlang':'element'
																      (_cor38, Pens)
															      in  do  %% Line 314
																      apply 'setPen'/2
																	  (DC, _cor39)
																      do  %% Line 315
																	  apply 'strokeLines'/2
																	      (DC, Lines)
																	  %% Line 316
																	  call 'erlang':'+'
																	      (_cor40, 1)
												  -| [{'id',{0,0,'-draw/7-fun-0-'}}] )
											    in  %% Line 318
												( letrec
												      'lc$^0'/1 =
													  fun (_cor47) ->
													      case _cor47 of
														<[I|_cor44]> when 'true' ->
														    do  apply Draw
															    (I)
															apply 'lc$^0'/1
															    (_cor44)
														<[]> when 'true' ->
														    []
														( <_cor47> when 'true' ->
														      ( primop 'match_fail'
															    ({'function_clause',_cor47})
															-| [{'function_name',{'lc$^0',1}}] )
														  -| ['compiler_generated'] )
													      end
												  in  let <_cor46> =
													  call 'lists':'seq'
													      (_cor14, 1, -1)
												      in  apply 'lc$^0'/1
													      (_cor46)
												  -| ['list_comprehension'] )
											%% Line 319
											<'false'> when 'true' ->
											    let <_cor52> =
												%% Line 320
												( case Active of
												    ( <( 'true'
													 -| ['compiler_generated'] )> when 'true' ->
													  call 'erlang':'=<'
													      (Samples, 1)
												      -| ['compiler_generated'] )
												    ( <( 'false'
													 -| ['compiler_generated'] )> when 'true' ->
													  'false'
												      -| ['compiler_generated'] )
												    ( <_cor50> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {( 'badarg'
														      -| ['compiler_generated'] ),_cor50}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											    in  let <_cor54> =
												    %% Line 320
												    case _cor52 of
												      %% Line 321
												      <'true'> when 'true' ->
													  [87|[97|[105|[116|[105|[110|[103|[32|[111|[110|[32|[100|[97|[116|[97]]]]]]]]]]]]]]]
												      %% Line 322
												      <'false'> when 'true' ->
													  [73|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[110|[111|[116|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]
												      ( <_cor53> when 'true' ->
													    primop 'match_fail'
														({'case_clause',_cor53})
													-| ['compiler_generated'] )
												    end
												in  do  %% Line 324
													apply 'setFont'/3
													    (DC, Small, {0,0,0})
													let <_cor58> =
													    %% Line 325
													    call 'erlang':'+'
														(X0, 100)
													in  let <_cor56> =
														%% Line 325
														call 'erlang':'element'
														    (2, Size)
													    in  let <_cor57> =
														    %% Line 325
														    call 'erlang':'div'
															(_cor56, 2)
														in  %% Line 325
														    apply 'drawText'/4
															(DC, _cor54, _cor58, _cor57)
											( <_cor59> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor59})
											  -| ['compiler_generated'] )
										      end
										      %% Line 327
										      'ok'
				  ( <_cor17> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor17})
				    -| ['compiler_generated'] )
				end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor66,_cor65,_cor64,_cor63,_cor62,_cor61,_cor60> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor66,_cor65,_cor64,_cor63,_cor62,_cor61,_cor60})
		  -| [{'function_name',{'draw',7}}] )
	    -| ['compiler_generated'] )
	end
'make_lines'/7 =
    %% Line 329
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ds = [Data|_cor15],PX,N,Clip,ZeroY,WS,HS> when 'true' ->
	      let <Y> =
		  %% Line 330
		  call 'erlang':'element'
		      (N, Data)
	      in  %% Line 331
		  apply 'make_lines'/9
		      (Ds, PX, N, Clip, ZeroY, WS, HS, Y, [])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'make_lines',7}}] )
	    -| ['compiler_generated'] )
	end
'make_lines'/9 =
    %% Line 333
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[D1|Ds = [D2|Rest]],PX,N,Clip = {Cx,Cy,_cor38},ZeroY,WS,HS,Y0,Acc0> when 'true' ->
	      let <Y1> =
		  %% Line 334
		  call 'erlang':'element'
		      (N, D1)
	      in  let <Y2> =
		      %% Line 335
		      call 'erlang':'element'
			  (N, D2)
		  in  let <_cor12> =
			  %% Line 336
			  case Rest of
			    %% Line 337
			    <[D3|_cor39]> when 'true' ->
				call 'erlang':'element'
				    (N, D3)
			    %% Line 338
			    <[]> when 'true' ->
				Y2
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor17> =
			      %% Line 340
			      call 'erlang':'max'
				  (Cx, PX)
			  in  let <_cor14> =
				  %% Line 340
				  call 'erlang':'*'
				      (Y1, HS)
			      in  let <_cor15> =
				      %% Line 340
				      call 'erlang':'min'
					  (Cy, _cor14)
				  in  let <_cor16> =
					  %% Line 340
					  call 'erlang':'-'
					      (ZeroY, _cor15)
				      in  let <This> = {_cor17,_cor16}
					  in  let <_cor22> =
						  %% Line 341
						  case <> of
						    <>
							when try
							      let <_cor19> =
								  call 'erlang':'-'
								      (Y1, Y2)
							      in  let <_cor20> =
								      call 'erlang':'abs'
									  (_cor19)
								  in  let <_cor21> =
									  call 'erlang':'*'
									      (_cor20, HS)
								      in  call 'erlang':'<'
									      (_cor21, 3.00000000000000000000e+00)
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false' ->
							[This|Acc0]
						    %% Line 342
						    <>
							when call 'erlang':'<'
							      (WS,
							       3.00000000000000000000e+00) ->
							[This|Acc0]
						    %% Line 343
						    <>
							when call 'erlang':'<'
							      (PX,
							       Cx) ->
							%% Line 344
							apply 'make_splines'/10
							    (Y0, Y1, Y2, _cor12, PX, Clip, ZeroY, WS, HS, Acc0)
						    %% Line 345
						    <> when 'true' ->
							%% Line 346
							apply 'make_splines'/10
							    (Y0, Y1, Y2, _cor12, PX, Clip, ZeroY, WS, HS, [This|Acc0])
						  end
					      in  let <_cor24> =
						      %% Line 348
						      call 'erlang':'+'
							  (PX, WS)
						  in  %% Line 348
						      apply 'make_lines'/9
							  (Ds, _cor24, N, Clip, ZeroY, WS, HS, Y1, _cor22)
	  %% Line 349
	  <[D1|[]],_X_PX,N,{_cor40,Cy,Last},ZeroY,_X_WS,HS,_X_Y0,Acc> when 'true' ->
	      let <Y1> =
		  %% Line 350
		  call 'erlang':'element'
		      (N, D1)
	      in  let <_cor26> =
		      %% Line 351
		      call 'erlang':'*'
			  (Y1, HS)
		  in  let <_cor27> =
			  %% Line 351
			  call 'erlang':'min'
			      (Cy, _cor26)
		      in  let <_cor28> =
			      %% Line 351
			      call 'erlang':'-'
				  (ZeroY, _cor27)
			  in  %% Line 351
			      [{Last,_cor28}|Acc]
	  ( <_cor37,_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37,_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'make_lines',9}}] )
	    -| ['compiler_generated'] )
	end
'make_splines'/10 =
    %% Line 353
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Y1> =
	    %% Line 354
	    call 'erlang':'*'
		(_cor8, _cor1)
	in  let <Y2> =
		%% Line 355
		call 'erlang':'*'
		    (_cor7, _cor1)
	    in  let <_cor12> =
		    %% Line 356
		    call 'erlang':'-'
			(Y1, Y2)
		in  let <_cor13> =
			%% Line 356
			call 'erlang':'abs'
			    (_cor12)
		    in  let <Steps> =
			    %% Line 356
			    call 'erlang':'min'
				(_cor13, _cor2)
			in  %% Line 357
			    case <> of
			      <>
				  when call 'erlang':'>'
					(Steps,
					 2) ->
				  let <Y0> =
				      %% Line 358
				      call 'erlang':'*'
					  (_cor9, _cor1)
				  in  let <Y3> =
					  %% Line 359
					  call 'erlang':'*'
					      (_cor6, _cor1)
				      in  let <Tan> =
					      %% Line 360
					      apply 'spline_tan'/4
						  (Y0, Y1, Y2, Y3)
					  in  let <Delta> =
						  %% Line 361
						  call 'erlang':'/'
						      (1, Steps)
					      in  let <_cor20> =
						      %% Line 362
						      call 'erlang':'-'
							  (Steps, 1)
						  in  let <_cor19> =
							  %% Line 362
							  call 'erlang':'*'
							      (Delta, _cor2)
						      in  %% Line 362
							  apply 'splines'/11
							      (_cor20, 0.00000000000000000000e+00, Delta, Tan, Y1, Y2, _cor5, _cor4, _cor3, _cor19, _cor0)
			      %% Line 363
			      <> when 'true' ->
				  _cor0
			    end
'splines'/11 =
    %% Line 367
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,XD,XD0,Tan,Y1,Y2,PX0,Clip = {Cx,Cy,_cor30},ZeroY,WS,Acc>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <PX> =
		  %% Line 368
		  call 'erlang':'+'
		      (PX0, WS)
	      in  let <Delta> =
		      %% Line 369
		      call 'erlang':'+'
			  (XD, XD0)
		  in  %% Line 370
		      case <> of
			<>
			    when call 'erlang':'<'
				  (PX,
				   Cx) ->
			    let <_cor13> =
				%% Line 371
				call 'erlang':'-'
				    (N, 1)
			    in  %% Line 371
				apply 'splines'/11
				    (_cor13, Delta, XD0, Tan, Y1, Y2, PX, Clip, ZeroY, WS, Acc)
			%% Line 372
			<> when 'true' ->
			    let <_cor14> =
				%% Line 373
				apply 'spline'/4
				    (Delta, Tan, Y1, Y2)
			    in  let <_cor15> =
				    %% Line 373
				    call 'erlang':'max'
					(0, _cor14)
				in  let <Y> =
					%% Line 373
					call 'erlang':'min'
					    (Cy, _cor15)
				    in  let <_cor18> =
					    %% Line 374
					    call 'erlang':'-'
						(N, 1)
					in  let <_cor17> =
						%% Line 375
						call 'erlang':'-'
						    (ZeroY, Y)
					    in  %% Line 374
						apply 'splines'/11
						    (_cor18, Delta, XD0, Tan, Y1, Y2, PX, Clip, ZeroY, WS, %% Line 375
													   [{PX,_cor17}|Acc])
		      end
	  %% Line 377
	  <_X_N,_X_XD,_X_XD0,_X_Tan,_X_Y1,_X_Y2,_X_PX,_X_Clip,_X_ZeroY,_X_WS,Acc> when 'true' ->
	      Acc
	end
'spline'/4 =
    %% Line 379
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T,{M1,M2},Y1,Y2> when 'true' ->
	      let <T2> =
		  %% Line 381
		  call 'erlang':'*'
		      (T, T)
	      in  let <_cor5> =
		      %% Line 381
		      call 'erlang':'*'
			  (T, T)
		  in  let <T3> =
			  %% Line 381
			  call 'erlang':'*'
			      (_cor5, T)
		      in  let <_cor8> =
			      %% Line 382
			      call 'erlang':'*'
				  (2, T3)
			  in  let <_cor7> =
				  %% Line 382
				  call 'erlang':'*'
				      (3, T2)
			      in  let <_cor9> =
				      %% Line 382
				      call 'erlang':'-'
					  (_cor8, _cor7)
				  in  let <H1> =
					  %% Line 382
					  call 'erlang':'+'
					      (_cor9, 1)
				      in  let <_cor13> =
					      %% Line 383
					      call 'erlang':'*'
						  (-2, T3)
					  in  let <_cor11> =
						  %% Line 383
						  call 'erlang':'*'
						      (3, T2)
					      in  let <H2> =
						      %% Line 383
						      call 'erlang':'+'
							  (_cor13, _cor11)
						  in  let <_cor15> =
							  %% Line 384
							  call 'erlang':'*'
							      (2, T2)
						      in  let <_cor16> =
							      %% Line 384
							      call 'erlang':'-'
								  (T3, _cor15)
							  in  let <H3> =
								  %% Line 384
								  call 'erlang':'+'
								      (_cor16, T)
							      in  let <H4> =
								      %% Line 385
								      call 'erlang':'-'
									  (T3, T2)
								  in  let <_cor22> =
									  %% Line 387
									  call 'erlang':'*'
									      (M1, H3)
								      in  let <_cor21> =
									      %% Line 387
									      call 'erlang':'*'
										  (Y1, H1)
									  in  let <_cor23> =
										  %% Line 387
										  call 'erlang':'+'
										      (_cor22, _cor21)
									      in  let <_cor20> =
										      %% Line 387
										      call 'erlang':'*'
											  (Y2, H2)
										  in  let <_cor24> =
											  %% Line 387
											  call 'erlang':'+'
											      (_cor23, _cor20)
										      in  let <_cor19> =
											      %% Line 387
											      call 'erlang':'*'
												  (M2, H4)
											  in  %% Line 387
											      call 'erlang':'+'
												  (_cor24, _cor19)
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'spline',4}}] )
	    -| ['compiler_generated'] )
	end
'spline_tan'/4 =
    %% Line 389
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 393
	    call 'erlang':'-'
		(_cor1, _cor3)
	in  let <M1> =
		%% Line 393
		call 'erlang':'*'
		    (5.00000000000000000000e-01, _cor6)
	    in  let <_cor9> =
		    %% Line 394
		    call 'erlang':'-'
			(_cor0, _cor2)
		in  let <M2> =
			%% Line 394
			call 'erlang':'*'
			    (5.00000000000000000000e-01, _cor9)
		    in  %% Line 395
			{M1,M2}
'draw_borders'/6 =
    %% Line 400
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Type,NoGraphs,DC,{W,H},Max,%% Line 401
				      {'paint',Font,Small,Pen,Pen2,_cor126}> when 'true' ->
	      %% Line 402
	      case apply 'bytes'/2
		       (Type, Max) of
		<{Unit,MaxUnit}> when 'true' ->
		    let <Str1> =
			%% Line 403
			call 'observer_lib':'to_str'
			    (MaxUnit)
		    in  let <_cor8> =
			    %% Line 404
			    call 'erlang':'div'
				(MaxUnit, 2)
			in  let <Str2> =
				%% Line 404
				call 'observer_lib':'to_str'
				    (_cor8)
			    in  let <Str3> =
				    %% Line 405
				    call 'observer_lib':'to_str'
					(0)
				in  do  %% Line 407
					apply 'setFont'/3
					    (DC, Font, {0,0,0})
					%% Line 408
					case apply 'getTextExtent'/2
						 (DC, Str1) of
					  <{TW,TH}> when 'true' ->
					      %% Line 409
					      case apply 'getTextExtent'/2
						       (DC, [87]) of
						<{SpaceW,_cor127}> when 'true' ->
						    let <_cor13> =
							%% Line 411
							call 'erlang':'+'
							    (5, TW)
						    in  let <GraphX0> =
							    %% Line 411
							    call 'erlang':'+'
								(_cor13, 5)
							in  let <GraphX1> =
								%% Line 412
								call 'erlang':'-'
								    (W, 20)
							    in  let <_cor17> =
								    %% Line 413
								    call 'erlang':'+'
									(5, TW)
								in  let <TopTextX> =
									%% Line 413
									call 'erlang':'+'
									    (_cor17, 5)
								    in  let <_cor19> =
									    %% Line 414
									    call 'erlang':'+'
										(5, TH)
									in  let <MaxTextY> =
										%% Line 414
										call 'erlang':'+'
										    (_cor19, 5)
									    in  let <_cor21> =
										    %% Line 415
										    call 'erlang':'-'
											(H, 5)
										in  let <BottomTextY> =
											%% Line 415
											call 'erlang':'-'
											    (_cor21, TH)
										    in  let <_cor23> =
											    %% Line 416
											    call 'erlang':'-'
												(BottomTextY, 5)
											in  let <SecondsY> =
												%% Line 416
												call 'erlang':'-'
												    (_cor23, TH)
											    in  let <_cor25> =
												    %% Line 417
												    call 'erlang':'/'
													(TH, 2)
												in  let <GraphY0> =
													%% Line 417
													call 'erlang':'+'
													    (MaxTextY, _cor25)
												    in  let <GraphY1> =
													    %% Line 418
													    call 'erlang':'-'
														(SecondsY, 5)
													in  let <_cor28> =
														%% Line 419
														call 'erlang':'-'
														    (GraphX1, GraphX0)
													    in  let <GraphW> =
														    %% Line 419
														    call 'erlang':'-'
															(_cor28, 1)
														in  let <_cor30> =
															%% Line 420
															call 'erlang':'-'
															    (GraphY1, GraphY0)
														    in  let <GraphH> =
															    %% Line 420
															    call 'erlang':'-'
																(_cor30, 1)
															in  let <_cor32> =
																%% Line 421
																call 'erlang':'-'
																    (GraphY1, GraphY0)
															    in  let <_cor33> =
																    %% Line 421
																    call 'erlang':'/'
																	(_cor32, 4)
																in  let <GraphY25> =
																	%% Line 421
																	call 'erlang':'+'
																	    (GraphY0, _cor33)
																    in  let <_cor35> =
																	    %% Line 422
																	    call 'erlang':'-'
																		(GraphY1, GraphY0)
																	in  let <_cor36> =
																		%% Line 422
																		call 'erlang':'/'
																		    (_cor35, 2)
																	    in  let <GraphY50> =
																		    %% Line 422
																		    call 'erlang':'+'
																			(GraphY0, _cor36)
																		in  let <_cor38> =
																			%% Line 423
																			call 'erlang':'-'
																			    (GraphY1, GraphY0)
																		    in  let <_cor39> =
																			    %% Line 423
																			    call 'erlang':'*'
																				(3, _cor38)
																			in  let <_cor40> =
																				%% Line 423
																				call 'erlang':'/'
																				    (_cor39, 4)
																			    in  let <GraphY75> =
																				    %% Line 423
																				    call 'erlang':'+'
																					(GraphY0, _cor40)
																				in  let <ScaleW> =
																					%% Line 424
																					call 'erlang':'/'
																					    (GraphW, 60)
																				    in  let <ScaleH> =
																					    %% Line 425
																					    call 'erlang':'/'
																						(GraphH, Max)
																					in  do  %% Line 427
																						apply 'setFont'/3
																						    (DC, Small, {0,0,0})
																						let <Align> =
																						    %% Line 428
																						    ( fun (_cor48,_cor47) ->
																							  %% Line 429
																							  case apply 'getTextExtent'/2
																								   (DC, _cor48) of
																							    <{StrW,_cor128}> when 'true' ->
																								let <_cor45> =
																								    %% Line 430
																								    call 'erlang':'-'
																									(GraphX0, StrW)
																								in  let <_cor46> =
																									%% Line 430
																									call 'erlang':'-'
																									    (_cor45, 5)
																								    in  %% Line 430
																									apply 'drawText'/4
																									    (DC, _cor48, _cor46, _cor47)
																							    ( <_cor44> when 'true' ->
																								  primop 'match_fail'
																								      ({'badmatch',_cor44})
																							      -| ['compiler_generated'] )
																							  end
																						      -| [{'id',{0,0,'-draw_borders/6-fun-0-'}}] )
																						in  do  %% Line 432
																							apply Align
																							    (Str1, MaxTextY)
																							let <_cor52> =
																							    %% Line 433
																							    call 'erlang':'/'
																								(TH, 2)
																							in  let <_cor53> =
																								%% Line 433
																								call 'erlang':'-'
																								    (GraphY50, _cor52)
																							    in  do  %% Line 433
																								    apply Align
																									(Str2, _cor53)
																								    let <_cor54> =
																									%% Line 434
																									call 'erlang':'/'
																									    (TH, 2)
																								    in  let <_cor55> =
																									    %% Line 434
																									    call 'erlang':'-'
																										(GraphY1, _cor54)
																									in  let <_cor56> =
																										%% Line 434
																										call 'erlang':'+'
																										    (_cor55, 1)
																									    in  do  %% Line 434
																										    apply Align
																											(Str3, _cor56)
																										    do  %% Line 436
																											apply 'setPen'/2
																											    (DC, Pen)
																											let <DrawSecs> =
																											    %% Line 437
																											    ( fun (_cor64,_cor63) ->
																												  let <_cor57> =
																												      %% Line 438
																												      call 'observer_lib':'to_str'
																													  (_cor64)
																												  in  let <Str> =
																													  %% Line 438
																													  [_cor57|[32|[115]]]
																												      in  let <X> =
																													      %% Line 439
																													      call 'erlang':'+'
																														  (GraphX0, _cor63)
																													  in  let <_cor60> =
																														  %% Line 440
																														  call 'erlang':'-'
																														      (X, SpaceW)
																													      in  do  %% Line 440
																														      apply 'drawText'/4
																															  (DC, Str, _cor60, SecondsY)
																														      let <_cor61> =
																															  %% Line 441
																															  call 'erlang':'+'
																															      (GraphY1, 5)
																														      in  do  %% Line 441
																															      apply 'strokeLine'/5
																																  (DC, X, GraphY0, X, _cor61)
																															      let <_cor62> =
																																  %% Line 442
																																  call 'erlang':'*'
																																      (10, ScaleW)
																															      in  %% Line 442
																																  call 'erlang':'+'
																																      (_cor63, _cor62)
																											      -| [{'id',{0,0,'-draw_borders/6-fun-1-'}}] )
																											in  let <_cor69> =
																												%% Line 444
																												call 'lists':'seq'
																												    (60, 0, -10)
																											    in  do  %% Line 444
																												    call 'lists':'foldl'
																													(DrawSecs, 0, _cor69)
																												    let <_cor70> =
																													%% Line 446
																													call 'erlang':'-'
																													    (GraphX0, 3)
																												    in  do  %% Line 446
																													    apply 'strokeLine'/5
																														(DC, _cor70, GraphY25, GraphX1, GraphY25)
																													    let <_cor71> =
																														%% Line 447
																														call 'erlang':'-'
																														    (GraphX0, 3)
																													    in  do  %% Line 447
																														    apply 'strokeLine'/5
																															(DC, _cor71, GraphY50, GraphX1, GraphY50)
																														    let <_cor72> =
																															%% Line 448
																															call 'erlang':'-'
																															    (GraphX0, 3)
																														    in  do  %% Line 448
																															    apply 'strokeLine'/5
																																(DC, _cor72, GraphY75, GraphX1, GraphY75)
																															    do  %% Line 450
																																apply 'setPen'/2
																																    (DC, Pen2)
																																let <_cor73> =
																																    %% Line 451
																																    call 'erlang':'-'
																																	(GraphY0, 1)
																																in  let <_cor74> =
																																	%% Line 451
																																	call 'erlang':'+'
																																	    (GraphY1, 1)
																																    in  let <_cor75> =
																																	    %% Line 452
																																	    call 'erlang':'+'
																																		(GraphY1, 1)
																																	in  let <_cor76> =
																																		%% Line 452
																																		call 'erlang':'-'
																																		    (GraphY0, 1)
																																	    in  let <_cor77> =
																																		    %% Line 453
																																		    call 'erlang':'-'
																																			(GraphY0, 1)
																																		in  do  %% Line 451
																																			apply 'strokeLines'/2
																																			    (DC, [{GraphX0,_cor73}|[{GraphX0,_cor74}|%% Line 452
																																								     [{GraphX1,_cor75}|[{GraphX1,_cor76}|%% Line 453
																																													 [{GraphX0,_cor77}|[]]]]]])
																																			do  %% Line 455
																																			    apply 'setFont'/3
																																				(DC, Font, {0,0,0})
																																			    do  %% Line 456
																																				case Type of
																																				  %% Line 457
																																				  <1> when 'true' ->
																																				      apply 'drawText'/4
																																					  (DC, [83|[99|[104|[101|[100|[117|[108|[101|[114|[32|[85|[116|[105|[108|[105|[122|[97|[116|[105|[111|[110|[32|[40|[37|[41|[32]]]]]]]]]]]]]]]]]]]]]]]]]], TopTextX, 5)
																																				  %% Line 458
																																				  <2> when 'true' ->
																																				      let <_cor78> =
																																					  call 'erlang':'++'
																																					      ([77|[101|[109|[111|[114|[121|[32|[85|[115|[97|[103|[101|[32]]]]]]]]]]]]], Unit)
																																				      in  apply 'drawText'/4
																																					      (DC, _cor78, TopTextX, 5)
																																				  %% Line 459
																																				  <3> when 'true' ->
																																				      let <_cor79> =
																																					  call 'erlang':'++'
																																					      ([73|[79|[32|[85|[115|[97|[103|[101|[32]]]]]]]]], Unit)
																																				      in  apply 'drawText'/4
																																					      (DC, _cor79, TopTextX, 5)
																																				  ( <_cor80> when 'true' ->
																																					primop 'match_fail'
																																					    ({'case_clause',_cor80})
																																				    -| ['compiler_generated'] )
																																				end
																																				let <Text> =
																																				    %% Line 462
																																				    ( fun (_cor93,_cor92,_cor91,_cor90) ->
																																					  do  %% Line 463
																																					      case <> of
																																						<>
																																						    when call 'erlang':'=='
																																							  (_cor90,
																																							   0) ->
																																						    %% Line 464
																																						    apply 'setFont'/3
																																							(DC, Font, {0,0,0})
																																						%% Line 465
																																						<>
																																						    when call 'erlang':'>'
																																							  (_cor90,
																																							   0) ->
																																						    let <_cor83> =
																																							%% Line 466
																																							call 'erlang':'-'
																																							    (_cor90, 1)
																																						    in  let <_cor81> =
																																							    %% Line 466
																																							    apply 'colors'/0
																																								()
																																							in  let <_cor82> =
																																								%% Line 466
																																								call 'erlang':'tuple_size'
																																								    (_cor81)
																																							    in  let <_cor84> =
																																								    %% Line 466
																																								    call 'erlang':'rem'
																																									(_cor83, _cor82)
																																								in  let <Id> =
																																									%% Line 466
																																									call 'erlang':'+'
																																									    (1, _cor84)
																																								    in  let <_cor86> =
																																									    %% Line 467
																																									    apply 'colors'/0
																																										()
																																									in  let <_cor87> =
																																										%% Line 467
																																										call 'erlang':'element'
																																										    (Id, _cor86)
																																									    in  %% Line 467
																																										apply 'setFont'/3
																																										    (DC, Font, _cor87)
																																						( <> when 'true' ->
																																						      primop 'match_fail'
																																							  ('if_clause')
																																						  -| ['compiler_generated'] )
																																					      end
																																					      do  %% Line 469
																																						  apply 'drawText'/4
																																						      (DC, _cor91, _cor93, _cor92)
																																						  %% Line 470
																																						  case apply 'getTextExtent'/2
																																							   (DC, _cor91) of
																																						    <{StrW,_cor129}> when 'true' ->
																																							let <_cor89> =
																																							    %% Line 471
																																							    call 'erlang':'+'
																																								(StrW, _cor93)
																																							in  %% Line 471
																																							    call 'erlang':'+'
																																								(_cor89, SpaceW)
																																						    ( <_cor88> when 'true' ->
																																							  primop 'match_fail'
																																							      ({'badmatch',_cor88})
																																						      -| ['compiler_generated'] )
																																						  end
																																				      -| [{'id',{0,0,'-draw_borders/6-fun-2-'}}] )
																																				in  do  %% Line 473
																																					case Type of
																																					  %% Line 474
																																					  <1> when 'true' ->
																																					      let <TN0> =
																																						  %% Line 475
																																						  apply Text
																																						      (5, BottomTextY, [83|[99|[104|[101|[100|[117|[108|[101|[114|[58|[32]]]]]]]]]]], 0)
																																					      in  let <_cor106> =
																																						      %% Line 476
																																						      ( fun (_cor103,_cor102) ->
																																							    let <_cor101> =
																																								%% Line 477
																																								call 'erlang':'integer_to_list'
																																								    (_cor103)
																																							    in  %% Line 477
																																								apply Text
																																								    (_cor102, BottomTextY, _cor101, _cor103)
																																							-| [{'id',{0,0,'-draw_borders/6-fun-3-'}}] )
																																						  in  let <_cor100> =
																																							  %% Line 478
																																							  call 'lists':'seq'
																																							      (1, NoGraphs)
																																						      in  %% Line 476
																																							  call 'lists':'foldl'
																																							      (_cor106, %% Line 478
																																									TN0, _cor100)
																																					  %% Line 479
																																					  <2> when 'true' ->
																																					      let <_cor116> =
																																						  %% Line 480
																																						  ( fun (_cor113,_cor112) ->
																																							case <_cor113,_cor112> of
																																							  <MType,{PenId,Pos0}> when 'true' ->
																																							      let <_cor108> =
																																								  %% Line 481
																																								  call 'erlang':'atom_to_list'
																																								      (MType)
																																							      in  let <Str> =
																																								      %% Line 481
																																								      apply 'uppercase'/1
																																									  (_cor108)
																																								  in  let <Pos> =
																																									  %% Line 482
																																									  apply Text
																																									      (Pos0, BottomTextY, Str, PenId)
																																								      in  let <_cor111> =
																																									      %% Line 483
																																									      call 'erlang':'+'
																																										  (PenId, 1)
																																									  in  %% Line 483
																																									      {_cor111,Pos}
																																							  ( <_cor115,_cor114> when 'true' ->
																																								( primop 'match_fail'
																																								      ({'function_clause',_cor115,_cor114})
																																								  -| [{'function_name',{'-draw_borders/6-fun-4-',2}}] )
																																							    -| ['compiler_generated'] )
																																							end
																																						    -| [{'id',{0,0,'-draw_borders/6-fun-4-'}}] )
																																					      in  let <_cor107> =
																																						      %% Line 484
																																						      apply 'mem_types'/0
																																							  ()
																																						  in  %% Line 480
																																						      call 'lists':'foldl'
																																							  (_cor116, %% Line 484
																																								    {1,5}, _cor107)
																																					  %% Line 485
																																					  <3> when 'true' ->
																																					      let <TN0> =
																																						  %% Line 486
																																						  apply Text
																																						      (5, BottomTextY, [73|[110|[112|[117|[116]]]]], 1)
																																					      in  %% Line 487
																																						  apply Text
																																						      (TN0, BottomTextY, [79|[117|[116|[112|[117|[116]]]]]], 2)
																																					  ( <_cor118> when 'true' ->
																																						primop 'match_fail'
																																						    ({'case_clause',_cor118})
																																					    -| ['compiler_generated'] )
																																					end
																																					let <_cor119> =
																																					    %% Line 489
																																					    call 'erlang':'+'
																																						(GraphX0, 1)
																																					in  %% Line 489
																																					    {_cor119,GraphY1,ScaleW,ScaleH}
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor12})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor11})
					    -| ['compiler_generated'] )
					end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor125,_cor124,_cor123,_cor122,_cor121,_cor120> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor125,_cor124,_cor123,_cor122,_cor121,_cor120})
		  -| [{'function_name',{'draw_borders',6}}] )
	    -| ['compiler_generated'] )
	end
'uppercase'/1 =
    %% Line 491
    fun (_cor0) ->
	case _cor0 of
	  <[C|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 492
		  call 'erlang':'-'
		      (C, 97)
	      in  let <_cor2> =
		      %% Line 492
		      call 'erlang':'+'
			  (_cor1, 65)
		  in  %% Line 492
		      [_cor2|Rest]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'uppercase',1}}] )
	    -| ['compiler_generated'] )
	end
'calc_max'/1 =
    %% Line 494
    fun (_cor0) ->
	case _cor0 of
	  <Max>
	      when call 'erlang':'<'
		    (_cor0,
		     10) ->
	      10
	  %% Line 495
	  <Max> when 'true' ->
	      apply 'calc_max1'/1
		  (Max)
	end
'calc_max1'/1 =
    %% Line 497
    fun (_cor0) ->
	%% Line 498
	case call 'erlang':'div'
		 (_cor0, 10) of
	  %% Line 499
	  <X>
	      when call 'erlang':'<'
		    (X,
		     10) ->
	      %% Line 500
	      case call 'erlang':'rem'
		       (_cor0, 10) of
		%% Line 501
		<0> when 'true' ->
		    _cor0
		%% Line 502
		<_cor6> when 'true' ->
		    let <_cor1> =
			%% Line 503
			call 'erlang':'+'
			    (X, 1)
		    in  %% Line 503
			call 'erlang':'*'
			    (_cor1, 10)
	      end
	  %% Line 505
	  <X> when 'true' ->
	      let <_cor3> =
		  %% Line 506
		  apply 'calc_max1'/1
		      (X)
	      in  %% Line 506
		  call 'erlang':'*'
		      (10, _cor3)
	end
'bytes'/2 =
    %% Line 509
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,Val> when 'true' ->
	      {[],Val}
	  %% Line 510
	  <_cor7,B> when 'true' ->
	      let <KB> =
		  %% Line 511
		  call 'erlang':'div'
		      (B, 1024)
	      in  let <MB> =
		      %% Line 512
		      call 'erlang':'div'
			  (KB, 1024)
		  in  let <GB> =
			  %% Line 513
			  call 'erlang':'div'
			      (MB, 1024)
		      in  %% Line 514
			  case <> of
			    %% Line 515
			    <>
				when call 'erlang':'>'
				      (GB,
				       10) ->
				{[40|[71|[66|[41]]]],GB}
			    %% Line 516
			    <>
				when call 'erlang':'>'
				      (MB,
				       10) ->
				{[40|[77|[66|[41]]]],MB}
			    %% Line 517
			    <>
				when call 'erlang':'>'
				      (KB,
				       0) ->
				{[40|[75|[66|[41]]]],KB}
			    %% Line 518
			    <> when 'true' ->
				{[40|[66|[41]]],B}
			  end
	end
'colors'/0 =
    %% Line 521
    fun () ->
	%% Line 522
	{{200,50,50},{50,200,50},{50,50,200},{255,110,0},{50,200,200},{200,50,200},{240,200,80},{140,2,140},{100,200,240},{100,240,100}}
'haveGC'/0 =
    %% Line 531
    fun () ->
	%% Line 532
	try
	    do  %% Line 533
		call 'wxGraphicsRenderer':'getDefaultRenderer'
		    ()
		%% Line 534
		'true'
	of <_cor0> ->
	    _cor0
	catch <_cor3,_cor2,_cor1> ->
	    %% Line 535
	    'false'
'setPen'/2 =
    %% Line 538
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'false',DC},Pen> when 'true' ->
	      %% Line 539
	      call 'wxDC':'setPen'
		  (DC, Pen)
	  %% Line 540
	  <{'true',GC},Pen> when 'true' ->
	      %% Line 541
	      call 'wxGraphicsContext':'setPen'
		  (GC, Pen)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'setPen',2}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/3 =
    %% Line 543
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'false',DC},Font,Color> when 'true' ->
	      do  %% Line 544
		  call 'wxDC':'setTextForeground'
		      (DC, Color)
		  %% Line 545
		  call 'wxDC':'setFont'
		      (DC, Font)
	  %% Line 546
	  <{'true',GC},Font,Color> when 'true' ->
	      %% Line 547
	      call 'wxGraphicsContext':'setFont'
		  (GC, Font, Color)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'setFont',3}}] )
	    -| ['compiler_generated'] )
	end
'setBrush'/2 =
    %% Line 549
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'false',DC},Brush> when 'true' ->
	      %% Line 550
	      call 'wxDC':'setBrush'
		  (DC, Brush)
	  %% Line 551
	  <{'true',GC},Brush> when 'true' ->
	      %% Line 552
	      call 'wxGraphicsContext':'setBrush'
		  (GC, Brush)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'setBrush',2}}] )
	    -| ['compiler_generated'] )
	end
'strokeLine'/5 =
    %% Line 554
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'false',DC},X0,Y0,X1,Y1> when 'true' ->
	      let <_cor8> =
		  %% Line 555
		  call 'erlang':'round'
		      (X0)
	      in  let <_cor7> =
		      %% Line 555
		      call 'erlang':'round'
			  (Y0)
		  in  let <_cor6> =
			  %% Line 555
			  call 'erlang':'round'
			      (X1)
		      in  let <_cor5> =
			      %% Line 555
			      call 'erlang':'round'
				  (Y1)
			  in  %% Line 555
			      call 'wxDC':'drawLine'
				  (DC, {_cor8,_cor7}, {_cor6,_cor5})
	  %% Line 556
	  <{'true',GC},X0,Y0,X1,Y1> when 'true' ->
	      %% Line 557
	      call 'wxGraphicsContext':'strokeLine'
		  (GC, X0, Y0, X1, Y1)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'strokeLine',5}}] )
	    -| ['compiler_generated'] )
	end
'strokeLines'/2 =
    %% Line 559
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'false',DC},Lines> when 'true' ->
	      let <_cor8> =
		  %% Line 560
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{X,Y}|_cor3]> when 'true' ->
				      let <_cor6> =
					  call 'erlang':'round'
					      (X)
				      in  let <_cor5> =
					      call 'erlang':'round'
						  (Y)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [{_cor6,_cor5}|_cor7]
						    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Lines)
		    -| ['list_comprehension'] )
	      in  %% Line 560
		  call 'wxDC':'drawLines'
		      (DC, _cor8)
	  %% Line 561
	  <{'true',GC},Lines> when 'true' ->
	      %% Line 562
	      call 'wxGraphicsContext':'strokeLines'
		  (GC, Lines)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'strokeLines',2}}] )
	    -| ['compiler_generated'] )
	end
'drawRoundedRectangle'/6 =
    %% Line 564
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'false',DC},X0,Y0,X1,Y1,R> when 'true' ->
	      let <_cor10> =
		  %% Line 565
		  call 'erlang':'round'
		      (X0)
	      in  let <_cor9> =
		      %% Line 565
		      call 'erlang':'round'
			  (Y0)
		  in  let <_cor8> =
			  %% Line 565
			  call 'erlang':'round'
			      (X1)
		      in  let <_cor7> =
			      %% Line 565
			      call 'erlang':'round'
				  (Y1)
			  in  let <_cor6> =
				  %% Line 565
				  call 'erlang':'round'
				      (R)
			      in  %% Line 565
				  call 'wxDC':'drawRoundedRectangle'
				      (DC, {_cor10,_cor9}, {_cor8,_cor7}, _cor6)
	  %% Line 566
	  <{'true',GC},X0,Y0,X1,Y1,R> when 'true' ->
	      %% Line 567
	      call 'wxGraphicsContext':'drawRoundedRectangle'
		  (GC, X0, Y0, X1, Y1, R)
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'drawRoundedRectangle',6}}] )
	    -| ['compiler_generated'] )
	end
'drawText'/4 =
    %% Line 569
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'false',DC},Str,X,Y> when 'true' ->
	      let <_cor5> =
		  %% Line 570
		  call 'erlang':'round'
		      (X)
	      in  let <_cor4> =
		      %% Line 570
		      call 'erlang':'round'
			  (Y)
		  in  %% Line 570
		      call 'wxDC':'drawText'
			  (DC, Str, {_cor5,_cor4})
	  %% Line 571
	  <{'true',GC},Str,X,Y> when 'true' ->
	      %% Line 572
	      call 'wxGraphicsContext':'drawText'
		  (GC, Str, X, Y)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'drawText',4}}] )
	    -| ['compiler_generated'] )
	end
'getTextExtent'/2 =
    %% Line 574
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'false',DC},Str> when 'true' ->
	      %% Line 575
	      call 'wxDC':'getTextExtent'
		  (DC, Str)
	  %% Line 576
	  <{'true',GC},Str> when 'true' ->
	      %% Line 577
	      case call 'wxGraphicsContext':'getTextExtent'
		       (GC, Str) of
		<{W,H,_cor5,_cor6}> when 'true' ->
		    %% Line 578
		    {W,H}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'getTextExtent',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('observer_perf_wx')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('observer_perf_wx', _cor0)
end