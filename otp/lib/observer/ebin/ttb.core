module 'ttb' ['ctp'/0,
	      'ctp'/1,
	      'ctp'/2,
	      'ctp'/3,
	      'ctpg'/0,
	      'ctpg'/1,
	      'ctpg'/2,
	      'ctpg'/3,
	      'ctpl'/0,
	      'ctpl'/1,
	      'ctpl'/2,
	      'ctpl'/3,
	      'dump_ti'/1,
	      'format'/1,
	      'format'/2,
	      'get_et_handler'/0,
	      'list_config'/1,
	      'list_history'/0,
	      'module_info'/0,
	      'module_info'/1,
	      'p'/2,
	      'run_config'/1,
	      'run_config'/2,
	      'run_history'/1,
	      'seq_trigger_ms'/0,
	      'seq_trigger_ms'/1,
	      'start_trace'/4,
	      'stop'/0,
	      'stop'/1,
	      'tp'/2,
	      'tp'/3,
	      'tp'/4,
	      'tpl'/2,
	      'tpl'/3,
	      'tpl'/4,
	      'tracer'/0,
	      'tracer'/1,
	      'tracer'/2,
	      'write_config'/2,
	      'write_config'/3,
	      'write_trace_info'/2]
    attributes [%% Line 20
		'author' =
		    %% Line 20
		    ['siri@erix.ericsson.se'],
		%% Line 21
		'author' =
		    %% Line 21
		    ['bartlomiej.puzon@erlang-solutions.com'],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 541
		'spec' =
		    %% Line 541
		    [{{'string2ms',1},[{'type',541,'fun',[{'type',541,'product',[{'type',541,'string',[]}]}|[{'type',541,'union',[{'type',541,'tuple',[{'atom',541,'ok'}|[{'type',541,'list',[]}]]}|[{'type',541,'tuple',[{'atom',541,'error'}|[{'atom',541,'fun_format'}]]}]]}]]}]}],
		%% Line 559
		'spec' =
		    %% Line 559
		    [{{'fix_dot',1},[{'type',559,'fun',[{'type',559,'product',[{'type',559,'string',[]}]}|[{'type',559,'string',[]}]]}]}]]
'start_trace'/4 =
    %% Line 53
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Nodes,Patterns,{Procs,Flags},Options> when 'true' ->
	      %% Line 54
	      case apply 'tracer'/2
		       (Nodes, Options) of
		<{'ok',_cor17}> when 'true' ->
		    do  %% Line 55
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[Args|_cor6]> when 'true' ->
					    let <_cor8> =
						call 'erlang':'tuple_to_list'
						    (Args)
					    in  case call 'erlang':'apply'
							 ('ttb', 'tpl', _cor8) of
						  <{'ok',_cor18}> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor6)
						  ( <_cor9> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor9})
						    -| ['compiler_generated'] )
						end
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Patterns)
			  -| ['list_comprehension'] )
			let <_cor19> =
			    %% Line 56
			    apply 'p'/2
				(Procs, Flags)
			in  %% Line 56
			    case _cor19 of
			      <{'ok',_cor20}> when 'true' ->
				  ( _cor19
				    -| ['compiler_generated'] )
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor12})
				-| ['compiler_generated'] )
			    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'start_trace',4}}] )
	    -| ['compiler_generated'] )
	end
'tracer'/0 =
    %% Line 61
    fun () ->
	let <_cor0> =
	    call 'erlang':'node'
		()
	in  apply 'tracer'/1
		(_cor0)
'tracer'/1 =
    %% Line 62
    fun (_cor0) ->
	case _cor0 of
	  <'shell'> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'node'
		      ()
	      in  apply 'tracer'/2
		      (_cor1, 'shell')
	  %% Line 63
	  <'dbg'> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'node'
		      ()
	      in  apply 'tracer'/2
		      (_cor2, {'shell','only'})
	  %% Line 64
	  <Nodes> when 'true' ->
	      apply 'tracer'/2
		  (Nodes, [])
	end
'tracer'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	%% Line 66
	case apply 'opt'/1
		 (_cor0) of
	  <{PI,Client,Traci}> when 'true' ->
	      let <Pid> =
		  %% Line 68
		  apply 'start'/1
		      (Traci)
	      in  do  %% Line 69
		      apply 'store'/2
			  ('tracer', [_cor1|[_cor0|[]]])
		      %% Line 70
		      apply 'do_tracer'/4
			  (_cor1, PI, Client, [{'ttb_control',Pid}|Traci])
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'do_tracer'/4 =
    %% Line 72
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Nodes> =
	    %% Line 73
	    apply 'nods'/1
		(_cor3)
	in  let <Clients> =
		%% Line 74
		apply 'clients'/2
		    (Nodes, _cor1)
	    in  %% Line 75
		apply 'do_tracer'/3
		    (Clients, _cor2, _cor0)
'do_tracer'/3 =
    %% Line 77
    fun (_cor2,_cor1,_cor0) ->
	let <Shell> =
	    %% Line 78
	    call 'proplists':'get_value'
		('shell', _cor0, 'false')
	in  let <DefShell> =
		%% Line 79
		( fun (_cor4) ->
		      call 'dbg':'dhandler'
			  (_cor4, 'standard_io')
		  -| [{'id',{0,0,'-do_tracer/3-fun-0-'}}] )
	    in  let <_cor29> =
		    %% Line 82
		    ( fun (_cor26,_cor25) ->
			  case <_cor26,_cor25> of
			    <{N,{'local',File},TF},{CS,S}> when 'true' ->
				let <TF2,FileInfo,ShellOutput> =
				    %% Line 84
				    case Shell of
				      %% Line 85
				      <'only'> when 'true' ->
					  <'none','shell_only',DefShell>
				      %% Line 86
				      <'true'> when 'true' ->
					  <TF,{'file',File},DefShell>
				      %% Line 87
				      <{'only',Fun}> when 'true' ->
					  <'none','shell_only',Fun>
				      %% Line 88
				      <Fun>
					  when call 'erlang':'is_function'
						(Shell) ->
					  <TF,{'file',File},Fun>
				      %% Line 89
				      <_cor35> when 'true' ->
					  <TF,{'file',File},'false'>
				    end
				in  let <_cor14> =
					%% Line 91
					case N of
					  %% Line 92
					  <'nonode@nohost'> when 'true' ->
					      %% Line 93
					      case call 'inet':'gethostname'
						       () of
						<{'ok',H}> when 'true' ->
						    %% Line 94
						    H
						( <_cor10> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor10})
						  -| ['compiler_generated'] )
					      end
					  %% Line 95
					  <_cor36> when 'true' ->
					      let <_cor11> =
						  %% Line 96
						  call 'erlang':'atom_to_list'
						      (N)
					      in  %% Line 96
						  case call 'string':'tokens'
							   (_cor11, [64]) of
						    <[_cor37|[H|[]]]> when 'true' ->
							%% Line 97
							H
						    ( <_cor12> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor12})
						      -| ['compiler_generated'] )
						  end
					end
				    in  let <_cor17> =
					    catch
						let <_cor16> =
						    %% Line 99
						    call 'dbg':'trace_port'
							('ip', 0)
						in  %% Line 99
						    call 'dbg':'tracer'
							(N, 'port', _cor16)
					in  %% Line 99
					    case _cor17 of
					      %% Line 100
					      <{'ok',_cor38}>
						  when call 'erlang':'=:='
							(_cor38,
							 N) ->
						  %% Line 101
						  case call 'dbg':'trace_port_control'
							   (N, 'get_listen_port') of
						    <{'ok',Port}> when 'true' ->
							%% Line 102
							case call 'dbg':'get_tracer'
								 (N) of
							  <{'ok',T}> when 'true' ->
							      do  %% Line 103
								  call 'rpc':'call'
								      (N, 'seq_trace', 'set_system_tracer', [T|[]])
								  do  %% Line 104
								      call 'dbg':'trace_client'
									  ('ip', {_cor14,Port}, %% Line 105
												{( 'ip_to_file'/2
												   -| [{'id',{0,0,'-do_tracer/3-fun-1-'}}] ),{FileInfo,ShellOutput}})
								      %% Line 106
								      {[{N,{'local',File,Port},TF2}|CS],[N|S]}
							  ( <_cor19> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor19})
							    -| ['compiler_generated'] )
							end
						    ( <_cor18> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor18})
						      -| ['compiler_generated'] )
						  end
					      %% Line 107
					      <Other> when 'true' ->
						  do  %% Line 108
						      apply 'display_warning'/2
							  (N, {'cannot_open_ip_trace_port',_cor14,%% Line 110
												  Other})
						      %% Line 111
						      {CS,S}
					    end
			    %% Line 113
			    <Client = {N,C,_cor39},{CS,S}> when 'true' ->
				let <_cor22> =
				    catch
					let <_cor21> =
					    %% Line 114
					    call 'dbg':'trace_port'
						('file', C)
					in  %% Line 114
					    call 'dbg':'tracer'
						(N, 'port', _cor21)
				in  %% Line 114
				    case _cor22 of
				      %% Line 115
				      <{'ok',_cor40}>
					  when call 'erlang':'=:='
						(_cor40,
						 N) ->
					  %% Line 116
					  case call 'dbg':'get_tracer'
						   (N) of
					    <{'ok',T}> when 'true' ->
						do  %% Line 117
						    call 'rpc':'call'
							(N, 'seq_trace', 'set_system_tracer', [T|[]])
						    %% Line 118
						    {[Client|CS],[N|S]}
					    ( <_cor23> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor23})
					      -| ['compiler_generated'] )
					  end
				      %% Line 119
				      <Other> when 'true' ->
					  do  %% Line 120
					      apply 'display_warning'/2
						  (N, Other)
					      %% Line 121
					      {CS,S}
				    end
			    ( <_cor28,_cor27> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor28,_cor27})
				    -| [{'function_name',{'-do_tracer/3-fun-2-',2}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-do_tracer/3-fun-2-'}}] )
		in  %% Line 80
		    case %% Line 81
			 call 'lists':'foldl'
			     (_cor29, %% Line 124
				      {[],[]}, _cor2) of
		      <{ClientSucc,Succ}> when 'true' ->
			  %% Line 126
			  case Succ of
			    %% Line 127
			    <[]> when 'true' ->
				%% Line 128
				{'ok',Succ}
			    %% Line 129
			    <_X_list> when 'true' ->
				do  %% Line 130
				    apply 'write_info'/3
					(ClientSucc, _cor1, _cor0)
				    %% Line 131
				    {'ok',Succ}
			  end
		      ( <_cor30> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor30})
			-| ['compiler_generated'] )
		    end
'opt'/1 =
    %% Line 134
    fun (_cor0) ->
	case _cor0 of
	  <Opt>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 135
	      apply 'opt'/2
		  (Opt, {'true','ttb',[]})
	  %% Line 136
	  <Opt> when 'true' ->
	      %% Line 137
	      apply 'opt'/1
		  ([Opt|[]])
	end
'opt'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'process_info',PI}|O],{_cor5,Client,Traci}> when 'true' ->
	      %% Line 140
	      apply 'opt'/2
		  (O, {PI,Client,Traci})
	  %% Line 141
	  <[{'file',Client}|O],{PI,_cor6,Traci}> when 'true' ->
	      let <_cor2> =
		  %% Line 142
		  apply 'get_logname'/1
		      (Client)
	      in  %% Line 142
		  apply 'opt'/2
		      (O, {PI,Client,[{'logfile',_cor2}|Traci]})
	  %% Line 143
	  <[{'handler',Handler}|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 144
	      apply 'opt'/2
		  (O, {PI,Client,[{'handler',Handler}|Traci]})
	  %% Line 145
	  <[{'timer',{MSec,StopOpts}}|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 146
	      apply 'opt'/2
		  (O, {PI,Client,[{'timer',{MSec,StopOpts}}|Traci]})
	  %% Line 147
	  <[{'timer',MSec}|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 148
	      apply 'opt'/2
		  (O, {PI,Client,[{'timer',{MSec,[]}}|Traci]})
	  %% Line 149
	  <[{'overload_check',{MSec,M,F}}|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 150
	      apply 'opt'/2
		  (O, {PI,Client,[{'overload_check',{MSec,M,F}}|Traci]})
	  %% Line 151
	  <['shell'|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 152
	      apply 'opt'/2
		  (O, {PI,Client,[{'shell','true'}|Traci]})
	  %% Line 153
	  <[{'shell',Type}|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 154
	      apply 'opt'/2
		  (O, {PI,Client,[{'shell',Type}|Traci]})
	  %% Line 155
	  <['resume'|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 156
	      apply 'opt'/2
		  (O, {PI,Client,[{'resume',{'true',10000}}|Traci]})
	  %% Line 157
	  <[{'resume',MSec}|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 158
	      apply 'opt'/2
		  (O, {PI,Client,[{'resume',{'true',MSec}}|Traci]})
	  %% Line 159
	  <[{'flush',MSec}|O],{PI,Client,Traci}> when 'true' ->
	      %% Line 160
	      apply 'opt'/2
		  (O, {PI,Client,[{'flush',MSec}|Traci]})
	  %% Line 161
	  <[],Opt> when 'true' ->
	      %% Line 162
	      apply 'ensure_opt'/1
		  (Opt)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'opt',2}}] )
	    -| ['compiler_generated'] )
	end
'ensure_opt'/1 =
    %% Line 164
    fun (_cor0) ->
	case _cor0 of
	  <{PI,Client,Traci}> when 'true' ->
	      let <_cor1> =
		  %% Line 165
		  call 'proplists':'get_value'
		      ('flush', Traci)
	      in  do  %% Line 165
		      case <_cor1,Client> of
			%% Line 166
			<'undefined',_cor7> when 'true' ->
			    'ok'
			%% Line 167
			<_cor8,{'local',_cor9}> when 'true' ->
			    call 'erlang':'exit'
				('flush_unsupported_with_ip_trace_port')
			%% Line 168
			<_cor10,_cor11> when 'true' ->
			    'ok'
		      end
		      let <_cor3> =
			  %% Line 170
			  call 'proplists':'get_value'
			      ('shell', Traci, 'false')
		      in  let <NeedIpTracer> =
			      %% Line 170
			      call 'erlang':'=/='
				  (_cor3, 'false')
			  in  %% Line 171
			      case <NeedIpTracer,Client> of
				%% Line 172
				<'false',_cor12> when 'true' ->
				    {PI,Client,Traci}
				%% Line 173
				<'true','ttb'> when 'true' ->
				    {PI,{'local','ttb'},Traci}
				%% Line 174
				<'true',{'local',File}> when 'true' ->
				    {PI,{'local',File},Traci}
				%% Line 175
				<'true',_cor13> when 'true' ->
				    call 'erlang':'exit'
					('local_client_required_on_shell_tracing')
				( <_fol10,_fol11> when 'true' ->
				      let <_cor5> = {_fol10,_fol11}
				      in  primop 'match_fail'
					      ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'ensure_opt',1}}] )
	    -| ['compiler_generated'] )
	end
'get_logname'/1 =
    %% Line 178
    fun (_cor0) ->
	case _cor0 of
	  <{'local',F}> when 'true' ->
	      apply 'get_logname'/1
		  (F)
	  %% Line 179
	  <{'wrap',F}> when 'true' ->
	      call 'filename':'basename'
		  (F)
	  %% Line 180
	  <{'wrap',F,_cor2,_cor3}> when 'true' ->
	      call 'filename':'basename'
		  (F)
	  %% Line 181
	  <F> when 'true' ->
	      call 'filename':'basename'
		  (F)
	end
'nods'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <'all'> when 'true' ->
	      let <_cor1> =
		  %% Line 184
		  call 'erlang':'node'
		      ()
	      in  let <_cor2> =
		      %% Line 184
		      call 'erlang':'nodes'
			  ()
		  in  let <Nodes1> =
			  %% Line 184
			  apply 'remove_active'/1
			      ([_cor1|_cor2])
		      in  %% Line 185
			  apply 'remove_faulty_runtime_tools_vsn'/1
			      (Nodes1)
	  %% Line 186
	  <Node>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 187
	      apply 'nods'/1
		  ([Node|[]])
	  %% Line 188
	  <Nodes>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <Nodes1> =
		  %% Line 189
		  apply 'remove_active'/1
		      (Nodes)
	      in  let <Nodes2> =
		      %% Line 190
		      apply 'remove_noexist'/1
			  (Nodes1)
		  in  %% Line 191
		      apply 'remove_faulty_runtime_tools_vsn'/1
			  (Nodes2)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'nods',1}}] )
	    -| ['compiler_generated'] )
	end
'remove_active'/1 =
    %% Line 193
    fun (_cor0) ->
	let <Active> =
	    %% Line 194
	    apply 'get_nodes'/0
		()
	in  let <_cor5> =
		%% Line 196
		( fun (_cor3) ->
		      case call 'lists':'member'
			       (_cor3, Active) of
			%% Line 197
			<'false'> when 'true' ->
			    'true'
			%% Line 198
			<'true'> when 'true' ->
			    do  apply 'display_warning'/2
				    (_cor3, 'already_started')
				'false'
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor2})
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-remove_active/1-fun-0-'}}] )
	    in  %% Line 195
		call 'lists':'filter'
		    (_cor5, _cor0)
'remove_noexist'/1 =
    %% Line 202
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 204
	    ( fun (_cor3) ->
		  case _cor3 of
		    <N>
			when try
			      let <_cor1> =
				  call 'erlang':'node'
				      ()
			      in  call 'erlang':'=:='
				      (_cor3, _cor1)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 205
			'true'
		    %% Line 206
		    <N> when 'true' ->
			%% Line 207
			case call 'net_adm':'ping'
				 (N) of
			  %% Line 208
			  <'pong'> when 'true' ->
			      'true'
			  %% Line 209
			  <'pang'> when 'true' ->
			      do  apply 'display_warning'/2
				      (N, 'no_connection')
				  'false'
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor2})
			    -| ['compiler_generated'] )
			end
		  end
	      -| [{'id',{0,0,'-remove_noexist/1-fun-0-'}}] )
	in  %% Line 203
	    call 'lists':'filter'
		(_cor5, _cor0)
'remove_faulty_runtime_tools_vsn'/1 =
    %% Line 213
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 215
	    ( fun (_cor2) ->
		  %% Line 216
		  case call 'rpc':'call'
			   (_cor2, 'observer_backend', 'vsn', []) of
		    %% Line 217
		    <{'ok',Vsn}> when 'true' ->
			apply 'check_vsn'/2
			    (_cor2, Vsn)
		    %% Line 218
		    <_X_Error> when 'true' ->
			do  apply 'display_warning'/2
				(_cor2, 'faulty_vsn_of_runtime_tools')
			    'false'
		  end
	      -| [{'id',{0,0,'-remove_faulty_runtime_tools_vsn/1-fun-0-'}}] )
	in  %% Line 214
	    call 'lists':'filter'
		(_cor4, _cor0)
'check_vsn'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	'true'
'clients'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Nodes,{'wrap',Name}> when 'true' ->
	      let <F> =
		  %% Line 228
		  ( fun (_cor4) ->
			let <TraceFile> =
			    %% Line 229
			    apply 'name'/2
				(_cor4, Name)
			in  let <_cor3> =
				%% Line 230
				call 'erlang':'++'
				    (TraceFile, [46])
			    in  %% Line 230
				{_cor4,{_cor3,'wrap',[46|[119|[114|[112]]]]},TraceFile}
		    -| [{'id',{0,0,'-clients/2-fun-0-'}}] )
	      in  %% Line 232
		  call 'lists':'map'
		      (F, Nodes)
	  %% Line 233
	  <Nodes,{'wrap',Name,Size,Count}> when 'true' ->
	      let <F> =
		  %% Line 234
		  ( fun (_cor9) ->
			let <TraceFile> =
			    %% Line 235
			    apply 'name'/2
				(_cor9, Name)
			in  let <_cor8> =
				%% Line 236
				call 'erlang':'++'
				    (TraceFile, [46])
			    in  %% Line 236
				{_cor9,{_cor8,'wrap',[46|[119|[114|[112]]]],Size,Count},TraceFile}
		    -| [{'id',{0,0,'-clients/2-fun-1-'}}] )
	      in  %% Line 238
		  call 'lists':'map'
		      (F, Nodes)
	  %% Line 239
	  <Nodes,{'local',RealClient}> when 'true' ->
	      let <WrapClients> =
		  %% Line 240
		  apply 'clients'/2
		      (Nodes, RealClient)
	      in  let <F> =
		      %% Line 241
		      ( fun (_cor13) ->
			    case _cor13 of
			      <{Node,Client,TraceFile}> when 'true' ->
				  %% Line 242
				  {Node,{'local',Client},TraceFile}
			      ( <_cor14> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor14})
				      -| [{'function_name',{'-clients/2-fun-2-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-clients/2-fun-2-'}}] )
		  in  %% Line 244
		      call 'lists':'map'
			  (F, WrapClients)
	  %% Line 245
	  <Nodes,Name> when 'true' ->
	      let <F> =
		  %% Line 246
		  ( fun (_cor17) ->
			let <TraceFile> =
			    %% Line 247
			    apply 'name'/2
				(_cor17, Name)
			in  %% Line 248
			    {_cor17,TraceFile,TraceFile}
		    -| [{'id',{0,0,'-clients/2-fun-3-'}}] )
	      in  %% Line 250
		  call 'lists':'map'
		      (F, Nodes)
	end
'name'/2 =
    %% Line 252
    fun (_cor1,_cor0) ->
	let <Dir> =
	    %% Line 253
	    call 'filename':'dirname'
		(_cor0)
	in  let <File> =
		%% Line 254
		call 'filename':'basename'
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 255
		    call 'erlang':'atom_to_list'
			(_cor1)
		in  let <_cor4> =
			%% Line 255
			[45|File]
		    in  let <_cor6> =
			    %% Line 255
			    call 'erlang':'++'
				(_cor5, _cor4)
			in  %% Line 255
			    call 'filename':'join'
				(Dir, _cor6)
'store'/2 =
    %% Line 259
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 260
	    case call 'ets':'last'
		     ('ttb_history_table') of
	      %% Line 261
	      <'$end_of_table'> when 'true' ->
		  0
	      %% Line 262
	      <Int>
		  when call 'erlang':'is_integer'
			(Int) ->
		  Int
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  let <_cor5> =
		%% Line 264
		call 'erlang':'+'
		    (_cor3, 1)
	    in  %% Line 264
		call 'ets':'insert'
		    ('ttb_history_table', {_cor5,{'ttb',_cor1,_cor0}})
'list_history'/0 =
    %% Line 266
    fun () ->
	%% Line 268
	case call 'ets':'info'
		 ('ttb_history_table') of
	  %% Line 269
	  <'undefined'> when 'true' ->
	      {'error','not_running'}
	  %% Line 270
	  <_X_info> when 'true' ->
	      call 'ets':'tab2list'
		  ('ttb_history_table')
	end
'run_history'/1 =
    %% Line 273
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      %% Line 274
	      case apply 'run_history'/1
		       (H) of
		%% Line 275
		<'ok'> when 'true' ->
		    apply 'run_history'/1
			(T)
		%% Line 276
		<{'error','not_found'}> when 'true' ->
		    {'error',{'not_found',H}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 279
	  <'all'> when 'true' ->
	      let <CurrentHist> =
		  %% Line 280
		  call 'ets':'tab2list'
		      ('ttb_history_table')
	      in  do  %% Line 281
		      call 'ets':'delete_all_objects'
			  ('ttb_history_table')
		      %% Line 282
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[{_cor17,MFA}|_cor4]> when 'true' ->
					  let <_cor6> =
					      apply 'run_printed'/2
						  (MFA, 'true')
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				      ( <[_cor3|_cor4]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor4)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(CurrentHist)
			-| ['list_comprehension'] )
	  %% Line 283
	  <'all_silent'> when 'true' ->
	      let <CurrentHist> =
		  %% Line 284
		  call 'ets':'tab2list'
		      ('ttb_history_table')
	      in  do  %% Line 285
		      call 'ets':'delete_all_objects'
			  ('ttb_history_table')
		      %% Line 286
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor11) ->
				    case _cor11 of
				      <[{_cor18,MFA}|_cor10]> when 'true' ->
					  let <_cor12> =
					      apply 'run_printed'/2
						  (MFA, 'false')
					  in  let <_cor13> =
						  apply 'lc$^1'/1
						      (_cor10)
					      in  ( [_cor12|_cor13]
						    -| ['compiler_generated'] )
				      ( <[_cor9|_cor10]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor10)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor11> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor11})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(CurrentHist)
			-| ['list_comprehension'] )
	  %% Line 287
	  <[]> when 'true' ->
	      %% Line 288
	      'ok'
	  %% Line 289
	  <N> when 'true' ->
	      let <_cor14> =
		  catch
		      %% Line 290
		      call 'ets':'lookup'
			  ('ttb_history_table', N)
	      in  %% Line 290
		  case _cor14 of
		    %% Line 291
		    <[{_cor19,{M,F,A}}|[]]>
			when call 'erlang':'=:='
			      (_cor19,
			       N) ->
			%% Line 292
			apply 'run_printed'/2
			    ({M,F,A}, 'true')
		    %% Line 293
		    <_cor20> when 'true' ->
			%% Line 294
			{'error','not_found'}
		  end
	end
'run_printed'/2 =
    %% Line 297
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{M,F,A},Verbose> when 'true' ->
	      do  %% Line 298
		  ( case Verbose of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'print_func'/3
				(M, F, A)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor2}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <R> =
		      %% Line 299
		      call 'erlang':'apply'
			  (M, F, A)
		  in  %% Line 300
		      ( case Verbose of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'print_result'/1
				    (R)
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor5> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor5}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'run_printed',2}}] )
	    -| ['compiler_generated'] )
	end
'write_config'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ConfigFile,'all'> when 'true' ->
	      %% Line 303
	      apply 'write_config'/2
		  (ConfigFile, ['_'])
	  %% Line 304
	  <ConfigFile,Config> when 'true' ->
	      %% Line 305
	      apply 'write_config'/3
		  (ConfigFile, Config, [])
	end
'write_config'/3 =
    %% Line 306
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <ConfigFile,'all',Opt> when 'true' ->
	      %% Line 307
	      apply 'write_config'/3
		  (ConfigFile, ['_'], Opt)
	  %% Line 308
	  <ConfigFile,Config,Opt>
	      when let <_cor3> =
		    call 'erlang':'is_list'
			(Opt)
		in  call 'erlang':'not'
			(_cor3) ->
	      %% Line 309
	      apply 'write_config'/3
		  (ConfigFile, Config, [Opt|[]])
	  %% Line 310
	  <ConfigFile,Nums,Opt>
	      when let <_cor7> =
		    try
			let <_cor4> =
			    call 'erlang':'is_list'
				(Nums)
			in  let <_cor5> =
				call 'erlang':'hd'
				    (Nums)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(_cor5)
				in  call 'erlang':'and'
					(_cor4, _cor6)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor8> =
			%% Line 311
			call 'erlang':'=:='
			    (Nums, ['_'])
		    in  call 'erlang':'or'
			    (_cor7, _cor8) ->
	      let <F> =
		  %% Line 312
		  ( fun (_cor9) ->
			call 'ets':'select'
			    ('ttb_history_table', %% Line 313
						  [{{_cor9,'$1'},[],['$1']}|[]])
		    -| [{'id',{0,0,'-write_config/3-fun-0-'}}] )
	      in  let <_cor12> =
		      %% Line 315
		      call 'lists':'map'
			  (F, Nums)
		  in  let <Config> =
			  %% Line 315
			  call 'lists':'append'
			      (_cor12)
		      in  %% Line 316
			  apply 'do_write_config'/3
			      (ConfigFile, Config, Opt)
	  %% Line 317
	  <ConfigFile,Config,Opt>
	      when call 'erlang':'is_list'
		    (Config) ->
	      %% Line 318
	      case apply 'check_config'/2
		       (Config, []) of
		%% Line 319
		<{'ok',Config1}> when 'true' ->
		    apply 'do_write_config'/3
			(ConfigFile, Config1, Opt)
		%% Line 320
		<Error> when 'true' ->
		    Error
	      end
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'write_config',3}}] )
	    -| ['compiler_generated'] )
	end
'do_write_config'/3 =
    %% Line 323
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 324
	    case _cor0 of
	      %% Line 325
	      <['append']> when 'true' ->
		  'ok'
	      %% Line 326
	      <[]> when 'true' ->
		  call 'file':'delete'
		      (_cor2)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	    %% Line 328
	    apply 'write_binary'/2
		(_cor2, _cor1)
'check_config'/2 =
    %% Line 330
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Mod = 'ttb',Func,Args}|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 333
		  call 'erlang':'length'
		      (Args)
	      in  %% Line 333
		  case call 'erlang':'function_exported'
			   (Mod, Func, _cor2) of
		    %% Line 334
		    <'true'> when 'true' ->
			apply 'check_config'/2
			    (Rest, [{Mod,Func,Args}|Acc])
		    %% Line 335
		    <'false'> when 'true' ->
			{'error',{'not_exported',{Mod,Func,Args}}}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 337
	  <[{Mod,Func,Args}|Rest],Acc> when 'true' ->
	      %% Line 338
	      apply 'check_config'/2
		  (Rest, [{Mod,Func,Args}|Acc])
	  %% Line 339
	  <[],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 340
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 340
		  {'ok',_cor4}
	  %% Line 341
	  <[Other|_X_Rest],_X_Acc> when 'true' ->
	      %% Line 342
	      {'error',{'illegal_config',Other}}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'check_config',2}}] )
	    -| ['compiler_generated'] )
	end
'list_config'/1 =
    %% Line 345
    fun (_cor0) ->
	%% Line 346
	case call 'file':'read_file'
		 (_cor0) of
	  %% Line 347
	  <{'ok',B}> when 'true' ->
	      apply 'read_config'/3
		  (B, [], 1)
	  %% Line 348
	  <Error> when 'true' ->
	      Error
	end
'read_config'/3 =
    %% Line 351
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,Acc,_X_N> when 'true' ->
	      %% Line 352
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 353
	  <B,Acc,N> when 'true' ->
	      %% Line 354
	      case apply 'get_term'/1
		       (B) of
		<{{M,F,A},Rest}> when 'true' ->
		    let <_cor4> =
			%% Line 355
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 355
			apply 'read_config'/3
			    (Rest, [{N,{M,F,A}}|Acc], _cor4)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'run_config'/1 =
    %% Line 358
    fun (_cor0) ->
	%% Line 359
	case apply 'list_config'/1
		 (_cor0) of
	  %% Line 360
	  <Config>
	      when call 'erlang':'is_list'
		    (Config) ->
	      let <_cor4> =
		  %% Line 361
		  ( fun (_cor2) ->
			case _cor2 of
			  <{_cor7,{M,F,A}}> when 'true' ->
			      do  apply 'print_func'/3
				      (M, F, A)
				  let <R> =
				      %% Line 362
				      call 'erlang':'apply'
					  (M, F, A)
				  in  %% Line 363
				      apply 'print_result'/1
					  (R)
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-run_config/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-run_config/1-fun-0-'}}] )
	      in  %% Line 361
		  call 'lists':'foreach'
		      (_cor4, %% Line 365
			      Config)
	  %% Line 366
	  <Error> when 'true' ->
	      Error
	end
'run_config'/2 =
    %% Line 369
    fun (_cor1,_cor0) ->
	%% Line 370
	case apply 'list_config'/1
		 (_cor1) of
	  %% Line 371
	  <Config>
	      when call 'erlang':'is_list'
		    (Config) ->
	      %% Line 372
	      case call 'lists':'keysearch'
		       (_cor0, 1, Config) of
		%% Line 373
		<{'value',{_cor6,{M,F,A}}}>
		    when call 'erlang':'=:='
			  (_cor6,
			   _cor0) ->
		    do  %% Line 374
			apply 'print_func'/3
			    (M, F, A)
			%% Line 375
			call 'erlang':'apply'
			    (M, F, A)
		%% Line 376
		<'false'> when 'true' ->
		    %% Line 377
		    {'error','not_found'}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 379
	  <Error> when 'true' ->
	      Error
	end
'print_func'/3 =
    %% Line 383
    fun (_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 384
	    apply 'arg_list'/2
		(_cor0, [])
	in  %% Line 385
	    call 'io':'format'
		([126|[119|[58|[126|[119|[40|[126|[115|[41|[32|[45|[62|[126|[110]]]]]]]]]]]]]], [_cor2|[_cor1|[Args|[]]]])
'print_result'/1 =
    %% Line 386
    fun (_cor0) ->
	%% Line 387
	call 'io':'format'
	    ([126|[112|[126|[110|[126|[110]]]]]], [_cor0|[]])
'arg_list'/2 =
    %% Line 389
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],[]> when 'true' ->
	      %% Line 390
	      []
	  %% Line 391
	  <[A1|[]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 392
		  call 'io_lib':'format'
		      ([126|[119]], [A1|[]])
	      in  %% Line 392
		  call 'erlang':'++'
		      (Acc, _cor2)
	  %% Line 393
	  <[A1|A],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 394
		  call 'io_lib':'format'
		      ([126|[119|[44]]], [A1|[]])
	      in  let <_cor4> =
		      %% Line 394
		      call 'erlang':'++'
			  (Acc, _cor3)
		  in  %% Line 394
		      apply 'arg_list'/2
			  (A, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'arg_list',2}}] )
	    -| ['compiler_generated'] )
	end
'p'/2 =
    %% Line 399
    fun (_cor1,_cor0) ->
	do  %% Line 400
	    apply 'ensure_no_overloaded_nodes'/0
		()
	    do  %% Line 401
		apply 'store'/2
		    ('p', [_cor1|[_cor0|[]]])
		%% Line 402
		apply 'no_store_p'/2
		    (_cor1, _cor0)
'no_store_p'/2 =
    %% Line 403
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 404
	    apply 'to_list'/1
		(_cor0)
	in  %% Line 404
	    case apply 'transform_flags'/1
		     (_cor2) of
	      %% Line 405
	      <{'error',Reason}> when 'true' ->
		  %% Line 406
		  {'error',Reason}
	      %% Line 407
	      <Flags> when 'true' ->
		  let <Procs> =
		      %% Line 408
		      apply 'procs'/1
			  (_cor1)
		  in  let <_cor9> =
			  %% Line 409
			  ( fun (_cor6,_cor5) ->
				case <_cor6,_cor5> of
				  <P,{PMatched,Ps}> when 'true' ->
				      case call 'dbg':'p'
					       (P, Flags) of
					%% Line 410
					<{'ok',Matched}> when 'true' ->
					    %% Line 411
					    {[{P,Matched}|PMatched],[P|Ps]}
					%% Line 412
					<{'error',Reason}> when 'true' ->
					    do  %% Line 413
						apply 'display_warning'/2
						    (P, Reason)
						%% Line 414
						{PMatched,Ps}
					( <_cor4> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor4})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor8,_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8,_cor7})
					  -| [{'function_name',{'-no_store_p/2-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-no_store_p/2-fun-0-'}}] )
		      in  %% Line 409
			  case call 'lists':'foldl'
				   (_cor9, %% Line 416
					   {[],[]}, %% Line 416
						    Procs) of
			    %% Line 417
			    <{[],[]}> when 'true' ->
				{'error','no_match'}
			    %% Line 418
			    <{SuccMatched,Succ}> when 'true' ->
				do  %% Line 419
				    apply 'no_store_write_trace_info'/2
					('flags', {Succ,Flags})
				    do  %% Line 420
					call 'erlang':'!'
					    ('ttb', 'trace_started')
					%% Line 421
					{'ok',SuccMatched}
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
	    end
'transform_flags'/1 =
    %% Line 425
    fun (_cor0) ->
	case _cor0 of
	  <['clear']> when 'true' ->
	      %% Line 426
	      ['clear']
	  %% Line 427
	  <Flags> when 'true' ->
	      %% Line 428
	      call 'dbg':'transform_flags'
		  (['timestamp'|Flags])
	end
'procs'/1 =
    %% Line 431
    fun (_cor0) ->
	case _cor0 of
	  <Procs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 432
		  ( fun (_cor3,_cor2) ->
			let <_cor1> =
			    apply 'proc'/1
				(_cor3)
			in  call 'erlang':'++'
				(_cor1, _cor2)
		    -| [{'id',{0,0,'-procs/1-fun-0-'}}] )
	      in  %% Line 432
		  call 'lists':'foldl'
		      (_cor6, [], Procs)
	  %% Line 433
	  <Proc> when 'true' ->
	      %% Line 434
	      apply 'proc'/1
		  (Proc)
	end
'proc'/1 =
    %% Line 436
    fun (_cor0) ->
	case _cor0 of
	  <Procs>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(_cor0, 'all')
		in  let <_cor2> =
			call 'erlang':'=:='
			    (_cor0, 'existing')
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(_cor0, 'new')
			in  let <_cor4> =
				call 'erlang':'or'
				    (_cor2, _cor3)
			    in  call 'erlang':'or'
				    (_cor1, _cor4) ->
	      %% Line 437
	      [Procs|[]]
	  %% Line 438
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 439
	      [Name|[]]
	  %% Line 440
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 441
	      [Pid|[]]
	  %% Line 442
	  <{'global',Name}> when 'true' ->
	      %% Line 443
	      case call 'global':'whereis_name'
		       (Name) of
		%% Line 444
		<Pid>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    %% Line 445
		    [Pid|[]]
		%% Line 446
		<'undefined'> when 'true' ->
		    %% Line 447
		    []
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'proc',1}}] )
	    -| ['compiler_generated'] )
	end
'tp'/2 =
    %% Line 453
    fun (_cor1,_cor0) ->
	do  %% Line 454
	    apply 'ensure_no_overloaded_nodes'/0
		()
	    let <_cor2> =
		%% Line 455
		apply 'ms'/1
		    (_cor0)
	    in  do  %% Line 455
		    apply 'store'/2
			('tp', [_cor1|[_cor2|[]]])
		    let <_cor3> =
			%% Line 456
			apply 'ms'/1
			    (_cor0)
		    in  %% Line 456
			call 'dbg':'tp'
			    (_cor1, _cor3)
'tp'/3 =
    %% Line 457
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 458
	    apply 'ensure_no_overloaded_nodes'/0
		()
	    let <_cor3> =
		%% Line 459
		apply 'ms'/1
		    (_cor0)
	    in  do  %% Line 459
		    apply 'store'/2
			('tp', [_cor2|[_cor1|[_cor3|[]]]])
		    let <_cor4> =
			%% Line 460
			apply 'ms'/1
			    (_cor0)
		    in  %% Line 460
			call 'dbg':'tp'
			    (_cor2, _cor1, _cor4)
'tp'/4 =
    %% Line 461
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 462
	    apply 'ensure_no_overloaded_nodes'/0
		()
	    let <_cor4> =
		%% Line 463
		apply 'ms'/1
		    (_cor0)
	    in  do  %% Line 463
		    apply 'store'/2
			('tp', [_cor3|[_cor2|[_cor1|[_cor4|[]]]]])
		    let <_cor5> =
			%% Line 464
			apply 'ms'/1
			    (_cor0)
		    in  %% Line 464
			call 'dbg':'tp'
			    (_cor3, _cor2, _cor1, _cor5)
'tpl'/2 =
    %% Line 466
    fun (_cor1,_cor0) ->
	do  %% Line 467
	    apply 'ensure_no_overloaded_nodes'/0
		()
	    let <_cor2> =
		%% Line 468
		apply 'ms'/1
		    (_cor0)
	    in  do  %% Line 468
		    apply 'store'/2
			('tpl', [_cor1|[_cor2|[]]])
		    let <_cor3> =
			%% Line 469
			apply 'ms'/1
			    (_cor0)
		    in  %% Line 469
			call 'dbg':'tpl'
			    (_cor1, _cor3)
'tpl'/3 =
    %% Line 470
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 471
	    apply 'ensure_no_overloaded_nodes'/0
		()
	    let <_cor3> =
		%% Line 472
		apply 'ms'/1
		    (_cor0)
	    in  do  %% Line 472
		    apply 'store'/2
			('tpl', [_cor2|[_cor1|[_cor3|[]]]])
		    let <_cor4> =
			%% Line 473
			apply 'ms'/1
			    (_cor0)
		    in  %% Line 473
			call 'dbg':'tpl'
			    (_cor2, _cor1, _cor4)
'tpl'/4 =
    %% Line 474
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 475
	    apply 'ensure_no_overloaded_nodes'/0
		()
	    let <_cor4> =
		%% Line 476
		apply 'ms'/1
		    (_cor0)
	    in  do  %% Line 476
		    apply 'store'/2
			('tpl', [_cor3|[_cor2|[_cor1|[_cor4|[]]]]])
		    let <_cor5> =
			%% Line 477
			apply 'ms'/1
			    (_cor0)
		    in  %% Line 477
			call 'dbg':'tpl'
			    (_cor3, _cor2, _cor1, _cor5)
'ctp'/0 =
    %% Line 479
    fun () ->
	do  %% Line 480
	    apply 'store'/2
		('ctp', [])
	    %% Line 481
	    call 'dbg':'ctp'
		()
'ctp'/1 =
    %% Line 482
    fun (_cor0) ->
	do  %% Line 483
	    apply 'store'/2
		('ctp', [_cor0|[]])
	    %% Line 484
	    call 'dbg':'ctp'
		(_cor0)
'ctp'/2 =
    %% Line 485
    fun (_cor1,_cor0) ->
	do  %% Line 486
	    apply 'store'/2
		('ctp', [_cor1|[_cor0|[]]])
	    %% Line 487
	    call 'dbg':'ctp'
		(_cor1, _cor0)
'ctp'/3 =
    %% Line 488
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 489
	    apply 'store'/2
		('ctp', [_cor2|[_cor1|[_cor0|[]]]])
	    %% Line 490
	    call 'dbg':'ctp'
		(_cor2, _cor1, _cor0)
'ctpl'/0 =
    %% Line 492
    fun () ->
	do  %% Line 493
	    apply 'store'/2
		('ctpl', [])
	    %% Line 494
	    call 'dbg':'ctpl'
		()
'ctpl'/1 =
    %% Line 495
    fun (_cor0) ->
	do  %% Line 496
	    apply 'store'/2
		('ctpl', [_cor0|[]])
	    %% Line 497
	    call 'dbg':'ctpl'
		(_cor0)
'ctpl'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	do  %% Line 499
	    apply 'store'/2
		('ctpl', [_cor1|[_cor0|[]]])
	    %% Line 500
	    call 'dbg':'ctpl'
		(_cor1, _cor0)
'ctpl'/3 =
    %% Line 501
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 502
	    apply 'store'/2
		('ctpl', [_cor2|[_cor1|[_cor0|[]]]])
	    %% Line 503
	    call 'dbg':'ctpl'
		(_cor2, _cor1, _cor0)
'ctpg'/0 =
    %% Line 505
    fun () ->
	do  %% Line 506
	    apply 'store'/2
		('ctpg', [])
	    %% Line 507
	    call 'dbg':'ctpg'
		()
'ctpg'/1 =
    %% Line 508
    fun (_cor0) ->
	do  %% Line 509
	    apply 'store'/2
		('ctpg', [_cor0|[]])
	    %% Line 510
	    call 'dbg':'ctpg'
		(_cor0)
'ctpg'/2 =
    %% Line 511
    fun (_cor1,_cor0) ->
	do  %% Line 512
	    apply 'store'/2
		('ctpg', [_cor1|[_cor0|[]]])
	    %% Line 513
	    call 'dbg':'ctpg'
		(_cor1, _cor0)
'ctpg'/3 =
    %% Line 514
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 515
	    apply 'store'/2
		('ctpg', [_cor2|[_cor1|[_cor0|[]]]])
	    %% Line 516
	    call 'dbg':'ctpg'
		(_cor2, _cor1, _cor0)
'ms'/1 =
    %% Line 518
    fun (_cor0) ->
	case _cor0 of
	  <'return'> when 'true' ->
	      %% Line 519
	      [{'_',[],[{'return_trace'}]}]
	  %% Line 520
	  <'caller'> when 'true' ->
	      %% Line 521
	      [{'_',[],[{'message',{'caller'}}]}]
	  %% Line 522
	  <{'codestr',FunStr}> when 'true' ->
	      %% Line 523
	      case apply 'string2ms'/1
		       (FunStr) of
		<{'ok',MS}> when 'true' ->
		    %% Line 524
		    MS
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 525
	  <Other> when 'true' ->
	      %% Line 526
	      Other
	end
'ensure_no_overloaded_nodes'/0 =
    %% Line 528
    fun () ->
	let <_cor2> =
	    %% Line 529
	    case call 'erlang':'whereis'
		     ('ttb') of
	      %% Line 530
	      <'undefined'> when 'true' ->
		  %% Line 531
		  []
	      %% Line 532
	      <_cor5> when 'true' ->
		  let <_cor0> =
		      %% Line 533
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 533
			  call 'erlang':'!'
			      ('ttb', {'get_overloaded',_cor0})
			  %% Line 534
			  receive
			    <{'overloaded',O}> when 'true' ->
				O
			  after 'infinity' ->
			    'true'
	    end
	in  %% Line 536
	    case _cor2 of
	      %% Line 537
	      <[]> when 'true' ->
		  'ok'
	      %% Line 538
	      <_cor6> when 'true' ->
		  call 'erlang':'exit'
		      ({'error','overload_protection_active',_cor2})
	    end
'string2ms'/1 =
    %% Line 542
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 543
	    apply 'fix_dot'/1
		(_cor0)
	in  %% Line 543
	    case call 'erl_scan':'string'
		     (_cor1) of
	      %% Line 544
	      <{'ok',Tokens,_cor7}> when 'true' ->
		  %% Line 545
		  case call 'erl_parse':'parse_exprs'
			   (Tokens) of
		    %% Line 546
		    <{'ok',[Expression|[]]}> when 'true' ->
			%% Line 547
			case Expression of
			  %% Line 548
			  <{_cor8,_cor9,{'clauses',Clauses}}> when 'true' ->
			      let <_cor2> =
				  %% Line 549
				  call 'ms_transform':'transform_from_shell'
				      ('dbg', Clauses, [])
			      in  %% Line 549
				  {'ok',_cor2}
			  %% Line 550
			  <_cor10> when 'true' ->
			      %% Line 551
			      {'error','fun_format'}
			end
		    %% Line 553
		    <_cor11> when 'true' ->
			%% Line 554
			{'error','fun_format'}
		  end
	      %% Line 556
	      <_cor12> when 'true' ->
		  {'error','fun_format'}
	    end
'fix_dot'/1 =
    %% Line 560
    fun (_cor0) ->
	%% Line 561
	case call 'lists':'reverse'
		 (_cor0) of
	  <[H|Rest]> when 'true' ->
	      %% Line 562
	      case H of
		%% Line 563
		<46> when 'true' ->
		    _cor0
		%% Line 565
		<_cor4> when 'true' ->
		    %% Line 566
		    call 'lists':'reverse'
			([46|[H|Rest]])
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'seq_trigger_ms'/0 =
    %% Line 571
    fun () ->
	apply 'seq_trigger_ms'/1
	    ('all')
'seq_trigger_ms'/1 =
    %% Line 572
    fun (_cor0) ->
	case _cor0 of
	  <'all'> when 'true' ->
	      apply 'seq_trigger_ms'/1
		  (['send'|['receive'|['print'|['timestamp']]]])
	  %% Line 573
	  <Flag>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'seq_trigger_ms'/2
		  ([Flag|[]], [])
	  %% Line 574
	  <Flags> when 'true' ->
	      apply 'seq_trigger_ms'/2
		  (Flags, [])
	end
'seq_trigger_ms'/2 =
    %% Line 575
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Flag|Flags],Body> when 'true' ->
	      %% Line 576
	      case call 'lists':'member'
		       (Flag, ['send'|['receive'|['print'|['timestamp']]]]) of
		%% Line 577
		<'true'> when 'true' ->
		    apply 'seq_trigger_ms'/2
			(Flags, [{'set_seq_token',Flag,'true'}|Body])
		%% Line 578
		<'false'> when 'true' ->
		    {'error',{'illegal_flag',Flag}}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 580
	  <[],Body> when 'true' ->
	      %% Line 581
	      [{'_',[],Body}|[]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'seq_trigger_ms',2}}] )
	    -| ['compiler_generated'] )
	end
'write_trace_info'/2 =
    %% Line 586
    fun (_cor1,_cor0) ->
	do  %% Line 587
	    apply 'store'/2
		('write_trace_info', [_cor1|[_cor0|[]]])
	    %% Line 588
	    apply 'no_store_write_trace_info'/2
		(_cor1, _cor0)
'no_store_write_trace_info'/2 =
    %% Line 590
    fun (_cor1,_cor0) ->
	do  %% Line 591
	    case call 'erlang':'whereis'
		     ('ttb') of
	      %% Line 592
	      <'undefined'> when 'true' ->
		  'ok'
	      %% Line 593
	      <Pid>
		  when call 'erlang':'is_pid'
			(Pid) ->
		  call 'erlang':'!'
		      ('ttb', {'write_trace_info',_cor1,_cor0})
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    %% Line 595
	    'ok'
'stop'/0 =
    %% Line 600
    fun () ->
	%% Line 601
	apply 'stop'/1
	    ([])
'stop'/1 =
    %% Line 602
    fun (_cor0) ->
	case _cor0 of
	  <Opts>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <Fetch> =
		  %% Line 603
		  apply 'stop_opts'/1
		      (Opts)
	      in  let <_cor4> =
		      %% Line 605
		      case call 'erlang':'whereis'
			       ('ttb') of
			%% Line 606
			<'undefined'> when 'true' ->
			    'ok'
			%% Line 607
			<Pid>
			    when call 'erlang':'is_pid'
				  (Pid) ->
			    let <_cor2> =
				%% Line 608
				call 'erlang':'self'
				    ()
			    in  do  %% Line 608
				    call 'erlang':'!'
					('ttb', {'stop',Fetch,_cor2})
				    %% Line 609
				    receive
				      <{'ttb',R}> when 'true' ->
					  R
				    after 'infinity' ->
				      'true'
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
		  in  do  %% Line 611
			  case <Fetch,_cor4> of
			    %% Line 612
			    <'nofetch',_cor9> when 'true' ->
				'ok'
			    %% Line 614
			    <_cor10,{'stopped',_cor11}> when 'true' ->
				let <_cor6> =
				    %% Line 616
				    call 'erlang':'element'
					(2, _cor4)
				in  %% Line 616
				    call 'io':'format'
					([83|[116|[111|[114|[101|[100|[32|[108|[111|[103|[115|[32|[105|[110|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]], [_cor6|[]])
			    %% Line 617
			    <_cor12,_cor13> when 'true' ->
				'ok'
			  end
			  %% Line 620
			  apply 'stop_return'/2
			      (_cor4, Opts)
	  %% Line 621
	  <Opts> when 'true' ->
	      %% Line 622
	      apply 'stop'/1
		  ([Opts|[]])
	end
'stop_opts'/1 =
    %% Line 624
    fun (_cor0) ->
	let <FetchDir> =
	    %% Line 625
	    call 'proplists':'get_value'
		('fetch_dir', _cor0)
	in  do  %% Line 626
		apply 'ensure_fetch_dir'/1
		    (FetchDir)
		let <_cor3> =
		    %% Line 627
		    case call 'proplists':'get_value'
			     ('format', _cor0) of
		      %% Line 628
		      <'undefined'> when 'true' ->
			  'false'
		      %% Line 629
		      <'true'> when 'true' ->
			  {'format',[]}
		      %% Line 630
		      <FOpts> when 'true' ->
			  {'format',FOpts}
		    end
		in  let <_cor5> =
			%% Line 632
			call 'lists':'member'
			    ('return_fetch_dir', _cor0)
		    in  %% Line 632
			case <_cor3,_cor5> of
			  %% Line 633
			  <'false','true'> when 'true' ->
			      %% Line 634
			      {'fetch',FetchDir}
			  %% Line 635
			  <'false','false'> when 'true' ->
			      %% Line 636
			      case call 'lists':'member'
				       ('nofetch', _cor0) of
				%% Line 637
				<'false'> when 'true' ->
				    {'fetch',FetchDir}
				%% Line 638
				<'true'> when 'true' ->
				    'nofetch'
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			  %% Line 640
			  <_cor9,_cor10>
			      when call 'erlang':'=:='
				    (_cor9,
				     _cor3) ->
			      %% Line 641
			      {_cor3,FetchDir}
			  ( <_fol90,_fol91> when 'true' ->
				let <_cor7> = {_fol90,_fol91}
				in  primop 'match_fail'
					({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
'ensure_fetch_dir'/1 =
    %% Line 644
    fun (_cor0) ->
	case _cor0 of
	  <'undefined'> when 'true' ->
	      'ok'
	  %% Line 645
	  <Dir> when 'true' ->
	      %% Line 646
	      case call 'filelib':'is_file'
		       (Dir) of
		%% Line 647
		<'true'> when 'true' ->
		    %% Line 648
		    call 'erlang':'throw'
			({'error','exists',Dir})
		%% Line 649
		<'false'> when 'true' ->
		    %% Line 650
		    'ok'
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'stop_return'/2 =
    %% Line 653
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 654
	    call 'lists':'member'
		('return_fetch_dir', _cor0)
	in  %% Line 654
	    case <_cor2,_cor1> of
	      %% Line 655
	      <'true',_cor6> when 'true' ->
		  _cor1
	      %% Line 657
	      <'false',{'stopped',_cor7}> when 'true' ->
		  %% Line 658
		  'stopped'
	      %% Line 659
	      <'false',_cor8> when 'true' ->
		  %% Line 661
		  'stopped'
	      ( <_fol93,_fol94> when 'true' ->
		    let <_cor3> = {_fol93,_fol94}
		    in  primop 'match_fail'
			    ({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'start'/1 =
    %% Line 667
    fun (_cor0) ->
	%% Line 668
	case call 'erlang':'whereis'
		 ('ttb') of
	  %% Line 669
	  <'undefined'> when 'true' ->
	      let <Parent> =
		  %% Line 670
		  call 'erlang':'self'
		      ()
	      in  let <_cor2> =
		      %% Line 671
		      ( fun () ->
			    apply 'init'/2
				(Parent, _cor0)
			-| [{'id',{0,0,'-start/1-fun-0-'}}] )
		  in  let <Pid> =
			  %% Line 671
			  call 'erlang':'spawn'
			      (_cor2)
		      in  do  %% Line 672
			      receive
				<{'started',_cor6}>
				    when call 'erlang':'=:='
					  (_cor6,
					   Pid) ->
				    'ok'
			      after 'infinity' ->
				'ok'
			      %% Line 673
			      Pid
	  %% Line 674
	  <Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 675
	      Pid
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'init'/2 =
    %% Line 678
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 679
	    call 'erlang':'self'
		()
	in  do  %% Line 679
		call 'erlang':'register'
		    ('ttb', _cor2)
		do  %% Line 680
		    call 'ets':'new'
			('ttb_history_table', ['ordered_set'|['named_table'|['public']]])
		    let <_cor3> =
			%% Line 681
			call 'erlang':'self'
			    ()
		    in  do  %% Line 681
			    call 'erlang':'!'
				(_cor1, {'started',_cor3})
			    let <NewSessionInfo> =
				%% Line 682
				[{'partials',0}|[{'dead_nodes',[]}|_cor0]]
			    in  do  %% Line 683
				    apply 'try_send_flush_tick'/1
					(NewSessionInfo)
				    let <_cor5> =
					%% Line 684
					call 'dict':'new'
					    ()
				    in  %% Line 684
					apply 'loop'/2
					    (_cor5, NewSessionInfo)
'loop'/2 =
    %% Line 686
    fun (_cor1,_cor0) ->
	%% Line 687
	receive
	  %% Line 688
	  <{'init_node',Node,MetaFile,PI,Traci}> when 'true' ->
	      do  %% Line 689
		  call 'erlang':'monitor_node'
		      (Node, 'true')
		  let <AbsoluteMetaFile,MetaPid> =
		      %% Line 691
		      case call 'rpc':'call'
			       (Node, %% Line 692
				      'observer_backend', %% Line 693
							  'ttb_init_node', %% Line 694
									   [MetaFile|[PI|[Traci|[]]]]) of
			%% Line 695
			<{'ok',MF,MP}> when 'true' ->
			    %% Line 696
			    <MF,MP>
			%% Line 697
			<{'badrpc','nodedown'}> when 'true' ->
			    %% Line 699
			    <MetaFile,'undefined'>
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor2})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor5> =
			  %% Line 701
			  call 'dict':'store'
			      (Node, {AbsoluteMetaFile,MetaPid}, _cor1)
		      in  %% Line 701
			  apply 'loop'/2
			      (_cor5, _cor0)
	  %% Line 702
	  <{'ip_to_file_trace_port',Port,Sender}> when 'true' ->
	      let <Ports> =
		  %% Line 703
		  call 'proplists':'get_value'
		      ('ip_to_file_trace_ports', _cor0, [])
	      in  let <NewSessionInfo> =
		      %% Line 704
		      [{'ip_to_file_trace_ports',[Port|Ports]}|_cor0]
		  in  do  %% Line 705
			  call 'erlang':'!'
			      (Sender, {'ttb','ok'})
			  %% Line 706
			  apply 'loop'/2
			      (_cor1, NewSessionInfo)
	  %% Line 707
	  <{'get_nodes',Sender}> when 'true' ->
	      let <_cor8> =
		  %% Line 708
		  call 'dict':'fetch_keys'
		      (_cor1)
	      in  do  %% Line 708
		      call 'erlang':'!'
			  (Sender, {'ttb',_cor8})
		      %% Line 709
		      apply 'loop'/2
			  (_cor1, _cor0)
	  %% Line 710
	  <{'write_trace_info',Key,What}> when 'true' ->
	      let <_cor15> =
		  %% Line 711
		  ( fun (_cor11,_cor10,_cor9) ->
			case <_cor11,_cor10,_cor9> of
			  <Node,{_X_MetaFile,MetaPid},_cor35> when 'true' ->
			      %% Line 712
			      call 'rpc':'call'
				  (Node, 'observer_backend', %% Line 713
							     'ttb_write_trace_info', %% Line 713
										     [MetaPid|[Key|[What|[]]]])
			  ( <_cor14,_cor13,_cor12> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor14,_cor13,_cor12})
				  -| [{'function_name',{'-loop/2-fun-0-',3}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-loop/2-fun-0-'}}] )
	      in  do  %% Line 711
		      call 'dict':'fold'
			  (_cor15, %% Line 715
				   'ok', _cor1)
		      %% Line 717
		      apply 'loop'/2
			  (_cor1, _cor0)
	  %% Line 718
	  <{'nodedown',Node}> when 'true' ->
	      let <NewState> =
		  %% Line 719
		  apply 'make_node_dead'/3
		      (Node, _cor1, _cor0)
	      in  let <_cor17> =
		      %% Line 720
		      call 'dict':'erase'
			  (Node, _cor1)
		  in  %% Line 720
		      apply 'loop'/2
			  (_cor17, NewState)
	  %% Line 721
	  <{'noderesumed',Node,Reporter}> when 'true' ->
	      %% Line 722
	      case apply 'make_node_alive'/2
		       (Node, _cor0) of
		<{MetaFile,CurrentSuffix,NewState}> when 'true' ->
		    do  %% Line 723
			apply 'fetch_partial_result'/3
			    (Node, MetaFile, CurrentSuffix)
			let <_cor19> =
			    %% Line 724
			    ( fun () ->
				  apply 'resume_trace'/1
				      (Reporter)
			      -| [{'id',{0,0,'-loop/2-fun-1-'}}] )
			in  do  %% Line 724
				call 'erlang':'spawn'
				    (_cor19)
				%% Line 725
				apply 'loop'/2
				    (_cor1, NewState)
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 726
	  <{'timeout',StopOpts}> when 'true' ->
	      do  %% Line 727
		  call 'erlang':'spawn'
		      ('ttb', 'stop', [StopOpts|[]])
		  %% Line 728
		  apply 'loop'/2
		      (_cor1, _cor0)
	  %% Line 729
	  <{'node_overloaded',Node}> when 'true' ->
	      do  %% Line 730
		  call 'io':'format'
		      ([79|[118|[101|[114|[108|[111|[97|[100|[32|[99|[104|[101|[99|[107|[32|[97|[99|[116|[105|[118|[97|[116|[101|[100|[32|[111|[110|[32|[110|[111|[100|[101|[58|[32|[126|[112|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Node|[]])
		  let <_cor21> =
		      %% Line 731
		      call 'proplists':'get_value'
			  ('overloaded', _cor0, [])
		  in  let <_cor20> =
			  %% Line 732
			  call 'lists':'keydelete'
			      ('overloaded', 1, _cor0)
		      in  %% Line 733
			  apply 'loop'/2
			      (_cor1, [{'overloaded',[Node|_cor21]}|_cor20])
	  %% Line 734
	  <{'get_overloaded',Pid}> when 'true' ->
	      let <_cor23> =
		  %% Line 735
		  call 'proplists':'get_value'
		      ('overloaded', _cor0, [])
	      in  do  %% Line 735
		      call 'erlang':'!'
			  (Pid, {'overloaded',_cor23})
		      %% Line 736
		      apply 'loop'/2
			  (_cor1, _cor0)
	  %% Line 737
	  <'trace_started'> when 'true' ->
	      do  %% Line 738
		  case call 'proplists':'get_value'
			   ('timer', _cor0) of
		    %% Line 739
		    <'undefined'> when 'true' ->
			'ok'
		    %% Line 740
		    <{MSec,StopOpts}> when 'true' ->
			let <_cor24> =
			    call 'erlang':'self'
				()
			in  call 'erlang':'send_after'
				(MSec, _cor24, {'timeout',StopOpts})
		    ( <_cor25> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor25})
		      -| ['compiler_generated'] )
		  end
		  %% Line 742
		  apply 'loop'/2
		      (_cor1, _cor0)
	  %% Line 743
	  <'flush_timeout'> when 'true' ->
	      do  %% Line 744
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[Node|_cor27]> when 'true' ->
				      do  call 'dbg':'flush_trace_port'
					      (Node)
					  apply 'lc$^0'/1
					      (_cor27)
				  <[]> when 'true' ->
				      []
				  ( <_cor29> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor28> =
			    call 'dict':'fetch_keys'
				(_cor1)
			in  apply 'lc$^0'/1
				(_cor28)
		    -| ['list_comprehension'] )
		  do  %% Line 745
		      apply 'try_send_flush_tick'/1
			  (_cor0)
		      %% Line 746
		      apply 'loop'/2
			  (_cor1, _cor0)
	  %% Line 747
	  <{'stop','nofetch',Sender}> when 'true' ->
	      %% Line 748
	      apply 'do_stop'/4
		  ('nofetch', Sender, _cor1, _cor0)
	  %% Line 749
	  <{'stop',FetchSpec,Sender}> when 'true' ->
	      %% Line 750
	      case call 'proplists':'get_value'
		       ('shell', _cor0, 'false') of
		%% Line 751
		<'only'> when 'true' ->
		    apply 'do_stop'/4
			('nofetch', Sender, _cor1, _cor0)
		%% Line 752
		<_cor36> when 'true' ->
		    apply 'do_stop'/4
			(FetchSpec, Sender, _cor1, _cor0)
	      end
	after 'infinity' ->
	  'true'
'do_stop'/4 =
    %% Line 756
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'nofetch',Sender,NodeInfo,SessionInfo> when 'true' ->
	      do  %% Line 757
		  apply 'write_config'/2
		      ([116|[116|[98|[95|[108|[97|[115|[116|[95|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]]]], 'all')
		  let <_cor10> =
		      %% Line 759
		      ( fun (_cor6,_cor5,_cor4) ->
			    case <_cor6,_cor5,_cor4> of
			      <Node,{_cor35,MetaPid},_cor36> when 'true' ->
				  %% Line 760
				  call 'rpc':'call'
				      (Node, 'observer_backend', 'ttb_stop', [MetaPid|[]])
			      ( <_cor9,_cor8,_cor7> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor9,_cor8,_cor7})
				      -| [{'function_name',{'-do_stop/4-fun-0-',3}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-do_stop/4-fun-0-'}}] )
		  in  do  %% Line 758
			  call 'dict':'fold'
			      (_cor10, %% Line 762
				       'ok', %% Line 763
					     NodeInfo)
			  do  %% Line 764
			      apply 'stop_ip_to_file_trace_ports'/1
				  (SessionInfo)
			      do  %% Line 765
				  call 'dbg':'stop_clear'
				      ()
				  do  %% Line 766
				      call 'ets':'delete'
					  ('ttb_history_table')
				      %% Line 767
				      call 'erlang':'!'
					  (Sender, {'ttb','stopped'})
	  %% Line 769
	  <{FetchOrFormat,UserDir},Sender,NodeInfo,SessionInfo> when 'true' ->
	      do  %% Line 770
		  apply 'write_config'/2
		      ([116|[116|[98|[95|[108|[97|[115|[116|[95|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]]]], 'all')
		  let <_cor11> =
		      %% Line 771
		      call 'erlang':'node'
			  ()
		  in  let <Localhost> =
			  %% Line 771
			  apply 'host'/1
			      (_cor11)
		      in  let <_cor13> =
			      %% Line 772
			      call 'proplists':'get_value'
				  ('logfile', SessionInfo)
			  in  let <Dir> =
				  %% Line 772
				  apply 'get_fetch_dir'/2
				      (UserDir, _cor13)
			      in  do  %% Line 773
				      call 'file':'make_dir'
					  (Dir)
				      let <_cor21> =
					  %% Line 781
					  ( fun (_cor17,_cor16,_cor15) ->
						case <_cor17,_cor16,_cor15> of
						  <Node,{MetaFile,MetaPid},Nodes> when 'true' ->
						      do  %% Line 782
							  call 'rpc':'call'
							      (Node, 'observer_backend', 'ttb_stop', [MetaPid|[]])
							  %% Line 783
							  [{Node,MetaFile}|Nodes]
						  ( <_cor20,_cor19,_cor18> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor20,_cor19,_cor18})
							  -| [{'function_name',{'-do_stop/4-fun-1-',3}}] )
						    -| ['compiler_generated'] )
						end
					    -| [{'id',{0,0,'-do_stop/4-fun-1-'}}] )
				      in  let <AllNodesAndMeta> =
					      %% Line 780
					      call 'dict':'fold'
						  (_cor21, %% Line 785
							   [], %% Line 786
							       NodeInfo)
					  in  do  %% Line 787
						  apply 'stop_ip_to_file_trace_ports'/1
						      (SessionInfo)
						  do  %% Line 788
						      call 'dbg':'stop_clear'
							  ()
						      let <_cor26> =
							  %% Line 791
							  ( fun (_cor24) ->
								case _cor24 of
								  <{Node,MetaFile}> when 'true' ->
								      let <_cor23> =
									  %% Line 792
									  ( fun () ->
										apply 'fetch_report'/4
										    (Localhost, Dir, Node, MetaFile)
									    -| [{'id',{0,0,'-do_stop/4-fun-2-'}}] )
								      in  do  %% Line 792
									      call 'erlang':'spawn'
										  (_cor23)
									      %% Line 793
									      Node
								  ( <_cor25> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor25})
									  -| [{'function_name',{'-do_stop/4-fun-3-',1}}] )
								    -| ['compiler_generated'] )
								end
							    -| [{'id',{0,0,'-do_stop/4-fun-3-'}}] )
						      in  let <AllNodes> =
							      %% Line 790
							      call 'lists':'map'
								  (_cor26, %% Line 795
									   AllNodesAndMeta)
							  in  do  %% Line 796
								  call 'ets':'delete'
								      ('ttb_history_table')
								  do  %% Line 797
								      apply 'wait_for_fetch'/1
									  (AllNodes)
								      let <_cor28> =
									  %% Line 798
									  call 'proplists':'get_value'
									      ('partials', SessionInfo)
								      in  do  %% Line 798
									      apply 'copy_partials'/2
										  (Dir, _cor28)
									      let <Absname> =
										  %% Line 799
										  call 'filename':'absname'
										      (Dir)
									      in  do  %% Line 800
										      case FetchOrFormat of
											%% Line 801
											<'fetch'> when 'true' ->
											    'ok'
											%% Line 802
											<{'format',Opts}> when 'true' ->
											    apply 'format'/2
												(Dir, Opts)
											( <_cor30> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor30})
											  -| ['compiler_generated'] )
										      end
										      %% Line 804
										      call 'erlang':'!'
											  (Sender, {'ttb',{'stopped',Absname}})
	  ( <_cor34,_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31})
		  -| [{'function_name',{'do_stop',4}}] )
	    -| ['compiler_generated'] )
	end
'stop_ip_to_file_trace_ports'/1 =
    %% Line 806
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 807
	    ( fun (_cor4) ->
		  let <_cor2> =
		      %% Line 808
		      call 'erlang':'ports'
			  ()
		  in  %% Line 808
		      case call 'lists':'member'
			       (_cor4, _cor2) of
			%% Line 809
			<'true'> when 'true' ->
			    do  %% Line 810
				call 'dbg':'deliver_and_flush'
				    (_cor4)
				%% Line 811
				call 'erlang':'port_close'
				    (_cor4)
			%% Line 812
			<'false'> when 'true' ->
			    %% Line 813
			    'ok'
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
	      -| [{'id',{0,0,'-stop_ip_to_file_trace_ports/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 816
		call 'proplists':'get_value'
		    ('ip_to_file_trace_ports', _cor0, [])
	    in  %% Line 807
		call 'lists':'foreach'
		    (_cor6, _cor1)
'make_node_dead'/3 =
    %% Line 819
    fun (_cor2,_cor1,_cor0) ->
	%% Line 820
	case call 'dict':'fetch'
		 (_cor2, _cor1) of
	  <{MetaFile,_cor10}> when 'true' ->
	      let <_cor4> =
		  %% Line 821
		  call 'proplists':'get_value'
		      ('dead_nodes', _cor0)
	      in  let <NewDeadNodes> =
		      %% Line 821
		      [{_cor2,MetaFile}|_cor4]
		  in  let <_cor6> =
			  %% Line 822
			  call 'lists':'keydelete'
			      ('dead_nodes', 1, _cor0)
		      in  %% Line 822
			  [{'dead_nodes',NewDeadNodes}|_cor6]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'make_node_alive'/2 =
    %% Line 824
    fun (_cor1,_cor0) ->
	let <DeadNodes> =
	    %% Line 825
	    call 'proplists':'get_value'
		('dead_nodes', _cor0)
	in  let <Partials> =
		%% Line 826
		call 'proplists':'get_value'
		    ('partials', _cor0)
	    in  %% Line 827
		case call 'lists':'keytake'
			 (_cor1, 1, DeadNodes) of
		  <{'value',{_cor11,MetaFile},Dn2}> when 'true' ->
		      let <SessionInfo2> =
			  %% Line 828
			  call 'lists':'keyreplace'
			      ('dead_nodes', 1, _cor0, {'dead_nodes',Dn2})
		      in  let <_cor8> =
			      %% Line 829
			      call 'erlang':'+'
				  (Partials, 1)
			  in  let <_cor6> =
				  %% Line 829
				  call 'erlang':'+'
				      (Partials, 1)
			      in  let <_cor7> =
				      %% Line 829
				      call 'lists':'keyreplace'
					  ('partials', 1, SessionInfo2, {'partials',_cor6})
				  in  %% Line 829
				      {MetaFile,_cor8,_cor7}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'try_send_flush_tick'/1 =
    %% Line 831
    fun (_cor0) ->
	%% Line 832
	case call 'proplists':'get_value'
		 ('flush', _cor0) of
	  %% Line 833
	  <'undefined'> when 'true' ->
	      %% Line 834
	      'ok'
	  %% Line 835
	  <MSec> when 'true' ->
	      let <_cor1> =
		  %% Line 836
		  call 'erlang':'self'
		      ()
	      in  %% Line 836
		  call 'erlang':'send_after'
		      (MSec, _cor1, 'flush_timeout')
	end
'get_fetch_dir'/2 =
    %% Line 839
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined','undefined'> when 'true' ->
	      let <_cor2> =
		  apply 'ts'/0
		      ()
	      in  let <_cor3> =
		      [116|[116|[98|_cor2]]]
		  in  call 'erlang':'++'
			  ([116|[116|[98|[95|[117|[112|[108|[111|[97|[100|[95]]]]]]]]]]], _cor3)
	  %% Line 840
	  <'undefined',Logname> when 'true' ->
	      let <_cor4> =
		  apply 'ts'/0
		      ()
	      in  let <_cor5> =
		      call 'erlang':'++'
			  (Logname, _cor4)
		  in  call 'erlang':'++'
			  ([116|[116|[98|[95|[117|[112|[108|[111|[97|[100|[95]]]]]]]]]]], _cor5)
	  %% Line 841
	  <Dir,_cor8> when 'true' ->
	      Dir
	end
'resume_trace'/1 =
    %% Line 843
    fun (_cor0) ->
	do  %% Line 844
	    call 'ttb':'run_history'
		('all_silent')
	    %% Line 845
	    call 'erlang':'!'
		(_cor0, 'trace_resumed')
'get_nodes'/0 =
    %% Line 847
    fun () ->
	let <_cor0> =
	    %% Line 848
	    call 'erlang':'self'
		()
	in  do  %% Line 848
		call 'erlang':'!'
		    ('ttb', {'get_nodes',_cor0})
		%% Line 849
		receive
		  <{'ttb',Nodes}> when 'true' ->
		      Nodes
		after 'infinity' ->
		  'true'
'ts'/0 =
    %% Line 851
    fun () ->
	let <_cor0> =
	    %% Line 852
	    call 'erlang':'now'
		()
	in  %% Line 852
	    case call 'calendar':'now_to_local_time'
		     (_cor0) of
	      <{{Y,M,D},{H,Min,S}}> when 'true' ->
		  %% Line 853
		  call 'io_lib':'format'
		      ([45|[126|[52|[46|[52|[46|[48|[119|[126|[50|[46|[50|[46|[48|[119|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[126|[50|[46|[50|[46|[48|[119|[126|[50|[46|[50|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 854
																																[Y|[M|[D|[H|[Min|[S|[]]]]]]])
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
'copy_partials'/2 =
    %% Line 856
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor8,0> when 'true' ->
	      %% Line 857
	      'ok'
	  %% Line 858
	  <Dir,Num> when 'true' ->
	      let <_cor2> =
		  %% Line 859
		  call 'erlang':'integer_to_list'
		      (Num)
	      in  let <PartialDir> =
		      %% Line 859
		      call 'erlang':'++'
			  ([116|[116|[98|[95|[112|[97|[114|[116|[105|[97|[108|[95|[114|[101|[115|[117|[108|[116]]]]]]]]]]]]]]]]]], _cor2)
		  in  let <_cor4> =
			  %% Line 860
			  call 'filename':'join'
			      (Dir, PartialDir)
		      in  do  %% Line 860
			      call 'file':'rename'
				  (PartialDir, _cor4)
			      let <_cor5> =
				  %% Line 861
				  call 'erlang':'-'
				      (Num, 1)
			      in  %% Line 861
				  apply 'copy_partials'/2
				      (Dir, _cor5)
	end
'fetch_partial_result'/3 =
    %% Line 863
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 864
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  let <DirName> =
		%% Line 864
		call 'erlang':'++'
		    ([116|[116|[98|[95|[112|[97|[114|[116|[105|[97|[108|[95|[114|[101|[115|[117|[108|[116]]]]]]]]]]]]]]]]]], _cor3)
	    in  do  %% Line 865
		    case call 'file':'list_dir'
			     (DirName) of
		      %% Line 866
		      <{'error','enoent'}> when 'true' ->
			  'ok'
		      %% Line 868
		      <{'ok',Files}> when 'true' ->
			  do  %% Line 869
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor7) ->
					    case _cor7 of
					      <[File|_cor6]> when 'true' ->
						  let <_cor8> =
						      call 'filename':'join'
							  (DirName, File)
						  in  do  call 'file':'delete'
							      (_cor8)
							  apply 'lc$^0'/1
							      (_cor6)
					      <[]> when 'true' ->
						  []
					      ( <_cor7> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor7})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(Files)
				-| ['list_comprehension'] )
			      %% Line 870
			      call 'file':'del_dir'
				  (DirName)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		    do  %% Line 872
			call 'file':'make_dir'
			    (DirName)
			let <_cor12> =
			    %% Line 873
			    call 'erlang':'node'
				()
			in  let <_cor13> =
				%% Line 873
				apply 'host'/1
				    (_cor12)
			    in  %% Line 873
				apply 'fetch'/4
				    (_cor13, DirName, _cor2, _cor1)
'fetch_report'/4 =
    %% Line 875
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 876
	    apply 'fetch'/4
		(_cor3, _cor2, _cor1, _cor0)
	    %% Line 877
	    call 'erlang':'!'
		('ttb', {'fetch_complete',_cor1})
'fetch'/4 =
    %% Line 879
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 880
	    apply 'host'/1
		(_cor1)
	in  let <_cor7> =
		%% Line 880
		( case <> of
		    ( <>
			  when call 'erlang':'=='
				(_cor5,
				 _cor3) ->
			  'true'
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  apply 'is_local'/1
			      (_cor0)
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    in  %% Line 880
		case _cor7 of
		  %% Line 881
		  <'true'> when 'true' ->
		      let <Files> =
			  %% Line 882
			  apply 'get_filenames'/2
			      (_cor1, _cor0)
		      in  let <_cor13> =
			      %% Line 884
			      ( fun (_cor11) ->
				    let <_cor9> =
					%% Line 885
					call 'filename':'basename'
					    (_cor11)
				    in  let <Dest> =
					    %% Line 885
					    call 'filename':'join'
						(_cor2, _cor9)
					in  %% Line 886
					    call 'file':'rename'
						(_cor11, Dest)
				-| [{'id',{0,0,'-fetch/4-fun-0-'}}] )
			  in  %% Line 883
			      call 'lists':'foreach'
				  (_cor13, %% Line 888
					   Files)
		  %% Line 889
		  <'false'> when 'true' ->
		      %% Line 890
		      case call 'gen_tcp':'listen'
			       (0, ['binary'|[{'packet',2}|[{'active','false'}]]]) of
			<{'ok',LSock}> when 'true' ->
			    %% Line 891
			    case call 'inet':'port'
				     (LSock) of
			      <{'ok',Port}> when 'true' ->
				  do  %% Line 892
				      call 'rpc':'cast'
					  (_cor1, 'observer_backend', 'ttb_fetch', %% Line 893
										   [_cor0|[{Port,_cor3}|[]]])
				      %% Line 894
				      case call 'gen_tcp':'accept'
					       (LSock) of
					<{'ok',Sock}> when 'true' ->
					    do  %% Line 895
						apply 'receive_files'/3
						    (_cor2, Sock, 'undefined')
						%% Line 896
						case call 'gen_tcp':'close'
							 (LSock) of
						  <'ok'> when 'true' ->
						      let <_cor24> =
							  %% Line 897
							  call 'gen_tcp':'close'
							      (Sock)
						      in  %% Line 897
							  case _cor24 of
							    <'ok'> when 'true' ->
								( _cor24
								  -| ['compiler_generated'] )
							    ( <_cor18> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor18})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor17> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor17})
						    -| ['compiler_generated'] )
						end
					( <_cor16> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor16})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor15})
				-| ['compiler_generated'] )
			    end
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor14})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor19> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor19})
		    -| ['compiler_generated'] )
		end
'is_local'/1 =
    %% Line 900
    fun (_cor0) ->
	case _cor0 of
	  <{'local',_cor2,_cor3}> when 'true' ->
	      %% Line 901
	      'true'
	  %% Line 902
	  <_cor4> when 'true' ->
	      %% Line 903
	      'false'
	end
'get_filenames'/2 =
    %% Line 905
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_N,{'local',F,_cor4}> when 'true' ->
	      %% Line 906
	      call 'observer_backend':'ttb_get_filenames'
		  (F)
	  %% Line 907
	  <N,F> when 'true' ->
	      %% Line 908
	      call 'rpc':'call'
		  (N, 'observer_backend', 'ttb_get_filenames', [F|[]])
	end
'receive_files'/3 =
    %% Line 910
    fun (_cor2,_cor1,_cor0) ->
	%% Line 911
	case call 'gen_tcp':'recv'
		 (_cor1, 0) of
	  %% Line 912
	  <{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
		   #<Bin>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
	      do  %% Line 913
		  call 'file':'write'
		      (_cor0, Bin)
		  %% Line 914
		  apply 'receive_files'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 915
	  <{'ok',#{#<1>(8,1,'integer',['unsigned'|['big']]),
		   #<Bin>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
	      let <File0> =
		  %% Line 916
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  let <File> =
		      %% Line 917
		      call 'filename':'join'
			  (_cor2, File0)
		  in  %% Line 918
		      case call 'file':'open'
			       (File, ['raw'|['write']]) of
			<{'ok',Fd1}> when 'true' ->
			    %% Line 919
			    apply 'receive_files'/3
				(_cor2, _cor1, Fd1)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 920
	  <{'error','closed'}> when 'true' ->
	      let <_cor11> =
		  %% Line 921
		  call 'file':'close'
		      (_cor0)
	      in  %% Line 921
		  case _cor11 of
		    <'ok'> when 'true' ->
			( _cor11
			  -| ['compiler_generated'] )
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'host'/1 =
    %% Line 924
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 925
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  %% Line 925
	    case call 'string':'tokens'
		     (_cor1, [64]) of
	      <[_X_name|[Host|[]]]> when 'true' ->
		  %% Line 926
		  Host
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'wait_for_fetch'/1 =
    %% Line 929
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 930
	      'ok'
	  %% Line 931
	  <Nodes> when 'true' ->
	      %% Line 932
	      receive
		%% Line 933
		<{'fetch_complete',Node}> when 'true' ->
		    let <_cor1> =
			%% Line 934
			call 'lists':'delete'
			    (Node, Nodes)
		    in  %% Line 934
			apply 'wait_for_fetch'/1
			    (_cor1)
	      after 'infinity' ->
		'true'
	end
'write_info'/3 =
    %% Line 949
    fun (_cor2,_cor1,_cor0) ->
	%% Line 950
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      let <_cor15> =
		  %% Line 951
		  ( fun (_cor13) ->
			case _cor13 of
			  <{N,{'local',C,_cor19},F}> when 'true' ->
			      let <_cor7> =
				  %% Line 952
				  case F of
				    %% Line 953
				    <'none'> when 'true' ->
					%% Line 954
					'none'
				    %% Line 955
				    <_cor20> when 'true' ->
					let <_cor4> =
					    %% Line 956
					    call 'filename':'join'
						(Cwd, F)
					in  let <AbsFile> =
						%% Line 956
						call 'erlang':'++'
						    (_cor4, [46|[116|[105]]])
					    in  do  %% Line 957
						    call 'file':'delete'
							(AbsFile)
						    %% Line 958
						    AbsFile
				  end
			      in  let <Traci1> =
				      %% Line 960
				      [{'node',N}|[{'file',C}|_cor0]]
				  in  %% Line 961
				      case call 'dbg':'get_tracer'
					       (N) of
					<{'ok',Port}> when 'true' ->
					    %% Line 962
					    call 'erlang':'!'
						('ttb', %% Line 963
							{'init_node',N,{'local',_cor7,Port},_cor1,Traci1})
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor10})
					  -| ['compiler_generated'] )
				      end
			  %% Line 964
			  <{N,C,F}> when 'true' ->
			      let <MetaFile> =
				  %% Line 965
				  call 'erlang':'++'
				      (F, [46|[116|[105]]])
			      in  let <Traci1> =
				      %% Line 966
				      [{'node',N}|[{'file',C}|_cor0]]
				  in  %% Line 967
				      call 'erlang':'!'
					  ('ttb', {'init_node',N,MetaFile,_cor1,Traci1})
			  ( <_cor14> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor14})
				  -| [{'function_name',{'-write_info/3-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-write_info/3-fun-0-'}}] )
	      in  %% Line 951
		  call 'lists':'foreach'
		      (_cor15, _cor2)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'get_et_handler'/0 =
    %% Line 973
    fun () ->
	let <_cor0> =
	    %% Line 974
	    call 'erlang':'make_fun'
		('ttb_et', 'handler', 4)
	in  %% Line 974
	    {_cor0,'initial'}
'format'/1 =
    %% Line 976
    fun (_cor0) ->
	%% Line 977
	apply 'format'/2
	    (_cor0, [])
'format'/2 =
    %% Line 978
    fun (_cor1,_cor0) ->
	%% Line 979
	case apply 'format_opt'/1
		 (_cor0) of
	  <{Out,Handler,DisableSort}> when 'true' ->
	      do  %% Line 980
		  call 'ets':'new'
		      ('ttb', ['named_table'])
		  %% Line 981
		  apply 'format'/4
		      (_cor1, Out, Handler, DisableSort)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'format'/4 =
    %% Line 982
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <File,Out,Handler,DisableSort>
	      when try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (File)
		    in  let <_cor5> =
			    call 'erlang':'hd'
				(File)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (_cor5)
			    in  call 'erlang':'and'
				    (_cor4, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 984
		  case call 'filelib':'is_dir'
			   (File) of
		    %% Line 985
		    <'true'> when 'true' ->
			let <_cor8> =
			    %% Line 986
			    call 'filename':'join'
				(File, [116|[116|[98|[95|[112|[97|[114|[116|[105|[97|[108|[95|[114|[101|[115|[117|[108|[116|[42]]]]]]]]]]]]]]]]]]])
			in  let <List> =
				%% Line 986
				call 'filelib':'wildcard'
				    (_cor8)
			    in  let <_cor10> =
				    %% Line 987
				    apply 'collect_files'/1
					([File|List])
				in  %% Line 987
				    call 'lists':'append'
					(_cor10)
		    %% Line 988
		    <'false'> when 'true' ->
			%% Line 989
			[File|[]]
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 991
		  apply 'format'/4
		      (_cor12, Out, Handler, DisableSort)
	  %% Line 992
	  <Files,Out,Handler,DisableSort>
	      when try
		    let <_cor14> =
			call 'erlang':'is_list'
			    (Files)
		    in  let <_cor15> =
			    call 'erlang':'hd'
				(Files)
			in  let <_cor16> =
				call 'erlang':'is_list'
				    (_cor15)
			    in  call 'erlang':'and'
				    (_cor14, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor18> =
		  %% Line 993
		  case call 'erlang':'whereis'
			   ('dbg') of
		    %% Line 994
		    <'undefined'> when 'true' ->
			'true'
		    %% Line 995
		    <_cor35> when 'true' ->
			'false'
		  end
	      in  let <_cor25> =
		      %% Line 997
		      ( fun (_cor22,_cor21) ->
			    let <_cor20> =
				apply 'prepare'/1
				    (_cor22)
			    in  [_cor20|_cor21]
			-| [{'id',{0,0,'-format/4-fun-0-'}}] )
		  in  let <Details> =
			  %% Line 997
			  call 'lists':'foldl'
			      (_cor25, %% Line 998
				       [], %% Line 998
					   Files)
		      in  let <Fd> =
			      %% Line 999
			      apply 'get_fd'/1
				  (Out)
			  in  let <RealHandler> =
				  %% Line 1000
				  apply 'get_handler'/2
				      (Handler, Files)
			      in  let <R> =
				      %% Line 1001
				      apply 'do_format'/4
					  (Fd, Details, DisableSort, RealHandler)
				  in  do  %% Line 1002
					  call 'file':'close'
					      (Fd)
					  do  %% Line 1003
					      call 'ets':'delete'
						  ('ttb')
					      do  %% Line 1004
						  case _cor18 of
						    %% Line 1005
						    <'true'> when 'true' ->
							call 'dbg':'stop_clear'
							    ()
						    %% Line 1006
						    <'false'> when 'true' ->
							'ok'
						    ( <_cor30> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor30})
						      -| ['compiler_generated'] )
						  end
						  %% Line 1008
						  R
	  ( <_cor34,_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31})
		  -| [{'function_name',{'format',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_files'/1 =
    %% Line 1010
    fun (_cor0) ->
	let <_cor12> =
	    %% Line 1011
	    ( fun (_cor10) ->
		  let <_cor1> =
		      %% Line 1012
		      call 'filename':'join'
			  (_cor10, [42|[46|[116|[105]]]])
		  in  let <MetaFiles> =
			  %% Line 1012
			  call 'filelib':'wildcard'
			      (_cor1)
		      in  let <_cor9> =
			      %% Line 1013
			      ( fun (_cor7) ->
				    let <_cor3> =
					%% Line 1014
					call 'erlang':'length'
					    (_cor7)
				    in  let <_cor4> =
					    %% Line 1014
					    call 'erlang':'-'
						(_cor3, 3)
					in  let <Sub> =
						%% Line 1014
						call 'string':'left'
						    (_cor7, _cor4)
					    in  %% Line 1015
						case call 'filelib':'is_file'
							 (Sub) of
						  %% Line 1016
						  <'true'> when 'true' ->
						      Sub
						  %% Line 1017
						  <'false'> when 'true' ->
						      call 'erlang':'++'
							  (Sub, [46|[42|[46|[119|[114|[112]]]]]])
						  ( <_cor6> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor6})
						    -| ['compiler_generated'] )
						end
				-| [{'id',{0,0,'-collect_files/1-fun-0-'}}] )
			  in  %% Line 1013
			      call 'lists':'map'
				  (_cor9, %% Line 1020
					  MetaFiles)
	      -| [{'id',{0,0,'-collect_files/1-fun-1-'}}] )
	in  %% Line 1011
	    call 'lists':'map'
		(_cor12, _cor0)
'get_handler'/2 =
    %% Line 1023
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',Files> when 'true' ->
	      let <_cor2> =
		  %% Line 1025
		  call 'erlang':'hd'
		      (Files)
	      in  %% Line 1025
		  case apply 'read_traci'/1
			   (_cor2) of
		    <{Traci,_cor7}> when 'true' ->
			%% Line 1026
			case call 'dict':'find'
				 ('handler', Traci) of
			  %% Line 1027
			  <'error'> when 'true' ->
			      {( 'defaulthandler'/4
				 -| [{'id',{0,0,'-get_handler/2-fun-0-'}}] ),'initial'}
			  %% Line 1028
			  <{'ok',[Handler|[]]}> when 'true' ->
			      Handler
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1030
	  <Handler,_cor8> when 'true' ->
	      %% Line 1031
	      Handler
	end
'prepare'/1 =
    %% Line 1033
    fun (_cor0) ->
	%% Line 1034
	case apply 'read_traci'/1
		 (_cor0) of
	  <{Traci,Proci}> when 'true' ->
	      let <Node> =
		  %% Line 1035
		  apply 'get_node'/1
		      (Traci)
	      in  let <_cor5> =
		      %% Line 1036
		      ( fun (_cor3) ->
			    case _cor3 of
			      <{Pid,PI}> when 'true' ->
				  %% Line 1042
				  call 'ets':'insert'
				      ('ttb', {Pid,PI,Node})
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'-prepare/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-prepare/1-fun-0-'}}] )
		  in  do  %% Line 1036
			  call 'lists':'foreach'
			      (_cor5, %% Line 1043
				      Proci)
			  let <FileOrWrap> =
			      %% Line 1044
			      apply 'get_file'/2
				  (_cor0, Traci)
			  in  %% Line 1045
			      {FileOrWrap,Traci}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'format_opt'/1 =
    %% Line 1047
    fun (_cor0) ->
	case _cor0 of
	  <Opt>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 1048
		  case call 'lists':'keysearch'
			   ('out', 1, Opt) of
		    %% Line 1049
		    <{'value',{'out',O}}> when 'true' ->
			O
		    %% Line 1050
		    <_cor9> when 'true' ->
			'standard_io'
		  end
	      in  let <_cor5> =
		      %% Line 1052
		      case call 'lists':'keysearch'
			       ('handler', 1, Opt) of
			%% Line 1053
			<{'value',{'handler',H}}> when 'true' ->
			    H
			%% Line 1054
			<_cor10> when 'true' ->
			    'undefined'
		      end
		  in  let <DisableSort> =
			  %% Line 1056
			  call 'proplists':'get_value'
			      ('disable_sort', Opt, 'false')
		      in  %% Line 1057
			  {_cor2,_cor5,DisableSort}
	  %% Line 1058
	  <Opt> when 'true' ->
	      %% Line 1059
	      apply 'format_opt'/1
		  ([Opt|[]])
	end
'read_traci'/1 =
    %% Line 1062
    fun (_cor0) ->
	let <MetaFile> =
	    %% Line 1063
	    apply 'get_metafile'/1
		(_cor0)
	in  %% Line 1064
	    case call 'file':'read_file'
		     (MetaFile) of
	      %% Line 1065
	      <{'ok',B}> when 'true' ->
		  let <_cor2> =
		      %% Line 1066
		      call 'dict':'new'
			  ()
		  in  %% Line 1066
		      apply 'interpret_binary'/3
			  (B, _cor2, [])
	      %% Line 1067
	      <_cor6> when 'true' ->
		  do  %% Line 1068
		      call 'io':'format'
			  ([87|[97|[114|[110|[105|[110|[103|[58|[32|[110|[111|[32|[109|[101|[116|[97|[32|[100|[97|[116|[97|[32|[102|[105|[108|[101|[58|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [MetaFile|[]])
		      let <_cor3> =
			  %% Line 1069
			  call 'dict':'new'
			      ()
		      in  %% Line 1069
			  {_cor3,[]}
	    end
'get_metafile'/1 =
    %% Line 1072
    fun (_cor0) ->
	%% Line 1073
	case call 'filename':'rootname'
		 (_cor0, [46|[119|[114|[112]]]]) of
	  %% Line 1074
	  <_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor0) ->
	      call 'erlang':'++'
		  (_cor0, [46|[116|[105]]])
	  %% Line 1075
	  <Wrap> when 'true' ->
	      let <_cor1> =
		  call 'filename':'rootname'
		      (Wrap)
	      in  call 'erlang':'++'
		      (_cor1, [46|[116|[105]]])
	end
'interpret_binary'/3 =
    %% Line 1079
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,Dict,P> when 'true' ->
	      let <_cor3> =
		  %% Line 1080
		  call 'lists':'reverse'
		      (P)
	      in  %% Line 1080
		  {Dict,_cor3}
	  %% Line 1081
	  <B,Dict,P> when 'true' ->
	      %% Line 1082
	      case apply 'get_term'/1
		       (B) of
		<{Term,Rest}> when 'true' ->
		    let <Dict1,P1> =
			%% Line 1084
			case Term of
			  %% Line 1085
			  <{'pid',PI}> when 'true' ->
			      %% Line 1086
			      <Dict,[PI|P]>
			  %% Line 1087
			  <{Key,Val}> when 'true' ->
			      let <_cor7> =
				  %% Line 1088
				  ( fun (_cor5) ->
					[Val|_cor5]
				    -| [{'id',{0,0,'-interpret_binary/3-fun-0-'}}] )
			      in  let <_cor8> =
				      %% Line 1088
				      call 'dict':'update'
					  (Key, _cor7, [Val|[]], Dict)
				  in  <_cor8,%% Line 1088
					     P>
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1090
			apply 'interpret_binary'/3
			    (Rest, Dict1, P1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'get_fd'/1 =
    %% Line 1092
    fun (_cor0) ->
	%% Line 1093
	case _cor0 of
	  %% Line 1094
	  <'standard_io'> when 'true' ->
	      _cor0
	  %% Line 1096
	  <_X_file> when 'true' ->
	      do  %% Line 1097
		  call 'file':'delete'
		      (_cor0)
		  %% Line 1098
		  case call 'file':'open'
			   (_cor0, ['append']) of
		    %% Line 1099
		    <{'ok',Fd}> when 'true' ->
			Fd
		    %% Line 1100
		    <Error> when 'true' ->
			call 'erlang':'exit'
			    (Error)
		  end
	end
'get_node'/1 =
    %% Line 1104
    fun (_cor0) ->
	%% Line 1105
	case call 'dict':'find'
		 ('node', _cor0) of
	  %% Line 1106
	  <{'ok',[Node|[]]}> when 'true' ->
	      Node
	  %% Line 1107
	  <'error'> when 'true' ->
	      'unknown'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'get_file'/2 =
    %% Line 1110
    fun (_cor1,_cor0) ->
	%% Line 1111
	case call 'dict':'find'
		 ('file', _cor0) of
	  %% Line 1112
	  <{'ok',[Client|[]]}> when 'true' ->
	      %% Line 1113
	      apply 'check_client'/2
		  (Client, _cor1)
	  %% Line 1114
	  <'error'> when 'true' ->
	      %% Line 1115
	      apply 'check_exists'/1
		  (_cor1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'check_client'/2 =
    %% Line 1118
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Client,File>
	      when call 'erlang':'is_list'
		    (Client) ->
	      %% Line 1119
	      apply 'check_exists'/1
		  (File)
	  %% Line 1120
	  <Client,File>
	      when try
		    let <_cor2> =
			call 'erlang':'is_tuple'
			    (Client)
		    in  let <_cor3> =
			    call 'erlang':'element'
				(2, Client)
			in  let <_cor4> =
				call 'erlang':'=:='
				    (_cor3, 'wrap')
			    in  call 'erlang':'and'
				    (_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Root> =
		  %% Line 1121
		  call 'filename':'rootname'
		      (File, [46|[119|[114|[112]]]])
	      in  %% Line 1122
		  case call 'filename':'extension'
			   (Root) of
		    %% Line 1123
		    <[46|[42]]> when 'true' ->
			let <Part1> =
			    %% Line 1124
			    call 'filename':'rootname'
				(Root, [42])
			in  %% Line 1125
			    call 'erlang':'setelement'
				(1, Client, Part1)
		    %% Line 1126
		    <_cor10> when 'true' ->
			%% Line 1127
			apply 'check_exists'/1
			    (File)
		  end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'check_client',2}}] )
	    -| ['compiler_generated'] )
	end
'check_exists'/1 =
    %% Line 1130
    fun (_cor0) ->
	%% Line 1131
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 1132
	  <{'ok',{'file_info',_cor3,'regular',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}}> when 'true' ->
	      _cor0
	  %% Line 1133
	  <_cor15> when 'true' ->
	      %% Line 1134
	      call 'erlang':'exit'
		  ({'error','no_file'})
	end
'do_format'/4 =
    %% Line 1138
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 1139
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <{FileOrWrap,Traci},Acc> when 'true' ->
			let <_cor4> =
			    %% Line 1140
			    apply 'start_client'/2
				(FileOrWrap, Traci)
			in  %% Line 1140
			    [_cor4|Acc]
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-do_format/4-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-do_format/4-fun-0-'}}] )
	in  let <Clients> =
		%% Line 1139
		call 'lists':'foldl'
		    (_cor9, %% Line 1141
			    [], _cor2)
	    in  %% Line 1142
		apply 'init_collector'/4
		    (_cor3, Clients, _cor1, _cor0)
'start_client'/2 =
    %% Line 1144
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1146
	    call 'dict':'to_list'
		(_cor0)
	in  %% Line 1145
	    call 'dbg':'trace_client'
		('file', _cor1, %% Line 1146
				{( 'handler'/2
				   -| [{'id',{0,0,'-start_client/2-fun-0-'}}] ),_cor2})
'handler'/2 =
    %% Line 1148
    fun (_cor1,_cor0) ->
	do  %% Line 1151
	    receive
	      %% Line 1152
	      <{'get',Collector}> when 'true' ->
		  let <_cor2> =
		      call 'erlang':'self'
			  ()
		  in  call 'erlang':'!'
			  (Collector, {_cor2,{_cor1,_cor0}})
	      %% Line 1153
	      <'done'> when 'true' ->
		  'ok'
	    after 'infinity' ->
	      'ok'
	    _cor0
'handler2'/2 =
    %% Line 1158
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Trace,{Fd,Traci,{Fun,State}}>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      let <_cor2> =
		  %% Line 1159
		  apply Fun
		      (Fd, Trace, Traci, State)
	      in  %% Line 1159
		  {Fun,_cor2}
	  %% Line 1160
	  <Trace,{Fd,Traci,{{M,F},State}}>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 1161
		  call M:F
		      (Fd, Trace, Traci, State)
	      in  %% Line 1161
		  {{M,F},_cor5}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'handler2',2}}] )
	    -| ['compiler_generated'] )
	end
'defaulthandler'/4 =
    %% Line 1163
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fd,Trace,_X_Traci,'initial'> when 'true' ->
	      %% Line 1164
	      call 'dbg':'dhandler'
		  (Trace, Fd)
	  %% Line 1165
	  <_X_Fd,Trace,_X_Traci,State> when 'true' ->
	      %% Line 1166
	      call 'dbg':'dhandler'
		  (Trace, State)
	end
'init_collector'/4 =
    %% Line 1168
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Collected> =
	    %% Line 1169
	    apply 'get_first'/1
		(_cor2)
	in  %% Line 1170
	    case _cor1 of
	      %% Line 1171
	      <'true'> when 'true' ->
		  apply 'collector'/4
		      (_cor3, Collected, _cor1, _cor0)
	      %% Line 1172
	      <'false'> when 'true' ->
		  let <_cor5> =
		      apply 'sort'/1
			  (Collected)
		  in  apply 'collector'/4
			  (_cor3, _cor5, _cor1, _cor0)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'collector'/4 =
    %% Line 1175
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fd,[{_cor13,{Client,{Trace,Traci}}}|Rest],DisableSort,CommonState> when 'true' ->
	      let <Trace1> =
		  %% Line 1176
		  apply 'update_procinfo'/1
		      (Trace)
	      in  let <CommonState2> =
		      %% Line 1177
		      apply 'handler2'/2
			  (Trace1, {Fd,Traci,CommonState})
		  in  %% Line 1178
		      case apply 'get_next'/1
			       (Client) of
			%% Line 1179
			<'end_of_trace'> when 'true' ->
			    %% Line 1180
			    apply 'collector'/4
				(Fd, Rest, DisableSort, CommonState2)
			%% Line 1181
			<Next> when 'true' ->
			    case DisableSort of
			      %% Line 1182
			      <'false'> when 'true' ->
				  let <_cor6> =
				      apply 'sort'/1
					  ([Next|Rest])
				  in  apply 'collector'/4
					  (Fd, _cor6, DisableSort, CommonState2)
			      %% Line 1183
			      <'true'> when 'true' ->
				  apply 'collector'/4
				      (Fd, [Next|Rest], DisableSort, CommonState2)
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
		      end
	  %% Line 1186
	  <Fd,[],_cor14,CommonState> when 'true' ->
	      do  %% Line 1187
		  apply 'handler2'/2
		      ('end_of_trace', {Fd,'end_of_trace',CommonState})
		  %% Line 1188
		  'ok'
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'collector',4}}] )
	    -| ['compiler_generated'] )
	end
'update_procinfo'/1 =
    %% Line 1190
    fun (_cor0) ->
	case _cor0 of
	  <Trace = {'drop',_X_N}> when 'true' ->
	      %% Line 1191
	      Trace
	  %% Line 1192
	  <Trace>
	      when try
		    let <_cor1> =
			call 'erlang':'element'
			    (1, _cor0)
		    in  call 'erlang':'=:='
			    (_cor1, 'seq_trace')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Info> =
		  %% Line 1193
		  call 'erlang':'element'
		      (3, Trace)
	      in  let <_cor9> =
		      %% Line 1195
		      case Info of
			%% Line 1196
			<{'send',Serial,From,To,Msg}> when 'true' ->
			    let <_cor4> =
				%% Line 1197
				apply 'get_procinfo'/1
				    (From)
			    in  let <_cor3> =
				    %% Line 1197
				    apply 'get_procinfo'/1
					(To)
				in  %% Line 1197
				    {'send',Serial,_cor4,_cor3,Msg}
			%% Line 1198
			<{'receive',Serial,From,To,Msg}> when 'true' ->
			    let <_cor6> =
				%% Line 1199
				apply 'get_procinfo'/1
				    (From)
			    in  let <_cor5> =
				    %% Line 1199
				    apply 'get_procinfo'/1
					(To)
				in  %% Line 1199
				    {'receive',Serial,_cor6,_cor5,Msg}
			%% Line 1200
			<{'print',Serial,From,Void,UserInfo}> when 'true' ->
			    let <_cor7> =
				%% Line 1201
				apply 'get_procinfo'/1
				    (From)
			    in  %% Line 1201
				{'print',Serial,_cor7,Void,UserInfo}
			%% Line 1202
			<Other> when 'true' ->
			    %% Line 1203
			    Other
		      end
		  in  %% Line 1205
		      call 'erlang':'setelement'
			  (3, Trace, _cor9)
	  %% Line 1206
	  <Trace>
	      when try
		    let <_cor11> =
			call 'erlang':'element'
			    (3, _cor0)
		    in  call 'erlang':'=:='
			    (_cor11, 'send')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 1207
		  call 'erlang':'element'
		      (5, Trace)
	      in  let <PI> =
		      %% Line 1207
		      apply 'get_procinfo'/1
			  (_cor12)
		  in  %% Line 1208
		      call 'erlang':'setelement'
			  (5, Trace, PI)
	  %% Line 1209
	  <Trace> when 'true' ->
	      let <Pid> =
		  %% Line 1210
		  call 'erlang':'element'
		      (2, Trace)
	      in  let <ProcInfo> =
		      %% Line 1211
		      apply 'get_procinfo'/1
			  (Pid)
		  in  %% Line 1212
		      call 'erlang':'setelement'
			  (2, Trace, ProcInfo)
	end
'get_procinfo'/1 =
    %% Line 1214
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when let <_cor1> =
		    call 'erlang':'is_pid'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'is_port'
			    (_cor0)
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 1215
	      case call 'ets':'lookup'
		       ('ttb', Pid) of
		%% Line 1216
		<[PI|[]]> when 'true' ->
		    PI
		%% Line 1217
		<[]> when 'true' ->
		    Pid
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1219
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 1220
		  call 'erlang':'node'
		      ()
	      in  %% Line 1220
		  case call 'ets':'match_object'
			   ('ttb', {'_',Name,_cor4}) of
		    %% Line 1221
		    <[PI|[]]> when 'true' ->
			PI
		    %% Line 1222
		    <[]> when 'true' ->
			Name
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1224
	  <{Name,Node}>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 1225
	      case call 'ets':'match_object'
		       ('ttb', {'_',Name,Node}) of
		%% Line 1226
		<[PI|[]]> when 'true' ->
		    PI
		%% Line 1227
		<[]> when 'true' ->
		    {Name,Node}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'get_procinfo',1}}] )
	    -| ['compiler_generated'] )
	end
'get_first'/1 =
    %% Line 1230
    fun (_cor0) ->
	case _cor0 of
	  <[Client|Clients]> when 'true' ->
	      let <_cor1> =
		  %% Line 1231
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 1231
		      call 'erlang':'!'
			  (Client, {'get',_cor1})
		      %% Line 1232
		      receive
			%% Line 1233
			<{_cor5,{'end_of_trace',_cor6}}>
			    when call 'erlang':'=:='
				  (_cor5,
				   Client) ->
			    %% Line 1234
			    apply 'get_first'/1
				(Clients)
			%% Line 1235
			<Next = {_cor7,{Trace,_cor8}}>
			    when call 'erlang':'=:='
				  (_cor7,
				   Client) ->
			    let <_cor2> =
				%% Line 1236
				apply 'timestamp'/1
				    (Trace)
			    in  let <_cor3> =
				    %% Line 1236
				    apply 'get_first'/1
					(Clients)
				in  %% Line 1236
				    [{_cor2,Next}|_cor3]
		      after 'infinity' ->
			'true'
	  %% Line 1238
	  <[]> when 'true' ->
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'get_first',1}}] )
	    -| ['compiler_generated'] )
	end
'get_next'/1 =
    %% Line 1240
    fun (_cor0) ->
	case _cor0 of
	  <Client>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1241
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 1241
		      call 'erlang':'!'
			  (Client, {'get',_cor1})
		      %% Line 1242
		      receive
			%% Line 1243
			<{_cor4,{'end_of_trace',_cor5}}>
			    when call 'erlang':'=:='
				  (_cor4,
				   Client) ->
			    %% Line 1244
			    'end_of_trace'
			%% Line 1245
			<{_cor6,{Trace,Traci}}>
			    when call 'erlang':'=:='
				  (_cor6,
				   Client) ->
			    let <_cor2> =
				%% Line 1246
				apply 'timestamp'/1
				    (Trace)
			    in  %% Line 1246
				{_cor2,{Client,{Trace,Traci}}}
		      after 'infinity' ->
			'true'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'get_next',1}}] )
	    -| ['compiler_generated'] )
	end
'sort'/1 =
    %% Line 1249
    fun (_cor0) ->
	%% Line 1250
	call 'lists':'keysort'
	    (1, _cor0)
'timestamp'/1 =
    %% Line 1253
    fun (_cor0) ->
	case _cor0 of
	  <Trace>
	      when let <_cor2> =
		    try
			let <_cor1> =
			    call 'erlang':'element'
				(1, _cor0)
			in  call 'erlang':'=:='
				(_cor1, 'trace_ts')
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor7> =
			%% Line 1254
			try
			    let <_cor3> =
				call 'erlang':'element'
				    (1, _cor0)
			    in  let <_cor4> =
				    call 'erlang':'=:='
					(_cor3, 'seq_trace')
				in  let <_cor5> =
					call 'erlang':'tuple_size'
					    (_cor0)
				    in  let <_cor6> =
					    call 'erlang':'=:='
						(_cor5, 4)
					in  call 'erlang':'and'
						(_cor4, _cor6)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'or'
			    (_cor2, _cor7) ->
	      let <_cor8> =
		  %% Line 1255
		  call 'erlang':'tuple_size'
		      (Trace)
	      in  %% Line 1255
		  call 'erlang':'element'
		      (_cor8, Trace)
	  %% Line 1256
	  <_X_Trace> when 'true' ->
	      %% Line 1257
	      0
	end
'to_list'/1 =
    %% Line 1261
    fun (_cor0) ->
	case _cor0 of
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      [Atom|[]]
	  %% Line 1262
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      List
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'write_binary'/2 =
    %% Line 1264
    fun (_cor1,_cor0) ->
	%% Line 1265
	case call 'file':'open'
		 (_cor1, ['raw'|['append']]) of
	  <{'ok',Fd}> when 'true' ->
	      do  %% Line 1268
		  call 'observer_backend':'ttb_write_binary'
		      (Fd, _cor0)
		  %% Line 1269
		  call 'file':'close'
		      (Fd)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'get_term'/1 =
    %% Line 1271
    fun (_cor0) ->
	%% Line 1272
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<S>(8,1,'integer',['unsigned'|['big']]),
	     #<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1273
	      case ( B2
		     -| ['reuse_for_context'] ) of
		<#{#<T>(S,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1274
		    case call 'erlang':'binary_to_term'
			     (T) of
		      %% Line 1275
		      <{'$size',Sz}> when 'true' ->
			  %% Line 1277
			  case ( Rest
				 -| ['reuse_for_context'] ) of
			    <#{#<T1>(Sz,8,'binary',['unsigned'|['big']]),
			       #<Rest1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				let <_cor4> =
				    %% Line 1278
				    call 'erlang':'binary_to_term'
					(T1)
				in  %% Line 1278
				    {_cor4,Rest1}
			    ( <_cor3> when 'true' ->
				  do  primop 'bs_context_to_binary'
					  (_cor3)
				      primop 'match_fail'
					  ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1279
		      <Term> when 'true' ->
			  %% Line 1280
			  {Term,Rest}
		    end
		( <_cor2> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor2)
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    primop 'match_fail'
			({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'display_warning'/2 =
    %% Line 1283
    fun (_cor1,_cor0) ->
	%% Line 1284
	call 'io':'format'
	    ([87|[97|[114|[110|[105|[110|[103|[58|[32|[123|[126|[119|[44|[126|[119|[125|[126|[110]]]]]]]]]]]]]]]]]], [_cor0|[_cor1|[]]])
'ip_to_file'/2 =
    %% Line 1290
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'metadata',_cor10,_cor11},State = {'shell_only',_cor12}> when 'true' ->
	      %% Line 1291
	      State
	  %% Line 1292
	  <Trace,State = {'shell_only',Fun}> when 'true' ->
	      do  %% Line 1293
		  apply Fun
		      (Trace)
		  %% Line 1294
		  State
	  %% Line 1295
	  <Trace,{{'file',File},ShellOutput}> when 'true' ->
	      let <Fun> =
		  %% Line 1296
		  call 'dbg':'trace_port'
		      ('file', File)
	      in  let <Port> =
		      %% Line 1297
		      apply Fun
			  ()
		  in  let <_cor4> =
			  %% Line 1299
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 1299
			      call 'erlang':'!'
				  ('ttb', {'ip_to_file_trace_port',Port,_cor4})
			      do  %% Line 1300
				  receive
				    <{'ttb','ok'}> when 'true' ->
					'ok'
				  after 'infinity' ->
				    'ok'
				  do  %% Line 1301
				      case Trace of
					%% Line 1302
					<{'metadata',_cor13,_cor14}> when 'true' ->
					    'ok'
					%% Line 1303
					<_cor15> when 'true' ->
					    apply 'show_trace'/2
						(Trace, ShellOutput)
				      end
				      %% Line 1305
				      apply 'ip_to_file'/2
					  (Trace, {Port,ShellOutput})
	  %% Line 1306
	  <{'metadata',MetaFile,MetaData},State> when 'true' ->
	      %% Line 1307
	      case call 'file':'open'
		       (MetaFile, ['write'|['raw'|['append']]]) of
		<{'ok',MetaFd}> when 'true' ->
		    do  %% Line 1308
			call 'file':'write'
			    (MetaFd, MetaData)
			do  %% Line 1309
			    call 'file':'close'
				(MetaFd)
			    %% Line 1310
			    State
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1311
	  <Trace,{Port,ShellOutput}> when 'true' ->
	      do  %% Line 1312
		  apply 'show_trace'/2
		      (Trace, ShellOutput)
		  let <B> =
		      %% Line 1313
		      call 'erlang':'term_to_binary'
			  (Trace)
		  in  do  %% Line 1314
			  call 'erlang':'port_command'
			      (Port, B)
			  %% Line 1315
			  {Port,ShellOutput}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'ip_to_file',2}}] )
	    -| ['compiler_generated'] )
	end
'show_trace'/2 =
    %% Line 1317
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Trace,Fun>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 1318
	      apply Fun
		  (Trace)
	  %% Line 1319
	  <_cor4,_cor5> when 'true' ->
	      %% Line 1320
	      'ok'
	end
'dump_ti'/1 =
    %% Line 1324
    fun (_cor0) ->
	%% Line 1325
	case call 'file':'read_file'
		 (_cor0) of
	  <{'ok',B}> when 'true' ->
	      %% Line 1326
	      apply 'dump_ti'/2
		  (B, [])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'dump_ti'/2 =
    %% Line 1328
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 1329
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 1330
	  <B,Acc> when 'true' ->
	      %% Line 1331
	      case apply 'get_term'/1
		       (B) of
		<{Term,Rest}> when 'true' ->
		    %% Line 1332
		    apply 'dump_ti'/2
			(Rest, [Term|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ttb')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ttb', _cor0)
end