module 'crashdump_viewer' ['allocated_areas'/0,
			   'allocator_info'/0,
			   'atoms'/0,
			   'code_change'/3,
			   'debug'/1,
			   'dist_info'/0,
			   'ets_tables'/1,
			   'expand_binary'/1,
			   'funs'/0,
			   'general_info'/0,
			   'handle_call'/3,
			   'handle_cast'/2,
			   'handle_info'/2,
			   'hash_tables'/0,
			   'index_tables'/0,
			   'init'/1,
			   'internal_ets_tables'/0,
			   'loaded_mod_details'/1,
			   'loaded_modules'/0,
			   'memory'/0,
			   'module_info'/0,
			   'module_info'/1,
			   'node_info'/1,
			   'port'/1,
			   'ports'/0,
			   'proc_details'/1,
			   'processes'/0,
			   'read_file'/1,
			   'script_start'/0,
			   'script_start'/1,
			   'start'/0,
			   'start'/1,
			   'start_link'/0,
			   'stop'/0,
			   'stop_debug'/0,
			   'terminate'/2,
			   'timers'/1,
			   'to_proplist'/2,
			   'to_value_list'/1]
    attributes [%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','menu_item'},[{'record_field',23,{'atom',23,'index'}}|[{'record_field',23,{'atom',23,'picture'}}|[{'record_field',23,{'atom',23,'text'}}|[{'record_field',23,{'atom',23,'depth'}}|[{'record_field',23,{'atom',23,'children'}}|[{'record_field',23,{'atom',23,'state'}}|[{'record_field',23,{'atom',23,'target'}}]]]]]]],[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','general_info'},[{'record_field',26,{'atom',26,'created'}}|[{'record_field',27,{'atom',27,'slogan'}}|[{'record_field',28,{'atom',28,'system_vsn'}}|[{'record_field',29,{'atom',29,'compile_time'}}|[{'record_field',30,{'atom',30,'taints'}}|[{'record_field',31,{'atom',31,'node_name'}}|[{'record_field',32,{'atom',32,'num_atoms'}}|[{'record_field',33,{'atom',33,'num_procs'}}|[{'record_field',34,{'atom',34,'num_ets'}}|[{'record_field',35,{'atom',35,'num_timers'}}|[{'record_field',36,{'atom',36,'num_fun'}}|[{'record_field',37,{'atom',37,'mem_tot'}}|[{'record_field',38,{'atom',38,'mem_max'}}|[{'record_field',39,{'atom',39,'instr_info'}}]]]]]]]]]]]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','proc'},[{'record_field',56,{'atom',56,'pid'}}|[{'record_field',57,{'atom',57,'name'}}|[{'record_field',58,{'atom',58,'init_func'}}|[{'record_field',59,{'atom',59,'parent'},{'string',59,[117|[110|[107|[110|[111|[119|[110]]]]]]]}}|[{'record_field',60,{'atom',60,'start_time'},{'string',60,[117|[110|[107|[110|[111|[119|[110]]]]]]]}}|[{'record_field',61,{'atom',61,'state'}}|[{'record_field',62,{'atom',62,'current_func'}}|[{'record_field',63,{'atom',63,'msg_q_len'},{'integer',63,0}}|[{'record_field',64,{'atom',64,'msg_q'}}|[{'record_field',65,{'atom',65,'last_calls'}}|[{'record_field',66,{'atom',66,'links'}}|[{'record_field',67,{'atom',67,'monitors'}}|[{'record_field',68,{'atom',68,'mon_by'}}|[{'record_field',69,{'atom',69,'prog_count'}}|[{'record_field',70,{'atom',70,'cp'}}|[{'record_field',71,{'atom',71,'arity'}}|[{'record_field',72,{'atom',72,'dict'}}|[{'record_field',73,{'atom',73,'reds'},{'integer',73,0}}|[{'record_field',74,{'atom',74,'num_heap_frag'},{'string',74,[117|[110|[107|[110|[111|[119|[110]]]]]]]}}|[{'record_field',75,{'atom',75,'heap_frag_data'}}|[{'record_field',76,{'atom',76,'stack_heap'},{'integer',76,0}}|[{'record_field',77,{'atom',77,'old_heap'}}|[{'record_field',78,{'atom',78,'heap_unused'}}|[{'record_field',79,{'atom',79,'old_heap_unused'}}|[{'record_field',80,{'atom',80,'new_heap_start'}}|[{'record_field',81,{'atom',81,'new_heap_top'}}|[{'record_field',82,{'atom',82,'stack_top'}}|[{'record_field',83,{'atom',83,'stack_end'}}|[{'record_field',84,{'atom',84,'old_heap_start'}}|[{'record_field',85,{'atom',85,'old_heap_top'}}|[{'record_field',86,{'atom',86,'old_heap_end'}}|[{'record_field',87,{'atom',87,'memory'}}|[{'record_field',88,{'atom',88,'stack_dump'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','port'},[{'record_field',91,{'atom',91,'id'}}|[{'record_field',92,{'atom',92,'slot'}}|[{'record_field',93,{'atom',93,'connected'}}|[{'record_field',94,{'atom',94,'links'}}|[{'record_field',95,{'atom',95,'name'}}|[{'record_field',96,{'atom',96,'monitors'}}|[{'record_field',97,{'atom',97,'controls'}}]]]]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','ets_table'},[{'record_field',100,{'atom',100,'pid'}}|[{'record_field',101,{'atom',101,'slot'}}|[{'record_field',102,{'atom',102,'id'}}|[{'record_field',103,{'atom',103,'name'}}|[{'record_field',104,{'atom',104,'type'},{'string',104,[104|[97|[115|[104]]]]}}|[{'record_field',105,{'atom',105,'buckets'}}|[{'record_field',106,{'atom',106,'size'}}|[{'record_field',107,{'atom',107,'memory'}}]]]]]]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','timer'},[{'record_field',110,{'atom',110,'pid'}}|[{'record_field',111,{'atom',111,'name'}}|[{'record_field',112,{'atom',112,'msg'}}|[{'record_field',113,{'atom',113,'time'}}]]]],[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','fu'},[{'record_field',116,{'atom',116,'module'}}|[{'record_field',117,{'atom',117,'uniq'}}|[{'record_field',118,{'atom',118,'index'}}|[{'record_field',119,{'atom',119,'address'}}|[{'record_field',120,{'atom',120,'native_address'}}|[{'record_field',121,{'atom',121,'refc'}}]]]]]],[]}],
		%% Line 123
		'type' =
		    %% Line 123
		    [{{'record','nod'},[{'record_field',124,{'atom',124,'name'}}|[{'record_field',125,{'atom',125,'channel'}}|[{'record_field',126,{'atom',126,'conn_type'}}|[{'record_field',127,{'atom',127,'controller'}}|[{'record_field',128,{'atom',128,'creation'}}|[{'record_field',129,{'atom',129,'remote_links'},{'nil',129}}|[{'record_field',130,{'atom',130,'remote_mon'},{'nil',130}}|[{'record_field',131,{'atom',131,'remote_mon_by'},{'nil',131}}|[{'record_field',132,{'atom',132,'error'}}]]]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','loaded_mod'},[{'record_field',135,{'atom',135,'mod'}}|[{'record_field',136,{'atom',136,'current_size'}}|[{'record_field',137,{'atom',137,'current_attrib'}}|[{'record_field',138,{'atom',138,'current_comp_info'}}|[{'record_field',139,{'atom',139,'old_size'}}|[{'record_field',140,{'atom',140,'old_attrib'}}|[{'record_field',141,{'atom',141,'old_comp_info'}}]]]]]]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','hash_table'},[{'record_field',144,{'atom',144,'name'}}|[{'record_field',145,{'atom',145,'size'}}|[{'record_field',146,{'atom',146,'used'}}|[{'record_field',147,{'atom',147,'objs'}}|[{'record_field',148,{'atom',148,'depth'}}]]]]],[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','index_table'},[{'record_field',151,{'atom',151,'name'}}|[{'record_field',152,{'atom',152,'size'}}|[{'record_field',153,{'atom',153,'limit'}}|[{'record_field',154,{'atom',154,'used'}}|[{'record_field',155,{'atom',155,'rate'}}|[{'record_field',156,{'atom',156,'entries'}}]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{{'record','state'},[{'record_field',121,{'atom',121,'file'}}|[{'record_field',121,{'atom',121,'dump_vsn'}}|[{'record_field',121,{'atom',121,'wordsize'},{'integer',121,4}}|[{'record_field',121,{'atom',121,'num_atoms'},{'string',121,[117|[110|[107|[110|[111|[119|[110]]]]]]]}}|[{'record_field',121,{'atom',121,'binaries'}}]]]]],[]}]]
'debug'/1 =
    %% Line 130
    fun (_cor0) ->
	do  %% Line 131
	    call 'ttb':'tracer'
		('all', [{'file',[99|[100|[118]]]}])
	    do  %% Line 132
		call 'ttb':'p'
		    ('all', ['call'|['timestamp']])
		do  %% Line 134
		    apply 'tp'/2
			(_cor0, [{'_',[],[{'return_trace'}|[{'message',{'caller'}}]]}])
		    do  %% Line 135
			call 'ttb':'ctp'
			    ('crashdump_viewer', 'stop_debug')
			%% Line 136
			'ok'
'tp'/2 =
    %% Line 137
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{M,F,A}|T],MS> when 'true' ->
	      do  %% Line 138
		  call 'ttb':'tpl'
		      (M, F, A, MS)
		  %% Line 139
		  apply 'tp'/2
		      (T, MS)
	  %% Line 140
	  <[{M,F}|T],MS> when 'true' ->
	      do  %% Line 141
		  call 'ttb':'tpl'
		      (M, F, MS)
		  %% Line 142
		  apply 'tp'/2
		      (T, MS)
	  %% Line 143
	  <[M|T],MS> when 'true' ->
	      do  %% Line 144
		  call 'ttb':'tp'
		      (M, MS)
		  %% Line 145
		  apply 'tp'/2
		      (T, MS)
	  %% Line 146
	  <[],_X_MS> when 'true' ->
	      %% Line 147
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'tp',2}}] )
	    -| ['compiler_generated'] )
	end
'stop_debug'/0 =
    %% Line 148
    fun () ->
	%% Line 149
	call 'ttb':'stop'
	    (['format'])
'start'/0 =
    %% Line 153
    fun () ->
	%% Line 154
	apply 'start'/1
	    ('undefined')
'start'/1 =
    %% Line 155
    fun (_cor0) ->
	%% Line 156
	call 'cdv_wx':'start'
	    (_cor0)
'stop'/0 =
    %% Line 158
    fun () ->
	%% Line 159
	case call 'erlang':'whereis'
		 ('crashdump_viewer_server') of
	  %% Line 160
	  <'undefined'> when 'true' ->
	      %% Line 161
	      'ok'
	  %% Line 162
	  <Pid> when 'true' ->
	      let <Ref> =
		  %% Line 163
		  call 'erlang':'monitor'
		      ('process', Pid)
	      in  do  %% Line 164
		      apply 'cast'/1
			  ('stop')
		      %% Line 165
		      receive
			<{'DOWN',_cor2,'process',_cor3,_cor4}>
			    when let <_cor5> =
				  call 'erlang':'=:='
				      (_cor2, Ref)
			      in  let <_cor6> =
				      call 'erlang':'=:='
					  (_cor3, Pid)
				  in  call 'erlang':'and'
					  (_cor5, _cor6) ->
			    'ok'
		      after 'infinity' ->
			'true'
	end
'script_start'/0 =
    %% Line 171
    fun () ->
	let <_cor0> =
	    %% Line 172
	    ( fun () ->
		  apply 'start'/0
		      ()
	      -| [{'id',{0,0,'-script_start/0-fun-0-'}}] )
	in  do  %% Line 172
		apply 'do_script_start'/1
		    (_cor0)
		%% Line 173
		call 'erlang':'halt'
		    ()
'script_start'/1 =
    %% Line 174
    fun (_cor0) ->
	case _cor0 of
	  <[FileAtom|[]]> when 'true' ->
	      let <File> =
		  %% Line 175
		  call 'erlang':'atom_to_list'
		      (FileAtom)
	      in  do  %% Line 176
		      case call 'filelib':'is_regular'
			       (File) of
			%% Line 177
			<'true'> when 'true' ->
			    let <_cor2> =
				%% Line 178
				( fun () ->
				      apply 'start'/1
					  (File)
				  -| [{'id',{0,0,'-script_start/1-fun-0-'}}] )
			    in  %% Line 178
				apply 'do_script_start'/1
				    (_cor2)
			%% Line 179
			<'false'> when 'true' ->
			    do  %% Line 180
				call 'io':'format'
				    ([99|[100|[118|[32|[101|[114|[114|[111|[114|[58|[32|[116|[104|[101|[32|[103|[105|[118|[101|[110|[32|[102|[105|[108|[101|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[101|[120|[105|[115|[116|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				%% Line 181
				apply 'usage'/0
				    ()
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
		      %% Line 183
		      call 'erlang':'halt'
			  ()
	  %% Line 184
	  <_cor5> when 'true' ->
	      do  %% Line 185
		  apply 'usage'/0
		      ()
		  %% Line 186
		  call 'erlang':'halt'
		      ()
	end
'do_script_start'/1 =
    %% Line 188
    fun (_cor0) ->
	do  %% Line 189
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    %% Line 190
	    case apply _cor0
		     () of
	      %% Line 191
	      <'ok'> when 'true' ->
		  %% Line 192
		  case call 'erlang':'whereis'
			   ('cdv_wx') of
		    %% Line 193
		    <Pid>
			when call 'erlang':'is_pid'
			      (Pid) ->
			do  %% Line 194
			    call 'erlang':'link'
				(Pid)
			    %% Line 195
			    receive
			      %% Line 196
			      <{'EXIT',_cor4,'normal'}>
				  when call 'erlang':'=:='
					(_cor4,
					 Pid) ->
				  %% Line 197
				  'ok'
			      %% Line 198
			      <{'EXIT',_cor5,Reason}>
				  when call 'erlang':'=:='
					(_cor5,
					 Pid) ->
				  %% Line 199
				  call 'io':'format'
				      ([10|[99|[100|[118|[32|[99|[114|[97|[115|[104|[58|[32|[126|[112|[10]]]]]]]]]]]]]]], [Reason|[]])
			    after 'infinity' ->
			      'true'
		    %% Line 201
		    <_cor6> when 'true' ->
			%% Line 202
			call 'io':'format'
			    ([10|[99|[100|[118|[32|[99|[114|[97|[115|[104|[58|[32|[126|[112|[10]]]]]]]]]]]]]]], ['unknown_reason'])
		  end
	      %% Line 204
	      <Error> when 'true' ->
		  %% Line 205
		  call 'io':'format'
		      ([10|[99|[100|[118|[32|[115|[116|[97|[114|[116|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]], [Error|[]])
	    end
'usage'/0 =
    %% Line 208
    fun () ->
	%% Line 209
	call 'io':'format'
	    (%% Line 210
	     [117|[115|[97|[103|[101|[58|[32|[99|[100|[118|[32|[91|[102|[105|[108|[101|[93|[10|[9|[84|[104|[101|[32|[39|[102|[105|[108|[101|[39|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[110|[32|[101|[120|[105|[115|[116|[105|[110|[103|[32|[101|[114|[108|[97|[110|[103|[32|[99|[114|[97|[115|[104|[32|[100|[117|[109|[112|[46|[10|[9|[73|[102|[32|[111|[109|[105|[116|[116|[101|[100|[32|[97|[32|[102|[105|[108|[101|[32|[100|[105|[97|[108|[111|[103|[32|[119|[105|[108|[108|[32|[98|[101|[32|[111|[112|[101|[110|[101|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 213
																																																																															     [])
'start_link'/0 =
    %% Line 220
    fun () ->
	%% Line 221
	case call 'erlang':'whereis'
		 ('crashdump_viewer_server') of
	  %% Line 222
	  <'undefined'> when 'true' ->
	      %% Line 223
	      call 'gen_server':'start_link'
		  ({'local','crashdump_viewer_server'}, 'crashdump_viewer', [], [])
	  %% Line 224
	  <Pid> when 'true' ->
	      %% Line 225
	      {'ok',Pid}
	end
'read_file'/1 =
    %% Line 230
    fun (_cor0) ->
	%% Line 231
	apply 'cast'/1
	    ({'read_file',_cor0})
'general_info'/0 =
    %% Line 236
    fun () ->
	%% Line 237
	apply 'call'/1
	    ('general_info')
'processes'/0 =
    %% Line 238
    fun () ->
	%% Line 239
	apply 'call'/1
	    ('procs_summary')
'ports'/0 =
    %% Line 240
    fun () ->
	%% Line 241
	apply 'call'/1
	    ('ports')
'ets_tables'/1 =
    %% Line 242
    fun (_cor0) ->
	%% Line 243
	apply 'call'/1
	    ({'ets_tables',_cor0})
'internal_ets_tables'/0 =
    %% Line 244
    fun () ->
	%% Line 245
	apply 'call'/1
	    ('internal_ets_tables')
'timers'/1 =
    %% Line 246
    fun (_cor0) ->
	%% Line 247
	apply 'call'/1
	    ({'timers',_cor0})
'funs'/0 =
    %% Line 248
    fun () ->
	%% Line 249
	apply 'call'/1
	    ('funs')
'atoms'/0 =
    %% Line 250
    fun () ->
	%% Line 251
	apply 'call'/1
	    ('atoms')
'dist_info'/0 =
    %% Line 252
    fun () ->
	%% Line 253
	apply 'call'/1
	    ('dist_info')
'node_info'/1 =
    %% Line 254
    fun (_cor0) ->
	%% Line 255
	apply 'call'/1
	    ({'node_info',_cor0})
'loaded_modules'/0 =
    %% Line 256
    fun () ->
	%% Line 257
	apply 'call'/1
	    ('loaded_mods')
'loaded_mod_details'/1 =
    %% Line 258
    fun (_cor0) ->
	%% Line 259
	apply 'call'/1
	    ({'loaded_mod_details',_cor0})
'memory'/0 =
    %% Line 260
    fun () ->
	%% Line 261
	apply 'call'/1
	    ('memory')
'allocated_areas'/0 =
    %% Line 262
    fun () ->
	%% Line 263
	apply 'call'/1
	    ('allocated_areas')
'allocator_info'/0 =
    %% Line 264
    fun () ->
	%% Line 265
	apply 'call'/1
	    ('allocator_info')
'hash_tables'/0 =
    %% Line 266
    fun () ->
	%% Line 267
	apply 'call'/1
	    ('hash_tables')
'index_tables'/0 =
    %% Line 268
    fun () ->
	%% Line 269
	apply 'call'/1
	    ('index_tables')
'proc_details'/1 =
    %% Line 273
    fun (_cor0) ->
	%% Line 274
	apply 'call'/1
	    ({'proc_details',_cor0})
'port'/1 =
    %% Line 278
    fun (_cor0) ->
	%% Line 279
	apply 'call'/1
	    ({'port',_cor0})
'expand_binary'/1 =
    %% Line 284
    fun (_cor0) ->
	%% Line 285
	apply 'call'/1
	    ({'expand_binary',_cor0})
'init'/1 =
    %% Line 299
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 300
		  call 'ets':'new'
		      ('cdv_dump_index_table', ['ordered_set'|['named_table'|['public']]])
		  do  %% Line 301
		      call 'ets':'new'
			  ('cdv_reg_proc_table', ['ordered_set'|['named_table'|['public']]])
		      %% Line 302
		      {'ok',{'state','undefined','undefined',4,[117|[110|[107|[110|[111|[119|[110]]]]]]],'undefined'}}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 314
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'general_info',_X_From,State = {'state',File,_cor76,_cor77,_cor78,_cor79}> when 'true' ->
	      let <GenInfo> =
		  %% Line 315
		  apply 'general_info'/1
		      (File)
	      in  %% Line 316
		  ( case GenInfo of
		      ( <( {'general_info',_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_rec0,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <WS> =
				%% Line 317
				apply 'parse_vsn_str'/2
				    (_cor82, 4)
			    in  let <_cor11> =
				    %% Line 318
				    case call 'erlang':'get'
					     ('truncated') of
				      %% Line 319
				      <'true'> when 'true' ->
					  [[87|[65|[82|[78|[73|[78|[71|[58|[32|[84|[104|[101|[32|[99|[114|[97|[115|[104|[32|[100|[117|[109|[112|[32|[105|[115|[32|[116|[114|[117|[110|[99|[97|[116|[101|[100|[46|[32|[83|[111|[109|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[109|[105|[103|[104|[116|[32|[98|[101|[32|[109|[105|[115|[115|[105|[110|[103|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
				      %% Line 321
				      <'false'> when 'true' ->
					  []
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor10})
					-| ['compiler_generated'] )
				    end
				in  let <_cor14> =
					%% Line 323
					call 'erlang':'setelement'
					    (5, State, _rec0)
				    in  let <_cor16> =
					    %% Line 323
					    call 'erlang':'setelement'
						(4, _cor14, WS)
					in  %% Line 323
					    {'reply',{'ok',GenInfo,_cor11},_cor16}
			-| ['compiler_generated'] )
		      ( <_cor93> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','general_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 324
	  <{'expand_binary',{Offset,Size,Pos}},_X_From,State = {'state',File,_cor114,_cor115,_cor116,_cor117}> when 'true' ->
	      let <Fd> =
		  %% Line 325
		  apply 'open'/1
		      (File)
	      in  do  %% Line 326
		      apply 'pos_bof'/2
			  (Fd, Pos)
		      let <_cor18> =
			  %% Line 327
			  apply 'val'/1
			      (Fd)
		      in  %% Line 327
			  case apply 'get_binary'/3
				   (Offset, Size, _cor18) of
			    <{Bin,_X_Line}> when 'true' ->
				do  %% Line 328
				    apply 'close'/1
					(Fd)
				    %% Line 329
				    {'reply',{'ok',Bin},State}
			    ( <_cor19> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor19})
			      -| ['compiler_generated'] )
			  end
	  %% Line 330
	  <'procs_summary',_X_From,State = {'state',File,_cor118,WS,_cor119,_cor120}> when 'true' ->
	      let <TW> =
		  %% Line 331
		  apply 'truncated_warning'/1
		      (['proc'])
	      in  let <Procs> =
		      %% Line 332
		      apply 'procs_summary'/2
			  (File, WS)
		  in  %% Line 333
		      {'reply',{'ok',Procs,TW},State}
	  %% Line 334
	  <{'proc_details',Pid},_X_From,State = %% Line 335
						{'state',File,DumpVsn,WS,_cor121,B}> when 'true' ->
	      let <_cor23> =
		  %% Line 337
		  case apply 'get_proc_details'/5
			   (File, Pid, WS, DumpVsn, B) of
		    %% Line 338
		    <{'ok',Proc,TW}> when 'true' ->
			%% Line 339
			{'ok',Proc,TW}
		    %% Line 340
		    <Other> when 'true' ->
			%% Line 341
			{'error',Other}
		  end
	      in  %% Line 343
		  {'reply',_cor23,State}
	  %% Line 344
	  <{'port',Id},_X_From,State = {'state',File,_cor122,_cor123,_cor124,_cor125}> when 'true' ->
	      let <_cor27> =
		  %% Line 346
		  case apply 'get_port'/2
			   (File, Id) of
		    %% Line 347
		    <{'ok',PortInfo}> when 'true' ->
			let <TW> =
			    %% Line 348
			    apply 'truncated_warning'/1
				([{'port',Id}|[]])
			in  %% Line 349
			    {'ok',PortInfo,TW}
		    %% Line 350
		    <Other> when 'true' ->
			%% Line 351
			{'error',Other}
		  end
	      in  %% Line 353
		  {'reply',_cor27,State}
	  %% Line 354
	  <'ports',_X_From,State = {'state',File,_cor126,_cor127,_cor128,_cor129}> when 'true' ->
	      let <TW> =
		  %% Line 355
		  apply 'truncated_warning'/1
		      (['port'])
	      in  let <Ports> =
		      %% Line 356
		      apply 'get_ports'/1
			  (File)
		  in  %% Line 357
		      {'reply',{'ok',Ports,TW},State}
	  %% Line 358
	  <{'ets_tables',Pid0},_X_From,State = {'state',File,_cor130,WS,_cor131,_cor132}> when 'true' ->
	      let <_cor32> =
		  %% Line 360
		  case Pid0 of
		    %% Line 361
		    <'all'> when 'true' ->
			'$2'
		    %% Line 362
		    <_cor133> when 'true' ->
			Pid0
		  end
	      in  let <TW> =
		      %% Line 364
		      apply 'truncated_warning'/1
			  (['ets'])
		  in  let <Ets> =
			  %% Line 365
			  apply 'get_ets_tables'/3
			      (File, _cor32, WS)
		      in  %% Line 366
			  {'reply',{'ok',Ets,TW},State}
	  %% Line 367
	  <'internal_ets_tables',_X_From,State = {'state',File,_cor134,WS,_cor135,_cor136}> when 'true' ->
	      let <InternalEts> =
		  %% Line 368
		  apply 'get_internal_ets_tables'/2
		      (File, WS)
	      in  let <TW> =
		      %% Line 369
		      apply 'truncated_warning'/1
			  (['internal_ets'])
		  in  %% Line 370
		      {'reply',{'ok',InternalEts,TW},State}
	  %% Line 371
	  <{'timers',Pid0},_X_From,State = {'state',File,_cor137,_cor138,_cor139,_cor140}> when 'true' ->
	      let <_cor39> =
		  %% Line 373
		  case Pid0 of
		    %% Line 374
		    <'all'> when 'true' ->
			'$2'
		    %% Line 375
		    <_cor141> when 'true' ->
			Pid0
		  end
	      in  let <TW> =
		      %% Line 377
		      apply 'truncated_warning'/1
			  (['timer'])
		  in  let <Timers> =
			  %% Line 378
			  apply 'get_timers'/2
			      (File, _cor39)
		      in  %% Line 379
			  {'reply',{'ok',Timers,TW},State}
	  %% Line 380
	  <'dist_info',_X_From,State = {'state',File,_cor142,_cor143,_cor144,_cor145}> when 'true' ->
	      let <TW> =
		  %% Line 381
		  apply 'truncated_warning'/1
		      (['visible_node'|['hidden_node'|['not_connected']]])
	      in  let <Nods> =
		      %% Line 382
		      apply 'nods'/1
			  (File)
		  in  %% Line 383
		      {'reply',{'ok',Nods,TW},State}
	  %% Line 384
	  <{'node_info',Channel},_X_From,State = {'state',File,_cor146,_cor147,_cor148,_cor149}> when 'true' ->
	      let <_cor47> =
		  %% Line 386
		  case apply 'get_node'/2
			   (File, Channel) of
		    %% Line 387
		    <{'ok',Nod}> when 'true' ->
			let <TW> =
			    %% Line 388
			    apply 'truncated_warning'/1
				(['visible_node'|['hidden_node'|['not_connected']]])
			in  %% Line 391
			    {'ok',Nod,TW}
		    %% Line 392
		    <{'error',Other}> when 'true' ->
			%% Line 393
			{'error',Other}
		    ( <_cor46> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor46})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 395
		  {'reply',_cor47,State}
	  %% Line 396
	  <'loaded_mods',_X_From,State = {'state',File,_cor150,_cor151,_cor152,_cor153}> when 'true' ->
	      let <TW> =
		  %% Line 397
		  apply 'truncated_warning'/1
		      (['mod'])
	      in  %% Line 398
		  case apply 'loaded_mods'/1
			   (File) of
		    <{_X_CC,_X_OC,Mods}> when 'true' ->
			%% Line 399
			{'reply',{'ok',Mods,TW},State}
		    ( <_cor50> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor50})
		      -| ['compiler_generated'] )
		  end
	  %% Line 400
	  <{'loaded_mod_details',Mod},_X_From,State = {'state',File,_cor154,_cor155,_cor156,_cor157}> when 'true' ->
	      let <TW> =
		  %% Line 401
		  apply 'truncated_warning'/1
		      ([{'mod',Mod}|[]])
	      in  let <ModInfo> =
		      %% Line 402
		      apply 'get_loaded_mod_details'/2
			  (File, Mod)
		  in  %% Line 403
		      {'reply',{'ok',ModInfo,TW},State}
	  %% Line 404
	  <'funs',_X_From,State = {'state',File,_cor158,_cor159,_cor160,_cor161}> when 'true' ->
	      let <TW> =
		  %% Line 405
		  apply 'truncated_warning'/1
		      (['fu'])
	      in  let <Funs> =
		      %% Line 406
		      apply 'funs'/1
			  (File)
		  in  %% Line 407
		      {'reply',{'ok',Funs,TW},State}
	  %% Line 408
	  <'atoms',_X_From,State = {'state',File,_cor162,_cor163,NumAtoms0,_cor164}> when 'true' ->
	      let <TW> =
		  %% Line 409
		  apply 'truncated_warning'/1
		      (['atoms'])
	      in  let <_cor60> =
		      %% Line 410
		      try
			  call 'erlang':'list_to_integer'
			      (NumAtoms0)
		      of <_cor56> ->
			  _cor56
		      catch <_cor59,_cor58,_cor57> ->
			  case <_cor59,_cor58,_cor57> of
			    <'error','badarg',_cor165> when 'true' ->
				-1
			    ( <_cor59,_cor58,_cor57> when 'true' ->
				  primop 'raise'
				      (_cor57, _cor58)
			      -| ['compiler_generated'] )
			  end
		  in  let <Atoms> =
			  %% Line 411
			  apply 'atoms'/2
			      (File, _cor60)
		      in  %% Line 412
			  {'reply',{'ok',Atoms,TW},State}
	  %% Line 413
	  <'memory',_X_From,State = {'state',File,_cor166,_cor167,_cor168,_cor169}> when 'true' ->
	      let <Memory> =
		  %% Line 414
		  apply 'memory'/1
		      (File)
	      in  let <TW> =
		      %% Line 415
		      apply 'truncated_warning'/1
			  (['memory'])
		  in  %% Line 416
		      {'reply',{'ok',Memory,TW},State}
	  %% Line 417
	  <'allocated_areas',_X_From,State = {'state',File,_cor170,_cor171,_cor172,_cor173}> when 'true' ->
	      let <AllocatedAreas> =
		  %% Line 418
		  apply 'allocated_areas'/1
		      (File)
	      in  let <TW> =
		      %% Line 419
		      apply 'truncated_warning'/1
			  (['allocated_areas'])
		  in  %% Line 420
		      {'reply',{'ok',AllocatedAreas,TW},State}
	  %% Line 421
	  <'allocator_info',_X_From,State = {'state',File,_cor174,_cor175,_cor176,_cor177}> when 'true' ->
	      let <SlAlloc> =
		  %% Line 422
		  apply 'allocator_info'/1
		      (File)
	      in  let <TW> =
		      %% Line 423
		      apply 'truncated_warning'/1
			  (['allocator'])
		  in  %% Line 424
		      {'reply',{'ok',SlAlloc,TW},State}
	  %% Line 425
	  <'hash_tables',_X_From,State = {'state',File,_cor178,_cor179,_cor180,_cor181}> when 'true' ->
	      let <HashTables> =
		  %% Line 426
		  apply 'hash_tables'/1
		      (File)
	      in  let <TW> =
		      %% Line 427
		      apply 'truncated_warning'/1
			  (['hash_table'|['index_table']])
		  in  %% Line 428
		      {'reply',{'ok',HashTables,TW},State}
	  %% Line 429
	  <'index_tables',_X_From,State = {'state',File,_cor182,_cor183,_cor184,_cor185}> when 'true' ->
	      let <IndexTables> =
		  %% Line 430
		  apply 'index_tables'/1
		      (File)
	      in  let <TW> =
		      %% Line 431
		      apply 'truncated_warning'/1
			  (['hash_table'|['index_table']])
		  in  %% Line 432
		      {'reply',{'ok',IndexTables,TW},State}
	  ( <_cor75,_cor74,_cor73> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor75,_cor74,_cor73})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 443
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'read_file',File},_X_State> when 'true' ->
	      %% Line 444
	      case apply 'do_read_file'/1
		       (File) of
		%% Line 445
		<{'ok',Binaries,DumpVsn}> when 'true' ->
		    do  %% Line 446
			call 'observer_lib':'report_progress'
			    ({'ok','done'})
			%% Line 447
			{'noreply',{'state',File,DumpVsn,4,[117|[110|[107|[110|[111|[119|[110]]]]]]],Binaries}}
		%% Line 448
		<Error> when 'true' ->
		    do  %% Line 449
			apply 'end_progress'/1
			    (Error)
			%% Line 450
			{'noreply',{'state','undefined','undefined',4,[117|[110|[107|[110|[111|[119|[110]]]]]]],'undefined'}}
	      end
	  %% Line 452
	  <'stop',State> when 'true' ->
	      %% Line 453
	      {'stop','normal',State}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'handle_cast',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 463
    fun (_cor1,_cor0) ->
	%% Line 464
	{'noreply',_cor0}
'terminate'/2 =
    %% Line 471
    fun (_cor1,_cor0) ->
	%% Line 472
	'ok'
'code_change'/3 =
    %% Line 479
    fun (_cor2,_cor1,_cor0) ->
	%% Line 480
	{'ok',_cor1}
'call'/1 =
    %% Line 485
    fun (_cor0) ->
	%% Line 486
	call 'gen_server':'call'
	    ('crashdump_viewer_server', _cor0, 3600000)
'cast'/1 =
    %% Line 488
    fun (_cor0) ->
	%% Line 489
	call 'gen_server':'cast'
	    ('crashdump_viewer_server', _cor0)
'unexpected'/3 =
    %% Line 491
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Fd,{'eof',_X_LastLine},_X_Where> when 'true' ->
	      %% Line 492
	      'ok'
	  %% Line 493
	  <Fd,{'part',What},Where> when 'true' ->
	      do  %% Line 494
		  apply 'skip_rest_of_line'/1
		      (Fd)
		  %% Line 495
		  call 'io':'format'
		      ([87|[65|[82|[78|[73|[78|[71|[58|[32|[70|[111|[117|[110|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[108|[105|[110|[101|[32|[105|[110|[32|[126|[115|[58|[126|[110|[126|[115|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Where|[What|[]]])
	  %% Line 496
	  <_X_Fd,What,Where> when 'true' ->
	      %% Line 497
	      call 'io':'format'
		  ([87|[65|[82|[78|[73|[78|[71|[58|[32|[70|[111|[117|[110|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[108|[105|[110|[101|[32|[105|[110|[32|[126|[115|[58|[126|[110|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Where|[What|[]]])
	end
'truncated_warning'/1 =
    %% Line 499
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 500
	      []
	  %% Line 501
	  <[Tag|Tags]> when 'true' ->
	      %% Line 502
	      case apply 'truncated_here'/1
		       (Tag) of
		%% Line 503
		<'true'> when 'true' ->
		    apply 'truncated_warning'/0
			()
		%% Line 504
		<'false'> when 'true' ->
		    apply 'truncated_warning'/1
			(Tags)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'truncated_warning',1}}] )
	    -| ['compiler_generated'] )
	end
'truncated_warning'/0 =
    %% Line 506
    fun () ->
	%% Line 507
	[[87|[65|[82|[78|[73|[78|[71|[58|[32|[84|[104|[101|[32|[99|[114|[97|[115|[104|[32|[100|[117|[109|[112|[32|[105|[115|[32|[116|[114|[117|[110|[99|[97|[116|[101|[100|[32|[104|[101|[114|[101|[46|[32|[83|[111|[109|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[109|[105|[103|[104|[116|[32|[98|[101|[32|[109|[105|[115|[115|[105|[110|[103|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'truncated_here'/1 =
    %% Line 510
    fun (_cor0) ->
	%% Line 511
	case call 'erlang':'get'
		 ('truncated') of
	  %% Line 512
	  <'true'> when 'true' ->
	      %% Line 513
	      case call 'erlang':'get'
		       ('last_tag') of
		%% Line 514
		<_cor4>
		    when call 'erlang':'=:='
			  (_cor4,
			   _cor0) ->
		    %% Line 515
		    'true'
		%% Line 516
		<{_cor5,_X_Id}>
		    when call 'erlang':'=:='
			  (_cor5,
			   _cor0) ->
		    %% Line 517
		    'true'
		%% Line 518
		<_X_LastTag> when 'true' ->
		    %% Line 519
		    apply 'truncated_earlier'/1
			(_cor0)
	      end
	  %% Line 521
	  <'false'> when 'true' ->
	      %% Line 522
	      'false'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'truncated_earlier'/1 =
    %% Line 529
    fun (_cor0) ->
	case _cor0 of
	  <{'proc',Pid}> when 'true' ->
	      let <_cor1> =
		  %% Line 530
		  call 'erlang':'get'
		      ('truncated_proc')
	      in  %% Line 530
		  apply 'compare_pid'/2
		      (Pid, _cor1)
	  %% Line 531
	  <_X_Tag> when 'true' ->
	      %% Line 532
	      'false'
	end
'compare_pid'/2 =
    %% Line 534
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[60|Id],[60|OtherId]> when 'true' ->
	      %% Line 535
	      call 'erlang':'>='
		  (Id, OtherId)
	  %% Line 536
	  <_cor4,_cor5> when 'true' ->
	      %% Line 537
	      'false'
	end
'open'/1 =
    %% Line 539
    fun (_cor0) ->
	%% Line 540
	case call 'file':'open'
		 (_cor0, ['read'|['read_ahead'|['raw'|['binary']]]]) of
	  <{'ok',Fd}> when 'true' ->
	      %% Line 541
	      Fd
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 542
    fun (_cor0) ->
	do  %% Line 543
	    call 'erlang':'erase'
		('chunk')
	    %% Line 544
	    call 'file':'close'
		(_cor0)
'pos_bof'/2 =
    %% Line 549
    fun (_cor1,_cor0) ->
	%% Line 550
	case call 'erlang':'get'
		 ('pos') of
	  %% Line 551
	  <'undefined'> when 'true' ->
	      %% Line 552
	      apply 'hard_pos_bof'/2
		  (_cor1, _cor0)
	  %% Line 553
	  <OldPos>
	      when call 'erlang':'>='
		    (_cor0,
		     OldPos) ->
	      %% Line 554
	      case call 'erlang':'get'
		       ('chunk') of
		%% Line 555
		<'undefined'> when 'true' ->
		    %% Line 556
		    apply 'hard_pos_bof'/2
			(_cor1, _cor0)
		%% Line 557
		<Chunk> when 'true' ->
		    let <ChunkSize> =
			%% Line 558
			call 'erlang':'byte_size'
			    (Chunk)
		    in  let <ChunkEnd> =
			    %% Line 559
			    call 'erlang':'+'
				(OldPos, ChunkSize)
			in  %% Line 560
			    case <> of
			      <>
				  when call 'erlang':'=<'
					(_cor0,
					 ChunkEnd) ->
				  let <Diff> =
				      %% Line 561
				      call 'erlang':'-'
					  (_cor0, OldPos)
				  in  do  %% Line 562
					  call 'erlang':'put'
					      ('pos', _cor0)
					  let <_cor5> =
					      %% Line 563
					      call 'erlang':'-'
						  (ChunkEnd, _cor0)
					  in  let <_cor6> =
						  %% Line 563
						  call 'binary':'part'
						      (Chunk, Diff, _cor5)
					      in  %% Line 563
						  call 'erlang':'put'
						      ('chunk', _cor6)
			      %% Line 564
			      <> when 'true' ->
				  %% Line 565
				  apply 'hard_pos_bof'/2
				      (_cor1, _cor0)
			    end
	      end
	  %% Line 568
	  <_cor11> when 'true' ->
	      %% Line 569
	      apply 'hard_pos_bof'/2
		  (_cor1, _cor0)
	end
'hard_pos_bof'/2 =
    %% Line 572
    fun (_cor1,_cor0) ->
	do  %% Line 573
	    apply 'reset_chunk'/0
		()
	    %% Line 574
	    call 'file':'position'
		(_cor1, {'bof',_cor0})
'get_chunk'/1 =
    %% Line 577
    fun (_cor0) ->
	%% Line 578
	case call 'erlang':'erase'
		 ('chunk') of
	  %% Line 579
	  <'undefined'> when 'true' ->
	      %% Line 580
	      case apply 'read'/1
		       (_cor0) of
		%% Line 581
		<'eof'> when 'true' ->
		    do  %% Line 582
			apply 'put_pos'/1
			    (_cor0)
			%% Line 583
			'eof'
		%% Line 584
		<Other> when 'true' ->
		    %% Line 585
		    Other
	      end
	  %% Line 587
	  <Bin> when 'true' ->
	      %% Line 588
	      {'ok',Bin}
	end
'progress_read'/1 =
    %% Line 592
    fun (_cor0) ->
	let <R,Bytes> =
	    %% Line 594
	    case apply 'read'/1
		     (_cor0) of
	      %% Line 595
	      <{'ok',Bin}> when 'true' ->
		  let <_cor1> =
		      %% Line 596
		      call 'erlang':'byte_size'
			  (Bin)
		  in  %% Line 596
		      <{'ok',Bin},_cor1>
	      %% Line 597
	      <Other> when 'true' ->
		  %% Line 598
		  <Other,0>
	    end
	in  do  %% Line 600
		apply 'update_progress'/1
		    (Bytes)
		%% Line 601
		R
'read'/1 =
    %% Line 603
    fun (_cor0) ->
	%% Line 604
	call 'file':'read'
	    (_cor0, 1000)
'put_chunk'/2 =
    %% Line 606
    fun (_cor1,_cor0) ->
	%% Line 607
	case call 'file':'position'
		 (_cor1, 'cur') of
	  <{'ok',Pos0}> when 'true' ->
	      let <_cor3> =
		  %% Line 608
		  call 'erlang':'byte_size'
		      (_cor0)
	      in  let <Pos> =
		      %% Line 608
		      call 'erlang':'-'
			  (Pos0, _cor3)
		  in  do  %% Line 609
			  call 'erlang':'put'
			      ('chunk', _cor0)
			  %% Line 610
			  call 'erlang':'put'
			      ('pos', Pos)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'put_pos'/1 =
    %% Line 612
    fun (_cor0) ->
	%% Line 613
	case call 'file':'position'
		 (_cor0, 'cur') of
	  <{'ok',Pos}> when 'true' ->
	      %% Line 614
	      call 'erlang':'put'
		  ('pos', Pos)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'reset_chunk'/0 =
    %% Line 616
    fun () ->
	do  %% Line 617
	    call 'erlang':'erase'
		('chunk')
	    %% Line 618
	    call 'erlang':'erase'
		('pos')
'line_head'/1 =
    %% Line 620
    fun (_cor0) ->
	%% Line 621
	case apply 'get_chunk'/1
		 (_cor0) of
	  %% Line 622
	  <{'ok',Bin}> when 'true' ->
	      apply 'line_head'/4
		  (_cor0, Bin, [], 0)
	  %% Line 623
	  <'eof'> when 'true' ->
	      {'eof',[]}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'line_head'/4 =
    %% Line 625
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,( _cor2
		      -| ['reuse_for_context'] ),_cor1,_cor0> of
	  <Fd,Bin,Acc,100> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  do  %% Line 626
		      apply 'put_chunk'/2
			  (Fd, Bin)
		      let <_cor4> =
			  %% Line 627
			  call 'lists':'reverse'
			      (Acc)
		      in  %% Line 627
			  {'part',_cor4}
	  %% Line 628
	  <Fd,#{#<10>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,_X_N> when 'true' ->
	      do  %% Line 629
		  apply 'put_chunk'/2
		      (Fd, Bin)
		  %% Line 630
		  call 'lists':'reverse'
		      (Acc)
	  %% Line 631
	  <Fd,#{#<58>(8,1,'integer',['unsigned'|['big']]),
		#<13>(8,1,'integer',['unsigned'|['big']]),
		#<10>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,_X_N> when 'true' ->
	      do  %% Line 632
		  apply 'put_chunk'/2
		      (Fd, Bin)
		  %% Line 633
		  call 'lists':'reverse'
		      (Acc)
	  %% Line 634
	  <Fd,#{#<58>(8,1,'integer',['unsigned'|['big']]),
		#<13>(8,1,'integer',['unsigned'|['big']])}#,Acc,N> when 'true' ->
	      %% Line 635
	      case apply 'get_chunk'/1
		       (Fd) of
		%% Line 636
		<{'ok',Bin}> when 'true' ->
		    let <_cor5> =
			#{#<58>(8,1,'integer',['unsigned'|['big']]),
			  #<Bin>('all',8,'binary',['unsigned'|['big']])}#
		    in  apply 'line_head'/4
			    (Fd, _cor5, Acc, N)
		%% Line 637
		<'eof'> when 'true' ->
		    let <_cor6> =
			call 'lists':'reverse'
			    (Acc)
		    in  {'eof',_cor6}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 639
	  <Fd,#{#<58>(8,1,'integer',['unsigned'|['big']])}#,Acc,N> when 'true' ->
	      %% Line 640
	      case apply 'get_chunk'/1
		       (Fd) of
		%% Line 641
		<{'ok',Bin}> when 'true' ->
		    let <_cor8> =
			#{#<58>(8,1,'integer',['unsigned'|['big']]),
			  #<Bin>('all',8,'binary',['unsigned'|['big']])}#
		    in  apply 'line_head'/4
			    (Fd, _cor8, Acc, N)
		%% Line 642
		<'eof'> when 'true' ->
		    let <_cor9> =
			call 'lists':'reverse'
			    (Acc)
		    in  {'eof',_cor9}
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 644
	  <Fd,#{#<58>(8,1,'integer',['unsigned'|['big']]),
		#<Space>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,_X_N>
	      when let <_cor11> =
		    call 'erlang':'=:='
			(Space, 32)
		in  let <_cor12> =
			call 'erlang':'=:='
			    (Space, 10)
		    in  call 'erlang':'or'
			    (_cor11, _cor12) ->
	      do  %% Line 645
		  apply 'put_chunk'/2
		      (Fd, Bin)
		  %% Line 646
		  call 'lists':'reverse'
		      (Acc)
	  %% Line 647
	  <Fd,#{#<58>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,_X_N> when 'true' ->
	      do  %% Line 648
		  apply 'put_chunk'/2
		      (Fd, Bin)
		  %% Line 649
		  call 'lists':'reverse'
		      (Acc)
	  %% Line 650
	  <Fd,#{#<13>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,N> when 'true' ->
	      let <_cor13> =
		  %% Line 651
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 651
		  apply 'line_head'/4
		      (Fd, Bin, Acc, _cor13)
	  %% Line 652
	  <Fd,#{#<Char>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,N> when 'true' ->
	      let <_cor14> =
		  %% Line 653
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 653
		  apply 'line_head'/4
		      (Fd, Bin, [Char|Acc], _cor14)
	  %% Line 654
	  <Fd,#{}#,Acc,N> when 'true' ->
	      %% Line 655
	      case apply 'get_chunk'/1
		       (Fd) of
		%% Line 656
		<{'ok',Bin}> when 'true' ->
		    apply 'line_head'/4
			(Fd, Bin, Acc, N)
		%% Line 657
		<'eof'> when 'true' ->
		    let <_cor15> =
			call 'lists':'reverse'
			    (Acc)
		    in  {'eof',_cor15}
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor19)
		    ( primop 'match_fail'
			  ({'function_clause',_cor20,_cor19,_cor18,_cor17})
		      -| [{'function_name',{'line_head',4}}] )
	    -| ['compiler_generated'] )
	end
'skip_rest_of_line'/1 =
    %% Line 660
    fun (_cor0) ->
	%% Line 661
	case apply 'get_chunk'/1
		 (_cor0) of
	  %% Line 662
	  <{'ok',Bin}> when 'true' ->
	      apply 'skip'/2
		  (_cor0, Bin)
	  %% Line 663
	  <'eof'> when 'true' ->
	      'ok'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'skip'/2 =
    %% Line 665
    fun (_cor1,_cor0) ->
	case <_cor1,( _cor0
		      -| ['reuse_for_context'] )> of
	  <Fd,#{#<10>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      do  %% Line 666
		  apply 'put_chunk'/2
		      (Fd, Bin)
		  %% Line 667
		  'ok'
	  %% Line 668
	  <Fd,#{#<_X_Char>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 669
	      apply 'skip'/2
		  (Fd, Bin)
	  %% Line 670
	  <Fd,#{}#> when 'true' ->
	      %% Line 671
	      case apply 'get_chunk'/1
		       (Fd) of
		%% Line 672
		<{'ok',Bin}> when 'true' ->
		    apply 'skip'/2
			(Fd, Bin)
		%% Line 673
		<'eof'> when 'true' ->
		    'ok'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor3)
		    ( primop 'match_fail'
			  ({'function_clause',_cor4,_cor3})
		      -| [{'function_name',{'skip',2}}] )
	    -| ['compiler_generated'] )
	end
'val'/1 =
    %% Line 677
    fun (_cor0) ->
	%% Line 678
	case apply 'get_rest_of_line'/1
		 (_cor0) of
	  %% Line 679
	  <{'eof',[]}> when 'true' ->
	      [45|[49]]
	  %% Line 680
	  <[]> when 'true' ->
	      [45|[49]]
	  %% Line 681
	  <{'eof',Val}> when 'true' ->
	      Val
	  %% Line 682
	  <Val> when 'true' ->
	      Val
	end
'get_rest_of_line'/1 =
    %% Line 685
    fun (_cor0) ->
	%% Line 686
	case apply 'get_chunk'/1
		 (_cor0) of
	  %% Line 687
	  <{'ok',Bin}> when 'true' ->
	      apply 'get_rest_of_line_1'/3
		  (_cor0, Bin, [])
	  %% Line 688
	  <'eof'> when 'true' ->
	      {'eof',[]}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'get_rest_of_line_1'/3 =
    %% Line 691
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,( _cor1
		      -| ['reuse_for_context'] ),_cor0> of
	  <Fd,#{#<10>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      do  %% Line 692
		  apply 'put_chunk'/2
		      (Fd, Bin)
		  %% Line 693
		  call 'lists':'reverse'
		      (Acc)
	  %% Line 694
	  <Fd,#{#<13>(8,1,'integer',['unsigned'|['big']]),
		#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 695
	      apply 'get_rest_of_line_1'/3
		  (Fd, Rest, Acc)
	  %% Line 696
	  <Fd,#{#<Char>(8,1,'integer',['unsigned'|['big']]),
		#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 697
	      apply 'get_rest_of_line_1'/3
		  (Fd, Rest, [Char|Acc])
	  %% Line 698
	  <Fd,#{}#,Acc> when 'true' ->
	      %% Line 699
	      case apply 'get_chunk'/1
		       (Fd) of
		%% Line 700
		<{'ok',Bin}> when 'true' ->
		    apply 'get_rest_of_line_1'/3
			(Fd, Bin, Acc)
		%% Line 701
		<'eof'> when 'true' ->
		    let <_cor3> =
			call 'lists':'reverse'
			    (Acc)
		    in  {'eof',_cor3}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor6)
		    ( primop 'match_fail'
			  ({'function_clause',_cor7,_cor6,_cor5})
		      -| [{'function_name',{'get_rest_of_line_1',3}}] )
	    -| ['compiler_generated'] )
	end
'get_lines_to_empty'/1 =
    %% Line 704
    fun (_cor0) ->
	%% Line 705
	case apply 'get_chunk'/1
		 (_cor0) of
	  %% Line 706
	  <{'ok',Bin}> when 'true' ->
	      %% Line 707
	      apply 'get_lines_to_empty'/4
		  (_cor0, Bin, [], [])
	  %% Line 708
	  <'eof'> when 'true' ->
	      %% Line 709
	      []
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'get_lines_to_empty'/4 =
    %% Line 711
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,( _cor2
		      -| ['reuse_for_context'] ),_cor1,_cor0> of
	  <Fd,#{#<10>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,[],Lines> when 'true' ->
	      do  %% Line 712
		  apply 'put_chunk'/2
		      (Fd, Bin)
		  %% Line 713
		  call 'lists':'reverse'
		      (Lines)
	  %% Line 714
	  <Fd,#{#<10>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,Lines> when 'true' ->
	      let <_cor4> =
		  %% Line 715
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 715
		  apply 'get_lines_to_empty'/4
		      (Fd, Bin, [], [_cor4|Lines])
	  %% Line 716
	  <Fd,#{#<13>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,Lines> when 'true' ->
	      %% Line 717
	      apply 'get_lines_to_empty'/4
		  (Fd, Bin, Acc, Lines)
	  %% Line 718
	  <Fd,#{#<32>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,[],Lines> when 'true' ->
	      %% Line 719
	      apply 'get_lines_to_empty'/4
		  (Fd, Bin, [], Lines)
	  %% Line 720
	  <Fd,#{#<Char>(8,1,'integer',['unsigned'|['big']]),
		#<Bin>('all',8,'binary',['unsigned'|['big']])}#,Acc,Lines> when 'true' ->
	      %% Line 721
	      apply 'get_lines_to_empty'/4
		  (Fd, Bin, [Char|Acc], Lines)
	  %% Line 722
	  <Fd,#{}#,Acc,Lines> when 'true' ->
	      %% Line 723
	      case apply 'get_chunk'/1
		       (Fd) of
		%% Line 724
		<{'ok',Bin}> when 'true' ->
		    %% Line 725
		    apply 'get_lines_to_empty'/4
			(Fd, Bin, Acc, Lines)
		%% Line 726
		<'eof'> when 'true' ->
		    let <_cor5> =
			%% Line 727
			call 'lists':'reverse'
			    (Acc)
		    in  %% Line 727
			call 'lists':'reverse'
			    (Lines, [_cor5|[]])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor9)
		    ( primop 'match_fail'
			  ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		      -| [{'function_name',{'get_lines_to_empty',4}}] )
	    -| ['compiler_generated'] )
	end
'split'/1 =
    %% Line 730
    fun (_cor0) ->
	%% Line 731
	apply 'split'/3
	    (32, _cor0, [])
'split'/2 =
    %% Line 732
    fun (_cor1,_cor0) ->
	%% Line 733
	apply 'split'/3
	    (_cor1, _cor0, [])
'split'/3 =
    %% Line 734
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Char,[_cor10|Str],Acc>
	      when call 'erlang':'=:='
		    (_cor10,
		     Char) ->
	      let <_cor3> =
		  %% Line 735
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 735
		  {_cor3,Str}
	  %% Line 736
	  <_X_Char,[13|[10|Str]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 737
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 737
		  {_cor4,Str}
	  %% Line 738
	  <_X_Char,[10|Str],Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 739
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 739
		  {_cor5,Str}
	  %% Line 740
	  <Char,[H|T],Acc> when 'true' ->
	      %% Line 741
	      apply 'split'/3
		  (Char, T, [H|Acc])
	  %% Line 742
	  <_X_Char,[],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 743
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 743
		  {_cor6,[]}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_vsn_str'/2 =
    %% Line 747
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],WS> when 'true' ->
	      %% Line 748
	      WS
	  %% Line 749
	  <Str,WS> when 'true' ->
	      %% Line 750
	      case Str of
		%% Line 751
		<[91|[54|[52|[45|[98|[105|[116|[93|_X_Rest]]]]]]]]> when 'true' ->
		    %% Line 752
		    8
		%% Line 753
		<[_X_Char|Rest]> when 'true' ->
		    %% Line 754
		    apply 'parse_vsn_str'/2
			(Rest, WS)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'do_read_file'/1 =
    %% Line 763
    fun (_cor0) ->
	%% Line 764
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 765
	  <{'ok',{'file_info',%% Line 767
			      Size,'regular',%% Line 766
					     FileA,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}}>
	      when let <_cor1> =
		    %% Line 767
		    call 'erlang':'=:='
			(FileA, 'read')
		in  let <_cor2> =
			%% Line 767
			call 'erlang':'=:='
			    (FileA, 'read_write')
		    in  %% Line 767
			call 'erlang':'or'
			    (_cor1, _cor2) ->
	      let <Fd> =
		  %% Line 768
		  apply 'open'/1
		      (_cor0)
	      in  do  %% Line 769
		      apply 'init_progress'/2
			  ([82|[101|[97|[100|[105|[110|[103|[32|[102|[105|[108|[101]]]]]]]]]]]], Size)
		      %% Line 770
		      case apply 'progress_read'/1
			       (Fd) of
			%% Line 771
			<{'ok',#{#<61>(8,1,'integer',['unsigned'|['big']]),
				 #<TagAndRest>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
			    %% Line 772
			    case apply 'tag'/3
				     (Fd, TagAndRest, 1) of
			      <{Tag,Id,Rest,N1}> when 'true' ->
				  %% Line 773
				  case Tag of
				    %% Line 774
				    <'erl_crash_dump'> when 'true' ->
					do  %% Line 775
					    apply 'reset_index_table'/0
						()
					    let <_cor5> =
						%% Line 776
						call 'erlang':'+'
						    (N1, 1)
					    in  do  %% Line 776
						    apply 'insert_index'/3
							(Tag, Id, _cor5)
						    do  %% Line 777
							call 'erlang':'put'
							    ('last_tag', {Tag,[]})
							do  %% Line 778
							    apply 'indexify'/3
								(Fd, Rest, N1)
							    do  %% Line 779
								apply 'end_progress'/0
								    ()
								do  %% Line 780
								    apply 'check_if_truncated'/0
									()
								    %% Line 781
								    case apply 'lookup_index'/1
									     ('erl_crash_dump') of
								      <[{DumpVsn0,_cor34}|[]]> when 'true' ->
									  let <_cor13> =
									      %% Line 782
									      ( letrec
										    'lc$^0'/1 =
											fun (_cor10) ->
											    case _cor10 of
											      <[%% Line 783
												L|_cor8]> when 'true' ->
												  let <_cor11> =
												      call 'erlang':'list_to_integer'
													  (L)
												  in  let <_cor12> =
													  %% Line 783
													  apply 'lc$^0'/1
													      (_cor8)
												      in  ( [_cor11|_cor12]
													    -| ['compiler_generated'] )
											      <[]> when 'true' ->
												  []
											      ( <_cor10> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor10})
												      -| [{'function_name',{'lc$^0',1}}] )
												-| ['compiler_generated'] )
											    end
										in  let <_cor9> =
											%% Line 783
											call 'string':'tokens'
											    (DumpVsn0, [46])
										    in  apply 'lc$^0'/1
											    (_cor9)
										-| ['list_comprehension'] )
									  in  let <Binaries> =
										  %% Line 784
										  apply 'read_binaries'/2
										      (Fd, _cor13)
									      in  do  %% Line 785
										      apply 'close'/1
											  (Fd)
										      %% Line 786
										      {'ok',Binaries,_cor13}
								      ( <_cor6> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor6})
									-| ['compiler_generated'] )
								    end
				    %% Line 787
				    <_X_Other> when 'true' ->
					let <R> =
					    %% Line 788
					    call 'io_lib':'format'
						(%% Line 789
						 [126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[69|[114|[108|[97|[110|[103|[32|[99|[114|[97|[115|[104|[32|[100|[117|[109|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 790
																												       [_cor0|[]])
					in  do  %% Line 791
						apply 'close'/1
						    (Fd)
						%% Line 792
						{'error',R}
				  end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			%% Line 794
			<{'ok',#{#<60>(8,1,'integer',['unsigned'|['big']]),
				 #<69>(8,1,'integer',['unsigned'|['big']]),
				 #<114>(8,1,'integer',['unsigned'|['big']]),
				 #<108>(8,1,'integer',['unsigned'|['big']]),
				 #<97>(8,1,'integer',['unsigned'|['big']]),
				 #<110>(8,1,'integer',['unsigned'|['big']]),
				 #<103>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']]),
				 #<99>(8,1,'integer',['unsigned'|['big']]),
				 #<114>(8,1,'integer',['unsigned'|['big']]),
				 #<97>(8,1,'integer',['unsigned'|['big']]),
				 #<115>(8,1,'integer',['unsigned'|['big']]),
				 #<104>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']]),
				 #<100>(8,1,'integer',['unsigned'|['big']]),
				 #<117>(8,1,'integer',['unsigned'|['big']]),
				 #<109>(8,1,'integer',['unsigned'|['big']]),
				 #<112>(8,1,'integer',['unsigned'|['big']]),
				 #<62>(8,1,'integer',['unsigned'|['big']]),
				 #<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
			    let <R> =
				%% Line 796
				call 'io_lib':'format'
				    (%% Line 797
				     [84|[104|[101|[32|[99|[114|[97|[115|[104|[100|[117|[109|[112|[32|[126|[115|[32|[105|[115|[32|[105|[110|[32|[116|[104|[101|[32|[112|[114|[101|[45|[82|[49|[48|[66|[32|[102|[111|[114|[109|[97|[116|[44|[32|[119|[104|[105|[99|[104|[32|[105|[115|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 799
																																																										[_cor0|[]])
			    in  do  %% Line 800
				    apply 'close'/1
					(Fd)
				    %% Line 801
				    {'error',R}
			%% Line 802
			<_X_Other> when 'true' ->
			    let <R> =
				%% Line 803
				call 'io_lib':'format'
				    (%% Line 804
				     [126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[69|[114|[108|[97|[110|[103|[32|[99|[114|[97|[115|[104|[32|[100|[117|[109|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 805
																											   [_cor0|[]])
			    in  do  %% Line 806
				    apply 'close'/1
					(Fd)
				    %% Line 807
				    {'error',R}
		      end
	  %% Line 809
	  <_X_other> when 'true' ->
	      let <R> =
		  %% Line 810
		  call 'io_lib':'format'
		      ([126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[69|[114|[108|[97|[110|[103|[32|[99|[114|[97|[115|[104|[32|[100|[117|[109|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
	      in  %% Line 811
		  {'error',R}
	end
'indexify'/3 =
    %% Line 814
    fun (_cor2,_cor1,_cor0) ->
	%% Line 815
	case call 'binary':'match'
		 (_cor1, #{#<10>(8,1,'integer',['unsigned'|['big']]),
			   #<61>(8,1,'integer',['unsigned'|['big']])}#) of
	  %% Line 816
	  <{Start,Len}> when 'true' ->
	      let <Pos> =
		  %% Line 817
		  call 'erlang':'+'
		      (Start, Len)
	      in  %% Line 818
		  case ( _cor1
			 -| ['reuse_for_context'] ) of
		    <#{#<_cor22>(Pos,8,'binary',['unsigned'|['big']]),
		       #<TagAndRest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_cor5> =
			    %% Line 819
			    call 'erlang':'+'
				(_cor0, Pos)
			in  %% Line 819
			    case apply 'tag'/3
				     (_cor2, TagAndRest, _cor5) of
			      <{Tag,Id,Rest,N1}> when 'true' ->
				  let <_cor7> =
				      %% Line 820
				      call 'erlang':'+'
					  (N1, 1)
				  in  do  %% Line 820
					  apply 'insert_index'/3
					      (Tag, Id, _cor7)
					  do  %% Line 821
					      call 'erlang':'put'
						  ('last_tag', {Tag,Id})
					      %% Line 822
					      apply 'indexify'/3
						  (_cor2, Rest, N1)
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor4)
			      primop 'match_fail'
				  ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 823
	  <'nomatch'> when 'true' ->
	      %% Line 824
	      case apply 'progress_read'/1
		       (_cor2) of
		%% Line 825
		<{'ok',Chunk0}>
		    when call 'erlang':'is_binary'
			  (Chunk0) ->
		    let <Chunk,N1> =
			%% Line 827
			case call 'binary':'last'
				 (_cor1) of
			  %% Line 828
			  <10> when 'true' ->
			      let <_cor11> =
				  %% Line 829
				  #{#<10>(8,1,'integer',['unsigned'|['big']]),
				    #<Chunk0>('all',8,'binary',['unsigned'|['big']])}#
			      in  let <_cor8> =
				      %% Line 829
				      call 'erlang':'byte_size'
					  (_cor1)
				  in  let <_cor9> =
					  %% Line 829
					  call 'erlang':'+'
					      (_cor0, _cor8)
				      in  let <_cor10> =
					      %% Line 829
					      call 'erlang':'-'
						  (_cor9, 1)
					  in  <_cor11,_cor10>
			  %% Line 830
			  <_cor23> when 'true' ->
			      let <_cor12> =
				  %% Line 831
				  call 'erlang':'byte_size'
				      (_cor1)
			      in  let <_cor13> =
				      %% Line 831
				      call 'erlang':'+'
					  (_cor0, _cor12)
				  in  %% Line 831
				      <Chunk0,_cor13>
			end
		    in  %% Line 833
			apply 'indexify'/3
			    (_cor2, Chunk, N1)
		%% Line 834
		<'eof'> when 'true' ->
		    %% Line 835
		    'eof'
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor18})
	    -| ['compiler_generated'] )
	end
'tag'/3 =
    %% Line 839
    fun (_cor2,_cor1,_cor0) ->
	%% Line 840
	apply 'tag'/6
	    (_cor2, _cor1, _cor0, [], [], 'tag')
'tag'/6 =
    %% Line 841
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Fd,Rest = #{#<10>(8,1,'integer',['unsigned'|['big']]),
			  #<_cor23>('all',8,'binary',['unsigned'|['big']])}#,N,Gat,Di,_X_Now> when 'true' ->
	      let <_cor7> =
		  %% Line 842
		  call 'lists':'reverse'
		      (Gat)
	      in  let <_cor8> =
		      %% Line 842
		      apply 'tag_to_atom'/1
			  (_cor7)
		  in  let <_cor6> =
			  %% Line 842
			  call 'lists':'reverse'
			      (Di)
		      in  %% Line 842
			  {_cor8,_cor6,Rest,N}
	  %% Line 843
	  <Fd,#{#<13>(8,1,'integer',['unsigned'|['big']]),
		#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Gat,Di,Now> when 'true' ->
	      let <_cor9> =
		  %% Line 844
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 844
		  apply 'tag'/6
		      (Fd, Rest, _cor9, Gat, Di, Now)
	  %% Line 845
	  <Fd,#{#<58>(8,1,'integer',['unsigned'|['big']]),
		#<IdAndRest>('all',8,'binary',['unsigned'|['big']])}#,N,Gat,Di,'tag'> when 'true' ->
	      let <_cor10> =
		  %% Line 846
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 846
		  apply 'tag'/6
		      (Fd, IdAndRest, _cor10, Gat, Di, 'id')
	  %% Line 847
	  <Fd,#{#<Char>(8,1,'integer',['unsigned'|['big']]),
		#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Gat,Di,'tag'> when 'true' ->
	      let <_cor11> =
		  %% Line 848
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 848
		  apply 'tag'/6
		      (Fd, Rest, _cor11, [Char|Gat], Di, 'tag')
	  %% Line 849
	  <Fd,#{#<Char>(8,1,'integer',['unsigned'|['big']]),
		#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Gat,Di,'id'> when 'true' ->
	      let <_cor12> =
		  %% Line 850
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 850
		  apply 'tag'/6
		      (Fd, Rest, _cor12, Gat, [Char|Di], 'id')
	  %% Line 851
	  <Fd,#{}#,N,Gat,Di,Now> when 'true' ->
	      %% Line 852
	      case apply 'progress_read'/1
		       (Fd) of
		%% Line 853
		<{'ok',Chunk}>
		    when call 'erlang':'is_binary'
			  (Chunk) ->
		    %% Line 854
		    apply 'tag'/6
			(Fd, Chunk, N, Gat, Di, Now)
		%% Line 855
		<'eof'> when 'true' ->
		    let <_cor14> =
			%% Line 856
			call 'lists':'reverse'
			    (Gat)
		    in  let <_cor15> =
			    %% Line 856
			    apply 'tag_to_atom'/1
				(_cor14)
			in  let <_cor13> =
				%% Line 856
				call 'lists':'reverse'
				    (Di)
			    in  %% Line 856
				{_cor15,_cor13,#{}#,N}
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'tag',6}}] )
	    -| ['compiler_generated'] )
	end
'check_if_truncated'/0 =
    %% Line 859
    fun () ->
	%% Line 860
	case call 'erlang':'get'
		 ('last_tag') of
	  %% Line 861
	  <{'ende',_cor1}> when 'true' ->
	      do  %% Line 862
		  call 'erlang':'put'
		      ('truncated', 'false')
		  %% Line 863
		  call 'erlang':'put'
		      ('truncated_proc', 'false')
	  %% Line 864
	  <TruncatedTag> when 'true' ->
	      do  %% Line 865
		  call 'erlang':'put'
		      ('truncated', 'true')
		  %% Line 866
		  apply 'find_truncated_proc'/1
		      (TruncatedTag)
	end
'find_truncated_proc'/1 =
    %% Line 869
    fun (_cor0) ->
	case _cor0 of
	  <{'atoms',_X_Id}> when 'true' ->
	      %% Line 870
	      call 'erlang':'put'
		  ('truncated_proc', 'false')
	  %% Line 871
	  <{Tag,Pid}> when 'true' ->
	      %% Line 872
	      case apply 'is_proc_tag'/1
		       (Tag) of
		%% Line 873
		<'true'> when 'true' ->
		    %% Line 874
		    call 'erlang':'put'
			('truncated_proc', Pid)
		%% Line 875
		<'false'> when 'true' ->
		    %% Line 878
		    call 'erlang':'put'
			('truncated_proc', [60|[48|[46|[48|[46|[48|[62]]]]]]])
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'find_truncated_proc',1}}] )
	    -| ['compiler_generated'] )
	end
'is_proc_tag'/1 =
    %% Line 881
    fun (_cor0) ->
	case _cor0 of
	  <Tag>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(_cor0, 'proc')
		in  let <_cor2> =
			%% Line 882
			call 'erlang':'=:='
			    (_cor0, 'proc_dictionary')
		    in  let <_cor3> =
			    %% Line 883
			    call 'erlang':'=:='
				(_cor0, 'proc_messages')
			in  let <_cor4> =
				%% Line 884
				call 'erlang':'=:='
				    (_cor0, 'proc_stack')
			    in  let <_cor5> =
				    %% Line 885
				    call 'erlang':'=:='
					(_cor0, 'proc_heap')
				in  let <_cor6> =
					%% Line 884
					call 'erlang':'or'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    %% Line 883
					    call 'erlang':'or'
						(_cor3, _cor6)
					in  let <_cor8> =
						%% Line 882
						call 'erlang':'or'
						    (_cor2, _cor7)
					    in  call 'erlang':'or'
						    (_cor1, _cor8) ->
	      %% Line 886
	      'true'
	  %% Line 887
	  <_cor10> when 'true' ->
	      %% Line 888
	      'false'
	end
'general_info'/1 =
    %% Line 892
    fun (_cor0) ->
	%% Line 893
	case apply 'lookup_index'/1
		 ('erl_crash_dump') of
	  <[{_X_Id,Start}|[]]> when 'true' ->
	      let <Fd> =
		  %% Line 894
		  apply 'open'/1
		      (_cor0)
	      in  do  %% Line 895
		      apply 'pos_bof'/2
			  (Fd, Start)
		      let <_cor4> =
			  %% Line 896
			  case apply 'get_rest_of_line'/1
				   (Fd) of
			    %% Line 897
			    <{'eof',SomeOfLine}> when 'true' ->
				SomeOfLine
			    %% Line 898
			    <WholeLine> when 'true' ->
				WholeLine
			  end
		      in  let <GI> =
			      %% Line 901
			      apply 'get_general_info'/2
				  (Fd, {'general_info',_cor4,'undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined'})
			  in  let <MemTot,MemMax> =
				  %% Line 904
				  case apply 'lookup_index'/1
					   ('memory') of
				    %% Line 905
				    <[{_cor33,MemStart}|[]]> when 'true' ->
					do  %% Line 906
					    apply 'pos_bof'/2
						(Fd, MemStart)
					    let <Memory> =
						%% Line 907
						apply 'get_meminfo'/2
						    (Fd, [])
					    in  let <_cor9> =
						    %% Line 908
						    case call 'lists':'keysearch'
							     ('total', 1, Memory) of
						      %% Line 909
						      <{'value',{_cor34,T}}> when 'true' ->
							  T
						      %% Line 910
						      <'false'> when 'true' ->
							  []
						      ( <_cor8> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor8})
							-| ['compiler_generated'] )
						    end
						in  let <_cor12> =
							%% Line 912
							case call 'lists':'keysearch'
								 ('maximum', 1, Memory) of
							  %% Line 913
							  <{'value',{_cor35,M}}> when 'true' ->
							      M
							  %% Line 914
							  <'false'> when 'true' ->
							      []
							  ( <_cor11> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor11})
							    -| ['compiler_generated'] )
							end
						    in  <_cor9,_cor12>
				    %% Line 917
				    <_cor36> when 'true' ->
					%% Line 918
					<[],[]>
				  end
			      in  do  %% Line 921
				      apply 'close'/1
					  (Fd)
				      %% Line 922
				      case apply 'count'/0
					       () of
					<{NumProcs,NumEts,NumFuns,NumTimers}> when 'true' ->
					    let <_cor20> =
						%% Line 924
						case apply 'lookup_index'/1
							 ('node') of
						  %% Line 925
						  <[{N,_X_Start}|[]]> when 'true' ->
						      %% Line 926
						      N
						  %% Line 927
						  <[]> when 'true' ->
						      %% Line 928
						      case apply 'lookup_index'/1
							       ('no_distribution') of
							%% Line 929
							<[_cor37|[]]> when 'true' ->
							    [110|[111|[110|[111|[100|[101|[64|[110|[111|[104|[111|[115|[116]]]]]]]]]]]]]
							%% Line 930
							<[]> when 'true' ->
							    [117|[110|[107|[110|[111|[119|[110]]]]]]]
							( <_cor18> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor18})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor19> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor19})
						    -| ['compiler_generated'] )
						end
					    in  let <_cor24> =
						    %% Line 935
						    case apply 'lookup_index'/1
							     ('old_instr_data') of
						      %% Line 936
						      <[]> when 'true' ->
							  %% Line 937
							  case apply 'lookup_index'/1
								   ('instr_data') of
							    %% Line 938
							    <[]> when 'true' ->
								%% Line 939
								'false'
							    %% Line 940
							    <_cor38> when 'true' ->
								%% Line 941
								'instr_data'
							  end
						      %% Line 943
						      <_cor39> when 'true' ->
							  %% Line 944
							  'old_instr_data'
						    end
						in  let <_rec3> =
							%% Line 947
							call 'erlang':'integer_to_list'
							    (NumProcs)
						    in  let <_rec4> =
							    %% Line 948
							    call 'erlang':'integer_to_list'
								(NumEts)
							in  let <_rec5> =
								%% Line 949
								call 'erlang':'integer_to_list'
								    (NumTimers)
							    in  let <_rec6> =
								    %% Line 950
								    call 'erlang':'integer_to_list'
									(NumFuns)
								in  %% Line 953
								    case GI of
								      <{'general_info',_rec8,_rec9,_rec10,_rec11,_rec12,_rec13,_rec14,_rec15,_rec16,_rec17,_rec18,_rec19,_rec20,_rec21}> when 'true' ->
									  {'general_info',_rec8,_rec9,_rec10,_rec11,_rec12,_cor20,_rec14,_rec3,_rec4,_rec5,_rec6,MemTot,MemMax,_cor24}
								      ( <_cor40> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {'badrecord','general_info'}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor17})
					  -| ['compiler_generated'] )
				      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'get_general_info'/2 =
    %% Line 955
    fun (_cor1,_cor0) ->
	%% Line 956
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 957
	  <[83|[108|[111|[103|[97|[110]]]]]]> when 'true' ->
	      let <_rec22> =
		  %% Line 958
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 958
		  case _cor0 of
		    <{'general_info',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(3, _cor0, _rec22)
			in  apply 'get_general_info'/2
				(_cor1, _cor5)
		    ( <_cor41> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','general_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 959
	  <[83|[121|[115|[116|[101|[109|[32|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]> when 'true' ->
	      let <_rec24> =
		  %% Line 960
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 960
		  case _cor0 of
		    <{'general_info',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}> when 'true' ->
			let <_cor9> =
			    call 'erlang':'setelement'
				(4, _cor0, _rec24)
			in  apply 'get_general_info'/2
				(_cor1, _cor9)
		    ( <_cor56> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','general_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 961
	  <[67|[111|[109|[112|[105|[108|[101|[100]]]]]]]]> when 'true' ->
	      let <_rec26> =
		  %% Line 962
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 962
		  case _cor0 of
		    <{'general_info',_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}> when 'true' ->
			let <_cor13> =
			    call 'erlang':'setelement'
				(5, _cor0, _rec26)
			in  apply 'get_general_info'/2
				(_cor1, _cor13)
		    ( <_cor71> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','general_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 963
	  <[84|[97|[105|[110|[116|[115]]]]]]> when 'true' ->
	      let <_cor15> =
		  %% Line 964
		  case apply 'val'/1
			   (_cor1) of
		    <[45|[49]]> when 'true' ->
			[40|[110|[111|[110|[101|[41]]]]]]
		    <Line> when 'true' ->
			Line
		  end
	      in  %% Line 965
		  case _cor0 of
		    <{'general_info',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
			let <_cor19> =
			    call 'erlang':'setelement'
				(6, _cor0, _cor15)
			in  apply 'get_general_info'/2
				(_cor1, _cor19)
		    ( <_cor86> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','general_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 966
	  <[65|[116|[111|[109|[115]]]]]> when 'true' ->
	      let <_rec29> =
		  %% Line 967
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 967
		  case _cor0 of
		    <{'general_info',_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100}> when 'true' ->
			let <_cor23> =
			    call 'erlang':'setelement'
				(8, _cor0, _rec29)
			in  apply 'get_general_info'/2
				(_cor1, _cor23)
		    ( <_cor101> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','general_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 968
	  <[61|_X_next_tag]> when 'true' ->
	      _cor0
	  %% Line 970
	  <Other> when 'true' ->
	      do  %% Line 971
		  apply 'unexpected'/3
		      (_cor1, Other, [103|[101|[110|[101|[114|[97|[108|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]])
		  _cor0
	end
'count'/0 =
    %% Line 975
    fun () ->
	let <_cor3> =
	    %% Line 976
	    apply 'count_index'/1
		('proc')
	in  let <_cor2> =
		%% Line 976
		apply 'count_index'/1
		    ('ets')
	    in  let <_cor1> =
		    %% Line 976
		    apply 'count_index'/1
			('fu')
		in  let <_cor0> =
			%% Line 976
			apply 'count_index'/1
			    ('timer')
		    in  %% Line 976
			{_cor3,_cor2,_cor1,_cor0}
'procs_summary'/2 =
    %% Line 981
    fun (_cor1,_cor0) ->
	let <ParseFun> =
	    %% Line 982
	    ( fun (_cor16,_cor15) ->
		  let <Pid> =
		      %% Line 983
		      call 'erlang':'list_to_pid'
			  (_cor15)
		  in  let <Proc> =
			  %% Line 984
			  apply 'get_procinfo'/4
			      (_cor16, ( 'main_procinfo'/5
					 -| [{'id',{0,0,'-procs_summary/2-fun-0-'}}] ), %% Line 985
											{'proc',Pid,'undefined','undefined',[117|[110|[107|[110|[111|[119|[110]]]]]]],[117|[110|[107|[110|[111|[119|[110]]]]]]],'undefined','undefined',0,'undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined',0,[117|[110|[107|[110|[111|[119|[110]]]]]]],'undefined',0,'undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined'}, _cor0)
		      in  %% Line 986
			  ( case Proc of
			      ( <( {'proc',_cor22,_rec31,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
				   -| ['compiler_generated'] )> when 'true' ->
				    do  case _rec31 of
					  %% Line 987
					  <'undefined'> when 'true' ->
					      'ok'
					  %% Line 989
					  <Name> when 'true' ->
					      do  %% Line 993
						  call 'ets':'insert'
						      ('cdv_reg_proc_table', {Name,Pid})
						  %% Line 994
						  call 'ets':'insert'
						      ('cdv_reg_proc_table', {_cor15,Name})
					end
					%% Line 996
					case _cor52 of
					  %% Line 997
					  <'undefined'> when 'true' ->
					      call 'erlang':'setelement'
						  (33, Proc, _cor41)
					  %% Line 998
					  <_cor155> when 'true' ->
					      Proc
					end
				-| ['compiler_generated'] )
			      ( <_cor54> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','proc'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-procs_summary/2-fun-1-'}}] )
	in  %% Line 1001
	    apply 'lookup_and_parse_index'/4
		(_cor1, 'proc', ParseFun, [112|[114|[111|[99|[101|[115|[115|[101|[115]]]]]]]]])
'get_proc_details'/5 =
    %% Line 1005
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1006
	case apply 'lookup_index'/2
		 ('proc', _cor3) of
	  %% Line 1007
	  <[{_cor18,Start}|[]]> when 'true' ->
	      let <Fd> =
		  %% Line 1008
		  apply 'open'/1
		      (_cor4)
	      in  let <_cor8> =
		      %% Line 1010
		      case apply 'truncated_warning'/1
			       ([{'proc',_cor3}|[]]) of
			%% Line 1011
			<[]> when 'true' ->
			    let <_cor6> =
				%% Line 1012
				apply 'expand_memory'/4
				    (Fd, _cor3, _cor1, _cor0)
			    in  %% Line 1012
				{_cor6,[]}
			%% Line 1013
			<TW0> when 'true' ->
			    %% Line 1014
			    {{[],[],[]},TW0}
		      end
		  in  %% Line 1009
		      case _cor8 of
			<{{Stack,MsgQ,Dict},TW}> when 'true' ->
			    do  %% Line 1016
				apply 'pos_bof'/2
				    (Fd, Start)
				let <Proc0> =
				    %% Line 1017
				    {'proc',_cor3,'undefined','undefined',[117|[110|[107|[110|[111|[119|[110]]]]]]],[117|[110|[107|[110|[111|[119|[110]]]]]]],'undefined','undefined',0,MsgQ,'undefined','undefined','undefined','undefined','undefined','undefined','undefined',Dict,0,[117|[110|[107|[110|[111|[119|[110]]]]]]],'undefined',0,'undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined',Stack}
				in  let <Proc> =
					%% Line 1018
					apply 'get_procinfo'/4
					    (Fd, ( 'all_procinfo'/5
						   -| [{'id',{0,0,'-get_proc_details/5-fun-0-'}}] ), Proc0, _cor2)
				    in  do  %% Line 1019
					    apply 'close'/1
						(Fd)
					    %% Line 1020
					    {'ok',Proc,TW}
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1021
	  <_cor19> when 'true' ->
	      %% Line 1022
	      apply 'maybe_other_node'/1
		  (_cor3)
	end
'get_procinfo'/4 =
    %% Line 1025
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1026
	case apply 'line_head'/1
		 (_cor3) of
	  %% Line 1027
	  <[83|[116|[97|[116|[101]]]]]> when 'true' ->
	      let <_cor5> =
		  %% Line 1028
		  case apply 'val'/1
			   (_cor3) of
		    %% Line 1029
		    <[71|[97|[114|[98|[105|[110|[103]]]]]]]> when 'true' ->
			[71|[97|[114|[98|[105|[110|[103|[10|[40|[108|[105|[109|[105|[116|[101|[100|[32|[105|[110|[102|[111|[41]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 1030
		    <State0> when 'true' ->
			State0
		  end
	      in  %% Line 1032
		  case _cor1 of
		    <{'proc',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83}> when 'true' ->
			let <_cor9> =
			    call 'erlang':'setelement'
				(7, _cor1, _cor5)
			in  apply 'get_procinfo'/4
				(_cor3, _cor2, _cor9, _cor0)
		    ( <_cor84> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1033
	  <[78|[97|[109|[101]]]]> when 'true' ->
	      let <_rec37> =
		  %% Line 1034
		  apply 'val'/1
		      (_cor3)
	      in  %% Line 1034
		  case _cor1 of
		    <{'proc',_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117}> when 'true' ->
			let <_cor13> =
			    call 'erlang':'setelement'
				(3, _cor1, _rec37)
			in  apply 'get_procinfo'/4
				(_cor3, _cor2, _cor13, _cor0)
		    ( <_cor118> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1035
	  <[83|[112|[97|[119|[110|[101|[100|[32|[97|[115]]]]]]]]]]> when 'true' ->
	      let <IF> =
		  %% Line 1036
		  apply 'val'/1
		      (_cor3)
	      in  %% Line 1037
		  ( case _cor1 of
		      ( <( {'proc',_cor119,_rec39,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec39 of
			      %% Line 1038
			      <'undefined'> when 'true' ->
				  let <_cor18> =
				      %% Line 1039
				      call 'erlang':'setelement'
					  (4, _cor1, IF)
				  in  let <_cor20> =
					  %% Line 1039
					  call 'erlang':'setelement'
					      (3, _cor18, IF)
				      in  %% Line 1039
					  apply 'get_procinfo'/4
					      (_cor3, _cor2, _cor20, _cor0)
			      %% Line 1040
			      <_cor186> when 'true' ->
				  let <_cor23> =
				      %% Line 1041
				      call 'erlang':'setelement'
					  (4, _cor1, IF)
				  in  %% Line 1041
				      apply 'get_procinfo'/4
					  (_cor3, _cor2, _cor23, _cor0)
			    end
			-| ['compiler_generated'] )
		      ( <_cor151> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','proc'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1043
	  <[77|[101|[115|[115|[97|[103|[101|[32|[113|[117|[101|[117|[101|[32|[108|[101|[110|[103|[116|[104]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor25> =
		  %% Line 1045
		  apply 'val'/1
		      (_cor3)
	      in  let <_rec42> =
		      %% Line 1045
		      call 'erlang':'list_to_integer'
			  (_cor25)
		  in  %% Line 1045
		      case _cor1 of
			<{'proc',_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253}> when 'true' ->
			    let <_cor29> =
				call 'erlang':'setelement'
				    (9, _cor1, _rec42)
			    in  apply 'get_procinfo'/4
				    (_cor3, _cor2, _cor29, _cor0)
			( <_cor254> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','proc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1046
	  <[82|[101|[100|[117|[99|[116|[105|[111|[110|[115]]]]]]]]]]> when 'true' ->
	      let <_cor30> =
		  %% Line 1048
		  apply 'val'/1
		      (_cor3)
	      in  let <_rec44> =
		      %% Line 1048
		      call 'erlang':'list_to_integer'
			  (_cor30)
		  in  %% Line 1048
		      case _cor1 of
			<{'proc',_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,_cor283,_cor284,_cor285,_cor286,_cor287}> when 'true' ->
			    let <_cor34> =
				call 'erlang':'setelement'
				    (19, _cor1, _rec44)
			    in  apply 'get_procinfo'/4
				    (_cor3, _cor2, _cor34, _cor0)
			( <_cor288> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','proc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1049
	  <[83|[116|[97|[99|[107|[43|[104|[101|[97|[112]]]]]]]]]]> when 'true' ->
	      let <_cor35> =
		  %% Line 1052
		  apply 'val'/1
		      (_cor3)
	      in  let <_cor36> =
		      %% Line 1052
		      call 'erlang':'list_to_integer'
			  (_cor35)
		  in  let <_rec46> =
			  %% Line 1052
			  call 'erlang':'*'
			      (_cor36, _cor0)
		      in  %% Line 1051
			  case _cor1 of
			    <{'proc',_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321}> when 'true' ->
				let <_cor40> =
				    call 'erlang':'setelement'
					(22, _cor1, _rec46)
				in  apply 'get_procinfo'/4
					(_cor3, _cor2, _cor40, _cor0)
			    ( <_cor322> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','proc'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1053
	  <[77|[101|[109|[111|[114|[121]]]]]]> when 'true' ->
	      let <_cor41> =
		  %% Line 1055
		  apply 'val'/1
		      (_cor3)
	      in  let <_rec48> =
		      %% Line 1055
		      call 'erlang':'list_to_integer'
			  (_cor41)
		  in  %% Line 1055
		      case _cor1 of
			<{'proc',_cor323,_cor324,_cor325,_cor326,_cor327,_cor328,_cor329,_cor330,_cor331,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342,_cor343,_cor344,_cor345,_cor346,_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355}> when 'true' ->
			    let <_cor45> =
				call 'erlang':'setelement'
				    (33, _cor1, _rec48)
			    in  apply 'get_procinfo'/4
				    (_cor3, _cor2, _cor45, _cor0)
			( <_cor356> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','proc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1056
	  <{'eof',_cor357}> when 'true' ->
	      _cor1
	  %% Line 1058
	  <Other> when 'true' ->
	      %% Line 1059
	      apply _cor2
		  (_cor3, _cor2, _cor1, _cor0, Other)
	end
'main_procinfo'/5 =
    %% Line 1062
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1063
	case _cor0 of
	  %% Line 1064
	  <[61|_X_next_tag]> when 'true' ->
	      _cor2
	  %% Line 1066
	  <[97|[114|[105|[116|[121|[32|[61|[32|_cor11]]]]]]]]> when 'true' ->
	      %% Line 1068
	      apply 'get_procinfo'/4
		  (_cor4, _cor3, _cor2, _cor1)
	  %% Line 1069
	  <_X_Other> when 'true' ->
	      do  %% Line 1070
		  apply 'skip_rest_of_line'/1
		      (_cor4)
		  %% Line 1071
		  apply 'get_procinfo'/4
		      (_cor4, _cor3, _cor2, _cor1)
	end
'all_procinfo'/5 =
    %% Line 1073
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1074
	case _cor0 of
	  %% Line 1076
	  <[83|[112|[97|[119|[110|[101|[100|[32|[98|[121]]]]]]]]]]> when 'true' ->
	      %% Line 1077
	      case apply 'val'/1
		       (_cor4) of
		%% Line 1078
		<[91|[93]]> when 'true' ->
		    %% Line 1079
		    apply 'get_procinfo'/4
			(_cor4, _cor3, _cor2, _cor1)
		%% Line 1080
		<Parent> when 'true' ->
		    %% Line 1081
		    case _cor2 of
		      <{'proc',_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138}> when 'true' ->
			  let <_cor7> =
			      call 'erlang':'setelement'
				  (5, _cor2, Parent)
			  in  apply 'get_procinfo'/4
				  (_cor4, _cor3, _cor7, _cor1)
		      ( <_cor139> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','proc'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 1083
	  <[83|[116|[97|[114|[116|[101|[100]]]]]]]> when 'true' ->
	      let <_rec51> =
		  %% Line 1084
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1084
		  case _cor2 of
		    <{'proc',_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172}> when 'true' ->
			let <_cor12> =
			    call 'erlang':'setelement'
				(6, _cor2, _rec51)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor12, _cor1)
		    ( <_cor173> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1085
	  <[76|[97|[115|[116|[32|[115|[99|[104|[101|[100|[117|[108|[101|[100|[32|[105|[110|[32|[102|[111|[114]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor13> =
		  %% Line 1088
		  apply 'val'/1
		      (_cor4)
	      in  let <_rec53> =
		      %% Line 1087
		      {[76|[97|[115|[116|[32|[115|[99|[104|[101|[100|[117|[108|[101|[100|[32|[105|[110|[32|[102|[111|[114]]]]]]]]]]]]]]]]]]]]],_cor13}
		  in  %% Line 1086
		      case _cor2 of
			<{'proc',_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206}> when 'true' ->
			    let <_cor17> =
				call 'erlang':'setelement'
				    (8, _cor2, _rec53)
			    in  apply 'get_procinfo'/4
				    (_cor4, _cor3, _cor17, _cor1)
			( <_cor207> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','proc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1089
	  <[67|[117|[114|[114|[101|[110|[116|[32|[99|[97|[108|[108]]]]]]]]]]]]> when 'true' ->
	      let <_cor18> =
		  %% Line 1091
		  apply 'val'/1
		      (_cor4)
	      in  let <_rec55> =
		      %% Line 1090
		      {[67|[117|[114|[114|[101|[110|[116|[32|[99|[97|[108|[108]]]]]]]]]]]],_cor18}
		  in  %% Line 1090
		      case _cor2 of
			<{'proc',_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240}> when 'true' ->
			    let <_cor22> =
				call 'erlang':'setelement'
				    (8, _cor2, _rec55)
			    in  apply 'get_procinfo'/4
				    (_cor4, _cor3, _cor22, _cor1)
			( <_cor241> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','proc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1092
	  <[78|[117|[109|[98|[101|[114|[32|[111|[102|[32|[104|[101|[97|[112|[32|[102|[114|[97|[103|[109|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_rec57> =
		  %% Line 1093
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1093
		  case _cor2 of
		    <{'proc',_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274}> when 'true' ->
			let <_cor26> =
			    call 'erlang':'setelement'
				(20, _cor2, _rec57)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor26, _cor1)
		    ( <_cor275> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1094
	  <[72|[101|[97|[112|[32|[102|[114|[97|[103|[109|[101|[110|[116|[32|[100|[97|[116|[97]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_rec59> =
		  %% Line 1095
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1095
		  case _cor2 of
		    <{'proc',_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,_cor283,_cor284,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308}> when 'true' ->
			let <_cor30> =
			    call 'erlang':'setelement'
				(21, _cor2, _rec59)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor30, _cor1)
		    ( <_cor309> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1096
	  <[79|[108|[100|[72|[101|[97|[112]]]]]]]> when 'true' ->
	      let <_cor31> =
		  %% Line 1097
		  apply 'val'/1
		      (_cor4)
	      in  let <_cor32> =
		      %% Line 1097
		      call 'erlang':'list_to_integer'
			  (_cor31)
		  in  let <Bytes> =
			  %% Line 1097
			  call 'erlang':'*'
			      (_cor32, _cor1)
		      in  %% Line 1098
			  case _cor2 of
			    <{'proc',_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327,_cor328,_cor329,_cor330,_cor331,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342}> when 'true' ->
				let <_cor36> =
				    call 'erlang':'setelement'
					(23, _cor2, Bytes)
				in  apply 'get_procinfo'/4
					(_cor4, _cor3, _cor36, _cor1)
			    ( <_cor343> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','proc'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1099
	  <[72|[101|[97|[112|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]> when 'true' ->
	      let <_cor37> =
		  %% Line 1100
		  apply 'val'/1
		      (_cor4)
	      in  let <_cor38> =
		      %% Line 1100
		      call 'erlang':'list_to_integer'
			  (_cor37)
		  in  let <Bytes> =
			  %% Line 1100
			  call 'erlang':'*'
			      (_cor38, _cor1)
		      in  %% Line 1101
			  case _cor2 of
			    <{'proc',_cor344,_cor345,_cor346,_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355,_cor356,_cor357,_cor358,_cor359,_cor360,_cor361,_cor362,_cor363,_cor364,_cor365,_cor366,_cor367,_cor368,_cor369,_cor370,_cor371,_cor372,_cor373,_cor374,_cor375,_cor376}> when 'true' ->
				let <_cor42> =
				    call 'erlang':'setelement'
					(24, _cor2, Bytes)
				in  apply 'get_procinfo'/4
					(_cor4, _cor3, _cor42, _cor1)
			    ( <_cor377> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','proc'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1102
	  <[79|[108|[100|[72|[101|[97|[112|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor43> =
		  %% Line 1103
		  apply 'val'/1
		      (_cor4)
	      in  let <_cor44> =
		      %% Line 1103
		      call 'erlang':'list_to_integer'
			  (_cor43)
		  in  let <Bytes> =
			  %% Line 1103
			  call 'erlang':'*'
			      (_cor44, _cor1)
		      in  %% Line 1104
			  case _cor2 of
			    <{'proc',_cor378,_cor379,_cor380,_cor381,_cor382,_cor383,_cor384,_cor385,_cor386,_cor387,_cor388,_cor389,_cor390,_cor391,_cor392,_cor393,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405,_cor406,_cor407,_cor408,_cor409,_cor410}> when 'true' ->
				let <_cor48> =
				    call 'erlang':'setelement'
					(25, _cor2, Bytes)
				in  apply 'get_procinfo'/4
					(_cor4, _cor3, _cor48, _cor1)
			    ( <_cor411> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','proc'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1105
	  <[78|[101|[119|[32|[104|[101|[97|[112|[32|[115|[116|[97|[114|[116]]]]]]]]]]]]]]> when 'true' ->
	      let <_rec64> =
		  %% Line 1106
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1106
		  case _cor2 of
		    <{'proc',_cor412,_cor413,_cor414,_cor415,_cor416,_cor417,_cor418,_cor419,_cor420,_cor421,_cor422,_cor423,_cor424,_cor425,_cor426,_cor427,_cor428,_cor429,_cor430,_cor431,_cor432,_cor433,_cor434,_cor435,_cor436,_cor437,_cor438,_cor439,_cor440,_cor441,_cor442,_cor443,_cor444}> when 'true' ->
			let <_cor52> =
			    call 'erlang':'setelement'
				(26, _cor2, _rec64)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor52, _cor1)
		    ( <_cor445> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1107
	  <[78|[101|[119|[32|[104|[101|[97|[112|[32|[116|[111|[112]]]]]]]]]]]]> when 'true' ->
	      let <_rec66> =
		  %% Line 1108
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1108
		  case _cor2 of
		    <{'proc',_cor446,_cor447,_cor448,_cor449,_cor450,_cor451,_cor452,_cor453,_cor454,_cor455,_cor456,_cor457,_cor458,_cor459,_cor460,_cor461,_cor462,_cor463,_cor464,_cor465,_cor466,_cor467,_cor468,_cor469,_cor470,_cor471,_cor472,_cor473,_cor474,_cor475,_cor476,_cor477,_cor478}> when 'true' ->
			let <_cor56> =
			    call 'erlang':'setelement'
				(27, _cor2, _rec66)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor56, _cor1)
		    ( <_cor479> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1109
	  <[83|[116|[97|[99|[107|[32|[116|[111|[112]]]]]]]]]> when 'true' ->
	      let <_rec68> =
		  %% Line 1110
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1110
		  case _cor2 of
		    <{'proc',_cor480,_cor481,_cor482,_cor483,_cor484,_cor485,_cor486,_cor487,_cor488,_cor489,_cor490,_cor491,_cor492,_cor493,_cor494,_cor495,_cor496,_cor497,_cor498,_cor499,_cor500,_cor501,_cor502,_cor503,_cor504,_cor505,_cor506,_cor507,_cor508,_cor509,_cor510,_cor511,_cor512}> when 'true' ->
			let <_cor60> =
			    call 'erlang':'setelement'
				(28, _cor2, _rec68)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor60, _cor1)
		    ( <_cor513> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1111
	  <[83|[116|[97|[99|[107|[32|[101|[110|[100]]]]]]]]]> when 'true' ->
	      let <_rec70> =
		  %% Line 1112
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1112
		  case _cor2 of
		    <{'proc',_cor514,_cor515,_cor516,_cor517,_cor518,_cor519,_cor520,_cor521,_cor522,_cor523,_cor524,_cor525,_cor526,_cor527,_cor528,_cor529,_cor530,_cor531,_cor532,_cor533,_cor534,_cor535,_cor536,_cor537,_cor538,_cor539,_cor540,_cor541,_cor542,_cor543,_cor544,_cor545,_cor546}> when 'true' ->
			let <_cor64> =
			    call 'erlang':'setelement'
				(29, _cor2, _rec70)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor64, _cor1)
		    ( <_cor547> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1113
	  <[79|[108|[100|[32|[104|[101|[97|[112|[32|[115|[116|[97|[114|[116]]]]]]]]]]]]]]> when 'true' ->
	      let <_rec72> =
		  %% Line 1114
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1114
		  case _cor2 of
		    <{'proc',_cor548,_cor549,_cor550,_cor551,_cor552,_cor553,_cor554,_cor555,_cor556,_cor557,_cor558,_cor559,_cor560,_cor561,_cor562,_cor563,_cor564,_cor565,_cor566,_cor567,_cor568,_cor569,_cor570,_cor571,_cor572,_cor573,_cor574,_cor575,_cor576,_cor577,_cor578,_cor579,_cor580}> when 'true' ->
			let <_cor68> =
			    call 'erlang':'setelement'
				(30, _cor2, _rec72)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor68, _cor1)
		    ( <_cor581> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1115
	  <[79|[108|[100|[32|[104|[101|[97|[112|[32|[116|[111|[112]]]]]]]]]]]]> when 'true' ->
	      let <_rec74> =
		  %% Line 1116
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1116
		  case _cor2 of
		    <{'proc',_cor582,_cor583,_cor584,_cor585,_cor586,_cor587,_cor588,_cor589,_cor590,_cor591,_cor592,_cor593,_cor594,_cor595,_cor596,_cor597,_cor598,_cor599,_cor600,_cor601,_cor602,_cor603,_cor604,_cor605,_cor606,_cor607,_cor608,_cor609,_cor610,_cor611,_cor612,_cor613,_cor614}> when 'true' ->
			let <_cor72> =
			    call 'erlang':'setelement'
				(31, _cor2, _rec74)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor72, _cor1)
		    ( <_cor615> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1117
	  <[79|[108|[100|[32|[104|[101|[97|[112|[32|[101|[110|[100]]]]]]]]]]]]> when 'true' ->
	      let <_rec76> =
		  %% Line 1118
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1118
		  case _cor2 of
		    <{'proc',_cor616,_cor617,_cor618,_cor619,_cor620,_cor621,_cor622,_cor623,_cor624,_cor625,_cor626,_cor627,_cor628,_cor629,_cor630,_cor631,_cor632,_cor633,_cor634,_cor635,_cor636,_cor637,_cor638,_cor639,_cor640,_cor641,_cor642,_cor643,_cor644,_cor645,_cor646,_cor647,_cor648}> when 'true' ->
			let <_cor76> =
			    call 'erlang':'setelement'
				(32, _cor2, _rec76)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor76, _cor1)
		    ( <_cor649> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1120
	  <[76|[97|[115|[116|[32|[99|[97|[108|[108|[115]]]]]]]]]]> when 'true' ->
	      let <_rec78> =
		  %% Line 1121
		  apply 'get_lines_to_empty'/1
		      (_cor4)
	      in  %% Line 1121
		  case _cor2 of
		    <{'proc',_cor650,_cor651,_cor652,_cor653,_cor654,_cor655,_cor656,_cor657,_cor658,_cor659,_cor660,_cor661,_cor662,_cor663,_cor664,_cor665,_cor666,_cor667,_cor668,_cor669,_cor670,_cor671,_cor672,_cor673,_cor674,_cor675,_cor676,_cor677,_cor678,_cor679,_cor680,_cor681,_cor682}> when 'true' ->
			let <_cor80> =
			    call 'erlang':'setelement'
				(11, _cor2, _rec78)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor80, _cor1)
		    ( <_cor683> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1122
	  <[76|[105|[110|[107|[32|[108|[105|[115|[116]]]]]]]]]> when 'true' ->
	      let <_cor81> =
		  %% Line 1123
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1123
		  case apply 'parse_link_list'/4
			   (_cor81, [], [], []) of
		    <{Links,Monitors,MonitoredBy}> when 'true' ->
			%% Line 1124
			case _cor2 of
			  <{'proc',_cor684,_cor685,_cor686,_cor687,_cor688,_cor689,_cor690,_cor691,_cor692,_cor693,_cor694,_cor695,_cor696,_cor697,_cor698,_cor699,_cor700,_cor701,_cor702,_cor703,_cor704,_cor705,_cor706,_cor707,_cor708,_cor709,_cor710,_cor711,_cor712,_cor713,_cor714,_cor715,_cor716}> when 'true' ->
			      let <_cor84> =
				  %% Line 1126
				  call 'erlang':'setelement'
				      (14, _cor2, MonitoredBy)
			      in  let <_cor85> =
				      %% Line 1125
				      call 'erlang':'setelement'
					  (13, _cor84, Monitors)
				  in  let <_cor87> =
					  call 'erlang':'setelement'
					      (12, _cor85, Links)
				      in  apply 'get_procinfo'/4
					      (_cor4, _cor3, _cor87, _cor1)
			  ( <_cor717> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','proc'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    ( <_cor82> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor82})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1127
	  <[80|[114|[111|[103|[114|[97|[109|[32|[99|[111|[117|[110|[116|[101|[114]]]]]]]]]]]]]]]> when 'true' ->
	      let <_rec81> =
		  %% Line 1128
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1128
		  case _cor2 of
		    <{'proc',_cor718,_cor719,_cor720,_cor721,_cor722,_cor723,_cor724,_cor725,_cor726,_cor727,_cor728,_cor729,_cor730,_cor731,_cor732,_cor733,_cor734,_cor735,_cor736,_cor737,_cor738,_cor739,_cor740,_cor741,_cor742,_cor743,_cor744,_cor745,_cor746,_cor747,_cor748,_cor749,_cor750}> when 'true' ->
			let <_cor91> =
			    call 'erlang':'setelement'
				(15, _cor2, _rec81)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor91, _cor1)
		    ( <_cor751> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1129
	  <[67|[80]]> when 'true' ->
	      let <_rec83> =
		  %% Line 1130
		  apply 'val'/1
		      (_cor4)
	      in  %% Line 1130
		  case _cor2 of
		    <{'proc',_cor752,_cor753,_cor754,_cor755,_cor756,_cor757,_cor758,_cor759,_cor760,_cor761,_cor762,_cor763,_cor764,_cor765,_cor766,_cor767,_cor768,_cor769,_cor770,_cor771,_cor772,_cor773,_cor774,_cor775,_cor776,_cor777,_cor778,_cor779,_cor780,_cor781,_cor782,_cor783,_cor784}> when 'true' ->
			let <_cor95> =
			    call 'erlang':'setelement'
				(16, _cor2, _rec83)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor95, _cor1)
		    ( <_cor785> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1131
	  <[97|[114|[105|[116|[121|[32|[61|[32|Arity]]]]]]]]> when 'true' ->
	      let <_rec85> =
		  %% Line 1133
		  call 'erlang':'--'
		      (Arity, [13|[10]])
	      in  %% Line 1133
		  case _cor2 of
		    <{'proc',_cor786,_cor787,_cor788,_cor789,_cor790,_cor791,_cor792,_cor793,_cor794,_cor795,_cor796,_cor797,_cor798,_cor799,_cor800,_cor801,_cor802,_cor803,_cor804,_cor805,_cor806,_cor807,_cor808,_cor809,_cor810,_cor811,_cor812,_cor813,_cor814,_cor815,_cor816,_cor817,_cor818}> when 'true' ->
			let <_cor99> =
			    call 'erlang':'setelement'
				(17, _cor2, _rec85)
			in  apply 'get_procinfo'/4
				(_cor4, _cor3, _cor99, _cor1)
		    ( <_cor819> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','proc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1134
	  <[61|_X_next_tag]> when 'true' ->
	      _cor2
	  %% Line 1136
	  <Other> when 'true' ->
	      do  %% Line 1137
		  apply 'unexpected'/3
		      (_cor4, Other, [112|[114|[111|[99|[101|[115|[115|[32|[105|[110|[102|[111]]]]]]]]]]]])
		  %% Line 1138
		  apply 'get_procinfo'/4
		      (_cor4, _cor3, _cor2, _cor1)
	end
'parse_link_list'/4 =
    %% Line 1141
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[SB|Str],Links,Monitors,MonitoredBy>
	      when let <_cor4> =
		    call 'erlang':'=='
			(SB, 91)
		in  let <_cor5> =
			call 'erlang':'=='
			    (SB, 93)
		    in  call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 1142
	      apply 'parse_link_list'/4
		  (Str, Links, Monitors, MonitoredBy)
	  %% Line 1143
	  <Str = [35|[80|[111|[114|[116|_cor17]]]]],Links,Monitors,MonitoredBy> when 'true' ->
	      %% Line 1144
	      case apply 'parse_port'/1
		       (Str) of
		<{Link,Rest}> when 'true' ->
		    %% Line 1145
		    apply 'parse_link_list'/4
			(Rest, [Link|Links], Monitors, MonitoredBy)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1146
	  <Str = [60|_cor18],Links,Monitors,MonitoredBy> when 'true' ->
	      %% Line 1147
	      case apply 'parse_pid'/1
		       (Str) of
		<{Link,Rest}> when 'true' ->
		    %% Line 1148
		    apply 'parse_link_list'/4
			(Rest, [Link|Links], Monitors, MonitoredBy)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1149
	  <[123|[116|[111|[44|Str]]]],Links,Monitors,MonitoredBy> when 'true' ->
	      %% Line 1150
	      case apply 'parse_monitor'/1
		       (Str) of
		<{Mon,Rest}> when 'true' ->
		    %% Line 1151
		    apply 'parse_link_list'/4
			(Rest, Links, [Mon|Monitors], MonitoredBy)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1152
	  <[123|[102|[114|[111|[109|[44|Str]]]]]],Links,Monitors,MonitoredBy> when 'true' ->
	      %% Line 1153
	      case apply 'parse_monitor'/1
		       (Str) of
		<{Mon,Rest}> when 'true' ->
		    %% Line 1154
		    apply 'parse_link_list'/4
			(Rest, Links, Monitors, [Mon|MonitoredBy])
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1155
	  <[44|[32|Rest]],Links,Monitors,MonitoredBy> when 'true' ->
	      %% Line 1156
	      apply 'parse_link_list'/4
		  (Rest, Links, Monitors, MonitoredBy)
	  %% Line 1157
	  <[],Links,Monitors,MonitoredBy> when 'true' ->
	      let <_cor12> =
		  %% Line 1158
		  call 'lists':'reverse'
		      (Links)
	      in  let <_cor11> =
		      %% Line 1158
		      call 'lists':'reverse'
			  (Monitors)
		  in  let <_cor10> =
			  %% Line 1158
			  call 'lists':'reverse'
			      (MonitoredBy)
		      in  %% Line 1158
			  {_cor12,_cor11,_cor10}
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'parse_link_list',4}}] )
	    -| ['compiler_generated'] )
	end
'parse_port'/1 =
    %% Line 1160
    fun (_cor0) ->
	%% Line 1161
	case apply 'parse_link'/2
		 (_cor0, []) of
	  <{Port,Rest}> when 'true' ->
	      %% Line 1162
	      {{Port,Port},Rest}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_pid'/1 =
    %% Line 1164
    fun (_cor0) ->
	%% Line 1165
	case apply 'parse_link'/2
		 (_cor0, []) of
	  <{Pid,Rest}> when 'true' ->
	      %% Line 1166
	      {{Pid,Pid},Rest}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_monitor'/1 =
    %% Line 1168
    fun (_cor0) ->
	%% Line 1169
	case apply 'parse_link'/2
		 (_cor0, []) of
	  %% Line 1170
	  <{Pid,[44|Rest1]}> when 'true' ->
	      %% Line 1171
	      case apply 'parse_link'/2
		       (Rest1, []) of
		%% Line 1172
		<{Ref,[125|Rest2]}> when 'true' ->
		    let <_cor1> =
			%% Line 1173
			call 'erlang':'++'
			    (Ref, [41])
		    in  let <_cor2> =
			    %% Line 1173
			    [32|[40|_cor1]]
			in  let <_cor3> =
				%% Line 1173
				call 'erlang':'++'
				    (Pid, _cor2)
			    in  %% Line 1173
				{{Pid,_cor3},Rest2}
		%% Line 1174
		<{Ref,[]}> when 'true' ->
		    let <_cor4> =
			%% Line 1175
			call 'erlang':'++'
			    (Ref, [41])
		    in  let <_cor5> =
			    %% Line 1175
			    [32|[40|_cor4]]
			in  let <_cor6> =
				%% Line 1175
				call 'erlang':'++'
				    (Pid, _cor5)
			    in  %% Line 1175
				{{Pid,_cor6},[]}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1177
	  <{Pid,[]}> when 'true' ->
	      let <_cor8> =
		  %% Line 1178
		  call 'erlang':'++'
		      (Pid, [32|[40|[117|[110|[107|[110|[111|[119|[110|[95|[114|[101|[102|[41]]]]]]]]]]]]]])
	      in  %% Line 1178
		  {{Pid,_cor8},[]}
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'parse_link'/2 =
    %% Line 1181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[62|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1182
		  call 'lists':'reverse'
		      (Acc, [62])
	      in  %% Line 1182
		  {_cor2,Rest}
	  %% Line 1183
	  <[H|T],Acc> when 'true' ->
	      %% Line 1184
	      apply 'parse_link'/2
		  (T, [H|Acc])
	  %% Line 1185
	  <[],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1187
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1187
		  {_cor3,[]}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'parse_link',2}}] )
	    -| ['compiler_generated'] )
	end
'maybe_other_node'/1 =
    %% Line 1189
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1191
	    case apply 'split'/2
		     (46, _cor0) of
	      %% Line 1192
	      <{[60|N],_X_Rest}> when 'true' ->
		  %% Line 1193
		  N
	      %% Line 1194
	      <{[35|[80|[111|[114|[116|[60|N]]]]]],_X_Rest}> when 'true' ->
		  %% Line 1195
		  N
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	in  let <Ms> =
		%% Line 1198
		[{{{'$1','$2'},'$3'},[{'=:=','$1','visible_node'}|[{'=:=','$3',{'const',_cor2}}|[]]],[{{[86|[105|[115|[105|[98|[108|[101|[32|[78|[111|[100|[101]]]]]]]]]]]],'$2'}}]}|[%% Line 1200
																						      {{{'$1','$2'},'$3'},[{'=:=','$1','hidden_node'}|[{'=:=','$3',{'const',_cor2}}|[]]],[{{[72|[105|[100|[100|[101|[110|[32|[78|[111|[100|[101]]]]]]]]]]],'$2'}}]}|[%% Line 1202
																																										     {{{'$1','$2'},'$3'},[{'=:=','$1','not_connected'}|[{'=:=','$3',{'const',_cor2}}|[]]],[{{[78|[111|[116|[32|[67|[111|[110|[110|[101|[99|[116|[101|[100|[32|[78|[111|[100|[101]]]]]]]]]]]]]]]]]],'$2'}}]}|[]]]]
	    in  %% Line 1206
		case call 'ets':'select'
			 ('cdv_dump_index_table', Ms) of
		  %% Line 1207
		  <[]> when 'true' ->
		      %% Line 1208
		      'not_found'
		  %% Line 1209
		  <[_cor7|[]]> when 'true' ->
		      %% Line 1210
		      {'other_node',_cor2}
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'expand_memory'/4 =
    %% Line 1214
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <BinAddrAdj> =
	    %% Line 1215
	    apply 'get_bin_addr_adj'/1
		(_cor1)
	in  do  %% Line 1216
		call 'erlang':'put'
		    ('fd', _cor3)
		let <Dict> =
		    %% Line 1217
		    apply 'read_heap'/4
			(_cor3, _cor2, BinAddrAdj, _cor0)
		in  let <_cor8> =
			%% Line 1218
			apply 'read_stack_dump'/4
			    (_cor3, _cor2, BinAddrAdj, Dict)
		    in  let <_cor7> =
			    %% Line 1219
			    apply 'read_messages'/4
				(_cor3, _cor2, BinAddrAdj, Dict)
			in  let <_cor6> =
				%% Line 1220
				apply 'read_dictionary'/4
				    (_cor3, _cor2, BinAddrAdj, Dict)
			    in  let <Expanded> = {_cor8,_cor7,_cor6}
				in  do  %% Line 1221
					call 'erlang':'erase'
					    ('fd')
					%% Line 1222
					Expanded
'get_bin_addr_adj'/1 =
    %% Line 1229
    fun (_cor0) ->
	case _cor0 of
	  <DumpVsn>
	      when call 'erlang':'<'
		    (_cor0,
		     [0|[3]]) ->
	      276701161105643274240
	  %% Line 1231
	  <_cor2> when 'true' ->
	      %% Line 1232
	      0
	end
'read_binaries'/2 =
    %% Line 1237
    fun (_cor1,_cor0) ->
	let <AllBinaries> =
	    %% Line 1238
	    apply 'lookup_index'/1
		('binary')
	in  let <AddrAdj> =
		%% Line 1239
		apply 'get_bin_addr_adj'/1
		    (_cor0)
	    in  let <Fun> =
		    %% Line 1240
		    ( fun (_cor10,_cor9) ->
			  case <_cor10,_cor9> of
			    <{Addr0,Pos},Dict0> when 'true' ->
				do  %% Line 1241
				    apply 'pos_bof'/2
					(_cor1, Pos)
				    %% Line 1242
				    case apply 'get_hex'/1
					     (Addr0) of
				      <{HexAddr,_cor17}> when 'true' ->
					  let <Addr> =
					      %% Line 1243
					      call 'erlang':'bor'
						  (HexAddr, AddrAdj)
					  in  let <_cor7> =
						  %% Line 1245
						  case apply 'line_head'/1
							   (_cor1) of
						    %% Line 1246
						    <{'eof',_cor18}> when 'true' ->
							'#CDVTruncatedBinary'
						    %% Line 1247
						    <_X_Size> when 'true' ->
							{'#CDVBin',Pos}
						  end
					      in  %% Line 1249
						  call 'gb_trees':'enter'
						      (Addr, _cor7, Dict0)
				      ( <_cor4> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor4})
					-| ['compiler_generated'] )
				    end
			    ( <_cor12,_cor11> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor12,_cor11})
				    -| [{'function_name',{'-read_binaries/2-fun-0-',2}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-read_binaries/2-fun-0-'}}] )
		in  let <_cor14> =
			%% Line 1251
			call 'gb_trees':'empty'
			    ()
		    in  %% Line 1251
			apply 'progress_foldl'/4
			    ([80|[114|[111|[99|[101|[115|[115|[105|[110|[103|[32|[98|[105|[110|[97|[114|[105|[101|[115]]]]]]]]]]]]]]]]]]], Fun, _cor14, AllBinaries)
'read_stack_dump'/4 =
    %% Line 1257
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1258
	case apply 'lookup_index'/2
		 ('proc_stack', _cor2) of
	  %% Line 1259
	  <[{_cor9,Start}|[]]> when 'true' ->
	      do  %% Line 1260
		  apply 'pos_bof'/2
		      (_cor3, Start)
		  %% Line 1261
		  apply 'read_stack_dump1'/4
		      (_cor3, _cor1, _cor0, [])
	  %% Line 1262
	  <[]> when 'true' ->
	      %% Line 1263
	      []
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'read_stack_dump1'/4 =
    %% Line 1265
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1267
	case apply 'val'/1
		 (_cor3) of
	  %% Line 1268
	  <[61|_X_next_tag]> when 'true' ->
	      %% Line 1269
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 1270
	  <Line> when 'true' ->
	      let <Stack> =
		  %% Line 1271
		  apply 'parse_top'/3
		      (Line, _cor2, _cor1)
	      in  %% Line 1272
		  apply 'read_stack_dump1'/4
		      (_cor3, _cor2, _cor1, [Stack|_cor0])
	end
'parse_top'/3 =
    %% Line 1275
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1276
	case apply 'get_label'/1
		 (_cor2) of
	  <{Label,Line1}> when 'true' ->
	      %% Line 1277
	      case apply 'parse_term'/3
		       (Line1, _cor1, _cor0) of
		<{Term,Line,_cor9}>
		    when call 'erlang':'=:='
			  (_cor9,
			   _cor0) ->
		    %% Line 1278
		    case apply 'skip_blanks'/1
			     (Line) of
		      <[]> when 'true' ->
			  %% Line 1279
			  {Label,Term}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'read_messages'/4 =
    %% Line 1285
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1286
	case apply 'lookup_index'/2
		 ('proc_messages', _cor2) of
	  %% Line 1287
	  <[{_cor9,Start}|[]]> when 'true' ->
	      do  %% Line 1288
		  apply 'pos_bof'/2
		      (_cor3, Start)
		  %% Line 1289
		  apply 'read_messages1'/4
		      (_cor3, _cor1, _cor0, [])
	  %% Line 1290
	  <[]> when 'true' ->
	      %% Line 1291
	      []
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'read_messages1'/4 =
    %% Line 1293
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1295
	case apply 'val'/1
		 (_cor3) of
	  %% Line 1296
	  <[61|_X_next_tag]> when 'true' ->
	      %% Line 1297
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 1298
	  <Line> when 'true' ->
	      let <Msg> =
		  %% Line 1299
		  apply 'parse_message'/3
		      (Line, _cor2, _cor1)
	      in  %% Line 1300
		  apply 'read_messages1'/4
		      (_cor3, _cor2, _cor1, [Msg|_cor0])
	end
'parse_message'/3 =
    %% Line 1303
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1304
	case apply 'parse_term'/3
		 (_cor2, _cor1, _cor0) of
	  <{Msg,[58|Line1],_cor9}> when 'true' ->
	      %% Line 1305
	      case apply 'parse_term'/3
		       (Line1, _cor1, _cor0) of
		<{Token,Line,_cor10}> when 'true' ->
		    %% Line 1306
		    case apply 'skip_blanks'/1
			     (Line) of
		      <[]> when 'true' ->
			  %% Line 1307
			  {Msg,Token}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'read_dictionary'/4 =
    %% Line 1313
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1314
	case apply 'lookup_index'/2
		 ('proc_dictionary', _cor2) of
	  %% Line 1315
	  <[{_cor9,Start}|[]]> when 'true' ->
	      do  %% Line 1316
		  apply 'pos_bof'/2
		      (_cor3, Start)
		  %% Line 1317
		  apply 'read_dictionary1'/4
		      (_cor3, _cor1, _cor0, [])
	  %% Line 1318
	  <[]> when 'true' ->
	      %% Line 1319
	      []
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'read_dictionary1'/4 =
    %% Line 1321
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1323
	case apply 'val'/1
		 (_cor3) of
	  %% Line 1324
	  <[61|_X_next_tag]> when 'true' ->
	      %% Line 1325
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 1326
	  <Line> when 'true' ->
	      let <Msg> =
		  %% Line 1327
		  apply 'parse_dictionary'/3
		      (Line, _cor2, _cor1)
	      in  %% Line 1328
		  apply 'read_dictionary1'/4
		      (_cor3, _cor2, _cor1, [Msg|_cor0])
	end
'parse_dictionary'/3 =
    %% Line 1331
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1332
	case apply 'parse_term'/3
		 (_cor2, _cor1, _cor0) of
	  <{Entry,Line,_cor8}> when 'true' ->
	      %% Line 1333
	      case apply 'skip_blanks'/1
		       (Line) of
		<[]> when 'true' ->
		    %% Line 1334
		    Entry
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'read_heap'/4 =
    %% Line 1340
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1341
	case apply 'lookup_index'/2
		 ('proc_heap', _cor2) of
	  %% Line 1342
	  <[{_cor9,Pos}|[]]> when 'true' ->
	      do  %% Line 1343
		  apply 'pos_bof'/2
		      (_cor3, Pos)
		  %% Line 1344
		  apply 'read_heap'/2
		      (_cor1, _cor0)
	  %% Line 1345
	  <[]> when 'true' ->
	      _cor0
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'read_heap'/2 =
    %% Line 1349
    fun (_cor1,_cor0) ->
	%% Line 1351
	case call 'erlang':'get'
		 ('fd') of
	  %% Line 1352
	  <'end_of_heap'> when 'true' ->
	      _cor0
	  %% Line 1354
	  <Fd> when 'true' ->
	      %% Line 1355
	      case apply 'val'/1
		       (Fd) of
		%% Line 1356
		<[61|_X_next_tag]> when 'true' ->
		    do  %% Line 1357
			call 'erlang':'put'
			    ('fd', 'end_of_heap')
			_cor0
		%% Line 1359
		<Line> when 'true' ->
		    let <Dict> =
			%% Line 1360
			apply 'parse'/3
			    (Line, _cor1, _cor0)
		    in  %% Line 1361
			apply 'read_heap'/2
			    (_cor1, Dict)
	      end
	end
'parse'/3 =
    %% Line 1365
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1366
	case apply 'get_hex'/1
		 (_cor2) of
	  <{Addr,[58|Line1]}> when 'true' ->
	      %% Line 1367
	      case apply 'parse_heap_term'/4
		       (Line1, Addr, _cor1, _cor0) of
		<{_X_Term,Line,Dict}> when 'true' ->
		    %% Line 1368
		    case apply 'skip_blanks'/1
			     (Line) of
		      <[]> when 'true' ->
			  %% Line 1369
			  Dict
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'get_port'/2 =
    %% Line 1374
    fun (_cor1,_cor0) ->
	%% Line 1375
	case apply 'lookup_index'/2
		 ('port', _cor0) of
	  %% Line 1376
	  <[{_cor7,Start}|[]]> when 'true' ->
	      let <Fd> =
		  %% Line 1377
		  apply 'open'/1
		      (_cor1)
	      in  do  %% Line 1378
		      apply 'pos_bof'/2
			  (Fd, Start)
		      let <R> =
			  %% Line 1379
			  apply 'get_portinfo'/2
			      (Fd, {'port',_cor0,'undefined','undefined','undefined','undefined','undefined','undefined'})
		      in  do  %% Line 1380
			      apply 'close'/1
				  (Fd)
			      %% Line 1381
			      {'ok',R}
	  %% Line 1382
	  <[]> when 'true' ->
	      %% Line 1383
	      apply 'maybe_other_node'/1
		  (_cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'get_ports'/1 =
    %% Line 1388
    fun (_cor0) ->
	let <ParseFun> =
	    %% Line 1389
	    ( fun (_cor3,_cor2) ->
		  let <_cor1> =
		      apply 'port_to_tuple'/1
			  (_cor2)
		  in  apply 'get_portinfo'/2
			  (_cor3, {'port',_cor1,'undefined','undefined','undefined','undefined','undefined','undefined'})
	      -| [{'id',{0,0,'-get_ports/1-fun-0-'}}] )
	in  %% Line 1390
	    apply 'lookup_and_parse_index'/4
		(_cor0, 'port', ParseFun, [112|[111|[114|[116|[115]]]]])
'port_to_tuple'/1 =
    %% Line 1394
    fun (_cor0) ->
	case _cor0 of
	  <[35|[80|[111|[114|[116|[60|Port]]]]]]> when 'true' ->
	      %% Line 1395
	      case call 'string':'tokens'
		       (Port, [46|[62]]) of
		<[I1|[I2|[]]]> when 'true' ->
		    let <_cor3> =
			%% Line 1396
			call 'erlang':'list_to_integer'
			    (I1)
		    in  let <_cor2> =
			    %% Line 1396
			    call 'erlang':'list_to_integer'
				(I2)
			in  %% Line 1396
			    {_cor3,_cor2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'port_to_tuple',1}}] )
	    -| ['compiler_generated'] )
	end
'get_portinfo'/2 =
    %% Line 1398
    fun (_cor1,_cor0) ->
	%% Line 1399
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 1400
	  <[83|[108|[111|[116]]]]> when 'true' ->
	      let <_cor2> =
		  %% Line 1402
		  apply 'val'/1
		      (_cor1)
	      in  let <_rec87> =
		      %% Line 1402
		      call 'erlang':'list_to_integer'
			  (_cor2)
		  in  %% Line 1402
		      case _cor0 of
			<{'port',_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}> when 'true' ->
			    let <_cor6> =
				call 'erlang':'setelement'
				    (3, _cor0, _rec87)
			    in  apply 'get_portinfo'/2
				    (_cor1, _cor6)
			( <_cor77> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','port'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1403
	  <[67|[111|[110|[110|[101|[99|[116|[101|[100]]]]]]]]]> when 'true' ->
	      let <Connected0> =
		  %% Line 1405
		  apply 'val'/1
		      (_cor1)
	      in  let <_cor12> =
		      %% Line 1407
		      try
			  call 'erlang':'list_to_pid'
			      (Connected0)
		      of <_cor8> ->
			  _cor8
		      catch <_cor11,_cor10,_cor9> ->
			  case <_cor11,_cor10,_cor9> of
			    %% Line 1408
			    <'error','badarg',_cor78> when 'true' ->
				Connected0
			    ( <_cor11,_cor10,_cor9> when 'true' ->
				  primop 'raise'
				      (_cor9, _cor10)
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 1410
		      case _cor0 of
			<{'port',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
			    let <_cor16> =
				call 'erlang':'setelement'
				    (4, _cor0, _cor12)
			    in  apply 'get_portinfo'/2
				    (_cor1, _cor16)
			( <_cor86> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','port'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1411
	  <[76|[105|[110|[107|[115]]]]]> when 'true' ->
	      let <_cor17> =
		  %% Line 1412
		  apply 'val'/1
		      (_cor1)
	      in  let <Pids> =
		      %% Line 1412
		      apply 'split_pid_list_no_space'/1
			  (_cor17)
		  in  let <_cor23> =
			  %% Line 1413
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor21) ->
					case _cor21 of
					  <[Pid|_cor20]> when 'true' ->
					      let <_cor22> =
						  apply 'lc$^0'/1
						      (_cor20)
					      in  ( [{Pid,Pid}|_cor22]
						    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor21> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor21})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Pids)
			    -| ['list_comprehension'] )
		      in  %% Line 1414
			  case _cor0 of
			    <{'port',_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93}> when 'true' ->
				let <_cor27> =
				    call 'erlang':'setelement'
					(5, _cor0, _cor23)
				in  apply 'get_portinfo'/2
					(_cor1, _cor27)
			    ( <_cor94> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','port'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1415
	  <[82|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[97|[115]]]]]]]]]]]]]> when 'true' ->
	      let <_rec91> =
		  %% Line 1416
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1416
		  case _cor0 of
		    <{'port',_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101}> when 'true' ->
			let <_cor31> =
			    call 'erlang':'setelement'
				(6, _cor0, _rec91)
			in  apply 'get_portinfo'/2
				(_cor1, _cor31)
		    ( <_cor102> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','port'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1417
	  <[77|[111|[110|[105|[116|[111|[114|[115]]]]]]]]> when 'true' ->
	      let <_cor32> =
		  %% Line 1418
		  apply 'val'/1
		      (_cor1)
	      in  let <Monitors0> =
		      %% Line 1418
		      call 'string':'tokens'
			  (_cor32, [40|[41]])
		  in  let <_cor42> =
			  %% Line 1419
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor36) ->
					case _cor36 of
					  <[%% Line 1422
					    Mon|_cor35]> when 'true' ->
					      %% Line 1420
					      case call 'string':'tokens'
						       (Mon, [44]) of
						<[Pid|[Ref|[]]]> when 'true' ->
						    let <_cor38> =
							%% Line 1421
							call 'erlang':'++'
							    (Ref, [41])
						    in  let <_cor39> =
							    %% Line 1421
							    [32|[40|_cor38]]
							in  let <_cor40> =
								%% Line 1421
								call 'erlang':'++'
								    (Pid, _cor39)
							    in  let <_cor41> =
								    %% Line 1422
								    apply 'lc$^1'/1
									(_cor35)
								in  ( [%% Line 1421
								       {Pid,_cor40}|_cor41]
								      -| ['compiler_generated'] )
						( <_cor37> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor37})
						  -| ['compiler_generated'] )
					      end
					  <[]> when 'true' ->
					      []
					  ( <_cor36> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor36})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^1'/1
				    (%% Line 1422
				     Monitors0)
			    -| ['list_comprehension'] )
		      in  %% Line 1423
			  case _cor0 of
			    <{'port',_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109}> when 'true' ->
				let <_cor46> =
				    call 'erlang':'setelement'
					(7, _cor0, _cor42)
				in  apply 'get_portinfo'/2
					(_cor1, _cor46)
			    ( <_cor110> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','port'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1424
	  <[80|[111|[114|[116|[32|[99|[111|[110|[116|[114|[111|[108|[115|[32|[108|[105|[110|[107|[101|[100|[45|[105|[110|[32|[100|[114|[105|[118|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor47> =
		  %% Line 1425
		  apply 'val'/1
		      (_cor1)
	      in  let <Str> =
		      %% Line 1425
		      call 'lists':'flatten'
			  ([[76|[105|[110|[107|[101|[100|[32|[105|[110|[32|[100|[114|[105|[118|[101|[114|[58|[32]]]]]]]]]]]]]]]]]]|_cor47])
		  in  %% Line 1426
		      case _cor0 of
			<{'port',_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117}> when 'true' ->
			    let <_cor51> =
				call 'erlang':'setelement'
				    (8, _cor0, Str)
			    in  apply 'get_portinfo'/2
				    (_cor1, _cor51)
			( <_cor118> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','port'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1427
	  <[80|[111|[114|[116|[32|[99|[111|[110|[116|[114|[111|[108|[115|[32|[101|[120|[116|[101|[114|[110|[97|[108|[32|[112|[114|[111|[99|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor52> =
		  %% Line 1428
		  apply 'val'/1
		      (_cor1)
	      in  let <Str> =
		      %% Line 1428
		      call 'lists':'flatten'
			  ([[69|[120|[116|[101|[114|[110|[97|[108|[32|[112|[114|[111|[99|[58|[32]]]]]]]]]]]]]]]|_cor52])
		  in  %% Line 1429
		      case _cor0 of
			<{'port',_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125}> when 'true' ->
			    let <_cor56> =
				call 'erlang':'setelement'
				    (8, _cor0, Str)
			    in  apply 'get_portinfo'/2
				    (_cor1, _cor56)
			( <_cor126> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','port'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1430
	  <[80|[111|[114|[116|[32|[105|[115|[32|[97|[32|[102|[105|[108|[101]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor57> =
		  %% Line 1431
		  apply 'val'/1
		      (_cor1)
	      in  let <Str> =
		      %% Line 1431
		      call 'lists':'flatten'
			  ([[70|[105|[108|[101|[58|[32]]]]]]|_cor57])
		  in  %% Line 1432
		      case _cor0 of
			<{'port',_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133}> when 'true' ->
			    let <_cor61> =
				call 'erlang':'setelement'
				    (8, _cor0, Str)
			    in  apply 'get_portinfo'/2
				    (_cor1, _cor61)
			( <_cor134> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','port'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1433
	  <[80|[111|[114|[116|[32|[105|[115|[32|[85|[78|[73|[88|[32|[102|[100|[32|[110|[111|[116|[32|[111|[112|[101|[110|[101|[100|[32|[98|[121|[32|[101|[109|[117|[108|[97|[116|[111|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor62> =
		  %% Line 1434
		  apply 'val'/1
		      (_cor1)
	      in  let <Str> =
		      %% Line 1434
		      call 'lists':'flatten'
			  ([[85|[78|[73|[88|[32|[102|[100|[32|[110|[111|[116|[32|[111|[112|[101|[110|[101|[100|[32|[98|[121|[32|[101|[109|[117|[108|[97|[116|[111|[114|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|_cor62])
		  in  %% Line 1435
		      case _cor0 of
			<{'port',_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141}> when 'true' ->
			    let <_cor66> =
				call 'erlang':'setelement'
				    (8, _cor0, Str)
			    in  apply 'get_portinfo'/2
				    (_cor1, _cor66)
			( <_cor142> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','port'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1436
	  <[61|_X_next_tag]> when 'true' ->
	      _cor0
	  %% Line 1438
	  <Other> when 'true' ->
	      do  %% Line 1439
		  apply 'unexpected'/3
		      (_cor1, Other, [112|[111|[114|[116|[32|[105|[110|[102|[111]]]]]]]]])
		  _cor0
	end
'split_pid_list_no_space'/1 =
    %% Line 1443
    fun (_cor0) ->
	%% Line 1444
	apply 'split_pid_list_no_space'/3
	    (_cor0, [], [])
'split_pid_list_no_space'/3 =
    %% Line 1445
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[62|Rest],Acc,Pids> when 'true' ->
	      let <_cor3> =
		  %% Line 1446
		  call 'lists':'reverse'
		      (Acc, [62])
	      in  %% Line 1446
		  apply 'split_pid_list_no_space'/3
		      (Rest, [], [_cor3|Pids])
	  %% Line 1447
	  <[H|T],Acc,Pids> when 'true' ->
	      %% Line 1448
	      apply 'split_pid_list_no_space'/3
		  (T, [H|Acc], Pids)
	  %% Line 1449
	  <[],[],Pids> when 'true' ->
	      %% Line 1450
	      call 'lists':'reverse'
		  (Pids)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'split_pid_list_no_space',3}}] )
	    -| ['compiler_generated'] )
	end
'get_ets_tables'/3 =
    %% Line 1454
    fun (_cor2,_cor1,_cor0) ->
	let <ParseFun> =
	    %% Line 1455
	    ( fun (_cor5,_cor4) ->
		  let <_cor3> =
		      %% Line 1456
		      call 'erlang':'list_to_pid'
			  (_cor4)
		  in  %% Line 1456
		      apply 'get_etsinfo'/3
			  (_cor5, {'ets_table',_cor3,'undefined','undefined','undefined',[104|[97|[115|[104]]]],'undefined','undefined','undefined'}, _cor0)
	      -| [{'id',{0,0,'-get_ets_tables/3-fun-0-'}}] )
	in  %% Line 1458
	    apply 'lookup_and_parse_index'/4
		(_cor2, {'ets',_cor1}, ParseFun, [101|[116|[115]]])
'get_etsinfo'/3 =
    %% Line 1460
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1461
	case apply 'line_head'/1
		 (_cor2) of
	  %% Line 1462
	  <[83|[108|[111|[116]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1463
		  apply 'val'/1
		      (_cor2)
	      in  let <_rec98> =
		      %% Line 1463
		      call 'erlang':'list_to_integer'
			  (_cor3)
		  in  %% Line 1463
		      case _cor1 of
			<{'ets_table',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
			    let <_cor7> =
				call 'erlang':'setelement'
				    (3, _cor1, _rec98)
			    in  apply 'get_etsinfo'/3
				    (_cor2, _cor7, _cor0)
			( <_cor51> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','ets_table'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1464
	  <[84|[97|[98|[108|[101]]]]]> when 'true' ->
	      let <_rec100> =
		  %% Line 1465
		  apply 'val'/1
		      (_cor2)
	      in  %% Line 1465
		  case _cor1 of
		    <{'ets_table',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}> when 'true' ->
			let <_cor11> =
			    call 'erlang':'setelement'
				(4, _cor1, _rec100)
			in  apply 'get_etsinfo'/3
				(_cor2, _cor11, _cor0)
		    ( <_cor60> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ets_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1466
	  <[78|[97|[109|[101]]]]> when 'true' ->
	      let <_rec102> =
		  %% Line 1467
		  apply 'val'/1
		      (_cor2)
	      in  %% Line 1467
		  case _cor1 of
		    <{'ets_table',_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}> when 'true' ->
			let <_cor15> =
			    call 'erlang':'setelement'
				(5, _cor1, _rec102)
			in  apply 'get_etsinfo'/3
				(_cor2, _cor15, _cor0)
		    ( <_cor69> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ets_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1468
	  <[79|[114|[100|[101|[114|[101|[100|[32|[115|[101|[116|[32|[40|[65|[86|[76|[32|[116|[114|[101|[101|[41|[44|[32|[69|[108|[101|[109|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      do  %% Line 1469
		  apply 'skip_rest_of_line'/1
		      (_cor2)
		  %% Line 1470
		  case _cor1 of
		    <{'ets_table',_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77}> when 'true' ->
			let <_cor17> =
			    call 'erlang':'setelement'
				(7, _cor1, [45])
			in  let <_cor19> =
				call 'erlang':'setelement'
				    (6, _cor17, [116|[114|[101|[101]]]])
			    in  apply 'get_etsinfo'/3
				    (_cor2, _cor19, _cor0)
		    ( <_cor78> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ets_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1471
	  <[66|[117|[99|[107|[101|[116|[115]]]]]]]> when 'true' ->
	      let <_cor20> =
		  %% Line 1474
		  apply 'val'/1
		      (_cor2)
	      in  let <_cor21> =
		      %% Line 1474
		      call 'string':'strip'
			  (_cor20)
		  in  let <Buckets> =
			  %% Line 1474
			  call 'erlang':'list_to_integer'
			      (_cor21)
		      in  %% Line 1475
			  case _cor1 of
			    <{'ets_table',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86}> when 'true' ->
				let <_cor25> =
				    call 'erlang':'setelement'
					(7, _cor1, Buckets)
				in  apply 'get_etsinfo'/3
					(_cor2, _cor25, _cor0)
			    ( <_cor87> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ets_table'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1476
	  <[79|[98|[106|[101|[99|[116|[115]]]]]]]> when 'true' ->
	      let <_cor26> =
		  %% Line 1477
		  apply 'val'/1
		      (_cor2)
	      in  let <_rec106> =
		      %% Line 1477
		      call 'erlang':'list_to_integer'
			  (_cor26)
		  in  %% Line 1477
		      case _cor1 of
			<{'ets_table',_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}> when 'true' ->
			    let <_cor30> =
				call 'erlang':'setelement'
				    (8, _cor1, _rec106)
			    in  apply 'get_etsinfo'/3
				    (_cor2, _cor30, _cor0)
			( <_cor96> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','ets_table'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1478
	  <[87|[111|[114|[100|[115]]]]]> when 'true' ->
	      let <_cor31> =
		  %% Line 1479
		  apply 'val'/1
		      (_cor2)
	      in  let <Words> =
		      %% Line 1479
		      call 'erlang':'list_to_integer'
			  (_cor31)
		  in  let <_cor34> =
			  %% Line 1481
			  case Words of
			    %% Line 1482
			    <-1> when 'true' ->
				-1
			    %% Line 1483
			    <_cor97> when 'true' ->
				call 'erlang':'*'
				    (Words, _cor0)
			  end
		      in  %% Line 1485
			  case _cor1 of
			    <{'ets_table',_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105}> when 'true' ->
				let <_cor38> =
				    call 'erlang':'setelement'
					(9, _cor1, _cor34)
				in  apply 'get_etsinfo'/3
					(_cor2, _cor38, _cor0)
			    ( <_cor106> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ets_table'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1486
	  <[61|_X_next_tag]> when 'true' ->
	      _cor1
	  %% Line 1488
	  <Other> when 'true' ->
	      do  %% Line 1489
		  apply 'unexpected'/3
		      (_cor2, Other, [69|[84|[83|[32|[105|[110|[102|[111]]]]]]]])
		  _cor1
	end
'get_internal_ets_tables'/2 =
    %% Line 1495
    fun (_cor1,_cor0) ->
	let <InternalEts> =
	    %% Line 1496
	    apply 'lookup_index'/1
		('internal_ets')
	in  let <Fd> =
		%% Line 1497
		apply 'open'/1
		    (_cor1)
	    in  let <_cor7> =
		    %% Line 1499
		    ( fun (_cor5) ->
			  case _cor5 of
			    <{Descr,Start}> when 'true' ->
				do  %% Line 1500
				    apply 'pos_bof'/2
					(Fd, Start)
				    let <_cor4> =
					%% Line 1501
					apply 'get_etsinfo'/3
					    (Fd, {'ets_table','undefined','undefined','undefined','undefined',[104|[97|[115|[104]]]],'undefined','undefined','undefined'}, _cor0)
				    in  %% Line 1501
					{Descr,_cor4}
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'-get_internal_ets_tables/2-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-get_internal_ets_tables/2-fun-0-'}}] )
		in  let <R> =
			%% Line 1498
			call 'lists':'map'
			    (_cor7, %% Line 1503
				    InternalEts)
		    in  do  %% Line 1504
			    apply 'close'/1
				(Fd)
			    %% Line 1505
			    R
'get_timers'/2 =
    %% Line 1509
    fun (_cor1,_cor0) ->
	let <ParseFun> =
	    %% Line 1510
	    ( fun (_cor3,_cor2) ->
		  apply 'get_timerinfo'/2
		      (_cor3, _cor2)
	      -| [{'id',{0,0,'-get_timers/2-fun-0-'}}] )
	in  let <T1> =
		%% Line 1511
		apply 'lookup_and_parse_index'/4
		    (_cor1, {'timer',_cor0}, ParseFun, [116|[105|[109|[101|[114|[115]]]]]])
	    in  let <_cor9> =
		    %% Line 1512
		    case call 'ets':'lookup'
			     ('cdv_reg_proc_table', _cor0) of
		      %% Line 1513
		      <[{_cor13,Name}|[]]> when 'true' ->
			  %% Line 1514
			  apply 'lookup_and_parse_index'/4
			      (_cor1, {'timer',Name}, ParseFun, [116|[105|[109|[101|[114|[115]]]]]])
		      %% Line 1515
		      <_cor14> when 'true' ->
			  %% Line 1516
			  []
		    end
		in  %% Line 1518
		    call 'erlang':'++'
			(T1, _cor9)
'get_timerinfo'/2 =
    %% Line 1520
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 1521
		call 'erlang':'list_to_pid'
		    (_cor0)
	in  %% Line 1521
	    case _cor2 of
	      %% Line 1522
	      <Pid>
		  when call 'erlang':'is_pid'
			(_cor2) ->
		  %% Line 1523
		  apply 'get_timerinfo_1'/2
		      (_cor1, {'timer',Pid,'undefined','undefined','undefined'})
	      %% Line 1524
	      <_cor7> when 'true' ->
		  %% Line 1525
		  case call 'ets':'lookup'
			   ('cdv_reg_proc_table', _cor0) of
		    %% Line 1526
		    <[{_cor8,Pid}|[]]>
			when call 'erlang':'is_pid'
			      (Pid) ->
			%% Line 1527
			apply 'get_timerinfo_1'/2
			    (_cor1, {'timer',Pid,_cor0,'undefined','undefined'})
		    %% Line 1528
		    <[]> when 'true' ->
			%% Line 1529
			apply 'get_timerinfo_1'/2
			    (_cor1, {'timer','undefined',_cor0,'undefined','undefined'})
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	    end
'get_timerinfo_1'/2 =
    %% Line 1533
    fun (_cor1,_cor0) ->
	%% Line 1534
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 1535
	  <[77|[101|[115|[115|[97|[103|[101]]]]]]]> when 'true' ->
	      let <_rec109> =
		  %% Line 1536
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1536
		  case _cor0 of
		    <{'timer',_cor15,_cor16,_cor17,_cor18}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(4, _cor0, _rec109)
			in  apply 'get_timerinfo_1'/2
				(_cor1, _cor5)
		    ( <_cor19> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','timer'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1537
	  <[84|[105|[109|[101|[32|[108|[101|[102|[116]]]]]]]]]> when 'true' ->
	      let <_cor6> =
		  %% Line 1538
		  apply 'val'/1
		      (_cor1)
	      in  let <_cor7> =
		      %% Line 1538
		      call 'erlang':'--'
			  (_cor6, [32|[109|[115]]])
		  in  let <TimeLeft> =
			  %% Line 1538
			  call 'erlang':'list_to_integer'
			      (_cor7)
		      in  %% Line 1539
			  case _cor0 of
			    <{'timer',_cor20,_cor21,_cor22,_cor23}> when 'true' ->
				let <_cor11> =
				    call 'erlang':'setelement'
					(5, _cor0, TimeLeft)
				in  apply 'get_timerinfo_1'/2
					(_cor1, _cor11)
			    ( <_cor24> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','timer'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1540
	  <[61|_X_next_tag]> when 'true' ->
	      _cor0
	  %% Line 1542
	  <Other> when 'true' ->
	      do  %% Line 1543
		  apply 'unexpected'/3
		      (_cor1, Other, [116|[105|[109|[101|[114|[32|[105|[110|[102|[111]]]]]]]]]])
		  _cor0
	end
'get_node'/2 =
    %% Line 1549
    fun (_cor1,_cor0) ->
	let <Ms> =
	    %% Line 1551
	    [{{{'$1','$2'},'$3'},[{'=:=','$1','visible_node'}|[{'=:=','$3',{'const',_cor0}}|[]]],[{{'visible','$2'}}]}|[%% Line 1553
															{{{'$1','$2'},'$3'},[{'=:=','$1','hidden_node'}|[{'=:=','$3',{'const',_cor0}}|[]]],[{{'hidden','$2'}}]}|[%% Line 1555
																												 {{{'$1','$2'},'$3'},[{'=:=','$1','not_connected'}|[{'=:=','$3',{'const',_cor0}}|[]]],[{{'not_connected','$2'}}]}|[]]]]
	in  %% Line 1559
	    case call 'ets':'select'
		     ('cdv_dump_index_table', Ms) of
	      %% Line 1560
	      <[]> when 'true' ->
		  %% Line 1561
		  {'error','not_found'}
	      %% Line 1562
	      <[{Type,Pos}|[]]> when 'true' ->
		  let <Fd> =
		      %% Line 1563
		      apply 'open'/1
			  (_cor1)
		  in  let <NodeInfo> =
			  %% Line 1564
			  apply 'get_nodeinfo'/4
			      (Fd, _cor0, Type, Pos)
		      in  do  %% Line 1565
			      apply 'close'/1
				  (Fd)
			      %% Line 1566
			      {'ok',NodeInfo}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'nods'/1 =
    %% Line 1571
    fun (_cor0) ->
	%% Line 1572
	case apply 'lookup_index'/1
		 ('no_distribution') of
	  %% Line 1573
	  <[]> when 'true' ->
	      let <V> =
		  %% Line 1574
		  apply 'lookup_index'/1
		      ('visible_node')
	      in  let <H> =
		      %% Line 1575
		      apply 'lookup_index'/1
			  ('hidden_node')
		  in  let <N> =
			  %% Line 1576
			  apply 'lookup_index'/1
			      ('not_connected')
		      in  let <Fd> =
			      %% Line 1577
			      apply 'open'/1
				  (_cor0)
			  in  let <_cor7> =
				  %% Line 1579
				  ( fun (_cor5) ->
					case _cor5 of
					  <{Channel,Start}> when 'true' ->
					      %% Line 1580
					      apply 'get_nodeinfo'/4
						  (Fd, Channel, 'visible', Start)
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'-nods/1-fun-0-',1}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-nods/1-fun-0-'}}] )
			      in  let <Visible> =
				      %% Line 1578
				      call 'lists':'map'
					  (_cor7, %% Line 1582
						  V)
				  in  let <_cor11> =
					  %% Line 1584
					  ( fun (_cor9) ->
						case _cor9 of
						  <{Channel,Start}> when 'true' ->
						      %% Line 1585
						      apply 'get_nodeinfo'/4
							  (Fd, Channel, 'hidden', Start)
						  ( <_cor10> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor10})
							  -| [{'function_name',{'-nods/1-fun-1-',1}}] )
						    -| ['compiler_generated'] )
						end
					    -| [{'id',{0,0,'-nods/1-fun-1-'}}] )
				      in  let <Hidden> =
					      %% Line 1583
					      call 'lists':'map'
						  (_cor11, %% Line 1587
							   H)
					  in  let <_cor15> =
						  %% Line 1589
						  ( fun (_cor13) ->
							case _cor13 of
							  <{Channel,Start}> when 'true' ->
							      %% Line 1590
							      apply 'get_nodeinfo'/4
								  (Fd, Channel, 'not_connected', Start)
							  ( <_cor14> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor14})
								  -| [{'function_name',{'-nods/1-fun-2-',1}}] )
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-nods/1-fun-2-'}}] )
					      in  let <NotConnected> =
						      %% Line 1588
						      call 'lists':'map'
							  (_cor15, %% Line 1592
								   N)
						  in  do  %% Line 1593
							  apply 'close'/1
							      (Fd)
							  let <_cor17> =
							      %% Line 1594
							      call 'erlang':'++'
								  (Hidden, NotConnected)
							  in  %% Line 1594
							      call 'erlang':'++'
								  (Visible, _cor17)
	  %% Line 1595
	  <[_cor20|[]]> when 'true' ->
	      %% Line 1597
	      []
	  ( <_cor18> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor18})
	    -| ['compiler_generated'] )
	end
'get_nodeinfo'/4 =
    %% Line 1600
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1601
	    apply 'pos_bof'/2
		(_cor3, _cor0)
	    let <_cor4> =
		%% Line 1602
		call 'erlang':'list_to_integer'
		    (_cor2)
	    in  %% Line 1602
		apply 'get_nodeinfo'/2
		    (_cor3, {'nod','undefined',_cor4,_cor1,'undefined','undefined',[],[],[],'undefined'})
'get_nodeinfo'/2 =
    %% Line 1604
    fun (_cor1,_cor0) ->
	%% Line 1605
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 1606
	  <[78|[97|[109|[101]]]]> when 'true' ->
	      let <_rec112> =
		  %% Line 1607
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1607
		  case _cor0 of
		    <{'nod',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(2, _cor0, _rec112)
			in  apply 'get_nodeinfo'/2
				(_cor1, _cor5)
		    ( <_cor72> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','nod'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1608
	  <[67|[111|[110|[116|[114|[111|[108|[108|[101|[114]]]]]]]]]]> when 'true' ->
	      let <_rec114> =
		  %% Line 1609
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1609
		  case _cor0 of
		    <{'nod',_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}> when 'true' ->
			let <_cor9> =
			    call 'erlang':'setelement'
				(5, _cor0, _rec114)
			in  apply 'get_nodeinfo'/2
				(_cor1, _cor9)
		    ( <_cor82> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','nod'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1610
	  <[67|[114|[101|[97|[116|[105|[111|[110]]]]]]]]> when 'true' ->
	      let <_cor19> =
		  %% Line 1613
		  ( fun (_cor17) ->
			try
			    let <_cor12> =
				call 'erlang':'list_to_integer'
				    (_cor17)
			    in  [_cor12|[]]
			of <_cor13> ->
			    _cor13
			catch <_cor16,_cor15,_cor14> ->
			    case <_cor16,_cor15,_cor14> of
			      %% Line 1614
			      <'error','badarg',_cor83> when 'true' ->
				  []
			      ( <_cor16,_cor15,_cor14> when 'true' ->
				    primop 'raise'
					(_cor14, _cor15)
				-| ['compiler_generated'] )
			    end
		    -| [{'id',{0,0,'-get_nodeinfo/2-fun-0-'}}] )
	      in  let <_cor10> =
		      %% Line 1616
		      apply 'val'/1
			  (_cor1)
		  in  let <_cor11> =
			  %% Line 1616
			  call 'string':'tokens'
			      (_cor10, [32])
		      in  let <Creations> =
			      %% Line 1613
			      call 'lists':'flatmap'
				  (_cor19, _cor11)
			  in  let <_rec116> = {%% Line 1617
				   'creations',%% Line 1617
					       Creations}
			      in  %% Line 1617
				  case _cor0 of
				    <{'nod',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}> when 'true' ->
					let <_cor24> =
					    call 'erlang':'setelement'
						(6, _cor0, _rec116)
					in  apply 'get_nodeinfo'/2
						(_cor1, _cor24)
				    ( <_cor93> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','nod'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
	  %% Line 1618
	  <[82|[101|[109|[111|[116|[101|[32|[108|[105|[110|[107]]]]]]]]]]]> when 'true' ->
	      let <Procs> =
		  %% Line 1619
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1620
		  case apply 'split'/1
			   (Procs) of
		    <{Local,Remote}> when 'true' ->
			let <_cor27> =
			    %% Line 1621
			    call 'erlang':'++'
				([32|[60|[45|[62|[32]]]]], Remote)
			in  let <Str> =
				%% Line 1621
				call 'erlang':'++'
				    (Local, _cor27)
			    in  %% Line 1622
				( case _cor0 of
				    ( <( {'nod',_cor94,_cor95,_cor96,_cor97,_cor98,_rec118,_cor99,_cor100,_cor101}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <NewRemLinks> =
					      [{Local,Str}|_rec118]
					  in  let <_cor34> =
						  %% Line 1623
						  call 'erlang':'setelement'
						      (7, _cor0, NewRemLinks)
					      in  %% Line 1623
						  apply 'get_nodeinfo'/2
						      (_cor1, _cor34)
				      -| ['compiler_generated'] )
				    ( <_cor102> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','nod'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    ( <_cor26> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor26})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1624
	  <[82|[101|[109|[111|[116|[101|[32|[109|[111|[110|[105|[116|[111|[114|[105|[110|[103]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <Procs> =
		  %% Line 1625
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1626
		  case apply 'split'/1
			   (Procs) of
		    <{Local,Remote}> when 'true' ->
			let <_cor37> =
			    %% Line 1627
			    [32|[45|[62|[32|Remote]]]]
			in  let <Str> =
				%% Line 1627
				call 'erlang':'++'
				    (Local, _cor37)
			    in  %% Line 1628
				( case _cor0 of
				    ( <( {'nod',_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_rec120,_cor119,_cor120}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <NewRemMon> =
					      [{Local,Str}|_rec120]
					  in  let <_cor44> =
						  %% Line 1629
						  call 'erlang':'setelement'
						      (8, _cor0, NewRemMon)
					      in  %% Line 1629
						  apply 'get_nodeinfo'/2
						      (_cor1, _cor44)
				      -| ['compiler_generated'] )
				    ( <_cor121> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','nod'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    ( <_cor36> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor36})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1630
	  <[82|[101|[109|[111|[116|[101|[108|[121|[32|[109|[111|[110|[105|[116|[111|[114|[101|[100|[32|[98|[121]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <Procs> =
		  %% Line 1631
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1632
		  case apply 'split'/1
			   (Procs) of
		    <{Local,Remote}> when 'true' ->
			let <_cor47> =
			    %% Line 1633
			    [32|[60|[45|[32|Remote]]]]
			in  let <Str> =
				%% Line 1633
				call 'erlang':'++'
				    (Local, _cor47)
			    in  %% Line 1634
				( case _cor0 of
				    ( <( {'nod',_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_rec122,_cor139}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <NewRemMonBy> =
					      [{Local,Str}|_rec122]
					  in  let <_cor54> =
						  %% Line 1635
						  call 'erlang':'setelement'
						      (9, _cor0, NewRemMonBy)
					      in  %% Line 1635
						  apply 'get_nodeinfo'/2
						      (_cor1, _cor54)
				      -| ['compiler_generated'] )
				    ( <_cor140> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','nod'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    ( <_cor46> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor46})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1636
	  <[69|[114|[114|[111|[114]]]]]> when 'true' ->
	      let <_cor55> =
		  %% Line 1637
		  apply 'val'/1
		      (_cor1)
	      in  let <_rec124> =
		      %% Line 1637
		      call 'erlang':'++'
			  ([69|[82|[82|[79|[82|[58|[32]]]]]]], _cor55)
		  in  %% Line 1637
		      case _cor0 of
			<{'nod',_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159}> when 'true' ->
			    let <_cor59> =
				call 'erlang':'setelement'
				    (10, _cor0, _rec124)
			    in  apply 'get_nodeinfo'/2
				    (_cor1, _cor59)
			( <_cor160> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','nod'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1638
	  <[61|_X_next_tag]> when 'true' ->
	      _cor0
	  %% Line 1640
	  <Other> when 'true' ->
	      do  %% Line 1641
		  apply 'unexpected'/3
		      (_cor1, Other, [110|[111|[100|[101|[32|[105|[110|[102|[111]]]]]]]]])
		  _cor0
	end
'get_loaded_mod_details'/2 =
    %% Line 1647
    fun (_cor1,_cor0) ->
	%% Line 1648
	case apply 'lookup_index'/2
		 ('mod', _cor0) of
	  <[{_cor8,Start}|[]]> when 'true' ->
	      let <Fd> =
		  %% Line 1649
		  apply 'open'/1
		      (_cor1)
	      in  do  %% Line 1650
		      apply 'pos_bof'/2
			  (Fd, Start)
		      let <InitLM> =
			  %% Line 1651
			  {'loaded_mod',_cor0,'undefined','undefined','undefined',[78|[111|[32|[111|[108|[100|[32|[99|[111|[100|[101|[32|[101|[120|[105|[115|[116|[115]]]]]]]]]]]]]]]]]],'undefined','undefined'}
		      in  let <ModInfo> =
			      %% Line 1652
			      apply 'get_loaded_mod_info'/3
				  (Fd, InitLM, ( 'all_modinfo'/3
						 -| [{'id',{0,0,'-get_loaded_mod_details/2-fun-0-'}}] ))
			  in  do  %% Line 1653
				  apply 'close'/1
				      (Fd)
				  %% Line 1654
				  ModInfo
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'loaded_mods'/1 =
    %% Line 1658
    fun (_cor0) ->
	let <ParseFun> =
	    %% Line 1660
	    ( fun (_cor4,_cor3) ->
		  let <_cor1> =
		      %% Line 1662
		      call 'erlang':'list_to_binary'
			  (_cor3)
		  in  let <_cor2> =
			  %% Line 1662
			  apply 'get_atom'/1
			      (_cor1)
		      in  %% Line 1661
			  apply 'get_loaded_mod_info'/3
			      (_cor4, %% Line 1662
				      {'loaded_mod',_cor2,'undefined','undefined','undefined','undefined','undefined','undefined'}, %% Line 1663
																    ( 'main_modinfo'/3
																      -| [{'id',{0,0,'-loaded_mods/1-fun-0-'}}] ))
	      -| [{'id',{0,0,'-loaded_mods/1-fun-1-'}}] )
	in  let <_cor11> =
		%% Line 1666
		case apply 'lookup_index'/1
			 ('loaded_modules') of
		  %% Line 1667
		  <[{_cor15,StartTotal}|[]]> when 'true' ->
		      let <Fd> =
			  %% Line 1668
			  apply 'open'/1
			      (_cor0)
		      in  do  %% Line 1669
			      apply 'pos_bof'/2
				  (Fd, StartTotal)
			      let <R> =
				  %% Line 1670
				  apply 'get_loaded_mod_totals'/2
				      (Fd, {[117|[110|[107|[110|[111|[119|[110]]]]]]],[117|[110|[107|[110|[111|[119|[110]]]]]]]})
			      in  do  %% Line 1671
				      apply 'close'/1
					  (Fd)
				      %% Line 1672
				      R
		  %% Line 1673
		  <[]> when 'true' ->
		      %% Line 1674
		      {[117|[110|[107|[110|[111|[119|[110]]]]]]],[117|[110|[107|[110|[111|[119|[110]]]]]]]}
		  ( <_cor10> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor10})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 1665
		case _cor11 of
		  <{CC,OC}> when 'true' ->
		      let <_cor13> =
			  %% Line 1676
			  apply 'lookup_and_parse_index'/4
			      (_cor0, 'mod', ParseFun, [109|[111|[100|[117|[108|[101|[115]]]]]]])
		      in  %% Line 1676
			  {CC,OC,_cor13}
		  ( <_cor12> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor12})
		    -| ['compiler_generated'] )
		end
'get_loaded_mod_totals'/2 =
    %% Line 1678
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fd,{CC,OC}> when 'true' ->
	      %% Line 1679
	      case apply 'line_head'/1
		       (Fd) of
		%% Line 1680
		<[67|[117|[114|[114|[101|[110|[116|[32|[99|[111|[100|[101]]]]]]]]]]]]> when 'true' ->
		    let <_cor2> =
			%% Line 1681
			apply 'val'/1
			    (Fd)
		    in  %% Line 1681
			apply 'get_loaded_mod_totals'/2
			    (Fd, {_cor2,OC})
		%% Line 1682
		<[79|[108|[100|[32|[99|[111|[100|[101]]]]]]]]> when 'true' ->
		    let <_cor3> =
			%% Line 1683
			apply 'val'/1
			    (Fd)
		    in  %% Line 1683
			apply 'get_loaded_mod_totals'/2
			    (Fd, {CC,_cor3})
		%% Line 1684
		<[61|_X_next_tag]> when 'true' ->
		    %% Line 1685
		    {CC,OC}
		%% Line 1686
		<Other> when 'true' ->
		    do  %% Line 1687
			apply 'unexpected'/3
			    (Fd, Other, [108|[111|[97|[100|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[32|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]])
			%% Line 1688
			{CC,OC}
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_loaded_mod_totals',2}}] )
	    -| ['compiler_generated'] )
	end
'get_loaded_mod_info'/3 =
    %% Line 1691
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1692
	case apply 'line_head'/1
		 (_cor2) of
	  %% Line 1693
	  <[67|[117|[114|[114|[101|[110|[116|[32|[115|[105|[122|[101]]]]]]]]]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1694
		  apply 'val'/1
		      (_cor2)
	      in  let <CS> =
		      %% Line 1694
		      call 'erlang':'list_to_integer'
			  (_cor3)
		  in  %% Line 1695
		      case _cor1 of
			<{'loaded_mod',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
			    let <_cor7> =
				call 'erlang':'setelement'
				    (3, _cor1, CS)
			    in  apply 'get_loaded_mod_info'/3
				    (_cor2, _cor7, _cor0)
			( <_cor25> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','loaded_mod'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1696
	  <[79|[108|[100|[32|[115|[105|[122|[101]]]]]]]]> when 'true' ->
	      let <_cor8> =
		  %% Line 1697
		  apply 'val'/1
		      (_cor2)
	      in  let <OS> =
		      %% Line 1697
		      call 'erlang':'list_to_integer'
			  (_cor8)
		  in  %% Line 1698
		      case _cor1 of
			<{'loaded_mod',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
			    let <_cor12> =
				call 'erlang':'setelement'
				    (6, _cor1, OS)
			    in  apply 'get_loaded_mod_info'/3
				    (_cor2, _cor12, _cor0)
			( <_cor33> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','loaded_mod'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1699
	  <[61|_X_next_tag]> when 'true' ->
	      _cor1
	  %% Line 1701
	  <{'eof',_cor34}> when 'true' ->
	      _cor1
	  %% Line 1703
	  <Other> when 'true' ->
	      let <LM1> =
		  %% Line 1704
		  apply _cor0
		      (_cor2, _cor1, Other)
	      in  %% Line 1705
		  apply 'get_loaded_mod_info'/3
		      (_cor2, LM1, _cor0)
	end
'main_modinfo'/3 =
    %% Line 1708
    fun (_cor2,_cor1,_cor0) ->
	_cor1
'all_modinfo'/3 =
    %% Line 1710
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1711
	case _cor0 of
	  %% Line 1712
	  <[67|[117|[114|[114|[101|[110|[116|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[115]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1713
		  apply 'val'/1
		      (_cor2)
	      in  let <Str> =
		      %% Line 1713
		      apply 'hex_to_str'/1
			  (_cor3)
		  in  %% Line 1714
		      case _cor1 of
			<{'loaded_mod',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
			    call 'erlang':'setelement'
				(4, _cor1, Str)
			( <_cor30> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','loaded_mod'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1715
	  <[67|[117|[114|[114|[101|[110|[116|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor7> =
		  %% Line 1716
		  apply 'val'/1
		      (_cor2)
	      in  let <Str> =
		      %% Line 1716
		      apply 'hex_to_str'/1
			  (_cor7)
		  in  %% Line 1717
		      case _cor1 of
			<{'loaded_mod',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
			    call 'erlang':'setelement'
				(5, _cor1, Str)
			( <_cor38> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','loaded_mod'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1718
	  <[79|[108|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[115]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor11> =
		  %% Line 1719
		  apply 'val'/1
		      (_cor2)
	      in  let <Str> =
		      %% Line 1719
		      apply 'hex_to_str'/1
			  (_cor11)
		  in  %% Line 1720
		      case _cor1 of
			<{'loaded_mod',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
			    call 'erlang':'setelement'
				(7, _cor1, Str)
			( <_cor46> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','loaded_mod'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1721
	  <[79|[108|[100|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor15> =
		  %% Line 1722
		  apply 'val'/1
		      (_cor2)
	      in  let <Str> =
		      %% Line 1722
		      apply 'hex_to_str'/1
			  (_cor15)
		  in  %% Line 1723
		      case _cor1 of
			<{'loaded_mod',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
			    call 'erlang':'setelement'
				(8, _cor1, Str)
			( <_cor54> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','loaded_mod'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1724
	  <Other> when 'true' ->
	      do  %% Line 1725
		  apply 'unexpected'/3
		      (_cor2, Other, [108|[111|[97|[100|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[32|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]])
		  _cor1
	end
'hex_to_str'/1 =
    %% Line 1730
    fun (_cor0) ->
	let <Term> =
	    %% Line 1731
	    apply 'hex_to_term'/2
		(_cor0, [])
	in  %% Line 1732
	    call 'io_lib':'format'
		([126|[112|[126|[110]]]], [Term|[]])
'hex_to_term'/2 =
    %% Line 1734
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|[Y|Hex]],Acc> when 'true' ->
	      let <MS> =
		  %% Line 1735
		  apply 'hex_to_dec'/1
		      ([X|[]])
	      in  let <LS> =
		      %% Line 1736
		      apply 'hex_to_dec'/1
			  ([Y|[]])
		  in  let <_cor4> =
			  %% Line 1737
			  call 'erlang':'*'
			      (16, MS)
		      in  let <Z> =
			      %% Line 1737
			      call 'erlang':'+'
				  (_cor4, LS)
			  in  %% Line 1738
			      apply 'hex_to_term'/2
				  (Hex, [Z|Acc])
	  %% Line 1739
	  <[],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 1740
		  call 'lists':'reverse'
		      (Acc)
	      in  let <Bin> =
		      %% Line 1740
		      call 'erlang':'list_to_binary'
			  (_cor6)
		  in  let <_cor8> =
			  catch
			      %% Line 1741
			      call 'erlang':'binary_to_term'
				  (Bin)
		      in  %% Line 1741
			  case _cor8 of
			    %% Line 1742
			    <{'EXIT',_X_Reason}> when 'true' ->
				%% Line 1743
				{[87|[65|[82|[78|[73|[78|[71|[58|[32|[84|[104|[101|[32|[116|[101|[114|[109|[32|[105|[115|[32|[112|[114|[111|[98|[97|[98|[108|[121|[32|[116|[114|[117|[110|[99|[97|[116|[101|[100|[33]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 1744
																															     [73|[32|[99|[97|[110|[32|[110|[111|[116|[32|[100|[111|[32|[98|[105|[110|[97|[114|[121|[95|[116|[111|[95|[116|[101|[114|[109|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 1745
																																																			 Bin}
			    %% Line 1746
			    <Term> when 'true' ->
				%% Line 1747
				Term
			  end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'hex_to_term',2}}] )
	    -| ['compiler_generated'] )
	end
'hex_to_dec'/1 =
    %% Line 1750
    fun (_cor0) ->
	case _cor0 of
	  <[70]> when 'true' ->
	      15
	  %% Line 1751
	  <[69]> when 'true' ->
	      14
	  %% Line 1752
	  <[68]> when 'true' ->
	      13
	  %% Line 1753
	  <[67]> when 'true' ->
	      12
	  %% Line 1754
	  <[66]> when 'true' ->
	      11
	  %% Line 1755
	  <[65]> when 'true' ->
	      10
	  %% Line 1756
	  <N> when 'true' ->
	      call 'erlang':'list_to_integer'
		  (N)
	end
'funs'/1 =
    %% Line 1761
    fun (_cor0) ->
	let <ParseFun> =
	    %% Line 1762
	    ( fun (_cor2,_cor1) ->
		  apply 'get_funinfo'/2
		      (_cor2, {'fu','undefined','undefined','undefined','undefined','undefined','undefined'})
	      -| [{'id',{0,0,'-funs/1-fun-0-'}}] )
	in  %% Line 1763
	    apply 'lookup_and_parse_index'/4
		(_cor0, 'fu', ParseFun, [102|[117|[110|[115]]]])
'get_funinfo'/2 =
    %% Line 1765
    fun (_cor1,_cor0) ->
	%% Line 1766
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 1767
	  <[77|[111|[100|[117|[108|[101]]]]]]> when 'true' ->
	      let <_rec132> =
		  %% Line 1768
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1768
		  case _cor0 of
		    <{'fu',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(2, _cor0, _rec132)
			in  apply 'get_funinfo'/2
				(_cor1, _cor5)
		    ( <_cor38> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','fu'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1769
	  <[85|[110|[105|[113]]]]> when 'true' ->
	      let <_cor6> =
		  %% Line 1770
		  apply 'val'/1
		      (_cor1)
	      in  let <_rec134> =
		      %% Line 1770
		      call 'erlang':'list_to_integer'
			  (_cor6)
		  in  %% Line 1770
		      case _cor0 of
			<{'fu',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
			    let <_cor10> =
				call 'erlang':'setelement'
				    (3, _cor0, _rec134)
			    in  apply 'get_funinfo'/2
				    (_cor1, _cor10)
			( <_cor45> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','fu'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1771
	  <[73|[110|[100|[101|[120]]]]]> when 'true' ->
	      let <_cor11> =
		  %% Line 1772
		  apply 'val'/1
		      (_cor1)
	      in  let <_rec136> =
		      %% Line 1772
		      call 'erlang':'list_to_integer'
			  (_cor11)
		  in  %% Line 1772
		      case _cor0 of
			<{'fu',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
			    let <_cor15> =
				call 'erlang':'setelement'
				    (4, _cor0, _rec136)
			    in  apply 'get_funinfo'/2
				    (_cor1, _cor15)
			( <_cor52> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','fu'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1773
	  <[65|[100|[100|[114|[101|[115|[115]]]]]]]> when 'true' ->
	      let <_rec138> =
		  %% Line 1774
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1774
		  case _cor0 of
		    <{'fu',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
			let <_cor19> =
			    call 'erlang':'setelement'
				(5, _cor0, _rec138)
			in  apply 'get_funinfo'/2
				(_cor1, _cor19)
		    ( <_cor59> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','fu'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1775
	  <[78|[97|[116|[105|[118|[101|[95|[97|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]> when 'true' ->
	      let <_rec140> =
		  %% Line 1776
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 1776
		  case _cor0 of
		    <{'fu',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}> when 'true' ->
			let <_cor23> =
			    call 'erlang':'setelement'
				(6, _cor0, _rec140)
			in  apply 'get_funinfo'/2
				(_cor1, _cor23)
		    ( <_cor66> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','fu'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1777
	  <[82|[101|[102|[99]]]]> when 'true' ->
	      let <_cor24> =
		  %% Line 1778
		  apply 'val'/1
		      (_cor1)
	      in  let <_rec142> =
		      %% Line 1778
		      call 'erlang':'list_to_integer'
			  (_cor24)
		  in  %% Line 1778
		      case _cor0 of
			<{'fu',_cor67,_cor68,_cor69,_cor70,_cor71,_cor72}> when 'true' ->
			    let <_cor28> =
				call 'erlang':'setelement'
				    (7, _cor0, _rec142)
			    in  apply 'get_funinfo'/2
				    (_cor1, _cor28)
			( <_cor73> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','fu'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1779
	  <[61|_X_next_tag]> when 'true' ->
	      _cor0
	  %% Line 1781
	  <Other> when 'true' ->
	      do  %% Line 1782
		  apply 'unexpected'/3
		      (_cor1, Other, [102|[117|[110|[32|[105|[110|[102|[111]]]]]]]])
		  _cor0
	end
'atoms'/2 =
    %% Line 1788
    fun (_cor1,_cor0) ->
	%% Line 1789
	case apply 'lookup_index'/1
		 ('atoms') of
	  %% Line 1790
	  <[{_X_Id,Start}|[]]> when 'true' ->
	      let <Fd> =
		  %% Line 1791
		  apply 'open'/1
		      (_cor1)
	      in  do  %% Line 1792
		      apply 'pos_bof'/2
			  (Fd, Start)
		      %% Line 1793
		      apply 'get_atoms'/2
			  (Fd, _cor0)
	  %% Line 1794
	  <_cor6> when 'true' ->
	      %% Line 1795
	      []
	end
'get_atoms'/2 =
    %% Line 1798
    fun (_cor1,_cor0) ->
	%% Line 1799
	case apply 'get_chunk'/1
		 (_cor1) of
	  %% Line 1800
	  <{'ok',Bin}> when 'true' ->
	      do  %% Line 1801
		  apply 'init_progress'/2
		      ([80|[114|[111|[99|[101|[115|[115|[105|[110|[103|[32|[97|[116|[111|[109|[115]]]]]]]]]]]]]]]], _cor0)
		  %% Line 1802
		  apply 'get_atoms'/4
		      (_cor1, Bin, _cor0, [])
	  %% Line 1803
	  <'eof'> when 'true' ->
	      %% Line 1804
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_atoms'/4 =
    %% Line 1810
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Bins> =
	    %% Line 1811
	    call 'binary':'split'
		(_cor2, #{#<10>(8,1,'integer',['unsigned'|['big']])}#, ['global'])
	in  %% Line 1812
	    apply 'get_atoms1'/4
		(_cor3, Bins, _cor1, _cor0)
'get_atoms1'/4 =
    %% Line 1814
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Fd,[#{#<61>(8,1,'integer',['unsigned'|['big']]),
		    #<_cor13>('all',8,'binary',['unsigned'|['big']])}#|_cor14],_X_N,Atoms> when 'true' ->
	      do  %% Line 1815
		  apply 'end_progress'/0
		      ()
		  %% Line 1816
		  Atoms
	  %% Line 1817
	  <Fd,[LastBin|[]],N,Atoms> when 'true' ->
	      %% Line 1818
	      case apply 'get_chunk'/1
		       (Fd) of
		%% Line 1819
		<{'ok',Bin0}> when 'true' ->
		    let <_cor4> =
			%% Line 1820
			#{#<LastBin>('all',8,'binary',['unsigned'|['big']]),
			  #<Bin0>('all',8,'binary',['unsigned'|['big']])}#
		    in  %% Line 1820
			apply 'get_atoms'/4
			    (Fd, _cor4, N, Atoms)
		%% Line 1821
		<'eof'> when 'true' ->
		    do  %% Line 1822
			apply 'end_progress'/0
			    ()
			let <_cor5> =
			    %% Line 1823
			    apply 'get_atom'/1
				(LastBin)
			in  %% Line 1823
			    [{N,_cor5}|Atoms]
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1825
	  <Fd,[Bin|Bins],N,Atoms> when 'true' ->
	      do  %% Line 1826
		  apply 'update_progress'/0
		      ()
		  let <_cor8> =
		      %% Line 1827
		      call 'erlang':'-'
			  (N, 1)
		  in  let <_cor7> =
			  %% Line 1827
			  apply 'get_atom'/1
			      (Bin)
		      in  %% Line 1827
			  apply 'get_atoms1'/4
			      (Fd, Bins, _cor8, [{N,_cor7}|Atoms])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'get_atoms1',4}}] )
	    -| ['compiler_generated'] )
	end
'get_atom'/1 =
    %% Line 1832
    fun (_cor0) ->
	case _cor0 of
	  <#{#<39>(8,1,'integer',['unsigned'|['big']]),
	     #<Atom>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1833
	      {Atom,'q'}
	  %% Line 1834
	  <Atom>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 1835
	      {Atom,'nq'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_atom',1}}] )
	    -| ['compiler_generated'] )
	end
'memory'/1 =
    %% Line 1839
    fun (_cor0) ->
	%% Line 1840
	case apply 'lookup_index'/1
		 ('memory') of
	  %% Line 1841
	  <[{_cor5,Start}|[]]> when 'true' ->
	      let <Fd> =
		  %% Line 1842
		  apply 'open'/1
		      (_cor0)
	      in  do  %% Line 1843
		      apply 'pos_bof'/2
			  (Fd, Start)
		      let <R> =
			  %% Line 1844
			  apply 'get_meminfo'/2
			      (Fd, [])
		      in  do  %% Line 1845
			      apply 'close'/1
				  (Fd)
			      %% Line 1846
			      R
	  %% Line 1847
	  <_cor6> when 'true' ->
	      %% Line 1848
	      []
	end
'get_meminfo'/2 =
    %% Line 1851
    fun (_cor1,_cor0) ->
	%% Line 1852
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 1853
	  <[61|_X_next_tag]> when 'true' ->
	      %% Line 1854
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 1855
	  <{'eof',_X_last_line}> when 'true' ->
	      %% Line 1856
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 1857
	  <Key> when 'true' ->
	      let <_cor3> =
		  %% Line 1858
		  call 'erlang':'list_to_atom'
		      (Key)
	      in  let <_cor2> =
		      %% Line 1858
		      apply 'val'/1
			  (_cor1)
		  in  %% Line 1858
		      apply 'get_meminfo'/2
			  (_cor1, [{_cor3,_cor2}|_cor0])
	end
'allocated_areas'/1 =
    %% Line 1863
    fun (_cor0) ->
	%% Line 1864
	case apply 'lookup_index'/1
		 ('allocated_areas') of
	  %% Line 1865
	  <[{_cor5,Start}|[]]> when 'true' ->
	      let <Fd> =
		  %% Line 1866
		  apply 'open'/1
		      (_cor0)
	      in  do  %% Line 1867
		      apply 'pos_bof'/2
			  (Fd, Start)
		      let <R> =
			  %% Line 1868
			  apply 'get_allocareainfo'/2
			      (Fd, [])
		      in  do  %% Line 1869
			      apply 'close'/1
				  (Fd)
			      %% Line 1870
			      R
	  %% Line 1871
	  <_cor6> when 'true' ->
	      %% Line 1872
	      []
	end
'get_allocareainfo'/2 =
    %% Line 1875
    fun (_cor1,_cor0) ->
	%% Line 1876
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 1877
	  <[61|_X_next_tag]> when 'true' ->
	      %% Line 1878
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 1879
	  <{'eof',_X_last_line}> when 'true' ->
	      %% Line 1880
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 1881
	  <Key> when 'true' ->
	      let <Val> =
		  %% Line 1882
		  apply 'val'/1
		      (_cor1)
	      in  let <_cor4> =
		      %% Line 1884
		      case apply 'split'/1
			       (Val) of
			%% Line 1885
			<{Alloc,[]}> when 'true' ->
			    %% Line 1886
			    {Key,Alloc,[]}
			%% Line 1887
			<{Alloc,Used}> when 'true' ->
			    %% Line 1888
			    {Key,Alloc,Used}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1890
		      apply 'get_allocareainfo'/2
			  (_cor1, [_cor4|_cor0])
	end
'allocator_info'/1 =
    %% Line 1895
    fun (_cor0) ->
	%% Line 1896
	case apply 'lookup_index'/1
		 ('allocator') of
	  %% Line 1897
	  <[]> when 'true' ->
	      %% Line 1898
	      []
	  %% Line 1899
	  <AllAllocators> when 'true' ->
	      let <Fd> =
		  %% Line 1900
		  apply 'open'/1
		      (_cor0)
	      in  let <_cor5> =
		      %% Line 1901
		      ( fun (_cor3) ->
			    case _cor3 of
			      <{Heading,Start}> when 'true' ->
				  let <_cor2> =
				      %% Line 1902
				      apply 'get_allocatorinfo'/2
					  (Fd, Start)
				  in  %% Line 1902
				      {Heading,_cor2}
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'-allocator_info/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-allocator_info/1-fun-0-'}}] )
		  in  let <R> =
			  %% Line 1901
			  call 'lists':'map'
			      (_cor5, %% Line 1904
				      AllAllocators)
		      in  do  %% Line 1905
			      apply 'close'/1
				  (Fd)
			      let <_cor7> =
				  %% Line 1906
				  apply 'allocator_summary'/1
				      (R)
			      in  %% Line 1906
				  [_cor7|R]
	end
'get_allocatorinfo'/2 =
    %% Line 1909
    fun (_cor1,_cor0) ->
	do  %% Line 1910
	    apply 'pos_bof'/2
		(_cor1, _cor0)
	    %% Line 1911
	    apply 'get_allocatorinfo1'/3
		(_cor1, [], 0)
'get_allocatorinfo1'/3 =
    %% Line 1913
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1914
	case apply 'line_head'/1
		 (_cor2) of
	  %% Line 1915
	  <[61|_X_next_tag]> when 'true' ->
	      %% Line 1916
	      apply 'pad_and_reverse'/3
		  (_cor1, _cor0, [])
	  %% Line 1917
	  <{'eof',_X_last_line}> when 'true' ->
	      %% Line 1918
	      apply 'pad_and_reverse'/3
		  (_cor1, _cor0, [])
	  %% Line 1919
	  <Key> when 'true' ->
	      let <_cor3> =
		  %% Line 1920
		  apply 'val'/1
		      (_cor2)
	      in  let <Values> =
		      %% Line 1920
		      apply 'get_all_vals'/2
			  (_cor3, [])
		  in  let <L> =
			  %% Line 1921
			  call 'erlang':'length'
			      (Values)
		      in  let <_cor6> =
			      %% Line 1922
			      case <> of
				<>
				    when call 'erlang':'>'
					  (L,
					   _cor0) ->
				    L
				<> when 'true' ->
				    _cor0
			      end
			  in  %% Line 1923
			      apply 'get_allocatorinfo1'/3
				  (_cor2, [{Key,Values}|_cor1], _cor6)
	end
'get_all_vals'/2 =
    %% Line 1926
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[32|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1927
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor3> =
		      %% Line 1927
		      apply 'get_all_vals'/2
			  (Rest, [])
		  in  %% Line 1927
		      [_cor2|_cor3]
	  %% Line 1928
	  <[],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1929
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1929
		  [_cor4|[]]
	  %% Line 1930
	  <[Char|Rest],Acc> when 'true' ->
	      %% Line 1931
	      apply 'get_all_vals'/2
		  (Rest, [Char|Acc])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_all_vals',2}}] )
	    -| ['compiler_generated'] )
	end
'pad_and_reverse'/3 =
    %% Line 1934
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{K,V}|T],Len,Rev> when 'true' ->
	      let <VLen> =
		  %% Line 1935
		  call 'erlang':'length'
		      (V)
	      in  let <_cor6> =
		      %% Line 1936
		      case <> of
			<>
			    when call 'erlang':'=='
				  (VLen,
				   Len) ->
			    V
			%% Line 1937
			<> when 'true' ->
			    let <_cor4> =
				call 'erlang':'-'
				    (Len, VLen)
			    in  let <_cor5> =
				    call 'lists':'duplicate'
					(_cor4, [])
				in  call 'erlang':'++'
					(V, _cor5)
		      end
		  in  %% Line 1939
		      apply 'pad_and_reverse'/3
			  (T, Len, [{K,_cor6}|Rev])
	  %% Line 1940
	  <[],_cor11,Rev> when 'true' ->
	      %% Line 1941
	      Rev
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'pad_and_reverse',3}}] )
	    -| ['compiler_generated'] )
	end
'allocator_summary'/1 =
    %% Line 2009
    fun (_cor0) ->
	%% Line 2010
	case apply 'sort_allocator_types'/3
		 (_cor0, [], 'true') of
	  <{Sorted,DoTotal}> when 'true' ->
	      %% Line 2011
	      case apply 'sum_allocator_data'/2
		       (Sorted, DoTotal) of
		<{TypeTotals0,Totals}> when 'true' ->
		    let <TotalMCS,TypeTotals> =
			%% Line 2013
			case call 'lists':'keytake'
				 ([109|[115|[101|[103|[95|[97|[108|[108|[111|[99]]]]]]]]]], 1, TypeTotals0) of
			  %% Line 2014
			  <{'value',{_cor15,[{[115|[101|[103|[109|[101|[110|[116|[115|[95|[115|[105|[122|[101]]]]]]]]]]]]],SegSize}|[]]},Rest}> when 'true' ->
			      let <_cor3> =
				  %% Line 2015
				  call 'erlang':'integer_to_list'
				      (SegSize)
			      in  <_cor3,%% Line 2015
					 Rest>
			  %% Line 2016
			  <'false'> when 'true' ->
			      %% Line 2017
			      <[78|[47|[65]]],TypeTotals0>
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    in  let <TotalBS,TotalCS> =
			    %% Line 2020
			    case Totals of
			      %% Line 2021
			      <'false'> when 'true' ->
				  %% Line 2022
				  <[78|[47|[65]]],[78|[47|[65]]]>
			      %% Line 2023
			      <{TBS,TCS}> when 'true' ->
				  let <_cor8> =
				      %% Line 2024
				      call 'erlang':'integer_to_list'
					  (TBS)
				  in  let <_cor7> =
					  %% Line 2024
					  call 'erlang':'integer_to_list'
					      (TCS)
				      in  <_cor8,_cor7>
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor9})
				-| ['compiler_generated'] )
			    end
			in  let <_cor12> =
				%% Line 2029
				call 'lists':'reverse'
				    (TypeTotals)
			    in  let <_cor13> =
				    %% Line 2029
				    apply 'format_allocator_summary'/1
					(_cor12)
				in  %% Line 2026
				    {[65|[108|[108|[111|[99|[97|[116|[111|[114|[32|[83|[117|[109|[109|[97|[114|[121]]]]]]]]]]]]]]]]],%% Line 2027
																     [[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]|[[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]|[[109|[115|[101|[103|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]],%% Line 2028
																																															     [{[116|[111|[116|[97|[108]]]]],[TotalBS|[TotalCS|[TotalMCS|[]]]]}|_cor13]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'format_allocator_summary'/1 =
    %% Line 2031
    fun (_cor0) ->
	case _cor0 of
	  <[{Type,Data}|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 2032
		  apply 'format_allocator_summary'/2
		      (Type, Data)
	      in  let <_cor2> =
		      %% Line 2032
		      apply 'format_allocator_summary'/1
			  (Rest)
		  in  %% Line 2032
		      [_cor1|_cor2]
	  %% Line 2033
	  <[]> when 'true' ->
	      %% Line 2034
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'format_allocator_summary',1}}] )
	    -| ['compiler_generated'] )
	end
'format_allocator_summary'/2 =
    %% Line 2036
    fun (_cor1,_cor0) ->
	let <BS> =
	    %% Line 2037
	    apply 'get_size_value'/2
		('blocks_size', _cor0)
	in  let <CS> =
		%% Line 2038
		apply 'get_size_value'/2
		    ('carriers_size', _cor0)
	    in  let <MCS> =
		    %% Line 2039
		    apply 'get_size_value'/2
			('mseg_carriers_size', _cor0)
		in  %% Line 2040
		    {_cor1,[BS|[CS|[MCS|[]]]]}
'get_size_value'/2 =
    %% Line 2042
    fun (_cor1,_cor0) ->
	%% Line 2043
	case call 'proplists':'get_value'
		 (_cor1, _cor0) of
	  %% Line 2044
	  <'undefined'> when 'true' ->
	      %% Line 2045
	      [78|[47|[65]]]
	  %% Line 2046
	  <Int> when 'true' ->
	      %% Line 2047
	      call 'erlang':'integer_to_list'
		  (Int)
	end
'sort_allocator_types'/3 =
    %% Line 2055
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Name,Data}|Allocators],Acc,DoTotal> when 'true' ->
	      let <_cor4> =
		  %% Line 2057
		  case call 'string':'tokens'
			   (Name, [91|[93]]) of
		    %% Line 2058
		    <[T|[_X_Id|[]]]> when 'true' ->
			T
		    %% Line 2059
		    <[_cor12|[]]>
			when call 'erlang':'=:='
			      (_cor12,
			       Name) ->
			Name
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <TypeData> =
		      %% Line 2061
		      call 'proplists':'get_value'
			  (_cor4, Acc, [])
		  in  %% Line 2062
		      case apply 'sort_type_data'/4
			       (_cor4, Data, TypeData, DoTotal) of
			<{NewTypeData,NewDoTotal}> when 'true' ->
			    let <NewAcc> =
				%% Line 2063
				call 'lists':'keystore'
				    (_cor4, 1, Acc, {_cor4,NewTypeData})
			    in  %% Line 2064
				apply 'sort_allocator_types'/3
				    (Allocators, NewAcc, NewDoTotal)
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2065
	  <[],Acc,DoTotal> when 'true' ->
	      %% Line 2066
	      {Acc,DoTotal}
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'sort_allocator_types',3}}] )
	    -| ['compiler_generated'] )
	end
'sort_type_data'/4 =
    %% Line 2068
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type,[{[111|[112|[116|[105|[111|[110|[32|[101]]]]]]]],[102|[97|[108|[115|[101]]]]]}|Data],Acc,_cor12>
	      when call 'erlang':'=/='
		    (Type,
		     [115|[98|[109|[98|[99|[95|[97|[108|[108|[111|[99]]]]]]]]]]]) ->
	      %% Line 2069
	      apply 'sort_type_data'/4
		  (Type, Data, Acc, 'false')
	  %% Line 2070
	  <Type,[{Key,Val0}|Data],Acc,DoTotal> when 'true' ->
	      %% Line 2071
	      case call 'lists':'member'
		       (Key, [[115|[98|[109|[98|[99|[115|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[95|[112|[111|[111|[108|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]|[[115|[98|[99|[115|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]|[[115|[98|[109|[98|[99|[115|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]|[[115|[98|[99|[115|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[32|[109|[115|[101|[103|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[95|[112|[111|[111|[108|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]|[[115|[98|[99|[115|[32|[109|[115|[101|[103|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]|[[115|[101|[103|[109|[101|[110|[116|[115|[95|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]) of
		%% Line 2072
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 2073
			call 'erlang':'hd'
			    (Val0)
		    in  let <Val> =
			    %% Line 2073
			    call 'erlang':'list_to_integer'
				(_cor4)
			in  let <_cor6> =
				%% Line 2074
				apply 'update_value'/3
				    (Key, Val, Acc)
			    in  %% Line 2074
				apply 'sort_type_data'/4
				    (Type, Data, _cor6, DoTotal)
		%% Line 2075
		<'false'> when 'true' ->
		    %% Line 2076
		    apply 'sort_type_data'/4
			(Type, Data, Acc, DoTotal)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2078
	  <_X_Type,[],Acc,DoTotal> when 'true' ->
	      %% Line 2079
	      {Acc,DoTotal}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'sort_type_data',4}}] )
	    -| ['compiler_generated'] )
	end
'sum_allocator_data'/2 =
    %% Line 2090
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <AllocData,'false'> when 'true' ->
	      %% Line 2091
	      apply 'sum_allocator_data'/3
		  (AllocData, [], 'false')
	  %% Line 2092
	  <AllocData,'true'> when 'true' ->
	      %% Line 2093
	      apply 'sum_allocator_data'/3
		  (AllocData, [], {0,0})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'sum_allocator_data',2}}] )
	    -| ['compiler_generated'] )
	end
'sum_allocator_data'/3 =
    %% Line 2095
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_X_Type,[]}|AllocData],TypeAcc,Total> when 'true' ->
	      %% Line 2096
	      apply 'sum_allocator_data'/3
		  (AllocData, TypeAcc, Total)
	  %% Line 2097
	  <[{Type,Data}|AllocData],TypeAcc,Total> when 'true' ->
	      %% Line 2098
	      case apply 'sum_type_data'/3
		       (Data, [], Total) of
		<{TypeSum,NewTotal}> when 'true' ->
		    %% Line 2099
		    apply 'sum_allocator_data'/3
			(AllocData, [{Type,TypeSum}|TypeAcc], NewTotal)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2100
	  <[],TypeAcc,Total> when 'true' ->
	      %% Line 2101
	      {TypeAcc,Total}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'sum_allocator_data',3}}] )
	    -| ['compiler_generated'] )
	end
'sum_type_data'/3 =
    %% Line 2103
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Key,Value}|Data],TypeAcc,Total> when 'true' ->
	      let <_cor8> =
		  %% Line 2105
		  case Total of
		    %% Line 2106
		    <'false'> when 'true' ->
			%% Line 2107
			'false'
		    %% Line 2108
		    <{TotalBS,TotalCS}> when 'true' ->
			%% Line 2109
			case call 'lists':'member'
				 (Key, [[109|[98|[99|[115|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[95|[112|[111|[111|[108|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]|[[115|[98|[99|[115|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]) of
			  %% Line 2110
			  <'true'> when 'true' ->
			      let <_cor3> =
				  %% Line 2111
				  call 'erlang':'+'
				      (TotalBS, Value)
			      in  %% Line 2111
				  {_cor3,TotalCS}
			  %% Line 2112
			  <'false'> when 'true' ->
			      %% Line 2113
			      case call 'lists':'member'
				       (Key, [[109|[98|[99|[115|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[95|[112|[111|[111|[108|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]|[[115|[98|[99|[115|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]) of
				%% Line 2114
				<'true'> when 'true' ->
				    let <_cor4> =
					%% Line 2115
					call 'erlang':'+'
					    (TotalCS, Value)
				    in  %% Line 2115
					{TotalBS,_cor4}
				%% Line 2116
				<'false'> when 'true' ->
				    %% Line 2117
				    {TotalBS,TotalCS}
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor13> =
		      %% Line 2122
		      case call 'lists':'member'
			       (Key, [[115|[98|[109|[98|[99|[115|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[95|[112|[111|[111|[108|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]|[[115|[98|[99|[115|[32|[98|[108|[111|[99|[107|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]) of
			%% Line 2123
			<'true'> when 'true' ->
			    %% Line 2124
			    apply 'update_value'/3
				('blocks_size', Value, TypeAcc)
			%% Line 2125
			<'false'> when 'true' ->
			    %% Line 2126
			    case call 'lists':'member'
				     (Key, [[115|[98|[109|[98|[99|[115|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]|[[109|[98|[99|[115|[95|[112|[111|[111|[108|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]|[[115|[98|[99|[115|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]) of
			      %% Line 2127
			      <'true'> when 'true' ->
				  %% Line 2128
				  apply 'update_value'/3
				      ('carriers_size', Value, TypeAcc)
			      %% Line 2129
			      <'false'> when 'true' ->
				  %% Line 2130
				  case call 'lists':'member'
					   (Key, [[109|[98|[99|[115|[32|[109|[115|[101|[103|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]|[[115|[98|[99|[115|[32|[109|[115|[101|[103|[32|[99|[97|[114|[114|[105|[101|[114|[115|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]]) of
				    %% Line 2131
				    <'true'> when 'true' ->
					%% Line 2132
					apply 'update_value'/3
					    ('mseg_carriers_size', Value, TypeAcc)
				    %% Line 2133
				    <'false'> when 'true' ->
					%% Line 2135
					apply 'update_value'/3
					    (Key, Value, TypeAcc)
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor10})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor11})
				-| ['compiler_generated'] )
			    end
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 2139
		      apply 'sum_type_data'/3
			  (Data, _cor13, _cor8)
	  %% Line 2140
	  <[],TypeAcc,Total> when 'true' ->
	      %% Line 2141
	      {TypeAcc,Total}
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'sum_type_data',3}}] )
	    -| ['compiler_generated'] )
	end
'update_value'/3 =
    %% Line 2143
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2144
	case call 'lists':'keytake'
		 (_cor2, 1, _cor0) of
	  %% Line 2145
	  <'false'> when 'true' ->
	      %% Line 2146
	      [{_cor2,_cor1}|_cor0]
	  %% Line 2147
	  <{'value',{_cor8,Old},Acc1}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor2) ->
	      let <_cor3> =
		  %% Line 2148
		  call 'erlang':'+'
		      (Old, _cor1)
	      in  %% Line 2148
		  [{_cor2,_cor3}|Acc1]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'hash_tables'/1 =
    %% Line 2153
    fun (_cor0) ->
	%% Line 2154
	case apply 'lookup_index'/1
		 ('hash_table') of
	  %% Line 2155
	  <[]> when 'true' ->
	      %% Line 2156
	      []
	  %% Line 2157
	  <AllHashTables> when 'true' ->
	      let <Fd> =
		  %% Line 2158
		  apply 'open'/1
		      (_cor0)
	      in  let <_cor4> =
		      %% Line 2159
		      ( fun (_cor2) ->
			    case _cor2 of
			      <{Name,Start}> when 'true' ->
				  %% Line 2160
				  apply 'get_hashtableinfo'/3
				      (Fd, Name, Start)
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'-hash_tables/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-hash_tables/1-fun-0-'}}] )
		  in  let <R> =
			  %% Line 2159
			  call 'lists':'map'
			      (_cor4, %% Line 2162
				      AllHashTables)
		      in  do  %% Line 2163
			      apply 'close'/1
				  (Fd)
			      %% Line 2164
			      R
	end
'get_hashtableinfo'/3 =
    %% Line 2167
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 2168
	    apply 'pos_bof'/2
		(_cor2, _cor0)
	    %% Line 2169
	    apply 'get_hashtableinfo1'/2
		(_cor2, {'hash_table',_cor1,'undefined','undefined','undefined','undefined'})
'get_hashtableinfo1'/2 =
    %% Line 2171
    fun (_cor1,_cor0) ->
	%% Line 2172
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 2173
	  <[115|[105|[122|[101]]]]> when 'true' ->
	      let <_rec144> =
		  %% Line 2174
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2174
		  case _cor0 of
		    <{'hash_table',_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(3, _cor0, _rec144)
			in  apply 'get_hashtableinfo1'/2
				(_cor1, _cor5)
		    ( <_cor26> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','hash_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2175
	  <[117|[115|[101|[100]]]]> when 'true' ->
	      let <_rec146> =
		  %% Line 2176
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2176
		  case _cor0 of
		    <{'hash_table',_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
			let <_cor9> =
			    call 'erlang':'setelement'
				(4, _cor0, _rec146)
			in  apply 'get_hashtableinfo1'/2
				(_cor1, _cor9)
		    ( <_cor32> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','hash_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2177
	  <[111|[98|[106|[115]]]]> when 'true' ->
	      let <_rec148> =
		  %% Line 2178
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2178
		  case _cor0 of
		    <{'hash_table',_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
			let <_cor13> =
			    call 'erlang':'setelement'
				(5, _cor0, _rec148)
			in  apply 'get_hashtableinfo1'/2
				(_cor1, _cor13)
		    ( <_cor38> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','hash_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2179
	  <[100|[101|[112|[116|[104]]]]]> when 'true' ->
	      let <_rec150> =
		  %% Line 2180
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2180
		  case _cor0 of
		    <{'hash_table',_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
			let <_cor17> =
			    call 'erlang':'setelement'
				(6, _cor0, _rec150)
			in  apply 'get_hashtableinfo1'/2
				(_cor1, _cor17)
		    ( <_cor44> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','hash_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2181
	  <[61|_X_next_tag]> when 'true' ->
	      _cor0
	  %% Line 2183
	  <Other> when 'true' ->
	      do  %% Line 2184
		  apply 'unexpected'/3
		      (_cor1, Other, [104|[97|[115|[104|[32|[116|[97|[98|[108|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]])
		  _cor0
	end
'index_tables'/1 =
    %% Line 2190
    fun (_cor0) ->
	%% Line 2191
	case apply 'lookup_index'/1
		 ('index_table') of
	  %% Line 2192
	  <[]> when 'true' ->
	      %% Line 2193
	      []
	  %% Line 2194
	  <AllIndexTables> when 'true' ->
	      let <Fd> =
		  %% Line 2195
		  apply 'open'/1
		      (_cor0)
	      in  let <_cor4> =
		      %% Line 2196
		      ( fun (_cor2) ->
			    case _cor2 of
			      <{Name,Start}> when 'true' ->
				  %% Line 2197
				  apply 'get_indextableinfo'/3
				      (Fd, Name, Start)
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'-index_tables/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-index_tables/1-fun-0-'}}] )
		  in  let <R> =
			  %% Line 2196
			  call 'lists':'map'
			      (_cor4, %% Line 2199
				      AllIndexTables)
		      in  do  %% Line 2200
			      apply 'close'/1
				  (Fd)
			      %% Line 2201
			      R
	end
'get_indextableinfo'/3 =
    %% Line 2204
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 2205
	    apply 'pos_bof'/2
		(_cor2, _cor0)
	    %% Line 2206
	    apply 'get_indextableinfo1'/2
		(_cor2, {'index_table',_cor1,'undefined','undefined','undefined','undefined','undefined'})
'get_indextableinfo1'/2 =
    %% Line 2208
    fun (_cor1,_cor0) ->
	%% Line 2209
	case apply 'line_head'/1
		 (_cor1) of
	  %% Line 2210
	  <[115|[105|[122|[101]]]]> when 'true' ->
	      let <_rec152> =
		  %% Line 2211
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2211
		  case _cor0 of
		    <{'index_table',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(3, _cor0, _rec152)
			in  apply 'get_indextableinfo1'/2
				(_cor1, _cor5)
		    ( <_cor31> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','index_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2212
	  <[117|[115|[101|[100]]]]> when 'true' ->
	      let <_rec154> =
		  %% Line 2213
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2213
		  case _cor0 of
		    <{'index_table',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
			let <_cor9> =
			    call 'erlang':'setelement'
				(5, _cor0, _rec154)
			in  apply 'get_indextableinfo1'/2
				(_cor1, _cor9)
		    ( <_cor38> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','index_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2214
	  <[108|[105|[109|[105|[116]]]]]> when 'true' ->
	      let <_rec156> =
		  %% Line 2215
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2215
		  case _cor0 of
		    <{'index_table',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
			let <_cor13> =
			    call 'erlang':'setelement'
				(4, _cor0, _rec156)
			in  apply 'get_indextableinfo1'/2
				(_cor1, _cor13)
		    ( <_cor45> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','index_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2216
	  <[114|[97|[116|[101]]]]> when 'true' ->
	      let <_rec158> =
		  %% Line 2217
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2217
		  case _cor0 of
		    <{'index_table',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
			let <_cor17> =
			    call 'erlang':'setelement'
				(6, _cor0, _rec158)
			in  apply 'get_indextableinfo1'/2
				(_cor1, _cor17)
		    ( <_cor52> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','index_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2218
	  <[101|[110|[116|[114|[105|[101|[115]]]]]]]> when 'true' ->
	      let <_rec160> =
		  %% Line 2219
		  apply 'val'/1
		      (_cor1)
	      in  %% Line 2219
		  case _cor0 of
		    <{'index_table',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
			let <_cor21> =
			    call 'erlang':'setelement'
				(7, _cor0, _rec160)
			in  apply 'get_indextableinfo1'/2
				(_cor1, _cor21)
		    ( <_cor59> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','index_table'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2220
	  <[61|_X_next_tag]> when 'true' ->
	      _cor0
	  %% Line 2222
	  <Other> when 'true' ->
	      do  %% Line 2223
		  apply 'unexpected'/3
		      (_cor1, Other, [105|[110|[100|[101|[120|[32|[116|[97|[98|[108|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]])
		  _cor0
	end
'parse_heap_term'/4 =
    %% Line 2230
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[108|Line0],Addr,BinAddrAdj,D0> when 'true' ->
	      %% Line 2231
	      case apply 'parse_term'/3
		       (Line0, BinAddrAdj, D0) of
		<{H,[124|Line1],D1}> when 'true' ->
		    %% Line 2232
		    case apply 'parse_term'/3
			     (Line1, BinAddrAdj, D1) of
		      <{T,Line,D2}> when 'true' ->
			  let <Term> =
			      %% Line 2233
			      [H|T]
			  in  let <D> =
				  %% Line 2234
				  call 'gb_trees':'insert'
				      (Addr, Term, D2)
			      in  %% Line 2235
				  {Term,Line,D}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2236
	  <[116|Line0],Addr,BinAddrAdj,D> when 'true' ->
	      %% Line 2237
	      case apply 'get_hex'/1
		       (Line0) of
		<{N,[58|Line]}> when 'true' ->
		    %% Line 2238
		    apply 'parse_tuple'/6
			(N, Line, Addr, BinAddrAdj, D, [])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2239
	  <[70|Line0],Addr,_X_BinAddrAdj,D0> when 'true' ->
	      %% Line 2240
	      case apply 'get_hex'/1
		       (Line0) of
		<{N,[58|Line1]}> when 'true' ->
		    %% Line 2241
		    case apply 'get_chars'/2
			     (N, Line1) of
		      <{Chars,Line}> when 'true' ->
			  let <Term> =
			      %% Line 2242
			      call 'erlang':'list_to_float'
				  (Chars)
			  in  let <D> =
				  %% Line 2243
				  call 'gb_trees':'insert'
				      (Addr, Term, D0)
			      in  %% Line 2244
				  {Term,Line,D}
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2245
	  <[66|[49|[54|[35|Line0]]]],Addr,_X_BinAddrAdj,D0> when 'true' ->
	      %% Line 2246
	      case apply 'get_hex'/1
		       (Line0) of
		<{Term,Line}> when 'true' ->
		    let <D> =
			%% Line 2247
			call 'gb_trees':'insert'
			    (Addr, Term, D0)
		    in  %% Line 2248
			{Term,Line,D}
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2249
	  <[66|[45|[49|[54|[35|Line0]]]]],Addr,_X_BinAddrAdj,D0> when 'true' ->
	      %% Line 2250
	      case apply 'get_hex'/1
		       (Line0) of
		<{Term0,Line}> when 'true' ->
		    let <Term> =
			%% Line 2251
			call 'erlang':'-'
			    (Term0)
		    in  let <D> =
			    %% Line 2252
			    call 'gb_trees':'insert'
				(Addr, Term, D0)
			in  %% Line 2253
			    {Term,Line,D}
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2254
	  <[66|Line0],Addr,_X_BinAddrAdj,D0> when 'true' ->
	      %% Line 2255
	      case call 'string':'to_integer'
		       (Line0) of
		%% Line 2256
		<{Int,Line}>
		    when call 'erlang':'is_integer'
			  (Int) ->
		    let <D> =
			%% Line 2257
			call 'gb_trees':'insert'
			    (Addr, Int, D0)
		    in  %% Line 2258
			{Int,Line,D}
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2260
	  <[80|Line0],Addr,_X_BinAddrAdj,D0> when 'true' ->
	      %% Line 2261
	      case apply 'get_id'/1
		       (Line0) of
		<{Pid0,Line}> when 'true' ->
		    let <Pid> =
			%% Line 2262
			['#CDVPid'|Pid0]
		    in  let <D> =
			    %% Line 2263
			    call 'gb_trees':'insert'
				(Addr, Pid, D0)
			in  %% Line 2264
			    {Pid,Line,D}
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2265
	  <[112|Line0],Addr,_X_BinAddrAdj,D0> when 'true' ->
	      %% Line 2266
	      case apply 'get_id'/1
		       (Line0) of
		<{Port0,Line}> when 'true' ->
		    let <Port> =
			%% Line 2267
			['#CDVPort'|Port0]
		    in  let <D> =
			    %% Line 2268
			    call 'gb_trees':'insert'
				(Addr, Port, D0)
			in  %% Line 2269
			    {Port,Line,D}
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor23})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2270
	  <[69|Line0],Addr,_X_BinAddrAdj,D0> when 'true' ->
	      %% Line 2271
	      case apply 'get_binary'/1
		       (Line0) of
		<{Bin,Line}> when 'true' ->
		    let <Term> =
			%% Line 2272
			call 'erlang':'binary_to_term'
			    (Bin)
		    in  let <D> =
			    %% Line 2273
			    call 'gb_trees':'insert'
				(Addr, Term, D0)
			in  %% Line 2274
			    {Term,Line,D}
		( <_cor26> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor26})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2275
	  <[89|[104|Line0]],Addr,_X_BinAddrAdj,D0> when 'true' ->
	      %% Line 2276
	      case apply 'get_binary'/1
		       (Line0) of
		<{Term,Line}> when 'true' ->
		    let <D> =
			%% Line 2277
			call 'gb_trees':'insert'
			    (Addr, Term, D0)
		    in  %% Line 2278
			{Term,Line,D}
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2279
	  <[89|[99|Line0]],Addr,BinAddrAdj,D0> when 'true' ->
	      %% Line 2280
	      case apply 'get_hex'/1
		       (Line0) of
		<{Binp0,[58|Line1]}> when 'true' ->
		    %% Line 2281
		    case apply 'get_hex'/1
			     (Line1) of
		      <{Offset,[58|Line2]}> when 'true' ->
			  %% Line 2282
			  case apply 'get_hex'/1
				   (Line2) of
			    <{Sz,Line}> when 'true' ->
				let <Binp> =
				    %% Line 2283
				    call 'erlang':'bor'
					(Binp0, BinAddrAdj)
				in  let <_cor36> =
					%% Line 2284
					case call 'gb_trees':'lookup'
						 (Binp, D0) of
					  %% Line 2285
					  <{'value',Bin}> when 'true' ->
					      apply 'cdvbin'/3
						  (Offset, Sz, Bin)
					  %% Line 2286
					  <'none'> when 'true' ->
					      '#CDVNonexistingBinary'
					  ( <_cor35> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor35})
					    -| ['compiler_generated'] )
					end
				    in  let <D> =
					    %% Line 2288
					    call 'gb_trees':'insert'
						(Addr, _cor36, D0)
					in  %% Line 2289
					    {_cor36,Line,D}
			    ( <_cor33> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor33})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor32> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor32})
			-| ['compiler_generated'] )
		    end
		( <_cor31> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor31})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2290
	  <[89|[115|Line0]],Addr,BinAddrAdj,D0> when 'true' ->
	      %% Line 2291
	      case apply 'get_hex'/1
		       (Line0) of
		<{Binp0,[58|Line1]}> when 'true' ->
		    %% Line 2292
		    case apply 'get_hex'/1
			     (Line1) of
		      <{Offset,[58|Line2]}> when 'true' ->
			  %% Line 2293
			  case apply 'get_hex'/1
				   (Line2) of
			    <{Sz,Line}> when 'true' ->
				let <Binp> =
				    %% Line 2294
				    call 'erlang':'bor'
					(Binp0, BinAddrAdj)
				in  let <_cor45> =
					%% Line 2295
					case call 'gb_trees':'lookup'
						 (Binp, D0) of
					  %% Line 2296
					  <{'value',Bin}> when 'true' ->
					      apply 'cdvbin'/3
						  (Offset, Sz, Bin)
					  %% Line 2297
					  <'none'>
					      when call 'erlang':'=/='
						    (Binp0,
						     Binp) ->
					      %% Line 2299
					      case call 'gb_trees':'lookup'
						       (Binp0, D0) of
						%% Line 2300
						<{'value',Bin}> when 'true' ->
						    apply 'cdvbin'/3
							(Offset, Sz, Bin)
						%% Line 2301
						<'none'> when 'true' ->
						    '#CDVNonexistingBinary'
						( <_cor43> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor43})
						  -| ['compiler_generated'] )
					      end
					  %% Line 2303
					  <'none'> when 'true' ->
					      '#CDVNonexistingBinary'
					  ( <_cor44> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor44})
					    -| ['compiler_generated'] )
					end
				    in  let <D> =
					    %% Line 2305
					    call 'gb_trees':'insert'
						(Addr, _cor45, D0)
					in  %% Line 2306
					    {_cor45,Line,D}
			    ( <_cor41> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor41})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor40> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor40})
			-| ['compiler_generated'] )
		    end
		( <_cor39> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor39})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor51,_cor50,_cor49,_cor48> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor51,_cor50,_cor49,_cor48})
		  -| [{'function_name',{'parse_heap_term',4}}] )
	    -| ['compiler_generated'] )
	end
'parse_tuple'/6 =
    %% Line 2309
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,Line,Addr,_cor18,D0,Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2310
		  call 'lists':'reverse'
		      (Acc)
	      in  let <Tuple> =
		      %% Line 2310
		      call 'erlang':'list_to_tuple'
			  (_cor6)
		  in  let <D> =
			  %% Line 2311
			  call 'gb_trees':'insert'
			      (Addr, Tuple, D0)
		      in  %% Line 2312
			  {Tuple,Line,D}
	  %% Line 2313
	  <N,Line0,Addr,BinAddrAdj,D0,Acc> when 'true' ->
	      %% Line 2314
	      case apply 'parse_term'/3
		       (Line0, BinAddrAdj, D0) of
		%% Line 2315
		<{Term,[44|Line],D}>
		    when call 'erlang':'>'
			  (N,
			   1) ->
		    let <_cor9> =
			%% Line 2316
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 2316
			apply 'parse_tuple'/6
			    (_cor9, Line, Addr, BinAddrAdj, D, [Term|Acc])
		%% Line 2317
		<{Term,Line,D}> when 'true' ->
		    let <_cor10> =
			%% Line 2318
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 2318
			apply 'parse_tuple'/6
			    (_cor10, Line, Addr, BinAddrAdj, D, [Term|Acc])
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	end
'parse_term'/3 =
    %% Line 2321
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[72|Line0],BinAddrAdj,D> when 'true' ->
	      %% Line 2322
	      case apply 'get_hex'/1
		       (Line0) of
		<{Ptr,Line}> when 'true' ->
		    %% Line 2323
		    apply 'deref_ptr'/4
			(Ptr, Line, BinAddrAdj, D)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2324
	  <[78|Line],_cor26,D> when 'true' ->
	      %% Line 2325
	      {[],Line,D}
	  %% Line 2326
	  <[73|Line0],_cor27,D> when 'true' ->
	      %% Line 2327
	      case call 'string':'to_integer'
		       (Line0) of
		<{Int,Line}> when 'true' ->
		    %% Line 2328
		    {Int,Line,D}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2329
	  <Line = [65|_cor28],_cor29,D> when 'true' ->
	      %% Line 2330
	      apply 'parse_atom'/2
		  (Line, D)
	  %% Line 2331
	  <[80|Line0],_cor30,D> when 'true' ->
	      %% Line 2332
	      case apply 'get_id'/1
		       (Line0) of
		<{Pid,Line}> when 'true' ->
		    %% Line 2333
		    {['#CDVPid'|Pid],Line,D}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2334
	  <[112|Line0],_cor31,D> when 'true' ->
	      %% Line 2335
	      case apply 'get_id'/1
		       (Line0) of
		<{Port,Line}> when 'true' ->
		    %% Line 2336
		    {['#CDVPort'|Port],Line,D}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2337
	  <[83|Str0],_cor32,D> when 'true' ->
	      let <_cor7> =
		  %% Line 2338
		  call 'lists':'reverse'
		      (Str0)
	      in  let <_cor8> =
		      %% Line 2338
		      apply 'skip_blanks'/1
			  (_cor7)
		  in  let <Str> =
			  %% Line 2338
			  call 'lists':'reverse'
			      (_cor8)
		      in  %% Line 2339
			  {Str,[],D}
	  %% Line 2340
	  <[68|Line0],_cor33,D> when 'true' ->
	      %% Line 2341
	      try
		  %% Line 2342
		  case apply 'get_hex'/1
			   (Line0) of
		    <{AttabSize,[58|Line1]}> when 'true' ->
			%% Line 2343
			case apply 'parse_atom_translation_table'/3
				 (AttabSize, Line1, []) of
			  <{Attab,[69|Line2]}> when 'true' ->
			      %% Line 2344
			      case apply 'get_binary'/1
				       (Line2) of
				<{Bin,Line3}> when 'true' ->
				    let <_cor17> =
					%% Line 2345
					try
					    %% Line 2346
					    call 'erts_debug':'dist_ext_to_term'
						(Attab, Bin)
					of <_cor13> ->
					    _cor13
					catch <_cor16,_cor15,_cor14> ->
					    case <_cor16,_cor15,_cor14> of
					      %% Line 2348
					      <'error',_cor34,_cor35> when 'true' ->
						  '<invalid-distribution-message>'
					      ( <_cor16,_cor15,_cor14> when 'true' ->
						    primop 'raise'
							(_cor14, _cor15)
						-| ['compiler_generated'] )
					    end
				    in  %% Line 2345
					{_cor17,%% Line 2350
						Line3,%% Line 2351
						      D}
				( <_cor12> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor12})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	      of <_cor18> ->
		  _cor18
	      catch <_cor21,_cor20,_cor19> ->
		  case <_cor21,_cor20,_cor19> of
		    %% Line 2353
		    <'error',_cor36,_cor37> when 'true' ->
			let <_cor22> =
			    %% Line 2354
			    apply 'skip_dist_ext'/1
				(Line0)
			in  %% Line 2354
			    {'#CDVBadDistExt',_cor22,D}
		    ( <_cor21,_cor20,_cor19> when 'true' ->
			  primop 'raise'
			      (_cor19, _cor20)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'parse_term',3}}] )
	    -| ['compiler_generated'] )
	end
'skip_dist_ext'/1 =
    %% Line 2357
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2358
	    call 'lists':'reverse'
		(_cor0)
	in  %% Line 2358
	    apply 'skip_dist_ext'/2
		(_cor1, [])
'skip_dist_ext'/2 =
    %% Line 2360
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],SeqTraceToken> when 'true' ->
	      %% Line 2361
	      SeqTraceToken
	  %% Line 2362
	  <[58|_cor4],SeqTraceToken> when 'true' ->
	      %% Line 2363
	      [58|SeqTraceToken]
	  %% Line 2364
	  <[C|Cs],KeptCs> when 'true' ->
	      %% Line 2365
	      apply 'skip_dist_ext'/2
		  (Cs, [C|KeptCs])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'skip_dist_ext',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_atom'/2 =
    %% Line 2367
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[65|Line0],D> when 'true' ->
	      %% Line 2368
	      case apply 'get_hex'/1
		       (Line0) of
		<{N,[58|Line1]}> when 'true' ->
		    %% Line 2369
		    case apply 'get_chars'/2
			     (N, Line1) of
		      <{Chars,Line}> when 'true' ->
			  let <_cor4> =
			      %% Line 2370
			      call 'erlang':'list_to_atom'
				  (Chars)
			  in  %% Line 2370
			      {_cor4,Line,D}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'parse_atom',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_atom_translation_table'/3 =
    %% Line 2372
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,Line0,As> when 'true' ->
	      let <_cor3> =
		  %% Line 2373
		  call 'lists':'reverse'
		      (As)
	      in  let <_cor4> =
		      %% Line 2373
		      call 'erlang':'list_to_tuple'
			  (_cor3)
		  in  %% Line 2373
		      {_cor4,Line0}
	  %% Line 2374
	  <N,Line0,As> when 'true' ->
	      %% Line 2375
	      case apply 'parse_atom'/2
		       (Line0, []) of
		<{A,Line1,_cor10}> when 'true' ->
		    let <_cor6> =
			%% Line 2376
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 2376
			apply 'parse_atom_translation_table'/3
			    (_cor6, Line1, [A|As])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'deref_ptr'/4 =
    %% Line 2380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2381
	case call 'gb_trees':'lookup'
		 (_cor3, _cor0) of
	  %% Line 2382
	  <{'value',Term}> when 'true' ->
	      %% Line 2383
	      {Term,_cor2,_cor0}
	  %% Line 2384
	  <'none'> when 'true' ->
	      %% Line 2385
	      case call 'erlang':'get'
		       ('fd') of
		%% Line 2386
		<'end_of_heap'> when 'true' ->
		    %% Line 2387
		    {['#CDVIncompleteHeap'],_cor2,_cor0}
		%% Line 2388
		<Fd> when 'true' ->
		    %% Line 2389
		    case apply 'val'/1
			     (Fd) of
		      %% Line 2390
		      <[61|_cor12]> when 'true' ->
			  do  %% Line 2391
			      call 'erlang':'put'
				  ('fd', 'end_of_heap')
			      %% Line 2392
			      apply 'deref_ptr'/4
				  (_cor3, _cor2, _cor1, _cor0)
		      %% Line 2393
		      <L> when 'true' ->
			  let <D> =
			      %% Line 2394
			      apply 'parse'/3
				  (L, _cor1, _cor0)
			  in  %% Line 2395
			      apply 'deref_ptr'/4
				  (_cor3, _cor2, _cor1, D)
		    end
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'get_hex'/1 =
    %% Line 2400
    fun (_cor0) ->
	%% Line 2401
	apply 'get_hex_1'/2
	    (_cor0, 0)
'get_hex_1'/2 =
    %% Line 2403
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = [H|T],Acc> when 'true' ->
	      %% Line 2404
	      case apply 'get_hex_digit'/1
		       (H) of
		%% Line 2405
		<'none'> when 'true' ->
		    {Acc,L}
		%% Line 2406
		<Digit> when 'true' ->
		    let <_cor2> =
			call 'erlang':'bsl'
			    (Acc, 4)
		    in  let <_cor3> =
			    call 'erlang':'bor'
				(_cor2, Digit)
			in  apply 'get_hex_1'/2
				(T, _cor3)
	      end
	  %% Line 2408
	  <[],Acc> when 'true' ->
	      {Acc,[]}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_hex_1',2}}] )
	    -| ['compiler_generated'] )
	end
'get_hex_digit'/1 =
    %% Line 2410
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(48, _cor0)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 57)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      call 'erlang':'-'
		  (C, 48)
	  %% Line 2411
	  <C>
	      when let <_cor3> =
		    call 'erlang':'=<'
			(97, _cor0)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 102)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  call 'erlang':'-'
		      (C, 97)
	      in  call 'erlang':'+'
		      (_cor5, 10)
	  %% Line 2412
	  <C>
	      when let <_cor6> =
		    call 'erlang':'=<'
			(65, _cor0)
		in  let <_cor7> =
			call 'erlang':'=<'
			    (_cor0, 70)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      let <_cor8> =
		  call 'erlang':'-'
		      (C, 65)
	      in  call 'erlang':'+'
		      (_cor8, 10)
	  %% Line 2413
	  <_cor10> when 'true' ->
	      'none'
	end
'skip_blanks'/1 =
    %% Line 2415
    fun (_cor0) ->
	case _cor0 of
	  <[32|T]> when 'true' ->
	      %% Line 2416
	      apply 'skip_blanks'/1
		  (T)
	  %% Line 2417
	  <[13|T]> when 'true' ->
	      %% Line 2418
	      apply 'skip_blanks'/1
		  (T)
	  %% Line 2419
	  <[10|T]> when 'true' ->
	      %% Line 2420
	      apply 'skip_blanks'/1
		  (T)
	  %% Line 2421
	  <[9|T]> when 'true' ->
	      %% Line 2422
	      apply 'skip_blanks'/1
		  (T)
	  %% Line 2423
	  <T> when 'true' ->
	      T
	end
'get_chars'/2 =
    %% Line 2425
    fun (_cor1,_cor0) ->
	%% Line 2426
	apply 'get_chars'/3
	    (_cor1, _cor0, [])
'get_chars'/3 =
    %% Line 2428
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,Line,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 2429
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2429
		  {_cor3,Line}
	  %% Line 2430
	  <N,[H|T],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2431
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 2431
		  apply 'get_chars'/3
		      (_cor4, T, [H|Acc])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_chars',3}}] )
	    -| ['compiler_generated'] )
	end
'get_id'/1 =
    %% Line 2433
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2434
	    ( fun (_cor1) ->
		  case _cor1 of
		    <60> when 'true' ->
			'false'
		    <_cor6> when 'true' ->
			'true'
		  end
	      -| [{'id',{0,0,'-get_id/1-fun-0-'}}] )
	in  %% Line 2434
	    case call 'lists':'dropwhile'
		     (_cor3, _cor0) of
	      <[60|Line]> when 'true' ->
		  %% Line 2435
		  apply 'get_id'/3
		      (Line, [], [])
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'get_id'/3 =
    %% Line 2437
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[62|Line],Acc,Id> when 'true' ->
	      let <_cor3> =
		  %% Line 2438
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor4> =
		      %% Line 2438
		      call 'erlang':'list_to_integer'
			  (_cor3)
		  in  let <_cor5> =
			  %% Line 2438
			  call 'lists':'reverse'
			      (Id, [_cor4|[]])
		      in  %% Line 2438
			  {_cor5,Line}
	  %% Line 2439
	  <[46|Line],Acc,Id> when 'true' ->
	      let <_cor6> =
		  %% Line 2440
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor7> =
		      %% Line 2440
		      call 'erlang':'list_to_integer'
			  (_cor6)
		  in  %% Line 2440
		      apply 'get_id'/3
			  (Line, [], [_cor7|Id])
	  %% Line 2441
	  <[H|T],Acc,Id> when 'true' ->
	      %% Line 2442
	      apply 'get_id'/3
		  (T, [H|Acc], Id)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'get_id',3}}] )
	    -| ['compiler_generated'] )
	end
'get_label'/1 =
    %% Line 2444
    fun (_cor0) ->
	%% Line 2445
	apply 'get_label'/2
	    (_cor0, [])
'get_label'/2 =
    %% Line 2447
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[58|Line],Acc> when 'true' ->
	      let <Label> =
		  %% Line 2448
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2449
		  case apply 'get_hex'/1
			   (Label) of
		    %% Line 2450
		    <{Int,[]}> when 'true' ->
			%% Line 2451
			{Int,Line}
		    %% Line 2452
		    <_cor7> when 'true' ->
			let <_cor3> =
			    %% Line 2453
			    call 'erlang':'list_to_atom'
				(Label)
			in  %% Line 2453
			    {_cor3,Line}
		  end
	  %% Line 2455
	  <[H|T],Acc> when 'true' ->
	      %% Line 2456
	      apply 'get_label'/2
		  (T, [H|Acc])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_label',2}}] )
	    -| ['compiler_generated'] )
	end
'get_binary'/1 =
    %% Line 2458
    fun (_cor0) ->
	%% Line 2459
	case apply 'get_hex'/1
		 (_cor0) of
	  <{N,[58|Line]}> when 'true' ->
	      %% Line 2460
	      apply 'do_get_binary'/3
		  (N, Line, [])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'get_binary'/3 =
    %% Line 2462
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2463
	case apply 'get_hex'/1
		 (_cor0) of
	  <{_X_N,[58|Line]}> when 'true' ->
	      let <_cor5> =
		  %% Line 2464
		  call 'erlang':'*'
		      (_cor2, 2)
	      in  let <_cor6> =
		      %% Line 2464
		      call 'erlang':'+'
			  (_cor5, 1)
		  in  let <_cor4> =
			  %% Line 2464
			  call 'erlang':'*'
			      (_cor1, 2)
		      in  let <_cor7> =
			      %% Line 2464
			      call 'lists':'sublist'
				  (Line, _cor6, _cor4)
			  in  %% Line 2464
			      apply 'do_get_binary'/3
				  (_cor1, _cor7, [])
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_get_binary'/3 =
    %% Line 2466
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,Line,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 2467
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor4> =
		      %% Line 2467
		      call 'erlang':'list_to_binary'
			  (_cor3)
		  in  %% Line 2467
		      {_cor4,Line}
	  %% Line 2468
	  <N,[A|[B|Line]],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2469
		  apply 'get_hex_digit'/1
		      (A)
	      in  let <_cor7> =
		      %% Line 2469
		      call 'erlang':'bsl'
			  (_cor6, 4)
		  in  let <_cor5> =
			  %% Line 2469
			  apply 'get_hex_digit'/1
			      (B)
		      in  let <Byte> =
			      %% Line 2469
			      call 'erlang':'bor'
				  (_cor7, _cor5)
			  in  let <_cor9> =
				  %% Line 2470
				  call 'erlang':'-'
				      (N, 1)
			      in  %% Line 2470
				  apply 'do_get_binary'/3
				      (_cor9, Line, [Byte|Acc])
	  %% Line 2471
	  <_X_N,[],_X_Acc> when 'true' ->
	      %% Line 2472
	      {'#CDVTruncatedBinary',[]}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_get_binary',3}}] )
	    -| ['compiler_generated'] )
	end
'cdvbin'/3 =
    %% Line 2474
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Offset,Size,{'#CDVBin',Pos}> when 'true' ->
	      %% Line 2475
	      ['#CDVBin'|[Offset|[Size|[Pos|[]]]]]
	  %% Line 2476
	  <Offset,Size,['#CDVBin'|[_cor6|[_cor7|[Pos|[]]]]]> when 'true' ->
	      %% Line 2477
	      ['#CDVBin'|[Offset|[Size|[Pos|[]]]]]
	  %% Line 2478
	  <_cor8,_cor9,'#CDVTruncatedBinary'> when 'true' ->
	      %% Line 2479
	      '#CDVTruncatedBinary'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'cdvbin',3}}] )
	    -| ['compiler_generated'] )
	end
'reset_index_table'/0 =
    %% Line 2483
    fun () ->
	%% Line 2484
	call 'ets':'delete_all_objects'
	    ('cdv_dump_index_table')
'insert_index'/3 =
    %% Line 2486
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2487
	call 'ets':'insert'
	    ('cdv_dump_index_table', {{_cor2,_cor0},_cor1})
'lookup_index'/1 =
    %% Line 2489
    fun (_cor0) ->
	case _cor0 of
	  <{Tag,Id}> when 'true' ->
	      %% Line 2490
	      apply 'lookup_index'/2
		  (Tag, Id)
	  %% Line 2491
	  <Tag> when 'true' ->
	      %% Line 2492
	      apply 'lookup_index'/2
		  (Tag, '$2')
	end
'lookup_index'/2 =
    %% Line 2493
    fun (_cor1,_cor0) ->
	%% Line 2494
	call 'ets':'select'
	    ('cdv_dump_index_table', [{{{_cor1,'$1'},_cor0},[],[{{_cor0,'$1'}}|[]]}|[]])
'count_index'/1 =
    %% Line 2496
    fun (_cor0) ->
	%% Line 2497
	call 'ets':'select_count'
	    ('cdv_dump_index_table', [{{{_cor0,'_'},'_'},[],['true']}|[]])
'tag_to_atom'/1 =
    %% Line 2503
    fun (_cor0) ->
	case _cor0 of
	  <[97|[108|[108|[111|[99|[97|[116|[101|[100|[95|[97|[114|[101|[97|[115]]]]]]]]]]]]]]]> when 'true' ->
	      'allocated_areas'
	  %% Line 2504
	  <[97|[108|[108|[111|[99|[97|[116|[111|[114]]]]]]]]]> when 'true' ->
	      'allocator'
	  %% Line 2505
	  <[97|[116|[111|[109|[115]]]]]> when 'true' ->
	      'atoms'
	  %% Line 2506
	  <[98|[105|[110|[97|[114|[121]]]]]]> when 'true' ->
	      'binary'
	  %% Line 2507
	  <[101|[110|[100]]]> when 'true' ->
	      'ende'
	  %% Line 2508
	  <[101|[114|[108|[95|[99|[114|[97|[115|[104|[95|[100|[117|[109|[112]]]]]]]]]]]]]]> when 'true' ->
	      'erl_crash_dump'
	  %% Line 2509
	  <[101|[116|[115]]]> when 'true' ->
	      'ets'
	  %% Line 2510
	  <[102|[117|[110]]]> when 'true' ->
	      'fu'
	  %% Line 2511
	  <[104|[97|[115|[104|[95|[116|[97|[98|[108|[101]]]]]]]]]]> when 'true' ->
	      'hash_table'
	  %% Line 2512
	  <[104|[105|[100|[100|[101|[110|[95|[110|[111|[100|[101]]]]]]]]]]]> when 'true' ->
	      'hidden_node'
	  %% Line 2513
	  <[105|[110|[100|[101|[120|[95|[116|[97|[98|[108|[101]]]]]]]]]]]> when 'true' ->
	      'index_table'
	  %% Line 2514
	  <[105|[110|[115|[116|[114|[95|[100|[97|[116|[97]]]]]]]]]]> when 'true' ->
	      'instr_data'
	  %% Line 2515
	  <[105|[110|[116|[101|[114|[110|[97|[108|[95|[101|[116|[115]]]]]]]]]]]]> when 'true' ->
	      'internal_ets'
	  %% Line 2516
	  <[108|[111|[97|[100|[101|[100|[95|[109|[111|[100|[117|[108|[101|[115]]]]]]]]]]]]]]> when 'true' ->
	      'loaded_modules'
	  %% Line 2517
	  <[109|[101|[109|[111|[114|[121]]]]]]> when 'true' ->
	      'memory'
	  %% Line 2518
	  <[109|[111|[100]]]> when 'true' ->
	      'mod'
	  %% Line 2519
	  <[110|[111|[95|[100|[105|[115|[116|[114|[105|[98|[117|[116|[105|[111|[110]]]]]]]]]]]]]]]> when 'true' ->
	      'no_distribution'
	  %% Line 2520
	  <[110|[111|[100|[101]]]]> when 'true' ->
	      'node'
	  %% Line 2521
	  <[110|[111|[116|[95|[99|[111|[110|[110|[101|[99|[116|[101|[100]]]]]]]]]]]]]> when 'true' ->
	      'not_connected'
	  %% Line 2522
	  <[111|[108|[100|[95|[105|[110|[115|[116|[114|[95|[100|[97|[116|[97]]]]]]]]]]]]]]> when 'true' ->
	      'old_instr_data'
	  %% Line 2523
	  <[112|[111|[114|[116]]]]> when 'true' ->
	      'port'
	  %% Line 2524
	  <[112|[114|[111|[99]]]]> when 'true' ->
	      'proc'
	  %% Line 2525
	  <[112|[114|[111|[99|[95|[100|[105|[99|[116|[105|[111|[110|[97|[114|[121]]]]]]]]]]]]]]]> when 'true' ->
	      'proc_dictionary'
	  %% Line 2526
	  <[112|[114|[111|[99|[95|[104|[101|[97|[112]]]]]]]]]> when 'true' ->
	      'proc_heap'
	  %% Line 2527
	  <[112|[114|[111|[99|[95|[109|[101|[115|[115|[97|[103|[101|[115]]]]]]]]]]]]]> when 'true' ->
	      'proc_messages'
	  %% Line 2528
	  <[112|[114|[111|[99|[95|[115|[116|[97|[99|[107]]]]]]]]]]> when 'true' ->
	      'proc_stack'
	  %% Line 2529
	  <[116|[105|[109|[101|[114]]]]]> when 'true' ->
	      'timer'
	  %% Line 2530
	  <[118|[105|[115|[105|[98|[108|[101|[95|[110|[111|[100|[101]]]]]]]]]]]]> when 'true' ->
	      'visible_node'
	  %% Line 2531
	  <UnknownTag> when 'true' ->
	      do  %% Line 2532
		  call 'io':'format'
		      ([87|[65|[82|[78|[73|[78|[71|[58|[32|[70|[111|[117|[110|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[116|[97|[103|[58|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [UnknownTag|[]])
		  %% Line 2533
		  call 'erlang':'list_to_atom'
		      (UnknownTag)
	end
'lookup_and_parse_index'/4 =
    %% Line 2537
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <File,What,ParseFun,Str>
	      when call 'erlang':'is_list'
		    (File) ->
	      let <Indices> =
		  %% Line 2538
		  apply 'lookup_index'/1
		      (What)
	      in  let <Fun> =
		      %% Line 2539
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <Fd,{Id,Start}> when 'true' ->
				  do  %% Line 2540
				      apply 'pos_bof'/2
					  (Fd, Start)
				      %% Line 2541
				      apply ParseFun
					  (Fd, Id)
			      ( <_cor8,_cor7> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor8,_cor7})
				      -| [{'function_name',{'-lookup_and_parse_index/4-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-lookup_and_parse_index/4-fun-0-'}}] )
		  in  let <Report> =
			  %% Line 2543
			  call 'erlang':'++'
			      ([80|[114|[111|[99|[101|[115|[115|[105|[110|[103|[32]]]]]]]]]]], Str)
		      in  %% Line 2544
			  apply 'progress_pmap'/4
			      (Report, File, Fun, Indices)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'lookup_and_parse_index',4}}] )
	    -| ['compiler_generated'] )
	end
'to_proplist'/2 =
    %% Line 2548
    fun (_cor1,_cor0) ->
	let <Values> =
	    %% Line 2549
	    apply 'to_value_list'/1
		(_cor0)
	in  %% Line 2550
	    call 'lists':'zip'
		(_cor1, Values)
'to_value_list'/1 =
    %% Line 2554
    fun (_cor0) ->
	%% Line 2555
	case call 'erlang':'tuple_to_list'
		 (_cor0) of
	  <[_X_RecordName|Values]> when 'true' ->
	      %% Line 2556
	      Values
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'progress_foldl'/4 =
    %% Line 2563
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2564
	    call 'erlang':'length'
		(_cor0)
	in  do  %% Line 2564
		apply 'init_progress'/2
		    (_cor3, _cor4)
		%% Line 2565
		apply 'progress_foldl1'/3
		    (_cor2, _cor1, _cor0)
'progress_foldl1'/3 =
    %% Line 2567
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,Acc,[H|T]> when 'true' ->
	      do  %% Line 2568
		  apply 'update_progress'/0
		      ()
		  let <_cor3> =
		      %% Line 2569
		      apply Fun
			  (H, Acc)
		  in  %% Line 2569
		      apply 'progress_foldl1'/3
			  (Fun, _cor3, T)
	  %% Line 2570
	  <_X_Fun,Acc,[]> when 'true' ->
	      do  %% Line 2571
		  apply 'end_progress'/0
		      ()
		  %% Line 2572
		  Acc
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'progress_foldl1',3}}] )
	    -| ['compiler_generated'] )
	end
'progress_pmap'/4 =
    %% Line 2581
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <NTot> =
	    %% Line 2582
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor5> =
		%% Line 2583
		call 'erlang':'system_info'
		    ('schedulers')
	    in  let <NProcs> =
		    %% Line 2583
		    call 'erlang':'*'
			(_cor5, 2)
		in  let <_cor7> =
			%% Line 2584
			call 'erlang':'div'
			    (NTot, NProcs)
		    in  let <NPerProc> =
			    %% Line 2584
			    call 'erlang':'+'
				(_cor7, 1)
			in  let <_cor9> =
				%% Line 2587
				call 'erlang':'div'
				    (NTot, 100)
			    in  let <ReportInterval> =
				    %% Line 2587
				    call 'erlang':'+'
					(_cor9, 1)
				in  do  %% Line 2591
					apply 'init_progress'/2
					    (_cor3, 99)
					let <Collector> =
					    %% Line 2593
					    call 'erlang':'self'
						()
					in  let <_cor22> =
						%% Line 2596
						( fun (_cor19,_cor18) ->
						      case <_cor19,_cor18> of
							<_cor28,{L,Ps}> when 'true' ->
							    let <_cor14> =
								%% Line 2597
								case <> of
								  <>
								      when try
									    let <_cor13> =
										call 'erlang':'length'
										    (L)
									    in  call 'erlang':'>='
										    (_cor13, NPerProc)
									of <Try> ->
									    Try
									catch <T,R> ->
									    'false' ->
								      call 'lists':'split'
									  (NPerProc, L)
								  %% Line 2598
								  <> when 'true' ->
								      {L,[]}
								end
							    in  %% Line 2597
								case _cor14 of
								  <{L1,L2}> when 'true' ->
								      let <_cor16> =
									  %% Line 2602
									  ( fun () ->
										%% Line 2603
										apply 'progress_map'/5
										    (Collector, ReportInterval, _cor2, _cor1, L1)
									    -| [{'id',{0,0,'-progress_pmap/4-fun-0-'}}] )
								      in  %% Line 2600
									  case %% Line 2601
									       call 'erlang':'spawn_monitor'
										   (_cor16) of
									    <{P,_X_Ref}> when 'true' ->
										%% Line 2605
										{L2,[P|Ps]}
									    ( <_cor17> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor17})
									      -| ['compiler_generated'] )
									  end
								  ( <_cor15> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor15})
								    -| ['compiler_generated'] )
								end
							( <_cor21,_cor20> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor21,_cor20})
								-| [{'function_name',{'-progress_pmap/4-fun-1-',2}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-progress_pmap/4-fun-1-'}}] )
					    in  let <_cor12> =
						    %% Line 2608
						    call 'lists':'seq'
							(1, NProcs)
						in  %% Line 2594
						    case %% Line 2595
							 call 'lists':'foldl'
							     (_cor22, %% Line 2607
								      {_cor0,[]}, _cor12) of
						      <{[],Pids}> when 'true' ->
							  %% Line 2609
							  apply 'collect'/2
							      (Pids, [])
						      ( <_cor23> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor23})
							-| ['compiler_generated'] )
						    end
'progress_map'/5 =
    %% Line 2611
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Fd> =
	    %% Line 2612
	    apply 'open'/1
		(_cor2)
	in  let <_cor8> =
		%% Line 2613
		( fun (_cor6) ->
		      call 'erlang':'!'
			  (_cor4, 'progress')
		  -| [{'id',{0,0,'-progress_map/5-fun-0-'}}] )
	    in  do  %% Line 2613
		    apply 'init_progress'/3
			(_cor3, _cor8, 'ok')
		    %% Line 2614
		    apply 'progress_map'/4
			(Fd, _cor1, _cor0, [])
'progress_map'/4 =
    %% Line 2615
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fd,Fun,[H|T],Acc> when 'true' ->
	      do  %% Line 2616
		  apply 'update_progress'/0
		      ()
		  let <_cor4> =
		      %% Line 2617
		      apply Fun
			  (Fd, H)
		  in  %% Line 2617
		      apply 'progress_map'/4
			  (Fd, Fun, T, [_cor4|Acc])
	  %% Line 2618
	  <Fd,_X_Fun,[],Acc> when 'true' ->
	      do  %% Line 2619
		  apply 'close'/1
		      (Fd)
		  %% Line 2620
		  call 'erlang':'exit'
		      ({'pmap_done',Acc})
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'progress_map',4}}] )
	    -| ['compiler_generated'] )
	end
'collect'/2 =
    %% Line 2622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      do  %% Line 2623
		  apply 'end_progress'/0
		      ()
		  %% Line 2624
		  call 'lists':'append'
		      (Acc)
	  %% Line 2625
	  <Pids,Acc> when 'true' ->
	      %% Line 2626
	      receive
		%% Line 2627
		<'progress'> when 'true' ->
		    do  %% Line 2628
			apply 'update_progress'/0
			    ()
			%% Line 2629
			apply 'collect'/2
			    (Pids, Acc)
		%% Line 2630
		<{'DOWN',_X_Ref,'process',Pid,{'pmap_done',Result}}> when 'true' ->
		    let <_cor2> =
			%% Line 2631
			call 'lists':'delete'
			    (Pid, Pids)
		    in  %% Line 2631
			apply 'collect'/2
			    (_cor2, [Result|Acc])
	      after 'infinity' ->
		'true'
	end
'init_progress'/2 =
    %% Line 2638
    fun (_cor1,_cor0) ->
	do  %% Line 2639
	    call 'observer_lib':'report_progress'
		({'ok',_cor1})
	    let <_cor2> =
		%% Line 2640
		call 'erlang':'div'
		    (_cor0, 100)
	    in  let <Interval> =
		    %% Line 2640
		    call 'erlang':'+'
			(_cor2, 1)
		in  let <Fun> =
			%% Line 2641
			( fun (_cor5) ->
			      let <P> =
				  call 'erlang':'+'
				      (_cor5, 1)
			      in  do  call 'observer_lib':'report_progress'
					  ({'ok',P})
				      P
			  -| [{'id',{0,0,'-init_progress/2-fun-0-'}}] )
		    in  %% Line 2642
			apply 'init_progress'/3
			    (Interval, Fun, 0)
'init_progress'/3 =
    %% Line 2643
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 2644
	    call 'erlang':'put'
		('progress', {_cor2,_cor2,_cor1,_cor0})
	    %% Line 2645
	    'ok'
'update_progress'/0 =
    %% Line 2648
    fun () ->
	%% Line 2649
	apply 'update_progress'/1
	    (1)
'update_progress'/1 =
    %% Line 2650
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2651
	    call 'erlang':'get'
		('progress')
	in  %% Line 2651
	    apply 'do_update_progress'/2
		(_cor1, _cor0)
'do_update_progress'/2 =
    %% Line 2653
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Count,Interval,Fun,Acc},Processed>
	      when call 'erlang':'>'
		    (Processed,
		     Count) ->
	      let <_cor3> =
		  %% Line 2654
		  apply Fun
		      (Acc)
	      in  let <_cor2> =
		      %% Line 2654
		      call 'erlang':'-'
			  (Processed, Count)
		  in  %% Line 2654
		      apply 'do_update_progress'/2
			  ({Interval,Interval,Fun,_cor3}, _cor2)
	  %% Line 2655
	  <{Count,Interval,Fun,Acc},Processed> when 'true' ->
	      let <_cor4> =
		  %% Line 2656
		  call 'erlang':'-'
		      (Count, Processed)
	      in  do  %% Line 2656
		      call 'erlang':'put'
			  ('progress', {_cor4,Interval,Fun,Acc})
		      %% Line 2657
		      'ok'
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'do_update_progress',2}}] )
	    -| ['compiler_generated'] )
	end
'end_progress'/0 =
    %% Line 2660
    fun () ->
	%% Line 2661
	apply 'end_progress'/1
	    ({'ok',100})
'end_progress'/1 =
    %% Line 2662
    fun (_cor0) ->
	do  %% Line 2663
	    call 'observer_lib':'report_progress'
		(_cor0)
	    do  %% Line 2664
		call 'erlang':'erase'
		    ('progress')
		%% Line 2665
		'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('crashdump_viewer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('crashdump_viewer', _cor0)
end