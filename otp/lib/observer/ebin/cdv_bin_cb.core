module 'cdv_bin_cb' ['detail_pages'/0,
		     'get_details'/1,
		     'module_info'/0,
		     'module_info'/1]
    attributes []
'get_details'/1 =
    %% Line 24
    fun (_cor0) ->
	case _cor0 of
	  <{Type,{T,Key}}> when 'true' ->
	      %% Line 25
	      case call 'ets':'lookup'
		       (T, Key) of
		<[{_cor4,Term}|[]]>
		    when call 'erlang':'=:='
			  (_cor4,
			   Key) ->
		    %% Line 26
		    {'ok',{[69|[120|[112|[97|[110|[100|[101|[100|[32|[66|[105|[110|[97|[114|[121]]]]]]]]]]]]]]],{Type,Term},[]}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 27
	  <{'cdv',Id}> when 'true' ->
	      %% Line 28
	      case call 'crashdump_viewer':'expand_binary'
		       (Id) of
		<{'ok',Bin}> when 'true' ->
		    %% Line 29
		    {'ok',{[69|[120|[112|[97|[110|[100|[101|[100|[32|[66|[105|[110|[97|[114|[121]]]]]]]]]]]]]]],{'cvd',Bin},[]}}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'get_details',1}}] )
	    -| ['compiler_generated'] )
	end
'detail_pages'/0 =
    %% Line 31
    fun () ->
	%% Line 32
	[{[66|[105|[110|[97|[114|[121]]]]]],( 'init_bin_page'/2
					      -| [{'id',{0,0,'-detail_pages/0-fun-0-'}}] )}|[]]
'init_bin_page'/2 =
    %% Line 34
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Parent,{Type,Bin}> when 'true' ->
	      let <_cor2> =
		  %% Line 37
		  apply 'format_bin_fun'/2
		      ([126|[112]], Bin)
	      in  let <_cor3> =
		      %% Line 38
		      apply 'format_bin_fun'/2
			  ([126|[116|[112]]], Bin)
		  in  let <_cor4> =
			  %% Line 39
			  apply 'format_bin_fun'/2
			      ([126|[119]], Bin)
		      in  let <_cor5> =
			      %% Line 40
			      apply 'format_bin_fun'/2
				  ([126|[115]], Bin)
			  in  let <_cor6> =
				  %% Line 41
				  apply 'format_bin_fun'/2
				      ([126|[116|[115]]], Bin)
			      in  let <_cor7> =
				      %% Line 42
				      apply 'hex_binary_fun'/1
					  (Bin)
				  in  let <_cor8> =
					  %% Line 43
					  apply 'binary_to_term_fun'/1
					      (Bin)
				      in  %% Line 35
					  call 'cdv_multi_wx':'start_link'
					      (%% Line 36
					       Parent, %% Line 37
						       [{[70|[111|[114|[109|[97|[116|[32|[126|[112]]]]]]]]],'cdv_html_wx',{Type,_cor2}}|%% Line 38
																	[{[70|[111|[114|[109|[97|[116|[32|[126|[116|[112]]]]]]]]]],'cdv_html_wx',{Type,_cor3}}|%% Line 39
																											       [{[70|[111|[114|[109|[97|[116|[32|[126|[119]]]]]]]]],'cdv_html_wx',{Type,_cor4}}|%% Line 40
																																						[{[70|[111|[114|[109|[97|[116|[32|[126|[115]]]]]]]]],'cdv_html_wx',{Type,_cor5}}|%% Line 41
																																																 [{[70|[111|[114|[109|[97|[116|[32|[126|[116|[115]]]]]]]]]],'cdv_html_wx',{Type,_cor6}}|%% Line 42
																																																											[{[72|[101|[120]]],'cdv_html_wx',{Type,_cor7}}|%% Line 43
																																																																       [{[84|[101|[114|[109]]]],'cdv_html_wx',{Type,_cor8}}|[]]]]]]]])
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'init_bin_page',2}}] )
	    -| ['compiler_generated'] )
	end
'format_bin_fun'/2 =
    %% Line 45
    fun (_cor1,_cor0) ->
	%% Line 46
	( fun () ->
	      %% Line 47
	      try
		  call 'io_lib':'format'
		      (_cor1, [_cor0|[]])
	      of <_cor2> ->
		  let <_cor3> =
		      %% Line 48
		      call 'lists':'flatten'
			  (_cor2)
		  in  %% Line 48
		      apply 'plain_html'/1
			  (_cor3)
	      catch <_cor7,_cor6,_cor5> ->
		  case <_cor7,_cor6,_cor5> of
		    %% Line 49
		    <'error','badarg',_cor11> when 'true' ->
			let <Warning> =
			    %% Line 50
			    call 'erlang':'++'
				([84|[104|[105|[115|[32|[98|[105|[110|[97|[114|[121|[32|[99|[97|[110|[32|[110|[111|[116|[32|[98|[101|[32|[102|[111|[114|[109|[97|[116|[116|[101|[100|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor1)
			in  %% Line 51
			    call 'observer_html_lib':'warning'
				(Warning)
		    ( <_cor7,_cor6,_cor5> when 'true' ->
			  primop 'raise'
			      (_cor5, _cor6)
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-format_bin_fun/2-fun-0-'}}] )
'binary_to_term_fun'/1 =
    %% Line 55
    fun (_cor0) ->
	%% Line 56
	( fun () ->
	      %% Line 57
	      try
		  call 'erlang':'binary_to_term'
		      (_cor0)
	      of <_cor1> ->
		  let <_cor2> =
		      %% Line 58
		      call 'io_lib':'format'
			  ([126|[112]], [_cor1|[]])
		  in  %% Line 58
		      apply 'plain_html'/1
			  (_cor2)
	      catch <_cor6,_cor5,_cor4> ->
		  case <_cor6,_cor5,_cor4> of
		    %% Line 59
		    <'error','badarg',_cor9> when 'true' ->
			%% Line 61
			call 'observer_html_lib':'warning'
			    ([84|[104|[105|[115|[32|[98|[105|[110|[97|[114|[121|[32|[99|[97|[110|[32|[110|[111|[116|[32|[98|[101|[32|[99|[111|[118|[101|[114|[116|[101|[100|[32|[116|[111|[32|[97|[110|[32|[69|[114|[108|[97|[110|[103|[32|[116|[101|[114|[109]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    ( <_cor6,_cor5,_cor4> when 'true' ->
			  primop 'raise'
			      (_cor4, _cor5)
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-binary_to_term_fun/1-fun-0-'}}] )
'hex_binary_fun'/1 =
    %% Line 66
    fun (_cor0) ->
	%% Line 67
	( fun () ->
	      let <_cor1> =
		  %% Line 68
		  apply 'format_hex'/2
		      (_cor0, 25)
	      in  let <_cor2> =
		      %% Line 68
		      call 'erlang':'++'
			  (_cor1, [62|[62]])
		  in  let <S> =
			  %% Line 68
			  [60|[60|_cor2]]
		      in  let <_cor4> =
			      %% Line 69
			      call 'io_lib':'format'
				  ([126|[115]], [S|[]])
			  in  %% Line 69
			      apply 'plain_html'/1
				  (_cor4)
	  -| [{'id',{0,0,'-hex_binary_fun/1-fun-0-'}}] )
'format_hex'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<B1>(4,1,'integer',['unsigned'|['big']]),
	     #<B2>(4,1,'integer',['unsigned'|['big']])}#,_cor13> when 'true' ->
	      let <_cor2> =
		  %% Line 73
		  call 'erlang':'integer_to_list'
		      (B1, 16)
	      in  let <_cor3> =
		      %% Line 73
		      call 'erlang':'integer_to_list'
			  (B2, 16)
		  in  %% Line 73
		      [_cor2|[_cor3|[]]]
	  %% Line 74
	  <#{#<B1>(4,1,'integer',['unsigned'|['big']]),
	     #<B2>(4,1,'integer',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#,0> when 'true' ->
	      let <_cor4> =
		  %% Line 75
		  call 'erlang':'integer_to_list'
		      (B1, 16)
	      in  let <_cor5> =
		      %% Line 75
		      call 'erlang':'integer_to_list'
			  (B2, 16)
		  in  let <_cor6> =
			  %% Line 76
			  apply 'format_hex'/2
			      (Bin, 25)
		      in  %% Line 75
			  [_cor4|[_cor5|[44|[10|[32|[32|_cor6]]]]]]
	  %% Line 77
	  <#{#<B1>(4,1,'integer',['unsigned'|['big']]),
	     #<B2>(4,1,'integer',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' ->
	      let <_cor7> =
		  %% Line 78
		  call 'erlang':'integer_to_list'
		      (B1, 16)
	      in  let <_cor8> =
		      %% Line 78
		      call 'erlang':'integer_to_list'
			  (B2, 16)
		  in  let <_cor9> =
			  %% Line 79
			  call 'erlang':'-'
			      (N, 1)
		      in  let <_cor10> =
			      %% Line 79
			      apply 'format_hex'/2
				  (Bin, _cor9)
			  in  %% Line 78
			      [_cor7|[_cor8|[44|_cor10]]]
	  ( <_cor12,_cor11> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor12)
		    ( primop 'match_fail'
			  ({'function_clause',_cor12,_cor11})
		      -| [{'function_name',{'format_hex',2}}] )
	    -| ['compiler_generated'] )
	end
'plain_html'/1 =
    %% Line 81
    fun (_cor0) ->
	%% Line 82
	call 'observer_html_lib':'plain_page'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('cdv_bin_cb')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('cdv_bin_cb', _cor0)
end