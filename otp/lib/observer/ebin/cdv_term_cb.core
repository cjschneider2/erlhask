module 'cdv_term_cb' ['detail_pages'/0,
		      'get_details'/1,
		      'module_info'/0,
		      'module_info'/1]
    attributes []
'get_details'/1 =
    %% Line 24
    fun (_cor0) ->
	case _cor0 of
	  <{Type,{T,Key}}> when 'true' ->
	      %% Line 25
	      case call 'ets':'lookup'
		       (T, Key) of
		<[{_cor3,Term}|[]]>
		    when call 'erlang':'=:='
			  (_cor3,
			   Key) ->
		    %% Line 26
		    {'ok',{[69|[120|[112|[97|[110|[100|[101|[100|[32|[84|[101|[114|[109]]]]]]]]]]]]],{Type,[Term|[T|[]]]},[]}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_details',1}}] )
	    -| ['compiler_generated'] )
	end
'detail_pages'/0 =
    %% Line 28
    fun () ->
	%% Line 29
	[{[84|[101|[114|[109]]]],( 'init_term_page'/2
				   -| [{'id',{0,0,'-detail_pages/0-fun-0-'}}] )}|[]]
'init_term_page'/2 =
    %% Line 31
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ParentWin,{Type,[Term|[Tab|[]]]}> when 'true' ->
	      let <Expanded> =
		  %% Line 32
		  apply 'expand'/2
		      (Term, 'true')
	      in  let <BinSaved> =
		      %% Line 33
		      apply 'expand'/2
			  (Term, Tab)
		  in  let <_cor4> =
			  %% Line 36
			  apply 'format_term_fun'/3
			      ([126|[112]], BinSaved, Tab)
		      in  let <_cor5> =
			      %% Line 37
			      apply 'format_term_fun'/3
				  ([126|[116|[112]]], BinSaved, Tab)
			  in  let <_cor6> =
				  %% Line 38
				  apply 'format_term_fun'/3
				      ([126|[119]], BinSaved, Tab)
			      in  let <_cor7> =
				      %% Line 39
				      apply 'format_term_fun'/3
					  ([126|[115]], Expanded, Tab)
				  in  let <_cor8> =
					  %% Line 40
					  apply 'format_term_fun'/3
					      ([126|[116|[115]]], Expanded, Tab)
				      in  %% Line 34
					  call 'cdv_multi_wx':'start_link'
					      (%% Line 35
					       ParentWin, %% Line 36
							  [{[70|[111|[114|[109|[97|[116|[32|[126|[112]]]]]]]]],'cdv_html_wx',{Type,_cor4}}|%% Line 37
																	   [{[70|[111|[114|[109|[97|[116|[32|[126|[116|[112]]]]]]]]]],'cdv_html_wx',{Type,_cor5}}|%% Line 38
																												  [{[70|[111|[114|[109|[97|[116|[32|[126|[119]]]]]]]]],'cdv_html_wx',{Type,_cor6}}|%% Line 39
																																						   [{[70|[111|[114|[109|[97|[116|[32|[126|[115]]]]]]]]],'cdv_html_wx',{Type,_cor7}}|%% Line 40
																																																    [{[70|[111|[114|[109|[97|[116|[32|[126|[116|[115]]]]]]]]]],'cdv_html_wx',{Type,_cor8}}|[]]]]]])
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'init_term_page',2}}] )
	    -| ['compiler_generated'] )
	end
'format_term_fun'/3 =
    %% Line 42
    fun (_cor2,_cor1,_cor0) ->
	%% Line 43
	( fun () ->
	      %% Line 44
	      try
		  call 'io_lib':'format'
		      (_cor2, [_cor1|[]])
	      of <_cor3> ->
		  let <_cor4> =
		      %% Line 45
		      apply 'plain_html'/1
			  (_cor3)
		  in  %% Line 45
		      {'expand',_cor4,_cor0}
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 46
		    <'error','badarg',_cor13> when 'true' ->
			let <Warning> =
			    %% Line 47
			    call 'erlang':'++'
				([84|[104|[105|[115|[32|[116|[101|[114|[109|[32|[99|[97|[110|[32|[110|[111|[116|[32|[98|[101|[32|[102|[111|[114|[109|[97|[116|[116|[101|[100|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor2)
			in  %% Line 48
			    call 'observer_html_lib':'warning'
				(Warning)
		    ( <_cor8,_cor7,_cor6> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-format_term_fun/3-fun-0-'}}] )
'plain_html'/1 =
    %% Line 52
    fun (_cor0) ->
	%% Line 53
	call 'observer_html_lib':'plain_page'
	    (_cor0)
'expand'/2 =
    %% Line 55
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['#CDVBin'|[Offset|[Size|[Pos|[]]]]],'true'> when 'true' ->
	      %% Line 56
	      case call 'crashdump_viewer':'expand_binary'
		       ({Offset,Size,Pos}) of
		<{'ok',Bin}> when 'true' ->
		    %% Line 57
		    Bin
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 58
	  <Bin,Tab>
	      when try
		    let <_cor3> =
			call 'erlang':'is_binary'
			    (Bin)
		    in  let <_cor4> =
			    call 'erlang':'is_boolean'
				(Tab)
			in  let <_cor5> =
				call 'erlang':'not'
				    (_cor4)
			    in  call 'erlang':'and'
				    (_cor3, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Size> =
		  %% Line 59
		  call 'erlang':'byte_size'
		      (Bin)
	      in  let <_cor7> =
		      %% Line 60
		      call 'erlang':'min'
			  (Size, 10)
		  in  let <PrevSize> =
			  %% Line 60
			  call 'erlang':'*'
			      (_cor7, 8)
		      in  %% Line 61
			  case Bin of
			    <#{#<Preview>(PrevSize,1,'integer',['unsigned'|['big']]),
			       #<_cor19>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				let <Hash> =
				    %% Line 62
				    call 'erlang':'phash2'
					(Bin)
				in  let <Key> = {%% Line 63
					 Preview,%% Line 63
						 Size,%% Line 63
						      Hash}
				    in  do  %% Line 64
					    call 'ets':'insert'
						(Tab, {Key,Bin})
					    %% Line 65
					    ['#OBSBin'|[Preview|[Size|[Hash|[]]]]]
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor9})
			      -| ['compiler_generated'] )
			  end
	  %% Line 66
	  <[H|T],Expand> when 'true' ->
	      %% Line 67
	      case apply 'expand'/2
		       (T, Expand) of
		%% Line 68
		<ET>
		    when call 'erlang':'is_list'
			  (ET) ->
		    let <_cor12> =
			%% Line 69
			apply 'expand'/2
			    (H, Expand)
		    in  %% Line 69
			[_cor12|ET]
		%% Line 70
		<ET> when 'true' ->
		    let <_cor13> =
			%% Line 71
			apply 'expand'/2
			    (H, Expand)
		    in  %% Line 71
			[_cor13|[ET|[]]]
	      end
	  %% Line 73
	  <Tuple,Expand>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      let <_cor15> =
		  %% Line 74
		  call 'erlang':'tuple_to_list'
		      (Tuple)
	      in  let <_cor16> =
		      %% Line 74
		      apply 'expand'/2
			  (_cor15, Expand)
		  in  %% Line 74
		      call 'erlang':'list_to_tuple'
			  (_cor16)
	  %% Line 75
	  <Term,_cor20> when 'true' ->
	      %% Line 76
	      Term
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('cdv_term_cb')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('cdv_term_cb', _cor0)
end