module 'observer_html_lib' ['expandable_term'/3,
			    'module_info'/0,
			    'module_info'/1,
			    'plain_page'/1,
			    'warning'/1]
    attributes []
'warning'/1 =
    %% Line 36
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 37
	    apply 'warning_body'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 37
		apply 'body'/1
		    (_cor1)
	    in  %% Line 37
		apply 'header'/1
		    (_cor2)
'warning_body'/1 =
    %% Line 39
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 40
	    apply 'warn'/1
		(_cor0)
	in  %% Line 40
	    [_cor1|[]]
'plain_page'/1 =
    %% Line 45
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 46
	    apply 'plain_body'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 46
		apply 'body'/1
		    (_cor1)
	    in  %% Line 46
		apply 'header'/1
		    (_cor2)
'plain_body'/1 =
    %% Line 48
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 49
	    call 'lists':'flatten'
		(_cor0)
	in  let <_cor2> =
		%% Line 49
		apply 'href_proc_port'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 49
		    apply 'pre'/1
			(_cor2)
		in  %% Line 49
		    [_cor3|[]]
'expandable_term'/3 =
    %% Line 53
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 54
	    apply 'expandable_term_body'/3
		(_cor2, _cor1, _cor0)
	in  let <_cor4> =
		%% Line 54
		apply 'body'/1
		    (_cor3)
	    in  %% Line 54
		apply 'header'/2
		    (_cor2, _cor4)
'expandable_term_body'/3 =
    %% Line 56
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Heading,[],_X_Tab> when 'true' ->
	      let <_cor4> =
		  %% Line 57
		  case Heading of
		    %% Line 58
		    <[77|[115|[103|[81|[117|[101|[117|[101]]]]]]]]> when 'true' ->
			[78|[111|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[119|[101|[114|[101|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 59
		    <[77|[101|[115|[115|[97|[103|[101|[32|[81|[117|[101|[117|[101]]]]]]]]]]]]]> when 'true' ->
			[78|[111|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[119|[101|[114|[101|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 60
		    <[83|[116|[97|[99|[107|[68|[117|[109|[112]]]]]]]]]> when 'true' ->
			[78|[111|[32|[115|[116|[97|[99|[107|[32|[100|[117|[109|[112|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 61
		    <[68|[105|[99|[116|[105|[111|[110|[97|[114|[121]]]]]]]]]]> when 'true' ->
			[78|[111|[32|[100|[105|[99|[116|[105|[111|[110|[97|[114|[121|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 62
		    <[80|[114|[111|[99|[83|[116|[97|[116|[101]]]]]]]]]> when 'true' ->
			[73|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[101|[32|[114|[101|[116|[114|[105|[101|[118|[101|[100|[44|[32|[115|[121|[115|[116|[101|[109|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[109|[97|[121|[32|[110|[111|[116|[32|[98|[101|[32|[104|[97|[110|[100|[108|[101|[100|[32|[98|[121|[32|[116|[104|[105|[115|[32|[112|[114|[111|[99|[101|[115|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 57
		  [_cor4|%% Line 64
			 []]
	  %% Line 65
	  <Heading,Expanded,Tab> when 'true' ->
	      let <_cor68> =
		  %% Line 67
		  case Heading of
		    %% Line 68
		    <[77|[115|[103|[81|[117|[101|[117|[101]]]]]]]]> when 'true' ->
			let <_cor6> =
			    %% Line 71
			    apply 'th'/2
				([87|[73|[68|[84|[72|[61|[55|[48|[37]]]]]]]]], [77|[101|[115|[115|[97|[103|[101]]]]]]])
			in  let <_cor7> =
				%% Line 72
				apply 'th'/2
				    ([87|[73|[68|[84|[72|[61|[51|[48|[37]]]]]]]]], [83|[101|[113|[84|[114|[97|[99|[101|[84|[111|[107|[101|[110]]]]]]]]]]]]])
			    in  let <_cor8> =
				    %% Line 70
				    apply 'tr'/1
					(%% Line 71
					 [_cor6|%% Line 72
						[_cor7|[]]])
				in  let <_cor15> =
					%% Line 73
					( fun (_cor12,_cor11) ->
					      let <_cor10> =
						  %% Line 74
						  apply 'msgq_table'/3
						      (Tab, _cor12, _cor11)
					      in  let <_cor9> =
						      %% Line 75
						      call 'erlang':'not'
							  (_cor11)
						  in  %% Line 74
						      {_cor10,_cor9}
					  -| [{'id',{0,0,'-expandable_term_body/3-fun-0-'}}] )
				    in  let <_cor16> =
					    %% Line 73
					    call 'lists':'mapfoldl'
						(_cor15, %% Line 77
							 'true', %% Line 77
								 Expanded)
					in  let <_cor17> =
						%% Line 73
						call 'erlang':'element'
						    (1, _cor16)
					    in  %% Line 69
						apply 'table'/2
						    ([66|[79|[82|[68|[69|[82|[61|[48|[32|[67|[69|[76|[76|[80|[65|[68|[68|[73|[78|[71|[61|[48|[32|[67|[69|[76|[76|[83|[80|[65|[67|[73|[78|[71|[61|[49|[32|[87|[73|[68|[84|[72|[61|[49|[48|[48|[37]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 70
																																				 [_cor8|_cor17])
		    %% Line 78
		    <[77|[101|[115|[115|[97|[103|[101|[32|[81|[117|[101|[117|[101]]]]]]]]]]]]]> when 'true' ->
			let <_cor18> =
			    %% Line 81
			    apply 'th'/2
				([87|[73|[68|[84|[72|[61|[49|[48|[37]]]]]]]]], [73|[100]])
			in  let <_cor19> =
				%% Line 82
				apply 'th'/2
				    ([87|[73|[68|[84|[72|[61|[57|[48|[37]]]]]]]]], [77|[101|[115|[115|[97|[103|[101]]]]]]])
			    in  let <_cor20> =
				    %% Line 80
				    apply 'tr'/1
					(%% Line 81
					 [_cor18|%% Line 82
						 [_cor19|[]]])
				in  let <_cor28> =
					%% Line 83
					( fun (_cor25,_cor24) ->
					      case <_cor25,_cor24> of
						<Msg,{Even,N}> when 'true' ->
						    let <_cor23> =
							%% Line 84
							apply 'msgq_table'/4
							    (Tab, Msg, N, Even)
						    in  let <_cor22> =
							    %% Line 85
							    call 'erlang':'not'
								(Even)
							in  let <_cor21> =
								%% Line 85
								call 'erlang':'+'
								    (N, 1)
							    in  %% Line 84
								{_cor23,%% Line 85
									{_cor22,_cor21}}
						( <_cor27,_cor26> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor27,_cor26})
							-| [{'function_name',{'-expandable_term_body/3-fun-1-',2}}] )
						  -| ['compiler_generated'] )
					      end
					  -| [{'id',{0,0,'-expandable_term_body/3-fun-1-'}}] )
				    in  let <_cor29> =
					    %% Line 83
					    call 'lists':'mapfoldl'
						(_cor28, %% Line 87
							 {'true',1}, %% Line 87
								     Expanded)
					in  let <_cor30> =
						%% Line 83
						call 'erlang':'element'
						    (1, _cor29)
					    in  %% Line 79
						apply 'table'/2
						    ([66|[79|[82|[68|[69|[82|[61|[48|[32|[67|[69|[76|[76|[80|[65|[68|[68|[73|[78|[71|[61|[48|[32|[67|[69|[76|[76|[83|[80|[65|[67|[73|[78|[71|[61|[49|[32|[87|[73|[68|[84|[72|[61|[49|[48|[48|[37]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 80
																																				 [_cor20|_cor30])
		    %% Line 88
		    <[83|[116|[97|[99|[107|[68|[117|[109|[112]]]]]]]]]> when 'true' ->
			let <_cor31> =
			    %% Line 91
			    apply 'th'/2
				([87|[73|[68|[84|[72|[61|[50|[48|[37]]]]]]]]], [76|[97|[98|[101|[108]]]]])
			in  let <_cor32> =
				%% Line 92
				apply 'th'/2
				    ([87|[73|[68|[84|[72|[61|[56|[48|[37]]]]]]]]], [84|[101|[114|[109]]]])
			    in  let <_cor33> =
				    %% Line 90
				    apply 'tr'/1
					(%% Line 91
					 [_cor31|%% Line 92
						 [_cor32|[]]])
				in  let <_cor40> =
					%% Line 93
					( fun (_cor37,_cor36) ->
					      let <_cor35> =
						  %% Line 94
						  apply 'stackdump_table'/3
						      (Tab, _cor37, _cor36)
					      in  let <_cor34> =
						      %% Line 95
						      call 'erlang':'not'
							  (_cor36)
						  in  %% Line 94
						      {_cor35,_cor34}
					  -| [{'id',{0,0,'-expandable_term_body/3-fun-2-'}}] )
				    in  let <_cor41> =
					    %% Line 93
					    call 'lists':'mapfoldl'
						(_cor40, %% Line 96
							 'true', %% Line 96
								 Expanded)
					in  let <_cor42> =
						%% Line 93
						call 'erlang':'element'
						    (1, _cor41)
					    in  %% Line 89
						apply 'table'/2
						    ([66|[79|[82|[68|[69|[82|[61|[48|[32|[67|[69|[76|[76|[80|[65|[68|[68|[73|[78|[71|[61|[48|[32|[67|[69|[76|[76|[83|[80|[65|[67|[73|[78|[71|[61|[49|[32|[87|[73|[68|[84|[72|[61|[49|[48|[48|[37]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 90
																																				 [_cor33|_cor42])
		    %% Line 97
		    <[80|[114|[111|[99|[83|[116|[97|[116|[101]]]]]]]]]> when 'true' ->
			let <_cor43> =
			    %% Line 100
			    apply 'th'/2
				([87|[73|[68|[84|[72|[61|[50|[48|[37]]]]]]]]], [76|[97|[98|[101|[108]]]]])
			in  let <_cor44> =
				%% Line 101
				apply 'th'/2
				    ([87|[73|[68|[84|[72|[61|[56|[48|[37]]]]]]]]], [73|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]])
			    in  let <_cor45> =
				    %% Line 99
				    apply 'tr'/1
					(%% Line 100
					 [_cor43|%% Line 101
						 [_cor44|[]]])
				in  let <_cor52> =
					%% Line 102
					( fun (_cor49,_cor48) ->
					      let <_cor47> =
						  %% Line 103
						  apply 'proc_state'/3
						      (Tab, _cor49, _cor48)
					      in  let <_cor46> =
						      %% Line 104
						      call 'erlang':'not'
							  (_cor48)
						  in  %% Line 103
						      {_cor47,_cor46}
					  -| [{'id',{0,0,'-expandable_term_body/3-fun-3-'}}] )
				    in  let <_cor53> =
					    %% Line 102
					    call 'lists':'mapfoldl'
						(_cor52, %% Line 105
							 'true', %% Line 105
								 Expanded)
					in  let <_cor54> =
						%% Line 102
						call 'erlang':'element'
						    (1, _cor53)
					    in  %% Line 98
						apply 'table'/2
						    ([66|[79|[82|[68|[69|[82|[61|[48|[32|[67|[69|[76|[76|[80|[65|[68|[68|[73|[78|[71|[61|[48|[32|[67|[69|[76|[76|[83|[80|[65|[67|[73|[78|[71|[61|[49|[32|[87|[73|[68|[84|[72|[61|[49|[48|[48|[37]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 99
																																				 [_cor45|_cor54])
		    %% Line 106
		    <_cor72> when 'true' ->
			let <_cor55> =
			    %% Line 109
			    apply 'th'/2
				([87|[73|[68|[84|[72|[61|[51|[48|[37]]]]]]]]], [75|[101|[121]]])
			in  let <_cor56> =
				%% Line 110
				apply 'th'/2
				    ([87|[73|[68|[84|[72|[61|[55|[48|[37]]]]]]]]], [86|[97|[108|[117|[101]]]]])
			    in  let <_cor57> =
				    %% Line 108
				    apply 'tr'/1
					(%% Line 109
					 [_cor55|%% Line 110
						 [_cor56|[]]])
				in  let <_cor64> =
					%% Line 111
					( fun (_cor61,_cor60) ->
					      let <_cor59> =
						  %% Line 112
						  apply 'dict_table'/3
						      (Tab, _cor61, _cor60)
					      in  let <_cor58> =
						      %% Line 113
						      call 'erlang':'not'
							  (_cor60)
						  in  %% Line 112
						      {_cor59,_cor58}
					  -| [{'id',{0,0,'-expandable_term_body/3-fun-4-'}}] )
				    in  let <_cor65> =
					    %% Line 111
					    call 'lists':'mapfoldl'
						(_cor64, %% Line 114
							 'true', %% Line 114
								 Expanded)
					in  let <_cor66> =
						%% Line 111
						call 'erlang':'element'
						    (1, _cor65)
					    in  %% Line 107
						apply 'table'/2
						    ([66|[79|[82|[68|[69|[82|[61|[48|[32|[67|[69|[76|[76|[80|[65|[68|[68|[73|[78|[71|[61|[48|[32|[67|[69|[76|[76|[83|[80|[65|[67|[73|[78|[71|[61|[49|[32|[87|[73|[68|[84|[72|[61|[49|[48|[48|[37]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 108
																																				 [_cor57|_cor66])
		  end
	      in  %% Line 67
		  [_cor68|%% Line 115
			  []]
	end
'msgq_table'/3 =
    %% Line 117
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tab,{Msg0,Token0},Even> when 'true' ->
	      let <_cor4> =
		  %% Line 118
		  case Token0 of
		    %% Line 119
		    <[]> when 'true' ->
			[]
		    %% Line 120
		    <_cor14> when 'true' ->
			call 'io_lib':'fwrite'
			    ([126|[119]], [Token0|[]])
		  end
	      in  let <Msg> =
		      %% Line 122
		      apply 'all_or_expand'/2
			  (Tab, Msg0)
		  in  let <_cor10> =
			  %% Line 123
			  apply 'color'/1
			      (Even)
		      in  let <_cor7> =
			      %% Line 123
			      apply 'pre'/1
				  (Msg)
			  in  let <_cor8> =
				  %% Line 123
				  apply 'td'/1
				      (_cor7)
			      in  let <_cor9> =
				      %% Line 123
				      apply 'td'/1
					  (_cor4)
				  in  %% Line 123
				      apply 'tr'/2
					  (_cor10, [_cor8|[_cor9|[]]])
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'msgq_table',3}}] )
	    -| ['compiler_generated'] )
	end
'msgq_table'/4 =
    %% Line 125
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Msg> =
	    %% Line 126
	    apply 'all_or_expand'/2
		(_cor3, _cor2)
	in  let <_cor9> =
		%% Line 127
		apply 'color'/1
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 127
		    call 'erlang':'integer_to_list'
			(_cor1)
		in  let <_cor6> =
			%% Line 127
			apply 'td'/1
			    (_cor5)
		    in  let <_cor7> =
			    %% Line 127
			    apply 'pre'/1
				(Msg)
			in  let <_cor8> =
				%% Line 127
				apply 'td'/1
				    (_cor7)
			    in  %% Line 127
				apply 'tr'/2
				    (_cor9, [_cor6|[_cor8|[]]])
'stackdump_table'/3 =
    %% Line 129
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tab,{Label0,Term0},Even> when 'true' ->
	      let <Label> =
		  %% Line 130
		  call 'io_lib':'format'
		      ([126|[119]], [Label0|[]])
	      in  let <Term> =
		      %% Line 131
		      apply 'all_or_expand'/2
			  (Tab, Term0)
		  in  let <_cor9> =
			  %% Line 132
			  apply 'color'/1
			      (Even)
		      in  let <_cor5> =
			      %% Line 132
			      apply 'pre'/1
				  (Label)
			  in  let <_cor6> =
				  %% Line 132
				  apply 'td'/2
				      ([86|[65|[76|[73|[71|[78|[61|[99|[101|[110|[116|[101|[114]]]]]]]]]]]]], _cor5)
			      in  let <_cor7> =
				      %% Line 132
				      apply 'pre'/1
					  (Term)
				  in  let <_cor8> =
					  %% Line 132
					  apply 'td'/1
					      (_cor7)
				      in  %% Line 132
					  apply 'tr'/2
					      (_cor9, [_cor6|[_cor8|[]]])
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'stackdump_table',3}}] )
	    -| ['compiler_generated'] )
	end
'dict_table'/3 =
    %% Line 134
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tab,{Key0,Value0},Even> when 'true' ->
	      let <Key> =
		  %% Line 135
		  apply 'all_or_expand'/2
		      (Tab, Key0)
	      in  let <Value> =
		      %% Line 136
		      apply 'all_or_expand'/2
			  (Tab, Value0)
		  in  let <_cor9> =
			  %% Line 137
			  apply 'color'/1
			      (Even)
		      in  let <_cor5> =
			      %% Line 137
			      apply 'pre'/1
				  (Key)
			  in  let <_cor6> =
				  %% Line 137
				  apply 'td'/2
				      ([86|[65|[76|[73|[71|[78|[61|[99|[101|[110|[116|[101|[114]]]]]]]]]]]]], _cor5)
			      in  let <_cor7> =
				      %% Line 137
				      apply 'pre'/1
					  (Value)
				  in  let <_cor8> =
					  %% Line 137
					  apply 'td'/1
					      (_cor7)
				      in  %% Line 137
					  apply 'tr'/2
					      (_cor9, [_cor6|[_cor8|[]]])
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'dict_table',3}}] )
	    -| ['compiler_generated'] )
	end
'proc_state'/3 =
    %% Line 139
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tab,{Key0,Value0},Even> when 'true' ->
	      let <_cor3> =
		  %% Line 140
		  call 'io_lib':'format'
		      ([126|[115]], [Key0|[]])
	      in  let <Key> =
		      %% Line 140
		      call 'lists':'flatten'
			  (_cor3)
		  in  let <Value> =
			  %% Line 141
			  apply 'all_or_expand'/2
			      (Tab, Value0)
		      in  let <_cor9> =
			      %% Line 142
			      apply 'color'/1
				  (Even)
			  in  let <_cor6> =
				  %% Line 142
				  apply 'td'/2
				      ([86|[65|[76|[73|[71|[78|[61|[99|[101|[110|[116|[101|[114]]]]]]]]]]]]], Key)
			      in  let <_cor7> =
				      %% Line 142
				      apply 'pre'/1
					  (Value)
				  in  let <_cor8> =
					  %% Line 142
					  apply 'td'/1
					      (_cor7)
				      in  %% Line 142
					  apply 'tr'/2
					      (_cor9, [_cor6|[_cor8|[]]])
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'proc_state',3}}] )
	    -| ['compiler_generated'] )
	end
'all_or_expand'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	let <Preview> =
	    %% Line 145
	    call 'io_lib':'format'
		([126|[80]], [_cor0|[8]])
	in  let <Check> =
		%% Line 146
		call 'io_lib':'format'
		    ([126|[80]], [_cor0|[100]])
	    in  let <Exp> =
		    %% Line 147
		    call 'erlang':'=/='
			(Preview, Check)
		in  %% Line 148
		    apply 'all_or_expand'/4
			(_cor1, _cor0, Preview, Exp)
'all_or_expand'/4 =
    %% Line 149
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Tab,Term,Str,'false'>
	      when let <_cor4> =
		    %% Line 150
		    call 'erlang':'is_binary'
			(Term)
		in  %% Line 150
		    call 'erlang':'not'
			(_cor4) ->
	      let <_cor5> =
		  %% Line 151
		  call 'lists':'flatten'
		      (Str)
	      in  %% Line 151
		  apply 'href_proc_port'/1
		      (_cor5)
	  %% Line 152
	  <Tab,Term,Preview,'true'>
	      when let <_cor6> =
		    %% Line 153
		    call 'erlang':'is_binary'
			(Term)
		in  %% Line 153
		    call 'erlang':'not'
			(_cor6) ->
	      %% Line 154
	      case call 'erlang':'now'
		       () of
		<Key = {Key1,Key2,Key3}> when 'true' ->
		    do  %% Line 155
			call 'ets':'insert'
			    (Tab, {Key,Term})
			let <_cor8> =
			    %% Line 156
			    call 'lists':'flatten'
				(Preview)
			in  let <_cor9> =
				%% Line 156
				apply 'href_proc_port'/2
				    (_cor8, 'false')
			    in  let <_cor15> =
				    %% Line 158
				    call 'erlang':'integer_to_list'
					(Key1)
				in  let <_cor12> =
					%% Line 159
					call 'erlang':'integer_to_list'
					    (Key2)
				    in  let <_cor10> =
					    %% Line 160
					    call 'erlang':'integer_to_list'
						(Key3)
					in  let <_cor11> =
						%% Line 160
						call 'erlang':'++'
						    ([38|[107|[101|[121|[51|[61]]]]]], _cor10)
					    in  let <_cor13> =
						    %% Line 159
						    call 'erlang':'++'
							(_cor12, _cor11)
						in  let <_cor14> =
							%% Line 159
							call 'erlang':'++'
							    ([38|[107|[101|[121|[50|[61]]]]]], _cor13)
						    in  let <_cor16> =
							    %% Line 158
							    call 'erlang':'++'
								(_cor15, _cor14)
							in  let <_cor17> =
								%% Line 158
								call 'erlang':'++'
								    ([35|[84|[101|[114|[109|[63|[107|[101|[121|[49|[61]]]]]]]]]]], _cor16)
							    in  let <_cor18> =
								    %% Line 157
								    apply 'href'/3
									([84|[65|[82|[71|[69|[84|[61|[34|[101|[120|[112|[97|[110|[100|[101|[100|[34]]]]]]]]]]]]]]]]], %% Line 158
																				      [_cor17|%% Line 160
																					      []], %% Line 161
																						   [67|[108|[105|[99|[107|[32|[116|[111|[32|[101|[120|[112|[97|[110|[100|[32|[97|[98|[111|[118|[101|[32|[116|[101|[114|[109]]]]]]]]]]]]]]]]]]]]]]]]]])
								in  %% Line 156
								    [_cor9|[10|%% Line 157
									       [_cor18|%% Line 161
										       []]]]
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 162
	  <Tab,Bin,_X_PreviewStr,_X_Expand>
	      when %% Line 163
		call 'erlang':'is_binary'
		    (Bin) ->
	      let <Size> =
		  %% Line 164
		  call 'erlang':'byte_size'
		      (Bin)
	      in  let <_cor20> =
		      %% Line 165
		      call 'erlang':'min'
			  (Size, 10)
		  in  let <PrevSize> =
			  %% Line 165
			  call 'erlang':'*'
			      (_cor20, 8)
		      in  %% Line 166
			  case Bin of
			    <#{#<Preview>(PrevSize,1,'integer',['unsigned'|['big']]),
			       #<_cor31>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				let <Hash> =
				    %% Line 167
				    call 'erlang':'phash2'
					(Bin)
				in  let <Key> = {%% Line 168
					 Preview,%% Line 168
						 Size,%% Line 168
						      Hash}
				    in  do  %% Line 169
					    call 'ets':'insert'
						(Tab, {Key,Bin})
					    let <Term> =
						%% Line 170
						call 'io_lib':'format'
						    ([126|[112]], [['#OBSBin'|[Preview|[Size|[Hash|[]]]]]|[]])
					    in  let <_cor26> =
						    %% Line 171
						    call 'lists':'flatten'
							(Term)
						in  %% Line 171
						    apply 'href_proc_port'/2
							(_cor26, 'true')
			    ( <_cor22> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor22})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'all_or_expand',4}}] )
	    -| ['compiler_generated'] )
	end
'color'/1 =
    %% Line 173
    fun (_cor0) ->
	case _cor0 of
	  <'true'> when 'true' ->
	      call 'io_lib':'format'
		  ([66|[71|[67|[79|[76|[79|[82|[61|[34|[35|[126|[50|[46|[49|[54|[46|[48|[66|[126|[50|[46|[49|[54|[46|[48|[66|[126|[50|[46|[49|[54|[46|[48|[66|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [230|[230|[250]]])
	  %% Line 174
	  <'false'> when 'true' ->
	      call 'io_lib':'format'
		  ([66|[71|[67|[79|[76|[79|[82|[61|[34|[35|[126|[50|[46|[49|[54|[46|[48|[66|[126|[50|[46|[49|[54|[46|[48|[66|[126|[50|[46|[49|[54|[46|[48|[66|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [255|[255|[255]]])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'color',1}}] )
	    -| ['compiler_generated'] )
	end
'start_html'/0 =
    %% Line 178
    fun () ->
	%% Line 179
	[60|[72|[84|[77|[76|[62|[10]]]]]]]
'stop_html'/0 =
    %% Line 180
    fun () ->
	%% Line 181
	[60|[47|[72|[84|[77|[76|[62]]]]]]]
'start_html_body'/0 =
    %% Line 182
    fun () ->
	%% Line 183
	[60|[66|[79|[68|[89|[32|[66|[71|[67|[79|[76|[79|[82|[61|[34|[35|[70|[70|[70|[70|[70|[70|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]
'stop_html_body'/0 =
    %% Line 184
    fun () ->
	%% Line 185
	[60|[47|[66|[79|[68|[89|[62|[10]]]]]]]]
'header'/1 =
    %% Line 187
    fun (_cor0) ->
	%% Line 188
	apply 'header'/3
	    ([], [], _cor0)
'header'/2 =
    %% Line 189
    fun (_cor1,_cor0) ->
	%% Line 190
	apply 'header'/3
	    (_cor1, [], _cor0)
'header'/3 =
    %% Line 191
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 193
	    apply 'html_header'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 192
	    [_cor3|%% Line 193
		   []]
'html_header'/3 =
    %% Line 195
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 196
	    apply 'start_html'/0
		()
	in  let <_cor4> =
		%% Line 197
		apply 'only_html_header'/2
		    (_cor2, _cor1)
	    in  let <_cor5> =
		    %% Line 199
		    apply 'stop_html'/0
			()
		in  %% Line 196
		    [_cor3|%% Line 197
			   [_cor4|%% Line 198
				  [_cor0|%% Line 199
					 [_cor5|[]]]]]
'only_html_header'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	%% Line 202
	[[60|[72|[69|[65|[68|[62|[10]]]]]]]|%% Line 203
					    [[60|[84|[73|[84|[76|[69|[62]]]]]]]|[_cor1|[[60|[47|[84|[73|[84|[76|[69|[62|[10]]]]]]]]]|%% Line 204
																     [_cor0|%% Line 205
																	    [[60|[47|[72|[69|[65|[68|[62|[10]]]]]]]]]]]]]]
'body'/1 =
    %% Line 207
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 208
	    apply 'start_html_body'/0
		()
	in  let <_cor2> =
		%% Line 210
		apply 'stop_html_body'/0
		    ()
	    in  %% Line 208
		[_cor1|%% Line 209
		       [_cor0|%% Line 210
			      [_cor2|[]]]]
'start_table'/1 =
    %% Line 212
    fun (_cor0) ->
	%% Line 213
	[[60|[84|[65|[66|[76|[69|[32]]]]]]]|[_cor0|[[62|[10]]]]]
'stop_table'/0 =
    %% Line 214
    fun () ->
	%% Line 215
	[60|[47|[84|[65|[66|[76|[69|[62|[10]]]]]]]]]
'table'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 218
	    apply 'start_table'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 218
		apply 'stop_table'/0
		    ()
	    in  %% Line 218
		[_cor2|[_cor0|[_cor3|[]]]]
'tr'/1 =
    %% Line 219
    fun (_cor0) ->
	%% Line 220
	[[60|[84|[82|[62|[10]]]]]|[_cor0|[[10|[60|[47|[84|[82|[62|[10]]]]]]]]]]
'tr'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	%% Line 222
	[[60|[84|[82|[32]]]]|[_cor1|[[62|[10]]|[_cor0|[[10|[60|[47|[84|[82|[62|[10]]]]]]]]]]]]
'th'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	%% Line 224
	[[60|[84|[72|[32]]]]|[_cor1|[[62|[10]]|[_cor0|[[10|[60|[47|[84|[72|[62|[10]]]]]]]]]]]]
'td'/1 =
    %% Line 225
    fun (_cor0) ->
	%% Line 226
	[[60|[84|[68|[62]]]]|[_cor0|[[60|[47|[84|[68|[62]]]]]]]]
'td'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	%% Line 228
	[[60|[84|[68|[32]]]]|[_cor1|[[62]|[_cor0|[[60|[47|[84|[68|[62]]]]]]]]]]
'start_pre'/0 =
    %% Line 230
    fun () ->
	%% Line 231
	[60|[80|[82|[69|[62]]]]]
'stop_pre'/0 =
    %% Line 232
    fun () ->
	%% Line 233
	[60|[47|[80|[82|[69|[62]]]]]]
'pre'/1 =
    %% Line 234
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 235
	    apply 'start_pre'/0
		()
	in  let <_cor2> =
		%% Line 235
		apply 'stop_pre'/0
		    ()
	    in  %% Line 235
		[_cor1|[_cor0|[_cor2|[]]]]
'href'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	%% Line 237
	[[60|[65|[32|[72|[82|[69|[70|[61|[34]]]]]]]]]|[_cor1|[[34|[62]]|[_cor0|[[60|[47|[65|[62]]]]]]]]]
'href'/3 =
    %% Line 238
    fun (_cor2,_cor1,_cor0) ->
	%% Line 239
	[[60|[65|[32|[72|[82|[69|[70|[61|[34]]]]]]]]]|[_cor1|[[34|[32]]|[_cor2|[[62]|[_cor0|[[60|[47|[65|[62]]]]]]]]]]]
'font'/2 =
    %% Line 240
    fun (_cor1,_cor0) ->
	%% Line 241
	[[60|[70|[79|[78|[84|[32]]]]]]|[_cor1|[[62|[10]]|[_cor0|[[10|[60|[47|[70|[79|[78|[84|[62|[10]]]]]]]]]]]]]]
'p'/1 =
    %% Line 242
    fun (_cor0) ->
	%% Line 243
	[[60|[80|[62]]]|[_cor0|[[60|[47|[80|[62|[10]]]]]]]]
'br'/0 =
    %% Line 244
    fun () ->
	%% Line 245
	[60|[66|[82|[62|[10]]]]]
'href_proc_port'/1 =
    %% Line 249
    fun (_cor0) ->
	%% Line 250
	apply 'href_proc_port'/2
	    (_cor0, 'true')
'href_proc_port'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	%% Line 252
	apply 'href_proc_port'/3
	    (_cor1, [], _cor0)
'href_proc_port'/3 =
    %% Line 253
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[35|[82|[101|[102|[60|T]]]]],Acc,LTB> when 'true' ->
	      %% Line 255
	      apply 'href_proc_port'/3
		  (T, [[35|[82|[101|[102|[38|[108|[116|[59]]]]]]]]|Acc], LTB)
	  %% Line 256
	  <[35|[70|[117|[110|[60|T]]]]],Acc,LTB> when 'true' ->
	      %% Line 258
	      apply 'href_proc_port'/3
		  (T, [[35|[70|[117|[110|[38|[108|[116|[59]]]]]]]]|Acc], LTB)
	  %% Line 259
	  <[35|[80|[111|[114|[116|[60|T]]]]]],Acc,LTB> when 'true' ->
	      %% Line 260
	      case apply 'split'/2
		       (62, T) of
		<{Port0,Rest}> when 'true' ->
		    let <_cor4> =
			%% Line 261
			call 'erlang':'++'
			    (Port0, [38|[103|[116|[59]]]])
		    in  let <Port> =
			    %% Line 261
			    call 'erlang':'++'
				([35|[80|[111|[114|[116|[38|[108|[116|[59]]]]]]]]], _cor4)
			in  let <_cor6> =
				%% Line 262
				apply 'href'/2
				    (Port, Port)
			    in  %% Line 262
				apply 'href_proc_port'/3
				    (Rest, [_cor6|Acc], LTB)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 263
	  <[60|[60|T]],Acc,LTB> when 'true' ->
	      %% Line 265
	      apply 'href_proc_port'/3
		  (T, [[38|[108|[116|[59|[38|[108|[116|[59]]]]]]]]|Acc], LTB)
	  %% Line 266
	  <[60|T = [C|_cor47]],Acc,LTB>
	      when let <_cor7> =
		    call 'erlang':'=<'
			(48, C)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 268
	      case apply 'split'/2
		       (62, T) of
		<{Pid0,Rest}> when 'true' ->
		    let <_cor10> =
			%% Line 269
			call 'erlang':'++'
			    (Pid0, [38|[103|[116]]])
		    in  let <Pid> =
			    %% Line 269
			    [38|[108|[116|[59|_cor10]]]]
			in  let <_cor12> =
				%% Line 270
				apply 'href'/2
				    (Pid, Pid)
			    in  %% Line 270
				apply 'href_proc_port'/3
				    (Rest, [_cor12|Acc], LTB)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 271
	  <[91|[39|[35|[67|[68|[86|[66|[105|[110|[39|T]]]]]]]]]],Acc,LTB> when 'true' ->
	      %% Line 273
	      apply 'href_proc_bin'/4
		  ('cdv', T, Acc, LTB)
	  %% Line 274
	  <[91|[39|[35|[79|[66|[83|[66|[105|[110|[39|T]]]]]]]]]],Acc,LTB> when 'true' ->
	      %% Line 276
	      apply 'href_proc_bin'/4
		  ('obs', T, Acc, LTB)
	  %% Line 277
	  <[91|[39|[35|[67|[68|[86|[80|[111|[114|[116|[39|T]]]]]]]]]]],Acc,LTB> when 'true' ->
	      %% Line 279
	      case apply 'split'/2
		       (93, T) of
		<{Port0,Rest}> when 'true' ->
		    let <_cor21> =
			%% Line 281
			case call 'string':'tokens'
				 (Port0, [44|[46|[124]]]) of
			  %% Line 282
			  <[X|[Y|[]]]> when 'true' ->
			      let <_cor14> =
				  %% Line 283
				  call 'erlang':'++'
				      (Y, [38|[103|[116|[59]]]])
			      in  let <_cor15> =
				      %% Line 283
				      [46|_cor14]
				  in  let <_cor16> =
					  %% Line 283
					  call 'erlang':'++'
					      (X, _cor15)
				      in  let <Port> =
					      %% Line 283
					      call 'erlang':'++'
						  ([35|[80|[111|[114|[116|[38|[108|[116|[59]]]]]]]]], _cor16)
					  in  %% Line 284
					      apply 'href'/2
						  (Port, Port)
			  %% Line 285
			  <Ns> when 'true' ->
			      let <_cor18> =
				  %% Line 286
				  call 'string':'join'
				      (Ns, [46])
			      in  let <_cor19> =
				      %% Line 286
				      call 'erlang':'++'
					  (_cor18, [46|[46|[46|[38|[103|[116|[59]]]]]]])
				  in  %% Line 286
				      call 'erlang':'++'
					  ([35|[80|[111|[114|[116|[38|[108|[116|[59]]]]]]]]], _cor19)
			end
		    in  %% Line 288
			apply 'href_proc_port'/3
			    (Rest, [_cor21|Acc], LTB)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 289
	  <[91|[39|[35|[67|[68|[86|[80|[105|[100|[39|T]]]]]]]]]],Acc,LTB> when 'true' ->
	      %% Line 291
	      case apply 'split'/2
		       (93, T) of
		<{Pid0,Rest}> when 'true' ->
		    let <_cor33> =
			%% Line 293
			case call 'string':'tokens'
				 (Pid0, [44|[46|[124]]]) of
			  %% Line 294
			  <[X|[Y|[Z|[]]]]> when 'true' ->
			      let <_cor24> =
				  %% Line 295
				  call 'erlang':'++'
				      (Z, [38|[103|[116|[59]]]])
			      in  let <_cor25> =
				      %% Line 295
				      [46|_cor24]
				  in  let <_cor26> =
					  %% Line 295
					  call 'erlang':'++'
					      (Y, _cor25)
				      in  let <_cor27> =
					      %% Line 295
					      [46|_cor26]
					  in  let <_cor28> =
						  %% Line 295
						  call 'erlang':'++'
						      (X, _cor27)
					      in  let <Pid> =
						      %% Line 295
						      [38|[108|[116|[59|_cor28]]]]
						  in  %% Line 296
						      apply 'href'/2
							  (Pid, Pid)
			  %% Line 297
			  <Ns> when 'true' ->
			      let <_cor30> =
				  %% Line 298
				  call 'string':'join'
				      (Ns, [46])
			      in  let <_cor31> =
				      %% Line 298
				      call 'erlang':'++'
					  (_cor30, [46|[46|[46|[38|[103|[116|[59]]]]]]])
				  in  %% Line 298
				      [38|[108|[116|[59|_cor31]]]]
			end
		    in  %% Line 300
			apply 'href_proc_port'/3
			    (Rest, [_cor33|Acc], LTB)
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor23})
		  -| ['compiler_generated'] )
	      end
	  %% Line 301
	  <[39|[35|[67|[68|[86|[73|[110|[99|[111|[109|[112|[108|[101|[116|[101|[72|[101|[97|[112|[39|T]]]]]]]]]]]]]]]]]]]],Acc,LTB> when 'true' ->
	      let <_cor35> =
		  %% Line 304
		  call 'lists':'flatten'
		      (%% Line 305
		       [60|[70|[79|[78|[84|[32|[67|[79|[76|[79|[82|[61|[34|[35|[70|[70|[48|[48|[48|[48|[34|[62|[46|[46|[46|[40|[73|[110|[99|[111|[109|[112|[108|[101|[116|[101|[32|[72|[101|[97|[112|[41|[60|[47|[70|[79|[78|[84|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      in  let <IH> =
		      %% Line 303
		      call 'lists':'reverse'
			  (_cor35)
		  in  let <_cor37> =
			  %% Line 306
			  call 'erlang':'++'
			      (IH, Acc)
		      in  %% Line 306
			  apply 'href_proc_port'/3
			      (T, _cor37, LTB)
	  %% Line 307
	  <[39|[35|[67|[68|[86|[84|[114|[117|[110|[99|[97|[116|[101|[100|[66|[105|[110|[97|[114|[121|[39|T]]]]]]]]]]]]]]]]]]]]],Acc,LTB> when 'true' ->
	      let <_cor38> =
		  %% Line 311
		  call 'lists':'flatten'
		      (%% Line 312
		       [60|[70|[79|[78|[84|[32|[67|[79|[76|[79|[82|[61|[34|[35|[70|[70|[48|[48|[48|[48|[34|[62|[38|[108|[116|[59|[38|[108|[116|[59|[46|[46|[46|[40|[84|[114|[117|[110|[99|[97|[116|[101|[100|[32|[66|[105|[110|[97|[114|[121|[41|[38|[103|[116|[59|[38|[103|[116|[59|[60|[47|[70|[79|[78|[84|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      in  let <IH> =
		      %% Line 310
		      call 'lists':'reverse'
			  (_cor38)
		  in  let <_cor40> =
			  %% Line 314
			  call 'erlang':'++'
			      (IH, Acc)
		      in  %% Line 314
			  apply 'href_proc_port'/3
			      (T, _cor40, LTB)
	  %% Line 315
	  <[39|[35|[67|[68|[86|[78|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[66|[105|[110|[97|[114|[121|[39|T]]]]]]]]]]]]]]]]]]]]]]],Acc,LTB> when 'true' ->
	      let <_cor41> =
		  %% Line 319
		  call 'lists':'flatten'
		      (%% Line 320
		       [60|[70|[79|[78|[84|[32|[67|[79|[76|[79|[82|[61|[34|[35|[70|[70|[48|[48|[48|[48|[34|[62|[38|[108|[116|[59|[38|[108|[116|[59|[46|[46|[46|[40|[78|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[32|[66|[105|[110|[97|[114|[121|[41|[38|[103|[116|[59|[38|[103|[116|[59|[60|[47|[70|[79|[78|[84|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      in  let <IH> =
		      %% Line 318
		      call 'lists':'reverse'
			  (_cor41)
		  in  let <_cor43> =
			  %% Line 322
			  call 'erlang':'++'
			      (IH, Acc)
		      in  %% Line 322
			  apply 'href_proc_port'/3
			      (T, _cor43, LTB)
	  %% Line 323
	  <[60|T],Acc,LTB> when 'true' ->
	      %% Line 324
	      apply 'href_proc_port'/3
		  (T, [[38|[108|[116|[59]]]]|Acc], LTB)
	  %% Line 325
	  <[62|T],Acc,LTB> when 'true' ->
	      %% Line 326
	      apply 'href_proc_port'/3
		  (T, [[38|[103|[116|[59]]]]|Acc], LTB)
	  %% Line 327
	  <[H|T],Acc,LTB> when 'true' ->
	      %% Line 328
	      apply 'href_proc_port'/3
		  (T, [H|Acc], LTB)
	  %% Line 329
	  <[],Acc,_cor48> when 'true' ->
	      %% Line 330
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor46,_cor45,_cor44> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor46,_cor45,_cor44})
		  -| [{'function_name',{'href_proc_port',3}}] )
	    -| ['compiler_generated'] )
	end
'href_proc_bin'/4 =
    %% Line 332
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 333
	case apply 'split'/2
		 (93, _cor2) of
	  <{OffsetSizePos,Rest}> when 'true' ->
	      let <_cor28> =
		  %% Line 335
		  case call 'string':'tokens'
			   (OffsetSizePos, [44|[46|[124|[32|[10]]]]]) of
		    %% Line 336
		    <[Offset|[SizeStr|[Pos|[]]]]>
			when call 'erlang':'=:='
			      (_cor3,
			       'cdv') ->
			let <_cor6> =
			    %% Line 337
			    call 'erlang':'list_to_integer'
				(Offset)
			in  let <_cor5> =
				%% Line 337
				call 'erlang':'list_to_integer'
				    (Pos)
			    in  let <Id> = {_cor6,%% Line 337
					   10,_cor5}
				in  %% Line 338
				    case call 'crashdump_viewer':'expand_binary'
					     (Id) of
				      <{'ok',PreviewBin}> when 'true' ->
					  let <_cor9> =
					      %% Line 339
					      call 'erlang':'list_to_integer'
						  (SizeStr)
					  in  let <PreviewStr> =
						  %% Line 339
						  apply 'preview_string'/2
						      (_cor9, PreviewBin)
					      in  %% Line 340
						  case <> of
						    <>
							when call 'erlang':'=:='
							      (_cor0,
							       'true') ->
							let <_cor11> =
							    %% Line 344
							    call 'erlang':'++'
								([38|[112|[111|[115|[61]]]]], Pos)
							in  let <_cor12> =
								%% Line 343
								call 'erlang':'++'
								    (SizeStr, _cor11)
							    in  let <_cor13> =
								    %% Line 343
								    call 'erlang':'++'
									([38|[115|[105|[122|[101|[61]]]]]], _cor12)
								in  let <_cor14> =
									%% Line 342
									call 'erlang':'++'
									    (Offset, _cor13)
								    in  let <_cor15> =
									    %% Line 342
									    call 'erlang':'++'
										([35|[66|[105|[110|[97|[114|[121|[63|[111|[102|[102|[115|[101|[116|[61]]]]]]]]]]]]]]], _cor14)
									in  %% Line 341
									    apply 'href'/3
										([84|[65|[82|[71|[69|[84|[61|[34|[101|[120|[112|[97|[110|[100|[101|[100|[34]]]]]]]]]]]]]]]]], %% Line 342
																					      [_cor15|%% Line 344
																						      []], %% Line 345
																							   PreviewStr)
						    %% Line 346
						    <> when 'true' ->
							%% Line 347
							PreviewStr
						  end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
		    %% Line 349
		    <[Preview|[SizeStr|[Md5|[]]]]>
			when call 'erlang':'=:='
			      (_cor3,
			       'obs') ->
			let <Size> =
			    %% Line 350
			    call 'erlang':'list_to_integer'
				(SizeStr)
			in  let <_cor17> =
				%% Line 351
				call 'erlang':'min'
				    (Size, 10)
			    in  let <PrevSize> =
				    %% Line 351
				    call 'erlang':'*'
					(_cor17, 8)
				in  let <_cor19> =
					%% Line 353
					call 'erlang':'list_to_integer'
					    (Preview)
				    in  let <_cor20> =
					    %% Line 353
					    #{#<_cor19>(PrevSize,1,'integer',['unsigned'|['big']])}#
					in  let <PreviewStr> =
						%% Line 352
						apply 'preview_string'/2
						    (Size, _cor20)
					    in  %% Line 354
						case <> of
						  <>
						      when call 'erlang':'=:='
							    (_cor0,
							     'true') ->
						      let <_cor22> =
							  %% Line 358
							  call 'erlang':'++'
							      ([38|[107|[101|[121|[51|[61]]]]]], Md5)
						      in  let <_cor23> =
							      %% Line 357
							      call 'erlang':'++'
								  (SizeStr, _cor22)
							  in  let <_cor24> =
								  %% Line 357
								  call 'erlang':'++'
								      ([38|[107|[101|[121|[50|[61]]]]]], _cor23)
							      in  let <_cor25> =
								      %% Line 356
								      call 'erlang':'++'
									  (Preview, _cor24)
								  in  let <_cor26> =
									  %% Line 356
									  call 'erlang':'++'
									      ([35|[79|[66|[83|[66|[105|[110|[97|[114|[121|[63|[107|[101|[121|[49|[61]]]]]]]]]]]]]]]], _cor25)
								      in  %% Line 355
									  apply 'href'/3
									      ([84|[65|[82|[71|[69|[84|[61|[34|[101|[120|[112|[97|[110|[100|[101|[100|[34]]]]]]]]]]]]]]]]], %% Line 356
																					    [_cor26|%% Line 358
																						    []], %% Line 359
																							 PreviewStr)
						  %% Line 360
						  <> when 'true' ->
						      %% Line 361
						      PreviewStr
						end
		    %% Line 363
		    <_cor34> when 'true' ->
			%% Line 364
			[38|[108|[116|[59|[38|[108|[116|[59|[32|[46|[46|[46|[32|[38|[103|[116|[59|[38|[103|[116|[59]]]]]]]]]]]]]]]]]]]]]
		  end
	      in  %% Line 366
		  apply 'href_proc_port'/3
		      (Rest, [_cor28|_cor1], _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'preview_string'/2 =
    %% Line 368
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Size,PreviewBin>
	      when call 'erlang':'>'
		    (Size,
		     10) ->
	      let <_cor2> =
		  %% Line 370
		  call 'io_lib':'format'
		      ([126|[112]], [PreviewBin|[]])
	      in  let <_cor3> =
		      %% Line 370
		      apply 'remove_lgt'/1
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 372
			  call 'observer_lib':'to_str'
			      ({'bytes',Size})
		      in  %% Line 369
			  [[38|[108|[116|[59|[38|[108|[116|[59]]]]]]]]|%% Line 370
								       [_cor3|%% Line 371
									      [[46|[46|[46|[40]]]]|%% Line 372
												   [_cor4|%% Line 373
													  [[41]|[[38|[103|[116|[59|[38|[103|[116]]]]]]]]]]]]]
	  %% Line 375
	  <_cor9,PreviewBin> when 'true' ->
	      let <_cor5> =
		  %% Line 377
		  call 'io_lib':'format'
		      ([126|[112]], [PreviewBin|[]])
	      in  let <_cor6> =
		      %% Line 377
		      apply 'remove_lgt'/1
			  (_cor5)
		  in  %% Line 376
		      [[38|[108|[116|[59|[38|[108|[116|[59]]]]]]]]|%% Line 377
								   [_cor6|%% Line 378
									  [[38|[103|[116|[59|[38|[103|[116]]]]]]]]]]
	end
'remove_lgt'/1 =
    %% Line 380
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 381
	    call 'lists':'flatten'
		(_cor0)
	in  %% Line 381
	    apply 'remove_lgt_1'/1
		(_cor1)
'remove_lgt_1'/1 =
    %% Line 383
    fun (_cor0) ->
	case _cor0 of
	  <[60|[60|Rest]]> when 'true' ->
	      %% Line 384
	      case call 'lists':'reverse'
		       (Rest) of
		<[62|[62|BinStr]]> when 'true' ->
		    let <_cor2> =
			%% Line 385
			call 'lists':'reverse'
			    (BinStr)
		    in  %% Line 385
			apply 'replace_lgt'/1
			    (_cor2)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'remove_lgt_1',1}}] )
	    -| ['compiler_generated'] )
	end
'replace_lgt'/1 =
    %% Line 387
    fun (_cor0) ->
	case _cor0 of
	  <[60|R]> when 'true' ->
	      let <_cor1> =
		  %% Line 388
		  apply 'replace_lgt'/1
		      (R)
	      in  %% Line 388
		  [[38|[108|[116|[59]]]]|_cor1]
	  %% Line 389
	  <[62|R]> when 'true' ->
	      let <_cor2> =
		  %% Line 390
		  apply 'replace_lgt'/1
		      (R)
	      in  %% Line 390
		  [[38|[103|[116|[59]]]]|_cor2]
	  %% Line 391
	  <[L = [_cor7|_cor8]|R]> when 'true' ->
	      let <_cor3> =
		  %% Line 392
		  apply 'replace_lgt'/1
		      (L)
	      in  let <_cor4> =
		      %% Line 392
		      apply 'replace_lgt'/1
			  (R)
		  in  %% Line 392
		      [_cor3|_cor4]
	  %% Line 393
	  <[A|R]> when 'true' ->
	      let <_cor5> =
		  %% Line 394
		  apply 'replace_lgt'/1
		      (R)
	      in  %% Line 394
		  [A|_cor5]
	  %% Line 395
	  <[]> when 'true' ->
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'replace_lgt',1}}] )
	    -| ['compiler_generated'] )
	end
'split'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	%% Line 398
	apply 'split'/3
	    (_cor1, _cor0, [])
'split'/3 =
    %% Line 399
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Char,[_cor7|Str],Acc>
	      when call 'erlang':'=:='
		    (_cor7,
		     Char) ->
	      let <_cor3> =
		  %% Line 400
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 400
		  {_cor3,Str}
	  %% Line 401
	  <Char,[H|T],Acc> when 'true' ->
	      %% Line 402
	      apply 'split'/3
		  (Char, T, [H|Acc])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'warn'/1 =
    %% Line 404
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 405
	      []
	  %% Line 406
	  <Warning> when 'true' ->
	      let <_cor1> =
		  %% Line 407
		  apply 'br'/0
		      ()
	      in  let <_cor2> =
		      %% Line 407
		      apply 'br'/0
			  ()
		  in  let <_cor3> =
			  %% Line 407
			  apply 'p'/1
			      ([Warning|[_cor1|[_cor2|[]]]])
		      in  %% Line 407
			  apply 'font'/2
			      ([67|[79|[76|[79|[82|[61|[34|[35|[70|[70|[48|[48|[48|[48|[34]]]]]]]]]]]]]]], _cor3)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('observer_html_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('observer_html_lib', _cor0)
end