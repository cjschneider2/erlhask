module 'observer_lib' ['create_attrs'/0,
		       'create_menu_item'/3,
		       'create_menus'/3,
		       'create_status_bar'/1,
		       'destroy_progress_dialog'/0,
		       'display_info'/2,
		       'display_info_dialog'/1,
		       'display_progress_dialog'/2,
		       'display_yes_no_dialog'/1,
		       'fill_info'/2,
		       'get_wx_parent'/1,
		       'html_window'/1,
		       'html_window'/2,
		       'interval_dialog'/4,
		       'module_info'/0,
		       'module_info'/1,
		       'report_progress'/1,
		       'set_listctrl_col_size'/2,
		       'start_timer'/1,
		       'stop_timer'/1,
		       'to_str'/1,
		       'update_info'/2,
		       'user_term'/3,
		       'user_term_multiline'/3,
		       'wait_for_progress'/0]
    attributes [%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 19
		'type' =
		    %% Line 19
		    [{{'record','match_spec'},[{'record_field',19,{'atom',19,'name'},{'string',19,[]}}|[{'record_field',20,{'atom',20,'term'},{'nil',20}}|[{'record_field',21,{'atom',21,'str'},{'nil',21}}|[{'record_field',22,{'atom',22,'func'},{'string',22,[]}}]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','tpattern'},[{'record_field',24,{'atom',24,'m'}}|[{'record_field',24,{'atom',24,'fa'}}|[{'record_field',24,{'atom',24,'ms'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','traced_func'},[{'record_field',26,{'atom',26,'func_name'}}|[{'record_field',27,{'atom',27,'arity'}}|[{'record_field',28,{'atom',28,'match_spec'},{'record',28,'match_spec',[]}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','create_menu'},[{'record_field',31,{'atom',31,'id'}}|[{'record_field',32,{'atom',32,'text'}}|[{'record_field',33,{'atom',33,'help'},{'nil',33}}|[{'record_field',34,{'atom',34,'type'},{'atom',34,'append'}}|[{'record_field',35,{'atom',35,'check'},{'atom',35,'false'}}]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','attrs'},[{'record_field',38,{'atom',38,'even'}}|[{'record_field',38,{'atom',38,'odd'}}|[{'record_field',38,{'atom',38,'searched'}}|[{'record_field',38,{'atom',38,'deleted'}}|[{'record_field',38,{'atom',38,'changed_odd'}}|[{'record_field',38,{'atom',38,'changed_even'}}|[{'record_field',38,{'atom',38,'new_odd'}}|[{'record_field',38,{'atom',38,'new_even'}}]]]]]]]],[]}]]
'get_wx_parent'/1 =
    %% Line 42
    fun (_cor0) ->
	let <Parent> =
	    %% Line 43
	    call 'wxWindow':'getParent'
		(_cor0)
	in  %% Line 44
	    case call 'wx':'is_null'
		     (Parent) of
	      %% Line 45
	      <'true'> when 'true' ->
		  _cor0
	      %% Line 46
	      <'false'> when 'true' ->
		  apply 'get_wx_parent'/1
		      (Parent)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'interval_dialog'/4 =
    %% Line 49
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Parent0,{Timer,Value},Min,Max> when 'true' ->
	      let <Parent> =
		  %% Line 50
		  apply 'get_wx_parent'/1
		      (Parent0)
	      in  let <Dialog> =
		      %% Line 51
		      call 'wxDialog':'new'
			  (Parent, -1, [85|[112|[100|[97|[116|[101|[32|[73|[110|[116|[101|[114|[118|[97|[108]]]]]]]]]]]]]]], %% Line 52
															     [{'style',536877120}])
		  in  let <Panel> =
			  %% Line 54
			  call 'wxPanel':'new'
			      (Dialog)
		      in  let <Check> =
			      %% Line 55
			      call 'wxCheckBox':'new'
				  (Panel, -1, [80|[101|[114|[105|[111|[100|[105|[99|[97|[108|[32|[114|[101|[102|[114|[101|[115|[104]]]]]]]]]]]]]]]]]])
			  in  let <_cor13> =
				  %% Line 56
				  call 'erlang':'=/='
				      (Timer, 'false')
			      in  do  %% Line 56
				      call 'wxCheckBox':'setValue'
					  (Check, _cor13)
				      let <_cor14> =
					  %% Line 57
					  call 'wxe_util':'get_const'
					      ('wxSL_LABELS')
				      in  let <Style> =
					      %% Line 57
					      call 'erlang':'bor'
						  (20, _cor14)
					  in  let <Slider> =
						  %% Line 58
						  call 'wxSlider':'new'
						      (Panel, -1, Value, Min, Max, %% Line 59
										   [{'style',Style}|[{'size',{200,-1}}]])
					      in  let <_cor20> =
						      %% Line 60
						      call 'erlang':'=/='
							  (Timer, 'false')
						  in  do  %% Line 60
							  call 'wxWindow':'enable'
							      (Slider, [{'enable',_cor20}|[]])
							  let <InnerSizer> =
							      %% Line 61
							      call 'wxBoxSizer':'new'
								  (8)
							  in  let <Buttons> =
								  %% Line 62
								  call 'wxDialog':'createButtonSizer'
								      (Dialog, 20)
							      in  do  %% Line 64
								      call 'wxSizer':'add'
									  (InnerSizer, Check, [{'flag',8432}|[{'border',2}]])
								      do  %% Line 65
									  call 'wxSizer':'add'
									      (InnerSizer, Slider, [{'flag',8432}|[{'border',2}]])
									  do  %% Line 66
									      call 'wxPanel':'setSizer'
										  (Panel, InnerSizer)
									      let <TopSizer> =
										  %% Line 67
										  call 'wxBoxSizer':'new'
										      (8)
									      in  do  %% Line 68
										      call 'wxSizer':'add'
											  (TopSizer, Panel, [{'flag',8432}|[{'border',5}]])
										      do  %% Line 69
											  call 'wxSizer':'add'
											      (TopSizer, Buttons, [{'flag',8192}])
											  do  %% Line 70
											      call 'wxWindow':'setSizerAndFit'
												  (Dialog, TopSizer)
											      do  %% Line 71
												  call 'wxSizer':'setSizeHints'
												      (TopSizer, Dialog)
												  let <_cor39> =
												      %% Line 73
												      ( fun (_cor36,_cor35) ->
													    case <_cor36,_cor35> of
													      <{'wx',_cor49,_cor50,_cor51,{'wxCommand',_cor52,_cor53,Enable0,_cor54}},_cor55> when 'true' ->
														  let <Enable> =
														      %% Line 74
														      call 'erlang':'>'
															  (Enable0, 0)
														  in  %% Line 75
														      call 'wxWindow':'enable'
															  (Slider, [{'enable',Enable}|[]])
													      ( <_cor38,_cor37> when 'true' ->
														    ( primop 'match_fail'
															  ({'function_clause',_cor38,_cor37})
														      -| [{'function_name',{'-interval_dialog/4-fun-0-',2}}] )
														-| ['compiler_generated'] )
													    end
													-| [{'id',{0,0,'-interval_dialog/4-fun-0-'}}] )
												  in  do  %% Line 72
													  call 'wxCheckBox':'connect'
													      (Check, 'command_checkbox_clicked', %% Line 73
																		  [{'callback',_cor39}|%% Line 76
																				       []])
													  let <_cor43> =
													      %% Line 77
													      case call 'wxDialog':'showModal'
														       (Dialog) of
														%% Line 78
														<5100> when 'true' ->
														    let <Enabled> =
															%% Line 79
															call 'wxCheckBox':'isChecked'
															    (Check)
														    in  let <_cor41> =
															    %% Line 80
															    call 'wxSlider':'getValue'
																(Slider)
															in  %% Line 80
															    apply 'setup_timer'/2
																(Enabled, {Timer,_cor41})
														%% Line 81
														<5101> when 'true' ->
														    %% Line 82
														    {Timer,Value}
														( <_cor42> when 'true' ->
														      primop 'match_fail'
															  ({'case_clause',_cor42})
														  -| ['compiler_generated'] )
													      end
													  in  do  %% Line 84
														  call 'wxDialog':'destroy'
														      (Dialog)
														  _cor43
	  ( <_cor48,_cor47,_cor46,_cor45> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor48,_cor47,_cor46,_cor45})
		  -| [{'function_name',{'interval_dialog',4}}] )
	    -| ['compiler_generated'] )
	end
'stop_timer'/1 =
    %% Line 87
    fun (_cor0) ->
	case _cor0 of
	  <Timer = {'false',_cor2}> when 'true' ->
	      Timer
	  %% Line 88
	  <Timer = {'true',_cor3}> when 'true' ->
	      Timer
	  %% Line 89
	  <Timer = {_cor4,Intv}> when 'true' ->
	      do  %% Line 90
		  apply 'setup_timer'/2
		      ('false', Timer)
		  %% Line 91
		  {'true',Intv}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'stop_timer',1}}] )
	    -| ['compiler_generated'] )
	end
'start_timer'/1 =
    %% Line 92
    fun (_cor0) ->
	case _cor0 of
	  <Intv>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 93
	      apply 'setup_timer'/2
		  ('true', {'true',Intv})
	  %% Line 94
	  <Timer> when 'true' ->
	      %% Line 95
	      apply 'setup_timer'/2
		  ('true', Timer)
	end
'setup_timer'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'false',{Timer,Value}>
	      when %% Line 98
		call 'erlang':'is_boolean'
		    (Timer) ->
	      %% Line 99
	      {'false',Value}
	  %% Line 100
	  <'true',{'false',Value}> when 'true' ->
	      let <_cor2> =
		  %% Line 101
		  call 'erlang':'*'
		      (Value, 1000)
	      in  %% Line 101
		  case call 'timer':'send_interval'
			   (_cor2, 'refresh_interval') of
		    <{'ok',Timer}> when 'true' ->
			%% Line 102
			{Timer,Value}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 103
	  <Bool,{Timer,Old}> when 'true' ->
	      do  %% Line 104
		  call 'timer':'cancel'
		      (Timer)
		  %% Line 105
		  apply 'setup_timer'/2
		      (Bool, {'false',Old})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'setup_timer',2}}] )
	    -| ['compiler_generated'] )
	end
'display_info_dialog'/1 =
    %% Line 107
    fun (_cor0) ->
	%% Line 108
	apply 'display_info_dialog'/2
	    ([], _cor0)
'display_info_dialog'/2 =
    %% Line 109
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 110
	    call 'wx':'null'
		()
	in  let <Dlg> =
		%% Line 110
		call 'wxMessageDialog':'new'
		    (_cor2, _cor0, [{'caption',_cor1}|[]])
	    in  do  %% Line 111
		    call 'wxMessageDialog':'showModal'
			(Dlg)
		    do  %% Line 112
			call 'wxMessageDialog':'destroy'
			    (Dlg)
			%% Line 113
			'ok'
'display_yes_no_dialog'/1 =
    %% Line 115
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 116
	    call 'wx':'null'
		()
	in  let <Dlg> =
		%% Line 116
		call 'wxMessageDialog':'new'
		    (_cor2, _cor0, [{'style',10}])
	    in  let <R> =
		    %% Line 117
		    call 'wxMessageDialog':'showModal'
			(Dlg)
		in  do  %% Line 118
			call 'wxMessageDialog':'destroy'
			    (Dlg)
			%% Line 119
			R
'display_info'/2 =
    %% Line 122
    fun (_cor1,_cor0) ->
	let <Panel> =
	    %% Line 123
	    call 'wxPanel':'new'
		(_cor1)
	in  do  %% Line 124
		call 'wxWindow':'setBackgroundColour'
		    (Panel, {255,255,255})
		let <Sizer> =
		    %% Line 125
		    call 'wxBoxSizer':'new'
			(8)
		in  do  %% Line 126
			call 'wxSizer':'addSpacer'
			    (Sizer, 5)
			let <Add> =
			    %% Line 127
			    ( fun (_cor9) ->
				  %% Line 128
				  case apply 'create_box'/2
					   (Panel, _cor9) of
				    %% Line 129
				    <{Box,InfoFs}> when 'true' ->
					do  %% Line 130
					    call 'wxSizer':'add'
						(Sizer, Box, [{'flag',8432}|[{'border',5}]])
					    do  %% Line 132
						call 'wxSizer':'addSpacer'
						    (Sizer, 5)
						%% Line 133
						InfoFs
				    %% Line 134
				    <'undefined'> when 'true' ->
					%% Line 135
					[]
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor8})
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-display_info/2-fun-0-'}}] )
			in  let <_cor17> =
				%% Line 138
				( letrec
				      'lc$^0'/1 =
					  fun (_cor14) ->
					      case _cor14 of
						<[I|_cor13]> when 'true' ->
						    let <_cor15> =
							apply Add
							    (I)
						    in  let <_cor16> =
							    apply 'lc$^0'/1
								(_cor13)
							in  ( [_cor15|_cor16]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor14> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor14})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (_cor0)
				  -| ['list_comprehension'] )
			    in  do  %% Line 139
				    call 'wxWindow':'setSizerAndFit'
					(Panel, Sizer)
				    %% Line 140
				    {Panel,Sizer,_cor17}
'fill_info'/2 =
    %% Line 142
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'dynamic',Key}|Rest],Data>
	      when let <_cor2> =
		    %% Line 143
		    call 'erlang':'is_atom'
			(Key)
		in  let <_cor3> =
			%% Line 143
			call 'erlang':'is_function'
			    (Key)
		    in  %% Line 143
			call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 146
	      case apply 'get_value'/2
		       (Key, Data) of
		%% Line 147
		<'undefined'> when 'true' ->
		    let <_cor4> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  ['undefined'|_cor4]
		%% Line 148
		<{Str,Value}> when 'true' ->
		    let <_cor5> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  [{Str,Value}|_cor5]
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 150
	  <[{Str,Key}|Rest],Data>
	      when let <_cor7> =
		    call 'erlang':'is_atom'
			(Key)
		in  let <_cor8> =
			call 'erlang':'is_function'
			    (Key)
		    in  call 'erlang':'or'
			    (_cor7, _cor8) ->
	      %% Line 151
	      case apply 'get_value'/2
		       (Key, Data) of
		%% Line 152
		<'undefined'> when 'true' ->
		    let <_cor9> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  ['undefined'|_cor9]
		%% Line 153
		<Value> when 'true' ->
		    let <_cor10> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  [{Str,Value}|_cor10]
	      end
	  %% Line 155
	  <[{Str,Attrib,Key}|Rest],Data>
	      when let <_cor12> =
		    call 'erlang':'is_atom'
			(Key)
		in  let <_cor13> =
			call 'erlang':'is_function'
			    (Key)
		    in  call 'erlang':'or'
			    (_cor12, _cor13) ->
	      %% Line 156
	      case apply 'get_value'/2
		       (Key, Data) of
		%% Line 157
		<'undefined'> when 'true' ->
		    let <_cor14> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  ['undefined'|_cor14]
		%% Line 158
		<Value> when 'true' ->
		    let <_cor15> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  [{Str,Attrib,Value}|_cor15]
	      end
	  %% Line 160
	  <[{Str,{Format,Key}}|Rest],Data>
	      when let <_cor17> =
		    %% Line 161
		    call 'erlang':'is_atom'
			(Key)
		in  let <_cor20> =
			%% Line 161
			try
			    let <_cor18> =
				call 'erlang':'is_function'
				    (Key)
			    in  let <_cor19> =
				    call 'erlang':'is_atom'
					(Format)
				in  call 'erlang':'and'
					(_cor18, _cor19)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 161
			call 'erlang':'or'
			    (_cor17, _cor20) ->
	      %% Line 162
	      case apply 'get_value'/2
		       (Key, Data) of
		%% Line 163
		<'undefined'> when 'true' ->
		    let <_cor21> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  ['undefined'|_cor21]
		%% Line 164
		<Value> when 'true' ->
		    let <_cor22> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  [{Str,{Format,Value}}|_cor22]
	      end
	  %% Line 166
	  <[{Str,Attrib,{Format,Key}}|Rest],Data>
	      when let <_cor24> =
		    %% Line 167
		    call 'erlang':'is_atom'
			(Key)
		in  let <_cor27> =
			%% Line 167
			try
			    let <_cor25> =
				call 'erlang':'is_function'
				    (Key)
			    in  let <_cor26> =
				    call 'erlang':'is_atom'
					(Format)
				in  call 'erlang':'and'
					(_cor25, _cor26)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 167
			call 'erlang':'or'
			    (_cor24, _cor27) ->
	      %% Line 168
	      case apply 'get_value'/2
		       (Key, Data) of
		%% Line 169
		<'undefined'> when 'true' ->
		    let <_cor28> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  ['undefined'|_cor28]
		%% Line 170
		<Value> when 'true' ->
		    let <_cor29> =
			apply 'fill_info'/2
			    (Rest, Data)
		    in  [{Str,Attrib,{Format,Value}}|_cor29]
	      end
	  %% Line 172
	  <[{Str,SubStructure}|Rest],Data>
	      when call 'erlang':'is_list'
		    (SubStructure) ->
	      let <_cor31> =
		  %% Line 173
		  apply 'fill_info'/2
		      (SubStructure, Data)
	      in  let <_cor32> =
		      %% Line 173
		      apply 'fill_info'/2
			  (Rest, Data)
		  in  %% Line 173
		      [{Str,_cor31}|_cor32]
	  %% Line 174
	  <[{Str,Attrib,SubStructure}|Rest],Data> when 'true' ->
	      let <_cor33> =
		  %% Line 175
		  apply 'fill_info'/2
		      (SubStructure, Data)
	      in  let <_cor34> =
		      %% Line 175
		      apply 'fill_info'/2
			  (Rest, Data)
		  in  %% Line 175
		      [{Str,Attrib,_cor33}|_cor34]
	  %% Line 176
	  <[],_cor37> when 'true' ->
	      []
	  ( <_cor36,_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35})
		  -| [{'function_name',{'fill_info',2}}] )
	    -| ['compiler_generated'] )
	end
'get_value'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,Data>
	      when call 'erlang':'is_atom'
		    (Key) ->
	      %% Line 179
	      call 'proplists':'get_value'
		  (Key, Data)
	  %% Line 180
	  <Fun,Data>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 181
	      apply Fun
		  (Data)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_value',2}}] )
	    -| ['compiler_generated'] )
	end
'update_info'/2 =
    %% Line 183
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Fields|Fs],[{_X_Header,SubStructure}|Rest]> when 'true' ->
	      do  %% Line 184
		  apply 'update_info2'/2
		      (Fields, SubStructure)
		  %% Line 185
		  apply 'update_info'/2
		      (Fs, Rest)
	  %% Line 186
	  <[Fields|Fs],[{_X_Header,_X_Attrib,SubStructure}|Rest]> when 'true' ->
	      do  %% Line 187
		  apply 'update_info2'/2
		      (Fields, SubStructure)
		  %% Line 188
		  apply 'update_info'/2
		      (Fs, Rest)
	  %% Line 189
	  <[],[]> when 'true' ->
	      %% Line 190
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'update_info',2}}] )
	    -| ['compiler_generated'] )
	end
'update_info2'/2 =
    %% Line 192
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['undefined'|Fs],[_cor6|Rest]> when 'true' ->
	      %% Line 193
	      apply 'update_info2'/2
		  (Fs, Rest)
	  %% Line 194
	  <[Scroll = {_cor7,_cor8,_cor9}|Fs],[{_cor10,NewInfo}|Rest]> when 'true' ->
	      do  %% Line 195
		  apply 'update_scroll_boxes'/2
		      (Scroll, NewInfo)
		  %% Line 196
		  apply 'update_info2'/2
		      (Fs, Rest)
	  %% Line 197
	  <[Field|Fs],[{_X_Str,{'click',Value}}|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 198
		  apply 'to_str'/1
		      (Value)
	      in  do  %% Line 198
		      call 'wxTextCtrl':'setValue'
			  (Field, _cor2)
		      %% Line 199
		      apply 'update_info2'/2
			  (Fs, Rest)
	  %% Line 200
	  <[Field|Fs],[{_X_Str,Value}|Rest]> when 'true' ->
	      let <_cor3> =
		  %% Line 201
		  apply 'to_str'/1
		      (Value)
	      in  do  %% Line 201
		      call 'wxTextCtrl':'setValue'
			  (Field, _cor3)
		      %% Line 202
		      apply 'update_info2'/2
			  (Fs, Rest)
	  %% Line 203
	  <[Field|Fs],['undefined'|Rest]> when 'true' ->
	      do  %% Line 204
		  call 'wxTextCtrl':'setValue'
		      (Field, [])
		  %% Line 205
		  apply 'update_info2'/2
		      (Fs, Rest)
	  %% Line 206
	  <[],[]> when 'true' ->
	      'ok'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'update_info2',2}}] )
	    -| ['compiler_generated'] )
	end
'update_scroll_boxes'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_cor12,_cor13,0},{_cor14,[]}> when 'true' ->
	      'ok'
	  %% Line 209
	  <{Win,Sizer,_cor15},{Type,List}> when 'true' ->
	      do  %% Line 210
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[Child|_cor3]> when 'true' ->
				      do  call 'wxSizerItem':'deleteWindows'
					      (Child)
					  apply 'lc$^0'/1
					      (_cor3)
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    call 'wxSizer':'getChildren'
				(Sizer)
			in  apply 'lc$^0'/1
				(_cor4)
		    -| ['list_comprehension'] )
		  let <BC> =
		      %% Line 211
		      call 'wxWindow':'getBackgroundColour'
			  (Win)
		  in  let <Cursor> =
			  %% Line 212
			  call 'wxCursor':'new'
			      (6)
		      in  do  %% Line 213
			      apply 'add_entries'/6
				  (Type, List, Win, Sizer, BC, Cursor)
			      do  %% Line 214
				  call 'wxCursor':'destroy'
				      (Cursor)
				  do  %% Line 215
				      call 'wxSizer':'recalcSizes'
					  (Sizer)
				      do  %% Line 216
					  call 'wxWindow':'refresh'
					      (Win)
					  %% Line 217
					  'ok'
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'update_scroll_boxes',2}}] )
	    -| ['compiler_generated'] )
	end
'to_str'/1 =
    %% Line 219
    fun (_cor0) ->
	case _cor0 of
	  <Value>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 220
	      call 'erlang':'atom_to_list'
		  (Value)
	  %% Line 221
	  <{Unit,X}>
	      when try
		    let <_cor4> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'=:='
					  (Unit,
					   'bytes')
				      -| ['compiler_generated'] ) ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( call 'erlang':'=:='
					(Unit, 'time_ms')
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor6> =
			      ( case _cor4 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					( call 'erlang':'is_list'
					      (X)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor1> when 'true' ->
					_cor1
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor6
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 222
	      try
		  call 'erlang':'list_to_integer'
		      (X)
	      of <_cor7> ->
		  %% Line 223
		  apply 'to_str'/1
		      ({Unit,_cor7})
	      catch <_cor11,_cor10,_cor9> ->
		  case <_cor11,_cor10,_cor9> of
		    %% Line 224
		    <'error','badarg',_cor47> when 'true' ->
			X
		    ( <_cor11,_cor10,_cor9> when 'true' ->
			  primop 'raise'
			      (_cor9, _cor10)
		      -| ['compiler_generated'] )
		  end
	  %% Line 226
	  <{'bytes',B}> when 'true' ->
	      let <KB> =
		  %% Line 227
		  call 'erlang':'div'
		      (B, 1024)
	      in  let <MB> =
		      %% Line 228
		      call 'erlang':'div'
			  (KB, 1024)
		  in  let <GB> =
			  %% Line 229
			  call 'erlang':'div'
			      (MB, 1024)
		      in  %% Line 230
			  case <> of
			    %% Line 231
			    <>
				when call 'erlang':'>'
				      (GB,
				       10) ->
				let <_cor15> =
				    call 'erlang':'integer_to_list'
					(GB)
				in  call 'erlang':'++'
					(_cor15, [32|[71|[66]]])
			    %% Line 232
			    <>
				when call 'erlang':'>'
				      (MB,
				       10) ->
				let <_cor16> =
				    call 'erlang':'integer_to_list'
					(MB)
				in  call 'erlang':'++'
					(_cor16, [32|[77|[66]]])
			    %% Line 233
			    <>
				when call 'erlang':'>'
				      (KB,
				       0) ->
				let <_cor17> =
				    call 'erlang':'integer_to_list'
					(KB)
				in  call 'erlang':'++'
					(_cor17, [32|[107|[66]]])
			    %% Line 234
			    <> when 'true' ->
				let <_cor18> =
				    call 'erlang':'integer_to_list'
					(B)
				in  call 'erlang':'++'
					(_cor18, [32|[66]])
			  end
	  %% Line 236
	  <{'time_ms',MS}> when 'true' ->
	      let <S> =
		  %% Line 237
		  call 'erlang':'div'
		      (MS, 1000)
	      in  let <Min> =
		      %% Line 238
		      call 'erlang':'div'
			  (S, 60)
		  in  let <Hours> =
			  %% Line 239
			  call 'erlang':'div'
			      (Min, 60)
		      in  let <Days> =
			      %% Line 240
			      call 'erlang':'div'
				  (Hours, 24)
			  in  %% Line 241
			      case <> of
				%% Line 242
				<>
				    when call 'erlang':'>'
					  (Days,
					   0) ->
				    let <_cor23> =
					call 'erlang':'integer_to_list'
					    (Days)
				    in  call 'erlang':'++'
					    (_cor23, [32|[68|[97|[121|[115]]]]])
				%% Line 243
				<>
				    when call 'erlang':'>'
					  (Hours,
					   0) ->
				    let <_cor24> =
					call 'erlang':'integer_to_list'
					    (Hours)
				    in  call 'erlang':'++'
					    (_cor24, [32|[72|[111|[117|[114|[115]]]]]])
				%% Line 244
				<>
				    when call 'erlang':'>'
					  (Min,
					   0) ->
				    let <_cor25> =
					call 'erlang':'integer_to_list'
					    (Min)
				    in  call 'erlang':'++'
					    (_cor25, [32|[77|[105|[110|[115]]]]])
				%% Line 245
				<> when 'true' ->
				    let <_cor26> =
					call 'erlang':'integer_to_list'
					    (S)
				    in  call 'erlang':'++'
					    (_cor26, [32|[83|[101|[99|[115]]]]])
			      end
	  %% Line 248
	  <{'func',{F,A}}>
	      when let <_cor27> =
		    call 'erlang':'is_atom'
			(F)
		in  let <_cor28> =
			call 'erlang':'is_integer'
			    (A)
		    in  call 'erlang':'and'
			    (_cor27, _cor28) ->
	      %% Line 249
	      call 'lists':'concat'
		  ([F|[[47]|[A|[]]]])
	  %% Line 250
	  <{'func',{F,'_'}}>
	      when call 'erlang':'is_atom'
		    (F) ->
	      %% Line 251
	      call 'erlang':'atom_to_list'
		  (F)
	  %% Line 252
	  <{{'format',Fun},Value}>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 253
	      apply Fun
		  (Value)
	  %% Line 254
	  <{A,B}>
	      when let <_cor29> =
		    call 'erlang':'is_atom'
			(A)
		in  let <_cor30> =
			call 'erlang':'is_atom'
			    (B)
		    in  call 'erlang':'and'
			    (_cor29, _cor30) ->
	      %% Line 255
	      call 'lists':'concat'
		  ([A|[[58]|[B|[]]]])
	  %% Line 256
	  <{M,F,A}>
	      when try
		    let <_cor31> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor32> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor33> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor34> =
				    call 'erlang':'and'
					(_cor32, _cor33)
				in  call 'erlang':'and'
					(_cor31, _cor34)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 257
	      call 'lists':'concat'
		  ([M|[[58]|[F|[[47]|[A|[]]]]]])
	  %% Line 258
	  <Value>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor37> =
		  %% Line 259
		  ( fun (_cor35) ->
			call 'erlang':'is_integer'
			    (_cor35)
		    -| [{'id',{0,0,'-to_str/1-fun-0-'}}] )
	      in  %% Line 259
		  case call 'lists':'all'
			   (_cor37, Value) of
		    %% Line 260
		    <'true'> when 'true' ->
			Value
		    %% Line 261
		    <'false'> when 'true' ->
			let <_cor44> =
			    %% Line 262
			    ( fun (_cor41,_cor40) ->
				  let <_cor39> =
				      %% Line 263
				      apply 'to_str'/1
					  (_cor41)
				  in  let <_cor38> =
					  %% Line 263
					  [32|_cor40]
				      in  %% Line 263
					  call 'erlang':'++'
					      (_cor39, _cor38)
			      -| [{'id',{0,0,'-to_str/1-fun-1-'}}] )
			in  %% Line 262
			    call 'lists':'foldl'
				(_cor44, %% Line 264
					 [], %% Line 264
					     Value)
		    ( <_cor45> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor45})
		      -| ['compiler_generated'] )
		  end
	  %% Line 266
	  <Port>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      %% Line 267
	      call 'erlang':'port_to_list'
		  (Port)
	  %% Line 268
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 269
	      call 'erlang':'pid_to_list'
		  (Pid)
	  %% Line 270
	  <No>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 271
	      call 'erlang':'integer_to_list'
		  (No)
	  %% Line 272
	  <Term> when 'true' ->
	      %% Line 273
	      call 'io_lib':'format'
		  ([126|[119]], [Term|[]])
	end
'create_menus'/3 =
    %% Line 275
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_MenuBar,_X_Type> when 'true' ->
	      'ok'
	  %% Line 276
	  <Menus,MenuBar,Type> when 'true' ->
	      let <Add> =
		  %% Line 277
		  ( fun (_cor4,_cor3) ->
			case <_cor4,_cor3> of
			  <{Tag,Ms},Index> when 'true' ->
			      %% Line 278
			      apply 'create_menu'/5
				  (Tag, Ms, Index, MenuBar, Type)
			  ( <_cor6,_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor6,_cor5})
				  -| [{'function_name',{'-create_menus/3-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-create_menus/3-fun-0-'}}] )
	      in  %% Line 280
		  case Menus of
		    <[{First,_cor14}|_cor15]> when 'true' ->
			let <_cor9> =
			    %% Line 281
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Type,
					 'default') ->
				  0
			      %% Line 282
			      <>
				  when call 'erlang':'=:='
					(First,
					 [70|[105|[108|[101]]]]) ->
				  0
			      %% Line 283
			      <> when 'true' ->
				  1
			    end
			in  do  %% Line 285
				call 'wx':'foldl'
				    (Add, _cor9, Menus)
				%% Line 286
				'ok'
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	end
'create_menu'/5 =
    %% Line 288
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[70|[105|[108|[101]]]],MenuItems,Index,MenuBar,Type> when 'true' ->
	      %% Line 289
	      case <> of
		%% Line 290
		<>
		    when call 'erlang':'=:='
			  (Type,
			   'plugin') ->
		    let <MenuId> =
			%% Line 291
			call 'wxMenuBar':'findMenu'
			    (MenuBar, [70|[105|[108|[101]]]])
		    in  let <Menu> =
			    %% Line 292
			    call 'wxMenuBar':'getMenu'
				(MenuBar, MenuId)
			in  let <_cor11> =
				%% Line 293
				( fun (_cor8,_cor7) ->
				      %% Line 294
				      apply 'create_menu_item'/3
					  (_cor8, Menu, _cor7)
				  -| [{'id',{0,0,'-create_menu/5-fun-0-'}}] )
			    in  do  %% Line 293
				    call 'lists':'foldl'
					(_cor11, %% Line 295
						 0, %% Line 295
						    MenuItems)
				    %% Line 296
				    call 'erlang':'+'
					(Index, 1)
		%% Line 297
		<> when 'true' ->
		    let <Menu> =
			%% Line 298
			call 'wxMenu':'new'
			    ()
		    in  let <_cor17> =
			    %% Line 299
			    ( fun (_cor14,_cor13) ->
				  %% Line 300
				  apply 'create_menu_item'/3
				      (_cor14, Menu, _cor13)
			      -| [{'id',{0,0,'-create_menu/5-fun-1-'}}] )
			in  do  %% Line 299
				call 'lists':'foldl'
				    (_cor17, %% Line 301
					     0, %% Line 301
						MenuItems)
				do  %% Line 302
				    call 'wxMenuBar':'insert'
					(MenuBar, Index, Menu, [70|[105|[108|[101]]]])
				    %% Line 303
				    call 'erlang':'+'
					(Index, 1)
	      end
	  %% Line 305
	  <Name,MenuItems,Index,MenuBar,_X_Type> when 'true' ->
	      let <Menu> =
		  %% Line 306
		  call 'wxMenu':'new'
		      ()
	      in  let <_cor23> =
		      %% Line 307
		      ( fun (_cor20,_cor19) ->
			    %% Line 308
			    apply 'create_menu_item'/3
				(_cor20, Menu, _cor19)
			-| [{'id',{0,0,'-create_menu/5-fun-2-'}}] )
		  in  do  %% Line 307
			  call 'lists':'foldl'
			      (_cor23, %% Line 309
				       0, %% Line 309
					  MenuItems)
			  do  %% Line 310
			      call 'wxMenuBar':'insert'
				  (MenuBar, Index, Menu, Name)
			      %% Line 311
			      call 'erlang':'+'
				  (Index, 1)
	end
'create_menu_item'/3 =
    %% Line 313
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'create_menu',Id = 5009,_cor10,_cor11,_cor12,_cor13},Menu,Index> when 'true' ->
	      do  %% Line 314
		  call 'wxMenu':'insert'
		      (Menu, Index, Id)
		  %% Line 315
		  call 'erlang':'+'
		      (Index, 1)
	  %% Line 316
	  <{'create_menu',Id,Text,Help,Type,Check},%% Line 317
						   Menu,%% Line 317
							Index> when 'true' ->
	      let <_cor4> =
		  %% Line 318
		  case Help of
		    %% Line 319
		    <[]> when 'true' ->
			[]
		    %% Line 320
		    <_cor14> when 'true' ->
			[{'help',Help}|[]]
		  end
	      in  do  %% Line 322
		      case Type of
			%% Line 323
			<'append'> when 'true' ->
			    %% Line 324
			    call 'wxMenu':'insert'
				(Menu, Index, Id, %% Line 325
						  [{'text',Text}|_cor4])
			%% Line 326
			<'check'> when 'true' ->
			    do  %% Line 327
				call 'wxMenu':'insertCheckItem'
				    (Menu, Index, Id, Text, _cor4)
				%% Line 328
				call 'wxMenu':'check'
				    (Menu, Id, Check)
			%% Line 329
			<'radio'> when 'true' ->
			    do  %% Line 330
				call 'wxMenu':'insertRadioItem'
				    (Menu, Index, Id, Text, _cor4)
				%% Line 331
				call 'wxMenu':'check'
				    (Menu, Id, Check)
			%% Line 332
			<'separator'> when 'true' ->
			    %% Line 333
			    call 'wxMenu':'insertSeparator'
				(Menu, Index)
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		      %% Line 335
		      call 'erlang':'+'
			  (Index, 1)
	  %% Line 336
	  <'separator',Menu,Index> when 'true' ->
	      do  %% Line 337
		  call 'wxMenu':'insertSeparator'
		      (Menu, Index)
		  %% Line 338
		  call 'erlang':'+'
		      (Index, 1)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'create_menu_item',3}}] )
	    -| ['compiler_generated'] )
	end
'create_attrs'/0 =
    %% Line 340
    fun () ->
	let <Font> =
	    %% Line 341
	    call 'wxSystemSettings':'getFont'
		(17)
	in  let <_cor6> =
		%% Line 342
		case call 'wxSystemSettings':'getColour'
			 (31) of
		  %% Line 343
		  <{255,255,255,_cor20}> when 'true' ->
		      {10,10,10}
		  %% Line 344
		  <Color> when 'true' ->
		      Color
		end
	    in  let <_cor19> =
		    %% Line 346
		    call 'wxListItemAttr':'new'
			(_cor6, {230,230,250}, Font)
		in  let <_cor18> =
			%% Line 347
			call 'wxListItemAttr':'new'
			    (_cor6, {255,255,255}, Font)
		    in  let <_cor17> =
			    %% Line 353
			    call 'wxListItemAttr':'new'
				(_cor6, {235,215,90}, Font)
			in  let <_cor16> =
				%% Line 348
				call 'wxListItemAttr':'new'
				    ({230,230,230}, {100,100,100}, Font)
			    in  let <_cor14> =
				    %% Line 350
				    apply 'mix'/2
					({184,207,184}, {255,255,255})
				in  let <_cor15> =
					%% Line 350
					call 'wxListItemAttr':'new'
					    (_cor6, _cor14, Font)
				    in  let <_cor12> =
					    %% Line 349
					    apply 'mix'/2
						({184,207,184}, {230,230,250})
					in  let <_cor13> =
						%% Line 349
						call 'wxListItemAttr':'new'
						    (_cor6, _cor12, Font)
					    in  let <_cor10> =
						    %% Line 352
						    apply 'mix'/2
							({123,168,123}, {255,255,255})
						in  let <_cor11> =
							%% Line 352
							call 'wxListItemAttr':'new'
							    (_cor6, _cor10, Font)
						    in  let <_cor8> =
							    %% Line 351
							    apply 'mix'/2
								({123,168,123}, {230,230,250})
							in  let <_cor9> =
								%% Line 351
								call 'wxListItemAttr':'new'
								    (_cor6, _cor8, Font)
							    in  %% Line 346
								{'attrs',_cor19,_cor18,_cor17,_cor16,_cor15,_cor13,_cor11,_cor9}
'mix'/2 =
    %% Line 356
    fun (_cor1,_cor0) ->
	_cor1
'get_box_info'/1 =
    %% Line 363
    fun (_cor0) ->
	case _cor0 of
	  <{Title,List}>
	      when call 'erlang':'is_list'
		    (List) ->
	      {Title,0,List}
	  %% Line 364
	  <{Title,'left',List}> when 'true' ->
	      {Title,0,List}
	  %% Line 365
	  <{Title,'right',List}> when 'true' ->
	      {Title,512,List}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_box_info',1}}] )
	    -| ['compiler_generated'] )
	end
'add_box'/6 =
    %% Line 367
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Panel,OuterBox,Cursor,Title,Proportion,{Format,List}> when 'true' ->
	      let <Box> =
		  %% Line 368
		  call 'wxStaticBoxSizer':'new'
		      (8, Panel, [{'label',Title}|[]])
	      in  let <Scroll> =
		      %% Line 369
		      call 'wxScrolledWindow':'new'
			  (Panel)
		  in  do  %% Line 370
			  call 'wxScrolledWindow':'enableScrolling'
			      (Scroll, 'true', 'true')
			  do  %% Line 371
			      call 'wxScrolledWindow':'setScrollbars'
				  (Scroll, 1, 1, 0, 0)
			      let <ScrollSizer> =
				  %% Line 372
				  call 'wxBoxSizer':'new'
				      (8)
			      in  do  %% Line 373
				      call 'wxScrolledWindow':'setSizer'
					  (Scroll, ScrollSizer)
				      let <BC> =
					  %% Line 374
					  call 'wxWindow':'getBackgroundColour'
					      (Panel)
				      in  do  %% Line 375
					      call 'wxWindow':'setBackgroundColour'
						  (Scroll, BC)
					      do  %% Line 376
						  apply 'add_entries'/6
						      (Format, List, Scroll, ScrollSizer, BC, Cursor)
						  do  %% Line 377
						      call 'wxSizer':'add'
							  (Box, Scroll, [{'proportion',1}|[{'flag',8192}]])
						      do  %% Line 378
							  call 'wxSizer':'add'
							      (OuterBox, Box, [{'proportion',Proportion}|[{'flag',8192}]])
							  let <_cor10> =
							      %% Line 379
							      call 'erlang':'length'
								  (List)
							  in  %% Line 379
							      {Scroll,ScrollSizer,_cor10}
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'add_box',6}}] )
	    -| ['compiler_generated'] )
	end
'add_entries'/6 =
    %% Line 381
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'click',List,Scroll,ScrollSizer,BC,Cursor> when 'true' ->
	      let <Add> =
		  %% Line 382
		  ( fun (_cor7) ->
			let <TC> =
			    %% Line 383
			    apply 'link_entry'/3
				(Scroll, _cor7, Cursor)
			in  do  %% Line 384
				call 'wxWindow':'setBackgroundColour'
				    (TC, BC)
				%% Line 385
				call 'wxSizer':'add'
				    (ScrollSizer, TC, [{'flag',8192}])
		    -| [{'id',{0,0,'-add_entries/6-fun-0-'}}] )
	      in  %% Line 387
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor12) ->
				case _cor12 of
				  <[Link|_cor11]> when 'true' ->
				      let <_cor13> =
					  apply Add
					      (Link)
				      in  let <_cor14> =
					      apply 'lc$^0'/1
						  (_cor11)
					  in  ( [_cor13|_cor14]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor12> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor12})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	  %% Line 388
	  <'plain',List,Scroll,ScrollSizer,_cor33,_cor34> when 'true' ->
	      let <Add> =
		  %% Line 389
		  ( fun (_cor19) ->
			let <TC> =
			    %% Line 390
			    call 'wxTextCtrl':'new'
				(Scroll, -1, %% Line 391
					     [{'style',2129936}|%% Line 392
								[{'value',_cor19}|[]]])
			in  %% Line 393
			    call 'wxSizer':'add'
				(ScrollSizer, TC, [{'flag',8192}])
		    -| [{'id',{0,0,'-add_entries/6-fun-1-'}}] )
	      in  %% Line 395
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor24) ->
				case _cor24 of
				  <[String|_cor23]> when 'true' ->
				      let <_cor25> =
					  apply Add
					      (String)
				      in  let <_cor26> =
					      apply 'lc$^1'/1
						  (_cor23)
					  in  ( [_cor25|_cor26]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor24> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor24})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (List)
		    -| ['list_comprehension'] )
	  ( <_cor32,_cor31,_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'add_entries',6}}] )
	    -| ['compiler_generated'] )
	end
'create_box'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Panel,{'scroll_boxes',[]}> when 'true' ->
	      %% Line 399
	      'undefined'
	  %% Line 400
	  <Panel,{'scroll_boxes',Data}> when 'true' ->
	      let <OuterBox> =
		  %% Line 401
		  call 'wxBoxSizer':'new'
		      (4)
	      in  let <Cursor> =
		      %% Line 402
		      call 'wxCursor':'new'
			  (6)
		  in  let <AddBox> =
			  %% Line 403
			  ( fun (_cor4) ->
				case _cor4 of
				  <{Title,Proportion,Format = {_cor72,_cor73}}> when 'true' ->
				      %% Line 404
				      apply 'add_box'/6
					  (Panel, OuterBox, Cursor, Title, Proportion, Format)
				  %% Line 405
				  <{Title,Format = {_cor74,_cor75}}> when 'true' ->
				      %% Line 406
				      apply 'add_box'/6
					  (Panel, OuterBox, Cursor, Title, 1, Format)
				  %% Line 407
				  <'undefined'> when 'true' ->
				      %% Line 408
				      'undefined'
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'-create_box/2-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-create_box/2-fun-0-'}}] )
		      in  let <_cor12> =
			      %% Line 410
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor9) ->
					    case _cor9 of
					      <[Entry|_cor8]> when 'true' ->
						  let <_cor10> =
						      apply AddBox
							  (Entry)
						  in  let <_cor11> =
							  apply 'lc$^0'/1
							      (_cor8)
						      in  ( [_cor10|_cor11]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor9> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor9})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(Data)
				-| ['list_comprehension'] )
			  in  do  %% Line 411
				  call 'wxCursor':'destroy'
				      (Cursor)
				  let <_cor18> =
				      %% Line 413
				      ( fun (_cor15,_cor14) ->
					    case <_cor15,_cor14> of
					      <{_cor76,_cor77,L},Max>
						  when call 'erlang':'>'
							(L,
							 Max) ->
						  L
					      %% Line 414
					      <_cor78,Max> when 'true' ->
						  Max
					    end
					-| [{'id',{0,0,'-create_box/2-fun-1-'}}] )
				  in  let <MaxL> =
					  %% Line 413
					  call 'lists':'foldl'
					      (_cor18, %% Line 416
						       0, _cor12)
				      in  let <Dummy> =
					      %% Line 419
					      call 'wxTextCtrl':'new'
						  (Panel, -1, [{'style',2129936}])
					  in  %% Line 420
					      case call 'wxWindow':'getSize'
						       (Dummy) of
						<{_cor79,H}> when 'true' ->
						    do  %% Line 421
							call 'wxTextCtrl':'destroy'
							    (Dummy)
							let <_cor25> =
							    %% Line 423
							    case <> of
							      <>
								  when call 'erlang':'>'
									(MaxL,
									 8) ->
								  call 'erlang':'*'
								      (8, H)
							      %% Line 424
							      <> when 'true' ->
								  call 'erlang':'*'
								      (MaxL, H)
							    end
							in  do  %% Line 426
								( letrec
								      'lc$^1'/1 =
									  fun (_cor29) ->
									      case _cor29 of
										<[{B,_cor80,_cor81}|_cor28]> when 'true' ->
										    do  call 'wxWindow':'setMinSize'
											    (B, {0,_cor25})
											apply 'lc$^1'/1
											    (_cor28)
										( <[_cor27|_cor28]> when 'true' ->
										      apply 'lc$^1'/1
											  (_cor28)
										  -| ['compiler_generated'] )
										<[]> when 'true' ->
										    []
										( <_cor29> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor29})
											-| [{'function_name',{'lc$^1',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  apply 'lc$^1'/1
									  (_cor12)
								  -| ['list_comprehension'] )
								do  %% Line 427
								    call 'wxSizer':'layout'
									(OuterBox)
								    %% Line 428
								    {OuterBox,_cor12}
						( <_cor24> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor24})
						  -| ['compiler_generated'] )
					      end
	  %% Line 430
	  <Panel,Data> when 'true' ->
	      %% Line 431
	      case apply 'get_box_info'/1
		       (Data) of
		<{Title,Align,Info}> when 'true' ->
		    let <Box> =
			%% Line 432
			call 'wxStaticBoxSizer':'new'
			    (8, Panel, [{'label',Title}|[]])
		    in  let <LeftSize> =
			    %% Line 433
			    apply 'get_max_size'/2
				(Panel, Info)
			in  let <_cor36> =
				%% Line 435
				call 'erlang':'bor'
				    (Align, 8192)
			    in  let <RightProportion> =
				    %% Line 435
				    [{'proportion',1}|[{'flag',_cor36}|[]]]
				in  let <AddRow> =
					%% Line 436
					( fun (_cor60) ->
					      case _cor60 of
						<{Desc0,Value0}> when 'true' ->
						    let <Desc> =
							%% Line 437
							call 'erlang':'++'
							    (Desc0, [58])
						    in  let <Line> =
							    %% Line 438
							    call 'wxBoxSizer':'new'
								(4)
							in  let <_cor43> =
								%% Line 440
								call 'wxTextCtrl':'new'
								    (Panel, -1, %% Line 441
										[{'style',2129936}|%% Line 442
												   [{'size',LeftSize}|%% Line 443
														      [{'value',Desc}|[]]]])
							    in  do  %% Line 439
								    call 'wxSizer':'add'
									(Line, _cor43, [{'proportion',0}])
								    let <_cor57> =
									%% Line 446
									case Value0 of
									  %% Line 447
									  <{'click',[117|[110|[107|[110|[111|[119|[110]]]]]]]}> when 'true' ->
									      %% Line 448
									      call 'wxTextCtrl':'new'
										  (Panel, -1, %% Line 449
											      [{'style',2129936}|[{'value',[117|[110|[107|[110|[111|[119|[110]]]]]]]}]])
									  %% Line 451
									  <{'click',Value}> when 'true' ->
									      %% Line 452
									      apply 'link_entry'/2
										  (Panel, Value)
									  %% Line 453
									  <_cor82> when 'true' ->
									      let <Value> =
										  %% Line 454
										  apply 'to_str'/1
										      (Value0)
									      in  let <TCtrl> =
										      %% Line 455
										      call 'wxTextCtrl':'new'
											  (Panel, -1, %% Line 456
												      [{'style',2129936}|%% Line 457
															 [{'value',Value}|[]]])
										  in  let <_cor53> =
											  %% Line 458
											  call 'erlang':'length'
											      (Value)
										      in  do  %% Line 458
											      ( case <> of
												  ( <>
													when call 'erlang':'>'
													      (_cor53,
													       50) ->
													let <_cor54> =
													    %% Line 459
													    call 'wxToolTip':'new'
														(Value)
													in  %% Line 459
													    call 'wxWindow':'setToolTip'
														(TCtrl, _cor54)
												    -| ['compiler_generated'] )
												  ( <> when 'true' ->
													'ok'
												    -| ['compiler_generated'] )
												end
												-| ['compiler_generated'] )
											      %% Line 460
											      TCtrl
									end
								    in  do  %% Line 462
									    call 'wxSizer':'add'
										(Line, 10, 0)
									    do  %% Line 463
										call 'wxSizer':'add'
										    (Line, _cor57, RightProportion)
										%% Line 465
										case call 'wxTextCtrl':'getTextExtent'
											 (_cor57, [87|[106]]) of
										  <{_cor83,H,_cor84,_cor85}> when 'true' ->
										      do  %% Line 466
											  call 'wxTextCtrl':'setMinSize'
											      (_cor57, {0,H})
											  do  %% Line 468
											      call 'wxSizer':'add'
												  (Box, Line, [{'proportion',0}|[{'flag',8192}]])
											      _cor57
										  ( <_cor59> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor59})
										    -| ['compiler_generated'] )
										end
						%% Line 470
						<'undefined'> when 'true' ->
						    %% Line 471
						    'undefined'
						( <_cor61> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor61})
							-| [{'function_name',{'-create_box/2-fun-2-',1}}] )
						  -| ['compiler_generated'] )
					      end
					  -| [{'id',{0,0,'-create_box/2-fun-2-'}}] )
				    in  let <_cor68> =
					    %% Line 473
					    ( letrec
						  'lc$^2'/1 =
						      fun (_cor65) ->
							  case _cor65 of
							    <[Entry|_cor64]> when 'true' ->
								let <_cor66> =
								    apply AddRow
									(Entry)
								in  let <_cor67> =
									apply 'lc$^2'/1
									    (_cor64)
								    in  ( [_cor66|_cor67]
									  -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor65> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor65})
								    -| [{'function_name',{'lc$^2',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^2'/1
						      (Info)
					      -| ['list_comprehension'] )
					in  %% Line 474
					    {Box,_cor68}
		( <_cor32> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor32})
		  -| ['compiler_generated'] )
	      end
	end
'link_entry'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	let <Cursor> =
	    %% Line 477
	    call 'wxCursor':'new'
		(6)
	in  let <_cor3> =
		%% Line 478
		apply 'to_link'/1
		    (_cor0)
	    in  let <TC> =
		    %% Line 478
		    apply 'link_entry2'/3
			(_cor1, _cor3, Cursor)
		in  do  %% Line 479
			call 'wxCursor':'destroy'
			    (Cursor)
			%% Line 480
			TC
'link_entry'/3 =
    %% Line 481
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 482
	    apply 'to_link'/1
		(_cor1)
	in  %% Line 482
	    apply 'link_entry2'/3
		(_cor2, _cor3, _cor0)
'link_entry2'/3 =
    %% Line 484
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Panel,{Target,Str},Cursor> when 'true' ->
	      let <TC> =
		  %% Line 485
		  call 'wxTextCtrl':'new'
		      (Panel, -1, [{'style',2129936}])
	      in  let <_cor7> =
		      %% Line 486
		      call 'wxe_util':'get_const'
			  ('wxBLUE')
		  in  do  %% Line 486
			  call 'wxTextCtrl':'setForegroundColour'
			      (TC, _cor7)
			  do  %% Line 487
			      call 'wxTextCtrl':'appendText'
				  (TC, Str)
			      do  %% Line 488
				  call 'wxWindow':'setCursor'
				      (TC, Cursor)
				  do  %% Line 489
				      call 'wxTextCtrl':'connect'
					  (TC, 'left_down', [{'userData',Target}|[]])
				      do  %% Line 490
					  call 'wxTextCtrl':'connect'
					      (TC, 'enter_window')
					  do  %% Line 491
					      call 'wxTextCtrl':'connect'
						  (TC, 'leave_window')
					      let <_cor8> =
						  %% Line 492
						  call 'erlang':'++'
						      ([67|[108|[105|[99|[107|[32|[116|[111|[32|[115|[101|[101|[32|[112|[114|[111|[112|[101|[114|[116|[105|[101|[115|[32|[102|[111|[114|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]], Str)
					      in  let <ToolTip> =
						      %% Line 492
						      call 'wxToolTip':'new'
							  (_cor8)
						  in  do  %% Line 493
							  call 'wxWindow':'setToolTip'
							      (TC, ToolTip)
							  %% Line 494
							  TC
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'link_entry2',3}}] )
	    -| ['compiler_generated'] )
	end
'to_link'/1 =
    %% Line 496
    fun (_cor0) ->
	case _cor0 of
	  <Tuple = {_X_Target,_X_Str}> when 'true' ->
	      %% Line 497
	      Tuple
	  %% Line 498
	  <Target0> when 'true' ->
	      let <Target> =
		  %% Line 499
		  apply 'to_str'/1
		      (Target0)
	      in  %% Line 500
		  {Target,Target}
	end
'html_window'/1 =
    %% Line 502
    fun (_cor0) ->
	let <Win> =
	    %% Line 503
	    call 'wxHtmlWindow':'new'
		(_cor0, [{'style',4}])
	in  do  %% Line 505
		call 'wxHtmlWindow':'connect'
		    (Win, 'command_html_link_clicked')
		%% Line 506
		Win
'html_window'/2 =
    %% Line 508
    fun (_cor1,_cor0) ->
	let <Win> =
	    %% Line 509
	    apply 'html_window'/1
		(_cor1)
	in  do  %% Line 510
		call 'wxHtmlWindow':'setPage'
		    (Win, _cor0)
		%% Line 511
		Win
'get_max_size'/2 =
    %% Line 513
    fun (_cor1,_cor0) ->
	let <Txt> =
	    %% Line 514
	    call 'wxTextCtrl':'new'
		(_cor1, -1, [])
	in  let <Size> =
		%% Line 515
		apply 'get_max_size'/4
		    (Txt, _cor0, 0, 0)
	    in  do  %% Line 516
		    call 'wxTextCtrl':'destroy'
			(Txt)
		    %% Line 517
		    Size
'get_max_size'/4 =
    %% Line 519
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Txt,[{Desc,_cor12}|Info],MaxX,MaxY> when 'true' ->
	      let <_cor4> =
		  %% Line 520
		  call 'erlang':'++'
		      (Desc, [58])
	      in  %% Line 520
		  case call 'wxTextCtrl':'getTextExtent'
			   (Txt, _cor4) of
		    <{X,Y,_cor13,_cor14}> when 'true' ->
			%% Line 521
			case <> of
			  <>
			      when call 'erlang':'>'
				    (X,
				     MaxX) ->
			      %% Line 522
			      apply 'get_max_size'/4
				  (Txt, Info, X, Y)
			  %% Line 523
			  <> when 'true' ->
			      %% Line 524
			      apply 'get_max_size'/4
				  (Txt, Info, MaxX, MaxY)
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 526
	  <Txt,['undefined'|Info],MaxX,MaxY> when 'true' ->
	      %% Line 527
	      apply 'get_max_size'/4
		  (Txt, Info, MaxX, MaxY)
	  %% Line 528
	  <_cor15,[],X,_X_Y> when 'true' ->
	      let <_cor7> =
		  %% Line 529
		  call 'erlang':'+'
		      (X, 2)
	      in  %% Line 529
		  {_cor7,-1}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'get_max_size',4}}] )
	    -| ['compiler_generated'] )
	end
'set_listctrl_col_size'/2 =
    %% Line 532
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 533
	    ( fun () ->
		  apply 'calc_last'/2
		      (_cor1, _cor0)
	      -| [{'id',{0,0,'-set_listctrl_col_size/2-fun-0-'}}] )
	in  %% Line 533
	    call 'wx':'batch'
		(_cor2)
'calc_last'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	let <Cols> =
	    %% Line 536
	    call 'wxListCtrl':'getColumnCount'
		(_cor1)
	in  %% Line 537
	    case call 'wxWindow':'getClientSize'
		     (_cor1) of
	      <{Total,_cor19}> when 'true' ->
		  let <SBSize> =
		      %% Line 538
		      apply 'scroll_size'/1
			  (_cor1)
		  in  let <_cor13> =
			  %% Line 539
			  ( fun (_cor10,_cor9) ->
				let <_cor8> =
				    %% Line 540
				    call 'wxListCtrl':'getColumnWidth'
					(_cor1, _cor10)
				in  %% Line 540
				    call 'erlang':'-'
					(_cor9, _cor8)
			    -| [{'id',{0,0,'-calc_last/2-fun-0-'}}] )
		      in  let <_cor7> =
			      %% Line 541
			      call 'erlang':'-'
				  (Total, SBSize)
			  in  let <_cor5> =
				  %% Line 541
				  call 'erlang':'-'
				      (Cols, 2)
			      in  let <_cor6> =
				      %% Line 541
				      call 'lists':'seq'
					  (0, _cor5)
				  in  let <Last> =
					  %% Line 539
					  call 'lists':'foldl'
					      (_cor13, _cor7, _cor6)
				      in  let <Size> =
					      %% Line 542
					      call 'erlang':'max'
						  (150, Last)
					  in  let <_cor16> =
						  %% Line 543
						  call 'erlang':'-'
						      (Cols, 1)
					      in  %% Line 543
						  call 'wxListCtrl':'setColumnWidth'
						      (_cor1, _cor16, Size)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'scroll_size'/1 =
    %% Line 545
    fun (_cor0) ->
	%% Line 546
	case call 'os':'type'
		 () of
	  %% Line 547
	  <{'win32','nt'}> when 'true' ->
	      0
	  %% Line 548
	  <{'unix','darwin'}> when 'true' ->
	      0
	  %% Line 549
	  <_cor4> when 'true' ->
	      %% Line 550
	      case call 'wxWindow':'hasScrollbar'
		       (_cor0, 8) of
		%% Line 551
		<'true'> when 'true' ->
		    call 'wxSystemSettings':'getMetric'
			(28)
		%% Line 552
		<'false'> when 'true' ->
		    0
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'user_term'/3 =
    %% Line 557
    fun (_cor2,_cor1,_cor0) ->
	let <Dialog> =
	    %% Line 558
	    call 'wxTextEntryDialog':'new'
		(_cor2, _cor1, [{'value',_cor0}|[]])
	in  %% Line 559
	    case call 'wxTextEntryDialog':'showModal'
		     (Dialog) of
	      %% Line 560
	      <5100> when 'true' ->
		  let <Str> =
		      %% Line 561
		      call 'wxTextEntryDialog':'getValue'
			  (Dialog)
		  in  do  %% Line 562
			  call 'wxTextEntryDialog':'destroy'
			      (Dialog)
			  let <_cor5> =
			      %% Line 563
			      apply 'ensure_last_is_dot'/1
				  (Str)
			  in  %% Line 563
			      apply 'parse_string'/1
				  (_cor5)
	      %% Line 564
	      <5101> when 'true' ->
		  do  %% Line 565
		      call 'wxTextEntryDialog':'destroy'
			  (Dialog)
		      %% Line 566
		      'cancel'
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'user_term_multiline'/3 =
    %% Line 569
    fun (_cor2,_cor1,_cor0) ->
	let <Dialog> =
	    %% Line 570
	    call 'wxDialog':'new'
		(_cor2, -1, _cor1, %% Line 571
				   [{'style',536877120}])
	in  let <Panel> =
		%% Line 573
		call 'wxPanel':'new'
		    (Dialog)
	    in  let <TextCtrl> =
		    %% Line 575
		    call 'wxTextCtrl':'new'
			(Panel, -1, %% Line 576
				    [{'value',_cor0}|%% Line 577
						     [{'style',102}]])
		in  let <Line> =
			%% Line 578
			call 'wxStaticLine':'new'
			    (Panel, [{'style',4}])
		    in  let <Buttons> =
			    %% Line 580
			    call 'wxDialog':'createButtonSizer'
				(Dialog, 20)
			in  let <InnerSizer> =
				%% Line 582
				call 'wxBoxSizer':'new'
				    (8)
			    in  do  %% Line 583
				    call 'wxSizer':'add'
					(InnerSizer, TextCtrl, %% Line 584
							       [{'flag',8432}|[{'proportion',1}|[{'border',5}]]])
				    do  %% Line 585
					call 'wxSizer':'add'
					    (InnerSizer, Line, %% Line 586
							       [{'flag',8192}|[{'proportion',0}|[{'border',5}]]])
					do  %% Line 587
					    call 'wxPanel':'setSizer'
						(Panel, InnerSizer)
					    let <TopSizer> =
						%% Line 589
						call 'wxBoxSizer':'new'
						    (8)
					    in  do  %% Line 590
						    call 'wxSizer':'add'
							(TopSizer, Panel, %% Line 591
									  [{'flag',8432}|[{'proportion',1}|[{'border',5}]]])
						    do  %% Line 592
							call 'wxSizer':'add'
							    (TopSizer, Buttons, %% Line 593
										[{'flag',8352}|[{'border',10}]])
							let <DC> =
							    %% Line 597
							    call 'wxClientDC':'new'
								(Panel)
							in  let <W> =
								%% Line 598
								call 'wxDC':'getCharWidth'
								    (DC)
							    in  let <H> =
								    %% Line 599
								    call 'wxDC':'getCharHeight'
									(DC)
								in  %% Line 600
								    case call 'wxDC':'getMultiLineTextExtent'
									     (DC, _cor0) of
								      <{EW,EH}> when 'true' ->
									  let <_cor32> =
									      %% Line 601
									      call 'erlang':'*'
										  (2, W)
									  in  let <_cor33> =
										  %% Line 601
										  call 'erlang':'+'
										      (EW, _cor32)
									      in  let <_cor31> =
										      %% Line 601
										      call 'erlang':'+'
											  (EH, H)
										  in  do  %% Line 601
											  call 'wxSizer':'setItemMinSize'
											      (InnerSizer, 0, _cor33, _cor31)
											  let <TopSize> =
											      %% Line 602
											      call 'wxSizer':'getMinSize'
												  (TopSizer)
											  in  let <_cor36> =
												  %% Line 604
												  call 'erlang':'*'
												      (40, W)
											      in  let <_cor35> =
												      %% Line 604
												      call 'erlang':'*'
													  (4, H)
												  in  do  %% Line 604
													  call 'wxSizer':'setItemMinSize'
													      (InnerSizer, 0, _cor36, _cor35)
													  do  %% Line 606
													      call 'wxWindow':'setSizerAndFit'
														  (Dialog, TopSizer)
													      do  %% Line 607
														  call 'wxSizer':'setSizeHints'
														      (TopSizer, Dialog)
														  do  %% Line 609
														      call 'wxWindow':'setClientSize'
															  (Dialog, TopSize)
														      %% Line 611
														      case call 'wxDialog':'showModal'
															       (Dialog) of
															%% Line 612
															<5100> when 'true' ->
															    let <Str> =
																%% Line 613
																call 'wxTextCtrl':'getValue'
																    (TextCtrl)
															    in  do  %% Line 614
																    call 'wxDialog':'destroy'
																	(Dialog)
																    let <_cor38> =
																	%% Line 615
																	apply 'ensure_last_is_dot'/1
																	    (Str)
																    in  %% Line 615
																	apply 'parse_string'/1
																	    (_cor38)
															%% Line 616
															<5101> when 'true' ->
															    do  %% Line 617
																call 'wxDialog':'destroy'
																    (Dialog)
																%% Line 618
																'cancel'
															( <_cor39> when 'true' ->
															      primop 'match_fail'
																  ({'case_clause',_cor39})
															  -| ['compiler_generated'] )
														      end
								      ( <_cor30> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor30})
									-| ['compiler_generated'] )
								    end
'parse_string'/1 =
    %% Line 621
    fun (_cor0) ->
	%% Line 622
	try
	    let <_cor4> =
		%% Line 623
		case call 'erl_scan':'string'
			 (_cor0) of
		  %% Line 624
		  <{'ok',Ts,_cor14}> when 'true' ->
		      Ts
		  %% Line 625
		  <{'error',{_X_SLine,SMod,SError},_cor15}> when 'true' ->
		      let <_cor1> =
			  %% Line 626
			  call SMod:'format_error'
			      (SError)
		      in  let <_cor2> =
			      %% Line 626
			      call 'io_lib':'format'
				  ([126|[115]], [_cor1|[]])
			  in  %% Line 626
			      call 'erlang':'throw'
				  (_cor2)
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 628
		case call 'erl_parse':'parse_term'
			 (_cor4) of
		  %% Line 629
		  <{'error',{_X_PLine,PMod,PError}}> when 'true' ->
		      let <_cor6> =
			  %% Line 630
			  call PMod:'format_error'
			      (PError)
		      in  let <_cor7> =
			      %% Line 630
			      call 'io_lib':'format'
				  ([126|[115]], [_cor6|[]])
			  in  %% Line 630
			      call 'erlang':'throw'
				  (_cor7)
		  %% Line 631
		  <Res> when 'true' ->
		      Res
		end
	of <_cor9> ->
	    _cor9
	catch <_cor12,_cor11,_cor10> ->
	    case <_cor12,_cor11,_cor10> of
	      %% Line 634
	      <'throw',ErrStr,_cor16> when 'true' ->
		  %% Line 635
		  {'error',ErrStr}
	      %% Line 636
	      <_cor17,_X_Err,_cor18> when 'true' ->
		  %% Line 637
		  {'error',[[83|[121|[110|[116|[97|[120|[32|[101|[114|[114|[111|[114|[32|[105|[110|[58|[32]]]]]]]]]]]]]]]]]|[_cor0|[]]]}
	    end
'ensure_last_is_dot'/1 =
    %% Line 640
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 641
	      [46]
	  %% Line 642
	  <String> when 'true' ->
	      let <_cor1> =
		  %% Line 643
		  call 'lists':'last'
		      (String)
	      in  %% Line 643
		  case <> of
		    %% Line 644
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       46) ->
			%% Line 645
			String
		    %% Line 646
		    <> when 'true' ->
			%% Line 647
			call 'erlang':'++'
			    (String, [46])
		  end
	end
'create_status_bar'/1 =
    %% Line 652
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 654
	    call 'wxe_util':'get_const'
		('wxRED')
	in  let <Red> =
		%% Line 654
		call 'wxTextAttr':'new'
		    (_cor3)
	    in  let <Dummy> =
		    %% Line 659
		    call 'wxTextCtrl':'new'
			(_cor0, -1, [{'style',32816}])
		in  %% Line 660
		    case call 'wxTextCtrl':'getTextExtent'
			     (Dummy, [87|[65|[82|[78|[73|[78|[71]]]]]]]) of
		      <{X,Y,_cor12,_cor13}> when 'true' ->
			  do  %% Line 661
			      call 'wxTextCtrl':'destroy'
				  (Dummy)
			      let <_cor8> =
				  %% Line 664
				  call 'erlang':'+'
				      (Y, 2)
			      in  let <StatusBar> =
				      %% Line 662
				      call 'wxTextCtrl':'new'
					  (_cor0, -1, %% Line 663
						      [{'style',32816}|%% Line 664
								       [{'size',{X,_cor8}}|[]]])
				  in  do  %% Line 665
					  call 'wxTextCtrl':'setDefaultStyle'
					      (StatusBar, Red)
					  do  %% Line 666
					      call 'wxTextAttr':'destroy'
						  (Red)
					      %% Line 667
					      StatusBar
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
'display_progress_dialog'/2 =
    %% Line 672
    fun (_cor1,_cor0) ->
	let <Caller> =
	    %% Line 673
	    call 'erlang':'self'
		()
	in  let <Env> =
		%% Line 674
		call 'wx':'get_env'
		    ()
	    in  let <_cor4> =
		    %% Line 675
		    ( fun () ->
			  %% Line 676
			  apply 'progress_handler'/4
			      (Caller, Env, _cor1, _cor0)
		      -| [{'id',{0,0,'-display_progress_dialog/2-fun-0-'}}] )
		in  do  %% Line 675
			call 'erlang':'spawn_link'
			    (_cor4)
			%% Line 678
			'ok'
'wait_for_progress'/0 =
    %% Line 680
    fun () ->
	%% Line 681
	receive
	  %% Line 682
	  <'continue'> when 'true' ->
	      %% Line 683
	      'ok'
	  %% Line 684
	  <Error> when 'true' ->
	      %% Line 685
	      Error
	after 'infinity' ->
	  'true'
'destroy_progress_dialog'/0 =
    %% Line 688
    fun () ->
	%% Line 689
	apply 'report_progress'/1
	    ('finish')
'report_progress'/1 =
    %% Line 691
    fun (_cor0) ->
	%% Line 692
	case call 'erlang':'whereis'
		 ('cdv_progress_handler') of
	  %% Line 693
	  <Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      do  %% Line 694
		  call 'erlang':'!'
		      (Pid, {'progress',_cor0})
		  %% Line 695
		  'ok'
	  %% Line 696
	  <_cor3> when 'true' ->
	      %% Line 697
	      'ok'
	end
'progress_handler'/4 =
    %% Line 700
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 701
	    call 'erlang':'self'
		()
	in  do  %% Line 701
		call 'erlang':'register'
		    ('cdv_progress_handler', _cor4)
		do  %% Line 702
		    call 'wx':'set_env'
			(_cor2)
		    let <PD> =
			%% Line 703
			apply 'progress_dialog'/3
			    (_cor2, _cor1, _cor0)
		    in  %% Line 704
			try
			    apply 'progress_loop'/3
				(_cor1, PD, _cor3)
			of <_cor6> ->
			    _cor6
			catch <_cor9,_cor8,_cor7> ->
			    case <_cor9,_cor8,_cor7> of
			      %% Line 705
			      <'throw','closed',_cor14> when 'true' ->
				  'normal'
			      ( <_cor9,_cor8,_cor7> when 'true' ->
				    primop 'raise'
					(_cor7, _cor8)
				-| ['compiler_generated'] )
			    end
'progress_loop'/3 =
    %% Line 707
    fun (_cor2,_cor1,_cor0) ->
	%% Line 708
	receive
	  %% Line 709
	  <{'progress',{'ok','done'}}> when 'true' ->
	      do  %% Line 710
		  call 'erlang':'!'
		      (_cor0, 'continue')
		  %% Line 711
		  apply 'progress_loop'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 712
	  <{'progress',{'ok',Percent}}>
	      when call 'erlang':'is_integer'
		    (Percent) ->
	      do  %% Line 713
		  apply 'update_progress'/2
		      (_cor1, Percent)
		  %% Line 714
		  apply 'progress_loop'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 715
	  <{'progress',{'ok',Msg}}> when 'true' ->
	      do  %% Line 716
		  apply 'update_progress_text'/2
		      (_cor1, Msg)
		  %% Line 717
		  apply 'progress_loop'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 718
	  <{'progress',{'error',Reason}}> when 'true' ->
	      do  %% Line 719
		  apply 'finish_progress'/1
		      (_cor1)
		  let <_cor3> =
		      %% Line 721
		      case <> of
			<>
			    when call 'erlang':'is_list'
				  (Reason) ->
			    Reason
			%% Line 722
			<> when 'true' ->
			    call 'file':'format_error'
				(Reason)
		      end
		  in  do  %% Line 724
			  apply 'display_info_dialog'/2
			      ([67|[114|[97|[115|[104|[100|[117|[109|[112|[32|[86|[105|[101|[119|[101|[114|[32|[69|[114|[114|[111|[114]]]]]]]]]]]]]]]]]]]]]], _cor3)
			  do  %% Line 725
			      call 'erlang':'!'
				  (_cor0, 'error')
			      do  %% Line 726
				  call 'erlang':'unregister'
				      ('cdv_progress_handler')
				  %% Line 727
				  call 'erlang':'unlink'
				      (_cor0)
	  %% Line 728
	  <{'progress','finish'}> when 'true' ->
	      do  %% Line 729
		  apply 'finish_progress'/1
		      (_cor1)
		  do  %% Line 730
		      call 'erlang':'unregister'
			  ('cdv_progress_handler')
		      %% Line 731
		      call 'erlang':'unlink'
			  (_cor0)
	after 'infinity' ->
	  'true'
'progress_dialog'/3 =
    %% Line 734
    fun (_cor2,_cor1,_cor0) ->
	let <PD> =
	    %% Line 735
	    call 'wxProgressDialog':'new'
		(_cor1, _cor0, %% Line 736
			       [{'maximum',101}|[{'style',38}]])
	in  do  %% Line 741
		call 'wxProgressDialog':'setMinSize'
		    (PD, {200,-1})
		%% Line 742
		PD
'update_progress'/2 =
    %% Line 744
    fun (_cor1,_cor0) ->
	%% Line 745
	try
	    call 'wxProgressDialog':'update'
		(_cor1, _cor0)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    %% Line 746
	    call 'erlang':'throw'
		('closed')
'update_progress_text'/2 =
    %% Line 748
    fun (_cor1,_cor0) ->
	%% Line 749
	try
	    call 'wxProgressDialog':'update'
		(_cor1, 0, [{'newmsg',_cor0}|[]])
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    %% Line 750
	    call 'erlang':'throw'
		('closed')
'finish_progress'/1 =
    %% Line 752
    fun (_cor0) ->
	%% Line 753
	call 'wxProgressDialog':'destroy'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('observer_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('observer_lib', _cor0)
end