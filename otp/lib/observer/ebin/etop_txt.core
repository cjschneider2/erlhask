module 'etop_txt' ['do_update'/3,
		   'init'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'stop'/1]
    attributes [%% Line 20
		'author' =
		    %% Line 20
		    ['siri@erix.ericsson.se']]
'stop'/1 =
    %% Line 33
    fun (_cor0) ->
	call 'erlang':'!'
	    (_cor0, 'stop')
'init'/1 =
    %% Line 35
    fun (_cor0) ->
	%% Line 36
	apply 'loop'/1
	    (_cor0)
'loop'/1 =
    %% Line 38
    fun (_cor0) ->
	let <Info> =
	    %% Line 39
	    apply 'do_update'/1
		(_cor0)
	in  %% Line 44
	    ( case _cor0 of
		( <( {'opts',_cor5,_cor6,_cor7,_rec0,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}
		     -| ['compiler_generated'] )> when 'true' ->
		      receive
			<'stop'> when 'true' ->
			    'stopped'
			<{'dump',Fd}> when 'true' ->
			    do  apply 'do_update'/3
				    (Fd, Info, _cor0)
				apply 'loop'/1
				    (_cor0)
			<{'config',_cor22,Config1}> when 'true' ->
			    apply 'loop'/1
				(Config1)
		      after _rec0 ->
			apply 'loop'/1
			    (_cor0)
		  -| ['compiler_generated'] )
		( <_cor21> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'do_update'/1 =
    %% Line 47
    fun (_cor0) ->
	let <Info> =
	    %% Line 48
	    call 'etop':'update'
		(_cor0)
	in  %% Line 49
	    apply 'do_update'/3
		('standard_io', Info, _cor0)
'do_update'/3 =
    %% Line 51
    fun (_cor2,_cor1,_cor0) ->
	%% Line 52
	case call 'etop':'loadinfo'
		 (_cor1) of
	  <{Cpu,NProcs,RQ,Clock}> when 'true' ->
	      do  %% Line 53
		  call 'io':'nl'
		      (_cor2)
		  do  %% Line 54
		      apply 'writedoubleline'/1
			  (_cor2)
		      %% Line 55
		      ( case _cor1 of
			  ( <( {'etop_info',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_rec1,_cor23}
			       -| ['compiler_generated'] )> when 'true' ->
				do  case _rec1 of
				      %% Line 56
				      <'undefined'> when 'true' ->
					  %% Line 61
					  ( case _cor0 of
					      ( <( {'opts',_rec2,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}
						   -| ['compiler_generated'] )> when 'true' ->
						    call 'io':'fwrite'
							(_cor2, [32|[126|[45|[55|[50|[119|[126|[49|[48|[115|[126|[110|[32|[76|[111|[97|[100|[58|[32|[32|[99|[112|[117|[32|[32|[126|[56|[119|[126|[110|[32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[111|[99|[115|[126|[56|[119|[126|[110|[32|[32|[32|[32|[32|[32|[32|[32|[114|[117|[110|[113|[32|[126|[56|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec2|[Clock|%% Line 62
																																																						       [Cpu|[NProcs|[RQ|[]]]]]])
						-| ['compiler_generated'] )
					      ( <_cor41> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','opts'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      %% Line 63
				      <Memi> when 'true' ->
					  %% Line 64
					  case %% Line 65
					       call 'etop':'meminfo'
						   (Memi, ['total'|['processes'|['atom'|['binary'|['code'|['ets']]]]]]) of
					    <[Tot|[Procs|[Atom|[Bin|[Code|[Ets|[]]]]]]]> when 'true' ->
						%% Line 67
						( case _cor0 of
						    ( <( {'opts',_rec3,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57}
							 -| ['compiler_generated'] )> when 'true' ->
							  call 'io':'fwrite'
							      (_cor2, [32|[126|[45|[55|[50|[119|[126|[49|[48|[115|[126|[110|[32|[76|[111|[97|[100|[58|[32|[32|[99|[112|[117|[32|[32|[126|[56|[119|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[77|[101|[109|[111|[114|[121|[58|[32|[32|[116|[111|[116|[97|[108|[32|[32|[32|[32|[126|[56|[119|[32|[32|[32|[32|[98|[105|[110|[97|[114|[121|[32|[32|[32|[126|[56|[119|[126|[110|[32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[111|[99|[115|[126|[56|[119|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[126|[56|[119|[32|[32|[32|[32|[99|[111|[100|[101|[32|[32|[32|[32|[32|[126|[56|[119|[126|[110|[32|[32|[32|[32|[32|[32|[32|[32|[114|[117|[110|[113|[32|[126|[56|[119|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[97|[116|[111|[109|[32|[32|[32|[32|[32|[126|[56|[119|[32|[32|[32|[32|[101|[116|[115|[32|[32|[32|[32|[32|[32|[126|[56|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec3|[Clock|%% Line 68
																																																																																																																																																														   [Cpu|[Tot|[Bin|%% Line 69
																																																																																																																																																																  [NProcs|[Procs|[Code|%% Line 70
																																																																																																																																																																		       [RQ|[Atom|[Ets|[]]]]]]]]]]]])
						      -| ['compiler_generated'] )
						    ( <_cor58> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','opts'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor8})
					      -| ['compiler_generated'] )
					  end
				    end
				    do  %% Line 72
					call 'io':'nl'
					    (_cor2)
					do  %% Line 73
					    apply 'writepinfo_header'/1
						(_cor2)
					    do  %% Line 74
						apply 'writesingleline'/1
						    (_cor2)
						do  %% Line 75
						    apply 'writepinfo'/2
							(_cor2, _cor23)
						    do  %% Line 76
							apply 'writedoubleline'/1
							    (_cor2)
							do  %% Line 77
							    call 'io':'nl'
								(_cor2)
							    _cor1
			    -| ['compiler_generated'] )
			  ( <_cor24> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','etop_info'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'writepinfo_header'/1 =
    %% Line 80
    fun (_cor0) ->
	%% Line 81
	call 'io':'fwrite'
	    (_cor0, [80|[105|[100|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[78|[97|[109|[101|[32|[111|[114|[32|[73|[110|[105|[116|[105|[97|[108|[32|[70|[117|[110|[99|[32|[32|[32|[32|[84|[105|[109|[101|[32|[32|[32|[32|[82|[101|[100|[115|[32|[32|[77|[101|[109|[111|[114|[121|[32|[32|[32|[32|[77|[115|[103|[81|[32|[67|[117|[114|[114|[101|[110|[116|[32|[70|[117|[110|[99|[116|[105|[111|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
'writesingleline'/1 =
    %% Line 83
    fun (_cor0) ->
	%% Line 84
	call 'io':'fwrite'
	    (_cor0, [45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
'writedoubleline'/1 =
    %% Line 85
    fun (_cor0) ->
	%% Line 86
	call 'io':'fwrite'
	    (_cor0, [61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
'writepinfo'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fd,[{'etop_proc_info',Pid,%% Line 89
				     Mem,%% Line 90
					 Reds,%% Line 91
					      Name,%% Line 92
						   Time,%% Line 93
							MFA,%% Line 94
							    MQ}|%% Line 95
								T]> when 'true' ->
	      let <_cor2> =
		  %% Line 96
		  apply 'to_list'/1
		      (Name)
	      in  let <_cor3> =
		      %% Line 96
		      apply 'formatmfa'/1
			  (MFA)
		  in  do  %% Line 96
			  call 'io':'fwrite'
			      (Fd, [126|[45|[49|[53|[119|[126|[45|[50|[48|[115|[126|[56|[119|[126|[56|[119|[126|[56|[119|[126|[56|[119|[32|[126|[45|[50|[48|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Pid|[_cor2|[Time|[Reds|[Mem|[MQ|[_cor3|[]]]]]]]])
			  %% Line 97
			  apply 'writepinfo'/2
			      (Fd, T)
	  %% Line 98
	  <_X_Fd,[]> when 'true' ->
	      %% Line 99
	      'ok'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'writepinfo',2}}] )
	    -| ['compiler_generated'] )
	end
'formatmfa'/1 =
    %% Line 102
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,A}> when 'true' ->
	      %% Line 103
	      call 'io_lib':'format'
		  ([126|[119|[58|[126|[119|[47|[126|[119]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 104
	  <Other> when 'true' ->
	      %% Line 107
	      call 'io_lib':'format'
		  ([126|[119]], [Other|[]])
	end
'to_list'/1 =
    %% Line 109
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (Name)
	  %% Line 110
	  <MFA = {_X_M,_X_F,_X_A}> when 'true' ->
	      apply 'formatmfa'/1
		  (MFA)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('etop_txt')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('etop_txt', _cor0)
end