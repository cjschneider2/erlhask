module 'xref_compiler' ['compile'/2,
			'format_error'/1,
			'module_info'/0,
			'module_info'/1,
			'update_graph_counter'/3]
    attributes []
'compile'/2 =
    %% Line 56
    fun (_cor1,_cor0) ->
	%% Line 57
	case call 'xref_scanner':'scan'
		 (_cor1) of
	  %% Line 58
	  <{'ok',Tokens}> when 'true' ->
	      %% Line 59
	      case call 'xref_parser':'parse'
		       (Tokens) of
		%% Line 60
		<{'ok',ParseTree}> when 'true' ->
		    let <_cor2> =
			catch
			    %% Line 62
			    apply 'statements'/2
				(ParseTree, _cor0)
		    in  %% Line 62
			case _cor2 of
			  %% Line 63
			  <E = {'error',_cor10,_cor11}> when 'true' ->
			      %% Line 64
			      E
			  %% Line 65
			  <{'ok',UV,P}> when 'true' ->
			      let <Table1> =
				  %% Line 67
				  apply 'user_vars'/2
				      (UV, _cor0)
			      in  %% Line 69
				  apply 'i'/2
				      (P, Table1)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		%% Line 74
		<{'error',{Line,_X_Module,Error}}> when 'true' ->
		    %% Line 75
		    apply 'error'/1
			({'parse_error',Line,Error})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 77
	  <{'error',Info,Line}> when 'true' ->
	      %% Line 78
	      apply 'error'/1
		  ({'parse_error',Line,Info})
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 81
    fun (_cor0) ->
	case _cor0 of
	  <{'error',Module,Error}> when 'true' ->
	      %% Line 82
	      call Module:'format_error'
		  (Error)
	  %% Line 83
	  <{'parse_error',Line,Error}> when 'true' ->
	      let <_cor1> =
		  %% Line 84
		  apply 'format_line'/1
		      (Line)
	      in  %% Line 84
		  apply 'format_parse_error'/2
		      (Error, _cor1)
	  %% Line 85
	  <{'variable_reassigned',Expr}> when 'true' ->
	      %% Line 86
	      call 'io_lib':'format'
		  ([86|[97|[114|[105|[97|[98|[108|[101|[32|[97|[115|[115|[105|[103|[110|[101|[100|[32|[109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[99|[101|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Expr|[]])
	  %% Line 87
	  <{'unknown_variable',Name}> when 'true' ->
	      %% Line 88
	      call 'io_lib':'format'
		  ([86|[97|[114|[105|[97|[98|[108|[101|[32|[126|[116|[112|[32|[117|[115|[101|[100|[32|[98|[101|[102|[111|[114|[101|[32|[115|[101|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 89
	  <{'type_error',Expr}> when 'true' ->
	      %% Line 90
	      call 'io_lib':'format'
		  ([79|[112|[101|[114|[97|[116|[111|[114|[32|[97|[112|[112|[108|[105|[101|[100|[32|[116|[111|[32|[97|[114|[103|[117|[109|[101|[110|[116|[40|[115|[41|[32|[111|[102|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[111|[114|[32|[105|[110|[118|[97|[108|[105|[100|[32|[116|[121|[112|[101|[40|[115|[41|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 91
																																																				     [Expr|[]])
	  %% Line 92
	  <{'type_mismatch',Expr1,Expr2}> when 'true' ->
	      %% Line 93
	      call 'io_lib':'format'
		  ([67|[111|[110|[115|[116|[97|[110|[116|[115|[32|[111|[102|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[116|[121|[112|[101|[115|[58|[32|[126|[116|[115|[44|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 94
																															   [Expr1|[Expr2|[]]])
	  %% Line 95
	  <{'unknown_constant',Constant}> when 'true' ->
	      %% Line 96
	      call 'io_lib':'format'
		  ([85|[110|[107|[110|[111|[119|[110|[32|[99|[111|[110|[115|[116|[97|[110|[116|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]], [Constant|[]])
	  %% Line 97
	  <E> when 'true' ->
	      %% Line 98
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'user_vars'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{'user',Name},Val}|UV],Table> when 'true' ->
	      let <_cor2> =
		  %% Line 105
		  call 'dict':'store'
		      (Name, Val, Table)
	      in  %% Line 105
		  apply 'user_vars'/2
		      (UV, _cor2)
	  %% Line 106
	  <[_X_V|UV],Table> when 'true' ->
	      %% Line 107
	      apply 'user_vars'/2
		  (UV, Table)
	  %% Line 108
	  <[],Table> when 'true' ->
	      %% Line 109
	      Table
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'user_vars',2}}] )
	    -| ['compiler_generated'] )
	end
'statements'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	%% Line 112
	apply 'statements'/4
	    (_cor1, _cor0, [], [])
'statements'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Stmt = {'assign',VarType,Name,E}|Stmts0],Table,L,UV> when 'true' ->
	      %% Line 115
	      case call 'dict':'find'
		       (Name, Table) of
		%% Line 116
		<{'ok',_cor27}> when 'true' ->
		    let <_cor4> =
			%% Line 117
			call 'xref_parser':'t2s'
			    (Stmt)
		    in  %% Line 117
			apply 'throw_error'/1
			    ({'variable_reassigned',_cor4})
		%% Line 118
		<'error'> when 'true' ->
		    %% Line 119
		    case apply 't_expr'/2
			     (E, Table) of
		      <{Type,OType,NewE}> when 'true' ->
			  let <Val> =
			      %% Line 120
			      {'xref_var',Name,'undefined',VarType,%% Line 121
								   OType,%% Line 121
									 Type}
			  in  let <NewTable> =
				  %% Line 122
				  call 'dict':'store'
				      (Name, Val, Table)
			      in  let <_cor8> =
				      %% Line 123
				      case <> of
					<>
					    when call 'erlang':'=:='
						  (Stmts0,
						   []) ->
					    [{'variable',Name}|[]]
					<> when 'true' ->
					    Stmts0
				      end
				  in  let <Variable> = {%% Line 124
					   VarType,%% Line 124
						   Name}
				      in  let <Put> = {%% Line 125
					       'put',%% Line 125
						     Variable,%% Line 125
							      NewE}
					  in  %% Line 126
					      apply 'statements'/4
						  (_cor8, NewTable, [Put|L], [{Variable,Val}|UV])
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 128
	  <[Expr|[]],Table,L,UV> when 'true' ->
	      %% Line 129
	      case apply 't_expr'/2
		       (Expr, Table) of
		<{Type,OType,NewE}> when 'true' ->
		    let <E1> =
			%% Line 130
			apply 'un_familiarize'/3
			    (Type, OType, NewE)
		    in  let <_cor20> =
			    %% Line 131
			    case <Type,OType> of
			      %% Line 133
			      <{'line',_cor28},'edge'> when 'true' ->
				  %% Line 134
				  {'relation_to_family',E1}
			      %% Line 135
			      <_X_Type,'edge_closure'> when 'true' ->
				  let <E2> = {%% Line 137
				       ( 'graph_access'/2
					 -| [{'id',{0,0,'-statements/4-fun-0-'}}] ),%% Line 137
										    E1,%% Line 137
										       E1}
				  in  let <_cor18> =
					  %% Line 138
					  ( fun (_cor16) ->
						'closure()'
					    -| [{'id',{0,0,'-statements/4-fun-1-'}}] )
				      in  %% Line 138
					  {_cor18,E2}
			      %% Line 139
			      <_fol4,_fol5> when 'true' ->
				  E1
			    end
			in  let <_cor22> =
				%% Line 141
				apply 'stats'/2
				    (L, _cor20)
			    in  %% Line 141
				{'ok',UV,_cor22}
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'statements',4}}] )
	    -| ['compiler_generated'] )
	end
'stats'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'put',V,X}|Ss],E> when 'true' ->
	      %% Line 144
	      apply 'stats'/2
		  (Ss, {'put',V,X,E})
	  %% Line 145
	  <[],E> when 'true' ->
	      %% Line 146
	      E
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'stats',2}}] )
	    -| ['compiler_generated'] )
	end
't_expr'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	%% Line 149
	case apply 'check_expr'/2
		 (_cor1, _cor0) of
	  <{'expr',Type,OType,E1}> when 'true' ->
	      let <E2> =
		  %% Line 151
		  apply 'convert'/1
		      (E1)
	      in  %% Line 153
		  {Type,OType,E2}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'check_expr'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'list',L},Table> when 'true' ->
	      %% Line 178
	      apply 'check_constants'/2
		  (L, Table)
	  %% Line 179
	  <{'tuple',L},Table> when 'true' ->
	      %% Line 180
	      case apply 'check_constants'/2
		       (L, Table) of
		<{'expr',Type,'vertex',_X_Consts}> when 'true' ->
		    let <_cor3> =
			%% Line 181
			apply 'constant_vertices'/2
			    (L, [])
		    in  let <Cs> =
			    %% Line 181
			    call 'lists':'reverse'
				(_cor3)
			in  %% Line 182
			    {'expr',Type,'path',{'constants',Cs}}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 183
	  <{'variable',Name},Table> when 'true' ->
	      %% Line 184
	      case call 'dict':'find'
		       (Name, Table) of
		%% Line 185
		<{'ok',{'xref_var',_cor88,_cor89,VarType,OType,Type}}> when 'true' ->
		    let <V0> = {%% Line 186
			 'variable',%% Line 186
				    {VarType,Name}}
		    in  let <_cor7> =
			    %% Line 187
			    case <VarType,Type,OType> of
			      %% Line 188
			      <'predef','release',_cor90> when 'true' ->
				  V0
			      %% Line 189
			      <'predef','application',_cor91> when 'true' ->
				  V0
			      %% Line 190
			      <'predef','module',_cor92> when 'true' ->
				  V0
			      %% Line 191
			      <'predef','function','vertex'> when 'true' ->
				  V0
			      %% Line 192
			      <'predef','function','edge'> when 'true' ->
				  {'call','union_of_family',V0}
			      %% Line 193
			      <_fol11,_fol12,_fol13> when 'true' ->
				  V0
			    end
			in  %% Line 195
			    {'expr',Type,OType,_cor7}
		%% Line 196
		<'error'> when 'true' ->
		    %% Line 197
		    apply 'throw_error'/1
			({'unknown_variable',Name})
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 199
	  <{'type',{'type',_X_Type},E},Table> when 'true' ->
	      %% Line 200
	      apply 'check_expr'/2
		  (E, Table)
	  %% Line 201
	  <Expr = {'type',{'convert',NewType0},E},Table> when 'true' ->
	      let <NewType> =
		  %% Line 202
		  apply 'what_type'/1
		      (NewType0)
	      in  %% Line 203
		  case apply 'check_expr'/2
			   (E, Table) of
		    <{'expr',OldType,OType,NE}> when 'true' ->
			%% Line 204
			case apply 'check_conversion'/4
				 (OType, OldType, NewType, Expr) of
			  <'ok'> when 'true' ->
			      %% Line 205
			      {'expr',NewType,OType,{'convert',OType,OldType,NewType,NE}}
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		      -| ['compiler_generated'] )
		  end
	  %% Line 206
	  <Expr = {'set',SOp,E},Table> when 'true' ->
	      %% Line 207
	      case apply 'check_expr'/2
		       (E, Table) of
		<{'expr',Type,OType0,E1}> when 'true' ->
		    let <_cor16> =
			%% Line 208
			case <OType0,SOp> of
			  %% Line 209
			  <'edge','range'> when 'true' ->
			      'vertex'
			  %% Line 210
			  <'edge','domain'> when 'true' ->
			      'vertex'
			  %% Line 211
			  <'edge','weak'> when 'true' ->
			      'edge'
			  %% Line 212
			  <'edge','strict'> when 'true' ->
			      'edge'
			  %% Line 213
			  <'edge_set','range'> when 'true' ->
			      'vertex_set'
			  %% Line 214
			  <'edge_set','domain'> when 'true' ->
			      'vertex_set'
			  %% Line 215
			  <'edge_set','weak'> when 'true' ->
			      'edge_set'
			  %% Line 216
			  <'edge_set','strict'> when 'true' ->
			      'edge_set'
			  %% Line 217
			  <_fol17,_fol18> when 'true' ->
			      let <_cor14> =
				  %% Line 218
				  call 'xref_parser':'t2s'
				      (Expr)
			      in  %% Line 218
				  apply 'throw_error'/1
				      ({'type_error',_cor14})
			end
		    in  let <Op> =
			    %% Line 220
			    apply 'set_op'/1
				(SOp)
			in  let <NE> =
				%% Line 221
				apply 'function_vertices_to_family'/3
				    (Type, _cor16, {'call',Op,E1})
			    in  %% Line 222
				{'expr',Type,_cor16,NE}
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 223
	  <Expr = {'graph',Op,E},Table> when 'true' ->
	      %% Line 224
	      case apply 'check_expr'/2
		       (E, Table) of
		<{'expr',Type,NOType,E1}> when 'true' ->
		    do  %% Line 225
			case Type of
			  %% Line 226
			  <{'line',_X_LineType}> when 'true' ->
			      let <_cor21> =
				  %% Line 227
				  call 'xref_parser':'t2s'
				      (Expr)
			      in  %% Line 227
				  apply 'throw_error'/1
				      ({'type_error',_cor21})
			  %% Line 228
			  <_X_Else> when 'true' ->
			      'ok'
			end
			let <_cor25> =
			    %% Line 232
			    case <NOType,Op> of
			      %% Line 233
			      <'edge','components'> when 'true' ->
				  'vertex_set'
			      %% Line 234
			      <'edge','condensation'> when 'true' ->
				  'edge_set'
			      %% Line 235
			      <'edge','closure'> when 'true' ->
				  'edge_closure'
			      %% Line 236
			      <'edge_closure','components'> when 'true' ->
				  'vertex_set'
			      %% Line 237
			      <'edge_closure','condensation'> when 'true' ->
				  'edge_set'
			      %% Line 238
			      <'edge_closure','closure'> when 'true' ->
				  'edge_closure'
			      %% Line 242
			      <_fol21,_fol22> when 'true' ->
				  let <_cor23> =
				      %% Line 243
				      call 'xref_parser':'t2s'
					  (Expr)
				  in  %% Line 243
				      apply 'throw_error'/1
					  ({'type_error',_cor23})
			    end
			in  let <E2> =
				%% Line 245
				{'convert',NOType,'edge_closure',E1}
			    in  let <_cor29> =
				    %% Line 246
				    case Op of
				      %% Line 247
				      <'closure'> when 'true' ->
					  E2
				      %% Line 248
				      <_X_Op> when 'true' ->
					  apply 'use_of_closure'/2
					      (Op, E2)
				    end
				in  %% Line 250
				    {'expr',Type,_cor25,_cor29}
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 251
	  <Expr = {'numeric','#',E},Table> when 'true' ->
	      %% Line 252
	      case apply 'check_expr'/2
		       (E, Table) of
		<{'expr',Type,OType,E1}> when 'true' ->
		    do  %% Line 253
			case OType of
			  %% Line 254
			  <'vertex'> when 'true' ->
			      'ok'
			  %% Line 255
			  <'vertex_set'> when 'true' ->
			      'ok'
			  %% Line 256
			  <'edge'> when 'true' ->
			      'ok'
			  %% Line 257
			  <'edge_set'> when 'true' ->
			      'ok'
			  %% Line 258
			  <_X_Else> when 'true' ->
			      let <_cor32> =
				  call 'xref_parser':'t2s'
				      (Expr)
			      in  apply 'throw_error'/1
				      ({'type_error',_cor32})
			end
			let <NE> =
			    %% Line 260
			    {'convert',OType,Type,'number',E1}
			in  %% Line 261
			    {'expr','number','number',{'call','no_elements',NE}}
		( <_cor31> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor31})
		  -| ['compiler_generated'] )
	      end
	  %% Line 262
	  <Expr = {'set',SOp,E1,E2},Table> when 'true' ->
	      %% Line 264
	      case apply 'check_expr'/2
		       (E1, Table) of
		<{'expr',Type1,OType1,NE1}> when 'true' ->
		    %% Line 265
		    case apply 'check_expr'/2
			     (E2, Table) of
		      <{'expr',Type2,OType2,NE2}> when 'true' ->
			  let <_cor39> =
			      %% Line 266
			      case <OType1,OType2> of
				%% Line 267
				<'vertex','vertex'> when 'true' ->
				    'vertex'
				%% Line 268
				<'edge','edge'> when 'true' ->
				    'edge'
				%% Line 269
				<'number','number'> when 'true' ->
				    'number'
				%% Line 270
				<_fol25,_fol26> when 'true' ->
				    let <_cor37> =
					call 'xref_parser':'t2s'
					    (Expr)
				    in  apply 'throw_error'/1
					    ({'type_error',_cor37})
			      end
			  in  %% Line 272
			      case _cor39 of
				%% Line 273
				<'number'> when 'true' ->
				    let <_cor41> =
					%% Line 274
					apply 'ari_op'/1
					    (SOp)
				    in  %% Line 274
					{'expr','number','number',{'call',_cor41,NE1,NE2}}
				%% Line 275
				<_X_Else> when 'true' ->
				    let <_cor43> =
					%% Line 277
					apply 'type_ord'/1
					    (Type1)
				    in  let <_cor42> =
					    %% Line 277
					    apply 'type_ord'/1
						(Type2)
					in  let <_cor48> =
						%% Line 277
						case <_cor43,_cor42> of
						  %% Line 278
						  <T1,T2>
						      when call 'erlang':'=:='
							    (T1,
							     T2) ->
						      %% Line 282
						      {Type1,NE1,NE2}
						  %% Line 283
						  <T1,T2>
						      when let <_cor44> =
							    call 'erlang':'<'
								(T1, 2)
							in  let <_cor45> =
								call 'erlang':'<'
								    (T2, 2)
							    in  call 'erlang':'or'
								    (_cor44, _cor45) ->
						      let <_cor46> =
							  %% Line 284
							  call 'xref_parser':'t2s'
							      (Expr)
						      in  %% Line 284
							  apply 'throw_error'/1
							      ({'type_error',_cor46})
						  %% Line 285
						  <T1,T2>
						      when call 'erlang':'>'
							    (T1,
							     T2) ->
						      %% Line 286
						      {Type2,{'convert',_cor39,Type1,Type2,NE1},NE2}
						  %% Line 287
						  <T1,T2>
						      when call 'erlang':'<'
							    (T1,
							     T2) ->
						      %% Line 288
						      {Type1,NE1,{'convert',_cor39,Type2,Type1,NE2}}
						  ( <_fol29,_fol30> when 'true' ->
							let <_cor47> = {_fol29,_fol30}
							in  primop 'match_fail'
								({'case_clause',_cor47})
						    -| ['compiler_generated'] )
						end
					    in  %% Line 276
						case _cor48 of
						  <{Type,NewE1,NewE2}> when 'true' ->
						      let <Op> =
							  %% Line 290
							  apply 'set_op'/3
							      (SOp, Type, _cor39)
						      in  %% Line 291
							  {'expr',Type,_cor39,{'call',Op,NewE1,NewE2}}
						  ( <_cor49> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor49})
						    -| ['compiler_generated'] )
						end
			      end
		      ( <_cor36> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor36})
			-| ['compiler_generated'] )
		    end
		( <_cor35> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor35})
		  -| ['compiler_generated'] )
	      end
	  %% Line 293
	  <Expr = {'restr',ROp,E1,E2},Table> when 'true' ->
	      %% Line 294
	      case apply 'check_expr'/2
		       (E1, Table) of
		<{'expr',Type1,OType1,NE1}> when 'true' ->
		    %% Line 295
		    case apply 'check_expr'/2
			     (E2, Table) of
		      <{'expr',Type2,OType2,NE2}> when 'true' ->
			  do  %% Line 296
			      case <Type1,Type2> of
				%% Line 297
				<{'line',_X_LineType1},_X_Type2> when 'true' ->
				    let <_cor54> =
					%% Line 298
					call 'xref_parser':'t2s'
					    (Expr)
				    in  %% Line 298
					apply 'throw_error'/1
					    ({'type_error',_cor54})
				%% Line 299
				<_X_Type1,{'line',_X_LineType2}> when 'true' ->
				    let <_cor55> =
					%% Line 300
					call 'xref_parser':'t2s'
					    (Expr)
				    in  %% Line 300
					apply 'throw_error'/1
					    ({'type_error',_cor55})
				%% Line 301
				<_fol35,_fol36> when 'true' ->
				    'ok'
			      end
			      %% Line 304
			      case <OType1,OType2> of
				%% Line 305
				<'edge','vertex'>
				    when call 'erlang':'=:='
					  (ROp,
					   '|||') ->
				    %% Line 306
				    case apply 'restriction'/6
					     ('|', E1, Type1, NE1, Type2, NE2) of
				      <{'expr',_cor97,_cor98,R1}> when 'true' ->
					  %% Line 307
					  case apply 'restriction'/6
						   ('||', E1, Type1, NE1, Type2, NE2) of
					    <{'expr',_cor99,_cor100,R2}> when 'true' ->
						%% Line 308
						{'expr',Type1,'edge',{'call','intersection',R1,R2}}
					    ( <_cor58> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor58})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor57> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor57})
					-| ['compiler_generated'] )
				    end
				%% Line 309
				<'edge','vertex'> when 'true' ->
				    %% Line 310
				    apply 'restriction'/6
					(ROp, E1, Type1, NE1, Type2, NE2)
				%% Line 311
				<'edge_closure','vertex'>
				    when call 'erlang':'=:='
					  (ROp,
					   '|||') ->
				    %% Line 312
				    case %% Line 313
					 apply 'closure_restriction'/6
					     ('|', Type1, Type2, OType2, NE1, NE2) of
				      <{'expr',_cor101,_cor102,R1}> when 'true' ->
					  %% Line 314
					  case %% Line 315
					       apply 'closure_restriction'/6
						   ('||', Type1, Type2, OType2, NE1, NE2) of
					    <{'expr',_cor103,_cor104,R2}> when 'true' ->
						%% Line 316
						{'expr',Type1,'edge',{'call','intersection',R1,R2}}
					    ( <_cor60> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor60})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor59> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor59})
					-| ['compiler_generated'] )
				    end
				%% Line 317
				<'edge_closure','vertex'> when 'true' ->
				    %% Line 318
				    apply 'closure_restriction'/6
					(ROp, Type1, Type2, OType2, NE1, NE2)
				%% Line 319
				<_fol31,_fol32> when 'true' ->
				    let <_cor61> =
					%% Line 320
					call 'xref_parser':'t2s'
					    (Expr)
				    in  %% Line 320
					apply 'throw_error'/1
					    ({'type_error',_cor61})
			      end
		      ( <_cor53> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor53})
			-| ['compiler_generated'] )
		    end
		( <_cor52> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor52})
		  -| ['compiler_generated'] )
	      end
	  %% Line 322
	  <Expr = {'path',E1,E2},Table> when 'true' ->
	      %% Line 323
	      case apply 'check_expr'/2
		       (E1, Table) of
		<{'expr',Type1,OType1a,E1a}> when 'true' ->
		    %% Line 324
		    case apply 'check_expr'/2
			     (E2, Table) of
		      <{'expr',Type2,OType2,E2a}> when 'true' ->
			  do  %% Line 325
			      case <Type1,Type2> of
				%% Line 326
				<{'line',_X_LineType1},_X_Type2> when 'true' ->
				    let <_cor65> =
					%% Line 327
					call 'xref_parser':'t2s'
					    (Expr)
				    in  %% Line 327
					apply 'throw_error'/1
					    ({'type_error',_cor65})
				%% Line 328
				<_X_Type1,{'line',_X_LineType2}> when 'true' ->
				    let <_cor66> =
					%% Line 329
					call 'xref_parser':'t2s'
					    (Expr)
				    in  %% Line 329
					apply 'throw_error'/1
					    ({'type_error',_cor66})
				%% Line 330
				<_fol43,_fol44> when 'true' ->
				    'ok'
			      end
			      let <E2b> =
				  %% Line 333
				  {'convert',OType2,Type2,Type1,E2a}
			      in  %% Line 334
				  case apply 'path_arg'/2
					   (OType1a, E1a) of
				    <{OType1,NE1}> when 'true' ->
					let <_cor72> =
					    %% Line 335
					    case <OType1,OType2> of
					      %% Line 336
					      <'path','edge'> when 'true' ->
						  {'convert',OType2,'edge_closure',E2b}
					      %% Line 337
					      <'path','edge_closure'>
						  when call 'erlang':'=:='
							(Type1,
							 Type2) ->
						  E2b
					      %% Line 338
					      <_fol39,_fol40> when 'true' ->
						  let <_cor70> =
						      call 'xref_parser':'t2s'
							  (Expr)
						  in  apply 'throw_error'/1
							  ({'type_error',_cor70})
					    end
					in  let <_cor74> =
						%% Line 340
						apply 'use_of_closure'/3
						    ('path', _cor72, NE1)
					    in  %% Line 340
						{'expr',Type1,'path',_cor74}
				    ( <_cor69> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor69})
				      -| ['compiler_generated'] )
				  end
		      ( <_cor64> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor64})
			-| ['compiler_generated'] )
		    end
		( <_cor63> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor63})
		  -| ['compiler_generated'] )
	      end
	  %% Line 341
	  <{'regexpr',RExpr,Type0},_X_Table> when 'true' ->
	      let <Type> =
		  %% Line 344
		  apply 'what_type'/1
		      (Type0)
	      in  let <_cor77> =
		      %% Line 345
		      case Type of
			%% Line 346
			<'function'> when 'true' ->
			    'v'
			%% Line 347
			<'module'> when 'true' ->
			    'M'
			%% Line 348
			<'application'> when 'true' ->
			    'A'
			%% Line 349
			<'release'> when 'true' ->
			    'R'
			( <_cor76> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor76})
			  -| ['compiler_generated'] )
		      end
		  in  let <Var> = {%% Line 351
			   'variable',%% Line 351
				      {'predef',_cor77}}
		      in  let <_cor84> =
			      %% Line 352
			      ( fun (_cor81,_cor80) ->
				    call 'xref_utils':'regexpr'
					(_cor81, _cor80)
				-| [{'id',{0,0,'-check_expr/2-fun-0-'}}] )
			  in  let <Call> =
				  %% Line 352
				  {'call',_cor84,%% Line 353
						 {'constants',RExpr},%% Line 353
								     Var}
			      in  %% Line 354
				  {'expr',Type,'vertex',Call}
	  %% Line 355
	  <C = {'constant',_X_Type,_X_OType,_X_C},Table> when 'true' ->
	      %% Line 356
	      apply 'check_constants'/2
		  ([C|[]], Table)
	  ( <_cor87,_cor86> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor87,_cor86})
		  -| [{'function_name',{'check_expr',2}}] )
	    -| ['compiler_generated'] )
	end
'path_arg'/2 =
    %% Line 358
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'edge',E = {'constants',C}> when 'true' ->
	      %% Line 359
	      case call 'sofs':'to_external'
		       (C) of
		%% Line 360
		<[{V1,V2}|[]]> when 'true' ->
		    {'path',{'constants',[V1|[V2|[]]]}}
		%% Line 361
		<_cor5> when 'true' ->
		    {'edge',E}
	      end
	  %% Line 363
	  <OType,E> when 'true' ->
	      %% Line 364
	      {OType,E}
	end
'check_conversion'/4 =
    %% Line 366
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 367
	case apply 'conversions'/3
		 (_cor3, _cor2, _cor1) of
	  %% Line 368
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 369
	  <'not_ok'> when 'true' ->
	      let <_cor4> =
		  call 'xref_parser':'t2s'
		      (_cor0)
	      in  apply 'throw_error'/1
		      ({'type_error',_cor4})
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'conversions'/3 =
    %% Line 373
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_OType,{'line',LineType},{'line',_cor14}>
	      when call 'erlang':'=:='
		    (_cor14,
		     LineType) ->
	      'ok'
	  %% Line 374
	  <'edge',{'line',_cor15},{'line','all_line_call'}> when 'true' ->
	      'ok'
	  %% Line 375
	  <'edge',From,{'line',Line}>
	      when let <_cor3> =
		    %% Line 376
		    call 'erlang':'is_atom'
			(From)
		in  let <_cor4> =
			%% Line 376
			call 'erlang':'=/='
			    (Line, 'all_line_call')
		    in  %% Line 376
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 376
	      'ok'
	  %% Line 377
	  <'vertex',From,{'line','line'}>
	      when call 'erlang':'is_atom'
		    (From) ->
	      'ok'
	  %% Line 378
	  <'vertex',From,To>
	      when let <_cor5> =
		    call 'erlang':'is_atom'
			(From)
		in  let <_cor6> =
			call 'erlang':'is_atom'
			    (To)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      'ok'
	  %% Line 379
	  <'edge',From,To>
	      when let <_cor7> =
		    call 'erlang':'is_atom'
			(From)
		in  let <_cor8> =
			call 'erlang':'is_atom'
			    (To)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      'ok'
	  %% Line 381
	  <'edge',{'line',Line},To>
	      when let <_cor9> =
		    %% Line 382
		    call 'erlang':'is_atom'
			(To)
		in  let <_cor10> =
			%% Line 382
			call 'erlang':'=/='
			    (Line, 'all_line_call')
		    in  %% Line 382
			call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 382
	      'ok'
	  %% Line 383
	  <'vertex',{'line','line'},To>
	      when call 'erlang':'is_atom'
		    (To) ->
	      'ok'
	  %% Line 384
	  <_X_OType,_X_From,_X_To> when 'true' ->
	      'not_ok'
	end
'set_op'/3 =
    %% Line 386
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'union',{'line',_X_LineType},'edge'> when 'true' ->
	      'family_union'
	  %% Line 387
	  <'intersection',{'line',_X_LineType},'edge'> when 'true' ->
	      'family_intersection'
	  %% Line 388
	  <'difference',{'line',_X_LineType},'edge'> when 'true' ->
	      'family_difference'
	  %% Line 389
	  <'union','function','vertex'> when 'true' ->
	      'family_union'
	  %% Line 390
	  <'intersection','function','vertex'> when 'true' ->
	      'family_intersection'
	  %% Line 391
	  <'difference','function','vertex'> when 'true' ->
	      'family_difference'
	  %% Line 392
	  <SOp,_X_Type,_X_OType> when 'true' ->
	      SOp
	end
'set_op'/1 =
    %% Line 394
    fun (_cor0) ->
	case _cor0 of
	  <'weak'> when 'true' ->
	      'weak_relation'
	  %% Line 395
	  <'strict'> when 'true' ->
	      'strict_relation'
	  %% Line 396
	  <Op> when 'true' ->
	      Op
	end
'ari_op'/1 =
    %% Line 398
    fun (_cor0) ->
	case _cor0 of
	  <'union'> when 'true' ->
	      ( fun (_cor2,_cor1) ->
		    call 'erlang':'+'
			(_cor2, _cor1)
		-| [{'id',{0,0,'-ari_op/1-fun-0-'}}] )
	  %% Line 399
	  <'intersection'> when 'true' ->
	      ( fun (_cor6,_cor5) ->
		    call 'erlang':'*'
			(_cor6, _cor5)
		-| [{'id',{0,0,'-ari_op/1-fun-1-'}}] )
	  %% Line 400
	  <'difference'> when 'true' ->
	      ( fun (_cor10,_cor9) ->
		    call 'erlang':'-'
			(_cor10, _cor9)
		-| [{'id',{0,0,'-ari_op/1-fun-2-'}}] )
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13})
		  -| [{'function_name',{'ari_op',1}}] )
	    -| ['compiler_generated'] )
	end
'restriction'/6 =
    %% Line 402
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 403
	case apply 'restr_op'/1
		 (_cor5) of
	  <{Column,_cor17}> when 'true' ->
	      %% Line 404
	      case _cor2 of
		%% Line 405
		<{'call','union_of_family',_X_E}>
		    when call 'erlang':'=:='
			  (_cor5,
			   '|') ->
		    %% Line 406
		    apply 'restriction'/5
			(Column, _cor3, _cor4, _cor1, _cor0)
		%% Line 407
		<{'call','union_of_family',_X_E}>
		    when call 'erlang':'=:='
			  (_cor5,
			   '||') ->
		    let <E1p> = {%% Line 408
			 'inverse',_cor4}
		    in  %% Line 409
			apply 'restriction'/5
			    (Column, _cor3, E1p, _cor1, _cor0)
		%% Line 410
		<_cor18> when 'true' ->
		    let <NE2a> =
			%% Line 411
			{'convert','vertex',_cor1,_cor3,_cor0}
		    in  let <NE2b> =
			    %% Line 412
			    apply 'family_to_function_vertices'/3
				(_cor3, 'vertex', NE2a)
			in  %% Line 413
			    {'expr',_cor3,'edge',{'call','restriction',Column,_cor2,NE2b}}
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'restriction'/5 =
    %% Line 416
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Column,Type1,VE,Type2,E2>
	      when call 'erlang':'=:='
		    (Type1,
		     'function') ->
	      let <M> =
		  %% Line 417
		  {'convert','vertex',Type2,'module',E2}
	      in  let <Restr> =
		      %% Line 418
		      {'call','union_of_family',{'call','restriction',VE,M}}
		  in  let <C> =
			  %% Line 419
			  {'convert','vertex',Type2,Type1,E2}
		      in  let <F> =
			      %% Line 420
			      apply 'family_to_function_vertices'/3
				  (Type1, 'vertex', C)
			  in  %% Line 421
			      {'expr',Type1,'edge',{'call','restriction',Column,Restr,F}}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'restriction',5}}] )
	    -| ['compiler_generated'] )
	end
'closure_restriction'/6 =
    %% Line 423
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 424
	case apply 'restr_op'/1
		 (_cor5) of
	  <{_cor16,Fun}> when 'true' ->
	      let <E2a> =
		  %% Line 425
		  {'convert',_cor2,_cor3,_cor4,_cor0}
	      in  let <E2b> =
		      %% Line 426
		      apply 'family_to_function_vertices'/3
			  (_cor4, 'vertex', E2a)
		  in  let <_cor9> =
			  %% Line 427
			  apply 'use_of_closure'/3
			      (Fun, _cor1, E2b)
		      in  %% Line 427
			  {'expr',_cor4,'edge',_cor9}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'restr_op'/1 =
    %% Line 429
    fun (_cor0) ->
	case _cor0 of
	  <'|'> when 'true' ->
	      {1,'call'}
	  %% Line 430
	  <'||'> when 'true' ->
	      {2,'use'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'restr_op',1}}] )
	    -| ['compiler_generated'] )
	end
'use_of_closure'/2 =
    %% Line 438
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 439
	    ( fun (_cor2) ->
		  call 'xref_utils':_cor1
		      (_cor2)
	      -| [{'id',{0,0,'-use_of_closure/2-fun-0-'}}] )
	in  %% Line 439
	    apply 'access_of_closure'/2
		(_cor0, {'call',_cor4,_cor0})
'use_of_closure'/3 =
    %% Line 441
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 442
	    ( fun (_cor4,_cor3) ->
		  call 'xref_utils':_cor2
		      (_cor4, _cor3)
	      -| [{'id',{0,0,'-use_of_closure/3-fun-0-'}}] )
	in  %% Line 442
	    apply 'access_of_closure'/2
		(_cor1, {'call',_cor7,_cor1,_cor0})
'access_of_closure'/2 =
    %% Line 444
    fun (_cor1,_cor0) ->
	%% Line 445
	{'call',( 'graph_access'/2
		  -| [{'id',{0,0,'-access_of_closure/2-fun-0-'}}] ),_cor1,_cor0}
'check_constants'/2 =
    %% Line 447
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cs = [C = {'constant',Type0,OType,_X_Con}|Cs1],Table> when 'true' ->
	      do  %% Line 448
		  apply 'check_mix'/4
		      (Cs1, Type0, OType, C)
		  let <_cor3> =
		      %% Line 449
		      case Type0 of
			%% Line 450
			<'unknown'> when 'true' ->
			    ['Rel'|['App'|['Mod']]]
			%% Line 451
			<T> when 'true' ->
			    [T|[]]
		      end
		  in  %% Line 453
		      case apply 'split'/3
			       (_cor3, Cs, Table) of
			%% Line 454
			<[{TypeToBe,_X_Cs}|[]]> when 'true' ->
			    let <_cor9> =
				%% Line 455
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[{'constant',_X_T,_X_OT,Con}|_cor6]> when 'true' ->
						    let <_cor8> =
							apply 'lc$^0'/1
							    (_cor6)
						    in  ( [Con|_cor8]
							  -| ['compiler_generated'] )
						( <[_cor5|_cor6]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Cs)
				  -| ['list_comprehension'] )
			    in  let <S> =
				    %% Line 455
				    call 'sofs':'from_term'
					(_cor9)
				in  let <Type> =
					%% Line 456
					apply 'what_type'/1
					    (TypeToBe)
				    in  let <E> =
					    %% Line 457
					    apply 'function_vertices_to_family'/3
						(Type, OType, {'constants',S})
					in  %% Line 458
					    {'expr',Type,OType,E}
			%% Line 459
			<[{Type1,[C1|_cor18]}|[{Type2,[C2|_cor19]}|_cor20]]> when 'true' ->
			    let <_cor14> =
				%% Line 461
				apply 'make_vertex'/2
				    (Type1, C1)
			    in  let <_cor13> =
				    %% Line 462
				    apply 'make_vertex'/2
					(Type2, C2)
				in  %% Line 460
				    apply 'throw_error'/1
					({'type_mismatch',_cor14,_cor13})
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor15})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'check_constants',2}}] )
	    -| ['compiler_generated'] )
	end
'check_mix'/4 =
    %% Line 465
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C = {'constant','Fun',OType,_X_Con}|Cs],'Fun',_cor12,_X_C0>
	      when call 'erlang':'=:='
		    (_cor12,
		     OType) ->
	      %% Line 466
	      apply 'check_mix'/4
		  (Cs, 'Fun', OType, C)
	  %% Line 467
	  <[C = {'constant',Type,OType,_X_Con}|Cs],Type0,_cor13,_X_C0>
	      when let <_cor14> =
		    call 'erlang':'=:='
			(_cor13, OType)
		in  let <_cor15> =
			let <_cor4> =
			    %% Line 468
			    call 'erlang':'=/='
				(Type, 'Fun')
			in  let <_cor5> =
				%% Line 468
				call 'erlang':'=/='
				    (Type0, 'Fun')
			    in  %% Line 468
				call 'erlang':'and'
				    (_cor4, _cor5)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      %% Line 469
	      apply 'check_mix'/4
		  (Cs, Type, OType, C)
	  %% Line 470
	  <[C|_cor16],_X_Type0,_X_OType0,C0> when 'true' ->
	      let <_cor7> =
		  %% Line 471
		  call 'xref_parser':'t2s'
		      (C0)
	      in  let <_cor6> =
		      %% Line 471
		      call 'xref_parser':'t2s'
			  (C)
		  in  %% Line 471
		      apply 'throw_error'/1
			  ({'type_mismatch',_cor7,_cor6})
	  %% Line 472
	  <[],_X_Type0,_X_OType0,_X_C0> when 'true' ->
	      %% Line 473
	      'ok'
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'check_mix',4}}] )
	    -| ['compiler_generated'] )
	end
'split'/3 =
    %% Line 475
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 476
	    apply 'constant_vertices'/2
		(_cor1, [])
	in  let <Vs> =
		%% Line 476
		call 'sofs':'from_term'
		    (_cor3)
	    in  let <_cor5> =
		    %% Line 477
		    call 'sofs':'empty_set'
			()
		in  %% Line 477
		    apply 'split'/6
			(_cor2, Vs, _cor5, 'unknown', _cor0, [])
'split'/6 =
    %% Line 479
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Type|Types],Vs,AllSoFar,_X_Type,Table,L> when 'true' ->
	      let <S0> =
		  %% Line 480
		  apply 'known_vertices'/3
		      (Type, Vs, Table)
	      in  let <S> =
		      %% Line 481
		      call 'sofs':'difference'
			  (S0, AllSoFar)
		  in  %% Line 482
		      case call 'sofs':'is_empty_set'
			       (S) of
			%% Line 483
			<'true'> when 'true' ->
			    %% Line 484
			    apply 'split'/6
				(Types, Vs, AllSoFar, Type, Table, L)
			%% Line 485
			<'false'> when 'true' ->
			    let <All> =
				%% Line 486
				call 'sofs':'union'
				    (AllSoFar, S0)
			    in  let <_cor9> =
				    %% Line 488
				    call 'sofs':'to_external'
					(S)
				in  %% Line 487
				    apply 'split'/6
					(Types, Vs, All, Type, Table, %% Line 488
								      [{Type,_cor9}|L])
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor10})
			  -| ['compiler_generated'] )
		      end
	  %% Line 490
	  <[],Vs,All,Type,_X_Table,L> when 'true' ->
	      let <_cor11> =
		  %% Line 491
		  call 'sofs':'difference'
		      (Vs, All)
	      in  %% Line 491
		  case call 'sofs':'to_external'
			   (_cor11) of
		    %% Line 492
		    <[]> when 'true' ->
			L
		    %% Line 493
		    <[C|_cor20]> when 'true' ->
			let <_cor12> =
			    apply 'make_vertex'/2
				(Type, C)
			in  apply 'throw_error'/1
				({'unknown_constant',_cor12})
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'split',6}}] )
	    -| ['compiler_generated'] )
	end
'make_vertex'/2 =
    %% Line 496
    fun (_cor1,_cor0) ->
	%% Line 497
	call 'xref_parser':'t2s'
	    ({'constant',_cor1,'vertex',_cor0})
'constant_vertices'/2 =
    %% Line 499
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'constant',_X_Type,'edge',{A,B}}|Cs],L> when 'true' ->
	      %% Line 500
	      apply 'constant_vertices'/2
		  (Cs, [A|[B|L]])
	  %% Line 501
	  <[{'constant',_X_Type,'vertex',V}|Cs],L> when 'true' ->
	      %% Line 502
	      apply 'constant_vertices'/2
		  (Cs, [V|L])
	  %% Line 503
	  <[],L> when 'true' ->
	      %% Line 504
	      L
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'constant_vertices',2}}] )
	    -| ['compiler_generated'] )
	end
'known_vertices'/3 =
    %% Line 506
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Fun',Cs,T> when 'true' ->
	      let <M> =
		  %% Line 507
		  call 'sofs':'projection'
		      (1, Cs)
	      in  let <_cor4> =
		      %% Line 508
		      apply 'fetch_value'/2
			  ('v', T)
		  in  let <_cor5> =
			  %% Line 508
			  call 'sofs':'restriction'
			      (_cor4, M)
		      in  let <F> =
			      %% Line 508
			      call 'sofs':'union_of_family'
				  (_cor5)
			  in  let <_cor8> =
				  %% Line 509
				  apply 'bifs'/1
				      (Cs)
			      in  let <_cor7> =
				      %% Line 509
				      call 'sofs':'intersection'
					  (Cs, F)
				  in  %% Line 509
				      call 'sofs':'union'
					  (_cor8, _cor7)
	  %% Line 510
	  <'Mod',Cs,T> when 'true' ->
	      let <_cor9> =
		  %% Line 511
		  apply 'fetch_value'/2
		      ('M', T)
	      in  %% Line 511
		  call 'sofs':'intersection'
		      (Cs, _cor9)
	  %% Line 512
	  <'App',Cs,T> when 'true' ->
	      let <_cor10> =
		  %% Line 513
		  apply 'fetch_value'/2
		      ('A', T)
	      in  %% Line 513
		  call 'sofs':'intersection'
		      (Cs, _cor10)
	  %% Line 514
	  <'Rel',Cs,T> when 'true' ->
	      let <_cor11> =
		  %% Line 515
		  apply 'fetch_value'/2
		      ('R', T)
	      in  %% Line 515
		  call 'sofs':'intersection'
		      (Cs, _cor11)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'known_vertices',3}}] )
	    -| ['compiler_generated'] )
	end
'bifs'/1 =
    %% Line 517
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 519
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{M,F,A}> when 'true' ->
			call 'xref_utils':'is_builtin'
			    (M, F, A)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-bifs/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-bifs/1-fun-0-'}}] )
	in  %% Line 518
	    call 'sofs':'specification'
		({'external',_cor3}, _cor0)
'function_vertices_to_family'/3 =
    %% Line 522
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'function','vertex',E> when 'true' ->
	      %% Line 523
	      {'call','partition_family',1,E}
	  %% Line 524
	  <_X_Type,_X_OType,E> when 'true' ->
	      %% Line 525
	      E
	end
'family_to_function_vertices'/3 =
    %% Line 527
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'function','vertex',E> when 'true' ->
	      %% Line 528
	      {'call','union_of_family',E}
	  %% Line 529
	  <_X_Type,_X_OType,E> when 'true' ->
	      %% Line 530
	      E
	end
'convert'/1 =
    %% Line 534
    fun (_cor0) ->
	case _cor0 of
	  <{'inverse',{'variable',Variable}}> when 'true' ->
	      let <_cor1> =
		  %% Line 535
		  apply 'var_name'/1
		      (Variable)
	      in  %% Line 535
		  {'get',{'inverse',_cor1}}
	  %% Line 536
	  <{'variable',Variable}> when 'true' ->
	      let <_cor2> =
		  %% Line 537
		  apply 'var_name'/1
		      (Variable)
	      in  %% Line 537
		  {'get',_cor2}
	  %% Line 538
	  <{'convert',FromOType,ToOType,E}> when 'true' ->
	      let <_cor3> =
		  %% Line 539
		  apply 'convert'/1
		      (E)
	      in  %% Line 539
		  apply 'convert'/3
		      (_cor3, FromOType, ToOType)
	  %% Line 540
	  <{'convert',OType,FromType,ToType,E}> when 'true' ->
	      let <_cor4> =
		  %% Line 541
		  apply 'convert'/1
		      (E)
	      in  %% Line 541
		  apply 'convert'/4
		      (_cor4, OType, FromType, ToType)
	  %% Line 542
	  <{'call',Op,E}> when 'true' ->
	      let <_cor5> =
		  %% Line 543
		  apply 'convert'/1
		      (E)
	      in  %% Line 543
		  {Op,_cor5}
	  %% Line 544
	  <{'call',Op,E1,E2}> when 'true' ->
	      let <_cor7> =
		  %% Line 545
		  apply 'convert'/1
		      (E1)
	      in  let <_cor6> =
		      %% Line 545
		      apply 'convert'/1
			  (E2)
		  in  %% Line 545
		      {Op,_cor7,_cor6}
	  %% Line 546
	  <{'call',Op,E1,E2,E3}> when 'true' ->
	      let <_cor10> =
		  %% Line 547
		  apply 'convert'/1
		      (E1)
	      in  let <_cor9> =
		      %% Line 547
		      apply 'convert'/1
			  (E2)
		  in  let <_cor8> =
			  %% Line 547
			  apply 'convert'/1
			      (E3)
		      in  %% Line 547
			  {Op,_cor10,_cor9,_cor8}
	  %% Line 548
	  <{'constants',Constants}> when 'true' ->
	      %% Line 549
	      {'quote',Constants}
	  %% Line 550
	  <I>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 551
	      {'quote',I}
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'convert',1}}] )
	    -| ['compiler_generated'] )
	end
'var_name'/1 =
    %% Line 553
    fun (_cor0) ->
	case _cor0 of
	  <{'predef',VarName}> when 'true' ->
	      VarName
	  %% Line 554
	  <Variable> when 'true' ->
	      Variable
	end
'convert'/3 =
    %% Line 556
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E,OType,_cor9>
	      when call 'erlang':'=:='
		    (_cor9,
		     OType) ->
	      %% Line 557
	      E
	  %% Line 558
	  <E,'edge','edge_closure'> when 'true' ->
	      let <_cor5> =
		  %% Line 559
		  ( fun (_cor3) ->
			call 'xref_utils':'closure'
			    (_cor3)
		    -| [{'id',{0,0,'-convert/3-fun-0-'}}] )
	      in  %% Line 559
		  {_cor5,E}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'convert',3}}] )
	    -| ['compiler_generated'] )
	end
'convert'/4 =
    %% Line 561
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <E,OType,FromType,'number'> when 'true' ->
	      %% Line 562
	      apply 'un_familiarize'/3
		  (FromType, OType, E)
	  %% Line 563
	  <E,OType,FromType,ToType> when 'true' ->
	      let <_cor5> =
		  %% Line 564
		  apply 'type_ord'/1
		      (FromType)
	      in  let <_cor4> =
		      %% Line 564
		      apply 'type_ord'/1
			  (ToType)
		  in  %% Line 564
		      case <_cor5,_cor4> of
			%% Line 565
			<FT,To>
			    when call 'erlang':'=:='
				  (FT,
				   To) ->
			    %% Line 566
			    E
			%% Line 567
			<FT,ToT>
			    when call 'erlang':'>'
				  (FT,
				   ToT) ->
			    %% Line 568
			    apply 'special'/4
				(OType, FromType, ToType, E)
			%% Line 569
			<FT,ToT>
			    when call 'erlang':'<'
				  (FT,
				   ToT) ->
			    %% Line 570
			    apply 'general'/4
				(OType, FromType, ToType, E)
			( <_fol88,_fol89> when 'true' ->
			      let <_cor6> = {_fol88,_fol89}
			      in  primop 'match_fail'
				      ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
	end
'general'/4 =
    %% Line 575
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_ObjectType,FromType,ToType,X>
	      when call 'erlang':'=:='
		    (FromType,
		     ToType) ->
	      %% Line 576
	      X
	  %% Line 577
	  <'edge',{'line',_X_LineType},ToType,LEs> when 'true' ->
	      let <_cor6> =
		  %% Line 578
		  ( fun (_cor4) ->
			case _cor4 of
			  <{V1V2,_X_Ls}> when 'true' ->
			      V1V2
			  ( <_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor5})
				  -| [{'function_name',{'-general/4-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-general/4-fun-0-'}}] )
	      in  let <VEs> = {%% Line 578
		       'projection',%% Line 578
				    {'quote',{'external',_cor6}},%% Line 578
								 LEs}
		  in  %% Line 579
		      apply 'general'/4
			  ('edge', 'function', ToType, VEs)
	  %% Line 580
	  <'edge','function',ToType,VEs> when 'true' ->
	      let <_cor10> =
		  %% Line 582
		  ( fun (_cor8) ->
			case _cor8 of
			  <{{M1,_cor20,_cor21},{M2,_cor22,_cor23}}> when 'true' ->
			      {M1,M2}
			  ( <_cor9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor9})
				  -| [{'function_name',{'-general/4-fun-1-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-general/4-fun-1-'}}] )
	      in  let <MEs> = {%% Line 581
		       'projection',%% Line 582
				    {'quote',{'external',_cor10}},%% Line 583
								  VEs}
		  in  %% Line 584
		      apply 'general'/4
			  ('edge', 'module', ToType, MEs)
	  %% Line 585
	  <'edge','module',ToType,MEs> when 'true' ->
	      let <AEs> =
		  %% Line 586
		  {'image',{'get','me2ae'},MEs}
	      in  %% Line 587
		  apply 'general'/4
		      ('edge', 'application', ToType, AEs)
	  %% Line 588
	  <'edge','application','release',AEs> when 'true' ->
	      %% Line 589
	      {'image',{'get','ae'},AEs}
	  %% Line 590
	  <'vertex',{'line',_X_LineType},ToType,L> when 'true' ->
	      let <V> =
		  %% Line 591
		  {'partition_family',{'quote',1},{'domain',L}}
	      in  %% Line 592
		  apply 'general'/4
		      ('vertex', 'function', ToType, V)
	  %% Line 593
	  <'vertex','function',ToType,V> when 'true' ->
	      let <M> = {%% Line 594
		   'domain',%% Line 594
			    V}
	      in  %% Line 595
		  apply 'general'/4
		      ('vertex', 'module', ToType, M)
	  %% Line 596
	  <'vertex','module',ToType,M> when 'true' ->
	      let <A> =
		  %% Line 597
		  {'image',{'get','m2a'},M}
	      in  %% Line 598
		  apply 'general'/4
		      ('vertex', 'application', ToType, A)
	  %% Line 599
	  <'vertex','application','release',A> when 'true' ->
	      %% Line 600
	      {'image',{'get','a2r'},A}
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'general',4}}] )
	    -| ['compiler_generated'] )
	end
'special'/4 =
    %% Line 602
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_ObjectType,FromType,ToType,X>
	      when call 'erlang':'=:='
		    (FromType,
		     ToType) ->
	      %% Line 603
	      X
	  %% Line 604
	  <'edge',{'line',_X_LineType},{'line','all_line_call'},Calls> when 'true' ->
	      let <_cor6> =
		  %% Line 607
		  ( fun (_cor4) ->
			case _cor4 of
			  <{{{M1,_cor25,_cor26},{M2,_cor27,_cor28}},_cor29}> when 'true' ->
			      {M1,M2}
			  ( <_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor5})
				  -| [{'function_name',{'-special/4-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-special/4-fun-0-'}}] )
	      in  %% Line 605
		  {'put',{'tmp','mods'},%% Line 606
					{'projection',%% Line 607
						      {'quote',{'external',_cor6}},%% Line 608
										   Calls},%% Line 609
											  {'put',{'tmp','def_at'},%% Line 610
														  {'union',{'image',{'get','def_at'},{'union',{'domain',{'get',{'tmp','mods'}}},{'range',{'get',{'tmp','mods'}}}}}},%% Line 613
																												    {( 'funs_to_lines'/2
																												       -| [{'id',{0,0,'-special/4-fun-1-'}}] ),%% Line 614
																																	       {'get',{'tmp','def_at'}},%% Line 614
																																					Calls}}}
	  %% Line 615
	  <'edge','function',{'line',LineType},VEs> when 'true' ->
	      let <_cor7> =
		  %% Line 616
		  case <> of
		    %% Line 617
		    <>
			when call 'erlang':'=:='
			      (LineType,
			       'line') ->
			'call_at'
		    %% Line 618
		    <>
			when call 'erlang':'=:='
			      (LineType,
			       'export_call') ->
			'e_call_at'
		    %% Line 619
		    <>
			when call 'erlang':'=:='
			      (LineType,
			       'local_call') ->
			'l_call_at'
		    %% Line 620
		    <>
			when call 'erlang':'=:='
			      (LineType,
			       'external_call') ->
			'x_call_at'
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 622
		  apply 'line_edges'/2
		      (VEs, _cor7)
	  %% Line 623
	  <'edge','module',ToType,MEs> when 'true' ->
	      let <_cor14> =
		  %% Line 626
		  ( fun (_cor12) ->
			case _cor12 of
			  <FE = {{M1,_cor30,_cor31},{M2,_cor32,_cor33}}> when 'true' ->
			      {{M1,M2},FE}
			  ( <_cor13> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor13})
				  -| [{'function_name',{'-special/4-fun-2-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-special/4-fun-2-'}}] )
	      in  let <_cor11> =
		      %% Line 629
		      ( fun (_cor9) ->
			    case _cor9 of
			      <{M1,_X_M2}> when 'true' ->
				  M1
			      ( <_cor10> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor10})
				      -| [{'function_name',{'-special/4-fun-3-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-special/4-fun-3-'}}] )
		  in  let <VEs> =
			  %% Line 624
			  {'image',%% Line 625
				   {'projection',%% Line 626
						 {'quote',{'external',_cor14}},%% Line 627
									       {'union',%% Line 628
											{'image',{'get','e'},%% Line 629
													     {'projection',{'quote',{'external',_cor11}},MEs}}}},%% Line 630
																				 MEs}
		      in  %% Line 631
			  apply 'special'/4
			      ('edge', 'function', ToType, VEs)
	  %% Line 632
	  <'edge','application',ToType,AEs> when 'true' ->
	      let <MEs> =
		  %% Line 633
		  {'inverse_image',{'get','me2ae'},AEs}
	      in  %% Line 634
		  apply 'special'/4
		      ('edge', 'module', ToType, MEs)
	  %% Line 635
	  <'edge','release',ToType,REs> when 'true' ->
	      let <AEs> =
		  %% Line 636
		  {'inverse_image',{'get','ae'},REs}
	      in  %% Line 637
		  apply 'special'/4
		      ('edge', 'application', ToType, AEs)
	  %% Line 638
	  <'vertex','function',{'line',_X_LineType},V> when 'true' ->
	      %% Line 639
	      {'restriction',%% Line 640
			     {'union_of_family',{'restriction',{'get','def_at'},{'domain',V}}},%% Line 641
											       {'union_of_family',V}}
	  %% Line 642
	  <'vertex','module',ToType,M> when 'true' ->
	      let <V> =
		  %% Line 643
		  {'restriction',{'get','v'},M}
	      in  %% Line 644
		  apply 'special'/4
		      ('vertex', 'function', ToType, V)
	  %% Line 645
	  <'vertex','application',ToType,A> when 'true' ->
	      let <M> =
		  %% Line 646
		  {'inverse_image',{'get','m2a'},A}
	      in  %% Line 647
		  apply 'special'/4
		      ('vertex', 'module', ToType, M)
	  %% Line 648
	  <'vertex','release',ToType,R> when 'true' ->
	      let <A> =
		  %% Line 649
		  {'inverse_image',{'get','a2r'},R}
	      in  %% Line 650
		  apply 'special'/4
		      ('vertex', 'application', ToType, A)
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'special',4}}] )
	    -| ['compiler_generated'] )
	end
'line_edges'/2 =
    %% Line 652
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 655
	    ( fun (_cor5) ->
		  case _cor5 of
		    <{{M1,_cor10,_cor11},_cor12}> when 'true' ->
			M1
		    ( <_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6})
			    -| [{'function_name',{'-line_edges/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-line_edges/2-fun-0-'}}] )
	in  let <_cor4> =
		%% Line 657
		( fun (_cor2) ->
		      case _cor2 of
			<C = {VV,_X_L}> when 'true' ->
			    {VV,C}
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'-line_edges/2-fun-1-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-line_edges/2-fun-1-'}}] )
	    in  %% Line 653
		{'put',{'tmp','ves'},_cor1,%% Line 654
					   {'put',{'tmp','m1'},%% Line 655
							       {'projection',{'quote',{'external',_cor7}},%% Line 656
													  {'get',{'tmp','ves'}}},%% Line 657
																 {'image',{'projection',{'quote',{'external',_cor4}},%% Line 658
																						     {'union',{'image',{'get',_cor0},{'get',{'tmp','m1'}}}}},%% Line 659
																													     {'get',{'tmp','ves'}}}}}
'funs_to_lines'/2 =
    %% Line 663
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 664
	    call 'sofs':'projection'
		(1, _cor0)
	in  let <T1> =
		%% Line 664
		call 'sofs':'multiple_relative_product'
		    ({_cor1,_cor1}, _cor2)
	    in  let <_cor4> =
		    %% Line 665
		    call 'sofs':'substitution'
			(1, T1)
		in  let <T2> =
			%% Line 665
			call 'sofs':'composite'
			    (_cor4, _cor0)
		    in  let <Fun> =
			    %% Line 666
			    ( fun (_cor6) ->
				  case _cor6 of
				    <{{{V1,V2},{L1,L2}},Ls}> when 'true' ->
					{{{V1,L1},{V2,L2}},Ls}
				    ( <_cor7> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7})
					    -| [{'function_name',{'-funs_to_lines/2-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-funs_to_lines/2-fun-0-'}}] )
			in  %% Line 667
			    call 'sofs':'projection'
				({'external',Fun}, T2)
'what_type'/1 =
    %% Line 669
    fun (_cor0) ->
	case _cor0 of
	  <'Rel'> when 'true' ->
	      'release'
	  %% Line 670
	  <'App'> when 'true' ->
	      'application'
	  %% Line 671
	  <'Mod'> when 'true' ->
	      'module'
	  %% Line 672
	  <'Fun'> when 'true' ->
	      'function'
	  %% Line 673
	  <'Lin'> when 'true' ->
	      {'line','line'}
	  %% Line 674
	  <'LLin'> when 'true' ->
	      {'line','local_call'}
	  %% Line 675
	  <'XLin'> when 'true' ->
	      {'line','external_call'}
	  %% Line 676
	  <'ELin'> when 'true' ->
	      {'line','export_call'}
	  %% Line 677
	  <'XXL'> when 'true' ->
	      {'line','all_line_call'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'what_type',1}}] )
	    -| ['compiler_generated'] )
	end
'type_ord'/1 =
    %% Line 679
    fun (_cor0) ->
	case _cor0 of
	  <{'line','all_line_call'}> when 'true' ->
	      0
	  %% Line 680
	  <{'line',_X_LT}> when 'true' ->
	      1
	  %% Line 681
	  <'function'> when 'true' ->
	      2
	  %% Line 682
	  <'module'> when 'true' ->
	      3
	  %% Line 683
	  <'application'> when 'true' ->
	      4
	  %% Line 684
	  <'release'> when 'true' ->
	      5
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type_ord',1}}] )
	    -| ['compiler_generated'] )
	end
'un_familiarize'/3 =
    %% Line 690
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'function','vertex',E> when 'true' ->
	      %% Line 691
	      {'union_of_family',E}
	  %% Line 692
	  <{'line',_cor6},'edge',E> when 'true' ->
	      %% Line 693
	      {'family_to_relation',E}
	  %% Line 694
	  <_X_Type,_X_OType,E> when 'true' ->
	      %% Line 695
	      E
	end
'i'/2 =
    %% Line 702
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 704
	    call 'dict':'new'
		()
	in  %% Line 704
	    case apply 'find_nodes'/3
		     (_cor1, 1, _cor3) of
	      <{N,_X_NE,_X_NI,NT}> when 'true' ->
		  let <_cor5> =
		      %% Line 705
		      call 'dict':'to_list'
			  (NT)
		  in  %% Line 705
		      case apply 'save_vars'/5
			       (_cor5, NT, [], [], []) of
			<{Vs,UVs0,L}> when 'true' ->
			    let <_cor7> =
				%% Line 707
				call 'sofs':'relation'
				    (Vs)
			    in  let <_cor8> =
				    %% Line 707
				    call 'sofs':'relation_to_family'
					(_cor7)
				in  let <VarsToSave> =
					%% Line 707
					call 'sofs':'to_external'
					    (_cor8)
				    in  let <Fun> =
					    %% Line 708
					    ( fun (_cor12,_cor11) ->
						  case <_cor12,_cor11> of
						    <{NN,S},D> when 'true' ->
							let <_cor10> =
							    %% Line 709
							    call 'dict':'fetch'
								(NN, D)
							in  %% Line 709
							    call 'dict':'store'
								(NN, {'extra',S,_cor10}, D)
						    ( <_cor14,_cor13> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor14,_cor13})
							    -| [{'function_name',{'-i/2-fun-0-',2}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-i/2-fun-0-'}}] )
					in  let <_cor16> =
						%% Line 711
						call 'dict':'from_list'
						    (L)
					    in  let <D> =
						    %% Line 711
						    call 'lists':'foldl'
							(Fun, _cor16, VarsToSave)
						in  let <_cor18> =
							%% Line 713
							call 'lists':'sort'
							    (UVs0)
						    in  let <UVs> =
							    %% Line 713
							    call 'lists':'reverse'
								(_cor18)
							in  %% Line 714
							    case apply 'make_instructions'/3
								     (N, UVs, D) of
							      <{_X_D,Is0}> when 'true' ->
								  let <Is> =
								      %% Line 715
								      apply 'insert_unput'/1
									  (Is0)
								  in  %% Line 718
								      apply 'evaluate'/3
									  (Is, _cor0, [])
							      ( <_cor20> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor20})
								-| ['compiler_generated'] )
							    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'find_nodes'/3 =
    %% Line 722
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E = {'quote',_cor20},I,T> when 'true' ->
	      %% Line 723
	      apply 'find_node'/3
		  (E, I, T)
	  %% Line 724
	  <{'get',Var},I,T> when 'true' ->
	      %% Line 725
	      apply 'find_node'/3
		  ({'var',Var}, I, T)
	  %% Line 726
	  <{'put',Var,E1,E2},I,T> when 'true' ->
	      %% Line 727
	      case apply 'find_nodes'/3
		       (E1, I, T) of
		<{_X_NE1_N,NE1,I1,T1}> when 'true' ->
		    let <NT> =
			%% Line 729
			call 'dict':'store'
			    ({'var',Var}, NE1, T1)
		    in  %% Line 730
			apply 'find_nodes'/3
			    (E2, I1, NT)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 731
	  <Tuple,I,T>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      %% Line 732
	      case call 'erlang':'tuple_to_list'
		       (Tuple) of
		<[Tag0|L]> when 'true' ->
		    let <Fun> =
			%% Line 733
			( fun (_cor8,_cor7) ->
			      case <_cor8,_cor7> of
				<A,{L0,I0,T0}> when 'true' ->
				    %% Line 734
				    case apply 'find_nodes'/3
					     (A, I0, T0) of
				      <{NA,_X_E,NI,NT}> when 'true' ->
					  %% Line 735
					  {[NA|L0],NI,NT}
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor6})
					-| ['compiler_generated'] )
				    end
				( <_cor10,_cor9> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor10,_cor9})
					-| [{'function_name',{'-find_nodes/3-fun-0-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-find_nodes/3-fun-0-'}}] )
		    in  %% Line 737
			case call 'lists':'foldl'
				 (Fun, {[],I,T}, L) of
			  <{NL,NI,T1}> when 'true' ->
			      let <_cor15> =
				  %% Line 738
				  case Tag0 of
				    %% Line 739
				    <_cor21>
					when call 'erlang':'is_function'
					      (Tag0) ->
					%% Line 740
					Tag0
				    %% Line 741
				    <_cor22>
					when call 'erlang':'is_atom'
					      (Tag0) ->
					let <Arity> =
					    %% Line 742
					    call 'erlang':'length'
						(NL)
					in  %% Line 743
					    call 'erlang':'make_fun'
						('sofs', Tag0, Arity)
				    ( <_cor14> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor14})
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 745
				  apply 'find_node'/3
				      ({'apply',_cor15,NL}, NI, T1)
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'find_nodes',3}}] )
	    -| ['compiler_generated'] )
	end
'find_node'/3 =
    %% Line 747
    fun (_cor2,_cor1,_cor0) ->
	%% Line 748
	case call 'dict':'find'
		 (_cor2, _cor0) of
	  %% Line 749
	  <{'ok',{'reuse',N}}> when 'true' ->
	      %% Line 750
	      {N,_cor2,_cor1,_cor0}
	  %% Line 751
	  <{'ok',N}>
	      when call 'erlang':'is_integer'
		    (N) ->
	      let <_cor3> =
		  %% Line 752
		  call 'dict':'store'
		      (_cor2, {'reuse',N}, _cor0)
	      in  %% Line 752
		  {N,_cor2,_cor1,_cor3}
	  %% Line 753
	  <{'ok',E1}> when 'true' ->
	      %% Line 754
	      apply 'find_node'/3
		  (E1, _cor1, _cor0)
	  %% Line 755
	  <'error'> when 'true' ->
	      let <_cor5> =
		  %% Line 756
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  let <_cor4> =
		      %% Line 756
		      call 'dict':'store'
			  (_cor2, _cor1, _cor0)
		  in  %% Line 756
		      {_cor1,_cor2,_cor5,_cor4}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'save_vars'/5 =
    %% Line 761
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{I,{'reuse',N}}|DL],D,Vs,UVs,L> when 'true' ->
	      %% Line 762
	      apply 'save_vars'/5
		  (DL, D, [{N,{'save',{'tmp',N}}}|Vs], UVs, [{N,I}|L])
	  %% Line 763
	  <[{I,N}|DL],D,Vs,UVs,L>
	      when call 'erlang':'is_integer'
		    (N) ->
	      %% Line 764
	      apply 'save_vars'/5
		  (DL, D, Vs, UVs, [{N,I}|L])
	  %% Line 765
	  <[{{'var',V = {'user',_cor13}},I}|DL],D,Vs,UVs,L> when 'true' ->
	      let <_cor6> =
		  %% Line 766
		  case call 'dict':'fetch'
			   (I, D) of
		    %% Line 767
		    <{'reuse',N0}> when 'true' ->
			N0
		    %% Line 768
		    <N0> when 'true' ->
			N0
		  end
	      in  %% Line 770
		  apply 'save_vars'/5
		      (DL, D, [{_cor6,{'save',V}}|Vs], [_cor6|UVs], L)
	  %% Line 771
	  <[{{'var',{'tmp',_cor14}},_X_I}|DL],D,Vs,UVs,L> when 'true' ->
	      %% Line 772
	      apply 'save_vars'/5
		  (DL, D, Vs, UVs, L)
	  %% Line 773
	  <[],_X_D,Vs,UVs,L> when 'true' ->
	      %% Line 774
	      {Vs,UVs,L}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'save_vars',5}}] )
	    -| ['compiler_generated'] )
	end
'make_instructions'/3 =
    %% Line 780
    fun (_cor2,_cor1,_cor0) ->
	%% Line 781
	case apply 'make_instrs'/3
		 (_cor2, _cor0, []) of
	  <{D1,Is0}> when 'true' ->
	      %% Line 786
	      apply 'make_more_instrs'/3
		  (_cor1, D1, Is0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'make_more_instrs'/3 =
    %% Line 788
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[UV|UVs],D,Is> when 'true' ->
	      %% Line 789
	      case call 'dict':'find'
		       (UV, D) of
		%% Line 790
		<'error'> when 'true' ->
		    %% Line 791
		    apply 'make_more_instrs'/3
			(UVs, D, Is)
		%% Line 792
		<_X_Else> when 'true' ->
		    %% Line 793
		    case apply 'make_instrs'/3
			     (UV, D, Is) of
		      <{ND,NIs}> when 'true' ->
			  %% Line 794
			  apply 'make_more_instrs'/3
			      (UVs, ND, ['pop'|NIs])
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 796
	  <[],D,Is> when 'true' ->
	      %% Line 797
	      {D,Is}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'make_more_instrs',3}}] )
	    -| ['compiler_generated'] )
	end
'make_instrs'/3 =
    %% Line 799
    fun (_cor2,_cor1,_cor0) ->
	%% Line 800
	case call 'dict':'find'
		 (_cor2, _cor1) of
	  %% Line 801
	  <{'ok',{'extra',Save,Val}}> when 'true' ->
	      %% Line 802
	      case apply 'make_instr'/3
		       (Val, _cor1, _cor0) of
		<{D1,Is1}> when 'true' ->
		    let <_cor5> =
			%% Line 803
			call 'dict':'erase'
			    (_cor2, D1)
		    in  let <_cor4> =
			    %% Line 803
			    call 'erlang':'++'
				(Save, Is1)
			in  %% Line 803
			    {_cor5,_cor4}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 804
	  <{'ok',Val}> when 'true' ->
	      %% Line 805
	      case apply 'make_instr'/3
		       (Val, _cor1, _cor0) of
		<{D1,Is1}> when 'true' ->
		    let <_cor7> =
			%% Line 806
			call 'dict':'erase'
			    (_cor2, D1)
		    in  %% Line 806
			{_cor7,Is1}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 807
	  <'error'> when 'true' ->
	      %% Line 808
	      {_cor1,[{'get',{'tmp',_cor2}}|_cor0]}
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'make_instr'/3 =
    %% Line 811
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'var',V},D,Is> when 'true' ->
	      %% Line 812
	      {D,[{'get',V}|Is]}
	  %% Line 813
	  <Q = {'quote',_X_T},D,Is> when 'true' ->
	      %% Line 814
	      {D,[Q|Is]}
	  %% Line 815
	  <{'apply',MF,Ns},D,Is> when 'true' ->
	      let <Fun> =
		  %% Line 816
		  ( fun (_cor4,_cor3) ->
			case <_cor4,_cor3> of
			  <N,{D0,Is0}> when 'true' ->
			      apply 'make_instrs'/3
				  (N, D0, Is0)
			  ( <_cor6,_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor6,_cor5})
				  -| [{'function_name',{'-make_instr/3-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-make_instr/3-fun-0-'}}] )
	      in  %% Line 817
		  case call 'lists':'foldl'
			   (Fun, {D,Is}, Ns) of
		    <{D1,Is1}> when 'true' ->
			let <_cor9> =
			    %% Line 818
			    call 'erlang':'length'
				(Ns)
			in  %% Line 818
			    {D1,[{'apply',MF,_cor9}|Is1]}
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'make_instr',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_unput'/1 =
    %% Line 823
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 824
	    call 'dict':'new'
		()
	in  %% Line 824
	    apply 'insert_unput'/3
		(_cor0, _cor1, [])
'insert_unput'/3 =
    %% Line 826
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I = {'get',V = {'tmp',_cor11}}|Is],D,L> when 'true' ->
	      %% Line 827
	      case call 'dict':'find'
		       (V, D) of
		%% Line 828
		<{'ok',_cor12}> when 'true' ->
		    apply 'insert_unput'/3
			(Is, D, [I|L])
		%% Line 829
		<'error'> when 'true' ->
		    let <_cor3> =
			call 'dict':'store'
			    (V, [], D)
		    in  apply 'insert_unput'/3
			    (Is, _cor3, [I|[{'unput',V}|L]])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 831
	  <[I = {'save',V = {'tmp',_cor13}}|Is],D,L> when 'true' ->
	      %% Line 832
	      case call 'dict':'find'
		       (V, D) of
		%% Line 833
		<{'ok',_cor14}> when 'true' ->
		    let <_cor5> =
			%% Line 834
			call 'dict':'erase'
			    (V, D)
		    in  %% Line 834
			apply 'insert_unput'/3
			    (Is, _cor5, [I|L])
		%% Line 835
		<'error'> when 'true' ->
		    let <_cor6> =
			%% Line 837
			call 'dict':'erase'
			    (V, D)
		    in  %% Line 837
			apply 'insert_unput'/3
			    (Is, _cor6, L)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 839
	  <[I|Is],D,L> when 'true' ->
	      %% Line 840
	      apply 'insert_unput'/3
		  (Is, D, [I|L])
	  %% Line 841
	  <[],_X_D,L> when 'true' ->
	      %% Line 842
	      L
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'insert_unput',3}}] )
	    -| ['compiler_generated'] )
	end
'graph_access'/2 =
    %% Line 844
    fun (_cor1,_cor0) ->
	_cor0
'evaluate'/3 =
    %% Line 848
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'apply',MF,NoAs}|P],T,S> when 'true' ->
	      let <Args> =
		  %% Line 849
		  call 'lists':'sublist'
		      (S, NoAs)
	      in  let <NewS> =
		      %% Line 850
		      call 'lists':'nthtail'
			  (NoAs, S)
		  in  let <_cor5> =
			  %% Line 852
			  call 'erlang':'apply'
			      (MF, Args)
		      in  %% Line 852
			  apply 'evaluate'/3
			      (P, T, [_cor5|NewS])
	  %% Line 853
	  <[{'quote',Val}|P],T,S> when 'true' ->
	      %% Line 854
	      apply 'evaluate'/3
		  (P, T, [Val|S])
	  %% Line 855
	  <[{'get',Var}|P],T,S>
	      when call 'erlang':'is_atom'
		    (Var) ->
	      let <Value> =
		  %% Line 856
		  apply 'fetch_value'/2
		      (Var, T)
	      in  let <_cor8> =
		      %% Line 857
		      case Value of
			%% Line 858
			<{R,_cor28}> when 'true' ->
			    R
			%% Line 859
			<_cor29> when 'true' ->
			    Value
		      end
		  in  %% Line 861
		      apply 'evaluate'/3
			  (P, T, [_cor8|S])
	  %% Line 862
	  <[{'get',{'inverse',Var}}|P],T,S> when 'true' ->
	      %% Line 863
	      case apply 'fetch_value'/2
		       (Var, T) of
		<{_cor30,R}> when 'true' ->
		    %% Line 864
		    apply 'evaluate'/3
			(P, T, [R|S])
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 865
	  <[{'get',{'user',Var}}|P],T,S> when 'true' ->
	      let <Val> =
		  %% Line 866
		  apply 'fetch_value'/2
		      (Var, T)
	      in  %% Line 867
		  apply 'evaluate'/3
		      (P, T, [Val|S])
	  %% Line 868
	  <[{'get',Var}|P],T,S> when 'true' ->
	      let <_cor12> =
		  %% Line 869
		  call 'dict':'fetch'
		      (Var, T)
	      in  %% Line 869
		  apply 'evaluate'/3
		      (P, T, [_cor12|S])
	  %% Line 870
	  <[{'save',Var = {'tmp',_cor31}}|P],T,S = [Val|_cor32]> when 'true' ->
	      let <T1> =
		  %% Line 871
		  apply 'update_graph_counter'/3
		      (Val, 1, T)
	      in  let <_cor15> =
		      %% Line 872
		      call 'dict':'store'
			  (Var, Val, T1)
		  in  %% Line 872
		      apply 'evaluate'/3
			  (P, _cor15, S)
	  %% Line 873
	  <[{'save',{'user',Name}}|P],T,S = [Val|_cor33]> when 'true' ->
	      %% Line 874
	      case call 'dict':'fetch'
		       (Name, T) of
		<{'xref_var',_cor34,_cor35,'user',OType,Type}> when 'true' ->
		    let <NewVar> =
			%% Line 875
			{'xref_var',Name,Val,%% Line 876
					     'user',%% Line 876
						    OType,%% Line 876
							  Type}
		    in  let <T1> =
			    %% Line 877
			    apply 'update_graph_counter'/3
				(Val, 1, T)
			in  let <NT> =
				%% Line 878
				call 'dict':'store'
				    (Name, NewVar, T1)
			    in  %% Line 879
				apply 'evaluate'/3
				    (P, NT, S)
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 880
	  <[{'unput',Var}|P],T,S> when 'true' ->
	      let <_cor22> =
		  %% Line 881
		  call 'dict':'fetch'
		      (Var, T)
	      in  let <T1> =
		      %% Line 881
		      apply 'update_graph_counter'/3
			  (_cor22, -1, T)
		  in  let <_cor24> =
			  %% Line 882
			  call 'dict':'erase'
			      (Var, T1)
		      in  %% Line 882
			  apply 'evaluate'/3
			      (P, _cor24, S)
	  %% Line 883
	  <['pop'|P],T,[_cor36|S]> when 'true' ->
	      %% Line 884
	      apply 'evaluate'/3
		  (P, T, S)
	  %% Line 885
	  <[],T,[R|[]]> when 'true' ->
	      %% Line 886
	      {T,R}
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'evaluate',3}}] )
	    -| ['compiler_generated'] )
	end
'update_graph_counter'/3 =
    %% Line 890
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 891
		call 'digraph':'info'
		    (_cor2)
	in  %% Line 891
	    case _cor3 of
	      %% Line 892
	      <Info>
		  when call 'erlang':'is_list'
			(_cor3) ->
		  %% Line 893
		  case call 'dict':'find'
			   (_cor2, _cor0) of
		    %% Line 894
		    <{'ok',1}>
			when call 'erlang':'=:='
			      (_cor1,
			       -1) ->
			%% Line 895
			case call 'digraph':'delete'
				 (_cor2) of
			  <'true'> when 'true' ->
			      %% Line 896
			      call 'dict':'erase'
				  (_cor2, _cor0)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    %% Line 897
		    <{'ok',C}> when 'true' ->
			let <_cor6> =
			    %% Line 898
			    call 'erlang':'+'
				(C, _cor1)
			in  %% Line 898
			    call 'dict':'store'
				(_cor2, _cor6, _cor0)
		    %% Line 899
		    <'error'>
			when call 'erlang':'=:='
			      (_cor1,
			       1) ->
			%% Line 900
			call 'dict':'store'
			    (_cor2, 1, _cor0)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      %% Line 902
	      <_X_EXIT> when 'true' ->
		  _cor0
	    end
'fetch_value'/2 =
    %% Line 906
    fun (_cor1,_cor0) ->
	%% Line 907
	case call 'dict':'fetch'
		 (_cor1, _cor0) of
	  <{'xref_var',_cor5,Value,_cor6,_cor7,_cor8}> when 'true' ->
	      %% Line 908
	      Value
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'format_parse_error'/2 =
    %% Line 910
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[105|[110|[118|[97|[108|[105|[100|[95|[114|[101|[103|[101|[120|[112]]]]]]]]]]]]]]|[String|[Error|[]]]],Line> when 'true' ->
	      let <_cor2> =
		  %% Line 912
		  call 'lists':'flatten'
		      (Error)
	      in  %% Line 911
		  call 'io_lib':'format'
		      ([73|[110|[118|[97|[108|[105|[100|[32|[114|[101|[103|[117|[108|[97|[114|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[34|[126|[116|[115|[34|[126|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 912
																																    [String|[Line|[_cor2|[]]]])
	  %% Line 913
	  <[[105|[110|[118|[97|[108|[105|[100|[95|[114|[101|[103|[101|[120|[112|[95|[118|[97|[114|[105|[97|[98|[108|[101]]]]]]]]]]]]]]]]]]]]]]]|[Var|[]]],Line> when 'true' ->
	      %% Line 914
	      call 'io_lib':'format'
		  ([73|[110|[118|[97|[108|[105|[100|[32|[119|[105|[108|[100|[99|[97|[114|[100|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[116|[112|[126|[115|[32|[40|[111|[110|[108|[121|[32|[39|[95|[39|[32|[105|[115|[32|[97|[108|[108|[111|[119|[101|[100|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 915
																																									  [Var|[Line|[]]])
	  %% Line 916
	  <[[109|[105|[115|[115|[105|[110|[103|[95|[116|[121|[112|[101]]]]]]]]]]]]|[Expr|[]]],Line> when 'true' ->
	      %% Line 917
	      call 'io_lib':'format'
		  ([77|[105|[115|[115|[105|[110|[103|[32|[116|[121|[112|[101|[32|[111|[102|[32|[114|[101|[103|[117|[108|[97|[114|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[126|[116|[115|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 918
																																	 [Expr|[Line|[]]])
	  %% Line 919
	  <[[116|[121|[112|[101|[95|[109|[105|[115|[109|[97|[116|[99|[104]]]]]]]]]]]]]|[Expr|[]]],Line> when 'true' ->
	      %% Line 920
	      call 'io_lib':'format'
		  ([84|[121|[112|[101|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[32|[111|[102|[32|[99|[111|[110|[115|[116|[97|[110|[116|[126|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 921
																																						  [Line|[Expr|[]]])
	  %% Line 922
	  <[[105|[110|[118|[97|[108|[105|[100|[95|[111|[112|[101|[114|[97|[116|[111|[114]]]]]]]]]]]]]]]]|[Op|[]]],Line> when 'true' ->
	      %% Line 923
	      call 'io_lib':'format'
		  ([73|[110|[118|[97|[108|[105|[100|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[116|[112|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [Op|[Line|[]]])
	  %% Line 924
	  <Error,Line> when 'true' ->
	      let <_cor3> =
		  %% Line 925
		  call 'lists':'flatten'
		      (Error)
	      in  %% Line 925
		  call 'io_lib':'format'
		      ([80|[97|[114|[115|[101|[32|[101|[114|[114|[111|[114|[126|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]], [Line|[_cor3|[]]])
	end
'format_line'/1 =
    %% Line 927
    fun (_cor0) ->
	case _cor0 of
	  <-1> when 'true' ->
	      %% Line 928
	      [32|[97|[116|[32|[101|[110|[100|[32|[111|[102|[32|[115|[116|[114|[105|[110|[103]]]]]]]]]]]]]]]]]
	  %% Line 929
	  <0> when 'true' ->
	      %% Line 930
	      []
	  %% Line 931
	  <Line>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 932
	      call 'lists':'concat'
		  ([[32|[111|[110|[32|[108|[105|[110|[101|[32]]]]]]]]]|[Line|[]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'format_line',1}}] )
	    -| ['compiler_generated'] )
	end
'throw_error'/1 =
    %% Line 934
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 935
	    apply 'error'/1
		(_cor0)
	in  %% Line 935
	    call 'erlang':'throw'
		(_cor1)
'error'/1 =
    %% Line 937
    fun (_cor0) ->
	%% Line 938
	{'error','xref_compiler',_cor0}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xref_compiler')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xref_compiler', _cor0)
end