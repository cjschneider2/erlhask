module 'cover' ['analyse'/1,
		'analyse'/2,
		'analyse'/3,
		'analyse_to_file'/1,
		'analyse_to_file'/2,
		'analyse_to_file'/3,
		'analyze'/1,
		'analyze'/2,
		'analyze'/3,
		'analyze_to_file'/1,
		'analyze_to_file'/2,
		'analyze_to_file'/3,
		'async_analyse_to_file'/1,
		'async_analyse_to_file'/2,
		'async_analyse_to_file'/3,
		'async_analyze_to_file'/1,
		'async_analyze_to_file'/2,
		'async_analyze_to_file'/3,
		'compile'/1,
		'compile'/2,
		'compile_beam'/1,
		'compile_beam_directory'/0,
		'compile_beam_directory'/1,
		'compile_directory'/0,
		'compile_directory'/1,
		'compile_directory'/2,
		'compile_module'/1,
		'compile_module'/2,
		'export'/1,
		'export'/2,
		'flush'/1,
		'get_main_node'/0,
		'import'/1,
		'imported'/0,
		'imported_modules'/0,
		'is_compiled'/1,
		'main_process_loop'/1,
		'module_info'/0,
		'module_info'/1,
		'modules'/0,
		'remote_process_loop'/1,
		'remote_start'/1,
		'reset'/0,
		'reset'/1,
		'start'/0,
		'start'/1,
		'stop'/0,
		'stop'/1,
		'which_nodes'/0]
    attributes []
'start'/0 =
    %% Line 154
    fun () ->
	%% Line 155
	case call 'erlang':'whereis'
		 ('cover_server') of
	  %% Line 156
	  <'undefined'> when 'true' ->
	      let <Starter> =
		  %% Line 157
		  call 'erlang':'self'
		      ()
	      in  let <_cor1> =
		      %% Line 158
		      ( fun () ->
			    do  %% Line 159
				call 'erlang':'put'
				    ('start', [])
				%% Line 160
				apply 'init_main'/1
				    (Starter)
			-| [{'id',{0,0,'-start/0-fun-0-'}}] )
		  in  let <Pid> =
			  %% Line 158
			  call 'erlang':'spawn'
			      (_cor1)
		      in  let <Ref> =
			      %% Line 162
			      call 'erlang':'monitor'
				  ('process', Pid)
			  in  let <_cor4> =
				  %% Line 164
				  receive
				    %% Line 165
				    <{'cover_server','started'}> when 'true' ->
					%% Line 166
					{'ok',Pid}
				    %% Line 167
				    <{'DOWN',_cor7,_X_Type,_X_Object,Info}>
					when call 'erlang':'=:='
					      (_cor7,
					       Ref) ->
					%% Line 168
					{'error',Info}
				  after 'infinity' ->
				    'true'
			      in  do  %% Line 170
				      call 'erlang':'demonitor'
					  (Ref)
				      _cor4
	  %% Line 172
	  <Pid> when 'true' ->
	      %% Line 173
	      {'error',{'already_started',Pid}}
	end
'start'/1 =
    %% Line 179
    fun (_cor0) ->
	case _cor0 of
	  <Node>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 180
	      apply 'start'/1
		  ([Node|[]])
	  %% Line 181
	  <Nodes> when 'true' ->
	      let <_cor1> =
		  %% Line 182
		  apply 'remove_myself'/2
		      (Nodes, [])
	      in  %% Line 182
		  apply 'call'/1
		      ({'start_nodes',_cor1})
	end
'compile'/1 =
    %% Line 194
    fun (_cor0) ->
	%% Line 195
	apply 'compile_module'/2
	    (_cor0, [])
'compile'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	%% Line 197
	apply 'compile_module'/2
	    (_cor1, _cor0)
'compile_module'/1 =
    %% Line 198
    fun (_cor0) ->
	case _cor0 of
	  <ModFile>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(_cor0)
		in  let <_cor2> =
			%% Line 199
			call 'erlang':'is_list'
			    (_cor0)
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 200
	      apply 'compile_module'/2
		  (ModFile, [])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'compile_module',1}}] )
	    -| ['compiler_generated'] )
	end
'compile_module'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Module,Options>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Module)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Options)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 202
		  call 'erlang':'atom_to_list'
		      (Module)
	      in  %% Line 202
		  apply 'compile_module'/2
		      (_cor4, Options)
	  %% Line 203
	  <File,Options>
	      when let <_cor5> =
		    call 'erlang':'is_list'
			(File)
		in  let <_cor6> =
			call 'erlang':'is_list'
			    (Options)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor8> =
		  %% Line 204
		  case call 'filename':'extension'
			   (File) of
		    %% Line 205
		    <[46|[101|[114|[108]]]]> when 'true' ->
			%% Line 206
			File
		    %% Line 207
		    <_cor14> when 'true' ->
			%% Line 208
			call 'erlang':'++'
			    (File, [46|[101|[114|[108]]]])
		  end
	      in  let <AbsFile> =
		      %% Line 210
		      call 'filename':'absname'
			  (_cor8)
		  in  %% Line 211
		      case apply 'compile_modules'/2
			       ([AbsFile|[]], Options) of
			<[R|[]]> when 'true' ->
			    %% Line 212
			    R
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor11})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'compile_module',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_directory'/0 =
    %% Line 221
    fun () ->
	%% Line 222
	case call 'file':'get_cwd'
		 () of
	  %% Line 223
	  <{'ok',Dir}> when 'true' ->
	      %% Line 224
	      apply 'compile_directory'/2
		  (Dir, [])
	  %% Line 225
	  <Error> when 'true' ->
	      %% Line 226
	      Error
	end
'compile_directory'/1 =
    %% Line 228
    fun (_cor0) ->
	case _cor0 of
	  <Dir>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 229
	      apply 'compile_directory'/2
		  (Dir, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'compile_directory',1}}] )
	    -| ['compiler_generated'] )
	end
'compile_directory'/2 =
    %% Line 230
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,Options>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Dir)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Options)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 231
	      case call 'file':'list_dir'
		       (Dir) of
		%% Line 232
		<{'ok',Files}> when 'true' ->
		    let <_cor11> =
			%% Line 233
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[%% Line 234
					  File|_cor5]> when 'true' ->
					    let <_cor6> =
						%% Line 235
						call 'filename':'extension'
						    (File)
					    in  %% Line 235
						( case <> of
						    <>
							when call 'erlang':'=:='
							      (_cor6,
							       [46|[101|[114|[108]]]]) ->
							let <_cor8> =
							    call 'filename':'join'
								(Dir, File)
							in  let <_cor9> =
								apply 'lc$^0'/1
								    (_cor5)
							    in  ( [_cor8|_cor9]
								  -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor5)
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (%% Line 234
				   Files)
			  -| ['list_comprehension'] )
		    in  %% Line 236
			apply 'compile_modules'/2
			    (_cor11, Options)
		%% Line 237
		<Error> when 'true' ->
		    %% Line 238
		    Error
	      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'compile_directory',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_modules'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	let <Options2> =
	    %% Line 242
	    apply 'filter_options'/1
		(_cor0)
	in  %% Line 243
	    apply 'compile_modules'/3
		(_cor1, Options2, [])
'compile_modules'/3 =
    %% Line 245
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[File|Files],Options,Result> when 'true' ->
	      let <R> =
		  %% Line 246
		  apply 'call'/1
		      ({'compile',File,Options})
	      in  %% Line 247
		  apply 'compile_modules'/3
		      (Files, Options, [R|Result])
	  %% Line 248
	  <[],_X_Opts,Result> when 'true' ->
	      %% Line 249
	      call 'lists':'reverse'
		  (Result)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'compile_modules',3}}] )
	    -| ['compiler_generated'] )
	end
'filter_options'/1 =
    %% Line 251
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 252
	    ( fun (_cor2) ->
		  %% Line 253
		  case _cor2 of
		    %% Line 254
		    <{'i',Dir}>
			when call 'erlang':'is_list'
			      (Dir) ->
			'true'
		    %% Line 255
		    <{'d',_X_Macro}> when 'true' ->
			'true'
		    %% Line 256
		    <{'d',_X_Macro,_X_Value}> when 'true' ->
			'true'
		    %% Line 257
		    <'export_all'> when 'true' ->
			'true'
		    %% Line 258
		    <_cor6> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-filter_options/1-fun-0-'}}] )
	in  %% Line 252
	    call 'lists':'filter'
		(_cor4, _cor0)
'compile_beam'/1 =
    %% Line 267
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 268
	      case call 'code':'which'
		       (Module) of
		%% Line 269
		<'non_existing'> when 'true' ->
		    %% Line 270
		    {'error','non_existing'}
		%% Line 271
		<'cover_compiled'> when 'true' ->
		    %% Line 272
		    apply 'compile_beam'/2
			(Module, 'cover_compiled')
		%% Line 273
		<File> when 'true' ->
		    %% Line 274
		    apply 'compile_beam'/2
			(Module, File)
	      end
	  %% Line 276
	  <File>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <WithExt,WithoutExt> =
		  %% Line 278
		  case call 'filename':'rootname'
			   (File, [46|[98|[101|[97|[109]]]]]) of
		    %% Line 279
		    <_cor10>
			when call 'erlang':'=:='
			      (_cor10,
			       File) ->
			let <_cor2> =
			    %% Line 280
			    call 'erlang':'++'
				(File, [46|[98|[101|[97|[109]]]]])
			in  <_cor2,%% Line 280
				   File>
		    %% Line 281
		    <Rootname> when 'true' ->
			%% Line 282
			<File,Rootname>
		  end
	      in  let <AbsFile> =
		      %% Line 284
		      call 'filename':'absname'
			  (WithExt)
		  in  let <_cor7> =
			  %% Line 285
			  call 'filename':'basename'
			      (WithoutExt)
		      in  let <Module> =
			      %% Line 285
			      call 'erlang':'list_to_atom'
				  (_cor7)
			  in  %% Line 286
			      apply 'compile_beam'/2
				  (Module, AbsFile)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'compile_beam',1}}] )
	    -| ['compiler_generated'] )
	end
'compile_beam'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	%% Line 289
	apply 'call'/1
	    ({'compile_beam',_cor1,_cor0})
'compile_beam_directory'/0 =
    %% Line 297
    fun () ->
	%% Line 298
	case call 'file':'get_cwd'
		 () of
	  %% Line 299
	  <{'ok',Dir}> when 'true' ->
	      %% Line 300
	      apply 'compile_beam_directory'/1
		  (Dir)
	  %% Line 301
	  <Error> when 'true' ->
	      %% Line 302
	      Error
	end
'compile_beam_directory'/1 =
    %% Line 304
    fun (_cor0) ->
	case _cor0 of
	  <Dir>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 305
	      case call 'file':'list_dir'
		       (Dir) of
		%% Line 306
		<{'ok',Files}> when 'true' ->
		    let <_cor8> =
			%% Line 307
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[%% Line 308
					  File|_cor2]> when 'true' ->
					    let <_cor3> =
						%% Line 309
						call 'filename':'extension'
						    (File)
					    in  %% Line 309
						( case <> of
						    <>
							when call 'erlang':'=:='
							      (_cor3,
							       [46|[98|[101|[97|[109]]]]]) ->
							let <_cor5> =
							    call 'filename':'join'
								(Dir, File)
							in  let <_cor6> =
								apply 'lc$^0'/1
								    (_cor2)
							    in  ( [_cor5|_cor6]
								  -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor2)
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					<[]> when 'true' ->
					    []
					( <_cor4> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor4})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (%% Line 308
				   Files)
			  -| ['list_comprehension'] )
		    in  %% Line 310
			apply 'compile_beams'/1
			    (_cor8)
		%% Line 311
		<Error> when 'true' ->
		    %% Line 312
		    Error
	      end
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'compile_beam_directory',1}}] )
	    -| ['compiler_generated'] )
	end
'compile_beams'/1 =
    %% Line 315
    fun (_cor0) ->
	%% Line 316
	apply 'compile_beams'/2
	    (_cor0, [])
'compile_beams'/2 =
    %% Line 317
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[File|Files],Result> when 'true' ->
	      let <R> =
		  %% Line 318
		  apply 'compile_beam'/1
		      (File)
	      in  %% Line 319
		  apply 'compile_beams'/2
		      (Files, [R|Result])
	  %% Line 320
	  <[],Result> when 'true' ->
	      %% Line 321
	      call 'lists':'reverse'
		  (Result)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'compile_beams',2}}] )
	    -| ['compiler_generated'] )
	end
'analyse'/1 =
    %% Line 341
    fun (_cor0) ->
	%% Line 342
	apply 'analyse'/2
	    (_cor0, 'coverage')
'analyse'/2 =
    %% Line 343
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Module,Analysis>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Analysis, 'coverage')
		in  let <_cor3> =
			call 'erlang':'=:='
			    (Analysis, 'calls')
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 344
	      apply 'analyse'/3
		  (Module, Analysis, 'function')
	  %% Line 345
	  <Module,Level>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(Level, 'line')
		in  let <_cor5> =
			call 'erlang':'=:='
			    (Level, 'clause')
		    in  let <_cor6> =
			    call 'erlang':'=:='
				(Level, 'function')
			in  let <_cor7> =
				%% Line 346
				call 'erlang':'=:='
				    (Level, 'module')
			    in  let <_cor8> =
				    call 'erlang':'or'
					(_cor6, _cor7)
				in  let <_cor9> =
					call 'erlang':'or'
					    (_cor5, _cor8)
				    in  call 'erlang':'or'
					    (_cor4, _cor9) ->
	      %% Line 347
	      apply 'analyse'/3
		  (Module, 'coverage', Level)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'analyse',2}}] )
	    -| ['compiler_generated'] )
	end
'analyse'/3 =
    %% Line 348
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Module,Analysis,Level>
	      when let <_cor5> =
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (Module)
		    in  let <_cor4> =
			    %% Line 349
			    call 'erlang':'=:='
				(Analysis, 'coverage')
			in  call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor8> =
			let <_cor6> =
			    %% Line 349
			    call 'erlang':'=:='
				(Analysis, 'calls')
			in  let <_cor7> =
				%% Line 350
				call 'erlang':'=:='
				    (Level, 'line')
			    in  %% Line 349
				call 'erlang':'and'
				    (_cor6, _cor7)
		    in  let <_cor9> =
			    %% Line 350
			    call 'erlang':'=:='
				(Level, 'clause')
			in  let <_cor10> =
				%% Line 351
				call 'erlang':'=:='
				    (Level, 'function')
			    in  let <_cor11> =
				    %% Line 351
				    call 'erlang':'=:='
					(Level, 'module')
				in  let <_cor12> =
					%% Line 351
					call 'erlang':'or'
					    (_cor10, _cor11)
				    in  let <_cor13> =
					    %% Line 350
					    call 'erlang':'or'
						(_cor9, _cor12)
					in  let <_cor14> =
						%% Line 349
						call 'erlang':'or'
						    (_cor8, _cor13)
					    in  call 'erlang':'or'
						    (_cor5, _cor14) ->
	      %% Line 352
	      apply 'call'/1
		  ({{'analyse',Analysis,Level},Module})
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'analyse',3}}] )
	    -| ['compiler_generated'] )
	end
'analyze'/1 =
    %% Line 354
    fun (_cor0) ->
	apply 'analyse'/1
	    (_cor0)
'analyze'/2 =
    %% Line 355
    fun (_cor1,_cor0) ->
	apply 'analyse'/2
	    (_cor1, _cor0)
'analyze'/3 =
    %% Line 356
    fun (_cor2,_cor1,_cor0) ->
	apply 'analyse'/3
	    (_cor2, _cor1, _cor0)
'analyse_to_file'/1 =
    %% Line 370
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 371
		  apply 'outfilename'/2
		      (Module, [])
	      in  %% Line 371
		  apply 'analyse_to_file'/3
		      (Module, _cor1, [])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'analyse_to_file',1}}] )
	    -| ['compiler_generated'] )
	end
'analyse_to_file'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Module,[]>
	      when call 'erlang':'is_atom'
		    (Module) ->
	      let <_cor2> =
		  %% Line 373
		  apply 'outfilename'/2
		      (Module, [])
	      in  %% Line 373
		  apply 'analyse_to_file'/3
		      (Module, _cor2, [])
	  %% Line 374
	  <Module,Options>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (Module)
		    in  let <_cor4> =
			    %% Line 375
			    call 'erlang':'is_list'
				(Options)
			in  let <_cor5> =
				%% Line 375
				call 'erlang':'hd'
				    (Options)
			    in  let <_cor6> =
				    %% Line 375
				    call 'erlang':'is_atom'
					(_cor5)
				in  let <_cor7> =
					call 'erlang':'and'
					    (_cor4, _cor6)
				    in  call 'erlang':'and'
					    (_cor3, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 376
		  apply 'outfilename'/2
		      (Module, Options)
	      in  %% Line 376
		  apply 'analyse_to_file'/3
		      (Module, _cor8, Options)
	  %% Line 377
	  <Module,OutFile>
	      when let <_cor9> =
		    call 'erlang':'is_atom'
			(Module)
		in  let <_cor10> =
			call 'erlang':'is_list'
			    (OutFile)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 378
	      apply 'analyse_to_file'/3
		  (Module, OutFile, [])
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'analyse_to_file',2}}] )
	    -| ['compiler_generated'] )
	end
'analyse_to_file'/3 =
    %% Line 379
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Module,OutFile,Options>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Module)
		in  let <_cor4> =
			call 'erlang':'is_list'
			    (OutFile)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 380
	      apply 'call'/1
		  ({{'analyse_to_file',OutFile,Options},Module})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'analyse_to_file',3}}] )
	    -| ['compiler_generated'] )
	end
'analyze_to_file'/1 =
    %% Line 382
    fun (_cor0) ->
	apply 'analyse_to_file'/1
	    (_cor0)
'analyze_to_file'/2 =
    %% Line 383
    fun (_cor1,_cor0) ->
	apply 'analyse_to_file'/2
	    (_cor1, _cor0)
'analyze_to_file'/3 =
    %% Line 384
    fun (_cor2,_cor1,_cor0) ->
	%% Line 385
	apply 'analyse_to_file'/3
	    (_cor2, _cor1, _cor0)
'async_analyse_to_file'/1 =
    %% Line 387
    fun (_cor0) ->
	%% Line 388
	apply 'do_spawn'/3
	    ('cover', 'analyse_to_file', [_cor0|[]])
'async_analyse_to_file'/2 =
    %% Line 389
    fun (_cor1,_cor0) ->
	%% Line 390
	apply 'do_spawn'/3
	    ('cover', 'analyse_to_file', [_cor1|[_cor0|[]]])
'async_analyse_to_file'/3 =
    %% Line 391
    fun (_cor2,_cor1,_cor0) ->
	%% Line 392
	apply 'do_spawn'/3
	    ('cover', 'analyse_to_file', [_cor2|[_cor1|[_cor0|[]]]])
'do_spawn'/3 =
    %% Line 394
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 395
	    ( fun () ->
		  %% Line 396
		  case call 'erlang':'apply'
			   (_cor2, _cor1, _cor0) of
		    %% Line 397
		    <{'ok',_cor8}> when 'true' ->
			%% Line 398
			'ok'
		    %% Line 399
		    <{'error',Reason}> when 'true' ->
			%% Line 400
			call 'erlang':'exit'
			    (Reason)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-do_spawn/3-fun-0-'}}] )
	in  %% Line 395
	    call 'erlang':'spawn_link'
		(_cor4)
'async_analyze_to_file'/1 =
    %% Line 404
    fun (_cor0) ->
	%% Line 405
	apply 'async_analyse_to_file'/1
	    (_cor0)
'async_analyze_to_file'/2 =
    %% Line 406
    fun (_cor1,_cor0) ->
	%% Line 407
	apply 'async_analyse_to_file'/2
	    (_cor1, _cor0)
'async_analyze_to_file'/3 =
    %% Line 408
    fun (_cor2,_cor1,_cor0) ->
	%% Line 409
	apply 'async_analyse_to_file'/3
	    (_cor2, _cor1, _cor0)
'outfilename'/2 =
    %% Line 411
    fun (_cor1,_cor0) ->
	%% Line 412
	case call 'lists':'member'
		 ('html', _cor0) of
	  %% Line 413
	  <'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 414
		  call 'erlang':'atom_to_list'
		      (_cor1)
	      in  %% Line 414
		  call 'erlang':'++'
		      (_cor2, [46|[67|[79|[86|[69|[82|[46|[104|[116|[109|[108]]]]]]]]]]])
	  %% Line 415
	  <'false'> when 'true' ->
	      let <_cor3> =
		  %% Line 416
		  call 'erlang':'atom_to_list'
		      (_cor1)
	      in  %% Line 416
		  call 'erlang':'++'
		      (_cor3, [46|[67|[79|[86|[69|[82|[46|[111|[117|[116]]]]]]]]]])
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'export'/1 =
    %% Line 423
    fun (_cor0) ->
	%% Line 424
	apply 'export'/2
	    (_cor0, '_')
'export'/2 =
    %% Line 425
    fun (_cor1,_cor0) ->
	%% Line 426
	apply 'call'/1
	    ({'export',_cor1,_cor0})
'import'/1 =
    %% Line 430
    fun (_cor0) ->
	%% Line 431
	apply 'call'/1
	    ({'import',_cor0})
'modules'/0 =
    %% Line 435
    fun () ->
	%% Line 436
	apply 'call'/1
	    ('modules')
'imported_modules'/0 =
    %% Line 440
    fun () ->
	%% Line 441
	apply 'call'/1
	    ('imported_modules')
'imported'/0 =
    %% Line 445
    fun () ->
	%% Line 446
	apply 'call'/1
	    ('imported')
'which_nodes'/0 =
    %% Line 450
    fun () ->
	%% Line 451
	apply 'call'/1
	    ('which_nodes')
'is_compiled'/1 =
    %% Line 456
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 457
	      apply 'call'/1
		  ({'is_compiled',Module})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_compiled',1}}] )
	    -| ['compiler_generated'] )
	end
'reset'/1 =
    %% Line 463
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 464
	      apply 'call'/1
		  ({'reset',Module})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'reset',1}}] )
	    -| ['compiler_generated'] )
	end
'reset'/0 =
    %% Line 465
    fun () ->
	%% Line 466
	apply 'call'/1
	    ('reset')
'stop'/0 =
    %% Line 469
    fun () ->
	%% Line 470
	apply 'call'/1
	    ('stop')
'stop'/1 =
    %% Line 472
    fun (_cor0) ->
	case _cor0 of
	  <Node>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 473
	      apply 'stop'/1
		  ([Node|[]])
	  %% Line 474
	  <Nodes> when 'true' ->
	      let <_cor1> =
		  %% Line 475
		  apply 'remove_myself'/2
		      (Nodes, [])
	      in  %% Line 475
		  apply 'call'/1
		      ({'stop',_cor1})
	end
'flush'/1 =
    %% Line 481
    fun (_cor0) ->
	case _cor0 of
	  <Node>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 482
	      apply 'flush'/1
		  ([Node|[]])
	  %% Line 483
	  <Nodes> when 'true' ->
	      let <_cor1> =
		  %% Line 484
		  apply 'remove_myself'/2
		      (Nodes, [])
	      in  %% Line 484
		  apply 'call'/1
		      ({'flush',_cor1})
	end
'get_main_node'/0 =
    %% Line 487
    fun () ->
	%% Line 488
	apply 'call'/1
	    ('get_main_node')
'call'/1 =
    %% Line 500
    fun (_cor0) ->
	let <Ref> =
	    %% Line 501
	    call 'erlang':'monitor'
		('process', 'cover_server')
	in  %% Line 502
	    receive
	      <{'DOWN',_cor6,_X_Type,_X_Object,'noproc'}>
		  when call 'erlang':'=:='
			(_cor6,
			 Ref) ->
		  do  %% Line 503
		      call 'erlang':'demonitor'
			  (Ref)
		      do  %% Line 504
			  apply 'start'/0
			      ()
			  %% Line 505
			  apply 'call'/1
			      (_cor0)
	    after %% Line 506
		  0 ->
	      let <_cor2> =
		  %% Line 507
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 507
		      call 'erlang':'!'
			  ('cover_server', {_cor2,_cor0})
		      let <_cor3> =
			  %% Line 509
			  receive
			    %% Line 510
			    <{'DOWN',_cor7,_X_Type,_X_Object,Info}>
				when call 'erlang':'=:='
				      (_cor7,
				       Ref) ->
				%% Line 511
				call 'erlang':'exit'
				    (Info)
			    %% Line 512
			    <{'cover_server',Reply}> when 'true' ->
				%% Line 513
				Reply
			  after 'infinity' ->
			    'true'
		      in  do  %% Line 515
			      call 'erlang':'demonitor'
				  (Ref, ['flush'])
			      _cor3
'reply'/2 =
    %% Line 519
    fun (_cor1,_cor0) ->
	%% Line 520
	call 'erlang':'!'
	    (_cor1, {'cover_server',_cor0})
'is_from'/1 =
    %% Line 521
    fun (_cor0) ->
	%% Line 522
	call 'erlang':'is_pid'
	    (_cor0)
'remote_call'/2 =
    %% Line 524
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 525
	    call 'erlang':'monitor'
		('process', {'cover_server',_cor1})
	in  %% Line 526
	    receive
	      <{'DOWN',_cor8,_X_Type,_X_Object,'noproc'}>
		  when call 'erlang':'=:='
			(_cor8,
			 Ref) ->
		  do  %% Line 527
		      call 'erlang':'demonitor'
			  (Ref)
		      %% Line 528
		      {'error','node_dead'}
	    after %% Line 529
		  0 ->
	      do  %% Line 530
		  call 'erlang':'!'
		      ({'cover_server',_cor1}, _cor0)
		  let <_cor4> =
		      %% Line 532
		      receive
			%% Line 533
			<{'DOWN',_cor9,_X_Type,_X_Object,_X_Info}>
			    when call 'erlang':'=:='
				  (_cor9,
				   Ref) ->
			    %% Line 534
			    case _cor0 of
			      %% Line 535
			      <{'remote','stop'}> when 'true' ->
				  'ok'
			      %% Line 536
			      <_cor10> when 'true' ->
				  {'error','node_dead'}
			    end
			%% Line 538
			<{'cover_server',Reply}> when 'true' ->
			    %% Line 539
			    Reply
		      after 'infinity' ->
			'true'
		  in  do  %% Line 541
			  call 'erlang':'demonitor'
			      (Ref, ['flush'])
			  _cor4
'remote_reply'/2 =
    %% Line 545
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Proc,Reply>
	      when call 'erlang':'is_pid'
		    (Proc) ->
	      %% Line 546
	      call 'erlang':'!'
		  (Proc, {'cover_server',Reply})
	  %% Line 547
	  <MainNode,Reply> when 'true' ->
	      %% Line 548
	      call 'erlang':'!'
		  ({'cover_server',MainNode}, {'cover_server',Reply})
	end
'init_main'/1 =
    %% Line 554
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 555
	    call 'erlang':'self'
		()
	in  do  %% Line 555
		call 'erlang':'register'
		    ('cover_server', _cor1)
		do  %% Line 558
		    call 'ets':'new'
			('cover_internal_data_table', ['set'|['public'|['named_table'|[{'write_concurrency','true'}]]]])
		    do  %% Line 561
			call 'ets':'new'
			    ('cover_internal_clause_table', ['set'|['public'|['named_table']]])
			do  %% Line 562
			    call 'ets':'new'
				('cover_binary_code_table', ['set'|['named_table']])
			    do  %% Line 563
				call 'ets':'new'
				    ('cover_collected_remote_data_table', ['set'|['public'|['named_table']]])
				do  %% Line 564
				    call 'ets':'new'
					('cover_collected_remote_clause_table', ['set'|['public'|['named_table']]])
				    do  %% Line 565
					call 'net_kernel':'monitor_nodes'
					    ('true')
					do  %% Line 566
					    call 'erlang':'!'
						(_cor0, {'cover_server','started'})
					    %% Line 567
					    apply 'main_process_loop'/1
						({'main_state',[],[],'undefined',[],[]})
'main_process_loop'/1 =
    %% Line 569
    fun (_cor0) ->
	%% Line 570
	receive
	  %% Line 571
	  <{From,{'start_nodes',Nodes}}> when 'true' ->
	      %% Line 572
	      case apply 'do_start_nodes'/2
		       (Nodes, _cor0) of
		<{StartedNodes,State1}> when 'true' ->
		    do  %% Line 573
			apply 'reply'/2
			    (From, {'ok',StartedNodes})
			%% Line 574
			apply 'main_process_loop'/1
			    (State1)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 576
	  <{From,{'compile',File,Options}}> when 'true' ->
	      %% Line 577
	      case apply 'do_compile'/2
		       (File, Options) of
		%% Line 578
		<{'ok',Module}> when 'true' ->
		    %% Line 579
		    ( case _cor0 of
			( <( {'main_state',_cor155,_cor156,_cor157,_rec0,_cor158}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  apply 'remote_load_compiled'/2
				      (_rec0, [{Module,File}|[]])
				  do  %% Line 580
				      apply 'reply'/2
					  (From, {'ok',Module})
				      let <Compiled> =
					  %% Line 581
					  apply 'add_compiled'/3
					      (Module, File, _cor155)
				      in  let <Imported> =
					      %% Line 583
					      apply 'remove_imported'/2
						  (Module, _cor156)
					  in  let <_cor11> =
						  %% Line 585
						  call 'erlang':'setelement'
						      (3, _cor0, Imported)
					      in  let <_cor13> =
						      %% Line 584
						      call 'erlang':'setelement'
							  (2, _cor11, Compiled)
						  in  %% Line 588
						      call 'cover':'main_process_loop'
							  (_cor13)
			  -| ['compiler_generated'] )
			( <_cor159> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','main_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 589
		<'error'> when 'true' ->
		    do  %% Line 590
			apply 'reply'/2
			    (From, {'error',File})
			%% Line 591
			apply 'main_process_loop'/1
			    (_cor0)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 594
	  <{From,{'compile_beam',Module,BeamFile0}}> when 'true' ->
	      %% Line 595
	      ( case _cor0 of
		  ( <( {'main_state',_rec4,_cor176,_cor177,_cor178,_cor179}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 596
			case apply 'get_beam_file'/3
				 (Module, BeamFile0, _rec4) of
			  %% Line 597
			  <{'ok',BeamFile}> when 'true' ->
			      let <UserOptions> =
				  %% Line 598
				  apply 'get_compile_options'/2
				      (Module, BeamFile)
			      in  let <Reply,Compiled> =
				      %% Line 600
				      case apply 'do_compile_beam'/3
					       (Module, BeamFile, UserOptions) of
					%% Line 601
					<{'ok',_cor181}>
					    when call 'erlang':'=:='
						  (_cor181,
						   Module) ->
					    do  %% Line 602
						apply 'remote_load_compiled'/2
						    (_cor178, %% Line 603
							      [{Module,BeamFile}|[]])
						let <C> =
						    %% Line 604
						    apply 'add_compiled'/3
							(Module, BeamFile, _rec4)
						in  %% Line 605
						    <{'ok',Module},C>
					%% Line 606
					<'error'> when 'true' ->
					    %% Line 607
					    <{'error',BeamFile},_rec4>
					%% Line 608
					<{'error',Reason}> when 'true' ->
					    %% Line 609
					    <{'error',{Reason,BeamFile}},_rec4>
					( <_cor23> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor23})
					  -| ['compiler_generated'] )
				      end
				  in  do  %% Line 611
					  apply 'reply'/2
					      (From, Reply)
					  let <Imported> =
					      %% Line 612
					      apply 'remove_imported'/2
						  (Module, _cor176)
					  in  let <_cor30> =
						  %% Line 614
						  call 'erlang':'setelement'
						      (3, _cor0, Imported)
					      in  let <_cor32> =
						      %% Line 613
						      call 'erlang':'setelement'
							  (2, _cor30, Compiled)
						  in  %% Line 617
						      call 'cover':'main_process_loop'
							  (_cor32)
			  %% Line 618
			  <{'error','no_beam'}> when 'true' ->
			      do  %% Line 621
				  apply 'reply'/2
				      (From, %% Line 622
					     {'error',{'already_cover_compiled','no_beam_found',Module}})
				  %% Line 623
				  apply 'main_process_loop'/1
				      (_cor0)
			  ( <_cor34> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor34})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor180> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','main_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 626
	  <{From,{'export',OutFile,Module}}> when 'true' ->
	      let <_cor35> =
		  %% Line 627
		  ( fun () ->
			do  %% Line 628
			    call 'erlang':'put'
				('export', {OutFile,Module})
			    %% Line 629
			    apply 'do_export'/4
				(Module, OutFile, From, _cor0)
		    -| [{'id',{0,0,'-main_process_loop/1-fun-0-'}}] )
	      in  do  %% Line 627
		      call 'erlang':'spawn'
			  (_cor35)
		      %% Line 631
		      apply 'main_process_loop'/1
			  (_cor0)
	  %% Line 633
	  <{From,{'import',File}}> when 'true' ->
	      %% Line 634
	      case call 'file':'open'
		       (File, ['read'|['binary'|['raw']]]) of
		%% Line 635
		<{'ok',Fd}> when 'true' ->
		    %% Line 637
		    ( case _cor0 of
			( <( {'main_state',_cor198,_rec8,_cor199,_cor200,_cor201}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Imported> =
				  apply 'do_import_to_table'/3
				      (Fd, File, _rec8)
			      in  do  %% Line 638
				      apply 'reply'/2
					  (From, 'ok')
				      do  %% Line 639
					  call 'file':'close'
					      (Fd)
					  let <_cor41> =
					      %% Line 640
					      call 'erlang':'setelement'
						  (3, _cor0, Imported)
					  in  %% Line 640
					      apply 'main_process_loop'/1
						  (_cor41)
			  -| ['compiler_generated'] )
			( <_cor202> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','main_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 641
		<{'error',Reason}> when 'true' ->
		    do  %% Line 642
			apply 'reply'/2
			    (From, {'error',{'cant_open_file',File,Reason}})
			%% Line 643
			apply 'main_process_loop'/1
			    (_cor0)
		( <_cor42> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor42})
		  -| ['compiler_generated'] )
	      end
	  %% Line 646
	  <{From,'modules'}> when 'true' ->
	      %% Line 649
	      ( case _cor0 of
		  ( <( {'main_state',_cor209,_cor210,_cor211,_rec10,_cor212}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'get_compiled_still_loaded'/2
				 (_rec10, _cor209) of
			  <{LoadedModules,Compiled}> when 'true' ->
			      do  %% Line 652
				  apply 'reply'/2
				      (From, LoadedModules)
				  let <_cor50> =
				      %% Line 653
				      call 'erlang':'setelement'
					  (2, _cor0, Compiled)
				  in  %% Line 653
				      apply 'main_process_loop'/1
					  (_cor50)
			  ( <_cor47> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor47})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor213> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','main_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 655
	  <{From,'imported_modules'}> when 'true' ->
	      let <_cor55> =
		  %% Line 657
		  ( fun (_cor53) ->
			case _cor53 of
			  <{Mod,_X_File,_X_ImportFile}> when 'true' ->
			      Mod
			  ( <_cor54> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor54})
				  -| [{'function_name',{'-main_process_loop/1-fun-1-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-main_process_loop/1-fun-1-'}}] )
	      in  %% Line 658
		  ( case _cor0 of
		      ( <( {'main_state',_cor225,_rec13,_cor226,_cor227,_cor228}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <ImportedModules> =
				call 'lists':'map'
				    (_cor55, _rec13)
			    in  do  %% Line 659
				    apply 'reply'/2
					(From, ImportedModules)
				    %% Line 660
				    apply 'main_process_loop'/1
					(_cor0)
			-| ['compiler_generated'] )
		      ( <_cor229> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','main_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 662
	  <{From,'imported'}> when 'true' ->
	      %% Line 664
	      ( case _cor0 of
		  ( <( {'main_state',_cor230,_rec14,_cor231,_cor232,_cor233}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor59> =
			    apply 'get_all_importfiles'/2
				(_rec14, [])
			in  do  apply 'reply'/2
				    (From, _cor59)
				%% Line 665
				apply 'main_process_loop'/1
				    (_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor234> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','main_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 667
	  <{From,'which_nodes'}> when 'true' ->
	      %% Line 669
	      ( case _cor0 of
		  ( <( {'main_state',_cor235,_cor236,_cor237,_rec15,_cor238}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'reply'/2
				(From, _rec15)
			    %% Line 670
			    apply 'main_process_loop'/1
				(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor239> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','main_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 672
	  <{From,'reset'}> when 'true' ->
	      let <_cor68> =
		  %% Line 674
		  ( fun (_cor66) ->
			case _cor66 of
			  <{Module,_X_File}> when 'true' ->
			      %% Line 675
			      ( case _cor0 of
				  ( <( {'main_state',_cor240,_cor241,_cor242,_rec16,_cor243}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'do_reset_main_node'/2
					    (Module, _rec16)
				    -| ['compiler_generated'] )
				  ( <_cor244> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','main_state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor67> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor67})
				  -| [{'function_name',{'-main_process_loop/1-fun-2-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-main_process_loop/1-fun-2-'}}] )
	      in  %% Line 677
		  ( case _cor0 of
		      ( <( {'main_state',_rec17,_cor245,_cor246,_cor247,_cor248}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  call 'lists':'foreach'
				    (_cor68, _rec17)
				do  %% Line 678
				    apply 'reply'/2
					(From, 'ok')
				    let <_cor71> =
					%% Line 679
					call 'erlang':'setelement'
					    (3, _cor0, [])
				    in  %% Line 679
					apply 'main_process_loop'/1
					    (_cor71)
			-| ['compiler_generated'] )
		      ( <_cor249> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','main_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 681
	  <{From,{'stop',Nodes}}> when 'true' ->
	      do  %% Line 682
		  apply 'remote_collect'/3
		      ('_', Nodes, 'true')
		  do  %% Line 683
		      apply 'reply'/2
			  (From, 'ok')
		      %% Line 684
		      ( case _cor0 of
			  ( <( {'main_state',_cor256,_cor257,_cor258,_rec19,_cor259}
			       -| ['compiler_generated'] )> when 'true' ->
				let <Nodes1> =
				    call 'erlang':'--'
					(_rec19, Nodes)
				in  let <LostNodes1> =
					%% Line 685
					call 'erlang':'--'
					    (_cor259, Nodes)
				    in  let <_cor79> =
					    %% Line 687
					    call 'erlang':'setelement'
						(6, _cor0, LostNodes1)
					in  let <_cor81> =
						%% Line 686
						call 'erlang':'setelement'
						    (5, _cor79, Nodes1)
					    in  %% Line 686
						apply 'main_process_loop'/1
						    (_cor81)
			    -| ['compiler_generated'] )
			  ( <_cor260> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','main_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 689
	  <{From,{'flush',Nodes}}> when 'true' ->
	      do  %% Line 690
		  apply 'remote_collect'/3
		      ('_', Nodes, 'false')
		  do  %% Line 691
		      apply 'reply'/2
			  (From, 'ok')
		      %% Line 692
		      apply 'main_process_loop'/1
			  (_cor0)
	  %% Line 694
	  <{From,'stop'}> when 'true' ->
	      let <_cor86> =
		  %% Line 696
		  ( fun (_cor84) ->
			%% Line 697
			apply 'remote_call'/2
			    (_cor84, {'remote','stop'})
		    -| [{'id',{0,0,'-main_process_loop/1-fun-3-'}}] )
	      in  %% Line 699
		  ( case _cor0 of
		      ( <( {'main_state',_cor272,_cor273,_cor274,_rec22,_cor275}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  call 'lists':'foreach'
				    (_cor86, _rec22)
				do  %% Line 700
				    apply 'reload_originals'/1
					(_cor272)
				    do  %% Line 701
					call 'ets':'delete'
					    ('cover_internal_data_table')
					do  %% Line 702
					    call 'ets':'delete'
						('cover_internal_clause_table')
					    do  %% Line 703
						call 'ets':'delete'
						    ('cover_binary_code_table')
						do  %% Line 704
						    call 'ets':'delete'
							('cover_collected_remote_data_table')
						    do  %% Line 705
							call 'ets':'delete'
							    ('cover_collected_remote_clause_table')
							do  %% Line 706
							    call 'erlang':'unregister'
								('cover_server')
							    %% Line 707
							    apply 'reply'/2
								(From, 'ok')
			-| ['compiler_generated'] )
		      ( <_cor276> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','main_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 709
	  <{From,{{'analyse',Analysis,Level},Module}}> when 'true' ->
	      let <_cor95> =
		  %% Line 710
		  try
		      let <Loaded> =
			  %% Line 711
			  apply 'is_loaded'/2
			      (Module, _cor0)
		      in  let <_cor90> =
			      %% Line 712
			      ( fun () ->
				    do  %% Line 713
					call 'erlang':'put'
					    ('analyse', {Module,Analysis,Level})
					%% Line 714
					apply 'do_parallel_analysis'/6
					    (%% Line 715
					     Module, %% Line 715
						     Analysis, %% Line 715
							       Level, %% Line 716
								      Loaded, %% Line 716
									      From, _cor0)
				-| [{'id',{0,0,'-main_process_loop/1-fun-4-'}}] )
			  in  do  %% Line 712
				  call 'erlang':'spawn'
				      (_cor90)
				  _cor0
		  of <_cor91> ->
		      _cor91
		  catch <_cor94,_cor93,_cor92> ->
		      case <_cor94,_cor93,_cor92> of
			%% Line 719
			<'throw',Reason,_cor282> when 'true' ->
			    do  %% Line 720
				apply 'reply'/2
				    (From, {'error',{'not_cover_compiled',Module}})
				%% Line 721
				apply 'not_loaded'/3
				    (Module, Reason, _cor0)
			( <_cor94,_cor93,_cor92> when 'true' ->
			      primop 'raise'
				  (_cor92, _cor93)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 723
		  apply 'main_process_loop'/1
		      (_cor95)
	  %% Line 725
	  <{From,{{'analyse_to_file',OutFile,Opts},Module}}> when 'true' ->
	      let <_cor103> =
		  %% Line 726
		  try
		      let <Loaded> =
			  %% Line 727
			  apply 'is_loaded'/2
			      (Module, _cor0)
		      in  let <_cor98> =
			      %% Line 728
			      ( fun () ->
				    do  %% Line 729
					call 'erlang':'put'
					    ('analyse_to_file', %% Line 730
								{Module,OutFile,Opts})
					%% Line 731
					apply 'do_parallel_analysis_to_file'/6
					    (%% Line 732
					     Module, %% Line 732
						     OutFile, %% Line 732
							      Opts, %% Line 733
								    Loaded, %% Line 733
									    From, _cor0)
				-| [{'id',{0,0,'-main_process_loop/1-fun-5-'}}] )
			  in  do  %% Line 728
				  call 'erlang':'spawn'
				      (_cor98)
				  _cor0
		  of <_cor99> ->
		      _cor99
		  catch <_cor102,_cor101,_cor100> ->
		      case <_cor102,_cor101,_cor100> of
			%% Line 736
			<'throw',Reason,_cor283> when 'true' ->
			    do  %% Line 737
				apply 'reply'/2
				    (From, {'error',{'not_cover_compiled',Module}})
				%% Line 738
				apply 'not_loaded'/3
				    (Module, Reason, _cor0)
			( <_cor102,_cor101,_cor100> when 'true' ->
			      primop 'raise'
				  (_cor100, _cor101)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 740
		  apply 'main_process_loop'/1
		      (_cor103)
	  %% Line 742
	  <{From,{'is_compiled',Module}}> when 'true' ->
	      let <_cor110> =
		  %% Line 743
		  try
		      apply 'is_loaded'/2
			  (Module, _cor0)
		  of <_cor105> ->
		      case _cor105 of
			%% Line 744
			<{'loaded',File}> when 'true' ->
			    do  %% Line 745
				apply 'reply'/2
				    (From, {'file',File})
				_cor0
			%% Line 747
			<{'imported',_X_File,_X_ImportFiles}> when 'true' ->
			    do  %% Line 748
				apply 'reply'/2
				    (From, 'false')
				_cor0
			( <_cor106> when 'true' ->
			      primop 'match_fail'
				  ({'try_clause',_cor106})
			  -| ['compiler_generated'] )
		      end
		  catch <_cor109,_cor108,_cor107> ->
		      case <_cor109,_cor108,_cor107> of
			%% Line 750
			<'throw',Reason,_cor284> when 'true' ->
			    do  %% Line 751
				apply 'reply'/2
				    (From, 'false')
				%% Line 752
				apply 'not_loaded'/3
				    (Module, Reason, _cor0)
			( <_cor109,_cor108,_cor107> when 'true' ->
			      primop 'raise'
				  (_cor107, _cor108)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 754
		  apply 'main_process_loop'/1
		      (_cor110)
	  %% Line 756
	  <{From,{'reset',Module}}> when 'true' ->
	      let <_cor127> =
		  %% Line 757
		  try
		      let <Loaded> =
			  %% Line 758
			  apply 'is_loaded'/2
			      (Module, _cor0)
		      in  let <_cor116> =
			      %% Line 759
			      case Loaded of
				%% Line 760
				<{'loaded',_X_File}> when 'true' ->
				    %% Line 762
				    ( case _cor0 of
					( <( {'main_state',_cor285,_cor286,_cor287,_rec24,_cor288}
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'do_reset_main_node'/2
						  (Module, _rec24)
					  -| ['compiler_generated'] )
					( <_cor289> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','main_state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				%% Line 763
				<{'imported',_X_File,_cor290}> when 'true' ->
				    %% Line 764
				    apply 'do_reset_collection_table'/1
					(Module)
				( <_cor115> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor115})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 768
			      ( case _cor0 of
				  ( <( {'main_state',_cor291,_rec25,_cor292,_cor293,_cor294}
				       -| ['compiler_generated'] )> when 'true' ->
					let <Imported> =
					    apply 'remove_imported'/2
						(Module, _rec25)
					in  do  %% Line 769
						apply 'reply'/2
						    (From, _cor116)
						%% Line 770
						call 'erlang':'setelement'
						    (3, _cor0, Imported)
				    -| ['compiler_generated'] )
				  ( <_cor295> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','main_state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		  of <_cor123> ->
		      _cor123
		  catch <_cor126,_cor125,_cor124> ->
		      case <_cor126,_cor125,_cor124> of
			%% Line 771
			<'throw',Reason,_cor302> when 'true' ->
			    do  %% Line 772
				apply 'reply'/2
				    (From, {'error',{'not_cover_compiled',Module}})
				%% Line 773
				apply 'not_loaded'/3
				    (Module, Reason, _cor0)
			( <_cor126,_cor125,_cor124> when 'true' ->
			      primop 'raise'
				  (_cor124, _cor125)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 775
		  apply 'main_process_loop'/1
		      (_cor127)
	  %% Line 777
	  <{'DOWN',_X_MRef,'process',{'cover_server',Node},_X_Info}> when 'true' ->
	      %% Line 780
	      ( case _cor0 of
		  ( <( {'main_state',_cor303,_cor304,_cor305,_rec27,_cor306}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Nodes,Lost> =
			    case call 'lists':'member'
				     (Node, _rec27) of
			      %% Line 781
			      <'true'> when 'true' ->
				  let <N> =
				      %% Line 782
				      call 'erlang':'--'
					  (_rec27, [Node|[]])
				  in  let <L> =
					  %% Line 783
					  [Node|_cor306]
				      in  %% Line 784
					  <N,L>
			      %% Line 785
			      <'false'> when 'true' ->
				  %% Line 786
				  <_rec27,_cor306>
			      ( <_cor141> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor141})
				-| ['compiler_generated'] )
			    end
			in  let <_cor145> =
				%% Line 788
				call 'erlang':'setelement'
				    (6, _cor0, Lost)
			    in  let <_cor147> =
				    %% Line 788
				    call 'erlang':'setelement'
					(5, _cor145, Nodes)
				in  %% Line 788
				    apply 'main_process_loop'/1
					(_cor147)
		    -| ['compiler_generated'] )
		  ( <_cor307> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','main_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 790
	  <{'nodeup',Node}> when 'true' ->
	      %% Line 792
	      ( case _cor0 of
		  ( <( {'main_state',_cor334,_cor335,_cor336,_cor337,_rec33}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor151> =
			    case call 'lists':'member'
				     (Node, _rec33) of
			      %% Line 793
			      <'true'> when 'true' ->
				  %% Line 794
				  apply 'sync_compiled'/2
				      (Node, _cor0)
			      %% Line 795
			      <'false'> when 'true' ->
				  _cor0
			      ( <_cor150> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor150})
				-| ['compiler_generated'] )
			    end
			in  %% Line 798
			    apply 'main_process_loop'/1
				(_cor151)
		    -| ['compiler_generated'] )
		  ( <_cor338> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','main_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 800
	  <{'nodedown',_cor339}> when 'true' ->
	      %% Line 802
	      apply 'main_process_loop'/1
		  (_cor0)
	  %% Line 804
	  <{From,'get_main_node'}> when 'true' ->
	      let <_cor153> =
		  %% Line 805
		  call 'erlang':'node'
		      ()
	      in  do  %% Line 805
		      apply 'reply'/2
			  (From, _cor153)
		      %% Line 806
		      apply 'main_process_loop'/1
			  (_cor0)
	  %% Line 808
	  <'get_status'> when 'true' ->
	      do  %% Line 809
		  call 'io':'format'
		      ([126|[116|[112|[126|[110]]]]], [_cor0|[]])
		  %% Line 810
		  apply 'main_process_loop'/1
		      (_cor0)
	after 'infinity' ->
	  'true'
'init_remote'/2 =
    %% Line 817
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 818
	    call 'erlang':'self'
		()
	in  do  %% Line 818
		call 'erlang':'register'
		    ('cover_server', _cor2)
		do  %% Line 819
		    call 'ets':'new'
			('cover_internal_data_table', ['set'|['public'|['named_table']]])
		    do  %% Line 823
			call 'ets':'new'
			    ('cover_internal_clause_table', ['set'|['public'|['named_table']]])
			let <_cor3> =
			    %% Line 824
			    call 'erlang':'self'
				()
			in  do  %% Line 824
				call 'erlang':'!'
				    (_cor1, {_cor3,'started'})
				%% Line 825
				apply 'remote_process_loop'/1
				    ({'remote_state',[],_cor0})
'remote_process_loop'/1 =
    %% Line 829
    fun (_cor0) ->
	%% Line 830
	receive
	  %% Line 831
	  <{'remote','load_compiled',Compiled}> when 'true' ->
	      %% Line 832
	      ( case _cor0 of
		  ( <( {'remote_state',_rec34,_cor32}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Compiled1> =
			    apply 'load_compiled'/2
				(Compiled, _rec34)
			in  do  %% Line 833
				apply 'remote_reply'/2
				    (_cor32, 'ok')
				let <_cor8> =
				    %% Line 834
				    call 'erlang':'setelement'
					(2, _cor0, Compiled1)
				in  %% Line 834
				    call 'cover':'remote_process_loop'
					(_cor8)
		    -| ['compiler_generated'] )
		  ( <_cor33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','remote_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 836
	  <{'remote','unload',UnloadedModules}> when 'true' ->
	      do  %% Line 837
		  apply 'unload'/1
		      (UnloadedModules)
		  %% Line 839
		  ( case _cor0 of
		      ( <( {'remote_state',_rec37,_cor39}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Compiled> =
				apply 'update_compiled'/2
				    (UnloadedModules, _rec37)
			    in  do  %% Line 840
				    apply 'remote_reply'/2
					(_cor39, 'ok')
				    let <_cor16> =
					%% Line 841
					call 'erlang':'setelement'
					    (2, _cor0, Compiled)
				    in  %% Line 841
					apply 'remote_process_loop'/1
					    (_cor16)
			-| ['compiler_generated'] )
		      ( <_cor40> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','remote_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 843
	  <{'remote','reset',Module}> when 'true' ->
	      do  %% Line 844
		  apply 'do_reset'/1
		      (Module)
		  %% Line 845
		  ( case _cor0 of
		      ( <( {'remote_state',_cor46,_rec40}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  apply 'remote_reply'/2
				    (_rec40, 'ok')
				%% Line 846
				apply 'remote_process_loop'/1
				    (_cor0)
			-| ['compiler_generated'] )
		      ( <_cor47> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','remote_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 848
	  <{'remote','collect',Module,CollectorPid}> when 'true' ->
	      let <_cor19> =
		  %% Line 849
		  call 'erlang':'self'
		      ()
	      in  %% Line 849
		  call 'erlang':'!'
		      (_cor19, {'remote','collect',Module,CollectorPid,'cover_server'})
	  %% Line 851
	  <{'remote','collect',Module,CollectorPid,From}> when 'true' ->
	      let <_cor20> =
		  %% Line 852
		  ( fun () ->
			do  %% Line 853
			    call 'erlang':'put'
				('remote_collect', %% Line 854
						   {Module,CollectorPid,From})
			    %% Line 855
			    apply 'do_collect'/3
				(Module, CollectorPid, From)
		    -| [{'id',{0,0,'-remote_process_loop/1-fun-0-'}}] )
	      in  do  %% Line 852
		      call 'erlang':'spawn'
			  (_cor20)
		      %% Line 857
		      apply 'remote_process_loop'/1
			  (_cor0)
	  %% Line 859
	  <{'remote','stop'}> when 'true' ->
	      %% Line 860
	      ( case _cor0 of
		  ( <( {'remote_state',_rec41,_cor48}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'reload_originals'/1
				(_rec41)
			    do  %% Line 861
				call 'ets':'delete'
				    ('cover_internal_data_table')
				do  %% Line 862
				    call 'ets':'delete'
					('cover_internal_clause_table')
				    do  %% Line 863
					call 'erlang':'unregister'
					    ('cover_server')
					%% Line 864
					'ok'
		    -| ['compiler_generated'] )
		  ( <_cor49> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','remote_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 866
	  <{'remote','get_compiled'}> when 'true' ->
	      %% Line 867
	      ( case _cor0 of
		  ( <( {'remote_state',_cor50,_rec42}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'remote_reply'/2
				(_rec42, _cor50)
			    %% Line 869
			    apply 'remote_process_loop'/1
				(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor51> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','remote_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 871
	  <{From,'get_main_node'}> when 'true' ->
	      %% Line 872
	      ( case _cor0 of
		  ( <( {'remote_state',_cor54,_rec44}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'remote_reply'/2
				(From, _rec44)
			    %% Line 873
			    apply 'remote_process_loop'/1
				(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor55> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','remote_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 875
	  <'get_status'> when 'true' ->
	      do  %% Line 876
		  call 'io':'format'
		      ([126|[116|[112|[126|[110]]]]], [_cor0|[]])
		  %% Line 877
		  apply 'remote_process_loop'/1
		      (_cor0)
	  %% Line 879
	  <M> when 'true' ->
	      do  %% Line 880
		  call 'io':'format'
		      ([87|[65|[82|[78|[73|[78|[71|[58|[32|[114|[101|[109|[111|[116|[101|[32|[99|[111|[118|[101|[114|[95|[115|[101|[114|[118|[101|[114|[32|[114|[101|[99|[101|[105|[118|[101|[100|[10|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
		  do  %% Line 881
		      case M of
			%% Line 882
			<{From,_cor56}> when 'true' ->
			    %% Line 883
			    case apply 'is_from'/1
				     (From) of
			      %% Line 884
			      <'true'> when 'true' ->
				  %% Line 885
				  apply 'reply'/2
				      (From, {'error','not_main_node'})
			      %% Line 886
			      <'false'> when 'true' ->
				  'ok'
			      ( <_cor29> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor29})
				-| ['compiler_generated'] )
			    end
			%% Line 889
			<_cor57> when 'true' ->
			    'ok'
		      end
		      %% Line 892
		      apply 'remote_process_loop'/1
			  (_cor0)
	after 'infinity' ->
	  'true'
'do_collect'/3 =
    %% Line 896
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 898
	    case _cor2 of
	      %% Line 899
	      <'_'> when 'true' ->
		  call 'ets':'tab2list'
		      ('cover_internal_clause_table')
	      %% Line 900
	      <_cor15> when 'true' ->
		  call 'ets':'lookup'
		      ('cover_internal_clause_table', _cor2)
	    end
	in  let <_cor11> =
		%% Line 905
		( fun (_cor9) ->
		      case _cor9 of
			<{_X_Mod,Clauses}> when 'true' ->
			    let <_cor8> =
				%% Line 906
				( fun (_cor6) ->
				      %% Line 907
				      apply 'send_collected_data'/2
					  (_cor6, _cor1)
				  -| [{'id',{0,0,'-do_collect/3-fun-0-'}}] )
			    in  %% Line 906
				call 'lists':'map'
				    (_cor8, %% Line 908
					    Clauses)
			( <_cor10> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor10})
				-| [{'function_name',{'-do_collect/3-fun-1-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-do_collect/3-fun-1-'}}] )
	    in  do  %% Line 904
		    apply 'pmap'/2
			(_cor11, _cor4)
		    do  %% Line 910
			call 'erlang':'!'
			    (_cor1, 'done')
			%% Line 911
			apply 'remote_reply'/2
			    (_cor0, 'ok')
'send_collected_data'/2 =
    %% Line 913
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{M,F,A,C,_X_L},CollectorPid> when 'true' ->
	      let <Pattern> =
		  %% Line 915
		  {{'bump',M,F,A,C,'_'},'_'}
	      in  let <Bumps> =
		      %% Line 916
		      call 'ets':'match_object'
			  ('cover_internal_data_table', Pattern)
		  in  let <_cor6> =
			  %% Line 918
			  ( fun (_cor4) ->
				case _cor4 of
				  <{Bump,_X_N}> when 'true' ->
				      %% Line 919
				      call 'ets':'insert'
					  ('cover_internal_data_table', {Bump,0})
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'-send_collected_data/2-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-send_collected_data/2-fun-0-'}}] )
		      in  do  %% Line 918
			      call 'lists':'foreach'
				  (_cor6, %% Line 921
					  Bumps)
			      %% Line 922
			      call 'erlang':'!'
				  (CollectorPid, {'chunk',Bumps})
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'send_collected_data',2}}] )
	    -| ['compiler_generated'] )
	end
'reload_originals'/1 =
    %% Line 924
    fun (_cor0) ->
	case _cor0 of
	  <[{Module,_X_File}|Compiled]> when 'true' ->
	      do  %% Line 925
		  apply 'do_reload_original'/1
		      (Module)
		  %% Line 926
		  apply 'reload_originals'/1
		      (Compiled)
	  %% Line 927
	  <[]> when 'true' ->
	      %% Line 928
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'reload_originals',1}}] )
	    -| ['compiler_generated'] )
	end
'do_reload_original'/1 =
    %% Line 930
    fun (_cor0) ->
	%% Line 931
	case call 'code':'which'
		 (_cor0) of
	  %% Line 932
	  <'cover_compiled'> when 'true' ->
	      do  %% Line 933
		  call 'code':'purge'
		      (_cor0)
		  do  %% Line 934
		      call 'code':'delete'
			  (_cor0)
		      do  %% Line 939
			  call 'code':'load_file'
			      (_cor0)
			  %% Line 940
			  call 'code':'purge'
			      (_cor0)
	  %% Line 941
	  <_cor3> when 'true' ->
	      %% Line 942
	      'ignore'
	end
'load_compiled'/2 =
    %% Line 945
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Module,File,Binary,InitialTable}|Compiled],Acc> when 'true' ->
	      do  %% Line 948
		  apply 'insert_initial_data'/1
		      (InitialTable)
		  let <_cor3> =
		      %% Line 950
		      case call 'code':'load_binary'
			       (Module, 'cover_compiled', Binary) of
			%% Line 951
			<{'module',_cor7}>
			    when call 'erlang':'=:='
				  (_cor7,
				   Module) ->
			    %% Line 952
			    apply 'add_compiled'/3
				(Module, File, Acc)
			%% Line 953
			<_cor8> when 'true' ->
			    do  %% Line 954
				apply 'do_clear'/1
				    (Module)
				%% Line 955
				Acc
		      end
		  in  %% Line 957
		      apply 'load_compiled'/2
			  (Compiled, _cor3)
	  %% Line 958
	  <[],Acc> when 'true' ->
	      %% Line 959
	      Acc
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'load_compiled',2}}] )
	    -| ['compiler_generated'] )
	end
'insert_initial_data'/1 =
    %% Line 961
    fun (_cor0) ->
	case _cor0 of
	  <[Item|Items]>
	      when try
		    let <_cor1> =
			call 'erlang':'element'
			    (1, Item)
		    in  call 'erlang':'is_atom'
			    (_cor1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 962
		  call 'ets':'insert'
		      ('cover_internal_clause_table', Item)
		  %% Line 963
		  apply 'insert_initial_data'/1
		      (Items)
	  %% Line 964
	  <[Item|Items]> when 'true' ->
	      do  %% Line 965
		  call 'ets':'insert'
		      ('cover_internal_data_table', Item)
		  %% Line 966
		  apply 'insert_initial_data'/1
		      (Items)
	  %% Line 967
	  <[]> when 'true' ->
	      %% Line 968
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'insert_initial_data',1}}] )
	    -| ['compiler_generated'] )
	end
'unload'/1 =
    %% Line 971
    fun (_cor0) ->
	case _cor0 of
	  <[Module|Modules]> when 'true' ->
	      do  %% Line 972
		  apply 'do_clear'/1
		      (Module)
		  do  %% Line 973
		      apply 'do_reload_original'/1
			  (Module)
		      %% Line 974
		      apply 'unload'/1
			  (Modules)
	  %% Line 975
	  <[]> when 'true' ->
	      %% Line 976
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'unload',1}}] )
	    -| ['compiler_generated'] )
	end
'do_start_nodes'/2 =
    %% Line 984
    fun (_cor1,_cor0) ->
	let <ThisNode> =
	    %% Line 985
	    call 'erlang':'node'
		()
	in  let <_cor8> =
		%% Line 988
		( fun (_cor5,_cor4) ->
		      %% Line 989
		      case call 'rpc':'call'
			       (_cor5, 'cover', 'remote_start', [ThisNode|[]]) of
			%% Line 990
			<{'ok',_X_RPid}> when 'true' ->
			    do  %% Line 991
				call 'erlang':'monitor'
				    ('process', {'cover_server',_cor5})
				%% Line 992
				[_cor5|_cor4]
			%% Line 993
			<Error> when 'true' ->
			    do  %% Line 994
				call 'io':'format'
				    ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[99|[111|[118|[101|[114|[32|[111|[110|[32|[126|[119|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 995
																												 [_cor5|[Error|[]]])
				_cor4
		      end
		  -| [{'id',{0,0,'-do_start_nodes/2-fun-0-'}}] )
	    in  let <StartedNodes> =
		    %% Line 987
		    call 'lists':'foldl'
			(_cor8, %% Line 999
				[], _cor1)
		in  %% Line 1005
		    ( case _cor0 of
			( <( {'main_state',_cor25,_cor26,_cor27,_rec45,_cor28}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 'get_compiled_still_loaded'/2
				       (_rec45, _cor25) of
				<{_X_LoadedModules,Compiled}> when 'true' ->
				    do  %% Line 1007
					apply 'remote_load_compiled'/2
					    (StartedNodes, Compiled)
					let <_rec47> =
					    %% Line 1010
					    call 'erlang':'++'
						(_rec45, StartedNodes)
					in  let <_cor19> =
						%% Line 1010
						call 'erlang':'setelement'
						    (5, _cor0, _rec47)
					    in  let <_cor21> =
						    %% Line 1011
						    call 'erlang':'setelement'
							(2, _cor19, Compiled)
						in  %% Line 1012
						    {StartedNodes,_cor21}
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor14})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor29> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','main_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'remote_start'/1 =
    %% Line 1015
    fun (_cor0) ->
	%% Line 1016
	case call 'erlang':'whereis'
		 ('cover_server') of
	  %% Line 1017
	  <'undefined'> when 'true' ->
	      let <Starter> =
		  %% Line 1018
		  call 'erlang':'self'
		      ()
	      in  let <_cor2> =
		      %% Line 1019
		      ( fun () ->
			    do  %% Line 1020
				call 'erlang':'put'
				    ('remote_start', {_cor0})
				%% Line 1021
				apply 'init_remote'/2
				    (Starter, _cor0)
			-| [{'id',{0,0,'-remote_start/1-fun-0-'}}] )
		  in  let <Pid> =
			  %% Line 1019
			  call 'erlang':'spawn'
			      (_cor2)
		      in  let <Ref> =
			      %% Line 1023
			      call 'erlang':'monitor'
				  ('process', Pid)
			  in  let <_cor5> =
				  %% Line 1025
				  receive
				    %% Line 1026
				    <{_cor9,'started'}>
					when call 'erlang':'=:='
					      (_cor9,
					       Pid) ->
					%% Line 1027
					{'ok',Pid}
				    %% Line 1028
				    <{'DOWN',_cor10,_X_Type,_X_Object,Info}>
					when call 'erlang':'=:='
					      (_cor10,
					       Ref) ->
					%% Line 1029
					{'error',Info}
				  after 'infinity' ->
				    'true'
			      in  do  %% Line 1031
				      call 'erlang':'demonitor'
					  (Ref)
				      _cor5
	  %% Line 1033
	  <Pid> when 'true' ->
	      %% Line 1034
	      {'error',{'already_started',Pid}}
	end
'sync_compiled'/2 =
    %% Line 1040
    fun (_cor1,_cor0) ->
	%% Line 1041
	case _cor0 of
	  <{'main_state',Compiled0,_cor33,_cor34,Nodes,Lost}> when 'true' ->
	      let <_cor26> =
		  %% Line 1043
		  case apply 'remote_call'/2
			   (_cor1, {'remote','get_compiled'}) of
		    %% Line 1044
		    <{'error','node_dead'}> when 'true' ->
			%% Line 1045
			case apply 'do_start_nodes'/2
				 ([_cor1|[]], _cor0) of
			  <{_cor35,S}> when 'true' ->
			      %% Line 1046
			      S
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    %% Line 1047
		    <{'error',_cor36}> when 'true' ->
			_cor0
		    %% Line 1049
		    <RemoteCompiled> when 'true' ->
			%% Line 1050
			case apply 'get_compiled_still_loaded'/2
				 (Nodes, Compiled0) of
			  <{_cor37,Compiled}> when 'true' ->
			      let <_cor11> =
				  %% Line 1051
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor8) ->
						case _cor8 of
						  <[U = {UM,_cor38}|_cor6]> when 'true' ->
						      let <_cor7> =
							  %% Line 1052
							  call 'lists':'member'
							      (U, Compiled)
						      in  %% Line 1052
							  ( case <> of
							      <>
								  when call 'erlang':'=:='
									('false',
									 _cor7) ->
								  let <_cor9> =
								      apply 'lc$^0'/1
									  (_cor6)
								  in  ( [UM|_cor9]
									-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    apply 'lc$^0'/1
									(_cor6)
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
						  ( <[_cor5|_cor6]> when 'true' ->
							apply 'lc$^0'/1
							    (_cor6)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor8> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor8})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (RemoteCompiled)
				    -| ['list_comprehension'] )
			      in  do  %% Line 1053
				      apply 'remote_unload'/2
					  ([_cor1|[]], _cor11)
				      let <_cor19> =
					  %% Line 1054
					  ( letrec
						'lc$^1'/1 =
						    fun (_cor16) ->
							case _cor16 of
							  <[L|_cor14]> when 'true' ->
							      let <_cor15> =
								  %% Line 1055
								  call 'lists':'member'
								      (L, RemoteCompiled)
							      in  %% Line 1055
								  ( case <> of
								      <>
									  when call 'erlang':'=:='
										('false',
										 _cor15) ->
									  let <_cor17> =
									      apply 'lc$^1'/1
										  (_cor14)
									  in  ( [L|_cor17]
										-| ['compiler_generated'] )
								      ( <> when 'true' ->
									    apply 'lc$^1'/1
										(_cor14)
									-| ['compiler_generated'] )
								    end
								    -| ['list_comprehension'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor16> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor16})
								  -| [{'function_name',{'lc$^1',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^1'/1
						    (Compiled)
					    -| ['list_comprehension'] )
				      in  do  %% Line 1056
					      apply 'remote_load_compiled'/2
						  ([_cor1|[]], _cor19)
					      let <_rec50> =
						  %% Line 1057
						  [_cor1|Nodes]
					      in  let <_cor23> =
						      %% Line 1057
						      call 'erlang':'setelement'
							  (5, _cor0, _rec50)
						  in  %% Line 1057
						      call 'erlang':'setelement'
							  (2, _cor23, Compiled)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		  end
	      in  let <_rec52> =
		      %% Line 1059
		      call 'erlang':'--'
			  (Lost, [_cor1|[]])
		  in  %% Line 1059
		      case _cor26 of
			<{'main_state',_cor45,_cor46,_cor47,_cor48,_cor49}> when 'true' ->
			    call 'erlang':'setelement'
				(6, _cor26, _rec52)
			( <_cor50> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','main_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'remote_load_compiled'/2 =
    %% Line 1065
    fun (_cor1,_cor0) ->
	%% Line 1066
	apply 'remote_load_compiled'/4
	    (_cor1, _cor0, [], 0)
'remote_load_compiled'/4 =
    %% Line 1067
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Nodes,[],[],_X_ModNum> when 'true' ->
	      %% Line 1068
	      'ok'
	  %% Line 1069
	  <Nodes,Compiled,Acc,ModNum>
	      when let <_cor4> =
		    %% Line 1070
		    call 'erlang':'=:='
			(Compiled, [])
		in  let <_cor5> =
			%% Line 1070
			call 'erlang':'=='
			    (ModNum, 10)
		    in  %% Line 1070
			call 'erlang':'or'
			    (_cor4, _cor5) ->
	      let <_cor8> =
		  %% Line 1072
		  ( fun (_cor6) ->
			%% Line 1073
			apply 'remote_call'/2
			    (_cor6, {'remote','load_compiled',Acc})
		    -| [{'id',{0,0,'-remote_load_compiled/4-fun-0-'}}] )
	      in  do  %% Line 1071
		      call 'lists':'foreach'
			  (_cor8, %% Line 1075
				  Nodes)
		      %% Line 1076
		      apply 'remote_load_compiled'/4
			  (Nodes, Compiled, [], 0)
	  %% Line 1077
	  <Nodes,[MF|Rest],Acc,ModNum> when 'true' ->
	      let <_cor10> =
		  %% Line 1079
		  apply 'get_data_for_remote_loading'/1
		      (MF)
	      in  let <_cor9> =
		      %% Line 1079
		      call 'erlang':'+'
			  (ModNum, 1)
		  in  %% Line 1078
		      apply 'remote_load_compiled'/4
			  (%% Line 1079
			   Nodes, %% Line 1079
				  Rest, %% Line 1079
					[_cor10|Acc], _cor9)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'remote_load_compiled',4}}] )
	    -| ['compiler_generated'] )
	end
'get_data_for_remote_loading'/1 =
    %% Line 1084
    fun (_cor0) ->
	case _cor0 of
	  <{Module,File}> when 'true' ->
	      %% Line 1085
	      case call 'ets':'lookup'
		       ('cover_binary_code_table', Module) of
		<[{_cor7,Binary}|[]]>
		    when call 'erlang':'=:='
			  (_cor7,
			   Module) ->
		    let <_cor2> =
			%% Line 1087
			apply 'ms'/1
			    (Module)
		    in  let <InitialBumps> =
			    %% Line 1087
			    call 'ets':'select'
				('cover_internal_data_table', _cor2)
			in  let <InitialClauses> =
				%% Line 1088
				call 'ets':'lookup'
				    ('cover_internal_clause_table', Module)
			    in  let <_cor5> =
				    %% Line 1090
				    call 'erlang':'++'
					(InitialBumps, InitialClauses)
				in  %% Line 1090
				    {Module,File,Binary,_cor5}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'get_data_for_remote_loading',1}}] )
	    -| ['compiler_generated'] )
	end
'ms'/1 =
    %% Line 1094
    fun (_cor0) ->
	%% Line 1095
	[{{'$1','_'},[{'=:=',{'element',2,'$1'},{'const',_cor0}}|[]],[{{'$1',0}}]}|[]]
'remote_unload'/2 =
    %% Line 1100
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1102
	    ( fun (_cor2) ->
		  %% Line 1103
		  apply 'remote_call'/2
		      (_cor2, {'remote','unload',_cor0})
	      -| [{'id',{0,0,'-remote_unload/2-fun-0-'}}] )
	in  %% Line 1101
	    call 'lists':'foreach'
		(_cor4, _cor1)
'remote_reset'/2 =
    %% Line 1108
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1110
	    ( fun (_cor2) ->
		  %% Line 1111
		  apply 'remote_call'/2
		      (_cor2, {'remote','reset',_cor1})
	      -| [{'id',{0,0,'-remote_reset/2-fun-0-'}}] )
	in  %% Line 1109
	    call 'lists':'foreach'
		(_cor4, _cor0)
'remote_collect'/3 =
    %% Line 1116
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1117
	    ( fun (_cor3) ->
		  do  %% Line 1118
		      call 'erlang':'put'
			  ('remote_collect', %% Line 1119
					     {_cor2,_cor1,_cor0})
		      %% Line 1120
		      apply 'do_collection'/3
			  (_cor3, _cor2, _cor0)
	      -| [{'id',{0,0,'-remote_collect/3-fun-0-'}}] )
	in  %% Line 1117
	    apply 'pmap'/2
		(_cor5, _cor1)
'do_collection'/3 =
    %% Line 1124
    fun (_cor2,_cor1,_cor0) ->
	let <CollectorPid> =
	    %% Line 1125
	    call 'erlang':'spawn'
		(( 'collector_proc'/0
		   -| [{'id',{0,0,'-do_collection/3-fun-0-'}}] ))
	in  let <_cor4> =
		%% Line 1126
		call 'erlang':'self'
		    ()
	    in  %% Line 1126
		case apply 'remote_call'/2
			 (_cor2, {'remote','collect',_cor1,CollectorPid,_cor4}) of
		  %% Line 1127
		  <{'error','node_dead'}> when 'true' ->
		      do  %% Line 1128
			  call 'erlang':'!'
			      (CollectorPid, 'done')
			  %% Line 1129
			  'ok'
		  %% Line 1130
		  <'ok'>
		      when call 'erlang':'=:='
			    (_cor0,
			     'true') ->
		      %% Line 1131
		      apply 'remote_call'/2
			  (_cor2, {'remote','stop'})
		  %% Line 1132
		  <'ok'> when 'true' ->
		      %% Line 1133
		      'ok'
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'collector_proc'/0 =
    %% Line 1138
    fun () ->
	do  %% Line 1139
	    call 'erlang':'put'
		('collector_proc', [])
	    %% Line 1140
	    receive
	      %% Line 1141
	      <{'chunk',Chunk}> when 'true' ->
		  do  %% Line 1142
		      apply 'insert_in_collection_table'/1
			  (Chunk)
		      %% Line 1143
		      apply 'collector_proc'/0
			  ()
	      %% Line 1144
	      <'done'> when 'true' ->
		  %% Line 1145
		  'ok'
	    after 'infinity' ->
	      'true'
'insert_in_collection_table'/1 =
    %% Line 1148
    fun (_cor0) ->
	case _cor0 of
	  <[{Key,Val}|Chunk]> when 'true' ->
	      do  %% Line 1149
		  apply 'insert_in_collection_table'/2
		      (Key, Val)
		  %% Line 1150
		  apply 'insert_in_collection_table'/1
		      (Chunk)
	  %% Line 1151
	  <[]> when 'true' ->
	      %% Line 1152
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'insert_in_collection_table',1}}] )
	    -| ['compiler_generated'] )
	end
'insert_in_collection_table'/2 =
    %% Line 1154
    fun (_cor1,_cor0) ->
	%% Line 1155
	case call 'ets':'member'
		 ('cover_collected_remote_data_table', _cor1) of
	  %% Line 1156
	  <'true'> when 'true' ->
	      %% Line 1157
	      call 'ets':'update_counter'
		  ('cover_collected_remote_data_table', _cor1, _cor0)
	  %% Line 1159
	  <'false'> when 'true' ->
	      %% Line 1161
	      case call 'ets':'insert_new'
		       ('cover_collected_remote_data_table', {_cor1,_cor0}) of
		%% Line 1162
		<'false'> when 'true' ->
		    %% Line 1163
		    apply 'insert_in_collection_table'/2
			(_cor1, _cor0)
		%% Line 1164
		<_cor6> when 'true' ->
		    %% Line 1165
		    'ok'
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'remove_myself'/2 =
    %% Line 1170
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Node|Nodes],Acc>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (Node, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1171
	      apply 'remove_myself'/2
		  (Nodes, Acc)
	  %% Line 1172
	  <[Node|Nodes],Acc> when 'true' ->
	      %% Line 1173
	      apply 'remove_myself'/2
		  (Nodes, [Node|Acc])
	  %% Line 1174
	  <[],Acc> when 'true' ->
	      %% Line 1175
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'remove_myself',2}}] )
	    -| ['compiler_generated'] )
	end
'analyse_info'/2 =
    %% Line 1179
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Module,[]> when 'true' ->
	      %% Line 1180
	      'ok'
	  %% Line 1181
	  <Module,Imported> when 'true' ->
	      %% Line 1182
	      apply 'imported_info'/3
		  ([65|[110|[97|[108|[121|[115|[105|[115]]]]]]]], Module, Imported)
	end
'export_info'/2 =
    %% Line 1184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Module,[]> when 'true' ->
	      %% Line 1185
	      'ok'
	  %% Line 1186
	  <_X_Module,_X_Imported> when 'true' ->
	      %% Line 1188
	      'ok'
	end
'export_info'/1 =
    %% Line 1190
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1191
	      'ok'
	  %% Line 1192
	  <_X_Imported> when 'true' ->
	      %% Line 1194
	      'ok'
	end
'get_all_importfiles'/2 =
    %% Line 1196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_M,_X_F,ImportFiles}|Imported],Acc> when 'true' ->
	      let <NewAcc> =
		  %% Line 1197
		  apply 'do_get_all_importfiles'/2
		      (ImportFiles, Acc)
	      in  %% Line 1198
		  apply 'get_all_importfiles'/2
		      (Imported, NewAcc)
	  %% Line 1199
	  <[],Acc> when 'true' ->
	      %% Line 1200
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_all_importfiles',2}}] )
	    -| ['compiler_generated'] )
	end
'do_get_all_importfiles'/2 =
    %% Line 1202
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[ImportFile|ImportFiles],Acc> when 'true' ->
	      %% Line 1203
	      case call 'lists':'member'
		       (ImportFile, Acc) of
		%% Line 1204
		<'true'> when 'true' ->
		    %% Line 1205
		    apply 'do_get_all_importfiles'/2
			(ImportFiles, Acc)
		%% Line 1206
		<'false'> when 'true' ->
		    %% Line 1207
		    apply 'do_get_all_importfiles'/2
			(ImportFiles, [ImportFile|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1209
	  <[],Acc> when 'true' ->
	      %% Line 1210
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'do_get_all_importfiles',2}}] )
	    -| ['compiler_generated'] )
	end
'imported_info'/3 =
    %% Line 1212
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1213
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 1214
	  <{'value',{_cor7,_X_File,ImportFiles}}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor1) ->
	      %% Line 1215
	      call 'io':'format'
		  ([126|[116|[115|[32|[105|[110|[99|[108|[117|[100|[101|[115|[32|[100|[97|[116|[97|[32|[102|[114|[111|[109|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[105|[108|[101|[115|[10|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1216
																																      [_cor2|[ImportFiles|[]]])
	  %% Line 1217
	  <'false'> when 'true' ->
	      %% Line 1218
	      'ok'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'add_imported'/4 =
    %% Line 1223
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1224
	    call 'filename':'absname'
		(_cor1)
	in  %% Line 1224
	    apply 'add_imported'/5
		(_cor3, _cor2, _cor4, _cor0, [])
'add_imported'/5 =
    %% Line 1226
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <M,F1,ImportFile,[{_cor15,_X_F2,ImportFiles}|Imported],Acc>
	      when call 'erlang':'=:='
		    (_cor15,
		     M) ->
	      %% Line 1227
	      case call 'lists':'member'
		       (ImportFile, ImportFiles) of
		%% Line 1228
		<'true'> when 'true' ->
		    do  %% Line 1229
			call 'io':'fwrite'
			    ([87|[65|[82|[78|[73|[78|[71|[58|[32|[77|[111|[100|[117|[108|[101|[32|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[126|[116|[112|[126|[110|[78|[111|[116|[32|[105|[109|[112|[111|[114|[116|[105|[110|[103|[32|[97|[103|[97|[105|[110|[33|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1230
																																																			       [M|[ImportFile|[]]])
			%% Line 1231
			'dont_import'
		%% Line 1232
		<'false'> when 'true' ->
		    let <NewEntry> =
			%% Line 1233
			{M,F1,[ImportFile|ImportFiles]}
		    in  let <_cor6> =
			    %% Line 1234
			    call 'lists':'reverse'
				([NewEntry|Acc])
			in  let <_cor7> =
				%% Line 1234
				call 'erlang':'++'
				    (_cor6, Imported)
			    in  %% Line 1234
				{'ok',_cor7}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1236
	  <M,F,ImportFile,[H|Imported],Acc> when 'true' ->
	      %% Line 1237
	      apply 'add_imported'/5
		  (M, F, ImportFile, Imported, [H|Acc])
	  %% Line 1238
	  <M,F,ImportFile,[],Acc> when 'true' ->
	      let <_cor9> =
		  %% Line 1239
		  call 'lists':'reverse'
		      ([{M,F,[ImportFile|[]]}|Acc])
	      in  %% Line 1239
		  {'ok',_cor9}
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'add_imported',5}}] )
	    -| ['compiler_generated'] )
	end
'remove_imported'/2 =
    %% Line 1243
    fun (_cor1,_cor0) ->
	%% Line 1244
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 1245
	  <{'value',{_cor5,_cor6,ImportFiles}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      do  %% Line 1246
		  call 'io':'fwrite'
		      ([87|[65|[82|[78|[73|[78|[71|[58|[32|[68|[101|[108|[101|[116|[105|[110|[103|[32|[100|[97|[116|[97|[32|[102|[111|[114|[32|[109|[111|[100|[117|[108|[101|[32|[126|[119|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[126|[110|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1247
																																											    [_cor1|[ImportFiles|[]]])
		  %% Line 1248
		  call 'lists':'keydelete'
		      (_cor1, 1, _cor0)
	  %% Line 1249
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'add_compiled'/3 =
    %% Line 1255
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Module,File1,[{_cor7,_X_File2}|Compiled]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Module) ->
	      %% Line 1256
	      [{Module,File1}|Compiled]
	  %% Line 1257
	  <Module,File,[H|Compiled]> when 'true' ->
	      let <_cor3> =
		  %% Line 1258
		  apply 'add_compiled'/3
		      (Module, File, Compiled)
	      in  %% Line 1258
		  [H|_cor3]
	  %% Line 1259
	  <Module,File,[]> when 'true' ->
	      %% Line 1260
	      [{Module,File}|[]]
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'add_compiled',3}}] )
	    -| ['compiler_generated'] )
	end
'is_loaded'/2 =
    %% Line 1262
    fun (_cor1,_cor0) ->
	%% Line 1263
	( case _cor0 of
	    ( <( {'main_state',_rec54,_cor11,_cor12,_cor13,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'get_file'/2
			   (_cor1, _rec54) of
		    %% Line 1264
		    <{'ok',File}> when 'true' ->
			%% Line 1265
			case call 'code':'which'
				 (_cor1) of
			  %% Line 1266
			  <'cover_compiled'> when 'true' ->
			      {'loaded',File}
			  %% Line 1267
			  <_cor16> when 'true' ->
			      call 'erlang':'throw'
				  ('unloaded')
			end
		    %% Line 1269
		    <'false'> when 'true' ->
			%% Line 1270
			case apply 'get_file'/2
				 (_cor1, _cor11) of
			  %% Line 1271
			  <{'ok',File,ImportFiles}> when 'true' ->
			      %% Line 1272
			      {'imported',File,ImportFiles}
			  %% Line 1273
			  <'false'> when 'true' ->
			      %% Line 1274
			      call 'erlang':'throw'
				  ('not_loaded')
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','main_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_file'/2 =
    %% Line 1278
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Module,[{_cor4,File}|_X_T]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Module) ->
	      %% Line 1279
	      {'ok',File}
	  %% Line 1280
	  <Module,[{_cor5,File,ImportFiles}|_X_T]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Module) ->
	      %% Line 1281
	      {'ok',File,ImportFiles}
	  %% Line 1282
	  <Module,[_X_H|T]> when 'true' ->
	      %% Line 1283
	      apply 'get_file'/2
		  (Module, T)
	  %% Line 1284
	  <_X_Module,[]> when 'true' ->
	      %% Line 1285
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_file',2}}] )
	    -| ['compiler_generated'] )
	end
'get_beam_file'/3 =
    %% Line 1287
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Module,'cover_compiled',Compiled> when 'true' ->
	      %% Line 1288
	      case call 'lists':'keysearch'
		       (Module, 1, Compiled) of
		<{'value',{_cor8,File}}>
		    when call 'erlang':'=:='
			  (_cor8,
			   Module) ->
		    %% Line 1289
		    case call 'filename':'extension'
			     (File) of
		      %% Line 1290
		      <[46|[101|[114|[108]]]]> when 'true' ->
			  {'error','no_beam'}
		      %% Line 1291
		      <[46|[98|[101|[97|[109]]]]]> when 'true' ->
			  {'ok',File}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1293
	  <_X_Module,BeamFile,_X_Compiled> when 'true' ->
	      %% Line 1294
	      {'ok',BeamFile}
	end
'get_modules'/1 =
    %% Line 1296
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1297
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{Module,_X_File}> when 'true' ->
			Module
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-get_modules/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-get_modules/1-fun-0-'}}] )
	in  %% Line 1297
	    call 'lists':'map'
		(_cor3, _cor0)
'update_compiled'/2 =
    %% Line 1299
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Module|Modules],[{_cor5,_X_File}|Compiled]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Module) ->
	      %% Line 1300
	      apply 'update_compiled'/2
		  (Modules, Compiled)
	  %% Line 1301
	  <Modules,[H|Compiled]> when 'true' ->
	      let <_cor2> =
		  %% Line 1302
		  apply 'update_compiled'/2
		      (Modules, Compiled)
	      in  %% Line 1302
		  [H|_cor2]
	  %% Line 1303
	  <_X_Modules,[]> when 'true' ->
	      %% Line 1304
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'update_compiled',2}}] )
	    -| ['compiler_generated'] )
	end
'get_compiled_still_loaded'/2 =
    %% Line 1308
    fun (_cor1,_cor0) ->
	let <CompiledModules> =
	    %% Line 1310
	    apply 'get_modules'/1
		(_cor0)
	in  let <_cor6> =
		%% Line 1311
		( fun (_cor4) ->
		      %% Line 1312
		      case call 'code':'which'
			       (_cor4) of
			%% Line 1313
			<'cover_compiled'> when 'true' ->
			    'true'
			%% Line 1314
			<_cor17> when 'true' ->
			    'false'
		      end
		  -| [{'id',{0,0,'-get_compiled_still_loaded/2-fun-0-'}}] )
	    in  let <LoadedModules> =
		    %% Line 1311
		    call 'lists':'filter'
			(_cor6, %% Line 1317
				CompiledModules)
		in  let <UnloadedModules> =
			%% Line 1320
			call 'erlang':'--'
			    (CompiledModules, LoadedModules)
		    in  let <_cor13> =
			    %% Line 1322
			    case UnloadedModules of
			      %% Line 1323
			      <[]> when 'true' ->
				  _cor0
			      %% Line 1325
			      <_cor18> when 'true' ->
				  let <_cor11> =
				      %% Line 1326
				      ( fun (_cor9) ->
					    apply 'do_clear'/1
						(_cor9)
					-| [{'id',{0,0,'-get_compiled_still_loaded/2-fun-1-'}}] )
				  in  do  %% Line 1326
					  call 'lists':'foreach'
					      (_cor11, %% Line 1327
						       UnloadedModules)
					  do  %% Line 1328
					      apply 'remote_unload'/2
						  (_cor1, UnloadedModules)
					      %% Line 1329
					      apply 'update_compiled'/2
						  (UnloadedModules, _cor0)
			    end
			in  %% Line 1331
			    {LoadedModules,_cor13}
'do_compile'/2 =
    %% Line 1337
    fun (_cor1,_cor0) ->
	let <Options> =
	    %% Line 1338
	    ['debug_info'|['binary'|['report_errors'|['report_warnings'|_cor0]]]]
	in  %% Line 1339
	    case call 'compile':'file'
		     (_cor1, Options) of
	      %% Line 1340
	      <{'ok',Module,Binary}> when 'true' ->
		  %% Line 1341
		  apply 'do_compile_beam'/3
		      (Module, Binary, _cor0)
	      %% Line 1342
	      <'error'> when 'true' ->
		  %% Line 1343
		  'error'
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'do_compile_beam'/3 =
    %% Line 1347
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1349
	    apply 'do_clear'/1
		(_cor2)
	    %% Line 1355
	    case apply 'get_abstract_code'/2
		     (_cor2, _cor1) of
	      %% Line 1356
	      <E = 'no_abstract_code'> when 'true' ->
		  %% Line 1357
		  {'error',E}
	      %% Line 1358
	      <E = 'encrypted_abstract_code'> when 'true' ->
		  %% Line 1359
		  {'error',E}
	      %% Line 1360
	      <{'raw_abstract_v1',Code}> when 'true' ->
		  let <Forms0> =
		      %% Line 1361
		      call 'epp':'interpret_file_attribute'
			  (Code)
		  in  %% Line 1362
		      case apply 'transform'/2
			       (Forms0, _cor2) of
			<{Forms,Vars}> when 'true' ->
			    let <SourceInfo> =
				%% Line 1367
				apply 'get_source_info'/2
				    (_cor2, _cor1)
			    in  let <_cor6> =
				    %% Line 1372
				    call 'erlang':'++'
					(SourceInfo, _cor0)
				in  %% Line 1372
				    case call 'compile':'forms'
					     (Forms, _cor6) of
				      <{'ok',_cor16,Binary}>
					  when call 'erlang':'=:='
						(_cor16,
						 _cor2) ->
					  %% Line 1373
					  case call 'code':'load_binary'
						   (_cor2, 'cover_compiled', Binary) of
					    %% Line 1374
					    <{'module',_cor17}>
						when call 'erlang':'=:='
						      (_cor17,
						       _cor2) ->
						%% Line 1377
						( case Vars of
						    ( <( {'vars',_cor18,_rec56,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <InitInfo> =
							      call 'lists':'reverse'
								  (_rec56)
							  in  do  %% Line 1378
								  call 'ets':'insert'
								      ('cover_internal_clause_table', {_cor2,InitInfo})
								  do  %% Line 1381
								      call 'ets':'insert'
									  ('cover_binary_code_table', {_cor2,Binary})
								      %% Line 1383
								      {'ok',_cor2}
						      -| ['compiler_generated'] )
						    ( <_cor26> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','vars'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    %% Line 1385
					    <_X_Error> when 'true' ->
						do  %% Line 1386
						    apply 'do_clear'/1
							(_cor2)
						    %% Line 1387
						    'error'
					  end
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	      %% Line 1389
	      <{_X_VSN,_X_Code}> when 'true' ->
		  %% Line 1392
		  {'error','no_abstract_code'}
	      ( <_cor12> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor12})
		-| ['compiler_generated'] )
	    end
'get_abstract_code'/2 =
    %% Line 1395
    fun (_cor1,_cor0) ->
	%% Line 1396
	case call 'beam_lib':'chunks'
		 (_cor0, ['abstract_code']) of
	  %% Line 1397
	  <{'ok',{_cor5,[{'abstract_code',AbstractCode}|[]]}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 1398
	      AbstractCode
	  %% Line 1399
	  <{'error','beam_lib',{'key_missing_or_invalid',_cor6,_cor7}}> when 'true' ->
	      %% Line 1400
	      'encrypted_abstract_code'
	  %% Line 1401
	  <Error> when 'true' ->
	      Error
	end
'get_source_info'/2 =
    %% Line 1404
    fun (_cor1,_cor0) ->
	let <Compile> =
	    %% Line 1405
	    apply 'get_compile_info'/2
		(_cor1, _cor0)
	in  %% Line 1406
	    case call 'lists':'keyfind'
		     ('source', 1, Compile) of
	      %% Line 1407
	      <Tuple = {'source',_cor6}> when 'true' ->
		  [Tuple|[]]
	      %% Line 1408
	      <'false'> when 'true' ->
		  []
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'get_compile_options'/2 =
    %% Line 1411
    fun (_cor1,_cor0) ->
	let <Compile> =
	    %% Line 1412
	    apply 'get_compile_info'/2
		(_cor1, _cor0)
	in  %% Line 1413
	    case call 'lists':'keyfind'
		     ('options', 1, Compile) of
	      %% Line 1414
	      <{'options',Options}> when 'true' ->
		  apply 'filter_options'/1
		      (Options)
	      %% Line 1415
	      <'false'> when 'true' ->
		  []
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'get_compile_info'/2 =
    %% Line 1418
    fun (_cor1,_cor0) ->
	%% Line 1419
	case call 'beam_lib':'chunks'
		 (_cor0, ['compile_info']) of
	  %% Line 1420
	  <{'ok',{_cor5,[{'compile_info',Compile}|[]]}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 1421
	      Compile
	  %% Line 1422
	  <_cor6> when 'true' ->
	      %% Line 1423
	      []
	end
'transform'/2 =
    %% Line 1426
    fun (_cor1,_cor0) ->
	let <MainFile> =
	    %% Line 1427
	    apply 'find_main_filename'/1
		(_cor1)
	in  let <Vars0> =
		%% Line 1428
		{'vars',_cor0,[],'undefined','undefined','undefined','undefined','undefined','undefined','false'}
	    in  %% Line 1429
		case apply 'transform_2'/5
			 (_cor1, [], Vars0, MainFile, 'on') of
		  <{'ok',MungedForms,Vars}> when 'true' ->
		      %% Line 1430
		      {MungedForms,Vars}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'find_main_filename'/1 =
    %% Line 1434
    fun (_cor0) ->
	case _cor0 of
	  <[{'attribute',_cor2,'file',{MainFile,_cor3}}|_cor4]> when 'true' ->
	      %% Line 1435
	      MainFile
	  %% Line 1436
	  <[_cor5|Rest]> when 'true' ->
	      %% Line 1437
	      apply 'find_main_filename'/1
		  (Rest)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'find_main_filename',1}}] )
	    -| ['compiler_generated'] )
	end
'transform_2'/5 =
    %% Line 1439
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Form0|Forms],MungedForms,Vars,MainFile,Switch> when 'true' ->
	      let <Form> =
		  %% Line 1440
		  apply 'expand'/1
		      (Form0)
	      in  %% Line 1441
		  case apply 'munge'/4
			   (Form, Vars, MainFile, Switch) of
		    %% Line 1442
		    <'ignore'> when 'true' ->
			%% Line 1443
			apply 'transform_2'/5
			    (Forms, MungedForms, Vars, MainFile, Switch)
		    %% Line 1444
		    <{MungedForm,Vars2,NewSwitch}> when 'true' ->
			%% Line 1445
			apply 'transform_2'/5
			    (Forms, [MungedForm|MungedForms], Vars2, MainFile, NewSwitch)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1447
	  <[],MungedForms,Vars,_cor13,_cor14> when 'true' ->
	      let <_cor7> =
		  %% Line 1448
		  call 'lists':'reverse'
		      (MungedForms)
	      in  %% Line 1448
		  {'ok',_cor7,Vars}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'transform_2',5}}] )
	    -| ['compiler_generated'] )
	end
'expand'/1 =
    %% Line 1451
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1452
	    apply 'vars'/2
		([], _cor0)
	in  let <_cor2> =
		%% Line 1452
		call 'ordsets':'to_list'
		    (_cor1)
	    in  let <AllVars> =
		    %% Line 1452
		    call 'sets':'from_list'
			(_cor2)
		in  %% Line 1453
		    case apply 'expand'/3
			     (_cor0, AllVars, 1) of
		      <{Expr1,_cor6}> when 'true' ->
			  %% Line 1454
			  Expr1
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
'expand'/3 =
    %% Line 1456
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'clause',Line,Pattern,Guards,Body},Vs,N> when 'true' ->
	      %% Line 1457
	      case apply 'expand'/3
		       (Body, Vs, N) of
		<{ExpandedBody,N2}> when 'true' ->
		    %% Line 1458
		    {{'clause',Line,Pattern,Guards,ExpandedBody},N2}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1459
	  <{'op',_X_Line,'andalso',ExprL,ExprR},Vs,N> when 'true' ->
	      %% Line 1460
	      case apply 'expand'/3
		       (ExprL, Vs, N) of
		<{ExpandedExprL,N2}> when 'true' ->
		    %% Line 1461
		    case apply 'expand'/3
			     (ExprR, Vs, N2) of
		      <{ExpandedExprR,N3}> when 'true' ->
			  let <LineL> =
			      %% Line 1462
			      call 'erlang':'element'
				  (2, ExpandedExprL)
			  in  let <_cor8> =
				  %% Line 1463
				  apply 'bool_switch'/5
				      (ExpandedExprL, %% Line 1464
						      ExpandedExprR, %% Line 1465
								     {'atom',LineL,'false'}, %% Line 1466
											     Vs, %% Line 1466
												 N3)
			      in  let <_cor7> =
				      %% Line 1467
				      call 'erlang':'+'
					  (N3, 1)
				  in  %% Line 1463
				      {_cor8,_cor7}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1468
	  <{'op',_X_Line,'orelse',ExprL,ExprR},Vs,N> when 'true' ->
	      %% Line 1469
	      case apply 'expand'/3
		       (ExprL, Vs, N) of
		<{ExpandedExprL,N2}> when 'true' ->
		    %% Line 1470
		    case apply 'expand'/3
			     (ExprR, Vs, N2) of
		      <{ExpandedExprR,N3}> when 'true' ->
			  let <LineL> =
			      %% Line 1471
			      call 'erlang':'element'
				  (2, ExpandedExprL)
			  in  let <_cor13> =
				  %% Line 1472
				  apply 'bool_switch'/5
				      (ExpandedExprL, %% Line 1473
						      {'atom',LineL,'true'}, %% Line 1474
									     ExpandedExprR, %% Line 1475
											    Vs, %% Line 1475
												N3)
			      in  let <_cor12> =
				      %% Line 1476
				      call 'erlang':'+'
					  (N3, 1)
				  in  %% Line 1472
				      {_cor13,_cor12}
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1477
	  <T,Vs,N>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor14> =
		  %% Line 1478
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 1478
		  case apply 'expand'/3
			   (_cor14, Vs, N) of
		    <{TL,N2}> when 'true' ->
			let <_cor16> =
			    %% Line 1479
			    call 'erlang':'list_to_tuple'
				(TL)
			in  %% Line 1479
			    {_cor16,N2}
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1480
	  <[E|Es],Vs,N> when 'true' ->
	      %% Line 1481
	      case apply 'expand'/3
		       (E, Vs, N) of
		<{E2,N2}> when 'true' ->
		    %% Line 1482
		    case apply 'expand'/3
			     (Es, Vs, N2) of
		      <{Es2,N3}> when 'true' ->
			  %% Line 1483
			  {[E2|Es2],N3}
		      ( <_cor18> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor18})
			-| ['compiler_generated'] )
		    end
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1484
	  <T,_X_Vs,N> when 'true' ->
	      %% Line 1485
	      {T,N}
	end
'vars'/2 =
    %% Line 1487
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,{'var',_cor6,V}>
	      when call 'erlang':'=/='
		    (V,
		     '_') ->
	      %% Line 1488
	      [V|A]
	  %% Line 1489
	  <A,T>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor2> =
		  %% Line 1490
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 1490
		  apply 'vars'/2
		      (A, _cor2)
	  %% Line 1491
	  <A,[E|Es]> when 'true' ->
	      let <_cor3> =
		  %% Line 1492
		  apply 'vars'/2
		      (A, E)
	      in  %% Line 1492
		  apply 'vars'/2
		      (_cor3, Es)
	  %% Line 1493
	  <A,_X_T> when 'true' ->
	      %% Line 1494
	      A
	end
'bool_switch'/5 =
    %% Line 1496
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Line> =
	    %% Line 1497
	    call 'erlang':'element'
		(2, _cor4)
	in  let <_cor6> =
		%% Line 1498
		apply 'aux_var'/2
		    (_cor1, _cor0)
	    in  let <AuxVar> = {%% Line 1498
		     'var',%% Line 1498
			   Line,_cor6}
		in  %% Line 1499
		    {'case',Line,_cor4,%% Line 1500
				       [{'clause',Line,[{'atom',Line,'true'}|[]],[],[_cor3|[]]}|%% Line 1501
												[{'clause',Line,[{'atom',Line,'false'}|[]],[],[_cor2|[]]}|%% Line 1502
																			  [{'clause',Line,[AuxVar|[]],[],%% Line 1503
																							 [{'call',Line,%% Line 1504
																								       {'remote',Line,{'atom',Line,'erlang'},{'atom',Line,'error'}},%% Line 1505
																																    [{'tuple',Line,[{'atom',Line,'badarg'}|[AuxVar|[]]]}|[]]}|%% Line 1505
																																							      []]}|%% Line 1505
																																								   []]]]}
'aux_var'/2 =
    %% Line 1507
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1508
	    call 'lists':'concat'
		(['_'|[_cor0|[]]])
	in  let <Name> =
		%% Line 1508
		call 'erlang':'list_to_atom'
		    (_cor2)
	    in  %% Line 1509
		case call 'sets':'is_element'
			 (Name, _cor1) of
		  %% Line 1510
		  <'true'> when 'true' ->
		      let <_cor4> =
			  call 'erlang':'+'
			      (_cor0, 1)
		      in  apply 'aux_var'/2
			      (_cor1, _cor4)
		  %% Line 1511
		  <'false'> when 'true' ->
		      Name
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'munge'/4 =
    %% Line 1518
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'function',Line,Function,Arity,Clauses},Vars,_X_MainFile,'on'> when 'true' ->
	      %% Line 1524
	      case Vars of
		<{'vars',_rec58,_rec59,_rec60,_rec61,_rec62,_rec63,_rec64,_rec65,_rec66}> when 'true' ->
		    let <_cor6> =
			{'vars',_rec58,_rec59,Function,Arity,1,[],[],1,_rec66}
		    in  %% Line 1525
			case apply 'munge_clauses'/2
				 (Clauses, _cor6) of
			  <{MungedClauses,Vars3}> when 'true' ->
			      %% Line 1526
			      {{'function',Line,Function,Arity,MungedClauses},Vars3,'on'}
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor8})
			    -| ['compiler_generated'] )
			end
		( <_cor13> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','vars'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1527
	  <Form = {'attribute',_cor14,'file',{MainFile,_cor15}},Vars,_cor16,_X_Switch>
	      when call 'erlang':'=:='
		    (_cor16,
		     MainFile) ->
	      %% Line 1528
	      {Form,Vars,'on'}
	  %% Line 1529
	  <Form = {'attribute',_cor17,'file',{_X_InclFile,_cor18}},Vars,_X_MainFile,_X_Switch> when 'true' ->
	      %% Line 1530
	      {Form,Vars,'off'}
	  %% Line 1531
	  <{'attribute',_cor19,'compile',{'parse_transform',_cor20}},_X_Vars,_X_MainFile,_X_Switch> when 'true' ->
	      %% Line 1533
	      'ignore'
	  %% Line 1534
	  <Form,Vars,_X_MainFile,Switch> when 'true' ->
	      %% Line 1535
	      {Form,Vars,Switch}
	end
'munge_clauses'/2 =
    %% Line 1537
    fun (_cor1,_cor0) ->
	%% Line 1538
	( case _cor0 of
	    ( <( {'vars',_cor6,_cor7,_cor8,_cor9,_cor10,_rec67,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'munge_clauses'/4
		      (_cor1, _cor0, _rec67, [])
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','vars'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'munge_clauses'/4 =
    %% Line 1540
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Clause|Clauses],Vars,Lines,MClauses> when 'true' ->
	      %% Line 1541
	      case Clause of
		<{'clause',Line,Pattern,Guards,Body}> when 'true' ->
		    %% Line 1542
		    case Vars of
		      <{'vars',_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67}> when 'true' ->
			  let <_cor7> =
			      call 'erlang':'setelement'
				  (10, Vars, 'true')
			  in  case apply 'munge_exprs'/3
				       (Guards, _cor7, []) of
				<{MungedGuards,_X_Vars}> when 'true' ->
				    %% Line 1544
				    case _cor66 of
				      %% Line 1545
				      <1> when 'true' ->
					  let <_cor13> =
					      %% Line 1546
					      call 'erlang':'setelement'
						  (9, Vars, 2)
					  in  %% Line 1546
					      case apply 'munge_body'/2
						       (Body, _cor13) of
						<{MungedBody,Vars2}> when 'true' ->
						    %% Line 1547
						    ( case Vars2 of
							( <( {'vars',_rec71,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_cor17> =
								  %% Line 1551
								  call 'erlang':'length'
								      (_cor92)
							      in  let <ClauseInfo> =
								      {_rec71,_cor89,_cor90,_cor91,_cor17}
								  in  let <InitInfo> =
									  %% Line 1552
									  [ClauseInfo|_cor88]
								      in  let <_rec77> =
									      %% Line 1554
									      call 'erlang':'+'
										  (_cor91, 1)
									  in  let <_cor35> =
										  %% Line 1557
										  {'vars',_rec71,InitInfo,_cor89,_cor90,_rec77,[],[],1,_cor95}
									      in  let <NewLines> =
										      %% Line 1559
										      call 'erlang':'++'
											  (_cor92, Lines)
										  in  %% Line 1560
										      apply 'munge_clauses'/4
											  (Clauses, _cor35, NewLines, %% Line 1561
														      [{'clause',Line,Pattern,MungedGuards,MungedBody}|%% Line 1562
																				       MClauses])
							  -| ['compiler_generated'] )
							( <_cor96> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','vars'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						( <_cor14> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor14})
						  -| ['compiler_generated'] )
					      end
				      %% Line 1564
				      <2> when 'true' ->
					  %% Line 1566
					  case apply 'munge_body'/2
						   (Body, Vars) of
					    <{MungedBody,Vars2}> when 'true' ->
						let <NewBumps> =
						    %% Line 1567
						    apply 'new_bumps'/2
							(Vars2, Vars)
						in  let <NewLines> =
							%% Line 1568
							call 'erlang':'++'
							    (NewBumps, Lines)
						    in  %% Line 1569
							case Vars2 of
							  <{'vars',_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178}> when 'true' ->
							      let <_cor49> =
								  call 'erlang':'setelement'
								      (7, Vars2, _cor64)
							      in  apply 'munge_clauses'/4
								      (Clauses, _cor49, %% Line 1570
											NewLines, %% Line 1571
												  [{'clause',Line,Pattern,MungedGuards,MungedBody}|%% Line 1572
																		   MClauses])
							  ( <_cor179> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','vars'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
					    ( <_cor44> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor44})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor50> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor50})
					-| ['compiler_generated'] )
				    end
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor68> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','vars'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1574
	  <[],Vars,Lines,MungedClauses> when 'true' ->
	      let <_cor54> =
		  %% Line 1575
		  call 'lists':'reverse'
		      (MungedClauses)
	      in  %% Line 1575
		  case Vars of
		    <{'vars',_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188}> when 'true' ->
			let <_cor53> =
			    call 'erlang':'setelement'
				(7, Vars, Lines)
			in  {_cor54,_cor53}
		    ( <_cor189> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','vars'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor58,_cor57,_cor56,_cor55> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor58,_cor57,_cor56,_cor55})
		  -| [{'function_name',{'munge_clauses',4}}] )
	    -| ['compiler_generated'] )
	end
'munge_body'/2 =
    %% Line 1577
    fun (_cor1,_cor0) ->
	%% Line 1578
	apply 'munge_body'/4
	    (_cor1, _cor0, [], [])
'munge_body'/4 =
    %% Line 1580
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Expr|Body],Vars,MungedBody,LastExprBumpLines> when 'true' ->
	      let <Line> =
		  %% Line 1582
		  call 'erlang':'element'
		      (2, Expr)
	      in  %% Line 1583
		  ( case Vars of
		      ( <( {'vars',_cor49,_cor50,_cor51,_cor52,_cor53,_rec93,_cor54,_cor55,_cor56}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 1584
			    case call 'lists':'member'
				     (Line, _rec93) of
			      %% Line 1585
			      <'true'> when 'true' ->
				  %% Line 1586
				  case apply 'munge_expr'/2
					   (Expr, Vars) of
				    <{MungedExpr,Vars2}> when 'true' ->
					let <NewBumps> =
					    %% Line 1587
					    apply 'new_bumps'/2
						(Vars2, Vars)
					in  let <NoBumpLines> =
						%% Line 1588
						[Line|_cor54]
					    in  %% Line 1589
						case Vars2 of
						  <{'vars',_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
						      let <_cor15> =
							  call 'erlang':'setelement'
							      (8, Vars2, NoBumpLines)
						      in  let <MungedBody1> =
							      %% Line 1591
							      apply 'maybe_fix_last_expr'/3
								  (MungedBody, _cor15, LastExprBumpLines)
							  in  let <MungedExprs1> =
								  %% Line 1592
								  [MungedExpr|MungedBody1]
							      in  %% Line 1593
								  apply 'munge_body'/4
								      (Body, _cor15, MungedExprs1, NewBumps)
						  ( <_cor76> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','vars'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1594
			      <'false'> when 'true' ->
				  do  %% Line 1595
				      call 'ets':'insert'
					  ('cover_internal_data_table', {{'bump',_cor49,_cor51,_cor52,_cor53,%% Line 1599
													     Line},%% Line 1600
														   0})
				      let <Bump> =
					  %% Line 1601
					  apply 'bump_call'/2
					      (Vars, Line)
				      in  let <Lines2> =
					      %% Line 1608
					      [Line|_rec93]
					  in  let <_cor31> =
						  %% Line 1609
						  call 'erlang':'setelement'
						      (7, Vars, Lines2)
					      in  %% Line 1609
						  case apply 'munge_expr'/2
							   (Expr, _cor31) of
						    <{MungedExpr,Vars2}> when 'true' ->
							let <NewBumps> =
							    %% Line 1610
							    apply 'new_bumps'/2
								(Vars2, Vars)
							in  %% Line 1611
							    ( case Vars2 of
								( <( {'vars',_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_rec101,_cor129,_cor130}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <NoBumpLines> =
									  apply 'subtract'/2
									      (_rec101, NewBumps)
								      in  let <_cor39> =
									      %% Line 1612
									      call 'erlang':'setelement'
										  (8, Vars2, NoBumpLines)
									  in  let <MungedBody1> =
										  %% Line 1614
										  apply 'maybe_fix_last_expr'/3
										      (MungedBody, _cor39, LastExprBumpLines)
									      in  let <MungedExprs1> =
										      %% Line 1615
										      [MungedExpr|[Bump|MungedBody1]]
										  in  %% Line 1616
										      apply 'munge_body'/4
											  (Body, _cor39, MungedExprs1, NewBumps)
								  -| ['compiler_generated'] )
								( <_cor131> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','vars'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						    ( <_cor32> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor32})
						      -| ['compiler_generated'] )
						  end
			      ( <_cor43> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor43})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor57> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','vars'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1618
	  <[],Vars,MungedBody,_X_LastExprBumpLines> when 'true' ->
	      let <_cor44> =
		  %% Line 1619
		  call 'lists':'reverse'
		      (MungedBody)
	      in  %% Line 1619
		  {_cor44,Vars}
	  ( <_cor48,_cor47,_cor46,_cor45> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor48,_cor47,_cor46,_cor45})
		  -| [{'function_name',{'munge_body',4}}] )
	    -| ['compiler_generated'] )
	end
'maybe_fix_last_expr'/3 =
    %% Line 1652
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1653
	case apply 'last_expr_needs_fixing'/2
		 (_cor1, _cor0) of
	  %% Line 1654
	  <{'yes',Line}> when 'true' ->
	      %% Line 1655
	      apply 'fix_last_expr'/3
		  (_cor2, Line, _cor1)
	  %% Line 1656
	  <'no'> when 'true' ->
	      _cor2
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'last_expr_needs_fixing'/2 =
    %% Line 1660
    fun (_cor1,_cor0) ->
	%% Line 1661
	( case _cor1 of
	    ( <( {'vars',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_rec103,_cor13,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'common_elems'/2
			   (_rec103, _cor0) of
		    %% Line 1662
		    <[Line|[]]> when 'true' ->
			{'yes',Line}
		    %% Line 1663
		    <_cor16> when 'true' ->
			'no'
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','vars'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fix_last_expr'/3 =
    %% Line 1666
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[MungedExpr|MungedExprs],Line,Vars> when 'true' ->
	      let <Bump> =
		  %% Line 1668
		  apply 'bump_call'/2
		      (Vars, Line)
	      in  let <_cor4> =
		      %% Line 1669
		      apply 'fix_expr'/3
			  (MungedExpr, Line, Bump)
		  in  %% Line 1669
		      [_cor4|MungedExprs]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'fix_last_expr',3}}] )
	    -| ['compiler_generated'] )
	end
'fix_expr'/3 =
    %% Line 1671
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'if',L,Clauses},Line,Bump> when 'true' ->
	      let <FixedClauses> =
		  %% Line 1672
		  apply 'fix_clauses'/3
		      (Clauses, Line, Bump)
	      in  %% Line 1673
		  {'if',L,FixedClauses}
	  %% Line 1674
	  <{'case',L,Expr,Clauses},Line,Bump> when 'true' ->
	      let <FixedExpr> =
		  %% Line 1675
		  apply 'fix_expr'/3
		      (Expr, Line, Bump)
	      in  let <FixedClauses> =
		      %% Line 1676
		      apply 'fix_clauses'/3
			  (Clauses, Line, Bump)
		  in  %% Line 1677
		      {'case',L,FixedExpr,FixedClauses}
	  %% Line 1678
	  <{'receive',L,Clauses},Line,Bump> when 'true' ->
	      let <FixedClauses> =
		  %% Line 1679
		  apply 'fix_clauses'/3
		      (Clauses, Line, Bump)
	      in  %% Line 1680
		  {'receive',L,FixedClauses}
	  %% Line 1681
	  <{'receive',L,Clauses,Expr,Body},Line,Bump> when 'true' ->
	      let <FixedClauses> =
		  %% Line 1682
		  apply 'fix_clauses'/3
		      (Clauses, Line, Bump)
	      in  let <FixedExpr> =
		      %% Line 1683
		      apply 'fix_expr'/3
			  (Expr, Line, Bump)
		  in  let <FixedBody> =
			  %% Line 1684
			  apply 'fix_expr'/3
			      (Body, Line, Bump)
		      in  %% Line 1685
			  {'receive',L,FixedClauses,FixedExpr,FixedBody}
	  %% Line 1686
	  <{'try',L,Exprs,Clauses,CatchClauses,After},Line,Bump> when 'true' ->
	      let <FixedExprs> =
		  %% Line 1687
		  apply 'fix_expr'/3
		      (Exprs, Line, Bump)
	      in  let <FixedClauses> =
		      %% Line 1688
		      apply 'fix_clauses'/3
			  (Clauses, Line, Bump)
		  in  let <FixedCatchClauses> =
			  %% Line 1689
			  apply 'fix_clauses'/3
			      (CatchClauses, Line, Bump)
		      in  let <FixedAfter> =
			      %% Line 1690
			      apply 'fix_expr'/3
				  (After, Line, Bump)
			  in  %% Line 1691
			      {'try',L,FixedExprs,FixedClauses,FixedCatchClauses,FixedAfter}
	  %% Line 1692
	  <[E|Es],Line,Bump> when 'true' ->
	      let <_cor14> =
		  %% Line 1693
		  apply 'fix_expr'/3
		      (E, Line, Bump)
	      in  let <_cor15> =
		      %% Line 1693
		      apply 'fix_expr'/3
			  (Es, Line, Bump)
		  in  %% Line 1693
		      [_cor14|_cor15]
	  %% Line 1694
	  <T,Line,Bump>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor16> =
		  %% Line 1695
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor17> =
		      %% Line 1695
		      apply 'fix_expr'/3
			  (_cor16, Line, Bump)
		  in  %% Line 1695
		      call 'erlang':'list_to_tuple'
			  (_cor17)
	  %% Line 1696
	  <E,_X_Line,_X_Bump> when 'true' ->
	      %% Line 1697
	      E
	end
'fix_clauses'/3 =
    %% Line 1699
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1700
	    call 'lists':'last'
		(_cor2)
	in  %% Line 1700
	    case apply 'bumps_line'/2
		     (_cor3, _cor1) of
	      %% Line 1701
	      <'true'> when 'true' ->
		  %% Line 1702
		  apply 'fix_cls'/3
		      (_cor2, _cor1, _cor0)
	      %% Line 1703
	      <'false'> when 'true' ->
		  _cor2
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'fix_cls'/3 =
    %% Line 1707
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Line,_X_Bump> when 'true' ->
	      %% Line 1708
	      []
	  %% Line 1709
	  <[Cl|Cls],Line,Bump> when 'true' ->
	      %% Line 1710
	      case apply 'bumps_line'/2
		       (Cl, Line) of
		%% Line 1711
		<'true'> when 'true' ->
		    %% Line 1712
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor5) ->
				  case _cor5 of
				    <[C|_cor4]> when 'true' ->
					let <_cor6> =
					    apply 'fix_expr'/3
						(C, Line, Bump)
					in  let <_cor7> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor6|_cor7]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor5> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor5})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      ([Cl|Cls])
		      -| ['list_comprehension'] )
		%% Line 1713
		<'false'> when 'true' ->
		    %% Line 1714
		    case Cl of
		      <{'clause',CL,P,G,Body}> when 'true' ->
			  let <_cor9> =
			      %% Line 1715
			      call 'lists':'concat'
				  ([[36|[99|[111|[118|[101|[114|[36|[32]]]]]]]]|[Line|[]]])
			  in  let <UniqueVarName> =
				  %% Line 1715
				  call 'erlang':'list_to_atom'
				      (_cor9)
			      in  let <V> = {%% Line 1716
				       'var',%% Line 1716
					     0,%% Line 1716
					       UniqueVarName}
				  in  %% Line 1717
				      case call 'lists':'reverse'
					       (Body) of
					<[Last|Rest]> when 'true' ->
					    let <Body1> =
						%% Line 1718
						call 'lists':'reverse'
						    (Rest, [{'match',0,V,Last}|[Bump|[V|[]]]])
					    in  let <_cor14> =
						    %% Line 1719
						    apply 'fix_cls'/3
							(Cls, Line, Bump)
						in  %% Line 1719
						    [{'clause',CL,P,G,Body1}|_cor14]
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'fix_cls',3}}] )
	    -| ['compiler_generated'] )
	end
'bumps_line'/2 =
    %% Line 1722
    fun (_cor1,_cor0) ->
	%% Line 1723
	try
	    apply 'bumps_line1'/2
		(_cor1, _cor0)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      <'throw','true',_cor8> when 'true' ->
		  'true'
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'bumps_line1'/2 =
    %% Line 1725
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'call',0,{'remote',0,{'atom',0,'ets'},{'atom',0,'update_counter'}},%% Line 1726
									       [{'atom',0,'cover_internal_data_table'}|[{'tuple',0,[_cor5|[_cor6|[_cor7|[_cor8|[_cor9|[{'integer',0,Line}|[]]]]]]]}|[_cor10|[]]]]},_cor11>
	      when call 'erlang':'=:='
		    (_cor11,
		     %% Line 1727
		     Line) ->
	      %% Line 1728
	      call 'erlang':'throw'
		  ('true')
	  %% Line 1729
	  <[E|Es],Line> when 'true' ->
	      do  %% Line 1730
		  apply 'bumps_line1'/2
		      (E, Line)
		  %% Line 1731
		  apply 'bumps_line1'/2
		      (Es, Line)
	  %% Line 1732
	  <T,Line>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor2> =
		  %% Line 1733
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 1733
		  apply 'bumps_line1'/2
		      (_cor2, Line)
	  %% Line 1734
	  <_cor12,_cor13> when 'true' ->
	      %% Line 1735
	      'false'
	end
'bump_call'/2 =
    %% Line 1739
    fun (_cor1,_cor0) ->
	%% Line 1743
	( case _cor1 of
	    ( <( {'vars',_rec104,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  {'call',0,{'remote',0,{'atom',0,'ets'},{'atom',0,'update_counter'}},[{'atom',0,'cover_internal_data_table'}|[{'tuple',0,[{'atom',0,'bump'}|[{'atom',0,_rec104}|%% Line 1744
																						 [{'atom',0,_cor13}|%% Line 1745
																								    [{'integer',0,_cor14}|%% Line 1746
																											  [{'integer',0,_cor15}|%% Line 1747
																														[{'integer',0,_cor0}|[]]]]]]]}|%% Line 1748
																																	       [{'integer',0,1}]]]}
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','vars'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'munge_expr'/2 =
    %% Line 1750
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'match',Line,ExprL,ExprR},Vars> when 'true' ->
	      %% Line 1751
	      case apply 'munge_expr'/2
		       (ExprL, Vars) of
		<{MungedExprL,Vars2}> when 'true' ->
		    %% Line 1752
		    case apply 'munge_expr'/2
			     (ExprR, Vars2) of
		      <{MungedExprR,Vars3}> when 'true' ->
			  %% Line 1753
			  {{'match',Line,MungedExprL,MungedExprR},Vars3}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1754
	  <{'tuple',Line,Exprs},Vars> when 'true' ->
	      %% Line 1755
	      case apply 'munge_exprs'/3
		       (Exprs, Vars, []) of
		<{MungedExprs,Vars2}> when 'true' ->
		    %% Line 1756
		    {{'tuple',Line,MungedExprs},Vars2}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1757
	  <{'record',Line,Name,Exprs},Vars> when 'true' ->
	      %% Line 1758
	      case apply 'munge_exprs'/3
		       (Exprs, Vars, []) of
		<{MungedExprFields,Vars2}> when 'true' ->
		    %% Line 1759
		    {{'record',Line,Name,MungedExprFields},Vars2}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1760
	  <{'record',Line,Arg,Name,Exprs},Vars> when 'true' ->
	      %% Line 1761
	      case apply 'munge_expr'/2
		       (Arg, Vars) of
		<{MungedArg,Vars2}> when 'true' ->
		    %% Line 1762
		    case apply 'munge_exprs'/3
			     (Exprs, Vars2, []) of
		      <{MungedExprFields,Vars3}> when 'true' ->
			  %% Line 1763
			  {{'record',Line,MungedArg,Name,MungedExprFields},Vars3}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1764
	  <{'record_field',Line,ExprL,ExprR},Vars> when 'true' ->
	      %% Line 1765
	      case apply 'munge_expr'/2
		       (ExprR, Vars) of
		<{MungedExprR,Vars2}> when 'true' ->
		    %% Line 1766
		    {{'record_field',Line,ExprL,MungedExprR},Vars2}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1767
	  <{'map',Line,Fields},Vars> when 'true' ->
	      %% Line 1769
	      case apply 'munge_exprs'/3
		       (Fields, Vars, []) of
		<{MungedFields,Vars2}> when 'true' ->
		    %% Line 1770
		    {{'map',Line,MungedFields},Vars2}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1771
	  <{'map',Line,Arg,Fields},Vars> when 'true' ->
	      %% Line 1773
	      case apply 'munge_expr'/2
		       (Arg, Vars) of
		<{MungedArg,Vars2}> when 'true' ->
		    %% Line 1774
		    case apply 'munge_exprs'/3
			     (Fields, Vars2, []) of
		      <{MungedFields,Vars3}> when 'true' ->
			  %% Line 1775
			  {{'map',Line,MungedArg,MungedFields},Vars3}
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1776
	  <{'map_field_assoc',Line,Name,Value},Vars> when 'true' ->
	      %% Line 1778
	      case apply 'munge_expr'/2
		       (Name, Vars) of
		<{MungedName,Vars2}> when 'true' ->
		    %% Line 1779
		    case apply 'munge_expr'/2
			     (Value, Vars2) of
		      <{MungedValue,Vars3}> when 'true' ->
			  %% Line 1780
			  {{'map_field_assoc',Line,MungedName,MungedValue},Vars3}
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1781
	  <{'map_field_exact',Line,Name,Value},Vars> when 'true' ->
	      %% Line 1783
	      case apply 'munge_expr'/2
		       (Name, Vars) of
		<{MungedName,Vars2}> when 'true' ->
		    %% Line 1784
		    case apply 'munge_expr'/2
			     (Value, Vars2) of
		      <{MungedValue,Vars3}> when 'true' ->
			  %% Line 1785
			  {{'map_field_exact',Line,MungedName,MungedValue},Vars3}
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor15})
			-| ['compiler_generated'] )
		    end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1786
	  <{'cons',Line,ExprH,ExprT},Vars> when 'true' ->
	      %% Line 1787
	      case apply 'munge_expr'/2
		       (ExprH, Vars) of
		<{MungedExprH,Vars2}> when 'true' ->
		    %% Line 1788
		    case apply 'munge_expr'/2
			     (ExprT, Vars2) of
		      <{MungedExprT,Vars3}> when 'true' ->
			  %% Line 1789
			  {{'cons',Line,MungedExprH,MungedExprT},Vars3}
		      ( <_cor17> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor17})
			-| ['compiler_generated'] )
		    end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1790
	  <{'op',Line,Op,ExprL,ExprR},Vars> when 'true' ->
	      %% Line 1791
	      case apply 'munge_expr'/2
		       (ExprL, Vars) of
		<{MungedExprL,Vars2}> when 'true' ->
		    %% Line 1792
		    case apply 'munge_expr'/2
			     (ExprR, Vars2) of
		      <{MungedExprR,Vars3}> when 'true' ->
			  %% Line 1793
			  {{'op',Line,Op,MungedExprL,MungedExprR},Vars3}
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor19})
			-| ['compiler_generated'] )
		    end
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1794
	  <{'op',Line,Op,Expr},Vars> when 'true' ->
	      %% Line 1795
	      case apply 'munge_expr'/2
		       (Expr, Vars) of
		<{MungedExpr,Vars2}> when 'true' ->
		    %% Line 1796
		    {{'op',Line,Op,MungedExpr},Vars2}
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1797
	  <{'catch',Line,Expr},Vars> when 'true' ->
	      %% Line 1798
	      case apply 'munge_expr'/2
		       (Expr, Vars) of
		<{MungedExpr,Vars2}> when 'true' ->
		    %% Line 1799
		    {{'catch',Line,MungedExpr},Vars2}
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1800
	  <{'call',Line1,{'remote',Line2,ExprM,ExprF},Exprs},%% Line 1801
							     Vars> when 'true' ->
	      %% Line 1802
	      case apply 'munge_expr'/2
		       (ExprM, Vars) of
		<{MungedExprM,Vars2}> when 'true' ->
		    %% Line 1803
		    case apply 'munge_expr'/2
			     (ExprF, Vars2) of
		      <{MungedExprF,Vars3}> when 'true' ->
			  %% Line 1804
			  case apply 'munge_exprs'/3
				   (Exprs, Vars3, []) of
			    <{MungedExprs,Vars4}> when 'true' ->
				%% Line 1805
				{{'call',Line1,{'remote',Line2,MungedExprM,MungedExprF},MungedExprs},Vars4}
			    ( <_cor24> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor24})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor23> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor23})
			-| ['compiler_generated'] )
		    end
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1806
	  <{'call',Line,Expr,Exprs},Vars> when 'true' ->
	      %% Line 1807
	      case apply 'munge_expr'/2
		       (Expr, Vars) of
		<{MungedExpr,Vars2}> when 'true' ->
		    %% Line 1808
		    case apply 'munge_exprs'/3
			     (Exprs, Vars2, []) of
		      <{MungedExprs,Vars3}> when 'true' ->
			  %% Line 1809
			  {{'call',Line,MungedExpr,MungedExprs},Vars3}
		      ( <_cor26> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor26})
			-| ['compiler_generated'] )
		    end
		( <_cor25> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor25})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1810
	  <{'lc',Line,Expr,Qs},Vars> when 'true' ->
	      let <_cor28> =
		  %% Line 1811
		  case <> of
		    <>
			when try
			      let <_cor27> =
				  call 'erlang':'element'
				      (1, Expr)
			      in  call 'erlang':'=:='
				      (_cor27, 'block')
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			Expr
		    <> when 'true' ->
			{'block',0,[Expr|[]]}
		  end
	      in  %% Line 1811
		  case apply 'munge_expr'/2
			   (_cor28, Vars) of
		    <{MungedExpr,Vars2}> when 'true' ->
			%% Line 1812
			case apply 'munge_qualifiers'/2
				 (Qs, Vars2) of
			  <{MungedQs,Vars3}> when 'true' ->
			      %% Line 1813
			      {{'lc',Line,MungedExpr,MungedQs},Vars3}
			  ( <_cor30> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor30})
			    -| ['compiler_generated'] )
			end
		    ( <_cor29> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor29})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1814
	  <{'bc',Line,Expr,Qs},Vars> when 'true' ->
	      %% Line 1815
	      case Expr of
		<{'bin',BLine,[{'bin_element',EL,Val,Sz,TSL}|Es]}> when 'true' ->
		    let <_cor33> =
			%% Line 1816
			case <> of
			  <>
			      when try
				    let <_cor32> =
					call 'erlang':'element'
					    (1, Val)
				    in  call 'erlang':'=:='
					    (_cor32, 'block')
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      Val
			  <> when 'true' ->
			      {'block',0,[Val|[]]}
			end
		    in  let <Expr2> =
			    %% Line 1816
			    {'bin',BLine,[{'bin_element',EL,_cor33,Sz,TSL}|Es]}
			in  %% Line 1817
			    case apply 'munge_expr'/2
				     (Expr2, Vars) of
			      <{MungedExpr,Vars2}> when 'true' ->
				  %% Line 1818
				  case apply 'munge_qualifiers'/2
					   (Qs, Vars2) of
				    <{MungedQs,Vars3}> when 'true' ->
					%% Line 1819
					{{'bc',Line,MungedExpr,MungedQs},Vars3}
				    ( <_cor36> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor36})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor35> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor35})
				-| ['compiler_generated'] )
			    end
		( <_cor31> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor31})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1820
	  <{'block',Line,Body},Vars> when 'true' ->
	      %% Line 1821
	      case apply 'munge_body'/2
		       (Body, Vars) of
		<{MungedBody,Vars2}> when 'true' ->
		    %% Line 1822
		    {{'block',Line,MungedBody},Vars2}
		( <_cor37> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor37})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1823
	  <{'if',Line,Clauses},Vars> when 'true' ->
	      %% Line 1824
	      case apply 'munge_clauses'/2
		       (Clauses, Vars) of
		<{MungedClauses,Vars2}> when 'true' ->
		    %% Line 1825
		    {{'if',Line,MungedClauses},Vars2}
		( <_cor38> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor38})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1826
	  <{'case',Line,Expr,Clauses},Vars> when 'true' ->
	      %% Line 1827
	      case apply 'munge_expr'/2
		       (Expr, Vars) of
		<{MungedExpr,Vars2}> when 'true' ->
		    %% Line 1828
		    case apply 'munge_clauses'/2
			     (Clauses, Vars2) of
		      <{MungedClauses,Vars3}> when 'true' ->
			  %% Line 1829
			  {{'case',Line,MungedExpr,MungedClauses},Vars3}
		      ( <_cor40> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor40})
			-| ['compiler_generated'] )
		    end
		( <_cor39> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor39})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1830
	  <{'receive',Line,Clauses},Vars> when 'true' ->
	      %% Line 1831
	      case apply 'munge_clauses'/2
		       (Clauses, Vars) of
		<{MungedClauses,Vars2}> when 'true' ->
		    %% Line 1832
		    {{'receive',Line,MungedClauses},Vars2}
		( <_cor41> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor41})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1833
	  <{'receive',Line,Clauses,Expr,Body},Vars> when 'true' ->
	      %% Line 1834
	      case apply 'munge_expr'/2
		       (Expr, Vars) of
		<{MungedExpr,Vars1}> when 'true' ->
		    %% Line 1835
		    case apply 'munge_clauses'/2
			     (Clauses, Vars1) of
		      <{MungedClauses,Vars2}> when 'true' ->
			  %% Line 1837
			  ( case Vars1 of
			      ( <( {'vars',_cor70,_cor71,_cor72,_cor73,_cor74,_rec110,_cor75,_cor76,_cor77}
				   -| ['compiler_generated'] )> when 'true' ->
				    case Vars2 of
				      <{'vars',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87}> when 'true' ->
					  let <_cor49> =
					      call 'erlang':'setelement'
						  (7, Vars2, _rec110)
					  in  case apply 'munge_body'/2
						       (Body, _cor49) of
						<{MungedBody,Vars3}> when 'true' ->
						    let <_cor51> =
							%% Line 1838
							apply 'new_bumps'/2
							    (Vars3, Vars2)
						    in  let <_rec111> =
							    %% Line 1838
							    call 'erlang':'++'
								(_cor84, _cor51)
							in  %% Line 1838
							    case Vars3 of
							      <{'vars',_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106}> when 'true' ->
								  let <_cor57> =
								      call 'erlang':'setelement'
									  (7, Vars3, _rec111)
								  in  %% Line 1839
								      {{'receive',Line,MungedClauses,MungedExpr,MungedBody},_cor57}
							      ( <_cor107> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','vars'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
						( <_cor50> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor50})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor88> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','vars'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_cor78> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','vars'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor43> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor43})
			-| ['compiler_generated'] )
		    end
		( <_cor42> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor42})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1840
	  <{'try',Line,Body,Clauses,CatchClauses,After},Vars> when 'true' ->
	      %% Line 1841
	      case apply 'munge_body'/2
		       (Body, Vars) of
		<{MungedBody,Vars1}> when 'true' ->
		    %% Line 1842
		    case apply 'munge_clauses'/2
			     (Clauses, Vars1) of
		      <{MungedClauses,Vars2}> when 'true' ->
			  %% Line 1843
			  case apply 'munge_clauses'/2
				   (CatchClauses, Vars2) of
			    <{MungedCatchClauses,Vars3}> when 'true' ->
				%% Line 1844
				case apply 'munge_body'/2
					 (After, Vars3) of
				  <{MungedAfter,Vars4}> when 'true' ->
				      %% Line 1845
				      {{'try',Line,MungedBody,MungedClauses,MungedCatchClauses,MungedAfter},%% Line 1846
													    Vars4}
				  ( <_cor62> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor62})
				    -| ['compiler_generated'] )
				end
			    ( <_cor61> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor61})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor60> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor60})
			-| ['compiler_generated'] )
		    end
		( <_cor59> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor59})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1847
	  <{'fun',Line,{'clauses',Clauses}},Vars> when 'true' ->
	      %% Line 1848
	      case apply 'munge_clauses'/2
		       (Clauses, Vars) of
		<{MungedClauses,Vars2}> when 'true' ->
		    %% Line 1849
		    {{'fun',Line,{'clauses',MungedClauses}},Vars2}
		( <_cor63> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor63})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1850
	  <{'named_fun',Line,Name,Clauses},Vars> when 'true' ->
	      %% Line 1851
	      case apply 'munge_clauses'/2
		       (Clauses, Vars) of
		<{MungedClauses,Vars2}> when 'true' ->
		    %% Line 1852
		    {{'named_fun',Line,Name,MungedClauses},Vars2}
		( <_cor64> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor64})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1853
	  <{'bin',Line,BinElements},Vars> when 'true' ->
	      %% Line 1854
	      case apply 'munge_exprs'/3
		       (BinElements, Vars, []) of
		<{MungedBinElements,Vars2}> when 'true' ->
		    %% Line 1855
		    {{'bin',Line,MungedBinElements},Vars2}
		( <_cor65> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor65})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1856
	  <{'bin_element',Line,Value,Size,TypeSpecifierList},Vars> when 'true' ->
	      %% Line 1857
	      case apply 'munge_expr'/2
		       (Value, Vars) of
		<{MungedValue,Vars2}> when 'true' ->
		    %% Line 1858
		    case apply 'munge_expr'/2
			     (Size, Vars2) of
		      <{MungedSize,Vars3}> when 'true' ->
			  %% Line 1859
			  {{'bin_element',Line,MungedValue,MungedSize,TypeSpecifierList},Vars3}
		      ( <_cor67> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor67})
			-| ['compiler_generated'] )
		    end
		( <_cor66> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor66})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1860
	  <Form,Vars> when 'true' ->
	      %% Line 1861
	      {Form,Vars}
	end
'munge_exprs'/3 =
    %% Line 1863
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Expr|Exprs],Vars = {'vars',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},MungedExprs>
	      when let <_cor8> =
		    call 'erlang':'=:='
			(_cor25, 'true')
		in  let <_cor10> =
			%% Line 1864
			call 'erlang':'is_list'
			    (Expr)
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor8, _cor10)
			  -| ['compiler_generated'] ) ->
	      %% Line 1865
	      case apply 'munge_exprs'/3
		       (Expr, Vars, []) of
		<{MungedExpr,_X_Vars}> when 'true' ->
		    %% Line 1866
		    apply 'munge_exprs'/3
			(Exprs, Vars, [MungedExpr|MungedExprs])
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1867
	  <[Expr|Exprs],Vars,MungedExprs> when 'true' ->
	      %% Line 1868
	      case apply 'munge_expr'/2
		       (Expr, Vars) of
		<{MungedExpr,Vars2}> when 'true' ->
		    %% Line 1869
		    apply 'munge_exprs'/3
			(Exprs, Vars2, [MungedExpr|MungedExprs])
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1870
	  <[],Vars,MungedExprs> when 'true' ->
	      let <_cor13> =
		  %% Line 1871
		  call 'lists':'reverse'
		      (MungedExprs)
	      in  %% Line 1871
		  {_cor13,Vars}
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'munge_exprs',3}}] )
	    -| ['compiler_generated'] )
	end
'munge_qualifiers'/2 =
    %% Line 1874
    fun (_cor1,_cor0) ->
	%% Line 1875
	apply 'munge_qs'/3
	    (_cor1, _cor0, [])
'munge_qs'/3 =
    %% Line 1877
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'generate',Line,Pattern,Expr}|Qs],Vars,MQs> when 'true' ->
	      let <L> =
		  %% Line 1878
		  call 'erlang':'element'
		      (2, Expr)
	      in  %% Line 1879
		  case apply 'munge_expr'/2
			   (Expr, Vars) of
		    <{MungedExpr,Vars2}> when 'true' ->
			%% Line 1880
			apply 'munge_qs1'/6
			    (Qs, L, {'generate',Line,Pattern,MungedExpr}, Vars, Vars2, MQs)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1881
	  <[{'b_generate',Line,Pattern,Expr}|Qs],Vars,MQs> when 'true' ->
	      let <L> =
		  %% Line 1882
		  call 'erlang':'element'
		      (2, Expr)
	      in  %% Line 1883
		  case apply 'munge_expr'/2
			   (Expr, Vars) of
		    <{MExpr,Vars2}> when 'true' ->
			%% Line 1884
			apply 'munge_qs1'/6
			    (Qs, L, {'b_generate',Line,Pattern,MExpr}, Vars, Vars2, MQs)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1885
	  <[Expr|Qs],Vars,MQs> when 'true' ->
	      let <L> =
		  %% Line 1886
		  call 'erlang':'element'
		      (2, Expr)
	      in  %% Line 1887
		  case apply 'munge_expr'/2
			   (Expr, Vars) of
		    <{MungedExpr,Vars2}> when 'true' ->
			%% Line 1888
			apply 'munge_qs1'/6
			    (Qs, L, MungedExpr, Vars, Vars2, MQs)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1889
	  <[],Vars,MQs> when 'true' ->
	      let <_cor9> =
		  %% Line 1890
		  call 'lists':'reverse'
		      (MQs)
	      in  %% Line 1890
		  {_cor9,Vars}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'munge_qs',3}}] )
	    -| ['compiler_generated'] )
	end
'munge_qs1'/6 =
    %% Line 1892
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1893
	case apply 'new_bumps'/2
		 (_cor1, _cor2) of
	  %% Line 1894
	  <[_cor14|[]]> when 'true' ->
	      %% Line 1895
	      apply 'munge_qs'/3
		  (_cor5, _cor1, [_cor3|_cor0])
	  %% Line 1896
	  <_cor15> when 'true' ->
	      %% Line 1897
	      case apply 'munge_expr'/2
		       ({'block',0,[{'atom',_cor4,'true'}|[]]}, _cor1) of
		<{MungedTrue,Vars3}> when 'true' ->
		    %% Line 1898
		    apply 'munge_qs'/3
			(_cor5, Vars3, [_cor3|[MungedTrue|_cor0]])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'new_bumps'/2 =
    %% Line 1901
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'vars',_cor4,_cor5,_cor6,_cor7,_cor8,New,_cor9,_cor10,_cor11},{'vars',_cor12,_cor13,_cor14,_cor15,_cor16,Old,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 1902
	      apply 'subtract'/2
		  (New, Old)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'new_bumps',2}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/2 =
    %% Line 1904
    fun (_cor1,_cor0) ->
	%% Line 1905
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[E|_cor3]> when 'true' ->
			    ( case call 'lists':'member'
				       (E, _cor0) of
				<'false'> when 'true' ->
				    let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [E|_cor6]
					  -| ['compiler_generated'] )
				( <'true'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'common_elems'/2 =
    %% Line 1907
    fun (_cor1,_cor0) ->
	%% Line 1908
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[E|_cor3]> when 'true' ->
			    ( case call 'lists':'member'
				       (E, _cor0) of
				<'true'> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [E|_cor5]
					  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'collect'/1 =
    %% Line 1913
    fun (_cor0) ->
	let <AllClauses> =
	    %% Line 1915
	    call 'ets':'tab2list'
		('cover_internal_clause_table')
	in  do  %% Line 1916
		apply 'pmap'/2
		    (( 'move_modules'/1
		       -| [{'id',{0,0,'-collect/1-fun-0-'}}] ), AllClauses)
		%% Line 1919
		apply 'remote_collect'/3
		    ('_', _cor0, 'false')
'collect'/3 =
    %% Line 1922
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1924
	    apply 'move_modules'/1
		({_cor2,_cor1})
	    %% Line 1927
	    apply 'remote_collect'/3
		(_cor2, _cor0, 'false')
'move_modules'/1 =
    %% Line 1932
    fun (_cor0) ->
	case _cor0 of
	  <{Module,Clauses}> when 'true' ->
	      do  %% Line 1933
		  call 'ets':'insert'
		      ('cover_collected_remote_clause_table', {Module,Clauses})
		  %% Line 1934
		  apply 'move_clauses'/1
		      (Clauses)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'move_modules',1}}] )
	    -| ['compiler_generated'] )
	end
'move_clauses'/1 =
    %% Line 1936
    fun (_cor0) ->
	case _cor0 of
	  <[{M,F,A,C,_X_L}|Clauses]> when 'true' ->
	      let <Pattern> =
		  %% Line 1937
		  {{'bump',M,F,A,C,'_'},'_'}
	      in  let <Bumps> =
		      %% Line 1938
		      call 'ets':'match_object'
			  ('cover_internal_data_table', Pattern)
		  in  let <_cor5> =
			  %% Line 1939
			  ( fun (_cor3) ->
				case _cor3 of
				  <{Key,Val}> when 'true' ->
				      do  %% Line 1940
					  call 'ets':'insert'
					      ('cover_internal_data_table', {Key,0})
					  %% Line 1941
					  apply 'insert_in_collection_table'/2
					      (Key, Val)
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'-move_clauses/1-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-move_clauses/1-fun-0-'}}] )
		      in  do  %% Line 1939
			      call 'lists':'foreach'
				  (_cor5, %% Line 1943
					  Bumps)
			      %% Line 1944
			      apply 'move_clauses'/1
				  (Clauses)
	  %% Line 1945
	  <[]> when 'true' ->
	      %% Line 1946
	      'ok'
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'move_clauses',1}}] )
	    -| ['compiler_generated'] )
	end
'find_source'/2 =
    %% Line 1950
    fun (_cor1,_cor0) ->
	%% Line 1951
	try
	    let <Root> =
		%% Line 1952
		call 'filename':'rootname'
		    (_cor0, [46|[98|[101|[97|[109]]]]])
	    in  do  %% Line 1953
		    ( case <> of
			( <>
			      when call 'erlang':'=='
				    (Root,
				     _cor0) ->
			      call 'erlang':'throw'
				  (_cor0)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'ok'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		    let <File> =
			%% Line 1955
			call 'erlang':'++'
			    (Root, [46|[101|[114|[108]]]])
		    in  do  %% Line 1956
			    apply 'throw_file'/1
				(File)
			    let <BeamDir> =
				%% Line 1958
				call 'filename':'dirname'
				    (File)
			    in  let <Base> =
				    %% Line 1959
				    call 'filename':'basename'
					(File)
				in  let <_cor8> =
					%% Line 1960
					call 'filename':'join'
					    ([BeamDir|[[46|[46]]|[[115|[114|[99]]]|[Base|[]]]]])
				    in  do  %% Line 1960
					    apply 'throw_file'/1
						(_cor8)
					    let <_cor9> =
						%% Line 1963
						call _cor1:'module_info'
						    ('compile')
					    in  let <Info> =
						    %% Line 1963
						    call 'lists':'keyfind'
							('source', 1, _cor9)
						in  do  %% Line 1964
							( case <> of
							    ( <>
								  when call 'erlang':'=:='
									('false',
									 Info) ->
								  call 'erlang':'throw'
								      ({'beam',_cor0})
							      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  'ok'
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
							%% Line 1965
							case Info of
							  <{'source',SrcFile}> when 'true' ->
							      let <_cor14> =
								  %% Line 1966
								  apply 'splice'/2
								      (BeamDir, SrcFile)
							      in  do  %% Line 1966
								      apply 'throw_file'/1
									  (_cor14)
								      do  %% Line 1967
									  apply 'throw_file'/1
									      (SrcFile)
									  %% Line 1974
									  {'beam',_cor0}
							  ( <_cor13> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor13})
							    -| ['compiler_generated'] )
							end
	of <_cor15> ->
	    _cor15
	catch <_cor18,_cor17,_cor16> ->
	    case <_cor18,_cor17,_cor16> of
	      %% Line 1976
	      <'throw',Path,_cor21> when 'true' ->
		  Path
	      ( <_cor18,_cor17,_cor16> when 'true' ->
		    primop 'raise'
			(_cor16, _cor17)
		-| ['compiler_generated'] )
	    end
'throw_file'/1 =
    %% Line 1979
    fun (_cor0) ->
	%% Line 1980
	( case <> of
	    ( <>
		  when call 'erlang':'=/='
			('false',
			 _cor0) ->
		  ( case call 'filelib':'is_file'
			     (_cor0) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'erlang':'throw'
				(_cor0)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor2}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'splice'/2 =
    %% Line 1992
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1993
	    ( fun (_cor3) ->
		  call 'erlang':'/='
		      (_cor3, [115|[114|[99]]])
	      -| [{'id',{0,0,'-splice/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 1993
		apply 'revsplit'/1
		    (_cor0)
	    in  %% Line 1993
		case call 'lists':'splitwith'
			 (_cor5, _cor2) of
		  %% Line 1994
		  <{T,[_cor10|_cor11]}> when 'true' ->
		      let <_cor6> =
			  %% Line 1995
			  call 'lists':'reverse'
			      (T)
		      in  %% Line 1995
			  call 'filename':'join'
			      ([_cor1|[[46|[46]]|[[115|[114|[99]]]|_cor6]]])
		  %% Line 1996
		  <{_cor12,[]}> when 'true' ->
		      %% Line 1997
		      'false'
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
'revsplit'/1 =
    %% Line 2000
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2001
	    call 'filename':'split'
		(_cor0)
	in  %% Line 2001
	    call 'lists':'reverse'
		(_cor1)
'do_parallel_analysis'/6 =
    %% Line 2003
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2004
	( case _cor0 of
	    ( <( {'main_state',_cor22,_rec114,_cor23,_cor24,_cor25}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  apply 'analyse_info'/2
			  (_cor5, _rec114)
		      let <_cor13> =
			  %% Line 2005
			  case _cor2 of
			    %% Line 2006
			    <{'loaded',_X_File}> when 'true' ->
				%% Line 2007
				case %% Line 2008
				     call 'ets':'lookup'
					 ('cover_internal_clause_table', _cor5) of
				  <[{_cor27,Clauses}|[]]>
				      when call 'erlang':'=:='
					    (_cor27,
					     _cor5) ->
				      do  %% Line 2009
					  apply 'collect'/3
					      (_cor5, Clauses, _cor24)
					  %% Line 2010
					  Clauses
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			    %% Line 2011
			    <_cor33> when 'true' ->
				%% Line 2012
				case %% Line 2013
				     call 'ets':'lookup'
					 ('cover_collected_remote_clause_table', _cor5) of
				  <[{_cor34,Clauses}|[]]>
				      when call 'erlang':'=:='
					    (_cor34,
					     _cor5) ->
				      %% Line 2014
				      Clauses
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor11})
				    -| ['compiler_generated'] )
				end
			  end
		      in  let <R> =
			      %% Line 2016
			      apply 'do_analyse'/4
				  (_cor5, _cor4, _cor3, _cor13)
			  in  %% Line 2017
			      apply 'reply'/2
				  (_cor1, R)
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','main_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_analyse'/4 =
    %% Line 2021
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Module,Analysis,'line',_X_Clauses> when 'true' ->
	      let <Pattern> =
		  %% Line 2022
		  {{'bump',Module,'_','_','_','_'},'_'}
	      in  let <Bumps> =
		      %% Line 2023
		      call 'ets':'match_object'
			  ('cover_collected_remote_data_table', Pattern)
		  in  let <_cor11> =
			  %% Line 2024
			  case Analysis of
			    %% Line 2025
			    <'coverage'> when 'true' ->
				%% Line 2026
				( fun (_cor6) ->
				      case _cor6 of
					<{{'bump',_cor41,_cor42,_cor43,_cor44,L},0}> when 'true' ->
					    %% Line 2027
					    {{Module,L},{0,1}}
					%% Line 2028
					<{{'bump',_cor45,_cor46,_cor47,_cor48,L},_X_N}> when 'true' ->
					    %% Line 2029
					    {{Module,L},{1,0}}
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'-do_analyse/4-fun-0-',1}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-do_analyse/4-fun-0-'}}] )
			    %% Line 2031
			    <'calls'> when 'true' ->
				%% Line 2032
				( fun (_cor8) ->
				      case _cor8 of
					<{{'bump',_cor49,_cor50,_cor51,_cor52,L},N}> when 'true' ->
					    %% Line 2033
					    {{Module,L},N}
					( <_cor9> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor9})
						-| [{'function_name',{'-do_analyse/4-fun-1-',1}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-do_analyse/4-fun-1-'}}] )
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor13> =
			      %% Line 2036
			      call 'lists':'map'
				  (_cor11, Bumps)
			  in  let <Answer> =
				  %% Line 2036
				  call 'lists':'keysort'
				      (1, _cor13)
			      in  %% Line 2037
				  {'ok',Answer}
	  %% Line 2038
	  <_X_Module,Analysis,'clause',Clauses> when 'true' ->
	      let <_cor28> =
		  %% Line 2039
		  case Analysis of
		    %% Line 2040
		    <'coverage'> when 'true' ->
			%% Line 2041
			( fun (_cor19) ->
			      case _cor19 of
				<{M,F,A,C,Ls}> when 'true' ->
				    let <Pattern> =
					%% Line 2042
					{{'bump',M,F,A,%% Line 2043
						       C,'_'},%% Line 2043
							      0}
				    in  let <Bumps> =
					    %% Line 2044
					    call 'ets':'match_object'
						('cover_collected_remote_data_table', Pattern)
					in  let <NotCov> =
						%% Line 2045
						call 'erlang':'length'
						    (Bumps)
					    in  let <_cor18> =
						    %% Line 2046
						    call 'erlang':'-'
							(Ls, NotCov)
						in  %% Line 2046
						    {{M,F,A,C},{_cor18,NotCov}}
				( <_cor20> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor20})
					-| [{'function_name',{'-do_analyse/4-fun-2-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-do_analyse/4-fun-2-'}}] )
		    %% Line 2048
		    <'calls'> when 'true' ->
			%% Line 2049
			( fun (_cor25) ->
			      case _cor25 of
				<{M,F,A,C,_X_Ls}> when 'true' ->
				    let <Pattern> =
					%% Line 2050
					{{'bump',M,F,A,%% Line 2051
						       C,'_'},%% Line 2051
							      '_'}
				    in  let <Bumps> =
					    %% Line 2052
					    call 'ets':'match_object'
						('cover_collected_remote_data_table', Pattern)
					in  let <_cor23> =
						%% Line 2053
						call 'lists':'keysort'
						    (1, Bumps)
					    in  %% Line 2053
						case call 'erlang':'hd'
							 (_cor23) of
						  <{_X_Bump,Calls}> when 'true' ->
						      %% Line 2054
						      {{M,F,A,C},Calls}
						  ( <_cor24> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor24})
						    -| ['compiler_generated'] )
						end
				( <_cor26> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor26})
					-| [{'function_name',{'-do_analyse/4-fun-3-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-do_analyse/4-fun-3-'}}] )
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor27})
		      -| ['compiler_generated'] )
		  end
	      in  let <Answer> =
		      %% Line 2057
		      call 'lists':'map'
			  (_cor28, Clauses)
		  in  %% Line 2058
		      {'ok',Answer}
	  %% Line 2059
	  <Module,Analysis,'function',Clauses> when 'true' ->
	      %% Line 2060
	      case apply 'do_analyse'/4
		       (Module, Analysis, 'clause', Clauses) of
		<{'ok',ClauseResult}> when 'true' ->
		    let <_cor32> =
			%% Line 2061
			apply 'merge_fun'/1
			    (Analysis)
		    in  let <Result> =
			    %% Line 2061
			    apply 'merge_clauses'/2
				(ClauseResult, _cor32)
			in  %% Line 2062
			    {'ok',Result}
		( <_cor31> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor31})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2063
	  <Module,Analysis,'module',Clauses> when 'true' ->
	      %% Line 2064
	      case apply 'do_analyse'/4
		       (Module, Analysis, 'function', Clauses) of
		<{'ok',FunctionResult}> when 'true' ->
		    let <_cor35> =
			%% Line 2065
			apply 'merge_fun'/1
			    (Analysis)
		    in  let <Result> =
			    %% Line 2065
			    apply 'merge_functions'/2
				(FunctionResult, _cor35)
			in  %% Line 2066
			    {'ok',{Module,Result}}
		( <_cor34> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor34})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor40,_cor39,_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37})
		  -| [{'function_name',{'do_analyse',4}}] )
	    -| ['compiler_generated'] )
	end
'merge_fun'/1 =
    %% Line 2068
    fun (_cor0) ->
	case _cor0 of
	  <'coverage'> when 'true' ->
	      %% Line 2069
	      ( fun (_cor4,_cor3) ->
		    case <_cor4,_cor3> of
		      <{Cov1,NotCov1},{Cov2,NotCov2}> when 'true' ->
			  let <_cor2> =
			      %% Line 2070
			      call 'erlang':'+'
				  (Cov1, Cov2)
			  in  let <_cor1> =
				  %% Line 2070
				  call 'erlang':'+'
				      (NotCov1, NotCov2)
			      in  %% Line 2070
				  {_cor2,_cor1}
		      ( <_cor6,_cor5> when 'true' ->
			    ( primop 'match_fail'
				  ({'function_clause',_cor6,_cor5})
			      -| [{'function_name',{'-merge_fun/1-fun-0-',2}}] )
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-merge_fun/1-fun-0-'}}] )
	  %% Line 2072
	  <'calls'> when 'true' ->
	      %% Line 2073
	      ( fun (_cor8,_cor7) ->
		    %% Line 2074
		    call 'erlang':'+'
			(_cor8, _cor7)
		-| [{'id',{0,0,'-merge_fun/1-fun-1-'}}] )
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'merge_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'merge_clauses'/2 =
    %% Line 2077
    fun (_cor1,_cor0) ->
	apply 'merge_clauses'/3
	    (_cor1, _cor0, [])
'merge_clauses'/3 =
    %% Line 2078
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{M,F,A,_X_C1},R1}|[{{_cor7,_cor8,_cor9,C2},R2}|Clauses]],MFun,Result>
	      when let <_cor12> =
		    call 'erlang':'=:='
			(_cor7, M)
		in  let <_cor10> =
			call 'erlang':'=:='
			    (_cor8, F)
		    in  let <_cor11> =
			    call 'erlang':'=:='
				(_cor9, A)
			in  let <_cor13> =
				call 'erlang':'and'
				    (_cor10, _cor11)
			    in  call 'erlang':'and'
				    (_cor12, _cor13) ->
	      let <_cor3> =
		  %% Line 2079
		  apply MFun
		      (R1, R2)
	      in  %% Line 2079
		  apply 'merge_clauses'/3
		      ([{{M,F,A,C2},_cor3}|Clauses], MFun, Result)
	  %% Line 2080
	  <[{{M,F,A,_X_C},R}|Clauses],MFun,Result> when 'true' ->
	      %% Line 2081
	      apply 'merge_clauses'/3
		  (Clauses, MFun, [{{M,F,A},R}|Result])
	  %% Line 2082
	  <[],_X_Fun,Result> when 'true' ->
	      %% Line 2083
	      call 'lists':'reverse'
		  (Result)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'merge_clauses',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_functions'/2 =
    %% Line 2085
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_MFA,R}|Functions],MFun> when 'true' ->
	      %% Line 2086
	      apply 'merge_functions'/3
		  (Functions, MFun, R)
	  %% Line 2087
	  <[],_X_MFun> when 'true' ->
	      %% Line 2088
	      {0,0}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'merge_functions',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_functions'/3 =
    %% Line 2090
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_X_MFA,R}|Functions],MFun,Result> when 'true' ->
	      let <_cor3> =
		  %% Line 2091
		  apply MFun
		      (Result, R)
	      in  %% Line 2091
		  apply 'merge_functions'/3
		      (Functions, MFun, _cor3)
	  %% Line 2092
	  <[],_X_MFun,Result> when 'true' ->
	      %% Line 2093
	      Result
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'merge_functions',3}}] )
	    -| ['compiler_generated'] )
	end
'do_parallel_analysis_to_file'/6 =
    %% Line 2095
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 2096
	    case _cor2 of
	      %% Line 2097
	      <{'loaded',File0}> when 'true' ->
		  %% Line 2098
		  case %% Line 2099
		       call 'ets':'lookup'
			   ('cover_internal_clause_table', _cor5) of
		    <[{_cor23,Clauses}|[]]>
			when call 'erlang':'=:='
			      (_cor23,
			       _cor5) ->
			%% Line 2101
			( case _cor0 of
			    ( <( {'main_state',_cor24,_cor25,_cor26,_rec116,_cor27}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  apply 'collect'/3
					  (_cor5, Clauses, _rec116)
				      %% Line 2102
				      File0
			      -| ['compiler_generated'] )
			    ( <_cor28> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','main_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2103
	      <{'imported',File0,_cor29}> when 'true' ->
		  %% Line 2104
		  File0
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor9})
		-| ['compiler_generated'] )
	    end
	in  %% Line 2106
	    case apply 'find_source'/2
		     (_cor5, _cor10) of
	      %% Line 2107
	      <{'beam',_X_BeamFile}> when 'true' ->
		  %% Line 2108
		  apply 'reply'/2
		      (_cor1, {'error','no_source_code_found'})
	      %% Line 2109
	      <ErlFile> when 'true' ->
		  %% Line 2110
		  ( case _cor0 of
		      ( <( {'main_state',_cor30,_rec117,_cor31,_cor32,_cor33}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  apply 'analyse_info'/2
				    (_cor5, _rec117)
				let <HTML> =
				    %% Line 2111
				    call 'lists':'member'
					('html', _cor3)
				in  let <R> =
					%% Line 2112
					apply 'do_analyse_to_file'/4
					    (_cor5, _cor4, %% Line 2113
							   ErlFile, %% Line 2113
								    HTML)
				    in  %% Line 2114
					apply 'reply'/2
					    (_cor1, R)
			-| ['compiler_generated'] )
		      ( <_cor34> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','main_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
'do_analyse_to_file'/4 =
    %% Line 2120
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2121
	case call 'file':'open'
		 (_cor1, ['read']) of
	  %% Line 2122
	  <{'ok',InFd}> when 'true' ->
	      %% Line 2123
	      case call 'file':'open'
		       (_cor2, ['write']) of
		%% Line 2124
		<{'ok',OutFd}> when 'true' ->
		    do  %% Line 2125
			case <> of
			  <>
			      when call 'erlang':'=:='
				    (_cor0,
				     'true') ->
			      let <Encoding> =
				  %% Line 2126
				  apply 'encoding'/1
				      (_cor1)
			      in  let <Header> =
				      %% Line 2128
				      [[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[72|[84|[77|[76|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[72|[84|[77|[76|[32|[51|[46|[50|[32|[70|[105|[110|[97|[108|[47|[47|[69|[78|[34|[62|[10|[60|[104|[116|[109|[108|[62|[10|[60|[104|[101|[97|[100|[62|[10|[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[67|[111|[110|[116|[101|[110|[116|[45|[84|[121|[112|[101|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[116|[101|[120|[116|[47|[104|[116|[109|[108|[59|[32|[99|[104|[97|[114|[115|[101|[116|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2134
																																																																																												   [Encoding|[[34|[47|[62|[10|[60|[116|[105|[116|[108|[101|[62]]]]]]]]]]]|%% Line 2135
																																																																																																					  [_cor2|[[60|[47|[116|[105|[116|[108|[101|[62|[10|[60|[47|[104|[101|[97|[100|[62|[60|[98|[111|[100|[121|[32|[115|[116|[121|[108|[101|[61|[39|[98|[97|[99|[107|[103|[114|[111|[117|[110|[100|[45|[99|[111|[108|[111|[114|[58|[32|[119|[104|[105|[116|[101|[59|[32|[99|[111|[108|[111|[114|[58|[32|[98|[108|[97|[99|[107|[39|[62|[10|[60|[112|[114|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
				  in  %% Line 2140
				      call 'file':'write'
					  (OutFd, Header)
			  %% Line 2141
			  <> when 'true' ->
			      'ok'
			end
			%% Line 2145
			case call 'calendar':'local_time'
				 () of
			  <{{Y,Mo,D},{H,Mi,S}}> when 'true' ->
			      let <_cor7> =
				  %% Line 2149
				  call 'erlang':'integer_to_list'
				      (Mo)
			      in  let <_cor8> =
				      %% Line 2149
				      call 'string':'right'
					  (_cor7, 2, 48)
				  in  let <_cor9> =
					  %% Line 2150
					  call 'erlang':'integer_to_list'
					      (D)
				      in  let <_cor10> =
					      %% Line 2150
					      call 'string':'right'
						  (_cor9, 2, 48)
					  in  let <_cor11> =
						  %% Line 2151
						  call 'erlang':'integer_to_list'
						      (H)
					      in  let <_cor12> =
						      %% Line 2151
						      call 'string':'right'
							  (_cor11, 2, 48)
						  in  let <_cor13> =
							  %% Line 2152
							  call 'erlang':'integer_to_list'
							      (Mi)
						      in  let <_cor14> =
							      %% Line 2152
							      call 'string':'right'
								  (_cor13, 2, 48)
							  in  let <_cor15> =
								  %% Line 2153
								  call 'erlang':'integer_to_list'
								      (S)
							      in  let <_cor16> =
								      %% Line 2153
								      call 'string':'right'
									  (_cor15, 2, 48)
								  in  let <Timestamp> =
									  %% Line 2147
									  call 'io_lib':'format'
									      ([126|[112|[45|[126|[115|[45|[126|[115|[32|[97|[116|[32|[126|[115|[58|[126|[115|[58|[126|[115]]]]]]]]]]]]]]]]]]]], %% Line 2148
																								 [Y|%% Line 2149
																								    [_cor8|%% Line 2150
																									   [_cor10|%% Line 2151
																										   [_cor12|%% Line 2152
																											   [_cor14|%% Line 2153
																												   [_cor16|[]]]]]]])
								      in  do  %% Line 2154
									      call 'file':'write'
										  (OutFd, %% Line 2155
											  [[70|[105|[108|[101|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[102|[114|[111|[109|[32]]]]]]]]]]]]]]]]]]]]|[_cor1|[[32|[98|[121|[32|[67|[79|[86|[69|[82|[32]]]]]]]]]]|%% Line 2156
																																	 [Timestamp|[[10|[10|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									      do  %% Line 2161
										  apply 'print_lines'/5
										      (_cor3, InFd, OutFd, 1, _cor0)
										  do  %% Line 2163
										      case <> of
											<>
											    when call 'erlang':'=:='
												  (_cor0,
												   'true') ->
											    call 'io':'format'
												(OutFd, [60|[47|[112|[114|[101|[62|[10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]], [])
											%% Line 2164
											<> when 'true' ->
											    'ok'
										      end
										      do  %% Line 2167
											  call 'file':'close'
											      (OutFd)
											  do  %% Line 2168
											      call 'file':'close'
												  (InFd)
											      %% Line 2170
											      {'ok',_cor2}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		%% Line 2172
		<{'error',Reason}> when 'true' ->
		    %% Line 2173
		    {'error',{'file',_cor2,Reason}}
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2176
	  <{'error',Reason}> when 'true' ->
	      %% Line 2177
	      {'error',{'file',_cor1,Reason}}
	  ( <_cor19> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor19})
	    -| ['compiler_generated'] )
	end
'print_lines'/5 =
    %% Line 2180
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2181
	case call 'io':'get_line'
		 (_cor3, '') of
	  %% Line 2182
	  <'eof'> when 'true' ->
	      %% Line 2183
	      'ignore'
	  %% Line 2184
	  <Line = [37|_cor38]> when 'true' ->
	      let <_cor5> =
		  %% Line 2185
		  apply 'tab'/0
		      ()
	      in  let <_cor6> =
		      %% Line 2185
		      apply 'escape_lt_and_gt'/2
			  (Line, _cor0)
		  in  do  %% Line 2185
			  call 'io':'put_chars'
			      (_cor2, [_cor5|[_cor6|[]]])
			  let <_cor7> =
			      %% Line 2186
			      call 'erlang':'+'
				  (_cor1, 1)
			  in  %% Line 2186
			      apply 'print_lines'/5
				  (_cor4, _cor3, _cor2, _cor7, _cor0)
	  %% Line 2187
	  <RawLine> when 'true' ->
	      let <Line> =
		  %% Line 2188
		  apply 'escape_lt_and_gt'/2
		      (RawLine, _cor0)
	      in  let <Pattern> =
		      %% Line 2189
		      {{'bump',_cor4,'_','_','_',_cor1},'$1'}
		  in  do  %% Line 2190
			  case call 'ets':'match'
				   ('cover_collected_remote_data_table', Pattern) of
			    %% Line 2191
			    <[]> when 'true' ->
				let <_cor10> =
				    %% Line 2192
				    apply 'tab'/0
					()
				in  %% Line 2192
				    call 'io':'put_chars'
					(_cor2, [_cor10|[Line|[]]])
			    %% Line 2193
			    <Ns> when 'true' ->
				let <_cor15> =
				    %% Line 2194
				    ( fun (_cor12,_cor11) ->
					  case <_cor12,_cor11> of
					    <[Ni|[]],Nacc> when 'true' ->
						call 'erlang':'+'
						    (Nacc, Ni)
					    ( <_cor14,_cor13> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor14,_cor13})
						    -| [{'function_name',{'-print_lines/5-fun-0-',2}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-print_lines/5-fun-0-'}}] )
				in  let <N> =
					%% Line 2194
					call 'lists':'foldl'
					    (_cor15, 0, Ns)
				    in  %% Line 2195
					case <> of
					  %% Line 2196
					  <>
					      when let <_cor17> =
						    call 'erlang':'=:='
							(N, 0)
						in  let <_cor18> =
							call 'erlang':'=:='
							    (_cor0, 'true')
						    in  call 'erlang':'and'
							    (_cor17, _cor18) ->
					      let <LineNoNL> =
						  %% Line 2197
						  call 'erlang':'--'
						      (Line, [10])
					      in  let <_cor21> =
						      %% Line 2200
						      apply 'fill1'/0
							  ()
						  in  let <RedLine> =
							  %% Line 2200
							  [[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[114|[101|[100|[62]]]]]]]]]]]]]]]]|[[32|[32|[32|[32|[32|[48]]]]]]|[_cor21|%% Line 2201
																							     [LineNoNL|[[60|[47|[102|[111|[110|[116|[62|[10]]]]]]]]]]]]]
						      in  %% Line 2202
							  call 'io':'put_chars'
							      (_cor2, RedLine)
					  %% Line 2203
					  <>
					      when call 'erlang':'<'
						    (N,
						     1000000) ->
					      let <_cor23> =
						  %% Line 2204
						  call 'erlang':'integer_to_list'
						      (N)
					      in  let <Str> =
						      %% Line 2204
						      call 'string':'right'
							  (_cor23, 6, 32)
						  in  let <_cor25> =
							  %% Line 2205
							  apply 'fill1'/0
							      ()
						      in  %% Line 2205
							  call 'io':'put_chars'
							      (_cor2, [Str|[_cor25|[Line|[]]]])
					  %% Line 2206
					  <>
					      when call 'erlang':'<'
						    (N,
						     10000000) ->
					      let <Str> =
						  %% Line 2207
						  call 'erlang':'integer_to_list'
						      (N)
					      in  let <_cor27> =
						      %% Line 2208
						      apply 'fill2'/0
							  ()
						  in  %% Line 2208
						      call 'io':'put_chars'
							  (_cor2, [Str|[_cor27|[Line|[]]]])
					  %% Line 2209
					  <> when 'true' ->
					      let <Str> =
						  %% Line 2210
						  call 'erlang':'integer_to_list'
						      (N)
					      in  let <_cor29> =
						      %% Line 2211
						      apply 'fill3'/0
							  ()
						  in  %% Line 2211
						      call 'io':'put_chars'
							  (_cor2, [Str|[_cor29|[Line|[]]]])
					end
			  end
			  let <_cor31> =
			      %% Line 2214
			      call 'erlang':'+'
				  (_cor1, 1)
			  in  %% Line 2214
			      apply 'print_lines'/5
				  (_cor4, _cor3, _cor2, _cor31, _cor0)
	end
'tab'/0 =
    %% Line 2217
    fun () ->
	[32|[32|[32|[32|[32|[32|[32|[32|[124|[32|[32]]]]]]]]]]]
'fill1'/0 =
    %% Line 2218
    fun () ->
	[46|[46|[124|[32|[32]]]]]
'fill2'/0 =
    %% Line 2219
    fun () ->
	[46|[124|[32|[32]]]]
'fill3'/0 =
    %% Line 2220
    fun () ->
	[124|[32|[32]]]
'do_export'/4 =
    %% Line 2223
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2224
	case call 'file':'open'
		 (_cor2, ['write'|['binary'|['raw']]]) of
	  %% Line 2225
	  <{'ok',Fd}> when 'true' ->
	      let <_cor24> =
		  %% Line 2227
		  case _cor3 of
		    %% Line 2228
		    <'_'> when 'true' ->
			%% Line 2229
			( case _cor0 of
			    ( <( {'main_state',_cor31,_rec118,_cor32,_cor33,_cor34}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  apply 'export_info'/1
					  (_rec118)
				      do  %% Line 2230
					  apply 'collect'/1
					      (_cor33)
					  %% Line 2231
					  apply 'do_export_table'/3
					      (_cor31, _rec118, %% Line 2233
								Fd)
			      -| ['compiler_generated'] )
			    ( <_cor35> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','main_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 2234
		    <_cor51> when 'true' ->
			%% Line 2235
			( case _cor0 of
			    ( <( {'main_state',_cor52,_rec122,_cor53,_cor54,_cor55}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  apply 'export_info'/2
					  (_cor3, _rec122)
				      %% Line 2236
				      try
					  apply 'is_loaded'/2
					      (_cor3, _cor0)
				      of <_cor14> ->
					  case _cor14 of
					    %% Line 2237
					    <{'loaded',File}> when 'true' ->
						%% Line 2238
						case %% Line 2239
						     call 'ets':'lookup'
							 ('cover_internal_clause_table', _cor3) of
						  <[{_cor57,Clauses}|[]]>
						      when call 'erlang':'=:='
							    (_cor57,
							     _cor3) ->
						      do  %% Line 2240
							  apply 'collect'/3
							      (_cor3, Clauses, _cor54)
							  %% Line 2242
							  apply 'do_export_table'/3
							      ([{_cor3,File}|[]], [], Fd)
						  ( <_cor15> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor15})
						    -| ['compiler_generated'] )
						end
					    %% Line 2243
					    <{'imported',File,ImportFiles}> when 'true' ->
						let <Imported> =
						    %% Line 2246
						    [{_cor3,File,ImportFiles}|[]]
						in  %% Line 2247
						    apply 'do_export_table'/3
							([], Imported, Fd)
					    ( <_cor19> when 'true' ->
						  primop 'match_fail'
						      ({'try_clause',_cor19})
					      -| ['compiler_generated'] )
					  end
				      catch <_cor22,_cor21,_cor20> ->
					  case <_cor22,_cor21,_cor20> of
					    %% Line 2248
					    <'throw',_cor63,_cor64> when 'true' ->
						%% Line 2249
						{'error',{'not_cover_compiled',_cor3}}
					    ( <_cor22,_cor21,_cor20> when 'true' ->
						  primop 'raise'
						      (_cor20, _cor21)
					      -| ['compiler_generated'] )
					  end
			      -| ['compiler_generated'] )
			    ( <_cor56> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','main_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	      in  do  %% Line 2252
		      call 'file':'close'
			  (Fd)
		      %% Line 2253
		      apply 'reply'/2
			  (_cor1, _cor24)
	  %% Line 2254
	  <{'error',Reason}> when 'true' ->
	      %% Line 2255
	      apply 'reply'/2
		  (_cor1, {'error',{'cant_open_file',_cor2,Reason}})
	  ( <_cor26> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor26})
	    -| ['compiler_generated'] )
	end
'do_export_table'/3 =
    %% Line 2259
    fun (_cor2,_cor1,_cor0) ->
	let <ModList> =
	    %% Line 2260
	    apply 'merge'/2
		(_cor1, _cor2)
	in  %% Line 2261
	    apply 'write_module_data'/2
		(ModList, _cor0)
'merge'/2 =
    %% Line 2263
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Module,File,_X_ImportFiles}|Imported],ModuleList> when 'true' ->
	      %% Line 2264
	      case call 'lists':'keymember'
		       (Module, 1, ModuleList) of
		%% Line 2265
		<'true'> when 'true' ->
		    %% Line 2266
		    apply 'merge'/2
			(Imported, ModuleList)
		%% Line 2267
		<'false'> when 'true' ->
		    %% Line 2268
		    apply 'merge'/2
			(Imported, [{Module,File}|ModuleList])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2270
	  <[],ModuleList> when 'true' ->
	      %% Line 2271
	      ModuleList
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'merge',2}}] )
	    -| ['compiler_generated'] )
	end
'write_module_data'/2 =
    %% Line 2273
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Module,File}|ModList],Fd> when 'true' ->
	      do  %% Line 2274
		  apply 'write'/2
		      ({'file',Module,File}, Fd)
		  %% Line 2275
		  case call 'ets':'lookup'
			   ('cover_collected_remote_clause_table', Module) of
		    <[Clauses|[]]> when 'true' ->
			do  %% Line 2276
			    apply 'write'/2
				(Clauses, Fd)
			    let <ModuleData> =
				%% Line 2277
				call 'ets':'match_object'
				    ('cover_collected_remote_data_table', {{'bump',Module,'_','_','_','_'},'_'})
			    in  do  %% Line 2278
				    apply 'do_write_module_data'/2
					(ModuleData, Fd)
				    %% Line 2279
				    apply 'write_module_data'/2
					(ModList, Fd)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2280
	  <[],_X_Fd> when 'true' ->
	      %% Line 2281
	      'ok'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'write_module_data',2}}] )
	    -| ['compiler_generated'] )
	end
'do_write_module_data'/2 =
    %% Line 2283
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Fd> when 'true' ->
	      do  %% Line 2284
		  apply 'write'/2
		      (H, Fd)
		  %% Line 2285
		  apply 'do_write_module_data'/2
		      (T, Fd)
	  %% Line 2286
	  <[],_X_Fd> when 'true' ->
	      %% Line 2287
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'do_write_module_data',2}}] )
	    -| ['compiler_generated'] )
	end
'write'/2 =
    %% Line 2289
    fun (_cor1,_cor0) ->
	let <Bin> =
	    %% Line 2290
	    call 'erlang':'term_to_binary'
		(_cor1, ['compressed'])
	in  do  %% Line 2291
		case call 'erlang':'byte_size'
			 (Bin) of
		  %% Line 2292
		  <Size>
		      when call 'erlang':'>'
			    (Size,
			     255) ->
		      let <SizeBin> =
			  %% Line 2293
			  call 'erlang':'term_to_binary'
			      ({'$size',Size})
		      in  let <_cor4> =
			      %% Line 2295
			      call 'erlang':'byte_size'
				  (SizeBin)
			  in  let <_cor5> =
				  %% Line 2295
				  #{#<_cor4>(8,1,'integer',['unsigned'|['big']]),
				    #<SizeBin>('all',8,'binary',['unsigned'|['big']]),
				    #<Bin>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 2294
				  call 'file':'write'
				      (_cor0, _cor5)
		  %% Line 2296
		  <Size> when 'true' ->
		      let <_cor6> =
			  %% Line 2297
			  #{#<Size>(8,1,'integer',['unsigned'|['big']]),
			    #<Bin>('all',8,'binary',['unsigned'|['big']])}#
		      in  %% Line 2297
			  call 'file':'write'
			      (_cor0, _cor6)
		end
		%% Line 2299
		'ok'
'do_import_to_table'/3 =
    %% Line 2302
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2303
	apply 'do_import_to_table'/4
	    (_cor2, _cor1, _cor0, [])
'do_import_to_table'/4 =
    %% Line 2304
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2305
	case apply 'get_term'/1
		 (_cor3) of
	  %% Line 2306
	  <{'file',Module,File}> when 'true' ->
	      %% Line 2307
	      case apply 'add_imported'/4
		       (Module, File, _cor2, _cor1) of
		%% Line 2308
		<{'ok',NewImported}> when 'true' ->
		    %% Line 2309
		    apply 'do_import_to_table'/4
			(_cor3, _cor2, NewImported, _cor0)
		%% Line 2310
		<'dont_import'> when 'true' ->
		    %% Line 2311
		    apply 'do_import_to_table'/4
			(_cor3, _cor2, _cor1, %% Line 2312
					      [Module|_cor0])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2314
	  <{Key = {'bump',Module,_cor12,_cor13,_cor14,_cor15},Val}> when 'true' ->
	      do  %% Line 2315
		  case call 'lists':'member'
			   (Module, _cor0) of
		    %% Line 2316
		    <'false'> when 'true' ->
			%% Line 2317
			apply 'insert_in_collection_table'/2
			    (Key, Val)
		    %% Line 2318
		    <'true'> when 'true' ->
			'ok'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
		  %% Line 2321
		  apply 'do_import_to_table'/4
		      (_cor3, _cor2, _cor1, _cor0)
	  %% Line 2322
	  <{Module,Clauses}> when 'true' ->
	      do  %% Line 2323
		  case call 'lists':'member'
			   (Module, _cor0) of
		    %% Line 2324
		    <'false'> when 'true' ->
			%% Line 2325
			call 'ets':'insert'
			    ('cover_collected_remote_clause_table', {Module,Clauses})
		    %% Line 2326
		    <'true'> when 'true' ->
			'ok'
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
		  %% Line 2329
		  apply 'do_import_to_table'/4
		      (_cor3, _cor2, _cor1, _cor0)
	  %% Line 2330
	  <'eof'> when 'true' ->
	      _cor1
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'get_term'/1 =
    %% Line 2335
    fun (_cor0) ->
	%% Line 2336
	case call 'file':'read'
		 (_cor0, 1) of
	  %% Line 2337
	  <{'ok',#{#<Size1>(8,1,'integer',['unsigned'|['big']])}#}> when 'true' ->
	      %% Line 2338
	      case call 'file':'read'
		       (_cor0, Size1) of
		<{'ok',Bin1}> when 'true' ->
		    %% Line 2339
		    case call 'erlang':'binary_to_term'
			     (Bin1) of
		      %% Line 2340
		      <{'$size',Size2}> when 'true' ->
			  %% Line 2341
			  case call 'file':'read'
				   (_cor0, Size2) of
			    <{'ok',Bin2}> when 'true' ->
				%% Line 2342
				call 'erlang':'binary_to_term'
				    (Bin2)
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2343
		      <Term> when 'true' ->
			  %% Line 2344
			  Term
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2346
	  <'eof'> when 'true' ->
	      %% Line 2347
	      'eof'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'do_reset_main_node'/2 =
    %% Line 2353
    fun (_cor1,_cor0) ->
	do  %% Line 2354
	    apply 'do_reset'/1
		(_cor1)
	    do  %% Line 2355
		apply 'do_reset_collection_table'/1
		    (_cor1)
		%% Line 2356
		apply 'remote_reset'/2
		    (_cor1, _cor0)
'do_reset_collection_table'/1 =
    %% Line 2358
    fun (_cor0) ->
	do  %% Line 2359
	    call 'ets':'delete'
		('cover_collected_remote_clause_table', _cor0)
	    %% Line 2360
	    call 'ets':'match_delete'
		('cover_collected_remote_data_table', {{'bump',_cor0,'_','_','_','_'},'_'})
'do_reset'/1 =
    %% Line 2365
    fun (_cor0) ->
	%% Line 2366
	case call 'ets':'lookup'
		 ('cover_internal_clause_table', _cor0) of
	  <[{_cor3,Clauses}|[]]>
	      when call 'erlang':'=:='
		    (_cor3,
		     _cor0) ->
	      %% Line 2367
	      apply 'do_reset2'/1
		  (Clauses)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_reset2'/1 =
    %% Line 2369
    fun (_cor0) ->
	case _cor0 of
	  <[{M,F,A,C,_X_L}|Clauses]> when 'true' ->
	      let <Pattern> =
		  %% Line 2370
		  {{'bump',M,F,A,C,'_'},'_'}
	      in  let <Bumps> =
		      %% Line 2371
		      call 'ets':'match_object'
			  ('cover_internal_data_table', Pattern)
		  in  let <_cor5> =
			  %% Line 2372
			  ( fun (_cor3) ->
				case _cor3 of
				  <{Bump,_X_N}> when 'true' ->
				      %% Line 2373
				      call 'ets':'insert'
					  ('cover_internal_data_table', {Bump,0})
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'-do_reset2/1-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-do_reset2/1-fun-0-'}}] )
		      in  do  %% Line 2372
			      call 'lists':'foreach'
				  (_cor5, %% Line 2375
					  Bumps)
			      %% Line 2376
			      apply 'do_reset2'/1
				  (Clauses)
	  %% Line 2377
	  <[]> when 'true' ->
	      %% Line 2378
	      'ok'
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'do_reset2',1}}] )
	    -| ['compiler_generated'] )
	end
'do_clear'/1 =
    %% Line 2380
    fun (_cor0) ->
	do  %% Line 2381
	    call 'ets':'match_delete'
		('cover_internal_clause_table', {_cor0,'_'})
	    do  %% Line 2382
		call 'ets':'match_delete'
		    ('cover_internal_data_table', {{'bump',_cor0,'_','_','_','_'},'_'})
		let <_cor1> =
		    %% Line 2383
		    call 'ets':'all'
			()
		in  %% Line 2383
		    case call 'lists':'member'
			     ('cover_collected_remote_data_table', _cor1) of
		      %% Line 2384
		      <'true'> when 'true' ->
			  %% Line 2386
			  call 'ets':'match_delete'
			      ('cover_collected_remote_data_table', {{'bump',_cor0,'_','_','_','_'},'_'})
		      %% Line 2387
		      <'false'> when 'true' ->
			  %% Line 2388
			  'ok'
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
'not_loaded'/3 =
    %% Line 2391
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Module,'unloaded',State> when 'true' ->
	      do  %% Line 2392
		  apply 'do_clear'/1
		      (Module)
		  %% Line 2393
		  ( case State of
		      ( <( {'main_state',_cor13,_cor14,_cor15,_rec124,_cor16}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  apply 'remote_unload'/2
				    (_rec124, [Module|[]])
				let <Compiled> =
				    %% Line 2394
				    apply 'update_compiled'/2
					([Module|[]], _cor13)
				in  %% Line 2396
				    call 'erlang':'setelement'
					(2, State, Compiled)
			-| ['compiler_generated'] )
		      ( <_cor17> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','main_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2397
	  <_X_Module,_X_Else,State> when 'true' ->
	      %% Line 2398
	      State
	end
'escape_lt_and_gt'/2 =
    %% Line 2404
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Rawline,HTML>
	      when call 'erlang':'=/='
		    (HTML,
		     'true') ->
	      %% Line 2405
	      Rawline
	  %% Line 2406
	  <Rawline,_X_HTML> when 'true' ->
	      %% Line 2407
	      apply 'escape_lt_and_gt1'/2
		  (Rawline, [])
	end
'escape_lt_and_gt1'/2 =
    %% Line 2409
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[60|T],Acc> when 'true' ->
	      %% Line 2410
	      apply 'escape_lt_and_gt1'/2
		  (T, [59|[116|[108|[38|Acc]]]])
	  %% Line 2411
	  <[62|T],Acc> when 'true' ->
	      %% Line 2412
	      apply 'escape_lt_and_gt1'/2
		  (T, [59|[116|[103|[38|Acc]]]])
	  %% Line 2413
	  <[38|T],Acc> when 'true' ->
	      %% Line 2414
	      apply 'escape_lt_and_gt1'/2
		  (T, [59|[112|[109|[97|[38|Acc]]]]])
	  %% Line 2415
	  <[],Acc> when 'true' ->
	      %% Line 2416
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 2417
	  <[H|T],Acc> when 'true' ->
	      %% Line 2418
	      apply 'escape_lt_and_gt1'/2
		  (T, [H|Acc])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'escape_lt_and_gt1',2}}] )
	    -| ['compiler_generated'] )
	end
'pmap'/2 =
    %% Line 2420
    fun (_cor1,_cor0) ->
	%% Line 2421
	apply 'pmap'/3
	    (_cor1, _cor0, 20)
'pmap'/3 =
    %% Line 2422
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2423
	apply 'pmap'/6
	    (_cor2, _cor1, [], _cor0, 0, [])
'pmap'/6 =
    %% Line 2424
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fun,[E|Rest],Pids,Limit,Cnt,Acc>
	      when call 'erlang':'<'
		    (Cnt,
		     Limit) ->
	      let <Collector> =
		  %% Line 2425
		  call 'erlang':'self'
		      ()
	      in  let <_cor9> =
		      %% Line 2426
		      ( fun () ->
			    do  %% Line 2427
				call 'erlang':'put'
				    ('pmap', E)
				let <_cor8> =
				    %% Line 2428
				    call 'erlang':'self'
					()
				in  let <_cor7> =
					%% Line 2428
					apply Fun
					    (E)
				    in  %% Line 2428
					call 'erlang':'!'
					    (Collector, {'res',_cor8,_cor7})
			-| [{'id',{0,0,'-pmap/6-fun-0-'}}] )
		  in  let <Pid> =
			  %% Line 2426
			  call 'erlang':'spawn_link'
			      (_cor9)
		      in  do  %% Line 2430
			      call 'erlang':'monitor'
				  ('process', Pid)
			      let <_cor12> =
				  %% Line 2431
				  call 'erlang':'++'
				      (Pids, [Pid|[]])
			      in  let <_cor11> =
				      %% Line 2431
				      call 'erlang':'+'
					  (Cnt, 1)
				  in  %% Line 2431
				      apply 'pmap'/6
					  (Fun, Rest, _cor12, Limit, _cor11, Acc)
	  %% Line 2432
	  <Fun,List,[Pid|Pids],Limit,Cnt,Acc> when 'true' ->
	      %% Line 2433
	      receive
		%% Line 2434
		<{'DOWN',_X_Ref,'process',X,_cor21}>
		    when call 'erlang':'is_pid'
			  (X) ->
		    let <_cor13> =
			%% Line 2435
			call 'erlang':'-'
			    (Cnt, 1)
		    in  %% Line 2435
			apply 'pmap'/6
			    (Fun, List, [Pid|Pids], Limit, _cor13, Acc)
		%% Line 2436
		<{'res',_cor22,Res}>
		    when call 'erlang':'=:='
			  (_cor22,
			   Pid) ->
		    %% Line 2437
		    apply 'pmap'/6
			(Fun, List, Pids, Limit, Cnt, [Res|Acc])
	      after 'infinity' ->
		'true'
	  %% Line 2439
	  <_X_Fun,[],[],_X_Limit,0,Acc> when 'true' ->
	      %% Line 2440
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 2441
	  <Fun,[],[],Limit,Cnt,Acc> when 'true' ->
	      %% Line 2442
	      receive
		%% Line 2443
		<{'DOWN',_X_Ref,'process',X,_cor23}>
		    when call 'erlang':'is_pid'
			  (X) ->
		    let <_cor14> =
			%% Line 2444
			call 'erlang':'-'
			    (Cnt, 1)
		    in  %% Line 2444
			apply 'pmap'/6
			    (Fun, [], [], Limit, _cor14, Acc)
	      after 'infinity' ->
		'true'
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'pmap',6}}] )
	    -| ['compiler_generated'] )
	end
'encoding'/1 =
    %% Line 2449
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2451
	    case call 'epp':'read_encoding'
		     (_cor0) of
	      %% Line 2452
	      <'none'> when 'true' ->
		  %% Line 2453
		  call 'epp':'default_encoding'
		      ()
	      %% Line 2454
	      <E> when 'true' ->
		  %% Line 2455
		  E
	    end
	in  %% Line 2457
	    apply 'html_encoding'/1
		(_cor2)
'html_encoding'/1 =
    %% Line 2459
    fun (_cor0) ->
	case _cor0 of
	  <'latin1'> when 'true' ->
	      %% Line 2460
	      [105|[115|[111|[45|[56|[56|[53|[57|[45|[49]]]]]]]]]]
	  %% Line 2461
	  <'utf8'> when 'true' ->
	      %% Line 2462
	      [117|[116|[102|[45|[56]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'html_encoding',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('cover')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('cover', _cor0)
end