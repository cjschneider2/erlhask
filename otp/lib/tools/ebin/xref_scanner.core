module 'xref_scanner' ['module_info'/0,
		       'module_info'/1,
		       'scan'/1]
    attributes []
'scan'/1 =
    %% Line 24
    fun (_cor0) ->
	%% Line 25
	case call 'erl_scan':'string'
		 (_cor0) of
	  %% Line 26
	  <{'ok',Tokens,_X_Line}> when 'true' ->
	      let <_cor1> =
		  %% Line 27
		  apply 'a1'/1
		      (Tokens)
	      in  let <_cor2> =
		      %% Line 27
		      apply 'lex'/1
			  (_cor1)
		  in  %% Line 27
		      {'ok',_cor2}
	  %% Line 28
	  <{'error',{Line,Module,Info},_X_EndLine}> when 'true' ->
	      let <_cor3> =
		  %% Line 29
		  call Module:'format_error'
		      (Info)
	      in  %% Line 29
		  {'error',_cor3,Line}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'a1'/1 =
    %% Line 32
    fun (_cor0) ->
	case _cor0 of
	  <[{'-',N}|[{'integer',_cor5,1}|L]]>
	      when call 'erlang':'=:='
		    (_cor5,
		     N) ->
	      let <_cor2> =
		  %% Line 33
		  apply 'a1'/1
		      (L)
	      in  %% Line 33
		  [{'integer',N,-1}|_cor2]
	  %% Line 34
	  <[T|L]> when 'true' ->
	      let <_cor3> =
		  %% Line 35
		  apply 'a1'/1
		      (L)
	      in  %% Line 35
		  [T|_cor3]
	  %% Line 36
	  <[]> when 'true' ->
	      %% Line 37
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'a1',1}}] )
	    -| ['compiler_generated'] )
	end
'lex'/1 =
    %% Line 44
    fun (_cor0) ->
	case _cor0 of
	  <[{'atom',N,V1}|[{'->',_cor25}|[{'atom',_cor26,V2}|L]]]> when 'true' ->
	      let <Constant> =
		  %% Line 45
		  {'constant','unknown','edge',{V1,V2}}
	      in  let <_cor2> =
		      %% Line 46
		      apply 'lex'/1
			  (L)
		  in  %% Line 46
		      [{'edge',N,Constant}|_cor2]
	  %% Line 47
	  <[{'{',N}|[{'atom',_cor27,V1}|[{',',_cor28}|[{'atom',_cor29,V2}|[{'}',_cor30}|L]]]]]> when 'true' ->
	      let <Constant> =
		  %% Line 48
		  {'constant','unknown','edge',{V1,V2}}
	      in  let <_cor4> =
		      %% Line 49
		      apply 'lex'/1
			  (L)
		  in  %% Line 49
		      [{'edge',N,Constant}|_cor4]
	  %% Line 50
	  <[{'atom',N,M}|[{':',_cor31}|[{'atom',_cor32,F}|[{'/',_cor33}|[{'integer',_cor34,A}|[{'->',_cor35}|[{'atom',_cor36,M2}|[{':',_cor37}|[{'atom',_cor38,F2}|[{'/',_cor39}|[{'integer',_cor40,A2}|L]]]]]]]]]]]> when 'true' ->
	      let <Constant> =
		  %% Line 51
		  {'constant','Fun','edge',{{M,F,A},{M2,F2,A2}}}
	      in  let <_cor6> =
		      %% Line 52
		      apply 'lex'/1
			  (L)
		  in  %% Line 52
		      [{'edge',N,Constant}|_cor6]
	  %% Line 53
	  <[{'atom',N,M}|[{':',_cor41}|[{'atom',_cor42,F}|[{'/',_cor43}|[{'integer',_cor44,A}|L]]]]]> when 'true' ->
	      let <Constant> =
		  %% Line 54
		  {'constant','Fun','vertex',{M,F,A}}
	      in  let <_cor8> =
		      %% Line 55
		      apply 'lex'/1
			  (L)
		  in  %% Line 55
		      [{'vertex',N,Constant}|_cor8]
	  %% Line 56
	  <[{'{',N}|[{'{',_cor45}|[{'atom',_cor46,M}|[{',',_cor47}|[{'atom',_cor48,F}|[{',',_cor49}|[{'integer',_cor50,A}|[{'}',_cor51}|[{',',_cor52}|[{'{',_cor53}|[{'atom',_cor54,M2}|[{',',_cor55}|[{'atom',_cor56,F2}|[{',',_cor57}|[{'integer',_cor58,A2}|[{'}',_cor59}|[{'}',_cor60}|L]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <Constant> =
		  %% Line 57
		  {'constant','Fun','edge',{{M,F,A},{M2,F2,A2}}}
	      in  let <_cor10> =
		      %% Line 58
		      apply 'lex'/1
			  (L)
		  in  %% Line 58
		      [{'edge',N,Constant}|_cor10]
	  %% Line 59
	  <[{'{',N}|[{'atom',_cor61,M}|[{',',_cor62}|[{'atom',_cor63,F}|[{',',_cor64}|[{'integer',_cor65,A}|[{'}',_cor66}|L]]]]]]]> when 'true' ->
	      let <Constant> =
		  %% Line 60
		  {'constant','Fun','vertex',{M,F,A}}
	      in  let <_cor12> =
		      %% Line 61
		      apply 'lex'/1
			  (L)
		  in  %% Line 61
		      [{'vertex',N,Constant}|_cor12]
	  %% Line 62
	  <[{':',N1}|[{'var',N2,Decl}|L]]> when 'true' ->
	      %% Line 63
	      case apply 'is_type'/1
		       (Decl) of
		%% Line 64
		<'false'> when 'true' ->
		    let <_cor13> =
			apply 'lex'/1
			    (L)
		    in  [{':',N1}|[{'var',N2,Decl}|_cor13]]
		%% Line 65
		<'true'> when 'true' ->
		    let <_cor14> =
			apply 'lex'/1
			    (L)
		    in  [{'decl',N1,Decl}|_cor14]
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 67
	  <[{':',N}|[{'=',_cor67}|L]]> when 'true' ->
	      let <_cor16> =
		  %% Line 68
		  apply 'lex'/1
		      (L)
	      in  %% Line 68
		  [{':=',N}|_cor16]
	  %% Line 69
	  <[{'||',N}|[{'|',_cor68}|L]]> when 'true' ->
	      let <_cor17> =
		  %% Line 70
		  apply 'lex'/1
		      (L)
	      in  %% Line 70
		  [{'|||',N}|_cor17]
	  %% Line 71
	  <[V = {'var',N,Var}|L]> when 'true' ->
	      let <_cor19> =
		  %% Line 72
		  case apply 'is_type'/1
			   (Var) of
		    %% Line 73
		    <'false'> when 'true' ->
			V
		    %% Line 74
		    <'true'> when 'true' ->
			{'cast',N,Var}
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor21> =
		      %% Line 76
		      apply 'lex'/1
			  (L)
		  in  %% Line 76
		      [_cor19|_cor21]
	  %% Line 77
	  <[T|Ts]> when 'true' ->
	      let <_cor22> =
		  %% Line 78
		  apply 'lex'/1
		      (Ts)
	      in  %% Line 78
		  [T|_cor22]
	  %% Line 79
	  <[]> when 'true' ->
	      %% Line 80
	      [{'$end',-1}]
	  ( <_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24})
		  -| [{'function_name',{'lex',1}}] )
	    -| ['compiler_generated'] )
	end
'is_type'/1 =
    %% Line 82
    fun (_cor0) ->
	case _cor0 of
	  <'Rel'> when 'true' ->
	      'true'
	  %% Line 83
	  <'App'> when 'true' ->
	      'true'
	  %% Line 84
	  <'Mod'> when 'true' ->
	      'true'
	  %% Line 85
	  <'Fun'> when 'true' ->
	      'true'
	  %% Line 86
	  <'Lin'> when 'true' ->
	      'true'
	  %% Line 87
	  <'LLin'> when 'true' ->
	      'true'
	  %% Line 88
	  <'XLin'> when 'true' ->
	      'true'
	  %% Line 89
	  <'ELin'> when 'true' ->
	      'true'
	  %% Line 90
	  <'XXL'> when 'true' ->
	      'true'
	  %% Line 91
	  <_cor2> when 'true' ->
	      'false'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xref_scanner')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xref_scanner', _cor0)
end