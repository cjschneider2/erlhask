module 'fprof' ['$code_change'/1,
		'analyse'/0,
		'analyse'/1,
		'analyse'/2,
		'apply'/2,
		'apply'/3,
		'apply'/4,
		'call'/1,
		'code_change'/0,
		'get_state'/0,
		'getopts'/2,
		'just_call'/1,
		'load_profile'/0,
		'load_profile'/1,
		'load_profile'/2,
		'module_info'/0,
		'module_info'/1,
		'parsify'/1,
		'print_called'/2,
		'print_callers'/2,
		'print_func'/2,
		'println'/5,
		'profile'/0,
		'profile'/1,
		'profile'/2,
		'reply'/2,
		'save_profile'/0,
		'save_profile'/1,
		'save_profile'/2,
		'setopts'/1,
		'start'/0,
		'stop'/0,
		'stop'/1,
		'trace'/1,
		'trace'/2,
		'trace_call_collapse'/1,
		'trace_off'/0,
		'trace_on'/3]
    attributes [%% Line 28
		'author' =
		    %% Line 28
		    ['raimo@erix.ericsson.se'],
		%% Line 227
		'type' =
		    %% Line 227
		    [{{'record','trace_start'},[{'record_field',227,{'atom',227,'procs'}}|[{'record_field',228,{'atom',228,'mode'}}|[{'record_field',229,{'atom',229,'type'}}|[{'record_field',230,{'atom',230,'dest'}}]]]],[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','trace_stop'},[],[]}],
		%% Line 238
		'type' =
		    %% Line 238
		    [{{'record','profile'},[{'record_field',238,{'atom',238,'src'}}|[{'record_field',239,{'atom',239,'group_leader'}}|[{'record_field',240,{'atom',240,'dump'}}|[{'record_field',241,{'atom',241,'flags'}}]]]],[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','profile_start'},[{'record_field',243,{'atom',243,'group_leader'}}|[{'record_field',244,{'atom',244,'dump'}}|[{'record_field',245,{'atom',245,'flags'}}]]],[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','profile_stop'},[],[]}],
		%% Line 249
		'type' =
		    %% Line 249
		    [{{'record','analyse'},[{'record_field',249,{'atom',249,'group_leader'}}|[{'record_field',250,{'atom',250,'dest'}}|[{'record_field',251,{'atom',251,'flags'}}|[{'record_field',252,{'atom',252,'cols'}}|[{'record_field',253,{'atom',253,'callers'}}|[{'record_field',254,{'atom',254,'sort'}}|[{'record_field',255,{'atom',255,'totals'}}|[{'record_field',256,{'atom',256,'details'}}]]]]]]]],[]}],
		%% Line 258
		'type' =
		    %% Line 258
		    [{{'record','stop'},[{'record_field',259,{'atom',259,'reason'}}],[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','get_state'},[],[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{{'record','save_profile'},[{'record_field',269,{'atom',269,'file'}}],[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','load_profile'},[{'record_field',271,{'atom',271,'file'}}],[]}],
		%% Line 616
		'type' =
		    %% Line 616
		    [{{'record','clocks'},[{'record_field',617,{'atom',617,'id'}}|[{'record_field',618,{'atom',618,'cnt'},{'integer',618,0}}|[{'record_field',619,{'atom',619,'own'},{'integer',619,0}}|[{'record_field',620,{'atom',620,'acc'},{'integer',620,0}}]]]],[]}],
		%% Line 622
		'type' =
		    %% Line 622
		    [{{'record','proc'},[{'record_field',623,{'atom',623,'id'}}|[{'record_field',624,{'atom',624,'parent'}}|[{'record_field',625,{'atom',625,'spawned_as'}}|[{'record_field',626,{'atom',626,'init_log'},{'nil',626}}|[{'record_field',627,{'atom',627,'init_cnt'},{'integer',627,2}}]]]]],[]}],
		%% Line 629
		'type' =
		    %% Line 629
		    [{{'record','misc'},[{'record_field',629,{'atom',629,'id'}}|[{'record_field',630,{'atom',630,'data'}}]],[]}],
		%% Line 635
		'type' =
		    %% Line 635
		    [{{'record','funcstat'},[{'record_field',636,{'atom',636,'callers_sum'}}|[{'record_field',637,{'atom',637,'called_sum'}}|[{'record_field',638,{'atom',638,'callers'},{'nil',638}}|[{'record_field',639,{'atom',639,'called'},{'nil',639}}]]]],[]}]]
'dbg'/3 =
    %% Line 72
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Level,F,A>
	      when call 'erlang':'>='
		    (Level,
		     9) ->
	      do  %% Line 73
		  call 'io':'format'
		      (F, A)
		  %% Line 74
		  'ok'
	  %% Line 75
	  <_cor6,_cor7,_cor8> when 'true' ->
	      %% Line 76
	      'ok'
	end
'apply'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{M,F},Args>
	      when %% Line 91
		try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor3> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor4> =
				call 'erlang':'is_list'
				    (Args)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 92
	      apply 'apply_1'/4
		  (M, F, Args, [])
	  %% Line 93
	  <Fun,Args>
	      when %% Line 94
		try
		    let <_cor6> =
			call 'erlang':'is_function'
			    (Fun)
		    in  let <_cor7> =
			    call 'erlang':'is_list'
				(Args)
			in  call 'erlang':'and'
				(_cor6, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 95
	      apply 'apply_1'/3
		  (Fun, Args, [])
	  %% Line 96
	  <A,B> when 'true' ->
	      %% Line 97
	      call 'erlang':'error'
		  ('badarg', [A|[B|[]]])
	end
'apply'/3 =
    %% Line 99
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,Args>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (Args)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 100
	      apply 'apply_1'/4
		  (M, F, Args, [])
	  %% Line 101
	  <{M,F},Args,Options>
	      when %% Line 102
		try
		    let <_cor7> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor8> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor9> =
				call 'erlang':'is_list'
				    (Args)
			    in  let <_cor10> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 103
	      apply 'apply_1'/4
		  (M, F, Args, Options)
	  %% Line 104
	  <Fun,Args,Options>
	      when %% Line 105
		try
		    let <_cor13> =
			call 'erlang':'is_function'
			    (Fun)
		    in  let <_cor14> =
			    call 'erlang':'is_list'
				(Args)
			in  let <_cor15> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor16> =
				    call 'erlang':'and'
					(_cor14, _cor15)
				in  call 'erlang':'and'
					(_cor13, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 106
	      apply 'apply_1'/3
		  (Fun, Args, Options)
	  %% Line 107
	  <A,B,C> when 'true' ->
	      %% Line 108
	      call 'erlang':'error'
		  ('badarg', [A|[B|[C|[]]]])
	end
'apply'/4 =
    %% Line 110
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <M,F,Args,Options>
	      when %% Line 111
		try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor5> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Args)
			    in  let <_cor7> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 112
	      apply 'apply_1'/4
		  (M, F, Args, Options)
	  %% Line 113
	  <A,B,C,D> when 'true' ->
	      %% Line 114
	      call 'erlang':'error'
		  ('badarg', [A|[B|[C|[D|[]]]]])
	end
'apply_1'/4 =
    %% Line 116
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Arity> =
	    %% Line 117
	    call 'erlang':'length'
		(_cor1)
	in  let <_cor5> =
		%% Line 118
		call 'erlang':'make_fun'
		    (_cor3, _cor2, Arity)
	    in  %% Line 118
		apply 'apply_1'/3
		    (_cor5, _cor1, _cor0)
'apply_1'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	%% Line 121
	case %% Line 122
	     apply 'getopts'/2
		 (_cor0, ['start'|['procs'|['continue']]]) of
	  <{[_cor11|[Procs|[Continue|[]]]],Options_1}> when 'true' ->
	      let <_cor5> =
		  %% Line 123
		  case Procs of
		    %% Line 124
		    <[{'procs',P}|[]]>
			when call 'erlang':'is_list'
			      (P) ->
			%% Line 125
			P
		    %% Line 126
		    <_cor12> when 'true' ->
			%% Line 127
			[]
		  end
	      in  %% Line 129
		  case Continue of
		    %% Line 130
		    <[]> when 'true' ->
			%% Line 131
			apply 'apply_start_stop'/4
			    (_cor2, _cor1, _cor5, Options_1)
		    %% Line 132
		    <['continue']> when 'true' ->
			%% Line 133
			apply 'apply_continue'/4
			    (_cor2, _cor1, _cor5, Options_1)
		    %% Line 134
		    <_cor13> when 'true' ->
			%% Line 135
			call 'erlang':'error'
			    ('badarg', [_cor2|[_cor1|[_cor0|[]]]])
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'apply_start_stop'/4 =
    %% Line 140
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Ref> =
	    %% Line 141
	    call 'erlang':'make_ref'
		()
	in  let <Parent> =
		%% Line 142
		call 'erlang':'self'
		    ()
	    in  let <_cor10> =
		    %% Line 145
		    ( fun () ->
			  let <MRef> =
			      %% Line 146
			      call 'erlang':'monitor'
				  ('process', Parent)
			  in  %% Line 147
			      receive
				%% Line 148
				<{_cor23,_cor24,'start_trace'}>
				    when let <_cor25> =
					  call 'erlang':'=:='
					      (_cor23, Parent)
				      in  let <_cor26> =
					      call 'erlang':'=:='
						  (_cor24, Ref)
					  in  call 'erlang':'and'
						  (_cor25, _cor26) ->
				    %% Line 149
				    case apply 'trace'/1
					     (['start'|%% Line 150
						       [{'procs',[Parent|_cor1]}|_cor0]]) of
				      %% Line 152
				      <'ok'> when 'true' ->
					  do  catch
						  let <_cor7> =
						      %% Line 153
						      call 'erlang':'self'
							  ()
						  in  %% Line 153
						      call 'erlang':'!'
							  (Parent, {_cor7,Ref,'trace_started'})
					      %% Line 154
					      receive
						%% Line 155
						<{_cor27,_cor28,'stop_trace'}>
						    when let <_cor29> =
							  call 'erlang':'=:='
							      (_cor27, Parent)
						      in  let <_cor30> =
							      call 'erlang':'=:='
								  (_cor28, Ref)
							  in  call 'erlang':'and'
								  (_cor29, _cor30) ->
						    do  %% Line 156
							apply 'trace'/1
							    (['stop'])
							do  catch
								let <_cor8> =
								    %% Line 158
								    call 'erlang':'self'
									()
								in  %% Line 158
								    call 'erlang':'!'
									(Parent, {_cor8,Ref,'trace_stopped'})
							    %% Line 159
							    'done'
						%% Line 160
						<{'DOWN',_cor31,_cor32,_cor33,_cor34}>
						    when call 'erlang':'=:='
							  (_cor31,
							   MRef) ->
						    %% Line 161
						    apply 'trace'/1
							(['stop'])
					      after 'infinity' ->
						'true'
				      %% Line 163
				      <{'error',Reason}> when 'true' ->
					  %% Line 164
					  call 'erlang':'exit'
					      (Reason)
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor9})
					-| ['compiler_generated'] )
				    end
				%% Line 166
				<{'DOWN',_cor35,_cor36,_cor37,_cor38}>
				    when call 'erlang':'=:='
					  (_cor35,
					   MRef) ->
				    %% Line 167
				    'done'
			      after 'infinity' ->
				'true'
		      -| [{'id',{0,0,'-apply_start_stop/4-fun-0-'}}] )
		in  let <Child> =
			%% Line 144
			call 'erlang':'spawn'
			    (_cor10)
		    in  let <MRef> =
			    %% Line 170
			    call 'erlang':'monitor'
				('process', Child)
			in  do  catch
				    let <_cor13> =
					%% Line 171
					call 'erlang':'self'
					    ()
				    in  %% Line 171
					call 'erlang':'!'
					    (Child, {_cor13,Ref,'start_trace'})
				%% Line 172
				receive
				  %% Line 173
				  <{_cor39,_cor40,'trace_started'}>
				      when let <_cor41> =
					    call 'erlang':'=:='
						(_cor39, Child)
					in  let <_cor42> =
						call 'erlang':'=:='
						    (_cor40, Ref)
					    in  call 'erlang':'and'
						    (_cor41, _cor42) ->
				      %% Line 174
				      letrec
					  'after$^0'/0 =
					      fun () ->
						  do  catch
							  let <_cor14> =
							      %% Line 176
							      call 'erlang':'self'
								  ()
							  in  %% Line 176
							      call 'erlang':'!'
								  (Child, {_cor14,Ref,'stop_trace'})
						      %% Line 177
						      receive
							%% Line 178
							<{_cor43,_cor44,'trace_stopped'}>
							    when let <_cor45> =
								  call 'erlang':'=:='
								      (_cor43, Child)
							      in  let <_cor46> =
								      call 'erlang':'=:='
									  (_cor44, Ref)
								  in  call 'erlang':'and'
									  (_cor45, _cor46) ->
							    %% Line 179
							    receive
							      %% Line 180
							      <{'DOWN',_cor47,_cor48,_cor49,_cor50}>
								  when call 'erlang':'=:='
									(_cor47,
									 MRef) ->
								  %% Line 181
								  'ok'
							    after 'infinity' ->
							      'true'
							%% Line 183
							<{'DOWN',_cor51,_cor52,_cor53,_cor54}>
							    when call 'erlang':'=:='
								  (_cor51,
								   MRef) ->
							    %% Line 184
							    apply 'trace'/1
								(['stop'])
						      after 'infinity' ->
							'true'
				      in  try
					      call 'erlang':'apply'
						  (_cor3, _cor2)
					  of <_cor15> ->
					      do  ( apply 'after$^0'/0
							()
						    -| ['compiler_generated'] )
						  _cor15
					  catch <_cor18,_cor17,_cor16> ->
					      do  ( apply 'after$^0'/0
							()
						    -| ['compiler_generated'] )
						  primop 'raise'
						      (_cor16, _cor17)
				  %% Line 187
				  <{'DOWN',_cor55,_cor56,_cor57,Reason}>
				      when call 'erlang':'=:='
					    (_cor55,
					     MRef) ->
				      %% Line 188
				      call 'erlang':'exit'
					  (Reason)
				after 'infinity' ->
				  'true'
'apply_continue'/4 =
    %% Line 191
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Ref> =
	    %% Line 192
	    call 'erlang':'make_ref'
		()
	in  let <Parent> =
		%% Line 193
		call 'erlang':'self'
		    ()
	    in  let <_cor8> =
		    %% Line 196
		    ( fun () ->
			  let <MRef> =
			      %% Line 197
			      call 'erlang':'monitor'
				  ('process', Parent)
			  in  %% Line 198
			      receive
				%% Line 199
				<{_cor16,_cor17,'start_trace'}>
				    when let <_cor18> =
					  call 'erlang':'=:='
					      (_cor16, Parent)
				      in  let <_cor19> =
					      call 'erlang':'=:='
						  (_cor17, Ref)
					  in  call 'erlang':'and'
						  (_cor18, _cor19) ->
				    %% Line 200
				    case apply 'trace'/1
					     (['start'|%% Line 201
						       [{'procs',[Parent|_cor1]}|_cor0]]) of
				      %% Line 203
				      <'ok'> when 'true' ->
					  %% Line 204
					  call 'erlang':'exit'
					      ({Ref,'trace_started'})
				      %% Line 205
				      <{'error',Reason}> when 'true' ->
					  %% Line 206
					  call 'erlang':'exit'
					      (Reason)
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor7})
					-| ['compiler_generated'] )
				    end
				%% Line 208
				<{'DOWN',_cor20,_cor21,_cor22,_cor23}>
				    when call 'erlang':'=:='
					  (_cor20,
					   MRef) ->
				    %% Line 209
				    'done'
			      after 'infinity' ->
				'true'
		      -| [{'id',{0,0,'-apply_continue/4-fun-0-'}}] )
		in  let <Child> =
			%% Line 195
			call 'erlang':'spawn'
			    (_cor8)
		    in  let <MRef> =
			    %% Line 212
			    call 'erlang':'monitor'
				('process', Child)
			in  do  catch
				    let <_cor11> =
					%% Line 213
					call 'erlang':'self'
					    ()
				    in  %% Line 213
					call 'erlang':'!'
					    (Child, {_cor11,Ref,'start_trace'})
				%% Line 214
				receive
				  %% Line 215
				  <{'DOWN',_cor24,_cor25,_cor26,{_cor27,'trace_started'}}>
				      when let <_cor28> =
					    call 'erlang':'=:='
						(_cor24, MRef)
					in  let <_cor29> =
						call 'erlang':'=:='
						    (_cor27, Ref)
					    in  call 'erlang':'and'
						    (_cor28, _cor29) ->
				      %% Line 216
				      call 'erlang':'apply'
					  (_cor3, _cor2)
				  %% Line 217
				  <{'DOWN',_cor30,_cor31,_cor32,Reason}>
				      when call 'erlang':'=:='
					    (_cor30,
					     MRef) ->
				      %% Line 218
				      call 'erlang':'exit'
					  (Reason)
				after 'infinity' ->
				  'true'
'trace'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'start',Filename> when 'true' ->
	      %% Line 282
	      apply 'trace'/1
		  (['start'|[{'file',Filename}|[]]])
	  %% Line 283
	  <'verbose',Filename> when 'true' ->
	      %% Line 284
	      apply 'trace'/1
		  (['start'|['verbose'|[{'file',Filename}|[]]]])
	  %% Line 285
	  <Option,Value>
	      when call 'erlang':'is_atom'
		    (Option) ->
	      %% Line 286
	      apply 'trace'/1
		  ([{Option,Value}|[]])
	  %% Line 287
	  <Option,Value> when 'true' ->
	      %% Line 288
	      call 'erlang':'error'
		  ('badarg', [Option|[Value|[]]])
	end
'trace'/1 =
    %% Line 290
    fun (_cor0) ->
	case _cor0 of
	  <'stop'> when 'true' ->
	      %% Line 293
	      apply 'call'/1
		  ({'trace_stop'})
	  %% Line 294
	  <'verbose'> when 'true' ->
	      %% Line 295
	      apply 'trace'/1
		  (['start'|['verbose']])
	  %% Line 296
	  <['stop']> when 'true' ->
	      %% Line 299
	      apply 'call'/1
		  ({'trace_stop'})
	  %% Line 300
	  <Option = {Opt,_X_Val}>
	      when call 'erlang':'is_atom'
		    (Opt) ->
	      %% Line 301
	      apply 'trace'/1
		  ([Option|[]])
	  %% Line 302
	  <Option>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 303
	      apply 'trace'/1
		  ([Option|[]])
	  %% Line 304
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 305
	      case apply 'getopts'/2
		       (Options, %% Line 306
				 ['start'|['stop'|['procs'|['verbose'|['file'|['tracer'|['cpu_time']]]]]]]) of
		%% Line 307
		<{[[]|[['stop']|[[]|[[]|[[]|[[]|[[]]]]]]]],[]}> when 'true' ->
		    %% Line 308
		    apply 'call'/1
			({'trace_stop'})
		%% Line 309
		<{[['start']|[[]|[Procs|[Verbose|[File|[Tracer|[CpuTime|[]]]]]]]],[]}> when 'true' ->
		    let <_cor4> =
			%% Line 310
			case <File,Tracer> of
			  %% Line 311
			  <[],[T = {'tracer',Pid}|[]]>
			      when let <_cor1> =
				    %% Line 312
				    call 'erlang':'is_pid'
					(Pid)
				in  let <_cor2> =
					%% Line 312
					call 'erlang':'is_port'
					    (Pid)
				    in  %% Line 312
					call 'erlang':'or'
					    (_cor1, _cor2) ->
			      %% Line 313
			      T
			  %% Line 314
			  <['file'],[]> when 'true' ->
			      %% Line 315
			      {'file',[102|[112|[114|[111|[102|[46|[116|[114|[97|[99|[101]]]]]]]]]]]}
			  %% Line 316
			  <[{'file',[]}],[]> when 'true' ->
			      %% Line 317
			      {'file',[102|[112|[114|[111|[102|[46|[116|[114|[97|[99|[101]]]]]]]]]]]}
			  %% Line 318
			  <[F = {'file',_cor17}|[]],[]> when 'true' ->
			      %% Line 319
			      F
			  %% Line 320
			  <[],[]> when 'true' ->
			      %% Line 321
			      {'file',[102|[112|[114|[111|[102|[46|[116|[114|[97|[99|[101]]]]]]]]]]]}
			  %% Line 322
			  <_fol21,_fol22> when 'true' ->
			      %% Line 323
			      call 'erlang':'error'
				  ('badarg', [Options|[]])
			end
		    in  %% Line 310
			case _cor4 of
			  <{Type,Dest}> when 'true' ->
			      let <_cor7> =
				  %% Line 325
				  case Verbose of
				    %% Line 326
				    <[]> when 'true' ->
					'normal'
				    %% Line 327
				    <['verbose']> when 'true' ->
					'verbose'
				    %% Line 328
				    <[{'verbose','true'}]> when 'true' ->
					'verbose'
				    %% Line 329
				    <[{'verbose','false'}]> when 'true' ->
					'normal'
				    %% Line 330
				    <_cor19> when 'true' ->
					call 'erlang':'error'
					    ('badarg', [Options|[]])
				  end
			      in  let <_cor10> =
				      %% Line 332
				      case CpuTime of
					%% Line 333
					<[]> when 'true' ->
					    'wallclock'
					%% Line 334
					<['cpu_time']> when 'true' ->
					    'cpu_time'
					%% Line 335
					<[{'cpu_time','true'}]> when 'true' ->
					    'cpu_time'
					%% Line 336
					<[{'cpu_time','false'}]> when 'true' ->
					    'wallclock'
					%% Line 337
					<_cor20> when 'true' ->
					    call 'erlang':'error'
						('badarg', [Options|[]])
				      end
				  in  let <_cor14> =
					  %% Line 339
					  case Procs of
					    %% Line 340
					    <[]> when 'true' ->
						let <_cor12> =
						    %% Line 341
						    call 'erlang':'self'
							()
						in  %% Line 341
						    [_cor12|[]]
					    %% Line 342
					    <[{'procs',P}|[]]>
						when call 'erlang':'is_list'
						      (P) ->
						%% Line 343
						P
					    %% Line 344
					    <[{'procs',P}|[]]> when 'true' ->
						%% Line 345
						[P|[]]
					    %% Line 346
					    <_cor21> when 'true' ->
						%% Line 347
						call 'erlang':'error'
						    ('badarg', [Options|[]])
					  end
				      in  %% Line 339
					  apply 'call'/1
					      ({'trace_start',_cor14,%% Line 349
								     {_cor7,_cor10},%% Line 350
										    Type,%% Line 351
											 Dest})
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		%% Line 352
		<_cor22> when 'true' ->
		    %% Line 353
		    call 'erlang':'error'
			('badarg', [Options|[]])
	      end
	  %% Line 355
	  <Options> when 'true' ->
	      %% Line 356
	      call 'erlang':'error'
		  ('badarg', [Options|[]])
	end
'profile'/0 =
    %% Line 360
    fun () ->
	%% Line 361
	apply 'profile'/1
	    ([])
'profile'/2 =
    %% Line 363
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Option,Value>
	      when call 'erlang':'is_atom'
		    (Option) ->
	      %% Line 364
	      apply 'profile'/1
		  ([{Option,Value}|[]])
	  %% Line 365
	  <Option,Value> when 'true' ->
	      %% Line 366
	      call 'erlang':'error'
		  ('badarg', [Option|[Value|[]]])
	end
'profile'/1 =
    %% Line 368
    fun (_cor0) ->
	case _cor0 of
	  <Option>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 369
	      apply 'profile'/1
		  ([Option|[]])
	  %% Line 370
	  <Option = {Opt,_X_Val}>
	      when call 'erlang':'is_atom'
		    (Opt) ->
	      %% Line 371
	      apply 'profile'/1
		  ([Option|[]])
	  %% Line 372
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 373
	      case apply 'getopts'/2
		       (Options, ['start'|['stop'|['file'|['dump'|['append']]]]]) of
		%% Line 374
		<{[Start|[[]|[File|[Dump|[Append|[]]]]]],[]}> when 'true' ->
		    let <Target,Flags> =
			%% Line 376
			case <Dump,Append> of
			  %% Line 377
			  <[],[]> when 'true' ->
			      %% Line 378
			      <[],[]>
			  %% Line 379
			  <['dump'],[]> when 'true' ->
			      let <_cor1> =
				  %% Line 380
				  call 'erlang':'group_leader'
				      ()
			      in  <_cor1,%% Line 380
					 []>
			  %% Line 381
			  <[{'dump',[]}],[]> when 'true' ->
			      %% Line 382
			      <[102|[112|[114|[111|[102|[46|[100|[117|[109|[112]]]]]]]]]],[]>
			  %% Line 383
			  <[{'dump',[]}],['append']> when 'true' ->
			      %% Line 384
			      <[102|[112|[114|[111|[102|[46|[100|[117|[109|[112]]]]]]]]]],['append']>
			  %% Line 385
			  <[{'dump',D}|[]],['append']>
			      when call 'erlang':'is_pid'
				    (D) ->
			      %% Line 386
			      call 'erlang':'error'
				  ('badarg', [Options|[]])
			  %% Line 387
			  <[{'dump',D}|[]],['append']> when 'true' ->
			      %% Line 388
			      <D,['append']>
			  %% Line 389
			  <[{'dump',D}|[]],[]> when 'true' ->
			      %% Line 390
			      <D,[]>
			  %% Line 391
			  <_fol25,_fol26> when 'true' ->
			      %% Line 392
			      call 'erlang':'error'
				  ('badarg', [Options|[]])
			end
		    in  %% Line 394
			case <Start,File> of
			  %% Line 395
			  <['start'],[]> when 'true' ->
			      let <_cor5> =
				  %% Line 396
				  call 'erlang':'group_leader'
				      ()
			      in  %% Line 396
				  apply 'call'/1
				      ({'profile_start',_cor5,%% Line 397
							      Target,%% Line 398
								     Flags})
			  %% Line 399
			  <[],_cor14> when 'true' ->
			      let <_cor7> =
				  %% Line 401
				  case File of
				    %% Line 402
				    <[]> when 'true' ->
					%% Line 403
					[102|[112|[114|[111|[102|[46|[116|[114|[97|[99|[101]]]]]]]]]]]
				    %% Line 404
				    <['file']> when 'true' ->
					%% Line 405
					[102|[112|[114|[111|[102|[46|[116|[114|[97|[99|[101]]]]]]]]]]]
				    %% Line 406
				    <[{'file',[]}]> when 'true' ->
					%% Line 407
					[102|[112|[114|[111|[102|[46|[116|[114|[97|[99|[101]]]]]]]]]]]
				    %% Line 408
				    <[{'file',F}|[]]> when 'true' ->
					%% Line 409
					F
				    %% Line 410
				    <_cor15> when 'true' ->
					%% Line 411
					call 'erlang':'error'
					    ('badarg', [Options|[]])
				  end
			      in  let <_cor9> =
				      %% Line 414
				      call 'erlang':'group_leader'
					  ()
				  in  %% Line 413
				      apply 'call'/1
					  ({'profile',_cor7,_cor9,%% Line 415
								  Target,%% Line 416
									 Flags})
			  %% Line 417
			  <_fol29,_fol30> when 'true' ->
			      %% Line 418
			      call 'erlang':'error'
				  ('badarg', [Options|[]])
			end
		%% Line 420
		<{[[]|[['stop']|[[]|[[]|[[]]]]]],[]}> when 'true' ->
		    %% Line 421
		    apply 'call'/1
			({'profile_stop'})
		%% Line 422
		<_cor17> when 'true' ->
		    %% Line 423
		    call 'erlang':'error'
			('badarg', [Options|[]])
	      end
	  %% Line 425
	  <Options> when 'true' ->
	      %% Line 426
	      call 'erlang':'error'
		  ('badarg', [Options|[]])
	end
'analyse'/0 =
    %% Line 430
    fun () ->
	%% Line 431
	apply 'analyse'/1
	    ([])
'analyse'/2 =
    %% Line 433
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Option,Value>
	      when call 'erlang':'is_atom'
		    (Option) ->
	      %% Line 434
	      apply 'analyse'/1
		  ([{Option,Value}|[]])
	  %% Line 435
	  <Option,Value> when 'true' ->
	      %% Line 436
	      call 'erlang':'error'
		  ('badarg', [Option|[Value|[]]])
	end
'analyse'/1 =
    %% Line 438
    fun (_cor0) ->
	case _cor0 of
	  <Option>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 439
	      apply 'analyse'/1
		  ([Option|[]])
	  %% Line 440
	  <Option = {Opt,_X_Val}>
	      when call 'erlang':'is_atom'
		    (Opt) ->
	      %% Line 441
	      apply 'analyse'/1
		  ([Option|[]])
	  %% Line 442
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 443
	      case apply 'getopts'/2
		       (Options, %% Line 444
				 ['dest'|['append'|['cols'|['callers'|['no_callers'|['sort'|['totals'|['details'|['no_details']]]]]]]]]) of
		%% Line 446
		<{[Dest|[Append|[Cols|[Callers|[NoCallers|%% Line 447
							  [Sort|[Totals|[Details|[NoDetails|[]]]]]]]]]],%% Line 447
													[]}> when 'true' ->
		    let <Target,Flags> =
			%% Line 449
			case <Dest,Append> of
			  %% Line 450
			  <[],[]> when 'true' ->
			      let <_cor1> =
				  %% Line 451
				  call 'erlang':'group_leader'
				      ()
			      in  <_cor1,%% Line 451
					 []>
			  %% Line 452
			  <['dest'],[]> when 'true' ->
			      let <_cor2> =
				  %% Line 453
				  call 'erlang':'group_leader'
				      ()
			      in  <_cor2,%% Line 453
					 []>
			  %% Line 454
			  <[{'dest',[]}],[]> when 'true' ->
			      %% Line 455
			      <[102|[112|[114|[111|[102|[46|[97|[110|[97|[108|[121|[115|[105|[115]]]]]]]]]]]]]],[]>
			  %% Line 456
			  <[{'dest',[]}],['append']> when 'true' ->
			      %% Line 457
			      <[102|[112|[114|[111|[102|[46|[97|[110|[97|[108|[121|[115|[105|[115]]]]]]]]]]]]]],['append']>
			  %% Line 458
			  <[{'dest',F}|[]],['append']>
			      when call 'erlang':'is_pid'
				    (F) ->
			      %% Line 459
			      call 'erlang':'error'
				  ('badarg', [Options|[]])
			  %% Line 460
			  <[{'dest',F}|[]],['append']> when 'true' ->
			      %% Line 461
			      <F,['append']>
			  %% Line 462
			  <[{'dest',F}|[]],[]> when 'true' ->
			      %% Line 463
			      <F,[]>
			  %% Line 464
			  <_fol33,_fol34> when 'true' ->
			      %% Line 465
			      call 'erlang':'error'
				  ('badarg', [Options|[]])
			end
		    in  let <_cor18> =
			    %% Line 467
			    call 'erlang':'group_leader'
				()
			in  let <_cor17> =
				%% Line 470
				case Cols of
				  %% Line 471
				  <[]> when 'true' ->
				      %% Line 472
				      80
				  %% Line 473
				  <[{'cols',C}|[]]>
				      when let <_cor14> =
					    call 'erlang':'is_integer'
						(C)
					in  let <_cor15> =
						call 'erlang':'>'
						    (C, 0)
					    in  call 'erlang':'and'
						    (_cor14, _cor15) ->
				      %% Line 474
				      C
				  %% Line 475
				  <_cor22> when 'true' ->
				      %% Line 476
				      call 'erlang':'error'
					  ('badarg', [Options|[]])
				end
			    in  let <_cor13> =
				    %% Line 478
				    case <Callers,NoCallers> of
				      %% Line 479
				      <[],[]> when 'true' ->
					  %% Line 480
					  'true'
				      %% Line 481
				      <['callers'],[]> when 'true' ->
					  %% Line 482
					  'true'
				      %% Line 483
				      <[{'callers','true'}],[]> when 'true' ->
					  %% Line 484
					  'true'
				      %% Line 485
				      <[{'callers','false'}],[]> when 'true' ->
					  %% Line 486
					  'false'
				      %% Line 487
				      <[],['no_callers']> when 'true' ->
					  %% Line 488
					  'false'
				      %% Line 489
				      <_fol37,_fol38> when 'true' ->
					  %% Line 490
					  call 'erlang':'error'
					      ('badarg', [Options|[]])
				    end
				in  let <_cor11> =
					%% Line 492
					case Sort of
					  %% Line 493
					  <[]> when 'true' ->
					      %% Line 494
					      'acc'
					  %% Line 495
					  <[{'sort','acc'}]> when 'true' ->
					      %% Line 496
					      'acc'
					  %% Line 497
					  <[{'sort','own'}]> when 'true' ->
					      %% Line 498
					      'own'
					  %% Line 499
					  <_cor24> when 'true' ->
					      %% Line 500
					      call 'erlang':'error'
						  ('badarg', [Options|[]])
					end
				    in  let <_cor9> =
					    %% Line 502
					    case Totals of
					      %% Line 503
					      <[]> when 'true' ->
						  %% Line 504
						  'false'
					      %% Line 505
					      <['totals']> when 'true' ->
						  %% Line 506
						  'true'
					      %% Line 507
					      <[{'totals','true'}]> when 'true' ->
						  %% Line 508
						  'true'
					      %% Line 509
					      <[{'totals','false'}]> when 'true' ->
						  %% Line 510
						  'false'
					      %% Line 511
					      <_cor25> when 'true' ->
						  %% Line 512
						  call 'erlang':'error'
						      ('badarg', [Options|[]])
					    end
					in  let <_cor7> =
						%% Line 514
						case <Details,NoDetails> of
						  %% Line 515
						  <[],[]> when 'true' ->
						      %% Line 516
						      'true'
						  %% Line 517
						  <['details'],[]> when 'true' ->
						      %% Line 518
						      'true'
						  %% Line 519
						  <[{'details','true'}],[]> when 'true' ->
						      %% Line 520
						      'true'
						  %% Line 521
						  <[{'details','false'}],[]> when 'true' ->
						      %% Line 522
						      'false'
						  %% Line 523
						  <[],['no_details']> when 'true' ->
						      %% Line 524
						      'false'
						  %% Line 525
						  <_fol41,_fol42> when 'true' ->
						      %% Line 526
						      call 'erlang':'error'
							  ('badarg', [Options|[]])
						end
					    in  %% Line 467
						apply 'call'/1
						    ({'analyse',_cor18,%% Line 468
								       Target,%% Line 469
									      Flags,_cor17,_cor13,_cor11,_cor9,_cor7})
		%% Line 528
		<_cor27> when 'true' ->
		    %% Line 529
		    call 'erlang':'error'
			('badarg', [Options|[]])
	      end
	  %% Line 531
	  <Options> when 'true' ->
	      %% Line 532
	      call 'erlang':'error'
		  ('badarg', [Options|[]])
	end
'get_state'/0 =
    %% Line 542
    fun () ->
	%% Line 543
	apply 'just_call'/1
	    ({'get_state'})
'save_profile'/0 =
    %% Line 547
    fun () ->
	%% Line 548
	apply 'save_profile'/1
	    ([])
'save_profile'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Option,Value>
	      when call 'erlang':'is_atom'
		    (Option) ->
	      %% Line 551
	      apply 'save_profile'/1
		  ([{Option,Value}|[]])
	  %% Line 552
	  <Option,Value> when 'true' ->
	      %% Line 553
	      call 'erlang':'error'
		  ('badarg', [Option|[Value|[]]])
	end
'save_profile'/1 =
    %% Line 555
    fun (_cor0) ->
	case _cor0 of
	  <Option>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 556
	      apply 'save_profile'/1
		  ([Option|[]])
	  %% Line 557
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 558
	      case apply 'getopts'/2
		       (Options, ['file']) of
		%% Line 559
		<{[File|[]],[]}> when 'true' ->
		    let <_cor2> =
			%% Line 560
			case File of
			  %% Line 561
			  <[]> when 'true' ->
			      %% Line 562
			      [102|[112|[114|[111|[102|[46|[112|[114|[111|[102|[105|[108|[101]]]]]]]]]]]]]
			  %% Line 563
			  <[{'file',F}|[]]> when 'true' ->
			      %% Line 564
			      F
			  %% Line 565
			  <_cor5> when 'true' ->
			      %% Line 566
			      call 'erlang':'error'
				  ('badarg', [Options|[]])
			end
		    in  %% Line 560
			apply 'call'/1
			    ({'save_profile',_cor2})
		%% Line 568
		<_cor6> when 'true' ->
		    %% Line 569
		    call 'erlang':'error'
			('badarg', [Options|[]])
	      end
	  %% Line 571
	  <Options> when 'true' ->
	      %% Line 572
	      call 'erlang':'error'
		  ('badarg', [Options|[]])
	end
'load_profile'/0 =
    %% Line 576
    fun () ->
	%% Line 577
	apply 'load_profile'/1
	    ([])
'load_profile'/2 =
    %% Line 579
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Option,Value>
	      when call 'erlang':'is_atom'
		    (Option) ->
	      %% Line 580
	      apply 'load_profile'/1
		  ([{Option,Value}|[]])
	  %% Line 581
	  <Option,Value> when 'true' ->
	      %% Line 582
	      call 'erlang':'error'
		  ('badarg', [Option|[Value|[]]])
	end
'load_profile'/1 =
    %% Line 584
    fun (_cor0) ->
	case _cor0 of
	  <Option>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 585
	      apply 'load_profile'/1
		  ([Option|[]])
	  %% Line 586
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 587
	      case apply 'getopts'/2
		       (Options, ['file']) of
		%% Line 588
		<{[File|[]],[]}> when 'true' ->
		    let <_cor2> =
			%% Line 589
			case File of
			  %% Line 590
			  <[]> when 'true' ->
			      %% Line 591
			      [102|[112|[114|[111|[102|[46|[112|[114|[111|[102|[105|[108|[101]]]]]]]]]]]]]
			  %% Line 592
			  <[{'file',F}|[]]> when 'true' ->
			      %% Line 593
			      F
			  %% Line 594
			  <_cor5> when 'true' ->
			      %% Line 595
			      call 'erlang':'error'
				  ('badarg', [Options|[]])
			end
		    in  %% Line 589
			apply 'call'/1
			    ({'load_profile',_cor2})
		%% Line 597
		<_cor6> when 'true' ->
		    %% Line 598
		    call 'erlang':'error'
			('badarg', [Options|[]])
	      end
	  %% Line 600
	  <Options> when 'true' ->
	      %% Line 601
	      call 'erlang':'error'
		  ('badarg', [Options|[]])
	end
'code_change'/0 =
    %% Line 605
    fun () ->
	%% Line 606
	apply 'just_call'/1
	    ('$code_change')
'start'/0 =
    %% Line 652
    fun () ->
	let <_cor14> =
	    %% Line 654
	    ( fun () ->
		  %% Line 655
		  try
		      let <_cor6> =
			  call 'erlang':'self'
			      ()
		      in  call 'erlang':'register'
			      ('fprof_server', _cor6)
		  of <_cor7> ->
		      case _cor7 of
			%% Line 656
			<'true'> when 'true' ->
			    do  %% Line 657
				call 'erlang':'process_flag'
				    ('trap_exit', 'true')
				let <_cor8> =
				    %% Line 658
				    call 'erlang':'self'
					()
				in  %% Line 658
				    {{'ok',_cor8},'loop'}
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'try_clause',_cor9})
			  -| ['compiler_generated'] )
		      end
		  catch <_cor12,_cor11,_cor10> ->
		      case <_cor12,_cor11,_cor10> of
			%% Line 660
			<'error','badarg',_cor15> when 'true' ->
			    let <_cor13> =
				%% Line 661
				call 'erlang':'whereis'
				    ('fprof_server')
			    in  %% Line 661
				{{'error',{'already_started',_cor13}},%% Line 662
								      'already_started'}
			( <_cor12,_cor11,_cor10> when 'true' ->
			      primop 'raise'
				  (_cor10, _cor11)
			  -| ['compiler_generated'] )
		      end
	      -| [{'id',{0,0,'-start/0-fun-0-'}}] )
	in  let <_cor5> =
		%% Line 665
		( fun (_cor3) ->
		      _cor3
		  -| [{'id',{0,0,'-start/0-fun-1-'}}] )
	    in  let <_cor2> =
		    %% Line 668
		    ( fun (_cor0) ->
			  case _cor0 of
			    <'loop'> when 'true' ->
				do  %% Line 669
				    call 'erlang':'put'
					('trace_state', 'idle')
				    do  %% Line 670
					call 'erlang':'put'
					    ('profile_state', {'idle','undefined'})
					do  %% Line 671
					    call 'erlang':'put'
						('pending_stop', [])
					    %% Line 672
					    apply 'server_loop'/1
						([])
			    %% Line 673
			    <'already_started'> when 'true' ->
				%% Line 674
				'ok'
			    ( <_cor1> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor1})
				    -| [{'function_name',{'-start/0-fun-2-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-start/0-fun-2-'}}] )
		in  %% Line 653
		    apply 'spawn_3step'/3
			(_cor14, _cor5, _cor2)
'stop'/0 =
    %% Line 681
    fun () ->
	%% Line 682
	apply 'stop'/1
	    ('normal')
'stop'/1 =
    %% Line 684
    fun (_cor0) ->
	case _cor0 of
	  <'kill'> when 'true' ->
	      %% Line 685
	      case call 'erlang':'whereis'
		       ('fprof_server') of
		%% Line 686
		<'undefined'> when 'true' ->
		    %% Line 687
		    'ok'
		%% Line 688
		<Pid> when 'true' ->
		    do  %% Line 689
			call 'erlang':'exit'
			    (Pid, 'kill')
			%% Line 690
			'ok'
	      end
	  %% Line 692
	  <Reason> when 'true' ->
	      do  %% Line 693
		  apply 'just_call'/1
		      ({'stop',Reason})
		  %% Line 694
		  'ok'
	end
'call'/1 =
    %% Line 704
    fun (_cor0) ->
	%% Line 705
	case call 'erlang':'whereis'
		 ('fprof_server') of
	  %% Line 706
	  <'undefined'> when 'true' ->
	      do  %% Line 707
		  apply 'start'/0
		      ()
		  %% Line 708
		  apply 'just_call'/1
		      (_cor0)
	  %% Line 709
	  <Server> when 'true' ->
	      %% Line 710
	      apply 'just_call'/2
		  (Server, _cor0)
	end
'just_call'/1 =
    %% Line 716
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 717
	    call 'erlang':'whereis'
		('fprof_server')
	in  %% Line 717
	    apply 'just_call'/2
		(_cor1, _cor0)
'just_call'/2 =
    %% Line 719
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',_cor11> when 'true' ->
	      %% Line 720
	      {'EXIT','fprof_server','noproc'}
	  %% Line 721
	  <Pid,Request> when 'true' ->
	      let <Mref> =
		  %% Line 722
		  call 'erlang':'monitor'
		      ('process', Pid)
	      in  %% Line 723
		  receive
		    %% Line 724
		    <{'DOWN',_cor12,_cor13,_cor14,Reason}>
			when call 'erlang':'=:='
			      (_cor12,
			       Mref) ->
			%% Line 725
			{'EXIT',Pid,Reason}
		  after %% Line 726
			0 ->
		    let <_cor3> =
			%% Line 727
			call 'erlang':'self'
			    ()
		    in  let <Tag> = {%% Line 727
			     Mref,_cor3}
			in  let <T,Demonitor> =
				%% Line 728
				case Request of
				  %% Line 729
				  <{'stop',_cor15}> when 'true' ->
				      %% Line 730
				      <'infinity','false'>
				  %% Line 731
				  <_cor16> when 'true' ->
				      %% Line 732
				      <0,'true'>
				end
			    in  do  catch
					%% Line 735
					call 'erlang':'!'
					    (Pid, {'fprof_server',Tag,Request})
				    %% Line 736
				    receive
				      %% Line 737
				      <{'fprof_server',_cor17,Reply}>
					  when call 'erlang':'=:='
						(_cor17,
						 Mref) ->
					  do  %% Line 738
					      case Demonitor of
						%% Line 739
						<'true'> when 'true' ->
						    call 'erlang':'demonitor'
							(Mref)
						%% Line 740
						<'false'> when 'true' ->
						    'ok'
						( <_cor8> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor8})
						  -| ['compiler_generated'] )
					      end
					      do  %% Line 742
						  receive
						    <{'DOWN',_cor18,_cor19,_cor20,_cor21}>
							when call 'erlang':'=:='
							      (_cor18,
							       Mref) ->
							'ok'
						  after T ->
						    'ok'
						  %% Line 743
						  Reply
				      %% Line 744
				      <{'DOWN',_cor22,_cor23,_cor24,Reason}>
					  when call 'erlang':'=:='
						(_cor22,
						 Mref) ->
					  do  %% Line 745
					      receive
						<{'fprof_server',_cor25,_cor26}>
						    when call 'erlang':'=:='
							  (_cor25,
							   Mref) ->
						    'ok'
					      after T ->
						'ok'
					      %% Line 746
					      {'EXIT',Pid,Reason}
				    after %% Line 747
					  'infinity' ->
				      %% Line 748
				      'timeout'
	end
'reply'/2 =
    %% Line 759
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mref,Pid},Reply>
	      when let <_cor2> =
		    call 'erlang':'is_reference'
			(Mref)
		in  let <_cor3> =
			call 'erlang':'is_pid'
			    (Pid)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  catch
		      %% Line 760
		      call 'erlang':'!'
			  (Pid, {'fprof_server',Mref,Reply})
		  %% Line 761
		  'ok'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'reply',2}}] )
	    -| ['compiler_generated'] )
	end
'server_loop'/1 =
    %% Line 765
    fun (_cor0) ->
	%% Line 766
	receive
	  %% Line 767
	  <{'fprof_server',Tag = {Mref,Pid},'$code_change'}>
	      when let <_cor1> =
		    %% Line 768
		    call 'erlang':'is_reference'
			(Mref)
		in  let <_cor2> =
			%% Line 768
			call 'erlang':'is_pid'
			    (Pid)
		    in  %% Line 768
			call 'erlang':'and'
			    (_cor1, _cor2) ->
	      do  %% Line 769
		  apply 'reply'/2
		      (Tag, 'ok')
		  %% Line 770
		  call 'fprof':'$code_change'
		      (_cor0)
	  %% Line 771
	  <{'fprof_server',Tag = {Mref,Pid},Request}>
	      when let <_cor3> =
		    %% Line 772
		    call 'erlang':'is_reference'
			(Mref)
		in  let <_cor4> =
			%% Line 772
			call 'erlang':'is_pid'
			    (Pid)
		    in  %% Line 772
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 773
		  apply 'handle_req'/3
		      (Request, Tag, _cor0)
	      in  %% Line 773
		  apply 'server_loop'/1
		      (_cor5)
	  %% Line 774
	  <Other> when 'true' ->
	      let <_cor6> =
		  %% Line 775
		  apply 'handle_other'/2
		      (Other, _cor0)
	      in  %% Line 775
		  apply 'server_loop'/1
		      (_cor6)
	after 'infinity' ->
	  'true'
'$code_change'/1 =
    %% Line 779
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 780
	    apply 'module_info'/1
		('compile')
	in  do  %% Line 780
		case call 'lists':'keysearch'
			 ('time', 1, _cor1) of
		  %% Line 781
		  <{'value',{'time',{Y,M,D,HH,MM,SS}}}> when 'true' ->
		      %% Line 782
		      call 'io':'format'
			  ([126|[110|[126|[119|[58|[32|[99|[111|[100|[101|[32|[99|[104|[97|[110|[103|[101|[32|[116|[111|[32|[99|[111|[109|[112|[105|[108|[101|[32|[116|[105|[109|[101|[32|[126|[52|[46|[46|[48|[119|[45|[126|[50|[46|[46|[48|[119|[45|[126|[50|[46|[46|[48|[119|[32|[126|[50|[46|[46|[48|[119|[58|[126|[50|[46|[46|[48|[119|[58|[126|[50|[46|[46|[48|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 784
																																																								  ['fprof'|[Y|[M|[D|[HH|[MM|[SS|[]]]]]]]])
		  %% Line 785
		  <'false'> when 'true' ->
		      'ok'
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
		%% Line 788
		apply 'server_loop'/1
		    (_cor0)
'try_pending_stop'/1 =
    %% Line 795
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 796
	    call 'erlang':'get'
		('trace_state')
	in  let <_cor2> =
		%% Line 796
		call 'erlang':'get'
		    ('profile_state')
	    in  let <_cor1> =
		    %% Line 796
		    call 'erlang':'get'
			('pending_stop')
		in  %% Line 796
		    case <_cor3,_cor2,_cor1> of
		      %% Line 797
		      <'idle',{'idle',_cor11},PendingStop = [_cor12|_cor13]> when 'true' ->
			  let <Reason> =
			      %% Line 798
			      call 'erlang':'get'
				  ('stop_reason')
			  in  let <Reply> =
				  %% Line 799
				  apply 'result'/1
				      (Reason)
			      in  let <_cor8> =
				      %% Line 801
				      ( fun (_cor6) ->
					    %% Line 802
					    apply 'reply'/2
						(_cor6, Reply)
					-| [{'id',{0,0,'-try_pending_stop/1-fun-0-'}}] )
				  in  do  %% Line 800
					  call 'lists':'foreach'
					      (_cor8, %% Line 804
						      PendingStop)
					  %% Line 805
					  call 'erlang':'exit'
					      (Reason)
		      %% Line 806
		      <_fol50,_fol51,_fol52> when 'true' ->
			  _cor0
		    end
'handle_req'/3 =
    %% Line 814
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'trace_start',Procs,%% Line 815
				Mode,%% Line 816
				     'file',%% Line 817
					    Filename},%% Line 817
						      Tag,%% Line 817
							  State> when 'true' ->
	      let <_cor4> =
		  %% Line 818
		  call 'erlang':'get'
		      ('trace_state')
	      in  let <_cor3> =
		      %% Line 818
		      call 'erlang':'get'
			  ('pending_stop')
		  in  %% Line 818
		      case <_cor4,_cor3> of
			%% Line 819
			<'idle',[]> when 'true' ->
			    do  %% Line 820
				apply 'trace_off'/0
				    ()
				let <Port> =
				    %% Line 821
				    apply 'open_dbg_trace_port'/2
					('file', Filename)
				in  %% Line 822
				    case apply 'trace_on'/3
					     (Procs, Port, Mode) of
				      %% Line 823
				      <'ok'> when 'true' ->
					  do  %% Line 824
					      call 'erlang':'put'
						  ('trace_state', 'running')
					      do  %% Line 825
						  call 'erlang':'put'
						      ('trace_type', 'file')
						  do  %% Line 826
						      call 'erlang':'put'
							  ('trace_pid', Port)
						      do  %% Line 827
							  apply 'reply'/2
							      (Tag, 'ok')
							  %% Line 828
							  State
				      %% Line 829
				      <Error> when 'true' ->
					  do  %% Line 830
					      apply 'reply'/2
						  (Tag, Error)
					      %% Line 831
					      State
				    end
			%% Line 833
			<_fol58,_fol59> when 'true' ->
			    do  %% Line 834
				apply 'reply'/2
				    (Tag, {'error','already_tracing'})
				%% Line 835
				State
		      end
	  %% Line 837
	  <{'trace_start',Procs,%% Line 838
				Mode,%% Line 839
				     'tracer',%% Line 840
					      Tracer},%% Line 840
						      Tag,%% Line 840
							  State> when 'true' ->
	      let <_cor9> =
		  %% Line 841
		  call 'erlang':'get'
		      ('trace_state')
	      in  let <_cor8> =
		      %% Line 841
		      call 'erlang':'get'
			  ('pending_stop')
		  in  %% Line 841
		      case <_cor9,_cor8> of
			%% Line 842
			<'idle',[]> when 'true' ->
			    do  %% Line 843
				apply 'trace_off'/0
				    ()
				%% Line 844
				case apply 'trace_on'/3
					 (Procs, Tracer, Mode) of
				  %% Line 845
				  <'ok'> when 'true' ->
				      do  %% Line 846
					  call 'erlang':'put'
					      ('trace_state', 'running')
					  do  %% Line 847
					      call 'erlang':'put'
						  ('trace_type', 'tracer')
					      do  %% Line 848
						  call 'erlang':'put'
						      ('trace_pid', Tracer)
						  do  %% Line 849
						      apply 'reply'/2
							  (Tag, 'ok')
						      %% Line 850
						      State
				  %% Line 851
				  <Error> when 'true' ->
				      do  %% Line 852
					  apply 'reply'/2
					      (Tag, Error)
					  %% Line 853
					  State
				end
			%% Line 855
			<_fol62,_fol63> when 'true' ->
			    do  %% Line 856
				apply 'reply'/2
				    (Tag, {'error','already_tracing'})
				%% Line 857
				State
		      end
	  %% Line 860
	  <{'trace_stop'},Tag,State> when 'true' ->
	      %% Line 861
	      case call 'erlang':'get'
		       ('trace_state') of
		%% Line 862
		<'running'> when 'true' ->
		    let <TracePid> =
			%% Line 863
			call 'erlang':'get'
			    ('trace_pid')
		    in  do  %% Line 864
			    apply 'trace_off'/0
				()
			    %% Line 865
			    case call 'erlang':'erase'
				     ('trace_type') of
			      %% Line 866
			      <'file'> when 'true' ->
				  do  catch
					  %% Line 867
					  call 'erlang':'port_close'
					      (TracePid)
				      do  %% Line 868
					  call 'erlang':'put'
					      ('trace_state', 'stopping')
					  do  %% Line 869
					      call 'erlang':'put'
						  ('trace_tag', Tag)
					      %% Line 870
					      State
			      %% Line 871
			      <'tracer'> when 'true' ->
				  do  %% Line 872
				      call 'erlang':'erase'
					  ('trace_pid')
				      do  %% Line 873
					  call 'erlang':'put'
					      ('trace_state', 'idle')
					  let <_cor15> =
					      %% Line 874
					      call 'erlang':'get'
						  ('profile_state')
					  in  let <_cor14> =
						  %% Line 874
						  call 'erlang':'get'
						      ('profile_type')
					      in  let <_cor13> =
						      %% Line 875
						      call 'erlang':'get'
							  ('profile_pid')
						  in  %% Line 874
						      case <_cor15,_cor14,_cor13> of
							%% Line 876
							<'running','tracer',_cor71>
							    when call 'erlang':'=:='
								  (_cor71,
								   TracePid) ->
							    do  %% Line 877
								call 'erlang':'exit'
								    (TracePid, 'normal')
								do  %% Line 878
								    call 'erlang':'put'
									('profile_tag', Tag)
								    %% Line 879
								    State
							%% Line 880
							<_fol66,_fol67,_fol68> when 'true' ->
							    do  %% Line 881
								apply 'reply'/2
								    (Tag, 'ok')
								%% Line 882
								apply 'try_pending_stop'/1
								    (State)
						      end
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor17})
				-| ['compiler_generated'] )
			    end
		%% Line 885
		<_cor73> when 'true' ->
		    do  %% Line 886
			apply 'reply'/2
			    (Tag, {'error','not_tracing'})
			%% Line 887
			State
	      end
	  %% Line 890
	  <{'profile',Filename,%% Line 891
			       GroupLeader,%% Line 892
					   Dump,%% Line 893
						Flags},%% Line 893
						       Tag,%% Line 893
							   State> when 'true' ->
	      let <_cor20> =
		  %% Line 894
		  call 'erlang':'get'
		      ('profile_state')
	      in  let <_cor19> =
		      %% Line 894
		      call 'erlang':'get'
			  ('pending_stop')
		  in  %% Line 894
		      case <_cor20,_cor19> of
			%% Line 895
			<{'idle',_cor74},[]> when 'true' ->
			    do  %% Line 896
				case apply 'ensure_open'/2
					 (Dump, ['write'|Flags]) of
				  %% Line 897
				  <{'already_open',DumpPid}> when 'true' ->
				      do  %% Line 898
					  call 'erlang':'put'
					      ('profile_dump', DumpPid)
					  %% Line 899
					  call 'erlang':'put'
					      ('profile_close_dump', 'false')
				  %% Line 900
				  <{'ok',DumpPid}> when 'true' ->
				      do  %% Line 901
					  call 'erlang':'put'
					      ('profile_dump', DumpPid)
					  %% Line 902
					  call 'erlang':'put'
					      ('profile_close_dump', 'true')
				  %% Line 903
				  <Error = {'error',_cor75}> when 'true' ->
				      do  %% Line 904
					  apply 'reply'/2
					      (Tag, Error)
					  'ok'
				  ( <_cor21> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor21})
				    -| ['compiler_generated'] )
				end
				let <Table> =
				    %% Line 907
				    call 'ets':'new'
					('fprof', ['set'|['public'|[{'keypos',2}]]])
				in  let <_cor23> =
					%% Line 910
					call 'erlang':'get'
					    ('profile_dump')
				    in  let <Pid> =
					    %% Line 908
					    apply 'spawn_link_dbg_trace_client'/4
						(Filename, Table, %% Line 909
								  GroupLeader, _cor23)
					in  do  %% Line 911
						call 'erlang':'put'
						    ('profile_state', 'running')
						do  %% Line 912
						    call 'erlang':'put'
							('profile_type', 'file')
						    do  %% Line 913
							call 'erlang':'put'
							    ('profile_pid', Pid)
							do  %% Line 914
							    call 'erlang':'put'
								('profile_tag', Tag)
							    do  %% Line 915
								call 'erlang':'put'
								    ('profile_table', Table)
								%% Line 916
								State
			%% Line 917
			<_fol72,_fol73> when 'true' ->
			    do  %% Line 918
				apply 'reply'/2
				    (Tag, {'error','already_profiling'})
				%% Line 919
				State
		      end
	  %% Line 922
	  <{'profile_start',GroupLeader,%% Line 923
					Dump,%% Line 924
					     Flags},%% Line 924
						    Tag,%% Line 924
							State> when 'true' ->
	      let <_cor27> =
		  %% Line 925
		  call 'erlang':'get'
		      ('profile_state')
	      in  let <_cor26> =
		      %% Line 925
		      call 'erlang':'get'
			  ('pending_stop')
		  in  %% Line 925
		      case <_cor27,_cor26> of
			%% Line 926
			<{'idle',_cor77},[]> when 'true' ->
			    do  %% Line 927
				case apply 'ensure_open'/2
					 (Dump, ['write'|Flags]) of
				  %% Line 928
				  <{'already_open',DumpPid}> when 'true' ->
				      do  %% Line 929
					  call 'erlang':'put'
					      ('profile_dump', DumpPid)
					  %% Line 930
					  call 'erlang':'put'
					      ('profile_close_dump', 'false')
				  %% Line 931
				  <{'ok',DumpPid}> when 'true' ->
				      do  %% Line 932
					  call 'erlang':'put'
					      ('profile_dump', DumpPid)
					  %% Line 933
					  call 'erlang':'put'
					      ('profile_close_dump', 'true')
				  %% Line 934
				  <Error = {'error',_cor78}> when 'true' ->
				      do  %% Line 935
					  apply 'reply'/2
					      (Tag, Error)
					  'ok'
				  ( <_cor28> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor28})
				    -| ['compiler_generated'] )
				end
				let <Table> =
				    %% Line 938
				    call 'ets':'new'
					('fprof', ['set'|['public'|[{'keypos',2}]]])
				in  let <_cor30> =
					%% Line 940
					call 'erlang':'get'
					    ('profile_dump')
				    in  let <Pid> =
					    %% Line 939
					    apply 'spawn_link_trace_client'/3
						(Table, GroupLeader, _cor30)
					in  do  %% Line 941
						call 'erlang':'put'
						    ('profile_state', 'running')
						do  %% Line 942
						    call 'erlang':'put'
							('profile_type', 'tracer')
						    do  %% Line 943
							call 'erlang':'put'
							    ('profile_pid', Pid)
							do  %% Line 944
							    call 'erlang':'put'
								('profile_table', Table)
							    do  %% Line 945
								apply 'reply'/2
								    (Tag, {'ok',Pid})
								%% Line 946
								State
			%% Line 947
			<_fol76,_fol77> when 'true' ->
			    do  %% Line 948
				apply 'reply'/2
				    (Tag, {'error','already_profiling'})
				%% Line 949
				State
		      end
	  %% Line 952
	  <{'profile_stop'},Tag,State> when 'true' ->
	      let <_cor34> =
		  %% Line 953
		  call 'erlang':'get'
		      ('profile_state')
	      in  let <_cor33> =
		      %% Line 953
		      call 'erlang':'get'
			  ('profile_type')
		  in  %% Line 953
		      case <_cor34,_cor33> of
			%% Line 954
			<'running','tracer'> when 'true' ->
			    let <ProfilePid> =
				%% Line 955
				call 'erlang':'get'
				    ('profile_pid')
			    in  let <_cor38> =
				    %% Line 956
				    call 'erlang':'get'
					('trace_state')
				in  let <_cor37> =
					%% Line 956
					call 'erlang':'get'
					    ('trace_type')
				    in  let <_cor36> =
					    %% Line 956
					    call 'erlang':'get'
						('trace_pid')
					in  do  %% Line 956
						case <_cor38,_cor37,_cor36> of
						  %% Line 957
						  <'running','tracer',_cor80>
						      when call 'erlang':'=:='
							    (_cor80,
							     ProfilePid) ->
						      do  %% Line 958
							  apply 'trace_off'/0
							      ()
							  do  %% Line 959
							      call 'erlang':'erase'
								  ('trace_type')
							      do  %% Line 960
								  call 'erlang':'erase'
								      ('trace_pid')
								  %% Line 961
								  call 'erlang':'put'
								      ('trace_state', 'idle')
						  %% Line 962
						  <_fol82,_fol83,_fol84> when 'true' ->
						      'ok'
						end
						do  %% Line 965
						    call 'erlang':'exit'
							(ProfilePid, 'normal')
						    do  %% Line 966
							call 'erlang':'put'
							    ('profile_tag', Tag)
							%% Line 967
							State
			%% Line 968
			<'running','file'> when 'true' ->
			    do  %% Line 969
				apply 'reply'/2
				    (Tag, {'error','profiling_file'})
				%% Line 970
				State
			%% Line 971
			<_cor82,_cor83> when 'true' ->
			    do  %% Line 972
				apply 'reply'/2
				    (Tag, {'error','not_profiling'})
				%% Line 973
				State
		      end
	  %% Line 976
	  <Request = {'analyse',_cor84,Dest,%% Line 977
					    Flags,_cor85,_cor86,_cor87,_cor88,_cor89},%% Line 977
										      Tag,%% Line 977
											  State> when 'true' ->
	      %% Line 978
	      case call 'erlang':'get'
		       ('profile_state') of
		%% Line 979
		<{'idle','undefined'}> when 'true' ->
		    do  %% Line 980
			apply 'reply'/2
			    (Tag, {'error','no_profile'})
			%% Line 981
			State
		%% Line 982
		<{'idle',_cor90}> when 'true' ->
		    %% Line 983
		    case apply 'ensure_open'/2
			     (Dest, ['write'|Flags]) of
		      %% Line 984
		      <Error = {'error',_cor91}> when 'true' ->
			  do  %% Line 985
			      apply 'reply'/2
				  (Tag, Error)
			      %% Line 986
			      State
		      %% Line 987
		      <{DestState,DestPid}> when 'true' ->
			  let <ProfileTable> =
			      %% Line 988
			      call 'erlang':'get'
				  ('profile_table')
			  in  let <_cor51> =
				  %% Line 991
				  ( fun () ->
					let <_cor50> =
					    %% Line 993
					    call 'erlang':'setelement'
						(3, Request, DestPid)
					in  %% Line 992
					    apply 'do_analyse'/2
						(ProfileTable, _cor50)
				    -| [{'id',{0,0,'-handle_req/3-fun-0-'}}] )
			      in  let <_cor47> =
				      %% Line 995
				      ( fun (_cor45) ->
					    %% Line 996
					    {_cor45,'finish'}
					-| [{'id',{0,0,'-handle_req/3-fun-1-'}}] )
				  in  let <_cor44> =
					  %% Line 998
					  ( fun (_cor42) ->
						case _cor42 of
						  <'finish'> when 'true' ->
						      %% Line 999
						      'ok'
						  ( <_cor43> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor43})
							  -| [{'function_name',{'-handle_req/3-fun-2-',1}}] )
						    -| ['compiler_generated'] )
						end
					    -| [{'id',{0,0,'-handle_req/3-fun-2-'}}] )
				      in  let <_cor52> =
					      %% Line 990
					      apply 'spawn_3step'/3
						  (_cor51, _cor47, _cor44)
					  in  do  %% Line 989
						  apply 'reply'/2
						      (Tag, _cor52)
						  do  %% Line 1001
						      case DestState of
							%% Line 1002
							<'already_open'> when 'true' ->
							    'ok'
							%% Line 1004
							<'ok'> when 'true' ->
							    %% Line 1005
							    call 'file':'close'
								(DestPid)
							( <_cor53> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor53})
							  -| ['compiler_generated'] )
						      end
						      %% Line 1007
						      State
		      ( <_cor54> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor54})
			-| ['compiler_generated'] )
		    end
		%% Line 1009
		<_cor101> when 'true' ->
		    do  %% Line 1010
			apply 'reply'/2
			    (Tag, {'error','profiling'})
			%% Line 1011
			State
	      end
	  %% Line 1014
	  <{'stop',Reason},Tag,State> when 'true' ->
	      let <PendingStop> =
		  %% Line 1015
		  call 'erlang':'get'
		      ('pending_stop')
	      in  do  %% Line 1016
		      case PendingStop of
			%% Line 1017
			<[]> when 'true' ->
			    %% Line 1018
			    call 'erlang':'put'
				('stop_reason', Reason)
			%% Line 1019
			<_cor102> when 'true' ->
			    'ok'
		      end
		      do  %% Line 1022
			  call 'erlang':'put'
			      ('pending_stop', [Tag|PendingStop])
			  %% Line 1023
			  apply 'try_pending_stop'/1
			      (State)
	  %% Line 1029
	  <{'get_state'},Tag,State> when 'true' ->
	      let <_cor58> =
		  %% Line 1030
		  call 'erlang':'get'
		      ()
	      in  do  %% Line 1030
		      apply 'reply'/2
			  (Tag, {'ok',_cor58})
		      %% Line 1031
		      State
	  %% Line 1033
	  <{'save_profile',File},Tag,State> when 'true' ->
	      %% Line 1034
	      case call 'erlang':'get'
		       ('profile_state') of
		%% Line 1035
		<{'idle','undefined'}> when 'true' ->
		    %% Line 1036
		    apply 'reply'/2
			(Tag, {'error','no_profile'})
		%% Line 1037
		<{'idle',_cor103}> when 'true' ->
		    let <_cor59> =
			%% Line 1038
			call 'erlang':'get'
			    ('profile_table')
		    in  let <_cor60> =
			    %% Line 1038
			    call 'ets':'tab2file'
				(_cor59, File)
			in  do  %% Line 1038
				apply 'reply'/2
				    (Tag, _cor60)
				%% Line 1039
				State
		%% Line 1040
		<_cor104> when 'true' ->
		    do  %% Line 1041
			apply 'reply'/2
			    (Tag, {'error','profiling'})
			%% Line 1042
			State
	      end
	  %% Line 1045
	  <{'load_profile',File},Tag,State> when 'true' ->
	      %% Line 1046
	      case call 'erlang':'get'
		       ('profile_state') of
		%% Line 1047
		<{'idle',Result}> when 'true' ->
		    %% Line 1048
		    case call 'ets':'file2tab'
			     (File) of
		      %% Line 1049
		      <{'ok',Table}> when 'true' ->
			  do  %% Line 1050
			      call 'erlang':'put'
				  ('profile_state', {'idle','ok'})
			      do  %% Line 1051
				  case Result of
				    %% Line 1052
				    <{'error','no_profile'}> when 'true' ->
					let <_cor62> =
					    %% Line 1053
					    call 'erlang':'put'
						('profile_table', Table)
					in  %% Line 1053
					    call 'ets':'delete'
						(_cor62)
				    %% Line 1054
				    <_cor105> when 'true' ->
					%% Line 1055
					call 'erlang':'put'
					    ('profile_table', Table)
				  end
				  do  %% Line 1057
				      apply 'reply'/2
					  (Tag, 'ok')
				      %% Line 1058
				      State
		      %% Line 1059
		      <Error> when 'true' ->
			  do  %% Line 1060
			      apply 'reply'/2
				  (Tag, Error)
			      %% Line 1061
			      State
		    end
		%% Line 1063
		<_cor106> when 'true' ->
		    do  %% Line 1064
			apply 'reply'/2
			    (Tag, {'error','profiling'})
			%% Line 1065
			State
	      end
	  %% Line 1070
	  <Request,Tag,State> when 'true' ->
	      do  %% Line 1071
		  call 'io':'format'
		      ([126|[110|[126|[112|[58|[104|[97|[110|[100|[108|[101|[95|[114|[101|[113|[44|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[113|[117|[101|[115|[116|[32|[45|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1072
																															 ['fprof'|[Request|[]]])
		  do  %% Line 1073
		      apply 'reply'/2
			  (Tag, {'error','unknown_request'})
		      %% Line 1074
		      State
	end
'handle_other'/2 =
    %% Line 1080
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Other = {'EXIT',Pid,Reason},State>
	      when let <_cor2> =
		    call 'erlang':'is_pid'
			(Pid)
		in  let <_cor3> =
			call 'erlang':'is_port'
			    (Pid)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 1081
		  call 'erlang':'get'
		      ('trace_state')
	      in  let <_cor4> =
		      %% Line 1081
		      call 'erlang':'get'
			  ('trace_pid')
		  in  %% Line 1081
		      case <_cor5,_cor4> of
			%% Line 1082
			<'running',_cor18>
			    when call 'erlang':'=:='
				  (_cor18,
				   Pid) ->
			    do  %% Line 1083
				apply 'trace_off'/0
				    ()
				do  %% Line 1084
				    call 'io':'format'
					([126|[110|[126|[112|[58|[104|[97|[110|[100|[108|[101|[95|[111|[116|[104|[101|[114|[44|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[126|[112|[32|[40|[116|[114|[97|[99|[101|[95|[112|[105|[100|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1085
																																						 ['fprof'|[Other|[]]])
				    do  %% Line 1086
					call 'erlang':'put'
					    ('trace_state', 'idle')
					do  %% Line 1087
					    call 'erlang':'erase'
						('trace_type')
					    do  %% Line 1088
						call 'erlang':'erase'
						    ('trace_pid')
						%% Line 1089
						apply 'try_pending_stop'/1
						    (State)
			%% Line 1090
			<'stopping',_cor19>
			    when call 'erlang':'=:='
				  (_cor19,
				   Pid) ->
			    do  %% Line 1091
				call 'erlang':'put'
				    ('trace_state', 'idle')
				do  %% Line 1092
				    call 'erlang':'erase'
					('trace_pid')
				    let <_cor7> =
					%% Line 1093
					call 'erlang':'erase'
					    ('trace_tag')
				    in  let <_cor6> =
					    %% Line 1093
					    apply 'result'/1
						(Reason)
					in  do  %% Line 1093
						apply 'reply'/2
						    (_cor7, _cor6)
						%% Line 1094
						apply 'try_pending_stop'/1
						    (State)
			%% Line 1095
			<_fol106,_fol107> when 'true' ->
			    let <_cor9> =
				%% Line 1096
				call 'erlang':'get'
				    ('profile_state')
			    in  let <_cor8> =
				    %% Line 1096
				    call 'erlang':'get'
					('profile_pid')
				in  %% Line 1096
				    case <_cor9,_cor8> of
				      %% Line 1097
				      <'running',_cor21>
					  when call 'erlang':'=:='
						(_cor21,
						 Pid) ->
					  let <Result> =
					      %% Line 1098
					      apply 'result'/1
						  (Reason)
					  in  do  %% Line 1099
						  call 'erlang':'put'
						      ('profile_state', {'idle',Result})
						  do  %% Line 1100
						      call 'erlang':'erase'
							  ('profile_type')
						      do  %% Line 1101
							  call 'erlang':'erase'
							      ('profile_pid')
							  do  %% Line 1102
							      case call 'erlang':'erase'
								       ('profile_close_dump') of
								%% Line 1103
								<'true'> when 'true' ->
								    let <_cor11> =
									%% Line 1104
									call 'erlang':'erase'
									    ('profile_dump')
								    in  %% Line 1104
									call 'file':'close'
									    (_cor11)
								%% Line 1105
								<'false'> when 'true' ->
								    %% Line 1106
								    call 'erlang':'erase'
									('profile_dump')
								( <_cor12> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor12})
								  -| ['compiler_generated'] )
							      end
							      let <_cor13> =
								  %% Line 1108
								  call 'erlang':'erase'
								      ('profile_tag')
							      in  do  %% Line 1108
								      apply 'reply'/2
									  (_cor13, Result)
								      %% Line 1109
								      apply 'try_pending_stop'/1
									  (State)
				      %% Line 1110
				      <_fol110,_fol111> when 'true' ->
					  do  %% Line 1111
					      call 'io':'format'
						  ([126|[110|[126|[112|[58|[104|[97|[110|[100|[108|[101|[95|[111|[116|[104|[101|[114|[44|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1112
																															 ['fprof'|[Other|[]]])
					      %% Line 1113
					      State
				    end
		      end
	  %% Line 1117
	  <Other,State> when 'true' ->
	      do  %% Line 1118
		  call 'io':'format'
		      ([126|[112|[58|[104|[97|[110|[100|[108|[101|[95|[111|[116|[104|[101|[114|[44|[32|[117|[110|[107|[110|[111|[119|[110|[32|[45|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1119
																							      ['fprof'|[Other|[]]])
		  %% Line 1120
		  State
	end
'result'/1 =
    %% Line 1128
    fun (_cor0) ->
	case _cor0 of
	  <'normal'> when 'true' ->
	      %% Line 1129
	      'ok'
	  %% Line 1130
	  <Reason> when 'true' ->
	      %% Line 1131
	      {'error',Reason}
	end
'ensure_open'/2 =
    %% Line 1133
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,_X_Options>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 1134
	      {'already_open',Pid}
	  %% Line 1135
	  <[],_X_Options> when 'true' ->
	      %% Line 1136
	      {'already_open','undefined'}
	  %% Line 1137
	  <Filename,Options>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Filename)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Filename)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 1138
	      call 'file':'open'
		  (Filename, Options)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'ensure_open',2}}] )
	    -| ['compiler_generated'] )
	end
'getopts'/2 =
    %% Line 1171
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <List,Options>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(List)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Options)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1172
	      apply 'getopts_1'/3
		  (Options, List, [])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'getopts',2}}] )
	    -| ['compiler_generated'] )
	end
'getopts_1'/3 =
    %% Line 1174
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],List,Result> when 'true' ->
	      let <_cor3> =
		  %% Line 1175
		  call 'lists':'reverse'
		      (Result)
	      in  %% Line 1175
		  {_cor3,List}
	  %% Line 1176
	  <[Option|Options],List,Result> when 'true' ->
	      %% Line 1177
	      case apply 'getopts_2'/4
		       (List, Option, [], []) of
		<{Optvals,Remaining}> when 'true' ->
		    %% Line 1178
		    apply 'getopts_1'/3
			(Options, Remaining, [Optvals|Result])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'getopts_1',3}}] )
	    -| ['compiler_generated'] )
	end
'getopts_2'/4 =
    %% Line 1180
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Option,Result,Remaining> when 'true' ->
	      let <_cor5> =
		  %% Line 1181
		  call 'lists':'reverse'
		      (Result)
	      in  let <_cor4> =
		      %% Line 1181
		      call 'lists':'reverse'
			  (Remaining)
		  in  %% Line 1181
		      {_cor5,_cor4}
	  %% Line 1182
	  <[Option|Tail],_cor11,Result,Remaining>
	      when call 'erlang':'=:='
		    (_cor11,
		     Option) ->
	      %% Line 1183
	      apply 'getopts_2'/4
		  (Tail, Option, [Option|Result], Remaining)
	  %% Line 1184
	  <[Optval|Tail],Option,Result,Remaining>
	      when %% Line 1185
		try
		    let <_cor6> =
			call 'erlang':'element'
			    (1, Optval)
		    in  call 'erlang':'=:='
			    (_cor6, Option)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1186
	      apply 'getopts_2'/4
		  (Tail, Option, [Optval|Result], Remaining)
	  %% Line 1187
	  <[Other|Tail],Option,Result,Remaining> when 'true' ->
	      %% Line 1188
	      apply 'getopts_2'/4
		  (Tail, Option, Result, [Other|Remaining])
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'getopts_2',4}}] )
	    -| ['compiler_generated'] )
	end
'setopts'/1 =
    %% Line 1206
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1207
	      call 'lists':'append'
		  (Options)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'setopts',1}}] )
	    -| ['compiler_generated'] )
	end
'spawn_3step'/3 =
    %% Line 1211
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1212
	apply 'spawn_3step'/4
	    ('spawn', _cor2, _cor1, _cor0)
'spawn_link_3step'/3 =
    %% Line 1214
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1215
	apply 'spawn_3step'/4
	    ('spawn_link', _cor2, _cor1, _cor0)
'spawn_3step'/4 =
    %% Line 1217
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Spawn,FunPrelude,FunAck,FunBody>
	      when let <_cor4> =
		    %% Line 1218
		    call 'erlang':'=:='
			(Spawn, 'spawn')
		in  let <_cor5> =
			%% Line 1218
			call 'erlang':'=:='
			    (Spawn, 'spawn_link')
		    in  %% Line 1218
			call 'erlang':'or'
			    (_cor4, _cor5) ->
	      let <Parent> =
		  %% Line 1219
		  call 'erlang':'self'
		      ()
	      in  let <Ref> =
		      %% Line 1220
		      call 'erlang':'make_ref'
			  ()
		  in  let <_cor11> =
			  %% Line 1223
			  ( fun () ->
				let <Ack> =
				    %% Line 1224
				    apply FunPrelude
					()
				in  do  catch
					    let <_cor9> =
						%% Line 1225
						call 'erlang':'self'
						    ()
					    in  %% Line 1225
						call 'erlang':'!'
						    (Parent, {_cor9,Ref,Ack})
					let <MRef> =
					    %% Line 1226
					    call 'erlang':'monitor'
						('process', Parent)
					in  %% Line 1227
					    receive
					      %% Line 1228
					      <{_cor25,_cor26,Go}>
						  when let <_cor27> =
							call 'erlang':'=:='
							    (_cor25, Parent)
						    in  let <_cor28> =
							    call 'erlang':'=:='
								(_cor26, Ref)
							in  call 'erlang':'and'
								(_cor27, _cor28) ->
						  do  %% Line 1229
						      call 'erlang':'demonitor'
							  (MRef, ['flush'])
						      %% Line 1230
						      apply FunBody
							  (Go)
					      %% Line 1231
					      <{'DOWN',_cor29,_cor30,_cor31,_cor32}>
						  when call 'erlang':'=:='
							(_cor29,
							 MRef) ->
						  %% Line 1232
						  'ok'
					    after 'infinity' ->
					      'true'
			    -| [{'id',{0,0,'-spawn_3step/4-fun-0-'}}] )
		      in  let <Child> =
			      %% Line 1222
			      call 'erlang':Spawn
				  (_cor11)
			  in  let <MRef> =
				  %% Line 1235
				  call 'erlang':'monitor'
				      ('process', Child)
			      in  %% Line 1236
				  receive
				    %% Line 1237
				    <{_cor33,_cor34,Ack}>
					when let <_cor35> =
					      call 'erlang':'=:='
						  (_cor33, Child)
					  in  let <_cor36> =
						  call 'erlang':'=:='
						      (_cor34, Ref)
					      in  call 'erlang':'and'
						      (_cor35, _cor36) ->
					do  %% Line 1238
					    call 'erlang':'demonitor'
						(MRef, ['flush'])
					    %% Line 1239
					    try
						apply FunAck
						    (Ack)
					    of <_cor14> ->
						case _cor14 of
						  %% Line 1240
						  <{Result,Go}> when 'true' ->
						      do  catch
							      %% Line 1241
							      call 'erlang':'!'
								  (Child, {Parent,Ref,Go})
							  %% Line 1242
							  Result
						  ( <_cor15> when 'true' ->
							primop 'match_fail'
							    ({'try_clause',_cor15})
						    -| ['compiler_generated'] )
						end
					    catch <_cor18,_cor17,_cor16> ->
						let <Stacktrace> =
						    %% Line 1245
						    call 'erlang':'get_stacktrace'
							()
						in  do  catch
							    %% Line 1246
							    call 'erlang':'exit'
								(Child, 'kill')
							%% Line 1247
							call 'erlang':'raise'
							    (_cor18, _cor17, Stacktrace)
				    %% Line 1249
				    <{'DOWN',_cor38,_cor39,_cor40,Reason}>
					when call 'erlang':'=:='
					      (_cor38,
					       MRef) ->
					do  %% Line 1250
					    receive
					      <{_cor41,_cor42,_X_Ack}>
						  when let <_cor43> =
							call 'erlang':'=:='
							    (_cor41, Child)
						    in  let <_cor44> =
							    call 'erlang':'=:='
								(_cor42, Ref)
							in  call 'erlang':'and'
								(_cor43, _cor44) ->
						  'ok'
					    after 0 ->
					      'ok'
					    do  %% Line 1251
						case Spawn of
						  %% Line 1252
						  <'spawn_link'> when 'true' ->
						      %% Line 1253
						      receive
							<{'EXIT',_cor45}>
							    when call 'erlang':'=:='
								  (_cor45,
								   Reason) ->
							    'ok'
						      after 0 ->
							'ok'
						  %% Line 1254
						  <'spawn'> when 'true' ->
						      'ok'
						  ( <_cor20> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor20})
						    -| ['compiler_generated'] )
						end
						%% Line 1257
						call 'erlang':'exit'
						    (Reason)
				  after 'infinity' ->
				    'true'
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'spawn_3step',4}}] )
	    -| ['compiler_generated'] )
	end
'trace_off'/0 =
    %% Line 1266
    fun () ->
	do  %% Line 1267
	    try
		call 'erlang':'trace_delivered'
		    ('all')
	    of <_cor0> ->
		%% Line 1268
		receive
		  <{'trace_delivered','all',_cor9}>
		      when call 'erlang':'=:='
			    (_cor9,
			     _cor0) ->
		      'ok'
		after 'infinity' ->
		  'true'
	    catch <_cor4,_cor3,_cor2> ->
		case <_cor4,_cor3,_cor2> of
		  %% Line 1270
		  <'error','undef',_cor10> when 'true' ->
		      'ok'
		  ( <_cor4,_cor3,_cor2> when 'true' ->
			primop 'raise'
			    (_cor2, _cor3)
		    -| ['compiler_generated'] )
		end
	    do  %% Line 1272
		try
		    call 'erlang':'trace'
			('all', 'false', ['all'|['cpu_timestamp']])
		of <_cor5> ->
		    _cor5
		catch <_cor8,_cor7,_cor6> ->
		    case <_cor8,_cor7,_cor6> of
		      %% Line 1274
		      <'error','badarg',_cor11> when 'true' ->
			  call 'erlang':'trace'
			      ('all', 'false', ['all'])
		      ( <_cor8,_cor7,_cor6> when 'true' ->
			    primop 'raise'
				(_cor6, _cor7)
			-| ['compiler_generated'] )
		    end
		do  %% Line 1276
		    call 'erlang':'trace_pattern'
			('on_load', 'false', ['local'])
		    do  %% Line 1277
			call 'erlang':'trace_pattern'
			    ({'_','_','_'}, 'false', ['local'])
			%% Line 1278
			'ok'
'trace_on'/3 =
    %% Line 1282
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Procs,Tracer,{V,CT}> when 'true' ->
	      let <_cor9> =
		  %% Line 1283
		  case CT of
		    %% Line 1284
		    <'cpu_time'> when 'true' ->
			%% Line 1285
			try
			    call 'erlang':'trace'
				('all', 'true', ['cpu_timestamp'])
			of <_cor3> ->
			    'ok'
			catch <_cor7,_cor6,_cor5> ->
			    case <_cor7,_cor6,_cor5> of
			      %% Line 1287
			      <'error','badarg',_cor20> when 'true' ->
				  {'error','not_supported'}
			      ( <_cor7,_cor6,_cor5> when 'true' ->
				    primop 'raise'
					(_cor5, _cor6)
				-| ['compiler_generated'] )
			    end
		    %% Line 1289
		    <'wallclock'> when 'true' ->
			'ok'
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1283
		  case _cor9 of
		    %% Line 1291
		    <'ok'> when 'true' ->
			do  %% Line 1293
			    call 'erlang':'trace_pattern'
				('on_load', [{'_',[],[{'message',{{'cp',{'caller'}}}}]}], ['local'])
			    do  %% Line 1294
				call 'erlang':'trace_pattern'
				    ({'_','_','_'}, [{'_',[],[{'message',{{'cp',{'caller'}}}}]}], ['local'])
				let <_cor14> =
				    %% Line 1296
				    ( fun (_cor12) ->
					  let <_cor11> =
					      %% Line 1297
					      apply 'trace_flags'/1
						  (V)
					  in  %% Line 1297
					      call 'erlang':'trace'
						  (_cor12, 'true', [{'tracer',Tracer}|_cor11])
				      -| [{'id',{0,0,'-trace_on/3-fun-0-'}}] )
				in  do  %% Line 1295
					call 'lists':'foreach'
					    (_cor14, %% Line 1299
						     Procs)
					%% Line 1300
					'ok'
		    %% Line 1301
		    <Error> when 'true' ->
			%% Line 1302
			Error
		  end
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'trace_on',3}}] )
	    -| ['compiler_generated'] )
	end
'trace_flags'/1 =
    %% Line 1307
    fun (_cor0) ->
	case _cor0 of
	  <'normal'> when 'true' ->
	      %% Line 1308
	      ['call'|['return_to'|['running'|['procs'|['garbage_collection'|['arity'|['timestamp'|['set_on_spawn']]]]]]]]
	  %% Line 1311
	  <'verbose'> when 'true' ->
	      %% Line 1312
	      ['call'|['return_to'|['send'|['receive'|['running'|['procs'|['garbage_collection'|['timestamp'|['set_on_spawn']]]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'trace_flags',1}}] )
	    -| ['compiler_generated'] )
	end
'open_dbg_trace_port'/2 =
    %% Line 1324
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 1325
	    call 'dbg':'trace_port'
		(_cor1, _cor0)
	in  %% Line 1326
	    apply Fun
		()
'spawn_link_dbg_trace_client'/4 =
    %% Line 1330
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1331
	case call 'dbg':'trace_client'
		 ('file', _cor3, %% Line 1332
				 {( 'handler'/2
				    -| [{'id',{0,0,'-spawn_link_dbg_trace_client/4-fun-0-'}}] ),%% Line 1333
												{'init',_cor1,_cor2,_cor0}}) of
	  %% Line 1334
	  <Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      do  %% Line 1335
		  call 'erlang':'link'
		      (Pid)
		  %% Line 1336
		  Pid
	  %% Line 1337
	  <Other> when 'true' ->
	      %% Line 1338
	      call 'erlang':'exit'
		  (Other)
	end
'spawn_link_trace_client'/3 =
    %% Line 1344
    fun (_cor2,_cor1,_cor0) ->
	let <Parent> =
	    %% Line 1345
	    call 'erlang':'self'
		()
	in  let <_cor12> =
		%% Line 1347
		( fun () ->
		      do  %% Line 1348
			  call 'erlang':'process_flag'
			      ('trap_exit', 'true')
			  let <_cor11> =
			      %% Line 1349
			      call 'erlang':'self'
				  ()
			  in  %% Line 1349
			      {_cor11,'go'}
		  -| [{'id',{0,0,'-spawn_link_trace_client/3-fun-0-'}}] )
	    in  let <_cor10> =
		    %% Line 1351
		    ( fun (_cor8) ->
			  _cor8
		      -| [{'id',{0,0,'-spawn_link_trace_client/3-fun-1-'}}] )
		in  let <_cor7> =
			%% Line 1354
			( fun (_cor5) ->
			      case _cor5 of
				<'go'> when 'true' ->
				    let <Init> =
					%% Line 1355
					{'init',_cor1,_cor2,_cor0}
				    in  %% Line 1356
					apply 'tracer_loop'/3
					    (Parent, ( 'handler'/2
						       -| [{'id',{0,0,'-spawn_link_trace_client/3-fun-2-'}}] ), Init)
				( <_cor6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'-spawn_link_trace_client/3-fun-3-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-spawn_link_trace_client/3-fun-3-'}}] )
		    in  %% Line 1346
			apply 'spawn_link_3step'/3
			    (_cor12, _cor10, _cor7)
'tracer_loop'/3 =
    %% Line 1359
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1360
	receive
	  %% Line 1361
	  <Trace>
	      when try
		    let <_cor3> =
			call 'erlang':'element'
			    (1, Trace)
		    in  call 'erlang':'=:='
			    (_cor3, 'trace')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  %% Line 1362
		  apply _cor1
		      (Trace, _cor0)
	      in  %% Line 1362
		  apply 'tracer_loop'/3
		      (_cor2, _cor1, _cor4)
	  %% Line 1363
	  <Trace>
	      when try
		    let <_cor5> =
			call 'erlang':'element'
			    (1, Trace)
		    in  call 'erlang':'=:='
			    (_cor5, 'trace_ts')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 1364
		  apply _cor1
		      (Trace, _cor0)
	      in  %% Line 1364
		  apply 'tracer_loop'/3
		      (_cor2, _cor1, _cor6)
	  %% Line 1365
	  <{'EXIT',_cor10,Reason}>
	      when call 'erlang':'=:='
		    (_cor10,
		     _cor2) ->
	      do  %% Line 1366
		  apply 'handler'/2
		      ('end_of_trace', _cor0)
		  %% Line 1367
		  call 'erlang':'exit'
		      (Reason)
	  %% Line 1368
	  <_cor11> when 'true' ->
	      %% Line 1369
	      apply 'tracer_loop'/3
		  (_cor2, _cor1, _cor0)
	after 'infinity' ->
	  'true'
'handler'/2 =
    %% Line 1378
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'end_of_trace',{'init',GroupLeader,Table,Dump}> when 'true' ->
	      do  %% Line 1379
		  apply 'dump'/2
		      (Dump, 'start_of_trace')
		  do  %% Line 1380
		      apply 'dump'/2
			  (Dump, 'end_of_trace')
		      do  %% Line 1381
			  apply 'info'/4
			      (GroupLeader, Dump, [69|[109|[112|[116|[121|[32|[116|[114|[97|[99|[101|[33|[126|[110]]]]]]]]]]]]]], [])
			  do  %% Line 1382
			      apply 'end_of_trace'/2
				  (Table, 'undefined')
			      %% Line 1383
			      'done'
	  %% Line 1384
	  <'end_of_trace',{'error',Reason,_cor16,GroupLeader,Dump}> when 'true' ->
	      do  %% Line 1385
		  apply 'info'/4
		      (GroupLeader, Dump, [126|[110|[69|[110|[100|[32|[111|[102|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[32|[116|[114|[97|[99|[101|[33|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		  %% Line 1386
		  call 'erlang':'exit'
		      (Reason)
	  %% Line 1387
	  <'end_of_trace',{_cor17,TS,GroupLeader,Table,Dump}> when 'true' ->
	      do  %% Line 1388
		  apply 'dump'/2
		      (Dump, 'end_of_trace')
		  do  %% Line 1389
		      apply 'info'/4
			  (GroupLeader, Dump, [126|[110|[69|[110|[100|[32|[111|[102|[32|[116|[114|[97|[99|[101|[33|[126|[110]]]]]]]]]]]]]]]]], [])
		      do  %% Line 1390
			  apply 'end_of_trace'/2
			      (Table, TS)
			  %% Line 1391
			  'done'
	  %% Line 1392
	  <Trace,{'init',GroupLeader,Table,Dump}> when 'true' ->
	      do  %% Line 1393
		  apply 'dump'/2
		      (Dump, 'start_of_trace')
		  do  %% Line 1394
		      apply 'info'/4
			  (GroupLeader, Dump, [82|[101|[97|[100|[105|[110|[103|[32|[116|[114|[97|[99|[101|[32|[100|[97|[116|[97|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [])
		      %% Line 1395
		      try
			  apply 'trace_handler'/4
			      (Trace, Table, GroupLeader, Dump)
		      of <_cor2> ->
			  do  %% Line 1397
			      call 'ets':'insert'
				  (Table, {'misc','first_ts',_cor2})
			      do  %% Line 1398
				  call 'ets':'insert'
				      (Table, {'misc','last_ts_n',{_cor2,1}})
				  %% Line 1399
				  {1,_cor2,GroupLeader,Table,Dump}
		      catch <_cor6,_cor5,_cor4> ->
			  case <_cor6,_cor5,_cor4> of
			    %% Line 1401
			    <'throw',Error,_cor18> when 'true' ->
				do  %% Line 1402
				    apply 'dump'/2
					(Dump, {'error',Error})
				    do  %% Line 1403
					apply 'end_of_trace'/2
					    (Table, 'undefined')
					%% Line 1404
					{'error',Error,1,GroupLeader,Dump}
			    ( <_cor6,_cor5,_cor4> when 'true' ->
				  primop 'raise'
				      (_cor4, _cor5)
			      -| ['compiler_generated'] )
			  end
	  %% Line 1416
	  <_cor19,{'error',Reason,M,GroupLeader,Dump}> when 'true' ->
	      let <N> =
		  %% Line 1417
		  call 'erlang':'+'
		      (M, 1)
	      in  do  %% Line 1418
		      apply 'info_dots'/3
			  (GroupLeader, Dump, N)
		      %% Line 1419
		      {'error',Reason,N,GroupLeader,Dump}
	  %% Line 1420
	  <Trace,{M,TS0,GroupLeader,Table,Dump}> when 'true' ->
	      let <N> =
		  %% Line 1421
		  call 'erlang':'+'
		      (M, 1)
	      in  do  %% Line 1422
		      apply 'info_dots'/3
			  (GroupLeader, Dump, N)
		      %% Line 1423
		      try
			  apply 'trace_handler'/4
			      (Trace, Table, GroupLeader, Dump)
		      of <_cor9> ->
			  do  %% Line 1425
			      call 'ets':'insert'
				  (Table, {'misc','last_ts_n',{_cor9,N}})
			      %% Line 1426
			      {N,_cor9,GroupLeader,Table,Dump}
		      catch <_cor13,_cor12,_cor11> ->
			  case <_cor13,_cor12,_cor11> of
			    %% Line 1428
			    <'throw',Error,_cor20> when 'true' ->
				do  %% Line 1429
				    apply 'dump'/2
					(Dump, {'error',Error})
				    do  %% Line 1430
					apply 'end_of_trace'/2
					    (Table, TS0)
					%% Line 1431
					{'error',Error,N,GroupLeader,Dump}
			    ( <_cor13,_cor12,_cor11> when 'true' ->
				  primop 'raise'
				      (_cor11, _cor12)
			      -| ['compiler_generated'] )
			  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'handler',2}}] )
	    -| ['compiler_generated'] )
	end
'end_of_trace'/2 =
    %% Line 1445
    fun (_cor1,_cor0) ->
	let <Procs> =
	    %% Line 1449
	    call 'erlang':'get'
		()
	in  do  %% Line 1450
		call 'erlang':'put'
		    ('table', _cor1)
		do  %% Line 1451
		    apply 'dbg'/3
			(2, [103|[101|[116|[40|[41|[32|[45|[62|[32|[126|[112|[126|[110]]]]]]]]]]]]], [Procs|[]])
		    let <_cor5> =
			%% Line 1453
			( fun (_cor3) ->
			      case _cor3 of
				<{Pid,_cor8}>
				    when call 'erlang':'is_pid'
					  (Pid) ->
				    %% Line 1454
				    apply 'trace_exit'/3
					(_cor1, Pid, _cor0)
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'-end_of_trace/2-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-end_of_trace/2-fun-0-'}}] )
		    in  do  %% Line 1452
			    call 'lists':'map'
				(_cor5, %% Line 1456
					Procs)
			    do  %% Line 1457
				call 'erlang':'erase'
				    ()
				%% Line 1458
				'ok'
'info_dots'/3 =
    %% Line 1462
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <GroupLeader,_cor9,_cor10>
	      when call 'erlang':'=:='
		    (_cor9,
		     GroupLeader) ->
	      %% Line 1463
	      'ok'
	  %% Line 1464
	  <GroupLeader,_cor11,N> when 'true' ->
	      %% Line 1465
	      case <> of
		<>
		    when try
			  let <_cor3> =
			      call 'erlang':'rem'
				  (N, 100000)
			  in  call 'erlang':'=:='
				  (_cor3, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1466
		    call 'io':'format'
			(GroupLeader, [44|[126|[110]]], [])
		%% Line 1467
		<>
		    when try
			  let <_cor4> =
			      call 'erlang':'rem'
				  (N, 50000)
			  in  call 'erlang':'=:='
				  (_cor4, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1468
		    call 'io':'format'
			(GroupLeader, [46|[126|[110]]], [])
		%% Line 1469
		<>
		    when try
			  let <_cor5> =
			      call 'erlang':'rem'
				  (N, 1000)
			  in  call 'erlang':'=:='
				  (_cor5, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1470
		    call 'io':'put_chars'
			(GroupLeader, [46])
		%% Line 1471
		<> when 'true' ->
		    %% Line 1472
		    'ok'
	      end
	end
'info_suspect_call'/4 =
    %% Line 1475
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <GroupLeader,_cor9,_cor10,_cor11>
	      when call 'erlang':'=:='
		    (_cor9,
		     GroupLeader) ->
	      %% Line 1476
	      'ok'
	  %% Line 1477
	  <GroupLeader,_cor12,Func,Pid> when 'true' ->
	      let <_cor4> =
		  %% Line 1480
		  apply 'parsify'/1
		      ([Func|[Pid|[]]])
	      in  %% Line 1478
		  call 'io':'format'
		      (GroupLeader, %% Line 1479
				    [126|[110|[87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[112|[32|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[126|[112|[32|[45|[32|[116|[114|[97|[99|[101|[32|[109|[97|[121|[32|[98|[101|[99|[111|[109|[101|[32|[99|[111|[114|[114|[117|[112|[116|[33|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor4)
	end
'info'/4 =
    %% Line 1482
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <GroupLeader,_cor8,_cor9,_cor10>
	      when call 'erlang':'=:='
		    (_cor8,
		     GroupLeader) ->
	      %% Line 1483
	      'ok'
	  %% Line 1484
	  <GroupLeader,_cor11,Format,List> when 'true' ->
	      %% Line 1485
	      call 'io':'format'
		  (GroupLeader, Format, List)
	end
'dump_stack'/3 =
    %% Line 1487
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'undefined',_cor14,_cor15> when 'true' ->
	      %% Line 1488
	      'false'
	  %% Line 1489
	  <Dump,Stack,Term> when 'true' ->
	      let <Depth,_X_D> =
		  %% Line 1491
		  case Stack of
		    %% Line 1492
		    <'undefined'> when 'true' ->
			%% Line 1493
			<0,0>
		    %% Line 1494
		    <_cor16> when 'true' ->
			%% Line 1495
			case call 'erlang':'length'
				 (Stack) of
			  %% Line 1496
			  <0> when 'true' ->
			      %% Line 1497
			      <0,0>
			  %% Line 1498
			  <N> when 'true' ->
			      let <_cor3> =
				  %% Line 1499
				  call 'erlang':'hd'
				      (Stack)
			      in  let <_cor4> =
				      %% Line 1499
				      call 'erlang':'length'
					  (_cor3)
				  in  %% Line 1499
				      <N,_cor4>
			end
		  end
	      in  let <_cor9> =
		      %% Line 1502
		      call 'lists':'duplicate'
			  (Depth, [32|[32]])
		  in  let <_cor10> =
			  %% Line 1502
			  apply 'parsify'/1
			      (Term)
		      in  do  %% Line 1502
			      call 'io':'format'
				  (Dump, [126|[115|[126|[112|[46|[126|[110]]]]]]], [_cor9|[_cor10|[]]])
			      %% Line 1503
			      'true'
	end
'dump'/2 =
    %% Line 1505
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',_cor5> when 'true' ->
	      %% Line 1506
	      'false'
	  %% Line 1507
	  <Dump,Term> when 'true' ->
	      let <_cor2> =
		  %% Line 1508
		  apply 'parsify'/1
		      (Term)
	      in  do  %% Line 1508
		      call 'io':'format'
			  (Dump, [126|[112|[46|[126|[110]]]]], [_cor2|[]])
		      %% Line 1509
		      'true'
	end
'trace_handler'/4 =
    %% Line 1519
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Trace = {'trace_ts',Pid,'call',_X_MFA,_X_TS},%% Line 1520
							_X_Table,_cor37,%% Line 1520
									Dump> when 'true' ->
	      let <Stack> =
		  %% Line 1521
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1522
		      apply 'dump_stack'/3
			  (Dump, Stack, Trace)
		      %% Line 1523
		      call 'erlang':'throw'
			  ({'incorrect_trace_data','fprof',1523,%% Line 1524
								[Trace|[Stack|[]]]})
	  %% Line 1525
	  <Trace = {'trace_ts',Pid,'call',Func = {_X_M,_X_F,Arity},%% Line 1526
								   {'cp',CP},%% Line 1526
									     TS},%% Line 1527
										 Table,%% Line 1527
										       GroupLeader,%% Line 1527
												   Dump>
	      when %% Line 1528
		call 'erlang':'is_integer'
		    (Arity) ->
	      let <_cor5> =
		  %% Line 1529
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1529
		      apply 'dump_stack'/3
			  (Dump, _cor5, Trace)
		      do  %% Line 1530
			  case <_X_M,_X_F,Arity> of
			    %% Line 1531
			    <'erlang','trace',3> when 'true' ->
				%% Line 1532
				apply 'info_suspect_call'/4
				    (GroupLeader, Dump, Func, Pid)
			    %% Line 1533
			    <'erlang','trace_pattern',3> when 'true' ->
				%% Line 1534
				apply 'info_suspect_call'/4
				    (GroupLeader, Dump, Func, Pid)
			    %% Line 1535
			    <_fol143,_fol144,_fol145> when 'true' ->
				'ok'
			  end
			  do  %% Line 1538
			      apply 'trace_call'/5
				  (Table, Pid, Func, TS, CP)
			      %% Line 1539
			      TS
	  %% Line 1540
	  <Trace = {'trace_ts',Pid,'call',MFArgs = {_X_M,_X_F,Args},%% Line 1541
								    {'cp',CP},%% Line 1541
									      TS},%% Line 1542
										  Table,_cor39,%% Line 1542
											       Dump>
	      when %% Line 1543
		call 'erlang':'is_list'
		    (Args) ->
	      let <_cor7> =
		  %% Line 1544
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1544
		      apply 'dump_stack'/3
			  (Dump, _cor7, Trace)
		      let <Func> =
			  %% Line 1545
			  apply 'mfarity'/1
			      (MFArgs)
		      in  do  %% Line 1546
			      apply 'trace_call'/5
				  (Table, Pid, Func, TS, CP)
			      %% Line 1547
			      TS
	  %% Line 1550
	  <Trace = {'trace_ts',Pid,'return_to','undefined',TS},%% Line 1551
							       Table,_cor40,%% Line 1551
									    Dump> when 'true' ->
	      let <_cor9> =
		  %% Line 1552
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1552
		      apply 'dump_stack'/3
			  (Dump, _cor9, Trace)
		      do  %% Line 1553
			  apply 'trace_return_to'/4
			      (Table, Pid, 'undefined', TS)
			  %% Line 1554
			  TS
	  %% Line 1555
	  <Trace = {'trace_ts',Pid,'return_to',Func = {_X_M,_X_F,Arity},TS},%% Line 1556
									    Table,_cor41,%% Line 1556
											 Dump>
	      when %% Line 1557
		call 'erlang':'is_integer'
		    (Arity) ->
	      let <_cor10> =
		  %% Line 1558
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1558
		      apply 'dump_stack'/3
			  (Dump, _cor10, Trace)
		      do  %% Line 1559
			  apply 'trace_return_to'/4
			      (Table, Pid, Func, TS)
			  %% Line 1560
			  TS
	  %% Line 1561
	  <Trace = {'trace_ts',Pid,'return_to',MFArgs = {_X_M,_X_F,Args},TS},%% Line 1562
									     Table,_cor42,%% Line 1562
											  Dump>
	      when %% Line 1563
		call 'erlang':'is_list'
		    (Args) ->
	      let <_cor11> =
		  %% Line 1564
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1564
		      apply 'dump_stack'/3
			  (Dump, _cor11, Trace)
		      let <Func> =
			  %% Line 1565
			  apply 'mfarity'/1
			      (MFArgs)
		      in  do  %% Line 1566
			      apply 'trace_return_to'/4
				  (Table, Pid, Func, TS)
			      %% Line 1567
			      TS
	  %% Line 1570
	  <Trace = {'trace_ts',Pid,'spawn',Child,MFArgs,TS},%% Line 1571
							    Table,_cor43,%% Line 1571
									 Dump> when 'true' ->
	      let <_cor13> =
		  %% Line 1572
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1572
		      apply 'dump_stack'/3
			  (Dump, _cor13, Trace)
		      do  %% Line 1573
			  apply 'trace_spawn'/5
			      (Table, Child, MFArgs, TS, Pid)
			  %% Line 1574
			  TS
	  %% Line 1577
	  <Trace = {'trace_ts',Pid,'exit',_X_Reason,TS},%% Line 1578
							Table,_cor44,%% Line 1578
								     Dump> when 'true' ->
	      let <_cor14> =
		  %% Line 1579
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1579
		      apply 'dump_stack'/3
			  (Dump, _cor14, Trace)
		      do  %% Line 1580
			  apply 'trace_exit'/3
			      (Table, Pid, TS)
			  %% Line 1581
			  TS
	  %% Line 1584
	  <Trace = {'trace_ts',Pid,'out',0,TS},%% Line 1585
					       Table,_cor45,%% Line 1585
							    Dump> when 'true' ->
	      let <_cor15> =
		  %% Line 1586
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1586
		      apply 'dump_stack'/3
			  (Dump, _cor15, Trace)
		      do  %% Line 1587
			  apply 'trace_out'/4
			      (Table, Pid, 'undefined', TS)
			  %% Line 1588
			  TS
	  %% Line 1589
	  <Trace = {'trace_ts',Pid,'out',Func = {_X_M,_X_F,Arity},TS},%% Line 1590
								      Table,_cor46,%% Line 1590
										   Dump>
	      when %% Line 1591
		call 'erlang':'is_integer'
		    (Arity) ->
	      let <_cor16> =
		  %% Line 1592
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1592
		      apply 'dump_stack'/3
			  (Dump, _cor16, Trace)
		      do  %% Line 1593
			  apply 'trace_out'/4
			      (Table, Pid, Func, TS)
			  %% Line 1594
			  TS
	  %% Line 1595
	  <Trace = {'trace_ts',Pid,'out',MFArgs = {_X_M,_X_F,Args},TS},%% Line 1596
								       Table,_cor47,%% Line 1596
										    Dump>
	      when %% Line 1597
		call 'erlang':'is_list'
		    (Args) ->
	      let <_cor17> =
		  %% Line 1598
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1598
		      apply 'dump_stack'/3
			  (Dump, _cor17, Trace)
		      let <Func> =
			  %% Line 1599
			  apply 'mfarity'/1
			      (MFArgs)
		      in  do  %% Line 1600
			      apply 'trace_out'/4
				  (Table, Pid, Func, TS)
			      %% Line 1601
			      TS
	  %% Line 1604
	  <Trace = {'trace_ts',Pid,'in',0,TS},%% Line 1605
					      Table,_cor48,%% Line 1605
							   Dump> when 'true' ->
	      let <_cor19> =
		  %% Line 1606
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1606
		      apply 'dump_stack'/3
			  (Dump, _cor19, Trace)
		      do  %% Line 1607
			  apply 'trace_in'/4
			      (Table, Pid, 'undefined', TS)
			  %% Line 1608
			  TS
	  %% Line 1609
	  <Trace = {'trace_ts',Pid,'in',Func = {_X_M,_X_F,Arity},TS},%% Line 1610
								     Table,_cor49,%% Line 1610
										  Dump>
	      when %% Line 1611
		call 'erlang':'is_integer'
		    (Arity) ->
	      let <_cor20> =
		  %% Line 1612
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1612
		      apply 'dump_stack'/3
			  (Dump, _cor20, Trace)
		      do  %% Line 1613
			  apply 'trace_in'/4
			      (Table, Pid, Func, TS)
			  %% Line 1614
			  TS
	  %% Line 1615
	  <Trace = {'trace_ts',Pid,'in',MFArgs = {_X_M,_X_F,Args},TS},%% Line 1616
								      Table,_cor50,%% Line 1616
										   Dump>
	      when %% Line 1617
		call 'erlang':'is_list'
		    (Args) ->
	      let <_cor21> =
		  %% Line 1618
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1618
		      apply 'dump_stack'/3
			  (Dump, _cor21, Trace)
		      let <Func> =
			  %% Line 1619
			  apply 'mfarity'/1
			      (MFArgs)
		      in  do  %% Line 1620
			      apply 'trace_in'/4
				  (Table, Pid, Func, TS)
			      %% Line 1621
			      TS
	  %% Line 1624
	  <Trace = {'trace_ts',Pid,'gc_start',_X_Func,TS},%% Line 1625
							  Table,_cor51,%% Line 1625
								       Dump> when 'true' ->
	      let <_cor23> =
		  %% Line 1626
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1626
		      apply 'dump_stack'/3
			  (Dump, _cor23, Trace)
		      do  %% Line 1627
			  apply 'trace_gc_start'/3
			      (Table, Pid, TS)
			  %% Line 1628
			  TS
	  %% Line 1631
	  <Trace = {'trace_ts',Pid,'gc_end',_X_Func,TS},%% Line 1632
							Table,_cor52,%% Line 1632
								     Dump> when 'true' ->
	      let <_cor24> =
		  %% Line 1633
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1633
		      apply 'dump_stack'/3
			  (Dump, _cor24, Trace)
		      do  %% Line 1634
			  apply 'trace_gc_end'/3
			      (Table, Pid, TS)
			  %% Line 1635
			  TS
	  %% Line 1638
	  <Trace = {'trace_ts',Pid,'link',_X_OtherPid,TS},%% Line 1639
							  _X_Table,_cor53,%% Line 1639
									  Dump> when 'true' ->
	      let <_cor25> =
		  %% Line 1640
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1640
		      apply 'dump_stack'/3
			  (Dump, _cor25, Trace)
		      %% Line 1641
		      TS
	  %% Line 1644
	  <Trace = {'trace_ts',Pid,'unlink',_X_OtherPid,TS},%% Line 1645
							    _X_Table,_cor54,%% Line 1645
									    Dump> when 'true' ->
	      let <_cor26> =
		  %% Line 1646
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1646
		      apply 'dump_stack'/3
			  (Dump, _cor26, Trace)
		      %% Line 1647
		      TS
	  %% Line 1650
	  <Trace = {'trace_ts',Pid,'getting_linked',_X_OtherPid,TS},%% Line 1651
								    _X_Table,_cor55,%% Line 1651
										    Dump> when 'true' ->
	      let <_cor27> =
		  %% Line 1652
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1652
		      apply 'dump_stack'/3
			  (Dump, _cor27, Trace)
		      %% Line 1653
		      TS
	  %% Line 1656
	  <Trace = {'trace_ts',Pid,'getting_unlinked',_X_OtherPid,TS},%% Line 1657
								      _X_Table,_cor56,%% Line 1657
										      Dump> when 'true' ->
	      let <_cor28> =
		  %% Line 1658
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1658
		      apply 'dump_stack'/3
			  (Dump, _cor28, Trace)
		      %% Line 1659
		      TS
	  %% Line 1662
	  <Trace = {'trace_ts',Pid,'register',_X_Name,TS},%% Line 1663
							  _X_Table,_cor57,%% Line 1663
									  Dump> when 'true' ->
	      let <_cor29> =
		  %% Line 1664
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1664
		      apply 'dump_stack'/3
			  (Dump, _cor29, Trace)
		      %% Line 1665
		      TS
	  %% Line 1668
	  <Trace = {'trace_ts',Pid,'unregister',_X_Name,TS},%% Line 1669
							    _X_Table,_cor58,%% Line 1669
									    Dump> when 'true' ->
	      let <_cor30> =
		  %% Line 1670
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1670
		      apply 'dump_stack'/3
			  (Dump, _cor30, Trace)
		      %% Line 1671
		      TS
	  %% Line 1674
	  <Trace = {'trace_ts',Pid,'send',_X_OtherPid,_X_Msg,TS},%% Line 1675
								 _X_Table,_cor59,%% Line 1675
										 Dump> when 'true' ->
	      let <_cor31> =
		  %% Line 1676
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1676
		      apply 'dump_stack'/3
			  (Dump, _cor31, Trace)
		      %% Line 1677
		      TS
	  %% Line 1680
	  <Trace = {'trace_ts',Pid,'receive',_X_Msg,TS},%% Line 1681
							_X_Table,_cor60,%% Line 1681
									Dump> when 'true' ->
	      let <_cor32> =
		  %% Line 1682
		  call 'erlang':'get'
		      (Pid)
	      in  do  %% Line 1682
		      apply 'dump_stack'/3
			  (Dump, _cor32, Trace)
		      %% Line 1683
		      TS
	  %% Line 1686
	  <Trace,_X_Table,_cor61,Dump> when 'true' ->
	      do  %% Line 1687
		  apply 'dump'/2
		      (Dump, Trace)
		  %% Line 1688
		  call 'erlang':'throw'
		      ({'incorrect_trace_data','fprof',1688,[Trace|[]]})
	end
'trace_call'/5 =
    %% Line 1737
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Stack> =
	    %% Line 1738
	    apply 'get_stack'/1
		(_cor3)
	in  do  %% Line 1739
		apply 'dbg'/3
		    (0, [116|[114|[97|[99|[101|[95|[99|[97|[108|[108|[40|[126|[112|[44|[32|[126|[112|[44|[32|[126|[112|[44|[32|[126|[112|[41|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1740
																									    [_cor3|[_cor2|[_cor1|[_cor0|[Stack|[]]]]]])
		let <Proc,InitCnt> =
		    %% Line 1742
		    case call 'ets':'lookup'
			     (_cor4, _cor3) of
		      %% Line 1743
		      <[P = {'proc',_cor32,_cor33,_cor34,_cor35,N}|[]]> when 'true' ->
			  %% Line 1744
			  <P,N>
		      %% Line 1745
		      <[]> when 'true' ->
			  %% Line 1746
			  <'undefined',0>
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		in  do  %% Line 1748
			case Stack of
			  %% Line 1749
			  <[]> when 'true' ->
			      do  %% Line 1750
				  apply 'init_log'/3
				      (_cor4, Proc, _cor2)
				  let <_cor9> =
				      %% Line 1752
				      case <> of
					<>
					    when call 'erlang':'=:='
						  (_cor0,
						   'undefined') ->
					    %% Line 1753
					    Stack
					%% Line 1754
					<> when 'true' ->
					    %% Line 1755
					    [[{_cor0,_cor1}|[]]|[]]
				      end
				  in  let <_cor11> =
					  %% Line 1757
					  apply 'trace_call_push'/5
					      (_cor4, _cor3, _cor2, _cor1, _cor9)
				      in  %% Line 1757
					  call 'erlang':'put'
					      (_cor3, _cor11)
			  %% Line 1758
			  <[[{_cor36,FirstInTS}|[]]|[]]>
			      when let <_cor37> =
				    call 'erlang':'=:='
					(_cor36, _cor2)
				in  let <_cor38> =
					call 'erlang':'=:='
					    (InitCnt, 2)
				    in  call 'erlang':'and'
					    (_cor37, _cor38) ->
			      do  %% Line 1761
				  apply 'init_log'/3
				      (_cor4, Proc, _cor2)
				  let <_cor12> =
				      %% Line 1763
				      case <> of
					<>
					    when call 'erlang':'=:='
						  (_cor0,
						   'undefined') ->
					    %% Line 1764
					    []
					%% Line 1765
					<> when 'true' ->
					    %% Line 1766
					    [[{_cor0,FirstInTS}|[]]|[]]
				      end
				  in  let <_cor14> =
					  %% Line 1768
					  apply 'trace_call_push'/5
					      (_cor4, _cor3, _cor2, FirstInTS, _cor12)
				      in  %% Line 1768
					  call 'erlang':'put'
					      (_cor3, _cor14)
			  %% Line 1769
			  <[[{'suspend',_cor39}|_cor40]|_cor41]> when 'true' ->
			      %% Line 1770
			      call 'erlang':'throw'
				  ({'inconsistent_trace_data','fprof',1770,%% Line 1771
									   [_cor3|[_cor2|[_cor1|[_cor0|[Stack|[]]]]]]})
			  %% Line 1772
			  <[[{'garbage_collect',_cor42}|_cor43]|_cor44]> when 'true' ->
			      %% Line 1773
			      call 'erlang':'throw'
				  ({'inconsistent_trace_data','fprof',1773,%% Line 1774
									   [_cor3|[_cor2|[_cor1|[_cor0|[Stack|[]]]]]]})
			  %% Line 1775
			  <[[{_cor45,_cor46}|_cor47]|[[{_cor48,_cor49}|_cor50]|_cor51]]>
			      when let <_cor52> =
				    call 'erlang':'=:='
					(_cor45, _cor0)
				in  let <_cor53> =
					call 'erlang':'=:='
					    (_cor48, _cor0)
				    in  call 'erlang':'and'
					    (_cor52, _cor53) ->
			      do  %% Line 1785
				  apply 'init_log'/3
				      (_cor4, Proc, _cor2)
				  let <_cor15> =
				      %% Line 1786
				      apply 'trace_call_shove'/5
					  (_cor4, _cor3, _cor2, _cor1, Stack)
				  in  %% Line 1786
				      call 'erlang':'put'
					  (_cor3, _cor15)
			  %% Line 1787
			  <[[{_cor54,_cor55}|_cor56]|_cor57]>
			      when call 'erlang':'=:='
				    (_cor54,
				     _cor0) ->
			      do  %% Line 1789
				  apply 'init_log'/3
				      (_cor4, Proc, _cor2)
				  let <_cor16> =
				      %% Line 1790
				      apply 'trace_call_push'/5
					  (_cor4, _cor3, _cor2, _cor1, Stack)
				  in  %% Line 1790
				      call 'erlang':'put'
					  (_cor3, _cor16)
			  %% Line 1791
			  <[_cor58|[[{_cor59,_cor60}|_cor61]|_cor62]]>
			      when call 'erlang':'=:='
				    (_cor59,
				     _cor0) ->
			      do  %% Line 1793
				  apply 'init_log'/3
				      (_cor4, Proc, _cor2)
				  let <_cor17> =
				      %% Line 1794
				      apply 'trace_call_shove'/5
					  (_cor4, _cor3, _cor2, _cor1, Stack)
				  in  %% Line 1794
				      call 'erlang':'put'
					  (_cor3, _cor17)
			  %% Line 1795
			  <[[{Func0,_cor63}|_cor64]|[[{_cor65,_cor66}|_cor67]|[[{_cor68,_cor69}|_cor70]|_cor71]]]>
			      when let <_cor72> =
				    call 'erlang':'=:='
					(_cor65, Func0)
				in  let <_cor73> =
					call 'erlang':'=:='
					    (_cor68, _cor0)
				    in  call 'erlang':'and'
					    (_cor72, _cor73) ->
			      do  %% Line 1801
				  apply 'init_log'/3
				      (_cor4, Proc, _cor2)
				  let <_cor18> =
				      %% Line 1804
				      apply 'trace_return_to_int'/5
					  (_cor4, _cor3, Func0, _cor1, %% Line 1805
								       Stack)
				  in  let <_cor19> =
					  %% Line 1803
					  apply 'trace_call_shove'/5
					      (_cor4, _cor3, _cor2, _cor1, _cor18)
				      in  %% Line 1802
					  call 'erlang':'put'
					      (_cor3, _cor19)
			  %% Line 1806
			  <[Level0 = [{_cor74,TS0}|_cor75]|[]]> when 'true' ->
			      do  %% Line 1809
				  apply 'init_log'/3
				      (_cor4, Proc, _cor2)
				  let <_cor20> =
				      %% Line 1811
				      case <> of
					<>
					    when call 'erlang':'=:='
						  (_cor0,
						   'undefined') ->
					    %% Line 1812
					    Stack
					%% Line 1813
					<> when 'true' ->
					    %% Line 1814
					    [Level0|[[{_cor0,TS0}|[]]|[]]]
				      end
				  in  let <_cor22> =
					  %% Line 1816
					  apply 'trace_call_shove'/5
					      (_cor4, _cor3, _cor2, _cor1, _cor20)
				      in  %% Line 1816
					  call 'erlang':'put'
					      (_cor3, _cor22)
			  %% Line 1817
			  <[_cor76|_cor77]> when 'true' ->
			      let <_cor23> =
				  %% Line 1822
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor0,
					       'undefined') ->
					%% Line 1826
					apply 'trace_return_to_int'/5
					    (_cor4, _cor3, _cor0, _cor1, Stack)
				    %% Line 1827
				    <> when 'true' ->
					do  %% Line 1832
					    apply 'init_log'/3
						(_cor4, Proc, _cor0)
					    %% Line 1833
					    apply 'trace_call_shove'/5
						(_cor4, _cor3, _cor0, _cor1, Stack)
				  end
			      in  do  %% Line 1836
				      apply 'init_log'/3
					  (_cor4, _cor3, _cor2)
				      let <_cor25> =
					  %% Line 1837
					  apply 'trace_call_push'/5
					      (_cor4, _cor3, _cor2, _cor1, _cor23)
				      in  %% Line 1837
					  call 'erlang':'put'
					      (_cor3, _cor25)
			  ( <_cor26> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor26})
			    -| ['compiler_generated'] )
			end
			%% Line 1839
			'ok'
'trace_call_push'/5 =
    %% Line 1842
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1843
	    case _cor0 of
	      %% Line 1844
	      <[]> when 'true' ->
		  'ok'
	      %% Line 1846
	      <[_cor12|_cor13]> when 'true' ->
		  %% Line 1847
		  apply 'trace_clock'/5
		      (_cor4, _cor3, _cor1, _cor0, 4)
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	    let <NewStack> =
		%% Line 1849
		[[{_cor2,_cor1}|[]]|_cor0]
	    in  do  %% Line 1850
		    apply 'trace_clock'/5
			(_cor4, _cor3, 1, NewStack, 3)
		    %% Line 1851
		    NewStack
'trace_call_shove'/5 =
    %% Line 1854
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1855
	    apply 'trace_clock'/5
		(_cor4, _cor3, _cor1, _cor0, 4)
	    let <_cor7> =
		%% Line 1857
		case _cor0 of
		  %% Line 1858
		  <[]> when 'true' ->
		      %% Line 1859
		      [[{_cor2,_cor1}|[]]|[]]
		  %% Line 1860
		  <[Level0|Stack1]> when 'true' ->
		      let <_cor5> =
			  %% Line 1861
			  apply 'trace_call_collapse'/1
			      ([{_cor2,_cor1}|Level0])
		      in  %% Line 1861
			  [_cor5|Stack1]
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 1856
		case _cor7 of
		  <[[_cor15|NewLevel0]|NewStack1]> when 'true' ->
		      let <NewStack> =
			  %% Line 1863
			  [[{_cor2,_cor1}|NewLevel0]|NewStack1]
		      in  do  %% Line 1864
			      apply 'trace_clock'/5
				  (_cor4, _cor3, 1, NewStack, 3)
			      %% Line 1865
			      NewStack
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
'trace_call_collapse'/1 =
    %% Line 1869
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1870
	      []
	  %% Line 1871
	  <Stack = [_cor2|[]]> when 'true' ->
	      %% Line 1872
	      Stack
	  %% Line 1873
	  <Stack = [_cor3|[_cor4|[]]]> when 'true' ->
	      %% Line 1874
	      Stack
	  %% Line 1875
	  <Stack = [_cor5|Stack1]> when 'true' ->
	      %% Line 1876
	      apply 'trace_call_collapse_1'/3
		  (Stack, Stack1, 1)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'trace_call_collapse',1}}] )
	    -| ['compiler_generated'] )
	end
'trace_call_collapse_1'/3 =
    %% Line 1880
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Stack,[],_cor9> when 'true' ->
	      %% Line 1881
	      Stack
	  %% Line 1882
	  <Stack = [{Func0,_cor10}|_cor11],S = [{_cor12,_cor13}|S1],N>
	      when call 'erlang':'=:='
		    (_cor12,
		     Func0) ->
	      %% Line 1883
	      case apply 'trace_call_collapse_2'/3
		       (Stack, S, N) of
		%% Line 1884
		<'true'> when 'true' ->
		    %% Line 1885
		    S
		%% Line 1886
		<'false'> when 'true' ->
		    let <_cor3> =
			%% Line 1887
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 1887
			apply 'trace_call_collapse_1'/3
			    (Stack, S1, _cor3)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1889
	  <Stack,[_cor14|S1],N> when 'true' ->
	      let <_cor5> =
		  %% Line 1890
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1890
		  apply 'trace_call_collapse_1'/3
		      (Stack, S1, _cor5)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'trace_call_collapse_1',3}}] )
	    -| ['compiler_generated'] )
	end
'trace_call_collapse_2'/3 =
    %% Line 1895
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor7,_cor8,0> when 'true' ->
	      %% Line 1896
	      'true'
	  %% Line 1897
	  <[{Func1,_cor9}|Stack2 = [{Func2,_cor10}|_cor11]],%% Line 1898
							    [{_cor12,_cor13}|S2 = [{_cor14,_cor15}|_cor16]],%% Line 1899
													    N>
	      when let <_cor17> =
		    call 'erlang':'=:='
			(_cor12, %% Line 1898
				 Func1)
		in  let <_cor18> =
			call 'erlang':'=:='
			    (_cor14, %% Line 1898
				     Func2)
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      let <_cor3> =
		  %% Line 1900
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1900
		  apply 'trace_call_collapse_2'/3
		      (Stack2, S2, _cor3)
	  %% Line 1901
	  <[{Func1,_cor19}|_cor20],[{_cor21,_cor22}|_cor23],_X_N>
	      when call 'erlang':'=:='
		    (_cor21,
		     Func1) ->
	      %% Line 1902
	      'false'
	  %% Line 1903
	  <_X_Stack,[_cor24|[]],_X_N> when 'true' ->
	      %% Line 1904
	      'false'
	  %% Line 1905
	  <Stack,[_cor25|S],N> when 'true' ->
	      %% Line 1906
	      apply 'trace_call_collapse_2'/3
		  (Stack, S, N)
	  %% Line 1907
	  <_X_Stack,[],_X_N> when 'true' ->
	      %% Line 1908
	      'false'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'trace_call_collapse_2',3}}] )
	    -| ['compiler_generated'] )
	end
'trace_return_to'/4 =
    %% Line 1912
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Stack> =
	    %% Line 1913
	    apply 'get_stack'/1
		(_cor2)
	in  do  %% Line 1914
		apply 'dbg'/3
		    (0, [116|[114|[97|[99|[101|[95|[114|[101|[116|[117|[114|[110|[95|[116|[111|[40|[126|[112|[44|[32|[126|[112|[44|[32|[126|[112|[41|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1915
																										     [_cor2|[_cor1|[_cor0|[Stack|[]]]]])
		do  %% Line 1916
		    case Stack of
		      %% Line 1917
		      <[[{'suspend',_cor12}|_cor13]|_cor14]> when 'true' ->
			  %% Line 1918
			  call 'erlang':'throw'
			      ({'inconsistent_trace_data','fprof',1918,%% Line 1919
								       [_cor2|[_cor1|[_cor0|[Stack|[]]]]]})
		      %% Line 1920
		      <[[{'garbage_collect',_cor15}|_cor16]|_cor17]> when 'true' ->
			  %% Line 1921
			  call 'erlang':'throw'
			      ({'inconsistent_trace_data','fprof',1921,%% Line 1922
								       [_cor2|[_cor1|[_cor0|[Stack|[]]]]]})
		      %% Line 1923
		      <[_cor18|_cor19]> when 'true' ->
			  let <_cor5> =
			      %% Line 1924
			      apply 'trace_return_to_int'/5
				  (_cor3, _cor2, _cor1, _cor0, Stack)
			  in  %% Line 1924
			      call 'erlang':'put'
				  (_cor2, _cor5)
		      %% Line 1925
		      <[]> when 'true' ->
			  let <_cor6> =
			      %% Line 1926
			      apply 'trace_return_to_int'/5
				  (_cor3, _cor2, _cor1, _cor0, Stack)
			  in  %% Line 1926
			      call 'erlang':'put'
				  (_cor2, _cor6)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		    %% Line 1928
		    'ok'
'trace_return_to_int'/5 =
    %% Line 1930
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1934
	    apply 'trace_clock'/5
		(_cor4, _cor3, _cor1, _cor0, 4)
	    %% Line 1935
	    case apply 'trace_return_to_2'/5
		     (_cor4, _cor3, _cor2, _cor1, _cor0) of
	      %% Line 1936
	      <{'undefined',_cor11}> when 'true' ->
		  %% Line 1937
		  [[{_cor2,_cor1}|[]]|_cor0]
	      %% Line 1938
	      <{[[{_cor12,_cor13}|Level0]|Stack1],_cor14}>
		  when call 'erlang':'=:='
			(_cor12,
			 _cor2) ->
		  %% Line 1939
		  [[{_cor2,_cor1}|Level0]|Stack1]
	      %% Line 1940
	      <{NewStack,_cor15}> when 'true' ->
		  %% Line 1941
		  NewStack
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'trace_return_to_1'/5 =
    %% Line 1955
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor12,_cor13,'undefined',_cor14,[]> when 'true' ->
	      %% Line 1956
	      {[],[]}
	  %% Line 1957
	  <_cor15,_cor16,_cor17,_cor18,[]> when 'true' ->
	      %% Line 1958
	      {'undefined',[]}
	  %% Line 1959
	  <Table,Pid,Func,TS,Stack = %% Line 1960
				     [[{_cor19,_cor20}|Level0]|Stack1]>
	      when call 'erlang':'=:='
		    (_cor19,
		     %% Line 1960
		     Func) ->
	      let <Charged> =
		  %% Line 1962
		  apply 'trace_return_to_3'/2
		      ([Level0|Stack1], [])
	      in  %% Line 1963
		  case call 'lists':'member'
			   (Func, Charged) of
		    %% Line 1964
		    <'false'> when 'true' ->
			do  %% Line 1965
			    apply 'trace_clock'/5
				(Table, Pid, TS, Stack, 5)
			    %% Line 1966
			    {Stack,[Func|Charged]}
		    %% Line 1967
		    <'true'> when 'true' ->
			%% Line 1968
			{Stack,Charged}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1970
	  <Table,Pid,Func,TS,Stack> when 'true' ->
	      %% Line 1971
	      apply 'trace_return_to_2'/5
		  (Table, Pid, Func, TS, Stack)
	end
'trace_return_to_2'/5 =
    %% Line 1975
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Table,Pid,Func,TS,Stack = []> when 'true' ->
	      %% Line 1976
	      apply 'trace_return_to_1'/5
		  (Table, Pid, Func, TS, Stack)
	  %% Line 1977
	  <Table,Pid,Func,TS,[[]|Stack1]> when 'true' ->
	      %% Line 1978
	      apply 'trace_return_to_1'/5
		  (Table, Pid, Func, TS, Stack1)
	  %% Line 1979
	  <Table,Pid,Func,TS,Stack = %% Line 1980
				     [[{Func0,_cor12}|Level1]|Stack1]> when 'true' ->
	      %% Line 1981
	      case apply 'trace_return_to_2'/5
		       (Table, Pid, Func, TS, [Level1|Stack1]) of
		%% Line 1982
		<R = {'undefined',_cor13}> when 'true' ->
		    %% Line 1983
		    R
		%% Line 1984
		<R = {NewStack,Charged}> when 'true' ->
		    %% Line 1985
		    case call 'lists':'member'
			     (Func0, Charged) of
		      %% Line 1986
		      <'false'> when 'true' ->
			  do  %% Line 1987
			      apply 'trace_clock'/5
				  (Table, Pid, TS, Stack, 5)
			      %% Line 1988
			      {NewStack,[Func0|Charged]}
		      %% Line 1989
		      <'true'> when 'true' ->
			  %% Line 1990
			  R
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'trace_return_to_2',5}}] )
	    -| ['compiler_generated'] )
	end
'trace_return_to_3'/2 =
    %% Line 1995
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],R> when 'true' ->
	      %% Line 1996
	      R
	  %% Line 1997
	  <[[]|Stack1],R> when 'true' ->
	      %% Line 1998
	      apply 'trace_return_to_3'/2
		  (Stack1, R)
	  %% Line 1999
	  <[[{Func0,_cor4}|Level0]|Stack1],R> when 'true' ->
	      %% Line 2000
	      apply 'trace_return_to_3'/2
		  ([Level0|Stack1], [Func0|R])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'trace_return_to_3',2}}] )
	    -| ['compiler_generated'] )
	end
'trace_spawn'/5 =
    %% Line 2004
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Stack> =
	    %% Line 2005
	    call 'erlang':'get'
		(_cor3)
	in  do  %% Line 2006
		apply 'dbg'/3
		    (0, [116|[114|[97|[99|[101|[95|[115|[112|[97|[119|[110|[40|[126|[112|[44|[32|[126|[112|[44|[32|[126|[112|[44|[32|[126|[112|[41|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2007
																										   [_cor3|[_cor2|[_cor1|[_cor0|[Stack|[]]]]]])
		%% Line 2008
		case Stack of
		  %% Line 2009
		  <'undefined'> when 'true' ->
		      %% Line 2010
		      case _cor2 of
			<{M,F,Args}> when 'true' ->
			    let <_cor7> =
				%% Line 2011
				call 'erlang':'length'
				    (Args)
			    in  let <OldStack> =
				    %% Line 2011
				    [[{{M,F,_cor7},_cor1}|[]]|[]]
				in  let <_cor9> =
					%% Line 2012
					apply 'trace_call_push'/5
					    (_cor4, _cor3, 'suspend', _cor1, OldStack)
				    in  do  %% Line 2012
					    call 'erlang':'put'
						(_cor3, _cor9)
					    %% Line 2013
					    call 'ets':'insert'
						(_cor4, {'proc',_cor3,_cor0,_cor2,[],2})
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  %% Line 2015
		  <_cor16> when 'true' ->
		      %% Line 2016
		      call 'erlang':'throw'
			  ({'inconsistent_trace_data','fprof',2016,%% Line 2017
								   [_cor3|[_cor2|[_cor1|[_cor0|[Stack|[]]]]]]})
		end
'trace_exit'/3 =
    %% Line 2022
    fun (_cor2,_cor1,_cor0) ->
	let <Stack> =
	    %% Line 2023
	    call 'erlang':'erase'
		(_cor1)
	in  do  %% Line 2024
		apply 'dbg'/3
		    (0, [116|[114|[97|[99|[101|[95|[101|[120|[105|[116|[40|[126|[112|[44|[32|[126|[112|[41|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[_cor0|[Stack|[]]]])
		do  %% Line 2025
		    case Stack of
		      %% Line 2026
		      <'undefined'> when 'true' ->
			  'ok'
		      %% Line 2028
		      <[]> when 'true' ->
			  'ok'
		      %% Line 2030
		      <_cor8 = [_cor9|_cor10]>
			  when call 'erlang':'=:='
				(_cor8,
				 Stack) ->
			  do  %% Line 2031
			      apply 'trace_return_to_int'/5
				  (_cor2, _cor1, 'undefined', _cor0, Stack)
			      'ok'
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		    %% Line 2034
		    'ok'
'trace_out'/4 =
    %% Line 2038
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Stack> =
	    %% Line 2039
	    apply 'get_stack'/1
		(_cor2)
	in  do  %% Line 2040
		apply 'dbg'/3
		    (0, [116|[114|[97|[99|[101|[95|[111|[117|[116|[40|[126|[112|[44|[32|[126|[112|[44|[32|[126|[112|[41|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[_cor1|[_cor0|[Stack|[]]]]])
		%% Line 2041
		case Stack of
		  %% Line 2042
		  <[]> when 'true' ->
		      let <_cor6> =
			  %% Line 2044
			  case _cor1 of
			    %% Line 2045
			    <'undefined'> when 'true' ->
				[]
			    %% Line 2046
			    <_cor14> when 'true' ->
				%% Line 2047
				[[{_cor1,_cor0}|[]]|[]]
			  end
		      in  let <_cor7> =
			      %% Line 2043
			      apply 'trace_call_push'/5
				  (_cor3, _cor2, 'suspend', _cor0, _cor6)
			  in  %% Line 2043
			      call 'erlang':'put'
				  (_cor2, _cor7)
		  %% Line 2049
		  <[[{'suspend',_cor15}|[]]|_cor16]> when 'true' ->
		      %% Line 2051
		      call 'erlang':'put'
			  (_cor2, [[{'suspend',_cor0}|[]]|Stack])
		  %% Line 2052
		  <[_cor17|_cor18]> when 'true' ->
		      let <_cor8> =
			  %% Line 2053
			  apply 'trace_call_push'/5
			      (_cor3, _cor2, 'suspend', _cor0, Stack)
		      in  %% Line 2053
			  call 'erlang':'put'
			      (_cor2, _cor8)
		  ( <_cor9> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor9})
		    -| ['compiler_generated'] )
		end
'trace_in'/4 =
    %% Line 2058
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Stack> =
	    %% Line 2059
	    call 'erlang':'get'
		(_cor2)
	in  do  %% Line 2060
		apply 'dbg'/3
		    (0, [116|[114|[97|[99|[101|[95|[105|[110|[40|[126|[112|[44|[32|[126|[112|[44|[32|[126|[112|[41|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[_cor1|[_cor0|[Stack|[]]]]])
		%% Line 2061
		case Stack of
		  %% Line 2062
		  <'undefined'> when 'true' ->
		      %% Line 2065
		      call 'erlang':'put'
			  (_cor2, [[{_cor1,_cor0}|[]]|[]])
		  %% Line 2066
		  <[]> when 'true' ->
		      %% Line 2067
		      call 'erlang':'put'
			  (_cor2, [[{_cor1,_cor0}|[]]|[]])
		  %% Line 2068
		  <[[{'suspend',_cor12}|[]]|[]]> when 'true' ->
		      let <_cor5> =
			  %% Line 2069
			  apply 'trace_return_to_int'/5
			      (_cor3, _cor2, 'undefined', _cor0, Stack)
		      in  %% Line 2069
			  call 'erlang':'put'
			      (_cor2, _cor5)
		  %% Line 2070
		  <[[{'suspend',_cor13}|[]]|NewStack = [[{'suspend',_cor14}|[]]|_cor15]]> when 'true' ->
		      %% Line 2072
		      call 'erlang':'put'
			  (_cor2, NewStack)
		  %% Line 2073
		  <[[{'suspend',_cor16}|[]]|[[{Func1,_cor17}|_cor18]|_cor19]]> when 'true' ->
		      let <_cor6> =
			  %% Line 2077
			  apply 'trace_return_to_int'/5
			      (_cor3, _cor2, Func1, _cor0, Stack)
		      in  %% Line 2077
			  call 'erlang':'put'
			      (_cor2, _cor6)
		  %% Line 2078
		  <_cor20> when 'true' ->
		      %% Line 2079
		      call 'erlang':'throw'
			  ({'inconsistent_trace_data','fprof',2079,%% Line 2080
								   [_cor2|[_cor1|[_cor0|[Stack|[]]]]]})
		end
'trace_gc_start'/3 =
    %% Line 2085
    fun (_cor2,_cor1,_cor0) ->
	let <Stack> =
	    %% Line 2086
	    apply 'get_stack'/1
		(_cor1)
	in  do  %% Line 2087
		apply 'dbg'/3
		    (0, [116|[114|[97|[99|[101|[95|[103|[99|[95|[115|[116|[97|[114|[116|[40|[126|[112|[44|[32|[126|[112|[41|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[_cor0|[Stack|[]]]])
		let <_cor4> =
		    %% Line 2088
		    apply 'trace_call_push'/5
			(_cor2, _cor1, 'garbage_collect', _cor0, Stack)
		in  %% Line 2088
		    call 'erlang':'put'
			(_cor1, _cor4)
'trace_gc_end'/3 =
    %% Line 2092
    fun (_cor2,_cor1,_cor0) ->
	let <Stack> =
	    %% Line 2093
	    call 'erlang':'get'
		(_cor1)
	in  do  %% Line 2094
		apply 'dbg'/3
		    (0, [116|[114|[97|[99|[101|[95|[103|[99|[95|[101|[110|[100|[40|[126|[112|[44|[32|[126|[112|[41|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[_cor0|[Stack|[]]]])
		%% Line 2095
		case Stack of
		  %% Line 2096
		  <'undefined'> when 'true' ->
		      %% Line 2097
		      call 'erlang':'put'
			  (_cor1, [])
		  %% Line 2098
		  <[]> when 'true' ->
		      %% Line 2099
		      'ok'
		  %% Line 2100
		  <[[{'garbage_collect',_cor10}|[]]|[]]> when 'true' ->
		      let <_cor4> =
			  %% Line 2101
			  apply 'trace_return_to_int'/5
			      (_cor2, _cor1, 'undefined', _cor0, Stack)
		      in  %% Line 2101
			  call 'erlang':'put'
			      (_cor1, _cor4)
		  %% Line 2102
		  <[[{'garbage_collect',_cor11}|[]]|[[{Func1,_cor12}|_cor13]|_cor14]]> when 'true' ->
		      let <_cor5> =
			  %% Line 2103
			  apply 'trace_return_to_int'/5
			      (_cor2, _cor1, Func1, _cor0, Stack)
		      in  %% Line 2103
			  call 'erlang':'put'
			      (_cor1, _cor5)
		  %% Line 2104
		  <_cor15> when 'true' ->
		      %% Line 2105
		      call 'erlang':'throw'
			  ({'inconsistent_trace_data','fprof',2105,%% Line 2106
								   [_cor1|[_cor0|[Stack|[]]]]})
		end
'get_stack'/1 =
    %% Line 2117
    fun (_cor0) ->
	%% Line 2118
	case call 'erlang':'get'
		 (_cor0) of
	  %% Line 2119
	  <'undefined'> when 'true' ->
	      %% Line 2120
	      []
	  %% Line 2121
	  <Stack> when 'true' ->
	      %% Line 2122
	      Stack
	end
'mfarity'/1 =
    %% Line 2127
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,Args}>
	      when call 'erlang':'is_list'
		    (Args) ->
	      let <_cor1> =
		  %% Line 2128
		  call 'erlang':'length'
		      (Args)
	      in  %% Line 2128
		  {M,F,_cor1}
	  %% Line 2129
	  <MFA> when 'true' ->
	      %% Line 2130
	      MFA
	end
'init_log'/3 =
    %% Line 2134
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Table,_X_Proc,'suspend'> when 'true' ->
	      %% Line 2135
	      'ok'
	  %% Line 2136
	  <_X_Table,_X_Proc,'void'> when 'true' ->
	      %% Line 2137
	      'ok'
	  %% Line 2138
	  <_X_Table,'undefined',_X_Entry> when 'true' ->
	      %% Line 2139
	      'ok'
	  %% Line 2140
	  <_X_Table,{'proc',_cor15,_cor16,_cor17,_cor18,0},_X_Entry> when 'true' ->
	      %% Line 2141
	      'ok'
	  %% Line 2142
	  <Table,Proc = {'proc',_cor19,_cor20,_cor21,L,N},Entry> when 'true' ->
	      let <_rec1> =
		  %% Line 2143
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_rec2> =
		      %% Line 2143
		      [Entry|L]
		  in  let <_cor6> =
			  %% Line 2143
			  call 'erlang':'setelement'
			      (6, Proc, _rec1)
		      in  let <_cor8> =
			      %% Line 2143
			      call 'erlang':'setelement'
				  (5, _cor6, _rec2)
			  in  %% Line 2143
			      call 'ets':'insert'
				  (Table, _cor8)
	  %% Line 2144
	  <Table,Id,Entry> when 'true' ->
	      let <_cor10> =
		  %% Line 2146
		  case call 'ets':'lookup'
			   (Table, Id) of
		    %% Line 2147
		    <[P|[]]> when 'true' ->
			P
		    %% Line 2148
		    <[]> when 'true' ->
			'undefined'
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2150
		  apply 'init_log'/3
		      (Table, _cor10, Entry)
	end
'trace_clock'/5 =
    %% Line 2153
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Table,_X_Pid,_X_T,_X_Stack = %% Line 2154
					   [[{'suspend',_cor10}|[]]|[[{'suspend',_cor11}|[]]|_cor12]],%% Line 2154
												      _X_Clock> when 'true' ->
	      do  %% Line 2155
		  apply 'dbg'/3
		      (9, [116|[114|[97|[99|[101|[95|[99|[108|[111|[99|[107|[40|[84|[97|[98|[108|[101|[44|[32|[126|[119|[44|[32|[126|[119|[44|[32|[126|[119|[44|[32|[126|[119|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2156
																												 [_X_Pid|[_X_T|[_X_Stack|[_X_Clock|[]]]]])
		  %% Line 2157
		  'void'
	  %% Line 2158
	  <Table,Pid,T,%% Line 2159
		       [[{'garbage_collect',TS0}|[]]|[[{'suspend',_cor13}|[]]|[]]],%% Line 2159
										   Clock> when 'true' ->
	      %% Line 2160
	      apply 'trace_clock_1'/7
		  (Table, Pid, T, TS0, 'undefined', 'garbage_collect', Clock)
	  %% Line 2161
	  <Table,Pid,T,%% Line 2162
		       [[{'garbage_collect',TS0}|[]]|[[{'suspend',_cor14}|[]]|[[{Func2,_cor15}|_cor16]|_cor17]]],%% Line 2163
														 Clock> when 'true' ->
	      %% Line 2164
	      apply 'trace_clock_1'/7
		  (Table, Pid, T, TS0, Func2, 'garbage_collect', Clock)
	  %% Line 2165
	  <Table,Pid,T,[[{Func0,TS0}|[{Func1,_cor18}|_cor19]]|_cor20],Clock> when 'true' ->
	      %% Line 2166
	      apply 'trace_clock_1'/7
		  (Table, Pid, T, TS0, Func1, Func0, Clock)
	  %% Line 2167
	  <Table,Pid,T,[[{Func0,TS0}|[]]|[[{Func1,_cor21}|_cor22]|_cor23]],Clock> when 'true' ->
	      %% Line 2168
	      apply 'trace_clock_1'/7
		  (Table, Pid, T, TS0, Func1, Func0, Clock)
	  %% Line 2169
	  <Table,Pid,T,[[{Func0,TS0}|[]]|[]],Clock> when 'true' ->
	      %% Line 2170
	      apply 'trace_clock_1'/7
		  (Table, Pid, T, TS0, 'undefined', Func0, Clock)
	  %% Line 2171
	  <_cor24,_cor25,_cor26,[],_cor27> when 'true' ->
	      %% Line 2172
	      'void'
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'trace_clock',5}}] )
	    -| ['compiler_generated'] )
	end
'trace_clock_1'/7 =
    %% Line 2174
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Table,Pid,_cor15,_cor16,Caller,'suspend',4> when 'true' ->
	      %% Line 2175
	      apply 'clock_add'/4
		  (Table, {Pid,Caller,'suspend'}, 4, 0)
	  %% Line 2176
	  <Table,Pid,T,TS,Caller,Func,Clock> when 'true' ->
	      let <_cor7> =
		  %% Line 2178
		  case <> of
		    <>
			when call 'erlang':'is_integer'
			      (T) ->
			%% Line 2179
			T
		    %% Line 2180
		    <> when 'true' ->
			%% Line 2181
			apply 'ts_sub'/2
			    (T, TS)
		  end
	      in  %% Line 2177
		  apply 'clock_add'/4
		      (Table, {Pid,Caller,Func}, Clock, _cor7)
	end
'clock_add'/4 =
    %% Line 2184
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 2185
	    apply 'dbg'/3
		(1, [99|[108|[111|[99|[107|[95|[97|[100|[100|[40|[84|[97|[98|[108|[101|[44|[32|[126|[119|[44|[32|[126|[119|[44|[32|[126|[119|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[_cor1|[_cor0|[]]]])
	    %% Line 2186
	    try
		call 'ets':'update_counter'
		    (_cor3, _cor2, {_cor1,_cor0})
	    of <_cor4> ->
		_cor4
	    catch <_cor7,_cor6,_cor5> ->
		case <_cor7,_cor6,_cor5> of
		  %% Line 2188
		  <'error','badarg',_cor13> when 'true' ->
		      do  %% Line 2189
			  call 'ets':'insert'
			      (_cor3, {'clocks',_cor2,0,0,0})
			  let <X> =
			      %% Line 2190
			      call 'ets':'update_counter'
				  (_cor3, _cor2, {_cor1,_cor0})
			  in  do  %% Line 2191
				  case <> of
				    <>
					when call 'erlang':'>='
					      (X,
					       0) ->
					'ok'
				    %% Line 2192
				    <> when 'true' ->
					apply 'dbg'/3
					    (0, [78|[101|[103|[97|[116|[105|[118|[101|[32|[99|[111|[117|[110|[116|[101|[114|[32|[118|[97|[108|[117|[101|[32|[126|[112|[32|[126|[112|[32|[126|[112|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2193
																															       [X|[_cor2|[_cor1|[_cor0|[]]]]])
				  end
				  %% Line 2195
				  X
		  ( <_cor7,_cor6,_cor5> when 'true' ->
			primop 'raise'
			    (_cor5, _cor6)
		    -| ['compiler_generated'] )
		end
'clocks_add'/2 =
    %% Line 2198
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Table,Clocks = {'clocks',Id,_cor6,_cor7,_cor8}> when 'true' ->
	      do  %% Line 2199
		  apply 'dbg'/3
		      (1, [99|[108|[111|[99|[107|[115|[95|[97|[100|[100|[40|[84|[97|[98|[108|[101|[44|[32|[126|[119|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [Clocks|[]])
		  %% Line 2200
		  case call 'ets':'lookup'
			   (Table, Id) of
		    %% Line 2201
		    <[Clocks0|[]]> when 'true' ->
			let <_cor2> =
			    %% Line 2202
			    apply 'clocks_sum'/3
				(Clocks, Clocks0, Id)
			in  %% Line 2202
			    call 'ets':'insert'
				(Table, _cor2)
		    %% Line 2203
		    <[]> when 'true' ->
			%% Line 2204
			call 'ets':'insert'
			    (Table, Clocks)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'clocks_add',2}}] )
	    -| ['compiler_generated'] )
	end
'clocks_sum'/3 =
    %% Line 2209
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'clocks',_X_Id1,%% Line 2210
			    Cnt1,%% Line 2211
				 Own1,%% Line 2212
				      Acc1},%% Line 2213
					    {'clocks',_X_Id2,%% Line 2214
							     Cnt2,%% Line 2215
								  Own2,%% Line 2216
								       Acc2},%% Line 2217
									     Id> when 'true' ->
	      let <_cor5> =
		  %% Line 2219
		  call 'erlang':'+'
		      (Cnt1, Cnt2)
	      in  let <_cor4> =
		      %% Line 2220
		      call 'erlang':'+'
			  (Own1, Own2)
		  in  let <_cor3> =
			  %% Line 2221
			  call 'erlang':'+'
			      (Acc1, Acc2)
		      in  %% Line 2218
			  {'clocks',Id,_cor5,_cor4,_cor3}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'clocks_sum',3}}] )
	    -| ['compiler_generated'] )
	end
'ts_sub'/2 =
    %% Line 2225
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_T = {A,B,C},_X_T0 = {A0,B0,C0}> when 'true' ->
	      let <_cor3> =
		  %% Line 2226
		  call 'erlang':'-'
		      (A, A0)
	      in  let <_cor4> =
		      %% Line 2226
		      call 'erlang':'*'
			  (_cor3, 1000000)
		  in  let <_cor2> =
			  %% Line 2226
			  call 'erlang':'-'
			      (B, B0)
		      in  let <_cor5> =
			      %% Line 2226
			      call 'erlang':'+'
				  (_cor4, _cor2)
			  in  let <_cor6> =
				  %% Line 2226
				  call 'erlang':'*'
				      (_cor5, 1000000)
			      in  let <_cor7> =
				      %% Line 2226
				      call 'erlang':'+'
					  (_cor6, C)
				  in  let <X> =
					  %% Line 2226
					  call 'erlang':'-'
					      (_cor7, C0)
				      in  do  %% Line 2227
					      case <> of
						<>
						    when call 'erlang':'>='
							  (X,
							   0) ->
						    'ok'
						%% Line 2228
						<> when 'true' ->
						    apply 'dbg'/3
							(9, [78|[101|[103|[97|[116|[105|[118|[101|[32|[99|[111|[117|[110|[116|[101|[114|[32|[118|[97|[108|[117|[101|[32|[126|[112|[32|[126|[112|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2229
																															  [X|[_X_T|[_X_T0|[]]]])
					      end
					      %% Line 2231
					      X
	  %% Line 2232
	  <_cor11,_cor12> when 'true' ->
	      %% Line 2233
	      'undefined'
	end
'do_analyse'/2 =
    %% Line 2243
    fun (_cor1,_cor0) ->
	do  %% Line 2244
	    apply 'dbg'/3
		(5, [100|[111|[95|[97|[110|[97|[108|[121|[115|[101|[95|[49|[40|[126|[112|[44|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]], [_cor1|[_cor0|[]]])
	    let <_cor6> =
		%% Line 2246
		try
		    apply 'do_analyse_1'/2
			(_cor1, _cor0)
		of <_cor2> ->
		    _cor2
		catch <_cor5,_cor4,_cor3> ->
		    case <_cor5,_cor4,_cor3> of
		      %% Line 2248
		      <'throw',Error,_cor10> when 'true' ->
			  Error
		      ( <_cor5,_cor4,_cor3> when 'true' ->
			    primop 'raise'
				(_cor3, _cor4)
			-| ['compiler_generated'] )
		    end
	    in  do  %% Line 2250
		    apply 'dbg'/3
			(5, [100|[111|[95|[97|[110|[97|[108|[121|[115|[101|[95|[49|[40|[95|[44|[32|[95|[41|[32|[45|[62|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], [_cor6|[]])
		    _cor6
'do_analyse_1'/2 =
    %% Line 2253
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Table,_X_Analyse = %% Line 2254
			      {'analyse',GroupLeader,%% Line 2255
						     Io,_cor82,%% Line 2256
							       Cols0,%% Line 2257
								     PrintCallers,%% Line 2258
										  Sort,%% Line 2259
										       PrintTotals,%% Line 2260
												   PrintDetails}> when 'true' ->
	      let <_cor4> =
		  %% Line 2263
		  case <> of
		    <>
			when call 'erlang':'<'
			      (Cols0,
			       23) ->
			23
		    <> when 'true' ->
			Cols0
		  end
	      in  let <_cor6> =
		      %% Line 2264
		      call 'erlang':'-'
			  (_cor4, 11)
		  in  let <Width> =
			  %% Line 2264
			  call 'erlang':'div'
			      (_cor6, 12)
		      in  let <_cor9> =
			      %% Line 2265
			      call 'erlang':'-'
				  (_cor4, 11)
			  in  let <_cor8> =
				  %% Line 2265
				  call 'erlang':'*'
				      (5, Width)
			      in  let <FnameWidth> =
				      %% Line 2265
				      call 'erlang':'-'
					  (_cor9, _cor8)
				  in  let <_cor11> =
					  %% Line 2266
					  call 'erlang':'*'
					      (2, Width)
				      in  let <_cor12> =
					      %% Line 2266
					      call 'erlang':'*'
						  (2, Width)
					  in  let <Dest> =
						  %% Line 2266
						  {Io,[FnameWidth|[Width|[_cor11|[_cor12|[]]]]]}
					      in  let <_cor15> =
						      %% Line 2267
						      case Sort of
							%% Line 2268
							<'own'> when 'true' ->
							    %% Line 2269
							    4
							%% Line 2270
							<'acc'> when 'true' ->
							    %% Line 2271
							    5
							( <_cor14> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor14})
							  -| ['compiler_generated'] )
						      end
						  in  let <_X_Erase> =
							  %% Line 2276
							  call 'erlang':'erase'
							      ()
						      in  do  %% Line 2277
							      apply 'dbg'/3
								  (2, [101|[114|[97|[115|[101|[40|[41|[32|[45|[62|[32|[126|[112|[126|[110]]]]]]]]]]]]]]], [_X_Erase|[]])
							      do  %% Line 2284
								  call 'io':'format'
								      (GroupLeader, [80|[114|[111|[99|[101|[115|[115|[105|[110|[103|[32|[100|[97|[116|[97|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]], [])
								  let <PidTable> =
								      %% Line 2285
								      call 'ets':'new'
									  ('fprof', ['set'|['private'|[{'keypos',2}]]])
								  in  let <ProcTable> =
									  %% Line 2286
									  call 'ets':'new'
									      ('fprof', ['set'|['private'|[{'keypos',2}]]])
								      in  let <_cor30> =
									      %% Line 2289
									      ( fun (_cor28) ->
										    case _cor28 of
										      <Clocks = {'clocks',{Pid,Caller,Func},_cor83,_cor84,_cor85}> when 'true' ->
											  do  %% Line 2290
											      case PrintDetails of
												%% Line 2291
												<'true'> when 'true' ->
												    do  %% Line 2292
													apply 'funcstat_pd'/4
													    (Pid, Caller, Func, Clocks)
													let <_cor22> =
													    %% Line 2293
													    call 'erlang':'setelement'
														(2, Clocks, Pid)
													in  %% Line 2293
													    apply 'clocks_add'/2
														(PidTable, _cor22)
												%% Line 2294
												<'false'> when 'true' ->
												    'ok'
												( <_cor23> when 'true' ->
												      primop 'match_fail'
													  ({'case_clause',_cor23})
												  -| ['compiler_generated'] )
											      end
											      let <_cor26> =
												  %% Line 2297
												  call 'erlang':'setelement'
												      (2, Clocks, 'totals')
											      in  do  %% Line 2297
												      apply 'clocks_add'/2
													  (PidTable, _cor26)
												      %% Line 2298
												      case PrintTotals of
													%% Line 2299
													<'true'> when 'true' ->
													    %% Line 2300
													    apply 'funcstat_pd'/4
														('totals', Caller, Func, Clocks)
													%% Line 2301
													<'false'> when 'true' ->
													    %% Line 2302
													    'ok'
													( <_cor27> when 'true' ->
													      primop 'match_fail'
														  ({'case_clause',_cor27})
													  -| ['compiler_generated'] )
												      end
										      %% Line 2304
										      <Proc = {'proc',_cor96,_cor97,_cor98,_cor99,_cor100}> when 'true' ->
											  %% Line 2305
											  call 'ets':'insert'
											      (ProcTable, Proc)
										      %% Line 2306
										      <Misc = {'misc',_cor101,_cor102}> when 'true' ->
											  %% Line 2307
											  call 'ets':'insert'
											      (ProcTable, Misc)
										      ( <_cor29> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor29})
											      -| [{'function_name',{'-do_analyse_1/2-fun-0-',1}}] )
											-| ['compiler_generated'] )
										    end
										-| [{'id',{0,0,'-do_analyse_1/2-fun-0-'}}] )
									  in  do  %% Line 2287
										  apply 'ets_select_foreach'/4
										      (%% Line 2288
										       Table, %% Line 2288
											      [{'_',[],['$_']}], %% Line 2288
														 100, _cor30)
										  let <_cor31> =
										      %% Line 2309
										      call 'erlang':'get'
											  ()
										  in  do  %% Line 2309
											  apply 'dbg'/3
											      (3, [103|[101|[116|[40|[41|[32|[45|[62|[32|[126|[112|[126|[110]]]]]]]]]]]]], [_cor31|[]])
											  let <_cor33> =
											      %% Line 2311
											      call 'ets':'lookup'
												  (ProcTable, 'first_ts')
											  in  let <_cor32> =
												  %% Line 2312
												  call 'ets':'lookup'
												      (ProcTable, 'last_ts_n')
											      in  %% Line 2311
												  case <_cor33,_cor32> of
												    %% Line 2313
												    <[{'misc',_cor103,FTS}|[]],[{'misc',_cor104,{LTS,TC}}|[]]>
													when let <_cor34> =
													      %% Line 2314
													      call 'erlang':'=/='
														  (FTS, 'undefined')
													  in  let <_cor35> =
														  %% Line 2314
														  call 'erlang':'=/='
														      (LTS, 'undefined')
													      in  %% Line 2314
														  call 'erlang':'and'
														      (_cor34, _cor35) ->
													let <FirstTS,LastTS,_X_TraceCnt> =
													    %% Line 2315
													    <FTS,LTS,TC>
													in  %% Line 2320
													    case call 'ets':'lookup'
														     (PidTable, 'totals') of
													      %% Line 2321
													      <[T0|[]]> when 'true' ->
														  do  %% Line 2322
														      call 'ets':'delete'
															  (PidTable, 'totals')
														      let <_rec6> =
															  %% Line 2327
															  apply 'ts_sub'/2
															      (LastTS, FirstTS)
														      in  %% Line 2327
															  case T0 of
															    <{'clocks',_cor107,_cor108,_cor109,_cor110}> when 'true' ->
																let <_cor45> =
																    call 'erlang':'setelement'
																	(5, T0, _rec6)
																in  do  %% Line 2328
																	apply 'dbg'/3
																	    (3, [84|[111|[116|[97|[108|[115|[48|[32|[61|[32|[32|[126|[112|[126|[110]]]]]]]]]]]]]]], [T0|[]])
																	let <_cor47> =
																	    %% Line 2329
																	    call 'ets':'tab2list'
																		(PidTable)
																	in  do  %% Line 2329
																		apply 'dbg'/3
																		    (3, [80|[105|[100|[84|[97|[98|[108|[101|[32|[61|[32|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]], [_cor47|[]])
																		let <_cor48> =
																		    %% Line 2330
																		    call 'ets':'tab2list'
																			(ProcTable)
																		in  do  %% Line 2330
																			apply 'dbg'/3
																			    (3, [80|[114|[111|[99|[84|[97|[98|[108|[101|[32|[61|[32|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]], [_cor48|[]])
																			do  %% Line 2331
																			    apply 'dbg'/3
																				(4, [84|[111|[116|[97|[108|[115|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]], [_cor45|[]])
																			    let <_cor54> =
																				%% Line 2336
																				( fun (_cor52) ->
																				      case _cor52 of
																					<{{Pid,_X_Func},Funcstat}> when 'true' ->
																					    let <_cor51> =
																						%% Line 2337
																						case call 'erlang':'get'
																							 (Pid) of
																						  %% Line 2338
																						  <'undefined'> when 'true' ->
																						      []
																						  %% Line 2339
																						  <Other> when 'true' ->
																						      Other
																						end
																					    in  %% Line 2337
																						call 'erlang':'put'
																						    (Pid, [Funcstat|_cor51])
																					( <_cor53> when 'true' ->
																					      ( primop 'match_fail'
																						    ({'function_clause',_cor53})
																						-| [{'function_name',{'-do_analyse_1/2-fun-1-',1}}] )
																					  -| ['compiler_generated'] )
																				      end
																				  -| [{'id',{0,0,'-do_analyse_1/2-fun-1-'}}] )
																			    in  let <_cor49> =
																				    %% Line 2342
																				    call 'erlang':'erase'
																					()
																				in  do  %% Line 2335
																					call 'lists':'foreach'
																					    (_cor54, _cor49)
																					let <_cor55> =
																					    %% Line 2343
																					    call 'erlang':'get'
																						()
																					in  do  %% Line 2343
																						apply 'dbg'/3
																						    (4, [103|[101|[116|[40|[41|[32|[45|[62|[32|[126|[112|[126|[110]]]]]]]]]]]]], [_cor55|[]])
																						let <_cor56> =
																						    %% Line 2350
																						    call 'ets':'select'
																							(PidTable, %% Line 2351
																								   [{'_',[],[[{'element',4,'$_'}|'$_']]}])
																						in  let <_cor57> =
																							%% Line 2349
																							call 'lists':'sort'
																							    (_cor56)
																						    in  let <PidSorted> =
																							    %% Line 2348
																							    apply 'postsort_r'/1
																								(_cor57)
																							in  do  %% Line 2352
																								apply 'dbg'/3
																								    (4, [80|[105|[100|[83|[111|[114|[116|[101|[100|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]], [PidSorted|[]])
																								do  %% Line 2356
																								    call 'io':'format'
																									(GroupLeader, [67|[114|[101|[97|[116|[105|[110|[103|[32|[111|[117|[116|[112|[117|[116|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]], [])
																								    do  %% Line 2357
																									apply 'println'/5
																									    (Dest, [37|[37|[32]]], [], [65|[110|[97|[108|[121|[115|[105|[115|[32|[114|[101|[115|[117|[108|[116|[115|[58]]]]]]]]]]]]]]]]], [])
																									do  %% Line 2358
																									    apply 'println'/5
																										(Dest, [123|[32|[32]]], 'analysis_options', [44], [])
																									    do  %% Line 2359
																										apply 'println'/5
																										    (Dest, [32|[91|[123]]], {'callers',PrintCallers}, [125|[44]], [])
																										do  %% Line 2360
																										    apply 'println'/5
																											(Dest, [32|[32|[123]]], {'sort',Sort}, [125|[44]], [])
																										    do  %% Line 2361
																											apply 'println'/5
																											    (Dest, [32|[32|[123]]], {'totals',PrintTotals}, [125|[44]], [])
																											do  %% Line 2362
																											    apply 'println'/5
																												(Dest, [32|[32|[123]]], {'details',PrintDetails}, [125|[93|[125|[46]]]], [])
																											    do  %% Line 2363
																												apply 'println'/1
																												    (Dest)
																												let <_cor79> =
																												    %% Line 2365
																												    ( fun (_cor77) ->
																													  case _cor77 of
																													    <{Clocks = {'clocks',_cor112,_cor113,_cor114,_cor115},ProcOrPid,FuncstatList}> when 'true' ->
																														do  %% Line 2366
																														    apply 'println'/5
																															(Dest, [37|[32|[32]]], 'head', [], [])
																														    do  %% Line 2367
																															case ProcOrPid of
																															  %% Line 2368
																															  <{'proc',_cor116,_cor117,_cor118,_cor119,_cor120}> when 'true' ->
																															      do  %% Line 2369
																																  apply 'println'/5
																																      (Dest, [91|[123|[32]]], Clocks, [125|[44]], [37|[37]])
																																  %% Line 2370
																																  apply 'print_proc'/2
																																      (Dest, ProcOrPid)
																															  %% Line 2371
																															  <'totals'> when 'true' ->
																															      %% Line 2372
																															      apply 'println'/5
																																  (Dest, [91|[123|[32]]], Clocks, [125|[93|[46]]], [37|[37|[37]]])
																															  %% Line 2373
																															  <_cor121>
																															      when call 'erlang':'is_pid'
																																    (ProcOrPid) ->
																															      %% Line 2374
																															      apply 'println'/5
																																  (Dest, [91|[123|[32]]], Clocks, [125|[93|[46]]], [37|[37]])
																															  ( <_cor71> when 'true' ->
																																primop 'match_fail'
																																    ({'case_clause',_cor71})
																															    -| ['compiler_generated'] )
																															end
																															do  %% Line 2376
																															    apply 'println'/1
																																(Dest)
																															    let <_cor76> =
																																%% Line 2378
																																( fun (_cor74) ->
																																      case _cor74 of
																																	<{'funcstat',CallersSum,_cor122,%% Line 2380
																																					Callers,%% Line 2381
																																						Called}> when 'true' ->
																																	    do  %% Line 2382
																																		case <PrintCallers,Callers> of
																																		  %% Line 2385
																																		  <'true',_cor123> when 'true' ->
																																		      do  %% Line 2386
																																			  apply 'print_callers'/2
																																			      (Dest, Callers)
																																			  do  %% Line 2387
																																			      apply 'println'/5
																																				  (Dest, [32|[123|[32]]], CallersSum, [125|[44]], [37])
																																			      do  %% Line 2388
																																				  apply 'print_called'/2
																																				      (Dest, Called)
																																				  %% Line 2389
																																				  apply 'println'/1
																																				      (Dest)
																																		  %% Line 2390
																																		  <'false',_cor124> when 'true' ->
																																		      %% Line 2391
																																		      apply 'println'/5
																																			  (Dest, [123|[32|[32]]], CallersSum, [125|[46]], [])
																																		  ( <_fol247,_fol248> when 'true' ->
																																			let <_cor73> = {_fol247,_fol248}
																																			in  primop 'match_fail'
																																				({'case_clause',_cor73})
																																		    -| ['compiler_generated'] )
																																		end
																																		%% Line 2393
																																		'ok'
																																	( <_cor75> when 'true' ->
																																	      ( primop 'match_fail'
																																		    ({'function_clause',_cor75})
																																		-| [{'function_name',{'-do_analyse_1/2-fun-2-',1}}] )
																																	  -| ['compiler_generated'] )
																																      end
																																  -| [{'id',{0,0,'-do_analyse_1/2-fun-2-'}}] )
																															    in  let <_cor72> =
																																    %% Line 2397
																																    apply 'funcstat_sort_r'/2
																																	(FuncstatList, _cor15)
																																in  do  %% Line 2377
																																	call 'lists':'foreach'
																																	    (_cor76, _cor72)
																																	%% Line 2398
																																	apply 'println'/1
																																	    (Dest)
																													    ( <_cor78> when 'true' ->
																														  ( primop 'match_fail'
																															({'function_clause',_cor78})
																														    -| [{'function_name',{'-do_analyse_1/2-fun-3-',1}}] )
																													      -| ['compiler_generated'] )
																													  end
																												      -| [{'id',{0,0,'-do_analyse_1/2-fun-3-'}}] )
																												in  let <_cor69> =
																													%% Line 2402
																													( fun (_cor67) ->
																													      case _cor67 of
																														<Clocks = {'clocks',Pid,_cor125,_cor126,_cor127}> when 'true' ->
																														    let <_cor62> =
																															%% Line 2403
																															case call 'ets':'lookup'
																																 (ProcTable, Pid) of
																															  %% Line 2404
																															  <[]> when 'true' ->
																															      Pid
																															  %% Line 2405
																															  <[ProcX|[]]> when 'true' ->
																															      ProcX
																															  ( <_cor61> when 'true' ->
																																primop 'match_fail'
																																    ({'case_clause',_cor61})
																															    -| ['compiler_generated'] )
																															end
																														    in  let <_cor65> =
																															    %% Line 2408
																															    case call 'erlang':'get'
																																     (Pid) of
																															      %% Line 2409
																															      <'undefined'> when 'true' ->
																																  %% Line 2410
																																  []
																															      %% Line 2411
																															      <FL> when 'true' ->
																																  %% Line 2412
																																  FL
																															    end
																															in  %% Line 2414
																															    {Clocks,_cor62,_cor65}
																														( <_cor68> when 'true' ->
																														      ( primop 'match_fail'
																															    ({'function_clause',_cor68})
																															-| [{'function_name',{'-do_analyse_1/2-fun-4-',1}}] )
																														  -| ['compiler_generated'] )
																													      end
																													  -| [{'id',{0,0,'-do_analyse_1/2-fun-4-'}}] )
																												    in  let <_cor60> =
																													    %% Line 2416
																													    case PrintDetails of
																													      %% Line 2417
																													      <'true'> when 'true' ->
																														  %% Line 2418
																														  [_cor45|PidSorted]
																													      %% Line 2419
																													      <'false'> when 'true' ->
																														  %% Line 2420
																														  [_cor45|[]]
																													      ( <_cor59> when 'true' ->
																														    primop 'match_fail'
																															({'case_clause',_cor59})
																														-| ['compiler_generated'] )
																													    end
																													in  let <_cor70> =
																														%% Line 2401
																														call 'lists':'map'
																														    (_cor69, _cor60)
																													    in  do  %% Line 2364
																														    call 'lists':'foreach'
																															(_cor79, _cor70)
																														    do  %% Line 2425
																															call 'ets':'delete'
																															    (PidTable)
																															do  %% Line 2426
																															    call 'ets':'delete'
																																(ProcTable)
																															    do  %% Line 2427
																																call 'io':'format'
																																    (GroupLeader, [68|[111|[110|[101|[33|[126|[110]]]]]]], [])
																																%% Line 2428
																																'ok'
															    ( <_cor111> when 'true' ->
																  ( call ( 'erlang'
																	   -| ['compiler_generated'] ):( 'error'
																					 -| ['compiler_generated'] )
																	(( {'badrecord','clocks'}
																	   -| ['compiler_generated'] ))
																    -| ['compiler_generated'] )
															      -| ['compiler_generated'] )
															  end
													      %% Line 2324
													      <_cor106> when 'true' ->
														  %% Line 2325
														  call 'erlang':'throw'
														      ({'error','empty_trace'})
													    end
												    %% Line 2316
												    <_fol249,_fol250> when 'true' ->
													%% Line 2317
													call 'erlang':'throw'
													    ({'error','empty_trace'})
												  end
	  ( <_cor81,_cor80> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor81,_cor80})
		  -| [{'function_name',{'do_analyse_1',2}}] )
	    -| ['compiler_generated'] )
	end
'print_proc'/2 =
    %% Line 2438
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'undefined',_cor10},_cor11> when 'true' ->
	      %% Line 2439
	      'ok'
	  %% Line 2440
	  <Dest,%% Line 2441
		{'proc',_X_Pid,%% Line 2442
			       Parent,%% Line 2443
				      SpawnedAs,%% Line 2444
						InitLog,_cor12}> when 'true' ->
	      %% Line 2445
	      case <Parent,SpawnedAs,InitLog> of
		%% Line 2446
		<'undefined','undefined',[]> when 'true' ->
		    %% Line 2447
		    apply 'println'/5
			(Dest, [32|[32|[32]]], [], [93|[46]], [])
		%% Line 2448
		<_cor13,'undefined',[]> when 'true' ->
		    let <_cor2> =
			%% Line 2449
			apply 'parsify'/1
			    (Parent)
		    in  %% Line 2449
			apply 'println'/5
			    (Dest, [32|[123|[32]]], {'spawned_by',_cor2}, [125|[93|[46]]], [])
		%% Line 2450
		<_fol251,_fol252,_fol253> when 'true' ->
		    let <_cor3> =
			%% Line 2451
			apply 'parsify'/1
			    (Parent)
		    in  do  %% Line 2451
			    apply 'println'/5
				(Dest, [32|[123|[32]]], {'spawned_by',_cor3}, [125|[44]], [])
			    %% Line 2452
			    case <SpawnedAs,InitLog> of
			      %% Line 2453
			      <_cor15,[]> when 'true' ->
				  %% Line 2454
				  apply 'println'/5
				      (Dest, [32|[123|[32]]], %% Line 2455
							      {'spawned_as',SpawnedAs}, %% Line 2456
											[125|[93|[46]]], %% Line 2456
													 [])
			      %% Line 2457
			      <'undefined',_cor16> when 'true' ->
				  let <_cor4> =
				      %% Line 2459
				      call 'lists':'reverse'
					  (InitLog)
				  in  %% Line 2458
				      apply 'println'/5
					  (Dest, [32|[123|[32]]], %% Line 2459
								  {'initial_calls',_cor4}, %% Line 2460
											   [125|[93|[46]]], %% Line 2460
													    [])
			      %% Line 2461
			      <_fol257,_fol258> when 'true' ->
				  do  %% Line 2462
				      apply 'println'/5
					  (Dest, [32|[123|[32]]], %% Line 2463
								  {'spawned_as',SpawnedAs}, %% Line 2464
											    [125|[44]], %% Line 2464
													[])
				      let <_cor5> =
					  %% Line 2466
					  call 'lists':'reverse'
					      (InitLog)
				      in  %% Line 2465
					  apply 'println'/5
					      (Dest, [32|[123|[32]]], %% Line 2466
								      {'initial_calls',_cor5}, %% Line 2467
											       [125|[93|[46]]], %% Line 2467
														[])
			    end
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'print_proc',2}}] )
	    -| ['compiler_generated'] )
	end
'print_callers'/2 =
    %% Line 2473
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dest,[]> when 'true' ->
	      %% Line 2474
	      apply 'println'/5
		  (Dest, [123|[91]], [], [93|[44]], [])
	  %% Line 2475
	  <Dest,[Clocks|[]]> when 'true' ->
	      %% Line 2476
	      apply 'println'/5
		  (Dest, [123|[91|[123]]], Clocks, [125|[93|[44]]], [])
	  %% Line 2477
	  <Dest,[Clocks|Tail]> when 'true' ->
	      do  %% Line 2478
		  apply 'println'/5
		      (Dest, [123|[91|[123]]], Clocks, [125|[44]], [])
		  %% Line 2479
		  apply 'print_callers_1'/2
		      (Dest, Tail)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'print_callers',2}}] )
	    -| ['compiler_generated'] )
	end
'print_callers_1'/2 =
    %% Line 2481
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dest,[Clocks|[]]> when 'true' ->
	      %% Line 2482
	      apply 'println'/5
		  (Dest, [32|[32|[123]]], Clocks, [125|[93|[44]]], [])
	  %% Line 2483
	  <Dest,[Clocks|Tail]> when 'true' ->
	      do  %% Line 2484
		  apply 'println'/5
		      (Dest, [32|[32|[123]]], Clocks, [125|[44]], [])
		  %% Line 2485
		  apply 'print_callers_1'/2
		      (Dest, Tail)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'print_callers_1',2}}] )
	    -| ['compiler_generated'] )
	end
'print_func'/2 =
    %% Line 2489
    fun (_cor1,_cor0) ->
	%% Line 2490
	apply 'println'/5
	    (_cor1, [32|[123|[32]]], _cor0, [125|[44]], [37])
'print_called'/2 =
    %% Line 2494
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dest,[]> when 'true' ->
	      %% Line 2495
	      apply 'println'/5
		  (Dest, [32|[91]], [], [93|[125|[46]]], [])
	  %% Line 2496
	  <Dest,[Clocks|[]]> when 'true' ->
	      %% Line 2497
	      apply 'println'/5
		  (Dest, [32|[91|[123]]], Clocks, [125|[93|[125|[46]]]], [])
	  %% Line 2498
	  <Dest,[Clocks|Tail]> when 'true' ->
	      do  %% Line 2499
		  apply 'println'/5
		      (Dest, [32|[91|[123]]], Clocks, [125|[44]], [])
		  %% Line 2500
		  apply 'print_called_1'/2
		      (Dest, Tail)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'print_called',2}}] )
	    -| ['compiler_generated'] )
	end
'print_called_1'/2 =
    %% Line 2502
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dest,[Clocks|[]]> when 'true' ->
	      %% Line 2503
	      apply 'println'/5
		  (Dest, [32|[32|[123]]], Clocks, [125|[93|[125|[46]]]], [])
	  %% Line 2504
	  <Dest,[Clocks|Tail]> when 'true' ->
	      do  %% Line 2505
		  apply 'println'/5
		      (Dest, [32|[32|[123]]], Clocks, [125|[44]], [])
		  %% Line 2506
		  apply 'print_called_1'/2
		      (Dest, Tail)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'print_called_1',2}}] )
	    -| ['compiler_generated'] )
	end
'println'/1 =
    %% Line 2510
    fun (_cor0) ->
	case _cor0 of
	  <{'undefined',_cor2}> when 'true' ->
	      %% Line 2511
	      'ok'
	  %% Line 2512
	  <{Io,_cor3}> when 'true' ->
	      %% Line 2513
	      call 'io':'nl'
		  (Io)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'println',1}}] )
	    -| ['compiler_generated'] )
	end
'println'/5 =
    %% Line 2515
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'undefined',_cor59},_X_Head,_cor60,%% Line 2517
					       _X_Tail,%% Line 2517
						       _X_Comment> when 'true' ->
	      %% Line 2518
	      'ok'
	  %% Line 2519
	  <{Io,[W1|[W2|[W3|[W4|[]]]]]},Head,%% Line 2520
					    {'clocks',Pid,Cnt,Own,_cor61},%% Line 2521
									  Tail,%% Line 2521
									       Comment>
	      when %% Line 2521
		call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor5> =
		  %% Line 2523
		  apply 'pad'/3
		      (Head, 32, 3)
	      in  let <_cor6> =
		      %% Line 2524
		      apply 'parsify'/1
			  (Pid)
		  in  let <_cor7> =
			  %% Line 2524
			  apply 'flat_format'/3
			      (_cor6, 44, W1)
		      in  let <_cor8> =
			      %% Line 2525
			      apply 'flat_format'/4
				  (Cnt, 44, W2, 'right')
			  in  let <_cor9> =
				  %% Line 2526
				  apply 'flat_format'/4
				      ('undefined', 44, W3, 'right')
			      in  let <_cor11> =
				      %% Line 2527
				      call 'erlang':'*'
					  (Own, 1.00000000000000002082e-03)
				  in  let <_cor10> =
					  %% Line 2527
					  call 'erlang':'-'
					      (W4, 1)
				      in  let <_cor12> =
					      %% Line 2527
					      apply 'flat_format'/4
						  (_cor11, [], _cor10, 'right')
					  in  let <_cor13> =
						  %% Line 2528
						  apply 'pad'/3
						      (Tail, 32, 4)
					      in  let <_cor14> =
						      %% Line 2529
						      apply 'pad'/3
							  (32, Comment, 4)
						  in  let <_cor15> =
							  %% Line 2530
							  call 'io_lib':'nl'
							      ()
						      in  %% Line 2522
							  call 'io':'put_chars'
							      (Io, %% Line 2523
								   [_cor5|%% Line 2524
									  [_cor7|%% Line 2525
										 [_cor8|%% Line 2526
											[_cor9|%% Line 2527
											       [_cor12|%% Line 2528
												       [_cor13|%% Line 2529
													       [_cor14|%% Line 2530
														       [_cor15|[]]]]]]]]])
	  %% Line 2531
	  <{Io,[W1|[W2|[W3|[W4|[]]]]]},Head,%% Line 2532
					    {'clocks',Func = {_X_M,_X_F,_X_A},Cnt,Own,Acc},%% Line 2533
											   Tail,%% Line 2533
												Comment> when 'true' ->
	      let <_cor16> =
		  %% Line 2535
		  apply 'pad'/3
		      (Head, 32, 3)
	      in  let <_cor17> =
		      %% Line 2536
		      apply 'flat_format'/3
			  (Func, 44, W1)
		  in  let <_cor18> =
			  %% Line 2537
			  apply 'flat_format'/4
			      (Cnt, 44, W2, 'right')
		      in  let <_cor19> =
			      %% Line 2538
			      call 'erlang':'*'
				  (Acc, 1.00000000000000002082e-03)
			  in  let <_cor20> =
				  %% Line 2538
				  apply 'flat_format'/4
				      (_cor19, 44, W3, 'right')
			      in  let <_cor22> =
				      %% Line 2539
				      call 'erlang':'*'
					  (Own, 1.00000000000000002082e-03)
				  in  let <_cor21> =
					  %% Line 2539
					  call 'erlang':'-'
					      (W4, 1)
				      in  let <_cor23> =
					      %% Line 2539
					      apply 'flat_format'/4
						  (_cor22, [], _cor21, 'right')
					  in  let <_cor24> =
						  %% Line 2540
						  apply 'pad'/3
						      (Tail, 32, 4)
					      in  let <_cor25> =
						      %% Line 2541
						      apply 'pad'/3
							  (32, Comment, 4)
						  in  let <_cor26> =
							  %% Line 2542
							  call 'io_lib':'nl'
							      ()
						      in  %% Line 2534
							  call 'io':'put_chars'
							      (Io, %% Line 2535
								   [_cor16|%% Line 2536
									   [_cor17|%% Line 2537
										   [_cor18|%% Line 2538
											   [_cor20|%% Line 2539
												   [_cor23|%% Line 2540
													   [_cor24|%% Line 2541
														   [_cor25|%% Line 2542
															   [_cor26|[]]]]]]]]])
	  %% Line 2543
	  <{Io,[W1|[W2|[W3|[W4|[]]]]]},Head,%% Line 2544
					    {'clocks',Id,Cnt,Own,Acc},%% Line 2545
								      Tail,%% Line 2545
									   Comment> when 'true' ->
	      let <_cor27> =
		  %% Line 2547
		  apply 'pad'/3
		      (Head, 32, 3)
	      in  let <_cor28> =
		      %% Line 2548
		      apply 'parsify'/1
			  (Id)
		  in  let <_cor29> =
			  %% Line 2548
			  apply 'flat_format'/3
			      (_cor28, 44, W1)
		      in  let <_cor30> =
			      %% Line 2549
			      apply 'flat_format'/4
				  (Cnt, 44, W2, 'right')
			  in  let <_cor31> =
				  %% Line 2550
				  call 'erlang':'*'
				      (Acc, 1.00000000000000002082e-03)
			      in  let <_cor32> =
				      %% Line 2550
				      apply 'flat_format'/4
					  (_cor31, 44, W3, 'right')
				  in  let <_cor34> =
					  %% Line 2551
					  call 'erlang':'*'
					      (Own, 1.00000000000000002082e-03)
				      in  let <_cor33> =
					      %% Line 2551
					      call 'erlang':'-'
						  (W4, 1)
					  in  let <_cor35> =
						  %% Line 2551
						  apply 'flat_format'/4
						      (_cor34, [], _cor33, 'right')
					      in  let <_cor36> =
						      %% Line 2552
						      apply 'pad'/3
							  (Tail, 32, 4)
						  in  let <_cor37> =
							  %% Line 2553
							  apply 'pad'/3
							      (32, Comment, 4)
						      in  let <_cor38> =
							      %% Line 2554
							      call 'io_lib':'nl'
								  ()
							  in  %% Line 2546
							      call 'io':'put_chars'
								  (Io, %% Line 2547
								       [_cor27|%% Line 2548
									       [_cor29|%% Line 2549
										       [_cor30|%% Line 2550
											       [_cor32|%% Line 2551
												       [_cor35|%% Line 2552
													       [_cor36|%% Line 2553
														       [_cor37|%% Line 2554
															       [_cor38|[]]]]]]]]])
	  %% Line 2555
	  <{Io,[W1|[W2|[W3|[W4|[]]]]]},Head,%% Line 2556
					    'head',%% Line 2557
						   Tail,%% Line 2557
							Comment> when 'true' ->
	      let <_cor39> =
		  %% Line 2559
		  apply 'pad'/3
		      (Head, 32, 3)
	      in  let <_cor40> =
		      %% Line 2560
		      apply 'pad'/3
			  ([32], 32, W1)
		  in  let <_cor41> =
			  %% Line 2561
			  apply 'pad'/3
			      (32, [32|[67|[78|[84|[32]]]]], W2)
		      in  let <_cor42> =
			      %% Line 2562
			      apply 'pad'/3
				  (32, [32|[65|[67|[67|[32]]]]], W3)
			  in  let <_cor43> =
				  %% Line 2563
				  call 'erlang':'-'
				      (W4, 1)
			      in  let <_cor44> =
				      %% Line 2563
				      apply 'pad'/3
					  (32, [32|[79|[87|[78]]]], _cor43)
				  in  let <_cor45> =
					  %% Line 2564
					  apply 'pad'/3
					      (Tail, 32, 4)
				      in  let <_cor46> =
					      %% Line 2565
					      apply 'pad'/3
						  (32, Comment, 4)
					  in  let <_cor47> =
						  %% Line 2566
						  call 'io_lib':'nl'
						      ()
					      in  %% Line 2558
						  call 'io':'put_chars'
						      (Io, %% Line 2559
							   [_cor39|%% Line 2560
								   [_cor40|%% Line 2561
									   [_cor41|%% Line 2562
										   [_cor42|%% Line 2563
											   [_cor44|%% Line 2564
												   [_cor45|%% Line 2565
													   [_cor46|%% Line 2566
														   [_cor47|[]]]]]]]]])
	  %% Line 2567
	  <{Io,_cor62},Head,%% Line 2568
			    [],%% Line 2569
			       Tail,%% Line 2569
				    Comment> when 'true' ->
	      let <_cor48> =
		  %% Line 2571
		  apply 'pad'/3
		      (Head, 32, 3)
	      in  %% Line 2570
		  call 'io':'format'
		      (Io, [126|[115|[126|[115|[126|[115|[126|[110]]]]]]]], %% Line 2571
									    [_cor48|[Tail|[Comment|[]]]])
	  %% Line 2572
	  <{Io,_cor63},Head,%% Line 2573
			    {Tag,Term},%% Line 2574
				       Tail,%% Line 2574
					    Comment> when 'true' ->
	      let <_cor49> =
		  %% Line 2576
		  apply 'pad'/3
		      (Head, 32, 3)
	      in  let <_cor50> =
		      %% Line 2576
		      apply 'parsify'/1
			  (Tag)
		  in  let <_cor51> =
			  %% Line 2576
			  apply 'parsify'/1
			      (Term)
		      in  %% Line 2575
			  call 'io':'format'
			      (Io, [126|[115|[126|[112|[44|[32|[126|[112|[126|[115|[126|[115|[126|[110]]]]]]]]]]]]]], %% Line 2576
														      [_cor49|[_cor50|[_cor51|[Tail|[Comment|[]]]]]])
	  %% Line 2577
	  <{Io,_cor64},Head,%% Line 2578
			    Term,%% Line 2579
				 Tail,%% Line 2579
				      Comment> when 'true' ->
	      let <_cor52> =
		  %% Line 2581
		  apply 'pad'/3
		      (Head, 32, 3)
	      in  let <_cor53> =
		      %% Line 2581
		      apply 'parsify'/1
			  (Term)
		  in  %% Line 2580
		      call 'io':'format'
			  (Io, [126|[115|[126|[112|[126|[115|[126|[115|[126|[110]]]]]]]]]], %% Line 2581
											    [_cor52|[_cor53|[Tail|[Comment|[]]]]])
	  ( <_cor58,_cor57,_cor56,_cor55,_cor54> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor58,_cor57,_cor56,_cor55,_cor54})
		  -| [{'function_name',{'println',5}}] )
	    -| ['compiler_generated'] )
	end
'funcstat_pd'/4 =
    %% Line 2593
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor19> =
	    %% Line 2595
	    case call 'erlang':'get'
		     ({_cor3,_cor1}) of
	      %% Line 2596
	      <'undefined'> when 'true' ->
		  %% Line 2597
		  case _cor0 of
		    <{'clocks',_cor40,_cor41,_cor42,_cor43}> when 'true' ->
			let <_cor9> =
			    call 'erlang':'setelement'
				(2, _cor0, _cor1)
			in  let <_cor6> =
				%% Line 2599
				call 'erlang':'setelement'
				    (2, _cor0, _cor2)
			    in  {'funcstat',_cor9,%% Line 2598
						  {'clocks',_cor1,0,0,0},%% Line 2599
									 [_cor6|[]],[]}
		    ( <_cor44> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','clocks'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      %% Line 2601
	      <FuncstatCallers = {'funcstat',CallersSum,_cor50,Callers,_cor51}> when 'true' ->
		  let <_rec10> =
		      %% Line 2603
		      apply 'clocks_sum'/3
			  (CallersSum, _cor0, _cor1)
		  in  %% Line 2604
		      case _cor0 of
			<{'clocks',_cor52,_cor53,_cor54,_cor55}> when 'true' ->
			    let <_cor13> =
				call 'erlang':'setelement'
				    (2, _cor0, _cor2)
			    in  let <_rec11> =
				    [_cor13|Callers]
				in  let <_cor16> =
					call 'erlang':'setelement'
					    (4, FuncstatCallers, _rec11)
				    in  call 'erlang':'setelement'
					    (2, _cor16, _rec10)
			( <_cor56> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','clocks'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      ( <_cor18> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor18})
		-| ['compiler_generated'] )
	    end
	in  do  %% Line 2594
		call 'erlang':'put'
		    ({_cor3,_cor1}, _cor19)
		let <_cor35> =
		    %% Line 2607
		    case call 'erlang':'get'
			     ({_cor3,_cor2}) of
		      %% Line 2608
		      <'undefined'> when 'true' ->
			  %% Line 2610
			  case _cor0 of
			    <{'clocks',_cor62,_cor63,_cor64,_cor65}> when 'true' ->
				let <_cor25> =
				    call 'erlang':'setelement'
					(2, _cor0, _cor2)
				in  let <_cor22> =
					%% Line 2611
					call 'erlang':'setelement'
					    (2, _cor0, _cor1)
				    in  {'funcstat',{'clocks',_cor2,0,0,0},_cor25,[],%% Line 2611
										     [_cor22|[]]}
			    ( <_cor66> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','clocks'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      %% Line 2613
		      <FuncstatCalled = {'funcstat',_cor72,CalledSum,_cor73,Called}> when 'true' ->
			  let <_rec16> =
			      %% Line 2615
			      apply 'clocks_sum'/3
				  (CalledSum, _cor0, _cor2)
			  in  %% Line 2616
			      case _cor0 of
				<{'clocks',_cor74,_cor75,_cor76,_cor77}> when 'true' ->
				    let <_cor29> =
					call 'erlang':'setelement'
					    (2, _cor0, _cor1)
				    in  let <_rec17> =
					    [_cor29|Called]
					in  let <_cor32> =
						call 'erlang':'setelement'
						    (5, FuncstatCalled, _rec17)
					    in  call 'erlang':'setelement'
						    (3, _cor32, _rec16)
				( <_cor78> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','clocks'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
		      ( <_cor34> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor34})
			-| ['compiler_generated'] )
		    end
		in  %% Line 2606
		    call 'erlang':'put'
			({_cor3,_cor2}, _cor35)
'funcstat_sort_r'/2 =
    %% Line 2623
    fun (_cor1,_cor0) ->
	%% Line 2624
	apply 'funcstat_sort_r_1'/3
	    (_cor1, _cor0, [])
'funcstat_sort_r_1'/3 =
    %% Line 2626
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor14,R> when 'true' ->
	      let <_cor3> =
		  %% Line 2627
		  call 'lists':'sort'
		      (R)
	      in  %% Line 2627
		  apply 'postsort_r'/1
		      (_cor3)
	  %% Line 2628
	  <[Funcstat = {'funcstat',Clocks = {'clocks',_cor15,_cor16,_cor17,_cor18},_cor19,%% Line 2629
											  Callers,%% Line 2630
												  Called}|%% Line 2631
													  L],%% Line 2632
													     Element,%% Line 2633
														     R> when 'true' ->
	      let <_cor4> =
		  %% Line 2636
		  call 'erlang':'element'
		      (Element, Clocks)
	      in  let <_rec20> =
		      %% Line 2638
		      apply 'clocks_sort_r'/2
			  (Callers, Element)
		  in  let <_rec21> =
			  %% Line 2639
			  apply 'clocks_sort_r'/2
			      (Called, Element)
		      in  let <_cor8> =
			      %% Line 2639
			      call 'erlang':'setelement'
				  (5, Funcstat, _rec21)
			  in  let <_cor10> =
				  %% Line 2638
				  call 'erlang':'setelement'
				      (4, _cor8, _rec20)
			      in  %% Line 2634
				  apply 'funcstat_sort_r_1'/3
				      (L, %% Line 2635
					  Element, %% Line 2636
						   [[_cor4|_cor10]|%% Line 2640
								   R])
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'funcstat_sort_r_1',3}}] )
	    -| ['compiler_generated'] )
	end
'clocks_sort_r'/2 =
    %% Line 2645
    fun (_cor1,_cor0) ->
	%% Line 2646
	apply 'clocks_sort_r_1'/3
	    (_cor1, _cor0, [])
'clocks_sort_r_1'/3 =
    %% Line 2648
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor8,R> when 'true' ->
	      let <_cor3> =
		  %% Line 2649
		  call 'lists':'sort'
		      (R)
	      in  %% Line 2649
		  apply 'postsort_r'/1
		      (_cor3)
	  %% Line 2650
	  <[C = {'clocks',_cor9,_cor10,_cor11,_cor12}|L],E,R> when 'true' ->
	      let <_cor4> =
		  %% Line 2651
		  call 'erlang':'element'
		      (E, C)
	      in  %% Line 2651
		  apply 'clocks_sort_r_1'/3
		      (L, E, [[_cor4|C]|R])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'clocks_sort_r_1',3}}] )
	    -| ['compiler_generated'] )
	end
'postsort_r'/1 =
    %% Line 2655
    fun (_cor0) ->
	%% Line 2656
	apply 'postsort_r'/2
	    (_cor0, [])
'postsort_r'/2 =
    %% Line 2658
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],R> when 'true' ->
	      %% Line 2659
	      R
	  %% Line 2660
	  <[[_cor4|C]|L],R> when 'true' ->
	      %% Line 2661
	      apply 'postsort_r'/2
		  (L, [C|R])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'postsort_r',2}}] )
	    -| ['compiler_generated'] )
	end
'flat_format'/2 =
    %% Line 2670
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,Trailer>
	      when call 'erlang':'is_float'
		    (F) ->
	      let <_cor2> =
		  %% Line 2671
		  call 'io_lib':'format'
		      ([126|[46|[51|[102]]]], [F|[]])
	      in  %% Line 2671
		  call 'lists':'flatten'
		      ([_cor2|[Trailer|[]]])
	  %% Line 2672
	  <W,Trailer> when 'true' ->
	      let <_cor3> =
		  %% Line 2673
		  call 'io_lib':'format'
		      ([126|[112]], [W|[]])
	      in  %% Line 2673
		  call 'lists':'flatten'
		      ([_cor3|[Trailer|[]]])
	end
'flat_format'/3 =
    %% Line 2676
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2677
	apply 'flat_format'/4
	    (_cor2, _cor1, _cor0, 'left')
'flat_format'/4 =
    %% Line 2679
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Term,Trailer,Width,'left'> when 'true' ->
	      %% Line 2680
	      apply 'flat_format'/4
		  (Term, Trailer, Width, {'left',32})
	  %% Line 2681
	  <Term,Trailer,Width,{'left',Filler}> when 'true' ->
	      let <_cor4> =
		  %% Line 2682
		  apply 'flat_format'/2
		      (Term, Trailer)
	      in  %% Line 2682
		  apply 'pad'/3
		      (_cor4, Filler, Width)
	  %% Line 2683
	  <Term,Trailer,Width,'right'> when 'true' ->
	      %% Line 2684
	      apply 'flat_format'/4
		  (Term, Trailer, Width, {'right',32})
	  %% Line 2685
	  <Term,Trailer,Width,{'right',Filler}> when 'true' ->
	      let <_cor5> =
		  %% Line 2686
		  apply 'flat_format'/2
		      (Term, Trailer)
	      in  %% Line 2686
		  apply 'pad'/3
		      (Filler, _cor5, Width)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'flat_format',4}}] )
	    -| ['compiler_generated'] )
	end
'pad'/3 =
    %% Line 2691
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Char,L,Size>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Char)
		    in  let <_cor4> =
			    call 'erlang':'is_list'
				(L)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Size)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <List> =
		  %% Line 2692
		  call 'lists':'flatten'
		      (L)
	      in  let <Length> =
		      %% Line 2693
		      call 'erlang':'length'
			  (List)
		  in  %% Line 2694
		      case <> of
			<>
			    when call 'erlang':'>='
				  (Length,
				   Size) ->
			    %% Line 2695
			    List
			%% Line 2696
			<> when 'true' ->
			    let <_cor9> =
				%% Line 2697
				call 'erlang':'-'
				    (Size, Length)
			    in  let <_cor10> =
				    %% Line 2697
				    call 'lists':'duplicate'
					(_cor9, Char)
				in  %% Line 2697
				    call 'lists':'append'
					(_cor10, List)
		      end
	  %% Line 2700
	  <L,Char,Size>
	      when try
		    let <_cor11> =
			call 'erlang':'is_list'
			    (L)
		    in  let <_cor12> =
			    call 'erlang':'is_integer'
				(Char)
			in  let <_cor13> =
				call 'erlang':'is_integer'
				    (Size)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <List> =
		  %% Line 2701
		  call 'lists':'flatten'
		      (L)
	      in  let <Length> =
		      %% Line 2702
		      call 'erlang':'length'
			  (List)
		  in  %% Line 2703
		      case <> of
			<>
			    when call 'erlang':'>='
				  (Length,
				   Size) ->
			    %% Line 2704
			    List
			%% Line 2705
			<> when 'true' ->
			    let <_cor17> =
				%% Line 2706
				call 'erlang':'-'
				    (Size, Length)
			    in  let <_cor18> =
				    %% Line 2706
				    call 'lists':'duplicate'
					(_cor17, Char)
				in  %% Line 2706
				    call 'lists':'append'
					(List, _cor18)
		      end
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'pad',3}}] )
	    -| ['compiler_generated'] )
	end
'ets_select_foreach'/4 =
    %% Line 2711
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 2712
	    call 'ets':'safe_fixtable'
		(_cor3, 'true')
	    let <_cor4> =
		%% Line 2713
		call 'ets':'select'
		    (_cor3, _cor2, _cor1)
	    in  %% Line 2713
		apply 'ets_select_foreach_1'/2
		    (_cor4, _cor0)
'ets_select_foreach_1'/2 =
    %% Line 2715
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'$end_of_table',_cor5> when 'true' ->
	      %% Line 2716
	      'ok'
	  %% Line 2717
	  <{Matches,Continuation},Fun> when 'true' ->
	      do  %% Line 2718
		  apply 'dbg'/3
		      (2, [77|[97|[116|[99|[104|[101|[115|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]], [Matches|[]])
		  do  %% Line 2719
		      call 'lists':'foreach'
			  (Fun, Matches)
		      let <_cor2> =
			  %% Line 2720
			  call 'ets':'select'
			      (Continuation)
		      in  %% Line 2720
			  apply 'ets_select_foreach_1'/2
			      (_cor2, Fun)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'ets_select_foreach_1',2}}] )
	    -| ['compiler_generated'] )
	end
'parsify'/1 =
    %% Line 2726
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2727
	      []
	  %% Line 2728
	  <[Hd|Tl]> when 'true' ->
	      let <_cor1> =
		  %% Line 2729
		  apply 'parsify'/1
		      (Hd)
	      in  let <_cor2> =
		      %% Line 2729
		      apply 'parsify'/1
			  (Tl)
		  in  %% Line 2729
		      [_cor1|_cor2]
	  %% Line 2730
	  <{A,B}> when 'true' ->
	      let <_cor4> =
		  %% Line 2731
		  apply 'parsify'/1
		      (A)
	      in  let <_cor3> =
		      %% Line 2731
		      apply 'parsify'/1
			  (B)
		  in  %% Line 2731
		      {_cor4,_cor3}
	  %% Line 2732
	  <{A,B,C}> when 'true' ->
	      let <_cor7> =
		  %% Line 2733
		  apply 'parsify'/1
		      (A)
	      in  let <_cor6> =
		      %% Line 2733
		      apply 'parsify'/1
			  (B)
		  in  let <_cor5> =
			  %% Line 2733
			  apply 'parsify'/1
			      (C)
		      in  %% Line 2733
			  {_cor7,_cor6,_cor5}
	  %% Line 2734
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor8> =
		  %% Line 2735
		  call 'erlang':'tuple_to_list'
		      (Tuple)
	      in  let <_cor9> =
		      %% Line 2735
		      apply 'parsify'/1
			  (_cor8)
		  in  %% Line 2735
		      call 'erlang':'list_to_tuple'
			  (_cor9)
	  %% Line 2736
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 2737
	      call 'erlang':'pid_to_list'
		  (Pid)
	  %% Line 2738
	  <Port>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      %% Line 2739
	      call 'erlang':'port_to_list'
		  (Port)
	  %% Line 2740
	  <Ref>
	      when call 'erlang':'is_reference'
		    (_cor0) ->
	      %% Line 2741
	      call 'erlang':'ref_to_list'
		  (Ref)
	  %% Line 2742
	  <Fun>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 2743
	      call 'erlang':'fun_to_list'
		  (Fun)
	  %% Line 2744
	  <Term> when 'true' ->
	      %% Line 2745
	      Term
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('fprof')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('fprof', _cor0)
end