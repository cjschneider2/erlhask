module 'xref_utils' ['application_filename'/1,
		     'application_filename'/2,
		     'call'/2,
		     'closure'/1,
		     'components'/1,
		     'condensation'/1,
		     'fa_to_mfa'/2,
		     'file_info'/1,
		     'filename_to_application'/1,
		     'find_beam'/1,
		     'format_error'/1,
		     'is_abstract_module'/1,
		     'is_builtin'/3,
		     'is_directory'/1,
		     'is_funfun'/3,
		     'is_path'/1,
		     'is_static_function'/2,
		     'is_string'/2,
		     'list_path'/2,
		     'module_filename'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'options'/2,
		     'path'/2,
		     'predefined_functions'/0,
		     'regexpr'/2,
		     'relation_to_graph'/1,
		     'release_directory'/3,
		     'scan_directory'/4,
		     'select_application_directories'/2,
		     'select_last_application_version'/1,
		     'split_filename'/2,
		     'subprocess'/2,
		     'use'/2,
		     'xset'/2]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'xset'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,T>
	      when call 'erlang':'is_list'
		    (L) ->
	      let <_cor2> =
		  %% Line 70
		  call 'lists':'usort'
		      (L)
	      in  %% Line 70
		  call 'sofs':'from_external'
		      (_cor2, T)
	  %% Line 71
	  <S,T> when 'true' ->
	      %% Line 72
	      call 'sofs':'from_external'
		  (S, T)
	end
'is_directory'/1 =
    %% Line 77
    fun (_cor0) ->
	%% Line 78
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 79
	  <{'ok',Info}> when 'true' ->
	      %% Line 80
	      ( case Info of
		  ( <( {'file_info',_cor5,_rec0,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'=:='
			    (_rec0, 'directory')
		    -| ['compiler_generated'] )
		  ( <_cor17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 81
	  <{'error',Error}> when 'true' ->
	      %% Line 82
	      apply 'file_error'/2
		  (_cor0, Error)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'file_info'/1 =
    %% Line 97
    fun (_cor0) ->
	%% Line 98
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 99
	  <{'ok',Info}> when 'true' ->
	      %% Line 100
	      ( case Info of
		  ( <( {'file_info',_cor18,_cor19,_rec1,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    case _rec1 of
			      %% Line 101
			      <Access>
				  when let <_cor3> =
					call 'erlang':'=:='
					    (_rec1, 'read')
				    in  let <_cor4> =
					    %% Line 102
					    call 'erlang':'=:='
						(_rec1, 'read_write')
					in  call 'erlang':'or'
						(_cor3, _cor4) ->
				  %% Line 103
				  'readable'
			      %% Line 104
			      <_cor31> when 'true' ->
				  %% Line 105
				  'unreadable'
			    end
			in  let <_cor11> =
				%% Line 107
				case _cor19 of
				  %% Line 108
				  <'directory'> when 'true' ->
				      'directory'
				  %% Line 109
				  <'regular'> when 'true' ->
				      'file'
				  %% Line 110
				  <_cor45> when 'true' ->
				      'error'
				end
			    in  %% Line 112
				case _cor11 of
				  %% Line 113
				  <'error'> when 'true' ->
				      apply 'error'/1
					  ({'unrecognized_file',_cor0})
				  %% Line 114
				  <_cor46> when 'true' ->
				      {'ok',{_cor0,_cor11,_cor6,_cor21}}
				end
		    -| ['compiler_generated'] )
		  ( <_cor30> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 116
	  <{'error',Error}> when 'true' ->
	      %% Line 117
	      apply 'file_error'/2
		  (_cor0, Error)
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'fa_to_mfa'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	%% Line 122
	apply 'fa_to_mfa'/3
	    (_cor1, _cor0, [])
'fa_to_mfa'/3 =
    %% Line 124
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{F,A}|MFs],Mod,L> when 'true' ->
	      %% Line 125
	      apply 'fa_to_mfa'/3
		  (MFs, Mod, [{Mod,F,A}|L])
	  %% Line 126
	  <[],_X_Mod,L> when 'true' ->
	      %% Line 127
	      call 'lists':'reverse'
		  (L)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'fa_to_mfa',3}}] )
	    -| ['compiler_generated'] )
	end
'module_filename'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 130
	    apply 'to_list'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 130
		call 'code':'objfile_extension'
		    ()
	    in  let <_cor4> =
		    %% Line 130
		    call 'erlang':'++'
			(_cor3, _cor2)
		in  %% Line 130
		    call 'filename':'join'
			(_cor1, _cor4)
'application_filename'/1 =
    %% Line 132
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 133
	    apply 'to_list'/1
		(_cor0)
	in  %% Line 133
	    call 'erlang':'++'
		(_cor1, [46|[97|[112|[112]]]])
'application_filename'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 136
	    apply 'to_list'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 136
		apply 'application_filename'/1
		    (_cor0)
	    in  %% Line 136
		call 'filename':'join'
		    (_cor3, _cor2)
'is_string'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor4> when 'true' ->
	      %% Line 140
	      'false'
	  %% Line 141
	  <Term,C> when 'true' ->
	      %% Line 142
	      apply 'is_string1'/2
		  (Term, C)
	end
'is_string1'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],C>
	      when call 'erlang':'>'
		    (H,
		     C) ->
	      %% Line 145
	      apply 'is_string1'/2
		  (T, C)
	  %% Line 146
	  <[],_cor4> when 'true' ->
	      %% Line 147
	      'true'
	  %% Line 148
	  <_cor5,_cor6> when 'true' ->
	      %% Line 149
	      'false'
	end
'is_path'/1 =
    %% Line 152
    fun (_cor0) ->
	case _cor0 of
	  <[S|Ss]> when 'true' ->
	      %% Line 153
	      case apply 'is_string'/2
		       (S, 31) of
		%% Line 154
		<'true'> when 'true' ->
		    %% Line 155
		    apply 'is_path'/1
			(Ss)
		%% Line 156
		<'false'> when 'true' ->
		    %% Line 157
		    'false'
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 159
	  <[]> when 'true' ->
	      %% Line 160
	      'true'
	  %% Line 161
	  <_cor3> when 'true' ->
	      %% Line 162
	      'false'
	end
'release_directory'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	let <SDir> =
	    %% Line 193
	    apply 'subdir'/3
		(_cor2, [108|[105|[98]]], _cor1)
	in  %% Line 194
	    case call 'file':'list_dir'
		     (SDir) of
	      %% Line 195
	      <{'ok',FileNames}> when 'true' ->
		  let <_cor9> =
		      %% Line 196
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[File|_cor5]> when 'true' ->
					  let <_cor7> =
					      call 'filename':'join'
						  (SDir, File)
					  in  let <_cor8> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [_cor7|_cor8]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(FileNames)
			-| ['list_comprehension'] )
		  in  %% Line 197
		      case apply 'select_application_directories'/2
			       (_cor9, _cor0) of
			%% Line 198
			<{'ok',ApplDirs}> when 'true' ->
			    let <_cor11> =
				%% Line 199
				call 'filename':'basename'
				    (_cor2)
			    in  let <_cor12> =
				    %% Line 199
				    call 'erlang':'list_to_atom'
					(_cor11)
				in  %% Line 199
				    {'ok',_cor12,SDir,ApplDirs}
			%% Line 200
			<Error> when 'true' ->
			    %% Line 201
			    Error
		      end
	      %% Line 203
	      <{'error',Error}> when 'true' ->
		  %% Line 204
		  apply 'file_error'/2
		      (SDir, Error)
	      ( <_cor14> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor14})
		-| ['compiler_generated'] )
	    end
'select_application_directories'/2 =
    %% Line 218
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 219
	    call 'erlang':'=/='
		(_cor0, [])
	in  %% Line 219
	    apply 'select_application_directories'/4
		(_cor1, _cor0, _cor2, [])
'filename_to_application'/1 =
    %% Line 229
    fun (_cor0) ->
	let <Basename> =
	    %% Line 230
	    call 'filename':'basename'
		(_cor0)
	in  let <_cor2> =
		catch
		    %% Line 231
		    apply 'filename2appl'/1
			(Basename)
	    in  %% Line 231
		case _cor2 of
		  %% Line 232
		  <{'EXIT',_cor6}> when 'true' ->
		      let <_cor3> =
			  %% Line 233
			  call 'erlang':'list_to_atom'
			      (Basename)
		      in  %% Line 233
			  {_cor3,[]}
		  %% Line 234
		  <Split> when 'true' ->
		      %% Line 235
		      Split
		end
'select_last_application_version'/1 =
    %% Line 243
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 244
	    call 'sofs':'relation'
		(_cor0)
	in  let <_cor2> =
		%% Line 244
		call 'sofs':'partition'
		    (1, _cor1)
	    in  let <TL> =
		    %% Line 244
		    call 'sofs':'to_external'
			(_cor2)
		in  %% Line 245
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[L|_cor5]> when 'true' ->
					let <_cor7> =
					    call 'lists':'keysort'
						(2, L)
					in  let <_cor8> =
						call 'lists':'last'
						    (_cor7)
					    in  let <_cor9> =
						    apply 'lc$^0'/1
							(_cor5)
						in  ( [_cor8|_cor9]
						      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (TL)
		      -| ['list_comprehension'] )
'scan_directory'/4 =
    %% Line 262
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 264
	case apply 'find_files_dir'/5
		 (_cor3, _cor2, _cor1, _cor0, [[]|{[],[],[]}]) of
	  <[L|{E,J,U}]> when 'true' ->
	      let <_cor9> =
		  %% Line 265
		  call 'lists':'reverse'
		      (L)
	      in  let <_cor8> =
		      %% Line 265
		      call 'lists':'reverse'
			  (E)
		  in  let <_cor7> =
			  %% Line 265
			  call 'lists':'reverse'
			      (J)
		      in  let <_cor6> =
			      %% Line 265
			      call 'lists':'reverse'
				  (U)
			  in  %% Line 265
			      {_cor9,_cor8,_cor7,_cor6}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'split_filename'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    catch
		let <Dir> =
		    %% Line 270
		    call 'filename':'dirname'
			(_cor1)
		in  let <Basename> =
			%% Line 271
			call 'filename':'basename'
			    (_cor1, _cor0)
		    in  let <_cor4> =
			    %% Line 272
			    call 'erlang':'++'
				(Basename, _cor0)
			in  %% Line 272
			    {Dir,_cor4}
	in  %% Line 269
	    case _cor5 of
	      %% Line 274
	      <{'EXIT',_cor9}> when 'true' ->
		  %% Line 275
		  'false'
	      %% Line 276
	      <R> when 'true' ->
		  %% Line 277
		  R
	    end
'list_path'/2 =
    %% Line 294
    fun (_cor1,_cor0) ->
	%% Line 295
	apply 'list_dirs'/5
	    (_cor1, 1, _cor0, [], [])
'list_dirs'/5 =
    %% Line 297
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[D|Ds],I,Exts,CL,E> when 'true' ->
	      let <Fun> =
		  %% Line 298
		  ( fun (_cor12,_cor11) ->
			let <File> =
			    %% Line 299
			    call 'filename':'join'
				(D, _cor12)
			in  %% Line 300
			    case apply 'is_directory'/1
				     (File) of
			      %% Line 301
			      <'false'> when 'true' ->
				  let <Ext> =
				      %% Line 302
				      call 'filename':'extension'
					  (_cor12)
				  in  %% Line 303
				      case call 'lists':'member'
					       (Ext, Exts) of
					%% Line 304
					<'true'> when 'true' ->
					    let <_cor7> =
						%% Line 305
						call 'filename':'basename'
						    (_cor12, Ext)
					    in  let <M> =
						    %% Line 305
						    call 'erlang':'list_to_atom'
							(_cor7)
						in  %% Line 306
						    [{M,{I,D,_cor12}}|_cor11]
					%% Line 307
					<'false'> when 'true' ->
					    _cor11
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor9})
					  -| ['compiler_generated'] )
				      end
			      %% Line 310
			      <'true'> when 'true' ->
				  _cor11
			      %% Line 312
			      <_X_Else> when 'true' ->
				  _cor11
			    end
		    -| [{'id',{0,0,'-list_dirs/5-fun-0-'}}] )
	      in  let <NCL,NE> =
		      %% Line 316
		      case call 'file':'list_dir'
			       (D) of
			%% Line 317
			<{'ok',C0}> when 'true' ->
			    let <_cor16> =
				%% Line 318
				call 'lists':'foldl'
				    (Fun, CL, C0)
			    in  <_cor16,%% Line 318
					E>
			%% Line 319
			<{'error',Error}> when 'true' ->
			    let <_cor17> =
				%% Line 320
				apply 'file_error'/2
				    (D, Error)
			    in  %% Line 320
				<CL,[_cor17|E]>
			( <_cor18> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor18})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor21> =
			  %% Line 322
			  call 'erlang':'+'
			      (I, 1)
		      in  %% Line 322
			  apply 'list_dirs'/5
			      (Ds, _cor21, Exts, NCL, NE)
	  %% Line 323
	  <[],_X_I,_X_Exts,C,E> when 'true' ->
	      %% Line 324
	      {C,E}
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'list_dirs',5}}] )
	    -| ['compiler_generated'] )
	end
'predefined_functions'/0 =
    %% Line 327
    fun () ->
	%% Line 328
	[{'module_info',0}|[{'module_info',1}]]
'is_funfun'/3 =
    %% Line 331
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'erlang','apply',2> when 'true' ->
	      'true'
	  %% Line 332
	  <'erlang','apply',3> when 'true' ->
	      'true'
	  %% Line 333
	  <'erlang','spawn',1> when 'true' ->
	      'true'
	  %% Line 334
	  <'erlang','spawn',2> when 'true' ->
	      'true'
	  %% Line 335
	  <'erlang','spawn',3> when 'true' ->
	      'true'
	  %% Line 336
	  <'erlang','spawn',4> when 'true' ->
	      'true'
	  %% Line 337
	  <'erlang','spawn_link',1> when 'true' ->
	      'true'
	  %% Line 338
	  <'erlang','spawn_link',2> when 'true' ->
	      'true'
	  %% Line 339
	  <'erlang','spawn_link',3> when 'true' ->
	      'true'
	  %% Line 340
	  <'erlang','spawn_link',4> when 'true' ->
	      'true'
	  %% Line 341
	  <'erlang','spawn_opt',2> when 'true' ->
	      'true'
	  %% Line 342
	  <'erlang','spawn_opt',3> when 'true' ->
	      'true'
	  %% Line 343
	  <'erlang','spawn_opt',4> when 'true' ->
	      'true'
	  %% Line 344
	  <'erlang','spawn_opt',5> when 'true' ->
	      'true'
	  %% Line 345
	  <'erts_debug','apply',4> when 'true' ->
	      'true'
	  %% Line 346
	  <_cor6,_cor7,_cor8> when 'true' ->
	      'false'
	end
'is_builtin'/3 =
    %% Line 348
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'erts_debug','apply',4> when 'true' ->
	      'true'
	  %% Line 349
	  <M,F,A> when 'true' ->
	      %% Line 350
	      call 'erlang':'is_builtin'
		  (M, F, A)
	end
'is_abstract_module'/1 =
    %% Line 352
    fun (_cor0) ->
	%% Line 353
	case call 'lists':'keysearch'
		 ('abstract', 1, _cor0) of
	  %% Line 354
	  <{'value',{'abstract','true'}}> when 'true' ->
	      %% Line 355
	      'true'
	  %% Line 356
	  <{'value',{'abstract',Vals}}>
	      when call 'erlang':'is_list'
		    (Vals) ->
	      %% Line 357
	      call 'lists':'member'
		  ('true', Vals)
	  %% Line 358
	  <_cor3> when 'true' ->
	      %% Line 359
	      'false'
	end
'is_static_function'/2 =
    %% Line 364
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'module_info',0> when 'true' ->
	      %% Line 365
	      'true'
	  %% Line 366
	  <'module_info',1> when 'true' ->
	      %% Line 367
	      'true'
	  %% Line 368
	  <'new',_cor4> when 'true' ->
	      %% Line 369
	      'true'
	  %% Line 370
	  <'instance',_cor5> when 'true' ->
	      %% Line 371
	      'true'
	  %% Line 372
	  <_X_F,_X_A> when 'true' ->
	      %% Line 373
	      'false'
	end
'closure'/1 =
    %% Line 378
    fun (_cor0) ->
	%% Line 379
	apply 'relation_to_graph'/1
	    (_cor0)
'components'/1 =
    %% Line 381
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 383
	    call 'digraph_utils':'cyclic_strong_components'
		(_cor0)
	in  %% Line 383
	    call 'sofs':'from_term'
		(_cor1, [['atom']])
'condensation'/1 =
    %% Line 385
    fun (_cor0) ->
	let <G2> =
	    %% Line 386
	    call 'digraph_utils':'condensation'
		(_cor0)
	in  let <R> =
		%% Line 388
		apply 'graph_to_relation'/1
		    (G2)
	    in  %% Line 389
		case call 'digraph':'delete'
			 (G2) of
		  <'true'> when 'true' ->
		      %% Line 390
		      R
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'path'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <G,[E|[]]> when 'true' ->
	      %% Line 393
	      apply 'path'/2
		  (G, [E|[E|[]]])
	  %% Line 394
	  <G,P = [E1|_cor4]> when 'true' ->
	      %% Line 395
	      apply 'path'/3
		  (P, G, [[E1|[]]|[]])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'path',2}}] )
	    -| ['compiler_generated'] )
	end
'use'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 398
	    call 'sofs':'to_external'
		(_cor0)
	in  let <_cor2> =
		%% Line 398
		call 'sofs':'type'
		    (_cor0)
	    in  %% Line 398
		apply 'neighbours'/4
		    (_cor3, _cor1, 'reaching_neighbours', _cor2)
'call'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 401
	    call 'sofs':'to_external'
		(_cor0)
	in  let <_cor2> =
		%% Line 401
		call 'sofs':'type'
		    (_cor0)
	    in  %% Line 401
		apply 'neighbours'/4
		    (_cor3, _cor1, 'reachable_neighbours', _cor2)
'regexpr'/2 =
    %% Line 403
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'regexpr',RExpr},Var> when 'true' ->
	      let <_cor2> =
		  %% Line 404
		  call 'sofs':'to_external'
		      (Var)
	      in  let <Xs> =
		      %% Line 404
		      apply 'match_list'/2
			  (_cor2, RExpr)
		  in  let <_cor4> =
			  %% Line 405
			  call 'sofs':'type'
			      (Var)
		      in  %% Line 405
			  apply 'xset'/2
			      (Xs, _cor4)
	  %% Line 406
	  <{ModExpr,FunExpr,ArityExpr},Var> when 'true' ->
	      let <Type> =
		  %% Line 407
		  call 'sofs':'type'
		      (Var)
	      in  let <_cor12> =
		      %% Line 408
		      case <ModExpr,Type> of
			%% Line 409
			<{'atom',Mod},[{ModType,_cor28}|[]]> when 'true' ->
			    let <_cor6> =
				%% Line 410
				apply 'xset'/2
				    ([Mod|[]], [ModType|[]])
			    in  %% Line 410
				call 'sofs':'restriction'
				    (Var, _cor6)
			%% Line 411
			<{'regexpr',MExpr},[{ModType,_cor29}|[]]> when 'true' ->
			    let <_cor7> =
				%% Line 412
				call 'sofs':'domain'
				    (Var)
			    in  let <_cor8> =
				    %% Line 412
				    call 'sofs':'to_external'
					(_cor7)
				in  let <Mods> =
					%% Line 412
					apply 'match_list'/2
					    (_cor8, MExpr)
				    in  let <_cor10> =
					    %% Line 413
					    apply 'xset'/2
						(Mods, [ModType|[]])
					in  %% Line 413
					    call 'sofs':'restriction'
						(Var, _cor10)
			%% Line 414
			<'variable',_cor30> when 'true' ->
			    %% Line 415
			    Var
			%% Line 416
			<_cor31,_cor32> when 'true' ->
			    %% Line 417
			    Var
		      end
		  in  let <_cor19> =
			  %% Line 419
			  case FunExpr of
			    %% Line 420
			    <{'atom',FunName}> when 'true' ->
				let <V1L> =
				    %% Line 421
				    call 'sofs':'to_external'
					(_cor12)
				in  let <_cor15> =
					%% Line 422
					apply 'match_one'/3
					    (V1L, FunName, 2)
				    in  %% Line 422
					apply 'xset'/2
					    (_cor15, Type)
			    %% Line 423
			    <{'regexpr',FExpr}> when 'true' ->
				let <V1L> =
				    %% Line 424
				    call 'sofs':'to_external'
					(_cor12)
				in  let <_cor17> =
					%% Line 425
					apply 'match_many'/3
					    (V1L, FExpr, 2)
				    in  %% Line 425
					apply 'xset'/2
					    (_cor17, Type)
			    %% Line 426
			    <'variable'> when 'true' ->
				_cor12
			    ( <_cor18> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor18})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 429
			  case ArityExpr of
			    %% Line 430
			    <{'integer',Arity}> when 'true' ->
				let <V2L> =
				    %% Line 431
				    call 'sofs':'to_external'
					(_cor19)
				in  let <_cor22> =
					%% Line 432
					apply 'match_one'/3
					    (V2L, Arity, 3)
				    in  %% Line 432
					apply 'xset'/2
					    (_cor22, Type)
			    %% Line 433
			    <{'regexpr',Expr}> when 'true' ->
				let <V2L> =
				    %% Line 434
				    call 'sofs':'to_external'
					(_cor19)
				in  let <_cor24> =
					%% Line 435
					apply 'match_many'/3
					    (V2L, Expr, 3)
				    in  %% Line 435
					apply 'xset'/2
					    (_cor24, Type)
			    %% Line 436
			    <'variable'> when 'true' ->
				_cor19
			    ( <_cor25> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor25})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'regexpr',2}}] )
	    -| ['compiler_generated'] )
	end
'relation_to_graph'/1 =
    %% Line 441
    fun (_cor0) ->
	let <G> =
	    %% Line 442
	    call 'digraph':'new'
		()
	in  let <Fun> =
		%% Line 443
		( fun (_cor2) ->
		      case _cor2 of
			<{From,To}> when 'true' ->
			    do  %% Line 444
				call 'digraph':'add_vertex'
				    (G, From)
				do  %% Line 445
				    call 'digraph':'add_vertex'
					(G, To)
				    %% Line 446
				    call 'digraph':'add_edge'
					(G, From, To)
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'-relation_to_graph/1-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-relation_to_graph/1-fun-0-'}}] )
	    in  let <_cor5> =
		    %% Line 448
		    call 'sofs':'to_external'
			(_cor0)
		in  do  %% Line 448
			call 'lists':'foreach'
			    (Fun, _cor5)
			%% Line 449
			G
'find_beam'/1 =
    %% Line 453
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 454
	      case call 'code':'which'
		       (Module) of
		%% Line 455
		<'non_existing'> when 'true' ->
		    %% Line 456
		    apply 'error'/1
			({'no_such_module',Module})
		%% Line 457
		<'preloaded'> when 'true' ->
		    let <_cor1> =
			%% Line 459
			call 'code':'get_object_code'
			    (Module)
		    in  %% Line 458
			case %% Line 459
			     <Module,_cor1> of
			  <_cor5,{_X_M,_X_Bin,File}>
			      when call 'erlang':'=:='
				    (_cor5,
				     Module) ->
			      %% Line 460
			      {'ok',File}
			  ( <_fol91,_fol92> when 'true' ->
				let <_cor2> = {_fol91,_fol92}
				in  primop 'match_fail'
					({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		%% Line 461
		<'cover_compiled'> when 'true' ->
		    %% Line 462
		    apply 'error'/1
			({'cover_compiled',Module})
		%% Line 463
		<File> when 'true' ->
		    %% Line 464
		    {'ok',File}
	      end
	  %% Line 466
	  <Culprit> when 'true' ->
	      %% Line 467
	      call 'erlang':'error'
		  ('badarg', [Culprit|[]])
	end
'options'/2 =
    %% Line 508
    fun (_cor1,_cor0) ->
	%% Line 509
	apply 'split_options'/5
	    (_cor1, [], [], [], _cor0)
'subprocess'/2 =
    %% Line 511
    fun (_cor1,_cor0) ->
	let <Pid> =
	    %% Line 512
	    call 'erlang':'spawn_opt'
		(_cor1, _cor0)
	in  %% Line 513
	    receive
	      %% Line 514
	      <{_cor5,Reply}>
		  when call 'erlang':'=:='
			(_cor5,
			 Pid) ->
		  Reply
	    after 'infinity' ->
	      'true'
'format_error'/1 =
    %% Line 517
    fun (_cor0) ->
	case _cor0 of
	  <{'error',Module,Error}> when 'true' ->
	      %% Line 518
	      call Module:'format_error'
		  (Error)
	  %% Line 519
	  <{'file_error',FileName,Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 520
		  call 'file':'format_error'
		      (Reason)
	      in  %% Line 520
		  call 'io_lib':'format'
		      ([126|[116|[115|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]], [FileName|[_cor1|[]]])
	  %% Line 521
	  <{'unrecognized_file',FileName}> when 'true' ->
	      %% Line 522
	      call 'io_lib':'format'
		  ([126|[116|[112|[32|[105|[115|[32|[110|[101|[105|[116|[104|[101|[114|[32|[97|[32|[114|[101|[103|[117|[108|[97|[114|[32|[102|[105|[108|[101|[32|[110|[111|[114|[32|[97|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 523
																																				  [FileName|[]])
	  %% Line 524
	  <{'no_such_module',Module}> when 'true' ->
	      %% Line 525
	      call 'io_lib':'format'
		  ([67|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[109|[111|[100|[117|[108|[101|[32|[126|[116|[112|[32|[117|[115|[105|[110|[103|[32|[116|[104|[101|[32|[99|[111|[100|[101|[32|[112|[97|[116|[104|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Module|[]])
	  %% Line 526
	  <{'interpreted',Module}> when 'true' ->
	      %% Line 527
	      call 'io_lib':'format'
		  ([67|[97|[110|[110|[111|[116|[32|[117|[115|[101|[32|[66|[69|[65|[77|[32|[99|[111|[100|[101|[32|[111|[102|[32|[105|[110|[116|[101|[114|[112|[114|[101|[116|[101|[100|[32|[109|[111|[100|[117|[108|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Module|[]])
	  %% Line 528
	  <E> when 'true' ->
	      %% Line 529
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'to_list'/1 =
    %% Line 535
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 536
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      X
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'select_application_directories'/4 =
    %% Line 538
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[FileName|FileNames],Dir,Flag,L> when 'true' ->
	      %% Line 539
	      case apply 'is_directory'/1
		       (FileName) of
		%% Line 540
		<'true'> when 'true' ->
		    let <File> =
			%% Line 541
			call 'filename':'basename'
			    (FileName)
		    in  %% Line 542
			case apply 'filename_to_application'/1
				 (File) of
			  <{Name,Vsn}> when 'true' ->
			      let <_cor6> =
				  %% Line 543
				  apply 'subdir'/3
				      (FileName, Dir, Flag)
			      in  let <ApplDir> = {%% Line 543
				       Name,%% Line 543
					    Vsn,_cor6}
				  in  %% Line 544
				      apply 'select_application_directories'/4
					  (FileNames, Dir, Flag, [ApplDir|L])
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		%% Line 545
		<'false'> when 'true' ->
		    %% Line 546
		    apply 'select_application_directories'/4
			(FileNames, Dir, Flag, L)
		%% Line 547
		<Error> when 'true' ->
		    %% Line 548
		    Error
	      end
	  %% Line 550
	  <[],_X_Dir,_X_Flag,L> when 'true' ->
	      let <_cor9> =
		  %% Line 551
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 551
		  {'ok',_cor9}
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'select_application_directories',4}}] )
	    -| ['compiler_generated'] )
	end
'subdir'/3 =
    %% Line 553
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dir,_cor8,'false'> when 'true' ->
	      %% Line 554
	      Dir
	  %% Line 555
	  <Dir,SubDir,'true'> when 'true' ->
	      let <EDir> =
		  %% Line 556
		  call 'filename':'join'
		      (Dir, SubDir)
	      in  %% Line 557
		  case apply 'is_directory'/1
			   (EDir) of
		    %% Line 558
		    <'true'> when 'true' ->
			EDir
		    %% Line 559
		    <_X_FalseOrError> when 'true' ->
			Dir
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'subdir',3}}] )
	    -| ['compiler_generated'] )
	end
'filename2appl'/1 =
    %% Line 563
    fun (_cor0) ->
	let <Pos> =
	    %% Line 564
	    call 'string':'rstr'
		(_cor0, [45])
	in  %% Line 565
	    case call 'erlang':'>'
		     (Pos, 1) of
	      <'true'> when 'true' ->
		  let <_cor3> =
		      %% Line 566
		      call 'erlang':'+'
			  (Pos, 1)
		  in  let <V> =
			  %% Line 566
			  call 'string':'sub_string'
			      (_cor0, _cor3)
		      in  let <_cor5> =
			      %% Line 567
			      call 'string':'len'
				  (V)
			  in  %% Line 567
			      case call 'erlang':'>'
				       (_cor5, 0) of
				<'true'> when 'true' ->
				    let <VsnT> =
					%% Line 568
					call 'string':'tokens'
					    (V, [46])
				    in  let <_cor8> =
					    %% Line 569
					    call 'erlang':'-'
						(Pos, 1)
					in  let <ApplName> =
						%% Line 569
						call 'string':'sub_string'
						    (_cor0, 1, _cor8)
					    in  let <_cor15> =
						    %% Line 570
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor12) ->
								  case _cor12 of
								    <[Vsn|_cor11]> when 'true' ->
									let <_cor13> =
									    call 'erlang':'list_to_integer'
										(Vsn)
									in  let <_cor14> =
										apply 'lc$^0'/1
										    (_cor11)
									    in  ( [_cor13|_cor14]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor12> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor12})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      (VsnT)
						      -| ['list_comprehension'] )
						in  let <_cor17> =
							%% Line 571
							call 'erlang':'list_to_atom'
							    (ApplName)
						    in  %% Line 571
							{_cor17,_cor15}
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'find_files_dir'/5 =
    %% Line 573
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 574
	case call 'file':'list_dir'
		 (_cor4) of
	  %% Line 575
	  <{'ok',Files}> when 'true' ->
	      let <_cor5> =
		  %% Line 576
		  call 'lists':'sort'
		      (Files)
	      in  %% Line 576
		  apply 'find_files'/6
		      (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 577
	  <{'error',Error}> when 'true' ->
	      %% Line 578
	      case _cor0 of
		<[B|{E,J,U}]> when 'true' ->
		    let <_cor7> =
			%% Line 579
			apply 'file_error'/2
			    (_cor4, Error)
		    in  %% Line 579
			[B|{[_cor7|E],J,U}]
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'find_files'/6 =
    %% Line 582
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[F|Fs],Dir,Recurse,Collect,Watch,L> when 'true' ->
	      let <File> =
		  %% Line 583
		  call 'filename':'join'
		      (Dir, F)
	      in  let <_cor14> =
		      %% Line 584
		      case apply 'file_info'/1
			       (File) of
			%% Line 585
			<{'ok',{_cor22,'directory','readable',_cor23}}>
			    when call 'erlang':'=:='
				  (Recurse,
				   'true') ->
			    %% Line 586
			    apply 'find_files_dir'/5
				(File, Recurse, Collect, Watch, L)
			%% Line 587
			<{'ok',{_cor24,'directory',_cor25,_cor26}}> when 'true' ->
			    %% Line 588
			    L
			%% Line 589
			<Info> when 'true' ->
			    %% Line 590
			    case L of
			      <[B|EJU = {E,J,U}]> when 'true' ->
				  let <Ext> =
				      %% Line 591
				      call 'filename':'extension'
					  (File)
				  in  %% Line 593
				      case call 'lists':'member'
					       (Ext, Collect) of
					%% Line 594
					<'true'> when 'true' ->
					    %% Line 595
					    case Info of
					      %% Line 596
					      <{'ok',{_cor27,'file','readable',_cor28}}> when 'true' ->
						  %% Line 597
						  [[{Dir,F}|B]|EJU]
					      %% Line 598
					      <{'ok',{_cor29,'file','unreadable',_cor30}}> when 'true' ->
						  %% Line 599
						  [B|{E,J,[File|U]}]
					      %% Line 600
					      <Error> when 'true' ->
						  %% Line 601
						  [B|{[Error|E],J,U}]
					    end
					%% Line 603
					<'false'> when 'true' ->
					    %% Line 604
					    case call 'lists':'member'
						     (Ext, Watch) of
					      %% Line 605
					      <'true'> when 'true' ->
						  [B|{E,[File|J],U}]
					      %% Line 606
					      <'false'> when 'true' ->
						  L
					      ( <_cor11> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor11})
						-| ['compiler_generated'] )
					    end
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor12})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		      end
		  in  %% Line 610
		      apply 'find_files'/6
			  (Fs, Dir, Recurse, Collect, Watch, _cor14)
	  %% Line 611
	  <[],_X_Dir,_X_Recurse,_X_Collect,_X_Watch,L> when 'true' ->
	      %% Line 612
	      L
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'find_files',6}}] )
	    -| ['compiler_generated'] )
	end
'graph_to_relation'/1 =
    %% Line 614
    fun (_cor0) ->
	let <Fun> =
	    %% Line 615
	    ( fun (_cor2) ->
		  case call 'digraph':'edge'
			   (_cor0, _cor2) of
		    <{_X_E,V1,V2,_X_Label}> when 'true' ->
			{V1,V2}
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-graph_to_relation/1-fun-0-'}}] )
	in  let <_cor5> =
		%% Line 616
		call 'digraph':'edges'
		    (_cor0)
	    in  let <_cor6> =
		    %% Line 616
		    call 'lists':'map'
			(Fun, _cor5)
		in  %% Line 616
		    call 'sofs':'from_term'
			(_cor6, [{['atom'],['atom']}])
'path'/3 =
    %% Line 618
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E1|[E2|P]],G,L> when 'true' ->
	      %% Line 619
	      case call 'digraph':'get_short_path'
		       (G, E1, E2) of
		%% Line 620
		<'false'> when 'true' ->
		    %% Line 621
		    'false'
		%% Line 622
		<[_X_V|Vs]> when 'true' ->
		    %% Line 623
		    apply 'path'/3
			([E2|P], G, [Vs|L])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 625
	  <[_cor8|[]],_X_G,L> when 'true' ->
	      let <_cor4> =
		  %% Line 626
		  call 'lists':'reverse'
		      (L)
	      in  %% Line 626
		  call 'lists':'append'
		      (_cor4)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'path',3}}] )
	    -| ['compiler_generated'] )
	end
'neighbours'/4 =
    %% Line 628
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 629
	apply 'neighbours'/5
	    (_cor3, _cor2, _cor1, _cor0, [])
'neighbours'/5 =
    %% Line 631
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[V|Vs],G,Fun,VT,L> when 'true' ->
	      let <Ns> =
		  %% Line 632
		  call 'digraph_utils':Fun
		      ([V|[]], G)
	      in  %% Line 633
		  apply 'neighbours'/7
		      (Ns, G, Fun, VT, L, V, Vs)
	  %% Line 634
	  <[],_X_G,_X_Fun,[VT|[]],L> when 'true' ->
	      %% Line 635
	      apply 'xset'/2
		  (L, [{VT,VT}|[]])
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'neighbours',5}}] )
	    -| ['compiler_generated'] )
	end
'neighbours'/7 =
    %% Line 637
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[N|Ns],G,Fun,VT,L,V,Vs>
	      when call 'erlang':'=:='
		    (Fun,
		     'reachable_neighbours') ->
	      %% Line 638
	      apply 'neighbours'/7
		  (Ns, G, Fun, VT, [{V,N}|L], V, Vs)
	  %% Line 639
	  <[N|Ns],G,Fun,VT,L,V,Vs> when 'true' ->
	      %% Line 640
	      apply 'neighbours'/7
		  (Ns, G, Fun, VT, [{N,V}|L], V, Vs)
	  %% Line 641
	  <[],G,Fun,VT,L,_X_V,Vs> when 'true' ->
	      %% Line 642
	      apply 'neighbours'/5
		  (Vs, G, Fun, VT, L)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'neighbours',7}}] )
	    -| ['compiler_generated'] )
	end
'match_list'/2 =
    %% Line 644
    fun (_cor1,_cor0) ->
	%% Line 645
	case call 're':'compile'
		 (_cor0) of
	  <{'ok',Expr}> when 'true' ->
	      let <_cor5> =
		  %% Line 646
		  ( fun (_cor3) ->
			apply 'match'/2
			    (_cor3, Expr)
		    -| [{'id',{0,0,'-match_list/2-fun-0-'}}] )
	      in  %% Line 646
		  call 'lists':'filter'
		      (_cor5, _cor1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'match_one'/3 =
    %% Line 648
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 649
	    ( fun (_cor4) ->
		  let <_cor3> =
		      call 'erlang':'element'
			  (_cor0, _cor4)
		  in  call 'erlang':'=:='
			  (_cor1, _cor3)
	      -| [{'id',{0,0,'-match_one/3-fun-0-'}}] )
	in  %% Line 649
	    apply 'select_each'/2
		(_cor2, _cor6)
'match_many'/3 =
    %% Line 651
    fun (_cor2,_cor1,_cor0) ->
	%% Line 652
	case call 're':'compile'
		 (_cor1) of
	  <{'ok',Expr}> when 'true' ->
	      let <_cor7> =
		  %% Line 653
		  ( fun (_cor5) ->
			let <_cor4> =
			    call 'erlang':'element'
				(_cor0, _cor5)
			in  apply 'match'/2
				(_cor4, Expr)
		    -| [{'id',{0,0,'-match_many/3-fun-0-'}}] )
	      in  %% Line 653
		  apply 'select_each'/2
		      (_cor2, _cor7)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'match'/2 =
    %% Line 655
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,Expr>
	      when call 'erlang':'is_integer'
		    (I) ->
	      let <S> =
		  %% Line 656
		  call 'erlang':'integer_to_list'
		      (I)
	      in  let <_cor4> =
		      %% Line 657
		      call 'erlang':'length'
			  (S)
		  in  let <_cor3> =
			  %% Line 657
			  call 're':'run'
			      (S, Expr, [{'capture','first'}])
		      in  %% Line 657
			  call 'erlang':'=:='
			      ({'match',[{0,_cor4}|[]]}, _cor3)
	  %% Line 658
	  <A,Expr>
	      when call 'erlang':'is_atom'
		    (A) ->
	      let <S> =
		  %% Line 659
		  call 'erlang':'atom_to_list'
		      (A)
	      in  let <_cor7> =
		      %% Line 660
		      call 'erlang':'length'
			  (S)
		  in  let <_cor6> =
			  %% Line 660
			  call 're':'run'
			      (S, Expr, [{'capture','first'}])
		      in  %% Line 660
			  call 'erlang':'=:='
			      ({'match',[{0,_cor7}|[]]}, _cor6)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'match',2}}] )
	    -| ['compiler_generated'] )
	end
'select_each'/2 =
    %% Line 662
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Mod,Funs}|L],Pred> when 'true' ->
	      %% Line 663
	      case call 'lists':'filter'
		       (Pred, Funs) of
		%% Line 664
		<[]> when 'true' ->
		    %% Line 665
		    apply 'select_each'/2
			(L, Pred)
		%% Line 666
		<NFuns> when 'true' ->
		    let <_cor2> =
			%% Line 667
			apply 'select_each'/2
			    (L, Pred)
		    in  %% Line 667
			[{Mod,NFuns}|_cor2]
	      end
	  %% Line 669
	  <[],_X_Pred> when 'true' ->
	      %% Line 670
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'select_each',2}}] )
	    -| ['compiler_generated'] )
	end
'split_options'/5 =
    %% Line 672
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[O|Os],A,P,I,V>
	      when call 'erlang':'is_atom'
		    (O) ->
	      %% Line 673
	      apply 'split_options'/5
		  (Os, [O|A], P, I, V)
	  %% Line 674
	  <[O = {Name,_cor15}|Os],A,P,I,V>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 675
	      apply 'split_options'/5
		  (Os, A, [O|P], I, V)
	  %% Line 676
	  <[O|Os],A,P,I,V> when 'true' ->
	      %% Line 677
	      apply 'split_options'/5
		  (Os, A, P, [O|I], V)
	  %% Line 678
	  <[],A,P,I,V> when 'true' ->
	      let <_cor5> =
		  %% Line 679
		  call 'sofs':'set'
		      (A)
	      in  let <Atoms> =
		      %% Line 679
		      call 'sofs':'to_external'
			  (_cor5)
		  in  let <_cor7> =
			  %% Line 680
			  call 'sofs':'relation'
			      (P)
		      in  let <_cor8> =
			      %% Line 680
			      call 'sofs':'relation_to_family'
				  (_cor7)
			  in  let <Pairs> =
				  %% Line 680
				  call 'sofs':'to_external'
				      (_cor8)
			      in  %% Line 681
				  apply 'option_values'/5
				      (V, Atoms, Pairs, I, [])
	  %% Line 682
	  <O,A,P,I,V> when 'true' ->
	      %% Line 683
	      apply 'split_options'/5
		  ([O|[]], A, P, I, V)
	end
'option_values'/5 =
    %% Line 685
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[O|Os],A,P,I,Vs>
	      when call 'erlang':'is_atom'
		    (O) ->
	      let <_cor6> =
		  %% Line 686
		  call 'lists':'delete'
		      (O, A)
	      in  let <_cor5> =
		      %% Line 686
		      call 'lists':'member'
			  (O, A)
		  in  %% Line 686
		      apply 'option_values'/5
			  (Os, _cor6, P, I, [_cor5|Vs])
	  %% Line 687
	  <[{Name,AllowedValues}|Os],A,P,I,Vs> when 'true' ->
	      %% Line 688
	      case call 'lists':'keysearch'
		       (Name, 1, P) of
		%% Line 689
		<{'value',{_cor20,Values}}> when 'true' ->
		    %% Line 690
		    apply 'option_value'/8
			(Name, AllowedValues, Values, A, P, I, Vs, Os)
		%% Line 691
		<'false'>
		    when call 'erlang':'=:='
			  (AllowedValues,
			   []) ->
		    %% Line 692
		    apply 'option_values'/5
			(Os, A, P, I, [[]|Vs])
		%% Line 693
		<'false'> when 'true' ->
		    %% Line 694
		    case AllowedValues of
		      <[Default|_cor21]> when 'true' ->
			  %% Line 695
			  apply 'option_values'/5
			      (Os, A, P, I, [[Default|[]]|Vs])
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 697
	  <[],A,P,Invalid,Values> when 'true' ->
	      let <_cor9> =
		  %% Line 698
		  call 'sofs':'family'
		      (P)
	      in  let <_cor10> =
		      %% Line 698
		      call 'sofs':'family_to_relation'
			  (_cor9)
		  in  let <I2> =
			  %% Line 698
			  call 'sofs':'to_external'
			      (_cor10)
		      in  let <_cor14> =
			      %% Line 699
			      call 'lists':'reverse'
				  (Values)
			  in  let <_cor12> =
				  %% Line 699
				  call 'erlang':'++'
				      (A, I2)
			      in  let <_cor13> =
				      %% Line 699
				      call 'erlang':'++'
					  (Invalid, _cor12)
				  in  %% Line 699
				      {_cor14,_cor13}
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'option_values',5}}] )
	    -| ['compiler_generated'] )
	end
'option_value'/8 =
    %% Line 701
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name,[_X_Deflt|[Fun|[]]],Vals,A,P,I,Vs,Os>
	      when %% Line 702
		call 'erlang':'is_function'
		    (Fun) ->
	      let <P1> =
		  %% Line 703
		  call 'lists':'keydelete'
		      (Name, 1, P)
	      in  %% Line 704
		  case apply Fun
			   (Vals) of
		    %% Line 705
		    <'true'> when 'true' ->
			%% Line 706
			apply 'option_values'/5
			    (Os, A, P1, I, [Vals|Vs])
		    %% Line 707
		    <'false'> when 'true' ->
			%% Line 708
			apply 'option_values'/5
			    (Os, A, [{Name,Vals}|P1], I, [[]|Vs])
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 710
	  <Name,AllowedValues,Values,A,P,I,Vs,Os> when 'true' ->
	      let <P1> =
		  %% Line 711
		  call 'lists':'keydelete'
		      (Name, 1, P)
	      in  let <VS> =
		      %% Line 712
		      call 'sofs':'set'
			  (Values)
		  in  let <AVS> =
			  %% Line 713
			  call 'sofs':'set'
			      (AllowedValues)
		      in  let <_cor13> =
			      %% Line 714
			      call 'sofs':'intersection'
				  (VS, AVS)
			  in  let <V1> =
				  %% Line 714
				  call 'sofs':'to_external'
				      (_cor13)
			      in  let <_cor15> =
				      %% Line 715
				      call 'sofs':'difference'
					  (VS, AVS)
				  in  let <V,NP> =
					  %% Line 715
					  case call 'sofs':'to_external'
						   (_cor15) of
					    %% Line 716
					    <_cor28>
						when call 'erlang':'=:='
						      (AllowedValues,
						       []) ->
						<Values,P1>
					    %% Line 717
					    <[]> when 'true' ->
						<V1,P1>
					    %% Line 718
					    <_cor29>
						when try
						      let <_cor16> =
							  call 'erlang':'length'
							      (AllowedValues)
						      in  call 'erlang':'=:='
							      (_cor16, 1)
						  of <Try> ->
						      Try
						  catch <T,R> ->
						      'false' ->
						%% Line 719
						<Values,P1>
					    %% Line 720
					    <I1> when 'true' ->
						<V1,[{Name,I1}|P1]>
					  end
				      in  %% Line 722
					  apply 'option_values'/5
					      (Os, A, NP, I, [V|Vs])
	end
'file_error'/2 =
    %% Line 724
    fun (_cor1,_cor0) ->
	%% Line 725
	apply 'error'/1
	    ({'file_error',_cor1,_cor0})
'error'/1 =
    %% Line 727
    fun (_cor0) ->
	%% Line 728
	{'error','xref_utils',_cor0}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xref_utils')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xref_utils', _cor0)
end