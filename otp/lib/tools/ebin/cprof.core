module 'cprof' ['analyse'/0,
		'analyse'/1,
		'analyse'/2,
		'analyze'/0,
		'analyze'/1,
		'analyze'/2,
		'module_info'/0,
		'module_info'/1,
		'pause'/0,
		'pause'/1,
		'pause'/2,
		'pause'/3,
		'restart'/0,
		'restart'/1,
		'restart'/2,
		'restart'/3,
		'start'/0,
		'start'/1,
		'start'/2,
		'start'/3,
		'stop'/0,
		'stop'/1,
		'stop'/2,
		'stop'/3]
    attributes []
'start'/0 =
    %% Line 32
    fun () ->
	let <_cor1> =
	    %% Line 33
	    apply 'tr'/2
		({'_','_','_'}, 'true')
	in  let <_cor0> =
		%% Line 33
		apply 'tr'/2
		    ('on_load', 'true')
	    in  %% Line 33
		call 'erlang':'+'
		    (_cor1, _cor0)
'start'/1 =
    %% Line 35
    fun (_cor0) ->
	case _cor0 of
	  <MFA = {_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 36
	      apply 'tr'/2
		  (MFA, 'true')
	  %% Line 37
	  <{FuncSpec}> when 'true' ->
	      %% Line 38
	      apply 'tr'/2
		  (FuncSpec, 'true')
	  %% Line 39
	  <M> when 'true' ->
	      %% Line 40
	      apply 'tr'/2
		  ({M,'_','_'}, 'true')
	end
'start'/2 =
    %% Line 42
    fun (_cor1,_cor0) ->
	%% Line 43
	apply 'tr'/2
	    ({_cor1,_cor0,'_'}, 'true')
'start'/3 =
    %% Line 45
    fun (_cor2,_cor1,_cor0) ->
	%% Line 46
	apply 'tr'/2
	    ({_cor2,_cor1,_cor0}, 'true')
'stop'/0 =
    %% Line 50
    fun () ->
	let <_cor1> =
	    %% Line 51
	    apply 'tr'/2
		({'_','_','_'}, 'false')
	in  let <_cor0> =
		%% Line 51
		apply 'tr'/2
		    ('on_load', 'false')
	    in  %% Line 51
		call 'erlang':'+'
		    (_cor1, _cor0)
'stop'/1 =
    %% Line 53
    fun (_cor0) ->
	case _cor0 of
	  <MFA = {_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 54
	      apply 'tr'/2
		  (MFA, 'false')
	  %% Line 55
	  <{FuncSpec}> when 'true' ->
	      %% Line 56
	      apply 'tr'/2
		  (FuncSpec, 'false')
	  %% Line 57
	  <M> when 'true' ->
	      %% Line 58
	      apply 'tr'/2
		  ({M,'_','_'}, 'false')
	end
'stop'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	%% Line 61
	apply 'tr'/2
	    ({_cor1,_cor0,'_'}, 'false')
'stop'/3 =
    %% Line 63
    fun (_cor2,_cor1,_cor0) ->
	%% Line 64
	apply 'tr'/2
	    ({_cor2,_cor1,_cor0}, 'false')
'restart'/0 =
    %% Line 68
    fun () ->
	%% Line 69
	apply 'tr'/2
	    ({'_','_','_'}, 'restart')
'restart'/1 =
    %% Line 71
    fun (_cor0) ->
	case _cor0 of
	  <MFA = {_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 72
	      apply 'tr'/2
		  (MFA, 'restart')
	  %% Line 73
	  <{FuncSpec}> when 'true' ->
	      %% Line 74
	      apply 'tr'/2
		  (FuncSpec, 'restart')
	  %% Line 75
	  <M> when 'true' ->
	      %% Line 76
	      apply 'tr'/2
		  ({M,'_','_'}, 'restart')
	end
'restart'/2 =
    %% Line 78
    fun (_cor1,_cor0) ->
	%% Line 79
	apply 'tr'/2
	    ({_cor1,_cor0,'_'}, 'restart')
'restart'/3 =
    %% Line 81
    fun (_cor2,_cor1,_cor0) ->
	%% Line 82
	apply 'tr'/2
	    ({_cor2,_cor1,_cor0}, 'restart')
'pause'/0 =
    %% Line 86
    fun () ->
	let <_cor1> =
	    %% Line 87
	    apply 'tr'/2
		({'_','_','_'}, 'pause')
	in  let <_cor0> =
		%% Line 87
		apply 'tr'/2
		    ('on_load', 'false')
	    in  %% Line 87
		call 'erlang':'+'
		    (_cor1, _cor0)
'pause'/1 =
    %% Line 89
    fun (_cor0) ->
	case _cor0 of
	  <MFA = {_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 90
	      apply 'tr'/2
		  (MFA, 'pause')
	  %% Line 91
	  <{FuncSpec}> when 'true' ->
	      %% Line 92
	      apply 'tr'/2
		  (FuncSpec, 'pause')
	  %% Line 93
	  <M> when 'true' ->
	      %% Line 94
	      apply 'tr'/2
		  ({M,'_','_'}, 'pause')
	end
'pause'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	%% Line 97
	apply 'tr'/2
	    ({_cor1,_cor0,'_'}, 'pause')
'pause'/3 =
    %% Line 99
    fun (_cor2,_cor1,_cor0) ->
	%% Line 100
	apply 'tr'/2
	    ({_cor2,_cor1,_cor0}, 'pause')
'analyse'/0 =
    %% Line 104
    fun () ->
	%% Line 105
	apply 'analyse'/1
	    (1)
'analyse'/1 =
    %% Line 107
    fun (_cor0) ->
	case _cor0 of
	  <Limit>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor8> =
		  %% Line 108
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Mod|_cor2]> when 'true' ->
				      let <_cor5> =
					  call 'erlang':'element'
					      (1, Mod)
				      in  let <_cor6> =
					      apply 'analyse'/2
						  (_cor5, Limit)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor2)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'code':'all_loaded'
				()
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  let <_cor16> =
		      %% Line 109
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor14) ->
				    case _cor14 of
				      <[{M,C,Lm}|_cor11]>
					  when let <_cor12> =
						call 'erlang':'>'
						    (C, 0)
					    in  let <_cor13> =
						    call 'erlang':'=/='
							(M, 'cprof')
						in  call 'erlang':'and'
							(_cor12, _cor13) ->
					  let <_cor15> =
					      apply 'lc$^1'/1
						  (_cor11)
					  in  ( [{C,M,Lm}|_cor15]
						-| ['compiler_generated'] )
				      ( <[_cor10|_cor11]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor11)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor14> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor14})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_cor8)
			-| ['list_comprehension'] )
		  in  let <_cor22> =
			  %% Line 110
			  ( fun (_cor19,_cor18) ->
				case <_cor19,_cor18> of
				  <{C,_cor33,_cor34},Q> when 'true' ->
				      call 'erlang':'+'
					  (Q, C)
				  ( <_cor21,_cor20> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor21,_cor20})
					  -| [{'function_name',{'-analyse/1-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-analyse/1-fun-0-'}}] )
		      in  let <N> =
			      %% Line 110
			      call 'lists':'foldl'
				  (_cor22, 0, _cor16)
			  in  let <_cor30> =
				  %% Line 111
				  ( letrec
					'lc$^2'/1 =
					    fun (_cor28) ->
						case _cor28 of
						  <[{C,M,Lm}|_cor25]> when 'true' ->
						      let <_cor29> =
							  apply 'lc$^2'/1
							      (_cor25)
						      in  ( [{M,C,Lm}|_cor29]
							    -| ['compiler_generated'] )
						  ( <[_cor24|_cor25]> when 'true' ->
							apply 'lc$^2'/1
							    (_cor25)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor28> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor28})
							  -| [{'function_name',{'lc$^2',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor26> =
					    call 'lists':'sort'
						(_cor16)
					in  let <_cor27> =
						call 'lists':'reverse'
						    (_cor26)
					    in  apply 'lc$^2'/1
						    (_cor27)
				    -| ['list_comprehension'] )
			      in  %% Line 112
				  {N,_cor30}
	  %% Line 113
	  <M>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 114
	      apply 'analyse'/2
		  (M, 1)
	  ( <_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32})
		  -| [{'function_name',{'analyse',1}}] )
	    -| ['compiler_generated'] )
	end
'analyse'/2 =
    %% Line 116
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <M,Limit>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Limit)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor11> =
		  %% Line 117
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[%% Line 121
				    {F,A}|_cor5]> when 'true' ->
				      let <MFA> = {%% Line 118
					   M,%% Line 118
					     F,%% Line 118
					       A}
				      in  %% Line 119
					  case call 'erlang':'trace_info'
						   (MFA, 'call_count') of
					    <{_cor41,C}> when 'true' ->
						let <_cor10> =
						    %% Line 121
						    apply 'lc$^0'/1
							(_cor5)
						in  ( [%% Line 120
						       [C|MFA]|_cor10]
						      -| ['compiler_generated'] )
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor9})
					      -| ['compiler_generated'] )
					  end
				  ( <[_cor4|_cor5]> when 'true' ->
					%% Line 121
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor6> =
			    %% Line 121
			    call M:'module_info'
				('functions')
			in  apply 'lc$^0'/1
				(_cor6)
		    -| ['list_comprehension'] )
	      in  let <_cor17> =
		      %% Line 122
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor15) ->
				    case _cor15 of
				      <[X = [C|_cor42]|_cor14]>
					  when call 'erlang':'is_integer'
						(C) ->
					  let <_cor16> =
					      apply 'lc$^1'/1
						  (_cor14)
					  in  ( [X|_cor16]
						-| ['compiler_generated'] )
				      ( <[_cor13|_cor14]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor14)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor15> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor15})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_cor11)
			-| ['list_comprehension'] )
		  in  let <_cor23> =
			  %% Line 123
			  ( fun (_cor20,_cor19) ->
				case <_cor20,_cor19> of
				  <[C|_cor43],Q> when 'true' ->
				      call 'erlang':'+'
					  (Q, C)
				  ( <_cor22,_cor21> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor22,_cor21})
					  -| [{'function_name',{'-analyse/2-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-analyse/2-fun-0-'}}] )
		      in  let <N> =
			      %% Line 123
			      call 'lists':'foldl'
				  (_cor23, 0, _cor17)
			  in  let <_cor29> =
				  %% Line 124
				  ( letrec
					'lc$^2'/1 =
					    fun (_cor27) ->
						case _cor27 of
						  <[X = [C|_cor44]|_cor26]>
						      when call 'erlang':'>='
							    (C,
							     Limit) ->
						      let <_cor28> =
							  apply 'lc$^2'/1
							      (_cor26)
						      in  ( [X|_cor28]
							    -| ['compiler_generated'] )
						  ( <[_cor25|_cor26]> when 'true' ->
							apply 'lc$^2'/1
							    (_cor26)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor27> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor27})
							  -| [{'function_name',{'lc$^2',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^2'/1
					    (_cor17)
				    -| ['list_comprehension'] )
			      in  let <_cor37> =
				      %% Line 125
				      ( letrec
					    'lc$^3'/1 =
						fun (_cor35) ->
						    case _cor35 of
						      <[[C|MFA]|_cor32]> when 'true' ->
							  let <_cor36> =
							      apply 'lc$^3'/1
								  (_cor32)
							  in  ( [{MFA,C}|_cor36]
								-| ['compiler_generated'] )
						      ( <[_cor31|_cor32]> when 'true' ->
							    apply 'lc$^3'/1
								(_cor32)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor35> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor35})
							      -| [{'function_name',{'lc$^3',1}}] )
							-| ['compiler_generated'] )
						    end
					in  let <_cor33> =
						call 'lists':'sort'
						    (_cor29)
					    in  let <_cor34> =
						    call 'lists':'reverse'
							(_cor33)
						in  apply 'lc$^3'/1
							(_cor34)
					-| ['list_comprehension'] )
				  in  %% Line 126
				      {M,N,_cor37}
	  ( <_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39})
		  -| [{'function_name',{'analyse',2}}] )
	    -| ['compiler_generated'] )
	end
'analyze'/0 =
    %% Line 130
    fun () ->
	%% Line 131
	apply 'analyse'/0
	    ()
'analyze'/1 =
    %% Line 133
    fun (_cor0) ->
	%% Line 134
	apply 'analyse'/1
	    (_cor0)
'analyze'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	%% Line 137
	apply 'analyse'/2
	    (_cor1, _cor0)
'tr'/2 =
    %% Line 141
    fun (_cor1,_cor0) ->
	%% Line 142
	call 'erlang':'trace_pattern'
	    (_cor1, _cor0, ['call_count'])
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('cprof')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('cprof', _cor0)
end