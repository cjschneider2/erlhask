module 'xref_base' ['add_application'/2,
		    'add_application'/3,
		    'add_directory'/2,
		    'add_directory'/3,
		    'add_module'/2,
		    'add_module'/3,
		    'add_release'/2,
		    'add_release'/3,
		    'analysis'/1,
		    'analyze'/2,
		    'analyze'/3,
		    'delete'/1,
		    'do_add_application'/2,
		    'do_add_module'/4,
		    'do_add_release'/2,
		    'do_remove_module'/2,
		    'forget'/1,
		    'forget'/2,
		    'format_error'/1,
		    'get_default'/1,
		    'get_default'/2,
		    'get_library_path'/1,
		    'info'/1,
		    'info'/2,
		    'info'/3,
		    'module_info'/0,
		    'module_info'/1,
		    'new'/0,
		    'new'/1,
		    'q'/2,
		    'q'/3,
		    'remove_application'/2,
		    'remove_module'/2,
		    'remove_release'/2,
		    'replace_application'/3,
		    'replace_application'/4,
		    'replace_module'/3,
		    'replace_module'/4,
		    'set_default'/2,
		    'set_default'/3,
		    'set_library_path'/2,
		    'set_library_path'/3,
		    'set_up'/1,
		    'set_up'/2,
		    'update'/1,
		    'update'/2,
		    'variables'/1,
		    'variables'/2]
    attributes []
'new'/0 =
    %% Line 78
    fun () ->
	%% Line 79
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 82
    fun (_cor0) ->
	%% Line 84
	case call 'xref_utils':'options'
		 (_cor0, [{'xref_mode',['functions'|['modules'|['function'|['module']]]]}]) of
	  %% Line 85
	  <{[['function']],[]}> when 'true' ->
	      let <_cor5> =
		  call 'dict':'new'
		      ()
	      in  let <_cor4> =
		      call 'dict':'new'
			  ()
		  in  let <_cor3> =
			  call 'dict':'new'
			      ()
		      in  let <_cor2> =
			      call 'dict':'new'
				  ()
			  in  %% Line 86
			      {'ok',{'xref',1,'functions','not_set_up',_cor5,_cor4,_cor3,[],_cor2,'false','false','false','true'}}
	  %% Line 87
	  <{[['module']],[]}> when 'true' ->
	      let <_cor9> =
		  call 'dict':'new'
		      ()
	      in  let <_cor8> =
		      call 'dict':'new'
			  ()
		  in  let <_cor7> =
			  call 'dict':'new'
			      ()
		      in  let <_cor6> =
			      call 'dict':'new'
				  ()
			  in  %% Line 88
			      {'ok',{'xref',1,'modules','not_set_up',_cor9,_cor8,_cor7,[],_cor6,'false','false','false','true'}}
	  %% Line 89
	  <{[[OM|[]]|[]],[]}> when 'true' ->
	      let <_cor13> =
		  call 'dict':'new'
		      ()
	      in  let <_cor12> =
		      call 'dict':'new'
			  ()
		  in  let <_cor11> =
			  call 'dict':'new'
			      ()
		      in  let <_cor10> =
			      call 'dict':'new'
				  ()
			  in  %% Line 90
			      {'ok',{'xref',1,OM,'not_set_up',_cor13,_cor12,_cor11,[],_cor10,'false','false','false','true'}}
	  %% Line 91
	  <_cor16> when 'true' ->
	      %% Line 92
	      apply 'error'/1
		  ({'invalid_options',_cor0})
	end
'delete'/1 =
    %% Line 97
    fun (_cor0) ->
	case _cor0 of
	  <State = {'xref',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}>
	      when call 'erlang':'=:='
		    (_cor19,
		     'not_set_up') ->
	      %% Line 98
	      'ok'
	  %% Line 99
	  <State> when 'true' ->
	      let <Fun> =
		  %% Line 100
		  ( fun (_cor10) ->
			case _cor10 of
			  <{X,_cor29}> when 'true' ->
			      let <_cor7> =
				  catch
				      %% Line 101
				      call 'digraph':'info'
					  (X)
			      in  %% Line 101
				  case _cor7 of
				    %% Line 102
				    <Info>
					when call 'erlang':'is_list'
					      (_cor7) ->
					let <_cor30> =
					    %% Line 103
					    call 'digraph':'delete'
						(X)
					in  %% Line 103
					    case _cor30 of
					      <'true'> when 'true' ->
						  ( _cor30
						    -| ['compiler_generated'] )
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
				    %% Line 104
				    <_X_Else> when 'true' ->
					%% Line 105
					'ok'
				  end
			  ( <_cor11> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor11})
				  -| [{'function_name',{'-delete/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-delete/1-fun-0-'}}] )
	      in  %% Line 108
		  ( case State of
		      ( <( {'xref',_cor31,_cor32,_rec0,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor15> =
				call 'dict':'to_list'
				    (_rec0)
			    in  do  call 'lists':'foreach'
					(Fun, _cor15)
				    %% Line 109
				    'ok'
			-| ['compiler_generated'] )
		      ( <_cor42> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xref'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'add_directory'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	%% Line 112
	apply 'add_directory'/3
	    (_cor1, _cor0, [])
'add_directory'/3 =
    %% Line 115
    fun (_cor2,_cor1,_cor0) ->
	let <ValOptions> =
	    %% Line 116
	    apply 'option_values'/2
		(['builtins'|['recurse'|['verbose'|['warnings']]]], _cor2)
	in  %% Line 117
	    case call 'xref_utils':'options'
		     (_cor0, ValOptions) of
	      %% Line 118
	      <{[[OB|[]]|[[OR|[]]|[[OV|[]]|[[OW|[]]|[]]]]],[]}> when 'true' ->
		  catch
		      %% Line 119
		      apply 'do_add_directory'/7
			  (_cor1, [], OB, OR, OV, OW, _cor2)
	      %% Line 120
	      <_cor8> when 'true' ->
		  %% Line 121
		  apply 'error'/1
		      ({'invalid_options',_cor0})
	    end
'add_module'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	%% Line 125
	apply 'add_module'/3
	    (_cor1, _cor0, [])
'add_module'/3 =
    %% Line 128
    fun (_cor2,_cor1,_cor0) ->
	let <ValOptions> =
	    %% Line 129
	    apply 'option_values'/2
		(['builtins'|['verbose'|['warnings']]], _cor2)
	in  %% Line 130
	    case call 'xref_utils':'options'
		     (_cor0, ValOptions) of
	      %% Line 131
	      <{[[OB|[]]|[[OV|[]]|[[OW|[]]|[]]]],[]}> when 'true' ->
		  let <_cor4> =
		      catch
			  %% Line 132
			  apply 'do_add_a_module'/6
			      (_cor1, [], OB, OV, OW, _cor2)
		  in  %% Line 132
		      case _cor4 of
			%% Line 133
			<{'ok',[Module|[]],NewState}> when 'true' ->
			    %% Line 134
			    {'ok',Module,NewState}
			%% Line 135
			<{'ok',[],_X_NewState}> when 'true' ->
			    %% Line 136
			    apply 'error'/1
				({'no_debug_info',_cor1})
			%% Line 137
			<Error> when 'true' ->
			    %% Line 138
			    Error
		      end
	      %% Line 140
	      <_cor10> when 'true' ->
		  %% Line 141
		  apply 'error'/1
		      ({'invalid_options',_cor0})
	    end
'add_application'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	%% Line 145
	apply 'add_application'/3
	    (_cor1, _cor0, [])
'add_application'/3 =
    %% Line 148
    fun (_cor2,_cor1,_cor0) ->
	let <OptVals> =
	    %% Line 149
	    apply 'option_values'/2
		(['builtins'|['verbose'|['warnings']]], _cor2)
	in  let <ValidOptions> =
		%% Line 150
		[{'name',[[]|[( 'check_name'/1
				-| [{'id',{0,0,'-add_application/3-fun-0-'}}] )|[]]]}|OptVals]
	    in  %% Line 151
		case call 'xref_utils':'options'
			 (_cor0, ValidOptions) of
		  %% Line 152
		  <{[ApplName|[[OB|[]]|[[OV|[]]|[[OW|[]]|[]]]]],[]}> when 'true' ->
		      catch
			  %% Line 153
			  apply 'do_add_application'/7
			      (_cor1, [], ApplName, OB, OV, OW, _cor2)
		  %% Line 154
		  <_cor9> when 'true' ->
		      %% Line 155
		      apply 'error'/1
			  ({'invalid_options',_cor0})
		end
'replace_module'/3 =
    %% Line 158
    fun (_cor2,_cor1,_cor0) ->
	%% Line 159
	apply 'replace_module'/4
	    (_cor2, _cor1, _cor0, [])
'replace_module'/4 =
    %% Line 162
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <ValidOptions> =
	    %% Line 163
	    apply 'option_values'/2
		(['verbose'|['warnings']], _cor3)
	in  %% Line 164
	    case call 'xref_utils':'options'
		     (_cor0, ValidOptions) of
	      %% Line 165
	      <{[[OV|[]]|[[OW|[]]|[]]],[]}> when 'true' ->
		  catch
		      %% Line 166
		      apply 'do_replace_module'/5
			  (_cor2, _cor1, OV, OW, _cor3)
	      %% Line 167
	      <_cor10> when 'true' ->
		  %% Line 168
		  apply 'error'/1
		      ({'invalid_options',_cor0})
	    end
'replace_application'/3 =
    %% Line 171
    fun (_cor2,_cor1,_cor0) ->
	%% Line 172
	apply 'replace_application'/4
	    (_cor2, _cor1, _cor0, [])
'replace_application'/4 =
    %% Line 175
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <ValidOptions> =
	    %% Line 176
	    apply 'option_values'/2
		(['builtins'|['verbose'|['warnings']]], _cor3)
	in  %% Line 177
	    case call 'xref_utils':'options'
		     (_cor0, ValidOptions) of
	      %% Line 178
	      <{[[OB|[]]|[[OV|[]]|[[OW|[]]|[]]]],[]}> when 'true' ->
		  catch
		      %% Line 179
		      apply 'do_replace_application'/6
			  (_cor2, _cor1, OB, OV, OW, _cor3)
	      %% Line 180
	      <_cor10> when 'true' ->
		  %% Line 181
		  apply 'error'/1
		      ({'invalid_options',_cor0})
	    end
'remove_module'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 186
	      apply 'remove_module'/2
		  (State, [Mod|[]])
	  %% Line 187
	  <State,[Mod|Mods]> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 188
		      apply 'do_remove_module'/2
			  (State, Mod)
	      in  %% Line 188
		  case _cor2 of
		    %% Line 189
		    <{'ok',_X_OldXMod,NewState}> when 'true' ->
			%% Line 190
			apply 'remove_module'/2
			    (NewState, Mods)
		    %% Line 191
		    <Error> when 'true' ->
			%% Line 192
			Error
		  end
	  %% Line 194
	  <State,[]> when 'true' ->
	      %% Line 195
	      {'ok',State}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'remove_module',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_application'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,Appl>
	      when call 'erlang':'is_atom'
		    (Appl) ->
	      %% Line 199
	      apply 'remove_application'/2
		  (State, [Appl|[]])
	  %% Line 200
	  <State,[Appl|Appls]> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 201
		      apply 'do_remove_application'/2
			  (State, Appl)
	      in  %% Line 201
		  case _cor2 of
		    %% Line 202
		    <{'ok',_X_OldXApp,NewState}> when 'true' ->
			%% Line 203
			apply 'remove_application'/2
			    (NewState, Appls)
		    %% Line 204
		    <Error> when 'true' ->
			%% Line 205
			Error
		  end
	  %% Line 207
	  <State,[]> when 'true' ->
	      %% Line 208
	      {'ok',State}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'remove_application',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_release'/2 =
    %% Line 211
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,Rel>
	      when call 'erlang':'is_atom'
		    (Rel) ->
	      %% Line 212
	      apply 'remove_release'/2
		  (State, [Rel|[]])
	  %% Line 213
	  <State,[Rel|Rels]> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 214
		      apply 'do_remove_release'/2
			  (State, Rel)
	      in  %% Line 214
		  case _cor2 of
		    %% Line 215
		    <{'ok',_X_OldXRel,NewState}> when 'true' ->
			%% Line 216
			apply 'remove_release'/2
			    (NewState, Rels)
		    %% Line 217
		    <Error> when 'true' ->
			%% Line 218
			Error
		  end
	  %% Line 220
	  <State,[]> when 'true' ->
	      %% Line 221
	      {'ok',State}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'remove_release',2}}] )
	    -| ['compiler_generated'] )
	end
'add_release'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	%% Line 224
	apply 'add_release'/3
	    (_cor1, _cor0, [])
'add_release'/3 =
    %% Line 227
    fun (_cor2,_cor1,_cor0) ->
	let <ValidOptions0> =
	    %% Line 228
	    apply 'option_values'/2
		(['builtins'|['verbose'|['warnings']]], _cor2)
	in  let <ValidOptions> =
		%% Line 229
		[{'name',[[]|[( 'check_name'/1
				-| [{'id',{0,0,'-add_release/3-fun-0-'}}] )|[]]]}|ValidOptions0]
	    in  %% Line 230
		case call 'xref_utils':'options'
			 (_cor0, ValidOptions) of
		  %% Line 231
		  <{[RelName|[[OB|[]]|[[OV|[]]|[[OW|[]]|[]]]]],[]}> when 'true' ->
		      catch
			  %% Line 232
			  apply 'do_add_release'/6
			      (_cor1, RelName, OB, OV, OW, _cor2)
		  %% Line 233
		  <_cor9> when 'true' ->
		      %% Line 234
		      apply 'error'/1
			  ({'invalid_options',_cor0})
		end
'get_library_path'/1 =
    %% Line 237
    fun (_cor0) ->
	%% Line 238
	( case _cor0 of
	    ( <( {'xref',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_rec1,_cor10,_cor11,_cor12,_cor13,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  {'ok',_rec1}
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_library_path'/2 =
    %% Line 240
    fun (_cor1,_cor0) ->
	%% Line 241
	apply 'set_library_path'/3
	    (_cor1, _cor0, [])
'set_library_path'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State,'code_path',_X_Options> when 'true' ->
	      let <_rec2> =
		  %% Line 245
		  call 'dict':'new'
		      ()
	      in  %% Line 245
		  case State of
		    <{'xref',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(9, State, _rec2)
			in  let <_cor7> =
				call 'erlang':'setelement'
				    (8, _cor5, 'code_path')
			    in  let <_cor9> =
				    %% Line 246
				    apply 'take_down'/1
					(_cor7)
				in  %% Line 246
				    {'ok',_cor9}
		    ( <_cor28> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xref'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 247
	  <State,Path,Options> when 'true' ->
	      %% Line 248
	      case call 'xref_utils':'is_path'
		       (Path) of
		%% Line 249
		<'true'> when 'true' ->
		    let <ValidOptions> =
			%% Line 250
			apply 'option_values'/2
			    (['verbose'], State)
		    in  %% Line 251
			case call 'xref_utils':'options'
				 (Options, ValidOptions) of
			  %% Line 252
			  <{[[OV|[]]|[]],[]}> when 'true' ->
			      %% Line 253
			      apply 'do_add_libraries'/3
				  (Path, OV, State)
			  %% Line 254
			  <_cor29> when 'true' ->
			      %% Line 255
			      apply 'error'/1
				  ({'invalid_options',Options})
			end
		%% Line 257
		<'false'> when 'true' ->
		    %% Line 258
		    apply 'error'/1
			({'invalid_path',Path})
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	end
'set_up'/1 =
    %% Line 261
    fun (_cor0) ->
	%% Line 262
	apply 'set_up'/2
	    (_cor0, [])
'set_up'/2 =
    %% Line 265
    fun (_cor1,_cor0) ->
	let <ValidOptions> =
	    %% Line 266
	    apply 'option_values'/2
		(['verbose'], _cor1)
	in  %% Line 267
	    case call 'xref_utils':'options'
		     (_cor0, ValidOptions) of
	      %% Line 268
	      <{[[Verbose|[]]|[]],[]}> when 'true' ->
		  %% Line 269
		  apply 'do_set_up'/2
		      (_cor1, Verbose)
	      %% Line 270
	      <_cor6> when 'true' ->
		  %% Line 271
		  apply 'error'/1
		      ({'invalid_options',_cor0})
	    end
'q'/2 =
    %% Line 274
    fun (_cor1,_cor0) ->
	%% Line 275
	apply 'q'/3
	    (_cor1, _cor0, [])
'q'/3 =
    %% Line 278
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,Q,Options>
	      when call 'erlang':'is_atom'
		    (Q) ->
	      let <_cor3> =
		  %% Line 279
		  call 'erlang':'atom_to_list'
		      (Q)
	      in  %% Line 279
		  apply 'q'/3
		      (S, _cor3, Options)
	  %% Line 280
	  <S,Q,Options> when 'true' ->
	      %% Line 281
	      case call 'xref_utils':'is_string'
		       (Q, 1) of
		%% Line 282
		<'true'> when 'true' ->
		    %% Line 283
		    case apply 'set_up'/2
			     (S, Options) of
		      %% Line 284
		      <{'ok',S1}> when 'true' ->
			  %% Line 285
			  ( case S1 of
			      ( <( {'xref',_cor16,_cor17,_rec4,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}
				   -| ['compiler_generated'] )> when 'true' ->
				    case call 'xref_compiler':'compile'
					     (Q, _rec4) of
				      %% Line 286
				      <{NewT,Ans}> when 'true' ->
					  let <_cor8> =
					      %% Line 287
					      call 'erlang':'setelement'
						  (4, S1, NewT)
					  in  %% Line 287
					      {{'ok',Ans},_cor8}
				      %% Line 288
				      <Error> when 'true' ->
					  %% Line 289
					  {Error,S1}
				    end
				-| ['compiler_generated'] )
			      ( <_cor27> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xref'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 291
		      <Error> when 'true' ->
			  %% Line 292
			  {Error,S}
		    end
		%% Line 294
		<'false'> when 'true' ->
		    let <_cor11> =
			%% Line 295
			apply 'error'/1
			    ({'invalid_query',Q})
		    in  %% Line 295
			{_cor11,S}
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	end
'info'/1 =
    %% Line 299
    fun (_cor0) ->
	%% Line 300
	( case _cor0 of
	    ( <( {'xref',_cor23,_cor24,_cor25,_rec6,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor3> =
		      call 'dict':'to_list'
			  (_rec6)
		  in  let <D0> =
			  call 'lists':'sort'
			      (_cor3)
		      in  let <_cor7> =
			      %% Line 301
			      ( fun (_cor5) ->
				    case _cor5 of
				      <{_X_M,XMod}> when 'true' ->
					  XMod
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'-info/1-fun-0-',1}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-info/1-fun-0-'}}] )
			  in  let <D> =
				  %% Line 301
				  call 'lists':'map'
				      (_cor7, D0)
			      in  let <_cor11> =
				      %% Line 302
				      call 'dict':'to_list'
					  (_cor26)
				  in  let <NoApps> =
					  %% Line 302
					  call 'erlang':'length'
					      (_cor11)
				      in  let <_cor15> =
					      %% Line 303
					      call 'dict':'to_list'
						  (_cor27)
					  in  let <NoRels> =
						  %% Line 303
						  call 'erlang':'length'
						      (_cor15)
					      in  let <No> =
						      %% Line 304
						      apply 'no_sum'/2
							  (_cor0, D)
						  in  %% Line 305
						      [{'library_path',_cor28}|[{'mode',_cor24}|%% Line 306
												[{'no_releases',NoRels}|[{'no_applications',NoApps}|No]]]]
	      -| ['compiler_generated'] )
	    ( <_cor34> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'info'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	%% Line 309
	apply 'do_info'/2
	    (_cor1, _cor0)
'info'/3 =
    %% Line 312
    fun (_cor2,_cor1,_cor0) ->
	catch
	    %% Line 313
	    apply 'do_info'/3
		(_cor2, _cor1, _cor0)
'update'/1 =
    %% Line 315
    fun (_cor0) ->
	%% Line 316
	apply 'update'/2
	    (_cor0, [])
'update'/2 =
    %% Line 319
    fun (_cor1,_cor0) ->
	let <ValidOptions> =
	    %% Line 320
	    apply 'option_values'/2
		(['verbose'|['warnings']], _cor1)
	in  %% Line 321
	    case call 'xref_utils':'options'
		     (_cor0, ValidOptions) of
	      %% Line 322
	      <{[[OV|[]]|[[OW|[]]|[]]],[]}> when 'true' ->
		  catch
		      %% Line 323
		      apply 'do_update'/3
			  (OV, OW, _cor1)
	      %% Line 324
	      <_cor6> when 'true' ->
		  %% Line 325
		  apply 'error'/1
		      ({'invalid_options',_cor0})
	    end
'forget'/1 =
    %% Line 329
    fun (_cor0) ->
	%% Line 330
	case apply 'do_variables'/1
		 (_cor0) of
	  <{U,_X_P}> when 'true' ->
	      let <_cor7> =
		  %% Line 331
		  ( fun (_cor4,_cor3) ->
			case apply 'forget'/2
				 (_cor3, _cor4) of
			  <{'ok',NS}> when 'true' ->
			      NS
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-forget/1-fun-0-'}}] )
	      in  let <_cor8> =
		      %% Line 331
		      call 'lists':'foldl'
			  (_cor7, _cor0, U)
		  in  %% Line 331
		      {'ok',_cor8}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'forget'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'xref',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24},Variable>
	      when call 'erlang':'=:='
		    (_cor15,
		     'not_set_up') ->
	      %% Line 335
	      apply 'error'/1
		  ({'not_user_variable',Variable})
	  %% Line 336
	  <State,Variable>
	      when call 'erlang':'is_atom'
		    (Variable) ->
	      %% Line 337
	      apply 'forget'/2
		  (State, [Variable|[]])
	  %% Line 338
	  <State,Variables> when 'true' ->
	      %% Line 339
	      ( case State of
		  ( <( {'xref',_cor25,_cor26,_rec11,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 340
			apply 'do_forget'/4
			    (Variables, _rec11, Variables, State)
		    -| ['compiler_generated'] )
		  ( <_cor36> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'variables'/1 =
    %% Line 342
    fun (_cor0) ->
	%% Line 343
	apply 'variables'/2
	    (_cor0, ['user'])
'variables'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	let <ValidOptions> =
	    %% Line 348
	    apply 'option_values'/2
		(['verbose'], _cor1)
	in  %% Line 349
	    case call 'xref_utils':'options'
		     (_cor0, ['user'|['predefined'|ValidOptions]]) of
	      %% Line 350
	      <{[User|[Predef|[[OV|[]]|[]]]],[]}> when 'true' ->
		  %% Line 351
		  case apply 'do_set_up'/2
			   (_cor1, OV) of
		    %% Line 352
		    <{'ok',NewState}> when 'true' ->
			%% Line 353
			case apply 'do_variables'/1
				 (NewState) of
			  <{U,P}> when 'true' ->
			      let <_cor4> =
				  %% Line 354
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (User,
					       'true') ->
					[{'user',U}|[]]
				    <> when 'true' ->
					[]
				  end
			      in  let <_cor6> =
				      %% Line 355
				      case <> of
					%% Line 356
					<>
					    when call 'erlang':'=:='
						  (Predef,
						   'true') ->
					    [{'predefined',P}|_cor4]
					%% Line 357
					<> when 'true' ->
					    _cor4
				      end
				  in  %% Line 359
				      {{'ok',_cor6},NewState}
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    %% Line 360
		    <Error> when 'true' ->
			%% Line 361
			{Error,_cor1}
		  end
	      %% Line 363
	      <_cor13> when 'true' ->
		  let <_cor9> =
		      %% Line 364
		      apply 'error'/1
			  ({'invalid_options',_cor0})
		  in  %% Line 364
		      {_cor9,_cor1}
	    end
'analyze'/2 =
    %% Line 367
    fun (_cor1,_cor0) ->
	%% Line 368
	apply 'analyze'/3
	    (_cor1, _cor0, [])
'analyze'/3 =
    %% Line 371
    fun (_cor2,_cor1,_cor0) ->
	%% Line 372
	( case _cor2 of
	    ( <( {'xref',_cor13,_rec12,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'analysis'/2
			   (_cor1, _rec12) of
		    %% Line 373
		    <P>
			when call 'erlang':'is_list'
			      (P) ->
			%% Line 374
			apply 'q'/3
			    (_cor2, P, _cor0)
		    %% Line 375
		    <'error'> when 'true' ->
			let <_cor6> =
			    %% Line 376
			    case apply 'analysis'/2
				     (_cor1, 'functions') of
			      %% Line 377
			      <'error'> when 'true' ->
				  'unknown_analysis'
			      %% Line 378
			      <P>
				  when call 'erlang':'is_list'
					(P) ->
				  'unavailable_analysis'
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
			in  let <Error> =
				%% Line 380
				apply 'error'/1
				    ({_cor6,_cor1})
			    in  %% Line 381
				{Error,_cor2}
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'analysis'/1 =
    %% Line 384
    fun (_cor0) ->
	%% Line 385
	apply 'analysis'/2
	    (_cor0, 'functions')
'analysis'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined_function_calls','functions'> when 'true' ->
	      %% Line 389
	      [40|[88|[67|[32|[45|[32|[85|[67|[41|[32|[124|[124|[32|[40|[88|[85|[32|[45|[32|[88|[32|[45|[32|[66|[41]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 390
	  <'undefined_functions','modules'> when 'true' ->
	      %% Line 393
	      [88|[85|[32|[45|[32|[88|[32|[45|[32|[66]]]]]]]]]]
	  %% Line 394
	  <'undefined_functions','functions'> when 'true' ->
	      %% Line 396
	      [88|[85|[32|[45|[32|[114|[97|[110|[103|[101|[32|[85|[67|[32|[45|[32|[88|[32|[45|[32|[66]]]]]]]]]]]]]]]]]]]]]
	  %% Line 397
	  <'locals_not_used','functions'> when 'true' ->
	      %% Line 402
	      [76|[32|[42|[32|[40|[40|[85|[85|[32|[43|[32|[88|[85|[32|[45|[32|[76|[85|[41|[32|[43|[32|[100|[111|[109|[97|[105|[110|[32|[69|[69|[32|[43|[32|[114|[97|[110|[103|[101|[32|[69|[69|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 403
	  <'exports_not_used',_cor6> when 'true' ->
	      %% Line 405
	      [88|[32|[45|[32|[88|[85]]]]]]
	  %% Line 406
	  <{'call',F},'functions'> when 'true' ->
	      %% Line 407
	      apply 'make_query'/2
		  ([114|[97|[110|[103|[101|[32|[40|[69|[32|[124|[32|[126|[119|[32|[58|[32|[70|[117|[110|[41]]]]]]]]]]]]]]]]]]]], [F|[]])
	  %% Line 408
	  <{'use',F},'functions'> when 'true' ->
	      %% Line 409
	      apply 'make_query'/2
		  ([100|[111|[109|[97|[105|[110|[32|[40|[69|[32|[124|[124|[32|[126|[119|[32|[58|[32|[70|[117|[110|[41]]]]]]]]]]]]]]]]]]]]]], [F|[]])
	  %% Line 410
	  <{'module_call',M},_cor7> when 'true' ->
	      %% Line 411
	      apply 'make_query'/2
		  ([114|[97|[110|[103|[101|[32|[40|[77|[69|[32|[124|[32|[126|[119|[32|[58|[32|[77|[111|[100|[41]]]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 412
	  <{'module_use',M},_cor8> when 'true' ->
	      %% Line 413
	      apply 'make_query'/2
		  ([100|[111|[109|[97|[105|[110|[32|[40|[77|[69|[32|[124|[124|[32|[126|[119|[32|[58|[32|[77|[111|[100|[41]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 414
	  <{'application_call',A},_cor9> when 'true' ->
	      %% Line 415
	      apply 'make_query'/2
		  ([114|[97|[110|[103|[101|[32|[40|[65|[69|[32|[124|[32|[126|[119|[32|[58|[32|[65|[112|[112|[41]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 416
	  <{'application_use',A},_cor10> when 'true' ->
	      %% Line 417
	      apply 'make_query'/2
		  ([100|[111|[109|[97|[105|[110|[32|[40|[65|[69|[32|[124|[124|[32|[126|[119|[32|[58|[32|[65|[112|[112|[41]]]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 418
	  <{'release_call',R},_cor11> when 'true' ->
	      %% Line 419
	      apply 'make_query'/2
		  ([114|[97|[110|[103|[101|[32|[40|[82|[69|[32|[124|[32|[126|[119|[32|[58|[32|[82|[101|[108|[41]]]]]]]]]]]]]]]]]]]]], [R|[]])
	  %% Line 420
	  <{'release_use',R},_cor12> when 'true' ->
	      %% Line 421
	      apply 'make_query'/2
		  ([100|[111|[109|[97|[105|[110|[32|[40|[82|[69|[32|[124|[124|[32|[126|[119|[32|[58|[32|[82|[101|[108|[41]]]]]]]]]]]]]]]]]]]]]]], [R|[]])
	  %% Line 422
	  <'deprecated_function_calls','functions'> when 'true' ->
	      %% Line 423
	      [88|[67|[32|[124|[124|[32|[68|[70]]]]]]]]
	  %% Line 424
	  <{'deprecated_function_calls',Flag},'functions'> when 'true' ->
	      %% Line 425
	      case apply 'deprecated_flag'/1
		       (Flag) of
		%% Line 426
		<'undefined'> when 'true' ->
		    'error'
		%% Line 427
		<I> when 'true' ->
		    apply 'make_query'/2
			([88|[67|[32|[124|[124|[32|[68|[70|[95|[126|[119]]]]]]]]]]], [I|[]])
	      end
	  %% Line 429
	  <'deprecated_functions',_cor13> when 'true' ->
	      %% Line 430
	      [88|[85|[32|[42|[32|[68|[70]]]]]]]
	  %% Line 431
	  <{'deprecated_functions',Flag},_cor14> when 'true' ->
	      %% Line 432
	      case apply 'deprecated_flag'/1
		       (Flag) of
		%% Line 433
		<'undefined'> when 'true' ->
		    'error'
		%% Line 434
		<I> when 'true' ->
		    apply 'make_query'/2
			([88|[85|[32|[42|[32|[68|[70|[95|[126|[119]]]]]]]]]], [I|[]])
	      end
	  %% Line 436
	  <_cor15,_cor16> when 'true' ->
	      %% Line 437
	      'error'
	end
'set_default'/3 =
    %% Line 440
    fun (_cor2,_cor1,_cor0) ->
	%% Line 441
	case apply 'get_default'/2
		 (_cor2, _cor1) of
	  %% Line 442
	  <{'ok',OldValue}> when 'true' ->
	      let <Values> =
		  %% Line 443
		  apply 'option_values'/2
		      ([_cor1|[]], _cor2)
	      in  %% Line 444
		  case call 'xref_utils':'options'
			   ([{_cor1,_cor0}|[]], Values) of
		    %% Line 445
		    <{_cor10,[]}> when 'true' ->
			let <NewState> =
			    %% Line 446
			    apply 'set_def'/3
				(_cor1, _cor0, _cor2)
			in  %% Line 447
			    {'ok',OldValue,NewState}
		    %% Line 448
		    <{_cor11,Unknown}> when 'true' ->
			%% Line 449
			apply 'error'/1
			    ({'invalid_options',Unknown})
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 451
	  <Error> when 'true' ->
	      %% Line 452
	      Error
	end
'get_default'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 457
		apply 'current_default'/2
		    (_cor1, _cor0)
	in  %% Line 457
	    case _cor2 of
	      %% Line 458
	      <{'EXIT',_cor6}> when 'true' ->
		  %% Line 459
		  apply 'error'/1
		      ({'invalid_options',[_cor0|[]]})
	      %% Line 460
	      <Value> when 'true' ->
		  %% Line 461
		  {'ok',Value}
	    end
'get_default'/1 =
    %% Line 465
    fun (_cor0) ->
	let <Fun> =
	    %% Line 466
	    ( fun (_cor2) ->
		  let <V> =
		      apply 'current_default'/2
			  (_cor0, _cor2)
		  in  {_cor2,V}
	      -| [{'id',{0,0,'-get_default/1-fun-0-'}}] )
	in  %% Line 467
	    call 'lists':'map'
		(Fun, ['builtins'|['recurse'|['verbose'|['warnings']]]])
'set_default'/2 =
    %% Line 470
    fun (_cor1,_cor0) ->
	let <ValidOptions> =
	    %% Line 472
	    apply 'option_values'/2
		(['builtins'|['recurse'|['verbose'|['warnings']]]], _cor1)
	in  %% Line 473
	    case call 'xref_utils':'options'
		     (_cor0, ValidOptions) of
	      %% Line 474
	      <{Values = [[_cor8|[]]|[[_cor9|[]]|[[_cor10|[]]|[[_cor11|[]]|[]]]]],[]}> when 'true' ->
		  let <_cor4> =
		      %% Line 475
		      apply 'set_defaults'/3
			  (['builtins'|['recurse'|['verbose'|['warnings']]]], Values, _cor1)
		  in  %% Line 475
		      {'ok',_cor4}
	      %% Line 476
	      <_cor12> when 'true' ->
		  %% Line 477
		  apply 'error'/1
		      ({'invalid_options',_cor0})
	    end
'format_error'/1 =
    %% Line 480
    fun (_cor0) ->
	case _cor0 of
	  <{'error',Module,Error}> when 'true' ->
	      %% Line 481
	      call Module:'format_error'
		  (Error)
	  %% Line 482
	  <{'invalid_options',Options}> when 'true' ->
	      %% Line 483
	      call 'io_lib':'format'
		  ([85|[110|[107|[110|[111|[119|[110|[32|[111|[112|[116|[105|[111|[110|[40|[115|[41|[32|[111|[114|[32|[105|[110|[118|[97|[108|[105|[100|[32|[111|[112|[116|[105|[111|[110|[32|[118|[97|[108|[117|[101|[40|[115|[41|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 484
																																							[Options|[]])
	  %% Line 485
	  <{'invalid_filename',Term}> when 'true' ->
	      %% Line 486
	      call 'io_lib':'format'
		  ([65|[32|[102|[105|[108|[101|[32|[110|[97|[109|[101|[32|[40|[97|[32|[115|[116|[114|[105|[110|[103|[41|[32|[119|[97|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Term|[]])
	  %% Line 487
	  <{'no_debug_info',FileName}> when 'true' ->
	      %% Line 488
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[66|[69|[65|[77|[32|[102|[105|[108|[101|[32|[126|[116|[112|[32|[104|[97|[115|[32|[110|[111|[32|[100|[101|[98|[117|[103|[32|[105|[110|[102|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [FileName|[]])
	  %% Line 489
	  <{'invalid_path',Term}> when 'true' ->
	      %% Line 490
	      call 'io_lib':'format'
		  ([65|[32|[112|[97|[116|[104|[32|[40|[97|[32|[108|[105|[115|[116|[32|[111|[102|[32|[115|[116|[114|[105|[110|[103|[115|[41|[32|[119|[97|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Term|[]])
	  %% Line 491
	  <{'invalid_query',Term}> when 'true' ->
	      %% Line 492
	      call 'io_lib':'format'
		  ([65|[32|[113|[117|[101|[114|[121|[32|[40|[97|[32|[115|[116|[114|[105|[110|[103|[32|[111|[114|[32|[97|[110|[32|[97|[116|[111|[109|[41|[32|[119|[97|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Term|[]])
	  %% Line 493
	  <{'not_user_variable',Variable}> when 'true' ->
	      %% Line 494
	      call 'io_lib':'format'
		  ([126|[116|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[117|[115|[101|[114|[32|[118|[97|[114|[105|[97|[98|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Variable|[]])
	  %% Line 495
	  <{'unknown_analysis',Term}> when 'true' ->
	      %% Line 496
	      call 'io_lib':'format'
		  ([126|[116|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[112|[114|[101|[100|[101|[102|[105|[110|[101|[100|[32|[97|[110|[97|[108|[121|[115|[105|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Term|[]])
	  %% Line 497
	  <{'module_mismatch',Module,ReadModule}> when 'true' ->
	      %% Line 498
	      call 'io_lib':'format'
		  ([78|[97|[109|[101|[32|[111|[102|[32|[114|[101|[97|[100|[32|[109|[111|[100|[117|[108|[101|[32|[126|[116|[112|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[97|[110|[97|[108|[121|[122|[101|[100|[32|[109|[111|[100|[117|[108|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 499
																																													   [ReadModule|[Module|[]]])
	  %% Line 500
	  <{'release_clash',{Release,Dir,OldDir}}> when 'true' ->
	      %% Line 501
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[126|[116|[112|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[126|[116|[112|[32|[99|[108|[97|[115|[104|[101|[115|[32|[119|[105|[116|[104|[32|[114|[101|[108|[101|[97|[115|[101|[32|[97|[108|[114|[101|[97|[100|[121|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 502
																																																							   [Release|[Dir|[OldDir|[]]]])
	  %% Line 503
	  <{'application_clash',{Application,Dir,OldDir}}> when 'true' ->
	      %% Line 504
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[116|[112|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[126|[116|[112|[32|[99|[108|[97|[115|[104|[101|[115|[32|[119|[105|[116|[104|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[97|[108|[114|[101|[97|[100|[121|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 505
																																																												       [Application|[Dir|[OldDir|[]]]])
	  %% Line 506
	  <{'module_clash',{Module,Dir,OldDir}}> when 'true' ->
	      %% Line 507
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[109|[111|[100|[117|[108|[101|[32|[126|[116|[112|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[126|[116|[112|[32|[99|[108|[97|[115|[104|[101|[115|[32|[119|[105|[116|[104|[32|[109|[111|[100|[117|[108|[101|[32|[97|[108|[114|[101|[97|[100|[121|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 508
																																																						 [Module|[Dir|[OldDir|[]]]])
	  %% Line 509
	  <{'no_such_release',Name}> when 'true' ->
	      %% Line 510
	      call 'io_lib':'format'
		  ([84|[104|[101|[114|[101|[32|[105|[115|[32|[110|[111|[32|[97|[110|[97|[108|[121|[122|[101|[100|[32|[114|[101|[108|[101|[97|[115|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 511
	  <{'no_such_application',Name}> when 'true' ->
	      %% Line 512
	      call 'io_lib':'format'
		  ([84|[104|[101|[114|[101|[32|[105|[115|[32|[110|[111|[32|[97|[110|[97|[108|[121|[122|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 513
	  <{'no_such_module',Name}> when 'true' ->
	      %% Line 514
	      call 'io_lib':'format'
		  ([84|[104|[101|[114|[101|[32|[105|[115|[32|[110|[111|[32|[97|[110|[97|[108|[121|[122|[101|[100|[32|[109|[111|[100|[117|[108|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 515
	  <{'no_such_info',Term}> when 'true' ->
	      %% Line 516
	      call 'io_lib':'format'
		  ([126|[116|[112|[32|[105|[115|[32|[110|[111|[116|[32|[111|[110|[101|[32|[111|[102|[32|[39|[109|[111|[100|[117|[108|[101|[115|[39|[44|[32|[39|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[39|[44|[32|[39|[114|[101|[108|[101|[97|[115|[101|[115|[39|[32|[97|[110|[100|[32|[39|[108|[105|[98|[114|[97|[114|[105|[101|[115|[39|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 517
																																																						[Term|[]])
	  %% Line 518
	  <E> when 'true' ->
	      %% Line 519
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'check_name'/1 =
    %% Line 525
    fun (_cor0) ->
	case _cor0 of
	  <[N|[]]>
	      when call 'erlang':'is_atom'
		    (N) ->
	      'true'
	  %% Line 526
	  <_cor2> when 'true' ->
	      'false'
	end
'do_update'/3 =
    %% Line 528
    fun (_cor2,_cor1,_cor0) ->
	let <Changed> =
	    %% Line 529
	    apply 'updated_modules'/1
		(_cor0)
	in  let <Fun> =
		%% Line 530
		( fun (_cor6,_cor5) ->
		      case <_cor6,_cor5> of
			<{Mod,File},S> when 'true' ->
			    %% Line 531
			    case apply 'do_replace_module'/5
				     (Mod, File, _cor2, _cor1, S) of
			      <{'ok',_X_M,NS}> when 'true' ->
				  %% Line 532
				  NS
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			( <_cor8,_cor7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor8,_cor7})
				-| [{'function_name',{'-do_update/3-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-do_update/3-fun-0-'}}] )
	    in  let <NewState> =
		    %% Line 534
		    call 'lists':'foldl'
			(Fun, _cor0, Changed)
		in  let <_cor11> =
			%% Line 535
			call 'sofs':'a_function'
			    (Changed)
		    in  let <_cor12> =
			    %% Line 535
			    call 'sofs':'domain'
				(_cor11)
			in  let <_cor13> =
				%% Line 535
				call 'sofs':'to_external'
				    (_cor12)
			    in  %% Line 535
				{'ok',NewState,_cor13}
'updated_modules'/1 =
    %% Line 538
    fun (_cor0) ->
	let <Fun> =
	    %% Line 539
	    ( fun (_cor7,_cor6) ->
		  case <_cor7,_cor6> of
		    <{M,XMod},L> when 'true' ->
			%% Line 540
			( case XMod of
			    ( <( {'xref_mod',_cor15,_cor16,_cor17,_rec13,_cor18,_cor19,_cor20,_cor21}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <File> =
				      %% Line 541
				      apply 'module_file'/1
					  (XMod)
				  in  %% Line 542
				      case call 'xref_utils':'file_info'
					       (File) of
					%% Line 543
					<{'ok',{_cor23,'file','readable',MTime}}>
					    when call 'erlang':'=/='
						  (MTime,
						   _rec13) ->
					    %% Line 544
					    [{M,File}|L]
					%% Line 545
					<_X_Else> when 'true' ->
					    %% Line 546
					    L
				      end
			      -| ['compiler_generated'] )
			    ( <_cor22> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xref_mod'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor9,_cor8> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor9,_cor8})
			    -| [{'function_name',{'-updated_modules/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-updated_modules/1-fun-0-'}}] )
	in  %% Line 549
	    ( case _cor0 of
		( <( {'xref',_cor24,_cor25,_cor26,_rec14,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor13> =
			  call 'dict':'to_list'
			      (_rec14)
		      in  call 'lists':'foldl'
			      (Fun, [], _cor13)
		  -| ['compiler_generated'] )
		( <_cor35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'do_forget'/4 =
    %% Line 551
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Variable|Variables],Vars,Vs,State> when 'true' ->
	      %% Line 552
	      case call 'dict':'find'
		       (Variable, Vars) of
		%% Line 553
		<{'ok',{'xref_var',_cor22,_cor23,'user',_cor24,_cor25}}> when 'true' ->
		    %% Line 554
		    apply 'do_forget'/4
			(Variables, Vars, Vs, State)
		%% Line 555
		<_cor26> when 'true' ->
		    %% Line 556
		    apply 'error'/1
			({'not_user_variable',Variable})
	      end
	  %% Line 558
	  <[],Vars,Vs,State> when 'true' ->
	      let <Fun> =
		  %% Line 559
		  ( fun (_cor9,_cor8) ->
			%% Line 560
			case call 'dict':'find'
				 (_cor9, _cor8) of
			  <{'ok',{'xref_var',_cor27,Value,_cor28,_cor29,_cor30}}> when 'true' ->
			      let <VT1> =
				  %% Line 561
				  call 'xref_compiler':'update_graph_counter'
				      (Value, -1, _cor8)
			      in  %% Line 562
				  call 'dict':'erase'
				      (_cor9, VT1)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-do_forget/4-fun-0-'}}] )
	      in  let <NewVars> =
		      %% Line 564
		      call 'lists':'foldl'
			  (Fun, Vars, Vs)
		  in  %% Line 565
		      case State of
			<{'xref',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
			    let <_cor16> =
				call 'erlang':'setelement'
				    (4, State, NewVars)
			    in  %% Line 566
				{'ok',_cor16}
			( <_cor43> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xref'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'do_forget',4}}] )
	    -| ['compiler_generated'] )
	end
'do_replace_module'/5 =
    %% Line 569
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 570
	case apply 'do_remove_module'/2
		 (_cor0, _cor4) of
	  <{'ok',OldXMod,State1}> when 'true' ->
	      %% Line 571
	      ( case OldXMod of
		  ( <( {'xref_mod',_cor18,_rec16,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 573
			case apply 'do_add_a_module'/6
				 (_cor3, _rec16, _cor21, _cor2, _cor1, State1) of
			  %% Line 574
			  <{'ok',[_cor34|[]],NewState}>
			      when call 'erlang':'=:='
				    (_cor34,
				     _cor4) ->
			      %% Line 575
			      {'ok',_cor4,NewState}
			  %% Line 576
			  <{'ok',[ReadModule|[]],_X_State}> when 'true' ->
			      %% Line 577
			      apply 'throw_error'/1
				  ({'module_mismatch',_cor4,ReadModule})
			  %% Line 578
			  <{'ok',[],_X_NewState}> when 'true' ->
			      %% Line 579
			      apply 'throw_error'/1
				  ({'no_debug_info',_cor3})
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref_mod'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'do_replace_application'/6 =
    %% Line 582
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 583
	case apply 'do_remove_application'/2
		 (_cor0, _cor5) of
	  <{'ok',OldXApp,State1}> when 'true' ->
	      %% Line 584
	      ( case OldXApp of
		  ( <( {'xref_app',_cor19,_rec18,_cor20,_cor21}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 588
			apply 'do_add_application'/7
			    (_cor4, _rec18, [_cor19|[]], _cor3, _cor2, _cor1, State1)
		    -| ['compiler_generated'] )
		  ( <_cor22> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref_app'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'do_add_release'/6 =
    %% Line 591
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 592
	case apply 'is_filename'/1
		 (_cor5) of
	  <'ok'> when 'true' ->
	      %% Line 593
	      case call 'xref_utils':'release_directory'
		       (_cor5, 'true', [101|[98|[105|[110]]]]) of
		%% Line 594
		<{'ok',ReleaseDirName,ApplDir,Dirs}> when 'true' ->
		    let <ApplDirs> =
			%% Line 595
			call 'xref_utils':'select_last_application_version'
			    (Dirs)
		    in  let <_cor9> =
			    %% Line 596
			    case _cor4 of
			      %% Line 597
			      <[[]]> when 'true' ->
				  ReleaseDirName
			      %% Line 598
			      <[Name|[]]> when 'true' ->
				  Name
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
			in  let <XRel> = {%% Line 600
				 'xref_rel',_cor9,%% Line 600
						  ApplDir}
			    in  let <NewState> =
				    %% Line 601
				    apply 'do_add_release'/2
					(_cor0, XRel)
				in  %% Line 602
				    apply 'add_rel_appls'/6
					(ApplDirs, [_cor9|[]], _cor3, _cor2, _cor1, NewState)
		%% Line 603
		<Error> when 'true' ->
		    %% Line 604
		    call 'erlang':'throw'
			(Error)
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'do_add_release'/2 =
    %% Line 607
    fun (_cor1,_cor0) ->
	%% Line 608
	( case _cor0 of
	    ( <( {'xref_rel',_rec20,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 609
		  ( case _cor1 of
		      ( <( {'xref',_cor23,_cor24,_cor25,_cor26,_cor27,_rec21,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'dict':'find'
				     (_rec20, _rec21) of
			      %% Line 610
			      <{'ok',OldXRel}> when 'true' ->
				  %% Line 612
				  ( case OldXRel of
				      ( <( {'xref_rel',_cor37,_rec23}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 613
					    apply 'throw_error'/1
						({'release_clash',{_rec20,_cor21,_rec23}})
					-| ['compiler_generated'] )
				      ( <_cor38> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xref_rel'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 614
			      <'error'> when 'true' ->
				  let <D1> =
				      %% Line 615
				      call 'dict':'store'
					  (_rec20, _cor0, _rec21)
				  in  %% Line 616
				      call 'erlang':'setelement'
					  (7, _cor1, D1)
			      ( <_cor18> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor18})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor34> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xref'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref_rel'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_rel_appls'/6 =
    %% Line 619
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[ApplDir|ApplDirs],Release,OB,OV,OW,State> when 'true' ->
	      %% Line 620
	      case %% Line 621
		   apply 'add_appldir'/7
		       (ApplDir, Release, [[]], OB, OV, OW, State) of
		<{'ok',_X_AppName,NewState}> when 'true' ->
		    %% Line 622
		    apply 'add_rel_appls'/6
			(ApplDirs, Release, OB, OV, OW, NewState)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 623
	  <[],[Release|[]],_X_OB,_X_OV,_X_OW,NewState> when 'true' ->
	      %% Line 624
	      {'ok',Release,NewState}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'add_rel_appls',6}}] )
	    -| ['compiler_generated'] )
	end
'do_add_application'/7 =
    %% Line 626
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 627
	case apply 'is_filename'/1
		 (_cor6) of
	  <'ok'> when 'true' ->
	      %% Line 628
	      case call 'xref_utils':'select_application_directories'
		       ([_cor6|[]], [101|[98|[105|[110]]]]) of
		%% Line 629
		<{'ok',[ApplD|[]]}> when 'true' ->
		    %% Line 630
		    apply 'add_appldir'/7
			(ApplD, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
		%% Line 631
		<Error> when 'true' ->
		    %% Line 632
		    call 'erlang':'throw'
			(Error)
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'add_appldir'/7 =
    %% Line 636
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 637
	case _cor6 of
	  <{AppName0,Vsn,Dir}> when 'true' ->
	      let <_cor9> =
		  %% Line 638
		  case _cor4 of
		    %% Line 639
		    <[[]]> when 'true' ->
			AppName0
		    %% Line 640
		    <[N|[]]> when 'true' ->
			N
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      in  let <AppInfo> =
		      %% Line 642
		      {'xref_app',_cor9,_cor5,%% Line 643
					      Vsn,%% Line 643
						  Dir}
		  in  let <State1> =
			  %% Line 644
			  apply 'do_add_application'/2
			      (_cor0, AppInfo)
		      in  %% Line 645
			  case %% Line 646
			       apply 'do_add_directory'/7
				   (Dir, [_cor9|[]], _cor3, 'false', _cor2, _cor1, State1) of
			    <{'ok',_X_Modules,NewState}> when 'true' ->
				%% Line 647
				{'ok',_cor9,NewState}
			    ( <_cor13> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor13})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'do_add_application'/2 =
    %% Line 650
    fun (_cor1,_cor0) ->
	%% Line 651
	( case _cor0 of
	    ( <( {'xref_app',_rec26,_cor21,_cor22,_cor23}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 652
		  ( case _cor1 of
		      ( <( {'xref',_cor25,_cor26,_cor27,_cor28,_rec27,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'dict':'find'
				     (_rec26, _rec27) of
			      %% Line 653
			      <{'ok',OldXApp}> when 'true' ->
				  %% Line 655
				  ( case OldXApp of
				      ( <( {'xref_app',_cor41,_cor42,_cor43,_rec29}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 656
					    apply 'throw_error'/1
						({'application_clash',{_rec26,_cor23,_rec29}})
					-| ['compiler_generated'] )
				      ( <_cor44> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xref_app'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 657
			      <'error'> when 'true' ->
				  let <D1> =
				      %% Line 658
				      call 'dict':'store'
					  (_rec26, _cor0, _rec27)
				  in  %% Line 659
				      call 'erlang':'setelement'
					  (6, _cor1, D1)
			      ( <_cor18> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor18})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor36> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xref'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref_app'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_add_directory'/7 =
    %% Line 663
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 664
	case apply 'is_filename'/1
		 (_cor6) of
	  <'ok'> when 'true' ->
	      %% Line 665
	      case %% Line 666
		   call 'xref_utils':'scan_directory'
		       (_cor6, _cor3, [[46|[98|[101|[97|[109]]]]]], [[46|[106|[97|[109]]]]]) of
		<{FileNames,Errors,Jams,Unreadable}> when 'true' ->
		    do  %% Line 667
			apply 'warnings'/3
			    (_cor1, 'jam', Jams)
			do  %% Line 668
			    apply 'warnings'/3
				(_cor1, 'unreadable', Unreadable)
			    %% Line 669
			    case Errors of
			      %% Line 670
			      <[]> when 'true' ->
				  %% Line 671
				  apply 'do_add_modules'/7
				      (FileNames, _cor5, _cor4, _cor2, _cor1, _cor0, [])
			      %% Line 672
			      <[Error|_cor17]> when 'true' ->
				  %% Line 673
				  call 'erlang':'throw'
				      (Error)
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor9})
				-| ['compiler_generated'] )
			    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'do_add_modules'/7 =
    %% Line 676
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_AppName,_X_OB,_X_OV,_X_OW,State,Modules> when 'true' ->
	      let <_cor7> =
		  %% Line 677
		  call 'lists':'sort'
		      (Modules)
	      in  %% Line 677
		  {'ok',_cor7,State}
	  %% Line 678
	  <[File|Files],AppName,OB,OV,OW,State,Modules> when 'true' ->
	      %% Line 679
	      case apply 'do_add_module'/6
		       (File, AppName, OB, OV, OW, State) of
		<{'ok',M,NewState}> when 'true' ->
		    let <_cor9> =
			%% Line 680
			call 'erlang':'++'
			    (M, Modules)
		    in  %% Line 680
			apply 'do_add_modules'/7
			    (Files, AppName, OB, OV, OW, NewState, _cor9)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_add_modules',7}}] )
	    -| ['compiler_generated'] )
	end
'do_add_a_module'/6 =
    %% Line 683
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 684
	case call 'xref_utils':'split_filename'
		 (_cor5, [46|[98|[101|[97|[109]]]]]) of
	  %% Line 685
	  <'false'> when 'true' ->
	      %% Line 686
	      apply 'throw_error'/1
		  ({'invalid_filename',_cor5})
	  %% Line 687
	  <Splitname> when 'true' ->
	      %% Line 688
	      apply 'do_add_module'/6
		  (Splitname, _cor4, _cor3, _cor2, _cor1, _cor0)
	end
'do_add_module'/6 =
    %% Line 694
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{Dir,Basename},AppName,Builtins,Verbose,Warnings,State> when 'true' ->
	      let <File> =
		  %% Line 695
		  call 'filename':'join'
		      (Dir, Basename)
	      in  %% Line 696
		  case %% Line 697
		       apply 'do_add_module1'/7
			   (Dir, File, AppName, Builtins, Verbose, Warnings, State) of
		    <{'ok',M,Bad,NewState}> when 'true' ->
			let <_cor10> =
			    %% Line 698
			    ( fun (_cor8) ->
				  case _cor8 of
				    <{Tag,B}> when 'true' ->
					apply 'warnings'/3
					    (Warnings, Tag, [[File|[B|[]]]|[]])
				    ( <_cor9> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9})
					    -| [{'function_name',{'-do_add_module/6-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-do_add_module/6-fun-0-'}}] )
			in  do  %% Line 698
				call 'lists':'filter'
				    (_cor10, Bad)
				%% Line 699
				{'ok',M,NewState}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'do_add_module',6}}] )
	    -| ['compiler_generated'] )
	end
'do_add_module1'/7 =
    %% Line 701
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 702
	    apply 'message'/3
		(_cor2, 'reading_beam', [_cor5|[]])
	    %% Line 703
	    ( case _cor0 of
		( <( {'xref',_cor31,_rec32,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Me> =
			  %% Line 704
			  call 'erlang':'self'
			      ()
		      in  let <Fun> =
			      %% Line 705
			      ( fun () ->
				    let <_cor12> =
					call 'erlang':'self'
					    ()
				    in  let <_cor11> =
					    apply 'abst'/3
						(_cor5, _cor3, _rec32)
					in  call 'erlang':'!'
						(Me, {_cor12,_cor11})
				-| [{'id',{0,0,'-do_add_module1/7-fun-0-'}}] )
			  in  %% Line 706
			      case call 'xref_utils':'subprocess'
				       (Fun, ['link'|[{'min_heap_size',100000}]]) of
				%% Line 707
				<{'ok',_X_M,'no_abstract_code'}>
				    when call 'erlang':'=:='
					  (_cor2,
					   'true') ->
				    do  %% Line 708
					apply 'message'/3
					    (_cor2, 'skipped_beam', [])
					%% Line 709
					{'ok',[],[],_cor0}
				%% Line 710
				<{'ok',_X_M,'no_abstract_code'}>
				    when let <_cor14> =
					  call 'erlang':'=:='
					      (_cor2, 'false')
				      in  let <_cor15> =
					      call 'erlang':'is_boolean'
						  (_cor2)
					  in  call 'erlang':'and'
						  (_cor14, _cor15) ->
				    do  %% Line 711
					apply 'message'/3
					    (_cor1, 'no_debug_info', [_cor5|[]])
					%% Line 712
					{'ok',[],[],_cor0}
				%% Line 713
				<{'ok',M,Data,UnresCalls0}> when 'true' ->
				    let <UnresCalls> =
					%% Line 716
					call 'lists':'usort'
					    (UnresCalls0)
				    in  do  %% Line 717
					    apply 'message'/3
						(_cor2, 'done', [])
					    let <NoUnresCalls> =
						%% Line 718
						call 'erlang':'length'
						    (UnresCalls)
					    in  do  %% Line 719
						    case NoUnresCalls of
						      %% Line 720
						      <0> when 'true' ->
							  'ok'
						      %% Line 721
						      <1> when 'true' ->
							  apply 'warnings'/3
							      (_cor1, 'unresolved_summary1', [[M|[]]|[]])
						      %% Line 722
						      <N> when 'true' ->
							  apply 'warnings'/3
							      (_cor1, 'unresolved_summary', [[M|[N|[]]]|[]])
						    end
						    %% Line 724
						    case call 'xref_utils':'file_info'
							     (_cor5) of
						      %% Line 725
						      <{'ok',{_cor43,_cor44,_cor45,Time}}> when 'true' ->
							  let <XMod> =
							      %% Line 728
							      {'xref_mod',M,_cor4,_cor6,Time,_cor3,'undefined',%% Line 730
													       NoUnresCalls,'undefined'}
							  in  %% Line 731
							      apply 'do_add_module'/4
								  (_cor0, XMod, UnresCalls, Data)
						      %% Line 726
						      <Error> when 'true' ->
							  call 'erlang':'throw'
							      (Error)
						    end
				%% Line 732
				<Error> when 'true' ->
				    do  %% Line 733
					apply 'message'/3
					    (_cor2, 'error', [])
					%% Line 734
					call 'erlang':'throw'
					    (Error)
			      end
		  -| ['compiler_generated'] )
		( <_cor42> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'abst'/3 =
    %% Line 737
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Builtins,Mode>
	      when call 'erlang':'=:='
		    (Mode,
		     'functions') ->
	      %% Line 738
	      case call 'beam_lib':'chunks'
		       (File, ['abstract_code'|['exports'|['attributes']]]) of
		%% Line 739
		<{'ok',{M,[{'abstract_code',NoA}|[_X_X|[_X_A|[]]]]}}>
		    when call 'erlang':'=:='
			  (NoA,
			   'no_abstract_code') ->
		    %% Line 740
		    {'ok',M,NoA}
		%% Line 741
		<{'ok',{M,[{'abstract_code',{'abstract_v1',Forms}}|%% Line 742
								   [{'exports',X0}|[{'attributes',A}|[]]]]}}> when 'true' ->
		    let <X> =
			%% Line 744
			call 'xref_utils':'fa_to_mfa'
			    (X0, M)
		    in  let <D> =
			    %% Line 745
			    apply 'deprecated'/3
				(A, X, M)
			in  %% Line 746
			    call 'xref_reader':'module'
				(M, Forms, Builtins, X, D)
		%% Line 747
		<{'ok',{M,[{'abstract_code',{'abstract_v2',Forms}}|%% Line 748
								   [{'exports',X0}|[{'attributes',A}|[]]]]}}> when 'true' ->
		    let <X> =
			%% Line 750
			call 'xref_utils':'fa_to_mfa'
			    (X0, M)
		    in  let <D> =
			    %% Line 751
			    apply 'deprecated'/3
				(A, X, M)
			in  %% Line 752
			    call 'xref_reader':'module'
				(M, Forms, Builtins, X, D)
		%% Line 753
		<{'ok',{M,[{'abstract_code',{'raw_abstract_v1',Code}}|%% Line 754
								      [{'exports',X0}|[{'attributes',A}|[]]]]}}> when 'true' ->
		    let <Forms0> =
			%% Line 756
			call 'epp':'interpret_file_attribute'
			    (Code)
		    in  %% Line 757
			case call 'sys_pre_expand':'module'
				 (Forms0, []) of
			  <{_cor33,_cor34,Forms,_cor35}> when 'true' ->
			      let <X> =
				  %% Line 758
				  apply 'mfa_exports'/3
				      (X0, A, M)
			      in  let <D> =
				      %% Line 759
				      apply 'deprecated'/3
					  (A, X, M)
				  in  %% Line 760
				      call 'xref_reader':'module'
					  (M, Forms, Builtins, X, D)
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor8})
			    -| ['compiler_generated'] )
			end
		%% Line 761
		<Error>
		    when try
			  let <_cor11> =
			      call 'erlang':'element'
				  (1, Error)
			  in  call 'erlang':'=:='
				  (_cor11, 'error')
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 762
		    Error
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 764
	  <File,Builtins,Mode>
	      when call 'erlang':'=:='
		    (Mode,
		     'modules') ->
	      %% Line 765
	      case call 'beam_lib':'chunks'
		       (File, ['exports'|['imports'|['attributes']]]) of
		%% Line 766
		<{'ok',{Mod,[{'exports',X0}|[{'imports',I0}|[{'attributes',At}|[]]]]}}> when 'true' ->
		    let <X1> =
			%% Line 767
			apply 'mfa_exports'/3
			    (X0, At, Mod)
		    in  let <_cor18> =
			    %% Line 768
			    ( fun (_cor16) ->
				  let <_cor14> =
				      apply 'predef_fun'/0
					  ()
				  in  let <_cor15> =
					  apply _cor14
					      (_cor16)
				      in  call 'erlang':'not'
					      (_cor15)
			      -| [{'id',{0,0,'-abst/3-fun-0-'}}] )
			in  let <X> =
				%% Line 768
				call 'lists':'filter'
				    (_cor18, X1)
			    in  let <D> =
				    %% Line 769
				    apply 'deprecated'/3
					(At, X, Mod)
				in  let <_cor26> =
					%% Line 770
					case Builtins of
					  %% Line 771
					  <'true'> when 'true' ->
					      %% Line 772
					      I0
					  %% Line 773
					  <'false'> when 'true' ->
					      let <Fun> =
						  %% Line 774
						  ( fun (_cor22) ->
							case _cor22 of
							  <{M,F,A}> when 'true' ->
							      let <_cor21> =
								  %% Line 775
								  call 'xref_utils':'is_builtin'
								      (M, F, A)
							      in  %% Line 775
								  call 'erlang':'not'
								      (_cor21)
							  ( <_cor23> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor23})
								  -| [{'function_name',{'-abst/3-fun-1-',1}}] )
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-abst/3-fun-1-'}}] )
					      in  %% Line 777
						  call 'lists':'filter'
						      (Fun, I0)
					  ( <_cor25> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor25})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 779
					{'ok',Mod,{X,_cor26,D},[]}
		%% Line 780
		<Error>
		    when try
			  let <_cor28> =
			      call 'erlang':'element'
				  (1, Error)
			  in  call 'erlang':'=:='
				  (_cor28, 'error')
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 781
		    Error
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor29})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30})
		  -| [{'function_name',{'abst',3}}] )
	    -| ['compiler_generated'] )
	end
'mfa_exports'/3 =
    %% Line 784
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 786
	    case call 'xref_utils':'is_abstract_module'
		     (_cor1) of
	      %% Line 787
	      <'true'> when 'true' ->
		  %% Line 788
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[{F,A}|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'adjust_arity'/2
					      (F, A)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [{F,_cor6}|_cor7]
						-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor2)
		    -| ['list_comprehension'] )
	      %% Line 789
	      <'false'> when 'true' ->
		  _cor2
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
	in  %% Line 792
	    call 'xref_utils':'fa_to_mfa'
		(_cor9, _cor0)
'adjust_arity'/2 =
    %% Line 794
    fun (_cor1,_cor0) ->
	%% Line 795
	case call 'xref_utils':'is_static_function'
		 (_cor1, _cor0) of
	  %% Line 796
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 797
	  <'false'> when 'true' ->
	      call 'erlang':'-'
		  (_cor0, 1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'deprecated'/3 =
    %% Line 800
    fun (_cor2,_cor1,_cor0) ->
	%% Line 802
	case call 'lists':'keysearch'
		 ('deprecated', 1, _cor2) of
	  %% Line 803
	  <{'value',{'deprecated',D0}}> when 'true' ->
	      %% Line 804
	      apply 'depr'/5
		  (D0, _cor0, {[],[],[],[]}, _cor1, [])
	  %% Line 805
	  <'false'> when 'true' ->
	      %% Line 806
	      {{[],[],[],[]},[]}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'depr'/5 =
    %% Line 809
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[D|Depr],M,DF,X,Bad> when 'true' ->
	      %% Line 810
	      case apply 'depr_cat'/3
		       (D, M, X) of
		%% Line 811
		<{I,Dt}> when 'true' ->
		    let <_cor5> =
			%% Line 812
			call 'erlang':'element'
			    (I, DF)
		    in  let <_cor6> =
			    %% Line 812
			    call 'erlang':'++'
				(Dt, _cor5)
			in  let <NDF> =
				%% Line 812
				call 'erlang':'setelement'
				    (I, DF, _cor6)
			    in  %% Line 813
				apply 'depr'/5
				    (Depr, M, NDF, X, Bad)
		%% Line 814
		<'undefined'> when 'true' ->
		    %% Line 815
		    apply 'depr'/5
			(Depr, M, DF, X, [D|Bad])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 817
	  <[],_X_M,DF,_X_X,Bad> when 'true' ->
	      let <_cor9> =
		  %% Line 818
		  call 'lists':'reverse'
		      (Bad)
	      in  %% Line 818
		  {DF,_cor9}
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'depr',5}}] )
	    -| ['compiler_generated'] )
	end
'depr_cat'/3 =
    %% Line 820
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{F,A,Flg},M,X> when 'true' ->
	      %% Line 821
	      case apply 'deprecated_flag'/1
		       (Flg) of
		%% Line 822
		<'undefined'> when 'true' ->
		    'undefined'
		%% Line 823
		<I> when 'true' ->
		    apply 'depr_fa'/5
			(F, A, X, M, I)
	      end
	  %% Line 825
	  <{F,A},M,X> when 'true' ->
	      %% Line 826
	      apply 'depr_fa'/5
		  (F, A, X, M, 4)
	  %% Line 827
	  <'module',M,X> when 'true' ->
	      %% Line 828
	      apply 'depr_fa'/5
		  ('_', '_', X, M, 4)
	  %% Line 829
	  <_X_D,_X_M,_X_X> when 'true' ->
	      %% Line 830
	      'undefined'
	end
'depr_fa'/5 =
    %% Line 832
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'_','_',X,_X_M,I> when 'true' ->
	      %% Line 833
	      {I,X}
	  %% Line 834
	  <F,'_',X,_X_M,I>
	      when call 'erlang':'is_atom'
		    (F) ->
	      let <_cor7> =
		  %% Line 835
		  ( fun (_cor5) ->
			case _cor5 of
			  <{_cor18,F1,_cor19}> when 'true' ->
			      call 'erlang':'=:='
				  (F1, F)
			  ( <_cor6> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor6})
				  -| [{'function_name',{'-depr_fa/5-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-depr_fa/5-fun-0-'}}] )
	      in  let <_cor8> =
		      %% Line 835
		      call 'lists':'filter'
			  (_cor7, X)
		  in  %% Line 835
		      {I,_cor8}
	  %% Line 836
	  <F,A,_X_X,M,I>
	      when try
		    let <_cor9> =
			call 'erlang':'is_atom'
			    (F)
		    in  let <_cor10> =
			    call 'erlang':'is_integer'
				(A)
			in  let <_cor11> =
				call 'erlang':'>='
				    (A, 0)
			    in  let <_cor12> =
				    call 'erlang':'and'
					(_cor10, _cor11)
				in  call 'erlang':'and'
					(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 837
	      {I,[{M,F,A}|[]]}
	  %% Line 838
	  <_X_F,_X_A,_X_X,_X_M,_X_I> when 'true' ->
	      %% Line 839
	      'undefined'
	end
'deprecated_flag'/1 =
    %% Line 847
    fun (_cor0) ->
	case _cor0 of
	  <'next_version'> when 'true' ->
	      1
	  %% Line 848
	  <'next_major_release'> when 'true' ->
	      2
	  %% Line 849
	  <'eventually'> when 'true' ->
	      3
	  %% Line 850
	  <_cor2> when 'true' ->
	      'undefined'
	end
'do_add_module'/4 =
    %% Line 857
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 858
	( case _cor2 of
	    ( <( {'xref_mod',_rec33,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 859
		  ( case _cor3 of
		      ( <( {'xref',_cor24,_cor25,_cor26,_rec34,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'dict':'find'
				     (_rec33, _rec34) of
			      %% Line 860
			      <{'ok',OldXMod}> when 'true' ->
				  let <BF2> =
				      %% Line 861
				      apply 'module_file'/1
					  (_cor2)
				  in  let <BF1> =
					  %% Line 862
					  apply 'module_file'/1
					      (OldXMod)
				      in  %% Line 863
					  apply 'throw_error'/1
					      ({'module_clash',{_rec33,BF1,BF2}})
			      %% Line 864
			      <'error'> when 'true' ->
				  %% Line 865
				  apply 'do_add_module'/5
				      (_cor3, _rec33, _cor2, _cor1, _cor0)
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor11})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor35> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xref'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor23> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref_mod'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_add_module'/5 =
    %% Line 870
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S = {'xref',_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120},M,XMod,Unres0,Data>
	      when call 'erlang':'=:='
		    (_cor110,
		     'functions') ->
	      %% Line 871
	      case Data of
		<{DefAt0,LPreCAt0,XPreCAt0,LC0,XC0,X0,Attrs,Depr}> when 'true' ->
		    %% Line 873
		    case Attrs of
		      <{ALC0,AXC0,Bad0}> when 'true' ->
			  let <_cor13> =
			      %% Line 874
			      apply 'tspec'/1
				  ('func')
			  in  let <FT> =
				  %% Line 874
				  [_cor13|[]]
			      in  let <_cor15> =
				      %% Line 875
				      apply 'tspec'/1
					  ('fun_edge')
				  in  let <FET> =
					  %% Line 875
					  [_cor15|[]]
				      in  let <_cor17> =
					      %% Line 876
					      apply 'tspec'/1
						  ('pre_call_at')
					  in  let <PCA> =
						  %% Line 876
						  [_cor17|[]]
					      in  let <XPreCAt1> =
						      %% Line 878
						      call 'xref_utils':'xset'
							  (XPreCAt0, PCA)
						  in  let <LPreCAt1> =
							  %% Line 879
							  call 'xref_utils':'xset'
							      (LPreCAt0, PCA)
						      in  let <_cor21> =
							      %% Line 880
							      apply 'tspec'/1
								  ('def_at')
							  in  let <DefAt> =
								  %% Line 880
								  call 'xref_utils':'xset'
								      (DefAt0, [_cor21|[]])
							      in  let <X1> =
								      %% Line 881
								      call 'xref_utils':'xset'
									  (X0, FT)
								  in  let <XC1> =
									  %% Line 882
									  call 'xref_utils':'xset'
									      (XC0, FET)
								      in  let <LC1> =
									      %% Line 883
									      call 'xref_utils':'xset'
										  (LC0, FET)
									  in  let <AXC1> =
										  %% Line 884
										  call 'xref_utils':'xset'
										      (AXC0, PCA)
									      in  let <ALC1> =
										      %% Line 885
										      call 'xref_utils':'xset'
											  (ALC0, PCA)
										  in  let <UnresCalls> =
											  %% Line 886
											  call 'xref_utils':'xset'
											      (Unres0, PCA)
										      in  let <Unres> =
											      %% Line 887
											      call 'sofs':'domain'
												  (UnresCalls)
											  in  let <DefinedFuns> =
												  %% Line 889
												  call 'sofs':'domain'
												      (DefAt)
											      in  %% Line 890
												  case %% Line 891
												       apply 'extra_edges'/4
													   (AXC1, ALC1, Bad0, DefinedFuns) of
												    <{AXC,ALC,Bad1,LPreCAt2,XPreCAt2}> when 'true' ->
													let <_cor34> =
													    %% Line 892
													    ( fun (_cor32) ->
														  {'xref_attr',_cor32}
													      -| [{'id',{0,0,'-do_add_module/5-fun-0-'}}] )
													in  let <Bad> =
														%% Line 892
														call 'lists':'map'
														    (_cor34, Bad1)
													    in  let <LPreCAt> =
														    %% Line 893
														    call 'sofs':'union'
															(LPreCAt1, LPreCAt2)
														in  let <XPreCAt> =
															%% Line 894
															call 'sofs':'union'
															    (XPreCAt1, XPreCAt2)
														    in  let <_cor39> =
															    %% Line 895
															    call 'sofs':'no_elements'
																(LPreCAt)
															in  let <_cor38> =
																%% Line 895
																call 'sofs':'no_elements'
																    (XPreCAt)
															    in  let <NoCalls> =
																    %% Line 895
																    call 'erlang':'+'
																	(_cor39, _cor38)
																in  let <LCallAt> =
																	%% Line 896
																	call 'sofs':'relation_to_family'
																	    (LPreCAt)
																    in  let <XCallAt> =
																	    %% Line 897
																	    call 'sofs':'relation_to_family'
																		(XPreCAt)
																	in  let <CallAt> =
																		%% Line 898
																		call 'sofs':'family_union'
																		    (LCallAt, XCallAt)
																	    in  let <L> =
																		    %% Line 900
																		    call 'sofs':'difference'
																			(DefinedFuns, X1)
																		in  let <X> =
																			%% Line 901
																			call 'sofs':'difference'
																			    (DefinedFuns, L)
																		    in  let <XC> =
																			    %% Line 902
																			    call 'sofs':'union'
																				(XC1, AXC)
																			in  let <LC> =
																				%% Line 903
																				call 'sofs':'union'
																				    (LC1, ALC)
																			    in  %% Line 905
																				case apply 'depr_mod'/2
																					 (Depr, X) of
																				  <{DF1,DF_11,DF_21,DF_31,DBad}> when 'true' ->
																				      let <Self> =
																					  %% Line 908
																					  call 'erlang':'self'
																					      ()
																				      in  let <Fun> =
																					      %% Line 909
																					      ( fun () ->
																						    apply 'inter_graph'/6
																							(Self, X, L, LC, XC, CallAt)
																						-| [{'id',{0,0,'-do_add_module/5-fun-1-'}}] )
																					  in  %% Line 910
																					      case %% Line 911
																						   call 'xref_utils':'subprocess'
																						       (Fun, ['link'|[{'min_heap_size',100000}]]) of
																						<{EE,ECallAt}> when 'true' ->
																						    %% Line 914
																						    case %% Line 915
																							 apply 'pack'/1
																							     ([DefAt|[L|[X|[LCallAt|[XCallAt|[CallAt|[LC|[XC|[EE|[ECallAt|%% Line 916
																															  [DF1|[DF_11|[DF_21|[DF_31|[]]]]]]]]]]]]]]]) of
																						      <[DefAt2|[L2|[X2|[LCallAt2|[XCallAt2|[CallAt2|[LC2|[XC2|[EE2|[ECallAt2|[DF2|[DF_12|[DF_22|[DF_32|[]]]]]]]]]]]]]]]> when 'true' ->
																							  let <LU> =
																							      %% Line 922
																							      call 'sofs':'range'
																								  (LC2)
																							  in  let <LPredefined> =
																								  %% Line 924
																								  apply 'predefined_funs'/1
																								      (LU)
																							      in  let <MS> =
																								      %% Line 926
																								      call 'xref_utils':'xset'
																									  (M, 'atom')
																								  in  let <T> =
																									  %% Line 927
																									  call 'sofs':'from_sets'
																									      ({MS,DefAt2,L2,X2,LCallAt2,XCallAt2,CallAt2,%% Line 928
																															  LC2,%% Line 928
																															      XC2,%% Line 928
																																  LU,%% Line 928
																																     EE2,%% Line 928
																																	 ECallAt2,%% Line 928
																																		  Unres,%% Line 928
																																			LPredefined,%% Line 929
																																				    DF2,%% Line 929
																																					DF_12,%% Line 929
																																					      DF_22,%% Line 929
																																						    DF_32})
																								      in  %% Line 931
																									  ( case XMod of
																									      ( <( {'xref_mod',_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_rec35,_cor127}
																										   -| ['compiler_generated'] )> when 'true' ->
																										    let <Info> =
																											%% Line 932
																											apply 'no_info'/8
																											    (X2, L2, LC2, XC2, EE2, Unres, NoCalls, _rec35)
																										    in  let <_cor62> =
																											    %% Line 934
																											    call 'erlang':'setelement'
																												(9, XMod, T)
																											in  let <_cor64> =
																												%% Line 934
																												call 'erlang':'setelement'
																												    (7, _cor62, Info)
																											    in  let <_rec37> =
																												    %% Line 935
																												    call 'dict':'store'
																													(M, _cor64, _cor112)
																												in  let <_cor71> =
																													%% Line 935
																													call 'erlang':'setelement'
																													    (5, S, _rec37)
																												    in  let <_cor74> =
																													    %% Line 936
																													    call 'erlang':'++'
																														(DBad, Bad)
																													in  let <_cor73> =
																														%% Line 936
																														apply 'take_down'/1
																														    (_cor71)
																													    in  %% Line 936
																														{'ok',[M|[]],_cor74,_cor73}
																										-| ['compiler_generated'] )
																									      ( <_cor128> when 'true' ->
																										    ( call ( 'erlang'
																											     -| ['compiler_generated'] ):( 'error'
																															   -| ['compiler_generated'] )
																											  (( {'badrecord','xref_mod'}
																											     -| ['compiler_generated'] ))
																										      -| ['compiler_generated'] )
																										-| ['compiler_generated'] )
																									    end
																									    -| ['compiler_generated'] )
																						      ( <_cor52> when 'true' ->
																							    primop 'match_fail'
																								({'badmatch',_cor52})
																							-| ['compiler_generated'] )
																						    end
																						( <_cor51> when 'true' ->
																						      primop 'match_fail'
																							  ({'badmatch',_cor51})
																						  -| ['compiler_generated'] )
																					      end
																				  ( <_cor48> when 'true' ->
																					primop 'match_fail'
																					    ({'badmatch',_cor48})
																				    -| ['compiler_generated'] )
																				end
												    ( <_cor31> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_cor31})
												      -| ['compiler_generated'] )
												  end
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 937
	  <S = {'xref',_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174},M,XMod,_X_Unres,Data>
	      when call 'erlang':'=:='
		    (_cor164,
		     'modules') ->
	      %% Line 938
	      case Data of
		<{X0,I0,Depr}> when 'true' ->
		    let <_cor82> =
			%% Line 939
			apply 'tspec'/1
			    ('func')
		    in  let <X1> =
			    %% Line 939
			    call 'xref_utils':'xset'
				(X0, [_cor82|[]])
			in  let <_cor84> =
				%% Line 940
				apply 'tspec'/1
				    ('func')
			    in  let <I1> =
				    %% Line 940
				    call 'xref_utils':'xset'
					(I0, [_cor84|[]])
				in  %% Line 941
				    case apply 'depr_mod'/2
					     (Depr, X1) of
				      <{DF1,DF_11,DF_21,DF_31,DBad}> when 'true' ->
					  %% Line 942
					  case apply 'pack'/1
						   ([X1|[I1|[DF1|[DF_11|[DF_21|[DF_31|[]]]]]]]) of
					    <[X2|[I2|[DF2|[DF_12|[DF_22|[DF_32|[]]]]]]]> when 'true' ->
						let <MS> =
						    %% Line 943
						    call 'xref_utils':'xset'
							(M, 'atom')
						in  let <T> =
							%% Line 944
							call 'sofs':'from_sets'
							    ({MS,X2,I2,DF2,DF_12,DF_22,DF_32})
						    in  %% Line 946
							case XMod of
							  <{'xref_mod',_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182}> when 'true' ->
							      let <_cor92> =
								  call 'erlang':'setelement'
								      (9, XMod, T)
							      in  let <_cor94> =
								      call 'erlang':'setelement'
									  (7, _cor92, [])
								  in  let <_rec41> =
									  %% Line 947
									  call 'dict':'store'
									      (M, _cor94, _cor166)
								      in  let <_cor101> =
									      %% Line 947
									      call 'erlang':'setelement'
										  (5, S, _rec41)
									  in  let <_cor103> =
										  %% Line 948
										  apply 'take_down'/1
										      (_cor101)
									      in  %% Line 948
										  {'ok',[M|[]],DBad,_cor103}
							  ( <_cor183> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','xref_mod'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
					    ( <_cor87> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor87})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor86> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor86})
					-| ['compiler_generated'] )
				    end
		( <_cor81> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor81})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor108,_cor107,_cor106,_cor105,_cor104> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor108,_cor107,_cor106,_cor105,_cor104})
		  -| [{'function_name',{'do_add_module',5}}] )
	    -| ['compiler_generated'] )
	end
'depr_mod'/2 =
    %% Line 950
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Depr,Bad0},X> when 'true' ->
	      %% Line 954
	      case Depr of
		<{DF_10,DF_20,DF_30,DF0}> when 'true' ->
		    let <_cor3> =
			%% Line 955
			apply 'tspec'/1
			    ('func')
		    in  let <FT> =
			    %% Line 955
			    [_cor3|[]]
			in  let <DF1> =
				%% Line 956
				call 'xref_utils':'xset'
				    (DF0, FT)
			    in  let <DF_11> =
				    %% Line 957
				    call 'xref_utils':'xset'
					(DF_10, FT)
				in  let <DF_21> =
					%% Line 958
					call 'xref_utils':'xset'
					    (DF_20, FT)
				    in  let <DF_31> =
					    %% Line 959
					    call 'xref_utils':'xset'
						(DF_30, FT)
					in  let <_cor9> =
						%% Line 961
						call 'sofs':'from_sets'
						    ([DF1|[DF_11|[DF_21|[DF_31|[]]]]])
					    in  let <All> =
						    %% Line 961
						    call 'sofs':'union'
							(_cor9)
						in  let <_cor13> =
							%% Line 962
							( fun (_cor11) ->
							      case _cor11 of
								<{M,F,A}> when 'true' ->
								    call 'xref_utils':'is_builtin'
									(M, F, A)
								( <_cor12> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor12})
									-| [{'function_name',{'-depr_mod/2-fun-0-',1}}] )
								  -| ['compiler_generated'] )
							      end
							  -| [{'id',{0,0,'-depr_mod/2-fun-0-'}}] )
						    in  let <Fun> = {%% Line 962
							     'external',_cor13}
							in  let <_cor15> =
								%% Line 963
								call 'sofs':'specification'
								    (Fun, All)
							    in  let <XB> =
								    %% Line 963
								    call 'sofs':'union'
									(X, _cor15)
								in  let <DF_1> =
									%% Line 964
									call 'sofs':'intersection'
									    (DF_11, XB)
								    in  let <_cor18> =
									    %% Line 965
									    call 'sofs':'intersection'
										(DF_21, XB)
									in  let <DF_2> =
										%% Line 965
										call 'sofs':'union'
										    (_cor18, DF_1)
									    in  let <_cor20> =
										    %% Line 966
										    call 'sofs':'intersection'
											(DF_31, XB)
										in  let <DF_3> =
											%% Line 966
											call 'sofs':'union'
											    (_cor20, DF_2)
										    in  let <_cor22> =
											    %% Line 967
											    call 'sofs':'intersection'
												(DF1, XB)
											in  let <DF> =
												%% Line 967
												call 'sofs':'union'
												    (_cor22, DF_3)
											    in  let <Bad1> =
												    %% Line 969
												    call 'sofs':'difference'
													(All, XB)
												in  let <_cor25> =
													%% Line 970
													apply 'predefined_funs'/1
													    (Bad1)
												    in  let <_cor26> =
													    %% Line 970
													    call 'sofs':'difference'
														(Bad1, _cor25)
													in  let <Bad2> =
														%% Line 970
														call 'sofs':'to_external'
														    (_cor26)
													    in  let <_cor32> =
														    %% Line 971
														    ( fun (_cor30) ->
															  {'depr_attr',_cor30}
														      -| [{'id',{0,0,'-depr_mod/2-fun-1-'}}] )
														in  let <_cor28> =
															%% Line 971
															call 'erlang':'++'
															    (Bad2, Bad0)
														    in  let <_cor29> =
															    %% Line 971
															    call 'lists':'usort'
																(_cor28)
															in  let <Bad> =
																%% Line 971
																call 'lists':'map'
																    (_cor32, _cor29)
															    in  %% Line 972
																{DF,DF_1,DF_2,DF_3,Bad}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34})
		  -| [{'function_name',{'depr_mod',2}}] )
	    -| ['compiler_generated'] )
	end
'extra_edges'/4 =
    %% Line 975
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <AXC0> =
	    %% Line 976
	    call 'sofs':'domain'
		(_cor3)
	in  let <ALC0> =
		%% Line 977
		call 'sofs':'domain'
		    (_cor2)
	    in  let <AXC> =
		    %% Line 978
		    call 'sofs':'restriction'
			(AXC0, _cor0)
		in  let <_cor7> =
			%% Line 979
			call 'sofs':'restriction'
			    (ALC0, _cor0)
		    in  let <ALC> =
			    %% Line 979
			    call 'sofs':'restriction'
				(2, _cor7, _cor0)
			in  let <LPreCAt2> =
				%% Line 980
				call 'sofs':'restriction'
				    (_cor2, ALC)
			    in  let <XPreCAt2> =
				    %% Line 981
				    call 'sofs':'restriction'
					(_cor3, AXC)
				in  let <_cor13> =
					%% Line 982
					call 'sofs':'difference'
					    (AXC0, AXC)
				    in  let <_cor14> =
					    %% Line 982
					    call 'sofs':'to_external'
						(_cor13)
					in  let <_cor11> =
						%% Line 983
						call 'sofs':'difference'
						    (ALC0, ALC)
					    in  let <_cor12> =
						    %% Line 983
						    call 'sofs':'to_external'
							(_cor11)
						in  let <_cor15> =
							%% Line 983
							call 'erlang':'++'
							    (_cor14, _cor12)
						    in  let <Bad> =
							    %% Line 982
							    call 'erlang':'++'
								(_cor1, _cor15)
							in  %% Line 984
							    {AXC,ALC,Bad,LPreCAt2,XPreCAt2}
'no_info'/8 =
    %% Line 986
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <NoUnres> =
	    %% Line 987
	    call 'sofs':'no_elements'
		(_cor2)
	in  let <_cor9> =
		%% Line 988
		call 'erlang':'-'
		    (_cor1, _cor0)
	    in  let <_cor12> =
		    %% Line 989
		    call 'sofs':'no_elements'
			(_cor5)
		in  let <_cor10> =
			%% Line 989
			call 'sofs':'no_elements'
			    (_cor4)
		    in  let <_cor11> =
			    %% Line 989
			    call 'erlang':'-'
				(_cor10, NoUnres)
			in  let <_cor14> =
				%% Line 990
				call 'sofs':'no_elements'
				    (_cor6)
			    in  let <_cor13> =
				    %% Line 990
				    call 'sofs':'no_elements'
					(_cor7)
				in  let <_cor15> =
					%% Line 992
					call 'sofs':'no_elements'
					    (_cor3)
				    in  %% Line 988
					[{'no_calls',{_cor9,_cor0}}|%% Line 989
								    [{'no_function_calls',{_cor12,_cor11,NoUnres}}|%% Line 990
														   [{'no_functions',{_cor14,_cor13}}|%% Line 992
																		     [{'no_inter_function_calls',_cor15}|[]]]]]
'inter_graph'/6 =
    %% Line 994
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 995
	    call 'erlang':'self'
		()
	in  let <_cor6> =
		%% Line 995
		apply 'inter_graph'/5
		    (_cor4, _cor3, _cor2, _cor1, _cor0)
	    in  %% Line 995
		call 'erlang':'!'
		    (_cor5, {_cor7,_cor6})
'inter_graph'/5 =
    %% Line 1000
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <G> =
	    %% Line 1001
	    call 'xref_utils':'relation_to_graph'
		(_cor2)
	in  let <_cor6> =
		%% Line 1003
		call 'sofs':'to_external'
		    (_cor4)
	    in  let <Reachable0> =
		    %% Line 1003
		    call 'digraph_utils':'reachable_neighbours'
			(_cor6, G)
		in  let <_cor8> =
			%% Line 1004
			apply 'tspec'/1
			    ('func')
		    in  let <Reachable> =
			    %% Line 1004
			    call 'xref_utils':'xset'
				(Reachable0, [_cor8|[]])
			in  let <_cor10> =
				%% Line 1007
				call 'sofs':'difference'
				    (_cor3, Reachable)
			    in  let <XL> =
				    %% Line 1007
				    call 'sofs':'union'
					(_cor10, _cor4)
				in  let <_cor12> =
					%% Line 1010
					call 'sofs':'restriction'
					    (2, _cor2, XL)
				    in  let <LEs> =
					    %% Line 1010
					    call 'sofs':'restriction'
						(_cor12, XL)
					in  let <XEs> =
						%% Line 1012
						call 'sofs':'restriction'
						    (_cor1, XL)
					    in  let <Es> =
						    %% Line 1013
						    call 'sofs':'union'
							(LEs, XEs)
						in  let <_cor16> =
							%% Line 1015
							call 'sofs':'difference'
							    (_cor2, LEs)
						    in  let <_cor17> =
							    %% Line 1015
							    call 'sofs':'restriction'
								(_cor16, XL)
							in  let <E1> =
								%% Line 1015
								call 'sofs':'to_external'
								    (_cor17)
							    in  let <_cor21> =
								    %% Line 1016
								    apply 'reachable'/3
									(E1, G, [])
								in  let <_cor20> =
									%% Line 1017
									apply 'tspec'/1
									    ('func')
								    in  let <_cor19> =
									    %% Line 1017
									    apply 'tspec'/1
										('fun_edge')
									in  let <R0> =
										%% Line 1016
										call 'xref_utils':'xset'
										    (_cor21, %% Line 1017
											     [{_cor20,_cor19}|[]])
									    in  %% Line 1018
										case call 'digraph':'delete'
											 (G) of
										  <'true'> when 'true' ->
										      let <RL> =
											  %% Line 1021
											  call 'sofs':'restriction'
											      (R0, XL)
										      in  let <RX> =
											      %% Line 1023
											      call 'sofs':'relative_product1'
												  (R0, _cor1)
											  in  let <_cor26> =
												  %% Line 1024
												  call 'sofs':'converse'
												      (RX)
											      in  let <R> =
												      %% Line 1024
												      call 'sofs':'union'
													  (RL, _cor26)
												  in  let <_cor30> =
													  %% Line 1026
													  ( fun (_cor28) ->
														case _cor28 of
														  <{Ee2,{Ee1,_X_L}}> when 'true' ->
														      {Ee1,Ee2}
														  ( <_cor29> when 'true' ->
															( primop 'match_fail'
															      ({'function_clause',_cor29})
															  -| [{'function_name',{'-inter_graph/5-fun-0-',1}}] )
														    -| ['compiler_generated'] )
														end
													    -| [{'id',{0,0,'-inter_graph/5-fun-0-'}}] )
												      in  let <EE0> =
													      %% Line 1026
													      call 'sofs':'projection'
														  ({'external',_cor30}, R)
													  in  let <EE> =
														  %% Line 1027
														  call 'sofs':'union'
														      (Es, EE0)
													      in  let <_cor35> =
														      %% Line 1031
														      ( fun (_cor33) ->
															    case _cor33 of
															      <{Ee2,{Ee1,Ls}}> when 'true' ->
																  {{Ee1,Ls},{Ee1,Ee2}}
															      ( <_cor34> when 'true' ->
																    ( primop 'match_fail'
																	  ({'function_clause',_cor34})
																      -| [{'function_name',{'-inter_graph/5-fun-1-',1}}] )
																-| ['compiler_generated'] )
															    end
															-| [{'id',{0,0,'-inter_graph/5-fun-1-'}}] )
														  in  let <SFun> = {%% Line 1031
															   'external',_cor35}
														      in  let <_cor37> =
															      %% Line 1032
															      call 'sofs':'projection'
																  (SFun, R)
															  in  let <ECallAt1> =
																  %% Line 1032
																  call 'sofs':'relative_product1'
																      (_cor37, _cor0)
															      in  let <_cor39> =
																      %% Line 1033
																      call 'sofs':'restriction'
																	  (_cor0, Es)
																  in  let <ECallAt2> =
																	  %% Line 1033
																	  call 'sofs':'union'
																	      (ECallAt1, _cor39)
																      in  let <_cor41> =
																	      %% Line 1034
																	      call 'sofs':'relation_to_family'
																		  (ECallAt2)
																	  in  let <ECallAt> =
																		  %% Line 1034
																		  call 'sofs':'family_union'
																		      (_cor41)
																	      in  %% Line 1040
																		  {EE,ECallAt}
										  ( <_cor23> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor23})
										    -| ['compiler_generated'] )
										end
'reachable'/3 =
    %% Line 1043
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E = {_X_X,L}|Xs],G,R> when 'true' ->
	      let <Ns> =
		  %% Line 1044
		  call 'digraph_utils':'reachable'
		      ([L|[]], G)
	      in  let <_cor4> =
		      %% Line 1045
		      apply 'reach'/3
			  (Ns, E, R)
		  in  %% Line 1045
		      apply 'reachable'/3
			  (Xs, G, _cor4)
	  %% Line 1046
	  <[],_X_G,R> when 'true' ->
	      %% Line 1047
	      R
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'reachable',3}}] )
	    -| ['compiler_generated'] )
	end
'reach'/3 =
    %% Line 1049
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[N|Ns],E,L> when 'true' ->
	      %% Line 1050
	      apply 'reach'/3
		  (Ns, E, [{N,E}|L])
	  %% Line 1051
	  <[],_X_E,L> when 'true' ->
	      %% Line 1052
	      L
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'reach',3}}] )
	    -| ['compiler_generated'] )
	end
'tspec'/1 =
    %% Line 1054
    fun (_cor0) ->
	case _cor0 of
	  <'func'> when 'true' ->
	      {'atom','atom','atom'}
	  %% Line 1055
	  <'fun_edge'> when 'true' ->
	      let <_cor2> =
		  apply 'tspec'/1
		      ('func')
	      in  let <_cor1> =
		      apply 'tspec'/1
			  ('func')
		  in  {_cor2,_cor1}
	  %% Line 1056
	  <'def_at'> when 'true' ->
	      let <_cor3> =
		  apply 'tspec'/1
		      ('func')
	      in  {_cor3,'atom'}
	  %% Line 1057
	  <'pre_call_at'> when 'true' ->
	      let <_cor4> =
		  apply 'tspec'/1
		      ('fun_edge')
	      in  {_cor4,'atom'}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'tspec',1}}] )
	    -| ['compiler_generated'] )
	end
'do_remove_release'/2 =
    %% Line 1060
    fun (_cor1,_cor0) ->
	%% Line 1061
	( case _cor1 of
	    ( <( {'xref',_cor9,_cor10,_cor11,_cor12,_cor13,_rec44,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'find'
			   (_cor0, _rec44) of
		    %% Line 1062
		    <'error'> when 'true' ->
			%% Line 1063
			apply 'throw_error'/1
			    ({'no_such_release',_cor0})
		    %% Line 1064
		    <{'ok',XRel}> when 'true' ->
			let <S1> =
			    %% Line 1065
			    apply 'take_down'/1
				(_cor1)
			in  let <S2> =
				%% Line 1066
				apply 'remove_rel'/2
				    (S1, _cor0)
			    in  %% Line 1067
				{'ok',XRel,S2}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_remove_application'/2 =
    %% Line 1071
    fun (_cor1,_cor0) ->
	%% Line 1072
	( case _cor1 of
	    ( <( {'xref',_cor9,_cor10,_cor11,_cor12,_rec45,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'find'
			   (_cor0, _rec45) of
		    %% Line 1073
		    <'error'> when 'true' ->
			%% Line 1074
			apply 'throw_error'/1
			    ({'no_such_application',_cor0})
		    %% Line 1075
		    <{'ok',XApp}> when 'true' ->
			let <S1> =
			    %% Line 1076
			    apply 'take_down'/1
				(_cor1)
			in  let <S2> =
				%% Line 1077
				apply 'remove_apps'/2
				    (S1, [_cor0|[]])
			    in  %% Line 1078
				{'ok',XApp,S2}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_remove_module'/2 =
    %% Line 1082
    fun (_cor1,_cor0) ->
	%% Line 1083
	( case _cor1 of
	    ( <( {'xref',_cor9,_cor10,_cor11,_rec46,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'find'
			   (_cor0, _rec46) of
		    %% Line 1084
		    <'error'> when 'true' ->
			%% Line 1085
			apply 'throw_error'/1
			    ({'no_such_module',_cor0})
		    %% Line 1086
		    <{'ok',XMod}> when 'true' ->
			let <S1> =
			    %% Line 1087
			    apply 'take_down'/1
				(_cor1)
			in  let <_cor5> =
				%% Line 1088
				apply 'remove_modules'/2
				    (S1, [_cor0|[]])
			    in  %% Line 1088
				{'ok',XMod,_cor5}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_rel'/2 =
    %% Line 1091
    fun (_cor1,_cor0) ->
	let <Rels> =
	    %% Line 1092
	    [_cor0|[]]
	in  let <Fun> =
		%% Line 1093
		( fun (_cor10,_cor9) ->
		      case <_cor10,_cor9> of
			<{A,XApp = {'xref_app',_cor26,_cor27,_cor28,_cor29}},L>
			    when call 'erlang':'=:='
				  (_cor27,
				   Rels) ->
			    %% Line 1094
			    [A|L]
			%% Line 1095
			<_cor30,L> when 'true' ->
			    L
		      end
		  -| [{'id',{0,0,'-remove_rel/2-fun-0-'}}] )
	    in  %% Line 1097
		( case _cor1 of
		    ( <( {'xref',_cor31,_cor32,_cor33,_cor34,_rec47,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor16> =
			      call 'dict':'to_list'
				  (_rec47)
			  in  let <Apps> =
				  call 'lists':'foldl'
				      (Fun, [], _cor16)
			      in  let <S1> =
				      %% Line 1098
				      apply 'remove_apps'/2
					  (_cor1, Apps)
				  in  %% Line 1099
				      ( case S1 of
					  ( <( {'xref',_cor43,_cor44,_cor45,_cor46,_cor47,_rec48,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
					       -| ['compiler_generated'] )> when 'true' ->
						let <NewReleases> =
						    apply 'remove_erase'/2
							(Rels, _rec48)
						in  %% Line 1100
						    call 'erlang':'setelement'
							(7, S1, NewReleases)
					    -| ['compiler_generated'] )
					  ( <_cor54> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','xref'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    ( <_cor42> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xref'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'remove_apps'/2 =
    %% Line 1102
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 1103
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <{M,XMod},L> when 'true' ->
			%% Line 1104
			( case XMod of
			    ( <( {'xref_mod',_cor26,_rec50,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec50 of
				    %% Line 1105
				    <[]> when 'true' ->
					L
				    %% Line 1106
				    <[AppName|[]]> when 'true' ->
					[{AppName,M}|L]
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor4})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor33> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xref_mod'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-remove_apps/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-remove_apps/2-fun-0-'}}] )
	in  %% Line 1109
	    ( case _cor1 of
		( <( {'xref',_cor34,_cor35,_cor36,_rec51,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor12> =
			  call 'dict':'to_list'
			      (_rec51)
		      in  let <Ms> =
			      call 'lists':'foldl'
				  (Fun, [], _cor12)
			  in  let <_cor15> =
				  %% Line 1110
				  call 'sofs':'relation'
				      (Ms)
			      in  let <_cor14> =
				      %% Line 1110
				      call 'sofs':'set'
					  (_cor0)
				  in  let <_cor16> =
					  %% Line 1110
					  call 'sofs':'image'
					      (_cor15, _cor14)
				      in  let <Modules> =
					      %% Line 1110
					      call 'sofs':'to_external'
						  (_cor16)
					  in  let <S1> =
						  %% Line 1111
						  apply 'remove_modules'/2
						      (_cor1, Modules)
					      in  %% Line 1112
						  ( case S1 of
						      ( <( {'xref',_cor46,_cor47,_cor48,_cor49,_rec52,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <NewApplications> =
								apply 'remove_erase'/2
								    (_cor0, _rec52)
							    in  %% Line 1113
								call 'erlang':'setelement'
								    (6, S1, NewApplications)
							-| ['compiler_generated'] )
						      ( <_cor57> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','xref'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_cor45> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'remove_modules'/2 =
    %% Line 1115
    fun (_cor1,_cor0) ->
	%% Line 1116
	( case _cor1 of
	    ( <( {'xref',_cor9,_cor10,_cor11,_rec54,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <NewModules> =
		      apply 'remove_erase'/2
			  (_cor0, _rec54)
		  in  %% Line 1117
		      call 'erlang':'setelement'
			  (5, _cor1, NewModules)
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_erase'/2 =
    %% Line 1119
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[K|Ks],D> when 'true' ->
	      let <_cor2> =
		  %% Line 1120
		  call 'dict':'erase'
		      (K, D)
	      in  %% Line 1120
		  apply 'remove_erase'/2
		      (Ks, _cor2)
	  %% Line 1121
	  <[],D> when 'true' ->
	      %% Line 1122
	      D
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'remove_erase',2}}] )
	    -| ['compiler_generated'] )
	end
'do_add_libraries'/3 =
    %% Line 1124
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1125
	    apply 'message'/3
		(_cor1, 'lib_search', [])
	    %% Line 1126
	    case call 'xref_utils':'list_path'
		     (_cor2, [[46|[98|[101|[97|[109]]]]]]) of
	      <{C,E}> when 'true' ->
		  do  %% Line 1127
		      apply 'message'/3
			  (_cor1, 'done', [])
		      let <_cor4> =
			  %% Line 1128
			  call 'sofs':'relation'
			      (C)
		      in  let <_cor5> =
			      %% Line 1128
			      call 'sofs':'relation_to_family'
				  (_cor4)
			  in  let <MDs> =
				  %% Line 1128
				  call 'sofs':'to_external'
				      (_cor5)
			      in  %% Line 1130
				  apply 'check_file'/5
				      (MDs, [], E, _cor2, _cor0)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'check_file'/5 =
    %% Line 1142
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Module,[{_X_N,Dir,_X_File}|_cor18]}|MDs],L,E,Path,State> when 'true' ->
	      let <XLib> = {%% Line 1143
		   'xref_lib',%% Line 1143
			      Module,%% Line 1143
				     Dir}
	      in  %% Line 1144
		  apply 'check_file'/5
		      (MDs, [{Module,XLib}|L], E, Path, State)
	  %% Line 1145
	  <[],L,[],Path,State> when 'true' ->
	      let <D> =
		  %% Line 1146
		  call 'dict':'from_list'
		      (L)
	      in  %% Line 1147
		  case State of
		    <{'xref',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
			let <_cor8> =
			    call 'erlang':'setelement'
				(9, State, D)
			in  let <_cor10> =
				call 'erlang':'setelement'
				    (8, _cor8, Path)
			    in  let <NewState> =
				    %% Line 1149
				    apply 'take_down'/1
					(_cor10)
				in  %% Line 1150
				    {'ok',NewState}
		    ( <_cor31> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xref'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1151
	  <[],_X_L,[E|_cor32],_X_Path,_X_State> when 'true' ->
	      %% Line 1152
	      E
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'check_file',5}}] )
	    -| ['compiler_generated'] )
	end
'do_set_up'/2 =
    %% Line 1156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'xref',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},_X_VerboseOpt>
	      when call 'erlang':'=/='
		    (_cor14,
		     'not_set_up') ->
	      %% Line 1157
	      {'ok',S}
	  %% Line 1158
	  <S,VerboseOpt> when 'true' ->
	      do  %% Line 1159
		  apply 'message'/3
		      (VerboseOpt, 'set_up', [])
		  let <_cor8> =
		      catch
			  %% Line 1160
			  apply 'do_set_up'/1
			      (S)
		  in  do  %% Line 1161
			  apply 'message'/3
			      (VerboseOpt, 'done', [])
			  _cor8
	end
'do_set_up'/1 =
    %% Line 1176
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xref',_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175}>
	      when call 'erlang':'=:='
		    (_cor165,
		     'functions') ->
	      let <ModDictList> =
		  %% Line 1177
		  call 'dict':'to_list'
		      (_cor167)
	      in  %% Line 1180
		  case apply 'make_families'/2
			   (ModDictList, 18) of
		    <[DefAt0|[L|[X0|[LCallAt|[XCallAt|[CallAt|[LC|[XC|[LU|[EE0|[ECallAt|[UC|[LPredefined|[Mod_DF|[Mod_DF_1|[Mod_DF_2|[Mod_DF_3|[]]]]]]]]]]]]]]]]]]> when 'true' ->
			%% Line 1182
			case apply 'do_set_up_1'/1
				 (XC) of
			  <{XC_1,XU,XPredefined}> when 'true' ->
			      let <_cor12> =
				  %% Line 1183
				  call 'sofs':'union_of_family'
				      (LC)
			      in  let <LC_1> =
				      %% Line 1183
				      apply 'user_family'/1
					  (_cor12)
				  in  let <E_1> =
					  %% Line 1184
					  call 'sofs':'family_union'
					      (XC_1, LC_1)
				      in  let <Predefined> =
					      %% Line 1185
					      call 'sofs':'family_union'
						  (XPredefined, LPredefined)
					  in  let <X1> =
						  %% Line 1188
						  call 'sofs':'family_union'
						      (X0, Predefined)
					      in  let <F1> =
						      %% Line 1190
						      call 'sofs':'family_union'
							  (L, X1)
						  in  let <V> =
							  %% Line 1191
							  call 'sofs':'family_union'
							      (F1, XU)
						      in  let <E> =
							      %% Line 1192
							      call 'sofs':'family_union'
								  (LC, XC)
							  in  let <M> =
								  %% Line 1194
								  call 'sofs':'domain'
								      (V)
							      in  let <M2A> =
								      %% Line 1195
								      apply 'make_M2A'/1
									  (ModDictList)
								  in  %% Line 1196
								      case apply 'make_A2R'/1
									       (_cor168) of
									<{A2R,A}> when 'true' ->
									    let <_cor27> =
										%% Line 1197
										call 'dict':'fetch_keys'
										    (_cor169)
									    in  let <R> =
										    %% Line 1197
										    call 'sofs':'set'
											(_cor27)
										in  let <VEs> =
											%% Line 1200
											call 'sofs':'union_of_family'
											    (E)
										    in  let <_cor32> =
											    %% Line 1201
											    ( fun (_cor30) ->
												  case _cor30 of
												    <{{M1,_X_F1,_X_A1},{M2,_X_F2,_X_A2}}> when 'true' ->
													{M1,M2}
												    ( <_cor31> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor31})
													    -| [{'function_name',{'-do_set_up/1-fun-0-',1}}] )
												      -| ['compiler_generated'] )
												  end
											      -| [{'id',{0,0,'-do_set_up/1-fun-0-'}}] )
											in  let <Fun> = {%% Line 1201
												 'external',_cor32}
											    in  let <ME> =
												    %% Line 1202
												    call 'sofs':'projection'
													(Fun, VEs)
												in  let <ME2AE> =
													%% Line 1203
													call 'sofs':'multiple_relative_product'
													    ({M2A,M2A}, ME)
												    in  let <AE> =
													    %% Line 1205
													    call 'sofs':'range'
														(ME2AE)
													in  let <AE2RE> =
														%% Line 1206
														call 'sofs':'multiple_relative_product'
														    ({A2R,A2R}, AE)
													    in  let <RE> =
														    %% Line 1207
														    call 'sofs':'range'
															(AE2RE)
														in  let <AM> =
															%% Line 1209
															call 'sofs':'domain'
															    (F1)
														    in  %% Line 1211
															case %% Line 1212
															     apply 'make_libs'/5
																 (XU, F1, AM, _cor170, _cor171) of
															  <{Undef,U0,Lib,Lib_DF,Lib_DF_1,Lib_DF_2,Lib_DF_3}> when 'true' ->
															      %% Line 1213
															      case apply 'make_builtins'/1
																       (U0) of
																<{B,U}> when 'true' ->
																    let <X1_B> =
																	%% Line 1214
																	call 'sofs':'family_union'
																	    (X1, B)
																    in  let <F> =
																	    %% Line 1215
																	    call 'sofs':'family_union'
																		(F1, Lib)
																	in  let <_cor48> =
																		%% Line 1216
																		call 'sofs':'family_intersection'
																		    (Mod_DF, X1_B)
																	    in  let <DF> =
																		    %% Line 1216
																		    call 'sofs':'family_union'
																			(_cor48, Lib_DF)
																		in  let <_cor50> =
																			%% Line 1217
																			call 'sofs':'family_intersection'
																			    (Mod_DF_1, X1_B)
																		    in  let <DF_1> =
																			    %% Line 1217
																			    call 'sofs':'family_union'
																				(_cor50, Lib_DF_1)
																			in  let <_cor52> =
																				%% Line 1218
																				call 'sofs':'family_intersection'
																				    (Mod_DF_2, X1_B)
																			    in  let <DF_2> =
																				    %% Line 1218
																				    call 'sofs':'family_union'
																					(_cor52, Lib_DF_2)
																				in  let <_cor54> =
																					%% Line 1219
																					call 'sofs':'family_intersection'
																					    (Mod_DF_3, X1_B)
																				    in  let <DF_3> =
																					    %% Line 1219
																					    call 'sofs':'family_union'
																						(_cor54, Lib_DF_3)
																					in  let <_cor56> =
																						%% Line 1221
																						call 'sofs':'family_difference'
																						    (F1, LU)
																					    in  let <UU> =
																						    %% Line 1221
																						    call 'sofs':'family_difference'
																							(_cor56, XU)
																						in  let <DefAt> =
																							%% Line 1222
																							apply 'make_defat'/2
																							    (Undef, DefAt0)
																						    in  let <LM> =
																							    %% Line 1224
																							    call 'sofs':'domain'
																								(Lib)
																							in  let <_cor60> =
																								%% Line 1225
																								call 'sofs':'domain'
																								    (U)
																							    in  let <_cor61> =
																								    %% Line 1225
																								    call 'sofs':'difference'
																									(_cor60, AM)
																								in  let <UM> =
																									%% Line 1225
																									call 'sofs':'difference'
																									    (_cor61, LM)
																								    in  let <X> =
																									    %% Line 1226
																									    call 'sofs':'family_union'
																										(X1, Lib)
																									in  let <_cor64> =
																										%% Line 1231
																										call 'sofs':'union_of_family'
																										    (EE0)
																									    in  let <EE_conv> =
																										    %% Line 1231
																										    call 'sofs':'converse'
																											(_cor64)
																										in  let <_cor66> =
																											%% Line 1232
																											call 'sofs':'union_of_family'
																											    (X)
																										    in  let <EE_exported> =
																											    %% Line 1232
																											    call 'sofs':'restriction'
																												(EE_conv, _cor66)
																											in  let <_cor70> =
																												%% Line 1234
																												( fun (_cor68) ->
																												      case _cor68 of
																													<{{M1,_cor236,_cor237},{M2,_cor238,_cor239}}> when 'true' ->
																													    call 'erlang':'=:='
																														(M1, M2)
																													( <_cor69> when 'true' ->
																													      ( primop 'match_fail'
																														    ({'function_clause',_cor69})
																														-| [{'function_name',{'-do_set_up/1-fun-1-',1}}] )
																													  -| ['compiler_generated'] )
																												      end
																												  -| [{'id',{0,0,'-do_set_up/1-fun-1-'}}] )
																											    in  let <EE_local> =
																												    %% Line 1234
																												    call 'sofs':'specification'
																													({'external',_cor70}, %% Line 1235
																															      EE_conv)
																												in  let <_cor72> =
																													%% Line 1236
																													call 'sofs':'union'
																													    (EE_local, EE_exported)
																												    in  let <EE_0> =
																													    %% Line 1236
																													    call 'sofs':'converse'
																														(_cor72)
																													in  let <EE_1> =
																														%% Line 1237
																														apply 'user_family'/1
																														    (EE_0)
																													    in  let <_cor77> =
																														    %% Line 1238
																														    ( fun (_cor75) ->
																															  case _cor75 of
																															    <{{M1,_cor240,_cor241},_X_MFA2}> when 'true' ->
																																M1
																															    ( <_cor76> when 'true' ->
																																  ( primop 'match_fail'
																																	({'function_clause',_cor76})
																																    -| [{'function_name',{'-do_set_up/1-fun-2-',1}}] )
																															      -| ['compiler_generated'] )
																															  end
																														      -| [{'id',{0,0,'-do_set_up/1-fun-2-'}}] )
																														in  let <EE1> =
																															%% Line 1238
																															call 'sofs':'partition_family'
																															    ({'external',_cor77}, %% Line 1239
																																		  EE_0)
																														    in  let <_cor79> =
																															    %% Line 1241
																															    call 'sofs':'family_difference'
																																(EE0, EE0)
																															in  let <EE> =
																																%% Line 1241
																																call 'sofs':'family_union'
																																    (_cor79, EE1)
																															    in  let <IFun> =
																																    %% Line 1243
																																    ( fun (_cor92,_cor91) ->
																																	  case <_cor92,_cor91> of
																																	    <{Mod,EE_M},XMods> when 'true' ->
																																		let <IMFun> =
																																		    %% Line 1245
																																		    ( fun (_cor88) ->
																																			  %% Line 1247
																																			  ( case _cor88 of
																																			      ( <( {'xref_mod',_cor242,_cor243,_cor244,_cor245,_cor246,_rec62,_cor247,_cor248}
																																				   -| ['compiler_generated'] )> when 'true' ->
																																				    case _rec62 of
																																				      <[NoCalls|[NoFunctionCalls|[NoFunctions|[_X_NoInter|[]]]]]> when 'true' ->
																																					  let <_cor84> =
																																					      %% Line 1249
																																					      call 'erlang':'length'
																																						  (EE_M)
																																					  in  let <NewInfo> =
																																						  %% Line 1248
																																						  [NoCalls|[NoFunctionCalls|[NoFunctions|%% Line 1249
																																											 [{'no_inter_function_calls',_cor84}|[]]]]]
																																					      in  %% Line 1250
																																						  call 'erlang':'setelement'
																																						      (7, _cor88, NewInfo)
																																				      ( <_cor83> when 'true' ->
																																					    primop 'match_fail'
																																						({'badmatch',_cor83})
																																					-| ['compiler_generated'] )
																																				    end
																																				-| ['compiler_generated'] )
																																			      ( <_cor249> when 'true' ->
																																				    ( call ( 'erlang'
																																					     -| ['compiler_generated'] ):( 'error'
																																									   -| ['compiler_generated'] )
																																					  (( {'badrecord','xref_mod'}
																																					     -| ['compiler_generated'] ))
																																				      -| ['compiler_generated'] )
																																				-| ['compiler_generated'] )
																																			    end
																																			    -| ['compiler_generated'] )
																																		      -| [{'id',{0,0,'-do_set_up/1-fun-3-'}}] )
																																		in  %% Line 1252
																																		    call 'dict':'update'
																																			(Mod, IMFun, XMods)
																																	    ( <_cor94,_cor93> when 'true' ->
																																		  ( primop 'match_fail'
																																			({'function_clause',_cor94,_cor93})
																																		    -| [{'function_name',{'-do_set_up/1-fun-4-',2}}] )
																																	      -| ['compiler_generated'] )
																																	  end
																																      -| [{'id',{0,0,'-do_set_up/1-fun-4-'}}] )
																																in  let <_cor96> =
																																	%% Line 1254
																																	call 'sofs':'to_external'
																																	    (EE)
																																    in  let <XrefMods1> =
																																	    %% Line 1254
																																	    call 'lists':'foldl'
																																		(IFun, _cor167, _cor96)
																																	in  let <_cor102> =
																																		%% Line 1255
																																		call 'erlang':'setelement'
																																		    (5, S, XrefMods1)
																																	    in  let <_cor104> =
																																		    %% Line 1257
																																		    call 'sofs':'union_of_family'
																																			(UC)
																																		in  let <UC_1> =
																																			%% Line 1257
																																			apply 'user_family'/1
																																			    (_cor104)
																																		    in  let <Vs> =
																																			    %% Line 1265
																																			    [{'L',L}|[{'X',X}|[{'F',F}|[{'U',U}|[{'B',B}|[{'UU',UU}|%% Line 1266
																																										    [{'XU',XU}|[{'LU',LU}|[{'V',V}|[{'v',V}|%% Line 1267
																																															    [{'LC',{LC,LC_1}}|[{'XC',{XC,XC_1}}|[{'E',{E,E_1}}|[{'e',{E,E_1}}|%% Line 1268
																																																							      [{'EE',{EE,EE_1}}|[{'UC',{UC,UC_1}}|%% Line 1269
																																																												  [{'M',M}|[{'A',A}|[{'R',R}|%% Line 1270
																																																															     [{'AM',AM}|[{'UM',UM}|[{'LM',LM}|%% Line 1271
																																																																			      [{'ME',ME}|[{'AE',AE}|[{'RE',RE}|%% Line 1272
																																																																							       [{'DF',DF}|[{'DF_1',DF_1}|[{'DF_2',DF_2}|[{'DF_3',DF_3}|%% Line 1273
																																																																														       [{'me2ae',ME2AE}|[{'ae',AE2RE}|[{'m2a',M2A}|[{'a2r',A2R}|%% Line 1274
																																																																																						[{'def_at',DefAt}|[{'call_at',CallAt}|[{'e_call_at',ECallAt}|%% Line 1275
																																																																																													     [{'l_call_at',LCallAt}|[{'x_call_at',XCallAt}|[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
																																			in  %% Line 1276
																																			    apply 'finish_set_up'/2
																																				(_cor102, Vs)
																( <_cor45> when 'true' ->
																      primop 'match_fail'
																	  ({'badmatch',_cor45})
																  -| ['compiler_generated'] )
															      end
															  ( <_cor44> when 'true' ->
																primop 'match_fail'
																    ({'badmatch',_cor44})
															    -| ['compiler_generated'] )
															end
									( <_cor24> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor24})
									  -| ['compiler_generated'] )
								      end
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1277
	  <S = {'xref',_cor284,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295}>
	      when call 'erlang':'=:='
		    (_cor285,
		     'modules') ->
	      let <ModDictList> =
		  %% Line 1278
		  call 'dict':'to_list'
		      (_cor287)
	      in  %% Line 1279
		  case %% Line 1280
		       apply 'make_families'/2
			   (ModDictList, 7) of
		    <[X0|[I0|[Mod_DF|[Mod_DF_1|[Mod_DF_2|[Mod_DF_3|[]]]]]]]> when 'true' ->
			let <I> =
			    %% Line 1281
			    call 'sofs':'union_of_family'
				(I0)
			in  let <AM> =
				%% Line 1282
				call 'sofs':'domain'
				    (X0)
			    in  %% Line 1284
				case apply 'make_predefined'/2
					 (I, AM) of
				  <{XU,Predefined}> when 'true' ->
				      let <X1> =
					  %% Line 1286
					  call 'sofs':'family_union'
					      (X0, Predefined)
				      in  let <V> =
					      %% Line 1287
					      call 'sofs':'family_union'
						  (X1, XU)
					  in  let <_cor122> =
						  %% Line 1289
						  call 'sofs':'domain'
						      (XU)
					      in  let <M> =
						      %% Line 1289
						      call 'sofs':'union'
							  (AM, _cor122)
						  in  let <M2A> =
							  %% Line 1290
							  apply 'make_M2A'/1
							      (ModDictList)
						      in  %% Line 1291
							  case apply 'make_A2R'/1
								   (_cor288) of
							    <{A2R,A}> when 'true' ->
								let <_cor130> =
								    %% Line 1292
								    call 'dict':'fetch_keys'
									(_cor289)
								in  let <R> =
									%% Line 1292
									call 'sofs':'set'
									    (_cor130)
								    in  let <_cor135> =
									    %% Line 1294
									    ( fun (_cor133) ->
										  case _cor133 of
										    <{M1,{M2,_X_F2,_X_A2}}> when 'true' ->
											{M1,M2}
										    ( <_cor134> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor134})
											    -| [{'function_name',{'-do_set_up/1-fun-5-',1}}] )
										      -| ['compiler_generated'] )
										  end
									      -| [{'id',{0,0,'-do_set_up/1-fun-5-'}}] )
									in  let <_cor132> =
										%% Line 1295
										call 'sofs':'family_to_relation'
										    (I0)
									    in  let <ME> =
										    %% Line 1294
										    call 'sofs':'projection'
											({'external',_cor135}, _cor132)
										in  let <ME2AE> =
											%% Line 1296
											call 'sofs':'multiple_relative_product'
											    ({M2A,M2A}, ME)
										    in  let <AE> =
											    %% Line 1298
											    call 'sofs':'range'
												(ME2AE)
											in  let <AE2RE> =
												%% Line 1299
												call 'sofs':'multiple_relative_product'
												    ({A2R,A2R}, AE)
											    in  let <RE> =
												    %% Line 1300
												    call 'sofs':'range'
													(AE2RE)
												in  %% Line 1303
												    case %% Line 1304
													 apply 'make_libs'/5
													     (XU, X1, AM, _cor290, _cor291) of
												      <{_X_Undef,U0,Lib,Lib_DF,Lib_DF_1,Lib_DF_2,Lib_DF_3}> when 'true' ->
													  %% Line 1305
													  case apply 'make_builtins'/1
														   (U0) of
													    <{B,U}> when 'true' ->
														let <X1_B> =
														    %% Line 1306
														    call 'sofs':'family_union'
															(X1, B)
														in  let <_cor148> =
															%% Line 1307
															call 'sofs':'family_intersection'
															    (Mod_DF, X1_B)
														    in  let <DF> =
															    %% Line 1307
															    call 'sofs':'family_union'
																(_cor148, Lib_DF)
															in  let <_cor150> =
																%% Line 1308
																call 'sofs':'family_intersection'
																    (Mod_DF_1, X1_B)
															    in  let <DF_1> =
																    %% Line 1308
																    call 'sofs':'family_union'
																	(_cor150, Lib_DF_1)
																in  let <_cor152> =
																	%% Line 1309
																	call 'sofs':'family_intersection'
																	    (Mod_DF_2, X1_B)
																    in  let <DF_2> =
																	    %% Line 1309
																	    call 'sofs':'family_union'
																		(_cor152, Lib_DF_2)
																	in  let <_cor154> =
																		%% Line 1310
																		call 'sofs':'family_intersection'
																		    (Mod_DF_3, X1_B)
																	    in  let <DF_3> =
																		    %% Line 1310
																		    call 'sofs':'family_union'
																			(_cor154, Lib_DF_3)
																		in  let <LM> =
																			%% Line 1312
																			call 'sofs':'domain'
																			    (Lib)
																		    in  let <_cor157> =
																			    %% Line 1313
																			    call 'sofs':'domain'
																				(U)
																			in  let <_cor158> =
																				%% Line 1313
																				call 'sofs':'difference'
																				    (_cor157, AM)
																			    in  let <UM> =
																				    %% Line 1313
																				    call 'sofs':'difference'
																					(_cor158, LM)
																				in  let <X> =
																					%% Line 1314
																					call 'sofs':'family_union'
																					    (X1, Lib)
																				    in  let <Empty> =
																					    %% Line 1316
																					    call 'sofs':'empty_set'
																						()
																					in  let <Vs> =
																						%% Line 1317
																						[{'X',X}|[{'U',U}|[{'B',B}|[{'XU',XU}|[{'v',V}|%% Line 1318
																											       [{'e',{Empty,Empty}}|%% Line 1319
																														    [{'M',M}|[{'A',A}|[{'R',R}|%% Line 1320
																																	       [{'AM',AM}|[{'UM',UM}|[{'LM',LM}|%% Line 1321
																																						[{'ME',ME}|[{'AE',AE}|[{'RE',RE}|%% Line 1322
																																										 [{'DF',DF}|[{'DF_1',DF_1}|[{'DF_2',DF_2}|[{'DF_3',DF_3}|%% Line 1323
																																																	 [{'me2ae',ME2AE}|[{'ae',AE2RE}|[{'m2a',M2A}|[{'a2r',A2R}|%% Line 1324
																																																								  [{'def_at',Empty}|[{'call_at',Empty}|[{'e_call_at',Empty}|%% Line 1325
																																																															    [{'l_call_at',Empty}|[{'x_call_at',Empty}|[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
																					    in  %% Line 1326
																						apply 'finish_set_up'/2
																						    (S, Vs)
													    ( <_cor146> when 'true' ->
														  primop 'match_fail'
														      ({'badmatch',_cor146})
													      -| ['compiler_generated'] )
													  end
												      ( <_cor145> when 'true' ->
													    primop 'match_fail'
														({'badmatch',_cor145})
													-| ['compiler_generated'] )
												    end
							    ( <_cor127> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor127})
							      -| ['compiler_generated'] )
							  end
				  ( <_cor119> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor119})
				    -| ['compiler_generated'] )
				end
		    ( <_cor116> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor116})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor163> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor163})
		  -| [{'function_name',{'do_set_up',1}}] )
	    -| ['compiler_generated'] )
	end
'finish_set_up'/2 =
    %% Line 1328
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1329
	    call 'dict':'new'
		()
	in  let <T> =
		%% Line 1329
		apply 'do_finish_set_up'/2
		    (_cor0, _cor2)
	    in  %% Line 1330
		case _cor1 of
		  <{'xref',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
		      let <_cor6> =
			  call 'erlang':'setelement'
			      (4, _cor1, T)
		      in  %% Line 1332
			  {'ok',_cor6}
		  ( <_cor22> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'do_finish_set_up'/2 =
    %% Line 1334
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Key,Value}|Vs],T> when 'true' ->
	      %% Line 1335
	      case apply 'var_type'/1
		       (Key) of
		<{Type,OType}> when 'true' ->
		    let <Val> =
			%% Line 1336
			{'xref_var',Key,Value,'predef',%% Line 1337
						       OType,%% Line 1337
							     Type}
		    in  let <T1> =
			    %% Line 1338
			    call 'dict':'store'
				(Key, Val, T)
			in  %% Line 1339
			    apply 'do_finish_set_up'/2
				(Vs, T1)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1340
	  <[],T> when 'true' ->
	      %% Line 1341
	      T
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'do_finish_set_up',2}}] )
	    -| ['compiler_generated'] )
	end
'var_type'/1 =
    %% Line 1343
    fun (_cor0) ->
	case _cor0 of
	  <'B'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1344
	  <'F'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1345
	  <'L'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1346
	  <'LU'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1347
	  <'U'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1348
	  <'UU'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1349
	  <'V'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1350
	  <'X'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1351
	  <'XU'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1352
	  <'DF'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1353
	  <'DF_1'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1354
	  <'DF_2'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1355
	  <'DF_3'> when 'true' ->
	      {'function','vertex'}
	  %% Line 1356
	  <'A'> when 'true' ->
	      {'application','vertex'}
	  %% Line 1357
	  <'AM'> when 'true' ->
	      {'module','vertex'}
	  %% Line 1358
	  <'LM'> when 'true' ->
	      {'module','vertex'}
	  %% Line 1359
	  <'M'> when 'true' ->
	      {'module','vertex'}
	  %% Line 1360
	  <'UM'> when 'true' ->
	      {'module','vertex'}
	  %% Line 1361
	  <'R'> when 'true' ->
	      {'release','vertex'}
	  %% Line 1362
	  <'E'> when 'true' ->
	      {'function','edge'}
	  %% Line 1363
	  <'EE'> when 'true' ->
	      {'function','edge'}
	  %% Line 1364
	  <'LC'> when 'true' ->
	      {'function','edge'}
	  %% Line 1365
	  <'UC'> when 'true' ->
	      {'function','edge'}
	  %% Line 1366
	  <'XC'> when 'true' ->
	      {'function','edge'}
	  %% Line 1367
	  <'AE'> when 'true' ->
	      {'application','edge'}
	  %% Line 1368
	  <'ME'> when 'true' ->
	      {'module','edge'}
	  %% Line 1369
	  <'RE'> when 'true' ->
	      {'release','edge'}
	  %% Line 1370
	  <_cor2> when 'true' ->
	      {'foo','bar'}
	end
'make_families'/2 =
    %% Line 1372
    fun (_cor1,_cor0) ->
	let <Fun1> =
	    %% Line 1373
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{_cor10,XMod}> when 'true' ->
			( case XMod of
			    ( <( {'xref_mod',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec72}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec72
			      -| ['compiler_generated'] )
			    ( <_cor18> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xref_mod'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-make_families/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-make_families/2-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 1374
		call 'lists':'map'
		    (Fun1, _cor1)
	    in  let <Ss> =
		    %% Line 1374
		    call 'sofs':'from_sets'
			(_cor6)
		in  %% Line 1377
		    apply 'make_fams'/3
			(_cor0, Ss, [])
'make_fams'/3 =
    %% Line 1379
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <1,_X_Ss,L> when 'true' ->
	      %% Line 1380
	      L
	  %% Line 1381
	  <I,Ss,L> when 'true' ->
	      let <_cor7> =
		  %% Line 1382
		  ( fun (_cor5) ->
			let <_cor4> =
			    call 'erlang':'element'
				(1, _cor5)
			in  let <_cor3> =
				call 'erlang':'element'
				    (I, _cor5)
			    in  {_cor4,_cor3}
		    -| [{'id',{0,0,'-make_fams/3-fun-0-'}}] )
	      in  let <Fun> = {%% Line 1382
		       'external',_cor7}
		  in  let <_cor10> =
			  %% Line 1383
			  call 'erlang':'-'
			      (I, 1)
		      in  let <_cor9> =
			      %% Line 1383
			      call 'sofs':'projection'
				  (Fun, Ss)
			  in  %% Line 1383
			      apply 'make_fams'/3
				  (_cor10, Ss, [_cor9|L])
	end
'make_M2A'/1 =
    %% Line 1385
    fun (_cor0) ->
	let <Fun> =
	    %% Line 1386
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{M,XMod}> when 'true' ->
			( case XMod of
			    ( <( {'xref_mod',_cor10,_rec73,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}
				 -| ['compiler_generated'] )> when 'true' ->
				  {M,_rec73}
			      -| ['compiler_generated'] )
			    ( <_cor17> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xref_mod'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-make_M2A/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-make_M2A/1-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 1387
		call 'lists':'map'
		    (Fun, _cor0)
	    in  let <Mod0> =
		    %% Line 1387
		    call 'sofs':'family'
			(_cor6)
		in  %% Line 1388
		    call 'sofs':'family_to_relation'
			(Mod0)
'make_A2R'/1 =
    %% Line 1391
    fun (_cor0) ->
	let <AppDict> =
	    %% Line 1392
	    call 'dict':'to_list'
		(_cor0)
	in  let <Fun> =
		%% Line 1393
		( fun (_cor4) ->
		      case _cor4 of
			<{A,XApp}> when 'true' ->
			    ( case XApp of
				( <( {'xref_app',_cor12,_rec74,_cor13,_cor14}
				     -| ['compiler_generated'] )> when 'true' ->
				      {A,_rec74}
				  -| ['compiler_generated'] )
				( <_cor15> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xref_app'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'-make_A2R/1-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-make_A2R/1-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 1394
		    call 'lists':'map'
			(Fun, AppDict)
		in  let <Appl0> =
			%% Line 1394
			call 'sofs':'family'
			    (_cor7)
		    in  let <AllApps> =
			    %% Line 1395
			    call 'sofs':'domain'
				(Appl0)
			in  let <Appl> =
				%% Line 1396
				call 'sofs':'family_to_relation'
				    (Appl0)
			    in  %% Line 1397
				{Appl,AllApps}
'do_set_up_1'/1 =
    %% Line 1399
    fun (_cor0) ->
	let <XCp> =
	    %% Line 1401
	    call 'sofs':'union_of_family'
		(_cor0)
	in  let <XC_1> =
		%% Line 1402
		apply 'user_family'/1
		    (XCp)
	    in  let <I> =
		    %% Line 1406
		    call 'sofs':'range'
			(XCp)
		in  let <_cor4> =
			%% Line 1408
			call 'sofs':'domain'
			    (_cor0)
		    in  %% Line 1408
			case apply 'make_predefined'/2
				 (I, _cor4) of
			  <{XU,XPredefined}> when 'true' ->
			      %% Line 1409
			      {XC_1,XU,XPredefined}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
'make_predefined'/2 =
    %% Line 1411
    fun (_cor1,_cor0) ->
	let <XPredefined0> =
	    %% Line 1412
	    apply 'predefined_funs'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 1413
		call 'sofs':'substitution'
		    (1, XPredefined0)
	    in  let <XPredefined1> =
		    %% Line 1413
		    call 'sofs':'converse'
			(_cor3)
		in  let <XPredefined2> =
			%% Line 1415
			call 'sofs':'restriction'
			    (XPredefined1, _cor0)
		    in  let <XPredefined> =
			    %% Line 1416
			    call 'sofs':'relation_to_family'
				(XPredefined2)
			in  let <XU> =
				%% Line 1417
				call 'sofs':'partition_family'
				    (1, _cor1)
			    in  %% Line 1418
				{XU,XPredefined}
'predefined_funs'/1 =
    %% Line 1420
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1421
	    apply 'predef_fun'/0
		()
	in  %% Line 1421
	    call 'sofs':'specification'
		({'external',_cor1}, _cor0)
'predef_fun'/0 =
    %% Line 1423
    fun () ->
	let <PredefinedFuns> =
	    %% Line 1424
	    call 'xref_utils':'predefined_functions'
		()
	in  %% Line 1425
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{_X_M,F,A}> when 'true' ->
			call 'lists':'member'
			    ({F,A}, PredefinedFuns)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-predef_fun/0-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-predef_fun/0-fun-0-'}}] )
'make_defat'/2 =
    %% Line 1427
    fun (_cor1,_cor0) ->
	let <Zero> =
	    %% Line 1429
	    call 'sofs':'from_term'
		(0)
	in  let <_cor5> =
		%% Line 1430
		( fun (_cor3) ->
		      call 'sofs':'constant_function'
			  (_cor3, Zero)
		  -| [{'id',{0,0,'-make_defat/2-fun-0-'}}] )
	    in  let <DAL> =
		    %% Line 1430
		    call 'sofs':'family_projection'
			(_cor5, _cor1)
		in  %% Line 1431
		    call 'sofs':'family_union'
			(_cor0, DAL)
'make_libs'/5 =
    %% Line 1434
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Undef> =
	    %% Line 1435
	    call 'sofs':'family_difference'
		(_cor4, _cor3)
	in  let <_cor6> =
		%% Line 1436
		call 'sofs':'family_to_relation'
		    (Undef)
	    in  let <_cor7> =
		    %% Line 1436
		    call 'sofs':'domain'
			(_cor6)
		in  let <UM> =
			%% Line 1436
			call 'sofs':'difference'
			    (_cor7, _cor2)
		    in  let <_cor25> =
			    %% Line 1437
			    case call 'sofs':'is_empty_set'
				     (UM) of
			      %% Line 1438
			      <'true'> when 'true' ->
				  %% Line 1439
				  []
			      %% Line 1440
			      <'false'>
				  when call 'erlang':'=:='
					(_cor1,
					 'code_path') ->
				  let <BFun> =
				      %% Line 1441
				      ( fun (_cor11,_cor10) ->
					    case call 'xref_utils':'find_beam'
						     (_cor11) of
					      %% Line 1442
					      <{'ok',File}> when 'true' ->
						  [File|_cor10]
					      %% Line 1443
					      <_cor50> when 'true' ->
						  _cor10
					    end
					-| [{'id',{0,0,'-make_libs/5-fun-0-'}}] )
				  in  let <_cor15> =
					  %% Line 1446
					  call 'sofs':'to_external'
					      (UM)
				      in  %% Line 1446
					  call 'lists':'foldl'
					      (BFun, [], _cor15)
			      %% Line 1447
			      <'false'> when 'true' ->
				  let <Libraries> =
				      %% Line 1448
				      call 'dict':'to_list'
					  (_cor0)
				  in  let <_cor17> =
					  %% Line 1449
					  call 'sofs':'a_function'
					      (Libraries)
				      in  let <Lb> =
					      %% Line 1449
					      call 'sofs':'restriction'
						  (_cor17, UM)
					  in  let <MFun> =
						  %% Line 1450
						  ( fun (_cor20) ->
							case _cor20 of
							  <{M,XLib}> when 'true' ->
							      %% Line 1451
							      case XLib of
								<{'xref_lib',_cor51,Dir}> when 'true' ->
								    %% Line 1452
								    call 'xref_utils':'module_filename'
									(Dir, M)
								( <_cor19> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor19})
								  -| ['compiler_generated'] )
							      end
							  ( <_cor21> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor21})
								  -| [{'function_name',{'-make_libs/5-fun-1-',1}}] )
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-make_libs/5-fun-1-'}}] )
					      in  let <_cor23> =
						      %% Line 1454
						      call 'sofs':'to_external'
							  (Lb)
						  in  %% Line 1454
						      call 'lists':'map'
							  (MFun, _cor23)
			      ( <_cor24> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor24})
				-| ['compiler_generated'] )
			    end
			in  let <Fun> =
				%% Line 1456
				( fun (_cor31,_cor30) ->
				      %% Line 1457
				      case call 'beam_lib':'chunks'
					       (_cor31, ['exports'|['attributes']]) of
					%% Line 1458
					<{'ok',{M,[{'exports',X}|[{'attributes',A}|[]]]}}> when 'true' ->
					    let <Exports> =
						%% Line 1459
						apply 'mfa_exports'/3
						    (X, A, M)
					    in  %% Line 1461
						case apply 'deprecated'/3
							 (A, Exports, M) of
						  <{Deprecated,_X_Bad}> when 'true' ->
						      %% Line 1462
						      {{M,Exports},[{M,Deprecated}|_cor30]}
						  ( <_cor28> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor28})
						    -| ['compiler_generated'] )
						end
					%% Line 1463
					<Error> when 'true' ->
					    %% Line 1464
					    call 'erlang':'throw'
						(Error)
				      end
				  -| [{'id',{0,0,'-make_libs/5-fun-2-'}}] )
			    in  %% Line 1467
				case call 'lists':'mapfoldl'
					 (Fun, [], _cor25) of
				  <{XL,DL}> when 'true' ->
				      let <LF> =
					  %% Line 1468
					  call 'sofs':'from_term'
					      (XL)
				      in  let <Lib> =
					      %% Line 1471
					      call 'sofs':'family_intersection'
						  (Undef, LF)
					  in  %% Line 1472
					      case apply 'make_builtins'/1
						       (Undef) of
						<{B,_cor52}> when 'true' ->
						    let <DLib> =
							%% Line 1473
							call 'sofs':'family_union'
							    (Lib, B)
						    in  %% Line 1474
							case apply 'depr_lib'/6
								 (4, DL, DL, [], [], DLib) of
							  <[DF_1|[DF_21|[DF_31|[DF1|[]]]]]> when 'true' ->
							      let <DF_2> =
								  %% Line 1475
								  call 'sofs':'family_union'
								      (DF_21, DF_1)
							      in  let <DF_3> =
								      %% Line 1476
								      call 'sofs':'family_union'
									  (DF_31, DF_2)
								  in  let <DF> =
									  %% Line 1477
									  call 'sofs':'family_union'
									      (DF1, DF_3)
								      in  let <U> =
									      %% Line 1478
									      call 'sofs':'family_difference'
										  (Undef, Lib)
									  in  %% Line 1479
									      {Undef,U,Lib,DF,DF_1,DF_2,DF_3}
							  ( <_cor40> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor40})
							    -| ['compiler_generated'] )
							end
						( <_cor38> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor38})
						  -| ['compiler_generated'] )
					      end
				  ( <_cor35> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor35})
				    -| ['compiler_generated'] )
				end
'depr_lib'/6 =
    %% Line 1481
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_cor16,_cor17,LL,[],_X_Lib> when 'true' ->
	      %% Line 1482
	      LL
	  %% Line 1483
	  <I,[],DL,LL,L,Lib> when 'true' ->
	      let <_cor6> =
		  %% Line 1484
		  call 'sofs':'from_term'
		      (L)
	      in  let <DT> =
		      %% Line 1484
		      call 'sofs':'family_intersection'
			  (Lib, _cor6)
		  in  let <_cor8> =
			  %% Line 1485
			  call 'erlang':'-'
			      (I, 1)
		      in  %% Line 1485
			  apply 'depr_lib'/6
			      (_cor8, DL, DL, [DT|LL], [], Lib)
	  %% Line 1486
	  <I,[{M,D}|Ds],DL,LL,L,Lib> when 'true' ->
	      let <_cor9> =
		  %% Line 1487
		  call 'erlang':'element'
		      (I, D)
	      in  %% Line 1487
		  apply 'depr_lib'/6
		      (I, Ds, DL, LL, [{M,_cor9}|L], Lib)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'depr_lib',6}}] )
	    -| ['compiler_generated'] )
	end
'make_builtins'/1 =
    %% Line 1489
    fun (_cor0) ->
	let <Tmp> =
	    %% Line 1490
	    call 'sofs':'family_to_relation'
		(_cor0)
	in  let <_cor4> =
		%% Line 1491
		( fun (_cor2) ->
		      case _cor2 of
			<{_X_M,{M,F,A}}> when 'true' ->
			    call 'xref_utils':'is_builtin'
				(M, F, A)
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'-make_builtins/1-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-make_builtins/1-fun-0-'}}] )
	    in  let <Fun2> = {%% Line 1491
		     'external',_cor4}
		in  let <_cor6> =
			%% Line 1492
			call 'sofs':'specification'
			    (Fun2, Tmp)
		    in  let <B> =
			    %% Line 1492
			    call 'sofs':'relation_to_family'
				(_cor6)
			in  let <U> =
				%% Line 1493
				call 'sofs':'family_difference'
				    (_cor0, B)
			    in  %% Line 1494
				{B,U}
'user_family'/1 =
    %% Line 1497
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1498
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{_X_MFA1,{M2,_cor5,_cor6}}> when 'true' ->
			M2
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-user_family/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-user_family/1-fun-0-'}}] )
	in  %% Line 1498
	    call 'sofs':'partition_family'
		({'external',_cor3}, _cor0)
'do_variables'/1 =
    %% Line 1500
    fun (_cor0) ->
	let <Fun> =
	    %% Line 1501
	    ( fun (_cor5,_cor4) ->
		  case <_cor5,_cor4> of
		    <{Name,{'xref_var',_cor16,_cor17,'user',_cor18,_cor19}},{P,U}> when 'true' ->
			%% Line 1502
			{P,[Name|U]}
		    %% Line 1503
		    <{Name,{'xref_var',_cor20,_cor21,'predef',_cor22,_cor23}},A = {P,U}> when 'true' ->
			%% Line 1504
			case call 'erlang':'atom_to_list'
				 (Name) of
			  %% Line 1505
			  <[H|_cor24]>
			      when let <_cor1> =
				    call 'erlang':'>='
					(H, 97)
				in  let <_cor2> =
					call 'erlang':'=<'
					    (H, 122)
				    in  call 'erlang':'and'
					    (_cor1, _cor2) ->
			      A
			  %% Line 1506
			  <_X_Else> when 'true' ->
			      {[Name|P],U}
			end
		    %% Line 1508
		    <{{'tmp',V},_cor25},A> when 'true' ->
			do  %% Line 1509
			    call 'io':'format'
				([66|[117|[103|[32|[105|[110|[32|[126|[116|[112|[58|[32|[116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], ['xref_base'|[V|[]]])
			    %% Line 1509
			    A
		    %% Line 1510
		    <_X_V,A> when 'true' ->
			A
		  end
	      -| [{'id',{0,0,'-do_variables/1-fun-0-'}}] )
	in  %% Line 1512
	    ( case _cor0 of
		( <( {'xref',_cor26,_cor27,_rec75,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor11> =
			  call 'dict':'to_list'
			      (_rec75)
		      in  case call 'lists':'foldl'
				   (Fun, {[],[]}, _cor11) of
			    <{U,P}> when 'true' ->
				let <_cor14> =
				    %% Line 1513
				    call 'lists':'sort'
					(P)
				in  let <_cor13> =
					%% Line 1513
					call 'lists':'sort'
					    (U)
				    in  %% Line 1513
					{_cor14,_cor13}
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor12})
			      -| ['compiler_generated'] )
			  end
		  -| ['compiler_generated'] )
		( <_cor37> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'take_down'/1 =
    %% Line 1516
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xref',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}>
	      when call 'erlang':'=:='
		    (_cor12,
		     'not_set_up') ->
	      %% Line 1517
	      S
	  %% Line 1518
	  <S> when 'true' ->
	      %% Line 1519
	      case S of
		<{'xref',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
		    call 'erlang':'setelement'
			(4, S, 'not_set_up')
		( <_cor34> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'make_query'/2 =
    %% Line 1521
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1522
	    call 'io_lib':'format'
		(_cor1, _cor0)
	in  %% Line 1522
	    call 'lists':'flatten'
		(_cor2)
'set_defaults'/3 =
    %% Line 1524
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[O|Os],[[V|[]]|Vs],State> when 'true' ->
	      let <NewState> =
		  %% Line 1525
		  apply 'set_def'/3
		      (O, V, State)
	      in  %% Line 1526
		  apply 'set_defaults'/3
		      (Os, Vs, NewState)
	  %% Line 1527
	  <[],[],State> when 'true' ->
	      %% Line 1528
	      State
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'set_defaults',3}}] )
	    -| ['compiler_generated'] )
	end
'set_def'/3 =
    %% Line 1530
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'builtins',Value,State> when 'true' ->
	      %% Line 1531
	      case State of
		<{'xref',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
		    call 'erlang':'setelement'
			(10, State, Value)
		( <_cor26> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1532
	  <'recurse',Value,State> when 'true' ->
	      %% Line 1533
	      case State of
		<{'xref',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
		    call 'erlang':'setelement'
			(11, State, Value)
		( <_cor39> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1534
	  <'verbose',Value,State> when 'true' ->
	      %% Line 1535
	      case State of
		<{'xref',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
		    call 'erlang':'setelement'
			(12, State, Value)
		( <_cor52> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1536
	  <'warnings',Value,State> when 'true' ->
	      %% Line 1537
	      case State of
		<{'xref',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}> when 'true' ->
		    call 'erlang':'setelement'
			(13, State, Value)
		( <_cor65> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xref'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'set_def',3}}] )
	    -| ['compiler_generated'] )
	end
'option_values'/2 =
    %% Line 1539
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Option|Options],State> when 'true' ->
	      let <Default> =
		  %% Line 1540
		  apply 'current_default'/2
		      (State, Option)
	      in  let <_cor3> =
		      %% Line 1541
		      apply 'option_values'/2
			  (Options, State)
		  in  %% Line 1541
		      [{Option,[Default|['true'|['false']]]}|_cor3]
	  %% Line 1542
	  <[],_X_State> when 'true' ->
	      %% Line 1543
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'option_values',2}}] )
	    -| ['compiler_generated'] )
	end
'current_default'/2 =
    %% Line 1545
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,'builtins'> when 'true' ->
	      %% Line 1546
	      ( case State of
		  ( <( {'xref',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_rec81,_cor16,_cor17,_cor18}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec81
		    -| ['compiler_generated'] )
		  ( <_cor19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1547
	  <State,'recurse'> when 'true' ->
	      %% Line 1548
	      ( case State of
		  ( <( {'xref',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_rec82,_cor29,_cor30}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec82
		    -| ['compiler_generated'] )
		  ( <_cor31> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1549
	  <State,'verbose'> when 'true' ->
	      %% Line 1550
	      ( case State of
		  ( <( {'xref',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_rec83,_cor42}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec83
		    -| ['compiler_generated'] )
		  ( <_cor43> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1551
	  <State,'warnings'> when 'true' ->
	      %% Line 1552
	      ( case State of
		  ( <( {'xref',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_rec84}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec84
		    -| ['compiler_generated'] )
		  ( <_cor55> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'current_default',2}}] )
	    -| ['compiler_generated'] )
	end
'do_info'/2 =
    %% Line 1555
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,'modules'> when 'true' ->
	      %% Line 1556
	      ( case S of
		  ( <( {'xref',_cor27,_cor28,_cor29,_rec85,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor4> =
			    call 'dict':'to_list'
				(_rec85)
			in  let <D> =
				call 'lists':'sort'
				    (_cor4)
			    in  let <_cor8> =
				    %% Line 1557
				    ( fun (_cor6) ->
					  case _cor6 of
					    <{_X_M,XMod}> when 'true' ->
						apply 'mod_info'/1
						    (XMod)
					    ( <_cor7> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor7})
						    -| [{'function_name',{'-do_info/2-fun-0-',1}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-do_info/2-fun-0-'}}] )
				in  %% Line 1557
				    call 'lists':'map'
					(_cor8, D)
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1558
	  <S,'applications'> when 'true' ->
	      let <_cor9> =
		  %% Line 1559
		  apply 'app_mods'/1
		      (S)
	      in  let <_cor10> =
		      %% Line 1559
		      call 'sofs':'relation'
			  (_cor9)
		  in  let <_cor11> =
			  %% Line 1559
			  call 'sofs':'relation_to_family'
			      (_cor10)
		      in  let <AppMods> =
			      %% Line 1559
			      call 'sofs':'to_external'
				  (_cor11)
			  in  let <Sum> =
				  %% Line 1560
				  apply 'sum_mods'/2
				      (S, AppMods)
			      in  let <_cor16> =
				      %% Line 1561
				      ( fun (_cor14) ->
					    apply 'app_info'/2
						(_cor14, S)
					-| [{'id',{0,0,'-do_info/2-fun-1-'}}] )
				  in  %% Line 1561
				      call 'lists':'map'
					  (_cor16, Sum)
	  %% Line 1562
	  <S,'releases'> when 'true' ->
	      %% Line 1563
	      case apply 'rel_apps'/1
		       (S) of
		<{RA,RRA}> when 'true' ->
		    %% Line 1564
		    apply 'rel_apps_sums'/3
			(RA, RRA, S)
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1565
	  <S,'libraries'> when 'true' ->
	      %% Line 1566
	      ( case S of
		  ( <( {'xref',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec86,_cor46,_cor47,_cor48,_cor49}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor20> =
			    call 'dict':'to_list'
				(_rec86)
			in  let <D> =
				call 'lists':'sort'
				    (_cor20)
			    in  let <_cor24> =
				    %% Line 1567
				    ( fun (_cor22) ->
					  case _cor22 of
					    <{_X_L,XLib}> when 'true' ->
						apply 'lib_info'/1
						    (XLib)
					    ( <_cor23> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor23})
						    -| [{'function_name',{'-do_info/2-fun-2-',1}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-do_info/2-fun-2-'}}] )
				in  %% Line 1567
				    call 'lists':'map'
					(_cor24, D)
		    -| ['compiler_generated'] )
		  ( <_cor50> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1568
	  <_X_S,I> when 'true' ->
	      %% Line 1569
	      apply 'error'/1
		  ({'no_such_info',I})
	end
'do_info'/3 =
    %% Line 1571
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,Type,E>
	      when call 'erlang':'is_atom'
		    (E) ->
	      %% Line 1572
	      apply 'do_info'/3
		  (S, Type, [E|[]])
	  %% Line 1573
	  <S,'modules',Modules0>
	      when call 'erlang':'is_list'
		    (Modules0) ->
	      let <_cor3> =
		  %% Line 1574
		  call 'sofs':'set'
		      (Modules0)
	      in  let <Modules> =
		      %% Line 1574
		      call 'sofs':'to_external'
			  (_cor3)
		  in  %% Line 1575
		      ( case S of
			  ( <( {'xref',_cor43,_cor44,_cor45,_rec87,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
			       -| ['compiler_generated'] )> when 'true' ->
				let <XMods> =
				    apply 'find_info'/3
					(Modules, _rec87, 'no_such_module')
				in  let <_cor10> =
					%% Line 1576
					( fun (_cor8) ->
					      apply 'mod_info'/1
						  (_cor8)
					  -| [{'id',{0,0,'-do_info/3-fun-0-'}}] )
				    in  %% Line 1576
					call 'lists':'map'
					    (_cor10, XMods)
			    -| ['compiler_generated'] )
			  ( <_cor54> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xref'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 1577
	  <S,'applications',Applications>
	      when call 'erlang':'is_list'
		    (Applications) ->
	      %% Line 1578
	      ( case S of
		  ( <( {'xref',_cor55,_cor56,_cor57,_cor58,_rec88,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_X_XA> =
			    apply 'find_info'/3
				(Applications, _rec88, 'no_such_application')
			in  let <_cor14> =
				%% Line 1579
				apply 'app_mods'/1
				    (S)
			    in  let <AM> =
				    %% Line 1579
				    call 'sofs':'relation'
					(_cor14)
				in  let <App> =
					%% Line 1580
					call 'sofs':'set'
					    (Applications)
				    in  let <_cor17> =
					    %% Line 1581
					    call 'sofs':'restriction'
						(AM, App)
					in  let <AppMods_S> =
						%% Line 1581
						call 'sofs':'relation_to_family'
						    (_cor17)
					    in  let <_cor19> =
						    %% Line 1582
						    call 'sofs':'to_external'
							(AppMods_S)
						in  let <AppSums> =
							%% Line 1582
							apply 'sum_mods'/2
							    (S, _cor19)
						    in  let <_cor23> =
							    %% Line 1583
							    ( fun (_cor21) ->
								  apply 'app_info'/2
								      (_cor21, S)
							      -| [{'id',{0,0,'-do_info/3-fun-1-'}}] )
							in  %% Line 1583
							    call 'lists':'map'
								(_cor23, AppSums)
		    -| ['compiler_generated'] )
		  ( <_cor66> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1584
	  <S,'releases',Releases>
	      when call 'erlang':'is_list'
		    (Releases) ->
	      %% Line 1585
	      ( case S of
		  ( <( {'xref',_cor67,_cor68,_cor69,_cor70,_cor71,_rec89,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_X_XR> =
			    apply 'find_info'/3
				(Releases, _rec89, 'no_such_release')
			in  %% Line 1586
			    case apply 'rel_apps'/1
				     (S) of
			      <{AR,RRA}> when 'true' ->
				  let <_cor29> =
				      %% Line 1587
				      call 'sofs':'relation'
					  (AR)
				  in  let <_cor28> =
					  %% Line 1587
					  call 'sofs':'set'
					      (Releases)
				      in  let <AR_S> =
					      %% Line 1587
					      call 'sofs':'restriction'
						  (2, _cor29, _cor28)
					  in  let <_cor31> =
						  %% Line 1588
						  call 'sofs':'to_external'
						      (AR_S)
					      in  %% Line 1588
						  apply 'rel_apps_sums'/3
						      (_cor31, RRA, S)
			      ( <_cor27> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor27})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor78> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1589
	  <S,'libraries',Libraries0>
	      when call 'erlang':'is_list'
		    (Libraries0) ->
	      let <_cor32> =
		  %% Line 1590
		  call 'sofs':'set'
		      (Libraries0)
	      in  let <Libraries> =
		      %% Line 1590
		      call 'sofs':'to_external'
			  (_cor32)
		  in  %% Line 1591
		      ( case S of
			  ( <( {'xref',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_rec90,_cor86,_cor87,_cor88,_cor89}
			       -| ['compiler_generated'] )> when 'true' ->
				let <XLibs> =
				    apply 'find_info'/3
					(Libraries, _rec90, 'no_such_library')
				in  let <_cor39> =
					%% Line 1592
					( fun (_cor37) ->
					      apply 'lib_info'/1
						  (_cor37)
					  -| [{'id',{0,0,'-do_info/3-fun-2-'}}] )
				    in  %% Line 1592
					call 'lists':'map'
					    (_cor39, XLibs)
			    -| ['compiler_generated'] )
			  ( <_cor90> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xref'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 1593
	  <_X_S,I,J>
	      when call 'erlang':'is_list'
		    (J) ->
	      %% Line 1594
	      apply 'throw_error'/1
		  ({'no_such_info',I})
	  ( <_cor42,_cor41,_cor40> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor42,_cor41,_cor40})
		  -| [{'function_name',{'do_info',3}}] )
	    -| ['compiler_generated'] )
	end
'find_info'/3 =
    %% Line 1596
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E|Es],Dict,Error> when 'true' ->
	      %% Line 1597
	      case call 'dict':'find'
		       (E, Dict) of
		%% Line 1598
		<'error'> when 'true' ->
		    %% Line 1599
		    apply 'throw_error'/1
			({Error,E})
		%% Line 1600
		<{'ok',X}> when 'true' ->
		    let <_cor3> =
			%% Line 1601
			apply 'find_info'/3
			    (Es, Dict, Error)
		    in  %% Line 1601
			[X|_cor3]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1603
	  <[],_X_Dict,_X_Error> when 'true' ->
	      %% Line 1604
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'find_info',3}}] )
	    -| ['compiler_generated'] )
	end
'rel_apps'/1 =
    %% Line 1607
    fun (_cor0) ->
	%% Line 1608
	( case _cor0 of
	    ( <( {'xref',_cor17,_cor18,_cor19,_cor20,_rec91,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor3> =
		      call 'dict':'to_list'
			  (_rec91)
		  in  let <D> =
			  call 'lists':'sort'
			      (_cor3)
		      in  let <Fun> =
			      %% Line 1609
			      ( fun (_cor12,_cor11) ->
				    case <_cor12,_cor11> of
				      <{_X_A,XApp},Acc = {AR,RRA}> when 'true' ->
					  %% Line 1610
					  ( case XApp of
					      ( <( {'xref_app',_cor29,_rec92,_cor30,_cor31}
						   -| ['compiler_generated'] )> when 'true' ->
						    case _rec92 of
						      %% Line 1611
						      <[]> when 'true' ->
							  Acc
						      %% Line 1612
						      <[R|[]]> when 'true' ->
							  %% Line 1614
							  {[{_cor29,R}|AR],[{R,XApp}|RRA]}
						      ( <_cor10> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor10})
							-| ['compiler_generated'] )
						    end
						-| ['compiler_generated'] )
					      ( <_cor32> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','xref_app'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_cor14,_cor13> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor14,_cor13})
					      -| [{'function_name',{'-rel_apps/1-fun-0-',2}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-rel_apps/1-fun-0-'}}] )
			  in  %% Line 1617
			      call 'lists':'foldl'
				  (Fun, {[],[]}, D)
	      -| ['compiler_generated'] )
	    ( <_cor28> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'rel_apps_sums'/3 =
    %% Line 1620
    fun (_cor2,_cor1,_cor0) ->
	let <AppMods> =
	    %% Line 1621
	    apply 'app_mods'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 1622
		call 'sofs':'relation'
		    (_cor1)
	    in  let <RRA1> =
		    %% Line 1622
		    call 'sofs':'relation_to_family'
			(_cor4)
		in  let <_cor6> =
			%% Line 1623
			call 'sofs':'substitution'
			    (1, RRA1)
		    in  let <RRA> =
			    %% Line 1623
			    call 'sofs':'inverse'
				(_cor6)
			in  let <_cor9> =
				%% Line 1625
				call 'sofs':'relation'
				    (_cor2)
			    in  let <_cor8> =
				    %% Line 1625
				    call 'sofs':'relation'
					(AppMods)
				in  let <RelMods> =
					%% Line 1625
					call 'sofs':'relative_product1'
					    (_cor9, _cor8)
				    in  let <RelAppsMods> =
					    %% Line 1626
					    call 'sofs':'relative_product1'
						(RRA, RelMods)
					in  let <_cor12> =
						%% Line 1627
						call 'sofs':'relation_to_family'
						    (RelAppsMods)
					    in  let <RelsAppsMods> =
						    %% Line 1627
						    call 'sofs':'to_external'
							(_cor12)
						in  let <Sum> =
							%% Line 1629
							apply 'sum_mods'/2
							    (_cor0, RelsAppsMods)
						    in  let <_cor17> =
							    %% Line 1630
							    ( fun (_cor15) ->
								  apply 'rel_info'/2
								      (_cor15, _cor0)
							      -| [{'id',{0,0,'-rel_apps_sums/3-fun-0-'}}] )
							in  %% Line 1630
							    call 'lists':'map'
								(_cor17, Sum)
'app_mods'/1 =
    %% Line 1633
    fun (_cor0) ->
	%% Line 1634
	( case _cor0 of
	    ( <( {'xref',_cor14,_cor15,_cor16,_rec94,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor3> =
		      call 'dict':'to_list'
			  (_rec94)
		  in  let <D> =
			  call 'lists':'sort'
			      (_cor3)
		      in  let <Fun> =
			      %% Line 1635
			      ( fun (_cor9,_cor8) ->
				    case <_cor9,_cor8> of
				      <{_X_M,XMod},Acc> when 'true' ->
					  %% Line 1636
					  ( case XMod of
					      ( <( {'xref_mod',_cor26,_rec95,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}
						   -| ['compiler_generated'] )> when 'true' ->
						    case _rec95 of
						      %% Line 1637
						      <[]> when 'true' ->
							  Acc
						      %% Line 1638
						      <[AppName|[]]> when 'true' ->
							  [{AppName,XMod}|Acc]
						      ( <_cor7> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor7})
							-| ['compiler_generated'] )
						    end
						-| ['compiler_generated'] )
					      ( <_cor33> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','xref_mod'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_cor11,_cor10> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor11,_cor10})
					      -| [{'function_name',{'-app_mods/1-fun-0-',2}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-app_mods/1-fun-0-'}}] )
			  in  %% Line 1641
			      call 'lists':'foldl'
				  (Fun, [], D)
	      -| ['compiler_generated'] )
	    ( <_cor25> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'mod_info'/1 =
    %% Line 1643
    fun (_cor0) ->
	%% Line 1645
	case _cor0 of
	  <{'xref_mod',M,AppName,Dir,_cor4,BuiltIns,Info,_cor5,_cor6}> when 'true' ->
	      let <App> =
		  %% Line 1646
		  apply 'sup_info'/1
		      (AppName)
	      in  %% Line 1647
		  {M,[{'application',App}|[{'builtins',BuiltIns}|[{'directory',Dir}|Info]]]}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'app_info'/2 =
    %% Line 1649
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{AppName,ModSums},S> when 'true' ->
	      %% Line 1650
	      ( case S of
		  ( <( {'xref',_cor9,_cor10,_cor11,_cor12,_rec96,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1651
			case call 'dict':'fetch'
				 (AppName, _rec96) of
			  <{'xref_app',_cor21,RelName,Vsn,Dir}> when 'true' ->
			      let <Release> =
				  %% Line 1652
				  apply 'sup_info'/1
				      (RelName)
			      in  %% Line 1653
				  {AppName,[{'directory',Dir}|[{'release',Release}|[{'version',Vsn}|ModSums]]]}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'app_info',2}}] )
	    -| ['compiler_generated'] )
	end
'rel_info'/2 =
    %% Line 1655
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{{RelName,XApps},ModSums},S> when 'true' ->
	      let <NoApps> =
		  %% Line 1656
		  call 'erlang':'length'
		      (XApps)
	      in  %% Line 1657
		  ( case S of
		      ( <( {'xref',_cor11,_cor12,_cor13,_cor14,_cor15,_rec97,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 1658
			    ( case call 'dict':'fetch'
				       (RelName, _rec97) of
				( <( {'xref_rel',_cor23,_rec98}
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 1659
				      {RelName,[{'directory',_rec98}|[{'no_applications',NoApps}|ModSums]]}
				  -| ['compiler_generated'] )
				( <_cor24> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xref_rel'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor22> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xref'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'rel_info',2}}] )
	    -| ['compiler_generated'] )
	end
'lib_info'/1 =
    %% Line 1661
    fun (_cor0) ->
	%% Line 1662
	case _cor0 of
	  <{'xref_lib',LibName,Dir}> when 'true' ->
	      %% Line 1663
	      {LibName,[{'directory',Dir}|[]]}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'sup_info'/1 =
    %% Line 1665
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 1666
	  <[Name|[]]> when 'true' ->
	      %% Line 1667
	      [Name|[]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'sup_info',1}}] )
	    -| ['compiler_generated'] )
	end
'sum_mods'/2 =
    %% Line 1669
    fun (_cor1,_cor0) ->
	%% Line 1670
	apply 'sum_mods'/3
	    (_cor1, _cor0, [])
'sum_mods'/3 =
    %% Line 1672
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,[{N,XMods}|NX],L> when 'true' ->
	      let <_cor3> =
		  %% Line 1673
		  apply 'no_sum'/2
		      (S, XMods)
	      in  %% Line 1673
		  apply 'sum_mods'/3
		      (S, NX, [{N,_cor3}|L])
	  %% Line 1674
	  <_X_S,[],L> when 'true' ->
	      %% Line 1675
	      call 'lists':'reverse'
		  (L)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'sum_mods',3}}] )
	    -| ['compiler_generated'] )
	end
'no_sum'/2 =
    %% Line 1677
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'xref',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29},L>
	      when call 'erlang':'=:='
		    (_cor19,
		     'functions') ->
	      let <_cor8> =
		  %% Line 1678
		  call 'erlang':'length'
		      (L)
	      in  %% Line 1678
		  apply 'no_sum'/10
		      (L, 0, 0, 0, 0, 0, 0, 0, 0, _cor8)
	  %% Line 1679
	  <S = {'xref',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41},L>
	      when call 'erlang':'=:='
		    (_cor31,
		     'modules') ->
	      let <_cor15> =
		  %% Line 1680
		  call 'erlang':'length'
		      (L)
	      in  %% Line 1680
		  [{'no_analyzed_modules',_cor15}|[]]
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'no_sum',2}}] )
	    -| ['compiler_generated'] )
	end
'no_sum'/10 =
    %% Line 1682
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[XMod|D],C0,UC0,LC0,XC0,UFC0,L0,X0,EV0,NoM> when 'true' ->
	      %% Line 1686
	      ( case XMod of
		  ( <( {'xref_mod',_cor31,_cor32,_cor33,_cor34,_cor35,_rec99,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec99 of
			  <[{'no_calls',{C,UC}}|[{'no_function_calls',{LC,XC,UFC}}|[{'no_functions',{L,X}}|[{'no_inter_function_calls',EV}|[]]]]]> when 'true' ->
			      let <_cor20> =
				  %% Line 1687
				  call 'erlang':'+'
				      (C0, C)
			      in  let <_cor19> =
				      %% Line 1687
				      call 'erlang':'+'
					  (UC0, UC)
				  in  let <_cor18> =
					  %% Line 1687
					  call 'erlang':'+'
					      (LC0, LC)
				      in  let <_cor17> =
					      %% Line 1687
					      call 'erlang':'+'
						  (XC0, XC)
					  in  let <_cor16> =
						  %% Line 1687
						  call 'erlang':'+'
						      (UFC0, UFC)
					      in  let <_cor15> =
						      %% Line 1687
						      call 'erlang':'+'
							  (L0, L)
						  in  let <_cor14> =
							  %% Line 1687
							  call 'erlang':'+'
							      (X0, X)
						      in  let <_cor13> =
							      %% Line 1687
							      call 'erlang':'+'
								  (EV0, EV)
							  in  %% Line 1687
							      apply 'no_sum'/10
								  (D, _cor20, _cor19, _cor18, _cor17, _cor16, _cor15, _cor14, _cor13, NoM)
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xref_mod'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1688
	  <[],C,UC,LC,XC,UFC,L,X,EV,NoM> when 'true' ->
	      %% Line 1689
	      [{'no_analyzed_modules',NoM}|%% Line 1690
					   [{'no_calls',{C,UC}}|%% Line 1691
								[{'no_function_calls',{LC,XC,UFC}}|%% Line 1692
												   [{'no_functions',{L,X}}|%% Line 1693
															   [{'no_inter_function_calls',EV}|[]]]]]]
	  ( <_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'no_sum',10}}] )
	    -| ['compiler_generated'] )
	end
'is_filename'/1 =
    %% Line 1696
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1697
	      'ok'
	  %% Line 1698
	  <F> when 'true' ->
	      %% Line 1699
	      case call 'xref_utils':'is_string'
		       (F, 31) of
		%% Line 1700
		<'true'> when 'true' ->
		    %% Line 1701
		    'ok'
		%% Line 1702
		<'false'> when 'true' ->
		    %% Line 1703
		    apply 'throw_error'/1
			({'invalid_filename',F})
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'module_file'/1 =
    %% Line 1706
    fun (_cor0) ->
	%% Line 1707
	( case _cor0 of
	    ( <( {'xref_mod',_cor6,_cor7,_rec100,_cor8,_cor9,_cor10,_cor11,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'xref_utils':'module_filename'
		      (_rec100, _cor6)
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xref_mod'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'warnings'/3 =
    %% Line 1709
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Flag,_X_Message,[]> when 'true' ->
	      'true'
	  %% Line 1710
	  <Flag,Message,[F|Fs]> when 'true' ->
	      do  %% Line 1711
		  apply 'message'/3
		      (Flag, Message, F)
		  %% Line 1712
		  apply 'warnings'/3
		      (Flag, Message, Fs)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'warnings',3}}] )
	    -| ['compiler_generated'] )
	end
'pack'/1 =
    %% Line 1724
    fun (_cor0) ->
	let <PD> =
	    %% Line 1725
	    call 'erlang':'erase'
		()
	in  let <NT> =
		%% Line 1726
		apply 'pack1'/1
		    (_cor0)
	    in  do  %% Line 1729
		    call 'erlang':'erase'
			()
		    let <_cor5> =
			%% Line 1730
			( fun (_cor3) ->
			      case _cor3 of
				<{K,V}> when 'true' ->
				    call 'erlang':'put'
					(K, V)
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'-pack/1-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-pack/1-fun-0-'}}] )
		    in  do  %% Line 1730
			    call 'lists':'foreach'
				(_cor5, PD)
			    %% Line 1731
			    NT
'pack1'/1 =
    %% Line 1733
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when try
		    let <_cor1> =
			call 'erlang':'is_tuple'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'not'
				(_cor1)
			in  let <_cor3> =
				call 'erlang':'is_list'
				    (_cor0)
			    in  let <_cor4> =
				    call 'erlang':'not'
					(_cor3)
				in  call 'erlang':'and'
					(_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1734
	      C
	  %% Line 1735
	  <[T|Ts]> when 'true' ->
	      let <_cor5> =
		  %% Line 1737
		  apply 'pack1'/1
		      (T)
	      in  let <_cor6> =
		      %% Line 1737
		      apply 'pack1'/1
			  (Ts)
		  in  %% Line 1737
		      [_cor5|_cor6]
	  %% Line 1739
	  <T = {Mod,Fun,_cor16}>
	      when let <_cor7> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor8> =
			call 'erlang':'is_atom'
			    (Fun)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 1740
	      case call 'erlang':'get'
		       (T) of
		%% Line 1741
		<'undefined'> when 'true' ->
		    do  call 'erlang':'put'
			    (T, T)
			T
		%% Line 1742
		<NT> when 'true' ->
		    NT
	      end
	  %% Line 1744
	  <{C,L}>
	      when call 'erlang':'is_list'
		    (L) ->
	      let <_cor10> =
		  %% Line 1745
		  apply 'pack1'/1
		      (C)
	      in  %% Line 1745
		  {_cor10,L}
	  %% Line 1746
	  <{MFA,L}>
	      when call 'erlang':'is_integer'
		    (L) ->
	      let <_cor11> =
		  %% Line 1747
		  apply 'pack1'/1
		      (MFA)
	      in  %% Line 1747
		  {_cor11,L}
	  %% Line 1749
	  <[]> when 'true' ->
	      %% Line 1750
	      []
	  %% Line 1751
	  <T> when 'true' ->
	      %% Line 1752
	      case call 'erlang':'get'
		       (T) of
		%% Line 1753
		<'undefined'> when 'true' ->
		    let <_cor12> =
			%% Line 1754
			call 'erlang':'tuple_size'
			    (T)
		    in  let <NT> =
			    %% Line 1754
			    apply 'tpack'/3
				(T, _cor12, [])
			in  do  %% Line 1755
				call 'erlang':'put'
				    (NT, NT)
				%% Line 1756
				NT
		%% Line 1757
		<NT> when 'true' ->
		    %% Line 1758
		    NT
	      end
	end
'tpack'/3 =
    %% Line 1761
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_T,0,L> when 'true' ->
	      %% Line 1762
	      call 'erlang':'list_to_tuple'
		  (L)
	  %% Line 1763
	  <T,I,L> when 'true' ->
	      let <_cor5> =
		  %% Line 1764
		  call 'erlang':'-'
		      (I, 1)
	      in  let <_cor3> =
		      %% Line 1764
		      call 'erlang':'element'
			  (I, T)
		  in  let <_cor4> =
			  %% Line 1764
			  apply 'pack1'/1
			      (_cor3)
		      in  %% Line 1764
			  apply 'tpack'/3
			      (T, _cor5, [_cor4|L])
	end
'message'/3 =
    %% Line 1766
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'true',What,Arg> when 'true' ->
	      %% Line 1767
	      case What of
		%% Line 1768
		<'reading_beam'> when 'true' ->
		    %% Line 1769
		    call 'io':'format'
			([126|[116|[115|[46|[46|[46|[32]]]]]]], Arg)
		%% Line 1770
		<'skipped_beam'> when 'true' ->
		    %% Line 1771
		    call 'io':'format'
			([115|[107|[105|[112|[112|[101|[100|[32|[40|[110|[111|[32|[100|[101|[98|[117|[103|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Arg)
		%% Line 1772
		<'no_debug_info'> when 'true' ->
		    %% Line 1773
		    call 'io':'format'
			([83|[107|[105|[112|[112|[105|[110|[103|[32|[126|[116|[115|[32|[40|[110|[111|[32|[100|[101|[98|[117|[103|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Arg)
		%% Line 1774
		<'unresolved_summary1'> when 'true' ->
		    %% Line 1775
		    call 'io':'format'
			([126|[116|[112|[58|[32|[49|[32|[117|[110|[114|[101|[115|[111|[108|[118|[101|[100|[32|[99|[97|[108|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], Arg)
		%% Line 1776
		<'unresolved_summary'> when 'true' ->
		    %% Line 1777
		    call 'io':'format'
			([126|[116|[112|[58|[32|[126|[116|[112|[32|[117|[110|[114|[101|[115|[111|[108|[118|[101|[100|[32|[99|[97|[108|[108|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], Arg)
		%% Line 1778
		<'jam'> when 'true' ->
		    %% Line 1779
		    call 'io':'format'
			([83|[107|[105|[112|[112|[105|[110|[103|[32|[126|[116|[115|[32|[40|[112|[114|[111|[98|[97|[98|[108|[121|[32|[74|[65|[77|[32|[102|[105|[108|[101|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Arg|[]])
		%% Line 1780
		<'unreadable'> when 'true' ->
		    %% Line 1781
		    call 'io':'format'
			([83|[107|[105|[112|[112|[105|[110|[103|[32|[126|[116|[115|[32|[40|[117|[110|[114|[101|[97|[100|[97|[98|[108|[101|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [Arg|[]])
		%% Line 1782
		<'xref_attr'> when 'true' ->
		    %% Line 1783
		    call 'io':'format'
			([126|[116|[115|[58|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[39|[120|[114|[101|[102|[39|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Arg)
		%% Line 1784
		<'depr_attr'> when 'true' ->
		    %% Line 1785
		    call 'io':'format'
			([126|[116|[115|[58|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[39|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[39|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Arg)
		%% Line 1786
		<'lib_search'> when 'true' ->
		    %% Line 1787
		    call 'io':'format'
			([83|[99|[97|[110|[110|[105|[110|[103|[32|[108|[105|[98|[114|[97|[114|[121|[32|[112|[97|[116|[104|[32|[102|[111|[114|[32|[66|[69|[65|[77|[32|[102|[105|[108|[101|[115|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		%% Line 1788
		<'lib_check'> when 'true' ->
		    %% Line 1789
		    call 'io':'format'
			([67|[104|[101|[99|[107|[105|[110|[103|[32|[108|[105|[98|[114|[97|[114|[121|[32|[102|[105|[108|[101|[115|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		%% Line 1790
		<'set_up'> when 'true' ->
		    %% Line 1791
		    call 'io':'format'
			([83|[101|[116|[116|[105|[110|[103|[32|[117|[112|[46|[46|[46]]]]]]]]]]]]], Arg)
		%% Line 1792
		<'done'> when 'true' ->
		    %% Line 1793
		    call 'io':'format'
			([100|[111|[110|[101|[126|[110]]]]]], Arg)
		%% Line 1794
		<'error'> when 'true' ->
		    %% Line 1795
		    call 'io':'format'
			([101|[114|[114|[111|[114|[126|[110]]]]]]], Arg)
		%% Line 1796
		<Else> when 'true' ->
		    %% Line 1797
		    call 'io':'format'
			([126|[116|[112|[126|[110]]]]], [{Else,Arg}|[]])
	      end
	  %% Line 1799
	  <_cor7,_cor8,_cor9> when 'true' ->
	      %% Line 1800
	      'true'
	end
'throw_error'/1 =
    %% Line 1802
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1803
	    apply 'error'/1
		(_cor0)
	in  %% Line 1803
	    call 'erlang':'throw'
		(_cor1)
'error'/1 =
    %% Line 1805
    fun (_cor0) ->
	%% Line 1806
	{'error','xref_base',_cor0}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xref_base')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xref_base', _cor0)
end