module 'edoc_wiki' ['expand_text'/2,
		    'module_info'/0,
		    'module_info'/1,
		    'parse_xml'/2]
    attributes [%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','context'},[{'record_field',32,{'atom',32,'dir'},{'string',32,[]}}|[{'record_field',33,{'atom',33,'env'}}|[{'record_field',34,{'atom',34,'opts'},{'nil',34}}]]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','doclet_gen'},[{'record_field',51,{'atom',51,'sources'},{'nil',51}}|[{'record_field',52,{'atom',52,'app'},{'nil',52}}|[{'record_field',53,{'atom',53,'packages'},{'nil',53}}|[{'record_field',54,{'atom',54,'modules'},{'nil',54}}|[{'record_field',55,{'atom',55,'filemap'}}]]]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','doclet_toc'},[{'record_field',61,{'atom',61,'paths'}}|[{'record_field',62,{'atom',62,'indir'}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','module'},[{'record_field',56,{'atom',56,'name'},{'nil',56}}|[{'record_field',57,{'atom',57,'parameters'},{'atom',57,'none'}}|[{'record_field',58,{'atom',58,'functions'},{'nil',58}}|[{'record_field',59,{'atom',59,'exports'},{'nil',59}}|[{'record_field',60,{'atom',60,'attributes'},{'nil',60}}|[{'record_field',61,{'atom',61,'records'},{'nil',61}}|[{'record_field',62,{'atom',62,'encoding'},{'atom',62,'latin1'}}]]]]]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','env'},[{'record_field',67,{'atom',67,'module'},{'nil',67}}|[{'record_field',68,{'atom',68,'package'},{'nil',68}}|[{'record_field',69,{'atom',69,'root'},{'string',69,[]}}|[{'record_field',70,{'atom',70,'file_suffix'}}|[{'record_field',71,{'atom',71,'package_summary'}}|[{'record_field',72,{'atom',72,'apps'}}|[{'record_field',73,{'atom',73,'modules'}}|[{'record_field',74,{'atom',74,'packages'}}|[{'record_field',75,{'atom',75,'app_default'}}|[{'record_field',76,{'atom',76,'macros'},{'nil',76}}|[{'record_field',77,{'atom',77,'includes'},{'nil',77}}]]]]]]]]]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','comment'},[{'record_field',85,{'atom',85,'line'},{'integer',85,0}}|[{'record_field',85,{'atom',85,'text'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','entry'},[{'record_field',96,{'atom',96,'name'}}|[{'record_field',96,{'atom',96,'args'},{'nil',96}}|[{'record_field',96,{'atom',96,'line'},{'integer',96,0}}|[{'record_field',96,{'atom',96,'export'}}|[{'record_field',96,{'atom',96,'data'}}]]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','tag'},[{'record_field',105,{'atom',105,'name'}}|[{'record_field',105,{'atom',105,'line'},{'integer',105,0}}|[{'record_field',105,{'atom',105,'origin'},{'atom',105,'comment'}}|[{'record_field',105,{'atom',105,'data'}}]]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','xmlDecl'},[{'record_field',38,{'atom',38,'vsn'}}|[{'record_field',39,{'atom',39,'encoding'}}|[{'record_field',40,{'atom',40,'standalone'}}|[{'record_field',41,{'atom',41,'attributes'}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','xmlAttribute'},[{'record_field',46,{'atom',46,'name'}}|[{'record_field',47,{'atom',47,'expanded_name'},{'nil',47}}|[{'record_field',48,{'atom',48,'nsinfo'},{'nil',48}}|[{'record_field',49,{'atom',49,'namespace'},{'nil',49}}|[{'record_field',50,{'atom',50,'parents'},{'nil',50}}|[{'record_field',51,{'atom',51,'pos'}}|[{'record_field',52,{'atom',52,'language'},{'nil',52}}|[{'record_field',53,{'atom',53,'value'}}|[{'record_field',54,{'atom',54,'normalized'}}]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','xmlNamespace'},[{'record_field',59,{'atom',59,'default'},{'nil',59}}|[{'record_field',60,{'atom',60,'nodes'},{'nil',60}}]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','xmlNsNode'},[{'record_field',65,{'atom',65,'parents'},{'nil',65}}|[{'record_field',66,{'atom',66,'pos'}}|[{'record_field',67,{'atom',67,'prefix'}}|[{'record_field',68,{'atom',68,'uri'},{'nil',68}}]]]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','xmlElement'},[{'record_field',74,{'atom',74,'name'}}|[{'record_field',75,{'atom',75,'expanded_name'},{'nil',75}}|[{'record_field',76,{'atom',76,'nsinfo'},{'nil',76}}|[{'record_field',77,{'atom',77,'namespace'},{'record',77,'xmlNamespace',[]}}|[{'record_field',78,{'atom',78,'parents'},{'nil',78}}|[{'record_field',79,{'atom',79,'pos'}}|[{'record_field',80,{'atom',80,'attributes'},{'nil',80}}|[{'record_field',81,{'atom',81,'content'},{'nil',81}}|[{'record_field',82,{'atom',82,'language'},{'string',82,[]}}|[{'record_field',83,{'atom',83,'xmlbase'},{'string',83,[]}}|[{'record_field',84,{'atom',84,'elementdef'},{'atom',84,'undeclared'}}]]]]]]]]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','xmlText'},[{'record_field',90,{'atom',90,'parents'},{'nil',90}}|[{'record_field',91,{'atom',91,'pos'}}|[{'record_field',92,{'atom',92,'language'},{'nil',92}}|[{'record_field',93,{'atom',93,'value'}}|[{'record_field',94,{'atom',94,'type'},{'atom',94,'text'}}]]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','xmlComment'},[{'record_field',99,{'atom',99,'parents'},{'nil',99}}|[{'record_field',100,{'atom',100,'pos'}}|[{'record_field',101,{'atom',101,'language'},{'nil',101}}|[{'record_field',102,{'atom',102,'value'}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','xmlPI'},[{'record_field',107,{'atom',107,'name'}}|[{'record_field',108,{'atom',108,'parents'},{'nil',108}}|[{'record_field',109,{'atom',109,'pos'}}|[{'record_field',110,{'atom',110,'value'}}]]]],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','xmlDocument'},[{'record_field',114,{'atom',114,'content'}}],[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','xmlContext'},[{'record_field',121,{'atom',121,'axis_type'},{'atom',121,'forward'}}|[{'record_field',122,{'atom',122,'context_node'}}|[{'record_field',123,{'atom',123,'context_position'},{'integer',123,1}}|[{'record_field',124,{'atom',124,'nodeset'},{'nil',124}}|[{'record_field',125,{'atom',125,'bindings'},{'nil',125}}|[{'record_field',126,{'atom',126,'functions'},{'nil',126}}|[{'record_field',127,{'atom',127,'namespace'},{'nil',127}}|[{'record_field',128,{'atom',128,'whole_document'}}]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','xmlNode'},[{'record_field',132,{'atom',132,'type'},{'atom',132,'element'}}|[{'record_field',133,{'atom',133,'node'}}|[{'record_field',134,{'atom',134,'parents'},{'nil',134}}|[{'record_field',135,{'atom',135,'pos'},{'integer',135,1}}]]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','xmlObj'},[{'record_field',139,{'atom',139,'type'}}|[{'record_field',140,{'atom',140,'value'}}]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','xmerl_fun_states'},[{'record_field',143,{'atom',143,'event'}}|[{'record_field',144,{'atom',144,'hook'}}|[{'record_field',145,{'atom',145,'rules'}}|[{'record_field',146,{'atom',146,'fetch'}}|[{'record_field',147,{'atom',147,'cont'}}]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','xmerl_scanner'},[{'record_field',152,{'atom',152,'encoding'},{'atom',152,'undefined'}}|[{'record_field',153,{'atom',153,'standalone'},{'atom',153,'no'}}|[{'record_field',155,{'atom',155,'environment'},{'atom',155,'prolog'}}|[{'record_field',156,{'atom',156,'declarations'},{'nil',156}}|[{'record_field',157,{'atom',157,'doctype_name'}}|[{'record_field',158,{'atom',158,'doctype_DTD'},{'atom',158,'internal'}}|[{'record_field',159,{'atom',159,'comments'},{'atom',159,'true'}}|[{'record_field',160,{'atom',160,'document'},{'atom',160,'false'}}|[{'record_field',161,{'atom',161,'default_attrs'},{'atom',161,'false'}}|[{'record_field',162,{'atom',162,'rules'}}|[{'record_field',163,{'atom',163,'keep_rules'},{'atom',163,'false'}}|[{'record_field',164,{'atom',164,'namespace_conformant'},{'atom',164,'false'}}|[{'record_field',165,{'atom',165,'xmlbase'}}|[{'record_field',166,{'atom',166,'xmlbase_cache'}}|[{'record_field',167,{'atom',167,'fetch_path'},{'nil',167}}|[{'record_field',169,{'atom',169,'filename'},{'atom',169,'file_name_unknown'}}|[{'record_field',170,{'atom',170,'validation'},{'atom',170,'off'}}|[{'record_field',171,{'atom',171,'schemaLocation'},{'nil',171}}|[{'record_field',172,{'atom',172,'space'},{'atom',172,'preserve'}}|[{'record_field',173,{'atom',173,'event_fun'}}|[{'record_field',174,{'atom',174,'hook_fun'}}|[{'record_field',175,{'atom',175,'acc_fun'}}|[{'record_field',176,{'atom',176,'fetch_fun'}}|[{'record_field',177,{'atom',177,'close_fun'}}|[{'record_field',178,{'atom',178,'continuation_fun'}}|[{'record_field',179,{'atom',179,'rules_read_fun'}}|[{'record_field',180,{'atom',180,'rules_write_fun'}}|[{'record_field',181,{'atom',181,'rules_delete_fun'}}|[{'record_field',182,{'atom',182,'user_state'}}|[{'record_field',183,{'atom',183,'fun_states'},{'record',183,'xmerl_fun_states',[]}}|[{'record_field',184,{'atom',184,'entity_references'},{'nil',184}}|[{'record_field',185,{'atom',185,'text_decl'},{'atom',185,'false'}}|[{'record_field',186,{'atom',186,'quiet'},{'atom',186,'false'}}|[{'record_field',187,{'atom',187,'col'},{'integer',187,1}}|[{'record_field',188,{'atom',188,'line'},{'integer',188,1}}|[{'record_field',189,{'atom',189,'common_data'},{'nil',189}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{{'record','xmerl_event'},[{'record_field',199,{'atom',199,'event'}}|[{'record_field',200,{'atom',200,'line'}}|[{'record_field',201,{'atom',201,'col'}}|[{'record_field',202,{'atom',202,'pos'}}|[{'record_field',203,{'atom',203,'data'}}]]]]],[]}],
		%% Line 294
		'spec' =
		    %% Line 294
		    [{{'expand_uri_error',2},[{'type',294,'fun',[{'type',294,'product',[{'type',294,'list',[]}|[{'type',294,'pos_integer',[]}]]}|[{'type',294,'no_return',[]}]]}]}],
		%% Line 462
		'spec' =
		    %% Line 462
		    [{{'throw_error',2},[{'type',462,'fun',[{'type',462,'product',[{'type',462,'non_neg_integer',[]}|[{'type',462,'tuple',[{'type',462,'string',[]}|[{'type',462,'list',[{'var',462,'_'}]}]]}]]}|[{'type',462,'no_return',[]}]]}]}]]
'parse_xml'/2 =
    %% Line 78
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 79
	    apply 'expand_text'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 79
		apply 'parse_xml_1'/2
		    (_cor2, _cor0)
	    in  %% Line 79
		apply 'par'/1
		    (_cor3)
'parse_xml_1'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 82
	    call 'erlang':'++'
		(_cor1, [60|[47|[100|[111|[99|[62]]]]]])
	in  let <Text1> =
		%% Line 82
		call 'erlang':'++'
		    ([60|[100|[111|[99|[62]]]]], _cor2)
	    in  let <Opts> =
		    %% Line 84
		    [{'line',_cor0}|[{'encoding','iso-8859-1'}]]
		in  let <_cor6> =
			catch
			    let <_cor5> =
				%% Line 85
				call 'xmerl_scan':'string'
				    (Text1, Opts)
			    in  %% Line 85
				{'ok',_cor5}
		    in  %% Line 85
			case _cor6 of
			  %% Line 86
			  <{'ok',{E,_cor11}}> when 'true' ->
			      %% Line 87
			      ( case E of
				  ( <( {'xmlElement',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec0,_cor19,_cor20,_cor21}
				       -| ['compiler_generated'] )> when 'true' ->
					_rec0
				    -| ['compiler_generated'] )
				  ( <_cor22> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','xmlElement'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 88
			  <{'EXIT',{'fatal',{Reason,L,_X_C}}}> when 'true' ->
			      %% Line 89
			      apply 'throw_error'/2
				  (L, {[88|[77|[76|[32|[112|[97|[114|[115|[101|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]],[Reason|[]]})
			  %% Line 90
			  <{'EXIT',Reason}> when 'true' ->
			      %% Line 91
			      apply 'throw_error'/2
				  (_cor0, {[101|[114|[114|[111|[114|[32|[105|[110|[32|[88|[77|[76|[32|[112|[97|[114|[115|[101|[114|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]],[Reason|[10]]})
			  %% Line 92
			  <Other> when 'true' ->
			      %% Line 93
			      apply 'throw_error'/2
				  (_cor0, {[110|[111|[99|[97|[116|[99|[104|[32|[105|[110|[32|[88|[77|[76|[32|[112|[97|[114|[115|[101|[114|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]]],[Other|[10]]})
			end
'expand_text'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 99
	    apply 'expand_new_line'/3
		(_cor1, _cor0, [])
	in  %% Line 99
	    call 'lists':'reverse'
		(_cor2)
'expand_new_line'/3 =
    %% Line 103
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C = 32|Cs],L,As> when 'true' ->
	      %% Line 104
	      apply 'expand_new_line'/3
		  (Cs, L, [C|As])
	  %% Line 105
	  <[C = 9|Cs],L,As> when 'true' ->
	      %% Line 106
	      apply 'expand_new_line'/3
		  (Cs, L, [C|As])
	  %% Line 107
	  <[C = 10|Cs],L,As> when 'true' ->
	      let <_cor3> =
		  %% Line 108
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 108
		  apply 'expand_new_line'/3
		      (Cs, _cor3, [C|As])
	  %% Line 109
	  <[61|[61|[61|[61|Cs]]]],L,As> when 'true' ->
	      %% Line 110
	      apply 'expand_heading'/4
		  (Cs, 2, L, As)
	  %% Line 111
	  <[61|[61|[61|Cs]]],L,As> when 'true' ->
	      %% Line 112
	      apply 'expand_heading'/4
		  (Cs, 1, L, As)
	  %% Line 113
	  <[61|[61|Cs]],L,As> when 'true' ->
	      %% Line 114
	      apply 'expand_heading'/4
		  (Cs, 0, L, As)
	  %% Line 115
	  <Cs,L,As> when 'true' ->
	      %% Line 116
	      apply 'expand'/3
		  (Cs, L, As)
	end
'expand'/3 =
    %% Line 118
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[96|[39|Cs]],L,As> when 'true' ->
	      %% Line 119
	      apply 'expand'/3
		  (Cs, L, [96|As])
	  %% Line 120
	  <[96|[96|[96|Cs]]],L,As> when 'true' ->
	      %% Line 123
	      case apply 'strip_empty_lines'/1
		       (Cs) of
		<{Cs1,Skipped}> when 'true' ->
		    let <_cor7> =
			%% Line 124
			case <> of
			  <>
			      when call 'erlang':'>'
				    (Skipped,
				     0) ->
			      %% Line 125
			      0
			  %% Line 126
			  <> when 'true' ->
			      %% Line 127
			      case call 'edoc_lib':'split_at'
				       (As, 10) of
				<{As1,_cor21}> when 'true' ->
				    %% Line 128
				    case call 'edoc_lib':'is_space'
					     (As1) of
				      %% Line 129
				      <'true'> when 'true' ->
					  let <_cor5> =
					      call 'erlang':'length'
						  (As1)
					  in  call 'erlang':'+'
						  (3, _cor5)
				      %% Line 130
				      <'false'> when 'true' ->
					  2
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor6})
					-| ['compiler_generated'] )
				    end
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor4})
				  -| ['compiler_generated'] )
			      end
			end
		    in  let <Ss> =
			    %% Line 133
			    call 'lists':'duplicate'
				(_cor7, 32)
			in  let <_cor12> =
				%% Line 134
				call 'erlang':'+'
				    (L, Skipped)
			    in  let <_cor10> =
				    %% Line 134
				    call 'erlang':'++'
					([91|[65|[84|[65|[68|[67|[91|[33|[60|[62|[101|[114|[112|[60]]]]]]]]]]]]]], As)
				in  let <_cor11> =
					%% Line 134
					call 'erlang':'++'
					    (Ss, _cor10)
				    in  %% Line 134
					apply 'expand_triple'/3
					    (Cs1, _cor12, _cor11)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 135
	  <[96|[96|Cs]],L,As> when 'true' ->
	      let <_cor14> =
		  %% Line 136
		  call 'edoc_lib':'strip_space'
		      (Cs)
	      in  let <_cor13> =
		      %% Line 136
		      call 'erlang':'++'
			  ([62|[101|[100|[111|[99|[60]]]]]], As)
		  in  %% Line 136
		      apply 'expand_double'/3
			  (_cor14, L, _cor13)
	  %% Line 137
	  <[96|Cs],L,As> when 'true' ->
	      let <_cor16> =
		  %% Line 138
		  call 'edoc_lib':'strip_space'
		      (Cs)
	      in  let <_cor15> =
		      %% Line 138
		      call 'erlang':'++'
			  ([62|[101|[100|[111|[99|[60]]]]]], As)
		  in  %% Line 138
		      apply 'expand_single'/3
			  (_cor16, L, _cor15)
	  %% Line 139
	  <[91|Cs],L,As> when 'true' ->
	      %% Line 140
	      apply 'expand_uri'/3
		  (Cs, L, As)
	  %% Line 141
	  <[C = 10|Cs],L,As> when 'true' ->
	      let <_cor17> =
		  %% Line 142
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 142
		  apply 'expand_new_line'/3
		      (Cs, _cor17, [C|As])
	  %% Line 143
	  <[C|Cs],L,As> when 'true' ->
	      %% Line 144
	      apply 'expand'/3
		  (Cs, L, [C|As])
	  %% Line 145
	  <[],_cor22,As> when 'true' ->
	      %% Line 146
	      As
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'expand',3}}] )
	    -| ['compiler_generated'] )
	end
'expand_heading'/4 =
    %% Line 152
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Cs = [61|_cor22],N,L,As> when 'true' ->
	      %% Line 153
	      apply 'expand_heading_1'/4
		  (Cs, N, L, As)
	  %% Line 154
	  <Cs,N,L,As> when 'true' ->
	      %% Line 155
	      case call 'edoc_lib':'split_at'
		       (Cs, 10) of
		<{Cs1,Cs2}> when 'true' ->
		    let <_cor5> =
			%% Line 156
			call 'lists':'reverse'
			    (Cs1)
		    in  %% Line 156
			case call 'edoc_lib':'strip_space'
				 (_cor5) of
			  %% Line 157
			  <[61|[61|Cs3]]> when 'true' ->
			      let <_cor8> =
				  %% Line 158
				  ( fun (_cor6) ->
					call 'erlang':'=:='
					    (_cor6, 61)
				    -| [{'id',{0,0,'-expand_heading/4-fun-0-'}}] )
			      in  %% Line 158
				  case call 'lists':'splitwith'
					   (_cor8, Cs3) of
				    <{Es,Ts}> when 'true' ->
					%% Line 159
					case <> of
					  <>
					      when try
						    let <_cor10> =
							call 'erlang':'length'
							    (Es)
						    in  call 'erlang':'=:='
							    (_cor10, N)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false' ->
					      let <_cor11> =
						  %% Line 161
						  call 'edoc_lib':'strip_space'
						      (Ts)
					      in  let <_cor12> =
						      %% Line 161
						      call 'lists':'reverse'
							  (_cor11)
						  in  let <Ts1> =
							  %% Line 160
							  call 'edoc_lib':'strip_space'
							      (_cor12)
						      in  %% Line 162
							  apply 'expand_heading_2'/5
							      (Ts1, Cs2, N, L, As)
					  %% Line 163
					  <> when 'true' ->
					      let <_cor14> =
						  %% Line 164
						  call 'erlang':'+'
						      (N, 2)
					      in  let <H1> =
						      %% Line 164
						      call 'lists':'duplicate'
							  (_cor14, 61)
						  in  let <H2> =
							  %% Line 165
							  [61|[61|Es]]
						      in  %% Line 166
							  apply 'throw_error'/2
							      (L, {[104|[101|[97|[100|[105|[110|[103|[32|[101|[110|[100|[32|[109|[97|[114|[107|[101|[114|[32|[109|[105|[115|[109|[97|[116|[99|[104|[58|[32|[126|[115|[46|[46|[46|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 167
																																	       [H1|[H2|[]]]})
					end
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			  %% Line 169
			  <_cor23> when 'true' ->
			      %% Line 170
			      apply 'expand_heading_1'/4
				  (Cs, N, L, As)
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'expand_heading_1'/4 =
    %% Line 173
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 174
	    call 'erlang':'+'
		(_cor2, 2)
	in  let <_cor5> =
		%% Line 174
		call 'lists':'duplicate'
		    (_cor4, 61)
	    in  let <_cor6> =
		    %% Line 174
		    call 'erlang':'++'
			(_cor5, _cor0)
		in  %% Line 174
		    apply 'expand'/3
			(_cor3, _cor1, _cor6)
'expand_heading_2'/5 =
    %% Line 176
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <H> =
	    %% Line 177
	    call 'erlang':'+'
		(3, _cor2)
	in  let <_cor6> =
		%% Line 179
		apply 'make_label'/1
		    (_cor4)
	    in  let <Ts1> =
		    %% Line 178
		    call 'io_lib':'format'
			([60|[104|[126|[119|[62|[60|[97|[32|[110|[97|[109|[101|[61|[34|[126|[116|[115|[34|[62|[126|[116|[115|[60|[47|[97|[62|[60|[47|[104|[126|[119|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 179
																									      [H|[_cor6|[_cor4|[H|[]]]]])
		in  let <_cor10> =
			%% Line 180
			call 'erlang':'+'
			    (_cor1, 1)
		    in  let <_cor8> =
			    %% Line 180
			    call 'lists':'flatten'
				(Ts1)
			in  let <_cor9> =
				%% Line 180
				call 'lists':'reverse'
				    (_cor8, _cor0)
			    in  %% Line 180
				apply 'expand_new_line'/3
				    (_cor3, _cor10, _cor9)
'make_label'/1 =
    %% Line 182
    fun (_cor0) ->
	case _cor0 of
	  <[32|Cs]> when 'true' ->
	      let <_cor1> =
		  %% Line 183
		  call 'edoc_lib':'strip_space'
		      (Cs)
	      in  let <_cor2> =
		      %% Line 183
		      apply 'make_label'/1
			  (_cor1)
		  in  %% Line 183
		      [95|_cor2]
	  %% Line 184
	  <[9|Cs]> when 'true' ->
	      let <_cor3> =
		  %% Line 185
		  call 'edoc_lib':'strip_space'
		      (Cs)
	      in  let <_cor4> =
		      %% Line 185
		      apply 'make_label'/1
			  (_cor3)
		  in  %% Line 185
		      [95|_cor4]
	  %% Line 186
	  <[10|Cs]> when 'true' ->
	      let <_cor5> =
		  %% Line 187
		  call 'edoc_lib':'strip_space'
		      (Cs)
	      in  let <_cor6> =
		      %% Line 187
		      apply 'make_label'/1
			  (_cor5)
		  in  %% Line 187
		      [95|_cor6]
	  %% Line 188
	  <[C|Cs]> when 'true' ->
	      let <_cor7> =
		  %% Line 189
		  apply 'make_label'/1
		      (Cs)
	      in  %% Line 189
		  [C|_cor7]
	  %% Line 190
	  <[]> when 'true' ->
	      %% Line 191
	      []
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'make_label',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_single'/3 =
    %% Line 195
    fun (_cor2,_cor1,_cor0) ->
	%% Line 196
	apply 'expand_single'/4
	    (_cor2, _cor1, _cor0, _cor1)
'expand_single'/4 =
    %% Line 198
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[39|Cs],L,As,_X_L0> when 'true' ->
	      let <_cor4> =
		  %% Line 199
		  call 'edoc_lib':'strip_space'
		      (As)
	      in  let <_cor5> =
		      %% Line 199
		      call 'erlang':'++'
			  ([62|[101|[100|[111|[99|[47|[60]]]]]]], _cor4)
		  in  %% Line 199
		      apply 'expand'/3
			  (Cs, L, _cor5)
	  %% Line 200
	  <[60|Cs],L,As,L0> when 'true' ->
	      let <_cor6> =
		  %% Line 201
		  [59|[116|[108|[38|As]]]]
	      in  %% Line 201
		  apply 'expand_single'/4
		      (Cs, L, _cor6, L0)
	  %% Line 202
	  <[62|Cs],L,As,L0> when 'true' ->
	      let <_cor7> =
		  %% Line 203
		  [59|[116|[103|[38|As]]]]
	      in  %% Line 203
		  apply 'expand_single'/4
		      (Cs, L, _cor7, L0)
	  %% Line 204
	  <[38|Cs],L,As,L0> when 'true' ->
	      let <_cor8> =
		  %% Line 205
		  call 'erlang':'++'
		      ([59|[112|[109|[97|[38]]]]], As)
	      in  %% Line 205
		  apply 'expand_single'/4
		      (Cs, L, _cor8, L0)
	  %% Line 206
	  <[C = 10|Cs],L,As,L0> when 'true' ->
	      let <_cor9> =
		  %% Line 207
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 207
		  apply 'expand_single'/4
		      (Cs, _cor9, [C|As], L0)
	  %% Line 208
	  <[C|Cs],L,As,L0> when 'true' ->
	      %% Line 209
	      apply 'expand_single'/4
		  (Cs, L, [C|As], L0)
	  %% Line 210
	  <[],L,_cor14,L0> when 'true' ->
	      %% Line 211
	      apply 'throw_error'/2
		  (L0, {[96|[45|[113|[117|[111|[116|[101|[32|[101|[110|[100|[101|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[108|[121|[32|[97|[116|[32|[108|[105|[110|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[L|[]]})
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'expand_single',4}}] )
	    -| ['compiler_generated'] )
	end
'expand_double'/3 =
    %% Line 215
    fun (_cor2,_cor1,_cor0) ->
	%% Line 216
	apply 'expand_double'/4
	    (_cor2, _cor1, _cor0, _cor1)
'expand_double'/4 =
    %% Line 218
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[39|[39|Cs]],L,As,_X_L0> when 'true' ->
	      let <_cor4> =
		  %% Line 219
		  call 'edoc_lib':'strip_space'
		      (As)
	      in  let <_cor5> =
		      %% Line 219
		      call 'erlang':'++'
			  ([62|[101|[100|[111|[99|[47|[60]]]]]]], _cor4)
		  in  %% Line 219
		      apply 'expand'/3
			  (Cs, L, _cor5)
	  %% Line 220
	  <[60|Cs],L,As,L0> when 'true' ->
	      let <_cor6> =
		  %% Line 221
		  [59|[116|[108|[38|As]]]]
	      in  %% Line 221
		  apply 'expand_double'/4
		      (Cs, L, _cor6, L0)
	  %% Line 222
	  <[62|Cs],L,As,L0> when 'true' ->
	      let <_cor7> =
		  %% Line 223
		  [59|[116|[103|[38|As]]]]
	      in  %% Line 223
		  apply 'expand_double'/4
		      (Cs, L, _cor7, L0)
	  %% Line 224
	  <[38|Cs],L,As,L0> when 'true' ->
	      let <_cor8> =
		  %% Line 225
		  call 'erlang':'++'
		      ([59|[112|[109|[97|[38]]]]], As)
	      in  %% Line 225
		  apply 'expand_double'/4
		      (Cs, L, _cor8, L0)
	  %% Line 226
	  <[C = 10|Cs],L,As,L0> when 'true' ->
	      let <_cor9> =
		  %% Line 227
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 227
		  apply 'expand_double'/4
		      (Cs, _cor9, [C|As], L0)
	  %% Line 228
	  <[C|Cs],L,As,L0> when 'true' ->
	      %% Line 229
	      apply 'expand_double'/4
		  (Cs, L, [C|As], L0)
	  %% Line 230
	  <[],L,_cor14,L0> when 'true' ->
	      %% Line 231
	      apply 'throw_error'/2
		  (L0, {[96|[96|[45|[113|[117|[111|[116|[101|[32|[101|[110|[100|[101|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[108|[121|[32|[97|[116|[32|[108|[105|[110|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[L|[]]})
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'expand_double',4}}] )
	    -| ['compiler_generated'] )
	end
'expand_triple'/3 =
    %% Line 235
    fun (_cor2,_cor1,_cor0) ->
	%% Line 236
	apply 'expand_triple'/4
	    (_cor2, _cor1, _cor0, _cor1)
'expand_triple'/4 =
    %% Line 238
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[39|[39|[39|Cs]]],L,As,_X_L0> when 'true' ->
	      let <_cor4> =
		  %% Line 239
		  call 'edoc_lib':'strip_space'
		      (As)
	      in  let <_cor5> =
		      %% Line 239
		      call 'erlang':'++'
			  ([62|[101|[114|[112|[47|[60|[62|[93|[93]]]]]]]]], _cor4)
		  in  %% Line 239
		      apply 'expand'/3
			  (Cs, L, _cor5)
	  %% Line 240
	  <[93|[93|[62|Cs]]],L,As,L0> when 'true' ->
	      let <_cor6> =
		  %% Line 241
		  call 'erlang':'++'
		      ([59|[116|[103|[38|[93|[93]]]]]], As)
	      in  %% Line 241
		  apply 'expand_triple'/4
		      (Cs, L, _cor6, L0)
	  %% Line 242
	  <[C = 10|Cs],L,As,L0> when 'true' ->
	      let <_cor7> =
		  %% Line 243
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 243
		  apply 'expand_triple'/4
		      (Cs, _cor7, [C|As], L0)
	  %% Line 244
	  <[C|Cs],L,As,L0> when 'true' ->
	      %% Line 245
	      apply 'expand_triple'/4
		  (Cs, L, [C|As], L0)
	  %% Line 246
	  <[],L,_cor12,L0> when 'true' ->
	      %% Line 247
	      apply 'throw_error'/2
		  (L0, {[96|[96|[96|[45|[113|[117|[111|[116|[101|[32|[101|[110|[100|[101|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[108|[121|[32|[97|[116|[32|[108|[105|[110|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[L|[]]})
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'expand_triple',4}}] )
	    -| ['compiler_generated'] )
	end
'expand_uri'/3 =
    %% Line 251
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[104|[116|[116|[112|[58|[47|Cs]]]]]],L,As> when 'true' ->
	      %% Line 252
	      apply 'expand_uri'/4
		  (Cs, L, [47|[58|[112|[116|[116|[104]]]]]], As)
	  %% Line 253
	  <[104|[116|[116|[112|[115|[58|[47|Cs]]]]]]],L,As> when 'true' ->
	      %% Line 254
	      apply 'expand_uri'/4
		  (Cs, L, [47|[58|[115|[112|[116|[116|[104]]]]]]], As)
	  %% Line 255
	  <[102|[116|[112|[58|[47|Cs]]]]],L,As> when 'true' ->
	      %% Line 256
	      apply 'expand_uri'/4
		  (Cs, L, [47|[58|[112|[116|[102]]]]], As)
	  %% Line 257
	  <[102|[105|[108|[101|[58|[47|Cs]]]]]],L,As> when 'true' ->
	      %% Line 258
	      apply 'expand_uri'/4
		  (Cs, L, [47|[58|[101|[108|[105|[102]]]]]], As)
	  %% Line 259
	  <[109|[97|[105|[108|[116|[111|[58|[47|Cs]]]]]]]],L,As> when 'true' ->
	      %% Line 260
	      apply 'expand_uri'/4
		  (Cs, L, [47|[58|[111|[116|[108|[105|[97|[109]]]]]]]], As)
	  %% Line 261
	  <[110|[102|[115|[58|[47|Cs]]]]],L,As> when 'true' ->
	      %% Line 262
	      apply 'expand_uri'/4
		  (Cs, L, [47|[58|[115|[102|[110]]]]], As)
	  %% Line 263
	  <[115|[104|[116|[116|[112|[58|[47|Cs]]]]]]],L,As> when 'true' ->
	      %% Line 264
	      apply 'expand_uri'/4
		  (Cs, L, [47|[58|[112|[116|[116|[104|[115]]]]]]], As)
	  %% Line 265
	  <[120|[109|[112|[112|[58|[47|Cs]]]]]],L,As> when 'true' ->
	      %% Line 266
	      apply 'expand_uri'/4
		  (Cs, L, [47|[58|[112|[112|[109|[120]]]]]], As)
	  %% Line 267
	  <Cs,L,As> when 'true' ->
	      %% Line 268
	      apply 'expand'/3
		  (Cs, L, [91|As])
	end
'expand_uri'/4 =
    %% Line 270
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[93|Cs],L,Us,As> when 'true' ->
	      let <_cor4> =
		  %% Line 271
		  call 'erlang':'++'
		      (Us, [62|[116|[116|[60]]]])
	      in  let <_cor5> =
		      %% Line 271
		      call 'erlang':'++'
			  ([62|[116|[116|[47|[60]]]]], _cor4)
		  in  let <_cor6> =
			  %% Line 271
			  apply 'push_uri'/3
			      (Us, _cor5, As)
		      in  %% Line 271
			  apply 'expand'/3
			      (Cs, L, _cor6)
	  %% Line 272
	  <[C = 32|Cs],L,Us,As> when 'true' ->
	      %% Line 273
	      apply 'expand_uri'/6
		  (Cs, 0, L, [C|[]], Us, As)
	  %% Line 274
	  <[C = 9|Cs],L,Us,As> when 'true' ->
	      %% Line 275
	      apply 'expand_uri'/6
		  (Cs, 0, L, [C|[]], Us, As)
	  %% Line 276
	  <[C = 10|Cs],L,Us,As> when 'true' ->
	      %% Line 277
	      apply 'expand_uri'/6
		  (Cs, 1, L, [C|[]], Us, As)
	  %% Line 278
	  <[C|Cs],L,Us,As> when 'true' ->
	      %% Line 279
	      apply 'expand_uri'/4
		  (Cs, L, [C|Us], As)
	  %% Line 280
	  <[],L,Us,_X_As> when 'true' ->
	      %% Line 281
	      apply 'expand_uri_error'/2
		  (Us, L)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'expand_uri',4}}] )
	    -| ['compiler_generated'] )
	end
'expand_uri'/6 =
    %% Line 283
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[93|Cs],N,L,Ss,Us,As> when 'true' ->
	      let <_cor6> =
		  %% Line 285
		  call 'edoc_lib':'strip_space'
		      (Ss)
	      in  let <_cor7> =
		      %% Line 285
		      call 'lists':'reverse'
			  (_cor6)
		  in  let <_cor8> =
			  %% Line 284
			  call 'edoc_lib':'strip_space'
			      (_cor7)
		      in  let <Ss1> =
			      %% Line 284
			      call 'lists':'reverse'
				  (_cor8)
			  in  let <_cor11> =
				  %% Line 286
				  call 'erlang':'+'
				      (L, N)
			      in  let <_cor10> =
				      %% Line 286
				      apply 'push_uri'/3
					  (Us, Ss1, As)
				  in  %% Line 286
				      apply 'expand'/3
					  (Cs, _cor11, _cor10)
	  %% Line 287
	  <[C = 10|Cs],N,L,Ss,Us,As> when 'true' ->
	      let <_cor12> =
		  %% Line 288
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 288
		  apply 'expand_uri'/6
		      (Cs, _cor12, L, [C|Ss], Us, As)
	  %% Line 289
	  <[C|Cs],N,L,Ss,Us,As> when 'true' ->
	      %% Line 290
	      apply 'expand_uri'/6
		  (Cs, N, L, [C|Ss], Us, As)
	  %% Line 291
	  <[],_cor19,L,_X_Ss,Us,_X_As> when 'true' ->
	      %% Line 292
	      apply 'expand_uri_error'/2
		  (Us, L)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'expand_uri',6}}] )
	    -| ['compiler_generated'] )
	end
'expand_uri_error'/2 =
    %% Line 296
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 297
	    call 'lists':'reverse'
		(_cor1)
	in  %% Line 297
	    case call 'edoc_lib':'split_at'
		     (_cor2, 58) of
	      <{Ps,_cor6}> when 'true' ->
		  %% Line 298
		  apply 'throw_error'/2
		      (_cor0, {[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[39|[91|[126|[116|[115|[58|[46|[46|[46|[39|[32|[101|[110|[100|[101|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[108|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Ps|[]]})
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'push_uri'/3 =
    %% Line 301
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 302
	    call 'erlang':'++'
		([34|[61|[102|[101|[114|[104|[32|[97|[60]]]]]]]]], _cor0)
	in  let <_cor4> =
		%% Line 302
		call 'erlang':'++'
		    (_cor2, _cor3)
	    in  let <_cor5> =
		    %% Line 302
		    call 'erlang':'++'
			([62|[34|[112|[111|[116|[95|[34|[61|[116|[101|[103|[114|[97|[116|[32|[34]]]]]]]]]]]]]]]], _cor4)
		in  let <_cor6> =
			%% Line 302
			call 'erlang':'++'
			    (_cor1, _cor5)
		    in  %% Line 302
			[62|[97|[47|[60|_cor6]]]]
'strip_empty_lines'/1 =
    %% Line 305
    fun (_cor0) ->
	%% Line 306
	apply 'strip_empty_lines'/2
	    (_cor0, 0)
'strip_empty_lines'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],N> when 'true' ->
	      %% Line 309
	      {[],N}
	  %% Line 310
	  <Cs,N> when 'true' ->
	      %% Line 311
	      case call 'edoc_lib':'split_at'
		       (Cs, 10) of
		<{Cs1,Cs2}> when 'true' ->
		    %% Line 312
		    case call 'edoc_lib':'is_space'
			     (Cs1) of
		      %% Line 313
		      <'true'> when 'true' ->
			  let <_cor3> =
			      %% Line 314
			      call 'erlang':'+'
				  (N, 1)
			  in  %% Line 314
			      apply 'strip_empty_lines'/2
				  (Cs2, _cor3)
		      %% Line 315
		      <'false'> when 'true' ->
			  %% Line 316
			  {Cs,N}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'par'/1 =
    %% Line 323
    fun (_cor0) ->
	%% Line 324
	apply 'par'/3
	    (_cor0, [], [])
'par'/3 =
    %% Line 326
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E = {'xmlText',_cor17,_cor18,_cor19,Value,_cor20}|Es],As,Bs> when 'true' ->
	      %% Line 327
	      apply 'par_text'/5
		  (Value, As, Bs, E, Es)
	  %% Line 328
	  <[E = {'xmlElement',Name,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}|Es],As,Bs> when 'true' ->
	      %% Line 331
	      case Name of
		%% Line 332
		<'p'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 333
		<'hr'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 334
		<'h1'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 335
		<'h2'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 336
		<'h3'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 337
		<'h4'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 338
		<'h5'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 339
		<'h6'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 340
		<'pre'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 341
		<'address'> when 'true' ->
		    apply 'par_flush'/3
			(Es, [E|As], Bs)
		%% Line 342
		<'div'> when 'true' ->
		    let <_cor3> =
			apply 'par_elem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor3|As], Bs)
		%% Line 343
		<'blockquote'> when 'true' ->
		    let <_cor4> =
			apply 'par_elem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor4|As], Bs)
		%% Line 344
		<'form'> when 'true' ->
		    let <_cor5> =
			apply 'par_elem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor5|As], Bs)
		%% Line 345
		<'fieldset'> when 'true' ->
		    let <_cor6> =
			apply 'par_elem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor6|As], Bs)
		%% Line 346
		<'noscript'> when 'true' ->
		    let <_cor7> =
			apply 'par_elem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor7|As], Bs)
		%% Line 347
		<'ul'> when 'true' ->
		    let <_cor8> =
			apply 'par_subelem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor8|As], Bs)
		%% Line 348
		<'ol'> when 'true' ->
		    let <_cor9> =
			apply 'par_subelem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor9|As], Bs)
		%% Line 349
		<'dl'> when 'true' ->
		    let <_cor10> =
			apply 'par_subelem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor10|As], Bs)
		%% Line 350
		<'table'> when 'true' ->
		    let <_cor11> =
			apply 'par_subelem'/1
			    (E)
		    in  apply 'par_flush'/3
			    (Es, [_cor11|As], Bs)
		%% Line 351
		<_cor31> when 'true' ->
		    apply 'par'/3
			(Es, [E|As], Bs)
	      end
	  %% Line 353
	  <[E|Es],As,Bs> when 'true' ->
	      %% Line 354
	      apply 'par'/3
		  (Es, [E|As], Bs)
	  %% Line 355
	  <[],As,Bs> when 'true' ->
	      let <_cor13> =
		  %% Line 356
		  call 'erlang':'++'
		      (As, Bs)
	      in  %% Line 356
		  call 'lists':'reverse'
		      (_cor13)
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'par',3}}] )
	    -| ['compiler_generated'] )
	end
'par_text'/5 =
    %% Line 358
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 359
	case apply 'ptxt'/1
		 (_cor4) of
	  %% Line 360
	  <'none'> when 'true' ->
	      %% Line 362
	      apply 'par'/3
		  (_cor0, [_cor1|_cor3], _cor2)
	  %% Line 363
	  <{Cs1,Ss,Cs2}> when 'true' ->
	      let <_cor9> =
		  %% Line 364
		  case Cs1 of
		    %% Line 365
		    <[]> when 'true' ->
			call 'lists':'reverse'
			    (_cor3)
		    %% Line 366
		    <_cor22> when 'true' ->
			case _cor1 of
			  <{'xmlText',_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
			      let <_cor7> =
				  call 'erlang':'setelement'
				      (5, _cor1, Cs1)
			      in  call 'lists':'reverse'
				      (_cor3, [_cor7|[]])
			  ( <_cor28> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xmlText'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		  end
	      in  let <_cor12> =
		      %% Line 368
		      case _cor9 of
			%% Line 369
			<[]> when 'true' ->
			    _cor2
			%% Line 370
			<_cor29> when 'true' ->
			    [{'xmlElement','p',[],[],{'xmlNamespace',[],[]},[],'undefined',[],_cor9,[],[],'undeclared'}|_cor2]
		      end
		  in  let <Bs1> =
			  %% Line 372
			  [{'xmlText',[],'undefined',[],Ss,'text'}|_cor12]
		      in  %% Line 373
			  case Cs2 of
			    %% Line 374
			    <[]> when 'true' ->
				%% Line 375
				apply 'par'/3
				    (_cor0, [], Bs1)
			    %% Line 376
			    <_cor30> when 'true' ->
				%% Line 377
				apply 'par_text'/5
				    (Cs2, [], Bs1, {'xmlText',[],'undefined',[],Cs2,'text'}, _cor0)
			  end
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'par_flush'/3 =
    %% Line 381
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 382
	    call 'erlang':'++'
		(_cor1, _cor0)
	in  %% Line 382
	    apply 'par'/3
		(_cor2, [], _cor3)
'par_elem'/1 =
    %% Line 384
    fun (_cor0) ->
	%% Line 385
	( case _cor0 of
	    ( <( {'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_rec4,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec2> =
		      apply 'par'/1
			  (_rec4)
		  in  call 'erlang':'setelement'
			  (9, _cor0, _rec2)
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'par_subelem'/1 =
    %% Line 388
    fun (_cor0) ->
	%% Line 389
	( case _cor0 of
	    ( <( {'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_rec7,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec5> =
		      apply 'par_subelem_1'/1
			  (_rec7)
		  in  call 'erlang':'setelement'
			  (9, _cor0, _rec5)
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'par_subelem_1'/1 =
    %% Line 391
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement',Name,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}|Es]> when 'true' ->
	      let <_cor3> =
		  %% Line 392
		  case apply 'par_skip'/1
			   (Name) of
		    %% Line 393
		    <'true'> when 'true' ->
			%% Line 394
			E
		    %% Line 395
		    <'false'> when 'true' ->
			%% Line 396
			case apply 'par_sub'/1
				 (Name) of
			  %% Line 397
			  <'true'> when 'true' ->
			      %% Line 398
			      apply 'par_subelem'/1
				  (E)
			  %% Line 399
			  <'false'> when 'true' ->
			      %% Line 400
			      apply 'par_elem'/1
				  (E)
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor1})
			    -| ['compiler_generated'] )
			end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor5> =
		      %% Line 403
		      apply 'par_subelem_1'/1
			  (Es)
		  in  %% Line 403
		      [_cor3|_cor5]
	  %% Line 404
	  <[E|Es]> when 'true' ->
	      let <_cor6> =
		  %% Line 405
		  apply 'par_subelem_1'/1
		      (Es)
	      in  %% Line 405
		  [E|_cor6]
	  %% Line 406
	  <[]> when 'true' ->
	      %% Line 407
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'par_subelem_1',1}}] )
	    -| ['compiler_generated'] )
	end
'par_skip'/1 =
    %% Line 409
    fun (_cor0) ->
	case _cor0 of
	  <'caption'> when 'true' ->
	      'true'
	  %% Line 410
	  <'col'> when 'true' ->
	      'true'
	  %% Line 411
	  <'colgroup'> when 'true' ->
	      'true'
	  %% Line 412
	  <_cor2> when 'true' ->
	      'false'
	end
'par_sub'/1 =
    %% Line 414
    fun (_cor0) ->
	case _cor0 of
	  <'tr'> when 'true' ->
	      'true'
	  %% Line 415
	  <'thead'> when 'true' ->
	      'true'
	  %% Line 416
	  <'tfoot'> when 'true' ->
	      'true'
	  %% Line 417
	  <'tbody'> when 'true' ->
	      'true'
	  %% Line 418
	  <_cor2> when 'true' ->
	      'false'
	end
'ptxt'/1 =
    %% Line 423
    fun (_cor0) ->
	%% Line 424
	apply 'ptxt'/2
	    (_cor0, [])
'ptxt'/2 =
    %% Line 426
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[10|Cs],As> when 'true' ->
	      %% Line 427
	      apply 'ptxt_1'/3
		  (Cs, As, [10])
	  %% Line 428
	  <[C|Cs],As> when 'true' ->
	      %% Line 429
	      apply 'ptxt'/2
		  (Cs, [C|As])
	  %% Line 430
	  <[],_X_As> when 'true' ->
	      %% Line 431
	      'none'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'ptxt',2}}] )
	    -| ['compiler_generated'] )
	end
'ptxt_1'/3 =
    %% Line 434
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C = 32|Cs],As,Ss> when 'true' ->
	      %% Line 435
	      apply 'ptxt_1'/3
		  (Cs, As, [C|Ss])
	  %% Line 436
	  <[C = 9|Cs],As,Ss> when 'true' ->
	      %% Line 437
	      apply 'ptxt_1'/3
		  (Cs, As, [C|Ss])
	  %% Line 438
	  <[C = 10|Cs],As,Ss> when 'true' ->
	      %% Line 440
	      apply 'ptxt_2'/3
		  (Cs, As, [C|Ss])
	  %% Line 441
	  <Cs,As,Ss> when 'true' ->
	      let <_cor3> =
		  %% Line 443
		  call 'lists':'reverse'
		      (Ss, As)
	      in  %% Line 443
		  apply 'ptxt'/2
		      (Cs, _cor3)
	end
'ptxt_2'/3 =
    %% Line 446
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C = 32|Cs],As,Ss> when 'true' ->
	      %% Line 447
	      apply 'ptxt_2'/3
		  (Cs, As, [C|Ss])
	  %% Line 448
	  <[C = 9|Cs],As,Ss> when 'true' ->
	      %% Line 449
	      apply 'ptxt_2'/3
		  (Cs, As, [C|Ss])
	  %% Line 450
	  <[C = 10|Cs],As,Ss> when 'true' ->
	      %% Line 451
	      apply 'ptxt_2'/3
		  (Cs, As, [C|Ss])
	  %% Line 452
	  <Cs,As,Ss> when 'true' ->
	      %% Line 454
	      case call 'edoc_lib':'is_space'
		       (As) of
		%% Line 455
		<'true'> when 'true' ->
		    let <_cor3> =
			%% Line 456
			call 'erlang':'++'
			    (Ss, As)
		    in  let <_cor4> =
			    %% Line 456
			    call 'lists':'reverse'
				(_cor3)
			in  %% Line 456
			    {[],_cor4,Cs}
		%% Line 457
		<'false'> when 'true' ->
		    let <_cor6> =
			%% Line 458
			call 'lists':'reverse'
			    (As)
		    in  let <_cor5> =
			    %% Line 458
			    call 'lists':'reverse'
				(Ss)
			in  %% Line 458
			    {_cor6,_cor5,Cs}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'throw_error'/2 =
    %% Line 464
    fun (_cor1,_cor0) ->
	%% Line 465
	call 'erlang':'throw'
	    ({'error',_cor1,_cor0})
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc_wiki')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc_wiki', _cor0)
end