module 'edoc_layout' ['module'/2,
		      'module_info'/0,
		      'module_info'/1,
		      'overview'/2,
		      'package'/2,
		      'type'/1]
    attributes []
'module'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 91
	    apply 'init_opts'/2
		(_cor1, _cor0)
	in  let <XML> =
		%% Line 91
		apply 'layout_module'/2
		    (_cor1, _cor2)
	    in  let <Export> =
		    %% Line 92
		    call 'proplists':'get_value'
			('xml_export', _cor0, %% Line 93
					      'xmerl_html')
		in  %% Line 94
		    call 'xmerl':'export_simple'
			(XML, Export, [])
'init_opts'/2 =
    %% Line 109
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 110
	    apply 'get_attrval'/2
		('root', _cor1)
	in  let <_cor4> =
		%% Line 111
		call 'proplists':'get_value'
		    ('index_columns', _cor0, %% Line 112
					     1)
	    in  let <_cor3> =
		    %% Line 113
		    call 'proplists':'get_value'
			('sort_functions', _cor0, %% Line 114
						  'true')
		in  let <_cor2> =
			%% Line 115
			call 'proplists':'get_value'
			    ('pretty_printer', _cor0, %% Line 116
						      '')
		    in  let <R> =
			    %% Line 110
			    {'opts',_cor5,'undefined',_cor4,_cor3,_cor2}
			in  %% Line 118
			    case call 'proplists':'get_value'
				     ('stylesheet', _cor0) of
			      %% Line 119
			      <'undefined'> when 'true' ->
				  %% Line 120
				  ( case R of
				      ( <( {'opts',_rec0,_cor17,_cor18,_cor19,_cor20}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <S> =
						call 'edoc_lib':'join_uri'
						    (_rec0, [115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[46|[99|[115|[115]]]]]]]]]]]]]])
					    in  %% Line 121
						call 'erlang':'setelement'
						    (3, R, S)
					-| ['compiler_generated'] )
				      ( <_cor21> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','opts'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 122
			      <[]> when 'true' ->
				  %% Line 123
				  R
			      %% Line 124
			      <S>
				  when call 'erlang':'is_list'
					(S) ->
				  %% Line 125
				  case R of
				    <{'opts',_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
					call 'erlang':'setelement'
					    (3, R, S)
				    ( <_cor33> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','opts'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 126
			      <_cor34> when 'true' ->
				  do  %% Line 127
				      call 'edoc_report':'report'
					  ([98|[97|[100|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[111|[112|[116|[105|[111|[110|[32|[96|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
				      %% Line 128
				      call 'erlang':'exit'
					  ('error')
			    end
'layout_module'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement','module',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,Es,_cor85,_cor86,_cor87},Opts> when 'true' ->
	      let <_cor2> =
		  %% Line 172
		  apply 'get_content'/2
		      ('args', Es)
	      in  let <Args> =
		      %% Line 172
		      apply 'module_params'/1
			  (_cor2)
		  in  let <Name> =
			  %% Line 173
			  apply 'get_attrval'/2
			      ('name', E)
		      in  let <_cor6> =
			      %% Line 174
			      case apply 'get_elem'/2
				       ('args', Es) of
				%% Line 175
				<[]> when 'true' ->
				    [[77|[111|[100|[117|[108|[101|[32]]]]]]]|[Name|[]]]
				%% Line 176
				<_cor88> when 'true' ->
				    [[65|[98|[115|[116|[114|[97|[99|[116|[32|[109|[111|[100|[117|[108|[101|[32]]]]]]]]]]]]]]]]|[Name|[[32|[91]]|[{Args}|[[93]]]]]]
			      end
			  in  let <Desc> =
				  %% Line 178
				  apply 'get_content'/2
				      ('description', Es)
			      in  let <ShortDesc> =
				      %% Line 179
				      apply 'get_content'/2
					  ('briefDescription', Desc)
				  in  let <FullDesc> =
					  %% Line 180
					  apply 'get_content'/2
					      ('fullDescription', Desc)
				      in  let <_cor17> =
					      %% Line 181
					      ( letrec
						    'lc$^0'/1 =
							fun (_cor14) ->
							    case _cor14 of
							      <[E|_cor12]> when 'true' ->
								  let <_cor15> =
								      apply 'function_name'/1
									  (E)
								  in  let <_cor16> =
									  apply 'lc$^0'/1
									      (_cor12)
								      in  ( [{_cor15,E}|_cor16]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor14> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor14})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  let <_cor13> =
							apply 'get_content'/2
							    ('functions', Es)
						    in  apply 'lc$^0'/1
							    (_cor13)
						-| ['list_comprehension'] )
					  in  let <_cor25> =
						  %% Line 182
						  ( letrec
							'lc$^1'/1 =
							    fun (_cor22) ->
								case _cor22 of
								  <[E|_cor20]> when 'true' ->
								      let <_cor23> =
									  apply 'type_name'/1
									      (E)
								      in  let <_cor24> =
									      apply 'lc$^1'/1
										  (_cor20)
									  in  ( [{_cor23,E}|_cor24]
										-| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_cor22> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor22})
									  -| [{'function_name',{'lc$^1',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  let <_cor21> =
							    apply 'get_content'/2
								('typedecls', Es)
							in  apply 'lc$^1'/1
								(_cor21)
						    -| ['list_comprehension'] )
					      in  let <SortedFs> =
						      %% Line 183
						      call 'lists':'sort'
							  (_cor17)
						  in  let <_cor73> =
							  %% Line 184
							  apply 'navigation'/1
							      ([116|[111|[112]]])
						      in  let <_cor70> =
							      %% Line 186
							      apply 'doc_index'/3
								  (FullDesc, _cor17, _cor25)
							  in  let <_cor66> =
								  %% Line 189
								  apply 'copyright'/1
								      (Es)
							      in  let <_cor64> =
								      %% Line 190
								      apply 'deprecated'/2
									  (Es, [109|[111|[100|[117|[108|[101]]]]]])
								  in  let <_cor61> =
									  %% Line 192
									  apply 'version'/1
									      (Es)
								      in  let <_cor59> =
									      %% Line 193
									      apply 'since'/1
										  (Es)
									  in  let <_cor57> =
										  %% Line 194
										  apply 'behaviours'/2
										      (Es, Name)
									      in  let <_cor55> =
										      %% Line 195
										      apply 'authors'/1
											  (Es)
										  in  let <_cor53> =
											  %% Line 196
											  apply 'references'/1
											      (Es)
										      in  let <_cor51> =
											      %% Line 197
											      apply 'sees'/1
												  (Es)
											  in  let <_cor49> =
												  %% Line 198
												  apply 'todos'/1
												      (Es)
											      in  let <_cor47> =
												      %% Line 199
												      case <> of
													<>
													    when call 'erlang':'=:='
														  (FullDesc,
														   []) ->
													    []
													%% Line 200
													<> when 'true' ->
													    [[10]|%% Line 201
														  [{'h2',[{'a',[{'name',[100|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110]]]]]]]]]]]}],[[68|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110]]]]]]]]]]]]}]}|%% Line 203
																																		FullDesc]]
												      end
												  in  let <_cor44> =
													  %% Line 205
													  call 'lists':'sort'
													      (_cor25)
												      in  let <_cor45> =
													      %% Line 205
													      apply 'types'/2
														  (_cor44, Opts)
													  in  %% Line 206
													      ( case Opts of
														  ( <( {'opts',_cor89,_cor90,_rec3,_cor91,_cor92}
														       -| ['compiler_generated'] )> when 'true' ->
															let <_cor42> =
															    apply 'function_index'/2
																(SortedFs, _rec3)
															in  let <_cor38> =
																%% Line 207
																case <> of
																  <>
																      when ( call 'erlang':'=:='
																	      (_cor91,
																	       'true')
																	  -| ['compiler_generated'] ) ->
																      apply 'functions'/2
																	  (SortedFs, Opts)
																  %% Line 208
																  <> when 'true' ->
																      apply 'functions'/2
																	  (_cor17, Opts)
																end
															    in  let <_cor29> =
																    %% Line 211
																    apply 'navigation'/1
																	([98|[111|[116|[116|[111|[109]]]]]])
																in  let <_cor28> =
																	%% Line 212
																	apply 'timestamp'/0
																	    ()
																    in  let <_cor30> =
																	    %% Line 212
																	    call 'erlang':'++'
																		(_cor29, _cor28)
																	in  let <_cor31> =
																		%% Line 211
																		['hr'|[[10]|_cor30]]
																	    in  let <_cor39> =
																		    %% Line 210
																		    call 'erlang':'++'
																			(_cor38, _cor31)
																		in  let <_cor43> =
																			%% Line 207
																			call 'erlang':'++'
																			    (_cor42, _cor39)
																		    in  let <_cor46> =
																			    call 'erlang':'++'
																				(_cor45, _cor43)
																			in  let <_cor48> =
																				call 'erlang':'++'
																				    (_cor47, _cor46)
																			    in  let <_cor50> =
																				    call 'erlang':'++'
																					(_cor49, _cor48)
																				in  let <_cor52> =
																					call 'erlang':'++'
																					    (_cor51, _cor50)
																				    in  let <_cor54> =
																					    call 'erlang':'++'
																						(_cor53, _cor52)
																					in  let <_cor56> =
																						call 'erlang':'++'
																						    (_cor55, _cor54)
																					    in  let <_cor58> =
																						    call 'erlang':'++'
																							(_cor57, _cor56)
																						in  let <_cor60> =
																							call 'erlang':'++'
																							    (_cor59, _cor58)
																						    in  let <_cor62> =
																							    call 'erlang':'++'
																								(_cor61, _cor60)
																							in  let <_cor63> =
																								[[10]|_cor62]
																							    in  let <_cor65> =
																								    call 'erlang':'++'
																									(_cor64, _cor63)
																								in  let <_cor67> =
																									call 'erlang':'++'
																									    (_cor66, _cor65)
																								    in  let <_cor68> =
																									    [[10]|_cor67]
																									in  let <_cor69> =
																										call 'erlang':'++'
																										    (ShortDesc, _cor68)
																									    in  let <_cor71> =
																										    call 'erlang':'++'
																											(_cor70, _cor69)
																										in  let <_cor72> =
																											[[10]|['hr'|[[10]|[[10]|[{'h1',_cor6}|[[10]|_cor71]]]]]]
																										    in  let <Body> =
																											    call 'erlang':'++'
																												(_cor73, _cor72)
																											in  let <Encoding> =
																												%% Line 213
																												apply 'get_attrval'/2
																												    ('encoding', E)
																											    in  let <_cor76> =
																												    %% Line 214
																												    apply 'stylesheet'/1
																													(Opts)
																												in  %% Line 214
																												    apply 'xhtml'/4
																													(_cor6, _cor76, Body, Encoding)
														    -| ['compiler_generated'] )
														  ( <_cor93> when 'true' ->
															( call ( 'erlang'
																 -| ['compiler_generated'] ):( 'error'
																			       -| ['compiler_generated'] )
															      (( {'badrecord','opts'}
																 -| ['compiler_generated'] ))
															  -| ['compiler_generated'] )
														    -| ['compiler_generated'] )
														end
														-| ['compiler_generated'] )
	  ( <_cor78,_cor77> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor78,_cor77})
		  -| [{'function_name',{'layout_module',2}}] )
	    -| ['compiler_generated'] )
	end
'module_params'/1 =
    %% Line 216
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 217
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 219
			      {'xmlElement',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,Es1,_cor25,_cor26,_cor27}|_cor2]> when 'true' ->
				let <_cor6> =
				    apply 'get_text'/2
					('argName', Es1)
				in  let <_cor4> =
					%% Line 218
					apply 'get_content'/2
					    ('description', Es1)
				    in  let <_cor5> =
					    %% Line 218
					    apply 'get_content'/2
						('fullDescription', _cor4)
					in  let <_cor7> =
						%% Line 219
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [{_cor6,_cor5}|_cor7]
						  -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 219
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 220
	    case _cor8 of
	      %% Line 221
	      <[]> when 'true' ->
		  []
	      %% Line 222
	      <[First|Rest]> when 'true' ->
		  let <_cor10> =
		      %% Line 223
		      call 'erlang':'element'
			  (1, First)
		  in  let <_cor15> =
			  %% Line 223
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor13) ->
					case _cor13 of
					  <[{A,_X_D}|_cor12]> when 'true' ->
					      let <_cor14> =
						  apply 'lc$^1'/1
						      (_cor12)
					      in  ( [{[[44|[32]]|[A|[]]]}|_cor14]
						    -| ['compiler_generated'] )
					  ( <[_cor11|_cor12]> when 'true' ->
						apply 'lc$^1'/1
						    (_cor12)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor13> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor13})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^1'/1
				    (Rest)
			    -| ['list_comprehension'] )
		      in  %% Line 223
			  [_cor10|_cor15]
	      ( <_cor16> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor16})
		-| ['compiler_generated'] )
	    end
'timestamp'/0 =
    %% Line 226
    fun () ->
	let <_cor0> =
	    %% Line 228
	    call 'erlang':'date'
		()
	in  let <_cor1> =
		%% Line 228
		call 'edoc_lib':'datestr'
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 229
		    call 'erlang':'time'
			()
		in  let <_cor3> =
			%% Line 229
			call 'edoc_lib':'timestr'
			    (_cor2)
		    in  let <_cor4> =
			    %% Line 227
			    call 'io_lib':'fwrite'
				([71|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[69|[68|[111|[99|[44|[32|[126|[115|[44|[32|[126|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 228
																						 [_cor1|%% Line 229
																							[_cor3|[]]])
			in  %% Line 227
			    [[10]|[{'p',[{'i',[_cor4|%% Line 230
						     []]}|%% Line 230
							  []]}|%% Line 231
							       [[10]]]]
'stylesheet'/1 =
    %% Line 233
    fun (_cor0) ->
	%% Line 234
	( case _cor0 of
	    ( <( {'opts',_cor5,_rec4,_cor6,_cor7,_cor8}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec4 of
		    %% Line 235
		    <'undefined'> when 'true' ->
			%% Line 236
			[]
		    %% Line 237
		    <CSS> when 'true' ->
			%% Line 238
			[{'link',[{'rel',[115|[116|[121|[108|[101|[115|[104|[101|[101|[116]]]]]]]]]]}|%% Line 239
												      [{'type',[116|[101|[120|[116|[47|[99|[115|[115]]]]]]]]}|%% Line 240
																			      [{'href',CSS}|%% Line 241
																					    [{'title',[69|[68|[111|[99]]]]}]]]],%% Line 241
																										[]}|%% Line 242
																										    [[10]]]
		  end
	      -| ['compiler_generated'] )
	    ( <_cor9> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'navigation'/1 =
    %% Line 245
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 248
	    call 'erlang':'++'
		([35|[110|[97|[118|[98|[97|[114|[95]]]]]]]], _cor0)
	in  %% Line 246
	    [[10]|%% Line 247
		  [{'div',[{'class',[110|[97|[118|[98|[97|[114]]]]]]}],%% Line 248
								       [{'a',[{'name',_cor1}|[]],[]}|%% Line 249
												     [{'table',[{'width',[49|[48|[48|[37]]]]}|[{'border',0}|[{'cellspacing',0}|[{'cellpadding',2}|[{'summary',[110|[97|[118|[105|[103|[97|[116|[105|[111|[110|[32|[98|[97|[114]]]]]]]]]]]]]]}]]]]],[{'tr',[{'td',[{'a',[{'href',[111|[118|[101|[114|[118|[105|[101|[119|[45|[115|[117|[109|[109|[97|[114|[121|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]]}|[{'target',[111|[118|[101|[114|[118|[105|[101|[119|[70|[114|[97|[109|[101]]]]]]]]]]]]]}]],[[79|[118|[101|[114|[118|[105|[101|[119]]]]]]]]]}]}|[{'td',[{'a',[{'href',[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[101|[114|[108|[97|[110|[103|[46|[111|[114|[103|[47]]]]]]]]]]]]]]]]]]]]]]}],[{'img',[{'src',[101|[114|[108|[97|[110|[103|[46|[112|[110|[103]]]]]]]]]]}|[{'align',[114|[105|[103|[104|[116]]]]]}|[{'border',0}|[{'alt',[101|[114|[108|[97|[110|[103|[32|[108|[111|[103|[111]]]]]]]]]]]}]]]],[]}]}]}]]}]}]]}|%% Line 263
																																																																																																																							      []]]
'doc_index'/3 =
    %% Line 265
    fun (_cor2,_cor1,_cor0) ->
	%% Line 266
	case apply 'doc_index_rows'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 267
	  <[]> when 'true' ->
	      []
	  %% Line 268
	  <Rs> when 'true' ->
	      let <_cor8> =
		  %% Line 270
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[%% Line 271
				    {T,R}|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'local_label'/1
					      (R)
				      in  let <_cor7> =
					      %% Line 271
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [{'li',[{'a',[{'href',_cor6}|[]],[T|[]]}|[]]}|_cor7]
						-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					%% Line 271
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 271
			     Rs)
		    -| ['list_comprehension'] )
	      in  %% Line 269
		  [{'ul',[{'class',[105|[110|[100|[101|[120]]]]]}],_cor8}|%% Line 271
									  []]
	end
'doc_index_rows'/3 =
    %% Line 274
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 275
	    case <> of
	      <>
		  when call 'erlang':'=:='
			(_cor2,
			 []) ->
		  []
	      %% Line 276
	      <> when 'true' ->
		  [{[68|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110]]]]]]]]]]],[100|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110]]]]]]]]]]]}]
	    end
	in  let <_cor4> =
		%% Line 278
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (_cor0,
			     []) ->
		      []
		  %% Line 279
		  <> when 'true' ->
		      [{[68|[97|[116|[97|[32|[84|[121|[112|[101|[115]]]]]]]]]],[116|[121|[112|[101|[115]]]]]}]
		end
	    in  let <_cor3> =
		    %% Line 281
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(_cor1,
				 []) ->
			  []
		      %% Line 282
		      <> when 'true' ->
			  [{[70|[117|[110|[99|[116|[105|[111|[110|[32|[73|[110|[100|[101|[120]]]]]]]]]]]]]],[105|[110|[100|[101|[120]]]]]}|[{[70|[117|[110|[99|[116|[105|[111|[110|[32|[68|[101|[116|[97|[105|[108|[115]]]]]]]]]]]]]]]],[102|[117|[110|[99|[116|[105|[111|[110|[115]]]]]]]]]}]]
		    end
		in  let <_cor5> =
			%% Line 281
			call 'erlang':'++'
			    (_cor4, _cor3)
		    in  %% Line 278
			call 'erlang':'++'
			    (_cor6, _cor5)
'function_index'/2 =
    %% Line 286
    fun (_cor1,_cor0) ->
	%% Line 287
	case apply 'function_index_rows'/3
		 (_cor1, _cor0, []) of
	  %% Line 288
	  <[]> when 'true' ->
	      []
	  %% Line 289
	  <Rows> when 'true' ->
	      %% Line 290
	      [[10]|%% Line 291
		    [{'h2',[{'a',[{'name',[105|[110|[100|[101|[120]]]]]}],[[70|[117|[110|[99|[116|[105|[111|[110|[32|[73|[110|[100|[101|[120]]]]]]]]]]]]]]]}]}|%% Line 293
																			       [[10]|%% Line 294
																				     [{'table',[{'width',[49|[48|[48|[37]]]]}|[{'border',1}|[{'cellspacing',0}|[{'cellpadding',2}|[{'summary',[102|[117|[110|[99|[116|[105|[111|[110|[32|[105|[110|[100|[101|[120]]]]]]]]]]]]]]}]]]]],%% Line 297
																																												      Rows}|%% Line 298
																																													    [[10]]]]]]
	end
'function_index_rows'/3 =
    %% Line 301
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 302
	    call 'erlang':'length'
		(_cor2)
	in  let <_cor3> =
		%% Line 302
		call 'erlang':'-'
		    (_cor1, 1)
	    in  let <_cor5> =
		    %% Line 302
		    call 'erlang':'+'
			(_cor4, _cor3)
		in  let <Rows> =
			%% Line 302
			call 'erlang':'div'
			    (_cor5, _cor1)
		    in  let <_cor11> =
			    %% Line 303
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(_cor0,
					 []) ->
				  []
			      %% Line 304
			      <> when 'true' ->
				  let <_cor10> =
				      call 'erlang':'*'
					  (_cor1, 2)
				  in  [{'tr',[{'th',[{'colspan',_cor10}|[{'align','left'}]],%% Line 305
											    [_cor0|[]]}|%% Line 305
													[]]}|%% Line 306
													     [[10]]]
			    end
			in  let <_cor7> =
				%% Line 309
				call 'edoc_lib':'segment'
				    (_cor2, Rows)
			    in  let <_cor8> =
				    %% Line 309
				    call 'edoc_lib':'transpose'
					(_cor7)
				in  let <_cor9> =
					%% Line 308
					call 'lists':'flatmap'
					    (( 'index_row'/1
					       -| [{'id',{0,0,'-function_index_rows/3-fun-0-'}}] ), _cor8)
				    in  %% Line 308
					call 'erlang':'++'
					    (_cor11, _cor9)
'index_row'/1 =
    %% Line 311
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 312
	    call 'lists':'flatmap'
		(( 'index_col'/1
		   -| [{'id',{0,0,'-index_row/1-fun-0-'}}] ), _cor0)
	in  %% Line 312
	    [{'tr',_cor1}|[[10]]]
'index_col'/1 =
    %% Line 314
    fun (_cor0) ->
	case _cor0 of
	  <{Name,F = {'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Es,_cor12,_cor13,_cor14}}> when 'true' ->
	      let <_cor1> =
		  %% Line 316
		  apply 'function_header'/3
		      (Name, F, [42])
	      in  let <_cor2> =
		      %% Line 316
		      apply 'label_href'/2
			  (_cor1, F)
		  in  let <_cor3> =
			  %% Line 317
			  apply 'index_desc'/1
			      (Es)
		      in  %% Line 315
			  [{'td',[{'valign',[116|[111|[112]]]}],_cor2}|%% Line 317
								       [{'td',_cor3}|[]]]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'index_col',1}}] )
	    -| ['compiler_generated'] )
	end
'index_desc'/1 =
    %% Line 319
    fun (_cor0) ->
	let <Desc> =
	    %% Line 320
	    apply 'get_content'/2
		('description', _cor0)
	in  let <_cor5> =
		%% Line 321
		case apply 'get_content'/2
			 ('deprecated', _cor0) of
		  %% Line 322
		  <[]> when 'true' ->
		      []
		  %% Line 323
		  <_cor7> when 'true' ->
		      [[40]|[{'em',[[68|[101|[112|[114|[101|[99|[97|[116|[101|[100]]]]]]]]]]]}|[[46|[41|[32]]]]]]
		end
	    in  let <_cor3> =
		    %% Line 325
		    case apply 'get_content'/2
			     ('briefDescription', Desc) of
		      %% Line 326
		      <[]> when 'true' ->
			  %% Line 327
			  apply 'equiv'/1
			      (_cor0)
		      %% Line 328
		      <ShortDesc> when 'true' ->
			  %% Line 329
			  ShortDesc
		    end
		in  %% Line 325
		    call 'erlang':'++'
			(_cor5, _cor3)
'label_href'/2 =
    %% Line 332
    fun (_cor1,_cor0) ->
	%% Line 333
	case apply 'get_attrval'/2
		 ('label', _cor0) of
	  %% Line 334
	  <[]> when 'true' ->
	      _cor1
	  %% Line 335
	  <Ref> when 'true' ->
	      let <_cor2> =
		  apply 'local_label'/1
		      (Ref)
	      in  [{'a',[{'href',_cor2}|[]],_cor1}|[]]
	end
'functions'/2 =
    %% Line 349
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 350
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{Name,E}> when 'true' ->
			apply 'function'/3
			    (Name, E, _cor0)
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-functions/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-functions/2-fun-0-'}}] )
	in  let <Es> =
		%% Line 350
		call 'lists':'flatmap'
		    (_cor4, _cor1)
	    in  %% Line 351
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (Es,
			     []) ->
		      []
		  %% Line 352
		  <> when 'true' ->
		      %% Line 353
		      [[10]|%% Line 354
			    [{'h2',[{'a',[{'name',[102|[117|[110|[99|[116|[105|[111|[110|[115]]]]]]]]]}],[[70|[117|[110|[99|[116|[105|[111|[110|[32|[68|[101|[116|[97|[105|[108|[115]]]]]]]]]]]]]]]]]}]}|%% Line 355
																									 [[10]|Es]]]
		end
'function'/3 =
    %% Line 358
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,E = {'xmlElement',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,Es,_cor42,_cor43,_cor44},Opts> when 'true' ->
	      let <_cor30> =
		  %% Line 361
		  apply 'function_header'/3
		      (Name, E, [32|[42]])
	      in  let <_cor31> =
		      %% Line 361
		      apply 'label_anchor'/2
			  (_cor30, E)
		  in  let <_cor23> =
			  %% Line 366
			  apply 'get_content'/2
			      ('typespec', Es)
		      in  let <_cor27> =
			      %% Line 366
			      case apply 'typespec'/2
				       (_cor23, Opts) of
				%% Line 367
				<[]> when 'true' ->
				    let <_cor25> =
					%% Line 368
					apply 'get_content'/2
					    ('args', Es)
				    in  let <_cor24> =
					    %% Line 369
					    apply 'get_attrval'/2
						('name', E)
					in  %% Line 368
					    apply 'signature'/2
						(_cor25, _cor24)
				%% Line 370
				<Spec> when 'true' ->
				    Spec
			      end
			  in  let <_cor19> =
				  %% Line 373
				  apply 'get_content'/2
				      ('args', Es)
			      in  let <_cor21> =
				      %% Line 373
				      case apply 'params'/1
					       (_cor19) of
					%% Line 374
					<[]> when 'true' ->
					    []
					%% Line 375
					<Ps> when 'true' ->
					    [{'p',Ps}|[[10]]]
				      end
				  in  let <_cor16> =
					  %% Line 377
					  apply 'get_content'/2
					      ('returns', Es)
				      in  let <_cor18> =
					      %% Line 377
					      case apply 'returns'/1
						       (_cor16) of
						%% Line 378
						<[]> when 'true' ->
						    []
						%% Line 379
						<Rs> when 'true' ->
						    [{'p',Rs}|[[10]]]
					      end
					  in  let <_cor22> =
						  %% Line 377
						  call 'erlang':'++'
						      (_cor21, _cor18)
					      in  let <_cor28> =
						      %% Line 364
						      [[10]|%% Line 365
							    [{'p',_cor27}|%% Line 373
									  [[10]|_cor22]]]
						  in  let <_cor14> =
							  %% Line 381
							  apply 'throws'/2
							      (Es, Opts)
						      in  let <_cor12> =
							      %% Line 382
							      apply 'equiv_p'/1
								  (Es)
							  in  let <_cor10> =
								  %% Line 383
								  apply 'deprecated'/2
								      (Es, [102|[117|[110|[99|[116|[105|[111|[110]]]]]]]])
							      in  let <_cor8> =
								      %% Line 384
								      apply 'fulldesc'/1
									  (Es)
								  in  let <_cor6> =
									  %% Line 385
									  apply 'since'/1
									      (Es)
								      in  let <_cor4> =
									      %% Line 386
									      apply 'sees'/1
										  (Es)
									  in  let <_cor3> =
										  %% Line 387
										  apply 'todos'/1
										      (Es)
									      in  let <_cor5> =
										      %% Line 387
										      call 'erlang':'++'
											  (_cor4, _cor3)
										  in  let <_cor7> =
											  %% Line 386
											  call 'erlang':'++'
											      (_cor6, _cor5)
										      in  let <_cor9> =
											      %% Line 385
											      call 'erlang':'++'
												  (_cor8, _cor7)
											  in  let <_cor11> =
												  %% Line 384
												  call 'erlang':'++'
												      (_cor10, _cor9)
											      in  let <_cor13> =
												      %% Line 383
												      call 'erlang':'++'
													  (_cor12, _cor11)
												  in  let <_cor15> =
													  %% Line 382
													  call 'erlang':'++'
													      (_cor14, _cor13)
												      in  let <_cor29> =
													      %% Line 363
													      [{'div',[{'class',[115|[112|[101|[99]]]]}],_cor28}|_cor15]
													  in  %% Line 359
													      [[10]|%% Line 360
														    [{'h3',[{'class',[102|[117|[110|[99|[116|[105|[111|[110]]]]]]]]}],_cor31}|%% Line 363
																							      [[10]|_cor29]]]
	  ( <_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32})
		  -| [{'function_name',{'function',3}}] )
	    -| ['compiler_generated'] )
	end
'function_name'/1 =
    %% Line 389
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 390
	    apply 'get_attrval'/2
		('name', _cor0)
	in  let <_cor4> =
		%% Line 390
		apply 'atom'/1
		    (_cor3)
	    in  let <_cor1> =
		    %% Line 390
		    apply 'get_attrval'/2
			('arity', _cor0)
		in  let <_cor2> =
			%% Line 390
			[47|_cor1]
		    in  %% Line 390
			call 'erlang':'++'
			    (_cor4, _cor2)
'function_header'/3 =
    %% Line 392
    fun (_cor2,_cor1,_cor0) ->
	%% Line 393
	case apply 'is_exported'/1
		 (_cor1) of
	  %% Line 394
	  <'true'> when 'true' ->
	      [_cor2|[]]
	  %% Line 395
	  <'false'> when 'true' ->
	      [_cor2|[_cor0|[]]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'is_exported'/1 =
    %% Line 398
    fun (_cor0) ->
	%% Line 399
	case apply 'get_attrval'/2
		 ('exported', _cor0) of
	  %% Line 400
	  <[121|[101|[115]]]> when 'true' ->
	      'true'
	  %% Line 401
	  <_cor3> when 'true' ->
	      'false'
	end
'label_anchor'/2 =
    %% Line 404
    fun (_cor1,_cor0) ->
	%% Line 405
	case apply 'get_attrval'/2
		 ('label', _cor0) of
	  %% Line 406
	  <[]> when 'true' ->
	      _cor1
	  %% Line 407
	  <Ref> when 'true' ->
	      [{'a',[{'name',Ref}|[]],_cor1}|[]]
	end
'signature'/2 =
    %% Line 416
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 417
	    apply 'seq'/2
		(( 'arg'/1
		   -| [{'id',{0,0,'-signature/2-fun-0-'}}] ), _cor1)
	in  let <_cor3> =
		%% Line 417
		call 'erlang':'++'
		    (_cor2, [[41|[32|[45|[62|[32|[97|[110|[121|[40|[41]]]]]]]]]]])
	    in  let <_cor4> =
		    %% Line 417
		    [_cor0|[[40]|_cor3]]
		in  %% Line 417
		    [{'tt',_cor4}|[]]
'arg'/1 =
    %% Line 419
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,Es,_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor1> =
		  %% Line 420
		  apply 'get_text'/2
		      ('argName', Es)
	      in  %% Line 420
		  [_cor1|[]]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'arg',1}}] )
	    -| ['compiler_generated'] )
	end
'params'/1 =
    %% Line 424
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 425
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 427
			      {'xmlElement',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,Es1,_cor31,_cor32,_cor33}|_cor2]> when 'true' ->
				let <_cor6> =
				    apply 'get_text'/2
					('argName', Es1)
				in  let <_cor4> =
					%% Line 426
					apply 'get_content'/2
					    ('description', Es1)
				    in  let <_cor5> =
					    %% Line 426
					    apply 'get_content'/2
						('fullDescription', _cor4)
					in  let <_cor7> =
						%% Line 427
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [{_cor6,_cor5}|_cor7]
						  -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 427
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor15> =
		%% Line 428
		( letrec
		      'lc$^1'/1 =
			  fun (_cor13) ->
			      case _cor13 of
				<[A|_cor11]>
				    when try
					  let <_cor12> =
					      call 'erlang':'element'
						  (2, A)
					  in  call 'erlang':'=/='
						  (_cor12, [])
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    let <_cor14> =
					apply 'lc$^1'/1
					    (_cor11)
				    in  ( [A|_cor14]
					  -| ['compiler_generated'] )
				( <[A|_cor11]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor11)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor13> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor13})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor8)
		  -| ['list_comprehension'] )
	    in  %% Line 429
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (_cor15,
			     []) ->
		      %% Line 430
		      []
		  %% Line 431
		  <> when 'true' ->
		      %% Line 432
		      ( letrec
			    'lc$^2'/1 =
				fun (_cor19) ->
				    case _cor19 of
				      <[%% Line 433
					{A,D}|_cor18]> when 'true' ->
					  let <_cor20> =
					      call 'erlang':'++'
						  (D, ['br'|[[10]]])
					  in  let <_cor21> =
						  [{'tt',[A|[]]}|[[58|[32]]|_cor20]]
					      in  let <_cor22> =
						      %% Line 433
						      apply 'lc$^2'/1
							  (_cor18)
						  in  ( [{_cor21}|_cor22]
							-| ['compiler_generated'] )
				      ( <[_cor17|_cor18]> when 'true' ->
					    %% Line 433
					    apply 'lc$^2'/1
						(_cor18)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor19> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor19})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^2'/1
				(_cor15)
			-| ['list_comprehension'] )
		end
'returns'/1 =
    %% Line 436
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 437
	    apply 'get_content'/2
		('description', _cor0)
	in  %% Line 437
	    case apply 'get_content'/2
		     ('fullDescription', _cor1) of
	      %% Line 438
	      <[]> when 'true' ->
		  %% Line 439
		  []
	      %% Line 440
	      <D> when 'true' ->
		  %% Line 441
		  [[114|[101|[116|[117|[114|[110|[115|[58|[32]]]]]]]]]|D]
	    end
'throws'/2 =
    %% Line 446
    fun (_cor1,_cor0) ->
	%% Line 447
	case apply 'get_content'/2
		 ('throws', _cor1) of
	  %% Line 448
	  <[]> when 'true' ->
	      []
	  %% Line 449
	  <Es1> when 'true' ->
	      let <_cor4> =
		  %% Line 451
		  apply 'get_elem'/2
		      ('type', Es1)
	      in  let <_cor5> =
		      %% Line 451
		      apply 't_utype'/1
			  (_cor4)
		  in  let <_cor2> =
			  %% Line 452
			  apply 'get_elem'/2
			      ('localdef', Es1)
		      in  let <_cor3> =
			      %% Line 452
			      apply 'local_defs'/2
				  (_cor2, _cor0)
			  in  let <_cor6> =
				  %% Line 451
				  [[116|[104|[114|[111|[119|[115|[32]]]]]]]|[{'tt',_cor5}|_cor3]]
			      in  %% Line 451
				  [{'p',_cor6}|%% Line 453
					       [[10]]]
	end
'typespec'/2 =
    %% Line 458
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Opts> when 'true' ->
	      []
	  %% Line 459
	  <Es,Opts> when 'true' ->
	      let <_cor2> =
		  %% Line 460
		  apply 'get_elem'/2
		      ('erlangName', Es)
	      in  let <Name> =
		      %% Line 460
		      apply 't_name'/1
			  (_cor2)
		  in  let <Defs> =
			  %% Line 461
			  apply 'get_elem'/2
			      ('localdef', Es)
		      in  %% Line 462
			  case apply 'get_elem'/2
				   ('type', Es) of
			    <[Type|[]]> when 'true' ->
				let <_cor7> =
				    %% Line 463
				    apply 'format_spec'/4
					(Name, Type, Defs, Opts)
				in  let <_cor6> =
					%% Line 463
					apply 'local_defs'/2
					    (Defs, Opts)
				    in  %% Line 463
					call 'erlang':'++'
					    (_cor7, _cor6)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	end
'types'/2 =
    %% Line 468
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Opts> when 'true' ->
	      []
	  %% Line 469
	  <Ts,Opts> when 'true' ->
	      let <_cor4> =
		  %% Line 470
		  ( fun (_cor2) ->
			case _cor2 of
			  <{Name,E}> when 'true' ->
			      apply 'typedecl'/3
				  (Name, E, Opts)
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-types/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-types/2-fun-0-'}}] )
	      in  let <Es> =
		      %% Line 470
		      call 'lists':'flatmap'
			  (_cor4, Ts)
		  in  %% Line 471
		      [[10]|%% Line 472
			    [{'h2',[{'a',[{'name',[116|[121|[112|[101|[115]]]]]}],[[68|[97|[116|[97|[32|[84|[121|[112|[101|[115]]]]]]]]]]]}]}|%% Line 474
																	      [[10]|Es]]]
	end
'typedecl'/3 =
    %% Line 476
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,E = {'xmlElement',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Es,_cor18,_cor19,_cor20},Opts> when 'true' ->
	      let <_cor7> =
		  %% Line 477
		  apply 'label_anchor'/2
		      ([Name|[[40|[41]]]], E)
	      in  let <_cor4> =
		      %% Line 478
		      apply 'get_content'/2
			  ('typedef', Es)
		  in  let <_cor5> =
			  %% Line 478
			  apply 'typedef'/2
			      (_cor4, Opts)
		      in  let <_cor3> =
			      %% Line 479
			      apply 'fulldesc'/1
				  (Es)
			  in  let <_cor6> =
				  %% Line 478
				  [{'p',_cor5}|%% Line 479
					       [[10]|_cor3]]
			      in  %% Line 477
				  [[10]|[{'h3',[{'class',[116|[121|[112|[101|[100|[101|[99|[108]]]]]]]]}],_cor7}|%% Line 478
														 [[10]|_cor6]]]
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'typedecl',3}}] )
	    -| ['compiler_generated'] )
	end
'type_name'/1 =
    %% Line 481
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Es,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_cor1> =
		  %% Line 482
		  apply 'get_content'/2
		      ('typedef', Es)
	      in  let <_cor2> =
		      %% Line 482
		      apply 'get_elem'/2
			  ('erlangName', _cor1)
		  in  %% Line 482
		      apply 't_name'/1
			  (_cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'type_name',1}}] )
	    -| ['compiler_generated'] )
	end
'typedef'/2 =
    %% Line 484
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 485
	    apply 'get_elem'/2
		('erlangName', _cor1)
	in  let <_cor5> =
		%% Line 485
		apply 't_name'/1
		    (_cor4)
	    in  let <_cor2> =
		    %% Line 486
		    apply 'get_content'/2
			('argtypes', _cor1)
		in  let <_cor3> =
			%% Line 486
			apply 'seq'/3
			    (( 't_utype_elem'/1
			       -| [{'id',{0,0,'-typedef/2-fun-0-'}}] ), _cor2, [[41]])
		    in  let <Name> =
			    %% Line 485
			    [_cor5|%% Line 486
				   [[40]|_cor3]]
			in  let <_cor10> =
				%% Line 487
				case apply 'get_elem'/2
					 ('type', _cor1) of
				  %% Line 488
				  <[]> when 'true' ->
				      [{'b',[[97|[98|[115|[116|[114|[97|[99|[116|[32|[100|[97|[116|[97|[116|[121|[112|[101]]]]]]]]]]]]]]]]]]}|[[58|[32]]|[{'tt',Name}|[]]]]
				  %% Line 489
				  <Type> when 'true' ->
				      apply 'format_type'/5
					  (Name, Name, Type, [], _cor0)
				end
			    in  let <_cor7> =
				    %% Line 491
				    apply 'get_elem'/2
					('localdef', _cor1)
				in  let <_cor8> =
					%% Line 491
					apply 'local_defs'/2
					    (_cor7, _cor0)
				    in  %% Line 491
					call 'erlang':'++'
					    (_cor10, _cor8)
'local_defs'/2 =
    %% Line 493
    fun (_cor1,_cor0) ->
	%% Line 494
	apply 'local_defs'/3
	    (_cor1, [], _cor0)
'local_defs'/3 =
    %% Line 496
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor16,_X_Opts> when 'true' ->
	      []
	  %% Line 497
	  <Es0,Last,Opts> when 'true' ->
	      %% Line 498
	      case call 'lists':'reverse'
		       (Es0) of
		<[E|Es]> when 'true' ->
		    let <_cor10> =
			%% Line 501
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[E1|_cor6]> when 'true' ->
					    let <_cor8> =
						apply 'localdef'/3
						    (E1, [], Opts)
					    in  let <_cor9> =
						    apply 'lc$^0'/1
							(_cor6)
						in  ( [_cor8|_cor9]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Es)
			  -| ['list_comprehension'] )
		    in  let <_cor11> =
			    %% Line 501
			    call 'lists':'append'
				(_cor10)
			in  let <_cor4> =
				%% Line 502
				apply 'localdef'/3
				    (E, Last, Opts)
			    in  let <_cor12> =
				    %% Line 501
				    call 'lists':'reverse'
					(_cor11, _cor4)
				in  %% Line 499
				    [[10]|%% Line 500
					  [{'ul',[{'class',[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115]]]]]]]]]]]}],_cor12}|%% Line 502
																       []]]
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'localdef'/3 =
    %% Line 504
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E = {'xmlElement',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,Es,_cor22,_cor23,_cor24},Last,Opts> when 'true' ->
	      let <_cor8,N0> =
		  %% Line 505
		  case apply 'get_elem'/2
			   ('typevar', Es) of
		    %% Line 506
		    <[]> when 'true' ->
			let <_cor3> =
			    %% Line 507
			    apply 'get_content'/2
				('abstype', Es)
			in  let <_cor5> =
				%% Line 507
				apply 't_abstype'/1
				    (_cor3)
			    in  %% Line 507
				<apply 'label_anchor'/2
				     (_cor5, E),_cor5>
		    %% Line 508
		    <[V|[]]> when 'true' ->
			let <N0> =
			    %% Line 509
			    apply 't_var'/1
				(V)
			in  <N0,N0>
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor10> =
		      %% Line 511
		      apply 'get_elem'/2
			  ('type', Es)
		  in  let <_cor11> =
			  %% Line 511
			  apply 'format_type'/5
			      (_cor8, N0, _cor10, Last, Opts)
		      in  %% Line 511
			  [{'li',_cor11}|[]]
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'localdef',3}}] )
	    -| ['compiler_generated'] )
	end
'format_spec'/4 =
    %% Line 516
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Type,Defs,Opts = {'opts',_cor21,_cor22,_cor23,_cor24,'erl_pp'}> when 'true' ->
	      %% Line 517
	      try
		  let <L> =
		      %% Line 518
		      apply 't_clause'/2
			  (Name, Type)
		  in  let <O> =
			  %% Line 519
			  apply 'pp_clause'/2
			      (Name, Type)
		      in  %% Line 520
			  case apply 'etypef'/2
				   (L, O) of
			    <{R,[46|[10]]}> when 'true' ->
				%% Line 521
				[{'pre',R}|[]]
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	      of <_cor7> ->
		  _cor7
	      catch <_cor10,_cor9,_cor8> ->
		  let <_cor13> =
		      %% Line 524
		      call 'erlang':'setelement'
			  (6, Opts, '')
		  in  %% Line 524
		      apply 'format_spec'/4
			  (Name, Type, Defs, _cor13)
	  %% Line 526
	  <Sep,Type,Defs,_X_Opts> when 'true' ->
	      let <_cor14> =
		  %% Line 528
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Defs,
			       []) ->
			'br'
		    <> when 'true' ->
			[]
		  end
	      in  let <_cor16> =
		      %% Line 529
		      apply 't_clause'/2
			  (Sep, Type)
		  in  %% Line 529
		      [{'tt',_cor16}|[_cor14|[]]]
	end
't_clause'/2 =
    %% Line 531
    fun (_cor1,_cor0) ->
	%% Line 532
	case _cor0 of
	  <{'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,[{'xmlElement','fun',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,C,_cor19,_cor20,_cor21}|[]],_cor22,_cor23,_cor24}> when 'true' ->
	      let <_cor3> =
		  %% Line 533
		  apply 't_fun'/1
		      (C)
	      in  %% Line 533
		  [_cor1|_cor3]
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'pp_clause'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	let <Types> =
	    %% Line 536
	    apply 'ot_utype'/1
		([_cor0|[]])
	in  let <_cor3> =
		%% Line 537
		call 'erlang':'iolist_size'
		    (_cor1)
	    in  let <Atom> =
		    %% Line 537
		    call 'lists':'duplicate'
			(_cor3, 97)
		in  let <_cor5> =
			%% Line 538
			call 'erlang':'list_to_atom'
			    (Atom)
		    in  let <L1> =
			    %% Line 538
			    call 'erl_pp':'attribute'
				({'attribute',0,'spec',{{_cor5,0},[Types|[]]}})
			in  %% Line 539
			    case call 'lists':'flatten'
				     (L1) of
			      <[45|[115|[112|[101|[99|[32|L2]]]]]]> when 'true' ->
				  let <_cor8> =
				      %% Line 540
				      call 'erlang':'length'
					  (Atom)
				  in  let <_cor9> =
					  %% Line 540
					  call 'lists':'nthtail'
					      (_cor8, L2)
				      in  let <L3> =
					      %% Line 540
					      call 'erlang':'++'
						  (_cor1, _cor9)
					  in  %% Line 541
					      call 're':'replace'
						  (L3, [10|[32|[32|[32|[32|[32|[32]]]]]]], [10], [{'return','list'}|['global']])
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
'format_type'/5 =
    %% Line 543
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Prefix,Name,Type,Last,Opts = {'opts',_cor27,_cor28,_cor29,_cor30,'erl_pp'}> when 'true' ->
	      %% Line 544
	      try
		  let <L> =
		      %% Line 545
		      apply 't_utype'/1
			  (Type)
		  in  let <O> =
			  %% Line 546
			  apply 'pp_type'/2
			      (Name, Type)
		      in  %% Line 547
			  case apply 'etypef'/2
				   (L, O) of
			    <{R,[46|[10]]}> when 'true' ->
				let <_cor8> =
				    %% Line 548
				    call 'erlang':'++'
					(R, Last)
				in  let <_cor9> =
					%% Line 548
					[[32|[61|[32]]]|_cor8]
				    in  let <_cor10> =
					    %% Line 548
					    call 'erlang':'++'
						(Prefix, _cor9)
					in  %% Line 548
					    [{'pre',_cor10}|[]]
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	      of <_cor11> ->
		  _cor11
	      catch <_cor14,_cor13,_cor12> ->
		  let <_cor17> =
		      %% Line 551
		      call 'erlang':'setelement'
			  (6, Opts, '')
		  in  %% Line 551
		      apply 'format_type'/5
			  (Prefix, Name, Type, Last, _cor17)
	  %% Line 553
	  <Prefix,_X_Name,Type,Last,_X_Opts> when 'true' ->
	      let <_cor18> =
		  %% Line 554
		  apply 't_utype'/1
		      (Type)
	      in  let <_cor19> =
		      %% Line 554
		      call 'erlang':'++'
			  (_cor18, Last)
		  in  let <_cor20> =
			  %% Line 554
			  [[32|[61|[32]]]|_cor19]
		      in  let <_cor21> =
			      %% Line 554
			      call 'erlang':'++'
				  (Prefix, _cor20)
			  in  %% Line 554
			      [{'tt',_cor21}|[]]
	end
'pp_type'/2 =
    %% Line 556
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 557
	    call 'erlang':'iolist_size'
		(_cor1)
	in  let <_cor3> =
		%% Line 557
		call 'lists':'duplicate'
		    (_cor2, 97)
	    in  let <Atom> =
		    %% Line 557
		    call 'erlang':'list_to_atom'
			(_cor3)
		in  let <_cor5> =
			%% Line 558
			apply 'ot_utype'/1
			    (_cor0)
		    in  let <L1> =
			    %% Line 558
			    call 'erl_pp':'attribute'
				({'attribute',0,'type',{Atom,_cor5,[]}})
			in  let <_cor10> =
				%% Line 559
				( fun (_cor8) ->
				      call 'erlang':'=/='
					  (_cor8, 58)
				  -| [{'id',{0,0,'-pp_type/2-fun-0-'}}] )
			    in  let <_cor7> =
				    %% Line 559
				    call 'lists':'flatten'
					(L1)
				in  let <L2,N> =
					%% Line 559
					case call 'lists':'dropwhile'
						 (_cor10, _cor7) of
					  %% Line 560
					  <[58|[58|[32|L3]]]> when 'true' ->
					      <L3,9>
					  %% Line 561
					  <[58|[58|[10|L3]]]> when 'true' ->
					      let <_cor11> =
						  [10|L3]
					      in  <_cor11,6>
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor12})
					    -| ['compiler_generated'] )
					end
				    in  let <Ss> =
					    %% Line 563
					    call 'lists':'duplicate'
						(N, 32)
					in  let <_cor16> =
						%% Line 564
						[10|Ss]
					    in  %% Line 564
						call 're':'replace'
						    (L2, _cor16, [10], [{'return','list'}|['global']])
'etypef'/2 =
    %% Line 566
    fun (_cor1,_cor0) ->
	%% Line 567
	case apply 'etypef'/4
		 (_cor1, [], _cor0, []) of
	  <{R,O}> when 'true' ->
	      let <_cor3> =
		  %% Line 568
		  call 'lists':'reverse'
		      (R)
	      in  %% Line 568
		  {_cor3,O}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'etypef'/4 =
    %% Line 570
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C|L],St,[_cor17|O],R>
	      when call 'erlang':'=:='
		    (_cor17,
		     C) ->
	      %% Line 571
	      apply 'etypef'/4
		  (L, St, O, [[C|[]]|R])
	  %% Line 572
	  <[32|L],St,O,R> when 'true' ->
	      %% Line 573
	      apply 'etypef'/4
		  (L, St, O, R)
	  %% Line 574
	  <[],[Cs|St],O,R> when 'true' ->
	      %% Line 575
	      apply 'etypef'/4
		  (Cs, St, O, R)
	  %% Line 576
	  <[],[],O,R> when 'true' ->
	      %% Line 577
	      {R,O}
	  %% Line 578
	  <L,St,[32|O],R> when 'true' ->
	      %% Line 579
	      apply 'etypef'/4
		  (L, St, O, [[32]|R])
	  %% Line 580
	  <L,St,[10|O],R> when 'true' ->
	      let <_cor6> =
		  %% Line 581
		  ( fun (_cor4) ->
			call 'erlang':'=:='
			    (_cor4, 32)
		    -| [{'id',{0,0,'-etypef/4-fun-0-'}}] )
	      in  let <Ss> =
		      %% Line 581
		      call 'lists':'takewhile'
			  (_cor6, O)
		  in  let <_cor9> =
			  %% Line 582
			  call 'erlang':'length'
			      (Ss)
		      in  let <_cor10> =
			      %% Line 582
			      call 'lists':'nthtail'
				  (_cor9, O)
			  in  let <_cor8> =
				  %% Line 582
				  [10|Ss]
			      in  %% Line 582
				  apply 'etypef'/4
				      (L, St, _cor10, [_cor8|R])
	  %% Line 583
	  <[{'a',HRef,S0}|L],St,O0,R> when 'true' ->
	      let <_cor11> =
		  %% Line 584
		  apply 'app_fix'/1
		      (O0)
	      in  %% Line 584
		  case apply 'etypef'/2
			   (S0, _cor11) of
		    <{S,O}> when 'true' ->
			%% Line 585
			apply 'etypef'/4
			    (L, St, O, [{'a',HRef,S}|R])
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 586
	  <[61|L],St,[58|[58|O]],R> when 'true' ->
	      %% Line 590
	      apply 'etypef'/4
		  (L, St, O, [[61]|R])
	  %% Line 591
	  <[Cs|L],St,O,R> when 'true' ->
	      %% Line 592
	      apply 'etypef'/4
		  (Cs, [L|St], O, R)
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'etypef',4}}] )
	    -| ['compiler_generated'] )
	end
'app_fix'/1 =
    %% Line 594
    fun (_cor0) ->
	%% Line 595
	try
	    %% Line 596
	    case apply 'app_fix'/2
		     (_cor0, 1) of
	      <{[47|[47|R1]],L2}> when 'true' ->
		  %% Line 597
		  case call 'string':'tokens'
			   (R1, [47]) of
		    <[App|[Mod|[]]]> when 'true' ->
			let <_cor6> =
			    %% Line 598
			    apply 'atom'/1
				(App)
			in  let <_cor3> =
				%% Line 598
				apply 'atom'/1
				    (Mod)
			    in  let <_cor4> =
				    %% Line 598
				    call 'erlang':'++'
					(_cor3, L2)
				in  let <_cor5> =
					%% Line 598
					[47|_cor4]
				    in  let <_cor7> =
					    %% Line 598
					    call 'erlang':'++'
						(_cor6, _cor5)
					in  %% Line 598
					    [47|[47|_cor7]]
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
	of <_cor8> ->
	    _cor8
	catch <_cor11,_cor10,_cor9> ->
	    _cor0
'app_fix'/2 =
    %% Line 602
    fun (_cor1,_cor0) ->
	%% Line 603
	case call 'lists':'split'
		 (_cor0, _cor1) of
	  <{L1,L2}> when 'true' ->
	      let <_cor3> =
		  %% Line 604
		  call 'erlang':'++'
		      (L1, [46|[32]])
	      in  %% Line 604
		  case call 'erl_scan':'tokens'
			   ([], _cor3, 1) of
		    %% Line 605
		    <{'done',{'ok',[{'atom',_cor9,Atom}|_cor10],_cor11},_cor12}> when 'true' ->
			let <_cor4> =
			    call 'erlang':'atom_to_list'
				(Atom)
			in  {_cor4,L2}
		    %% Line 606
		    <_cor13> when 'true' ->
			let <_cor5> =
			    call 'erlang':'+'
				(_cor0, 1)
			in  apply 'app_fix'/2
				(_cor1, _cor5)
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'fulldesc'/1 =
    %% Line 609
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 610
	    apply 'get_content'/2
		('description', _cor0)
	in  %% Line 610
	    case apply 'get_content'/2
		     ('fullDescription', _cor1) of
	      %% Line 611
	      <[]> when 'true' ->
		  [[10]]
	      %% Line 612
	      <Desc> when 'true' ->
		  [{'p',Desc}|[[10]]]
	    end
'sees'/1 =
    %% Line 615
    fun (_cor0) ->
	%% Line 616
	case apply 'get_elem'/2
		 ('see', _cor0) of
	  %% Line 617
	  <[]> when 'true' ->
	      []
	  %% Line 618
	  <Es1> when 'true' ->
	      let <_cor1> =
		  %% Line 619
		  apply 'seq'/3
		      (( 'see'/1
			 -| [{'id',{0,0,'-sees/1-fun-0-'}}] ), Es1, [[46]])
	      in  let <_cor2> =
		      %% Line 619
		      [{'b',[[83|[101|[101|[32|[97|[108|[115|[111|[58]]]]]]]]]]}|[[32]|_cor1]]
		  in  %% Line 619
		      [{'p',_cor2}|%% Line 620
				   [[10]]]
	end
'see'/1 =
    %% Line 623
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,Es,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 624
	      apply 'see'/2
		  (E, Es)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'see',1}}] )
	    -| ['compiler_generated'] )
	end
'see'/2 =
    %% Line 626
    fun (_cor1,_cor0) ->
	%% Line 627
	case apply 'href'/1
		 (_cor1) of
	  %% Line 628
	  <[]> when 'true' ->
	      _cor0
	  %% Line 629
	  <Ref> when 'true' ->
	      %% Line 630
	      [{'a',Ref,_cor0}|[]]
	end
'href'/1 =
    %% Line 633
    fun (_cor0) ->
	%% Line 634
	case apply 'get_attrval'/2
		 ('href', _cor0) of
	  %% Line 635
	  <[]> when 'true' ->
	      []
	  %% Line 636
	  <URI> when 'true' ->
	      let <_cor2> =
		  %% Line 637
		  case apply 'get_attrval'/2
			   ('target', _cor0) of
		    %% Line 638
		    <[]> when 'true' ->
			[]
		    %% Line 639
		    <S> when 'true' ->
			[{'target',S}|[]]
		  end
	      in  %% Line 641
		  [{'href',URI}|_cor2]
	end
'equiv_p'/1 =
    %% Line 644
    fun (_cor0) ->
	%% Line 645
	apply 'equiv'/2
	    (_cor0, 'true')
'equiv'/1 =
    %% Line 647
    fun (_cor0) ->
	%% Line 648
	apply 'equiv'/2
	    (_cor0, 'false')
'equiv'/2 =
    %% Line 650
    fun (_cor1,_cor0) ->
	%% Line 651
	case apply 'get_content'/2
		 ('equiv', _cor1) of
	  %% Line 652
	  <[]> when 'true' ->
	      []
	  %% Line 653
	  <Es1> when 'true' ->
	      %% Line 654
	      case apply 'get_content'/2
		       ('expr', Es1) of
		%% Line 655
		<[]> when 'true' ->
		    []
		%% Line 656
		<[Expr|[]]> when 'true' ->
		    let <Expr1> =
			%% Line 657
			[{'tt',[Expr|[]]}|[]]
		    in  let <_cor4> =
			    %% Line 658
			    case apply 'get_elem'/2
				     ('see', Es1) of
			      %% Line 659
			      <[]> when 'true' ->
				  %% Line 660
				  Expr1
			      %% Line 661
			      <[E = {'xmlElement',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}|[]]> when 'true' ->
				  %% Line 662
				  apply 'see'/2
				      (E, Expr1)
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor3})
				-| ['compiler_generated'] )
			    end
			in  let <_cor6> =
				%% Line 664
				call 'erlang':'++'
				    (_cor4, [[46]])
			    in  let <Txt> =
				    %% Line 664
				    [[69|[113|[117|[105|[118|[97|[108|[101|[110|[116|[32|[116|[111|[32]]]]]]]]]]]]]]|_cor6]
				in  let <_cor9> =
					%% Line 665
					case _cor0 of
					  %% Line 666
					  <'true'> when 'true' ->
					      [{'p',Txt}|[]]
					  %% Line 667
					  <'false'> when 'true' ->
					      Txt
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor8})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 669
					call 'erlang':'++'
					    (_cor9, [[10]])
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'copyright'/1 =
    %% Line 673
    fun (_cor0) ->
	%% Line 674
	case apply 'get_content'/2
		 ('copyright', _cor0) of
	  %% Line 675
	  <[]> when 'true' ->
	      []
	  %% Line 676
	  <Es1> when 'true' ->
	      %% Line 677
	      [{'p',[[67|[111|[112|[121|[114|[105|[103|[104|[116|[32|[169|[32]]]]]]]]]]]]|Es1]}|[[10]]]
	end
'version'/1 =
    %% Line 680
    fun (_cor0) ->
	%% Line 681
	case apply 'get_content'/2
		 ('version', _cor0) of
	  %% Line 682
	  <[]> when 'true' ->
	      []
	  %% Line 683
	  <Es1> when 'true' ->
	      %% Line 684
	      [{'p',[{'b',[[86|[101|[114|[115|[105|[111|[110|[58]]]]]]]]]}|[[32]|Es1]]}|[[10]]]
	end
'since'/1 =
    %% Line 687
    fun (_cor0) ->
	%% Line 688
	case apply 'get_content'/2
		 ('since', _cor0) of
	  %% Line 689
	  <[]> when 'true' ->
	      []
	  %% Line 690
	  <Es1> when 'true' ->
	      %% Line 691
	      [{'p',[{'b',[[73|[110|[116|[114|[111|[100|[117|[99|[101|[100|[32|[105|[110|[58]]]]]]]]]]]]]]]}|[[32]|Es1]]}|[[10]]]
	end
'deprecated'/2 =
    %% Line 694
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 695
	    apply 'get_content'/2
		('deprecated', _cor1)
	in  let <Es1> =
		%% Line 695
		apply 'get_content'/2
		    ('description', _cor2)
	    in  %% Line 696
		case apply 'get_content'/2
			 ('fullDescription', Es1) of
		  %% Line 697
		  <[]> when 'true' ->
		      []
		  %% Line 698
		  <Es2> when 'true' ->
		      let <_cor4> =
			  %% Line 699
			  call 'erlang':'++'
			      (_cor0, [32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[58]]]]]]]]]]]]]]])
		      in  let <_cor5> =
			      %% Line 699
			      call 'erlang':'++'
				  ([84|[104|[105|[115|[32]]]]], _cor4)
			  in  %% Line 699
			      [{'p',[{'b',[_cor5|[]]}|[[32]|Es2]]}|%% Line 700
								   [[10]]]
		end
'behaviours'/2 =
    %% Line 703
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 704
	    case apply 'get_elem'/2
		     ('behaviour', _cor1) of
	      %% Line 705
	      <[]> when 'true' ->
		  []
	      %% Line 706
	      <Es1> when 'true' ->
		  let <_cor6> =
		      %% Line 708
		      apply 'seq'/3
			  (( 'behaviour'/1
			     -| [{'id',{0,0,'-behaviours/2-fun-0-'}}] ), Es1, [[46]])
		  in  let <_cor7> =
			  %% Line 708
			  [{'b',[[66|[101|[104|[97|[118|[105|[111|[117|[114|[115|[58]]]]]]]]]]]]}|[[32]|_cor6]]
		      in  %% Line 707
			  [{'p',_cor7}|%% Line 709
				       [[10]]]
	    end
	in  let <_cor5> =
		%% Line 712
		case apply 'get_content'/2
			 ('callbacks', _cor1) of
		  %% Line 713
		  <[]> when 'true' ->
		      []
		  %% Line 714
		  <Es1> when 'true' ->
		      let <_cor2> =
			  %% Line 718
			  apply 'seq'/3
			      (( 'callback'/1
				 -| [{'id',{0,0,'-behaviours/2-fun-1-'}}] ), Es1, [[46]])
		      in  let <_cor3> =
			      %% Line 715
			      [{'b',[[84|[104|[105|[115|[32|[109|[111|[100|[117|[108|[101|[32|[100|[101|[102|[105|[110|[101|[115|[32|[116|[104|[101|[32]]]]]]]]]]]]]]]]]]]]]]]]|[{'tt',[_cor0|[]]}|%% Line 716
																								   [[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[46]]]]]]]]]]]]]]}|%% Line 718
																																      ['br'|[[32|[82|[101|[113|[117|[105|[114|[101|[100|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|_cor2]]]
			  in  %% Line 715
			      [{'p',_cor3}|%% Line 719
					   [[10]]]
		end
	    in  %% Line 711
		call 'erlang':'++'
		    (_cor9, _cor5)
'behaviour'/1 =
    %% Line 722
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,Es,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 723
	      apply 'see'/2
		  (E, [{'tt',Es}|[]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'behaviour',1}}] )
	    -| ['compiler_generated'] )
	end
'callback'/1 =
    %% Line 725
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      let <Name> =
		  %% Line 726
		  apply 'get_attrval'/2
		      ('name', E)
	      in  let <Arity> =
		      %% Line 727
		      apply 'get_attrval'/2
			  ('arity', E)
		  in  %% Line 728
		      [{'tt',[Name|[[47]|[Arity|[]]]]}|[]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'callback',1}}] )
	    -| ['compiler_generated'] )
	end
'authors'/1 =
    %% Line 730
    fun (_cor0) ->
	%% Line 731
	case apply 'get_elem'/2
		 ('author', _cor0) of
	  %% Line 732
	  <[]> when 'true' ->
	      []
	  %% Line 733
	  <Es1> when 'true' ->
	      let <_cor1> =
		  %% Line 734
		  apply 'seq'/3
		      (( 'author'/1
			 -| [{'id',{0,0,'-authors/1-fun-0-'}}] ), Es1, [[46]])
	      in  let <_cor2> =
		      %% Line 734
		      [{'b',[[65|[117|[116|[104|[111|[114|[115|[58]]]]]]]]]}|[[32]|_cor1]]
		  in  %% Line 734
		      [{'p',_cor2}|%% Line 735
				   [[10]]]
	end
'atom'/1 =
    %% Line 738
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 739
	    call 'erlang':'list_to_atom'
		(_cor0)
	in  %% Line 739
	    call 'io_lib':'write_atom'
		(_cor1)
'author'/1 =
    %% Line 746
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <Name> =
		  %% Line 747
		  apply 'get_attrval'/2
		      ('name', E)
	      in  let <Mail> =
		      %% Line 748
		      apply 'get_attrval'/2
			  ('email', E)
		  in  let <URI> =
			  %% Line 749
			  apply 'get_attrval'/2
			      ('website', E)
		      in  let <_cor7> =
			      %% Line 750
			      case <> of
				<>
				    when call 'erlang':'=='
					  (Name,
					   Mail) ->
				    let <_cor5> =
					%% Line 751
					call 'erlang':'++'
					    ([109|[97|[105|[108|[116|[111|[58]]]]]]], Mail)
				    in  %% Line 751
					[{'a',[{'href',_cor5}|[]],[{'tt',[Mail|[]]}|[]]}|[]]
				%% Line 752
				<> when 'true' ->
				    %% Line 753
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(Mail,
						 []) ->
					  [Name|[]]
				      %% Line 754
				      <> when 'true' ->
					  let <_cor6> =
					      call 'erlang':'++'
						  ([109|[97|[105|[108|[116|[111|[58]]]]]]], Mail)
					  in  [Name|[[32|[40]]|[{'a',[{'href',_cor6}|[]],%% Line 755
											 [{'tt',[Mail|[]]}|[]]}|%% Line 755
														[[41]]]]]
				    end
			      end
			  in  let <_cor4> =
				  %% Line 758
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (URI,
					       []) ->
					%% Line 759
					[]
				    %% Line 760
				    <> when 'true' ->
					%% Line 761
					[[32|[91]]|[{'em',[[119|[101|[98|[32|[115|[105|[116|[101|[58]]]]]]]]]]}|[[32]|%% Line 762
														      [{'tt',[{'a',[{'href',URI}|[{'target',[95|[116|[111|[112]]]]}]],[URI|[]]}|[]]}|%% Line 763
																								     [[93]]]]]]
				  end
			      in  %% Line 758
				  call 'erlang':'++'
				      (_cor7, _cor4)
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'author',1}}] )
	    -| ['compiler_generated'] )
	end
'references'/1 =
    %% Line 766
    fun (_cor0) ->
	%% Line 767
	case apply 'get_elem'/2
		 ('reference', _cor0) of
	  %% Line 768
	  <[]> when 'true' ->
	      []
	  %% Line 769
	  <Es1> when 'true' ->
	      let <_cor5> =
		  %% Line 771
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[{'xmlElement',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,C,_cor15,_cor16,_cor17}|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [{'li',C}|_cor4]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Es1)
		    -| ['list_comprehension'] )
	      in  %% Line 770
		  [{'p',[{'b',[[82|[101|[102|[101|[114|[101|[110|[99|[101|[115]]]]]]]]]]]}|%% Line 771
											   [{'ul',_cor5}|[]]]}|%% Line 772
													       [[10]]]
	end
'todos'/1 =
    %% Line 775
    fun (_cor0) ->
	%% Line 776
	case apply 'get_elem'/2
		 ('todo', _cor0) of
	  %% Line 777
	  <[]> when 'true' ->
	      []
	  %% Line 778
	  <Es1> when 'true' ->
	      let <_cor5> =
		  %% Line 779
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[%% Line 780
				    {'xmlElement',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,C,_cor16,_cor17,_cor18}|_cor2]> when 'true' ->
				      let <_cor4> =
					  %% Line 780
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [{'li',[{'font',[{'color','red'}],C}|[]]}|_cor4]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					%% Line 780
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 780
			     Es1)
		    -| ['list_comprehension'] )
	      in  %% Line 781
		  [{'p',[{'b',[{'font',[{'color','red'}],[[84|[111|[32|[100|[111]]]]]]}]}|%% Line 782
											  [{'ul',_cor5}|[]]]}|%% Line 783
													      [[10]]]
	end
't_name'/1 =
    %% Line 786
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      let <N> =
		  %% Line 787
		  apply 'get_attrval'/2
		      ('name', E)
	      in  %% Line 788
		  case apply 'get_attrval'/2
			   ('module', E) of
		    %% Line 789
		    <[]> when 'true' ->
			apply 'atom'/1
			    (N)
		    %% Line 790
		    <M> when 'true' ->
			let <_cor4> =
			    %% Line 791
			    apply 'atom'/1
				(M)
			in  let <_cor2> =
				%% Line 791
				apply 'atom'/1
				    (N)
			    in  let <_cor3> =
				    %% Line 791
				    [58|_cor2]
				in  let <S> =
					%% Line 791
					call 'erlang':'++'
					    (_cor4, _cor3)
				    in  %% Line 792
					case apply 'get_attrval'/2
						 ('app', E) of
					  %% Line 793
					  <[]> when 'true' ->
					      S
					  %% Line 794
					  <A> when 'true' ->
					      let <_cor7> =
						  apply 'atom'/1
						      (A)
					      in  let <_cor6> =
						      [47|S]
						  in  let <_cor8> =
							  call 'erlang':'++'
							      (_cor7, _cor6)
						      in  [47|[47|_cor8]]
					end
		  end
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'t_name',1}}] )
	    -| ['compiler_generated'] )
	end
't_utype'/1 =
    %% Line 798
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      %% Line 799
	      apply 't_utype_elem'/1
		  (E)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t_utype',1}}] )
	    -| ['compiler_generated'] )
	end
't_utype_elem'/1 =
    %% Line 801
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Es,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 802
	      case apply 'get_attrval'/2
		       ('name', E) of
		%% Line 803
		<[]> when 'true' ->
		    apply 't_type'/1
			(Es)
		%% Line 804
		<Name> when 'true' ->
		    let <T> =
			%% Line 805
			apply 't_type'/1
			    (Es)
		    in  %% Line 806
			case T of
			  %% Line 807
			  <[_cor16|[]]>
			      when call 'erlang':'=:='
				    (_cor16,
				     Name) ->
			      T
			  %% Line 808
			  <_cor17> when 'true' ->
			      let <_cor2> =
				  [[58|[58]]|T]
			      in  [Name|_cor2]
			end
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'t_utype_elem',1}}] )
	    -| ['compiler_generated'] )
	end
't_type'/1 =
    %% Line 812
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement','typevar',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|[]]> when 'true' ->
	      %% Line 813
	      apply 't_var'/1
		  (E)
	  %% Line 814
	  <[E = {'xmlElement','atom',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}|[]]> when 'true' ->
	      %% Line 815
	      apply 't_atom'/1
		  (E)
	  %% Line 816
	  <[E = {'xmlElement','integer',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}|[]]> when 'true' ->
	      %% Line 817
	      apply 't_integer'/1
		  (E)
	  %% Line 818
	  <[E = {'xmlElement','range',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}|[]]> when 'true' ->
	      %% Line 819
	      apply 't_range'/1
		  (E)
	  %% Line 820
	  <[E = {'xmlElement','binary',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}|[]]> when 'true' ->
	      %% Line 821
	      apply 't_binary'/1
		  (E)
	  %% Line 822
	  <[E = {'xmlElement','float',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}|[]]> when 'true' ->
	      %% Line 823
	      apply 't_float'/1
		  (E)
	  %% Line 824
	  <[{'xmlElement','nil',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73}|[]]> when 'true' ->
	      %% Line 825
	      apply 't_nil'/0
		  ()
	  %% Line 826
	  <[{'xmlElement','paren',_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,Es,_cor80,_cor81,_cor82}|[]]> when 'true' ->
	      %% Line 827
	      apply 't_paren'/1
		  (Es)
	  %% Line 828
	  <[{'xmlElement','list',_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,Es,_cor89,_cor90,_cor91}|[]]> when 'true' ->
	      %% Line 829
	      apply 't_list'/1
		  (Es)
	  %% Line 830
	  <[{'xmlElement','nonempty_list',_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,Es,_cor98,_cor99,_cor100}|[]]> when 'true' ->
	      %% Line 831
	      apply 't_nonempty_list'/1
		  (Es)
	  %% Line 832
	  <[{'xmlElement','map',_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,Es,_cor107,_cor108,_cor109}|[]]> when 'true' ->
	      %% Line 833
	      apply 't_map'/1
		  (Es)
	  %% Line 834
	  <[{'xmlElement','map_field',_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,Es,_cor116,_cor117,_cor118}|[]]> when 'true' ->
	      %% Line 835
	      apply 't_map_field'/1
		  (Es)
	  %% Line 836
	  <[{'xmlElement','tuple',_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,Es,_cor125,_cor126,_cor127}|[]]> when 'true' ->
	      %% Line 837
	      apply 't_tuple'/1
		  (Es)
	  %% Line 838
	  <[{'xmlElement','fun',_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,Es,_cor134,_cor135,_cor136}|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 839
		  apply 't_fun'/1
		      (Es)
	      in  let <_cor2> =
		      %% Line 839
		      call 'erlang':'++'
			  (_cor1, [[41]])
		  in  %% Line 839
		      [[102|[117|[110|[40]]]]|_cor2]
	  %% Line 840
	  <[E = {'xmlElement','record',_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,Es,_cor143,_cor144,_cor145}|[]]> when 'true' ->
	      %% Line 841
	      apply 't_record'/2
		  (E, Es)
	  %% Line 842
	  <[E = {'xmlElement','abstype',_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,Es,_cor152,_cor153,_cor154}|[]]> when 'true' ->
	      %% Line 843
	      apply 't_abstype'/2
		  (E, Es)
	  %% Line 844
	  <[{'xmlElement','union',_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,Es,_cor161,_cor162,_cor163}|[]]> when 'true' ->
	      %% Line 845
	      apply 't_union'/1
		  (Es)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'t_type',1}}] )
	    -| ['compiler_generated'] )
	end
't_var'/1 =
    %% Line 847
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 848
	    apply 'get_attrval'/2
		('name', _cor0)
	in  %% Line 848
	    [_cor1|[]]
't_atom'/1 =
    %% Line 850
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 851
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 851
	    [_cor1|[]]
't_integer'/1 =
    %% Line 853
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 854
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 854
	    [_cor1|[]]
't_range'/1 =
    %% Line 856
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 857
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 857
	    [_cor1|[]]
't_binary'/1 =
    %% Line 859
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 860
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 860
	    [_cor1|[]]
't_float'/1 =
    %% Line 862
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 863
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 863
	    [_cor1|[]]
't_nil'/0 =
    %% Line 865
    fun () ->
	%% Line 866
	[[91|[93]]]
't_paren'/1 =
    %% Line 868
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 869
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 869
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 869
		    call 'erlang':'++'
			(_cor2, [[41]])
		in  %% Line 869
		    [[40]|_cor3]
't_list'/1 =
    %% Line 871
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 872
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 872
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 872
		    call 'erlang':'++'
			(_cor2, [[93]])
		in  %% Line 872
		    [[91]|_cor3]
't_nonempty_list'/1 =
    %% Line 874
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 875
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 875
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 875
		    call 'erlang':'++'
			(_cor2, [[44|[32|[46|[46|[46|[93]]]]]]])
		in  %% Line 875
		    [[91]|_cor3]
't_tuple'/1 =
    %% Line 877
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 878
	    apply 'seq'/3
		(( 't_utype_elem'/1
		   -| [{'id',{0,0,'-t_tuple/1-fun-0-'}}] ), _cor0, [[125]])
	in  %% Line 878
	    [[123]|_cor1]
't_fun'/1 =
    %% Line 880
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 881
	    apply 'get_content'/2
		('argtypes', _cor0)
	in  let <_cor1> =
		%% Line 882
		apply 'get_elem'/2
		    ('type', _cor0)
	    in  let <_cor2> =
		    %% Line 882
		    apply 't_utype'/1
			(_cor1)
		in  let <_cor3> =
			%% Line 882
			[[41|[32|[45|[62|[32]]]]]|_cor2]
		    in  let <_cor5> =
			    %% Line 881
			    apply 'seq'/3
				(( 't_utype_elem'/1
				   -| [{'id',{0,0,'-t_fun/1-fun-0-'}}] ), _cor4, _cor3)
			in  %% Line 881
			    [[40]|_cor5]
't_map'/1 =
    %% Line 884
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 885
	    apply 'seq'/3
		(( 't_utype_elem'/1
		   -| [{'id',{0,0,'-t_map/1-fun-0-'}}] ), _cor0, [[125]])
	in  %% Line 885
	    [[35|[123]]|_cor1]
't_map_field'/1 =
    %% Line 887
    fun (_cor0) ->
	case _cor0 of
	  <[K|[V|[]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 888
		  apply 't_utype_elem'/1
		      (K)
	      in  let <_cor1> =
		      %% Line 888
		      apply 't_utype_elem'/1
			  (V)
		  in  let <_cor2> =
			  %% Line 888
			  [32|[61|[62|[32|_cor1]]]]
		      in  let <_cor4> =
			      %% Line 888
			      call 'erlang':'++'
				  (_cor3, _cor2)
			  in  %% Line 888
			      [_cor4|[]]
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'t_map_field',1}}] )
	    -| ['compiler_generated'] )
	end
't_record'/2 =
    %% Line 890
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 891
	    apply 'get_elem'/2
		('atom', _cor0)
	in  let <_cor3> =
		%% Line 891
		apply 't_type'/1
		    (_cor2)
	    in  let <Name> =
		    %% Line 891
		    [[35]|_cor3]
		in  %% Line 892
		    case apply 'get_elem'/2
			     ('field', _cor0) of
		      %% Line 893
		      <[]> when 'true' ->
			  %% Line 894
			  apply 'see'/2
			      (_cor1, [Name|[[123|[125]]]])
		      %% Line 895
		      <Fs> when 'true' ->
			  let <_cor7> =
			      %% Line 896
			      apply 'see'/2
				  (_cor1, Name)
			  in  let <_cor5> =
				  %% Line 896
				  apply 'seq'/3
				      (( 't_field'/1
					 -| [{'id',{0,0,'-t_record/2-fun-0-'}}] ), Fs, [[125]])
			      in  let <_cor6> =
				      %% Line 896
				      [[123]|_cor5]
				  in  %% Line 896
				      call 'erlang':'++'
					  (_cor7, _cor6)
		    end
't_field'/1 =
    %% Line 899
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,Es,_cor14,_cor15,_cor16}> when 'true' ->
	      let <_cor4> =
		  %% Line 900
		  apply 'get_elem'/2
		      ('atom', Es)
	      in  let <_cor5> =
		      %% Line 900
		      apply 't_type'/1
			  (_cor4)
		  in  let <_cor1> =
			  %% Line 900
			  apply 'get_elem'/2
			      ('type', Es)
		      in  let <_cor2> =
			      %% Line 900
			      apply 't_utype'/1
				  (_cor1)
			  in  let <_cor3> =
				  %% Line 900
				  [[32|[61|[32]]]|_cor2]
			      in  %% Line 900
				  call 'erlang':'++'
				      (_cor5, _cor3)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'t_field',1}}] )
	    -| ['compiler_generated'] )
	end
't_abstype'/2 =
    %% Line 902
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 903
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <Name> =
		%% Line 903
		apply 't_name'/1
		    (_cor2)
	    in  %% Line 904
		case apply 'get_elem'/2
			 ('type', _cor0) of
		  %% Line 905
		  <[]> when 'true' ->
		      %% Line 906
		      apply 'see'/2
			  (_cor1, [Name|[[40|[41]]]])
		  %% Line 907
		  <Ts> when 'true' ->
		      let <_cor6> =
			  %% Line 908
			  apply 'see'/2
			      (_cor1, [Name|[]])
		      in  let <_cor4> =
			      %% Line 908
			      apply 'seq'/3
				  (( 't_utype_elem'/1
				     -| [{'id',{0,0,'-t_abstype/2-fun-0-'}}] ), Ts, [[41]])
			  in  let <_cor5> =
				  %% Line 908
				  [[40]|_cor4]
			      in  %% Line 908
				  call 'erlang':'++'
				      (_cor6, _cor5)
		end
't_abstype'/1 =
    %% Line 911
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 912
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <_cor4> =
		%% Line 912
		apply 't_name'/1
		    (_cor3)
	    in  let <_cor1> =
		    %% Line 913
		    apply 'get_elem'/2
			('type', _cor0)
		in  let <_cor2> =
			%% Line 913
			apply 'seq'/3
			    (( 't_utype_elem'/1
			       -| [{'id',{0,0,'-t_abstype/1-fun-0-'}}] ), _cor1, [[41]])
		    in  %% Line 912
			[_cor4|%% Line 913
			       [[40]|_cor2]]
't_union'/1 =
    %% Line 915
    fun (_cor0) ->
	%% Line 916
	apply 'seq'/4
	    (( 't_utype_elem'/1
	       -| [{'id',{0,0,'-t_union/1-fun-0-'}}] ), _cor0, [32|[124|[32]]], [])
'seq'/2 =
    %% Line 918
    fun (_cor1,_cor0) ->
	%% Line 919
	apply 'seq'/3
	    (_cor1, _cor0, [])
'seq'/3 =
    %% Line 921
    fun (_cor2,_cor1,_cor0) ->
	%% Line 922
	apply 'seq'/4
	    (_cor2, _cor1, [44|[32]], _cor0)
'seq'/4 =
    %% Line 924
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[E|[]],_X_Sep,Tail> when 'true' ->
	      let <_cor4> =
		  %% Line 925
		  apply F
		      (E)
	      in  %% Line 925
		  call 'erlang':'++'
		      (_cor4, Tail)
	  %% Line 926
	  <F,[E|Es],Sep,Tail> when 'true' ->
	      let <_cor7> =
		  %% Line 927
		  apply F
		      (E)
	      in  let <_cor5> =
		      %% Line 927
		      apply 'seq'/4
			  (F, Es, Sep, Tail)
		  in  let <_cor6> =
			  %% Line 927
			  [Sep|_cor5]
		      in  %% Line 927
			  call 'erlang':'++'
			      (_cor7, _cor6)
	  %% Line 928
	  <_X_F,[],_X_Sep,Tail> when 'true' ->
	      %% Line 929
	      Tail
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'seq',4}}] )
	    -| ['compiler_generated'] )
	end
'get_elem'/2 =
    %% Line 931
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[E = {'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}|Es]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 932
		  apply 'get_elem'/2
		      (Name, Es)
	      in  %% Line 932
		  [E|_cor2]
	  %% Line 933
	  <Name,[_cor16|Es]> when 'true' ->
	      %% Line 934
	      apply 'get_elem'/2
		  (Name, Es)
	  %% Line 935
	  <_cor17,[]> when 'true' ->
	      %% Line 936
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_elem',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attr'/2 =
    %% Line 938
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[A = {'xmlAttribute',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|As]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 939
		  apply 'get_attr'/2
		      (Name, As)
	      in  %% Line 939
		  [A|_cor2]
	  %% Line 940
	  <Name,[_cor14|As]> when 'true' ->
	      %% Line 941
	      apply 'get_attr'/2
		  (Name, As)
	  %% Line 942
	  <_cor15,[]> when 'true' ->
	      %% Line 943
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attr',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attrval'/2 =
    %% Line 945
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,As,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 946
	      case apply 'get_attr'/2
		       (Name, As) of
		%% Line 947
		<[{'xmlAttribute',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,V,_cor22}|[]]> when 'true' ->
		    %% Line 948
		    V
		%% Line 949
		<[]> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attrval',2}}] )
	    -| ['compiler_generated'] )
	end
'get_content'/2 =
    %% Line 952
    fun (_cor1,_cor0) ->
	%% Line 953
	case apply 'get_elem'/2
		 (_cor1, _cor0) of
	  %% Line 954
	  <[{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Es1,_cor12,_cor13,_cor14}|[]]> when 'true' ->
	      %% Line 955
	      Es1
	  %% Line 956
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_text'/2 =
    %% Line 959
    fun (_cor1,_cor0) ->
	%% Line 960
	case apply 'get_content'/2
		 (_cor1, _cor0) of
	  %% Line 961
	  <[{'xmlText',_cor5,_cor6,_cor7,Text,_cor8}|[]]> when 'true' ->
	      %% Line 962
	      Text
	  %% Line 963
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'local_label'/1 =
    %% Line 966
    fun (_cor0) ->
	%% Line 967
	[35|_cor0]
'xhtml'/3 =
    %% Line 969
    fun (_cor2,_cor1,_cor0) ->
	%% Line 970
	apply 'xhtml'/4
	    (_cor2, _cor1, _cor0, [108|[97|[116|[105|[110|[49]]]]]])
'xhtml'/4 =
    %% Line 972
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 973
	    case _cor0 of
	      %% Line 974
	      <[108|[97|[116|[105|[110|[49]]]]]]> when 'true' ->
		  [73|[83|[79|[45|[56|[56|[53|[57|[45|[49]]]]]]]]]]
	      %% Line 975
	      <_cor13> when 'true' ->
		  [85|[84|[70|[45|[56]]]]]
	    end
	in  let <_cor7> =
		%% Line 980
		call 'erlang':'++'
		    ([116|[101|[120|[116|[47|[104|[116|[109|[108|[59|[32|[99|[104|[97|[114|[115|[101|[116|[61]]]]]]]]]]]]]]]]]]], _cor5)
	    in  let <_cor8> =
		    %% Line 978
		    [[10]|%% Line 979
			  [{'meta',[{'http-equiv',[67|[111|[110|[116|[101|[110|[116|[45|[84|[121|[112|[101]]]]]]]]]]]]}|%% Line 980
															[{'content',_cor7}|[]]],%% Line 981
																		[]}|%% Line 982
																		    [[10]|%% Line 983
																			  [{'title',_cor3}|%% Line 984
																					   [[10]|_cor2]]]]]
		in  %% Line 977
		    [{'html',[[10]|%% Line 978
				   [{'head',_cor8}|%% Line 985
						   [[10]|%% Line 986
							 [{'body',[{'bgcolor',[119|[104|[105|[116|[101]]]]]}],_cor1}|%% Line 987
														     [[10]]]]]]}|%% Line 989
																 [[10]]]
'type'/1 =
    %% Line 993
    fun (_cor0) ->
	%% Line 994
	apply 'type'/2
	    (_cor0, [])
'type'/2 =
    %% Line 996
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 998
	    apply 't_utype_elem'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 998
		apply 'local_defs'/2
		    (_cor0, [])
	    in  let <_cor5> =
		    %% Line 998
		    call 'erlang':'++'
			(_cor4, _cor3)
		in  %% Line 998
		    call 'xmerl':'export_simple_content'
			(_cor5, %% Line 999
				'xmerl_html')
'package'/2 =
    %% Line 1001
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement','package',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,Es,_cor34,_cor35,_cor36},Options> when 'true' ->
	      let <Opts> =
		  %% Line 1002
		  apply 'init_opts'/2
		      (E, Options)
	      in  let <Name> =
		      %% Line 1003
		      apply 'get_text'/2
			  ('packageName', Es)
		  in  let <Title> =
			  %% Line 1004
			  [[80|[97|[99|[107|[97|[103|[101|[32]]]]]]]]|[Name|[]]]
		      in  let <Desc> =
			      %% Line 1005
			      apply 'get_content'/2
				  ('description', Es)
			  in  let <FullDesc> =
				  %% Line 1007
				  apply 'get_content'/2
				      ('fullDescription', Desc)
			      in  let <_cor21> =
				      %% Line 1010
				      apply 'copyright'/1
					  (Es)
				  in  let <_cor19> =
					  %% Line 1011
					  apply 'deprecated'/2
					      (Es, [112|[97|[99|[107|[97|[103|[101]]]]]]])
				      in  let <_cor17> =
					      %% Line 1012
					      apply 'version'/1
						  (Es)
					  in  let <_cor15> =
						  %% Line 1013
						  apply 'since'/1
						      (Es)
					      in  let <_cor13> =
						      %% Line 1014
						      apply 'authors'/1
							  (Es)
						  in  let <_cor11> =
							  %% Line 1015
							  apply 'references'/1
							      (Es)
						      in  let <_cor9> =
							      %% Line 1016
							      apply 'sees'/1
								  (Es)
							  in  let <_cor7> =
								  %% Line 1017
								  apply 'todos'/1
								      (Es)
							      in  let <_cor8> =
								      %% Line 1018
								      call 'erlang':'++'
									  (_cor7, FullDesc)
								  in  let <_cor10> =
									  %% Line 1017
									  call 'erlang':'++'
									      (_cor9, _cor8)
								      in  let <_cor12> =
									      %% Line 1016
									      call 'erlang':'++'
										  (_cor11, _cor10)
									  in  let <_cor14> =
										  %% Line 1015
										  call 'erlang':'++'
										      (_cor13, _cor12)
									      in  let <_cor16> =
										      %% Line 1014
										      call 'erlang':'++'
											  (_cor15, _cor14)
										  in  let <_cor18> =
											  %% Line 1013
											  call 'erlang':'++'
											      (_cor17, _cor16)
										      in  let <_cor20> =
											      %% Line 1012
											      call 'erlang':'++'
												  (_cor19, _cor18)
											  in  let <_cor22> =
												  %% Line 1011
												  call 'erlang':'++'
												      (_cor21, _cor20)
											      in  let <Body> =
												      %% Line 1008
												      [[10]|[{'h1',[Title|[]]}|%% Line 1010
															       [[10]|_cor22]]]
												  in  let <_cor24> =
													  %% Line 1019
													  apply 'stylesheet'/1
													      (Opts)
												      in  let <XML> =
													      %% Line 1019
													      apply 'xhtml'/3
														  (Title, _cor24, Body)
													  in  %% Line 1020
													      call 'xmerl':'export_simple'
														  (XML, 'xmerl_html', [])
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'package',2}}] )
	    -| ['compiler_generated'] )
	end
'overview'/2 =
    %% Line 1022
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement','overview',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,Es,_cor40,_cor41,_cor42},Options> when 'true' ->
	      let <Opts> =
		  %% Line 1023
		  apply 'init_opts'/2
		      (E, Options)
	      in  let <_cor3> =
		      %% Line 1024
		      apply 'get_text'/2
			  ('title', Es)
		  in  let <Title> =
			  %% Line 1024
			  [_cor3|[]]
		      in  let <Desc> =
			      %% Line 1025
			      apply 'get_content'/2
				  ('description', Es)
			  in  let <FullDesc> =
				  %% Line 1027
				  apply 'get_content'/2
				      ('fullDescription', Desc)
			      in  let <_cor27> =
				      %% Line 1028
				      apply 'navigation'/1
					  ([116|[111|[112]]])
				  in  let <_cor24> =
					  %% Line 1031
					  apply 'copyright'/1
					      (Es)
				      in  let <_cor22> =
					      %% Line 1032
					      apply 'version'/1
						  (Es)
					  in  let <_cor20> =
						  %% Line 1033
						  apply 'since'/1
						      (Es)
					      in  let <_cor18> =
						      %% Line 1034
						      apply 'authors'/1
							  (Es)
						  in  let <_cor16> =
							  %% Line 1035
							  apply 'references'/1
							      (Es)
						      in  let <_cor14> =
							      %% Line 1036
							      apply 'sees'/1
								  (Es)
							  in  let <_cor12> =
								  %% Line 1037
								  apply 'todos'/1
								      (Es)
							      in  let <_cor8> =
								      %% Line 1040
								      apply 'navigation'/1
									  ([98|[111|[116|[116|[111|[109]]]]]])
								  in  let <_cor7> =
									  %% Line 1041
									  apply 'timestamp'/0
									      ()
								      in  let <_cor9> =
									      %% Line 1041
									      call 'erlang':'++'
										  (_cor8, _cor7)
									  in  let <_cor10> =
										  %% Line 1040
										  [[10]|['hr'|_cor9]]
									      in  let <_cor11> =
										      %% Line 1039
										      call 'erlang':'++'
											  (FullDesc, _cor10)
										  in  let <_cor13> =
											  %% Line 1038
											  call 'erlang':'++'
											      (_cor12, _cor11)
										      in  let <_cor15> =
											      %% Line 1037
											      call 'erlang':'++'
												  (_cor14, _cor13)
											  in  let <_cor17> =
												  %% Line 1036
												  call 'erlang':'++'
												      (_cor16, _cor15)
											      in  let <_cor19> =
												      %% Line 1035
												      call 'erlang':'++'
													  (_cor18, _cor17)
												  in  let <_cor21> =
													  %% Line 1034
													  call 'erlang':'++'
													      (_cor20, _cor19)
												      in  let <_cor23> =
													      %% Line 1033
													      call 'erlang':'++'
														  (_cor22, _cor21)
													  in  let <_cor25> =
														  %% Line 1032
														  call 'erlang':'++'
														      (_cor24, _cor23)
													      in  let <_cor26> =
														      %% Line 1029
														      [[10]|[{'h1',[Title|[]]}|%% Line 1031
																	       [[10]|_cor25]]]
														  in  let <Body> =
															  %% Line 1029
															  call 'erlang':'++'
															      (_cor27, _cor26)
														      in  let <Encoding> =
															      %% Line 1042
															      apply 'get_attrval'/2
																  ('encoding', E)
															  in  let <_cor30> =
																  %% Line 1043
																  apply 'stylesheet'/1
																      (Opts)
															      in  let <XML> =
																      %% Line 1043
																      apply 'xhtml'/4
																	  (Title, _cor30, Body, Encoding)
																  in  %% Line 1044
																      call 'xmerl':'export_simple'
																	  (XML, 'xmerl_html', [])
	  ( <_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32})
		  -| [{'function_name',{'overview',2}}] )
	    -| ['compiler_generated'] )
	end
'ot_utype'/1 =
    %% Line 1048
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      %% Line 1049
	      apply 'ot_utype_elem'/1
		  (E)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ot_utype',1}}] )
	    -| ['compiler_generated'] )
	end
'ot_utype_elem'/1 =
    %% Line 1051
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,Es,_cor14,_cor15,_cor16}> when 'true' ->
	      %% Line 1052
	      case apply 'get_attrval'/2
		       ('name', E) of
		%% Line 1053
		<[]> when 'true' ->
		    apply 'ot_type'/1
			(Es)
		%% Line 1054
		<N> when 'true' ->
		    let <_cor1> =
			%% Line 1055
			call 'erlang':'list_to_atom'
			    (N)
		    in  let <Name> = {%% Line 1055
			     'var',%% Line 1055
				   0,_cor1}
			in  let <T> =
				%% Line 1056
				apply 'ot_type'/1
				    (Es)
			    in  %% Line 1057
				case T of
				  %% Line 1058
				  <_cor17>
				      when call 'erlang':'=:='
					    (T,
					     Name) ->
				      T
				  %% Line 1059
				  <_cor18> when 'true' ->
				      {'ann_type',0,[Name|[T|[]]]}
				end
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'ot_utype_elem',1}}] )
	    -| ['compiler_generated'] )
	end
'ot_type'/1 =
    %% Line 1063
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement','typevar',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}|[]]> when 'true' ->
	      %% Line 1064
	      apply 'ot_var'/1
		  (E)
	  %% Line 1065
	  <[E = {'xmlElement','atom',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}|[]]> when 'true' ->
	      %% Line 1066
	      apply 'ot_atom'/1
		  (E)
	  %% Line 1067
	  <[E = {'xmlElement','integer',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}|[]]> when 'true' ->
	      %% Line 1068
	      apply 'ot_integer'/1
		  (E)
	  %% Line 1069
	  <[E = {'xmlElement','range',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}|[]]> when 'true' ->
	      %% Line 1070
	      apply 'ot_range'/1
		  (E)
	  %% Line 1071
	  <[E = {'xmlElement','binary',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}|[]]> when 'true' ->
	      %% Line 1072
	      apply 'ot_binary'/1
		  (E)
	  %% Line 1073
	  <[E = {'xmlElement','float',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}|[]]> when 'true' ->
	      %% Line 1074
	      apply 'ot_float'/1
		  (E)
	  %% Line 1075
	  <[{'xmlElement','nil',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}|[]]> when 'true' ->
	      %% Line 1076
	      apply 'ot_nil'/0
		  ()
	  %% Line 1077
	  <[{'xmlElement','paren',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,Es,_cor78,_cor79,_cor80}|[]]> when 'true' ->
	      %% Line 1078
	      apply 'ot_paren'/1
		  (Es)
	  %% Line 1079
	  <[{'xmlElement','list',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,Es,_cor87,_cor88,_cor89}|[]]> when 'true' ->
	      %% Line 1080
	      apply 'ot_list'/1
		  (Es)
	  %% Line 1081
	  <[{'xmlElement','nonempty_list',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,Es,_cor96,_cor97,_cor98}|[]]> when 'true' ->
	      %% Line 1082
	      apply 'ot_nonempty_list'/1
		  (Es)
	  %% Line 1083
	  <[{'xmlElement','tuple',_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,Es,_cor105,_cor106,_cor107}|[]]> when 'true' ->
	      %% Line 1084
	      apply 'ot_tuple'/1
		  (Es)
	  %% Line 1085
	  <[{'xmlElement','fun',_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,Es,_cor114,_cor115,_cor116}|[]]> when 'true' ->
	      %% Line 1086
	      apply 'ot_fun'/1
		  (Es)
	  %% Line 1087
	  <[{'xmlElement','record',_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,Es,_cor123,_cor124,_cor125}|[]]> when 'true' ->
	      %% Line 1088
	      apply 'ot_record'/1
		  (Es)
	  %% Line 1089
	  <[{'xmlElement','abstype',_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,Es,_cor132,_cor133,_cor134}|[]]> when 'true' ->
	      %% Line 1090
	      apply 'ot_abstype'/1
		  (Es)
	  %% Line 1091
	  <[{'xmlElement','union',_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,Es,_cor141,_cor142,_cor143}|[]]> when 'true' ->
	      %% Line 1092
	      apply 'ot_union'/1
		  (Es)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ot_type',1}}] )
	    -| ['compiler_generated'] )
	end
'ot_var'/1 =
    %% Line 1094
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1095
	    apply 'get_attrval'/2
		('name', _cor0)
	in  let <_cor2> =
		%% Line 1095
		call 'erlang':'list_to_atom'
		    (_cor1)
	    in  %% Line 1095
		{'var',0,_cor2}
'ot_atom'/1 =
    %% Line 1097
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1098
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 1098
	    case call 'erl_scan':'string'
		     (_cor1, 0) of
	      <{'ok',[Atom|[]],_cor4}> when 'true' ->
		  %% Line 1099
		  Atom
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'ot_integer'/1 =
    %% Line 1101
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1102
	    apply 'get_attrval'/2
		('value', _cor0)
	in  let <_cor2> =
		%% Line 1102
		call 'erlang':'list_to_integer'
		    (_cor1)
	    in  %% Line 1102
		{'integer',0,_cor2}
'ot_range'/1 =
    %% Line 1104
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1105
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 1105
	    case call 'string':'tokens'
		     (_cor1, [46]) of
	      <[I1|[I2|[]]]> when 'true' ->
		  let <_cor3> =
		      %% Line 1106
		      call 'erlang':'list_to_integer'
			  (I1)
		  in  let <_cor4> =
			  %% Line 1107
			  call 'erlang':'list_to_integer'
			      (I2)
		      in  %% Line 1106
			  {'type',0,'range',[{'integer',0,_cor3}|%% Line 1107
								 [{'integer',0,_cor4}|[]]]}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'ot_binary'/1 =
    %% Line 1109
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1111
	    apply 'get_attrval'/2
		('value', _cor0)
	in  let <Base,Unit> =
		%% Line 1111
		case call 'string':'tokens'
			 (_cor1, [44|[58|[42|[62|[60]]]]]) of
		  %% Line 1112
		  <[]> when 'true' ->
		      %% Line 1113
		      <0,0>
		  %% Line 1114
		  <[[95]|[B|[]]]> when 'true' ->
		      let <_cor2> =
			  %% Line 1115
			  call 'erlang':'list_to_integer'
			      (B)
		      in  <_cor2,%% Line 1115
				 0>
		  %% Line 1116
		  <[[95]|[[95]|[U|[]]]]> when 'true' ->
		      let <_cor3> =
			  %% Line 1117
			  call 'erlang':'list_to_integer'
			      (U)
		      in  %% Line 1117
			  <0,_cor3>
		  %% Line 1118
		  <[[95]|[B|[_cor10|[[95]|[U|[]]]]]]> when 'true' ->
		      let <_cor5> =
			  %% Line 1119
			  call 'erlang':'list_to_integer'
			      (B)
		      in  let <_cor4> =
			      %% Line 1119
			      call 'erlang':'list_to_integer'
				  (U)
			  in  <_cor5,_cor4>
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 1121
		{'type',0,'binary',[{'integer',0,Base}|[{'integer',0,Unit}|[]]]}
'ot_float'/1 =
    %% Line 1123
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1124
	    apply 'get_attrval'/2
		('value', _cor0)
	in  let <_cor2> =
		%% Line 1124
		call 'erlang':'list_to_float'
		    (_cor1)
	    in  %% Line 1124
		{'float',0,_cor2}
'ot_nil'/0 =
    %% Line 1126
    fun () ->
	%% Line 1127
	{'nil',0}
'ot_paren'/1 =
    %% Line 1129
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1130
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 1130
		apply 'ot_utype'/1
		    (_cor1)
	    in  %% Line 1130
		{'paren_type',0,[_cor2|[]]}
'ot_list'/1 =
    %% Line 1132
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1133
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 1133
		apply 'ot_utype'/1
		    (_cor1)
	    in  %% Line 1133
		{'type',0,'list',[_cor2|[]]}
'ot_nonempty_list'/1 =
    %% Line 1135
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1136
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 1136
		apply 'ot_utype'/1
		    (_cor1)
	    in  %% Line 1136
		{'type',0,'nonempty_list',[_cor2|[]]}
'ot_tuple'/1 =
    %% Line 1138
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 1139
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[E|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'ot_utype_elem'/1
					(E)
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 1139
	    {'type',0,'tuple',_cor6}
'ot_fun'/1 =
    %% Line 1141
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1142
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <Range> =
		%% Line 1142
		apply 'ot_utype'/1
		    (_cor1)
	    in  let <_cor9> =
		    %% Line 1143
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[A|_cor4]> when 'true' ->
					let <_cor7> =
					    apply 'ot_utype_elem'/1
						(A)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor5> =
			      apply 'get_content'/2
				  ('argtypes', _cor0)
			  in  apply 'lc$^0'/1
				  (_cor5)
		      -| ['list_comprehension'] )
		in  %% Line 1144
		    {'type',0,'fun',[{'type',0,'product',_cor9}|[Range|[]]]}
'ot_record'/1 =
    %% Line 1146
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1147
	    apply 'get_elem'/2
		('atom', _cor0)
	in  let <_cor2> =
		%% Line 1147
		apply 'ot_type'/1
		    (_cor1)
	    in  let <_cor9> =
		    %% Line 1148
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[F|_cor4]> when 'true' ->
					let <_cor7> =
					    apply 'ot_field'/1
						(F)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor5> =
			      apply 'get_elem'/2
				  ('field', _cor0)
			  in  apply 'lc$^0'/1
				  (_cor5)
		      -| ['list_comprehension'] )
		in  %% Line 1147
		    {'type',0,'record',[_cor2|_cor9]}
'ot_field'/1 =
    %% Line 1150
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Es,_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor1> =
		  %% Line 1152
		  apply 'get_elem'/2
		      ('atom', Es)
	      in  let <_cor2> =
		      %% Line 1152
		      apply 'ot_type'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 1152
			  apply 'get_elem'/2
			      ('type', Es)
		      in  let <_cor4> =
			      %% Line 1152
			      apply 'ot_utype'/1
				  (_cor3)
			  in  %% Line 1151
			      {'type',0,'field_type',%% Line 1152
						     [_cor2|[_cor4|[]]]}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'ot_field',1}}] )
	    -| ['compiler_generated'] )
	end
'ot_abstype'/1 =
    %% Line 1154
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 1155
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <_cor7> =
		%% Line 1156
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[Elem|_cor2]> when 'true' ->
				    let <_cor5> =
					apply 'ot_utype_elem'/1
					    (Elem)
				    in  let <_cor6> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [_cor5|_cor6]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor3> =
			  apply 'get_elem'/2
			      ('type', _cor0)
		      in  apply 'lc$^0'/1
			      (_cor3)
		  -| ['list_comprehension'] )
	    in  %% Line 1155
		apply 'ot_name'/2
		    (_cor8, _cor7)
'ot_union'/1 =
    %% Line 1158
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 1159
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[E|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'ot_utype_elem'/1
					(E)
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 1159
	    {'type',0,'union',_cor6}
'ot_name'/2 =
    %% Line 1161
    fun (_cor1,_cor0) ->
	%% Line 1162
	case apply 'ot_name'/1
		 (_cor1) of
	  %% Line 1163
	  <[Mod|[[58]|[Atom|[]]]]> when 'true' ->
	      let <_cor2> =
		  %% Line 1164
		  call 'erlang':'list_to_atom'
		      (Mod)
	      in  let <_cor3> =
		      %% Line 1165
		      call 'erlang':'list_to_atom'
			  (Atom)
		  in  %% Line 1164
		      {'remote_type',0,[{'atom',0,_cor2}|%% Line 1165
							 [{'atom',0,_cor3}|[_cor0|[]]]]}
	  %% Line 1166
	  <[116|[117|[112|[108|[101]]]]]>
	      when call 'erlang':'=:='
		    (_cor0,
		     []) ->
	      %% Line 1167
	      {'type',0,'tuple','any'}
	  %% Line 1168
	  <Atom> when 'true' ->
	      let <_cor4> =
		  %% Line 1169
		  call 'erlang':'list_to_atom'
		      (Atom)
	      in  %% Line 1169
		  {'type',0,_cor4,_cor0}
	end
'ot_name'/1 =
    %% Line 1172
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      let <Atom> =
		  %% Line 1173
		  apply 'get_attrval'/2
		      ('name', E)
	      in  %% Line 1174
		  case apply 'get_attrval'/2
			   ('module', E) of
		    %% Line 1175
		    <[]> when 'true' ->
			Atom
		    %% Line 1176
		    <M> when 'true' ->
			%% Line 1177
			case apply 'get_attrval'/2
				 ('app', E) of
			  %% Line 1178
			  <[]> when 'true' ->
			      %% Line 1179
			      [M|[[58]|[Atom|[]]]]
			  %% Line 1180
			  <A> when 'true' ->
			      let <_cor2> =
				  %% Line 1181
				  [47|M]
			      in  let <_cor3> =
				      %% Line 1181
				      call 'erlang':'++'
					  (A, _cor2)
				  in  let <_cor4> =
					  %% Line 1181
					  [47|[47|_cor3]]
				      in  %% Line 1181
					  [_cor4|[[58]|[Atom|[]]]]
			end
		  end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'ot_name',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc_layout')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc_layout', _cor0)
end