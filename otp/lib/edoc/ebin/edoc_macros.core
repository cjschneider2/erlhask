module 'edoc_macros' ['check_defs'/1,
		      'expand_tags'/3,
		      'module_info'/0,
		      'module_info'/1,
		      'std_macros'/1]
    attributes [%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','context'},[{'record_field',32,{'atom',32,'dir'},{'string',32,[]}}|[{'record_field',33,{'atom',33,'env'}}|[{'record_field',34,{'atom',34,'opts'},{'nil',34}}]]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','doclet_gen'},[{'record_field',51,{'atom',51,'sources'},{'nil',51}}|[{'record_field',52,{'atom',52,'app'},{'nil',52}}|[{'record_field',53,{'atom',53,'packages'},{'nil',53}}|[{'record_field',54,{'atom',54,'modules'},{'nil',54}}|[{'record_field',55,{'atom',55,'filemap'}}]]]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','doclet_toc'},[{'record_field',61,{'atom',61,'paths'}}|[{'record_field',62,{'atom',62,'indir'}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','module'},[{'record_field',56,{'atom',56,'name'},{'nil',56}}|[{'record_field',57,{'atom',57,'parameters'},{'atom',57,'none'}}|[{'record_field',58,{'atom',58,'functions'},{'nil',58}}|[{'record_field',59,{'atom',59,'exports'},{'nil',59}}|[{'record_field',60,{'atom',60,'attributes'},{'nil',60}}|[{'record_field',61,{'atom',61,'records'},{'nil',61}}|[{'record_field',62,{'atom',62,'encoding'},{'atom',62,'latin1'}}]]]]]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','env'},[{'record_field',67,{'atom',67,'module'},{'nil',67}}|[{'record_field',68,{'atom',68,'package'},{'nil',68}}|[{'record_field',69,{'atom',69,'root'},{'string',69,[]}}|[{'record_field',70,{'atom',70,'file_suffix'}}|[{'record_field',71,{'atom',71,'package_summary'}}|[{'record_field',72,{'atom',72,'apps'}}|[{'record_field',73,{'atom',73,'modules'}}|[{'record_field',74,{'atom',74,'packages'}}|[{'record_field',75,{'atom',75,'app_default'}}|[{'record_field',76,{'atom',76,'macros'},{'nil',76}}|[{'record_field',77,{'atom',77,'includes'},{'nil',77}}]]]]]]]]]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','comment'},[{'record_field',85,{'atom',85,'line'},{'integer',85,0}}|[{'record_field',85,{'atom',85,'text'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','entry'},[{'record_field',96,{'atom',96,'name'}}|[{'record_field',96,{'atom',96,'args'},{'nil',96}}|[{'record_field',96,{'atom',96,'line'},{'integer',96,0}}|[{'record_field',96,{'atom',96,'export'}}|[{'record_field',96,{'atom',96,'data'}}]]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','tag'},[{'record_field',105,{'atom',105,'name'}}|[{'record_field',105,{'atom',105,'line'},{'integer',105,0}}|[{'record_field',105,{'atom',105,'origin'},{'atom',105,'comment'}}|[{'record_field',105,{'atom',105,'data'}}]]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','t_spec'},[{'record_field',30,{'atom',30,'name'}}|[{'record_field',30,{'atom',30,'type'}}|[{'record_field',30,{'atom',30,'defs'},{'nil',30}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','t_typedef'},[{'record_field',42,{'atom',42,'name'}}|[{'record_field',42,{'atom',42,'args'}}|[{'record_field',42,{'atom',42,'type'}}|[{'record_field',43,{'atom',43,'defs'},{'nil',43}}]]]],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','t_throws'},[{'record_field',48,{'atom',48,'type'}}|[{'record_field',48,{'atom',48,'defs'},{'nil',48}}]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','t_def'},[{'record_field',53,{'atom',53,'name'}}|[{'record_field',53,{'atom',53,'type'}}]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','t_name'},[{'record_field',58,{'atom',58,'app'},{'nil',58}}|[{'record_field',59,{'atom',59,'module'},{'nil',59}}|[{'record_field',60,{'atom',60,'name'},{'nil',60}}]]],[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{{'record','t_var'},[{'record_field',74,{'atom',74,'a'},{'nil',74}}|[{'record_field',74,{'atom',74,'name'},{'nil',74}}]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','t_type'},[{'record_field',80,{'atom',80,'a'},{'nil',80}}|[{'record_field',81,{'atom',81,'name'}}|[{'record_field',82,{'atom',82,'args'},{'nil',82}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','t_union'},[{'record_field',87,{'atom',87,'a'},{'nil',87}}|[{'record_field',87,{'atom',87,'types'},{'nil',87}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','t_fun'},[{'record_field',93,{'atom',93,'a'},{'nil',93}}|[{'record_field',93,{'atom',93,'args'}}|[{'record_field',93,{'atom',93,'range'}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','t_tuple'},[{'record_field',98,{'atom',98,'a'},{'nil',98}}|[{'record_field',98,{'atom',98,'types'},{'nil',98}}]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','t_list'},[{'record_field',103,{'atom',103,'a'},{'nil',103}}|[{'record_field',103,{'atom',103,'type'}}]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','t_nil'},[{'record_field',107,{'atom',107,'a'},{'nil',107}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','t_nonempty_list'},[{'record_field',112,{'atom',112,'a'},{'nil',112}}|[{'record_field',112,{'atom',112,'type'}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','t_atom'},[{'record_field',117,{'atom',117,'a'},{'nil',117}}|[{'record_field',117,{'atom',117,'val'}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','t_integer'},[{'record_field',122,{'atom',122,'a'},{'nil',122}}|[{'record_field',122,{'atom',122,'val'}}]],[]}],
		%% Line 128
		'type' =
		    %% Line 128
		    [{{'record','t_integer_range'},[{'record_field',128,{'atom',128,'a'},{'nil',128}}|[{'record_field',128,{'atom',128,'from'}}|[{'record_field',128,{'atom',128,'to'}}]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','t_binary'},[{'record_field',134,{'atom',134,'a'},{'nil',134}}|[{'record_field',134,{'atom',134,'base_size'},{'integer',134,0}}|[{'record_field',134,{'atom',134,'unit_size'},{'integer',134,0}}]]],[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{{'record','t_float'},[{'record_field',139,{'atom',139,'a'},{'nil',139}}|[{'record_field',139,{'atom',139,'val'}}]],[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','t_record'},[{'record_field',145,{'atom',145,'a'},{'nil',145}}|[{'record_field',146,{'atom',146,'name'}}|[{'record_field',147,{'atom',147,'fields'},{'nil',147}}]]],[]}],
		%% Line 153
		'type' =
		    %% Line 153
		    [{{'record','t_field'},[{'record_field',153,{'atom',153,'a'},{'nil',153}}|[{'record_field',153,{'atom',153,'name'}}|[{'record_field',153,{'atom',153,'type'}}]]],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{{'record','t_paren'},[{'record_field',157,{'atom',157,'a'},{'nil',157}}|[{'record_field',157,{'atom',157,'type'}}]],[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','t_map'},[{'record_field',159,{'atom',159,'a'},{'nil',159}}|[{'record_field',159,{'atom',159,'types'},{'nil',159}}]],[]}],
		%% Line 160
		'type' =
		    %% Line 160
		    [{{'record','t_map_field'},[{'record_field',160,{'atom',160,'a'},{'nil',160}}|[{'record_field',160,{'atom',160,'k_type'}}|[{'record_field',160,{'atom',160,'v_type'}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','state'},[{'record_field',138,{'atom',138,'where'}}|[{'record_field',138,{'atom',138,'env'}}|[{'record_field',138,{'atom',138,'seen'}}]]],[]}],
		%% Line 318
		'type' =
		    %% Line 318
		    [{'line',{'remote_type',318,[{'atom',318,'erl_scan'}|[{'atom',318,'line'}|[[]]]]},[]}],
		%% Line 319
		'type' =
		    %% Line 319
		    [{'err',{'type',319,'union',[{'atom',319,'unterminated_macro'}|[{'atom',320,'macro_name'}|[{'type',321,'tuple',[{'atom',321,'macro_name'}|[{'type',321,'string',[]}]]}|[{'type',322,'tuple',[{'type',322,'string',[]}|[{'type',322,'list',[{'type',322,'string',[]}]}]]}]]]]},[]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'throw_error',2},[{'type',324,'fun',[{'type',324,'product',[{'type',324,'line',[]}|[{'type',324,'err',[]}]]}|[{'type',324,'no_return',[]}]]}]}]]
'std_macros'/1 =
    %% Line 38
    fun (_cor0) ->
	let <_cor23> =
	    %% Line 39
	    case <> of
	      <>
		  when ( try
			  ( case <> of
			      ( <>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_record'
									     -| ['compiler_generated'] )
					    (_cor0,
					     ( 'env'
					       -| ['compiler_generated'] ),
					     ( 12
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    let <_cor18> =
					( call 'erlang':'element'
					      (2, _cor0)
					  -| ['compiler_generated'] )
				    in  ( call 'erlang':'=:='
					      (_cor18, [])
					  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  []
	      %% Line 40
	      <> when 'true' ->
		  ( case _cor0 of
		      ( <( {'env',_rec0,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor22> =
				call 'erlang':'atom_to_list'
				    (_rec0)
			    in  [{'module',_cor22}|[]]
			-| ['compiler_generated'] )
		      ( <_cor35> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','env'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	in  let <_cor12> =
		%% Line 43
		case <> of
		  <>
		      when ( try
			      ( case <> of
				  ( <>
					when ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'is_record'
										 -| ['compiler_generated'] )
						(_cor0,
						 ( 'env'
						   -| ['compiler_generated'] ),
						 ( 12
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] ) ->
					let <_cor7> =
					    ( call 'erlang':'element'
						  (3, _cor0)
					      -| ['compiler_generated'] )
					in  ( call 'erlang':'=:='
						  (_cor7, [])
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] ) ->
		      []
		  %% Line 44
		  <> when 'true' ->
		      ( case _cor0 of
			  ( <( {'env',_cor36,_rec1,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor11> =
				    call 'erlang':'atom_to_list'
					(_rec1)
				in  [{'package',_cor11}|[]]
			    -| ['compiler_generated'] )
			  ( <_cor46> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','env'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		end
	    in  %% Line 48
		( case _cor0 of
		    ( <( {'env',_cor47,_cor48,_rec2,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor13> =
			      call 'erlang':'++'
				  (_cor12, [{'date',( 'date_macro'/3
						      -| [{'id',{0,0,'-std_macros/1-fun-0-'}}] )}|[{'docRoot',_rec2}|%% Line 49
														     [{'link',( 'link_macro'/3
																-| [{'id',{0,0,'-std_macros/1-fun-1-'}}] )}|%% Line 50
																					    [{'section',( 'section_macro'/3
																							  -| [{'id',{0,0,'-std_macros/1-fun-2-'}}] )}|%% Line 51
																												      [{'time',( 'time_macro'/3
																														 -| [{'id',{0,0,'-std_macros/1-fun-3-'}}] )}|%% Line 52
																																			     [{'type',( 'type_macro'/3
																																					-| [{'id',{0,0,'-std_macros/1-fun-4-'}}] )}|%% Line 53
																																										    [{'version',( 'version_macro'/3
																																												  -| [{'id',{0,0,'-std_macros/1-fun-5-'}}] )}|[]]]]]]]])
			  in  call 'erlang':'++'
				  (_cor23, _cor13)
		      -| ['compiler_generated'] )
		    ( <_cor57> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','env'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'check_defs'/1 =
    %% Line 58
    fun (_cor0) ->
	case _cor0 of
	  <[{K,D}|Ds]>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(K)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (D)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 59
	      apply 'check_defs'/1
		  (Ds)
	  %% Line 60
	  <[X|_X_Ds]> when 'true' ->
	      do  %% Line 61
		  call 'edoc_report':'report'
		      ([98|[97|[100|[32|[109|[97|[99|[114|[111|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]], [X|[10]])
		  %% Line 62
		  call 'erlang':'exit'
		      ('error')
	  %% Line 63
	  <[]> when 'true' ->
	      %% Line 64
	      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'check_defs',1}}] )
	    -| ['compiler_generated'] )
	end
'date_macro'/3 =
    %% Line 70
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 71
	    call 'erlang':'date'
		()
	in  %% Line 71
	    call 'edoc_lib':'datestr'
		(_cor3)
'time_macro'/3 =
    %% Line 73
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 74
	    call 'erlang':'time'
		()
	in  %% Line 74
	    call 'edoc_lib':'timestr'
		(_cor3)
'version_macro'/3 =
    %% Line 76
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 77
	    apply 'date_macro'/3
		(_cor2, _cor1, _cor0)
	in  let <_cor3> =
		%% Line 78
		apply 'time_macro'/3
		    (_cor2, _cor1, _cor0)
	    in  let <_cor4> =
		    %% Line 78
		    [32|_cor3]
		in  %% Line 78
		    call 'erlang':'++'
			(_cor5, _cor4)
'link_macro'/3 =
    %% Line 80
    fun (_cor2,_cor1,_cor0) ->
	%% Line 81
	case call 'edoc_lib':'split_at_stop'
		 (_cor2) of
	  <{S1,S2}> when 'true' ->
	      let <Ref> =
		  %% Line 82
		  call 'edoc_parser':'parse_ref'
		      (S1, _cor1)
	      in  let <URI> =
		      %% Line 83
		      call 'edoc_refs':'get_uri'
			  (Ref, _cor0)
		  in  let <_cor7> =
			  %% Line 84
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (S2,
				       []) ->
				let <_cor6> =
				    call 'erlang':'++'
					(S1, [60|[47|[99|[111|[100|[101|[62]]]]]]])
				in  call 'erlang':'++'
					([60|[99|[111|[100|[101|[62]]]]]], _cor6)
			    %% Line 85
			    <> when 'true' ->
				S2
			  end
		      in  let <_cor10> =
			      %% Line 87
			      case call 'edoc_refs':'is_top'
				       (Ref, _cor0) of
				%% Line 88
				<'true'> when 'true' ->
				    [32|[116|[97|[114|[103|[101|[116|[61|[34|[95|[116|[111|[112|[34]]]]]]]]]]]]]]
				%% Line 89
				<'false'> when 'true' ->
				    []
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor12> =
				  %% Line 91
				  call 'io_lib':'fwrite'
				      ([60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[126|[116|[115|[62|[126|[116|[115|[60|[47|[97|[62]]]]]]]]]]]]]]]]]]]]]]]], %% Line 92
																					     [URI|[_cor10|[_cor7|[]]]])
			      in  %% Line 91
				  call 'lists':'flatten'
				      (_cor12)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'section_macro'/3 =
    %% Line 94
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 96
	    call 'edoc_lib':'strip_space'
		(_cor2)
	in  let <_cor4> =
		%% Line 96
		call 'lists':'reverse'
		    (_cor3)
	    in  let <_cor5> =
		    %% Line 95
		    call 'edoc_lib':'strip_space'
			(_cor4)
		in  let <S1> =
			%% Line 95
			call 'lists':'reverse'
			    (_cor5)
		    in  let <_cor7> =
			    %% Line 98
			    call 'edoc_lib':'to_label'
				(S1)
			in  let <_cor8> =
				%% Line 97
				call 'io_lib':'format'
				    ([60|[97|[32|[104|[114|[101|[102|[61|[34|[35|[126|[116|[115|[34|[62|[126|[116|[115|[60|[47|[97|[62]]]]]]]]]]]]]]]]]]]]]], %% Line 98
																			      [_cor7|[S1|[]]])
			    in  %% Line 97
				call 'lists':'flatten'
				    (_cor8)
'type_macro'/3 =
    %% Line 100
    fun (_cor2,_cor1,_cor0) ->
	let <S1> =
	    %% Line 101
	    [116|[40|[41|[61|_cor2]]]]
	in  %% Line 103
	    case call 'edoc_parser':'parse_typedef'
		     (S1, _cor1) of
	      <{{'t_typedef',_cor12,_cor13,T,_cor14},_cor15}> when 'true' ->
		  let <_cor6> =
		      %% Line 104
		      call 'edoc_data':'type'
			  (T, _cor0)
		  in  let <Txt> =
			  %% Line 104
			  call 'edoc_layout':'type'
			      (_cor6)
		      in  let <_cor8> =
			      %% Line 105
			      call 'io_lib':'fwrite'
				  ([60|[99|[111|[100|[101|[62|[126|[116|[115|[60|[47|[99|[111|[100|[101|[62]]]]]]]]]]]]]]]], [Txt|[]])
			  in  %% Line 105
			      call 'lists':'flatten'
				  (_cor8)
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'expand_tags'/3 =
    %% Line 110
    fun (_cor2,_cor1,_cor0) ->
	%% Line 111
	( case _cor1 of
	    ( <( {'env',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec3,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor5> =
		      call 'lists':'reverse'
			  (_rec3)
		  in  let <Defs> =
			  call 'dict':'from_list'
			      (_cor5)
		      in  %% Line 112
			  apply 'expand_tags'/4
			      (_cor2, Defs, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','env'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'expand_tags'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T = {'tag',_cor14,L,_cor15,Cs}|Ts],Defs,Env,Where> when 'true' ->
	      let <_rec4> =
		  %% Line 115
		  apply 'expand_tag'/5
		      (Cs, L, Defs, Env, Where)
	      in  let <_cor7> =
		      %% Line 115
		      call 'erlang':'setelement'
			  (5, T, _rec4)
		  in  let <_cor8> =
			  %% Line 116
			  apply 'expand_tags'/4
			      (Ts, Defs, Env, Where)
		      in  %% Line 115
			  [_cor7|_cor8]
	  %% Line 117
	  <[T|Ts],Defs,Env,Where> when 'true' ->
	      let <_cor9> =
		  %% Line 118
		  apply 'expand_tags'/4
		      (Ts, Defs, Env, Where)
	      in  %% Line 118
		  [T|_cor9]
	  %% Line 119
	  <[],_cor21,_cor22,_cor23> when 'true' ->
	      %% Line 120
	      []
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'expand_tags',4}}] )
	    -| ['compiler_generated'] )
	end
'expand_tag'/5 =
    %% Line 122
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    catch
		let <_cor5> =
		    %% Line 123
		    apply 'expand_text'/5
			(_cor4, _cor3, _cor2, _cor1, _cor0)
		in  %% Line 123
		    {'ok',_cor5}
	in  %% Line 123
	    case _cor6 of
	      %% Line 124
	      <{'ok',Cs1}> when 'true' ->
		  %% Line 125
		  call 'lists':'reverse'
		      (Cs1)
	      %% Line 126
	      <{'EXIT',R}> when 'true' ->
		  %% Line 127
		  call 'erlang':'exit'
		      (R)
	      %% Line 128
	      <{'error',L1,Error}> when 'true' ->
		  do  %% Line 129
		      call 'edoc_report':'error'
			  (L1, _cor0, Error)
		      %% Line 130
		      call 'erlang':'exit'
			  ('error')
	      %% Line 131
	      <Other> when 'true' ->
		  %% Line 132
		  call 'erlang':'throw'
		      (Other)
	    end
'expand_text'/5 =
    %% Line 140
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 143
	    call 'sets':'new'
		()
	in  let <St> =
		%% Line 141
		{'state',_cor0,_cor1,_cor5}
	    in  %% Line 144
		apply 'expand'/5
		    (_cor4, _cor3, _cor2, St, [])
'expand'/5 =
    %% Line 157
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[64|[64|Cs]],L,Defs,St,As> when 'true' ->
	      %% Line 158
	      apply 'expand'/5
		  (Cs, L, Defs, St, [64|As])
	  %% Line 159
	  <[64|[123|Cs]],L,Defs,St,As> when 'true' ->
	      %% Line 160
	      apply 'expand'/5
		  (Cs, L, Defs, St, [123|As])
	  %% Line 161
	  <[64|[125|Cs]],L,Defs,St,As> when 'true' ->
	      %% Line 162
	      apply 'expand'/5
		  (Cs, L, Defs, St, [125|As])
	  %% Line 163
	  <[123|[64|Cs]],L,Defs,St,As> when 'true' ->
	      %% Line 164
	      apply 'expand_macro'/5
		  (Cs, L, Defs, St, As)
	  %% Line 165
	  <[C = 10|Cs],L,Defs,St,As> when 'true' ->
	      let <_cor5> =
		  %% Line 166
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 166
		  apply 'expand'/5
		      (Cs, _cor5, Defs, St, [C|As])
	  %% Line 167
	  <[C|Cs],L,Defs,St,As> when 'true' ->
	      %% Line 168
	      apply 'expand'/5
		  (Cs, L, Defs, St, [C|As])
	  %% Line 169
	  <[],_cor11,_cor12,_cor13,As> when 'true' ->
	      %% Line 170
	      As
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'expand',5}}] )
	    -| ['compiler_generated'] )
	end
'expand_macro'/5 =
    %% Line 172
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 173
	case apply 'macro_name'/2
		 (_cor4, _cor3) of
	  <{M,Cs1,L1}> when 'true' ->
	      %% Line 174
	      case apply 'macro_content'/2
		       (Cs1, L1) of
		<{Arg,Cs2,L2}> when 'true' ->
		    let <As1> =
			%% Line 175
			apply 'expand_macro_def'/6
			    (M, Arg, _cor3, _cor2, _cor1, _cor0)
		    in  %% Line 176
			apply 'expand'/5
			    (Cs2, L2, _cor2, _cor1, As1)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'expand_macro_def'/6 =
    %% Line 185
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 186
	( case _cor1 of
	    ( <( {'state',_cor31,_cor32,_rec6}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 187
		  case call 'sets':'is_element'
			   (_cor5, _rec6) of
		    %% Line 188
		    <'true'> when 'true' ->
			%% Line 189
			apply 'throw_error'/2
			    (_cor3, {[114|[101|[99|[117|[114|[115|[105|[118|[101|[32|[109|[97|[99|[114|[111|[32|[101|[120|[112|[97|[110|[115|[105|[111|[110|[32|[111|[102|[32|[123|[64|[126|[115|[125|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 190
																													     [_cor5|[]]})
		    %% Line 191
		    <'false'> when 'true' ->
			let <_cor9> =
			    %% Line 192
			    apply 'expand'/5
				(_cor4, _cor3, _cor2, _cor1, [])
			in  let <Arg1> =
				%% Line 192
				call 'lists':'reverse'
				    (_cor9)
			    in  let <Defs1> =
				    %% Line 193
				    call 'dict':'store'
					('?', Arg1, _cor2)
				in  let <_rec7> =
					%% Line 194
					call 'sets':'add_element'
					    (_cor5, _rec6)
				    in  let <_cor15> =
					    %% Line 194
					    call 'erlang':'setelement'
						(4, _cor1, _rec7)
					in  %% Line 195
					    case call 'dict':'find'
						     (_cor5, _cor2) of
					      %% Line 196
					      <{'ok',Def}> when 'true' ->
						  let <_cor19> =
						      %% Line 197
						      case <> of
							<>
							    when call 'erlang':'is_function'
								  (Def) ->
							    %% Line 198
							    ( case _cor15 of
								( <( {'state',_cor38,_rec9,_cor39}
								     -| ['compiler_generated'] )> when 'true' ->
								      apply Def
									  (Arg1, _cor3, _rec9)
								  -| ['compiler_generated'] )
								( <_cor40> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','state'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							%% Line 199
							<>
							    when call 'erlang':'is_list'
								  (Def) ->
							    %% Line 200
							    Def
							( <> when 'true' ->
							      primop 'match_fail'
								  ('if_clause')
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 202
						      apply 'expand'/5
							  (_cor19, _cor3, Defs1, _cor15, _cor0)
					      %% Line 203
					      <'error'> when 'true' ->
						  %% Line 204
						  ( case _cor15 of
						      ( <( {'state',_rec10,_cor41,_cor42}
							   -| ['compiler_generated'] )> when 'true' ->
							    do  call 'edoc_report':'warning'
								    (_cor3, _rec10, %% Line 205
										    [117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[123|[64|[126|[115|[125|[46]]]]]]]]]]]]]]]]]]]]]], %% Line 205
																										   [_cor5|[]])
								%% Line 206
								[63|[63]]
							-| ['compiler_generated'] )
						      ( <_cor43> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','state'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      ( <_cor23> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor23})
						-| ['compiler_generated'] )
					    end
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor24})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor33> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'macro_name'/2 =
    %% Line 216
    fun (_cor1,_cor0) ->
	%% Line 217
	apply 'macro_name'/3
	    (_cor1, [], _cor0)
'macro_name'/3 =
    %% Line 219
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],As,L>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 220
	      apply 'macro_name_1'/3
		  (Cs, [C|As], L)
	  %% Line 221
	  <[C|Cs],As,L>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 222
	      apply 'macro_name_1'/3
		  (Cs, [C|As], L)
	  %% Line 223
	  <[C|Cs],As,L>
	      when try
		    let <_cor7> =
			call 'erlang':'>='
			    (C, 192)
		    in  let <_cor8> =
			    call 'erlang':'=<'
				(C, 255)
			in  let <_cor9> =
				%% Line 224
				call 'erlang':'=/='
				    (C, 215)
			    in  let <_cor10> =
				    %% Line 224
				    call 'erlang':'=/='
					(C, 247)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 225
	      apply 'macro_name_1'/3
		  (Cs, [C|As], L)
	  %% Line 226
	  <[95|Cs],As,L> when 'true' ->
	      %% Line 227
	      apply 'macro_name_1'/3
		  (Cs, [95|As], L)
	  %% Line 228
	  <[63|Cs],As,L> when 'true' ->
	      %% Line 229
	      apply 'macro_name_1'/3
		  (Cs, [63|As], L)
	  %% Line 230
	  <[32|_X_Cs],_X_As,L> when 'true' ->
	      %% Line 231
	      apply 'throw_error'/2
		  (L, 'macro_name')
	  %% Line 232
	  <[9|_X_Cs],_X_As,L> when 'true' ->
	      %% Line 233
	      apply 'throw_error'/2
		  (L, 'macro_name')
	  %% Line 234
	  <[10|_X_Cs],_X_As,L> when 'true' ->
	      %% Line 235
	      apply 'throw_error'/2
		  (L, 'macro_name')
	  %% Line 236
	  <[C|_X_Cs],As,L> when 'true' ->
	      %% Line 237
	      apply 'throw_error'/2
		  (L, {'macro_name',[C|As]})
	  %% Line 238
	  <[],_X_As,L> when 'true' ->
	      %% Line 239
	      apply 'throw_error'/2
		  (L, 'macro_name')
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'macro_name',3}}] )
	    -| ['compiler_generated'] )
	end
'macro_name_1'/3 =
    %% Line 241
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],As,L>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 242
	      apply 'macro_name_1'/3
		  (Cs, [C|As], L)
	  %% Line 243
	  <[C|Cs],As,L>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 244
	      apply 'macro_name_1'/3
		  (Cs, [C|As], L)
	  %% Line 245
	  <[C|Cs],As,L>
	      when let <_cor7> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 246
	      apply 'macro_name_1'/3
		  (Cs, [C|As], L)
	  %% Line 247
	  <[C|Cs],As,L>
	      when try
		    let <_cor9> =
			call 'erlang':'>='
			    (C, 192)
		    in  let <_cor10> =
			    call 'erlang':'=<'
				(C, 255)
			in  let <_cor11> =
				%% Line 248
				call 'erlang':'=/='
				    (C, 215)
			    in  let <_cor12> =
				    %% Line 248
				    call 'erlang':'=/='
					(C, 247)
				in  let <_cor13> =
					call 'erlang':'and'
					    (_cor11, _cor12)
				    in  let <_cor14> =
					    call 'erlang':'and'
						(_cor10, _cor13)
					in  call 'erlang':'and'
						(_cor9, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 249
	      apply 'macro_name_1'/3
		  (Cs, [C|As], L)
	  %% Line 250
	  <[95|Cs],As,L> when 'true' ->
	      %% Line 251
	      apply 'macro_name_1'/3
		  (Cs, [95|As], L)
	  %% Line 252
	  <[32|Cs],As,L> when 'true' ->
	      %% Line 253
	      apply 'macro_name_2'/3
		  (Cs, As, L)
	  %% Line 254
	  <[9|Cs],As,L> when 'true' ->
	      %% Line 255
	      apply 'macro_name_2'/3
		  (Cs, As, L)
	  %% Line 256
	  <[10|Cs],As,L> when 'true' ->
	      let <_cor15> =
		  %% Line 257
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 257
		  apply 'macro_name_2'/3
		      (Cs, As, _cor15)
	  %% Line 258
	  <Cs = [125|_cor19],As,L> when 'true' ->
	      %% Line 259
	      apply 'macro_name_3'/3
		  (Cs, As, L)
	  %% Line 260
	  <[C|_X_Cs],As,L> when 'true' ->
	      %% Line 261
	      apply 'throw_error'/2
		  (L, {'macro_name',[C|As]})
	  %% Line 262
	  <[],_X_As,L> when 'true' ->
	      %% Line 263
	      apply 'throw_error'/2
		  (L, 'unterminated_macro')
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'macro_name_1',3}}] )
	    -| ['compiler_generated'] )
	end
'macro_name_2'/3 =
    %% Line 265
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[32|Cs],As,L> when 'true' ->
	      %% Line 266
	      apply 'macro_name_2'/3
		  (Cs, As, L)
	  %% Line 267
	  <[9|Cs],As,L> when 'true' ->
	      %% Line 268
	      apply 'macro_name_2'/3
		  (Cs, As, L)
	  %% Line 269
	  <[10|Cs],As,L> when 'true' ->
	      let <_cor3> =
		  %% Line 270
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 270
		  apply 'macro_name_2'/3
		      (Cs, As, _cor3)
	  %% Line 271
	  <Cs = [_cor7|_cor8],As,L> when 'true' ->
	      %% Line 272
	      apply 'macro_name_3'/3
		  (Cs, As, L)
	  %% Line 273
	  <[],_X_As,L> when 'true' ->
	      %% Line 274
	      apply 'throw_error'/2
		  (L, 'unterminated_macro')
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'macro_name_2',3}}] )
	    -| ['compiler_generated'] )
	end
'macro_name_3'/3 =
    %% Line 276
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 277
	    call 'lists':'reverse'
		(_cor1)
	in  let <_cor4> =
		%% Line 277
		call 'erlang':'list_to_atom'
		    (_cor3)
	    in  %% Line 277
		{_cor4,_cor2,_cor0}
'macro_content'/2 =
    %% Line 284
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    catch
		let <_cor2> =
		    %% Line 286
		    apply 'macro_content'/4
			(_cor1, [], _cor0, 0)
		in  %% Line 286
		    {'ok',_cor2}
	in  %% Line 286
	    case _cor3 of
	      %% Line 287
	      <{'ok',X}> when 'true' ->
		  %% Line 288
		  X
	      %% Line 289
	      <{'EXIT',R}> when 'true' ->
		  %% Line 290
		  call 'erlang':'exit'
		      (R)
	      %% Line 291
	      <'end'> when 'true' ->
		  %% Line 292
		  apply 'throw_error'/2
		      (_cor0, 'unterminated_macro')
	      %% Line 293
	      <Other> when 'true' ->
		  %% Line 294
		  call 'erlang':'throw'
		      (Other)
	    end
'macro_content'/4 =
    %% Line 299
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[64|[64|Cs]],As,L,N> when 'true' ->
	      %% Line 300
	      apply 'macro_content'/4
		  (Cs, [64|[64|As]], L, N)
	  %% Line 301
	  <[64|[125|Cs]],As,L,N> when 'true' ->
	      %% Line 302
	      apply 'macro_content'/4
		  (Cs, [125|[64|As]], L, N)
	  %% Line 303
	  <[64|[123|Cs]],As,L,N> when 'true' ->
	      %% Line 304
	      apply 'macro_content'/4
		  (Cs, [123|[64|As]], L, N)
	  %% Line 305
	  <[123|[64|Cs]],As,L,N> when 'true' ->
	      let <_cor4> =
		  %% Line 306
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 306
		  apply 'macro_content'/4
		      (Cs, [64|[123|As]], L, _cor4)
	  %% Line 307
	  <[125|Cs],As,L,0> when 'true' ->
	      let <_cor5> =
		  %% Line 308
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 308
		  {_cor5,Cs,L}
	  %% Line 309
	  <[125|Cs],As,L,N> when 'true' ->
	      let <_cor6> =
		  %% Line 310
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 310
		  apply 'macro_content'/4
		      (Cs, [125|As], L, _cor6)
	  %% Line 311
	  <[C = 10|Cs],As,L,N> when 'true' ->
	      let <_cor7> =
		  %% Line 312
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 312
		  apply 'macro_content'/4
		      (Cs, [C|As], _cor7, N)
	  %% Line 313
	  <[C|Cs],As,L,N> when 'true' ->
	      %% Line 314
	      apply 'macro_content'/4
		  (Cs, [C|As], L, N)
	  %% Line 315
	  <[],_X_As,_X_L,_X_N> when 'true' ->
	      %% Line 316
	      call 'erlang':'throw'
		  ('end')
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'macro_content',4}}] )
	    -| ['compiler_generated'] )
	end
'throw_error'/2 =
    %% Line 326
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,'unterminated_macro'> when 'true' ->
	      %% Line 327
	      apply 'throw_error'/2
		  (L, {[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[101|[110|[100|[32|[111|[102|[32|[109|[97|[99|[114|[111|[46]]]]]]]]]]]]]]]]]]]]]]]],[]})
	  %% Line 328
	  <L,'macro_name'> when 'true' ->
	      %% Line 329
	      apply 'throw_error'/2
		  (L, {[109|[105|[115|[115|[105|[110|[103|[32|[109|[97|[99|[114|[111|[32|[110|[97|[109|[101|[46]]]]]]]]]]]]]]]]]]],[]})
	  %% Line 330
	  <L,{'macro_name',S}> when 'true' ->
	      let <_cor2> =
		  %% Line 331
		  call 'lists':'reverse'
		      (S)
	      in  %% Line 331
		  apply 'throw_error'/2
		      (L, {[98|[97|[100|[32|[109|[97|[99|[114|[111|[32|[110|[97|[109|[101|[58|[32|[39|[64|[126|[115|[46|[46|[46|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]],[_cor2|[]]})
	  %% Line 332
	  <L,D> when 'true' ->
	      %% Line 333
	      call 'erlang':'throw'
		  ({'error',L,D})
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc_macros')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc_macros', _cor0)
end