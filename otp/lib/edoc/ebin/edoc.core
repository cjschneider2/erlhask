module 'edoc' ['application'/1,
	       'application'/2,
	       'application'/3,
	       'file'/1,
	       'file'/2,
	       'files'/1,
	       'files'/2,
	       'get_doc'/1,
	       'get_doc'/2,
	       'get_doc'/3,
	       'layout'/1,
	       'layout'/2,
	       'module_info'/0,
	       'module_info'/1,
	       'packages'/1,
	       'packages'/2,
	       'read'/1,
	       'read'/2,
	       'read_comments'/1,
	       'read_comments'/2,
	       'read_source'/1,
	       'read_source'/2,
	       'run'/3,
	       'toc'/1,
	       'toc'/2,
	       'toc'/3]
    attributes []
'file'/1 =
    %% Line 68
    fun (_cor0) ->
	%% Line 69
	apply 'file'/2
	    (_cor0, [])
'file'/2 =
    %% Line 115
    fun (_cor1,_cor0) ->
	let <Text> =
	    %% Line 116
	    apply 'read'/2
		(_cor1, _cor0)
	in  let <SrcSuffix> =
		%% Line 117
		call 'proplists':'get_value'
		    ('source_suffix', _cor0, %% Line 118
					     [46|[101|[114|[108]]]])
	    in  let <BaseName> =
		    %% Line 119
		    call 'filename':'basename'
			(_cor1, SrcSuffix)
		in  let <Suffix> =
			%% Line 120
			call 'proplists':'get_value'
			    ('file_suffix', _cor0, %% Line 121
						   [46|[104|[116|[109|[108]]]]])
		    in  let <_cor6> =
			    %% Line 122
			    call 'filename':'dirname'
				(_cor1)
			in  let <Dir> =
				%% Line 122
				call 'proplists':'get_value'
				    ('dir', _cor0, _cor6)
			    in  let <_cor8> =
				    %% Line 123
				    call 'edoc_lib':'read_encoding'
					(_cor1, [])
				in  let <Encoding> =
					%% Line 123
					[{'encoding',_cor8}|[]]
				    in  let <_cor10> =
					    %% Line 124
					    call 'erlang':'++'
						(BaseName, Suffix)
					in  %% Line 124
					    call 'edoc_lib':'write_file'
						(Text, Dir, _cor10, '', Encoding)
'files'/1 =
    %% Line 132
    fun (_cor0) ->
	%% Line 133
	apply 'files'/2
	    (_cor0, [])
'files'/2 =
    %% Line 141
    fun (_cor1,_cor0) ->
	%% Line 142
	apply 'run'/3
	    ([], _cor1, _cor0)
'packages'/1 =
    %% Line 147
    fun (_cor0) ->
	%% Line 148
	apply 'packages'/2
	    (_cor0, [])
'packages'/2 =
    %% Line 160
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 161
	    call 'erlang':'++'
		(_cor0, [{'source_path',[[46]]}])
	in  %% Line 161
	    apply 'run'/3
		(_cor1, [], _cor2)
'application'/1 =
    %% Line 166
    fun (_cor0) ->
	%% Line 167
	apply 'application'/2
	    (_cor0, [])
'application'/2 =
    %% Line 174
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <App,Options>
	      when call 'erlang':'is_atom'
		    (App) ->
	      %% Line 175
	      case call 'code':'lib_dir'
		       (App) of
		%% Line 176
		<Dir>
		    when call 'erlang':'is_list'
			  (Dir) ->
		    %% Line 177
		    apply 'application'/3
			(App, Dir, Options)
		%% Line 178
		<_cor5> when 'true' ->
		    do  %% Line 179
			call 'edoc_report':'report'
			    ([99|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[102|[111|[114|[32|[39|[126|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 180
																																		  [App|[]])
			%% Line 181
			call 'erlang':'exit'
			    ('error')
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'application',2}}] )
	    -| ['compiler_generated'] )
	end
'application'/3 =
    %% Line 210
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <App,Dir,Options>
	      when call 'erlang':'is_atom'
		    (App) ->
	      let <Src> =
		  %% Line 211
		  call 'edoc_lib':'try_subdir'
		      (Dir, [115|[114|[99]]])
	      in  let <_cor4> =
		      %% Line 212
		      call 'edoc_lib':'try_subdir'
			  (Dir, [100|[111|[99]]])
		  in  let <Overview> =
			  %% Line 212
			  call 'filename':'join'
			      (_cor4, %% Line 213
				      [111|[118|[101|[114|[118|[105|[101|[119|[46|[101|[100|[111|[99]]]]]]]]]]]]])
		      in  let <_cor6> =
			      %% Line 216
			      call 'io_lib':'fwrite'
				  ([84|[104|[101|[32|[126|[115|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]], [App|[]])
			  in  let <_cor7> =
				  %% Line 218
				  call 'filename':'join'
				      (Dir, [100|[111|[99]]])
			      in  let <_cor8> =
				      %% Line 219
				      call 'filename':'join'
					  (Dir, [105|[110|[99|[108|[117|[100|[101]]]]]]])
				  in  let <Opts> =
					  %% Line 214
					  call 'erlang':'++'
					      (Options, [{'source_path',[Src|[]]}|%% Line 215
										  ['subpackages'|%% Line 216
												 [{'title',_cor6}|%% Line 217
														  [{'overview',Overview}|%% Line 218
																	 [{'dir',_cor7}|%% Line 219
																			[{'includes',[_cor8|[]]}|[]]]]]]])
				      in  let <Opts1> =
					      %% Line 220
					      apply 'set_app_default'/3
						  (App, Dir, Opts)
					  in  %% Line 222
					      apply 'run'/3
						  ([''], [], [{'application',App}|Opts1])
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'application',3}}] )
	    -| ['compiler_generated'] )
	end
'set_app_default'/3 =
    %% Line 227
    fun (_cor2,_cor1,_cor0) ->
	%% Line 228
	case call 'proplists':'get_value'
		 ('app_default', _cor0) of
	  %% Line 229
	  <'undefined'> when 'true' ->
	      let <AppName> =
		  %% Line 230
		  call 'erlang':'atom_to_list'
		      (_cor2)
	      in  let <_cor4> =
		      %% Line 231
		      call 'filename':'absname'
			  (_cor1)
		  in  let <Dir> =
			  %% Line 231
			  call 'edoc_lib':'simplify_path'
			      (_cor4)
		      in  let <_cor7> =
			      %% Line 232
			      case call 'filename':'basename'
				       (Dir) of
				%% Line 233
				<_cor13>
				    when call 'erlang':'=:='
					  (_cor13,
					   AppName) ->
				    %% Line 234
				    call 'filename':'dirname'
					(Dir)
				%% Line 235
				<_cor14> when 'true' ->
				    %% Line 236
				    [104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[101|[114|[108|[97|[110|[103|[46|[111|[114|[103|[47|[101|[100|[111|[99|[47|[100|[111|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
			      end
			  in  %% Line 238
			      [{'app_default',_cor7}|_cor0]
	  %% Line 239
	  <_cor15> when 'true' ->
	      _cor0
	end
'opt_defaults'/0 =
    %% Line 252
    fun () ->
	%% Line 253
	['packages']
'opt_negations'/0 =
    %% Line 255
    fun () ->
	%% Line 256
	[{'no_preprocess','preprocess'}|[{'no_subpackages','subpackages'}|[{'no_report_missing_types','report_missing_types'}|[{'no_packages','packages'}]]]]
'run'/3 =
    %% Line 372
    fun (_cor2,_cor1,_cor0) ->
	let <Opts> =
	    %% Line 373
	    apply 'expand_opts'/1
		(_cor0)
	in  let <Ctxt> =
		%% Line 374
		apply 'init_context'/1
		    (Opts)
	    in  %% Line 375
		( case Ctxt of
		    ( <( {'context',_rec0,_cor39,_cor40}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <Path> =
			      %% Line 376
			      call 'proplists':'append_values'
				  ('source_path', Opts)
			  in  let <Ss> =
				  %% Line 377
				  apply 'sources'/3
				      (Path, _cor2, Opts)
			      in  let <_cor10> =
				      %% Line 378
				      apply 'expand_files'/1
					  (_cor1)
				  in  let <_cor11> =
					  %% Line 378
					  call 'erlang':'++'
					      (_cor10, Ss)
				      in  %% Line 378
					  case apply 'expand_sources'/2
						   (_cor11, Opts) of
					    <{Ss1,Ms}> when 'true' ->
						let <_cor17> =
						    %% Line 379
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor15) ->
								  case _cor15 of
								    <[{_cor42,P,_cor43,_cor44}|_cor14]> when 'true' ->
									let <_cor16> =
									    apply 'lc$^0'/1
										(_cor14)
									in  ( [P|_cor16]
									      -| ['compiler_generated'] )
								    ( <[_cor13|_cor14]> when 'true' ->
									  apply 'lc$^0'/1
									      (_cor14)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor15> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor15})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      (Ss1)
						      -| ['list_comprehension'] )
						in  let <App> =
							%% Line 380
							call 'proplists':'get_value'
							    ('application', Opts, [])
						    in  %% Line 381
							case apply 'target_dir_info'/5
								 (_rec0, App, _cor17, Ms, Opts) of
							  <{App1,Ps1,Ms1}> when 'true' ->
							      let <_cor21> =
								  %% Line 383
								  call 'lists':'sort'
								      (Ps1)
							      in  let <_cor22> =
								      %% Line 383
								      call 'edoc_lib':'unique'
									  (_cor21)
								  in  let <Ps2> =
									  %% Line 383
									  call 'erlang':'--'
									      (_cor22, [''])
								      in  let <_cor24> =
									      %% Line 384
									      call 'lists':'sort'
										  (Ms1)
									  in  let <Ms2> =
										  %% Line 384
										  call 'edoc_lib':'unique'
										      (_cor24)
									      in  let <Fs> =
										      %% Line 385
										      apply 'package_files'/2
											  (Path, Ps2)
										  in  let <Env> =
											  %% Line 386
											  call 'edoc_lib':'get_doc_env'
											      (App1, Ps2, Ms2, Opts)
										      in  let <_cor30> =
											      %% Line 387
											      call 'erlang':'setelement'
												  (3, Ctxt, Env)
											  in  let <Cmd> =
												  %% Line 388
												  {'doclet_gen',Ss1,%% Line 389
														    App1,%% Line 390
															 Ps2,%% Line 391
															     Ms2,%% Line 392
																 Fs}
											      in  let <F> =
												      %% Line 394
												      ( fun (_cor33) ->
													    %% Line 395
													    call _cor33:'run'
														(Cmd, _cor30)
													-| [{'id',{0,0,'-run/3-fun-0-'}}] )
												  in  %% Line 397
												      call 'edoc_lib':'run_doclet'
													  (F, Opts)
							  ( <_cor20> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor20})
							    -| ['compiler_generated'] )
							end
					    ( <_cor12> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor12})
					      -| ['compiler_generated'] )
					  end
		      -| ['compiler_generated'] )
		    ( <_cor41> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','context'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'expand_opts'/1 =
    %% Line 399
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 400
	    apply 'opt_negations'/0
		()
	in  let <_cor1> =
		%% Line 401
		apply 'opt_defaults'/0
		    ()
	    in  let <_cor2> =
		    %% Line 401
		    call 'erlang':'++'
			(_cor0, _cor1)
		in  %% Line 400
		    call 'proplists':'substitute_negations'
			(_cor3, _cor2)
'init_context'/1 =
    %% Line 406
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 407
	    call 'proplists':'get_value'
		('dir', _cor0, [46])
	in  %% Line 407
	    {'context',_cor1,'undefined',_cor0}
'sources'/3 =
    %% Line 413
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 414
	    ( fun (_cor5,_cor4) ->
		  let <_cor3> =
		      %% Line 415
		      call 'edoc_lib':'find_sources'
			  (_cor2, _cor5, _cor0)
		  in  %% Line 415
		      call 'erlang':'++'
			  (_cor3, _cor4)
	      -| [{'id',{0,0,'-sources/3-fun-0-'}}] )
	in  %% Line 414
	    call 'lists':'foldl'
		(_cor8, %% Line 417
			[], _cor1)
'package_files'/2 =
    %% Line 419
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 421
	    ( fun (_cor6,_cor5) ->
		  let <F> =
		      %% Line 422
		      call 'edoc_lib':'find_file'
			  (_cor1, _cor6, [112|[97|[99|[107|[97|[103|[101|[46|[101|[100|[111|[99]]]]]]]]]]]])
		  in  %% Line 423
		      call 'dict':'store'
			  (_cor6, F, _cor5)
	      -| [{'id',{0,0,'-package_files/2-fun-0-'}}] )
	in  let <_cor3> =
		%% Line 425
		call 'dict':'new'
		    ()
	    in  let <D> =
		    %% Line 421
		    call 'lists':'foldl'
			(_cor9, _cor3, _cor0)
		in  %% Line 426
		    ( fun (_cor12) ->
			  %% Line 427
			  case call 'dict':'find'
				   (_cor12, D) of
			    %% Line 428
			    <{'ok',F}> when 'true' ->
				F
			    %% Line 429
			    <'error'> when 'true' ->
				[]
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-package_files/2-fun-1-'}}] )
'expand_files'/1 =
    %% Line 435
    fun (_cor0) ->
	case _cor0 of
	  <[{P,Fs1}|Fs]> when 'true' ->
	      let <_cor1> =
		  %% Line 437
		  apply 'expand_files'/1
		      (Fs)
	      in  %% Line 436
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[F|_cor3]> when 'true' ->
				      let <_cor6> =
					  call 'filename':'basename'
					      (F)
				      in  let <_cor5> =
					      call 'filename':'dirname'
						  (F)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [{P,_cor6,_cor5}|_cor7]
						    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      _cor1
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Fs1)
		    -| ['list_comprehension'] )
	  %% Line 438
	  <[F|Fs]> when 'true' ->
	      let <_cor9> =
		  %% Line 439
		  call 'filename':'basename'
		      (F)
	      in  let <_cor8> =
		      %% Line 439
		      call 'filename':'dirname'
			  (F)
		  in  let <_cor10> =
			  %% Line 440
			  apply 'expand_files'/1
			      (Fs)
		      in  %% Line 439
			  [{'',_cor9,_cor8}|_cor10]
	  %% Line 441
	  <[]> when 'true' ->
	      %% Line 442
	      []
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'expand_files',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_sources'/2 =
    %% Line 450
    fun (_cor1,_cor0) ->
	let <Suffix> =
	    %% Line 451
	    call 'proplists':'get_value'
		('source_suffix', _cor0, %% Line 452
					 [46|[101|[114|[108]]]])
	in  let <_cor8> =
		%% Line 453
		case call 'proplists':'get_bool'
			 ('packages', _cor0) of
		  %% Line 454
		  <'true'> when 'true' ->
		      _cor1
		  %% Line 455
		  <'false'> when 'true' ->
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[{_X_P,F,D}|_cor4]> when 'true' ->
					  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [{'',F,D}|_cor6]
						-| ['compiler_generated'] )
				      ( <[_cor3|_cor4]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor4)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor1)
			-| ['list_comprehension'] )
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor10> =
		    %% Line 457
		    call 'sets':'new'
			()
		in  %% Line 457
		    apply 'expand_sources'/5
			(_cor8, Suffix, _cor10, [], [])
'expand_sources'/5 =
    %% Line 459
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'',F,D}|Fs],Suffix,S,As,Ms> when 'true' ->
	      let <_cor5> =
		  %% Line 460
		  call 'filename':'rootname'
		      (F, Suffix)
	      in  let <M> =
		      %% Line 460
		      call 'erlang':'list_to_atom'
			  (_cor5)
		  in  %% Line 461
		      case call 'sets':'is_element'
			       (M, S) of
			%% Line 462
			<'true'> when 'true' ->
			    %% Line 463
			    apply 'expand_sources'/5
				(Fs, Suffix, S, As, Ms)
			%% Line 464
			<'false'> when 'true' ->
			    let <S1> =
				%% Line 465
				call 'sets':'add_element'
				    (M, S)
			    in  %% Line 466
				apply 'expand_sources'/5
				    (Fs, Suffix, S1, [{M,'',F,D}|As], %% Line 467
								      [M|Ms])
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
	  %% Line 469
	  <[],_X_Suffix,_X_S,As,Ms> when 'true' ->
	      let <_cor10> =
		  %% Line 470
		  call 'lists':'reverse'
		      (As)
	      in  let <_cor9> =
		      %% Line 470
		      call 'lists':'reverse'
			  (Ms)
		  in  %% Line 470
		      {_cor10,_cor9}
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'expand_sources',5}}] )
	    -| ['compiler_generated'] )
	end
'target_dir_info'/5 =
    %% Line 474
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 475
	case call 'proplists':'get_bool'
		 ('new', _cor0) of
	  %% Line 476
	  <'true'> when 'true' ->
	      %% Line 477
	      {_cor3,_cor2,_cor1}
	  %% Line 478
	  <'false'> when 'true' ->
	      %% Line 479
	      case call 'edoc_lib':'read_info_file'
		       (_cor4) of
		<{App1,Ps1,Ms1}> when 'true' ->
		    let <_cor8> =
			%% Line 480
			case <> of
			  <>
			      when call 'erlang':'=:='
				    (_cor3,
				     []) ->
			      App1
			  %% Line 481
			  <> when 'true' ->
			      _cor3
			end
		    in  let <_cor7> =
			    %% Line 483
			    call 'erlang':'++'
				(_cor2, Ps1)
			in  let <_cor6> =
				%% Line 484
				call 'erlang':'++'
				    (_cor1, Ms1)
			    in  %% Line 480
				{_cor8,_cor7,_cor6}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'toc'/1 =
    %% Line 490
    fun (_cor0) ->
	%% Line 491
	apply 'toc'/2
	    (_cor0, [])
'toc'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 499
	    call 'proplists':'append_values'
		('doc_path', _cor0)
	in  let <_cor2> =
		%% Line 500
		call 'edoc_lib':'find_doc_dirs'
		    ()
	    in  let <Paths> =
		    %% Line 500
		    call 'erlang':'++'
			(_cor3, _cor2)
		in  %% Line 501
		    apply 'toc'/3
			(_cor1, Paths, _cor0)
'toc'/3 =
    %% Line 510
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 511
	    call 'erlang':'++'
		(_cor0, [{'dir',_cor2}|[]])
	in  let <Opts> =
		%% Line 511
		apply 'expand_opts'/1
		    (_cor3)
	    in  let <Ctxt> =
		    %% Line 512
		    apply 'init_context'/1
			(Opts)
		in  let <Env> =
			%% Line 513
			call 'edoc_lib':'get_doc_env'
			    ('', [], [], Opts)
		    in  %% Line 514
			case Ctxt of
			  <{'context',_cor17,_cor18,_cor19}> when 'true' ->
			      let <_cor9> =
				  call 'erlang':'setelement'
				      (3, Ctxt, Env)
			      in  let <F> =
				      %% Line 515
				      ( fun (_cor11) ->
					    %% Line 516
					    call _cor11:'run'
						({'doclet_toc',_cor1,'undefined'}, _cor9)
					-| [{'id',{0,0,'-toc/3-fun-0-'}}] )
				  in  %% Line 518
				      call 'edoc_lib':'run_doclet'
					  (F, Opts)
			  ( <_cor20> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','context'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
'read'/1 =
    %% Line 524
    fun (_cor0) ->
	%% Line 525
	apply 'read'/2
	    (_cor0, [])
'read'/2 =
    %% Line 537
    fun (_cor1,_cor0) ->
	%% Line 538
	case apply 'get_doc'/2
		 (_cor1, _cor0) of
	  <{_X_ModuleName,Doc}> when 'true' ->
	      %% Line 539
	      apply 'layout'/2
		  (Doc, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'layout'/1 =
    %% Line 545
    fun (_cor0) ->
	%% Line 546
	apply 'layout'/2
	    (_cor0, [])
'layout'/2 =
    %% Line 571
    fun (_cor1,_cor0) ->
	let <F> =
	    %% Line 572
	    ( fun (_cor2) ->
		  %% Line 573
		  call _cor2:'module'
		      (_cor1, _cor0)
	      -| [{'id',{0,0,'-layout/2-fun-0-'}}] )
	in  %% Line 575
	    call 'edoc_lib':'run_layout'
		(F, _cor0)
'read_comments'/1 =
    %% Line 587
    fun (_cor0) ->
	%% Line 588
	apply 'read_comments'/2
	    (_cor0, [])
'read_comments'/2 =
    %% Line 597
    fun (_cor1,_cor0) ->
	%% Line 598
	call 'erl_comment_scan':'file'
	    (_cor1)
'read_source'/1 =
    %% Line 604
    fun (_cor0) ->
	%% Line 605
	apply 'read_source'/2
	    (_cor0, [])
'read_source'/2 =
    %% Line 656
    fun (_cor1,_cor0) ->
	let <Opts> =
	    %% Line 657
	    apply 'expand_opts'/1
		(_cor0)
	in  %% Line 658
	    case apply 'read_source_1'/2
		     (_cor1, Opts) of
	      %% Line 659
	      <{'ok',Forms}> when 'true' ->
		  do  %% Line 660
		      apply 'check_forms'/2
			  (Forms, _cor1)
		      %% Line 661
		      Forms
	      %% Line 662
	      <{'error',R}> when 'true' ->
		  let <_cor3> =
		      %% Line 664
		      call 'edoc_lib':'filename'
			  (_cor1)
		  in  do  %% Line 663
			  call 'edoc_report':'error'
			      ({[101|[114|[114|[111|[114|[32|[114|[101|[97|[100|[105|[110|[103|[32|[102|[105|[108|[101|[32|[39|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 664
																					       [_cor3|[]]})
			  %% Line 665
			  call 'erlang':'exit'
			      ({'error',R})
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'read_source_1'/2 =
    %% Line 668
    fun (_cor1,_cor0) ->
	%% Line 669
	case call 'proplists':'get_bool'
		 ('preprocess', _cor0) of
	  %% Line 670
	  <'true'> when 'true' ->
	      %% Line 671
	      apply 'read_source_2'/2
		  (_cor1, _cor0)
	  %% Line 672
	  <'false'> when 'true' ->
	      let <_cor2> =
		  %% Line 673
		  call 'erlang':'++'
		      (_cor0, [{'no_fail','false'}])
	      in  %% Line 673
		  call 'epp_dodger':'quick_parse_file'
		      (_cor1, _cor2)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'read_source_2'/2 =
    %% Line 676
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 677
	    call 'proplists':'append_values'
		('includes', _cor0)
	in  let <_cor2> =
		%% Line 678
		call 'filename':'dirname'
		    (_cor1)
	    in  let <Includes> =
		    %% Line 678
		    call 'erlang':'++'
			(_cor3, [_cor2|[]])
		in  let <Macros> =
			%% Line 679
			call 'proplists':'append_values'
			    ('macros', _cor0)
		    in  %% Line 681
			apply 'parse_file'/3
			    (_cor1, Includes, Macros)
'parse_file'/3 =
    %% Line 698
    fun (_cor2,_cor1,_cor0) ->
	%% Line 699
	case apply 'parse_file'/4
		 ('utf8', _cor2, _cor1, _cor0) of
	  %% Line 700
	  <'invalid_unicode'> when 'true' ->
	      %% Line 701
	      apply 'parse_file'/4
		  ('latin1', _cor2, _cor1, _cor0)
	  %% Line 702
	  <Ret> when 'true' ->
	      %% Line 703
	      Ret
	end
'parse_file'/4 =
    %% Line 706
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Options> =
	    %% Line 707
	    [{'name',_cor2}|%% Line 708
			    [{'includes',_cor1}|%% Line 709
						[{'macros',_cor0}|%% Line 710
								  [{'default_encoding',_cor3}|[]]]]]
	in  %% Line 711
	    case call 'epp':'open'
		     (['extra'|Options]) of
	      %% Line 712
	      <{'ok',Epp,Extra}> when 'true' ->
		  %% Line 713
		  letrec
		      'after$^0'/0 =
			  fun () ->
			      %% Line 722
			      ( call 'epp':'close'
				    (Epp)
				-| ['result_not_wanted'] )
		  in  try
			  try
			      apply 'parse_file'/1
				  (Epp)
			  of <_cor5> ->
			      let <Encoding> =
				  %% Line 715
				  call 'proplists':'get_value'
				      ('encoding', Extra)
			      in  %% Line 716
				  case apply 'find_invalid_unicode'/1
					   (_cor5) of
				    %% Line 717
				    <'invalid_unicode'>
					when call 'erlang':'=/='
					      (Encoding,
					       'utf8') ->
					%% Line 718
					'invalid_unicode'
				    %% Line 719
				    <_cor22> when 'true' ->
					%% Line 720
					{'ok',_cor5}
				  end
			  catch <_cor11,_cor10,_cor9> ->
			      primop 'raise'
				  (_cor9, _cor10)
		      of <_cor13> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      _cor13
		      catch <_cor16,_cor15,_cor14> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      primop 'raise'
				  (_cor14, _cor15)
	      %% Line 724
	      <Error> when 'true' ->
		  %% Line 725
		  Error
	    end
'find_invalid_unicode'/1 =
    %% Line 728
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      %% Line 729
	      case H of
		%% Line 730
		<{'error',{_X_Line,'file_io_server','invalid_unicode'}}> when 'true' ->
		    %% Line 731
		    'invalid_unicode'
		%% Line 732
		<_X_Other> when 'true' ->
		    %% Line 733
		    apply 'find_invalid_unicode'/1
			(T)
	      end
	  %% Line 735
	  <[]> when 'true' ->
	      'none'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'find_invalid_unicode',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_file'/1 =
    %% Line 737
    fun (_cor0) ->
	%% Line 738
	case apply 'scan_and_parse'/1
		 (_cor0) of
	  %% Line 739
	  <{'ok',Form}> when 'true' ->
	      %% Line 740
	      case Form of
		%% Line 741
		<{'attribute',La,'record',{Record,Fields}}> when 'true' ->
		    %% Line 742
		    case call 'epp':'normalize_typed_record_fields'
			     (Fields) of
		      %% Line 743
		      <{'typed',NewFields}> when 'true' ->
			  let <_cor1> =
			      %% Line 747
			      apply 'parse_file'/1
				  (_cor0)
			  in  %% Line 744
			      [{'attribute',La,'record',{Record,NewFields}}|%% Line 745
									    [{'attribute',La,'type',%% Line 746
												    {{'record',Record},Fields,[]}}|_cor1]]
		      %% Line 748
		      <'not_typed'> when 'true' ->
			  let <_cor2> =
			      %% Line 749
			      apply 'parse_file'/1
				  (_cor0)
			  in  %% Line 749
			      [Form|_cor2]
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 751
		<_cor9> when 'true' ->
		    let <_cor4> =
			%% Line 752
			apply 'parse_file'/1
			    (_cor0)
		    in  %% Line 752
			[Form|_cor4]
	      end
	  %% Line 754
	  <{'error',E}> when 'true' ->
	      let <_cor6> =
		  %% Line 755
		  apply 'parse_file'/1
		      (_cor0)
	      in  %% Line 755
		  [{'error',E}|_cor6]
	  %% Line 756
	  <{'eof',Location}> when 'true' ->
	      %% Line 757
	      [{'eof',Location}|[]]
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'scan_and_parse'/1 =
    %% Line 760
    fun (_cor0) ->
	%% Line 761
	case call 'epp':'scan_erl_form'
		 (_cor0) of
	  %% Line 762
	  <{'ok',Toks0}> when 'true' ->
	      let <Toks> =
		  %% Line 763
		  apply 'fix_last_line'/1
		      (Toks0)
	      in  %% Line 764
		  case call 'erl_parse':'parse_form'
			   (Toks) of
		    %% Line 765
		    <{'ok',Form}> when 'true' ->
			%% Line 766
			{'ok',Form}
		    %% Line 767
		    <Else> when 'true' ->
			%% Line 768
			Else
		  end
	  %% Line 770
	  <Else> when 'true' ->
	      %% Line 771
	      Else
	end
'fix_last_line'/1 =
    %% Line 774
    fun (_cor0) ->
	let <Toks1> =
	    %% Line 775
	    call 'lists':'reverse'
		(_cor0)
	in  let <_cor2> =
		%% Line 776
		call 'erlang':'hd'
		    (Toks1)
	    in  %% Line 776
		case call 'erl_scan':'token_info'
			 (_cor2, 'line') of
		  <{'line',LastLine}> when 'true' ->
		      %% Line 777
		      apply 'fll'/3
			  (Toks1, LastLine, [])
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'fll'/3 =
    %% Line 779
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Category,Attributes0,Symbol}|L],LastLine,Ts> when 'true' ->
	      let <F> =
		  %% Line 780
		  ( fun (_cor3) ->
			LastLine
		    -| [{'id',{0,0,'-fll/3-fun-0-'}}] )
	      in  let <Attributes> =
		      %% Line 781
		      call 'erl_scan':'set_attribute'
			  ('line', Attributes0, F)
		  in  %% Line 782
		      call 'lists':'reverse'
			  (L, [{Category,Attributes,Symbol}|Ts])
	  %% Line 783
	  <[T|L],LastLine,Ts> when 'true' ->
	      %% Line 784
	      apply 'fll'/3
		  (L, LastLine, [T|Ts])
	  %% Line 785
	  <L,_X_LastLine,Ts> when 'true' ->
	      %% Line 786
	      call 'lists':'reverse'
		  (L, Ts)
	end
'check_forms'/2 =
    %% Line 788
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 789
	    ( fun (_cor4) ->
		  %% Line 790
		  case call 'erl_syntax':'type'
			   (_cor4) of
		    %% Line 791
		    <'error_marker'> when 'true' ->
			do  %% Line 792
			    case call 'erl_syntax':'error_marker_info'
				     (_cor4) of
			      %% Line 793
			      <{L,M,D}> when 'true' ->
				  %% Line 794
				  call 'edoc_report':'error'
				      (L, _cor0, {'format_error',M,D})
			      %% Line 795
			      <Other> when 'true' ->
				  %% Line 796
				  call 'edoc_report':'report'
				      (_cor0, [117|[110|[107|[110|[111|[119|[110|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[115|[111|[117|[114|[99|[101|[32|[99|[111|[100|[101|[58|[32|[126|[119|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 797
																													    [Other|[]])
			    end
			    %% Line 799
			    call 'erlang':'exit'
				('error')
		    %% Line 800
		    <_cor9> when 'true' ->
			%% Line 801
			'ok'
		  end
	      -| [{'id',{0,0,'-check_forms/2-fun-0-'}}] )
	in  %% Line 804
	    call 'lists':'foreach'
		(Fun, _cor1)
'get_doc'/1 =
    %% Line 810
    fun (_cor0) ->
	%% Line 811
	apply 'get_doc'/2
	    (_cor0, [])
'get_doc'/2 =
    %% Line 867
    fun (_cor1,_cor0) ->
	let <Env> =
	    %% Line 868
	    call 'edoc_lib':'get_doc_env'
		(_cor0)
	in  %% Line 869
	    apply 'get_doc'/3
		(_cor1, Env, _cor0)
'get_doc'/3 =
    %% Line 882
    fun (_cor2,_cor1,_cor0) ->
	%% Line 883
	call 'edoc_extract':'source'
	    (_cor2, _cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc', _cor0)
end