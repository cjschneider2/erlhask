module 'otpsgml_layout' ['module'/2,
			 'module_info'/0,
			 'module_info'/1,
			 'overview'/2,
			 'package'/2,
			 'type'/1]
    attributes []
'module'/2 =
    %% Line 78
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 79
	    apply 'init_opts'/2
		(_cor1, _cor0)
	in  let <XML> =
		%% Line 79
		apply 'layout_module'/2
		    (_cor1, _cor2)
	    in  let <Export> =
		    %% Line 80
		    call 'proplists':'get_value'
			('xml_export', _cor0, %% Line 81
					      'xmerl_otpsgml')
		in  %% Line 82
		    call 'xmerl':'export_simple'
			([XML|[]], Export, [])
'init_opts'/2 =
    %% Line 86
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 87
	    apply 'get_attrval'/2
		('root', _cor1)
	in  let <_cor2> =
		%% Line 88
		call 'proplists':'get_value'
		    ('index_columns', _cor0, %% Line 89
					     1)
	    in  let <R> =
		    %% Line 87
		    {'opts',_cor3,'undefined',_cor2}
		in  %% Line 91
		    case call 'proplists':'get_value'
			     ('stylesheet', _cor0) of
		      %% Line 92
		      <'undefined'> when 'true' ->
			  %% Line 93
			  ( case R of
			      ( <( {'opts',_rec0,_cor15,_cor16}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <S> =
					call 'edoc_lib':'join_uri'
					    (_rec0, [115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[46|[99|[115|[115]]]]]]]]]]]]]])
				    in  %% Line 94
					call 'erlang':'setelement'
					    (3, R, S)
				-| ['compiler_generated'] )
			      ( <_cor17> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','opts'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 95
		      <[]> when 'true' ->
			  %% Line 96
			  R
		      %% Line 97
		      <S>
			  when call 'erlang':'is_list'
				(S) ->
			  %% Line 98
			  case R of
			    <{'opts',_cor22,_cor23,_cor24}> when 'true' ->
				call 'erlang':'setelement'
				    (3, R, S)
			    ( <_cor25> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      %% Line 99
		      <_cor26> when 'true' ->
			  do  %% Line 100
			      call 'edoc_report':'report'
				  ([98|[97|[100|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[111|[112|[116|[105|[111|[110|[32|[96|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			      %% Line 101
			      call 'erlang':'exit'
				  ('error')
		    end
'layout_module'/2 =
    %% Line 141
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement','module',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,Es,_cor48,_cor49,_cor50},_X_Opts> when 'true' ->
	      let <Name> =
		  %% Line 142
		  apply 'get_attrval'/2
		      ('name', E)
	      in  let <Desc> =
		      %% Line 143
		      apply 'get_content'/2
			  ('description', Es)
		  in  let <ShortDesc> =
			  %% Line 144
			  apply 'get_content'/2
			      ('briefDescription', Desc)
		      in  let <FullDesc> =
			      %% Line 145
			      apply 'get_content'/2
				  ('fullDescription', Desc)
			  in  let <_cor11> =
				  %% Line 146
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor9) ->
						case _cor9 of
						  <[E|_cor7]> when 'true' ->
						      let <_cor10> =
							  apply 'lc$^0'/1
							      (_cor7)
						      in  ( [E|_cor10]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor9> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor9})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor8> =
					    apply 'get_content'/2
						('functions', Es)
					in  apply 'lc$^0'/1
						(_cor8)
				    -| ['list_comprehension'] )
			      in  let <_cor18> =
				      %% Line 147
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor15) ->
						    case _cor15 of
						      <[E|_cor14]> when 'true' ->
							  let <_cor16> =
							      apply 'function_name'/1
								  (E)
							  in  let <_cor17> =
								  apply 'lc$^1'/1
								      (_cor14)
							      in  ( [{_cor16,E}|_cor17]
								    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor15> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor15})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(_cor11)
					-| ['list_comprehension'] )
				  in  let <SortedFs> =
					  %% Line 147
					  call 'lists':'sort'
					      (_cor18)
				      in  let <Types> =
					      %% Line 148
					      apply 'get_content'/2
						  ('typedecls', Es)
					  in  let <_cor26> =
						  %% Line 149
						  ( letrec
							'lc$^2'/1 =
							    fun (_cor23) ->
								case _cor23 of
								  <[E|_cor22]> when 'true' ->
								      let <_cor24> =
									  apply 'type_name'/1
									      (E)
								      in  let <_cor25> =
									      apply 'lc$^2'/1
										  (_cor22)
									  in  ( [{_cor24,E}|_cor25]
										-| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_cor23> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor23})
									  -| [{'function_name',{'lc$^2',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  apply 'lc$^2'/1
							    (Types)
						    -| ['list_comprehension'] )
					      in  let <SortedTs> =
						      %% Line 149
						      call 'lists':'sort'
							  (_cor26)
						  in  let <_cor28> =
							  %% Line 159
							  call 'erlang':'++'
							      (Name, [46|[115|[103|[109|[108]]]]])
						      in  let <Header> =
							      %% Line 150
							      {'header',[%% Line 151
									 [10]|%% Line 151
									      [{'title',[Name|[]]}|%% Line 152
												   [[10]|[{'prepared',[[]]}|%% Line 153
															    [[10]|[{'responsible',[[]]}|%% Line 154
																			[[10]|[{'docno',[[49]]}|%% Line 155
																						[[10]|[{'approved',[[]]}|%% Line 156
																									 [[10]|[{'checked',[[]]}|%% Line 157
																												 [[10]|[{'date',[[]]}|%% Line 158
																														      [[10]|[{'rev',[[65]]}|%% Line 159
																																	    [[10]|[{'file',[_cor28|[]]}|%% Line 160
																																					[]]]]]]]]]]]]]]]]]]]}
							  in  let <Module> =
								  %% Line 161
								  {'module',[Name|[]]}
							      in  let <ModuleSummary> = {%% Line 162
								       'modulesummary',%% Line 162
										       ShortDesc}
								  in  %% Line 163
								      case apply 'find_first_p'/2
									       (FullDesc, []) of
									<{Short,Long}> when 'true' ->
									    let <_cor33> =
										%% Line 164
										apply 'types'/1
										    (SortedTs)
									    in  let <_cor34> =
										    %% Line 164
										    [[10]|[{'p',Short}|call 'erlang':'++'
													   (Long, [[10]|_cor33])]]
										in  let <Description> = {%% Line 164
											 'description',_cor34}
										    in  let <Funcs> =
											    %% Line 165
											    apply 'functions'/1
												(SortedFs)
											in  let <_cor37> =
												%% Line 166
												apply 'authors'/1
												    (Es)
											    in  let <Authors> = {%% Line 166
												     'authors',_cor37}
												in  let <See> =
													%% Line 167
													apply 'sees1'/1
													    (Es)
												    in  %% Line 168
													{'erlref',[%% Line 169
														   [10]|%% Line 169
															[Header|%% Line 170
																[[10]|[Module|%% Line 171
																	      [[10]|[ModuleSummary|%% Line 172
																				   [[10]|[Description|%% Line 173
																						      [[10]|[Funcs|%% Line 174
																								   [[10]|[See|%% Line 175
																									      [[10]|[Authors|%% Line 176
																											     []]]]]]]]]]]]]]]}
									( <_cor32> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor32})
									  -| ['compiler_generated'] )
								      end
	  ( <_cor41,_cor40> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41,_cor40})
		  -| [{'function_name',{'layout_module',2}}] )
	    -| ['compiler_generated'] )
	end
'stylesheet'/1 =
    %% Line 179
    fun (_cor0) ->
	%% Line 180
	( case _cor0 of
	    ( <( {'opts',_cor5,_rec3,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec3 of
		    %% Line 181
		    <'undefined'> when 'true' ->
			%% Line 182
			[]
		    %% Line 183
		    <CSS> when 'true' ->
			%% Line 184
			[{'link',[{'rel',[115|[116|[121|[108|[101|[115|[104|[101|[101|[116]]]]]]]]]]}|%% Line 185
												      [{'type',[116|[101|[120|[116|[47|[99|[115|[115]]]]]]]]}|%% Line 186
																			      [{'href',CSS}|[]]]],%% Line 186
																						  []}|%% Line 187
																						      [[10]]]
		  end
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'index_desc'/1 =
    %% Line 239
    fun (_cor0) ->
	let <Desc> =
	    %% Line 240
	    apply 'get_content'/2
		('description', _cor0)
	in  %% Line 241
	    case apply 'get_content'/2
		     ('briefDescription', Desc) of
	      %% Line 242
	      <[]> when 'true' ->
		  %% Line 243
		  apply 'equiv'/1
		      (_cor0)
	      %% Line 244
	      <ShortDesc> when 'true' ->
		  %% Line 245
		  ShortDesc
	    end
'functions'/1 =
    %% Line 279
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 280
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{Name,E}> when 'true' ->
			apply 'function'/2
			    (Name, E)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-functions/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-functions/1-fun-0-'}}] )
	in  let <Es> =
		%% Line 280
		call 'lists':'flatmap'
		    (_cor3, _cor0)
	    in  %% Line 281
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (Es,
			     []) ->
		      []
		  %% Line 282
		  <> when 'true' ->
		      %% Line 283
		      {'funcs',Es}
		end
'function'/2 =
    %% Line 306
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Name,E = {'xmlElement',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,Es,_cor23,_cor24,_cor25}> when 'true' ->
	      let <TypeSpec> =
		  %% Line 307
		  apply 'get_content'/2
		      ('typespec', Es)
	      in  let <_cor6> =
		      %% Line 311
		      case apply 'funcheader'/1
			       (TypeSpec) of
			%% Line 312
			<[]> when 'true' ->
			    let <_cor4> =
				%% Line 313
				apply 'get_content'/2
				    ('args', Es)
			    in  let <_cor3> =
				    %% Line 314
				    apply 'get_attrval'/2
					('name', E)
				in  %% Line 313
				    apply 'signature'/2
					(_cor4, _cor3)
			%% Line 315
			<Spec> when 'true' ->
			    Spec
		      end
		  in  let <_cor7> =
			  %% Line 318
			  apply 'fsummary'/1
			      (Es)
		      in  let <_cor8> =
			      %% Line 320
			      apply 'local_types'/1
				  (TypeSpec)
			  in  let <_cor12> =
				  %% Line 321
				  apply 'label_anchor'/1
				      (E)
			      in  let <_cor10> =
				      %% Line 321
				      apply 'fulldesc'/1
					  (Es)
				  in  let <_cor9> =
					  %% Line 321
					  apply 'sees'/1
					      (Es)
				      in  let <_cor11> =
					      %% Line 321
					      call 'erlang':'++'
						  (_cor10, _cor9)
					  in  let <_cor13> =
						  %% Line 321
						  call 'erlang':'++'
						      (_cor12, _cor11)
					      in  %% Line 308
						  [[10]|[{'func',[[10]|%% Line 309
								       [{'name',_cor6}|%% Line 318
										       [[10]|[{'fsummary',_cor7}|%% Line 320
														 [[10]|[_cor8|%% Line 321
															      [[10]|[{'desc',_cor13}|%% Line 322
																		     []]]]]]]]]}|%% Line 322
																				 []]]
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'function',2}}] )
	    -| ['compiler_generated'] )
	end
'fsummary'/1 =
    %% Line 324
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      [[32]]
	  %% Line 325
	  <Es> when 'true' ->
	      let <Desc> =
		  %% Line 326
		  apply 'get_content'/2
		      ('description', Es)
	      in  %% Line 327
		  case apply 'get_content'/2
			   ('briefDescription', Desc) of
		    %% Line 328
		    <[]> when 'true' ->
			%% Line 329
			apply 'fsummary_equiv'/1
			    (Es)
		    %% Line 330
		    <ShortDesc> when 'true' ->
			%% Line 331
			ShortDesc
		  end
	end
'fsummary_equiv'/1 =
    %% Line 335
    fun (_cor0) ->
	%% Line 336
	case apply 'get_content'/2
		 ('equiv', _cor0) of
	  %% Line 337
	  <[]> when 'true' ->
	      [[32]]
	  %% Line 338
	  <Es1> when 'true' ->
	      %% Line 339
	      case apply 'get_content'/2
		       ('expr', Es1) of
		%% Line 340
		<[]> when 'true' ->
		    [[32]]
		%% Line 341
		<[Expr|[]]> when 'true' ->
		    %% Line 342
		    [[69|[113|[117|[105|[118|[97|[108|[101|[110|[116|[32|[116|[111|[32]]]]]]]]]]]]]]|[Expr|[[46]|[[10]]]]]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'function_name'/1 =
    %% Line 347
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 348
	    apply 'get_attrval'/2
		('name', _cor0)
	in  let <_cor1> =
		%% Line 348
		apply 'get_attrval'/2
		    ('arity', _cor0)
	    in  let <_cor2> =
		    %% Line 348
		    [47|_cor1]
		in  %% Line 348
		    call 'erlang':'++'
			(_cor3, _cor2)
'label_anchor'/1 =
    %% Line 350
    fun (_cor0) ->
	%% Line 351
	case apply 'get_attrval'/2
		 ('label', _cor0) of
	  %% Line 352
	  <[]> when 'true' ->
	      []
	  %% Line 353
	  <Ref> when 'true' ->
	      [{'marker',[{'id',Ref}|[]],[]}|[[10]]]
	end
'label_anchor'/2 =
    %% Line 356
    fun (_cor1,_cor0) ->
	%% Line 357
	case apply 'get_attrval'/2
		 ('label', _cor0) of
	  %% Line 358
	  <[]> when 'true' ->
	      _cor1
	  %% Line 359
	  <Ref> when 'true' ->
	      {'p',[{'marker',[{'id',Ref}|[]],[]}|%% Line 360
						  [{'em',_cor1}|[]]]}
	end
'signature'/2 =
    %% Line 369
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 371
	    apply 'seq'/2
		(( 'arg'/1
		   -| [{'id',{0,0,'-signature/2-fun-0-'}}] ), _cor1)
	in  let <_cor3> =
		%% Line 371
		call 'erlang':'++'
		    (_cor2, [[41|[32|[45|[62|[32|[116|[101|[114|[109|[40|[41]]]]]]]]]]]|[[10]]])
	    in  %% Line 371
		[_cor0|[[40]|_cor3]]
'arg'/1 =
    %% Line 373
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,Es,_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor1> =
		  %% Line 374
		  apply 'get_text'/2
		      ('argName', Es)
	      in  %% Line 374
		  [_cor1|[]]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'arg',1}}] )
	    -| ['compiler_generated'] )
	end
'funcheader'/1 =
    %% Line 385
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 386
	  <Es> when 'true' ->
	      let <_cor3> =
		  %% Line 387
		  apply 'get_elem'/2
		      ('erlangName', Es)
	      in  let <_cor4> =
		      %% Line 387
		      apply 't_name'/1
			  (_cor3)
		  in  let <_cor1> =
			  %% Line 387
			  apply 'get_elem'/2
			      ('type', Es)
		      in  let <_cor2> =
			      %% Line 387
			      apply 't_utype'/1
				  (_cor1)
			  in  %% Line 387
			      [_cor4|_cor2]
	end
'local_types'/1 =
    %% Line 389
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 390
	  <Es> when 'true' ->
	      let <_cor1> =
		  %% Line 391
		  apply 'get_elem'/2
		      ('localdef', Es)
	      in  %% Line 391
		  apply 'local_defs2'/1
		      (_cor1)
	end
'local_defs2'/1 =
    %% Line 393
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 394
	  <Es> when 'true' ->
	      let <_cor6> =
		  %% Line 395
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[E|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'localdef'/1
					      (E)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [{'v',_cor4}|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Es)
		    -| ['list_comprehension'] )
	      in  %% Line 395
		  {'type',[[10]|_cor6]}
	end
'types'/1 =
    %% Line 400
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 401
	  <Ts> when 'true' ->
	      let <_cor3> =
		  %% Line 402
		  ( fun (_cor1) ->
			case _cor1 of
			  <{Name,E}> when 'true' ->
			      apply 'typedecl'/2
				  (Name, E)
			  ( <_cor2> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor2})
				  -| [{'function_name',{'-types/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-types/1-fun-0-'}}] )
	      in  let <Es> =
		      %% Line 402
		      call 'lists':'flatmap'
			  (_cor3, Ts)
		  in  %% Line 403
		      [[10]|%% Line 407
			    [{'p',[{'marker',[{'id',[116|[121|[112|[101|[115]]]]]}],[]}|[{'em',[[68|[97|[116|[97|[32|[84|[121|[112|[101|[115]]]]]]]]]]]}]]}|%% Line 409
																			    [[10]|[{'taglist',[[10]|Es]}|[]]]]]
	end
'typedecl'/2 =
    %% Line 415
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Name,{'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,Es,_cor14,_cor15,_cor16}> when 'true' ->
	      let <_cor2> =
		  %% Line 416
		  apply 'get_content'/2
		      ('typedef', Es)
	      in  let <_cor3> =
		      %% Line 416
		      apply 'typedef'/1
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 416
			  apply 'fulldesc'/1
			      (Es)
		      in  %% Line 416
			  [{'tag',_cor3}|[[10]|[{'item',_cor4}|[[10]]]]]
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'typedecl',2}}] )
	    -| ['compiler_generated'] )
	end
'type_name'/1 =
    %% Line 419
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Es,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_cor1> =
		  %% Line 420
		  apply 'get_content'/2
		      ('typedef', Es)
	      in  let <_cor2> =
		      %% Line 420
		      apply 'get_elem'/2
			  ('erlangName', _cor1)
		  in  %% Line 420
		      apply 't_name'/1
			  (_cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'type_name',1}}] )
	    -| ['compiler_generated'] )
	end
'typedef'/1 =
    %% Line 422
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 423
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <_cor4> =
		%% Line 423
		apply 't_name'/1
		    (_cor3)
	    in  let <_cor1> =
		    %% Line 424
		    apply 'get_content'/2
			('argtypes', _cor0)
		in  let <_cor2> =
			%% Line 424
			apply 'seq'/3
			    (( 't_utype_elem'/1
			       -| [{'id',{0,0,'-typedef/1-fun-0-'}}] ), _cor1, [[41]])
		    in  let <Name> =
			    %% Line 423
			    [_cor4|%% Line 424
				   [[40]|_cor2]]
			in  let <_cor12> =
				%% Line 425
				case apply 'get_elem'/2
					 ('type', _cor0) of
				  %% Line 426
				  <[]> when 'true' ->
				      [{'b',[[97|[98|[115|[116|[114|[97|[99|[116|[32|[100|[97|[116|[97|[116|[121|[112|[101]]]]]]]]]]]]]]]]]]}|[[58|[32]]|[{'tt',Name}|[]]]]
				  %% Line 427
				  <Type> when 'true' ->
				      let <_cor8> =
					  %% Line 428
					  apply 't_utype'/1
					      (Type)
				      in  let <_cor9> =
					      %% Line 428
					      [[32|[61|[32]]]|_cor8]
					  in  let <_cor10> =
						  %% Line 428
						  call 'erlang':'++'
						      (Name, _cor9)
					      in  %% Line 428
						  [{'tt',_cor10}|[]]
				end
			    in  let <_cor6> =
				    %% Line 430
				    apply 'get_elem'/2
					('localdef', _cor0)
				in  let <_cor7> =
					%% Line 430
					apply 'local_defs'/1
					    (_cor6)
				    in  %% Line 430
					call 'erlang':'++'
					    (_cor12, _cor7)
'local_defs'/1 =
    %% Line 432
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 433
	  <Es> when 'true' ->
	      let <_cor6> =
		  %% Line 434
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[E|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'localdef'/1
					      (E)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [{'li',[{'tt',_cor4}|[]]}|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Es)
		    -| ['list_comprehension'] )
	      in  %% Line 434
		  [[10]|[{'ul',_cor6}|[]]]
	end
'localdef'/1 =
    %% Line 436
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,Es,_cor16,_cor17,_cor18}> when 'true' ->
	      let <_cor7> =
		  %% Line 437
		  case apply 'get_elem'/2
			   ('typevar', Es) of
		    %% Line 438
		    <[]> when 'true' ->
			let <_cor4> =
			    %% Line 439
			    apply 'get_content'/2
				('abstype', Es)
			in  let <_cor5> =
				%% Line 439
				apply 't_abstype'/1
				    (_cor4)
			    in  %% Line 439
				apply 'label_anchor'/2
				    (_cor5, E)
		    %% Line 440
		    <[V|[]]> when 'true' ->
			%% Line 441
			apply 't_var'/1
			    (V)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor1> =
		      %% Line 443
		      apply 'get_elem'/2
			  ('type', Es)
		  in  let <_cor2> =
			  %% Line 443
			  apply 't_utype'/1
			      (_cor1)
		      in  let <_cor3> =
			      %% Line 443
			      [[32|[61|[32]]]|_cor2]
			  in  %% Line 443
			      call 'erlang':'++'
				  (_cor7, _cor3)
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'localdef',1}}] )
	    -| ['compiler_generated'] )
	end
'fulldesc'/1 =
    %% Line 445
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 446
	    apply 'get_content'/2
		('description', _cor0)
	in  %% Line 446
	    case apply 'get_content'/2
		     ('fullDescription', _cor1) of
	      %% Line 448
	      <[]> when 'true' ->
		  apply 'index_desc'/1
		      (_cor0)
	      %% Line 450
	      <Desc> when 'true' ->
		  %% Line 451
		  case apply 'find_first_p'/2
			   (Desc, []) of
		    <{Short,Long}> when 'true' ->
			%% Line 452
			[[10]|[{'p',Short}|call 'erlang':'++'
					       (Long, [[10]])]]
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	    end
'find_first_p'/2 =
    %% Line 455
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Long = [{'xmlElement','p',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}|_cor16],Short> when 'true' ->
	      let <_cor2> =
		  %% Line 456
		  call 'lists':'reverse'
		      (Short)
	      in  %% Line 456
		  {_cor2,Long}
	  %% Line 457
	  <[H|T],Short> when 'true' ->
	      %% Line 458
	      apply 'find_first_p'/2
		  (T, [H|Short])
	  %% Line 459
	  <[],Short> when 'true' ->
	      let <_cor3> =
		  %% Line 460
		  call 'lists':'reverse'
		      (Short)
	      in  %% Line 460
		  {_cor3,[]}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'find_first_p',2}}] )
	    -| ['compiler_generated'] )
	end
'sees1'/1 =
    %% Line 463
    fun (_cor0) ->
	%% Line 464
	case apply 'get_elem'/2
		 ('see', _cor0) of
	  %% Line 465
	  <[]> when 'true' ->
	      []
	  %% Line 466
	  <Es1> when 'true' ->
	      let <_cor1> =
		  %% Line 467
		  apply 'seq'/3
		      (( 'see'/1
			 -| [{'id',{0,0,'-sees1/1-fun-0-'}}] ), Es1, [])
	      in  %% Line 467
		  {'section',[{'title',[[83|[101|[101|[32|[97|[108|[115|[111]]]]]]]]]}|[{'p',_cor1}|[]]]}
	end
'sees'/1 =
    %% Line 470
    fun (_cor0) ->
	%% Line 471
	case apply 'get_elem'/2
		 ('see', _cor0) of
	  %% Line 472
	  <[]> when 'true' ->
	      []
	  %% Line 473
	  <Es1> when 'true' ->
	      let <_cor1> =
		  %% Line 474
		  apply 'seq'/3
		      (( 'see'/1
			 -| [{'id',{0,0,'-sees/1-fun-0-'}}] ), Es1, [[46]])
	      in  let <_cor2> =
		      %% Line 474
		      [{'em',[[83|[101|[101|[32|[97|[108|[115|[111|[58]]]]]]]]]]}|[[32]|_cor1]]
		  in  %% Line 474
		      [{'p',_cor2}|%% Line 475
				   [[10]]]
	end
'see'/1 =
    %% Line 478
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,Es,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 479
	      apply 'see'/2
		  (E, Es)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'see',1}}] )
	    -| ['compiler_generated'] )
	end
'see'/2 =
    %% Line 481
    fun (_cor1,_cor0) ->
	%% Line 482
	case apply 'get_attrval'/2
		 ('href', _cor1) of
	  %% Line 483
	  <[]> when 'true' ->
	      _cor0
	  %% Line 484
	  <Ref> when 'true' ->
	      %% Line 485
	      case call 'lists':'reverse'
		       (Ref) of
		%% Line 486
		<[108|[109|[103|[115|[46|[112|[112|[97|[95|Ppa]]]]]]]]]> when 'true' ->
		    let <App> =
			%% Line 487
			call 'lists':'reverse'
			    (Ppa)
		    in  let <_cor3> =
			    %% Line 488
			    call 'erlang':'++'
				(App, [95|[97|[112|[112]]]])
			in  %% Line 488
			    [{'seealso',[{'marker',_cor3}|[]],[App|[]]}|[[40|[54|[41]]]]]
		%% Line 489
		<[108|[109|[103|[115|[46|Dom]]]]]> when 'true' ->
		    let <Mod> =
			%% Line 490
			call 'lists':'reverse'
			    (Dom)
		    in  %% Line 491
			[{'seealso',[{'marker',Mod}|[]],[Mod|[]]}|[[40|[51|[41]]]]]
		%% Line 492
		<_cor9> when 'true' ->
		    %% Line 493
		    [{'seealso',[{'marker',Ref}|[]],_cor0}|[]]
	      end
	end
'equiv'/1 =
    %% Line 497
    fun (_cor0) ->
	%% Line 498
	case apply 'get_content'/2
		 ('equiv', _cor0) of
	  %% Line 499
	  <[]> when 'true' ->
	      [[32]]
	  %% Line 500
	  <Es1> when 'true' ->
	      %% Line 501
	      case apply 'get_content'/2
		       ('expr', Es1) of
		%% Line 502
		<[]> when 'true' ->
		    []
		%% Line 503
		<[Expr|[]]> when 'true' ->
		    let <Expr1> =
			%% Line 506
			[Expr|[]]
		    in  let <_cor4> =
			    %% Line 507
			    case apply 'get_elem'/2
				     ('see', Es1) of
			      %% Line 508
			      <[]> when 'true' ->
				  %% Line 509
				  {'c',Expr1}
			      %% Line 510
			      <[E = {'xmlElement',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}|[]]> when 'true' ->
				  %% Line 512
				  case apply 'get_attrval'/2
					   ('href', E) of
				    %% Line 513
				    <[]> when 'true' ->
					%% Line 514
					{'c',Expr1}
				    %% Line 515
				    <Ref> when 'true' ->
					%% Line 516
					{'seealso',[{'marker',Ref}|[]],Expr1}
				  end
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor3})
				-| ['compiler_generated'] )
			    end
			in  %% Line 519
			    [{'p',[[69|[113|[117|[105|[118|[97|[108|[101|[110|[116|[32|[116|[111|[32]]]]]]]]]]]]]]|[_cor4|[[46]]]]}|[[10]]]
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'copyright'/1 =
    %% Line 528
    fun (_cor0) ->
	%% Line 529
	case apply 'get_content'/2
		 ('copyright', _cor0) of
	  %% Line 530
	  <[]> when 'true' ->
	      []
	  %% Line 531
	  <Es1> when 'true' ->
	      %% Line 532
	      [{'p',[[67|[111|[112|[121|[114|[105|[103|[104|[116|[32|[169|[32]]]]]]]]]]]]|Es1]}|[[10]]]
	end
'version'/1 =
    %% Line 535
    fun (_cor0) ->
	%% Line 536
	case apply 'get_content'/2
		 ('version', _cor0) of
	  %% Line 537
	  <[]> when 'true' ->
	      []
	  %% Line 538
	  <Es1> when 'true' ->
	      %% Line 539
	      [{'p',[{'b',[[86|[101|[114|[115|[105|[111|[110|[58]]]]]]]]]}|[[32]|Es1]]}|[[10]]]
	end
'since'/1 =
    %% Line 542
    fun (_cor0) ->
	%% Line 543
	case apply 'get_content'/2
		 ('since', _cor0) of
	  %% Line 544
	  <[]> when 'true' ->
	      []
	  %% Line 545
	  <Es1> when 'true' ->
	      %% Line 546
	      [{'p',[{'b',[[73|[110|[116|[114|[111|[100|[117|[99|[101|[100|[32|[105|[110|[58]]]]]]]]]]]]]]]}|[[32]|Es1]]}|[[10]]]
	end
'deprecated'/2 =
    %% Line 549
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 550
	    apply 'get_content'/2
		('deprecated', _cor1)
	in  let <Es1> =
		%% Line 550
		apply 'get_content'/2
		    ('description', _cor2)
	    in  %% Line 551
		case apply 'get_content'/2
			 ('fullDescription', Es1) of
		  %% Line 552
		  <[]> when 'true' ->
		      []
		  %% Line 553
		  <Es2> when 'true' ->
		      let <_cor4> =
			  %% Line 554
			  call 'erlang':'++'
			      (_cor0, [32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[58]]]]]]]]]]]]]]])
		      in  let <_cor5> =
			      %% Line 554
			      call 'erlang':'++'
				  ([84|[104|[105|[115|[32]]]]], _cor4)
			  in  %% Line 554
			      [{'p',[{'b',[_cor5|[]]}|[[32]|Es2]]}|%% Line 555
								   [[10]]]
		end
'authors'/1 =
    %% Line 572
    fun (_cor0) ->
	%% Line 573
	case apply 'get_elem'/2
		 ('author', _cor0) of
	  %% Line 574
	  <[]> when 'true' ->
	      [[10]|[{'aname',[[32]]}|[[10]|[{'email',[[32]]}]]]]
	  %% Line 575
	  <Es1> when 'true' ->
	      let <_cor1> =
		  apply 'seq'/3
		      (( 'author'/1
			 -| [{'id',{0,0,'-authors/1-fun-0-'}}] ), Es1, [])
	      in  [[10]|_cor1]
	end
'author'/1 =
    %% Line 587
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      let <_cor2> =
		  %% Line 588
		  case apply 'get_attrval'/2
			   ('name', E) of
		    %% Line 589
		    <[]> when 'true' ->
			[32]
		    %% Line 590
		    <N> when 'true' ->
			N
		  end
	      in  let <_cor5> =
		      %% Line 592
		      case apply 'get_attrval'/2
			       ('email', E) of
			%% Line 593
			<[]> when 'true' ->
			    [32]
			%% Line 594
			<M> when 'true' ->
			    M
		      end
		  in  %% Line 596
		      [[10]|[{'aname',[_cor2|[]]}|[[10]|[{'email',[_cor5|[]]}|[]]]]]
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'author',1}}] )
	    -| ['compiler_generated'] )
	end
'references'/1 =
    %% Line 615
    fun (_cor0) ->
	%% Line 616
	case apply 'get_elem'/2
		 ('reference', _cor0) of
	  %% Line 617
	  <[]> when 'true' ->
	      []
	  %% Line 618
	  <Es1> when 'true' ->
	      let <_cor5> =
		  %% Line 620
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[{'xmlElement',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,C,_cor15,_cor16,_cor17}|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [{'li',C}|_cor4]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Es1)
		    -| ['list_comprehension'] )
	      in  %% Line 619
		  [{'p',[{'b',[[82|[101|[102|[101|[114|[101|[110|[99|[101|[115]]]]]]]]]]]}|%% Line 620
											   [{'ul',_cor5}|[]]]}|%% Line 621
													       [[10]]]
	end
't_name'/1 =
    %% Line 624
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      let <N> =
		  %% Line 625
		  apply 'get_attrval'/2
		      ('name', E)
	      in  %% Line 626
		  case apply 'get_attrval'/2
			   ('module', E) of
		    %% Line 627
		    <[]> when 'true' ->
			N
		    %% Line 628
		    <M> when 'true' ->
			let <_cor2> =
			    %% Line 629
			    [58|N]
			in  let <S> =
				%% Line 629
				call 'erlang':'++'
				    (M, _cor2)
			    in  %% Line 630
				case apply 'get_attrval'/2
					 ('app', E) of
				  %% Line 631
				  <[]> when 'true' ->
				      S
				  %% Line 632
				  <A> when 'true' ->
				      let <_cor4> =
					  [47|S]
				      in  let <_cor5> =
					      call 'erlang':'++'
						  (A, _cor4)
					  in  [47|[47|_cor5]]
				end
		  end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'t_name',1}}] )
	    -| ['compiler_generated'] )
	end
't_utype'/1 =
    %% Line 636
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      %% Line 637
	      apply 't_utype_elem'/1
		  (E)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t_utype',1}}] )
	    -| ['compiler_generated'] )
	end
't_utype_elem'/1 =
    %% Line 639
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Es,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 640
	      case apply 'get_attrval'/2
		       ('name', E) of
		%% Line 641
		<[]> when 'true' ->
		    apply 't_type'/1
			(Es)
		%% Line 642
		<Name> when 'true' ->
		    let <T> =
			%% Line 643
			apply 't_type'/1
			    (Es)
		    in  %% Line 644
			case T of
			  %% Line 645
			  <[_cor16|[]]>
			      when call 'erlang':'=:='
				    (_cor16,
				     Name) ->
			      T
			  %% Line 646
			  <_cor17> when 'true' ->
			      let <_cor2> =
				  [[58|[58]]|T]
			      in  [Name|_cor2]
			end
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'t_utype_elem',1}}] )
	    -| ['compiler_generated'] )
	end
't_type'/1 =
    %% Line 650
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement','typevar',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|[]]> when 'true' ->
	      %% Line 651
	      apply 't_var'/1
		  (E)
	  %% Line 652
	  <[E = {'xmlElement','atom',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}|[]]> when 'true' ->
	      %% Line 653
	      apply 't_atom'/1
		  (E)
	  %% Line 654
	  <[E = {'xmlElement','integer',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}|[]]> when 'true' ->
	      %% Line 655
	      apply 't_integer'/1
		  (E)
	  %% Line 656
	  <[E = {'xmlElement','float',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}|[]]> when 'true' ->
	      %% Line 657
	      apply 't_float'/1
		  (E)
	  %% Line 658
	  <[{'xmlElement','nil',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}|[]]> when 'true' ->
	      %% Line 659
	      apply 't_nil'/0
		  ()
	  %% Line 660
	  <[{'xmlElement','list',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,Es,_cor60,_cor61,_cor62}|[]]> when 'true' ->
	      %% Line 661
	      apply 't_list'/1
		  (Es)
	  %% Line 662
	  <[{'xmlElement','tuple',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,Es,_cor69,_cor70,_cor71}|[]]> when 'true' ->
	      %% Line 663
	      apply 't_tuple'/1
		  (Es)
	  %% Line 664
	  <[{'xmlElement','fun',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,Es,_cor78,_cor79,_cor80}|[]]> when 'true' ->
	      %% Line 665
	      apply 't_fun'/1
		  (Es)
	  %% Line 666
	  <[E = {'xmlElement','abstype',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,Es,_cor87,_cor88,_cor89}|[]]> when 'true' ->
	      let <T> =
		  %% Line 667
		  apply 't_abstype'/1
		      (Es)
	      in  %% Line 669
		  case apply 'get_attrval'/2
			   ('href', E) of
		    %% Line 670
		    <[]> when 'true' ->
			T
		    %% Line 672
		    <_X_Ref> when 'true' ->
			T
		  end
	  %% Line 674
	  <[{'xmlElement','union',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,Es,_cor96,_cor97,_cor98}|[]]> when 'true' ->
	      %% Line 675
	      apply 't_union'/1
		  (Es)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'t_type',1}}] )
	    -| ['compiler_generated'] )
	end
't_var'/1 =
    %% Line 677
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 678
	    apply 'get_attrval'/2
		('name', _cor0)
	in  %% Line 678
	    [_cor1|[]]
't_atom'/1 =
    %% Line 681
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 682
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 682
	    [_cor1|[]]
't_integer'/1 =
    %% Line 684
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 685
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 685
	    [_cor1|[]]
't_float'/1 =
    %% Line 687
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 688
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 688
	    [_cor1|[]]
't_nil'/0 =
    %% Line 690
    fun () ->
	%% Line 691
	[[91|[93]]]
't_list'/1 =
    %% Line 693
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 694
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 694
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 694
		    call 'erlang':'++'
			(_cor2, [[93]])
		in  %% Line 694
		    [[91]|_cor3]
't_tuple'/1 =
    %% Line 696
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 697
	    apply 'seq'/3
		(( 't_utype_elem'/1
		   -| [{'id',{0,0,'-t_tuple/1-fun-0-'}}] ), _cor0, [[125]])
	in  %% Line 697
	    [[123]|_cor1]
't_fun'/1 =
    %% Line 699
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 700
	    apply 'get_content'/2
		('argtypes', _cor0)
	in  let <_cor1> =
		%% Line 701
		apply 'get_elem'/2
		    ('type', _cor0)
	    in  let <_cor2> =
		    %% Line 701
		    apply 't_utype'/1
			(_cor1)
		in  let <_cor3> =
			%% Line 701
			[[41|[32|[45|[62|[32]]]]]|_cor2]
		    in  let <_cor5> =
			    %% Line 700
			    apply 'seq'/3
				(( 't_utype_elem'/1
				   -| [{'id',{0,0,'-t_fun/1-fun-0-'}}] ), _cor4, _cor3)
			in  %% Line 700
			    [[40]|_cor5]
't_abstype'/1 =
    %% Line 703
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 706
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <_cor2> =
		%% Line 706
		apply 't_name'/1
		    (_cor1)
	    in  %% Line 706
		case apply 'split_at_colon'/2
			 (_cor2, []) of
		  %% Line 707
		  <{Mod,Type}> when 'true' ->
		      let <_cor3> =
			  %% Line 709
			  apply 'get_elem'/2
			      ('type', _cor0)
		      in  let <_cor4> =
			      %% Line 709
			      apply 'seq'/3
				  (( 't_utype_elem'/1
				     -| [{'id',{0,0,'-t_abstype/1-fun-0-'}}] ), _cor3, [[41]])
			  in  let <_cor5> =
				  %% Line 709
				  call 'erlang':'++'
				      (_cor4, %% Line 710
					      [[32|[40|[115|[101|[101|[32|[109|[111|[100|[117|[108|[101|[32]]]]]]]]]]]]]|[Mod|[[41]]]])
			      in  %% Line 708
				  [Type|[[40]|_cor5]]
		  %% Line 711
		  <Type> when 'true' ->
		      let <_cor6> =
			  %% Line 713
			  apply 'get_elem'/2
			      ('type', _cor0)
		      in  let <_cor7> =
			      %% Line 713
			      apply 'seq'/3
				  (( 't_utype_elem'/1
				     -| [{'id',{0,0,'-t_abstype/1-fun-1-'}}] ), _cor6, [[41]])
			  in  %% Line 712
			      [Type|[[40]|_cor7]]
		end
'split_at_colon'/2 =
    %% Line 717
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Rest = [58|[58|_cor6]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 718
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 718
		  call 'erlang':'++'
		      (_cor2, Rest)
	  %% Line 719
	  <[58|Type],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 720
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 720
		  {_cor3,Type}
	  %% Line 721
	  <[Char|Rest],Acc> when 'true' ->
	      %% Line 722
	      apply 'split_at_colon'/2
		  (Rest, [Char|Acc])
	  %% Line 723
	  <[],Acc> when 'true' ->
	      %% Line 724
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'split_at_colon',2}}] )
	    -| ['compiler_generated'] )
	end
't_union'/1 =
    %% Line 738
    fun (_cor0) ->
	%% Line 739
	apply 'seq'/4
	    (( 't_utype_elem'/1
	       -| [{'id',{0,0,'-t_union/1-fun-0-'}}] ), _cor0, [32|[124|[32]]], [])
'seq'/2 =
    %% Line 741
    fun (_cor1,_cor0) ->
	%% Line 742
	apply 'seq'/3
	    (_cor1, _cor0, [])
'seq'/3 =
    %% Line 744
    fun (_cor2,_cor1,_cor0) ->
	%% Line 745
	apply 'seq'/4
	    (_cor2, _cor1, [44|[32]], _cor0)
'seq'/4 =
    %% Line 747
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[E|[]],_X_Sep,Tail> when 'true' ->
	      let <_cor4> =
		  %% Line 748
		  apply F
		      (E)
	      in  %% Line 748
		  call 'erlang':'++'
		      (_cor4, Tail)
	  %% Line 749
	  <F,[E|Es],Sep,Tail> when 'true' ->
	      let <_cor7> =
		  %% Line 750
		  apply F
		      (E)
	      in  let <_cor5> =
		      %% Line 750
		      apply 'seq'/4
			  (F, Es, Sep, Tail)
		  in  let <_cor6> =
			  %% Line 750
			  [Sep|_cor5]
		      in  %% Line 750
			  call 'erlang':'++'
			      (_cor7, _cor6)
	  %% Line 751
	  <_X_F,[],_X_Sep,Tail> when 'true' ->
	      %% Line 752
	      Tail
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'seq',4}}] )
	    -| ['compiler_generated'] )
	end
'get_elem'/2 =
    %% Line 754
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[E = {'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}|Es]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 755
		  apply 'get_elem'/2
		      (Name, Es)
	      in  %% Line 755
		  [E|_cor2]
	  %% Line 756
	  <Name,[_cor16|Es]> when 'true' ->
	      %% Line 757
	      apply 'get_elem'/2
		  (Name, Es)
	  %% Line 758
	  <_cor17,[]> when 'true' ->
	      %% Line 759
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_elem',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attr'/2 =
    %% Line 761
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[A = {'xmlAttribute',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|As]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 762
		  apply 'get_attr'/2
		      (Name, As)
	      in  %% Line 762
		  [A|_cor2]
	  %% Line 763
	  <Name,[_cor14|As]> when 'true' ->
	      %% Line 764
	      apply 'get_attr'/2
		  (Name, As)
	  %% Line 765
	  <_cor15,[]> when 'true' ->
	      %% Line 766
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attr',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attrval'/2 =
    %% Line 768
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,As,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 769
	      case apply 'get_attr'/2
		       (Name, As) of
		%% Line 770
		<[{'xmlAttribute',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,V,_cor22}|[]]> when 'true' ->
		    %% Line 771
		    V
		%% Line 772
		<[]> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attrval',2}}] )
	    -| ['compiler_generated'] )
	end
'get_content'/2 =
    %% Line 775
    fun (_cor1,_cor0) ->
	%% Line 776
	case apply 'get_elem'/2
		 (_cor1, _cor0) of
	  %% Line 777
	  <[{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Es1,_cor12,_cor13,_cor14}|[]]> when 'true' ->
	      %% Line 778
	      Es1
	  %% Line 779
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_text'/2 =
    %% Line 782
    fun (_cor1,_cor0) ->
	%% Line 783
	case apply 'get_content'/2
		 (_cor1, _cor0) of
	  %% Line 784
	  <[{'xmlText',_cor5,_cor6,_cor7,Text,_cor8}|[]]> when 'true' ->
	      %% Line 785
	      Text
	  %% Line 786
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'xml'/3 =
    %% Line 792
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 794
	    [[10]|%% Line 795
		  [{'title',[_cor2|[]]}|%% Line 796
					[[10]|_cor1]]]
	in  %% Line 793
	    {'html',[[10]|%% Line 794
			  [{'head',_cor3}|%% Line 797
					  [[10]|%% Line 798
						[{'body',[{'bgcolor',[119|[104|[105|[116|[101]]]]]}],_cor0}|%% Line 799
													    [[10]]]]]]}
'type'/1 =
    %% Line 804
    fun (_cor0) ->
	%% Line 805
	apply 'type'/2
	    (_cor0, [])
'type'/2 =
    %% Line 810
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 811
	    apply 't_utype_elem'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 811
		apply 'local_defs'/1
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 811
		    call 'erlang':'++'
			(_cor3, _cor2)
		in  %% Line 811
		    call 'xmerl':'export_simple_content'
			(_cor4, %% Line 812
				'xmerl_otpsgml')
'package'/2 =
    %% Line 815
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement','package',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,Es,_cor32,_cor33,_cor34},Options> when 'true' ->
	      let <Opts> =
		  %% Line 816
		  apply 'init_opts'/2
		      (E, Options)
	      in  let <Name> =
		      %% Line 817
		      apply 'get_text'/2
			  ('packageName', Es)
		  in  let <Title> =
			  %% Line 818
			  call 'io_lib':'fwrite'
			      ([80|[97|[99|[107|[97|[103|[101|[32|[126|[115]]]]]]]]]], [Name|[]])
		      in  let <Desc> =
			      %% Line 819
			      apply 'get_content'/2
				  ('description', Es)
			  in  let <FullDesc> =
				  %% Line 821
				  apply 'get_content'/2
				      ('fullDescription', Desc)
			      in  let <_cor19> =
				      %% Line 824
				      apply 'copyright'/1
					  (Es)
				  in  let <_cor17> =
					  %% Line 825
					  apply 'deprecated'/2
					      (Es, [112|[97|[99|[107|[97|[103|[101]]]]]]])
				      in  let <_cor15> =
					      %% Line 826
					      apply 'version'/1
						  (Es)
					  in  let <_cor13> =
						  %% Line 827
						  apply 'since'/1
						      (Es)
					      in  let <_cor11> =
						      %% Line 828
						      apply 'authors'/1
							  (Es)
						  in  let <_cor9> =
							  %% Line 829
							  apply 'references'/1
							      (Es)
						      in  let <_cor7> =
							      %% Line 830
							      apply 'sees'/1
								  (Es)
							  in  let <_cor8> =
								  %% Line 831
								  call 'erlang':'++'
								      (_cor7, FullDesc)
							      in  let <_cor10> =
								      %% Line 830
								      call 'erlang':'++'
									  (_cor9, _cor8)
								  in  let <_cor12> =
									  %% Line 829
									  call 'erlang':'++'
									      (_cor11, _cor10)
								      in  let <_cor14> =
									      %% Line 828
									      call 'erlang':'++'
										  (_cor13, _cor12)
									  in  let <_cor16> =
										  %% Line 827
										  call 'erlang':'++'
										      (_cor15, _cor14)
									      in  let <_cor18> =
										      %% Line 826
										      call 'erlang':'++'
											  (_cor17, _cor16)
										  in  let <_cor20> =
											  %% Line 825
											  call 'erlang':'++'
											      (_cor19, _cor18)
										      in  let <Body> =
											      %% Line 822
											      [[10]|[{'h1',[Title|[]]}|%% Line 824
														       [[10]|_cor20]]]
											  in  let <_cor22> =
												  %% Line 832
												  apply 'stylesheet'/1
												      (Opts)
											      in  let <XML> =
												      %% Line 832
												      apply 'xml'/3
													  (Title, _cor22, Body)
												  in  %% Line 833
												      call 'xmerl':'export_simple'
													  ([XML|[]], 'xmerl_otpsgml', [])
	  ( <_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24})
		  -| [{'function_name',{'package',2}}] )
	    -| ['compiler_generated'] )
	end
'overview'/2 =
    %% Line 835
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement','overview',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,Es,_cor29,_cor30,_cor31},Options> when 'true' ->
	      let <Opts> =
		  %% Line 836
		  apply 'init_opts'/2
		      (E, Options)
	      in  let <Title> =
		      %% Line 837
		      apply 'get_text'/2
			  ('title', Es)
		  in  let <Desc> =
			  %% Line 838
			  apply 'get_content'/2
			      ('description', Es)
		      in  let <FullDesc> =
			      %% Line 840
			      apply 'get_content'/2
				  ('fullDescription', Desc)
			  in  let <_cor16> =
				  %% Line 843
				  apply 'copyright'/1
				      (Es)
			      in  let <_cor14> =
				      %% Line 844
				      apply 'version'/1
					  (Es)
				  in  let <_cor12> =
					  %% Line 845
					  apply 'since'/1
					      (Es)
				      in  let <_cor10> =
					      %% Line 846
					      apply 'authors'/1
						  (Es)
					  in  let <_cor8> =
						  %% Line 847
						  apply 'references'/1
						      (Es)
					      in  let <_cor6> =
						      %% Line 848
						      apply 'sees'/1
							  (Es)
						  in  let <_cor7> =
							  %% Line 849
							  call 'erlang':'++'
							      (_cor6, FullDesc)
						      in  let <_cor9> =
							      %% Line 848
							      call 'erlang':'++'
								  (_cor8, _cor7)
							  in  let <_cor11> =
								  %% Line 847
								  call 'erlang':'++'
								      (_cor10, _cor9)
							      in  let <_cor13> =
								      %% Line 846
								      call 'erlang':'++'
									  (_cor12, _cor11)
								  in  let <_cor15> =
									  %% Line 845
									  call 'erlang':'++'
									      (_cor14, _cor13)
								      in  let <_cor17> =
									      %% Line 844
									      call 'erlang':'++'
										  (_cor16, _cor15)
									  in  let <Body> =
										  %% Line 841
										  [[10]|[{'h1',[Title|[]]}|%% Line 843
													   [[10]|_cor17]]]
									      in  let <_cor19> =
										      %% Line 850
										      apply 'stylesheet'/1
											  (Opts)
										  in  let <XML> =
											  %% Line 850
											  apply 'xml'/3
											      (Title, _cor19, Body)
										      in  %% Line 851
											  call 'xmerl':'export_simple'
											      ([XML|[]], 'xmerl_otpsgml', [])
	  ( <_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21})
		  -| [{'function_name',{'overview',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('otpsgml_layout')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('otpsgml_layout', _cor0)
end