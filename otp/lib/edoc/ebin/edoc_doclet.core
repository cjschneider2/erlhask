module 'edoc_doclet' ['module_info'/0,
		      'module_info'/1,
		      'run'/2]
    attributes []
'run'/2 =
    %% Line 117
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cmd = {'doclet_gen',_cor16,_cor17,_cor18,_cor19,_cor20},Ctxt> when 'true' ->
	      %% Line 118
	      apply 'gen'/6
		  (_cor16, _cor17, _cor18, _cor19, _cor20, %% Line 123
							   Ctxt)
	  %% Line 124
	  <Cmd = {'doclet_toc',_cor46,_cor47},Ctxt> when 'true' ->
	      %% Line 125
	      apply 'toc'/2
		  (_cor46, Ctxt)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'run',2}}] )
	    -| ['compiler_generated'] )
	end
'gen'/6 =
    %% Line 127
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 128
	( case _cor0 of
	    ( <( {'context',_rec6,_cor27,_cor28}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Title> =
		      %% Line 131
		      apply 'title'/2
			  (_cor4, _cor28)
		  in  let <CSS> =
			  %% Line 132
			  apply 'stylesheet'/1
			      (_cor28)
		      in  %% Line 133
			  case apply 'sources'/5
				   (_cor5, _rec6, _cor2, _cor27, _cor28) of
			    <{Modules1,Error}> when 'true' ->
				do  %% Line 134
				    apply 'modules_frame'/4
					(_rec6, Modules1, Title, CSS)
				    do  %% Line 135
					apply 'packages'/5
					    (_cor3, _rec6, _cor1, _cor27, _cor28)
					do  %% Line 136
					    apply 'packages_frame'/4
						(_rec6, _cor3, Title, CSS)
					    do  %% Line 137
						apply 'overview'/4
						    (_rec6, Title, _cor27, _cor28)
						let <_cor18> =
						    %% Line 138
						    call 'erlang':'length'
							(_cor3)
						in  let <_cor19> =
							%% Line 138
							call 'erlang':'>'
							    (_cor18, 1)
						    in  do  %% Line 138
							    apply 'index_file'/3
								(_rec6, _cor19, Title)
							    do  %% Line 139
								call 'edoc_lib':'write_info_file'
								    (_cor4, _cor3, Modules1, _rec6)
								do  %% Line 140
								    apply 'copy_stylesheet'/2
									(_rec6, _cor28)
								    do  %% Line 141
									apply 'copy_image'/1
									    (_rec6)
									%% Line 143
									case Error of
									  %% Line 144
									  <'true'> when 'true' ->
									      call 'erlang':'exit'
										  ('error')
									  %% Line 145
									  <'false'> when 'true' ->
									      'ok'
									  ( <_cor20> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor20})
									    -| ['compiler_generated'] )
									end
			    ( <_cor17> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor17})
			      -| ['compiler_generated'] )
			  end
	      -| ['compiler_generated'] )
	    ( <_cor29> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','context'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'title'/2 =
    %% Line 152
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 154
	    case <> of
	      <>
		  when call 'erlang':'=:='
			(_cor1,
			 []) ->
		  %% Line 155
		  [79|[118|[101|[114|[118|[105|[101|[119]]]]]]]]
	      %% Line 156
	      <> when 'true' ->
		  %% Line 157
		  call 'io_lib':'fwrite'
		      ([65|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[58|[32|[126|[115]]]]]]]]]]]]]]], [_cor1|[]])
	    end
	in  %% Line 153
	    call 'proplists':'get_value'
		('title', _cor0, _cor2)
'sources'/5 =
    %% Line 168
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Suffix> =
	    %% Line 169
	    call 'proplists':'get_value'
		('file_suffix', _cor0, %% Line 170
				       [46|[104|[116|[109|[108]]]]])
	in  let <Private> =
		%% Line 171
		call 'proplists':'get_bool'
		    ('private', _cor0)
	    in  let <Hidden> =
		    %% Line 172
		    call 'proplists':'get_bool'
			('hidden', _cor0)
		in  let <_cor13> =
			%% Line 173
			( fun (_cor10,_cor9) ->
			      case <_cor10,_cor9> of
				<Src,{Set,Error}> when 'true' ->
				    %% Line 174
				    apply 'source'/9
					(Src, _cor3, Suffix, _cor1, Set, %% Line 175
									 Private, %% Line 175
										  Hidden, %% Line 175
											  Error, _cor0)
				( <_cor12,_cor11> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor12,_cor11})
					-| [{'function_name',{'-sources/5-fun-0-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-sources/5-fun-0-'}}] )
		    in  let <_cor8> =
			    %% Line 177
			    call 'sets':'new'
				()
			in  %% Line 173
			    case call 'lists':'foldl'
				     (_cor13, %% Line 177
					      {_cor8,'false'}, _cor4) of
			      <{Ms,E}> when 'true' ->
				  let <_cor20> =
				      %% Line 178
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor17) ->
						    case _cor17 of
						      <[M|_cor16]> when 'true' ->
							  ( case call 'sets':'is_element'
								     (M, Ms) of
							      <'true'> when 'true' ->
								  let <_cor18> =
								      apply 'lc$^0'/1
									  (_cor16)
								  in  ( [M|_cor18]
									-| ['compiler_generated'] )
							      ( <'false'> when 'true' ->
								    apply 'lc$^0'/1
									(_cor16)
								-| ['compiler_generated'] )
							      ( <_cor19> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor19})
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor17> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor17})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(_cor2)
					-| ['list_comprehension'] )
				  in  %% Line 178
				      {_cor20,E}
			      ( <_cor14> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor14})
				-| ['compiler_generated'] )
			    end
'source'/9 =
    %% Line 185
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{M,P,Name,Path},Dir,Suffix,Env,Set,Private,Hidden,%% Line 186
							     Error,%% Line 186
								   Options> when 'true' ->
	      let <File> =
		  %% Line 187
		  call 'filename':'join'
		      (Path, Name)
	      in  let <_cor11> =
		      catch
			  let <_cor10> =
			      %% Line 188
			      call 'edoc':'get_doc'
				  (File, Env, Options)
			  in  %% Line 188
			      {'ok',_cor10}
		  in  %% Line 188
		      case _cor11 of
			%% Line 189
			<{'ok',{Module,Doc}}> when 'true' ->
			    do  %% Line 190
				apply 'check_name'/4
				    (Module, M, P, File)
				let <_cor14> =
				    %% Line 191
				    apply 'is_private'/1
					(Doc)
				in  let <_cor16> =
					%% Line 191
					( case _cor14 of
					    ( <'false'> when 'true' ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <'true'> when 'true' ->
						  Private
					      -| ['compiler_generated'] )
					    ( <_cor_variable> when 'true' ->
						  call 'erlang':'error'
						      ('badarg')
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    in  let <_cor21> =
					    %% Line 192
					    ( case _cor16 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      ( case apply 'is_hidden'/1
								 (Doc) of
							  ( <'false'> when 'true' ->
								'true'
							    -| ['compiler_generated'] )
							  ( <'true'> when 'true' ->
								Hidden
							    -| ['compiler_generated'] )
							  ( <_cor_variable> when 'true' ->
								call 'erlang':'error'
								    ('badarg')
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_cor12> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor12}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 191
					    case _cor21 of
					      %% Line 193
					      <'true'> when 'true' ->
						  let <Text> =
						      %% Line 194
						      call 'edoc':'layout'
							  (Doc, Options)
						  in  let <_cor23> =
							  %% Line 195
							  call 'erlang':'atom_to_list'
							      (M)
						      in  let <Name1> =
							      %% Line 195
							      call 'erlang':'++'
								  (_cor23, Suffix)
							  in  let <_cor25> =
								  %% Line 196
								  apply 'encoding'/1
								      (Doc)
							      in  let <Encoding> =
								      %% Line 196
								      [{'encoding',_cor25}|[]]
								  in  do  %% Line 197
									  call 'edoc_lib':'write_file'
									      (Text, Dir, Name1, P, Encoding)
									  let <_cor27> =
									      %% Line 198
									      call 'sets':'add_element'
										  (Module, Set)
									  in  %% Line 198
									      {_cor27,Error}
					      %% Line 199
					      <'false'> when 'true' ->
						  %% Line 200
						  {Set,Error}
					      ( <_cor28> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor28})
						-| ['compiler_generated'] )
					    end
			%% Line 202
			<R> when 'true' ->
			    do  %% Line 203
				call 'edoc_report':'report'
				    ([115|[107|[105|[112|[112|[105|[110|[103|[32|[115|[111|[117|[114|[99|[101|[32|[102|[105|[108|[101|[32|[39|[126|[116|[115|[39|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[R|[15]]])
				%% Line 204
				{Set,'true'}
		      end
	  ( <_cor38,_cor37,_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'source',9}}] )
	    -| ['compiler_generated'] )
	end
'check_name'/4 =
    %% Line 207
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 211
	    case _cor3 of
	      %% Line 212
	      <[63|_cor12]> when 'true' ->
		  'ok'
	      %% Line 217
	      <_cor13> when 'true' ->
		  %% Line 218
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (_cor3,
			       _cor2) ->
			%% Line 219
			call 'edoc_report':'warning'
			    ([102|[105|[108|[101|[32|[39|[126|[116|[115|[39|[32|[97|[99|[116|[117|[97|[108|[108|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[109|[111|[100|[117|[108|[101|[32|[39|[126|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 220
																																     [_cor0|[_cor3|[]]])
		    %% Line 221
		    <> when 'true' ->
			'ok'
		  end
	    end
	    %% Line 225
	    case <> of
	      <>
		  when call 'erlang':'=/='
			('',
			 _cor1) ->
		  %% Line 226
		  call 'edoc_report':'warning'
		      ([102|[105|[108|[101|[32|[39|[126|[116|[115|[39|[32|[98|[101|[108|[111|[110|[103|[115|[32|[116|[111|[32|[112|[97|[99|[107|[97|[103|[101|[32|[39|[126|[115|[39|[44|[32|[110|[111|[116|[32|[39|[126|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 227
																																		   [_cor0|[''|[_cor1|[]]]])
	      %% Line 228
	      <> when 'true' ->
		  %% Line 229
		  'ok'
	    end
'packages'/5 =
    %% Line 238
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 239
	    ( fun (_cor5) ->
		  %% Line 240
		  apply 'package'/5
		      (_cor5, _cor3, _cor2, _cor1, _cor0)
	      -| [{'id',{0,0,'-packages/5-fun-0-'}}] )
	in  %% Line 239
	    call 'lists':'foreach'
		(_cor7, _cor4)
'package'/5 =
    %% Line 244
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 245
	    case apply _cor2
		     (_cor4) of
	      %% Line 246
	      <[]> when 'true' ->
		  %% Line 247
		  []
	      %% Line 248
	      <File> when 'true' ->
		  %% Line 249
		  apply 'read_file'/4
		      (File, 'package', _cor1, _cor0)
	    end
	in  let <Data> =
		%% Line 251
		call 'edoc_data':'package'
		    (_cor4, _cor6, _cor1, _cor0)
	    in  let <F> =
		    %% Line 252
		    ( fun (_cor9) ->
			  %% Line 253
			  call _cor9:'package'
			      (Data, _cor0)
		      -| [{'id',{0,0,'-package/5-fun-0-'}}] )
		in  let <Text> =
			%% Line 255
			call 'edoc_lib':'run_layout'
			    (F, _cor0)
		    in  %% Line 256
			call 'edoc_lib':'write_file'
			    (Text, _cor3, [112|[97|[99|[107|[97|[103|[101|[45|[115|[117|[109|[109|[97|[114|[121|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]], _cor4)
'index_file'/3 =
    %% Line 262
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 273
	    case _cor1 of
	      %% Line 274
	      <'true'> when 'true' ->
		  %% Line 275
		  [[10]|[{'frameset',[{'rows',[51|[48|[37|[44|[55|[48|[37]]]]]]]}],[[10]|[{'frame',[{'src',[112|[97|[99|[107|[97|[103|[101|[115|[45|[102|[114|[97|[109|[101|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]}|[{'name',[112|[97|[99|[107|[97|[103|[101|[115|[70|[114|[97|[109|[101]]]]]]]]]]]]]}|[{'title',[]}]]],[]}|[[10]|[{'frame',[{'src',[109|[111|[100|[117|[108|[101|[115|[45|[102|[114|[97|[109|[101|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]}|[{'name',[109|[111|[100|[117|[108|[101|[115|[70|[114|[97|[109|[101]]]]]]]]]]]]}|[{'title',[]}]]],[]}|[[10]]]]]]}]]
	      %% Line 279
	      <'false'> when 'true' ->
		  %% Line 280
		  [[10]|[{'frame',[{'src',[109|[111|[100|[117|[108|[101|[115|[45|[102|[114|[97|[109|[101|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]}|[{'name',[109|[111|[100|[117|[108|[101|[115|[70|[114|[97|[109|[101]]]]]]]]]]]]}|[{'title',[]}]]],[]}|[[10]]]]
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
	in  let <_cor8> =
		%% Line 282
		call 'erlang':'++'
		    (_cor7, [[10]|[{'frame',[{'src',[111|[118|[101|[114|[118|[105|[101|[119|[45|[115|[117|[109|[109|[97|[114|[121|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]]}|[{'name',[111|[118|[101|[114|[118|[105|[101|[119|[70|[114|[97|[109|[101]]]]]]]]]]]]]}|[{'title',[]}]]],[]}|[[10]|[{'noframes',[[10]|[{'h2',[[84|[104|[105|[115|[32|[112|[97|[103|[101|[32|[117|[115|[101|[115|[32|[102|[114|[97|[109|[101|[115]]]]]]]]]]]]]]]]]]]]]]}|[[10]|[{'p',[[89|[111|[117|[114|[32|[98|[114|[111|[119|[115|[101|[114|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[97|[99|[99|[101|[112|[116|[32|[102|[114|[97|[109|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[10]|['br'|[[89|[111|[117|[32|[115|[104|[111|[117|[108|[100|[32|[103|[111|[32|[116|[111|[32|[116|[104|[101|[32]]]]]]]]]]]]]]]]]]]]]|[{'a',[{'href',[111|[118|[101|[114|[118|[105|[101|[119|[45|[115|[117|[109|[109|[97|[114|[121|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]]}],[[110|[111|[110|[45|[102|[114|[97|[109|[101|[32|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]}|[[32|[105|[110|[115|[116|[101|[97|[100|[46]]]]]]]]]|[[10]]]]]]]]}|[[10]]]]]]}|[[10]]]]]])
	    in  let <Frameset> =
		    %% Line 272
		    {'frameset',[{'cols',[50|[48|[37|[44|[56|[48|[37]]]]]]]}],_cor8}
		in  let <XML> =
			%% Line 295
			apply 'xhtml_1'/3
			    (_cor0, [], Frameset)
		    in  let <Text> =
			    %% Line 296
			    call 'xmerl':'export_simple'
				([XML|[]], 'xmerl_html', [])
			in  %% Line 297
			    call 'edoc_lib':'write_file'
				(Text, _cor2, [105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
'packages_frame'/4 =
    %% Line 299
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 306
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 311
			      P|_cor5]> when 'true' ->
				let <_cor8> =
				    %% Line 307
				    apply 'package_ref'/1
					(P)
				in  let <_cor7> =
					%% Line 310
					call 'erlang':'atom_to_list'
					    (P)
				    in  let <_cor9> =
					    %% Line 311
					    apply 'lc$^0'/1
						(_cor5)
					in  ( [[[10]|%% Line 307
						     [{'tr',[{'td',[],[{'a',[{'href',_cor8}|%% Line 308
											    [{'target',[111|[118|[101|[114|[118|[105|[101|[119|[70|[114|[97|[109|[101]]]]]]]]]]]]]}|[{'class',[112|[97|[99|[107|[97|[103|[101]]]]]]]}]]],%% Line 310
																													 [_cor7|[]]}|%% Line 310
																														     []]}|%% Line 310
																															  []]}|%% Line 310
																															       []]]|_cor9]
					      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  let <_cor11> =
		%% Line 305
		call 'lists':'concat'
		    (_cor10)
	    in  let <Body> =
		    %% Line 300
		    [[10]|%% Line 301
			  [{'h2',[{'class',[105|[110|[100|[101|[120|[116|[105|[116|[108|[101]]]]]]]]]]}],[[80|[97|[99|[107|[97|[103|[101|[115]]]]]]]]]}|%% Line 302
																			[[10]|%% Line 303
																			      [{'table',[{'width',[49|[48|[48|[37]]]]}|[{'border',0}|[{'summary',[108|[105|[115|[116|[32|[111|[102|[32|[112|[97|[99|[107|[97|[103|[101|[115]]]]]]]]]]]]]]]]}]]],_cor11}|%% Line 312
																																									[[10]]]]]]
		in  let <XML> =
			%% Line 313
			apply 'xhtml'/3
			    (_cor1, _cor0, Body)
		    in  let <Text> =
			    %% Line 314
			    call 'xmerl':'export_simple'
				([XML|[]], 'xmerl_html', [])
			in  %% Line 315
			    call 'edoc_lib':'write_file'
				(Text, _cor3, [112|[97|[99|[107|[97|[103|[101|[115|[45|[102|[114|[97|[109|[101|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]])
'modules_frame'/4 =
    %% Line 317
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 324
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 330
			      M|_cor5]> when 'true' ->
				let <_cor8> =
				    %% Line 326
				    apply 'module_ref'/1
					(M)
				in  let <_cor7> =
					%% Line 329
					call 'erlang':'atom_to_list'
					    (M)
				    in  let <_cor9> =
					    %% Line 330
					    apply 'lc$^0'/1
						(_cor5)
					in  ( [[[10]|%% Line 325
						     [{'tr',[{'td',[],%% Line 326
								      [{'a',[{'href',_cor8}|%% Line 327
											    [{'target',[111|[118|[101|[114|[118|[105|[101|[119|[70|[114|[97|[109|[101]]]]]]]]]]]]]}|[{'class',[109|[111|[100|[117|[108|[101]]]]]]}]]],%% Line 329
																												      [_cor7|[]]}|%% Line 329
																														  []]}|%% Line 329
																														       []]}|%% Line 329
																															    []]]|_cor9]
					      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  let <_cor11> =
		%% Line 323
		call 'lists':'concat'
		    (_cor10)
	    in  let <Body> =
		    %% Line 318
		    [[10]|%% Line 319
			  [{'h2',[{'class',[105|[110|[100|[101|[120|[116|[105|[116|[108|[101]]]]]]]]]]}],[[77|[111|[100|[117|[108|[101|[115]]]]]]]]}|%% Line 320
																		     [[10]|%% Line 321
																			   [{'table',[{'width',[49|[48|[48|[37]]]]}|[{'border',0}|[{'summary',[108|[105|[115|[116|[32|[111|[102|[32|[109|[111|[100|[117|[108|[101|[115]]]]]]]]]]]]]]]}]]],_cor11}|%% Line 331
																																								  [[10]]]]]]
		in  let <XML> =
			%% Line 332
			apply 'xhtml'/3
			    (_cor1, _cor0, Body)
		    in  let <Text> =
			    %% Line 333
			    call 'xmerl':'export_simple'
				([XML|[]], 'xmerl_html', [])
			in  %% Line 334
			    call 'edoc_lib':'write_file'
				(Text, _cor3, [109|[111|[100|[117|[108|[101|[115|[45|[102|[114|[97|[109|[101|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]])
'module_ref'/1 =
    %% Line 336
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 337
	    call 'edoc_refs':'relative_package_path'
		(_cor0, '')
	in  %% Line 337
	    call 'erlang':'++'
		(_cor1, [46|[104|[116|[109|[108]]]]])
'package_ref'/1 =
    %% Line 339
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 340
	    call 'edoc_refs':'relative_package_path'
		(_cor0, '')
	in  %% Line 340
	    call 'edoc_lib':'join_uri'
		(_cor1, %% Line 341
			[112|[97|[99|[107|[97|[103|[101|[45|[115|[117|[109|[109|[97|[114|[121|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]])
'xhtml'/3 =
    %% Line 343
    fun (_cor2,_cor1,_cor0) ->
	%% Line 344
	apply 'xhtml_1'/3
	    (_cor2, _cor1, {'body',[{'bgcolor',[119|[104|[105|[116|[101]]]]]}],_cor0})
'xhtml_1'/3 =
    %% Line 346
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 348
	    [[10]|[{'title',[_cor2|[]]}|[[10]|_cor1]]]
	in  %% Line 347
	    {'html',[[10]|%% Line 348
			  [{'head',_cor3}|%% Line 349
					  [[10]|%% Line 350
						[_cor0|%% Line 351
						       [[10]]]]]]}
'overview'/4 =
    %% Line 360
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 362
	    call 'filename':'join'
		(_cor3, [111|[118|[101|[114|[118|[105|[101|[119|[46|[101|[100|[111|[99]]]]]]]]]]]]])
	in  let <File> =
		%% Line 361
		call 'proplists':'get_value'
		    ('overview', _cor0, _cor4)
	    in  let <Encoding> =
		    %% Line 363
		    call 'edoc_lib':'read_encoding'
			(File, [{'in_comment_only','false'}])
		in  let <Tags> =
			%% Line 364
			apply 'read_file'/4
			    (File, 'overview', _cor1, _cor0)
		    in  let <Data0> =
			    %% Line 365
			    call 'edoc_data':'overview'
				(_cor2, Tags, _cor1, _cor0)
			in  let <_cor9> =
				%% Line 367
				call 'erlang':'atom_to_list'
				    (Encoding)
			    in  let <EncodingAttribute> =
				    %% Line 366
				    {'xmlAttribute','encoding',[],[],[],[],'undefined',[],_cor9,'undefined'}
				in  %% Line 368
				    case Data0 of
				      <{'xmlElement',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,As,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
					  let <_rec9> =
					      %% Line 369
					      [EncodingAttribute|As]
					  in  let <_cor15> =
						  %% Line 369
						  call 'erlang':'setelement'
						      (8, Data0, _rec9)
					      in  let <F> =
						      %% Line 370
						      ( fun (_cor17) ->
							    %% Line 371
							    call _cor17:'overview'
								(_cor15, _cor0)
							-| [{'id',{0,0,'-overview/4-fun-0-'}}] )
						  in  let <Text> =
							  %% Line 373
							  call 'edoc_lib':'run_layout'
							      (F, _cor0)
						      in  let <EncOpts> =
							      %% Line 374
							      [{'encoding',Encoding}|[]]
							  in  %% Line 375
							      call 'edoc_lib':'write_file'
								  (Text, _cor3, [111|[118|[101|[114|[118|[105|[101|[119|[45|[115|[117|[109|[109|[97|[114|[121|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]], '', EncOpts)
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor11})
					-| ['compiler_generated'] )
				    end
'copy_image'/1 =
    %% Line 377
    fun (_cor0) ->
	%% Line 378
	case call 'code':'priv_dir'
		 ('edoc') of
	  %% Line 379
	  <PrivDir>
	      when call 'erlang':'is_list'
		    (PrivDir) ->
	      let <From> =
		  %% Line 380
		  call 'filename':'join'
		      (PrivDir, [101|[114|[108|[97|[110|[103|[46|[112|[110|[103]]]]]]]]]])
	      in  let <_cor2> =
		      %% Line 381
		      call 'filename':'join'
			  (_cor0, [101|[114|[108|[97|[110|[103|[46|[112|[110|[103]]]]]]]]]])
		  in  %% Line 381
		      call 'edoc_lib':'copy_file'
			  (From, _cor2)
	  %% Line 382
	  <_cor5> when 'true' ->
	      do  %% Line 383
		  call 'edoc_report':'report'
		      ([99|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[100|[101|[102|[97|[117|[108|[116|[32|[105|[109|[97|[103|[101|[32|[102|[105|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		  %% Line 384
		  call 'erlang':'exit'
		      ('error')
	end
'copy_stylesheet'/2 =
    %% Line 390
    fun (_cor1,_cor0) ->
	%% Line 391
	case call 'proplists':'get_value'
		 ('stylesheet', _cor0) of
	  %% Line 392
	  <'undefined'> when 'true' ->
	      let <_cor4> =
		  %% Line 393
		  case call 'proplists':'get_value'
			   ('stylesheet_file', _cor0) of
		    %% Line 394
		    <File>
			when call 'erlang':'is_list'
			      (File) ->
			%% Line 395
			File
		    %% Line 396
		    <_cor10> when 'true' ->
			%% Line 397
			case call 'code':'priv_dir'
				 ('edoc') of
			  %% Line 398
			  <PrivDir>
			      when call 'erlang':'is_list'
				    (PrivDir) ->
			      %% Line 399
			      call 'filename':'join'
				  (PrivDir, [115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[46|[99|[115|[115]]]]]]]]]]]]]])
			  %% Line 400
			  <_cor11> when 'true' ->
			      do  %% Line 401
				  call 'edoc_report':'report'
				      ([99|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[100|[101|[102|[97|[117|[108|[116|[32|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[32|[102|[105|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 402
																															[])
				  %% Line 403
				  call 'erlang':'exit'
				      ('error')
			end
		  end
	      in  let <_cor6> =
		      %% Line 406
		      call 'filename':'join'
			  (_cor1, [115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[46|[99|[115|[115]]]]]]]]]]]]]])
		  in  %% Line 406
		      call 'edoc_lib':'copy_file'
			  (_cor4, _cor6)
	  %% Line 407
	  <_cor12> when 'true' ->
	      %% Line 408
	      'ok'
	end
'stylesheet'/1 =
    %% Line 414
    fun (_cor0) ->
	%% Line 415
	case call 'proplists':'get_value'
		 ('stylesheet', _cor0) of
	  %% Line 416
	  <[]> when 'true' ->
	      %% Line 417
	      []
	  %% Line 418
	  <S> when 'true' ->
	      let <_cor2> =
		  %% Line 419
		  case S of
		    %% Line 420
		    <'undefined'> when 'true' ->
			%% Line 421
			[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[46|[99|[115|[115]]]]]]]]]]]]]]
		    %% Line 422
		    <[]> when 'true' ->
			%% Line 423
			[]
		    %% Line 424
		    <_cor6>
			when call 'erlang':'is_list'
			      (S) ->
			%% Line 425
			S
		    %% Line 426
		    <_cor9> when 'true' ->
			do  %% Line 427
			    call 'edoc_report':'report'
				([98|[97|[100|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[111|[112|[116|[105|[111|[110|[32|[39|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 428
																												    [])
			    %% Line 429
			    call 'erlang':'exit'
				('error')
		  end
	      in  %% Line 431
		  [{'link',[{'rel',[115|[116|[121|[108|[101|[115|[104|[101|[101|[116]]]]]]]]]]}|%% Line 432
												[{'type',[116|[101|[120|[116|[47|[99|[115|[115]]]]]]]]}|%% Line 433
																			[{'href',_cor2}|%% Line 434
																					[{'title',[69|[68|[111|[99]]]]}]]]],%% Line 434
																									    []}|%% Line 435
																										[[10]]]
	end
'is_private'/1 =
    %% Line 438
    fun (_cor0) ->
	%% Line 439
	case apply 'get_attrval'/2
		 ('private', _cor0) of
	  %% Line 440
	  <[121|[101|[115]]]> when 'true' ->
	      'true'
	  %% Line 441
	  <_cor3> when 'true' ->
	      'false'
	end
'is_hidden'/1 =
    %% Line 444
    fun (_cor0) ->
	%% Line 445
	case apply 'get_attrval'/2
		 ('hidden', _cor0) of
	  %% Line 446
	  <[121|[101|[115]]]> when 'true' ->
	      'true'
	  %% Line 447
	  <_cor3> when 'true' ->
	      'false'
	end
'encoding'/1 =
    %% Line 450
    fun (_cor0) ->
	%% Line 451
	case apply 'get_attrval'/2
		 ('encoding', _cor0) of
	  %% Line 452
	  <[108|[97|[116|[105|[110|[49]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 453
	  <_cor3> when 'true' ->
	      'utf8'
	end
'get_attrval'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,As,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 457
	      case apply 'get_attr'/2
		       (Name, As) of
		%% Line 458
		<[{'xmlAttribute',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,V,_cor22}|[]]> when 'true' ->
		    %% Line 459
		    V
		%% Line 460
		<[]> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attrval',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attr'/2 =
    %% Line 463
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[A = {'xmlAttribute',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|As]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 464
		  apply 'get_attr'/2
		      (Name, As)
	      in  %% Line 464
		  [A|_cor2]
	  %% Line 465
	  <Name,[_cor14|As]> when 'true' ->
	      %% Line 466
	      apply 'get_attr'/2
		  (Name, As)
	  %% Line 467
	  <_cor15,[]> when 'true' ->
	      %% Line 468
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attr',2}}] )
	    -| ['compiler_generated'] )
	end
'read_file'/4 =
    %% Line 474
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 475
	case call 'edoc_extract':'file'
		 (_cor3, _cor2, _cor1, _cor0) of
	  %% Line 476
	  <{'ok',Tags}> when 'true' ->
	      %% Line 477
	      Tags
	  %% Line 478
	  <{'error',_cor9}> when 'true' ->
	      %% Line 479
	      []
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'toc'/2 =
    %% Line 492
    fun (_cor1,_cor0) ->
	%% Line 493
	( case _cor0 of
	    ( <( {'context',_cor13,_cor14,_rec11}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 496
		  apply 'app_index_file'/4
		      (_cor1, _cor13, _cor14, _rec11)
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','context'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'app_index_file'/4 =
    %% Line 503
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Title> =
	    %% Line 504
	    call 'proplists':'get_value'
		('title', _cor0, [79|[118|[101|[114|[118|[105|[101|[119]]]]]]]])
	in  let <CSS> =
		%% Line 506
		apply 'stylesheet'/1
		    (_cor0)
	    in  let <_cor12> =
		    %% Line 507
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor8) ->
				  case _cor8 of
				    <[A|_cor7]> when 'true' ->
					let <_cor10> =
					    call 'filename':'dirname'
						(A)
					in  let <_cor9> =
						call 'filename':'basename'
						    (A)
					    in  let <_cor11> =
						    apply 'lc$^0'/1
							(_cor7)
						in  ( [{_cor10,_cor9}|_cor11]
						      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor8> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor3)
		      -| ['list_comprehension'] )
		in  do  %% Line 508
			apply 'index_file'/3
			    (_cor2, 'false', Title)
			do  %% Line 509
			    apply 'application_frame'/4
				(_cor2, _cor12, Title, CSS)
			    do  %% Line 510
				apply 'modules_frame'/4
				    (_cor2, [], Title, CSS)
				do  %% Line 511
				    apply 'overview'/4
					(_cor2, Title, _cor1, _cor0)
				    %% Line 513
				    apply 'copy_stylesheet'/2
					(_cor2, _cor0)
'application_frame'/4 =
    %% Line 515
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 521
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 524
			      {Path,App}|_cor5]> when 'true' ->
				let <_cor7> =
				    apply 'app_ref'/2
					(Path, App)
				in  let <_cor8> =
					%% Line 524
					apply 'lc$^0'/1
					    (_cor5)
				    in  ( [[{'tr',[{'td',[],[{'a',[{'href',_cor7}|%% Line 522
										  [{'target',[95|[116|[111|[112]]]]}]],%% Line 523
														       [App|[]]}|%% Line 523
																 []]}|%% Line 523
																      []]}|%% Line 523
																	   []]|_cor8]
					  -| ['compiler_generated'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  %% Line 524
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  let <_cor10> =
		%% Line 520
		call 'lists':'concat'
		    (_cor9)
	    in  let <Body> =
		    %% Line 516
		    [[10]|%% Line 517
			  [{'h2',[[65|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115]]]]]]]]]]]]]}|%% Line 518
													 [[10]|%% Line 519
													       [{'table',[{'width',[49|[48|[48|[37]]]]}|[{'border',0}]],_cor10}|%% Line 525
																						[[10]]]]]]
		in  let <XML> =
			%% Line 526
			apply 'xhtml'/3
			    (_cor1, _cor0, Body)
		    in  let <Text> =
			    %% Line 527
			    call 'xmerl':'export_simple'
				([XML|[]], 'xmerl_html', [])
			in  %% Line 528
			    call 'edoc_lib':'write_file'
				(Text, _cor3, [109|[111|[100|[117|[108|[101|[115|[45|[102|[114|[97|[109|[101|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]])
'app_ref'/2 =
    %% Line 530
    fun (_cor1,_cor0) ->
	%% Line 531
	call 'filename':'join'
	    ([_cor1|[_cor0|[[100|[111|[99]]]|[[105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]]]]]])
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc_doclet')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc_doclet', _cor0)
end