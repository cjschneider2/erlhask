module 'edoc_scanner' ['format_error'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'string'/1,
		       'string'/2]
    attributes []
'string'/1 =
    %% Line 40
    fun (_cor0) ->
	apply 'string'/2
	    (_cor0, 1)
'string'/2 =
    %% Line 42
    fun (_cor1,_cor0) ->
	%% Line 43
	case apply 'scan'/2
		 (_cor1, _cor0) of
	  %% Line 44
	  <{'ok',Toks}> when 'true' ->
	      {'ok',Toks,_cor0}
	  %% Line 45
	  <{'error',E}> when 'true' ->
	      {'error',E,_cor0}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 51
    fun (_cor0) ->
	case _cor0 of
	  <{'string',Quote,Head}> when 'true' ->
	      let <_cor1> =
		  %% Line 52
		  call 'io_lib':'write_string'
		      (Head, Quote)
	      in  let <_cor2> =
		      %% Line 52
		      call 'erlang':'++'
			  ([117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32|[115|[116|[114|[105|[110|[103|[32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor1)
		  in  %% Line 52
		      [_cor2|[]]
	  %% Line 53
	  <{'illegal',Type}> when 'true' ->
	      call 'io_lib':'fwrite'
		  ([105|[108|[108|[101|[103|[97|[108|[32|[126|[119]]]]]]]]]], [Type|[]])
	  %% Line 54
	  <'char'> when 'true' ->
	      [117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 55
	  <'scan'> when 'true' ->
	      [112|[114|[101|[109|[97|[116|[117|[114|[101|[32|[101|[110|[100]]]]]]]]]]]]]
	  %% Line 56
	  <{'base',Base}> when 'true' ->
	      call 'io_lib':'fwrite'
		  ([105|[108|[108|[101|[103|[97|[108|[32|[98|[97|[115|[101|[32|[39|[126|[119|[39]]]]]]]]]]]]]]]]], [Base|[]])
	  %% Line 57
	  <'float'> when 'true' ->
	      [98|[97|[100|[32|[102|[108|[111|[97|[116]]]]]]]]]
	  %% Line 59
	  <Other> when 'true' ->
	      call 'io_lib':'write'
		  (Other)
	end
'reserved'/1 =
    %% Line 62
    fun (_cor0) ->
	case _cor0 of
	  <'where'> when 'true' ->
	      'true'
	  %% Line 63
	  <_cor2> when 'true' ->
	      'false'
	end
'scan'/2 =
    %% Line 76
    fun (_cor1,_cor0) ->
	%% Line 77
	apply 'scan1'/3
	    (_cor1, [], _cor0)
'scan1'/3 =
    %% Line 82
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[10|Cs],Toks,Pos> when 'true' ->
	      let <_cor3> =
		  %% Line 83
		  call 'erlang':'+'
		      (Pos, 1)
	      in  %% Line 83
		  apply 'scan1'/3
		      (Cs, Toks, _cor3)
	  %% Line 84
	  <[C|Cs],Toks,Pos>
	      when let <_cor4> =
		    call 'erlang':'>='
			(C, 0)
		in  let <_cor5> =
			call 'erlang':'=<'
			    (C, 32)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 85
	      apply 'scan1'/3
		  (Cs, Toks, Pos)
	  %% Line 86
	  <[C|Cs],Toks,Pos>
	      when let <_cor6> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor7> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 87
	      apply 'scan_atom'/4
		  (C, Cs, Toks, Pos)
	  %% Line 88
	  <[C|Cs],Toks,Pos>
	      when let <_cor8> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor9> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 89
	      apply 'scan_number'/4
		  (C, Cs, Toks, Pos)
	  %% Line 90
	  <[45|[C|Cs]],Toks,Pos>
	      when let <_cor10> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor11> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor10, _cor11) ->
	      %% Line 91
	      apply 'scan_signed_number'/5
		  (45, C, Cs, Toks, Pos)
	  %% Line 92
	  <[43|[C|Cs]],Toks,Pos>
	      when let <_cor12> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor13> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor12, _cor13) ->
	      %% Line 93
	      apply 'scan_signed_number'/5
		  (43, C, Cs, Toks, Pos)
	  %% Line 94
	  <[C|Cs],Toks,Pos>
	      when let <_cor14> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor15> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      %% Line 95
	      apply 'scan_variable'/4
		  (C, Cs, Toks, Pos)
	  %% Line 96
	  <[95|Cs],Toks,Pos> when 'true' ->
	      %% Line 97
	      apply 'scan_variable'/4
		  (95, Cs, Toks, Pos)
	  %% Line 98
	  <[36|Cs],Toks,Pos> when 'true' ->
	      %% Line 99
	      case apply 'scan_char_const'/3
		       (Cs, Toks, Pos) of
		%% Line 100
		<{'ok',Result}> when 'true' ->
		    %% Line 101
		    {'ok',Result}
		%% Line 102
		<{'error','truncated_char'}> when 'true' ->
		    %% Line 103
		    apply 'scan_error'/2
			('char', Pos)
		%% Line 104
		<{'error','illegal_character'}> when 'true' ->
		    %% Line 105
		    apply 'scan_error'/2
			({'illegal','char'}, Pos)
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 107
	  <[39|Cs0],Toks,Pos> when 'true' ->
	      %% Line 108
	      case apply 'scan_string'/3
		       (Cs0, 39, Pos) of
		%% Line 109
		<{S,Cs1,Pos1}> when 'true' ->
		    let <_cor17> =
			catch
			    %% Line 110
			    call 'erlang':'list_to_atom'
				(S)
		    in  %% Line 110
			case _cor17 of
			  %% Line 111
			  <A>
			      when call 'erlang':'is_atom'
				    (_cor17) ->
			      %% Line 112
			      apply 'scan1'/3
				  (Cs1, [{'atom',Pos,A}|Toks], Pos1)
			  %% Line 113
			  <_X_Error> when 'true' ->
			      apply 'scan_error'/2
				  ({'illegal','atom'}, Pos)
			end
		%% Line 115
		<{'error','premature_end'}> when 'true' ->
		    %% Line 116
		    apply 'scan_error'/2
			({'string',39,Cs0}, Pos)
		%% Line 117
		<{'error','truncated_char'}> when 'true' ->
		    %% Line 118
		    apply 'scan_error'/2
			('char', Pos)
		%% Line 119
		<{'error','illegal_character'}> when 'true' ->
		    %% Line 120
		    apply 'scan_error'/2
			({'illegal','atom'}, Pos)
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 122
	  <[34|Cs0],Toks,Pos> when 'true' ->
	      %% Line 123
	      case apply 'scan_string'/3
		       (Cs0, 34, Pos) of
		%% Line 124
		<{S,Cs1,Pos1}> when 'true' ->
		    %% Line 125
		    case Toks of
		      %% Line 126
		      <[{'string',Pos0,S0}|Toks1]> when 'true' ->
			  let <_cor20> =
			      %% Line 127
			      call 'erlang':'++'
				  (S0, S)
			  in  %% Line 127
			      apply 'scan1'/3
				  (Cs1, [{'string',Pos0,_cor20}|Toks1], %% Line 128
									Pos1)
		      %% Line 129
		      <_cor28> when 'true' ->
			  %% Line 130
			  apply 'scan1'/3
			      (Cs1, [{'string',Pos,S}|Toks], Pos1)
		    end
		%% Line 132
		<{'error','premature_end'}> when 'true' ->
		    %% Line 133
		    apply 'scan_error'/2
			({'string',34,Cs0}, Pos)
		%% Line 134
		<{'error','truncated_char'}> when 'true' ->
		    %% Line 135
		    apply 'scan_error'/2
			('char', Pos)
		%% Line 136
		<{'error','illegal_character'}> when 'true' ->
		    %% Line 137
		    apply 'scan_error'/2
			({'illegal','string'}, Pos)
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 140
	  <[61|[62|Cs]],Toks,Pos> when 'true' ->
	      %% Line 141
	      apply 'scan1'/3
		  (Cs, [{'=>',Pos}|Toks], Pos)
	  %% Line 142
	  <[60|[60|Cs]],Toks,Pos> when 'true' ->
	      %% Line 143
	      apply 'scan1'/3
		  (Cs, [{'<<',Pos}|Toks], Pos)
	  %% Line 144
	  <[62|[62|Cs]],Toks,Pos> when 'true' ->
	      %% Line 145
	      apply 'scan1'/3
		  (Cs, [{'>>',Pos}|Toks], Pos)
	  %% Line 146
	  <[45|[62|Cs]],Toks,Pos> when 'true' ->
	      %% Line 147
	      apply 'scan1'/3
		  (Cs, [{'->',Pos}|Toks], Pos)
	  %% Line 148
	  <[58|[58|Cs]],Toks,Pos> when 'true' ->
	      %% Line 149
	      apply 'scan1'/3
		  (Cs, [{'::',Pos}|Toks], Pos)
	  %% Line 150
	  <[47|[47|Cs]],Toks,Pos> when 'true' ->
	      %% Line 151
	      apply 'scan1'/3
		  (Cs, [{'//',Pos}|Toks], Pos)
	  %% Line 152
	  <[46|[46|[46|Cs]]],Toks,Pos> when 'true' ->
	      %% Line 153
	      apply 'scan1'/3
		  (Cs, [{'...',Pos}|Toks], Pos)
	  %% Line 154
	  <[46|[46|Cs]],Toks,Pos> when 'true' ->
	      %% Line 155
	      apply 'scan1'/3
		  (Cs, [{'..',Pos}|Toks], Pos)
	  %% Line 156
	  <[C|Cs],Toks,Pos> when 'true' ->
	      let <P> =
		  %% Line 157
		  call 'erlang':'list_to_atom'
		      ([C|[]])
	      in  %% Line 158
		  apply 'scan1'/3
		      (Cs, [{P,Pos}|Toks], Pos)
	  %% Line 159
	  <[],Toks0,_X_Pos> when 'true' ->
	      let <Toks> =
		  %% Line 160
		  call 'lists':'reverse'
		      (Toks0)
	      in  %% Line 161
		  {'ok',Toks}
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'scan1',3}}] )
	    -| ['compiler_generated'] )
	end
'scan_variable'/4 =
    %% Line 164
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 165
	case apply 'scan_name'/2
		 (_cor2, []) of
	  <{Wcs,Cs1}> when 'true' ->
	      let <_cor5> =
		  %% Line 166
		  call 'lists':'reverse'
		      (Wcs)
	      in  let <W> =
		      %% Line 166
		      [_cor3|_cor5]
		  in  %% Line 167
		      case W of
			%% Line 168
			<[95]> when 'true' ->
			    %% Line 169
			    apply 'scan1'/3
				(Cs1, [{'an_var',_cor0,'_'}|_cor1], _cor0)
			%% Line 170
			<_cor14> when 'true' ->
			    let <_cor7> =
				catch
				    %% Line 171
				    call 'erlang':'list_to_atom'
					(W)
			    in  %% Line 171
				case _cor7 of
				  %% Line 172
				  <A>
				      when call 'erlang':'is_atom'
					    (_cor7) ->
				      %% Line 173
				      apply 'scan1'/3
					  (Cs1, [{'var',_cor0,A}|_cor1], _cor0)
				  %% Line 174
				  <_cor15> when 'true' ->
				      %% Line 175
				      apply 'scan_error'/2
					  ({'illegal','variable'}, _cor0)
				end
		      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'scan_atom'/4 =
    %% Line 179
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 180
	case apply 'scan_name'/2
		 (_cor2, []) of
	  <{Wcs,Cs1}> when 'true' ->
	      let <_cor5> =
		  %% Line 181
		  call 'lists':'reverse'
		      (Wcs)
	      in  let <W> =
		      %% Line 181
		      [_cor3|_cor5]
		  in  let <_cor7> =
			  catch
			      %% Line 182
			      call 'erlang':'list_to_atom'
				  (W)
		      in  %% Line 182
			  case _cor7 of
			    %% Line 183
			    <A>
				when call 'erlang':'is_atom'
				      (_cor7) ->
				%% Line 184
				case apply 'reserved'/1
					 (A) of
				  %% Line 185
				  <'true'> when 'true' ->
				      %% Line 186
				      apply 'scan1'/3
					  (Cs1, [{A,_cor0}|_cor1], _cor0)
				  %% Line 187
				  <'false'> when 'true' ->
				      %% Line 188
				      apply 'scan1'/3
					  (Cs1, [{'atom',_cor0,A}|_cor1], _cor0)
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor8})
				    -| ['compiler_generated'] )
				end
			    %% Line 190
			    <_cor14> when 'true' ->
				%% Line 191
				apply 'scan_error'/2
				    ({'illegal','token'}, _cor0)
			  end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'scan_name'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],Ncs> when 'true' ->
	      %% Line 197
	      case apply 'name_char'/1
		       (C) of
		%% Line 198
		<'true'> when 'true' ->
		    %% Line 199
		    apply 'scan_name'/2
			(Cs, [C|Ncs])
		%% Line 200
		<'false'> when 'true' ->
		    %% Line 201
		    {Ncs,[C|Cs]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 203
	  <[],Ncs> when 'true' ->
	      %% Line 204
	      {Ncs,[]}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'scan_name',2}}] )
	    -| ['compiler_generated'] )
	end
'name_char'/1 =
    %% Line 206
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 207
	  <C>
	      when try
		    let <_cor3> =
			call 'erlang':'>='
			    (_cor0, 223)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(_cor0, 255)
			in  let <_cor5> =
				call 'erlang':'/='
				    (_cor0, 247)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 208
	  <C>
	      when let <_cor7> =
		    call 'erlang':'>='
			(_cor0, 65)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (_cor0, 90)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      'true'
	  %% Line 209
	  <C>
	      when try
		    let <_cor9> =
			call 'erlang':'>='
			    (_cor0, 192)
		    in  let <_cor10> =
			    call 'erlang':'=<'
				(_cor0, 222)
			in  let <_cor11> =
				call 'erlang':'/='
				    (_cor0, 215)
			    in  let <_cor12> =
				    call 'erlang':'and'
					(_cor10, _cor11)
				in  call 'erlang':'and'
					(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 210
	  <C>
	      when let <_cor13> =
		    call 'erlang':'>='
			(_cor0, 48)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (_cor0, 57)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      'true'
	  %% Line 211
	  <95> when 'true' ->
	      'true'
	  %% Line 212
	  <64> when 'true' ->
	      'true'
	  %% Line 213
	  <_cor16> when 'true' ->
	      'false'
	end
'scan_string'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	%% Line 219
	apply 'scan_string'/4
	    (_cor2, [], _cor1, _cor0)
'scan_string'/4 =
    %% Line 221
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Quote|Cs],Scs,_cor10,Pos>
	      when call 'erlang':'=:='
		    (_cor10,
		     Quote) ->
	      let <_cor4> =
		  %% Line 222
		  call 'lists':'reverse'
		      (Scs)
	      in  %% Line 222
		  {_cor4,Cs,Pos}
	  %% Line 223
	  <[],_X_Scs,_X_Quote,_X_Pos> when 'true' ->
	      %% Line 224
	      {'error','premature_end'}
	  %% Line 225
	  <Cs0,Scs,Quote,Pos> when 'true' ->
	      %% Line 226
	      case apply 'scan_char'/2
		       (Cs0, Pos) of
		%% Line 227
		<{C,Cs,Pos1}> when 'true' ->
		    %% Line 229
		    apply 'scan_string'/4
			(Cs, [C|Scs], Quote, Pos1)
		%% Line 230
		<Error> when 'true' ->
		    %% Line 231
		    Error
	      end
	end
'scan_char_const'/3 =
    %% Line 235
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[32|_X_Cs0],_X_Toks,_X_Pos> when 'true' ->
	      %% Line 236
	      {'error','illegal_character'}
	  %% Line 237
	  <Cs0,Toks,Pos> when 'true' ->
	      %% Line 238
	      case apply 'scan_char'/2
		       (Cs0, Pos) of
		%% Line 239
		<{C,Cs,Pos1}> when 'true' ->
		    %% Line 240
		    apply 'scan1'/3
			(Cs, [{'char',Pos,C}|Toks], Pos1)
		%% Line 241
		<Error> when 'true' ->
		    %% Line 242
		    Error
	      end
	end
'scan_char'/2 =
    %% Line 250
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[92|Cs],Pos> when 'true' ->
	      %% Line 251
	      apply 'scan_escape'/2
		  (Cs, Pos)
	  %% Line 252
	  <[C|_X_Cs],_X_Pos>
	      when call 'erlang':'=<'
		    (C,
		     31) ->
	      %% Line 253
	      {'error','illegal_character'}
	  %% Line 254
	  <[C|Cs],Pos> when 'true' ->
	      %% Line 255
	      {C,Cs,Pos}
	  %% Line 256
	  <[],_X_Pos> when 'true' ->
	      %% Line 257
	      {'error','truncated_char'}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'scan_char',2}}] )
	    -| ['compiler_generated'] )
	end
'scan_escape'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[O1|[O2|[O3|Cs]]],Pos>
	      when %% Line 262
		try
		    let <_cor2> =
			call 'erlang':'>='
			    (O1, 48)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(O1, 51)
			in  let <_cor4> =
				call 'erlang':'>='
				    (O2, 48)
			    in  let <_cor5> =
				    call 'erlang':'=<'
					(O2, 55)
				in  let <_cor6> =
					call 'erlang':'>='
					    (O3, 48)
				    in  let <_cor7> =
					    call 'erlang':'=<'
						(O3, 55)
					in  let <_cor8> =
						call 'erlang':'and'
						    (_cor6, _cor7)
					    in  let <_cor9> =
						    call 'erlang':'and'
							(_cor5, _cor8)
						in  let <_cor10> =
							call 'erlang':'and'
							    (_cor4, _cor9)
						    in  let <_cor11> =
							    call 'erlang':'and'
								(_cor3, _cor10)
							in  call 'erlang':'and'
								(_cor2, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 263
		  call 'erlang':'*'
		      (O1, 8)
	      in  let <_cor14> =
		      %% Line 263
		      call 'erlang':'+'
			  (_cor13, O2)
		  in  let <_cor15> =
			  %% Line 263
			  call 'erlang':'*'
			      (_cor14, 8)
		      in  let <_cor16> =
			      %% Line 263
			      call 'erlang':'+'
				  (_cor15, O3)
			  in  let <Val> =
				  %% Line 263
				  call 'erlang':'-'
				      (_cor16, 3504)
			      in  %% Line 264
				  {Val,Cs,Pos}
	  %% Line 265
	  <[O1|[O2|Cs]],Pos>
	      when %% Line 266
		try
		    let <_cor18> =
			call 'erlang':'>='
			    (O1, 48)
		    in  let <_cor19> =
			    call 'erlang':'=<'
				(O1, 55)
			in  let <_cor20> =
				call 'erlang':'>='
				    (O2, 48)
			    in  let <_cor21> =
				    call 'erlang':'=<'
					(O2, 55)
				in  let <_cor22> =
					call 'erlang':'and'
					    (_cor20, _cor21)
				    in  let <_cor23> =
					    call 'erlang':'and'
						(_cor19, _cor22)
					in  call 'erlang':'and'
						(_cor18, _cor23)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor25> =
		  %% Line 267
		  call 'erlang':'*'
		      (O1, 8)
	      in  let <_cor26> =
		      %% Line 267
		      call 'erlang':'+'
			  (_cor25, O2)
		  in  let <Val> =
			  %% Line 267
			  call 'erlang':'-'
			      (_cor26, 432)
		      in  %% Line 268
			  {Val,Cs,Pos}
	  %% Line 269
	  <[O1|Cs],Pos>
	      when let <_cor28> =
		    %% Line 270
		    call 'erlang':'>='
			(O1, 48)
		in  let <_cor29> =
			%% Line 270
			call 'erlang':'=<'
			    (O1, 55)
		    in  %% Line 270
			call 'erlang':'and'
			    (_cor28, _cor29) ->
	      let <_cor30> =
		  %% Line 271
		  call 'erlang':'-'
		      (O1, 48)
	      in  %% Line 271
		  {_cor30,Cs,Pos}
	  %% Line 272
	  <[94|[C|Cs]],Pos> when 'true' ->
	      %% Line 273
	      case <> of
		<>
		    when let <_cor31> =
			  call 'erlang':'>='
			      (C, 64)
		      in  let <_cor32> =
			      call 'erlang':'=<'
				  (C, 95)
			  in  call 'erlang':'and'
				  (_cor31, _cor32) ->
		    let <_cor33> =
			%% Line 274
			call 'erlang':'-'
			    (C, 64)
		    in  %% Line 274
			{_cor33,Cs,Pos}
		%% Line 275
		<> when 'true' ->
		    {'error','illegal_control_character'}
	      end
	  %% Line 277
	  <[C|Cs],Pos> when 'true' ->
	      %% Line 278
	      case apply 'escape_char'/1
		       (C) of
		%% Line 279
		<C1>
		    when call 'erlang':'>'
			  (C1,
			   0) ->
		    {C1,Cs,Pos}
		%% Line 280
		<_cor37> when 'true' ->
		    {'error','undefined_escape_sequence'}
	      end
	  %% Line 282
	  <[],_X_Pos> when 'true' ->
	      %% Line 283
	      {'error','truncated_char'}
	  ( <_cor36,_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35})
		  -| [{'function_name',{'scan_escape',2}}] )
	    -| ['compiler_generated'] )
	end
'escape_char'/1 =
    %% Line 286
    fun (_cor0) ->
	case _cor0 of
	  <98> when 'true' ->
	      8
	  %% Line 287
	  <100> when 'true' ->
	      127
	  %% Line 288
	  <101> when 'true' ->
	      27
	  %% Line 289
	  <102> when 'true' ->
	      12
	  %% Line 290
	  <110> when 'true' ->
	      10
	  %% Line 291
	  <114> when 'true' ->
	      13
	  %% Line 292
	  <115> when 'true' ->
	      32
	  %% Line 293
	  <116> when 'true' ->
	      9
	  %% Line 294
	  <118> when 'true' ->
	      11
	  %% Line 295
	  <92> when 'true' ->
	      92
	  %% Line 296
	  <39> when 'true' ->
	      39
	  %% Line 297
	  <34> when 'true' ->
	      34
	  %% Line 298
	  <_X_C> when 'true' ->
	      0
	end
'scan_number'/4 =
    %% Line 314
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 315
	case apply 'scan_integer'/3
		 (_cor2, [_cor3|[]], _cor0) of
	  <{Ncs,Cs,Pos1}> when 'true' ->
	      %% Line 316
	      apply 'scan_after_int'/5
		  (Cs, Ncs, _cor1, _cor0, Pos1)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'scan_signed_number'/5 =
    %% Line 318
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 319
	case apply 'scan_integer'/3
		 (_cor2, [_cor3|[_cor4|[]]], _cor0) of
	  <{Ncs,Cs,Pos1}> when 'true' ->
	      %% Line 320
	      apply 'scan_after_int'/5
		  (Cs, Ncs, _cor1, _cor0, Pos1)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'scan_integer'/3 =
    %% Line 322
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],Stack,Pos>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 323
	      apply 'scan_integer'/3
		  (Cs, [C|Stack], Pos)
	  %% Line 324
	  <Cs,Stack,Pos> when 'true' ->
	      %% Line 325
	      {Stack,Cs,Pos}
	end
'scan_after_int'/5 =
    %% Line 327
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[46|[C|Cs0]],Ncs0,Toks,SPos,CPos>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 328
	      case apply 'scan_integer'/3
		       (Cs0, [C|[46|Ncs0]], CPos) of
		<{Ncs,Cs,CPos1}> when 'true' ->
		    %% Line 329
		    apply 'scan_after_fraction'/5
			(Cs, Ncs, Toks, SPos, CPos1)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 330
	  <Cs,Ncs,Toks,SPos,CPos> when 'true' ->
	      let <_cor8> =
		  %% Line 331
		  call 'lists':'reverse'
		      (Ncs)
	      in  let <N> =
		      %% Line 331
		      call 'erlang':'list_to_integer'
			  (_cor8)
		  in  %% Line 332
		      apply 'scan1'/3
			  (Cs, [{'integer',SPos,N}|Toks], CPos)
	end
'scan_after_fraction'/5 =
    %% Line 334
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[69|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 335
	      apply 'scan_exponent'/5
		  (Cs, [69|Ncs], Toks, SPos, CPos)
	  %% Line 336
	  <[101|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 337
	      apply 'scan_exponent'/5
		  (Cs, [101|Ncs], Toks, SPos, CPos)
	  %% Line 338
	  <Cs,Ncs,Toks,SPos,CPos> when 'true' ->
	      let <_cor6> =
		  catch
		      let <_cor5> =
			  %% Line 339
			  call 'lists':'reverse'
			      (Ncs)
		      in  %% Line 339
			  call 'erlang':'list_to_float'
			      (_cor5)
	      in  %% Line 339
		  case _cor6 of
		    %% Line 340
		    <N>
			when call 'erlang':'is_float'
			      (_cor6) ->
			%% Line 341
			apply 'scan1'/3
			    (Cs, [{'float',SPos,N}|Toks], CPos)
		    %% Line 342
		    <_X_Error> when 'true' ->
			apply 'scan_error'/2
			    ({'illegal','float'}, SPos)
		  end
	end
'scan_exponent'/5 =
    %% Line 348
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[43|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 349
	      apply 'scan_exponent1'/5
		  (Cs, [43|Ncs], Toks, SPos, CPos)
	  %% Line 350
	  <[45|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 351
	      apply 'scan_exponent1'/5
		  (Cs, [45|Ncs], Toks, SPos, CPos)
	  %% Line 352
	  <Cs,Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 353
	      apply 'scan_exponent1'/5
		  (Cs, Ncs, Toks, SPos, CPos)
	end
'scan_exponent1'/5 =
    %% Line 355
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|Cs0],Ncs0,Toks,SPos,CPos>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 356
	      case apply 'scan_integer'/3
		       (Cs0, [C|Ncs0], CPos) of
		<{Ncs,Cs,CPos1}> when 'true' ->
		    let <_cor9> =
			catch
			    let <_cor8> =
				%% Line 357
				call 'lists':'reverse'
				    (Ncs)
			    in  %% Line 357
				call 'erlang':'list_to_float'
				    (_cor8)
		    in  %% Line 357
			case _cor9 of
			  %% Line 358
			  <N>
			      when call 'erlang':'is_float'
				    (_cor9) ->
			      %% Line 359
			      apply 'scan1'/3
				  (Cs, [{'float',SPos,N}|Toks], CPos1)
			  %% Line 360
			  <_X_Error> when 'true' ->
			      apply 'scan_error'/2
				  ({'illegal','float'}, SPos)
			end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 362
	  <_cor16,_cor17,_cor18,_cor19,CPos> when 'true' ->
	      %% Line 363
	      apply 'scan_error'/2
		  ('float', CPos)
	end
'scan_error'/2 =
    %% Line 365
    fun (_cor1,_cor0) ->
	%% Line 366
	{'error',{_cor0,'edoc_scanner',_cor1}}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc_scanner')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc_scanner', _cor0)
end