module 'edoc_refs' ['app'/1,
		    'app'/2,
		    'function'/2,
		    'function'/3,
		    'function'/4,
		    'get_uri'/2,
		    'is_top'/2,
		    'module'/1,
		    'module'/2,
		    'module'/3,
		    'module_info'/0,
		    'module_info'/1,
		    'package'/1,
		    'relative_module_path'/2,
		    'relative_package_path'/2,
		    'to_label'/1,
		    'to_string'/1,
		    'type'/1,
		    'type'/2,
		    'type'/3]
    attributes []
'app'/1 =
    %% Line 44
    fun (_cor0) ->
	%% Line 45
	{'app',_cor0}
'app'/2 =
    %% Line 47
    fun (_cor1,_cor0) ->
	%% Line 48
	{'app',_cor1,_cor0}
'module'/1 =
    %% Line 50
    fun (_cor0) ->
	%% Line 51
	{'module',_cor0}
'module'/2 =
    %% Line 53
    fun (_cor1,_cor0) ->
	%% Line 54
	{'module',_cor1,_cor0}
'module'/3 =
    %% Line 56
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 57
	    apply 'module'/2
		(_cor1, _cor0)
	in  %% Line 57
	    apply 'app'/2
		(_cor2, _cor3)
'package'/1 =
    %% Line 59
    fun (_cor0) ->
	%% Line 60
	{'package',_cor0}
'function'/2 =
    %% Line 62
    fun (_cor1,_cor0) ->
	%% Line 63
	{'function',_cor1,_cor0}
'function'/3 =
    %% Line 65
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 66
	    apply 'function'/2
		(_cor1, _cor0)
	in  %% Line 66
	    apply 'module'/2
		(_cor2, _cor3)
'function'/4 =
    %% Line 68
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 69
	    apply 'function'/2
		(_cor1, _cor0)
	in  %% Line 69
	    apply 'module'/3
		(_cor3, _cor2, _cor4)
'type'/1 =
    %% Line 71
    fun (_cor0) ->
	%% Line 72
	{'type',_cor0}
'type'/2 =
    %% Line 74
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 75
	    apply 'type'/1
		(_cor0)
	in  %% Line 75
	    apply 'module'/2
		(_cor1, _cor2)
'type'/3 =
    %% Line 77
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 78
	    apply 'type'/1
		(_cor0)
	in  %% Line 78
	    apply 'module'/3
		(_cor2, _cor1, _cor3)
'to_string'/1 =
    %% Line 83
    fun (_cor0) ->
	case _cor0 of
	  <{'app',A}> when 'true' ->
	      let <_cor1> =
		  %% Line 84
		  call 'erlang':'atom_to_list'
		      (A)
	      in  %% Line 84
		  [47|[47|_cor1]]
	  %% Line 85
	  <{'app',A,Ref}> when 'true' ->
	      let <_cor4> =
		  %% Line 86
		  call 'erlang':'atom_to_list'
		      (A)
	      in  let <_cor2> =
		      %% Line 86
		      apply 'to_string'/1
			  (Ref)
		  in  let <_cor3> =
			  %% Line 86
			  [47|_cor2]
		      in  let <_cor5> =
			      %% Line 86
			      call 'erlang':'++'
				  (_cor4, _cor3)
			  in  %% Line 86
			      [47|[47|_cor5]]
	  %% Line 87
	  <{'module',M}> when 'true' ->
	      %% Line 88
	      call 'erlang':'atom_to_list'
		  (M)
	  %% Line 89
	  <{'module',M,Ref}> when 'true' ->
	      let <_cor8> =
		  %% Line 90
		  call 'erlang':'atom_to_list'
		      (M)
	      in  let <_cor6> =
		      %% Line 90
		      apply 'to_string'/1
			  (Ref)
		  in  let <_cor7> =
			  %% Line 90
			  [58|_cor6]
		      in  %% Line 90
			  call 'erlang':'++'
			      (_cor8, _cor7)
	  %% Line 91
	  <{'package',P}> when 'true' ->
	      let <_cor9> =
		  %% Line 92
		  call 'erlang':'atom_to_list'
		      (P)
	      in  %% Line 92
		  call 'erlang':'++'
		      (_cor9, [46|[42]])
	  %% Line 93
	  <{'function',F,A}> when 'true' ->
	      let <_cor12> =
		  %% Line 94
		  call 'erlang':'atom_to_list'
		      (F)
	      in  let <_cor10> =
		      %% Line 94
		      call 'erlang':'integer_to_list'
			  (A)
		  in  let <_cor11> =
			  %% Line 94
			  [47|_cor10]
		      in  %% Line 94
			  call 'erlang':'++'
			      (_cor12, _cor11)
	  %% Line 95
	  <{'type',T}> when 'true' ->
	      let <_cor13> =
		  %% Line 96
		  call 'erlang':'atom_to_list'
		      (T)
	      in  %% Line 96
		  call 'erlang':'++'
		      (_cor13, [40|[41]])
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'to_label'/1 =
    %% Line 101
    fun (_cor0) ->
	case _cor0 of
	  <{'function',F,A}> when 'true' ->
	      let <_cor3> =
		  %% Line 102
		  call 'erlang':'atom_to_list'
		      (F)
	      in  let <_cor4> =
		      %% Line 102
		      call 'edoc_lib':'escape_uri'
			  (_cor3)
		  in  let <_cor1> =
			  %% Line 102
			  call 'erlang':'integer_to_list'
			      (A)
		      in  let <_cor2> =
			      %% Line 102
			      [45|_cor1]
			  in  %% Line 102
			      call 'erlang':'++'
				  (_cor4, _cor2)
	  %% Line 103
	  <{'type',T}> when 'true' ->
	      let <_cor5> =
		  %% Line 104
		  call 'erlang':'atom_to_list'
		      (T)
	      in  let <_cor6> =
		      %% Line 104
		      call 'edoc_lib':'escape_uri'
			  (_cor5)
		  in  %% Line 104
		      call 'erlang':'++'
			  ([116|[121|[112|[101|[45]]]]], _cor6)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'to_label',1}}] )
	    -| ['compiler_generated'] )
	end
'get_uri'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'app',App},Env> when 'true' ->
	      let <_cor2> =
		  %% Line 107
		  apply 'app_ref'/2
		      (App, Env)
	      in  %% Line 107
		  call 'edoc_lib':'join_uri'
		      (_cor2, [105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
	  %% Line 108
	  <{'app',App,Ref},Env> when 'true' ->
	      %% Line 109
	      apply 'app_ref'/3
		  (App, Ref, Env)
	  %% Line 110
	  <{'module',M,Ref},Env> when 'true' ->
	      let <_cor5> =
		  %% Line 111
		  apply 'module_ref'/2
		      (M, Env)
	      in  let <_cor3> =
		      %% Line 111
		      apply 'to_label'/1
			  (Ref)
		  in  let <_cor4> =
			  %% Line 111
			  [35|_cor3]
		      in  %% Line 111
			  call 'erlang':'++'
			      (_cor5, _cor4)
	  %% Line 112
	  <{'module',M},Env> when 'true' ->
	      %% Line 113
	      apply 'module_ref'/2
		  (M, Env)
	  %% Line 114
	  <{'package',P},Env> when 'true' ->
	      %% Line 115
	      apply 'package_ref'/2
		  (P, Env)
	  %% Line 116
	  <Ref,_X_Env> when 'true' ->
	      let <_cor6> =
		  %% Line 117
		  apply 'to_label'/1
		      (Ref)
	      in  %% Line 117
		  [35|_cor6]
	end
'abs_uri'/2 =
    %% Line 119
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'module',M},Env> when 'true' ->
	      %% Line 120
	      apply 'module_absref'/2
		  (M, Env)
	  %% Line 121
	  <{'module',M,Ref},Env> when 'true' ->
	      let <_cor4> =
		  %% Line 122
		  apply 'module_absref'/2
		      (M, Env)
	      in  let <_cor2> =
		      %% Line 122
		      apply 'to_label'/1
			  (Ref)
		  in  let <_cor3> =
			  %% Line 122
			  [35|_cor2]
		      in  %% Line 122
			  call 'erlang':'++'
			      (_cor4, _cor3)
	  %% Line 123
	  <{'package',P},Env> when 'true' ->
	      %% Line 124
	      apply 'package_absref'/2
		  (P, Env)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'abs_uri',2}}] )
	    -| ['compiler_generated'] )
	end
'module_ref'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	%% Line 127
	( case _cor0 of
	    ( <( {'env',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_rec0,_cor22,_cor23,_cor24,_cor25}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply _rec0
			   (_cor1) of
		    %% Line 128
		    <[]> when 'true' ->
			let <_cor6> =
			    %% Line 129
			    call 'erlang':'atom_to_list'
				(_cor1)
			in  let <File> =
				%% Line 129
				call 'erlang':'++'
				    (_cor6, _cor19)
			    in  let <Path> =
				    %% Line 130
				    apply 'relative_module_path'/2
					(_cor1, _cor17)
				in  let <_cor11> =
					%% Line 131
					call 'edoc_lib':'escape_uri'
					    (File)
				    in  %% Line 131
					call 'edoc_lib':'join_uri'
					    (Path, _cor11)
		    %% Line 132
		    <Base> when 'true' ->
			let <_cor12> =
			    %% Line 133
			    apply 'module_absref'/2
				(_cor1, _cor0)
			in  %% Line 133
			    call 'edoc_lib':'join_uri'
				(Base, _cor12)
		  end
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','env'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_absref'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 137
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <_cor6> =
		%% Line 137
		call 'edoc_lib':'escape_uri'
		    (_cor5)
	    in  %% Line 137
		( case _cor0 of
		    ( <( {'env',_cor9,_cor10,_cor11,_rec3,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor4> =
			      call 'edoc_lib':'escape_uri'
				  (_rec3)
			  in  call 'erlang':'++'
				  (_cor6, _cor4)
		      -| ['compiler_generated'] )
		    ( <_cor19> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','env'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'package_ref'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	%% Line 140
	( case _cor0 of
	    ( <( {'env',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_rec4,_cor21,_cor22,_cor23}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply _rec4
			   (_cor1) of
		    %% Line 141
		    <[]> when 'true' ->
			let <_cor9> =
			    %% Line 142
			    apply 'relative_package_path'/2
				(_cor1, _cor15)
			in  let <_cor6> =
				%% Line 143
				call 'edoc_lib':'escape_uri'
				    (_cor18)
			    in  %% Line 142
				call 'edoc_lib':'join_uri'
				    (_cor9, _cor6)
		    %% Line 144
		    <Base> when 'true' ->
			let <_cor10> =
			    %% Line 145
			    apply 'package_absref'/2
				(_cor1, _cor0)
			in  %% Line 145
			    call 'edoc_lib':'join_uri'
				(Base, _cor10)
		  end
	      -| ['compiler_generated'] )
	    ( <_cor24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','env'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'package_absref'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 149
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <_cor6> =
		%% Line 149
		call 'edoc_lib':'escape_uri'
		    (_cor5)
	    in  %% Line 150
		( case _cor0 of
		    ( <( {'env',_cor9,_cor10,_cor11,_cor12,_rec7,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor4> =
			      call 'edoc_lib':'escape_uri'
				  (_rec7)
			  in  call 'edoc_lib':'join_uri'
				  (_cor6, _cor4)
		      -| ['compiler_generated'] )
		    ( <_cor19> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','env'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'app_ref'/2 =
    %% Line 152
    fun (_cor1,_cor0) ->
	%% Line 153
	( case _cor0 of
	    ( <( {'env',_cor12,_cor13,_cor14,_cor15,_cor16,_rec8,_cor17,_cor18,_cor19,_cor20,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply _rec8
			   (_cor1) of
		    %% Line 154
		    <[]> when 'true' ->
			let <_cor4> =
			    %% Line 156
			    call 'erlang':'atom_to_list'
				(_cor1)
			in  let <_cor5> =
				%% Line 156
				call 'edoc_lib':'escape_uri'
				    (_cor4)
			    in  let <_cor6> =
				    %% Line 156
				    call 'edoc_lib':'join_uri'
					(_cor5, [100|[111|[99]]])
				in  %% Line 155
				    call 'edoc_lib':'join_uri'
					(_cor19, _cor6)
		    %% Line 157
		    <Base> when 'true' ->
			%% Line 158
			Base
		  end
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','env'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'app_ref'/3 =
    %% Line 161
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 162
	    apply 'app_ref'/2
		(_cor2, _cor0)
	in  let <_cor3> =
		%% Line 162
		apply 'abs_uri'/2
		    (_cor1, _cor0)
	    in  %% Line 162
		call 'edoc_lib':'join_uri'
		    (_cor4, _cor3)
'is_top'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'app',_X_App},_X_Env> when 'true' ->
	      %% Line 165
	      'true'
	  %% Line 166
	  <_X_Ref,_X_Env> when 'true' ->
	      %% Line 167
	      'false'
	end
'join_segments'/1 =
    %% Line 171
    fun (_cor0) ->
	case _cor0 of
	  <[S|[]]> when 'true' ->
	      %% Line 172
	      call 'edoc_lib':'escape_uri'
		  (S)
	  %% Line 173
	  <[S|Ss]> when 'true' ->
	      let <_cor2> =
		  %% Line 174
		  call 'edoc_lib':'escape_uri'
		      (S)
	      in  let <_cor1> =
		      %% Line 174
		      apply 'join_segments'/1
			  (Ss)
		  in  %% Line 174
		      call 'edoc_lib':'join_uri'
			  (_cor2, _cor1)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'join_segments',1}}] )
	    -| ['compiler_generated'] )
	end
'relative_module_path'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	%% Line 182
	[]
'relative_package_path'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 185
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <_cor2> =
		%% Line 185
		call 'erlang':'atom_to_list'
		    (_cor0)
	    in  %% Line 185
		apply 'relative_path'/2
		    ([_cor3|[]], [_cor2|[]])
'relative_path'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ts,[[]|Fs]> when 'true' ->
	      %% Line 192
	      apply 'relative_path'/2
		  (Ts, Fs)
	  %% Line 193
	  <[[]|Ts],Fs> when 'true' ->
	      %% Line 194
	      apply 'relative_path'/2
		  (Ts, Fs)
	  %% Line 195
	  <Ts,Fs> when 'true' ->
	      %% Line 196
	      apply 'relative_path_1'/2
		  (Ts, Fs)
	end
'relative_path_1'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|Ts],[F|Fs]>
	      when call 'erlang':'=='
		    (F,
		     T) ->
	      %% Line 199
	      apply 'relative_path_1'/2
		  (Ts, Fs)
	  %% Line 200
	  <Ts,Fs> when 'true' ->
	      %% Line 201
	      apply 'relative_path_2'/2
		  (Fs, Ts)
	end
'relative_path_2'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[_X_F|Fs],Ts> when 'true' ->
	      %% Line 204
	      apply 'relative_path_2'/2
		  (Fs, [[46|[46]]|Ts])
	  %% Line 205
	  <[],[]> when 'true' ->
	      %% Line 206
	      []
	  %% Line 207
	  <[],Ts> when 'true' ->
	      %% Line 208
	      apply 'join_segments'/1
		  (Ts)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'relative_path_2',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc_refs')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc_refs', _cor0)
end