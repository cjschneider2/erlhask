module 'edoc_run' ['application'/1,
		   'file'/1,
		   'files'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'packages'/1,
		   'toc'/1]
    attributes [%% Line 162
		'spec' =
		    %% Line 162
		    [{{'invalid_args',2},[{'type',162,'fun',[{'type',162,'product',[{'type',162,'string',[]}|[{'type',162,'list',[]}]]}|[{'type',162,'no_return',[]}]]}]}]]
'application'/1 =
    %% Line 61
    fun (_cor0) ->
	let <F> =
	    %% Line 62
	    ( fun () ->
		  %% Line 63
		  case apply 'parse_args'/1
			   (_cor0) of
		    %% Line 64
		    <[App|[]]> when 'true' ->
			call 'edoc':'application'
			    (App)
		    %% Line 65
		    <[App|[Opts|[]]]> when 'true' ->
			call 'edoc':'application'
			    (App, Opts)
		    %% Line 66
		    <[App|[Dir|[Opts|[]]]]> when 'true' ->
			call 'edoc':'application'
			    (App, Dir, Opts)
		    %% Line 67
		    <_cor4> when 'true' ->
			%% Line 68
			apply 'invalid_args'/2
			    ([101|[100|[111|[99|[95|[114|[117|[110|[58|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[47|[49]]]]]]]]]]]]]]]]]]]]]], _cor0)
		  end
	      -| [{'id',{0,0,'-application/1-fun-0-'}}] )
	in  %% Line 71
	    apply 'run'/1
		(F)
'files'/1 =
    %% Line 84
    fun (_cor0) ->
	let <F> =
	    %% Line 85
	    ( fun () ->
		  %% Line 86
		  case apply 'parse_args'/1
			   (_cor0) of
		    %% Line 87
		    <[Files|[]]> when 'true' ->
			call 'edoc':'files'
			    (Files)
		    %% Line 88
		    <[Files|[Opts|[]]]> when 'true' ->
			call 'edoc':'files'
			    (Files, Opts)
		    %% Line 89
		    <_cor4> when 'true' ->
			%% Line 90
			apply 'invalid_args'/2
			    ([101|[100|[111|[99|[95|[114|[117|[110|[58|[102|[105|[108|[101|[115|[47|[49]]]]]]]]]]]]]]]], _cor0)
		  end
	      -| [{'id',{0,0,'-files/1-fun-0-'}}] )
	in  %% Line 93
	    apply 'run'/1
		(F)
'packages'/1 =
    %% Line 106
    fun (_cor0) ->
	let <F> =
	    %% Line 107
	    ( fun () ->
		  %% Line 108
		  case apply 'parse_args'/1
			   (_cor0) of
		    %% Line 109
		    <[Packages|[]]> when 'true' ->
			call 'edoc':'packages'
			    (Packages)
		    %% Line 110
		    <[Packages|[Opts|[]]]> when 'true' ->
			call 'edoc':'packages'
			    (Packages, Opts)
		    %% Line 111
		    <_cor4> when 'true' ->
			%% Line 112
			apply 'invalid_args'/2
			    ([101|[100|[111|[99|[95|[114|[117|[110|[58|[112|[97|[99|[107|[97|[103|[101|[115|[47|[49]]]]]]]]]]]]]]]]]]], _cor0)
		  end
	      -| [{'id',{0,0,'-packages/1-fun-0-'}}] )
	in  %% Line 115
	    apply 'run'/1
		(F)
'toc'/1 =
    %% Line 118
    fun (_cor0) ->
	let <F> =
	    %% Line 119
	    ( fun () ->
		  %% Line 120
		  case apply 'parse_args'/1
			   (_cor0) of
		    %% Line 121
		    <[Dir|[Paths|[]]]> when 'true' ->
			call 'edoc':'toc'
			    (Dir, Paths)
		    %% Line 122
		    <[Dir|[Paths|[Opts|[]]]]> when 'true' ->
			call 'edoc':'toc'
			    (Dir, Paths, Opts)
		    %% Line 123
		    <_cor4> when 'true' ->
			%% Line 124
			apply 'invalid_args'/2
			    ([101|[100|[111|[99|[95|[114|[117|[110|[58|[116|[111|[99|[47|[49]]]]]]]]]]]]]], _cor0)
		  end
	      -| [{'id',{0,0,'-toc/1-fun-0-'}}] )
	in  %% Line 127
	    apply 'run'/1
		(F)
'file'/1 =
    %% Line 151
    fun (_cor0) ->
	let <F> =
	    %% Line 152
	    ( fun () ->
		  %% Line 153
		  case apply 'parse_args'/1
			   (_cor0) of
		    %% Line 154
		    <[File|[]]> when 'true' ->
			call 'edoc':'file'
			    (File, [])
		    %% Line 155
		    <[File|[Opts|[]]]> when 'true' ->
			call 'edoc':'file'
			    (File, Opts)
		    %% Line 156
		    <_cor4> when 'true' ->
			%% Line 157
			apply 'invalid_args'/2
			    ([101|[100|[111|[99|[95|[114|[117|[110|[58|[102|[105|[108|[101|[47|[49]]]]]]]]]]]]]]], _cor0)
		  end
	      -| [{'id',{0,0,'-file/1-fun-0-'}}] )
	in  %% Line 160
	    apply 'run'/1
		(F)
'invalid_args'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	do  %% Line 165
	    call 'edoc_report':'report'
		([105|[110|[118|[97|[108|[105|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[116|[111|[32|[126|[116|[115|[58|[32|[126|[119|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[_cor0|[]]])
	    %% Line 166
	    apply 'shutdown_error'/0
		()
'run'/1 =
    %% Line 168
    fun (_cor0) ->
	do  %% Line 169
	    apply 'wait_init'/0
		()
	    let <_cor2> =
		catch
		    let <_cor1> =
			%% Line 170
			apply _cor0
			    ()
		    in  %% Line 170
			{'ok',_cor1}
	    in  %% Line 170
		case _cor2 of
		  %% Line 171
		  <{'ok',_cor5}> when 'true' ->
		      %% Line 172
		      apply 'shutdown_ok'/0
			  ()
		  %% Line 173
		  <{'EXIT',E}> when 'true' ->
		      do  %% Line 174
			  call 'edoc_report':'report'
			      ([101|[100|[111|[99|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32|[97|[98|[110|[111|[114|[109|[97|[108|[108|[121|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [E|[10]])
			  %% Line 175
			  apply 'shutdown_error'/0
			      ()
		  %% Line 176
		  <Thrown> when 'true' ->
		      do  %% Line 177
			  call 'edoc_report':'report'
			      ([105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[58|[32|[116|[104|[114|[111|[119|[32|[119|[105|[116|[104|[111|[117|[116|[32|[99|[97|[116|[99|[104|[32|[105|[110|[32|[101|[100|[111|[99|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 178
																																						[Thrown|[15]])
			  %% Line 179
			  apply 'shutdown_error'/0
			      ()
		end
'wait_init'/0 =
    %% Line 182
    fun () ->
	%% Line 183
	case call 'erlang':'whereis'
		 ('code_server') of
	  %% Line 184
	  <'undefined'> when 'true' ->
	      do  %% Line 185
		  call 'erlang':'yield'
		      ()
		  %% Line 186
		  apply 'wait_init'/0
		      ()
	  %% Line 187
	  <_cor1> when 'true' ->
	      %% Line 188
	      'ok'
	end
'shutdown_ok'/0 =
    %% Line 194
    fun () ->
	%% Line 196
	call 'init':'stop'
	    ()
'shutdown_error'/0 =
    %% Line 198
    fun () ->
	do  %% Line 200
	    receive
	      
	    after 1000 ->
	      'ok'
	    %% Line 202
	    call 'erlang':'halt'
		(1)
'parse_args'/1 =
    %% Line 204
    fun (_cor0) ->
	case _cor0 of
	  <[A|As]>
	      when call 'erlang':'is_atom'
		    (A) ->
	      let <_cor1> =
		  %% Line 205
		  call 'erlang':'atom_to_list'
		      (A)
	      in  let <_cor2> =
		      %% Line 205
		      apply 'parse_arg'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 205
			  apply 'parse_args'/1
			      (As)
		      in  %% Line 205
			  [_cor2|_cor3]
	  %% Line 206
	  <[A|As]> when 'true' ->
	      let <_cor4> =
		  %% Line 207
		  apply 'parse_arg'/1
		      (A)
	      in  let <_cor5> =
		      %% Line 207
		      apply 'parse_args'/1
			  (As)
		  in  %% Line 207
		      [_cor4|_cor5]
	  %% Line 208
	  <[]> when 'true' ->
	      %% Line 209
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'parse_args',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_arg'/1 =
    %% Line 211
    fun (_cor0) ->
	let <_cor2> =
	    catch
		let <_cor1> =
		    %% Line 212
		    call 'edoc_lib':'parse_expr'
			(_cor0, 1)
		in  %% Line 212
		    {'ok',_cor1}
	in  %% Line 212
	    case _cor2 of
	      %% Line 213
	      <{'ok',Expr}> when 'true' ->
		  let <_cor3> =
		      catch
			  %% Line 214
			  call 'erl_parse':'normalise'
			      (Expr)
		  in  %% Line 214
		      case _cor3 of
			%% Line 215
			<{'EXIT',_cor7}> when 'true' ->
			    do  %% Line 216
				call 'edoc_report':'report'
				    ([98|[97|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[58|[32|[39|[126|[116|[115|[39|[58]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
				%% Line 217
				call 'erlang':'exit'
				    ('error')
			%% Line 218
			<Term> when 'true' ->
			    %% Line 219
			    Term
		      end
	      %% Line 221
	      <{'error',_cor8,D}> when 'true' ->
		  do  %% Line 222
		      call 'edoc_report':'report'
			  ([101|[114|[114|[111|[114|[32|[112|[97|[114|[115|[105|[110|[103|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
		      do  %% Line 223
			  call 'edoc_report':'error'
			      (D)
			  %% Line 224
			  call 'erlang':'exit'
			      ('error')
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc_run')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc_run', _cor0)
end